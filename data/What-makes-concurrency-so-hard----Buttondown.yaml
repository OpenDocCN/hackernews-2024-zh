- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:17:26'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:17:26'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: What makes concurrency so hard? • Buttondown
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么并发如此困难？ • Buttondown
- en: 来源：[https://buttondown.email/hillelwayne/archive/what-makes-concurrency-so-hard/](https://buttondown.email/hillelwayne/archive/what-makes-concurrency-so-hard/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://buttondown.email/hillelwayne/archive/what-makes-concurrency-so-hard/](https://buttondown.email/hillelwayne/archive/what-makes-concurrency-so-hard/)
- en: <date>April 16, 2024</date>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <date>2024年4月16日</date>
- en: What makes concurrency so hard?
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么并发如此困难？
- en: Is it something about human brains, or something about the problem domain?
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 是人类大脑的某种特性，还是问题域的某些因素导致了这种情况？
- en: A lot of my formal specification projects involve concurrent or distributed
    system. That's in the sweet spot of "difficult to get right" and "severe costs
    to getting it wrong" that leads to people spending time and money on writing specifications.
    Given its relevance to my job, I spend an awful lot of time thinking about the
    nature of concurrency.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我的许多正式规范项目涉及并发或分布式系统。这正是“难以正确完成”和“错误的代价高昂”的甜蜜点，这导致人们在编写规范时花费时间和金钱。考虑到它对我的工作的相关性，我花费了大量时间思考并发的本质。
- en: 'As the old joke goes, concurrency one of the two hardest things in computer
    science. There are lots of "accidental" reasons why: it''s hard to test, it''s
    [not composable](https://stefan-marr.de/2014/07/why-is-concurrent-programming-hard/),
    bugs can stay latent for a long time, etc. Is there anything that makes it *essentially*
    hard? Something that makes concurrent software, by its very nature, more difficult
    to write than synchronous software?'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如一个老笑话所说，"并发是计算机科学中最难的两件事之一。"存在许多“偶然”的原因：测试困难，[不可组合性](https://stefan-marr.de/2014/07/why-is-concurrent-programming-hard/)，bug可能长时间潜伏等。但有什么是
    *本质上* 使它如此困难的？有什么使并发软件本质上比同步软件更难编写的因素？
- en: 'The reason I hear most often is that humans think linearly, not concurrently,
    so are ill-equipped to reason about race conditions. I disagree: in my experience,
    humans are *very* good at concurrent reasoning. We do concurrent reasoning every
    time we drive a car!'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常听到的原因是，人类思维是线性的，而不是并发的，因此不适合推理竞争条件。但我并不同意：根据我的经验，人类在并发推理方面非常擅长。每次开车时，我们都在进行并发推理！
- en: More generally, some studies find that if you frame [concurrent systems in human
    terms](https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=77c3ef40423deeed3c73647df93f6f0ecdab2d69)
    ("[meatspace modeling](https://buttondown.email/hillelwayne/archive/i-am-a-sql-injection-attack-5019/)"),
    people get quite good at finding the race conditions. So while concurrency might
    be difficult to reason about, I don't think it's because of a fault in our brains.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 更普遍地说，有些研究发现，如果你将[并发系统以人类术语](https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=77c3ef40423deeed3c73647df93f6f0ecdab2d69)（"[meatspace
    modeling](https://buttondown.email/hillelwayne/archive/i-am-a-sql-injection-attack-5019/)"）的方式进行框架化，人们很擅长发现竞争条件。因此，虽然并发可能难以推理，但我认为这并不是我们大脑的缺陷所致。
- en: In my opinion, a better basis is **state space explosion**. Concurrency is hard
    because concurrent systems can be in a lot of different possible states, and the
    number of states grows much faster than anyone is prepared for.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，一个更好的基础是**状态空间爆炸**。并发很难因为并发系统可以处于许多不同的可能状态，而且状态的数量增长速度远远超出了任何人的准备能力。
- en: Behaviors, Interleavings, and Nondeterminism
  id: totrans-split-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行为、交错执行和非确定性
- en: Take agents ^({1, 2, … n}, which each executes a linear sequence of steps. Different
    agents may have different algorithms. Think writing or reading from a queue, incrementing
    a counter, anything like that. The first process takes p1 atomic steps to complete,
    the second p2, etc. Agents complete their programs strictly linearly, but another
    process can interleave after every atomic step. If we have algorithms A1A2 and
    B1B2, they could execute as A1B1A2B2 or A1B1B2A2, but not A1**B2B1**A2.)
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到代理人 ^({1, 2, … n}，每个代理人执行一个线性步骤序列。不同的代理人可能有不同的算法。例如，从队列中写入或读取，递增计数器等。第一个进程需要p1个原子步骤才能完成，第二个进程需要p2步，依此类推。代理人严格按顺序完成其程序，但另一个进程可以在每个原子步骤之后交错执行。如果我们有算法A1A2和B1B2，它们可以执行为A1B1A2B2或A1**B2B1**A2，但不是A1B1B2A2。)
- en: 'Under those conditions, here''s an equation for how many possible orderings
    of execution (**behaviors**) can happen:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些条件下，这里有一个描述可能发生的执行顺序（**行为**）数量的方程式：
- en: '[PRE0]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If we have three agents all executing the same 2-step algorithm, that's `6!/8
    = 90` distinct behaviors. Each step in the sequence can potentially lead to a
    distinct state, so there's 6*90=540 maximum distinct states (MDS). Any one of
    those can potentially be the "buggy" one.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有三个代理同时执行相同的2步骤算法，那就有`6!/8 = 90`种不同的行为。序列中的每个步骤都有可能导致一个不同的状态，所以有6*90=540个最大的不同状态（MDS）。其中任何一个都有可能是“有错误”的状态。
- en: In most cases, the actual state space will be significantly smaller than the
    MDS, as different behaviors will cross the same states. Counterbalancing this
    is just how *fast* this formula grows. Three 3-step agents gives us 1700 possible
    behaviors (15K MDS), four 2-step agents instead have 2500 (20K MDS). And this
    is all without any kind of nondeterminism! If one step in one of the agents can
    nondeterministically do one of three things (send message M₁, send message M₂,
    crash), that triples the number of behaviors and the MDS.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，实际的状态空间会显著小于MDS，因为不同的行为可能会跨越相同的状态。这个公式增长得非常*快*。三个3步骤的代理会给我们1700种可能的行为（15K
    MDS），而四个2步骤的代理则有2500种行为（20K MDS）。这一切都没有任何非确定性！如果代理中的一个步骤可以非确定性地执行三种操作之一（发送消息M₁，发送消息M₂，崩溃），那么这会使行为数和MDS都增加三倍。
- en: It's pretty common for complex concurrent systems to have millions or tens of
    millions of states. Even the toy model I use in [this article on model optimization](https://learntla.com/topics/optimization.html)
    has about 8 million distinct states (though with some work you can get it much
    lower). I mostly think about state spaces in terms of performance because large
    state spaces take a lot longer to model-check. But it's also why concurrency is
    essentially hard to reason about. If my theoretical MDS is two million states,
    my practical state space is just 1% that size, and my human brain can reason through
    99.9% of the remaining states… that still leaves 20 edge cases I missed.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂并发系统通常具有数百万或数千万个状态是非常常见的。即使是我在[模型优化文章](https://learntla.com/topics/optimization.html)中使用的玩具模型，也有大约
    800 万个不同的状态（尽管经过一些工作，你可以将其大大降低）。我主要关注状态空间的性能，因为大的状态空间需要更长时间进行模型检查。但这也是为什么并发本质上难以推理的原因。如果我的理论MDS有200万个状态，那么我的实际状态空间只有其大小的1%，我的大脑可以推理出剩下状态的99.9%……这仍然会留下20个我忽略的边缘情况。
- en: Shrinking the State Space
  id: totrans-split-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩小状态空间
- en: 'Here''s a heuristic I use a lot:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我经常使用的一个启发式算法：
- en: '**All means of making concurrency ''easier'' are concerned first and foremost
    with managing the state space.**'
  id: totrans-split-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**所有使并发‘更容易’的方法首要关注的是管理状态空间。**'
- en: It's not 100% true (no heuristic is) but it's like 60% true, and that's good
    enough. State spaces grow quickly and bigger state spaces cause problems. If we
    want to make maintainable concurrent systems, we need to start by shrinking the
    space.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这并非百分之百正确（没有百分之百的启发式算法），但大约百分之六十正确，这已经足够了。状态空间增长迅速，更大的状态空间会引起问题。如果我们想要创建可维护的并发系统，我们需要从缩小空间开始。
- en: Like look at threads. Threads share memory, and the thread scheduler has a lot
    of freedom to suspend threads. So you have lots of steps (potentially one per
    line of code) ^(and any interleaving can lead to a distinct state. I can use programming
    constructs like mutexes and barriers to "prune" the state space and give me the
    behaviors I want, but given how big the state space can be, I have to do a lot
    of pruning to get the right behaviors. I can make mistakes in implementation,
    "misshape" the space (like by adding a deadlock), or not notice a buggy state
    I need to remove. Threads are very error prone.)
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 比如看看线程。线程共享内存，并且线程调度器有很大的自由度来暂停线程。因此，你会有许多步骤（潜在地每行代码都可能是一个步骤），任何交错都会导致一个不同的状态。我可以使用像互斥锁和屏障这样的编程结构来"修剪"状态空间，以获取我想要的行为，但是考虑到状态空间有多大，我必须进行大量修剪以获得正确的行为。我在实现中可能会犯错误，"扭曲"空间（比如添加死锁），或者没有注意到需要移除的有错误的状态。线程非常容易出错。
- en: I could instead switch to memory-isolated processes. The scheduler can still
    schedule whatever interleavings it wants but the processes can't muck with each
    other's internal memory. Internally a process is still executing A1A2A3A4, but
    if the only steps that involve external resources (or interprocess communication)
    are A2 and A4, then we only need to think about how A2A4 affects the state space.
    Three four-step agents have 35k interleavings, three two-step agents have only
    90\. That's a big improvement!
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我可以切换到内存隔离进程。调度器仍然可以安排任何交错，但是进程不能混淆彼此的内部内存。从内部来看，进程仍在执行 A1A2A3A4，但如果唯一涉及外部资源（或进程间通信）的步骤是
    A2 和 A4，那么我们只需考虑 A2A4 如何影响状态空间。三个四步骤代理有 35k 种交错方式，而三个两步骤代理仅有 90 种。这是一个很大的改进！
- en: What else can we do? Low-level atomic instructions do more in a single step,
    so there's no room for interleaving. Database transactions take a lot of physical
    time but represent only one [logical time step](https://buttondown.email/hillelwayne/archive/physical-vs-logical-time/).
    Data mutations create new steps, which immutable data structures avoid by definition.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还能做什么？低级原子指令在一个步骤中执行更多操作，因此没有交错的余地。数据库事务需要很多物理时间，但只代表一个 [逻辑时间步骤](https://buttondown.email/hillelwayne/archive/physical-vs-logical-time/)。数据突变通过不可变数据结构的定义避免了新的步骤。
- en: 'Languages have constructs to better prune the resulting state space: go''s
    channels, promises/futures/async-await, nurseries, etc. I think you can also treat
    promises as a way of forcing "noninterleaving": wait until a future is ready to
    execute in full (or to the next yield point) and before execution. *Please* don''t
    quote me on this.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 语言有构造来更好地修剪生成的状态空间：go 的通道，promises/futures/async-await，育儿园等等。我认为你也可以将 promises
    视为强制执行 "非交错" 的一种方式：等到将来准备好完全执行（或到下一个 yield 点）并在执行之前。*请*不要引用我说过的话。
- en: 'I *think* [CRDTs](https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type)
    reduce state space by permitting interleavings, but arranging things so that external
    changes are commutative: A1B1 and B1A1 lead to the same final result, so there
    are not distinct states.'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我 *认为* [CRDTs](https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type)
    通过允许交错来减少状态空间，但安排事物以便外部更改是可交换的：A1B1 和 B1A1 导致相同的最终结果，因此没有不同的状态。
- en: Again, this is all a *very* rough heuristic.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这只是一个 *非常* 粗略的启发式方法。
- en: Limits
  id: totrans-split-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 限制
- en: 'To a first-order approximation, smaller state space == good. But this doesn''t
    account for the topology of the space: some spaces are gnarlier than others. One
    that has lots of different cycles will be harder to work with than one that''s
    acyclic. ^(Different forms of nondeterminism also matter: "the agent continues
    or restarts" leads to more complex behavior than "the writer sends message M₁
    or M₂." These are both places where "humans are bad at reasoning about concurrency"
    appears again. We often work through concurrency by reduces groups of states to
    "state equivalence classes" that all have the same properties. complicated state
    spaces have more equivalence classes to work through.)'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 初级近似法则，更小的状态空间 == 好。但这并没有考虑空间的拓扑结构：有些空间比其他空间更复杂。一个有很多不同循环的空间比一个无环的空间更难处理。^(不确定性的不同形式也很重要："代理继续或重新启动"比
    "作者发送消息 M₁ 或 M₂" 导致更复杂的行为。这两种情况都是 "人类在推理并发性方面表现不佳" 再次出现的地方。我们通常通过将状态组减少到具有相同属性的
    "状态等价类" 来处理并发性复杂的状态空间。复杂的状态空间有更多的等价类需要处理。）
- en: '(Another way "humans are bad at reasoning about concurrency" can be a real
    thing: we might not *notice* that something is nonatomic.)'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: （"人类在推理并发性方面表现不佳"的另一种方式可能是真实的：我们可能不会 *注意到* 有些事情是不原子化的。）
- en: Some high-level paradigms can lead to particular state space topologies that
    have fewer interleavings or ones that have more equivalent states. I've heard
    people claim that [fork-join](https://en.wikipedia.org/wiki/Fork%E2%80%93join_model)
    and pipe-filter are especially easy for humans to reason about, which I take to
    mean "doesn't lead to a gnarly state space". Maybe also event-loops? Where does
    the actor model fit into all of this?
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一些高级范式可以导致特定的状态空间拓扑，这些拓扑有较少的交错或者具有更多等效状态。我听说人们声称 [fork-join](https://en.wikipedia.org/wiki/Fork%E2%80%93join_model)
    和 pipe-filter 特别容易让人理解，我理解为 "不会导致复杂的状态空间"。也许还有事件循环？演员模型在这一切中如何适应？
- en: 'Another limit: there''s a difference between buggy *states* and buggy *behaviors*.
    Some behaviors can go entirely through safe states but still cause an bug like
    "never reaches consistency". This is called a "liveness bug", and I talk more
    about them [here](https://www.hillelwayne.com/post/safety-and-liveness/). Liveness
    bugs are much harder to reason about.'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个限制：存在着有缺陷的*状态*和有缺陷的*行为*之间的区别。有些行为可以完全通过安全状态，但仍可能导致诸如“永不达到一致性”之类的 bug。这被称为“活性
    bug”，我在[这里](https://www.hillelwayne.com/post/safety-and-liveness/)详细讨论了这个问题。活性
    bug 要难推理得多。
- en: Okay, that's enough philosophical rambling about concurrency. Concurrency is
    hard, don't feel bad if you struggle with it, it's not you, it's combinatorics.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，关于并发性的哲学胡言乱语就到此为止吧。并发很难，如果你感到困扰，不要难过，这不是你的错，而是组合数学的问题。
- en: '* * *'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Video Appearance
  id: totrans-split-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视频登场
- en: I was on David Giard's *Technology and Friends* talking about TLA+. Check it
    out [here](https://www.youtube.com/watch?v=DERER_0RKGws)!
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾在 David Giard 的 *Technology and Friends* 上谈论 TLA+。在[这里](https://www.youtube.com/watch?v=DERER_0RKGws)查看！
- en: '*If you''re reading this on the web, you can subscribe [here](/hillelwayne).
    Updates are once a week. My main website is [here](https://www.hillelwayne.com).*'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在网上阅读这篇文章，你可以在[这里](/hillelwayne)订阅。更新频率为每周一次。我的主要网站在[这里](https://www.hillelwayne.com)。
