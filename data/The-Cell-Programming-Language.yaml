- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:41:59'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:41:59'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The Cell Programming Language
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 细胞编程语言
- en: 来源：[https://www.cell-lang.net/](https://www.cell-lang.net/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.cell-lang.net/](https://www.cell-lang.net/)
- en: The Cell Programming Language
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 细胞编程语言
- en: Cell is a very high-level embeddable language designed to implement some fairly
    general classes of software systems (described below) that are difficult to implement
    using conventional languages. For those specific types of software Cell allows
    the developer to work at a much higher level of abstraction, and automatically
    provides a number of major functionalities whose implementation in conventional
    languages either requires a lot of tedious, low-level and error prone coding or
    is not feasible at all in practice.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 细胞是一个非常高级的可嵌入语言，旨在实现一些相当一般化的软件系统类别（下文描述），这些系统难以使用传统语言实现。对于这些特定类型的软件，细胞允许开发人员在更高的抽象级别工作，并自动提供许多主要功能，这些功能在传统语言中要么需要大量乏味、低级且容易出错的编码，要么在实践中根本不可行。
- en: Cell is designed to complement and integrate with your primary language, not
    to replace it. Once a component of an application has been implement in Cell,
    the compiler will generate from it an easy-to-use C++, Java or C# class that can
    be integrated into an existing codebase. Support for other languages will be added
    in the future. The generated code is designed to integrate smoothly with hand-written
    code and to be non-invasive, and is also [very fast](benchmarks-relational.html).
    Unlike your primary language, whose choice is determined by a number of complex
    factors (not all of them technical, and not all of them under your control), Cell
    is just another tool in your toolbox, one that can be adopted gradually, with
    minimal risk, only when, and to the extent that, it provides a clear advantage
    over more conventional alternatives.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 细胞设计为与您的主要语言相辅相成，而非取而代之。一旦应用程序的某个组件在细胞中实现，编译器将从中生成一个易于使用的C++、Java或C#类，可集成到现有代码库中。未来将增加对其他语言的支持。生成的代码设计上与手写代码无缝集成，非侵入性，同时也非常[快速](benchmarks-relational.html)。与您的主要语言不同，其选择受多种复杂因素（并非全部是技术因素，也不完全在您的控制之下）的影响，细胞只是您工具箱中的另一个工具，可以逐渐采用，风险最小化，只在提供比传统替代方案明显优势时。
- en: Persistent Systems
  id: totrans-split-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Persistent Systems
- en: The first class of systems Cell is specifically designed for is those that have
    a complex state or data model that needs to be persisted. For that purpose a new
    type of software artifact is provided, relational automata. They offer a number
    of features that have no equivalent in conventional languages, like a very flexible,
    entirely structural type system; deterministic, repeatable execution; the ability
    to use relations to store data; declarative integrity constraints (keys and foreign
    keys); a very robust error handling mechanism based on transactions; and orthogonal
    persistence.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 细胞特别设计用于具有复杂状态或数据模型需要持久化的系统。为此提供了一种新类型的软件工件，关系自动机。它们提供了一些在传统语言中没有等效的功能，如非常灵活的、完全结构化的类型系统；确定性、可重复执行；使用关系存储数据的能力；声明性完整性约束（主键和外键）；基于事务的非常健壮的错误处理机制；以及正交持久性。
- en: Relational automata can be used to implement many different types of stateful
    software systems, but one of the things they're especially well-suited for is
    managing persistent data in desktop, mobile and embedded applications. Compared
    to an embedded SQL database, they provide a much better data model and type system,
    are orders of magnitude faster and fully programmable, have a smaller memory footprint,
    allow more control over how the data is stored, and interface smoothly with the
    host language, with no need to do any object/relational mapping. To learn more
    about them start with this introductory [example](example.html).
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 关系自动机可用于实现许多不同类型的有状态软件系统，但它们特别适合于管理桌面、移动和嵌入式应用程序中的持久数据。与嵌入式SQL数据库相比，它们提供了更好的数据模型和类型系统，速度快了数个数量级，完全可编程，内存占用更小，允许更多控制数据存储方式，并与宿主语言无缝接口，无需进行对象/关系映射。要了解更多信息，请从这个入门[示例](example.html)开始。
- en: Reactive systems
  id: totrans-split-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 响应式系统
- en: 'The second type of systems Cell is designed for is reactive systems, that is,
    systems that need to deal with multiple asynchronous data or event sources that
    trigger a cascade of changes throughout the application every time they activate,
    change their state or emit a value. Examples can be user input events, readings
    from a GPS sensor or an accelerometer, or data coming from remote computers or
    external hardware devices. But these data streams may also originate inside the
    application: internal events in many video games for example pose similar issues.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: Cell 设计用于的第二种系统类型是反应式系统，即需要处理多个异步数据或事件源的系统，每当它们激活、改变状态或发出值时，都会在整个应用程序中触发一系列变化。例如，用户输入事件、GPS传感器或加速度计的读数，或来自远程计算机或外部硬件设备的数据。但这些数据流也可能源自应用程序内部：例如，许多视频游戏中的内部事件也会引发类似的问题。
- en: These signals vary asynchronously and independently of one another. An update
    can be triggered by any of them at any time, and it affects all the parts of the
    application state that depend on them, either directly or indirectly. This often
    involves propagating these changes through several layers of software, and usually
    that has to be done in a very specific and hard-to-get-right order to ensure that
    the various components of the application never read stale values. Just as importantly,
    sometimes updates have to be triggered by the lack of change or activity, when
    some signals have been idle or some conditions have been true for a certain amount
    of time.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信号异步地且彼此独立地变化。任何信号的更新都可以在任何时候触发，并影响依赖于它们的应用程序状态的所有部分，无论是直接还是间接的依赖。这通常涉及通过多层软件传播这些变化，通常必须按照特定且难以正确完成的顺序进行，以确保应用程序的各个组件永远不会读取过期值。同样重要的是，有时更新必须由于变化或活动的缺乏而触发，当某些信号已经处于空闲状态或某些条件已经为一定时间为真时。
- en: Systems like these are difficult to fit into the rigid, sequential execution
    model of imperative languages. The traditional way to implement them involves
    the use of threads, observers, callbacks and timers. The resulting code is typically
    error prone, brittle and unnecessarily complex. In Cell these systems can be implemented
    using a second type of automata, reactive automata, which allow the developer
    to specify declaratively only the dependencies between the signals, with the compiler
    taking care of everything else. The [reactive automata](reactive.html) page provides
    a comprehensive introduction.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样的系统很难适应命令式语言的严格顺序执行模型。传统的实现方式涉及使用线程、观察者、回调和定时器。结果代码通常容易出错、脆弱且不必要地复杂。在 Cell
    中，这些系统可以使用第二种类型的自动机，即反应式自动机来实现，这允许开发者仅声明信号之间的依赖关系，而编译器则负责处理其他所有内容。[反应式自动机](reactive.html)
    页面提供了详尽的介绍。
- en: Distributed systems
  id: totrans-split-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分布式系统
- en: A longer-term and more ambitious goal of the Cell project is to provide support
    for a number of programming models specifically designed for components of distributed
    applications that need to be replicated at different network nodes (typically
    the server and one or more clients) and whose state must be automatically persisted
    and kept synchronized in the face of concurrent updates that can originate at
    any of the nodes.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: Cell 项目的一个更长期且更雄心勃勃的目标是为需要在不同网络节点（通常是服务器和一个或多个客户端）复制的分布式应用程序组件提供专门设计的编程模型支持，并在面对可能从任何节点发起的并发更新时自动持久化和保持同步其状态。
- en: More specifically, the goal is to have the compiler generate code for both clients
    and server (in different languages if need be) and automatically take care of
    all aspects of network programming that can be abstracted away (things like communication
    between clients and server, error handling and persistence) and to minimize the
    developer intervention when dealing with those issues (mainly concurrency) that
    cannot be hidden by the language and the network infrastructure.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 具体而言，目标是让编译器生成适用于客户端和服务器的代码（如有需要，使用不同的语言），并自动处理可以抽象的网络编程的所有方面（例如客户端和服务器之间的通信、错误处理和持久化），并在处理那些语言和网络基础设施无法隐藏的问题（主要是并发）时，尽量减少开发者的干预。
- en: Such programming models will be made possible by the unconventional capabilities
    of Cell, like orthogonal persistence and the ability to rewind and replay the
    execution of a program. You can read more about it [here](network-architecture.html).
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: Cell 的非常规功能（如正交持久性和程序执行的倒带与重放能力）将使这些编程模型成为可能。您可以在[这里](network-architecture.html)详细了解更多信息。
- en: Miscellanea
  id: totrans-split-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: If you have any question, there's the [cell-lang](https://groups.google.com/d/forum/cell-lang)
    Google Group. For announcements, there's [cell_lang](https://twitter.com/cell_lang)
    on Twitter.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有任何问题，可以访问[Cell语言](https://groups.google.com/d/forum/cell-lang) Google Group。有关公告，请关注Twitter上的[cell_lang](https://twitter.com/cell_lang)。
- en: The Cell compiler is free and open source software, and all source code is available
    on [github](https://github.com/cell-lang).
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: Cell编译器是免费开源软件，所有源代码都可以在[github](https://github.com/cell-lang)上获取。
- en: News
  id: totrans-split-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新闻
- en: 'July 4, 2023: [Cell to C++ compiler (version 0.7 for Linux) released](version-0.7.html).'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 2023年7月4日：发布了[Cell到C++编译器（Linux版本0.7）](version-0.7.html)。
- en: 'May 22, 2020: New post: [Replacing SQLite with Cell, part 2](https://medium.com/swlh/replacing-sqlite-with-cell-part-2-a5eb6a21de2d).'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年5月22日：新文章：[用Cell替换SQLite，第2部分](https://medium.com/swlh/replacing-sqlite-with-cell-part-2-a5eb6a21de2d)。
- en: 'May 22, 2020: New post: [Replacing SQLite with Cell, part 1](https://medium.com/swlh/replacing-sqlite-with-cell-part-1-fb5d636b5fd0).'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年5月22日：新文章：[用Cell替换SQLite，第1部分](https://medium.com/swlh/replacing-sqlite-with-cell-part-1-fb5d636b5fd0)。
