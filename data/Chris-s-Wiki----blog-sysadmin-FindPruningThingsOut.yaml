- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:33:39'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:33:39'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Chris''s Wiki :: blog/sysadmin/FindPruningThingsOut'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Chris''s Wiki :: blog/sysadmin/FindPruningThingsOut'
- en: 来源：[https://utcc.utoronto.ca/~cks/space/blog/sysadmin/FindPruningThingsOut](https://utcc.utoronto.ca/~cks/space/blog/sysadmin/FindPruningThingsOut)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://utcc.utoronto.ca/~cks/space/blog/sysadmin/FindPruningThingsOut](https://utcc.utoronto.ca/~cks/space/blog/sysadmin/FindPruningThingsOut)
- en: Suppose that you need to scan your filesystems and pass some files with specific
    names, ownerships, or whatever, except that you want to exclude scanning under
    /tmp and /var/tmp (as illustrative examples). Perhaps also you're feeding the
    file names to a shell script, especially in a pipeline, which means that you'd
    like to screen out directory and file names that have (common) problem characters
    in them, like spaces.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您需要扫描您的文件系统并传递一些具有特定名称、所有权或其他内容的文件，但您希望排除扫描/tmp和/var/tmp下的文件（作为说明性示例）。也许您正在将文件名馈送给shell脚本，特别是在管道中，这意味着您希望筛选出具有（常见）问题字符（如空格）的目录和文件名。
- en: (If you can use Bash for your shell script, the latter problem can be dealt
    with because you can get Bash to read NUL-terminated lines that can be produced
    by 'find ... -print0'.)
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: （如果您可以在shell脚本中使用Bash，后一个问题可以解决，因为您可以让Bash读取由 'find ... -print0' 生成的NUL终止行。）
- en: 'Excluding things from ''`find`'' results is done with find''s -prune action,
    which is a little bit tricky to use when you want to exclude absolute paths (well
    okay it''s a little bit tricky in general; see [this SO question and answers](https://stackoverflow.com/questions/1489277/how-to-use-prune-option-of-find-in-sh)).
    To start with, you''re going to want to generate a list of filesystems and then
    scan them by absolute path:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从find的 -prune 操作中排除结果，当您想要排除绝对路径时（好吧，总之，这通常有点棘手；请参见[此 SO 问题和答案](https://stackoverflow.com/questions/1489277/how-to-use-prune-option-of-find-in-sh)）。首先，您需要生成一个文件系统列表，然后通过绝对路径扫描它们：
- en: '[PRE0]'
  id: totrans-split-9
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Starting with an absolute path to the filesystem (instead of cd''ing into the
    root of the filesystem and doing ''`find . -xdev [...]`'' means that we can now
    use absolute paths in find''s -path argument instead of ones relative to the filesystem
    root:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件系统的绝对路径开始（而不是cd到文件系统根目录并执行 'find . -xdev [...]` 的方式，意味着我们现在可以在find的 -path
    参数中使用绝对路径，而不是相对于文件系统根目录的路径：
- en: '[PRE1]'
  id: totrans-split-11
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With absolute paths, we don't have to worry about what if /var or /tmp (or /var/tmp)
    are separate filesystems, instead of being directories on the root filesystem.
    Although it's hard to work out without experimentation, -xdev and -prune combine
    the way we want.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用绝对路径，我们不必担心/var或/tmp（或/var/tmp）是否是单独的文件系统，而不是根文件系统上的目录。尽管没有进行实验，但-xdev和-prune的组合方式正是我们想要的。
- en: (If we're running '`find`' on a filesystem that doesn't contain either /tmp
    or /var/tmp, we'll waste a bit of CPU time having '`find`' evaluate those -path
    arguments all the time despite it never being possible for them to match. This
    is unimportant when compared to having a simpler, less error prone script.)
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: （如果我们在一个不包含/tmp或/var/tmp的文件系统上运行 'find'，尽管永远不可能匹配它们，我们会浪费一点CPU时间让 'find' 一直评估这些
    -path 参数。与拥有一个更简单、更少错误的脚本相比，这并不重要。）
- en: 'If we want to exclude paths with spaces in them, this is easily done with ''`-name
    "* *"`''. If we want to get all whitespace, we need [GNU Find](https://man7.org/linux/man-pages/man1/find.1.html)
    and its ''-regex'' argument, documented best in ["Regular Expressions" in the
    info documentation](https://www.gnu.org/software/findutils/manual/html_mono/find.html#Regular-Expressions).
    Because we want to use [a character class](https://www.gnu.org/software/grep/manual/html_node/Character-Classes-and-Bracket-Expressions.html)
    to match whitespace, we need to use one of the regular expression types that include
    this, so:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要排除路径中带有空格的情况，可以使用 '`-name "* *"`' 轻松实现。如果我们想要获取所有空白字符，我们需要使用 [GNU Find](https://man7.org/linux/man-pages/man1/find.1.html)
    及其 '-regex' 参数，最好在 ["Regular Expressions" in the info documentation](https://www.gnu.org/software/findutils/manual/html_mono/find.html#Regular-Expressions)
    中有详细说明。因为我们想要使用 [字符类](https://www.gnu.org/software/grep/manual/html_node/Character-Classes-and-Bracket-Expressions.html)
    来匹配空白字符，所以我们需要使用其中包含的正则表达式类型之一：
- en: '[PRE2]'
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: On the whole, '`find`' is an awkward tool to use for this sort of filtering.
    Unfortunately it's sometimes what we turn to because our other options involve
    things like writing programs that consume and filter NUL-terminated file paths.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，对于这种过滤任务，'`find`' 是一个使用起来很笨拙的工具。不幸的是，有时这是我们不得不使用的工具，因为其他选择可能涉及编写消耗和过滤NUL终止文件路径的程序。
- en: (And having '`find`' skip entire directory trees is more efficient than letting
    it descend into them, print all their file paths, and then filtering the file
    paths out later.)
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: （而让'`find`'跳过整个目录树比让其进入目录树、打印所有文件路径，然后稍后再过滤文件路径更有效率。）
- en: 'PS: One of the little annoyances of Unix for system administrators is that
    so many things in a stock Unix environment fall apart the moment people start
    putting odd characters in file names, unless you take extreme care and use unusual
    tools. This often affects sysadmins because we frequently have to deal with other
    people''s almost arbitrary choices of file and directory names, and we may be
    dealing with actively malicious attackers for extra concern.'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 附言：Unix中对系统管理员的一些小烦恼之一是，许多事情在标准Unix环境中一旦人们开始在文件名中添加奇怪的字符，就会崩溃，除非你极度小心并使用非常规的工具。这通常影响到系统管理员，因为我们经常不得不处理其他人几乎任意选择的文件和目录名称，而且我们可能正在处理积极恶意的攻击者，这更值得关注。
- en: 'Sidebar: Reading null-terminated lines in Bash'
  id: totrans-split-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 侧边栏：在Bash中读取以NUL结尾的行
- en: '[Bash''s version of the ''`read`'' builtin](https://www.gnu.org/software/bash/manual/bash.html#index-read)
    supports a ''-d'' argument that can be used to read NUL-terminated lines:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[Bash中的''`read`''内建版本](https://www.gnu.org/software/bash/manual/bash.html#index-read)支持一个''-d''参数，用于读取以NUL结尾的行：'
- en: '[PRE3]'
  id: totrans-split-21
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You still have to properly quote `"$line"` in every single use, especially as
    you're doing this because you expect your lines to (or filenames) to sometimes
    contain troublesome characters. You should definitely use [Shellcheck](http://www.shellcheck.net/)
    and pay close attention to its warnings ([they're good for you](/~cks/space/blog/programming/ShellcheckGoodForMe)).
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次使用时仍然必须正确引用`"$line"`，特别是在您这样做的情况下，因为您期望您的行（或文件名）有时会包含问题字符。您应该绝对使用[Shellcheck](http://www.shellcheck.net/)，并且密切关注它的警告（[它们对您有好处](/~cks/space/blog/programming/ShellcheckGoodForMe)）。
