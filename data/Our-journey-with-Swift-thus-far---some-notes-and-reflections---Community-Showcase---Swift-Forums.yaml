- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:47:21'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月27日14:47:21
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Our journey with Swift thus far - some notes and reflections - Community Showcase
    - Swift Forums
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们迄今为止与Swift的旅程-一些注释和反思-社区展示- Swift论坛
- en: 来源：[https://forums.swift.org/t/our-journey-with-swift-thus-far-some-notes-and-reflections/70510](https://forums.swift.org/t/our-journey-with-swift-thus-far-some-notes-and-reflections/70510)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://forums.swift.org/t/our-journey-with-swift-thus-far-some-notes-and-reflections/70510](https://forums.swift.org/t/our-journey-with-swift-thus-far-some-notes-and-reflections/70510)
- en: Hello!
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你好！
- en: Background
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: Our team is quietly working on developing a new electronic trading system using
    Swift on macOS and Linux, building on our experience from two previous projects
    that have been done in C, Objective-C, C++, Java, C# and even for a while, homegrown
    DSL. All running on multiple OS:s at various points; NeXTSTEP, OpenStep, Windows,
    HP-UX, Solaris, Linux. These past projects have been fairly sizeable, with over
    25 million lines of code and several hundred components between them over a period
    of over 25 years with teams ranging between 40 and to 100+ engineers over time.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的团队正在悄悄地开发一个新的电子交易系统，使用Swift在macOS和Linux上构建，借鉴我们以前两个项目的经验，这两个项目分别用过C、Objective-C、C++、Java、C#，甚至相当长一段时间，使用自行开发的DSL。这些过去的项目都相当庞大，代码行数超过2500万行，历时25多年，团队规模在40到100多个工程师之间。
- en: These are very high performance, distributed cluster systems on the server side,
    combined with sophisticated frontends with visualisation and monitoring. The server
    side provides APIs for customers to hook in custom plugins that perform e.g. trading
    activities or pricing, which need to run in-process typically (i.e. dynamically
    loaded). This has been done with both C++, Java, C, and custom DSL. When we talk
    about "server side" here, it is in the more traditional sense with high performance
    IPC etc, so no HTTP, JSON or similar in general.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是非常高性能的、分布式的群集系统，配有复杂的前端可视化和监视功能。服务器端为客户提供API，以便挂接自定义插件，执行交易活动或定价等，这些插件通常需要以进程内方式运行（即动态加载）。这些都是用C++、Java、C和自定义DSL完成的。当我们在这里谈到“服务器端”时，我们指的是传统意义上具有高性能IPC等的服务器端，因此一般不使用HTTP、JSON或类似技术。
- en: Delving into Swift's ecosystem has provided us with valuable insights into both
    its advantages and areas where there's room for growth. The feedback we're sharing
    is based on our journey so far, and the hurdles we've encountered, with the intention
    of offering constructive thoughts for Swift's continued refinement. There's still
    some way to go before we're launching properly, but we wanted to take this time
    to share a few of our reflections and musings.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 探索Swift的生态系统为我们提供了宝贵的见解，了解其优势以及他们有待改进的领域。我们分享的反馈是基于我们迄今为止的旅程，以及我们遇到的障碍，旨在提出对Swift持续完善的建设性想法。在正式推出之前还有一段路要走，但我们想花时间分享一些我们的反思和沉思。
- en: Why Swift?
  id: totrans-split-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Swift？
- en: We have a vision that our next-generation system would not only use an expressive,
    memory safe and highly performant language, but also that we should be able to
    use a single technology stack from top-to-bottom. That enables great code re-use,
    engineers can more easily pick up work in various layer of the stack and we can
    benefit from the unified implementation of various types between both client and
    server pieces more easily. We also have a commercial necessity to be able to deploy
    on Linux on the server side in addition to macOS for visualisation (and possibly
    other Apple platforms going forward).
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的下一代系统不仅使用一种富有表现力、内存安全且高性能的语言，而且我们还应该能够使用统一的技术栈从上到下。这样可以实现很好的代码重用，工程师可以更容易地在技术栈的不同层面接手工作，我们也可以更轻松地在客户端和服务器端之间统一实现各种类型。我们还有商业上的必要性，需要能够在服务器端部署在Linux上，除了macOS用于可视化（可能还涉及其他Apple平台未来发展）。
- en: Swift ticks most of those boxes while also providing the ability to create native,
    good user interfaces using SwiftUI. There are a few other options, but for various
    reasons they didn't meet our criteria (and not relevant to this post).
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: Swift大部分情况都符合这些要求，同时还提供了使用SwiftUI创建原生良好用户界面的能力。还有一些其他选择，但出于各种原因，它们不符合我们的标准（对此帖子不相关）。
- en: Good stuff
  id: totrans-split-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 好东西
- en: Overall design
  id: totrans-split-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整体设计
- en: Swift's design of being "safe by default" - the strict type checking felt a
    bit frustrating at the beginning (ok, still sometimes ;-) but after coming over
    the initial (small) hurdle, we could really see that it paid off handsomely -
    code *much more* often will work immediately as expected (especially if compared
    with C-style languages) after going through the compiler. Major refactoring work
    is a lot faster and more robust with Swift in general, something that has significant
    value to us. The number of runtime errors is just a fraction of what's common
    with more traditional tooling. We're really happy with that aspect. The static
    data-race safety guarantees coming up is just the icing on the cake.
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swift 的设计“默认安全性” - 严格的类型检查在开始时有点令人沮丧（好吧，有时候还是会；-）但经过最初（小）的障碍后，我们真的能看到它带来了丰厚的回报
    - 代码*更经常*会立即按预期工作（特别是与 C 风格语言相比），经过编译器的处理后，主要的重构工作速度更快更稳健。运行时错误的数量只是传统工具中常见数量的一小部分。我们对这一方面非常满意。即将推出的静态数据竞争安全性保证只是锦上添花。
- en: The language expressiveness is overall very good and we think the overall philosophy
    has a set of good tradeoffs. We're a little bit worried that the complexity of
    the language continues to grow for newcomers, but hope the philosophy of progressive
    disclosure will make it manageable over time.
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总体上来说，语言的表现力非常好，我们认为整体的哲学思想取得了良好的平衡。我们有点担心语言的复杂性对新手来说仍在增加，但希望渐进式披露的哲学思想将使其随着时间的推移变得可管理。
- en: The pace of development of major language features during the last few years
    has been great, with several things being right up our alley and being really
    useful to us, e.g. Structured concurrency/Async+Await/Actors, Distributed Actors,
    Memory ownership (super important and great it is being worked on!), and overall
    improvements to generics and Macros.
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过去几年主要语言特性的开发速度很快，有几个功能完全符合我们的需求，非常有用，比如结构化并发/异步+等待/角色、分布式角色、内存所有权（非常重要，很高兴看到它正在开发中！），以及泛型和宏的整体改进。
- en: The open evolution process is overall really good (modulo some hiccups like
    result builders). To have visibility in the roadmap really helps and is appreciated
    - e.g. we saw that Distributed Actors and the new Predicate type was in the pipeline,
    and could choose to just stub out trivial implementations internally and then
    move over as they shipped - very good.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总体来说，开放的演进过程非常好（除了一些小问题，比如结果构建器）。能够看到路线图确实有助于我们，并受到赞赏 - 例如，我们看到分布式角色和新的谓词类型在规划中，可以选择在内部简单地生成平凡的实现，然后随着它们的发布而转移
    - 非常好。
- en: ABI stability is really a key feature - we do want to use library-evolution
    for our customer-facing SDK:s and this is just a great feature - not just for
    Apple as a system provider, but also for us as a third party. We need to be able
    to ship shared libraries that customers can link against so we can load plugins
    dynamically with resiliency and type compatbility.
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ABI 稳定性确实是一个关键功能 - 我们希望为客户面向的 SDK 使用库演进，并且这真是一个伟大的功能 - 不仅对于苹果作为系统提供商，对于我们作为第三方也同样重要。我们需要能够发布客户可以链接的共享库，以便我们可以具有弹性和类型兼容性地动态加载插件。
- en: Ecosystem
  id: totrans-split-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生态系统
- en: The ecosystem of packages usable for server-side development [was more extensive
    than expected](https://forums.swift.org/t/the-current-state-of-swift-for-server-and-linux/47732/9)
    - we've over time also have helped contribute to some of the pieces that we've
    missed, like e.g. [HDR Histogram](https://github.com/HdrHistogram/hdrhistogram-swift),
    [swift-kafka-client](https://github.com/swift-server/swift-kafka-client) and [performance
    benchmarking](https://github.com/ordo-one/package-benchmark)
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于服务器端开发的软件包生态系统[比预期的更为广泛](https://forums.swift.org/t/the-current-state-of-swift-for-server-and-linux/47732/9)
    - 随着时间的推移，我们也为一些我们错过的部分做出了贡献，例如[HDR Histogram](https://github.com/HdrHistogram/hdrhistogram-swift)、[swift-kafka-client](https://github.com/swift-server/swift-kafka-client)和[性能基准测试](https://github.com/ordo-one/package-benchmark)
- en: We also are very happy with the native rewrite of Foundation (and are starting
    to use certain new features like Predicates heavily already) and are *really*
    looking forward to its integration as the built-in implementation for Linux -
    it moved us from having a no-Foundation policy to now instead adopt it.
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们也非常满意 Foundation 的本地重写（并且已经开始积极使用某些新功能，如谓词），而且*真的*期待它作为 Linux 内置实现的整合 - 它使我们从无
    Foundation 政策转变为现在采纳它。
- en: SwiftPM plugins (and Macros) are enabling a wider range of workflows.
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SwiftPM 插件（和宏）正在支持更广泛的工作流。
- en: In general we are very happy with the language itself and see significant progress
    over time.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 总体上，我们对语言本身非常满意，并且随着时间的推移看到了显著的进展。
- en: Major challenges
  id: totrans-split-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主要挑战
- en: Much of issues are centered around richer dynamic library support, API packaging
    and Linux platform support, something we need for packaging products properly.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 很多问题集中在更丰富的动态库支持、API 打包和 Linux 平台支持上，这些是我们需要为正确打包产品做的。
- en: '[Dynamic Library support on Linux with library evolution](https://github.com/apple/swift-package-manager/issues/5714)
    - even a limited officially supported package with clear limitations would be
    useful (as our customers will have a completely controlled environment, it''s
    possible to mandate specific library versions and patch levels for OS etc).'
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[具有库演进的 Linux 动态库支持](https://github.com/apple/swift-package-manager/issues/5714)
    - 即使是有限的官方支持包，有明确的限制也将非常有用（因为我们的客户将拥有完全受控的环境，可以强制指定特定的库版本和补丁级别等）。'
- en: '[Library support for artifact bundles](https://github.com/apple/swift-package-manager/pull/6967)
    (we are currently running with a custom toolchain that supports xcframeworks on
    Linux to work around it, but that''s not long term sustainable).'
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用于工件束的库支持](https://github.com/apple/swift-package-manager/pull/6967)（我们目前正在使用支持在
    Linux 上运行 xcframeworks 的自定义工具链来解决此问题，但这并不是长期可持续的）。'
- en: Concurrency runtime analytics tools could be richer, especially for Tasks -
    while we have some of the tooling in Instruments, it would be fantastic to also
    have support for accessing similar task information (async task stack backtraces
    etc, for creation/running/sleeping) in LLDB (especially import on Linux that lacks
    Instruments...), including inspecting Task locals.
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发运行时分析工具可能会更丰富，特别是对于任务 - 虽然我们在 Instruments 中有一些工具，但在 LLDB 中也支持访问类似任务信息（异步任务堆栈回溯等，用于创建/运行/休眠），尤其是在没有
    Instruments 的 Linux 上（包括检查任务本地变量）。
- en: '[Compile and runtime availability checking](https://github.com/apple/swift/issues/60458)
    support for third party APIs is not available currently.'
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[编译和运行时可用性检查](https://github.com/apple/swift/issues/60458) 目前不支持第三方 API。'
- en: Fundamental support for dynamic libraries overall as a first class citizen,
    e.g. [targets can't be linked dynamically](https://github.com/apple/swift-package-manager/issues/4951)
    .
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于动态库整体的基本支持作为第一类公民，例如[目标不能动态链接](https://github.com/apple/swift-package-manager/issues/4951)。
- en: Minor challenges
  id: totrans-split-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小挑战
- en: Concurrency and testing
  id: totrans-split-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 并发和测试
- en: Tooling and platform support
  id: totrans-split-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具和平台支持
- en: Linux support has been lagging at times (e.g. Macro support), which has postponed
    adoption of newer releases for us and it hasn't always been transparent .
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 支持有时会滞后（例如宏支持），这推迟了我们采用新版本，并且并非总是透明的。
- en: Build times on Linux when using the new Foundation are quite painful (we need
    to not only build swift-foundation, but also swift-syntax due to use of macros
    - it's a well-known problem of course, but just wanted to mention it as it causes
    long CI turnaround for us).
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用新 Foundation 时，Linux 上的构建时间非常痛苦（我们不仅需要构建 swift-foundation，还需要构建 swift-syntax，因为使用了宏
    - 当然这是众所周知的问题，但只是想提一下，因为这导致了我们的长期 CI 轮转）。
- en: Build Stability and Performance - we *very* often need to nuke `.build` or SwiftPM
    caches or Xcodes derived data due to weird issues (like missing Packages in Xcode),
    e.g. things seem to rebuild more than expected (e.g. [this example](https://github.com/apple/swift-package-manager/issues/7210)
    for Benchmark).
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建稳定性和性能 - 我们经常需要清除 `.build` 或 SwiftPM 缓存，或者 Xcode 派生数据，因为出现了奇怪的问题（例如在 Xcode
    中缺少 Packages），例如，某些情况下似乎重建的次数超出预期（例如[这个示例](https://github.com/apple/swift-package-manager/issues/7210)用于基准测试）。
- en: SwiftPMs model with products/targets is a bit problematic for larger projects;
    targets are exposed to downstream projects, targets can't depend products in the
    same package, target name conflicts (aliasing doesn't always work out there) with
    module names (perhaps not SwiftPM exactly).
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SwiftPM 在产品/目标模型上对于较大项目有些问题；目标暴露给下游项目，目标无法依赖同一包中的产品，目标名称冲突（别名并不总是有效）与模块名称（可能不完全是
    SwiftPM 的问题）。
- en: Local development of dependencies is a bit clunky, Swift package edit only solves
    this partially. We end up with a sometimes convoluted and non-ideal project structure
    with some tools / workaround on top of it.
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地依赖项的开发有些笨拙，Swift 包编辑只能部分解决这个问题。我们最终得到了一个有时复杂且非理想的项目结构，上面堆砌了一些工具/解决方案。
- en: LLDB support has been spotty with many crashes on Linux especially (and [little
    updates on issues reported](https://github.com/issues?q=is%3Aopen+is%3Aissue+author%3Ahassila+archived%3Afalse+SR-)),
    it is improving over time though.
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LLDB 在 Linux 上的支持一直比较不稳定，尤其是频繁崩溃（以及[报告的问题更新很少](https://github.com/issues?q=is%3Aopen+is%3Aissue+author%3Ahassila+archived%3Afalse+SR-)），尽管随着时间的推移有所改善。
- en: Libdispatch as the underpinning for thread management (on Linux) continues to
    lag the macOS implementation (assuming primarily due to the difficulty of merging
    newer implementations as libdispatch is heavily using Mach:isms). Perhaps the
    approach to integration with thread management could/should be reconsidered at
    some point, but understandably there are a lot of historical considerations to
    take here as there's a lot of code using Dispatch.
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux 上作为线程管理基础的 Libdispatch 仍然落后于 macOS 实现（主要是因为将新实现合并到 Libdispatch 中困难，因为
    Libdispatch 大量使用 Mach:isms）。也许在某个时候应该重新考虑与线程管理的集成方法，但可以理解的是，这里有很多历史性的考虑，因为有很多使用
    Dispatch 的代码。
- en: Performance
  id: totrans-split-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性能
- en: Performance issues are sometimes a bit hard to diagnose and address (e.g. unnecessary
    copying, we can get tons of metadata lookups when using existensial/generics if
    not getting the incantations right, ARC traffic, etc) - and [need workarounds](https://forums.swift.org/t/modern-way-to-vend-specializations-of-a-generic-type/65657/5)
    that allow the compiler to specialize properly. It feels like some sort of instrument
    for analyzing anti-patterns in Swift could help, would be happy to discuss details.
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能问题有时候很难诊断和解决（例如不必要的复制，在使用存在类型/泛型时，如果不得当，可能会导致大量元数据查找，ARC 流量等） - 需要[解决方法](https://forums.swift.org/t/modern-way-to-vend-specializations-of-a-generic-type/65657/5)，以允许编译器正确地进行专门化。似乎某种用于分析
    Swift 中反模式的工具会有所帮助，欢迎讨论详细内容。
- en: Generics, while having improved over time, still is not without friction and
    it is fairly complex at times to get the desired behavior. From a performance
    point of view it's a bit of hit-or-miss. It's challenging to guarantee that things
    will get specialised, and it is easy to make a nice generic refactoring that just
    runs over a performance cliff that you don't expect. It would be great with improvements
    in this area, e.g. there have been discussions about various annotations (e.g.
    to guarantee specialization).
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 泛型尽管随着时间的推移有所改进，但有时仍然不尽如人意，有时候难以获得期望的行为。从性能的角度来看，有时候是赌运气。保证事物会被专门化是个挑战，并且很容易做一个漂亮的泛型重构，结果性能却突然下降。在这个领域的改进将是很好的，例如有关各种注释的讨论（例如保证专门化）。
- en: '[KeyPath performance is problematic](https://forums.swift.org/t/pitch-swift-predicates/62000/35)
    - unfortunately the performance of KeyPaths has forced us to do workarounds even
    in fairly simple cases like sort comparators as they would take over samples completely
    - it''d be nice if they could be used without fear.'
  id: totrans-split-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KeyPath 的性能问题很严重](https://forums.swift.org/t/pitch-swift-predicates/62000/35)
    - 不幸的是，KeyPaths 的性能问题迫使我们即使在像排序比较器这样相对简单的情况下也需要采取解决方法，因为它们会完全接管样本 - 如果能毫无顾虑地使用它们会很好。'
- en: Deeper documentation and hints on best practices for performance when using
    generics and protocol oriented programming (related to the previous point). Basically
    a follow up to the older performance best practices, but with a bit of more focus
    on cross-module considerations.
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用泛型和面向协议编程时，需要更深入的文档和最佳实践提示（与上述问题相关）。基本上是对旧性能最佳实践的跟进，但更多关注跨模块考虑。
- en: Analyzing program behaviour is [missing some runtime hooks](https://github.com/apple/swift/issues/64636)
    to better understand runtime behaviour and perform better benchmarks.
  id: totrans-split-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析程序行为缺少一些[运行时挂钩](https://github.com/apple/swift/issues/64636)以更好地理解运行时行为和执行更好的基准测试。
- en: Overall, we'd welcome further investment in runtime performance, compile times
    and overall robustness (SwiftPM / Toolchain / Linux support on par).
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，我们欢迎在运行时性能、编译时间和总体健壮性（SwiftPM / Toolchain / Linux 支持与 macOS 相当）方面进一步投资。
- en: Closing notes
  id: totrans-split-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束语
- en: In conclusion, our experience with Swift, while largely positive due to its
    modern features and robust ecosystem, also highlights areas where enhancements
    could further refine and expand its capabilities, especially for slightly more
    complex and advanced development scenarios. We hope this feedback serves as a
    constructive contribution to the ongoing development and improvement of Swift,
    reflecting our commitment to help pushing the ecosystem in a positive direction.
    We'd be happy to elaborate and engage in discussion on any of the above topics.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我们对 Swift 的经验虽然在很大程度上是积极的，因为它具有现代特性和健壮的生态系统，但也突出了可以进一步改进和扩展其能力的领域，特别是对稍微复杂和先进的开发场景。我们希望这些反馈能作为对
    Swift 持续发展和改进的建设性贡献，反映出我们帮助推动生态系统朝着积极方向发展的承诺。我们很乐意详细阐述并参与上述任何主题的讨论。
- en: Many thanks to everyone involved in making Swift with related packages available
    - we think it's on a great trajectory, looking forward to continue on our journey!
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 许多感谢所有参与使 Swift 及相关包可用的人们 - 我们认为它正在一个很好的轨迹上，期待继续我们的旅程！
- en: A special thanks to everyone who participates and shares their knowledge on
    these forums, it's an invaluable community resource, thanks!
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 特别感谢所有参与并在这些论坛上分享他们知识的人们，这是一个宝贵的社区资源，谢谢！
- en: Joakim
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: Joakim
