- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:35:04'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:35:04
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Python Gotcha: strip, lstrip, rstrip can remove more than expected · Ponderings
    of an Andy'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 的坑：`strip`，`lstrip`，`rstrip` 可以移除比预期更多的内容 · Andy 的思考
- en: 来源：[https://andrewwegner.com/python-gotcha-strip-functions-unexpected-behavior.html](https://andrewwegner.com/python-gotcha-strip-functions-unexpected-behavior.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://andrewwegner.com/python-gotcha-strip-functions-unexpected-behavior.html](https://andrewwegner.com/python-gotcha-strip-functions-unexpected-behavior.html)
- en: Introduction
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: As a software engineer, you've cleaned your fair share of dirty strings. Removing
    leading or trailing spaces is probably one of the most common things done to user
    input.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名软件工程师，你已经处理过很多脏字符串。删除前导或尾随空格可能是对用户输入最常见的操作之一。
- en: 'In Python, this is done with the [`.strip()`](https://docs.python.org/3.10/library/stdtypes.html#str.strip),
    [`.lstrip()`](https://docs.python.org/3.10/library/stdtypes.html#str.lstrip) or
    [`.rstrip()`](https://docs.python.org/3.10/library/stdtypes.html#str.rstrip) functions
    and generally looks like this:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，可以通过 [`.strip()`](https://docs.python.org/3.10/library/stdtypes.html#str.strip)，[`.lstrip()`](https://docs.python.org/3.10/library/stdtypes.html#str.lstrip)
    或 [`.rstrip()`](https://docs.python.org/3.10/library/stdtypes.html#str.rstrip)
    函数来实现，通常是这样的：
- en: '[PRE0]'
  id: totrans-split-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That's pretty straightforward and nothing unexpected in going on.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常直接，没有出现意外情况。
- en: Gotcha
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 坑
- en: The Gotcha is that each of these functions take a list of characters that can
    be removed.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 坑是每个函数都可以移除一个可以移除的字符列表。
- en: '[PRE1]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What happened? Why wasn't the result just
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？为什么结果不仅是
- en: Explaination
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释
- en: 'Read line from the documentation again, carefully:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 再次仔细阅读文档中的这一行：
- en: A list of **characters**
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个**字符**列表
- en: Not a list of strings.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不是字符串列表。
- en: This is explicitly spelled out in the documentation, with an example, showing
    what the implications are. However, for a new developer, it's unexpected behavior.
    After all, these seem like intutive functions.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这在文档中是明确说明的，并附有一个示例，展示了其影响。然而，对于新开发者来说，这是意外的行为。毕竟，这些函数看起来是直观的。
- en: 'The example with my does the following:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例子中的操作如下：
- en: 'Receives a list of characters to remove. In this case it is all letters in
    my last name, plus the space character: `wegner`'
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接收一个要移除的字符列表。在这种情况下，是我的姓氏中的所有字母，加上空格字符：`wegner`
- en: Lower case all letters in the input string, resulting in `andrew wegner`
  id: totrans-split-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将输入字符串中的所有字母转换为小写字母，结果为 `andrew wegner`
- en: From the right hand side of the string, begin removing characters that are in
    the input list. Stop when you encounter a character not in the list. In this case
    that means that `rengew wer` are removed (right to left) and then the `d` in `andrew`
    is encountered so that `rstrip` function stops.
  id: totrans-split-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从字符串的右侧开始移除属于输入列表中的字符。遇到不在列表中的字符时停止。在这种情况下，`rengew wer` 被移除（从右到左），然后在 `andrew`
    中遇到了 `d`，因此 `rstrip` 函数停止。
- en: Return the remaining string of `and`
  id: totrans-split-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回剩余的字符串 `and`
- en: Solution
  id: totrans-split-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Python has two functions that will correctly remove a **string** - [`.removesuffix()`](https://docs.python.org/3.10/library/stdtypes.html#str.removesuffix)
    and [`.removeprefix()`](https://docs.python.org/3.10/library/stdtypes.html#str.removeprefix)
    for right and left side removals.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: Python 有两个函数可以正确地移除一个**字符串** - [`.removesuffix()`](https://docs.python.org/3.10/library/stdtypes.html#str.removesuffix)
    和 [`.removeprefix()`](https://docs.python.org/3.10/library/stdtypes.html#str.removeprefix)
    用于右侧和左侧的移除。
- en: '[PRE2]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These two functions were introduced in Python 3.9 as part of [PEP-616](https://peps.python.org/pep-0616/).
    In the PEP, it explicitly calls out the confusion users have about the `*strip()`
    functions and how they behave. These two were introduced to allow the desired
    behavior.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个函数是作为 Python 3.9 的一部分引入的，作为 [PEP-616](https://peps.python.org/pep-0616/)
    的一部分。在 PEP 中，明确指出了用户对 `*strip()` 函数以及它们行为的混淆。引入这两个函数是为了允许所需的行为。
- en: One important note is that these two `remove*` functions will only remove *at
    most* one instance of the string.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的说明是这两个 `remove*` 函数只会最多移除一个实例的字符串。
- en: '[PRE3]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
