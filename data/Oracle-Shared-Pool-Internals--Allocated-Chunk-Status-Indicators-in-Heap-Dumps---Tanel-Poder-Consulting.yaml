- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:32:10'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:32:10'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Oracle Shared Pool Internals: Allocated Chunk Status Indicators in Heap Dumps
    | Tanel Poder Consulting'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Oracle共享池内部：堆转储中分配的块状态指示器 | Tanel Poder Consulting
- en: 来源：[https://tanelpoder.com/posts/oracle-shared-pool-chunk-status-indicators-in-heapdump/](https://tanelpoder.com/posts/oracle-shared-pool-chunk-status-indicators-in-heapdump/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://tanelpoder.com/posts/oracle-shared-pool-chunk-status-indicators-in-heapdump/](https://tanelpoder.com/posts/oracle-shared-pool-chunk-status-indicators-in-heapdump/)
- en: <main>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main>
- en: Over time, Oracle has been adding more contextual information into each allocated
    heap memory chunk, to make it easier to see what for your heap memory is used.
    This instrumentation is used for private (PGA,UGA,etc) heaps too, but this article
    focuses only on shared pool heaps.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，Oracle一直在每个已分配的堆内存块中添加更多的上下文信息，以便更容易看到堆内存的用途。这种工具也用于私有（PGA、UGA等）堆，但本文仅关注共享池堆。
- en: 'A few examples from past are:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 过去的一些例子包括：
- en: '[Library cache object hash values added to allocated shared pool chunk names](/2010/11/04/a-little-new-feature-for-shared-pool-geeks/)
    (2010)'
  id: totrans-split-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[添加库缓存对象哈希值到已分配的共享池块名称](/2010/11/04/a-little-new-feature-for-shared-pool-geeks/)
    (2010)'
- en: The above technique is used for some other allocation types too, like `KKSSP^NNN`
    allocations that are used for “session pages” that hold various tiny memory structures
    like library cache lock (and pin in older DB versions) that a session must allocate
    when accessing library cache objects. The NNN is in this case is not showing some
    hash value, but the SID of the allocating session.
  id: totrans-split-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述技术也适用于其他一些分配类型，例如用于“会话页面”的`KKSSP^NNN`分配，这些页面保存各种小内存结构，例如访问库缓存对象时会话必须分配的库缓存锁（在较旧的DB版本中还有固定）。在这种情况下，NNN并不显示某些哈希值，而是分配会话的SID。
- en: Additionally, you can use shared pool dumps for listing chunk location in the
    *recurrent* end of the heap LRU replacement list after the [SEPARATOR marker in
    shared pool heap dumps](/posts/oracle-shared-pool-list-chunk-position-in-lru-list/)
    (2020). That would tell you which existing cursors have been executed more than
    once (pinned at least 3 times - once for loading the object into cache + at least
    2 executions).
  id: totrans-split-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外，您可以使用共享池转储来列出堆LRU替换列表末尾的*周期*结束后的[SEPARATOR标记共享池堆转储](/posts/oracle-shared-pool-list-chunk-position-in-lru-list/)
    (2020)。这将告诉您哪些现有游标已被执行多次（至少固定了3次-一次是为了将对象加载到缓存中+至少2次执行）。
- en: 'Newer Oracle versions print out even more info about chunk status indicators
    in heap dumps, for example:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 新的Oracle版本在堆转储中打印出更多关于块状态指示器的信息，例如：
- en: '[PRE0]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Recreatable chunks have 2 charaters indicating their status.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可重建的块有2个字符表示其状态。
- en: 'First character:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个字符：
- en: '**P** - chunk is pinned'
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**P** - chunk is pinned'
- en: '**U** - chunk is unpinned'
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**U** - chunk is unpinned'
- en: 'Second character:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个字符：
- en: '**C** - chunk is just created (pinned only once for KGL parent objects, twice
    for child objects)'
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C** - chunk is just created (pinned only once for KGL parent objects, twice
    for child objects)'
- en: '**T** - chunk is in the *transient* end of the LRU list (loaded and used only
    once, heap is pinned only twice)'
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**T** - chunk is in the *transient* end of the LRU list (loaded and used only
    once, heap is pinned only twice)'
- en: '**R** - chunk is in the *recurrent* end of the LRU list (loaded and used twice
    or more, heap is pinned at least 3 times)'
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**R** - chunk is in the *recurrent* end of the LRU list (loaded and used twice
    or more, heap is pinned at least 3 times)'
- en: The 3-digit number in `recrPC001` is the CON_ID of the allocating container/PDB,
    if you’re using multitenant database.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在`recrPC001`中的三位数是分配容器/PDB的CON_ID，如果您正在使用多租户数据库。
- en: You might wonder what’s the difference between C and T above. It looks like
    Oracle immediately uses the transient flag (T) for objects like library cache
    object handle (KGLHD - the entry point to any library cache object structure,
    data dictionary cache objects KQR PO/SO), but for actual library cache object
    “payload”, like cursors, PL/SQL objects, it first uses the (C) flag, which then
    gets changed to (R) if executed for more than once.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道上面的C和T之间有什么区别。看起来Oracle立即对像库缓存对象句柄（KGLHD - 任何库缓存对象结构的入口点，数据字典缓存对象KQR PO/SO）之类的对象使用瞬态标志（T），但对于实际的库缓存对象“有效载荷”，例如游标、PL/SQL对象，它首先使用（C）标志，然后如果执行超过一次则更改为（R）。
- en: 'Query executed only once:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 查询仅执行一次：
- en: '[PRE1]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The same query executed twice:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的查询执行两次：
- en: '[PRE2]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above output, you see how `recrUC001` turned into `recrUR001` and the
    chunk was moved below the `SEPARATOR` special marker in the LRU list.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述输出中，您可以看到`recrUC001`如何变成`recrUR001`，并且该块被移动到LRU列表中的`SEPARATOR`特殊标记下面。
- en: 'Here’s an example of a few library cache object handle (KGLHD) objects, that
    don’t even have the object name hash value included in the allocations (you can
    find the right ones using `v$db_object_cache.addr` or `v$sql.address/child_address`)
    in a heapdump:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个库缓存对象句柄（KGLHD）的示例，这些句柄在分配时甚至没有包含对象名称哈希值（你可以使用`v$db_object_cache.addr`或`v$sql.address/child_address`来找到正确的对象）在堆转储中：
- en: '[PRE3]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For such allocations, Oracle seems to immediately mark chunks as (R) or (T)
    and not use the (C) flag at all.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种分配，Oracle似乎立即将块标记为（R）或（T），而根本不使用（C）标志。
- en: 'Nowadays, Oracle tries make library cache’s heap allocations use standardized/fixed
    sizes of individual chunks (*_kgl_fixed_extents* = 4096) to reduce heap fragmentation.
    Thus, you’ll see a lot of `freeable` chunks if your cursor (or PL/SQL object)
    requires more than 4kB of memory for its heaps:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，Oracle试图使库缓存的堆分配使用标准化/固定大小的单个块（*_kgl_fixed_extents* = 4096），以减少堆碎片化。因此，如果你的游标（或PL/SQL对象）需要超过4kB的内存来分配其堆，则会看到许多`freeable`块：
- en: '[PRE4]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These *freeable* chunks are not linked into the LRU list that shared pool manager
    searches through. Oracle doesn’t free random freeable chunks on their own - and
    it doesn’t see them anyway as they are not linked into the LRU list.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些*可释放*块未链接到共享池管理器搜索的LRU列表中。Oracle不会自行释放随机的可释放块 - 而且它根本看不到它们，因为它们未链接到LRU列表中。
- en: Shared pool LRU list scan must find an unpinned *recreatable* chunk (the first
    chunk in an allocated heap) and it frees this leading recreatable chunk first
    (the `ds=0x13e3d9d48` points to the beginning of the heap). Then it goes on to
    freeing the remaining chunks of this heap, it will walk through a linked list
    of any further allocations “chained” to the leading chunk (marked as freeable)
    and frees these as a result. The heap manager frees entire subheaps when it finds
    its leading recreatable chunk to be unpinned - there’s no point in freeing only
    the leading 4kB of a 100kB SQL Area heap and leaving the rest of it in some partially
    allocated unusable state.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 共享池LRU列表扫描必须找到一个未固定的*可重建*块（分配堆中的第一个块），并首先释放这个主导的可重建块（`ds=0x13e3d9d48`指向堆的开头）。然后继续释放这个堆的其余块，它会遍历连接到主导块的任何进一步分配的链表（标记为可释放），并作为结果释放这些块。当堆管理器发现其主导的可重建块未固定时，它会释放整个子堆
    - 没有必要仅释放100kB SQL Area堆的开头4kB并使其余部分处于部分分配的不可用状态。
- en: </main>
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
