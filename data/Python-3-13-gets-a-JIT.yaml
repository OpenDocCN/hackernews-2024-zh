- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:38:27'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:38:27
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Python 3.13 gets a JIT
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 3.13 支持 JIT
- en: 来源：[https://tonybaloney.github.io/posts/python-gets-a-jit.html](https://tonybaloney.github.io/posts/python-gets-a-jit.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://tonybaloney.github.io/posts/python-gets-a-jit.html](https://tonybaloney.github.io/posts/python-gets-a-jit.html)
- en: Happy New Year everyone! In late December 2023 (Christmas Day to be precise),
    CPython core developer [Brandt Bucher](https://github.com/brandtbucher) submitted
    a [little pull-request to the Python 3.13](https://github.com/python/cpython/pull/113465)
    branch adding a JIT compiler.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大家新年快乐！在 2023 年 12 月底（确切地说是圣诞节），CPython 核心开发者[Brandt Bucher](https://github.com/brandtbucher)向
    Python 3.13 分支提交了一个[小小的拉取请求](https://github.com/python/cpython/pull/113465)，添加了一个
    JIT 编译器。
- en: This change, once accepted would be one of the biggest changes to the CPython
    Interpreter since the [Specializing Adaptive Interpreter](https://peps.python.org/pep-0659/)
    added in Python 3.11 (which was also from Brandt along with Mark Shannon).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变化一旦被接受，将是自 Python 3.11（当时由 Brandt 与 Mark Shannon 提交）加入的[特化自适应解释器](https://peps.python.org/pep-0659/)以来对
    CPython 解释器的最大改变之一。
- en: In this blog post, we’re going to have a look at this JIT, what it is, how it
    works and what the benefits are.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博文中，我们将看一下这个 JIT，它是什么，它是如何工作的，以及它的好处是什么。
- en: What is a JIT?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 JIT？
- en: JIT, or “Just in Time” is a compilation design that implies that compilation
    happens on demand when the code is run the first time. It’s a very broad term
    that could mean many things. I guess, technically the Python compiler is already
    a JIT because it compiles from Python code into Bytecode.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: JIT，即“即时”编译，是一种编译设计，它暗示着编译发生在代码首次运行时。这是一个非常广泛的术语，可能意味着许多不同的事情。我猜，从技术上讲，Python
    编译器已经是 JIT，因为它将 Python 代码编译成字节码。
- en: What people *tend* to mean when they say a JIT compiler, is a compiler that
    emits **machine code**. This is in contrast to an AOT (Ahead of Time) compiler,
    like the GNU C compiler, GCC or the Rust compiler rustc which generates the machine
    code once and distributes as a binary executable.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们说及 JIT 编译器时，他们*倾向于*指的是一个生成**机器码**的编译器。这与一个 Ahead of Time（AOT，即预先编译）编译器相对，比如
    GNU C 编译器 GCC 或 Rust 编译器 rustc，后者只生成一次机器码，然后以二进制可执行文件的形式分发。
- en: 'When you run Python code, it is first compiled into bytecodes. There are plenty
    of talks and videos about this process online so I don’t want to rehash this too
    much, but what is important to note about Python bytecodes is:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 Python 代码时，首先会将其编译成字节码。有很多关于这个过程的演讲和视频，所以我不想再重复了，但是关于 Python 字节码需要注意的重要一点是：
- en: They mean nothing to the CPU and require a special bytecode interpreter loop
    to execute
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们对 CPU 没有意义，并且需要一个特殊的字节码解释器循环来执行。
- en: They are high level and can equate to 1000’s of machine instructions
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们是高级别的，相当于成千上万条的机器指令。
- en: They are type agnostic
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们是类型不可知的。
- en: They are cross-platform
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们是跨平台的。
- en: 'For a very simple Python function `f()` that defines a variable `a` and assigns
    the value `1`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个非常简单的 Python 函数 `f()`，它定义了一个变量 `a` 并赋值为 `1`：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It compiles to 5 bytecode instructions, which you can see by running `dis.dis`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它编译为 5 条字节码指令，你可以通过运行 `dis.dis` 来查看：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I have a more interactive disassembler called [dissy](https://github.com/tonybaloney/dissy)
    as well if you want to try something more complicated.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试更复杂的东西，我还有一个更交互式的反汇编器叫做[dissy](https://github.com/tonybaloney/dissy)。
- en: For this function, Python 3.11 compiled into the instructions `LOAD_CONST`,
    `STORE_FAST`, `LOAD_CONST`, and `RETURN_VALUE`. These instructions are interpreted
    when the function is run by a massive loop written in C.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个函数，Python 3.11 编译成了指令 `LOAD_CONST`、`STORE_FAST`、`LOAD_CONST` 和 `RETURN_VALUE`。这些指令在函数被一个大循环写成的
    C 中解释时被解释。
- en: 'If you were to write a very crude Python evaluation loop in Python equivalent
    to the one in C, it would look something like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你用 Python 编写一个非常简陋的 Python 评估循环，等价于 C 中的循环，它会看起来像这样：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you gave this interpreter our test function, it would execute them and print
    the results:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你把这个解释器赋予我们的测试函数，它会执行它们并打印结果：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This loop with a big switch/if-else statement is an equivalent, albeit simplified
    version of how CPython’s interpreter loop works. CPython is written in C and compiled
    by a C compiler. For the sake of simplicity I’ll build out this example in Python.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个循环带有一个大的 switch/if-else 语句，是 CPython 解释器循环的等效版本，虽然简化了。CPython 是用 C 编写的，并且由
    C 编译器编译。为了简单起见，我会在 Python 中构建这个示例。
- en: For our interpreter, everytime you want to run the function, `func` it has to
    loop through each instruction and compare the bytecode name (called the opcode)
    with each if-statement. Both this comparison and the loop itself add an overhead
    to the execution. That overhead seems redundant if you run the function 10,000
    times and the bytecodes never change (because they are immutable). It would be
    more efficient to instead generate the code in a sequence instead of a evaluating
    this loop every time you call the function.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的解释器，每次想要运行函数`func`时，它都必须循环遍历每个指令，并将字节码名称（称为操作码）与每个 if 语句进行比较。这种比较和循环本身都会增加执行的开销。如果你运行函数
    10,000 次且字节码从不改变（因为它们是不可变的），那么这种开销就显得多余了。相比每次调用函数都要评估这个循环，生成一个序列代码会更有效率。
- en: This is what a JIT does. There are many types of JIT compiler. Numba is a JIT.
    PyPy has a JIT. Java has lots of JITs. Pyston and Pyjion are JITs.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 JIT 做的事情。有许多类型的 JIT 编译器。Numba 是 JIT。PyPy 有 JIT。Java 有很多 JIT。Pyston 和 Pyjion
    是 JIT。
- en: The JIT that is proposed for Python 3.13 is a copy-and-patch JIT.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 提议用于 Python 3.13 的 JIT 是复制和补丁 JIT。
- en: What is a copy-and-patch JIT?
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是复制和补丁 JIT？
- en: Never heard of a copy-and-patch JIT? Don’t worry, nor had I and nor have most
    people. It’s an idea [only proposed recently in 2021](https://dl.acm.org/doi/10.1145/3485513)
    and designed as a fast algorithm for dynamic language runtimes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从来没有听说过复制和补丁 JIT？别担心，我也没有，大多数人也没有。它是[2021 年才最近提出的一个想法](https://dl.acm.org/doi/10.1145/3485513)，旨在作为动态语言运行时的快速算法。
- en: I’ll try and explain what a copy-and-patch JIT is by expanding our interpreter
    loop and rewriting it as a JIT. Before, the interpreter loop did two things, first
    it interpreted (looked at the bytecode) then it executed (ran the instruction).
    What we can do instead is to separate those tasks and have the interpreter output
    the instructions and not execute them.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我会尝试通过扩展我们的解释器循环并将其重写为 JIT 来解释什么是复制和补丁 JIT。以前，解释器循环执行了两件事，首先它解释了（查看字节码），然后它执行了（运行指令）。我们可以做的是将这些任务分开，并让解释器输出指令而不执行它们。
- en: 'A **copy-and-patch** JIT is the idea that you **copy** the instructions for
    each command and fill-in-the-blanks for that bytecode arguments (or **patch**).
    Here’s a rewritten example, I keep the loop very similar but each time I append
    a code string with the Python code to execute:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 复制和补丁 JIT 是这样一个理念，你**复制**每个命令的指令并为该字节码参数填充空白（或**补丁**）。下面是一个重写的例子，我保持循环非常相似，但每次我附加一个代码字符串与要执行的
    Python 代码：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This result for the original function is:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 原始函数的这个结果是：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This time, the code is **sequential** and doesn’t require the loop to execute.
    We can store the resulting string and run it as many times as we like:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，代码是**顺序**的，不需要循环执行。我们可以存储结果字符串，然后随意运行它：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What was the point in that? Well the resulting code does the same thing, but
    it should run faster. I gave the two implementations to [rich bench](https://pypi.org/project/richbench/)
    and the copy-and-patch method runs faster *(Keep in mind though that loops in
    Python are very slow compared to C.)*
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 那有什么意义呢？嗯，生成的代码做同样的事情，但应该运行得更快。我把这两个实现给了[rich bench](https://pypi.org/project/richbench/)，复制和补丁方法运行得更快*(不过请记住，Python
    中的循环与 C 相比非常慢。)*
- en: Why a copy-and-patch JIT?
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要使用复制和补丁 JIT？
- en: This technique of writing out the instructions for each bytecode and patching
    the values has upsides and downsides compared to a “full” JIT compiler. A full
    JIT compiler would normally compile high-level bytecodes like `LOAD_FAST` into
    lower level instructions in an IL (Intermediate Language). Because every CPU architecture
    has different instructions and features, it would be monumentally-complicated
    to write a compiler that converts high-level code directly to machine code and
    supports 32-bit and 64-bit CPUs, as well as Apple’s ARM architecture as well as
    all the other flavours of ARM. Instead most JIT’s compile first to an IL that
    is a generic machine-code-like instruction set. Those instructions are things
    like “PUSH A 64-bit integer”, “POP a 64-bit float”, “MULTIPLY the values on the
    stack”. The JIT can then compile IL into machine-code at runtime by emitting CPU-specific
    instructions and storing them in memory to be later executed (similar to how we
    did in our example).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个字节码的指令写出来并修补值的技术与“完整”JIT 编译器相比有优缺点。完整的 JIT 编译器通常会将高级字节码如 `LOAD_FAST` 编译成
    IL（中间语言）中的较低级别指令。因为每个 CPU 架构都有不同的指令和特性，编写一个直接将高级代码转换为机器代码并支持 32 位和 64 位 CPU 的编译器将是非常复杂的，还有苹果的
    ARM 架构以及所有其他的 ARM 变种。相反，大多数 JIT 首先编译为类似于通用机器码的 IL。这些指令是诸如“PUSH 64 位整数”，“POP 64
    位浮点数”，“将堆栈上的值相乘”的东西。然后 JIT 可以在运行时将 IL 编译成机器码，通过发出特定于 CPU 的指令并将它们存储在内存中以供以后执行（类似于我们在示例中所做的）。
- en: Once you have IL, you can run all sorts of fun optimizations on the code like
    [constant propagation](https://en.wikipedia.org/wiki/Constant_folding) and loop
    hoisting. You can see an example of this in [Pyjion’s live compiler UI](https://live.trypyjion.com).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你拥有 IL，你就可以对代码进行各种有趣的优化，比如[常量传播](https://zh.wikipedia.org/wiki/%E5%B8%B8%E9%87%8F%E5%B9%B3%E6%8E%A8)和循环提升。你可以在[Pyjion的在线编译器
    UI](https://live.trypyjion.com)中看到一个例子。
- en: 'The big downside with a “full” JIT is that the process of compiling once into
    IL and then again into machine code is **slow**. Not only is it slow, but it is
    memory intensive. To illustrate this, data from recent research [“Python meets
    JIT compilers: A simple implementation and a comparative evaluation”](https://doi.org/10.1002/spe.3267)
    showed that Java-based JITs for Python like GraalPy, and Jython can take up to
    100 times longer to start than normal CPython and consume up to an additional
    Gigabyte of RAM to compile. There are already full JIT implementations for Python.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '“完整”JIT 的一个大缺点是编译一次成 IL，然后再次成机器码的过程**缓慢**。它不仅慢，而且占用内存。为了说明这一点，最近研究数据[“Python
    meets JIT compilers: A simple implementation and a comparative evaluation”](https://doi.org/10.1002/spe.3267)表明，像
    GraalPy 和 Jython 这样基于 Java 的 Python JIT，启动时间可能比普通 CPython 长 100 倍，并且消耗多达额外的 1GB
    的 RAM 进行编译。已经有了 Python 的完整 JIT 实现。'
- en: Copy-and-patch was selected because the compilation from bytecodes to machine
    code is done as a set of “templates” that are then stitched together and patched
    at runtime with the correct values. This means that your average Python user isn’t
    running this complex JIT compiler architecture inside their Python runtime. Python
    writing it’s own IL and JIT would also be unreasonable since so many are available
    off-the-shelf like LLVMs and ryuJIT. But a full-JIT would require those being
    bundled with Python and all the added overheads. A copy-and-patch JIT only requires
    the LLVM JIT tools be installed on the machine where CPython is compiled from
    source, and for most people that means the machines of the CI that builds and
    packages CPython for python.org.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 选择复制和打补丁是因为从字节码编译成机器码是一组“模板”，然后在运行时与正确的值一起拼接和打补丁。这意味着你平均的 Python 用户并不是在他们的 Python
    运行时中运行这个复杂的 JIT 编译器架构。Python 自己编写 IL 和 JIT 也是不合理的，因为有许多可供使用的现成的，如 LLVM 和 ryuJIT。但是一个全
    JIT 需要将这些捆绑到 Python 中并增加所有的额外开销。一个复制和打补丁的 JIT 只需要将 LLVM JIT 工具安装在编译 CPython 源码的机器上，对于大多数人来说，这意味着构建和打包
    CPython 给 python.org 的 CI 的机器上。
- en: So how does this JIT work?
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么这个 JIT 是如何工作的呢？
- en: The copy-and-patch compiler for Python works by extending some new (and honestly
    not widely known about) APIs to Python 3.13’s API. These changes enable pluggable
    optimizers to be discoverable at runtime in CPython and control how code is executed.
    This new JIT is an optional optimizer for this new architecture. I assume that
    it will be the default in future versions once the major bugs have been squashed.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 Python 的复制-修补编译器通过扩展一些新的（老实说并不广为人知的）Python 3.13 API 来工作。这些更改使得可以在 CPython
    中在运行时发现可插拔的优化器，并控制代码的执行方式。这个新的 JIT 是这种新架构的可选优化器。我认为一旦主要的错误被解决，它将成为未来版本的默认选项。
- en: 'When you compile CPython from source, you can provide a flag `--enable-experimental-jit`
    to the configure script. This will generate machine-code templates for the Python
    bytecodes. This happens by first copying the C code for each bytecode, for example
    for LOAD_CONST, the simplest:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从源代码编译 CPython 时，你可以给 configure 脚本提供一个标志 `--enable-experimental-jit`。这将为 Python
    字节码生成机器码模板。首先复制每个字节码的 C 代码，例如对于 LOAD_CONST，最简单的：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The instructions for this bytecode are first compiled by the C compiler into
    a little shared library and then stored as machine code. Because there are some
    variables normally determined at runtime, like `oparg`, the C code is compiled
    with those parameters left as `0`. There is then a list of the 0 values that need
    to be filled in, called holes. For `LOAD_CONST`, there are 2 holes to be filled
    , the oparg and the next instruction:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字节码的指令首先由 C 编译器编译成一个小的共享库，然后存储为机器码。因为有一些在运行时通常确定的变量，比如 `oparg`，所以 C 代码被编译时这些参数被留作
    `0`。然后有一个需要填充的 0 值列表，称为空位。对于 `LOAD_CONST`，有 2 个需要填充的空位，oparg 和下一条指令：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'All of the machine code is then stored as a sequence of bytes in the file `jit_stencil.h`
    which is automatically generated by a new build stage. The disassembled code is
    stored as a comment above each bytecode template, where `JIT_OPARG` and `JIT_CONTINUE`
    are the holes to be filled:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的机器码都以字节序列的形式存储在文件 `jit_stencil.h` 中，该文件由新的构建阶段自动生成。反汇编的代码存储为每个字节码模板上方的注释，其中
    `JIT_OPARG` 和 `JIT_CONTINUE` 是待填充的空位：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The new JIT compiler, will when activated copy the machine-code instructions
    for each bytecode into a sequence and replace the values for each template with
    the arguments for that bytecode in the code object. The resulting machine code
    is stored in memory and then each time the Python function is run, that machine-code
    is executed directly.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当新的 JIT 编译器启用时，将每个字节码的机器码指令复制到一个序列中，并用该字节码在代码对象中的参数替换每个模板的值。生成的机器码存储在内存中，然后每次运行
    Python 函数时，该机器码直接执行。
- en: You can see the JITted code if you compile [my branch](https://github.com/brandtbucher/cpython/pull/32)
    and try it on this [test script](https://gist.github.com/tonybaloney/7e12e416ad69968e297547498f7bcde1)
    then give it to a disassembler like Ada Pro or Hopper. At the moment, the JIT
    is only used if the function contains the `JUMP_BACKWARD` opcode which is used
    in the `while` statement but that will change in the future.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你编译了[我的分支](https://github.com/brandtbucher/cpython/pull/32)，并尝试在这个[测试脚本](https://gist.github.com/tonybaloney/7e12e416ad69968e297547498f7bcde1)上运行，然后交给
    Ada Pro 或 Hopper 进行反汇编，你就能看到 JITted 代码。目前，只有在函数包含`JUMP_BACKWARD`操作码（在`while`语句中使用）时才会使用
    JIT，但这在未来会改变。
- en: Is it faster?
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它更快吗？
- en: The initial benchmarks show something of [a 2-9% performance improvement](https://github.com/python/cpython/pull/113465#issuecomment-1876225775).
    You might be disappointed by this number, especially since this blog post has
    been talking about assembly and machine code and nothing is faster than that right?
    Well, remember that CPython is already written in C and that was already compiled
    to machine-code by the C compiler. In most cases, this JIT will be executing almost
    the same machine-code instructions as it was before.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 初始基准测试显示了[2-9%的性能提升](https://github.com/python/cpython/pull/113465#issuecomment-1876225775)。你可能对这个数字感到失望，特别是因为这篇博文一直在谈论汇编和机器码，而没有比它更快的东西，对吧？嗯，记住，CPython
    已经是用 C 编写的，而且已经被 C 编译器编译成了机器码。在大多数情况下，这个 JIT 将执行几乎与以前相同的机器码指令。
- en: '**However**, think of this JIT as being the cornerstone of a series of much
    larger optimizations. None of which are possible without it. For this change to
    be accepted, understood and maintained in an open-source project it needs to start
    simple.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**然而**，把这个 JIT 当作一系列更大优化的基石来考虑。没有它，这些优化都是不可能的。对于这种变化要在一个开源项目中被接受、理解和维护，它需要从简单的开始。'
- en: The future is bright, the future is JIT compiled
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来是光明的，未来是 JIT 编译的
- en: The challenges with the existing interpreter being compiled ahead-of-time are
    that there are fewer opportunities for serious optimizations. Python 3.11’s adaptive
    interpreter was a step in the right direction, but it needs to go a lot further
    for Python to see a step-change in performance.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现有解释器提前编译的挑战在于很少有机会进行严重优化。Python 3.11 的自适应解释器是朝着正确方向迈出的一步，但为了让 Python 见到性能上的飞跃，还需要做出更大的努力。
- en: I think that whilst the first version of this JIT isn’t going to seriously dent
    any benchmarks (yet), it opens the door to some huge optimizations and not just
    ones that benefit the toy benchmark programs in the standard benchmark suite.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为，虽然这个 JIT 的第一个版本还不会严重影响任何基准测试（至少目前还没有），但它为一些巨大的优化打开了大门，不仅仅是对标准基准套件中的玩具基准程序有利的优化。
