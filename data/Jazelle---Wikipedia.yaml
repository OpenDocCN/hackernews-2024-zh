- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '类别: 未分类'
- en: 'date: 2024-05-27 15:01:34'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-05-27 15:01:34'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Jazelle - Wikipedia
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jazelle - 维基百科
- en: 来源：[https://en.wikipedia.org/wiki/Jazelle](https://en.wikipedia.org/wiki/Jazelle)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://en.wikipedia.org/wiki/Jazelle](https://en.wikipedia.org/wiki/Jazelle)
- en: Hardware extension for ARM processors
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ARM 处理器的硬件扩展
- en: '**Jazelle DBX** (direct bytecode execution)^([[1]](#cite_note-patent-1)) is
    an extension that allows some [ARM](/wiki/ARM_architecture "ARM architecture")
    processors to execute [Java bytecode](/wiki/Java_bytecode "Java bytecode") in
    [hardware](/wiki/Computer_hardware "Computer hardware") as a third execution state
    alongside the existing ARM and [Thumb](/wiki/ARM_architecture#Thumb "ARM architecture")
    modes.^([[2]](#cite_note-product-2)) Jazelle functionality was specified in the
    ARMv5TEJ architecture^([[3]](#cite_note-armarm-3)) and the first processor with
    Jazelle technology was the [ARM926EJ-S](/wiki/ARM9 "ARM9").^([[4]](#cite_note-Shanghai-4))
    Jazelle is denoted by a "J" appended to the CPU name, except for post-v5 cores
    where it is required (albeit only in trivial form) for architecture conformance.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jazelle DBX**（直接字节码执行）^([[1]](#cite_note-patent-1)) 是一个扩展，允许一些[ARM](/wiki/ARM_architecture
    "ARM architecture")处理器在[硬件](/wiki/Computer_hardware "Computer hardware")中以第三个执行状态执行[Java字节码](/wiki/Java_bytecode
    "Java bytecode")，与现有的 ARM 和[Thumb](/wiki/ARM_architecture#Thumb "ARM architecture")
    模式并存。^([[2]](#cite_note-product-2)) Jazelle 功能在 ARMv5TEJ 架构中被规定^([[3]](#cite_note-armarm-3))，具有
    Jazelle 技术的第一款处理器是[ARM926EJ-S](/wiki/ARM9 "ARM9")。^([[4]](#cite_note-Shanghai-4))
    除了在架构符合性上（尽管只是形式上）要求后 v5 核心中都会在 CPU 名称后添加 "J" 表示 Jazelle。'
- en: '[Jazelle RCT](/wiki/Jazelle_RCT "Jazelle RCT") (Runtime Compilation Target)
    is a different technology based on ThumbEE mode; it supports [ahead-of-time](/wiki/Ahead-of-time_compilation
    "Ahead-of-time compilation") (AOT) and [just-in-time](/wiki/Just-in-time_compilation
    "Just-in-time compilation") (JIT) compilation with Java and other execution environments.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Jazelle RCT](/wiki/Jazelle_RCT "Jazelle RCT")（运行时编译目标）是基于 ThumbEE 模式的不同技术；它支持与
    Java 和其他执行环境一起进行[提前](/wiki/Ahead-of-time_compilation "Ahead-of-time compilation")（AOT）和[即时](/wiki/Just-in-time_compilation
    "Just-in-time compilation")（JIT）编译。'
- en: The most prominent use of Jazelle DBX is by manufacturers of mobile phones to
    increase the execution speed of [Java ME](/wiki/Java_ME "Java ME") games and applications.^([*[citation
    needed](/wiki/Wikipedia:Citation_needed "Wikipedia:Citation needed")*]) A Jazelle-aware
    [Java virtual machine](/wiki/Java_virtual_machine "Java virtual machine") (JVM)
    will attempt to run Java bytecode in hardware, while returning to the software
    for more complicated, or lesser-used bytecode operations. ARM claims that approximately
    95% of bytecode in typical program usage ends up being directly processed in the
    hardware.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Jazelle DBX 最突出的用途是由手机制造商使用，以提高[Java ME](/wiki/Java_ME "Java ME")游戏和应用的执行速度。^([*[citation
    needed](/wiki/Wikipedia:Citation_needed "Wikipedia:Citation needed")*]) 一个 Jazelle-aware
    的[Java虚拟机](/wiki/Java_virtual_machine "Java virtual machine")（JVM）将尝试在硬件中运行 Java
    字节码，同时在更复杂或较少使用的字节码操作时返回到软件中执行。ARM 声称，典型程序使用中大约 95% 的字节码最终会在硬件中直接处理。
- en: The published specifications are very incomplete, being only sufficient for
    writing [operating system](/wiki/Operating_system "Operating system") code that
    can support a JVM that uses Jazelle.^([*[citation needed](/wiki/Wikipedia:Citation_needed
    "Wikipedia:Citation needed")*]) The declared intent is that only the JVM software
    needs to (or is allowed to) depend on the hardware interface details. This tight
    binding facilitates the hardware and JVM evolving together without affecting other
    software. In effect, this gives [ARM Holdings](/wiki/ARM_Holdings "ARM Holdings")
    considerable control over which JVMs are able to exploit Jazelle.^([*[citation
    needed](/wiki/Wikipedia:Citation_needed "Wikipedia:Citation needed")*]) It also
    prevents open source JVMs from using Jazelle. These issues do not apply to the
    ARMv7 ThumbEE environment, the nominal successor to Jazelle DBX.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 已发布的规范非常不完整，只足以编写可支持使用 Jazelle 的 JVM 的[操作系统](/wiki/Operating_system "Operating
    system")代码。^([*[citation needed](/wiki/Wikipedia:Citation_needed "Wikipedia:Citation
    needed")*]) 声明的意图是只有 JVM 软件需要（或被允许）依赖于硬件接口细节。这种紧密的绑定有助于硬件和 JVM 一起演化而不影响其他软件。实际上，这使得[ARM
    Holdings](/wiki/ARM_Holdings "ARM Holdings")对能够利用 Jazelle 的 JVM 有相当大的控制权。^([*[citation
    needed](/wiki/Wikipedia:Citation_needed "Wikipedia:Citation needed")*]) 这也阻止了开源
    JVM 使用 Jazelle。这些问题不适用于 ARMv7 ThumbEE 环境，这是 Jazelle DBX 的名义上的继任者。
- en: 'Implementation[[edit](/w/index.php?title=Jazelle&action=edit&section=1 "Edit
    section: Implementation")]'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '实施[[编辑](/w/index.php?title=Jazelle&action=edit&section=1 "Edit section: Implementation")]'
- en: The Jazelle extension uses low-level [binary translation](/wiki/Binary_translation
    "Binary translation"), implemented as an extra stage between the fetch and decode
    stages in the processor [instruction pipeline](/wiki/Instruction_pipeline "Instruction
    pipeline"). Recognised bytecodes are converted into a string of one or more native
    ARM instructions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Jazelle扩展使用低级别的[二进制翻译](/wiki/Binary_translation "二进制翻译")，作为处理器[指令流水线](/wiki/Instruction_pipeline
    "指令流水线")中提取和解码阶段之间的额外阶段实现。识别的字节码被转换为一个或多个本地ARM指令字符串。
- en: The Jazelle mode moves JVM interpretation into hardware for the most common
    simple JVM instructions. This is intended to significantly reduce the cost of
    interpretation. Among other things, this reduces the need for [Just-in-time compilation](/wiki/Just-in-time_compilation
    "Just-in-time compilation") and other JVM accelerating techniques.^([[5]](#cite_note-CPM-5))
    JVM instructions that are not implemented in Jazelle hardware cause appropriate
    routines in the Jazelle-aware JVM implementation to be invoked. Details are not
    published, since all JVM innards are transparent (except for performance) if correctly
    interpreted.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Jazelle模式将JVM解释移入硬件，用于最常见的简单JVM指令。这旨在显著减少解释成本。除此之外，这减少了对[即时编译](/wiki/Just-in-time_compilation
    "即时编译")和其他JVM加速技术的需求。^([[5]](#cite_note-CPM-5)) 在Jazelle硬件中未实现的JVM指令会导致调用Jazelle感知的JVM实现中的适当例程。细节未公布，因为只要正确解释，所有JVM内部都是透明的（除了性能）。
- en: Jazelle mode is entered via the BXJ instructions. A hardware implementation
    of Jazelle will only cover a subset of JVM bytecodes. For unhandled bytecodes—or
    if overridden by the operating system—the hardware will invoke the software JVM.
    The system is designed so that the software JVM does not need to know which bytecodes
    are implemented in hardware and a software fallback is provided by the software
    JVM for the full set of bytecodes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过BXJ指令进入Jazelle模式。Jazelle的硬件实现只覆盖了JVM字节码的一个子集。对于未处理的字节码，或者如果被操作系统覆盖，硬件将调用软件JVM。该系统设计使得软件JVM无需知道哪些字节码是在硬件中实现的，并且为完整的字节码集提供了软件回退。
- en: 'Instruction set[[edit](/w/index.php?title=Jazelle&action=edit&section=2 "Edit
    section: Instruction set")]'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指令集[[编辑](/w/index.php?title=Jazelle&action=edit&section=2 "编辑：指令集")]
- en: 'The Jazelle [instruction set](/wiki/Instruction_set "Instruction set") is well
    documented as [Java bytecode](/wiki/Java_bytecode "Java bytecode"). However, ARM
    has not released details on the exact execution environment details; the documentation
    provided with Sun''s [HotSpot](/wiki/HotSpot_(virtual_machine) "HotSpot (virtual
    machine)") [Java Virtual Machine](/wiki/Java_virtual_machine "Java virtual machine")
    goes as far as to state: "For the avoidance of doubt, distribution of products
    containing software code to exercise the BXJ instruction and enable the use of
    the ARM Jazelle architecture extension without [..] agreement from ARM is expressly
    forbidden."^([[6]](#cite_note-Hotspot-6))'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Jazelle [指令集](/wiki/Instruction_set "指令集") 得到了良好的文档支持，被作为[Java字节码](/wiki/Java_bytecode
    "Java字节码")进行了描述。然而，ARM并没有公布关于确切执行环境细节的详细信息；Sun的[HotSpot](/wiki/HotSpot_(virtual_machine)
    "HotSpot (虚拟机)") [Java虚拟机](/wiki/Java_virtual_machine "Java虚拟机")提供的文档甚至声明：“为了避免疑问，未经ARM同意，分发含有软件代码以执行BXJ指令并启用ARM
    Jazelle架构扩展的产品是明确禁止的。”^([[6]](#cite_note-Hotspot-6))
- en: Employees of ARM have in the past published several white papers that do give
    some good pointers about the processor extension.^([*[citation needed](/wiki/Wikipedia:Citation_needed
    "Wikipedia:Citation needed")*]) Versions of the ARM Architecture reference Manual
    available from 2008 have included pseudocode for the "BXJ" (Branch and eXchange
    to Java) instruction, but with the finer details being shown as "SUB-ARCHITECTURE
    DEFINED" and documented elsewhere.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: ARM的员工过去曾发布过几篇白皮书，提供了一些关于处理器扩展的有益指导。^([*[需要引证](/wiki/Wikipedia:Citation_needed
    "Wikipedia:Citation needed")*]) 2008年起可获取的ARM架构参考手册版本包括了“BXJ”（Branch and eXchange
    to Java）指令的伪代码，但更详细的细节被显示为“子架构定义”，并在其他地方记录。
- en: 'Application binary interface (ABI)[[edit](/w/index.php?title=Jazelle&action=edit&section=3
    "Edit section: Application binary interface (ABI)")]'
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序二进制接口 (ABI)[[编辑](/w/index.php?title=Jazelle&action=edit&section=3 "编辑：应用程序二进制接口
    (ABI)")]
- en: The Jazelle state relies on an agreed [calling convention](/wiki/Calling_convention
    "Calling convention") between the JVM and the Jazelle hardware state. This [application
    binary interface](/wiki/Application_binary_interface "Application binary interface")
    is not published by ARM, rendering Jazelle an [undocumented feature](/wiki/Undocumented_feature
    "Undocumented feature") for most users and Free Software JVMs.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Jazelle 状态依赖于 JVM 和 Jazelle 硬件状态之间约定的[调用约定](/wiki/Calling_convention "调用约定")。这种[应用程序二进制接口](/wiki/Application_binary_interface
    "应用程序二进制接口")未由 ARM 发布，使 Jazelle 成为大多数用户和自由软件 JVM 的一个[未记录功能](/wiki/Undocumented_feature
    "未记录功能")。
- en: The entire VM state is held within normal ARM registers, allowing compatibility
    with existing operating systems and interrupt handlers unmodified. Restarting
    a bytecode (such as following a return from interrupt) will re-execute the complete
    sequence of related ARM instructions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 整个 VM 状态保存在正常的 ARM 寄存器中，允许与现有操作系统和未修改的中断处理程序兼容。重新启动字节码（例如在中断返回后）将重新执行相关 ARM
    指令的完整序列。
- en: 'Specific registers are designated to hold the most important parts of the JVM
    state: registers R0–R3 hold an alias of the top of the Java stack, R4 holds Java
    local operand zero (pointer to `*this`) and R6 contains the Java stack pointer.^([[7]](#cite_note-accelerating-7))'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 特定寄存器被指定为保存 JVM 状态的最重要部分：寄存器 R0–R3 保存 Java 栈顶的别名，R4 保存 Java 局部操作数零（指向 `*this`
    的指针），R6 包含 Java 栈指针。^([[7]](#cite_note-accelerating-7))
- en: Jazelle reuses the existing [program counter](/wiki/Program_counter "Program
    counter") PC or its synonym register R15\. A pointer to the *next* bytecode goes
    in R14,^([[8]](#cite_note-Intel-8)) so the use of the PC is not generally user-visible
    except during debugging.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Jazelle 重用现有的[程序计数器](/wiki/Program_counter "程序计数器") PC 或其同义寄存器 R15。指向*下一个*字节码的指针存放在
    R14 中，^([[8]](#cite_note-Intel-8)) 因此在调试过程中，通常不会直接看到 PC 的使用。
- en: 'CPSR: Mode indication[[edit](/w/index.php?title=Jazelle&action=edit&section=4
    "Edit section: CPSR: Mode indication")]'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CPSR：模式指示[[编辑](/w/index.php?title=Jazelle&action=edit&section=4 "编辑章节：CPSR：模式指示")]
- en: Java bytecode is indicated as the current instruction set by a combination of
    two bits in the ARM CPSR (Current Program Status Register). The "T"-bit must be
    cleared and the "J"-bit set.^([[9]](#cite_note-lkml-9))
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Java 字节码通过 ARM CPSR（Current Program Status Register）中的两个比特的组合来表示当前指令集。必须清除“T”比特并设置“J”比特。^([[9]](#cite_note-lkml-9))
- en: Bytecodes are decoded by the hardware in two stages (versus a single stage for
    Thumb and ARM code) and switching between hardware and software decoding (Jazelle
    mode and ARM mode) takes ~4 clock cycles.^([[10]](#cite_note-embedded-10))
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 字节码由硬件在两个阶段解码（与 Thumb 和 ARM 代码的单个阶段相比），在硬件和软件解码（Jazelle 模式和 ARM 模式）之间切换需要约 4
    个时钟周期。^([[10]](#cite_note-embedded-10))
- en: For entry to Jazelle hardware state to succeed, the JE (Jazelle Enable)^([[3]](#cite_note-armarm-3))
    bit in the CP14:C0(C2)[bit 0] register must be set; clearing of the JE bit by
    a [privileged] operating system provides a high-level override to prevent application
    programs from using the hardware Jazelle acceleration.^([[11]](#cite_note-armarmjp-11))
    Additionally, the CV (Configuration Valid) bit^([[3]](#cite_note-armarm-3)) found
    in CP14:c0(c1)[bit 1]^([[11]](#cite_note-armarmjp-11)) must be set to show that
    there is a consistent Jazelle state setup for the hardware to use.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功进入 Jazelle 硬件状态，必须设置 CP14:C0(C2) 寄存器中的 JE（Jazelle Enable）^([[3]](#cite_note-armarm-3))
    位；[特权]操作系统通过清除 JE 位提供了一个高级别的覆盖，以防止应用程序使用硬件 Jazelle 加速。^([[11]](#cite_note-armarmjp-11))
    此外，必须设置 CP14:c0(c1) 寄存器中的 CV（Configuration Valid）^([[3]](#cite_note-armarm-3))
    位，以表明硬件使用的 Jazelle 状态设置是一致的。
- en: 'BXJ: Branch to Java[[edit](/w/index.php?title=Jazelle&action=edit&section=5
    "Edit section: BXJ: Branch to Java")]'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: BXJ：跳转到 Java[[编辑](/w/index.php?title=Jazelle&action=edit&section=5 "编辑章节：BXJ：跳转到
    Java")]
- en: The BXJ instruction attempts to switch to Jazelle state, and if allowed and
    successful, sets the "J" bit in the CPSR; otherwise, it "falls through" and acts
    as a standard BX ([Branch](/wiki/Branch_(computer_science) "Branch (computer science)"))
    instruction.^([[3]](#cite_note-armarm-3)) The only time when an operating system
    or debugger must be fully aware of the Jazelle mode is when decoding a faulted
    or trapped instruction. The Java [program counter](/wiki/Program_counter "Program
    counter") (PC) pointing to the next instructions must be placed in the Link Register
    (R14) before executing the BXJ branch request, as regardless of hardware or software
    processing, the system must know where to begin decoding.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: BXJ 指令尝试切换到 Jazelle 状态，如果允许且成功，则设置 CPSR 中的“J”位；否则，它将“穿透”并充当标准的 BX（[Branch](/wiki/Branch_(computer_science)
    "Branch (computer science)")）指令。^([[3]](#cite_note-armarm-3)) 当操作系统或调试器必须完全了解
    Jazelle 模式时，唯一的时间是解码出现故障或陷入的指令时。在执行 BXJ 分支请求之前，指向下一条指令的 Java [程序计数器](/wiki/Program_counter
    "Program counter")（PC）必须被放置在链接寄存器（R14）中，因为无论硬件还是软件处理，系统都必须知道从哪里开始解码。
- en: Because the current state is held in the CPSR, the bytecode instruction set
    is automatically reselected after task-switching and processing of the current
    Java bytecode is restarted.^([[7]](#cite_note-accelerating-7))
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于当前状态保存在 CPSR 中，所以在任务切换后会自动重新选择字节码指令集，并重新启动当前 Java 字节码的处理。^([[7]](#cite_note-accelerating-7))
- en: 'Following an entry into the Jazelle state mode, bytecodes can be processed
    in one of three ways: decoded and executed natively in hardware, handled in software
    (with optimised ARM/ThumbEE JVM code), or treated as an invalid/illegal opcode.
    The third case will cause a branch to an ARM exception mode, as will a Java bytecode
    of 0xff, which is used for setting JVM breakpoints.^([[12]](#cite_note-ARM1026EJ-S-12))'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 进入 Jazelle 状态模式后，字节码可以通过以下三种方式之一进行处理：在硬件中进行解码和执行原生处理，以软件方式处理（使用优化的 ARM/ThumbEE
    JVM 代码），或将其视为无效/非法操作码。第三种情况将导致分支到 ARM 异常模式，以及 Java 字节码为 0xff 时，用于设置 JVM 断点。^([[12]](#cite_note-ARM1026EJ-S-12))
- en: Execution will continue in hardware until an unhandled bytecode is encountered,
    or an exception occurs. Between 134 and 149 bytecodes (out of 203 bytecodes specified
    in the JVM specification) are translated and executed directly in the hardware.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 执行将在硬件中继续，直到遇到一个未处理的字节码，或发生异常。在 JVM 规范中指定的 203 个字节码中，约有 134 到 149 个字节码被直接翻译并在硬件中执行。
- en: 'Low-level registers[[edit](/w/index.php?title=Jazelle&action=edit&section=6
    "Edit section: Low-level registers")]'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 低级别寄存器
- en: Low-level configuration registers, for the hardware virtual machine, are held
    in the ARM Co-processor "CP14 register c0". The registers allow detecting, enabling
    or disabling the hardware accelerator (if it is available).^([[13]](#cite_note-CIHIGDHI-13))
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 低级别的配置寄存器，用于硬件虚拟机，保存在 ARM 协处理器“CP14 寄存器 c0”中。这些寄存器允许检测、启用或禁用硬件加速器（如果可用）。^([[13]](#cite_note-CIHIGDHI-13))
- en: The Jazelle Identity Register in register CP14:C0(C0) is read-only accessible
    in all modes.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 CP14:C0(C0) 寄存器中，Jazelle 身份寄存器在所有模式下都是只读的。
- en: The Jazelle OS Control Register at CP14:c0(c1) is only accessible in kernel
    mode and will cause an exception when accessed in user mode.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在内核模式下，CP14:c0(c1) 寄存器中的 Jazelle 操作系统控制寄存器是唯一可访问的，在用户模式下访问时会引发异常。
- en: The Jazelle Main Configuration Register at CP14:C0(C2) is write-only in user
    mode and read-write in kernel mode.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 CP14:C0(C2) 寄存器中，Jazelle 主配置寄存器在用户模式下是只写的，在内核模式下是可读可写的。
- en: A "trivial" hardware implementation of Jazelle (as found in the [QEMU](/wiki/QEMU
    "QEMU") emulator) is only required to support the BXJ opcode itself (treating
    BXJ as a normal BX instruction^([[3]](#cite_note-armarm-3))) and to return RAZ
    (Read-As-Zero) for all of the CP14:c0 Jazelle-related registers.^([[14]](#cite_note-Cortex-A8-14))
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '"Jazelle" 的一个“简单”硬件实现（如在 [QEMU](/wiki/QEMU "QEMU") 模拟器中找到的）只需支持 BXJ 操作码本身（将
    BXJ 视为正常的 BX 指令^([[3]](#cite_note-armarm-3)）并对所有 CP14:c0 与 Jazelle 相关的寄存器返回 RAZ（Read-As-Zero）。^([[14]](#cite_note-Cortex-A8-14))'
- en: 'Successor: ThumbEE[[edit](/w/index.php?title=Jazelle&action=edit&section=7
    "Edit section: Successor: ThumbEE")]'
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后继者：ThumbEE
- en: 'The ARMv7 architecture has de-emphasized Jazelle and *Direct Bytecode Execution*
    of JVM bytecodes. In implementation terms, only trivial hardware support for Jazelle
    is now required: support for entering and exiting Jazelle mode, but not for executing
    any Java bytecodes.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: ARMv7架构已经不再强调Jazelle和JVM字节码的*直接字节码执行*。在实施方面，现在只需要对Jazelle提供微不足道的硬件支持：支持进入和退出Jazelle模式，但不支持执行任何Java字节码。
- en: Instead, the *Thumb Execution Environment* ([ThumbEE](/wiki/ARM_architecture#Thumb_Execution_Environment_(ThumbEE)
    "ARM architecture")) was to be preferred, but [has since also been deprecated.](/wiki/ARM_architecture#Thumb_Execution_Environment_(ThumbEE)
    "ARM architecture") Support for ThumbEE was mandatory in ARMv7-A processors (such
    as the Cortex-A8 and Cortex-A9), and optional in ARMv7-R processors. ThumbEE targeted
    compiled environments, perhaps using [JIT](/wiki/Just-in-time_compilation "Just-in-time
    compilation") technologies. It was not at all specific to Java, and was fully
    documented; much broader adoption was anticipated than Jazelle was able to achieve.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，*Thumb执行环境* ([ThumbEE](/wiki/ARM_architecture#Thumb_Execution_Environment_(ThumbEE)
    "ARM架构")) 是首选，但[自那时以来也已被弃用。](/wiki/ARM_architecture#Thumb_Execution_Environment_(ThumbEE)
    "ARM架构") ARMv7-A处理器（如Cortex-A8和Cortex-A9）中对ThumbEE的支持是强制性的，而在ARMv7-R处理器中是可选的。
    ThumbEE面向编译环境，可能使用[JIT](/wiki/Just-in-time_compilation "即时编译")技术。它与Java毫无关系，并且有完整的文档；预期它的广泛采用将比Jazelle能够实现的更多。
- en: ThumbEE was a variant of the Thumb2 16/32-bit instruction set. It integrated
    null pointer checking; defined some new fault mechanisms; and repurposed the 16-bit
    LDM and STM opcode space to support a few instructions such as range checking,
    a new handler invocation scheme, and more. Accordingly, compilers that produced
    Thumb or Thumb2 code could be modified to work with ThumbEE-based runtime environments.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: ThumbEE是Thumb2 16/32位指令集的一个变体。它集成了空指针检查；定义了一些新的故障机制；并重新分配了16位LDM和STM的操作码空间，以支持一些指令，如范围检查，新的处理程序调用方案等。因此，生成Thumb或Thumb2代码的编译器可以修改为与基于ThumbEE的运行时环境配合使用。
- en: 'References[[edit](/w/index.php?title=Jazelle&action=edit&section=8 "Edit section:
    References")]'
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考资料[[编辑](/w/index.php?title=Jazelle&action=edit&section=8 "编辑：参考资料")]
