- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 13:27:09'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 13:27:09'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Electronics | Free Full-Text | MeMPA: A Memory Mapped M-SIMD Co-Processor to
    Cope with the Memory Wall Issue'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Electronics | Free Full-Text | MeMPA：一种用于应对内存墙问题的内存映射M-SIMD协处理器
- en: 来源：[https://www.mdpi.com/2079-9292/13/5/854](https://www.mdpi.com/2079-9292/13/5/854)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.mdpi.com/2079-9292/13/5/854](https://www.mdpi.com/2079-9292/13/5/854)
- en: To have straightforward esteem of the performance goodness achieved by MeMPA,
    we decided to map on the architecture the same benchmarks used for the Hybrid-SIMD
    evaluation [
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了直接评估MeMPA实现的性能优劣，我们决定在架构上映射与混合SIMD评估中使用的相同基准测试
- en: '[2](#B2-electronics-13-00854)'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[2](#B2-electronics-13-00854)'
- en: '], i.e., K-Nearest Neighbor (K-NN), K-means, Matrix-Vector Multiplication (MVM),
    Mean and Variance ('
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: ，即K-最近邻（K-NN）、K均值、矩阵-向量乘法（MVM）、均值和方差（
- en: <math display="inline"><semantics><mi>μ</mi></semantics></math>
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mi>μ</mi></semantics></math>
- en: '&'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '&'
- en: <math display="inline"><semantics><msup><mi>σ</mi> <mn>2</mn></msup></semantics></math>
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><msup><mi>σ</mi> <mn>2</mn></msup></semantics></math>
- en: ), and Discrete Fourier Transform (DFT). Moreover, because of the lack of a
    real compiler for MeMPA, we excluded implementing the same SPLASH-2 algorithms
    used for the profiling procedure in
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: ），以及离散傅里叶变换（DFT）。此外，由于MeMPA缺乏真正的编译器，我们排除了在
- en: '[Section 2](#sec2-electronics-13-00854)'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[Section 2](#sec2-electronics-13-00854)'
- en: ', for which a manual mapping would have been extremely hard.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 其中手动映射将会非常困难。
- en: '[Table 1](#electronics-13-00854-t001)'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[Table 1](#electronics-13-00854-t001)'
- en: sums up the algorithms mapping in terms of number of processed data, number
    of clock cycles needed for the algorithm execution, and related power consumption.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 总结了算法在数据处理数量、算法执行所需的时钟周期数以及相关的功耗方面的映射。
- en: For the sake of brevity, in the following, only the mapping of one among the
    implemented algorithms is detailed. In particular, the MVM mapping is provided
    for a two-fold reason. On the one hand, the MVM allows us to easily point out
    how the MeMPA highlights, as reduction tree mechanism, M-SIMD computing paradigm,
    and battleship game-like enabling mechanism, can be exploited to efficiently execute
    an application. On the other hand, it represents the operation at the base of
    convolutional neural networks that belong to the set of data-intensive applications
    that would heavily benefit from MeMPA usage in terms of time and energy consumption.
    However, the implementation of all other algorithms can be derived following along
    the same line as the implementation described for the MVM.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，在接下来的内容中，仅详细描述了其中一个实现算法的映射。特别是，MVM映射出于两个重要原因。一方面，MVM允许我们轻松指出MeMPA如何突出显示作为减少树机制、M-SIMD计算范式和像战舰游戏一样的启用机制，可以有效地执行应用程序。另一方面，它代表了卷积神经网络的基本操作，属于数据密集型应用程序的集合，这些应用程序在时间和能耗方面都将从MeMPA的使用中大大受益。然而，可以通过与描述的MVM实现相同的方式推导出所有其他算法的实现。
- en: MVM
  id: totrans-split-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: MVM
- en: 'The mapping of any algorithm on MeMPA is given by two macro phases: the Processing
    Matrix initialization phase, where the CPU loads inside the Processing Matrix
    all data to be elaborated, and the algorithm execution phase, where the algorithm
    execution actually takes place.'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 任何算法在MeMPA上的映射由两个宏阶段确定：处理矩阵初始化阶段，在其中CPU加载要处理的所有数据到处理矩阵中，以及算法执行阶段，在其中实际执行算法。
- en: Concerning the MVM described in
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '关于在《[MeMPA: A Memory Mapped M-SIMD Co-Processor to Cope with the Memory Wall
    Issue](https://www.mdpi.com/2079-9292/13/5/854)》中描述的MVM，'
- en: '[Table 1](#electronics-13-00854-t001)'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[Table 1](#electronics-13-00854-t001)'
- en: ', the implemented multiplication was performed between a 16 × 16 matrix and
    a 16 × 1 vector. Thus, during the Processing Matrix initialization phase, each
    of the matrix elements was stored inside a different Block Word of the Smart Blocks,
    while all the vector items were loaded inside the first row of Standard Blocks.
    The whole Processing Matrix initialization phase took 272 clock cycles, namely,
    one clock cycle for each data writing.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: ，实现的乘法是在一个16×16矩阵和一个16×1向量之间执行的。因此，在处理矩阵初始化阶段，每个矩阵元素都存储在智能块的不同块字中，而所有向量项都加载到标准块的第一行中。整个处理矩阵初始化阶段共花费了272个时钟周期，即每个数据写入使用一个时钟周期。
- en: Then, one instruction was instantiated (one clock cycle) to perform the backup
    of the Block Words data into the first location of the Register Files, a step
    that is always needed for any algorithm in order to avoid losing the initial data
    when, at the end of the algorithm, the MeMPA saves the results into the Block
    Words to make them visible to the CPU.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，一个指令被实例化（一个时钟周期），用于将块字数据备份到寄存器文件的第一个位置，这一步骤对于任何算法都是必要的，以避免在算法结束时，MeMPA保存结果到块字中以便CPU看到时，丢失初始数据。
- en: Afterward, the real algorithm execution phase began by carrying out the 256
    products between each matrix element (
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，真正的算法执行阶段开始，通过在每个矩阵元素之间执行 256 个乘积 (
- en: <math display="inline"><semantics><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mi>j</mi></mrow></msub></semantics></math>
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mi>j</mi></mrow></msub></semantics></math>
- en: ) and the right vector item (
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: ) 和右向量项 (
- en: <math display="inline"><semantics><msub><mi>y</mi> <mi>j</mi></msub></semantics></math>
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><msub><mi>y</mi> <mi>j</mi></msub></semantics></math>
- en: ) needed for the computation of the final vector elements
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: ) 需要
- en: <math display="inline"><semantics><mrow><msub><mi>z</mi> <mi>i</mi></msub> <mo>=</mo>
    <msubsup><mo>∑</mo> <mrow><mi>j</mi> <mo>=</mo> <mn>0</mn></mrow> <mn>15</mn></msubsup>
    <msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo> <mi>j</mi></mrow></msub> <msub><mi>y</mi>
    <mi>j</mi></msub></mrow></semantics></math>
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mrow><msub><mi>z</mi> <mi>i</mi></msub> <mo>=</mo>
    <msubsup><mo>∑</mo> <mrow><mi>j</mi> <mo>=</mo> <mn>0</mn></mrow> <mn>15</mn></msubsup>
    <msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo> <mi>j</mi></mrow></msub> <msub><mi>y</mi>
    <mi>j</mi></msub></mrow></semantics></math>
- en: . In total, 5 + 1 instructions (six clock cycles) were used to fulfill these
    multiplications. In particular, for the first five instructions, all IDs were
    active, each driving only one Smart Blocks row at a time. A scheme of the first
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: . 总共，使用了 5 + 1 条指令（六个时钟周期）来完成这些乘法。特别是，对于前五条指令，所有的 ID 都是活动的，每次只驱动一个智能块行。第一种方案
- en: '`VLIW_Instruction`'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`VLIW_Instruction`'
- en: is reported
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 报告
- en: '[Figure 4](#electronics-13-00854-f004)'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4](#electronics-13-00854-f004)'
- en: .
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: Through this instruction, 1st, 6th, and 11th Smart Block rows were driven to
    compute all the
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此指令，驱动了第 1、6 和第 11 行智能块行以计算所有
- en: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mi>j</mi></mrow></msub> <mo>·</mo> <msub><mi>y</mi> <mi>j</mi></msub></mrow></semantics></math>
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mi>j</mi></mrow></msub> <mo>·</mo> <msub><mi>y</mi> <mi>j</mi></msub></mrow></semantics></math>
- en: (with i = 0, 5, 10 and j = 0, …, 15) terms in parallel and save the outcome
    in the associated Bypass Storages. In more detail, looking at the structure of
    the first instruction in
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: (i = 0, 5, 10 和 j = 0, …, 15) 并行项并将结果保存在相关的旁路存储器中。更详细地说，看看第一条指令的结构在
- en: '[Figure 4](#electronics-13-00854-f004)'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4](#electronics-13-00854-f004)'
- en: ', it can be seen that for ID1 (i.e., the first group of five Smart Block rows
    starting from the top in the diagram in'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: ', 可以看到对于 ID1 (即图中从顶部开始的第一组五行智能块行)，'
- en: '[Figure 2](#electronics-13-00854-f002)'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2](#electronics-13-00854-f002)'
- en: b), the activation pattern sees only the first row of Smart Blocks enabled,
    while the others are not (
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: b)，激活模式仅看到第一行智能块启用，而其他行则未启用 (
- en: '`EN ROW = “10000”`'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`EN ROW = “10000”`'
- en: ). The operation performed is a multiplication (
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: ). 执行的操作是乘法 (
- en: '`OPCODE = Multiplier`'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`OPCODE = Multiplier`'
- en: ), having the data from the Column Interconnection and the Block Word as source
    operators (
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: ), 将来自列互联和块字的数据作为源操作符 (
- en: '`SOURCE OP = Col_Int_Block_Word`'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`SOURCE OP = Col_Int_Block_Word`'
- en: ). The data from the Column Interconnection are specified in the
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: ). Column Interconnection 中的数据在
- en: '`ADDRESS S1`'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`ADDRESS S1`'
- en: field, which represents the address offset value from the first Smart Block
    belonging to the group. In this case, being the first group of Smart Blocks, the offset
    will be equal to 16, which is the sixteenth row of the Processing Matrix (corresponding
    to the first row of Standard Blocks). Finally, the destination is simply specified
    in the
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 字段，表示从组内第一个智能块开始的地址偏移值。在这种情况下，作为第一组智能块，偏移将等于 16，即处理矩阵的第十六行（对应标准块的第一行）。最后，目的地简单地指定在
- en: '`DEST OP`'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEST OP`'
- en: field as Bypass, wanting to save the data in Bypass Storages. The same reasoning
    can be applied to ID2, which identifies the second group of Smart Blocks, also
    arranged in five rows. Again, the
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 字段作为旁路，希望保存在旁路存储器中。同样的推理可以应用于 ID2，它标识第二组智能块，也排列在五行中。再次，用于计算最终向量元素的
- en: '`EN ROW`'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`EN ROW`'
- en: is equal to
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 等于
- en: '`“10000”`'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`“10000”`'
- en: identifying only the first row of the subgroup; the operation is always the
    multiplication (
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 仅标识子组的第一行；操作始终是乘法 (
- en: '`OPCODE = Multiplier`'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`OPCODE = Multiplier`'
- en: ); the source operands always coming from the Column Interconnections and the
    Block Words (
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: ); 源操作数始终来自列互联和块字 (
- en: '`SOURCE OP = Col_Int_Block_Word`'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`SOURCE OP = Col_Int_Block_Word`'
- en: ); the destination always Bypass Storages (
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: ); 目标始终为旁路存储器 (
- en: '`DEST OP = Bypass`'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEST OP = Bypass`'
- en: ), while the offset this time is equal to 11, always pointing to the first row
    of Standard Blocks.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: ), 而这次的偏移量等于 11，总是指向标准块的第一行。
- en: Exploiting the same rationale, second, third, fourth, and fifth instructions
    computed the <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi>
    <mo>,</mo> <mi>j</mi></mrow></msub> <mo>·</mo> <msub><mi>y</mi> <mi>j</mi></msub></mrow></semantics></math>
    terms for i equal to (1,6,11), (2,7,12), (3,8,13), and (4,9,14), respectively.
    Lastly, the sixth instruction performed the <math display="inline"><semantics><mrow><msub><mi>x</mi>
    <mrow><mn>15</mn> <mo>,</mo> <mi>j</mi></mrow></msub> <msub><mi>y</mi> <mi>j</mi></msub></mrow></semantics></math>
    products by enabling only the last Smart Blocks row through the third instruction decoder.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mn>15</mn> <mo>,</mo>
    <mi>j</mi></mrow></msub> <msub><mi>y</mi> <mi>j</mi></msub></mrow></semantics></math>
    乘积。
- en: Once all the products were ready inside the Bypass Storages of the Processing
    Matrix, all the sums generating the
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦处理矩阵的旁路存储器中准备好所有的乘积，所有生成的和都在 Block Words 的第一个智能块列中。
- en: <math display="inline"><semantics><msub><mi>z</mi> <mi>i</mi></msub></semantics></math>
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><msub><mi>z</mi> <mi>i</mi></msub></semantics></math>
- en: values were carried out in four instructions (four clock cycles). In order to
    carry this out, the reduction tree mechanism implemented due to the Row Interconnections
    was thoroughly exploited, allowing the reduction in the number of instructions
    needed for computing the 16 parallel summations from 15 to 4 instructions. The scheme
    of the first of these four instructions is shown in
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在四个指令（四个时钟周期）中进行了值的计算。为了实现这一点，充分利用了由行互联实施的减少树机制，从而将计算16个并行求和所需的指令数从15个减少到4个。这四个指令中的第一个指令的方案如下所示：
- en: '[Figure 4](#electronics-13-00854-f004)'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4](#electronics-13-00854-f004)'
- en: '(Instruction 8). Differently from the previous set of instructions, where all
    the enable signals for the Smart Block columns were always active, each of these
    four instructions activated a different set of Smart Block columns, while all
    the IDs drove all the Smart Block rows with the same operation for the current
    clock cycle. For the first instruction, all the odd Smart Block columns were enabled
    so that all the following sums were computed and saved in the Bypass Storages:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: （指令8）。与之前一组指令不同的是，在智能块列的所有启用信号始终处于活动状态的情况下，这四个指令中的每一个激活了不同的智能块列集合，而所有的ID都驱动了当前时钟周期的所有智能块行，以进行相同的操作。对于第一个指令，所有奇数智能块列都被启用，以便计算所有后续的和并保存在旁路存储器中：
- en: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>0</mn></mrow></msub> <msub><mi>y</mi> <mn>0</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>1</mn></mrow></msub> <msub><mi>y</mi> <mn>1</mn></msub></mrow></semantics></math>
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>0</mn></mrow></msub> <msub><mi>y</mi> <mn>0</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>1</mn></mrow></msub> <msub><mi>y</mi> <mn>1</mn></msub></mrow></semantics></math>
- en: ','
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>2</mn></mrow></msub> <msub><mi>y</mi> <mn>2</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>3</mn></mrow></msub> <msub><mi>y</mi> <mn>3</mn></msub></mrow></semantics></math>
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>2</mn></mrow></msub> <msub><mi>y</mi> <mn>2</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>3</mn></mrow></msub> <msub><mi>y</mi> <mn>3</mn></msub></mrow></semantics></math>
- en: ','
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>4</mn></mrow></msub> <msub><mi>y</mi> <mn>4</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>5</mn></mrow></msub> <msub><mi>y</mi> <mn>5</mn></msub></mrow></semantics></math>
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>4</mn></mrow></msub> <msub><mi>y</mi> <mn>4</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>5</mn></mrow></msub> <msub><mi>y</mi> <mn>5</mn></msub></mrow></semantics></math>
- en: ','
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: ，利用相同的推理，第二、第三、第四和第五个指令计算了分别对应于i等于（1,6,11）、（2,7,12）、（3,8,13）和（4,9,14）的项。最后，第六个指令通过第三个指令解码器仅启用了最后一个智能块行来执行
- en: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>6</mn></mrow></msub> <msub><mi>y</mi> <mn>6</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>7</mn></mrow></msub> <msub><mi>y</mi> <mn>7</mn></msub></mrow></semantics></math>
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>6</mn></mrow></msub> <msub><mi>y</mi> <mn>6</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>7</mn></mrow></msub> <msub><mi>y</mi> <mn>7</mn></msub></mrow></semantics></math>
- en: ','
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>8</mn></mrow></msub> <msub><mi>y</mi> <mn>8</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>9</mn></mrow></msub> <msub><mi>y</mi> <mn>9</mn></msub></mrow></semantics></math>
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>8</mn></mrow></msub> <msub><mi>y</mi> <mn>8</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>9</mn></mrow></msub> <msub><mi>y</mi> <mn>9</mn></msub></mrow></semantics></math>
- en: ','
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>10</mn></mrow></msub> <msub><mi>y</mi> <mn>10</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>11</mn></mrow></msub> <msub><mi>y</mi> <mn>11</mn></msub></mrow></semantics></math>
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>10</mn></mrow></msub> <msub><mi>y</mi> <mn>10</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>11</mn></mrow></msub> <msub><mi>y</mi> <mn>11</mn></msub></mrow></semantics></math>
- en: ','
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>12</mn></mrow></msub> <msub><mi>y</mi> <mn>12</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>13</mn></mrow></msub> <msub><mi>y</mi> <mn>3</mn></msub></mrow></semantics></math>
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>12</mn></mrow></msub> <msub><mi>y</mi> <mn>12</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>13</mn></mrow></msub> <msub><mi>y</mi> <mn>3</mn></msub></mrow></semantics></math>
- en: ','
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>14</mn></mrow></msub> <msub><mi>y</mi> <mn>14</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>15</mn></mrow></msub> <msub><mi>y</mi> <mn>15</mn></msub></mrow></semantics></math>
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>14</mn></mrow></msub> <msub><mi>y</mi> <mn>14</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>15</mn></mrow></msub> <msub><mi>y</mi> <mn>15</mn></msub></mrow></semantics></math>
- en: ', for i = 0, …, 15\. Then, for the second instruction only columns 1, 5, 9,
    and 13 were enabled to compute the'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: ，对于i = 0, …, 15。然后，对于第二个指令，仅启用列1、5、9和13来计算对应的项。类似地，第三和第四个指令实施了剩余的求和，以便在最后一个指令结束后，所有最终的
- en: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>0</mn></mrow></msub> <msub><mi>y</mi> <mn>0</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>1</mn></mrow></msub> <msub><mi>y</mi> <mn>1</mn></msub>
    <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo> <mn>2</mn></mrow></msub>
    <msub><mi>y</mi> <mn>2</mn></msub> <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi>
    <mo>,</mo> <mn>3</mn></mrow></msub> <msub><mi>y</mi> <mn>3</mn></msub></mrow></semantics></math>
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>0</mn></mrow></msub> <msub><mi>y</mi> <mn>0</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>1</mn></mrow></msub> <msub><mi>y</mi> <mn>1</mn></msub>
    <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo> <mn>2</mn></mrow></msub>
    <msub><mi>y</mi> <mn>2</mn></msub> <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi>
    <mo>,</mo> <mn>3</mn></mrow></msub> <msub><mi>y</mi> <mn>3</mn></msub></mrow></semantics></math>
- en: ','
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>4</mn></mrow></msub> <msub><mi>y</mi> <mn>4</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>5</mn></mrow></msub> <msub><mi>y</mi> <mn>5</mn></msub>
    <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo> <mn>6</mn></mrow></msub>
    <msub><mi>y</mi> <mn>6</mn></msub> <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi>
    <mo>,</mo> <mn>7</mn></mrow></msub> <msub><mi>y</mi> <mn>7</mn></msub></mrow></semantics></math>
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>4</mn></mrow></msub> <msub><mi>y</mi> <mn>4</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>5</mn></mrow></msub> <msub><mi>y</mi> <mn>5</mn></msub>
    <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo> <mn>6</mn></mrow></msub>
    <msub><mi>y</mi> <mn>6</mn></msub> <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi>
    <mo>,</mo> <mn>7</mn></mrow></msub> <msub><mi>y</mi> <mn>7</mn></msub></mrow></semantics></math>
- en: ','
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>8</mn></mrow></msub> <msub><mi>y</mi> <mn>8</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>9</mn></mrow></msub> <msub><mi>y</mi> <mn>9</mn></msub>
    <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo> <mn>10</mn></mrow></msub>
    <msub><mi>y</mi> <mn>10</mn></msub> <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi>
    <mo>,</mo> <mn>11</mn></mrow></msub> <msub><mi>y</mi> <mn>11</mn></msub></mrow></semantics></math>
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>8</mn></mrow></msub> <msub><mi>y</mi> <mn>8</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>9</mn></mrow></msub> <msub><mi>y</mi> <mn>9</mn></msub>
    <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo> <mn>10</mn></mrow></msub>
    <msub><mi>y</mi> <mn>10</mn></msub> <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi>
    <mo>,</mo> <mn>11</mn></mrow></msub> <msub><mi>y</mi> <mn>11</mn></msub></mrow></semantics></math>
- en: ','
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>12</mn></mrow></msub> <msub><mi>y</mi> <mn>12</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>13</mn></mrow></msub> <msub><mi>y</mi> <mn>3</mn></msub>
    <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo> <mn>14</mn></mrow></msub>
    <msub><mi>y</mi> <mn>14</mn></msub> <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi>
    <mo>,</mo> <mn>15</mn></mrow></msub> <msub><mi>y</mi> <mn>15</mn></msub></mrow></semantics></math>
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><mrow><msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo>
    <mn>12</mn></mrow></msub> <msub><mi>y</mi> <mn>12</mn></msub> <mo>+</mo> <msub><mi>x</mi>
    <mrow><mi>i</mi> <mo>,</mo> <mn>13</mn></mrow></msub> <msub><mi>y</mi> <mn>3</mn></msub>
    <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi> <mo>,</mo> <mn>14</mn></mrow></msub>
    <msub><mi>y</mi> <mn>14</mn></msub> <mo>+</mo> <msub><mi>x</mi> <mrow><mi>i</mi>
    <mo>,</mo> <mn>15</mn></mrow></msub> <msub><mi>y</mi> <mn>15</mn></msub></mrow></semantics></math>
- en: terms, respectively. Similarly, the third and fourth instructions implemented
    the remaining sums so that, after the end of the last instruction, all the final
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: <math display="inline"><semantics><msub><mi>z</mi> <mi>i</mi></msub></semantics></math>
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="inline"><semantics><msub><mi>z</mi> <mi>i</mi></msub></semantics></math>
- en: values were available in the Block Words of the first Smart Blocks column.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 值在第一个智能块列的块字中可用。
