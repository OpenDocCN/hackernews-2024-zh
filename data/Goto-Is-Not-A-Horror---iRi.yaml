- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:34:09'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:34:09'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Goto Is Not A Horror - iRi
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Goto不是一种恐怖 - iRi
- en: 来源：[https://jerf.org/iri/post/2024/goto/](https://jerf.org/iri/post/2024/goto/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://jerf.org/iri/post/2024/goto/](https://jerf.org/iri/post/2024/goto/)
- en: In 1968, Edsger Dijkstra published a classic letter which was titled “Go To
    Statement Considered Harmful”. I think the headline buries the lede, because it’s
    actually an exhortation to structured programming in general, but it is not incorrect.
    `goto` is indeed considered harmful in the letter.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 1968年，艾德斯格·迪杰斯特拉发表了一封经典的信，标题是“Go To Statement Considered Harmful”。我认为标题掩盖了要点，因为实际上它是对结构化编程的一种鼓励，但这并不是错误的。在这封信中，确实认为`goto`是有害的。
- en: Dijkstra’s letter was completely correct. History has bourne him out. He won.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 迪杰斯特拉的信完全正确。历史证明了他的正确性。他赢了。
- en: He *won*.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 他*赢了*。
- en: '*Past tense*.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*过去时*。'
- en: The winning is over. It has been accomplished.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 胜利已经结束。已经完成了。
- en: '`goto` is *dead*. Dijkstra killed it.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`goto`已经*死*了。迪杰斯特拉将其消灭了。'
- en: That is, the `goto` that Dijkstra is talking about is dead. Your language does
    not have it. Your language hasn’t had it for decades. You do not have Dijkstra-`goto`.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，迪杰斯特拉所说的`goto`已经死了。你的语言没有它。你的语言几十年来都没有它。你没有迪杰斯特拉-`goto`。
- en: It lives on in assembler. It can live there. It doesn’t have to bother anyone
    else.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它在汇编语言中还存在。它可以在那里存在。它不必再打扰其他人。
- en: The `goto` in your modern language is not the one Dijkstra was talking about.
    Dijkstra was talking about a `goto` that could leap anywhere. Literally anywhere.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你现代语言中的`goto`并不是迪杰斯特拉所说的那种`goto`。迪杰斯特拉所说的是一种可以跳到任何地方的`goto`。字面上的任何地方。
- en: Your language does not have that `goto`. Your language has a `goto` that has
    been thoroughly constrained by the structured programming paradigm. You can not
    `goto` from one function into another, in the middle of an `if` statement, in
    the middle of a `for` loop.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你的语言没有那种`goto`。你的语言有一个被结构化编程范式彻底约束的`goto`。你不能从一个函数跳转到另一个函数，在`if`语句的中间，在`for`循环的中间使用`goto`。
- en: Not only could the one Dijkstra was complaining about do exactly that, the real
    complaint of the letter if you read it carefully is that `goto` was itself the
    organizational principle of the programs of the time… which means one of the reasons
    `goto` is so harmful is that it prevented functions from existing in the first
    place! You can’t have the guarantees functions provide in the presence of an unconstrainted
    `goto`.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅迪杰斯特拉所抱怨的那个`goto`确实能够做到这一点，如果你仔细阅读这封信，你会发现信件的真正抱怨是`goto`本身是当时程序的组织原则……这意味着`goto`之所以有害的原因之一是它首先阻止了函数的存在！在存在无约束的`goto`的情况下，你无法获得函数提供的保证。
- en: That is expressed from a modern point of view. The letter will talk about the
    ability to tell where the program is based on indices of execution. The letter
    generally assumes you understand structured programming and how that criticism
    applies. Fortunately, you do understand structured programming, since it is about
    all you do.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从现代角度表达的。这封信将讨论根据执行索引来判断程序位置的能力。该信通常假设你理解结构化编程及其应用的批评。幸运的是，你确实理解结构化编程，因为这几乎是你所有的工作。
- en: So stop applying the criticisms of the 1960s `goto` to modern `goto`. Stop acting
    like a single use of `goto` in a function means you’re a bad programmer who does
    not Get It. `DELETE FROM shibboleths WHERE value LIKE "%goto%"`. Dumping on modern
    `goto` is not smart and wise and a sign of a good programmer, it’s a sign you
    don’t understand why `goto` is… or rather, *was*… bad.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所以停止将上世纪60年代`goto`的批评应用于现代的`goto`。不要表现得像在函数中使用一次`goto`就意味着你是一个糟糕的程序员，不懂行。`DELETE
    FROM shibboleths WHERE value LIKE "%goto%"`。抨击现代`goto`并不明智，也不是一个好程序员的标志，这表明你不理解为什么`goto`……或者说，*曾经*……是不好的。
- en: Does this mean you should use it a lot more? No. Structured programming has
    a multi-decade track record of success. The vast, vast majority of the time structured
    programming does the job quite well.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你应该更频繁地使用它吗？不。结构化编程已经有数十年的成功经验。绝大多数情况下，结构化编程都能很好地完成工作。
- en: It’s hard to mess up a function in a modern programming language with `goto`.
    Probably a lot of the “but what if I…?” questions that leap to mind are already
    forbidden. You will find your language already forbids jumping into the middle
    of `for` loops from the outside. You will find your language already forbids jumping
    over variable initializations, if they are statements in your language.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代编程语言中，很难通过`goto`搞乱一个函数。可能“如果我……？”这样的问题早就被禁止了。你会发现你的编程语言已经禁止了从外部跳入`for`循环的中间。你会发现你的编程语言已经禁止了跳过变量初始化，如果它们是你语言中的语句的话。
- en: You can of course make a mess of a function with extensive (over)use of `goto`,
    but whoop de do. I’ve got hundreds of options for making messes of functions;
    consult your local non-trivial codebase for thousands of examples. Good odds precisely
    *zero* of those thousands of examples involve `goto` in any form. `goto` is not
    a special menace. I’d say [stringly typing](https://www.hanselman.com/blog/stringly-typed-vs-strongly-typed)
    is *multiple orders of magnitude* a greater menace to your code than `goto`, at
    least a good 6 or 7\. There’s plenty of programmers who know to say words about
    how bad `goto` is but are blissfully unaware of how destructive it is to program
    structure to blast strings and ints everywhere without further qualification.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以通过大量使用`goto`来搞乱函数，但这有什么了不起呢。我有成百上千种方法来搞乱函数；查看你所在的非平凡代码库，会有成千上万的例子。可以肯定，这些例子中几乎*没有一个*会涉及任何形式的`goto`。`goto`并非特别的威胁。我要说[stringly
    typing](https://www.hanselman.com/blog/stringly-typed-vs-strongly-typed)对你的代码造成的危害要比`goto`大得多，至少是6或7个数量级。许多程序员知道如何批评`goto`，但对于随意在程序结构中到处塞入字符串和整数却不以为然，毫不知情。
- en: In fact… hang on to your hats… when I see modern code that uses `goto`, I actually
    find that to be a marker that it was probably written by *highly skilled* programmers.
    Because they are the ones who understand the issues, understand that the modern
    anti-`goto` consensus is wrong, and understood that they had a case where `goto`
    was the best solution.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上……保持你们的帽子……当我看到现代代码使用`goto`时，我实际上会认为这标志着它可能是由*高技能*程序员编写的。因为他们理解问题，理解现代反对`goto`的共识是错误的，并且明白他们有一个情况，`goto`是最好的解决方案。
- en: Stop freaking out about `goto`. Stop acting like the 1960s `goto` is the same
    as today’s `goto`.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 不要过分担心`goto`。不要把上世纪60年代的`goto`和今天的`goto`相提并论。
- en: Is this important? Heck no. This is just a blog post topic of a personal pet
    peeve.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这重要吗？一点也不。这只是一个个人的小怨念博客主题。
- en: But if you want to take something practical away from it, [re-read the letter](https://dl.acm.org/doi/10.1145/362929.362947)
    (or read it for the first time), but make an exercise of editing out the references
    to `goto` and read everything else around it. You will learn a lot about the water
    through which you as a programming fish swim. You will learn a lot about why the
    entire programming industry collectively decided to swim in this water. You will
    learn what stack traces *really* mean. I’ve lost track of the link, but I once
    read a blog post about why stack traces should really have the for loop indices
    in them too; you will learn why that’s an interesting idea that may be something
    the entire programming community has overlooked for decades. Then at least this
    won’t be a pointless whiny blog post for you.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你想从中得到实际的东西，[重新阅读这封信](https://dl.acm.org/doi/10.1145/362929.362947)（或者第一次阅读它），但把所有关于`goto`的引用都删掉，并且阅读其它内容。你会对你作为编程鱼所处的水域有更深入的理解。你会了解整个编程行业为什么集体决定在这种水域中游泳。你会了解堆栈跟踪*真正*意味着什么。我已经忘记了链接，但我曾经读过一篇关于为什么堆栈跟踪实际上应该在其中包含for循环索引的博客文章；你会了解为什么这是一个有趣的想法，可能是整个编程社区几十年来忽视的东西。这样至少对你来说，这篇无聊的抱怨博客文章不会是毫无意义的了。
