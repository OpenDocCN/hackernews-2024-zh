- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:01:21'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:01:21
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Why Zig When There is Already C++, D, and Rust? ⚡ Zig Programming Language
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在已有C++、D和Rust的情况下为什么选择Zig？⚡ Zig编程语言
- en: 来源：[https://ziglang.org/learn/why_zig_rust_d_cpp/](https://ziglang.org/learn/why_zig_rust_d_cpp/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ziglang.org/learn/why_zig_rust_d_cpp/](https://ziglang.org/learn/why_zig_rust_d_cpp/)
- en: Why Zig When There is Already C++, D, and Rust?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在已有C++、D和Rust的情况下为什么选择Zig？
- en: No hidden control flow
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 没有隐藏的控制流
- en: 'If Zig code doesn’t look like it’s jumping away to call a function, then it
    isn’t. This means you can be sure that the following code calls only `foo()` and
    then `bar()`, and this is guaranteed without needing to know the types of anything:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Zig代码看起来没有跳转来调用函数，那就是确实没有。这意味着你可以确信以下代码只调用了`foo()`然后是`bar()`，而且无需知道任何东西的类型：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Examples of hidden control flow:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏控制流的示例：
- en: D has `@property` functions, which are methods that you call with what looks
    like field access, so in the above example, `c.d` might call a function.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D语言有`@property`函数，这些是你使用看起来像字段访问的方式调用的方法，所以在上面的例子中，`c.d`可能会调用一个函数。
- en: C++, D, and Rust have operator overloading, so the `+` operator might call a
    function.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++、D和Rust都有运算符重载，所以`+`运算符可能会调用一个函数。
- en: C++, D, and Go have throw/catch exceptions, so `foo()` might throw an exception,
    and prevent `bar()` from being called. (Of course, even in Zig `foo()` could deadlock
    and prevent `bar()` from being called, but that can happen in any Turing-complete
    language.)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++、D和Go都有抛出/捕获异常，所以`foo()`可能会抛出异常，并阻止`bar()`被调用。（当然，即使在Zig中，`foo()`可能会死锁并阻止`bar()`被调用，但这在任何图灵完备的语言中都可能发生。）
- en: The purpose of this design decision is to improve readability.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个设计决策的目的是提高可读性。
- en: No hidden allocations
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 没有隐藏的分配
- en: Zig has a hands-off approach when it comes to heap allocation. There is no `new`
    keyword or any other language feature that uses a heap allocator (e.g. string
    concatenation operator[1]). The entire concept of the heap is managed by library
    and application code, not by the language.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Zig在堆分配方面采取了一种不干涉的方法。没有`new`关键字或者任何其他使用堆分配器的语言特性（比如字符串连接运算符[1]）。堆的整个概念由库和应用代码管理，而不是由语言管理。
- en: 'Examples of hidden allocations:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏分配的示例：
- en: Go’s `defer` allocates memory to a function-local stack. In addition to being
    an unintuitive way for this control flow to work, it can cause out-of-memory failures
    if you use `defer` inside a loop.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go的`defer`会为函数局部栈分配内存。除了这种控制流方式让人难以理解之外，如果你在循环中使用`defer`，还可能导致内存不足错误。
- en: C++ coroutines allocate heap memory in order to call a coroutine.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++协程分配堆内存以调用协程。
- en: In Go, a function call can cause heap allocation because goroutines allocate
    small stacks that get resized when the call stack gets deep enough.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Go中，函数调用可能会导致堆分配，因为goroutine会分配小堆栈，当调用栈足够深时会调整大小。
- en: The main Rust standard library APIs panic on out of memory conditions, and the
    alternate APIs that accept allocator parameters are an afterthought (see [rust-lang/rust#29802](https://github.com/rust-lang/rust/issues/29802)).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要的Rust标准库API在内存不足的情况下会panic，而接受分配器参数的备选API是事后想到的（参见[rust-lang/rust#29802](https://github.com/rust-lang/rust/issues/29802)）。
- en: Nearly all garbage collected languages have hidden allocations strewn about,
    since the garbage collector hides the evidence on the cleanup side.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的垃圾收集语言都有隐藏的分配，因为垃圾收集器在清理时隐藏了证据。
- en: The main problem with hidden allocations is that it prevents the *reusability*
    of a piece of code, unnecessarily limiting the number of environments that code
    would be appropriate to be deployed to. Simply put, there are use cases where
    one must be able to rely on control flow and function calls not to have the side-effect
    of memory allocation, therefore a programming language can only serve these use
    cases if it can realistically provide this guarantee.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏分配的主要问题是它阻止了代码片段的*可重用性*，不必要地限制了代码适用的环境数量。简单来说，有些用例必须依赖于控制流和函数调用没有内存分配的副作用，因此只有在编程语言可以真正提供此保证时，它才能为这些用例提供服务。
- en: In Zig, there are standard library features that provide and work with heap
    allocators, but those are optional standard library features, not built into the
    language itself. If you never initialize a heap allocator, you can be confident
    your program will not heap allocate.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Zig中，有一些标准库特性提供并与堆分配器一起工作，但这些是可选的标准库特性，而不是内置于语言本身的。如果你从未初始化堆分配器，那么你可以确信你的程序不会堆分配。
- en: Every standard library feature that needs to allocate heap memory accepts an
    `Allocator` parameter in order to do it. This means that the Zig standard library
    supports freestanding targets. For example `std.ArrayList` and `std.AutoHashMap`
    can be used for bare metal programming!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每个需要分配堆内存的标准库功能都接受一个 `Allocator` 参数来完成。这意味着 Zig 标准库支持独立的目标。例如 `std.ArrayList`
    和 `std.AutoHashMap` 可以用于裸金属编程！
- en: Custom allocators make manual memory management a breeze. Zig has a debug allocator
    that maintains memory safety in the face of use-after-free and double-free. It
    automatically detects and prints stack traces of memory leaks. There is an arena
    allocator so that you can bundle any number of allocations into one and free them
    all at once rather than manage each allocation independently. Special-purpose
    allocators can be used to improve performance or memory usage for any particular
    application’s needs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义分配器使手动内存管理变得轻而易举。Zig 具有维护内存安全性的调试分配器，以防止使用后释放和双重释放。它自动检测并打印内存泄漏的堆栈跟踪。有一个区域分配器，使您可以将任意数量的分配绑定到一个分配中，而不是独立管理每个分配。特定目的的分配器可以用于改进特定应用程序的性能或内存使用情况。
- en: '[1]: Actually there is a string concatenation operator (generally an array
    concatenation operator), but it only works at compile time, so it still doesn’t
    do any runtime heap allocation.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[1]: 其实有一个字符串连接运算符（通常是数组连接运算符），但它只在编译时工作，因此仍然不会进行任何运行时堆分配。'
- en: First-class support for no standard library
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一流的无标准库支持
- en: As hinted above, Zig has an entirely optional standard library. Each std lib
    API only gets compiled into your program if you use it. Zig has equal support
    for either linking against libc or not linking against it. Zig is friendly to
    bare-metal and high-performance development.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，Zig 有一个完全可选的标准库。只有在使用它时，每个 std lib API 才会编译到您的程序中。Zig 对链接到 libc 或不链接到它具有相等的支持。Zig
    对裸金属和高性能开发友好。
- en: It’s the best of both worlds; for example in Zig, WebAssembly programs can both
    use the normal features of the standard library, and still result in the tiniest
    binaries when compared to other programming languages that support compiling to
    WebAssembly.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是两全其美的最佳选择；例如在 Zig 中，WebAssembly 程序既可以使用标准库的常规功能，又可以与其他支持编译到 WebAssembly 的编程语言相比产生最小的二进制文件。
- en: A Portable Language for Libraries
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于库的可移植语言
- en: One of the holy grails of programming is code reuse. Sadly, in practice, we
    find ourselves re-inventing the wheel many times over again. Often it’s justified.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 编程的至高境界之一是代码重用。不幸的是，在实践中，我们发现自己一次又一次地重新发明轮子。通常这是有道理的。
- en: If an application has real-time requirements, then any library that uses garbage
    collection or any other non-deterministic behavior is disqualified as a dependency.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个应用程序有实时要求，那么任何使用垃圾收集或任何其他非确定性行为的库都会被淘汰为依赖项。
- en: If a language makes it too easy to ignore errors, and thus hard to verify that
    a library correctly handles and bubbles up errors, it can be tempting to ignore
    the library and re-implement it, knowing that one handled all the relevant errors
    correctly. Zig is designed such that the laziest thing a programmer can do is
    handle errors correctly, and thus one can be reasonably confident that a library
    will properly bubble errors up.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一种语言使忽略错误变得太容易，从而难以验证库是否正确处理并传播错误，那么忽略库并重新实现它可能是诱人的，因为您知道已正确处理了所有相关的错误。Zig
    的设计使得程序员能够正确处理错误成为最懒惰的事情，因此可以合理地相信库将正确地传播错误。
- en: Currently it is pragmatically true that C is the most versatile and portable
    language. Any language that does not have the ability to interact with C code
    risks obscurity. Zig is attempting to become the new portable language for libraries
    by simultaneously making it straightforward to conform to the C ABI for external
    functions, and introducing safety and language design that prevents common bugs
    within the implementations.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前实际上可靠的是，C 是最通用和可移植的语言。任何不具备与 C 代码交互能力的语言都面临被遗忘的风险。Zig 正试图成为新的可移植库语言，通过同时使得符合
    C ABI 用于外部函数变得直观，并引入安全性和语言设计，防止实现中的常见错误。
- en: A Package Manager and Build System for Existing Projects
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现有项目的包管理器和构建系统
- en: Zig is a toolchain in addition to a programming language. It comes with a [build
    system and package manager](/learn/build-system/) that are useful even in the
    context of a traditional C/C++ project.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Zig 是一个工具链，也是一种编程语言。它提供了一个[构建系统和包管理器](/learn/build-system/)，即使在传统的 C/C++ 项目中也很有用。
- en: Not only can you write Zig code instead of C or C++ code, but you can use Zig
    as a replacement for autotools, cmake, make, scons, ninja, etc. And on top of
    this, it provides a package manager for native dependencies. This build system
    is appropriate even if the entirety of a project’s codebase is in C or C++. For
    example, by [porting ffmpeg to the zig build system](https://github.com/andrewrk/ffmpeg),
    it becomes possible to compile ffmpeg on any supported system for any supported
    system using only a [50 MiB download of zig](/download/). For open source projects,
    this streamlined ability to build from source - and even cross-compile - can be
    the difference between gaining or losing valuable contributors.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Zig 代码而不是 C 或 C++ 代码编写，还可以将 Zig 用作 autotools、cmake、make、scons、ninja 等的替代品。此外，它还提供了本地依赖项的包管理器。即使项目的整个代码库都是
    C 或 C++，这种构建系统也是合适的。例如，通过[将 ffmpeg 移植到 zig 构建系统](https://github.com/andrewrk/ffmpeg)，可以在任何支持的系统上编译
    ffmpeg，而且仅需使用[50 MiB 的 zig 下载](/download/)即可。对于开源项目来说，这种简化的从源代码构建能力 - 甚至跨平台编译
    - 可能是获得或失去宝贵贡献者的区别所在。
- en: System package managers such as apt-get, pacman, homebrew, and others are instrumental
    for end user experience, but they can be insufficient for the needs of developers.
    A language-specific package manager can be the difference between having no contributors
    and having many. For open source projects, the difficulty of getting the project
    to build at all is a huge hurdle for potential contributors. For C/C++ projects,
    having dependencies can be fatal, especially on Windows, where there is no package
    manager. Even when just building Zig itself, most potential contributors have
    a difficult time with the LLVM dependency. Zig offers a way for projects to depend
    on native libraries directly - without depending on the users' system package
    manager to have the correct version available, and in a way that is practically
    guaranteed to successfully build projects on the first try regardless of what
    system is being used and independent of what platform is being targeted.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: apt-get、pacman、homebrew 等系统包管理器对用户体验至关重要，但对开发者的需求可能不够。语言特定的包管理器可以决定是否有贡献者。对于开源项目来说，使项目能够构建起来的难度对潜在贡献者来说是一个巨大的障碍。对于
    C/C++ 项目，具有依赖关系可能是致命的，尤其是在 Windows 上，那里没有包管理器。即使只是构建 Zig 本身，大多数潜在贡献者也会遇到 LLVM
    依赖的困难。Zig 提供了一种方式，让项目直接依赖本地库 - 而不依赖用户的系统包管理器是否有正确版本可用，而且这种方式几乎保证能够在第一次尝试时成功构建项目，无论使用什么系统和独立于目标平台。
- en: '**Other languages have package managers but they do not eliminate pesky system
    dependencies like Zig does.**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**其他语言有包管理器，但它们不能像 Zig 一样消除讨厌的系统依赖。**'
- en: Zig can replace a project’s build system with a reasonable language using a
    declarative API for building projects, that also provides package management,
    and thus the ability to actually depend on other C libraries. The ability to have
    dependencies enables higher level abstractions, and thus the proliferation of
    reusable high-level code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Zig 可以用具有声明性 API 的合理语言替换项目的构建系统，还提供了包管理，因此可以依赖其他 C 库。具有依赖关系的能力使高级抽象变得可能，从而推动了可重用的高级代码的传播。
- en: Simplicity
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单明了
- en: C++, Rust, and D have such a large number of features that they can be distracting
    from the actual meaning of the application you are working on. One finds oneself
    debugging one’s knowledge of the programming language instead of debugging the
    application itself.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: C++、Rust 和 D 有大量特性，可能会分散注意力，导致你在调试编程语言的知识而不是调试应用程序本身。
- en: Zig has no macros yet is still powerful enough to express complex programs in
    a clear, non-repetitive way. Even Rust has macros with special cases like `format!`,
    which is implemented in the compiler itself. Meanwhile in Zig, the equivalent
    function is implemented in the standard library with no special case code in the
    compiler.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Zig 没有宏，但仍然足够强大，可以以清晰、不重复的方式表达复杂的程序。即使 Rust 有像`format!`这样的特殊情况宏，它也是在编译器自身实现的。与此同时，在
    Zig 中，等效的函数是在标准库中实现的，没有编译器中的特殊情况代码。
- en: 'Zig can be downloaded from [the downloads section](/download/). Zig provides
    binary archives for Linux, Windows, and macOS. The following describes what you
    get with one of these archives:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可从[下载部分](/download/)下载 Zig。Zig 提供 Linux、Windows 和 macOS 的二进制存档。以下描述了这些存档之一的内容：
- en: installed by downloading and extracting a single archive, no system configuration
    needed
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过下载和提取单个存档进行安装，无需系统配置
- en: statically compiled so there are no runtime dependencies
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态编译，因此没有运行时依赖
- en: supports using LLVM for optimized release builds while using Zig’s custom backends
    for faster compilation performance
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持在优化的发布构建中使用 LLVM，同时在更快的编译性能方面使用 Zig 的自定义后端
- en: additionally supports a backend for outputting C code
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另外支持输出 C 代码的后端
- en: out of the box cross-compilation to most major platforms
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开箱即用，可交叉编译到大多数主要平台
- en: ships with source code for libc that will be dynamically compiled when needed
    for any supported platform
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随附支持 libc 的源代码，在任何支持的平台上需要时会动态编译
- en: includes build system with concurrency and caching
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含具有并发和缓存功能的构建系统
- en: compiles C and C++ code with libc support
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译带有 libc 支持的 C 和 C++ 代码
- en: drop-in GCC/Clang command line compatibility with `zig cc`
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `zig cc` 兼容 GCC/Clang 命令行
- en: Windows resource compiler
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 资源编译器
