- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:51:44'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:51:44
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: How to Summarize Youtube Video using ChatGPT Api and Node.js
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用ChatGPT Api和Node.js总结Youtube视频
- en: 来源：[https://implementing.substack.com/p/how-to-summarize-youtube-video-using](https://implementing.substack.com/p/how-to-summarize-youtube-video-using)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://implementing.substack.com/p/how-to-summarize-youtube-video-using](https://implementing.substack.com/p/how-to-summarize-youtube-video-using)
- en: Hey, I'm [Marco](https://www.linkedin.com/in/marco-moauro-b49489162/) and welcome
    to my newsletter!
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，我是[Marco](https://www.linkedin.com/in/marco-moauro-b49489162/)，欢迎来到我的通讯！
- en: As a software engineer, I created this newsletter to share my first-hand knowledge
    of the development world. Each topic we will explore will provide valuable insights,
    with the goal of inspiring and helping all of you on your journey.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名软件工程师，我创建了这个通讯来分享我在开发领域的第一手知识。我们将探讨的每个主题都将提供宝贵的见解，目标是启发和帮助您在您的旅程中前行。
- en: In this episode I want to bring you the first tutorial, on how to make a system
    in Node.js that starting from a youtube video link generates a summary using OpenAI's
    [completions api](https://platform.openai.com/docs/guides/text-generation/chat-completions-api),
    the same api on which the ChatGPT system is based.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本期中，我想为您带来第一个教程，介绍如何在Node.js中制作一个系统，从YouTube视频链接开始，使用OpenAI的[完成API](https://platform.openai.com/docs/guides/text-generation/chat-completions-api)，这与ChatGPT系统所基于的API相同，生成摘要。
- en: 'You can download all the code shown directly from my Github repository: [https://github.com/marcomoauro/youtube-summarizer](https://github.com/marcomoauro/youtube-summarizer)'
  id: totrans-split-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 您可以直接从我的Github存储库下载所有显示的代码：[https://github.com/marcomoauro/youtube-summarizer](https://github.com/marcomoauro/youtube-summarizer)
- en: '[Subscribe to Implementing ✨](https://implementing.substack.com/subscribe)'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[订阅Implementing ✨](https://implementing.substack.com/subscribe)'
- en: '* * *'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'The system architecture primarily comprises:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 系统架构主要包括：
- en: Extracting text from YouTube videos
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从YouTube视频中提取文本
- en: Generating text summaries
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成文本摘要
- en: 'This process involves extracting text from the video and utilizing it for summary
    generation. Various options were considered, including:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程涉及从视频中提取文本并利用它进行摘要生成。考虑了各种选项，包括：
- en: The chosen solution involves scraping, which is the most challenging among the
    options. This decision is motivated by the fact that implementing everything independently
    incurs no costs associated with third-party APIs for text extraction. Additionally,
    as a genuine enthusiast, I prefer this approach, given that most of my personal
    projects are founded on this technique.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所选解决方案涉及爬取，这是各种选项中最具挑战性的。这一决定的动机在于，独立实现所有内容不涉及与文本提取的第三方API相关的费用。此外，作为一个真正的爱好者，我更倾向于这种方法，因为我大部分的个人项目都建立在这种技术基础之上。
- en: If you are interested in finding out what are the best practices for web scraping
    sign up for the newsletter, I will be publishing a post about it soon.
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果您有兴趣了解有关网络爬取的最佳实践，请订阅我们的新闻通讯，我将很快发布一篇相关文章。
- en: After getting the captions, we put them into OpenAI. The first challenge I faced
    was the limit on the maximum size of the text that the completions API can handle.
    This limit depends on the model used; for the 3.5 turbo model, it's specifically
    set at 4.000 tokens.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 收到字幕后，我们将它们输入到OpenAI中。我面临的第一个挑战是完成API能处理的文本最大大小的限制。此限制取决于所使用的模型；对于3.5 turbo模型，具体设置为4,000个标记。
- en: To overcome this limitation, I adopted a recursive approach. The text is divided
    into smaller parts, which are merged into groups and summarized independently;
    this process is repeated until a single output text is generated, corresponding
    to the final summary generated from the intermediate summaries.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服这一限制，我采用了递归方法。将文本分成较小的部分，然后将它们合并成组并独立进行总结；此过程重复进行，直到生成单一的输出文本，对应于从中间摘要生成的最终摘要。
- en: '[Subscribe to Implementing ✨](https://implementing.substack.com/subscribe)'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[订阅Implementing ✨](https://implementing.substack.com/subscribe)'
- en: '* * *'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: For this tutorial you need to have Yarn and Node.js installed, specifically
    I used the LTS version 20.9.0\. If you don't have Node.js on your machine you
    can install it from the [official website](https://nodejs.org/en).
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，您需要安装Yarn和Node.js，具体来说我使用的是LTS版本20.9.0。如果您的计算机上没有安装Node.js，您可以从[官方网站](https://nodejs.org/en)安装。
- en: 'Starting from my workspaces folder I have created the project folder and the
    npm package:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从我的工作空间文件夹开始，我创建了项目文件夹和npm包：
- en: '[PRE0]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'add the clause “type: module” to use ES6 syntax:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '添加“type: module”子句以使用ES6语法：'
- en: '[PRE1]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The libraries we need are **Axios**, a library for making HTTP calls, we will
    need to implement the call to the completion, **he** and **striptags** to manipulate
    the HTML, **p-queue** for handle a queue for the promises in order to call OpenAI
    with max X calls in the same moment and **yargs** to build interactive command
    line tools.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的库包括 **Axios**，用于发起 HTTP 调用，我们需要实现对完成的调用，**he** 和 **striptags** 用于操作 HTML，**p-queue**
    用于处理 Promise 的队列，以便同时最多调用 X 次 OpenAI，以及 **yargs** 用于构建交互式命令行工具。
- en: 'You can install it typing:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 安装它只需键入：
- en: '[PRE2]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create the file **getSubtitleFromVideo.js**:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建名为 **getSubtitleFromVideo.js** 的文件：
- en: '[PRE3]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The initial function we'll create is designed to use web scraping to fetch the
    HTML content of a YouTube video page. Let's name this function **getHTML**.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建的初始函数旨在使用网页抓取获取 YouTube 视频页面的 HTML 内容。让我们称此函数为 **getHTML**。
- en: '[PRE4]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once we get the html we can retrieve the subtitles via this **getSubtitle**
    function:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦获取到 HTML，我们可以通过这个 **getSubtitle** 函数检索字幕：
- en: '[PRE5]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: => Inside the video's HTML, there's a YouTube link directing to their timedtext
    API, where an XML file containing automatic captioning can be found (an example
    is provided [here](https://www.youtube.com/api/timedtext?v=ULDCt13hetw&ei=c5GOZcmyFea26dsP0-ydqAQ&caps=asr&opi=112496729&xoaf=5&hl=it&ip=0.0.0.0&ipbits=0&expire=1703867363&sparams=ip,ipbits,expire,v,ei,caps,opi,xoaf&signature=75063412BCC19F57C0FACAD8F931B04B33607678.3E55E91F52C40D16D66F8420C614830C702CAAB2&key=yt8&kind=asr&lang=en)).
    This XML data is what we extract to generate the summary.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: => 在视频的 HTML 中，有一个指向其 timedtext API 的 YouTube 链接，可以找到包含自动字幕的 XML 文件（示例在此处提供
    [here](https://www.youtube.com/api/timedtext?v=ULDCt13hetw&ei=c5GOZcmyFea26dsP0-ydqAQ&caps=asr&opi=112496729&xoaf=5&hl=it&ip=0.0.0.0&ipbits=0&expire=1703867363&sparams=ip,ipbits,expire,v,ei,caps,opi,xoaf&signature=75063412BCC19F57C0FACAD8F931B04B33607678.3E55E91F52C40D16D66F8420C614830C702CAAB2&key=yt8&kind=asr&lang=en)）。我们提取这些
    XML 数据以生成摘要。
- en: '**getSubtitleFromVideo.js** file will export the **getSubtitleFromVideo** function.
    This function can be called externally, taking the video link as input and returning
    the corresponding subtitles.'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**getSubtitleFromVideo.js** 文件将导出 **getSubtitleFromVideo** 函数。此函数可以作为外部调用，以视频链接作为输入，并返回相应的字幕。'
- en: This is the contents of the file **getSubtitleFromVideo.js:**
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 **getSubtitleFromVideo.js** 文件的内容：
- en: '[PRE6]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[Subscribe to Implementing ✨](https://implementing.substack.com/subscribe)'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[订阅 Implementing ✨](https://implementing.substack.com/subscribe)'
- en: After getting the subtitles, the goal is to arrange them in chunks of text and
    then summarize. As mentioned earlier, different models have various maximum context
    limits; for the 3.5 turbo model, it's 4,000 tokens, I made the assumption that
    1 token equals 1 character.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取字幕之后，目标是将它们排列成文本块，然后进行摘要。如前所述，不同的模型具有不同的最大上下文限制；对于 3.5 turbo 模型，它是 4000 个标记，我假设
    1 个标记等于 1 个字符。
- en: 'So let''s go ahead and create the **splitInChunks.js** file:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们继续创建**splitInChunks.js**文件：
- en: '[PRE7]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this file we are going to export a function with the same name splitInChunks
    that takes care of grouping the individual subtitles of the video frames into
    chunks of up to 4000 words, here is the implementation:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们将导出一个同名函数 splitInChunks，负责将视频帧的各个字幕分组成最多 4000 个字的块，这里是实现方法：
- en: '[PRE8]'
  id: totrans-split-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: At this point we have the chunks and we can proceed with the summary step.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了这些块，可以继续进行摘要步骤。
- en: Create a new file **summarizeChunks.js:**
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 **summarizeChunks.js** 的新文件：
- en: '[PRE9]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'we first define the method for calling the OpenAI api:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义调用 OpenAI API 的方法：
- en: '[PRE10]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We submit a prompt to the completions API, comprising a "system" message instructing
    it on what to do, and a "user" message containing the text to be summarized. It's
    important to create an API key on the OpenAI developer portal, just follow this
    [link](https://openai.com/blog/openai-api). Once created, simply insert the key
    into the constant `OPEN_AI_API_KEY`.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向完成 API 提交一个提示，包括一个 "system" 消息，指示它要做什么，以及一个包含要摘要的文本的 "user" 消息。在 OpenAI 开发者门户上创建
    API 密钥非常重要，只需访问此 [link](https://openai.com/blog/openai-api)。创建后，只需将密钥插入常量 `OPEN_AI_API_KEY`
    中。
- en: I've named this function with the underscore (_) prefix because we'll define
    a new function called computeSummaryByAI, which serves as the entry point to OpenAI.
    This function utilizes the p-queue library to manage a maximum number of Promises
    running concurrently, preventing rate-limiting issues and slower response times.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我用下划线（_）前缀命名了这个函数，因为我们将定义一个名为 computeSummaryByAI 的新函数，它是调用 OpenAI 的入口点。这个函数利用
    p-queue 库来管理同时运行的最大 Promise 数量，防止速率限制问题和响应时间变慢。
- en: '[PRE11]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With `concurrency: 5` it means that there can be at most 5 calls running to
    OpenAI, all because we will launch calls in "parallel" via the **Promise.all**
    construct.'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: '使用 `concurrency: 5` 意味着最多可以同时运行5次对OpenAI的调用，因为我们将使用 **Promise.all** 结构并行启动调用。'
- en: 'We now come to the core part of the summary mechanism, the function that will
    export the file will be:'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来到总结机制的核心部分，导出文件的函数将是：
- en: '[PRE12]'
  id: totrans-split-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This function is responsible for generating an initial summary for each chunk
    to make sense of the content, considering that the chunks contain automatic subtitles
    generated by YouTube. After calculating the summary, if we have only one chunk,
    the process is complete, and the result is ready. Otherwise, we need to proceed
    with the recursive algorithm.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能负责生成每个块的初始摘要，以理解内容的含义，考虑到块包含由YouTube生成的自动字幕。计算完摘要后，如果只有一个块，则过程完成，结果准备就绪。否则，我们需要继续使用递归算法。
- en: 'We now define the recursive function:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们定义递归函数：
- en: '[PRE13]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The behavior is as follows:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 行为如下：
- en: If there are fewer than 5 pieces, proceed to the summary by combining the pieces
    into a single text. It is worth noting that we specified a maximum of 200 words
    in the prompt. With 5 pieces, we should have a maximum of 1000 words. However,
    in experimenting, I have noticed that these limits specified in the OpenAI prompt
    are often not met. As a result, I opted for lower thresholds to ensure proper
    operation without running into errors due to too large context.
  id: totrans-split-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果少于5个块，请继续通过将块合并为单个文本进行摘要。值得注意的是，我们在提示中指定了最多200个字。有5个块时，我们应该最多有1000个字。然而，在实验中，我注意到OpenAI提示中指定的这些限制通常不会达到。因此，我选择了更低的阈值，以确保正常运行而不会因为上下文过大而出现错误。
- en: If we have more than 5 chunks, we group them into groups of 5, for each we merge
    them into a single text and summarize them. Calls for summaries are executed in
    parallel.
  id: totrans-split-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们有超过5个块，我们将它们分组成每组5个块，对每组进行合并并进行摘要。摘要调用并行执行。
- en: Finally, the function relaunches itself by passing the result of the recursive
    step.
  id: totrans-split-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，函数通过传递递归步骤的结果来重新启动自身。
- en: 'All the code shown can be found here: [https://github.com/marcomoauro/youtube-summarizer](https://github.com/marcomoauro/youtube-summarizer)'
  id: totrans-split-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 所有显示的代码都可以在这里找到：[https://github.com/marcomoauro/youtube-summarizer](https://github.com/marcomoauro/youtube-summarizer)
- en: '* * *'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'I created a CLI through which you can summarize the videos you want by passing
    the YouTube video link and the language code in which you want the summary, here
    is an example of how to launch it:'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建一个CLI，您可以通过传递YouTube视频链接和您想要总结的语言代码来总结您想要的视频，以下是如何启动它的示例：
- en: '[PRE14]'
  id: totrans-split-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*requires that you are in the root of the project and have properly installed
    the dependencies with:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*要求您位于项目的根目录，并且已正确安装了依赖项：'
- en: '[PRE15]'
  id: totrans-split-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '* * *'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: I have integrated this functionality into my [quickview.email](https://quickview.email/try-summary)
    website. Simply provide the email with which you want to receive the summary,
    the link to the youtube video and the language in which you want to read it.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我已将此功能集成到我的 [quickview.email](https://quickview.email/try-summary) 网站中。只需提供您希望接收摘要的电子邮件，YouTube视频的链接以及您想阅读的语言。
- en: '[Subscribe to Implementing ✨](https://implementing.substack.com/subscribe)'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[订阅 Implementing ✨](https://implementing.substack.com/subscribe)'
- en: '* * *'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This same mechanism is the driving force behind my crypto newsletter, are you
    interested in the world of cryptocurrencies but don't have time to stay up-to-date?
    Sign up now to receive daily video summaries!
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个机制也是我的加密货币简报的推动力量，您对加密货币世界感兴趣但没有时间保持最新吗？立即订阅以接收每日视频摘要！
- en: '* * *'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'And that’s it for today! If you are finding this newsletter valuable, consider
    doing any of these:'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！如果您觉得这份简报有价值，请考虑做以下任何一件事：
- en: 🍻 **Read with your friends** — Implementing lives thanks to word of mouth. Share
    the article with someone who would like it.
  id: totrans-split-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 🍻 **与朋友一起阅读** — Implementing 的存在得益于口口相传。与喜欢的人分享这篇文章。
- en: '[Share](https://implementing.substack.com/p/how-to-summarize-youtube-video-using?utm_source=substack&utm_medium=email&utm_content=share&action=share)'
  id: totrans-split-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[分享](https://implementing.substack.com/p/how-to-summarize-youtube-video-using?utm_source=substack&utm_medium=email&utm_content=share&action=share)'
- en: 📣 **Provide your feedback** - We welcome your thoughts! Please share your opinions
    or suggestions for improving the newsletter, your input helps us adapt the content
    to your tastes.
  id: totrans-split-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 📣 **提供您的反馈** - 我们欢迎您的想法！请分享您的意见或改进简报的建议，您的意见有助于我们调整内容以迎合您的口味。
- en: '[Leave a comment](https://implementing.substack.com/p/why-i-moved-from-rails-to-nodejs/comments)'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[留言评论](https://implementing.substack.com/p/why-i-moved-from-rails-to-nodejs/comments)'
- en: I wish you a great day! ☀️
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我祝你有个美好的一天！☀️
- en: Marco
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: Marco
