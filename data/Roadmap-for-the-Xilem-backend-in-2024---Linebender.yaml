- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:55:17'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:55:17'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Roadmap for the Xilem backend in 2024 - Linebender
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2024 年 Xilem 后端路线图 - Linebender
- en: 来源：[https://linebender.org/blog/xilem-backend-roadmap/](https://linebender.org/blog/xilem-backend-roadmap/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://linebender.org/blog/xilem-backend-roadmap/](https://linebender.org/blog/xilem-backend-roadmap/)
- en: Roadmap for the Xilem backend in 2024
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2024 年 Xilem 后端路线图
- en: Olivier Faure, January 19, 2024
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Olivier Faure，2024 年 1 月 19 日
- en: As you may have heard by now, Google Fonts is funding me this year to work on
    Xilem.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你现在可能已经听说的那样，Google Fonts 今年资助我来开发 Xilem。
- en: 'I''m not alone in that: Aaron Muir Hamilton, Daniel McNab and Matt Campbell
    were funded as well to work on various parts of the ecosystem. I believe this
    is Matt''s third year getting funding from Google Fonts.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不孤单：Aaron Muir Hamilton、Daniel McNab 和 Matt Campbell 也获得了资金来工作于生态系统的各个部分。我相信这是
    Matt 第三年从 Google Fonts 获得资金支持。
- en: Now, *what* I was hired to do might be unclear to you. The scope we agreed on
    was fairly broad and was stated as "contributing to Xilem's view tree and developer
    experience", but that could mean a lot of things.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，*我*被雇佣来做什么可能对你来说不太清楚。我们商定的范围相当广泛，表述为“为 Xilem 的视图树和开发者体验做出贡献”，但这可能意味着很多事情。
- en: The first thing I want to do is communicate a clearer picture. I have a a lot
    of plans for Xilem, and they involve major changes from the current architectures,
    changes that might be worrying to the community at large or even to Raph Levien.
    I certainly don't want to give the impression that I'm wresting the project away
    from the Linebender community for Google's interest, and that means being transparent
    early and often about the things I want to rework.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我想做的第一件事是传达一个更清晰的画面。我对 Xilem 有很多计划，它们涉及从当前架构进行重大更改，这些更改可能令整个社区甚至 Raph Levien
    感到担忧。我当然不想给人们一种我是为了谷歌的利益而将项目从 Linebender 社区抢走的印象，这意味着及早和经常透明地谈论我想要重新设计的事情。
- en: What I want for Xilem
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我对 Xilem 的期望
- en: Xilem is a research-and-development project, the latest in a series (Xi-Core,
    Druid, Crochet, Lasagna, Idiopath), that aims to explore how UI development can
    be made compatible with Rust.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Xilem 是一个研究和开发项目，是系列中的最新项目（Xi-Core、Druid、Crochet、Lasagna、Idiopath），旨在探索如何将 UI
    开发与 Rust 兼容。
- en: This might feel a little banal now, because Rust GUI frameworks are popping
    up everywhere and starting to settle on similar patterns, but those patterns weren't
    obvious in 2019! Xilem is very different from Druid, and getting to its current
    architecture has been a process.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能现在感觉有点平淡，因为 Rust GUI 框架正在随处涌现并开始采用类似的模式，但这些模式在 2019 年并不明显！Xilem 与 Druid 非常不同，到达当前架构已经是一个过程。
- en: Xilem has been perma-experimental since May 2022\. Once it got started, the
    main Druid maintainers stopped contributing almost entirely with the expectation
    that Xilem would replace Druid once it was ready. Unfortunately, it still hasn't
    made enough progress to be on parity with Druid, yet Druid still lies abandoned,
    which isn't great when people had started relying on it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2022 年 5 月起，Xilem 一直处于永久实验状态。一旦启动，主要的德鲁伊维护者几乎完全停止贡献，期望 Xilem 一旦准备好就会取代德鲁伊。不幸的是，它仍然没有取得足够的进展，与德鲁伊相比还有差距，但德鲁伊仍然被抛弃了，这对于已经开始依赖它的人们来说并不理想。
- en: 'It''s debatable how much this could have been avoided. As I''ve pointed out
    before, the Rust GUI ecosystem is subject to massive [yak-shaving](https://seths.blog/2005/03/dont_shave_that/):
    many of us came here because we wanted to build a text editor, and now we''re
    all learning about [text rendering](https://faultlore.com/blah/text-hates-you/),
    [text editing](https://lord.io/text-editing-hates-you-too/), [compositing](https://raphlinus.github.io/ui/graphics/2020/09/13/compositor-is-evil.html),
    [accessibility trees](https://accesskit.dev/accesskit-integration-makes-bevy-the-first-general-purpose-game-engine-with-built-in-accessibility-support/),
    [using monoids to implement stuff on the GPU](https://raphlinus.github.io/gpu/2021/05/13/stack-monoid-revisited.html),
    [ECS](https://www.leafwing-studios.com/blog/ecs-gui-framework/), and some concepts
    that I''m absolutely certain Raph made up like [Bézier paths](https://raphlinus.github.io/curves/2023/04/18/bezpath-simplify.html)
    and [C++](https://raphlinus.github.io/rust/2023/04/01/rust-to-cpp.html).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以避免多少还是值得商榷的。正如我之前所指出的，Rust GUI 生态系统受到了大量的[剃毛](https://seths.blog/2005/03/dont_shave_that/)的影响：我们中的许多人来到这里是因为我们想要构建一个文本编辑器，现在我们都在学习[文本渲染](https://faultlore.com/blah/text-hates-you/)、[文本编辑](https://lord.io/text-editing-hates-you-too/)、[合成](https://raphlinus.github.io/ui/graphics/2020/09/13/compositor-is-evil.html)、[可访问性树](https://accesskit.dev/accesskit-integration-makes-bevy-the-first-general-purpose-game-engine-with-built-in-accessibility-support/)、[使用单子在
    GPU 上实现功能](https://raphlinus.github.io/gpu/2021/05/13/stack-monoid-revisited.html)、[ECS](https://www.leafwing-studios.com/blog/ecs-gui-framework/)，以及我绝对确定
    Raph 捏造的一些概念，比如[贝塞尔路径](https://raphlinus.github.io/curves/2023/04/18/bezpath-simplify.html)和[C++](https://raphlinus.github.io/rust/2023/04/01/rust-to-cpp.html)。
- en: And to a certain extent, yak-shaving is good! "I'm going to do better than X
    without learning how X works" is a child's attitude. It's the attitude we all
    start with, and it fills us with courage, but that courage is naive. True improvement
    comes from keeping that courage after spending years learning how immense the
    problem space is, and keeping faith that it's possible to do better. The Rust
    community is one that values not just doing things from scratch, but also learning
    from the past to get them right.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种程度上，剃毛是好事！“我要比 X 做得更好，而不学习 X 如何运作”是孩子的态度。这是我们所有人起步的态度，它充满了勇气，但这种勇气是天真的。真正的改进来自于在花费数年学习问题空间的巨大程度后保持这种勇气，并保持信心，相信可以做得更好。Rust
    社区不仅重视从零开始做事，而且重视从过去中学习以做对事情。
- en: This is good, but the "get them right" part takes a lot of time, and in the
    meantime, I'd argue that we've neglected end users a bit. We've abandoned Druid
    before Xilem was ready as an alternative, and then we worked on foundational and
    experimental projects that would make Xilem stronger and sounder in the long term,
    but left the project in an awkward state in the meantime (except for the web backend,
    which made a lot of progress).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，但“做对它们”这一部分需要很多时间，与此同时，我认为我们有点忽视了最终用户。在 Xilem 准备好作为替代品之前，我们放弃了 Druid，然后我们致力于基础性和实验性项目，这些项目将使
    Xilem 在长期内变得更强大和更稳固，但与此同时却让项目处于尴尬的状态（除了 Web 后端，它取得了很大的进展）。
- en: 'In the [ECS-backed GUI framework](https://www.leafwing-studios.com/blog/ecs-gui-framework/)
    article I linked, Bevy maintainers have this to say:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我链接的[基于 ECS 的 GUI 框架](https://www.leafwing-studios.com/blog/ecs-gui-framework/)文章中，Bevy
    的维护者有这样的话：
- en: Not to be too harsh, but a lot of the existing Rust GUI solutions... just aren't
    very good. There's a lot of passable options, but they all have non-trivial drawbacks.
    No one has really risen to the top as a clear winner. [...] Deep down, we all
    know that we can do better, and we should.
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不想过于苛刻，但现有的 Rust GUI 解决方案……实在不是很好。有很多还过得去的选择，但它们都有非常明显的缺点。没有一个真正脱颖而出，成为明显的赢家。[...]
    在心底，我们都知道我们可以做得更好，而且我们应该这样做。
- en: My ambition is to makes this paragraph obsolete before the end of the year.
    I want Xilem to get back to being suggested to newbies in the same breath as Iced
    and SlintUI. In the next few years, I want the entire ecosystem to get to a point
    where people talk about Rust GUI like they talk about ripgrep or rustls.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我的志向是在年底之前让这段文字过时。我希望 Xilem 能够在未来几年里被提及，就像 Iced 和 SlintUI 一样。在未来的几年里，我希望整个生态系统能够达到一个程度，在那里人们讨论
    Rust GUI 就像他们谈论 ripgrep 或 rustls 一样。
- en: 'To give one specific example: my personal goal is to implement seamless hot
    reloading for Xilem before the end of 2024\. I believe it''s feasible, and I believe
    doing it will radically change the way people think about Rust GUI, along with
    [other improvements I hope to unlock over time](https://poignardazur.github.io/2023/02/02/masonry-01-and-my-vision-for-rust-ui/).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 举个具体的例子：我的个人目标是在2024年底之前为Xilem实现无缝热重载。我相信这是可行的，我相信这样做将从根本上改变人们对Rust GUI的看法，同时也希望解锁[随着时间推移希望实现的其他改进](https://poignardazur.github.io/2023/02/02/masonry-01-and-my-vision-for-rust-ui/)。
- en: In the shorter term, my plan is to focus on basic features, widgets and styling
    options so people can experiment with Xilem, building on Raph's work on Vello
    over the past year. [John Skottis's Xilem UX Notes](https://gist.github.com/giannissc/172c6c591997ee14f6120134a7990697)
    give a good picture of the kinds of things I'll be working on.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 短期内，我的计划是专注于基本功能、小部件和样式选项，以便人们可以通过在过去一年中Raph在Vello上的工作基础上进行实验。[John Skottis的Xilem
    UX笔记](https://gist.github.com/giannissc/172c6c591997ee14f6120134a7990697)很好地描述了我将要处理的工作类型。
- en: The other big short-term priority is going to be documentation. We've seen a
    lot of people complain that the Linebender project were poorly documented and
    hard to get into; it was the most popular reaction to our [2024 announcement](https://linebender.org/blog/xilem-2024/),
    but it echoed sentiments we'd seen before. We're aware of the problem, and we
    intend to work on it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个短期内的重大优先事项将是文档编写。我们看到很多人抱怨Linebender项目的文档编写不足，难以理解；这是对我们[2024年公告](https://linebender.org/blog/xilem-2024/)的最普遍的反应，但它回应了我们以前看到的观点。我们意识到了问题，并打算着手解决。
- en: In the medium term, I also plan to work on the performance aspect of Xilem.
    People from Google Fonts have expressed interest in seeing how much performance
    we can get from Rust UI. While my mission isn't *limited* to performance work,
    it will be an ongoing focus, especially since it's an area where the Rust language
    brings unique opportunities. I'll go into more details on Rust performance and
    power efficiency in a later article.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 中期内，我还计划着重处理Xilem的性能方面。来自Google Fonts的人们对我们能从Rust UI中获得多少性能表示出了兴趣。虽然我的任务不仅限于性能工作，但这将是一个持续关注的重点，特别是因为Rust语言在这方面带来了独特的机会。我将在以后的文章中更详细地介绍Rust的性能和功耗效率。
- en: Major changes I want to implement soon
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我想尽快实施的重大变化
- en: These are the big changes I want to work on soon. Realistically, "soon" is going
    to be relative, because some of these changes are going to be controversial, and
    part of the work is going to be convincing people of their value.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我希望尽快处理的重大变化。实际上，“尽快”是相对的，因为其中一些变化会引起争议，而工作的一部分将是说服人们它们的价值。
- en: Switching to Masonry as a backend
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 切换到Masonry作为后端
- en: Okay, this one makes me blush a little.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这个让我有点害羞。
- en: I'm the only maintainer of Masonry, a GUI crate with barely over 300 stars on
    Github and little outside interest. Can I really justify taking the money Google
    pays me to improve Xilem and spending my time on Masonry instead?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我是Masonry的唯一维护者，这是一个GitHub上星数仅仅超过300颗且外部兴趣不大的GUI创建。我真的能够理直气壮地接受Google支付我来改进Xilem的资金，并把我的时间花在Masonry上吗？
- en: 'That choice isn''t random, mind you: Masonry was forked from Druid, Xilem''s
    ancestor, and in fact Xilem and Masonry share a lot of code right now.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个选择并不是随意的：Masonry是从Druid分叉出来的，而Druid是Xilem的祖先，实际上，目前Xilem和Masonry共享很多代码。
- en: In fact, I'd argue that Masonry's codebase is of better quality than Xilem's
    current native backend. This isn't meant to be a put-down of the work of Xilem
    maintainers; rather, it's the outcome of a difference in priorities. Nobody was
    very interested in Xilem's native backend (though Raph was aware of its importance,
    hence me getting paid to write this), and lots of people were very interested
    in the frontend and the web backends, therefore the frontend and web backends
    saw the most work.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我会认为Masonry的代码库质量比Xilem当前的本地后端要好。这并不是要贬低Xilem维护者的工作；相反，这是因为优先级的不同所导致的结果。没人对Xilem的本地后端很感兴趣（尽管Raph意识到了它的重要性，这也是我被付费撰写这篇文章的原因），而很多人对前端和网络后端非常感兴趣，因此前端和网络后端看到了最多的工作。
- en: 'From our [RFC#0001](https://github.com/linebender/rfcs/pull/1):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 来自我们的[RFC#0001](https://github.com/linebender/rfcs/pull/1)：
- en: 'As a result, Xilem''s native backend is in a poor state:'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 结果，Xilem的本地后端处于糟糕的状态：
- en: Masonry's backend codebase is a healthier starting point. Masonry also comes
    with some built-in perks, like powerful unit tests and a structured widget graph.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Masonry 的后端代码库是一个更健康的起点。 Masonry 还带有一些内置的好处，比如强大的单元测试和结构化小部件图表。
- en: It's not clear whether we want to import the Masonry codebase, the crate, or
    the entire repository, and it's not clear what the ultimate branding should be.
    The RFC lays out the different possibilities, and discussion is still ongoing,
    so the community can reach a consensus before doing more work (including possibly
    not using Masonry at all).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是否要导入 Masonry 代码库、crate 还是整个存储库尚不清楚，并且最终的品牌名称也不明确。RFC 概述了不同的可能性，讨论仍在进行中，因此社区可以在进行更多工作（包括可能根本不使用
    Masonry）之前达成共识。
- en: 'If we do move forward with this, then Masonry will need some porting work:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们决定继续进行这项工作，那么 Masonry 将需要一些移植工作：
- en: Using Vello and Parley instead of Piet.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Vello 和 Parley 而不是 Piet。
- en: Using Glazier instead of druid-shell.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Glazier 而不是 druid-shell。
- en: Integrating AccessKit.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成 AccessKit。
- en: Removing the dependency on GTK.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 去除对 GTK 的依赖。
- en: AccessKit support in particular is table stakes, by now. The Rust ecosystem
    is converging on the idea that accessibility (or at least, screen reader support)
    should be integrated early on in the design of GUI frameworks, not tacked on at
    the end.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: AccessKit 支持现在是基本操作。Rust 生态系统正在趋于认为可访问性（或者至少是屏幕阅读器支持）应该在 GUI 框架设计的早期阶段集成，而不是在最后添加。
- en: There are other things Xilem added over Druid (notably virtual lists and async
    support), but I believe Masonry doesn't need to implement them right away for
    parity. Both will be very important for eventual performance work.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Xilem 在 Druid 上增加了其他功能（尤其是虚拟列表和异步支持），但我认为 Masonry 不需要立即实现它们以达到平衡。两者对于最终性能工作都将非常重要。
- en: I'm told by Raph this is a "molotov cocktail" which, uh, fair.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Raph 告诉我这是一个“燃烧弹”，嗯，公平。
- en: We should write Xilem's backend under the assumption that end users of the library
    (including the Xilem frontend) will very rarely create their own widgets. Instead,
    they will usually compose the primitives given to them the same way they compose
    DOM elements in the browser. There will be escape hatches, from a fixed-size canvas
    surface where end-users can use arbitrary paint primitives to full-on custom widget
    code, but we should design the framework under the assumption people will almost
    never *need* those hatches.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在 Xilem 的后端代码库中假设库的最终用户（包括 Xilem 前端）很少会创建自己的小部件。相反，他们通常会像在浏览器中组合 DOM 元素一样组合给他们的基元。会有逃逸口，从一个固定大小的画布表面，最终用户可以使用任意绘图基元到完全定制的小部件代码，但我们应该设计框架，假设人们几乎永远不会*需要*这些逃逸口。
- en: Clearly, this is a radical move. **There will be a prototyping phase before
    we choose whether we commit to it**, and RFCs to lay out the details. I'm confident
    it will pay off.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这是一个激进的举措。**在我们决定是否承诺之前，将会有一个原型阶段**，以及用于详细阐述的 RFC。我相信这将会有所回报。
- en: Developers of hobby GUI frameworks tend to provide a severely anemic set of
    primitives, under the assumption that if anyone wants other features in their
    widgets, they can implement them themselves. Both Druid and Xilem suffer from
    this.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 业余 GUI 框架的开发者往往会提供一组非常有限的基元，他们假设如果有人想要他们的小部件中的其他功能，则可以自行实现。 Druid 和 Xilem 都受此影响。
- en: On the other end of the spectrum, the web has shown that you can implement complex
    custom UIs given a rigid but rich set of primitives.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一端，网络已经表明，通过给定丰富但刚性的基元集合，您可以实现复杂的自定义 UI。
- en: 'More importantly, the web is moving towards a powerful paradigm: declarative
    UI. As time goes on, people are realizing you can get better performance and composition
    by describing what things should look like and composing them than by imperatively
    making them do things.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，网络正朝着一种强大的范式发展：声明式 UI。随着时间的推移，人们意识到通过描述事物应该如何看起来并将它们组合起来，而不是通过命令式地使它们执行任务，可以获得更好的性能和组合性。
- en: 'Part of this is that native code is more performant than JS, but part of it
    just that declarative code is easier to work around than imperative code: its
    bounds are better defined, it lets you [commit to limitations](https://developer.mozilla.org/en-US/docs/Web/CSS/contain)
    that make the engine''s job easier, and it''s easier to analyze.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一部分是本机代码比 JS 更高效，但部分原因是声明性代码比命令式代码更易于处理：它的边界更清晰，让你可以[致力于限制](https://developer.mozilla.org/en-US/docs/Web/CSS/contain)，这使得引擎的工作更加容易，而且更容易分析。
- en: 'A set of proposals called [CSS Houdini](https://developer.mozilla.org/en-US/docs/Web/API/Houdini)
    came out that went in the exact opposite direction: pushing the layout engine
    towards more customization and JavaScript code. The proposal hasn''t seen much
    movement since 2021, and I don''t think it''s a coincidence that the part that
    would have given the most power to imperative code, the Layout API, hasn''t been
    stabilized in any browser.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一组名为[CSS Houdini](https://developer.mozilla.org/en-US/docs/Web/API/Houdini)的提案出现了，它们完全朝着相反的方向发展：推动布局引擎朝着更多定制化和
    JavaScript 代码的方向发展。自 2021 年以来，该提案没有见到太多进展，我认为最可能给命令式代码带来最大权力的部分，即布局 API，在任何浏览器中都没有稳定下来，这并非巧合。
- en: The bottom line is that, while implementing custom widgets *will always be possible*,
    I want to encourage developers to go as far as they can composing declarative
    elements instead, and see how far it's possible to go using those building blocks.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 底线是，虽然实现自定义小部件*始终是可能的*，但我希望鼓励开发者尽可能地组合声明性元素，并看看使用这些构建块可以走多远。
- en: More opinionated layout
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更多关于具有观点的布局
- en: One major customization point I want to restrict in Xilem is layout.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要在 Xilem 中限制的一个主要定制点是布局。
- en: Today all Rust GUI frameworks ship their own layout algorithm, but none of them
    are *competing* on their layout algorithm. Often the layout algorithm is just
    a means to an end; developers that do want to work on a state-of-the-art layout
    engine will provide it in a modular crate like [Morphorm](https://github.com/vizia/morphorm)
    and [Taffy](https://github.com/DioxusLabs/taffy).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，所有的 Rust GUI 框架都会提供自己的布局算法，但它们中没有一个是基于布局算法竞争的。通常，布局算法只是一个手段；那些确实希望使用先进布局引擎的开发者会在像[Morphorm](https://github.com/vizia/morphorm)和[Taffy](https://github.com/DioxusLabs/taffy)这样的模块化包中提供它。
- en: 'And here''s the thing: realistically, most layout engines aren''t that creative.
    Every Rust framework and every major GUI framework I''m aware of uses layout that
    boils down to "FlexBox with small variations". The number of meaningfully different
    ways to do GUI layout can be counted on, generously, two hands.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是事实：现实中，大多数布局引擎并不那么有创意。我所知道的每个 Rust 框架和每个主要的 GUI 框架都使用的布局基本上都可以归结为"有些微差异的
    FlexBox"。有意义地完成 GUI 布局的不同方式的数量可以慷慨地用双手来计算。
- en: I'd argue we only need CSS Flow, FlexBox, CSS Grid, and maybe Morphorm to cover
    most people's needs. Conveniently, this is what Taffy aims to provide. There's
    already an experimental Taffy integration in Xilem, and I want to make it deeper.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我会说我们只需要 CSS Flow、FlexBox、CSS Grid，也许还有 Morphorm 来满足大多数人的需求。方便的是，这正是 Taffy 的目标。在
    Xilem 中已经有了一个实验性的 Taffy 集成，我希望将其加深。
- en: That being said, there won't be a hard-coded set of layout algorithms. Rather,
    layout will rely on a web-inspired protocol between widgets (in other words, trait
    methods), and that protocol will be strongly opinionated to make implementation
    of these layout algorithms easier.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，不会有一组硬编码的布局算法。相反，布局将依赖于小部件之间的一种受 web 启发的协议（换句话说，trait 方法），而且这种协议将持有强烈的观点，以使这些布局算法的实现更容易。
- en: More on this in a latter blog post.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于这个的内容将在后续的博客文章中进行阐述。
- en: No boxing
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 不使用盒子
- en: Having a semi-fixed set of widgets means you can avoid using `Box<dyn Widget>`,
    which has some interesting performance implications.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有半固定的小部件集意味着你可以避免使用`Box<dyn Widget>`，这对性能有一些有趣的影响。
- en: It means you can add a lot of methods to the Widget trait without worrying about
    bloating the vtable. And you can write methods under the assumption that they'll
    be inlined, which opens up interesting DX improvements.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可以在 Widget trait 中添加很多方法，而不必担心膨胀虚方法表。而且你可以在假设它们会被内联的前提下编写方法，这打开了有趣的 DX
    改进。
- en: Using ECS, maybe, sort of
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 ECS，也许，有点像
- en: In current Xilem code, if you want your FlexWidget to have children, it must
    have a `Vec<Pod<ChildWidget>>` member. Each Pod directly owns a Widget.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前的 Xilem 代码中，如果你希望你的 FlexWidget 有子元素，它必须有一个`Vec<Pod<ChildWidget>>`成员。每个 Pod
    直接拥有一个 Widget。
- en: I think this is an interesting quirk of Rust GUI, tying directly to Rust's ownership
    semantics. Non-Rust frameworks often use pointers to child widgets, true, but
    they're often shared with the framework, with an understanding that the framework
    is charged with keeping track of how many widgets there are and which is a child
    of which. In Qt, for instance, it's preferred (but not mandatory) for parents
    to call `delete_later()` on their children instead of `delete`, because it plays
    better with event handling.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这是 Rust GUI 的一个有趣的特点，直接与 Rust 的所有权语义联系在一起。非 Rust 框架通常使用指向子小部件的指针，没错，但它们通常与框架共享，理解为框架负责跟踪有多少个小部件以及哪个是哪个的子部件。例如，在
    Qt 中，最好（但不是强制性的）让父项调用 `delete_later()` 而不是 `delete`，因为它在事件处理方面更有效。
- en: Xilem's approach of "you own your children" is a little bespoke. It means the
    framework has a hard time iterating over the entire widget tree (say, as part
    of a DOM inspector) unless each Widget specifically implements the iterating method.
    And it means if you want to target an event at a specific widget (say, the one
    with keyboard focus), you need to go through the entire ownership chain, using
    some heuristics to avoid visiting too many widgets.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Xilem 的“你拥有你的孩子”的方法有点定制化。这意味着该框架在迭代整个小部件树时（比如，作为 DOM 检查器的一部分），除非每个小部件都明确实现了迭代方法，否则会遇到困难。这也意味着，如果你想将事件定位到特定的小部件（比如，具有键盘焦点的小部件），你需要穿过整个所有权链，使用一些启发式方法来避免访问太多小部件。
- en: I believe Widgets should be owned by the library. If your container has children,
    then the only thing the container will actually own is keys into a structure (probably
    a slotmap) where the widget is stored. This makes a lot of things easier, like
    serialization and debugging, but it has an impact on the entire backend. It's
    an infrastructure investment.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为小部件应该由库拥有。如果你的容器有子部件，那么容器实际拥有的唯一事物就是一个结构的键（可能是一个 slotmap），其中存储了小部件。这使得很多事情更容易，比如序列化和调试，但它对整个后端有影响。这是一项基础设施投资。
- en: Lately, I've seen more and more dicussion of implementing GUI through an ECS.
    A lot of that discussion comes from Bevy, which is natural, since the bevy community
    ~~is made up of ruthless cultists striving to feed ever more sacrifices to the
    ECS god until it consumes the Earth~~ is intimately familiar with the ECS pattern
    and has reached a phase where UI work is getting a lot of attention. But I've
    seen discussions about it in the Linebender community too.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我看到越来越多的讨论通过 ECS 实现 GUI。很多这样的讨论来自 Bevy，这是很自然的，因为 Bevy 社区~~由无情的狂热者组成，他们努力向
    ECS 神献上越来越多的祭品，直到它吞噬地球~~非常熟悉 ECS 模式，并且已经进入了 UI 工作得到了很多关注的阶段。但我也在 Linebender 社区看到了相关讨论。
- en: Whether we actually want to use ECS is something we still need to research.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是否真的想使用 ECS 还需要进一步研究。
- en: 'The way I understand it, the big draw of ECS is the "S" part, the Systems:
    it''s about handling lots of similar data at once in arbitrary order. Which is
    why eg archetypes in bevy are useful: you''re grouping together entities with
    the same components, so that you can say "execute this code for all entities with
    component X and component Y" and have this code be executed on arrays of values
    with minimal indirection or branching. And the "arbitrary order" part makes them
    work really well with slotmaps: since you can just read from the beginning of
    the slotmap, you don''t pay the double-indirection penalty.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我理解，ECS 的最大吸引力在于“S”部分，即 Systems：它是关于一次处理大量类似数据的任意顺序。这就是为什么 Bevy 中的原型很有用：你将具有相同组件的实体组合在一起，这样你就可以说“对具有组件
    X 和组件 Y 的所有实体执行此代码”，并且可以在数组值上执行此代码，最小限度地进行间接或分支。而“任意顺序”部分使它们与 slotmaps 非常配合：因为你可以从
    slotmap 的开头直接读取，所以你不会付出双重间接的代价。
- en: In other words, the ideal use case for ECS is code of the type `for (entity
    in entities) entity.position += entity.speed`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，ECS 的理想用例是类型为 `for (entity in entities) entity.position += entity.speed`
    的代码。
- en: 'GUI is pretty far from that ideal use-case: updates are sparse and should only
    run on a small number of changed widgets. Order often matters. And I''m not sure
    archetypes would work in a framework with a large variety of widgets and different
    attributes.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: GUI 与理想用例相去甚远：更新稀疏，只应在少量更改的小部件上运行。顺序往往很重要。我不确定原型是否适用于具有大量不同小部件和不同属性的框架。
- en: 'I think there are two things you really want from a Rust ECS library for GUI:
    slotmaps, and efficient ways to add and remove components from an entity.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为你真正想要从 Rust 的 ECS 库中获得的两件事情是：slotmaps，以及以高效的方式向实体添加和删除组件。
- en: Implementing those is going to be a major undertaking, which we'll have to divide
    into small experiements, but one I expect to pay many times over.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这些将是一个重大的任务，我们将不得不将其分成小实验，但我预计将有多次回报。
- en: Community involvement and more to come
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社区参与和更多即将到来
- en: 'I want to really put emphasis on something: none of the above is set in stone.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要真正强调一点：以上所有内容都没有被确定下来。
- en: Part of what Raph wants to achieve this year is to make Xilem more of a community
    project, and that means running more decisions by the community.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 今年 Raph 想要实现的一部分是让 Xilem 更像一个社区项目，这意味着更多的决定需要经过社区讨论。
- en: I've created [an RFC repository](https://github.com/linebender/rfcs/) for this,
    and each of the sections above will get its own RFC, where I'll expand on my rationale
    in more detail.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经为此创建了[一个 RFC 仓库](https://github.com/linebender/rfcs/)，上述每个部分都将有自己的 RFC，我将在其中更详细地阐述我的理由。
- en: 'This isn''t a rubber-stamping process either: I want to implement those ideas,
    but if the community decides that they are bad, then we''ll go another direction.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这也不是一个橡皮图章式的过程：我想要实现这些想法，但如果社区认为它们不好，那么我们将选择另一种方向。
- en: 'There''s other ideas I haven''t discussed yet that I want to come back to:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他我还没有讨论的想法，我想回来谈谈：
- en: '**Declarative styling:** Giving Widgets attributes similar to CSS properties,
    with modifiers for animations, pseudo-classes, media queries and container queries.
    While inspired by CSS, it wouldn''t involve any CSS parsing, selector resolution,
    specificity resolution, etc.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声明性样式：** 给小部件提供类似于 CSS 属性的属性，带有用于动画、伪类、媒体查询和容器查询的修饰符。虽然受 CSS 启发，但不涉及任何 CSS
    解析、选择器解析、特异性解析等。'
- en: '**Compositing:** Xilem is heading towards a "do everything in the GPU" approach.
    This is good for performance, but Firefox engineers who have gone down this road
    before us have warned us of the many perils they faced, especially regarding battery
    life. In general, after layout and painting, you really want a `composite()` phase
    to deal with scrolling and some simple animations without touching the GPU at
    all if possible. [This is a complex subject](https://raphlinus.github.io/ui/graphics/2020/09/13/compositor-is-evil.html),
    and it would be nice if we could hide most of that complexity from app developers
    while still giving them good performance.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合成：** Xilem 正朝着“一切在 GPU 中完成”的方向发展。这对性能来说是有利的，但是在我们之前走过这条路的 Firefox 工程师警告我们要小心许多陷阱，特别是关于电池寿命的问题。一般来说，在布局和绘制之后，如果可能的话，你真的希望有一个
    `composite()` 阶段来处理滚动和一些简单的动画，而完全不触及 GPU。[这是一个复杂的主题](https://raphlinus.github.io/ui/graphics/2020/09/13/compositor-is-evil.html)，如果我们能够向应用开发者隐藏大部分复杂性，同时仍然给他们良好的性能，那就太好了。'
- en: '**Resource loading:** This is another area where we might want to crib from
    game engines. At the very least, we want to be able to ask "Load me this texture/shader/font/etc"
    without having to write disk I/O in user code. Then we can start thinking about
    progressive loading, fallbacks, sharing, etc.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源加载：** 这是另一个我们可能需要从游戏引擎中借鉴的领域。至少，我们希望能够询问“加载这个纹理/着色器/字体等”，而不必在用户代码中编写磁盘
    I/O。然后我们可以开始考虑渐进式加载、回退、共享等。'
- en: These ideas are likely to be the subject of further articles and/or RFCs in
    the near future.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这些想法很可能成为不久的将来的更多文章和/或 RFC 的主题。
- en: Relations with other projects
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与其他项目的关系
- en: Presenting the current state of the Rust GUI ecosystem would probably take its
    own article.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 展示 Rust GUI 生态系统的当前状态可能需要一篇专门的文章。
- en: Things are moving quickly, and anything I write now might not be up to date
    in two weeks. The projects we're most interested in right now are Winit and Bevy,
    and there's some potential for cooperation with Servo. The COSMIC ecosystem looks
    pretty cool, but so far it looks like we have less to share with them.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 事情发展迅速，我现在写的任何东西可能在两周后就已经过时了。我们目前最感兴趣的项目是 Winit 和 Bevy，与 Servo 合作的潜力也有一些。COSMIC
    生态系统看起来很酷，但目前看来我们与他们分享的内容较少。
- en: People from parallel projects are communicating and exchanging much, *much*
    more than they were in 2022\. Between Vello, Parley, wgpu, Taffy, COSMIC-Text
    and others, projects are converging and maintainers are making more effort to
    reach out and integrate other people's code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 来自并行项目的人们正在交流和交换的比 2022 年多得多。在 Vello、Parley、wgpu、Taffy、COSMIC-Text 等项目之间，项目正在收敛，维护者正在更努力地与其他人的代码集成和交流。
- en: Stay tuned for more!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 敬请关注更多信息！
- en: Hey, this is really cool!
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嘿，这真的很酷！
- en: Something that came up in discussions I've had with Raph is that it's easy to
    miss the forest for the trees. In the middle of all the paperwork, blog-writing,
    RFC-writing, we can end up focusing on the process so much that we forget how
    excited we are.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在我与 Raph 的讨论中提到的一点是，很容易因为繁琐的工作而忽略了全局。在所有的文书工作、博客撰写、RFC 写作中，我们可能会太过专注于流程，以至于忘记了自己有多么兴奋。
- en: 'So, I''m taking the moment to remind myself: this is really freaking exciting!'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我在此刻提醒自己：这真的是非常令人兴奋的！
- en: For all my criticisms and caveats and realistic assessments of the problems
    we need to overcome, I'm still feeling absolutely great about this!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我有一些批评、保留意见和对我们需要克服的问题的现实评估，但我对此仍然感到非常棒！
- en: I'm super thankful to Raph for getting us this far, to Google Fonts for sponsoring
    us, and to everyone else who contributed to the Linebender ecosystem. I think
    we can do something amazing and I'm honestly a little startled to be in this position
    at all.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常感谢 Raph 让我们走到了这一步，感谢 Google Fonts 赞助我们，也感谢所有为 Linebender 生态系统做出贡献的人。我觉得我们可以做出一些了不起的事情，而且说实话，我对自己能够达到这个位置感到有点吃惊。
- en: 'To reiterate what I said: in the next few years, I want the entire ecosystem
    to get to a point where people talk about Rust GUI like they talk about ripgrep
    or rustls.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 重申我之前说过的：在接下来的几年里，我希望整个生态系统能够达到一个程度，人们会像谈论 ripgrep 或 rustls 一样谈论 Rust GUI。
- en: I legitimately think Rust has the potential to get best-in-class GUI frameworks,
    and now the time has come to prove it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我真诚地认为 Rust 有潜力成为最优秀的 GUI 框架，现在是证明这一点的时候了。
