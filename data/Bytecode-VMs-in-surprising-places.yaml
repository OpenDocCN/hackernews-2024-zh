- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:40:55'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:40:55'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Bytecode VMs in surprising places
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 令人惊讶的地方的字节码虚拟机
- en: 来源：[https://dubroy.com/blog/bytecode-vms-in-surprising-places/](https://dubroy.com/blog/bytecode-vms-in-surprising-places/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://dubroy.com/blog/bytecode-vms-in-surprising-places/](https://dubroy.com/blog/bytecode-vms-in-surprising-places/)
- en: April 30, 2024
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年4月30日
- en: In response to a question on Twitter^(, Richard Hipp wrote about [why SQLite
    uses a bytecode VM](https://sqlite.org/draft/whybytecode.html) for executing SQL
    statements.)
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在Twitter上回答一个问题时^(，Richard Hipp写到[为什么SQLite使用字节码虚拟机](https://sqlite.org/draft/whybytecode.html)来执行SQL语句。)
- en: Most people probably associate bytecode VMs with general-purpose programming
    languages, like JavaScript or Python. But sometimes they appear in surprising
    places! Here are a few that I know about.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人可能将字节码虚拟机与通用编程语言（如JavaScript或Python）联系起来。但有时它们出现在令人惊讶的地方！这里是我知道的一些例子。
- en: eBPF
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: eBPF
- en: Did you know that inside the Linux kernel, there’s an extension mechanism that
    includes a bytecode interpreter and a JIT compiler?
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道在Linux内核内部有一个包括字节码解释器和JIT编译器的扩展机制吗？
- en: 'I had no idea. Well, it’s called [eBPF](https://en.wikipedia.org/wiki/EBPF),
    and it’s pretty interesting: a register-based VM with ten general-purpose registers
    and over a hundred different opcodes.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道。好吧，它被称为[eBPF](https://en.wikipedia.org/wiki/EBPF)，它相当有趣：一个具有十个通用寄存器和超过一百种不同操作码的寄存器式虚拟机。
- en: 'The “BPF” in eBPF stands for *Berkeley packet filter*, and the basic idea is
    described in [a 1993 USENIX paper](https://www.tcpdump.org/papers/bpf-usenix93.pdf):'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: eBPF中的“BPF”代表*Berkeley packet filter*，其基本思想在[1993年的USENIX论文](https://www.tcpdump.org/papers/bpf-usenix93.pdf)中描述：
- en: Many versions of Unix provide facilities for user-level packet capture, making
    possible the use of general purpose workstations for network monitoring. Because
    network monitors run as user-level processes, packets must be copied across the
    kernel/user-space protection boundary. This copying can be minimized by deploying
    a kernel agent called a packet filter, which discards unwanted packets as early
    as possible. The original Unix packet filter was designed around a stack-based
    filter evaluator that performs sub-optimally on current RISC CPUs. The BSD Packet
    Filter (BPF) uses a new, register-based filter evaluator that is up to 20 times
    faster than the original design.
  id: totrans-split-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 许多版本的Unix提供用户级别的数据包捕获功能，使得可以使用通用工作站进行网络监控。因为网络监视器作为用户级别进程运行，数据包必须通过内核/用户空间保护边界进行复制。通过部署称为数据包过滤器的内核代理，可以将此复制最小化，并尽早丢弃不需要的数据包。原始的Unix数据包过滤器设计围绕一个栈式过滤器评估器，该评估器在当前的RISC
    CPU上执行效果不佳。BSD数据包过滤器（BPF）使用了一个新的、基于寄存器的过滤器评估器，比原始设计快了多达20倍。
- en: 'So it was originally designed for a pretty restricted use case: a directed,
    acyclic control flow graph representing a filter function for network packets.
    And for a long time, the Linux implementation was equally simple: two general-purpose
    registers, a switch-style interpreter, and no backwards branches.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最初它被设计用于一个相当受限制的用例：表示网络数据包的一个有向无环控制流图的过滤函数。很长一段时间以来，Linux的实现同样简单：两个通用寄存器，一个开关式解释器，没有反向分支。
- en: 'A patch in 2011 added [a JIT compiler for x86-64](https://lwn.net/Articles/437981/).
    In 2012, [the first non-networking use case appeared](https://lwn.net/Articles/475043/).
    Then, in 2014, the BPF implementation was substantially extended on its way to
    becoming [the universal in-kernel virtual machine](https://lwn.net/Articles/599755/):'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 2011年的一个补丁为[x86-64的JIT编译器](https://lwn.net/Articles/437981/)。2012年，[首个非网络使用案例出现](https://lwn.net/Articles/475043/)。然后，2014年，在成为[内核通用虚拟机](https://lwn.net/Articles/599755/)的路上，BPF实现得到了大幅扩展：
- en: It expands the set of available registers from two to ten, adds a number of
    instructions that closely match real hardware instructions, implements 64-bit
    registers, makes it possible for BPF programs to call a (rigidly controlled) set
    of kernel functions, and more. Internal BPF is more readily compiled into fast
    machine code and makes it easier to hook BPF into other subsystems.
  id: totrans-split-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它扩展了可用寄存器集，从两个扩展到十个，增加了许多与真实硬件指令紧密匹配的指令，实现了64位寄存器，使得BPF程序可以调用（严格控制的）一组内核函数，等等。内部BPF更容易编译成快速的机器码，并使得将BPF挂接到其他子系统变得更容易。
- en: DWARF expressions
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DWARF表达式
- en: 'DWARF is a file format used by compilers like GCC and LLVM to include debug
    information in compiled binaries. Say you’re trying to debug the following C++
    code:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: DWARF是由像GCC和LLVM这样的编译器使用的文件格式，用于在编译后的二进制文件中包含调试信息。假设你正在尝试调试以下C++代码：
- en: '[PRE0]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In a debugger, you might want to print the value of the `ans` variable. But
    depending on the compiler and the code, this could be surprisingly difficult!
    It could be in a register, on the stack, or it might have been optimized away
    (to name just a few possibilities).
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试器中，您可能想要打印`ans`变量的值。但根据编译器和代码的不同，这可能会出乎意料地困难！它可能在寄存器中，堆栈上，或者可能已经被优化掉（只是几种可能性之一）。
- en: 'The solution is allow the compiler to specify an *expression* that will compute
    the value of the local variable. So the [DWARF spec](https://dwarfstd.org/doc/DWARF5.pdf)
    includes an expression language:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是允许编译器指定一个*表达式*来计算本地变量的值。因此，[DWARF规范](https://dwarfstd.org/doc/DWARF5.pdf)包括一个表达式语言：
- en: '**2.5 DWARF Expressions**'
  id: totrans-split-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**2.5 DWARF表达式**'
- en: DWARF expressions describe how to compute a value or specify a location. They
    are expressed in terms of DWARF operations that operate on a stack of values.
  id: totrans-split-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: DWARF表达式描述如何计算值或指定位置。它们以操作DWARF操作栈为基础表达。
- en: A DWARF expression is encoded as a stream of operations, each consisting of
    an opcode followed by zero or more literal operands. The number of operands is
    implied by the opcode.
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: DWARF表达式被编码为一系列操作流，每个操作由操作码和零个或多个文字操作数组成。操作数的数量由操作码隐含确定。
- en: It’s up to the debugger to evaluate the expressions. GDB and LLDB both have
    a switch-based interpreter for DWARF expressions.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由调试器来评估表达式。GDB和LLDB都有基于开关的DWARF表达式解释器。
- en: GDB agent expressions
  id: totrans-split-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GDB代理表达式
- en: But it turns out that GDB has another bytecode interpreter!
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但事实证明，GDB还有另一个字节码解释器！
- en: Using GDB’s `trace` and `collect` commands, the user can specify locations in
    the program, and arbitrary expressions to evaluate when those locations are reached.
  id: totrans-split-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用GDB的`trace`和`collect`命令，用户可以指定程序中的位置，并在达到这些位置时评估任意表达式。
- en: When GDB is debugging a remote target, the GDB agent code running on the target
    computes the values of the expressions itself. To avoid having a full symbolic
    expression evaluator on the agent, GDB translates expressions in the source language
    into a simpler bytecode language, and then sends the bytecode to the agent; the
    agent then executes the bytecode, and records the values for GDB to retrieve later.
  id: totrans-split-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当GDB调试远程目标时，运行在目标上的GDB代理代码自己计算表达式的值。为了避免在代理上具有完整的符号表达式求值器，GDB将源语言中的表达式转换为一个更简单的字节码语言，然后将字节码发送到代理；代理然后执行字节码，并记录值供GDB稍后检索。
- en: The bytecode language is simple; there are forty-odd opcodes, the bulk of which
    are the usual vocabulary of C operands (addition, subtraction, shifts, and so
    on) and various sizes of literals and memory reference operations. The bytecode
    interpreter operates strictly on machine-level values — various sizes of integers
    and floating point numbers — and requires no information about types or symbols;
    thus, the interpreter’s internal data structures are simple, and each bytecode
    requires only a few native machine instructions to implement it. The interpreter
    is small, and strict limits on the memory and time required to evaluate an expression
    are easy to determine, making it suitable for use by the debugging agent in real-time
    applications.
  id: totrans-split-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 字节码语言很简单；有四十多个操作码，其中大部分是C操作的常见词汇（加法、减法、移位等）以及各种大小的文字和内存引用操作。字节码解释器严格操作在机器级别的值上
    —— 各种大小的整数和浮点数 —— 并且不需要类型或符号信息；因此，解释器的内部数据结构简单，并且每个字节码只需要几个本机机器指令来实现。解释器体积小，易于确定评估表达式所需的内存和时间限制，适合用于实时应用程序中的调试代理。
- en: '*(From [Debugging with GDB, Appendix F: The GDB Agent Expression Mechanism](https://sourceware.org/gdb/current/onlinedocs/gdb.html/Agent-Expressions.html))*'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*(来源自[使用GDB调试，附录F：GDB代理表达式机制](https://sourceware.org/gdb/current/onlinedocs/gdb.html/Agent-Expressions.html))*'
- en: WinRAR
  id: totrans-split-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WinRAR
- en: WinRAR ^(is a file compression utility for Windows with a proprietary file format.
    Tavis Ormandy, a vulnerability researcher at Google, [discovered that the RAR
    format includes a bytecode encoding for data transformation](https://blog.cmpxchg8b.com/2012/09/fun-with-constrained-programming.html):)
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: WinRAR ^(是Windows的文件压缩实用程序，具有专有文件格式。Google的漏洞研究员Tavis Ormandy [发现RAR格式包含用于数据转换的字节码编码](https://blog.cmpxchg8b.com/2012/09/fun-with-constrained-programming.html)：)
- en: Believe it or not, RAR files can contain bytecode for a simple x86-like virtual
    machine called the RarVM. This is designed to provide filters (preprocessors)
    to perform some reversible transformation on input data to increase redundancy,
    and thus improve compression.
  id: totrans-split-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 信不信由你，RAR文件可以包含一个名为RarVM的简单类似x86的虚拟机的字节码。这设计为提供过滤器（预处理器），以对输入数据执行一些可逆转换，增加冗余性，从而提高压缩效果。
- en: 'His [rarvmtools repo](https://github.com/taviso/rarvmtools) includes some details
    on the architecture:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 他的[rarvmtools仓库](https://github.com/taviso/rarvmtools)包含了一些关于架构的细节：
- en: Familiarity with x86 (and preferably intel assembly syntax) would be an advantage.
  id: totrans-split-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 熟悉x86（最好是英特尔汇编语法）将是一个优势。
- en: RarVM has 8 named registers, called r0 to r7\. r7 is used as a stack pointer
    for stack related operations (such as push, call, pop, etc). However, as on x86,
    there are no restrictions on setting r7 to whatever you like, although if you
    do something stack related it will be masked to fit within the address space for
    the duration of that operation.
  id: totrans-split-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: RarVM有8个命名寄存器，称为r0到r7。r7用作与堆栈相关操作（如推送、调用、弹出等）的堆栈指针。然而，与x86一样，对于r7没有设置限制，尽管如果执行堆栈相关操作，它将被屏蔽以适应地址空间，在该操作的持续时间内。
- en: 'Some others:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他信息：
- en: The [TrueType](https://developer.apple.com/fonts/TrueType-Reference-Manual/)
    font specification includes a set of over 200 instructions used for glyph rendering
    and hinting.
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TrueType](https://developer.apple.com/fonts/TrueType-Reference-Manual/)字体规范包括一组超过200条指令，用于字形的渲染和提示。'
- en: '[PostScript](https://en.wikipedia.org/wiki/PostScript) is not only a page description
    language, but a relatively powerful stack-based programming language. PostScript
    files are plain text, so a PostScript renderer doesn’t necessarily use bytecode,
    but the spec also includes a binary encoding.'
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PostScript](https://en.wikipedia.org/wiki/PostScript)不仅是一种页面描述语言，而且是一种相对强大的基于堆栈的编程语言。PostScript文件是纯文本，因此PostScript渲染器不一定使用字节码，但规范也包括了二进制编码。'
- en: 👉 *[Discuss on Hacker News](https://news.ycombinator.com/item?id=40211205).*
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 👉 *[在Hacker News上讨论](https://news.ycombinator.com/item?id=40211205)*。
