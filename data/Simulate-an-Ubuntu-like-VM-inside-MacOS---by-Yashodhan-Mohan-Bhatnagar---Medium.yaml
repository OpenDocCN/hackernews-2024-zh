- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:51:00'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年05月27日 14:51:00
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Simulate an Ubuntu-like VM inside MacOS | by Yashodhan Mohan Bhatnagar | Medium
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MacOS中模拟类似Ubuntu的VM | 作者：Yashodhan Mohan Bhatnagar | Medium
- en: 来源：[https://yashodhanmohan.medium.com/simulate-an-ubuntu-like-vm-inside-macos-2a20332e02e8](https://yashodhanmohan.medium.com/simulate-an-ubuntu-like-vm-inside-macos-2a20332e02e8)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://yashodhanmohan.medium.com/simulate-an-ubuntu-like-vm-inside-macos-2a20332e02e8](https://yashodhanmohan.medium.com/simulate-an-ubuntu-like-vm-inside-macos-2a20332e02e8)
- en: Simulate an Ubuntu-like VM inside MacOS
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在MacOS中模拟类似Ubuntu的VM
- en: There are times, when you’re working on a remote system that has a Unix system
    like Ubuntu, RHEL, etc. You want to develop scripts, checkout if some packages
    exist, prototype command snippets or maybe test out some compatibility.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当您正在处理像Ubuntu、RHEL等Unix系统的远程系统时。您想开发脚本，检查一些软件包是否存在，原型命令片段，或者可能测试一些兼容性。
- en: Anytime I’ve had to do that I had to spin up a t2 VM from AWS’s free tier and
    test it out and then close it. Always seemed a hassle especially since I needed
    Internet to simulate simple commands. It’s not like a system like Ubuntu is very
    far from what MacOS already has. But sometimes there are very subtle differences
    and wiggly bugs that absolutely need you to use the original OS. Sometimes simple
    commands like **date** have different flag behaviours.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我需要这样做时，我都必须启动一个来自AWS免费套餐的t2虚拟机进行测试，然后关闭它。这总是看起来很麻烦，特别是因为我需要互联网来模拟简单的命令。这不像Ubuntu这样的系统离MacOS已经很远了。但有时会有非常微妙的差异和棘手的错误，绝对需要您使用原始操作系统。有时简单的命令像**date**会有不同的标志行为。
- en: Recently I had started using a Docker container of Ubuntu as a replacement of
    the t2 VM. For any testing, I would spin up the container, setup the dependeny
    packages, test out the commands, scripts, etc. and then let it be. Some times
    it would get killed, some days I absent mindedly cleaned up all the containers,
    once or twice I had to remove Docker runtime itself (for unrelated reasons). It
    would have been swell if I could treat that Docker container like my personal
    VM, which could maintain some amount of state. I don’t want to install basic packages
    like wget, curl everytime and officiating every minor change inside a Dockerfile
    was honestly a maintenance nightmare for me. If I created a symlink inside the
    OS filesystem, I didn’t want to codify it inside the Dockerfile.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我开始使用Ubuntu的Docker容器来替代t2 VM。对于任何测试，我都会启动容器，设置依赖包，测试命令、脚本等，然后让它运行。有时它会被终止，有些日子我不知不觉地清理了所有的容器，有一两次我不得不删除Docker运行时本身（出于无关的原因）。如果我能像对待个人VM一样对待这个Docker容器，它可以保持一定程度的状态，那将是非常好的。我不想每次都安装基本包，像wget、curl等，对我来说，在Dockerfile中正式化每个小改变实际上是一个维护噩梦。如果我在操作系统文件系统中创建了一个符号链接，我不想将其编码到Dockerfile中。
- en: To that end, I setup a batch of scripts that can simulate a VM, maintain state
    and let me treat the container as a VM. This is the story of “Friday”.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我设置了一批可以模拟VM、维护状态并让我将容器视为VM的脚本。这就是“Friday”的故事。
- en: State
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态
- en: There are two kinds of states I wanted to maintain —
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要维护两种状态——
- en: 'System state: This is the state that gets modified when I install packages,
    make system changes, add users, change permissions and do all kind of random admin
    stuff.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统状态：这是当我安装软件包、进行系统更改、添加用户、更改权限以及执行各种随机管理员操作时所修改的状态。
- en: 'Volume state: This was generally heavy duty stuff like files, CSVs, keys, etc
    that I don’t necessarily want to store in the container image. The files inside
    it could be small to large to very large. Taking it inside a container image would
    be, inconvenient, to say the least.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 卷状态：这通常是一些重型的东西，如文件、CSV、密钥等，我不一定想要存储在容器镜像中。它里面的文件可以是小到大到非常大。将其放入容器镜像中将会很不方便，至少可以这么说。
- en: To handle the system state, I used a combination of **“docker export”** and
    **“docker import”** to routinely, and on-demand, backup the state of the container.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 处理系统状态时，我使用了**“docker export”**和**“docker import”**的组合来定期和按需备份容器的状态。
- en: To handle the volume state, I simply mounted a directory from my MacOS filesystem
    into the container as “**/root**”. It has the additional side-effect that transferring
    files from my Mac to my “Ubuntu VM” is as simple as copying it from one directory
    to another. SFTP of the simplest kind.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理卷状态，我简单地将MacOS文件系统中的一个目录挂载到容器中的“**/root**”。它还有一个额外的副作用，就是将文件从我的Mac传输到“Ubuntu
    VM”就像从一个目录复制到另一个目录那样简单。最简单的SFTP。
- en: Friday
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 星期五
- en: 'Friday is made of 4 simple scripts:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Friday由4个简单的脚本组成：
- en: '***start-friday.sh***'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***start-friday.sh***'
- en: This script checks if Friday is already running and if not, starts Friday, and
    takes an immediate backup of it’s state.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个脚本检查是否已经运行了星期五，如果没有，就启动星期五，并立即备份其状态。
- en: '***freeze-friday.sh***'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***freeze-friday.sh***'
- en: This script is used by all other scripts and simply takes a backup of Friday’s
    state by running “**docker export**” to make a TGZ file and then an immediate
    “**docker import**” to bring it back into the docker image system.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个脚本被所有其他脚本使用，只需通过运行 “**docker export**” 对 Friday 的状态进行备份，生成一个 TGZ 文件，然后立即通过
    “**docker import**” 将其带回到 docker 镜像系统中。
- en: '***login-into-friday.sh***'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***login-into-friday.sh***'
- en: This script runs the docker exec command to enter Friday. The special magic
    spice is that when you exit the shell cleanly, it’ll take an immediate freeze
    of Friday. So this makes sure that if you’ve done any changes during your shell
    session, they’re not lost. Kind of like how applications ask you *“Do you want
    to save before quitting?”*
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个脚本运行 docker exec 命令进入 Friday。特殊的魔法是，当你干净地退出 shell 时，它会立即冻结 Friday。所以这确保了如果你在
    shell 会话期间进行了任何更改，它们不会丢失。有点像应用程序在退出前会问你：“你想保存吗？”
- en: '***stop-friday.sh*** This script takes a backup of Friday and stops it cleanly.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***stop-friday.sh*** 这个脚本会对 Friday 进行备份并安全停止它。'
- en: The core spice of Friday is the freeze-friday logic that ensures that each and
    every minor modification to Friday is backed up similar to how AWS maintains your
    EBS backups.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Friday 的核心关键是 freeze-friday 逻辑，确保对 Friday 的每一次微小修改都进行了备份，类似于 AWS 如何维护你的 EBS
    备份。
- en: An additional protection that you can put around Friday is to setup **crontab**
    to take hourly/half-hourly backups of Friday by running freeze-friday.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种保护 Friday 的方法是设置 **crontab**，通过运行 freeze-friday 每小时/每半小时备份 Friday。
- en: I’ve put up the scripts below which only need you to modify the “ROOT_PATH”
    variable to a directory where Friday can store its TGZ backups and its Volume
    state. To setup, only once you need to pull your flavor or favorite OS’s base
    image from DockerHub or your registry to your local system and tag it as “***friday:latest***”.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经放置了下面的脚本，只需要你修改“ROOT_PATH”变量为一个星期五可以存储其 TGZ 备份和卷状态的目录。设置好之后，只需要一次，你需要从 DockerHub
    或你的注册表中拉取你喜欢的操作系统的基础镜像到你的本地系统，并将其标记为“***friday:latest***”。
- en: '***The scripts are available as a*** [***Gist here***](https://gist.github.com/yashodhanmohan/2c1b712883dec6dfba8ba2586df1b0cc)***.***'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '***这些脚本可以在*** [***这里***](https://gist.github.com/yashodhanmohan/2c1b712883dec6dfba8ba2586df1b0cc)
    ***作为 Gist 获取***。'
- en: 'For instance I wanted my VM to be Ubuntu flavored, so:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我想让我的 VM 是 Ubuntu 口味的，所以：
- en: setup
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: setup
- en: start-friday.sh
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: start-friday.sh
- en: login-into-friday.sh
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: login-into-friday.sh
- en: freeze-friday.sh
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: freeze-friday.sh
- en: stop-friday.sh
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: stop-friday.sh
- en: 'You can also add freeze-friday to crontab like so:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以像这样将 freeze-friday 添加到 crontab 中：
