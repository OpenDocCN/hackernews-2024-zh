- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:40:47'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:40:47
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Laurence Tratt: How can C Programs be so Reliable?'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Laurence Tratt: How can C Programs be so Reliable?'
- en: 来源：[https://tratt.net/laurie/blog/2008/how_can_c_programs_be_so_reliable.html](https://tratt.net/laurie/blog/2008/how_can_c_programs_be_so_reliable.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://tratt.net/laurie/blog/2008/how_can_c_programs_be_so_reliable.html](https://tratt.net/laurie/blog/2008/how_can_c_programs_be_so_reliable.html)
- en: 'C is, today, a unique programming language. Surprisingly few people can really
    program in C and yet many of us have quite strong opinions about it. Buffer overflows,
    stack smashing, integer overflows — C has many well publicised flaws, and these
    terms are often bandied about confidently, even by those unfamiliar with C. Personally
    I shied away from C for a decade, for one reason or another: originally, compilers
    were expensive (this being the days before free UNIX clones were readily available)
    and slow; the culture was intimidatory; and, of course, all the C scare stories
    made me think that a mere mortal programmer such as myself would never be able
    to write a reliable C program.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: C语言今天是一种独特的编程语言。令人惊讶的是，很少有人真正能够在C语言中编程，但我们中的许多人对此有着相当强烈的看法。缓冲区溢出、栈溢出、整数溢出 -
    C语言有许多广为人知的缺陷，即使是那些不熟悉C语言的人也经常自信地谈论这些术语。个人而言，我在十年中避开了C语言，出于种种原因：起初，编译器昂贵（这是在免费UNIX克隆普遍可得之前的日子），而且速度慢；文化令人望而生畏；当然，所有的C语言骇人听闻的故事使我认为像我这样的普通程序员永远无法编写可靠的C程序。
- en: Discounting a couple of tiny C modules that I created largely by blindly cutting
    and pasting from other places, the first C program I wrote was the [Converge](http://convergepl.org)
    VM. Two things from this experience surprised me. First, writing C programs turned
    out not to be that difficult. With hindsight, I should have realised that a youth
    misspent writing programs in assembler gave me nearly all the mental tools I needed
    - after all, C is little more than a high-level assembly language. Once one has
    understood a concept such as pointers (arguably the trickiest concept in low-level
    languages, having no simple real-world analogy) in one language, one has understood
    it in every language. Second, the Converge VM hasn’t been riddled with bugs as
    I expected.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不计两个我大部分是从其他地方盲目剪切和粘贴而来的微小的C模块，我写的第一个C程序是[Converge](http://convergepl.org)虚拟机。这个经历中的两件事让我感到惊讶。首先，写C程序并不是那么困难。事后看来，我应该意识到，年少时在汇编语言中编写程序几乎给了我所有需要的思维工具
    - 毕竟，C语言不过是一种高级汇编语言。一旦理解了指针等概念（可以说是低级语言中最棘手的概念，没有简单的现实世界类比），在任何语言中都能理解它。其次，Converge虚拟机并没有像我预期的那样充斥着bug。
- en: In fact, ignoring logic errors that would have happened in any language, only
    two C-specific errors have thus far caused any real problem in the Converge VM
    (please note, I’m sure there are lots of bugs lurking - but I’m happy not to have
    hit too many of them yet). One was a list which wasn’t correctly NULL terminated
    (a classic C error); that took a while to track down. The other was much more
    subtle, and took several days, spread over a couple of months, to solve. The Converge
    garbage collector can conservatively garbage collect arbitrary `malloc`’d chunks
    of memory, looking for pointers. In all modern architectures, pointers have to
    live on word-aligned boundaries. However, `malloc`’d chunks of memory are often
    not word-aligned in length. Thus sometimes the garbage collector would try and
    read the 4 bytes of memory starting at position 4 in a chunk - even if that chunk
    that was only 5 bytes long. In other words, the garbage collector tried to read
    in 1 byte of proper data and 3 bytes of possibly random stuff in an area of memory
    it didn’t theoretically have access to. The rare, and subtle, errors this led
    to were almost impossible to reason about. But let’s be honest - in how many languages
    can one retrospectively add a garbage collector?
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，除了在任何语言中都可能发生的逻辑错误外，到目前为止，只有两个特定于C语言的错误在Converge虚拟机中引起了真正的问题（请注意，我相信隐藏着许多bug
    - 但我很高兴并没有遇到太多）。其中一个是一个列表未正确地以NULL结尾（一个经典的C错误）；追踪此问题花了一些时间。另一个错误则更为微妙，花费了几天时间，分布在几个月之间才解决。Converge垃圾收集器可以保守地收集任意`malloc`分配的内存块，查找指针。在所有现代架构中，指针必须位于字对齐的边界上。然而，`malloc`分配的内存块通常长度不是字对齐的。因此，有时垃圾收集器会尝试读取内存块中从位置4开始的4字节内存
    - 即使该内存块只有5字节长。换句话说，垃圾收集器试图在理论上无法访问的内存区域中读取1字节的正确数据和3字节可能是随机数据。由此导致的罕见和微妙错误几乎无法推理。但坦率地说
    - 在多少种语言中可以事后添加垃圾收集器呢？
- en: 'My experience with the Converge VM didn’t really fit my previous prejudices.
    I had implicitly bought into the idea that C programs segfault at random, eat
    data, and generally act like Vikings on a day trip to Lindisfarne; in contrast,
    programs written in higher level languages supposedly fail in nice, predictable
    patterns. Gradually it occurred to me that virtually all of the software that
    I use on a daily basis - that to which I entrust my most important data - is written
    in C. And I can’t remember the last time there was a major problem with any of
    this software - it’s reliable in the sense that it doesn’t crash, and also reliable
    in the sense that it handles minor failures gracefully. Granted, I am extremely
    fussy about the software I use (I’ve been an OpenBSD user for 9 years or so, and
    software doesn’t get much better than that), and there are some obvious reasons
    as to why it might be so reliable: it’s used by (relatively) large numbers of
    people, who help shake out bugs; the software has been developed over a long period
    of time, so previous generations bore the brunt of the bugs; and, if we’re being
    brutally honest, only fairly competent programmers tend to use C in the first
    place. But still, the fundamental question remained: why is so much of the software
    I use in C so reliable?'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我对 Converge 虚拟机的经验并不完全符合我的先入为主的偏见。我曾经默认认同这样一种观念，即 C 程序会随机崩溃，丢失数据，并且通常表现得像维京人在林迪斯法恩度假一样；相比之下，用更高级的语言编写的程序据说会以良好、可预测的方式失败。渐渐地，我意识到我日常使用的几乎所有软件
    - 那些我委托处理最重要数据的软件 - 都是用 C 语言编写的。而且我想不起来上次这些软件中出现重大问题是什么时候了 - 它们在不崩溃的意义上是可靠的，同时也在处理轻微失败时表现得可靠。当然，我对使用的软件非常挑剔（我已经使用
    OpenBSD 大约 9 年了，而且软件的质量几乎没有比这更好的了），并且有一些明显的原因可以解释为什么它们如此可靠：它们被（相对）大量的人使用，这有助于发现
    bug；这些软件已经在很长一段时间内开发，因此之前的版本承担了大部分的 bug；而且，说实话，只有相当称职的程序员才会首选使用 C 语言。但问题的根本仍然存在：为什么我使用的这么多
    C 语言编写的软件如此可靠？
- en: 'After a dark period of paper writing, I’ve recently been doing a little bit
    of C programming. As someone who, at some points, spends far too much time away
    from home, reliably sending e-mail has always been an issue. For several years
    I have sent e-mail by piping messages to a `sendmail` process on a remote machine
    via `ssh`. While this solves several problems (e.g. blacklisting), it has the
    problem that on many networks (particularly wireless networks) a surprising number
    of network connections get dropped. Checking that each e-mail has been sent is
    a frustrating process. So, having mulled on its design for a little while, I decided
    to create a simple utility to robustly send e-mail via ssh. The resulting program
    - [extsmail](http://tratt.net/laurie/src/extsmail/) - has more features than I’d
    originally expected, but the basic idea is simply to retry sending messages via
    an external command such as ssh, until the message has been successfully sent.
    I also wanted the utility to be as frugal with resources as practical, and to
    be as portable as possible. This inevitably led to extsmail being written in C.
    I then decided, as an experiment, to try and write this, as far as possible, in
    the traditional UNIX way: only to rely on features found in all sensible UNIX
    clones and to be robust against failure. In so doing, I made two observations,
    new to me, about writing software in C.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在经历了一段黑暗的论文写作时期后，我最近开始了一些 C 编程。作为一个经常离家的人，可靠地发送电子邮件一直是个问题。多年来，我一直通过 `ssh` 将邮件发送到远程机器上的
    `sendmail` 进程来解决这个问题。虽然这解决了几个问题（例如黑名单），但在许多网络（特别是无线网络）上会出现许多意外断开的网络连接。检查每封电子邮件是否发送成功是一个令人沮丧的过程。因此，在对其设计深思熟虑了一段时间后，我决定创建一个简单的实用程序，通过
    ssh 可靠地发送电子邮件。最终的程序 - [extsmail](http://tratt.net/laurie/src/extsmail/) - 拥有比我最初预期的更多功能，但基本想法很简单：通过诸如
    ssh 这样的外部命令重试发送消息，直到消息成功发送。我还希望该实用程序在资源上尽可能节约，并尽可能具备可移植性。这不可避免地导致 extsmail 用 C
    语言编写。然后我决定，作为一次实验，尽可能地按照传统的 UNIX 方式编写它：只依赖于所有合理的 UNIX 克隆中找到的特性，并且对失败具有鲁棒性。在这样做的过程中，我对使用
    C 语言编写软件做出了两个对我来说新的观察。
- en: The first observation is semi-obvious. Because software written in C can fail
    in so many ways, I was much more careful than normal when writing it. In particular,
    anything involved in manipulating chunks of memory raises the prospect of off-by-one
    type errors - which are particularly dangerous in C. Whereas in a higher-level
    language I might be lazy and think hmm, do I need to subtract 1 from this value
    when I index into the array? Let’s run it and find out, in C I thought OK, let’s
    sit down and reason about this. Ironically, the time taken to run-and-discover
    often seems not to be much different to sit-down-and-think - except the latter
    is a lot more mentally draining.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个观察结果显而易见。因为用C语言编写的软件可能以多种方式失败，所以在编写时我比平时更加小心。特别是任何涉及操作内存块的地方都可能引发一种一字之差的错误——这在C语言中尤其危险。在高级语言中，我可能会懒得去思考：“嗯，我在索引数组时需要将这个值减1吗？让我们运行一下试试。”但在C语言中，我会认为好吧，让我们坐下来认真思考一下。具有讽刺意味的是，运行和发现所花费的时间似乎并不比坐下来思考的时间多太多——只是后者在心理上更为耗费精力。
- en: The second observation is something I had not previously considered. In C there
    is no exception handling. If, as in the case of extsmail, one wants to be robust
    against errors, one has to handle all possible error paths oneself. This is extremely
    painful in one way - a huge proportion (I would guess at least 40%) of extsmail
    is dedicated to detecting and recovering from errors - although made easier by
    the fact that UNIX functions always carefully detail how and when they will fail.
    In other words, when one calls a function like `stat` in C, the documentation
    lists *all* the failure conditions; the user can then easily choose which errors
    conditions he wishes his program to recover from, and which are fatal to further
    execution (in extsmail, out of memory errors are about the only fatal errors).
    This is a huge difference in mind-set from exception based languages, where the
    typical philosophy is to write code as normal, only rarely inserting `try ...
    catch` blocks to recover from specific errors (which are only sporadically documented).
    Java, with its checked exceptions, takes a different approach telling the user
    you must try and catch these specific exceptions when you call this function.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个观察结果是我之前从未考虑过的。在C语言中，没有异常处理。如果像在extsmail的情况下，想要对错误具有强韧性，就必须自己处理所有可能的错误路径。在某种程度上，这是非常痛苦的——extsmail中有相当大一部分（我猜至少40%）的代码专门用于检测和从错误中恢复——尽管UNIX函数总是仔细说明它们将何时以及如何失败，这使得情况稍微好一些。换句话说，当一个像`stat`这样的函数在C中被调用时，文档列出了*所有*的失败条件；然后用户可以轻松地选择他希望程序从哪些错误条件中恢复，哪些是导致程序无法继续执行的致命错误（在extsmail中，内存耗尽错误几乎是唯一的致命错误）。这与基于异常的语言的思维方式有很大不同，在那些语言中，典型的哲学是正常编写代码，只偶尔插入`try
    ... catch`块以从特定错误中恢复（这些错误只有零星地记录）。Java因其受检异常采取了不同的方法，告诉用户在调用此函数时必须尝试捕获这些特定异常。
- en: 'What I realised is that neither exception-based approach is appropriate when
    one wishes to make software as robust as possible. What one needs is to know exactly
    which errors / exceptions a function can return / raise, and then deal with each
    on a case-by-case basis. While it is possible that modern IDEs could (indeed,
    they may well do, for all I know) automatically show you some of the exceptions
    that a given function can raise, this can only go so far. Theoretically speaking,
    sub-classing and polymorphism in OO languages means that pre-compiled libraries
    can not be sure what exceptions a given function call may raise (since subclasses
    may overload functions, which can then raise different exceptions). From a practical
    point of view, I suspect that many functions would claim to raise so many different
    exceptions that the user would be overwhelmed: in contrast, the UNIX functions
    are very aware that they need to minimise the amount of errors that they return
    to the user, either by recovering from internal failure, or by grouping errors.
    I further suspect that many libraries that rely on exception handling would need
    to be substantially rewritten to reduce the number of exceptions they raise to
    a reasonable number. Furthermore, it is the caller of a function who needs to
    determine which errors are minor and can be recovered from, and which cause more
    fundamental problems, possibly resulting in the program exiting; checked exceptions,
    by forcing the caller to deal with certain exceptions, miss the point here.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我意识到的是，当希望使软件尽可能健壮时，异常处理的任何一种方法都不合适。我们需要知道每个函数可能返回/引发的确切错误/异常，并针对每种情况进行处理。虽然现代IDE可能（实际上，我不知道，它们可能确实如此）自动显示给定函数可能引发的某些异常，但这只能做到这么多。从理论上讲，在面向对象语言中，子类化和多态性意味着预编译库不能确定给定函数调用可能引发哪些异常（因为子类可以重载函数，然后引发不同的异常）。从实际的角度来看，我怀疑许多函数会声称引发许多不同的异常，以至于用户会感到不知所措：相比之下，UNIX函数非常清楚它们需要将返回给用户的错误最小化，要么通过从内部故障中恢复，要么通过分组错误。我进一步怀疑许多依赖异常处理的库需要进行大幅重写，以减少它们引发的异常数量至合理水平。此外，调用函数的人需要确定哪些错误是次要的，可以从中恢复，哪些会导致更根本的问题，可能导致程序退出；检查异常会迫使调用者处理某些异常，但这里的关键是错过了。
- en: Henry Spencer said, “Those who don’t understand UNIX are doomed to reinvent
    it, poorly”. And that’s probably why so many of the programs written in C are
    more reliable than our prejudices might suggest — the UNIX culture, the oldest
    and wisest in mainstream computing, has found ways of turning some of C’s limitations
    and flaws into advantages. As my experience shows, I am yet another person to
    slowly realise this. All that said, I don’t recommend using C unless much thought
    has been given to the decision - the resulting software might be reliable, but
    it will have taken a significant human effort to produce it.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 亨利·斯宾塞说：“那些不理解UNIX的人注定会拙劣地重新发明它。” 这可能是为什么那么多用C语言编写的程序比我们的偏见所暗示的更可靠——UNIX文化，作为主流计算的最古老和最智慧的文化，已经找到了将C语言的一些限制和缺陷转化为优势的方法。正如我的经验表明的那样，我也是又一个慢慢意识到这一点的人。尽管如此，我不建议在没有充分考虑的情况下使用C语言——由此产生的软件可能是可靠的，但制作它可能需要大量的人力。
- en: '[Newer](/laurie/blog/2009/good_programmers_are_good_sysadmins_are_good_programmers.html)'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[更新](/laurie/blog/2009/good_programmers_are_good_sysadmins_are_good_programmers.html)'
- en: 2008-11-11 08:00
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 2008-11-11 08:00
- en: '[Older](/laurie/blog/2008/free_text_geocoding.html)'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[更早](/laurie/blog/2008/free_text_geocoding.html)'
- en: 'If you’d like updates on new blog posts: follow me on'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想获取新博客文章的更新：请关注我
- en: '[Mastodon](https://mastodon.social/@ltratt)'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[Mastodon](https://mastodon.social/@ltratt)'
- en: or
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[Twitter](https://twitter.com/laurencetratt)'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[Twitter](https://twitter.com/laurencetratt)'
- en: ; or
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: ; 或者
- en: '[subscribe to the RSS feed](../blog.rss)'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[订阅RSS源](../blog.rss)'
- en: ; or
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: ; 或者
- en: '[subscribe to email updates](/laurie/newsletter/)'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[订阅电子邮件更新](/laurie/newsletter/)'
- en: ':'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: ：
- en: Comments
  id: totrans-split-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 评论
