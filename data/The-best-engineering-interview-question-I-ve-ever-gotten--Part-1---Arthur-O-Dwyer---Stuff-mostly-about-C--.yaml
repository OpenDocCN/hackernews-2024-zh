- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:40:19'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:40:19'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The best engineering interview question I've ever gotten, Part 1 – Arthur O'Dwyer
    – Stuff mostly about C++
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我曾经得到的最好的工程面试问题，第一部分 – Arthur O'Dwyer – 主要关于 C++
- en: 来源：[https://quuxplusone.github.io/blog/2022/01/06/memcached-interview/](https://quuxplusone.github.io/blog/2022/01/06/memcached-interview/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://quuxplusone.github.io/blog/2022/01/06/memcached-interview/](https://quuxplusone.github.io/blog/2022/01/06/memcached-interview/)
- en: It’s been a while since I was on the receiving end of a software engineering
    interview. But I still remember my favorite interview question. It was at MemSQL
    circa 2013. (They [haven’t even kept their name](https://www.singlestore.com/blog/revolution/),
    so I assume they’re not still relying on this specific interview question. I don’t
    feel bad for revealing it. It’s a great story that I tell people a lot; I’ve just
    never blogged it before.)
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我最后一次接受软件工程面试已经有些时间了。但我仍然记得我最喜欢的面试问题。那是在 2013 年左右的 MemSQL（他们[甚至换了名字](https://www.singlestore.com/blog/revolution/)，所以我认为他们不再依赖这个具体的面试问题。我并不觉得泄露这个问题会有什么不妥。这是一个我经常告诉人们的好故事；只是我以前从未在博客中提过它。）
- en: Okay, so this isn’t a “question” per se; it’s a programming challenge. I forget
    how much time they gave for it. Let’s say three hours, counting the time to explain
    the problem.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这不是一个明确的“问题”，而是一个编程挑战。我忘记了他们为此给了多少时间。假设是三小时，包括解释问题的时间。
- en: Since MemSQL was a database company, this is a database challenge.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 MemSQL 是一家数据库公司，这是一个数据库挑战。
- en: Introducing memcached
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 memcached
- en: You know about `memcached`? No? Well, it’s an in-memory key-value store. ([Read
    its About page here.](https://memcached.org/about)) Let’s download its code and
    build it so I can show you what it does.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道 `memcached` 吗？不知道？那好吧，它是一个内存中的键值存储。([在这里阅读它的关于页面。](https://memcached.org/about))
    让我们下载它的代码并构建它，这样我就可以向你展示它的功能。
- en: You may need to `brew install libevent` and maybe some other stuff in order
    to build memcached successfully. It won’t be too difficult to figure out; but
    anyway, wrangling with your environment wasn’t part of the test. You can assume
    interviewees were given access to a Linux box with all the right dependencies
    in place already.
  id: totrans-split-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为了成功构建 memcached，您可能需要 `brew install libevent` 以及可能的其他一些东西。弄清楚它不会太困难；但无论如何，与您的环境斗争并不是测试的一部分。您可以假设面试者已经获得了一个已经安装了所有正确依赖项的
    Linux 环境。
- en: 'For the authentic 2013 experience, let’s bypass the [GitHub repo](https://github.com/memcached/memcached)
    and untar a contemporary source distribution:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了体验 2013 年的真实感，让我们跳过 [GitHub 仓库](https://github.com/memcached/memcached) 并解压一个当代的源码分发：
- en: '[PRE0]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now we’ve built the `memcached` executable. Let’s start it running:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了 `memcached` 可执行文件。让我们启动它：
- en: We can talk to the server via the default memcached port, port 11211. Its protocol
    is basically plain text, so we can use plain old `telnet` to talk to it. (If you
    don’t have `telnet` anymore, substitute the words [`nc -c`](https://www.unixfu.ch/use-netcat-instead-of-telnet/)
    for `telnet`.)
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过默认的 memcached 端口，端口 11211，与服务器通信。它的协议基本上是纯文本，所以我们可以使用老旧的 `telnet` 来与它通信。（如果您没有
    `telnet` 了，请使用 [`nc -c`](https://www.unixfu.ch/use-netcat-instead-of-telnet/)
    替换 `telnet`。）
- en: '[PRE1]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Playing with memcached
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 玩转 memcached
- en: 'memcached is a key-value store. That means we can tell it to remember something
    (an association between a key and a value), and then later ask for that key again,
    and it’ll tell us the value it remembered. In memcached, keys are always ASCII
    strings and values are always arbitrary byte streams (which means you must specify
    their length manually). For example, type this into your telnet session:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: memcached 是一个键-值存储。这意味着我们可以告诉它记住某些东西（键和值之间的关联），然后稍后再问它那个键，它会告诉我们它记住的值。在 memcached
    中，键始终是 ASCII 字符串，值始终是任意的字节流（这意味着您必须手动指定它们的长度）。例如，将以下内容输入到您的 telnet 会话中：
- en: '[PRE2]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This tells memcached to remember an association between the string key `fullname`
    and the 10-byte value `John Smith`. The other numbers on that line are a “flags”
    value (`0`) to remember alongside the byte-stream value; and an expiry timeout
    (`3600`) measured in seconds, after which memcached will forget this association.
    Anyway, after you type these two lines, memcached will respond:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉 memcached 记住了字符串键 `fullname` 与 10 字节值 `John Smith` 之间的关联。该行上的其他数字是“标志”值（`0`），以及一个过期时间（`3600`），以秒计算，之后
    memcached 将会忘记这个关联。不管怎样，在你输入这两行之后，memcached 将会响应：
- en: 'Now you can retrieve the value of `fullname` by typing into the same telnet
    session:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以通过在同一个 telnet 会话中输入以下内容来检索 `fullname` 的值：
- en: 'memcached will respond:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: memcached 将会响应：
- en: '[PRE3]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can overwrite the value associated with `fullname` by issuing another `set
    fullname` command. You can also ask memcached to modify the value in certain ways;
    for example, there are special dedicated commands for `append` and `prepend`.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过发出另一个`set fullname`命令来覆盖与`fullname`关联的值。你也可以要求memcached以某些方式修改值；例如，有专用的命令用于`append`和`prepend`。
- en: '[PRE4]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Of course if you wanted to append `-Jones` to `fullname` from within a client
    program, you *could* do something like this:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你想要在客户端程序中向`fullname`追加`-Jones`，你*可以*这样做：
- en: '[PRE5]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: But the advantage of memcached’s dedicated `append` command is that it’s guaranteed
    to execute *atomically*. If you have multiple clients connected to the same memcached
    server, and they’re all trying to append to the same key at the same time, the
    `get/set` version might cause some of those updates to be lost, whereas with `append`
    you’re assured they’ll all be accounted for.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，memcached的专用`append`命令的优势在于它保证*原子性*。如果多个客户端连接到同一台memcached服务器，并且它们都试图同时向同一个键进行追加操作，`get/set`版本可能会导致某些更新丢失，而使用`append`命令则可以确保所有更新都会被记录。
- en: 'Another dedicated command that executes atomically is `incr`:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个执行原子操作的专用命令是`incr`：
- en: '[PRE6]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'memcached responds with the postincremented value:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: memcached以后增加的值做出响应：
- en: This response is useful because of the multiple clients thing. If you issued
    a separate `get age` command, you might see the new value only after several other
    clients had done their own updates. If you’re intending to use the value as a
    serial number, or a SQL primary key, or something like that, then it’s very good
    that there’s a way to see the incremented value *atomically*.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于存在多个客户端的情况，这种响应是有用的。如果你发出单独的`get age`命令，你可能只会在其他几个客户端进行它们自己的更新后才看到新值。如果你打算将该值用作序列号、SQL主键或类似的内容，那么能够*原子性*地查看增加的值是非常好的。
- en: 'memcached remembers the incremented value too, of course:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，memcached还记得增加后的值：
- en: '[PRE7]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Notice that `37` and `38` are still being stored and returned as byte-strings;
    they’re decoded from ASCII into integers and back as part of the atomic operation.
    If you try to `incr` a non-integer value, you get an error:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`37`和`38`仍然存储和返回为字节字符串；它们被从ASCII解码为整数，然后作为原子操作的一部分重新编码。如果尝试对非整数值进行`incr`操作，将会收到错误：
- en: '[PRE8]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, note that `incr` is a full-fledged addition operation: you can increment
    (or `decr`) by any positive value, not just by `1`.'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请注意，`incr`是一个完整的加法操作：你可以递增（或`decr`）任何正值，而不仅仅是`1`。
- en: '[PRE9]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: By the way, when you’re done talking to memcached and want to kill the connection,
    you can type the memcached command `quit`. (If you’re using `nc -c`, Ctrl+D also
    works. Or, just go to the terminal window where the `memcached` server is running
    and Ctrl+C to bring it down.)
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，当你与memcached交互结束并希望关闭连接时，你可以键入memcached命令`quit`。（如果你使用`nc -c`，Ctrl+D也可以。或者，直接进入运行memcached服务器的终端窗口并使用Ctrl+C来关闭。）
- en: 'The challenge: Modifying memcached'
  id: totrans-split-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挑战：修改memcached
- en: Via its `incr` and `decr` commands, memcached provides a built-in way to atomically
    add \(k\) to a number. But it doesn’t provide other arithmetic operations; in
    particular, there is no “atomic multiply by \(k\)” operation.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通过其`incr`和`decr`命令，memcached提供了一种内置方式来原子性地增加\(k\)到一个数字。但它并不提供其他算术操作；特别是，并没有“原子性乘以\(k\)”的操作。
- en: 'Your programming challenge: **Add a `mult` command to memcached.**'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你的编程挑战：**为memcached添加一个`mult`命令。**
- en: When you’re done, I should be able to telnet to your memcached client and run
    commands like
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成后，我应该能够telnet到你的memcached客户端并运行如下命令
- en: You have three hours. Go!
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你有三个小时的时间。开始吧！
- en: '* * *'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: For spoilers and analysis, see [“The best engineering interview question I’ve
    ever gotten, Part 2.”](/blog/2022/01/07/memcached-interview-solution/)
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多详细内容和分析，请参见[“我曾经遇到的最好的工程面试问题，第2部分。”](/blog/2022/01/07/memcached-interview-solution/)
