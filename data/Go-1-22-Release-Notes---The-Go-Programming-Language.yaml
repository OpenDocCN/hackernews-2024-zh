- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:41:22'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:41:22
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Go 1.22 Release Notes - The Go Programming Language
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 1.22 发行说明 - Go 编程语言
- en: 来源：[https://go.dev/doc/go1.22](https://go.dev/doc/go1.22)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://go.dev/doc/go1.22](https://go.dev/doc/go1.22)
- en: Go 1.22 Release Notes
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 1.22 发行说明
- en: Introduction to Go 1.22
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Go 1.22 简介
- en: The latest Go release, version 1.22, arrives six months after [Go 1.21](/doc/go1.21).
    Most of its changes are in the implementation of the toolchain, runtime, and libraries.
    As always, the release maintains the Go 1 [promise of compatibility](/doc/go1compat).
    We expect almost all Go programs to continue to compile and run as before.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最新的 Go 发行版，版本 1.22，在[Go 1.21](/doc/go1.21)之后六个月内发布。其大部分变化都在工具链、运行时和库的实现中。如往常一样，此版本保持了
    Go 1 的[兼容性承诺](/doc/go1compat)。我们预计几乎所有的 Go 程序都将继续像以前一样编译和运行。
- en: Changes to the language
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语言的变更
- en: Go 1.22 makes two changes to “for” loops.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: Go 1.22 对“for”循环进行了两个更改。
- en: Previously, the variables declared by a “for” loop were created once and updated
    by each iteration. In Go 1.22, each iteration of the loop creates new variables,
    to avoid accidental sharing bugs. The [transition support tooling](/wiki/LoopvarExperiment#my-test-fails-with-the-change-how-can-i-debug-it)
    described in the proposal continues to work in the same way it did in Go 1.21.
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Go 1.22 中，“for”循环声明的变量以前是在每次迭代时创建一次并更新。现在每次循环迭代都会创建新变量，以避免意外共享错误。提议中描述的[过渡支持工具](/wiki/LoopvarExperiment#my-test-fails-with-the-change-how-can-i-debug-it)在
    Go 1.21 中的工作方式保持不变。
- en: '“For” loops may now range over integers. For [example](/play/p/ky02zZxgk_r?v=gotip):'
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，“For”循环可以在整数上进行遍历。例如，[示例](/play/p/ky02zZxgk_r?v=gotip)：
- en: '[PRE0]'
  id: totrans-split-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: See the spec for [details](/ref/spec#For_range).
  id: totrans-split-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见[详情](/ref/spec#For_range)规范。
- en: 'Go 1.22 includes a preview of a language change we are considering for a future
    version of Go: [range-over-function iterators](/wiki/RangefuncExperiment). Building
    with `GOEXPERIMENT=rangefunc` enables this feature.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: Go 1.22 包含我们考虑在未来版本中引入的语言更改的预览：[range-over-function iterators](/wiki/RangefuncExperiment)。使用
    `GOEXPERIMENT=rangefunc` 可启用此功能。
- en: Go command
  id: totrans-split-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Go 命令
- en: Commands in [workspaces](/ref/mod#workspaces) can now use a `vendor` directory
    containing the dependencies of the workspace. The directory is created by [`go`
    `work` `vendor`](/pkg/cmd/go#hdr-Make_vendored_copy_of_dependencies), and used
    by build commands when the `-mod` flag is set to `vendor`, which is the default
    when a workspace `vendor` directory is present.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[工作区](/ref/mod#workspaces)中的命令现在可以使用包含工作区依赖项的 `vendor` 目录。该目录由 [`go` `work`
    `vendor`](/pkg/cmd/go#hdr-Make_vendored_copy_of_dependencies) 创建，并在设置 `-mod` 标志为
    `vendor` 时由构建命令使用，这是工作区存在 `vendor` 目录时的默认设置。'
- en: 'Note that the `vendor` directory’s contents for a workspace are different from
    those of a single module: if the directory at the root of a workspace also contains
    one of the modules in the workspace, its `vendor` directory can contain the dependencies
    of either the workspace or of the module, but not both.'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，工作区 `vendor` 目录的内容与单个模块的内容不同：如果工作区根目录也包含工作区中一个模块，则其 `vendor` 目录可以包含工作区或模块的依赖项，但不能同时包含两者。
- en: '`go` `get` is no longer supported outside of a module in the legacy `GOPATH`
    mode (that is, with `GO111MODULE=off`). Other build commands, such as `go` `build`
    and `go` `test`, will continue to work indefinitely for legacy `GOPATH` programs.'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`go` `get` 不再支持在传统的 `GOPATH` 模式之外使用模块。其他构建命令，如 `go` `build` 和 `go` `test`，将继续无限期地支持传统
    `GOPATH` 程序。'
- en: '`go` `mod` `init` no longer attempts to import module requirements from configuration
    files for other vendoring tools (such as `Gopkg.lock`).'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`go` `mod` `init` 不再尝试从其他供应工具（如 `Gopkg.lock`）的配置文件中导入模块要求。'
- en: '`go` `test` `-cover` now prints coverage summaries for covered packages that
    do not have their own test files. Prior to Go 1.22 a `go` `test` `-cover` run
    for such a package would report'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`go` `test` `-cover` 现在为没有自己的测试文件的覆盖包打印覆盖摘要。在 Go 1.22 之前，对这样的包运行 `go` `test`
    `-cover` 会报告'
- en: '`? mymod/mypack [no test files]`'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`? mymod/mypack [无测试文件]`'
- en: 'and now with Go 1.22, functions in the package are treated as uncovered:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Go 1.22 中包中的函数被视为未覆盖：
- en: '`mymod/mypack coverage: 0.0% of statements`'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`mymod/mypack 覆盖率：0.0% 的语句`'
- en: Note that if a package contains no executable code at all, we can’t report a
    meaningful coverage percentage; for such packages the `go` tool will continue
    to report that there are no test files.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果一个包根本没有可执行代码，我们无法报告有意义的覆盖百分比；对于这样的包，`go` 工具将继续报告没有测试文件。
- en: '`go` build commands that invoke the linker now error out if an external (C)
    linker will be used but cgo is not enabled. (The Go runtime requires cgo support
    to ensure that it is compatible with any additional libraries added by the C linker.)'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，调用链接器的 `go` 构建命令如果将使用外部（C）链接器但未启用 cgo，将会报错。（Go 运行时需要 cgo 支持以确保其与任何通过 C 链接器添加的附加库兼容。）
- en: Trace
  id: totrans-split-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跟踪
- en: The `trace` tool’s web UI has been gently refreshed as part of the work to support
    the new tracer, resolving several issues and improving the readability of various
    sub-pages. The web UI now supports exploring traces in a thread-oriented view.
    The trace viewer also now displays the full duration of all system calls.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`trace` 工具的 Web 用户界面在支持新跟踪器的工作中已经轻微刷新，解决了几个问题，并提高了各个子页面的可读性。Web 用户界面现在支持以线程导向视图探索跟踪。跟踪查看器还显示所有系统调用的完整持续时间。'
- en: These improvements only apply for viewing traces produced by programs built
    with Go 1.22 or newer. A future release will bring some of these improvements
    to traces produced by older version of Go.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些改进仅适用于使用 Go 1.22 或更新版本构建的程序生成的跟踪。未来的版本将把其中一些改进应用到使用旧版本 Go 生成的跟踪中。
- en: Vet
  id: totrans-split-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`vet` '
- en: References to loop variables
  id: totrans-split-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 循环变量的引用
- en: The behavior of the `vet` tool has changed to match the new semantics (see above)
    of loop variables in Go 1.22. When analyzing a file that requires Go 1.22 or newer
    (due to its go.mod file or a per-file build constraint), `vet` no longer reports
    references to loop variables from within a function literal that might outlive
    the iteration of the loop. In Go 1.22, loop variables are created anew for each
    iteration, so such references are no longer at risk of using a variable after
    it has been updated by the loop.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`vet` 工具的行为已更改，以匹配 Go 1.22 中循环变量的新语义（参见上文）。在分析需要 Go 1.22 或更新版本的文件（由其 go.mod
    文件或每个文件的构建约束决定）时，`vet` 不再报告来自函数文字的可能会超出循环迭代的循环变量引用。在 Go 1.22 中，循环变量每次迭代时都会重新创建，因此这样的引用不再有可能在更新循环变量后使用它们。'
- en: New warnings for missing values after append
  id: totrans-split-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 追加后缺少值的新警告
- en: The `vet` tool now reports calls to [`append`](/pkg/builtin/#append) that pass
    no values to be appended to the slice, such as `slice = append(slice)`. Such a
    statement has no effect, and experience has shown that is nearly always a mistake.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`vet` 工具现在会报告对 [`append`](/pkg/builtin/#append) 的调用，这些调用未传递要追加到切片的值，例如 `slice
    = append(slice)`。这种语句没有效果，经验表明这几乎总是一个错误。'
- en: New warnings for deferring `time.Since`
  id: totrans-split-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 延迟 `time.Since` 的新警告
- en: 'The vet tool now reports a non-deferred call to [`time.Since(t)`](/pkg/time/#Since)
    within a `defer` statement. This is equivalent to calling `time.Now().Sub(t)`
    before the `defer` statement, not when the deferred function is called. In nearly
    all cases, the correct code requires deferring the `time.Since` call. For example:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`vet` 工具现在会报告在 `defer` 语句中对 [`time.Since(t)`](/pkg/time/#Since) 的非延迟调用。这相当于在
    `defer` 语句之前调用 `time.Now().Sub(t)`，而不是在延迟函数被调用时。几乎所有情况下，正确的代码都需要延迟 `time.Since`
    的调用。例如：'
- en: '[PRE1]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: New warnings for mismatched key-value pairs in `log/slog` calls
  id: totrans-split-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在 `log/slog` 调用中的键值对不匹配时会有新的警告
- en: The vet tool now reports invalid arguments in calls to functions and methods
    in the structured logging package, [`log/slog`](/pkg/log/slog), that accept alternating
    key/value pairs. It reports calls where an argument in a key position is neither
    a `string` nor a `slog.Attr`, and where a final key is missing its value.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`vet` 工具现在会报告在结构化日志包 [`log/slog`](/pkg/log/slog) 中对函数和方法调用的无效参数，这些调用接受交替的键/值对。它会报告那些在键位置的参数既不是
    `string` 也不是 `slog.Attr`，以及缺少值的最后一个键的调用。'
- en: Runtime
  id: totrans-split-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时
- en: The runtime now keeps type-based garbage collection metadata nearer to each
    heap object, improving the CPU performance (latency or throughput) of Go programs
    by 1–3%. This change also reduces the memory overhead of the majority Go programs
    by approximately 1% by deduplicating redundant metadata. Some programs may see
    a smaller improvement because this change adjusts the size class boundaries of
    the memory allocator, so some objects may be moved up a size class.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行时将基于类型的垃圾收集元数据保持在每个堆对象附近，从而提高了 Go 程序的 CPU 性能（延迟或吞吐量）约 1-3%。这一变更还通过去重冗余元数据，将大多数
    Go 程序的内存开销减少约 1%。由于此变更调整了内存分配器的大小类边界，一些对象可能会被提升到更大的大小类，因此某些程序可能会看到较小的改进。
- en: A consequence of this change is that some objects’ addresses that were previously
    always aligned to a 16 byte (or higher) boundary will now only be aligned to an
    8 byte boundary. Some programs that use assembly instructions that require memory
    addresses to be more than 8-byte aligned and rely on the memory allocator’s previous
    alignment behavior may break, but we expect such programs to be rare. Such programs
    may be built with `GOEXPERIMENT=noallocheaders` to revert to the old metadata
    layout and restore the previous alignment behavior, but package owners should
    update their assembly code to avoid the alignment assumption, as this workaround
    will be removed in a future release.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种更改的结果是，一些对象的地址，以前始终对齐到 16 字节（或更高）边界，现在只会对齐到 8 字节边界。一些使用需要内存地址超过 8 字节对齐的汇编指令的程序，并依赖于内存分配器先前的对齐行为的程序可能会中断，但我们预计这样的程序很少。此类程序可以使用
    `GOEXPERIMENT=noallocheaders` 构建，以恢复旧的元数据布局并恢复先前的对齐行为，但包的所有者应更新其汇编代码以避免对齐假设，因为此解决方法将在将来的发布中删除。
- en: On the `windows/amd64 port`, programs linking or loading Go libraries built
    with `-buildmode=c-archive` or `-buildmode=c-shared` can now use the `SetUnhandledExceptionFilter`
    Win32 function to catch exceptions not handled by the Go runtime. Note that this
    was already supported on the `windows/386` port.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `windows/amd64 port` 上，使用 `-buildmode=c-archive` 或 `-buildmode=c-shared` 构建的
    Go 库的程序现在可以使用 `SetUnhandledExceptionFilter` Win32 函数来捕获 Go 运行时未处理的异常。请注意，这在 `windows/386`
    端口上已经支持。
- en: Compiler
  id: totrans-split-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译器
- en: '[Profile-guided Optimization (PGO)](/doc/pgo) builds can now devirtualize a
    higher proportion of calls than previously possible. Most programs from a representative
    set of Go programs now see between 2 and 14% improvement at runtime from enabling
    PGO.'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[Profile-guided Optimization (PGO)](/doc/pgo) 构建现在可以比以前更高比例地去虚拟化调用。来自一组代表性
    Go 程序的大多数程序现在在运行时启用 PGO 后看到了 2 到 14% 的性能提升。'
- en: The compiler now interleaves devirtualization and inlining, so interface method
    calls are better optimized.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器现在交错进行去虚拟化和内联，因此接口方法调用得到了更好的优化。
- en: 'Go 1.22 also includes a preview of an enhanced implementation of the compiler’s
    inlining phase that uses heuristics to boost inlinability at call sites deemed
    “important” (for example, in loops) and discourage inlining at call sites deemed
    “unimportant” (for example, on panic paths). Building with `GOEXPERIMENT=newinliner`
    enables the new call-site heuristics; see [issue #61502](/issue/61502) for more
    info and to provide feedback.'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 'Go 1.22 还包括对编译器内联阶段增强实现的预览，该实现使用启发式方法增强了在被视为“重要”的调用站点（例如在循环中）的内联性，并阻止了在被视为“不重要”的调用站点（例如在
    panic 路径上）的内联。使用 `GOEXPERIMENT=newinliner` 构建启用新的调用站点启发式方法；详见 [issue #61502](/issue/61502)
    获取更多信息并提供反馈。'
- en: Linker
  id: totrans-split-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接器
- en: The linker’s `-s` and `-w` flags are now behave more consistently across all
    platforms. The `-w` flag suppresses DWARF debug information generation. The `-s`
    flag suppresses symbol table generation. The `-s` flag also implies the `-w` flag,
    which can be negated with `-w=0`. That is, `-s` `-w=0` will generate a binary
    with DWARF debug information generation but without the symbol table.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 链接器的 `-s` 和 `-w` 标志现在在所有平台上的行为更加一致。`-w` 标志抑制 DWARF 调试信息的生成。`-s` 标志抑制符号表的生成。`-s`
    标志也意味着 `-w` 标志，可以通过 `-w=0` 来否定。也就是说，`-s` `-w=0` 将生成一个同时生成 DWARF 调试信息但不生成符号表的二进制文件。
- en: 'On ELF platforms, the `-B` linker flag now accepts a special form: with `-B`
    `gobuildid`, the linker will generate a GNU build ID (the ELF `NT_GNU_BUILD_ID`
    note) derived from the Go build ID.'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ELF 平台上，`-B` 链接器标志现在接受一种特殊形式：使用 `-B` `gobuildid`，链接器将生成一个从 Go 构建 ID 派生的 GNU
    构建 ID（ELF `NT_GNU_BUILD_ID` 注释）。
- en: On Windows, when building with `-linkmode=internal`, the linker now preserves
    SEH information from C object files by copying the `.pdata` and `.xdata` sections
    into the final binary. This helps with debugging and profiling binaries using
    native tools, such as WinDbg. Note that until now, C functions’ SEH exception
    handlers were not being honored, so this change may cause some programs to behave
    differently. `-linkmode=external` is not affected by this change, as external
    linkers already preserve SEH information.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，当使用 `-linkmode=internal` 构建时，链接器现在通过将 `.pdata` 和 `.xdata` 部分复制到最终二进制文件中来保留来自
    C 对象文件的 SEH 信息。这有助于使用本地工具（如 WinDbg）调试和分析二进制文件。请注意，直到现在，未能遵守 C 函数的 SEH 异常处理程序，因此此更改可能导致某些程序的行为不同。`-linkmode=external`
    不受此更改影响，因为外部链接器已经保留 SEH 信息。
- en: Bootstrap
  id: totrans-split-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bootstrap
- en: As mentioned in the [Go 1.20 release notes](/doc/go1.20#bootstrap), Go 1.22
    now requires the final point release of Go 1.20 or later for bootstrap. We expect
    that Go 1.24 will require the final point release of Go 1.22 or later for bootstrap.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [Go 1.20 发布说明](/doc/go1.20#bootstrap) 中所述，Go 1.22 现在要求使用 Go 1.20 或更高版本的最终点发行版进行引导。我们预计
    Go 1.24 将要求使用 Go 1.22 或更高版本的最终点发行版进行引导。
- en: Core library
  id: totrans-split-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 核心库
- en: New math/rand/v2 package
  id: totrans-split-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的 math/rand/v2 包
- en: 'Go 1.22 includes the first “v2” package in the standard library, [`math/rand/v2`](/pkg/math/rand/v2/).
    The changes compared to [`math/rand`](/pkg/math/rand/) are detailed in [proposal
    #61716](/issue/61716). The most important changes are:'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 'Go 1.22 中包含了标准库中的第一个“v2”包，[`math/rand/v2`](/pkg/math/rand/v2/)。与 [`math/rand`](/pkg/math/rand/)
    相比的变化在 [提案 #61716](/issue/61716) 中有详细说明。最重要的变化包括：'
- en: The `Read` method, deprecated in `math/rand`, was not carried forward for `math/rand/v2`.
    (It remains available in `math/rand`.) The vast majority of calls to `Read` should
    use [`crypto/rand`’s `Read`](/pkg/crypto/rand/#Read) instead. Otherwise a custom
    `Read` can be constructed using the `Uint64` method.
  id: totrans-split-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`math/rand` 中已弃用的 `Read` 方法未被 `math/rand/v2` 继续使用。（在 `math/rand` 中仍可用。）绝大多数对
    `Read` 的调用应改为使用 [`crypto/rand` 的 `Read`](/pkg/crypto/rand/#Read)。否则，可以使用 `Uint64`
    方法构造自定义的 `Read`。'
- en: The global generator accessed by top-level functions is unconditionally randomly
    seeded. Because the API guarantees no fixed sequence of results, optimizations
    like per-thread random generator states are now possible.
  id: totrans-split-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶级函数访问的全局生成器被无条件随机种子化。因为 API 保证不固定结果序列，所以现在可以进行像每个线程随机生成器状态这样的优化。
- en: The [`Source`](/pkg/math/rand/v2/#Source) interface now has a single `Uint64`
    method; there is no `Source64` interface.
  id: totrans-split-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Source`](/pkg/math/rand/v2/#Source) 接口现在只有一个 `Uint64` 方法；不再有 `Source64` 接口。'
- en: Many methods now use faster algorithms that were not possible to adopt in `math/rand`
    because they changed the output streams.
  id: totrans-split-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多方法现在使用更快的算法，这在 `math/rand` 中不可能采用，因为它们改变了输出流。
- en: 'The `Intn`, `Int31`, `Int31n`, `Int63`, and `Int64n` top-level functions and
    methods from `math/rand` are spelled more idiomatically in `math/rand/v2`: `IntN`,
    `Int32`, `Int32N`, `Int64`, and `Int64N`. There are also new top-level functions
    and methods `Uint32`, `Uint32N`, `Uint64`, `Uint64N`, and `UintN`.'
  id: totrans-split-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`math/rand` 中的 `Intn`、`Int31`、`Int31n`、`Int63` 和 `Int64n` 顶级函数和方法在 `math/rand/v2`
    中以更符合习惯的方式命名：`IntN`、`Int32`、`Int32N`、`Int64` 和 `Int64N`。还新增了顶级函数和方法 `Uint32`、`Uint32N`、`Uint64`、`Uint64N`
    和 `UintN`。'
- en: The new generic function [`N`](/pkg/math/rand/v2/#N) is like [`Int64N`](/pkg/math/rand/v2/#Int64N)
    or [`Uint64N`](/pkg/math/rand/v2/#Uint64N) but works for any integer type. For
    example a random duration from 0 up to 5 minutes is `rand.N(5*time.Minute)`.
  id: totrans-split-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的通用函数 [`N`](/pkg/math/rand/v2/#N) 类似于 [`Int64N`](/pkg/math/rand/v2/#Int64N)
    或 [`Uint64N`](/pkg/math/rand/v2/#Uint64N)，但适用于任何整数类型。例如，从 0 到 5 分钟的随机持续时间是 `rand.N(5*time.Minute)`。
- en: 'The Mitchell & Reeds LFSR generator provided by [`math/rand`’s `Source`](/pkg/math/rand/#Source)
    has been replaced by two more modern pseudo-random generator sources: [`ChaCha8`](/pkg/math/rand/v2/#ChaCha8)
    and [`PCG`](/pkg/math/rand/v2/#PCG). ChaCha8 is a new, cryptographically strong
    random number generator roughly similar to PCG in efficiency. ChaCha8 is the algorithm
    used for the top-level functions in `math/rand/v2`. As of Go 1.22, `math/rand`’s
    top-level functions (when not explicitly seeded) and the Go runtime also use ChaCha8
    for randomness.'
  id: totrans-split-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`math/rand` 的 `Source`](/pkg/math/rand/#Source) 提供的 Mitchell & Reeds LFSR
    生成器已被两个更现代的伪随机生成器源替代： [`ChaCha8`](/pkg/math/rand/v2/#ChaCha8) 和 [`PCG`](/pkg/math/rand/v2/#PCG)。ChaCha8
    是一个新的、密码学上强大的随机数生成器，在效率上与 PCG 类似。ChaCha8 是 `math/rand/v2` 中顶级函数使用的算法。自 Go 1.22
    起，`math/rand` 的顶级函数（未显式种子化时）和 Go 运行时也使用 ChaCha8 进行随机化。'
- en: We plan to include an API migration tool in a future release, likely Go 1.23.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计划在未来发布的 Go 1.23 中包含一个 API 迁移工具。
- en: New go/version package
  id: totrans-split-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的 go/version 包
- en: The new [`go/version`](/pkg/go/version/) package implements functions for validating
    and comparing Go version strings.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 [`go/version`](/pkg/go/version/) 包实现了用于验证和比较 Go 版本字符串的功能。
- en: Enhanced routing patterns
  id: totrans-split-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进的路由模式
- en: HTTP routing in the standard library is now more expressive. The patterns used
    by [`net/http.ServeMux`](/pkg/net/http#ServeMux) have been enhanced to accept
    methods and wildcards.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库中的 HTTP 路由现在更加表达丰富。 [`net/http.ServeMux`](/pkg/net/http#ServeMux) 使用的模式已经改进，可以接受方法和通配符。
- en: Registering a handler with a method, like `"POST /items/create"`, restricts
    invocations of the handler to requests with the given method. A pattern with a
    method takes precedence over a matching pattern without one. As a special case,
    registering a handler with `"GET"` also registers it with `"HEAD"`.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方法注册处理程序，如 `"POST /items/create"`，限制调用处理程序的请求必须使用给定方法。具有方法的模式优先于没有方法但匹配的模式。作为特例，使用
    `"GET"` 注册处理程序也同时注册为 `"HEAD"`。
- en: Wildcards in patterns, like `/items/{id}`, match segments of the URL path. The
    actual segment value may be accessed by calling the [`Request.PathValue`](/pkg/net/http#Request.PathValue)
    method. A wildcard ending in “…”, like `/files/{path...}`, must occur at the end
    of a pattern and matches all the remaining segments.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 模式中的通配符，如 `/items/{id}`，匹配 URL 路径的段。可以通过调用 [`Request.PathValue`](/pkg/net/http#Request.PathValue)
    方法访问实际段值。以“…”结尾的通配符，如 `/files/{path...}`，必须出现在模式的末尾，并匹配所有剩余的段。
- en: A pattern that ends in “/” matches all paths that have it as a prefix, as always.
    To match the exact pattern including the trailing slash, end it with `{$}`, as
    in `/exact/match/{$}`.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以“/”结尾的模式与其作为前缀的所有路径匹配，这是一贯的。要匹配包括尾部斜杠的确切模式，请以 `{$}` 结尾，例如 `/exact/match/{$}`。
- en: If two patterns overlap in the requests that they match, then the more specific
    pattern takes precedence. If neither is more specific, the patterns conflict.
    This rule generalizes the original precedence rules and maintains the property
    that the order in which patterns are registered does not matter.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个模式在它们匹配的请求中重叠，则更具体的模式优先。如果两者都不更具体，则模式冲突。此规则推广了原始的优先规则，并保持了模式注册顺序不重要的特性。
- en: This change breaks backwards compatibility in small ways, some obvious—patterns
    with “{” and “}” behave differently— and some less so—treatment of escaped paths
    has been improved. The change is controlled by a [`GODEBUG`](/doc/godebug) field
    named `httpmuxgo121`. Set `httpmuxgo121=1` to restore the old behavior.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改以小幅度方式破坏了向后兼容性，一些明显的方式是——带有“{”和“}”的模式行为不同——还有一些不太明显的方式是——已改进了转义路径的处理。这一更改由名为
    `httpmuxgo121` 的 [`GODEBUG`](/doc/godebug) 字段控制。设置 `httpmuxgo121=1` 可恢复旧行为。
- en: Minor changes to the library
  id: totrans-split-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 库中的轻微更改
- en: As always, there are various minor changes and updates to the library, made
    with the Go 1 [promise of compatibility](/doc/go1compat) in mind. There are also
    various performance improvements, not enumerated here.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，库中还有各种轻微更改和更新，这些更改是考虑到了 Go 1 [兼容性承诺](/doc/go1compat)。此外，还有各种未在此处列举的性能改进。
- en: '[archive/tar](/pkg/archive/tar/)'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[archive/tar](/pkg/archive/tar/)'
- en: The new method [`Writer.AddFS`](/pkg/archive/tar#Writer.AddFS) adds all of the
    files from an [`fs.FS`](/pkg/io/fs#FS) to the archive.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法 [`Writer.AddFS`](/pkg/archive/tar#Writer.AddFS) 将 [`fs.FS`](/pkg/io/fs#FS)
    中的所有文件添加到存档中。
- en: '[archive/zip](/pkg/archive/zip/)'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[archive/zip](/pkg/archive/zip/)'
- en: The new method [`Writer.AddFS`](/pkg/archive/zip#Writer.AddFS) adds all of the
    files from an [`fs.FS`](/pkg/io/fs#FS) to the archive.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法 [`Writer.AddFS`](/pkg/archive/zip#Writer.AddFS) 将 [`fs.FS`](/pkg/io/fs#FS)
    中的所有文件添加到存档中。
- en: '[bufio](/pkg/bufio/)'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[bufio](/pkg/bufio/)'
- en: When a [`SplitFunc`](/pkg/bufio#SplitFunc) returns [`ErrFinalToken`](/pkg/bufio#ErrFinalToken)
    with a `nil` token, [`Scanner`](/pkg/bufio#Scanner) will now stop immediately.
    Previously, it would report a final empty token before stopping, which was usually
    not desired. Callers that do want to report a final empty token can do so by returning
    `[]byte{}` rather than `nil`.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`SplitFunc`](/pkg/bufio#SplitFunc) 返回带有 `nil` 令牌的 [`ErrFinalToken`](/pkg/bufio#ErrFinalToken)
    时，[`Scanner`](/pkg/bufio#Scanner) 现在会立即停止。以前，它会在停止前报告一个最终的空令牌，这通常是不需要的。希望报告最终空令牌的调用者可以通过返回
    `[]byte{}` 而不是 `nil` 来实现。
- en: '[cmp](/pkg/cmp/)'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[cmp](/pkg/cmp/)'
- en: The new function `Or` returns the first in a sequence of values that is not
    the zero value.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 新函数 `Or` 返回不是零值的值序列中的第一个。
- en: '[crypto/tls](/pkg/crypto/tls/)'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[crypto/tls](/pkg/crypto/tls/)'
- en: '[`ConnectionState.ExportKeyingMaterial`](/pkg/crypto/tls#ConnectionState.ExportKeyingMaterial)
    will now return an error unless TLS 1.3 is in use, or the `extended_master_secret`
    extension is supported by both the server and client. `crypto/tls` has supported
    this extension since Go 1.20\. This can be disabled with the `tlsunsafeekm=1`
    GODEBUG setting.'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionState.ExportKeyingMaterial`](/pkg/crypto/tls#ConnectionState.ExportKeyingMaterial)
    现在只有在使用 TLS 1.3 或服务器和客户端均支持 `extended_master_secret` 扩展时才返回错误。自 Go 1.20 版起，`crypto/tls`
    就支持此扩展。可以通过设置 `tlsunsafeekm=1` 的 `GODEBUG` 设置来禁用此功能。'
- en: By default, the minimum version offered by `crypto/tls` servers is now TLS 1.2
    if not specified with [`config.MinimumVersion`](/pkg/crypto/tls#Config.MinimumVersion),
    matching the behavior of `crypto/tls` clients. This change can be reverted with
    the `tls10server=1` GODEBUG setting.
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果未通过[`config.MinimumVersion`](/pkg/crypto/tls#Config.MinimumVersion)指定，`crypto/tls`服务器现在提供的最低版本是TLS
    1.2，与`crypto/tls`客户端的行为一致。可以通过设置`GODEBUG`中的`tls10server=1`来恢复此行为。
- en: By default, cipher suites without ECDHE support are no longer offered by either
    clients or servers during pre-TLS 1.3 handshakes. This change can be reverted
    with the `tlsrsakex=1` GODEBUG setting.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在预TLS 1.3握手期间，客户端和服务器默认不再提供不支持ECDHE的密码套件。可以通过设置`GODEBUG`中的`tlsrsakex=1`来恢复此行为。
- en: '[crypto/x509](/pkg/crypto/x509/)'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[crypto/x509](/pkg/crypto/x509/)'
- en: The new [`CertPool.AddCertWithConstraint`](/pkg/crypto/x509#CertPool.AddCertWithConstraint)
    method can be used to add customized constraints to root certificates to be applied
    during chain building.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 新的[`CertPool.AddCertWithConstraint`](/pkg/crypto/x509#CertPool.AddCertWithConstraint)方法可以用于向根证书添加自定义约束，在链路建立期间应用这些约束。
- en: On Android, root certificates will now be loaded from `/data/misc/keychain/certs-added`
    as well as `/system/etc/security/cacerts`.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android上，根证书现在将从`/data/misc/keychain/certs-added`以及`/system/etc/security/cacerts`加载。
- en: A new type, [`OID`](/pkg/crypto/x509#OID), supports ASN.1 Object Identifiers
    with individual components larger than 31 bits. A new field which uses this type,
    [`Policies`](/pkg/crypto/x509#Certificate.Policies), is added to the `Certificate`
    struct, and is now populated during parsing. Any OIDs which cannot be represented
    using a [`asn1.ObjectIdentifier`](/pkg/encoding/asn1#ObjectIdentifier) will appear
    in `Policies`, but not in the old `PolicyIdentifiers` field. When calling [`CreateCertificate`](/pkg/crypto/x509#CreateCertificate),
    the `Policies` field is ignored, and policies are taken from the `PolicyIdentifiers`
    field. Using the `x509usepolicies=1` GODEBUG setting inverts this, populating
    certificate policies from the `Policies` field, and ignoring the `PolicyIdentifiers`
    field. We may change the default value of `x509usepolicies` in Go 1.23, making
    `Policies` the default field for marshaling.
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 新类型[`OID`](/pkg/crypto/x509#OID)支持具有大于31位的单独组件的ASN.1对象标识符。`Certificate`结构中新增了使用此类型的字段[`Policies`](/pkg/crypto/x509#Certificate.Policies)，在解析过程中现在会填充该字段。任何无法用[`asn1.ObjectIdentifier`](/pkg/encoding/asn1#ObjectIdentifier)表示的OID都将出现在`Policies`中，而不会出现在旧的`PolicyIdentifiers`字段中。调用[`CreateCertificate`](/pkg/crypto/x509#CreateCertificate)时，将忽略`Policies`字段，并从`PolicyIdentifiers`字段中获取策略。通过设置`GODEBUG`中的`x509usepolicies=1`可以反转此行为，从`Policies`字段中填充证书策略，并忽略`PolicyIdentifiers`字段。我们可能会在Go
    1.23中更改`x509usepolicies`的默认值，使`Policies`成为默认的编组字段。
- en: '[database/sql](/pkg/database/sql/)'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[database/sql](/pkg/database/sql/)'
- en: The new [`Null[T]`](/pkg/database/sql/#Null) type provide a way to scan nullable
    columns for any column types.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 新的[`Null[T]`](/pkg/database/sql/#Null)类型提供了一种方式来扫描可空列的任何列类型。
- en: '[debug/elf](/pkg/debug/elf/)'
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[debug/elf](/pkg/debug/elf/)'
- en: Constant `R_MIPS_PC32` is defined for use with MIPS64 systems.
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为MIPS64系统定义了常量`R_MIPS_PC32`。
- en: Additional `R_LARCH_*` constants are defined for use with LoongArch systems.
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 针对龙芯系统，额外定义了`R_LARCH_*`常量。
- en: '[encoding](/pkg/encoding/)'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[encoding](/pkg/encoding/)'
- en: The new methods `AppendEncode` and `AppendDecode` added to each of the `Encoding`
    types in the packages [`encoding/base32`](/pkg/encoding/base32), [`encoding/base64`](/pkg/encoding/base64),
    and [`encoding/hex`](/pkg/encoding/hex) simplify encoding and decoding from and
    to byte slices by taking care of byte slice buffer management.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`encoding/base32`](/pkg/encoding/base32)、[`encoding/base64`](/pkg/encoding/base64)和[`encoding/hex`](/pkg/encoding/hex)包中，新增了`AppendEncode`和`AppendDecode`方法，简化了对字节切片的编码和解码，同时处理了字节切片缓冲区管理。
- en: The methods [`base32.Encoding.WithPadding`](/pkg/encoding/base32#Encoding.WithPadding)
    and [`base64.Encoding.WithPadding`](/pkg/encoding/base64#Encoding.WithPadding)
    now panic if the `padding` argument is a negative value other than `NoPadding`.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，[`base32.Encoding.WithPadding`](/pkg/encoding/base32#Encoding.WithPadding)和[`base64.Encoding.WithPadding`](/pkg/encoding/base64#Encoding.WithPadding)方法如果`padding`参数为负值且不是`NoPadding`，将会抛出panic异常。
- en: '[encoding/json](/pkg/encoding/json/)'
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[encoding/json](/pkg/encoding/json/)'
- en: Marshaling and encoding functionality now escapes `'\b'` and `'\f'` characters
    as `\b` and `\f` instead of `\u0008` and `\u000c`.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，编组和编码功能将`'\b'`和`'\f'`字符转义为`\b`和`\f`，而不再转义为`\u0008`和`\u000c`。
- en: '[go/ast](/pkg/go/ast/)'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[go/ast](/pkg/go/ast/)'
- en: 'The following declarations related to [syntactic identifier resolution](https://pkg.go.dev/go/ast#Object)
    are now [deprecated](/issue/52463): `Ident.Obj`, `Object`, `Scope`, `File.Scope`,
    `File.Unresolved`, `Importer`, `Package`, `NewPackage`. In general, identifiers
    cannot be accurately resolved without type information. Consider, for example,
    the identifier `K` in `T{K: ""}`: it could be the name of a local variable if
    T is a map type, or the name of a field if T is a struct type. New programs should
    use the [go/types](/pkg/go/types) package to resolve identifiers; see [`Object`](https://pkg.go.dev/go/types#Object),
    [`Info.Uses`](https://pkg.go.dev/go/types#Info.Uses), and [`Info.Defs`](https://pkg.go.dev/go/types#Info.Defs)
    for details.'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: '与 [语法标识符解析](https://pkg.go.dev/go/ast#Object) 相关的以下声明现已被 [弃用](/issue/52463)：`Ident.Obj`、`Object`、`Scope`、`File.Scope`、`File.Unresolved`、`Importer`、`Package`、`NewPackage`。一般情况下，没有类型信息的情况下无法准确解析标识符。例如，在
    `T{K: ""}` 中的标识符 `K` 可能是地图类型 T 的局部变量名称，也可能是结构类型 T 的字段名称。新程序应使用 [go/types](/pkg/go/types)
    包来解析标识符；详见 [`Object`](https://pkg.go.dev/go/types#Object)、[`Info.Uses`](https://pkg.go.dev/go/types#Info.Uses)
    和 [`Info.Defs`](https://pkg.go.dev/go/types#Info.Defs)。'
- en: The new [`ast.Unparen`](https://pkg.go.dev/go/ast#Unparen) function removes
    any enclosing [parentheses](https://pkg.go.dev/go/ast#ParenExpr) from an [expression](https://pkg.go.dev/go/ast#Expr).
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 [`ast.Unparen`](https://pkg.go.dev/go/ast#Unparen) 函数从表达式中移除任何外围的 [括号](https://pkg.go.dev/go/ast#ParenExpr)。
- en: '[go/types](/pkg/go/types/)'
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[go/types](/pkg/go/types/)'
- en: The new [`Alias`](/pkg/go/types#Alias) type represents type aliases. Previously,
    type aliases were not represented explicitly, so a reference to a type alias was
    equivalent to spelling out the aliased type, and the name of the alias was lost.
    The new representation retains the intermediate `Alias`. This enables improved
    error reporting (the name of a type alias can be reported), and allows for better
    handling of cyclic type declarations involving type aliases. In a future release,
    `Alias` types will also carry [type parameter information](/issue/46477). The
    new function [`Unalias`](/pkg/go/types#Unalias) returns the actual type denoted
    by an `Alias` type (or any other [`Type`](/pkg/go/types#Type) for that matter).
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 [`Alias`](/pkg/go/types#Alias) 类型表示类型别名。以前，类型别名没有明确表示，因此对类型别名的引用相当于拼写出别名的类型，并且别名的名称丢失。新的表示保留了中间的
    `Alias`。这样做可以改善错误报告（可以报告类型别名的名称），并且允许更好地处理涉及类型别名的循环类型声明。在将来的发布版本中，`Alias` 类型还将携带
    [类型参数信息](/issue/46477)。新的函数 [`Unalias`](/pkg/go/types#Unalias) 返回由 `Alias` 类型（或任何其他
    [`Type`](/pkg/go/types#Type)）表示的实际类型。
- en: Because `Alias` types may break existing type switches that do not know to check
    for them, this functionality is controlled by a [`GODEBUG`](/doc/godebug) field
    named `gotypesalias`. With `gotypesalias=0`, everything behaves as before, and
    `Alias` types are never created. With `gotypesalias=1`, `Alias` types are created
    and clients must expect them. The default is `gotypesalias=0`. In a future release,
    the default will be changed to `gotypesalias=1`. *Clients of [`go/types`](/pkg/go/types)
    are urged to adjust their code as soon as possible to work with `gotypesalias=1`
    to eliminate problems early.*
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `Alias` 类型可能会破坏不知道如何检查它们的现有类型开关，此功能由名为 `GODEBUG` 的字段控制，名为 `gotypesalias`。当
    `gotypesalias=0` 时，所有行为与以前相同，并且永远不会创建 `Alias` 类型。当 `gotypesalias=1` 时，将创建 `Alias`
    类型，并且客户端必须预期它们。默认值为 `gotypesalias=0`。在将来的发布版本中，默认值将更改为 `gotypesalias=1`。*[`go/types`](/pkg/go/types)
    的客户端被敦促尽快调整他们的代码以适应 `gotypesalias=1`，以尽早消除问题。*
- en: The [`Info`](/pkg/go/types#Info) struct now exports the [`FileVersions`](/pkg/go/types#Info.FileVersions)
    map which provides per-file Go version information.
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，[`Info`](/pkg/go/types#Info) 结构导出了 [`FileVersions`](/pkg/go/types#Info.FileVersions)
    映射，提供每个文件的 Go 版本信息。
- en: The new helper method [`PkgNameOf`](/pkg/go/types#Info.PkgNameOf) returns the
    local package name for the given import declaration.
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: 新的辅助方法 [`PkgNameOf`](/pkg/go/types#Info.PkgNameOf) 返回给定导入声明的本地包名称。
- en: The implementation of [`SizesFor`](/pkg/go/types#SizesFor) has been adjusted
    to compute the same type sizes as the compiler when the compiler argument for
    `SizesFor` is `"gc"`. The default [`Sizes`](/pkg/go/types#Sizes) implementation
    used by the type checker is now `types.SizesFor("gc", "amd64")`.
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SizesFor`](/pkg/go/types#SizesFor) 的实现已经调整为在 `SizesFor` 的编译器参数为 `"gc"` 时计算与编译器相同的类型大小。类型检查器使用的默认
    [`Sizes`](/pkg/go/types#Sizes) 实现现在是 `types.SizesFor("gc", "amd64")`。'
- en: 'The start position ([`Pos`](/pkg/go/types#Scope.Pos)) of the lexical environment
    block ([`Scope`](/pkg/go/types#Scope)) that represents a function body has changed:
    it used to start at the opening curly brace of the function body, but now starts
    at the function’s `func` token.'
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: 表示函数体的词法环境块（[`Scope`](/pkg/go/types#Scope)）的起始位置（[`Pos`](/pkg/go/types#Scope.Pos)）已更改：它以前从函数体的左大括号开始，现在从函数的`func`标记开始。
- en: '[html/template](/pkg/html/template/)'
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[html/template](/pkg/html/template/)'
- en: JavaScript template literals may now contain Go template actions, and parsing
    a template containing one will no longer return `ErrJSTemplate`. Similarly the
    GODEBUG setting `jstmpllitinterp` no longer has any effect.
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript模板文字现在可以包含Go模板动作，并且解析包含此类动作的模板将不再返回`ErrJSTemplate`。同样，GODEBUG设置`jstmpllitinterp`不再起作用。
- en: '[io](/pkg/io/)'
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[io](/pkg/io/)'
- en: The new [`SectionReader.Outer`](/pkg/io#SectionReader.Outer) method returns
    the [`ReaderAt`](/pkg/io#ReaderAt), offset, and size passed to [`NewSectionReader`](/pkg/io#NewSectionReader).
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 新的[`SectionReader.Outer`](/pkg/io#SectionReader.Outer)方法返回[`NewSectionReader`](/pkg/io#NewSectionReader)传递的[`ReaderAt`](/pkg/io#ReaderAt)、偏移量和大小。
- en: '[log/slog](/pkg/log/slog/)'
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[log/slog](/pkg/log/slog/)'
- en: The new [`SetLogLoggerLevel`](/pkg/log/slog#SetLogLoggerLevel) function controls
    the level for the bridge between the `slog` and `log` packages. It sets the minimum
    level for calls to the top-level `slog` logging functions, and it sets the level
    for calls to `log.Logger` that go through `slog`.
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: 新的[`SetLogLoggerLevel`](/pkg/log/slog#SetLogLoggerLevel)函数控制`slog`和`log`包之间的桥接级别。它设置对顶级`slog`日志函数的调用的最小级别，并设置通过`slog`传递到`log.Logger`的调用的级别。
- en: '[math/big](/pkg/math/big/)'
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[math/big](/pkg/math/big/)'
- en: The new method [`Rat.FloatPrec`](/pkg/math/big#Rat.FloatPrec) computes the number
    of fractional decimal digits required to represent a rational number accurately
    as a floating-point number, and whether accurate decimal representation is possible
    in the first place.
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法[`Rat.FloatPrec`](/pkg/math/big#Rat.FloatPrec)计算将有理数准确表示为浮点数所需的小数位数，以及首先是否可能进行准确的十进制表示。
- en: '[net](/pkg/net/)'
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[net](/pkg/net/)'
- en: When [`io.Copy`](/pkg/io#Copy) copies from a `TCPConn` to a `UnixConn`, it will
    now use Linux’s `splice(2)` system call if possible, using the new method [`TCPConn.WriteTo`](/pkg/net#TCPConn.WriteTo).
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`io.Copy`](/pkg/io#Copy)从`TCPConn`复制到`UnixConn`时，如果可能，它现在将使用Linux的`splice(2)`系统调用，使用新方法[`TCPConn.WriteTo`](/pkg/net#TCPConn.WriteTo)。
- en: The Go DNS Resolver, used when building with “-tags=netgo”, now searches for
    a matching name in the Windows hosts file, located at `%SystemRoot%\System32\drivers\etc\hosts`,
    before making a DNS query.
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用“-tags=netgo”编译时，Go DNS解析器现在会在执行DNS查询之前，在Windows主机文件中搜索匹配的名称，该文件位于`%SystemRoot%\System32\drivers\etc\hosts`。
- en: '[net/http](/pkg/net/http/)'
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[net/http](/pkg/net/http/)'
- en: The new functions [`ServeFileFS`](/pkg/net/http#ServeFileFS), [`FileServerFS`](/pkg/net/http#FileServerFS),
    and [`NewFileTransportFS`](/pkg/net/http#NewFileTransportFS) are versions of the
    existing `ServeFile`, `FileServer`, and `NewFileTransport`, operating on an `fs.FS`.
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
  zh: 新函数[`ServeFileFS`](/pkg/net/http#ServeFileFS)、[`FileServerFS`](/pkg/net/http#FileServerFS)和[`NewFileTransportFS`](/pkg/net/http#NewFileTransportFS)是现有`ServeFile`、`FileServer`和`NewFileTransport`的版本，它们在`fs.FS`上操作。
- en: The HTTP server and client now reject requests and responses containing an invalid
    empty `Content-Length` header. The previous behavior may be restored by setting
    [`GODEBUG`](/doc/godebug) field `httplaxcontentlength=1`.
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP服务器和客户端现在拒绝包含无效空`Content-Length`头的请求和响应。可以通过设置[`GODEBUG`](/doc/godebug)字段`httplaxcontentlength=1`来恢复先前的行为。
- en: The new method [`Request.PathValue`](/pkg/net/http#Request.PathValue) returns
    path wildcard values from a request and the new method [`Request.SetPathValue`](/pkg/net/http#Request.SetPathValue)
    sets path wildcard values on a request.
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法[`Request.PathValue`](/pkg/net/http#Request.PathValue)从请求中返回路径通配符值，新方法[`Request.SetPathValue`](/pkg/net/http#Request.SetPathValue)在请求上设置路径通配符值。
- en: '[net/http/cgi](/pkg/net/http/cgi/)'
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[net/http/cgi](/pkg/net/http/cgi/)'
- en: When executing a CGI process, the `PATH_INFO` variable is now always set to
    the empty string or a value starting with a `/` character, as required by RFC
    3875\. It was previously possible for some combinations of [`Handler.Root`](/pkg/net/http/cgi#Handler.Root)
    and request URL to violate this requirement.
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行CGI进程时，`PATH_INFO`变量现在始终设置为空字符串或以`/`字符开头的值，如RFC 3875所需。以前，一些[`Handler.Root`](/pkg/net/http/cgi#Handler.Root)和请求URL的组合可能会违反此要求。
- en: '[net/netip](/pkg/net/netip/)'
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[net/netip](/pkg/net/netip/)'
- en: The new [`AddrPort.Compare`](/pkg/net/netip#AddrPort.Compare) method compares
    two `AddrPort`s.
  id: totrans-split-130
  prefs: []
  type: TYPE_NORMAL
  zh: 新的[`AddrPort.Compare`](/pkg/net/netip#AddrPort.Compare)方法比较两个`AddrPort`。
- en: '[os](/pkg/os/)'
  id: totrans-split-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[os](/pkg/os/)'
- en: On Windows, the [`Stat`](/pkg/os#Stat) function now follows all reparse points
    that link to another named entity in the system. It was previously only following
    `IO_REPARSE_TAG_SYMLINK` and `IO_REPARSE_TAG_MOUNT_POINT` reparse points.
  id: totrans-split-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，[`Stat`](/pkg/os#Stat) 函数现在遵循系统中连接到另一个命名实体的所有重解析点。以前只会跟随 `IO_REPARSE_TAG_SYMLINK`
    和 `IO_REPARSE_TAG_MOUNT_POINT` 重解析点。
- en: On Windows, passing [`O_SYNC`](/pkg/os#O_SYNC) to [`OpenFile`](/pkg/os#OpenFile)
    now causes write operations to go directly to disk, equivalent to `O_SYNC` on
    Unix platforms.
  id: totrans-split-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，将 [`O_SYNC`](/pkg/os#O_SYNC) 传递给 [`OpenFile`](/pkg/os#OpenFile)
    现在会导致写操作直接写入磁盘，相当于在 Unix 平台上的 `O_SYNC`。
- en: On Windows, the [`ReadDir`](/pkg/os#ReadDir), [`File.ReadDir`](/pkg/os#File.ReadDir),
    [`File.Readdir`](/pkg/os#File.Readdir), and [`File.Readdirnames`](/pkg/os#File.Readdirnames)
    functions now read directory entries in batches to reduce the number of system
    calls, improving performance up to 30%.
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，[`ReadDir`](/pkg/os#ReadDir)，[`File.ReadDir`](/pkg/os#File.ReadDir)，[`File.Readdir`](/pkg/os#File.Readdir)
    和 [`File.Readdirnames`](/pkg/os#File.Readdirnames) 函数现在批量读取目录条目以减少系统调用次数，提高性能达到
    30%。
- en: When [`io.Copy`](/pkg/io#Copy) copies from a `File` to a `net.UnixConn`, it
    will now use Linux’s `sendfile(2)` system call if possible, using the new method
    [`File.WriteTo`](/pkg/os#File.WriteTo).
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`io.Copy`](/pkg/io#Copy) 从 `File` 复制到 `net.UnixConn` 时，如果可能，现在将使用 Linux 的
    `sendfile(2)` 系统调用，使用新的方法 [`File.WriteTo`](/pkg/os#File.WriteTo)。
- en: '[os/exec](/pkg/os/exec/)'
  id: totrans-split-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[os/exec](/pkg/os/exec/)'
- en: On Windows, [`LookPath`](/pkg/os/exec#LookPath) now ignores empty entries in
    `%PATH%`, and returns `ErrNotFound` (instead of `ErrNotExist`) if no executable
    file extension is found to resolve an otherwise-unambiguous name.
  id: totrans-split-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，[`LookPath`](/pkg/os/exec#LookPath) 现在忽略 `%PATH%` 中的空条目，并且如果找不到可执行文件扩展名以解析一个非常明确的名称，则返回
    `ErrNotFound`（而不是 `ErrNotExist`）。
- en: On Windows, [`Command`](/pkg/os/exec#Command) and [`Cmd.Start`](/pkg/os/exec#Cmd.Start)
    no longer call `LookPath` if the path to the executable is already absolute and
    has an executable file extension. In addition, `Cmd.Start` no longer writes the
    resolved extension back to the [`Path`](/pkg/os/exec#Cmd.Path) field, so it is
    now safe to call the `String` method concurrently with a call to `Start`.
  id: totrans-split-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，如果可执行文件的路径已经是绝对路径并且具有可执行文件扩展名，则 [`Command`](/pkg/os/exec#Command)
    和 [`Cmd.Start`](/pkg/os/exec#Cmd.Start) 不再调用 `LookPath`。此外，`Cmd.Start` 不再将解析后的扩展名写回
    [`Path`](/pkg/os/exec#Cmd.Path) 字段，因此可以安全地同时调用 `Start` 方法和 `String` 方法。
- en: '[reflect](/pkg/reflect/)'
  id: totrans-split-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[reflect](/pkg/reflect/)'
- en: The [`Value.IsZero`](/pkg/reflect/#Value.IsZero) method will now return true
    for a floating-point or complex negative zero, and will return true for a struct
    value if a blank field (a field named `_`) somehow has a non-zero value. These
    changes make `IsZero` consistent with comparing a value to zero using the language
    `==` operator.
  id: totrans-split-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Value.IsZero`](/pkg/reflect/#Value.IsZero) 方法现在对于浮点数或复数的负零会返回 true，如果结构体的一个空白字段（即命名为
    `_` 的字段）某种方式具有非零值，也会返回 true。这些变更使得 `IsZero` 方法与使用语言 `==` 运算符比较值是否为零的行为保持一致。'
- en: The [`PtrTo`](/pkg/reflect/#PtrTo) function is deprecated, in favor of [`PointerTo`](/pkg/reflect/#PointerTo).
  id: totrans-split-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PtrTo`](/pkg/reflect/#PtrTo) 函数已废弃，推荐使用 [`PointerTo`](/pkg/reflect/#PointerTo)。'
- en: The new function [`TypeFor`](/pkg/reflect/#TypeFor) returns the [`Type`](/pkg/reflect/#Type)
    that represents the type argument T. Previously, to get the `reflect.Type` value
    for a type, one had to use `reflect.TypeOf((*T)(nil)).Elem()`. This may now be
    written as `reflect.TypeFor[T]()`.
  id: totrans-split-142
  prefs: []
  type: TYPE_NORMAL
  zh: 新的函数 [`TypeFor`](/pkg/reflect/#TypeFor) 返回表示类型参数 T 的 [`Type`](/pkg/reflect/#Type)。以前，要获取类型的
    `reflect.Type` 值，必须使用 `reflect.TypeOf((*T)(nil)).Elem()`。现在可以写成 `reflect.TypeFor[T]()`。
- en: '[runtime/metrics](/pkg/runtime/metrics/)'
  id: totrans-split-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[runtime/metrics](/pkg/runtime/metrics/)'
- en: Four new histogram metrics `/sched/pauses/stopping/gc:seconds`, `/sched/pauses/stopping/other:seconds`,
    `/sched/pauses/total/gc:seconds`, and `/sched/pauses/total/other:seconds` provide
    additional details about stop-the-world pauses. The “stopping” metrics report
    the time taken from deciding to stop the world until all goroutines are stopped.
    The “total” metrics report the time taken from deciding to stop the world until
    it is started again.
  id: totrans-split-144
  prefs: []
  type: TYPE_NORMAL
  zh: 四个新的直方图度量 `/sched/pauses/stopping/gc:seconds`，`/sched/pauses/stopping/other:seconds`，`/sched/pauses/total/gc:seconds`
    和 `/sched/pauses/total/other:seconds` 提供关于停止世界暂停的额外详细信息。"stopping" 度量报告从决定停止世界到所有
    goroutine 停止的时间。"total" 度量报告从决定停止世界到再次启动的时间。
- en: The `/gc/pauses:seconds` metric is deprecated, as it is equivalent to the new
    `/sched/pauses/total/gc:seconds` metric.
  id: totrans-split-145
  prefs: []
  type: TYPE_NORMAL
  zh: 度量 `/gc/pauses:seconds` 已废弃，因为它等效于新的 `/sched/pauses/total/gc:seconds` 度量。
- en: '`/sync/mutex/wait/total:seconds` now includes contention on runtime-internal
    locks in addition to [`sync.Mutex`](/pkg/sync#Mutex) and [`sync.RWMutex`](/pkg/sync#RWMutex).'
  id: totrans-split-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`/sync/mutex/wait/total:seconds` 现在包括对运行时内部锁的争用，除了 [`sync.Mutex`](/pkg/sync#Mutex)
    和 [`sync.RWMutex`](/pkg/sync#RWMutex)。'
- en: '[runtime/pprof](/pkg/runtime/pprof/)'
  id: totrans-split-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[runtime/pprof](/pkg/runtime/pprof/)'
- en: Mutex profiles now scale contention by the number of goroutines blocked on the
    mutex. This provides a more accurate representation of the degree to which a mutex
    is a bottleneck in a Go program. For instance, if 100 goroutines are blocked on
    a mutex for 10 milliseconds, a mutex profile will now record 1 second of delay
    instead of 10 milliseconds of delay.
  id: totrans-split-148
  prefs: []
  type: TYPE_NORMAL
  zh: 互斥锁性能分析现在根据在互斥锁上阻塞的 goroutine 数量来衡量争用程度。这提供了一个更准确的表示，在 Go 程序中互斥锁作为瓶颈的程度。例如，如果有
    100 个 goroutine 在互斥锁上阻塞了 10 毫秒，互斥锁性能分析现在将记录 1 秒的延迟，而不是 10 毫秒的延迟。
- en: Mutex profiles also now include contention on runtime-internal locks in addition
    to [`sync.Mutex`](/pkg/sync#Mutex) and [`sync.RWMutex`](/pkg/sync#RWMutex). Contention
    on runtime-internal locks is always reported at `runtime._LostContendedRuntimeLock`.
    A future release will add complete stack traces in these cases.
  id: totrans-split-149
  prefs: []
  type: TYPE_NORMAL
  zh: 互斥锁性能分析现在还包括对运行时内部锁的争用，除了 [`sync.Mutex`](/pkg/sync#Mutex) 和 [`sync.RWMutex`](/pkg/sync#RWMutex)。运行时内部锁的争用始终报告为
    `runtime._LostContendedRuntimeLock`。将来的版本将在这些情况下添加完整的堆栈跟踪。
- en: CPU profiles on Darwin platforms now contain the process’s memory map, enabling
    the disassembly view in the pprof tool.
  id: totrans-split-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Darwin 平台上的 CPU 性能分析现在包含进程的内存映射，这使得 pprof 工具中的反汇编视图得以启用。
- en: '[runtime/trace](/pkg/runtime/trace/)'
  id: totrans-split-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[runtime/trace](/pkg/runtime/trace/)'
- en: The execution tracer has been completely overhauled in this release, resolving
    several long-standing issues and paving the way for new use-cases for execution
    traces.
  id: totrans-split-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此版本中完全改写了执行追踪器，解决了几个长期存在的问题，并为执行追踪的新用例铺平了道路。
- en: Execution traces now use the operating system’s clock on most platforms (Windows
    excluded) so it is possible to correlate them with traces produced by lower-level
    components. Execution traces no longer depend on the reliability of the platform’s
    clock to produce a correct trace. Execution traces are now partitioned regularly
    on-the-fly and as a result may be processed in a streamable way. Execution traces
    now contain complete durations for all system calls. Execution traces now contain
    information about the operating system threads that goroutines executed on. The
    latency impact of starting and stopping execution traces has been dramatically
    reduced. Execution traces may now begin or end during the garbage collection mark
    phase.
  id: totrans-split-153
  prefs: []
  type: TYPE_NORMAL
  zh: 执行追踪现在在大多数平台上使用操作系统的时钟（Windows 除外），因此可以将其与低级组件生成的追踪进行关联。执行追踪不再依赖平台时钟的可靠性来生成正确的追踪。执行追踪现在会动态地进行分区，并因此可以以流的方式处理。执行追踪现在包含所有系统调用的完整持续时间。执行追踪现在包含有关
    goroutine 执行的操作系统线程信息。启动和停止执行追踪的延迟影响已经显著减少。执行追踪现在可以在垃圾收集标记阶段期间开始或结束。
- en: To allow Go developers to take advantage of these improvements, an experimental
    trace reading package is available at [golang.org/x/exp/trace](/pkg/golang.org/x/exp/trace).
    Note that this package only works on traces produced by programs built with Go
    1.22 at the moment. Please try out the package and provide feedback on [the corresponding
    proposal issue](/issue/62627).
  id: totrans-split-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 Go 开发者能够利用这些改进，一个实验性的追踪读取包已经在 [golang.org/x/exp/trace](/pkg/golang.org/x/exp/trace)
    上提供。请注意，目前这个包只能处理使用 Go 1.22 构建的程序生成的追踪数据。请尝试使用该包，并在 [对应的提议问题](/issue/62627) 上提供反馈。
- en: If you experience any issues with the new execution tracer implementation, you
    may switch back to the old implementation by building your Go program with `GOEXPERIMENT=noexectracer2`.
    If you do, please file an issue, otherwise this option will be removed in a future
    release.
  id: totrans-split-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在新的执行追踪器实现中遇到任何问题，您可以通过使用 `GOEXPERIMENT=noexectracer2` 编译您的 Go 程序来切换回旧的实现。如果您这样做，请提交一个问题报告，否则这个选项将在将来的版本中被移除。
- en: '[slices](/pkg/slices/)'
  id: totrans-split-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[切片](/pkg/slices/)'
- en: The new function `Concat` concatenates multiple slices.
  id: totrans-split-157
  prefs: []
  type: TYPE_NORMAL
  zh: 新函数 `Concat` 用于连接多个切片。
- en: Functions that shrink the size of a slice (`Delete`, `DeleteFunc`, `Compact`,
    `CompactFunc`, and `Replace`) now zero the elements between the new length and
    the old length.
  id: totrans-split-158
  prefs: []
  type: TYPE_NORMAL
  zh: 缩小切片大小的函数（`Delete`、`DeleteFunc`、`Compact`、`CompactFunc` 和 `Replace`）现在会将新长度和旧长度之间的元素置零。
- en: '`Insert` now always panics if the argument `i` is out of range. Previously
    it did not panic in this situation if there were no elements to be inserted.'
  id: totrans-split-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `Insert` 的参数 `i` 超出范围，现在会始终引发 panic。之前在这种情况下，如果没有要插入的元素，它不会引发 panic。
- en: '[syscall](/pkg/syscall/)'
  id: totrans-split-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[syscall](/pkg/syscall/)'
- en: The `syscall` package has been [frozen](/s/go1.4-syscall) since Go 1.4 and was
    marked as deprecated in Go 1.11, causing many editors to warn about any use of
    the package. However, some non-deprecated functionality requires use of the `syscall`
    package, such as the [`os/exec.Cmd.SysProcAttr`](/pkg/os/exec#Cmd) field. To avoid
    unnecessary complaints on such code, the `syscall` package is no longer marked
    as deprecated. The package remains frozen to most new functionality, and new code
    remains encouraged to use [`golang.org/x/sys/unix`](/pkg/golang.org/x/sys/unix)
    or [`golang.org/x/sys/windows`](/pkg/golang.org/x/sys/windows) where possible.
  id: totrans-split-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`syscall` 包自 Go 1.4 起已被冻结，并在 Go 1.11 中标记为废弃，导致许多编辑器对该包的任何使用发出警告。然而，一些非废弃功能需要使用
    `syscall` 包，例如[`os/exec.Cmd.SysProcAttr`](/pkg/os/exec#Cmd)字段。为了避免对这类代码的不必要投诉，`syscall`
    包不再标记为废弃。该包保持冻结状态，大部分新功能不再添加，新代码鼓励使用[`golang.org/x/sys/unix`](/pkg/golang.org/x/sys/unix)或[`golang.org/x/sys/windows`](/pkg/golang.org/x/sys/windows)。'
- en: On Linux, the new [`SysProcAttr.PidFD`](/pkg/syscall#SysProcAttr) field allows
    obtaining a PID FD when starting a child process via [`StartProcess`](/pkg/syscall#StartProcess)
    or [`os/exec`](/pkg/os/exec).
  id: totrans-split-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，新的[`SysProcAttr.PidFD`](/pkg/syscall#SysProcAttr)字段允许在通过[`StartProcess`](/pkg/syscall#StartProcess)或[`os/exec`](/pkg/os/exec)启动子进程时获取
    PID FD。
- en: On Windows, passing [`O_SYNC`](/pkg/syscall#O_SYNC) to [`Open`](/pkg/syscall#Open)
    now causes write operations to go directly to disk, equivalent to `O_SYNC` on
    Unix platforms.
  id: totrans-split-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，将[`O_SYNC`](/pkg/syscall#O_SYNC)传递给[`Open`](/pkg/syscall#Open)现在会导致写操作直接写入磁盘，相当于
    Unix 平台上的 `O_SYNC`。
- en: '[testing/slogtest](/pkg/testing/slogtest/)'
  id: totrans-split-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[testing/slogtest](/pkg/testing/slogtest/)'
- en: The new [`Run`](/pkg/testing/slogtest#Run) function uses sub-tests to run test
    cases, providing finer-grained control.
  id: totrans-split-165
  prefs: []
  type: TYPE_NORMAL
  zh: 新的[`Run`](/pkg/testing/slogtest#Run)函数使用子测试运行测试用例，提供更精细的控制。
- en: Ports
  id: totrans-split-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端口
- en: Darwin
  id: totrans-split-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Darwin
- en: On macOS on 64-bit x86 architecture (the `darwin/amd64` port), the Go toolchain
    now generates position-independent executables (PIE) by default. Non-PIE binaries
    can be generated by specifying the `-buildmode=exe` build flag. On 64-bit ARM-based
    macOS (the `darwin/arm64` port), the Go toolchain already generates PIE by default.
  id: totrans-split-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 的 64 位 x86 架构上（`darwin/amd64` 端口），Go 工具链现在默认生成位置无关可执行文件（PIE）。可以通过指定
    `-buildmode=exe` 构建标志生成非 PIE 二进制文件。在基于 64 位 ARM 的 macOS（`darwin/arm64` 端口），Go
    工具链已经默认生成 PIE。
- en: Go 1.22 is the last release that will run on macOS 10.15 Catalina. Go 1.23 will
    require macOS 11 Big Sur or later.
  id: totrans-split-169
  prefs: []
  type: TYPE_NORMAL
  zh: Go 1.22 是最后一个支持运行在 macOS 10.15 Catalina 上的版本。Go 1.23 将要求 macOS 11 Big Sur 或更高版本。
- en: Arm
  id: totrans-split-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Arm
- en: The `GOARM` environment variable now allows you to select whether to use software
    or hardware floating point. Previously, valid `GOARM` values were `5`, `6`, or
    `7`. Now those same values can be optionally followed by `,softfloat` or `,hardfloat`
    to select the floating-point implementation.
  id: totrans-split-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`GOARM` 环境变量现在允许选择使用软件或硬件浮点。以前，`GOARM` 的有效值为 `5`、`6` 或 `7`。现在可以在这些值后面选择 `,softfloat`
    或 `,hardfloat` 来选择浮点实现。'
- en: This new option defaults to `softfloat` for version `5` and `hardfloat` for
    versions `6` and `7`.
  id: totrans-split-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新选项在版本 `5` 默认为 `softfloat`，版本 `6` 和 `7` 默认为 `hardfloat`。
- en: Loong64
  id: totrans-split-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Loong64
- en: The `loong64` port now supports passing function arguments and results using
    registers.
  id: totrans-split-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`loong64` 端口现在支持使用寄存器传递函数参数和结果。'
- en: The `linux/loong64` port now supports the address sanitizer, memory sanitizer,
    new-style linker relocations, and the `plugin` build mode.
  id: totrans-split-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`linux/loong64` 端口现在支持地址检测器、内存检测器、新式链接器重定位和 `plugin` 构建模式。'
- en: OpenBSD
  id: totrans-split-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenBSD
- en: Go 1.22 adds an experimental port to OpenBSD on big-endian 64-bit PowerPC (`openbsd/ppc64`).
  id: totrans-split-177
  prefs: []
  type: TYPE_NORMAL
  zh: Go 1.22 在 OpenBSD 上添加了一个实验性端口，支持大端 64 位 PowerPC (`openbsd/ppc64`)。
