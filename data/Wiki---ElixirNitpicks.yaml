- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类： 未分类
- en: 'date: 2024-05-27 14:40:43'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月27日14:40:43
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Wiki - ElixirNitpicks
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wiki - ElixirNitpicks
- en: 来源：[https://wiki.alopex.li/ElixirNitpicks](https://wiki.alopex.li/ElixirNitpicks)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://wiki.alopex.li/ElixirNitpicks](https://wiki.alopex.li/ElixirNitpicks)
- en: So in mid 2023 I wrote a [small but nontrivial web app](https://linkrot.cc/)
    with Elixir, which also served as [an exercise in learning the language](ElixirForCynicalCurmudgeons).
    This is my list of gotchas and weirdnesses that I ran into with the language.
    This is primarily comparing vs. Rust since that’s what I consider my tool of choice
    these days, and this is all using Elixir 1.14.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在2023年中期，我使用 Elixir 写了一个[小而非平凡的 web 应用](https://linkrot.cc/)，这也是[学习这种语言的练习之一](ElixirForCynicalCurmudgeons)。这是我在使用这种语言时遇到的问题和怪异之处的列表。这主要是与
    Rust 进行比较，因为这是我目前考虑的首选工具，这一切都是使用 Elixir 1.14 来完成的。
- en: Last updated in April 2024.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最后更新于2024年4月。
- en: Error handling
  id: totrans-split-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '错误处理 '
- en: 'Elixir’s error handling is basically the combination of two different worlds:
    exception-style “raised” errors, and Rust-style returned tuples of `{:ok, val}`
    or `{:error, e}`. The problem is where these things intersect.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: Elixir 的错误处理基本上是两个不同世界的结合：异常风格的“raised”错误和 Rust 风格的返回的元组`{:ok，val}`或`{:error,
    e}`。问题就在于这些东西相互作用的地方。
- en: Most functions that can fail return the tuple `{:ok, val}` or `{:error, thing}`.
    Some things instead `raise` an exception when they fail, and most functions that
    return an error tuple have a a version that throws an error with the same function
    name plus a `!`. This is handy in interactive use so you don’t have to constantly
    pattern match to get the result from running a function, which gets tedious. So
    like, `DB.update` returns `{:ok, val}` or `{:error, e}`, and `DB.update!` return
    `val` or raises `e` as an exception. So far so good I guess. You can always write
    `try do thing!() rescue e -> {:error, e} end` to convert a raised error into a
    returned one, and you can always do `{:ok, val} = thing()` as a somewhat quick-and-dirty
    way to raise a pattern-match error if an error occurs.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数可能失败的函数返回的是元组 `{:ok，val}`或 `{:error，thing}`。一些东西在失败时会`raise`一个异常，大多数返回错误元组的函数都有一个与相同函数名称加上`!`的版本抛出一个错误。这在交互使用中非常方便，这样你就不必不停地模式匹配来获取运行函数的结果，这会变得很烦人。就像`DB.update`返回`{:ok，val}`或`{:error，e}`，`DB.update!`会返回`val`或抛出`e`的异常。到目前为止还可以吧。我想你总是可以写`try
    do thing!() rescue e -> {:error，e} end`将抛出的错误转换为返回的错误，你也可以像`{:ok，val} = thing()`这样相当快速和肮脏的方式来引发一个模式匹配错误如果发生了错误。
- en: 'The problem is sequencing and chaining these things, which Rust just has far
    better idioms for. Though Elixir’s `with` statement does a *pretty* decent job,
    it doesn’t nest well and causes issues with nesting other blocks inside it, like
    if expressions. But because Elixir has no early returns, you literally can’t write
    a macro like Rust’s `?` or `try!()` which is a single expression that bails early.
    (Exercise for the reader: prove me wrong.) There’s also the issue with using Elixir’s
    `with` function when you chain multiple steps together that all return error values,
    but their error values all look similar and you want to know which one actually
    failed in your error handling. [https://dev.to/martinthenth/using-elixirs-with-statement-5e36](https://dev.to/martinthenth/using-elixirs-with-statement-5e36)
    has a fairly clever solution in the section titled “Differentiating non-matching
    clauses”, where you have something like this:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于对这些事物进行排序和链接，而 Rust 恰好有更好的习语。虽然 Elixir 的 `with` 语句做得 *相当* 不错，但它不太适合嵌套，并且会导致在其中嵌套其他块（如`if`表达式）时出现问题。但由于
    Elixir 没有提前返回，你实际上无法像 Rust 的`?`或 `try!()`那样编写一个早期退出的单一表达式。（读者的练习：证明我错了。）当你将多个返回错误值的步骤链接在一起时，也存在使用
    Elixir 的 `with` 函数的问题，但是它们的错误值看起来很相似，你想知道到底哪一个在你的错误处理中实际上失败了。[https://dev.to/martinthenth/using-elixirs-with-statement-5e36](https://dev.to/martinthenth/using-elixirs-with-statement-5e36)
    在标题为“Differentiating non-matching clauses” 的部分中提供了一个相当巧妙的解决方案，其中你可以像这样处理：
- en: '[PRE0]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and handle it by instead writing something like this:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 并通过编写类似于这样的内容来处理：
- en: '[PRE1]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This turns calls two functions in series that each return a `bool` indicating
    success or error, and turns them into two different return types that you can
    distinguish in a pattern match. That’s honestly not terrible, but feels wonky
    and fragile. Not certain I’d consider it anywhere near as good as:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在系列中调用两个函数，每个函数返回一个`bool`表示成功或错误，并将它们转换为两种不同的返回类型，你可以在模式匹配中加以区分。老实说，这不是可怕的，但感觉很奇怪和脆弱。我不确定我是否会认为它能达到以下功能：
- en: '[PRE2]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It just feels like a lot of ceremony for something that should be common.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '这样做只是为了应该是常见的东西。 '
- en: Also a function might return `{:ok, thing}`, or if it has no value to return
    then it might just return `:ok`. You just have to know if you need to do `:ok
    = thing()` or `{:ok, _val} = thing()` ’cause if you do the wrong one it’s an error.
    So it’s a little tricky to make general-purpose error combinator code in Elixir
    because it has to check for both of these possibilities. And if you have to return
    `{:ok, thing1, thing2}`? Fuggedaboudit; no error combinator around will try too
    hard to deal with every possible tuple length. Just return `{:ok, {thing1, thing2}}`
    and move on with life, which makes more sense anyway when you think about it but
    also isn’t as obvious.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另外一个函数可能会返回 `{:ok, thing}`，或者如果它没有值可返回，则可能只会返回 `:ok`。你必须知道是否需要执行 `:ok = thing()`
    还是 `{:ok, _val} = thing()` 因为如果你选择错误的方式会导致错误。因此，在 Elixir 中编写通用错误组合代码有点棘手，因为它必须检查这两种可能性。如果一个函数必须返回
    `{:ok, thing1, thing2}` 怎么办？算了吧，没有错误组合器会试图处理每一个可能的元组长度。只需返回 `{:ok, {thing1, thing2}}`
    并继续生活，这在思考时更有意义，但也不是那么明显。
- en: Another error nitpick I’ve found, “Let it fail” doesn’t work when validating
    user input where you need to present a good error message back to the user. Sometimes
    the validation can’t happen at the edge too, so you have some deep call-chains
    of code that have to explicitly handle errors, and some other adjacent deep call-chains
    that are fine just logging something and dying.. (Hmmm, it would be much easier
    if validation did always happen at the edge, that may be part of my problem…)
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个错误微妙之处是，“让它失败”在需要向用户呈现良好错误消息时不适用于验证用户输入。有时候验证也不能发生在边缘，因此你必须明确处理代码的深度调用链中的错误，以及一些其他相邻的深度调用链，它们只是记录一些东西然后终止。(嗯，如果验证总是发生在边缘，那可能是我的问题的一部分...)
- en: State management
  id: totrans-split-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态管理
- en: Just about any global state change in an Elixir program can and will be hidden
    behind a function call. There’s no way to really express that this is the case,
    unlike Rust where you almost always have to pass `&mut something` into functions.
    For a purely immutable functional language, Elixir programs sure have *lots* of
    global mutable state in them, too.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Elixir 程序中几乎任何全局状态变化都可以并且将被隐藏在一个函数调用之后。没有真正的方法来表达这一点，不像 Rust 中你几乎总是要把 `&mut
    something` 传递给函数。对于一个纯不可变的函数式语言来说，Elixir 程序中确实有 *很多* 全局可变状态。
- en: 'The common idiom in general is to hide your mutable state in a process, and
    then instead of sending messages directly to it you write wrapper functions to
    do it for you. A great example is a database connection. In Rust you tend to have
    something like this:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一般的常见习语是将你的可变状态隐藏在一个进程中，然后不是直接向它发送消息，而是编写包装函数来为你完成。一个很好的例子是数据库连接。在 Rust 中，你往往会有像这样的东西：
- en: '[PRE3]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In Elixir you have:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Elixir 中，你有：
- en: '[PRE4]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There’s a global process registry, you can attach arbitrary names to them, and
    libraries use this a *lot*. So even if you personally don’t write it, you end
    up with a *ton* of global mutable state. It’s very weird and a little unsettling.
    Sure the state is all encapsulated into processes, but then those processes are
    hidden behind an abstraction layer that makes them invisible, so really you’re
    just touching global variables.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个全局进程注册表，你可以给它们附加任意名称，并且库经常使用这个 *很多* 。因此，即使你个人不写它，你最终也会有 *大量* 的全局可变状态。这非常奇怪并且有点令人不安。确实，状态都封装在进程中，但这些进程又隐藏在一个使它们不可见的抽象层后面，所以实际上你只是在触及全局变量。
- en: Imports
  id: totrans-split-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入
- en: 'There’s just too many heckin’ ways to import a module. You can:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 太多了，有各种各样的方式可以导入一个模块。你可以：
- en: Not import it, and refer to its contents through fully-qualified names, `Foo.Util.frobnosticate()`
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要导入它，并通过完全限定的名称引用其内容，`Foo.Util.frobnosticate()`
- en: '`import` it, which stuffs all its symbols into the local namespace. So doing
    `import Foo` lets you call `Util.frobnosticate()`, while `import Foo.Util` lets
    you call `frobnosticate()`'
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import` 它，将其所有符号都装入本地命名空间。因此 `import Foo` 允许你调用 `Util.frobnosticate()`，而 `import
    Foo.Util` 允许你调用 `frobnosticate()`'
- en: '`alias` it, which lets you rename some module path to some other, presumably
    shorter, module path. So doing `alias Foo.Util, as: U` lets you call `U.frobnosticate()`.'
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alias` 它，让你将某个模块路径重命名为另一个，可能更短的模块路径。因此，`alias Foo.Util, as: U` 允许你调用 `U.frobnosticate()`'
- en: '`require` it, which lets you call macros in it, which can’t normally be called.
    So you can’t normally call `Foo.Util.frob_macro()` until after you do `require
    Foo.Util`, after which you can call it as `Foo.Util.frob_macro()`. Though apparently
    if you do `import Foo.Util` you also can call `frob_macro()` directly, so there’s
    overlapping behavior there that I apparently don’t fully understand.'
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require` 让你能够调用它里面的宏，通常情况下不能调用。所以在执行 `require Foo.Util` 之前，你不能直接调用 `Foo.Util.frob_macro()`，之后可以用
    `Foo.Util.frob_macro()` 调用。尽管显然如果你使用 `import Foo.Util` 也可以直接调用 `frob_macro()`，因此在这里存在重叠行为，我显然没有完全理解。'
- en: '`use` it, which which calls a callback in it which may be a macro that generates
    code. So if you do `use Foo.Util` it is the equivalent of calling `require Foo.Util;
    Foo.Util.__using__()` and splicing whatever code it returns into the current module.'
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use` 会调用它里面的回调，可能是生成代码的宏。所以如果你写了 `use Foo.Util`，相当于调用了 `require Foo.Util;
    Foo.Util.__using__()`，并将其返回的代码插入当前模块。'
- en: 'Contrast Rust, which makes `use` do all these things:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Rust 相比，它使 `use` 执行所有这些操作：
- en: No imports result in no imports, and like Elixir you can refer to a thing through
    fully-qualified names.
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有导入会导致没有导入，就像 Elixir 一样，你可以通过完全限定的名称引用一个东西。
- en: '`import Foo` is done with `use foo;`'
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import Foo` 使用 `use foo;` 完成。'
- en: '`import Foo.Util` is done with `use foo::util::*;`'
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import Foo.Util` 使用 `use foo::util::*;` 完成。'
- en: '`alias Foo.Util, as: U` is done with `use foo::util as u;`'
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alias Foo.Util, as: U` 使用 `use foo::util as u;` 完成。'
- en: 'The more common `alias Foo.Util, as: Util` is just `use foo::util;`'
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '更常见的 `alias Foo.Util, as: Util` 等同于 `use foo::util;`'
- en: '`require Foo.Util` doesn’t need to exist because since Rust 2018??? or so,
    macro namespaces are treated basically the same as function namespaces with regards
    to imports. Rust visually distinguishes its macros with a trailing `!` so there’s
    no risk of calling something and having it sneakily turn out to be a macro that
    does something unexpected.'
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require Foo.Util` 自 2018 年以来，宏命名空间与函数命名空间在导入方面基本上被一视同仁。Rust 用感叹号结尾视觉上区分宏，因此没有调用意外执行宏的风险。'
- en: '`use Foo.Util` is the only one that no real equivalent; the closest thing you
    have is a procedural macro… which is treated the same way by the language as any
    other macro.'
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use Foo.Util` 是唯一没有真正等价的方式；最接近的可能就是过程宏…… 在语言中和其他宏一样对待。'
- en: '`use` is weird enough that it’s pretty easy to distinguish from the others,
    but the exact differences between `import`, `alias` and `require` are a *constant*
    headache to try to remember. You could just have one thing do all of these:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`use` 足够奇怪，很容易与其他不同，但是 `import`、`alias` 和 `require` 之间的确切区别是一个持续的头痛。你可以让一件事情做所有这些：'
- en: '`import Foo` -> you can call `Util.whatever()`'
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import Foo` -> 可以调用 `Util.whatever()`'
- en: '`import Foo.Util` -> you can call `whatever()`'
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import Foo.Util` -> 可以调用 `whatever()`'
- en: '`import Foo.Util, as: U` -> you can call `U.whatever()`'
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import Foo.Util, as: U` -> 可以调用 `U.whatever()`'
- en: '`import Foo.Util, macros: true` -> you can call `whatever_macro()` (can combine
    with `all:` or `as:` keywords).'
  id: totrans-split-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import Foo.Util, macros: true` -> 可以调用 `whatever_macro()`（可以与 `all:` 或 `as:`
    关键字结合使用）。'
- en: Leave `use` the way it is, it’s an odd enough special case it deserves to be
    different.
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让 `use` 保持原样，它是一个足够奇特的特例，值得有所不同。
- en: I tried to write a macro to implement something like this, but I’m not actually
    interested enough in the problem to spend too much time on it. Plus, to actually
    make this macro exist, you have to start each module with `require CoolMacro`!
    Argh! The requirement for `require` is honestly pretty difficult to paper over
    without changing how the language works, I think.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我尝试编写一个宏来实现类似的东西，但其实我对这个问题并不太感兴趣，所以没有花太多时间在上面。而且，要使这个宏存在，你必须在每个模块开始时写上 `require
    CoolMacro`！ 烦人！要求 `require` 实际上相当难以掩盖，除非改变语言的工作方式，我认为。
- en: I considered suggesting making some explicit macro import unnecessary, which
    I still think is a good idea, but Elixir is way more macro-heavy than Rust so
    there’s probably good reasons for it being the way it is. Still, Elixir macros
    are fairly… leaky, which gets pretty frustrating. `Integer.is_odd()` is a macro,
    for example, so if you try to call it directly the compiler will helpfully inform
    you to call `require Integer` first. I appreciate that, but generally if the compiler
    is smart enough to tell you the exact solution to your problem, it should be smart
    enough to just do it for you. Why do they make `is_odd()` a macro in the first
    place, you might ask? Because that way it can be used in match guards, which functions
    cannot be since match guards are a limited subset of the language that does not
    have side-effects. That all makes sense, but is surprising as *hell*. We’re in
    a four-deep chain of non-obvious causes and effects involving the dangers of arbitrary
    code generation, when what you *really* want is either a way to write pure functions
    that can be used as pattern guards, or a way to visually distinguish functions
    from macros a la Rust’s sigils so that it’s more obvious what is going on.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾考虑建议去掉一些显式宏导入的必要性，我仍认为这是个好主意，但Elixir的宏比Rust更加重，所以可能有很好的理由保持现状。尽管如此，Elixir的宏相当……泄漏，这让人非常沮丧。例如，`Integer.is_odd()`就是一个宏，因此如果直接调用它，编译器会友好地提醒你首先调用`require
    Integer`。我欣赏这一点，但通常如果编译器足够聪明以告诉你问题的确切解决方案，它应该足够聪明以直接为你做出调整。你可能会问，为什么他们首先将`is_odd()`设为宏？因为这样它可以用作匹配守卫，而函数不能，因为匹配守卫是语言的有限子集，没有副作用。这一切都说得通，但*太惊人了*。我们陷入了一个四层深的非明显因果链中，涉及到任意代码生成的危险，而你*真正*想要的是要么有一种方法编写可以用作模式守卫的纯函数，要么一种方式以视觉上区分函数和宏，如Rust的符号，以便更容易看出发生了什么。
- en: Mixed messages
  id: totrans-split-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合信息
- en: 'The common lore I’ve seen disbursed to newbies in the Elixir Discord chat includes:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我在Elixir Discord聊天中向新手分发的常见传说包括：
- en: Don’t use umbrella projects if you can avoid it
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可以避免，不要使用Umbrella项目
- en: Don’t use live upgrade of code if you can avoid it – ie prefer to upgrade by
    restarting nodes, rather than hot-reloading new code while migrating state
  id: totrans-split-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可以避免，不要使用代码的实时升级 - 例如，更喜欢通过重新启动节点来升级，而不是在迁移状态时热重载新代码
- en: Don’t use macros if you can avoid it
  id: totrans-split-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可以避免，不要使用宏
- en: The Mnesia database is more of a Redis replacement than a PostgreSQL replacement.
    This is more about Erlang’s messaging thing than Elixir’s, since Mnesia is distributed
    with the Erlang runtime, but still relevant. I’ve also heard of Mnesia being used
    as a control-plane/config database rather than a user-data DB, which it is also
    probably pretty good at.
  id: totrans-split-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mnesia数据库更像是Redis的替代品，而不是PostgreSQL的替代品。这更多关于Erlang的消息传递而不是Elixir的，因为Mnesia与Erlang运行时分布式相关，但仍然相关。我也听说过Mnesia被用作控制平面/配置数据库，而不是用户数据数据库，它在这方面可能也非常擅长。
- en: It would be nice if the Elixir tutorials or FAQ included more of this wisdom,
    instead of listing them as neat features that it should tell you all about. LOTS
    of people seem to run `mix help new`, see the single line saying `An --umbrella
    option can be given to generate an umbrella project`, and go down the rabbit-hole
    there figuring out how umbrella projects work instead of doing something useful.
    Even heckin’ *describing* what an umbrella project is and saying “most projects
    except for the largest don’t need this” would help.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Elixir教程或FAQ包含更多这样的智慧，而不是列出它们应该告诉你的漂亮特性，那将是很好的。看起来有很多人运行`mix help new`，看到单行提示“可以使用--umbrella选项生成Umbrella项目”，然后陷入兔子洞，了解Umbrella项目是如何工作的，而不是做点有用的事情。甚至**描述**什么是Umbrella项目并说“除了最大的项目外，大多数项目都不需要这样做”会有所帮助。
- en: Unit tests are more of a pain
  id: totrans-split-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试更让人头疼
- en: …though I really have a hard time expressing why.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: …尽管我真的很难表达为什么。
- en: Domain Specific Languages
  id: totrans-split-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 领域特定语言
- en: This is more of a problem with libraries than with the core language itself,
    but those core libraries (Phoenix, Plug, Ecto, etc) tend to be the first things
    you encounter and you use them a lot. Then other programs people write tend to
    follow the idioms that those core libraries teach. Basically those libs have lots
    of new syntax that they build out of macros, which suffers the same problems as
    macro DSL’s *always* suffer, which is poorly defined semantics.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这更多是与库而不是核心语言本身的问题，但这些核心库（如 Phoenix、Plug、Ecto 等）往往是你首先遇到并且经常使用的东西。然后其他人写的程序
    tend to follow 这些核心库教授的习惯用法。基本上，这些库有很多新语法，它们是由宏构建的，这些语法总是遇到宏 DSL *总是* 遇到的问题，即定义不清晰的语义。
- en: 'For example, using Phoenix I have a slightly weird issue with a component that
    has a couple private subcomponents implemented as functions… Basically I have:'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用 Phoenix 时，我有一个稍微奇怪的问题，一个组件作为函数实现了几个私有子组件... 基本上我有：
- en: '[PRE5]'
  id: totrans-split-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'and everything works fine, but I get warnings for the navitem function:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都正常工作，但我对 navitem 函数收到警告：
- en: '[PRE6]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: But I don’t get those for the rnavitem function, and everything actually renders
    properly, so I’m confused about where those are coming from. Turns out the `attr`
    macro applies to the function right after it, not the module it’s in. On the one
    hand this makes sense ’cause it’s the same as Elixir’s normal type annotations,
    but Elixir’s docs also tend to treat the “component” as the module as a whole,
    not specific functions inside that module. It’s documented, so to some extent
    my fault for not reading the docs, but it’s also non-obvious to me at the time
    since Phoenix has lots of other macro DSL’s that *do* just slot into the module
    enclosing them and treat things magically, like `plug`, `pipeline` and `embed_templates`.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但我不明白为什么在 rnavitem 函数中没有这些，而且一切都能正确渲染，所以我困惑于这些到底是从哪里来的。结果 `attr` 宏适用于紧接其后的函数，而不是其所在的模块。从某种角度讲这是有道理的，因为这与
    Elixir 的普通类型注解一样，但 Elixir 的文档也倾向于将“组件”视为整个模块，而不是该模块内的特定函数。文档中有说明，所以在某种程度上是我没有仔细阅读文档的错，但对我来说当时也不是显而易见，因为
    Phoenix 有很多其他像 `plug`、`pipeline` 和 `embed_templates` 这样的宏 DSL，它们只是简单地插入到封闭它们的模块中并像魔法一样处理事物。
- en: '“Let’s just create a declarative DSL out of macros to make life easier, what
    could go wrong?” It’s not actually declarative and involves implicit assumptions
    about how the code is structured, that’s what. You COULD write the code like this:'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: “让我们只需将宏创建为声明性 DSL 以使生活更轻松，会出什么问题？” 它实际上并不是声明性的，并涉及对代码结构的隐含假设，这就是问题所在。你可以像这样编写代码：
- en: '[PRE7]'
  id: totrans-split-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And it would be *just fine*. And also make clear that `attr` is associated with
    the function, not the module. I’ve yet to see any use of `attr` that can’t be
    instead done by normal Dialyzer `@spec` decls either, though it’s possible there
    are some out there. Maybe the default values? idk, the whole `assigns` system
    is kinda overly-magical in my opinion anyway. Assigns are there for good reasons
    but I have issues trying to juggle Elixir, HEEx templates, and the various DSL
    fragments associated with them all at once.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 而且它将是 *完全没问题*。并且还清楚地表明 `attr` 与函数关联，而不是模块。我还没有看到任何使用 `attr` 的情况，它不能通过正常的 Dialyzer
    `@spec` 声明来替代，尽管可能存在一些例外情况。也许是默认值？我不知道，总体来说，整个 `assigns` 系统在我看来有点过于神奇。Assigns
    有其存在的理由，但是我试图同时处理 Elixir、HEEx 模板和与它们相关的各种 DSL 片段时会遇到问题。
- en: Misc
  id: totrans-split-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Misc
- en: Ecto, the de-facto standard database query builder, needs more love. It’s not
    bad by any stretch of the imagination, but a lot of the rough edges I encountered
    with docs and API design were in Ecto compared to other projects. `Repo.one` returns
    `value | nil` while `Repo.insert` returns `{:ok, value} | {:error, changeset}`,
    the `Repo.transaction` function [could really use some honestly quite basic improvements](https://tomkonidas.com/repo-transact/),
    I’m really still not sure of the best way to do joins, keeping your migrations
    and schemas in sync is kinda painful with two separate DSL’s in their own config
    files, stuff like that. However, all of these are also pretty superficial problems.
    Operationally, Ecto has been fast, flexible, generates good queries, and as far
    as I can tell with my limited database experience tends to guide you towards good
    design patterns. Its query DSL is one of the few times that learning the DSL has
    been totally worth it and has been a very useful and low-leakage abstraction.
  id: totrans-split-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ecto，事实上的标准数据库查询构建器，需要更多的关注。它并不差到令人无法想象的地步，但与其他项目相比，我在文档和 API 设计中遇到的许多粗糙之处都是在
    Ecto 中。`Repo.one` 返回 `value | nil`，而 `Repo.insert` 返回 `{:ok, value} | {:error,
    changeset}`，`Repo.transaction` 函数 [真的需要一些相当基本的改进](https://tomkonidas.com/repo-transact/)，我仍然不确定做连接的最佳方法是什么，在两个单独的配置文件中保持迁移和模式同步有点痛苦，等等。然而，所有这些问题也都是相当表面的问题。在操作上，Ecto
    表现迅速、灵活，生成良好的查询，并且据我有限的数据库经验看来，倾向于引导您朝着良好的设计模式前进。它的查询 DSL 是我学习 DSL 完全值得且非常有用且低泄漏的抽象的少数几次之一。
- en: Hot code reloading is a little squirrelly at times. Sometimes you’ll save a
    file and it will get hot-code-reloaded instantly automatically, other times it
    will take a few seconds, some errors will be fixed when the system automatically
    reloads the file and some won’t. It’s a bit of a nuisance. Monitoring files for
    changes in general is harder than it looks, but I do wish it was better.
  id: totrans-split-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热代码重新加载有时候有点讨厌。有时候你保存文件后，它会立即自动进行热代码重新加载，而其他时候可能需要几秒钟。有些错误会在系统自动重新加载文件时修复，而有些则不会。这有点讨厌。总体上，监视文件变化比看起来要困难得多，但我真希望它能更好一些。
- en: Erlang/Elixir’s vaunted reliability only kind of involves the language itself.
    Most of the time I don’t feel like it’s particularly easier or harder to write
    robust, fault-tolerant code in Elixir or Erlang than any other immutable-first
    functional language like OCaml or Clojure (which is probably its closest cousin,
    being dynamically typed). Errors happen, and they make things fail in ugly ways,
    and sometimes you really wish you just had Rust’s `Result` type and `?` operator.
    What BEAM/OTP gives you is tools to *deal with* the errors when they happen, and
    the ecosystem uses those things pervasively. For a while I’ve had the hunch that
    `systemd` and Unix process trees are really just a weaksauce and poorly-implemented
    version of OTP’s supervisor trees, and now that I’ve used it for real a little
    that has proven to be spot on. So far anyway.
  id: totrans-split-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Erlang/Elixir 声称的可靠性基本上只涉及语言本身。大多数时候，我觉得在 Elixir 或 Erlang 中编写健壮、容错的代码并不比其他以不可变优先的函数式语言如
    OCaml 或 Clojure 更容易或更难（它可能是它们最接近的近亲，因为它是动态类型的）。错误会发生，并以丑陋的方式导致失败，有时候你真的希望有 Rust
    的 `Result` 类型和 `?` 运算符。BEAM/OTP 给你的是工具，用来在错误发生时*处理*它们，而生态系统广泛使用这些东西。我有一段时间以来的直觉是，`systemd`
    和 Unix 进程树实际上只是 OTP 的监督树的一种弱化和实现不良的版本，现在我真正使用了一段时间后，这一直是正确的。至少目前是这样。
- en: There’s a cultural split between Erlang and Elixir that makes life harder than
    it needs to be. It really doesn’t need to be there, and on a technical level the
    languages interoperate so well through BEAM that the split *isn’t* there. For
    example lots of things are missing from Elixir libs because Erlang libs have them,
    and calling Erlang code from Elixir (or vice versa) takes essentially zero effort.
    But Elixir has the `mix` build tool and Erlang has `rebar3`, cross-building packages
    so you can include both langs in the same project isn’t as painless as it should
    be, you can’t really invoke the Elixir compiler from Erlang last I checked, etc.
    Anecdotally, when Elixir started off there was some bad blood between them and
    the Erlang community, which is the origin of this schism. But nobody seems to
    hold any grudges anymore and the languages and communities seem to cohabitate
    well. It’s just annoying having two different, mostly-incompatible build tools
    when they proceed to build 100% compatible artifacts.
  id: totrans-split-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Erlang 和 Elixir 之间存在一种文化分裂，这比必要的生活更加艰难。实际上，在技术上，这两种语言通过 BEAM 互操作得非常好，所以这种分裂*不存在*。例如，由于
    Erlang 库存在许多功能，Elixir 库中缺少这些功能，从 Elixir 调用 Erlang 代码（反之亦然）几乎不费吹灰之力。但是，Elixir 有
    `mix` 构建工具，Erlang 有 `rebar3`，在同一项目中包含两种语言的交叉构建并不像应该那样毫不费力，据我所知，你不能真正从 Erlang 调用
    Elixir 编译器，等等。据说，当 Elixir 刚开始时，它们与 Erlang 社区之间存在一些嫌隙，这是这种裂痕的根源。但似乎没有人再抱怨，两种语言和社区似乎相处得很好。只是在构建100%兼容的工件时，拥有两种不同且大部分不兼容的构建工具真的很烦人。
- en: For some weird reason the Elixir Discord community has a distinct lack of programmer-socks-wearing
    queer furries, at least compared to Rust, or even most other tech-y Discord servers
    I’ve seen. It caused some weird cognitive dissonance. Why do I feel vaguely strange
    hanging out online with all these kind, knowledgeable, friendly and compassionate
    techbro’s? Then I see a name I recognized from elsewhere and my hindbrain goes
    “oh thank gods, I know for a fact she’s actually a snow leopard in her free time”.
    Okay, this nitpick is **firmly** tongue-in-cheek, but the Rust user-base continues
    to be a fascinating case study in how many weirdos you can get together in one
    place when you *very explicitly* say it’s ok to be a weirdo. This isn’t a complaint;
    nice techbro’s need their place too, but it’s an interesting contrast. In the
    last Rustbelt Rust I went to pre-COVID, the most common answer to “what other
    languages are you interested in” was “Elixir”, by far, so I feel like Elixir heavily
    overlaps with Rust in time and cognitive-space, so it’s a weird cultural split.
    Nobody I’ve met in the Elixir community is even remotely unfriendly or exclusive,
    but the vibe is distinctly more corporate-professional, so I guess we weirdos
    aren’t nearly as comfortable letting the masks down. Maybe it’s because Elixir
    targets itself more towards fairly mainstream web-tech, while most other things
    I’m interested in (programming languages, graphics, robotics, gamedev) are rather
    more niche?
  id: totrans-split-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于某种奇怪的原因，Elixir Discord 社区中缺少穿程序员袜子的酷儿毛茸茸动物，至少与 Rust 或其他大多数我见过的技术 Discord 服务器相比如此。这引起了一些奇怪的认知
    dissonance。为什么我在网上与所有这些善良、知识渊博、友好和富有同情心的技术兄弟姐妹一起时感到有些奇怪呢？然后我看到一个我在别处认识的名字，我的大脑后部说“哦，感谢众神，我确实知道她在空闲时间是一只雪豹”。好吧，这只是一个**明确**的开玩笑，但
    Rust 用户群体继续是一个有趣的案例研究，展示了当你*非常明确地*说可以做怪人时，你可以在一个地方聚集多少怪人。这并不是抱怨；友好的技术兄弟姐妹也需要他们的位置，但这是一个有趣的对比。在
    COVID 前我参加过的最后一次 Rustbelt Rust 活动中，“你对其他语言有兴趣吗”的最常见答案是“Elixir”，远远超过其他语言，因此我觉得
    Elixir 在时间和认知空间上与 Rust 有很大的重叠，所以这是一个奇怪的文化分裂。我在 Elixir 社区遇到的任何人都没有一点不友好或排外的感觉，但氛围明显更具企业专业性，所以我想我们怪人并不像让面具下来那么舒服。也许这是因为
    Elixir 更多地面向相当主流的 web 技术，而我对其他大多数我感兴趣的事物（编程语言、图形、机器人技术、游戏开发）则更为小众？
- en: Positive notes
  id: totrans-split-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正面的笔记
- en: 'Things that surprised me in good ways:'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以积极方式让我感到惊讶的事情：
- en: So, Elixir is dynamically typed everywhere. There’s a program called Dialyzer
    that will check optional type annotations for you, but sometimes it feels a little
    like a second-class citizen, at least compared to the amount of work that gets
    put into Rust’s type system and error messages. But somewhat to my surprise, in
    practice it ends up working *really well*. Dialyzer will catch lots of type errors
    for you if you let it, and almost all the libraries I’ve used have complete and
    correct type annotations for everything. Dialyzer isn’t foolproof, and if given
    incomplete information can fail in fairly mysterious ways, but on the whole it’s
    very much worth using from day one. (Erlang/Elixir+Dialyzer is a fascinating point
    of reference to contrast with other gradually-typed languages like Typescript
    or Python, I could go on about it far too long.)
  id: totrans-split-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所以，Elixir 在任何地方都是动态类型的。有一个叫做 Dialyzer 的程序会为你检查可选的类型注解，但有时它感觉有点像是一个二等公民，至少与 Rust
    的类型系统和错误消息相比。但有点令我惊讶的是，实际上它表现得*非常好*。如果你允许它，Dialyzer 会帮你捕捉很多类型错误，我使用过的几乎所有库都对所有内容有完整正确的类型注解。Dialyzer
    并非百分之百可靠，如果给出不完整的信息，它可能会以相当神秘的方式失败，但总体而言，从第一天开始使用它是非常值得的。（Erlang/Elixir+Dialyzer
    是一个非常有趣的参照点，与像 TypeScript 或 Python 这样的逐渐类型化语言形成鲜明对比，我可以长篇大论。）
- en: Similarly, Elixir is very much dynamically *bound*. If I understand correctly,
    most function calls are semantically treated as call-by-symbol-name, same as running
    `apply(Modulename, :function_name, [args])`. Then the compiler inlines and optimizes
    it down to more direct calls if the names are always known at compile-time. This
    results in some things that feel very weird to a Rustacean, like calls to functions
    or modules that don’t exist being a compiler *warning* rather than an error. In
    fact the Elixir compiler almost *never* gives you an outright error, basically
    it only fails if a file can’t be parsed. This feels spooky as hell… but its warnings
    are basically always correct and seldom miss anything, so in reality you just
    treat Elixir’s warnings the way you’d treat `rustc`’s errors and everything is
    fine.
  id: totrans-split-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样地，Elixir 在很大程度上是动态*绑定*的。如果我理解正确，大多数函数调用在语义上被视为按符号名称调用，与运行 `apply(Modulename,
    :function_name, [args])` 相同。然后编译器会在编译时优化并将其内联为更直接的调用，如果名称在编译时始终已知。这导致了一些对 Rust
    程序员来说感觉非常奇怪的事情，比如对不存在的函数或模块的调用只是编译器的*警告*而不是错误。事实上，Elixir 编译器几乎*从不*直接给出错误，基本上只有在无法解析文件时才会失败。这感觉像是一种灵异的感觉……但它的警告基本上总是正确的，很少会漏掉任何东西，所以实际上你只需像对待
    `rustc` 的错误一样对待 Elixir 的警告，一切都会很好。
- en: When talking about reliable code and system-building in Elixir/Erlang, the first
    thing any doc starts telling you about is supervision trees. But lots of the time,
    you mostly don’t need to touch them. Every library that starts a long-running
    process has its own supervision tree, and Phoenix starts your app in its own supervision
    tree, and there’s one hook you write to connect them together. Almost no configuration
    or tweaking is actually needed, you just let them do their thing, and let it stay
    that way is until you scale up enough that you really need to start growing your
    own sub-tree of processes for parallelism or error-isolation. With Phoenix at
    least, your program can get pretty big before you actually need to consider splitting
    it apart into different processes, because a lot of that is already done.
  id: totrans-split-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当谈到在 Elixir/Erlang 中编写可靠的代码和构建系统时，任何文档首先都会告诉你的是监督树。但很多时候，你大部分时间都不需要去碰它们。每个启动长期运行进程的库都有自己的监督树，Phoenix
    会在自己的监督树中启动你的应用程序，并有一个钩子让你编写来连接它们。实际上几乎不需要任何配置或调整，你只需让它们做它们要做的事情，直到你扩展到足够大，真正需要开始增加自己的子进程树以进行并行处理或错误隔离。至少在使用
    Phoenix 时，你的程序在实际上变得相当庞大之前是不需要考虑将其拆分成不同的进程的，因为很多工作已经完成了。
- en: Conclusions
  id: totrans-split-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Elixir is pretty darn cool. You should use it.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: Elixir 相当酷炫。你应该使用它。
- en: Phoenix scourges my soul a little bit but its heart is in the right place, and
    it works well in practice. It just suffers from Web-Framework-Itis where it tries
    to make simple things too simple and ends up making complicated things too complicated.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: Phoenix 在某种程度上让我有点心烦，但它的初衷是好的，并且在实践中运行良好。它只是遭遇了 Web 框架病，试图使简单的事情过于简单，结果使复杂的事情变得过于复杂。
- en: Ecto is an extremely nice query-builder that makes lots of the PITA parts of
    SQL actually less painful without introducing more sharp edges. I do wish migrations
    were just generated from schemas though, a la Django.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: Ecto是一个非常好用的查询构建器，实际上使得SQL中许多痛点变得不那么痛苦，而且不会引入更多的尖锐边缘。不过，我确实希望迁移只是从模式中生成，就像Django那样。
- en: There’s lots of other great tools in the ecosystem; Oban, Mix, Telemetry/Logger,
    and most of the Erlang stdlib are all on the “10/10, would use again” list. Lots
    of the more niche ones are a little short of polish but do the basics very well.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 生态系统中还有很多其他优秀的工具；Oban、Mix、Telemetry/Logger，以及大部分的Erlang标准库都在“10/10，会再次使用”的清单上。许多更为专业的工具虽然功能基本完备，但细节处理可能稍显粗糙。
- en: Lots of other tools are a bit short of the “first-class” level of polish; Image/Vix,
    ExAws, and other more minor things are entirely usable but don’t get their entire
    API surface banged on as much or as hard, so if you’re getting started in an unfamiliar
    space or doing something odd they can take a little more wrestling than maybe
    they should to do what you want them to.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他工具在“一流”抛光级别上稍显不足；Image/Vix、ExAws和其他更小的工具都完全可用，但它们的API表面可能没有被充分或者强烈地测试过，因此，如果你在一个不熟悉的领域开始或者做一些奇怪的事情，它们可能需要比应有的更多的摩擦才能达到你想要的效果。
- en: I avoided Phoenix LiveView with a passion, but I probably shouldn’t; it seems
    like a very interesting take on a lot of the same same principles that go into
    [HTMX](https://htmx.org/). It just triggers my buzzword-avoidance and Shiny Webtech
    Phobia real damn good. Maybe someday I’ll write “liveview for cynical curmudgeons”.
    Not sure that’s a brand I should especially pursue though…
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常激烈地避开了Phoenix LiveView，但或许我不应该这样；它似乎是对[HTMX](https://htmx.org/)采用了很多相同原理的一个非常有趣的尝试。它只是让我对时髦的技术术语和闪光的Web技术充满了畏惧。也许有一天我会写一篇“供愤世嫉俗者使用的LiveView”。虽然我不确定这是我特别想追求的品牌……
- en: I need to write a video game using Elixir. Someday!
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要用Elixir写一个视频游戏。总有一天！
- en: References
  id: totrans-split-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: Minor things and conversations that follow similar trends.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一些次要的事情和类似的对话。
