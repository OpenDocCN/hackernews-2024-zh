- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:59:43'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:59:43'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Creating a Snake Game Clone with Rust/Bevy | Brad Barrows' Blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Rust/Bevy 创建蛇游戏克隆 | Brad Barrows' Blog
- en: 来源：[https://bbarrows.com/posts/bevy-snake](https://bbarrows.com/posts/bevy-snake)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://bbarrows.com/posts/bevy-snake](https://bbarrows.com/posts/bevy-snake)
- en: Rust Practice with Bevy
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rust 实践与 Bevy
- en: Bevy has an amazing dependency injection system that makes its "ECS" (Entity
    Component System) architecture very easy and ituitive to use. Really the DI system
    is one of the most amazing Rust feats that I have seen so far.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Bevy 拥有一个了不起的依赖注入系统，使其“ECS”（实体组件系统）架构非常易于使用和直观。实际上，DI 系统是迄今为止我见过的最令人惊奇的 Rust
    功绩之一。
- en: Someone has taken the time to document how to create your own [Bevy based DI
    system here which is a great read](https://promethia-27.github.io/dependency_injection_like_bevy_from_scratch/chapter1/system.html)
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有人花时间记录了如何在[这里基于 Bevy 创建你自己的 DI 系统，这是一篇很棒的阅读](https://promethia-27.github.io/dependency_injection_like_bevy_from_scratch/chapter1/system.html)
- en: There is also an unofficial Bevy book that is really helpful [here](https://bevy-cheatbook.github.io/programming/intro-data.html)
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 也有一本非官方的Bevy书籍对我来说真的很有帮助[这里](https://bevy-cheatbook.github.io/programming/intro-data.html)
- en: Bevy and ECS
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bevy 和 ECS
- en: ECS is documented [here](https://bevyengine.org/learn/quick-start/getting-started/ecs/)
    It describes some of the basic concepts of how the Bevy game engine works. Combined
    with a powerful dependency injection (DI) system, Bevy is powerful, easy to work
    with, and fun to use.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: ECS 在[这里有文档](https://bevyengine.org/learn/quick-start/getting-started/ecs/)它描述了
    Bevy 游戏引擎的一些基本概念。结合强大的依赖注入（DI）系统，Bevy 强大、易于使用且有趣。
- en: 'For my snake game I only needed the concept of three entities really: the snake,
    the food, and the snake''s body.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我的蛇游戏，我实际上只需要三种实体的概念：蛇、食物和蛇的身体。
- en: This is done by the C part of ECS. I create a Component for each. This allows
    me to, later on, using the DI/query system executed on each game loop, to find
    all the entities of a certain type and do something with them.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这由 ECS 的 C 部分完成。我为每个创建了一个组件。这使我能够稍后使用 DI/query 系统在每个游戏循环中执行，查找某一类型的所有实体并对其进行操作。
- en: On setup, I create the snake and the food using a spawn command. It takes a
    tuple where I can provide multiple Components that make up whatever entity I am
    creating.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置期间，我使用 spawn 命令创建蛇和食物。它接受一个元组，我可以在其中提供构成我要创建的任何实体的多个组件。
- en: Each of the described objects above have a visual aspect for example, so each
    have a 2D mesh (which includes a transform/translation aka location).
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上述描述的每个对象都有一个视觉方面的例子，因此每个对象都有一个 2D 网格（其中包括一个变换/转换，即位置）。
- en: 'Here is where I create the SnakeHead for example:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这里是我创建 SnakeHead 的地方：
- en: '[PRE0]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The most amazing part of Bevy though that I have found so far is its "query"/DI
    system. With types and traits, I can query for all the entities of a certain type
    and do something with them each step of the game loop.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我发现 Bevy 最惊人的部分是它的“查询”/DI 系统。通过类型和特性，我可以查询特定类型的所有实体，并在游戏循环的每个步骤中对它们执行操作。
- en: 'This is the function signature I have for checking for collisions for ex:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我用于检查碰撞的函数签名的例子：
- en: '[PRE1]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This function signature can be however long.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数签名可以有多长。
- en: The DI system will provide me with whatever objects I need. Commands, meshes,
    materials, etc.. As well as decipher a simple to work with type system to provide
    me with all the entities that match a specific query.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: DI 系统将为我提供所需的所有对象。命令、网格、材料等。以及解密一个易于使用的类型系统，以提供符合特定查询的所有实体。
- en: For example, with the snake body. I want to be able to move each one and also
    remove them if the snake crashes. To move them I just need their Transform (part
    of what was provided from the MaterialMesh2dBundle during setup) and the Entity
    itself so I can send a command to despawn them or remove body parts from the game.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于蛇身体部分。我希望能够移动每个部分，并且如果蛇碰撞则移除它们。要移动它们，我只需要它们的 Transform（在设置期间从 MaterialMesh2dBundle
    中提供的一部分）和实体本身，以便我可以发送一个命令来销毁它们或从游戏中移除身体部分。
- en: The DI system that powers all this is amazing to me. I had no idea this could
    be accomplished in Rust until someone from the Bevy Discord chat kindly pointed
    me to this documentation which breaks down [how it all works](https://promethia-27.github.io/dependency_injection_like_bevy_from_scratch/chapter1/system.html).
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切的 DI 系统对我来说真的很神奇。直到有人从 Bevy Discord 聊天中友好地指引我查看[这篇文档](https://promethia-27.github.io/dependency_injection_like_bevy_from_scratch/chapter1/system.html)，我才意识到在
    Rust 中也可以实现这一切。
- en: Reading and Learning the Complicated Macros from the DI System Mentioned Above
  id: totrans-split-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读和学习来自上述 DI 系统的复杂宏
- en: If you take the example from the end of page 3 in the DI like Bevy from Scratch
    book, you can use cargo expand to see what the macro is doing.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从《从零开始学 Bevy》书籍第3页末尾的例子中获取，你可以使用 cargo expand 查看宏的运行情况。
- en: I created a new project and added the macro to the main.rs file. Then I ran
    cargo expand and it showed me the expanded macro created unsugared Rust code which
    made understanding the macros and the documentation much easier to understand.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个新项目，并将宏添加到 main.rs 文件中。然后我运行了 cargo expand，它显示了扩展的宏生成的未糖化 Rust 代码，这使得理解宏和文档变得更加容易理解。
- en: 'To install cargo expand run: `cargo install cargo-expand`'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 cargo expand，请运行：`cargo install cargo-expand`
- en: 'The code I ran `cargo expand > expanded.rs` on is:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我运行的代码 `cargo expand > expanded.rs` 是：
- en: '[PRE2]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: My Snake Clone
  id: totrans-split-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我的 Snake Clone
- en: Can be found [here](https://github.com/bebrws/bevy-snake)
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可在 [此处](https://github.com/bebrws/bevy-snake) 找到
- en: And Compiled to WASM and Played Here! (Only on WASM supported browsers - so
    no mobile)
  id: totrans-split-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并且编译为 WASM 并在此处播放！（仅限支持 WASM 的浏览器 - 因此不支持移动设备）
- en: <canvas id="bevy-portal" tabindex="0" data-raw-handle="1" alt="app" cursor="auto"></canvas>
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: <canvas id="bevy-portal" tabindex="0" data-raw-handle="1" alt="app" cursor="auto"></canvas>
