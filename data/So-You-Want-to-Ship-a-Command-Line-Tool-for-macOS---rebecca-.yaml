- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:04:02'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:04:02'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: So You Want to Ship a Command-Line Tool for macOS @ rebecca®
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所以你想要在macOS上发布一个命令行工具 @ rebecca®
- en: 来源：[https://becca.ooo/blog/so-you-want-to-ship-a-command-line-tool-for-macos/](https://becca.ooo/blog/so-you-want-to-ship-a-command-line-tool-for-macos/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://becca.ooo/blog/so-you-want-to-ship-a-command-line-tool-for-macos/](https://becca.ooo/blog/so-you-want-to-ship-a-command-line-tool-for-macos/)
- en: <main id="main">
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main id="main">
- en: 'A word of advice: **don’t.**'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个建议：**不要**。
- en: At work, I’ve written a command-line tool which sets up the developer environment.
    It installs the Nix package manager, sets up a local Postgres instance, and handles
    all the complex bits of configuration. It does all of this on Linux and macOS,
    and it supports `bash`, `zsh`, and `fish` for shell configuration.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作中，我编写了一个命令行工具，用于设置开发环境。它安装了Nix包管理器，设置了本地的Postgres实例，并处理了所有复杂的配置细节。在Linux和macOS上都可以运行，并支持`bash`、`zsh`和`fish`作为shell配置。
- en: We build and publish releases with GitHub actions, so that engineers can download
    and run the latest version of the tool when they need to set up a new machine
    or repair the development environment on an existing machine.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用GitHub actions构建和发布发布版本，这样工程师们可以在需要设置新机器或修复现有机器的开发环境时下载并运行最新版本的工具。
- en: On Linux, this is all fine and dandy ([the usual headaches with running anything
    on NixOS aside](https://wiki.nixos.org/wiki/Packaging/Binaries)), but macOS requires
    that programs be code signed and notarized.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上，这些都很顺利（除了在NixOS上运行任何东西的通常问题之外](https://wiki.nixos.org/wiki/Packaging/Binaries)，但macOS要求程序必须经过代码签名和公证。
- en: 'Code signing on macOS is a *nightmare.* Knowing a little bit about asymmetric
    encryption, I expected the process to be roughly like this:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上进行代码签名真的是一场*噩梦*。作为对非对称加密略有了解的人，我本来以为过程大致是这样的：
- en: Generate a public and private key (this is a blob of binary data, or roughly
    “a file”).
  id: totrans-split-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成公钥和私钥（这是一大堆二进制数据，或者大致来说是“一个文件”）。
- en: Get Apple to make a certificate signed with my public key (this certificate
    is also a file).
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让Apple用我的公钥签署一个证书（这个证书也是一个文件）。
- en: Run a program, pointing it to the files containing my private key and certificate,
    which “signs” an executable for distribution.
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行一个程序，指向包含我的私钥和证书的文件，“签署”一个可执行文件以便分发。
- en: When users go to run my program, the operating system can see that it’s signed
    with a valid Apple certificate and run it without issue.
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户运行我的程序时，操作系统可以看到它使用有效的苹果证书签名，无需担心任何问题。
- en: This is not, in fact, how it works.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，并非如此。
- en: The first problem is that Apple provides no less than eight different sorts
    of certificates, with little documentation on what they’re used for, so expect
    to generate a half-dozen certificates and revoke several before you have a working
    one.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个问题是，苹果提供了不少于八种不同类型的证书，但很少有文档说明它们的用途，所以在成功之前，预计要生成半打证书并撤销其中几个。
- en: The next issue is that the `codesign` command-line tool has a really opaque
    and complex interface. There’s several options you need to actually run code that
    aren’t really indicated as such (`-o runtime` and `-timestamp`, for instance,
    are mandatory for notarization).
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是，`codesign`命令行工具有一个非常不透明和复杂的界面。实际上，要运行代码，有几个你必须选择的选项，并不是所有的选项都明确表明是必需的（例如，`-o
    runtime`和`-timestamp`对于公证是必需的）。
- en: There’s few instructions for getting certificates into the keychain without
    GUI access (like, for instance, to sign code in CI), and Apple doesn’t have much
    documentation for signing anything that’s not built with Xcode.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 没有图形界面访问的情况下，比如在CI中签署代码，获取证书进入钥匙串的说明很少，而且苹果关于用Xcode之外的工具签署任何内容的文档也不多。
- en: 'I was able to solve most of the issues with actually signing code with the
    *fantastic* [`rcodesign` tool written by Gregory Szorc,](https://gregoryszorc.com/blog/2022/04/25/expanding-apple-ecosystem-access-with-open-source,-multi-platform-code-signing/)
    which has a very reasonable command-line interface that actually takes all the
    keys and certificates as files. I’ll excerpt a paragraph from the linked blog
    post that rings true to me (emphasis my own):'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我成功解决了大部分签署代码的问题，使用了由Gregory Szorc编写的*出色的*[`rcodesign`工具](https://gregoryszorc.com/blog/2022/04/25/expanding-apple-ecosystem-access-with-open-source,-multi-platform-code-signing/)，它具有非常合理的命令行界面，实际上接受所有作为文件的密钥和证书。我将摘录一段来自链接博文的真实描述（强调是我自己的）：
- en: 'I’ve learned way too much around minutia around how Apple code signing actually
    works. **The mechanism is way too complex for something in the security space.**
    There was at least one high profile Gatekeeper bug in the past year allowing improperly
    signed code to run. I suspect there will be more: the surface area to exploit
    is just too large.'
  id: totrans-split-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我已经对苹果代码签名的细枝末节了解得太多了。**对于安全领域来说，机制过于复杂了。**在过去的一年中，至少有一个引起关注的Gatekeeper bug允许未正确签名的代码运行。我怀疑会有更多：可利用的面积实在太大了。
- en: 'Once I had succeeded in signing an executable and verifying it, I immediately
    ran into another issue: [Gatekeeper blocks command-line tools from running when
    clicked.](https://developer.apple.com/forums/thread/706379) Apparently this is
    a “known bug in macOS”, though because it’s filed in Apple’s proprietary “Radar”
    bug-tracker, I can’t see any of the details or if there are any plans to fix it.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我成功签名并验证了可执行文件，我立即遇到了另一个问题：[Gatekeeper阻止点击时运行命令行工具。](https://developer.apple.com/forums/thread/706379)显然这是macOS中的一个“已知bug”，尽管因为它被记录在苹果的专有“Radar”错误跟踪器中，我无法看到任何细节或者是否有修复计划。
- en: This is especially unfortunate because when an engineer downloads the binary
    from GitHub on macOS, the downloads pop up from the bottom of the screen, just
    begging to be clicked on.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这特别令人遗憾，因为当工程师在macOS上从GitHub下载二进制文件时，下载会从屏幕底部弹出，几乎让人无法抵挡点击。
- en: The solution, Quinn from the Apple Developer Forums tells us, is to “embed your
    tool in an application.” This, as far as I can tell, doesn’t work either, but
    let’s run through it.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案来自于苹果开发者论坛的Quinn告诉我们，“将您的工具嵌入到一个应用程序中。”据我所知，这并不起作用，但让我们来看看。
- en: There’s a long guide on [Embedding a Command-Line Tool in a Sandboxed App,](https://developer.apple.com/documentation/xcode/embedding-a-helper-tool-in-a-sandboxed-app)
    so I followed that, and then slowly, painfully, factored Xcode out of it, so that
    I wouldn’t have to figure out how to get a 10GB Xcode install onto the CI machine
    (remember, you need to be signed in to an Apple ID to download Xcode, and there’s
    no way to do it from the command-line).
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个关于[在沙箱应用中嵌入命令行工具的长指南](https://developer.apple.com/documentation/xcode/embedding-a-helper-tool-in-a-sandboxed-app)，所以我遵循了那个指南，然后缓慢而痛苦地将Xcode剔除，这样我就不必想办法将一个10GB的Xcode安装到CI机器上（请记住，您需要登录到Apple
    ID才能下载Xcode，而且没有办法通过命令行进行）。
- en: 'With [Cassie’s](https://www.witchoflight.com/) help, I produced a short Swift
    script which (I hoped) would do what I want: First, it finds the embedded command-line
    tool binary with the [`Bundle.url(forAuxiliaryExecutable:)`](https://developer.apple.com/documentation/foundation/bundle/1411412-url)
    method. Then, that URL is passed to the [`NSWorkspace.open(urls:, withApplicationAt:)`](https://developer.apple.com/documentation/appkit/nsworkspace/3172702-open)
    method to run the embedded command-line tool in a new window. Finally, the `completionHandler`
    closes the app once the terminal window is open.'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 运用[Cassie的](https://www.witchoflight.com/)帮助，我编写了一个简短的Swift脚本（我希望它）能够实现我想要的功能：首先，它使用[`Bundle.url(forAuxiliaryExecutable:)`](https://developer.apple.com/documentation/foundation/bundle/1411412-url)方法查找嵌入的命令行工具二进制文件。然后，将该URL传递给[`NSWorkspace.open(urls:,
    withApplicationAt:)`](https://developer.apple.com/documentation/appkit/nsworkspace/3172702-open)方法，在新窗口中运行嵌入的命令行工具。最后，`completionHandler`在终端窗口打开后关闭应用程序。
- en: (There’s [a bug in Swift](https://github.com/apple/swift/issues/55127) that
    makes the `@main` attribute, mandatory for SwiftUI apps, not work, so I needed
    to run `swiftc` myself, adding a mysterious `-parse-as-library` option to fix
    the bug. I also needed to [read the Swift source code](https://stackoverflow.com/questions/46532610/swiftc-possible-values-for-target-command-line-option)
    to determine the possible values for the `-target` command-line option.)
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: （Swift中有[一个bug](https://github.com/apple/swift/issues/55127)，使得SwiftUI应用程序必须使用`@main`属性，否则无法工作，所以我需要自己运行`swiftc`，并添加神秘的`-parse-as-library`选项来修复这个bug。我还需要[阅读Swift源代码](https://stackoverflow.com/questions/46532610/swiftc-possible-values-for-target-command-line-option)来确定`-target`命令行选项的可能值。）
- en: 'Now, we have to code sign:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须进行代码签名：
- en: The Swift wrapper script.
  id: totrans-split-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是Swift的包装脚本。
- en: The original command-line tool.
  id: totrans-split-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原始的命令行工具。
- en: The `.app` containing both of the above.
  id: totrans-split-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含上述两者的`.app`。
- en: The `.dmg` containing the `.app`, because an `.app` is just a directory, so
    you need to zip it up to distribute it.
  id: totrans-split-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含`.app`的`.dmg`，因为`.app`只是一个目录，所以您需要将其压缩以分发。
- en: We also need to notarize the `.app` and the `.dmg`. Interestingly, you can only
    notarize `.pkg`, `.dmg`, and `.app` files (in `.zip`s) — command-line tools can
    only be notarized if they’re embedded in one of the listed containers.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要对 `.app` 和 `.dmg` 进行认证。有趣的是，你只能对 `.pkg`、`.dmg` 和 `.app` 文件（在 `.zip` 中）进行认证
    —— 如果命令行工具嵌入其中，才能进行认证。
- en: 'Most of the notarization docs tell you to use `altool`, which, only once you
    actually get it to upload something for notarization, will tell you that it’s
    deprecated and replaced by `notarytool`. `notarytool` will print `status: Invalid`
    if anything fails, with no additional details. (There’s a separate `notarytool`
    subcommand you can use to fetch logs with more information, but nothing in the
    output tells you this is an option, including turning on verbose/debug logging.)'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: '大多数认证文档告诉你使用 `altool`，但只有在你真的上传某些内容进行认证后，它才会告诉你它已经被 `notarytool` 取代。如果任何事情失败，`notarytool`
    将打印 `status: Invalid`，而没有额外的细节。（有一个单独的 `notarytool` 子命令可以使用来获取更多信息的日志，但输出中没有任何东西告诉你这是一个选项，包括打开详细/调试日志。）'
- en: Anyways, once the app was assembled and passing all of Apple’s validation tools,
    it, uh, continued to not work!
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，一旦应用程序被组装并通过了所有苹果的验证工具，它，嗯，继续不工作！
- en: You can double click the app to run it, but when it tries to launch the embedded
    command-line tool, we get an error that “`mytool-cli` can’t be opened because
    the identity of the developer cannot be confirmed“, followed by “The application
    ‘Terminal’ can’t be opened. -128”.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以双击应用程序来运行它，但是当它尝试启动嵌入的命令行工具时，我们会收到一个错误消息：“无法打开 `mytool-cli` 因为无法确认开发者身份”，接着是“无法打开应用程序‘Terminal’。-128”。
- en: 'I do get one error with Apple’s tooling on these files; though the `.app` itself
    passes all the checks, the embedded tool fails `spctl`’s validation:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些文件，我确实在苹果的工具中得到一个错误；尽管 `.app` 本身通过了所有检查，但嵌入的工具未通过 `spctl` 的验证：
- en: '[PRE0]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Googling for “obsolete resource envelope” gives several different bugs over
    a period of years, none of which apply, and anyways `spctl -a -v --raw` shows
    the same error for the `/bin/ls` that gets shipped with macOS.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索“obsolete resource envelope”会得到几年来不同的错误，但都不适用。而且 `spctl -a -v --raw` 显示了与
    macOS 预装的 `/bin/ls` 相同的错误。
- en: That’s where we’re at today. I’ve [reported this issue on the Apple Developer
    Forums,](https://developer.apple.com/forums/thread/713932) but I don’t expect
    to get any actionable advice back, seeing as this distribution pathway is already
    attempting to work around several “known” macOS bugs.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们今天的情况。我已经在[Apple开发者论坛上报告了这个问题，](https://developer.apple.com/forums/thread/713932)但我不指望会得到任何可操作的建议，因为这个分发路径已经试图解决几个已知的
    macOS bug。
- en: 'All of these tools and all of their error messages are *garbage.* (`rcodesign`,
    being not written by Apple, is a notable exception.) Here are some of the commands
    you might run to check code signatures:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些工具及其所有错误信息都是*垃圾*。(`rcodesign` 是一个显著的例外，因为它不是由苹果编写的。) 以下是一些你可能运行的命令来检查代码签名：
- en: '[PRE1]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Just absolute spews of letters with no discernible meaning and certainly no
    reasonable intuition.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一堆字母绝对的涌出来，没有明显的意义，当然也没有合理的直觉。
- en: 'On the Apple Developer Forums, [MirrorMan posts about roughly the same issue](https://developer.apple.com/forums/thread/696235)
    with frustration:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在苹果开发者论坛上，[MirrorMan 发帖谈论了大致相同的问题](https://developer.apple.com/forums/thread/696235)，并表达了他的沮丧：
- en: If the product is signed, notarised, and stapled correctly, everything should
    work. If not, you’ll need to investigate why Gatekeeper is unhappy (2), fix that,
    and then retest.
  id: totrans-split-45
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果产品已签名、已认证和正确装订，一切应该正常运行。否则，你需要调查 Gatekeeper 为什么不满意（2），解决这个问题，然后重新测试。
- en: “Fix that” !!!!!! No! Just no! There MUST be a way for Gatekeeper/spctl to render
    an exact description of whether or not it will run something (apps, command line
    tools, …) on arbitrary customer machines, immediately, right away, from the development
    machine, bypassing any caching or anything else. How many thousands of 3rd party
    developer days need to be lost for one Apple developer to spend a few days to
    update spctl to produce 100% accurate and useful messaging? For example, the messaging
    out of notarytool was very good! It told me which of the half-dozen hoops I had
    to jump through next (keychains! app-specific passwords!). It just takes too too
    long to do the research to figure out what to do at all, only to be confronted
    with an inexplicable error. $237billion a year, and developers have to guess?
    Apple can do better. Sorry for the rant but it is necessary.
  id: totrans-split-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “修复那个”！！！！不！绝对不行！Gatekeeper/spctl 必须有办法准确描述是否会在任意客户机器上运行某个东西（应用程序、命令行工具…），立即、马上，从开发机器上绕过任何缓存或其他任何东西。为了一个苹果开发者花几天更新
    spctl 以产生100%准确和有用的信息，有多少第三方开发者日需要浪费？例如，notarytool 的信息非常好！它告诉我接下来必须跳过的半打困难（钥匙串！应用程序特定密码！）。仅仅是做研究来弄清楚该做什么，就遇到了难以理解的错误。每年2370亿美元，开发者还得猜测？苹果可以做得更好。抱歉发牢骚，但这是必要的。
- en: I don’t have much more to add, except that I’ve gained a lot of empathy for
    my friends who have turned their backs on the Apple ecosystem entirely for exactly
    this sort of developer-hostile behavior.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我对那些因为开发者不友好的行为而完全抛弃苹果生态系统的朋友们充满同情之外，我没有更多要补充的。
- en: Moving on
  id: totrans-split-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来
- en: So, what can we do with all of this? We have a few options, but none of them
    are particularly appealing.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们可以用这些做些什么呢？我们有几个选择，但都不是特别吸引人。
- en: Maintain the status quo; tell users to `chmod +x` and `xattr -d com.apple.quarantine`
    the downloaded executable. This bypasses the code signing mechanism but requires
    the user copy/paste magic commands.
  id: totrans-split-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持现状；告诉用户执行 `chmod +x` 和 `xattr -d com.apple.quarantine` 命令来跳过代码签名机制，但这需要用户复制/粘贴魔法命令。
- en: It’s fine, ultimately — the users are engineers, so they can manage a terminal
    or we can teach them to — but it’s not particularly “clean”, especially when Apple
    (theoretically) offers code signing mechanisms for this exact purpose, which my
    employer already pays for.
  id: totrans-split-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终一切都还好 — 用户是工程师，所以他们可以管理终端，或者我们可以教他们 — 但这并不特别“干净”，尤其是当苹果（理论上）为此目的提供了代码签名机制，而我雇主已经为此付费。
- en: Download the file with `curl`. Unix command-line tools like `curl` and `tar`
    don’t add the quarantine bit to the files they create on macOS, so it’s pretty
    easy to run software downloaded with them.
  id: totrans-split-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `curl` 下载文件。像 `curl` 和 `tar` 这样的 Unix 命令行工具在 macOS 上创建的文件不会添加隔离位，因此使用它们下载的软件非常容易运行。
- en: Unfortunately, the repository where this tool is developed is private, so unauthenticated
    `curl` downloads won’t work. I’m seriously considering asking the CTO if we can
    make the repository public *solely* so we can use `curl` as a distribution mechanism.
    I could even write a platform-detecting shell script!
  id: totrans-split-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不幸的是，开发此工具的仓库是私有的，因此未经身份验证的 `curl` 下载无法工作。我正在认真考虑是否可以让首席技术官将仓库公开，**只为了**能够使用
    `curl` 作为分发机制。我甚至可以编写一个平台检测的 shell 脚本！
- en: Reimplement the entire thing in Swift and distribute it as an App built with
    Xcode without any embedded tools.
  id: totrans-split-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新用 Swift 实现整个工具，并将其作为使用 Xcode 构建的 App 分发，而不包含任何嵌入式工具。
- en: Hahahaha. Just kidding.
  id: totrans-split-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 哈哈哈哈。开玩笑的。
- en: Distribute the tool as a custom Homebrew tap or something similar.
  id: totrans-split-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将该工具作为自定义 Homebrew tap 或类似的东西进行分发。
- en: This tool is responsible for *installing* Homebrew, and moreover I work at a
    Nix startup so plenty of engineers *refuse* to install Homebrew. I think this
    is a little bit silly, but it’s my job to support them and deliver the smoothest
    possible developement experience, so we can’t really distribute this with Homebrew.
  id: totrans-split-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个工具负责*安装* Homebrew，并且我在一家 Nix 初创公司工作，因此许多工程师*拒绝*安装 Homebrew。我觉得这有点儿荒谬，但我的工作是支持他们，提供尽可能顺畅的开发体验，所以我们实际上不能使用
    Homebrew 进行分发。
- en: I think I’ll probably distribute a code-signed executable, and macOS will say
    it can’t figure out who made it even though their own tools say the signature
    is fine, and I’ll cry myself to sleep at night.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我想我可能会分发一个经过代码签名的可执行文件，尽管 macOS 会说它无法确定制造者是谁，即使他们自己的工具说签名没问题，晚上我也会哭着入睡。
- en: Conclusions
  id: totrans-split-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Do not attempt to “create software” for macOS. They don’t want you to. If you
    want to run your own programs, install Linux and suffer like you’re supposed to.
  id: totrans-split-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要试图在 macOS 上“创建软件”。他们不希望你这样做。如果你想要运行自己的程序，请安装 Linux，并像你应该的那样受苦。
- en: If you need to code sign software for Apple computers, use [`rcodesign`](https://gregoryszorc.com/blog/2022/04/25/expanding-apple-ecosystem-access-with-open-source,-multi-platform-code-signing/).
  id: totrans-split-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你需要为苹果电脑签署软件，请使用[`rcodesign`](https://gregoryszorc.com/blog/2022/04/25/expanding-apple-ecosystem-access-with-open-source,-multi-platform-code-signing/)。
- en: </main>
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
