- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 12:48:44'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 12:48:44'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Not so fast, Mr. Fourier! - lcamtuf’s thing
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要那么快，傅立叶先生！ - lcamtuf 的观点
- en: 来源：[https://lcamtuf.substack.com/p/not-so-fast-mr-fourier](https://lcamtuf.substack.com/p/not-so-fast-mr-fourier)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://lcamtuf.substack.com/p/not-so-fast-mr-fourier](https://lcamtuf.substack.com/p/not-so-fast-mr-fourier)
- en: 'The discrete Fourier transform (DFT) is one of the most important algorithms
    in modern computing: it plays a key role in communications, image and audio processing,
    machine learning, data compression, and much more. Curiously, it’s also among
    the worst explained topics in computer science. For example, the Wikipedia article
    on the matter assaults the reader with around three dozen cryptic formulas, but
    offers no accessible explanation how or why the algorithm works.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 离散傅立叶变换（DFT）是现代计算中最重要的算法之一：在通信、图像和音频处理、机器学习、数据压缩等领域中起着关键作用。有趣的是，它也是计算机科学中解释最差的主题之一。例如，维基百科上的相关文章用大约三十多个神秘的公式攻击读者，却没有提供可访问的解释说明这个算法如何工作或为何工作。
- en: 'My goal today is to change this. Let’s start with the basics: DFT takes a time-domain
    waveform — for example, an audio track — and turns it into frequency-domain data:
    a series of sine wave intensities that describe the underlying signal. If summed
    back together, these sine waves of different frequencies, phases, and magnitudes
    should faithfully recreate the original waveform.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我今天的目标是改变这一点。让我们从基础知识开始：DFT将时域波形（例如音频轨道）转换为频域数据：一系列描述基础信号的正弦波强度。如果将这些不同频率、相位和幅度的正弦波再次相加，应该可以忠实地重新创建原始波形。
- en: 'To illustrate the utility of DFT, let’s have a look at a conventional waveform
    representation of a [🔈 police siren](https://lcamtuf.coredump.cx/police.mp3) next
    to its frequency-domain treatment. On both plots, the horizontal axis represents
    time. In the bottom image, the vertical axis represents frequency and pixel color
    represents intensity. The top view tells us very little about the recording; in
    the bottom plot, the shifting pitch of the siren is easy to see, at its base frequency
    and [a number of harmonics](https://lcamtuf.substack.com/p/square-waves-or-non-elephant-biology):'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明DFT的实用性，让我们来看看传统波形表示的[🔈 警笛声](https://lcamtuf.coredump.cx/police.mp3)与其频域处理的对比。在两个图中，水平轴表示时间。在底部图像中，垂直轴表示频率，像素颜色表示强度。顶部视图告诉我们关于录音的信息很少；在底部图中，警笛的音调变化很容易看到，以其基频和[一些谐波](https://lcamtuf.substack.com/p/square-waves-or-non-elephant-biology)为特征：
- en: '*Police siren: time-domain versus frequency-domain*'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*警笛声：时域与频域的对比*'
- en: Strictly speaking, the bottom plot — known as a spectrogram — is not the result
    of a single DFT operation; the transform doesn't show us how frequencies change
    over time. Instead, the spectrogram is created by dividing the audio into a number
    of short time slices and calculating a separate frequency-domain representation
    for each, each making up a column in the plot. This is sometimes referred to as
    a *short-time Fourier transform* (STFT); that said, this divergent terminology
    is of no real consequence, as the underlying math is the same.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，底图——称为频谱图——不是单一DFT操作的结果；变换不显示频率随时间的变化。相反，频谱图是通过将音频分成多个短时段，并为每个短时段计算单独的频域表示来创建的，每个短时段在绘图中形成一列。有时这被称为*短时傅立叶变换*（STFT）；尽管如此，这种不同的术语对结果没有实质性影响，因为其基础数学是相同的。
- en: Either way, the frequency-domain representation of signals allows us to perform
    a variety of interesting tricks. For example, when it comes to music, we can easily
    isolate specific instruments, remove unwanted AC hum, or pitch-shift the vocals.
    With the edits done, we can then convert the data back to to the time-domain waveform.
    Indeed, the infamous Auto-Tune pitch corrector, employed by some pop singers to
    cover up the lack of skill, is one of many applications of DFT.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式，信号的频域表示允许我们执行各种有趣的技巧。例如，对于音乐，我们可以轻松地分离特定乐器，去除不需要的交流嗡嗡声，或者改变人声的音高。完成编辑后，我们可以将数据转换回时域波形。确实，某些流行歌手利用的臭名昭著的Auto-Tune音高修正器，是DFT的众多应用之一。
- en: 'To get it out of the way, let’s start with the official formula — which to
    a layperson, is rather opaque:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了把这个问题摆平，让我们从官方公式开始——对于外行来说，这相当晦涩：
- en: \(F_k = \sum\limits_{n=0}^{N-1} s_n \cdot e^{-i 2 \pi k\frac{n}{N} }\)
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: \(F_k = \sum\limits_{n=0}^{N-1} s_n \cdot e^{-i 2 \pi k\frac{n}{N} }\)
- en: In this equation, *F[k]*is the DFT value (“coefficient”) for a particular frequency
    bin *k.* Bin numbers are integers corresponding to fractions of the input sample
    rate. Moving on, *s[0]*to *s[N-1]* are the time-domain samples that make up the
    DFT input window; and the rest is… some voodoo?
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方程中，*F[k]*是特定频率箱的DFT值（“系数”）。箱号是与输入采样率对应的整数。继续向前，*s[0]*到*s[N-1]*是构成DFT输入窗口的时域样本；其余的是……一些巫术？
- en: To make sense of the voodoo, let’s conduct a simple thought experiment. Imagine
    a mechanical arm rotating at a constant angular speed. The arm is holding a pen
    that makes contact with a piece of drawing paper. The pen moves up and down the
    length of the arm in response to an input waveform.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这种巫术，让我们进行一个简单的思想实验。想象一个以恒定角速度旋转的机械臂。臂上握着一支笔，笔与一张绘画纸接触。笔根据输入波形沿臂的长度上下移动。
- en: 'Let’s assume that the arm is completing one rotation per second, and that the
    input signal is a sine wave running three times as fast (3 Hz). In this setting,
    the pen will end up drawing a neatly centered, three-lobed shape with every single
    turn:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 假设臂每秒完成一次旋转，输入信号是运行三倍速（3 Hz）的正弦波。在这种设置下，笔将每次转动都画出一个整齐居中的三叶形状：
- en: '*A polar plot of a 3 Hz signal at an angular speed of 1 turn per second.*'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*角速度为1转每秒的3 Hz信号的极坐标图。*'
- en: 'If you prefer, you can watch an animated version below:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，您可以在下面观看动画版本：
- en: 'In some circumstances — for example if the signal has a frequency lower than
    the rotation of the arm — it might take multiple revolutions to produce a closed
    shape. Still, the result should be similar; for example, here’s a pretty nine-lobed
    figure drawn for a signal at 0.9 Hz:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下——例如，如果信号的频率低于旋转臂的旋转频率——可能需要多次旋转才能产生一个闭合形状。但结果应该是类似的；例如，这是一个绘制于0.9 Hz信号的漂亮的九叶图案：
- en: '*A polar plot of 0.9 Hz at 1 turn per second (multiple turns).*'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*角速度为1转每秒的0.9 Hz极坐标图（多次转动）。*'
- en: 'Once again, you can watch an animation below:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，您可以在下面观看动画：
- en: 'This radial symmetry crops up every time except for one special case: when
    the speed of the rotating arm matches the period of the sine waveform. In this
    scenario, the peaks of the waveform always end up on one side of the plot, and
    the valleys stay on the other side:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这种径向对称性在除了一个特殊情况外的每次出现：当旋转臂的速度与正弦波形的周期匹配时。在这种情况下，波形的峰始终在图的一侧，而谷始终在另一侧。
- en: '*1 Hz signal @ 1 turn / sec.*'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*1 Hz信号@ 1转/秒。*'
- en: The shape may end up being rotated depending on the phase of the input waveform,
    but one side is always sticking out.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 根据输入波形的相位，形状可能会旋转，但一侧始终突出。
- en: 'Wondrously, this also works for composite signals consisting of superimposed
    sine waves. For example, if we take a 1 + 5 Hz signal, it will be off-center when
    plotted by an arm rotating at 1 Hz or 5 Hz — but will appear centered at 2 Hz:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 奇迹般地，这也适用于由叠加正弦波组成的复合信号。例如，如果我们取一个1 + 5 Hz信号，当以1 Hz或5 Hz旋转的臂绘制时会偏离中心，但在2 Hz处会显得居中：
- en: '*Deconstructing composite signals.*'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*解构复合信号。*'
- en: In other words, we have a fairly ingenious *frequency detector:* we set the
    speed of the rotating arm, plot the samples — and if the results are not distributed
    evenly around (0,0), we know that there is a matching sine frequency component
    present in the input signal. We can even quantify the component’s magnitude by
    measuring the deviation of the shape from the center of rotation.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们有一个相当巧妙的*频率检测器：*我们设置旋转臂的速度，绘制样本——如果结果在（0,0）周围不均匀分布，我们知道输入信号中存在匹配的正弦频率分量。通过测量形状偏离旋转中心的偏差，我们甚至可以量化该分量的幅度。
- en: The discrete Fourier transform boils down to this exact operation. It takes
    a sequence of *N* values in the input window and distributes them radially in
    two dimensions at a given speed, completing *k* rotations. It then sums the resulting
    coordinates (the ∑ part). The distance from the center of rotation to the computed
    midpoint is the magnitude of the calculated frequency component; the angle of
    the vector is the (sometimes disregarded) phase of the waveform. Note that some
    online sources, including a wildly-popular YouTube video, mistakenly state that
    the *x* axis component is the magnitude; this is incorrect.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 离散傅里叶变换归结为这个确切的操作。它接受输入窗口中的 *N* 个值的序列，并在给定速度下将它们径向分布在二维空间中，完成 *k* 次旋转。然后对生成的坐标（∑
    部分）求和。从旋转中心到计算中点的距离是计算频率分量的幅度；向量的角度是波形的（有时被忽略的）相位。请注意，一些在线资源，包括一个极其流行的YouTube视频，错误地声明
    *x* 轴分量是幅度；这是不正确的。
- en: 'This algorithm can be implemented with polar coordinates — angle and distance
    — mimicking what we did above. It can be done with Cartesian *x,y* coordinate
    pairs and simple trigonometry. The definition quoted at the beginning of this
    section does it in the most obtuse way possible — with a wacky device known as
    [Euler’s formula](https://en.wikipedia.org/wiki/Euler%27s_formula) — but all the
    methods are equivalent. The *e^(-i2)*^π*^(kn/N)* part is simply an apparatus for
    spinning things around in the complex plane by exploiting this surprising equality:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这种算法可以用极坐标 — 角度和距离 — 实现，模仿我们上面所做的。它可以用笛卡尔 *x,y* 坐标对和简单的三角法完成。在本节开始引用的定义中，它用一种最晦涩的方式实现
    — 通过一个称为 [欧拉公式](https://en.wikipedia.org/wiki/Euler%27s_formula) 的奇特设备 — 但所有方法都是等效的。*e^(-i2πkn/N)*
    部分仅仅是通过利用这个惊人的相等性在复平面中旋转事物的装置：
- en: \(e^{it} = cos \ t + i \cdot sin \ t\)
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: \(e^{it} = cos \ t + i \cdot sin \ t\)
- en: 'If you’re unfamiliar with complex numbers, the *i* part (*i = √-1*) is essentially
    a math trick to keep two values at an arm’s length in a single equation. To avoid
    it, the DFT formula can be rewritten using a pair of separate Cartesian coordinates
    — (*x, y*):'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对复数不熟悉，*i* 部分（*i = √-1*）本质上是一个数学技巧，用于在单个方程中保持两个值的距离。为了避免它，DFT公式可以使用一对分离的笛卡尔坐标
    — （*x, y*）进行重写：
- en: \(F_k =\Biggl ( { \sum\limits_{n=0}^{N-1} s_n \cdot cos ( 2 \pi k \frac{n}{N}
    )}, \ - { \sum\limits_{n=0}^{N-1} s_n \cdot sin( 2 \pi k \frac{n}{N} )} \Biggl
    )\)
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: \(F_k =\Biggl ( { \sum\limits_{n=0}^{N-1} s_n \cdot cos ( 2 \pi k \frac{n}{N}
    )}, \ - { \sum\limits_{n=0}^{N-1} s_n \cdot sin( 2 \pi k \frac{n}{N} )} \Biggl
    )\)
- en: 'This notation should be much easier to parse: the *2π* part is equal to 360°
    expressed in radians; *k* is the number of turns we want to use to distribute
    the samples; and *n/N* determines the position of each sample within these *k*
    turns. Meanwhile, *x = cos(t)* and *y = sin(t)* are just a recipe to draw a circle.'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这种表示法应该更容易解析：*2π* 部分等同于以弧度表示的360°；*k* 是我们想要在样本中使用的转数；而 *n/N* 确定了每个样本在这些 *k*
    转中的位置。同时，*x = cos(t)* 和 *y = sin(t)* 只是绘制圆的方法。
- en: 'A rudimentary implementation of DFT is straightforward; for example, in C,
    all you need is the following code:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: DFT的基本实现很简单；例如，在C中，你只需以下代码：
- en: '[PRE0]'
  id: totrans-split-35
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code accepts and outputs complex numbers; for real number inputs, *in_buf*
    can be changed to *double**. To convert the resulting complex coefficients in
    *out_buf* to magnitude, call *cabs().* To get phase information (in radians),
    use *carg().*
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 代码接受和输出复数；对于实数输入，*in_buf* 可以改为 *double**。要将结果的复数系数转换为幅度，调用 *cabs()*。要获取相位信息（以弧度表示），使用
    *carg()*。
- en: Let’s start with the maximum frequency range. If the input data consists of
    real numbers, the DFT will produce useful output only up to the so-called Nyquist
    frequency — that is, one half of the sample rate. This frequency component can
    be found in the bin at *k = N/2*. The coefficients above that can and sometimes
    need to be computed — but perhaps a bit surprisingly, they just contain mirrored
    data from the lower-frequency bins.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以最大频率范围开始。如果输入数据由实数组成，DFT仅在所谓的奈奎斯特频率上产生有用的输出 — 即采样率的一半。此频率成分可在*k = N/2*的箱中找到。那些系数可以计算，有时需要计算
    — 但或许有些令人惊讶，它们只包含从较低频率箱中镜像的数据。
- en: 'To understand why this is happening, consider the following animation of our
    rotating arm. In the video, the arm is spinning so fast in relation to the input
    sample rate that successive samples are placed more than 180° apart. In fact,
    the angular distance is 330°, suggesting that we’re running the DFT at ~92% of
    the input sample rate:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解为什么会发生这种情况，请考虑我们旋转臂的以下动画。在视频中，臂的旋转速度相对于输入采样率非常快，以至于连续的样本间隔超过了180°。实际上，角距离为330°，这表明我们以接近输入采样率的约92%运行DFT：
- en: After watching the clip, it should become clear that the end result is identical
    to what would be produced by a much slower arm spinning in the opposite direction.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 观看视频后，应该清楚，最终结果与由一个转速较慢的臂在相反方向旋转所产生的结果相同。
- en: 'The coefficient mirroring behavior is an artifact of the DFT algorithm, but
    the curse of the Nyquist frequency itself is not. It’s a fundamental bandwidth
    limitation for signal sampling techniques: above it, there’s simply not enough
    samples available to faithfully discern the frequency. The Nyquist limit is the
    reason why music is commonly recorded at ~44 kHz, even though our hearing only
    goes up to about 20 kHz (and only on a good day).'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 系数镜像行为是DFT算法的一个副作用，但是奈奎斯特频率本身并不是。这是信号采样技术的基本带宽限制：在其上方，没有足够的样本可靠地分辨频率。奈奎斯特限制是音乐通常以约44千赫录制的原因，即使我们的听觉只能达到大约20千赫（而且只是在好的情况下）。
- en: The other limitation of DFT has to do with frequency separation. A discrete
    Fourier transform that could use an infinitely-long sample window would have perfect
    selectivity — that is, it would be able to precisely discern chosen frequencies
    while rejecting everything else. In practice, DFT is run on finite sample windows,
    causing each bin to pick up something extra.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: DFT的另一个限制与频率分离有关。一个能够使用无限长样本窗口的离散傅里叶变换将具有完美的选择性 — 也就是说，它将能够精确地区分所选择的频率，同时排斥其他一切。实际上，DFT在有限的样本窗口上运行，导致每个频段捕捉到额外的东西。
- en: 'To understand the cause, let’s assume we’re doing DFT with bins spaced three
    hertz apart — i.e., *F[0]* is the DC component, *F[1]* is 3 Hz, and *F[2]* is
    6 Hz. The *F[1]* bin is always calculated by completing a single turn (the timing
    expression is *k × 2π* and *k = 1).* But with an input signal frequency of 2 Hz,
    we’d need three turns to form a closed shape. Instead, we run out of time — and
    out of input samples — by the time we’ve drawn only one off-center lobe:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解原因，让我们假设我们正在进行DFT，每隔三赫兹一个频段 — 即，*F[0]* 是直流分量，*F[1]* 是3赫兹，*F[2]* 是6赫兹。 *F[1]*
    频段总是通过完成单个转动计算得出（时间表达式为 *k × 2π*，*k = 1*）。但是，对于输入信号频率为2赫兹，我们需要三次转动才能形成一个闭合形状。然而，我们时间不够
    — 并且在绘制了一个偏离中心的波形后，我们的输入样本也不够用：
- en: '*The limitations of DFT: a nearby frequency creeping into the F[1] bin.*'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*DFT的限制：一个靠近F[1]频段的附近频率渗入。*'
- en: 'In practice, the plot ends up badly off-center only if the two frequencies
    are quite close to each other. To illustrate, here’s an animation for our 3 Hz
    *F[1]* bin across a range of input signals. Watch the computed blue dot that tracks
    the “center of mass” of the shape — and thus mirrors the resulting DFT coefficient:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，只有两个频率非常接近时，绘图才会严重偏离中心。为了说明这一点，这是我们在一系列输入信号中的3赫兹 *F[1]* 频段的动画。观察计算出的蓝点，它跟踪形状的“重心”
    — 因此镜像了结果的DFT系数。
- en: As it turns out, the bias is significant only within roughly +/- 75% of bin
    step size. At lower frequencies, the partial shape is pretty close to a circle;
    at higher signal rates, it has enough symmetrical lobes that the missing part
    doesn’t upset the balance much.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，在大约每个频段步长的正负75%内，偏差非常显著。在较低频率下，部分形状非常接近圆形；在更高的信号率下，它具有足够对称的波瓣，缺失部分不会对平衡产生太大影响。
- en: 'We can measure this more rigorously. The following plot shows the average frequency
    response across all possible signal phases for a couple of 1 Hz-spaced bins:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更严格地测量这一点。以下图显示了几个1赫兹间隔频段所有可能信号相位的平均频率响应：
- en: '*Real-world DFT bin frequency response.*'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*真实世界的DFT频段响应。*'
- en: The overlaps mean that the standard set of DFT bins ends up accounting for the
    entire spectrum between DC and Nyquist. Nothing stops us from calculating ad-hoc
    DFT coefficients for any non-integer *k* in between, but these “partial-turn”
    bins don’t extract any new, finer-grained information from the system. If you
    need better frequency discrimination, you gotta up the window size.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 重叠意味着标准的 DFT bin 集合最终占据了从 DC 到 Nyquist 的整个频谱。没有什么能阻止我们为任何非整数*k*计算特定的 ad-hoc
    DFT 系数，但这些“部分旋转” bin 并不从系统中提取任何新的、更精细的信息。如果需要更好的频率区分能力，必须增加窗口大小。
- en: This brings us to temporal resolution. A single DFT operation outputs frequency
    coefficients for the entire input waveform — and nothing else. Within the time
    span it covers, we can no longer easily pinpoint when a particular tone start
    or ends, or whether its intensity is going up or down. Indeed, sharp signal discontinuities
    within the waveform produce wide-spectrum “halos” that are hard to interpret as
    any specific frequency. The more localized is the time-domain signal, the more
    ambiguous is its frequency-domain image.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带我们到时间分辨率。单个 DFT 操作为整个输入波形输出频率系数 —— 仅此而已。在它所覆盖的时间段内，我们不再容易确定特定音调的起始或结束时间，或者它的强度是上升还是下降。确实，在波形中的尖锐信号不连续性会产生难以解释为任何特定频率的广谱“光晕”。时间域信号越局部化，其频域图像就越模糊。
- en: 'This is why spectrograms divide the signal into short time slices and compute
    separate transforms for each slice, rather than performing one DFT for the entire
    buffer. But these slices can’t be arbitrarily short: at minimum, you must use
    a window large enough so that the bottom bin (*F[1]*) aligns with the lowest frequency
    you wish to discern. To illustrate, if you have a 44.1 kHz audio stream and want
    to measure down to 20 Hz, you need a window of 44,100 / 20 = 2,205 samples — spanning
    50 milliseconds — per each DFT.'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么声谱图将信号分成短时间片段，并为每个片段计算单独的变换，而不是为整个缓冲区执行一个 DFT。但是这些片段不能任意短：至少，您必须使用足够大的窗口，使得底部频率*F[1]*与您希望分辨的最低频率对齐。举例说明，如果您有一个
    44.1 kHz 的音频流，并且想要测量到 20 Hz，那么您需要每个 DFT 使用 2,205 个样本的窗口，即 50 毫秒的跨度。
- en: A lot can happen within 50 milliseconds; it follows that various workarounds
    — such as the use of overlapping windows, weighted sampling, or specialized aliasing
    methods — might be necessary to get acceptable temporal resolution in certain
    applications. Audio processing tends to be one of them.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 50 毫秒内发生了很多事情；因此，为了在某些应用程序中获得可接受的时间分辨率，可能需要采取各种变通方法，如使用重叠窗口、加权采样或专门的混淆方法。音频处理往往是其中之一。
- en: The inverse discrete Fourier transform is conceptually simple. It boils down
    to generating waveforms for to every previously-calculated frequency bin, adjusting
    their magnitude and phase in accordance with the DFT-produced *F[k]* coefficients,
    and then summing the results to recreate the contents of the time-domain sample
    window (*s[0]* to *s[N-1]*).
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 离散傅里叶逆变换在概念上很简单。它归结为为以前计算过的每个频率 bin 生成波形，根据 DFT 产生的*F[k]*系数调整它们的幅度和相位，然后将结果相加以重新创建时间域样本窗口(*s[0]*
    到 *s[N-1]*)的内容。
- en: 'Here’s the IDFT formula that does just that:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是执行此操作的 IDFT 公式：
- en: \(s_n = \frac{1}{N} { \sum\limits_{k=0}^{N-1} F_k \cdot e^{i{{2 \pi n \frac{k}{N}
    }}} } \)
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: \(s_n = \frac{1}{N} { \sum\limits_{k=0}^{N-1} F_k \cdot e^{i{{2 \pi n \frac{k}{N}
    }}} } \)
- en: Note the similarity of this equation to the forward DFT formula. There is an
    important symmetry in respect to inputs and outputs at the core of the algorithm;
    this is known as *orthogonality*. In a mildly mind-bending sense, the frequency
    domain is just the time domain turned “inside out”.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个方程与前向 DFT 公式非常相似。在算法的核心，输入和输出之间存在重要的对称性；这被称为*正交性*。在某种略带令人费解的意义上，频域只是时间域被“里外颠倒”。
- en: 'Here’s a simple implementation of IDFT in C:'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 C 语言中简单的 IDFT 实现：
- en: '[PRE1]'
  id: totrans-split-57
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As earlier, if working with real-number signals, *out_buf* can be declared as
    *double** instead.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前一样，如果处理实数信号，*out_buf* 可以声明为*double**。
- en: Remarkably, forward DFT followed by IDFT is lossless - i.e., it gets you the
    exact same time-domain data that you started with. In practice, some attention
    should be paid to the precision of floating-point calculations to avoid cumulative
    errors, but it’s usually not a big deal.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，前向 DFT 后接 IDFT 是无损的 — 即，它会得到与开始时相同的时间域数据。在实践中，需要注意浮点运算的精度，以避免累积误差，但这通常不是一个大问题。
- en: 'The DFT is perfectly adequate except for one tiny problem: even if we precompute
    the exponentiation part, the algorithm still involves *K × N* complex-number multiplications.
    Because the number of computed bins (*K*) is frequently the same as window size
    (*N*), some computer science buffs with a penchant for vagueness describe the
    computational complexity of DFT as *O(n²)*.'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: DFT是完全适合的，除了一个微小的问题：即使我们预先计算了指数部分，算法仍然涉及*K × N*复数乘法。因为计算的箱数*K*通常与窗口大小*N*相同，一些对计算复杂度的迷恋的计算机科学爱好者将DFT的计算复杂度描述为*O(n²)*。
- en: This is where fast Fourier transform (FFT) comes to play; FFT is still a discrete
    Fourier transform and it produces the same results, but the calculation is cleverly
    optimized for large input windows and for the *K = N* use case (the algorithm
    can’t be used to selectively compute only some frequency bins).
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是快速傅里叶变换（FFT）发挥作用的地方；FFT仍然是离散傅里叶变换，它产生相同的结果，但计算被巧妙地优化，适用于大输入窗口和*K = N*用例（该算法不能选择性地计算仅一些频率分箱）。
- en: The performance gains are due to a technique known as the [radix-2 Cooley-Tukey
    algorithm](https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm).
    The derivation of this optimization is somewhat involved, but on a high level,
    it involves iteratively splitting the full DFT calculation into smaller sub-sums,
    and then exploiting the fact that the *e^(-i2)*^π*^(kn/N)* expression is periodic
    — it literally goes in circles! — to factor out many redundant multiplications.
    For larger windows, the resulting complexity of FFT approaches *O(n ⋅ log₂ n*),
    which is a pretty substantial improvement.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 性能提升归功于一种称为[radix-2 Cooley-Tukey算法](https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm)的技术。这种优化的推导有点复杂，但在高层次上，它涉及将完整的DFT计算迭代地拆分成更小的子和，然后利用*e^(-i2)*^π*^(kn/N)*表达式的周期性
    —— 它确实是圆形的！ —— 来因式分解许多冗余的乘法。对于更大的窗口，FFT的结果复杂度接近*O(n ⋅ log₂ n)*，这是一个相当大的改进。
- en: 'Numerous reference FFT implementations exist for [almost every language imaginable](https://rosettacode.org/wiki/Fast_Fourier_transform);
    a particularly clean, minimalistic C implementation for power-of-two window sizes
    is as follows:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每种编程语言都存在多种参考FFT实现，[Fast Fourier Transform](https://rosettacode.org/wiki/Fast_Fourier_transform)；对于二的幂窗口大小，一种特别简洁、极简的C语言实现如下所示：
- en: '[PRE2]'
  id: totrans-split-64
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Turning this code into inverse FFT (IFFT) boils down to removing the minus sign
    in the *cexp(…)* expression and dividing the final values by *len.*
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 将这段代码转换为反FFT（IFFT）可以简化为移除*cexp(...)*表达式中的负号，并将最终值除以*len*。
- en: Again, in practical applications, it would be wise to precompute the results
    of complex exponentiation; the value depends only on the *pos* index and the chosen
    window size.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在实际应用中，预计算复数指数部分的结果是明智的；该值仅取决于*pos*索引和选择的窗口大小。
- en: Discrete cosine transform can be thought of as a partial, real-numbers-only
    version of DFT. Just like discrete Fourier, it converts time-domain samples into
    a frequency spectrum. And just like DFT, it gets there by multiplying input data
    by cosine waveforms and then summing the results to obtain a bunch of binned coefficients.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 离散余弦变换可以被看作是离散傅里叶变换的一个部分、仅限于实数版本。就像离散傅里叶变换一样，它将时域样本转换为频谱。而且与离散傅里叶变换一样，它通过乘以余弦波形的输入数据然后将结果求和来获得一堆分箱系数。
- en: 'That said, this description falls a bit short; the algorithm differs from discrete
    Fourier in a handful of interesting ways. First, let’s have a look at the usual
    formula for DCT-II, the most common variation of DCT:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，这种描述还有些不足；这个算法与离散傅里叶变换在一些有趣的方面有所不同。首先，让我们来看看DCT-II的常见公式，这是DCT的最常见变体：
- en: \(F_k = \sum\limits_{n=0}^{N-1} s_n \cdot cos ( \pi k { n + \frac12 \over N}
    )\)
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: \(F_k = \sum\limits_{n=0}^{N-1} s_n \cdot cos ( \pi k { n + \frac12 \over N}
    )\)
- en: 'If you scroll back to the DFT equation, you might notice that in the formula
    above, *k* is multiplied by π (180°) instead of 2π (360°). In effect, the waveform-generating
    part uses an interleaved pattern of full-turn and partial-turn bins, running at
    half the frequency of DFT and putting F[N-1] at the Nyquist limit. This change
    isn’t just about being more efficient: if you try to switch the timing expression
    back to *2π*, the entire algorithm goes sideways and many frequency bins start
    reading zero. In a moment, we’ll discuss why.'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回到DFT方程，你可能会注意到在上面的公式中，*k* 被π（180°）而不是2π（360°）相乘。实际上，波形生成部分使用交替模式的完整转向和部分转向频率区间，运行在DFT频率的一半，并将F[N-1]放在奈奎斯特极限处。这种变化不仅仅是为了更高效：如果你尝试将时间表达式切换回
    *2π*，整个算法就会偏离轨道，许多频率区间开始读取零。接下来，我们将讨论原因。
- en: The other new element is the *+½* offset in the timing expression. Recall that
    sample numbers run from *n = 0* to *N - 1*, so dividing *n* by *N* leaves a gap
    on the upper end of the range. A +*½* shift centers the waveform; the symmetry
    is important for making the inverse function work. Discrete Fourier doesn’t use
    this because its symmetry comes from the more basic relationship between cosine
    and sine in the complex plane.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个新元素是时间表达式中的 *+½* 偏移量。请记住，样本编号从 *n = 0* 到 *N - 1*，因此将 *n* 除以 *N* 留下范围上端的间隙。+*½*
    的偏移将波形置于中心位置；这种对称性对于使逆函数工作非常重要。离散傅里叶变换不使用这种方式，因为它的对称性来自于复平面中余弦和正弦的更基本关系。
- en: 'The usual inverse DCT-II (IDCT-II) formula is:'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的逆DCT-II（IDCT-II）公式为：
- en: \(s_n = \frac{1}{N} \sum\limits_{k=0}^{N-1} F_k \cdot w_k \cdot cos [ \pi (n
    + \frac12) {k \over N} ]\)
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: \(s_n = \frac{1}{N} \sum\limits_{k=0}^{N-1} F_k \cdot w_k \cdot cos [ \pi (n
    + \frac12) {k \over N} ]\)
- en: The *w[k]* value is *1* for the DC bin (*k = 0*) and 2 for all the subsequent
    partial-turn bins (*k > 0*). You might encounter variants that put *w[k]* and
    the scaling factor (*1/N*) in the forward DCT formula instead; heck, some authors
    split the factors between DCT and IDCT. These changes result in differently-scaled
    coefficients, but the overall operation is the same.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*w[k]* 值为DC频率区间（*k = 0*）为 *1*，而所有后续的部分转向频率区间（*k > 0*）为 *2*。你可能会遇到变体，将 *w[k]*
    和缩放因子（*1/N*）放在正向DCT公式中；一些作者在DCT和IDCT之间分割因子。这些变化导致了不同比例的系数，但整体操作是相同的。'
- en: Now, let’s examine the fundamental mechanism of discrete cosine transform. Imagine
    we’re working with one second’s worth of data sampled at 2 kHz. With DFT, we get
    N / 2 = 1,000 usable frequency bins before hitting the Nyquist limit (1 kHz);
    bin spacing is 1 Hz. With the cosine transform, we’re getting N = 2,000 bins representing
    DC to Nyquist in 0.5 Hz increments.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来检验离散余弦变换的基本机制。假设我们正在处理以2 kHz采样的一秒数据。使用DFT，我们在达到奈奎斯特极限（1 kHz）之前得到N / 2
    = 1,000个可用的频率区间；频率区间间隔为1 Hz。使用余弦变换，我们得到N = 2,000个频率区间，表示从DC到奈奎斯特的0.5 Hz增量。
- en: 'Let’s pick the 4 Hz bin (*F[8]*). First, consider what happens if we’re analyzing
    an input signal that’s running at 8 Hz. The image shows the reference 4 Hz waveform
    for the bin (blue), followed the input frequency (green), and then the computed
    product of the two (red). The product is centered around the *x* axis, so the
    DCT coefficient is zero:'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选取4 Hz频率区间（*F[8]*）。首先，考虑一下如果我们分析的输入信号运行在8 Hz时会发生什么。图像显示了频率区间4 Hz的参考波形（蓝色），接着是输入频率（绿色），然后是两者的乘积（红色）。乘积以*x*轴为中心，所以DCT系数为零：
- en: '*DCT: mismatched frequencies.*'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*DCT：不匹配的频率。*'
- en: 'But what if the frequencies (and phases) match? In the plot below, we’re still
    looking at the *F[8]* bin, but the input signal is now aligned at 4 Hz. The multiplication
    is always involving two positive or two negative values, so the product waveform
    now has a positive sum:'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果频率（和相位）匹配会怎么样？在下面的图中，我们仍然在看*F[8]*频率区间，但是输入信号现在与4 Hz对齐。乘积总是涉及两个正值或两个负值，所以乘积波形现在有一个正的总和：
- en: '*DCT behavior with matching frequencies and phases.*'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*匹配频率和相位时的DCT行为。*'
- en: If the phases of the signals are off by half a cycle (180°), the discrete cosine
    transform still works — except the reading is negative.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果信号的相位偏移半个周期（180°），离散余弦变换仍然有效 —— 只是读数是负数。
- en: 'Given the behavior observed here, one might wonder why we partook in all that
    complex-number chicanery that comes with real DFT. The answer becomes obvious
    if we consider the case of a 90° or 270° phase shift (one-fourth or three-fourths
    of a wavelength). In this situation, any detectable offset in the multiplied waveform
    simply disappears, and the *F[8]* coefficient is zero despite the presence of
    a matching signal frequency:'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这里观察到的行为，人们可能会想知道为什么我们要参与所有与真实 DFT 相关的复数手法。如果我们考虑 90° 或 270° 的相位偏移（波长的四分之一或四分之三），答案显而易见。在这种情况下，任何可检测到的乘积波形偏移都会简单消失，*F[8]*
    系数尽管存在匹配的信号频率却为零：
- en: '*DCT bin #8 undone by a phase shift.*'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*DCT 第 8 个频段的相位错位问题。*'
- en: The original Fourier transform has no problem handling this case; at 90°, the
    DFT vector simply points up, the magnitude of the signal represented solely by
    the imaginary part (aka the *y* coordinate). In contrast, in discrete cosine transform,
    the imaginary part is AWOL, and we’re not registering anything in the expected
    frequency bin.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 原始傅里叶变换在处理这种情况时没有问题；在 90° 时，DFT 向量指向上，信号的大小仅由虚部（即 *y* 坐标）表示。相比之下，在离散余弦变换中，虚部不存在，我们在预期的频段中没有任何注册。
- en: 'At this point, you might be wondering if the misaligned signals are simply
    lost. The answer is no — the genius of DCT is that the out-of-phase data ends
    up in the nearby “partial-turn” bins that are not computed in normal DFT. Sticking
    to our phase-shifted 4 Hz problem signal featured above, let’s peek into the next
    bin — *F[9]* at 4.5 Hz:'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可能会想知道是否可以简单地丢失不对齐的信号。答案是否定的 — DCT 的妙处在于，不相位的数据最终会出现在附近的“部分转动”频段中，这在正常的
    DFT 中是不计算的。继续我们的相位偏移为 4 Hz 的问题信号特征，让我们看看下一个频段 — *F[9]* 在 4.5 Hz：
- en: '*DCT partial-turn bins doing their job.*'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*DCT 部分转动频段正在发挥作用。*'
- en: If you take a local view, the signal appears 90° out of phase at the beginning;
    seemingly snaps into phase in the middle; and then goes -90° out of phase at the
    end. Within this “partial-turn” bin’s measurement window, the average product
    is positive. If we go to the next “full-turn” bin (5 Hz), the product of the waveforms
    is once again zero.
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从局部视角来看，信号在开始时出现了 90° 的相位偏移；在中间似乎突然恢复了相位；然后在结尾处又出现了 -90° 的相位偏移。在这个“部分转动”频段的测量窗口内，平均乘积为正。如果我们进入下一个“完整转动”频段（5
    Hz），波形的乘积再次变为零。
- en: In other words, DCT bins encode magnitude **and** phase information, just not
    always where we’re expecting it. This explains why the transform needs twice as
    many bins — and why trying to increase their spacing to match DFT breaks the algorithm.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，DCT 频段编码了幅度 **和** 相位信息，只是不总是在我们期望的地方。这解释了为什么变换需要两倍的频段 — 以及为什么试图增加它们的间距以匹配
    DFT 会破坏算法。
- en: This messy encoding scheme makes discrete cosine transform a fairly poor tool
    for most signal analysis tasks. That said, it’s great for fast, space-efficient
    compression algorithms where the aesthetics of the frequency-domain representation
    don’t matter much. A classic example is the JPEG image format, which performs
    DCT on 8×8 pixel tiles and then quantizes (i.e., reduces the precision of) the
    calculated coefficients to make them easier to compress using conventional lossless
    compression (Huffman coding).
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这种混乱的编码方案使得离散余弦变换对于大多数信号分析任务而言是一个相当差的工具。尽管如此，它对于快速、空间高效的压缩算法非常有用，在频域表示的美学不那么重要的情况下尤为如此。一个经典的例子就是
    JPEG 图像格式，它对 8×8 像素块进行 DCT，然后对计算出的系数进行量化（即降低精度），以便使用传统的无损压缩（哈夫曼编码）更容易地压缩。
- en: 'Oh — if you wish to experiment with DCT-II, a simple implementation is included
    below:'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，如果你希望尝试 DCT-II，下面包含了一个简单的实现：
- en: '[PRE3]'
  id: totrans-split-90
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For a nonsensical but amusing demo that lets you watch what happens if you apply
    JPEG-style lossy compression to text, check out [this post](https://lcamtuf.substack.com/p/afternoon-project-jpeg-dct-text-lossifizer).
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 想看一个荒谬但有趣的演示？看看 [这篇文章](https://lcamtuf.substack.com/p/afternoon-project-jpeg-dct-text-lossifizer)，让你了解如果将文本应用
    JPEG 风格的有损压缩会发生什么。
- en: '*If you’re interested in how DFT and DCT relate to the operation of radio receivers,
    check out [this feature](https://lcamtuf.substack.com/p/radios-how-do-they-work).
    For an article on alternative frequency domains, [see here](https://lcamtuf.substack.com/p/is-the-frequency-domain-a-real-place).
    For a thematic catalog of articles about electronics and signal processing, [click
    here](https://lcamtuf.coredump.cx/offsite.shtml).*'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
