- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:33:56'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:33:56
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Introducing Pkl, a programming language for configuration :: Pkl Docs'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '介绍 Pkl，一种用于配置的编程语言 :: Pkl 文档'
- en: 来源：[https://pkl-lang.org/blog/introducing-pkl.html](https://pkl-lang.org/blog/introducing-pkl.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://pkl-lang.org/blog/introducing-pkl.html](https://pkl-lang.org/blog/introducing-pkl.html)
- en: by the Pkl Team on February 1st, 2024
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Pkl 团队于2024年2月1日发布
- en: We are delighted to announce the open source first release of Pkl (pronounced
    *Pickle*), a programming language for producing configuration.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很高兴地宣布 Pkl 的首个开源版本发布（发音为*Pickle*），这是一种用于生成配置的编程语言。
- en: When thinking about configuration, it is common to think of static languages
    like JSON, YAML, or Property Lists. While these languages have their own merits,
    they tend to fall short when configuration grows in complexity. For example, their
    lack of expressivity means that code often gets repeated. Additionally, it can
    be easy to make configuration errors, because these formats do not provide any
    validation of their own.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑配置时，通常会想到像 JSON、YAML 或属性列表这样的静态语言。虽然这些语言各有其优点，但当配置变得复杂时，它们往往表现不佳。例如，它们缺乏表达能力意味着代码经常重复。此外，由于这些格式本身不提供任何验证，因此很容易出现配置错误。
- en: To address these shortcomings, sometimes formats get enhanced by ancillary tools
    that add special logic. For example, perhaps there’s a need to make code more
    [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself), so a special property
    is introduced that understands how to resolve references, and merge objects together.
    Alternatively, there’s a need to guard against validation errors, so some new
    way is created to validate a configuration value against an expected type. Before
    long, these formats almost become programming languages, but ones that are hard
    to understand and hard to write.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些缺点，有时会通过辅助工具增强格式，添加特殊逻辑。例如，可能需要使代码更加[DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)，因此引入了一个特殊属性，了解如何解析引用并合并对象。或者，需要防范验证错误，因此创建了一种新的方式来验证配置值是否符合预期类型。不久之后，这些格式几乎变成了编程语言，但是这些语言很难理解和编写。
- en: On the other end of the spectrum, a general-purpose language might be used instead.
    Languages like Kotlin, Ruby, or JavaScript become the basis for [DSL](https://en.wikipedia.org/wiki/Domain-specific_language)s
    that generate configuration data. While these languages are tremendously powerful,
    they can be awkward to use for describing configuration, because they are not
    oriented around defining and validating data. Additionally, these DSLs tend to
    be tied to their own ecosystems. It is a hard sell to use a Kotlin DSL as the
    configuration layer for an application written in Go.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一端，可以使用通用编程语言。像 Kotlin、Ruby 或 JavaScript 这样的语言成为生成配置数据的 DSL 的基础。虽然这些语言非常强大，但在描述配置时可能会感到笨拙，因为它们不是围绕定义和验证数据而设计的。此外，这些
    DSL 往往与它们自己的生态系统紧密相关。在 Go 中编写的应用程序的配置层中使用 Kotlin DSL 是一个难以接受的提议。
- en: We created Pkl because we think that configuration is best expressed as a blend
    between a static language and a general-purpose programming language. We want
    to take the best of both worlds; to provide a language that is declarative and
    simple to read and write, but enhanced with capabilities borrowed from general-purpose
    languages. When writing Pkl, you are able to use the language features you’d expect,
    like classes, functions, conditionals, and loops. You can build abstraction layers,
    and share code by creating packages and publishing them. Most importantly, you
    can use Pkl to meet many different types of configuration needs. It can be used
    to produce static configuration files in any format, or be embedded as a library
    into another application runtime.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建 Pkl 的原因是因为我们认为配置最好表达为静态语言和通用编程语言之间的混合体。我们希望获得两者的优势；提供一种声明式且易于阅读和编写的语言，同时结合通用编程语言的功能。在编写
    Pkl 时，您可以使用您期望的语言特性，如类、函数、条件语句和循环。您可以构建抽象层，并通过创建包并发布它们来共享代码。最重要的是，您可以使用 Pkl 满足许多不同类型的配置需求。它可用于生成任何格式的静态配置文件，或作为库嵌入到另一个应用程序运行时中。
- en: 'We designed Pkl with three overarching goals:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设计 Pkl 时有三个总体目标：
- en: To provide safety by catching validation errors before deployment.
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在部署前通过捕获验证错误来提供安全性。
- en: To scale from simple to complex use-cases.
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从简单到复杂的用例进行扩展。
- en: To be a joy to write, with our best-in-class IDE integrations.
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要成为写作的乐趣，并集成我们的最佳 IDE 整合。
