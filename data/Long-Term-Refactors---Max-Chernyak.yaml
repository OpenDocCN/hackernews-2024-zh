- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:14:16'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:14:16
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Long Term Refactors - Max Chernyak
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 长期重构 - Max Chernyak
- en: 来源：[https://max.engineer/long-term-refactors](https://max.engineer/long-term-refactors)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://max.engineer/long-term-refactors](https://max.engineer/long-term-refactors)
- en: 'Big (or “Long Term”) refactors are hard to pull off in a busy company. To succeed,
    we must:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在繁忙的公司中进行大（或“长期”）重构是很困难的。要成功，我们必须：
- en: Convince business that it’s worth the delay.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 说服业务，值得延迟。
- en: Decide what features will have to wait.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定哪些功能必须等待。
- en: Produce regular status updates and ETAs.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期提供状态更新和预计完成时间。
- en: Justify the refactor as we go. Is it the right approach?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在进行重构时进行合理的论证。这是否是正确的方法？
- en: Keep ourselves from burning out.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止自己燃尽。
- en: Allow time for the team to digest and review the huge diff.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给团队留出时间来消化和审查巨大的差异。
- en: Fix a bombardment of QA issues.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决 QA 问题的大量问题。
- en: And we better do this all quickly, because god forbid original and refactored
    code coexist!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最好快点做完这一切，因为万一原始和重构的代码共存那就糟了！
- en: Is this really the only way? Feature freeze, a rush, a buggy rollout, and likely
    burnout?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的是唯一的方式吗？功能冻结，匆忙，一个错误满满的发布，很可能是燃尽？
- en: The Other Way
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另一种方式
- en: 'I have a theory that long refactors get a bad rap because most of them take
    far longer than we expect. The length leads to stress, an awkward codebase, a
    confused team, and often no end in sight. Instead, what if we *prepared* an intentional
    long term refactor? A few years ago, I began trying this method, and it has led
    to some surprisingly successful results:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个理论，即长期重构之所以声名狼藉，是因为大多数情况下它们所需的时间比我们预期的要长得多。这种长度导致压力、一个笨拙的代码库、一个困惑的团队，通常没有尽头。相反，如果我们*准备好*一个有意识的长期重构会怎样呢？几年前，我开始尝试这种方法，结果出奇地成功：
- en: We didn’t need to negotiate business timelines.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不需要协商业务时间表。
- en: We didn’t need to compete against business priorities.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不需要与业务优先事项竞争。
- en: The team quickly understood and even took ownership of the refactor over time.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队很快就理解并逐渐接管了重构。
- en: There was no increase in stress and risk of burnout.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有增加压力和燃尽风险。
- en: PRs were easy to review, no huge diffs.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PR 很容易审查，没有巨大的差异。
- en: The refactor was consistently and collaboratively re-evaluated by the entire
    team.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个团队一直在一致地、协作地重新评估重构。
- en: We never wasted time refactoring code that didn’t need it.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们从不浪费时间重构不需要的代码。
- en: Our feature development remained unblocked.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的功能开发仍然没有受阻。
- en: The team expanded their architectural knowledge.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队扩展了他们的架构知识。
- en: The new engineers had a great source of first tasks.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新工程师有很好的首个任务来源。
- en: We rolled out the refactor gradually, making it easier to QA, and reducing bugs.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们逐步推出了重构，使其更容易进行 QA，减少了错误。
- en: Long-term refactors involve the whole team from the beginning, which is one
    of their most powerful aspects. So far, I’ve participated in ~10 big refactors
    using this method across 2 companies with at least 3 different teams, and I’ve
    yet to see it go wrong. Here was our approach.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 长期重构从一开始就涉及整个团队，这是它们最强大的方面之一。到目前为止，我已经使用这种方法参与了 ~10 个大重构，跨越了 2 家公司的至少 3 个不同的团队，而且我还没有见过失败的情况。以下是我们的方法。
- en: Prerequisites
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'To start, you should have the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，你应该具备以下条件：
- en: An experienced software engineer with a vision for the refactor.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具有对重构的愿景的经验丰富的软件工程师。
- en: A team of software engineers at various levels of expertise.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由各种水平的软件工程师组成的团队。
- en: An internal knowledge base. (Any of Github Wiki, Notion, Confluence, Markdown
    files, etc)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内部知识库。（可以是 Github Wiki、Notion、Confluence、Markdown 文件等）
- en: Less than ~5-10 long term refactors already in progress, depending on their
    scope.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 少于 ~5-10 个长期重构正在进行中，具体取决于它们的范围。
- en: Process
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过程
- en: Almost every big refactor I’ve encountered follows a semi-consistent pattern.
    What makes a refactor big is the sheer number of times you must apply the pattern.
    In an ideal world, this labor is divided. Unfortunately, the refactor often requires
    case-by-case decision making. My proposed process is centered around explaining
    the refactoring idea to your colleagues, so that they can also make decisions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎我遇到的每一个大重构都遵循一个半一致的模式。重构之所以变得庞大，是因为你必须多次应用该模式。在理想的世界里，这种工作是分工的。不幸的是，重构通常需要逐案决策。我提出的过程围绕着向同事解释重构的想法，以便他们也能做出决策。
- en: 'NOTE: The process is for the “experienced engineer” from prerequisite #1.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '注意：此过程适用于先决条件 #1 中的“有经验的工程师”。'
- en: '**Identify code that should be refactored.**'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**识别应该重构的代码。**'
- en: '**Identify the refactoring pattern.**'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**识别重构模式。**'
- en: Explore the codebase to identify a common pattern of required changes. A rough
    idea is fine for now. It’s okay to ignore special cases and focus on the commonalities.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 探索代码库，识别出所需更改的常见模式。现在，只需粗略的想法就可以了。暂时忽略特殊情况，专注于共同点。
- en: '**Implement an example of the refactor.**'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实施重构的示例。**'
- en: Find the smallest representative sample that you can apply your rough pattern
    to, and refactor it. This is where you want to be extremely diligent. Experiment
    and thoroughly refine your pattern. Don’t skimp on best practices. Follow [4 reasons
    to leave a code comment](https://max.engineer/reasons-to-leave-comment). Convey
    [how, what, and why](https://max.engineer/maintainable-code). Make it your best
    work, because it’s going to become the primary reference for the rest of your
    team. Submit a merge request.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 找到您可以将粗略模式应用于的最小代表性样本，并对其进行重构。这是您要非常认真的地方。实验并彻底完善您的模式。不要吝啬最佳实践。遵循[4 reasons
    to leave a code comment](https://max.engineer/reasons-to-leave-comment)。传达[how,
    what, and why](https://max.engineer/maintainable-code)。把它做得最好，因为它将成为您团队的主要参考资料。提交合并请求。
- en: '**Prepare the codebase for the refactor.**'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**为重构准备代码库。**'
- en: 'Now that you’ve tried the refactor yourself, made decisions, and fought friction,
    you have an idea of what your colleagues are going to be dealing with. Use your
    experience to pave a smoother path for them. Go through the codebase and do minor
    preparations: reshuffle code, fill gaps, rename things for clarity, resolve ambiguities,
    create new dir structures. Keep your changes minor. Don’t refactor everything
    yourself. It’s critical that the bulk of the work is shared. Submit a merge request.'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在您已经尝试了重构，并做出了决策，并克服了阻力，您对同事将要处理的情况有了一个概念。利用您的经验为他们铺平一条更平滑的道路。浏览代码库并进行小的准备工作：重排代码，填补空白，为清晰性重命名事物，解决模棱两可的地方，创建新的目录结构。保持您的更改较小。不要自己重构所有内容。分享工作的大部分是至关重要的。提交合并请求。
- en: '**Name your refactor.**'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**给您的重构起个名字。**'
- en: Give your refactor a convenient name for use in discussions and docs. Make sure
    the name is concise, clear, and descriptive. For example, “Remove dependency on
    [package X]”.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '为您的重构提供一个方便的名称，以供讨论和文档使用。确保名称简洁，清晰且描述性强。例如，“删除对 [package X] 的依赖”。 '
- en: '**Write up refactoring instructions.**'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**撰写重构说明。**'
- en: 'Create a document in your internal knowledge base and title it with the name
    from step 5\. Some tips:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在您的内部知识库中创建一个文档，并以步骤 5 的名称命名它。一些建议：
- en: State exactly what to do, and how to do it. Be brief and specific.
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准确说明要做什么，以及如何做。简明扼要，具体。
- en: '*Do NOT tell stories*: “Over the years we’ve realized that the method we’ve
    been using …”'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*不要讲故事*：“多年来，我们意识到我们一直在使用的方法…”'
- en: '*Do list specific steps*: “Find a class that has function X. Create new class
    named Y. Move function X into class Y.” The steps can’t all be plain of course,
    but challenge yourself to see how brief and specific you can make them.'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*列出具体步骤*：“找到一个包含函数 X 的类。创建一个名为 Y 的新类。将函数 X 移动到类 Y 中。” 当然，步骤不能都是平淡的，但是要挑战自己，看看能多简洁和具体。'
- en: Link your example merge request from step 3\. People should see the code before
    and after.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从第 3 步中链接您的示例合并请求。人们应该看到代码的前后变化。
- en: Finally, feel free to add some context at the end. Here, you’re welcome to provide
    the background, tell stories, link to relevant resources and discussions. That
    said, do hide this part under an expandable element, like [<details>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details).
    We want the doc focused on the pattern itself, with an option to expand the context
    as needed.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，在文档末尾添加一些背景信息是可以的。在这里，您可以提供背景资料，讲故事，链接到相关资源和讨论。也就是说，将此部分隐藏在可展开的元素下，比如[<details>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details)。我们希望文档专注于模式本身，有必要时可以展开上下文。
- en: '**Add this refactor to the list of long term refactors.**'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将此次重构添加到长期重构列表中。**'
- en: Make sure that there is a page in your knowledge base that lists all long term
    refactors. The document from step 6 should be added to that list.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保您的知识库中有一个页面列出所有长期重构。第 6 步的文档应添加到该列表中。
- en: '**Introduce this refactor to your team.**'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**向您的团队介绍此次重构。**'
- en: Use either a written announcement or a meeting. Explain how to pick a chunk
    that needs refactoring, walk them through your example. Don’t forget to link the
    instructions you wrote in step 6\. It’s very important that your engineering team
    is aware of every long term refactor currently in progress. That’s why you want
    to stick to just a few at a time, and properly introduce each one. Adding a new
    long term refactor should be a big deal.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用书面公告或会议。解释如何选择需要重构的块，引导他们通过你的示例。别忘了在步骤6中编写的说明。你的工程团队了解当前正在进行的每个长期重构是非常重要的。这就是为什么你希望一次只做几个，并适当地介绍每一个。添加一个新的长期重构应该是一件大事。
- en: '**Assign refactoring tasks.**'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**分配重构任务。**'
- en: Your refactor is now ready to be done gradually over time, but I advise against
    creating all the tasks up front in the task tracker. That would destroy one of
    the main benefits — not wasting time on unimportant or soon-to-be-deleted code.
    Instead, create tasks as they naturally come up in planning. “Hey, since you’re
    going to be changing that, maybe remove dependency on package X while you’re in
    there?”. Moreover, I advise keeping the whole umbrella-refactor away from the
    task tracker, or at least from the areas where business can see it. A successful
    long term refactor should be tracked by engineers, not the company management.
    As long as it’s written in the knowledge base, and is always present on engineers’
    minds, you should be good. It shouldn’t matter to the business whether the refactor
    is completed, and how long it takes.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在你的重构准备好随着时间逐渐进行了，但我建议不要在任务跟踪器中提前创建所有任务。这将破坏一个主要的好处——不浪费时间在不重要或即将删除的代码上。相反，创建任务应该是在规划过程中自然而然出现的。“嘿，既然你要更改那个，也许在那里删除对
    X 包的依赖？”此外，我建议将整个大规模重构远离任务跟踪器，或者至少远离企业管理可以看到的区域。一个成功的长期重构应该由工程师来跟踪，而不是公司管理层。只要它写在知识库中，并且始终存在于工程师的头脑中，你就应该没问题。对于业务来说，重构是否完成，以及花费多长时间都不重要。
- en: '**Stay aware of long term refactors.**'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**保持对长期重构的警觉。**'
- en: Get every new engineer joining the team to read the list from step 7\. Make
    sure you have this step in your onboarding process. This is also a great source
    of first tasks for them, to help them understand both the existing code, and the
    new direction. It’s easy to refer back to the list anytime (remember, the list
    must remain short), but engineers also tend to remind each other of these refactors
    when planning.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让每位新加入团队的工程师都阅读第7步的列表。确保你的入职流程中包含这一步骤。这也是他们的第一个任务的绝佳来源，帮助他们了解现有代码和新方向。随时参考这个列表很容易（记住，列表必须保持简洁），但工程师在规划时也倾向于提醒彼此这些重构。
- en: '**Complete the refactor.**'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**完成重构。**'
- en: A long term refactor doesn’t need to be 100% completed. Instead, one day you
    will find that your doc is redundant, because the codebase already speaks for
    itself. If all the major parts are refactored, and there is no more confusion
    about your direction, feel free to mark it done. This creates space for the next
    one.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 长期重构不需要100%完成。相反，有一天你会发现你的文档是多余的，因为代码库已经说明了问题。如果所有主要部分都被重构了，而且对你的方向没有更多的困惑，那么随时标记为已完成是可以的。这为下一个任务留下了空间。
- en: Having followed this process carefully, I’ve seen something awesome happen.
    The team got into the habit of self-assigning refactors as needed. When they had
    questions, they’d initiate discussions and meetings. This got everyone on the
    same page around decisions that might’ve been controversial if made alone. With
    each completed refactor task, we’d all gain new examples to draw from in upcoming
    tasks.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细遵循这个过程后，我看到了一些令人惊奇的事情发生。团队养成了根据需要自我分配重构的习惯。当他们有问题时，他们会发起讨论和会议。这使得每个人在可能会引起争议的决定上达成了共识。随着每个完成的重构任务，我们都会在即将到来的任务中获得新的例子。
- en: Compare that to working on your own for weeks or months, and blindsiding your
    team with a huge diff.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 将其与独自工作数周或数月，并且用一大堆巨大的差异给团队一个闪电式袭击进行比较。
- en: Drawbacks
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: Here are some that I can think of.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我能想到的一些。
- en: Albeit rare, some big refactors don’t have a common pattern. It’s possible that
    you’re actually dealing with multiple refactors that shouldn’t be under the same
    umbrella. Try to split them instead.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管罕见，但有些大规模重构没有共同的模式。有可能你实际上正在处理不应该放在同一篮子里的多个重构。试着将它们拆分开来。
- en: You need patience to get through these refactors. They can span a year, two
    years, who knows. During that time, the old and the new code will coexist, and
    might cause some confusion if the list from step 7 is not on everyone’s mind.
    I personally haven’t encountered this drawback in practice, because the process
    constantly keeps everyone on the same page. Due to organization and communication,
    nobody is confused about where we’re coming from, and where we are headed.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要耐心来完成这些重构。它们可能会持续一年、两年，谁知道呢。在这段时间里，旧代码和新代码将共存，并且如果第7步的列表不在每个人的心中，可能会引起一些混乱。我个人在实践中还没有遇到这个缺点，因为这个过程不断地让每个人保持一致。由于组织和沟通，没有人会对我们来自哪里以及我们将要去哪里感到困惑。
- en: Certain parts of the code may never get refactored. There’s probably a good
    reason why. It could be that this part is easy to maintain as is, and doesn’t
    need to change. Or perhaps this code is on its way out. Think of it as a win —
    you saved time and didn’t introduce bugs unnecessarily.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码的某些部分可能永远不会被重构。这可能有一个很好的理由。可能是因为这部分现在很容易维护，不需要更改。或者也许这段代码已经快要被淘汰了。把它看作是一种胜利——你节省了时间，而且没有不必要地引入错误。
- en: If you like doing everything alone, this ain’t it. This approach is designed
    to get everyone on the same page. You will have to agree on solutions and articulate
    your reasoning. If you don’t like doing that, you won’t like long term refactors.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你喜欢一个人做所有事情，那就不适用这种方法。这种方法旨在让每个人都理解一致。你将不得不在解决方案上达成一致，并阐明你的推理。如果你不喜欢这样做，你就不会喜欢长期的重构。
- en: Try it, let me know how it goes!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 试试看，然后告诉我进展如何！
