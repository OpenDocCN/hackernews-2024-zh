- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 12:54:06'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 12:54:06
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'std::launder: the most obscure new feature of C++17 · miyuki''s blog'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: std::launder：C++17 中最隐晦的新特性 · miyuki's 博客
- en: 来源：[https://miyuki.github.io/2016/10/21/std-launder.html](https://miyuki.github.io/2016/10/21/std-launder.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://miyuki.github.io/2016/10/21/std-launder.html](https://miyuki.github.io/2016/10/21/std-launder.html)
- en: 'std::launder: the most obscure new feature of C++17'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: std::launder：C++17 中最隐晦的新特性
- en: 21 Oct 2016
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年10月21日
- en: Proposal [P0137R1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0137r1.html)
    introduces a new function into the C++ standard library called `std::launder`.
    Unfortunately, this proposal is hard to understand for mere mortals.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 提案 [P0137R1](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0137r1.html)
    在 C++ 标准库中引入了一个名为 `std::launder` 的新函数。不幸的是，这个提案对普通人来说很难理解。
- en: 'This is what Botond Ballo writes about `std::launder` in his [trip report](https://botondballo.wordpress.com/2016/07/06/trip-report-c-standards-meeting-in-oulu-june-2016/)
    to the C++ Standards Commitee meeting:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Botond Ballo 在他向 C++ 标准委员会会议的[旅行报告](https://botondballo.wordpress.com/2016/07/06/trip-report-c-standards-meeting-in-oulu-june-2016/)中写到
    `std::launder` 的内容。
- en: Don’t ask. If you’re not one of the 5 or so people in the world who already
    know what this is, you don’t want or need to know.
  id: totrans-split-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不要问。如果你不是全球约5个人中的一员，已经知道这是什么，那么你不需要知道或者想知道。
- en: 'But nevertheless let’s try to get some intuition about how `std::launder` works.
    The original proposal provides an example:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，让我们试着理解一下 `std::launder` 是如何工作的。原始提案提供了一个例子：
- en: '[PRE0]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here we first initialize `u` with `1` (so `x.n` is set to 1, and `x` becomes
    the active member of the union). Next, 5 is assigned to `u.f` and `f` becomes
    active. Finally, we do a placement new and overwrite `u` with the new value 2\.
    The problem here is that `n` is const-qualified and the optimizer is allowed to
    assume that it will always remain equal to 1\. So, `std::launder` acts as an optimization
    barrier that prevents the optimizer from performing constant propagation.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们首先用 `1` 初始化 `u`（所以 `x.n` 被设置为 1，并且 `x` 成为联合的活动成员）。接下来，`u.f` 被赋值为 5，`f` 变为活动成员。最后，我们进行了放置新的操作，并用新值
    `2` 覆盖了 `u`。这里的问题在于 `n` 是 const 限定的，优化器可以假设它将始终等于 1。因此，`std::launder` 充当了优化障碍，防止优化器执行常量传播。
- en: 'This example is explained in more detail in the answer to a question on Stack
    Overflow: [What is the purpose of std::launder?](http://stackoverflow.com/questions/39382501/what-is-the-purpose-of-stdlaunder).'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子在 Stack Overflow 上对问题的回答中有更详细的解释：[What is the purpose of std::launder?](http://stackoverflow.com/questions/39382501/what-is-the-purpose-of-stdlaunder)。
- en: Alisdair Meredith also briefly [mentions](https://youtu.be/-rIixnNJM4k?t=583)
    a real-life use case in his talk “C++17 in Breadth” from CppCon 2016\. He tells
    us that this function might be handy when dealing with containers of const-qualified
    elements.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: Alisdair Meredith 也在他的演讲“C++17 全览”中简要提到了一个现实生活中的用例，[链接](https://youtu.be/-rIixnNJM4k?t=583)。他告诉我们，当处理包含常量限定元素的容器时，这个函数可能会很方便。
- en: 'Finally, let’s look at another example. The GCC maintainers initially [implemented](https://gcc.gnu.org/ml/libstdc++/2016-10/threads.html#00152)
    `std::launder` as a no-op, i.e. something similar to:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看另一个例子。GCC 维护者最初将 `std::launder` [实现](https://gcc.gnu.org/ml/libstdc++/2016-10/threads.html#00152)为无操作，即类似于：
- en: '[PRE1]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'but Richard Smith (the lead developer of Clang) came up with an example which
    is compiled correctly by Clang, but miscompiled by GCC:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但是 Richard Smith（Clang 的首席开发者）提出了一个例子，Clang 正确编译，但 GCC 编译错误：
- en: '[PRE2]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The optimizer folds `h` into something similar to:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 优化器将 `h` 折叠成类似于以下内容：
- en: '[PRE3]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: (when compiled correctly, this function should return 3).
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: （正确编译时，此函数应返回 3）。
- en: 'This example defines a class hierarchy consisting of two classes: `A` and `B`.
    `A` defines a virtual member function `f` which is overridden in `B`. Function
    `f` in `A` does a placement new on the `this` pointer and replaces the object
    with a newly created instance of `B` and then returns 1\. `f` in `B` does the
    opposite, i.e. replaces the object with an instance of `A` and then returns 2.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子定义了一个类层次结构，包括两个类：`A` 和 `B`。`A` 定义了一个虚成员函数 `f`，在 `B` 中被重写。函数 `f` 在 `A` 中对
    `this` 指针进行了放置新操作，并用 `B` 的新实例替换对象，然后返回 1。`B` 中的 `f` 做相反的操作，即用 `A` 的实例替换对象，然后返回
    2。
- en: Function `h` allocates an instance of `A` on the stack and invokes `f` twice.
    Note that the second call is performed on the “laundered” pointer.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `h` 在堆栈上分配了一个 `A` 的实例，并两次调用 `f`。注意第二次调用是在“laundered”指针上执行的。
- en: This example resembles the first one, but this time the mutated const value
    is the `vptr` of `a` (i.e., a pointer to the vtable of either `A` or `B`). GCC
    has an optimization called “devirtualization”, i.e. the optimizer tries to figure
    out the dynamic type of each object in each virtual call and if the type is known,
    the compiler replaces such virtual call with a direct call. This time the optimizer
    is overly optimistic and fails to recognize that even stack-allocated objects
    can now change their dynamic type.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子类似于第一个例子，但这次突变的常量值是`a`的`vptr`（即指向`A`或`B`的虚表）。GCC有一种称为“虚拟化”的优化，即优化器尝试确定每个虚拟调用中每个对象的动态类型，如果类型已知，编译器将此类虚拟调用替换为直接调用。这次优化器过于乐观，未能意识到即使是堆栈分配的对象现在也可以改变它们的动态类型。
- en: Note that C++17 support in GCC is still experimental, and such bugs are expected.
    This one has been spotted and a [fix](https://gcc.gnu.org/ml/libstdc++/2016-10/msg00194.html)
    already exists.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，GCC中的C++17支持仍然处于实验阶段，因此可能会出现此类错误。已经发现了这个问题，并且已经存在[修复方案](https://gcc.gnu.org/ml/libstdc++/2016-10/msg00194.html)。
