- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:44:41'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:44:41'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Queues aren't the right abstraction - Inngest Blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 队列并不是正确的抽象化方式 - Inngest 博客
- en: 来源：[https://www.inngest.com/blog/queues-are-no-longer-the-right-abstraction](https://www.inngest.com/blog/queues-are-no-longer-the-right-abstraction)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.inngest.com/blog/queues-are-no-longer-the-right-abstraction](https://www.inngest.com/blog/queues-are-no-longer-the-right-abstraction)
- en: Amazon SQS will be [20 years old](https://aws.amazon.com/about-aws/whats-new/2004/11/03/introducing-the-amazon-simple-queue-service/)
    later this year. It still offers precisely what it advertises-a [simple queue
    service](https://aws.amazon.com/sqs/). It's also still great. During Prime Day
    2022, SQS handled [over 70 million messages per second at peak](https://aws.amazon.com/blogs/aws/amazon-prime-day-2022-aws-for-the-win/).
    If you want a queue, this, or other time-tested solutions like RabbitMQ or ActiveMQ,
    work well.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊 SQS 将在今年晚些时候迎来[20周年](https://aws.amazon.com/about-aws/whats-new/2004/11/03/introducing-the-amazon-simple-queue-service/)。它仍然提供它所宣传的——[简单队列服务](https://aws.amazon.com/sqs/)。并且依旧表现出色。在
    2022 年 Prime Day，SQS 在高峰时期每秒处理[超过7000万条消息](https://aws.amazon.com/blogs/aws/amazon-prime-day-2022-aws-for-the-win/)。如果你需要队列，像
    RabbitMQ 或 ActiveMQ 这样的经过时间验证的解决方案也很有效。
- en: But you don't want a queue. You want something better.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但你不只是需要一个队列。你需要更好的解决方案。
- en: The Goal of Message Queues
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息队列的目标
- en: Why have message queues been so widely used in networked systems and environments
    by developers over the last few decades?
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 过去几十年来，为什么消息队列在开发人员中被广泛使用于网络系统和环境中？
- en: 'Many workloads within an application are long-running: notifications, data
    processing, billing, etc. These operations can be time-consuming or resource-intensive
    and you don''t want them blocking the rest of the application. Message queues
    offload these functions from the critical path (*or thread*) and allow you to
    execute them asynchronously. The queue will enable applications to remain responsive
    while tasks are processed in the background.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中许多工作负载是长时间运行的：通知、数据处理、计费等。这些操作可能耗时或消耗资源，并且你不希望它们阻塞应用程序的其他部分。消息队列将这些功能从关键路径（*或线程*）中卸载，并允许你异步执行它们。队列将使应用程序保持响应性，同时在后台处理任务。
- en: 'So, queues run critical workloads, just not on the critical path. You need
    queues for three core reasons:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，队列运行关键工作负载，只是不在关键路径上。你需要队列有三个核心原因：
- en: They offer reliability through guaranteed delivery, persistence, and dead letter
    queues, so developers know they aren't sending workloads into a black hole.
  id: totrans-split-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过保证传递、持久性和死信队列，它们提供可靠性，因此开发人员知道它们并非将工作负载发送到黑洞中。
- en: They allow developers to run critical, longer-running processes. These processes
    often involve complex business logic, data transformations, or integration with
    external systems. By offloading these tasks to a queue, developers can ensure
    they are executed reliably without blocking the main application flow.
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们允许开发人员运行关键的长时间运行过程。这些过程通常涉及复杂的业务逻辑、数据转换或与外部系统的集成。通过将这些任务卸载到队列中，开发人员可以确保它们可靠地执行，而不会阻塞主应用程序流程。
- en: Queues also offer horizontal scalability by allowing multiple consumers to process
    messages in parallel. This means applications can handle high throughput and scale
    as the workload increases. Queues can also handle spikes in workload well, leveling
    out load and allowing applications to remain stable.
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 队列还通过允许多个消费者并行处理消息来提供水平扩展能力。这意味着应用程序可以处理高吞吐量，并在工作负载增加时进行扩展。队列还可以很好地处理工作负载的突发情况，平衡负载并使应用程序保持稳定。
- en: At a higher level, queues are a way to build more efficient, functional, and
    reliable applications. When you add queues to your application, you go from having
    to fit every operation into a request-response framework to having the ability
    to decouple and prioritize workloads. This allows you to design your application
    around the optimal user experience rather than being constrained by the limitations
    of synchronous processing. By leveraging queues, you can create applications that
    are more responsive, scalable, and resilient to failures.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从更高层面来看，队列是构建更高效、功能性和可靠的应用程序的一种方式。当你将队列添加到应用程序中时，你从必须将每个操作适应请求-响应框架的情况转变为能够解耦和优先处理工作负载的能力。这使你能够设计围绕最佳用户体验的应用程序，而不受同步处理限制的约束。通过利用队列，你可以创建更响应、可扩展和对故障更具韧性的应用程序。
- en: Why do developers need queues today?
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 今天为什么开发人员需要队列？
- en: Exactly the same reasons. That is why developers still reach for them. All of
    the above is still true. You want decoupling? Queues work. You want scalability?
    Queues work. You want flexibility? Queues work.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 恰好是同样的原因。这就是为什么开发人员仍然选择它们的原因。上述所有情况仍然适用。你想要解耦吗？队列适用。你想要可扩展性吗？队列适用。你想要灵活性吗？队列适用。
- en: But queues suck *from an implementation point of view*. The underlying idea
    is excellent, but anyone who has built infrastructure with message queues knows
    the queue is just the pipe. And you need a lot of architecture to support that
    pipe.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但从实现的角度来看，队列有些不尽如人意。底层思想很好，但任何使用消息队列构建基础设施的人都知道，队列只是一个通道。而你需要大量的架构来支持这个通道。
- en: Queues Are The Wrong Abstraction
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 队列不是正确的抽象
- en: Message queues are an abstraction. They abstract away the communication protocols
    and data storage required to enqueue and pass messages.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 消息队列是一个抽象概念。它们抽象出了需要入队和传递消息所需的通信协议和数据存储。
- en: 'But in 2024, queues are no longer the right abstraction for building modern
    systems. The underlying concept of queues still holds, but building a system with
    queues requires much more than just the queue itself. Once developers have implemented
    the primary queue, they find they need:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但在2024年，队列已不再是构建现代系统的正确抽象。队列的基本概念仍然适用，但构建具有队列的系统需要的不仅仅是队列本身。一旦开发人员实现了主要的队列，他们会发现他们需要：
- en: '**Chaining** to run tasks in a sequence'
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链式处理**，按顺序运行任务。'
- en: '**Concurrency** to control how many jobs are executed at one time.'
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并发控制**，控制同时执行的作业数量。'
- en: '**Back-off** to gracefully handle rate-limited API calls.'
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**退避策略**，优雅地处理速率限制的API调用。'
- en: '**Debouncing** to prevent functions executing multiple times.'
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**去抖动**，防止函数多次执行。'
- en: '**State persistence and management** as you''ll have to share state across
    different workers and queues.'
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态持久性和管理**，因为你需要在不同的工作者和队列之间共享状态。'
- en: '**Prioritization** to determine which messages are most critical.'
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先级排序**，以确定哪些消息最为关键。'
- en: '**Error handling** to include retries for failures and timeouts.'
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理**，包括失败和超时的重试。'
- en: '**Idempotency** to ensure non-duplication and prevent unwanted side effects.'
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**幂等性**，以确保不重复执行并防止意外副作用。'
- en: '**Cancellation** to abort messages and in-progress jobs when required.'
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**取消操作**，在必要时中止消息和正在进行的作业。'
- en: '**Observability** to monitor and optimize the system.'
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可观察性**，监视和优化系统。'
- en: '**Recovery tooling** to help understand errors and reprocess failed events.'
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恢复工具**，帮助理解错误并重新处理失败事件。'
- en: Say you want concurrency. Now you're actually thinking about the workers that
    are consuming the messages. You'll need to add more workers and/or adjust message
    polling logic within the worker's code. Now, you need to think about the visibility
    timeout for each message, among other things, and consider the downstream implications
    of messages being processed more than once.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要并发处理。现在你要考虑消费消息的工作者。你需要增加更多工作者和/或调整工作者代码中的消息轮询逻辑。现在，你需要考虑每条消息的可见超时时间等因素，并考虑消息被处理多次的下游影响。
- en: Repeat that decision tree for every component of the infrastructure. It isn't
    just a matter of grabbing an SQS URL and having SQS take care of everything. All
    of this needs to be built *around* the message queue. Even if you don't immediately
    need this infrastructure, you'll have to build it out fully over time to build
    a robust message system.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对基础设施的每个组件都要重复这个决策树。这不仅仅是获取一个SQS URL并让SQS处理所有事务的问题。所有这些都需要围绕消息队列进行构建。即使你现在不需要这个基础设施，随着时间的推移，你也必须完全构建它来构建一个强大的消息系统。
- en: 'This is challenging and tedious work. There are ways to lessen the load - [Celery](https://docs.celeryq.dev/en/stable/getting-started/introduction.html),
    [Resque](https://github.com/resque/resque), [BullMQ](https://bullmq.io/) - but
    then you have the problems of these half-abstractions: lack of a polyglot option,
    slightly different implementations, and a learning curve for developers who are
    not familiar with these tools leading to increased complexity and maintenance
    overhead.'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是具有挑战性和乏味的工作。有减轻负担的方法 - [Celery](https://docs.celeryq.dev/en/stable/getting-started/introduction.html)，[Resque](https://github.com/resque/resque)，[BullMQ](https://bullmq.io/)
    - 但使用这些半抽象存在问题：缺乏多语言选项，略有不同的实现，以及对这些工具不熟悉的开发人员的学习曲线，增加了复杂性和维护开销。
- en: 'So, why do developers still reach for message queues if they are the wrong
    abstraction? Two reasons:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么开发人员仍然使用消息队列，即使它们不是正确的抽象？有两个原因：
- en: They understand message queues. Even if they know they'll have to implement
    the infrastructure around the queue, developers have been working with SQS, RabbitMQ,
    etc., for 20 years. It's a hassle, but a *known* hassle.
  id: totrans-split-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们了解消息队列。即使他们知道他们将不得不实现队列周围的基础设施，开发人员也已经使用SQS、RabbitMQ等工具有20年了。这是一件麻烦事，但却是*众所周知的*麻烦。
- en: They don't know there is a better abstraction.
  id: totrans-split-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们不知道有更好的抽象化。
- en: Over time, the abstraction has evolved and moved up the stack.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，抽象化已经发展并向上移动到堆栈。
- en: Reliability Through Durability
  id: totrans-split-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过耐久性实现可靠性
- en: Durable execution is the right abstraction instead of dealing with queues directly.
    Durable execution combines two elements to provide reliability and guarantees
    to application workflows.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 耐久执行是正确的抽象化，而不是直接处理队列。耐久执行结合两个元素，为应用工作流程提供可靠性和保证。
- en: First, **durability**. Durable execution is fault-tolerant execution, guaranteeing
    that code will run to completion even with failures or restarts. This removes
    part of the problem above. With durable execution, developers don't have to build
    out processes to guarantee execution, such as implementing retry logic, handling
    failures, or persisting state, as these capabilities are provided out of the box
    by the durable execution runtime.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是**耐久性**。耐久执行是容错执行，保证代码即使在失败或重新启动时也能完成执行。这解决了上述问题的一部分。有了耐久执行，开发人员不必构建确保执行的流程，比如实现重试逻辑、处理失败或持久化状态，因为这些能力由耐久执行运行时提供。
- en: But durability alone isn't enough. Reliability through durable execution requires
    **flow control**. Flow control is everything listed above that you have to build
    out for reliable workflows around queues. While durable execution focuses on guaranteeing
    the execution of tasks and handling failures, flow control deals with managing
    how or when the code is executed.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 但单单耐久性是不够的。通过耐久执行实现可靠性需要**流控制**。流控制涵盖了您必须为可靠的队列工作流程构建的所有内容。虽然耐久执行侧重于保证任务的执行和处理失败，但流控制则处理如何或何时执行代码。
- en: Flow control encompasses various aspects such as concurrency control, rate limiting,
    resource sharing, and prioritization. Let's say you have a processing workflow
    for transcribing video. What does this entail?
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 流控制涵盖了各种方面，如并发控制、速率限制、资源共享和优先级设置。假设您有一个用于转录视频的处理工作流程。这意味着什么？
- en: You need multiple queues for transcription, summarization, and upload. Since
    these have to run in series, you must manage the state between them.
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要为转录、总结和上传设置多个队列。由于这些必须按顺序运行，您必须在它们之间管理状态。
- en: You have to trigger the initial transcription with one event. Then, the next
    two are triggered by the previous steps in the process.
  id: totrans-split-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须通过一个事件触发初始转录。然后，接下来的两个步骤由前一个步骤触发。
- en: You have to control for concurrency to manage the amount of videos being processed
    by a single user at once.
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须控制并发性，以管理单个用户同时处理的视频数量。
- en: You want to have some level of prioritization so you can control which users'
    workflows run first.
  id: totrans-split-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您希望有一定程度的优先级设置，以便控制哪些用户的工作流程先运行。
- en: You must implement retry logic in case any step fails, back-off logic if any
    API is rate-limited, debouncing to stop multiple calls, and observability to ensure
    you can understand what happens within the operations.
  id: totrans-split-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须实现重试逻辑，以防任何步骤失败，后退逻辑如果任何API受到速率限制，去抖动以阻止多次调用，和可观察性以确保您可以理解操作中发生了什么。
- en: Implementing this at the queue level is a serious effort. Will you encapsulate
    all this inside a single function or break it into different tasks for specific
    queues? Are you going to save the state in the database for every step? Or YOLO
    it and just create a call chain?
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在队列级别实现这一点是一项严肃的工作。您会将所有这些封装在一个单一函数内部，还是将其拆分为针对特定队列的不同任务？您将为每个步骤在数据库中保存状态吗？还是放任不管，只是创建一个调用链？
- en: 'With a durable function, those problems are abstracted away to give you this:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过耐久函数，这些问题被抽象化处理，为您提供了以下功能：
- en: '[PRE0]'
  id: totrans-split-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You don't see all the infrastructure because it is abstracted away, but this
    handles concurrency, retries, state, and the underlying queues. It is triggered
    by a `video.uploaded` event then will continue to completion or show you the errors
    (and allow you to replay if necessary).
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你看不到所有的基础设施，因为它被抽象化处理，但这处理并发性、重试、状态和底层队列。它由`video.uploaded`事件触发，然后将继续执行直到完成或显示错误（并允许您在必要时重新播放）。
- en: 'What might this look like with the partial abstractions you see in something
    like Celery and Python? Firstly, we''d need a message broker service as Celery
    doesn''t abstract that away. We''d then add that to our Celery workers as a broker
    URL. Then we have to think about flow control. How are we managing prioritization
    and concurrency, and on a per-user basis? This is possible in Celery by dynamically
    updating the configuration:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用像 Celery 和 Python 中的部分抽象，它可能会是什么样子呢？首先，我们需要一个消息代理服务，因为 Celery 并没有抽象这部分。然后，我们将其添加到我们的
    Celery 工作进程中作为代理 URL。接下来，我们需要考虑流程控制。我们如何管理优先级和并发性，以及基于每个用户的情况？在 Celery 中，可以通过动态更新配置来实现这一点：
- en: '[PRE1]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then we''d use that within our `tasks.py` file:'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以在我们的 `tasks.py` 文件中使用它：
- en: '[PRE2]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Each of `transcribe_video`, `summarize_transcript`, and `write_to_db` will be
    in utils.py and then we can call `process_video_event` from our actual application.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `transcribe_video`、`summarize_transcript` 和 `write_to_db` 将在 `utils.py` 中，并且我们可以从实际应用程序中调用
    `process_video_event`。
- en: What's wrong with this? Well, it's just more complicated. To our point about
    Celery being a partial abstraction, we're still dealing with the low-level message
    queue directly, and then we have to set up a lot of configuration. The flow control
    we want (prioritization, concurrency) isn't easily embedded into our code. Instead,
    we have to use a workaround to update the Celery configuration for each user.
    State and logic are also separated, making it more difficult to understand the
    workflow.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这有什么问题？嗯，它只是更复杂了。关于 Celery 是部分抽象的观点，我们仍在直接处理低级消息队列，然后不得不设置大量的配置。我们想要的流程控制（优先级、并发性）不容易嵌入到我们的代码中。相反，我们必须使用一种解决方案为每个用户更新
    Celery 配置。状态和逻辑也被分离开来，使得工作流更难理解。
- en: Compare that to this example, which is doing an even more complicated job and
    pausing the queue for a period of time.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将此与执行更复杂任务并暂停队列一段时间的示例进行比较。
- en: '[PRE3]'
  id: totrans-split-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Much easier to follow even though it is a long-running workflow. Say you are
    billing a customer and need to retry if the billing fails. Usually, a dunning
    process takes place over a few days. How would you handle that with a queue?
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是一个长时间运行的工作流，也更容易跟踪。比如说，你正在向客户进行结算，如果结算失败需要重试。通常情况下，追索过程会持续几天。你如何使用队列处理这种情况？
- en: With a lot of Ibuprofen. Some queues give you the ability to add a delay, but
    usually in the timeframe of seconds and minutes, not days you'd need here. So
    you'd have to save the state and start another queue one day later. For this,
    you'll probably end up with a mess of cron jobs and queues, managing state and
    functions between them.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 需要大量的布洛芬。有些队列允许你添加延迟，但通常是在秒和分钟的时间范围内，而不是你在这里所需的几天。因此，你必须保存状态，并在一天后启动另一个队列。为此，你可能最终会使用一堆
    cron 作业和队列，管理它们之间的状态和函数。
- en: 'With durable execution, all this can be encapsulated in a single workflow function:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用持久化执行，所有这些都可以封装在一个单独的工作流函数中：
- en: The entire process sleeps for a day before resuming where it left off. The developer
    has to manage none of the state during this time—it just happens. Cross-language
    support is first-class as the difficult parts of managing queues are completely
    abstracted away.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 整个流程在暂停一天后继续。开发人员在此期间无需管理任何状态——一切都自动完成。跨语言支持是一流的，因为管理队列的复杂部分已完全抽象化。
- en: 'Durable execution delivers on the original goal of queues: To reliably execute
    code that runs in a background process outside of synchronous API requests.'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 持久化执行实现了队列的原始目标：可靠地执行在异步 API 请求之外运行的代码。
- en: Don't Build With Raw Queues
  id: totrans-split-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要使用原始队列构建
- en: Could you build this yourself? Sure. If you have been using queues since their
    inception, you probably understand the workarounds needed to get them into an
    actual functional state.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你能自己构建这个系统吗？当然可以。如果你从一开始就在使用队列，你可能已经理解了将它们置于实际功能状态所需的各种变通方法。
- en: Should you? No. It is going to be a resource suck, both in time and money, to
    implement all this just to have a durable execution engine that is available off-the-shelf.
    All the infrastructure, all the logic, all the state - it's just tedious. If you
    are interested in the nuts and bolts of message queues, go nuts. For everyone
    else, use the higher-level abstraction that is now available - durable execution.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该这样做吗？不。实施所有这些只是为了拥有一个现成可用的持久化执行引擎，会消耗大量时间和金钱，还需要大量的基础设施、逻辑和状态管理——这实在太烦琐了。如果你对消息队列的具体细节感兴趣，可以深入研究。对于其他人来说，使用现有的高级抽象层即可——持久化执行。
- en: To see how teams use durable execution in production today, check out how [Soundcloud
    streamlined dynamic video generation](/customers/soundcloud?ref=blog), [Resend
    sends email using serverless workflows](/customers/resend?ref=blog), and [Aomni
    productionized AI-driven sales flows](/customers/aomni?ref=blog). When you want
    to start with durable execution yourself, you can [sign up for Inngest](https://app.inngest.com/sign-up)
    today or [reach out to sales engineering](/contact?ref=blog).
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解团队如何在生产中使用持久执行，请查看[Soundcloud简化动态视频生成](/customers/soundcloud?ref=blog)，[Resend使用无服务器工作流发送电子邮件](/customers/resend?ref=blog)，以及[Aomni推广AI驱动的销售流程](/customers/aomni?ref=blog)。当您想要自己开始持久执行时，您可以今天就[注册Inngest](https://app.inngest.com/sign-up)，或者[联系销售工程部门](/contact?ref=blog)。
