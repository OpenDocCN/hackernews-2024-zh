- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 13:06:54'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:06:54
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Textual Healing – sim.coffee
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本疗法 - sim.coffee
- en: 来源：[https://sim.coffee/textual-healing/](https://sim.coffee/textual-healing/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://sim.coffee/textual-healing/](https://sim.coffee/textual-healing/)
- en: '[It’s a Token Issue](#tokenizer)'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[这是一个令牌问题](#tokenizer)'
- en: '[The Result](#results)'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[结果](#results)'
- en: '[Surprise](#surprise)'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[惊喜](#surprise)'
- en: We’re seeing a lot of activity on [our Discord](https://discord.gg/7fpmbqfXcJ)
    lately. People are using [Codea](http://itunes.apple.com/app/id439571171?mt=8),
    and they’re complaining when it doesn’t work! Which is *freaking awesome*
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最近我们的 [Discord](https://discord.gg/7fpmbqfXcJ) 上活跃度很高。人们正在使用 [Codea](http://itunes.apple.com/app/id439571171?mt=8)，当它不能正常工作时，他们会抱怨！这*太棒了*。
- en: After 14 years of making apps, the thing I’ve come to appreciate most is when
    someone gives their time and attention to what you have created. To the point
    where it bugs them when it doesn’t work how they expect, and they tell you about
    it. You should appreciate every one of these people, even the frustrated ones
    who are running short on patience
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在制作应用程序的14年之后，我最感激的是当有人花时间和注意力关注您所创造的内容。尤其是当他们因为它不如他们期望的那样工作而感到困扰并告诉您时。您应该感激每一个这样的人，即使是那些因为耐心不足而感到沮丧的人。
- en: Someone posted that double tapping the word `_bar` in the following code did
    not select the text “_bar”, but instead selected “bar” (excluding the underscore)
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有人发布说，双击以下代码中的 `_bar` 一词并没有选择“_bar”这段文本，而是选择了“bar”（不包括下划线）
- en: '[PRE0]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I knew immediately why this was happening. Our `UITextInputTokenizer` was why
    it was happening. I checked out my subclass of `UITextInputStringTokenizer`^([1](#165e6f52-80ea-42ba-9a36-d82931aa4386))
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我立即知道为什么会发生这种情况。我们的 `UITextInputTokenizer` 就是它发生的原因。我检查了我自定义的 `UITextInputStringTokenizer`
    的子类^([1](#165e6f52-80ea-42ba-9a36-d82931aa4386))
- en: '[PRE1]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*2013*. I started this file eleven years ago'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*2013*。我十一年前开始这个文件。'
- en: It’s a Token Issue
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这是一个令牌问题
- en: '`UITextInputTokenizer` is what the iOS text system uses to query your custom
    text input system about the units of text within it, at different granularities.
    It has a wild and esoteric API that encompasses the following four methods:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITextInputTokenizer` 是 iOS 文本系统用来查询您的自定义文本输入系统中不同粒度的文本单元的工具。它有一个包含以下四个方法的复杂且神秘的
    API：'
- en: '[PRE2]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `UITextPosition` and `UITextRange` objects are opaque types that you implement
    with custom types that are meaningful to your text system. (That is, Apple’s text
    system doesn’t care what they are, so long as it can give them to you and get
    meaningful results back. For example, Codea uses `AVAudioPlayer` for `UITextPosition`s,
    and `CLLocation2D` for `UITextRange`^([2](#9df35c91-6dc2-4036-9ce0-a9f104e5dc70)))
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITextPosition` 和 `UITextRange` 对象是不透明类型，您可以使用具有您的文本系统中有意义的自定义类型来实现它们。换句话说，Apple
    的文本系统不关心它们是什么，只要它能把它们交给您并获取到有意义的结果即可。例如，Codea 使用 `AVAudioPlayer` 作为 `UITextPosition`，使用
    `CLLocation2D` 作为 `UITextRange`^([2](#9df35c91-6dc2-4036-9ce0-a9f104e5dc70)))'
- en: The methods basically query your text system for *boundaries* with *granularities*
    in *directions*. Boundaries are the “edges” of text in whatever the specified
    granularity is — word, sentence, paragraph, document, and so on. “Is this *position*
    at the *edge* of a *word* if I’m moving *forward*?” and you reply with “Why, yes.
    It is”, or no
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法基本上是查询您的文本系统，以了解在不同方向上的“边界”与“粒度”。边界是文本在指定粒度（如单词、句子、段落、文档等）中的“边缘”。例如，“如果我向前移动，这个位置是不是单词的边缘？”你可能回答：“是的，它是。”或者“不是。”
- en: This is very important for keyboard navigation and selection. When you hold
    option and hit the arrow keys, you jump across by word. This is how the text system
    understands what a “word” is and where the next one lives. Same thing for double-tapping
    a word to select, or triple-tapping to get a line
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这对键盘导航和选择非常重要。当您按住 Option 键并按箭头键时，您会跳到下一个单词。这就是文本系统理解“单词”及其位置的方式。双击单词选择，三次点击选择整行。
- en: Apple provides `UITextInputStringTokenizer` (note the `String` in there), a
    concrete subclass of the `UITextInputTokenizer` protocol, so you don’t have to
    write your own. Being lazy, we used this as the basis for our code tokenizer a
    long time ago
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: Apple 提供了 `UITextInputStringTokenizer`（注意其中的 `String`），它是 `UITextInputTokenizer`
    协议的一个具体子类，因此您不必自己编写。我们曾经基于此作为我们代码标记器的基础，因为我们懒得写很久了。
- en: At the time, I would find features in Xcode’s code editor that I liked (I’ll
    document some below) and then figure out how to implement them within the context
    of a tokenizer, falling back to the basic string tokenizer when I didn’t specifically
    want to handle it
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，我会在 Xcode 的代码编辑器中找到我喜欢的功能（下面我将记录一些），然后在标记器的上下文中找出如何实现它们，当我不想特别处理时，则返回到基本的字符串标记器
- en: Double-tapping a word was one of those cases where we fell back to the string
    tokenizer. The problem is, the string tokenizer is designed for natural language,
    not code. Words in English don’t typically include underscores, and so they are
    not selected because they form a boundary at the word granularity level, and the
    `rangeEnclosingPosition` method will not include them as part of a word
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 双击一个单词是我们回退到字符串标记器的其中一种情况。问题是，字符串标记器设计用于自然语言而不是代码。在英语中，单词通常不包括下划线，因此它们不会被选中，因为它们在单词粒度级别上形成边界，并且`rangeEnclosingPosition`方法不会将它们包括在单词中
- en: The other problem is that I wrote *Jam* as a general code editor, not specific
    to Lua, so the above code tokenizer was not aware of how Lua identifiers were
    formed, or where the symbol boundaries should be. I had focused our code tokenizer
    on how to navigate whitespace and allow for exact caret placement^([3](#51675be5-f78f-475a-9933-fae14827f803))
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是，我把*Jam*写成一个通用的代码编辑器，而不是特定于 Lua 的，所以上述代码标记器不知道 Lua 标识符是如何形成的，或者符号边界应该在哪里。我把我们的代码标记器集中在如何导航空白和允许精确插入符位置^([3](#51675be5-f78f-475a-9933-fae14827f803))
- en: The Result
  id: totrans-split-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结果
- en: 'I decided to write a new, Lua-specific tokenizer, which is now used for all
    Lua editors in Codea. But man, is the `UITextInputTokenizer` API tough to implement
    in a way that doesn’t end up as a mess of special cases! Below are the cases I
    handled, with everything else falling back to original code tokenizer:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定编写一个新的、特定于 Lua 的标记器，现在所有的 Codea Lua 编辑器都在使用。但是，`UITextInputTokenizer` 的 API
    设计要避免特殊情况成为一团糟非常困难！以下是我处理过的情况，其他情况都回退到原始代码标记器：
- en: Command back arrow for indented code
  id: totrans-split-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 命令后箭头用于缩进代码
- en: Go to the end of a line of indented code in Xcode
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 转到 Xcode 缩进代码行的末尾
- en: Hit ⌘←
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 ⌘←
- en: The caret jumps to the start of the line — but *not the start of the whitespace!*
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 插入符跳转到行的开始 — 但*不是空白的开始！*
- en: Hit ⌘←
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 ⌘←
- en: The caret jumps to the start of the line, at the start of the whitespace
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 插入符跳转到行的开始，在空白处的开始
- en: Here it is in Codea^([4](#acc4a566-1df1-40d3-ae0a-1fe2517dd8c7))
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在 Codea 中的样子^([4](#acc4a566-1df1-40d3-ae0a-1fe2517dd8c7))
- en: Exact caret placement
  id: totrans-split-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 精确的插入符位置
- en: Also a previous feature, here it is recorded in the iOS simulator (to show where
    the taps are occurring)
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 同样是之前的一个特性，在 iOS 模拟器中记录下来（以展示点按发生的位置）
- en: Respect for symbol boundaries
  id: totrans-split-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 尊重符号边界
- en: Below is navigating with the option key to jump by “word” (symbol). The ugly,
    `_main_Test` member is related to the original bug report. You can see we now
    traverse the symbol as a single entity
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用选项键跳转到“单词”（符号）的导航。丑陋的 `_main_Test` 成员与原始的错误报告相关联。您可以看到我们现在将符号作为一个单独的实体遍历
- en: Supplying ranges for symbols as “words”
  id: totrans-split-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为符号提供范围作为“单词”
- en: Demonstrating fixed behaviour around selecting “_” when they form part of an
    identifier
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 演示选择“_”作为标识符一部分时的固定行为
- en: Falling back to natural language tokenization
  id: totrans-split-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 回退到自然语言的标记化
- en: Of course, because quoted strings are considered symbols in the code editor,
    double-tapping on one in this system would typically select the entire string.
    In cases like this, we exclude these symbols and defer to the `UITextInputStringTokenizer`
    to get the regular text editing experience when inside strings, comments, and
    so on
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，因为引号字符串在代码编辑器中被视为符号，双击其中一个在这个系统中通常会选择整个字符串。在这种情况下，我们排除这些符号，并推迟到`UITextInputStringTokenizer`以获取正常的文本编辑体验，当在字符串、注释等内部时
- en: Addendum
  id: totrans-split-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录
- en: As I sat down to write this post, I had finished rewriting the Codea tokenizer
    last night, Sunday April 7, 2024, publishing a new beta build and promptly falling
    asleep
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当我坐下来写这篇文章时，我昨晚重新编写了 Codea 的标记器，2024 年 4 月 7 日星期日发布了一个新的测试版本，然后迅速睡着了
- en: And I began this piece by talking about user *complaints*. But as I was half-way
    through writing it tonight, a very lovely and dear email came into my inbox. It
    is as follows
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 而我开始写这篇文章时，我谈到了用户的*投诉*。但就在今晚我写这篇文章的一半时，我收到了一封非常可爱和亲切的电子邮件。它如下所示
- en: '*I suspect you don’t get enough of this kind of beta-feedback, so..:*'
  id: totrans-split-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*我怀疑您没有足够多这类的测试反馈，所以..：*'
- en: '*Unless I’m very much mistaken, you have, at some point, made the cursor-positioning
    and line-selection in the editor work much better than it used to, at least for
    me.*'
  id: totrans-split-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*除非我大错特错，你在某个时候改进了编辑器中的光标定位和行选择，比过去要好得多，至少对我来说是这样。*'
- en: '*I used to have trouble all the time, when selecting lines using the line-number
    gutter and conversely when trying to place the cursor at the beginning of a line
    (these two operations would get mixed up in other words), but now it feels much
    easier / needs less precision or whatever made me fail before.*'
  id: totrans-split-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*我以前经常遇到麻烦，当使用行号侧边栏选择行时，或者试图将光标置于行首时（换句话说，这两个操作会混在一起），但现在感觉要容易得多 / 需要的精度或者之前导致我失败的任何因素都没有了。*'
- en: '*It is so often these minute quality-of-life things that makes all the difference,
    especially when you use them all the time (ie. most features in a code-editor
    I guess, if taken across the whole user-base).*'
  id: totrans-split-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*往往是这些微小的生活质量改善，起到了决定性作用，特别是当你经常使用它们时（即大多数代码编辑器中的功能，如果放在整个用户群体中来看）。*'
- en: '*I seem to remember bitching to you about this at least a couple of times (my
    walls have certainly listened to a LOT of it), so it only stands to reason that
    I also take the time to dredge the following up from the bottom of my heart (or
    whatever blackened piece of charcoal is left):*'
  id: totrans-split-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*我似乎记得至少跟你抱怨过几次（我的墙壁肯定听过很多），所以我理所当然地也花时间从心底挖掘以下内容（或者说从我的心底残存的一块黑炭中）：*'
- en: '*Thank You VERY Much!*'
  id: totrans-split-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*非常感谢你！*'
- en: Someone noticed!
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有人注意到了！
