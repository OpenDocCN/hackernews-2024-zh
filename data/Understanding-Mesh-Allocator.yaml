- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:15:28'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:15:28
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Understanding Mesh Allocator
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Mesh 分配器
- en: 来源：[https://veera.app/mesh_allocator.html](https://veera.app/mesh_allocator.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://veera.app/mesh_allocator.html](https://veera.app/mesh_allocator.html)
- en: Applications written in manually memory managed languages might fail to allocate
    memory, even when the required amount of space is available in memory. This problem
    is known as memory [fragmentation](https://en.wikipedia.org/wiki/Fragmentation_(computing))
    and can be solved by compaction, where all allocated objects are moved together
    to make a contiguous block of free space available.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 用手动内存管理语言编写的应用程序可能会在内存中有足够的空间时，申请内存失败。这个问题被称为内存[碎片化](https://en.wikipedia.org/wiki/Fragmentation_(computing))，可以通过压缩来解决，将所有已分配的对象移动在一起，以提供一个连续的空闲空间块。
- en: Garbage collected languages can solve this by stopping program execution to
    compact allocated objects and update all pointers to point to the relocated objects.
    But, languages which expose raw pointers to the programmer don’t have this luxury
    as it is impossible to trace and update all the pointers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 垃圾收集语言可以通过停止程序执行来解决这个问题，将分配的对象压缩并更新所有指针以指向重新定位的对象。但是，将原始指针暴露给程序员的语言却没有这种奢侈，因为不可能追踪并更新所有指针。
- en: Therefore, to reduce memory fragmentation for applications written in manually
    memory managed languages, compaction should occur without changing the pointers’
    values and this is exactly where Mesh shines.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了减少手动内存管理语言编写的应用程序的内存碎片化，紧凑化应该在不改变指针值的情况下进行，而这正是 Mesh 的优势所在。
