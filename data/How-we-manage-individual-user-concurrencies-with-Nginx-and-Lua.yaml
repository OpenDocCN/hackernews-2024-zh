- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:29:48'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:29:48'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: How we manage individual user concurrencies with Nginx and Lua
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们如何通过 Nginx 和 Lua 管理单个用户并发性
- en: 来源：[https://www.browserless.io/blog/managing-concurrencies-with-nginx-and-lua](https://www.browserless.io/blog/managing-concurrencies-with-nginx-and-lua)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.browserless.io/blog/managing-concurrencies-with-nginx-and-lua](https://www.browserless.io/blog/managing-concurrencies-with-nginx-and-lua)
- en: '**In this article we’ll look at the challenges of managing individual concurrency
    limits, hosting thousands of browsers for our users.**'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**本文将探讨管理单个并发限制的挑战，为我们的用户提供数千个浏览器。**'
- en: ‍
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: ‍
- en: There’s countless articles about straightforward load balancing. Even we have
    one about using [NGINX for scaling Puppeteer](https://www.browserless.io/blog/horizontally-scaling-chrome).
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有关简单负载平衡的文章数不胜数。即使我们也有一篇关于使用 [NGINX 扩展 Puppeteer 规模](https://www.browserless.io/blog/horizontally-scaling-chrome)
    的文章。
- en: '*“It’s the same way you scale anything, containerize it and put a load balancer
    in front. Boring.”* - u/express-set, reddit'
  id: totrans-split-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“这就像你扩展任何东西一样，容器化并放置一个负载均衡器在前面。无聊。”* - u/express-set, reddit'
- en: So, I wanted to share details about our complex custom load balancers. This
    is a behind the scenes info about how we dynamically limit concurrent connections
    per user. It’s particularly important for us since browsers are notoriously [messy
    to host](https://www.browserless.io/blog/advanced-issues-when-managing-chrome-on-aws),
    and our thousands of users can change to plans with different concurrency limits
    at any time.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我想分享一些关于我们复杂定制负载平衡器的详细信息。这是关于我们如何动态限制每个用户并发连接的幕后信息。对于我们来说尤为重要，因为浏览器在 AWS
    上托管是臭名昭著的 [混乱](https://www.browserless.io/blog/advanced-issues-when-managing-chrome-on-aws)，而我们的成千上万用户随时可以切换到具有不同并发限制的计划。
- en: To address this challenge effectively, we must be able to adjust and update
    connection limits on-the-fly to accommodate different customer plans and usage
    patterns.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要有效解决这一挑战，我们必须能够实时调整和更新连接限制，以适应不同的客户计划和使用模式。
- en: First, some context about what we’re load balancing
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首先，关于我们负载平衡的一些背景
- en: This article is about my work managing concurrencies for Browserless.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是关于我在 Browserless 管理并发的工作。
- en: Our service provides a pool of hosted Chrome, Firefox and WebKit browsers. We
    have thousands of users, each with limits of at least 25 browsers depending on
    their plan. These are primarily spread between our two main server locations of
    London and San Francisco.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务提供一组托管的 Chrome、Firefox 和 WebKit 浏览器。我们有成千上万的用户，每个用户的限制至少为 25 个浏览器，具体取决于他们的计划。这些主要分布在我们的伦敦和旧金山的两个主要服务器位置之间。
- en: These browsers are for using with Puppeteer, Playwright or via one of our APIs.
    That means they start up, running a script for some amount of seconds or minutes,
    then close.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些浏览器是用于 Puppeteer、Playwright 或通过我们的 API 之一使用的。这意味着它们启动，运行脚本一段时间，然后关闭。
- en: At the extreme end, some of our users will open up a hundred browsers, do a
    large batch of web scraping, then do nothing for a week. Meanwhile, we have users
    fairly regularly starting browsers 24/7 for tasks such as generating PDF exports
    of dashboards.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在极端情况下，我们的一些用户会打开一百个浏览器，进行大规模的网页抓取，然后一周什么也不做。与此同时，我们有用户以相当规律的方式全天候启动浏览器，执行生成仪表板的
    PDF 导出等任务。
- en: So, it’s a rapidly fluctuating environment with a range of usage requirements.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这是一个需求范围广泛且快速变化的环境。
- en: '**Plan of Attack**'
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**攻略**'
- en: 'Breaking down the challenge into a few steps went as follows:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将挑战分解为几个步骤的过程如下：
- en: '**Identifying the Optimal Location -** Recognizing that all traffic passes
    through the load balancer, I determined it to be the ideal point for implementing
    connection limits.'
  id: totrans-split-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**确定最佳位置 -** 认识到所有流量都通过负载均衡器经过，我确定这是实施连接限制的理想点。'
- en: '**Limitation of Embedded Nginx Module -** Initial exploration revealed that
    the embedded [Nginx module for limiting connections](https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html)
    lacked the capability to adjust limits dynamically, prompting us to explore alternative
    solutions.'
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**嵌入式 Nginx 模块的限制 -** 初步探索显示，嵌入式 [Nginx 限制连接的模块](https://nginx.org/en/docs/http/ngx_http_limit_conn_module.html)
    缺乏动态调整限制的能力，促使我们探索替代方案。'
- en: '**Leveraging OpenResty and Lua Scripting -** I opted to leverage the versatility
    of OpenResty and Lua scripting to overcome the limitations of the embedded Nginx
    module. This decision was driven by the flexibility and extensibility offered
    by Lua scripting.'
  id: totrans-split-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**利用OpenResty和Lua脚本 -** 我选择利用OpenResty和Lua脚本的多功能性来克服内置Nginx模块的限制。这个决定是基于Lua脚本所提供的灵活性和可扩展性。'
- en: '**Utilizing `lua-resty-limit-trafic` Library -** I discovered the [lua-resty-limit-trafic](https://github.com/openresty/lua-resty-limit-traffic)
    library during my research, an official solution for limiting traffic. This library
    offers dedicated modules for controlling both request frequency and concurrent
    connections, aligning perfectly with our requirements.'
  id: totrans-split-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**利用`lua-resty-limit-trafic`库 -** 在我的研究中，我发现了[lua-resty-limit-trafic](https://github.com/openresty/lua-resty-limit-traffic)库，这是一个用于限制流量的官方解决方案。该库提供了专门的模块来控制请求频率和并发连接，与我们的要求完全匹配。'
- en: Implementation
  id: totrans-split-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施
- en: 'I developed a custom limiter module based on the `lua-resty-limit-trafic` library,
    comprising three main functions:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我基于`lua-resty-limit-trafic`库开发了一个自定义的限制器模块，包括三个主要功能：
- en: '**GetAllowedConcurrency -** This function retrieves the concurrency limit for
    a given customer token. It fetches the limit either from a database or a local
    cache. In cases where the limit cannot be retrieved, a default limit is applied.'
  id: totrans-split-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**GetAllowedConcurrency -** 此功能检索给定客户令牌的并发限制。它可以从数据库或本地缓存中获取限制。在无法检索限制的情况下，会应用默认限制。'
- en: '**LimitRequestsByToken -** Utilizing the lua-resty-limit-trafic library, this
    function increments the number of connections associated with a specific token.
    It checks if the limit is exceeded and throws an error accordingly. The limit
    is dynamically set based on the customer''s concurrency limit.'
  id: totrans-split-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**LimitRequestsByToken -** 利用lua-resty-limit-trafic库，此功能增加了与特定令牌关联的连接数。它检查限制是否超出，并相应地抛出错误。限制是基于客户并发限制动态设置的。'
- en: ‍**LeavingConnection -** Upon the closure of a connection, this function decreases
    the number of active connections associated with the token.
  id: totrans-split-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**LeavingConnection -** 在连接关闭时，此功能会减少与令牌关联的活动连接数。'
- en: The following code snippet showcases the implementation of these functions,
    demonstrating how the lua-resty-limit-trafic library is utilized to manage connection
    limits dynamically.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了这些功能的实现，演示了如何利用lua-resty-limit-trafic库动态管理连接限制。
- en: '[PRE0]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To integrate the limiter module into the Nginx configuration, we import it into
    the default.conf file. The module is invoked within the `access_by_lua_block`
    and `log_by_lua_block` directives, leveraging the Authorization header as the
    identifier for each customer token.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要将限制器模块集成到Nginx配置中，我们需要将其导入到default.conf文件中。该模块在`access_by_lua_block`和`log_by_lua_block`指令中被调用，利用授权头作为每个客户令牌的标识符。
- en: It's imperative to create a `lua_shared_dict` to store the number of existing
    connections per token.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的一点是要创建一个`lua_shared_dict`来存储每个令牌的现有连接数。
- en: '[PRE1]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Additionally, to avoid `module not found` errors, the `lua_package_path` directive
    must be configured in the nginx.conf file to specify the location of the limiter
    module.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，为了避免`module not found`错误，必须在nginx.conf文件中配置`lua_package_path`指令，以指定限制器模块的位置。
- en: '[PRE2]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: At this point we are limiting connections as planned. However, prior to implementing
    this solution, we encountered some challenges that needed to be addressed.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们正在按计划限制连接。然而，在实施此解决方案之前，我们遇到了一些需要解决的挑战。
- en: Issues Faced
  id: totrans-split-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面临的问题
- en: When using the limiter, we encountered escalating CPU and memory consumption
    over time, indicating the presence of a memory leak. This posed a significant
    challenge as it necessitated periodic service restarts to prevent crashes, prompting
    an exhaustive investigation to identify and resolve the underlying issue.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用限制器时，我们发现随着时间的推移，CPU和内存消耗不断升高，表明存在内存泄漏的问题。这构成了一个重大挑战，因为它需要定期重启服务以防止崩溃，促使我们对潜在问题进行详尽的调查以识别和解决。
- en: I began troubleshooting by disconnecting non-essential components. First, I
    removed the database connection, but unfortunately, it didn't resolve the issue.
    Next, I removed the local cache, yet the problem persisted.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我开始通过断开非必要的组件来进行故障排除。首先，我移除了数据库连接，但不幸的是，它并没有解决问题。接下来，我移除了本地缓存，然而问题依然存在。
- en: As a last resort, I decided to test removing the import `local limits = require
    "limiter"` and consolidating all code into a single file. Surprisingly, this resolved
    the issue.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的尝试，我决定测试删除导入 `local limits = require "limiter"` 并将所有代码合并到单个文件中。令人惊讶的是，这解决了问题。
- en: I finally identified the problem. Prior to editing the nginx.conf file, I was
    using the [package.path](https://www.lua.org/manual/5.1/manual.html#pdf-package.path)
    within the Lua script to import my custom Lua folder.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我最终确定了问题。在编辑 nginx.conf 文件之前，我在 Lua 脚本中使用了 [package.path](https://www.lua.org/manual/5.1/manual.html#pdf-package.path)
    来导入我的自定义 Lua 文件夹。
- en: '[PRE3]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'An important oversight occurred: each time the script ran, the package.path
    increased because I was concatenating my folder name to the same value in every
    request. Consequently, after a few requests, inspecting the value of package.path
    revealed an accumulation of folder names.'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了一个重要的疏忽：每次运行脚本时，package.path 都会增加，因为我在每个请求中将我的文件夹名连接到相同的值上。因此，在几次请求后，检查 package.path
    的值显示了文件夹名的累积。
- en: '[PRE4]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Initially, it seemed that concatenating folder names to package.path was the
    correct approach, as suggested by the Lua official documentation. However, this
    method caused the mentioned problems in our specific use case. Eventually, I referred
    to the [lua-nginx-module](https://github.com/openresty/lua-nginx-module#lua_package_path)
    documentation to find the correct way to import modules, and the problem was resolved
    by adding the `lua_package_path` directive to the nginx.conf file.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，似乎将文件夹名连接到 package.path 是正确的方法，正如 Lua 官方文档建议的那样。然而，在我们特定的使用场景中，这种方法导致了上述问题。最终，我参考了
    [lua-nginx-module](https://github.com/openresty/lua-nginx-module#lua_package_path)
    文档，找到了正确导入模块的方法，并通过在 nginx.conf 文件中添加 `lua_package_path` 指令来解决了问题。
- en: Below is a graphical representation illustrating the consumption of resources
    before and after implementing the fix.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一张图形表示，在实施修复前后资源消耗的变化。
- en: Additionally, to enhance performance and minimize database queries, we incorporated
    a local cache with a Time-to-Live (TTL) mechanism to store customer limits. This
    optimization strategy effectively reduced latency and alleviated the strain on
    the database.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，为了提高性能并减少数据库查询，我们引入了一个带有生存时间（TTL）机制的本地缓存，用于存储客户限制。这种优化策略有效地减少了延迟并减轻了数据库的压力。
- en: '**How It Turned Out**'
  id: totrans-split-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**How It Turned Out**'
- en: In the end, the new limiter worked great. It now effectively manages concurrent
    connections per customer to keep the service healthy and stable, while preventing
    service abuses and maintaining healthy worker processes.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，新的限流器效果非常好。它现在有效地管理每个客户的并发连接，保持服务的健康和稳定，同时防止服务滥用并保持良好的工作进程。
- en: If you would like to see it in action, go ahead and grab a [Browserless trial](https://www.browserless.io/pricing)
    and have a play with using the concurrent browsers.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想看看它如何运行，请继续并试用一下 [Browserless 试用版](https://www.browserless.io/pricing)，并尝试使用并发浏览器。
