- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:55:31'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:55:31'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: guix on the framework 13 amd — wingolog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Framework 13 AMD上使用Guix — wingolog
- en: 来源：[https://wingolog.org/archives/2024/02/16/guix-on-the-framework-13-amd](https://wingolog.org/archives/2024/02/16/guix-on-the-framework-13-amd)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://wingolog.org/archives/2024/02/16/guix-on-the-framework-13-amd](https://wingolog.org/archives/2024/02/16/guix-on-the-framework-13-amd)
- en: 'I got a new laptop! It’s a [Framework 13 AMD](https://frame.work/fr/en/products/laptop-diy-13-gen-amd):
    8 cores, 2 threads per core, 64 GB RAM, 3:2 2256×1504 matte screen. It kicks my
    5-year-old Dell XPS 13 in the pants, and I am so relieved to be back to a matte
    screen. I just got it up and running with [Guix](https://guix.gnu.org/), which
    though easier than past installation experiences was not without some wrinkles,
    so here I wanted to share a recipe for what worked for me.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我买了一台新笔记本电脑！它是[Framework 13 AMD](https://frame.work/fr/en/products/laptop-diy-13-gen-amd)：8个核心，每个核心2个线程，64GB
    RAM，3:2比例的2256×1504哑光屏。它比我5年前的戴尔XPS 13要强大，我很高兴能再次使用哑光屏。我刚刚用[Guix](https://guix.gnu.org/)使其正常运行，虽然比过去的安装经历容易些，但也有些小问题，所以在这里我想分享一下我成功的方法。
- en: (I swear this isn’t going to become a product review blog, but when I went to
    post something like this on the [Framework forum](https://community.frame.work/)
    I got an error saying that new users could only post 2 links. I understand how
    we got here but hoo, that is a garbage experience!)
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: （我发誓这不会成为一个产品评测博客，但当我试图在[Framework论坛](https://community.frame.work/)上发布类似内容时，我收到了一个错误，说新用户只能发布2个链接。我理解我们是如何到达这里的，但哇，这真是一个糟糕的体验！）
- en: The basic deal
  id: totrans-split-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本协议
- en: Upstream Guix works on the Framework 13 AMD, but only with software rendering
    and no wifi, and I wasn’t able to install from upstream media. This is mainly
    because Guix uses a modified kernel and doesn’t include necessary firmware. There
    is a third-party [nonguix](https://gitlab.com/nonguix/nonguix) repository that
    defines packages for the vanilla Linux kernel and the linux-firmware collection;
    we have to use that repo if we want all functionality.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 上游的Guix在Framework 13 AMD上可以工作，但只能使用软件渲染和没有wifi，我无法从上游媒体进行安装。这主要是因为Guix使用了修改过的内核，并且不包含必要的固件。有第三方[nonguix](https://gitlab.com/nonguix/nonguix)仓库，定义了标准Linux内核和Linux固件集合的软件包；如果我们希望得到全部功能，必须使用该仓库。
- en: Of course having the firmware be user-hackable would be better, and it would
    be better if the framework laptop used parts with free firmware. Something for
    a next revision, hopefully.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果固件可以由用户自行修改将会更好，如果Framework笔记本使用的零件带有自由固件也会更好。希望在下一个版本中能实现这些。
- en: On firmware
  id: totrans-split-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于固件
- en: As an aside, I think the official Free Software Foundation position on firmware
    is bad praxis. To recall, the idea is that if a device has embedded software (firmware)
    that can be updated, but that software is in a form that users can’t modify, then
    the system as a whole is not free software. This is technically correct but doesn’t
    logically imply that the right strategy for advancing free software is to forbid
    firmware blobs; you have a number of potential policy choices and you have to
    look at their expected results to evaluate which one is most in line with your
    goals.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，我认为自由软件基金会关于固件的立场不佳。回想起来，理念是，如果一个设备有嵌入式软件（固件）可以更新，但是用户不能修改这个软件，那么整个系统就不算自由软件。从技术上讲是正确的，但并不意味着促进自由软件的正确策略是禁止固件团块；你有多种潜在的政策选择，必须考虑它们的预期结果，评估哪种策略最符合你的目标。
- en: Bright lines are useful, of course; I just think that with respect to free software,
    drawing that line around firmware is not interesting. To illustrate this point,
    I believe the current FSF position is that if you can run e.g. a USB ethernet
    adapter without installing non-free firmware, then it is kosher, otherwise it
    is haram. However many of these devices *have* firmware; it’s just that you aren’t
    updating it. So for example the the USB Ethernet adapter I got with my Dell system
    many years ago has firmware, therefore it has bugs, but I have never updated that
    firmware because that’s not how we roll. Or, on my old laptop, I never updated
    the CPU microcode, despite spectre and meltdown and all the rest.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，明确的界限是有用的；我只是认为，在自由软件方面，将界限划定在固件周围并不有趣。为了阐明这一点，我认为当前自由软件基金会的立场是，如果例如你可以在不安装非自由固件的情况下运行USB以太网适配器，那么这是允许的，否则是不允许的。然而，许多这些设备*都有*固件；只是你没有更新它。所以举例来说，我多年前用戴尔系统获得的USB以太网适配器有固件，因此有bug，但我从未更新过那个固件，因为我们不这么做。或者，对于我的旧笔记本电脑，我从未更新过CPU微码，尽管有安全漏洞和熔断等问题。
- en: '“Firmware, but never updated” reminds me of the [wires around some New York
    neighborhoods](https://en.wikipedia.org/wiki/Eruv) that allow orthodox people
    to leave the house on Sabbath; useful if you are of a given community and enjoy
    the feeling of belonging, but I think even the faithful would see it as a hack.
    It is like how Richard Stallman wouldn’t use travel booking web sites because
    they had non-free JavaScript, but would happily call someone on the telephone
    to perform the booking for him, using those same sites. In that case, the net
    effect on the world of this particular bright line is negative: it does not advance
    free software in the least and only adds overhead. Privileging principle over
    praxis is generally a losing strategy.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: “固件，但从不更新”让我想起了纽约某些社区周围的 [wires around some New York neighborhoods](https://en.wikipedia.org/wiki/Eruv)，这些线路允许正统派在安息日出门；如果你属于某个社区并享受归属感，这很有用，但我认为即使是信徒也会将其视为一种技巧。这就像理查德·斯托曼不使用旅行预订网站，因为它们含有非自由的
    JavaScript，但他愉快地通过电话让别人为他预订，使用的还是这些网站。在这种情况下，这种明确界限对世界的净影响是负面的：它对自由软件的推进毫无帮助，只增加了负担。通常情况下，将原则置于实践之上通常是失败的策略。
- en: Installation
  id: totrans-split-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装
- en: Firstly I had to turn off secure boot in the bios settings; it’s in “security”.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我需要在 BIOS 设置中关闭安全启动；选项在“安全”中。
- en: I wasn’t expecting wifi to work out of the box, but for some reason the upstream
    Guix install media was not able to configure the network via the Ethernet expansion
    card nor an external USB-C ethernet adapter that I had; stuck at the DHCP phase.
    So my initial installation attempt failed.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我没指望无线网能开箱即用，但出乎意料的是，上游 Guix 安装媒体无法通过以太网扩展卡或我有的外部 USB-C 以太网适配器配置网络；卡在 DHCP 阶段。因此，我的初始安装尝试失败了。
- en: Then I realized that the [nonguix](https://gitlab.com/nonguix/nonguix) repository
    has installation media, which is the same as upstream but with the vanilla kernel
    and linux-firmware. So on another machine where I had Guix installed, I added
    the nonguix channel and built the installation media, via `guix system image -t
    iso9660 nongnu/system/install.scm`. That gave me a file that I could write to
    a USB stick.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我意识到 [nonguix](https://gitlab.com/nonguix/nonguix) 仓库有安装媒体，与上游相同，但使用了原始内核和
    linux-firmware。因此，在另一台已经安装了 Guix 的机器上，我添加了 nonguix 渠道并构建了安装媒体，通过 `guix system
    image -t iso9660 nongnu/system/install.scm`。这给了我一个可以写入 USB 磁盘的文件。
- en: Using that installation media, installing was a breeze.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该安装媒体，安装过程非常顺利。
- en: However upon reboot, I found that I had no wifi and I was using software rendering;
    clearly, installation produced an OS config with the Guix kernel instead of upstream
    Linux. Happily, at this point the ethernet expansion card was able to work, so
    connect to wired ethernet, open `/etc/config.scm`, add the needed lines as described
    in the `operating-system` part of [the nonguix README](https://gitlab.com/nonguix/nonguix),
    reconfigure, and reboot. Building Linux takes a little less than an hour on this
    machine.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，重启后，我发现无法连接无线网络，只能使用软件渲染；显然，安装生成的操作系统配置是 Guix 内核，而不是上游 Linux。幸运的是，此时以太网扩展卡可以工作，因此连接有线以太网，打开
    `/etc/config.scm`，按照 [nonguix README](https://gitlab.com/nonguix/nonguix) 中 `operating-system`
    部分的描述添加所需行，重新配置并重启。在这台机器上，构建 Linux 大约需要不到一个小时。
- en: Fractional scaling
  id: totrans-split-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分数缩放
- en: At that point you have wifi and graphics drivers. I use GNOME, and things seem
    to work. However the screen defaults to 200% resolution, which makes everything
    really big. Crisp, pretty, but big. Really you would like something in between?
    Or that the Framework ships a higher-resolution screen so that 200% would be a
    good scaling factor; this was the case with my old Dell XPS 13, and it worked
    well. Anyway with the Framework laptop, I wanted 150% scaling, and it seems these
    days that the way you have to do this is to use Wayland, which Guix does not yet
    enable by default.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你已经有了无线和图形驱动程序。我使用 GNOME，一切似乎正常。然而，屏幕默认为 200% 分辨率，导致所有内容看起来非常大。清晰、漂亮，但是很大。实际上，你可能想要介于两者之间？或者
    Framework 提供更高分辨率的屏幕，这样 200% 就会是一个很好的缩放因子；我的旧 Dell XPS 13 就是这种情况，效果很好。总之，对于 Framework
    笔记本电脑，我希望使用 150% 的缩放，而这些天来，你必须使用 Wayland 来实现这一点，但 Guix 尚未默认启用它。
- en: 'So you go into `config.scm` again, and change where it says `%desktop-services`
    to be:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你再次进入 `config.scm`，并将 `%desktop-services` 更改为：
- en: '[PRE0]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then when you reboot you are in Wayland. Works fine, it seems. But then you
    have to go and enable an experimental mutter setting; install `dconf-editor`,
    run it, search for keys with “mutter” in the name, find the “experimental settings”
    key, tell it to not use the default setting, then click the box for “scale-monitor-framebuffer”.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后当你重新启动时，你就在Wayland中。似乎工作正常。但然后你必须去启用一个实验性的mutter设置；安装`dconf-editor`，运行它，搜索名称中带有“mutter”的键，找到“实验性设置”键，告诉它不使用默认设置，然后点击“缩放监视器帧缓冲区”的框。
- en: Then! You can go into GNOME settings and get 125%, 150%, and so on. Great.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后！你可以进入GNOME设置，选择125%，150%等。太棒了。
- en: 'HOWEVER, and I hope this is a transient situation, there is a problem: in GNOME,
    applications that aren’t native Wayland apps don’t scale nicely. It’s like the
    app gets rendered to a texture at the original resolution, which then gets scaled
    up in a blurry way. There aren’t so many of these apps these days as most things
    have been ported to be Wayland-capable, Firefox included, but Emacs is one of
    them :( However however! If you install the `emacs-pgtk` package instead of `emacs`,
    it looks better. Not perfect, but good enough. So that’s where I am.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我希望这是一个暂时的情况，有一个问题：在GNOME中，那些不是原生Wayland应用的应用程序缩放效果不佳。就像应用程序被渲染为原始分辨率的纹理，然后以模糊的方式放大一样。这些应用程序如今并不多，因为大多数东西都已经被移植为支持Wayland，包括Firefox，但Emacs是其中之一
    :( 但是！如果你安装`emacs-pgtk`包而不是`emacs`，它看起来会更好。不是完美，但足够好。所以我就在这里。
- en: Bugs
  id: totrans-split-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 错误
- en: The laptop hangs on reboot due to [this bug](https://community.frame.work/t/tracking-gnu-guix-system-on-the-framework/22459/24),
    but that seems a minor issue at this point. There is an ongoing [tracker discussion](https://community.frame.work/t/tracking-gnu-guix-system-on-the-framework/22459)
    on the community forum; like other problems in that thread, I hope that this one
    resolves itself upstream in Linux over time.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本在重启时出现挂起的问题，由于[这个错误](https://community.frame.work/t/tracking-gnu-guix-system-on-the-framework/22459/24)，但在这一点上似乎是一个小问题。社区论坛上有一个正在进行中的[跟踪讨论](https://community.frame.work/t/tracking-gnu-guix-system-on-the-framework/22459)，就像该帖子中的其他问题一样，我希望这个问题随着时间在Linux上游解决。
- en: Other things?
  id: totrans-split-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他事情？
- en: 'I didn’t mention the funniest thing about this laptop: it comes in pieces that
    you have to put together :) I am not so great with hardware, but I had no problem.
    The build quality seems pretty good; not a MacBook Air, but then it’s also user-repairable,
    which is a big strong point. It has these funny extension cards that slot into
    the chassis, which I have found to be quite amusing.'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有提到这台笔记本最有趣的地方：它是分开的零件，你必须自己组装 :) 我对硬件不是很擅长，但我没有问题。制造质量似乎相当不错；虽然不是MacBook
    Air，但它也是用户可修复的，这是一个很大的优点。它有这些有趣的扩展卡，可以插入机箱，我发现这相当有趣。
- en: 'I haven’t had the machine for long enough but it seems to work fine up to now:
    suspend, good battery use, not noisy (unless it’s compiling on all 16 threads),
    graphics, wifi, ethernet, good compilation speed. (I should give compiling LLVM
    a go; that’s a useful workload.) I don’t have bluetooth or the fingerprint reader
    working yet; I give it 25% odds that I get around to this during the lifetime
    of this laptop :)'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我还没有使用这台机器很长时间，但到目前为止似乎工作正常：挂起、良好的电池使用、不吵闹（除非在所有16个线程上编译），图形、wifi、以太网、编译速度良好。（我应该尝试编译LLVM；那是一个有用的工作负载。）我还没有使蓝牙或指纹阅读器工作；我认为在这台笔记本的寿命内我有25%的机会解决这个问题
    :)
- en: Until next time, happy hacking!
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下次再见，愉快的编程！
