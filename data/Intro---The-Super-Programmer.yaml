- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:28:28'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:28:28
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Intro - The Super Programmer
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介 - 超级程序员
- en: 来源：[https://keyvan.me/tsp](https://keyvan.me/tsp)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://keyvan.me/tsp](https://keyvan.me/tsp)
- en: <main>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main>
- en: '***February 16th, 2024***'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '***2024年2月16日***'
- en: 'OpenAI, the legendary AI company of our time, has just released their new product,
    Sora, an AI model capable of generating one minute of mind-blowingly high-quality
    video content given a text prompt. I’m scrolling through Twitter, watching the
    sample outputs, feeling extremely jealous of those who have had the opportunity
    to contribute to building it, and I also feel a bit of emptiness. I’m thinking
    about how this would affect the video industry and Hollywood. How many people’s
    work will become meaningless just after this? And for me, there is also a disturbing
    question:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这个时代的传奇人工智能公司OpenAI刚刚发布了他们的新产品Sora，这是一个AI模型，可以根据文本提示生成一分钟的令人震惊的高质量视频内容。我在Twitter上滚动，看着样本输出，感到非常嫉妒那些有机会参与建设它的人，同时也感到有些空虚。我在思考这将如何影响视频行业和好莱坞。多少人的工作将在此后变得毫无意义？对我来说，还有一个令人不安的问题：
- en: Does it make any sense for me to write this book at all? If a machine is able
    to generate convincingly real videos, how hard would it be for it to write a tutorial
    book like this? Why would I put any effort in if anyone is able to generate their
    customized masterpiece in seconds?
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 机器能生成逼真的视频，那写这本书对我有什么意义呢？如果机器能像写教程一样轻松写书，我还有必要付出努力吗？如果任何人都能在几秒钟内生成他们定制的杰作，我为什么要付出任何努力呢？
- en: I know this will happen someday, and I'm not against it. I truly appreciate
    the fact that I was born in an era when the AI revolution is happening. AI will
    someday be able to generate better content than we can, and many of our efforts
    will simply become unnecessary. In my opinion, that future is not far off.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这一天总会到来，而且我并不反对。我真心感激我生在人工智能革命正在发生的时代。AI总有一天将能够比我们生成更好的内容，而我们的许多努力将变得无用。在我看来，这一未来并不遥远。
- en: 'Anyway, my temporary existential crisis in this moment made me immediately
    pick up my phone and express my heartbreak and sadness in the very first section
    of this book. Perhaps this is the only way I could convince myself to continue
    writing a book: by pouring some real human soul into it.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，在这一刻我暂时陷入存在危机，我立即拿起手机，在这本书的第一节表达我的心碎和悲伤。也许这是我说服自己继续写书的唯一方式：把一些真正的人类灵魂倾注其中。
- en: '***February 25th, 2024***'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: '***2024年2月25日***'
- en: A few days have passed, and I rarely see people talking about Sora. It’s starting
    to become normal, I guess. People who were excited at first are now finding Sora
    boring. I just realized there is something called “Hedonic Adaptation.” It argues
    that humans will always return to a stable level of happiness, despite positive
    or negative changes in their lives. This happens with the advancement of technology
    all the time. At first, we are all like "woah," and after some time, everything
    already gets boring. Although this may seem unfair, it drives us humans to progress
    because, you know, being stuck is boring.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 几天过去了，我很少看到有人谈论Sora。我想这已经开始变得正常了。最初感到兴奋的人现在觉得Sora很无聊。我刚意识到还有一种叫做“享乐适应”的东西。它认为，无论生活中发生了积极还是消极的变化，人类总是会回到一个稳定的幸福水平。这种情况经常随着技术的进步发生。起初，我们都会感到“哇”，但过了一段时间，一切似乎已经变得无趣了。虽然这看起来可能不公平，但它驱使我们人类不断进步，因为你知道，被困住是很无聊的。
- en: I can’t imagine how many "woah" moments humans have had throughout history.
    Things we have in our hands right now seem like God-sent miracles for people living
    300 years ago, but in our days, old technology seems basic and trivial.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我无法想象人类在历史上经历了多少个“哇”的时刻。现在我们手中的东西对于300年前的人们来说似乎是上帝派来的奇迹，但在我们的时代，旧技术似乎显得基础和琐碎。
- en: 'I really hope this book will be able to fulfill its purpose: to make the interested
    reader appreciate what it took for us to reach this level of computer-driven technology.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我真心希望这本书能够实现它的目标：让感兴趣的读者欣赏我们达到这种计算机驱动技术水平所付出的努力。
- en: The book you're about to read is the outcome of exploring various areas in computer
    science for over 15 years. The idea of writing this book began around 8 years
    ago when I was about 17 years old. At that time, my focus was on learning computer
    graphics and 3D rendering algorithms. The concept of generating 3D images by calculating
    the RGB values of pixels intrigued me, prompting a desire to teach it to every
    programmer I knew. Unfortunately, not everyone I knew was interested in learning
    low-level stuff like this. Instead of trying to teach what I had learned, I decided
    to write a book. I was confident I'd have an audience, as many programmers worldwide
    are eager to learn more than just web-application development (a common career
    path among software engineers).
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你即将阅读的这本书是我在计算机科学各个领域探索15年之后的成果。写这本书的想法大约是8年前开始的，当时我大约17岁。那时，我的焦点是学习计算机图形学和3D渲染算法。通过计算像素的RGB值生成3D图像的概念让我着迷，促使我希望将其教给我认识的每一位程序员。不幸的是，并非我认识的每个人都对学习这样的底层内容感兴趣。我决定写一本书，而不是试图教授我所学到的东西。我对自己会有读者很有信心，因为全世界许多程序员渴望学习不仅仅是网页应用开发（这是软件工程师常见的职业路径）。
- en: So, I started writing the book, named it "Programming the Visuals," and made
    a lot of progress! Not sure what happened exactly, but I got a bit discouraged
    after finding it hard to fill a book with content. I found myself explaining everything
    in less than 40 pages, and well, 40 pages are not enough for a technical book.
    I didn't want to clutter my book with all the details of different rendering algorithms.
    I just wanted to explain the core idea, in very simple words and with easy-to-understand
    code examples. My goal was to introduce this specific field of computer science
    to people, hoping they would get encouraged enough to learn anything else they'd
    need by themselves.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我开始写书，取名为《编程视觉》，并取得了很大进展！不确定具体发生了什么，但我在发现很难填满一本书的内容后有些泄气。我发现自己在不到40页的篇幅中解释了一切，而40页对于一本技术书来说并不够。我不想在书中充斥着各种渲染算法的细节。我只想用非常简单的话语和易于理解的代码示例来解释核心思想。我的目标是向人们介绍这一特定的计算机科学领域，希望他们能够自行学习其他需要的知识。
- en: My computer graphics book remained untouched for years, during which I took
    a bachelor's degree in computer engineering and delved into other interesting
    fields of computer science. University was one of the places where I got clues
    on what to learn next. In fact, I didn't learn much in university because, contrary
    to what many people say, university professors do not really get deep into what
    they teach. They will tell you a lot of headlines, but they'll never get deep
    into any of them. And that makes sense too; you can't expect to get super deep
    in everything in a relatively short period of time. Chances are you will get specialized
    knowledge in only one of the fields of computer science.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我的计算机图形学书籍多年来一直未曾触及，期间我获得了计算机工程学士学位，并深入研究了计算机科学的其他有趣领域。大学是我得到下一步学习线索的地方之一。事实上，我在大学并没有学到很多，因为与许多人所说的相反，大学教授并没有真正深入他们所教的内容。他们会告诉你很多大标题，但他们从来不会深入其中任何一个。这也是有道理的；你不能期望在相对较短的时间内在所有领域都深入到极致。你很可能只会在计算机科学的一个领域获得专业知识。
- en: The fact that success often comes from delving deep into only one of the many
    fields of computer science didn't stop me from learning them. After getting comfortable
    with generating pixels, I started to learn building computers, operating systems,
    and all of the low-level stuff many day-to-day software developers avoid learning.
    Unfortunately, even being a highly talented hardware engineer doesn't necessarily
    mean one is proficient in other aspiring (yet simple!) ideas only known to physicists,
    mathematicians, cryptographers, and engineers involved in areas beyond computer
    software and hardware. These topics remain vital for developing many fascinating
    forms of software, so I decided to learn them all.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，成功往往来自于深入了解计算机科学的众多领域之一，并没有阻止我去学习它们。在掌握了生成像素的技能后，我开始学习构建计算机、操作系统以及许多日常软件开发人员避免学习的底层内容。不幸的是，即使成为一位高度有才华的硬件工程师也并不一定意味着能精通其他物理学家、数学家、密码学家和参与计算机软件和硬件以外领域的工程师所熟知的许多令人向往（然而简单！）的想法。这些话题对于开发许多引人入胜的软件形式至关重要，因此我决定学习它们所有。
- en: The result? I transformed myself from a day-to-day web developer into a programmer
    that knows ***the starting point of building any kind of technology*** and hopefully
    can help get the progress of computer-related technology back on track in case
    a catastrophic event happens on Earth and all we have is gone (This is something
    that I think about a lot!).
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 结果呢？我从一个日常网页开发者转变为一个了解***构建任何类型技术的起点***的程序员，并希望在地球发生灾难性事件并且我们失去了一切时，能够帮助推动与计算机相关技术的进步（这是我经常思考的事情！）。
- en: After boosting my knowledge by learning all those things, I felt that it's time
    to extend my 40-page computer graphics book, and the result is this book!
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过学习所有这些知识来提升我的知识之后，我觉得是时候扩展我的40页计算机图形学书籍，结果就是这本书！
- en: If you enjoy what I'm writing and would like to support my work, I would appreciate
    crypto donations! I attempted to distribute my work through computer programming
    publishers, but the consensus is that these kinds of tutorials won't sell well.
    Therefore, I have decided to continue TSP as an open-source hobby project!
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢我所写的内容并且想要支持我的工作，我将不胜感激您的加密货币捐赠！我尝试通过计算机编程出版商分发我的作品，但达成共识的是这些类型的教程销售不佳。因此，我决定继续将TSP作为一个开源的爱好项目！
- en: 'Bitcoin: `bc1qjvcsjt57des7j4runchxalksueqlxgadx7fwll`'
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比特币：`bc1qjvcsjt57des7j4runchxalksueqlxgadx7fwll`
- en: 'Ethereum: `0x1a34a6763f55887444ffbd8f8d4fae8197478675`'
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太坊：`0x1a34a6763f55887444ffbd8f8d4fae8197478675`
- en: Also, I'm thinking of allowing anyone to contribute in writing and editing of
    this book, so feel free to submit your shiny PRs!
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我正在考虑允许任何人参与撰写和编辑本书，所以请随意提交您的闪亮 PR！
- en: 'GitHub: [https://github.com/keyvank/tsp](https://github.com/keyvank/tsp)'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub：[https://github.com/keyvank/tsp](https://github.com/keyvank/tsp)
- en: Legos were my favorite toys as a kindergarten student. It was one of the only
    toys I could use to build stuff that didn't exist before. It let me bring my imaginations
    into the real world, and nothing satisfies a curious mind more than the ability
    to build unique structures out of simple pieces.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 乐高积木是我幼儿园时最喜欢的玩具之一。它是我唯一可以用来建造之前不存在的东西的玩具之一。它让我把我的想象力带入了现实世界，对于一个充满好奇心的心灵来说，没有什么比能够用简单的部件构建独特结构更令人满足的了。
- en: I have a cousin, who was really into electronics on that time (Now he is doing
    medicine!). He had a friend who worked in an electronics shop and he used to bring
    me there, where we could buy and solder DIY electronics kits together, for the
    sake of fun. Years later, seeing my cousin building robots by typing some characters
    on the screen and "programming" it into something he called a "microcontroller",
    triggered the same parts in my brain, as playing with lego pieces. I didn't know
    the English alphabet those days, so I was just seeing different symbols coming
    on the screen after every keystrokes. The fact that certain ordering of some symbols
    could cause some kind of unique behavior was blowing my mind. I would copy/paste
    the codes on my cousin's book on his computer for free, just to see that a behavior
    emerges when I put some kind of "cheat-code" on his computer. I began to appreciate
    the power of characters. Characters were my new lego pieces, but there was an
    important difference, it was impossible to run out of characters. I could literally
    use billions of them to build different behaviors.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个表弟，那时候真的很喜欢电子产品（现在他正在学医！）。他有一个朋友在一家电子店工作，他经常带我去那里，在那里我们可以一起购买和焊接DIY电子套件，只是为了好玩。多年后，看到我的表弟通过在屏幕上输入一些字符并将其“编程”为他称之为“微控制器”的东西来制造机器人，引发了我脑中与玩乐高积木一样的部分。那些日子我不认识英文字母，所以我只是在每次击键后看到不同的符号出现在屏幕上。某些符号的特定排列竟然能导致某种独特的行为，这让我感到非常震惊。我会免费在表弟电脑上复制/粘贴代码，只是为了看到当我在他的电脑上输入某种“秘籍码”时会发生什么行为。我开始欣赏字符的力量。字符成为了我的新乐高积木，但有一个重要的区别，那就是字符是不会用完的。我可以使用数十亿个字符来构建不同的行为。
- en: After around 20 years, I still get super excited when I build something I find
    magnificent by putting the right symbols in the right order. I was curious enough
    to study and deeply understand many applications of computers that have made significant
    impact in our everyday life but nobody gives them the attention they deserve these
    days, so I decided to gather all these information in one place and write this
    book.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 大约20年后，当我通过将正确的符号按正确顺序排列而建立起我认为华丽的东西时，我仍然感到非常兴奋。我很好奇地研究和深入理解了许多在我们日常生活中产生重大影响的计算机应用，但如今却没有人给予它们应有的关注，因此我决定将所有这些信息汇集到一个地方，并编写这本书。
- en: When I started writing this book, I was expecting it to be a merely technical
    book with a lot of codes included, targeting only programmers as its audience,
    but I ended up writing a lot of history, philosophy and even human anatomy! So
    the book could be a good read for non-programmers too!
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始写这本书时，我原本期望它只是一本纯技术书籍，包含大量代码，只针对程序员作为其读者群，但最终我写了大量历史、哲学甚至人体解剖学的内容！所以这本书也适合非程序员阅读！
- en: The Super Programmer is all about ideas, and how they have evolved through time,
    leading to the impressive technology we have today. I wanted this book to have
    least dependency to technologies, so that the codes do not get obsolete over time.
    I first thought of writing the codes in some pseudo-coding language, but I personally
    believe that pseudo-codes are not coherent enough, so I decided to choose and
    stick with a popular language like Python, which as of today, is a programming
    language that is known by many other engineers and scientists.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 超级程序员关乎思想，以及它们如何随着时间的推移演变，最终导致我们今天拥有的令人印象深刻的技术。我希望这本书尽可能不依赖技术，以便代码不会随着时间的推移而过时。我最初考虑用一些伪代码来编写代码，但我个人认为伪代码不够连贯，所以我决定选择并坚持使用像Python这样的流行语言，直到今天，这是许多其他工程师和科学家都熟悉的编程语言。
- en: Throughout this book, I’m going to show you the inspirations that human beings
    got from the nature, in order to build technology. Humans themselves have always
    been a great source of inspiration for building tech. You are going to read the
    phrase “The Creator” in this book a lot of times. The Creator can have different
    meanings for different people. Religious people may interpret it as God, and people
    with materialistic views may interpret it as the nature and the process of evolution.
    Either way, there is no doubt that there has been immense amount of intelligence
    behind the mind who/which created life. Engineering ideas that The Creator used
    to build life has been a great source of inspiration for the technology we have
    today. In many parts of the book, we are going to put our feet into The Creator's
    shoe and try to understand what has been going in its/his mind when engineering
    us.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我将展示人类从自然界获取灵感来建立技术的过程。人类自身一直是建立技术的巨大灵感来源。在本书中，您会经常读到“创造者”这个词。对于不同的人来说，创造者可能有不同的含义。宗教人士可能将其解释为上帝，而持唯物主义观点的人可能将其解释为自然和进化过程。无论如何，毫无疑问，创造生命背后的智慧是巨大的。创造者用来建立生命的工程思想已经成为今天我们拥有的技术的重要灵感来源。在本书的许多部分中，我们将置身于创造者的角度，试图理解在其工程我们时，它/他的思维过程。
- en: This book is for curious people who are eager to learn some of the most fundamental
    topics of computer and software engineering. The topics presented in this books,
    although very interesting in opinion, are some of the most underrated and least
    discussed fields of computer programming. This book is about the old technology,
    the technology we are using everyday, but we refuse to learn and extend as an
    average engineer. The literature around each of those topics is so large that,
    only specialists will ever be motivated to learn them.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书适合那些渴望学习计算机和软件工程最基础主题的好奇心旺盛的人。尽管在我看来，这些书中提出的主题非常有趣，但它们却是计算机编程中最被低估和最少讨论的领域之一。这本书是关于旧技术的，是我们每天使用的技术，但作为普通工程师，我们拒绝去学习和扩展它们。每一个主题周围的文献都非常丰富，只有专家才会有动力去学习它们。
- en: The Super Programmer is for the programmers who don't want to limit their knowledge
    and skills on a very narrow area of software engineering. The Super Programmer
    is for programmers who can't sleep at night when they don't exactly understand
    how something in their computer works.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 超级程序员适合那些不想将他们的知识和技能局限于软件工程非常狭窄领域的程序员。超级程序员适合那些在不确切了解计算机中某些功能原理时无法入眠的程序员。
- en: 'There is a famous quote, attributed to Albert Einstein, which says: ''You do
    not really understand something unless you can explain it to your grandmother.''.
    Not only I emphasize on this quote, I would like to extend this quote and claim
    that, you don''t understand something unless you can explain it to your computer.
    Computers are dumb. You have to explain them every little detail, and you can''t
    skip anything. If you are able to describe a something to a computer in a way
    that it can correctly simulate it, then you surely understand that thing!'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有一句著名的引文，被认为是阿尔伯特·爱因斯坦说的：“除非你能向你的祖母解释清楚，否则你并没有真正理解某件事。” 我不仅强调这句引文，我还想扩展这句引文，并声称，除非你能向计算机解释清楚，否则你不理解某件事。计算机是愚蠢的。你必须向它解释每一个细节，你不能跳过任何东西。如果你能以一种计算机可以正确模拟的方式描述某事物，那么你肯定理解了那件事物！
- en: Computers give you the ability to test and experiment stuff without actually
    owning the physical version of them. You can literally simulate an atomic bomb
    in your computer and throw it in your imaginary world to see what happens. You
    can simulate a rocket that travels to Mars, as a tiny step, towards your dream
    of opening a space company. You can describe a 3D environment, and try to understand
    how it feels to be there, by putting your imaginary eyes in there and calculating
    what it will perceive, as a computer image. Computers let you to experiment anything
    you can ever imagine without spending anything other than some of your time and
    talent.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机让你能够在实际拥有它们之前测试和实验各种东西。你可以在计算机中模拟一个原子弹并把它扔进你的想象世界看看会发生什么。你可以模拟一枚飞往火星的火箭，作为迈向开设太空公司梦想的一小步。你可以描述一个三维环境，并试着理解在那里的感觉，通过把你的想象眼睛放在那里并计算它将会感知到的东西，作为计算机图像。计算机让你能够实验任何你能想象到的事情，而不需要花费除了一些时间和天赋之外的任何东西。
- en: The Super Programmer is going to show you "what can be done", and not "how can
    be done". You are not going to learn data-structure and algorithms here, but you
    are going to learn how you can embrace your creativity by using simple tools you
    already know. Thus in many parts of this book, we are going to apply the simplest
    and least-efficient solutions possible, because it's a better way to learn new
    things.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 超级程序员将向你展示“能做什么”，而不是“如何做到”。你在这里不会学习数据结构和算法，但你会学会如何通过使用你已经知道的简单工具来拥抱你的创造力。因此，在本书的许多部分，我们将应用可能是最简单和最低效的解决方案，因为这是学习新事物的更好方式。
- en: Some might argue that not all software engineers will ever need to learn any
    of the topics taught in this book. That's partially true. As an average programmer,
    you are not going to use any of these knowledge in your everyday work. Even if
    you do, you are probably not going to get creative and make anything substantially
    new out of them. Since the book is about the old technology, most of the topics
    discussed in this book are already studied and developed as much as they could
    be.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有人可能会争辩说，并不是所有软件工程师都需要学习本书中教授的任何主题。这部分是真的。作为一个普通程序员，你不会在日常工作中使用这些知识。即使你使用了，你可能也不会变得有创造力并创造出任何实质性新东西。由于本书涉及的技术已经被研究和发展到了他们能达到的极限，因此大部分讨论的主题都是关于旧技术。
- en: 'So why are we doing this? There are several reasons:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 那么为什么我们要这样做呢？有几个原因：
- en: You can use the problem-solving strategies and patterns you learn in this book
    in your everyday job too!
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在日常工作中运用你从这本书中学到的问题解决策略和模式！
- en: The book allows you walk through the entire world-map of technology, and when
    you do this, nothing will be able scare you.
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这本书允许你走遍整个技术世界地图，当你这样做时，没有什么可以吓到你。
- en: It's fun!
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它很有趣！
- en: 'The Super Programmer is all about reinventing the wheel. Reinventing the wheel
    is considered a bad practice by many professionals, and they are somehow right.
    Reinventing the wheel not only steals your focus from the actual problem you are
    going to solve, but also there is a very high chance you will end up with a wheel
    that is much worse than wheels already made by other people. There have been people
    working on wheels for a very long time, and you just can''t beat them with their
    pile of experience. Reinventing the wheel can be beneficial in two scenarios:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 超级程序员完全是关于重新发明轮子。许多专业人士认为重新发明轮子是一个不好的做法，他们在某种程度上是正确的。重新发明轮子不仅会将你的注意力从你要解决的实际问题上移开，而且有很高的机会你会得到比其他人已经制造的轮子差得多的轮子。有人已经在轮子上工作了很长时间，你不可能用他们堆积的经验来超越他们。重新发明轮子在两种情况下可能是有益的：
- en: 'Learning: If you want to learn how a wheel works, build it yourself, there
    isn''t a shortcut.'
  id: totrans-split-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 学习：如果你想了解轮子是如何工作的，那就自己动手造一个，没有捷径。
- en: 'Full control: If wheels are crucial part of the solution you are proposing
    for a problem, you may want to build the wheels yourself. Customizing your own
    design is much easier than customizing someone else’s work.'
  id: totrans-split-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 全面掌控：如果轮子是你为解决问题提出的关键部分，你可能想要自己制造轮子。自定义你自己的设计比定制别人的工作要容易得多。
- en: If you want build a car that is faster than all other cars in the world, don’t
    try different engines. Build one, otherwise you will at most get something that
    is only slightly better, and “slightly better” never convinces anyone to buy your
    car, instead of a well known brand.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想造一辆比世界上所有其他车都快的车，不要尝试不同的引擎。自己建造一个，否则你最多只能得到稍微好一点的东西，“稍微好一点”永远不能说服任何人购买你的车，而不是购买一个知名品牌。
- en: Reinventing the wheel is some kind of “First Principle Thinking”. First principle
    thinking is the practice of questioning all your assumptions and creating solutions
    from scratch, by putting the most obvious facts (The first principles!) together.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 重新发明轮子是某种“第一原则思维”。第一原则思维是质疑所有假设并通过将最明显的事实（第一原则！）放在一起从头开始创建解决方案的实践。
- en: First principle thinking is an important trait that distinguishes successful
    people from others, because first principle thinking gives you a lot of power
    over the problem you are going to solve.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第一原则思维是区分成功人士与其他人的重要特质，因为第一原则思维赋予你在解决问题时很大的力量。
- en: An extraordinary chef, doesn’t only know how to make different food. But he
    knows all the raw ingredients, their taste and how they will match with each other.
    Again, he knows all the “First principles”. This what allows him to create completely
    new dishes, something a simple cook can’t do.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一位非凡的厨师不仅知道如何制作不同的食物。他还知道所有原材料，它们的味道以及它们如何相互匹配。同样，他知道所有的“第一原则”。这使他能够创造全新的菜肴，这是一个简单的厨师做不到的事情。
- en: I hope I have made my point, and I hope that The Super Programmer will give
    you all the ingredients you’ll need for making the next brilliant software recipe!
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望我已经阐明了我的观点，也希望超级程序员会为你提供制作下一个出色软件配方所需的所有要素！
- en: 'Believe it or not, the world has got severely more complicated than how it
    was 500 years ago. We are living in an era where specializing in really specific
    and narrow field of science may take a life time. There are 1000x more people
    in the world and it is almost impossible to think of smth that nobody has ever
    thought about it before. "Innovation" has become unaccessible to the people in
    some ways. There are several reasons:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 不管信不信，世界变得比500年前复杂得多。我们生活在一个专门从事非常具体和狭窄领域科学可能需要一生的时代。世界上的人口增加了1000倍，几乎不可能想出之前没有人想到过的东西。在某些方面，“创新”已经成为人们难以接触的事物。有几个原因：
- en: We are scared to innovate. People living 500 years ago were not hearing about
    technology celebrities everyday. They weren't comparing themselves, or their creations,
    with anyone. So they weren't afraid of building, embracing the most prestigious
    consequence of being a human. They would just keep the creativity channel of their
    soul open, and make/write/paint, no matter if someone else is doing a much better
    jo than them. They didn't try to "mimick", they couldn't. This is why what they
    made were unique, original and special.
  id: totrans-split-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们害怕创新。500年前的人们并不每天都听到科技名人的消息。他们不会拿自己或自己的创作与任何人比较。因此，他们并不害怕去创造，接受作为人类最崇高的后果。他们只是保持灵魂的创造力通道开放，去做/写/画，无论其他人是否做得比他们好。他们并不试图“模仿”，他们无法这样做。这就是为什么他们创作的东西是独一无二、原创且特别的原因。
- en: We don't know where to start. Back then it was possible for someone to learn
    almost everything. There were people who could paint, write poems, design calendars,
    expand the border of mathematics, philosopize, cure people and all that at the
    same time. These people were known as polymaths. Examples of them are the Iranian
    poet/philosopher/mathematician Omar Khayyam, and the Italian polymath Leonardo
    DaVinci. We don't and can't have these people nowadays, and that doesn't mean
    that the human being has declined in anyway. The amount of knowledge produced
    by people has got too big that no one can ever become a polymath.
  id: totrans-split-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不知道从哪里开始。那时有可能有人几乎可以学到一切。有些人可以绘画，写诗，设计日历，扩展数学边界，进行哲学探讨，治愈病人，甚至同时做到这些。这些人被称为博学者。他们的例子有伊朗诗人/哲学家/数学家奥马尔·海亚姆和意大利博学家莱昂纳多·达·芬奇。如今我们不再有这样的人，也无法再有这样的人，但这并不意味着人类有任何衰退。人类所创造的知识量变得如此庞大，以至于再也没有人能成为博学者。
- en: This makes us confused. Contradictory to what you think, if you ask someone
    living 100 years ago to design a build a car gor you, there is a higher chance
    he will not give up and succees, because cars made 100 years ago were much simple,
    this gave people the condfidence to ***guess*** how a car works and go for it.
    For people in our century, ***guessing*** how something works seems a wrong approach
    to building that thing.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们感到困惑。与你想象的相反，如果你请100年前的人为你设计和制造一辆车，他不放弃并且成功的可能性更高，因为100年前制造的汽车要简单得多，这使得人们对猜测如何制造汽车充满了信心。对于我们这个世纪的人来说，猜测如何工作似乎是建造这种东西的错误方法。
- en: 'Computer software revolutionized the "creativity industry". Computer programming
    was the first type of engineering requiring the least minimum to delve in. You
    don''t need a big luxorious workshop to build a great software. You don''t need
    extensive understanding of math and physics to amaze people with your software.
    You will never run out of materials, because you just don''t need it. In fact
    the uilding blocks of a software are characters, imaginary bricks that you will
    never run out of them. All you need is a computer and a text-editor to pour your
    idea in, and unlike building a physical thing, you exactly know what is the first
    thing one should build in the world of programming:'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机软件彻底改变了“创意产业”。计算机编程是需要最少条件的工程类型之一。您无需大型豪华工作室就能创建出色的软件。您不需要深入理解数学和物理就能通过软件让人们惊叹。您永远不会缺乏材料，因为您根本不需要它。事实上，软件的构建块是字符，是您永远不会耗尽的想象砖块。您只需一台计算机和一个文本编辑器来实现您的创意，并且与建造物理物体不同，您确切地知道在编程世界中第一件事应该建造什么。
- en: '[PRE0]'
  id: totrans-split-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As someone who has never made anything sophisticated other than software, I
    find building and engineering “physical” things much harder than developing computer
    programs.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个除软件以外从未制造过复杂东西的人，我发现建造和工程“物理”事物比开发计算机程序要困难得多。
- en: I had some claims that software engineering is very different than other, more
    classical fields of engineering such as mechanical or electrical engineering.
    Talking with people building non-software stuff, I figured that they also find
    building software hard and non trivial.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾有一些观点认为软件工程与其他更经典的工程领域（如机械或电气工程）有很大不同。与建造非软件的东西的人交谈后，我发现他们也认为编写软件是困难且不平凡的。
- en: 'After some thinking, I decided to categorize engineering into two fields: ***Synchronous***
    *vs* ***Asynchronous***'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一番思考，我决定将工程学分为两个领域：**同步**与**异步**。
- en: Synchronous engineering is all about designing solutions based on orderly applied
    subsolutions. The most obvious example of such engineering, is software engineering.
    When building a computer program, you put some instructions (Sub-solution, you
    have the assumption that the instruction works as expected all the time) in the
    right order. Designing the manufacturing line is a kind of synchronous engineering
    too. Newer Subsolutions does not have impact on the previous subsolutions. You
    can add new stuff to your list of instructions, and expect that all previous instructions
    and their behavior would remain intact.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 同步工程学是根据有序的应用子解决方案设计解决方案的全过程。这种工程学最显而易见的例子就是软件工程。在构建计算机程序时，您按正确顺序放置一些指令（子解决方案，您假设这些指令始终按预期工作）。设计制造线也是一种同步工程学。新的子解决方案对先前的子解决方案没有影响。您可以向指令列表添加新内容，并期望所有先前的指令及其行为仍然完好无损。
- en: In Asynchronous engineering on the other hand, order is not involved. The final
    solution is composed of subsolutions, but there isn’t any order, and all the subsolutions
    are applied at the same time. Examples are, designing a building, a car engine,
    an electronics circuit and etc. When designing a car engine, unlike software,
    you must have a general idea of how the final product would look like, otherwise
    your solution could be totally wrong. Subsolutions heavily influence each other,
    and adding a new component can possible break other things.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在异步工程中，没有涉及顺序。最终解决方案由子解决方案组成，但没有顺序，所有子解决方案同时应用。例如，设计建筑物、汽车发动机、电子电路等。设计汽车发动机时，与软件不同，你必须对最终产品的大致外观有一个总体概念，否则你的解决方案可能完全错误。子解决方案彼此密切影响，添加新组件可能会破坏其他部分。
- en: I wasn't quite sure if I have to publish the draft version of the book on the
    internet or not. Writing a book is hard. It's probably one of the most difficult
    things one can do in his life, and it needs passion and persistence. I got discouraged
    multiple times, I wasn't sure if people are going to like my content at all. So
    I decided to publish the very incomplete draft of the book anyway. Fortunately,
    there were a few people who skimmed through the draft and liked it.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我不太确定是否必须将书的草稿版本发布在互联网上。写一本书很难。这可能是一个人生中最困难的事情之一，它需要激情和坚持。我多次感到沮丧，我不确定人们是否会喜欢我的内容。所以，我决定无论如何发布这本非常不完整的书稿。幸运的是，有几个人浏览了草稿并喜欢它。
- en: These little feedback were great source of encouragement for me, convincing
    me to keep writing.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些小反馈对我是巨大的鼓舞，使我坚定了继续写作的决心。
- en: The book is divided into 5 chapters. We will start by explaining the beauty
    of cause-and-effect chains, and how we can build useful and interesting structures
    by connecting simple lego pieces together. We will go through the history of transistors,
    how they work, and how we can simulate them using plain Python code. We will implement
    different logic gates by connecting transistors together, and will proceed to
    building more complicated circuits like adders, counters and finally, programmable
    computers. After building our super simple computer, we'll try to put a soul in
    it. We will introduce the Brainfuck programming language and how it can be compiled
    for our computer, and will try to design and implement impressively complicated
    programs using this simple language.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本书分为5章。我们将从解释因果链的美开始，以及如何通过连接简单的乐高积木来构建有用和有趣的结构。我们将回顾晶体管的历史，它们的工作原理，并演示如何使用简单的Python代码模拟它们。我们将通过连接晶体管实现不同的逻辑门，并将继续构建更复杂的电路，如加法器、计数器，最终实现可编程计算机。在建造我们的超级简单计算机之后，我们将尝试为它灌输灵魂。我们将介绍Brainfuck编程语言以及如何为我们的计算机编译它，并尝试使用这种简单语言设计和实现令人印象深刻的复杂程序。
- en: In chapter 2 and 3, we'll discuss two of the most important human senses, the
    sense of hearing and vision. We will start with some history, explaining how how
    humans invented ways to record what they see or hear, as photos or tapes, and
    experience them later. Then we will see how the digital revolution changed the
    way we record and store media forever. We'll get deep on very simple computer
    file formats used for storing images and audio, and will try to generate them
    ourselves. We will learn how to please our ears and eyes by generating a bunch
    of bytes.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在第2和第3章中，我们将讨论两种最重要的人类感觉，听觉和视觉。我们将从一些历史开始，解释人类如何发明记录所见或所听的方法，如照片或录音，并在之后体验它们。然后，我们将看到数字革命如何永久改变我们记录和存储媒体的方式。我们将深入探讨用于存储图像和音频的非常简单的计算机文件格式，并尝试自己生成它们。我们将学习如何通过生成一堆字节来取悦我们的耳朵和眼睛。
- en: Chapter 4 is all about the cool parts of artificial intelligence. We will discuss
    how biological neurons are similar to tunable electronic gates, and how we can
    use calculus and differentiations to tune these gates. We will try to build a
    library for training neural networks by differentiating computation graphs. We
    will learn and implement some of the most import operations used in neural-network
    models that can understand language, and will try to implement a language model
    ourselves.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章主要讨论人工智能的精彩部分。我们将讨论生物神经元如何类似于可调电子门，以及如何使用微积分和不同iations来调节这些门。我们将尝试通过微分计算图构建用于训练神经网络的库。我们将学习和实现在可以理解语言的神经网络模型中使用的一些最重要的操作，并尝试自己实现语言模型。
- en: Chapter 5 is about how people can use math for bringing trust into their wild
    digital world. We will start by learning the history of cryptography, and how
    people can encrypt and sign digital documents with their digital identities. We
    will discuss the electronic-cash revolution and see how math can help us to save
    ourselves from the evil and escape some of the limitations governments put on
    us. We will discuss ways we can convincingly prove people that we know something,
    without revealing it, and see how we can use these methods for building truly
    private cryptocurrencies.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章讲述了人们如何利用数学为其狂野的数字世界带来信任。我们将从学习密码学的历史开始，以及人们如何使用他们的数字身份加密和签署数字文档。我们将讨论电子货币革命，并看看数学如何帮助我们摆脱邪恶并逃脱政府对我们的一些限制。我们将讨论我们如何有说服力地证明我们知道某些事情，而不透露它，并看看我们如何使用这些方法来构建真正私密的加密货币。
- en: The last chapter is all about ways computers and software can get a physical
    body and have physical interactions with the world surrounding us. We will discuss
    multiple topics in Physics, including classical mechanics and how we can use it
    in order to simulate our world in our computers, or build machines that can send
    humans on Mars by analyzing and exploiting those laws. We will also get deeper
    in Electronics, the giant beast that many computer-engineers (Even the good ones)
    are unable to fully understand, although it is the fundamental building block
    of computers. Like all other chapters, our approach is to build physics engines
    and circuit simulators in order to fully understand the concept.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一章讲述了计算机和软件如何获得物理实体并与我们周围的世界进行物理交互的各种方法。我们将讨论物理学中的多个主题，包括经典力学及其如何帮助我们在计算机中模拟我们的世界，或者通过分析和利用这些定律建造能够将人类送上火星的机器。我们还将深入探讨电子学，这个巨大的野兽，许多计算机工程师（即使是优秀的那些）也无法完全理解，尽管它是计算机的基本构建模块。与所有其他章节一样，我们的方法是构建物理引擎和电路模拟器，以完全理解这些概念。
- en: Without a doubt, people love things they have built on their own more than anything
    else. If you are planning to implement the codes in this book on your own, I suggest
    you to do it in a programming language other than Python. Writing the codes in
    Python might make you feel you are not doing anything new, and you may really
    end up copying and pasting what you read in the book. On the other hand, by rewriting
    all the logic in another language, you will force yourself to translate what you
    are reading, leading to a much deeper understanding of what is happening. It will
    also give you the feeling of creating something new, increasing your dopamine
    levels and motivation!
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，人们喜欢自己建造的东西胜过任何其他东西。如果你计划自己实现本书中的代码，我建议你选择一种非Python的编程语言。用Python编写代码可能会让你觉得自己没有做任何新的事情，你最终可能只是复制粘贴书中的内容。另一方面，通过用另一种语言重写所有逻辑，你将迫使自己去翻译你所读的内容，从而更深入地理解发生的事情。这也会让你感觉自己在创造新的东西，提升多巴胺水平和动力！
- en: As previously noted, although the book is about ideas and not the implementations,
    and I didn't want to make the contents in this book dependent on a specific programming
    language, I still chose to write the codes in a real programming language instead
    of using pseudo-codes. Pseudo-codes assume that the reader is a human and does
    not have the coherency of a real programming language, which is what we care in
    this book.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，尽管这本书讨论的是思想而不是实现，而且我不希望这本书的内容依赖于特定的编程语言，但我仍然选择用实际的编程语言而不是伪代码编写代码。伪代码假设读者是人类，没有真实编程语言的连贯性，而这是我们在这本书中关心的。
- en: I found Python programming language a good choice, since it's the first (Or
    second?) most popular language among all the developers in the world. I thought
    Python is the English language of the programmer community. Python isn't the right
    choice for implementing many of the topics we are discussing in this book (Since
    efficiency is very important in most of them), but it's one of the easiest languages
    you can use for prototyping things and learning the concepts.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现Python编程语言是一个不错的选择，因为它是全世界所有开发者中最流行的第一（还是第二？）种语言。我认为Python是程序员社区的英语语言。Python并不是我们讨论的许多主题的实现的正确选择（因为在大多数情况下效率非常重要），但它是你用于原型设计和学习概念的最简单的语言之一。
- en: Therefore you will need to know the basics of Python programming. Some knowledge
    of *NIX operating systems can become handy in some parts of the book.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您需要了解 Python 编程的基础知识。在书的某些部分，了解 *NIX 操作系统可能会很有帮助。
- en: As someone who had never written a book before, I found the process very unclear.
    I wasn't sure what text-editing software/format I should use for easier conversion
    to other formats. I had to add a lot of code-snippets and math equations in my
    book, so clearly Microsoft Word wasn't the most convenient option (At least I
    wasn't sure how can I do it efficiently with a word-processor like Microsoft Office).
    Besides that, I am personally not a fan of LaTeX. I find the syntax hard and I
    wasn't really willing to learn LaTeX and I wanted to put my focus on writing the
    actual text instead. My choice was Markdown language. It is very easy to use and
    there are plenty of software out there which I can use for converting a `.md`
    file to `.html`, `.pdf`, `.tex` and etc. Also, in case I needed to perform some
    costum, automated transformations on my text, Markdown is one of the easiest languages
    to parse and generate!
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个以前从未写过书籍的人，我发现整个过程非常不清晰。我不确定应该使用哪种文本编辑软件或格式以便更轻松地转换成其他格式。我必须在书中添加很多代码片段和数学公式，显然
    Microsoft Word 不是最方便的选择（至少我不确定如何能有效地在类似 Microsoft Office 的文字处理软件中完成这些操作）。除此之外，我个人不喜欢
    LaTeX。我觉得它的语法很难，我也不想花时间去学习 LaTeX，而是想把注意力放在真正的文本写作上。因此我选择了 Markdown 语言。它非常易于使用，并且有很多软件可以用来将
    `.md` 文件转换成 `.html`、`.pdf`、`.tex` 等格式。此外，如果需要对文本进行一些定制化自动化转换，Markdown 是最容易解析和生成的语言之一！
- en: I wrote different chapters in separate `.md` files, and then I wrote a `Makefile`
    to concatenate all of them in a single `.pdf` file. I then used a Linux program
    named `pandoc` for doing so.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我在不同的 `.md` 文件中编写了不同的章节，然后编写了一个 `Makefile` 将它们全部合并成一个单独的 `.pdf` 文件。然后我使用一个名为
    `pandoc` 的 Linux 程序来执行这个操作。
- en: 'Here is how my `Makefile` script looked like:'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的 `Makefile` 脚本的样子：
- en: '[PRE1]'
  id: totrans-split-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `--toc` flag generated the Table of Contents section for me automatically
    (Based on Markdown headers: `#`, `##`, ...), and I also had another `.pdf` file
    containing the cover of my book, which I concatenated with the pandoc''s output.
    I was tracking my process by word-count.'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`--toc` 标志自动生成了我的目录部分（基于 Markdown 标题：`#`、`##` 等），我还有另一个包含书籍封面的 `.pdf` 文件，我将它与
    pandoc 的输出文件合并。我通过字数统计来追踪我的进度。'
- en: </main>
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
