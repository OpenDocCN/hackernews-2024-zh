- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:31:16'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:31:16'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Git: programmatic staging · Choly''s Blog'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git：程序化暂存 · Choly的博客
- en: 来源：[https://choly.ca/post/git-programmatic-staging/](https://choly.ca/post/git-programmatic-staging/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://choly.ca/post/git-programmatic-staging/](https://choly.ca/post/git-programmatic-staging/)
- en: 'Git: programmatic staging'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git：程序化暂存
- en: Fri, Mar 1, 2024
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年3月1日 星期五
- en: In the past year, I’ve been using a lot of tools to automatically rewrite/refactor
    code. These include [semgrep](https://semgrep.dev/), [ast-grep](https://ast-grep.github.io/),
    LLMs, and one-off scripts. After running these tools on a large code-base, you
    usually end up with lots of additional unintended changes. These range from formatting/whitespace
    to unrequested modifications by LLMs.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的一年中，我一直在使用大量工具自动重写/重构代码。这些工具包括[semgrep](https://semgrep.dev/)、[ast-grep](https://ast-grep.github.io/)、LLMs和一次性脚本。在大型代码库上运行这些工具后，通常会出现许多额外的意外更改。这些范围从格式/空白符到LLMs的未请求修改。
- en: The subsequent “cleanup” step is a very manual and tedious process. I’m essentially
    running `git add -p` and staging hunks one at a time. At times it feels like this
    step offsets the productivity gain from the rewrite tool itself.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 后续的“清理”步骤非常手动且繁琐。我基本上是在运行`git add -p`并逐个暂存区块。有时候，这一步骤感觉比重写工具本身带来的生产力增益更抵消。
- en: 'After doing this several times, I realized that most of the hunks I was staging
    included some common text. If I could automatically stage hunks containing a search
    term, I could automate a lot of this work! Git does not natively support this,
    but it can be easily accomplished using the [expect](https://linux.die.net/man/1/expect)
    tool:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 做了几次后，我意识到我暂存的大多数区块都包含一些常见文本。如果我能自动暂存包含搜索词的区块，我就能自动化很多工作！Git本身不支持这一功能，但可以通过[expect](https://linux.die.net/man/1/expect)工具轻松实现：
- en: '[PRE0]'
  id: totrans-split-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To install this script, save it in your `PATH` with the name `git-add-match`.
    Once installed, the usage is as follows:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装此脚本，请将其保存在名为`git-add-match`的`PATH`中。安装完成后，使用方法如下：
- en: After running this command, all hunks where the string “foo” is found will be
    staged.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，所有包含字符串“foo”的区块将被暂存。
- en: 'Edit:'
  id: totrans-split-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑：
- en: 'A user on [lobste.rs suggested](https://lobste.rs/s/2iogwz/git_programmatic_staging#c_q5btxo)
    using [grepdiff](https://linux.die.net/man/1/grepdiff) instead:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[lobste.rs上的用户建议](https://lobste.rs/s/2iogwz/git_programmatic_staging#c_q5btxo)使用[grepdiff](https://linux.die.net/man/1/grepdiff)替代：'
- en: '[PRE1]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
