- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:41:10'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:41:10
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Dynamic Printf Debugging with GDB – Abstract Expression
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GDB 进行动态 Printf 调试 – 抽象表达
- en: 来源：[https://abstractexpr.com/2024/03/03/dynamic-printf-debugging-with-gdb/](https://abstractexpr.com/2024/03/03/dynamic-printf-debugging-with-gdb/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://abstractexpr.com/2024/03/03/dynamic-printf-debugging-with-gdb/](https://abstractexpr.com/2024/03/03/dynamic-printf-debugging-with-gdb/)
- en: When we debug a program with `printf()` we have to recompile it whenever we
    add new `printf()` statements! Right!?
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 `printf()` 调试程序时，每次添加新的 `printf()` 语句时都需要重新编译它！对吧！?
- en: Wrong!
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 错了！
- en: With gdb we can add `printf()` statements without recompiling a program and
    even add them while it is running.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 gdb 我们可以在不重新编译程序的情况下添加 `printf()` 语句，甚至可以在其运行时添加它们。
- en: Adding Printfs with GDB
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GDB 添加 Printfs
- en: 'Let’s say we have the following example program that computes the sum of all
    the elements of an array:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有以下计算数组所有元素和的示例程序：
- en: '[PRE0]'
  id: totrans-split-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Save this program to `sumarray.c` and compile it with the following command:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将此程序保存为 `sumarray.c` 并使用以下命令编译它：
- en: '[PRE1]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When we run it the output will look like this:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行它时，输出将如下所示：
- en: '[PRE2]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What if we want to add a debug print before the for loop to print out the number
    of elements in the array, and a debug print inside the loop that prints the current
    loop index and the value of the current array element?
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在 `for` 循环之前添加一个调试打印，打印出数组中的元素数量，并在循环内部添加一个调试打印，打印当前循环索引和当前数组元素的值，该怎么办？
- en: 'Since we already compiled our program with debug information we can just open
    it with gdb:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经使用调试信息编译了我们的程序，我们可以直接用 gdb 打开它：
- en: If you want to see the source code within gdb for orientation you can just use
    the list command. Or you can use the enable tui command to get a semi-graphical
    UI where you can see the source code all the time.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在 gdb 中查看源代码以进行定位，只需使用 `list` 命令。或者，您可以使用 `enable tui` 命令获取一个半图形界面，您可以在其中始终看到源代码。
- en: 'We add our first dynamic printf at line 8 to print out the total number of
    elements in the array:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第 8 行添加我们的第一个动态 `printf`，以打印出数组中元素的总数：
- en: '[PRE3]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The first part of the syntax is like adding a breakpoint in gdb. After that,
    there is a comma and a C format string followed by the parameters to the format
    string. Of course, we can print multiple variables at once, as we see when adding
    the second dynamic print:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 语法的第一部分类似于在 gdb 中添加断点。之后是一个逗号和一个 C 格式字符串，然后是格式字符串的参数。当然，我们可以一次打印多个变量，就像在添加第二个动态打印时看到的那样：
- en: '[PRE4]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The debugger has added a breakpoint to our program for each of our dynamic printfs.
    But instead of interrupting the program and dropping us into the debugger those
    breakpoints execute `printf()` with the given format string and parameters and
    continue the program.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器为我们的程序的每个动态 `printf` 添加了断点。但是，这些断点不会中断程序并将我们放入调试器，而是执行带有给定格式字符串和参数的 `printf()`，然后继续执行程序。
- en: 'We can now run our program from within gdb with:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在 gdb 中运行我们的程序：
- en: 'The output should now look similar to that:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 输出现在应该类似于这样：
- en: '[PRE5]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we use the `info break` command to list all breakpoints we will see that
    our dynamic printfs are indeed represented as breakpoints by gdb:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用 `info break` 命令列出所有断点，我们将看到 gdb 实际上将我们的动态 `printf` 表示为断点：
- en: '[PRE6]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To delete a dynamic printf you can use the `delete` command, followed by the
    number of the breakpoint (e.g. `delete 2` to delete the second dynamic print).
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除动态 `printf`，您可以使用 `delete` 命令，后跟断点号（例如 `delete 2` 删除第二个动态打印）。
- en: Conditional Dynamic Printfs
  id: totrans-split-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件动态 Printf
- en: When code runs very often (e.g. in a loop) there are situations where you don’t
    want your `printf()` calls to execute every time but only when a variable has
    a certain value or some other special condition is met. Otherwise, there would
    be so much output that it would be very hard to find the relevant lines in all
    of the irrelevant debug output.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码运行频繁时（例如在循环中），存在这样的情况：您不希望 `printf()` 调用每次都执行，而只有当变量具有特定值或满足某些其他特殊条件时才执行。否则，输出太多，很难在所有无关的调试输出中找到相关行。
- en: When you add calls to `printf()` to your source code, you can just put the `printf()`
    inside an `if` block and your problem is solved.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在源代码中添加 `printf()` 调用时，您可以将 `printf()` 放在 `if` 块中，这样问题就解决了。
- en: With dprintf you first add your dynamic print. Then you make the resulting breakpoint
    conditional by using the gdb command `condition`.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `dprintf`，首先添加动态打印。然后，通过使用 gdb 命令 `condition`，将生成的断点设为条件断点。
- en: 'In our last example, gdb created the breakpoint number 2 for the second dynamic
    printf statement (the one that prints the index and the value in the loop). If
    we wanted to make it print its output only for even loop indexes, we could achieve
    this with the following command:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的最后一个示例中，gdb 为第二个动态 printf 语句（在循环中打印索引和值的语句）创建了断点号 2。如果我们希望仅在偶数循环索引时打印其输出，我们可以使用以下命令实现：
- en: '[PRE7]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With this modification, the output of our program will now look like this in
    gdb:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个修改，我们的程序在 gdb 中的输出现在会像这样：
- en: '[PRE8]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Saving and Loading Dynamic Printfs
  id: totrans-split-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存和加载动态 Printfs
- en: 'Since dynamic printfs are breakpoints, we can save them like any other breakpoints
    with the *save breakpoints* command:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于动态 printf 是断点，我们可以像保存其他断点一样保存它们，使用 *save breakpoints* 命令：
- en: '[PRE9]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And to load them we can use the *source* command:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载它们，我们可以使用 *source* 命令：
- en: Printing Discarded Function Return Values
  id: totrans-split-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打印被丢弃的函数返回值
- en: Sometimes you want to print the return value of a function. This is easy to
    accomplish if the function’s return value is stored in a variable when it is called.
    But what if the return value is ignored by the code that calls it?
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您想打印函数的返回值。如果在调用它时函数的返回值存储在变量中，则很容易实现。但是，如果调用它的代码忽略了返回值，该怎么办呢？
- en: 'Let’s consider this program:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑这个程序：
- en: '[PRE10]'
  id: totrans-split-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here the function `func()` is called and it returns an int value. But the code
    that calls it ignores this fact and discards the return value.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里函数 `func()` 被调用并返回一个整数值。但是调用它的代码忽略了这个事实，并且丢弃了返回值。
- en: 'Save it to a file named `return.c` and compile it with:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存到名为 `return.c` 的文件中，并用以下命令编译它：
- en: '[PRE11]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we are on an x86-64 machine and we know that the calling convention for
    this architecture mandates that return values (of integer and pointer types) are
    returned in the register `RAX`, this problem is easy to solve. We just put a `dprintf`
    in the line after the function call and print the value of the `RAX` register:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 x86-64 机器上，并且我们知道该架构的调用约定要求整数和指针类型的返回值存储在 `RAX` 寄存器中，那么这个问题很容易解决。我们只需在函数调用后的行后放置一个
    `dprintf`，并打印 `RAX` 寄存器的值：
- en: '[PRE12]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'On ARM64 (aka AArch64) we have to print the `x0` register instead:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ARM64（也称为 AArch64）上，我们必须打印 `x0` 寄存器：
- en: '[PRE13]'
  id: totrans-split-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When we run the program with
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行程序时，
- en: 'the output will look similar to this:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下内容：
- en: '[PRE14]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Custom Printf Function
  id: totrans-split-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义 Printf 函数
- en: Instead of using `printf()` to output our debug messages gdb also allows us
    to configure our own custom function to be called for every `dprintf` we add to
    our code.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用 `printf()` 来输出我们的调试消息，gdb 也允许我们配置我们自己的自定义函数，以便在我们的代码中添加每个 `dprintf` 时调用它。
- en: 'Such a custom function might look like this:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的自定义函数可能如下所示：
- en: '[PRE15]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This function returns an `int` and expects a format string and a variable number
    of additional arguments. Therefore, it has the same prototype as `printf()`.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回一个 `int`，并期望一个格式字符串和可变数量的附加参数。因此，它与 `printf()` 具有相同的原型。
- en: It first initializes the variable argument list and then calls `vfprintf()`
    (this function is a variant of `fprintf()` that accepts the variable argument
    list in the form of a `va_list` variable) with a `FILE` pointer stored in a global
    variable, the format string, and the variable argument list.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 它首先初始化变量参数列表，然后调用 `vfprintf()`（此函数是 `fprintf()` 的一种变体，接受以 `va_list` 变量形式的变量参数列表，以及存储在全局变量中的
    `FILE` 指针和格式字符串）。
- en: To use this function we need to open the logfile at the start of the main function.
    We must not put a `dprintf` at any point in the program before the file has been
    opened or we get a segmentation fault due to the global variable `logfile` still
    being `NULL`.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此函数，我们需要在主函数开始时打开日志文件。我们不能在程序的任何点之前放置 `dprintf`，否则由于全局变量 `logfile` 仍为 `NULL`，我们会得到段错误。
- en: 'The full code of our modified example program looks like this:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们修改后的示例程序的完整代码如下：
- en: '[PRE16]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let’s save this to a file named `custom_printf.c` and compile it with:'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其保存到名为 `custom_printf.c` 的文件中，并用以下命令编译它：
- en: '[PRE17]'
  id: totrans-split-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After loading the resulting `custom_printf` program with gdb we first have
    to set the calling style for `dprintf` to `call` (otherwise, gdb uses a builtin
    printf instead of looking it up in our program), and set the function used by
    `dprintf` to our `log_msg` function:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 gdb 加载生成的 `custom_printf` 程序之后，我们首先必须将 `dprintf` 的调用风格设置为 `call`（否则，gdb
    将使用内置的 printf 而不是在我们的程序中查找它），并将 `dprintf` 使用的函数设置为我们的 `log_msg` 函数：
- en: '[PRE18]'
  id: totrans-split-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now we can set our dprintfs with new line numbers:'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以为我们的 dprintf 设置新的行号：
- en: '[PRE19]'
  id: totrans-split-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Once you execute the program with
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您执行程序时，
- en: the output of the `dprintfs` should now appear in the file `logfile.txt` instead
    of on the screen.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`dprintfs`的输出应该出现在文件`logfile.txt`中，而不是在屏幕上显示。
- en: Conclusion
  id: totrans-split-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: The dynamic printf feature of gdb is a very powerful alternative to adding throw-away
    `printf()` statements to your code while debugging. You can add new dynamic printfs
    without recompiling your program, and you can even add additional print statements
    while your program is running.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: gdb 的动态 printf 功能是在调试过程中非常强大的替代方案，而不是在代码中添加一次性的 `printf()` 语句。你可以在不重新编译程序的情况下添加新的动态
    printf，并且甚至可以在程序运行时添加额外的打印语句。
- en: The last advantage is especially useful when debugging long-running programs
    like servers. Imagine you add some initial dynamic printfs. Then you start your
    server and send a request. As you learn more and dig deeper into the code you
    add more dynamic printfs from the comfort of your debugger and start a new request
    every time. Once you analyze the output you add more dynamic printfs until you
    find your bug.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当调试长时间运行的程序（比如服务器）时，最后一个优势尤其有用。想象一下，你添加了一些初始的动态 printf。然后启动服务器并发送请求。随着你对代码的深入了解，你可以在调试器中舒适地添加更多动态
    printf，并每次发送新的请求。分析输出后，你会继续添加更多动态 printf 直到找到 bug。
- en: Add to this the feature to save your dynamic printfs to a file for later debugging
    sessions, as well as the ability to print discarded function return values and
    you will see why gdb pushes printf debugging to the next level.
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这个功能后，你可以将动态的`printf`保存到文件中，以便于后续的调试会话，还可以打印被丢弃的函数返回值，这样你就能理解为什么 gdb 将 printf
    调试推向了新的高度。
