- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:33:44'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:33:44
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Why bad scientific code beats code following "best practices"
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么糟糕的科学代码胜过遵循“最佳实践”的代码
- en: 来源：[https://yosefk.com/blog/why-bad-scientific-code-beats-code-following-best-practices.html](https://yosefk.com/blog/why-bad-scientific-code-beats-code-following-best-practices.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://yosefk.com/blog/why-bad-scientific-code-beats-code-following-best-practices.html](https://yosefk.com/blog/why-bad-scientific-code-beats-code-following-best-practices.html)
- en: I've just read "[The Low Quality of Scientific Code](http://techblog.bozho.net/?p=1423)",
    which claims that code written by scientists comes out worse than it would if
    "software engineers" were involved.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我刚刚读了“[科学代码的低质量](http://techblog.bozho.net/?p=1423)”，该文声称，由科学家编写的代码比如果有“软件工程师”参与会更糟糕。
- en: I've been working, for more than a decade, in an environment dominated by people
    with a background in math or physics who often have sparse knowledge of "software
    engineering".
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个由数学或物理背景的人主导的环境中工作了十多年，这些人对“软件工程”通常了解不多。
- en: Invariably, the biggest messes are made by the minority of people who do define
    themselves as programmers. I will confess to having made at least a couple of
    large messes myself that are still not cleaned up. There were also a couple of
    other big messes where the code luckily went down the drain, meaning that the
    damage to my employer was limited to the money wasted on my own salary, without
    negative impact on the productivity of others.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，最大的混乱总是由那些将自己定义为程序员的少数人造成的。我要承认，我至少也搞过几次大混乱，至今还没清理干净。还有几次大混乱，幸运的是代码最终被抛弃了，这意味着对我的雇主造成的损失仅限于浪费在我的工资上的钱，而没有对其他人的生产力造成负面影响。
- en: I claim to have repented, mostly. I try rather hard to keep things boringly
    simple and I don't think I've done, in the last 5-6 years, something that causes
    a lot of people to look at me funny having spent the better part of the day dealing
    with the products of my misguided cleverness.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我声称我大部分时候已经忏悔了。我很努力地保持事情无聊简单，过去5-6年里，我没有做过让很多人因为我那些误导人的聪明想法而怪异看我的事情。
- en: And I know a few programmers who have explicitly *not* repented. And people
    look at them funny and they think they're right and it's everyone else who is
    crazy.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我认识一些程序员，他们明确地*没有*忏悔过。人们看着他们觉得他们是对的，而是其他人疯了。
- en: 'In the meanwhile, people who "aren''t" programmers but are more of a mathematician,
    physicist, algorithm developer, scientist, you name it commit sins mostly of the
    following kinds:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，“不是”程序员但更像数学家、物理学家、算法开发者、科学家等的人犯的罪主要有以下几种：
- en: Long functions
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长函数
- en: Bad names (m, k, longWindedNameThatYouCantReallyReadBTWProgrammersDoThatALotToo)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 糟糕的名称（m、k、长得看不懂的名称，顺便说一句，程序员经常这样做）
- en: Access all over the place – globals/singletons, "god objects" etc.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到处访问——全局/单例，“上帝对象”等等
- en: Crashes (null pointers, bounds errors), largely mitigated by valgrind/massive
    testing
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 崩溃（空指针、边界错误），主要由valgrind/大规模测试缓解
- en: Complete lack of interest in parallelism bugs (almost fully mitigated by tools)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全不感兴趣并行性错误（几乎完全由工具缓解）
- en: Insufficient reluctance to use libraries written by clever programmers, with
    overloaded operators and templates and stuff
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不愿意使用聪明程序员编写的库，包含重载运算符和模板等等
- en: This I can deal with, you see. I somehow rarely have a problem, if anyone wants
    me to help debug something, to figure out what these guys were trying to do. I
    mean in the software sense. Algorithmically maybe I don't get them fully. But
    what variable they want to pass to what function I usually know.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个我能应付，你知道。如果有人让我帮忙调试什么东西，我很少会遇到问题，弄清楚这些家伙想要做什么。我是说在软件方面。在算法方面可能我不完全理解。但是他们想要传递给什么函数的变量我通常知道。
- en: 'Not so with software engineers, whose sins fall into entirely different categories:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程师则不然，他们的罪行属于完全不同的类别：
- en: Multiple/virtual/high-on-crack inheritance
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多/虚/高度上瘾的继承
- en: 7 to 14 stack frames composed principally of thin wrappers, some of them function
    pointers/virtual functions, possibly inside interrupt handlers or what-not
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由主要由薄包装组成的7到14个堆栈帧，其中一些是函数指针/虚函数，可能位于中断处理程序内或其他地方
- en: Files spread in umpteen directories
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件散布在无数目录中
- en: Lookup using dynamic structures from hell – dictionaries of names where the
    names are concatenated from various pieces at runtime, etc.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从地狱中使用动态结构进行查找——名称字典，其中名称在运行时由各种部分连接而成等等。
- en: Dynamic loading and other grep-defeating techniques
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态加载和其他躲避grep技术
- en: A forest of near-identical names along the lines of DriverController, ControllerManager,
    DriverManager, ManagerController, controlDriver ad infinitum – all calling each
    other
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一片近乎相同的名称森林，比如DriverController，ControllerManager，DriverManager，ManagerController，controlDriver等等——所有这些都互相调用
- en: Templates calling overloaded functions with declarations hopefully visible where
    the template is defined, maybe not
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板调用重载函数，声明希望在定义模板的地方可见，也许不可见
- en: Decorators, metaclasses, code generation, etc. etc.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 装饰器，元类，代码生成等等
- en: The result is that you don't know who calls what or why, debuggers are of moderate
    use at best, IDEs & grep die a slow, horrible death, etc. You literally have to
    give up on ever figuring this thing out before tears start flowing freely from
    your eyes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是你不知道谁调用了什么或为什么，调试器在最好的情况下也只能起到一点作用，IDE和grep慢慢地死去，等等。在眼泪自由流淌之前，你真的得放弃弄清楚这个东西的想法。
- en: Of course this is a gross caricature, not everybody is a sinner at all times,
    and, like, I'm principally a "programmer" rather than "scientist" and I sincerely
    believe to have a net positive productivity after all – but you get the idea.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这是一个严重的讽刺，不是每个人都是罪人，而且，像我主要是一个“程序员”而不是“科学家”，我真诚地相信在所有之后有净正的生产率——但你明白我的意思。
- en: Can scientific code benefit from better "software engineering"? Perhaps, but
    I wouldn't trust software engineers to deliver those benefits!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 科学代码能从更好的“软件工程”中受益吗？也许，但我不会相信软件工程师能带来这些好处！
- en: Simple-minded, care-free near-incompetence can be better than industrial-strength
    good intentions paving a superhighway to hell. The "real world" outside the computer
    is full of such examples.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 简单而无忧无虑的近乎无能可能比工业强度的良好意图更好，后者为通往地狱的超级高速公路铺平道路。计算机之外的“现实世界”充满了这样的例子。
- en: 'Oh, and one really mean observation that I''m afraid is too true to be omitted:
    idleness is the source of much trouble. A scientist has his science to worry about
    so he doesn''t have time to complexify the code needlessly. Many programmers have
    no real substance in their work – the job is trivial – so they have too much time
    on their hands, which they use to dwell on "API design" and thus monstrosities
    are born.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，还有一个真正刻薄的观察，恐怕是太真实了，不能忽略：懒惰是许多麻烦的根源。科学家有自己的科学要担忧，所以他们没有时间毫无必要地使代码复杂化。许多程序员的工作没有真正的实质性内容——工作是微不足道的——所以他们有太多的空闲时间，他们用这些时间来纠缠于“API设计”，从而产生了怪胎。
- en: (In fact, when the job is far from trivial technically and/or socially, programmers'
    horrible training shifts their focus away from their immediate duty – is the goddamn
    thing actually working, nice to use, efficient/cheap, etc.? – and instead they
    declare themselves as responsible for nothing but the sacred APIs which they proceed
    to complexify beyond belief. Meanwhile, functionally the thing barely works.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: （事实上，当工作在技术和/或社交上远非微不足道时，程序员可怕的训练使他们的注意力从他们的直接职责上转移——该死的东西实际上是否在工作，易于使用，高效/便宜等等？——而不是他们宣称自己只负责神圣的API，他们继续使之复杂到难以置信的程度。与此同时，功能上，这个东西几乎不起作用。）
