- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:42:11'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:42:11
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Decentralized Hacker News | Enindu Alahapperuma
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 去中心化的 Hacker News | Enindu Alahapperuma
- en: 来源：[https://enindu.com/blog/decentralized-hacker-news](https://enindu.com/blog/decentralized-hacker-news)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://enindu.com/blog/decentralized-hacker-news](https://enindu.com/blog/decentralized-hacker-news)
- en: While scrolling through [Hacker News](https://news.ycombinator.com), I randomly
    got this idea! I'm not talking about only Hacker News, but a combination of Hacker
    News, [Mastodon](https://joinmastodon.org), and [Reddit](https://www.reddit.com).
    Do you need it? I don't know. Maybe this idea is nothing but rubbish. However,
    I have a business plan too. So let's get into the idea.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览[Hacker News](https://news.ycombinator.com)时，我随机得到了这个想法！我不只是说 Hacker News，还有
    Hacker News、[Mastodon](https://joinmastodon.org)和[Reddit](https://www.reddit.com)的结合。你需要吗？我不知道。也许这个想法只是废话。但是，我也有一个商业计划。所以让我们来谈谈这个想法。
- en: 'This system has three main components:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此系统有三个主要组件：
- en: Client
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端
- en: API server
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: API 服务器
- en: Courier server
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 信使服务器
- en: The client
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端
- en: 'The user is the client. There will be two types of clients for this system:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 用户是客户端。对于这个系统，将有两种类型的客户端：
- en: Website
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网站
- en: Mobile application
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动应用程序
- en: The website is just a front-end that connects to the API server. We can build
    the website from any technology. I prefer something like [Vue](https://vuejs.org)
    or [React](https://react.dev). Anyway, I'm not a front-end developer, so any front-end
    developer can suggest the technology.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 网站只是连接到 API 服务器的前端。我们可以从任何技术构建网站。我更喜欢像[Vue](https://vuejs.org)或[React](https://react.dev)这样的东西。无论如何，我不是前端开发人员，所以任何前端开发人员都可以建议技术。
- en: The mobile application is just a front-end as well as the website. We can build
    it using any technology that a front-end developer suggests. I haven't framed
    into any technologies for both the website and mobile application yet. This is
    just a high-level explanation of the system that I'm talking about.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用程序也只是一个前端，就像网站一样。我们可以使用前端开发人员建议的任何技术来构建它。我还没有为网站和移动应用程序确定任何技术。这只是我所说的系统的高层解释。
- en: From the client-side, users are allowed to register into the system, log in
    to their accounts, and post anything like in Reddit. So they can post articles
    or links. When saying articles, I'm not talking about [microblogging](https://en.wikipedia.org/wiki/Microblogging)
    but real [blogging](https://en.wikipedia.org/wiki/Blog). This is where Reddit-ness
    comes into play. In Hacker News, we can't do blogging. I have a reason to post
    articles in this system. Let's talk about that later.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从客户端来看，用户被允许注册到系统中，登录到他们的账户，并像在 Reddit 中一样发布任何内容。所以他们可以发布文章或链接。当说到文章时，我不是在说[微博](https://en.wikipedia.org/wiki/Microblogging)，而是真正的[博客](https://en.wikipedia.org/wiki/Blog)。这就是
    Reddit 的特点。在 Hacker News 中，我们不能做博客。我有理由在这个系统中发布文章。我们稍后再谈。
- en: The client, website, or mobile application is joined to the API server through
    a [REST API](https://en.wikipedia.org/wiki/REST). This is my idea. If you have
    other alternatives, suggestions are always welcome. Whatever technology we use
    here, anyone should have the freedom to create clients on their own. So the API
    server should be publicly accessible. This means, as a decentralized system, anyone
    should be able to create their own client for any instance. This should be an
    open network. That's what was in my mind. If the instance owner needs to make
    their instance private, they should host it in a private network, where outsiders
    don't have access.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端、网站或移动应用程序通过[REST API](https://en.wikipedia.org/wiki/REST)连接到 API 服务器。这是我的想法。如果您有其他替代方案，建议总是受欢迎的。无论我们在这里使用什么技术，任何人都应该有自由创建自己客户端的权利。因此，API
    服务器应该是公开可访问的。这意味着，作为一个去中心化的系统，任何人都应该能够为任何实例创建自己的客户端。这应该是一个开放的网络。这就是我心中所想的。如果实例所有者需要使其实例变为私有，则应将其托管在私有网络中，外部人员无法访问。
- en: The API server
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 服务器
- en: 'This is the engine of this system. In the API server, there will be three primary
    components:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这个系统的引擎。在 API 服务器中，将有三个主要组件：
- en: API
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: API
- en: Database
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据库
- en: Cache
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缓存
- en: Again, the API can be written in any technology. I have [Go](https://go.dev),
    [Python](https://www.python.org), [Node.js](https://nodejs.org/en), [PHP](https://www.php.net),
    and [Ruby](https://www.ruby-lang.org) in my mind. Since this is the engine of
    this system, the API must be able to process lots of data. So, not like in the
    front-end, the technology will be crucial here. We should use maintainable, solid
    technology for this.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，API可以用任何技术编写。我心中有[Go](https://go.dev)，[Python](https://www.python.org)，[Node.js](https://nodejs.org/en)，[PHP](https://www.php.net)和[Ruby](https://www.ruby-lang.org)。由于这是系统的引擎，API必须能够处理大量数据。因此，与前端不同，技术在这里将至关重要。我们应该使用可维护的、可靠的技术。
- en: All the user's data will be stored in the database. We can use separate storages,
    something like an [S3](https://aws.amazon.com/s3) bucket, for storing files. I
    don't have any specific technology to use as the database. We can use [PostgreSQL](https://www.postgresql.org),
    [MariaDB](https://mariadb.org), or even a no-SQL database like [MongoDB](https://www.mongodb.com).
    This is open to suggestions as well.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所有用户的数据将存储在数据库中。我们可以使用单独的存储，类似于[S3](https://aws.amazon.com/s3)存储桶，用于存储文件。我没有任何特定的技术用作数据库。我们可以使用[PostgreSQL](https://www.postgresql.org)，[MariaDB](https://mariadb.org)，甚至是像[MongoDB](https://www.mongodb.com)这样的无SQL数据库。这也可以接受建议。
- en: We need a cache to optimize the user experience as well as the federation across
    the instances. When an outer instance sends a request to this system, the cache
    server will serve the data. The internal database is not open to the outer instances.
    Maybe we can use something like [Redis](https://redis.io) for this. I don't know.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个缓存来优化用户体验以及跨实例的联邦。当外部实例向此系统发送请求时，缓存服务器将提供数据。内部数据库不向外部实例开放。也许我们可以使用类似于[Redis](https://redis.io)的东西。我不知道。
- en: The API server is connected to the courier server via something like a REST
    API. And again, the mentioned technology is just an example. We can use whatever
    we like.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: API服务器通过类似于REST API的方式连接到快递服务器。同样，上述技术只是一个例子。我们可以使用任何我们喜欢的。
- en: The courier server
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快递服务器
- en: We use the courier server to do the federation among the instances. Mastodon
    uses the [ActivityPub](https://www.w3.org/TR/activitypub) protocol to do this.
    We also can use that or we can just use a REST API with a standardized structure.
    As always, I'm open to any suggestion.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用快递服务器在实例之间进行联邦。Mastodon使用[ActivityPub](https://www.w3.org/TR/activitypub)协议来实现这一点。我们也可以使用那个，或者我们可以只是使用一个具有标准结构的REST
    API。与往常一样，我对任何建议都持开放态度。
- en: The courier server is a two-way server, which means it sends requests and receives
    requests at the same time. When an external instance requests data from this instance,
    the request is sent from the courier server of the external instance. That request
    was received by the courier server of this instance. After that, the internal
    requests made within the internal courier server, internal API server, cache,
    and database. After that, the response will be sent to the external courier server.
    Only courier servers communicate with each other. Endpoints, which are not available
    for the front-end, will be only opened to the internal courier server. External
    courier servers can't communicate directly with other API servers.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 快递服务器是双向服务器，意味着它同时发送请求和接收请求。当外部实例从此实例请求数据时，请求是从外部实例的快递服务器发送的。该请求被此实例的快递服务器接收。之后，在内部快递服务器、内部API服务器、缓存和数据库内部进行内部请求。之后，响应将发送到外部快递服务器。只有快递服务器彼此之间进行通信。对于前端不可用的端点，将只对内部快递服务器开放。外部快递服务器不能直接与其他API服务器通信。
- en: We might need to use some kind of authentication system across the internal
    API server and internal courier server. Since courier servers are externally accessible
    from other courier servers, we also might need to add an authentication layer
    for courier servers. Courier servers should not be publicly accessible for anyone
    but other courier servers. I'm still working on what kind of authentication system
    we should implement for this. Suggestions are always welcome.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能需要在内部API服务器和内部快递服务器之间使用某种身份验证系统。由于快递服务器可以从其他快递服务器外部访问，我们可能还需要为快递服务器添加一个身份验证层。快递服务器不应该对除其他快递服务器之外的任何人公开。我仍在考虑我们应该为此实施什么样的身份验证系统。欢迎任何建议。
- en: The business idea
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 商业理念
- en: I'm not talking about a commercial system here, but an open-source project.
    So when I say business, I'm not talking about money.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我这里不是在谈论商业系统，而是一个开源项目。所以当我说商业时，我不是在谈论钱。
- en: 'There are several ways for someone to use this system:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以让某人使用这个系统：
- en: We can use this for blogging. We already know about [IndieWeb](https://indieweb.org),
    [Webmention](https://www.w3.org/TR/webmention), and other stuff. We can do things
    like Webmention in this system. Each instance will act like an independent blog.
    Just like Mastodon, but for blogging.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以用这个来写博客。我们已经了解[IndieWeb](https://indieweb.org)，[Webmention](https://www.w3.org/TR/webmention)，以及其他东西。我们可以在这个系统中做Webmention之类的事情。每个实例都将像一个独立的博客一样运作。就像Mastodon一样，但用于博客。
- en: We can use this as an internal system of a company. The company has to set up
    instances for each component. Each instance has a certain set of employees, but
    due to the decentralized nature, all employees can work together.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以将其用作公司的内部系统。公司必须为每个组件设置实例。每个实例都有一定的员工，但由于分散的性质，所有员工都可以共同工作。
- en: Hacker News stands for one reason and one reason only. We can use this system
    to make hundreds or thousands of Hacker News sites for various categories.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hacker News仅代表一个原因，那就是我们可以使用这个系统为各种类别创建数百个或数千个Hacker News站点。
- en: I have more use cases for this system. I'm just too lazy to mention them all.
    By the way, you get the idea. But three things are always speaking in my mind.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我对这个系统有更多的用例。我只是太懒得一一提及它们。顺便说一句，你懂我的意思。但有三件事情一直在我脑海里说话。
- en: Am I just talking about Mastodon? Well, maybe.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我只是在谈论Mastodon吗？嗯，也许。
- en: What is the difference between this system and Mastodon? I'm not so sure.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个系统和Mastodon有什么区别？我不太确定。
- en: Do we need this system? I don't know.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要这个系统吗？我不知道。
- en: However, we can find the correct answers for them, together.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以一起找到正确的答案。
- en: Disclaimer
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 免责声明
- en: This is a pure idea of mine. I didn't copy it from anywhere. If someone has
    an idea like this, I don't intend to reveal it because I didn't know that they
    had an idea like this.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我自己的纯粹想法。我没有从任何地方抄袭。如果有人有类似的想法，我并不打算揭示，因为我不知道他们有这样的想法。
