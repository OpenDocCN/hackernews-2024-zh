- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:33:32'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:33:32'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: In-browser code playgrounds
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在浏览器中的代码游乐场
- en: 来源：[https://antonz.org/in-browser-code-playgrounds/](https://antonz.org/in-browser-code-playgrounds/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://antonz.org/in-browser-code-playgrounds/](https://antonz.org/in-browser-code-playgrounds/)
- en: In-browser code playgrounds
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在浏览器中的代码游乐场
- en: 'I''m a big fan of interactive code snippets in all kinds of technical writing,
    from product docs to online courses to blog posts. Like this one:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我是各种技术写作的交互式代码片段的忠实粉丝，从产品文档到在线课程再到博客文章都是如此。就像这样一个：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <codapi-snippet sandbox="python" editor="basic">In fact, I even built an open
    source tool called Codapi ^(for embedding such snippets.)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet sandbox="python" editor="basic">事实上，我甚至建立了一个名为 Codapi ^(用于嵌入此类片段的开源工具。)
- en: 'Typically, a code playground consists of a client-side widget and a server-side
    part that executes the code and returns the result:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，代码游乐场由客户端小部件和执行代码并返回结果的服务器端部分组成：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Personally, I'm quite happy with this setup. But often people prefer not to
    depend on a server and run the code entirely in the browser. So I decided to look
    into it and implemented embeddable in-browser code playgrounds for JavaScript,
    Python, PHP, Ruby, Lua, and SQLite.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我对这个设置相当满意。但是，人们通常更喜欢不依赖服务器并完全在浏览器中运行代码。因此，我决定研究一下，并为 JavaScript、Python、PHP、Ruby、Lua
    和 SQLite 实现了可嵌入的浏览器中的代码游乐场。
- en: Running language runtimes in the browser
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在浏览器中运行语言运行时
- en: The modern way to run arbitrary programs in the browser seems to be WebAssembly
    System Interface (WASI^() — an executable binary format based on WebAssembly.
    With WASI, you compile a program (originally written in C, Rust, Go, or some other
    language) into a WASI binary and then run it with a WASI runtime (there are a
    number of these runtimes from different vendors).)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中运行任意程序的现代方法似乎是 WebAssembly 系统接口（WASI^() ——一种基于 WebAssembly 的可执行二进制格式。使用
    WASI，你将一个程序（最初用 C、Rust、Go 或其他语言编写）编译成 WASI 二进制文件，然后使用 WASI 运行时（来自不同供应商的许多运行时）运行它。
- en: Just as we can compile an arbitrary program into WASI binary, we can take a
    language interpreter like Lua or CPython, compile it into WASI, and run it with
    the WASI runtime to execute Lua or Python code. In practice, however, it's not
    that easy, because WASI compilers do not (yet) implement all the features of traditional
    compilers like GCC.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们可以将任意程序编译为 WASI 二进制文件一样，我们也可以将像 Lua 或 CPython 这样的语言解释器编译为 WASI，并使用 WASI
    运行时运行它，以执行 Lua 或 Python 代码。然而，在实践中，情况并非如此简单，因为 WASI 编译器尚未（尚）实现传统编译器（如 GCC）的所有功能。
- en: Fortunately, VMWare Labs has already done the hard part and compiled PHP^(,
    Python ^(and Ruby ^(into WASI. So all I had to do was publish the WASI binaries
    as NPM packages to make them available on the CDN. I've also compiled Lua ^(and
    SQLite ^(to WASI.)))))
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，VMWare Labs 已经完成了艰苦的工作，并将 PHP^(，Python ^(和 Ruby ^(编译成了 WASI。所以我所要做的就是将
    WASI 二进制文件发布为 NPM 包，以便在 CDN 上提供它们。我还编译了 Lua ^(和 SQLite ^(到 WASI。)))))
- en: There is also Kohei Tokunaga's container2wasm initiative^(, which converts arbitrary
    Docker images into WASI binaries. It looks promising, but it generates 100+ MB
    binaries for even the smallest Alpine-based images. And since downloading hundreds
    of megabytes just to read an interactive article is probably not the best idea,
    this approach is not very practical (yet).)
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 还有 Tokunaga Kohei 的 container2wasm 项目^(，将任意 Docker 映像转换为 WASI 二进制文件。这看起来很有前途，但即使是最小的基于
    Alpine 的映像也会生成 100+ MB 的二进制文件。而且，由于下载数百兆字节的内容仅仅是为了阅读交互式文章可能并不是一个好主意，所以这种方法并不是很实用（尚）。)
- en: Language runtimes compiled into WASI are one part of the equation. The other
    one is the WASI runtime (the thing that runs the binaries) capable of working
    in the browser. I chose the Runno ^(runtime by Ben Taylor because it's simple
    and lightweight (27 KB).)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 编译为 WASI 的语言运行时是等式的一部分。另一个部分是 WASI 运行时（运行二进制文件的东西），它能够在浏览器中工作。我选择了由本·泰勒（Ben
    Taylor）制作的 Runno ^(运行时，因为它简单轻量（27 KB）。)
- en: The last step was to modify the JavaScript widget ^(to support pluggable engines
    (WASI is one of them).)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是修改 JavaScript 小部件 ^(以支持可插拔引擎（WASI 是其中之一）))
- en: And that was it!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！
- en: Showcase
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 陈列
- en: Here are some interactive code snippets implemented as described above. Note
    that the language runtime is downloaded when you click the Run button, so the
    first run may take some time. Subsequent runs are almost instantaneous.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些按照上述描述实现的交互式代码片段。请注意，单击运行按钮时将下载语言运行时，因此第一次运行可能需要一些时间。后续运行几乎是即时的。
- en: Python
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python
- en: Executes the code using the Python 3.12 WASI runtime (26.3 MB).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 3.12 WASI 运行时执行代码（26.3 MB）。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <codapi-snippet engine="wasi" sandbox="python" editor="basic">### PHP
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet engine="wasi" sandbox="python" editor="basic">### PHP
- en: Executes the code using the PHP 8.2 WASI runtime (13.2 MB).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PHP 8.2 WASI 运行时（13.2 MB）执行代码。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <codapi-snippet engine="wasi" sandbox="php" editor="basic" template="main.php">###
    Ruby
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet engine="wasi" sandbox="php" editor="basic" template="main.php">###
    Ruby
- en: Executes the code using the Ruby 3.2 WASI runtime (24.5 MB).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Ruby 3.2 WASI 运行时（24.5 MB）执行代码。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <codapi-snippet engine="wasi" sandbox="ruby" editor="basic">### Lua
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet engine="wasi" sandbox="ruby" editor="basic">### Lua
- en: Executes the code using the Lua 5.4 WASI runtime (330 KB).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Lua 5.4 WASI 运行时（330 KB）执行代码。
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <codapi-snippet engine="wasi" sandbox="lua" editor="basic">### JavaScript
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet engine="wasi" sandbox="lua" editor="basic">### JavaScript
- en: Executes the code using the AsyncFunction^.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AsyncFunction^ 执行代码。
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <codapi-snippet engine="browser" sandbox="javascript" editor="basic">### Fetch
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet engine="browser" sandbox="javascript" editor="basic">### Fetch
- en: Executes the code using the Fetch API^.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Fetch API^ 执行代码。
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <codapi-snippet engine="browser" sandbox="fetch" editor="basic">### SQLite
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet engine="browser" sandbox="fetch" editor="basic">### SQLite
- en: Executes the code using the SQLite 3.44 WASI runtime (2.1 MB).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SQLite 3.44 WASI 运行时（2.1 MB）执行代码。
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <codapi-snippet engine="wasi" sandbox="sqlite" editor="basic" template="employees.sql">##
    Advanced features
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet engine="wasi" sandbox="sqlite" editor="basic" template="employees.sql">##
    高级功能
- en: Because the WASI runtime plugs into the existing architecture, WASI-powered
    code snippets support advanced Codapi features such as templates or code cells.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 WASI 运行时插入了现有的架构，所以由 WASI 动力的代码片段支持高级的 Codapi 功能，例如模板或代码单元。
- en: Templates ^(allow you to hide some code behind the scenes and show only the
    relevant part. For example, in the SQLite example above, the `employees` table
    is created as part of the template, so the snippet can take it for granted:)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 模板^(允许您将一些代码隐藏在幕后，仅显示相关部分。 例如，在上面的 SQLite 示例中，`employees` 表作为模板的一部分创建，因此片段可以认为它是理所当然的：)
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <codapi-snippet engine="wasi" sandbox="sqlite" editor="basic" template="employees.sql">Code
    cells ^(allow you to make code snippets depend on each other. For example, the
    first snippet defines the `wrap` function, while the second snippet uses it:)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet engine="wasi" sandbox="sqlite" editor="basic" template="employees.sql">代码单元^(允许您使代码片段相互依赖。
    例如，第一个片段定义了 `wrap` 函数，而第二个片段使用了它:)
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <codapi-snippet id="cell-1" engine="wasi" sandbox="python" editor="basic">[PRE11]
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="cell-1" engine="wasi" sandbox="python" editor="basic">[PRE11]
- en: <codapi-snippet id="cell-2" engine="wasi" sandbox="python" editor="basic" depends-on="cell-1">##
    Usage
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="cell-2" engine="wasi" sandbox="python" editor="basic" depends-on="cell-1">##
    用法
- en: 'To use native browser playgrounds (e.g. JavaScript or Fetch), include the `snippet.js`
    script and add the `codapi-snippet` element next to the static code example. Use
    the `browser` engine:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用原生浏览器游乐场（例如 JavaScript 或 Fetch），请包含 `snippet.js` 脚本并在静态代码示例旁边添加 `codapi-snippet`
    元素。 使用 `browser` 引擎：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To use WASI-powered playgrounds (e.g. Python or SQLite), include two additional
    scripts and use the `wasi` engine:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 WASI 动力的游乐场（例如 Python 或 SQLite），请包含两个额外的脚本并使用 `wasi` 引擎：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To switch from in-browser to server-side playgrounds (which can run virtually
    any software), remove the `engine` attribute:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要从浏览器端切换到服务器端游乐场（可以运行几乎任何软件），请移除 `engine` 属性：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: See the documentation ^(for details.)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅文档^(了解详情。)
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概要
- en: WASI-powered sandboxes allow code snippets to run completely in-browser, with
    no server involved. They may take some time and traffic to initialize the runtime,
    but after that they run almost instantly.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: WASI 动力的沙盒允许代码片段完全在浏览器中运行，不涉及服务器。 它们可能需要一些时间和流量来初始化运行时，但之后它们几乎立即运行。
- en: As implemented in Codapi, they fit nicely into the overall architecture, providing
    access to features like templates and code cells. You can also easily switch from
    a browser-side to a server-side execution model.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在 Codapi 中实现的那样，它们完美地融入了整体架构，提供了对模板和代码单元等功能的访问。 您还可以轻松地从浏览器端切换到服务器端执行模型。
- en: Give them a try!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试一下！
- en: '[Playgrounds](https://github.com/nalgeon/codapi-js/blob/main/docs/browser-only.md)
    • [Snippet widget](https://github.com/nalgeon/codapi-js) • [About Codapi](https://codapi.org/)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[游乐场](https://github.com/nalgeon/codapi-js/blob/main/docs/browser-only.md)
    • [片段小部件](https://github.com/nalgeon/codapi-js) • [关于 Codapi](https://codapi.org/)'
- en: '*[* **Subscribe***](/subscribe/) *to keep up with new posts.**</codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet>'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*[* **订阅***](/subscribe/) *以保持对新文章的跟踪。**'
