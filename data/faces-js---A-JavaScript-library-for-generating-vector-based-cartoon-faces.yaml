- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 12:57:57'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 12:57:57
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: faces.js - A JavaScript library for generating vector-based cartoon faces
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: faces.js - 一个用于生成基于向量的卡通面孔的 JavaScript 库
- en: 来源：[https://zengm.com/facesjs/](https://zengm.com/facesjs/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://zengm.com/facesjs/](https://zengm.com/facesjs/)
- en: A JavaScript library for generating vector-based cartoon faces
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个用于生成基于向量的卡通面孔的 JavaScript 库
- en: To load new random faces, click here or press "r" on your keyboard.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载新的随机面孔，请单击此处或按键盘上的“r”键。
- en: faces.js is a JavaScript library that generates and displays cartoon faces,
    somewhat reminiscent of Nintendo's Miis. Faces are drawn as SVGs and are also
    represented by a small JavaScript object, which allows you to store that object
    and then draw the same face again later.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: faces.js 是一个生成和显示卡通面孔的 JavaScript 库，有点像任天堂的 Miis。面孔以 SVG 形式绘制，同时也用一个小的 JavaScript
    对象表示，这使得你可以存储该对象，稍后再次绘制相同的面孔。
- en: Originally faces.js was made for [Basketball GM](https://basketball-gm.com/)
    and other games by [ZenGM](https://zengm.com/), but now it is used in several
    other projects.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最初 faces.js 是为 [Basketball GM](https://basketball-gm.com/) 和 [ZenGM](https://zengm.com/)
    的其他游戏开发的，但现在它被用于几个其他项目中。
- en: For users
  id: totrans-split-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对用户
- en: You can use the [face editor](/facesjs/editor/) to generate a custom face, and
    then export in JSON/SVG/PNG format.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 [face editor](/facesjs/editor/) 生成一个定制的面孔，然后导出为 JSON/SVG/PNG 格式。
- en: For developers
  id: totrans-split-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对开发者
- en: (This is just a copy of
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: （这只是来自
- en: '[the README from the GitHub repo](https://github.com/zengm-games/facesjs)'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[GitHub 仓库的 README](https://github.com/zengm-games/facesjs)'
- en: .)
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: .）
- en: Installation
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: '[PRE0]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Use
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用
- en: 'Import it with ES modules:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ES 模块导入它：
- en: '[PRE1]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'or CommonJS:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 或者 CommonJS：
- en: '[PRE2]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, generate a random face:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，生成一个随机的面孔：
- en: '[PRE3]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And display it:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后显示它：
- en: '[PRE4]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you’d like a non-random face, look inside the `face` variable and you’ll
    see all the available options for a manually constructed face.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要一个非随机的面孔，请查看 `face` 变量中的所有可用选项，手动构建面孔。
- en: Overrides
  id: totrans-split-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 覆盖
- en: 'Both `display` and `generate` accept an optional argument, specifying values
    to override either the randomly generated face (for `generate`) or the supplied
    face (for `display`). For instance:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`display` 和 `generate` 都接受一个可选参数，用来覆盖随机生成的面孔（对于 `generate`）或提供的面孔（对于 `display`）。例如：'
- en: '[PRE5]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Options
  id: totrans-split-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项
- en: The `generate` function takes a second optional argument, which takes in extra
    parameters for player creation, in the form of an object.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`generate` 函数接受第二个可选参数，这个参数以对象的形式提供额外的玩家创建参数。'
- en: 'Generate a female/male face (default is male):'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个女性/男性面孔（默认为男性）：
- en: '[PRE6]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Assign a race attribute that can be white, black, asian, or brown (default
    is random):'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 分配一个种族属性，可以是白人、黑人、亚洲人或棕色人种（默认是随机的）：
- en: '[PRE7]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Or both together:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 或者一起使用：
- en: '[PRE8]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Exporting SVGs
  id: totrans-split-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出 SVG
- en: API
  id: totrans-split-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API
- en: You can use `faceToSvgString` to convert a face object to an SVG string.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `faceToSvgString` 将面孔对象转换为 SVG 字符串。
- en: '[PRE9]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can also specify overrides, similar to `display`:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以像 `display` 那样指定覆盖选项：
- en: '[PRE10]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`faceToSvgString` is intended to be used in Node.js If you are doing client-side
    JS, it would be more efficient to render a face to the DOM using `display` and
    then [convert it to a blob like this](https://github.com/zengm-games/facesjs/blob/19ce236af6adbf76db29c4e669210b30e1de0e1a/public/editor/downloadFace.ts#L61-L64).'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`faceToSvgString` 旨在在 Node.js 中使用。如果你在客户端使用 JS，使用 `display` 将面孔渲染到 DOM 更为高效，然后像这样
    [将其转换为 Blob](https://github.com/zengm-games/facesjs/blob/19ce236af6adbf76db29c4e669210b30e1de0e1a/public/editor/downloadFace.ts#L61-L64)。'
- en: CLI
  id: totrans-split-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CLI
- en: You can also use `facesjs` as a CLI program. All of the functionality from `generate`
    and `display` are available on the CLI too.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将 `facesjs` 用作 CLI 程序。从 `generate` 和 `display` 中提供的所有功能在 CLI 中也都可以使用。
- en: Examples
  id: totrans-split-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: 'Output a random face to stdout:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 输出一个随机面孔到 stdout：
- en: '[PRE11]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Generate a blue female face and output to stdout:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个蓝色女性面孔并输出到 stdout：
- en: '[PRE12]'
  id: totrans-split-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Generate a male white face and save it to test.svg:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个白人男性面孔并保存为 test.svg：
- en: '[PRE13]'
  id: totrans-split-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Options
  id: totrans-split-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 选项
- en: '[PRE14]'
  id: totrans-split-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`--input-file` and `--input-json` can specify either an entire face object
    or a partial face object. If it’s a partial face object, the other features will
    be random.'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`--input-file` 和 `--input-json` 可以指定一个完整的面部对象或部分面部对象。如果是部分面部对象，其他特征将是随机的。'
- en: Development
  id: totrans-split-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发
- en: 'Running `yarn run dev` will do a few things:'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `yarn run dev` 将执行几个操作：
- en: Give you a URL to open the face editor UI in your browser
  id: totrans-split-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给你一个 URL，在浏览器中打开面孔编辑器 UI
- en: Watch for changes to the code
  id: totrans-split-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监视代码的变化
- en: Watch for changes to the facial feature SVG files
  id: totrans-split-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监视面部特征 SVG 文件的变化
- en: Update the face editor UI when any code or SVG changes
  id: totrans-split-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当任何代码或 SVG 更改时更新面孔编辑器 UI
- en: This lets you immediately see your changes as you work.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这使你在工作时能立即看到你的变化。
- en: Adding new facial features
  id: totrans-split-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新的面部特征
- en: Each face is assembled from multiple SVGs. You can see them within the “svg”
    folder. If you want to add another feature, just create an SVG (using a vector
    graphics editor like [Inkscape](https://inkscape.org/)) and put it in the appropriate
    folder. It should automatically work. If not, it’s a bug, please let me know!
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 每张面孔由多个 SVG 图形组装而成。你可以在“svg”文件夹内看到它们。如果你想添加另一个特征，只需创建一个 SVG 图形（使用像 [Inkscape](https://inkscape.org/)
    这样的矢量图形编辑器），并将其放入适当的文件夹中。它应该会自动生效。如果没有，请告诉我！这可能是一个 bug。
- en: When creating SVGs, assume the size of the canvas is 400x600\. For most features,
    it doesn’t matter where you draw on the canvas because it will automatically identify
    your object and position it in the appropriate place. But for head and hair SVGs,
    position does matter. For those you do need to make sure they are in the correct
    place on a 400x600 canvas, same as the existing head and hair SVGs. Otherwise
    it won’t know where to place the other facial features relative to the head and
    hair.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 SVG 图形时，假设画布大小为 400x600。对于大多数功能来说，在画布上绘制的位置并不重要，因为它会自动识别你的对象并将其放置在适当的位置。但对于头部和发型的
    SVG 图形，位置确实很重要。对于这些图形，确保它们与现有的头部和发型 SVG 图形在一个 400x600 的画布上的正确位置相同是必须的。否则它不知道如何放置其他面部特征相对于头部和发型的位置。
- en: If you find it not quite placing a facial feature exactly where you want, it’s
    because by default it finds the center of the eye/eyebrow/mouth/nose SVG and places
    that in a specific location. If that’s not good for a certain facial feature,
    that behavior can be overridden in code. For instance, see how it’s done in display.js
    for the “pinocchio” nose which uses the left side of the SVG rather than the center
    to place it.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现它没有将面部特征放置在你想要的确切位置，那是因为默认情况下它会找到眼睛/眉毛/嘴巴/鼻子 SVG 图形的中心并将其放置在特定位置。如果这对某个面部特征不合适，可以在代码中覆盖这种行为。例如，请查看
    display.js 中“皮诺曹”鼻子的实现，它使用 SVG 的左侧而不是中心来放置它。
- en: If you want a brand new “class” of facial features (like facial hair, or earrings,
    or hats) you’ll have to create a new subfolder within the “svg” folder and edit
    the code to recognize your new feature.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要一个全新的“类别”的面部特征（比如面部毛发、耳环或帽子），你需要在“svg”文件夹内创建一个新的子文件夹，并编辑代码以识别你的新特征。
- en: If you find any of this confusing, feel free to reach out to me for help! I
    would love for someone to help me make better looking faces :)
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得有些地方令人困惑，请随时联系我寻求帮助！我很希望有人能帮助我制作更好看的面孔 :)
- en: Credits
  id: totrans-split-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 鸣谢
- en: '[dumbmatter](https://github.com/dumbmatter) wrote most of the code, [TravisJB89](https://github.com/TravisJB89)
    made most of the graphics, [Lia Cui](https://liacui.carrd.co/) made most of the
    female graphics, [gurushida](https://github.com/gurushida) wrote the code to export
    faces as SVG strings, and [tomkennedy22](https://github.com/tomkennedy22) wrote
    most of the editor UI code.'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[dumbmatter](https://github.com/dumbmatter) 编写了大部分代码，[TravisJB89](https://github.com/TravisJB89)
    制作了大部分图形，[Lia Cui](https://liacui.carrd.co/) 制作了大部分女性图形，[gurushida](https://github.com/gurushida)
    编写了将面孔导出为 SVG 字符串的代码，[tomkennedy22](https://github.com/tomkennedy22) 编写了大部分编辑器
    UI 代码。'
