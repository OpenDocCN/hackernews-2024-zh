- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:32:17'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:32:17'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: How is a binary executable organized? Let's explore it!
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二进制可执行文件是如何组织的？让我们来探索一下吧！
- en: 来源：[https://jvns.ca/blog/2014/09/06/how-to-read-an-executable/](https://jvns.ca/blog/2014/09/06/how-to-read-an-executable/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://jvns.ca/blog/2014/09/06/how-to-read-an-executable/](https://jvns.ca/blog/2014/09/06/how-to-read-an-executable/)
- en: I used to think that executables were totally impenetrable. I’d compile a C
    program, and then that was it! I had a Magical Binary Executable that I could
    no longer read.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经以为可执行文件完全是不可渗透的。我编译了一个C程序，然后就是这样了！我有了一个神奇的二进制可执行文件，我再也看不懂它了。
- en: It is not so! Executable file formats are regular file formats that you can
    understand. I’ll explain some simple tools to start! We’ll be working on Linux,
    with ELF binaries. (binaries are kind of the definition of platform-specific,
    so this is all platform-specific.) We’ll be using C, but you could just as easily
    look at output from any compiled language.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 原来并非如此！可执行文件格式是常规的文件格式，你可以理解它们。我将解释一些简单的工具来开始吧！我们将在Linux上操作，使用ELF二进制文件格式。（二进制文件是平台特定的定义，所以这都是平台特定的。）我们将使用C语言，但你也可以轻松地查看任何编译语言的输出。
- en: 'Let’s write a simple C program, `hello.c`:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一个简单的C程序，`hello.c`：
- en: '[PRE0]'
  id: totrans-split-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then we compile it (`gcc -o hello hello.c`), and we have a binary called `hello`.
    This originally seems impenetrable (how do we even binary?!), but let’s see how
    we can investigate it! We’re going to learn what **symbols**, **sections**, and
    **segments** are. At a high level:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们编译它（`gcc -o hello hello.c`），得到一个名为`hello`的二进制文件。最初这似乎是不可渗透的（我们甚至如何二进制？！），但让我们看看如何进行调查！我们将学习**符号**、**段**和**节**是什么。在高层次上：
- en: '**symbols** are like function names, and are used to answer “If I call `printf`
    and it’s defined somewhere else, how do I find it?”'
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**符号**就像函数名一样，用来回答“如果我调用`printf`而它在其他地方定义，我该如何找到它？”'
- en: symbols are organized into **sections** – code lives in one section (`.text`),
    and data in another (`.data`, `.rodata`)
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: symbols are organized into **sections** – code lives in one section (`.text`),
    and data in another (`.data`, `.rodata`)
- en: sections are organized into **segments**
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sections are organized into **segments**
- en: Throughout we’ll use a tool called `readelf` to look at these.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: Throughout we’ll use a tool called `readelf` to look at these.
- en: So, let’s dive into our binary!
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们深入研究我们的二进制文件吧！
- en: 'Step 1: open it in a text editor!'
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤1：在文本编辑器中打开它！
- en: 'This is most naive possible way to view a binary. If run `cat hello`, I get
    something like this:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是查看二进制文件的最原始的方法。如果运行`cat hello`，我得到类似这样的内容：
- en: '[PRE1]H��k����H���5 H�[]�fff.�H�=p'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1]H��k����H���5 H�[]�fff.�H�=p'
- en: UH��t�H��]�H`��]Ð�UH����@�����]Ð�����������H�l$�L�d$�H�- L�%
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: UH��t�H��]�H`��]Ð�UH����@�����]Ð�����������H�l$�L�d$�H�- L�%
- en: L�l$�L�t$�L�|$�H�\$�H��8L)�A��I��H��I���s���H��t1@L��L��D��A��H��H9�u�H�\H�l$L�d$L�l$
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: L�l$�L�t$�L�|$�H�\$�H��8L)�A��I��H��I���s���H��t1@L��L��D��A��H��H9�u�H�\H�l$L�d$L�l$
- en: L�t$(L�|$0H��8��Ð�������������UH��SH�H�
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: L�t$(L�|$0H��8��Ð�������������UH��SH�H�
- en: H���t�(`DH���H�H���u�H�[]Ð�H��o���H��Penguin!;,����H
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: H���t�(`DH���H�H���u�H�[]Ð�H��o���H��Penguin!;,����H
- en: '[PRE2]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: $ readelf --symbols hello
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: $ readelf --symbols hello
- en: 'Num:    Value          Size Type    Bind   Vis      Ndx Name'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 'Num:    Value          Size Type    Bind   Vis      Ndx Name'
- en: '48: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND puts@@GLIBC_2.2.5'
  id: totrans-split-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '48: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND puts@@GLIBC_2.2.5'
- en: '59: 0000000000400410     0 FUNC    GLOBAL DEFAULT   13 _start'
  id: totrans-split-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '59: 0000000000400410     0 FUNC    GLOBAL DEFAULT   13 _start'
- en: '61: 00000000004004f4    16 FUNC    GLOBAL DEFAULT   13 main'
  id: totrans-split-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '61: 00000000004004f4    16 FUNC    GLOBAL DEFAULT   13 main'
- en: '[PRE3]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: $ objdump -s hello
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: $ objdump -s hello
- en: 'Contents of section .text:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 'Contents of section .text:'
- en: 400410 31ed4989 d15e4889 e24883e4 f0505449  1.I..^H..H...PTI
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 400410 31ed4989 d15e4889 e24883e4 f0505449  1.I..^H..H...PTI
- en: 400420 c7c0a005 400048c7 c1100540 0048c7c7  ....@.H....@.H..
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 400420 c7c0a005 400048c7 c1100540 0048c7c7  ....@.H....@.H..
- en: 400430 f4044000 e8c7ffff fff49090 4883ec08  ..@.........H...
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 400430 f4044000 e8c7ffff fff49090 4883ec08  ..@.........H...
- en: 'Contents of section .interp:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 'Contents of section .interp:'
- en: 400238 2f6c6962 36342f6c 642d6c69 6e75782d  /lib64/ld-linux-
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 400238 2f6c6962 36342f6c 642d6c69 6e75782d  /lib64/ld-linux-
- en: 400248 7838362d 36342e73 6f2e3200           x86-64.so.2\.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 400248 7838362d 36342e73 6f2e3200           x86-64.so.2\.
- en: 'Contents of section .rodata:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 'Contents of section .rodata:'
- en: 4005f8 01000200 50656e67 75696e21 00        ....Penguin!.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 4005f8 01000200 50656e67 75696e21 00        ....企鹅！.
- en: '[PRE4]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: $ readelf --sections hello
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: $ readelf --sections hello
- en: 'Section Headers:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 'Section Headers:'
- en: '[Nr] Name              Type             Address           Offset'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[Nr] Name              Type             Address           Offset'
- en: Size              EntSize          Flags  Link  Info  Align
  id: totrans-split-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Size              EntSize          Flags  Link  Info  Align
- en: '[13] .text             PROGBITS         0000000000400410  00000410'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[13] .text             PROGBITS         0000000000400410  00000410'
- en: 00000000000001d8  0000000000000000  AX       0     0     16
  id: totrans-split-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 00000000000001d8  0000000000000000  AX       0     0     16
- en: '[15] .rodata           PROGBITS         00000000004005f8  000005f8'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[15] .rodata           PROGBITS         00000000004005f8  000005f8'
- en: 000000000000000b  0000000000000000   A       0     0     4
  id: totrans-split-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 000000000000000b  0000000000000000   A       0     0     4
- en: '[24] .data             PROGBITS         0000000000601010  00001010'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[24] .data             PROGBITS         0000000000601010  00001010'
- en: 0000000000000010  0000000000000000  WA       0     0     8
  id: totrans-split-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 0000000000000010  0000000000000000  WA       0     0     8
- en: '[25] .bss              NOBITS           0000000000601020  00001020'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[25] .bss              NOBITS           0000000000601020  00001020'
- en: 0000000000000010  0000000000000000  WA       0     0     8
  id: totrans-split-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 0000000000000010  0000000000000000  WA       0     0     8
- en: '[26] .comment          PROGBITS         0000000000000000  00001020'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[26] .comment          PROGBITS         0000000000000000  00001020'
- en: 000000000000002a  0000000000000001  MS       0     0     1
  id: totrans-split-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 000000000000002a  0000000000000001  MS       0     0     1
- en: 'Key to Flags:'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: '标志键:'
- en: W (write), A (alloc), X (execute), M (merge), S (strings), l (large)
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: W (write), A (alloc), X (execute), M (merge), S (strings), l (large)
- en: I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: I (信息), L (链接顺序), G (组), T (TLS), E (排除), x (未知)
- en: O (extra OS processing required) o (OS specific), p (processor specific)
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: O (extra OS processing required) o (OS specific), p (processor specific)
- en: '[PRE5]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Contents of section .text:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: '.text 段内容:'
- en: 400410 31ed4989 d15e4889 e24883e4 f0505449  1.I..^H..H...PTI
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 400410 31ed4989 d15e4889 e24883e4 f0505449  1.I..^H..H...PTI
- en: 400420 c7c0a005 400048c7 c1100540 0048c7c7  ....@.H....@.H..
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 400420 c7c0a005 400048c7 c1100540 0048c7c7  ....@.H....@.H..
- en: 400430 f4044000 e8c7ffff fff49090 4883ec08  ..@.........H...
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 400430 f4044000 e8c7ffff fff49090 4883ec08  ..@.........H...
- en: '[PRE6]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: $ objdump -d ./hello
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: $ objdump -d ./hello
- en: 'Disassembly of section .text:'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: '.text 段反汇编:'
- en: '0000000000400410 <_start>:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: '0000000000400410 <_start>:'
- en: '400410:       31 ed                   xor    %ebp,%ebp'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: '400410:       31 ed                   xor    %ebp,%ebp'
- en: '400412:       49 89 d1                mov    %rdx,%r9'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: '400412:       49 89 d1                mov    %rdx,%r9'
- en: '400415:       5e                      pop    %rsi'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: '400415:       5e                      pop    %rsi'
- en: '400416:       48 89 e2                mov    %rsp,%rdx'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: '400416:       48 89 e2                mov    %rsp,%rdx'
- en: '400419:       48 83 e4 f0             and    $0xfffffffffffffff0,%rsp'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: '400419:       48 83 e4 f0             and    $0xfffffffffffffff0,%rsp'
- en: '[PRE7]'
  id: totrans-split-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Program Headers:'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: '程序头:'
- en: '[... removed ...]'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[... removed ...]'
- en: INTERP         0x0000000000000238 0x0000000000400238 0x0000000000400238
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: INTERP         0x0000000000000238 0x0000000000400238 0x0000000000400238
- en: 0x000000000000001c 0x000000000000001c  R      1
  id: totrans-split-77
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 0x000000000000001c 0x000000000000001c  R      1
- en: '[Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]'
  id: totrans-split-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[请求程序解释器：/lib64/ld-linux-x86-64.so.2]'
- en: LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000
- en: 0x00000000000006d4 0x00000000000006d4  R E    200000
  id: totrans-split-80
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 0x00000000000006d4 0x00000000000006d4  R E    200000
- en: LOAD           0x0000000000000e28 0x0000000000600e28 0x0000000000600e28
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: LOAD           0x0000000000000e28 0x0000000000600e28 0x0000000000600e28
- en: 0x00000000000001f8 0x0000000000000208  RW     200000
  id: totrans-split-82
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 0x00000000000001f8 0x0000000000000208  RW     200000
- en: '[... removed ...]'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[... removed ...]'
- en: 'Section to Segment mapping:'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: '节到段映射:'
- en: Segment Sections...
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 分段节...
- en: '00'
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: '00'
- en: 01     .interp
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 01     .interp
- en: 02 .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 02 .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym
- en: .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt
  id: totrans-split-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt
- en: .text .fini .rodata .eh_frame_hdr .eh_frame
  id: totrans-split-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: .text .fini .rodata .eh_frame_hdr .eh_frame
- en: 03     .ctors .dtors .jcr .dynamic .got .got.plt .data .bss
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 03     .ctors .dtors .jcr .dynamic .got .got.plt .data .bss
- en: 04     .dynamic
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 04     .dynamic
- en: 05     .note.ABI-tag .note.gnu.build-id
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 05     .note.ABI-tag .note.gnu.build-id
- en: 06     .eh_frame_hdr
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 06     .eh_frame_hdr
- en: '07'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: '07'
- en: 08     .ctors .dtors .jcr .dynamic .got
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 08     .ctors .dtors .jcr .dynamic .got
- en: '```'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Segments are used to determine how to separate different parts of the program
    into memory. The first `LOAD` segment is marked R E (read / execute) and the second
    is `RW` (read/write). `.text` is in the first segment (we want to read it but
    never write to it), and `.data`, `.bss` are in the second (we need to write to
    them, but not execute them).
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 段用于确定如何将程序的不同部分分配到内存中。第一个 `LOAD` 段标记为 R E（读取/执行），第二个为 `RW`（读取/写入）。`.text` 在第一个段中（我们要读取它但从不写入），`.data`、`.bss`
    在第二个段中（我们需要写入它们，但不执行它们）。
- en: Not magic!
  id: totrans-split-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不是魔法！
- en: Executables aren’t magic. ELF is a file format like any other! You can use `readelf`,
    `nm`, and `objdump` to inspect your Linux binaries. Try it out! Have fun.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 可执行文件并非魔法。ELF 是一种像其他文件格式一样的文件格式！您可以使用 `readelf`、`nm` 和 `objdump` 来检查您的 Linux
    二进制文件。试试看！玩得开心。
- en: 'Other resources:'
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: '其他资源:'
- en: Thanks very much to the amazing [Allison Kaptur](http://akaptur.github.io) and
    [Dan Luu](http://danluu.com) for reading a draft of this.
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢了不可思议的 [Allison Kaptur](http://akaptur.github.io) 和 [Dan Luu](http://danluu.com)
    在阅读草稿时提供的帮助。
