- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:43:34'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:43:34'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Swift.org - Iterate Over Parameter Packs in Swift 6.0
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swift.org - 在 Swift 6.0 中迭代参数包
- en: 来源：[https://www.swift.org/blog/pack-iteration/](https://www.swift.org/blog/pack-iteration/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.swift.org/blog/pack-iteration/](https://www.swift.org/blog/pack-iteration/)
- en: Iterate Over Parameter Packs in Swift 6.0
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Swift 6.0 中迭代参数包
- en: March 7, 2024
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年3月7日
- en: Parameter packs, introduced in Swift 5.9, make it possible to write generics
    that abstract over the number of arguments. This eliminates the need to have overloaded
    copies of the same generic function for one argument, two arguments, three arguments,
    and so on. With Swift 6.0, pack iteration makes it easier than ever to work with
    parameter packs. This post will show you how to make the best use of pack iteration.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 参数包，引入于 Swift 5.9，使得能够编写抽象化处理参数数量的泛型成为可能。这消除了需要为一个参数、两个参数、三个参数等的相同泛型函数进行重载的需求。通过
    Swift 6.0，参数包迭代使得与参数包一起工作变得比以往任何时候都更加容易。本文将展示如何充分利用参数包迭代。
- en: 'First, let’s review parameter packs. Consider the following code:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们回顾一下参数包。考虑以下代码：
- en: '[PRE0]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above code simply compares two tuples. However, this code wouldn’t work
    if the tuples contained 7 elements!
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码仅仅是比较两个元组。但是，如果元组包含7个元素，此代码将不起作用！
- en: 'The Swift standard library provided comparison operators for tuples up to only
    6 elements for a long time:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 标准库长期以来仅为最多包含6个元素的元组提供了比较运算符：
- en: '[PRE1]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In each of the generic functions above, every element of the input tuple has
    to have its type declared in the generic parameter list of the function. Thus,
    we need to add a new element to the generic parameter list any time we want to
    support a larger tuple size. Because of this, the artificial limit of 6-element
    tuples was imposed.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述通用函数的每个输入元组的每个元素中，都必须在函数的通用参数列表中声明其类型。因此，每当我们希望支持更大的元组大小时，都需要向通用参数列表中添加一个新元素。由于这个原因，6元素元组的人为限制就被强加了上去。
- en: 'Parameter packs added the ability to abstract a function over a variable number
    of type parameters. This means that we can lift the 6-element limit using an `==`
    operator written like this:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 参数包增加了通过变量数量的类型参数来抽象化函数的能力。这意味着我们可以使用类似这样的`==`操作符来解除6个元素的限制：
- en: '[PRE2]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s break down the types we see in the above signature:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下上面签名中看到的类型：
- en: Note `each Element` in the list of generic parameters. The `each` keyword indicates
    that `Element` is a *type parameter pack*, meaning that it can accept any number
    of generic arguments. Just like with non-pack (*scalar*) generic parameters, we
    can declare a conformance requirement on the type parameter pack. In this case,
    we require each `Element` type to conform to the `Equatable` protocol.
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意列表中的每个`Element`。`each`关键字表示`Element`是一个*类型参数包*，这意味着它可以接受任意数量的通用参数。就像非包（*scalar*）通用参数一样，我们可以在类型参数包上声明符合要求。在这种情况下，我们要求每个`Element`类型符合`Equatable`协议。
- en: This function takes in two tuples, `lhs` and `rhs`, as arguments. In both cases,
    the tuple’s element type is `repeat each Element`. This is called the *pack expansion
    type*, which consists of a `repeat` keyword followed by a *repetition pattern*,
    which has to contain a pack reference. In our case, the repetition pattern is
    `each Element`.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此函数接收两个元组 `lhs` 和 `rhs` 作为参数。在这两种情况下，元组的元素类型都是 `repeat each Element`。这称为*包扩展类型*，它由`repeat`关键字后跟一个*重复模式*组成，该重复模式必须包含一个包引用。在我们的情况下，重复模式是
    `each Element`。
- en: At the call site, the user provides *value parameter packs* for each tuple that
    will be substituted into their corresponding type parameter packs. At runtime,
    the repetition pattern will be repeated for each element in the substituted pack.
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在调用位置，用户为每个将替换到相应类型参数包的元组提供了*值参数包*。在运行时，重复模式将对替换包中的每个元素重复进行。
- en: With the tuple equality operator implemented using parameter packs, let’s look
    at the call site again to understand these concepts better.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用参数包实现的元组相等操作符，让我们再次查看调用位置以更好地理解这些概念。
- en: '[PRE3]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The call to `==` substitutes the type pack `{Int, Bool, String}` for the `Element`
    type pack. Note that both `lhs` and `rhs` have the same type. Finally, the function
    `==` is called with value packs `{1, true, "hello"}` for the value pack of the
    `lhs` tuple and `{1, false, "hello"}` for the value pack of the `rhs` tuple.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对`==`的调用用类型包`{Int, Bool, String}`替换了类型包`Element`。注意`lhs`和`rhs`都具有相同的类型。最后，函数`==`用值包`{1,
    true, "hello"}`替换了`lhs`元组的值包，用值包`{1, false, "hello"}`替换了`rhs`元组的值包。
- en: The example with the new signature of the tuple comparison operator looks great,
    but how do we actually use the values of the `lhs` and `rhs` tuples inside the
    body of the function? Feel free to take a moment to think about this.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 具有新元组比较运算符签名的示例看起来很棒，但实际上我们如何在函数体内使用`lhs`和`rhs`元组的值？请随时花点时间考虑这个问题。
- en: 'It turns out that there is just no concise way of implementing the function
    prior to Swift 6.0. One solution involves creating a local function that compares
    a pair of elements from the two tuples, and then using pack expansion to call
    that function for every pair of elements, like this:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，在Swift 6.0之前，实现此功能没有简洁的方法。一种解决方案涉及创建一个本地函数，用于比较来自两个元组的一对元素，然后使用包展开为每一对元素调用该函数，如下所示：
- en: '[PRE4]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The above code doesn’t look great, right? To simply check a condition for each
    pair of elements, we need to declare a local function `isEqual`, that just compares
    the given elements. However, this is not enough to make the function return early
    since the local `isEqual` function will still be called on every pair of elements
    in the parameter packs `lhs` and `rhs` when expanding them. Because of this, `isEqual`
    has to be marked `throws` and throw an error once a pair of mismatched elements
    is found. Then, we catch the error in a `catch` block to return `false`.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码看起来不太好，对吧？为了简单地检查每对元素的条件，我们需要声明一个名为`isEqual`的局部函数，只是比较给定的元素。然而，这并不足以使函数提前返回，因为在扩展它们时，本地的`isEqual`函数仍将被调用于参数包`lhs`和`rhs`中的每一对元素。因此，`isEqual`必须标记为`throws`，并在找到不匹配的元素对时抛出错误。然后，我们在`catch`块中捕获错误以返回`false`。
- en: Swift 6.0 greatly simplifies this task with the introduction of pack iteration
    using the familiar `for`-`in` loop syntax.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 6.0通过引入熟悉的`for`-`in`循环语法大大简化了此任务中的包迭代。
- en: 'More specifically, with pack iteration, the body of the `==` tuple comparison
    operator simplifies down to a simple `for`-`in repeat` loop:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，通过包迭代，`==`元组比较运算符的主体简化为一个简单的`for`-`in repeat`循环：
- en: '[PRE5]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the above code, we are able to utilize the `for`-`in` loop capability to
    iterate over the tuples pairwise.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们能够利用`for`-`in`循环功能来成对迭代元组。
- en: Note that when iterating over packs, we use the new `for`-`in repeat` syntax,
    followed by a value parameter pack that we are iterating over. At every iteration,
    the loop binds each element of the value parameter pack to a local variable. This
    means that in this case, the i^(th) element of `lhs` will be bound to a local
    variable `left` on the i^(th) iteration. In the body of the loop, you can use
    the local variable as you normally would. In our case, we compare each pair of
    elements and return `false` once we find a pair where `left != right`, using a
    familiar `guard` statement. And, of course, we no longer need to throw any errors
    as we had to before!
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在迭代包时，我们使用新的`for`-`in repeat`语法，后跟要迭代的值参数包。在每次迭代时，循环将值参数包的每个元素绑定到一个局部变量。这意味着在这种情况下，`lhs`的第i个元素将在第i次迭代时绑定到局部变量`left`上。在循环体中，您可以像平常一样使用局部变量。在我们的情况下，我们比较每一对元素，并在找到`left
    != right`的一对时返回`false`，使用熟悉的`guard`语句。当然，我们不再需要像以前那样抛出任何错误了！
- en: Let’s now explore more ways you can utilize pack iteration in your Swift code
    with some examples.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过一些示例更深入地探讨如何在Swift代码中利用包迭代。
- en: 'First, consider a situation where you need to write a function to check that
    all arrays in a given value parameter pack are empty:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先考虑一种情况，您需要编写一个函数来检查给定值参数包中所有数组是否为空：
- en: '[PRE6]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The above function is generic over a type parameter pack `each T` and takes
    in a value parameter pack `array`, the type of which is declared using `repeat
    [each T]` pack expansion, where `[each T]` is the repetition pattern. At the call
    site, it is repeated for each element in the substituted pack, resulting in values
    expanding into a list of array literals.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数是针对类型参数包`each T`泛型化的，并接受一个名为`array`的值参数包，其类型使用`repeat [each T]`包展开声明，其中`[each
    T]`是重复模式。在调用点，它为替换的每个元素重复，导致值扩展为数组字面量列表。
- en: On each iteration of the `for`-`in repeat` loop, an element of the value parameter
    pack `array` is bound to a local variable `a`. Note that with pack iteration,
    elements of the value pack are evaluated on demand, meaning that we are able to
    return out of the function early without examining all arrays of the value pack.
    In this case, we utilize the `guard` statement.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次`for`-`in repeat`循环迭代中，将`array`值参数包的一个元素绑定到本地变量`a`。请注意，使用包迭代时，值包的元素按需评估，这意味着我们可以在不检查值包的所有数组的情况下提前从函数返回。在这种情况下，我们利用了`guard`语句。
- en: 'Here is how you might use the `allEmpty` function:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是您可能如何使用`allEmpty`函数的方法：
- en: '[PRE7]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let’s see an example of advanced usage of parameter packs that is greatly
    simplified by pack iteration. First, let’s declare the following protocol:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一个通过包迭代大大简化的参数包的高级使用示例。首先，让我们声明以下协议：
- en: '[PRE8]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The above protocol `ValueProducer` requires the `evaluate()` method that’s return
    type is the associated type `Value` that conforms to `Codable` protocol.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述协议`ValueProducer`要求`evaluate()`方法，其返回类型是关联类型`Value`，该类型符合`Codable`协议。
- en: Suppose you get a parameter pack of values of type `Result<ValueProducer, Error>`,
    and you need to iterate only over the `success` elements and call the `evaluate()`
    method on its value. Also, suppose you need to save the result of each call into
    an array. Pack iteration makes this task super easy!
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您获得了一个类型为`Result<ValueProducer, Error>`的值参数包，并且您只需迭代`success`元素并调用其值的`evaluate()`方法。此外，假设您需要将每次调用的结果保存到一个数组中。包迭代使得这个任务变得非常简单！
- en: '[PRE9]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s first note the signature of the `evaluateAll` function. In the generic
    parameter list, it declares two type parameter packs: `each V: ValueProducer`,
    and `each E: Error`. Every element of the pack `each V` has to conform to the
    protocol `ValueProducer` declared above, and every element of the pack `each E`
    has to conform to the `Error` protocol. The function takes in a single argument
    `result` with a pack expansion type `repeat Result<each V, each E>`. This means
    that the pattern `Result<each V, each E>` will be repeated for every element of
    packs `each V` and `each E` at runtime.'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们首先注意`evaluateAll`函数的签名。在泛型参数列表中，它声明了两个类型参数包：`each V: ValueProducer`和`each
    E: Error`。包`each V`的每个元素必须符合上面声明的`ValueProducer`协议，而包`each E`的每个元素必须符合`Error`协议。函数接受一个名为`result`的参数，其类型是`repeat
    Result<each V, each E>`的扩展类型。这意味着`Result<each V, each E>`模式将在运行时为`each V`和`each
    E`的每个元素重复。'
- en: To implement the body of the function, we first initialize the `evaluated` array.
    Next, note how we can use the `for case` pattern to execute the loop’s body only
    for the `success` case of the `Result` enum. We can grab the `valueProducer` variable,
    which will contain a value of the `ValueProducer` type. We can now append the
    result of the call to the `evaluate()` method to our `evaluated` array, which
    we finally return.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现函数体，我们首先初始化了`evaluated`数组。接下来，请注意我们如何使用`for case`模式仅对`Result`枚举的`success`情况执行循环体。我们可以获取`valueProducer`变量，它将包含`ValueProducer`类型的值。现在，我们可以将调用`evaluate()`方法的结果追加到我们的`evaluated`数组中，最后返回它。
- en: 'Here’s how you might use this function:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是您可能使用此函数的方式：
- en: '[PRE10]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We are excited to bring pack iteration to Swift 6.0! As seen in this article,
    pack iteration makes interacting with value parameter packs significantly more
    straightforward, making such an advanced feature more accessible and intuitive
    to incorporate into your Swift code.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很高兴将包迭代引入Swift 6.0！正如本文所示，包迭代使得与值参数包交互变得显著简单，使得这样一个高级特性更易于融入您的Swift代码。
