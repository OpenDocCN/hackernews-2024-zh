- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:31:48'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:31:48'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Archiving Steam games for fun and profit // Loren's blog
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为了娱乐和利润存档Steam游戏 // Loren的博客
- en: 来源：[https://lorendb.dev/posts/archiving-steam-games-for-fun-and-profit/](https://lorendb.dev/posts/archiving-steam-games-for-fun-and-profit/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://lorendb.dev/posts/archiving-steam-games-for-fun-and-profit/](https://lorendb.dev/posts/archiving-steam-games-for-fun-and-profit/)
- en: 'tldr: if you want to create an archive of all your Steam games, check out [download-steam-games](https://github.com/LorenDB/download-steam-games)
    on my GitHub. It has minimal documentation, but you should be able to get it running
    without too much trouble.'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 简而言之：如果你想创建所有Steam游戏的存档，请查看我在GitHub上的[download-steam-games](https://github.com/LorenDB/download-steam-games)。它有很少的文档，但你应该能够轻松运行它。
- en: I recently decided it would be cool to download some beta versions of [KSP2](https://www.kerbalspaceprogram.com/games-kerbal-space-program-2)
    so I can revisit them in a year or so and laugh about how many terrible bugs there
    were in the original version of the game. I decided that it would make sense to
    download the game backup directly to my server, so I `ssh`ed into the server,
    installed Steam from the system repositories, and started a new `ssh -X` session.
    However, when I launched Steam, I realized that my server’s connection to the
    internet is much too slow to run `ssh -X` in any sort of usable state. In fact,
    it was so slow that it apparently timed something out on Steam’s end and made
    it practically impossible to log in to Steam.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近决定下载[KSP2](https://www.kerbalspaceprogram.com/games-kerbal-space-program-2)的一些测试版本，这样一年后我可以回顾它们，并笑一笑最初版本中存在多少可怕的bug。我决定直接将游戏备份下载到我的服务器，所以我通过`ssh`登录了服务器，从系统仓库安装了Steam，并启动了一个新的`ssh
    -X`会话。然而，当我启动Steam时，我意识到我的服务器连接互联网速度太慢了，以至于无法在任何可用状态下运行`ssh -X`。事实上，它太慢了，以至于似乎在Steam端超时了，并且几乎不可能登录Steam。
- en: Undaunted, I started looking into [SteamCMD](https://developer.valvesoftware.com/wiki/SteamCMD).
    It turns out that while SteamCMD is intended for game server administrators, it
    will happily download any Steam game. It didn’t take me long to install it and
    use it to download a game. However, it’s a bit of a pain running through a set
    of instructions in SteamCMD again and again for downloading multiple games, so
    I set out to script it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 不屈不挠，我开始研究[SteamCMD](https://developer.valvesoftware.com/wiki/SteamCMD)。结果发现，虽然SteamCMD是为游戏服务器管理员设计的，但它愿意下载任何Steam游戏。我很快就安装并使用它下载了一款游戏。但是，为了下载多个游戏，反复在SteamCMD中执行一组指令有点麻烦，所以我决定写脚本来完成这项工作。
- en: But why would you do this?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 但是你为什么要这么做呢？
- en: Why wouldn’t I do this? If you think I’m crazy, just go read [r/DataHoarder](https://www.reddit.com/r/DataHoarder/)
    for a while.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我要这么做？如果你认为我疯了，去[r/DataHoarder](https://www.reddit.com/r/DataHoarder/)看看。
- en: Seriously, while I don’t expect Steam to disappear tomorrow, there is precedent
    for games to be removed from the platform; many of the original games on the platform
    have been removed. The oldest game still available (counting by which date it
    was made available on Steam) is the original [Counterstrike](https://store.steampowered.com/app/10)
    with a game ID of 10\. Games 1 through 9 aren’t on the platform anymore, and I’m
    sure they are far from the only games deleted from the platform. Archiving games
    allows me to avoid losing games that are removed from Steam. Also, sometimes enthusiasts
    like to be able to access old versions of games; one of the top posts of all time
    on r/DataHoarder is about [somebody who hoarded an old Minecraft alpha](https://www.reddit.com/r/DataHoarder/comments/o9cnj3/one_womans_quest_to_never_delete_anything_allowed/),
    giving Minecraft enthusiasts a chance at taking a more complete look at the evolution
    of the game.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 说真的，虽然我不指望Steam明天就会消失，但游戏被从平台上移除是有先例的；许多最早的游戏已经被移除。按照它们在Steam上可用日期排列，最早的游戏是原版[Counterstrike](https://store.steampowered.com/app/10)，游戏ID为10。游戏1至9已不再在平台上，而且我确信它们远不是唯一被删除的游戏。存档游戏可以让我避免丢失从Steam上移除的游戏。此外，有时候爱好者希望能够访问游戏的旧版本；r/DataHoarder上有史以来最受欢迎的帖子之一是关于[某人曾收藏一个旧版Minecraft
    Alpha](https://www.reddit.com/r/DataHoarder/comments/o9cnj3/one_womans_quest_to_never_delete_anything_allowed/)，让Minecraft的爱好者有机会更全面地了解游戏的演变过程。
- en: 'Update (2/23/2024): it turns out that I am wrong on this point. Games may be
    delisted from Steam, but they are not deleted. If you own the game, you can still
    download it. Also, since Steam numbers games by tens, the original Counterstrike
    *is* the first listed game on Steam. Apologies for this!'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 更新（2024年2月23日）：事实证明我在这一点上是错误的。游戏可能会从 Steam 中下架，但它们并没有被删除。如果你拥有这款游戏，你仍然可以下载它。而且，由于
    Steam 通过十位数来编号游戏，原始的反恐精英 *是* Steam 上列出的第一款游戏。对此表示歉意！
- en: A naïve bash script
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个天真的 bash 脚本
- en: 'My first approach was to create a bash script to wrap SteamCMD with a nice
    syntax. Of course, I also wanted to bypass the interactive prompt. Let’s go through
    what I ended up building:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我的第一种方法是创建一个 bash 脚本，用一个漂亮的语法包装 SteamCMD。当然，我也想要绕过交互式提示。让我们看看最终我建立了什么：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These variables control some basic stuff. `STEAM_ACCOUNT` is the account you
    logged into SteamCMD with; while SteamCMD caches credentials, you still have to
    issue the `login <username>` command every time you start it, so the script has
    to know what username to use. `GAME_NAME` doesn’t have to be the actual game name;
    it’s just used to generate the filename for the final game archive. `GAME_STEAM_ID`
    is the numerical ID of the game you want to download; for example, KSP2 is [`954850`](https://store.steampowered.com/app/954850/Kerbal_Space_Program_2/).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变量控制一些基本的东西。`STEAM_ACCOUNT` 是你在 SteamCMD 中登录的帐户；虽然 SteamCMD 缓存凭据，但你仍然必须在每次启动它时发出
    `login <username>` 命令，所以脚本必须知道要使用哪个用户名。`GAME_NAME` 不一定是实际的游戏名称；它只是用于生成最终游戏存档的文件名。`GAME_STEAM_ID`
    是你想要下载的游戏的数字 ID；例如，KSP2 是 [`954850`](https://store.steampowered.com/app/954850/Kerbal_Space_Program_2/)。
- en: '`GAME_FORCE_WINDOWS` deserves a more detailed explanation. While I run Linux,
    some games do not have Linux builds available. For those games, I would like to
    save a backup of the Windows build instead. This will let me run the game via
    Proton later. Conveniently, SteamCMD allows you to override what platform you
    download the game for by setting `@sSteamCmdForcePlatformType <platform>`. `GAME_FORCE_WINDOWS`
    is used later as part of the SteamCMD script contents; therefore, if I want to
    add a Windows override, I can set `GAME_FORCE_WINDOWS` to `@sSteamCmdForcePlatformType
    windows`.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`GAME_FORCE_WINDOWS` 值得更详细地解释一下。虽然我使用 Linux，但有些游戏没有 Linux 构建可用。对于这些游戏，我想保存
    Windows 构建的备份。这将让我稍后通过 Proton 运行游戏。方便的是，SteamCMD 允许你通过设置 `@sSteamCmdForcePlatformType
    <platform>` 来覆盖你下载游戏的平台。`GAME_FORCE_WINDOWS` 后来被用作 SteamCMD 脚本内容的一部分；因此，如果我想添加一个
    Windows 覆盖，我可以将 `GAME_FORCE_WINDOWS` 设置为 `@sSteamCmdForcePlatformType windows`。'
- en: Finally, we have `GAME_BETA`. [SteamDB](https://steamdb.info) shows beta version
    identifiers for games; you can use those to download earlier versions of some
    games. This is something I want to use, given that the original purpose of this
    project was to archive early KSP2 builds.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有 `GAME_BETA`。[SteamDB](https://steamdb.info) 显示游戏的测试版标识符；你可以使用这些来下载一些游戏的早期版本。考虑到这个项目的最初目的是存档早期的
    KSP2 构建，这是我想要使用的东西。
- en: 'The next bit of the script is simply logic to set each of these variables based
    on command line parameters. I’ve decided to skip it for brevity, as it is trivial
    bash logic. Moving on, we get this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的下一部分仅仅是基于命令行参数设置每个变量的逻辑。出于简洁起见，我决定跳过它，因为这是微不足道的 bash 逻辑。继续往下，我们得到这个：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: SteamCMD can be controlled by scripts. This is how we’re going to get around
    its interactive interface.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: SteamCMD 可以通过脚本进行控制。这就是我们要绕过其交互式界面的方式。
- en: The first line of the script is the aforementioned platform override. After
    that, we use `force_install_dir` to force SteamCMD to download the game to a known
    location. In this version of the script, I’ve hardcoded it to `~/Steam/downloads`,
    since I’ve installed SteamCMD to `~/Steam`. Then we log in and issue the actual
    command to grab the app; once the app has downloaded, we quit SteamCMD.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的第一行是前述的平台覆盖。之后，我们使用 `force_install_dir` 强制 SteamCMD 将游戏下载到已知位置。在这个脚本的版本中，我已经将其硬编码为
    `~/Steam/downloads`，因为我已经将 SteamCMD 安装到了 `~/Steam`。然后我们登录并发出实际命令来获取应用程序；一旦应用程序下载完成，我们就退出
    SteamCMD。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here we actually execute the script and then delete it to prevent clutter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们实际上执行脚本，然后删除它以防止混乱。
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The final step is to compress the game folder into a single `.tar.gz` file.
    Again, we’re dumping the final archive into `~/Steam/downloads` for now. The only
    really unusual part of this is that I’m telling `tar` to use `pigz` to do the
    gzip compression. This is because `pigz` will use all CPU cores, which is important
    when you’re archiving many gigabytes of game data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将游戏文件夹压缩成一个单独的`.tar.gz`文件。同样，我们现在将最终归档文件倾倒到`~/Steam/downloads`中。这其中唯一真正不寻常的部分是，我告诉`tar`使用`pigz`来进行gzip压缩。这是因为当你归档许多吉字节的游戏数据时，`pigz`会使用所有CPU核心，这一点非常重要。
- en: This is all fine and good, but you still have to manually run the command for
    each game. To mitigate this, I created a [simple script](https://paste.segfault.foo/loren/ac1cfff462804e70bdf85fb764328b19)
    that read a vaguely CSV-like file which listed games to download. That was definitely
    better than nothing, but it still felt pretty hacky.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都很好，但你仍然需要手动运行每个游戏的命令。为了减轻这一点，我创建了一个[简单的脚本](https://paste.segfault.foo/loren/ac1cfff462804e70bdf85fb764328b19)，它读取一个模糊类似CSV的文件，列出了要下载的游戏。那绝对比什么都不做要好，但仍然感觉很粗糙。
- en: Building it the right way
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正确构建它的方式
- en: I decided to port my two scripts into one app. I chose to write the app in [D](https://dlang.org);
    in retrospect, Python would probably have been a good choice simply because it
    comes preinstalled on pretty much every distro, but I much prefer D for pretty
    much anything. My ported script is pretty similar to the functionality shown above;
    however, I added various improvements. Paths are no longer hardcoded, it’s possible
    to download games for any and all platforms (Windows, macOS, and Linux), and game
    data is stored as a JSON file instead of in a weird custom-ish format.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定将我的两个脚本移植成一个应用程序。我选择用[D](https://dlang.org)编写这个应用程序；回顾起来，Python可能是一个很好的选择，因为它几乎预装在每个发行版上，但我更喜欢用D来做几乎所有的事情。我的移植脚本与上面显示的功能相似；然而，我添加了各种改进。路径不再是硬编码的，可以为任何平台（Windows、macOS和Linux）下载游戏，并且游戏数据存储为JSON文件，而不是奇怪的自定义格式。
- en: The app, which I’m calling `download-steam-games` (how original), is available
    [on GitHub](https://github.com/LorenDB/download-steam-games). Building it is a
    simple matter of running `dub build`. After that, you need to run `dub run --
    --add-game` to add a game to the download list. After you’ve added some games,
    you can use `dub run` to run the application in download mode. It will download
    all your games for every platform you’ve specified, `.tar.gz` them, and put them
    in the output folder of your choosing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我称之为`download-steam-games`（多么原创）的应用程序现在可以在[GitHub](https://github.com/LorenDB/download-steam-games)上获得。构建它只需运行`dub
    build`。之后，你需要运行`dub run -- --add-game`来将游戏添加到下载列表中。添加了一些游戏后，你可以使用`dub run`以下载模式运行应用程序。它将为您指定的每个平台下载所有游戏，将它们`.tar.gz`，并将它们放在您选择的输出文件夹中。
- en: Limitations
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制
- en: 'The app currently is somewhat limited: there’s no functionality to reconfigure
    the settings, you can’t specify beta versions with `--add-game`, and there’s no
    progress reporting during download. However, I think it’s robust enough to actually
    use in production. I hope to address all of these issues soon, and while I’m at
    it, I’d like to add a feature to add a timestamp to the archive name so you can
    download many versions of the same game over time.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序目前有些限制：没有重新配置设置的功能，不能用`--add-game`指定beta版本，并且下载过程中没有进度报告。但是，我认为它已经足够健壮，可以在生产中实际使用。我希望尽快解决所有这些问题，并且在此期间，我想添加一个功能，可以为归档名称添加时间戳，这样你就可以随着时间下载许多版本的相同游戏。
- en: Conclusion
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: This is a fun project that is helping get me hooked on data hoarding. If you
    start using my app to help hoard your own games, please leave a comment below!
    I’d love seeing how many gigabytes (or terabytes) of games you’re hoarding.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有趣的项目，正在帮助我上瘾于数据囤积。如果你开始使用我的应用程序来帮助你自己囤积游戏，请在下面留下评论！我很想看到你囤积了多少吉字节（或者是几TB）的游戏。
- en: Updates
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新
- en: Shortly after writing this post, I’ve added some logging to the app. It ain’t
    pefect, but it ain’t terrible either.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 写完这篇文章后不久，我给应用程序添加了一些日志记录。它不完美，但也不算糟糕。
- en: Comments
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论
- en: powered by [Cactus Comments](https://cactus.chat)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Cactus Comments](https://cactus.chat)提供支持
