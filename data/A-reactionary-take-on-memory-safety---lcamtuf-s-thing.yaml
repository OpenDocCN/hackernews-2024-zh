- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:31:18'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:31:18
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: A reactionary take on memory safety - lcamtuf’s thing
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对内存安全的一种反应 - lcamtuf的看法
- en: 来源：[https://lcamtuf.substack.com/p/a-reactionary-take-on-memory-safety](https://lcamtuf.substack.com/p/a-reactionary-take-on-memory-safety)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://lcamtuf.substack.com/p/a-reactionary-take-on-memory-safety](https://lcamtuf.substack.com/p/a-reactionary-take-on-memory-safety)
- en: 'I was there when the universe formed: back in the 1990s, when information security
    wasn’t a reputable occupation, when case law was scant, and when every system
    could be breached at will. In the chaos, I saw an opportunity — and I dedicated
    a good portion of my adult life to helping others stay clear of online risks.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我亲眼见证了宇宙形成的时刻：回到上世纪90年代，信息安全还不是一个值得尊敬的职业，案例法律很少，每个系统都可以轻易被入侵。在混乱中，我看到了机会——我把成年后的大部分时间都献给了帮助他人远离网络风险。
- en: Throughout the years, one of the enduring problems I wrestled with was memory
    safety. For folks unfamiliar with the term, it boils down to programming languages
    such as C and C++ not keeping track of the memory allocated to the program and
    not preventing access out of bounds. This gives rise to endemic coding errors
    such as [buffer overflows](https://en.wikipedia.org/wiki/Buffer_overflow) or [use-after-free](https://en.wikipedia.org/wiki/Dangling_pointer).
    With a bit of luck and skill, a subset of these bugs can corrupt program control
    structures and allow attackers to perform actions they’re not otherwise authorized
    to perform.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，我一直在与内存安全问题做斗争。对于不熟悉这个术语的人来说，它归结为诸如C和C++等编程语言未能跟踪程序分配的内存并且未能阻止越界访问。这导致了像[缓冲区溢出](https://en.wikipedia.org/wiki/Buffer_overflow)或[空指针引用](https://en.wikipedia.org/wiki/Dangling_pointer)等编码错误的普遍存在。通过一点运气和技巧，这些错误的一个子集可以破坏程序控制结构，并允许攻击者执行他们本不被授权执行的操作。
- en: 'Today, there is a growing chorus of voices in the information security community
    positing that memory safety is the most consequential battle of our times; the
    latest salvo in this debate is the [guidance published by The White House](https://www.whitehouse.gov/wp-content/uploads/2024/02/Final-ONCD-Technical-Report.pdf),
    urging the adoption of memory-safe languages across the industry. For many, a
    non-binding document does not go far enough: perhaps the government ought to outlaw
    C and C++ altogether, be it for federal contracts or for any infrastructure deemed
    critical.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，信息安全界越来越多的声音认为内存安全是我们这个时代最重要的战斗；在这场辩论中，最新的一击是[白宫发布的指导文件](https://www.whitehouse.gov/wp-content/uploads/2024/02/Final-ONCD-Technical-Report.pdf)，敦促行业采用内存安全语言。对许多人来说，一份不具约束力的文件远远不够：也许政府应该完全禁止使用C和C++，无论是联邦合同还是被视为关键基础设施的任何领域。
- en: 'This puts me in an awkward position: after all these years fighting for memory
    safety, I’m disagreeing with the proposal to solve the problem once and for all.
    For one, I think that security professionals are too keen to collect paychecks
    for bossing people around and having others do all the hard work. This proposal
    — demanding that developers re-learn their craft — certainly fits that mold.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我处于一个尴尬的位置：经过这么多年为内存安全而战，我对一劳永逸地解决问题的提案表示反对。首先，我认为安全专家太急于收取工资来指挥别人并让别人做所有艰苦的工作。这项提议——要求开发人员重新学习他们的技艺——无疑符合这一模式。
- en: My more pragmatic critique is that I doubt it’s worth the cost. First, only
    a small fraction of memory-unsafe code is realistically exposed to attacks. In
    the context of modern computing paradigms, the primary attack surface is limited
    chiefly to network stacks, browser APIs, and a handful of multimedia transcoding
    libraries. For a handful of VM providers, the hypervisor code is of interest too.
    But together, these components probably represent less than 10% of the codebase
    targeted by the proposed mandates; and perhaps 2% is of major economic interest.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我更为务实的批评是，我怀疑这值不值得。首先，只有极小一部分不安全内存的代码真正面临攻击。在现代计算范式下，主要的攻击面主要限于网络堆栈、浏览器API和少数多媒体转码库。对于少数虚拟机提供商，虚拟化管理程序代码也很重要。但这些组件加起来可能不到所提议命令针对的代码库的10%，也许只有2%是具有重大经济利益的。
- en: 'Further, thanks to the decades of work on low-overhead exploit mitigations
    — notably including [address space randomization](https://en.wikipedia.org/wiki/Address_space_layout_randomization)
    and branch tracking — successful exploitation of memory safety issues has gotten
    quite challenging and accounts only for a tiny sliver of the overall volume of
    security incidents. Although memory corruption bugs are favored by some government
    actors, virtually all large-scale breaches trace back to other issues: outdated
    or misconfigured software, phishing, and so on.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于几十年来对低开销利用防护的工作 — 特别是包括[地址空间随机化](https://en.wikipedia.org/wiki/Address_space_layout_randomization)和分支跟踪
    — 内存安全问题的成功利用已经变得非常具有挑战性，并且仅占安全事件总量的一小部分。尽管一些政府行为者偏爱内存破坏漏洞，但几乎所有大规模的入侵事件都可以追溯到其他问题：过时或配置错误的软件，钓鱼等等。
- en: Finally, I’m skeptical that a nonspecific mandate to adopt memory-safe languages
    will necessarily nudge developers in the right direction; for every restrictive
    language designed with security in mind, there are dozens of memory-safe choices
    that on balance, introduce more bugs. In this context, the woes associated with
    PHP, SQL, and JavaScript are of special note; the trio is popular for good reasons,
    but is probably responsible for more harm than C and C++. Migrations to languages
    such as Python and Java might be marginally beneficial, but come with a lot of
    baggage too.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我怀疑一个非具体的采用内存安全语言的命令是否必然会把开发者引向正确的方向；对于每一种为安全而设计的限制性语言，都有数十种内存安全的选择，总体上引入更多的错误。在这种背景下，PHP、SQL
    和 JavaScript 的问题尤为突出；这三者之所以流行是有充分理由的，但它们可能造成的伤害比 C 和 C++ 还要大。迁移到诸如 Python 和 Java
    的语言可能会带来些许好处，但也伴随着许多负担。
- en: Together, these observations make me doubt that migrating organizations to memory-safe
    languages is a worthwhile intervention today. If we could wave a magic wand to
    transmogrify all C and C++ into Rust, I wouldn’t bat an eye — although I doubt
    it’d alter the landscape of information security in a profound way. Still, in
    a reality where even simply keeping track of your hardware and software assets
    is a formidable challenge for most enterprises, I think that the push for 100%
    memory safety is a grievous misallocation of funds.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些观察结果让我怀疑，今天将组织迁移到内存安全语言是否值得介入。如果我们能用魔法棒把所有的 C 和 C++ 变成 Rust，我不会有任何异议 — 尽管我怀疑这不会深刻改变信息安全的格局。然而，在一个即使对大多数企业来说简单地跟踪硬件和软件资产都是一个艰巨挑战的现实中，我认为全面推动内存安全可能是一种严重的资金错配。
- en: '*For another article on the topic of infosec prioritization, [click here](https://lcamtuf.substack.com/p/product-security-barking-up-the-wrong).
    For a thematic catalog of posts, try [this page](https://lcamtuf.coredump.cx/offsite.shtml).*'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*有关信息安全优先级设置的另一篇文章，请[点击这里](https://lcamtuf.substack.com/p/product-security-barking-up-the-wrong)。要查看主题目录，请尝试[此页面](https://lcamtuf.coredump.cx/offsite.shtml)。*'
