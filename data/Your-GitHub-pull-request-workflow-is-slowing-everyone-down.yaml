- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 13:19:36'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 13:19:36'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Your GitHub pull request workflow is slowing everyone down
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的GitHub拉取请求工作流正在减慢所有人的速度
- en: 来源：[https://graphite.dev/blog/your-github-pr-workflow-is-slow](https://graphite.dev/blog/your-github-pr-workflow-is-slow)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://graphite.dev/blog/your-github-pr-workflow-is-slow](https://graphite.dev/blog/your-github-pr-workflow-is-slow)
- en: As developers, we strive to write clean, modular code that's easy to maintain.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我们力求编写干净、模块化的代码，易于维护。
- en: However, between the pressure to deliver features quickly and the complexity
    of modern applications, putting this into practice takes a lot of work. Any meaningful
    engineering task can easily result in large, tangled pull requests that become
    bottlenecks in the development process.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在迫于快速交付功能的压力和现代应用程序复杂性之间，实践起来需要大量工作。任何有意义的工程任务都很容易导致大型、纠缠不清的拉取请求，这成为开发过程中的瓶颈。
- en: In this guide, we'll explore how the stacking workflow can help you overcome
    these challenges and ship better code faster. Whether you're new to stacking or
    looking to optimize an existing process, this workflow can streamline collaboration,
    accelerate review cycles, and promote coding best practices on your team.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本指南中，我们将探讨堆叠工作流如何帮助您克服这些挑战，并更快地交付更好的代码。无论您是初次尝试堆叠还是希望优化现有流程，此工作流都可以简化协作，加速审查周期，并促进团队的编码最佳实践。
- en: '**Why your GitHub pull request workflow is slow**[](/blog/your-github-pr-workflow-is-slow#why-your-github-pull-request-workflow-is-slow)'
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**为什么你的GitHub拉取请求工作流很慢**[](/blog/your-github-pr-workflow-is-slow#why-your-github-pull-request-workflow-is-slow)'
- en: Here at Graphite, we analyzed data from thousands of repositories to understand
    how common pull request (PR) workflows on GitHub lead to blocked developers, slow
    reviews, and reduced code quality.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在Graphite，我们分析了来自成千上万个存储库的数据，以了解GitHub上常见的拉取请求（PR）工作流如何导致开发者受阻、审查缓慢和代码质量降低。
- en: '**PRs are too big**[](/blog/your-github-pr-workflow-is-slow#prs-are-too-big)'
  id: totrans-split-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**PRs are too big**[](/blog/your-github-pr-workflow-is-slow#prs-are-too-big)'
- en: The single most important bottleneck is PR size - large PRs can make code reviews
    frustrating and ineffective. The average PR on GitHub has [900+ lines](https://www.keypup.io/product/average-pull-request-size-metric)
    of code changes.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 单个最重要的瓶颈是PR的大小 - 大型PR会使代码审查变得令人沮丧和无效。GitHub上的平均PR包含[900+行](https://www.keypup.io/product/average-pull-request-size-metric)代码变更。
- en: For speed and quality, PRs should be maintained under 200 lines—with 50 lines
    being ideal.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了速度和质量，PR应保持在200行以下，最好是50行。
- en: To put this in perspective, where giant 500+ line PRs take around 9 days to
    get merged on average, tiny PRs under 100 lines can make it from creation to landing
    within hours.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以这个角度来看，一个巨大的500+行PR通常需要9天左右才能合并，而小于100行的PR则可以在数小时内从创建到落地。
- en: '**PRs take too long to review and progress**[](/blog/your-github-pr-workflow-is-slow#prs-take-too-long-to-review-and-progress)'
  id: totrans-split-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**PRs take too long to review and progress**[](/blog/your-github-pr-workflow-is-slow#prs-take-too-long-to-review-and-progress)'
- en: When PRs have thousands of lines changed, properly reviewing them becomes incredibly
    difficult. Developers can easily waste days revising the code after initial feedback,
    and reviewers need to then rescan all the code, spot changes, and approve or reject
    every revision.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当PR包含数千行变更时，进行适当的审查变得异常困难。开发者往往需要花费数日来修订初始反馈后的代码，而审阅者则需重新扫描所有代码，找出变更，并对每个修订版进行批准或拒绝。
- en: These back-and-forth review cycles on large PRs slow down team velocity, and
    aren’t necessarily thorough. According to Graphite’s data, only 24% of massive
    1000+ line PRs receive **any** review comments.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型PR上的来回审查周期减缓了团队的开发速度，并不一定彻底。根据Graphite的数据，只有24%的超过1000行的大型PR收到**任何**审查评论。
- en: '**Large PRs introduce more bugs**[](/blog/your-github-pr-workflow-is-slow#large-prs-introduce-more-bugs)'
  id: totrans-split-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Large PRs introduce more bugs**[](/blog/your-github-pr-workflow-is-slow#large-prs-introduce-more-bugs)'
- en: When code isn’t reviewed thoroughly, it’s easy for bugs to slip through since
    reviewers [often don’t have the time to give each PR](https://graphite.dev/blog/how-large-prs-slow-down-development)
    the attention they deserve.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码未经彻底审查时，由于审阅者通常无法给予每个PR应有的关注，易于有漏洞被忽略。
- en: Problems can easily get hidden between the diffs, and reviewers often make assumptions
    instead of testing to avoid feeling overwhelmed. One particularly interesting
    finding is that as the size of a PR increases (by number of files changed), the
    amount of time reviewers spend on each file decreases significantly (for PRs with
    8 or more files changed).
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 问题很容易在变更之间被掩盖，评审者通常会做出假设，而不是测试，以避免感到不知所措。特别有趣的发现之一是，随着PR的大小增加（文件更改的数量），评审者在每个文件上花费的时间显著减少（对于更改了8个或更多文件的PR）。
- en: These quick reviews can easily lead to quality issues, which yield more bug
    fix PRs, technical debt, and team frustration. Engineers feel their progress reversing
    as they devote more and more time to patching bugs rather than developing features.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些快速的评审很容易导致质量问题，这些问题会产生更多的bug修复PR、技术债务和团队的挫败感。工程师们感觉他们的进展逆转，因为他们花费了越来越多的时间来修补bug，而不是开发功能。
- en: '**Standard GitHub pull request workflow**[](/blog/your-github-pr-workflow-is-slow#standard-github-pull-request-workflow)'
  id: totrans-split-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**标准的GitHub拉取请求工作流程**[](/blog/your-github-pr-workflow-is-slow#standard-github-pull-request-workflow)'
- en: Millions of developers use GitHub's pull request model daily, but in practice
    teams often encounter pain points that slow progress to a crawl.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数百万开发者每天使用GitHub的拉取请求模型，但实际上团队经常遇到的痛点减缓了进展速度。
- en: Let's understand the standard GitHub PR workflow.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来了解标准的GitHub PR工作流程。
- en: '**1\. Create a feature branch**[](/blog/your-github-pr-workflow-is-slow#1-create-a-feature-branch)'
  id: totrans-split-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1\. 创建一个特性分支**[](/blog/your-github-pr-workflow-is-slow#1-create-a-feature-branch)'
- en: Typically, GitHub projects follow a branching model where developers create
    a new branch for each user story or feature.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，GitHub项目遵循一种分支模型，开发人员为每个用户故事或功能创建一个新分支。
- en: 'First, you **checkout** the **main branch** *(where the production-ready code
    lives)* and create a feature branch using the following:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，**检出**主分支（*这是生产就绪代码的存放地*），然后使用以下方式创建特性分支：
- en: '[PRE0]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**This spawns an isolated stream for your changes.**'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**这为您的更改生成了一个独立的流。**'
- en: Now, this may seem great—you have a safe space to build new functionality without
    impacting **main**. It lets **main** remain stable so your CI/CD pipeline is unobstructed.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这看起来可能很好 —— 您有一个安全的空间来构建新功能，而不会影响**主分支**。这让**主分支**保持稳定，因此您的CI/CD流水线畅通无阻。
- en: '**But as your branch history diverges further from main, you’ll notice a few
    significant problems:**'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**但是随着您的分支历史与主分支的进一步分离，您会注意到几个重要的问题：**'
- en: Merging [upstream changes](https://stackoverflow.com/questions/2739376/definition-of-downstream-and-upstream)
    becomes tedious due to rebasing conflicts.
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并[上游更改](https://stackoverflow.com/questions/2739376/definition-of-downstream-and-upstream)由于重新基础冲突而变得乏味。
- en: You may disrupt other dependent branches while pushing a [hotfix](https://en.wikipedia.org/wiki/Hotfix),
    losing your place.
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在推送[热修复](https://en.wikipedia.org/wiki/Hotfix)时，可能会打断其他依赖分支，失去您的位置。
- en: After weeks and multiple new main releases, your code now depends on outdated
    branches and you may require many changes before it works with the latest branch.
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几周后，多次新的主要版本发布，您的代码现在依赖于过时的分支，可能需要许多更改才能与最新的分支配合使用。
- en: What was once a productive branch devolves into a stale silo as you start drowning
    in more and more technical debt.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经是一个高效的分支，随着您在越来越多的技术债务中挣扎，现在成为一个停滞的孤立。
- en: '**2\. Write code and commit changes**[](/blog/your-github-pr-workflow-is-slow#2-write-code-and-commit-changes)'
  id: totrans-split-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**2\. 编写代码并提交更改**[](/blog/your-github-pr-workflow-is-slow#2-write-code-and-commit-changes)'
- en: Since workflows don’t change overnight, you continue writing your big new feature.
    You optimize for getting prototypes built instead of maintaining strict isolation.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于工作流程不会一夜之间改变，您继续编写您的大型新功能。您优化于构建原型，而不是维护严格的隔离。
- en: It feels faster to iterate on related components within your dedicated branch.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在您专用的分支内迭代相关组件似乎更快。
- en: '**Before you know it, you have:**'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**不知不觉间，您已经：**'
- en: 1,500 lines modifying critical services.
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改关键服务的1,500行代码。
- en: Data model changes spanning multiple microservices.
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 涵盖多个微服务的数据模型更改。
- en: Multiple new frontend routes and UI flows.
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个新的前端路由和UI流程。
- en: All of this is smashed together in an unmanageable commit history
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都被堆砌在一个难以管理的提交历史中。
- en: But at least it's still safely quarantined behind your feature branch, right?
    Not really—your branch is highly coupled across all of those fronts, and decoupling
    things later can become challenging without a lot of rebasing.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但至少它仍然安全地隔离在您的特性分支之后，对吗？实际上并非如此 —— 您的分支在所有这些前端之间高度耦合，稍后要进行解耦可能会变得非常具有挑战性，需要大量的重新基础。
- en: Once ready, you commit and push the local code changes to the remote feature
    branch. Now your changes are saved on the remote repository.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 准备就绪后，将本地代码更改提交并推送到远程功能分支。现在你的更改已保存在远程存储库中。
- en: '**3\. Open a pull request**[](/blog/your-github-pr-workflow-is-slow#3-open-a-pull-request)'
  id: totrans-split-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**3\. 打开拉取请求**[](/blog/your-github-pr-workflow-is-slow#3-open-a-pull-request)'
- en: Once your feature branch contains the changes to be merged into the main branch,
    the next step is to open a pull request (PR).
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的功能分支包含要合并到主分支的更改，下一步就是打开一个拉取请求（PR）。
- en: '**A pull request lets you notify your teammates that your code is ready for
    review and feedback.**'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**拉取请求让你通知队友们你的代码已经准备好审查和反馈。**'
- en: To create a PR, you will go to your code management tool and open a pull request
    for your branch.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 PR，你需要去你的代码管理工具，并为你的分支打开一个拉取请求。
- en: You write a short, descriptive summary of the changes in your PR e.g., "Added
    user profile feature."
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的 PR 中写下简短的描述性变更摘要，例如，“添加用户个人资料功能。”
- en: 'For the PR body, you write a longer description explaining in more detail:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 PR 正文，你会写一篇更长的描述，详细解释：
- en: The specifics of what changes you have made and what new functionality you have
    added.
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你做了哪些具体的变更以及添加了哪些新功能。
- en: Technical details on how you implemented things.
  id: totrans-split-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是如何实现这些技术细节的。
- en: Your reasoning for why these changes are needed.
  id: totrans-split-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你为什么认为这些变更是必要的。
- en: Steps for how teammates can test out the new functionality you built.
  id: totrans-split-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 队友们测试你构建的新功能的步骤。
- en: The PR now becomes a centralized place for discussion tied to the branch. You
    will ping team members and stakeholders to request their code review.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个 PR 成为了与分支关联的集中讨论场所。你会@团队成员和相关方请求他们的代码审查。
- en: '**4\. Address review comments**[](/blog/your-github-pr-workflow-is-slow#4-address-review-comments)'
  id: totrans-split-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**4\. 处理审查意见**[](/blog/your-github-pr-workflow-is-slow#4-address-review-comments)'
- en: After your code goes under review, teammates thoroughly inspect it for bugs,
    bad coding practices that slipped in, edge cases you could’ve considered, and
    opportunities for simplification.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的代码经过审查后，队友们会彻底检查其中的错误、可能潜入的不良编码实践、你可能未考虑的边缘情况以及简化的机会。
- en: '**Issues large and small will inevitably come up. **'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**无论大小，问题都会不可避免地出现。**'
- en: You have iterative back-and-forth code-level conversations on the PR page. Teammates
    can comment on specific lines of code to point out problems or ask clarifying
    questions.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PR 页面上，你会在代码级别进行反复的交流。队友们可以评论特定的代码行以指出问题或提出澄清问题。
- en: For each round of feedback, you dive back into your branch to address the comments.
    This leads to a lot of rework—fixing defects, refactoring architecture, adding
    test cases, etc., based on the insights from reviewers.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一轮反馈，你都会深入到你的分支中来处理评论。这导致了大量的重做——修复缺陷、重构架构、添加测试用例等，这些都基于审阅者的见解。
- en: Once you push new commits to your branch, they automatically appear in the pull
    request for further feedback. This review cycle continues until all issues are
    resolved.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将新的提交推送到你的分支，它们将自动出现在拉取请求中以获取进一步的反馈。这个审阅周期会继续，直到所有问题都得到解决。
- en: '**5\. Merge your pull request**[](/blog/your-github-pr-workflow-is-slow#5-merge-your-pull-request)'
  id: totrans-split-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**5\. 合并你的拉取请求**[](/blog/your-github-pr-workflow-is-slow#5-merge-your-pull-request)'
- en: Finally, after all the feedback has been sufficiently addressed and your code
    receives a LGTM ("looks good to me") from teammates, it’s time to merge your approved
    pull request into **main**.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在所有反馈都得到充分解决并且你的代码获得了来自队友的 LGTM（"looks good to me"）后，就是时候将你批准的拉取请求合并到**主分支**中了。
- en: 'This merge integrates your code with **main**, which will:'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个合并将你的代码与**主分支**整合在一起，这样可以：
- en: Merge your branch commits into the main branch.
  id: totrans-split-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的分支提交合并到主分支。
- en: Automatically close the pull request.
  id: totrans-split-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动关闭拉取请求。
- en: Delete your feature branch *(optional, depends on your internal workflows)*.
  id: totrans-split-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除你的功能分支（*可选，取决于你的内部工作流程*）。
- en: Your changes are now fully incorporated into the production code. But for every
    new (even closely related) feature, you’ll start from square one, repeating the
    entire workflow.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你的更改现在完全融入到生产代码中。但是对于每个新的（甚至是紧密相关的）功能，你都需要从头开始，重复整个工作流程。
- en: '**What if there was a better way?** Enter [stacking](https://stacking.dev).'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果有更好的方法会怎样？** 输入[堆叠](https://stacking.dev)。'
- en: '**Improving PR workflows with stacking**[](/blog/your-github-pr-workflow-is-slow#improving-pr-workflows-with-stacking)'
  id: totrans-split-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**通过堆叠来改进 PR 工作流**[](/blog/your-github-pr-workflow-is-slow#improving-pr-workflows-with-stacking)'
- en: '*Stacking is a development approach that optimizes the GitHub pull request
    workflows by breaking large features into small, dependent pull requests that
    get incrementally integrated. Once all incremental pull requests have been approved,
    they get merged with main.*'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*堆栈是通过将大型功能拆分为小的、依赖的拉取请求，逐步集成到 GitHub 拉取请求工作流程中的开发方法。一旦所有递增的拉取请求都得到批准，它们就会与主分支合并。*'
- en: Let's explore how stacking addresses the painpoints in traditional PR workflows
    and meaningfully increases your development speed.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 探索一下如何解决传统 PR 工作流中的痛点，并且有意义地提高您的开发速度。
- en: '**What is stacking?**[](/blog/your-github-pr-workflow-is-slow#what-is-stacking)'
  id: totrans-split-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**什么是堆栈？**[](/blog/your-github-pr-workflow-is-slow#what-is-stacking)'
- en: 'Stacking structures feature development using “stacks” of small pull requests
    built on top of one another:'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈使用“堆栈”结构进行特性开发，每个小的拉取请求都建立在彼此之上：
- en: By stacking PRs, each PR becomes more focused and is easier to review and fix.
    And new work can continue to build on existing PRs before they get approved.
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过堆栈 PR，每个 PR 变得更加专注，易于审查和修复。新工作可以继续在获得批准之前建立在现有的 PR 上。
- en: This lets engineers rapidly open multiple small PRs and progress concurrently
    without being blocked. Changes ship continuously rather than landing in massive
    monolithic code dumps.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这样工程师可以快速打开多个小的 PR 并并行进行，而不会被阻塞。更改持续地发布，而不是落入大量的单体代码堆积中。
- en: '**How does stacking work?**[](/blog/your-github-pr-workflow-is-slow#how-does-stacking-work)'
  id: totrans-split-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**堆栈是如何工作的？**[](/blog/your-github-pr-workflow-is-slow#how-does-stacking-work)'
- en: Stacking transforms how large features get built by having developers split
    their work into multiple small, interconnected pull requests. Instead of one massive
    PR, they create a stack of focused changes that build on each other.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈通过让开发人员将他们的工作拆分为多个小而互相关联的拉取请求，来改变构建大型功能的方式。而不是一个巨大的 PR，他们创建了一堆相互依赖的专注变更。
- en: '*For example, a developer may be coding a new registration system. Rather than
    complete all the frontend, backend, and database work in a single huge 1000 line
    PR, they would break it down. One PR implements the registration API endpoints.
    Another connects these to the database. A third builds out the registration page
    tapping into the new API.*'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*例如，开发人员可能正在编写一个新的注册系统。与其在一个巨大的 1000 行 PR 中完成所有前端、后端和数据库工作，不如将其分解。一个 PR 实现注册
    API 端点。另一个将其连接到数据库。第三个则构建注册页面并利用新的 API。*'
- en: By default, every PR is restricted to only 1 commit of <200 lines, keeping changes
    tightly scoped. This forces developers to consciously limit work to related changes—the
    registration endpoint PR can't sneak in unrelated styling tweaks.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 PR 默认仅限于 1 个 <200 行的提交，范围严格控制。这迫使开发人员有意识地限制工作于相关的更改 —— 注册端点 PR 不能悄悄加入无关的样式调整。
- en: These focused PRs interlink together into a cohesive stack—the registration
    page PR branches off the API PR, which builds on the database PR. Changes integrate
    upstream incrementally as they’re reviewed.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这些专注的 PR 互相链接，形成一个连贯的堆栈 —— 注册页面 PR 从 API PR 分支出来，后者又依赖于数据库 PR。随着逐步审查，更改逐步集成到上游。
- en: A developer tool like Graphite, that automates stacking handles all of the dependencies
    between PRs, updating branches and continuously rebasing to keep branches in sync.
    So,  with smaller changes, stacking dramatically reduces the time required for
    reviews and revisions, helping you implement new features and fix bugs faster
    than the traditional workflows.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 类似 Graphite 这样的开发工具，自动化处理堆栈中所有的依赖关系，更新分支并持续进行变基，以保持分支同步。因此，通过更小的更改，堆栈显著减少了审查和修订所需的时间，帮助您实施新功能和更快地修复错误，胜过传统的工作流程。
- en: '**Why stacking improves the pull request workflow**[](/blog/your-github-pr-workflow-is-slow#why-stacking-improves-the-pull-request-workflow)'
  id: totrans-split-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**为什么堆栈可以改进拉取请求工作流程**[](/blog/your-github-pr-workflow-is-slow#why-stacking-improves-the-pull-request-workflow)'
- en: Transitioning teams from the traditional workflow to a stacking workflow fundamentally
    upgrades how changes get structured, reviewed, and integrated. It optimizes for
    productivity, quality, and comprehension. Here are a few ways it helps your dev
    productivity.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将团队从传统工作流转向堆栈工作流，从根本上提升了变更的结构化、审查和集成方式。它优化了生产力、质量和理解度。以下是它帮助您的开发生产力的几种方式。
- en: '**Breaks down large changes**[](/blog/your-github-pr-workflow-is-slow#breaks-down-large-changes)'
  id: totrans-split-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**分解大型更改**[](/blog/your-github-pr-workflow-is-slow#breaks-down-large-changes)'
- en: Stacking centers around breaking down big feature work into chains of smaller
    pull requests. Each PR is typically limited to 1 commit focused on an isolated
    change. This restriction guides developers to consciously make only a single change,
    squashing and rebasing along the way, instead of cluttering the PR with random
    unnecessary commits like "typo fixes".
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 堆叠的核心是将大型功能工作分解为一系列较小的拉取请求。每个PR通常限制为一个专注于独立更改的提交。这种限制引导开发人员有意识地只进行单一更改，沿途进行压缩合并和变基，而不是在PR中混杂“拼写错误修复”等随机不必要的提交。
- en: '**Accelerates review cycles**[](/blog/your-github-pr-workflow-is-slow#accelerates-review-cycles)'
  id: totrans-split-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**加快审核周期**[](/blog/your-github-pr-workflow-is-slow#accelerates-review-cycles)'
- en: With traditional practices, devs batch changes into huge PRs that overwhelm
    reviewers. Feedback gets pushed further and further in time because of how long
    it’d take to review big chunks of code.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统实践中，开发人员将更改批量打包到巨型PR中，这使得审阅者不堪重负。由于审核大块代码需要花费很长时间，反馈也会越推迟。
- en: In contrast, stacking small PRs speeds up feedback loops, as reviewers have
    much less complexity to parse and can give both timely and thorough feedback.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，堆叠小型PR加速了反馈循环，因为审阅者需要解析的复杂性大大降低，能够及时和彻底地提供反馈。
- en: '**Simplifies bug fixes**[](/blog/your-github-pr-workflow-is-slow#simplifies-bug-fixes)'
  id: totrans-split-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**简化错误修复**[](/blog/your-github-pr-workflow-is-slow#simplifies-bug-fixes)'
- en: Atomization ensures fixes stay clean—if any PR introduces issues, reverting
    that single, contained change is simple. The smaller this PR is, the quicker your
    code can be fixed. For instance, a bug in a 50-line PR may take a few minutes
    to fix compared to a 500-line PR.
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 原子化确保修复保持干净——如果任何PR引入问题，简单地回滚单独的变更就很容易。PR越小，修复代码的速度就越快。例如，一个50行PR中的bug修复可能只需几分钟，而500行PR中的bug修复则要花费更多时间。
- en: '**Enables steady integration**[](/blog/your-github-pr-workflow-is-slow#enables-steady-integration)'
  id: totrans-split-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**实现稳定集成**[](/blog/your-github-pr-workflow-is-slow#enables-steady-integration)'
- en: With typical huge PR workflows, there ends up being an uncomfortable pressure
    around finally getting giant changes approved and merged. Especially as the lengthy
    review process drags on, managers start pushing hard to accelerate the merge and
    unblock other work.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型的巨型PR工作流程中，最终获得巨大更改的批准和合并往往带来一种不舒服的压力。特别是在审查过程漫长的情况下，管理人员开始强烈推动加快合并步伐，解锁其他工作。
- en: On the contrary, stacked PRs can flow into main rapidly through steady continuous
    delivery of tiny, incremental changes. Each change is isolated and low risk, making
    reverts painless if a merge leads to a bug. By splitting reviews before releasing
    batches of hundreds or thousands of lines, stacking removes the bottlenecks and
    tensions that accumulate around giant PRs
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，堆叠的PR可以通过持续交付微小增量变更快速流入主分支。每个变更都是隔离的，风险较低，如果合并导致bug，回滚也是无痛的。通过在发布数百或数千行之前拆分审查，堆叠消除了围绕巨型PR累积的瓶颈和紧张情绪。
- en: Now that you know stacking can greatly benefit your internal developer and Ops
    workflows, how do you implement this flow for your team?
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道堆叠如何极大地利于内部开发人员和运维工作流程，那么如何为你的团队实现这种流程呢？
- en: '**GitHub pull request workflow with stacking**[](/blog/your-github-pr-workflow-is-slow#github-pull-request-workflow-with-stacking)'
  id: totrans-split-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**GitHub的拉取请求工作流程与堆叠**[](/blog/your-github-pr-workflow-is-slow#github-pull-request-workflow-with-stacking)'
- en: Let’s look at a stacking workflow in action. The goal is to optimize GitHub
    workflows through steady integration instead of having large, monolithic code
    changes. We want our changes to flow through fluidly rather than turning them
    into massive PRs that block other developers.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看堆叠工作流程是如何运作的。目标是通过稳定的集成优化GitHub工作流，而不是进行大而笨重的代码更改。我们希望我们的变更能够顺畅地流过，而不是将它们变成阻碍其他开发人员的大型PR。
- en: To simplify things, we’ll be working on [**Graphite**](https://graphite.dev/)—a
    powerful tool that automates many stacking workflow steps.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，我们将使用[**Graphite**](https://graphite.dev/)——一个强大的工具，自动化许多堆叠工作流程步骤。
- en: '**1\. Checkout main branch to start fresh**[](/blog/your-github-pr-workflow-is-slow#1-checkout-main-branch-to-start-fresh)'
  id: totrans-split-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1\. 检出主分支以开始新的工作**[](/blog/your-github-pr-workflow-is-slow#1-checkout-main-branch-to-start-fresh)'
- en: Let’s suppose you’re working on a new feature—**app notifications**.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在开发一个新功能——**应用通知**。
- en: 'Once you install and integrate Graphite with your Git repo, you can check out
    the latest main branch code to ensure you begin with up-to-date context:'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装并集成了Graphite到你的Git仓库，你可以检查最新的主分支代码，以确保你从最新的上下文开始：
- en: Unlike Git workflows, where it is easy to neglect staying updated, Graphite
    centers your workflow around continually integrating with the current mainline
    state.
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Git 工作流不同，容易忽视保持更新的情况，Graphite 将您的工作流程集中在持续与当前主线状态集成上。
- en: '**2\. Build feature incrementally through stacked branches**[](/blog/your-github-pr-workflow-is-slow#2-build-feature-incrementally-through-stacked-branches)'
  id: totrans-split-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**2\. 通过堆叠分支逐步构建功能**[](/blog/your-github-pr-workflow-is-slow#2-build-feature-incrementally-through-stacked-branches)'
- en: With main checked out, start constructing your feature through iterative, focused
    work.
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在检出主分支后，通过迭代和专注的工作开始构建您的功能。
- en: 'As a first step for our **app notifications** feature, we’ll add initial notification
    scaffolding by staging changes and committing them to a new branch in one flow
    using `gt create`:'
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 作为我们**应用通知**功能的第一步，我们将通过将更改分阶段添加到新分支并提交它们，一气呵成使用 `gt create`：
- en: '[PRE1]'
  id: totrans-split-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This command will add your changes and create a new branch in one motion. You
    can then continue iterating by creating and stacking additional branches:'
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将添加您的更改并一次性创建一个新分支。然后，您可以通过创建和堆叠额外的分支来继续迭代：
- en: '[PRE2]'
  id: totrans-split-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The email templates build on the scaffolding foundation while the review happens
    asynchronously. Engineers avoid blocking progress on dependent work. Changes integrate
    smoothly through steady streams instead of massive pull requests.
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行异步审查时，电子邮件模板基于脚手架基础构建。工程师们避免了依赖工作进展的阻碍。通过稳定的流而不是大型拉取请求，变更能够平稳集成。
- en: '**3\. Squash multi-commit branches**[](/blog/your-github-pr-workflow-is-slow#3-squash-multi-commit-branches)'
  id: totrans-split-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**3\. 将多次提交的分支合并为一个**[](/blog/your-github-pr-workflow-is-slow#3-squash-multi-commit-branches)'
- en: If you have multiple commits for a branch, Graphite makes it simple to squash
    and merge them, bringing consistency and following the 1 commit per PR standard.
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的一个分支有多次提交，Graphite 使压缩并合并它们变得简单，确保一次 PR 只有一个提交，保持一致性。
- en: '[PRE3]'
  id: totrans-split-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By cleaning up your PR commit history, you ensure a clear and concise main branch
    history that makes it easy to see exactly what’s changed over time.
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过清理您的 PR 提交历史记录，确保清晰简洁的主分支历史记录，从而轻松查看随时间变化的具体内容。
- en: '**4\. Merge to main incrementally**[](/blog/your-github-pr-workflow-is-slow#4-merge-to-main-incrementally)'
  id: totrans-split-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**4\. 逐步将更改合并到主分支**[](/blog/your-github-pr-workflow-is-slow#4-merge-to-main-incrementally)'
- en: After completing all your feature work incrementally, your small PRs can easily
    be merged into the main branch without becoming a bottleneck or blocker for other
    developers.
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在逐步完成所有功能工作后，您的小型 PR 可轻松合并到主分支，而不会成为其他开发者的瓶颈或阻碍。
- en: 'Simply submit the stack of branches to generate a stack of linked pull requests:'
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: 只需提交一堆分支即可生成一系列关联的拉取请求：
- en: Graphite auto-creates PRs for the branches so changes can flow downstream. It
    even autopopulates the titles and descriptions with templates so you have a basic
    PR ready to go—fill out the template, and you’re good to go.
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: Graphite 自动为分支创建 PR，使变更可以向下流动。它甚至使用模板自动填充标题和描述，因此您可以准备好基本的 PR 模板——填写模板，然后开始吧。
- en: Finally, after approval, your feature stack smoothly merges into **main**.
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，在获得批准后，您的功能堆栈顺利地合并到**主**分支。
- en: '**5\. Greatly reduces the possibility of bugs**[](/blog/your-github-pr-workflow-is-slow#5-greatly-reduces-the-possibility-of-bugs)'
  id: totrans-split-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**5\. 大大减少错误的可能性**[](/blog/your-github-pr-workflow-is-slow#5-greatly-reduces-the-possibility-of-bugs)'
- en: In a stacked workflow, made up of many small, dependent pull requests, each
    change is small enough to ensure thorough review. Because large features are broken
    up into atomic changes and merged incrementally, it’s easy to roll back regressions
    and fix bugs, avoiding unnecessary downtime that comes with big, monolithic changes.
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在由许多小的、依赖性强的拉取请求组成的堆叠工作流中，每个变更都足够小，以确保彻底审查。由于大型功能被分解为原子变更并逐步合并，轻松回滚回归和修复错误，避免大型、单块式变更带来的不必要停机。
- en: '**Simplify your dev workflows with stacking in Graphite**[](/blog/your-github-pr-workflow-is-slow#simplify-your-dev-workflows-with-stacking-in-graphite)'
  id: totrans-split-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**在 Graphite 中通过堆叠简化您的开发工作流程**[](/blog/your-github-pr-workflow-is-slow#simplify-your-dev-workflows-with-stacking-in-graphite)'
- en: Most developers still struggle with all of the moving parts—scattered tools,
    tangled branches, and stalled reviews of code review.
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发者仍然在应对许多不同部分的挑战——分散的工具、交织的分支，以及代码审查中的停滞不前。
- en: '[**Graphite**](https://graphite.dev/) **offers a better way forward.**'
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[**Graphite**](https://graphite.dev/) **提供了更好的前进方式**。'
- en: Graphite parallelizes review and development, automates all of the complexities
    of Git, and gives you more time to build.
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
  zh: Graphite 并行化审查和开发，自动化 Git 的所有复杂性，让您有更多时间构建。
- en: Developers stay unblocked on code review and continue pushing changes
  id: totrans-split-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员在代码审查上保持不受阻碍，继续推动更改。
- en: Reviewers provide rapid, thorough feedback, as features are broken up into small
    pieces
  id: totrans-split-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评审员在将特性分解为小块时提供快速而彻底的反馈。
- en: Managers rest easy as projects ship reliably
  id: totrans-split-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理者因项目可靠地发布而放心。
- en: Graphite organizes GitHub PRs into stacks while simplifying and accelerating
    code review.
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
  zh: Graphite 将 GitHub 的 PR 组织成堆栈，同时简化和加速代码审查。
- en: '**Start building with** [**Graphite**](https://graphite.dev/) **today.**'
  id: totrans-split-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**立即开始使用** [**Graphite**](https://graphite.dev/) **构建。**'
