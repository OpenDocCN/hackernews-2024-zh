- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:58:50'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月27日 14:58:50
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: wddbfs – Mount a sqlite database as a filesystem
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**wddbfs** – 将 SQLite 数据库挂载为文件系统'
- en: 来源：[https://adamobeng.com/wddbfs-mount-a-sqlite-database-as-a-filesystem/](https://adamobeng.com/wddbfs-mount-a-sqlite-database-as-a-filesystem/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://adamobeng.com/wddbfs-mount-a-sqlite-database-as-a-filesystem/](https://adamobeng.com/wddbfs-mount-a-sqlite-database-as-a-filesystem/)
- en: wddbfs – Mount a sqlite database as a filesystem
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**wddbfs** – 将 SQLite 数据库挂载为文件系统'
- en: '17 Feb 2024 | Categories: hacks'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年2月17日 | 分类：黑客
- en: 'Often when I’m prototyping a project, I hesitate to use a sqlite database despite
    their [many adavantages](https://sqlite.org/appfileformat.html). It seems much
    easier to just dump a bunch of files in a directory and to rely on the universal
    support for the filesystem API to read/delete/update records. Part of this is
    avoiding the overhead of figuring out a relational schema, but an equal amount
    of friction comes from the fact that .sqlite files are just slightly more difficult
    to inspect: the SQL syntax for selecting a few records is much more verbose than
    `head -n` or `tail -n`, there are special commands (which don’t work in some environments/versions)
    for listing tables, and neither my text editor nor my shell has autocompletion
    for database queries.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我进行项目原型设计时，经常会犹豫是否使用 SQLite 数据库，尽管它们有[许多优点](https://sqlite.org/appfileformat.html)。直接在目录中倾倒一堆文件并依赖于文件系统
    API 的普遍支持来读取/删除/更新记录似乎更容易。部分原因是避免了理解关系模式的开销，但同样大部分摩擦源于 .sqlite 文件略微难以检查：选择几条记录的
    SQL 语法要比 `head -n` 或 `tail -n` 冗长得多，列出表的特殊命令（在某些环境/版本中不起作用），以及我的文本编辑器和 shell 都没有数据库查询的自动补全功能。
- en: To try to get the best of both worlds, I have put together a little utility
    called *wddbfs*, which exposes a sqlite database as a (WebDAV^() filesystem, accessible
    to anything which can work with a filesystem, including terminals, file managers,
    and text editors.)
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尝试获得两全其美，我编写了一个名为 *wddbfs* 的小工具，它将 SQLite 数据库暴露为一个 (WebDAV^() 文件系统，可供任何可以处理文件系统的工具使用，包括终端、文件管理器和文本编辑器。
- en: 'Here’s how it works. If you install it with:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 安装方法如下：
- en: '`pip install git+https://github.com/adamobeng/wddbfs`'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip install git+https://github.com/adamobeng/wddbfs`'
- en: 'You can mount a database with:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令挂载数据库：
- en: '[PRE0]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Which will be available at localhost:8080 with no username or password required.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将在 localhost:8080 上可用，无需用户名或密码。
- en: Once you’ve [mounted](https://support.apple.com/guide/mac-help/connect-disconnect-a-webdav-server-mac-mchlp1546/mac)
    this WebDAV filesystem at, for example `/Volumes/127.0.0.1/`, you can see all
    the databases you specified with `--db-path`.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在例如 `/Volumes/127.0.0.1/` 上[挂载](https://support.apple.com/guide/mac-help/connect-disconnect-a-webdav-server-mac-mchlp1546/mac)了这个
    WebDAV 文件系统，您可以使用 `--db-path` 查看指定的所有数据库。
- en: '[PRE1]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By default, all the tables can be read as CSV, TSV, json and line-delimited
    json (“.jsonl”)
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有表都可以作为 CSV、TSV、json 和行分隔的 json (“.jsonl”) 读取。
- en: 'These files can be manipulated with tools that work with a standard filesystem:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件可以通过使用标准文件系统的工具进行操作：
- en: '[PRE2]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Although for now, the whole table gets read into memory for every read so this
    won’t work well for very large database files. There’s also no write support…
    yet.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管目前，每次读取时整个表都会加载到内存中，因此对于非常大的数据库文件来说，这种方法效果不佳。目前也没有写入支持……但愿未来会有。
