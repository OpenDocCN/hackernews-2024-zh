- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:38:51'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:38:51'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Three ways of handling user input
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三种处理用户输入的方式
- en: 来源：[https://dubroy.com/blog/three-ways-of-handling-user-input/](https://dubroy.com/blog/three-ways-of-handling-user-input/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://dubroy.com/blog/three-ways-of-handling-user-input/](https://dubroy.com/blog/three-ways-of-handling-user-input/)
- en: January 5, 2022
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 2022年1月5日
- en: Although there has been important progress in models and packages for the output
    of graphics to computer screens, there has been little change in the way that
    input from the mouse, keyboard, and other input devices is handled. New graphics
    standards are still using a fifteen-year-old model even though it is widely accepted
    as inadequate.
  id: totrans-split-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管在将图形输出到计算机屏幕的模型和包方面取得了重要进展，但从鼠标、键盘和其他输入设备接收输入的方式几乎没有变化。即使被广泛认为不足以满足需求，新的图形标准仍在使用一个十五年前的模型。
- en: — *Brad Myers, [A New Model for Handling Input](https://www.cs.cmu.edu/~amulet/papers/p289-myers-TOIS-new-model.pdf),
    1990.*
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: — *布拉德·迈尔斯，[处理输入的新模型](https://www.cs.cmu.edu/~amulet/papers/p289-myers-TOIS-new-model.pdf)，1990年。*
- en: 'It’s 2022 and things are pretty much the same: the dominant way of handling
    user input is still based on events and — in some form or another — callbacks.
    They come in slightly different forms ([addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener),
    [responder](https://developer.apple.com/documentation/appkit/nsresponder) [objects](https://developer.apple.com/documentation/uikit/uiresponder),
    etc.) but the core idea is the same.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经是2022年，情况依旧如此：处理用户输入的主要方式仍然是基于事件和 — 以某种形式 — 回调。它们以稍微不同的形式出现（[addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)，[responder](https://developer.apple.com/documentation/appkit/nsresponder)
    [对象](https://developer.apple.com/documentation/uikit/uiresponder)，等等），但核心思想是相同的。
- en: It’s still going strong more than 40 years later, so the event-and-callback-based
    approach clearly has something going for it. But in nearly every code base I’ve
    worked in, the hairiest, most difficult-to-modify logic is in the event handling
    code. Handling user input is — to borrow [a phrase from Laurence Tratt](https://tratt.net/laurie/blog/entries/parsing_the_solved_problem_that_isnt.html)
    — a solved problem that *isn’t*.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 40多年后它仍然强大，因此基于事件和回调的方法显然有其优点。但在我工作过的几乎每个代码库中，最复杂、最难修改的逻辑都在事件处理代码中。处理用户输入 — 借用[劳伦斯·特拉特的一句话](https://tratt.net/laurie/blog/entries/parsing_the_solved_problem_that_isnt.html)
    — 是一个解决了但*并未*解决的问题。
- en: To help me understand the pros and cons of the events-and-callbacks model and
    to experiment with some other approaches, I decided to write up a simple example
    in a three different styles.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我理解事件和回调模型的利弊，并尝试一些其他方法，我决定用三种不同的风格写一个简单的示例。
- en: A toy problem
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个玩具问题
- en: 'The goal is to implement a square that you can either drag and drop, or click.
    The code should distinguish between the two gestures: a click shouldn’t just be
    treated as a drop with no drag. Finally, when you’re dragging, pressing escape
    should abort the drag and reset the object back to its original position.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是实现一个正方形，你可以拖放或点击。代码应该区分这两种手势：点击不应仅被视为一个没有拖动的放置。最后，在拖动时，按下Escape键应该中止拖动并将对象重置回其原始位置。
- en: Here’s an interactive demo. There are at least two bugs here — see if you can
    find them! 😁
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个交互式演示。这里至少有两个bug — 看看你能找到它们吗！ 😁
- en: 'Approach #1: Event listeners'
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一种方法：事件侦听器
- en: As a baseline, let’s start with the standard approach based on event listeners.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为基线，让我们从基于事件侦听器的标准方法开始。
- en: '[PRE0]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There are slightly nicer/cleaner ways to implement this, but I think this is
    pretty good as a representative example. Note that I’m using the `pointerdown`
    rather than `mousedown` so that I can take advantage of [pointer capture](https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture#overview_of_pointer_capture).
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有更好/更清晰的实现方式，但我认为这个作为一个代表性示例已经很不错了。请注意，我使用`pointerdown`而不是`mousedown`，以便我可以利用[指针捕获](https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture#overview_of_pointer_capture)。
- en: 'Taking a look at it with a critical eye, the first thing that sticks out is
    the shared state that’s used by all of the event handlers:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细审视它，首先显眼的是所有事件处理程序都使用的共享状态：
- en: '`didDrag` keeps track of whether any *pointermove* event occurred, so we can
    distinguish between a drag and a click'
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`didDrag` 用于跟踪是否发生了任何*pointermove*事件，因此我们可以区分拖动和点击'
- en: '`dragOrigin` records the position where the drag gesture started, and doubles
    as a way of checking whether the mouse is currently down.'
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dragOrigin` 记录了拖拽手势开始的位置，并且也充当了检查鼠标当前是否按下的一种方式。'
- en: '`origPos` holds the original position of the target object, so we can reset
    it if the drag is canceled.'
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`origPos` 保存了目标对象的原始位置，这样如果拖拽被取消，我们就可以重置它。'
- en: One thing I dislike a bit about the callback-based approach is how the control
    flow is mostly implicit. You can “jump into” control at many parts of the code,
    and the order of the handlers is purely determined by the order that the events
    arrive.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我对基于回调的方法有一点不喜欢的地方是控制流大多是隐式的。你可以在代码的许多部分“跳入”控制，并且处理程序的顺序纯粹由事件到达的顺序决定。
- en: Can you spot the problem with the `pointerup` handler, that causes the bugs
    that I mentioned above?
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你能找出 `pointerup` 处理程序中导致我上面提到的问题的问题吗？
- en: <details><summary>*Show me the answer!*</summary> The body of `pointerup` handler
    should be guarded with `if (dragOrigin) { ... }`, just like the `pointermove`
    handler. Otherwise (1) a drag that starts *outside* the square, but ends over
    it, is treated as a click; and (2) after cancelling a drag, the next `pointerup`
    event sets the status to *dropped*.</details>
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: <details><summary>*给我看答案！*</summary> `pointerup` 处理程序的主体应该通过 `if (dragOrigin)
    { ... }` 进行保护，就像 `pointermove` 处理程序一样。否则 (1) 从正方形外开始但在其上结束的拖拽会被视为点击；(2) 在取消拖动后，下一个
    `pointerup` 事件将状态设置为 *dropped*。</details>
- en: 'Approach #2: Polling'
  id: totrans-split-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '方法 #2：轮询'
- en: Another way to handle user input is *polling*, or periodically checking the
    state of the hardware. The original Smalltalk MVC used this approach, and it’s
    still used in game programming. ^(I don’t think I’ve ever written any code that
    used polling for handling user input, so I wanted to at least give it a try.)
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 处理用户输入的另一种方法是 *轮询*，即定期检查硬件状态。最初的Smalltalk MVC就使用了这种方法，在游戏编程中仍然被广泛使用。^(我想我从来没有编写过使用轮询处理用户输入的代码，所以我至少想试试。)
- en: Below is a polling-based version of the same example from above. I’ve left out
    the helper code that takes care of updating the `mouse` and `keyboard` variables
    using the standard DOM events.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是与上述相同示例的基于轮询的版本。我省略了处理更新 `mouse` 和 `keyboard` 变量的帮助代码。
- en: '[PRE1]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Conceptually, polling is a pretty simple approach, but it imposes a fair bit
    of extra complexity on the handling code. For one thing, I needed `didHandlePointerDown`
    so that it only reacts once when the mouse button is pressed, rather than on every
    frame. I also needed to do my own hit testing with `rectContains`. This is one
    downside of polling — you need to implement extra bookkeeping for some things
    that you get for free in an event-based model.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在概念上，轮询是一个非常简单的方法，但它会给处理代码增加相当多的额外复杂性。首先，我需要 `didHandlePointerDown`，这样它只在按下鼠标按钮时才会反应一次，而不是每帧都会反应。我还需要使用
    `rectContains` 来进行自己的命中测试。这是轮询的一个缺点 —— 你需要为一些东西实现额外的记录，而在事件驱动模型中你是免费获得这些的。
- en: Of course, the major drawback of polling is that you always need to be checking
    for state changes. This consumes CPU cycles, and if it’s not frequent enough,
    you can miss some user input. That’s why it’s not seen much anymore outside game
    programming, where you typically have an active rendering loop anyways.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，轮询的主要缺点是你总是需要检查状态变化。这会消耗CPU周期，如果检查频率不够高，可能会错过一些用户输入。这就是为什么在游戏编程之外它不再常见的原因，因为通常你已经有一个活跃的渲染循环。
- en: On the plus side, the control flow is more explicit when compared to the event
    listener approach. For example, the code that handles cancellation will always
    run after any other other handler *in the same frame*. We do still need to be
    careful not process a `pointerup` without a corresponding `pointerdown`, as those
    would always be handled in separate frames.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正面看，与事件监听器方法相比，控制流更为显式。例如，处理取消的代码总是会在同一帧中的任何其他处理程序之后运行。我们仍然需要注意，不要在没有对应的 `pointerdown`
    的情况下处理 `pointerup`，因为它们总是在不同的帧中处理。
- en: Another thing that’s nice here is that you basically have unrestricted access
    to the current state of the input devices, whereas in the callback-based model,
    it’s less convenient to do something like looking at the current mouse position
    inside the `keydown` handler. DOM events hack around this limitation by including
    some keyboard state in the MouseEvent instances ([`altKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/altKey),[`ctrlKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/ctrlKey),
    etc.), but that only addresses the most common cases.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一点很好的地方，你基本上可以无限制地访问当前输入设备的状态，而在基于回调的模型中，要做像在`keydown`处理程序中查看当前鼠标位置这样的事情就不那么方便了。DOM事件通过在MouseEvent实例中包含一些键盘状态（例如[`altKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/altKey)，[`ctrlKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/ctrlKey)等）来解决这一限制，但这只解决了最常见的情况。
- en: 'With polling, not only do you have more flexibility in *where* you examine
    the input state, but also *when* you examine it. With events, there’s an inversion
    of control: the event dispatch mechanism determines when (and if) each component
    observes the state change. This can be limiting, but it’s also a huge benefit
    for composability, as it enables loosely-coupled coordination between parent and
    child components (e.g. event delegation). I don’t know how you could achieve the
    something similar in polling-based model.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用轮询，不仅可以更灵活地*检查输入状态的位置*，还可以*检查其发生的时间*。使用事件时，控制权有所倒置：事件分发机制决定每个组件何时（以及是否）观察状态更改。这可能有所限制，但对于组合性而言，却是一个巨大的优势，因为它支持父子组件之间的松耦合协调（例如事件委托）。我不知道如何在基于轮询的模型中实现类似的东西。
- en: Hybrid models
  id: totrans-split-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 混合模型
- en: After reading the first draft of this post, a few people mentioned event-based
    approaches that feel somewhat similar to the polling approach. For example, you
    could have a single callback that handles all the events, rather than a separate
    callback for each event.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本文初稿后，有几个人提到基于事件的方法，感觉与轮询方法有些类似。例如，你可以有一个单一的回调函数来处理所有事件，而不是每个事件都有一个单独的回调函数。
- en: This gives you all the advantages of events, while making the control flow a
    bit more explicit (as with the polling approach), and making it easier to share
    state and code between the different paths.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这使你可以享受事件的所有优势，同时使控制流程更加明确（就像轮询方法一样），并且更容易在不同路径之间共享状态和代码。
- en: 'Approach #3: Process-oriented'
  id: totrans-split-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法三：面向进程
- en: 'The third approach I wanted to try is inspired by [Squeak: a Language for Communicating
    with Mice](https://swtch.com/~rsc/thread/squeak.pdf), by Luca Cardelli and Rob
    Pike. The core idea is that concurrent, communicating processes are a good way
    to model user interaction. Note that *process* here doesn’t mean an OS-level process;
    it means a lightweight, sequential thread of control, like a [goroutine](https://go.dev/tour/concurrency/1)
    or a [Ruby fiber](https://ruby-doc.org/core-2.5.0/Fiber.html).'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我想尝试的第三种方法灵感来自[Squeak：与鼠标交流的语言](https://swtch.com/~rsc/thread/squeak.pdf)，作者是Luca
    Cardelli和Rob Pike。核心思想是并发的、通信的进程是模拟用户交互的一个很好的方法。请注意，这里的*进程*并不是指操作系统级别的进程；它指的是轻量级的、顺序控制的线程，类似于[goroutine](https://go.dev/tour/concurrency/1)或[Ruby
    fiber](https://ruby-doc.org/core-2.5.0/Fiber.html)。
- en: To experiment with these ideas in JS, I built a tiny library called Abro.js
    ^(which provides some slightly higher-level abstractions on top of `async` and
    `await`. The result looks a lot more like the [Esterel language](http://www-sop.inria.fr/meije/esterel/esterel-eng.html)
    than Squeak. (Esterel was also an inspiration for Cardelli and Pike.))
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要在JS中尝试这些想法，我构建了一个名为Abro.js的小型库，^(它在`async`和`await`之上提供了一些稍高级的抽象。结果看起来更像[Esterel语言](http://www-sop.inria.fr/meije/esterel/esterel-eng.html)，而不是Squeak。（Esterel也是Cardelli和Pike的灵感来源。))
- en: 'Here’s a working implementation based on Abro:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基于Abro的工作实现：
- en: '[PRE2]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also try this version out:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以尝试这个版本：
- en: 'Before getting into the details, let me explain the basics of Abro:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入讨论之前，让我解释一下Abro的基础：
- en: Each process (or *fiber*) is an async function that can block until an event
    arrives from an *EventSource*. For example, control will block at 1️⃣ [↩](#code-pointerdown)
    until a `pointerdown` occurs.
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个进程（或*纤程*）是一个异步函数，可以阻塞，直到从*EventSource*接收到事件为止。例如，控制将在1️⃣ [↩](#code-pointerdown)处阻塞，直到发生`pointerdown`事件。
- en: Unlike regular async functions, Abro fibers can be cleanly terminated from the
    outside. I do this by keeping track of the promise that each fiber is blocked
    on, so it can be terminated by rejecting that promise.
  id: totrans-split-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与普通的异步函数不同，Abro纤程可以从外部清晰地终止。我通过跟踪每个纤程所阻塞的Promise来实现这一点，因此可以通过拒绝该Promise来终止它。
- en: '`abro.or` (see 2️⃣ [↩](#code-abro-or)) starts multiple fibers, and as soon
    as one of them completes, the others are terminated. It’s based on the `par/or`
    construct in [Céu](http://www.ceu-lang.org/), another Esterel-inspired language.'
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`abro.or`（见 2️⃣ [↩](#code-abro-or)）启动多个纤程，一旦其中一个完成，其他纤程就会终止。它基于[Céu](http://www.ceu-lang.org/)中的`par/or`结构，这是受Esterel启发的另一种语言。'
- en: The ability to terminate fibers from the outside makes it possible to write
    loops with no explicit exit condition (see 3️⃣ [↩](#code-infinite-loop)), as long
    as they block somewhere within the loop.
  id: totrans-split-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从外部终止纤程的能力使得编写没有显式退出条件的循环成为可能（见 3️⃣ [↩](#code-infinite-loop)），只要它们在循环内的某个地方阻塞即可。
- en: If you’re interested, you can take a look at [Abro on GitHub](https://github.com/pdubroy/handling-user-input/blob/main/abro.js),
    but be warned — it’s very much a work in progress.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感兴趣，你可以查看[GitHub上的Abro](https://github.com/pdubroy/handling-user-input/blob/main/abro.js)，但请注意——它目前仍在积极开发中。
- en: This first thing to notice with this approach is the clear, explicit sequencing
    between the different states. The first line of the loop blocks on a `pointerdown`
    event; the other handlers aren’t even active until control proceeds past that
    point^.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的第一件需要注意的事情是不同状态之间的清晰、明确的序列。循环的第一行在`pointerdown`事件上阻塞；直到控制流过该点后，其他处理程序甚至都不活跃^。
- en: The other thing I really like is the separation of concerns that’s enabled by
    the `or` construct along with the ability to abort individual threads of control.
    Take a close look at `handleDrag` — it’s just an infinite loop that processes
    `pointermove` events. It doesn’t need to be concerned with cancellation, that
    happens automatically when the `handleEscape` task completes. Also, since this
    is built on top of events, we can still take advantage of event bubbling and other
    forms of coordination between a container and its descendants.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我真正喜欢的另一件事是由`or`结构和中止单个控制线程的能力启用的关注点分离。仔细看看`handleDrag` —— 它只是处理`pointermove`事件的无限循环。它不需要关注取消操作，当`handleEscape`任务完成时，取消操作会自动发生。此外，由于这是基于事件的，我们仍然可以利用事件冒泡和容器及其后代之间的其他形式协调。
- en: Overall, I find the process-oriented approach to be pretty compelling. It seems
    to retain all the advantages of the event-driven model (e.g., in comparison to
    polling), while improving on some of the issues that callbacks have. I’m definitely
    interested to try it out in some more realistic use cases.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我发现面向过程的方法相当引人入胜。它似乎保留了事件驱动模型的所有优势（例如与轮询相比），同时改进了回调函数存在的一些问题。我绝对有兴趣在一些更现实的用例中尝试它。
- en: I found it really useful to work through a toy problem with a few different
    approaches. Comparing event listeners to polling made it much easier for me to
    see the pros and cons of each style. The advantages of events (and event dispatch)
    are much more obvious to me now, and I realized that polling isn’t really as simple
    as it sounds.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现通过几种不同的方法解决一个玩具问题非常有用。比较事件监听器和轮询使我更容易看到每种风格的利弊。事件（和事件分发）的优势对我来说现在明显多了，我意识到轮询并不像听起来那么简单。
- en: 'Of course, the three styles I’ve presented here are just a starting point,
    and there are many other approaches that I haven’t touched on. There are two in
    particular that I want to briefly mention:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我在这里展示的三种风格只是一个起点，还有许多其他方法我没有涉及到。有两种方法特别值得一提：
- en: '[Statecharts](https://statecharts.dev/) are closely related to the process-oriented
    model I’ve explored here. The [original statecharts paper](https://dubroy.com/refs/Statecharts_a_visual_formalism_for_complex_systems.pdf)
    references Esterel, saying: *“It is motivated by concerns very similar to our
    own, and many of the resulting decisions taken there are strikingly similar to
    those present in statecharts.”* There’s enough to unpack there that I decided
    to leave it for a follow-up post.'
  id: totrans-split-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[状态图](https://statecharts.dev/)与我在这里探讨过的面向过程模型密切相关。[原始状态图论文](https://dubroy.com/refs/Statecharts_a_visual_formalism_for_complex_systems.pdf)引用了Esterel，称：“它的动机与我们自己的关注非常相似，而且其中许多结果决策与状态图中的那些决策非常相似。”
    那里有足够的内容需要解读，所以我决定将其留给后续文章。'
- en: '[Functional reactive programming](https://stackoverflow.com/questions/1028250/what-is-functional-reactive-programming)
    (FRP), and related approaches like RxJS. I don’t have much experience with FRP,
    but I really should give it a try. Maybe another topic for a future post!'
  id: totrans-split-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[函数式响应式编程](https://stackoverflow.com/questions/1028250/what-is-functional-reactive-programming)（FRP）及其相关方法，如
    RxJS。我对FRP的经验不多，但确实应该试一试。也许是未来文章的另一个话题！'
- en: Check out [Part II](https://dubroy.com/blog/handling-user-input-with-structured-concurrency/),
    where I dig into the implementation details of Abro.js, and explore the process-oriented
    approach a bit more deeply.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [第二部分](https://dubroy.com/blog/handling-user-input-with-structured-concurrency/)，在那里我深入探讨了
    Abro.js 的实现细节，并更深入地探索了面向过程的方法。
- en: 💬 *Want to leave feedback? [Send me an email](https://dubroy.com/blog/about/#contact)
    or [respond on on Twitter](https://twitter.com/dubroy/status/1478728490807611393).*
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 💬 *想要留下反馈？[给我发电子邮件](https://dubroy.com/blog/about/#contact) 或者 [在 Twitter 上回复](https://twitter.com/dubroy/status/1478728490807611393)。*
- en: '*Thanks to Mariano Guerra, Sarah GHP, and Kevin Lynagh for providing feedback
    on my drafts.*'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢 Mariano Guerra、Sarah GHP 和 Kevin Lynagh 对我的草稿提供反馈。*'
