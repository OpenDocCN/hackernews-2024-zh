- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:26:18'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:26:18
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Ruby vs Python comes down to the for loop
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ruby与Python的区别归结为for循环
- en: 来源：[https://softwaredoug.com/blog/2021/11/12/ruby-vs-python-for-loop.html](https://softwaredoug.com/blog/2021/11/12/ruby-vs-python-for-loop.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://softwaredoug.com/blog/2021/11/12/ruby-vs-python-for-loop.html](https://softwaredoug.com/blog/2021/11/12/ruby-vs-python-for-loop.html)
- en: So much of how Ruby and Python differ comes down to the `for` loop.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby和Python之间的许多区别归结为`for`循环。
- en: Python embraces `for`. Objects tell `for` how to work with them, and the for
    loop’s body processes what’s given back by the object. Ruby does the opposite.
    In Ruby, `for` itself (via `each`) is a method of the Object. The caller passes
    the body of the for loop to this method.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Python拥抱`for`。对象告诉`for`如何与它们一起工作，而`for`循环的主体处理对象返回的内容。Ruby则相反。在Ruby中，`for`本身（通过`each`）是对象的一个方法。调用者将for循环的主体传递给这个方法。
- en: With idiomatic Python, the object-model submits to the for loop. In Ruby’s case,
    the for loop submits to the object-model.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在习惯用法的Python中，对象模型适应于for循环。在Ruby的情况下，for循环适应于对象模型。
- en: 'That is to say, in Python, if you wish to customize iteration, an object tells
    the language how it should be iterated:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，如果你希望自定义迭代，一个对象告诉语言应该如何迭代它：
- en: '[PRE0]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here `Stuff` uses methods `__next__` and `__iter__` to make itself iterable.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`Stuff`使用方法`__next__`和`__iter__`使自己可迭代。
- en: '[PRE1]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In idiomatic Ruby, however, you do something quite the opposite. You create
    `for` itself as a method, and it accepts code (the body) to run. Ruby puts procedural
    code in blocks so they can be passed around. Then in your `each` method you interact
    with the block using `yield`, passing the value into the block to do what you
    need (the block is kind of an implicit argument on any method).
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在习惯用法的Ruby中，你做的事情完全相反。你将`for`本身创建为一个方法，并且它接受要运行的代码（主体）。Ruby将过程代码放入块中，以便可以将其传递。然后在你的`each`方法中，你使用`yield`与块交互，将值传递到块中以执行需要的操作（块在任何方法上都是一种隐式参数）。
- en: If we rewrote the code above, it would be
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们重写上面的代码，它会是这样的
- en: '[PRE2]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Using `each` to iterate:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`each`进行迭代：
- en: '[PRE3]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Instead of passing data back to the for loop (Python) you pass the code to the
    data (Ruby).
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不是将数据传递回for循环（Python），而是将代码传递给数据（Ruby）。
- en: 'But it goes deeper than this:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但问题不仅如此：
- en: Python builds on `for`-like constructs for all kinds of processing; Ruby pushes
    other kinds of data processing work to methods.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: Python基于类似`for`的构造来进行各种处理；Ruby将其他类型的数据处理工作推到方法中。
- en: Pythonic code uses list and dictionary comprehensions to implement map and filter,
    with the same for/iteration semantics at the core of those expressions.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: Pythonic代码使用列表和字典推导式来实现map和filter，其核心是相同的for/迭代语义。
- en: '[PRE4]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Ruby keeps going with its methods-first approach, except instead of `each`
    we have a new set of methods commonly implemented on collections, as below:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby继续沿着首先方法的方法前进，除了`each`之外，我们还有一组通常在集合上实现的新方法，如下所示：
- en: '[PRE5]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Python says “you tell us how to iterate your instances, we’ll decide what we
    do with your data.” Python has a few language based primitives for iteration and
    processing, and to customize that iteration we simply add the right code to the
    for loop’s (or expressions) body.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: Python说“你告诉我们如何迭代你的实例，我们决定如何处理你的数据。” Python有一些基于语言的迭代和处理原语，要定制该迭代，我们只需在for循环的（或表达式）主体中添加正确的代码。
- en: Ruby flips the script, giving the objects deeper customizability. Yes in some
    cases we could simply add more control flow inside blocks. Yes, we could bend
    our usage of `each` to basically do `map`. But Ruby lets objects give different
    `map` and `each` implementations (perhaps “each”’s implementation would be very
    suboptimal, or even unsafe, if used for “map”). Ruby objects can be much more
    forward about the best ways to process its data.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby颠覆了脚本，使对象具有更深层次的可定制性。是的，在某些情况下，我们可以简单地在块内部添加更多的控制流。是的，我们可以弯曲我们对`each`的使用以基本上做`map`。但是Ruby让对象能够提供不同的`map`和`each`实现（也许“each”的实现如果用于“map”将是非常次优的，甚至是不安全的）。Ruby对象可以更加前卫地处理其数据的最佳方法。
- en: In Ruby, the objects control the affordances. In Python, the language does.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ruby中，对象控制可能性。在Python中，语言控制。
- en: Idiomatic Python has strong opinions about data processing. Python says “look,
    90% of your code will fit neatly into these ideas, just conform to it and get
    your work done.” Just make your objects for-loopable and get out of my hair. However
    Ruby says “there will be important cases where we don’t want to give the caller
    that much power”. So Ruby encourages objects to control how they’re processed
    and developers are encouraged to fall in line to how the objects want to be interacted
    with. Ruby chooses expressiveness with fewer opinions about data.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的成语风格对数据处理有着强烈的见解。Python 说：“看，你的 90% 代码将很好地符合这些思想，只要遵循它并完成你的工作。”只需使您的对象可迭代并结束我的困扰。但是
    Ruby 说：“有些重要情况下，我们不想给调用者那么大的权力。”因此，Ruby 鼓励对象控制它们如何被处理，开发人员被鼓励按照对象希望互动的方式行事。Ruby
    选择了更少关于数据的意见的表达方式。
- en: Python feels more like an extension of C-based “object oriented” programming.
    In C-based OO, like with [posix file descriptors](https://en.wikipedia.org/wiki/File_descriptor)
    or [Win32 window handles](https://stackoverflow.com/questions/2334966/win32-application-arent-so-object-oriented-and-why-there-are-so-many-pointers)
    the language doesn’t enforce bundling ‘methods’ with the object itself. Rather
    the object-to-method bundling happens out of convention. Python thinks this procedural
    world can be evolved - it upgrades this mindset to make it safer. Free functions
    exist, and indeed, are often encouraged over methods. Objects exist, but in a
    more hesitant way. Methods accept “self” as their first parameter, almost in the
    same way C functions in Win32 or Posix API accept a handle. When functions get
    passed around, they are treated almost like C function pointers. The procedural
    paradigm comes first and serves as the crucial foundation for everything, with
    object oriented semantics layered on top.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: Python 更像是 C-基础“面向对象”编程的扩展。在基于 C 的 OO 中，例如[posix 文件描述符](https://en.wikipedia.org/wiki/File_descriptor)或[Win32
    窗口句柄](https://stackoverflow.com/questions/2334966/win32-application-arent-so-object-oriented-and-why-there-are-so-many-pointers)，语言不强制将“方法”与对象本身捆绑在一起。相反，对象到方法的捆绑是出于约定。Python
    认为这种过程式世界可以进化 - 它将这种思维升级以使其更安全。自由函数存在，并且确实经常比方法更受鼓励。对象存在，但方式更为犹豫。方法将“self”作为其第一个参数接受，几乎与
    Win32 或 Posix API 中的 C 函数相同，后者接受句柄。在传递函数时，它们几乎像 C 函数指针一样对待。过程式范式优先，并作为一切的关键基础，面向对象的语义则层叠在其上。
- en: Ruby, however, inverts this. Ruby puts object-orientation as the foundation
    of the pyramid. Ruby contains the messy procedural world in blocks, letting objects
    work with those procedural blocks. Instead of breaking objects to conform to the
    language’s procedural foundation, Ruby makes procedural code fit into the object’s
    view of the world. Ruby has real privates, unlike Python which has private methods
    / parameters only out of convention.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby，然而，完全颠覆了这一点。Ruby 将面向对象作为金字塔的基础。Ruby 将混乱的过程式世界放在块中，让对象与这些过程式块一起工作。与其按照语言的过程式基础来破坏对象，Ruby
    让过程式代码适应对象对世界的视角。Ruby 有真正的私有成员，不像 Python，后者仅通过约定具有私有方法/参数。
- en: It’s no wonder that Python felt natural to my brain when I came to it from a
    system-programming perspective. It evolved and made that world safer, with an
    ability to write C when needed. Perhaps that’s why it’s found its home in a system
    resource intensive numerical computing space.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 不难理解为什么当我从系统编程的角度来看 Python 时，它对我的大脑感觉如此自然。它进化并使那个世界更安全，有能力在需要时编写 C 代码。也许这就是它在系统资源密集型数值计算空间找到家园的原因。
- en: It’s also no wonder that Ruby feels like a natural fit for developers building
    more fluent, perhaps safer, APIs and DSLs. Ruby wants programmers to model the
    domain, not the programming environment, and for many jobs this feels like the
    right approach.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不难理解为什么 Ruby 对于构建更流畅、也许更安全的 API 和 DSL 的开发人员来说是一个自然选择。Ruby 希望程序员模仿领域，而不是编程环境，对许多工作来说，这似乎是正确的方法。
- en: A search developer like me, working at a [Ruby shop](http://engineering.shopify.com)
    needs to navigate these differences. Maybe you’ll want to join me on this Ruby-Python-Search
    Adventure? Well then maybe [apply to this job](https://jobs.smartrecruiters.com/ni/Shopify/bedf9119-9a23-4fd3-8d8a-7fcbf168eca9-senior-relevance-engineer-search-discovery)
    :-p
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 像我这样的搜索开发人员，在[一个 Ruby 店铺](http://engineering.shopify.com)工作，需要应对这些差异。也许你想加入我，来体验这场
    Ruby-Python-搜索冒险？那么，也许你会[申请这份工作](https://jobs.smartrecruiters.com/ni/Shopify/bedf9119-9a23-4fd3-8d8a-7fcbf168eca9-senior-relevance-engineer-search-discovery)
    :-p
- en: Special Thanks to [Felipe Besson](https://felipebesson.com/), [Simon Eskildsen](https://sirupsen.com/)
    and [John Berryman](http://blog.jnbrymn.com/) for reviewing this post and giving
    substantive edits and feedback!
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 特别感谢 [Felipe Besson](https://felipebesson.com/)、[Simon Eskildsen](https://sirupsen.com/)
    和 [John Berryman](http://blog.jnbrymn.com/) 对本文进行审阅，并提供了实质性的编辑和反馈！
