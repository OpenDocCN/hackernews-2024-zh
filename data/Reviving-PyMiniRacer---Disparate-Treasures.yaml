- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:36:07'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:36:07'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Reviving PyMiniRacer - Disparate Treasures
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复苏PyMiniRacer - 不同的宝藏
- en: 来源：[https://bpcreech.com/post/mini-racer/](https://bpcreech.com/post/mini-racer/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://bpcreech.com/post/mini-racer/](https://bpcreech.com/post/mini-racer/)
- en: In [this last blog post](https://bpcreech.com/post/python-nodejs-eval/), I created
    a [helper](https://pypi.org/project/nodejs-eval/) to call JavaScript from Python
    using a NodeJS sidecar process. In the post I [commented](https://bpcreech.com/post/python-nodejs-eval/#alternatives-considered)
    that *in-* process JS evaluation might be nicer. The old [Sqreen `PyMiniRacer`
    project](https://github.com/sqreen/PyMiniRacer) had only *recently* fallen into
    disrepair. Can we revive it?
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在[最后一篇博客文章](https://bpcreech.com/post/python-nodejs-eval/)中，我创建了一个[助手](https://pypi.org/project/nodejs-eval/)，使用NodeJS边车进程从Python调用JavaScript。在文章中，我[评论道](https://bpcreech.com/post/python-nodejs-eval/#alternatives-considered)，*在*进程中进行JS评估可能会更好。旧的[Sqreen
    `PyMiniRacer`项目](https://github.com/sqreen/PyMiniRacer)最近*才*开始失修。我们能复活它吗？
- en: '**TL;DR: Yes!** It just took a couple weeks of elbow grease, and new ownership
    (it me). I now own the *two* best ways to run JavaScript from a Python program:
    [`PyMiniRacer`](https://github.com/bpcreech/PyMiniRacer) and [`nodejs-eval`](https://github.com/bpcreech/nodejs-eval).'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**简而言之：是的！**只需几周的努力和新的所有权（就是我）。现在我拥有从Python程序运行JavaScript的*两*种最佳方式：[`PyMiniRacer`](https://github.com/bpcreech/PyMiniRacer)和[`nodejs-eval`](https://github.com/bpcreech/nodejs-eval)。'
- en: '[PRE0]'
  id: totrans-split-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Other new features can be found [on the relnotes page](https://bpcreech.com/PyMiniRacer/history/),
    where v0.7.0 is the first new version since 2021.*'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*其他新功能可以在[发布说明页面上找到](https://bpcreech.com/PyMiniRacer/history/)，v0.7.0是自2021年以来的第一个新版本。*'
- en: A lineage[](#a-lineage)
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个血统[](#a-lineage)
- en: '**[`therubyracer`](https://github.com/rubyjs/therubyracer) (2009-2018)** [Charles
    Lowell](https://github.com/cowboyd) of [Frontside Software](https://frontside.com/)
    created [The Ruby Racer](https://github.com/rubyjs/therubyracer) to embed [V8](https://v8.dev/)
    (the JavaScript engine used by Chrome, NodeJS, etc) into [Ruby](https://www.ruby-lang.org/)
    for direct JS execution from Ruby programs.'
  id: totrans-split-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[`therubyracer`](https://github.com/rubyjs/therubyracer) (2009-2018)** [查尔斯·洛厄尔](https://github.com/cowboyd)，来自[Frontside
    Software](https://frontside.com/)，创建了[The Ruby Racer](https://github.com/rubyjs/therubyracer)，用于将[Chrome](https://v8.dev/)、NodeJS等使用的JavaScript引擎[V8](https://v8.dev/)直接嵌入[Ruby](https://www.ruby-lang.org/)，以便从Ruby程序中执行JS代码。'
- en: Unfortunately, the rich integration between Ruby Racer and V8 became a pain
    point for Ruby Racer, because upgrading V8 often meant revamping Ruby Racer to
    fit interface changes. So this project was eventually archived, and replaced with&mldr;
  id: totrans-split-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不幸的是，Ruby Racer与V8之间的深度集成成为Ruby Racer的痛点，因为升级V8通常意味着重新调整Ruby Racer以适应接口变化。因此，这个项目最终被存档，并被&mldr;
- en: '**[`mini_racer`](https://github.com/rubyjs/mini_racer) (2016-)** [Sam Saffron](https://github.com/SamSaffron)
    and others created [`mini_racer`](https://github.com/rubyjs/mini_racer), a new
    Ruby / V8 integration, stripped down relative to Ruby Racer. This version is still
    maintained.'
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[`mini_racer`](https://github.com/rubyjs/mini_racer) (2016-)** [山姆·萨弗隆](https://github.com/SamSaffron)和其他人创建了[`mini_racer`](https://github.com/rubyjs/mini_racer)，一个新的Ruby/V8集成版本，相对于Ruby
    Racer精简了许多。此版本仍在维护中。'
- en: '**[`sqreen/PyMiniRacer`](https://github.com/sqreen/PyMiniRacer) (2016-2021)**
    [Sqreen](https://github.com/sqreen), a web app security startup, created [`PyMiniRacer`](https://github.com/sqreen/PyMiniRacer),
    a Python module modeled after Ruby’s `mini_racer`. This followed the same model
    of minimizing the interface with V8, and also used a Python `ctypes` integration
    (as opposed to a Python extension module) which furthermore minimized the interface
    with *Python*, resulting in a JS/Python integration with relatively little support
    burden.'
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[`sqreen/PyMiniRacer`](https://github.com/sqreen/PyMiniRacer) (2016-2021)**
    [Sqreen](https://github.com/sqreen)，一家网络应用安全初创公司，创建了[`PyMiniRacer`](https://github.com/sqreen/PyMiniRacer)，这是一个Python模块，仿照了Ruby的`mini_racer`。这与V8的接口最小化模型相似，并使用Python的`ctypes`集成（而不是Python扩展模块），进一步减少了与*Python*的接口，从而实现了JS/Python集成，而支持负担相对较少。'
- en: '**[`bpcreech/PyMiniRacer`](https://github.com/bpcreech/PyMiniRacer) (2024-)**
    This is what you’re reading about now. :)'
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[`bpcreech/PyMiniRacer`](https://github.com/bpcreech/PyMiniRacer) (2024-)**
    这就是你现在正在阅读的内容。 :)'
- en: 'After discussion with the Sqreen (now DataDog) folks, we decided to host my
    revival of their `PyMiniRacer` project as a fork, which lives here:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在与Sqreen（现为DataDog）的讨论后，我们决定将我对他们的`PyMiniRacer`项目的复苏作为分支进行托管，位于这里：
- en: General updates[](#general-updates)
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一般更新[](#general-updates)
- en: Other than upgrading V8—which has its own section below—I took the opportunity
    to dust off various parts of this project.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了升级V8——这有自己的小节——我还有机会整理这个项目的各个部分。
- en: Python ecosystem updates[](#python-ecosystem-updates)
  id: totrans-split-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 生态系统更新[](#python-ecosystem-updates)
- en: In particular, lots of things have happened in the Python world!
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，在 Python 的世界里发生了许多事情！
- en: Python versions (drop Python 2, add up to 3.12)[](#python-versions-drop-python-2-add-up-to-312)
  id: totrans-split-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Python 版本（删除 Python 2，添加到 3.12）[](#python-versions-drop-python-2-add-up-to-312)
- en: First, we can drop Python 2 which was [globally EOL’d in 2020](https://www.python.org/doc/sunset-python-2/)
    (after a deprecation plan over a decade long!). Because the world is big, folks
    are still using Python 2 out there, but we don’t need to maintain an *up-to-date*
    V8 integration for them.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以放弃 Python 2，它在 [全球于 2020 年达到了 EOL](https://www.python.org/doc/sunset-python-2/)（在超过十年的逐步弃用计划之后！）。虽然世界很大，仍然有人在使用
    Python 2，但我们不需要为他们维护最新的 V8 集成。
- en: Meanwhile, as of this writing, Python is up to 3.12, which for `PyMiniRacer`
    added some minor breakage here and there. For example, some change to the Python
    `memoryview` system [now requires](https://github.com/bpcreech/PyMiniRacer/blob/d1b6f4d83306bf7b94a7827d45476017b6ec5382/src/py_mini_racer/py_mini_racer.py#L508)
    [explicit `memoryview` casting](https://github.com/python/cpython/issues/60148).
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，截至本文撰写时，Python 已经更新到 3.12，在 `PyMiniRacer` 中增加了一些次要的破坏。例如，Python 的 `memoryview`
    系统现在要求显式的 `memoryview` 强制转换。
- en: I also added support for the fancy new Python [`importlib.resources`](https://docs.python.org/3/library/importlib.resources.html)
    specification which lets Python directly run modules *and load their dependencies,
    e.g., `PyMiniRacer`’s DLL file* out of unusual non-filesystem places (such as
    from within `zip` files). This system was added in Python 3.7 and revamped in
    Python 3.9; `PyMiniRacer` now supports both incantations of loading-data-files-from-the-package.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我还添加了对新的 Python [`importlib.resources`](https://docs.python.org/3/library/importlib.resources.html)
    规范的支持，这使得 Python 可以直接运行模块并加载它们的依赖，例如 `PyMiniRacer` 的 DLL 文件，从不寻常的非文件系统位置（例如 `zip`
    文件内）加载数据文件。这一系统在 Python 3.7 中添加，Python 3.9 中进行了重新设计；`PyMiniRacer` 现在支持从包中加载数据文件的两种实现方式。
- en: Packaging with Hatch[](#packaging-with-hatch)
  id: totrans-split-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 Hatch 打包[](#packaging-with-hatch)
- en: '`PyMiniRacer` originally built binary distributions using `setuptools`, and
    managed its various bits of automation using a hand-written `Makefile`. Python
    now has a standardized pluggable packaging system for building binary distributions,
    and [Hatch](https://github.com/pypa/hatch) is the most popular implementation
    of it. [*“Hatch is trying to be the Cargo or Go CLI equivalent for Python”*](https://github.com/pypa/hatch/discussions/1117#discussioncomment-7827378)
    per [its author](https://github.com/ofek). By using Hatch (and accepting its various
    opinions) we can drop a *lot* of developer tooling configuration from `PyMiniRacer`.'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyMiniRacer` 最初使用 `setuptools` 构建二进制分发，并使用手工编写的 `Makefile` 管理其各种自动化任务。Python
    现在有了一个标准化的可插拔打包系统来构建二进制分发，[Hatch](https://github.com/pypa/hatch) 是其中最流行的实现。根据
    [其作者](https://github.com/ofek) 的说法，*“Hatch 试图成为 Python 的 Cargo 或 Go CLI 的等价物”*。通过使用
    Hatch（并接受其各种观点），我们可以删除 `PyMiniRacer` 中的大量开发工具配置。'
- en: Hatch includes a bundled an opinionated linter and code formatter in [Ruff](https://github.com/astral-sh/ruff),
    which lets us drop [`flake8`](https://flake8.pycqa.org/en/latest/) and [`isort`](https://pycqa.github.io/isort/)
    and their config files as development dependencies. The only default setting I
    changed was the line length, from 120 to Black’s default of 88\. I thought this
    pointless debate was [finally settled by Black](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#line-length)
    when it won the formatting war, but for some reason Hatch [overrides this setting
    to 120](https://github.com/pypa/hatch/discussions/1117), so I put it back where
    Black (and Ruff) default to.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: Hatch 包含一个捆绑的、有意见的代码检查工具和代码格式化器 [Ruff](https://github.com/astral-sh/ruff)，它让我们可以删除开发依赖项
    [`flake8`](https://flake8.pycqa.org/en/latest/) 和 [`isort`](https://pycqa.github.io/isort/)
    以及它们的配置文件。我唯一改变的默认设置是行长度，从 120 改为 Black 的默认值 88。我认为这场毫无意义的辩论 [最终被 Black 解决](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#line-length)，但由于某些原因，Hatch
    [覆盖了这个设置到 120](https://github.com/pypa/hatch/discussions/1117)，所以我将其恢复到 Black（和
    Ruff）的默认值。
- en: Hatch also includes built-in support for Python version matrix testing. It works
    super well (modulo, not on [Alpine](https://www.alpinelinux.org/) for [reasons](https://github.com/indygreg/python-build-standalone/issues/86))
    and lets us drop [`tox`](https://tox.wiki/en/4.14.1/) as a development dependency.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: Hatch还包含了Python版本矩阵测试的内置支持。它的表现非常好（但在[Alpine](https://www.alpinelinux.org/)上不行，原因见[此处](https://github.com/indygreg/python-build-standalone/issues/86)），并且让我们可以放弃[`tox`](https://tox.wiki/en/4.14.1/)作为开发依赖。
- en: '`pytest` instead of `unittest`[](#pytest-instead-of-unittest)'
  id: totrans-split-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`pytest`代替`unittest`[](#pytest-instead-of-unittest)'
- en: This is more of a no-brainer these days. `unittest` has been built into Python
    since forever, but these days everyone (in the OSS community anyway) seems to
    be converging on `pytest`. So I converted all the tests to `pytest`, which makes
    for slightly simpler-looking tests and prettier console output, yay.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如今这更像是一种无脑的选择。`unittest`从Python一开始就内置了，但如今每个人（至少在开源社区中是这样）似乎都在转向`pytest`。因此，我将所有测试转换为`pytest`，这使得测试看起来稍微简单些，而且控制台输出更漂亮，赞！
- en: Docs![](#docs)
  id: totrans-split-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档！[](#docs)
- en: Inspired by [this post](https://matklad.github.io//2021/02/06/ARCHITECTURE.md.html),
    I figured we should have an `ARCHITECTURE.md`, so [I wrote one](https://github.com/bpcreech/PyMiniRacer/blob/main/ARCHITECTURE.md)
    ([*or see it on the `mkdocs` site*](https://bpcreech.com/PyMiniRacer/architecture/)).
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 受[这篇文章](https://matklad.github.io//2021/02/06/ARCHITECTURE.md.html)的启发，我觉得我们应该有一个`ARCHITECTURE.md`，所以[我写了一个](https://github.com/bpcreech/PyMiniRacer/blob/main/ARCHITECTURE.md)（[*或者在`mkdocs`网站上查看*](https://bpcreech.com/PyMiniRacer/architecture/)）。
- en: I also sprinkled in a ton of comments. `PyMiniRacer`’s V8 build (see below)
    is full of workarounds, written as config tweaks, patches, and little extra steps.
    These workarounds do *not* help the forwards compatibility story, because each
    little tweak to the build process is a potential source of future breakage when
    the upstream V8 build process changes. Now, we at least have a paper trail of
    where those tweaks came from!
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我还添加了大量注释。`PyMiniRacer`的V8构建（见下文）充满了配置调整、补丁和一些额外步骤的解决方案。这些解决方案*并不*有助于向前兼容性，因为每个构建过程的小调整都可能成为未来当上游V8构建过程发生变化时的破坏源。现在，至少我们有一个记录这些调整来源的记录！
- en: Finally, and most dramatically from a cosmetic perspective, I migrated the `PyMiniRacer`
    docs from [Sphinx](https://www.sphinx-doc.org/en/master/) to [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)
    and created a docs build pipeline (AFAICT there wasn’t one!). Sphinx has been
    around and working forever, but the current ecosystem mindshare seems to be pouring
    into `mkdocs-material` lately.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，从外观上最为显著的变化，我将`PyMiniRacer`的文档从[Sphinx](https://www.sphinx-doc.org/en/master/)迁移到[Material
    for MkDocs](https://squidfunk.github.io/mkdocs-material/)，并创建了一个文档构建流水线（根据我所知，之前没有！）。Sphinx一直在那里并且一直在工作，但当前的生态系统关注度似乎最近都集中在`mkdocs-material`上。
- en: I am a little worried about maintainability since `mkdocs-material` is a complicated
    and load-bearing *plugin* for the `mkdocs`, and itself works best only when combined
    with [*other* plugins from `mkdocs-material`’s *own* plugin system](https://squidfunk.github.io/mkdocs-material/setup/extensions/).
    it’s a setup ripe for [this situation](https://xkcd.com/2347/). But, I went with
    peer pressure, and the new docs look great with very little configuration, because
    `mkdocs-material` is indeed fantastic. The new docs live [here](https://bpcreech.com/PyMiniRacer).
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我有点担心可维护性，因为`mkdocs-material`是`mkdocs`的一个复杂且承载重要功能的*插件*，而且只有当与[`mkdocs-material`自身的*其他*插件系统](https://squidfunk.github.io/mkdocs-material/setup/extensions/)结合使用时才能发挥最佳效果。这种设置容易导致[这种情况发生](https://xkcd.com/2347/)。但是，受同行的压力，我还是选择了它，新的文档配置非常简单，看起来很棒，因为`mkdocs-material`确实很出色。新的文档位于[这里](https://bpcreech.com/PyMiniRacer)。
- en: Actually building V8[](#actually-building-v8)
  id: totrans-split-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实际上在构建V8[](#actually-building-v8)
- en: Okay, the main work here is updating V8\. The last Sqreen version of `PyMiniRacer`,
    from 2021, used V8 8.9, and no longer builds. V8 is up to 12.2 today.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，主要工作在于更新V8\. 最后一个`PyMiniRacer`的Sqreen版本，从2021年开始使用的V8 8.9，现在已经无法构建。而现在V8版本已经更新到12.2了。
- en: General challenges in building V8[](#general-challenges-in-building-v8)
  id: totrans-split-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在构建V8方面的一般挑战[](#general-challenges-in-building-v8)
- en: There is no official binary distribution of the V8 library as a standalone unit.
    The only way to use V8 is to build it yourself. *Unless, perhaps, you use the
    whole NodeJS binary, which brings us back to [my last blog post](https://bpcreech.com/post/python-nodejs-eval/)—maybe,
    after all, the best way to use V8 is via a server running inside NodeJS?*
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: V8 库没有官方的独立二进制分发版本。使用 V8 的唯一方法是自行构建。*除非，也许，您使用整个 NodeJS 二进制文件，这让我们回到了[我的最新博客文章](https://bpcreech.com/post/python-nodejs-eval/)——也许，毕竟，使用
    V8 的最佳方式是通过在 NodeJS 内运行的服务器？*
- en: 'But building V8 is hard! Fun challenges in building V8:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但是构建 V8 很难！在构建 V8 中的有趣挑战：
- en: '**V8 is enormous and building it is slow:** V8 contains *or dynamically downloads*
    6.6 GB of *source*! (Okay, not all “source”, actually: this includes some vendored
    copies of operating system roots, like `/usr` from flavors of Debian.) There are
    about 2.4k build steps, which include building tons of code generated by [the
    Torque compiler](https://v8.dev/docs/torque). It takes over an hour to build from
    scratch on a [free GitHub Actions runner](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners)
    (currently, a 4-CPU machine for Linux, etc). To build for Linux `aarch64`, GitHub
    doesn’t provide any free hosted runners, so we run via [emulation](https://github.com/uraimo/run-on-arch-action),
    and it takes *several days*. This far exceeds [the maximum 6 hours provided by
    GitHub Actions](https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits),
    meaning builds fail due to the time limit. We can work around *that* limitation
    by using [`sccache`](https://github.com/mozilla/sccache) to cache and catch up
    on builds; after enough retries our GitHub Actions builds *do* eventually succeed.
    (And hopefully, one day, GitHub will provide free `aarch64` Linux runners!)'
  id: totrans-split-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**V8 是庞大的，构建过程缓慢：** V8 包含 *或者动态下载* 6.6 GB 的 *源代码*！（好吧，并非全部是“源代码”，实际上包括某些操作系统根目录的供应商副本，比如来自各种
    Debian 发行版的 `/usr`。）大约有 2.4k 个构建步骤，其中包括构建由 [Torque 编译器](https://v8.dev/docs/torque)
    生成的大量代码。在 [免费的 GitHub Actions 托管器](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners)
    上，从头构建需要超过一个小时（目前是一个适用于 Linux 等的 4-CPU 机器）。为了构建适用于 Linux `aarch64`，GitHub 没有提供免费的托管器，所以我们通过
    [模拟](https://github.com/uraimo/run-on-arch-action) 运行，并且需要 *数天* 的时间。这远远超过了 [GitHub
    Actions 提供的最长 6 小时的限制](https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits)，因此由于时间限制，构建会失败。我们可以通过使用
    [`sccache`](https://github.com/mozilla/sccache) 缓存并在足够多次重试后最终成功使我们的 GitHub Actions
    构建 *确实* 成功。（希望有一天，GitHub 会提供免费的 `aarch64` Linux 托管器！）'
- en: '**V8 wants to set up its own build ecosystem:** To [build V8](https://v8.dev/docs/build),
    you first [download another set of utilities](https://v8.dev/docs/source-code)
    called [`depot_tools`](https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up).
    `depot_tools` includes its very own binaries built for some but not all our target
    platforms, for things like Python, [Goma](https://chromium.googlesource.com/infra/goma/client/)
    (a build cache we’re not using), [Ninja](https://ninja-build.org/) (a build system
    we *do* use), [GN](https://github.com/o-lim/generate-ninja) (a meta-build system
    we also use), etc. The `depot_tools` `fetch` tool acts as a recursive dependency
    module grabber (like Git submodules, but fancy). Once we have all the source,
    V8 uses a series of Python scripts to wrap GN, which in turn wraps Ninja.'
  id: totrans-split-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**V8 想要建立自己的构建生态系统：** 要 [构建 V8](https://v8.dev/docs/build)，首先要 [下载另一组实用程序](https://v8.dev/docs/source-code)
    称为 [`depot_tools`](https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up)。`depot_tools`
    包括为一些但不是所有目标平台构建的自有二进制文件，用于诸如 Python、[Goma](https://chromium.googlesource.com/infra/goma/client/)（我们未使用的构建缓存）、[Ninja](https://ninja-build.org/)（我们
    *确实* 使用的构建系统）、[GN](https://github.com/o-lim/generate-ninja)（我们也使用的元构建系统）等。`depot_tools`
    的 `fetch` 工具充当递归依赖模块抓取器（类似 Git 子模块，但更复杂）。一旦我们获取了所有源代码，V8 使用一系列 Python 脚本包装 GN，而
    GN 又包装 Ninja。'
- en: '**That build ecosystem, and the build in general, doesn’t actually work *on*
    Alpine or Linux-on-Arm:** For `PyMiniRacer` we want to target at least `{ Windows,
    Mac, Linux [glibc], Linux [musl] } × { x86_64, aarch64 }` (`aarch64` [by popular
    demand](https://github.com/sqreen/PyMiniRacer/issues/154)). V8 doesn’t support
    building *on* Linux-on-arm64, although it does support *cross-compiling for* it.
    V8 doesn’t support `musl` (Alpine’s `libc`) in either on-host building *or* cross-compiling.
    So we need to do various fun config tweaks to make it actually work.'
  id: totrans-split-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建生态系统，以及总体上的构建，实际上不适用于 *Alpine 或者 Linux-on-Arm*：** 对于 `PyMiniRacer`，我们希望至少针对
    `{ Windows, Mac, Linux [glibc], Linux [musl] } × { x86_64, aarch64 }` 进行目标设置（`aarch64`
    是 [受欢迎的需求](https://github.com/sqreen/PyMiniRacer/issues/154)）。尽管 V8 不支持在 Linux-on-arm64
    上进行构建，但它支持用于 *交叉编译*。V8 不支持 `musl`（Alpine 的 `libc`），无论是在主机上构建 *还是* 交叉编译。因此，我们需要进行各种有趣的配置调整，以确保其实际可用性。'
- en: '**V8 and the build system change all the time:** V8 is under very heavy development
    at Google, for a variety of products (Chromium of course, but also ChromeOS, etc).
    The available and default config options change over time, meaning any intricate
    build setup we do in `PyMiniRacer` is likely to break in with newer V8 verions.
    So we want to *minimize* the amount of build configuration we do in `PyMiniRacer`,
    to future-proof it as best we can.'
  id: totrans-split-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**V8 和构建系统经常变化：** V8 在 Google 进行大规模开发，用于多种产品（当然包括 Chromium，还有 ChromeOS 等）。可用的和默认的配置选项会随时间变化，这意味着我们在
    `PyMiniRacer` 中进行的任何复杂构建设置可能会随着新的 V8 版本而破坏。因此，我们希望 *尽量减少* 在 `PyMiniRacer` 中的构建配置量，以尽可能未来证明其耐用性。'
- en: '**V8 needs a bleeding-edge LLVM (particularly, `clang`) and wants its own `libstdc++`:**
    V8 uses brand new features of `clang`, including an ML-driven optimization model.
    It comes with a build of the llvm toolchain, but only for supported platforms
    (thus excluding Alpine, and excluding building *on* Linux `aarch64`). We work
    around this by installing the latest LLVM from [the LLVM project](https://llvm.org/)
    where the binaries vendored into V8 itself don’t work. But even this version isn’t
    new enough for V8! We *still* have to tweak the build config to make it build
    even with the latest *stable* LLVM.'
  id: totrans-split-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**V8 需要一个尖端的 LLVM（特别是 `clang`），并且需要自己的 `libstdc++`：** V8 使用 `clang` 的全新功能，包括基于机器学习的优化模型。它附带了
    llvm 工具链的构建，但仅适用于支持的平台（因此不包括 Alpine，也不包括在 Linux `aarch64` 上进行构建）。我们通过安装来自 [LLVM
    项目](https://llvm.org/) 的最新版本来解决这个问题，其中 V8 自身供应的二进制文件不能正常工作。但即使是这个版本对于 V8 来说也不够新！我们
    *仍然* 必须调整构建配置，以确保即使是最新的 *稳定* LLVM 也能成功构建。'
- en: 'Meanwhile, we impose another challenge by sticking to the free GitHub Actions
    runners: unfortunately, GitHub Actions has no native `aarch64` hosted runners,
    and no native Alpine runners. We work around this using Umberto Raimondi’s fantastic
    [`run-on-arch-action`](https://github.com/uraimo/run-on-arch-action). This GitHub
    Action plug-in helps us build Docker containers for Linux distributions and architectures,
    and then build `PyMiniRacer` there.'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，我们通过使用免费的 GitHub Actions 运行器面临另一个挑战：不幸的是，GitHub Actions 没有原生的 `aarch64`
    托管运行器，也没有原生的 Alpine 运行器。我们通过使用 Umberto Raimondi 出色的 [`run-on-arch-action`](https://github.com/uraimo/run-on-arch-action)
    来解决这个问题。这个 GitHub Actions 插件帮助我们在 Linux 发行版和架构中构建 Docker 容器，然后在那里构建 `PyMiniRacer`。
- en: 'Aside from [all the V8 updates from v8.9 to v12.2](https://chromium.googlesource.com/v8/v8/+log/branch-heads/8.9..branch-heads/12.2/?n=1000),
    I plumbed in the following which had been disabled in prior `PyMiniRacer` builds:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 [从 v8.9 到 v12.2 的所有 V8 更新](https://chromium.googlesource.com/v8/v8/+log/branch-heads/8.9..branch-heads/12.2/?n=1000)，我还添加了以下内容，这些内容在之前的
    `PyMiniRacer` 构建中已被禁用：
- en: Both of these require pulling generated data files into the Python package,
    alongside the compiled DLL.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者都需要将生成的数据文件与编译后的 DLL 放入 Python 包中。
- en: Potential future work in simplifying the V8 build[](#potential-future-work-in-simplifying-the-v8-build)
  id: totrans-split-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 潜在的未来工作是简化 V8 构建[](#potential-future-work-in-simplifying-the-v8-build)
- en: 'The Ruby [`mini_racer` project](https://github.com/rubyjs/mini_racer) mentioned
    above actually split the V8 build out into a separate project, [`libv8-node`](https://github.com/rubyjs/libv8-node):
    “*A project for distributing the v8 runtime libraries and headers in both source
    and binary form, packaged as a language-independent zip and as a Ruby gem.*”.
    This project takes a different tack on the problem by reusing NodeJS’s opinionated
    vendored copy and build of V8 instead of trying to build V8 from [Google’s directions](https://v8.dev/docs/build).
    We *might* be able to simplify `PyMiniRacer` by rebasing it upon the `libv8-node`
    build of V8\. We’d need to ensure `libv8-node` is up-to-date and stable (it’s
    not totally clear to me that it is) and, because we’re dropping the V8 build entirely,
    move the compilation of [`PyMiniRacer`’s custom C++ code](https://github.com/bpcreech/PyMiniRacer/tree/main/src/v8_py_frontend)
    out of `GN`+`ninja` and into another to-be-determined build system.'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的 Ruby 项目 [`mini_racer`](https://github.com/rubyjs/mini_racer) 实际上将 V8 的构建拆分为一个独立的项目，[`libv8-node`](https://github.com/rubyjs/libv8-node)：“*一个项目，用于以源代码和二进制形式打包
    v8 运行时库和头文件，作为一种语言无关的 zip 和 Ruby gem 发布*”。该项目通过重用 NodeJS 的默认供应商副本和构建 V8 的方法来解决这个问题，而不是按照[谷歌的指导](https://v8.dev/docs/build)构建
    V8。我们*可能*可以通过将 `PyMiniRacer` 重新基于 `libv8-node` 的 V8 构建来简化。我们需要确保 `libv8-node`
    是最新且稳定的（我不完全清楚它是否是），并且由于我们完全放弃了 V8 的构建，将 [`PyMiniRacer` 的自定义 C++ 代码的编译](https://github.com/bpcreech/PyMiniRacer/tree/main/src/v8_py_frontend)从
    `GN`+`ninja` 转移到另一个待确定的构建系统中。
- en: Alternatively, it would be nice if V8 lived within a common C/C++ package system.
    The winning multi-platform C/C++ package system today seems to be [https://conan.io](https://conan.io).
    Making V8 work with Conan (well enough for official upload to [Conan Center](https://conan.io/center))
    would be tough because, along with [all the difficulties cited above](#general-challenges-in-building-v8),
    V8 loves to download its own dependencies in violation of Conan’s common-sense
    One-Definition Rule (ODR).
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果 V8 能够与通用的 C/C++ 包系统兼容，那将是一件好事。如今，跨平台的获胜者似乎是 [https://conan.io](https://conan.io)。使
    V8 与 Conan 兼容（足以正式上传到 [Conan Center](https://conan.io/center)）将会很困难，因为除了 [上述所有的困难](#general-challenges-in-building-v8)外，V8
    还喜欢下载自己的依赖项，这违反了 Conan 的常识性“一次定义原则”（ODR）。
- en: Other future work in `PyMiniRacer`[](#other-future-work-in-pyminiracer)
  id: totrans-split-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`PyMiniRacer` 中的其他未来工作[](#other-future-work-in-pyminiracer)'
- en: 'Future work may include:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的工作可能包括：
- en: Updates to new V8 releases which we can assume will appear unabated.
  id: totrans-split-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对新的 V8 版本的更新可以假定会不断出现。
- en: Support for [Python `asyncio`](https://docs.python.org/3/library/asyncio.html).
  id: totrans-split-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 [Python `asyncio`](https://docs.python.org/3/library/asyncio.html) 的支持。
- en: Other stuff from [the old GitHub issues](https://github.com/sqreen/PyMiniRacer/issues)
    list.
  id: totrans-split-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[旧 GitHub 问题列表](https://github.com/sqreen/PyMiniRacer/issues)的其他内容。
- en: Standard library stuff. `PyMiniRacer` has no `console.log` (and no `window`
    object for `console` to live on), no `setTimeout`, etc. Providing such functions
    would be handy, but also if we’re not careful may act as a breach of the security
    sandbox provided by `PyMiniRacer`, will move away from the minimal-interface rule
    we’re going for, and may trend toward “just being NodeJS” with its [rich standard
    library](https://nodejs.org/docs/latest-v12.x/api/). At this point, we’d be better
    off by embedding NodeJS, or just [running it as a sidecar](https://pypi.org/project/nodejs-eval/).
  id: totrans-split-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准库内容。`PyMiniRacer` 没有 `console.log`（也没有 `window` 对象可以存放 `console`），没有 `setTimeout`
    等。提供这些函数会很方便，但如果我们不小心可能会违反 `PyMiniRacer` 提供的安全沙箱，会偏离我们所追求的最小接口规则，并可能趋向于“只是成为 NodeJS”，其具有[丰富的标准库](https://nodejs.org/docs/latest-v12.x/api/)。此时，我们最好是嵌入
    NodeJS，或者仅[作为旁路运行](https://pypi.org/project/nodejs-eval/)。
- en: If you’re reading this and want to contribute, go for it! See [the contribution
    guide](https://bpcreech.com/PyMiniRacer/contributing/).
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在阅读此内容并希望做出贡献，请尽管去做！参见[贡献指南](https://bpcreech.com/PyMiniRacer/contributing/)。
