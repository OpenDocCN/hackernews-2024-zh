- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 13:21:50'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 13:21:50
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Write Dumb Code — Matthew Rocklin
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写蠢代码 —— Matthew Rocklin
- en: 来源：[https://matthewrocklin.com/write-dumb-code.html](https://matthewrocklin.com/write-dumb-code.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://matthewrocklin.com/write-dumb-code.html](https://matthewrocklin.com/write-dumb-code.html)
- en: Write Dumb Code
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写蠢代码
- en: '*The best way you can contribute to an open source project is to remove lines
    of code from it.* *We should endeavor to write code that a novice programmer can
    easily understand without explanation or that a maintainer can understand without
    significant time investment.*'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*对于开源项目，你能做出的最大贡献就是从中删除代码。* *我们应该努力编写能让初学者无需解释即可轻松理解的代码，或者能让维护者无需大量时间投入即可理解的代码。*'
- en: As students we attempt increasingly challenging problems with increasingly sophisticated
    technologies. We first learn loops, then functions, then classes, etc.. We are
    praised as we ascend this hierarchy, writing longer programs with more advanced
    technology. We learn that experienced programmers use monads while new programmers
    use for loops.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为学生，我们尝试越来越具有挑战性的问题，运用越来越复杂的技术。我们先学习循环，然后是函数，再然后是类，等等。我们在这个等级制度中不断进步时受到称赞，编写更长、更先进技术的程序。我们了解到，经验丰富的程序员使用单子（monads），而新手程序员使用for循环。
- en: Then we graduate and find a job or open source project to work on with others.
    We search for something that we can add, and implement a solution pridefully,
    using the all the tricks that we learned in school.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们毕业了，找到了一份工作或者加入了其他人一起开发的开源项目。我们寻找能够添加自己贡献的东西，并自豪地实现了一个解决方案，使用学校学到的所有技巧。
- en: '*Ah ha! I can extend this project to do X! And I can use inheritance here!
    Excellent!*'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*啊哈！我可以扩展这个项目来做X！而且我可以在这里使用继承！太棒了！*'
- en: We implement this feature and feel accomplished, and with good reason. Programming
    in real systems is no small accomplishment. This was certainly my experience.
    I was excited to write code and proud that I could show off all of the things
    that I knew how to do to the world. As evidence of my historical love of programming
    technology, here is a [linear algebra language](https://github.com/mrocklin/matrix-algebra)
    built with a another meta-programming language. Notice that no one has touched
    this code in several years.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了这个功能并感到自豪，这是有道理的。在真实系统中编程绝非小事。这确实是我的经历。我兴奋地写代码，自豪地展示我对世界知识技术的了解。作为我对编程技术的历史热爱的证据，这里是一个使用另一种元编程语言构建的[线性代数语言](https://github.com/mrocklin/matrix-algebra)。注意，这段代码已经多年没有人触及过。
- en: However after maintaining code a bit more I now think somewhat differently.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，经过更多地维护代码后，我现在有了些许不同的看法。
- en: We should not seek to build software. Software is the currency that we pay to
    solve problems, which is our actual goal. We should endeavor to build as little
    software as possible to solve our problems.
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不应该试图去构建软件。软件是我们为了解决问题而支付的代价，这才是我们真正的目标。我们应该尽可能少地构建软件来解决我们的问题。
- en: We should use technologies that are as simple as possible, so that as many people
    as possible can use and extend them without needing to understand our advanced
    techniques. We should use advanced techniques only when we are not smart enough
    to figure out how to use more common techniques.
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该尽可能使用简单的技术，这样尽可能多的人可以使用和扩展它们，而不需要理解我们的高级技术。只有在我们无法想出如何使用更常见的技术时，才应该使用高级技术。
- en: Neither of these points are novel. Most people I meet agree with them to some
    extent, but somehow we forget them when we go to contribute to a new project.
    The instinct to *contribute by building* and to *demonstrate sophistication* often
    take over.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这两点都不是新颖的观点。我遇到的大多数人在某种程度上都同意它们，但不知何故，当我们开始为新项目做贡献时，我们会忘记它们。贡献通过构建和展示复杂性的本能往往会占据上风。
- en: Software is a cost
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件是成本
- en: Every line that you write costs people time. It costs you time to write it of
    course, but you are willing to make this personal sacrifice. However this code
    also costs the reviewers their time to understand it. It costs future maintainers
    and developers their time as they fix and modify your code. They could be spending
    this time outside in the sunshine or with their family.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每行你写的代码都会耗费他人的时间。当然，写代码也会耗费你自己的时间，但你愿意做出这种个人牺牲。然而，这段代码也会耗费审阅者的时间去理解它。它还会耗费未来的维护者和开发者的时间，因为他们需要修复和修改你的代码。他们本可以用这些时间在户外享受阳光或者与家人在一起。
- en: So when you add code to a project you should feel meek. It should feel as though
    you are eating with your family and there isn’t enough food on the table. You
    should take only what you need and no more. The people with you will respect you
    for your efforts to restrict yourself. Solving problems with less code is a hard,
    but it is a burden that you take on yourself to lighten the burdens of others.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你向项目添加代码时，你应该感到谦逊。这种感觉就像你和家人一起吃饭，桌子上的食物不够。你应该只拿你所需的，而不是更多。与你在一起的人会尊重你为限制自己而做出的努力。用更少的代码解决问题是困难的，但这是你自己承担的负担，以减轻他人的负担。
- en: Complex technologies are harder to maintain
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复杂的技术更难维护
- en: As students, we demonstrate merit by using increasingly advanced technologies.
    Our measure of worth depends on our ability to use functions, then classes, then
    higher order functions, then monads, etc. in public projects. We show off our
    solutions to our peers and feel pride or shame according to our sophistication.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为学生，我们通过使用越来越先进的技术来展示自己的优点。我们的价值取决于我们在公共项目中使用函数、类、高阶函数、单子等的能力。我们向同行展示我们的解决方案，并根据我们的复杂性感到自豪或羞耻。
- en: However when working with a team to solve problems in the world the situation
    is reversed. Now we strive to solve problems with code that is as simple as possible.
    When we solve a problem simply we enable junior programmers to extend our solution
    to solve other problems. Simple code enables others and boosts our impact. We
    demonstrate our value by solving hard problems with only basic techniques.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在团队中解决世界问题时，情况正好相反。现在，我们努力用尽可能简单的代码解决问题。当我们简单解决问题时，我们使初级程序员能够扩展我们的解决方案以解决其他问题。简单的代码能够帮助他人，增加我们的影响力。我们通过用基本技术解决难题来展示我们的价值。
- en: '*Look! I replaced this recursive function with a for loop and it still does
    everything that we need it to. I know it’s not as clever, but I noticed that the
    interns were having trouble with it and I thought that this change might help.*'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*看！我用一个for循环替换了这个递归函数，而它仍然能做我们需要的一切。我知道这不够聪明，但我注意到实习生们在处理它时遇到了困难，我觉得这个改变可能会有所帮助。*'
- en: If you are a good programmer then you don’t need to demonstrate that you know
    cool tricks. Instead, you can demonstrate your value by solving a problem in a
    simple way that enables everyone on your team to contribute in the future.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个优秀的程序员，那么你不需要展示你知道多酷的技巧。相反，你可以通过以简单的方式解决问题来展示你的价值，这样每个团队成员都能在未来做出贡献。
- en: But moderation, of course
  id: totrans-split-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 但是，适度，当然
- en: That being said, over-adherence to the “build things with simple tools” dogma
    can be counter productive. Often a recursive solution can be much simpler than
    a for-loop solution and often times using a Class or a Monad is the right approach.
    But we should be mindful when using these technologies that we are building for
    ourselves our own system; a system with which others have had no experience.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，过度坚持“用简单工具构建事物”的教条主义可能会适得其反。通常，递归解决方案比for循环解决方案简单得多，而使用类或单子往往是正确的方法。但是当我们使用这些技术时，我们应该注意，我们正在为自己构建一个系统；一个他人没有经验的系统。
