- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 12:29:50'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 12:29:50
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Practical Railway-Oriented Pipelines in Ruby - Ismael Celis
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Ruby 中实际应用的铁路导向管道 - Ismael Celis
- en: 来源：[https://ismaelcelis.com/posts/practical-railway-oriented-pipelines-in-ruby/](https://ismaelcelis.com/posts/practical-railway-oriented-pipelines-in-ruby/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ismaelcelis.com/posts/practical-railway-oriented-pipelines-in-ruby/](https://ismaelcelis.com/posts/practical-railway-oriented-pipelines-in-ruby/)
- en: 'In this series:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个系列中：
- en: Some years ago I [explored patterns](/posts/composable-pipelines-in-ruby/) for
    building composable processing pipelines in Ruby, using a Railway-oriented paradigm.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，我曾经[探索过](/posts/composable-pipelines-in-ruby/)在 Ruby 中构建可组合处理管道的模式，使用了铁路导向的范式。
- en: In this series, I’ll describe a simplified implementation for practical use.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个系列中，我将描述一个简化的实现以供实际使用。
- en: '[PRE0]'
  id: totrans-split-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Part 1: The core pattern'
  id: totrans-split-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一部分：核心模式
- en: I’ve relied on versions of this approach in various projects for some time now,
    and I’ve found it to be a very effective way to build and maintain complex data
    processing workflows. The following are the core components of the pattern.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经在各种项目中使用这种方法的版本很长一段时间了，我发现这是构建和维护复杂数据处理工作流的非常有效的方法。以下是该模式的核心组件。
- en: The result class
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结果类
- en: 'A generic `Result` wraps values passed through the pipeline, and can be in
    one of two states: `Continue` or `Halt`. The values themselves can be anything
    relevant to the domain, but `Result` offers a consistent interface for handling
    them in the pipeline, as well as metadata such as user input, errors and arbitrary
    context (I’ll describe some of this in a separate article).'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个通用的 `Result` 封装了通过管道传递的值，并且可以处于两种状态之一：`Continue` 或 `Halt`。这些值本身可以是与域相关的任何内容，但
    `Result` 提供了处理它们的一致接口，以及诸如用户输入、错误和任意上下文的元数据（我将在另一篇文章中描述一些）。
- en: '[PRE1]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`Result` instances can be *continued* or *halted*. These return new copies
    with the same or different data.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`Result` 实例可以被 *继续* 或 *中止*。这些将返回具有相同或不同数据的新副本。'
- en: '[PRE2]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Step interface
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤接口
- en: '[PRE3]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A step is a simple object that responds to `#call` and takes a `Result` as input,
    returning a new `Result`.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个步骤是一个简单的对象，响应于 `#call` 并且接受一个 `Result` 作为输入，返回一个新的 `Result`。
- en: 'This is a step:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个步骤：
- en: '[PRE4]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And so is this:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 并且这也是一个：
- en: '[PRE5]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Steps can be instances, classes, Procs, Lambdas or [Method objects](https://ruby-doc.org/3.3.0/Method.html).
    They can be stateless procedures, or complex objects that manage their own internal
    state. It doesn’t matter how they were defined or initialised, as long as they
    respond to `#call`.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤可以是实例、类、Procs、Lambdas或[方法对象](https://ruby-doc.org/3.3.0/Method.html)。它们可以是无状态的过程，也可以是管理自己内部状态的复杂对象。无论它们如何定义或初始化，只要它们响应于
    `#call` 即可。
- en: The pipeline
  id: totrans-split-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道
- en: A pipeline is a container for a sequence of steps that process a `Result` and
    return a new `Result`, in the order they were added to the pipeline.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一个管道是一个包含一系列步骤的容器，这些步骤处理一个 `Result` 并返回一个新的 `Result`，按照它们添加到管道中的顺序执行。
- en: '[PRE6]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There’s very little to the `Pipeline` class itself.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pipeline` 类本身非常简单。'
- en: '[PRE7]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Because it responds to `#call(Result) Result`, a pipeline is itself a step.
    More on that later.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它响应于 `#call(Result) Result`，一个管道本身也是一个步骤。稍后详细介绍。
- en: The Railway bit
  id: totrans-split-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 铁路部分
- en: Where this becomes useful is in the ability to “halt” processing at any point
    in the pipeline.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这在于在管道的任何点上都能“中止”处理的能力是非常有用的。
- en: '[PRE8]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The key to this is the `Pipeline#call` method, expanded here for clarity:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 关键在于 `Pipeline#call` 方法，在这里进行了详细展开：
- en: '[PRE9]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, any step that returns a *halt* will just skip over further steps downstream.
    In other words, a step can return a *continue* or a *halt*, but it can only ever
    receive a *continue* as argument.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，任何返回 *中止* 的步骤都将跳过进一步的下游步骤。换句话说，步骤可以返回 *继续* 或 *中止*，但它只能接收 *继续* 作为参数。
- en: '[PRE10]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Other implementations of this pattern rely on Sum types or monads to represent
    the *continue* and *halt* states. See [Dry::Monads](https://dry-rb.org/gems/dry-monads/)
    for a more functional approach. I also expand on a typed implementation in [this
    article](/posts/composable-pipelines-in-ruby/).
  id: totrans-split-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此模式的其他实现依赖于 Sum 类型或单子（monads）来表示 *继续* 和 *中止* 状态。查看 [Dry::Monads](https://dry-rb.org/gems/dry-monads/)
    获取更功能化的方法。我还在[这篇文章](/posts/composable-pipelines-in-ruby/)中扩展了一个带类型的实现。
- en: 'Lets do some number crunching:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行一些数字计算：
- en: '[PRE11]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this example, the second `ValidateSetSize` step will halt the pipeline if
    the set size is greater than 100, preventing `MultiplyBy` from running.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，第二个 `ValidateSetSize` 步骤将在集合大小大于 100 时停止管道，阻止 `MultiplyBy` 的运行。
- en: '[PRE12]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 1\. `Logging`
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. `记录`
- en: '2\. `ValidateSetSize.new(lte: 100)`'
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '2\. `ValidateSetSize.new(lte: 100)`'
- en: 3\. `MultiplyBy.(2)`
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. `乘以.(2)`
- en: 4\. `LimitSet.(5)`
  id: totrans-split-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4\. `限制集合.(5)`
- en: However, if all steps return a *continue* result, the pipeline processes all
    steps and returns the final result.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果所有步骤都返回 *continue* 结果，管道会处理所有步骤并返回最终结果。
- en: '[PRE13]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 1\. `Logging`
  id: totrans-split-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. `Logging`
- en: '2\. `ValidateSetSize.new(lte: 100)`'
  id: totrans-split-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '2\. `ValidateSetSize.new(lte: 100)`'
- en: 3\. `MultiplyBy.(2)`
  id: totrans-split-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. `MultiplyBy.(2)`
- en: 4\. `LimitSet.(5)`
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4\. `LimitSet.(5)`
- en: Composing pipelines
  id: totrans-split-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合管道
- en: Since `Pipeline` itself implements the `#call(Result) Result` interface, it
    can be used as a step in another pipeline.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `Pipeline` 本身实现了 `#call(Result) Result` 接口，它可以作为另一个管道中的步骤使用。
- en: '[PRE14]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 1\. `Step1`
  id: totrans-split-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1\. `Step1`
- en: 2\. `NumberCruncher`
  id: totrans-split-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2\. `NumberCruncher`
- en: 2.1\. `Logging`
  id: totrans-split-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.1\. `Logging`
- en: '2.2\. `ValidateSetSize.new(lte: 100)`'
  id: totrans-split-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '2.2\. `ValidateSetSize.new(lte: 100)`'
- en: 2.3\. `MultiplyBy.(2)`
  id: totrans-split-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.3\. `MultiplyBy.(2)`
- en: 2.4\. `LimitSet.(5)`
  id: totrans-split-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2.4\. `LimitSet.(5)`
- en: 3\. `Step3`
  id: totrans-split-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3\. `Step3`
- en: This allows “packaging up” complex processing workflows into reusable components,
    where each component can be composed of multiple steps if need be. It’s also possible
    to have factory methods that parameterise the creation of pipelines.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许将复杂的处理工作流打包成可重复使用的组件，每个组件如果需要可以由多个步骤组成。还可以有工厂方法来参数化管道的创建。
- en: '[PRE15]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Pipelines can also be used internally by custom classes.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 管道也可以被自定义类内部使用。
- en: '[PRE16]'
  id: totrans-split-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Which approach to use will depend on each step’s internals. Other than the simple
    `#call` interface, steps are effective black boxes and refactoring them is straightforward.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用哪种方法取决于每个步骤的内部。除了简单的 `#call` 接口外，步骤都是有效的黑盒，重构它们很直接。
- en: Conclusion
  id: totrans-split-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Like anything, this approach has its trade-offs. If the problem can be better
    thought of as an object graph rather than a sequence, or the processing required
    can’t be easily broken down into steps, then this approach might not be the best
    fit.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何事物一样，这种方法有其权衡之处。如果问题更适合看作是对象图而不是序列，或者所需的处理不能轻松地分解成步骤，那么这种方法可能不是最佳选择。
- en: In general, I’ve found it provides a *simple* mental model to reason about problems
    (in [the Rick Hickey sense](https://www.youtube.com/watch?v=SxdOUGdseq4)).
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，我发现它提供了一个在问题推理中的 *简单* 模型（在 [Rick Hickey 的意义上](https://www.youtube.com/watch?v=SxdOUGdseq4)）。
- en: Any operation that can be coerced into complying with the [Monoid Laws](https://blog.ploeh.dk/2017/10/06/monoids/)
    can be a good candidate.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可以强制符合 [Monoid Laws](https://blog.ploeh.dk/2017/10/06/monoids/) 的操作都可能是一个不错的候选。
- en: In the next article in this series, I describe how to make pipelines more useful
    by handling user input, errors and general metadata.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个系列的下一篇文章中，我描述了如何通过处理用户输入、错误和一般元数据来使管道更加有用。
- en: The basic implementation used in this article is [here](https://gist.github.com/ismasan/0bdcc76c2ea48f4259b38fafe131edb8).
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中使用的基本实现在 [这里](https://gist.github.com/ismasan/0bdcc76c2ea48f4259b38fafe131edb8)。
