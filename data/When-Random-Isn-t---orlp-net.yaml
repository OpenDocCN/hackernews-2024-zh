- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:45:56'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:45:56'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: When Random Isn't | orlp.net
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机值不是 | orlp.net
- en: 来源：[https://orlp.net/blog/when-random-isnt/](https://orlp.net/blog/when-random-isnt/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://orlp.net/blog/when-random-isnt/](https://orlp.net/blog/when-random-isnt/)
- en: '2024-01-10'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '2024-01-10'
- en: This post is an anecdote from over a decade ago, of which I lost the actual
    code. So please forgive me if I do not accurately remember all the details. Some
    details are also simplified so that anyone that likes computer security can enjoy
    this article, not just those who have played World of Warcraft (although the [Venn
    diagram](https://en.wikipedia.org/wiki/Venn_diagram) of those two groups likely
    has a solid overlap).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章讲述了十多年前的一个趣事，对于其中真正的代码我已经遗失了。因此，请原谅我如果我没有准确记得所有的细节。有些细节也被简化了，以便喜欢计算机安全的每个人都可以享受这篇文章，而不仅仅是那些玩过《魔兽世界》的人（尽管这两个群体的[维恩图](https://en.wikipedia.org/wiki/Venn_diagram)可能有一个很大的重叠部分）。
- en: When I was around 14 years old I discovered [World of Warcraft](https://en.wikipedia.org/wiki/World_of_Warcraft)
    developed by Blizzard Games and was immediately hooked. Not long after I discovered
    add-ons which allow you to modify how your game’s user interface looks and works.
    However, not all add-ons I downloaded did exactly what I wanted to do. I wanted
    more. So I went to find out how they were made.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当我大约14岁时，我发现了由暴雪游戏开发的[《魔兽世界》](https://en.wikipedia.org/wiki/World_of_Warcraft)，并立刻着迷。不久之后，我发现了插件，可以修改游戏用户界面的外观和功能。然而，并非所有我下载的插件都能完全满足我的需求。我想要更多。所以我开始探究它们是如何制作的。
- en: 'In a weird twist of fate, I blame World of Warcraft for me seriously picking
    up programming. It turned out that they were made in the [Lua](https://www.lua.org/)
    programming language. Add-ons were nothing more than a couple `.lua` source files
    in a folder directly loaded into the game. The barrier of entry was incredibly
    low: just edit a file, press save and reload the interface. The fact that the
    game loaded *your* source code and you could see it running was magical!'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 转折怪事的是，我认为是《魔兽世界》让我系统地学习编程。结果证明，它们是用[Lua](https://www.lua.org/)编程语言制作的。插件仅仅是一些
    `.lua` 源文件，直接放在游戏的一个文件夹中进行加载。进入门槛非常低：只需编辑一个文件，保存并重新加载界面。游戏加载*你的*源代码并且你可以看到它运行，这仿佛是魔术一样！
- en: I enjoyed it immensely and in no time I was only writing add-ons and was barely
    playing the game itself anymore. I published [quite a few add-ons](https://www.wowinterface.com/downloads/author-207710.html)
    in the next two years, which mostly involved copying other people’s code with
    some refactoring / recombining / tweaking to my wishes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我极其喜欢它，不知不觉间我只是在编写插件，几乎不再玩游戏本身了。在接下来的两年里，我发布了[相当多的插件](https://www.wowinterface.com/downloads/author-207710.html)，其中大部分是复制其他人的代码并进行了一些重构/重组/调整以满足我的需求。
- en: A thought you might have is that it’s a really bad idea to let users have fully
    programmable add-ons in your game, lest you get bots. However, the system Blizzard
    made to prevent arbitrary programmable actions was quite clever. Naturally, it
    did nothing to prevent actual botting, but at least regular rule-abiding players
    were fundamentally restricted to the automation Blizzard allowed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为让玩家在游戏中拥有完全可编程的插件是一个非常糟糕的主意，免得你会遇到机器人。然而，暴雪为防止任意可编程行为所制定的系统相当巧妙。当然，它对于防止实际的机器人作用毫无帮助，但至少那些遵守规则的普通玩家在根本上是受到暴雪允许的自动化的限制的。
- en: Most UI elements that you could create were strictly decorative or informational.
    These were completely unrestricted, as were most APIs that strictly gather information.
    For example you can make a health bar display using two frames, a background and
    a foreground, sizing the foreground frame using an API call to get the health
    of your character.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数你可以创建的用户界面元素都是严格装饰性的或者信息性的。这些是完全无限制的，大多数 API 用于收集信息也是如此。例如，您可以使用两个框架制作一个血条显示，一个做背景，一个做前景，并使用
    API 调用来获取你的角色的生命值来调整前景框的大小。
- en: Not all API calls were available to you however. Some were protected so they
    could only be called from official Blizzard code. These typically involved the
    API calls that would move your character, cast spells, use items, etc. Generally
    speaking anything that actually makes you perform an in-game action was protected.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有的 API 调用都对你开放。有些是受保护的，因此只能从官方暴雪代码中调用。这些通常涉及 API 调用，比如移动你的角色、施法、使用物品等，总的来说，任何可以让你在游戏中做出实际动作的都是受保护的。
- en: However, some UI elements needed to actually interact with the game itself,
    e.g. if I want to make a button that casts a certain spell. For this you could
    construct a special kind of button that executes code in a secure environment
    when clicked. You were only allowed to create/destroy/move such buttons when not
    in combat, so you couldn’t simply conditionally place such buttons underneath
    your cursor to automate actions during combat.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一些用户界面元素确实需要与游戏本身进行交互，例如，如果我想要创建一个按钮来施放某个法术。为此，您可以构造一种特殊类型的按钮，当点击时在安全环境中执行代码。只有在非战斗状态下才允许创建/销毁/移动这样的按钮，因此您不能简单地在战斗期间有条件地将这些按钮放在鼠标指针下以自动执行操作。
- en: The catch was that this [secure environment](https://wowwiki-archive.fandom.com/wiki/RestrictedEnvironment)
    *did* allow you to programmatically set which spell to cast, but doesn’t let you
    gather the information you would need to do arbitrary automation. All access to
    state from outside the secure environment was blocked. There were some information
    gathering API calls available to match the more accessible in-game macro system,
    but nothing as fancy as getting skill cooldowns or unit health which would enable
    automatic optimal spellcasting.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 情况是这样的，这个[安全环境](https://wowwiki-archive.fandom.com/wiki/RestrictedEnvironment)确实允许您以编程方式设置要施放的法术，但不允许您收集进行任意自动化所需的信息。所有来自安全环境外部的状态访问都被阻止了。有一些信息收集的
    API 调用可用于匹配更易访问的游戏内宏系统，但没有像获取技能冷却时间或单位生命值那样的复杂功能，从而使自动施法变得更加优化。
- en: 'So there were two environments: an insecure one where you can get all information
    but can’t act on it, and a secure one where you can act but can’t get the information
    needed for automation.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以有两个环境：一个是不安全的环境，在这个环境中你可以获得所有的信息，但不能对其进行操作；另一个是安全的环境，在这个环境中你可以进行操作，但不能获取自动化所需的信息。
- en: Fast forward a couple years and I had mostly stopped playing. My interests had
    mainly moved on to more “serious” programming, and I was only occasionally playing,
    mostly messing around with add-on ideas. But this secure environment kept on nagging
    in my brain; I wanted to break it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 几年后，我基本上停止了游戏。我的兴趣主要转向了更“严肃”的编程，我只是偶尔玩一下，大多数时间都在玩一些插件的想法。但是这个安全环境一直在我的脑海中挥之不去；我想要打破它。
- en: Of course there was third-party software that completely disables the security
    restrictions from Blizzard, but what’s the fun in that? I wanted to do it “legitimately”,
    using the technically allowed tools, as a challenge.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有第三方软件完全可以彻底关闭暴雪公司的安全限制，但那有什么乐趣呢？我想要“合法地”使用技术上允许的工具来挑战。
- en: 'So I scanned the secure environment allowed function list to see if I could
    smuggle any information from the outside into the secure environment. It all seemed
    pretty hopeless until I saw one tiny, innocent little function: `random`.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我扫描了安全环境允许的功能列表，看看是否可以将外部的任何信息走私到安全环境中去。一切看起来都相当绝望，直到我看到一个微小的、无辜的函数：`random`。
- en: 'An evil idea came in my head: random number generators (RNGs) used in computers
    are almost always [pseudorandom number generators](https://en.wikipedia.org/wiki/Pseudorandom_number_generator)
    with (hidden) internal state. If I can manipulate this state, perhaps I can use
    that to pass information into the secure environment.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个邪恶的想法突然在我的脑海中闪现：计算机中使用的随机数生成器（RNGs）几乎总是带有（隐藏）内部状态的[伪随机数生成器](https://en.wikipedia.org/wiki/Pseudorandom_number_generator)。如果我能操纵这个状态，也许我就能利用它将信息传递到安全环境中去。
- en: 'It turned out that `random` was just a small shim around C’s [`rand`](https://en.cppreference.com/w/c/numeric/random/rand).
    I was excited! This meant that there was a single global random state that was
    shared in the process. It also helps that `rand` implementations tended to be
    on the weak side. Since World of Warcraft was compiled with MSVC, the actual implementation
    of `rand` was as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 结果发现 `random` 只是 C 的[`rand`](https://en.cppreference.com/w/c/numeric/random/rand)
    的一个小包装。我兴奋极了！这意味着有一个单一的全局随机状态在进程中共享。此外，`rand` 的实现倾向于比较薄弱。由于《魔兽世界》是使用 MSVC 编译的，`rand`
    的实际实现如下：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This RNG is, for the lack of a better word, shite. It is a naked [linear congruential
    generator](https://en.wikipedia.org/wiki/Linear_congruential_generator), and a
    weak one at that. Which in my case, was a good thing.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个随机数生成器（RNG）可以用另一个更好的词来形容，那就是糟糕。它是一个裸露的[线性同余生成器](https://en.wikipedia.org/wiki/Linear_congruential_generator)，而且是一个很弱的生成器。在我的情况下，这是一件好事。
- en: So let’s get to breaking this thing. Since the state is so laughably small and
    you can see 15 bits of the state directly you can keep a full list of all possible
    states consistent with a single output of the RNG and use further calls to the
    RNG to eliminate possibilities until a single one remains. But we can be significantly
    more clever.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来破解这个东西。因为状态是如此地微小，你可以直接看到状态的15位，你可以保持一个包含与RNG单个输出一致的所有可能状态的完整列表，并利用对RNG的进一步调用来消除可能性，直到仅剩下一个。但我们可以更聪明地做。
- en: First we note that the top bit of `state` never affects anything in this RNG.
    `(state >> 16) & 0x7fff` masks out 15 bits, after shifting away the bottom 16
    bits, and thus effectively works mod $2^{31}$. Since on any update the new state
    is a linear function of the previous state, we can propagate this modular form
    all the way down to the initial state as $$f(x) \equiv f(x \bmod m) \mod m$$ for
    any linear $f$.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们注意到 `state` 的最高位永远不会影响这个RNG中的任何东西。`(state >> 16) & 0x7fff` 掩盖掉15位，在移除底部16位后有效地对
    $2^{31}$ 取模。由于在任何更新中，新状态都是前一个状态的线性函数，我们可以将这种模形式一直传递到初始状态，即对于任何线性 $f$，都有 $$f(x)
    \equiv f(x \bmod m) \mod m$$
- en: 'Let $a = 214013$ and $b = 2531011$. We observe the 15-bit output $r_0, r_1$
    of two RNG calls. We’ll call the 16-bit portion of the RNG state that is hidden
    by the shift $h_0, h_1$ respectively, for the states after the first and second
    call. This means the state of the RNG after the first call is $2^{16} r_0 + h_0$
    and similarly for $2^{16} r_1 + h_1$ after the second call. Then we have the following
    identity:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让 $a = 214013$ 且 $b = 2531011$。我们观察两次RNG调用的15位输出 $r_0, r_1$。我们将分别称之为第一次和第二次调用后隐藏在移位中的16位RNG状态为
    $h_0, h_1$。这意味着第一次调用后RNG的状态是 $2^{16} r_0 + h_0$，第二次调用后类似地为 $2^{16} r_1 + h_1$。然后我们有以下等式：
- en: $$a\cdot (2^{16}r_0 + h_0) + b \equiv 2^{16}r_1 + h_1 \mod 2^{31},$$
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: $$a\cdot (2^{16}r_0 + h_0) + b \equiv 2^{16}r_1 + h_1 \mod 2^{31},$$
- en: $$ah_0 \equiv h_1 + 2^{16}(r_1 - ar_0) - b \mod 2^{31}.$$
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: $$ah_0 \equiv h_1 + 2^{16}(r_1 - ar_0) - b \mod 2^{31}.$$
- en: Now let $c \geq 0$ be the known constant $(2^{16}(r_1 - ar_0) - b) \bmod 2^{31}$,
    then for some integer $k$ we have
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让 $c \geq 0$ 为已知常数 $(2^{16}(r_1 - ar_0) - b) \bmod 2^{31}$, 然后对于一些整数 $k$ 我们有
- en: $$ah_0 = h_1 + c + 2^{31} k.$$
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: $$ah_0 = h_1 + c + 2^{31} k.$$
- en: 'Note that the left hand side ranges from $0$ to $a (2^{16} - 1) \approx 2^{33.71}$.
    Thus we must have $-1 \leq k \leq 2^{2.71} < 7$. Reordering we get the following
    expression for $h_0$: $$h_0 = \frac{c + 2^{31} k}{a} + h_1/a.$$ Since $a > 2^{16}$
    while $0 \leq h_1 < 2^{16}$ we note that the term $0 \leq h_1/a < 1$. Thus, assuming
    a solution exists, we must have $$h_0 = \left\lceil\frac{c + 2^{31} k}{a}\right\rceil.$$'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意左边范围为 $0$ 到 $a (2^{16} - 1) \approx 2^{33.71}$。因此我们必须有 $-1 \leq k \leq 2^{2.71}
    < 7$。重排得到 $h_0$ 的以下表达式：$$h_0 = \frac{c + 2^{31} k}{a} + h_1/a.$$ 由于 $a > 2^{16}$
    而 $0 \leq h_1 < 2^{16}$，我们注意到项 $0 \leq h_1/a < 1$。因此，假设存在解，我们必须有 $$h_0 = \left\lceil\frac{c
    + 2^{31} k}{a}\right\rceil.$$
- en: So for $-1 \leq k < 7$ we compute the above guess for the hidden portion of
    the RNG state after the first call. This gives us 8 guesses, after which we can
    reject bad guesses using follow-up calls to the RNG until a single unique answer
    remains.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所以对于 $-1 \leq k < 7$ 我们计算首次调用后RNG状态的隐含部分的上述猜测。这给我们8个猜测，之后我们可以使用对RNG的后续调用拒绝错误的猜测，直到仅剩下一个唯一的答案。
- en: 'An example implementation of this process in Python:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程在Python中的一个示例实现：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: While I did write the above process with a `while` loop, it appears to only
    ever need a third output at most to narrow it down to a single guess.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我使用了 `while` 循环编写了上述过程，但它似乎只需要最多三次输出就能缩小到一个猜测。
- en: 'Once we could reverse-engineer the internal state of the random number generator
    we could make arbitrary automated decisions in the supposedly secure environment.
    How it worked was as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们可以逆向工程随机数发生器的内部状态，我们就可以在被认为是安全的环境中做出任意自动决定。它的工作原理如下：
- en: An insecure hook was registered that would execute right before the secure environment
    code would run.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册了一个不安全的钩子，这个钩子会在安全环境代码运行之前执行。
- en: In this hook we have full access to information, and make a decision as to which
    action should be taken (e.g. casting a particular spell). This action is looked
    up in a hardcoded list to get an index.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个钩子中，我们可以完全访问信息，并决定应采取哪种行动（例如施放特定的咒语）。这个行动在硬编码列表中查找以获取索引。
- en: The current state of the RNG is reverse-engineered using the above process.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用上述过程逆向工程RNG的当前状态。
- en: We predict the outcome of the next RNG call. If this (modulo the length of our
    action list) does not give our desired outcome, we advance the RNG and try again.
    This repeats until the next random number would correspond to our desired action.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们预测下一个RNG调用的结果。如果这个结果（对我们动作列表的长度取模）不符合我们的期望结果，我们就推进RNG并重试。这个过程一直重复，直到下一个随机数对应我们期望的动作。
- en: The hook returns, and the secure environment starts. It generates a “random”
    number, indexes our hardcoded list of actions, and performs the “random” action.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 钩子回来了，并且安全环境开始运行。它生成一个“随机”数字，索引我们硬编码的动作列表，并执行“随机”动作。
- en: That’s all! By being able to simulate the RNG and looking one step ahead we
    could use it as our information channel by choosing exactly the right moment to
    call `random` in the secure environment. Now if you wanted to support a list of
    $n$ actions it would on average take $n$ steps of the RNG before the correct number
    came up to pass along, but that wasn’t a problem in practice.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！通过能够模拟随机数生成器（RNG）并向前看一步，我们可以将其用作信息通道，选择恰到好处的时刻在安全环境中调用`random`。现在，如果你想支持一个$n$个动作的列表，平均需要$n$步的RNG才能得到正确的数字来传递，但在实践中这并不是问题。
- en: I don’t know when Blizzard fixed the issue where the RNG state is so weak and
    shared, or whether they were aware of it being an issue at all. A few years after
    I had written the code I tried it again out of curiosity, and it had stopped working.
    Maybe they switched to a different algorithm, or had a properly separated RNG
    state for the secure environment.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道暴雪是什么时候修复了RNG状态如此脆弱且共享的问题，或者他们是否意识到这是一个问题。在我写下这段代码几年后，出于好奇，我再次尝试了一下，但它不再起作用了。也许他们换了一种不同的算法，或者为安全环境有了一个正确分离的RNG状态。
- en: All-in-all it was a lot of effort for a niche exploit in a video game that I
    didn’t even want to use. But there certainly was a magic to manipulating something
    supposedly random into doing exactly what you want, like a magician pulling four
    aces from a shuffled deck.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这对于一个我甚至不想使用的视频游戏中的一个小众漏洞来说是相当大的努力。但是，把一个据说是随机的东西操纵成完全符合你的意愿的事情确实有一种魔力，就像一个魔术师从洗过的牌堆中抽出四张A牌一样。
