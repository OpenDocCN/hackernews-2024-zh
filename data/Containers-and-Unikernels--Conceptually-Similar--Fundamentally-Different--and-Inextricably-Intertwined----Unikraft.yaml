- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 12:54:12'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 12:54:12'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Containers and Unikernels: Conceptually Similar, Fundamentally Different, and
    Inextricably Intertwined. — Unikraft'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Containers and Unikernels: 概念上相似，但根本上不同，紧密交织在一起。 — Unikraft'
- en: 来源：[https://unikraft.io/blog/containers-and-unikernels/](https://unikraft.io/blog/containers-and-unikernels/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://unikraft.io/blog/containers-and-unikernels/](https://unikraft.io/blog/containers-and-unikernels/)
- en: The paradox of approaching an article which compares and contrasts unikernels
    and containers, I think, is that at Unikraft, we’ve embraced containers as one
    of our own. We are of course a unikernel company, which sounds like it doesn’t
    make any sense. Why would a unikernel company, who develop tools to build and
    run lightweight VMs as an alternative to containers, advocate for the use of containers?
    Are you mad, this must be blasphemy!
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读比较unikernels和容器的文章时，我认为Unikraft，我们将容器视为我们的一部分。我们当然是unikernel公司，这似乎毫无意义。为什么一个开发工具来构建和运行轻量级VM作为容器替代品的unikernel公司会支持使用容器？这是疯狂的，这肯定是亵渎！
- en: It’s really just a case that the landscape for containers and unikernels has
    evolved considerably since the first musings of containers and unikernels were
    muttered together in the same sentence. In fact, ultimately, I think it’s no longer
    correct to say that they are two separate ideologies for approaching units of
    computation. This is because both “containers” and “unikernels” have been significantly
    developed over the last 5-10 years. These two terms pack so much more punch than
    they used to and there are very good characterizable properties of both technology
    areas which in fact work very well together. Let’s explore.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 容器和unikernel的景观自它们第一次被放在同一个句子里一起提及以来，已经发生了很大变化。事实上，我认为现在不再正确地说它们是两种不同的计算单元的意识形态。这是因为在过去的5-10年中，“容器”和“unikernel”都有了显著的发展。这两个术语现在比以前更加有实际意义，并且这两种技术领域有非常好的特性可以很好地结合在一起。让我们来探讨一下。
- en: From Chaos to Cargo Cult
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从混乱到物质崇拜
- en: 'Whether it was Docker itself or another tool in its shoes, the arrival of the
    container scene in the early 2010s stemmed from several challenges developers
    faced in the pre-container era:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是Docker本身还是它鞋子中的另一个工具，容器在2010年代初期的到来都源于开发人员在容器之前时期面临的几个挑战：
- en: '**Inconsistent Environments**: Applications often behaved differently depending
    on the underlying operating system and its configuration. This made development,
    testing, and deployment a frustrating process.'
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境不一致**：应用程序在不同的操作系统及其配置下表现不同，这使得开发、测试和部署过程变得令人沮丧。'
- en: '**Virtual Machines (VMs) Were Bulky**: VMs, the dominant technology for application
    isolation at the time, were resource-intensive and slow to boot. This hampered
    development workflows and deployment agility.'
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟机（VMs）笨重**：当时主流的应用程序隔离技术VMs，资源密集且启动缓慢。这阻碍了开发工作流程和部署的灵活性。'
- en: '**Dependency Management Headaches**: Managing application dependencies across
    different environments was a complex and error-prone task. Developers needed a
    way to ensure their applications had everything they needed to run correctly.'
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖管理的头痛**：在不同环境中管理应用程序依赖关系是一个复杂且容易出错的任务。开发人员需要一种方法来确保他们的应用程序能够正确运行所需的一切。'
- en: 'Docker’s journey began in 2008, where, in fact, it was not alone in tackling
    these problems. At the time, it was already piggy-backing on much existing ground-work
    of base technologies, including: of course everybody’s favorite `chroot`, the
    lesser-known [Capsicum](https://www.usenix.org/legacy/event/sec10/tech/full_papers/Watson.pdf),
    and the rise of LXC (Linux Containers), to name a few. LXC provided a way to isolate
    processes on a Linux system and was one of the first major steps towards the container-based
    solutions we have today, but it lacked a user-friendly ecosystem and was, per
    its name, Linux-only.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: Docker的旅程始于2008年，事实上，在解决这些问题时它并不孤单。当时，它已经依赖于许多现有的基础技术，包括：当然，大家最喜欢的`chroot`，较少人知的[Capsicum](https://www.usenix.org/legacy/event/sec10/tech/full_papers/Watson.pdf)，以及LXC（Linux
    Containers）的兴起，等等。LXC提供了在Linux系统上隔离进程的方法，并且是迈向今天基于容器的解决方案的第一步之一，但它缺乏一个用户友好的生态系统，并且，正如其名称所示，仅限于Linux。
- en: Enter Docker in 2013.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 2013年Docker登场。
- en: 'Built on top of LXC, Docker introduced a complete container management system
    and, arguably, one of the most important contributions: *the container image*.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 基于LXC构建，Docker引入了一个完整的容器管理系统，可以说也是最重要的贡献之一：*容器镜像*。
- en: '`FROM` Blob with Love'
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`FROM` 爱意满满'
- en: 'Ultimately, Docker’s initial mission was to enable consistency across an increasingly
    heterogeneous landscape of execution environments — to be gone with the ways of
    “it works on my machine” — and to make approaching this more straightforward than
    how it existed at the time. Appropriately, Docker is praised for its tooling and
    we and many others embrace this mantra in our own projects: to make a hard problem
    easier to tackle with tooling, and especially tooling that is straight forward
    to use, well documented and stable. Such is the echoes of UNIX philosophy.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，Docker的最初使命是在日益多样化的执行环境中实现一致性，摒弃“在我的机器上可以运行”的方式，并使处理这个问题比当时更加简单直接。因此，Docker因其工具化而受到赞扬，我们和许多其他人在我们自己的项目中也秉持这一信条：通过工具化使复杂问题更易解决，尤其是那些文档充分、稳定且易用的工具。这正是UNIX哲学的回响。
- en: 'Beyond its immediate CLI, moreover, there were three key innovations which
    were significantly developed by Docker and then by many others in the container
    community since which we embrace here at Unikraft: the definition, storage and
    transportation of file collections:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，除了其即时的命令行界面之外，还有三个关键的创新，这些创新在容器社区中由Docker以及许多其他人显著发展，我们在Unikraft中也采用了这些创新：文件集合的定义、存储和传输：
- en: The `Dockerfile` is a remarkably simple and extremely elegant approach to addressing
    the inconsistent environments problem. By using a forcefully basic syntax and
    to allow for cross-referencing between existing filesystems (`FROM` and `COPY`/`ADD`),
    the blueprint for defining a filesystem became, not only easy, but extensible.
  id: totrans-split-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Dockerfile`是解决不一致环境问题的一个非常简单且极其优雅的方法。通过使用强制的基本语法，并允许在现有文件系统之间进行交叉引用（`FROM`和`COPY`/`ADD`），定义文件系统的蓝图变得不仅容易，而且是可扩展的。'
- en: (and 3.) By introducing rich metadata for the resulting filesystem itself, “the
    image” (a collection of JSON files describing things, including other files or
    blobs), as well as each transaction of change (overlay) to the filesystem, “the
    layers”; the overall composition of the resulting filesystem became inherently
    more practical. It enabled interesting distribution and caching mechanisms as
    well as more informed look ups.
  id: totrans-split-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过为结果文件系统本身引入丰富的元数据，“镜像”（描述诸如其他文件或块等内容的一系列JSON文件）以及对文件系统每次变更（覆盖）的每个事务，“层”，最终文件系统的整体构成变得更加实用。这使得引入了有趣的分发和缓存机制，以及更为知情的查找。
- en: 'Whilst unikernels were born out of the security domain and containers out of
    reproducibility (achieved through isolation), today, containers and unikernels
    still share a core principle: software encapsulation. Both create isolated environments
    for applications. Containers achieve this by sharing the host kernel but isolating
    the application’s processes, libraries, and files. Unikernels, on the other hand,
    go a step further. They bundle the application code with a minimal pre-configured
    kernel, eliminating the need for a full host kernel altogether. Unikernels benefit
    then from a stronger protection domain (hardware), and can eliminate internal
    guard/permission-check functions, which increases overall application performance.'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然unikernels源于安全领域，而容器则源于可重现性（通过隔离实现），但如今，容器和unikernels仍然共享一个核心原则：软件封装。两者都为应用程序创建了隔离的环境。容器通过共享主机内核但隔离应用程序的进程、库和文件来实现。而unikernels则更进一步。它们将应用程序代码与最小化预配置的内核捆绑在一起，完全消除了对完整主机内核的需求。因此，unikernels从更强的保护域（硬件）中受益，并且可以消除内部的保护/权限检查功能，从而提高整体应用程序的性能。
- en: Thanks to the introduction of the [Open-Container Initiative’s image specification
    (OCI image spec)](https://github.com/opencontainers/image-spec) format, defining
    and distributing filesystems has become effortless. (In fact, the OCI image and
    [distribution spec](https://github.com/opencontainers/distribution-spec) have
    enabled a lot more than just storing and transporting applications and their filesystems!).
    First with DockerHub and now with open-source CNCF projects like Harbor and products
    like GHCR and Artifact Registry, the OCI format is has become ubiquitous in this
    industry for the distribution of applications.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于引入了[Open-Container Initiative’s image specification (OCI image spec)](https://github.com/opencontainers/image-spec)格式，定义和分发文件系统变得轻而易举。（实际上，OCI镜像和[distribution
    spec](https://github.com/opencontainers/distribution-spec)不仅仅使存储和传输应用程序及其文件系统变得更加容易！首先是通过DockerHub，现在是通过开源CNCF项目如Harbor和产品如GHCR和Artifact
    Registry，OCI格式已经成为该行业中分发应用程序的普遍标准。）
- en: Unboxing Interoperability
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解开互操作性之谜
- en: 'With such standardization, it makes little sense to develop and use a new format
    which ultimately is aimed at serving the same purpose: the definition, storage
    and transportation of files representing an application. At Unikraft, we have
    embraced the OCI image specification format for this very purpose: to both enable
    distributing unikernels, as well as help define them.'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种标准化背景下，开发和使用一个新格式最终旨在服务相同目的是毫无意义的：定义、存储和传输代表应用程序的文件。在Unikraft，我们正是出于这个目的，拥抱了OCI镜像规范格式：既能够分发unikernels，也能帮助定义它们。
- en: 'To understand how we use the OCI image format, we should first consider how
    unikernel images can be constructed. This can be in fact done in one of two ways:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解我们如何使用OCI镜像格式，我们首先应考虑unikernel镜像可以通过两种方式构建。实际上可以通过两种方式完成：
- en: By natively compiling your application against a library operating system which
    ultimately yields a single binary image which is capable of booting and executing
    on its own; or,
  id: totrans-split-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将应用程序原生编译为一个库操作系统，最终生成一个能够独立引导和执行的单一二进制镜像；或者，
- en: Reading pre-compiled [ELF binary files](https://en.wikipedia.org/wiki/Executable_and_Linkable_Format)
    as part of a filesystem and executing these a-top of a unikernel.
  id: totrans-split-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为文件系统的一部分读取预编译的[ELF二进制文件](https://en.wikipedia.org/wiki/Executable_and_Linkable_Format)并在unikernel之上执行它们。
- en: Unikraft supports both approaches and more-generally uses the second as it is
    this which allows for interoperability with the OCI image specification. By flattening
    the resulting filesystem into a single tree and extracting the `ENTRYPOINT` program
    and executing it top of [a unikernel which supports reading and executing application
    binaries](https://github.com/unikraft/app-elfloader), Unikraft unikernels simply
    extend the specification by providing an additional file representing the unikernel.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: Unikraft支持这两种方法，并更普遍地使用第二种方法，因为它允许与OCI镜像规范实现互操作性。通过将生成的文件系统展平为单一树，并提取`ENTRYPOINT`程序并在顶部执行它，Unikraft
    Unikernels简单地扩展了规范，提供了表示unikernel的附加文件。
- en: 'To this end, it’s possible to build and use the resulting files from a `Dockerfile`
    as part of a unikernel build by supplying it as part of the `rootfs` element in
    a `Kraftfile` and in your repository:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，可以通过在`Kraftfile`的`rootfs`元素中提供`Dockerfile`生成的结果文件，并在您的仓库中使用它来构建unikernel：
- en: '[PRE0]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: ([*See more examples here*](https://github.com/kraftcloud/examples).)
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: （[*更多示例请参见此处*](https://github.com/kraftcloud/examples).)
- en: Container (Images) and Unikernels, Together
  id: totrans-split-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器（镜像）与Unikernels一起
- en: When it comes to using these two technologies, our focus at Unikraft has been
    to make interoperability a two-way street. To leverage existing infrastructure
    as much as possible in order to make unikernels approachable.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用这两种技术时，Unikraft的重点是使互操作性成为双向街。尽可能利用现有基础设施，以使unikernels更易接近。
- en: Of course, we didn’t stop at only reading images. The OCI image spec allows
    for the declaration of artifacts in a hierarchical fashion. The top-most element
    is an “index” which contains a list of “manifests”. Each manifest represents an
    “image” which consists of the application filesystem… and unikernel!
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们并未止步于仅读取镜像。OCI镜像规范允许以层级方式声明工件。最顶层的元素是一个“索引”，其中包含一个“清单”列表。每个清单表示一个“镜像”，其中包括应用文件系统……和unikernel！
- en: Thanks to the “index”, it is possible to pack applications of varying properties
    together. This is more commonly used to differentiate between different hardware
    architectures for traditional OCI container images. However, because Unikraft
    can target both different architectures as well as different virtual machine monitors
    (VMMs) and hypervisors, we enthusiastically adopted this ability in the OCI image
    spec and allowed for packaging unikernels into this format.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于“index”，可以将具有不同特性的应用程序打包在一起。这在传统OCI容器镜像中用于区分不同的硬件架构更为常见。然而，由于Unikraft可以针对不同的架构以及不同的虚拟机监视器（VMMs）和hypervisors，我们欢迎地在OCI镜像规范中采用了这种能力，并允许将unikernels打包到这种格式中。
- en: 'To demonstrate this, using the [open-source command-line client for Unikraft
    and KraftCloud, `kraft`](https://github.com/unikraft/kraftkit), you can see all
    the variances of a single image by platform:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明这一点，可以使用[Unikraft和KraftCloud的开源命令行客户端，`kraft`](https://github.com/unikraft/kraftkit)，您可以查看同一图像在不同平台上的所有变体：
- en: '[PRE1]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: (*These “Hello, world!” images are part of our [open-source community catalog](http://github.com/unikraft/catalog).*)
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: （*这些“Hello, world!”图像是我们的[开源社区目录](http://github.com/unikraft/catalog)的一部分。）
- en: By adopting the OCI format, the technologies developed by Unikraft can be appropriately
    distributed and selected based on architecture, supported VMMs and hypervisors,
    as well as kernel-specific feature selection. This is because we also embedded
    KConfig options as part of the [`os.features`](https://github.com/opencontainers/image-spec/blob/main/config.md#properties)
    list.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用OCI格式，Unikraft开发的技术可以根据架构、支持的VMM和hypervisor，以及特定内核功能的选择进行适当分发和选择。这是因为我们也将KConfig选项嵌入到[`os.features`](https://github.com/opencontainers/image-spec/blob/main/config.md#properties)列表中。
- en: The best part of this? Being able to use your existing infrastructure seamlessly.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这最棒的部分？能够无缝使用您现有的基础设施。
- en: Containers Were Just The Beginning
  id: totrans-split-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器只是开始
- en: At Unikraft, we’ve built KraftCloud, a new generation of cloud platform based
    on millisecond semantics and we make it possible to use existing container images
    without the overhead of actually running containers on Linux. Thanks to the performance
    and security of Unikraft’s technologies, the next stage of the container revolution
    is already here.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unikraft，我们建立了KraftCloud，这是一种基于毫秒级语义的新一代云平台，我们使得可以在Linux上实际运行容器的开销的情况下使用现有容器镜像成为可能。由于Unikraft技术的性能和安全性，容器革命的下一阶段已经到来。
- en: See how KraftCloud supports a wide range of programming languages, frameworks
    and applications based on `Dockerfile`s in our platform’s [application guides](https://docs.kraft.cloud/guides/)
    or in [the examples repository](https://github.com/kraftcloud/examples).
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 了解KraftCloud如何支持各种基于`Dockerfile`的编程语言，框架和应用程序，可以查看我们平台的[应用指南](https://docs.kraft.cloud/guides/)或[示例存储库](https://github.com/kraftcloud/examples)。
- en: We’re constantly improving this and are interested to learn how you work and
    the problems you’re solving. Please get in touch to let us know if you don’t see
    your favorite app, framework, language or usecase and we’ll take a look at adding
    it.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不断改进这一点，并且有兴趣了解您的工作方式以及您正在解决的问题。如果您没有看到您喜欢的应用程序，框架，语言或用例，请与我们联系，我们会考虑添加它。
