- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 13:36:42'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:36:42
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: What if null was an Object in Java? | Medium
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果在Java中null是一个对象会怎样？ | Medium
- en: 来源：[https://donraab.medium.com/what-if-null-was-an-object-in-java-3f1974954be2](https://donraab.medium.com/what-if-null-was-an-object-in-java-3f1974954be2)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://donraab.medium.com/what-if-null-was-an-object-in-java-3f1974954be2](https://donraab.medium.com/what-if-null-was-an-object-in-java-3f1974954be2)
- en: What if null was an Object in Java?
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果在Java中null是一个对象？
- en: Brace yourself and get ready to try the red pill.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请做好准备，准备尝试红色药丸。
- en: Photo by [Brett Jordan](https://unsplash.com/@brett_jordan?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Brett Jordan](https://unsplash.com/@brett_jordan?utm_source=medium&utm_medium=referral)
    拍摄于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Object-oriented purity
  id: totrans-split-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象的纯度
- en: Smalltalk is often referred to as a pure object-oriented programming language.
    Smalltalk was created by Alan Kay, who was also the person who coined the term
    “object-oriented." Part of the pure object-oriented nature of Smalltalk is that
    “everything is an object” in Smalltalk. Because everything is an object, you accomplish
    programming tasks by sending messages to objects.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: Smalltalk通常被称为一种纯粹的面向对象编程语言。Smalltalk由Alan Kay创建，他也是“面向对象”这个术语的创造者。Smalltalk的纯面向对象的部分是指在Smalltalk中，“一切皆为对象”。因为一切都是对象，你通过向对象发送消息来完成编程任务。
- en: Java is also object-oriented, but is not a pure object-oriented programming
    language. Java has things in it that are not objects (e.g. primitives), that require
    special mechanisms for handling them. Java also has a special case for handling
    `null`.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: Java也是面向对象的，但不是纯粹的面向对象编程语言。Java中有一些不是对象的东西（例如基本类型），需要特殊机制来处理它们。Java还有一个专门处理`null`的特殊情况。
- en: In this blog, I will demonstrate and explain how Java and Smalltalk deal with
    *absent* values, referred to as `null` in Java, and `nil` in Smalltalk. This blog
    will not provide a full explanation of Java or Smalltalk syntax. There are resources
    available on the internet for both if you want to learn more. The blog will only
    cover what is necessary to explain the code examples I share. I will do my best
    to explain the examples in detail so that syntax is not a barrier to understanding.
    This blog is intended to make you ponder larger possibilities, not struggle with
    minutiae of language syntax.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客中，我将演示和解释Java和Smalltalk中处理*缺失*值的方式，Java中称为`null`，Smalltalk中称为`nil`。本博客不会提供Java或Smalltalk语法的全面解释。如果你想了解更多，可以在互联网上找到相关资源。本博客仅涵盖解释我分享的代码示例所需的内容。我将尽力详细解释示例，以便语法不成为理解的障碍。本博客旨在让您思考更广阔的可能性，而不是与语言语法的琐碎斗争。
- en: In the sections that follow, I will compare solutions to the same simple problems
    using both Java and Smalltalk. I will be using Java 21 with IntelliJ IDEA CE 2023.3.2
    for the Java code examples. I will be using [Pharo Smalltalk](https://pharo.org/)
    11.0 for the Smalltalk code examples.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我将比较使用Java和Smalltalk解决同样简单问题的方法。我将使用Java 21和IntelliJ IDEA CE 2023.3.2进行Java代码示例。我将使用
    [Pharo Smalltalk](https://pharo.org/) 11.0 进行Smalltalk代码示例。
- en: Null vs. Nil
  id: totrans-split-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Null vs. Nil
- en: The literal null in Java
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java中的字面量null
- en: In Java, there is a literal named `null`. You can assign `null` to any variable
    that has an `Object` type, but the reference the variable points to is not an
    instance of an `Object`. I like to think of `null` as an instance of the Spoon
    in the movie, “The Matrix”. There is no Spoon.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，有一个叫做`null`的字面量。你可以将`null`赋给任何具有`Object`类型的变量，但是变量指向的引用不是`Object`的实例。我喜欢将`null`比作电影《黑客帝国》中的勺子的实例。那里没有勺子。
- en: The following test code illustrates some of the properties of `null` in Java.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下测试代码展示了Java中`null`的一些属性。
- en: '[PRE0]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this test, I assert that `null` is not an instance of `Object`. I initialize
    a final variable of type `Set<?>` named `set` to `null`, and further `assert`
    that `set` , which is `null`, is not an instance of `Set`. I `assert` that when
    I call `getClass()` or `toString()` on `set`, which is still `null`, a `NullPointerException`
    is thrown. This happens because `null` is not an `Object`. Note, I made the first
    declaration of the `set` variable `final` here, in order to reference the variable
    `set` in the two lambdas in the first section where I `assert` that `NullPointerException`
    is thrown. I could have left it as “effectively final” by not trying to reset
    the value, but thought I would just go with having it be explicitly final.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，我断言`null`不是`Object`的实例。我初始化了一个名为`set`且类型为`Set<?>`的最终变量为`null`，并进一步`assert`，即`set`（即`null`）不是`Set`的实例。我`assert`，当我在`set`上调用`getClass()`或`toString()`时（它仍然是`null`），会抛出`NullPointerException`。这是因为`null`不是`Object`。注意，我在这里将`set`变量的第一个声明设置为`final`，以便在第一部分的两个lambda中引用该变量，并且我`assert`，`NullPointerException`会被抛出。如果我不尝试重新设置值，我本可以将其留作“有效最终值”，但我觉得这样做更明确。
- en: In the second section, I create a mutable `Set` and store it in a variable named
    `set2`. I add `null` to the `set`. `Set.of()` will not accept null values, so
    I had to convert the immutable `Set` to a `HashSet`, which does accept `null`
    values. I add `null` manually to `set2`. I assert that `set2` is not `null`, that
    its class is not `null`, and that `set2` is in fact an instance of a `Set` as
    the compiler says it is.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二部分中，我创建了一个可变的`Set`并将其存储在名为`set2`的变量中。我向`set`添加了`null`。`Set.of()`不会接受空值，因此我不得不将不可变的`Set`转换为`HashSet`，它可以接受`null`值。我手动将`null`添加到`set2`中。我断言`set2`不是`null`，它的类不是`null`，并且`set2`确实是`Set`的一个实例，正如编译器所说的那样。
- en: Finally, I `filter` the instances contained in `set2` into a new `set3` as long
    as they respond true to the method reference `Objects::nonNull`, which references
    a static method on `Objects` that returns a `Predicate` that checks that `object
    != null`. Once again, since `null` is not an object, you cannot call any methods
    on it that could be used to construct a valid method reference as a `Predicate`.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我使用`filter`方法过滤`set2`中的实例，只要它们对`Objects::nonNull`方法引用返回true即可。该方法引用了`Objects`上的静态方法，返回一个`Predicate`，检查`object
    != null`。再次强调，由于`null`不是对象，因此无法调用任何方法来构造有效的方法引用作为`Predicate`。
- en: This is the `null` in Java that we are all used to. It is not an `Object`. We’ve
    all learned to deal with `null` when coding in Java. Former Smalltalkers will
    know there is a different way.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们在Java中所熟悉的`null`。它不是`Object`。我们在编写Java代码时都学会了如何处理`null`。以前用过Smalltalk的人会知道还有一种不同的方式。
- en: The literal nil in Smalltalk
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Smalltalk中的字面`nil`
- en: In Smalltalk, there is a singleton object instance named `nil`. The literal
    `nil`, is an instance of the class `UndefinedObject`. `UndefinedObject` is a subclass
    of `Object`. The `Object` class is a subclass of… `nil`. This circular definition
    has melted many programmers brains, including mine. Somehow, this all just works.
    It is one of the magical aspects of Smalltalk. There’s a turtle at the top, sitting
    on top of another turtle, and it’s just turtles all the way down.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Smalltalk中，有一个名为`nil`的单例对象实例。字面`nil`是`UndefinedObject`类的一个实例。`UndefinedObject`是`Object`的子类。`Object`类是`nil`的一个子类……这种循环定义使许多程序员的大脑瘫痪，包括我自己的。不知何故，这一切都能正常工作。这是Smalltalk的神奇之处之一。顶部有一只乌龟，坐在另一只乌龟上，这只乌龟一直在下面。
- en: The following test code passes using [Pharo Smalltalk](https://pharo.org/) 11.0.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下测试代码通过了[Pharo Smalltalk](https://pharo.org/) 11.0。
- en: '[PRE1]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Above is what a method definition looks like in Smalltalk. I wrote a unit test
    method named `testNilIsAnObject`. I define two temporary variables named `set`
    and `setNoNils` by declaring them between the two vertical pipes after the method
    name like this `|set setNoNils|`. In the first section of code I assert a few
    things about `nil`, in order to demonstrate it is in fact an instance of an `Object`.
    The literal `self` is the equivalent of `this` in Java, and refers to the instance
    of the class that `testNilIsAnObject` is defined on, which has methods it inherits
    named `assert:`, `deny:`, and `assert:equals:`. I `assert` that `nil` can respond
    to messages like any other object in Smalltalk. I `assert` that `nil` responds
    `true` to `isNil`. I also assert that calling `printString` on `nil` results in
    the `String` `‘nil’` being returned.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上面是在Smalltalk中方法定义的样子。我写了一个名为`testNilIsAnObject`的单元测试方法。我通过在方法名后面的两个竖线之间声明来定义了两个临时变量`set`和`setNoNils`，就像这样`|set
    setNoNils|`。在第一段代码中，我断言了关于`nil`的一些事实，以证明它实际上是`Object`的一个实例。字面量`self`在Smalltalk中等同于Java中的`this`，指的是`testNilIsAnObject`所定义的类的实例，该实例继承了名为`assert:`、`deny:`和`assert:equals:`的方法。我断言`nil`可以像Smalltalk中的任何其他对象一样响应消息。我断言`nil`对`isNil`的响应为`true`。我还断言，在`nil`上调用`printString`会返回`String`
    `'nil'`。
- en: The `:=` operator is used for variable assignment in Smalltalk. I assign the
    instance referenced by the literal `nil` to the variable named `set`. I assert
    that `set` responds `true` when sent the message `isNil`. I assert that the object
    reference contained in the `set` variable is an instance of `UndefinedObject`.
    I assert that calling the `ifNil:` message on set returns `true`. The code `[
    true ]` is a zero argument block or lambda. In Java, the equivalent would be the
    a lambda typed as a `Supplier`. Finally, I assert that set responds to true when
    sent the message `isEmptyOrNil`.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`:=`操作符在Smalltalk中用于变量赋值。我将字面量`nil`引用的实例赋给名为`set`的变量。我断言当向`set`发送消息`isNil`时，`set`响应`true`。我断言`set`变量中包含的对象引用是`UndefinedObject`的一个实例。我断言在`set`上调用`ifNil:`消息返回`true`。代码`[
    true ]`是一个零参数块或lambda。在Java中，相当于`Supplier`类型的lambda。最后，我断言当向`set`发送消息`isEmptyOrNil`时，`set`响应`true`。'
- en: In the second section of code, I create an instance of a `Set` by using the
    class method named `with:with:with:with:` which takes four parameters. I then
    `deny` that the set `isNil`. I `assert` that that the set `isNotNil`. I `assert`
    the `set` is not equal to `nil`. I deny the set `isEmptyOrNil`, since it it neither
    `nil` or `isEmpty`. I then `assert` that the class of `set` is `Set`.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二段代码中，我通过使用名为`with:with:with:with:`的类方法创建了一个`Set`的实例，该方法接受四个参数。然后，我否定了集合`set`是`nil`。我断言集合`set`不为`nil`。我断言`set`不等于`nil`。我否定了集合`set`既不是`nil`也不是空。然后，我断言`set`的类是`Set`。
- en: In the third section of code, I `select` all instances contained in `set` into
    a new `Set` named `setNoNils`, if the instance returns true to the message `isNotNil`.
    The important thing here is that every subclass of `Object` in Smalltalk responds
    `true` or `false` to the message `isNotNil`.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三段代码中，如果实例返回`true`给消息`isNotNil`，我会将所有包含在`set`中的实例选择到一个名为`setNoNils`的新`Set`中。重要的是，Smalltalk中`Object`的每个子类对消息`isNotNil`都会返回`true`或`false`。
- en: Here’s a final example of one of the methods available to all objects in Smalltalk,
    including `nil`. The method name is `ifNil:ifNotNil:`. It is a control structure
    method which takes two block (aka lambda) parameters. The result is determined
    polymorphically by the type. The `set` here knows it is not `nil`, so it will
    automatically execute the second block and return the result which here is the
    `String`, `‘not nil’`. The literal `nil` will know it is `nil`, so it will automatically
    execute the first block and return the result which here is the `String`, `‘nil’`.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Smalltalk中所有对象（包括`nil`）可用的方法的最后一个示例。该方法名为`ifNil:ifNotNil:`。它是一个控制结构方法，接受两个块（也称为lambda）参数。结果由类型多态确定。这里的`set`知道它不是`nil`，因此它将自动执行第二个块并返回结果，这里是`String`
    `'not nil'`。字面量`nil`将知道它是`nil`，因此它将自动执行第一个块并返回结果，这里是`String` `'nil'`。
- en: '[PRE2]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What if null was an Object in Java?
  id: totrans-split-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果在Java中null是一个Object会怎样？
- en: The following code is speculative, won’t compile, is untested, and unproven
    by Java language experts. But perhaps if `null` were an instance of some class
    named `Null`, the following code *might* be possible.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码是推测性的，不会编译，未经Java语言专家测试和证明。但是如果`null`是一个名为`Null`的某个类的实例，下面的代码*可能*是可能的。
- en: '[PRE3]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If `null` were an instance of a class named `Null`, it would also be possible
    to add methods like `ifNull`, `isNotNull`, `ifNotNull`, `isEmptyOrNull` to both
    `Object` and `Null` as Smalltalk does. The `ifNull` and `ifNotNull` methods would
    take some functional interface type like `Supplier`, `Consumer`, or `Function`
    and then work with lambdas and method references. In the example above, I changed
    the `filter` code to use a `Predicate` formed from a method reference using the
    method named `isNotNull` which would be defined on `Object`.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `null` 是一个名为 `Null` 的类的实例，那么就可以向 `Object` 和 `Null` 添加诸如 `ifNull`、`isNotNull`、`ifNotNull`、`isEmptyOrNull`
    等方法，就像 Smalltalk 做的那样。`ifNull` 和 `ifNotNull` 方法将接受诸如 `Supplier`、`Consumer` 或 `Function`
    等功能接口类型，然后与 lambda 和方法引用一起工作。在上面的示例中，我修改了 `filter` 代码，使用了一个从方法引用生成的 `Predicate`，该方法引用将在
    `Object` 上定义的名为 `isNotNull` 的方法。
- en: The tricky part would be how to make `null` capable of representing any interface
    and class, and dispatching calls to a method named `doesNotUnderstand` for any
    methods from those interfaces that `null` wouldn’t understand. The `Null` class
    would have to behave like a `Proxy` for any type it is stored in, and forward
    methods sent to a class like `Set`, to a single method that could handle the “I’m
    not a Set” response appropriately.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最棘手的部分将是如何使 `null` 能够代表任何接口和类，并且为 `null` 不理解的方法调用一个名为 `doesNotUnderstand` 的方法进行调度。`Null`
    类必须像代理一样行为，对存储在其中的任何类型转发到一个单一方法，该方法可以适当处理“我不是一个 Set”响应。
- en: Perhaps with `null` as an Object in Java, it would be possible to do away with
    a whole variety of `NullPointerExceptions`.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 或许在 Java 中将 `null` 作为一个对象，就可以彻底摆脱各种 `NullPointerException` 的问题。
- en: Why is nil being an Object useful?
  id: totrans-split-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么 `nil` 作为一个对象很有用呢？
- en: The fact `nil` is an instance of the `UndefinedObject` class in Smalltalk allows
    it to be treated like all other objects in Smalltalk. It can respond to basic
    methods that are supported on all objects. The instance `nil` has first class
    treatment in the Object hierarchy in that every object knows that it is or isn’t
    `nil`. This brings a nice symmetry to the language and libraries. This does not
    remove the need to handle `nil` by avoiding or excluding it, but `nil` handling
    is done using the same mechanisms that you would use to handle or exclude other
    types, by calling methods like `isNil`, `isNotNil`, `ifNil:`,`ifNotNil:`, `ifNil:ifNotNil:`.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: Smalltalk 中的 `nil` 是 `UndefinedObject` 类的一个实例，这使得它可以像 Smalltalk 中的所有其他对象一样对待。它可以响应所有对象支持的基本方法。`nil`
    实例在对象层次结构中拥有一流的待遇，每个对象都知道它是不是 `nil`。这为语言和库带来了一种良好的对称性。这并没有通过避免或排除来处理 `nil` 的需要，但处理
    `nil` 使用的机制与处理或排除其他类型的机制相同，通过调用诸如 `isNil`、`isNotNil`、`ifNil:`、`ifNotNil:`、`ifNil:ifNotNil:`
    等方法。
- en: In a language like Smalltalk where controls structures are not defined as statements
    in the language, but as methods in the libraries, having `nil` exist like everything
    else, as an object, leads to a an amazing level of consistency and clarity. In
    my next blog I will delve more into how some other control structures in Smalltalk
    are defined in the class library.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在像 Smalltalk 这样的语言中，控制结构并不作为语言中的语句定义，而是作为库中的方法定义。在 Smalltalk 中，`nil` 存在如同其他所有对象一样，作为一个对象，这带来了令人惊叹的一致性和清晰度。在我的下一篇博客中，我将更深入地探讨
    Smalltalk 中其他控制结构是如何在类库中定义的。
- en: Final thoughts
  id: totrans-split-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后思考
- en: I’m not looking to change Java, as the `null` ship sailed a very long time ago.
    What I am hoping is that I can help illuminate the possibilities for Java developers
    who may not have seen another way of handling `null` in a different object-oriented
    programming language.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不打算改变 Java，因为关于 `null` 的讨论早已很久以前就有了定论。我所期望的是，我可以帮助那些可能还没有看到其他面向对象编程语言中处理 `null`
    不同方式的 Java 开发者。
- en: This blog was intended to explain in simple terms the differences between `null`
    in Java, and `nil` in Smalltalk. Learning multiple languages that use different
    strategies to address the same problems is useful. Learning a whole new language
    takes time. My hope is that this bitesize comparison is useful for you to be able
    to understand the pros and cons of a different approach.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本博客旨在简单解释 Java 中的 `null` 与 Smalltalk 中的 `nil` 之间的区别。学习多种使用不同策略解决同一问题的语言是有益的。学习一门全新的语言需要时间。我希望这个简要比较能帮助你理解不同方法的利弊。
- en: In my next blog, I plan to include two other literal objects in Smalltalk named
    `true` and `false`., and compare them to their primitive Java equivalent also
    named `true` and `false`. I will also compare them to the Java Object equivalent
    named `Boolean`. I will also look to explain how control structures can be defined
    effectively in a library, and not require special syntax and reserved words for
    `if`, `for`, `while` statements.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的下一篇博客中，我计划介绍 Smalltalk 中的另外两个文字对象，分别命名为`true`和`false`，并将它们与它们的原始 Java 等效物进行比较，也命名为`true`和`false`。我还将它们与
    Java 对象等效物命名为`Boolean`进行比较。我还将探讨如何在库中有效地定义控制结构，而不需要特殊的语法和保留字，比如`if`、`for`、`while`语句。
- en: Stay tuned, and thanks for reading!
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 敬请关注，感谢阅读！
- en: '*I am the creator of and committer for the* [*Eclipse Collections*](https://github.com/eclipse/eclipse-collections)
    *OSS project, which is managed at the* [*Eclipse Foundation*](https://projects.eclipse.org/projects/technology.collections)*.
    Eclipse Collections is open for* [*contributions*](https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md)*.*'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*我是* [*Eclipse Collections*](https://github.com/eclipse/eclipse-collections)
    *开源项目的创建者和提交者，该项目由* [*Eclipse Foundation*](https://projects.eclipse.org/projects/technology.collections)
    *管理。Eclipse Collections 欢迎* [*贡献*](https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md)*。*'
