- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:54:44'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:54:44
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Learning about debuggers | Andy Hippo
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习调试器 | Andy Hippo
- en: 来源：[https://werat.dev/blog/learning-about-debuggers/](https://werat.dev/blog/learning-about-debuggers/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://werat.dev/blog/learning-about-debuggers/](https://werat.dev/blog/learning-about-debuggers/)
- en: Learning about debuggers
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习调试器
- en: January 8, 2024
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2024 年 1 月 8 日
- en: 'Today’s article is a collection of materials to learn more about debuggers:
    how they work, which technologies are under the hood, what kind of problems exist
    in this area. There is of course a big overlap with related components like compilers
    and linkers, so get ready to learn lots of new things 😃.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的文章是一个材料集，旨在更深入了解调试器：它们如何工作，底层使用的技术是哪些，这个领域存在哪些问题。当然，这与编译器和链接器等相关组件有很大重叠，所以准备好学习大量新知识
    😃。
- en: Of course, the list is not exhaustive by any means. These are just the links
    I’ve accumulated over the years and found useful for myself. If you’d like to
    add anything to the list, let me know!
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个列表绝非详尽无遗。这些只是我多年来积累并发现对自己有用的链接。如果你想要添加任何内容，请告诉我！
- en: 'Note: many of the links here are blog posts – be sure to check out other articles
    in those blogs! They’re often worth reading even if not directly related to the
    topic.'
  id: totrans-split-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：这里的许多链接都是博客文章，请务必查看这些博客中的其他文章！即使与主题无直接关系，它们通常也是值得阅读的。
- en: '* * *'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: How debuggers work
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试器的工作方式
- en: 'All debuggers share the same basic principles: they need to attach to a process,
    parse the binary and debug information, handle breakpoints, etc. The implementations
    may vary significantly between the operating systems, but after you understand
    one of them, others will look very familiar.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所有调试器都共享相同的基本原理：它们需要附加到一个进程，解析二进制和调试信息，处理断点等。虽然在操作系统之间的实现可能有显著差异，但是一旦你理解了其中一个，其他的看起来会非常熟悉。
- en: '**Writing a Linux Debugger**'
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编写 Linux 调试器**'
- en: '[https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/](https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/)'
  id: totrans-split-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/](https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/)'
- en: A 10-part journey of writing a Linux debugger from scratch. You’ll learn the
    basics of `ptrace`, how breakpoints work, how to map source code to machine code
    and how to unwind the stack. Highly recommend starting with this one, if you wanna
    learn the fundamentals.
  id: totrans-split-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个从头开始编写 Linux 调试器的 10 部分旅程。你将学习到 `ptrace` 的基础知识，断点是如何工作的，如何将源代码映射到机器代码，以及如何展开堆栈。强烈建议从这篇开始，如果你想学习基础知识。
- en: '**Writing a Debugger From Scratch**'
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从头开始编写调试器**'
- en: '**How Does a C Debugger Work? (GDB Ptrace/x86 example)**'
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C 调试器是如何工作的？（GDB Ptrace/x86 示例）**'
- en: '**Debugging with the natives**'
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与本地调试有关**'
- en: '**Engineering Record And Replay For Deployability** (aka “how does `rr` work?”)'
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工程记录和回放以实现可部署性**（又名“`rr` 是如何工作的？”）'
- en: '**Implementation of Live Reverse Debugging in LLDB**'
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 LLDB 中实现实时反向调试**'
- en: '[https://arxiv.org/abs/2105.12819](https://arxiv.org/abs/2105.12819)'
  id: totrans-split-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://arxiv.org/abs/2105.12819](https://arxiv.org/abs/2105.12819)'
- en: Great detailed paper about the implementation of the reverse debugging in LLDB.
    Gives a good overview of various options and their trade-offs and explains in
    details the approach chosed for LLDB.
  id: totrans-split-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 LLDB 中反向调试实现的详细论文。提供了各种选项及其权衡，详细解释了 LLDB 所选择的方法。
- en: '**How does gdb call functions?**'
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gdb 如何调用函数？**'
- en: Stack unwinding
  id: totrans-split-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 栈展开
- en: Producing a call stack is one of the most basic debugger features, yet it’s
    far from trivial. In order to understand how it works, you’ll need to learn about
    frame pointers, call frame information (CFI), DWARF expressions and many other
    things. Here are some article that explore this topic in great detail.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 生成调用堆栈是最基本的调试器功能之一，但远非简单。为了理解它的工作原理，你需要了解帧指针、调用帧信息（CFI）、DWARF 表达式以及许多其他内容。以下是一些详细探讨这个主题的文章。
- en: '**Unwinding the stack the hard way**'
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**费力地展开堆栈**'
- en: '**Stack unwinding**'
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**栈展开**'
- en: '**The Apple Compact Unwinding Format: Documented and Explained**'
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**苹果紧凑展开格式：文档化与解释**'
- en: '**Unwinding a Stack by Hand with Frame Pointers and ORC**'
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用帧指针和 ORC 手动展开堆栈**'
- en: '**DWARF-based Stack Walking Using eBPF**'
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于 DWARF 的使用 eBPF 进行堆栈遍历**'
- en: Random debugger trivia
  id: totrans-split-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机调试器琐事
- en: I already gave up with the categorization, so dumping the rest under “random
    trivia”.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经放弃分类，所以将剩余部分归类为“随机琐事”。
- en: '**Where Did My Variable Go? Poking Holes in Incomplete Debug Information**'
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**我的变量去哪了？挖掘不完整调试信息的漏洞**'
- en: '**Separating debug symbols from executables**'
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将调试符号与可执行文件分离**'
- en: '**Debugger Lies: Stack Corruption**'
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试器的谎言：堆栈损坏**'
- en: '**Everything Is Broken: Shipping rust-minidump at Mozilla**'
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一切都坏了：在 Mozilla 发布 rust-minidump**'
- en: '**Fuzzing rust-minidump for Embarrassment and Crashes**'
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用于尴尬和崩溃的 Rust-minidump 模糊测试**'
- en: '**Crash reporting in Rust**'
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Rust 中的崩溃报告**'
- en: '**So you want to live-reload Rust**'
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所以你想要实时重新加载 Rust**'
- en: General useful knowledge
  id: totrans-split-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一般有用的知识
- en: '**Linkers**'
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链接器**'
- en: '**Design and implementation of mold**'
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模具的设计与实现**'
- en: '**The Definitive Guide to Linux System Calls**'
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux 系统调用的权威指南**'
- en: '**System calls in the Linux kernel**'
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux 内核中的系统调用**'
- en: '* * *'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Discuss this article:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论本文：
