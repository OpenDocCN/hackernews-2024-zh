- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:51:16'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:51:16
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Is Delphi A Memory Safe Language?
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Delphi 是否是一种内存安全的语言？
- en: 来源：[https://blogs.embarcadero.com/is-delphi-a-memory-safe-language/](https://blogs.embarcadero.com/is-delphi-a-memory-safe-language/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blogs.embarcadero.com/is-delphi-a-memory-safe-language/](https://blogs.embarcadero.com/is-delphi-a-memory-safe-language/)
- en: 'Last week, the US government released the report “[Back To The Building Blocks:
    A Path Toward Secure And Measurable Software](https://www.whitehouse.gov/wp-content/uploads/2024/02/Final-ONCD-Technical-Report.pdf)”.
    This report is part of the US Cybersecurity Strategy and focused on multiple areas,
    including memory safety vulnerabilities and quality metrics.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 上周，美国政府发布了报告 “[回到基础：通向安全和可衡量软件的路径](https://www.whitehouse.gov/wp-content/uploads/2024/02/Final-ONCD-Technical-Report.pdf)”。该报告是美国网络安全战略的一部分，重点关注多个领域，包括内存安全漏洞和质量指标。
- en: This report has been commented on by many online magazines, which have underlined
    the significant push back against the C and C++ programming languages.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此报告已被多家在线杂志评论，强调了针对 C 和 C++ 编程语言的重大抵制。
- en: 'Some of these articles include:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一些这些文章包括：
- en: What does the US Government report say about memory safe languages?
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 美国政府报告关于内存安全语言的说法是什么？
- en: The report focuses a lot on “memory safety vulnerabilities” and singles out
    “programming languages that both lack traits associated with memory safety and
    also have high proliferation across critical systems”. It continues recommending
    to “use memory safe programming languages at the outset, as recommended by the
    Cybersecurity and Infrastructure Security Agency’s (CISA) Open-Source Software
    Security Roadmap.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 报告非常关注“内存安全漏洞”，并单独指出“缺乏与内存安全相关的特征并且在关键系统中广泛传播的编程语言”。它继续建议“从一开始就使用内存安全的编程语言，正如《网络安全和基础设施安全局（CISA）开源软件安全路线图》所推荐的那样。
- en: 'The reference is to the report [NSA Cybersecurity Information Sheet on Software
    Memory Safety](https://media.defense.gov/2023/Apr/27/2003210083/-1/-1/0/CSI_SOFTWARE_MEMORY_SAFETY_V1.1.PDF).
    This document goes into deeper details in terms of explaining what memory safety
    is, inducing it as a mix of type safety, safe allocation and deallocation (possibly
    with a garbage collector). This paragraph has the core content:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 引用的是报告 [NSA 软件内存安全信息单](https://media.defense.gov/2023/Apr/27/2003210083/-1/-1/0/CSI_SOFTWARE_MEMORY_SAFETY_V1.1.PDF)。该文件更详细地解释了内存安全的含义，将其归纳为类型安全、安全分配和释放（可能包括垃圾收集器）。本段核心内容如下：
- en: '*Using a memory safe language can help prevent programmers from introducing
    certain **types of memory-related issues. Memory is managed automatically as part
    of the **computer language; it does not rely on the programmer adding code to
    implement **memory protections. The language institutes automatic protections
    using a combination **of compile time and runtime checks. These inherent language
    features protect the **programmer from introducing memory management mistakes
    unintentionally. Examples **of memory safe language include Python®, Java®, C#,
    Go, Delphi/Object Pascal, Swift®, **Ruby™, Rust®, and Ada. Even with a memory
    safe language, memory management is not entirely memory safe. *'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用内存安全语言可以帮助防止程序员引入特定的内存相关问题。内存是作为计算机语言的一部分自动管理的；它不依赖于程序员添加代码来实现内存保护。语言使用编译时和运行时检查的组合来自动提供保护。这些固有语言特性防止程序员无意间引入内存管理错误。内存安全语言的例子包括
    Python®、Java®、C#、Go、Delphi/Object Pascal、Swift®、Ruby™、Rust® 和 Ada。即使使用内存安全语言，内存管理也不完全是内存安全的。*'
- en: Does the NSA list Delphi as a memory safe language?
  id: totrans-split-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NSA 是否将 Delphi 列为内存安全语言？
- en: Yes, Delphi is listed as a memory safe language. Some of the articles initially
    reported a shorter list of safe languages, including only some of the most popular
    ones and excluding Delphi. The list has later been rectified matching the NSA
    report.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，Delphi 被列为内存安全语言。一些文章最初报告了一个较短的安全语言列表，仅包括一些最流行的语言，并排除了 Delphi。该列表后来已经修正，与
    NSA 报告相匹配。
- en: 'There has been some discussion in the Delphi community in terms of considering
    the language safe or not, considering it lacks one of the traits of memory safety,
    garbage collection. However, the official assessment was done on multiple grounds
    and taking into consideration other elements:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: Delphi 社区对此进行了一些讨论，考虑该语言是否安全，考虑到它缺乏内存安全的一个特征，即垃圾回收。然而，官方评估是基于多个方面进行的，并考虑到其他因素：
- en: One core feature of safe programming languages is having a strong type system
    and having the language verify the data types mapping at compile time, and not
    at runtime. Dynamic languages, even with a garbage collector, can fall short and
    be exposed to runtime errors, which can impact their safety
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全编程语言的一个核心特征是拥有强类型系统，并在编译时验证数据类型映射，而不是在运行时。动态语言即使有垃圾回收器，也可能存在运行时错误的风险，这可能影响其安全性。
- en: The other element is not not having to resort to the use of pointers and more
    direct memory management in general code. While Delphi doesn’t block the use of
    direct memory access, this is fairly uncommon. Delphi offers mechanisms that automate
    and simplify memory management even without a GC.
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个要素是不需要借助指针和更直接的内存管理来编写一般代码。尽管Delphi不阻止直接内存访问的使用，但这相当罕见。Delphi提供了自动化和简化内存管理的机制，即使没有垃圾回收也能做到。
- en: Does using a memory safe language mean I am completely protected from security
    risks?
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用内存安全语言是否意味着我完全免受安全风险？
- en: The other general consideration is that memory safety is presented as a goal
    but not an absolute. For example, the main report underlines that there are types
    of applications in which predictability of the execution timing is crucial (referring
    to the aerospace industry). These are scenarios in which a garbage collector kicking
    in at unpredictable times can affect the program execution of code with critical
    timing. Delphi has a significant advantage compared to other popular languages
    in the industrial automation space precisely for this reason. It allows direct
    control, while remaining at a higher and simpler level compared to C++.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个普遍的考虑是，内存安全被提出作为一个目标，但并非绝对。例如，主要报告强调，在某些需要执行时间可预测性的应用程序类型中（如航空航天行业），垃圾收集器在不可预测的时间触发可能会影响关键时序代码的执行。相比于其他流行的语言，Delphi在工业自动化空间中具有显著优势，正是因为它允许直接控制，同时相对于C++而言在更高级别和更简单的层次上保持。
- en: The NSA and US Government lists Delphi as a memory safe language – what else
    does it recommend?
  id: totrans-split-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NSA和美国政府将Delphi列为内存安全语言 —— 它还推荐了哪些内容？
- en: While the report recommends the shift towards memory safe languages, it also
    underlines the use of formal methods for static code analysis, in particular focused
    on security. We have been seeing a growing interest in this area also for Delphi,
    and we have been [promoting third party tools](https://blogs.embarcadero.com/how-secure-is-your-app-static-analysis-finds-security-holes/)
    that help in this space.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管报告建议向内存安全语言转移，但它也强调了使用形式化方法进行静态代码分析，特别是专注于安全性的分析。我们也注意到Delphi在这一领域的兴趣日益增长，并且我们一直在[推广第三方工具](https://blogs.embarcadero.com/how-secure-is-your-app-static-analysis-finds-security-holes/)来帮助解决这些问题。
- en: There is also a long section focused on hardware-based or CPU level enforcement
    of memory security. In the same area, the original NSA report underlines the importance
    of leveraging features like Control Flow Guard (CFG), Address Space Layout Randomization
    (ASLR) and Data Execution Prevention (DEP). Some of these security settings have
    been enforced in [recent versions of Delphi](https://blogs.embarcadero.com/rad-studio-11-1-and-windows-pe-security-flags/)
    and are now the default for new projects.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个长篇专注于基于硬件或CPU级别的内存安全实施的部分。在同一领域，原始的NSA报告强调了利用诸如控制流守护（CFG）、地址空间布局随机化（ASLR）和数据执行防护（DEP）等功能的重要性。这些安全设置已经在[最近版本的Delphi](https://blogs.embarcadero.com/rad-studio-11-1-and-windows-pe-security-flags/)中实施，并且已成为新项目的默认设置。
- en: What is supply chain security?
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是供应链安全？
- en: Finally, there is another long area covering the security of the library dependency
    chain, also sometimes referred to as “supply chain security”, advocating the use
    of formal methods to assess libraries safety, including that of open source libraries.
    There is a growing concern that the high number of dependencies of many projects
    is expanding the security risk not due to the project code, but the libraries
    used. In this respect the report has a detailed description of the Log4Shell vulnerability
    in the Log4j Java library. This library vulnerability affected a memory safe language
    like Java and showed, in the report words, “a critical weakness through which
    malicious actors could compromise computer systems across the world”. The report
    continues indicating that “this vulnerability highlighted the critical need to
    help ensure the security of the open-source ecosystem, which fosters tremendous
    innovation worldwide.”
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有另一个长篇章节涵盖了库依赖链的安全性，有时也称为“供应链安全”，主张使用正式方法评估库的安全性，包括开源库的安全性。人们越来越担心许多项目的高依赖性增加了安全风险，这并非源于项目代码本身，而是所使用的库。在这方面，报告详细描述了Log4j
    Java库中的Log4Shell漏洞。这个库漏洞影响了像Java这样的内存安全语言，并且在报告中指出，“这是一个严重的弱点，通过它恶意行为者可以威胁全球计算机系统”。报告继续指出，“这个漏洞突显了确保开源生态系统安全的重要性，这个生态系统在全球范围内促进了巨大的创新。”
- en: What is Embarcadero doing to help with security risks?
  id: totrans-split-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Embarcadero在帮助应对安全风险方面做了哪些工作？
- en: It is clear that there is a growing concern in terms of software security at
    all levels, from government bodies to businesses of all sizes. Even before the
    release of this White House and NSA report where Delphi was listed as a memory
    safe language, Embarcadero had already identified security as a growing concern
    among customers. We continue to focus on investing in and improving Delphi support
    for modern security techniques and backing that with clear hype-free education
    on the genuine risks and available mitigations.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里明确表明，在各个层面上，从政府机构到各大小企业，对软件安全存在着日益增长的关注。甚至在白宫和NSA发布Delphi作为内存安全语言的报告之前，Embarcadero已经注意到安全问题是客户日益关注的问题。我们继续专注于投资和改进Delphi对现代安全技术的支持，并提供清晰、免炒作的教育，介绍真实的风险和可用的缓解措施。
