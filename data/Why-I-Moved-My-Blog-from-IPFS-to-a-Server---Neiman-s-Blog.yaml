- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:22:53'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月27日15:22:53
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Why I Moved My Blog from IPFS to a Server | Neiman’s Blog
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我将我的博客从IPFS迁移到服务器 | Neiman的博客
- en: 来源：[https://neimanslab.org/2024-01-31/why-i-moved-my-blog-ipfs-to-server.html](https://neimanslab.org/2024-01-31/why-i-moved-my-blog-ipfs-to-server.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://neimanslab.org/2024-01-31/why-i-moved-my-blog-ipfs-to-server.html](https://neimanslab.org/2024-01-31/why-i-moved-my-blog-ipfs-to-server.html)
- en: Written by Neiman
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：Neiman
- en: on January 31, 2024
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 于2024年1月31日
- en: Why I Moved My Blog from IPFS to a Server
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我将我的博客从IPFS迁移到服务器
- en: It’s safe to say I was a pioneer of IPFS + ENS websites. When I set up my first
    ENS+IPFS website in March 2019 there were no more than 15 others. Between 2019
    to 2022 I co-built an IPFS+ENS browser extension (Almonit), an IPFS+ENS search
    engine (Esteroids), and of course, my personal blog was available only in IPFS+ENS.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 可以肯定地说我是IPFS + ENS网站的先驱。当我在2019年3月建立了我的第一个ENS+IPFS网站时，其他网站不超过15个。从2019年到2022年，我共同建立了一个IPFS+ENS浏览器扩展（Almonit），一个IPFS+ENS搜索引擎（Esteroids），当然，我的个人博客只在IPFS+ENS中可用。
- en: But today I moved my blog back to a server, and I’d like to discuss why.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但是今天我将我的博客迁移到了服务器上，我想讨论一下原因。
- en: What got me excited about peer-to-peer websites like IPFS is that, theoretically,
    the more visitors a website has, the more robust, censorship-resistant, and scalable
    it is. Again, theoretically.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 令我兴奋的是像IPFS这样的点对点网站，在理论上，网站的访问量越多，它就越稳健、抗审查和可扩展。再次强调，这只是理论上的。
- en: Do you know how popular torrent files seem to live forever? I wanted the same
    but for websites. I imagined a website that is hard to ddos (Robust), difficult
    to block (Censorship-resistant), and the more readers it has, the faster it is
    to access as more readers help to spread the content (Scalable).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道种子文件似乎能够永生吗？我希望网站也能如此。我想象了一个网站，难以遭受DDoS攻击（稳健），难以被封锁（抗审查），而且读者越多，访问速度越快，因为更多的读者帮助传播内容（可扩展）。
- en: I imagined a website with a big “Pin Me” button (pinning in IPFS is like seeding
    in BitTorrent). If a reader presses the button they will help serve the website.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我想象了一个有一个大大的“固定我”按钮的网站（在IPFS中固定就像在BitTorrent中种子）。如果读者按下该按钮，他们将帮助服务该网站。
- en: In practice this didn’t work out really, and for several reasons.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这并没有真正奏效，原因有几个。
- en: IPFS users mostly don’t run their own nodes or software. Instead, they use gateways.
    It’s an educated guess I’m making based on what I see in the community, and based
    on the fact that it’s quite an inconvenience to run your own IPFS node. But even
    if you do run your own node, the fact you access a website doesn’t mean you pin
    it. Not at all.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IPFS用户大多不运行自己的节点或软件。相反，他们使用网关。我是根据社区中所见到的情况以及运行自己的IPFS节点相当不方便这一事实所作出的合理猜测。但即使你运行自己的节点，你访问一个网站并不意味着你会固定它。一点也不。
- en: This is a huge difference from BitTorrent where the only way to get content
    is to run your own software, and when you download something you also share it,
    by default.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这与BitTorrent有很大的不同，BitTorrent的获取内容的唯一方法是运行自己的软件，并且默认情况下，当你下载某样东西时，你也会分享它。
- en: 'Hence, most readers will not help share a website, but even for the ones who
    will there are still extra complications:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，大多数读者不会帮助分享一个网站，但即使对于愿意帮助的人，仍然存在额外的复杂性：
- en: Websites are dynamic objects. Their content is being updated all the time. If
    you just pin the content of the current version of a website, that’s not much
    help.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网站是动态对象。它们的内容一直在更新。如果你只是固定网站当前版本的内容，那就没什么帮助。
- en: What most IPFS websites do is use a name system that points to the latest version
    of its content. It’s usually either IPNS, the internal name system of IPFS, or
    ENS, Ethereum Name System. But IPFS doesn’t include yet an easy command to always
    pin the latest content of IPNS, and if someone uses ENS, it means that whoever
    pins it also needs to listen to Ethereum blockchain events, a huge extra challenge
    on its own to do without a centralized service.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大多数IPFS网站所做的是使用一个指向其内容最新版本的命名系统。通常是IPNS，IPFS的内部命名系统，或者是ENS，以太坊命名系统。但是IPFS还没有一个简单的命令始终固定IPNS的最新内容，如果有人使用ENS，这意味着固定它的人还需要监听以太坊区块链事件，这本身就是一个巨大的额外挑战，无法使用集中式服务完成。
- en: To make things worse, it’s actually quite hard to get IPFS content to be available
    in a browser in a reliable way!
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更糟糕的是，让IPFS内容在浏览器中可靠地可用实际上是相当困难的！
- en: For example, I wanted my IPFS blog to be available in all major gateways, all
    IPFS nodes, Brave browser (which supports IPFS natively), and js-libp2p & helia
    (the js libraries of IPFS). I didn’t find a reliable way to achieve that on my
    own.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，我希望我的 IPFS 博客能在所有主要网关、所有 IPFS 节点、支持 IPFS 原生的 Brave 浏览器以及 IPFS 的 js-libp2p
    和 helia（IPFS 的 js 库）上都可以访问。我没找到一个可靠的方法来实现这一点。
- en: '**Long rant:** I pinned content from my own server and played forever with
    the settings and definitions, but couldn’t get the content to be available everywhere.
    Worse was Helia, where I just couldn’t manage to get my content accessible from
    Helia within the browser without connecting directly to my own node. But then
    what’s p2p network about it?'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**长篇抱怨：**我从自己的服务器中固定了内容，并且一直在调整设置和定义，但是却无法使内容随处可用。更糟糕的是 Helia，我根本无法让我的内容在浏览器中通过
    Helia 直接访问，而不是直接连接到我的节点。那么 p2p 网络是什么意思呢？'
- en: I found out that there’s a service, [cid.contact](https://cid.contact), called
    a “Content Routing” service. It’s written in the “about section” of cid.contact
    that it’s related to Filecoin, but for some reason, it holds routing data for
    IPFS, which as far as I know is a different network. The address cid.contact is
    hard-coded into Helia’s code in the version I used at least, and it was clear
    that if a content is indexed by cid.contact, then it’s reachable almost everywhere,
    but if it’s not indexed - it’s not reachable always.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我发现有一个服务，[cid.contact](https://cid.contact)，称为“内容路由”服务。在 cid.contact 的“关于”部分中写着它与
    Filecoin 有关，但出于某种原因，它保存了 IPFS 的路由数据，据我所知，这是一个不同的网络。在我至少使用的版本中，cid.contact 的地址是硬编码到
    Helia 的代码中的，并且很明显，如果一个内容被 cid.contact 索引，那么它几乎可以在任何地方访问，但如果没有索引 - 它不总是可以访问的。
- en: I couldn’t figure out how to index my content in cid.contact. Honestly, I’m
    not sure I wanted to. Because what’s the point? it seems to just add a dependency
    on a centralized service. I could try to run my own indexer and define it in my
    website, but again, centralization. What’s the economic model for these indexers?
    Which actors do we expect to run them in the long term?
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我搞不清楚如何将我的内容索引在 cid.contact 中。老实说，我不确定我是否想要这样做。因为有什么意义呢？似乎这只是增加了对一个中心化服务的依赖。我可以尝试运行自己的索引器，并在我的网站中定义它，但同样是中心化。这些索引器的经济模型是什么？我们期望长期由哪些角色来运行它们？
- en: The text in cid.contact says that at the current size of IPFS, it’s unreasonable
    to expect the DHT to handle routing efficiently on its own. This kind of makes
    sense, but what’s the alternative to that, that doesn’t break up the technology
    pros?
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cid.contact 中的文本说，在当前 IPFS 的规模下，期望 DHT 单独有效地处理路由是不合理的。这在某种程度上是有道理的，但除此之外，还有什么选择，不会破坏技术的优点呢？
- en: By now I got tired of the constant struggle for my IPFS blog to function well.
    At least for a short while, I want a simple, classic working solution. The blog
    you’re reading now is built with Jekyll and is hosted on my own 10$ server.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我已经厌倦了为了使我的 IPFS 博客正常运行而不断奋斗。至少在短时间内，我想要一个简单、经典的工作解决方案。你现在正在阅读的博客是用 Jekyll
    构建的，并托管在我自己的 10 美元服务器上。
- en: don’t get me wrong, I’m still an IPFS fanboy. It’s a great project managed very
    well. It just doesn’t fit a personal blog needs yet.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不要误会，我仍然是一个 IPFS 的粉丝。这是一个非常好的项目，管理得很好。只是它还不适合个人博客的需求。
- en: That said, It’s difficult to follow the constant development and innovation
    of IPFS or Filecoin without this becoming a day job. Did I miss some trivial solution
    or a recent innovation? If yes, let me know. There are no comments here yet, but
    I am available via old-style email (neiman@hackerspace.pl), or in Mastodon (@neiman@mastodon.social).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，要在不把这变成一份全职工作的情况下跟进 IPFS 或 Filecoin 的持续发展和创新确实很困难。我错过了一些琐碎的解决方案或最近的创新吗？如果是的话，告诉我。这里还没有评论，但你可以通过老式的电子邮件（neiman@hackerspace.pl）或者
    Mastodon（@neiman@mastodon.social）找到我。
