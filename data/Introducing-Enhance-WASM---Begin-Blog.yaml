- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 13:07:55'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:07:55
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Introducing Enhance WASM — Begin Blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入Enhance WASM — Begin Blog
- en: 来源：[https://begin.com/blog/posts/2024-04-08-introducing-enhance-wasm](https://begin.com/blog/posts/2024-04-08-introducing-enhance-wasm)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://begin.com/blog/posts/2024-04-08-introducing-enhance-wasm](https://begin.com/blog/posts/2024-04-08-introducing-enhance-wasm)
- en: Backend agnostic server-side rendering (SSR) for Web Components
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后端无关的服务器端渲染（SSR）用于Web组件
- en: Web Components are the browser native way to extend HTML. But as a primarily
    browser based technology they are defined with JavaScript which limits them to
    either rendering solely client side — which has janky performance, poor SEO, and
    is not optimally accessible — or within a server-side JavaScript runtime, which
    isn’t always an option for shops that use other backend runtimes.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Web组件是扩展HTML的浏览器本地方法。但作为主要基于浏览器的技术，它们是用JavaScript定义的，这限制了它们要么仅在客户端进行渲染 —— 这会导致性能不稳定、SEO效果差，并且可访问性不佳
    —— 要么在服务器端JavaScript运行时内渲染，而这并不总是适用于使用其他后端运行时的商店。
- en: '**[Enhance WASM](https://enhance.dev/wasm)** unlocks **server-side rendering
    Web Components** for any backend runtime.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Enhance WASM](https://enhance.dev/wasm)**为任何后端运行时解锁**服务器端渲染的Web组件**。'
- en: '**Write Once, Render Anywhere**: Author standard web components and deploy
    them with any backend. **[Enhance WASM](https://enhance.dev/wasm)** takes care
    of rendering across any server environment.'
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一次编写，随处渲染**：编写标准的Web组件，并在任何后端部署它们。**[Enhance WASM](https://enhance.dev/wasm)**负责在任何服务器环境下进行渲染。'
- en: '**Seamless Integration**: Easily integrate **[Enhance WASM](https://enhance.dev/wasm)**
    into your existing projects with minimal setup. Extensive documentation, high
    quality baseline components, and broad community support make adoption a breeze.'
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无缝集成**：轻松将**[Enhance WASM](https://enhance.dev/wasm)**集成到您现有的项目中，只需进行最少的设置。详尽的文档、高质量的基线组件和广泛的社区支持使采用变得轻松。'
- en: '**Better DX**: Stop wasting time on slow build steps and reimplementing brittle
    frontend code that already works. Web standards ensure rock solid reliability
    and performance without rewrites.'
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的开发体验（DX）**：别再浪费时间在缓慢的构建步骤和重新实现已经工作的脆弱前端代码上了。Web标准确保了可靠性和性能，无需重写。'
- en: '**Performance Optimized**: No more spinners or skeleton screens. Enjoy faster
    load times and improved SEO. Your users get a snappy experience, and you get better
    developer velocity.'
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能优化**：不再有旋转图标或骨架屏。享受更快的加载时间和改进的SEO效果。您的用户获得更快的体验，您获得更好的开发速度。'
- en: We really believe this is a leapfrog moment for frontend development. Server-side
    rendering is a key requirement for personalized web applications. Organizations
    that prioritize the stability, performance and accessibility of web standards
    run workloads in a huge variety of backend runtimes. **Now we can build browser
    native web interfaces that cross the runtime chasm.**
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真的相信这是前端开发的一个飞跃时刻。服务器端渲染是个性化Web应用的关键要求。那些优先考虑Web标准稳定性、性能和可访问性的组织，在各种后端运行时中运行工作负载。**现在我们可以构建跨越运行时差距的浏览器本地Web界面**。
- en: Try it out and get involved!
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下，参与其中！
- en: Enhance is completely open source code and we need your help! We’re opening
    up Enhance WASM immediately with support for **[Node](https://github.com/enhance-dev/enhance-ssr)**,
    **[Deno](https://github.com/enhance-dev/enhance-ssr-deno)**, **[Python](https://github.com/enhance-dev/enhance-ssr-python)**,
    **[Ruby](https://github.com/enhance-dev/enhance-ssr-ruby)**, **[PHP](https://github.com/enhance-dev/enhance-ssr-php)**,
    **[Java](https://github.com/enhance-dev/enhance-ssr-java)**, **[C#](https://github.com/enhance-dev/enhance-ssr-c-sharp)**,
    **[Rust](https://github.com/enhance-dev/enhance-ssr-rust)**, and **[Go](https://github.com/enhance-dev/enhance-ssr-go)**.
    We need your help testing and implementing support for these and other runtimes!
    If you want to see a runtime not mentioned here [please let us know](https://github.com/enhance-dev/enhance-ssr/issues).
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: Enhance是完全开源的代码，我们需要您的帮助！我们立即开放Enhance WASM，支持**[Node](https://github.com/enhance-dev/enhance-ssr)**、**[Deno](https://github.com/enhance-dev/enhance-ssr-deno)**、**[Python](https://github.com/enhance-dev/enhance-ssr-python)**、**[Ruby](https://github.com/enhance-dev/enhance-ssr-ruby)**、**[PHP](https://github.com/enhance-dev/enhance-ssr-php)**、**[Java](https://github.com/enhance-dev/enhance-ssr-java)**、**[C#](https://github.com/enhance-dev/enhance-ssr-c-sharp)**、**[Rust](https://github.com/enhance-dev/enhance-ssr-rust)**和**[Go](https://github.com/enhance-dev/enhance-ssr-go)**等运行时。我们需要您的帮助来测试和实施对这些以及其他运行时的支持！如果您想看到未在此处提及的运行时，请告诉我们[请告诉我们](https://github.com/enhance-dev/enhance-ssr/issues)。
- en: 'Example starter projects:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 示例起始项目：
- en: FAQ
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题
- en: '*How are components authored?*'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*组件如何编写？*'
- en: Components are authored exactly per the Web Components specification. Enhance
    WASM also enables a more backend oriented pure functional style and has several
    helper libraries for making common client-side patterns cleaner.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 组件的编写完全遵循 Web 组件规范。Enhance WASM 还支持更面向后端的纯函数式风格，并提供几个辅助库，使常见的客户端模式更清晰。
- en: '*Do I need to run client JS to render components?*'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*我需要运行客户端 JS 来渲染组件吗？*'
- en: No. Web Components are completely rendered server-side HTML. You can then optionally
    run client-side upgrades should the element need it. It is worth noting we’ve
    found the majority of elements only need to be server rendered and do not require
    any client javascript at all.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要。Web 组件完全在服务器端渲染 HTML。然后，如果元素需要，可以选择在客户端进行升级。值得注意的是，我们发现大多数元素只需在服务器端渲染，根本不需要任何客户端
    JavaScript。
- en: '*Can I use client-side JS with these components?*'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*我可以在这些组件中使用客户端 JS 吗？*'
- en: Of course!
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当然可以！
- en: '*What about Lit?*'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*那 Lit 呢？*'
- en: We definitely hear community folk when they say, “just use Lit”, but per the
    Lit documentation their own SSR renderer isn’t production ready today, and even
    then is Node.js only. Lit is ultimately more focused on client-side upgrade than
    server-side usage which is totally cool! Enhance encourages SSR and “HTML first”
    and treats the client-side element upgrade as a progressive enhancement step.
    You can use Enhance to render initial HTML and Lit for client-side interactions
    if that makes sense for your project. We find most elements are not client-side
    interactive anyhow.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们绝对听到社区中的人们说，“只需使用 Lit”，但根据 Lit 的文档，他们自己的 SSR 渲染器今天还没有准备好投入生产，并且即使准备好了也只支持
    Node.js。Lit 最终更专注于客户端升级，而不是服务器端的使用，这完全没问题！Enhance 鼓励 SSR 和“HTML 优先”，将客户端元素升级视为渐进增强的一步。如果对你的项目有意义，你可以使用
    Enhance 渲染初始 HTML，然后用 Lit 处理客户端交互。我们发现大多数元素实际上并不需要客户端交互。
