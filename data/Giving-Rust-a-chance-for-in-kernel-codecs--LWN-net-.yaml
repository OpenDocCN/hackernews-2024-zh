- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:33:13'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月27日13:33:13
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Giving Rust a chance for in-kernel codecs [LWN.net]
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 给予Rust在内核中编解码器的机会 [LWN.net]
- en: 来源：[https://lwn.net/Articles/970565/](https://lwn.net/Articles/970565/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://lwn.net/Articles/970565/](https://lwn.net/Articles/970565/)
- en: '| **Benefits for LWN subscribers**The primary benefit from [subscribing to
    LWN](/subscribe/) is helping to keep us publishing, but, beyond that, subscribers
    get immediate access to all site content and access to a number of extra site
    features. Please sign up today! |'
  id: totrans-split-6
  prefs: []
  type: TYPE_TB
  zh: '| **LWN订阅者的好处**[订阅LWN](/subscribe/)的主要好处是帮助我们继续发布内容，此外，订阅者可以立即访问所有站点内容，并使用许多额外的站点功能。请今天就注册！
    |'
- en: April 26, 2024
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年4月26日
- en: This article was contributed by Daniel Almeida
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本文由Daniel Almeida贡献
- en: Video playback is undeniably one of the most important features in modern consumer
    devices. Yet, surprisingly, users are by and large unaware of the intricate engineering
    involved in the compression and decompression of video data, with codecs being
    left to find a delicate balance between image quality, bandwidth, and power consumption.
    In response to constant performance pressure, video codecs have become complex
    and hardware implementations are now common, but programming these devices is
    becoming increasingly difficult and fraught with opportunities for exploitation.
    I hope to convey how Rust can help fix this problem.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 视频播放无疑是现代消费设备中最重要的功能之一。然而，令人惊讶的是，用户们大多不知道视频数据压缩和解压缩背后复杂的工程过程，编解码器的工作被留给了在图像质量、带宽和功耗之间寻找微妙平衡的情况下。面对持续的性能压力，视频编解码器变得越来越复杂，硬件实现现在很普遍，但编程这些设备变得越来越困难，并充满了被利用的机会。我希望传达Rust如何帮助解决这个问题。
- en: Some time ago, I [proposed](/ml/linux-kernel/20230406215615.122099-1-daniel.almeida@collabora.com/)
    to the Linux media community that, since codec data is particularly sensitive,
    complex, and hard to parse, we could write some of the codec drivers in Rust to
    benefit from its safety guarantees. Some important concerns were raised back then,
    in particular that having to maintain a Rust abstraction layer would impose a
    high cost on the already overstretched maintainers. So I went back to the drawing
    board and came up with a new, simpler proposal; it differs a bit from the general
    flow of the [Rust-for-Linux](https://rust-for-linux.com/) community so far by
    realizing that we can convert error-prone driver sections without writing a whole
    layer of Rust bindings.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不久前，我向Linux媒体社区[提出](/ml/linux-kernel/20230406215615.122099-1-daniel.almeida@collabora.com/)，由于编解码数据特别敏感、复杂且难以解析，我们可以考虑用Rust编写一些编解码驱动程序，以从其安全性保障中获益。当时提出了一些重要的问题，特别是指出，在已经不堪重负的维护者身上增加维护Rust抽象层的成本将是一个很大的负担。因此，我又重新构思并提出了一个新的、更简单的方案；这与[Rust-for-Linux](https://rust-for-linux.com/)社区迄今为止的一般流程有些不同，它认识到我们可以在不编写整个Rust绑定层的情况下转换易出错的驱动程序部分。
- en: The dangers of stateless decoders
  id: totrans-split-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 无状态解码器的危险
- en: Most of my blog posts at Collabora have focused on the difference between stateful
    and stateless codec APIs. I recommend a quick reading of [this one](https://www.collabora.com/news-and-blog/blog/2021/06/23/adding-vp9-and-mpeg2-stateless-support-in-v4l2codecs-for-gstreamer/)
    for an introduction to the domain before following through with this text. [This
    talk](https://www.youtube.com/watch?v=9wY06rusbMM) by my colleague Nicolas Dufresne
    is also a good resource. Stateless decoders operate as a clean slate and, in doing
    so, they require a lot of metadata that is read directly from the bit stream before
    decoding each and every frame. Note that this metadata directs the decoding, and
    is used to make control-flow decisions within the codec; erroneous or incorrect
    metadata can easily send a codec astray.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我在Collabora的大部分博客文章都集中讨论有状态和无状态编解码器API之间的差异。在开始阅读本文之前，我建议先快速阅读[这篇文章](https://www.collabora.com/news-and-blog/blog/2021/06/23/adding-vp9-and-mpeg2-stateless-support-in-v4l2codecs-for-gstreamer/)来介绍这一领域。我的同事Nicolas
    Dufresne的[这次演讲](https://www.youtube.com/watch?v=9wY06rusbMM)也是一个很好的资源。无状态解码器以干净的方式运作，因此它们需要直接从位流中读取的大量元数据，以在解码每一帧之前进行控制。需要注意的是，这些元数据指导解码过程，并用于在编解码器内部做出控制流决策；错误或不正确的元数据可能会轻易使编解码器误入歧途。
- en: User space is responsible for parsing this metadata and feeding it to the drivers,
    which perform a best-effort validation routine before consuming it to get instructions
    on how to proceed with the decoding process. It is the kernel's responsibility
    to comb through and transfer this data to the hardware. The parsing algorithms
    are laid out by the codec specification, which are usually hundreds of pages long
    and subject to errata like any other technical document.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 用户空间负责解析这些元数据并将其提供给驱动程序，驱动程序在使用前执行尽力而为的验证例程以获取关于如何继续解码过程的指令。内核的责任是浏览和传输这些数据到硬件。解析算法由编解码规范详细说明，通常是数百页长，并像其他技术文档一样存在勘误。
- en: Given the above, it is easy to see the finicky nature of stateless decoder drivers.
    Not long ago, some researchers crafted a [program](https://github.com/h26forge/h26forge)
    capable of emitting a syntactically correct but semantically non-compliant H.264
    stream exploiting the [weaknesses](https://github.com/h26forge/h26forge/blob/main/docs/MOTIVATION.md)
    that are inherent to the decoding process. Interested readers can refer themselves
    to the [actual paper](https://wrv.github.io/h26forge.pdf).
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上述内容，很容易看出无状态解码器驱动程序的棘手性质。不久前，一些研究人员开发了一个[程序](https://github.com/h26forge/h26forge)，能够生成语法上正确但在语义上不符合的
    H.264 流，利用了解码过程中固有的[弱点](https://github.com/h26forge/h26forge/blob/main/docs/MOTIVATION.md)。有兴趣的读者可以参考[实际论文](https://wrv.github.io/h26forge.pdf)。
- en: The role of Video4Linux2 codec libraries
  id: totrans-split-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Video4Linux2 编解码库的角色
- en: A key aspect of hardware accelerators is that they implement significant parts
    of a workload in hardware, but often not all of it. For codec drivers in particular,
    this means that the metadata is not only used to control the decoding process
    in the device, it is also fed to codec algorithms that run in the CPU.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件加速器的一个关键方面是它们在硬件中实现了工作负载的重要部分，但通常不是全部。特别是对于编解码驱动程序，这意味着元数据不仅用于控制设备中的解码过程，还供给在
    CPU 中运行的编解码算法。
- en: These codec algorithms are laid out in the codec's specification, and it would
    not make sense for each driver to have a version of that in their source code,
    so that part gets abstracted away as kernel libraries. To see the code implementing
    these codecs, look at files like [`drivers/media/v4l2-core/v4l2-vp9.c`](https://elixir.bootlin.com/linux/latest/source/drivers/media/v4l2-core/v4l2-vp9.c),
    [`v4l2-h264.c`](https://elixir.bootlin.com/linux/latest/source/drivers/media/v4l2-core/v4l2-h264.c),
    and [`v4l2-jpeg.c`](https://elixir.bootlin.com/linux/latest/source/drivers/media/v4l2-core/v4l2-jpeg.c)
    in the kernel sources.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些编解码算法在编解码规范中详细说明，每个驱动程序的源代码中都不会有它们的版本，因此这部分会被抽象为内核库。要查看实现这些编解码器的代码，请查看内核源代码中的文件，例如[`drivers/media/v4l2-core/v4l2-vp9.c`](https://elixir.bootlin.com/linux/latest/source/drivers/media/v4l2-core/v4l2-vp9.c)，[`v4l2-h264.c`](https://elixir.bootlin.com/linux/latest/source/drivers/media/v4l2-core/v4l2-h264.c)
    和 [`v4l2-jpeg.c`](https://elixir.bootlin.com/linux/latest/source/drivers/media/v4l2-core/v4l2-jpeg.c)。
- en: What's more, with the introduction of more AV1 drivers and the proposed V4L2
    Stateless Encoding API, the number of codec libraries will probably increase.
    With the stateless encoding API, a new challenge will be to capture parts of the
    metadata in the kernel successfully, bit by bit, while parsing data returned from
    the device. For more information on the stateless encoding initiative, see [this
    talk](https://www.youtube.com/watch?v=lSg_bwD-Jhw), by my colleague Andrzej Pietrasiewicz
    or [the mailing-list discussion](https://lwn.net/ml/linux-media/ZK2NiQd1KnraAr20@aptenodytes/).
    A tentative user-space API for H.264 alongside a driver for Hantro devices was
    also [submitted](/ml/linux-media/20231116154816.70959-1-andrzej.p@collabora.com/)
    last year, although the discussion is still on a RFC level.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，随着越来越多的 AV1 驱动程序的引入以及建议的 V4L2 无状态编码 API 的提出，编解码库的数量可能会增加。有了无状态编码 API，成功捕获内核中部分元数据的一个新挑战是逐位地解析从设备返回的数据。关于无状态编码倡议的更多信息，请参阅[此讲座](https://www.youtube.com/watch?v=lSg_bwD-Jhw)，由我的同事安德烈·皮耶特拉谢维奇主讲，或者参考[邮件列表讨论](https://lwn.net/ml/linux-media/ZK2NiQd1KnraAr20@aptenodytes/)。去年还提交了一种
    H.264 用户空间 API 和 Hantro 设备的驱动程序，尽管讨论仍处于 RFC 阶段。
- en: Why Rust?
  id: totrans-split-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为什么选择 Rust？
- en: Security and reliability are paramount in software development; in the kernel,
    initiatives aimed at improving automated testing and continuous integration are
    gaining ground. As much as this is excellent news, it does not fix many of the
    hardships that stem from the use of C as the chosen programming language. The
    work being done by Miguel Ojeda and others in the Rust-for-Linux project has the
    potential to finally bring relief to problems such as complex locking, error handling,
    bounds checking, and hard-to-track ownership that span a large number of domains
    and subsystems.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发中安全性和可靠性至关重要；在内核中，旨在改善自动化测试和持续集成的倡议正在取得进展。尽管这是个好消息，但并不能解决因选择 C 作为编程语言而产生的许多困难。Miguel
    Ojeda 和其他人在 Rust-for-Linux 项目中的工作有望最终解决诸如复杂的锁定、错误处理、边界检查和跨多个领域和子系统的难以跟踪所有权问题，从而带来缓解。
- en: Codec code is also plagued by many of the pitfalls listed above and we have
    discussed at length about the finicky and error-prone nature of codec algorithms
    and metadata. Said algorithms, as we've seen, will use the metadata to guide the
    control flow on the fly and also to index into various memory locations. That
    has been shown to be a major problem in the user-space stack, and the problem
    is even more critical at the kernel level.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 编解码器代码也受到上述许多问题的困扰，我们已经详细讨论了编解码算法和元数据的挑剔和容易出错的性质。正如我们所见，这些算法将使用元数据来动态引导控制流，还将用它们来索引到各种内存位置。这在用户空间堆栈中已经显示出是一个主要问题，在内核级别则更为严重。
- en: Rust can help by making a whole class of errors impossible, thus significantly
    reducing the attack surface. In particular, raw pointer arithmetic and problematic
    `memcpy()` calls can be eliminated, array accesses can be checked at run time,
    and error paths can be greatly simplified. Complicated algorithms can be expressed
    more succinctly through the use of more modern abstractions such as iterators,
    ranges, generics, and the like. These add up to a more secure driver and, thus,
    a more secure system.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 可以通过使一类错误变得不可能来帮助，从而显著减少攻击面。特别是，可以在运行时检查原始指针算术和有问题的 `memcpy()` 调用，简化错误路径。通过使用迭代器、范围、泛型等现代抽象，可以更简洁地表达复杂算法。这些都会导致更安全的驱动程序，从而实现更安全的系统。
- en: Porting codec code to Rust, piece by piece
  id: totrans-split-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 逐步将编解码器代码移植到 Rust
- en: If adding a layer of Rust abstractions is deemed problematic for some, a cleaner
    approach can focus on using Rust only where it matters by converting a few functions
    at a time. This technique composes well, and works by instructing the Rust compiler
    to generate code that obeys the C calling convention by using the `extern "C"`
    construct, so that existing C code in the kernel can call into Rust seamlessly.
    Name-mangling also has to be turned off for whatever symbols the programmer plans
    to expose, while a `[repr(C)]` annotation ensures that the Rust compiler will
    lay out structs, unions, and arrays as C would for interoperability.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果认为添加 Rust 抽象层存在问题，更清晰的方法可以集中精力，仅在需要时逐步转换为 Rust。这种技术组合良好，通过使用 `extern "C"`
    结构指示 Rust 编译器生成遵循 C 调用约定的代码，以便内核中现有的 C 代码可以无缝调用 Rust。还必须关闭名称重整，对计划暴露的任何符号使用 `[repr(C)]`
    注解，确保 Rust 编译器将结构体、联合体和数组按照 C 的布局进行排列，以实现互操作性。
- en: Once the symbol and machine code are in the object file, calling these functions
    now becomes a matter of matching signatures and declarations between C and Rust.
    Maintaining the ABI between both layers can be challenging but, fortunately, this
    is a problem that is solved by employing [`cbindgen`](https://github.com/mozilla/cbindgen),
    a standalone tool from Mozilla that is capable of generating an equivalent C header
    from a Rust file.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦符号和机器码进入目标文件，调用这些函数现在就成为在 C 和 Rust 之间匹配签名和声明的问题。在两个层之间保持 ABI 可能具有挑战性，但幸运的是，这个问题可以通过使用
    [`cbindgen`](https://github.com/mozilla/cbindgen) 解决，这是 Mozilla 的一个独立工具，能够从 Rust
    文件生成一个等效的 C 头文件。
- en: 'With that header in place, the linker will do the rest, and a seamless transition
    into Rust will take place at run time. Once in Rust land, one can freely call
    other Rust functions that do not have to be annotated with `#[no_mangle]` or `extern
    "C"`, which is why it''s advisable to use the C entry point only as a facade for
    the native Rust code:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个头文件，链接器将会完成剩下的工作，在运行时无缝地过渡到 Rust。进入 Rust 领域后，可以自由调用其他不需要标注 `#[no_mangle]`
    或 `extern "C"` 的 Rust 函数，因此建议仅将 C 入口点作为本机 Rust 代码的外观：
- en: '[PRE0]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, `v4l2_vp9_fw_update_probs_rs()` is called from C, but immediately
    jumps to `fw_update_probs()`, a native Rust function where the actual implementation
    lives.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，从C中调用`v4l2_vp9_fw_update_probs_rs()`，但立即跳转到`fw_update_probs()`，这是一个本地的Rust函数，其中实现了实际功能。
- en: In a C driver, the switch is as simple as calling the `_rs()` version instead
    of the C version. The parameters needed by a Rust function can be neatly packed
    into a struct on the C side, freeing the programmer from writing abstractions
    for a lot of types.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在C驱动程序中，转换只需简单调用`_rs()`版本而不是C版本。Rust函数需要的参数可以在C端整齐地打包到一个结构体中，使程序员无需为许多类型编写抽象。
- en: Putting that to the test
  id: totrans-split-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 把它放到测试中
- en: Given the ability to rewrite error-prone C code into Rust one function at a
    time, I believe it is now time to rewrite our codec libraries, together with any
    driver code that directly accesses the bit stream parameters. Thankfully, it is
    easy to test codec drivers and their associated libraries, at least for decoders.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于现在可以逐个函数将易出错的C代码重写为Rust，我认为现在是时候重写我们的编解码库了，包括直接访问比特流参数的任何驱动程序代码。幸运的是，至少对于解码器来说，测试编解码器驱动程序及其相关库非常容易。
- en: 'The [Fluster tool](https://github.com/fluendo/fluster) by Fluendo can automate
    conformance testing by running a decoder and comparing its results against that
    of the canonical implementation. This gives us an objective metric for regressions
    and, in effect, tests the whole infrastructure: from drivers, to codec libraries
    and, even, the V4L2 framework. My plan is to see Rust code being tested on [KernelCI](https://kernelci.org/)
    in the near future so as to assess its stability and establish a case for its
    upstreaming.'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: Fluendo的[Fluster工具](https://github.com/fluendo/fluster)可以通过运行解码器并将其结果与规范实现进行比较来自动化一致性测试。这为我们提供了一个关于退化的客观指标，并有效地测试了整个基础设施：从驱动程序到编解码库，甚至V4L2框架。我计划在不久的将来在[KernelCI](https://kernelci.org/)上测试Rust代码，以评估其稳定性并为其上游提供案例。
- en: By gating any new Rust code behind a `KConfig` option, users can keep running
    the C implementation while the continuous-integration system tests the Rust version.
    It is by establishing this level of trust that I hope to see Rust gain ground
    in the kernel.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将任何新的Rust代码门控在`KConfig`选项后面，用户可以继续运行C实现，同时持续集成系统测试Rust版本。通过建立这种信任，我希望看到Rust在内核中获得进展。
- en: Readers willing to judge this initiative may refer to the [patch set](/ml/linux-media/20240227215146.46487-1-daniel.almeida@collabora.com/)
    I sent to the Linux media mailing list. It ports the VP9 library written by Pietrasiewicz
    into Rust as a proof of concept, converting both the `hantro` and `rkvdec` drivers
    to use the new version. It then converts error-prone parts of `rkvdec` itself
    into Rust, which encompasses all code touching the VP9 bit stream parameters directly,
    showing how Rust and C can both coexist within a driver.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有意评估这一倡议的读者可以参考我发送到Linux媒体邮件列表的[补丁集](/ml/linux-media/20240227215146.46487-1-daniel.almeida@collabora.com/)。它将由Pietrasiewicz编写的VP9库作为概念验证移植到Rust中，转换了`hantro`和`rkvdec`驱动程序以使用新版本。然后将`rkvdec`本身的容易出错部分转换为Rust，包括所有直接接触VP9比特流参数的代码，展示了Rust和C如何在驱动程序中共存。
- en: So far, only one person has replied, noting that the patches did not introduce
    any regressions for them. I plan on discussing this idea further in the next Media
    Summit, the annual gathering of the kernel media developers that is yet to take
    place this year.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，只有一个人回复说这些补丁对他们没有引入任何退化。我计划在下一次媒体峰会上进一步讨论这个想法，这是一年一度的核心媒体开发者聚会，今年尚未举行。
- en: 'In my opinion, not only should we strive to convert the existing libraries
    to Rust, but we should also aim to write the new libraries that will invariably
    be needed directly in Rust. If this proves successful, I hope to show that there
    will be no more space for C codec libraries in the media tree. As for drivers,
    I hope to see Rust used where it matters: in places where its safety and improved
    ergonomics proves worth the hassle.'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，我们不仅应该努力将现有库转换为Rust，还应该立志直接用Rust编写不可避免需要的新库。如果这证明成功，我希望表明在媒体树中将不再容纳C编解码库的空间。至于驱动程序，我希望看到Rust在真正需要其安全性和改进人机工程学的地方得到应用。
- en: Getting involved
  id: totrans-split-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参与其中
- en: Those willing to contribute to this effort may start by introducing themselves
    to video codecs by reading the specification for their codec of choice. A good
    second step is to refer to GStreamer or FFmpeg to learn how stateless codec APIs
    can be used to drive a codec accelerator. For GStreamer, in particular, look for
    the [v4l2codecs](https://gitlab.freedesktop.org/gstreamer/gstreamer/-/tree/main/subprojects/gst-plugins-bad/sys/v4l2codecs?ref_type=heads)
    plugin. Learning `cbindgen` is better accomplished by referring to the [`cbindgen`
    documentation](https://github.com/mozilla/cbindgen/blob/master/docs.md) provided
    by Mozilla. Lastly, reading through a codec driver like `rkvdec` and the [V4L2
    memory-to-memory stateless video decoder interface documentation](https://www.kernel.org/doc/html/latest/userspace-api/media/v4l/dev-stateless-decoder.html)
    can also be helpful.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有意贡献于此工作的人可以先通过阅读所选择编解码器的规范来了解视频编解码器。一个很好的第二步是参考 GStreamer 或 FFmpeg，了解如何使用无状态编解码器
    API 驱动编解码器加速器。特别是对于 GStreamer，可以查找[v4l2codecs](https://gitlab.freedesktop.org/gstreamer/gstreamer/-/tree/main/subprojects/gst-plugins-bad/sys/v4l2codecs?ref_type=heads)插件。通过参考由
    Mozilla 提供的[`cbindgen` 文档](https://github.com/mozilla/cbindgen/blob/master/docs.md)，可以更好地掌握
    `cbindgen`。最后，阅读诸如 `rkvdec` 和[V4L2 内存到内存无状态视频解码器接口文档](https://www.kernel.org/doc/html/latest/userspace-api/media/v4l/dev-stateless-decoder.html)也会有所帮助。
- en: '* * *'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: (
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: （
- en: '[Log in](https://lwn.net/Login/?target=/Articles/970565/)'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[登录](https://lwn.net/Login/?target=/Articles/970565/)'
- en: to post comments)
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 发表评论）
