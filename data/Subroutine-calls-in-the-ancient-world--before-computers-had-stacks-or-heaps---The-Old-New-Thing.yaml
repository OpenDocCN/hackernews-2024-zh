- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 12:52:53'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 12:52:53'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Subroutine calls in the ancient world, before computers had stacks or heaps
    - The Old New Thing
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 古代世界的子程序调用，在计算机没有栈或堆之前 - The Old New Thing
- en: 来源：[https://devblogs.microsoft.com/oldnewthing/20240401-00/?p=109599](https://devblogs.microsoft.com/oldnewthing/20240401-00/?p=109599)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://devblogs.microsoft.com/oldnewthing/20240401-00/?p=109599](https://devblogs.microsoft.com/oldnewthing/20240401-00/?p=109599)
- en: Subroutine calls in the ancient world, before computers had stacks or heaps
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 古代世界的子程序调用，在计算机没有栈或堆之前
- en: We take stacks and heaps for granted nowadays, but back in the very old days
    of computing, computers operated without a stack or a heap.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对栈和堆理所当然，但在计算机非常古老的日子里，计算机是没有栈或堆的。
- en: Tell a recent college graduate this, and you may as well tell them that there
    was a time when you didn’t have instant access to millions of cat videos.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉最近刚毕业的大学生这件事，你可能也可以告诉他们曾经有一段时间你没有即时访问数百万只猫的视频。
- en: It’s not too hard to imagine computing without dynamic memory allocation. You
    just have to use fixed-size memory buffers for everything. If you have to operate
    on variable-sized data, you reserved a fixed-size buffer of some capacity that
    is large enough to accommodate any data you would reasonably be expected to process,
    and if somebody asked for more, you just exited the program with a fatal error.
    If you were really nice, you would provide a compile-time configuration so your
    clients could adjust the maximum capacity to suit their datasets. And if you were
    really fancy, you wrote a custom allocator that operated on that fixed-size buffer
    so people could “allocate” and “free” memory from the buffer.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下没有动态内存分配并不难。您只需为所有内容使用固定大小的内存缓冲区。如果必须操作可变大小的数据，您将保留一个足够大以容纳任何您合理预期处理的数据的固定大小缓冲区，如果有人要求更多，则只需用致命错误退出程序。如果您真的好心，您将提供一个编译时配置，以便您的客户可以调整最大容量以适应其数据集。如果您真的高级，您将编写一个自定义分配器，该分配器将在该固定大小缓冲区上运行，以便人们可以从中“分配”和“释放”内存。
- en: But operating without a stack? How did you call a function if you didn’t have
    a stack for the return address or local variables?
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但是没有栈如何调用函数？如果没有栈用于返回地址或局部变量的话？
- en: Here’s how it worked.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它的运作方式如下。
- en: First, the compiler defined a secret global variable for each inbound function
    parameter, plus another secret global variable for each function to hold the return
    address. It also defined a secret global variable for each of the function’s local
    variables.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，编译器为每个传入函数参数定义了一个秘密全局变量，以及另一个用于保存返回地址的函数的秘密全局变量。它还为函数的每个局部变量定义了一个秘密全局变量。
- en: To generate a function call, the compiler assigned the parameter values to the
    corresponding secret global variables, assigned the return address to the function’s
    secret “return address variable”, and then jumped to the start of the function.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 生成函数调用时，编译器会将参数值分配给相应的秘密全局变量，并将返回地址分配给函数的秘密“返回地址变量”，然后跳转到函数的起始位置。
- en: The function read its parameters from its secret global variables, and used
    the pre-defined secret global variables that corresponded to its logically local
    variables. When the function was finished, it jumped to the address held in the
    function’s secret “return address variable.”
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 函数从其秘密全局变量中读取参数，并使用预定义的与其逻辑局部变量对应的秘密全局变量。当函数完成时，它跳转到函数秘密的“返回地址变量”中保存的地址。
- en: 'For example, suppose you had code like this, written in a C-like language:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您有这样的代码，用类似C语言编写：
- en: '[PRE0]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This would be transformed by the compiler into something like this:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器会将其转换为类似于这样的内容：
- en: '[PRE1]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Check it out: We did a function call and return without a stack!'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个：我们做了一个没有栈的函数调用和返回！
- en: 'Now, you can optimize the ABI by, say, passing some of these values in registers
    rather than globals. For example, most processors had a special “link” register
    and a special instruction “branch with link” that automatically set the link register
    equal to the address of the instruction after the “branch with link” instruction,
    And maybe you optimize the calling convention to pass the first two parameters
    in registers, resulting in this:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过优化ABI，例如将一些这些值通过寄存器而不是全局变量传递来优化。例如，大多数处理器都有一个特殊的“链接”寄存器和一个特殊的指令“链接分支”，它会自动将链接寄存器设置为“链接分支”指令之后的指令地址，而且也许您可以优化调用约定以将前两个参数传递给寄存器，结果是这样的：
- en: '[PRE2]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There was just one catch: You can’t do recursion.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个小问题：你不能递归。
- en: Recursion doesn’t work because a recursive call would overwrite the return-address
    variable with the return address of the recursive call, and when the outer call
    completed, it would jump to the wrong place.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 递归不起作用，因为递归调用会用递归调用的返回地址覆盖返回地址变量，并且当外部调用完成时，它会跳转到错误的位置。
- en: 'The programming languages of the day solved this problem by simply declaring
    it illegal: They didn’t support recursion.¹'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当时的编程语言通过简单地将其声明为非法来解决这个问题：它们不支持递归。¹
- en: '**Bonus chatter**: Some compilers were even sneakier and used self-modifying
    code: The special return-address variable was really the address field of the
    jump instruction at the end of the function!'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**额外的闲聊**：一些编译器甚至更狡猾，使用了自修改的代码：特殊的返回地址变量实际上是函数末尾跳转指令的地址字段！'
- en: 'This was occasionally not so much a sneaky trick as a practical necessity:
    [The processor might not support indirect jumps either](https://en.wikipedia.org/wiki/MIX)!'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这偶尔不是一个狡猾的技巧，而是一个实际的必要性：[处理器可能也不支持间接跳转](https://en.wikipedia.org/wiki/MIX)！
- en: 'After the practical value of subroutines was recognized, quite a few processors
    added a subroutine call instruction that worked by storing the return address
    at the first word of the subroutine, and beginning execution at the second word
    of the subroutine. To return from a subroutine, you execute an indirect jump through
    the subroutine start label. (As I recall, some processors stored the return address
    at the word *before* the first instruction of the subroutine.) Here’s what it
    looked like using a made-up assembly language:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在认识到子程序的实际价值后，相当多的处理器增加了一个子程序调用指令，通过将返回地址存储在子程序的第一个字，并从子程序的第二个字开始执行来工作。要从子程序返回，您执行通过子程序开始标签的间接跳转。（据我回忆，一些处理器将返回地址存储在子程序第一个指令之前的字里。）这是使用虚构的汇编语言时的情况：
- en: '[PRE3]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When the CPU executed the `bsr` branch-to-subroutine instruction, it stored
    the return address into the first word of `add_two_values` (overwriting the sacrificial
    `nop`) and began execution at the following instruction, the `add r1 = r1, r2`.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当 CPU 执行 `bsr` 分支到子程序指令时，它将返回地址存储到 `add_two_values` 的第一个字（覆盖了牺牲的 `nop`），并开始执行下一条指令
    `add r1 = r1, r2`。
- en: ¹ FORTRAN initially didn’t even support subroutines! Those were added in 1958\.
    And support in FORTRAN for recursion didn’t become standard until 1991, and even
    then, you had to explicitly declare your subroutine as `RECURSIVE`.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: ¹ FORTRAN 最初甚至不支持子程序！那些功能是在 1958 年添加的。而且直到 1991 年，FORTRAN 对递归的支持才成为标准，即使那时，您也必须显式地将子程序声明为
    `RECURSIVE`。
