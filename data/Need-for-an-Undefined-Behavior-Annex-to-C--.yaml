- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:29:40'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:29:40
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Need for an Undefined Behavior Annex to C++
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要一个 C++ 未定义行为附录
- en: 来源：[https://community.intel.com/t5/Blogs/Tech-Innovation/Tools/Why-do-we-need-a-Undefined-Behavior-Annex-for-the-C-standard/post/1574397](https://community.intel.com/t5/Blogs/Tech-Innovation/Tools/Why-do-we-need-a-Undefined-Behavior-Annex-for-the-C-standard/post/1574397)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://community.intel.com/t5/Blogs/Tech-Innovation/Tools/Why-do-we-need-a-Undefined-Behavior-Annex-for-the-C-standard/post/1574397](https://community.intel.com/t5/Blogs/Tech-Innovation/Tools/Why-do-we-need-a-Undefined-Behavior-Annex-for-the-C-standard/post/1574397)
- en: Intel's developer software engineers are not only working on the latest optimizations
    and improvements in the Intel® oneAPI DPC++/C++ Compiler. We actively contribute
    to the advancements of Khronos Group's [SYCL*](https://www.khronos.org/sycl/),
    the [LLVM*](https://llvm.org/) Project, and the latest C and [C++ language standard](https://isocpp.org/std/the-standard)s .
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: Intel 的开发软件工程师不仅在 Intel® oneAPI DPC++/C++ Compiler 的最新优化和改进上工作。我们还积极贡献于 Khronos
    Group 的 [SYCL*](https://www.khronos.org/sycl/)、[LLVM*](https://llvm.org/) 项目以及最新的
    C 和 [C++ 语言标准](https://isocpp.org/std/the-standard)。
- en: We would like to share a more detailed picture of what is happening in the C
    and C++ world with the software engineering community and how Intel actively contributes
    to the latest standards revisions.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望与软件工程社区分享 C 和 C++ 领域正在发生的详细情况，以及 Intel 如何积极贡献于最新的标准修订。
- en: A Blog Series on Our C/C++ Standards Contributions
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于我们的 C/C++ 标准贡献的博客系列
- en: To that end, we are starting a new series of blog posts highlighting Intel's
    work on the C and C++ standards.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们正在开始一系列新的博客文章，重点介绍 Intel 在 C 和 C++ 标准上的工作。
- en: In particular, safety and security are one of the most active focus areas of
    our work on the next language standard revisions. This article will discuss the
    effort to create a much-needed Undefined Behavior Annex for the C++ Standard.
    This will strengthen coding standards for functional determinism and security,
    even for uncommon or unanticipated application code paths.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，安全性和安全性是我们在下一个语言标准修订中工作的最活跃的焦点之一。本文将讨论为 C++ 标准创建非常必要的未定义行为附录的努力。这将加强功能确定性和安全性的编码标准，即使是对于不常见或未预料到的应用程序代码路径。
- en: There are areas we know are important to the [Intel® oneAPI DPC++/C++ Compiler](https://www.intel.com/content/www/us/en/developer/tools/oneapi/dpc-compiler.html)
    user community and the oneAPI and C/C++ community at large. We know that because
    C and C++ are continuously evolving languages. Keeping track of the fast pace
    of change within the community is hard if you are not actively involved. Intel's
    C and C++ Compiler team is involved in this evolution at many points, participating
    in standardization through
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道，[Intel® oneAPI DPC++/C++ Compiler](https://www.intel.com/content/www/us/en/developer/tools/oneapi/dpc-compiler.html)
    用户社区和整个 oneAPI 和 C/C++ 社区的重点领域有几个。这是因为 C 和 C++ 是不断发展的语言。如果你不积极参与，很难跟上社区快速变化的步伐。Intel
    的 C 和 C++ 编译器团队在这一进程中参与了多个点，通过参与标准化工作。
- en: writing proposals
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写提案
- en: attending meetings
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参加会议
- en: chairing committees
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 担任委员会主席
- en: Submitting open-source contributions to LLVM and the Clang compiler.
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交开源贡献给 LLVM 和 Clang 编译器。
- en: Being active in the community at large.
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在整个社区中积极参与。
- en: We would like to take this engagement with the community to the next level by
    using this format to encourage a dialog about the latest developments and focal
    points in C and C++ programming.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望通过这种格式将我们与社区的互动推向一个新的水平，以鼓励关于 C 和 C++ 编程的最新发展和焦点的对话。
- en: Undefined Behavior Scenario Annex
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未定义行为情景附录
- en: 'I am Shafik Yaghmour, a Compiler Engineer at Intel supporting C++. I am active
    in the C++ community in many forms:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我是 Intel 的编译工程师 Shafik Yaghmour，支持 C++。我在 C++ 社区以多种形式积极参与：
- en: This blog highlights some of my work on the C++ standard committee.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇博客突出了我在 C++ 标准委员会的一些工作。
- en: 'My proposal, [P1705R1: Enumerating Core Undefined Behavior](http://wg21.link/P1705R1) [2],
    discusses adding an *undefined behavior* annex to the C++ standard.'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: '我的提案，[P1705R1: Enumerating Core Undefined Behavior](http://wg21.link/P1705R1)
    [2]，讨论了向 C++ 标准添加未定义行为附录。'
- en: Invoking *undefined behavior* has all sorts of unintuitive consequences, such
    as [the removal of safety checks](https://blog.regehr.org/archives/970), [turning
    finite loops infinite](https://stackoverflow.com/questions/32506643/c-compilation-bug), [booleans
    that can both be false and true](https://markshroyer.com/2012/06/c-both-true-and-false/),
    and apparently [undefined behavior can even time travel](https://devblogs.microsoft.com/oldnewthing/20140627-00/?p=633) [3] 
    🤯. These consequences are not desirable and can lead to safety and security issues.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 调用*未定义行为*会导致各种不直观的后果，例如[删除安全检查](https://blog.regehr.org/archives/970)、[使有限循环无限](https://stackoverflow.com/questions/32506643/c-compilation-bug)、[布尔值既可以是false也可以是true](https://markshroyer.com/2012/06/c-both-true-and-false/)，而且显然[未定义行为甚至可以时间旅行](https://devblogs.microsoft.com/oldnewthing/20140627-00/?p=633)
    [3] 🤯。这些后果是不可取的，可能导致安全和安全问题。
- en: Safety Implications of Undefined Behavior
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未定义行为的安全影响
- en: 'To avoid the consequences of undefined behavior in code, many industries employ
    two strategies:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免代码中未定义行为的后果，许多行业采用了两种策略：
- en: Rigorous and well-documented dynamic functional safety and security attack vector
    verification testing. Regulatory bodies often mandate this for safety-sensitive
    industries such as the medical devices, aviation, manufacturing and automotive
    sectors.
  id: totrans-split-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 严格且有文档支持的动态功能安全性和安全攻击向量验证测试。监管机构通常要求在医疗设备、航空、制造业和汽车等安全敏感行业中进行此类测试。
- en: Strict adherence to coding standards (such as MISRA and AUTOSAR) that may limit
    the developer's ability to take advantage of the latest C++ language features.
  id: totrans-split-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 严格遵守编码标准（如MISRA和AUTOSAR），这可能限制开发人员利用最新的C++语言特性的能力。
- en: Developers do this, because the consequence of undefined behavior causing non-deterministic
    functional outcomes may well mean the loss of not just property but could also
    endanger people's safety!
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员这样做，因为未定义行为导致的非确定性功能结果可能意味着不仅财产的损失，还可能危及人们的安全！
- en: 'So I ask myself:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此我问自己：
- en: What if we took advantage of the rich and long history of C and C++  and documented
    cases of undefined behavior to define a clear, complete, authoritative list of
    potential undefined behavior scenarios to avoid and recommended fixes?
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们利用C和C++的丰富且悠久的历史，并记录了未定义行为的案例，以定义一个明确、完整、权威的潜在未定义行为场景清单，以避免并推荐修复方法，那会怎样？
- en: What if this list was part of the C++ standard itself?
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这个清单成为C++标准的一部分呢？
- en: This could introduce a new level of functional safety and protections against
    many security exploits to a wider range of use cases without the restrictive overhead
    of DOE-178 or ISO 26262 type regulations.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能为更广泛的用例引入新的功能安全和对抗许多安全漏洞的保护，而无需DOE-178或ISO 26262类型的限制性开销。
- en: A Comprehensive Reference for Undefined Behavior
  id: totrans-split-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未定义行为的综合参考资料
- en: 'Currently, this proposed comprehensive reference for *undefined behavior* does
    not exist. If you are a developer attempting to understand what *undefined behaviors*
    you need to avoid, you must refer to the 2000+ page C++ standard document and
    the 20+ years of defect reports. To add to this challenge, *undefined behavior*
    can be referred to in the document using several different phrases:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，这个提议的关于*未定义行为*的综合参考资料还不存在。如果你是开发人员，试图理解需要避免的*未定义行为*，你必须参考2000多页的C++标准文档和20多年的缺陷报告。增加难度的是，文档中可能用几种不同的短语来描述*未定义行为*：
- en: the behavior of the program is undefined
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序的行为是未定义的
- en: has undefined behavior
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行为未定义
- en: results in undefined behavior
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导致未定义行为
- en: the behavior is undefined
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行为是未定义的
- en: have undefined behavior
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有未定义行为
- en: is undefined
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是未定义的
- en: result has undefined behavior
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果具有未定义行为
- en: Then, after finding each *undefined behavior* entry, there may not be an example.
    Therefore, it may be unclear how the *undefined behavior* works. This is a daunting
    task even for a very knowledgeable C++ developer. This also hinders tool developers
    from building tools to make software more secure, as well as researchers in software
    safety and security.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在找到每个*未定义行为*条目后，可能没有示例。因此，可能不清楚*未定义行为*的工作原理。即使对于非常了解C++的开发人员来说，这也是一项艰巨的任务。这也妨碍了工具开发人员构建使软件更安全的工具，以及软件安全和安全性研究人员。
- en: We are also ignoring ***implicit undefined behavior***, which is behavior that
    violates the rules in the standard but is not explicitly called out as *undefined
    behavior*. It is just as bad as the explicit kind but much harder to find.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也忽略 ***隐式未定义行为***，这是违反标准规则但没有明确指出为 *未定义行为* 的行为。它和显式的那种一样糟糕，但更难发现。
- en: So, one of the main goals of *P1705R1* is to create an ***undefined behavior
    annex*** or listing of ***explicit* *undefined behavior ***in the C++ standard.
    Each entry would include a description in accessible language and an example(s)
    of the *undefined behavior* in code. This should allow developers to learn about
    undefined behavior. While we don't expect everyday developers to refer to the
    C++ standard themselves, having the material will allow blog authors, conference
    presenters, and trainers to develop more comprehensive material covering *undefined
    behavior*.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，*P1705R1* 的主要目标之一是创建一个 ***未定义行为附件*** 或者列出 ***显式* *未定义行为*** 在 C++ 标准中。每一条目都会包括以易于理解的语言描述和代码中的
    *未定义行为* 示例。这应该让开发人员能够学习有关未定义行为的知识。尽管我们不指望日常开发人员自行查阅 C++ 标准，但这些材料将允许博客作者、会议演讲者和培训师开发更全面的涵盖
    *未定义行为* 的资料。
- en: This will also allow the C++ committee to track the growth or shrinkage of *undefined
    behavior*. We also will require future proposal authors to keep the annex updated
    if they add or remove *undefined behavior*. They are making *undefined behavior*
    an explicit topic to be discussed when reviewing a proposal. It also gives explicit
    targets for future proposal writers to attempt to shrink *undefined behavior*
    in the standard.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这还将允许 C++ 委员会跟踪 *未定义行为* 的增长或减少。我们还将要求未来的提案作者保持附件的更新，如果他们添加或删除 *未定义行为*。他们正在使
    *未定义行为* 成为审查提案时讨论的明确主题。这也为未来的提案作者提供了明确的目标，试图在标准中减少 *未定义行为*。
- en: Another goal that came up during a recent review of the proposal is that we
    want to turn implicit *undefined behavior* into ***explicit undefined behavior***.
    This requires identifying *i**mplicit undefined behavior*** and then having the [Core
    Language Wording Group](https://isocpp.org/std/the-committee)  update the wording
    to make the behavior explicitly *undefined*. The benefit here is that we document
    more *undefined behavior*. It is also an opportunity to determine if the intent
    was for this to be *undefined* and, if not, document that.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近一次提案审查中提出的另一个目标是，我们希望将隐式 *未定义行为* 转变为 ***显式未定义行为***。这需要识别 *隐式未定义行为*，然后让 [核心语言措辞组](https://isocpp.org/std/the-committee) 更新措辞，使行为明确为
    *未定义*。这里的好处是我们记录更多 *未定义行为*。这也是一个机会来确定这是否是意图为此为 *未定义*，如果不是，则记录下来。
- en: 'In [P3075R0: Adding an Undefined Behavior and IFNDR Annex](https://wg21.link/P3075R0) [4],
    I also extend this idea to include adding an ill-formed no diagnostic required
    (IFNDR) annex. *IFNDR* differs from *undefined behavior* in that while your program
    is still *undefined,* it is a [static property of your program and not a run-time
    property](https://shafik.github.io/c++/2023/07/09/lets-enumerate-ub-part-1.html).
    While this does not have the unrestricted runtime consequences of *undefined behavior,*
    it can still lead to safety and security issues since programs containing *IFNDR*
    may not be diagnosed and may have unintuitive results.'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: '在 [P3075R0: 添加未定义行为和 IFNDR 附件](https://wg21.link/P3075R0) [4] 中，我还扩展了这个想法，包括添加一个不需要诊断的不规范附件（IFNDR）。*IFNDR*
    与 *未定义行为* 的区别在于，尽管程序仍然是 *未定义* 的，但这是程序的 *静态属性而非运行时属性*。虽然这不像 *未定义行为* 那样有无限制的运行时后果，但它仍可能导致安全和安全问题，因为包含
    *IFNDR* 的程序可能不会被诊断，并可能产生出乎意料的结果。'
- en: Share Your Thoughts
  id: totrans-split-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分享您的想法
- en: 'We are looking forward to your feedback on proposal [P3075R0: Adding an Undefined
    Behavior and IFNDR Annex](https://wg21.link/P3075R0).'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: '我们期待您对提案 [P3075R0: 添加未定义行为和 IFNDR 附件](https://wg21.link/P3075R0) 的反馈。'
- en: What do you think should be considered. Let us work together to advance the
    C++ standard set it on the path to fully embrace safety and security paradigms.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您认为应该考虑什么？让我们共同努力推动 C++ 标准的发展，使其完全拥抱安全和安全范式。
- en: Please feel free to leave comments below.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请随时在下方留下评论。
- en: References
  id: totrans-split-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参考资料
- en: '**[1]** S. Yaghmour, [What is the Strict Aliasing Rule and Why do we care?,](https://gist.github.com/shafik/848ae25ee209f698763cffee272a58f8)
    Gist.GitHub, 2020'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**[1]** S. Yaghmour，《什么是严格别名规则，为什么我们关心？》，Gist.GitHub，2020年'
- en: '**[2]** S. Yaghmour, P1075R1: [Enumerating Core Undefined Behavior](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1705r1.html),
    2019'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**[2]** S. Yaghmour，P1075R1：[列举核心未定义行为](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1705r1.html)，2019'
- en: '**[3]** R. Chen, [Undefined behavior can result in time travel](https://devblogs.microsoft.com/oldnewthing/20140627-00/?p=633),
    Microsoft* DevBlogs, 2014'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**[3]** R. Chen，[未定义行为可能导致时间旅行](https://devblogs.microsoft.com/oldnewthing/20140627-00/?p=633)，Microsoft*
    DevBlogs，2014'
- en: '**[4]** S. Yaghmour, P3075R0: [Adding an Undefined Behavior and IFNDR Annex,](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p3075r0.pdf) 
    2023'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**[4]** S. Yaghmour，P3075R0：[添加未定义行为和IFNDR附件](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p3075r0.pdf)，2023'
- en: Further Reading
  id: totrans-split-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进一步阅读
