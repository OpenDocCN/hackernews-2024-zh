- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:33:07'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:33:07'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: GoFetch
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GoFetch
- en: 来源：[https://gofetch.fail](https://gofetch.fail)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://gofetch.fail](https://gofetch.fail)
- en: Constant-time programming is a paradigm that aims to harden code against side-channel
    attacks by ensuring that all operations take the same amount of time, regardless
    of their operands. In particular, constant-time code cannot contain secret-dependent
    branches, loops, or other control structures. Moreover, as the CPU caches different
    addresses with attacker-observable latency, constant-time code cannot mix data
    and addresses in any way and prohibits the use of secret-dependent memory accesses
    or array indices.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 恒定时间编程是一种范式，旨在通过确保所有操作的执行时间相同，无论其操作数如何，来增强代码对侧信道攻击的抵御能力。特别是，恒定时间代码不能包含依赖于秘密的分支、循环或其他控制结构。此外，由于
    CPU 缓存不同地址的可观察延迟与攻击者相关，恒定时间代码不能以任何方式混合数据和地址，禁止使用依赖于秘密的内存访问或数组索引。
- en: We show that even if a victim correctly separates data from addresses by following
    the constant-time paradigm, the DMP will generate secret-dependent memory access
    on the victim's behalf, resulting in variable-time code susceptible to our key-extraction
    attacks.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 即使受害者按照恒定时间范式正确分离数据和地址，DMP 也将代表受害者生成依赖于秘密的内存访问，导致易受我们密钥提取攻击影响的可变时间代码。
