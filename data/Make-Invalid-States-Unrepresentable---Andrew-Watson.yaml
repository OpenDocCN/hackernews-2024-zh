- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:28:28'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:28:28
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Make Invalid States Unrepresentable - Andrew Watson
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使无效状态不可表示 - Andrew Watson
- en: 来源：[https://www.awwsmm.com/blog/make-invalid-states-unrepresentable](https://www.awwsmm.com/blog/make-invalid-states-unrepresentable)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.awwsmm.com/blog/make-invalid-states-unrepresentable](https://www.awwsmm.com/blog/make-invalid-states-unrepresentable)
- en: '[[edit history]](https://github.com/awwsmm/awwsmm.com/commits/master/blog/make-invalid-states-unrepresentable.md)'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[[编辑历史记录]](https://github.com/awwsmm/awwsmm.com/commits/master/blog/make-invalid-states-unrepresentable.md)'
- en: Suppose you have a `Person` class in your program, and that a `Person` has an
    `age`. What type should the `age` be?
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您在程序中有一个`Person`类，并且一个`Person`有一个`age`。`age`应该是什么类型？
- en: '`age` as a `String`'
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`age`作为`String`'
- en: '[PRE0]'
  id: totrans-split-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '"Of course it shouldn''t be a `String`" you might think. But why? The reason
    is that we can then end up with code like'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '"当然，它不应该是一个`String`"，你可能会想。但为什么呢？原因是我们可以得到类似以下的代码'
- en: '[PRE1]'
  id: totrans-split-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we ever wanted to *do* anything with an `age: String`, we would need to
    validate it everywhere'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们曾经想要*使用*`age: String`做任何事情，我们需要在所有地方验证它'
- en: '[PRE2]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is cumbersome for the programmer *writing* the code, and makes it difficult
    for any programmer *reading* the code, as well.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这对编写代码的程序员来说很麻烦，同时也让阅读代码的任何程序员感到困难。
- en: We could move this validation to a separate method
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此验证移到一个单独的方法中
- en: '[PRE3]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '...but this is still not ideal. The code is a bit cleaner, but we still need
    to parse a `String` into an `Int` every time we want to do anything numeric (comparison,
    arithmetic, etc.) with the `age`. This is often called ["stringly-typed" data](https://en.wiktionary.org/wiki/stringly-typed).'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '...但这仍然不理想。代码变得更清晰了，但我们仍然需要每次想要执行任何数字操作（比较、算术等）时将`String`解析为`Int`。这通常被称为["stringly-typed"
    data](https://en.wiktionary.org/wiki/stringly-typed)。'
- en: This can also move the program into an illegal state by throwing an `Exception`.
    If we're going to fail anyway, we should [fail fast](https://www.martinfowler.com/ieeeSoftware/failFast.pdf).
    We can do better.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以通过抛出`Exception`将程序移动到非法状态。如果我们最终会失败，我们应该[尽快失败](https://www.martinfowler.com/ieeeSoftware/failFast.pdf)。我们可以做得更好。
- en: '`age` as an `Int`'
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`age`作为`Int`'
- en: Your first instinct might have been to make `age` an `Int`, rather than a `String`
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你的第一个直觉可能是将`age`作为`Int`，而不是`String`
- en: '[PRE4]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If so, you have good instincts. An `age: Int` is much nicer to work with'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '如果是这样，你有很好的直觉。`age: Int`更容易操作'
- en: '[PRE5]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这
- en: is easier to write
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易编写
- en: is easier to read
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易阅读
- en: fails fast
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速失败
- en: You *cannot construct* an instance of the `Person` class with a `String` `age`
    now. That is an invalid state. We have [made it unrepresentable](https://www.cs.rice.edu/~javaplt/411/23-spring/NewReadings/functional_programming_on_Wall_Street.pdf),
    using the type system. The compiler will not allow this program to compile.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您*无法*使用`String`的`age`构造`Person`类的实例。这是一个无效状态。我们使用类型系统[使其不可表示](https://www.cs.rice.edu/~javaplt/411/23-spring/NewReadings/functional_programming_on_Wall_Street.pdf)。编译器不会允许这个程序编译。
- en: Problem solved, right?
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 问题解决了，对吧？
- en: '[PRE6]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is clearly an invalid state as well. A person cannot have a negative age.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然也是一个无效状态。一个人不能有负年龄。
- en: '[PRE7]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is also invalid -- it looks like someone accidentally entered their [ZIP
    code](https://en.wikipedia.org/wiki/Beverly_Hills,_California) instead of their
    age.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是无效的 -- 看起来有人意外地输入了他们的[ZIP code](https://en.wikipedia.org/wiki/Beverly_Hills,_California)而不是他们的年龄。
- en: So how can we constrain this type even further? How can we make even more invalid
    states unrepresentable?
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何进一步约束这种类型？如何使更多的无效状态不可表示？
- en: '`age` as an `Int` with constraints'
  id: totrans-split-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`age`作为带约束的`Int`'
- en: at runtime
  id: totrans-split-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在运行时
- en: We can enforce *runtime constraints* in any statically-typed language
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在任何静态类型语言中强制执行*运行时约束*
- en: '[PRE8]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In Scala, `assert` will throw a `java.lang.AssertionError` if the assertion
    fails.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Scala中，如果断言失败，`assert`将抛出`java.lang.AssertionError`。
- en: Now we can be sure that the `age` for any `Person` will always be within the
    range `[0, 150)`. Both
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以确保`Person`的任何`age`都在`[0, 150)`的范围内。两者
- en: '[PRE9]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: and
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '[PRE10]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: will now fail. But they will fail at runtime, halting the execution of our program.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将会失败。但它们会在运行时失败，停止程序的执行。
- en: This is similar to what we saw in "`age` as a `String`", above. This is still
    not ideal. Is there a better way?
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们在"`age`作为`String`"中看到的类似。这仍然不理想。有更好的方式吗？
- en: at compile time
  id: totrans-split-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在编译时
- en: Many languages allow *compile-time* constraints, as well. Usually this is accomplished
    through macros, which inspect the source code during a compilation phase. These
    are often referred to as [refined types](https://en.wikipedia.org/wiki/Refinement_type).
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 许多语言也允许*compile-time*约束。通常通过宏来实现，它们在编译阶段检查源代码。这些通常被称为[refined types](https://en.wikipedia.org/wiki/Refinement_type)。
- en: Scala has [quite good](https://blog.rockthejvm.com/refined-types/) support for
    [refined types](https://github.com/Iltotore/iron) across multiple libraries. A
    solution using the [`refined` library](https://github.com/fthomas/refined) might
    look something like
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: Scala在多个库中对[refined types](https://blog.rockthejvm.com/refined-types/)有[相当好的](https://github.com/Iltotore/iron)支持。使用[`refined`
    library](https://github.com/fthomas/refined)可能会看起来像这样
- en: '[PRE11]'
  id: totrans-split-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: A limitation of this approach is that the field(s) to be constrained at compile-time
    must be [*literal*, hard-coded](https://en.wikipedia.org/wiki/Literal_(computer_programming))
    values. Compile-time constraints cannot be enforced on, for example, values provided
    by a user. By that point, the program has already been compiled. In this case,
    we can always fall back to runtime constraints, which is often what these libraries
    do.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的一个限制是，要在编译时约束的字段必须是[*literal*, hard-coded](https://en.wikipedia.org/wiki/Literal_(computer_programming))值。例如，不能对用户提供的值强制执行编译时约束。在那时，程序已经编译完成。在这种情况下，我们可以始终退回到运行时约束，这通常是这些库所做的。
- en: For now, we'll continue with runtime constraints only, since often that's the
    best we can do.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将继续只使用运行时约束，因为通常这是我们能做到的最好的。
- en: '`age` as an `Age` with constraints'
  id: totrans-split-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`age` 作为具有约束的 `Age`'
- en: From simplest to most complex implementation, we moved left to right in the
    diagram below
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从图表中最简单到最复杂的实现，我们从左向右移动
- en: '[PRE12]'
  id: totrans-split-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This increase in complexity directly correlates with the *accuracy* with which
    we're modelling this data
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这种复杂性的增加直接与我们对这些数据建模的*准确性*相关
- en: '"The problems tackled have inherent complexity, and it takes some effort to
    model them appropriately." [[source]](https://fasterthanli.me/articles/i-want-off-mr-golangs-wild-ride)'
  id: totrans-split-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"我们要解决的问题具有固有的复杂性，适当地对其进行建模需要一些努力。" [[source]](https://fasterthanli.me/articles/i-want-off-mr-golangs-wild-ride)'
- en: 'The move left-to-right above should be driven by the requirements of your system.
    You should not implement compile-time refinements, for example, unless you have
    lots of hard-coded values to validate at compile time: otherwise [you aren''t
    gonna need it](https://martinfowler.com/bliki/Yagni.html). Every line of code
    has a cost to implement and maintain. Avoiding premature specification is just
    as important as avoiding [premature generalization](https://www.codewithjason.com/premature-generalization),
    though it''s ***always easier* to move from more specific types to less specific
    types**, so prefer specificity over generalization.'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上述从左到右的移动应该由系统的要求驱动。例如，不要实现编译时的细化，除非您有很多硬编码的值需要在编译时验证：否则[你不需要它](https://martinfowler.com/bliki/Yagni.html)。每行代码都有实现和维护的成本。避免过早的规范化与避免[过早的泛化](https://www.codewithjason.com/premature-generalization)一样重要，尽管从更具体的类型向不太具体的类型移动**总是更容易的*。因此，请优先考虑具体性而不是泛化。
- en: Every bit of data has a *context*, as well. There is no such thing as a "pure"
    `Int` value floating around in the universe. An age can be modelled as an `Int`,
    but it's different from a weight, which could also be modelled as an Int. The
    labels we attach to these raw values are the *context*
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数据都有一个*context*。在宇宙中不存在“纯”`Int`值。年龄可以被建模为`Int`，但与重量不同，重量也可以被建模为Int。我们附加到这些原始值上的标签是*context*
- en: '[PRE13]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There is one more problem for us to solve here. Suppose I'm 81kg and 33 years
    old
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们还有一个问题要解决。假设我是81公斤，33岁
- en: '[PRE14]'
  id: totrans-split-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: That compiles, but... it shouldn't. I swapped my weight and age!
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然编译通过了，但...不应该。我颠倒了我的体重和年龄！
- en: An easy way to avoid this confusion is to define some more types. In this case,
    [*newtypes*](https://doc.rust-lang.org/rust-by-example/generics/new_types.html)
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 避免这种混淆的一种简单方法是定义一些更多的类型。在这种情况下，[*newtypes*](https://doc.rust-lang.org/rust-by-example/generics/new_types.html)
- en: '[PRE15]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The name *newtype* for this pattern [comes from Haskell](https://wiki.haskell.org/Newtype).
    This is a simple way to ensure that we don't accidentally swap values with the
    same underlying type. The following, for example, will not compile
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*newtype* 模式的名称[来自 Haskell](https://wiki.haskell.org/Newtype)。这是一种简单的方法，确保我们不会意外交换具有相同基础类型的值。例如，以下代码不会编译：'
- en: '[PRE16]'
  id: totrans-split-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We could also use [*tagged types*](https://medium.com/iterators/to-tag-a-type-88dc344bb66c).
    In Scala, the simplest possible example of this looks something like
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用[*标记类型*](https://medium.com/iterators/to-tag-a-type-88dc344bb66c)。在Scala中，这个最简单的示例看起来像这样
- en: '[PRE17]'
  id: totrans-split-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This makes use of the fact that function application `f()` is syntactic sugar
    in Scala for an `apply()` method. So `f()` is equivalent to `f.apply()`.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这利用了函数应用`f()`在Scala中是`apply()`方法的语法糖的事实。因此，`f()`等同于`f.apply()`。
- en: This approach allows us to model the idea that an `Age` / a `Weight` is an `Int`,
    but an `Int` is not an `Age` / a `Weight`. This means we can treat an `Age` /
    a `Weight` *as* an `Int` and add, subtract, or do whatever other `Int`-like things
    we want to do.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法允许我们建模“年龄”/“体重”是一个`Int`的想法，但`Int`不是“年龄”/“体重”。这意味着我们可以将“年龄”/“体重”视为`Int`，并添加、减去或进行其他类似于`Int`的操作。
- en: Mixing these two approaches in one example, you can see the difference between
    newtypes and tagged types. You must extract the "raw value" from a newtype. You
    do not need to do this with a tagged type
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两种方法混合在一个示例中，你可以看到新类型和标记类型之间的区别。你必须从新类型中提取“原始值”。对于标记类型，你不需要这样做。
- en: '[PRE18]'
  id: totrans-split-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In some languages, the "unwrapping" of newtypes can be done automatically. This
    can make newtypes as ergonomic as tagged types. For example, in Scala, this could
    be done with an *implicit conversion*
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些语言中，新类型的“解包”可以自动完成。这可以使新类型像标记类型一样符合人体工学。例如，在Scala中，可以通过*隐式转换*来完成这个操作。
- en: '[PRE19]'
  id: totrans-split-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Further refinements
  id: totrans-split-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步的改进。
- en: The important point of the above discussion is that, as much as possible, we
    want to *make invalid states unrepresentable*.
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 上述讨论的重点是，尽可能*使无效状态无法表示*。
- en: '"Jeff" is an invalid age. Age isn''t a string, it is a number.'
  id: totrans-split-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"Jeff" 是一个无效的年龄。年龄不是字符串，而是一个数字。'
- en: -1 is an invalid age. Age cannot be negative, it should be 0 or positive, and
    probably less than about 150.
  id: totrans-split-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -1 是一个无效的年龄。年龄不能为负数，应该是 0 或正数，并且可能小于约 150。
- en: My age is not 88\. An age should be easily distinguishable from other integral
    values, like weight.
  id: totrans-split-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的年龄不是 88\. 年龄应该很容易与其他整数值区分开，比如体重。
- en: Everything discussed above implemented these refinements on the concept of "age",
    one at a time.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 上述所有讨论都是关于“年龄”概念逐步实现的这些改进。
- en: We can make further refinements if there is a need for those refinements.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有必要，我们可以进一步改进这些改进。
- en: For example, suppose we want to send a "Happy Birthday!" email to a `Person`
    on their birthday. Rather than an `Age`, we now need a date of birth.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们想在`Person`的生日时发送一封“生日快乐！”的电子邮件。现在我们需要的不是`Age`，而是出生日期。
- en: '[PRE20]'
  id: totrans-split-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The amount of information provided by `dateOfBirth` is strictly greater than
    the amount of information provided by `Age`. We can calculate someone's age from
    their date of birth, but we cannot do the opposite.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`dateOfBirth`提供的信息量严格大于`Age`提供的信息量。我们可以根据某人的出生日期计算他们的年龄，但反过来却不行。'
- en: The above implementation leaves much to be desired, though -- there are lots
    of invalid states. A better way to implement this would be for `Month` to be an
    enum, and for `Day` validity to depend on the `Month` (February never has 30 days,
    for example)
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 上述实现还有很多不足之处 -- 存在许多无效状态。更好的实现方式是让`Month`成为一个枚举，并且`Day`的有效性取决于`Month`（例如，2月从不有
    30 天）
- en: '[PRE21]'
  id: totrans-split-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Always prefer low-cardinality types to [high-cardinality types](https://www.seas.upenn.edu/~sweirich/types/archive/1999-2003/msg01233.html),
    when possible. It limits the number of possible invalid states. In most languages,
    `enum`s are the way to go here (in Scala 2, an `enum` can be modelled using a
    `sealed trait`, as shown above). But there are still invalid states hiding above.
    Can you find them?
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，始终优先选择低基数类型而不是[高基数类型](https://www.seas.upenn.edu/~sweirich/types/archive/1999-2003/msg01233.html)。这限制了可能的无效状态数量。在大多数语言中，这里应该使用`enum`（在Scala
    2中，可以使用`sealed trait`来模拟`enum`，如上所示）。但仍然有一些隐藏的无效状态。你能找到它们吗？
- en: In some cases, stringly-typed data validated using regular expressions can be
    replaced entirely by `enum`s. Could you model [Canadian postal codes](https://www150.statcan.gc.ca/n1/pub/92-153-g/2011002/tech-eng.htm)
    such that it's impossible to construct an invalid one?
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，使用正则表达式验证的字符串类型数据可以完全被`enum`替代。你能建模[加拿大邮政编码](https://www150.statcan.gc.ca/n1/pub/92-153-g/2011002/tech-eng.htm)，以确保无法构造出无效的邮政编码吗？
- en: Use the above knowledge to go forth and *make invalid states unrepresentable*.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 利用以上知识，继续前进，并且*使无效状态无法表示*。
