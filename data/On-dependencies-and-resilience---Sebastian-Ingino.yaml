- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:06:58'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:06:58'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: On dependencies and resilience - Sebastian Ingino
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 论依赖性和韧性 - Sebastian Ingino
- en: 来源：[https://ingino.me/ideas/on-dependencies/](https://ingino.me/ideas/on-dependencies/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ingino.me/ideas/on-dependencies/](https://ingino.me/ideas/on-dependencies/)
- en: I’ve been thinking a lot about dependencies while working with my new website,
    built on [Astro](https://astro.build). Astro, with no additional packages, uses
    400 total dependencies weighing in at about 122 MB. Andrei Kashcha has made a
    [lovely visualizer](https://npm.anvaka.com/#/) where you can see [Astro](https://npm.anvaka.com/#/view/2d/astro)
    and all other packages as a graph. My website, with all additional packages, has
    467 dependencies which brings me up to over 500 MBs, and that’s insane. Even a
    “lightweight” project such as 11ty has 213 dependencies.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我在构建基于[Astro](https://astro.build)的新网站时，一直在思考依赖性问题。Astro在没有额外包的情况下，使用了总计400个依赖项，约占122
    MB。Andrei Kashcha创建了一个[美观的可视化工具](https://npm.anvaka.com/#/)，您可以在其中查看[Astro](https://npm.anvaka.com/#/view/2d/astro)和所有其他包的关系图。我的网站加上所有额外包后，拥有467个依赖项，总计超过500
    MB，这简直是疯狂。即使像11ty这样的“轻量级”项目也有213个依赖项。
- en: However, I don’t want to discuss the JS ecosystem dependency issue, which has
    been talked about by some people way smarter than I^([1](#user-content-fn-1)).
    I also won’t directly discuss software bloat^([2](#user-content-fn-2)) or supply
    chain security^([3](#user-content-fn-3)). Instead, I want to explore the theory
    that the software development culture shift towards more dependencies, especially
    in the web development space, is creating more products and companies that rely
    on closed-source software or APIs for their full functionality which could have
    future negative implications.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我不想讨论那些比我聪明得多的人已经谈论过的JS生态系统依赖问题^([1](#user-content-fn-1))。我也不会直接讨论软件膨胀问题^([2](#user-content-fn-2))或供应链安全问题^([3](#user-content-fn-3))。相反，我想探讨的是软件开发文化向更多依赖性转变的理论，特别是在Web开发领域，这种转变正在创造更多依赖闭源软件或API完全功能的产品和公司，这可能会带来未来的负面影响。
- en: From the video game industry with love
  id: totrans-split-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 来自游戏行业的热爱
- en: In September of last year, [Unity](https://unity3d.com) announced^([4](#user-content-fn-4))
    a new per-download fee for developers that would start January 2024\. For *Personal*
    plans (*Plus* was being retired into *Personal*), games that have made more than
    $200,000 in the last 12 months and had at least 200,000 lifetime installs would
    qualify, and for the more expensive *Pro* and *Enterprise* plans, it’s $1,000,000
    and 1,000,000 installs respectively. In exchange for the pricing change, the *Personal*
    plan would become free. *Personal* would be charged at $0.20 per install, and
    *Pro* and *Enterprise* would start at $0.15 and $0.125 per install respectively,
    and that would go down as installs per month increased.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 去年九月，[Unity](https://unity3d.com)宣布^([4](#user-content-fn-4))对开发者推出新的每次下载费用，将从2024年1月开始实施。对于*个人*计划（*Plus*将被整合到*个人*中），过去12个月内收入超过20万美元并且至少有20万次安装的游戏将符合条件；对于更昂贵的*专业版*和*企业版*计划，则分别是100万美元和100万次安装。作为定价变更的交换条件，*个人*计划将免费。*个人*计划的安装费用为每次$0.20，而*专业版*和*企业版*则从每次$0.15和$0.125开始，随着每月安装次数的增加而递减。
- en: As Unity had previously charged a subscription fee for each plan, this move
    was met with immediate outrage with the prime concern that the system could be
    abused with repeat installs to punish developers. However, what struck me the
    most, besides the fact that this move was purely profit and stock-driven, is how
    game studios left so quickly from Unity **despite** them later walking most of
    the changes back. Some studios even described Unity as “an operational risk”^([5](#user-content-fn-5)).
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: Unity之前对每个计划收取订阅费用，此举立即引起了强烈愤怒，主要担忧是该系统可能被滥用以惩罚开发者。然而，最让我震惊的不仅仅是这一举措纯粹出于利润和股票驱动，还有游戏工作室如此迅速地放弃Unity**尽管**后来大部分变更被撤销。一些工作室甚至将Unity描述为“操作风险”^([5](#user-content-fn-5))。
- en: 'Independent developers are hit the hardest as switching software so quickly
    is extremely difficult, especially as all of the tooling from libraries to game
    editor to distribution, even programming language, can change. Unity, in this
    case, has truly caused irreparable damage to its reputation with developers, but
    it begs the question: what if they had been more subtle? What if they slowly increased
    prices with little to no notice to developers? Even though the boiling frog analogy
    is false,^([6](#user-content-fn-6)) if the water gets hotter slowly enough, will
    developers or studios not feel as much pressure to switch engines, allowing Unity
    to extract ever-increasing profits?'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 独立开发者受到的冲击最大，因为如此快速地切换软件极其困难，尤其是从库到游戏编辑器再到分发，甚至到编程语言的所有工具都可能发生变化。在这种情况下，Unity确实对其与开发者的声誉造成了无法挽回的损害，但这引发了一个问题：如果他们更加隐秘地做了什么会怎样？如果他们逐渐提高价格而几乎不通知开发者会怎样？尽管“沸蛙”类比是错误的^([6](#user-content-fn-6))，如果水慢慢变热到足够缓慢，开发者或工作室是否不会感到太大的压力去切换引擎，从而允许Unity获取越来越多的利润？
- en: I think that Unity’s actions should be a reminder to not just full companies
    but individual developers that they need to be *aware* of the closed-source dependencies
    that they have and maintain a plan to switch if the need arises. The Unity issue
    is an easier issue for larger studios to solve – they could create an in-house
    engine if need be – and it hurts smaller studios and indie developers the most.
    However, any creator of any product of any size, in my opinion, needs to be thinking
    from day one about what it depends on, whether it be YouTube for video revenue
    or AWS for hosting, how trustworthy these dependencies are, and how to respond
    if their terms change.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为Unity的行动应该提醒不仅是整个公司而是个人开发者，他们需要*意识到*他们存在的闭源依赖关系，并保持一个在需要时可以切换的计划。对于较大的工作室而言，Unity问题是一个较容易解决的问题——他们可以创建内部引擎——但它对较小的工作室和独立开发者造成了最大的伤害。然而，任何规模的任何产品的创作者，在我看来，从第一天起都需要考虑它依赖的内容，无论是YouTube的视频收入还是AWS的托管服务，这些依赖关系有多可信，以及如何在条款变更时作出响应。
- en: An open door shut.
  id: totrans-split-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个开放的门紧闭了。
- en: 'Even open source isn’t “safe”, as [HashiCorp](https://hashicorp.com) demonstrated
    when it switched^([7](#user-content-fn-7)) from MPL 2.0^([8](#user-content-fn-8))
    to BSL^([9](#user-content-fn-9)), which kept the source code available while preventing
    certain commercial use. In this case, HashiCorp’s BSL prevents commercial competitors
    from using their software without a license. This switch is problematic for two
    reasons: 1\. HashiCorp decides who a “commercial competitor” is and 2\. some open-source
    developers fear that using HashiCorp software in their work might poison their
    license and force them to adopt HashiCorp’s BSL.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是开源也不是“安全”的，正如[HashiCorp](https://hashicorp.com)转向^([7](#user-content-fn-7))从MPL
    2.0^([8](#user-content-fn-8))到BSL^([9](#user-content-fn-9))所展示的那样，这种变更使源代码保持可用，同时阻止了某些商业使用。在这种情况下，HashiCorp的BSL阻止了商业竞争对手在没有许可证的情况下使用他们的软件。这种转变有两个问题：1\.
    HashiCorp决定谁是“商业竞争对手”，2\.一些开源开发者担心在他们的工作中使用HashiCorp软件可能会影响他们的许可证，并迫使他们采用HashiCorp的BSL。
- en: For medium to large companies using HashiCorp software internally, this likely
    required a legal discussion or even an audit to double-check that their use of
    HashiCorp software, primarily [Vault](https://www.vaultproject.io) and [Terraform](https://www.terraform.io),
    doesn’t compete with HashiCorp^([10](#user-content-fn-10)). Other companies, especially
    new DevOps startups, they’re unlikely to be able to use these products without
    a likely expensive license – which is likely the exact product segment HashiCorp
    was trying to target with this change. HashiCorp’s change also seems to be one
    of the more extreme license switches in open-source history, as compared to [MongoDB](https://mongodb.com)
    switching to SSPL^([11](#user-content-fn-11)) in 2018 or [CockroachDB](https://www.cockroachlabs.com)
    switching to BSL^([12](#user-content-fn-12)) in 2019^([13](#user-content-fn-13)).
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于中大型公司而言，他们在内部使用HashiCorp软件，这可能需要进行法律讨论，甚至进行审计，以确保他们对HashiCorp软件（主要是[Vault](https://www.vaultproject.io)和[Terraform](https://www.terraform.io)）的使用不会与HashiCorp竞争^([10](#user-content-fn-10))。而其他公司，特别是新兴的DevOps初创公司，他们可能无法在没有昂贵许可证的情况下使用这些产品，这正是HashiCorp此次更改试图瞄准的确切产品段。与MongoDB在2018年转向SSPL^([11](#user-content-fn-11))或CockroachDB在2019年转向BSL^([12](#user-content-fn-12))^([13](#user-content-fn-13))相比，HashiCorp的这一变更似乎是开源历史上更为极端的许可证变更之一。
- en: The Linux Foundation has since sponsored [OpenTofu](https://opentofu.org), a
    forever-open-source fork of Terraform, with the guarantee that the license won’t
    change at any point in the future. While the Linux Foundation, and many other
    open-source foundations like the Apache Software Foundation, provide logistic
    support and a guarantee of open-source licensing for all of their projects, very
    few small dependencies fall under their umbrella. Modern companies of any size
    need to inspect where their dependencies come from and who manages them to ensure
    that they’re not at risk of any future licensing changes.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 自从Linux基金会赞助了[OpenTofu](https://opentofu.org)，这个永久开源的Terraform分支，保证许可证在未来的任何时候都不会更改。虽然Linux基金会和其他许多开源基金会（如Apache软件基金会）为他们所有的项目提供后勤支持和开源许可证的保证，但很少有小的依赖项落入他们的保护范围。任何规模的现代公司都需要检查他们的依赖项来源和管理者，以确保他们不会面临未来许可证变更的风险。
- en: Open-source projects with corporate ownership seem the riskiest, and it’s vital
    to examine what the incentives to keep the software open-source or eventually
    change its license are. Google, known as a strong open-source contributor, is
    unlikely to take, for example, [Angular](https://angular.io) off of copyleft^([14](#user-content-fn-14)).
    On the other hand, [Automattic](https://automattic.com)’s product offerings like
    [WooCommerce](https://woo.com) are products with open source code – there would
    be nothing stopping them from restricting the license in the future. In my opinion,
    the safest dependencies are those run by a foundation, then ones with multiple
    corporate sponsors, and then historically trustworthy companies. Even open-source
    software run by individuals is likely safer in terms of license changes than single
    corporate owners. Despite these risks, open-source software is almost always better
    than closed-source as even in the event of a licensing change, a fork can always
    be made by the community as shown with OpenTofu.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有公司所有权的开源项目似乎是最冒险的，审查保持软件开源或最终更改其许可证的激励是至关重要的。作为一个强大的开源贡献者，谷歌不太可能撤下，例如[Angular](https://angular.io)的copyleft^([14](#user-content-fn-14))。另一方面，[Automattic](https://automattic.com)的产品如[WooCommerce](https://woo.com)是开源代码产品——未来限制许可证没有任何阻碍。在我看来，最安全的依赖关系是由基金会运行的，然后是有多个公司赞助的，然后是历史上值得信赖的公司。即使是个人运行的开源软件在许可证变更方面也比单一公司所有者更安全。尽管存在这些风险，开源软件几乎总是比封闭源代码更好，因为即使在许可证变更的情况下，社区也可以进行分支，就像OpenTofu一样。
- en: Dealing with providers
  id: totrans-split-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理供应商
- en: '[Stripe](https://stripe.com), for example, lists 99.999% uptime for the last
    90 days^([15](#user-content-fn-15)). When I was at Stripe this past summer, [Slack](https://slack.com)
    went down **twice**^([16](#user-content-fn-16)) during those twelve weeks which
    was frustrating at the time, but they maintained 99.98% uptime for the last quarter^([17](#user-content-fn-17)).
    Despite rarely going down, a Slack outage can often majorly affect office productivity
    and internal communications if no alternative communication is readily available.
    Luckily, most companies also have email, with Slack as the ephemeral less-professional
    alternative.'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，[Stripe](https://stripe.com)在过去90天内的可用时间为99.999%^([15](#user-content-fn-15))。我在Stripe时，[Slack](https://slack.com)在这十二周内**两次**下线^([16](#user-content-fn-16))，当时令人沮丧，但他们在上个季度保持了99.98%的正常运行时间^([17](#user-content-fn-17))。尽管很少出现故障，Slack的故障通常会严重影响办公生产力和内部通信，如果没有其他即时通讯工具是个麻烦。幸运的是，大多数公司也有电子邮件，Slack只是临时的不太专业的替代品。
- en: But, what happens if one of your product or business dependencies goes down,
    like [Square](https://squareup.com) did in September last year? Square was down
    for nearly two days globally, leading to a $1bn loss in sales, serving as a wake-up
    call for customers to switch providers or develop in-house^([18](#user-content-fn-18)).
    [AWS](https://aws.amazon.com) went down briefly in June of the same year, affecting
    operations in their US-EAST-1 region^([19](#user-content-fn-19)). [Cloudflare](https://cloudflare.com)
    was fully down at the end of October for about half an hour with a smaller but
    longer outage less than a week later^([20](#user-content-fn-20)).
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你的产品或业务依赖关系中的一个像[Square](https://squareup.com)去年九月那样出现故障会怎么样？Square全球停机近两天，导致10亿美元的销售损失，成为客户转换供应商或自主开发的警钟^([18](#user-content-fn-18))。[AWS](https://aws.amazon.com)同年六月短暂停机，影响了其US-EAST-1区域的运营^([19](#user-content-fn-19))。[Cloudflare](https://cloudflare.com)在去年十月底全面停机约半小时，之后不到一周的时间内出现了一次较小但持续时间更长的停机^([20](#user-content-fn-20))。
- en: I think that there are some clear lessons to be learned from all the outages
    we see daily. While it can be costly or extremely difficult, maintaining a secondary
    provider in most cases is the safest option for all companies of all sizes. However,
    this can be overly complicated, especially when working with highly integrated
    APIs. Therefore, it’s important to have consistent abstractions on top of these
    APIs so that, even if there’s not an automatic fallback system, exchanging the
    underlying software should be much easier.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为我们每天看到的所有故障都可以得出一些明显的教训。虽然这可能是昂贵或非常困难的，但在大多数情况下，为所有规模的公司维护一个次要提供商是最安全的选择。然而，这可能过于复杂，特别是在使用高度集成的
    API 时。因此，重要的是在这些 API 的顶部保持一致的抽象，以便即使没有自动回退系统，更换底层软件也应该更容易。
- en: 'Additionally, I think that software designers and developers should be thinking
    about *fail-safe* vs *fail-secure* – that is, whether something should unlock
    in an emergency or the opposite. Most software is fail-secure: if a license manager
    can’t reach the host, you can’t get in; if payments go down, you can’t buy a product;
    if authentication providers aren’t responding, you can’t log in. This is typically
    the best default – you usually don’t want someone turning off WiFi to skip license
    verification or DDoS-ing an API to get a free item. However, in some cases, writing
    fail-safe code might be a better option for your business. Let’s say that you
    run a website with subscriptions through an API and that API goes down. And let’s
    say that your website keeps track of who’s subscribed and checks the API periodically
    for updates. If the API goes down, should subscribers remain listed as subscribed?
    I’d say yes. This is a relatively tame example but serves as a simple case study
    that every uncontrolled dependency should go through.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我认为软件设计师和开发人员应该考虑*失效安全*与*失效保护* - 即，在紧急情况下是否应该解锁某些内容或反之。大多数软件都是失效安全的：如果许可证管理器无法连接主机，您将无法登录；如果支付系统故障，您将无法购买产品；如果身份验证提供者未响应，您将无法登录。这通常是最佳默认选项
    - 通常情况下，您不希望有人关闭 WiFi 以跳过许可验证或者通过 DDoS 攻击 API 以获取免费商品。然而，在某些情况下，编写失效安全的代码可能是您的业务更好的选择。比如说，如果您运行一个通过
    API 进行订阅的网站，并且该 API 停止运行，那么订阅者应该继续保持订阅状态吗？我会说是。这是一个相对简单的案例研究，但它作为每个无法控制的依赖关系的一个简单案例。
- en: Lastly, medium to large companies (maybe even smaller ones) should be doing
    regular chaos and outage testing. The multi-day Cloudflare outage was caused by
    power issues with one of their major Oregon data centers and should’ve been prevented
    by high-availability multi-data-center clusters^([21](#user-content-fn-21)).
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，中型到大型公司（甚至可能是较小的公司）应定期进行混沌测试和故障测试。Cloudflare 多日的停机是由他们俄勒冈州一个主要数据中心的电力问题引起的，本应该通过高可用多数据中心集群进行预防^([21](#user-content-fn-21))。
- en: In particular, two critical services that process logs and power our analytics
    — Kafka and ClickHouse — were only available in PDX-04 but had services that depended
    on them that were running in the high availability cluster. Those dependencies
    shouldn’t have been so tight, should have failed more gracefully, and we should
    have caught them.
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 特别是，处理日志并驱动我们的分析的两个关键服务 - Kafka 和 ClickHouse - 仅在 PDX-04 可用，但有依赖于它们的服务在高可用集群中运行。这些依赖关系不应该那么紧密，应该更优雅地失败，并且我们应该早点察觉到它们。
- en: While Cloudflare did pretty robust outage testing, they didn’t take the entire
    data center offline – only a portion of it and therefore didn’t catch the issue.
    You should [read the entire blog post](https://blog.cloudflare.com/post-mortem-on-cloudflare-control-plane-and-analytics-outage/)
    as it details how Cloudflare will be using rigorous testing and prevention measures
    in the future, but I think it serves as an example that this is a struggle for
    all companies. AWS now lets you simulate region outages^([22](#user-content-fn-22))
    and I’m hoping that more providers will catch up as this issue grows.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Cloudflare 进行了相当强大的故障测试，但他们并没有关闭整个数据中心 - 只是部分数据中心，因此没有发现问题。你应该[阅读整篇博文](https://blog.cloudflare.com/post-mortem-on-cloudflare-control-plane-and-analytics-outage/)，因为它详细说明了
    Cloudflare 将来将如何使用严格的测试和预防措施，但我认为它仍然是所有公司都面临的一个例子。AWS 现在允许您模拟区域故障^([22](#user-content-fn-22))，我希望更多的供应商能够跟上这个问题的发展。
- en: GPT-4 / Claude / Llama / the new one from 5 minutes ago
  id: totrans-split-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GPT-4 / Claude / Llama / 5 分钟前的新模型
- en: What got me thinking about this issue has been the growth of “AI” products that
    simply wrap [OpenAI’s API](https://openai.com/blog/openai-api), either offering
    proprietary embeddings or prompt engineering as their additional service. All
    of the previous examples have been about partial dependencies, where most of the
    work on top can be salvaged in the event of a dependency change. I worry that
    many of these GPT-based applications are making themselves **overdependent** on
    OpenAI, giving OpenAI a ton of bargaining power and creating a lot of risk for
    the product. Furthermore, since many of these applications are just adding a new
    embedding method like PDFs, this makes *sherlocking*^([23](#user-content-fn-23))
    easy for OpenAI as they did last September^([24](#user-content-fn-24)).
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我开始思考这个问题的是“AI”产品的增长，它们只是简单地包装了[OpenAI 的 API](https://openai.com/blog/openai-api)，提供专有的嵌入或作为额外服务的提示工程。所有之前的例子都是关于部分依赖，即使依赖变化，顶层的大部分工作也可以被挽救。我担心许多基于
    GPT 的应用正在使自己对 OpenAI 过度依赖，为 OpenAI 创造了大量的议价权，并为产品带来了很多风险。此外，由于许多这些应用只是添加了像 PDF
    这样的新嵌入方法，这使得 OpenAI 像他们去年九月那样轻而易举地进行 *sherlocking*^([23](#user-content-fn-23))。
- en: 'At the end of the day, I think that we only need to ask two questions for each
    dependency:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在一天结束时，我认为我们每个依赖只需要问两个问题：
- en: What is the impact on my business if it disappears today? How likely is that
    to happen?
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它今天消失了对我的业务有什么影响？这种情况发生的可能性有多大？
- en: 'There are a bunch of questions that go along with the first – some of which
    I’ve already discussed: do we have a game plan if something goes wrong; how much
    time would it take to switch; can we automate this process; how graceful is failure;
    etc? The second has others as well: who’s behind the dependency; what’s their
    track record (uptime, behavior, etc.); what have similar dependencies done; etc?
    However, I think that these simple questions are enough to understand the basic
    dangers and hopefully kickstart an internal effort to decrease that potential
    impact. You could even put it on a chart:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个问题有一堆相关问题 - 其中一些我已经讨论过：如果出了问题我们有没有应对计划；切换需要多长时间；能否自动化这个过程；失败的优雅程度如何；等等？第二个问题也有其他问题：谁是这个依赖的背后人物；他们的记录如何（运行时间，行为等）；类似依赖做了什么；等等？不过，我认为这些简单的问题足以理解基本的危险，并希望能启动内部努力来减少潜在影响。你甚至可以把它画成一张图表：
- en: <svg xmlns="http://www.w3.org/2000/svg" aria-roledescription="quadrantChart"
    role="graphics-document document" viewBox="0 0 500 500" id="mermaid-0"><g class="main"><g
    class="quadrants"><g class="quadrant"><text transform="translate(379, 147) rotate(0)"
    text-anchor="middle" dominant-baseline="middle" font-size="16" fill="#111111"
    y="0" x="0">🚨 Move away ASAP</text></g><g class="quadrant"><text transform="translate(147,
    147) rotate(0)" text-anchor="middle" dominant-baseline="middle" font-size="16"
    fill="#0c0c0c" y="0" x="0">Decouple and abstract</text></g><g class="quadrant"><text
    transform="translate(147, 379) rotate(0)" text-anchor="middle" dominant-baseline="middle"
    font-size="16" fill="#070707" y="0" x="0">Safe (for now)</text></g><g class="quadrant"><text
    transform="translate(379, 379) rotate(0)" text-anchor="middle" dominant-baseline="middle"
    font-size="16" fill="#020202" y="0" x="0">Automatic fallbacks</text></g></g><g
    class="labels"><g class="label"><text transform="translate(147, 5) rotate(0)"
    text-anchor="middle" dominant-baseline="hanging" font-size="16" fill="#111111"
    y="0" x="0">Low Impact</text></g><g class="label"><text transform="translate(379,
    5) rotate(0)" text-anchor="middle" dominant-baseline="hanging" font-size="16"
    fill="#111111" y="0" x="0">High Impact</text></g><g class="label"><text transform="translate(5,
    379) rotate(-90)" text-anchor="middle" dominant-baseline="hanging" font-size="16"
    fill="#111111" y="0" x="0">Low Likelihood</text></g><g class="label"><text transform="translate(5,
    147) rotate(-90)" text-anchor="middle" dominant-baseline="hanging" font-size="16"
    fill="#111111" y="0" x="0">High Likelihood</text></g></g></g></svg>
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: <svg xmlns="http://www.w3.org/2000/svg" aria-roledescription="quadrantChart"
    role="graphics-document document" viewBox="0 0 500 500" id="mermaid-0"><g class="main"><g
    class="quadrants"><g class="quadrant"><text transform="translate(379, 147) rotate(0)"
    text-anchor="middle" dominant-baseline="middle" font-size="16" fill="#111111"
    y="0" x="0">🚨 尽快移开</text></g><g class="quadrant"><text transform="translate(147,
    147) rotate(0)" text-anchor="middle" dominant-baseline="middle" font-size="16"
    fill="#0c0c0c" y="0" x="0">解耦和抽象</text></g><g class="quadrant"><text transform="translate(147,
    379) rotate(0)" text-anchor="middle" dominant-baseline="middle" font-size="16"
    fill="#070707" y="0" x="0">目前安全</text></g><g class="quadrant"><text transform="translate(379,
    379) rotate(0)" text-anchor="middle" dominant-baseline="middle" font-size="16"
    fill="#020202" y="0" x="0">自动回退</text></g></g><g class="labels"><g class="label"><text
    transform="translate(147, 5) rotate(0)" text-anchor="middle" dominant-baseline="hanging"
    font-size="16" fill="#111111" y="0" x="0">低影响</text></g><g class="label"><text
    transform="translate(379, 5) rotate(0)" text-anchor="middle" dominant-baseline="hanging"
    font-size="16" fill="#111111" y="0" x="0">高影响</text></g><g class="label"><text
    transform="translate(5, 379) rotate(-90)" text-anchor="middle" dominant-baseline="hanging"
    font-size="16" fill="#111111" y="0" x="0">低可能性</text></g><g class="label"><text
    transform="translate(5, 147) rotate(-90)" text-anchor="middle" dominant-baseline="hanging"
    font-size="16" fill="#111111" y="0" x="0">高可能性</text></g></g></g></svg>
- en: Many companies are switching away from a direct OpenAI dependency to other providers,
    like [Hugging Face](https://huggingface.co)^([25](#user-content-fn-25)). I even
    remember seeing on the Bay Area freeway – though I can’t find the company – an
    advertisement for a product that lets you switch between multiple LLM providers
    to improve your product’s uptime. The irony of this product is now they’re a dependency.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 许多公司正在从直接依赖 OpenAI 转向其他提供商，如[Hugging Face](https://huggingface.co)^([25](#user-content-fn-25))。我甚至记得在旧金山湾区的高速公路上看到过一则广告，尽管我找不到公司名字，但是它推广的产品可以让你在多个语言模型提供商之间切换，以提高产品的稳定性。这个产品的讽刺之处在于现在它们自己也成为了一个依赖。
- en: Solutions? Not really
  id: totrans-split-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案？其实并没有。
- en: 'We’re not going to escape from the interdependent world any time soon. Unless
    you’re the largest company in the world and have become fully vertically integrated
    (Apple’s #1 wish), there’s always going to be dependencies, and that’s good. It’s
    good that we have companies like [Twilio](http://twilio.com) to handle communications
    and [Mapbox](https://mapbox.com) for GIS, as these companies can achieve economies
    of scale and abstract complexities that would be much too difficult for even some
    large corporations. It’s good that we have open-source software like [React](https://react.dev)
    and [Hadoop](https://hadoop.apache.org) that also abstract complexity and often
    have a strong community, all for free.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会很快摆脱这个相互依存的世界。除非你是世界上最大的公司，并且已经完全垂直整合（苹果的头等愿望），否则总会有依赖关系，而这是好事。有像[Twilio](http://twilio.com)这样的公司负责通讯，以及像[Mapbox](https://mapbox.com)这样的公司负责地理信息系统，这样的公司可以实现规模经济并抽象复杂性，这对一些大公司来说可能过于困难。有像[React](https://react.dev)和[Hadoop](https://hadoop.apache.org)这样的开源软件，它们也抽象了复杂性并经常拥有强大的社区，而且都是免费的。
- en: Despite your best efforts, you’ll always have dependencies. If you’re a product
    company, even if you do your logistics in-house, weather becomes a dependency.
    Even the entire internet for most companies is a major dependency. At some point,
    we can’t worry about things out of our control – we can only plan for the most
    likely. I hope that this blog post sparks a discussion within your product teams
    and your company about how to build resilient software, as it could make or break
    your product if something goes wrong.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你尽了最大的努力，你总是会有依赖关系。如果你是一家产品公司，即使你的物流是内部完成的，天气也会成为一个依赖项。对于大多数公司来说，整个互联网甚至是一个重要的依赖项。在某个时候，我们不能为了那些超出我们控制范围的事情而担心，我们只能为最有可能发生的情况做计划。我希望这篇博客文章能在你的产品团队和公司内引发关于如何构建弹性软件的讨论，因为如果出了什么问题，这可能决定你的产品的成败。
- en: Thoughts? [Leave me feedback!](/contact)
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有什么想法吗？[给我留下反馈！](/contact)
- en: '* * *'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
