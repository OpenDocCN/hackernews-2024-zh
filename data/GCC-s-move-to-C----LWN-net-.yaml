- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:02:20'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:02:20'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: GCC's move to C++ [LWN.net]
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GCC 的转型至 C++ [LWN.net]
- en: 来源：[https://lwn.net/Articles/542457/](https://lwn.net/Articles/542457/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://lwn.net/Articles/542457/](https://lwn.net/Articles/542457/)
- en: '| **Please consider subscribing to LWN**Subscriptions are the lifeblood of
    LWN.net. If you appreciate this content and would like to see more of it, your
    subscription will help to ensure that LWN continues to thrive. Please visit [this
    page](/subscribe/) to join up and keep LWN on the net. |'
  id: totrans-split-6
  prefs: []
  type: TYPE_TB
  zh: '| **请考虑订阅 LWN**订阅是 LWN.net 的生命线。如果您喜欢这篇内容，并希望看到更多类似内容，请考虑订阅。您的订阅将有助于确保 LWN
    继续繁荣。请访问 [此页面](/subscribe/) 进行订阅。 |'
- en: March 13, 2013
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2013 年 3 月 13 日
- en: This article was contributed by Linda Jacobson
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本文由琳达·雅各布森贡献
- en: The GNU Compiler Collection (GCC) was, from its inception, written in C and
    compiled by a C compiler. Beginning in 2008, an effort was undertaken to change
    GCC so that it could be compiled by a C++ compiler and take advantage of a subset
    of C++ constructs. This effort was jump-started by [a presentation by Ian Lance
    Taylor [PDF]](http://airs.com/ian/cxx-slides.pdf) at the June 2008 GCC summit.
    As with any major change, this one had its naysayers and its problems, as well
    as its proponents and successes.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: GNU 编译器集合（GCC）从诞生之初就是用 C 语言编写并由 C 编译器编译的。从 2008 年开始，人们努力改变 GCC，使其可以由 C++ 编译器编译，并利用
    C++ 结构的子集。这一努力始于 [Ian Lance Taylor 的演讲 [PDF]](http://airs.com/ian/cxx-slides.pdf)，2008
    年 GCC 峰会上。和任何重大变化一样，这个变化有其反对者和问题，也有支持者和成功案例。
- en: Reasons
  id: totrans-split-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 原因
- en: 'Taylor''s slides list the reasons to commit to writing GCC in C++:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: Taylor 的幻灯片列出了将 GCC 写成 C++ 的原因：
- en: C++ is well-known and popular.
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++ 是众所周知和流行的。
- en: It's nearly a superset of C90, which GCC was then written in.
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它几乎是 C90 的超集，而 GCC 当时就是用它写成的。
- en: The C subset of C++ is as efficient as C.
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++ 中的 C 子集与 C 一样高效。
- en: C++ "supports cleaner code in several significant cases." It never requires
    "uglier" code.
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++ 在“几个重要情况下支持更清晰的代码”。它从不要求“更丑陋”的代码。
- en: C++ makes it harder to break interface boundaries, which leads to cleaner interfaces.
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++ 使得跨接口边界更难以打破，从而导致更清晰的接口。
- en: The popularity of C++ and its superset relationship to C speak for themselves.
    In stating that the C subset of C++ is as efficient as C, Taylor meant that if
    developers are concerned about efficiency, limiting themselves to C constructs
    will generate code that is just as efficient. Having cleaner interfaces is one
    of the main advantages of C++, or any object-oriented language. Saying that C++
    never requires "uglier" code is a value judgment. However, saying that it supports
    "cleaner code in several significant cases" has a deep history, best demonstrated
    by gengtype.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 的流行及其与 C 的超集关系不言而喻。Taylor 表示，C++ 中的 C 子集与 C 一样高效，这意味着如果开发人员关注效率，限制自己使用 C
    结构将生成同样高效的代码。拥有更清晰的接口是 C++ 或任何面向对象语言的主要优势之一。说 C++ 从不需要“更丑陋”的代码是一个价值判断。然而，说它在一些重要情况下支持“更清晰的代码”有着深厚的历史，最好由
    gengtype 加以证明。
- en: '[According to the GCC Wiki](http://gcc.gnu.org/wiki/gengtype):'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[根据 GCC Wiki](http://gcc.gnu.org/wiki/gengtype)：'
- en: As C does not have any means of reflection [...] gengtype was introduced to
    support some GCC-specific type and variable annotations, which in turn support
    garbage collection inside the compiler and precompiled headers. As such, gengtype
    is one big kludge of a rudimentary C lexer and parser.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 C 没有任何反射手段[...] gengtype 被引入以支持一些 GCC 特定的类型和变量注释，进而支持编译器内的垃圾收集和预编译头。因此，gengtype
    是一个由基本 C 词法分析器和解析器组成的大杂糅。
- en: What had happened was that developers were emulating features such as garbage
    collection, a vector class, and a tree class in C. This was the "ugly" code to
    which Taylor referred.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 事情的发生是开发人员在 C 语言中模拟了诸如垃圾收集、向量类和树类等功能。这正是 Taylor 所指的“丑陋”代码。
- en: 'In his slides, Taylor also tried to address many of the initial objections:
    that C++ was slow, that it was complicated, that there would be a bootstrap problem,
    and that the Free Software Foundation (FSF) wouldn''t like it. He addressed the
    speed issue by pointing out that the C subset of C++ is as efficient as C. As
    far as FSF went, Taylor wrote, "The FSF is not writing the code."'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的幻灯片中，Taylor 也试图解决许多最初的反对意见：C++ 太慢，太复杂，可能存在引导问题，自由软件基金会（FSF）不会喜欢等等。他通过指出 C++
    中的 C 子集与 C 一样高效来解决速度问题。至于 FSF，Taylor 写道：“FSF 不是在写这段代码。”
- en: The complexity of a language is in the eye of the beholder. Many GCC developers
    were primarily, or exclusively, C programmers, so of necessity there would be
    a time period in which they would be less productive, and/or might use C++ in
    ways that negated all its purported benefits. To combat that problem, Taylor hoped
    to develop coding standards that limited development to a subset of C++.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 语言的复杂性在于观察者的眼中。许多GCC开发者主要或专门是C程序员，因此必然会有一个时间段他们的生产力会降低，和/或者他们可能会以一种消除了所有声称的好处的方式使用C++。为了解决这个问题，Taylor希望制定限制开发到C++子集的编码标准。
- en: The bootstrap problem could be resolved by ensuring that GCC version *N-1* could
    always build GCC version *N*, and that they could link statically against `libstdc++`.
    GCC version *N-1* must be linked against `libstdc++` *N-1* while it is building
    GCC *N* and `libstdc++` *N*; GCC *N*, in turn, will need `libstdc++` *N*. Static
    linking ensures that each version of the compiler runs with the appropriate version
    of the library.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 引导问题可以通过确保GCC版本*N-1*始终可以构建GCC版本*N*并静态链接到`libstdc++`来解决。GCC版本*N-1*在构建GCC *N*和`libstdc++`
    *N*时必须链接到`libstdc++` *N-1*；反过来，GCC *N*需要`libstdc++` *N*。静态链接确保每个编译器版本都能与适当版本的库一起运行。
- en: For many years prior to 2008, there had been general agreement to restrict GCC
    code to a common subset of C and C++, according to Taylor (via email). However,
    there was a great deal of resistance to replacing the C compiler with a C++ compiler.
    At the 2008 GCC summit, Taylor took a poll on how large that resistance was, and
    approximately 40% were opposed. The C++ boosters paid close attention to identifying
    and addressing the specific objections raised by C++ opponents (speed, memory
    usage, inexperience of developers, and so on), so that each year thereafter the
    size of the opposition shrank significantly. Most of these discussions took place
    at the GCC summits and via unlogged IRC chats. Therefore, the only available record
    is in the [GCC mailing list archives](http://gcc.gnu.org/ml/gcc).
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，直到2008年之前，根据Taylor（通过电子邮件）的说法，大家普遍同意将GCC代码限制在C和C++的共同子集中。然而，用C++编译器取代C编译器遭到了很大的反对。在2008年的GCC峰会上，Taylor进行了一项关于反对程度的投票，大约有40%的人持反对意见。C++的支持者密切关注并解决了C++反对者提出的具体异议（速度、内存使用、开发者经验等），因此，此后每年反对者的规模都显著减少。这些讨论大多发生在GCC峰会和未记录的IRC聊天中。因此，仅有的记录保存在[GCC邮件列表档案](http://gcc.gnu.org/ml/gcc)中。
- en: First steps
  id: totrans-split-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第一步
- en: The first step, a proper baby step, was merely to try to compile the existing
    C code base with a C++ compiler. While Taylor was still at the conference, he
    [created a gcc-in-cxx branch](http://gcc.gnu.org/ml/gcc/2008-06/msg00385.html)
    for experimenting with building GCC with a C++ compiler. Developers were quick
    to announce their intention to work on the project. The initial build attempts
    encountered many errors and warnings, which were then cleaned up.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步，一个正确的初步行动，仅仅是尝试用C++编译器编译现有的C代码库。在Taylor仍在会议期间，他[创建了一个gcc-in-cxx分支](http://gcc.gnu.org/ml/gcc/2008-06/msg00385.html)，用于尝试用C++编译器构建GCC。开发者们迅速宣布他们的意图参与该项目。最初的构建尝试遇到了许多错误和警告，随后进行了清理。
- en: In June 2009, almost exactly a year from proposing this switch, Taylor reported
    that phase one was complete. He configured GCC with the switch `enable-build-with-cxx`
    to cause the core compiler to be built with C++. A bootstrap on a single target
    system was completed. Around this time, the separate cxx branch was merged into
    the main GCC trunk, and people continued their work, using the `enable-build-with-cxx`
    switch. (However, the separate branch was revived on at least one occasion for
    experimentation.)
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年6月，几乎正好一年之后，Taylor报告称第一阶段已经完成。他使用`enable-build-with-cxx`开关配置了GCC，以便用C++构建核心编译器。在单个目标系统上完成了引导。此时左右，独立的cxx分支已经合并到主GCC主干中，人们继续使用`enable-build-with-cxx`开关继续工作。（然而，至少有一次独立分支因实验而复活。）
- en: In May 2010, there was a [GCC Release Manager Q&A on IRC](http://gcc.gnu.org/wiki/Release%20Manager%20Q%26A?action=AttachFile&do=view&target=rmqa-20100527.txt).
    The conclusion from that meeting was to request permission from the GCC Steering
    Committee to use C++ language features in GCC itself, as opposed to just compiling
    with a C++ compiler. Permission was granted, with agreement also coming from the
    FSF. Mark Mitchell [announced the decision](http://gcc.gnu.org/ml/gcc/2010-05/msg00705.html)
    in an email to the GCC mailing list on May 31, 2010\.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 2010 年 5 月，[GCC 发布经理在 IRC 上进行了问答](http://gcc.gnu.org/wiki/Release%20Manager%20Q%26A?action=AttachFile&do=view&target=rmqa-20100527.txt)。会议的结论是请求
    GCC 指导委员会的许可，以在 GCC 本身中使用 C++ 语言特性，而不仅仅是用 C++ 编译器进行编译。许可获得批准，并且自自由软件基金会也表示同意。Mark
    Mitchell 在 2010 年 5 月 31 日的 GCC 邮件列表中[宣布了这一决定](http://gcc.gnu.org/ml/gcc/2010-05/msg00705.html)。
- en: In that thread, [Jakub Jelinek](http://gcc.gnu.org/ml/gcc/2010-05/msg00746.html)
    and [Vladimir Makarov](http://gcc.gnu.org/ml/gcc/2010-05/msg00744.html) expressed
    a lack of enthusiasm for the change. However, as Makarov put it, he had no desire
    to start a flame war over a decision that had already been made. That said, he
    recently shared via email that his primary concern was that the GCC community
    would rush into converting the GCC code base to C++ "<q>instead of working on
    more important things for GCC users (like improving performance, new functionality
    and so on). Fortunately, it did not happen.</q>"
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个帖子中，[Jakub Jelinek](http://gcc.gnu.org/ml/gcc/2010-05/msg00746.html) 和 [Vladimir
    Makarov](http://gcc.gnu.org/ml/gcc/2010-05/msg00744.html) 对这一变化表达了不太热情的态度。然而，正如
    Makarov 所说，他并不希望为一个早已做出的决定而引发争论。话虽如此，他最近通过电子邮件分享，他主要的担忧是 GCC 社区会匆忙将 GCC 代码库转换为
    C++，“而不是致力于为 GCC 用户改进性能、增加新功能等更重要的事情。” 幸运的是，这种情况并未发生。
- en: 'Richard Guenther was concerned about [creating a tree class hierarchy](http://gcc.gnu.org/ml/gcc/2010-05/msg00745.html):'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: Richard Guenther 对[创建一个树类层次结构](http://gcc.gnu.org/ml/gcc/2010-05/msg00745.html)表示关注：
- en: It's a lot of work (tree extends in all three Frontends, middle-end and backends).
    And my fear is we'll only get a halfway transition - something worse than no transition
    at all.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一项艰巨的工作（树在所有三个前端、中端和后端都有扩展）。我担心我们只会完成一半的过渡 - 这比没有过渡更糟糕。
- en: The efforts of the proponents to allay concerns, and the "please be careful"
    messages from the opponents give some indication of the other concerns. In addition
    to the issues raised by Taylor at the 2008 presentation, Jelinek mentioned memory
    usage. Others, often as asides to other comments, worried that novice C++ programmers
    would use the language inappropriately, and create unmaintainable code.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 支持者的努力缓解了担忧，而反对者的“请小心”信息也显示了其他担忧的迹象。除了 Taylor 在 2008 年的演示中提出的问题外，Jelinek 还提到了内存使用情况。其他人时常在其他评论中担心，初学者的
    C++ 程序员可能会不当使用语言，导致代码难以维护。
- en: 'There was much discussion about coding standards in the thread. Several argued
    for existing standards, but others pointed out that they needed to define a "safe"
    subset of C++ to use. There was, at first, little agreement about which features
    of C++ were safe for a novice C++ developer. Taylor proposed a set of coding standards.
    These were amended by Lawrence Crowl and others, and then were [adopted](http://gcc.gnu.org/codingconventions.html).
    Every requirement has a thorough rationale and discussion attached. However, the
    guiding principle on maintainability is not the coding standard, but one that
    always existed for GCC: the maintainer of a component makes the final decision
    about any changes to that component.'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 论坛上关于编码标准有很多讨论。有几人主张现有的标准，但也有人指出他们需要定义一个“安全”的 C++ 子集来使用。起初关于哪些 C++ 特性对于初学者来说是安全的意见不一。Taylor
    提出了一套编码标准。这些被 Lawrence Crowl 和其他人修改后，然后被[采纳](http://gcc.gnu.org/codingconventions.html)。每个要求都有详尽的理由和讨论。然而，在可维护性上的指导原则并不是编码标准，而是一直存在于
    GCC 中的原则：组件的维护者对于该组件的任何更改都有最终决定权。
- en: Current status
  id: totrans-split-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 当前状态
- en: Currently, those who supported the changes feel their efforts provided the benefits
    they expected. No one has publicly expressed any dissatisfaction with the effort.
    Makarov was relieved that his fear that the conversion effort would be a drain
    on resources did not come to pass. In addition, he cites the benefits of improved
    modularity as being a way to make GCC easier to learn, and thus more likely to
    attract new developers.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，支持这些变化的人认为他们的努力产生了他们预期的好处。没有人公开表达对这项工作的不满。Makarov松了一口气，因为他担心的转换工作会耗费资源的担忧并未成真。此外，他指出提高模块化的好处是使GCC更容易学习，因此更有可能吸引新的开发人员。
- en: As far as speed goes, Makarov noted that a bootstrap on a multi-CPU platform
    is as fast as it was for C. However, on uniprocessor platforms, a C bootstrap
    was 30% faster. He did not speculate as to why that is. He also found positive
    impacts, like converting to C++ hash tables, which sped up compile time by 1-2%.
    This last work is an ongoing process, that Lawrence Crowl last [reported](http://gcc.gnu.org/ml/gcc-patches/2012-10/msg00217.html)
    on in October 2012\. In keeping with Makarov's concerns, this work is done slowly,
    as people's time and interests permit.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 关于速度，Makarov指出，在多CPU平台上引导程序的速度与C语言相比是一样快的。然而，在单处理器平台上，C语言的引导速度要快30%。他没有推测为什么会这样。他还发现了积极的影响，比如转换为C++的哈希表，可以将编译时间加快1-2%。这项工作是一个持续进行的过程，Lawrence
    Crowl在2012年10月最后[报告](http://gcc.gnu.org/ml/gcc-patches/2012-10/msg00217.html)过这方面的工作。为了响应Makarov的关切，这项工作进行得很慢，取决于人们的时间和兴趣。
- en: Of the initial desired conversions (gengtype, tree, and vector), vector support
    is provided using C++ constructs (i.e., a class) and gengtype has been rewritten
    for C++ compatibility. Trees are a different matter. Although they have been much
    discussed and volunteered for several times, no change has been made to the code.
    This adds credence to the 2010 contention of Guenther (who has [changed his surname
    to Biener](http://comments.gmane.org/gmane.comp.gcc.patches/272850)) that it would
    be difficult to do correctly. Reached recently, Biener stated that he felt it
    was too early to assess the impact of the conversion because, compared to the
    size of GCC, there have been few changes to C++ constructs. On the negative side,
    he noted (as others have) that, because of the changes, long-time contributors
    must relearn things that they were familiar with in the past.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在最初希望进行的转换中（gengtype、tree和vector），vector支持已经使用C++构造（即一个类）提供，而gengtype已经重写以支持C++兼容性。树结构则是另一回事。尽管它们被广泛讨论过，并且多次自愿进行，但代码并未作出任何改变。这加强了Guenther（现已将姓氏改为Biener）在2010年的主张的可信度，即正确地进行转换会很困难。最近联系到的Biener表示，他认为现在评估转换的影响还为时过早，因为与GCC的规模相比，对C++构造的改变还很少。但他也指出（正如其他人所言），由于这些改变，长期贡献者必须重新学习他们过去熟悉的内容。
- en: In 2008, 2009, and 2010, (i.e., at the beginning and after each milestone) Taylor
    provided formal plans for the next steps. There is no formal plan going forward
    from here. People will use C++ constructs in future patches as they deem necessary,
    but not just for the sake of doing so. Some will limit their changes to the times
    when they are patching the code anyway. Others approach the existing C code with
    an eye to converting code to C++ wherever it makes the code clearer or more efficient.
    Therefore, this is an ongoing effort on a meandering path for the foreseeable
    future.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在2008年、2009年和2010年（即在开始和每个里程碑之后），Taylor提供了下一步的正式计划。从这里起，没有正式的计划。未来的补丁中，人们将根据需要使用C++构造，但不仅仅为了这样做而这样做。有些人将改变局限于在修补代码时进行。其他人则审视现有的C代码，以便在代码更清晰或更高效时将其转换为C++。因此，在可预见的未来，这将是一项沿着曲折路径持续进行的努力。
- en: As the C++ project has progressed, some fears have been allayed, while some
    developers are still in a holding pattern. For them it is too soon to evaluate
    things definitively, and too late to change course. However, the majority seems
    to be pleased with the changes. Only time will tell what new benefits or problems
    will arise.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 随着C++项目的进展，一些担忧已经消除，而一些开发人员仍然处于观望状态。对于他们来说，现在评估事物还为时过早，改变方向也为时已晚。然而，大多数人似乎对这些变化感到满意。只有时间能告诉我们，新的利益或问题将会出现。
- en: '* * *'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: (
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: （
- en: '[Log in](https://lwn.net/Login/?target=/Articles/542457/)'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[登录](https://lwn.net/Login/?target=/Articles/542457/)'
- en: to post comments)
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: （发表评论）
