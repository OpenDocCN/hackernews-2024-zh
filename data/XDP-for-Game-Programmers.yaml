- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 12:54:06'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 12:54:06'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: XDP for Game Programmers
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏程序员的XDP
- en: 来源：[https://mas-bandwidth.com/xdp-for-game-programmers/](https://mas-bandwidth.com/xdp-for-game-programmers/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mas-bandwidth.com/xdp-for-game-programmers/](https://mas-bandwidth.com/xdp-for-game-programmers/)
- en: I'm [Glenn Fiedler](https://www.linkedin.com/in/glenn-fiedler-11b735302/?ref=mas-bandwidth.com)
    and welcome to **Más Bandwidth**, my new blog at the intersection of game network
    programming and scalable backend engineering.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我是[Glenn Fiedler](https://www.linkedin.com/in/glenn-fiedler-11b735302/?ref=mas-bandwidth.com)，欢迎来到**Más
    Bandwidth**，我在游戏网络编程和可伸缩后端工程交汇处的新博客。
- en: What's this new blog about? Games with thousands of players. Virtual worlds.
    Performance in virtual spaces to an audience of *millions*. **The Metaverse**
    (no, not THAT metaverse, the ***real metaverse**, sans blockchain*). Overlay worlds
    in AR. Telepresence and remote working in virtual reality. Game streaming *(eww
    gross!).* OK, everything but that last one and I'm going to explain why in a later
    article.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新博客是关于什么？拥有数千玩家的游戏。虚拟世界。以百万为单位的虚拟空间性能。**元宇宙**（不，不是那个元宇宙，是***真正的元宇宙，没有区块链***）。增强现实中的叠加世界。遥感和虚拟现实中的远程工作。游戏流媒体（*呸，令人作呕！*）。好吧，除了最后一个，我将在稍后的文章中解释为什么。
- en: But seriously. Within 10 years, everybody is going to have 10gbps internet.
    How will this change how games are made? How are we going to use all this bandwidth?
    5v5 shooters just aren't going to cut it anymore. **What's next?**
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但说真的，在10年内，每个人都将拥有10gbps的互联网。这会如何改变游戏制作？我们将如何利用所有这些带宽？5v5射击游戏将不再适用。**接下来是什么？**
- en: As a fitting first post to this blog, if ever you find yourself, as I did, needing
    the ***absolute maximum bandwidth*** for an application, then you'll need to use
    a kernel bypass technology. Why? Because otherwise, the overhead of processing
    each packet in the kernel and passing it down to user space and back up to the
    kernel and out to the NIC limits the throughput you can achieve. We're talking
    10gbps and above here.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为这个博客的首篇文章，如果你发现自己像我一样，需要应用程序的***绝对最大带宽***，那么你将需要使用内核旁路技术。为什么？因为否则，每个数据包在内核中处理并将其传递到用户空间，再返回到内核并传递到网卡的开销会限制您能达到的吞吐量。我们在这里谈论的是10gbps及以上的速度。
- en: The good news is that in the last 5 years the Linux kernel bypass technology
    known as XDP/eBPF has matured enough that it has moved from the domain of kernel
    hackers, to now at the beginning of 2024, being generally usable by normal people
    like you and me.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，在过去的5年里，作为Linux内核旁路技术的XDP/eBPF已经足够成熟，使得它已经从内核黑客的领域转移到现在2024年初，可以被像你我这样的普通人普遍使用。
- en: So in this article I'm going to give you a quick overview of how XDP/eBPF works,
    show you what you can actually do with XDP/eBPF, *and* give you some working example
    code ([https://github.com/mas-bandwidth/xdp](https://github.com/mas-bandwidth/xdp?ref=mas-bandwidth.com))
    for some simple XDP programs so you can start using this technology in your applications.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本文中，我将为您快速概述XDP/eBPF的工作原理，展示您可以用XDP/eBPF做什么，*并*为一些简单的XDP程序提供一些工作示例代码（[https://github.com/mas-bandwidth/xdp](https://github.com/mas-bandwidth/xdp?ref=mas-bandwidth.com)），这样您就可以开始在应用程序中使用这项技术。
- en: You can do some truly amazing things in XDP so read on!
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在XDP中做一些真正了不起的事情，所以请继续阅读！
- en: '* * *'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: What is XDP and how does it work?
  id: totrans-split-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是XDP，它是如何工作的？
- en: XDP stands for "express data path" and it's basically a way for you to write
    a function that gets called at the very earliest point when a packet comes off
    the NIC, right before the Linux kernel does any allocations or processing for
    the packet.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: XDP代表"快速数据路径"，基本上是一种你可以编写函数的方式，在数据包从网卡出来时最早的时刻调用该函数，就在Linux内核为数据包进行任何分配或处理之前。
- en: 'This is incredible. This is powerful. This is programmer crack. You can write
    a function that runs inside the Linux Kernel and you can do *almost anything you
    want*. You can:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是不可思议的。这是强大的。这是程序员的毒品。你可以编写一个在Linux内核中运行的函数，你几乎可以做*任何你想做的事情*。你可以：
- en: Drop the packet
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 丢弃数据包
- en: Modify the packet contents, or replace it entirely
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改数据包内容，或完全替换数据包
- en: Grow or shrink the packet at head or the tail
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在包头或包尾增加或减少数据包大小
- en: Send a response packet, or forward the packet to another address
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送响应数据包，或将数据包转发到另一个地址
- en: '*OR*'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*或*'
- en: '*Pass the packet down to the kernel for regular processing*'
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将数据包传递到内核进行常规处理*'
- en: The last one is key. With other kernel bypass technologies like DPDK you needed
    to install a second NIC to run your program or basically implement (or license)
    an entire TCP/IP network stack to make sure that everything works correctly under
    the hood (the NIC is doing a lot more than just processing UDP packets for your
    game...).
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点至关重要。与 DPDK 等其他内核旁路技术不同，您需要安装第二个 NIC 来运行您的程序，或者基本上实现（或许可）一个完整的 TCP/IP 网络堆栈，以确保一切在幕后正常工作（NIC
    不仅仅处理 UDP 数据包，例如您的游戏...）。
- en: Now you can just laser focus your XDP program to apply, for example, only to
    IPv4 UDP packets sent to port 40000, and pass everything else on to the Linux
    kernel for regular processing. Easy.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以专注于调整您的 XDP 程序，例如，仅适用于发送到端口 40000 的 IPv4 UDP 数据包，并将其他所有数据包传递给 Linux 内核进行常规处理。简单吧。
- en: '***Correction:** Apparently these days you can use a "bifurcated driver" with
    DPDK now to pass certain packets back to the OS. This wasn''t available the last
    time I worked with DPDK, which was quite some time ago. I still prefer XDP over
    DPDK though.*'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '***更正：** 显然，现在您可以使用 "双分支驱动程序" 与 DPDK 一起将某些数据包传递回操作系统。这在我上次使用 DPDK 时还不可用，那是相当长时间之前的事情了。不过我仍然更喜欢
    XDP 而不是 DPDK。*'
- en: What is eBPF**?**
  id: totrans-split-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是 eBPF**?**
- en: eBPF stands for "extended Berkeley Packet Filter" and it's the technology that
    lets you compile, link and run your XDP program in the Linux Kernel.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: eBPF 代表"扩展伯克利数据包过滤器"，它是一种技术，可以让您在 Linux 内核中编译、链接和运行 XDP 程序。
- en: In short, eBPF is a byte code and lightweight VM that runs functions inside
    the Linux Kernel. There are many different places that eBPF functions can be inserted,
    and XDP is just one of them.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，eBPF 是一个在 Linux 内核中运行函数的字节码和轻量级虚拟机。eBPF 函数可以插入许多不同的位置，而 XDP 只是其中之一。
- en: Because eBPF functions run inside the Linux kernel, they must not crash and
    they absolutely must halt. To make sure this is true, BPF functions have to pass
    a verifier before they can be loaded into the Kernel.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 eBPF 函数在 Linux 内核中运行，它们不能崩溃，绝对不能停止。为了确保这一点成立，BPF 函数在加载到内核之前必须通过验证器。
- en: In practice, this means that XDP functions are very slightly limited in what
    they can do. They're not Turing complete (halting problem), and you have to do
    a lot of dancing about to prove to the verifier that you aren't writing outside
    of bounds. But in practice, as long as you keep things simple, and you're willing
    to creatively do battle with the verifier, you can *usually* convince it that
    your program is safe.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，这意味着 XDP 函数在功能上有些受限。它们不是图灵完备的（停机问题），并且你必须做很多努力来向验证器证明你不会写出界。但实际上，只要保持简单，并且愿意与验证器创造性地对抗，通常可以说服它你的程序是安全的。
- en: Setting up for eBPF/XDP on Ubuntu 22.04 LTS
  id: totrans-split-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Ubuntu 22.04 LTS 上设置 eBPF/XDP
- en: Before you can get started wring XDP programs, you need to set up your machine
    so that it can compile, link and run eBPF programs, and load them in the kernel.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在您开始编写 XDP 程序之前，您需要设置您的机器，以便能够编译、链接和运行 eBPF 程序，并将它们加载到内核中。
- en: Starting from an Ubuntu 22.04 LTS distribution.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Ubuntu 22.04 LTS 发行版开始。
- en: 'First you need to make sure you have the 6.5 Linux kernel:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要确保您有 6.5 版本的 Linux 内核：
- en: '[PRE0]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If the output from this isn''t version 6.5, update your kernel with:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输出不是版本 6.5，请使用以下命令更新您的内核：
- en: '[PRE1]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the following in your command line:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行中运行以下命令：
- en: '[PRE2]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In summary, the key step is building **libxdp** from source, and then building
    and installing the exact version of **libbpf** that is *included* in **libxdp**.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，关键步骤是从源代码构建 **libxdp**，然后构建并安装包含在 **libxdp** 中的确切版本的 **libbpf**。
- en: I can only guess why this is necessary, but without this, I have found no other
    way to get XDP fully working on Ubuntu 22.04, including all functionality like
    BTFs, kfuncs and kernel modules. More on those later.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我只能猜测为什么这是必要的，但如果没有这个步骤，我找不到在 Ubuntu 22.04 上使 XDP 完全工作的其他方法，包括像 BTFs、kfuncs
    和内核模块等所有功能。稍后会详细介绍这些内容。
- en: XDP Reflect
  id: totrans-split-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XDP 反射
- en: Now we'll build and run a simple XDP program. In this program we'll just reflect
    UDP packets sent to us on port 40000 back to the sender. All other packets are
    passed to the kernel for regular processing.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将构建并运行一个简单的 XDP 程序。在这个程序中，我们将把发送到我们的端口 40000 的 UDP 数据包原样反射回发送者。所有其他数据包都传递给内核进行常规处理。
- en: 'First, clone my [XDP example repo](https://github.com/mas-bandwidth/xdp?ref=mas-bandwidth.com)
    from GitHub:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从 GitHub 克隆我的 [XDP 示例库](https://github.com/mas-bandwidth/xdp?ref=mas-bandwidth.com)：
- en: '[PRE3]'
  id: totrans-split-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Change into the reflect dir and make the program:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到 reflect 目录并制作程序：
- en: '[PRE4]'
  id: totrans-split-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the UDP reflect program, passing in the name of the network interface to
    attach the program to. You can use **ifconfig** to list the network interfaces
    on your Linux machine.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 运行UDP反射程序，传入要连接程序的网络接口的名称。您可以使用**ifconfig**列出Linux机器上的网络接口。
- en: '[PRE5]'
  id: totrans-split-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open up another terminal window to watch logs from the XDP program:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 打开另一个终端窗口以查看来自XDP程序的日志：
- en: '[PRE6]'
  id: totrans-split-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next clone the XDP repo again on another machine, and run the corresponding
    client for the reflect program, replacing 192.168.1.40 with the IP address of
    your Linux machine running the XDP program:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后再在另一台机器上克隆XDP存储库，并运行相应的反射程序客户端，将192.168.1.40替换为运行XDP程序的Linux机器的IP地址：
- en: '[PRE7]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If everything is working, you should see logs like this:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，您应该看到如下日志：
- en: '[PRE8]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Congratulations, just you've built and run your first XDP program, and it's
    no toy. If you simply comment out the **#define DEBUG 1** line in reflect_xdp.c,
    it's capable of reflecting packets at line rate on a 10G NIC.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您已经构建并运行了您的第一个XDP程序，而且它不是玩具。如果您只是注释掉**#define DEBUG 1**行，在reflect_xdp.c中，它能够在10G
    NIC上以线速率反射数据包。
- en: XDP Drop
  id: totrans-split-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XDP Drop
- en: Next we'll run a program that listens on a UDP port and drops packets that don't
    match a pattern. This type of XDP program can be useful to harden your game server
    against DDoS, although it's certainly not a panacea.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将运行一个程序，监听一个UDP端口，并丢弃不匹配模式的数据包。这种类型的XDP程序对于加固您的游戏服务器抵御DDoS攻击非常有用，尽管它肯定不是万能解药。
- en: 'The general idea is to hash key packet data, for example: packet length, source
    and dest addresses and ports, and potentially also some rolling magic number that
    changes every minute if you want to get fancy. While it''s not perfect, and it
    doesn''t protect against packet replay attacks, at least a randomly generated
    UDP packet will fail the pattern check.'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 总体思路是对关键数据包进行哈希，例如：数据包长度、源和目标地址和端口，以及如果想要更高级的话，还可以包括每分钟变化的某些滚动魔法数字。虽然这不是完美的，并且无法防止数据包重放攻击，但至少随机生成的UDP数据包将无法通过模式检查。
- en: The trick is to *shmear* this 8 byte hash across 15 bytes at the start of the
    packet in a reversible way, effectively doing the opposite of compression. We're
    going to store this data very inefficiently, such that each byte in the header
    has a very narrow range of values that are actually valid, and most are not. Now
    we have an extremely low entropy pattern we can check for, without even calculating
    the hash.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是以可逆的方式将这个8字节哈希分散在数据包开头的15字节中，有效地执行与压缩相反的操作。我们将以非常低效的方式存储这些数据，使得标头中的每个字节都有一个非常窄的有效值范围，并且大多数不是有效值。现在我们有一个极低熵的模式可以检查，甚至无需计算哈希。
- en: 'Here''s an example that takes the hash and fills a 16 byte header, with 15
    bytes of a low entropy encoding of the hash, and the first byte reserved for packet
    type:'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例，它使用哈希并填充了一个16字节的标头，其中包括一个低熵编码的哈希的15字节，以及用于数据包类型的第一个字节的保留字节：
- en: '[PRE9]'
  id: totrans-split-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To run the xdp drop program just change into the ''drop'' directory and run
    it on your network interface:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行xdp drop程序，只需切换到'drop'目录，并在您的网络接口上运行它：
- en: '[PRE10]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And then on another computer, run the drop client, replacing the addresses
    with the client and drop XDP program addresses respectively:'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在另一台计算机上运行drop客户端，分别替换客户端和drop XDP程序地址：
- en: '[PRE11]'
  id: totrans-split-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'On the XDP machine you''ll see in the logs that the packet filter passed:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在XDP机器上，您将看到日志显示数据包过滤器通过了：
- en: '[PRE12]'
  id: totrans-split-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Try modifying the client.go to send randomly generated packet data without the
    header. You'll see in the logs now that the packet filter drops the packets. The
    encoding of the hash is so low entropy that it's virtually impossible for a randomly
    generated packet to pass the packet filter.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试修改client.go以发送不带标头的随机生成的数据包。现在您将在日志中看到，数据包过滤器丢弃了数据包。哈希的编码非常低熵，以至于几乎不可能有随机生成的数据包通过数据包过滤器。
- en: If you end up using this technique in production, *please* make sure to change
    the low entropy encoding to something unique for your game, because script kiddies
    read these articles too. In addition, make sure your encoding is reversible, so
    you can reconstruct the hash on the receiver side and drop the packet in XDP when
    the hash doesn't match the expected value. Now people can't spoof their source
    address or port!
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要在生产环境中使用这种技术，请务必确保将低熵编码更改为游戏中独特的内容，因为脚本小子也会阅读这些文章。此外，确保您的编码是可逆的，这样您就可以在接收端重建哈希并在XDP中丢弃数据包，当哈希与预期值不匹配时。现在人们无法伪造其源地址或端口！
- en: XDP Whitelist
  id: totrans-split-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XDP白名单
- en: What about an even simpler approach? Why not just maintain a list of IP addresses
    that are allowed to communicate with the game server, and drop any packets that
    aren't from a whitelisted address?
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，更简单的方法呢？为什么不只是维护一个允许与游戏服务器通信的IP地址列表，丢弃任何不是来自白名单地址的数据包呢？
- en: Sure, you need to do some work in the backend to "open" client addresses on
    the server prior to connect, and you have to do some work to "close" the address
    when clients disconnect... but this is do-able, and now, packets thrown at your
    game server from random addresses will be dropped by XDP, before the Linux kernel
    does any work to process them.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您需要在连接之前在服务器上的后端进行一些工作来“打开”客户端地址，并且在客户端断开连接时进行一些工作来“关闭”地址...但这是可行的，现在，来自随机地址的数据包被XDP丢弃，而不是Linux内核进行任何处理。
- en: 'To do this we need a way to communicate the whitelist to the XDP program. And
    here we get to use a new feature of BPF: **Maps**.'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们需要一种将白名单传递给XDP程序的方法。在这里，我们可以使用BPF的一个新功能：**Maps**。
- en: Maps are an incredibly rich set of data structures that you can use from BPF.
    Arrays, Hashes, Per-CPU arrays, Per-CPU hashes and so on. All of these data structures
    are lockless, and you can read and write to them both from inside BPF programs,
    and from user space programs.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: Map是一组非常丰富的数据结构，您可以从BPF中使用。数组、哈希、每CPU数组、每CPU哈希等等。所有这些数据结构都是无锁的，您可以从BPF程序内部和用户空间程序中读取和写入它们。
- en: 'If you see where I''m going here, you now have a way to communicate from your
    BPF program back out to user space and vice-versa. It''s almost too easy now:
    just call functions in your user space program to add and remove entries from
    a whitelist hash map.'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你明白我现在的意图，你现在有了一种从BPF程序通信到用户空间并反之的方法。现在这几乎太容易了：只需调用用户空间程序中的函数来添加和删除白名单哈希映射中的条目。
- en: 'Run the whitelist XDP program, replacing the interface name with your own:'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 运行白名单XDP程序，用您自己的接口名称替换：
- en: '[PRE13]'
  id: totrans-split-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And then on another computer, run the whitelist client, replacing the addresses
    with the client and drop XDP program addresses respectively:'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在另一台计算机上运行白名单客户端，分别用客户端和drop XDP程序地址替换地址：
- en: '[PRE14]'
  id: totrans-split-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you look at the logs from the XDP program:'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看XDP程序的日志：
- en: '[PRE15]'
  id: totrans-split-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You'll see that it prints out that it's dropping the packets because they're
    not in the whitelist. Edit **whitelist/whitelist.c** and add the address of the
    machine running client.go, then reload the XDP program. Run the client.go again,
    and the packets should pass. At this point, if you bind a UDP socket to port 40000
    on the XDP machine, it would receive only packets that pass the whitelist check.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到它打印出来说它正在丢弃包，因为它们不在白名单中。编辑**whitelist/whitelist.c**，添加运行client.go的机器的地址，然后重新加载XDP程序。再次运行client.go，数据包应该通过。此时，在XDP机器上将UDP套接字绑定到端口40000，它只会接收通过白名单检查的数据包。
- en: If you use this in production, you'll need to write your own system to add and
    remove whitelist entries. Maybe your server hits a backend periodically for the
    list of open addresses? Maybe it subscribes to some queue? In addition, the whitelist
    hash values in this example are empty, but you could put data in there. What about
    a secret key per-client to make the packet filter hash more secure? You can combine
    whitelist with packet filters and hash checks to stop attackers from spoofing
    their IPv4 source address to get through the whitelist.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在生产中使用这个，您将需要编写自己的系统来添加和删除白名单条目。也许您的服务器定期向后端获取打开地址的列表？也许它订阅某个队列？此外，此示例中的白名单哈希值为空，但您可以在其中放置数据。对于每个客户端的秘密密钥以使数据包过滤器哈希更安全怎么样？您可以将白名单与数据包过滤器和哈希检查结合起来，阻止攻击者伪造其IPv4源地址以通过白名单。
- en: XDP Relay
  id: totrans-split-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XDP中继
- en: What if your game server gets still gets overloaded by DDoS attacks even though
    XDP is dropping packets with whitelists, packet filter checks and hash checks?
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的游戏服务器即使XDP正在使用白名单、数据包过滤检查和哈希检查丢弃数据包，仍然受到DDoS攻击的超载影响呢？
- en: The DDoS attacks are getting bigger. Much bigger. Congratulations, your game
    is **super successful**. Why not put a relay in front of your game server, that
    only forwards valid packets, hiding the IP address of your game server entirely?
    You could have relays in each datacenter protecting your game servers, and these
    relays could have 10, 40 or 100gbps NICs.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: DDoS攻击变得更大了。大得多。恭喜，您的游戏**非常成功**。为什么不在游戏服务器前面放置一个中继，只转发有效数据包，完全隐藏游戏服务器的IP地址？您可以在每个数据中心保护您的游戏服务器，并且这些中继可以拥有10、40或100gbps的网卡。
- en: I'm leaving this one as an exercise for the reader. Combine the whitelist approach
    above with enough information in the whitelist hash value entry for the relay
    to forward the packet from the client to the server and vice-versa.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我把这个留给读者作为练习。将上述白名单方法与足够的信息结合在白名单哈希值条目中，使中继能够从客户端到服务器和反向转发数据包。
- en: 'Now drop any packets from addresses that aren''t in the whitelist as quickly
    as possible. Bonus points: track sequence numbers per-client connection to avoid
    replay attacks and rate limit the client connection to some maximum bandwidth
    envelope per-client. This is starting to become a pretty solid system.'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尽快丢弃任何不在白名单中的地址的数据包。加分：跟踪每个客户端连接的序列号，以避免重放攻击，并限制每个客户端连接到某个最大带宽信封。这开始成为一个相当稳固的系统。
- en: At this point you basically have your own version of Steam Data Relay (SDR)
    that isn't free. It's quite possibly even better than SDR. Well done! If you have
    infinite resources and your own money printing machine in your basement like Valve
    has, you can afford to run this system at scale too.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你基本上拥有了自己的版本的Steam数据中继（SDR），只是这个不是免费的。它很可能甚至比SDR更好。干得好！如果你有无限的资源并且像Valve一样在地下室里有自己的印钞机，你也能负担得起运行这个系统。
- en: Network Acceleration with XDP
  id: totrans-split-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用XDP进行网络加速
- en: Did you know that at any time around 5-10% of your players are experiencing
    bad network performance like much higher latency than usual, high jitter or high
    packet loss? It's difficult to believe, but it's true. I have the data from more
    than 50 million unique players to prove it.
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗，随时有大约5-10%的玩家遭遇网络性能不佳，例如比平常更高的延迟、高抖动或高丢包率？很难相信，但这是真的。我有来自超过五千万名独特玩家的数据来证明这一点。
- en: Even more interesting is the fact that this bad network performance moves around
    and affects ~90% of your players every month. It's not the same 5-10% of players
    every day.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 更有趣的是，这种网络性能不佳每个月都在变动，影响大约90%的玩家。不是每天同样的5-10%的玩家。
- en: This is not just some small minority of players with bad internet connections,
    this is a systemic problem. An inconsistency in network performance from one match
    to the next that affects the majority of your players.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅仅是一小部分网络连接不佳的玩家，这是一个系统性问题。从一场比赛到下一场比赛，网络性能的不一致影响了大多数玩家。
- en: My company [Network Next](https://networknext.com/?ref=mas-bandwidth.com) fixes
    this problem by steering game packets through relays, and yes... we even beat
    Google cloud to their own datacenters with premium transit, Amazon to their own
    datacenters with Amazon Global Accelerator, and we massively outperform Steam
    Data Relay (SDR).
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的公司[Network Next](https://networknext.com/?ref=mas-bandwidth.com)通过引导游戏数据包经过中继来解决这个问题，而且……我们甚至超越了谷歌云到它们自己的数据中心使用的高级传输，亚马逊全球加速器到它们自己的数据中心，还大大超越了Steam数据中继（SDR）。
- en: And the Network Next relays are implemented in XDP.
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: Network Next中继已在XDP中实现。
- en: Crypto in XDP
  id: totrans-split-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在XDP中的加密
- en: One problem I encountered when implementing the Network Next relay was, how
    can I access crypto from inside my XDP program? Sure I can forward or drop packets
    quickly, but my decision whether I would forward or drop packets was based not
    only on whitelists, packet filters and hash checks, but also on cryptographic
    tests like sha256 and chachapoly.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 实施Network Next中继时遇到的一个问题是，我如何从我的XDP程序内部访问加密？当然我可以快速转发或丢弃数据包，但我决定是否转发或丢弃数据包不仅基于白名单、数据包过滤器和哈希检查，还基于sha256和chachapoly等加密测试。
- en: While it's certainly possible that I could fight the verifier and write my own
    cryptographic primitives in BPF directly, it seemed counter productive. I'd spend
    a lot of time fighting the verifier and in the end, it might not even be possible
    to implement a given crypto primitive within the limitations of the verifier.
    It has an uncanny ability *not* to not be able to see why your code is completely
    fucking safe. Seriously, by the end of writing an XDP program you really want
    to punch it in the face.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我肯定可以与验证程序作斗争并直接在BPF中编写自己的加密基元，但这似乎是逆生产的。我将花费大量时间与验证程序作斗争，最终，也许甚至不能在验证程序的限制下实现给定的加密基元。它具有一种不察觉你的代码完全安全的神秘能力。说真的，写完XDP程序后，你真的会想揍它一顿。
- en: Coming to the rescue are the last two features of BPF that we'll discuss in
    this article. **BTF** and **kfuncs**.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 救援即将到来的是本文将讨论的BPF的最后两个特性。**BTF**和**kfuncs**。
- en: In short, you can write your own kernel module, then export functions from that
    module called kernel funcs or (kfuncs), and call them from inside XDP. You can
    even annotate those functions so that the BPF verifier knows, ok, this is function
    parameter is a void pointer *data*, and here is the length of data int *data__sz.*
    These annotations are done via BTF, a sort of light weight type system that exports
    type data from the Linux kernel, *including kernel modules*, so they can be accessed
    from BPF.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，你可以编写自己的内核模块，然后从该模块导出称为内核函数或（kfuncs）的函数，并从 XDP 内部调用它们。甚至可以注释这些函数，以便 BPF
    验证器知道，好的，这个函数参数是一个 void 指针 *data*，这是数据的长度 int *data__sz.* 这些注释通过 BTF 完成，BTF 是一种轻量级的类型系统，它从
    Linux 内核中导出类型数据，*包括内核模块*，因此可以从 BPF 访问。
- en: Using this we can implement this function inside our own custom **crypto_module**
    kernel module to perform sha256 using the existing Linux kernel crypto primitives.
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个方法，我们可以在我们自己的自定义 **crypto_module** 内核模块中实现这个函数，使用现有的 Linux 内核加密原语执行 sha256。
- en: 'To see this in action, first build and load the kernel module:'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这个过程，首先构建并加载内核模块：
- en: '[PRE16]'
  id: totrans-split-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, build and run the XDP program, replacing the network interface name with
    your own:'
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，构建并运行 XDP 程序，用你自己的网络接口名称替换它：
- en: '[PRE17]'
  id: totrans-split-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now on another computer, change into the crypto dir and run the client, replacing
    the address with the IP address of the machine running the XDP program:'
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在另一台计算机上，切换到 crypto 目录并运行客户端，用运行 XDP 程序的机器的 IP 地址替换地址：
- en: '[PRE18]'
  id: totrans-split-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If everything goes correctly, you'll see the XDP program respond with a 32 byte
    packets for each packet you send, containing the sha256 of the first 256 bytes
    of your packets. Why only the first 256 bytes? Well, to understand this, you need
    to understand the limitations of the BPF verifier...
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，你将看到 XDP 程序对每个发送的数据包都回应一个32字节的数据包，其中包含你的数据包前256字节的 sha256。为什么只有前256字节？好吧，要理解这一点，你需要了解
    BPF 验证器的限制…
- en: Limitations of the BPF Verifier
  id: totrans-split-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: BPF 验证器的限制
- en: With kfuncs, it would seem that you should be able to now, pass the entire *void
    * packet*, and *int packet__sz* from XDP in to a kfunc and process it entirely
    inside your kernel module.
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有了 kfuncs，似乎你现在应该能够将整个 *void * packet* 和 *int packet__sz* 从 XDP 传递给一个 kfunc，并在内核模块中完全处理它。
- en: Well, not so fast. The BPF verifier has some limitations and these restrict
    what you can do (at least in 2024). Hopefully these get fixed in the future by
    the Linux BPF developers.
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，别那么快。BPF 验证器有一些限制，这些限制限制了你能做的事情（至少在2024年是这样）。希望 Linux BPF 开发人员将来修复这些问题。
- en: The best way I can describe the limitations of the BPF for XDP programs is that
    it's extremely "anchored" around processing a packet from left to right. Typically,
    you start at the beginning of the packet and you can check to see if there is
    enough bytes in the packet to read the ethernet header, then move the pointer
    right by some constant amount, read the ip header, move a constant amount to the
    right again and read the UDP header, and so on.
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
  zh: BPF 用于 XDP 程序的最佳描述是它极其“锚定”于从左到右处理数据包。通常，你从数据包的开头开始，可以检查数据包中是否有足够的字节来读取以太网头部，然后将指针向右移动一定的量，读取
    IP 头部，再次向右移动一定的量并读取 UDP 头部，依此类推。
- en: But if you try to write code that reads the last 2 bytes in a packet, I simply
    cannot find any way to make this code pass the verifier, even though the code
    is completely safe, and does not read memory outside of bounds.
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你试图编写代码来读取数据包中的最后2个字节，我简直找不到任何方法使得这段代码通过验证器，尽管这段代码完全安全，并且不会读取超出边界的内存。
- en: The next limitation is that it seems (in 2024) that you can only pass constant
    sized portions of the packet data into kfuncs. For example, I could check to see
    if there is at least 256 bytes in the UDP packet payload, then call a kfunc with
    a pointer to the packet data and a constant size of 256 bytes, and this passes
    the verifier. But if you pass in the *actual size* of the packet derived from
    the XDP context, there just seems to be no way to convince the verifier it's safe.
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个限制是（在2024年看来）你似乎只能将数据包的常量大小部分传递给 kfuncs。例如，我可以检查 UDP 数据包载荷中是否至少有256字节，然后使用指向数据包数据和常量大小为256字节的指针调用
    kfunc，这样可以通过验证器。但是，如果你传递从 XDP 上下文派生的数据包的 *实际大小*，似乎无法说服验证器是安全的。
- en: This is huge shame, because if we could simply pass the XDP packet into a kernel
    module and do some stuff there, we'd *really* be cooking with gas. Again, hopefully
    this gets fixed in a future version of BPF.
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个巨大的遗憾，因为如果我们可以简单地将XDP数据包传递给内核模块并在那里执行一些操作，我们真的可以*大展宏图*。希望这在未来的BPF版本中得到修复。
- en: Conclusion
  id: totrans-split-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: In this article we've explored XDP and eBPF, a kernel bypass technology in Ubuntu
    22.04 LTS with Kernel 6.5\. Previously unstable and the domain of only neck-bearded
    kernel hackers, it's now now stable and mature enough for general use by game
    developers.
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们探讨了XDP和eBPF，这是Ubuntu 22.04 LTS中的一种内核旁路技术，使用的内核版本为6.5。此前不稳定，并且只有“脖子上有胡子”的内核黑客才使用的领域，现在已经足够稳定和成熟，可以被游戏开发者广泛使用。
- en: It's a surprisingly powerful and easy to use system once you get the hang of
    it. You can write an XDP function that reflects packets, drops them, forwards
    them, run packet filters, perform whitelist checks and even some crypto. You can
    do all this at line rate of 10gbps and above with minimal work. View the example
    source code for the article ([https://github.com/mas-bandwidth/xdp](https://github.com/mas-bandwidth/xdp?ref=mas-bandwidth.com))
    and see for yourself.
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个令人惊讶的强大且易于使用的系统，一旦你掌握了它的使用技巧。你可以编写一个XDP函数来反射数据包，丢弃它们，转发它们，运行数据包过滤器，执行白名单检查甚至一些加密操作。你可以在10gbps及以上的线速下以最小的工作量完成所有这些操作。查看文章的示例源代码（[https://github.com/mas-bandwidth/xdp](https://github.com/mas-bandwidth/xdp?ref=mas-bandwidth.com)）并自行查看。
- en: I know it sounds crazy, but in the future I'm actually exploring implementing
    entire backend systems and scalable game servers in UDP request/response almost
    entirely inside XDP. With maps, kernel modules and kfuncs, you can really do *almost*
    anything you want, and if you can't, you can at worst case pass the packet down
    to user space for processing. For example, if you were creating a new MMO or hyper
    player count game in 2024, I can't think of a better foundational technology than
    XDP/eBPF.
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道听起来很疯狂，但是在未来，我实际上正在探索在XDP几乎完全内部实现整个后端系统和可扩展的游戏服务器的可能性。通过使用映射、内核模块和内核函数，你几乎可以做到*几乎*任何你想做的事情，如果做不到，最坏的情况下可以将数据包传递到用户空间进行处理。例如，如果你在2024年创建一个新的MMO或超高玩家数量的游戏，我认为没有比XDP/eBPF更好的基础技术了。
- en: I hope this article helps you get started writing XDP programs, they're extremely
    powerful and fun to write, even if the verifier drives you crazy. I look forward
    to seeing what you'll create with it!
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这篇文章能帮助你开始编写XDP程序，它们非常强大且编写起来很有趣，即使验证器让你发疯。期待看到你将会用它创造出什么来！
- en: Best wishes,
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的祝愿，
- en: '- Glenn'
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
  zh: '- Glenn'
