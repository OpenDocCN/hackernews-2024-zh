- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:29:54'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:29:54
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: (Even more) challenging programming projects you should try | James' Coffee
    Blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: (更多) 你应该尝试的具有挑战性的编程项目 | 詹姆斯的咖啡博客
- en: 来源：[https://jamesg.blog/2024/02/28/programming-projects/](https://jamesg.blog/2024/02/28/programming-projects/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://jamesg.blog/2024/02/28/programming-projects/](https://jamesg.blog/2024/02/28/programming-projects/)
- en: My knowledge of programming has been largely self-directed. When I get excited
    about an idea, I research what I need to do to solve that problem. For example,
    when I was interested in how search engines work, I learned about the computational
    efficiency of sets. I discovered the problem "how can I check if I have crawled
    this URL?" when I may have crawled thousands of URLs. To answer this question
    faster, I used a set, which has O(1) lookup time, instead of O(n) lookup time.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我的编程知识主要是自我指导的。当我对一个想法感到兴奋时，我会研究如何解决这个问题。例如，当我对搜索引擎的工作方式感兴趣时，我了解了集合的计算效率。当我可能已经爬取了数千个网址时，我发现了一个问题：“如何检查我是否已经爬取过这个URL？”为了更快地回答这个问题，我使用了集合，它具有O(1)的查找时间，而不是O(n)的查找时间。
- en: Learning what you need to solve a problem is exciting, but following your own
    path in coding also leaves you with gaps in your knowledge. My conclusion here
    is that if you keep challenging yourself, you will fill in the gaps as you go
    (Even if it takes longer than it would have if you pursured a course. Fun is an
    important motivator for making progress; pursue what excites you.)
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 学习解决问题所需的知识是令人兴奋的，但在编码中追随自己的道路也会留下一些知识上的空白。我的结论是，如果你不断挑战自己，你将在前进的过程中填补这些空白（即使这可能比跟随课程花费更长的时间）。乐趣是推动进步的重要动力；追求激发你的东西吧。
- en: 'The moment I really started to understand computational efficiency -- and build
    an appreciation for making my programs faster -- was tackling that one problem
    for that one search engine. Since then, I sometimes ask myself: what can I do
    next? What is the next challenge? This is highly specific to where you are; some
    ideas will make sense, others will seem out of reach. Thus is learning.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当我真正开始理解计算效率，并开始欣赏如何加速我的程序时，是在解决某个搜索引擎的问题时。从那时起，我有时会问自己：接下来我可以做什么？下一个挑战是什么？这高度依赖于你的情况；有些想法会很合理，而有些则看似遥不可及。这就是学习的过程。
- en: In the spirit of Austin Henley's "[challenging projects every programmer should
    try](https://austinhenley.com/blog/morechallengingprojects.html)" series, I wanted
    to offer my own list of projects that have sustained my joy of programming. Herein
    begins the list.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 受奥斯汀·亨利的"[每位程序员都应尝试的挑战性项目](https://austinhenley.com/blog/morechallengingprojects.html)"系列启发，我想提供我自己的一份项目清单，这些项目一直让我对编程充满了乐趣。以下是清单的开端。
- en: Build a search crawler
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建搜索爬虫
- en: A crawler is a bot that navigates web pages and saves their contents. Search
    engines use crawlers to explore the web. The contents of web pages are "indexed".
    This means that pages are saved somewhere that they can be looked up.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 爬虫是一种浏览网页并保存其内容的机器人。搜索引擎使用爬虫来探索网络。网页的内容被“索引”。这意味着页面被保存在可以进行查找的某个地方。
- en: I decided to build a search engine for a small community I was a part of. There
    were ~1000 sites that were known to the community, as established by people who
    contributed to our shared wiki. I used that as the list of sites to crawl. You
    can make your own list of sites and create your own search engine. Maybe you make
    a search engine for your favourite anime blogs. Or Taylor Swift fan sites. Whatever
    you want, so long as it's on the web.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定为我所属的一个小社区构建一个搜索引擎。社区中有大约1000个已知网站，这些网站由为我们共享维基贡献的人员所确认。我将其用作要爬行的网站列表。你可以制作自己的网站列表并创建自己的搜索引擎。也许你可以为你喜欢的动漫博客或泰勒·斯威夫特的粉丝网站创建一个搜索引擎。只要它在网络上存在，你想做什么都可以。
- en: My biggest learning through this process was that the web is a wild west. You
    can never trust that someone's web page is going to be exactly how you want it
    to be. Buidling a search crawler is an exercise in learning how to retrieve as
    many web pages as possible, reliably. without taking someone's site down.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我通过这个过程获得的最大收获是，网络就像一个狂野的西部。你永远不能确信某人的网页会完全符合你的期望。构建搜索爬虫是一个学习如何尽可能可靠地检索尽可能多的网页的过程，而不会使某人的网站崩溃。
- en: 'In building a search crawler, you will learn about:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建搜索爬虫时，你将学到：
- en: How to download a web page
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何下载网页
- en: Standards for content crawling (robots.txt, adult meta tags)
  id: totrans-split-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内容爬取标准（robots.txt，成人元标签）
- en: Rate limiting
  id: totrans-split-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 速率限制
- en: Exponential back-offs
  id: totrans-split-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指数回退
- en: Knowing when to crawl and recrawl sites
  id: totrans-split-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定何时爬取和重新爬取站点
- en: Content negotiation
  id: totrans-split-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内容协商
- en: Etags
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Etags
- en: And more
  id: totrans-split-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等等
- en: Indeed, the web is a wild west. But with that wild west comes many exciting
    technical challenges to solve. This challenge occupied my mind for months. While
    my search engine is no longer active, this project was what gave me confidence
    that I can do more than write small Python scripts.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 的确，网络是一个未开发的领域。但伴随着这个未开发的领域，有许多令人兴奋的技术挑战等待解决。这个挑战占据了我的思绪几个月。虽然我的搜索引擎已不再活跃，但这个项目给了我信心，让我知道我可以做得比写小型
    Python 脚本更多。
- en: Build an autocomplete system
  id: totrans-split-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建立一个自动完成系统
- en: Imagine you have a blog post. How could you auto-complete a word based on a
    sequence of letters? Take this blog post. If I started a word with "exponent",
    how could you, efficiently, recommend "exponential" as the last word? Herein lies
    a challenge. I am not going to talk too much about the how behind this project,
    but there is a lot of fun to be had!
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 想象你有一篇博客文章。如何根据字母序列自动完成单词？以这篇博客文章为例。如果我以“exponent”开始一个词，如何有效地推荐“exponential”作为最后一个单词？这是一个挑战所在。我不会过多讨论这个项目的背后如何，但这确实非常有趣！
- en: 'When you discover how to auto-complete words, there is another challenge: how
    to recommend *which* word to auto-complete. If I type "expone", how should an
    autocomplete know whether to recommend "exponent" or "exponential" (both used
    in this guide).'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当你发现如何自动完成单词时，还有另一个挑战：如何推荐*哪个*单词进行自动完成。如果我输入“expone”，自动完成应该如何知道是推荐“exponent”还是“exponential”（两者都在本指南中使用）。
- en: Write a file compressor
  id: totrans-split-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 写一个文件压缩器
- en: 'There are many existing tools that compress files, but have you ever asked:
    how do they make files smaller?'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 存在许多现有的工具来压缩文件，但你有没有想过：它们是如何使文件变小的？
- en: 'Here''s a challenge: download this web page as a HTML file. Write a program
    that creates a compressed version of the HTML file. Your program should then be
    able to reproduce the exact file. Spaces, captalisation: everything should be
    the same.'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个挑战：下载这个网页作为一个 HTML 文件。编写一个程序，创建 HTML 文件的压缩版本。然后你的程序应该能够精确地重现这个文件。空格、大写字母：一切都应该保持一致。
- en: 'Here are some relevant topics that may guide your reading on this subject (although
    I recommend trying to write a compressor before reading too much about it if that
    excites you!):'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些相关主题，可能会指导你在这个主题上的阅读（尽管我建议在阅读过多内容之前，如果你感兴趣，试着先写一个压缩器！）：
- en: Information theory (the parent field of compression)
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息论（压缩的母领域）
- en: Dictionary coding (a way of representing information)
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典编码（一种表示信息的方式）
- en: Huffman coding (a commonly used compression algorithm)
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Huffman 编码（一种常用的压缩算法）
- en: Entropy (a measure of the amount of "information" in a file; "information" is
    intentionally in quotation marks)
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熵（文件中“信息”量的度量；“信息”故意用引号括起来）
- en: Implement BitCask
  id: totrans-split-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现 BitCask
- en: '[BitCask](https://riak.com/assets/bitcask-intro.pdf) is a key-value store algorithm.
    Key-value stores map keys (names) to values (pieces of information). For example,
    I could store information about posts on this blog like so:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[BitCask](https://riak.com/assets/bitcask-intro.pdf) 是一种键值存储算法。键值存储将键（名称）映射到值（信息片段）。例如，我可以这样存储关于这个博客帖子的信息：'
- en: '[PRE0]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Where "title" and "published" are names, which are associated with values.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: “标题”和“发布”的名称，与值相关联。
- en: 'BitCask works entirely using your file system. You store keys and values in
    files. Every file is append-only. You can delete keys, but this works by overriding
    an existing key rather than deleting the value explicitly. [BitCask is documented
    in a short, useful paper](https://riak.com/assets/bitcask-intro.pdf) that guided
    me when I was making it. Challenge yourself to implement:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: BitCask 完全使用你的文件系统。你在文件中存储键和值。每个文件都是只追加的。你可以删除键，但这是通过覆盖现有键来实现的，而不是显式删除值。[BitCask
    在一篇简短而有用的论文中有文档记录](https://riak.com/assets/bitcask-intro.pdf)，这篇论文在我制作它时给了我指导。挑战自己去实现：
- en: Creating a "cask" (a key-value store that follows the BitCask algorithm)
  id: totrans-split-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个“酒桶”（遵循 BitCask 算法的键值存储）
- en: Add items to a cask
  id: totrans-split-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向一个酒桶中添加物品
- en: Retrieve items from a cask
  id: totrans-split-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从一个酒桶中检索物品
- en: Remove items from a cask
  id: totrans-split-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从一个酒桶中移除物品
- en: Close a cask
  id: totrans-split-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭一个酒桶
- en: When you close a cask, a merge operation is performed to merge all cask files
    into one.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你关闭一个酒桶时，会执行合并操作，将所有酒桶文件合并为一个文件。
- en: Write a programming language
  id: totrans-split-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 写一个编程语言
- en: '*Wow... slow down. A programming language? Only serious experts can make that!*
    That''s what I thought, too. It turns out it isn''t true! You, too, can make a
    programming language. And you don''t even need to read hundreds of pages of literature
    on theory before you get started (although the more you read, the more information
    you''ll have to design your language!).'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*哇...慢点。一个编程语言？只有认真的专家才能做到这一点！* 我也是这么想的。事实证明这并不正确！你也可以制作一个编程语言。而且在你开始之前甚至不需要阅读数百页的理论文献（尽管你读得越多，你设计语言时就会有越多信息！）。'
- en: Designing a programming language lets you decide how you want to write code.
    You can follow existing patterns or make up your own. You get to set the rules.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一种编程语言让你决定如何编写代码。你可以遵循现有的模式或自创一种。你可以设定规则。
- en: There are many types of programming language, but a good place to start is writing
    a language that doesn't need a compiler. I am biased because that's how I learned,
    but the thought of writing a compiler before I had a bit more experience with
    programming langauge theory felt daunting. Thus, I wrote an "interpreted" language.
    A file is read, parsed, then executed; no compiling.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言有许多种类，但开始的好地方是编写一个不需要编译器的语言。因为这是我学习的方式，所以我有所偏见，但在掌握编程语言理论之前写编译器似乎是一件令人生畏的事情。因此，我写了一个“解释”语言。文件被读取，解析，然后执行；无需编译。
- en: 'An interpreted language has a few key pieces:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个解释语言有几个关键部分：
- en: A "grammar", which outlines the structure of a language;
  id: totrans-split-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"语法"，它概述了语言的结构；'
- en: A "lexer" / "parser", which takes in arbitrary text (i.e. a script written in
    your language!) and turns it into an Abstract Syntax Tree (AST) using your grammar,
    and;
  id: totrans-split-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"词法分析器" / "语法分析器"，它接收任意文本（即用你的语言编写的脚本！）并使用你的语法将其转换为抽象语法树（AST），以及；'
- en: The evaluation engine, which reads the syntax tree and does something with it.
  id: totrans-split-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估引擎，它读取语法树并对其进行处理。
- en: All of the above three components are separate technical challenges. I recommend
    starting with writing a grammar and a parser. Your grammar will state how your
    language works (i.e. how to declare variables, which symbols are allowed and in
    which order, how things can nest, or not nest). You can use an existing lexer
    to interpret your grammer. I used Lark in Python. Your evaluation engine will
    take your syntax tree and enforce the logic of your program (i.e. maintain variables,
    perform mathematical computations, work with strings and booleans; whatever you
    want your language to do).
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上述三个组件都是独立的技术挑战。我建议从编写语法和解析器开始。你的语法将定义你的语言如何工作（例如如何声明变量，允许哪些符号以及其顺序，如何进行嵌套或不嵌套）。你可以使用现有的词法分析器来解释你的语法。我在Python中使用了Lark。你的评估引擎将接收你的语法树并实施程序的逻辑（例如维护变量，执行数学计算，处理字符串和布尔值；无论你的语言需要做什么）。
- en: '*P.S. Writing a Lisp language is a great place to start, too!*'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*P.S. 编写一个Lisp语言也是一个很好的起点！*'
- en: 'The list, and: What other ideas should be here?'
  id: totrans-split-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这个列表，还有：还应该有什么其他的想法吗？
- en: The list above is not a checklist, rather inspiration for projects you can take
    on. Perhaps one of the items above will inspire you to make something. Perhaps
    none of them resonate. That is okay, too. If that's the case, I recommend saving
    this post in the back of your mind; there may come a day when one of the ideas
    above delights you. James five years ago would probably have found the list above
    out of reach. James one year ago would have yearned for this list.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的列表不是一个清单，而是可以进行的项目的灵感。也许其中一项会激发你去创造一些东西。也许其中没有一个引起共鸣。这也没关系。如果是这样，我建议你把这篇文章保存在脑海中；也许有一天你会对上面的某个想法感到愉快。五年前的詹姆斯可能会觉得上面的列表难以企及。一年前的詹姆斯可能会渴望这个列表。
- en: I recommend [Austin Henley's writing](https://austinhenley.com/blog/morechallengingprojects.html)
    for more wonderful ideas. His post is the reason I wrote this one.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我推荐阅读 [Austin Henley 的文章](https://austinhenley.com/blog/morechallengingprojects.html)
    获取更多精彩的想法。他的文章正是我写这篇文章的原因。
- en: If you do implement anything as a result of this post, let me know! Send me
    an email at readers [at] jamesg [dot] blog. In addition, if you need any guidance
    with the ideas above, email me. I would love to help. I have completed all the
    challenges I documented above; they continue to cultivate my child-like excitement
    for coding. I hope they can do the same for you, too.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你根据此帖子实施了任何内容，请告诉我！通过邮箱 readers [at] jamesg [dot] blog 联系我。此外，如果你需要关于以上想法的任何指导，请给我发邮件。我很乐意帮助。我已完成了我上面记录的所有挑战；它们继续培养我对编码的童心。希望它们也能为你带来同样的感受。
- en: 'Now: what other ideas should be on this list? What have you made that you think
    would be a great challenge for other programmers? Share it with others! An idea
    for a project that pushed you to learn more about programming five years ago may
    be the thing that helps change someone''s perception of programming like search
    engines did for me.'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在：这个列表上还应该包含哪些其他想法？你做过哪些你认为对其他程序员来说是很好的挑战？与他人分享吧！五年前让你更深入了解编程的项目想法，可能会改变某人对编程的看法，就像搜索引擎对我一样。
- en: '[Share this post on Hacker News](https://news.ycombinator.com/submitlink?u=https://jamesg.blog//2024/02/28/programming-projects/&t=(Even%20more)%20challenging%20programming%20projects%20you%20should%20try).'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 Hacker News 上分享此帖子](https://news.ycombinator.com/submitlink?u=https://jamesg.blog//2024/02/28/programming-projects/&t=(更多)值得尝试的挑战性编程项目)。'
- en: '[Share this post on Lobste.rs](https://lobste.rs/stories/new?url=https://jamesg.blog//2024/02/28/programming-projects/&title=(Even%20more)%20challenging%20programming%20projects%20you%20should%20try).'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 Lobste.rs 上分享此帖子](https://lobste.rs/stories/new?url=https://jamesg.blog//2024/02/28/programming-projects/&title=(更多)值得尝试的挑战性编程项目)。'
