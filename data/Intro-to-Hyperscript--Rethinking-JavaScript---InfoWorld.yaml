- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:03:43'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:03:43'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Intro to Hyperscript: Rethinking JavaScript | InfoWorld'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Intro to Hyperscript: Rethinking JavaScript | InfoWorld'
- en: 来源：[https://www.infoworld.com/article/3708109/intro-to-hyperscript-rethinking-javascript.html](https://www.infoworld.com/article/3708109/intro-to-hyperscript-rethinking-javascript.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.infoworld.com/article/3708109/intro-to-hyperscript-rethinking-javascript.html](https://www.infoworld.com/article/3708109/intro-to-hyperscript-rethinking-javascript.html)
- en: Some of us remember [HyperCard](https://hypercard.org/), an interesting branch
    in the evolutionary tree of programming languages. If you’re of a certain age,
    you might even have learned programming with HyperCard. Hyperscript is a newer
    technology that takes some of the benefits of HyperCard, especially its simplicity
    and English-like syntax, and applies it to the browser environment. It's a kind
    of JavaScript replacement that can work standalone or in tandem with [HTMX](https://www.infoworld.com/article/3706951/htmx-dynamic-html-without-the-javascript.html)
    to simplify common scripting needs on the [JavaScript front end](https://www.infoworld.com/article/3661810/reactive-javascript-the-evolution-of-front-end-architecture.html).
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: Some of us remember [HyperCard](https://hypercard.org/)，这是编程语言进化树中的一个有趣分支。如果你有特定年龄段的记忆，你可能甚至是通过HyperCard学习编程的。Hyperscript是一种较新的技术，它借鉴了HyperCard的一些优点，尤其是其简单性和类似英语的语法，并将其应用到浏览器环境中。它是一种JavaScript替代方案，可以独立工作，也可以与[HTMX](https://www.infoworld.com/article/3706951/htmx-dynamic-html-without-the-javascript.html)配合，简化[JavaScript前端](https://www.infoworld.com/article/3661810/reactive-javascript-the-evolution-of-front-end-architecture.html)的常见脚本需求。
- en: An example worth a thousand words
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: An example worth a thousand words
- en: 'Before we get into too much discussion, let’s look at a [Hyperscript example](https://hyperscript.org/#be-async-with-no-extra-code)
    that communicates the spirit of the thing:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: Before we get into too much discussion, let’s look at a [Hyperscript example](https://hyperscript.org/#be-async-with-no-extra-code)，以便更好地理解其精神。
- en: '[PRE0]'
  id: totrans-split-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It’s pretty obvious what this code does. The underscore property is the special
    one the denotes a Hyperscript. In JavaScript, this same functionality might look
    something like this:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 'It’s pretty obvious what this code does. The underscore property is the special
    one the denotes a Hyperscript. In JavaScript, this same functionality might look
    something like this:'
- en: '[PRE1]'
  id: totrans-split-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In English, it says: "When the div element is loaded, send an async request
    to ''https://stuff'' and put the results inside the div.”  Hopefully you can see
    already that Hyperscript feels almost like a behavioral extension of HTML.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 'In English, it says: "When the div element is loaded, send an async request
    to ''https://stuff'' and put the results inside the div.”  Hopefully you can see
    already that Hyperscript feels almost like a behavioral extension of HTML.'
- en: What is Hyperscript?
  id: totrans-split-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: What is Hyperscript?
- en: Hyperscript is a kind of simplified, more English-like JavaScript. As pointed
    out to me by [Sacha Greif](https://www.infoworld.com/article/3688770/state-of-javascript-a-conversation-with-sacha-greif.html),
    you can also think about it as a domain-specific language, or DSL. In essence,
    Hyperscript boils down JavaScript to a syntax devoted explicitly to common and
    recurring needs in building front-end UIs. It brings a bunch of conventions to
    bear to make this coding more concise.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperscript是一种简化的、更像英语的JavaScript。正如[Sacha Greif](https://www.infoworld.com/article/3688770/state-of-javascript-a-conversation-with-sacha-greif.html)指出的那样，你也可以把它看作是一种特定领域的语言，或者DSL。实质上，Hyperscript将JavaScript简化为专门用于构建前端UI常见和重复需求的语法。它引入了一系列约定，使得编码更加简洁。
- en: Hyperscript is a sibling of [HTMX](https://www.infoworld.com/article/3706951/htmx-dynamic-html-without-the-javascript.html)
    and springs from the mind of the same developer, Carson Gross. Both projects reflect
    Gross's devotion to simplicity and his attempts to relentlessly apply it to big,
    active problem spaces. In HTMX, we see a more capable HTML that could sweep away
    much of the complexity that has evolved over the last decade, as developers have
    embraced the front-end paradigm of reactive frameworks + JSON + [REST-like APIs](https://www.infoworld.com/article/3706031/what-is-rest-the-de-facto-web-architecture-standard.html). In
    Hyperscript, we see an alternative to the apparently never-ending expansion of
    JavaScript's language sophistication. It's a tantalizing proposition.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperscript是[HTMX](https://www.infoworld.com/article/3706951/htmx-dynamic-html-without-the-javascript.html)的姊妹项目，由同一开发者Carson
    Gross创作。这两个项目反映了Gross对简单性的执着追求，并试图将其无情地应用于大规模、活跃的问题领域。在HTMX中，我们看到了一个更强大的HTML，可以消除过去十年间随着开发者们拥抱响应式框架、JSON和[类REST
    API](https://www.infoworld.com/article/3706031/what-is-rest-the-de-facto-web-architecture-standard.html)而演变的复杂性。而在Hyperscript中，我们看到了JavaScript语言复杂度似乎永无止境扩展的一个替代方案。这是一个令人心动的建议。
- en: Tackling front-end complexity
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tackling front-end complexity
- en: There is a definite sense of overwhelm facing front-end developers who code
    in the trenches. Who wouldn’t want to replace boilerplate JavaScript with an expressive
    language that was easy to remember? Something you could just type out from memory,
    without referencing anything, to perform everyday, basic coding.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 面对前端开发者在代码战线上所面临的混乱感，确实让人感到不知所措。谁不想用一种易于记忆、可以从记忆中直接打出来的表达性语言来替换样板JavaScript呢？这是一种可以仅凭记忆就能执行日常基本编码的语言。
- en: 'Let''s consider an example. In the following Hyperscript snippet, the canonical
    [button-click-counter example](https://hyperscript.org/docs/#control-flow) becomes:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子。在以下Hyperscript片段中，典型的[按钮点击计数器示例](https://hyperscript.org/docs/#control-flow)变成了：
- en: '[PRE2]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here''s the same example in React:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中是相同的例子：
- en: '[PRE3]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Of course, shorter doesn’t necessarily mean simpler. In this case, though, the
    self-descriptive obviousness of Hyperscript shines in comparison to React. Now,
    some might say that React is more complex because it's more powerful; it is a
    language that makes complex things possible. But in this case, we are just looking
    at the most common approach to JavaScript front-end development (which is React)
    next to Hyperscript. We're looking at the everyday activities that *can* be simplified—and
    should be.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，更短并不一定意味着更简单。但在这种情况下，Hyperscript的自描述明显性与React相比显得更出色。现在，有些人可能会说React更复杂，因为它更强大；它是一种能够实现复杂功能的语言。但在这种情况下，我们只是在比较JavaScript前端开发中最常见的方法（即React）与Hyperscript。我们正在看的是*可以*简化的日常活动。
- en: Hyperscript is intended to replace JavaScript. Or maybe *elaboration* is a better
    word. Hyperscript's creator, Caron Gross, notes that it's a “speculative” project.
    Nonetheless, it is well thought-out, capable, and ambitious. One can definitely
    picture enterprise-scale applications using Hyperscript.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperscript旨在取代JavaScript。或许*扩展*是一个更好的词。Hyperscript的创始人Caron Gross指出，这是一个“投机性”的项目。尽管如此，它经过深思熟虑，功能强大而雄心勃勃。可以想象使用Hyperscript开发企业级应用程序是完全可能的。
- en: Probably the biggest barrier for Hyperscript is developers' collective familiarity
    and attachment to JavaScript. Sure, it can be obfuscating and tricky at times,
    but it’s *my* obfuscated and tricky language. If Hyperscript does catch on, it’ll
    probably be in some combination with JavaScript for most projects.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Hyperscript来说，最大的障碍可能是开发者对JavaScript的集体熟悉度和依赖。当然，有时它可能会令人困惑和棘手，但它是*我的*令人困惑和棘手的语言。如果Hyperscript确实流行起来，它可能会在大多数项目中与JavaScript结合使用。
- en: Asynchronous events in Hyperscript
  id: totrans-split-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hyperscript中的异步事件
- en: 'Let''s take a look at [how Hyperscript handles events](https://hyperscript.org/docs/#sending-events):'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看[Hyperscript如何处理事件](https://hyperscript.org/docs/#sending-events)：
- en: '[PRE4]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[Reactive programming](https://www.infoworld.com/article/3701889/what-is-reactive-programming-programming-with-event-streams.html)
    is an important plotline in the history of programming, and Hyperscript embraces
    it fully. In this example, we can see how Hyperscript approaches asynchronous
    events. The eventing system is quite powerful, including a range of reactive-style
    functions like filtering, event message objects, queuing, and more.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[响应式编程](https://www.infoworld.com/article/3701889/what-is-reactive-programming-programming-with-event-streams.html)是编程历史中的一个重要情节，Hyperscript完全接受了这一点。在这个例子中，我们可以看到Hyperscript如何处理异步事件。事件系统非常强大，包括一系列类似于过滤、事件消息对象、排队等反应式风格函数。'
- en: You can also see that the phrase “the next `<output/>`” is able to refer to
    another element in the DOM, specifically, the next `<output/>` element, and send
    the event to it. That's a very terse and obvious way to do something that would
    otherwise be fairly verbose and clunky, or would at least require some reactive
    wiring. This is one example of how Hyperscript does away with the separation of
    concerns by design.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到，“下一个 `<output/>`”这个短语可以引用DOM中的另一个元素，具体来说，是下一个 `<output/>` 元素，并将事件发送到它。这是一种非常简洁和明显的方式来完成一些本来会相当冗长和笨拙的事情，或者至少需要一些反应式的连线。这是Hyperscript通过设计消除关注点分离的一个例子。
- en: Looping, conditionals, and logging
  id: totrans-split-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环、条件和日志
- en: 'Looping can be finicky in some front-end contexts (like [JSX for React](https://www.infoworld.com/article/3307858/tutorial-programming-in-react-for-beginners.html)). Here''s
    a [looping example in Hyperscript](https://hyperscript.org/docs/#loops):'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些前端上下文中（比如[JSX for React](https://www.infoworld.com/article/3307858/tutorial-programming-in-react-for-beginners.html)），循环可能会有些棘手。这里是在Hyperscript中的[循环示例](https://hyperscript.org/docs/#loops)：
- en: '[PRE5]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This example also gives us a look at how Hyperscript handles logging. It’s pretty
    straightforward, using comma-separated values.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子还让我们看到了 Hyperscript 如何处理日志记录。使用逗号分隔的值非常简单直接。
- en: 'We’ve already seen how Hyperscript handles the `if` command with an `else`. Notice
    that it ends with the `End` keyword (unless you are at the end of the script anyway,
    as happens on an element property):'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了 Hyperscript 如何处理带有 `else` 的 `if` 命令。注意，它以 `End` 关键字结束（除非你已经在脚本的末尾，如在元素属性上发生的情况）：
- en: '[PRE6]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Hyperscript also supports an `unless` modifier that can reference things like
    CSS properties:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperscript 还支持一个 `unless` 修改器，可以引用诸如 CSS 属性之类的东西：
- en: '[PRE7]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This code chunk makes the second button change its color, unless it has the
    `.bordered` class. That's some pretty concise handling of an otherwise unwieldy
    bit of JavaScript with CSS and HTML.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码片段使得第二个按钮在没有 `.bordered` 类时改变其颜色。这是对使用 JavaScript、CSS 和 HTML 处理起来相对笨拙的代码的一种相当简明的处理。
- en: Locality of behavior
  id: totrans-split-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行为的局部性
- en: One of the principles that is pounded into new programmers is the so-called
    separation of concerns (SoC). Most of the time, this principle holds good. By
    implementing SoC, we get decoupled components, and that makes for more resilient
    systems. There is a counter-current to consider, however, which Gross calls [locality
    of behavior](https://htmx.org/essays/locality-of-behaviour/). He's embedded this
    idea in Hyperscript, and you'll also find it in other projects, like [Tailwind](https://www.infoworld.com/article/3622288/tailwind-css-learn-the-joys-of-functional-responsive-css.html).
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 新程序员被灌输的原则之一是所谓的关注点分离（SoC）。大多数情况下，这个原则都是有效的。通过实施 SoC，我们获得了解耦合的组件，这使得系统更加强大。然而，需要考虑的反向流动是由
    Gross 称为 [行为的局部性](https://htmx.org/essays/locality-of-behaviour/)。他将这个想法嵌入了 Hyperscript
    中，你也可以在其他项目中找到类似的，比如 [Tailwind](https://www.infoworld.com/article/3622288/tailwind-css-learn-the-joys-of-functional-responsive-css.html)。
- en: The idea here is that separating concerns can actually make for systems that
    are harder to follow. Separation of concerns on the front end usually means putting
    your markup (the view) in one place, your JavaScript (behavior) in another, and
    your CSS (presentation) somewhere else. The design benefit of doing all this turns
    out to be dubious at best. SoC usually comes to the rescue in more architectural
    situations. In projects founded on HTML, CSS, and JavaScript, though, it’s often
    a pain to have to jump between contexts and always keep the thread of your tasks
    in mind. It's actually one of the things that is appealing about JSX and the motivator
    behind the [Styled Components framework](https://www.infoworld.com/article/3678950/intro-to-css-in-js-generating-css-from-javascript.html).
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的思想是，分离关注点实际上可能导致更难以跟踪的系统。前端的关注点分离通常意味着将你的标记（视图）放在一个地方，你的 JavaScript（行为）放在另一个地方，你的
    CSS（呈现）放在其他地方。在更架构化的情况下，这种设计的好处往往是值得怀疑的。然而，在基于 HTML、CSS 和 JavaScript 的项目中，必须在不同的上下文中跳转并始终记住任务的线索，这通常会令人头疼。这实际上是
    JSX 及其背后的 [Styled Components 框架](https://www.infoworld.com/article/3678950/intro-to-css-in-js-generating-css-from-javascript.html)
    魅力之一的体现。
- en: Violating separation of concerns
  id: totrans-split-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 违反了关注点分离
- en: Hyperscript takes much of the grunt work you would extract into JavaScript and
    wraps it inside Hyperscript syntax, so you can just inline fairly elaborate functionality
    directly into the markup. This makes it easy to keep things together and makes
    them more self-documenting.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: Hyperscript 将你通常会提取到 JavaScript 中的大部分琐碎工作包装在 Hyperscript 语法中，因此你可以直接将相当复杂的功能内联到标记中。这使得保持事物的整体性变得容易，并且使其更加自解释。
- en: On the downside, there could be a problem if you need to make changes to behavior
    that go beyond the built-in syntax. If you need to do something out of the box,
    in other words, you will find that your strongly coupled components are relying
    on the Hyperscript engine itself, which you will have to modify.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 不足的是，如果你需要对超出内置语法范围的行为进行更改，可能会出现问题。换句话说，你将发现你的强耦合组件依赖于 Hyperscript 引擎本身，而你需要修改它。
- en: I haven’t used Hyperscript in a large, real-world project, so I can’t speak
    to that directly. There is, however, [support for extensibility](https://hyperscript.org/docs/#extending)
    in the language.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我还没有在大型真实项目中使用过 Hyperscript，所以无法直接评论那个。然而，语言中确实有 [扩展性支持](https://hyperscript.org/docs/#extending)。
- en: It's also possible to run JavaScript and Hyperscript [side-by-side](https://hyperscript.org/#enhance-existing-code),
    so that gives you latitude for gradual enhancement. It also raises the question,
    for me, of how running these languages in parallel would look in a React, Svelte,
    or Vue project.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以同时运行JavaScript和Hyperscript，这样可以逐步增强功能。对我来说，这也引发了一个问题，即在React、Svelte或Vue项目中同时运行这些语言会是什么样子。
- en: Conclusion
  id: totrans-split-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: When I started out with Hyperscript, I was extremely skeptical—maybe even a
    little superior. I’ve been gradually charmed by Hypserscript’s feel, however. Do
    I think it’ll supplant JavaScript anytime soon?  No, I don’t. But I can envision
    a world where HTMX and Hyperscript have greatly simplified the JavaScript front
    end.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始接触Hyperscript时，我非常怀疑——甚至有点自大。然而，我逐渐被Hyperscript的感觉所吸引。我认为它会很快取代JavaScript吗？不，我不这么认为。但我可以想象一个世界，在这个世界里，HTMX和Hyperscript极大地简化了JavaScript前端开发。
- en: There’s something about this push toward a simpler programming paradigm that
    I’d call *applied common sense*. By questioning assumptions and starting over
    with everything we’ve learned, maybe we can build better tools.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这种向简化编程范式的推进中有一种我称之为*应用常识*的东西。通过质疑假设并重新利用我们所学的一切，也许我们可以构建更好的工具。
- en: One thing we know is that complexity kills creativity and productivity in software. As
    engineers, we are forever at risk of building in an abstraction that is the final
    straw of complexity—the one that kills our project.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道的一件事是，复杂性会在软件开发中扼杀创造力和生产力。作为工程师，我们永远面临着构建复杂抽象的风险——这些抽象可能是复杂性的最后一根稻草，会导致项目失败。
- en: Sometimes we get into technology because we *just like it*; the tool takes on
    a life of its own. The tooling, like React, becomes the product. That’s alright
    in some scenarios, but at other times, a simpler alternative like Hypserscript
    could be better.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候我们进入技术行业是因为*喜欢*它；工具会自己生活。像React这样的工具，本身就成为了产品。在某些情况下这没问题，但在其他时候，像Hyperscript这样的简单替代方案可能更好。
- en: At the very least, Hyperscript has fresh ideas to contribute. And like HTMX,
    this language could help improve the overall experience of developing on the web.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，Hyperscript有新的想法可以贡献。就像HTMX一样，这种语言可以帮助改善在Web上开发的整体体验。
- en: Copyright © 2023 IDG Communications, Inc.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有 © 2023 IDG Communications, Inc.
