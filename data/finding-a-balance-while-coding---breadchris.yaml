- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 13:25:47'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 13:25:47'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: finding a balance while coding | breadchris
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 找到编码平衡点 | breadchris
- en: 来源：[https://breadchris.com/thinkies/finding-a-balance-while-coding/](https://breadchris.com/thinkies/finding-a-balance-while-coding/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://breadchris.com/thinkies/finding-a-balance-while-coding/](https://breadchris.com/thinkies/finding-a-balance-while-coding/)
- en: 'When coding, have you ever stopped to ask the question: why am I doing this?
    Maybe it is a fleeting thought before you return to squeezing out a few more milliseconds
    on your page load.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在编码时，你有没有停下来问自己这样一个问题：我为什么要这样做？也许这只是一个稍纵即逝的念头，然后你又回到了挤出更多页面加载时间毫秒的工作中。
- en: As creators of software and websites, we often get caught up in the never-ending
    pursuit of optimization. We constantly strive to make our code more efficient,
    our algorithms faster, and our page load times shorter. But in our relentless
    quest for optimization, we may lose sight of the bigger picture.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作为软件和网站的创建者，我们经常陷入不断追求优化的泥沼中。我们不断努力使我们的代码更高效，算法更快，页面加载时间更短。但在我们对优化的不懈追求中，我们可能会忽略更大的视角。
- en: Why are we optimizing? Is it to improve the user experience, to increase conversion
    rates, or to impress our peers? It’s essential to pause and reflect on the reasons
    behind our optimization efforts. Are we optimizing for the right reasons, or are
    we just chasing after a fleeting sense of accomplishment?
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么要进行优化？是为了提升用户体验，增加转化率，还是为了让同行对我们印象深刻？暂停下来反思我们优化努力背后的原因是至关重要的。我们是否出于正确的原因进行优化，还是仅仅追逐一时的成就感？
- en: Optimization is not inherently evil, but when it becomes our sole focus, we
    risk losing sight of the broader goals of our projects. We may sacrifice readability,
    maintainability, and even functionality by shaving off a few milliseconds. We
    must remember that optimization is just one piece of the puzzle and that there
    are other important considerations to consider.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 优化本身并不是邪恶的，但当它成为我们唯一关注的焦点时，我们可能会失去项目更广泛目标的视野。为了减少几毫秒的耗时，我们可能会牺牲可读性、可维护性甚至功能性。我们必须记住，优化只是整个谜题的一部分，还有其他重要的考虑因素需要考虑。
- en: Instead of blindly pursuing optimization at all costs, we should strive for
    balance. We should prioritize clear and maintainable code, robust functionality,
    and a positive user experience. While optimization is essential, it should not
    come at the expense of these other crucial aspects of our projects. What are examples
    of this as it relates to go?
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与其盲目追求不惜一切代价的优化，我们应该追求平衡。我们应该优先考虑清晰和可维护的代码、强大的功能性以及良好的用户体验。虽然优化至关重要，但不应以牺牲项目中其他关键方面为代价。在
    Go 中，有哪些相关的例子呢？
- en: In Go, a typical example of prioritizing balance over blind optimization is
    in the use of interfaces. While interfaces can add some overhead compared to concrete
    types, they can also provide significant benefits in code organization, flexibility,
    and testability. It is essential to weigh the trade-offs and choose the approach
    that best fits the project’s specific needs, rather than simply focusing on optimizing
    for performance.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Go 语言中，一个典型的例子是在使用接口时优先考虑平衡而非盲目优化。虽然与具体类型相比，接口可能会增加一些开销，但它们也可以在代码组织、灵活性和可测试性方面带来显著的好处。重要的是要权衡利弊，选择最适合项目特定需求的方法，而不是简单地专注于性能优化。
- en: Another example is in the use of goroutines and channels for concurrency. While
    Go makes it easy to create lightweight concurrent processes, it is essential to
    carefully consider the design and architecture of the application to ensure that
    the code is maintainable and robust. Blindly optimizing for maximum concurrency
    without considering the complexity it adds to the codebase can lead to bugs and
    maintenance challenges down the line.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是使用 goroutines 和 channels 实现并发。虽然 Go 语言可以轻松创建轻量级并发进程，但是必须仔细考虑应用程序的设计和架构，以确保代码的可维护性和健壮性。盲目追求最大并发而不考虑其给代码库增加的复杂性，可能会导致后续出现
    bug 和维护挑战。
- en: I don’t often go for channels because what I need can be solved with loops.
    Now that Go has yield, you can avoid using channels even more. Just because something
    exists in a language doesn’t mean you must use it.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我不常使用 channels，因为我所需的可以通过循环解决。现在 Go 语言有了 yield，你甚至可以更少地使用 channels。某个语言中存在某个特性，并不意味着你一定要使用它。
