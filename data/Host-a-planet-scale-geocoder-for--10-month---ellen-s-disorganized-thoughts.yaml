- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:57:37'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:57:37'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Host a planet-scale geocoder for $10/month — ellen's disorganized thoughts
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Host a planet-scale geocoder for $10/month — ellen's disorganized thoughts
- en: 来源：[https://blog.ellenhp.me/host-a-planet-scale-geocoder-for-10-month](https://blog.ellenhp.me/host-a-planet-scale-geocoder-for-10-month)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.ellenhp.me/host-a-planet-scale-geocoder-for-10-month](https://blog.ellenhp.me/host-a-planet-scale-geocoder-for-10-month)
- en: Host a planet-scale geocoder for $10/month
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Host a planet-scale geocoder for $10/month
- en: February 16, 2024
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: February 16, 2024
- en: About a month ago I began work a [new geocoder](https://github.com/ellenhp/airmail)
    ([demo](https://airmail.rs/#demo-section)), or search engine for places and addresses.
    I wanted to make something very inexpensive to run. A big barrier to entry for
    hosting a planet-scale [headway instance](https://github.com/headwaymaps/headway)
    is the geocoder. Right now we’re using Pelias which is great at what it does,
    but runs on ElasticSearch which doesn’t do well on <8GB of RAM. I’ve been poking
    at this problem off and on for years, and didn’t expect to get anything working,
    but much to my surprise things shaped up pretty quickly.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大约一个月前，我开始了一个[新的地理编码器](https://github.com/ellenhp/airmail)（[演示](https://airmail.rs/#demo-section)），或者说是一个关于地点和地址的搜索引擎。我想做一个非常廉价的运行项目。主持一个全球规模的[headway实例](https://github.com/headwaymaps/headway)的一个重要障碍是地理编码器。目前我们正在使用Pelias，它在它的领域做得很好，但是运行在不到8GB
    RAM上的ElasticSearch表现不佳。多年来我一直在探索这个问题，没想到能够让事情迅速进展起来。
- en: I was able to cobble together a mediocre address parser based on [nom](https://crates.io/crates/nom),
    drawing an immense amount of inspiration from the [Pelias parser](https://github.com/pelias/parser/).
    Armed with an okay address parser, I turned to [tantivy](https://github.com/quickwit-oss/tantivy)
    as a search engine, thinking I’d take advantage of its ability to memory map the
    search index. After a bit of digging, I found [tantivy-wasm](https://github.com/phiresky/tantivy-wasm)
    which runs in the browser and issues range queries to fetch bits of the index
    as needed. When I saw that the gears really started turning in my head. I didn’t
    want to fork a search engine library, so I implemented my own backing store for
    mainline tantivy using [anonymous memory maps](https://en.wikipedia.org/wiki/Mmap)
    and [userfaultfd](https://docs.kernel.org/admin-guide/mm/userfaultfd.html) to
    fetch chunks of the index from object storage on-demand via range queries. It
    worked, and after a bit of tuning the latency is getting into pretty acceptable
    ranges, around 1-3 seconds generally, and I’ve seen it as fast as 2ms for a simple
    query if the cache is hot.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我能够基于[nom](https://crates.io/crates/nom)拼凑出一个中等水平的地址解析器，从[Pelias parser](https://github.com/pelias/parser/)汲取了大量灵感。拥有了一个尚可的地址解析器后，我转向[tantivy](https://github.com/quickwit-oss/tantivy)作为搜索引擎，想利用它的内存映射搜索索引的能力。经过一番挖掘，我找到了可以在浏览器中运行的[tantivy-wasm](https://github.com/phiresky/tantivy-wasm)，它通过范围查询获取索引的片段。当我看到这些时，我的脑海中开始转动。我不想分叉一个搜索引擎库，因此使用[匿名内存映射](https://en.wikipedia.org/wiki/Mmap)和[userfaultfd](https://docs.kernel.org/admin-guide/mm/userfaultfd.html)为主线tantivy实现了自己的后端存储，通过范围查询按需从对象存储中获取索引的块。这样做奏效了，经过一些调优，延迟已经降到了相当可接受的范围内，通常在1-3秒之间，甚至在缓存热的情况下可以看到2毫秒的简单查询速度。
- en: '[Fly.io](https://fly.io/) charges me about $3/mo for the machine it runs on,
    and just under $7/mo for the 320ish gigabytes of data in object storage, so this
    has been a very affordable project. I’m pretty happy with the results for the
    price. I’m planning on extending it handle more locales and use-cases over the
    coming months. I made a [demo site where you can play with it](https://airmail.rs/#demo-section),
    but don’t expect miracles. You get what you pay for, and I haven’t indexed OpenAddresses
    for the demo site so if something isn’t in OpenStreetMap I definitely do not have
    it in the index. The code is [all open-source](https://github.com/ellenhp/airmail/).'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[Fly.io](https://fly.io/)每月向我收取大约$3的运行费用，并且在对象存储中每月收取将近$7，所以这是一个非常经济的项目。对于这个价格，我对结果感到非常满意。我计划在未来几个月内扩展它，以处理更多的语言环境和使用场景。我做了一个[演示网站，你可以在这里试用它](https://airmail.rs/#demo-section)，但不要期望奇迹。你得到的正是你付出的，而且我没有在演示网站中索引OpenAddresses，所以如果某些地方不在OpenStreetMap中，我肯定也没有它在索引中。代码都是[开源的](https://github.com/ellenhp/airmail/)。'
- en: Cheers ✨✨
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: Cheers ✨✨
