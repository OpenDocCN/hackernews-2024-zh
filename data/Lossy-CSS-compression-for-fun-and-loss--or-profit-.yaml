- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:12:20'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:12:20
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Lossy CSS compression for fun and loss (or profit)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有趣且有损的 CSS 压缩（或盈利）
- en: 来源：[https://blog.danieljanus.pl/2024/01/26/lossy-css-compression/](https://blog.danieljanus.pl/2024/01/26/lossy-css-compression/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.danieljanus.pl/2024/01/26/lossy-css-compression/](https://blog.danieljanus.pl/2024/01/26/lossy-css-compression/)
- en: What
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么
- en: Late last year, I had an idea that’s been steadily brewing in my head. I’ve
    found myself with some free time recently (it coincided with vacation, go figure),
    and I’ve hacked together some proof-of-concept code. Whether or not it is actually
    proving the concept I’m not sure, but the results are somewhat interesting, and
    I believe the idea is novel (I haven’t found any other implementation in the wild).
    So it’s at least worthy of a blog post.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 去年底，我有了一个想法，这个想法一直在我的脑海中酝酿。最近我有了一些空闲时间（碰巧正好是假期），我拼凑了一些概念验证代码。无论它是否真的证明了这个概念我不太确定，但结果还是有些有趣的，而且我相信这个想法是新颖的（我没有在其他地方找到任何其他实现）。所以至少值得写一篇博客文章。
- en: I wrote `cssfact`, a lossy CSS compressor. That is, a program that takes some
    CSS and outputs back some other CSS that hopefully retains some (most) of the
    information in the input, but contains fewer rules than the original. Exactly
    how many rules it produces is configurable, and the loss depends on that number.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我写了`cssfact`，一个有损的 CSS 压缩器。也就是说，这是一个程序，它接受一些 CSS，并输出一些其他 CSS，希望保留输入中的一些（大部分）信息，但包含的规则比原始规则少。它生成的规则数量是可配置的，并且损失取决于该数量。
- en: The program only works on style rules (which make up the majority of a typical
    CSS). It leaves the non-style rules unchanged.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序仅适用于样式规则（构成典型 CSS 的大部分内容）。它不会更改非样式规则。
- en: '[Here’s the source](https://github.com/nathell/cssfact). It’s not exactly straightforward
    to get it running, but it shouldn’t be very hard, either. It’s very simple – the
    program itself doesn’t contain any fancy logic; the actual decisions on what the
    output will contain are made by an external program.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[这是源代码](https://github.com/nathell/cssfact)。要让它运行起来并不是特别简单，但也不应该太难。这非常简单 -
    程序本身不包含任何花哨的逻辑；输出将包含什么内容的实际决定是由外部程序做出的。'
- en: 'If you just want to see some results, here is a sample with [my homepage](https://danieljanus.pl)
    serving as a patient etherized upon a table. Its CSS is quite small – 55 style
    rules that cssfact can work on – and here’s how the page looks with various settings:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想看一些结果，这里有一个示例，以[我的主页](https://danieljanus.pl)作为患者躺在手术台上。它的 CSS 很小 - 有 55
    个样式规则，`cssfact` 可以处理 - 这是页面在不同设置下的外观：
- en: 'Original: [page](https://danieljanus.pl), [CSS](https://danieljanus.pl/css/nhp.css),
    [source SASS](https://github.com/nathell/nhp/blob/master/src/sass/nhp.sass)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始：[页面](https://danieljanus.pl)，[CSS](https://danieljanus.pl/css/nhp.css)，[源
    SASS](https://github.com/nathell/nhp/blob/master/src/sass/nhp.sass)
- en: '1 style rule: [page](https://danieljanus.pl/index1.html), [CSS](https://danieljanus.pl/css/nhp1.css)
    (93% information loss)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 个样式规则：[页面](https://danieljanus.pl/index1.html)，[CSS](https://danieljanus.pl/css/nhp1.css)（93%
    信息丢失）
- en: '5 style rules: [page](https://danieljanus.pl/index5.html), [CSS](https://danieljanus.pl/css/nhp5.css)
    (74% information loss)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5 个样式规则：[页面](https://danieljanus.pl/index5.html)，[CSS](https://danieljanus.pl/css/nhp5.css)（74%
    信息丢失）
- en: '10 style rules: [page](https://danieljanus.pl/index10.html), [CSS](https://danieljanus.pl/css/nhp10.css)
    (55% information loss)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10 个样式规则：[页面](https://danieljanus.pl/index10.html)，[CSS](https://danieljanus.pl/css/nhp10.css)（55%
    信息丢失）
- en: '20 style rules: [page](https://danieljanus.pl/index20.html), [CSS](https://danieljanus.pl/css/nhp20.css)
    (31% information loss)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 20 个样式规则：[页面](https://danieljanus.pl/index20.html)，[CSS](https://danieljanus.pl/css/nhp20.css)（31%
    信息丢失）
- en: '30 style rules: [page](https://danieljanus.pl/index30.html), [CSS](https://danieljanus.pl/css/nhp30.css)
    (17% information loss)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 30 个样式规则：[页面](https://danieljanus.pl/index30.html)，[CSS](https://danieljanus.pl/css/nhp30.css)（17%
    信息丢失）
- en: My homepage and both of my blogs all use the same CSS, so you can try to replace
    the CSS in your browser’s devtools elsewhere on the site and see how it looks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我的主页和我的两个博客都使用相同的 CSS，所以你可以尝试在其他网站的浏览器开发工具中替换 CSS，看看效果如何。
- en: How
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何
- en: 'Three words: [binary matrix factorization](https://cs.uef.fi/~pauli/bmf_tutorial/material.html)
    (BMF, in the Boolean algebra).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 三个词：[二进制矩阵分解](https://cs.uef.fi/~pauli/bmf_tutorial/material.html)（在布尔代数中称为
    BMF）。
- en: I guess I could just stop here, but I’ll elaborate just in case it isn’t clear.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我想我可以在这里停下，但我会详细说明，以防不清楚。
- en: 'Consider a simple CSS snippet:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个简单的 CSS 片段：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first rule tells you that for all elements that match either the `h1` or
    `h2` selectors, the two declarations should apply.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条规则告诉你，对于所有与 `h1` 或 `h2` 选择器匹配的元素，这两个声明都应该适用。
- en: 'You could visualize this CSS as a 5x2 binary matrix *A^T* where the *n* columns
    correspond to simple selectors (i.e., without commas in them) and the *m* rows
    correspond to declarations:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个 CSS 可视化为一个 5x2 的二进制矩阵 *A^T*，其中 *n* 列对应于简单选择器（即没有逗号的选择器），*m* 行对应于声明：
- en: '|  | `h1` | `h2` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|  | `h1` | `h2` |'
- en: '| `padding: 0` | 1 | 1 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `padding: 0` | 1 | 1 |'
- en: '| `margin-bottom: 0.5em` | 1 | 1 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `margin-bottom: 0.5em` | 1 | 1 |'
- en: '| `font-size: 32px` | 1 | 0 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `font-size: 32px` | 1 | 0 |'
- en: '| `font-size: 24px` | 0 | 1 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `font-size: 24px` | 0 | 1 |'
- en: '| `font-weight: bold` | 1 | 1 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `font-weight: bold` | 1 | 1 |'
- en: You could also transpose the matrix, yielding *A* with *m* rows denoting selectors
    and *n* columns denoting declarations. For my homepage’s CSS, *m* = 60 and *n*
    = 81; for bigger stylesheets, several thousand in either direction is not uncommon.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以转置矩阵，得到 *m* 行表示选择器，*n* 列表示声明的矩阵 *A*。对于我的主页 CSS，*m* = 60，*n* = 81；对于更大的样式表，每个方向上都有几千个都不是罕见的。
- en: Now, linear algebra gives us algorithms to find a matrix *A′ ≈ A* such that
    there exists a decomposition *A′ = B × C*, where *B* has dimensions *m × r*, *C*
    has dimensions *r × n*, and *r* is small – typically much smaller than *m* or
    *n*. So this is a way of dimensionality reduction.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，线性代数给了我们一些算法，可以找到一个矩阵 *A′ ≈ A*，使得存在一个分解 *A′ = B × C*，其中 *B* 的维度为 *m × r*，*C*
    的维度为 *r × n*，而 *r* 很小——通常比 *m* 或 *n* 小得多。因此，这是一种降维的方式。
- en: In the usual algebra of real numbers, there’s no guarantee that *B* or *C* will
    themselves be binary matrices – in fact, most likely they won’t. But if we operate
    in Boolean algebra instead (i.e. one where 1 + 1 = 1), then both *B* and *C* will
    be binary. The flip side is that the Boolean BMF problem is NP-hard, so the algorithms
    found in the wild perform approximate decompositions, not guaranteed to be optimal.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在实数代数中，没有保证 *B* 或 *C* 本身将是二进制矩阵——实际上，它们很可能不是。但是如果我们改用布尔代数（即其中 1 + 1 = 1），那么
    *B* 和 *C* 都将是二进制的。反过来，布尔 BMF 问题是 NP 难的，所以在实际中找到的算法执行的是近似分解，不能保证是最优的。
- en: 'But that’s okay, because lossiness is inherent in what we’re doing anyway,
    and it turns the binary matrices *B* and *C* are readily interpretable. Look again
    at the CSS matrix above: why is there a 1 in the top-left cell? Because at least
    one of the CSS rules stipulates the declaration `padding: 0` for the selector
    `h1`.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '但这没关系，因为损失性在我们正在做的事情中是固有的，并且二进制矩阵 *B* 和 *C* 可以很容易地解释。再看一下上面的 CSS 矩阵：为什么左上角的单元格中有一个
    1？因为至少有一个 CSS 规则规定了选择器 `h1` 的声明 `padding: 0`。'
- en: This is exactly the definition of matrix multiplication in the Boolean algebra.
    The matrix *A′* will have a 1 at coordinates [*i, j*] iff there is at least one
    *k* ∈ {1, …, *r*} such that *B*[*i*, *k*] = 1 and *C*[*k*, *j*] = 1\. So the columns
    of *B* and rows of *C* actually correspond to CSS rules! Every time you write
    CSS, you’re actually writing out binary matrices – and the browser is multiplying
    them to get at the actual behaviour.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是布尔代数中矩阵乘法的定义。矩阵 *A′* 中的坐标 [*i, j*] 上将有一个 1，当且仅当存在一个 *k* ∈ {1, …, *r*}，使得
    *B*[*i*, *k*] = 1 并且 *C*[*k*, *j*] = 1。因此，*B* 的列和 *C* 的行实际上对应于 CSS 规则！每次你写 CSS
    时，实际上都在编写二进制矩阵——浏览器正在将它们相乘以得到实际的行为。
- en: Well, not really, but it’s one way to think about it. It’s not perfect – it
    completely glosses over rules overlapping each other and having precedence, and
    treats them as equally important – but it somewhat works!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，并不完全是这样，但这是一种思考方式。这并不完美——它完全忽略了规则之间的重叠和优先级，并将它们视为同等重要——但它有点起作用！
- en: You could plug in any BMF algorithm to this approach. For cssfact, I’ve picked
    the code by [Barahona and Goncalves 2019](https://github.com/IBM/binary-matrix-factorization/)
    – sadly, I wasn’t able to find the actual paper – not because it performs spectacularly
    well (it’s actually dog-slow on larger stylesheets), but because I was easily
    able to make it work and interface with it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将任何 BMF 算法插入到这个方法中。对于 cssfact，我选择了 [Barahona 和 Goncalves 2019](https://github.com/IBM/binary-matrix-factorization/)
    的代码——可惜我找不到实际的论文——不是因为它表现得特别好（在较大的样式表上实际上非常慢），而是因为我很容易让它工作并与之接口。
- en: Why
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么
- en: Why not?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不呢？
- en: The sheer joy of exploration is reason enough, but I believe there are potential
    practical applications. CSS codebases have the tendency to grow organically and
    eventually start collapsing under their own weight, and they have to be maintained
    very thoughtfully to prevent that. In many CSS monstrosities found in the wild,
    there are much cleaner, leaner, essence-capturing cores struggling to get out.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 探索的纯粹快乐已经足够理由，但我相信有潜在的实际应用。 CSS 代码库往往会有有机增长的趋势，并最终开始因为自身的重量而崩溃，必须非常谨慎地维护才能防止这种情况发生。在许多野生的
    CSS 丑陋代码中，有许多更清洁、更精简、更能捕捉本质的核心正在努力脱颖而出。
- en: This tool probably won’t automatically extract them for you – so don’t put it
    in your CI pipeline – but by perusing the CSS that it produces and cross-checking
    it with the input, you could encounter hints on what redundancy there is in your
    styles. Things like “these components are actually very similar, so maybe should
    be united” may become more apparent.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具可能不会自动为您提取它们 - 所以不要将其放入您的 CI 流水线中 - 但通过查看它生成的 CSS 并与输入进行交叉检查，您可能会遇到关于您的样式中存在冗余的提示。诸如“这些组件实际上非常相似，所以可能应该合并”之类的东西可能会更加明显。
