- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:37:57'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月27日14:37:57
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: What is a hard error, and what makes it harder than an easy error? - The Old
    New Thing
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是硬错误，它为什么比简单错误更难？-The Old New Thing
- en: 来源：[https://devblogs.microsoft.com/oldnewthing/20240116-00/?p=109274](https://devblogs.microsoft.com/oldnewthing/20240116-00/?p=109274)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://devblogs.microsoft.com/oldnewthing/20240116-00/?p=109274](https://devblogs.microsoft.com/oldnewthing/20240116-00/?p=109274)
- en: What is a hard error, and what makes it harder than an easy error?
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是硬错误，它为什么比简单错误更难？
- en: Occasionally, you may see a reference in Windows to “hard errors”, such as in
    this article that shows [how to configure an unattended system so that it auto-answers
    hard error dialogs](https://learn.microsoft.com/en-us/troubleshoot/windows/win32/hard-error-popup-mode
    "How to change hard error popup handling in Windows"). But why is it called a
    “hard error”? Are there “easy errors”?
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在Windows中，您可以看到对“硬错误”的引用，比如在这篇文章中，它展示了如何配置无人值守系统，以使其自动应答硬错误对话框（https://learn.microsoft.com/en-us/troubleshoot/windows/win32/hard-error-popup-mode
    "如何更改Windows中的硬错误弹出处理"）。但为什么要称之为“硬错误”？是否有“简单错误”？
- en: 'In 16-bit Windows, if there was an I/O error reading a drive, you got an error
    message that looked like this:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在16位Windows中，如果读取驱动器时发生I/O错误，你会得到一个看起来像这样的错误消息：
- en: '| System Error |'
  id: totrans-split-9
  prefs: []
  type: TYPE_TB
  zh: '| 系统错误 |'
- en: '| Cannot read from drive B. |'
  id: totrans-split-10
  prefs: []
  type: TYPE_TB
  zh: '| 无法从驱动器B中读取。 |'
- en: '|  |'
  id: totrans-split-11
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: These messages were special because they were generated from inside the I/O
    system, below the user interface level. Windows can’t put up a traditional `MessageBox`
    because that pumps messages and allows application code to run at a time when
    the rules of co-operative multitasking say that application code should not be
    running.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些消息很特殊，因为它们是在用户界面级别以下的I/O系统内部生成的。Windows无法弹出传统的`MessageBox`，因为那会传送消息，并允许应用程序代码在协作式多任务处理规则规定不应该运行应用程序代码的时候运行。
- en: The code to display these special “hard system modal errors” was carefully written
    so as to rely only on parts of the user interface code that were re-entrant. In
    fact, the only user interface code it uses is processing mouse and keyboard input.
    All of the graphics are drawn by asking GDI to draw directly to the frame buffer,
    and all of the dialog behaviors are handwritten. No application code was allowed
    to run while this message was being shown to the user.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 显示这些特殊的“硬系统模态错误”消息的代码是精心编写的，以便仅依赖于可重入的用户界面代码部分。事实上，它使用的唯一用户界面代码是处理鼠标和键盘输入。所有的图形都是通过要求GDI直接绘制到帧缓冲区来绘制的，所有的对话框行为都是手工编写的。在向用户显示这条消息时，不允许运行任何应用程序代码。
- en: The opposite of the “hard error” message was the “soft error” message, which
    was your regular `MessageBox`.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: “硬错误”消息的相反是“软错误”消息，这是您常规的`MessageBox`。
- en: These types of hard error messages disappeared from 32-bit Windows, but the
    name got repurposed to describe other types of critical error messages, usually
    low-level ones.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的硬错误消息从32位Windows中消失了，但名称被重新用于描述其他类型的关键错误消息，通常是低级错误消息。
