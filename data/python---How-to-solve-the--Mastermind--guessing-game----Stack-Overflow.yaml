- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:45:07'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:45:07
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: python - How to solve the "Mastermind" guessing game? - Stack Overflow
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: python - 如何解决 "Mastermind" 猜谜游戏？ - Stack Overflow
- en: 来源：[https://stackoverflow.com/questions/1185634/how-to-solve-the-mastermind-guessing-game](https://stackoverflow.com/questions/1185634/how-to-solve-the-mastermind-guessing-game)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://stackoverflow.com/questions/1185634/how-to-solve-the-mastermind-guessing-game](https://stackoverflow.com/questions/1185634/how-to-solve-the-mastermind-guessing-game)
- en: 'Key tools: entropy, greediness, branch-and-bound; Python, generators, itertools,
    decorate-undecorate pattern'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 关键工具：熵、贪婪度、分支和界限；Python、生成器、itertools、装饰-取消装饰模式
- en: In answering this question, I wanted to build up a language of useful functions
    to explore the problem. I will go through these functions, describing them and
    their intent. Originally, these had extensive docs, with small embedded unit tests
    tested using doctest; I can't praise this methodology highly enough as a brilliant
    way to implement test-driven-development. However, it does not translate well
    to StackOverflow, so I will not present it this way.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在回答这个问题时，我想要建立一个有用的函数语言来探索这个问题。我将会逐个介绍这些函数，描述它们和它们的意图。最初，这些函数有着详尽的文档，带有小的内嵌单元测试，使用doctest进行测试；我非常赞赏这种作为实现测试驱动开发的绝佳方式。然而，它在StackOverflow上表现不佳，所以我不会以这种方式呈现它。
- en: Firstly, I will be needing several standard modules and **future** imports (I
    work with Python 2.6).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我将需要几个标准模块和**未来**导入（我使用Python 2.6）。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'I will need a scoring function. Originally, this returned a tuple (blacks,
    whites), but I found output a little clearer if I used a namedtuple:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要一个评分函数。最初，这个函数返回一个元组（blacks, whites），但我发现如果使用一个命名元组输出会更清晰：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To make my solution general, I pass in anything specific to the Mastermind problem
    as keyword arguments. I have therefore made a function that creates these arguments
    once, and use the **kwargs syntax to pass it around. This also allows me to easily
    add new attributes if I need them later. Note that I allow guesses to contain
    repeats, but constrain the opponent to pick distinct colours; to change this,
    I only need change G below. (If I wanted to allow repeats in the opponent's secret,
    I would need to change the scoring function as well.)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我的解决方案更通用，我将特定于Mastermind问题的任何东西作为关键字参数传递。因此，我编写了一个函数来创建这些参数一次，并使用**kwargs语法来传递它。这也使我可以很容易地在以后需要时添加新的属性。请注意，我允许猜测中包含重复项，但限制对手选择不同的颜色；要更改这一点，我只需更改下面的G。（如果我想允许对手的秘密中有重复项，我还需要更改评分函数。）
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Sometimes I will need to *partition* a set based on the result of applying
    a function to each element in the set. For instance, the numbers 1..10 can be
    partitioned into even and odd numbers by the function n % 2 (odds give 1, evens
    give 0). The following function returns such a partition, implemented as a map
    from the result of the function call to the set of elements that gave that result
    (e.g. { 0: evens, 1: odds }).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '有时我会需要根据应用于集合中每个元素的函数的结果来*分割*集合。例如，数字1..10可以通过函数n % 2（奇数返回1，偶数返回0）分割为奇数和偶数。以下函数返回这样一个分割，实现为从函数调用结果到给出该结果的元素集的映射（例如{
    0: 偶数, 1: 奇数 }）。'
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'I decided to explore a solver that uses a *greedy entropic approach*. At each
    step, it calculates the information that could be obtained from each possible
    guess, and selects the most informative guess. As the numbers of possibilities
    grow, this will scale badly (quadratically), but let''s give it a try! First,
    I need a method to calculate the entropy (information) of a set of probabilities.
    This is just -∑p log p. For convenience, however, I will allow input that are
    not normalized, i.e. do not add up to 1:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定探索一种使用*贪婪熵方法*的求解器。在每一步，它计算每个可能的猜测可能获得的信息，并选择最具信息量的猜测。随着可能性的增加，这将不利地扩展（二次），但让我们试试吧！首先，我需要一种方法来计算一组概率的熵（信息）。这只是
    -∑p log p。然而，为了方便起见，我将允许未标准化的输入，即不加总到1：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'So how am I going to use this function? Well, for a given set of possibilities,
    V, and a given guess, g, the information we get from that guess can only come
    from the scoring function: more specifically, how that scoring function partitions
    our set of possibilities. We want to make a guess that distinguishes best among
    the remaining possibilites — divides them into the largest number of small sets
    — because that means we are much closer to the answer. This is exactly what the
    entropy function above is putting a number to: a large number of small sets will
    score higher than a small number of large sets. All we need to do is plumb it
    in.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我要如何使用这个函数呢？嗯，对于一组给定的可能性V和一个给定的猜测g，我们从那个猜测中得到的信息只能来自于评分函数：更具体地说，评分函数如何将我们的可能性集合划分。我们希望做出一个最能区分剩余可能性的猜测——将它们分成最多的小集合——因为这意味着我们离答案更近了。这正是上面的熵函数要给出的一个数字：一个大量的小集合得分比一个小量的大集合高。我们需要做的就是将其插入。
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Of course, at any given step what we will actually have is a set of remaining
    possibilities, V, and a set of possible guesses we could make, G, and we will
    need to pick the guess which maximizes the entropy. Additionally, if several guesses
    have the same entropy, prefer to pick one which could also be a valid solution;
    this guarantees the approach will terminate. I use the standard python decorate-undecorate
    pattern together with the built-in max method to do this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在任何给定的步骤中，我们实际上会有一组剩余的可能性V和我们可以做出的可能猜测集合G，并且我们需要选择最大化熵的猜测。此外，如果有几个猜测具有相同的熵，则首选那些也可能是有效解决方案的猜测；这保证了该方法将终止。我使用了标准的Python装饰-取消装饰模式以及内置的max方法来实现这一点：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now all I need to do is repeatedly call this function until the right result
    is guessed. I went through a number of implementations of this algorithm until
    I found one that seemed right. Several of my functions will want to approach this
    in different ways: some enumerate all possible sequences of decisions (one per
    guess the opponent may have made), while others are only interested in a single
    path through the tree (if the opponent has already chosen a secret, and we are
    just trying to reach the solution). My solution is a "lazy tree", where each part
    of the tree is a generator that can be evaluated or not, allowing the user to
    avoid costly calculations they won''t need. I also ended up using two more namedtuples,
    again for clarity of code.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我所要做的就是重复调用此函数，直到猜测出正确的结果。我尝试了几种这种算法的实现，直到找到一种看起来合适的方法。我的几个函数会以不同的方式处理这个问题：有些会列举所有可能的决策序列（每个猜测对手可能做出的一个），而其他一些则只对树中的一个路径感兴趣（如果对手已经选择了一个秘密，我们只是尝试达到解决方案）。我的解决方案是一个“懒树”，树的每个部分都是一个可以评估或不评估的生成器，允许用户避免他们不需要的昂贵计算。我还使用了另外两个命名元组，以便代码更清晰。
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following function evaluates a single path through this tree, based on
    a supplied scoring function:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数基于提供的评分函数评估此树的单个路径：
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This can now be used to build an interactive game of Mastermind where the user
    scores the computer's guesses. Playing around with this reveals some interesting
    things. For example, the most informative first guess is of the form (yellow,
    yellow, blue, green), not (yellow, blue, green, red). Extra information is gained
    by using exactly half the available colours. This also holds for 6-colour 3-hole
    Mastermind — (yellow, blue, green) — and 8-colour 5-hole Mastermind — (yellow,
    yellow, blue, green, red).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用这个构建一个交互式的Mastermind游戏，用户评分计算机的猜测。通过这样的方式玩耍会发现一些有趣的事情。例如，最具信息量的第一个猜测的形式是（黄色，黄色，蓝色，绿色），而不是（黄色，蓝色，绿色，红色）。使用恰好一半的可用颜色可以获得额外的信息。这也适用于6色3孔Mastermind——（黄色，蓝色，绿色）——和8色5孔Mastermind——（黄色，黄色，蓝色，绿色，红色）。
- en: But there are still many questions that are not easily answered with an interactive
    solver. For instance, what is the most number of steps needed by the greedy entropic
    approach? And how many inputs take this many steps? To make answering these questions
    easier, I first produce a simple function that turns the lazy tree of above into
    a set of paths through this tree, i.e. for each possible secret, a list of guesses
    and scores.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，仍然有许多问题是交互式求解器难以回答的。例如，贪婪熵法需要的步骤最多是多少？以及有多少个输入需要这么多步骤？为了更容易地回答这些问题，我首先制作了一个简单的函数，将上述懒惰树转换为该树中的路径集，即对于每个可能的秘密，一个猜测和得分列表。
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finding the worst case is a simple matter of finding the longest solution:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 找到最坏情况只是找到最长的解决方案：
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It turns out that this solver will always complete in 5 steps or fewer. Five
    steps! I know that when I played Mastermind as a child, I often took longer than
    this. However, since creating this solver and playing around with it, I have greatly
    improved my technique, and 5 steps is indeed an achievable goal even when you
    don't have time to calculate the entropically ideal guess at each step ;)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，这个求解器始终可以在5步或更少的步骤中完成。五步！我知道当我小时候玩Mastermind时，我经常花的时间比这还长。然而，自从创建了这个求解器并试玩了一下之后，我已经大大提高了我的技术水平，即使在没有时间在每一步计算熵理想猜测的情况下，5步也是一个可以实现的目标
    ;)
- en: 'How likely is it that the solver will take 5 steps? Will it ever finish in
    1, or 2, steps? To find that out, I created another simple little function that
    calculates the solution length distribution:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 求解器需要5步的概率有多大？它会在1步或2步内完成吗？为了找出答案，我创建了另一个简单的小函数来计算解决方案长度分布：
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For the greedy entropic approach, with repeats allowed: 7 cases take 2 steps;
    55 cases take 3 steps; 229 cases take 4 steps; and 69 cases take the maximum of
    5 steps.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于允许重复的贪婪熵方法：7种情况需要2步；55种情况需要3步；229种情况需要4步；而69种情况需要最多的5步。
- en: 'Of course, there''s no guarantee that the greedy entropic approach minimizes
    the worst-case number of steps. The final part of my general-purpose language
    is an algorithm that decides whether or not there are *any* solutions for a given
    worst-case bound. This will tell us whether greedy entropic is ideal or not. To
    do this, I adopt a branch-and-bound strategy:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，并不保证贪婪的熵方法最小化了最坏情况下的步数。我通用语言的最后一部分是一个算法，用于决定是否存在*任何*给定最坏情况下的解决方案。这将告诉我们贪婪的熵方法是否是理想的。为此，我采用了分支和界限策略：
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is definitely a complex function, so a bit more explanation is in order.
    The first step is to partition the remaining solutions based on their score after
    a guess, as before, but this time we don't know what guess we're going to make,
    so we store all partitions. Now we *could* just recurse into every one of these,
    effectively enumerating the entire universe of possible decision trees, but this
    would take a horrifically long time. Instead I observe that, if at this point
    there is no partition that divides the remaining solutions into more than n sets,
    then there can be no such partition at any future step either. If we have k steps
    left, that means we can distinguish between at most n^(k-1) solutions before we
    run out of guesses (on the last step, we must always guess correctly). Thus we
    can discard any partitions that contain a score mapped to more than this many
    solutions. This is the next two lines of code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对是一个复杂的函数，因此需要更多的解释。第一步是根据猜测后的分数对剩余的解决方案进行分区，就像以前一样，但这次我们不知道我们将要做出什么猜测，所以我们存储所有的分区。现在我们*可能*只是递归进入其中的每一个，有效地枚举可能的决策树的整个宇宙，但这将花费非常长的时间。相反，我观察到，如果在这一点上没有将剩余的解决方案分成多于n组的分区，那么在将来的任何一步中也不会有这样的分区。如果我们还剩k步，这意味着在我们用尽猜测之前，我们最多可以区分n^(k-1)个解决方案（在最后一步，我们必须始终猜测正确）。因此，我们可以丢弃任何包含将分数映射到超过这么多解决方案的分区。这是代码的接下来两行。
- en: The final line of code does the recursion, using Python's any and all functions
    for clarity, and trying the highest-entropy decisions first to hopefully minimize
    runtime in the positive case. It also recurses into the largest part of the partition
    first, as this is the most likely to fail quickly if the decision was wrong. Once
    again, I use the standard decorate-undecorate pattern, this time to wrap Python's
    *sorted* function.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的最后一行使用递归，清晰地使用Python的`any`和`all`函数，并首先尝试最高熵的决策，希望在正面案例中最小化运行时间。它还首先递归到分区的最大部分，因为如果决策错误，这部分很可能会迅速失败。再次，我使用标准的装饰-去装饰模式，这次是为了包装Python的*sorted*函数。
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'By calling solutionExists repeatedly with an increasing number of steps, we
    get a strict lower bound on the number of steps needed in the worst case for a
    Mastermind solution: 5 steps. The greedy entropic approach is indeed optimal.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过反复调用`solutionExists`，并逐步增加步数，我们可以得到在最坏情况下破解**Mastermind**问题所需步数的严格下界：5步。这种贪婪的熵方法确实是最优的。
- en: Out of curiosity, I invented another guessing game, which I nicknamed "twoD".
    In this, you try to guess a pair of numbers; at each step, you get told if your
    answer is correct, if the numbers you guessed are no less than the corresponding
    ones in the secret, and if the numbers are no greater.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 出于好奇，我发明了另一个猜谜游戏，我称之为“twoD”。在这个游戏中，你尝试猜测一对数字；在每一步中，你会得到告知你的答案是否正确，你猜测的数字是否至少不少于秘密数字对应的数字，以及数字是否至多不超过。
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For this game, the greedy entropic approach has a worst case of five steps,
    but there is a better solution possible with a worst case of four steps, confirming
    my intuition that myopic greediness is only coincidentally ideal for Mastermind.
    More importantly, this has shown how flexible my language is: all the same methods
    work for this new guessing game as did for Mastermind, letting me explore other
    games with a minimum of extra coding.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个游戏，贪婪熵方法的最坏情况是五步，但有一种更好的解决方案可以达到最坏情况下的四步，这证实了我的直觉，即短视的贪婪只是对猜谜游戏偶然理想的。更重要的是，这表明了我的语言有多灵活：所有相同的方法都适用于这个新的猜测游戏，就像对猜谜游戏一样，让我在最小的额外编码下探索其他游戏。
- en: What about performance? Obviously, being implemented in Python, this code is
    not going to be blazingly fast. I've also dropped some possible optimizations
    in favour of clear code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 那么性能如何？显然，由于是用Python实现的，这段代码不会运行得非常快。我也放弃了一些可能的优化，选择了清晰的代码。
- en: 'One cheap optimization is to observe that, on the first move, most guesses
    are basically identical: (yellow, blue, green, red) is really no different from
    (blue, red, green, yellow), or (orange, yellow, red, purple). This greatly reduces
    the number of guesses we need consider on the first step — otherwise the most
    costly decision in the game.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的优化是观察到，在第一步中，大多数猜测基本上是相同的：（黄，蓝，绿，红）与（蓝，红，绿，黄）或（橙，黄，红，紫）没有什么区别。这极大地减少了我们在第一步需要考虑的猜测数量
    — 否则这是游戏中最昂贵的决定。
- en: However, because of the large runtime growth rate of this problem, I was not
    able to solve the 8-colour, 5-hole Mastermind problem, even with this optimization.
    Instead, I ported the algorithms to C++, keeping the general structure the same
    and employing bitwise operations to boost performance in the critical inner loops,
    for a speedup of many orders of magnitude. I leave this as an exercise to the
    reader :)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，由于这个问题的运行时间增长率很大，即使进行了这种优化，我也无法解决8种颜色、5个孔洞的猜谜问题。相反，我将算法移植到了C++，保持了一般结构的不变，并采用了位运算来提高关键内部循环的性能，从而实现了几个数量级的加速。我把这留给读者作为练习
    :)
- en: '**Addendum, 2018:** It turns out the greedy entropic approach is not optimal
    for the 8-colour, 4-hole Mastermind problem either, with a worst-case length of
    7 steps when an algorithm exists that takes at most 6!'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**2018年补充：** 结果表明，贪婪熵方法对于8种颜色、4个孔洞的猜谜问题也不是最优的，最坏情况下需要7步，而存在一种算法最多只需要6步！'
