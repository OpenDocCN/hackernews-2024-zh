- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:56:47'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:56:47
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: So you think you know C?
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么你认为你懂C语言吗？
- en: 来源：[https://wordsandbuttons.online/so_you_think_you_know_c.html](https://wordsandbuttons.online/so_you_think_you_know_c.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://wordsandbuttons.online/so_you_think_you_know_c.html](https://wordsandbuttons.online/so_you_think_you_know_c.html)
- en: A lot of programmers claim they know C. Well, it has the most famous syntax,
    it has been there for 44 years, and it’s not cluttered with obscure features.
    It’s easy!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 很多程序员声称他们懂C语言。好吧，它有着最著名的语法，已经存在了44年，而且没有被混乱的特性所淹没。很容易！
- en: 'If you think it is — take this test. It only has 5 questions. Every question
    is basically the same: what the return value would be? And each question has a
    choice of four answers, of which one and only one is right.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得是的话——做这个测试。它只有5个问题。每个问题基本上都一样：返回值会是什么？每个问题都有四个选项，其中只有一个是正确的。
- en: 'So, the right answers are:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，正确答案是：
- en: You scored 0 points, sorry. You don't know what you don't know. You scored 1
    point, which is not so bad. You know that there is something you don't know. You
    scored 2 points, which is not so bad. You know that there are things you don't
    know. You scored 3 points, which is rather well. You know that you don't know.
    You scored 4 points, which is excellent. You know what you don't know. You scored
    5 points, congratulations! You know exactly what you don't know.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你得了0分，抱歉。你不知道你不知道的。你得了1分，这还不错。你知道有些东西你不知道。你得了2分，这还不错。你知道有些你不知道的事情。你得了3分，相当不错。你知道你不知道。你得了4分，非常好。你知道你不知道什么。你得了5分，恭喜！你准确地知道你不知道什么。
- en: And yes, the right answer to every question is “I don’t know”.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，每个问题的正确答案都是“I don’t know”。
- en: Let’s untangle them one by one now.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们一一来解决它们。
- en: '**First one** is actually about structure padding. C compiler knows that storing
    unaligned data in RAM may be costly, so it pads your data for you. If you have
    5 bytes of data in a structure, it will probably make it 8\. Or 16\. Or 6\. Or
    whatever it wants. There are extensions like GCC attributes aligned and packed
    that let you get some control over this process, but they are non-standard. C
    itself does not define padding attributes, so the right answer is: “I don’t know”.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**第一个**问题实际上是关于结构填充的。C编译器知道在RAM中存储不对齐的数据可能是昂贵的，所以它会为你填充数据。如果你的结构中有5个字节的数据，它可能会将其变为8、16、6或任何它想要的。还有一些像GCC属性aligned和packed这样的扩展，它们让你在这个过程中获得一些控制，但它们不是标准的。C本身并不定义填充属性，所以正确答案是：“I
    don’t know”。'
- en: The **second one** is about integer promotion. It’s only reasonable that the
    type of short int and an expression with the largest integer being short int would
    be the same. But the reasonable doesn’t mean right for C. There is the rule that
    every integer expression gets promoted to int. Actually, it’s much more complicated
    than that. Take a peek at the standard, you’ll enjoy it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**第二个**问题是关于整数提升。一个短整型和一个具有最大整数值的表达式的类型是相同的，这是合理的。但是对于C语言来说，合理并不意味着正确。有一个规则是，每个整数表达式都会提升为int类型。实际上，情况比这复杂得多。去查看标准，你会喜欢的。'
- en: 'But even so, we don’t compare types, we compare sizes. And the standard only
    guarantees that the range of short int should not exceed int. They ranges may
    be equal, and the size of the *short int* may even be grates than the size of
    *int* because of the padding bits. So the right answer is: “I don’t know”.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但是即使这样，我们不是比较类型，我们比较大小。标准只保证了short int的范围不应该超过int。它们的范围可能相等，而且由于填充位，short int的大小甚至可能大于int的大小。因此正确答案是：“I
    don’t know”。
- en: 'The **third one** is all about dark corners. Starting from that neither integer
    overflows, nor char type sign are defined by the standard. First one is undefined
    behavior, the second is implementation specific. But even more, the size of the
    *char* type itself is not specified in bits either. Historically, there were platforms
    where it was 6 bits (remember trigraphs?), and there are platforms today where
    all five integer types are 32 bits. Even the value of the space character is implementation
    defined. Without all these details specified, every speculation about the result
    is invalid, so the answer is: “I don’t know”.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**第三个**问题是关于黑暗角落的。从没有一个整数溢出，也没有一个字符类型的符号由标准定义的地方开始。第一个是未定义行为，第二个是实现特定的。但更重要的是，*char*类型本身的大小也没有指定位数。在历史上，有些平台上它是6位（还记得三字符序列吗？），今天有些平台上所有五种整数类型都是32位。甚至空格字符的值也是由实现定义的。如果没有这些细节被指定，那么对结果的所有推测都是无效的，所以答案是：“I
    don’t know”。'
- en: The **fourth one** looks tricky, but it’s not that hard in retrospective since
    you already know that int size is not directly specified in the standard. It can
    easily be 16 bits, then the very first operation will cause the over-shift and
    that’s plain undefined behavior. It’s not C fault, on some platforms, it is even
    undefined in assembly, so the compiler simply can’t give you valid guarantees
    without eating up a lot of performance.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个看起来很棘手，但回想起来并不那么难，因为你已经知道 int 大小在标准中没有直接指定。它很容易是 16 位，然后第一个操作就会导致过度移位，这就是明显的未定义行为。这不是
    C 的错，在某些平台上，甚至在汇编中也是未定义的，所以编译器简单地无法在不消耗大量性能的情况下给你有效的保证。
- en: So once again “I don’t know” is the right answer.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以再次，“我不知道”是正确的答案。
- en: 'And the **last one** is classic. The result depends on undefined behavior:
    [whether the post-increment is deferred and which argument is fetched first](https://gynvael.coldwind.pl/?id=372).
    It might work just like you expect on one platform and might fail easily on the
    other. Usually, it just evaluates to *2*, so you get used to it until one day
    it doesn''t. That’s the problem with undefined things. When you meet one, the
    right answer is always: “I don’t know”.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个是经典之作。结果取决于未定义行为：[后置增量是否被延迟以及首先获取哪个参数](https://gynvael.coldwind.pl/?id=372)。在一个平台上可能会像你期望的那样工作，在另一个平台上可能很容易失败。通常，它只是评估为*2*，所以你习惯了，直到有一天它不再是这样。这就是未定义事物的问题。当你遇到一个时，正确的答案总是：“我不知道”。
- en: P. S.
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附言。
- en: And at this point, I only have to apologize. The test is clearly provocative
    and may even be a little offensive. I’m sorry if it causes any aggravation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一步，我只需要道歉。这个测试显然是挑衅性的，甚至可能有点冒犯。如果它引起了任何不快，我很抱歉。
- en: The thing is, I learned C in roughly 1998, and for the whole 15 years thought
    that I’m good at it. It was my language of choice in college, and I’ve done some
    successful projects in C on my first full-time job, and even then, when I was
    mostly working with C++, I thought of it as over-bloated C.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，我大约在 1998 年左右学会了 C，然后整整 15 年以来都以为自己很擅长它。这是我在大学期间选择的语言，并且我在第一份全职工作中用 C 完成了一些成功的项目，甚至在我主要使用
    C++ 的时候，我仍然认为它是臃肿的 C。
- en: The pivoting moment came in 2013, when I’ve got myself involved with some safety-critical
    PLC programming. It was a research project in nuclear power plant automation,
    where absolutely no underspecification was tolerable. I had to learn that, while
    I did know a lot about C programming, the absolute majority of what I knew was
    false. And I had to learn it the hard way too.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 2013 年是一个关键时刻，当我开始参与一些安全关键的 PLC 编程时。这是一个核电厂自动化研究项目，绝对不能容忍任何不明确的地方。我必须学会，虽然我确实了解很多关于
    C 编程的知识，但我所知道的绝大部分都是错误的。而且我必须以艰难的方式学习。
- en: Eventually, I had to learn to rely on the standard instead of folklore; to trust
    measurements and not presumptions; to take “things that simply work” skeptically, — I
    had to learn an engineering attitude. This is what matters the most, not some
    particular WAT anecdotes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我不得不学会依靠标准而不是民间传说；相信测量而不是假设；对“事情看起来正常”的态度持怀疑态度，——我必须学会一种工程态度。这才是最重要的，而不是某些特定的
    WAT 轶事。
- en: I only hope this little test would help someone like myself from the past to
    learn this attitude in some 15 minutes and not 15 years.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我只希望这个小测试能帮助像我过去那样的人在大约 15 分钟而不是 15 年的时间里学会这种态度。
