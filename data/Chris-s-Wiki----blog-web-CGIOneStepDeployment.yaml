- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:05:55'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:05:55'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Chris''s Wiki :: blog/web/CGIOneStepDeployment'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Chris''s Wiki :: blog/web/CGIOneStepDeployment'
- en: 来源：[https://utcc.utoronto.ca/~cks/space/blog/web/CGIOneStepDeployment](https://utcc.utoronto.ca/~cks/space/blog/web/CGIOneStepDeployment)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://utcc.utoronto.ca/~cks/space/blog/web/CGIOneStepDeployment](https://utcc.utoronto.ca/~cks/space/blog/web/CGIOneStepDeployment)
- en: When I wrote about [how CGI programs aren't particularly slow these days](/~cks/space/blog/web/CGINotSlow),
    one of the reactions I saw was to suggest that one might as well use a [FastCGI](https://en.wikipedia.org/wiki/FastCGI)
    system to run your 'CGI' as a persistent daemon, saving you the overhead of starting
    a CGI program on every request. One of the practical answers is that FastCGI doesn't
    have as simple a deployment model as CGIs generally offer, [which is part of their
    attractions](/~cks/space/blog/web/CGIAttractions).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我写关于 [CGI 程序在今天并不特别慢](/~cks/space/blog/web/CGINotSlow) 时，我看到的一种反应是建议您最好使用 [FastCGI](https://en.wikipedia.org/wiki/FastCGI)
    系统将您的 'CGI' 作为持久守护程序运行，这样您就可以节省每个请求时启动 CGI 程序的开销。其中一个实际的答案是，FastCGI 并没有像通常提供的
    CGI 那样简单的部署模型，[这也是它们的吸引之一](/~cks/space/blog/web/CGIAttractions)。
- en: With many models of CGI usage and configuration, installing a CGI, removing
    a CGI, or updating it is a single-step process; you copy a program into a directory,
    remove it again, or update it. The web server notices that the executable file
    exists (sometimes with a specific extension or whatever) and runs it in response
    to requests. This deployment model can certainly become more elaborate, with you
    directing a whole tree of URLs to a CGI, but it doesn't have to be; you can start
    very simple and scale up.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多 CGI 使用和配置模型，安装 CGI、删除 CGI 或更新 CGI 都是一个单步过程；您将程序复制到一个目录中，然后再删除或更新它。Web 服务器注意到可执行文件存在（有时带有特定的扩展名或其他内容）并在响应请求时运行它。这种部署模型肯定可以变得更为复杂，您可以将整个
    URL 树定向到一个 CGI，但这并非必须；您可以从非常简单的方式开始并逐步扩展。
- en: It's theoretically possible to make FastCGI deployment almost as simple as the
    CGI model, but I don't know if any FastCGI servers and web servers have good support
    for this. Instead, FastCGI and in general all 'application server' models almost
    always require at least a two step configuration, where you to configure your
    application in the application server and then configure the URL for your application
    in your web server (so that it forwards to your application server). In some cases,
    each application needs a separate server (FastCGI or whatever other mechanism),
    which means that you have to arrange to start and perhaps monitor a new server
    every time you add an application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上可以使 FastCGI 部署几乎与 CGI 模型一样简单，但我不知道是否有任何 FastCGI 服务器和 Web 服务器对此提供良好支持。相反，FastCGI
    和一般的 '应用服务器' 模型几乎总是至少需要两步配置，您需要在应用服务器中配置您的应用程序，然后在 Web 服务器中配置您的应用程序的 URL（以便将其转发到您的应用服务器）。在某些情况下，每个应用程序需要一个单独的服务器（FastCGI
    或其他机制），这意味着每次添加应用程序时都必须安排启动并可能监视新服务器。
- en: (I'm going to assume that the FastCGI server supports reliable and automatic
    hot reloading of your application when you deploy a change to it. If it doesn't
    then that gets more complicated too.)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: (我将假设 FastCGI 服务器支持在部署更改时可靠且自动的热重载您的应用程序。如果不支持，那么事情会更复杂。)
- en: If you have a relatively static application landscape, this multi-step deployment
    process is perfectly okay since you don't have to go through it very often. But
    it is more involved and it often requires some degree of centralization (for web
    server configuration updates, for example), while it's possible to have a completely
    distributed CGI deployment model where people can just drop suitably named programs
    into directories that they own (and then have their CGI run as themselves through,
    for example, Apache suexec). And, of course, it's more things to learn.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序相对静态，这种多步部署过程是完全可以的，因为您不必经常进行。但这更为复杂，通常需要一定程度的集中化（例如，用于 Web 服务器配置更新），尽管可以完全分布式
    CGI 部署模型，其中人们只需将合适命名的程序放入自己拥有的目录中（然后通过例如 Apache suexec 以其自身身份运行它们的 CGI）。当然，这也是需要学习的更多内容。
- en: (CGI is not the only thing in the web language landscape that has this simple
    one step deployment model. PHP has traditionally had it too, although my vague
    understanding is that people often use PHP application servers these days.)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: (CGI 并不是 web 语言领域唯一具有简单一步部署模型的东西。PHP 传统上也有，尽管我模糊的理解是现在人们经常使用 PHP 应用服务器。)
- en: 'PS: At least on Apache, CGI also has a simple debugging story; the web server
    will log any output your CGI sends to standard error in the error log, including
    any output generated by a total failure to run. This can be quite useful when
    inexperienced people are trying to develop and run their first CGI. [Other web
    servers can sometimes be less helpful](/~cks/space/blog/sysadmin/LighttpdCGIStderr).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: PS：至少在 Apache 上，CGI 也有一个简单的调试故事；Web 服务器将记录 CGI 发送到标准错误输出的任何内容，包括由于完全无法运行而生成的任何输出。这在没有经验的人尝试开发和运行他们的第一个
    CGI 时非常有用。[其他 Web 服务器有时可能不那么有用](/~cks/space/blog/sysadmin/LighttpdCGIStderr)。
