- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:47:58'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:47:58'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Type Inference Was a Mistake
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型推断是一个错误
- en: 来源：[https://borretti.me/article/type-inference-was-a-mistake](https://borretti.me/article/type-inference-was-a-mistake)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://borretti.me/article/type-inference-was-a-mistake](https://borretti.me/article/type-inference-was-a-mistake)
- en: Type inference is bad. It makes code harder to read, and languages that use
    it too much are harder to write. It’s a false economy whereby you save unobservable
    milliseconds of typing today and make everything else worse.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 类型推断很糟糕。它使代码更难阅读，过度使用它的语言写起来也更困难。这是一种虚假的经济学，今天你虽然可以节省不可观测的打字时间，但其他一切都变得更糟。
- en: Type Inference Makes Code Less Readable
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型推断使代码更难阅读
- en: If you have an IDE with a working LSP, you can hover over variables to see their
    types. In VSCode with rust-analyzer I can see the type annotations as grayed-out
    overlays—the ghosts of departed types.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个带有工作 LSP 的 IDE，你可以悬停在变量上查看它们的类型。在 VSCode 中，使用 rust-analyzer 我可以看到类型注释作为灰色叠加层——已离去类型的幽灵。
- en: 'But there are many other contexts where I read code: a book, a blog post, a
    Git diff. When editing code in a limited environment, e.g. stock `vim` in a VM.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但还有许多其他情境，我会阅读代码：书籍、博客文章、Git 差异。在编辑有限环境中的代码时，例如在 VM 中的标准 `vim`。
- en: In all of those contexts, the code becomes less clear.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些情境中，代码变得更不清晰。
- en: In Rust and Haskell you have to at least annotate the parameter types and return
    type of functions. Type inference is only for variable bindings inside the function
    body. This is a lot more tractable.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Rust 和 Haskell 中，你至少要注释函数的参数类型和返回类型。类型推断仅适用于函数体内的变量绑定。这要容易得多。
- en: 'In OCaml type inference is a lot more powerful: you don’t have to annotate
    function signatures. And, since you’re not required to, [you don’t do it](/article/language-pragmatics).'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OCaml 中，类型推断更加强大：你不必注释函数签名。而且，因为你不需要，[你就不这么做](/article/language-pragmatics)。
- en: The problem is the type inference engine doesn’t know whether the code you’ve
    written is correct or has a bug. It just takes what you give it and does constraint
    solving on it.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于类型推断引擎不知道你写的代码是否正确或有错误。它只是接受你给它的内容并在其上执行约束求解。
- en: So when I wrote OCaml I’d frequently make a mistake, but the compiler would
    happily propagate it up, and I’d get an inscrutable error that’s very far from
    the actual location of the error in the code and involves types I can’t figure
    out.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我写 OCaml 时，我经常犯错误，但编译器会愉快地传播它，并且我会得到一个晦涩难解的错误，与代码中实际错误的位置相距甚远，并涉及我无法理解的类型。
- en: So then you have to corner the bug by iteratively adding type annotations to
    function signatures in the module and compiling again, and gradually the error
    message moves closer and closer to the code that has the actual error. And if
    it’s a really bad one you have to annotate the types of individual variable bindings.
    And then you find the error and it’s something like, an extra argument to a curried
    function, but because type inference is about propagating constraints the error
    message—the point where inference gives up—can be thrown arbitrarily far away
    from the actual mistake in the code.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你必须通过逐步向模块中的函数签名添加类型注释并再次编译，逐渐使错误消息接近代码的过程来找到 bug。如果它是一个真正严重的错误，你还需要注释个别变量绑定的类型。然后你会发现错误，像是给柯里化函数多传了一个参数，但因为类型推断是关于传播约束的，错误消息——推断放弃的点——可以被抛得离实际代码错误的地方任意远。
- en: So you end up writing the types anyways, just in a much more frustrating and
    flow-breaking way.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以最终你还是要以一种更加令人沮丧和打断思路的方式写出类型。
- en: Type Inference Wastes Academic Effort
  id: totrans-split-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型推断浪费了学术精力
- en: I’ll occasionally read a paper introducing a new type system. Usually there’s
    less than one page of motivation—why should I care about this?—followed by the
    inference rules, and then pages and pages describing the type reconstruction algorithm
    for the type system.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我偶尔会读一篇介绍新类型系统的论文。通常有不到一页的动机——我为什么要关心这个？——接着是推断规则，然后是描述类型重构算法的一页又一页。
- en: I think there’s a pervasive view that if you don’t have a type inference algorithm
    (or a proof you can’t have one), it’s like not doing your homework, and the paper
    is considered less legitimate.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为普遍的观点是，如果你没有类型推断算法（或证明你不能有这样的算法），那就像是没做作业一样，这篇论文会被认为不那么合法。
- en: This wastes a precious resource (academic paper page count) on solving the fake
    problem of having to annotate types, a resource that would be better spent on
    explaining the applications of the type system, or showing code examples that
    help to understand how the type system works. Instead we get pages and pages of
    inscrutable inference rules in whatever ad-hoc variant of Gentzen notation the
    paper chooses to use.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种做法浪费了一种宝贵的资源（学术论文页数），解决了不必要的问题——必须注释类型，而这种资源本应用于解释类型系统的应用或者展示能帮助理解类型系统如何工作的代码示例。相反，我们得到了一页页难以理解的推理规则，使用的是论文选择的任意变种的根根注解符号。
- en: The Whole Idea is Backwards
  id: totrans-split-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整个想法完全是颠倒的
- en: I don’t want to infer types from my code. I’d rather infer the code from the
    types. Types are the spec, they are small and low in expressiveness, code is big
    and has infinitely more degrees of freedom than types. The bug surface area is
    smaller with types.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我不想从我的代码推断类型。我更愿意从类型推断代码。类型是规范，它们简短且表达力不强，而代码则更大且具有比类型多得多的自由度。有类型的代码的错误表面积要小得多。
- en: So it makes sense to use the types (simple, terse, constrained) to generate
    the code (big, unconstrained, longer to write, bug-prone). Inferring types from
    code is like building a complex machine without plans, and then using an X-ray
    diffractometer to extract plans from the physical object.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用类型（简单、简洁、受限）来生成代码（大、不受限制、编写时间长、易出错）是有道理的。从代码推断类型就像在没有计划的情况下建造复杂的机器，然后使用X射线衍射仪从物理对象中提取计划一样。
