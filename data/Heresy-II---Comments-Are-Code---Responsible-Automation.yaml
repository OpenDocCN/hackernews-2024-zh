- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:45:04'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:45:04
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Heresy II – Comments Are Code – Responsible Automation
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异端邪说二 – 注释即代码 – 负责的自动化
- en: 来源：[https://responsibleautomation.wordpress.com/2018/02/01/heresy-ii-comments-are-code/](https://responsibleautomation.wordpress.com/2018/02/01/heresy-ii-comments-are-code/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://responsibleautomation.wordpress.com/2018/02/01/heresy-ii-comments-are-code/](https://responsibleautomation.wordpress.com/2018/02/01/heresy-ii-comments-are-code/)
- en: 'I hold an unpopular stance: code comments are as important as the code itself.
    OK, maybe that’s a little overstated, but I maintain that code comments are critical
    to code readability and maintainability.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我持有一个不受欢迎的观点：代码注释和代码本身一样重要。好吧，也许这有点言过其实，但我坚持认为代码注释对于代码的可读性和可维护性至关重要。
- en: Before you see if I weigh more than a duck, please hear me out…
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在你看看我比鸭子更重之前，请听我说完……
- en: When I was a college undergrad, I had the privilege of working on a project
    with a graduate professor and some grad students. The core of the project was
    creating a software package to perform type checking on a non-typed, functional
    language; this was both weird and cool…but I digress. As part of the project,
    we were required to comment our code. My teammates and I diligently went about
    documenting each function and other interesting parts of the code we’d created.
    When we’re finished, we proudly submitted our code to the professor.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当我还是大学本科生时，我有幸与一位研究生教授和一些研究生一起参与了一个项目。该项目的核心是创建一个软件包，用于在非类型化的函数语言上进行类型检查；这既奇怪又酷……但我偏离了主题。作为项目的一部分，我们被要求注释我们的代码。我和我的队友们认真地为我们创建的每个函数和代码的其他有趣部分写了注释。完成后，我们自豪地提交了我们的代码给教授。
- en: 'The next day, the professor asked us to come to her office. She proceeded to
    scold us on our commenting…I’ll paraphrase: I can read code, don’t tell me what
    the code is doing, tell me why the code is doing that. She sent us home to think
    and told us to come back the next day and re-comment everything.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第二天，教授要求我们去她的办公室。她继续责备我们的注释……我会用自己的话说：我可以读懂代码，不要告诉我代码在做什么，告诉我为什么代码这样做。她让我们回家思考，并告诉我们第二天回来重新注释一切。
- en: This was some of the best advice I’ve ever received regarding coding. Let me
    tell you why.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我关于编码方面收到的最好的建议之一。让我告诉你为什么。
- en: As you can probably deduce, our code comment explained *what* the code was doing.
    “Go through the list, added each name to the pending transaction list” or some
    such literal thing. As my professor correctly stated, she (and presumably whoever
    else is looking at the code) can read code; she understood what it was doing,
    but not necessarily *why*. The comments were missing *context*; they didn’t explain
    why we’d chosen that implementation and, just as importantly, why we’d not chosen
    a different implementation.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能推测的那样，我们的代码注释解释了代码在做什么。“遍历列表，将每个名称添加到待处理事务列表”或类似的直接描述。正如我的教授正确地指出的那样，她（以及可能是查看代码的其他人）可以读懂代码；她理解它在做什么，但不一定明白为什么。注释缺少上下文；它们没有解释为什么我们选择了这种实现方式，同样重要的是，为什么我们没有选择其他实现方式。
- en: Please, before you get out the duck-weighing equipment, allow me to continue…
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在你拿出称重鸭子的设备之前，请允许我继续……
- en: 'I’m a big fan of self-documenting code. I’m like most developers: I don’t want
    to document my code. I want to write code that is self-explanatory, straightforward,
    easy to use, and to maintain. One of the last things I want to do with code is
    go through and write a bunch of comments. Self-documenting code is nice and all,
    but at some point, as with most things it can be taken to extremes. For example,
    I could write a method name something like'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我是自说明代码的忠实拥护者。我和大多数开发人员一样：我不想为我的代码写文档。我希望编写的代码是自解释的，简单直接，易于使用和维护。对于代码，我最不愿做的事情之一是浏览并写一大堆注释。自说明的代码确实很好，但在某个时候，像大多数事情一样，它可能被夸张。例如，我可以写一个方法名，像这样
- en: '[PRE0]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I consider that a preposterous function or method name. Sure, it’s descriptive.
    Sure, nowadays, most of us use IDEs that have code completion so we don’t really
    need to type all those characters. I still think, however, that it is far clearer
    to include a comment before that “reverse search” loop that says something like
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这是一个荒谬的函数或方法名。当然，它很描述性。当然，现在大多数人使用具有代码补全功能的集成开发环境，因此我们不需要真的输入所有这些字符。然而，我仍然认为，在“反向搜索”循环之前加上一条注释，比如说
- en: '[PRE1]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What’s the big deal about going through the list backward anyway? Perhaps nothing.
    But if it’s not important, then why not go through the list in a more intuitive
    way, i.e. starting at index 0? If it is important to go through backward, perhaps
    it’s important enough to document why. If we don’t comment the why, the reason,
    the context, we run the risk of a future author changing the algorithm and unwittingly
    causing some kind of issue because the algorithm ran “better” when searching the
    list in reverse.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 反向遍历列表有什么大不了的？也许没有什么。但如果这并不重要，那么为什么不以更直观的方式遍历列表，即从索引 0 开始？如果反向遍历很重要，也许重要到足以说明原因。如果我们不注释为什么、原因、上下文，我们可能会因为算法在反向搜索列表时“更好”而导致未来的作者更改算法而不知情地引发某种问题。
- en: But wait! The comments will get out of sync with the code! Well, they shouldn’t.
    When we perform our code reviews, we need to review the comments as well as the
    code. Comments should be correct, understandable, and valuable; we need to keep
    these points in mind during our reviews.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 等等！注释会与代码不同步！好吧，它们不应该。当我们进行代码审查时，我们需要审查注释以及代码。注释应该正确、可理解和有价值；我们在审查过程中需要牢记这些要点。
- en: When should we consider using code comments?
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该考虑在何时使用代码注释？
- en: The code is straightforward but not intuitive (e.g. the *why* is not evident
    from the code itself)
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码很直接但不直观（例如，*为什么*不从代码本身明显）
- en: When the code is not straightforward for deliberate reasons, such as writing
    it in a more straightforward or self-documenting manner would sacrifice performance
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当代码出于有意的原因不直接时，例如以更直接或自我描述的方式编写会牺牲性能时
- en: A comment will increase readability or maintainability
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释会提高可读性或可维护性
- en: A comment will remind us where the code came from, such as a book or StackOverflow
    URL.
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释会提醒我们代码来自何处，比如一本书或 StackOverflow 的 URL。
- en: Generating documentation (see example below)
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成文档（见下面的示例）
- en: When should we consider not commenting?
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 什么时候我们应该考虑不添加注释？
- en: When both the behavior and the context are evident in the code
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当代码行为和上下文都在代码中明显时
- en: When simplifying the code or abstracting into a “helper” method would make the
    code self-documenting without sacrificing value (e.g. performance, maintainability,
    readability, etc.)
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当简化代码或将其抽象为“辅助”方法可以使代码自我描述而不牺牲价值（例如性能、可维护性、可读性等）时
- en: 'At the risk of being hypocritical, I detest standard comment blocks at the
    beginning of each file, class, and method. It seems like valueless busy work,
    especially since I do try to make my code rather descriptive. Then one day, when
    I was grousing about this subject, a less experienced member of my team (yes,
    we can learn from people of all experience levels) said: “you know, those comment
    blocks are where that convenient IntelliSense documentation comes from, right?”
    I’d not considered that. I silently cursed him for being right. I still detest
    doing that kind of commenting, but I now understand the value it provides, so
    I keep the grousing to myself…well, except for now.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 冒着虚伪的风险，我厌恶每个文件、类和方法开头的标准注释块。这似乎是毫无价值的忙碌工作，特别是因为我确实尝试让我的代码相当描述性。然后有一天，当我在抱怨这个话题时，我的团队中一位经验较少的成员（是的，我们可以向各个经验水平的人学习）说：“你知道吗，这些注释块是
    IntelliSense 提供便利文档的地方，对吧？”我从未考虑过这一点。我暗自诅咒他说得对。我仍然厌恶做这种类型的注释，但我现在理解它所提供的价值，所以我会把抱怨留给自己……嗯，除了现在。
- en: Yes, it’s generally better for code to be self-documenting. In lieu of being
    dumb for dumb’s sake, however, perhaps add some code comments to provide context
    for others…or perhaps your future self.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，通常最好让代码自我描述。不过，除了为了愚笨而愚笨之外，也许可以添加一些代码注释来为其他人提供上下文……或者也许为了你未来的自己。
- en: '*Like this? Catch me at an [upcoming event](https://responsibleautomation.wordpress.com/upcoming-events/)!*'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*像这样？在[即将举行的活动](https://responsibleautomation.wordpress.com/upcoming-events/)上找我吧！*'
