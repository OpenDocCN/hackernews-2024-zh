- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:13:32'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:13:32
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Travelling with Tailscale | Karan Sharma
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Tailscale 旅行 | Karan Sharma
- en: 来源：[https://mrkaran.dev/posts/travel-tailscale/](https://mrkaran.dev/posts/travel-tailscale/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mrkaran.dev/posts/travel-tailscale/](https://mrkaran.dev/posts/travel-tailscale/)
- en: <main>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main>
- en: I have an upcoming trip to Europe, which I am quite excited about. I wanted
    to set up a Tailscale exit node to ensure that critical apps I depend on, such
    as banking portals continue working from outside the country. Tailscale provides
    a feature called “Exit nodes”. These nodes can be setup to route all traffic (0.0.0.0/0,
    ::/0) through them.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我即将前往欧洲进行一次旅行，我非常期待。我希望设置一个 Tailscale 出口节点，以确保我依赖的关键应用程序（如银行门户）在国外继续正常工作。Tailscale
    提供了一个名为“出口节点”的功能。这些节点可以设置为路由所有流量（0.0.0.0/0，::/0）通过它们。
- en: I deployed a tiny DigitalOcean droplet in `BLR` region and setup Tailscale as
    an exit node. The steps are quite simple and can be found [here](https://tailscale.com/kb/1103/exit-nodes).
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我在`BLR`地区部署了一个微型 DigitalOcean droplet，并设置了 Tailscale 作为出口节点。这些步骤非常简单，可以在[这里](https://tailscale.com/kb/1103/exit-nodes)找到。
- en: '[PRE0]'
  id: totrans-split-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The node is now advertised as an exit node, and we can confirm that from the
    output of `tailscale status`:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在该节点已被宣传为出口节点，我们可以通过`tailscale status`的输出确认：
- en: '[PRE1]'
  id: totrans-split-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On the client side, I was able to start Tailscale and configure it to send
    all the traffic to the exit node with:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端上，我能够启动 Tailscale 并配置它将所有流量发送到出口节点：
- en: '[PRE2]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can confirm that the traffic is going via the exit node by checking our
    public IP from this device:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过检查此设备的公共 IP 来确认流量是否通过出口节点传输：
- en: '[PRE3]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: However, I encountered a minor issue since I needed to bring my work laptop
    for on-call duties, in case any critical production incidents required my attention
    during my travels. At my organization, we use Netbird as our VPN, which, like
    Tailscale, creates a P2P overlay network between different devices.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我需要带上工作笔记本进行应急值班以响应旅行期间可能发生的关键生产事故时，我遇到了一个小问题。在我们的组织中，我们使用 Netbird 作为 VPN，它与
    Tailscale 类似，可以在不同设备之间创建点对点的覆盖网络。
- en: The problem was that all 0.0.0.0 traffic was routed to the exit node, meaning
    the internal traffic meant for Netbird to access internal sites on our private
    AWS VPC network was no longer routed via the Netbird interface.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于所有 0.0.0.0 流量都被路由到出口节点，这意味着用于 Netbird 访问私有 AWS VPC 网络内部站点的内部流量不再通过 Netbird
    接口路由。
- en: 'Netbird automatically propagates a bunch of IP routing rules when connected
    to the system. These routes are to our internal AWS VPC infrastructure. For example:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当连接到系统时，Netbird 自动传播了一堆 IP 路由规则。这些路由是到我们内部 AWS VPC 基础设施的。例如：
- en: '[PRE4]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, `wt0` is the Netbird interface. So, for example, any IP like `10.0.1.100`
    will go via this interface. To verify this:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`wt0` 是 Netbird 接口。例如，任何像`10.0.1.100`的 IP 都将通过这个接口。为了验证这一点：
- en: '[PRE5]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'However, after connecting to the Tailscale exit node, this was no longer the
    case. Now, even the private IP meant to be routed via Netbird was being routed
    through Tailscale:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，连接到 Tailscale 出口节点后，情况就不再如此了。现在，即使是本应通过 Netbird 路由的私有 IP，也通过 Tailscale 进行路由：
- en: '[PRE6]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Although Tailscale nodes allow for the selective whitelisting of CIDRs to route
    only the designated network packets through them, my scenario was different. I
    needed to selectively bypass certain CIDRs and route all other traffic through
    the exit nodes. I came across a relevant [GitHub issue](https://github.com/tailscale/tailscale/issues/1916),
    but unfortunately, it was closed due to limited demand.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Tailscale 节点允许选择性地为 CIDR 列表添加白名单，以仅通过它们路由指定的网络数据包，但我的场景有所不同。我需要选择性地绕过某些 CIDR
    并通过出口节点路由所有其他流量。我找到了一个相关的[GitHub 问题](https://github.com/tailscale/tailscale/issues/1916)，但不幸的是，由于需求有限，它已经关闭了。
- en: This led me to dig deeper into understanding how Tailscale propagates IP routes,
    to see if there was a way for me to add custom routes with a higher priority.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这促使我进一步深入了解 Tailscale 如何传播 IP 路由，看看是否有办法添加优先级更高的自定义路由。
- en: Initially, I examined the IP routes for Tailscale. Typically, one can view the
    route table list using `ip route`, which displays the routes in the `default`
    and `main` tables. However, Tailscale uses routing table 52 for its routes, instead
    of the default or main table.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，我检查了 Tailscale 的 IP 路由。通常，可以使用`ip route`查看路由表列表，该命令显示`default`和`main`表中的路由。但是，Tailscale
    使用路由表 52 来存储其路由，而不是默认或主要表。
- en: '[PRE7]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A few notes on the route table:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 路由表的几个注意事项：
- en: '`default dev tailscale0` is the default route for this table. Traffic that
    doesn’t match any other route in this table will be sent through the `tailscale0`
    interface. This ensures that any traffic not destined for a more specific route
    will go through the Tailscale network.'
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default dev tailscale0` 是此表的默认路由。不匹配此表中任何其他路由的流量将通过 `tailscale0` 接口发送。这确保了任何未定向到更具体路由的流量都会经过
    Tailscale 网络。'
- en: '`throw 127.0.0.0/8`: This is a special route that tells the system to “throw”
    away traffic destined for 127.0.0.0/8 (local host addresses) if it arrives at
    this table, effectively discarding it before it reaches the local routing table.'
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`throw 127.0.0.0/8`：这是一个特殊路由，告诉系统在抵达此表时丢弃目标为 127.0.0.0/8（本地主机地址）的流量，有效地在其到达本地路由表之前丢弃它。'
- en: 'We can see the priority of these IP rules are evaluated using `ip rule show`:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `ip rule show` 命令查看这些 IP 规则的优先级是如何评估的：
- en: '[PRE8]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This command lists all the current policy routing rules, including their priority
    (look for the pref or priority value). Each rule is associated with a priority,
    with lower numbers having higher priority.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令列出所有当前的策略路由规则，包括它们的优先级（查找 `pref` 或 `priority` 值）。每个规则都与一个优先级相关联，数字较小的优先级较高。
- en: 'By default, Linux uses three main routing tables:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Linux 使用三个主要的路由表：
- en: Local (priority 0)
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地（优先级 0）
- en: Main (priority 32766)
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要（优先级 32766）
- en: Default (priority 32767)
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认（优先级 32767）
- en: Since Netbird already propagates the IP routes in the main routing table, we
    only need to add a higher priority rule to lookup in the `main` table before Tailscale
    takes over.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Netbird 已经传播了主路由表中的 IP 路由，我们只需要在 Tailscale 接管之前向 `main` 表添加更高优先级的查找规则。
- en: '[PRE9]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, our `ip rule` looks like:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 `ip rule` 看起来是这样的：
- en: '[PRE10]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To confirm whether the packets for destination `10.0.0.0/16` get routed via
    `wt0` instead of `tailscale0`, we can use the good ol’ `ip route get`:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认目的地为 `10.0.0.0/16` 的数据包是否通过 `wt0` 而不是 `tailscale0` 路由，我们可以使用经典的 `ip route
    get` 命令：
- en: '[PRE11]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Perfect! This setup allows us to route all our public traffic via exit node
    and only the internal traffic meant for internal AWS VPCs get routed via Netbird
    VPN.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！此设置使我们能够通过出口节点路由所有公共流量，只有用于内部 AWS VPC 的内部流量会通过 Netbird VPN 路由。
- en: 'Since, these rules are ephemeral and I wanted to add a bunch of similar network
    routes, I created a small shell script to automate the process of adding/deleting
    rules:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些规则是临时的，并且我想添加一堆类似的网络路由，我创建了一个小型的 shell 脚本来自动化添加/删除规则的过程：
- en: '[PRE12]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Fin!
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！
- en: </main>
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
