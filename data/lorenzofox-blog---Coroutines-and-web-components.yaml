- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:43:21'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:43:21
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: lorenzofox blog | Coroutines and web components
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: lorenzofox 博客 | 协程和 web 组件
- en: 来源：[https://lorenzofox.dev/posts/component-as-infinite-loop/](https://lorenzofox.dev/posts/component-as-infinite-loop/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://lorenzofox.dev/posts/component-as-infinite-loop/](https://lorenzofox.dev/posts/component-as-infinite-loop/)
- en: <main id="main">
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main id="main">
- en: In the [previous article](/posts/coroutine) we learned what coroutines are and
    saw some patterns they can help implement. In this article, we will see how coroutines
    can be used to model web components in a different way, and why you might like
    it.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在[上一篇文章](/posts/coroutine)中，我们学习了什么是协程，并看到它们可以帮助实现的一些模式。在本文中，我们将看到协程如何以不同的方式对
    web 组件进行建模，以及为什么你可能会喜欢它。
- en: 'Among other things, coroutines have a few properties that we will use in this
    short essay:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 协程除了其他属性外，还有一些我们将在本篇短文中使用的属性：
- en: They are primarily **functions** and can benefit from the whole functional arsenal
    of Javascript (composition, higher order function, delegation, etc.).
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们主要是**函数**，可以受益于 JavaScript 的整个函数库（组合、高阶函数、委托等）。
- en: They are **stateful**.
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是**有状态的**。
- en: You can inject pretty much any kind of data when they are paused. For example,
    an infinite loop within the body of the routine can be considered as a public
    API function.
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当它们被暂停时，你可以注入几乎任何类型的数据。例如，例程体内的无限循环可以被视为公共 API 函数。
- en: You cannot, by design, call the `next` function concurrently.
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按设计，你无法同时调用`next`函数。
- en: 'Consider the following generator:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下生成器：
- en: '[PRE0]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It takes a `$host` DOM element and has a rendering loop. You can wrap this
    generator with a function that produces a `render` function:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受一个`$host` DOM 元素并具有渲染循环。你可以用一个生成器包装这个函数，产生一个`render`函数：
- en: '[PRE1]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For now, the rendering loop is a piece of imperative code, but it can use any
    rendering library you want (react and so on). The first point above says that
    functions (and therefore coroutines) are very versatile in Javascript. We could
    easily go back to a known paradigm if we wanted to. For example, we use [lit-html](./todo)
    to have a declarative view instead of a bunch of imperative code:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，渲染循环是一段命令式代码，但你可以使用任何你想要的渲染库（例如 React 等）。上面的第一个点说函数（因此协程）在 JavaScript 中非常多才多艺。如果我们希望，我们可以很容易地回到一个已知的范例。例如，我们使用[lit-html](./todo)来获得一个声明式视图，而不是一堆命令式代码：
- en: '[PRE2]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'you can draw the template into a function:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将模板绘制成一个函数：
- en: '[PRE3]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And compose with a new higher order function:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 并与一个新的高阶函数组合：
- en: '[PRE4]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'All right, we are on familiar ground: our component is now a simple function
    of the state'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们现在处于熟悉的领域：我们的组件现在是状态的一个简单函数。
- en: '[PRE5]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Having an infinite rendering loop to model our component can actually be more
    interesting than it seems at first: you can have a state in the closure of that
    loop.'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的组件中建模无限渲染循环实际上比一开始看起来更有趣：你可以在该循环的闭包中拥有一个状态。
- en: 'If we first modify the higher-level `createComponent` function a little to
    bind the `render` function to the host element:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们首先稍微修改更高级别的`createComponent`函数，将`render`函数绑定到宿主元素：
- en: '[PRE6]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can now make the component trigger its own rendering:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使组件触发其自身的渲染：
- en: '[PRE7]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In frameworks like React, where you only have access to the equivalent of what
    is inside the loop, you rely on the framework extension points (the hooks in the
    case of React) to build this sort of mechanism, and have very little control over
    rendering scheduling.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在像 React 这样的框架中，你只能访问循环内部的等价物，你依赖于框架的扩展点（例如 React 中的 hooks）来构建这种机制，并且对于渲染调度几乎没有控制权。
- en: 'The component embeds its view and some logic at the same time. Again, we can
    easily decouple them so that we can reuse either the view or the logic: All we
    need to do is take advantage of the third property of coroutines mentioned in
    the introduction, and a simple delegation mechanism inherent to generators: `yield*`.'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 组件同时嵌入其视图和一些逻辑。同样，我们可以轻松解耦它们，以便可以重用视图或逻辑：我们只需要利用介绍中提到的协程的第三个属性，以及生成器固有的简单委托机制：`yield*`。
- en: '[PRE8]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This type of mixin is responsible for holding the state and triggering the
    rendering of any *view*. Rendering is left to the view thanks to **delegation**,
    while the state is passed whenever the view coroutine is paused and requires a
    new render:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此类 mixin 负责保存状态并触发任何*视图*的渲染。渲染交由**委托**处理，而状态则在视图协程暂停时传递，并需要进行新的渲染：
- en: '[PRE9]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Neat ! You can now use the “clickable” behaviour independently, on different
    views. In the same way, you can plug the view into a different controller logic,
    as long as it passes the expected data interface (`{ count: number | string}`):
    note how the data comes from the `yield` assignation.'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: '很棒！现在你可以独立使用“可点击”行为，应用在不同的视图上。同样，您可以将视图插入到不同的控制器逻辑中，只要它通过预期的数据接口（`{ count:
    number | string}`）即可：请注意数据是如何从`yield`赋值中获取的。'
- en: We will see more patterns like this in future articles.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的文章中，我们将会看到更多类似的模式。
- en: So far we have designed our component to be a function of the host. We can go
    further and ensure that the rendering routine is actually private to the host,
    so that the rendering code is encapsulated inside along with any potential behaviour
    enhancements (the `countClickable` mixin for example), while both remain reusable.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经设计了我们的组件作为宿主的一个函数。我们可以进一步确保渲染程序实际上是私有于宿主，以便渲染代码与任何潜在的行为增强（例如`countClickable`混合）一起封装在内，同时两者保持可重用。
- en: Let’s look at another way of modelling [custom elements](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements).
    To enhance your HTML document, you can teach the browser new ones using its registry
    and the `define` method.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一种[自定义元素](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements)建模的方式。为了增强您的HTML文档，您可以使用其注册表和`define`方法来向浏览器教授新元素。
- en: '[PRE10]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And then use the `hello-world` tag in the markup like any other regular HTML
    tag.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在标记中像使用任何其他常规HTML标签一样使用`hello-world`标签。
- en: '[PRE11]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Instead of using a class that extends the `HTMLElement` class (or any other
    valid built-in element class), we want the second argument to be a generator function.
    This means our custom `define` would need to turn the generator into a class.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再使用扩展`HTMLElement`类（或任何其他有效的内置元素类）的类。我们希望第二个参数是一个生成器函数。这意味着我们的自定义`define`需要将生成器转换为一个类。
- en: '[PRE12]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using a class expression, we create the custom element class on the fly. The
    `#loop` rendering routine is instantiated inside the constructor and advanced
    to its first `yield` point. Note that we pass the host as a parameter to the routine,
    although the routine is specifically bound to the host so that we could just use
    `this` inside the generator to refer to the host. This is a personal preference
    as I find the use of `this` in Javascript very error-prone.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类表达式，我们可以动态创建自定义元素类。`#loop`渲染程序在构造函数内实例化，并进入其第一个`yield`点。请注意，我们将宿主作为参数传递给程序，尽管程序专门绑定到宿主，因此我们可以在生成器内部使用`this`来引用宿主。这是一种个人偏好，因为我发现在JavaScript中使用`this`非常容易出错。
- en: When the `connectedCallback` is called (this happens when the component is mounted
    into the DOM). We call `next` again, which in our previous example corresponds
    to the first iteration of the loop. Then, whenever the component needs to be rendered
    (when `render` is called) again, we continue the loop.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`connectedCallback`时（当组件被挂载到DOM中时）。我们再次调用`next`，这在我们之前的示例中对应于循环的第一次迭代。然后，每当需要重新渲染组件（调用`render`时），我们继续循环。
- en: 'This is very interesting because we are able to match the different component
    lifecycles to a location within the generator function:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常有趣，因为我们能够将不同组件生命周期匹配到生成器函数的某个位置：
- en: '[PRE13]'
  id: totrans-split-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Yet, one important lifecycle remains to be implemented. When the component is
    unmounted, the `disconnectedCallbak` of the class definition is normally called,
    allowing us to run cleanup code and avoid memory leaks for example.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有一个重要的生命周期需要实现。当组件卸载时，通常会调用类定义的`disconnectedCallback`，允许我们运行清理代码，例如避免内存泄漏。
- en: In the generator we can force the exit of the loop into a `finally` clause.
    This is as simple as calling the loop’s `return` function instead of the usual
    `next`.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成器中，我们可以强制退出循环到一个`finally`子句中。这就像调用循环的`return`函数而不是通常的`next`一样简单。
- en: 'Altogether:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说：
- en: '[PRE14]'
  id: totrans-split-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This “linear” representation of the component and its lifetime makes things
    easier to reason about: there are no surprises when a callback or a hook is called,
    everything is read from top to bottom!'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这种关于组件及其生命周期的“线性”表示使得理解变得更加容易：当回调或钩子被调用时，没有什么会让人感到意外，一切都是从头到尾顺序阅读的！
- en: 'Before we conclude, we can illustrate the fourth point mentioned in the introduction:
    if you try to advance a generator function while it is already advancing, you
    will get an error. In the component world, this means that concurrent rendering
    is impossible by design!'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束之前，我们可以说明介绍中提到的第四点：如果尝试在生成器函数正在前进时推进它，将会出现错误。在组件世界中，这意味着并发渲染在设计上是不可能的！
- en: 'This code:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码：
- en: '[PRE15]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'will trigger an error `Uncaught TypeError: already executing generator`.'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: '将触发错误 `Uncaught TypeError: already executing generator`。'
- en: We have seen throughout this article that the functional nature of a generator
    combined with its intrinsic properties can be useful to build a very flexible
    and simple abstraction of UI component, with the ability to split behaviour and
    view into reusable bits, to maintain internal state or to have at reach all component
    lifecycles in the same place.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在整篇文章中看到，生成器的函数性质与其固有属性的结合可以用来构建非常灵活和简单的UI组件抽象，具有将行为和视图拆分为可重用部分的能力，维护内部状态或在同一位置方便地获取所有组件生命周期的能力。
- en: In [the next article](/posts/reactive-attributes), we will see how we can further
    improve and optimise our generator-to-class conversion.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在[下一篇文章](/posts/reactive-attributes)中，我们将看到如何进一步改进和优化我们的生成器到类的转换。
- en: </main>
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
