- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:28:58'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:28:58'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Rails 7.1 Introduced Validate Option For Enums | Saeloun Blog
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rails 7.1 引入了枚举的验证选项 | Saeloun 博客
- en: 来源：[https://blog.saeloun.com/2024/01/02/rails-enums-validate-option/](https://blog.saeloun.com/2024/01/02/rails-enums-validate-option/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.saeloun.com/2024/01/02/rails-enums-validate-option/](https://blog.saeloun.com/2024/01/02/rails-enums-validate-option/)
- en: An Enum is a data type that allows us to define a set of named constants. Rails
    7.1 brings a notable enhancement to enum handling by introducing the `:validate`
    option.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举是一种数据类型，允许我们定义一组命名常量。Rails 7.1 通过引入`:validate`选项，枚举处理得到了显著的增强。
- en: It will allow more flexible and robust validation of enum values within the
    ActiveRecord models.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许在 ActiveRecord 模型中更灵活和强健地验证枚举值。
- en: In this blog post, we’ll explore how this [change](https://github.com/rails/rails/pull/49100)
    affects our code and how the validations for enum values were handled in previous
    versions of Rails.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客文章中，我们将探讨这个[变更](https://github.com/rails/rails/pull/49100)如何影响我们的代码，以及在
    Rails 的早期版本中如何处理枚举值的验证。
- en: Before
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 之前
- en: In previous versions of Rails, if we assign an incorrect value to the enum then
    it used to raise an `ArgumentError`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Rails 的早期版本中，如果我们将一个不正确的值赋给枚举，则会引发`ArgumentError`。
- en: We can illustrate this by the following example.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下示例来说明这一点。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above snippet, we have a `Holiday` model with an enum `type` column which
    can take `national` or `regional` as valid holiday types.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的片段中，我们有一个带有枚举`type`列的`Holiday`模型，该列可以采用`national`或`regional`作为有效的节日类型。
- en: When we tried passing `optional` as a holiday type it raised an `ArgumentError`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试将`optional`作为一个节日类型传递时，它引发了一个`ArgumentError`。
- en: After
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 后
- en: Rails 7.1 introduced the `validate` option for enums. It will allow developers
    to enforce the validation checks before saving enum values.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Rails 7.1 引入了枚举的`validate`选项。它将允许开发人员在保存枚举值之前强制执行验证检查。
- en: 'Let’s try passing the `validate: true` to the above snippet and see the change
    introduced from this version.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们尝试将`validate: true`传递给上面的片段，并看看从这个版本引入的变化。'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can also pass additional validation options
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以传递其他验证选项
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If we don’t pass the `validate` option it will raise the `ArgumentError` as
    in the earlier versions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不传递`validate`选项，它会像早期版本一样引发`ArgumentError`。
- en: To know more about this feature, please refer to this [PR](https://github.com/rails/rails/pull/49100)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于这个功能的信息，请参考这个[PR](https://github.com/rails/rails/pull/49100)
