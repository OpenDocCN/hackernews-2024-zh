- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:13:25'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:13:25'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Emacs Info Expressions - Susam Pal
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Emacs Info 表达式 - Susam Pal
- en: 来源：[https://susam.net/emacs-info-expressions.html](https://susam.net/emacs-info-expressions.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://susam.net/emacs-info-expressions.html](https://susam.net/emacs-info-expressions.html)
- en: <main>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main>
- en: Emacs Info Expressions
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Emacs Info 表达式
- en: By **Susam Pal** on 12 Apr 2024
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由**Susam Pal**在 2024 年 4 月 12 日发布
- en: 'On `#emacs` IRC or Matrix channels, we often share references to the built-in
    Emacs documentation as Elisp expressions that look like this:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `#emacs` IRC 或 Matrix 频道中，我们经常通过 Elisp 表达式分享内置的 Emacs 文档，看起来像这样：
- en: '[PRE0]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is another example:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个例子：
- en: '[PRE1]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is a common practice in the Emacs channels even though all of the Emacs
    manual is available on the world wide web too. For example, the section referred
    to in the above expression is available here: [GNU Emacs Manual: Word Search](https://www.gnu.org/software/emacs/manual/html_node/emacs/Word-Search.html).
    The reason for sharing Elisp expressions like this is likely partly tradition
    and partly convenience. Many Emacs users are logged into IRC networks via Emacs
    itself, so once the recipient sees an Elisp expression like the above one in their
    chat buffer, visiting the corresponding manual page is a simple matter of placing
    the cursor right after the closing parenthesis and typing `C-x C-e`.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Emacs 手册在全球网络上也是可以获得的，但在 Emacs 频道中这是一种常见的做法。例如，上述表达式引用的章节在这里可以找到：[GNU Emacs
    手册：单词搜索](https://www.gnu.org/software/emacs/manual/html_node/emacs/Word-Search.html)。分享
    Elisp 表达式的原因很可能部分是传统，部分是便利。许多 Emacs 用户通过 Emacs 自身登录到 IRC 网络，因此一旦接收者在其聊天缓冲区中看到类似上述的
    Elisp 表达式，访问相应的手册页面只是在光标移到右括号之后，输入 `C-x C-e` 的简单操作。
- en: But isn't it clumsy for the sender to type Elisp expressions like this merely
    to share a pointer to a section of a manual with others? Turns out, it is not.
    This is Emacs! So of course there are key-bindings to do this.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但是对发送者来说，仅仅为了与他人分享手册的某个部分而输入 Elisp 表达式不是很笨拙吗？事实证明并非如此。这是 Emacs！所以当然有快捷键可以做到这一点。
- en: Copy Info Node Name
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制 Info 节点名称
- en: 'Say, while helping another Emacs user we type `M-x info-apropos RET version
    control RET` and land on the section "Branches" and realise that this is the section
    that the person we are trying to help should read. Now when we are on this section,
    we can simply type `c` and Emacs will copy the name of the current Info node to
    the kill ring. This name looks like this:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，当我们帮助另一个 Emacs 用户时，我们键入 `M-x info-apropos RET version control RET`，并跳转到章节“Branches”，意识到这是我们试图帮助的人应该阅读的章节。现在当我们位于此章节时，我们只需键入
    `c`，Emacs 将复制当前 Info 节点的名称到剪贴板。这个名称看起来像这样：
- en: '[PRE2]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we can go to the `*scratch*` buffer (or any buffer), copy the node name,
    and complete the `info` expression manually. For example, we could type the following
    key sequence on a fresh new line to create the Elisp expression and copy it to
    the kill ring:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以进入 `*scratch*` 缓冲区（或任何缓冲区），复制节点名称，并手动完成 `info` 表达式。例如，我们可以在新的一行上键入以下键序列来创建
    Elisp 表达式并复制到剪贴板：
- en: '[PRE3]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On vanilla Emacs, the above rather long key sequence first types two double-quotes
    next to each other (`" "`), then moves the cursor back to go within the double-quotes
    (`C-b`), then pastes the text `(emacs) Branches` from the kill ring (`C-y`), then
    selects the pasted text (`C-a C-SPC C-e`), then surrounds it within parentheses
    (`M-(`), then inserts the text `info` just after the opening parentheses, and
    finally copies the resulting expression to the kill ring (`C-a C-k C-/`). The
    expression copied to the kill ring looks like this:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在原始的 Emacs 中，上述相对较长的键序列首先会连续输入两个双引号 (`" "`)，然后将光标移回双引号内部 (`C-b`)，接着粘贴来自剪贴板的文本
    `(emacs) Branches` (`C-y`)，然后选择粘贴的文本 (`C-a C-SPC C-e`)，接着在括号内部环绕它 (`M-(`)，然后在开括号后插入文本
    `info`，最后复制生成的表达式到剪贴板 (`C-a C-k C-/`)。复制到剪贴板的表达式看起来像这样：
- en: '[PRE4]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Can we avoid constructing the `info` expression manually and have Emacs do it
    for us? Turns out we can as we see in the next section.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能避免手动构建 `info` 表达式并让 Emacs 为我们做吗？事实证明我们可以，我们将在下一节中看到。
- en: Copy Info Expression
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制 Info 表达式
- en: 'I recently learnt from [Karthink](https://karthinks.com/) and [Mekeor Melire](https://mastodon.social/@mekeor@catgirl.cloud)
    that we can ask Emacs to create the entire `info` expression automatically for
    us. All we need to do is use the zero prefix argument with the `c` key. So when
    we are on section "Branches", if we type `C-0 c`, the following expression is
    copied to the kill ring:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最近我从[Karthink](https://karthinks.com/)和[Mekeor Melire](https://mastodon.social/@mekeor@catgirl.cloud)那里学到，我们可以请求Emacs自动为我们创建整个`info`表达式。我们所需做的就是在`c`键前使用零前缀参数。所以当我们在“Branches”章节时，如果输入`C-0
    c`，则以下表达式将复制到删除环中：
- en: '[PRE5]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'I should have known this because indeed while we are in the Info documentation
    browser, if we type `C-h k c` to describe the key sequence `c`, we see the following
    documentation:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我本应该知道这一点，因为确实当我们在Info文档浏览器中时，如果键入`C-h k c`来描述键序列`c`，我们会看到以下文档：
- en: '[PRE6]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So indeed Emacs has a convenient key sequence to create the complete `info`
    expression for the current Info node. The person who receives this `info` expression
    can visit the corresponding section of the manual simply by evaluating it. For
    example, after copying the expression in Emacs, they could simply type `C-y C-x
    C-e` to paste the expression into a buffer and evaluate it immediately. Alternatively,
    they might want to type `M-: C-y RET` to bring the `eval-expression` minibuffer,
    paste the expression, and evaluate it.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: '确实，Emacs确实有一个方便的按键序列来为当前Info节点创建完整的`info`表达式。接收此`info`表达式的人只需评估它即可简单地访问手册的相应部分。例如，在Emacs中复制表达式后，他们可以简单地输入`C-y
    C-x C-e`将表达式粘贴到缓冲区并立即评估它。或者，他们可能想要输入`M-: C-y RET`来打开`eval-expression`迷你缓冲区，粘贴表达式并进行评估。'
- en: </main>
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
