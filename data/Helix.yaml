- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-29 12:48:04'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 12:48:04
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Helix
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Helix
- en: 来源：[https://helix-editor.com/news/release-24-03-highlights/](https://helix-editor.com/news/release-24-03-highlights/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://helix-editor.com/news/release-24-03-highlights/](https://helix-editor.com/news/release-24-03-highlights/)
- en: Release 24.03 Highlights
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布 24.03 版本的亮点
- en: 30 March 2024
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2024 年 3 月 30 日
- en: The Helix 24.03 release has arrived! First, a very big *thank you* to everyone
    who made this release possible. This release saw changes from 125 contributors.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: Helix 24.03 版本来啦！首先，非常感谢所有参与此次发布的 125 名贡献者。
- en: New to Helix? Helix is a modal text editor with built-in support for multiple
    selections, Language Server Protocol (LSP), tree-sitter, and experimental support
    for Debug Adapter Protocol (DAP).
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Helix 还不熟悉？Helix 是一个带有内置多选功能、语言服务器协议（LSP）、tree-sitter 支持以及实验性调试适配器协议（DAP）的模态文本编辑器。
- en: Let's check out this release's highlights.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个版本的亮点。
- en: Amp-like jumping
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类似于 Amp 的跳转
- en: Jumping features are popular in the (Neo)Vim plugin space and there are even
    plugins to add the same functionality to other tools like browsers. They allow
    you to move your selection efficiently across even large parts of the view, like
    you could by clicking with a mouse, but by entering "labels" instead. 24.03 introduces
    jumping commands inspired by the [Amp editor](https://github.com/jmacdonald/amp)'s
    [jump mode](https://amp.rs/docs/usage/#jump-mode). Press `gw` to add the jump
    labels and then enter one of the labels to jump to the word under that label.
    Using `gw` in select mode (`v`) extends the selection.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在（Neo）Vim 插件空间中，跳转功能非常流行，甚至有插件将相同功能添加到其他工具（如浏览器）中。它们允许您通过输入 "标签" 的方式，有效地在视图的大部分区域中移动选择，就像您通过鼠标点击一样。24.03
    版本引入了受 [Amp 编辑器](https://github.com/jmacdonald/amp) 的 [跳转模式](https://amp.rs/docs/usage/#jump-mode)
    启发的跳转命令。按下 `gw` 添加跳转标签，然后输入一个标签以跳转到该标签下的单词。在选择模式 (`v`) 中使用 `gw` 可扩展选择。
- en: In the past, Helix has only been able to toggle line comments like `//` and
    `#` and languages like OCaml have been left with workarounds like a "line" comment
    token of `(*`. In 24.03 Helix can now toggle block comments as well. Use `C-c`
    or `<space>c` to smartly add or remove line or block comments around the current
    selection based on the language's comment token configuration, `<space>c` to toggle
    block comments around the current selection, or `<space><A-c>` to toggle only
    line comments on the current line.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，Helix 只能切换行注释，如 `//` 和 `#`，而像 OCaml 这样的语言则使用了像 `(*` 这样的 "行" 注释令牌的变通方法。在
    24.03 版本中，Helix 现在还可以切换块注释。使用 `C-c` 或 `<space>c`，根据语言的注释令牌配置智能地在当前选择周围添加或删除行或块注释，使用
    `<space>c` 在当前选择周围切换块注释，或使用 `<space><A-c>` 在当前行上仅切换行注释。
- en: Improvements to tree-sitter injections
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: tree-sitter 注入的改进
- en: Helix uses [`tree-sitter`](https://github.com/tree-sitter/tree-sitter) incremental
    parsing for syntax highlighting, textobjects, indentation and some motions and
    commands. 24.03 improves how we handle *[injections](https://tree-sitter.github.io/tree-sitter/syntax-highlighting#language-injection)*
    - a powerful tree-sitter feature for parsing documents with multiple languages.
    For example you might have JavaScript, CSS or other languages within a `<script>`
    or `<style>` tag in HTML. The HTML parser doesn't need to know how to parse all
    of these languages. Instead it can *inject* JavaScript or CSS parsers to handle
    the `<script>` or `<style>` tag contents.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: Helix 使用 [`tree-sitter`](https://github.com/tree-sitter/tree-sitter) 增量解析进行语法高亮显示、文本对象、缩进以及一些动作和命令。24.03
    版本改进了我们处理 *[injections](https://tree-sitter.github.io/tree-sitter/syntax-highlighting#language-injection)*
    的方式——这是一种强大的 tree-sitter 功能，用于解析包含多种语言的文档。例如，在 HTML 的 `<script>` 或 `<style>` 标签中可能包含
    JavaScript、CSS 或其他语言。HTML 解析器无需了解如何解析所有这些语言，而是可以 *注入* JavaScript 或 CSS 解析器来处理
    `<script>` 或 `<style>` 标签的内容。
- en: One of these improvements is to the `:tree-sitter-subtree` command that displays
    an S-expression of the syntax tree under the cursor. 24.03 shows the injection
    layer under the selection instead of only the root layer. For example in this
    asciicast we now show the syntax tree for the JavaScript parts of the document
    while in the past we only showed the HTML part of the tree.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一项改进是 `:tree-sitter-subtree` 命令，它显示光标下的语法树的 S 表达式。24.03 版本显示选择区域下的注入层，而不仅限于根层。例如，在这个
    asciicast 中，我们现在展示文档中 JavaScript 部分的语法树，而过去我们只展示 HTML 部分的语法树。
- en: The other big improvement is to the tree-sitter motions. `A-o` (alt + o) expands
    the selection to the parent node of the syntax tree node covered by the current
    selection. `A-i` shrinks to the child node and `A-n` and `A-p` go to the *n*ext
    and *p*revious nodes, respectively. Previously these commands only worked on the
    root layer (for example HTML in the asciicast) but they now find the injection
    layer that contains the selection and move along that layer's syntax tree. Internally
    we organize injection layers into a tree-like structure so that these motions
    can switch layers when needed.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重大改进是对 tree-sitter 动作的改进。`A-o` (alt + o) 将选择扩展到当前选择所覆盖的语法树节点的父节点。`A-i` 缩小到子节点，`A-n`
    和 `A-p` 分别移动到下一个和上一个节点。以前这些命令只在根层（例如 asciicast 中的 HTML）上工作，但现在它们可以找到包含选择的注入层，并沿着该层的语法树移动。在内部，我们将注入层组织成类似树的结构，以便这些动作在需要时可以切换层。
- en: Stay tuned for future changes that improve injections, like finding textobjects
    within injected content.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意未来的改进，比如在注入内容中查找文本对象。
- en: Internal improvements
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内部改进
- en: 24.03 also saw major internal improvements. The first comes from a new "event
    system" - a system built around Tokio channels and tasks that allows different
    parts of the Helix codebase to communicate with one another. The event system
    also adds generic ways to debounce and run tasks in background threads so we can
    prevent locking up the UI. Some parts of the code base have already been migrated
    to the event system like LSP completion and signature-help. In 24.03 you'll notice
    that LSP completion doesn't automatically pop up after just navigating around
    in insert mode, for example with arrow keys. It's now hooked into document changes
    instead, so it can smartly pop up when you start changing a document rather than
    every time the editor goes idle.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 24.03 版本还看到了重大的内部改进。首先是来自新的“事件系统” - 这是围绕 Tokio 通道和任务构建的系统，允许 Helix 代码库的不同部分进行通信。事件系统还增加了通用的去抖动和在后台线程中运行任务的方式，因此我们可以避免
    UI 的锁定。代码库的部分已经迁移到事件系统，如 LSP 完成和签名帮助。在 24.03 版本中，你会注意到，例如使用箭头键在插入模式下导航时，LSP 完成现在不会自动弹出。相反，它现在是钩子到文档更改事件中，因此它可以在你开始更改文档时智能地弹出，而不是每次编辑器空闲时。
- en: The other major improvement to be excited for is the general replacement of
    the `regex` crate with [`regex-cursor`](https://github.com/pascalkuthe/regex-cursor),
    a streaming regex implementation compatible with [`ropey`](https://github.com/cessen/ropey),
    the rope crate we use to represent all documents. `regex-cursor` is capable of
    running on *discontiguous strings* - input that may not be collocated in memory.
    In a rope, different parts of the document might be stored separately internally.
    To use the `regex` API we needed to convert slices of the document to a regular
    Rust `String`, duplicating the memory footprint of that slice of the document.
    `regex-cursor` operates on the chunks of the rope instead, which greatly improves
    efficiency.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个令人兴奋的主要改进是将 `regex` crate 替换为 [`regex-cursor`](https://github.com/pascalkuthe/regex-cursor)，这是与
    [`ropey`](https://github.com/cessen/ropey) 兼容的流式 regex 实现。`regex-cursor` 能够在不连续的字符串上运行
    - 这些输入可能不在内存中相邻。在 rope 中，文档的不同部分可能在内部分开存储。为了使用 `regex` API，我们需要将文档片段转换为常规的 Rust
    `String`，从而增加了该文档片段的内存占用。`regex-cursor` 相反操作于 rope 的块上，这极大地提高了效率。
- en: Wrapping up
  id: totrans-split-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: As always, this is just the highlights from the 24.03 release. Check out the
    full [changelog](https://github.com/helix-editor/helix/blob/master/CHANGELOG.md#2404-2024-03-30)
    for the details.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如往常一样，这只是 24.03 版本发布的亮点。详情请查看完整的[更新日志](https://github.com/helix-editor/helix/blob/master/CHANGELOG.md#2404-2024-03-30)。
- en: Come chat about usage and development questions in the [Matrix space](https://matrix.to/#/#helix-community:matrix.org)
    and follow along with Helix's development in the [GitHub repository](https://github.com/helix-editor/helix/).
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎在 [Matrix 空间](https://matrix.to/#/#helix-community:matrix.org)讨论使用和开发问题，并跟随
    Helix 的发展在 [GitHub 仓库](https://github.com/helix-editor/helix/)中。
