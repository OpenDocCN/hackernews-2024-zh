- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:57:03'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:57:03'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'We Have to Start Over: From Atom to Zed'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'We Have to Start Over: From Atom to Zed'
- en: 来源：[https://zed.dev/blog/we-have-to-start-over](https://zed.dev/blog/we-have-to-start-over)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://zed.dev/blog/we-have-to-start-over](https://zed.dev/blog/we-have-to-start-over)
- en: 'We Have to Start Over: From Atom to Zed'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'We Have to Start Over: From Atom to Zed'
- en: '*After the [last conversation](/blog/why-the-big-rewrite) with Nathan, Max,
    and Antonio—Zed''s three co-founders—I still had quite a few questions to ask:
    why did you make the technological choices you did? How important is Rust to Zed?
    Did you consciously set out to own the technological stack the way you do now?
    How do you decide what to polish and build-once-and-for-all-time and what to ship
    faster?*'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*在上一次与Nathan、Max和Antonio的对话之后——Zed的三位联合创始人——我仍然有很多问题要问：你们为什么做出了这些技术选择？Rust对Zed有多重要？你们是否有意识地决定如今拥有技术栈？你们如何决定什么要打磨和一劳永逸地建设，什么要更快地发布？*'
- en: '*Lucky for me, they sat down with me again and answered my questions again.*'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*幸运的是，他们再次与我坐下来回答了我的问题。*'
- en: '*What follows is an editorialized transcript of an hour long conversation we
    had. I tried to preserve intent and meaning as much as possible, while getting
    rid of the uhms, the likes, the you-knows, and the pauses and course-corrections
    that make up an in-depth conversation.*'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*接下来是我们一小时深度对话的编辑版实录。我尽量保持原意和意义，同时去掉了嗯嗯、喜欢、你知道的、以及会话中的停顿和修正。*'
- en: '*(You can [watch the full conversation on our YouTube channel](https://www.youtube.com/watch?v=w894KLbapLw).)*'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*(你可以在我们的YouTube频道观看完整对话](https://www.youtube.com/watch?v=w894KLbapLw)。)*'
- en: '**Thorsten: The three of you have been working together for, what? Has it been
    10 years?**'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thorsten: 你们三个人一起工作了多久了？是10年吗？**'
- en: '**Nathan**: Ungefähr. [German for: "Something like that."]'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: Ungefähr. （德语，意为：“差不多是这样。”）'
- en: '**Max**: Yeah, something like that.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**Max**: 是的，差不多是这样。'
- en: '**Antonio**: I think 10 years sounds about right. 2014, yeah.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Antonio**: 我想大约是10年。2014年，是的。'
- en: '**Thorsten: [Atom](https://en.wikipedia.org/wiki/Atom_(text_editor)) — that
    was 10 years ago. You worked together on Atom and then said "we''re building Zed."
    It''s pretty clear that you have a vision for what you want to build. And you
    also made some really distinct technological choices. You use Rust, it''s GPU-accelerated,
    CRDTs. I''m wondering: how much are these technological choices are tied-in with
    the vision for Zed? How big of a role does the technology play?**'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thorsten: [Atom](https://en.wikipedia.org/wiki/Atom_(text_editor)) — 那是10年前。你们共同在Atom上工作，然后说“我们要建立Zed。”很明显你对想要构建的东西有一个愿景。你还做了一些非常独特的技术选择。你使用Rust，它支持GPU加速，CRDTs。我在想：这些技术选择与Zed的愿景有多大的关联？技术在其中扮演了多大的角色？**'
- en: '**Nathan**: I mean, from my perspective, the vision for Zed is just a more
    refined and fleshed out version of the original vision for Atom, which just fell
    short due to the technical choices we made in my mind and the level of technical
    maturity that I think all of us had when we started Atom.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: 我的看法是，对于Zed的愿景，从我来看，它只是Atom最初愿景的一个更精细和充实的版本，因为我认为我们在开始Atom时所做的技术选择以及技术成熟度水平都有所不足。'
- en: But the goal I've always had is a lightweight editor that is minimal that I
    love using that feels like a text editor, but has the power of an IDE when needed,
    without all of the slowness in the experience and kind of heaviness in the UI,
    but still powerful. That was very early on what I wanted. And for it to be extensible.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但我一直以来的目标是一个轻量级的编辑器，简约而我喜欢使用的，感觉像文本编辑器，但在需要时具有IDE的功能，而不会在体验上感到缓慢和UI上的沉重感，但仍然强大。这早期就是我想要的。并且要具备可扩展性。
- en: You know, I remember using Emacs and thinking it was so cool that you could
    extend it, but you're sort of operating at the character level. So that was part
    of the original vision too and now Max has achieved that with [Tree-sitter](https://tree-sitter.github.io/tree-sitter/).
    You know, basically scriptability. We're not scriptable yet, but we'll get there.
    But when we are, we'll have access to a richer representation of the text than
    just looping over characters or whatever I was doing in Emacs. I mean, they probably
    have that now as well, right? Because Max wrote tree-sitter.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，我记得使用Emacs，觉得它很酷，你可以扩展它，但你在字符级别上操作。所以那也是最初的愿景的一部分，现在Max通过[Tree-sitter](https://tree-sitter.github.io/tree-sitter/)实现了。你知道，基本上是可脚本化的。我们现在还不能脚本化，但我们会到达那个地步。但当我们可以时，我们将拥有比仅仅在字符或者在Emacs中做的任何事情更丰富的文本表示。我想，他们现在可能也有这个功能，对吧？因为Max写了tree-sitter。
- en: '**Max**: They do, I hear.'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**Max：听说他们确实有。**'
- en: '**Nathan**: So that''s cool. But anyway, that was all part of the vision. And
    it just didn''t pan out with Atom. I mean, when Chris hired me to work on Atom,
    I almost didn''t join [meaning: join GitHub to work on Atom] because I was afraid
    of using web tech and that it wouldn''t be able to get there.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan：所以这很酷。但无论如何，那都是愿景的一部分。但事实证明，在Atom中并没有实现。我的意思是，当Chris聘请我来工作Atom时，我几乎没有加入[意味着：加入GitHub来工作Atom]，因为我害怕使用web技术，担心它不能达到预期的效果。'
- en: But to be honest, I don't know that whatever I had at my disposal at the time
    would have gotten us any better because Rust didn't exist back then. So it would
    have been C, C++. I don't know, it would have been really hard to do something
    native at the time we created Atom. And I don't think my skills were in place
    on just fundamental algorithms, et cetera, that are critical to text editing.
    And C++ would have really slowed me down in my learning there. So I think it happened
    how it needed to happen.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但老实说，我不知道当时我可以使用的东西是否会更好，因为当时没有Rust。所以只能用C，C++。我不知道，当我们创建Atom时，在基础算法等方面，我可能会遇到困难。而且在学习文本编辑的基本算法时，C++可能会让我进展缓慢。所以我觉得事情发生的方式是必须发生的。
- en: We got to a certain point with Atom. It was 2017 when we'd shipped [Teletype](https://github.com/atom/teletype)
    and it felt like, okay, it's no longer our own ignorance holding us back, it really
    is like the platform holding us back at this point. That's really how it was starting
    to feel. Just the fact that in JavaScript, an array in JavaScript is... You think
    you have an array of objects, but you really have an array of pointers to objects.
    So every single time you're walking over that, you're chasing it down. You have
    no control over memory. There are garbage collector pauses that are just happening
    that you have no control over. You just look at the profile of the fricking thing.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Atom到达了一个特定的阶段。到了2017年我们发布了[Teletype](https://github.com/atom/teletype)，感觉，好吧，不再是我们自己的无知在阻碍我们，实际上是平台在阻碍我们到了这一点。这确实是开始感觉的方式。就在JavaScript中，JavaScript中的数组...你以为你有一个对象数组，但实际上你有一个指向对象的指针数组。所以每次你遍历它，你都在追踪它。你无法控制内存。有一些垃圾收集器暂停正在发生，你无法控制。你只是看着这个该死的东西的概要。
- en: '**Thorsten: When you were working on Atom, was there a specific point at which
    you said "oh, I wish we would have built it with X"? Or was it an accumulation
    of paper cuts? Antonio was nodding right now.**'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thorsten：在你工作Atom时，是否有特定的时刻你曾说“哦，我希望我们用X来构建它”？还是一直有小问题积累成了大问题？安东尼奥现在点头了。**'
- en: '**Antonio**: Speaking of 10 years of working on this thing: I remember one
    of my first projects in Atom — I don''t know if you remember this, Nathan — was
    speeding up line layout. Basically, we were seeing line layout being very slow.
    And I remember trying rendering lines in an iframe. And I remember using Canvas,
    measured text, and all these APIs that were... I don''t know, the Canvas API wasn''t
    quite the same as the browser API, so you couldn''t really measure text correctly.
    The iframe stuff had some other weird problem.'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**安东尼奥：说到在这个项目上工作了10年：我记得在Atom的我的第一个项目之一 —— 我不知道你还记得不，Nathan —— 就是加速行布局。基本上，我们发现行布局非常慢。我记得尝试在iframe中渲染行。我记得使用Canvas，测量文本，和所有这些API...我不知道，Canvas
    API和浏览器API不太一样，所以你无法正确测量文本。iframe的东西还有其他一些奇怪的问题。'
- en: My experience in Atom always felt like bending over backwards to try to achieve
    something that in principle should have been simple. Lay out some lines and read
    the position of the cursor at this spot in between these two characters. That
    seems fundamentally doable and yet it always felt like the tools were not at our
    disposal. They were very far away from what we wanted to do.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Atom中的经历总是让人觉得费尽周折，试图去做本来应该很简单的事情。布局一些行，并读取光标在这两个字符之间的位置。这似乎从根本上是可以做到的，但总是感觉工具不在我们的控制之中。它们离我们想要做的事情还差得很远。
- en: '**Nathan**: It was a nightmare. I mean, the ironic thing is that we created
    Electron to create Atom, but I can''t imagine a worse application for Electron
    than a code editor, I don''t know. For something simpler, it''s probably fine,
    the memory footprint sucks, but it''s fine. But for a code editor you just don''t
    have the level of control I think you need to do these things in a straightforward
    way at the very least. It''s always some... backflip.'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: 那真是个噩梦。我是说，讽刺的是我们创建Electron是为了创造Atom，但我想象不出还有比用Electron来做代码编辑器更糟糕的应用了。对于一些更简单的东西，也许还行，内存占用确实很糟糕，但勉强能用。但对于代码编辑器来说，你根本无法像我认为你需要的那样直截了当地做这些事情。总是要费尽周折。'
- en: 'So at some point in 2017, I remember sitting there, writing in Atom in my journal
    — that was the evening when I thought: we have to start over. We have to start
    over, this isn''t working and we''re never going to get this where we want it
    to go. VS Code has done an admirable job of getting it as far as it''s gonna go.
    There''ll be incremental improvements in the tech, I''m sure, but I just wanted
    more.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在2017年的某个时候，我记得坐在那里，在我的日记本Atom中写字 —— 那个晚上，我想到了：我们必须重新开始。我们必须重新开始，这样行不通，我们永远也达不到想要的目标。VS
    Code在让它走到了尽头时做了令人钦佩的工作。我相信技术会有增量改进，但我只是想要更多。
- en: 'So at that point it was: okay, what should we do? And I''d been watching Rust,
    I''d seen some of [Raph Levien](https://raphlinus.github.io/)''s writing about
    Rust. And at the time this seemed like the only viable path to kind of overcome
    some of these obstacles. And it started as: what if we just write the core of
    this thing in Rust and we keep Electron as the presentation layer?'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以那时候的情况是：好的，我们应该怎么做呢？我一直在关注Rust，看过[Raph Levien](https://raphlinus.github.io/)关于Rust的一些文章。当时看来，这似乎是克服一些障碍的唯一可行路径。最初的想法是：我们是否可以用Rust编写这个东西的核心，同时保留Electron作为展示层呢？
- en: 'So it was just inch-by-inch that we came to the technological decisions we
    chose. Even after building the UI framework, giving up on Electron, we were using
    [Pathfinder](https://github.com/servo/pathfinder), which is like this really cool
    project that could do arbitrary presentation of SVGs basically, but it was too
    slow. So then I thought: okay, what if we do our own shaders? And then went and
    learned about signed distance fields.'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们就是一步一步地做出了我们选择的技术决策。即使在构建UI框架后，放弃了Electron，我们使用的是[Pathfinder](https://github.com/servo/pathfinder)，这是一个可以基本上做任意SVG展示的很酷的项目，但速度太慢了。所以我想：好的，我们要做自己的着色器？然后开始学习有关有符号距离场的知识。
- en: It was kind of funny. It was me not wanting to solve some more fundamental problem,
    but just being forced to do that by the unavailability of any other choice.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 真是挺有意思的。不是我不想解决更根本的问题，而是只能通过没有其他选择来迫使自己这么做。
- en: I shouldn't say it was only me, it wasn't only me. But this was from my perspective...
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我不应该说这只是我的想法，不仅仅是我。但这是从我的角度来看的……
- en: '**Thorsten: It sounds like the goal was always to be as fast as possible, as
    lightweight as possible. You tried to get there, but you couldn''t with the technology
    you had. But then Rust came along. And you didn''t start saying "we need a GPU-accelerated
    editor", but you started by saying you want the fastest possible editor and then
    GPU acceleration was one way to do that. Is that right?**'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thorsten: 听起来目标一直是尽可能快，尽可能轻量化。你们试图达到这个目标，但是用有的技术却做不到。然后Rust出现了。你们并不是从“我们需要一个GPU加速的编辑器”开始，而是从你们想要最快的编辑器开始，然后GPU加速是其中一种实现方式。是这样吗？**'
- en: '**Nathan**: Yeah, it was: we have this hardware in the computer and rather
    than negotiating what DOM nodes are in the DOM at a given moment, or all this
    nonsense, we could just literally be like, what color should this pixel be? Great.
    Okay, if we can program that hardware to decide what color every pixel on the
    screen should be in parallel, or as parallel as possible — we should probably
    use that if we want to be fast.'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: 是的，事实上，我们有这台计算机中的硬件，与其在某一时刻协商 DOM 节点在 DOM 中的情况，或者这些废话，我们可以直接问，这个像素应该是什么颜色？好的。如果我们可以编程决定屏幕上每个像素的颜色，或者尽可能并行地进行这样的决定
    — 如果我们想要快一点，我们应该使用这个。'
- en: But you know, we came there kind of grudgingly because I didn't know how to
    do any of it.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不过你知道的，我们有些勉强接受这一点，因为我根本不知道该怎么做。
- en: '**Thorsten: Now, this is kind of a loaded question, but I''ve been on the side
    hacking with Rust for the last three years and my feelings about it are complicated.
    But two weeks someone on Hacker News said that find-all-matches in Zed takes a
    second but in Sublime Text it''s really fast, closer to 200ms. So Antonio and
    I paired on that and he wrote code to optimize for this case of searching all
    the occurrences in a buffer. But the optimized code wasn''t "optimized" code:
    it didn''t use any dirty tricks, no SIMD, or something like that. It was high-level
    code, with the optimization being that it''s assumption was different: instead
    of doing things in a loop, one by one, its assumption was to find all results.
    We made a release build of that and it went from 1s down to 4ms.**'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thorsten: 现在，这有点是个棘手的问题，但我在过去三年里一直在用 Rust 进行开发，并且我的感受对它是复杂的。但两周前 Hacker News
    上有人说，在 Zed 中的 find-all-matches 需要一秒钟，但在 Sublime Text 中它非常快，接近 200 毫秒。于是我和 Antonio
    一起解决了这个问题，他编写了优化代码来处理缓冲区中的所有出现情况。但优化后的代码并不是“优化”代码：它没有使用任何不正当手段，没有 SIMD 或类似的东西。它是高级别的代码，其优化在于其假设不同：与其逐个循环执行任务，它的假设是找到所有结果。我们发布了这个优化后的版本，执行时间从
    1 秒降低到了 4 毫秒。**'
- en: '**Antonio**: Hahaha'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**Antonio**: 哈哈哈'
- en: '**Thorsten: And I sat there, looking at the 4ms, and... well, I thought: this
    is going to be a nice lunch break after this. But 4ms? With high-level code like
    that, that just called other internal APIs? Wow. So what I''m trying to ask is:
    Rust has these zero-cost abstractions — so you can use high levels of abstraction
    to build a text editor, but it still gives you this kind of performance. Do you
    think this is a specific thing about Rust, or do you think if you had just been
    a better C++ or C programmer, you could''ve done it in another language?**'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thorsten: 我坐在那里，看着 4 毫秒，然后……嗯，我想：这会是一个愉快的午餐休息时间。但是 4 毫秒？像那样调用其他内部 API 的高级别代码？哇。所以我想问的是：Rust
    有这些零成本抽象 — 你可以使用高层次的抽象来构建文本编辑器，但它仍然提供这种性能。你认为这是 Rust 的特定特性，还是如果你只是更好的 C++ 或者 C
    程序员，你也可以用其他语言做到这一点？'
- en: '**Antonio**: You probably could have done it with C and C++. I don''t know.
    I mean, tree-sitter is written in C, right, Max? So it is possible to write a
    complex library piece of software in C. Although I have to say anytime I look
    at the C code in tree sitter, I scream because it''s just too much for me. I don''t
    know.'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**Antonio**: 也许你本来可以用 C 和 C++ 来做。我不知道。我是说，tree-sitter 是用 C 写的，对吧，Max？所以在 C
    中写一个复杂的库或软件是可能的。不过每次我看 tree sitter 中的 C 代码时，我都会尖叫，因为对我来说太复杂了。我不知道。'
- en: Personally, yes, Rust is in a sweet spot. If it wasn't for the compile time
    being that slow — that's a thing that I really don't like about the language,
    but maybe it's our project that's too big, I don't know.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，是的，Rust 处于一个很好的位置。如果不是编译时间太慢的话 — 这是我真的不喜欢的一件事，但也许是因为我们的项目太大了，我不知道。
- en: But yes it is pretty cool that you can build on top of these abstractions and
    just rely on them. I mean, I don't know about zero cost — every abstraction has
    a cost, I guess.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但是确实很酷的是，你可以在这些抽象的基础上构建并仅仅依赖它们。我是说，我不确定零成本 — 每个抽象都有成本，我猜。
- en: 'But the thing with this project in general... With Atom it always felt like
    we didn''t know where to look for performance. With this, with Zed, it''s more:
    we could do this and we could do that and we could improve this. Just last week,
    Nathan and I were discussing how to improve the subtraction of the SumTree to
    perform batched insertion a lot faster.'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但总体而言，这个项目的问题在于…… 在 Atom 中，我们总是觉得不知道从哪里入手来提升性能。而在 Zed 中，我们可以做这个，也可以做那个，我们可以改进这个。就在上周，Nathan
    和我讨论了如何改进 SumTree 的减法以更快地执行批量插入。
- en: '**Nathan**: And then you implemented it, right?'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: 然后你实现了它，对吧？'
- en: '**Antonio**: Yeah. But it''s not shipped yet.'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Antonio**: 是的。但是还没有发货。'
- en: '**Nathan**: Great.'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: 太棒了。'
- en: '**Max**: I''ll say we did do a lot of C++ on Atom — we did a lot. We tried.
    And it worked, but it was just that there was a very meaningful distinction —
    obviously — where the boundary was between the JavaScript application code and
    the C++ library code. And people would talk about performance and say "just do
    this on a background thread, just don''t do it on the main thread" and we''d say
    "okay, we can do that" but that means this whole subsystem that is involved here
    needs to be dropped into C++ in order to share memory. Then build JavaScript APIs
    around that and figure out how it''s going to still look like idiomatic JavaScript
    code and preserve all these properties that it had from when it was written in
    JavaScript.'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**Max**: 我要说我们在 Atom 上确实做了很多 C++ — 我们做了很多。我们尝试过。而且它确实能工作，但是在 JavaScript 应用代码和
    C++ 库代码之间有一个非常明显的区别。人们谈论性能时会说“把这个放到后台线程执行，不要在主线程执行”，我们会说“好的，我们可以做到”，但这意味着这里涉及的整个子系统需要完全放到
    C++ 中以便共享内存。然后围绕此构建 JavaScript API，并确保它仍然看起来像是 JavaScript 代码的习惯用法，同时保留它在 JavaScript
    写作时的所有这些特性。'
- en: And only then could we actually move this one task to the background thread.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在那之后，我们才能真正将这个任务移到后台线程。
- en: It was such a difference between writing JavaScript code — that was scriptable
    and pluggable and overridable — and the C++ that had the core capability to have
    shared memory and multi-threading.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 写 JavaScript 代码与写 C++ 代码有很大的区别 — JavaScript 可以脚本化、可插拔和可覆盖 — 而 C++ 则具有核心能力，可以使用共享内存和多线程。
- en: '**Nathan**: And Rust is designed to be multi-threaded. I remember when I tried
    to learn Rust and I wanted to implement this [splay tree](https://en.wikipedia.org/wiki/Splay_tree)
    because the splay tree was a structure that we used a lot in Atom. Well, for a
    time — it had its era at least. I mean, it was actually pretty good for our needs,
    but it had parent pointers, it was very much a mutable structure.'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: Rust 被设计成多线程的。我记得当我尝试学习 Rust 并想要实现这个 [splay tree](https://en.wikipedia.org/wiki/Splay_tree)，因为
    splay tree 在 Atom 中使用得非常频繁。至少有一段时间是这样 — 它实际上非常适合我们的需求，但它有父指针，非常像一个可变结构。'
- en: 'And I tried to build that in Rust and the language fought me. And I thought:
    can you even build anything real in this language? I had serious doubts, actually.'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当我试图在 Rust 中构建这个时，这门语言与我作对。我想：这门语言真的能构建出任何真正的东西吗？其实我当时是有严重怀疑的。
- en: So I gave up for a while, then I tried again. And this time around I built a
    copy-on-write B-tree. And when I built it that way, it used `Arc`s and that meant
    it was inherently multi-threading friendly.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我放弃了一段时间，然后又尝试了一次。这次我构建了一个写时复制的 B 树。以这种方式构建，使用了 `Arc`，这意味着它天生支持多线程。
- en: 'And when I followed the dictates of the language and the borrower checker and
    did it the way Rust wanted me to do it, it was: oh, cool.'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当我按照语言和借用检查器的指示去做，按照 Rust 希望我做的方式去做时，感觉：哦，很酷。
- en: Now we have this way of representing [ropes](https://en.wikipedia.org/wiki/Rope_(data_structure))
    — which is the fundamental text storage structure in Zed — in a way where we can
    spawn a background thread, and it's O(1), it's just bumping an `Arc` to take that
    to a background thread and look at a snapshot, et cetera.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了这种表示 [ropes](https://en.wikipedia.org/wiki/Rope_(data_structure)) 的方法
    — 这是 Zed 中的基本文本存储结构 — 在这种方法中，我们可以生成一个后台线程，这是 O(1) 的操作，只需将一个 `Arc` 推送到后台线程，并查看快照，等等。
- en: It's not just about being native. I also think Rust brings to the table innovations.
    The language is designed to be used the way we're using it on multiple threads
    and at a low level.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅仅是关于本地化的问题。我也认为 Rust 带来了创新。这门语言被设计成在多个线程和低级别上使用。
- en: 'And frankly, I was just a little too much of a script kiddie I think to do
    well in C++. It always just annoyed me: these freaking files, jumping over here,
    all these arcane rules. And could a C++ master do what we did in Rust? Probably,
    but like I wasn''t gonna become that person.'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 坦率地说，我觉得我可能有点像一个脚本小子，不太适合在 C++ 中表现良好。总是让我感到烦恼：这些可恶的文件，跳来跳去，所有这些深奥的规则。一个 C++
    大师能做到我们在 Rust 中做的吗？可能可以，但我不打算成为那种人。
- en: '**Thorsten: So Antonio, you just mentioned that with JavaScript, you didn''t
    know where to look for performance. Max, you said, when you were using C++ or
    JavaScript, you felt these boundaries when you want to make something async. And
    now we heard about Rust — you can suddenly do stuff async on a background thread,
    you have less restrictions, you can move freely around.**'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thorsten**：所以 Antonio，你刚提到用 JavaScript 时，你不知道哪里能找到性能瓶颈。Max，你说，当你使用 C++ 或
    JavaScript 时，想要实现一些异步操作时会感到一些限制。现在我们听说 Rust — 你可以突然在后台线程上异步执行操作，有更少的限制，你可以自由移动。**'
- en: '**That reminds me of something you can actually see in the Zed code base: you
    own the whole stack. From tree-sitter doing the parsing to GPUI, the GPU-accelerated
    UI framework — there aren''t a lot of third-party dependencies in the code base.
    Some libraries, but not big building blocks.**'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**这让我想起了在 Zed 代码库中确实能看到的一些东西：你拥有整个栈。从做解析的 tree-sitter 到 GPU 加速的 UI 框架 GPUI，代码库中并没有很多第三方依赖。有一些库，但没有大型构建模块。**'
- en: '**How important is that for you? We own the full stack, top to bottom, we understand
    it top to bottom. Is that a conscious choice or did this happen by accident because
    Max built tree-setter and then you did this and now look at us, we rebuilt the
    whole thing.**'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**对你来说这有多重要？我们从顶到底完全掌握整个栈，完全理解它。这是有意识的选择还是因为 Max 构建了 tree-sitter，然后你做了这些，现在看看我们，我们重新构建了整个系统。**'
- en: '**Max**: I don''t know. I think it has trade-offs, but I so far it''s been
    pretty nice to be able to just... decide how we want things to work. Like right
    now: we want to have language extensions that use WASM. Tree-sitter didn''t have
    that but we added that to it.'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**Max**：我不知道。我认为这有一些权衡，但到目前为止，能够随心所欲地决定我们想要的工作方式还是相当不错的。比如现在：我们想要使用 WASM 的语言扩展。Tree-sitter
    本身并没有这个功能，但我们加了进去。'
- en: There's a million things like that. We don't want to be beholden to some UI
    framework that may not render text exactly the way we want, because we're a text
    editor and that matters a lot. But we can now go change that.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样的事情有很多。我们不想受限于可能无法完全按照我们希望方式呈现文本的某个 UI 框架，因为我们是文本编辑器，这很重要。但现在我们可以改变这一点。
- en: It doesn't feel like anything is sort off limits.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 感觉上并没有什么是禁忌的。
- en: '**Nathan**: One thing I''ll say: this was very informed by an experience earlier
    in my career with jQuery. jQuery was the hot thing and I learned jQuery. I remember
    [Yehuda](https://yehudakatz.com) coming to [Pivotal](https://en.wikipedia.org/wiki/Pivotal_Labs)
    and presenting on jQuery and I thought this is so cool. I was blown away by it.
    So early on, all the Atom code, believe it or not, was jQuery.'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**：我想说的是：这在我职业生涯早期与 jQuery 有关的经历非常影响我。jQuery 当时非常流行，我学习了 jQuery。我记得
    [Yehuda](https://yehudakatz.com) 来到 [Pivotal](https://en.wikipedia.org/wiki/Pivotal_Labs)，讲解
    jQuery，我觉得这太酷了。我被深深地震撼了。所以早期所有 Atom 的代码，信不信由你，全都是 jQuery。'
- en: 'And the funny thing was though, having learned jQuery, because everybody told
    me, "oh, the reason you use jQuery is it abstracts over all the differences in
    the browser APIs", et cetera. I never really questioned that. But then I remember
    the day that I just sat down and read the freaking DOM APIs. And I thought: you
    know what, this is actually fine. Maybe there were some missing features or something
    — and I don''t want to shit on jQuery, I think it has its role — but what I came
    away with was that if I don''t have an abstraction that''s nailing almost 100%
    of my needs then I might not want to have that abstraction and go to the level
    below, understand the level below it fully, and do what I need to do.'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 而有趣的是，尽管学习了 jQuery，因为每个人都告诉我，“哦，你使用 jQuery 的原因是它可以在浏览器 API 的所有差异上提供抽象”，等等。我从来没有真正质疑过这一点。但后来有一天我坐下来只是简单地阅读了这些
    DOM API。我觉得：你知道吗，这其实挺好的。也许会有一些缺失的功能或者其他什么问题 — 我不想贬低 jQuery，我认为它有它的作用 — 但我得出的结论是，如果我没有一个几乎能够满足我所有需求的抽象，那么我可能不想要这种抽象，而是去理解下面更底层的东西，并完全理解并做我需要做的事情。
- en: That was kind of what happened with GPUI. There were some UI frameworks in flight
    when we started on a GPUI, in 2019, but none of them did what I knew we would
    need to do. And I didn't understand them.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 GPUI 发生的事情。当我们在 2019 年开始开发 GPUI 时，已经有一些 UI 框架在进行中，但没有一个能满足我知道我们需要的功能。我也不理解它们。
- en: 'But I knew I could come to understand quite easily the fundamental primitives
    that we''re going to be relying on — the language, the graphics framework. I knew
    we could learn those things and I knew we''ve written a lot of code. If I can
    build a system that I can understand and learn from, then I know that I can do
    what we need to do if it''s fundamentally possible on the underlying system. And
    so really it was — at least for GPUI — a survival strategy: I need to understand
    this and the best way to understand it is to build it.'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 但我知道我可以很容易地理解我们将依赖的基本原语 — 语言、图形框架。我知道我们可以学习这些东西，而且我们已经写了很多代码。如果我能建立一个我可以理解和学习的系统，那么我知道如果在底层系统上基本上是可能的，我们可以做我们需要做的事情。所以，对于
    GPUI 至少是一种生存策略：我需要理解这一点，而理解它的最佳方法就是建立它。
- en: '**Thorsten: What are the downsides of that? Max, you said there''s trade-offs.**'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**托尔斯滕**: 那有什么缺点？马克斯，你说有权衡。'
- en: '**Nathan**: Takes forever. It''s slow.'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**内森**: 花费太长了。很慢。'
- en: '**Antonio & Max**: [laughing]'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**安东尼奥 & 马克斯**: [笑]'
- en: '**Antonio**: It''s also tricky to onboard people. You''re not using the X framework
    out there that everybody knows, you have to teach this code base from scratch
    — you know, 300,000 lines of code. That''s a downside.'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**安东尼奥**: 引导新人也很棘手。你不能用所有人都熟悉的 X 框架，必须从头开始教这个代码库 — 你知道，30 万行代码。这是一个缺点。'
- en: But the cool thing is that while this is a downside, at the same time there's
    somebody else who has written that code and can explain it to the new person.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 但很酷的是，虽然这是一个缺点，同时也有其他人已经写过那些代码，并且可以向新人解释它。
- en: It might be slower, but again, you're retaining control.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 或许会更慢，但再次，你保留了控制权。
- en: '**Nathan**: I think it accumulates. The advantages accumulate, and the downsides
    depreciate. Someone just built [another app on GPUI](https://github.com/MatthiasGrandl/loungy),
    so now we have another stakeholder. The cost of having owned it, we''re going
    to gradually write off over time, and the costs and the upsides of owning it are
    going to start to kick in.'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**内森**: 我认为这是累积的。优势会累积，而劣势会折旧。有人刚刚在 GPUI 上构建了 [另一个应用](https://github.com/MatthiasGrandl/loungy)，所以现在我们有另一个利益相关者。拥有它的成本，我们将逐步摊销，拥有它的成本和好处将开始显现。'
- en: '**Thorsten: Sometimes people say: I only build it once and then I never have
    to touch it again. And the opposite of that might be: you can''t predict the future,
    [worse is better](https://en.wikipedia.org/wiki/Worse_is_better), and so on.**'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**托尔斯滕**: 有时人们会说：我只建立一次，然后再也不用碰它。而与之相反的可能是：你无法预测未来，[更差也更好](https://en.wikipedia.org/wiki/Worse_is_better)，等等。'
- en: '**And what you just said, that it''s slower to build it all yourself, there''s
    a ring of "build it once and do it right for our use case" to it: only the perfect
    abstraction for what we want to do. At the same time, there''s this sense of urgency
    that you all have. I mean, I joined four weeks ago and I do feel like we''re moving
    fast and we''ve got so much to do.**'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**刚才你说的，自己建立一切会更慢，这里有一种“只为我们的使用场景构建一次并正确完成”的感觉：为我们想做的事情只需完美的抽象。与此同时，你们都有这种紧迫感。我的意思是，我四周加入，我觉得我们在快速前进，而且我们有很多事情要做。**'
- en: '**How do you balance that? How do you have this huge vision for what you want
    to build, and balance that with saying "I''m gonna write shaders, I''m gonna perfect
    how we render drop shadows or whatever"?**'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**你如何平衡这一点？你如何拥有你想要建立的巨大愿景，并在其中平衡说“我将编写着色器，我将完善我们如何渲染投影阴影或其他东西”？**'
- en: '**Nathan**: Build what you need, only what you need, no more, no less, and
    build that as well as you can within reason. And then when it turns out to not
    be quite what you needed, be willing to revisit it after you''ve learned. But
    I think if you''re laying down every brush stroke with intentionality and care,
    and you''re not wasting time speculating about what you might need, then... for
    me, that''s always worked out. Sometimes it takes a little while though.'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**内森**: 只建立你需要的东西，仅此而已，不多也不少，并且尽可能地构建得更好。然后，当事实证明它不完全是你需要的时候，在学习后愿意重新审视它。但我认为，如果你每一步都是有意义和谨慎地进行，而不是浪费时间推测你可能需要什么，那么……对我来说，这总是有效的。尽管有时可能需要一点时间。'
- en: '**Antonio**: I would add on top of that: it''s a gradient. It''s not like everything
    needs to be built perfectly. Or at least that''s how I feel about much of the
    code we write. If we''re writing stuff in GPUI, well, the whole app depends on
    the GPUI, that better be perfect. Or the sum tree. It''s this data structure that''s
    used everywhere in the code base. That one we really wanna nail, because it has
    to be fast.'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**Antonio**: 我要补充一点：这是一个渐进过程。并不是说所有东西都必须完美地构建。或者至少我对我们写的大部分代码是这样感觉的。如果我们在写GPUI的东西，好吧，整个应用程序都依赖于GPUI，那就最好完美无瑕。或者是SumTree。这是代码库中到处都在使用的数据结构。我们真的想要把它搞定，因为它必须快速。'
- en: It has to work perfectly so that we can build on top of it, right? And that
    is reflected, also in the testing that we do on those things. The SumTree is randomized-tested
    because we want to make sure that all those edge cases work perfectly.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 它必须完美地工作，这样我们才能在其基础上构建，对吧？这也反映在我们对这些事物进行的测试中。SumTree是随机测试的，因为我们希望确保所有这些边缘情况都能完美工作。
- en: 'Now, as you move towards the edge— that performance improvement that you alluded
    to, Thorsten, we didn''t spend three hours gold plating it, right? It was like:
    whatever gets the job done, it''s pretty much at the edge. I mean, we should feel
    good about the code, we should always strive to write the code as best as we can,
    but we don''t need to gold plate it.'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你朝边缘推进时——你所提到的性能改进，Thorsten，我们并没有花三个小时打磨它，对吧？这就像：无论如何完成任务，基本上就在边缘。我的意思是，我们应该对代码感到满意，我们应该始终努力尽可能地写出最好的代码，但我们不需要过度打磨它。
- en: It's a gradient. The more core something is, the more it deserves thought and
    quality.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个渐变过程。某件事情对核心越重要，它就越值得思考和质量。
- en: '**Nathan**: And my favorite code to write is the code I''ve earned myself the
    right to write. Whoa, that''s a lot of homophones.'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: 我最喜欢编写的代码是那些我有权力编写的代码。哇，这有很多同音词。'
- en: With GPUI I had so much fun writing it that I almost felt like guilty about
    it. But I have earned the right to write this code because I wrote the first version,
    I lived with it, I pushed it forward, I made the compromises when I needed to
    make them to make things right.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 用GPUI编写它时我玩得很开心，以至于我几乎觉得有点内疚。但我有权利编写这段代码，因为我写了第一个版本，我与之共处，我推动了它前进，当需要时我做出了妥协以使事情变得正确。
- en: But now is the moment where we can make this better. And it makes sense to make
    this better. And I'm informed. I think a lot of times when people talk about like
    rewriting— if you're rewriting something someone else wrote, be doubly suspicious
    of yourself.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在是我们可以做得更好的时候。而且这样做是有意义的。而且我是知情的。我认为很多时候，当人们谈论像重写这样的事情时——如果你正在重写别人写的东西，对自己要更加怀疑。
- en: 'But if you wrote it and you''ve lived with it and you''ve put in the work...
    That''s also something to be said: don''t let perfectionism get in the way of
    learning.'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果你写了它，你与之共处，你付出了努力…… 这也有一些值得一说的地方：不要让完美主义妨碍学习。
- en: '**Thorsten: If I were to take the three of you and... I don''t know what to
    throw at you that you couldn''t build, but say you''d have to build, I don''t
    know what — a PID controller for an airplane. Airplane software, there you go.
    Something like that.**'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thorsten: 如果我带着你们三个人……我不知道要对你们施加什么，你们不能搭建的，但是假设你们必须搭建，我不知道什么 —— 一个飞机的PID控制器。飞机软件，就是这样。**'
- en: '**Nathan**: Nuclear reactor control subsystem.'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: 核反应堆控制子系统。'
- en: '**Thorsten: You don''t know the domain and you don''t know yet how you''re
    going to build it and you don''t yet know which parts you''re going to need. Is
    that where you would say you''d need a different approach? Unlike in the editor,
    where you have a strong vision for what you want, you built a few before, so now
    you know which parts count. You know beforehand, GPUI is going to be important.
    So let''s take our time with it and gold-plate it as Antonio said.**'
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thorsten: 你不了解领域，你还不知道你将如何构建它，你还不知道你将需要哪些部分。这就是你会说你需要不同方法的地方吗？不像在编辑器中，你对你想要的有一个强烈的愿景，你之前搭建了几个，所以现在你知道哪些部分重要。你事先知道，GPUI将是重要的。所以让我们花点时间来打磨它，正如Antonio所说的那样。**'
- en: '**Max**: I mean, I don''t know if a nuclear reactor is a good example, but
    I do feel like if it was our first code editor, ... We *did* "worse is better".
    It wasn''t intentionally bad, but we took the kind of quicker, dirtier approach
    once and then kind of identified the things that were real pain points to build
    on top of, in their sort of worse-is-better form.'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**Max**: 我的意思是，我不知道核反应堆是不是一个好例子，但我确实觉得如果这是我们的第一个代码编辑器，...我们*确实*是“坏是更好”。这不是故意要糟糕，但我们曾采取更快、更脏的方法，然后识别出那些真正痛苦的地方来构建，以其更糟糕的形式。'
- en: But I do think, if for some reason Antonio and me and Nathan had to build a...
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 但我认为，如果由于某些原因，Antonio、我和 Nathan 不得不建立一个...
- en: '**Nathan**: Choose something less mission critical maybe?'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: 也许选一些不那么关键的东西？'
- en: '**Max**: ... a Shopify clone or something. We would probably have a different
    mindset about it. We wouldn''t know which pieces needed to be really highly honed.'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**Max**: ... 一个 Shopify 克隆或其他东西。我们可能会对此有不同的思维方式。我们不会知道哪些部分需要真正精雕细琢。'
- en: '**Nathan**: But if I *were* building a nuclear reactor control system, I would
    use a Byzantine fault-tolerant consensus algorithm and pit three teams against
    one another to compromise each other''s security and then make them come to consensus
    on all of it. But I don''t know how to do that.'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: 但如果我*真的*在建造核反应堆控制系统，我会使用拜占庭容错共识算法，让三个团队互相牵制对方的安全性，然后使它们在所有方面达成共识。但我不知道该怎么做。'
- en: '**Antonio**: There''s another example that''s less mission critical than a
    nuclear reactor, but where we didn''t know the data structure and we kind of took
    the time to learn it. It wasn''t always that the structure powering the buffers
    in Atom and in Zed today was a CRDT. There was a research period where Nathan
    and I read... I forget how many papers. A lot of them. And the approach we''re
    using right now with the CRDT — we still rewrote it two or three times — but the
    approach is more or less the same.'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**Antonio**: 还有一个例子，比核反应堆少了那么多关键任务的案例，但我们对数据结构并不了解，因此花了一些时间去学习它。Atom 和 Zed
    今天驱动缓冲区的结构并不总是 CRDT。在研究阶段，Nathan 和我读了...我忘记了有多少篇论文。很多。目前我们使用的 CRDT 方法——我们仍然重写了两到三次——但方法基本相同。'
- en: So I think there's a part of it that comes with experience. I feel like you
    tend to develop a sense of what you need to spend time on and what is more frivolous,
    less important.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我认为，这在经验中是有一部分的。我觉得你倾向于发展出一种感觉，知道需要花时间的事情和不那么重要的事情。
- en: Now, that said, we did rewrite the CRDT two or three times, but the research
    part, was important. I don't know.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，话虽如此，我们确实重写了 CRDT 两到三次，但研究部分很重要。我不知道。
- en: '**Nathan**: The funny thing is in the Atom that shipped, the buffer was an
    array of lines, a JavaScript array of strings. And in Zed, it''s a multi-thread-friendly
    snapshot-able copy-on-write B-tree that indexes everything you can imagine. Or
    everything we''ve needed. So we did worse is better.'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: 有趣的是，在发布的 Atom 中，缓冲区是一系列行的数组，JavaScript 字符串数组。而在 Zed 中，它是一个多线程友好的可快照复制写入
    B 树，可以索引你能想象到的一切。或者我们所需要的一切。所以我们采取了“坏是更好”的策略。'
- en: But starting over, would it be an array of lines again? Probably not because
    look at the look at the time bounds on that. And put a little more thought into
    it, but that — again — I learned that by like doing worse-is-better and then having
    it be really slow or problematic in edge cases that ended up mattering.
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 但重新开始，它会再次是一系列行的数组吗？可能不是，因为看看这些时间边界。再多考虑一下，但是——再次——我通过像“坏是更好”的方式学到了这一点，然后让它变得真的很慢或在边缘情况下有问题，这实际上很重要。
- en: '**Thorsten: So what are the most gold-plated parts of Zed?**'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thorsten**: 那么 Zed 最值得推崇的部分是什么？'
- en: '**Nathan**: GPUI is pretty gold-plated, I think, because we just rewrote the
    whole fricking thing.'
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: GPUI 看起来是相当完美的，我认为，因为我们刚刚重写了整个东西。'
- en: '**Antonio**: Good question.'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**Antonio**: 好问题。'
- en: '**Max**: I think what''s in the [`editor` crate](https://github.com/zed-industries/zed/tree/main/crates/editor),
    where there''s sort of the stack of different transforms that convert the raw
    text of the buffer into the lines that you see on screen, that expand the tabs
    and do the soft-wrapping and insert the block decorations and handle folds and
    stuff. All those layers have this uniform testing strategy where it''s randomized-tested
    with property testing. So I think they''re pretty gold-plated.'
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**Max**: 我认为[`editor` crate](https://github.com/zed-industries/zed/tree/main/crates/editor)中的内容，那里有一系列不同的转换，将缓冲区的原始文本转换为你在屏幕上看到的行，它们会展开制表符并进行软换行，插入块装饰并处理折叠等等。所有这些层都采用统一的测试策略，即通过属性测试进行随机测试。所以我认为它们非常经过推敲。'
- en: The multi-buffer too, where we sort of weave together the different excerpts
    of different buffers into one.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 多缓冲区也是如此，我们在其中将不同缓冲区的不同片段编织在一起。
- en: '**Nathan**: I would call them, um... I just wanted to suggest like an alternative
    substance for that part of the code base. I would say it was kind of plated and
    coated in blood.'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: 我想称它们为，嗯…… 我只是想建议代码库的那一部分使用一种替代物质。我会说它有点镀上了血液。'
- en: '**Antonio**: Ha! Blood plated.'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**安东尼奥**: 哈！镀血。'
- en: '**Thorsten: You mean the editor and the multi-buffer?**'
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thorsten: 你指的是编辑器和多缓冲区吗？**'
- en: '**Antonio**: Yeah.'
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**安东尼奥**: 是的。'
- en: '**Nathan**: Yeah. It''s randomized tests where we''ve spent literally the entire
    day in 2021, many days in a row, just debugging failures in these randomized tests
    that would find some weird edge case of this ornate— I mean, I wouldn''t say it''s
    ornate, but it''s complicated — stacking of different layers of transformation
    required to present things on screen. And so it''s just elbow grease, right? Find
    the edge cases and then figure out why they''re happening by reducing the log,
    which for a long time we just did manually.'
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: 是的。随机测试，我们在 2021 年的整天时间里，连续多天，只是在调试这些随机测试的失败，它们会发现一些关于这种复杂堆叠不同转换层的奇怪边缘情况
    —— 我不是说它很华丽，但是复杂 —— 用于在屏幕上呈现事物的不同层次。因此，这只是粗劳力，对吧？找出边缘情况，然后通过减少日志来弄清它们为何发生，长时间以来我们都是手动做的。'
- en: '**Thorsten: How did it feel when one of these bugs popped up? Did you have
    moments of panic when property testing threw a bug in our face and you thought
    "maybe this whole thing doesn''t work?" Or was it rather "well, it''s just another
    thing to polish down and if not, we rewrite this"?**'
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thorsten: 当其中一个 bug 突然出现时，你有过恐慌的时刻吗？当属性测试抛出一个 bug，你是否觉得“也许整个东西都不起作用了？”还是说“好吧，这只是另一件需要修整的事情，如果不行，我们重写这个”？**'
- en: '**Antonio**: Never panic, that''s the rule of randomized testing, never panic.
    I have a lot of faith in our capability as engineers, I really do, and maybe it
    might be that we have to rewrite the whole thing and the randomized test is telling
    us that, but it''s fine, we just learned something, back to the drawing board
    and redo it.'
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**安东尼奥**: 永远不要恐慌，这是随机测试的原则，永远不要恐慌。我对我们作为工程师的能力非常有信心，真的，也许我们必须重写整个东西，随机测试告诉我们这一点，但没关系，我们只是学到了一些东西，回到绘图板上重新来过。'
- en: '**Nathan**: What was scary was: how long is this going to take? I think Lee,
    our seed investor, was also asking us that at certain times. But he stuck with
    us and was patient because it took a while.'
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: 让人害怕的是：这要花多长时间？我觉得李，我们的种子投资者，在某些时候也在问我们这个问题。但他一直支持我们，耐心等待，因为确实花了些时间。'
- en: But that piece was written in Rust. If we f this up, the program is panicking.
    Goodbye, poof. It's not just like a stack trace gets thrown in the corner of the
    editor or something, no, it's done.
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: 但那段是用 Rust 写的。如果我们搞砸了，程序就会 panic。再见，噗。不仅仅是堆栈跟踪被扔到编辑器的某个角落，不，事情就这样结束了。
- en: So we knew how hard it was to get those layers right. And we knew that there
    was no other choice, but to get them right. But yeah, I remember, Antonio, remember
    working on soft wraps and that problem we came up against where we realized the
    primitive we needed was this ability to represent a patch and then to be able
    to compose these patches together — that was one moment where I was sweating a
    bit, thinking "are we gonna freaking figure this out?" and then Antonio figured
    it out.
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们知道，要做好这些层次有多难。我们也知道别无选择，只能做对它们。但是，是的，我记得，安东尼奥，记得我们在软换行上工作，以及我们遇到的问题，当我们意识到我们需要的基本元素是这种能够表示补丁并能够组合这些补丁的能力时
    —— 那时我有点出汗，想着“我们能搞定吗？” 然后安东尼奥搞定了。
- en: '**Antonio**: Yeah. But powering it all — you know, in terms of gold-plating
    — is again the sum tree. And even with that, there are some ideas on how to make
    it better, if we were to rewrite it.'
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**安东尼奥**：是的。但是支撑所有这些的——你知道，黄金镀层——又是一棵总和树。即使如此，如果我们重写它，还有一些改进的想法。'
- en: '**Nathan**: We were talking the other night about how dope it would be. And
    Antonio, you applied some of the ideas we talked about: being able to construct
    all these layers in a more streaming friendly way. And you did one optimization,
    which is gonna land on preview next week.'
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**内森**：我们前几天在谈论有多酷它会是。安东尼奥，你应用了我们讨论的一些想法：以更加流畅友好的方式构建所有这些层次。而且你做了一项优化，预览版将在下周发布。'
- en: '**Antonio**: Yeah, I need to open the PR for it still...'
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**安东尼奥**：是的，我还需要为此开放 PR……'
- en: '**Nathan**: To enable more streaming inputs so people don''t get zero feedback
    when they open a big file, but start actually loading things in, more efficiently
    — does that necessitate a rewrite? Maybe. Maybe not. I don''t know.'
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**内森**：为了能够更多地支持流输入，这样人们在打开大文件时不会完全没有反馈，而是开始更高效地加载事物——这是否需要重写呢？也许需要。也许不需要。我不知道。'
- en: '**Thorsten: Quite interesting how often this idea of rewriting or doing it
    again comes up. We talked about this [the last time](/blog/why-the-big-rewrite).
    Learning continuously. It''s not: learning and *then* fixing something and patching
    something. It''s more: we learned something, so now let''s redo it with that learning
    in mind, vs. just putting a band aid on. It came up multiple times and you see
    it in the product.**'
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**托斯滕**：有趣的是，这种重新编写或再次做的想法出现的频率。我们上次谈到过这个 [上次](/blog/why-the-big-rewrite)。持续学习。这不是：学习然后修复和打补丁。更多的是：我们学到了什么，所以现在让我们在考虑到这些学习的基础上重新做，而不是简单地打个补丁。这个问题多次出现，你可以在产品中看到。'
- en: '**When we talk, Antonio, you say things like: before we did it like *this*
    and now we do it like that. Just yesterday, we basically rewrote the part that
    deals with macOS'' IME system, because Antonio said: we can''t leave it like this,
    we don''t want another person to fall into this rabbit hole, let''s put a bridge
    on top of it.**'
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**安东尼奥，每次我们讨论时，你都会说：以前我们是这样做的，*现在*我们是这样做的。就在昨天，我们基本上重写了处理 macOS 输入法系统的部分，因为安东尼奥说：我们不能把它留在这里，我们不希望另一个人掉进这个兔子洞，让我们在其上架一座桥。**'
- en: '**Nathan**: Nice. That''s good to hear. I''ve heard about that.'
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**内森**：不错。听到这个消息很好。我已经听说过这个。'
- en: '**Thorsten: I don''t know if it makes sense, but my last question is this...
    With a lot of software, say, SaaS Enterprise Whatever, or the Shopify clone, I
    think most users do not care what technology is used, as long as it works for
    them. And I wonder: do you think this is different with developer tools or editors?
    Does the technology that''s used shine through more or do the users care more
    about it?**'
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**托斯滕**：我不知道这是否有意义，但我的最后一个问题是……对于很多软件，比如 SaaS 企业什么的，或者 Shopify 的克隆，我认为大多数用户并不关心使用什么技术，只要它对他们有效。我想知道：对于开发工具或编辑器，情况是否不同？使用的技术是否更加显著，或者用户更关心它？'
- en: '**Max**: I do think it affects the type of contributions we can get. A lot
    of our users, so many of them are people who would be prepared to contribute something
    to the code base to fulfill their own needs.'
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**马克斯**：我认为这影响了我们可以得到的贡献类型。我们的许多用户，他们中的许多人都准备为了满足自己的需求向代码库贡献一些东西。'
- en: I think it's important that it's easy to contribute to Zed. If we written it
    all in C++, I think that there would be a lot of people who would like wanna change
    something about Zed, but would not be as prepared to make the change themselves.
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为能够轻松地对 Zed 做出贡献很重要。如果我们把所有东西都写在 C++ 中，我认为会有很多人想要改变 Zed 的某些东西，但不会像现在这样准备好自己去做出改变。
- en: Whereas just from the contributions that we've gotten so far since going open
    source a few weeks ago, it's a lot. I think people like that it's written in Rust.
    It's approachable. People can build the project easily. They don't have to go
    learn how to use CMake or whatever to build the project or Gyp. They can just
    use cargo.
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
  zh: 相比于几周前我们开源以来得到的贡献，这确实是很多。我认为人们喜欢它是用 Rust 写的。它很易于接近。人们可以轻松构建项目。他们不必学习如何使用 CMake
    或其他工具来构建项目或使用 Gyp。他们只需使用 cargo 就可以了。
- en: But also the fact that the compiler has this strictness to it, allows us, as
    the receiving end of those contributions, to often merge with confidence. I think
    it's really helpful.
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
  zh: 但是编译器的严格性也使我们作为这些贡献的接收端，通常能够充满信心地合并。我认为这真的很有帮助。
- en: '**Nathan**: Rust is an absolutely beautiful tool. It''s not perfect, but I
    love it. But does it matter to the people? I mean, I think people want a fast
    editor at the end of the day. We could write it in, what is it, brainfuck? They
    wouldn''t care. But the contribution angle is super valid.'
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: Rust 是一款绝对漂亮的工具。它并非完美，但我喜爱它。但这对用户重要吗？我是说，我认为人们最终想要的是一个快速的编辑器。我们可以用，什么来写呢，Brainfuck？他们不会在意。但贡献的角度是非常有效的。'
- en: '**Antonio**: But I still would like to talk about the performance, I just think
    we are forced to do things a certain way because of performance. Why do we have
    this GPU accelerated UI framework? It''s because the performance needs to be at
    a certain level. We want our frames to be below three milliseconds. We could rasterize
    everything on the CPU and we could have used something that did that, but, no.'
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**Antonio**: 但我仍然想谈论性能，我只是认为我们被迫以某种方式做事情是因为性能。为什么我们有这个 GPU 加速的 UI 框架？因为性能需要达到某个水平。我们希望我们的帧率在三毫秒以下。我们可以在
    CPU 上光栅化所有东西，我们可以使用某些可以做到这一点的东西，但是，没有。'
- en: To some extent, we're positioning ourselves to be a performance editor, because
    we want a performance editor. I want a performance editor. And so, the choice
    is almost... we have no choice almost.
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种程度上，我们正在定位自己成为一款性能编辑器，因为我们想要一款性能编辑器。我想要一款性能编辑器。所以，选择几乎是... 我们几乎没有选择。
- en: '**Nathan**: But there''s Zig now and I don''t know a lot about Zig yet, I haven''t
    had time, honestly, to learn about it, but people I respect are excited about
    it. It seems like it shares some of the same goals in terms of the output as Rust.
    I''m unclear what it''s sacrificing in terms of safety, or how they handle those
    things. There may be pragmatic workarounds that are sort of not as strict as Rust,
    but in practice work, et cetera.'
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nathan**: 但现在有 Zig 了，我还不太了解 Zig，我还没有时间去了解它，但我尊敬的人们对它感到兴奋。看起来它与 Rust 在输出方面有一些相同的目标。我不清楚它在安全性方面牺牲了什么，或者它们如何处理这些问题。可能有一些实际上工作的实用解决方案，不像
    Rust 那样严格，但在实践中有效，等等。'
- en: So I'm intrigued by that. I'm intrigued, but then there's a lot to be said for
    like monolingualism, if that makes sense. The server's in Rust, the frontend's
    in Rust, but if I could get 99% of the benefits of Rust with a 10th of the compile
    time or something...
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我对此很感兴趣。我感到很好奇，但是关于像单语言主义这样的事情还有很多需要说的，如果这有意义的话。服务器是用 Rust 写的，前端也是用 Rust 写的，但如果我能用十分之一的编译时间得到
    Rust 的 99% 的好处...
- en: '**Thorsten: Well, I can tell you about Zig that a person on Discord was saying
    they''re writing an editor in Zig, but the perfect name for a text editor in Zig
    is already taken: Zed.**'
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thorsten**: 嗯，我可以告诉你关于 Zig 的一件事，Discord 上的一个人说他们正在用 Zig 写一个编辑器，但是 Zig 的一个完美的文本编辑器名称已经被取了：Zed。'
- en: '* * *'
  id: totrans-split-130
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
