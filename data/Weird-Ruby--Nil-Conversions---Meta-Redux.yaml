- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 13:20:45'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 13:20:45
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Weird Ruby: Nil Conversions | Meta Redux'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 奇怪的 Ruby：空值转换 | Meta Redux
- en: 来源：[https://metaredux.com/posts/2024/02/23/weird-ruby-nil-conversions.html](https://metaredux.com/posts/2024/02/23/weird-ruby-nil-conversions.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://metaredux.com/posts/2024/02/23/weird-ruby-nil-conversions.html](https://metaredux.com/posts/2024/02/23/weird-ruby-nil-conversions.html)
- en: 'Most Rubyists probably know that `nil` in Ruby is an instance of the singleton
    class [NilClass](https://ruby-doc.org/3.3.0/NilClass.html). Because `nil` is a
    object like any other, we can actually invoke methods on it, and it turns out
    that `NilClass` provides a few - mostly conversion methods to other Ruby types.
    Let’s see some of those in action:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Ruby 程序员可能都知道，在 Ruby 中 `nil` 是 [NilClass](https://ruby-doc.org/3.3.0/NilClass.html)
    的一个实例。因为 `nil` 和其他任何对象一样，我们实际上可以在其上调用方法，而 `NilClass` 提供了一些方法，主要是转换到其他 Ruby 类型的方法。让我们看看其中一些的作用：
- en: '[PRE0]'
  id: totrans-split-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With those methods you can literally create something (e.g. an empty hash)
    out of nothing! Whether you should actually be doing this is a totally different
    matter, though. According to the class docs:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些方法，你可以从无中创造出一些东西（例如一个空的哈希表）！但是否真的应该这样做则是另外一个完全不同的问题。根据类文档：
- en: The converter methods are carrying the concept of nullity to other classes.
  id: totrans-split-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 转换方法将空值概念传递给其他类。
- en: I’m not sure how this “concept of nullity” is defined, but I’ve always found
    it weird that you can equate the absence of value with some anchor value (e.g.
    an empty collection or 0). I know there are contexts in which this may be useful,
    but I’m fairly certain you’d be able to get similar results without resorting
    to such conversions.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定“空值概念”如何定义，但我一直觉得将缺少值等同于某些锚定值（例如空集合或0）很奇怪。我知道在某些情况下这可能很有用，但我非常确定你可以在不诉诸这种转换的情况下获得类似的结果。
- en: 'Keep in mind that you can do similar conversions in a different way:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以用不同的方式进行类似的转换：
- en: '[PRE1]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice how the “safe” number conversion methods `Integer` and `Float` operate
    differently and raise an exception when passed `nil`. That’s part of the reason
    why it’s often suggested to avoid the use of `to_i` and `to_f` to avoid converting
    unexpected values.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，“安全”的数值转换方法 `Integer` 和 `Float` 在处理 `nil` 时会有不同的操作，并在传递 `nil` 时引发异常。这也是为什么经常建议避免使用
    `to_i` 和 `to_f` 的一部分原因，以避免转换意外的值。
- en: 'The [Zen of Python](https://peps.python.org/pep-0020/) famously says:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python 之禅](https://peps.python.org/pep-0020/) 著名地说：'
- en: Explicit is better than implicit.
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 明确胜于隐晦。
- en: Errors should never pass silently.
  id: totrans-split-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 错误永远不应该悄悄地通过。
- en: In the face of ambiguity, refuse the temptation to guess.
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 面对歧义，拒绝猜测的诱惑。
- en: But in the land of Ruby it seems we like to live dangerously!
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但在 Ruby 的世界中，似乎我们喜欢过于冒险！
- en: That’s all I have for you today. Keep Ruby weird!
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 今天就告诉你这些了。让 Ruby 保持奇异！
