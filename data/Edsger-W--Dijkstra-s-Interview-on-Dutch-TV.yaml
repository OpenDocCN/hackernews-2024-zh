- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:34:49'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:34:49'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Edsger W. Dijkstra's Interview on Dutch TV
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 艾德加·W·迪杰斯特拉在荷兰电视台的采访
- en: 来源：[https://pncnmnp.github.io/blogs/translating-dijakstra.html](https://pncnmnp.github.io/blogs/translating-dijakstra.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://pncnmnp.github.io/blogs/translating-dijakstra.html](https://pncnmnp.github.io/blogs/translating-dijakstra.html)
- en: Edsger W. Dijkstra's Interview on Dutch TV
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 艾德加·W·迪杰斯特拉在荷兰电视台的采访
- en: 'First Published: 1^(st) May 2021'
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首次发表日期：2021年5月1日
- en: '*Writers make national literature, while translators make universal literature.
    - José Saramago*'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*作家们创作国家文学，而译者们则创作世界文学。- 何塞·萨拉马戈*'
- en: 'Among computer science graduates, [Edsgar W. Dijkstra](https://en.wikipedia.org/wiki/Edsger_W._Dijkstra)
    is a man who needs little introduction. A few decades back, an interesting interview
    of his [was broadcasted on Dutch TV](https://www.cs.utexas.edu/users/EWD/video-audio/NoorderlichtVideo.html).
    The video description is as follows:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学毕业生中，[艾德加·W·迪杰斯特拉](https://en.wikipedia.org/wiki/Edsger_W._Dijkstra)无需多言。几十年前，他的一次有趣的采访[在荷兰电视台播出](https://www.cs.utexas.edu/users/EWD/video-audio/NoorderlichtVideo.html)。视频描述如下：
- en: In the autumn of 2000, the Dutch broadcasting organization VPRO Television visited
    Austin to make a video of a visit with the most famous Dutch computing scientist.
    The product of this project was broadcast in April 2001 as a 25-minute episode
    of the science series Noorderlicht, under the title "Denken Als Discipline".
  id: totrans-split-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2000年秋，荷兰广播组织VPRO电视来奥斯汀访问最著名的荷兰计算机科学家，并拍摄了一段与其会面的视频。该项目的成果于2001年4月以科学系列节目“Denken
    Als Discipline”的名义播出，时长25分钟。
- en: Roughly a year after this video was broadcasted, [Prof. Dijkstra died](https://www.cnet.com/news/computer-science-pioneer-dijkstra-dies/)
    after a long struggle with cancer. This blog post would not have been possible
    without the help of some kind souls (Jos Wassink, Karin Spiegel, and Chris Kotrla)
    who dedicated their time to digitize and translate the above interview in English.
    I am merely curating the thoughts Prof. Dijkstra expressed during the interview,
    for improved readability.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大约一年后，[迪杰斯特拉教授因](https://www.cnet.com/news/computer-science-pioneer-dijkstra-dies/)长期与癌症搏斗后去世。本文不可能没有一些善良的灵魂（Jos
    Wassink、Karin Spiegel和Chris Kotrla）的帮助，他们致力于将上述采访数字化并翻译成英文。我仅仅是整理迪杰斯特拉教授在采访中表达的思想，以提高可读性。
- en: The Interview
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 采访
- en: '**Prof. Dijkstra:** You just cobble something together to sell. It need not
    be any good. As long as you can fool people into buying it, you can always try
    to make better versions later. So then you get these version numbers, even with
    decimals, version 2.6 or 2.7\. That''s nonsense. While version 1 should have been
    the finished product.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**迪杰斯特拉教授:** 你只需随便拼凑点东西来卖。不必太好。只要能愚弄人们购买，你随后总是可以试着做更好的版本。然后就有了这些版本号，甚至还有小数点，版本2.6或2.7。这都是胡说八道。第一个版本本应该是成品。'
- en: Computer science is no more about computers than astronomy is about telescopes.
  id: totrans-split-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 计算机科学与望远镜一样与望远镜无关。
- en: '**Narrator:** Professor Edsger W. Dijkstra is Holland''s first programmer.
    In 1972, he received the Turing Award, the Nobel Prize of Computer Science. He
    and his wife now live in Austin, Texas, where they moved in 1984.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**叙述者:** 艾德加·W·迪杰斯特拉教授是荷兰的首位程序员。1972年，他获得了图灵奖，这是计算机科学界的诺贝尔奖。他和妻子现在居住在德克萨斯州奥斯汀市，他们于1984年搬到那里。'
- en: '**Prof. Dijkstra:** At the time, most university departments in the Netherlands
    aimed to water down their curriculum. At the same time, the University of Texas
    in Austin tried to reduce the student enrollment and to increase their quality.
    It was an opposite development which was much more attractive than what was happening
    in Dutch higher education.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**迪杰斯特拉教授:** 当时，荷兰大多数大学部门的目标是淡化他们的课程。与此同时，德克萨斯大学奥斯汀分校试图减少学生人数并提高他们的质量。这是一个与荷兰高等教育发展截然相反的发展，更加吸引人。'
- en: The universities will continue to lack the courage to teach hard science, they
    will continue to misguide the students, and each next stage of infantilization
    of the curriculum will be hailed as educational progress.
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大学将继续缺乏教授硬科学的勇气，他们将继续误导学生，每一次课程的儿童化都会被吹捧为教育进步的表现。
- en: '**Narrator:** Quality, correctness, and elegance are what Dijkstra thinks should
    characterize a computer program. In 1954 he resolved to make programming a science,
    but it has been an uphill struggle.'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**叙述者:** 质量、正确性和优雅是迪杰斯特拉认为应该成为计算机程序的特征。1954年，他决心将编程变成一门科学，但这是一场艰苦的斗争。'
- en: '**Prof. Dijkstra:** I lose no sleep that businesses feel they cannot afford
    to deliver first-rate products. It doesn''t keep me from continuing my work.'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dijkstra 教授：** 我并不为企业觉得无法提供一流产品而失眠。这并不能阻止我继续我的工作。'
- en: You should not give the world what it asks for, but what it needs.
  id: totrans-split-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你不应该给世界它所要求的，而是它所需要的。
- en: '**Prof. Dijkstra:** There are very different programming styles. I tend to
    see them as Mozart versus Beethoven. When Mozart started to write, the composition
    was finished. He wrote the manuscript in one go. In beautiful handwriting, too.
    Beethoven was a doubter and a struggler, who started writing before he finished
    the composition and then glued corrections onto the page. In one place he did
    this nine times. When they peeled them, the last version proved identical to the
    first one. That iterative method of programming is somehow a very Anglo-Saxon
    custom. British education is pervaded by it. People learn, when they write, not
    to try to get it right the first time. Just write what''s on your mind and then
    rewrite repeatedly, to get the product you want. That''s partly why word processors
    are marketed so aggressively and partly why they have been so successful there.
    While it is one of the advantages of working with pen and paper that when you
    start a sentence, you should have it ready.'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dijkstra 教授：** 有非常不同的编程风格。我倾向于将它们看作是莫扎特与贝多芬。当莫扎特开始写作时，作品已经完成。他一气呵成地写下了手稿。而且字迹也很美观。贝多芬是一个怀疑者和斗士，他在完成作品之前开始写作，然后在纸上粘贴修正。有一个地方他这样做了九次。当他们剥开它们时，最后的版本与第一个版本完全相同。这种迭代的编程方法在某种程度上是一种非常英语化的习惯。英国的教育充斥着它。人们学会了，在写作时不要试图一次搞定。只需写出你的想法，然后反复重写，以获得你想要的产品。这在一定程度上解释了为什么文字处理器如此激烈地市场化，并且为什么它们在那里如此成功。尽管使用笔和纸的一个好处是，当你开始一个句子时，你应该准备好。'
- en: '**Narrator:** Dijkstra is a prolific writer: musings, talks, mathematical proofs,
    and books. His EWD''s, these initials followed by a serial number are considered
    his best scientific contributions.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**叙述者：** Dijkstra 是一位多产的作家：思考、演讲、数学证明和书籍。他的 EWD（这些首字母后面跟着一个序列号）被认为是他最好的科学贡献。'
- en: '**Prof. Dijkstra:** For myself, the most important thing has been the daily
    discipline of neatly writing down your thoughts and what you do. Due to modern
    technology, they have been much more influential than they would have been in
    the past. You might describe them as a modern form of scientific correspondence.
    Albeit that the intellectual traffic has been mostly one-directional. The serial
    numbers have crept up to over 1300\. In length, they vary enormously, from 80
    pages to one page. As time goes by, they tend to become ever shorter. Everyone
    to whom I sent them, was implicitly willing to function as an internal node of
    the dissemination tree and to send second-generation copies on to others. How
    many people they have reached, I have never been able to estimate. A few hundred,
    I''d say.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dijkstra 教授：** 对我个人而言，最重要的是每天有纪律地把你的想法和所做的事情整理得清清楚楚。由于现代技术的发展，它们的影响远比过去大得多。你可以把它们描述为现代形式的科学通信。尽管知识交流主要是单向的。这些序列号已经增加到超过1300个。长度上差异很大，从80页到一页不等。随着时间的推移，它们倾向于变得越来越短。我向这些人发送时，他们都默许作为传播树的内部节点，并将第二代副本发送给其他人。它们到达了多少人，我从来没有估计过。我猜几百人。'
- en: '**Prof. Dijkstra:** In order to compose, you have to write scores. But to be
    a composer is not to write scores. To be a composer is to conceive music. In the
    early days of programming, you had to write machine code. Meaningless sequences
    of capitals and numbers. That''s the analog of writing scores. People thought
    that *that* was programming. Later, that was made easier by the invention of the
    higher programming languages: Fortran, Pascal, C++, and suchlike. People thought
    that those languages would solve the programming problem. But when you look closely,
    the trivial aspects of programming had been automated while the harder ones remained.
    The higher programming languages which had been intended to facilitate programming
    proved, coupled with the increasing ambitions of the applications to be more intellectually
    demanding to the programmer.'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**迪克斯特拉教授：** 要创作，你必须写乐谱。但成为作曲家并不是写乐谱。成为作曲家是构思音乐。在编程的早期，你必须写机器码。一些毫无意义的大写字母和数字的序列。那相当于写乐谱。人们认为*那*就是编程。后来，通过更高级的编程语言的发明，如Fortran，Pascal，C++等，这变得更容易了。人们认为这些语言会解决编程问题。但仔细观察时，编程的琐碎方面已经自动化了，而更难的问题仍然存在。旨在简化编程的更高级编程语言，配合应用程序越来越高的野心，对程序员来说更具智力挑战性。'
- en: The competent programmer is fully aware of the limited size of his own skull.
    He, therefore, approaches his tasks in full humility and avoids clever tricks
    like the plague. - EWD 340
  id: totrans-split-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个称职的程序员完全意识到自己头脑的有限大小。因此，他以充分的谦卑态度对待他的任务，并避免像瘟疫一样的聪明技巧。- EWD 340
- en: '**Prof. Dijkstra:** I remember, in 1970 or thereabouts, I first went to explain
    to companies how to develop programs and keep them under tight control. I first
    went to Paris and then to Brussels. In Paris, I delivered a lecture at the Sorbonne
    and people were very enthusiastic. On the way home, I told the same story at a
    large software house in Brussels. The lecture was a complete failure. In a sense,
    one of my least successful lectures. I later found out why. The management didn''t
    want faultless programs because the company derived its stability from maintenance
    contracts. And the programmers weren''t interested because they derived their
    intellectual excitement from the fact that they didn''t quite know what they were
    doing. They felt that if you knew precisely what you were doing and didn''t run
    risks, it was a boring job.'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**迪克斯特拉教授：** 我记得大约在1970年左右，我第一次去向公司解释如何开发程序并且严格控制它们。我先去了巴黎，然后去了布鲁塞尔。在巴黎，我在索邦大学发表了一场讲座，人们非常热情。回家的路上，我在布鲁塞尔的一家大型软件公司也讲了同样的故事。这场讲座完全失败了。在某种意义上，是我最不成功的一次讲座。后来我找出了原因。管理层并不想要无误的程序，因为公司的稳定来自维护合同。程序员们也不感兴趣，因为他们的智力刺激来自于他们并不完全知道自己在做什么。他们觉得，如果你确切知道自己在做什么并且不冒险，那就是一份枯燥的工作。'
- en: We should not add bugs to a program out of nonchalance. We should do so systematically
    and with great care.
  id: totrans-split-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们不应该由于漠不关心而向程序中添加错误。我们应该系统地、非常谨慎地这样做。
- en: '**Prof. Dijkstra:** If in physics there''s something you don''t understand
    you can always hide behind the uncharted depths of nature. You can always blame
    God. You didn''t make it so complex yourself. But if your program doesn''t work,
    there is no one to hide behind. You cannot hide behind an obstinate nature. A
    zero is a zero, a one is a one. If it doesn''t work, you''ve messed up.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**迪克斯特拉教授：** 如果在物理学中有什么你不理解的，你总可以藏在自然的未知深处。你总可以责怪上帝。这并不是你自己使它变得如此复杂。但如果你的程序不工作，就没有人可以躲藏。你不能躲在一种固执的自然背后。一个零就是一个零，一个一就是一个一。如果它不工作，那是你搞砸了。'
- en: I realized my previous projects had been finger exercises. I had to tackle complexity
    itself. But it took a long time to muster the courage to do so.
  id: totrans-split-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我意识到我的以前的项目只是手指练习。我必须直面复杂性本身。但是花了很长时间才鼓起勇气去做。
- en: '**Narrator:** At the end of the 60s, Dijkstra saw that the complexity got the
    better of the programmers. And that it threatened the most prestigious projects.'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**叙述者：** 在60年代末，迪克斯特拉看到复杂性战胜了程序员。这威胁到了最负盛名的项目。'
- en: '**Prof. Dijkstra:** That happened in 1969 just after the first successful moon
    landing. I was at a NATO conference on software engineering in Rome where I met
    Joel Aron, who was head of IBM''s Federal Systems Division, which had been responsible
    for the software of the moon shot. I knew that each Apollo flight required some
    40,000 new lines of code. I don''t know what unit a line of code is but 40,000
    is a lot. I was duly impressed that they got so many lines of code correct. So
    when I met Joel, I said: "how do you do it?". "Do what?", he asked. "Getting that
    software right". "Right?", he said. He said that in one of the calculations of
    the orbit of the lunar module, the moon had been defined as repelling instead
    of attracting. They had discovered that error by accident. Imagine, *by accident*
    five days before the shot. I went white and said: "Those guys have been lucky!"
    Yes, Joel Aron agreed.'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**迪克斯特拉教授：** 那是在1969年，就在第一次成功登月之后。我参加了在罗马举行的关于软件工程的北约会议，在那里我遇到了乔尔·阿伦，他是IBM联邦系统部门的负责人，负责了登月计划的软件。我知道每次阿波罗飞行都需要约40,000行新代码。我不知道代码的单位是什么，但是40,000行是很多的。他们成功地使如此多的代码正确。所以当我遇到乔尔时，我问道：“你们是怎么做到的？”。“做什么？”，他问。
    “让那个软件正确运行”。 “正确？”，他说。他说，在月球模块轨道计算中的一个计算中，月球被定义为斥力而不是引力。他们偶然发现了这个错误。想象一下，*偶然*地在发射前五天。我变白了，说：“那些家伙真是幸运！”
    是的，乔尔·阿伦同意。'
- en: Program testing can convincingly show the presence of bugs, but it hopelessly
    inadequate to show their absence.
  id: totrans-split-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 程序测试可以有力地显示出bug的存在，但是却无法希望地显示出它们的不存在。
- en: '**Narrator:** Dijkstra knew personally how frighteningly complex programs could
    become. He had finished the operating system of Holland''s biggest computer, the
    X-8 under great pressure.'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**旁白：** 迪克斯特拉亲身体会到程序变得多么可怕地复杂。他在巨型计算机X-8上在极大压力下完成了荷兰最大的操作系统。'
- en: '**Prof. Dijkstra:** I feared that I wouldn''t get it right. That I would lose
    control of it. For the X-8 in Eindhoven, we tried to design a multiprogramming
    system. We were working with a machine with a real-time interrupt which really
    means that you cannot test your program. I knew that if we designed the program
    with insufficient care, we would end up with something which, once entered into
    the computer wouldn''t work, and would make irreproducible errors, the cause of
    which we would be unable to determine. That was the reason why we applied all
    possible control mechanisms in the development stage.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**迪克斯特拉教授：** 我害怕我做不好。我怕我会失去对它的控制。对于埃因霍温的X-8，我们尝试设计一个多程序系统。我们使用了一个具有实时中断的机器，这意味着你无法测试你的程序。我知道，如果我们设计不够仔细，我们最终会得到一些进入计算机后无法工作并且会产生无法确定原因的不可重复错误的东西。这就是为什么我们在开发阶段应用了所有可能的控制机制的原因。'
- en: Elegance is not a dispensable luxury but a factor that decides between success
    and failure.
  id: totrans-split-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 优雅不是一种可有可无的奢侈，而是决定成功与失败之间的因素。
- en: '**Prof. Dijkstra:** One of the things I discovered as early as the 1960s is
    that mathematical elegance is not a question of esthetics, of taste, or fashion,
    but something you can translate into a technical notion. The Concise Oxford Dictionary
    gives one of the meanings of elegant as *ingeniously simple and effective*. In
    practice, a program is manageable if you make a truly elegant program, firstly
    because it is shorter than most alternatives and consists of discrete paths each
    of which you can replace by an alternative implementation without influencing
    the rest of the program. But also, curiously the most elegant programs are often
    the most efficient.'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**迪克斯特拉教授：** 我早在1960年代就发现了一件事情，那就是数学上的优雅并不是美学、品味或时尚的问题，而是你可以将其转化为技术概念的东西。《简明牛津词典》将优雅的一种含义描述为*巧妙而简洁有效*。实际上，如果你制作一个真正优雅的程序，它会更短，比大多数替代方案更容易管理，并且由于由离散路径组成，你可以将每条路径替换为另一种实现而不影响程序的其余部分。而且，有趣的是，最优雅的程序通常也是最有效率的。'
- en: When there were no computers, programming was no problem. When we had a few
    weak computers, it became a mild problem. Now that we have gigantic computers,
    programming is a gigantic problem.
  id: totrans-split-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当计算机还不存在时，编程并不是问题。当我们有了一些弱小的计算机时，它成为了一个小问题。现在我们有了巨型计算机，编程成了一个巨大的问题。
- en: '**Prof. Dijkstra:** My first programming years were a bit strange compared
    to now in that I programmed for non-existent machines. My friends Bram Loopstra
    and Carel Scholten built the machine and in the meantime, I wrote the relevant
    software. I was used to not testing a program because the machine to test it on
    wasn''t finished. I knew right away that you had to create something that could
    keep under your intellectual control.'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dijkstra 教授：** 我最初的编程岁月与现在有些不同，因为我为不存在的机器编程。我的朋友布拉姆·洛普斯特拉和卡雷尔·斯科尔滕建造了这台机器，与此同时，我写了相关的软件。习惯于不测试程序，因为测试用的机器还没建好。我立刻意识到，你必须创造一些能在你的智力控制之下的东西。'
- en: '**Prof. Dijkstra:** I started work at the Mathematical Centre in March 1952\.
    My wife-to-be had worked there since the summer of 1949\. She had a job as a calculator.
    I was taken on as a programmer. And I rather liked her. Our first date was the
    concert on the occasion of the Mathematical Congress in 1954 in Amsterdam. Then
    the news was out that I was sweet on her. People complimented me on my taste.
    Professionally, I was strongly influenced by my mother. She was a brilliant mathematician.
    I remember when I had bought my books for the next school year I saw the goniometry
    book, which scared me with all those Greek letters. I asked my mother if goniometry
    was hard. She said, "not at all". "Make sure you know all the formulae by heart
    and if you need more than five lines, you''re on the wrong track."'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dijkstra 教授：** 我在1952年3月开始在数学中心工作。我的未婚妻自1949年夏天以来就在那里工作。她当时是一个计算员。我被聘为程序员。我很喜欢她。我们的第一次约会是1954年阿姆斯特丹数学大会的音乐会。后来有传言说我对她有意思。人们称赞我有眼光。在职业上，我深受我的母亲的影响。她是一位杰出的数学家。我记得当我为下个学年买书时，看到了三角函数的书，里面有很多希腊字母，我感到害怕。我问我妈妈三角函数难不难。她说：“一点也不难。”
    “确保你把所有的公式牢记在心，如果你需要超过五行，那你就走错了路。”'
- en: '**Prof. Dijkstra:** Why has elegance found so little following? That is the
    reality of it. Elegance has the disadvantage if that''s what it is that hard work
    is needed to achieve it and a good education to appreciate it.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dijkstra 教授：** 为什么优雅如此少见呢？这就是现实。优雅的劣势在于，如果那就是它的话，需要努力才能实现它，需要良好的教育才能欣赏它。'
- en: '[←](../blog.html)'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[←](../blog.html)'
