- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:02:36'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:02:36
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: QuickTime as a Tape Archival Format – Eschatology
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QuickTime 作为磁带存档格式 – 末世论
- en: 来源：[https://eschatologist.net/blog/?p=409](https://eschatologist.net/blog/?p=409)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://eschatologist.net/blog/?p=409](https://eschatologist.net/blog/?p=409)
- en: 'On the [SIMH group](https://groups.io/g/simh/), [Al Kossow](https://bitsavers.org/)
    and others [have been discussing how `.tap` is a terrible archival container format](https://groups.io/g/simh/message/3722)
    that also has a bunch of problems for use in emulation and simulation of systems.
    This is a problem I’ve been thinking about for a while since I hired [Miëtek](https://mietek.io/)
    to implement SCSI tape support in MAME including the `.tap` format, and I had
    a sudden realization: There’s already a great format for representing sequential
    media, QuickTime!'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [SIMH 组](https://groups.io/g/simh/)，[Al Kossow](https://bitsavers.org/) 和其他人[一直在讨论
    `.tap` 是一个糟糕的存档容器格式](https://groups.io/g/simh/message/3722)，而且在仿真和系统仿真中也有一堆问题。这是我一直在思考的问题，因为我聘请了[Miëtek](https://mietek.io/)来实现
    MAME 中的 SCSI 磁带支持，包括 `.tap` 格式，我突然意识到：已经有一个很好的格式来表示顺序媒体了，那就是 QuickTime！
- en: A lot of people think QuickTime is a “video format,” but that’s not really accurate.
    Video and audio playback are applications *atop* the QuickTime container format;
    the container format itself is a means of representing multiple typed *tracks*
    of time-based *media*, each of which may have their own representation in the
    form of *samples* interpreted according to their own CODECs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 很多人认为 QuickTime 是一种“视频格式”，但这并不准确。视频和音频播放是建立在 QuickTime 容器格式之上的应用程序；容器格式本身是一种表示多个类型化的时间基准*媒体*轨道的手段，每个轨道都可以根据自己的
    CODEC 对其*样本*进行解释。
- en: QuickTime Media Structure at a High Level
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级别的 QuickTime 媒体结构
- en: 'As an example, a QuickTime file containing a video with associated stereo audio
    and subtitles may have three tracks, each with their own timebase:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，包含带有关联立体声音频和字幕的视频的 QuickTime 文件可能具有三个轨道，每个轨道都有自己的时间基准：
- en: The video track, whose timebase is the number of frames per second, and whose
    *track media* is the CODEC metadata needed to decode its samples.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 视频轨道，其时间基准是每秒帧数，其*轨道媒体*是解码其样本所需的 CODEC 元数据。
- en: The audio track for the two audio channels, whose timebase is the number of
    samples per second. Its track media will be similar to that of the video, specifying
    the CODEC to use for the audio samples to decode.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '音频轨道用于两个音频通道，其时间基准是每秒样本数。其轨道媒体将与视频类似，指定用于解码音频样本的 CODEC。 '
- en: The text track for the subtitles, whose timebase is probably derived from the
    video timebase, whose track media will specify things like the language and font
    of the subtitles, and whose samples consist of the text to present and the size,
    location, duration, and styling for that presentation.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字幕的文本轨道，其时间基准可能来自视频时间基准，其轨道媒体将指定字幕的语言和字体等内容，并且其样本包含要呈现的文本以及该呈现的大小、位置、持续时间和样式。
- en: All of these are represented within a file as *atoms* which represent well-identified
    bags of data with arbitrary size and content, making it very easy to write general-purpose
    tooling and also to extend over time. (The last major extension to the low-level
    design was in the 1990s, to support 64-bit atom sizes, so it’s quite a stable
    format already.)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都表示为文件中的*原子*，它们表示具有任意大小和内容的明确定义的数据包，使得编写通用工具非常容易，并且也可以随时间扩展。（最后一次对低级设计的主要扩展是在
    1990 年代，以支持 64 位原子大小，所以它已经是一个相当稳定的格式了。）
- en: Mapping QuickTime to Data Tape
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 QuickTime 映射到数据磁带
- en: 'Once you realize that the tracks themselves can be arbitrary, it starts to
    become clear how this format maps nicely to tape content: Since tapes themselves
    are linear, they’re fundamentally time-based.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你意识到轨道本身可以是任意的，就开始清楚这种格式如何很好地映射到磁带内容：由于磁带本身是线性的，它们从根本上是基于时间的。
- en: The actual content of a tape isn’t a pure stream of raw data, it’s a set of
    blocks of raw data between magnetic flux marks, with some gaps between — and thanks
    to media decay, those blocks can be good or bad. Usually these marks are used
    to organize tapes into files, but that’s not a guarantee; for both archival and
    emulation, it’s best to stick to the low-level representation and let applications
    impose the higher-level semantics.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 磁带的实际内容并不是纯粹的原始数据流，而是一系列磁通标记之间的原始数据块，其中一些之间有间隙 —— 并且由于介质衰减，这些块可能是好的也可能是坏的。通常这些标记用于将磁带组织成文件，但这并不是一个保证；对于存档和仿真，最好坚持低级表示，并让应用程序强加更高级的语义。
- en: In this case, you’d have a “tape data” track whose track media describes the
    original medium (7-track, 9-track, etc.) and the interpretation of its samples.
    The samples themselves would be the marks and data blocks. And there’s even a
    native representation of tape gaps, in the form of non-contiguous samples.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你将拥有一个“磁带数据”轨道，其轨道媒体描述了原始介质（7轨、9轨等）及其样本的解释。样本本身将是标记和数据块。甚至还有磁带间隙的本机表示，采用非连续样本的形式。
- en: The format can also be leveraged to support random access *including writes*,
    since the intelligence for that can be in the “CODEC” for the “tape” track media,
    combined with the QuickTime format’s existing support for non-destructive edits.
    New data can be overlaid based on its “temporal” position, which should more or
    less accurately simulate how a rewritten tape would actually work, while still
    preserving the data that was just overwritten.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该格式还可以用于支持随机访问*包括写入*，因为智能化可以在“磁带”轨道媒体的“CODEC”中实现，结合 QuickTime 格式对非破坏性编辑的现有支持。新数据可以根据其“时间”位置叠加，这应该或多或少地准确模拟了重写磁带实际工作的方式，同时仍然保留了刚刚被覆盖的数据。
- en: Finally, QuickTime has a concept of “references” that can be used to implement
    things like tape files independent of (rather than inline with) the tape data
    itself. A catalog of block references, for example, could also be stored with
    the tape data’s track media to indicate the block extents for individual files
    on tape, thus allowing direct access by tooling without having to stream through
    the entire file.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，QuickTime 有一个“引用”的概念，可以用来实现诸如磁带文件之类的东西，而不是与磁带数据本身内联。例如，一个块引用目录也可以与磁带数据的轨道媒体一起存储，以指示磁带上各个文件的块范围，从而允许工具直接访问而无需通过整个文件流式传输。
- en: Implementation
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施
- en: Since QuickTime movie files are a moderately complex structure atop a simple
    base, it’s important to have a reasonable API to work with both the low-level
    atom structures as well as the higher-level constructs like tracks, track media,
    sample chunks and samples. Fortunately there already exists at least one Open
    Source library allowing this, [QTFileLib](https://github.com/macosforge/dss/tree/master/QTFileLib)
    from the [Darwin Streaming Server](https://github.com/macosforge/dss) that Apple
    made Open Source in 1999.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 QuickTime 电影文件是在简单基础之上的一个相对复杂的结构，因此有必要有一个合理的 API 来处理低级原子结构以及高级结构，如轨道、轨道媒体、样本块和样本。幸运的是，已经存在至少一个允许这样做的开源库，[QTFileLib](https://github.com/macosforge/dss/tree/master/QTFileLib)
    来自 [Darwin Streaming Server](https://github.com/macosforge/dss)，苹果在 1999 年开源了它。
- en: Darwin Streaming Server as a whole and its QTFileLib component are written in
    quite straightforward “C with Classes”-style C++, and QTFileLib has an API surface
    representing all of the major low-level and application-level concepts of the
    file format. As a side effect of the implementation of its read support, it also
    has a lot of the API necessary for creating and wiring together QuickTime data
    structures for creating files, just not support for writing it all out. Structurally
    that should be straightforward to add. It even looks straightforward to port to
    plain C, if that’s desired.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Darwin Streaming Server 作为一个整体以及其 QTFileLib 组件是用相当直接的“C with Classes”风格的 C++
    编写的，并且 QTFileLib 具有表示文件格式的所有主要低级和应用程序级概念的 API 表面。作为其读取支持实现的副作用，它还具有许多用于创建和连接 QuickTime
    数据结构以创建文件的 API，只是没有支持将所有内容写出。从结构上看，这应该是直接的。如果需要，甚至看起来很容易移植到普通 C。
