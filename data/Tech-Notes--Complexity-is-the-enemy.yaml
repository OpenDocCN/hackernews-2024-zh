- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:02:59'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:02:59'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Tech Notes: Complexity is the enemy'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术笔记：复杂性是敌人
- en: 来源：[https://neugierig.org/software/blog/2011/04/complexity.html](https://neugierig.org/software/blog/2011/04/complexity.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://neugierig.org/software/blog/2011/04/complexity.html](https://neugierig.org/software/blog/2011/04/complexity.html)
- en: <main>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main>
- en: I'm almost through my seventh year working at Google(!). I have learned many
    things there, more than I could ever write down. I thought I would at least share
    with you something that's only come to me with more experience.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经在 Google 工作了将近七年了(!)。在那里我学到了很多东西，远远超过我能写下的。我想至少与你分享一些只有通过更多经验才能理解的东西。
- en: 'Complexity is the death of software. It''s hard to quantify the cost of, and
    it tends to creep in slowly, so it''s a slow boil of getting worse that''s hard
    to see until it''s too late. On the other side, frequently it''s easy to see a
    benefit of increasing complexity: a new layer of indirection allows new feature
    X, or splitting a process that ran on one machine into two allows you to surmount
    your current scaling hurdle. But now you must keep another layer of indirection
    in your head, or implement an RPC layer and manage two machines.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂性是软件的死亡。它的成本很难量化，往往会悄悄渗入，所以它是一种慢慢恶化的慢火，直到为时已晚才难以察觉。另一方面，经常可以看到增加复杂性的好处：增加一个间接层可以实现新功能
    X，或者将在一台机器上运行的过程分割成两部分可以克服当前的扩展障碍。但现在你必须在脑中保留另一个间接层，或者实施一个 RPC 层并管理两台机器。
- en: 'The above is hopefully just as obvious to a new programmer as it is to a veteran.
    What I think I''ve learned through my few years in the industry is a better understanding
    of how the balance works out; when complexity is warranted and when it should
    be rejected. I frequently think back to a friend''s comment on the [Go compiler](http://golang.org/)
    written by [Ken Thompson](http://en.wikipedia.org/wiki/Ken_Thompson): it''s fast
    because it just doesn''t do much, the code is very straightforward.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新程序员和老手来说，以上情况希望都能显而易见。我通过几年的行业经验学到的是如何更好地理解这种平衡：何时需要复杂性，何时应该拒绝复杂性。我经常回想起朋友对由
    [Ken Thompson](http://en.wikipedia.org/wiki/Ken_Thompson) 编写的 [Go 编译器](http://golang.org/)
    的评论：它之所以快速，是因为它并不做太多事情，代码非常直接。
- en: It turns out that, much like it's easier to write a long blog post than it is
    to make the same point succinctly, it's difficult to write software that is straightforward.
    This is easiest to see in programming langauge design; new languages by novices
    tend to have lots of features, while few have the crisp clarity of C. In today's
    programs it's frequently related to how many objects are involved; in distributed
    systems it's about how many moving parts there are.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，就像写一篇长博客比写一个简洁的观点更容易一样，编写简单直接的软件也是困难的。这在编程语言设计中最容易看到；新手编写的新语言通常有许多特性，而像
    C 语言那样清晰简洁的却很少。在今天的程序中，这经常与涉及的对象数量有关；在分布式系统中，这涉及到有多少个移动部件。
- en: 'Another word for this problem is cleverness: to quote another one of the C
    hackers, "Debugging is twice as hard as writing the code in the first place. Therefore,
    if you write the code as cleverly as possible, you are, by definition, not smart
    enough to debug it."'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题的词是聪明：引用另一位 C 程序员的话，“调试比写代码困难两倍。因此，如果你尽可能聪明地编写代码，那么根据定义，你不够聪明来调试它。”
- en: 'What helps? I wonder if it maybe just comes down to experience — getting bitten
    by one too many projects where someone thought metaprogramming was cool. But I''ve
    found having specific design goals to evaluate new code by can help. It''s easier
    to reject new code if you can say "this does not help solve the initial goals
    of the project". Within Google the template document for describing the design
    of a new project has a section right at the top to list *non-goals*: reasonable
    extensions of the project that you intend to reject.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有什么帮助吗？也许只是经验问题 —— 多次碰到认为元编程很酷的项目。但我发现，如果能够有具体的设计目标来评估新代码，会有所帮助。如果能够说“这不帮助解决项目最初的目标”，那么拒绝新代码就更容易了。在
    Google 内部，描述新项目设计的模板文档的顶部有一个部分专门列出*非目标*：项目的合理扩展，你打算拒绝的。
- en: 'Ironically, I''ve found that using *weaker* tools can help with complexity.
    It''s hard to write a complicated C program because it can''t do very much. C
    programs tend to use lots of arrays because that''s all you get, but it turns
    out that arrays are great — compact memory representation, O(1) access, good data
    locality. I''d never advocate intentionally using a weak tool, though. Instead,
    my lesson has been: write Python code like it was C.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 具有讽刺意味的是，我发现使用*更弱*的工具可以帮助处理复杂性。编写复杂的 C 程序很困难，因为它不能做太多事情。C 程序倾向于使用大量的数组，因为这是你能得到的全部，但事实证明数组非常棒——紧凑的内存表示，O(1)
    访问，良好的数据局部性。然而，我从不主张故意使用弱工具。相反，我的教训是：像编写 C 代码一样编写 Python 代码。
- en: </main>
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
