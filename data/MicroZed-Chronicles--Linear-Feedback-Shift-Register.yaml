- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 12:57:12'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 12:57:12
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'MicroZed Chronicles: Linear Feedback Shift Register'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'MicroZed Chronicles: 线性反馈移位寄存器'
- en: 来源：[https://www.adiuvoengineering.com/post/microzed-chronicles-linear-feedback-shift-register](https://www.adiuvoengineering.com/post/microzed-chronicles-linear-feedback-shift-register)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.adiuvoengineering.com/post/microzed-chronicles-linear-feedback-shift-register](https://www.adiuvoengineering.com/post/microzed-chronicles-linear-feedback-shift-register)
- en: As a follow on from last week, one of the techniques I like to use to stimulate
    or capture data in our FPGA designs is a Linear Feedback Shift Register (LFSR).
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为上周的延续，我喜欢在我们的FPGA设计中使用的一种刺激或捕获数据的技术是线性反馈移位寄存器（LFSR）。
- en: In the ten-plus years of this blog, I have never talked much about LFSRs, so
    I am going to focus this blog on exploring them as they are helpful for our FPGA
    designs. These days, we are a little spoiled with the modern fabric being so capable.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个博客的十多年中，我从未多谈论过LFSR，所以我打算把这篇博客专注于探索它们，因为它们对我们的FPGA设计非常有帮助。如今，我们对现代结构如此强大感到有些宠坏了。
- en: 'LFSRs can be used for a range of applications in our FPGAs:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的FPGA中，LFSR可以用于一系列应用：
- en: Generating random test patterns – Leveraging the pseudo random nature of the
    LFSR to generate data for test patterns.
  id: totrans-split-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 制造随机测试模式 - 利用LFSR的伪随机特性生成测试模式的数据。
- en: Counters – using a LFSR as a counter can often provide a more efficient and
    higher performing implementation than alternate approaches.
  id: totrans-split-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计数器 - 使用LFSR作为计数器通常比其他方法提供更高效和性能更高的实现。
- en: Data scrambling / descrambling – The output from the LFSR can be combined with
    data to ensure that long runs of ones or zeros are removed which could result
    in synchronization problems when received.
  id: totrans-split-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据混淆/解混淆 - LFSR的输出可以与数据结合使用，以确保消除长时间运行的1或0，这可能导致接收时的同步问题。
- en: Error detection and correction – By selecting the specific polynomial to generate
    code words, we are able to detect errors in the transmission when the data is
    received and applied to the same LFSR. Ethernet is a commonly used example.
  id: totrans-split-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误检测和校正 - 通过选择特定的多项式生成码字，我们能够在数据接收时检测到传输中的错误，并将其应用于相同的LFSR。以太网是一个常用的例子。
- en: The LFSR is formed around a shift register which has one or several of the register
    outputs fed back into the input of the first register. The elements, which are
    fed back to the input, are often called taps and the tap selection will determine
    the behavior of the LFSR. Of course, the LFSR  will eventually repeat its pattern
    because it has feedback. For a maximal length implementation, the shift register
    will repeat after 2^n-1 iterations. This is a result of the two methods of implementing
    a LFSR. Both have illegal values which prohibit further operation and as such,
    are avoided.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: LFSR围绕一个移位寄存器形成，其中一个或多个寄存器的输出反馈到第一个寄存器的输入。反馈到输入的元素通常称为抽头，抽头选择将决定LFSR的行为。当然，LFSR最终会重复其模式，因为它有反馈。对于最大长度的实现，移位寄存器在2^n-1次迭代后将重复。这是实现LFSR的两种方法的结果。两种方法都有非法值，这些非法值会禁止进一步操作，因此应该避免使用。
- en: 'The two methods of implementation for a LFSR are as follows:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: LFSR的两种实现方法如下：
- en: Galois – In this architecture, the XOR/XNOR gates are implemented between register
    stages within the shift register and the output of the last stage is wrapped around
    to the first register input and connected to the XOR/XNOR gate input. This means
    when the output is 0, the register simply shifts.
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 伽罗瓦 - 在这种架构中，XOR/XNOR门在移位寄存器的寄存器级之间实现，并且最后一个级的输出被环绕到第一个寄存器的输入，并连接到XOR/XNOR门输入。这意味着当输出为0时，寄存器简单地移位。
- en: Implementing both architectures can result in maximal length LFSR being implemented.
    However, we do need to do a translation between the location of the taps in a
    Fibonacci implementation versus a Galois implementation.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 实施这两种架构可能会导致最大长度LFSR的实现。然而，我们确实需要在斐波那契实现和伽罗瓦实现中的反馈位置之间进行转换。
- en: For a Fibonacci implementation of a simple 8-bit LFSR, we will have taps at
    4,5,6,8 when the registers are numbered 1 to 8 (with 1 being the input and 8 being
    the output element). This leads to a diagram as below.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个简单的8位斐波那契实现的LFSR，当寄存器从1到8编号时（其中1是输入，8是输出元素），我们将在4、5、6、8处设置抽头。这导致如下图所示的图表。
- en: For a Galois implementation, however, the taps need to be updated so the register
    position is updated. Be aware that it is also common to number Galois registers
    in the opposite direction to Fibonacci.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Galois 实现，需要更新选项卡以更新寄存器位置。请注意，通常将 Galois 寄存器编号与 Fibonacci 相反。
- en: One advantage of using a Galois implementation is that there is never more than
    one logic level between registers regardless of the number of taps used. However,
    in modern FPGAs, this can limit the implementation to registers and not enable
    the use of SRL for sections of the shift register if appropriate within the CLB.
    The implementation of the XOR can be handled by the LUT which proves very capable
    for larger XOR/XNOR Implementations with six input LUT. As such, the usage of
    Fibonacci or Galois implementation comes down to the engineer understanding what
    is best suited for your application.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Galois 实现的一个优点是无论使用的选项卡数量如何，寄存器之间永远不会超过一个逻辑电平。然而，在现代 FPGA 中，这可能限制了对寄存器的实现，并且不能在
    CLB 内适当使用 SRL 用于移位寄存器的部分。 XOR 的实现可以由 LUT 处理，这对于较大的 XOR/XNOR 实现非常有效。因此，Fibonacci
    或 Galois 实现的使用取决于工程师理解什么最适合您的应用程序。
- en: The use of an XNOR or XOR gate depends on the application, however, both Fibonacci
    and Galois LFRS implementations support both gates. When a XOR gate is used, the
    illegal state for the register is all zeros while the illegal state is all ones
    for the XNOR gate. As AMD devices generally initialize to having all registers
    at zero (see my blog on resets here), it makes sense for us to use the XNOR style
    approach, although it is possible to create a modulo 2^n counter with a little
    extra decoding logic.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 XNOR 或 XOR 门取决于应用程序，但 Fibonacci 和 Galois LFSR 实现都支持这两种门。当使用 XOR 门时，寄存器的非法状态为全部为零，而使用
    XNOR 门的非法状态为全部为一。由于 AMD 设备通常初始化为所有寄存器都为零（请参阅我关于重置的博客），因此我们使用 XNOR 风格的方法是合理的，尽管也可以使用少量额外解码逻辑创建模
    2^n 计数器。
- en: In the remainder of this blog, we are going to create simple LFSR implementations
    using the Galois and Fibonacci techniques and demonstrate the result when implemented
    in an AMD 7 series device.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本博客的其余部分，我们将使用 Galois 和 Fibonacci 技术创建简单的 LFSR 实现，并展示在 AMD 7 系列设备上实现时的结果。
- en: The source code for both can be seen below. For the test bench, I run through
    the sequence and record them to text files which ensures I can double check that
    the sequence is correct. As a maximal length sequence, it should repeat after
    255 iterations.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 两者的源代码如下所示。对于测试台，我会通过序列并将它们记录到文本文件中，以确保我可以双重检查序列是否正确。作为最大长度序列，它应在 255 次迭代后重复。
- en: '[PRE0]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If we modify the design slightly, the parallel word is not being output but
    instead, a serial output is generated. This is a common use case. We can then
    synthesize the design and observe how it is implemented. Note how it uses SRL
    whenever it can.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们稍微修改设计，就不会输出并行词，而是生成串行输出。这是一个常见的用例。然后我们可以综合设计并观察其实现方式。请注意它在能使用 SRL 时如何使用
    SRL。
- en: In our next blog, we will be using a LFSR as part of our miniseries that looks
    at how we are able to capture data using the ILA and test equipment.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们接下来的博客中，我们将在我们的迷你系列中使用 LFSR，看看我们如何使用 ILA 和测试设备捕获数据。
- en: If you are looking for a list of LFSR feedback taps, the great Peter Alfke wrote
    an interesting [app note](https://docs.amd.com/v/u/en-US/xapp052) a while back
    which targets now obsolete devices and provides a great introduction to LFSR,
    along with an extensive LFSR table of taps.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在寻找 LFSR 反馈选项卡列表，那么伟大的彼得·阿尔夫克曾经写过一篇有趣的[应用笔记](https://docs.amd.com/v/u/en-US/xapp052)，目标是现在已经过时的设备，并提供了有关
    LFSR 的很好介绍，以及广泛的 LFSR 选项卡表。
- en: If you enjoyed the blog why not take a look at the free webinars, workshops
    and training courses we have created over the years. Highlights include
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢这篇博客，不妨看看多年来我们创建的免费网络研讨会、工作坊和培训课程。亮点包括
- en: Do you want to know more about designing embedded systems from scratch? Check
    out our book on creating embedded systems. This book will walk you through all
    the stages of requirements, architecture, component selection, schematics, layout,
    and FPGA / software design. We designed and manufactured the board at the heart
    of the book! The schematics and layout are available in Altium [here](https://www.e3designers.com/altium-365)Learn
    more about the board (see previous blogs on [Bring up](https://www.adiuvoengineering.com/post/microzed-chronicles-configuring-zynq-on-a-custom-board),
    [DDR validation,](https://www.adiuvoengineering.com/post/microzed-chronicles-validating-your-custom-zynq-board-memory)
    [USB](https://www.adiuvoengineering.com/post/microzed-chronicles-smart-sensor-iot-board-getting-usb-up-and-running),
    [Sensors](https://www.adiuvoengineering.com/post/microzed-chronicles-petalinux-i2c-in-the-ps-and-axi-iic))
    and view the schematics [here](https://www.adiuvoengineering.com/post/sensorsthink-board-schematic).
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 想要从零开始了解设计嵌入式系统吗？查看我们的关于创建嵌入式系统的书籍。这本书将引导您完成需求、架构、组件选择、原理图、布局和FPGA/软件设计的所有阶段。我们设计并制造了这本书核心的板！原理图和布局在Altium中[此处](https://www.e3designers.com/altium-365)可供查看。了解有关该板的更多信息（查看先前博客有关[启动](https://www.adiuvoengineering.com/post/microzed-chronicles-configuring-zynq-on-a-custom-board)、[DDR验证](https://www.adiuvoengineering.com/post/microzed-chronicles-validating-your-custom-zynq-board-memory)、[USB](https://www.adiuvoengineering.com/post/microzed-chronicles-smart-sensor-iot-board-getting-usb-up-and-running)、[传感器](https://www.adiuvoengineering.com/post/microzed-chronicles-petalinux-i2c-in-the-ps-and-axi-iic)）并查看原理图[此处](https://www.adiuvoengineering.com/post/sensorsthink-board-schematic)。
