- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:29:33'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:29:33'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'How Much Architecture Is “Enough?”: Balancing the MVP and MVA Helps You Make
    Better Decisions - InfoQ'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “足够”的架构有多少？平衡MVP和MVA有助于做出更好的决策- InfoQ
- en: 来源：[https://www.infoq.com/articles/mva-enough-architecture/](https://www.infoq.com/articles/mva-enough-architecture/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.infoq.com/articles/mva-enough-architecture/](https://www.infoq.com/articles/mva-enough-architecture/)
- en: Key Takeaways
  id: totrans-split-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关键点
- en: 'Avoid over-investing in the MVA: the critical challenge is to solve the MVP''s
    current challenges while anticipating but not actually solving future challenges.'
  id: totrans-split-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免在MVA上过度投资：关键挑战在于解决MVP当前的挑战，同时预测但实际上不解决未来的挑战。
- en: If the MVP is not successful, the MVA is a wasted effort, but if the MVP is
    successful, the MVA is essential to the healthy evolution of the product.
  id: totrans-split-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果MVP不成功，那么MVA就是在浪费精力，但如果MVP成功，那么MVA对产品的健康演化至关重要。
- en: The MVP and the MVA are like two climbers, tied together with a rope. The MVP
    leads but cannot get too far ahead or the MVA will hold it back.
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVP和MVA就像两个攀岩者，用绳子系在一起。MVP领先，但不能走得太远，否则MVA将阻碍其发展。
- en: It also makes no sense for the MVA to get too far ahead of the MVP because feedback
    about the MVP’s value may invalidate decisions made to create the MVA.
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVA超前于MVP也是没有意义的，因为关于MVP价值的反馈可能会使创建MVA的决策失效。
- en: During the development of the initial release, the MVA will be based on assumptions
    that may not prove true so some overinvestment may happen but this will be corrected
    once the feedback loop is working.
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在初版发布的开发过程中，MVA将基于可能不成立的假设，因此可能会有些过度投资，但一旦反馈循环运作起来，这将得到纠正。
- en: When the MVP evolves based on feedback, the MVA must be reconsidered. This is
    especially true when the architecture created for one application is reused for
    another. Applications support different MVPs and therefore meet different requirements.
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当MVP基于反馈演化时，必须重新考虑MVA。当为一个应用程序创建的架构被另一个应用程序重用时，尤其如此。应用程序支持不同的MVP，因此满足不同的需求。
- en: In a series of previous [articles](https://www.infoq.com/articles/minimum-viable-architecture/),
    we introduced a concept called the *Minimum Viable Architecture,* or *MVA*. The
    MVA is the architectural complement to a *Minimum Viable Product* or *MVP*. The
    MVA balances the MVP by making sure that the MVP is technically viable, sustainable,
    and extensible over time; it is what differentiates the MVP from a throw-away
    proof of concept. It is what makes the MVP the seed of a new product.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在一系列先前的[文章](https://www.infoq.com/articles/minimum-viable-architecture/)中，我们介绍了一个称为*最小可行架构*或*MVA*的概念。MVA是*最小可行产品*或*MVP*的架构补充。MVA通过确保MVP在技术上可行、可持续和可扩展，来平衡MVP；这是MVP与一次性概念验证的区别，也是使MVP成为新产品种子的关键因素。
- en: Extending the MVP concept in an agile context, we view every new product release
    as a new MVP that extends the previous MVP with additional customer outcomes.
    The MVP’s corresponding MVA evolves just enough to support the incremental improvements
    to the MVP. In this fashion, both the product and its associated software architecture
    evolve in a series of increments. This co-evolution is depicted in Figure 1.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在敏捷环境中扩展MVP概念，我们将每个新产品发布视为延展前一个MVP并提供额外客户成果的新MVP。MVP对应的MVA演化到足以支持对MVP的增量改进。通过这种方式，产品及其关联的软件架构都在一系列增量中演化。这种共同演化如图
    1 所示。
- en: '![](img/e586a3c7430617c9924e917c23a7d358.png)'
  id: totrans-split-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e586a3c7430617c9924e917c23a7d358.png)'
- en: '**Figure 1: The MVP and its MVA co-evolve in a series of incremental deliveries**'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1：MVP及其MVA在一系列增量交付中共同演化**'
- en: Related Sponsored Content
  id: totrans-split-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 相关赞助内容
- en: All this sounds well and good until we start asking fundamental questions like
    what, really, is "minimum", and how do we know? And similarly, what is "viable"?
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切听起来都很好，直到我们开始问一些基本问题，比如，“最小”到底是什么，我们怎么知道？同样，“可行”又是什么？
- en: In many cases, not a lot of time or effort goes into the answers; teams are
    asked to quickly deliver a "new" product (aka an MVP) meant to stimulate more
    customer demand, and they do some technical architectural work (the MVA) to make
    the MVP releasable.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，回答问题并没有花费太多时间或精力；团队被要求快速交付一个“新”产品（即MVP），旨在刺激更多客户需求，他们会做一些技术架构工作（即MVA），以使MVP可发布。
- en: Both the MVP and its associated MVA are defined by time and resource constraints
    rather than by a thoughtful analysis of underserved customer outcomes.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: MVP及其相关的MVA都是由时间和资源限制定义的，而不是通过深思熟虑的分析未满足客户需求的结果。
- en: But what if we were to take the time to understand those outcomes and shape
    the MVP and MVA accordingly? What would that look like?
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们花时间了解这些结果并相应地塑造MVP和MVA会怎么样呢？那会是什么样子？
- en: How do you know if the MVP is minimal?
  id: totrans-split-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何知道MVP是否最小？
- en: Products are vehicles for delivering outcomes to customers. The smallest possible
    increment of a product is one that delivers a single improved outcome. Each release
    has to deliver at least one improved outcome to some set of users of the product.
    If it does not improve at least one outcome it is not worth releasing. If it delivers
    more than one improved outcome it may not be "minimum". Hence, the minimum MVP
    delivers exactly one improved outcome to some set of users.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 产品是向客户提供结果的工具。产品的最小可能增量是一个提供单一改进结果的产品。每次发布必须至少向某些用户群体提供至少一个改进的结果。如果没有改进至少一个结果，它就不值得发布。如果它提供了多个改进的结果，它可能不是“最小的”。因此，最小的MVP向某些用户群体确切地提供一个改进的结果。
- en: If a product release improves more than one outcome for different sets of users
    of the product, the product organization is missing opportunities to release smaller
    increments more frequently so that it can gather feedback on the effectiveness
    of the product release.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果产品发布对产品的不同用户群体改善了多个结果，产品组织就错失了通过更频繁地发布较小增量以收集产品发布效果反馈的机会。
- en: 'An observation that we like to keep in mind when asking whether a product increment
    is minimum is from the author Antoine de Saint-Exupéry:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当询问一个产品增量是否足够最小时，我们喜欢记住的一条观察来自作者安托万·德·圣埃克苏佩里：
- en: '"Perfection is achieved, not when there is nothing more to add, but when there
    is nothing left to take away."'
  id: totrans-split-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “完美不是在无可增加的时候，而是在无可减少的时候实现的。”
- en: Teams have a tendency to want to add "just one more thing" to a release, but
    if the "single outcome rule" is respected, teams will deliver value sooner and
    get feedback faster than if they delay the release to add that one more thing.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 团队往往希望在发布中再添加“只是一件事”，但是如果尊重“单一结果规则”，团队将比延迟发布以添加一个更快地交付价值并获得反馈。
- en: This discussion underscores the value of using outcomes to manage scope, not
    features. If your MVP isn’t expressed in terms of outcomes it’s harder to manage
    scope because it’s harder to see which features are needed to improve a targeted
    outcome, and which ones are merely fluff.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这讨论强调了使用结果来管理范围而不是特性的价值。如果您的MVP没有以结果的方式表达，那么更难以管理范围，因为更难看到哪些特性是改进目标结果所需的，哪些只是多余的。
- en: 'Rarely is an organization certain that an MVP will improve the customer outcome
    that it is targeting, so MVPs are often expressed in terms of an experiment using
    techniques borrowed from [Lean UX](https://www.interaction-design.org/literature/article/a-simple-introduction-to-lean-ux#:~:text=Creating%20a%20Hypothesis%20in%20Lean%20UX,-The%20hypotheses%20created&text=There''s%20a%20simple%20format%20that,level%20of%20sign%20up%20completions.),
    such as:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 稀有的是，一个组织很少能确定一个MVP会改善其所针对的客户结果，因此MVP通常以使用从[精益UX](https://www.interaction-design.org/literature/article/a-simple-introduction-to-lean-ux#:~:text=Creating%20a%20Hypothesis%20in%20Lean%20UX,-The%20hypotheses%20created&text=There's%20a%20simple%20format%20that,level%20of%20sign%20up%20completions.)借鉴的实验技术来表达，例如：
- en: '"We believe that enabling people to [perform some task] will result in improving
    [some desired outcome]. We will have demonstrated this when we observe [some measurement
    of that outcome]."'
  id: totrans-split-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “我们相信使人们能够[执行某些任务]将导致改善[某种期望的结果]。当我们观察到[该结果的某种度量]时，我们将证明这一点。”
- en: How do you know if the MVP is viable?
  id: totrans-split-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何知道MVP是否可行？
- en: 'The MVP is viable if the premise about the value it delivers proves to be true,
    while the costs of developing and maintaining its associated MVA do not exceed
    its financial benefits. There is only one way to prove this: let actual users/customers
    use the product and provide feedback. The "real users/customers" are important;
    internal stakeholders are not sufficient and can suffer from confirmation bias
    because their input shaped the original ideas about the MVP in the first place.
    Hand-selected focus groups can fail to represent the needs of the customer base
    at large because they have been selected by the people who shaped the concept
    of the MVP and also suffer from confirmation bias.'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果关于其交付价值的前提被证明是真实的，同时开发和维护其关联的MVA的成本不超过其经济效益，那么MVP就是可行的。只有一种方法可以证明这一点：让实际用户/客户使用产品并提供反馈。"真实的用户/客户"很重要；内部利益相关者是不够的，并且可能受到确认偏见的影响，因为他们的意见首先塑造了关于MVP的原始想法。手选的焦点小组可能无法代表广大客户群体的需求，因为它们是由塑造MVP概念的人选择的，并且同样受到确认偏见的影响。
- en: For some products, it may take a long-ish period to determine the viability
    of the MVP, weeks, and sometimes even months. Early feedback may be able to quickly
    ascertain that the MVP is valuable even when it cannot fully determine how valuable.
    When considering what the MVP should be, it’s worth considering how you will know
    that it is valuable, and how long it will take you to know.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些产品来说，确定MVP的可行性可能需要较长的时间，可能是几周，甚至几个月。尽早的反馈可能能够快速确定MVP的价值，即使不能完全确定其价值。在考虑MVP应该是什么时，考虑一下您将如何知道它是有价值的，以及需要多长时间才能知道这一点。
- en: Viability also includes estimates of financial viability. Without getting too
    far into financial decision-making processes, the net present value of the cost
    of developing the product cannot exceed the net present value of the future benefits
    the product will generate. Developing the MVP and MVA helps the organization determine
    the cost side of this equation, but they also need to find ways to assess the
    benefits side as well.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 可行性还包括财务可行性的估计。在不深入财务决策过程的情况下，开发产品的成本的现值不能超过产品未来产生的收益的现值。开发MVP和MVA有助于组织确定这个方程式的成本方面，但他们也需要找到评估收益方面的方法。
- en: 'For an MVP to be viable it also has to be supportable over the lifespan of
    the product. A product has no value to customers if, for some reason, it stops
    working when the customer needs it. This is where the product’s MVA comes in:
    when a company delivers an MVP to customers, they are implicitly committing to
    supporting that MVP until they tell customers that they will no longer do so.
    The purpose of the MVA is to ensure the supportability of the outcomes delivered
    by an MVP.'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于MVP来说，它还必须在产品的生命周期内得到支持才能可行。如果产品在客户需要时出现停止工作的情况，对客户来说是没有价值的。这就是产品的MVA发挥作用的地方：当公司向客户交付MVP时，他们隐含地承诺要支持该MVP，直到告知客户他们将不再支持为止。MVA的目的是确保MVP交付的成果的支持能力。
- en: How do you know if the MVA is minimal?
  id: totrans-split-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何确定MVA是否足够小？
- en: Together, the MVP and MVA incrementally answer the question "Is our product
    (and its associated software architecture) viable, e.g. supportable and reliable
    over the lifetime of the product?" Each MVA attempts to satisfy the Quality Attribute
    Requirements (QARs) associated with the MVP. If it also satisfies other QARs that
    are not associated with the MVP, the MVA is not minimum. Put another way, the
    MVA supports only the outcomes included in the MVP, and it must do so over the
    expected lifetime of the product, anticipating future needs that *should be* expressed
    in the QARs.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: MVP和MVA共同回答了一个问题："我们的产品（及其相关软件架构）是否可行，例如在产品的整个生命周期内是否支持和可靠？"每个MVA都试图满足与MVP相关联的质量属性需求（QARs）。如果还满足与MVP无关的其他QARs，则该MVA不是最小的。换句话说，MVA仅支持包含在MVP中的结果，并且必须在产品的预期生命周期内这样做，预期未来需求*应该*在QARs中表达。
- en: The critical challenge that the MVA must solve is that it must answer the MVP’s
    *current* challenges while anticipating but *not actually* solving future challenges.
    In other words, the MVA must not require unacceptable levels of rework to actually
    solve those future problems. Some rework is okay and expected, but the words "complete
    rewrite" mean that the architecture has failed and all bets on viability are off.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: MVA必须解决的关键挑战是，它必须解决MVP当前的挑战，同时预见但实际上不解决未来的挑战。换句话说，MVA不能要求进行不可接受的重做来真正解决这些未来的问题。一些重做是可以接受和预期的，但“完全重写”的话意味着架构已失败，所有对可行性的赌注都没有了。
- en: As a result of this, the MVA hangs in a dynamic balance between solving future
    problems that may never exist, and letting technical debt pile up to the point
    where it leads to, metaphorically, architectural bankruptcy. Being able to balance
    these two forces is where experience comes in handy.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，MVA在解决可能从未存在的未来问题和让技术债务堆积到导致“架构破产”的动态平衡中摇摆。在这两种力量之间取得平衡正是经验派发挥作用的地方。
- en: 'The typical problem is that the development team *thinks* they know a lot about
    the future architectural challenges implied by the MVP. This can lead to overinvesting
    in the MVA and then later having to undo a lot of work. For example, they might
    say:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 典型问题是开发团队认为他们对MVP暗示的未来架构挑战了解很多。这可能导致对MVA进行过度投资，然后稍后不得不撤销大量工作。例如，他们可能会说：
- en: '"We *know* we are going to need a messaging mechanism, so let’s develop that
    now while we are waiting for the business to decide what they really need."'
  id: totrans-split-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"我们知道我们将需要一个消息传递机制，所以让我们在等待业务真正需要什么时开发它。"'
- en: Whether or not they need a messaging mechanism depends on the QARs. If they
    cannot satisfy the MVP over the expected lifespan of the product, they may be
    right, but the question they should ask is "Do we need it *now*?"
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 是否需要消息传递机制取决于QARs。如果它们无法在产品的预期寿命内满足MVP，他们可能是对的，但他们应该问的问题是："我们现在需要吗？"
- en: If the MVP is not successful they will have spent a lot of time and effort developing
    something that has no use. If they *don’t* develop it, they may find that the
    MVP will, at some point, become unsupportable and so they will have also incurred
    a large amount of [technical debt](https://www.infoq.com/articles/technical-debt-tells-you/).
    Making this decision is critical and one where experience in making trade-offs
    is important. Some early evidence that the MVP will meet its goals also helps,
    as it gives the team a sense whether their work on the MVA will be useful.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果MVP不成功，他们将花费大量时间和精力开发一个无用的东西。如果他们不开发它，他们可能会发现MVP在某个时候变得无法支持，因此他们也将承担大量技术债务。做出这个决定至关重要，这是一个需要有经验进行权衡的地方。一些早期证据表明MVP将实现其目标也很有帮助，因为它让团队感觉到他们在MVA上的工作是否有用。
- en: When planning what will go into the MVA, a development team asks "What QARs
    do we need to satisfy to reliably deliver the MVP over the long term, and what
    technical work do we need to undertake?". The architecture doesn’t need to be
    completely developed to meet those future needs, but it does need to anticipate
    the potential changes that will need to be made to meet those needs.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划MVA内容时，开发团队会问："为了可靠地交付长期的MVP，我们需要满足哪些QARs，以及需要进行什么技术工作？" 架构不需要完全发展来满足这些未来的需求，但它确实需要预见到未来可能需要的变化。
- en: How much architecture do you need in the first MVA?
  id: totrans-split-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一个MVA需要多少架构？
- en: The development team creates the initial MVA based on their initial and often
    incomplete understanding of the problems the MVA needs to solve. They will not
    usually have much in the way of QARs, perhaps only broad organizational "standards"
    that are more aspirational than accurate. These initial statements are often so
    vague as to be unhelpful, e.g. "the system must support very large numbers of
    concurrent users", "the system must be easy to support and maintain", "the system
    must be secure against external threats", etc.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队根据对MVA需要解决的问题的最初和通常不完整的理解创建初始MVA。他们通常不会有太多的QARs，也许只有更多抱负性而不准确的广泛组织“标准”。这些初始声明通常太模糊以至于没有帮助，例如，“系统必须支持非常大量的并发用户”，“系统必须易于支持和维护”，“系统必须抵御外部威胁”等。
- en: The development team will also have some initial statements from stakeholders
    about what they think the system needs to do. Project/product sponsors don’t get
    to where they are by being shy about making grand projections of the success of
    the MVP. This can lead to the development team overbuilding the MVA before they
    get feedback
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队还将从利益相关者那里得到一些关于他们认为系统需要做什么的初步声明。项目/产品赞助人不会因为在MVP成功的大预测而胆怯。这可能导致开发团队在获得反馈之前过度构建MVA
- en: BUT ... sometimes the project sponsors are right about their projections and
    even an overbuilt MVA can struggle under high demand from users. And there are
    some absolutes, even for bare-bones MVAs; most organizations can’t afford to release
    even the simplest products with poor security, for example.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但是...有时项目赞助人对他们的预测是正确的，即使是过度构建的MVA在用户高需求下也可能遇到困难。而且有一些绝对的事实，即使是最基本的MVA; 大多数组织也无法承受发布安全性差的甚至最简单的产品。
- en: 'The reality is that the initial MVA, like the MVP, is based on educated guesses
    guided by experience. You might have to build something that you suspect could
    be wasted, but you can’t afford not to. The initial MVA will probably be at least
    somewhat overbuilt in some areas and underbuilt in others, and you can only know
    where by creating it, releasing it, and gathering feedback. The MVA should be
    just enough to get feedback, without:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现实情况是，初始MVA与MVP一样，都是基于经验指导的有教养的猜测。你可能不得不建立一些你认为可能是浪费的东西，但你不能不建。初始MVA在某些领域可能会过度构建，而在其他领域可能会不足，只有通过创建、发布和收集反馈才能知道具体情况。MVA应该足够获取反馈，而不是：
- en: Exposing the organization to unacceptable risk to its business or reputation,
    or
  id: totrans-split-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将组织暴露于对其业务或声誉不可接受的风险中，或
- en: Spending so much time developing and perfecting the MVA to delay important feedback
  id: totrans-split-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 花费太多时间开发和完善MVA以延迟重要的反馈
- en: One thing to watch out for is the cost of undoing initial assumptions/decisions
    that prove to be incorrect. [Technical debt](https://www.infoq.com/articles/technical-debt-tells-you/)
    is an unavoidable consequence of the initial MVA, just as some aspects of most
    MVPs will turn out to be at least partially wrong. That's why you want to get
    feedback quickly.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有一件事需要注意，那就是撤销最初的假设/决策可能带来的成本。[技术债务](https://www.infoq.com/articles/technical-debt-tells-you/)是初始MVA不可避免的后果，正如大多数MVP的某些方面最终可能至少部分错误一样。这就是为什么你想要快速获得反馈。
- en: Development teams are sometimes tempted to copy the architecture from a successful
    system as a way to get started, including using vendor solutions. This can be
    a good approach if you can do it in such a way that you’re not locked in when
    you find that some aspects of the solution don’t work. Just don’t copy more of
    the architecture than you need or you may be creating a technical debt balance
    that you can’t afford. Also, resist the temptation to hold on too long to an initial
    MVA when the MVP evolves.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队有时会受到诱惑，复制成功系统的架构作为开始的一种方式，包括使用供应商解决方案。如果能够以不锁定自己的方式进行，这可能是一种不错的方法。只是不要复制比你需要的架构更多，否则可能会创造你负担不起的技术债务余额。此外，在MVP演变时，不要过长时间地保留初始MVA的诱惑。
- en: How do you know if the MVA is viable?
  id: totrans-split-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何确定 MVA 是否可行？
- en: Before you release the product increment, you don’t know. You can’t know. You
    have absolutely no feedback on whether the MVP is useful, and without that, you
    don’t know whether the MVA is simply waste, or whether it may need to support
    a set of product capabilities over the lifespan of the product. So the first gate
    the MVA must pass is the assessment of the value of the MVP.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布产品增量之前，你不知道。你无法知道。关于MVP是否有用，你绝对没有任何反馈，没有这个，你不知道MVA只是浪费，还是可能需要在产品生命周期内支持一组产品功能。因此，MVA必须通过的第一个门槛是对MVP价值的评估。
- en: 'We believe every product increment is, in essence, a new MVP. The reason for
    keeping it as small as possible is simple: the larger the MVP, the greater the
    possibility that it contains things that aren’t valuable. If the goal of the MVA
    is to ensure the long-term viability of the MVP, keeping the MVP small also helps
    to avoid bloat in the MVA.'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为每个产品增量本质上都是一个新的MVP。保持尽可能小的原因很简单：MVP越大，包含不必要内容的可能性就越大。如果MVA的目标是确保MVP的长期可行性，那么保持MVP的小也有助于避免MVA中的臃肿。
- en: 'The MVP and its MVA are rather like two climbers tied together with a rope
    (see Figure 2). The MVP is the lead climber, and the MVA can’t lag too far behind
    or it will hurt the MVP. Because the MVP is like a lead climber, there is also
    no point in the MVA getting ahead of the MVP. There is one exception to this:
    the MVA for the initial release of a system has to start somewhere, and the assumptions
    the development team uses for the initial MVA may lead to some overinvestment.
    This will correct itself once the feedback loop is working.'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: MVP 和其 MVA 就像两名被绳索系在一起的攀登者一样（见图 2）。MVP 是领头的攀登者，而 MVA 不能落后太远，否则会伤及 MVP。由于 MVP
    就像领头的攀登者，MVA 也没有必要超过 MVP。唯一的例外是系统初始发布的 MVA 必须有一个起点，并且开发团队对初始 MVA 使用的假设可能会导致一些过度投资。一旦反馈循环运转起来，这种情况将自行纠正。
- en: Like a climber exploring an unclimbed summit, the MVP may change their route
    based on feedback. The two climbers can move in tandem, but this isn’t the best
    solution; you will learn things in building the MVP that help to inform the decisions
    you will make to build the MVA (including whether to build it at all - metaphorically,
    to drop out of the ascent).
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 就像一个探索未攀登峰的攀登者一样，MVP 可能会根据反馈调整他们的路线。两名攀登者可以并肩前行，但这并不是最佳解决方案；在构建 MVP 过程中，您将学到一些信息，这些信息有助于决定是否以及如何构建
    MVA（包括是否建造它 - 比喻性地，放弃攀登）。
- en: 'Here are some rough heuristics from an earlier [article](https://www.infoq.com/articles/minimum-viable-architecture)
    that we’ve found useful:'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是来自早期 [文章](https://www.infoq.com/articles/minimum-viable-architecture) 的一些粗略启发，我们发现这些启发非常有用：
- en: '"If making (or not making) a decision will affect the product’s viability and
    sustainability, or if changing the decision would be so costly in terms of money
    or time that doing so would make the product uneconomic, impractical, or impossible,
    then that decision must be made as part of the MVA."'
  id: totrans-split-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"如果做出（或不做出）某个决策会影响产品的可行性和可持续性，或者更改决策在金钱或时间方面成本如此之高，以至于这样做会使产品变得经济不可行、不切实际或不可能，那么这个决策必须作为
    MVA 的一部分做出。"'
- en: '"Making the architectural decisions transparent helps the organization to better
    understand why certain choices have been made, which helps them make better decisions
    about how they can adapt the product to changing market conditions and evolving
    customer needs."'
  id: totrans-split-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"使架构决策透明化有助于组织更好地理解为何做出某些选择，这有助于他们在如何使产品适应不断变化的市场条件和客户需求方面做出更好的决策。"'
- en: '![](img/435af13eddbf49578d8cfe9ae40c4e67.png)'
  id: totrans-split-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/435af13eddbf49578d8cfe9ae40c4e67.png)'
- en: '**Figure 2: The MVP and MVA must remain closely linked to continue being both
    minimal and viable**'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2：MVP 和 MVA 必须保持紧密联系，以保持其最小和可行性**'
- en: Once you know the MVP is valuable and useful, evaluating the MVA will tell you
    whether the MVP is viable or whether it is simply an empty promise to its users.
    Unless the MVA is viable, the MVP will fail to deliver valuable outcomes over
    the long run. Coming back to the "roped climbers" metaphor, if the MVP is successful
    it also may sow the seeds for its downfall because it often creates a lot of technical
    debt that needs to be repaid in a hurry if the product is going to be viable in
    the long run.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您知道 MVP 是有价值和有用的，评估 MVA 将告诉您 MVP 是否是可行的，或者它只是对用户的空头承诺。除非 MVA 可行，否则 MVP 将无法在长期内提供有价值的成果。回到“绳索攀登者”的比喻，如果
    MVP 成功，它也可能为自己的失败埋下伏笔，因为它经常会产生大量的技术债务，需要尽快偿还，以确保产品在长期内可行。
- en: A development team can prevent some of this technical debt build-up if it adheres
    to a strong [Definition of Done](https://www.infoq.com/articles/definition-of-done-mva/).
    Most of the remaining MVP-created technical debt needs to be resolved as soon
    as the development team is confident that the MVP is valuable. Extending the "climber"
    metaphor, the length of the rope between the two climbers represents the amount
    of technical debt the development team is willing to incur while still keeping
    the product viable.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果开发团队遵循了强有力的 [Done 定义](https://www.infoq.com/articles/definition-of-done-mva/)，则可以防止部分技术债务的累积。大部分由
    MVP 创建的技术债务需要在开发团队确信 MVP 有价值后尽快解决。延伸“攀登者”隐喻，两名攀登者之间绳索的长度代表了开发团队在保持产品可行性的同时愿意承担的技术债务量。
- en: Responding to changes in the MVP
  id: totrans-split-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对 MVP 变化的响应
- en: Sometimes the feedback from delivering an MVP is not what the organization had
    hoped for. When this happens, the development team must significantly rework the
    MVP to respond to the feedback. Sometimes it even means more or less starting
    over and creating a new MVP, or even stopping work entirely if the business concept
    proves insufficiently valuable.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有时提供MVP的反馈并不是组织所希望的。当这种情况发生时，开发团队必须根据反馈进行重大改进。有时甚至意味着更多或更少地重新开始并创建一个新的MVP，甚至完全停止工作，如果业务概念证明不够有价值。
- en: 'When the MVP changes significantly, the development team *should* re-evaluate
    the associated MVA, even if it proved useful in the past. Maybe not all of it
    is needed. Maybe none of it is needed. Maybe something new and different is needed.
    Holding on to an old MVA, or one borrowed from another application, is a bit like
    traveling on a road that’s already built: it’s only valuable if it takes you where
    you want to go.'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当MVP发生重大变化时，开发团队 *应该* 重新评估相关的MVA，即使过去证明是有用的。也许并非所有内容都是必需的。也许根本不需要。也许需要新的不同的东西。坚持使用旧的MVA，或者从另一个应用程序借用的MVA，有点像走在已经建好的道路上：只有当它带你去想去的地方时才有价值。
- en: When an organization finds that an MVP is flawed and needs to be significantly
    reconsidered, it needs to reassess the MVA as well, even if they have invested
    substantially in it. This is true even when just a portion of the MVP turns out
    to be viable; as the MVA may be largely built to support the portions of the MVP
    that are no longer needed. Significant scope or vision changes need to trigger
    a reconsideration of the MVA, asking "Is this still minimal", or "Is this still
    viable?" and "How will we know?"
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个组织发现MVP存在缺陷，并且需要进行重大重新考虑时，它也需要重新评估MVA，即使他们已经大量投资于其中。即使只是MVP的一部分被证明是可行的；因为MVA可能主要是为支持不再需要的MVP部分而建立的。重大的范围或视野变化需要触发对MVA的重新考虑，问：“这仍然是最小的吗？”或者“这仍然是可行的吗？”以及“我们将如何知道？”
- en: Conclusion
  id: totrans-split-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Development teams and their organizations have a hard time reducing product
    releases to their absolute minimum because they feel that the release will be
    more valuable if they pack more capabilities into it. It *might* be more valuable,
    but it will also be delayed. Since the only way to know if a release is valuable
    is to release it and measure the result, delaying the release to add more capabilities
    may reduce the value of the release if the added capabilities are not valuable.
    For this reason, we like to limit incremental MVPs to a single outcome for a single
    group of users/customers.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队及其组织很难将产品发布降到绝对的最低程度，因为他们认为，如果将更多的功能打包进去，发布会更有价值。这 *可能* 会更有价值，但也会延迟发布。由于知道发布是否有价值的唯一方法是发布并测量结果，延迟发布以增加更多功能可能会降低发布的价值，如果添加的功能不具备价值性。因此，我们喜欢将增量的最小可行产品（MVP）限制为单一用户/客户群体的单一结果。
- en: It’s also important to consider the MVA alongside its associated MVP. If the
    MVP is not valuable then neither is the MVA. The MVA needs to support the long-term
    viability of the MVP, but only if that MVP is valuable. The MVA has to *anticipate*
    the future evolution of the MVPs but it does not need to solve those future problems
    yet. And it does not necessarily have to even solve them at the time the MVP is
    released.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 同时考虑MVA及其相关的MVP也是很重要的。如果MVP不具有价值，那么MVA也不具有价值。MVA需要支持MVP的长期可行性，但前提是MVP具有价值。MVA必须
    *预见* MVP的未来发展，但不需要在发布MVP时解决这些未来的问题。甚至在MVP发布时也不一定需要解决这些问题。
- en: The MVP and MVA are linked, and there is often a lag between the two, to avoid
    over-investing in the MVA when the MVP falls short of its goals. But it can’t
    fall too far behind or the MVP may not be supportable in the long run. In addition,
    the MVA for the initial release of a system has to start somewhere, and the assumptions
    the development team uses for the initial MVA may lead to some overinvestment.
    This will correct itself once the feedback loop is working.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: MVP和最小可行动作（MVA）是相互关联的，两者之间经常存在一段时间滞后，以避免在MVP未达到目标时过度投入于MVA。但是它不能落后太远，否则MVP在长期内可能无法得到支持。此外，系统初始版本的MVA必须从某个地方开始，并且开发团队用于初始MVA的假设可能导致一些过度投资。一旦反馈循环运作起来，这种情况将自行纠正。
