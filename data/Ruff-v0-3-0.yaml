- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:30:06'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:30:06
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Ruff v0.3.0
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ruff v0.3.0
- en: 来源：[https://astral.sh/blog/ruff-v0.3.0](https://astral.sh/blog/ruff-v0.3.0)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://astral.sh/blog/ruff-v0.3.0](https://astral.sh/blog/ruff-v0.3.0)
- en: '[Ruff v0.3.0](https://github.com/astral-sh/ruff) is available now! Install
    it from [PyPI](https://pypi.org/project/ruff/), or your package manager of choice:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[Ruff v0.3.0](https://github.com/astral-sh/ruff) 现已发布！您可以从 [PyPI](https://pypi.org/project/ruff/)
    或您选择的软件包管理器中安装它：'
- en: '[PRE0]'
  id: totrans-split-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As a reminder: **Ruff is an extremely fast Python linter and formatter, written
    in Rust.** Ruff can be used to replace Black, Flake8 (plus dozens of plugins),
    isort, pydocstyle, pyupgrade, and more, all while executing tens or hundreds of
    times faster than any individual tool.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下：**Ruff 是一个极快的用 Rust 编写的 Python linter 和 formatter。** Ruff 可以替代 Black、Flake8（加上数十个插件）、isort、pydocstyle、pyupgrade
    等工具，同时执行速度比任何单个工具快十倍甚至更多。
- en: In October, we announced the [production-ready Beta of Ruff's formatter](https://astral.sh/blog/the-ruff-formatter).
    Since then, we've focused on improving compatibility between the linter and formatter,
    fixing deviations from Black, and implementing Ruff's 2024.2 formatting style.
    This release promotes the formatter to stable and ships Ruff's 2024.2 style guide.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 十月份，我们宣布了 [Ruff 格式化器的生产就绪 Beta](https://astral.sh/blog/the-ruff-formatter)。自那以后，我们专注于改进
    linter 和 formatter 之间的兼容性，修复与 Black 的偏差，并实施 Ruff 2024.2 的格式化样式。此版本将格式化器提升为稳定版，并发布了
    Ruff 2024.2 样式指南。
- en: The Ruff 2024.2 style guide [#](#the-ruff-20242-style-guide)
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ruff 2024.2 样式指南 [#](#the-ruff-20242-style-guide)
- en: The new style guide follows the principle that Ruff is designed as a drop-in
    replacement for Black. It is heavily inspired by Black's 2024 stable style guide
    (released as part of [Black 24.1.0](https://github.com/psf/black/releases/tag/24.1.0)).
    We'd like to offer our thanks to the Black maintainers for their fantastic work
    leading the code style discussions and defining their new style guide.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 新的样式指南遵循这样一个原则，即 Ruff 被设计为 Black 的一个可替换组件。它深受 Black 2024 稳定样式指南的启发（作为 [Black
    24.1.0](https://github.com/psf/black/releases/tag/24.1.0) 的一部分发布）。我们要感谢 Black
    的维护者们在领导代码风格讨论和定义他们的新样式指南方面做出的出色工作。
- en: The rest of this section covers the highlights of Ruff's new style guide. Head
    to the [release](https://github.com/astral-sh/ruff/releases/tag/v0.3.0) for a
    detailed list of all style changes.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的其余部分涵盖了 Ruff 新样式指南的亮点。请前往 [发布页面](https://github.com/astral-sh/ruff/releases/tag/v0.3.0)
    查看所有样式更改的详细列表。
- en: Prefer wrapping an assignment's value [#](#prefer-wrapping-an-assignments-value)
  id: totrans-split-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推荐包装赋值的值 [#](#prefer-wrapping-an-assignments-value)
- en: Until now, Ruff preferred breaking an assignment's target over its value. The
    new style favors wrapping the assignment value before the assignment target or
    its type annotation.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Ruff 更喜欢在赋值目标之前而不是赋值值之前进行换行。新的样式偏好于在赋值目标或其类型注释之前包装赋值值。
- en: '[PRE1]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Parenthesize multiple context managers in `with` statements [#](#parenthesize-multiple-context-managers-in-with-statements)
  id: totrans-split-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 `with` 语句中给多个上下文管理器加括号 [#](#parenthesize-multiple-context-managers-in-with-statements)
- en: Previously, Ruff formatted context managers in `with` statements on a single
    line, even if they exceeded the configured line length. Ruff now parenthesizes
    long context managers when targeting Python 3.9 or later, and wraps them across
    multiple lines.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，Ruff 在 `with` 语句中格式化上下文管理器时，即使超过了配置的行长度，也会将它们放在单行上。现在，如果目标是 Python 3.9 或更高版本，则
    Ruff 在长上下文管理器上加括号，并跨多行进行包装。
- en: '[PRE2]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: More condensed formatting of functions and classes with a dummy body [#](#more-condensed-formatting-of-functions-and-classes-with-a-dummy-body)
  id: totrans-split-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用虚拟主体更紧凑地格式化函数和类 [#](#more-condensed-formatting-of-functions-and-classes-with-a-dummy-body)
- en: The new style reduces the vertical space for dummy implementations by collapsing
    the ellipsis (`...`) onto the same line. Blank lines between dummy function definitions
    are also now optional.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 新样式通过将省略号 (`...`) 折叠到同一行来减少虚拟实现的垂直空间。虚拟函数定义之间的空行现在也是可选的。
- en: '[PRE3]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Improved multiline string formatting [#](#improved-multiline-string-formatting)
  id: totrans-split-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进的多行字符串格式化 [#](#improved-multiline-string-formatting)
- en: In the 2023 style guide, Ruff always indented multiline strings, even if they
    were the only arguments to a function call. The new style guide avoids indenting
    multiline strings if the call's opening parentheses and the string's quotes are
    on the same line, reducing vertical space.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2023 年的样式指南中，Ruff 总是缩进多行字符串，即使它们是函数调用的唯一参数。新的样式指南避免缩进多行字符串，如果调用的开括号和字符串的引号在同一行上，则减少垂直空间。
- en: '[PRE4]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Range Formatting [#](#range-formatting)
  id: totrans-split-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范围格式化 [#](#range-formatting)
- en: Ruff v0.2.1 added support for range formatting. IDEs use range formatting to
    limit formatting to a selected range (known as *Format Selection* in VS Code)
    or to [modified lines](https://code.visualstudio.com/updates/v1_49#_only-format-modified-text)
    based on version control information.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: Ruff v0.2.1 添加了对范围格式化的支持。IDE 使用范围格式化来限制格式化到选择的范围内（在 VS Code 中称为 *格式化所选内容*）或者基于版本控制信息的[修改行](https://code.visualstudio.com/updates/v1_49#_only-format-modified-text)。
- en: 'Restricting formatting to modified lines is especially useful if:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只对修改后的行进行格式化限制，这将特别有用：
- en: Your project is incrementally adopting a formatter; or,
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的项目正在逐步采用格式化工具；或者，
- en: You're working on a project that doesn't use standardized formatting, but you'd
    like to use Ruff to format a specific region of code to which you've made changes.
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您正在处理一个不使用标准格式化的项目，但希望使用 Ruff 来格式化您已修改代码的特定区域。
- en: </static/WEBM/v0.3/format_modified_lines.webm>
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: </static/WEBM/v0.3/format_modified_lines.webm>
- en: The user adds a new argument to an existing function call. VS Code reformats
    the file on save using Ruff to format the call expression.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 用户向现有函数调用添加了一个新参数。VS Code 使用 Ruff 在保存时重新格式化文件以格式化调用表达式。
- en: In the above video, VS Code reformats the modified function call, but leaves
    the `__init__` function definition unaltered, since it wasn't changed by the user.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述视频中，VS Code 重新格式化了修改后的函数调用，但未更改 `__init__` 函数定义，因为用户未更改它。
- en: To enable formatting of modified lines in VS code, set `editor.formatOnSaveMode`
    to `"modificationsIfAvailable"`.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 VS Code 中启用修改行的格式化，请将 `editor.formatOnSaveMode` 设置为 `"modificationsIfAvailable"`。
- en: f-string placeholder formatting [#](#f-string-placeholder-formatting)
  id: totrans-split-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: f-string 占位符格式化 [#](#f-string-placeholder-formatting)
- en: Ruff v0.2.2 added support for formatting within f-strings (in `--preview`).
    You no longer need to manually format expressions inside placeholders; Ruff can
    take care of it for you.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: Ruff v0.2.2 添加了对 f-string 内部（在 `--preview` 中）格式化的支持。您不再需要手动格式化占位符内的表达式；Ruff
    可以为您处理。
- en: '[PRE5]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We're collaborating with Black to define a standardized style for f-string formatting.
    Please [share your feedback](https://github.com/astral-sh/ruff/discussions/9785)
    and help us shape f-string formatting going forward.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在与 Black 合作，为 f-string 格式化定义一个标准化的样式。请[分享您的反馈意见](https://github.com/astral-sh/ruff/discussions/9785)，帮助我们塑造未来的
    f-string 格式化。
- en: Lint for invalid formatter suppression comments [#](#lint-for-invalid-formatter-suppression-comments)
  id: totrans-split-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无效格式化抑制注释的 lint [#](#lint-for-invalid-formatter-suppression-comments)
- en: Ruff's formatter has stricter requirements on [formatter suppression comment](https://docs.astral.sh/ruff/formatter/#format-suppression)
    placement than Black, motivated in favor of predictable formatting.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: Ruff 的格式化器在 [格式化抑制注释](https://docs.astral.sh/ruff/formatter/#format-suppression)
    的放置上比 Black 更严格，以支持可预测的格式化。
- en: 'However, the difference has confused users, since it was unclear *why* Ruff
    ignored specific suppression comments that Black did not. Ruff v0.3.0 ships with
    the new lint rule [`RUF028`](https://docs.astral.sh/ruff/rules/RUF028), which
    identifies invalid formatter suppression comments; that is, `# fmt: off` comments
    that Ruff''s formatter will not respect.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，这种差异让用户感到困惑，因为不清楚为什么 Ruff 忽略了 Black 没有忽略的特定抑制注释。Ruff v0.3.0 提供了新的 lint 规则
    [`RUF028`](https://docs.astral.sh/ruff/rules/RUF028)，用于识别无效的格式化抑制注释；即 Ruff 格式化器不会尊重的
    `# fmt: off` 注释。'
- en: '[PRE6]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`RUF028` generates a diagnostic for the use of `# fmt: off` on the above snippet,
    because Ruff (unlike Black) doesn''t support `# fmt: off` inside expressions:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`RUF028` 生成了一个关于上述片段中使用 `# fmt: off` 的诊断，因为 Ruff（不像 Black）不支持在表达式中使用 `# fmt:
    off`：'
- en: '[PRE7]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Thank you! [#](#thank-you)
  id: totrans-split-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谢谢！[#](#thank-you)
- en: Thank you to everyone that provided feedback regarding the formatter and other
    changes included in Ruff's `--preview` mode, and especially, to our contributors.
    It's an honor building Ruff with you!
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢所有提供关于格式化器和其他 Ruff `--preview` 模式中包含的更改反馈的人，特别是感谢我们的贡献者。能与您一起构建 Ruff 是我们的荣幸！
- en: '* * *'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: View the full changelog on [GitHub](https://github.com/astral-sh/ruff/releases/tag/v0.3.0).
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [GitHub](https://github.com/astral-sh/ruff/releases/tag/v0.3.0) 上查看完整的更改日志。
- en: Read more about [Astral](https://astral.sh/about) — the company behind Ruff.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于 [Astral](https://astral.sh/about) — Ruff 背后公司的信息。
