- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 15:01:34'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:01:34
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Algorithms for Modern Hardware - Algorithmica
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代硬件算法 - Algorithmica
- en: 来源：[https://en.algorithmica.org/hpc/](https://en.algorithmica.org/hpc/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://en.algorithmica.org/hpc/](https://en.algorithmica.org/hpc/)
- en: This is an upcoming high performance computing book titled “Algorithms for Modern
    Hardware” by [Sergey Slotin](http://sereja.me/).
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是即将发布的高性能计算书籍《现代硬件算法》，作者是[Sergey Slotin](http://sereja.me/)。
- en: Its intended audience is everyone from performance engineers and practical algorithm
    researchers to undergraduate computer science students who have just finished
    an advanced algorithms course and want to learn more practical ways to speed up
    a program than by going from $O(n \log n)$ to $O(n \log \log n)$.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 它的预期读者是所有性能工程师和实用算法研究人员，以及刚刚完成高级算法课程并希望了解更多实用方法来加速程序的计算机科学本科生，方法不仅仅局限于从$O(n
    \log n)$到$O(n \log \log n)$。
- en: All book materials are [hosted on GitHub](https://github.com/algorithmica-org/algorithmica),
    with code in a [separate repository](https://github.com/sslotin/scmm-code). This
    isn’t a collaborative project, but any contributions and feedback are very much
    welcome.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所有书籍材料都托管在GitHub上，代码在[单独的存储库](https://github.com/sslotin/scmm-code)中。这不是一个协作项目，但非常欢迎任何贡献和反馈。
- en: FAQ
  id: totrans-split-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常见问题解答
- en: '**Bug/typo fixes.** If you spot an error on any page, please do one of these
    — in the order of preference:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bug/typo fixes.** 如果你在任何页面上发现错误，请按以下任一方法之一处理 — 依次优先：'
- en: fix it right away by either clicking on the pencil icon on the top right on
    any page (opens the [Prose](https://prose.io/) editor) or, more traditionally,
    by modifying the page directly on GitHub (the link to the source is also on the
    top right);
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 立即修复它，方法是点击任何页面右上角的铅笔图标（打开[Prose](https://prose.io/)编辑器），或者更传统地，直接在GitHub上修改页面（源链接也在右上角）；
- en: create [an issue on GitHub](https://github.com/algorithmica-org/algorithmica/issues);
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GitHub上[创建一个问题](https://github.com/algorithmica-org/algorithmica/issues);
- en: '[tell me](http://sereja.me/) about it directly;'
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[直接告诉我](http://sereja.me/)。'
- en: or leave a comment on some other website where it is being discussed — I read
    most of [HackerNews](https://news.ycombinator.com/from?site=algorithmica.org),
    [CodeForces](https://codeforces.com/profile/sslotin), and [Twitter](https://twitter.com/sergey_slotin)
    threads where I’m tagged.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 或在讨论它的其他网站上留下评论 — 我会阅读大部分被标记的[HackerNews](https://news.ycombinator.com/from?site=algorithmica.org)、[CodeForces](https://codeforces.com/profile/sslotin)和[Twitter](https://twitter.com/sergey_slotin)讨论帖。
- en: '**Release date.** The book is split into several parts that I plan to finish
    sequentially with long breaks in-between. Part I, Performance Engineering, is
    ~75% complete as of March 2022 and will hopefully be >95% complete by this summer.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**发布日期。** 本书分为几个部分，我计划顺序完成，并在其中长时间休息。第一部分，性能工程，截至2022年3月，完成约75%，希望到今年夏天时完成超过95%。'
- en: 'A “release” for an open-source book like this essentially means:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这样一本开源书籍，“发布”基本上意味着：
- en: finishing all essential sections and filling all the TODOs,
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成所有基本部分并填充所有的TODOs，
- en: mostly freezing the table of contents (except for the case studies),
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大部分时间冻结目录（除了案例研究），
- en: doing one final round of heavy copyediting (hopefully, with the help of a professional
    editor — I still haven’t figured out how commas work in English),
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行最后一轮重度剪辑（希望能得到专业编辑的帮助 — 我还没搞清楚逗号在英语中怎么用），
- en: drawing illustrations (I stole a lot of those that are currently displayed),
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作插图（目前显示的大部分都是我偷来的），
- en: making a print-optimized PDF and figuring out the best way to distribute it.
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作适合打印的PDF并找出最佳的分发方式。
- en: After that, I will mostly be fixing errors and only doing some minor edits reflecting
    the changes in technology or new algorithm advancements. The e-book/printed editions
    will most likely be sold on a “pay what you want” basis, and in any case, the
    web version will always be fully available online.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我将主要修复错误，只做一些反映技术变化或新算法进展的小修订。电子书/印刷版很可能以“随你付费”的方式销售，无论如何，网络版本始终完全在线上。
- en: '**Pre-ordering / financially supporting the book.** Due to my unfortunate citizenship
    and place of birth, you can’t — that is, until I find a way that at the same time
    complies with international sanctions, doesn’t sponsor [the war](https://en.wikipedia.org/wiki/2022_Russian_invasion_of_Ukraine),
    and won’t put me in prison for tax evasion.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**预订/财务支持这本书。** 由于我的不幸国籍和出生地，你不能 — 也就是说，直到我找到既符合国际制裁，又不资助[战争](https://en.wikipedia.org/wiki/2022_Russian_invasion_of_Ukraine)，并且不会因逃税而将我送进监狱的方法。'
- en: So, don’t bother. If you want to support this book, just share it and help fix
    typos — that would be enough.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，请不要烦恼。如果你想支持这本书，只需分享它并帮忙修复错别字 — 那就足够了。
- en: '**Translations.** The website has a separate functionality for creating and
    managing translations — and I’ve already been contacted by some nice people willing
    to translate the book into Italian and Chinese (and I will personally translate
    at least some of it into my native Russian).'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**翻译。** 该网站有一个单独的功能用于创建和管理翻译 — 我已经被一些愿意将这本书翻译成意大利语和汉语的友好人士联系过（我也将亲自翻译其中的一部分成为我的母语俄语）。'
- en: However, as the book is still evolving, it is probably not the best idea to
    start translating it at least until Part I is finished. That said, you are very
    much encouraged to make translations of any articles and publish them in your
    blogs — just send me the link so that we can merge it back when centralized translation
    starts.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，由于这本书还在不断发展中，现在开始翻译它至少要等到第一部分完成可能并不是最好的主意。尽管如此，非常鼓励你翻译任何文章并在你的博客上发布 — 只需把链接发给我，我们可以在集中翻译开始时将其合并回来。
- en: '**“Translating” the Russian version.** The articles hosted at [ru.algorithmica.org/cs/](https://ru.algorithmica.org/cs/)
    are not about advanced performance engineering but mostly about classical computer
    science algorithms — without discussing how to speed them up beyond asymptotic
    complexity. Most of the information there is not unique and already exists in
    English on some other places on the internet: for example, the similar-spirited
    [cp-algorithms.com](https://cp-algorithms.com/).'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**“翻译”俄文版本。** 托管在[ru.algorithmica.org/cs/](https://ru.algorithmica.org/cs/)上的文章不是关于高级性能工程，而主要是关于经典计算机科学算法
    — — 没有讨论如何超越渐近复杂性加速它们。那里的大部分信息并不独特，已经存在于互联网上的其他地方，例如类似精神的[cp-algorithms.com](https://cp-algorithms.com/)。'
- en: '**Teaching performance engineering in colleges.** One of my goals for writing
    this book is to change the way computer science — algorithm design, to be more
    precise — is taught in colleges. Let me elaborate on that.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**大学中的性能工程教学。** 我写这本书的一个目标是改变计算机科学 — 具体说来是算法设计在大学中的教学方式。让我详细解释一下。'
- en: There are two highly impactful textbooks on which most computer science courses
    are built. Both are undoubtedly outstanding, but [one of them](https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming)
    is 50 years old, and [the other](https://en.wikipedia.org/wiki/Introduction_to_Algorithms)
    is 30 years old, and [computers have changed a lot](/hpc/complexity/hardware)
    since then. Asymptotic complexity is not the sole deciding factor anymore. In
    modern practical algorithm design, you choose the approach that makes better use
    of different types of parallelism available in the hardware over the one that
    theoretically does fewer raw operations on galaxy-scale inputs.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机科学课程建立在两本极具影响力的教科书上。这两本书毫无疑问都是杰出的，但[其中一本](https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming)已有50年历史，[另一本](https://en.wikipedia.org/wiki/Introduction_to_Algorithms)则有30年历史，而[计算机](/hpc/complexity/hardware)自那时以来发生了很大的变化。渐近复杂性不再是唯一的决定因素。在现代实际算法设计中，你选择的方法更多地利用了硬件上可用的不同类型并行性，而不是理论上在银河规模输入上执行更少的原始操作。
- en: And yet, the computer science curricula in most colleges completely ignore this
    shift. Although there are some great courses that aim to correct that — such as
    “[Performance Engineering of Software Systems](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-172-performance-engineering-of-software-systems-fall-2018/)”
    from MIT, “[Programming Parallel Computers](https://ppc.cs.aalto.fi/)” from Aalto
    University, and some non-academic ones like Denis Bakhvalov’s “[Performance Ninja](https://github.com/dendibakh/perf-ninja)”
    — most computer science graduates still treat modern hardware like something from
    the 1990s.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，大多数大学的计算机科学课程完全忽视了这一变革。虽然有一些旨在纠正这一问题的优秀课程，比如来自麻省理工学院的“[软件系统性能工程](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-172-performance-engineering-of-software-systems-fall-2018/)”，阿尔托大学的“[并行计算机编程](https://ppc.cs.aalto.fi/)”，以及像Denis
    Bakhvalov的非学术课程“[性能忍者](https://github.com/dendibakh/perf-ninja)”等，但大多数计算机科学毕业生仍然把现代硬件看作是上世纪90年代的东西。
- en: 'What I really want to achieve is that performance engineering becomes taught
    right after introduction to algorithms. Writing the first comprehensive textbook
    on the subject is a large part of it, and this is why I rush to finish it by the
    summer so that the colleges can pick it up in the next academic year. But creating
    a new course requires more than that: you need a balanced curriculum, course infrastructure,
    lecture slides, lab assignments… so for some time after finishing the main book,
    I will be working on course materials and tools for *teaching* performance engineering
    — and I’m looking forward to collaborating with other people who want to make
    it a reality as well.'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我真正想要实现的是，在算法介绍之后立即开始教授性能工程。编写这门学科的第一本全面教材是其中的一部分，这也是我赶在夏季完成它的原因，以便大学可以在下一个学年推广它。但要创建一门新课程需要更多的内容：你需要一个平衡的课程设置，课程基础设施，讲座幻灯片，实验作业……因此，在完成主要著作之后的一段时间里，我将致力于课程材料和*教学*性能工程工具的开发——我期待与其他有意推动这一现实的人进行合作。
- en: 'Part I: Performance Engineering'
  id: totrans-split-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一部分：性能工程
- en: The first part covers the basics of computer architecture and optimization of
    single-threaded algorithms.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分涵盖了计算机体系结构的基础知识和单线程算法的优化。
- en: It walks through the main CPU optimization topics such as caching, SIMD, and
    pipelining, and provides brief examples in C++, followed by large case studies
    where we usually achieve a significant speedup over some STL algorithm or data
    structure.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 它详细介绍了主要的CPU优化主题，如缓存，SIMD和流水线，并提供了C++的简短示例，然后是大案例研究，在这些案例中，我们通常可以比STL算法或数据结构显著加快速度。
- en: 'Planned table of contents:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 计划目录：
- en: '[PRE0]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Among the cool things that we will speed up:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将加速的一些酷东西包括：
- en: 2x faster GCD (compared to `std::gcd`)
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2倍速度更快的最大公约数（与`std::gcd`相比）
- en: 8-15x faster binary search (compared to `std::lower_bound`)
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8-15倍速度更快的二分查找（与`std::lower_bound`相比）
- en: 5-10x faster segment trees (compared to Fenwick trees)
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5-10倍速度更快的段树（与Fenwick树相比）
- en: 5x faster hash tables (compared to `std::unordered_map`)
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5倍速度更快的哈希表（与`std::unordered_map`相比）
- en: 2x faster popcount (compared to repeatedly calling `popcnt`)
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2倍速度更快的popcount（与重复调用`popcnt`相比）
- en: 35x faster parsing series of integers (compared to `scanf`)
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 35倍速度更快的整数序列解析（与`scanf`相比）
- en: ?x faster sorting (compared to `std::sort`)
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ?倍速度更快的排序（与`std::sort`相比）
- en: 2x faster sum (compared to `std::accumulate`)
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2倍速度更快的求和（与`std::accumulate`相比）
- en: 2-3x faster prefix sum (compared to naive implementation)
  id: totrans-split-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2-3倍速度更快的前缀和（与朴素实现相比）
- en: 10x faster argmin (compared to naive implementation)
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10倍速度更快的argmin（与朴素实现相比）
- en: 10x faster array searching (compared to `std::find`)
  id: totrans-split-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10倍速度更快的数组搜索（与`std::find`相比）
- en: 15x faster search tree (compared to `std::set`)
  id: totrans-split-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15倍速度更快的搜索树（与`std::set`相比）
- en: 100x faster matrix multiplication (compared to “for-for-for”)
  id: totrans-split-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 100倍速度更快的矩阵乘法（与“for-for-for”相比）
- en: optimal word-size integer factorization (~0.4ms per 60-bit integer)
  id: totrans-split-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最优字长整数因式分解（每60位整数约0.4毫秒）
- en: optimal Karatsuba Algorithm
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最优Karatsuba算法
- en: optimal FFT
  id: totrans-split-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最优FFT
- en: 'Volume: 450-600 pages'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 页数：450-600页
- en: 'Release date: Q3 2022'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 发行日期：2022年第三季度
- en: 'Part II: Parallel Algorithms'
  id: totrans-split-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二部分：并行算法
- en: Concurrency, models of parallelism, context switching, green threads, concurrent
    runtimes, cache coherence, synchronization primitives, OpenMP, reductions, scans,
    list ranking, graph algorithms, lock-free data structures, heterogeneous computing,
    CUDA, kernels, warps, blocks, matrix multiplication, sorting.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 并发性，并行模型，上下文切换，绿色线程，并行运行时，缓存一致性，同步原语，OpenMP，归约，扫描，链表排名，图算法，无锁数据结构，异构计算，CUDA，内核，线程束，块，矩阵乘法，排序。
- en: 'Volume: 150-200 pages'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 页数：150-200页
- en: 'Release date: 2023-2024?'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: '发行日期: 2023-2024？'
- en: 'Part III: Distributed Computing'
  id: totrans-split-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '第三部分: 分布式计算'
- en: Metworking, message passing, actor model, communication-constrained algorithms,
    distributed primitives, all-reduce, MapReduce, stream processing, query planning,
    storage, sharding, compression, distributed databases, consistency, reliability,
    scheduling, workflow engines, cloud computing.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 网络，消息传递，Actor模型，通信受限算法，分布式基本功能，全归约，MapReduce，流处理，查询规划，存储，分片，压缩，分布式数据库，一致性，可靠性，调度，工作流引擎，云计算。
- en: 'Release date: ??? (more likely to be completed than not)'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: '发行日期: ???（更有可能完成）'
- en: 'Part IV: Software & Hardware'
  id: totrans-split-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '第四部分: 软件与硬件'
- en: LLVM IR, compiler optimizations & back-end, interpreters, JIT-compilation, Cython,
    JAX, Numba, Julia, OpenCL, DPC++, oneAPI, XLA, (basic) Verilog, FPGAs, ASICs,
    TPUs and other AI accelerators.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: LLVM IR，编译优化和后端，解释器，JIT编译，Cython，JAX，Numba，Julia，OpenCL，DPC++，oneAPI，XLA，（基本）Verilog，FPGAs，ASICs，TPUs以及其他人工智能加速器。
- en: 'Release date: ??? (less likely to be completed than not)'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: '发行日期: ???（不太可能完成）'
- en: Acknowledgements
  id: totrans-split-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 致谢
- en: 'The book is largely based on blog posts, research papers, conference talks,
    and other work authored by a lot of people:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: '本书主要基于博客文章、研究论文、会议演讲以及其他许多人所著作的作品:'
- en: 'Disclaimer: Technology Choices'
  id: totrans-split-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '免责声明: 技术选择'
- en: The examples in this book use C++, GCC, x86-64, CUDA, and Spark, although the
    underlying principles conveyed are not specific to them.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的示例使用了C++，GCC，x86-64，CUDA和Spark，尽管传达的底层原则并不特定于它们。
- en: 'To clear my conscience, I’m not happy with any of these choices: these technologies
    just happen to be the most widespread and stable at the moment and thus more helpful
    to the reader. I would have respectively picked C / Rust / [Carbon?](https://github.com/carbon-language/carbon-lang),
    LLVM, arm, OpenCL, and Dask; maybe there will be a 2nd edition in which some of
    the tech stack is changed.'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: '为了安抚我的良心，我对这些选择都不满意: 这些技术只是目前最普遍和稳定的，因此对读者更有帮助。 我本来会选择C / Rust / [Carbon?](https://github.com/carbon-language/carbon-lang),
    LLVM, arm, OpenCL和Dask；也许会有第二版，在其中一些技术栈会改变。'
