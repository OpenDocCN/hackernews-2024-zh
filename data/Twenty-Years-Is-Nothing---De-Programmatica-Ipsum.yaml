- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:36:29'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:36:29'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Twenty Years Is Nothing - De Programmatica Ipsum
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二十年不算什么 - De Programmatica Ipsum
- en: 来源：[https://deprogrammaticaipsum.com/twenty-years-is-nothing/](https://deprogrammaticaipsum.com/twenty-years-is-nothing/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://deprogrammaticaipsum.com/twenty-years-is-nothing/](https://deprogrammaticaipsum.com/twenty-years-is-nothing/)
- en: In a [previous edition of this magazine](/the-winner-takes-it-all/), we argued
    that English was so pervasive in our industry, nobody even questioned its use
    anymore. The same can be said of [Git](https://git-scm.com/). It is difficult
    to imagine that merely twenty years ago, the landscape of source control tools
    was more diverse, and the choice of one such tool was much more complicated than
    today. Actually, Git was not even on the map yet. Before debating whether the
    hegemony of Git is good or bad, let us go back in time for a little while.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在[本杂志的以前版本](/the-winner-takes-it-all/)中，我们曾经提出英语在我们行业中如此普遍，以至于没有人再质疑它的使用。同样的情况也适用于[Git](https://git-scm.com/)。很难想象仅仅二十年前，源代码控制工具的格局更加多样化，选择这样的工具比如今也更加复杂。实际上，Git
    甚至还没有出现在地图上。在讨论 Git 的霸权是好是坏之前，让我们先回到过去一小会儿。
- en: In [one of the most famous tangos](https://en.wikipedia.org/wiki/Volver_(song))
    of all time, [Carlos Gardel](https://en.wikipedia.org/wiki/Carlos_Gardel) famously
    sings
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在[最著名的探戈之一](https://en.wikipedia.org/wiki/Volver_(song))中，[Carlos Gardel](https://en.wikipedia.org/wiki/Carlos_Gardel)
    唱道
- en: To feel… that life is a breath of fresh air, that twenty years is nothing, that,
    feverish, the gaze wandering in the shadows seeks and names you.
  id: totrans-split-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 感到...生活就像一口新鲜的空气，二十年不算什么，那种狂热的眼神在阴影中游荡，寻找你的名字。
- en: Twenty Years Ago
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二十年前
- en: 'The second edition of “Code Complete” by [Steve McConnell](/steve-mcconnell/)
    was published in 2004\. On page 668 of this massive 900-page volume, we find the
    *only* reference to the subject of source control in the whole book: about three
    quarters of a page long. Nothing else. ChatGPT can easily summarize all of it
    with one phrase: “Version control software is good and brings several big benefits.”
    Not a lot to phone home about. We are really far from GitOps at this point.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 2004年出版的 [Steve McConnell](/steve-mcconnell/)的《代码大全》第二版。在这本厚达900页的巨著的668页，我们发现了书中唯一有关源代码控制的参考：大约不到一页的篇幅。除此之外没有其他内容。
    ChatGPT 可以轻松地用一句话总结："版本控制软件很好，带来了一些巨大的好处。” 至此离GitOps 还有很远的距离。
- en: That same year, almost exactly 20 years ago at the time of the publication of
    this article, [Subversion 1.0](https://en.wikipedia.org/wiki/Apache_Subversion)
    saw the light of day. What was Subversion? Probably the shortest lived idea-with-good-intentions
    in the history of computing. See, Subversion (or `svn`) was supposed to be a better
    CVS (no, not the [pharmacy](https://www.cvs.com/), but this [other thing](https://en.wikipedia.org/wiki/Concurrent_Versions_System)).
    “Better than CVS” meant, back in those days, to be transactional ([databases](/issue-61-databases/),
    anyone?) and to have a somewhat better support for branches. We did not have higher
    ambitions back then, kids.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 同年，距今本文发表时间几乎完全20年以前，[Subversion 1.0](https://en.wikipedia.org/wiki/Apache_Subversion)
    出现了。Subversion 是什么？可能是计算机历史上寿命最短的有良好意图的想法。Subversion（或`svn`）当时应该比CVS更好（不，不是这个[药店](https://www.cvs.com/)，而是这[个东西](https://en.wikipedia.org/wiki/Concurrent_Versions_System)）。所谓“比CVS更好”意味着当时，是事务性的，有点像[数据库](/issue-61-databases/)，并且对支持分支有略微更好的支持。那时候我们的抱负并没有那么高，
    孩子们。
- en: Linus Torvalds, however, did have higher ambitions. In 2004, the Linux kernel
    developers got in an increasingly strong disagreement over the use of [BitKeeper](https://en.wikipedia.org/wiki/BitKeeper),
    the proprietary, distributed version control system used to manage the kernel
    source code. So, what is a developer to do? Well, Linus has a tradition of writing
    the software everybody needs and nobody wants to start. He also has a tradition
    of [naming things after himself](https://www.wordnik.com/words/git). Legend says
    that the first version of Git was [written in a couple of weeks](https://www.linuxjournal.com/content/git-origin-story).
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Linus Torvalds 追求更高目标。2004年，Linux 内核开发者在如何使用[BitKeeper](https://en.wikipedia.org/wiki/BitKeeper)（专有的分布式版本控制系统，用于管理内核源代码）问题上出现了越来越激烈的分歧。那么，开发者该怎么做呢？好吧，Linus
    有一个通过写每个人都需要但却没有人想开始的软件的传统。他还有一个[以自己名字命名事物](https://www.wordnik.com/words/git)的传统。传说中
    Git 的第一个版本是[在几周内编写完成的](https://www.linuxjournal.com/content/git-origin-story)。
- en: CVS
  id: totrans-split-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CVS
- en: 'Never heard of CVS? It was a source control system that Joel Spolsky described
    in September 2000 as *fine* (emphasis his) in the first item of his eponymous
    [Joel Test](https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/)
    for better software:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从未听说过 CVS？这是 Joel Spolsky 在2000年9月描述的一种源代码控制系统，他称之为 *不错的* （他的强调），这是他提出的更好软件的
    [Joel 测试](https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/)
    的第一条：
- en: I’ve used commercial source control packages, and I’ve used CVS, which is free,
    and let me tell you, CVS is *fine*.
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我曾使用商业源代码控制包，也使用过免费的 CVS，让我告诉你，CVS 是 *不错的*。
- en: 'Yes, the first step for better software was (shocker!) using source control
    software. (As a side note, I started my professional career as a software developer
    in 1997, and nope, we did not use source control, not even CVS. Yes, you guessed
    right: we just saved VBScript files locally and uploaded them via FTP. Too bad
    if we overwrote changes with one another: you only live once. I had to wait until
    2002 to use a source control system for the first time, and for the curious among
    you, it was [Rational ClearCase](https://en.wikipedia.org/wiki/Rational_ClearCase).)'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，改进软件的第一步（震惊！）是使用源代码控制软件。（顺便说一下，我于1997年开始我的职业生涯时是一名软件开发人员，不，我们当时没有使用源代码控制，甚至没有使用
    CVS。是的，你猜对了：我们只是将 VBScript 文件保存在本地，然后通过 FTP 上传。如果我们互相覆盖了对方的更改，那就只能认了。直到2002年我才第一次使用源代码控制系统，好奇的人可以了解一下，那是
    [Rational ClearCase](https://en.wikipedia.org/wiki/Rational_ClearCase)。）
- en: Never heard of Joel Spolsky? Well, he was the co-creator of Stack Overflow,
    which I guess you *have* used at some point in your career. 24 years ago, Joel
    was one of the first influencers of the burgeoning field of software engineering.
    Think Kelsey Hightower, but with more controversial views. Or Steve Yegge, but
    with less controversial views.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从未听说过 Joel Spolsky？那么，他是 Stack Overflow 的联合创始人，我猜您在职业生涯中某个时候一定使用过。24年前，Joel
    是软件工程新兴领域中的首批影响者之一。可以把他想象成 Kelsey Hightower，但他的观点更具争议性。或者是 Steve Yegge，但他的观点不那么具有争议性。
- en: Speaking about Stack Overflow, here is an example of the state-of-the-art of
    source control in 2008\. One of the first-ever questions asked on the site, dated
    September 8th, 2008, asks precisely [what version control system to use](https://stackoverflow.com/questions/49601/is-there-a-barebones-windows-version-control-system-thats-suitable-for-only-one)
    for a single-developer workflow. (Interestingly, that question was asked precisely
    at the same time while in the real world, the [2008 financial crisis](https://en.wikipedia.org/wiki/2007%E2%80%932008_financial_crisis#2008_(September))
    was breaking havoc. Our industry lives in a bubble, no doubt about that. But I
    am digressing, once again.)
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到 Stack Overflow，这是2008年源代码控制的最新进展的一个例子。该站点上最早的问题之一，日期为2008年9月8日，准确地询问了 [应该使用哪个版本控制系统](https://stackoverflow.com/questions/49601/is-there-a-barebones-windows-version-control-system-thats-suitable-for-only-one)
    适合单人开发流程。（有趣的是，正是在那时候，现实世界中 [2008年金融危机](https://en.wikipedia.org/wiki/2007%E2%80%932008_financial_crisis#2008_(September))
    正在肆虐。毫无疑问，我们的行业确实生活在一个泡沫中。但我又岔开话题了。）
- en: I’m trying to find a source control for my own personal use that’s as simple
    as possible. The main feature I need is being able to read/pull a past version
    of my code. I am the only developer.
  id: totrans-split-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我正在尝试找一个我个人使用的尽可能简单的源代码控制工具。我最需要的主要功能是能够阅读/拉取我代码的早期版本。我是唯一的开发者。
- en: The replies to the question consist of a long catalog of pretty much every version
    control system known to mankind at that point in time.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对问题的回复包括一个长长的目录，几乎包含当时人类所知的所有版本控制系统。
- en: Windows’ Version Control Odyssey
  id: totrans-split-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows 的版本控制奥德赛
- en: 'But let us return to the year 2000: a few days before Joel Spolsky published
    his Joel Test, [Mark Lucovsky](https://www.linkedin.com/in/mark-lucovsky-5280034/)
    gave a talk titled [“Windows: A Software-Engineering Odyssey”](https://www.usenix.org/legacy/events/usenix-win2000/invitedtalks.html)
    at the [4th USENIX Windows System Symposium](https://www.usenix.org/legacy/events/usenix-win2000/)
    in Seattle, Washington. Mr. Lucovsky was a member of the original Windows NT team
    from 1988 to the mid-2000s. The PowerPoint slides of the talk [are still available
    online](https://www.usenix.org/legacy/events/usenix-win2000/invitedtalks/lucovsky_html/Lucovsky.ppt)
    at the time of this writing, and I seriously recommend you take a look at them.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '但是让我们回到 2000 年：在 Joel Spolsky 发布他的 Joel 测试的几天前，[Mark Lucovsky](https://www.linkedin.com/in/mark-lucovsky-5280034/)
    在 [第四届 USENIX Windows 系统研讨会](https://www.usenix.org/legacy/events/usenix-win2000/)
    上发表了题为 [“Windows: A Software-Engineering Odyssey”](https://www.usenix.org/legacy/events/usenix-win2000/invitedtalks.html)
    的演讲。Lucovsky 先生从 1988 年到 2000 年代中期都是最初的 Windows NT 团队成员。这次演讲的 PowerPoint 幻灯片 [目前还在网上](https://www.usenix.org/legacy/events/usenix-win2000/invitedtalks/lucovsky_html/Lucovsky.ppt)，我强烈推荐你看一下。'
- en: 'Because part of the “odyssey” was, you guessed it, source control. On slide
    14 you can learn that Windows NT 3.51 used an “internally developed” system… which
    was “on life support” by the time of Windows 2000:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因为“Odyssey”的一部分是，你猜对了，源代码控制。在 Lucovsky 先生的 PowerPoint 幻灯片第 14 页，你可以了解到 Windows
    NT 3.51 使用了一个“内部开发”的系统……到了 Windows 2000 时期已经“奄奄一息”：
- en: To keep a machine in synch was a huge chore (1 week to setup, 2 hours per-day
    to synchronize)
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 维护一台机器同步是一项巨大的工作（设置需要 1 周，每天同步需要 2 小时）
- en: 'Oops. Not a great way to onboard new team members. Now you know why the [Agile
    Manifesto](https://agilemanifesto.org/), published in 2001, was so revolutionary.
    Thanks to [Raymond Chen](https://devblogs.microsoft.com/oldnewthing/), arguably
    the most important lecturer of Windows history, [we learn the name](https://devblogs.microsoft.com/oldnewthing/20180122-00/?p=97855)
    of said internally developed system:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕。这不是一个很好的新团队成员入职方式。现在你知道为什么 [敏捷宣言](https://agilemanifesto.org/)，发布于 2001 年，如此革命性了。多亏了
    [Raymond Chen](https://devblogs.microsoft.com/oldnewthing/)，可能是 Windows 历史上最重要的讲师之一，我们得知了这个内部开发的系统的名字：[在此](https://devblogs.microsoft.com/oldnewthing/20180122-00/?p=97855)。
- en: In the early days, Microsoft used a homemade source control system formally
    called Source Library Manager, but which was generally abbreviated SLM, and pronounced
    *slime*. It was a simple system that did not support branching.
  id: totrans-split-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在早期，微软使用了一个自制的源代码控制系统，正式称为 Source Library Manager，但通常简称为 SLM，并发音为 *slime*。这是一个简单的系统，不支持分支。
- en: 'In slide 24 of Mark Lucovsky’s PowerPoint slides, we learn that Microsoft took
    the decision to migrate the source code of Windows 2000 to something called “Source
    Depot”. Raymond Chen [agrees](https://devblogs.microsoft.com/oldnewthing/20180122-00/?p=97855):'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mark Lucovsky 先生的 PowerPoint 幻灯片第 24 页，我们了解到微软决定将 Windows 2000 的源代码迁移到一个名为
    “Source Depot” 的东西。Raymond Chen [同意](https://devblogs.microsoft.com/oldnewthing/20180122-00/?p=97855)：
- en: Shortly after Windows 2000 shipped, the Windows source code transitioned to
    a source control system known as Source Depot, which was an authorized fork of
    Perforce.
  id: totrans-split-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Windows 2000 发布不久后，Windows 源代码过渡到了一个名为 Source Depot 的源代码控制系统，这是 Perforce 的授权分支。
- en: 'Why Perforce? The choice [had to do](https://softwareengineering.stackexchange.com/a/85891)
    with the gigantic size of Microsoft Windows’ source code base:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么选择 Perforce？这个选择与微软 Windows 源代码库的巨大规模有关：
- en: The justification is perhaps less relevant than it once was, but Perforce tends
    to perform better on large repositories than Subversion. This is one of the reasons
    Microsoft acquired a source license to Perforce to build Source Depot; NT’s repository
    is a monster, and not many products, commercial or otherwise, could handle it.
  id: totrans-split-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 理由或许不如以前那么重要了，但是对于大型仓库，Perforce 比 Subversion 的性能更好。这也是为什么微软获取了 Perforce 的源代码许可来构建
    Source Depot 的原因之一；NT 的代码库非常庞大，不多的产品，无论是商业产品还是其他产品，都能处理它。
- en: 'Mark Lucovsky’s summarized the benefits of Source Depot in two bullet points
    on slide 24 of his presentation:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: Mark Lucovsky 在他的演讲第 24 页中概述了 Source Depot 的两个优点：
- en: New machine setup 3 hours vs. 1 week
  id: totrans-split-32
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新机器设置 3 小时 vs. 1 周
- en: Normal sync 5 minutes vs. 2 hours
  id: totrans-split-33
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正常同步 5 分钟 vs. 2 小时
- en: 'Is the Microsoft Windows team still using Source Depot today? Apparently not.
    In 2017, we learned that Microsoft migrated all 300 GB of Windows source code
    to Git [in an article on Ars Technica](https://arstechnica.com/information-technology/2017/02/microsoft-hosts-the-windows-source-in-a-monstrous-300gb-git-repository/),
    which contains another gem describing the “Microsoft odyssey” in source control
    systems:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 微软 Windows 团队今天是否仍在使用 Source Depot？显然不是。在 2017 年，我们了解到微软将所有 300GB 的 Windows
    源代码迁移到 Git，[详见 Ars Technica 文章](https://arstechnica.com/information-technology/2017/02/microsoft-hosts-the-windows-source-in-a-monstrous-300gb-git-repository/)，其中还描述了在源代码控制系统中的“微软奥德赛”。
- en: Long ago, the company had a thing called SourceSafe, which was reputationally
    the moral equivalent to tossing all your precious source code in a trash can and
    then setting it on fire thanks to the system’s propensity to corrupt its database.
  id: totrans-split-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 很久以前，公司有一个叫做 SourceSafe 的东西，它在名誉上相当于把所有珍贵的源代码扔进垃圾桶，然后点火，这要归因于系统倾向于损坏其数据库。
- en: (I can confirm. Sadly, I should say.)
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: （我可以确认。遗憾的是，我得这么说。）
- en: 'Microsoft’s adoption of Git, however, [was not without hurdles](https://arstechnica.com/information-technology/2017/05/90-of-windows-devs-now-using-git-creating-1760-windows-builds-per-day/),
    and led to the creation of the Git Virtual File System (GVFS) project:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，微软采用 Git 并不是一帆风顺，并导致了 Git 虚拟文件系统（GVFS）项目的创建：[来源](https://arstechnica.com/information-technology/2017/05/90-of-windows-devs-now-using-git-creating-1760-windows-builds-per-day/)
- en: But Git isn’t designed to handle 300GB repositories made up of 3.5 million files.
    Microsoft had to embark on a project to customize Git to enable it to handle the
    company’s scale.
  id: totrans-split-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 但 Git 并不是设计用来处理由 3.5 百万文件组成的 300GB 仓库的。微软必须启动一个项目来定制 Git，以使其能够处理公司的规模。
- en: The Age Of Git
  id: totrans-split-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git 时代
- en: The infatuation of Microsoft with Git reached its peak in 2018, when [it swallowed
    GitHub](https://news.microsoft.com/2018/06/04/microsoft-to-acquire-github-for-7-5-billion/),
    the platform that arguably made Git mainstream. Three years prior, sensing *l’air
    du* temps, they had released [Visual Studio Code](https://en.wikipedia.org/wiki/Visual_Studio_Code),
    with integrated Git support.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 微软对 Git 的热情在 2018 年达到了顶峰，当时[它吞并了 GitHub](https://news.microsoft.com/2018/06/04/microsoft-to-acquire-github-for-7-5-billion/)，这个平台可以说是让
    Git 成为主流。三年前，感受到了*时代的气息*，他们发布了[Visual Studio Code](https://en.wikipedia.org/wiki/Visual_Studio_Code)，内置了
    Git 支持。
- en: 'GitHub introduced the concept of Pull Requests to the world [as early as February
    2008](https://github.blog/2008-02-23-oh-yeah-there-s-pull-requests-now/), a feature
    later adopted and adapted by [GitLab](https://docs.gitlab.com/ee/user/project/merge_requests/),
    [Gitea](https://docs.gitea.com/next/usage/pull-request) (and its recent fork [Forgejo](https://forgejo.org/docs/latest/user/pull-requests-and-git-flow/)),
    and [BitBucket](https://support.atlassian.com/bitbucket-cloud/docs/tutorial-learn-about-bitbucket-pull-requests/),
    and which became the bread-and-butter for code reviews during the past 15 years.
    But the matter of fact is that GitHub also created a paradox in the world of Git:
    suddenly, a distributed source control system… became centralized. Some are understandably
    [aghast](https://blog.edwardloveall.com/lets-make-sure-github-doesnt-become-the-only-option)
    by this state of things.'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 早在 2008 年 2 月就向世界介绍了 Pull Requests 的概念，后来被[GitLab](https://docs.gitlab.com/ee/user/project/merge_requests/)、[Gitea](https://docs.gitea.com/next/usage/pull-request)（及其最新的分支[Forgejo](https://forgejo.org/docs/latest/user/pull-requests-and-git-flow/)）以及[BitBucket](https://support.atlassian.com/bitbucket-cloud/docs/tutorial-learn-about-bitbucket-pull-requests/)采纳和调整，这在过去的
    15 年里成为了代码审查的重要工具。但事实是，GitHub 在 Git 的世界中也造成了一个悖论：一个分布式源代码控制系统…… 突然变成了集中式的。一些人对此感到[惊讶](https://blog.edwardloveall.com/lets-make-sure-github-doesnt-become-the-only-option)。
- en: 'We are in 2024, and Git is everywhere. The long evolution that led to the Git
    supremacy in the 2010s and, apparently, also the 2020s, can be summarized as a
    sequence of open-source programs, one replacing the other: [SCCS](https://en.wikipedia.org/wiki/Source_Code_Control_System)
    in the 1970s, [RCS](https://en.wikipedia.org/wiki/Revision_Control_System) in
    the 1980s, CVS in the 1990s, and Subversion in the 2000s. To ensure smooth migration
    paths, Subversion could import CVS repositories, and Git can import Subversion
    repositories. But most importantly, version control systems migrated from local-only
    systems like SCCS and RCS, to client-server architectures (CVS and Subversion),
    to distributed systems, like Git and others, most notably [Mercurial](https://www.mercurial-scm.org/).'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在是2024年，Git 无处不在。导致Git在2010年代及显然在2020年代也称霸的漫长演进可以总结为一系列开源程序的演变：70年代的[SCCS](https://en.wikipedia.org/wiki/Source_Code_Control_System)，80年代的[RCS](https://en.wikipedia.org/wiki/Revision_Control_System)，90年代的CVS，和2000年代的Subversion。为了确保平稳的迁移路径，Subversion
    可以导入CVS仓库，而Git可以导入Subversion仓库。但更重要的是，版本控制系统从像SCCS和RCS这样的仅本地系统，向客户端-服务器架构（如CVS和Subversion），再到分布式系统（如Git和其他系统，尤其是[Mercurial](https://www.mercurial-scm.org/)）迁移。
- en: (Speaking about Mercurial, did you know that the Firefox developers recently
    [decided to drop it](https://glandium.org/blog/?p=4346) and use Git instead?)
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: （说到Mercurial，你知道Firefox开发者最近[决定放弃它](https://glandium.org/blog/?p=4346)并改用Git了吗？）
- en: 'These days, we are used to *cloning* an entire project on our computer, after
    which we can safely plug it off the network and continue writing software in a
    completely disconnected way. This simple paradigm was utterly and completely unthinkable
    20 years ago. And guess what: your local repository also contains the full history
    of every single change ever made to your project. This was a feature that, naturally,
    client-server systems could never provide (spoiler alert: the server had the full
    history, while clients had only the `HEAD`, so to speak).'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，我们习惯于*克隆*整个项目到我们的计算机上，之后我们可以安全地断开网络，继续以完全脱机的方式编写软件。这种简单的范式在20年前是完全不可想象的。而且你的本地仓库还包含了项目的每一个修改的完整历史记录。这是一个特性，客户端-服务器系统自然无法提供（剧透：服务器有完整的历史记录，而客户端只有`HEAD`，可以这么说）。
- en: Git (and its cheap branching facilities) had a lasting impact on developer workflows.
    Vincent Driessen published in January 2010 a seminal article titled [“A successful
    Git branching model”](https://nvie.com/posts/a-successful-git-branching-model/)
    introducing the world to the [controversial](https://web.archive.org/web/20111007075151/http://scottchacon.com/2011/08/31/github-flow.html)
    concept of git-flow. Why controversial? Well, because most opinions in the software
    industry are such. Now there is a [GitHub flow](https://docs.github.com/en/get-started/using-github/github-flow)
    and an [Atlassian Gitflow workflow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow)
    and many more branching workflows available.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: Git（及其便宜的分支设施）对开发者工作流产生了持久的影响。Vincent Driessen 在 2010 年 1 月发布了一篇开创性的文章，标题为[“一个成功的Git分支模型”](https://nvie.com/posts/a-successful-git-branching-model/)，向世界介绍了[有争议的](https://web.archive.org/web/20111007075151/http://scottchacon.com/2011/08/31/github-flow.html)git-flow的概念。为什么有争议？嗯，因为软件行业的大多数意见都是这样的。现在有一个[GitHub
    flow](https://docs.github.com/en/get-started/using-github/github-flow)，还有一个[Atlassian
    Gitflow workflow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow)，以及许多其他的分支工作流可供选择。
- en: Git repositories have become eventful, with every push, merge, or tag operation
    triggering a workflow somewhere. A whole industry has sprung up, including names
    such as [Argo CD](https://argoproj.github.io/cd/), [GitHub Actions](https://docs.github.com/en/actions),
    [GitLab CI/CD pipelines](https://docs.gitlab.com/ee/ci/pipelines/), and [Gitea
    Runner](https://about.gitea.com/products/runner/), providing a new level of automation
    and convenience. The influence of Git is so strong in this space that the term
    [GitOps](https://www.gitops.tech/) now refers to a whole subset of our industry.
    But you should not be using branches for deployments, [you have been warned](https://codefresh.io/blog/stop-using-branches-deploying-different-gitops-environments/).
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: Git 仓库变得丰富多彩，每次推送、合并或标签操作都会触发某个工作流。整个行业已经涌现出来，包括诸如 [Argo CD](https://argoproj.github.io/cd/),
    [GitHub Actions](https://docs.github.com/en/actions), [GitLab CI/CD pipelines](https://docs.gitlab.com/ee/ci/pipelines/),
    和 [Gitea Runner](https://about.gitea.com/products/runner/) 等名称，提供了新的自动化和便利水平。Git
    在这个领域的影响力非常强大，以至于术语 [GitOps](https://www.gitops.tech/) 现在指的是我们行业的一个子集。但是，你不应该将分支用于部署，[已经警告过你了](https://codefresh.io/blog/stop-using-branches-deploying-different-gitops-environments/)。
- en: 'The question is simple now: what comes after Git? At this point, it is probably
    impossible to challenge the immense popularity of Git. I say “*probably*” because
    in our industry, it is impossible to predict the future. There are two interesting
    contenders worthy of mention: [Pijul](https://pijul.org/ "https://pijul.org/"),
    written in Rust (although the project [started with OCaml](https://github.com/8l/pijul
    "https://github.com/8l/pijul") a decade ago) or [Fossil](https://fossil-scm.org/
    "https://fossil-scm.org/"), written by the creators of SQLite. In this last case,
    the SQLite team provides [a list of reasons](https://sqlite.org/whynotgit.html)
    why not to use Git:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在问题很简单：Git 之后又会出现什么？在这一点上，挑战 Git 的巨大流行可能是不可能的。我说“*可能*”是因为在我们的行业中，预测未来是不可能的。有两个有趣的竞争者值得一提：[Pijul](https://pijul.org/
    "https://pijul.org/")，用 Rust 编写（尽管该项目 [十年前用 OCaml 开始](https://github.com/8l/pijul
    "https://github.com/8l/pijul/")）或者 [Fossil](https://fossil-scm.org/ "https://fossil-scm.org/")，由
    SQLite 创建者编写。在后一种情况下，SQLite 团队提供了 [不使用 Git 的理由列表](https://sqlite.org/whynotgit.html)：
- en: Let’s be real. Few people dispute that Git provides a suboptimal user experience.
    A lot of the underlying implementation shows through into the user interface.
    The interface is so bad that there is even a parody site that generates [fake
    git man pages](https://git-man-page-generator.lokaltog.net/).
  id: totrans-split-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 老实说，很少有人会争论 Git 提供了一种次优的用户体验。许多底层实现都反映在用户界面中。界面糟糕到了连一个恶搞网站都出现了，用来生成 [fake git
    man pages](https://git-man-page-generator.lokaltog.net/)。
- en: While we wait for a better alternative, let us read the `man 7 giteveryday`
    page and call [git-extras](https://github.com/tj/git-extras), [SourceTree](https://www.sourcetreeapp.com/),
    [TortoiseGit](https://tortoisegit.org/), [Fugitive](https://github.com/tpope/vim-fugitive),
    [Codeberg](https://codeberg.org/), and [Magit](https://magit.vc/) to the rescue.
    It seems that, whether we like it or not, we will probably be storing our source
    code in Git repositories for the next twenty years.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 等待更好的替代方案时，我们可以阅读 `man 7 giteveryday` 页面，并依赖于 [git-extras](https://github.com/tj/git-extras),
    [SourceTree](https://www.sourcetreeapp.com/), [TortoiseGit](https://tortoisegit.org/),
    [Fugitive](https://github.com/tpope/vim-fugitive), [Codeberg](https://codeberg.org/),
    和 [Magit](https://magit.vc/)。无论我们喜欢与否，看起来在接下来的二十年里我们都可能将源代码存储在 Git 仓库中。
- en: Cover photo by [Praveen Thirumurugan](https://unsplash.com/@praveentcom?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/a-book-and-a-small-figurine-on-a-desk-KPAQpJYzH0Y?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash).
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 封面照片由 [Praveen Thirumurugan](https://unsplash.com/@praveentcom?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    拍摄，来源于 [Unsplash](https://unsplash.com/photos/a-book-and-a-small-figurine-on-a-desk-KPAQpJYzH0Y?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)。
- en: Continue reading "
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 继续阅读 "
- en: '[Linus Torvalds](https://deprogrammaticaipsum.com/linus-torvalds/)'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[Linus Torvalds](https://deprogrammaticaipsum.com/linus-torvalds/)'
- en: '" or go back to'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: '"或者返回'
- en: '[Issue 066: Version Control](/issue/issue-066-version-control)'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[Issue 066: 版本控制](/issue/issue-066-version-control)'
- en: . Did you like this article? Consider
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 。你喜欢这篇文章吗？考虑
- en: '[subscribing](/newsletter/)'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[订阅](/newsletter/)'
- en: to our newsletter or
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 到我们的通讯或者
- en: '[contributing](/contribute/)'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[贡献](/contribute/)'
- en: to the sustainability of this magazine. Thanks!
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对这本杂志的可持续性做出了贡献。谢谢！
