- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 12:49:16'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 12:49:16
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Programming beyond paradigms - Micah Cantor
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超越范式的编程 - Micah Cantor
- en: 来源：[https://www.micahcantor.com/blog/programming-beyond-paradigms/](https://www.micahcantor.com/blog/programming-beyond-paradigms/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.micahcantor.com/blog/programming-beyond-paradigms/](https://www.micahcantor.com/blog/programming-beyond-paradigms/)
- en: <main class="article-content">[](/ "back")
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main class="article-content">[](/ "返回")
- en: Programming beyond paradigms
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超越范式的编程
- en: '*Why the next paradigm in programming is no paradigm at all.*'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么编程的下一个范式是无范式。*'
- en: 'Published: March 31, 2024'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2024年3月31日
- en: '* * *'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Since the invention of high-level programming languages, programming has been
    dominated by paradigms. From imperative to object-oriented to functional, paradigms
    shape much of the modern discourse around programming languages.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 自从高级编程语言的发明以来，编程一直被范式主导。从命令式到面向对象再到函数式，范式在编程语言的现代讨论中起着重要作用。
- en: 'Paradigms are often used to categorize the many different languages, styles,
    and eras of programming. Many universities also structure their curricula around
    paradigms, offering courses in different styles of progamming. And of course paradigms
    are an endless topic of debate among programmers: countless blog posts have been
    written on why functional is superior to object-oriented programming, and vice-versa.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 范式经常用于分类不同语言、风格和编程时代。许多大学还以范式为结构，开设不同编程风格的课程。当然，范式也是程序员之间无休止辩论的话题：无数博客文章讨论了为何函数式优于面向对象编程，反之亦然。
- en: 'This leads to a natural question: *what really is a programming paradigm?*
    The most common understanding is that a paradigm is a set of features in a progamming
    language that determine its control flow or type system. For instance, this definition
    can be applied to three prototypical languages created in the 20th century:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这引出一个自然的问题：*什么才是真正的编程范式？* 最常见的理解是，范式是编程语言中确定其控制流或类型系统的一组特征。例如，这一定义适用于20世纪创建的三种典型语言：
- en: C is an imperative language; its programs are composed of statements and procedures
    that are executed top-to-bottom.
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C 是一种命令式语言；其程序由逐行执行的语句和过程组成。
- en: Java is an object-oriented language; its programs are composed of objects that
    interact through dynamic dispatch.
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 是一种面向对象的语言；其程序由通过动态分派相互交互的对象组成。
- en: Haskell is a functional language; its programs are evaluated by the composition
    and application of pure functions.
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Haskell 是一种函数式语言；其程序通过纯函数的组合和应用进行评估。
- en: Programming languages of the past were limited in the number and breadth of
    features they could offer. For Java and Haskell, the language designers chose
    a set of features that they felt would produce the best programs. The creators
    of C did the same, but were also limited by the feasibility of a feature's implementation.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 过去的编程语言在能够提供的功能数量和广度方面受到限制。对于Java和Haskell，语言设计者选择了一组他们认为能产生最佳程序的功能。C的创建者也是如此，但同时也受到了功能实现可行性的限制。
- en: 'But modern programming languages are far less limited in the scope of features
    they choose to include and their capacity to do so. This has led many languages
    to adopt a new and somewhat confounding adjective: *multi-paradigm*.'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但现代编程语言在选择要包含的功能范围及其实现能力方面远不如此限制。这导致许多语言采用了一个新的且有些令人困惑的形容词：*多范式*。
- en: Indeed, almost all modern languages are best described as multi-paradigm, which
    deflates the significance of the term. The latest versions of Python, JavaScript,
    and even Java all offer the features needed for functional programming alongside
    imperative and object-oriented progamming. The same could be said for C++, C#,
    OCaml, and more.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，几乎所有现代语言最好被描述为多范式，这减少了该术语的重要性。Python、JavaScript，甚至是Java的最新版本，都提供了函数式编程、命令式编程和面向对象编程所需的功能。同样适用于C++、C#、OCaml等语言。
- en: Due to the relative feature-set equality between languages, I believe that programming
    paradigms are now best understood as a *style* of programming, rather than as
    an exclusive set of features. Since almost all languages are multi-paradigm, we
    can't categorize an entire language under a single paradigm. But we can still
    compare how particular programs, or parts of programs, use one paradigm or another
    across languages.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于语言之间的特性基本相等，我认为编程范式现在最好理解为编程的*风格*，而不是一组独有的特性。由于几乎所有语言都是多范式的，我们不能把整个语言归类为单一范式。但我们仍然可以比较不同语言中特定程序或程序部分如何使用一种或另一种范式。
- en: General purpose languages of the 21st century don't define themselves by a single
    paradigm anymore, nor do they use the term multi-paradigm. The unifying aspect
    of new languages such as [Rust](https://www.rust-lang.org/), [Nim](https://nim-lang.org/),
    and [Gleam](https://gleam.run/) is that they were designed from the beginning
    to be **beyond paradigms**.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 21世纪的通用编程语言不再通过单一的范式来定义自己，也不再使用多范式这个术语。像[Rust](https://www.rust-lang.org/)、[Nim](https://nim-lang.org/)和[Gleam](https://gleam.run/)等新语言的统一之处在于它们从一开始就被设计成**超越范式**。
- en: These post-paradigm languages draw on the best features of past languages and
    refuse to limit the programmer to a single style. This puts more power and creativity
    in the hands of the programmer rather than the language designer. Programming
    styles in these languages are meant to be mismatched and combined, rather than
    adhered to under a single dogmatic paradigm.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些后范式语言汲取了过去语言的最佳特性，并且拒绝将程序员限制在单一的风格中。这使得程序员而不是语言设计者拥有了更多的权力和创造力。这些语言中的编程风格旨在不匹配和组合，而不是在单一教条的范式下遵循。
- en: Programming languages of the future will continue to prioritize the inclusion
    of the best individual features in their language or tooling, regardless of paradigm.
    I think there will continue to be a great diversity between different languages,
    but the best aspects of each programming paradigm refuse to be siloed.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的编程语言将继续优先考虑在语言或工具中包含最佳的个别特性，而不考虑范式。我认为不同语言之间将继续存在巨大的多样性，但每种编程范式的最佳方面都拒绝被局限于一种独特的范式之下。
- en: </main>
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
