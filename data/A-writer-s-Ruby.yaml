- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:31:32'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:31:32
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: A writer's Ruby
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个作家的 Ruby
- en: 来源：[https://world.hey.com/dhh/a-writer-s-ruby-2050b634](https://world.hey.com/dhh/a-writer-s-ruby-2050b634)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://world.hey.com/dhh/a-writer-s-ruby-2050b634](https://world.hey.com/dhh/a-writer-s-ruby-2050b634)
- en: 'Programmers at large seem eternally skeptical of style. And I’m not just talking
    about the stereotype of nerds in uncoordinated outfits or using pocket protectors.
    But style in the broad sense of aesthetics. Many appear imbued with fundamental
    opposition to the idea that how something looks should even matter. That somehow
    such a focus is conflict with where it ought to be: on substance. This is very
    apparent in the discussion about linting code.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数程序员似乎对风格持续持怀疑态度。我不仅仅是在谈论那些穿着不协调或使用袖珍护具的书呆子的刻板印象。而是在广义上的审美风格。许多人似乎根深蒂固地反对甚至关注某物的外观是否重要的想法。他们认为这种关注与应该关注的地方——实质——相冲突。这在关于代码风格检查的讨论中非常明显。
- en: Linting is a term for applying a consistent style to source code. Like following
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 代码风格检查是一个将一致的样式应用于源代码的术语。就像遵循
- en: '[Strunk & White’s grammatical guidelines](https://www.amazon.com/Elements-Style-Fourth-William-Strunk/dp/020530902X)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[斯特兰克与怀特的语法指南](https://www.amazon.com/Elements-Style-Fourth-William-Strunk/dp/020530902X)'
- en: for prose, but automatically enforced by a linting program. It’s a technique
    that’s been around for a long time, but one that’s seen broader adoption with
    the advent of cloud-based continuous integration setups, which run tests, and
    now linting, on every pull request prepared.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 用于散文，但由一个代码检查程序自动执行。这是一个已经存在很长时间的技术，但随着基于云的持续集成设置的出现，它已经被更广泛地采用，这些设置在准备每个拉取请求时运行测试，现在还运行代码风格检查。
- en: Some languages, like Go, have
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一些语言，比如 Go，有
- en: '[a built-in linter](https://go.dev/blog/gofmt)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[内置代码检查程序](https://go.dev/blog/gofmt)'
- en: ', which applies a universal style that’s been set by the language designers.
    That’s the most totalitarian approach. A decree on what a program should look
    like that’s barely two feet removed from a compile error. I don’t like that one
    bit.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ，它采用了一种被语言设计者设定的通用风格。这是最极权主义的方法。一个几乎与编译错误相差无几的程序样式规定。我一点也不喜欢那个。
- en: It reminds me of
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它让我想起了
- en: '[Newspeak](https://bookanalysis.com/1984/newspeak/)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[新话](https://bookanalysis.com/1984/newspeak/)'
- en: ', the new INGSOC language from Orwell’s 1984\. Not because of any sinister
    political undertones, but in the pursuit of a minimalist language, with no redundant
    terms or ambiguities or flair. Imagine every novel written in the same style,
    Hemingway indistinguishable from Dickens, Tolkien from Rowling. It would be awfully
    gray to enjoy the English language if there was only a single shade of prose.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ，奥威尔的《1984》中的新 INGSOC 语言。并不是因为有任何邪恶的政治含义，而是为了追求一种极简主义语言，没有多余的术语或歧义或花哨。想象一下，如果每一部小说都采用相同的风格，海明威和狄更斯的风格无法区分，托尔金和罗琳的风格也无法区分。如果英语只有一种散文风格，那会非常单调。
- en: 'I can already hear the objection: Code isn’t prose! Its compile target is the
    computer, not the imagination! Oh do I dare to differ. The best code to me is
    indeed its own form of poetry, and style is an integral part of such expression.
    And in no language more so than Ruby.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经听到反对声音了：代码不是散文！它的编译目标是计算机，而不是想象！哦，我敢不同意。对我来说，最好的代码确实是自己的一种诗歌形式，而风格是这种表达的一部分。在
    Ruby 中尤其如此。
- en: Whereas Python’s motto has long been “there should be one – and preferably only
    one – obvious way to do it”, Ruby is the exact opposite. There are many ways to
    do almost everything, and it’s why reading and writing Ruby is such a delight
    to people like me who
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Python 的座右铭长期以来一直是“应该有一种——最好只有一种——明显的方法来做”，但 Ruby 却正好相反。几乎每件事情都有许多做法，这也是为什么像我这样的人喜欢阅读和编写
    Ruby 的原因。
- en: '[strive to write code as an author](https://www.youtube.com/watch?v=9LfmrkyP81M)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[努力像作家一样写代码](https://www.youtube.com/watch?v=9LfmrkyP81M)'
- en: more often than as an engineer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 更像一个作家而不是一个工程师。
- en: 'Let me give you the most basic example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我给你举个最基本的例子：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'I’ve always found that “if not” expression to be clumsy, even though it’s a
    mainstay of most programming languages. But Ruby also allows you to write like
    this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我总觉得“if not”表达式很笨拙，尽管它是大多数编程语言的主要内容。但 Ruby 也允许你这样写：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now I don’t know if I’d call that poetry, but I do find it far more pleasant
    to read. And that’s just a single sentence. Compose a few of those into a paragraph
    (method), then into an essay (class), and soon you’ll have a whole book (system).
    It matters how that's written.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我不知道我会不会称之为诗歌，但我确实发现它读起来更加愉快。而这只是一个句子。把几个句子组合成一个段落（方法），然后组合成一篇文章（类），很快你就会有一本整书（系统）。这种写法很重要。
- en: There are probably people who would prefer the more conventional, literal style,
    and they could encode that preference in a lint rule. I’d have absolutely no problem
    with that, as long as they’re not trying to force me to abide by their stylistic
    preferences.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 也许有些人更喜欢更传统、更直接的风格，他们可以在一个代码检查规则中编码这种偏好。只要他们不试图强迫我遵守他们的风格偏好，我完全没有问题。
- en: Which gets to the crux of the question with linters. I think they’re excellent
    tools for authors and teams to enforce
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这就涉及到代码检查的问题核心。我认为它们是作者和团队强制执行的优秀工具
- en: '*their*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*他们的*'
- en: style with consistency on
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一致的风格
- en: '*their*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*他们的*'
- en: codebases. That’s why we’re shipping a default linter, cleverly called RuboCop,
    in the next version of Rails. Not such that I, or anyone, can mandate what style
    your codebase ought to be written in, but such that you can find and enforce your
    own.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 代码库。这就是为什么我们在下一个版本的Rails中要发布一个默认的代码检查工具，巧妙地称为RuboCop。不是为了我，或任何人，能够强制规定你的代码库应该以什么样的风格编写，而是为了你可以找到并执行你自己的风格。
- en: Not everyone has yet developed a personal or team style, though, and for them,
    we’re we’re including
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管并非每个人都已经形成了个人或团队风格，但对于他们，我们将包括
- en: '[the preferences I’ve developed](https://github.com/rails/rubocop-rails-omakase/)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[我已经形成的偏好](https://github.com/rails/rubocop-rails-omakase/)'
- en: during the last two decades, writing hundreds of thousands of lines of Ruby
    code with the team at 37signals. That’s the omakase menu. But it really is just
    a starting point for Rails programmers and teams to develop their own sensibilities,
    not a permanent edict on what those should be.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的两十年中，与37signals团队一起编写了数十万行Ruby代码。这就是“大厨菜单”。但这实际上只是Rails程序员和团队发展自己感觉的起点，而不是永久性规定应该是什么样的。
- en: That to me is the essence of style, it’s invariably idiosyncratic. We wouldn’t
    even be talking about style if it was all the same for everyone all the time.
    Ruby affords us such rich and expressive syntax that it would be a damn shame
    if we narrowed all possible paths down to a single, pre-approved trail. Ruby is
    for writers.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，这就是风格的本质，它总是很个人化的。如果每个人都一样，任何时候都是一样的，我们甚至不会谈论风格。Ruby为我们提供了如此丰富和富有表现力的语法，如果我们将所有可能的路径缩减为单一、预先批准的路径，那将是一件非常可惜的事情。Ruby是给作者用的。
