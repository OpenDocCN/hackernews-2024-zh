- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:29:47'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:29:47'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: 实验
- en: A story of a very large loop with a long instruction dependency chain - Johnny's
    Software Lab
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个关于具有长指令依赖链的非常大循环的故事 - 约翰尼软件实验室
- en: 来源：[https://johnnysswlab.com/a-story-of-a-very-large-loop-with-a-long-instruction-dependency-chain/](https://johnnysswlab.com/a-story-of-a-very-large-loop-with-a-long-instruction-dependency-chain/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://johnnysswlab.com/a-story-of-a-very-large-loop-with-a-long-instruction-dependency-chain/](https://johnnysswlab.com/a-story-of-a-very-large-loop-with-a-long-instruction-dependency-chain/)
- en: '*We at **Johnny’s Software Lab LLC** are experts in performance. If performance
    is in any way concern in your software project, feel free to [contact us](https://johnnysswlab.com/contact/).*'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们在**约翰尼软件实验室有限责任公司**是性能方面的专家。如果性能在您的软件项目中是一个问题，请随时[联系我们](https://johnnysswlab.com/contact/)。*'
- en: Some time ago we had to investigate a performance problem for a customer. The
    problematic piece of code was a loop. The loop was very long, about 1000 lines
    of vector intrinsics. The vectorization was done efficiently so there were no
    more efficient intrinsics that we could use to make it faster. Just by looking
    at it, it seemed that it everything was fine and we reached peak performance.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有内存访问都是顺序的，我们调查了循环以查找指令依赖关系。在循环内部，每个内部函数的输入数据都依赖于前一个内部函数的输出数据。从循环体的第一行开始，到最后一行，存在一长串的依赖链。没有循环承载的依赖关系
    - 每次迭代与所有其他迭代无关。
- en: Nevertheless, we measured CPI (cycles per instructions) number to find out it
    was quite bad. The most common reasons for low CPI are (1) stalls because data
    couldn’t be fetched from the memory subsystem and (2) instruction dependencies.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们测量的CPI（每指令周期数）数值表明效果相当差。CPI低的最常见原因是（1）因为数据无法从内存子系统中获取而导致的停顿和（2）指令依赖关系。
- en: Since all memory accesses were sequential, we investigated the loop for instruction
    dependencies. And behold, inside the loop, the input data for each intrinsic depended
    on the output data of the previous intrinsic. There was a long chain of dependencies
    starting from the first line in the loop body and going to the last line. There
    were no loop-carried dependencies – each iteration was independent of all the
    other iterations.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '| 15 | 2.46 |'
- en: The experiment
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对于这个实验，我们故意添加了嵌套余弦，以使指令依赖链变得任意长！
- en: 'For the purposes of this post, we recreated a similar loop – a loop with a
    long dependency chain going from the first instruction to the last instruction
    but without loop-carried dependency ([full source code](https://github.com/ibogosavljevic/johnysswlab/blob/master/2024-02-ilp-loopfission/cos_test.cpp)).
    First let’s declare a `cos_vector` function which takes a vector of four double
    values and calculates four cosines. The function looks like this:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本文的目的，我们重新创建了一个类似的循环 - 一个具有长依赖链的循环，从第一个指令到最后一个指令，但没有循环承载的依赖关系（[完整源代码](https://github.com/ibogosavljevic/johnysswlab/blob/master/2024-02-ilp-loopfission/cos_test.cpp)）。首先让我们声明一个`cos_vector`函数，它接受一个包含四个双精度值的向量，并计算四个余弦值。该函数如下所示：
- en: '[PRE0]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Don’t spend too much time analyzing what the function does, since it is not
    important. What is important is to notice the instruction dependency chain. For
    many intrinsics in this function, the input data used by intrinsic X is produced
    by the intrinsic that comes immediately before it. So there is an instruction
    dependency chain that starts at the beginning of the function and ends at the
    end of the function.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 不要花太多时间分析函数的作用，因为这并不重要。重要的是注意指令依赖链。在这个函数中的许多内部函数中，内部函数 X 使用的输入数据是由前一个内部函数生成的。因此，存在一个从函数开始到函数结束的指令依赖链。
- en: 'Next, we use this function to calculate nested cosines, like this:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用这个函数来计算嵌套余弦，就像这样：
- en: '[PRE1]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For this experiment. we added nested cosines here intentionally, to make the
    instruction dependency chain arbitrary long!
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: '| 嵌套余弦数量 | CPI |'
- en: 'When we measured CPI (cycles per instruction metric, smaller number is better,
    0.25 is the best possible) as a function of number of nested cosines, we got following
    values:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将CPI（每指令周期数，数值越小越好，0.25为最佳）作为嵌套余弦数的函数进行测量时，我们得到以下数值：
- en: '| Number of nested cosines | CPI |'
  id: totrans-split-18
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 1.47 |'
- en: '| --- | --- |'
  id: totrans-split-19
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | 0.65 |'
  id: totrans-split-20
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0.65 |'
- en: '| 5 | 1.47 |'
  id: totrans-split-21
  prefs: []
  type: TYPE_TB
  zh: 一段时间以前，我们曾经为一个客户调查过一个性能问题。问题代码是一个循环。这个循环非常长，大约有1000行的向量内部函数。向量化处理非常高效，因此我们无法使用更高效的内部函数来加快速度。仅仅通过看它，似乎一切都很好，我们达到了最高性能。
- en: '| 10 | 2.14 |'
  id: totrans-split-22
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 2.14 |'
- en: '| 15 | 2.46 |'
  id: totrans-split-23
  prefs: []
  type: TYPE_TB
  zh: -->
- en: '| 20 | 2.63 |'
  id: totrans-split-24
  prefs: []
  type: TYPE_TB
  zh: '| 20 | 2.63 |'
- en: When there is only one cosine, the CPU can start executing instructions from
    the next iteration of the loop if it doesn’t have enough work. But as the dependency
    chain becomes longer with the growing number of nested cosines, the CPU has less
    and less work to do and the CPI metric gets worse.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当只有一个余弦函数时，如果CPU没有足够的工作量，它可以从循环的下一次迭代开始执行指令。但随着嵌套余弦函数数量的增加，依赖链变得更长，CPU 需要做的工作越来越少，CPI
    指标也会变得更糟。
- en: Interleaving
  id: totrans-split-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交错执行
- en: 'One solution to increasing ILP is interleaving: we create a new version of
    `cos_vector` that instead of one takes two double vectors for inputs and calculate
    two results. So, inside our new [`cos_vector_interleaved`](https://github.com/ibogosavljevic/johnysswlab/blob/master/2024-02-ilp-loopfission/cos_test.cpp#L133)
    we have two dependency chains running in parallel. This increases available ILP
    and consequently increases performance.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 增加 ILP 的一个解决方案是交错执行：我们创建了一个名为 [`cos_vector_interleaved`](https://github.com/ibogosavljevic/johnysswlab/blob/master/2024-02-ilp-loopfission/cos_test.cpp#L133)
    的新版本，它不再使用一个输入双向量，而是计算两个结果。因此，在我们的新版本中，有两个并行运行的依赖链。这增加了可用的 ILP，从而提高了性能。
- en: 'We already covered [interleaving in earlier post](https://johnnysswlab.com/when-an-instruction-depends-on-the-previous-instruction-depends-on-the-previous-instructions-long-instruction-dependency-chains-and-performance/).
    Interleaving would be fine for this specific example, but it wasn’t a good approach
    with our customer: the loop body was already quite complex and interleaving makes
    it even more complex. Also, there was fear of register spilling and possible loss
    of performance because the loop body was already using a lot of constants and
    needed a lot of registers.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经讨论过[交错执行](https://johnnysswlab.com/when-an-instruction-depends-on-the-previous-instruction-depends-on-the-previous-instructions-long-instruction-dependency-chains-and-performance/)。对于这个特定的例子，交错执行可能不错，但对于我们的客户来说并不是一个好方法：循环体已经相当复杂，而交错执行会使其更加复杂。此外，由于循环体已经使用了大量常数并需要大量寄存器，存在寄存器溢出和性能损失的风险。
- en: '*Like what you are reading? Follow us on [LinkedIn](https://www.linkedin.com/company/johnysswlab)
    , [Twitter](https://twitter.com/johnnysswlab) or [Mastodon](https://mastodon.online/@johnnysswlab)
    and get notified as soon as new content becomes available.'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*喜欢阅读我们的内容？在 [LinkedIn](https://www.linkedin.com/company/johnysswlab)、[Twitter](https://twitter.com/johnnysswlab)
    或 [Mastodon](https://mastodon.online/@johnnysswlab) 上关注我们，并在新内容发布时得到通知。'
- en: Need help with software performance? [Contact us](https://johnnysswlab.com/contact/)!*
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 需要软件性能的帮助？[联系我们](https://johnnysswlab.com/contact/)！
- en: A different approach
  id: totrans-split-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另一种方法
- en: 'Are there other approaches? Let’s limit the analysis for simplicity to three
    nested cosines. Our original loop looks like this:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 是否有其他方法？为简便起见，让我们将分析限制在三个嵌套余弦函数上。我们的原始循环看起来是这样的：
- en: '[PRE2]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We took our original loop and split it into three smaller loops, as you can
    see bellow. Each loop calculates one cosine. This approach is called *loop fission*.
    Since each loop produces a result that is consumed by the next loop, we need a
    temporary array to store the intermediate result:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将原始循环拆分为三个更小的循环，如下所示。每个循环计算一个余弦函数。这种方法称为*循环分裂*。由于每个循环产生的结果被下一个循环使用，我们需要一个临时数组来存储中间结果：
- en: '[PRE3]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The original big loop got split into three smaller loops. The newly introduced
    `tmp_vec` holds the intermediate results for the second and the third loop.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的大循环被分成了三个更小的循环。新引入的 `tmp_vec` 保存了第二个和第三个循环的中间结果。
- en: 'Does this approach work? Here are the runtimes for the original loop, interleaved
    loop and fissioned loop for various numbers of nested cosines, from 1 to 49 and
    1 M:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有效吗？以下是原始循环、交错循环和分裂循环在各种嵌套余弦函数数量（从 1 到 49 和 1 百万）的运行时间：
- en: Our new version is better than the original version, but not than the interleaved
    version. Interleaved version is still better. But notice the outlier for the really
    long dependency chain of 1 M nested cosines. This requires some additional investigation.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新版本比原始版本更好，但不及交错版本。交错版本仍然更好。但请注意，当存在 1 百万个嵌套余弦函数的长依赖链时会有异常值。这需要进一步的调查。
- en: Because of the way we wrote our test, the size of the input array depends on
    the number of nested cosines. For one nested cosine, the size of the input array
    is 60 M elements, for two nested cosines the size of the input array is 30 M elements,
    for N nested cosines the size of the input array is 60 M divided by N. So, for
    1 M nested cosines, the size of the input array is only 60.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们编写测试的方式，输入数组的大小取决于嵌套余弦的数量。对于一个嵌套余弦，输入数组的大小是6000万个元素，对于两个嵌套余弦，输入数组的大小是3000万个元素，对于N个嵌套余弦，输入数组的大小是6000万除以N。所以，对于1百万个嵌套余弦，输入数组的大小仅为60。
- en: The memory subsystem
  id: totrans-split-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存子系统
- en: Since the size of our temporary buffer is the size of the input array, and we
    read from the buffer and write to it many times, this makes a lot of data moving
    in and out of the memory subsystem. And the performance depends on the which part
    of the memory subsystem the data is coming from. If it is from L1 cache, the loop
    will be fast, if it is from memory, the loop will be slow.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们临时缓冲区的大小与输入数组的大小相同，并且我们多次从缓冲区读取和写入，这导致大量数据在内存子系统中移动。而性能取决于数据来自内存子系统的哪个部分。如果来自L1缓存，循环将会很快，如果来自内存，则循环将会很慢。
- en: We can easily check where the data is coming from using LIKWID measurement group
    L2CACHE. There is a measurement called *L2 Request Rate* which is number of L2
    requests made per executed instruction. For 10 nested cosines, this number is
    0.011 for the original and interleaved versions and 0.3 for our version. Ouch!
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以很容易地使用LIKWID测量组L2CACHE检查数据的来源。有一个叫做*L2请求率*的测量值，表示每个执行指令的L2请求次数。对于10个嵌套余弦来说，原始版本和交错版本的数字都是0.011，而我们的版本是0.3。哎呀！
- en: A smaller temporary buffer
  id: totrans-split-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个更小的临时缓冲区
- en: The solution is to make our temporary buffer smaller, so it fits L1 cache. The
    size of L1 cache is about 16 kB, so we need to keep our temporary buffer smaller
    than this number.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 解决办法是让我们的临时缓冲区更小，以适应L1缓存。L1缓存的大小约为16 kB，所以我们需要保持临时缓冲区小于这个数字。
- en: 'If our input buffer was smaller, we would need a smaller temporary buffer.
    And we can make our input buffer smaller! We just need to process our input data
    in blocks. The first block is e.g. first 128 values from the input, second block
    is next 128 values in the input, etc. This technique is called *loop blocking*,
    because data is processed in blocks. After blocking, our processing loop looks
    like this:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的输入缓冲区更小，我们就需要一个更小的临时缓冲区。而我们可以让输入缓冲区更小！我们只需以块的方式处理我们的输入数据。第一个块可以是从输入中获取的前128个值，第二个块可以是接下来的128个值，依此类推。这个技术被称为*循环阻塞*，因为数据被以块的形式处理。阻塞后，我们的处理循环如下：
- en: '[PRE4]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The outer loop works on a block level, and the inner loops process data within
    blocks. Here are the performance numbers with loop fission + loop blocking:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 外循环在块级别上进行操作，内部循环在块内部处理数据。以下是进行循环分裂+循环阻塞的性能数字：
- en: Now this looks better! The last version, with fission and blocking is the fastest!
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来更好了！最后一个版本，使用分裂和阻塞，速度最快！
- en: '*Like what you are reading? Follow us on [LinkedIn](https://www.linkedin.com/company/johnysswlab)
    , [Twitter](https://twitter.com/johnnysswlab) or [Mastodon](https://mastodon.online/@johnnysswlab)
    and get notified as soon as new content becomes available.'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*喜欢你正在阅读的内容吗？在[LinkedIn](https://www.linkedin.com/company/johnysswlab)，[Twitter](https://twitter.com/johnnysswlab)或[Mastodon](https://mastodon.online/@johnnysswlab)关注我们，并在新内容发布时立即收到通知。'
- en: Need help with software performance? [Contact us](https://johnnysswlab.com/contact/)!*
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 需要软件性能帮助吗？[联系我们](https://johnnysswlab.com/contact/)！
