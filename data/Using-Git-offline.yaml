- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:38:17'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:38:17
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Using Git offline
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 离线使用 Git
- en: 来源：[https://www.gibbard.me/using_git_offline/](https://www.gibbard.me/using_git_offline/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.gibbard.me/using_git_offline/](https://www.gibbard.me/using_git_offline/)
- en: Some companies use an isolated network or even the complete lack of a network
    as a security measure to protect from unauthorized access. Working on these systems
    can be a struggle but it is still possible, and perhaps even more important, to
    use a proper version control tool like Git.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一些公司使用隔离网络甚至完全缺乏网络作为安全措施，以防止未经授权的访问。在这些系统上工作可能会很艰难，但仍然有可能，并且也许更重要的是，使用像 Git
    这样的正确版本控制工具。
- en: By design Git works quite happily with no remote repository. You can branch,
    stage, and commit files just like normal.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 按设计，Git 完全可以在没有远程仓库的情况下正常工作。你可以像平常一样分支、暂存和提交文件。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This works great if just a single machine is used for development, but this
    is often not the case.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只使用一台机器进行开发，那么这种方法非常有效，但实际情况往往并非如此。
- en: Working with multiple machines — Using a USB memory stick/HDD
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用多台机器工作 — 使用 USB 记忆棒/硬盘
- en: When security policy allows read/write access to a memory stick or portable
    hard drive a remote repository can be created on this device.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当安全策略允许在记忆棒或便携式硬盘上进行读/写访问时，可以在此设备上创建远程仓库。
- en: On one development machine mount the memory stick.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在一台开发机器上挂载记忆棒。
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Navigate to the repository that is to be shared, add the remote repository on
    the memory stick, and push the changes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 转到要共享的仓库，将记忆棒上的远程仓库添加为远程仓库，并推送更改。
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: NB. The remote can be called anything. It doesn’t have to be called “origin”.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注：远程仓库可以取任何名称。它不必被称为“origin”。
- en: Unmount the memory stick and mount it on another development machine.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载记忆棒，然后将其挂载到另一台开发机器上。
- en: If the development machine does not have a copy of the repository on it already
    then git clone can be used.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果开发机器上还没有仓库的副本，那么可以使用 git clone。
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If there is a copy of the repository already on the machine add the memory stick
    as a remote and fetch/pull the changes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果机器上已经有了仓库的副本，请将记忆棒添加为远程，并获取/拉取更改。
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: From now on use Git as normal but make sure that whenever a git pull, fetch,
    or push is performed the memory stick is mounted on the machine.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始正常使用 Git，但确保每次执行 git pull、fetch 或 push 时，记忆棒都已挂载在机器上。
- en: Ensure the memory stick is part of your backup routine.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 确保记忆棒是备份例程的一部分。
- en: Working with multiple machines — Using CD/DVDs
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用多台机器工作 — 使用 CD/DVD
- en: In locked down development environments memory sticks may be blocked. Using
    Git is still possible, but a little be more inconvenient.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在受限的开发环境中，可能会阻止记忆棒。仍然可以使用 Git，但可能会更加不便。
- en: 'Git will happily fetch changes from one copy of a local repository to another.
    One option then is to simply copy the directory containing the local Git repository
    to another computer via CD or other media and make changes and commits like normal
    on both machines. When you want to combine changes select one machine to perform
    the merge and copy the other repository over to this machine. To pull all the
    changes into the current branch use:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Git 会愉快地从一个本地仓库的副本中获取更改到另一个本地仓库的副本中。然后一个选择是简单地通过 CD 或其他媒体复制包含本地 Git 仓库的目录到另一台计算机上，并在两台计算机上像平常一样进行更改和提交。当你想要合并更改时，选择一台机器执行合并并将另一个仓库复制到这台机器上。要将所有更改拉到当前分支，请使用：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Alternatively you can fetch the changes and create a new branch to store them:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以获取更改并创建一个新分支来存储它们：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At this point create a new copy of the repository complete with merges and move
    it over to the other machine/s. Pull the latest changes into the other repositories
    or if desired simply replace the whole repository with the new copy.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时创建一个包含合并的新仓库副本，并将其移动到其他机器上。将最新更改拉到其他仓库中，或者如果需要的话，简单地用新副本替换整个仓库。
- en: Obviously this is far from optimal. Copying the whole repository directory will
    include personal settings and files excluded in the .gitignore file. To mitigate
    this Git clone could be used to duplicate the repository rather than just copying
    it, but a much better option is to use git bundle.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这远非最佳方案。复制整个仓库目录将包含个人设置和在 `.gitignore` 文件中排除的文件。为了缓解这个问题，可以使用 Git 克隆来复制仓库，而不仅仅是复制它，但更好的选择是使用
    git bundle。
- en: Git bundle
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Git bundle
- en: A git bundle allows for part or all of a repository to be compressed into a
    single file in a format that git is able to clone and fetch from.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Git bundle 允许将仓库的部分或全部压缩成一个 git 能够克隆和从中获取的单个文件中。
- en: 'The workflow works very similar to before, but instead of copying the whole
    repository directory a git bundle is created. On the first machine create a bundle
    using:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流程与以前非常相似，但是不再复制整个仓库目录，而是创建git捆绑包。在第一台机器上使用以下命令创建一个捆绑包：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `-- all` option bundles the entire repository including all branches and
    tags. Specific branches or tags can be selected using `-b branchName` or `-t tagName`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`-- all`选项捆绑整个仓库，包括所有分支和标签。可以使用`-b branchName`或`-t tagName`选择特定分支或标签。'
- en: 'Copy the repoName.bundle file to another computer. To clone the repository
    simply use:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将repoName.bundle文件复制到另一台计算机。要克隆仓库，只需使用：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Changes and commits can be made on any of the computers then like before one
    machine must be selected to perform the merge. On the non-merging machine make
    sure all changes are committed and create a bundle using:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在任何计算机上进行更改和提交，然后像以前一样选择一个机器来执行合并。在不合并的机器上，确保所有更改都已提交，并使用以下命令创建一个捆绑包：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For larger repositories it is a good idea to only bundle part of the repository
    to avoid transferring more data than needed. For example to only include the last
    5 commits on the master branch use:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更大的仓库，最好只捆绑仓库的一部分，以避免传输比需要的更多的数据。例如，只包括主分支上最后5个提交的话，可以使用：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It is important that there are no gaps between the commits in the bundle and
    the commits on the repository where the merging will occur or the process will
    fail.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的是，在捆绑包的提交与将进行合并的仓库的提交之间没有间隙，否则过程将失败。
- en: 'Copy the bundle to the computer where the merge will occur and pull the changes
    using:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将捆绑文件复制到将进行合并的计算机上，并使用以下命令拉取更改：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once the merging/rebasing is done create another bundle using:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦合并/重新设置完成，使用以下命令创建另一个捆绑包：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the above command `--all` can be replaced with the desired subset of repos/commits.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，`--all`可以替换为所需的仓库/提交的子集。
- en: 'Move the bundle file to the other machine/s and update the changes there using:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 将捆绑文件移动到另一台机器，并在那里更新更改：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Creating a local remote repository
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个本地的远程仓库
- en: Bundles solve the problem of synchronising Git repositories without a network,
    but we are still left with multiple computers all likely to be slightly out of
    sync with each other. If a new developer joins the team who do they copy the repository
    from? The best option is to select one development machine that will act as the
    “server”. A bare Git repository can be created on this development machine in
    addition to a local clone of the repository where the developer will actually
    work.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 捆绑解决了在没有网络的情况下同步Git仓库的问题，但我们仍然面临着多台计算机都很可能略有不同步的问题。如果新的开发人员加入团队，他们应该从哪里复制仓库？最好的选择是选择一台开发机器作为“服务器”。可以在这台开发机器上创建一个裸的Git仓库，另外还可以在开发人员实际工作的本地克隆仓库中创建一个本地仓库。
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next navigate to the local git repository or create a new one and add the remoteRepoName.git
    repository as a remote repository.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后导航到本地git仓库或创建一个新的仓库，将remoteRepoName.git仓库添加为远程仓库。
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Changes can then be made in the local repository, or pulled from bundles created
    on other development machines. Whenever changes are made they can be pushed to
    the remote using:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以在本地仓库进行更改，或者从其他开发机器上创建的捆绑包中拉取。每当有更改时，都可以使用以下命令将其推送到远程：
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: 'The distributed nature of Git allows it to work well without a central server.
    While the options presented will never be as convenient as just pushing to github
    they certainly beat the alternative of: `main_v1_final version_with_bobs_extra_patch
    finalfinal_version`.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Git的分布式特性使其可以在没有中央服务器的情况下很好地工作。虽然所提供的选项永远不会像只需推送到github那样方便，但它们肯定比“main_v1_final
    version_with_bobs_extra_patch finalfinal_version”这样的替代方案好得多。
