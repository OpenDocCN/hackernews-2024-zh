- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:06:59'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:06:59
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The UX of UUIDs | Unkey
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UUID 的用户体验 | Unkey
- en: 来源：[https://unkey.dev/blog/uuid-ux](https://unkey.dev/blog/uuid-ux)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://unkey.dev/blog/uuid-ux](https://unkey.dev/blog/uuid-ux)
- en: 'TLDR: Please don''t do this:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: TLDR：请不要这样做：
- en: '[PRE0]'
  id: totrans-split-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '* * *'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[](#the-baseline-ensuring-global-uniqueness)The baseline: Ensuring global uniqueness'
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[基线：确保全局唯一性](https://unkey.dev/blog/uuid-ux#the-baseline-ensuring-global-uniqueness)'
- en: Unique identifiers are essential for distinguishing individual entities within
    a system. They provide a reliable way to ensure that each item, user, or piece
    of data has a unique identity. By maintaining uniqueness, applications can effectively
    manage and organize information, enabling efficient operations and facilitating
    data integrity.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统中，唯一标识符对于区分个体实体至关重要。它们为确保每个项目、用户或数据片段具有唯一身份提供了可靠的方式。通过保持唯一性，应用程序可以有效管理和组织信息，实现高效运作并促进数据完整性。
- en: Let’s not pretend like we are Google or AWS who have special needs around this.
    Any securely generated UUID with 128 bits is more than enough for us. There are
    lots of libraries that generate one, or you could fall back to the standard library
    of your language of choice. In this blog, I'll be using Typescript examples, but
    the underlying ideas apply to any language.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们不要假装自己是谷歌或 AWS，他们在这方面有特殊需求。对我们来说，128 位安全生成的 UUID 已经足够了。有许多库可以生成 UUID，或者你可以回退到你选择的语言的标准库。在本文中，我将使用
    TypeScript 的示例，但其基本思想适用于任何语言。
- en: '[PRE1]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Stopping here is an option, but let''s take the opportunity to enhance the
    user experience with small yet effective iterative changes:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里停下也是一个选择，但让我们借此机会通过小而有效的迭代改进用户体验：
- en: Make them easy to copy
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让它们易于复制
- en: Prefixing
  id: totrans-split-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前缀
- en: More efficient encoding
  id: totrans-split-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更高效的编码
- en: Changing the length
  id: totrans-split-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 改变长度
- en: '[](#copying-uuids-is-annoying)Copying UUIDs is annoying'
  id: totrans-split-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[复制 UUID 是很烦人的](https://unkey.dev/blog/uuid-ux#copying-uuids-is-annoying)'
- en: 'Try copying this UUID by double-clicking on it:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试双击复制这个 UUID：
- en: '[PRE3]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you're lucky, you got the entire UUID but for most people, they got a single
    section. One way to enhance the usability of unique identifiers is by making them
    easily copyable. This can be achieved by removing the hyphens from the UUIDs,
    allowing users to simply double-click on the identifier to copy it. By eliminating
    the need for manual selection and copy-pasting, this small change can greatly
    improve the user experience when working with identifiers.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你幸运，你可能得到了整个 UUID，但对于大多数人来说，他们只得到了一个部分。提升唯一标识符的可用性的一种方法是使它们易于复制。通过去除 UUID
    中的连字符，用户可以简单地双击标识符即可复制。通过消除手动选择和复制粘贴的需求，这一小改变可以极大地提升用户在处理标识符时的体验。
- en: 'Removing the hyphens is probably trivial in all languages, here’s how you can
    do it in js/ts:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有语言中，去除连字符可能是微不足道的，这里是你可以在 js/ts 中实现的方法：
- en: '[PRE4]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Try copying it now, it’s much nicer!
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在试着复制它，会更加友好！
- en: '[](#prefixing)Prefixing'
  id: totrans-split-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[前缀](https://unkey.dev/blog/uuid-ux#prefixing)'
- en: Have you ever accidentally used a production API key in a development environment?
    I have, and it’s not fun. We can help the user differentiate between different
    environments or resources within the system by adding a meaningful prefix. For
    example, Stripe uses prefixes like `sk_live_` for production environment secret
    keys or `cus_` for customer identifiers. By incorporating such prefixes, we can
    ensure clarity and reduce the chances of confusion, especially in complex systems
    where multiple environments coexist.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你曾经在开发环境中意外使用过生产 API 密钥吗？我曾经有过，这并不好玩。我们可以通过为系统中的不同环境或资源添加有意义的前缀来帮助用户区分它们。例如，Stripe
    在生产环境的秘密密钥中使用前缀`sk_live_`，或者在客户标识符中使用`cus_`。通过引入这些前缀，我们可以确保清晰度，并减少混淆的可能性，特别是在存在多个环境的复杂系统中。
- en: '[PRE6]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Naming prefixes is an art just like naming variables. You want to be descriptive
    but be as short as possible. I'll share ours further down.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 命名前缀就像命名变量一样是一门艺术。你希望描述清楚，但又尽可能简短。我将在下文分享我们的方式。
- en: '[](#encoding-in-base58)Encoding in base58'
  id: totrans-split-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[在 base58 编码中编码](https://unkey.dev/blog/uuid-ux#encoding-in-base58)'
- en: Instead of using a hexadecimal representation for identifiers, we can also consider
    encoding them more efficiently, such as base58\. Base58 encoding uses a larger
    character set and avoids ambiguous characters, such as upper case `I` and lower
    case `l` resulting in shorter identifier strings without compromising readability.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与其使用十六进制表示标识符，我们也可以考虑更高效地编码它们，例如 base58。Base58 编码使用更大的字符集，并避免了模棱两可的字符，例如大写的`I`和小写的`l`，从而生成更短的标识符字符串而不影响可读性。
- en: As an example, an 8-character long base58 string, can store roughly 30.000 times
    as many states as an 8-char hex string. And at 16 chars, the base58 string can
    store 889.054.070 as many combinations.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，一个长度为8个字符的base58字符串，可以存储大约30000倍于一个8字符十六进制字符串的状态。而长度为16的base58字符串则可以存储889.054.070倍于其组合数。
- en: You can probably still do this with the standard library of your language but
    you could also use a library like [nanoid](https://github.com/ai/nanoid) which
    is available for most languages.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用你的语言的标准库来完成这个任务，但你也可以使用像[nanoid](https://github.com/ai/nanoid)这样的库，这种库几乎支持所有语言。
- en: '[PRE8]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We generated a 22 character long ID here, which can encode ~100x as many states
    as a UUID while being 10 characters shorter.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生成了一个长度为22个字符的ID，在编码上可以比UUID多约100倍，同时又比UUID短10个字符。
- en: '|  | Characters | Length | Total States |'
  id: totrans-split-44
  prefs: []
  type: TYPE_TB
  zh: '|  | 字符 | 长度 | 总状态数 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-split-45
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| UUID | 16 | 32 | 2^122 = 5.3e+36 |'
  id: totrans-split-46
  prefs: []
  type: TYPE_TB
  zh: '| UUID | 16 | 32 | 2^122 = 5.3e+36 |'
- en: '| Base58 | 58 | 22 | 58^22 = 6.2e+38 |'
  id: totrans-split-47
  prefs: []
  type: TYPE_TB
  zh: '| Base58 | 58 | 22 | 58^22 = 6.2e+38 |'
- en: '*The more states, the higher your collision resistance is because it takes
    more generations to generate the same ID twice (on average and if your algorithm
    is truly random)*'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*状态越多，碰撞抵抗能力越高，因为生成相同ID需要更多的尝试次数（平均情况下，如果你的算法是真正随机的话）*'
- en: '[](#changing-the-entropy)Changing the entropy'
  id: totrans-split-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#changing-the-entropy)改变熵'
- en: Not all identifiers need to have a high level of collision resistance. In some
    cases, shorter identifiers can be sufficient, depending on the specific requirements
    of the application. By reducing the entropy of the identifiers, we can generate
    shorter IDs while still maintaining an acceptable level of uniqueness.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的标识符都需要高级别的碰撞抵抗能力。在某些情况下，较短的标识符可能已经足够，这取决于应用程序的具体要求。通过降低标识符的熵，我们可以生成更短的ID，同时仍然保持可接受的唯一性水平。
- en: Reducing the length of your IDs can be nice, but you need to be careful and
    ensure your system is protected against ID collissions. Fortunately, this is pretty
    easy to do in your database layer. In our MySQL database we use IDs mostly as
    primary key and the database protects us from collisions. In case an ID exists
    already, we just generate a new one and try again. If our collision rate would
    go up significantly, we could simply increase the length of all future IDs and
    we’d be fine.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 缩短ID长度可能很好，但是你需要小心并确保你的系统免受ID碰撞的影响。幸运的是，在数据库层面很容易实现这一点。在我们的MySQL数据库中，我们大多数情况下使用ID作为主键，数据库保护我们免受碰撞的影响。如果一个ID已经存在，我们只需生成一个新的ID并再试一次。如果我们的碰撞率显著增加，我们可以简单地增加所有未来ID的长度，问题就解决了。
- en: '| Length | Example | Total States |'
  id: totrans-split-52
  prefs: []
  type: TYPE_TB
  zh: '| 长度 | 例子 | 总状态数 |'
- en: '| --- | --- | --- |'
  id: totrans-split-53
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| nanoid(8) | re6ZkUUV | 1.3e+14 |'
  id: totrans-split-54
  prefs: []
  type: TYPE_TB
  zh: '| nanoid(8) | re6ZkUUV | 1.3e+14 |'
- en: '| nanoid(12) | pfpPYdZGbZvw | 1.4e+21 |'
  id: totrans-split-55
  prefs: []
  type: TYPE_TB
  zh: '| nanoid(12) | pfpPYdZGbZvw | 1.4e+21 |'
- en: '| nanoid(16) | sFDUZScHfZTfkLwk | 1.6e+28 |'
  id: totrans-split-56
  prefs: []
  type: TYPE_TB
  zh: '| nanoid(16) | sFDUZScHfZTfkLwk | 1.6e+28 |'
- en: '| nanoid(24) | u7vzXJL9cGqUeabGPAZ5XUJ6 | 2.1e+42 |'
  id: totrans-split-57
  prefs: []
  type: TYPE_TB
  zh: '| nanoid(24) | u7vzXJL9cGqUeabGPAZ5XUJ6 | 2.1e+42 |'
- en: '| nanoid(32) | qkvPDeH6JyAsRhaZ3X4ZLDPSLFP7MnJz | 2.7e+56 |'
  id: totrans-split-58
  prefs: []
  type: TYPE_TB
  zh: '| nanoid(32) | qkvPDeH6JyAsRhaZ3X4ZLDPSLFP7MnJz | 2.7e+56 |'
- en: '[](#conclusion)Conclusion'
  id: totrans-split-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#conclusion)结论'
- en: By implementing these improvements, we can enhance the usability and efficiency
    of unique identifiers in our applications. This will provide a better experience
    for both users and developers, as they interact with and manage various entities
    within the system. Whether it's copying identifiers with ease, differentiating
    between different environments, or achieving shorter and more readable identifier
    strings, these strategies can contribute to a more user-friendly and robust identification
    system.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实施这些改进，我们可以增强应用程序中唯一标识符的可用性和效率。这将为用户和开发人员提供更好的体验，因为他们在系统中与各种实体进行交互和管理时，可以更轻松地复制标识符，区分不同的环境，或实现更短和更可读的标识符字符串。这些策略可以为用户友好和强大的识别系统做出贡献。
- en: '[](#ids-and-keys-at-unkey)IDs and keys at Unkey'
  id: totrans-split-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#ids-and-keys-at-unkey)Unkey的ID和键'
- en: Lastly, I'd like to share our implementation here and how we use it in our [codebase](https://github.com/unkeyed/unkey/blob/main/internal/id/src/index.ts).
    We use a simple function that takes a typed prefix and then generates the ID for
    us. This way we can ensure that we always use the same prefix for the same type
    of ID. This is especially useful when you have multiple types of IDs in your system.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我想在这里分享我们的实现方式以及我们在我们的[codebase](https://github.com/unkeyed/unkey/blob/main/internal/id/src/index.ts)中如何使用它。我们使用一个简单的函数，它接受一个类型化的前缀，然后为我们生成ID。这样我们可以确保对于同一类型的ID，我们总是使用相同的前缀。当你的系统中有多种类型的ID时，这特别有用。
- en: '[PRE15]'
  id: totrans-split-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-split-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-split-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-split-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-split-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-split-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-split-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-split-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-split-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-split-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-split-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-split-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-split-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-split-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-split-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-split-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-split-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-split-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: And when we use it in our codebase, we can ensure that we always use the correct
    prefix for the correct type of id.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码库中使用时，我们可以确保始终为正确类型的ID使用正确的前缀。
- en: '[PRE34]'
  id: totrans-split-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-split-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-split-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-split-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-split-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-split-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-split-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '* * *'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: I've been mostly talking about identifiers here, but an api key really is just
    an identifier too. It's just a special kind of identifier that is used to authenticate
    requests. We use the same strategies for our api keys as we do for our identifiers.
    You can add a prefix to let your users know what kind of key they are looking
    at and you can specify the length of the key within reason. Colissions for API
    keys are much more serious than ids, so we enforce secure limits.
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里主要讨论了标识符，但API密钥实际上也只是一个标识符。它只是一种用于验证请求的特殊类型的标识符。我们对API密钥使用与标识符相同的策略。您可以添加前缀来让用户知道他们正在查看的密钥类型，并且可以在合理范围内指定密钥的长度。API密钥的碰撞比ID更为严重，因此我们强制执行安全限制。
- en: It's quite common to prefix your API keys with something that identifies your
    company. For example [Resend](https://resend.com) are using `re_` and [OpenStatus](https://openstatus.dev)
    are using `os_` prefixes. This allows your users to quickly identify the key and
    know what it's used for.
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在API密钥中添加公司标识前缀是非常常见的做法。例如，[Resend](https://resend.com) 使用 `re_`，而 [OpenStatus](https://openstatus.dev)
    使用 `os_` 前缀。这样一来，用户可以快速识别密钥的用途。
- en: '[PRE41]'
  id: totrans-split-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-split-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-split-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-split-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-split-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-split-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-split-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-split-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-split-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
