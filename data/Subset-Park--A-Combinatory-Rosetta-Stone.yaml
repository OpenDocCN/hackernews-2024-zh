- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:24:19'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:24:19
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Subset Park: A Combinatory Rosetta Stone'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Subset Park：一个组合式罗塞塔石
- en: 来源：[https://blog.zdsmith.com/posts/a-combinatory-rosetta-stone.html](https://blog.zdsmith.com/posts/a-combinatory-rosetta-stone.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.zdsmith.com/posts/a-combinatory-rosetta-stone.html](https://blog.zdsmith.com/posts/a-combinatory-rosetta-stone.html)
- en: '2024-04-14'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '2024-04-14'
- en: In [Combinatory Programming](./combinatory-programming.html), we attempt to
    provide motivating examples for the various combinators identified as useful to
    everyday programmers.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在[组合式编程](./combinatory-programming.html)中，我们试图为日常程序员提供各种有用的组合器的激励示例。
- en: 'The aim of that piece was to extract the basic concept of combinators from
    as much its context as possible, and present certain particularly useful combinators
    as higher-order functions callable inside of nearly any programming language,
    applicable to most styles of programming. In practice, of course, tacit forms—the
    style of programming that we can use combinator functions to achieve—are more
    at home in certain languages and certain contexts than others, and compose most
    nicely with other features of a programming environment: plentiful pure, first-class
    functions; partial application; and terse combinator syntax, among others.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 那篇文章的目的是尽可能从其上下文中提取组合器的基本概念，并将某些特别有用的组合器呈现为几乎任何编程语言中可调用的高阶函数，适用于大多数编程风格。当然，在实践中，隐式形式——我们可以使用组合器函数实现的编程风格——在某些语言和某些环境中比其他情况更合适，并且最能与编程环境的其他特性（如丰富的纯函数、一级函数、部分应用和简洁的组合器语法等）优雅地结合。
- en: In this supplement, we can dig deeper into some of those examples; where useful,
    expressing the same logic in multiple styles, and at times commenting on features
    of different styles or languages and the effects they produce.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个补充中，我们可以更深入地探讨其中一些例子；在有用时，用多种风格表达相同的逻辑，并有时评论不同风格或语言的特性及其产生的影响。
- en: identity
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: identity
- en: '[PRE0]'
  id: totrans-split-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, `maybeAbs` is a function which either calls `Math.abs` on `n` or returns
    it directly, depending on the value of `shouldNormalizeNegatives`. This is the
    most explicit, referring directly to `n` by name three times, but also the easiest
    to read.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`maybeAbs` 是一个函数，它根据 `shouldNormalizeNegatives` 的值调用 `Math.abs` 或直接返回 `n`。这是最显式的方式，通过名称直接三次引用
    `n`，但也是最容易阅读的方式。
- en: '[PRE1]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The JavaScript and Janet versions behave the same: we bind *either* the absolute-value
    function *or* `identity` to our new symbol depending on the value of the conditional.
    In later examples, we’ll see less trivial usages of `identity`.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 和 Janet 版本的行为相同：我们根据条件的值将绝对值函数或 `identity` 绑定到我们的新符号上。在后续示例中，我们将看到
    `identity` 的更少琐碎的用法。
- en: A Conditional Combinator
  id: totrans-split-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个条件组合器
- en: '[PRE3]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Though we haven’t put it into our personal library of combinators, we can imagine
    a function `agenda` that behaves like this:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们还没有把它放入我们的个人组合器库中，但我们可以想象一个函数`agenda`，它的行为像这样：
- en: '[PRE4]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In other words, we can imagine a simple combinator that lets us express conditional
    logic tacitly. J’s Agenda `@.` is such a function. In the slightly silly J example
    above, we are able to reproduce behaviour closer to the JavaScript example: rather
    than using a conditional to choose a function `f` or `g`, which is then applied
    to some values, our J code takes a verb `between_negative_3_and_0`, which is then
    called on every element of the argument to `maybe_abs`. Thus we can use *both*
    `f` *and* `g` within a single call. In this example, `identity` is spelled `[`.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们可以想象一个简单的组合器，让我们隐式地表达条件逻辑。J 的 Agenda `@.` 就是这样一个函数。在上面稍显愚蠢的 J 示例中，我们能够重现更接近
    JavaScript 示例的行为：而不是使用条件来选择函数 `f` 或 `g`，然后将其应用于某些值，我们的 J 代码将一个动词 `between_negative_3_and_0`
    作为参数传递给 `maybe_abs`，然后对参数的每个元素调用它。因此，我们可以在单次调用中同时使用 *f* 和 *g*。在这个例子中，`identity`
    被拼写为`[`。
- en: compose
  id: totrans-split-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组成
- en: '[PRE5]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the case of composed functions (as opposed to the minimal `identity` example
    above), explicit code rarely has many advantages over tacit code. We have to refer
    to `datum` twice, so:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于组合的函数（与上述最小的`identity`示例相反），显式代码很少比隐式代码有更多优势。我们必须两次引用`datum`，所以：
- en: We have to introduce a name;
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们必须引入一个名字；
- en: It’s not very short.
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这并不是很短。
- en: But in addition to that, the explicit version is structurally complex. Nested
    function calls are difficult to read.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，除此之外，显式版本在结构上较为复杂。嵌套的函数调用很难阅读。
- en: '[PRE6]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In both tacit versions, we avoid an unnecessary name in addition to obtaining
    a simpler structure, with less nesting.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个隐式版本中，我们避免了不必要的命名，同时获得了更简单的结构，更少的嵌套。
- en: '[PRE8]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In J, function composition is an infix operator.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 J 中，函数组合是中缀运算符。
- en: Absolute Difference
  id: totrans-split-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绝对差异
- en: '[PRE9]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this case, the explicit code requires us to bind to both `x` and `y`; in
    a case like subtraction, which is so intuitively transparent, this seems particularly
    unnecessary.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，显式代码要求我们绑定`x`和`y`；在像减法这样直观透明的情况下，这似乎特别不必要。
- en: '[PRE11]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The Janet code also takes advantage of the fact that `-` is a normal function,
    and not an infix operator, while the JavaScript has to rely on Lodash’s `subtract`
    to get a first-class function that does subtraction.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: Janet 代码还利用了`-`作为普通函数的事实，而不是中缀运算符，而 JavaScript 则必须依赖 Lodash 的`subtract`来获得执行减法的一级函数。
- en: '[PRE12]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The J code is another straightforward application of function composition. In
    this case, however, the composition of subtraction with absolute value is spelled
    `|@:-`, which is shorter than the variable name `absolute_difference`.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: J 代码是函数组合的另一个直接应用。在这种情况下，但是，减法与绝对值的组合被拼写为`|@:-`，这比变量名`absolute_difference`更短。
- en: Array language practitioners will contend that this obviates the need for binding
    the verb to a name at all; why assign it to a variable name when it would require
    more characters than simply re-spelling it out each time?
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 数组语言的从业者会认为这完全消除了将动词绑定到名称的必要性；为什么在每次重复拼写时需要将其分配给变量名，而不是使用更多字符？
- en: 'One possible answer: it’s more straightforward to understand the *semantics*
    of `absolute_difference` than of `|@:-`. I’m not a very experienced J programmer,
    so I can’t argue one way or the other.'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能的答案是：理解`absolute_difference`的语义比`|@:-`更为直接。我并不是一个经验丰富的 J 程序员，所以我不能支持或反对其中任何一种方式。
- en: Pipes
  id: totrans-split-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管道
- en: It’s worth calling out that function composition is traditionally written “to
    the left”; that is, the innermost function is the last argument and the last function
    to be applied is the first in the argument list. This maps cleanly to traditional
    function call syntax—`f(g(x))` has `f` and `g` in the same order as `(compose
    f g)`—but ends up being harder to read, as the order of application isn’t the
    same as the order of the syntax.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，函数组合传统上是“向左”编写的；也就是说，最内部的函数是最后一个参数，而最后应用的函数是参数列表中的第一个。这与传统的函数调用语法清晰地映射——`f(g(x))`中的`f`和`g`顺序与`(compose
    f g)`相同——但读起来更难，因为应用的顺序与语法的顺序不同。
- en: Many newer languages have syntax, or standard library functions, to effectively
    perform function composition in reverse, so that the call to the “combinator”
    (such as it is) can be read in the same order as function application.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 许多较新的语言具有语法或标准库函数，可以有效地以反向执行函数组合，以便可以按与函数应用相同的顺序读取对“组合子”的调用。
- en: For instance, in Janet we could natively write
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 Janet 中，我们可以原生地编写
- en: '[PRE13]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This is not properly a combinator, because it’s not a higher-order function.
    It’s syntax for a particular tacit form of control flow; it represents the actual
    application of those two functions to `dirty-data`.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个适当的组合子，因为它不是一个高阶函数。这是特定隐式控制流形式的语法；它表示对`dirty-data`这两个函数的实际应用。
- en: Nevertheless we can imagine a so-called `pipe` that behaves just like `compose`
    but in reverse order, which might feel more comfortable to those programmers who
    have grown used to the conveniences of `->` and its cousins.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们可以想象一个所谓的`pipe`，它的行为与`compose`完全相同，但顺序相反，这对那些习惯于`->`及其同类的程序员可能更为舒适。
- en: apply
  id: totrans-split-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用
- en: '[PRE14]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Absent `apply`, we explicitly destructure the two elements of the argument value
    and then pass them back to `Math.pow`. This is relatively verbose, though still
    readable. If we couldn’t avail ourselves of destructuring either, we’d be forced
    to write
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果缺少`apply`，我们需要显式解构参数值的两个元素，然后将它们传回给`Math.pow`。这相对冗长，但仍然可读。如果我们不能使用解构，我们将被迫编写
- en: '[PRE15]'
  id: totrans-split-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Which begins to feel quite clumsy indeed.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这开始感觉非常笨拙。
- en: '[PRE16]'
  id: totrans-split-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the explicit example, we availed ourselves of JavaScript’s infix exponent
    operator, `**`. In the tacit examples, we use their respective languages’ standard
    library `pow` function in order to be able to pass a first-class argument to the
    `apply` combinator.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在显式示例中，我们利用了 JavaScript 的中缀指数运算符`**`。在含蓄示例中，我们使用它们各自语言的标准库`pow`函数，以便能够将一级参数传递给`apply`组合子。
- en: '[PRE18]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The K language isn’t really designed with tacit programming in mind, but, as
    a member of the array family, it nevertheless has some features that make certain
    tacit forms the most idiomatic way to write programs. One of them is that `apply`
    is spelled `.`. Here `.'` means “apply each”, that is, it applies `pow` to each
    pair in the list of pairs `exponentsAndBases`.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 K 语言并非真正设计为 tacit 编程，但作为数组家族的一员，它仍然具有某些特性，使得某些 tacit 形式成为编写程序的最惯用方式。其中之一是`apply`被拼写为`.`。这里的`.'`意味着“逐个应用”，即它将`pow`应用于`exponentsAndBases`列表中的每一对。
- en: We have used the flipped form `exponentsAndBases` here, because the tacit form
    `pow`, without being flipped itself, expects the exponent first.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们使用了反转形式`exponentsAndBases`，因为 tacit 形式`pow`本身没有被反转，它期望首先是指数。
- en: '`*/#` is itself an example of `compose`; as a function of two arguments, it
    applies `#` to them, creating an `exponent`-length array of `base`s, and then
    reduces `*` over them. In K, unlike J, function composition is not an infix operator;
    it’s accomplished simply by juxtaposing the two verbs `#` and `*/`.'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`*/#`本身就是`compose`的一个例子；作为两个参数的函数，它将`#`应用于它们，创建一个`exponent`长度的`base`数组，然后在它们上进行`*`减少。在
    K 中，不像 J，函数组合不是一个中缀运算符；它通过简单地并置两个动词`#`和`*/`来实现。'
- en: In JavaScript and Janet, juxtaposition is not very meaningful. On the other
    hand, we will see later on that J relies heavily on juxtaposition, but assigns
    the semantics of combinators more complex than `compose` to that syntax.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 和 Janet 中，并置并不是非常有意义的。另一方面，我们将在稍后看到，J 极大地依赖并置，但将更复杂的组合器语义分配给该语法。
- en: flip
  id: totrans-split-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 翻转
- en: '[PRE19]'
  id: totrans-split-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-split-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Flipping Without `apply`
  id: totrans-split-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无`apply`的翻转
- en: The minimal example for `flip` includes usage of `apply`, because that’s the
    most natural way to imagine dealing with data consisting of multiple ordered values,
    where the order must be changed.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`flip`的最小示例包括使用`apply`，因为这是处理由多个有序值组成的数据最自然的方式，其中顺序必须更改。'
- en: 'However, we can also imagine cases where our combinator accepts a variadic
    function such that ordering comes into play. For instance:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们也可以想象到我们的组合器接受变参函数的情况，使得顺序成为问题。例如：
- en: '[PRE22]'
  id: totrans-split-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-split-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this slightly artificial example, we want to both take some `x` to the `y`,
    as well as divide `y` by `x`. In a case where the `g` and `h` of a `recombine`
    call expect the same arguments, but in different orders, we can use `flip` with
    one of them.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个稍微人为的例子中，我们既想把某个`x`带到`y`，又想将`y`除以`x`。在一个`recombine`调用的`g`和`h`期望不同顺序的参数的情况下，我们可以用`flip`来处理其中一个。
- en: Flipping Under Partial Application
  id: totrans-split-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 局部应用下的翻转
- en: Up until now we’ve excluded from consideration the topic of *partial functions*;
    in practice, the easy availability of partial application makes more tacit programming
    convenient.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经排除了*部分函数*的讨论；在实践中，部分应用的易用性使得更多的 tacit 编程更方便。
- en: '[PRE24]'
  id: totrans-split-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In Janet, with a built-in `partial` function, we can trivially use partial application
    to define `double`; we bind the first argument and produce a new function that
    takes a single argument and multiplies it by 2.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Janet 中，使用内置的`partial`函数，我们可以轻松地使用部分应用来定义`double`；我们绑定第一个参数并生成一个新函数，该函数接受单个参数并将其乘以
    2。
- en: '[PRE25]'
  id: totrans-split-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If we would like to define `square` in terms of `math/pow`, the same technique
    isn’t naively applicable: in this case, the argument we want to bind is the second
    one.'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要根据`math/pow`定义`square`，同样的技术并不天然适用：在这种情况下，我们想要绑定的参数是第二个参数。
- en: '[PRE26]'
  id: totrans-split-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In this case, we can work in a tacit style by employing `flip`; now the argument
    we want to bind is the first argument to the function, so we can pass that flipped
    function directly to `partial`.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以通过使用`flip`在 tacit 风格中工作；现在我们想要绑定的参数是函数的第一个参数，因此我们可以直接将这个反转的函数传递给`partial`。
- en: Flipping Under Partial Application (2)
  id: totrans-split-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 局部应用下的翻转（2）
- en: Another example, from a refactor of [bagatto](https://git.sr.ht/~subsetpark/bagatto/commit/1f10e88)
    into tacit style. To be refactored is a higher-order function which takes some
    attribute name and returns a function that calls `sort` by getting that attribute.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例来自将[bagatto](https://git.sr.ht/~subsetpark/bagatto/commit/1f10e88)重构为 tacit
    风格。要重构的是一个高阶函数，它接受某个属性名称并返回一个调用通过获取该属性来调用`sort`的函数。
- en: '[PRE27]'
  id: totrans-split-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In tacit style, this becomes:'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在 tacit 风格中，这变成了：
- en: '[PRE28]'
  id: totrans-split-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: By calling `flip` on sort, we obtain a function which can easily have our new
    `by` applied as the first argument.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`sort`上调用`flip`，我们获得一个函数，可以轻松地将我们的新`by`应用为第一个参数。
- en: recombine
  id: totrans-split-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重组
- en: '[PRE29]'
  id: totrans-split-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-split-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-split-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-split-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the case of J we see perhaps the starkest example of that language’s orientation
    towards tacit programming. J combines a few syntactic characteristics such that
    simple juxtaposition of verbs, that is, placing syntactic verbs directly next
    to each other with no operator, triggers the behaviour of application combinators.
    In the case of `mean`, we see that creating a so-called 3-train of 3 verbs, `f
    g h`, creates a new verb whose behaviour is analogous to `recombine(g, f, h)`,
    called a *fork* in J.
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 J 的例子中，我们可能看到该语言向以点式编程倾斜的最明显的例子。J 结合了一些语法特征，使得动词的简单并列，也就是直接将语法动词紧挨在一起而不使用运算符，触发应用组合器的行为。对于
    `mean`，我们看到创建了一个所谓的 3-训练，`f g h`，创建了一个行为类似于 `recombine(g, f, h)` 的新动词，J 中称为 *fork*。
- en: Min-max
  id: totrans-split-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最小-最大
- en: '[PRE33]'
  id: totrans-split-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-split-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-split-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-split-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Plus or Minus
  id: totrans-split-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加或减
- en: '[PRE37]'
  id: totrans-split-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-split-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: As in Absolute Difference above, we see that functions of two arguments, when
    treated explicitly, result in quite a bit of noise. Explicit `plusOrMinus` takes
    two arguments, neither of which has a particularly meaningful name (judging from
    the Lodash docs, under addition they should be named `augend` and `addend`; under
    subtraction, `minuend` and `subtrahend`—but what would we call them when both
    operations come into play?), each of which then has to be referred to twice.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如上面的绝对差异一样，我们看到两个参数函数在显式处理时会产生相当多的噪音。明确的 `plusOrMinus` 接受两个参数，其中没有一个具有特别有意义的名称（根据
    Lodash 文档，添加操作应命名为 `augend` 和 `addend`；减法下应命名为 `minuend` 和 `subtrahend`——但当两种操作同时出现时，我们应该如何称呼它们？），每个参数都需要两次引用。
- en: '[PRE39]'
  id: totrans-split-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-split-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'It’s worth noting that in both our JavaScript and Janet examples, the distinction
    between a unary recombined function, like `minMax`, and a variadic one, like `plusOrMinus`,
    is purely semantic: the syntax of application doesn’t change when the number of
    arguments expected by `g` and `h` do.'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 JavaScript 和 Janet 示例中，值得注意的是，像 `minMax` 这样的一元重新组合函数和像 `plusOrMinus` 这样的可变参数函数之间的区别纯粹是语义上的：当
    `g` 和 `h` 期望的参数数量不同时，应用的语法不会改变。
- en: In the J example, on the other hand, our application syntax is by default infix;
    so while our `min_max` is written before its argument, our `plus_minus` is written
    in between its two arguments, syntactically identical to its constituent `g` and
    `h`.
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在 J 的例子中，我们的应用语法默认是中缀；因此，虽然我们的 `min_max` 是写在其参数之前的，但我们的 `plus_minus` 是写在其两个参数之间的，语法上与其组成的
    `g` 和 `h` 完全相同。
- en: item-getter
  id: totrans-split-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目获取器
- en: Another example from [bagatto](https://git.sr.ht/~subsetpark/bagatto/commit/1f10e88)
    shows a real-world refactoring using `recombine`, as well as a non-trivial usage
    of `constant`.
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个来自 [bagatto](https://git.sr.ht/~subsetpark/bagatto/commit/1f10e88) 的例子展示了使用
    `recombine` 进行现实世界的重构，以及对 `constant` 的非平凡使用。
- en: '`item-getter` is a function which takes a path of keywords and should return
    a function that, given two arguments, will retrieve the attribute at that path
    in the second argument.'
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`item-getter` 是一个接受关键字路径的函数，应返回一个函数，给定两个参数，将检索第二个参数中该路径处的属性。'
- en: 'A brief test to demonstrate the expected behaviour:'
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简短的测试以展示预期的行为：
- en: '[PRE41]'
  id: totrans-split-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The explicit version:'
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: 明确版本：
- en: '[PRE42]'
  id: totrans-split-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Tacit:'
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以点式风格：
- en: '[PRE43]'
  id: totrans-split-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The tacit version, at least with all of the names spelled out, is *not shorter*.
    And if we’re still trying to remember what `recombine` does, it’s no easier to
    read.
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: 至少在所有名称都拼写出来的情况下，点式版本*并不更短*。如果我们仍然试图记住 `recombine` 的行为，这样阅读起来也不容易。
- en: But once we have internalized the behaviour of `recombine` a little bit, the
    tacit example has the advantage of not having to introduce any additional names
    at all. We can read that it returns a function that calls `get-in` on its second
    argument and `path`.
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 但是一旦我们稍微内化了 `recombine` 的行为，点式示例就有了不引入任何额外名称的优势。我们可以看到它返回一个函数，在其第二个参数上调用 `get-in`
    和 `path`。
- en: Population Standard Deviation
  id: totrans-split-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总体标准偏差
- en: '[PRE44]'
  id: totrans-split-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-split-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: In this example, we showcase the effectiveness of partial functions towards
    programming in a tacit style.
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们展示了偏函数在以点式风格编程中的有效性。
- en: 'In the first place, it’s important to note that in our K code we’ve defined
    `pow` differently from the `apply` example: here we’ve opted for an explicit definition
    so that the arguments to pow are `base`, `exponent`, which is arguably the more
    natural ordering.'
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，重要的是要注意，在我们的 K 代码中，我们已经从 `apply` 的例子中定义了不同的 `pow`：这里我们选择了一个显式定义，使得 `pow`
    的参数是 `base`、`exponent`，这可以说是更自然的顺序。
- en: 'We have also defined `mean` using the K translation of `recombine`: where our
    J code in that example took advantage of *juxtaposition* to create a so-called
    *3-train*, which J defines to behave as `recombine`, K has no such built-in support.
    The only effect of juxtaposition is composition, as we saw in the example of `*/#`.
    Instead we’ve used the phrase `@\:`, which means “apply each of the functions
    on the left”, with an array containing `sum` and `length`, and composed `%/` to
    its left, reducing the array containing the results of both operations with division.'
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了K翻译的`recombine`来定义`mean`：在那个例子中，我们的J代码利用了*并置*来创建所谓的*3-列*，J将其定义为`recombine`，而K没有这样的内置支持。并置的唯一效果是组合，正如我们在`*/#`的例子中看到的那样。相反，我们使用了短语`@\:`，意思是“对左边的每个函数应用”，带有包含`sum`和`length`的数组，并在其左边组合了`%/`，用除法减少包含两个操作结果的数组。
- en: 'Our final definition, `std`, is a tacit expression describing the composition
    of all the operations performed iteratively in the JavaScript code. In particular
    I want to highlight the spelling `pow[;2]`. This is a so-called *projection*,
    and its semantics are to produce a function which fixes `2` as the second argument
    to the function `pow`. K’s primitive and flexible syntax for projections makes
    it extremely convenient to describe partial function application; whereas in our
    `partial` example above, we needed to include `flip` in order to bind `2` to the
    second argument of `pow`: K’s projection syntax allows partial application in
    any argument positions.'
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最终定义，`std`，是一个无声表达式，描述了JavaScript代码中迭代执行的所有操作的组合。特别要强调的是`pow[;2]`的拼写。这是所谓的*投影*，其语义是生成一个将`2`作为函数`pow`的第二个参数固定的函数。K对投影的原始且灵活的语法使得描述部分函数应用非常方便；而在上面我们的`partial`示例中，我们需要包含`flip`来绑定`pow`的第二个参数：K的投影语法允许在任何参数位置进行部分应用。
- en: The resulting function is a juxtaposition of the following functions
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
  zh: 结果函数是以下函数的并置
- en: '`1 mean\`: produce an array containing `x` and the mean of `x`.'
  id: totrans-split-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1 mean\`: 生成包含 `x` 和 `x` 均值的数组。'
- en: '`-/`: join those two values with `-`. Implicit in this step is the `map` that’s
    explicit in the JavaScript; as an array language, K “does the right thing” when
    subtracing a single value from an array of values.'
  id: totrans-split-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-/`: 用`-`连接这两个值。在这一步中隐含的是显式的JavaScript中的`map`；作为一个数组语言，K在从值数组中减去单个值时“做正确的事情”。'
- en: '`pow[;2]''`: square the differences.'
  id: totrans-split-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pow[;2]''`: 对差值进行平方。'
- en: '`mean @`: take the mean.'
  id: totrans-split-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean @`: 取均值。'
- en: '`%`: take the square root.'
  id: totrans-split-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%`: 取平方根。'
- en: In all cases besides the explicit `@`, the juxtaposition of two verbs is syntactically
    treated as function composition, producing a single composed function.
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
  zh: 除了显式的 `@`，所有情况下两个动词并置被语法上视为函数组合，生成一个组合的单一函数。
- en: Each Value is Unique
  id: totrans-split-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每个值都是唯一的。
- en: '[PRE46]'
  id: totrans-split-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-split-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-split-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-split-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'J boasts yet another specialization for tacit programming; whereas we’ve seen
    the 3-train create a *fork*, a 2-train (which we express in terms of `recombine`
    by passing in `identity` as either `g` or `h`) has its own combinatorial meaning:
    it creates a *hook*, such that `f g` behaves like `x => f(x, g(x))`.'
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
  zh: J 还支持另一种专门的做事无声的编程方式；我们已经看到 3-列构成了*叉*，而 2-列（我们通过将`recombine`传入`identity`作为`g`或`h`表达的方法）有其自己的组合意义：它创建了一个*钩*，以便`f
    g`的行为类似于`x => f(x, g(x))`。
- en: '[PRE50]'
  id: totrans-split-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Other members of the array family tend to reserve 2-trains for simple function
    composition, as we have seen in other K examples. In K, the specialized hook behaviour
    can be achieved with `n-dos`, where `1 g\ x` produces an array of `(x;g x)`, which
    we can then fold some `f` over. If `f` needed to be passed `g(x), x`, then we
    could reverse the array before folding.
  id: totrans-split-137
  prefs: []
  type: TYPE_NORMAL
  zh: 数组家族的其他成员倾向于将2-列保留给简单的函数组合，正如我们在其他K示例中看到的那样。在K中，专门的钩行为可以通过`n-dos`实现，其中`1 g\
    x`生成一个 `(x; g x)` 的数组，然后我们可以在其上折叠一些`f`。如果`f`需要传递`g(x), x`，那么我们可以在折叠之前反转数组。
- en: 'Equivalently, we could use `eachleft` in the same way we did to write `mean`:'
  id: totrans-split-138
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，我们可以使用`eachleft`来编写`mean`的方式：
- en: '[PRE51]'
  id: totrans-split-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Here, the second of the two functions we apply is `::`, the identity function.
  id: totrans-split-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们应用的两个函数中的第二个是`::`，即身份函数。
- en: under
  id: totrans-split-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: under
- en: '[PRE52]'
  id: totrans-split-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-split-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-split-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-split-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: In J, dyadic `under` is spelled Appose, `&:`.
  id: totrans-split-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在J中，二元`under`被称为Appose，`&:`。
- en: 'It’s worth noting that with only one argument, `under` behaves just like `compose`:
    `x => _.isEqual(_.sortBy(x))`. (Thus, monadic Appose `&:` is equivalent to At
    `@:`, which we’ve seen above!)'
  id: totrans-split-147
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，只有一个参数时，`under`的行为就像`compose`：`x => _.isEqual(_.sortBy(x))`。（因此，单子Appose
    `&:` 等同于At `@:`，我们在上面已经看到了！）
- en: The noteworthy difference, then, is how we want to wield the innermost function
    when given two or more arguments. Within `compose(f, g)`, all those arguments
    are passed to a single application of `g`, and the result is passed to `f`. Within
    `under`, `g` is treated as a single-argument function and each argument to the
    composition has `g` called on it individually.
  id: totrans-split-148
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的区别在于，当给定两个或更多参数时，我们希望如何运用最内层函数。在`compose(f, g)`中，所有这些参数都传递给单个`g`的应用，然后将结果传递给`f`。在`under`中，`g`被视为单参数函数，并且组合的每个参数都会单独调用`g`。
