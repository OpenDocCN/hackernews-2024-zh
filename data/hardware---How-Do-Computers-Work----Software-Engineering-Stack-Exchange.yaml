- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:49:09'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:49:09'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: hardware - How Do Computers Work? - Software Engineering Stack Exchange
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件 - 计算机是如何工作的？ - 软件工程交流平台
- en: 来源：[https://softwareengineering.stackexchange.com/questions/81624/how-do-computers-work](https://softwareengineering.stackexchange.com/questions/81624/how-do-computers-work)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://softwareengineering.stackexchange.com/questions/81624/how-do-computers-work](https://softwareengineering.stackexchange.com/questions/81624/how-do-computers-work)
- en: I will start from the lowest level that might be relevant (I can start from
    even lower level, but they are probably way too irrelevant), starting from Atom,
    to Electricity, to Transistors, to Logic Gates, to Integrated Circuits (Chip/CPU),
    and finishes at Assembly (I'd assume you are familiar with the higher levels).
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我将从可能相关的最低级别开始（我可以从更低级别开始，但它们可能太不相关了），从原子开始，到电力，到晶体管，到逻辑门，到集成电路（芯片/CPU），最后到组装（我认为你对更高级别比较熟悉）。
- en: In the Beginning
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 起初
- en: Atom
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原子
- en: '[Atom](http://en.wikipedia.org/wiki/Atom) is a structure composed of electrons,
    protons, and neutron (which themselves are composed of [elementary particles](http://en.wikipedia.org/wiki/Elementary_particle)).
    The most interesting part of the atom for computers and electronics are the [electrons](http://en.wikipedia.org/wiki/Electron)
    because electron are mobile (i.e. it can move around relatively easily, unlike
    protons and neutrons which are more difficult to move) and they can free-float
    by itself without being held inside an atom.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[原子](http://en.wikipedia.org/wiki/Atom)是由电子、质子和中子（它们本身由[基本粒子](http://en.wikipedia.org/wiki/Elementary_particle)组成）构成的结构。对计算机和电子学最有趣的部分是电子，因为电子是移动的（即它可以相对容易地移动），它可以自由漂浮而不被困在原子内部。'
- en: Usually, each atoms has equal number of protons and electrons, we call this
    "neutral" state. As it happens, it is possible for an atom to lose or gain extra
    electrons. Atoms in this unbalanced state are said to be "positively charged"
    atom (more proton than electrons) and "negatively charged" atom (more electron
    than proton) respectively.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，每个原子具有相等数量的质子和电子，我们称之为"中性"状态。事实上，原子可能会失去或获得额外的电子。处于这种不平衡状态的原子分别被称为"带正电"的原子（质子比电子多）和"带负电"的原子（电子比质子多）。
- en: Electrons are unconstructible and indestructible (not so in quantum mechanics,
    but that's irrelevant for our purpose); so if an atom loses an electron, some
    other atom nearby had to receive the extra electrons or the electron had to released
    into a free floating electron, conversely since electron is unconstructible, to
    gain extra electron, an atom had to sap it off nearby atoms or from a free floating
    electron. The mechanics of electrons is such that if there is a negatively-charged
    atom near a positively-charged atom, then some electrons will migrate until both
    atoms have the same charge.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 电子是无法被构造或破坏的（在量子力学中并非如此，但这与我们的目的无关）；因此，如果一个原子失去一个电子，附近的另一个原子必须接收额外的电子，或者电子必须释放到一个自由漂浮的电子中。反过来，由于电子是无法被构造的，要获得额外的电子，原子必须从附近的原子或自由漂浮的电子中吸取它。电子的运动机制是这样的：如果附近有一个带负电的原子和一个带正电的原子，那么一些电子将迁移，直到两个原子具有相同的电荷。
- en: Electricity
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电力
- en: '[Electricity](http://en.wikipedia.org/wiki/Electricity) is just a flow of electrons
    from an area with very high number of negatively-charged atoms to an area with
    very high number of positively-charged atoms. Certain chemical reactions can create
    a situation where we have one nodes with lots of negatively-charged atoms (called
    "anode"), and another node with lots of positively-charged atoms (called "cathode").
    If we connect two oppositely charged nodes with a wire, masses of electrons will
    flow from the anode to cathode, and this flow is what we call "electric current".'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[电力](http://en.wikipedia.org/wiki/Electricity)只是电子从电子数量非常多的区域流向电子数量非常多的区域的流动。某些化学反应可以产生这样一种情况：我们有一个节点有大量带负电的原子（称为"阳极"），另一个节点有大量带正电的原子（称为"阴极"）。如果我们用导线连接两个带相反电荷的节点，电子将从阳极流向阴极，这种流动就是我们所说的"电流"。'
- en: Not all wires can transmit electrons equally easily, electrons flows much easily
    in "conducting" materials than in "resistant" materials. A "conducting" material
    have low electrical resistance (e.g. copper wires in cables) and a "resistant"
    material have high electrical resistance (e.g. rubber cable insulation). Some
    interesting materials are called semi-conductors (e.g. silicons), because they
    can alter their resistance easily, under certain conditions a semiconductor might
    act as a conductor and at other conditions it might turn into a resistor.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有导线都能同等容易地传输电子，电子在"导电"材料中的流动比在"电阻"材料中更容易。"导电"材料具有较低的电阻（例如电缆中的铜导线），而"电阻"材料具有较高的电阻（例如橡胶电缆绝缘）。一些有趣的材料被称为半导体（例如硅），因为它们可以在特定条件下轻易改变电阻，半导体在某些条件下可能表现为导体，在其他条件下可能表现为电阻体。
- en: Electricity always prefers to flow through the material with least resistance,
    so if a cathode and anode are connected with two wires, one having very high resistance
    and the other with very low resistance, the majority of electrons will flow through
    the low resistance cable and nearly none flows through the high resistance material.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 电流总是倾向于通过电阻最小的材料流动，因此如果一个阴极和阳极通过两根导线连接，其中一根电阻非常高，另一根电阻非常低，大部分电子将通过电阻较低的电缆流动，几乎没有电子通过高电阻材料流动。
- en: The Middle Age
  id: totrans-split-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中世纪
- en: Switches and Transistors
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开关与晶体管
- en: Switches/Flip-Flops are like your regular light switches, a switch can be placed
    between two pieces of wire to cut off and/or restore electricity flow. Transistors
    works exactly the same as a light switch, except that instead of physically connecting
    and disconnecting wires, a transistor connects/disconnects electricity flow by
    altering its resistance depending on whether there is electricity in the base
    node, and, as you might have already guessed/know, transistors are made from semiconductors
    because we can alter semiconductor to become either a resistor or a conductor
    to connect or disconnect electric currents.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 开关/触发器就像普通的电灯开关一样，可以放置在两根导线之间，用于切断和/或恢复电流。晶体管的工作原理与电灯开关完全相同，只是它不是通过物理连接和断开导线来连接/断开电流，而是通过改变其电阻来连接/断开电流，这取决于基极节点是否有电流。正如你可能已经猜到/知道的那样，晶体管由半导体制成，因为我们可以改变半导体的性质，使其成为电阻体或导体，以连接或切断电流。
- en: 'One common type of transistor, the [NPN Bipolar Junction Transistor](http://en.wikipedia.org/wiki/Bipolar_junction_transistor)
    (BJT), has three nodes: "base", "collector", and "emitter". In an NPN BJT, electricity
    can flow from the "emitter" node to the "collector" node only when the "base"
    node is charged. When the base node is not charged, practically no electron can
    flow through and when the base node is charged, then electrons can flow between
    the emitter and the collector.'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常见的晶体管类型，[NPN 双极晶体管](http://en.wikipedia.org/wiki/Bipolar_junction_transistor)（BJT），有三个节点："基极"、"集电极"和"发射极"。在
    NPN BJT 中，只有在基极充电时电流才能从发射极流向集电极。当基极未充电时，几乎没有电子能够流过；而当基极充电时，电子就能在发射极和集电极之间流动。
- en: The behavior of a transistor
  id: totrans-split-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 晶体管的行为
- en: (I highly suggest you read through [this](http://www.spsu.edu/cs/faculty/bbrown/web_lectures/transistors/)
    before continuing, as it can explain better than me with interactive graphics)
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: （我强烈建议你在继续之前阅读[这篇文章](http://www.spsu.edu/cs/faculty/bbrown/web_lectures/transistors/)，因为它可以通过交互式图形更好地解释。）
- en: Let's say we have a transistor connected to an electric source at its base and
    collector, and then we wire up an Output cable near its collector (see Figure
    3 in [http://www.spsu.edu/cs/faculty/bbrown/web_lectures/transistors/](http://www.spsu.edu/cs/faculty/bbrown/web_lectures/transistors/)).
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个连接到电源的晶体管，其基极和集电极连接，然后我们在其集电极附近接线一个输出电缆（见图3在[http://www.spsu.edu/cs/faculty/bbrown/web_lectures/transistors/](http://www.spsu.edu/cs/faculty/bbrown/web_lectures/transistors/)）。
- en: 'When we apply electricity to neither base nor collector, then no electricity
    can flow at all since there is no electricity to talk about:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们既不对基极也不对集电极施加电流时，因为没有电流可供谈论，根本就不会有电流流动：
- en: '[PRE0]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we apply electricity to the collector but not the base, electricity cannot
    flow to the emitter since the base becomes a high resistance material, so the
    electricity escapes to the Output wire:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们对集电极施加电流但不对基极施加电流时，电流无法流向发射极，因为基极成为高电阻材料，所以电流逃向输出电线：
- en: '[PRE1]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When we apply electricity to the base but not the collector, also no electricity
    can flow since there is no charge difference between the collector and the emitter:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向基极施加电流但不向集电极施加电流时，也不能流动电流，因为集电极和发射极之间没有电荷差：
- en: '[PRE2]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When we apply electricity to both base and collector, we get electricity flowing
    through the transistor, but since the transistor now has lower resistance than
    the Output wire, nearly no electricity flows through the Output wire:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将电流应用于基极和集电极时，电流通过晶体管流动，但由于晶体管现在的电阻比输出导线低，几乎没有电流通过输出导线：
- en: '[PRE3]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Logic Gates
  id: totrans-split-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑门
- en: 'When we connect the emitter of one transistor (E1) to the collector of another
    transistor (C2) and then we connect an output near the base of the first transistor
    (O) (see Figure 4 in [http://www.spsu.edu/cs/faculty/bbrown/web_lectures/transistors/](http://www.spsu.edu/cs/faculty/bbrown/web_lectures/transistors/)),
    then something interesting happens. Let''s also say we always apply electricity
    to the collector of the first transistor (C1) and so we only play around with
    the the base nodes of the transistors (B1,B2):'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将一个晶体管的发射极（E1）连接到另一个晶体管的集电极（C2），然后我们在第一个晶体管的基极附近连接一个输出（O）（参见图4中的[http://www.spsu.edu/cs/faculty/bbrown/web_lectures/transistors/](http://www.spsu.edu/cs/faculty/bbrown/web_lectures/transistors/)），然后会发生一些有趣的事情。同时假设我们总是向第一个晶体管的集电极（C1）施加电流，因此我们只是在晶体管的基节点（B1、B2）上玩耍：
- en: '[PRE4]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s summarize the table so we only see B1, B2, and O:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结表格，所以我们只看到B1、B2和O：
- en: '[PRE5]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Lo and behold*, if you''re familiar with Boolean Logic and/or Logic Gates,
    you should notice that this is precisely the NAND gate. And if you''re familiar
    with Boolean Logic and/or Logic Gates you might also know that a NAND (as well
    as NOR) is [functionally complete](http://en.wikipedia.org/wiki/Functional_completeness),
    i.e. using NAND only, you can construct all the other logic gates and the rest
    of the truth tables. In other word, you can design a whole computer chip using
    NAND gates alone.'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*瞧，如果*你熟悉布尔逻辑和/或逻辑门，你应该注意到这正是NAND门。如果你熟悉布尔逻辑和/或逻辑门，你可能也知道NAND（以及NOR）是[功能完备](http://en.wikipedia.org/wiki/Functional_completeness)，即仅使用NAND，你可以构建所有其他逻辑门和其余的真值表。换句话说，你可以仅使用NAND门设计一个完整的计算机芯片。'
- en: In fact, most CPUs are (or is it used to be?) designed using NAND only since
    it is cheaper to manufacture than using a combination of NAND, NOR, AND, OR, etc.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，大多数CPU是（还是曾经是？）仅使用NAND设计的，因为这比使用NAND、NOR、AND、OR等的组合更便宜制造。
- en: Deriving the other boolean operators from NAND
  id: totrans-split-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从NAND推导出其他布尔运算符
- en: I would not describe how to make all boolean operators, only the NOT and the
    AND gate, you can find the rest somewhere else.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会描述如何制作所有布尔运算符，只有NOT和AND门，你可以在其他地方找到其余的内容。
- en: 'Given a NAND operator, then we can construct a NOT gate:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个NAND运算符，那么我们可以构建一个NOT门：
- en: '[PRE6]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Given a NAND and NOT operator, then we can construct an AND gate:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个NAND和NOT运算符，那么我们可以构建一个AND门：
- en: '[PRE7]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can construct other logic gates in a similar way. Since NAND gate is *functionally
    complete*, it is also possible to construct logic gates with more than 2 inputs
    and more than 1 output, I'm not going to discuss how to construct such logic gates
    here.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以类似的方式构建其他逻辑门。由于NAND门是*功能完备*的，因此也可以构建具有多于2个输入和多于1个输出的逻辑门，我不打算在这里讨论如何构建这样的逻辑门。
- en: Enlightenment Age
  id: totrans-split-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启蒙时代
- en: Building a Turing Machine from Boolean Gates
  id: totrans-split-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从布尔门构建图灵机
- en: A CPU are just a more complicated version of a Turing Machine. The CPU registers
    are the Turing Machine's internal state, and the RAM is a Turing Machine's tape.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: CPU只是图灵机的更复杂版本。 CPU寄存器是图灵机的内部状态，RAM是图灵机的磁带。
- en: 'A Turing Machine (CPU) can do three things:'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图灵机（CPU）可以做三件事：
- en: read a 0 or 1 from the tape (read a cell of memory from RAM)
  id: totrans-split-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从磁带（从RAM的内存单元读取0或1）
- en: change its internal state (change its registers)
  id: totrans-split-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变其内部状态（改变其寄存器）
- en: move left or right (read multiple position from the RAM)
  id: totrans-split-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左移或右移（从RAM读取多个位置）
- en: write a 0 or 1 to the tape (write to a cell of memory to RAM)
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向磁带写入0或1（将数据写入RAM的内存单元）
- en: For our purpose, we're building Wolfram's [2-state 3-symbol Turing Machine](http://en.wikipedia.org/wiki/Wolfram%27s_2-state_3-symbol_Turing_machine)
    using combinatorial logic (modern CPUs would use microcode, but they're more complex
    than is necessary for our purpose).
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，我们正在使用组合逻辑构建Wolfram的[2状态3符号图灵机](http://en.wikipedia.org/wiki/Wolfram%27s_2-state_3-symbol_Turing_machine)（现代CPU将使用微码，但它们比我们的目的更复杂）。
- en: 'The state table of the Wolfram''s (2,3) Turing Machine is as follow:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: Wolfram 的 (2,3) 图灵机状态表如下：
- en: '[PRE8]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We want to reencode the state table above as a truth table:'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将上面的状态表重新编码为一个真值表：
- en: '[PRE9]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: I'm not really going to construct such a logic gate (I'm not sure how to draw
    it in SE and it's probably going to be quite huge), but since we know that NAND
    gate is *functionally complete*, then we have a way to find a series of NAND gates
    that will implement this truth table.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会真的去构建这样一个逻辑门（我不确定如何在 SE 中绘制它，而且它可能会相当庞大），但由于我们知道 NAND 门是*功能完备*的，那么我们有一种方法找到一系列
    NAND 门来实现这个真值表。
- en: An important property of Turing Machine is that it is possible to emulate a
    [stored-program computer](http://en.wikipedia.org/wiki/Stored-program_computer)
    using a Turing machine that only have a fixed states table. Therefore, any Universal
    Turing Machine can read its program from the Tape (RAM) instead of having to have
    its instruction hardcoded into the internal state table. In other word, our (2,3)
    Turing Machine can read its instructions from I1,I2 pins (as software) instead
    of being hardcoded in the logic gate implementation (as hardware).
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图灵机的一个重要特性是可以使用仅有固定状态表的图灵机来模拟[存储程序计算机](http://en.wikipedia.org/wiki/Stored-program_computer)。因此，任何通用图灵机都可以从磁带（RAM）中读取其程序，而不必将其指令硬编码到内部状态表中。换句话说，我们的
    (2,3) 图灵机可以从 I1、I2 引脚（作为软件）读取其指令，而不是被硬编码到逻辑门实现中（作为硬件）。
- en: Microcodes
  id: totrans-split-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微代码
- en: Due to the increasing complexity of modern CPUs, it becomes prohibitively difficult
    to use combinatorial logic alone to design a whole CPU. Modern CPU is usually
    designed as an interpreter of microcodes instruction; a microcode is a small program
    embedded in the CPU that is used by the CPU to interpret the actual machine code.
    This microcode interpreter itself are generally designed using combinatorial logic.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于现代 CPU 的复杂性不断增加，仅仅使用组合逻辑来设计整个 CPU 已变得难以实现。现代 CPU 通常被设计为微代码指令的解释器；微代码是嵌入在 CPU
    中的一个小程序，用于 CPU 解释实际的机器码。这个微代码解释器本身通常是使用组合逻辑设计的。
- en: Register, Cache, and RAM
  id: totrans-split-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 寄存器、高速缓存和 RAM
- en: We have forgotten something above. How do we remember something? How do we implement
    the tape and RAM? The answer is in an electronic component called Capacitor. A
    capacitor is like a rechargeable battery, if a capacitor is charged it will retain
    extra electrons and it can also return electrons to the circuitry.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面忘了一些东西。我们如何记住一些东西？我们如何实现磁带和 RAM？答案在一个叫做电容器的电子元件中。电容器就像是可充电电池，如果一个电容器充电了，它会保留额外的电子，它也可以将电子返回到电路中。
- en: To write to a capacitor, we fill the capacitor with electron (write 1) or drain
    all the electrons in the capacitor until it's empty (write 0). To read the value
    of a capacitor, we try to discharge it. If, when we try to discharge, there is
    no electricity flowing, then the capacitor is empty (read 0), but if we detect
    electricity, then the capacitor must be charged (read 1). You might notice that
    reading a capacitor drains its electron store, modern RAMs have the circuitry
    to periodically recharge capacitor so they can retain their memory as long as
    there is electricity.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要向电容器写入，我们将电子填充到电容器中（写入 1）或者将电容器中的所有电子耗尽直到它为空（写入 0）。要读取电容器的值，我们尝试放电。如果我们尝试放电时没有电流流过，那么电容器是空的（读取
    0），但是如果检测到电流，那么电容器必须是充电的（读取 1）。你可能注意到读取电容器会耗尽其电子存储，现代 RAM 具有电路以周期性地重新充电电容器，使其在有电的情况下保持其存储。
- en: There are multiple types of capacitors used in a CPU, the CPU registers and
    the higher level CPU caches are made using very high-speed "capacitors" that is
    actually built from transistors (therefore there is almost no "lag" to read/write
    from them), these are called static RAM (SRAM); while the main memory RAM is made
    using lower power, but slower and much cheaper capacitors, these are called Dynamic
    RAM (DRAM).
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CPU 中使用多种类型的电容器，CPU 寄存器和更高级别的 CPU 高速缓存是用非常高速的"电容器"（实际上由晶体管构建，因此几乎没有从中读/写的"滞后"），这些被称为静态
    RAM (SRAM)；而主存储器 RAM 是使用功耗较低、速度较慢和成本更低的电容器制成的，这些被称为动态 RAM (DRAM)。
- en: Clock
  id: totrans-split-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时钟
- en: A very important component of a CPU is the clock. A clock is a component that
    "ticks" regularly to synchronize processing. A clock typically contains a quartz
    or other materials with well-known and relatively constant oscillation period,
    and the clock circuitry maintain and measures this oscillation to maintain its
    sense of time.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: CPU 的一个非常重要的组成部分是时钟。时钟是一个定期“滴答”的组件，用于同步处理。时钟通常包含石英或其他具有已知且相对恒定振荡周期的材料，时钟电路通过维护和测量这种振荡来保持时间感。
- en: CPU operations are done *between* clock ticks and read/writes are done *in*
    the ticks to ensure that all components move synchronously and not trample into
    each other while in intermediate states. In our (2,3) Turing Machine, *between*
    clock ticks electricity passes through the logic gates to calculate the output
    from the input (I1, I2, R(t)); and *in* the clock ticks, the tape writer will
    write O1,O2 to the tape, the motor will move depending on the value of M, and
    the internal register is written from the value of R(t+1), then the tape reader
    will read the current tape and put charge into I1,I2 and the internal register
    is reread back to R(t).
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: CPU 操作是在时钟之间完成的，读/写是在时钟中完成的，以确保所有组件在中间状态时不会相互干扰。在我们的 (2,3) 图灵机中，在时钟之间，电力通过逻辑门来计算输入（I1,
    I2, R(t)）的输出；而在时钟中，打字机将 O1, O2 写入磁带，电机将根据 M 的值移动，内部寄存器从 R(t+1) 的值中写入，然后磁带读取器将读取当前磁带并将电荷放入
    I1, I2，内部寄存器重新读取到 R(t)。
- en: Talking with Peripherals
  id: totrans-split-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与外围设备交流
- en: Note how the (2,3) Turing Machine interfaces with its motor. That is a very
    simplified view of how a CPU may interface with an arbitrary hardware. Arbitrary
    hardware can listen or write to a specific wire for inputs/outputs. In the case
    for the (2,3) Turing Machine, its interface with the motor is just a single wire
    that instructs the motor to turn clockwise or counterclockwise.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 (2,3) 图灵机如何与其电机交互。这是 CPU 可能与任意硬件接口的极其简化的视图。任意硬件可以监听或写入特定的电线来进行输入/输出。对于 (2,3)
    图灵机来说，它与电机的接口只是一根单独的电线，指示电机顺时针或逆时针旋转。
- en: What is left unsaid in this machine is that the Motor had to have another "clock"
    that runs in synchrony with the Machine's internal "clock" to know when to start
    and stop running, so this is an example of a [synchronous data transmission](http://en.wikipedia.org/wiki/Data_transmission#Asynchronous_and_synchronous_data_transmission).
    The other commonly used alternative, asynchronous transmission uses another wire,
    called the interrupt line, to communicate synchronization points between the CPU
    and the asynchronous device.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这台机器中未说的一点是，电机必须有另一个与机器内部“时钟”同步运行的“时钟”，以便知道何时启动和停止运行，所以这是一个同步数据传输的例子。
- en: Digital Age
  id: totrans-split-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字时代
- en: Machine code and Assembly
  id: totrans-split-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器码和汇编语言
- en: Assembly language is a human readable mnemonic for machine codes. In the simplest
    case, there is a one-to-one mapping between assembly to machine code; although
    in modern assembly languages some instructions may map to multiple opcodes.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 汇编语言是机器码的一种人类可读的助记符。在最简单的情况下，汇编语言到机器码之间存在一对一的映射；尽管在现代汇编语言中，一些指令可能映射到多个操作码。
- en: Programming Language
  id: totrans-split-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程语言
- en: We all are familiar with this aren't we?
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都对此非常熟悉，不是吗？
- en: '* * *'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Phew, finally finished, I typed all this in just 4 hours, so I'm sure there
    is a mistake somewhere (I'm primarily a programmer, not electric engineer nor
    physicists, so there might be several things that is blatantly wrong). Please
    if you found a mistake, don't hesitate to give a @yell or fix it yourself if you
    have the rep or create a complementary answer.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，终于完成了，我仅用了 4 小时打完这些字，所以我确信某处肯定有错（我主要是程序员，不是电工或物理学家，所以可能有很多错误）。如果你发现错误，请@我或自行修正（如果你有权限），或者提供一个补充的答案。
