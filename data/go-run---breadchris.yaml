- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:02:51'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:02:51'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: go run | breadchris
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: go run | breadchris
- en: 来源：[https://breadchris.com/blog/go-run/](https://breadchris.com/blog/go-run/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://breadchris.com/blog/go-run/](https://breadchris.com/blog/go-run/)
- en: It may seem silly, but `go run` is my favorite part about go. Want to run your
    code? `go run main.go`. It is so stupidly simple that I could tell my mom about
    this command, and she would immediately understand. Like with most things in go,
    the real power in this command is in the effortless understanding of how to build
    and run everyone’s code.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来可能有些愚蠢，但`go run`是我最喜欢Go的部分。想运行你的代码？`go run main.go`。它如此简单以至于我可以告诉我妈妈这个命令，她会立刻理解。就像Go中的大多数事物一样，这个命令的真正威力在于对如何构建和运行每个人的代码的无忧理解。
- en: But I can run `node main.js`? Yeah, and then what happens if you want to use
    modern syntax like esmodule, or maybe you want to use types with typescript? You
    are going to have to use `npm`.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我可以运行`node main.js`？是的，然后如果你想使用现代语法像esmodule，或者也许你想使用typescript的类型呢？你将不得不使用`npm`。
- en: The tools you use to build and run code are often disparate in a language. As
    a project maintainer, you must understand community practices and conventions
    of correctly setting up a project. Third-party libraries are often required to
    run even the simplest of code. For example, in the Ruby programming language,
    the “rake” build tool became popular because of its versatility and the fact that
    it was used in many open-source projects. Similarly, in the JavaScript community,
    the adoption of npm as a build tool was driven by the widespread use of npm packages
    and modules.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你用来构建和运行代码的工具通常在一个语言中是分散的。作为项目维护者，你必须理解正确设置项目的社区实践和约定。即使是最简单的代码，通常也需要第三方库。例如，在Ruby编程语言中，“rake”构建工具因其多功能性而变得流行，并且被许多开源项目使用。同样，在JavaScript社区中，采用npm作为构建工具是因为广泛使用npm包和模块。
- en: Languages grow and change over time, and it is only natural that tools come
    and go as well. C and C++ have historically had “make” since the 1970s; Java grew
    from “ant” in the 1990s to Maven in the early 2000s. Different requirements for
    your application influence the tools that are developed and, by extension, influence
    people’s workflows.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 语言随时间增长和变化，工具自然也会来来去去。自上世纪70年代以来，C和C++一直有“make”；Java从上世纪90年代的“ant”发展到早期2000年代的Maven。应用程序对工具的不同需求影响着开发的工具，进而影响到人们的工作流程。
- en: This is precisely the reason I love `go run` so much. Go’s entire design brings
    power to the command. Simple syntax, static typing, and a strict dependency management
    system allow the compiler to quickly parse and analyze source code, leading to
    build times faster. Faster build times mean a broader reach of who could use the
    language to achieve their goals. It is funny; you will occasionally see a go project
    that includes a `Makefile`, but the compilation step is just a `go build` (build;
    don’t run the code). Old habits die hard.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我如此喜爱`go run`的原因。Go的整体设计赋予命令以强大的力量。简洁的语法、静态类型和严格的依赖管理系统使得编译器能够快速解析和分析源代码，从而加快构建时间。更快的构建时间意味着更广泛的使用语言来实现目标。有趣的是，你偶尔会看到一个Go项目包含一个`Makefile`，但编译步骤只是`go
    build`（构建；不运行代码）。老习惯难改。
- en: 'Fun fact: One of the understated features `go run` is that it will automatically
    download any dependencies the code references; how cool is that!'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实是，`go run`的一个被低估的特性是它会自动下载代码引用的任何依赖项；这多酷！
- en: The more I program in other languages, the more I feel the painful absence of
    a standardized build system. I find it frustrating to keep up with the latest
    and greatest build system for something as common as running code. For something
    so critical to my understanding of how to code, such as how to run it, I find
    it unacceptable not to have a reliable foundation of knowledge.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我在其他语言编程的次数越多，就越感到标准化的构建系统的痛苦缺失。要追赶作为运行代码如此普通的东西的最新和最伟大的构建系统，我觉得很沮丧。对于我理解如何编码这样的关键内容，比如如何运行它，没有一个可靠的知识基础是不可接受的。
- en: Do not compromise with hacks or workarounds for critical components of your
    software development flow. Take ownership of the tools you use and fight for change
    so that you and everyone else benefit. When experience is shared, problems are
    solved, days of people’s lives are saved, and passion for programming continues
    to grow, not wane.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 不要为软件开发流程中关键组件的妥协或变通而妥协。拥有您使用的工具并为变革而奋斗，使您和其他人受益。当经验共享时，问题得以解决，人们的生活天数得以挽救，并且对编程的热情不会减退，而是继续增长。
- en: 'comments:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注释：
- en: bun run :) bun hing.ts same with python but not compiled you need to install
    python that’s the beauty of go for me even rust you need a cargo file
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: bun run :) bun hing.ts 与 python 相同，但不编译，你需要安装 python 这就是 go 的魅力之处对我来说即使是 rust
    你也需要一个 cargo 文件
- en: amazing, for js we not only have npm, yarn, pnpm, and bower (am I missing any?)
    but we also have completely new runtimes [bun](https://bun.sh/) and [deno](https://deno.com/).
    these are not evil, but tread lightly. Is VC backed deno going to fold as a company?
    maybe bun gets burnt and we are onto the next one. meanwhile I will be here with
    my boring `go run`
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 了不起，对于 js，我们不仅有 npm、yarn、pnpm 和 bower（我有遗漏吗？），而且我们还有全新的运行时 [bun](https://bun.sh/)
    和 [deno](https://deno.com/)。这些都不是邪恶的，但要小心行事。VC 支持的 deno 会倒闭吗？也许 bun 会被烧毁，然后我们就转向下一个。与此同时，我将继续使用我的无聊的
    `go run`
