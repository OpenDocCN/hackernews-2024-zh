- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:31:32'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:31:32
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: We don't need a DAC - ESP32 PDM Audio - by Chris Greening
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们不需要 DAC - 由 Chris Greening 的 ESP32 PDM 音频
- en: 来源：[https://atomic14.substack.com/p/esp32-s3-no-dac](https://atomic14.substack.com/p/esp32-s3-no-dac)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://atomic14.substack.com/p/esp32-s3-no-dac](https://atomic14.substack.com/p/esp32-s3-no-dac)
- en: So, there’s no DAC on the ESP32-S3.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在 ESP32-S3 上没有 DAC。
- en: You would think this would be a bit of a downer if if you want to get audio
    out and use an analog amplifier.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要将音频输出并使用模拟放大器，你可能会认为这有点令人沮丧。
- en: But it’s actually surprisingly easy to output **P**ulse **D**ensity **M**odulated
    audio using Sigma Delta Modulation on the ESP32 and you can recover the audio
    signal by low pass filtering it - an RC filter can be sufficient for this. And
    that’s what I’m using in the video.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，使用 ESP32 上的 Sigma Delta 调制来输出**脉冲密度调制**音频实际上非常简单，你可以通过低通滤波器来恢复音频信号 - RC 滤波器就足够了。这也是我在视频中使用的方法。
- en: Though the Espressif docs do suggest a much better active filter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Espressif 的文档确实建议使用更好的主动滤波器。
- en: 'It’s pretty interesting to look at a PDM signal and view it in the frequency
    domain. Here’s a piece of audio along with it’s spectrogram:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在频域中查看 PDM 信号并将其显示出来确实很有趣。以下是一段音频及其频谱图：
- en: And here’s a simulated PDM version of the original audio. The sample rate of
    the PDM data is just over 1MHz and I’m showing the spectrogram from 0 to 500KHz
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是原始音频的模拟 PDM 版本。PDM 数据的采样率略高于 1MHz，我显示了从 0 到 500KHz 的频谱图
- en: The PDM data just goes from -1 to 1 and changes density depending on the value
    of the original signal.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: PDM 数据的范围从 -1 到 1，并根据原始信号的值改变密度。
- en: If we just look at the lower 8KHz of the spectrum then we can see what looks
    like our original signal.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只看频谱的较低部分，我们可以看到看起来像是我们的原始信号。
- en: So to recover the original audio we just apply a low pass filter - and hey presto,
    we have our original audio signal back!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要恢复原始音频，我们只需应用一个低通滤波器 - 哈喽，我们的原始音频信号就回来了！
- en: So how to do we do this on the ESP32?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在 ESP32 上实现这一点呢？
- en: There’s a couple of options available to us.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有几个选择可供选择。
- en: The [example code](https://github.com/espressif/esp-idf/tree/b4268c874a4cf8fcf7c0c4153cffb76ad2ddda4e/examples/peripherals/sigma_delta/sdm_dac)
    from Espressif suggests using a timer to output each sample using the **sigmadelta_set_duty**
    (you could also just use plain old PWM as well). This does work for audio data,
    and I’ve got some simple [sample code](https://github.com/atomic14/esp32-pdm-audio/blob/main/src/audio_output/PDMTimerOuput.cpp)
    that will do it, but it’s not very efficient - we’re constantly interrupted by
    a timer to send out the next sample. There’s also quite a lot of code required
    if you want to stream samples out from some other source.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例代码](https://github.com/espressif/esp-idf/tree/b4268c874a4cf8fcf7c0c4153cffb76ad2ddda4e/examples/peripherals/sigma_delta/sdm_dac)来自
    Espressif 的示例代码建议使用定时器来使用 **sigmadelta_set_duty** 输出每个样本（你也可以使用普通的 PWM）。这对音频数据确实有效，我有一些简单的[样本代码](https://github.com/atomic14/esp32-pdm-audio/blob/main/src/audio_output/PDMTimerOuput.cpp)可以实现这一点，但效率不高
    - 我们不断被定时器中断以发送下一个样本。如果你想要从其他来源流式传输样本，那么需要相当多的代码。'
- en: A much better way is to use the I2S peripheral which can also output PDM data.
    There are two annoying things with this which are highlighted in the timing diagram
    from the docs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的方法是使用 I2S 外设，它也可以输出 PDM 数据。但其中有两件令人讨厌的事情，这在文档中的时序图中有所体现。
- en: The first issue is that it always wants to output a left and right channel.
    This is a bit awkward if we just want to feed the PDM signal straight into an
    analog audio amplifier or headphones. But we can get around this by just outputting
    the same value for both the left and right channels.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个问题是它总是要输出左右声道。如果我们只想将 PDM 信号直接馈送到模拟音频放大器或耳机中，这有点尴尬。但我们可以通过为左右声道输出相同的值来解决这个问题。
- en: The second issue is that it always wants to output a clock signal - we don’t
    really need this. My workaround for this was to just assign the clock to IO45
    or IO46 - on the S3 you can’t really use these pins for much as they are strapping
    pins and it’s best to just leave them alone. But you can use them for outputs
    once the ESP32 has started up.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题是它总是要输出一个时钟信号 - 我们其实不需要这个。我对此的解决方法是将时钟分配给 IO45 或 IO46 - 在 S3 上，你不能真的为这些引脚做太多事情，因为它们是针对引线的引脚，最好是让它们保持不变。但一旦
    ESP32 启动了，你可以将它们用于输出。
- en: There are “proper” PDM amplifier ICs that will take this signal - for example
    the [MAX98358](https://www.analog.com/media/en/technical-documentation/data-sheets/max98358.pdf)
    or the [SSM2537](https://www.analog.com/media/en/technical-documentation/data-sheets/SSM2537.pdf).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有“合适”的PDM放大器IC可以接收此信号 - 例如[ MAX98358 ](https://www.analog.com/media/en/technical-documentation/data-sheets/max98358.pdf)或[
    SSM2537 ](https://www.analog.com/media/en/technical-documentation/data-sheets/SSM2537.pdf)。
- en: This all works surprisingly well, you can drive headphones directly from the
    PDM signal and most analog amplifiers will take the combined stereo PDM signal
    and will have a low enough bandwidth that they’ll just work.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都出奇的顺利，你可以直接从PDM信号驱动耳机，大多数模拟放大器都会接受合并的立体声PDM信号，并且带宽足够低，它们就可以正常工作。
- en: You can even just drive a speaker with a really simple half or full bridge and
    get reasonable audio out (though it may be quite noisy).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以只用一个非常简单的半桥或全桥驱动扬声器，并获得合理的音频输出（尽管可能会有很多噪音）。
- en: Have a watch of the video and let me know what you think.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 观看视频并告诉我你的想法。
