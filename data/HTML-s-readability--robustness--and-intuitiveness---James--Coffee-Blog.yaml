- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:35:03'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:35:03'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: HTML's readability, robustness, and intuitiveness | James' Coffee Blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML的可读性、健壮性和直观性 | James的咖啡博客
- en: 来源：[https://jamesg.blog/2024/03/22/html/](https://jamesg.blog/2024/03/22/html/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://jamesg.blog/2024/03/22/html/](https://jamesg.blog/2024/03/22/html/)
- en: This evening, I had a delightful conversation with [Tantek](https://tantek.com)
    and [Joe](https://artlung.com) about markup and programming languages. The crux
    of the discussion was complexity. We arrived at the topic of why HTML -- and more
    broadly the web -- won. Why HTML, at a time when the exact markup of the web was
    in its formative years, became the preferred standard.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 今天晚上，我与[Tantek](https://tantek.com)和[Joe](https://artlung.com)愉快地谈论了标记语言和编程语言。讨论的核心是复杂性。我们谈到了为什么HTML
    -- 以及更广泛地说，互联网 -- 胜出的话题。在互联网的标记语言正处于形成初期的时候，为什么HTML成为首选的标准。
- en: 'Tantek pointed me to a quote from Sir. Tim Berners-Lee''s "Weaving the Web"
    book, which according to [Tantek''s review](https://tantek.com/log/2003/0813t1158.html)
    has many interesting insights about the web. One quote from the book that was
    relevant to our discussion was:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Tantek指出了蒂姆·伯纳斯-李在《编织网络》一书中的一句引用，根据[Tantek的评论](https://tantek.com/log/2003/0813t1158.html)，这本书对Web有许多有趣的见解。对我们讨论有关的一句话是：
- en: But the human readability of HTML was an unexpected boon. To my surprise, people
    quickly became familiar with the tags and started writing their own HTML documents
    directly.
  id: totrans-split-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 但HTML的人类可读性是个意外的收获。令我惊讶的是，人们很快就熟悉了标签，并开始直接编写他们自己的HTML文档。
- en: 'I find HTML readable. And it is explicit. After a bit of learning, I developed
    the mental mapping that `p` was a paragraph, `h1` was a top-level heading, etc.
    While my initial knowledge may have spanned only the foundational text elements,
    and less of the semantic layout elements available -- `main`, `section`, `header`,
    etc. -- I felt I could do a lot with a little knowledge. This feeling of empowerment
    feels significant: with a bit of studying, you can get a long way with HTML.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得HTML很易读。它是明确的。经过一点学习，我建立了`p`是段落，`h1`是顶级标题等的心理映射。虽然我的初始知识可能只涵盖了基础文本元素，而不是语义布局元素如`main`、`section`、`header`等，但我感觉用少量的知识可以做很多事情。这种掌握感觉很重要：通过一点学习，你可以在HTML中走得很远。
- en: In comparison, markdown is a markup language that strives for readability, but
    has many syntactical gotcha-s that make authoring complex documents difficult.
    This is something one should keep in mind because many more complex documents
    start off simple. For instance, I wrote a poem and put it on my website, but I
    think my markdown parser messed up the line spacing. It looked okay in my text
    editor, but not when presented. I have never run into this issue with HTML (although
    I didn't want to write my poem in HTML because it is more verbose, I probably
    should have converted my markdown into HTML and verified the output!).
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，Markdown是一种追求可读性的标记语言，但有许多语法陷阱，使得编写复杂文档变得困难。这是值得注意的一点，因为许多复杂文档都是从简单开始的。例如，我写了一首诗并放在我的网站上，但我觉得我的Markdown解析器搞乱了行间距。在我的文本编辑器中看起来还好，但在展示时不太对劲。我从未在HTML中遇到过这个问题（尽管我不想在HTML中写诗因为它更冗长，我可能应该将我的Markdown转换为HTML并验证输出！）。
- en: HTML is robust, too. If you miss a tag, or put a typo in a tag, or don't include
    a `DOCTYPE`, among many other things, HTML still works. It tries its best to render
    a page. This robustness is great for authorship, too. If something is broken,
    you can visualise the issue. There is a visual feedback loop. You can debug and
    see the results.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: HTML也是很健壮的。如果你忽略了一个标签，或者在标签中打了错字，或者不包括`DOCTYPE`等等，HTML依然可以工作。它会尽力渲染页面。这种健壮性对于作者来说也是很好的。如果出了问题，你可以看到可视化反馈。你可以进行调试并查看结果。
- en: 'Joe pointed me to a relevant comment from [Adam Bosworth](https://artlung.com/blog/2020/02/19/adam-bosworths-talk-at-2005-mysql-users-conference/),
    who drove the team that worked on Internet Explorer 4.0 at Microsoft:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: Joe向我指出了[Adam Bosworth](https://artlung.com/blog/2020/02/19/adam-bosworths-talk-at-2005-mysql-users-conference/)的相关评论，他曾领导微软的互联网浏览器团队开发了IE
    4.0：
- en: 'The other issue was sloppy — HTML is really sloppy. In fact when we were building
    IE4 we had this very simple mantra. It doesn’t matter what you give us: we will
    render it. And every so often we sort of choke and we would stare at something
    we go “no no we will render this”– if table rows overlap table rows: we’d render
    if ‘s intersected with forms: we’d render. We didn’t care. Basically the general
    theory was it takes a licking and it keeps on ticking. And because we did that
    it meant that people could be very flexible and very sloppy about how they generated
    their content.'
  id: totrans-split-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另一个问题是粗糙的HTML —— 确实非常粗糙。事实上，当我们构建IE4时，我们有一个非常简单的信条。无论你给我们什么：我们都能渲染出来。偶尔我们会有些卡壳，我们会盯着某些东西看一会儿然后说“不，不，我们一定能渲染出来”
    —— 如果表格行重叠了：我们能渲染。如果's与表单相交：我们能渲染。我们不在乎。基本的理论是它顶住了挫折继续运行。正因为如此，人们可以在生成内容时非常灵活和粗心大意。
- en: For a beginner to programming, a page that doesn't look quite right is more
    intuitive than a page with an error. Errors are intimidating. A page that is slightly
    off begets improvement, just as seeing a mark on a plate you just cleaned begets
    cleaning the plate a bit more to make it look just right. I am grateful for how
    gracefully HTML fails. Indeed, I cannot recall writing a HTML page that failed.
    To all the browser vendor makers who have worked on ensuring this property remains
    true, thank you!
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于编程初学者来说，一个看起来不太对的页面比有错误的页面更直观。错误是令人生畏的。稍微有些偏差的页面促使改进，就像看到你刚刚清理过的盘子上有一个印记促使你再擦拭一下盘子使其看起来更完美一样。我很感激HTML容忍错误的优雅表现。事实上，我记不得自己写过一个HTML页面失败的情况。感谢所有确保这一特性持续存在的浏览器厂商们！
- en: We discussed how writing HTML is a joyful activity for some. There are in person
    communities like HTML Energy and online communities like the IndieWeb and 32 Bit
    Cafe where you can find many people who enjoy authoring HTML. Indeed, two weeks
    ago I helped someone who works in the film industry author their own website with
    HTML. They wanted to make their site with code, instead of using a site generator.
    The result, after a few hours of work, and occasional assistance from a community
    of people who love websites -- the IndieWeb -- was an amazing resume / CV web
    page that they wanted to continue improving. Seeing excitement over making a web
    page first-hand is wonderful.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论过对一些人来说编写HTML是一种令人愉悦的活动。有像HTML能量这样的线下社区，还有像IndieWeb和32 Bit Cafe这样的在线社区，你可以在这些地方找到很多喜欢创作HTML的人。事实上，两周前，我帮助一个从事电影行业的人使用HTML制作了他们自己的网站。他们想用代码来制作他们的网站，而不是使用网站生成器。经过几个小时的工作，偶尔得到来自热爱网站的IndieWeb社区的帮助后，他们得到了一个令人惊叹的简历/CV网页，并且希望继续改进它。第一手看到他们对制作网页的激动心情真是太美妙了。
- en: 'Indeed, I feel excited when I write, and proud when I have written, a HTML
    document. The process is relaxing. I can think about what I want to represent
    -- lists, paragraphs, italicised text, and so on -- and explicitly state what
    I want and where I want it. Then, I can start thinking about CSS, but that is
    another kettle of fish entirely. At the end, I have a web page that shows my content
    that I can share with others. I really do love HTML. (Note to self: Look up the
    etymology of the expression "kettle of fish".)'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 的确，当我写作时感到兴奋，当我完成写作时感到自豪，一篇HTML文档让我感到轻松。我可以思考我想要表示的内容 —— 列表、段落、斜体文本等等 —— 并明确地陈述我想要的内容和位置。然后，我可以开始考虑CSS，但那是另一回事了。最终，我有了一个展示我的内容并可以与他人分享的网页。我真的很喜欢HTML。（自己注意：查一下“kettle
    of fish”这个表达的词源。）
