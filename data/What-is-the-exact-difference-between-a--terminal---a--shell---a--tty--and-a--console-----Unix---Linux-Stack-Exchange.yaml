- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:47:19'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:47:19
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: What is the exact difference between a 'terminal', a 'shell', a 'tty' and a
    'console'? - Unix & Linux Stack Exchange
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是“终端”、“壳”、“tty”和“控制台”的确切区别？- Unix和Linux Stack Exchange
- en: 来源：[https://unix.stackexchange.com/questions/4126/what-is-the-exact-difference-between-a-terminal-a-shell-a-tty-and-a-con](https://unix.stackexchange.com/questions/4126/what-is-the-exact-difference-between-a-terminal-a-shell-a-tty-and-a-con)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://unix.stackexchange.com/questions/4126/what-is-the-exact-difference-between-a-terminal-a-shell-a-tty-and-a-con](https://unix.stackexchange.com/questions/4126/what-is-the-exact-difference-between-a-terminal-a-shell-a-tty-and-a-con)
- en: A terminal is at the end of an electric wire, a shell is the home of a turtle,
    tty is a strange abbreviation and a console is a kind of cabinet.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 终端是电线的末端，壳是乌龟的家，tty是一个奇怪的缩写，而控制台是一种类型的柜子。
- en: Well, etymologically speaking, anyway.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从词源学上讲，无论如何。
- en: In Unix terminology, the short answer is that
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从Unix术语上讲，简短的答案是
- en: terminal = tty = text input/output environment
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终端 = tty = 文本输入/输出环境
- en: console = physical terminal
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台 = 物理终端
- en: shell = command line interpreter
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 壳 = 命令行解释器
- en: '* * *'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Console, terminal and tty are closely related. Originally, they meant a piece
    of equipment through which you could interact with a computer: In the early days
    of Unix, that meant a [teleprinter](https://en.wikipedia.org/wiki/Teleprinter)-style
    device resembling a typewriter, sometimes called a teletypewriter, or “tty” in
    shorthand. The name “terminal” came from the electronic point of view, and the
    name “console” from the furniture point of view. Very early in Unix history, electronic
    keyboards and displays became the norm for terminals.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台、终端和tty密切相关。最初，它们指的是一种可以与计算机交互的设备：在Unix的早期，这意味着一种类似于打字机的[电传打印机](https://en.wikipedia.org/wiki/Teleprinter)式设备，有时被称为电传打字机，或者简称为“tty”。
    “终端”一词来自电子角度，而“控制台”一词来自家具角度。在Unix历史的早期阶段，电子键盘和显示器成为终端的常态。
- en: In Unix terminology, a **tty** is a particular kind of [device file](https://en.wikipedia.org/wiki/Device_file)
    which implements a number of additional commands ([ioctls](https://en.wikipedia.org/wiki/Ioctl#Terminals))
    beyond read and write. In its most common meaning, **terminal** is synonymous
    with tty. Some ttys are provided by the kernel on behalf of a hardware device,
    for example with the input coming from the keyboard and the output going to a
    text mode screen, or with the input and output transmitted over a serial line.
    Other ttys, sometimes called **pseudo-ttys**, are provided (through a thin kernel
    layer) by programs called [**terminal emulators**](https://en.wikipedia.org/wiki/Terminal_emulator),
    such as [Xterm](https://en.wikipedia.org/wiki/Xterm) (running in the [X Window
    System](https://en.wikipedia.org/wiki/X_Window_System)), [Screen](https://en.wikipedia.org/wiki/GNU_Screen)
    (which provides a layer of isolation between a program and another terminal),
    [SSH](https://en.wikipedia.org/wiki/Secure_Shell) (which connects a terminal on
    one machine with programs on another machine), [Expect](https://en.wikipedia.org/wiki/Expect)
    (for scripting terminal interactions), etc.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix术语中，**tty**是一种特定类型的[设备文件](https://en.wikipedia.org/wiki/Device_file)，它实现了除读写之外的一些其他命令（[ioctls](https://en.wikipedia.org/wiki/Ioctl#Terminals)）。在其最常见的含义中，**终端**与tty是同义词。一些tty由内核代表硬件设备提供，例如输入来自键盘，输出发送到文本模式屏幕，或者输入和输出通过串行线传输。其他tty，有时称为**伪终端**，由称为[**终端模拟器**](https://en.wikipedia.org/wiki/Terminal_emulator)的程序（通过一个薄内核层）提供，例如[Xterm](https://en.wikipedia.org/wiki/Xterm)（在[X窗口系统](https://en.wikipedia.org/wiki/X_Window_System)中运行），[Screen](https://en.wikipedia.org/wiki/GNU_Screen)（提供程序和另一个终端之间的隔离层），[SSH](https://en.wikipedia.org/wiki/Secure_Shell)（将一台机器上的终端连接到另一台机器上的程序），[Expect](https://en.wikipedia.org/wiki/Expect)（用于脚本化终端交互），等等。
- en: The word terminal can also have a more traditional meaning of a device through
    which one interacts with a computer, typically with a keyboard and a display.
    For example an X terminal is a kind of [thin client](https://en.wikipedia.org/wiki/Thin_client),
    a special-purpose computer whose only purpose is to drive a keyboard, display,
    mouse and occasionally other human interaction peripherals, with the actual applications
    running on another, more powerful computer.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 术语“终端”也可以具有更传统的含义，即通过该设备与计算机进行交互，通常具有键盘和显示器。例如，X终端是一种[瘦客户端](https://en.wikipedia.org/wiki/Thin_client)，是一种特殊用途的计算机，其唯一目的是驱动键盘、显示器、鼠标和偶尔其他人机交互外围设备，实际应用程序在另一台更强大的计算机上运行。
- en: A **console** is generally a terminal in the physical sense that is by some
    definition the primary terminal directly connected to a machine. The console appears
    to the operating system as a (kernel-implemented) tty. On some systems, such as
    Linux and FreeBSD, the console appears as several ttys (special key combinations
    switch between these ttys); just to confuse matters, the name given to each particular
    tty can be “console”, ”virtual console”, ”virtual terminal”, and other variations.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制台**通常是物理上连接到计算机的终端。控制台在操作系统中显示为（内核实现的）tty。在某些系统中，如 Linux 和 FreeBSD，控制台显示为多个
    tty（特殊的键组合在这些 tty 之间切换）；为了混淆事情，对每个特定的 tty 给出的名称可以是“控制台”、“虚拟控制台”、“虚拟终端”和其他变体。'
- en: See also [Why is a Virtual Terminal “virtual”, and what/why/where is the “real”
    Terminal?](https://askubuntu.com/q/14284/1059).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅[为什么虚拟终端是“虚拟”的，什么/为什么/在哪里是“真实”的终端？](https://askubuntu.com/q/14284/1059)。
- en: '* * *'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: A [**shell**](https://en.wikipedia.org/wiki/Shell_%28computing%29) is the primary
    interface that users see when they log in, whose primary purpose is to start other
    programs. (I don't know whether the original metaphor is that the shell is the
    home environment for the user, or that the shell is what other programs are running
    in.)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[**shell**](https://en.wikipedia.org/wiki/Shell_%28computing%29)是用户登录时看到的主要界面，其主要目的是启动其他程序。（我不知道原始的隐喻是
    shell 是用户的家庭环境，还是其他程序正在其中运行的 shell。）'
- en: In Unix circles, **shell** has specialized to mean a [command-line shell](https://en.wikipedia.org/wiki/Shell_%28computing%29#Command-line_shells),
    centered around entering the name of the application one wants to start, followed
    by the names of files or other objects that the application should act on, and
    pressing the `Enter` key. Other types of environments don't use the word “shell”;
    for example, window systems involve “[window managers](https://en.wikipedia.org/wiki/Window_manager)”
    and “[desktop environments](https://en.wikipedia.org/wiki/Desktop_environment)”,
    not a “shell”.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unix 环境中，**shell** 已专门用于表示[命令行 shell](https://en.wikipedia.org/wiki/Shell_%28computing%29#Command-line_shells)，其核心在于输入要启动的应用程序的名称，然后是应用程序应该处理的文件或其他对象的名称，最后按下`Enter`键。其他类型的环境不使用“shell”一词；例如，窗口系统涉及“[窗口管理器](https://en.wikipedia.org/wiki/Window_manager)”和“[桌面环境](https://en.wikipedia.org/wiki/Desktop_environment)”，而不是“shell”。
- en: There are many different Unix shells. Popular shells for interactive use include
    [Bash](https://en.wikipedia.org/wiki/Bash_(Unix_shell)) (the default on most Linux
    installations), [Zsh](https://en.wikipedia.org/wiki/Z_shell) (which emphasizes
    power and customizability) and [fish](https://en.wikipedia.org/wiki/Fish_(Unix_shell))
    (which emphasizes simplicity).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的 Unix shell。用于交互使用的流行 shell 包括[Bash](https://en.wikipedia.org/wiki/Bash_(Unix_shell))（大多数
    Linux 安装的默认 shell）、[Zsh](https://en.wikipedia.org/wiki/Z_shell)（强调功能和可定制性）和[fish](https://en.wikipedia.org/wiki/Fish_(Unix_shell))（强调简单性）。
- en: Command-line shells include flow control constructs to combine commands. In
    addition to typing commands at an interactive prompt, users can write scripts.
    The most common shells have a common syntax based on the [Bourne shell](https://en.wikipedia.org/wiki/Bourne_shell).
    When discussing “**shell programming**”, the shell is almost always implied to
    be a Bourne-style shell. Some shells that are often used for scripting but lack
    advanced interactive features include the [KornShell (ksh)](https://en.wikipedia.org/wiki/KornShell)
    and many [ash](https://en.wikipedia.org/wiki/Almquist_shell) variants. Pretty
    much any Unix-like system has a Bourne-style shell installed as `/bin/sh`, usually
    ash, ksh or Bash.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行 shell 包括流程控制结构以组合命令。除了在交互提示符处键入命令外，用户还可以编写脚本。最常见的 shell 具有基于[Bourne shell](https://en.wikipedia.org/wiki/Bourne_shell)的通用语法。在讨论“**shell
    编程**”时，几乎总是指的是 Bourne 风格的 shell。一些经常用于脚本编写但缺乏高级交互功能的 shell 包括[KornShell (ksh)](https://en.wikipedia.org/wiki/KornShell)和许多[ash](https://en.wikipedia.org/wiki/Almquist_shell)变种。几乎任何类
    Unix 系统都安装了一个 Bourne 风格的 shell，通常是 ash、ksh 或 Bash。
- en: In Unix system administration, a user's **shell** is the program that is invoked
    when they log in. Normal user accounts have a command-line shell, but users with
    restricted access may have a [restricted shell](https://en.wikipedia.org/wiki/Restricted_shell)
    or some other specific command (e.g. for file-transfer-only accounts).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unix 系统管理中，用户的 **shell** 是在其登录时调用的程序。普通用户账户具有命令行 shell，但具有受限访问权限的用户可能具有[受限
    shell](https://en.wikipedia.org/wiki/Restricted_shell)或其他特定命令（例如，仅用于文件传输的账户）。
- en: '* * *'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'The division of labor between the terminal and the shell is not completely
    obvious. Here are their main tasks:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 终端和 shell 之间的分工并不完全明显。这里是它们的主要任务：
- en: 'Input: the terminal converts keys into control sequences (e.g. `Left` → `\e[D`).
    The shell converts control sequences into commands (e.g. `\e[D` → `backward-char`).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入：终端将键转换为控制序列（例如 `Left` → `\e[D`）。Shell 将控制序列转换为命令（例如 `\e[D` → `backward-char`）。
- en: Line editing, input history and completion are provided by the shell.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行编辑、输入历史和自动补全由 shell 提供。
- en: The terminal may provide its own line editing, history and completion instead,
    and only send a line to the shell when it's ready to be executed. The only common
    terminal that operates in this way is `M-x shell` in Emacs.
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终端可以提供自己的行编辑、历史和自动补全，只有当准备好执行一行时才将其发送到 shell。唯一以这种方式运行的常见终端是 Emacs 中的 `M-x shell`。
- en: 'Output: the shell emits instructions such as “display `foo`”, “switch the foreground
    color to green”, “move the cursor to the next line”, etc. The terminal acts on
    these instructions.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出：shell 发出指令，比如“显示 `foo`”，“将前景色切换为绿色”，“将光标移到下一行”等。终端执行这些指令。
- en: The prompt is purely a shell concept.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示符仅是 shell 的概念。
- en: The shell never sees the output of the commands it runs (unless redirected).
    Output history (scrollback) is purely a terminal concept.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shell 永远不会看到它运行的命令的输出（除非重定向）。输出历史记录（回滚）纯粹是终端的概念。
- en: Inter-application copy-paste is provided by the terminal (usually with the mouse
    or key sequences such as `Ctrl`+`Shift`+`V` or `Shift`+`Insert`). The shell may
    have its own internal copy-paste mechanism as well (e.g. `Meta`+`W` and `Ctrl`+`Y`).
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序间的复制粘贴由终端提供（通常使用鼠标或键序列，例如`Ctrl`+`Shift`+`V` 或 `Shift`+`Insert`）。Shell 也可能有自己的内部复制粘贴机制（例如
    `Meta`+`W` 和 `Ctrl`+`Y`）。
- en: '[Job control](https://en.wikipedia.org/wiki/Job_control_(Unix)) (launching
    programs in the background and managing them) is mostly performed by the shell.
    However, it''s the terminal that handles key combinations like `Ctrl`+`C` to kill
    the foreground job and `Ctrl`+`Z` to suspend it.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[作业控制](https://zh.wikipedia.org/wiki/%E5%B7%A5%E4%BD%9C%E5%8F%AF%E6%8E%A7%E5%88%B6)（在后台启动程序并管理它们）主要由
    shell 完成。然而，处理像`Ctrl`+`C` 杀死前台作业和`Ctrl`+`Z` 暂停它这样的键组合是终端的职责。'
