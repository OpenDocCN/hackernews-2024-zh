- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:02:37'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:02:37'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Why I Love Tailwind CSS
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我喜欢 Tailwind CSS
- en: 来源：[https://ben.page/tailwind](https://ben.page/tailwind)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ben.page/tailwind](https://ben.page/tailwind)
- en: I’m a really big fan of [Tailwind CSS](https://tailwindcss.com), a framework
    for styling websites.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我是[Tailwind CSS](https://tailwindcss.com)的铁杆粉丝。
- en: It took me a couple tries to get into Tailwind. I’d seen it around, but finally
    around two years ago I tried it again and it stuck.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我试过几次才开始使用 Tailwind。我之前见过它，但是大概两年前我再次尝试并且坚持了下来。
- en: I think that the intimidating thing for me was always memorizing the names of
    the classes. In general, I think that the memorization is the biggest learning
    curve. The names of CSS properties were already in my head, so it seemed silly
    to need to memorize another syntax. But the syntax eventually entered my head,
    and now I love it. (I’ve since realized that there’s an official VS Code extension
    that adds autocomplete for the classes, which helps with memorization and is very
    handy.)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，最让我感到困惑的一件事情始终是记住类的名称。一般来说，我认为记忆是最大的学习曲线。CSS 属性的名称已经在我的脑海中了，所以需要记住另一种语法看起来有点傻。但是这种语法最终也进入了我的脑海，现在我喜欢它了。（我后来意识到有一个官方的
    VS Code 扩展可以为类添加自动完成，这有助于记忆，非常方便。）
- en: 'Okay, so some reasons that I love it:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我喜欢它的一些原因：
- en: I can style things super quickly
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以非常快地为事物添加样式
- en: Since I can write HTML and CSS in the same view right next to each other, I
    can style things super quickly. I don’t need to flip between an HTML file and
    a CSS file, so I can style as I go, which feels really fast for me.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我可以在同一个视图中紧挨着编写 HTML 和 CSS，所以我可以非常快速地为事物添加样式。我不需要在 HTML 文件和 CSS 文件之间切换，所以我可以边写边样式，这对我来说感觉非常快。
- en: No naming classes
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不给类命名
- en: Maybe I’m bad at naming, but naming classes is a real pain every once in a while.
    Not needing to give classes names and then style them separately eliminates that.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 或许我不擅长命名，但有时为类命名确实很痛苦。不需要给类命名然后分开样式消除了这个问题。
- en: Dead CSS is automatically deleted
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无用的 CSS 会自动删除
- en: Sometimes I delete HTML without realizing that I’m leaving dead CSS that used
    to style that HTML. Since Tailwind styles are encapsulated in the class on the
    element that I’m deleting, deleting the HTML also deletes the CSS with it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我删除 HTML 时并没有意识到我留下了曾经为 HTML 添加样式的无用 CSS。由于 Tailwind 样式封装在我删除的元素的类中，删除 HTML
    也会将 CSS 一并删除。
- en: Colors come pre-picked
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 颜色已经预先选择
- en: Tailwind’s [color palette](https://tailwindcss.com/docs/colors) comes fully
    loaded with a full range of lots of colors. I know it’s lazy to just use the pre-configured
    colors, but it speeds things up too.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Tailwind 的[颜色调色板](https://tailwindcss.com/docs/colors)已经装载了许多颜色。我知道直接使用预配置的颜色是很懒的，但这样做也加快了速度。
- en: I used to try to avoid using new colors because I knew that I’d have to pick
    them, and then maybe even pick variations of them. Now, if I want a green color
    for a confirmation icon, there’s no extra work involved in having multiple shades
    of green available.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以前我试图避免使用新的颜色，因为我知道我得挑选它们，然后甚至可能选择它们的变体。现在，如果我想为确认图标使用绿色，那么多个绿色的不同色调都是可用的，而不需要额外的工作。
- en: There’s strong consistency between projects
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目之间有很强的一致性
- en: Every Tailwind project that I have uses the same API, so I don’t have to remember
    whether I named the class `no-scroll` or `lock-scroll` or `no-scrolling`. The
    consistency between projects makes it a lot easier to switch between them and
    make changes without constantly referencing my past naming.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我每个 Tailwind 项目都使用相同的 API，所以我不需要记住我是否将类命名为 `no-scroll` 还是 `lock-scroll` 还是 `no-scrolling`。项目之间的一致性使得在它们之间切换和进行更改变得更加容易，而不需要不断地参考过去的命名。
- en: Responsive styling
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式样式设计
- en: Tailwind’s `sm:`/`md:`/etc prefixes make it really, really easy to make things
    responsive, and it co-locates your mobile styles with your desktop styles. In
    a big CSS file, I’d often have desktop styles for most of it and then media queries
    towards the bottom, which put styles for the same elements quite far apart.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Tailwind 的 `sm:`/`md:`/等前缀使得响应式设计变得非常容易，它将移动端样式与桌面端样式放在一起。在一个大的 CSS 文件中，我经常会在底部添加媒体查询，将相同元素的样式相距很远。
- en: Also, even if you create your own custom utility classes, it’s hard to replicate
    this responsive prefix feature and you have to end up writing custom CSS within
    media queries anyway.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，即使你创建了自己的自定义实用程序类，要复制这个响应式前缀功能也很困难，你最终还是得在媒体查询中编写自定义 CSS。
- en: Tailwind Typography
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tailwind 排版
- en: Tailwind’s [Typography plugin](https://tailwindcss.com/docs/typography-plugin)
    is *so good*. I used to just hack around on styles for blog posts until it looked
    good, and then inevitably I was missing something (like I’d add in a quote and
    it’d look terrible) so I’d have to add more styles.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Tailwind的[排版插件](https://tailwindcss.com/docs/typography-plugin) *非常好*。我以前总是试图在博客文章的样式上摸索，直到看起来好看，然后不可避免地我总是漏掉了一些东西（比如我会添加引用，但看起来很糟糕），所以我不得不再添加更多的样式。
- en: Typography has solved it once and for all, and now it feels silly to spend time
    writing CSS for a blog’s content when I could just use this plugin and tweak it
    a bit if necessary.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 排版问题一劳永逸地解决了，现在花时间为博客的内容编写 CSS 似乎有点愚蠢，当我只需使用这个插件，必要时稍作调整即可。
- en: '* * *'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: I get it — it doesn’t feel like writing real CSS, and there’s a somewhat steep
    learning curve. But *for me*, it’s made me way faster at styling websites. The
    muscle memory is super strong, and I’ve found that to be invaluable.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我明白 —— 这似乎不像是编写真正的 CSS，而且学习曲线有点陡峭。但对*我来说*，这让我在网站样式设计方面变得更快。肌肉记忆非常强大，我发现这是无价的。
