- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:15:24'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:15:24'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: IPv6 for the remotely interested. I’ve known about IPv6 for the last two… |
    by Sedat Kapanoglu | Apr, 2024 | Medium
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPv6对远程感兴趣的人。我对IPv6了解已有大约两个… | Sedat Kapanoglu | 2024年4月 | Medium
- en: 来源：[https://ssg.dev/ipv6-for-the-remotely-interested-af214dd06aa7?gi=79f1ddf22e27](https://ssg.dev/ipv6-for-the-remotely-interested-af214dd06aa7?gi=79f1ddf22e27)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ssg.dev/ipv6-for-the-remotely-interested-af214dd06aa7?gi=79f1ddf22e27](https://ssg.dev/ipv6-for-the-remotely-interested-af214dd06aa7?gi=79f1ddf22e27)
- en: IPv6 for the remotely interested
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPv6对远程感兴趣的人
- en: I’ve known about IPv6 for the last two decades or so, but I’ve never gone beyond
    “an overengineered solution to the IPv4 address space problem”. IPv6 was even
    presented as “*every atom could get its own IP address, no IP address shortages
    anymore*”, but I didn’t know how true that was either. I occasionally saw an IPv6
    address here and there because almost every device supports IPv6 today. I believe
    cellular network operators even default to it, so you’re probably reading this
    on a device that uses IPv6.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我大约在过去20年中了解了IPv6，但我从未超越“IPv4地址空间问题的一种过度工程解决方案”。IPv6甚至被描述为“*每个原子都可以有自己的IP地址，再也不会有IP地址短缺问题了*”，但我也不知道这是真的。我偶尔会看到一些IPv6地址，因为现在几乎每个设备都支持IPv6。我相信移动网络运营商甚至默认使用它，所以你可能是在使用IPv6的设备上阅读这篇文章。
- en: Last week, I decided to learn about how IPv6 works under the hood, and I’ve
    learned quite a few interesting facts about it.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 上周，我决定深入了解IPv6的内部运作方式，并学到了一些非常有趣的事实。
- en: '*Disclaimer: I’m not an expert on IPv6 or network engineering in general. This
    is the outcome of my personal reading journey over the last few weeks, and I’d
    love to be corrected if I made any mistakes. Read on :)*'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*声明：我不是IPv6或网络工程的专家。这是我在过去几周阅读中的成果，如果我有任何错误，我很愿意接受纠正。请继续阅读 :)*'
- en: IPv6 vs IPv4
  id: totrans-split-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPv6 vs IPv4
- en: The name IPv6 used to confuse me because I thought IPv4 took its name from the
    four octets it used to represent 32-bits, so, IPv6 should have been called IP16\.
    But I learned that it was really the version of the protocol. There were apparently
    IPv1, IPv2, and IPv3 before IPv4 came out. They were used to research the IP protocol
    internally, and later got replaced with IPv4 we use today. There was even a proposal
    for *IPv5* in the 80’s that was intended to optimize realtime communications,
    but got discarded in favor of IPv6 which additionally solved the address space
    problem. That’s why IPv6 is called IPv6\. It’s literally *IP Version 6*. There
    have even been attempts at creating IPv7, IPv8 and more, but all have been either
    obsoleted or shelved.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6的名字曾经让我困惑，因为我以为IPv4因使用四个八位组来表示32位而得名，所以IPv6应该叫IP16。但我了解到它实际上是协议的版本号。显然，在IPv4问世之前还有IPv1、IPv2和IPv3用于内部研究IP协议，后来被我们今天使用的IPv4取代。甚至在80年代还有一个提议用于优化实时通信的IPv5，但最终被放弃，取而代之的是解决了地址空间问题的IPv6。这就是为什么IPv6叫IPv6的原因。它就是*IP
    Version 6*。甚至曾经有过创建IPv7、IPv8及更多版本的尝试，但都已被淘汰或搁置。
- en: 'Like IPv4, IPv6 protocol has an addressing scheme. IPv6 uses 128-bits for addresses
    instead of 32-bit IPv4 addresses. But, the difference in protocols are greater
    than address space sizes. Actually, IPv6 feels like an alien tech if you’ve only
    worked with IPv4 so far when you look at its quirky features such as:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 像IPv4一样，IPv6协议有一个寻址方案。IPv6使用128位地址而不是32位的IPv4地址。但是，这两种协议之间的差异远不止地址空间大小。事实上，如果你到目前为止只用过IPv4，看到它的一些古怪特性时，IPv6感觉就像外星技术：
- en: IPv6 has no subnet masks
  id: totrans-split-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPv6没有子网掩码
- en: 'IPv6 supports [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
    addressing like IPv4, but from a user’s perspective, IPv6 addresses are way simpler:
    first half is Internet (global), the second half is local. That’s the suggested
    way to use IPv6 addresses anyway. So, when you visit a whatismyipwhatever web
    site, it shows your IP address like this:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6支持[CIDR](https://zh.wikipedia.org/wiki/%E7%B1%BB%E5%88%AB%E5%9C%B0%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1)寻址，就像IPv4一样，但从用户角度来看，IPv6地址要简单得多：前半部分是互联网（全局），后半部分是本地。这也是使用IPv6地址的建议方式。所以，当你访问whatismyipwhatever网站时，它会显示你的IP地址如下：
- en: '`1111:2222:3333:4444:5555:6666:7777:8888`'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`1111:2222:3333:4444:5555:6666:7777:8888`'
- en: 'But, your ISP only knows you as `1111:2222:3333:4444` and assigns that portion
    (`/64`) to you. The remaining half of the address is unique for every device on
    your network. ISP just forwards any packet that starts with `1111:2222:3333:4444`
    to your router, and your router transfers the packet to the device. So, the second
    half of the address, `5555:6666:7777:8888`, let’s call that part `INTERFACE_ID`
    from now on, is unique to your device. That means, every device you have has a
    unique IPv6 address, and can be accessed individually from anywhere in the world,
    because:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，你的 ISP 只知道你为 `1111:2222:3333:4444`，并将该部分（`/64`）分配给你。地址的剩余一半对于你网络中的每个设备都是唯一的。ISP
    只需将以 `1111:2222:3333:4444` 开头的任何数据包转发到你的路由器，然后路由器将数据包传递给设备。因此，地址的后半部分 `5555:6666:7777:8888`，从现在起我们称之为
    `INTERFACE_ID` 部分，是你设备的唯一标识。这意味着你拥有的每个设备都有一个唯一的 IPv6 地址，并且可以从世界任何地方单独访问，因为：
- en: IPv6 has no NAT
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPv6 没有 NAT。
- en: I used to think that you could do NAT with IPv6, but nobody did it because of
    potential backlash from HackerNews community. Apparently, that’s not the case.
    There’s apparently no published standard for NAT for IPv6\. There is a draft proposal
    called NAT66, but it hasn’t materialized.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经以为你可以在 IPv6 中做 NAT，但没有人这样做，因为可能会遭到 HackerNews 社区的强烈反对。显然，事实并非如此。显然，IPv6 没有
    NAT 的公开标准。有一个名为 NAT66 的草案提议，但尚未实现。
- en: NAT isn’t needed with IPv6 because it’s possible to have a separate globally
    accessible address for every device on Earth. That felt weird to me because NAT,
    despite how much you hate it when you want to play games online, gives you that
    warm feeling that your local devices are never accessible from outside unless
    you explicitly allow it using UPnP or port forwarding. It has that false sense
    of security which is really hard to shake off.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6 不需要 NAT，因为每个地球上的设备都可以拥有一个单独的全球可访问地址。对我来说感觉有点奇怪，因为 NAT，尽管当你想在线游戏时它让你很烦恼，但它给了你一种温暖的感觉，即你的本地设备从外部无法访问，除非你明确允许使用
    UPnP 或端口转发。它给人一种虚假的安全感，这种感觉真的很难摆脱。
- en: 'The bitter truth is, [NAT isn’t a security barrier](https://security.stackexchange.com/a/8773/3273).
    It’s just an alternative packet forwarding mechanism. Your IPv6 router should
    never forward connection attempts from outside to your local devices by default
    anyway. So, you get the same security without having NAT at all. As a matter of
    fact, it’s fascinating that you’re able to access every device on your local network
    with their IPv6 address without having to go through your router, or a separate
    VPN configuration if you wish to do so: just authenticate, that’s it. Hypothetically,
    a smart toothbrush in Istanbul, Turkey can connect directly to a temperature sensor
    in Ontario, Canada, and create one of the most diverse botnets on the planet.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 苦涩的事实是，[NAT 并不是一个安全屏障](https://security.stackexchange.com/a/8773/3273)。它只是一种替代的数据包转发机制。你的
    IPv6 路由器本应默认情况下不转发外部的连接尝试到你的本地设备。因此，你可以完全没有 NAT 也能得到同样的安全保障。事实上，令人着迷的是，你能够直接通过他们的
    IPv6 地址访问你本地网络中的每个设备，而不必通过你的路由器或者一个单独的 VPN 配置（如果你愿意的话）：只需认证，就这样。假设，在土耳其伊斯坦布尔的一个智能牙刷可以直接连接到加拿大安大略省的一个温度传感器，并创建地球上最多样化的僵尸网络之一。
- en: 'There is a security related catch with IPv6 though that comes with the luxury
    of having a separate IPv6 address per device: your devices can be fingerprinted
    and tracked individually. That’s bad for privacy. So, modern OS’s invented the
    concept of *temporary IPv6 addresses* that change `INTERFACE_ID` periodically.
    You can use your permanent IPv6 address for listening to connections from outside,
    but when establishing connections, your IPv6 address is shown with that secondary
    temporary address that changes frequently.'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然每个设备都有一个单独的 IPv6 地址的豪华带来了一个安全相关的问题：你的设备可以被单独指纹识别和跟踪。这对隐私来说是不利的。因此，现代操作系统发明了
    *临时 IPv6 地址* 的概念，定期更改 `INTERFACE_ID`。你可以使用你的永久 IPv6 地址来监听外部连接，但在建立连接时，你的 IPv6
    地址会显示为那个频繁变化的次要临时地址。
- en: 'Now, having mentioned not needing to go through hoops for access, another interesting
    feature of IPv6 is:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，提到无需经过繁琐步骤进行访问，IPv6 的另一个有趣特性是：
- en: IPv6 addresses are self-configured
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPv6 地址是自动配置的。
- en: 'IPv6 protocol doesn’t need a DHCP server, or manual network configuration to
    determine IP address, subnet mask, and gateway address. A device can get an IP
    address without asking a centralized server. That is accomplished by a protocol
    called [SLAAC](https://en.wikipedia.org/wiki/IPv6#Stateless_address_autoconfiguration_(SLAAC)).
    It gradually builds a device’s IPv6 address by following these steps:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6协议不需要DHCP服务器或手动网络配置来确定IP地址、子网掩码和网关地址。设备可以在不询问集中服务器的情况下获取IP地址。这通过一种叫做[SLAAC](https://en.wikipedia.org/wiki/IPv6#Stateless_address_autoconfiguration_(SLAAC))的协议实现。它通过以下步骤逐渐构建设备的IPv6地址：
- en: The operating system (specifically, the IPv6 stack of the OS) generates a 64-bit
    device identifier, usually random, let’s say `5555:6666:7777:8888` ([chosen by
    a fair dice roll](https://xkcd.com/221/)), and that makes up the `INTERFACE_ID`
    portion of your IPv6 address.
  id: totrans-split-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作系统（具体来说是操作系统的IPv6堆栈）生成一个64位设备标识符，通常是随机的，比如说`5555:6666:7777:8888`（通过公正掷骰子选择）。这构成了你的IPv6地址的`INTERFACE_ID`部分。
- en: 'The OS prefixes the `INTERFACE_ID` with `fe80`, the local only IPv6 network
    prefix. So, your IPv6 address is now: `fe80::5555:6666:7777:8888`. *(Notice the
    “*`*a::b*`*” syntax; it means “there are all zero valued segments between ‘a’
    and ‘b’”. More on that later)*'
  id: totrans-split-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作系统用`fe80`前缀`INTERFACE_ID`，本地唯一的IPv6网络前缀。所以，你的IPv6地址现在是：`fe80::5555:6666:7777:8888`。*（注意“*`*a::b*`*”的语法；它表示“a和b之间所有的段都是零值”。稍后详述）*
- en: Your device now sends a packet to its designated neighbor multicast group on
    the local network to make sure that nobody else is using the same IPv6 address.
    That’s called Duplicate Address Detection (DAD). The chances of a duplicate address
    getting assigned is less than universe suddenly imploding due to a cataclysmic
    event, but that’s exactly when you don’t want to deal with duplicate IPv6 addresses
    and miss all the fun.
  id: totrans-split-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你的设备向本地网络的指定邻居多播组发送数据包，以确保没有其他设备正在使用相同的IPv6地址。这称为重复地址检测（DAD）。分配重复地址的几率小于宇宙突然因灾难性事件而坍塌的可能性，但这正是你不希望处理重复IPv6地址并错过所有乐趣的时候。
- en: Finally, the device sends the router (which, unlike IPv4, can always be reached
    with the multicast group address on IPv6 `ff02::2`) its acquired local address
    and asks for the actual prefix the router uses by sending a RS (Router Solicitation)
    ICMPv6 packet. After router responds with an RA (Router Advertisement) packet,
    it replaces `fe80` with the actual prefix the router replies with, and starts
    using that as its permanent address. That’s now your IPv6 internet address.
  id: totrans-split-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，设备向路由器发送（不同于IPv4，始终可以通过IPv6的多播组地址`ff02::2`到达）其获取的本地地址，并通过发送RS（路由器请求）ICMPv6包询问路由器使用的实际前缀。路由器用RA（路由器通告）包回复后，设备用路由器回复的实际前缀替换`fe80`，并开始将其作为永久地址使用。这就是你的IPv6互联网地址。
- en: 'The advantage of stateless configuration is the reduced overhead on your router:
    it doesn’t have to maintain the IP configuration of every device on the network
    individually. That means better performance, especially in larger networks.'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 无状态配置的优势在于减少了路由器的开销：它不必单独维护网络上每个设备的IP配置。这意味着更好的性能，尤其是在较大的网络中。
- en: This just happened. Explain this coincidence, atheists!
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这就发生了。解释这个巧合，无神论者！
- en: IPv6 myths
  id: totrans-split-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPv6的神话
- en: 'IPv6 comes with bold claims too. Let’s debunk them:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6也有大胆的声明。让我们揭穿它们：
- en: Your device has one IPv6 address for every purpose
  id: totrans-split-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的设备为每个目的有一个IPv6地址
- en: 'I mean, yes, you use the same IPv6 address for both local and remote connections.
    But no, the “*one IP address to rule them all, one IP address to find them*” claim
    isn’t true. As I mentioned before, your device claims the ownership of multiple
    IPv6 addresses for different scopes like link-local (Remember `fe80::`) and Internet.
    Additionally, your device might acquire two different Internet IPv6 addresses
    too: permanent and temporary. Temporary IPv6 addresses are intended to preserve
    your privacy as they are rotated periodically. Permanent IPv6 addresses are primarily
    for servers which must have static IPv6 addresses.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，是的，你可以为本地和远程连接使用相同的IPv6地址。但是，“*一IP地址统治所有，一IP地址寻找他们*”的说法不是真的。正如我之前提到的，你的设备为不同范围（如链路本地（记住`fe80::`）和互联网）声明了多个IPv6地址的所有权。此外，你的设备可能会获得两个不同的互联网IPv6地址：永久和临时。临时IPv6地址旨在保护你的隐私，因为它们会定期更换。永久IPv6地址主要用于必须具有静态IPv6地址的服务器。
- en: An IP address for every atom in the universe
  id: totrans-split-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宇宙中每个原子都有一个IP地址
- en: 'Not even close. There are about 2²⁷² atoms in the universe. Even Earth has
    2¹⁶⁶ atoms, so we need at least 168-bits (octet-aligned) address space for them.
    The actual IPv6 address space is slightly smaller than 128-bits too: the first
    16-bits are IANA reserved. You only have the remaining 112-bits to identify devices.
    That’s still a lot, way more than probably all devices we can produce on Earth
    in the next millenia, but no, we can’t give every atom its own IP address. But,
    we can give IPv6 addresses to every grain of sand on Earth. We can even fit them
    all inside a single /64 prefix.'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至更不用说。宇宙中大约有2²⁷²个原子。即使地球也有2¹⁶⁶个原子，所以我们至少需要168位（八位对齐）地址空间。实际的IPv6地址空间稍小于128位：前16位由IANA保留。你只剩下112位来识别设备。这仍然很多，远远超过我们未来千年内可能在地球上制造的所有设备，但不，我们不能给每个原子一个独立的IP地址。但是，我们可以给地球上每一粒沙子一个IPv6地址。我们甚至可以将它们全部放在一个单独的/64前缀中。
- en: All in all, yes, IPv6 address space is vast regardless of how many arbitrary
    particles we can address with it.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，是的，IPv6地址空间很广，无论我们可以用它寻址多少任意粒子。
- en: Universal connectivity of every device
  id: totrans-split-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每个设备的普遍连接性
- en: Yes, IPv6 has no NAT. So, that means no more port forwarding or address space
    to maintain. But, you still have to have a mechanism to open your device to connections
    from a remote host if you want to establish a direct connection. Remember, your
    router/firewall by default will prevent any connection attempt. What are you going
    to do?
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，IPv6没有NAT。因此，这意味着不再需要进行端口转发或者维护地址空间。但是，如果你想建立直接连接，仍然需要一种机制来打开你的设备接受来自远程主机的连接。记住，默认情况下，你的路由器/防火墙会阻止任何连接尝试。你打算怎么做呢？
- en: As with UPnP/IGD days, apps today still need to work with a protocol like PCP
    (Port Control Protocol) in order to open access to a port programmatically. So,
    it’s not like you suddenly have universal connectivity with global+local IPv6
    addresses. You don’t have to set up manual port forwarding, but apps still need
    to work with the router in order to make themselves accessible.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 就像UPnP/IGD时代一样，今天的应用程序仍然需要使用类似PCP（端口控制协议）的协议来以编程方式打开端口的访问权限。所以，并不是说你突然拥有了全局+本地IPv6地址的普遍连接性。你不需要设置手动端口转发，但应用程序仍然需要与路由器配合，以便使自己可访问。
- en: 'It’s not just the benefits of IPv6 being exaggerated, but there are cases where
    IPv6 turns out worse than IPv4 too:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6不仅仅是夸大其优势，还有一些情况下IPv6比IPv4更差：
- en: Downsides of IPv6
  id: totrans-split-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPv6的缺点
- en: 'There are several things that we take for granted in IPv4 world that IPv6 might
    make you nostalgic about, such as:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在IPv4世界中我们认为理所当然的几件事，在IPv6下可能会让你怀旧，比如：
- en: You are at the mercy of your ISP to have subnets
  id: totrans-split-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你要取决于你的ISP是否有子网
- en: 'Since IPv6 has no NAT, many ISPs in United States default to forwarding only
    a single 64-bit prefix (usually called a “`/64`”) to your router. That means your
    router has no space left to put the subnet information into an IPv6 address. Remember:
    IPv6 addresses are auto-configured by devices, so, there is no way for a router
    to dictate those devices to use less than 64-bit local addresses. That means,
    your router would have no way to know which subnet to forward a packet to.'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于IPv6没有NAT，美国许多ISP默认仅向你的路由器转发一个64位前缀（通常称为“`/64`”）。这意味着你的路由器没有剩余空间将子网信息放入IPv6地址中。记住：IPv6地址由设备自动配置，因此路由器无法指定这些设备使用少于64位的本地地址。这意味着，你的路由器无法知道将数据包转发到哪个子网。
- en: 'Essentially, you’re in the mercy of ISPs to receive prefixes shorter than 64-bit
    so that your router can use the remaining bits to identify which subnet they need
    to go to. ISPs can actually afford giving home users at least 16 subnets by simply
    assigning 60-bit prefixes, but ISPs don’t do that for reasons unknown to me. Maybe
    the PTSD they had from IPv4 address space shortage made them greedy bastards?
    Or, they just want to make money by extorting customers. “Hey, if you want a shorter
    prefix, pay us more”. As far as I know, both Comcast Xfinity and AT&T give their
    home users a mere `/64` prefix: one subnet.'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，你要依赖ISP给你提供短于64位的前缀，这样你的路由器才能使用剩余的位来识别它们需要去的子网。ISP实际上可以通过简单分配60位前缀来为家庭用户提供至少16个子网，但出于我不知道的原因，他们不这么做。也许是他们从IPv4地址空间短缺中得到的创伤让他们变得贪婪？或者，他们只是想通过敲诈顾客来赚钱。“嘿，如果你想要一个更短的前缀，多付钱给我们”。据我所知，Comcast
    Xfinity和AT&T都只给他们的家庭用户一个简单的`/64`前缀：一个子网。
- en: You might say that a home user may not need subnets at all, but, with the prevalence
    of IoT devices and our greater reliance of the security of our networks, isolating
    your untrusted devices is getting more important. RIPE, the European authority
    on IP address assignments, [recommends a 56-bit prefix for residential ISP customers](https://www.ripe.net/publications/docs/ripe-690/#4-2-3--prefixes--longer-than--56).
    That gives every customer 256 subnets, and that’s the greediest, the most conservative
    option that Europeans could come up with which an American can only dream of.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会说家庭用户根本不需要子网，但随着物联网设备的普及和我们对网络安全的更大依赖，隔离不受信任的设备变得更加重要。欧洲 IP 地址分配机构 RIPE
    [建议给住宅 ISP 客户分配一个 56 位的前缀](https://www.ripe.net/publications/docs/ripe-690/#4-2-3--prefixes--longer-than--56)。这为每个客户提供了
    256 个子网，这是欧洲人能想到的最贪婪、最保守的选项，美国人只能梦寐以求。
- en: Of course, you can configure IPv6 address of every device manually, and give
    them subnet identifiers this way, but that would be a huge undertaking, especially
    considering the overhead of adding new devices. Do you want to spend your retirement
    as a human DHCP server?
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以手动配置每个设备的 IPv6 地址，并通过这种方式为它们提供子网标识符，但这将是一项巨大的工程，特别是考虑到添加新设备的额外开销。你想把退休后的时间都当成人类
    DHCP 服务器吗？
- en: IPv6 addresses need extra encoding in URIs
  id: totrans-split-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPv6 地址在 URI 中需要额外的编码。
- en: 'Remember typing “`http://192.168.0.1`” on your browser and accessing your router
    settings? I do. Because “`:`” character is reserved for port numbers in the URI
    specification, it’s impossible to do the same using IPv6 addresses without additional
    encoding. In case you want to access a web page hosted on a device by its IPv6
    address, you have to use the syntax: “`http://[aaaa:bbbb:cccc:dddd:eeee:ffff:1111:2222]/path/?query`”,
    notice the brackets around the address. But, that’s not even the worst part because:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在浏览器中输入 “`http://192.168.0.1`” 并访问你的路由器设置吗？我记得。因为在 URI 规范中，“`:`” 字符用于端口号，所以使用
    IPv6 地址无法直接做到相同，需要额外的编码。如果你想通过其 IPv6 地址访问设备上托管的网页，你必须使用如下语法：“`http://[aaaa:bbbb:cccc:dddd:eeee:ffff:1111:2222]/path/?query`”，注意地址周围的方括号。但更糟糕的是：
- en: It’s impossible to memorize IPv6 addresses
  id: totrans-split-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPv6 地址是不可能完全记住的。
- en: We’ve never been supposed to memorize IP addresses, but the reality is different.
    I’m still not sure about which address I can use reliably and consistenly to access
    my router on IPv6\. I can’t memorize its full IP address, that’s for sure. [mDNS](https://en.wikipedia.org/wiki/Multicast_DNS)
    helps, but it doesn’t always reliably work either.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从来不应该记住 IP 地址，但现实是不同的。我仍然不确定哪个地址可以可靠且一致地用来访问我的 IPv6 路由器。我肯定是记不住它的完整 IP 地址的。[mDNS](https://en.wikipedia.org/wiki/Multicast_DNS)
    有帮助，但它并不总是可靠地工作。
- en: Hexadecimal is harder than regular numbers too. It’s like trying to memorize
    a Windows XP product activation code. What was that famous one? `FCKGW-RHQQ2-??`eh,
    whatever.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 十六进制比常规数字更难。这就像试图记住 Windows XP 产品激活码一样。那个著名的是什么来着？`FCKGW-RHQQ2-??`嘛，无所谓。
- en: 'Memorizing an IPv4 address is a transferable skill; “cross-platform” if you
    will. It’s even universal due to pervasive NAT: 192.168.1.1 most of the time.
    I didn’t have to look that up. Figuring out the IPv6 address of your router on
    an arbitrary device you have requires different skills.'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 记住一个 IPv4 地址是一种可转移的技能；如果你愿意的话，是“跨平台”的。由于普遍的 NAT，它甚至是通用的：大多数情况下是 `192.168.1.1`。我不必查找它。在任意设备上找出你的路由器的
    IPv6 地址需要不同的技能。
- en: On the bright side, you now know that the rightmost 64-bit portion of an IPv6
    address is always random, so, you can at least avoid assuming that it’s going
    to stay forever or supposed to make sense. You can even call that part `BLABLA`
    instead of `INTERFACE_ID`. You can memorize your /64 prefix and at least find
    out your router address, which is usually something like `1111:2222:3333:4444::1`.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 光明的一面是，你现在知道 IPv6 地址的最右边的 64 位部分总是随机的，所以，至少你可以避免假设它会永远保持不变或者应该有意义。你甚至可以称这部分为
    `BLABLA` 而不是 `INTERFACE_ID`。你可以记住你的 /64 前缀，至少找出你的路由器地址，通常是类似于 `1111:2222:3333:4444::1`。
- en: IPv6 addresses are complicated
  id: totrans-split-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPv6 地址是复杂的。
- en: Make no mistake, IPv4 addresses are complicated too. Did you know that `2130706433`
    is a valid IPv4 address? Or, `0x7F000001`, `0177.0000.0000.0001` and `127.1` for
    that matter? Try pinging them on a shell if you don’t believe me. It’s hard to
    believe but, they’re all equivalent to `127.0.0.1`.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 不要误解，IPv4 地址也很复杂。你知道 `2130706433` 是一个有效的 IPv4 地址吗？或者，`0x7F000001`，`0177.0000.0000.0001`，甚至
    `127.1` 也是。如果你不信，试试在 shell 中 ping 它们。很难相信，但它们都等价于 `127.0.0.1`。
- en: 'IPv6 addresses have a similar level of variety in representation. Here are
    some of their characteristics:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6地址在表示上也有类似的变化。这里是它们的一些特点：
- en: 'The representation of an IPv6 address consists of 8 *hextets*: sixteen bit
    hexadecimal groups canonically called *segments*. (“Hextet” is a misnomer for
    *hexadectet*, but too late now). Anyway, now hex tricks like this are possible:'
  id: totrans-split-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPv6地址的表示包括8个 *六合一*：六十六位十六进制组，官方上叫做 *段*。（“六合一”是 *十六合一* 的一个误称，但现在为时已晚）。无论如何，现在像这样的十六进制技巧是可能的：
- en: “face:b00c” I see what you did there.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: “face:b00c” 我看得明白你在做什么。
- en: Prefixing zeroes in hextets are not displayed. So, `2600:00ab` is actually shown
    as `2600:ab`.
  id: totrans-split-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 六合一的前缀零不显示。因此，`2600:00ab` 实际上显示为 `2600:ab`。
- en: As I mentioned before, hextets with zero values can completely be removed from
    the address and replaced with double colons. So, `2600:ab:0:0:1234:5678:90ab:cdef`
    would be displayed as `2600:ab**::**1234:5678:90ab:cdef`. See the double colons?
    That can only be done with the first batch of zero hextets though. So, `2600:ab:0:0:1234:0:0:cdef`
    would still render like `2600:ab**::**1234:**0:0**:cdef`. Also, you can’t compact
    just a single zero hextet. So, the zero in `2600:**0**:1234:5678:abcd:ef01:2345:6789`
    remains as is.
  id: totrans-split-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如我之前提到的，零值六合一可以完全从地址中删除，并用双冒号替换。因此，`2600:ab:0:0:1234:5678:90ab:cdef` 将显示为 `2600:ab**::**1234:5678:90ab:cdef`。看到双冒号了吗？但只能用在第一批零六合一上。因此，`2600:ab:0:0:1234:0:0:cdef`
    仍将渲染为 `2600:ab**::**1234:**0:0**:cdef`。此外，你不能压缩单个零六合一。因此，在 `2600:**0**:1234:5678:abcd:ef01:2345:6789`
    中的零仍然保持不变。
- en: 'You can specifiy *zone id*: the network interface that you want to reach that
    address through with “`%`” suffix and a zone id. For example, you can be connected
    to a network over both WiFi and Ethernet, but may want to ping your router from
    LAN. In that case you append “`%`” to the address and add your zone id (network
    adapter identifier). Such as `fe80::1%eth0` or `fe80::1%3`. The problem is, in
    addition to the brackets you need to use in IPv6 URIs, you must escape “`%`” to
    “`%25`” in your browser address bar or any other place where you need to use zone
    id in a URI.'
  id: totrans-split-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以指定 *区域标识*：希望通过的网络接口来到达那个地址，用“`%`”后缀和区域标识。例如，你可以同时连接WiFi和以太网，但可能想从LANping你的路由器。在这种情况下，你追加“`%`”到地址并添加你的区域标识（网络适配器标识）。例如
    `fe80::1%eth0` 或 `fe80::1%3`。问题是，除了在IPv6 URI中使用的括号外，你必须在浏览器地址栏或任何其他需要在URI中使用区域标识的地方转义“`%`”为“`%25`”。
- en: 'IPv6 addresses can also be used to represent IPv4 addresses. So, you can ping
    `127.0.0.1` using IPv6 address syntax by prepending it with IPv4 translation prefix,
    and it’ll be regarded as an IPv4 address: `::ffff:127.0.0.1`. But, that doesn’t
    mean your IPv4 requests will go through IPv6 network. That just tells the underlying
    networking stack to use an IPv4 connection instead. If you choose another prefix
    than `::ffff`, the IPv4 portion will be made part of the last two hextets and
    you’ll connect that IP over IPv6 network. For example, `2600:1000:2000:3000::192.168.1.1`
    will be treated as `2600:1000:2000:3000::c0a8:101`, the last two hextets being
    the hexadecimal equivalent of `192.168.1.1`.'
  id: totrans-split-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPv6地址也可以用来表示IPv4地址。因此，你可以通过在IPv4转换前缀之前使用IPv6地址语法来ping `127.0.0.1`，它将被视为IPv4地址：`::ffff:127.0.0.1`。但这并不意味着你的IPv4请求会通过IPv6网络。这只是告诉底层网络堆栈使用IPv4连接而已。如果你选择一个不同的前缀而不是
    `::ffff`，IPv4部分将成为最后两个六合一的一部分，你将通过IPv6网络连接该IP。例如，`2600:1000:2000:3000::192.168.1.1`
    将被视为 `2600:1000:2000:3000::c0a8:101`，最后两个六合一是 `192.168.1.1` 的十六进制等效形式。
- en: 'These are all valid IPv6 addresses:'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是有效的IPv6地址：
- en: '`::` That’s all zeroes`0:0:0:0:0:0:0:0`.'
  id: totrans-split-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`::` 那是所有零 `0:0:0:0:0:0:0:0`。'
- en: '`2600::` That’s an equivalent to `2600:0:0:0:0:0:0:0`.'
  id: totrans-split-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2600::` 那相当于 `2600:0:0:0:0:0:0:0`。'
- en: '`::ffff:1.1.1.1` is an equivalent to `1.1.1.1` IPv4 address.'
  id: totrans-split-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`::ffff:1.1.1.1` 是 `1.1.1.1` IPv4地址的等价形式。'
- en: '`2607:f8b0:4005:80f::200e` is the address I get when I ping google.com. You
    know the drill; it’s equivalent to `2607:f8b0:4005:80f:0:0:0:200e`. As you can
    see, Like Facebook, Google also took the hard road and decided to assign manually
    designated `INTERFACE_ID` ‘s to its IPv6 addresses. Godspeed.'
  id: totrans-split-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2607:f8b0:4005:80f::200e` 是我ping google.com得到的地址。你懂的；它相当于 `2607:f8b0:4005:80f:0:0:0:200e`。正如你所看到的，就像Facebook一样，Google也走了艰难的路，决定为其IPv6地址手动指定
    `INTERFACE_ID`。'
- en: 'In the end, an IPv6 address you write on your address bar might look like this
    as a contrived example:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在你的地址栏写一个IPv6地址，它可能看起来像这样，作为一个牵强的例子：
- en: '`https://[542b:b2ae:ed5c:cb5a:e38b:2c49:123:192.168.1.1%25eth3]`'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://[542b:b2ae:ed5c:cb5a:e38b:2c49:123:192.168.1.1%25eth3]`'
- en: No way I’m memorizing that.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 不可能记住这个。
- en: That all said, I loved learning about IPv6! The learning experience clarified
    a few things for me. For example, I didn’t know IPv6 addresses were self-configured
    with a stateless protocol. I didn’t know it had no NAT. I didn’t know the address
    space was just conveniently split in half.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我喜欢学习IPv6！这次学习使我对一些事情有了更清晰的认识。例如，我不知道IPv6地址是通过无状态协议自配置的。我也不知道它没有NAT。我也不知道地址空间只是方便地一分为二。
- en: I wish we had a shortcut IPv6 address for our default gateway. I propose `fe80::1`.
    IETF, take note! :)
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望我们的默认网关有一个IPv6的快捷地址。我建议使用`fe80::1`。IETF，请注意！:)
- en: I remember that IPv6 support in Windows 2000 was a big step when announced,
    and we all thought IPv6 would get adopted in a decade or so. Could we be more
    wrong? Yet, learning about it made me understood why it hasn’t caught on fast.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我还记得，在Windows 2000中支持IPv6是一个重要的步骤，当时我们都认为IPv6会在十年左右得到广泛采用。我们可能错得有多离谱？然而，了解它为何没有迅速普及使我明白了一些原因。
- en: IPv6 provides no benefit to end-users
  id: totrans-split-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPv6对终端用户没有任何好处
- en: Despite how technologically advanced IPv6 is, IPv4 just works. It works even
    behind NAT, [even behind multiple layers of NATs](https://en.wikipedia.org/wiki/Carrier-grade_NAT),
    even with its extremely cramped address space, cumbersome DHCP, and port forwarding.
    It keeps working. When people find a way that it doesn’t work, and can never work,
    [somebody comes up and makes that work too](https://en.wikipedia.org/wiki/Hole_punching_(networking)).
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管IPv6在技术上非常先进，IPv4却运行良好。它即使在NAT后面也能工作，[即使在多层次的NAT背后](https://en.wikipedia.org/wiki/Carrier-grade_NAT)，即使它的地址空间极其狭窄，DHCP繁琐，还有端口转发。它仍然在工作。当人们发现它不能工作，永远也不能工作时，[总有人会想出办法让它也能工作](https://en.wikipedia.org/wiki/Hole_punching_(networking))。
- en: There’s probably a latency advantage of IPv6 not having NAT, but that’s not
    good enough to make a dent in user experience.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6没有NAT可能有一些潜在的延迟优势，但这对用户体验的影响不足以引起注意。
- en: Because IPv6 doesn’t provide any tangible benefit, users will never demand it,
    and they’ll just be pushed to it without them even knowing, like how we almost
    always [use IPv6 on cellular internet](https://www.arin.net/blog/2020/01/16/mobile-edge-of-the-internet-is-rapidly-moving-to-ipv6/)
    nowadays.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因为IPv6并没有提供任何实质性的好处，用户永远不会主动要求使用它，他们会在不知不觉中被推上IPv6，就像现在我们几乎总是[在移动互联网上使用IPv6](https://www.arin.net/blog/2020/01/16/mobile-edge-of-the-internet-is-rapidly-moving-to-ipv6/)一样。
- en: That means, when ISPs feel enough pressure from the limitations of IPv4, they’ll
    switch to IPv6 in an instant. No question about it.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，当ISP感受到IPv4的限制足够大时，他们将立即转向IPv6。毫无疑问。
- en: I wish IPv6 enabled some features that enabled a few distinct scenarios not
    possible with IPv4, so people could demand IPv6 to use them. Yet, I love the alienesque
    nature of IPv6 networks, and look forward to the time we fully abandon IPv4 and
    build everything around IPv6 instead.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望IPv6能够启用一些功能，使一些IPv4无法实现的特定场景成为可能，以便人们主动要求使用IPv6。然而，我喜欢IPv6网络的外星风格，并期待着我们完全放弃IPv4并建立一切基础设施围绕IPv6构建的时刻。
