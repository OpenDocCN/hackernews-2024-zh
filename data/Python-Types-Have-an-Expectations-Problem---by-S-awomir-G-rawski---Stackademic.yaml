- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '分类: 未分类'
- en: 'date: 2024-05-27 15:18:59'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:18:59
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Python Types Have an Expectations Problem | by Sławomir Górawski | Stackademic
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python类型存在期望问题 | 作者：Sławomir Górawski | Stackademic
- en: 来源：[https://medium.com/@sgorawski/python-types-have-an-expectations-problem-ea71a8645ce8](https://medium.com/@sgorawski/python-types-have-an-expectations-problem-ea71a8645ce8)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://medium.com/@sgorawski/python-types-have-an-expectations-problem-ea71a8645ce8](https://medium.com/@sgorawski/python-types-have-an-expectations-problem-ea71a8645ce8)
- en: Python Types Have an Expectations Problem
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python类型存在期望问题
- en: Photo by [Hitesh Choudhary](https://unsplash.com/@hiteshchoudhary?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Hitesh Choudhary](https://unsplash.com/@hiteshchoudhary?utm_source=medium&utm_medium=referral)提供在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Background
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: 'In the last ~10 or so years, many of the popular scripting languages gained
    optional static typing: JavaScript (via TypeScript), PHP, Python, even Ruby has
    something along the lines as far as I know.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的约10年左右，许多流行的脚本语言都增加了可选的静态类型：JavaScript（通过TypeScript），PHP，Python，甚至Ruby据我所知都有类似的东西。
- en: It’s become quite widespread in each of these languages’ communities, to the
    point of being considered a best practice for applications, and definitely for
    libraries.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 它已经在每种语言的社区中相当普及，甚至被认为是应用程序的最佳实践，绝对是库的最佳实践。
- en: 'It’s easy to see how type annotations are useful — let’s take this function
    that doesn’t have them:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 看到类型注释有多么有用很容易 - 让我们看看这个没有类型注释的函数：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It may seem pretty clear what it does — it checks whether `user` has permission
    `perm` on `obj`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能看起来很清楚它的作用 - 它检查`user`是否对`obj`拥有`perm`权限。
- en: 'However, if we wanted to use it somewhere, some questions immediately spring
    to mind:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们想在某处使用它，立即会有一些问题浮现：
- en: Is `user` an instance of the application’s User model? (I guess.)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`user`是应用程序的User模型的实例吗？（我猜的。）'
- en: Is `perm` an instance of some Permission model or just some representation,
    like a string? That one’s a bit harder, probably depends on the conventions of
    the framework used and the specific project.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`perm`是某种权限模型的实例还是只是一些表示，比如字符串？这有点难，可能取决于所使用的框架的约定和具体的项目。'
- en: 'Is `obj` an instance of any model, or maybe the model *type*? What if the permission
    checked is broader: should I pass null or is there a different function for that
    somewhere?'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`obj`是任何模型的实例，还是可能是模型的*类型*？如果检查的权限更广泛：我应该传递null还是在某处有不同的函数？'
- en: Does the function return true/false if the user has / doesn’t have the permission?
    Or maybe it doesn’t return anything and throws an exception if the check is negative?
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户具有/不具有权限，函数是否返回true/false？或者如果检查为负面，它是否不返回任何内容并抛出异常？
- en: 'Compare that to the typed version:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将其与类型版本进行比较：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It’s a bit longer, but it answers all our questions. (We’re not *absolutely*
    sure what the code will do, but we can reasonably guess.) Also, it can catch bugs
    and helps the IDEs with autocomplete.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它有点长，但它回答了我们所有的问题。（我们并不 *完全* 确定代码会做什么，但我们可以合理猜测。）此外，它可以捕获错误并帮助IDE进行自动完成。
- en: So, if the type annotations are so useful, why do I claim that in Python they
    have an “expectations problem”?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果类型注释如此有用，为什么我会说在Python中它们存在“期望问题”呢？
- en: Well, let’s compare how other languages are doing it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，让我们比较一下其他语言是如何做的。
- en: Comparison
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较
- en: JavaScript
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript
- en: JavaScript doesn’t have any typing on its own, you have to use TypeScript for
    that. It’s a very popular choice, so it’s shouldn’t be hard to start with.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript本身没有任何类型，你必须使用TypeScript。这是一个非常受欢迎的选择，所以开始起来不应该很难。
- en: 'We can have something like this in the source code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码中我们可以有类似这样的东西：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, TypeScript is not gonna run in the browser (or Node.js) like this, we
    have to compile it:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，TypeScript不会像这样在浏览器（或Node.js）中运行，我们必须编译它：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It’s not gonna let us. And so if we succeed in compiling and running it later
    we can be sure that the type mismatch was fixed and the program type checks.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 它不会让我们通过。所以，如果我们成功编译并运行它，我们可以确信类型不匹配已经被修复，程序类型检查已经通过。
- en: PHP
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP
- en: 'Now, let’s do something similar in PHP:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在PHP中做类似的事情：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'There is no compile step in PHP. However, if we run this code, it will crash
    at runtime:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP中没有编译步骤。但是，如果我们运行这段代码，它将在运行时崩溃：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Yeah, maybe throwing exceptions is not as good as catching that earlier, but
    at least we can be sure that the function code won’t be executed if the types
    are wrong.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，也许抛出异常不如早点捕获好，但至少我们可以确信如果类型不对，函数代码不会被执行。
- en: Python
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python
- en: 'Enter Python:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 进入Python：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We ran this and the type annotations did nothing! It called the function with
    the arguments of the wrong types, as if we didn’t do anything to prevent that.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行了这个代码，类型注释毫无作用！它使用了错误类型的参数调用了函数，就好像我们没有做任何事情来防止这种情况发生。
- en: Now, to someone familiar with Python it’ll be very obvious — the type hints
    don’t work at runtime, they are just there for a type checker program, like MyPy,
    that you have to run separately.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于熟悉 Python 的人来说，这将是非常明显的 —— 类型提示在运行时不起作用，它们只是供类型检查器程序使用的信息，比如 MyPy，你必须单独运行它。
- en: But after what we saw with the other languages it may not be obvious at all.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但根据我们在其他语言中看到的情况，这可能一点也不明显。
- en: In all my examples, I wrote the code using the most popular static typing solution
    of the given language, then I did the simplest thing I could to get the code running
    in my application. In case of TypeScript, I had to compile it to JS to run the
    code and it caught the error then. In PHP, I “just” ran it and it caught the type
    mismatch at runtime. In Python, I also could just run it — there was no compile
    step needed — and then my type hints at runtime did nothing!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在我所有的示例中，我使用了给定语言最流行的静态类型解决方案编写了代码，然后我尽可能简单地使代码在我的应用程序中运行。在 TypeScript 的情况下，我必须将其编译为
    JS 来运行代码，然后它就能捕获错误了。在 PHP 中，我“只是”运行它，它在运行时捕获了类型不匹配。在 Python 中，我也可以直接运行它 —— 不需要编译步骤
    —— 然后我的类型提示在运行时什么也没做！
- en: 'So if I have the source code in a given language and a running application,
    that’s what I can know from that:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我有给定语言的源代码和一个正在运行的应用程序，那我可以从中得知：
- en: Now, the last answer for Python would be different if I knew that someone ran
    a correctly configured type checker on the codebase before running the code —
    but how can I know that? I’d have to set up some CI with the type checking step
    and make it impossible to deploy the code that doesn’t pass it, maybe. If I don’t
    have that kind of infrastructure, there’s not much I can do.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我知道有人在运行代码之前对代码库进行了正确配置的类型检查，那么 Python 的最后答案将会有所不同 —— 但我怎么能知道呢？我必须设置一些带有类型检查步骤的
    CI，并且确保无法部署未通过检查的代码，或许是这样。如果我没有那样的基础设施，我就无能为力了。
- en: Python type hints are a core part of the language, they even have standard library
    modules (`typing`), and yet they don’t do anything when used in that language
    without some external tooling.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Python 类型提示是语言的核心部分，它们甚至有标准库模块（`typing`），但是在该语言中使用时却没有任何外部工具的情况下它们什么也不做。
- en: That, to me, is a bit of an expectations mismatch.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，这有点期望不符。
- en: Conclusions
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Now, if the Python type annotations actually did look like what they are — information
    for external tools, not a “working” part of the language — it would probably be
    clearer. Like comments. And there actually *is* an official syntax for that!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果 Python 类型注释实际上看起来像它们所代表的信息 —— 供外部工具使用，而不是语言的“工作”部分 —— 那可能会更清晰。就像注释一样。而事实上，确实*有*一种官方的语法！
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It works with MyPy, but it’s quite niche at this point (was intended for compatibility
    with old Python versions), doesn’t work too well with tools like PyCharm and probably
    can’t express everything that the annotations can.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 它与 MyPy 配合使用，但在这一点上它相当小众（旨在与旧版 Python 兼容），与 PyCharm 等工具的兼容性不是太好，而且可能无法表达注释所能表达的一切。
- en: A shame, because to me it communicates expectations better — it’s a comment,
    so it’s an information for an external tool and it doesn’t work at runtime. All
    expected.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 真可惜，因为对我来说它传达了更好的期望 —— 它是一条注释，所以它是供外部工具使用的信息，而且在运行时不起作用。所有这些都是可以预料的。
- en: Stackademic 🎓
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stackademic 🎓
- en: 'Thank you for reading until the end. Before you go:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您一直阅读到最后。在您离开之前：
