- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 12:57:32'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 12:57:32'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: C++ Coroutines Do Not Spark Joy | Probably Dance
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++ Coroutines Do Not Spark Joy | Probably Dance
- en: 来源：[https://probablydance.com/2021/10/31/c-coroutines-do-not-spark-joy/](https://probablydance.com/2021/10/31/c-coroutines-do-not-spark-joy/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://probablydance.com/2021/10/31/c-coroutines-do-not-spark-joy/](https://probablydance.com/2021/10/31/c-coroutines-do-not-spark-joy/)
- en: C++20 added minimal support for coroutines. I think they’re done in a way that
    really doesn’t fit into C++, mostly because they don’t follow the zero-overhead
    principle. Calling a coroutine can be very expensive (requiring calls to new()
    and delete()) in a way that’s not entirely under your control, and they’re designed
    to make it extra hard for you to control how expensive they are. I think they
    were inspired by C# coroutines, and the design does fit into C# much better. But
    in C++ I don’t know who they are for, or who asked for this…
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: C++20增加了对协程的最小支持。我认为它们的实现方式在很大程度上并不适合C++，主要是因为它们不遵循零开销原则。调用协程可能非常昂贵（需要调用new()和delete()），这种开销并非完全在您的控制之下，而且它们设计得使您难以控制它们的开销。我认为它们受到了C#协程的启发，设计在C#中确实更合适。但在C++中，我不知道它们是为谁设计的，或者谁要求添加这些功能...
- en: 'Before we get there I’ll have to explain what they are and what they’re useful
    for. Briefly, they’re very useful for code with concurrency. The classic example
    is if your code has multiple state machines that change state at different times:
    E.g. the state machine for reading data from the network is waiting for more bytes,
    and the code that provides bytes is also a state machine (maybe it’s decompressing)
    which in turn gets its bytes from another state machine (maybe it’s handling the
    TCP/IP layer). This is easier to do when all of these can pretend to operate on
    their own, as if in separate threads, maybe communicating through pipes. But the
    code looks nicer if the streamer can just call into the decompressor using a normal
    synchronous function call that returns bytes. Coroutines allow you to do that
    without blocking your entire system when more bytes aren’t immediately available,
    because code can pause and resume in the middle of the function.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我必须解释它们是什么，以及它们有什么用处。简而言之，它们对于具有并发性的代码非常有用。经典示例是，如果您的代码有多个状态机在不同时间改变状态：例如，从网络读取数据的状态机正在等待更多字节，而提供字节的代码也是一个状态机（也许正在解压缩），依次从另一个状态机获取其字节（也许正在处理TCP/IP层）。当所有这些状态机都可以假装独立运行时（也许通过管道通信），这样做就更容易。但是，如果流处理器可以通过正常的同步函数调用调用解压器返回字节，代码看起来更美观。协程允许您在函数中间暂停和恢复，而不会在更多字节不立即可用时阻塞整个系统。
- en: 'One of the best things the C++ standard did is to define the word “coroutine”
    as different from related concepts like “fibers” or “green threads”. (this very
    much went against existing usage, so for example Lua coroutines are not the same
    thing as C++ coroutines. I think that’s fine, since the thing that was added to
    C++ could be useful, and there is a good case to be made that the existing usage
    was wrong) In the standard, a coroutine is simply a function that behaves differently
    when called multiple times: Instead of restarting from the start on each call,
    it will continue running after the return statement that last returned. To do
    this, it needs some state to store the information of where it last returned,
    and what the state of the local variables was at that point. In existing usage
    that meant that you need a program stack to store this state, but in C++ this
    is just stored in a struct.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: C++标准所做的最好的事情之一是将“协程”这个词定义为与“纤程”或“绿色线程”等相关概念不同的词汇。（这与现有用法非常不同，例如Lua协程与C++协程不同。我认为这很好，因为C++添加的东西可能很有用，并且有很多理由证明现有用法是错误的）。在标准中，协程简单地是一个在多次调用时表现不同的函数：它不会在每次调用时从头开始，而是在上次返回的返回语句后继续运行。为了实现这一点，它需要一些状态来存储上次返回时的信息，以及那时本地变量的状态。在现有用法中，这意味着您需要一个程序堆栈来存储这种状态，但在C++中，这只是存储在一个结构体中。
- en: 'To illustrate all of this, lets build a coroutine in plain C++, without using
    the language coroutines:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一切，让我们在普通的C++中构建一个协程，而不使用语言协程：
- en: '## Manually Building a Coroutine'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '## 手动构建协程'
- en: 'We’ll take a very simple example. C++ coroutines transform this code:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以一个非常简单的例子为例。C++协程将转换此代码：
- en: '[PRE0]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Into this code:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 'Into this code:'
- en: '[PRE1]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The “co_yield” in the first listing is a new keyword. I said that repeat calls
    to a coroutine resume after the last return statement, but they actually resume
    after the last “co_yield” statement. (and co_yield is syntactically the same as
    “return”) I think this was done because you want two different ways of returning
    from a function:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个清单中的“co_yield”是一个新关键字。我说重复调用协程会在最后的return语句后继续执行，但它们实际上在最后的“co_yield”语句后继续执行。（而co_yield在语法上与“return”相同）。我认为这是因为你想要函数有两种不同的返回方式：
- en: co_return, which means “return and don’t call me again”
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: co_return，意味着“返回并不再被调用”
- en: co_yield, which means “return and resume here on the next call.”
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: co_yield，意味着“在下一次调用时返回并继续执行此处”。
- en: 'The second listing is a struct that looks exactly like what the compiler generates
    for the first listing. The transformation is this:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个清单是一个结构体，看起来与编译器为第一个清单生成的完全相同。转换如下：
- en: Turn all stack variables into member variables of a struct
  id: totrans-split-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有堆栈变量转换为结构体的成员变量
- en: Rename the function to resume() and make it a member function of the struct
  id: totrans-split-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将函数重命名为resume()并将其作为结构体的成员函数
- en: Put a switch/case around the entire body of the function, as in Duff’s Device
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在函数整体的主体周围加上一个switch/case，就像Duff's Device中那样
- en: Add a new case to your enum for every co_yield.
  id: totrans-split-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个co_yield在你的枚举中添加一个新的case。
- en: Add a Done case to indicate that the function is over. It doesn’t matter what
    I return at the end, that value returned from Done should never be used
  id: totrans-split-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个Done case来指示函数已经结束。在结尾返回什么并不重要，从Done返回的值永远不应该被使用
- en: These transformations work even for functions that are much more complicated.
    This might be familiar from Simon Tatham’s classic article [Coroutines in C](https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html)
    which does this transformation using static variables instead of class member
    variables.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些转换甚至适用于更复杂的函数。这可能来自于Simon Tatham经典文章[在C中使用协程](https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html)，该文章使用静态变量而非类成员变量进行了这种转换。
- en: 'Aside: As an example of how existing usage of the word “coroutine” was different,
    Tom Duff (of Duff’s Device) [said](https://brainwagon.org/2005/03/05/coroutines-in-c/#comments)
    that this is not a good way to implement coroutines, because when using this trick
    you can not yield from nested functions. The C++ standard turned this around and
    said “it’s only a coroutine if you can not yield from nested functions. If you
    could, it would be a fiber.”'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 旁注：作为“协程”一词现有用法的一个例子，汤姆·达夫（Duff's Device的作者）[说](https://brainwagon.org/2005/03/05/coroutines-in-c/#comments)这不是实现协程的好方法，因为使用这种技巧时，无法从嵌套函数中产生yield。C++标准将其颠倒过来，并表示“只有在不能从嵌套函数中产生yield时才算是协程。如果可以，它将会是一个fiber。”
- en: 'Let’s continue to build this coroutine by making it do something useful. Say
    we want to get this test to work:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续构建这个协程，使其做一些有用的事情。比如说，我们想让这个测试工作：
- en: '[PRE2]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So here I allocate two vectors, then I loop over the results of the range()
    function (from the first listing) and also loop over the results of the range_struct()
    constructor (from the second listing), and both should give the same result. Knowing
    how the range_struct is implemented so far, what would you add to it to make this
    work?
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在这里我分配了两个向量，然后我循环遍历range()函数（来自第一个清单）的结果，并且也循环遍历range_struct()构造函数（来自第二个清单）的结果，两者都应该给出相同的结果。知道range_struct迄今为止是如何实现的，你会为了使其工作而添加什么？
- en: 'We need iterators. Here is the minimal implementation to make this work for
    range_struct:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要迭代器。这是使range_struct工作的最小实现：
- en: '[PRE3]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The iterator needs operator++ to advance, operator* to get a value and operator==
    to check if we’re at the end. The implementations of each is trivial, but it might
    take some thinking to see that this does the right thing. One odd thing is that
    when constructing the iterator, in begin(), we also have to call resume() once.
    This is just an accident of the C++ iterator interface. These coroutines actually
    map better to the Rust iterator interface where next() would directly wrap resume().
    To see the need for the call, think about what would happen if we didn’t call
    resume() once, and if end==0\. The first call to operator== would return the wrong
    thing.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器需要operator++来前进，operator*来获取值，operator==来检查是否到达末尾。每个的实现都很简单，但可能需要一些思考才能看出它是否正确。一个奇怪的地方是，在构造迭代器时，在begin()中我们还必须调用一次resume()。这只是C++迭代器接口的一个偶然。这些协程实际上与Rust迭代器接口更匹配，其中next()直接包装resume()。要看到调用的必要性，思考一下如果我们没有调用一次resume()，并且end==0时会发生什么。operator==的第一次调用会返回错误的结果。
- en: It’s possible to avoid reading the internal state of the function. Instead of
    reading self->i, we could also store the return value of resume() and remember
    it. Then this would work for any function that followed the conversion steps I
    outlined above, but I wanted to keep the implementation trivial for educational
    purposes.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可以避免读取函数的内部状态。我们可以存储 resume() 的返回值并记住它，而不是读取 self->i。然后，这将适用于按照我上述转换步骤操作的任何函数，但出于教育目的，我希望保持实现的简单性。
- en: If this is all the compiler does, then what is the problem? The problem is that
    they didn’t stop there.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是编译器所做的一切，那么问题是什么？问题在于他们并没有停在这一步。
- en: Heap Allocation
  id: totrans-split-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆分配
- en: 'One problem with the above is step 1 of my conversion steps: “Turn all stack
    variables into member variables of a struct.” On more complex functions this can
    clearly be wasteful. If there was more work to be done after the end of the for-loop,
    the compiler could reuse the stack space that used to be taken up by the variable
    ‘i’. So the C++ standard doesn’t want to describe the layout of these coroutine
    structs. And because of that you’re not allowed to see this struct. The language
    hides it from you completely, even more than the types of lambda functions. You
    can’t even use sizeof() on it. How do you hide a type even more than lambda function
    types? They hide it behind a pointer. And that pointer points at a heap allocation.'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法的一个问题是我转换步骤中的步骤1：“将所有堆栈变量转换为结构体的成员变量。”在更复杂的函数中，这显然是浪费的。如果在 for 循环结束后还有更多工作要做，编译器可以重用曾经由变量
    'i' 占用的堆栈空间。因此，C++ 标准不希望描述这些协程结构体的布局。因此，你无法完全看到这个结构体。语言完全将其隐藏起来，甚至比 lambda 函数类型更多。你甚至无法对其使用
    sizeof()。如何将一种类型隐藏得比 lambda 函数类型还多？它们将其隐藏在指针背后。并且该指针指向一个堆分配。
- en: So every call to a coroutine includes a call to new(). And at the end of the
    coroutine, a call to delete(). How did they get this into the standard? Who bought
    the story of “we wanted this compiler optimization, and all we had to do was introduce
    a call to new() and a call to delete()” which is clearly not an optimization?
    The way to get this into the standard is to [promise](https://www.youtube.com/watch?v=8C8NnE1Dg4A)
    that the coroutine can be inlined, and if it’s inlined, no call to new() and delete()
    are necessary.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每次调用协程都会包含一个 new() 的调用。在协程结束时，会调用 delete()。他们是如何将这个引入到标准中的呢？谁相信了“我们想要这个编译器优化，而我们只需引入一次
    new() 和一次 delete()”的故事，显然这不是优化？将这个引入标准中的方法是[承诺](https://www.youtube.com/watch?v=8C8NnE1Dg4A)协程可以内联，并且如果内联了，就不需要调用
    new() 和 delete()。
- en: This sounds good, and the simple generator example does get inlined for me,
    but it didn’t seem to work for anything more complicated. I was trying to implement
    [Differential Dataflow](https://www.microsoft.com/en-us/research/publication/differential-dataflow/)
    in a way that would allow the code to mostly look normal. So this was building
    up a graph of nested coroutines, each operating on pipes from other coroutines.
    This is similar to the simple range generator above, except every function is
    operating on infinite input pipes and there are joins and splits and aggregations.
    The lifetimes are often not clear, but sometimes they’re very clear and even then
    I didn’t get inlining.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来不错，简单的生成器示例确实可以内联处理，但对于更复杂的内容似乎行不通。我尝试实现[Differential Dataflow](https://www.microsoft.com/en-us/research/publication/differential-dataflow/)，希望代码看起来大多数时候都很正常。因此，这是在构建一个由嵌套协程图组成的图形，每个协程操作来自其他协程的管道。这类似于上面的简单范围生成器，只是每个函数都在无限输入管道上操作，并且存在连接、分割和聚合。生命周期通常不明确，但有时它们非常明确，即使如此，我也无法实现内联处理。
- en: 'This is less of a problem if your coroutines are long-lived. Suspending and
    resuming a coroutine is fast once it has been allocated. This makes sense if you
    think back to the struct we created above: The heap allocation only affects the
    constructor and destructor. But if you have small utility coroutines, a heap allocation
    can really cost you.'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这在协程寿命较长时并非问题。一旦分配完成，挂起和恢复协程的速度很快。回顾我们上面创建的结构体，这是有道理的：堆分配仅影响构造函数和析构函数。但是，如果你有小型实用协程，堆分配可能会带来很大成本。
- en: 'This is a big change in the language. The language has never wanted to give
    you control about inlining. The “inline” keyword is intentionally vague. There
    are non-standard ways of saying “don’t inline” and “please, try really hard to
    inline this” but no guarantees. In most code the difference between inlining and
    not inlining isn’t big. When it does matter, the difference can easily be 2x,
    5x or more. But if not inlining means adding heap allocations, then suddenly not
    inlining can mean that your code runs 100x slower. With that big of a difference,
    we suddenly need real control about whether something is inlined or not. Since
    a coroutine is just a struct, we should already be able to control this: Just
    put it on the stack, or make it a member of a different struct, but the language
    intentionally forbids that, insisting that you leave it up to the compiler.'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是语言上的一个重大变化。语言从未想要控制内联。"inline"关键字故意模糊不清。有非标准的方法来表示“不要内联”和“请尽力内联”，但没有保证。在大多数代码中，内联和不内联的区别并不大。但如果不内联意味着增加堆分配，那么突然之间不内联就可能导致代码运行慢100倍。有了这么大的差异，我们突然需要真正控制是否内联。由于协程只是一个结构体，我们应该已经能够控制这一点：只需将其放在堆栈上，或者将其作为不同结构的成员，但语言故意禁止这样做，坚持让编译器来处理。
- en: So if something needs to be inlined, what do you use?
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果需要内联某些东西，你会用什么？
- en: Macros
  id: totrans-split-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宏
- en: 'My coroutine code quickly accumulated macros. And not just for performance
    reasons. There are several ways in which coroutines don’t compose nicely. As an
    example, lets stick to the generator code above and make it slightly more complex.
    Lets say it first emits the numbers zero to nine, then calls something else that
    also returns a generator:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我的协程代码很快积累了宏。而且不仅仅是为了性能原因。有几种方式协程不好组合。例如，让我们坚持上面的生成器代码并稍微复杂化它。假设它首先发出从零到九的数字，然后调用另一个也返回生成器的东西：
- en: '[PRE4]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This does not compile. The type for rest is generator_coro<int>, and it looks
    like the function returns a generator_coro<int>, but actually that’s the type
    of the coroutine wrapper, and the wrapper expects that we return ints. (as can
    be seen by us yielding ints before)
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是不能编译的。rest的类型是`generator_coro<int>`，看起来函数返回`generator_coro<int>`，但实际上那是协程包装器的类型，而包装器期望我们返回整数（正如我们在之前产生整数时所看到的）。
- en: 'So instead you have to write this:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你必须写成这样：
- en: '[PRE5]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'OK that isn’t too bad. We just have to store the other coroutine on our stack
    and then yield all values from it. In my code I was composing coroutines like
    this a lot, which is all fine until I needed to make a change. I wanted to slightly
    change how to forward values like this. For the sake of example lets say I want
    to set a flag “is_draining” before doing this loop. So it should look like this
    instead:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这并不太糟糕。我们只需将另一个协程存储在我们的堆栈上，然后从中产生所有值。在我的代码中，我经常像这样组合协程，这都很好，直到我需要做出改变。我想稍微修改如何像这样转发值。举个例子，假设我想在执行此循环之前设置一个标志“is_draining”。所以它应该看起来像这样：
- en: '[PRE6]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Unfortunately the code was manually inlined in various places like this: to
    completely drain and yield a generator, I was always iterating through the list,
    so when I needed to set the flag before the loop, I had to change every place.
    How would I fix this in normal code? Write a function that encapsulates the repeated
    code:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，代码被手动内联到各个地方，比如这样：完全耗尽并产生生成器时，我总是遍历列表，所以当我需要在循环之前设置标志时，我必须改变每个地方。在正常代码中我该如何修复这个问题？编写一个封装重复代码的函数：
- en: '[PRE7]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This seems reasonable: Now I can call this function to drain a generator. But
    you can’t do this. This is a new coroutine. If I try to use this in the outer
    function, I get this:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来很合理：现在我可以调用这个函数来耗尽生成器。但你不能这样做。这是一个新的协程。如果我试图在外部函数中使用这个，我会得到这个：
- en: '[PRE8]'
  id: totrans-split-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The function drain_and_yield_all returns a whole new coroutine, which I can’t
    return. So I’m right back at the problem where I started.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`drain_and_yield_all`返回一个全新的协程，我不能返回它。所以我回到了最初的问题。
- en: 'The only way to solve this is to use macros. Coroutines don’t compose without
    macros. I can’t force the function “drain_and_yield_all” to be inlined, therefore
    it generates a new coroutine (probably allocated on the heap) and therefore I
    can’t write this little reusable helper. If I want to have one standardized way
    of doing this that I can easily change, I need to use a macro:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一解决这个问题的方法是使用宏。协程没有宏就无法组合。我不能强制函数“drain_and_yield_all”内联化，因此它生成一个新的协程（可能在堆上分配），因此我不能编写这个小巧的可重用辅助程序。如果我想要一种标准化的方法来做这件事，我可以轻松地更改，我需要使用宏：
- en: '[PRE9]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Not pretty, but it’s the only way.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 不太漂亮，但这是唯一的方法。
- en: Yielding Values
  id: totrans-split-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 产出值
- en: In my manual code transformation above I was just reading the value ‘i’ from
    the stack of the coroutine. Why make it any more complicated?
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在我上面的手动代码转换中，我只是从协程的堆栈中读取值‘i’。为什么要把它变得更加复杂呢？
- en: The standard makes this slightly more abstract. When I returned the type “generator_coro<int>”
    above, that is the same type no matter what the body of the function looks like.
    I haven’t shown what that type looks like because it’s messy, but I have to explain
    it a little bit. In theory it’s just a wrapper that provides the iterator interface
    so we can use the type in a loop, but it has to work for all functions. In my
    manual transformation above we saw that for each function we get a different struct,
    so how can one wrapper work for all the different structs you might get? The heap
    allocation makes it easier, but the main reason is that the wrapper can’t rely
    on anything in the function. We can’t access its stack variables. So how does
    co_yield work?
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 标准稍微抽象了一些。当我在上面返回类型“generator_coro<int>”时，无论函数体如何，都是相同的类型。我没有展示这种类型的样子，因为它很凌乱，但我必须稍微解释一下。理论上它只是一个包装器，提供迭代器接口，所以我们可以在循环中使用这种类型，但它必须适用于所有函数。在我上面的手动转换中，我们看到对于每个函数我们得到一个不同的结构体，那么一个包装器如何适用于可能获得的所有不同结构体？堆分配使得这更容易，但主要原因是包装器不能依赖于函数中的任何内容。我们不能访问它的堆栈变量。那么
    co_yield 如何工作？
- en: Between the coroutine and the caller there is a channel of communication called
    the “promise type”. It’s where co_yield can store a value, and it’s where the
    wrapper can read from. This promise_type is the same for all coroutines that return
    the same wrapper. So in co_yield we’re actually just storing the value in the
    promise_type, and then the wrapper reads it from the promise_type. This is clearly
    inefficient in my example where I’m just yielding a stack variable. Do we really
    have to make a copy of that?
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 协程和调用者之间有一种称为“promise type”的通信渠道。这是 co_yield 可以存储值的地方，也是包装器可以从中读取的地方。对于返回相同包装器的所有协程，这个
    promise_type 都是相同的。因此，在 co_yield 中，我们实际上只是将值存储在 promise_type 中，然后包装器从 promise_type
    中读取它。在我的示例中，这显然效率低下，因为我只是在产出一个堆栈变量。我们真的需要复制它吗？
- en: One improvement is to store a pointer in the promise_type. That’s overkill for
    an int, but in general it’s faster. We can safely point at anything in the coroutine
    body, because those are all just members of the struct which lives on. This saves
    us a copy.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一个改进是在 promise_type 中存储一个指针。对于 int 来说这有点过度，但通常来说更快。我们可以安全地指向协程体中的任何内容，因为这些内容都只是结构体的成员，而结构体一直存在。这样可以节省一次复制。
- en: 'But we can do one step better: Turns out direct reading from the stack is allowed
    in one special case: The promise_type is stored on the stack of the coroutine.
    So all coroutines that return the same wrapper will generate a struct that has
    the promise_type as one of its members. And we are allowed to read from the struct
    as long as we’re reading from the promise_type. The problem is that the coroutine
    can’t write to the promise_type. If it could, I would just have put my loop variable,
    ‘i’ into the promise_type.'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们可以更进一步：事实证明，在一个特殊情况下允许直接从堆栈中读取：promise_type 存储在协程的堆栈上。因此，所有返回相同包装器的协程将生成一个结构体，其中
    promise_type 是其成员之一。只要我们从 promise_type 中读取，我们就可以从结构体中读取。问题在于协程无法向 promise_type
    写入。如果可以的话，我会把我的循环变量‘i’放入 promise_type 中。
- en: 'Luckily David Mazieres [found a way](https://www.scs.stanford.edu/~dm/blog/c++-coroutines.html#the-promise-object)
    to do the sane thing. Unfortunately the code looks a bit insane. There is another
    new operator, co_await, which I haven’t explained at all. It’s intended to be
    used when your coroutine waits for the result of a long operation, say a network
    call. In that case you can use co_await, which means “return for now and ask the
    object that I’m returning when it’s OK to call me again.” So in practice you co_await
    some kind of object that indicates when the network request is done. But we’re
    not going to use it for that. Turns out co_await can be used as a hack to get
    the promise object, because the awaitable object is allowed to read from the promise_type,
    just like the wrapper is allowed. So we’re going to create an awaitable object
    that looks like this:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，David Mazieres [找到了方法](https://www.scs.stanford.edu/~dm/blog/c++-coroutines.html#the-promise-object)
    来做一个理智的事情。不幸的是，代码看起来有点疯狂。还有另一个新操作符，co_await，我还没解释过。当你的协程等待长时间操作的结果时，比如网络调用，就可以使用
    co_await，这意味着“现在返回，等对象告诉我何时可以再次调用我”。实际上你可以 co_await 一些指示网络请求完成的对象。但我们并不打算用它来做那个。事实证明，co_await
    可以作为获取承诺对象的一种方法，因为可等待对象允许从 promise_type 中读取，就像包装器一样。所以我们将创建一个可等待对象，看起来像这样：
- en: '[PRE10]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Each of these functions has a meaning according to the standard. But really
    what’s relevant here is that in await_suspend we’re allowed to access the promise_type.
    We’re just going to stash a pointer away, and in await_resume we’re going to return
    it. And we never actually suspend the coroutine. So in the body of a coroutine
    you can do this:'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 每个这些函数根据标准都有意义。但在这里真正相关的是，在 await_suspend 中，我们可以访问 promise_type。我们只需存储一个指针，然后在
    await_resume 中返回它。所以在协程体中，你可以这样做：
- en: '[PRE11]'
  id: totrans-split-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It’s kinda gross, but we know for a fact that the promise is stored right next
    to “stop” and “step” in the auto-generated struct of this coroutine. So this is
    how you yield a value directly from the stack without making a copy and without
    having to use a pointer. The co_yield call should compile down to a self-assignment,
    i=i.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来有点恶心，但我们确信承诺存储在此协程的自动生成结构中的“stop”和“step”旁边。所以这就是你如何直接从栈中产生值而不进行复制且不必使用指针的方式。co_yield
    调用应该被编译为自我赋值，即 i=i。
- en: This looks insane, but if you think of the actual generated instructions, it’s
    the only sane way to pass data between the coroutine and its handle. Once you
    understand how coroutines work, it only makes sense for the wrapper to read values
    right from the stack, and for the coroutine to write values to the stack. And
    the only allowed place to do that is in the promise_type. We aren’t supposed to
    access it, even though it is on our stack, but that’s just the standard being
    weird.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来有些疯狂，但如果你考虑实际生成的指令，这是在协程和其句柄之间传递数据的唯一理智的方法。一旦你理解了协程的工作原理，从包装器直接从栈上读取值就是有意义的，而协程则将值写入栈中。而唯一允许执行此操作的地方就是在
    promise_type 中。尽管它位于我们的栈上，我们不应该访问它，但这只是标准行为很奇怪的一个例子。
- en: 'One nice thing would be to pull this into a wrapper function, so that I could
    write this instead:'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一件好事是将其封装成一个包装函数，这样我就可以写成这样：
- en: '[PRE12]'
  id: totrans-split-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: So I just receive the promise as one of my arguments. Alas, that wrapper is
    impossible to write, because we would have to force inlining to make it work,
    and we can’t. You can make it slightly less ugly with macros though…
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我只需将承诺作为我的其中一个参数即可。可惜，这个包装器无法写出来，因为我们必须强制内联才能使其工作，而这是不可能的。不过，你可以用宏来稍微减少其丑陋程度……
- en: Operators for Fibers
  id: totrans-split-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于 Fibers 的运算符
- en: 'One thing I was looking forward to was to finally have the co_yield and co_await
    operators in the language so that I could use them with fibers. Everything is
    customizable enough that this should be possible. Before C++20 I would have to
    create a macro like this in my fibers:'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有件事我一直期待的是终于在语言中拥有 co_yield 和 co_await 操作符，这样我就可以在 Fibers 中使用它们。一切都足够可定制，这应该是可能的。在
    C++20 之前，我必须在我的 Fibers 中创建这样的宏：
- en: '[PRE13]'
  id: totrans-split-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this I assume that “fiber_yield()” returns true if the fiber should continue
    running, and false if the fiber should early-out. (probably because it’s being
    destructed, so we need to tear down the stack, so it’s absolutely necessary to
    return immediately) The co_yield operator has this behavior built-in and I want
    to use it as well in fibers. Unfortunately as soon as you use the keyword, your
    function is no longer a function, it’s now a coroutine. Meaning it needs a wrapper
    and it needs to be heap-allocated. This is terrible because fibers don’t have
    the problems with composition I mentioned above: It’s much easier to write little
    helper functions because in a fiber you’re allowed to yield from a nested function.
    But if those little nested functions have to be coroutines, that ruins everything.'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我假设“fiber_yield()”如果纤程应该继续运行则返回true，如果纤程应该提前结束则返回false（可能是因为正在析构，所以我们需要拆解堆栈，因此立即返回是绝对必要的）。co_yield运算符内置了这种行为，我也想在纤程中使用它。不幸的是，一旦你使用了这个关键字，你的函数不再是函数，而是一个协程。这意味着它需要一个包装器并且需要在堆上分配内存。这很糟糕，因为纤程不会遇到我上面提到的组合问题：写一些小的帮助函数更容易，因为在纤程中你可以从嵌套函数中yield。但是如果这些小的嵌套函数必须是协程，那就糟糕了。
- en: Conclusion and Advice
  id: totrans-split-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论和建议
- en: 'Overall I’m still happy that coroutines exist. I liked experimenting with them.
    But everyone’s reaction seems to be the same: These coroutines quickly deflate
    your energy. They don’t spark joy. Everything is just a bit clunky and gross.
    You always have to worry if something gets inlined, because the difference between
    an inlined coroutine and a not-inlined coroutine is a much bigger cliff than for
    a normal function. And they’re just not ergonomic to use.'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 总体上，我仍然很高兴协程存在。我喜欢尝试它们。但每个人的反应似乎都是一样的：这些协程很快就消耗掉你的精力。它们没有激发我的兴奋点。一切都有点笨拙和粗糙。你总是要担心是否有东西被内联，因为内联协程和非内联协程之间的差距比普通函数的差距要大得多。而且它们使用起来并不方便。
- en: 'If you’re working on coroutines for other languages, do a couple of simple
    things:'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在为其他语言编写协程，请做几件简单的事情：
- en: Give me access to the generated struct. Allow me to put it on the stack of another
    function. Or as a member of another struct. Then I can store it on the heap if
    I want, but don’t force me.
  id: totrans-split-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给我访问生成的结构体的权限。允许我将其放在另一个函数的栈上，或者作为另一个结构体的成员。然后我可以将它存储在堆上，但不要强制我这样做。
- en: Think more about how these compose. This gets a lot better already if I have
    control over the struct, because then if I want to write a small utility function,
    I can put it on the stack and don’t have to worry about heap allocations
  id: totrans-split-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 思考这些如何组合。如果我对结构有控制权，情况会好很多，因为如果我想写一个小的实用函数，我可以将它放在栈上，而不必担心堆分配的问题。
- en: Allow me to use the same operators for fibers. Don’t turn my function into a
    coroutine just because I use “co_yield”
  id: totrans-split-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许我在纤程中使用相同的操作符。不要仅因为我使用了“co_yield”而将我的函数转变为协程。
- en: 'Give me a saner way to access stack variables. Maybe just allow me to write
    “public” on stack variables. So that the initial code would have looked like this:'
  id: totrans-split-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给我一个更明智的方式来访问栈变量。也许只是允许我在栈变量上写“public”。因此，初始代码看起来会像这样：
- en: '[PRE14]'
  id: totrans-split-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'I pulled this out into a separate line to make this clearer, but it should
    be valid to make any stack variable public, no matter how it is declared. Since
    these just become struct members, using the “public” keyword even makes sense
    because it’s used for the same purpose: I make something accessible to users of
    the struct.'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我将这些内容单独放在一行，以便更清晰，但可以将任何栈变量都变为公共的，无论它如何声明。因为这些变量最终都变成了结构体成员，使用“public”关键字甚至合理，因为它用于同样的目的：我使某些东西对结构体的用户可访问。
- en: As the coroutines are, I don’t quite know what they’re for. They seem like they
    might be useful, but nobody seems excited by them. Anyone who has long-running
    concurrent tasks switched to using fibers ages ago. See [this good talk](https://www.youtube.com/watch?v=JDcip-SRgVE)
    from 2012, or [this better talk](https://www.gdcvault.com/play/1022186/Parallelizing-the-Naughty-Dog-Engine)
    from 2015\. I don’t see how to use coroutines here. The threat of having a heap
    allocation when your inliner changes its mind ruins it. (or more likely for complex
    code like this, the inlining never works to begin with)
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 就目前的协程来说，我不太明白它们的用途。它们似乎可能有用，但没有人似乎对它们感到兴奋。那些有长时间并行任务的人很久以前就已经转向使用纤程了。参见[这个好的讲座](https://www.youtube.com/watch?v=JDcip-SRgVE)（2012年）或[这个更好的讲座](https://www.gdcvault.com/play/1022186/Parallelizing-the-Naughty-Dog-Engine)（2015年）。我不知道在这里如何使用协程。当你的内联器改变主意时，有堆分配的威胁会毁掉它。（或者更可能对于像这样的复杂代码，内联根本不起作用）
- en: I’m curious if anyone actually finds something useful to do with these. Are
    they just for simple generator functions?
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我很好奇是否有人真的能找到这些东西有用。它们只是用于简单的生成函数吗？
