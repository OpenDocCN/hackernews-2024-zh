- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:28:59'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月27日13:28:59
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The problem with invariants is that they change over time – Surfing Complexity
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不变量的问题在于它们随时间变化——《冲浪复杂性》
- en: 来源：[https://surfingcomplexity.blog/2024/03/26/the-problem-with-invariants-is-that-they-change-over-time/](https://surfingcomplexity.blog/2024/03/26/the-problem-with-invariants-is-that-they-change-over-time/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://surfingcomplexity.blog/2024/03/26/the-problem-with-invariants-is-that-they-change-over-time/](https://surfingcomplexity.blog/2024/03/26/the-problem-with-invariants-is-that-they-change-over-time/)
- en: 'Cliff L. Biffle blogged a great write-up of a debugging odyssey at [Oxide](https://oxide.computer/)
    with the title [Who killed the network switch?](https://cliffle.com/blog/who-killed-the-network-switch/)
    Here’s the bit that jumped out at me:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: Cliff L. Biffle在[Oxide](https://oxide.computer/)上撰写了一篇关于一个调试奥德赛的精彩文章，标题为[谁杀死了网络交换机？](https://cliffle.com/blog/who-killed-the-network-switch/)
    这里是让我印象深刻的部分：
- en: At the time that code was written, it was correct, but it embodied the assumption
    that any loaned memory would fit into one region.
  id: totrans-split-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在编写代码时，它是正确的，但它体现了任何借出内存都将适合一个区域的假设。
- en: That assumption became obsolete the moment that Matt implemented task packing,
    but we didn’t notice. This code, which was still simple and easy to read, was
    now also wrong.
  id: totrans-split-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当马特实施任务打包时，那个假设变得过时，但我们没有注意到。这段代码仍然简单易读，但现在是错误的。
- en: This type of assumption is an example of an *invariant*, a property of the system
    that is supposed to be guaranteed to not change over time. Invariants play an
    important role in formal methods (for example, see the section [Writing an invariant](https://www.learntla.com/core/invariants.html)
    in Hillel Wayne’s [Learn TLA+](https://www.learntla.com/index.html) site).
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这种假设是不变量的一个例子，即系统中被保证不会随时间改变的属性。不变量在形式化方法中扮演着重要角色（例如，参见Hillel Wayne的《Learn TLA+》站点中的章节[编写不变量](https://www.learntla.com/core/invariants.html)）。
- en: 'Now, consider the following:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑以下情况：
- en: Our systems change over time. In particular, we will always make modifications
    to support new functionality that we could not have foreseen earlier in the lifecycle
    of the system.
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的系统随时间改变。特别是，我们将始终进行修改以支持在系统生命周期早期无法预见的新功能。
- en: Our code often rests on a number of *invariants*, properties that are currently
    true of our system and that we assume will always be true.
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的代码经常依赖于一些*不变量*，即当前对系统有效的属性，我们假设这些属性将永远保持不变。
- en: 'These invariants are *implicit*: the assumptions themselves are not explicitly
    represented in the source code. That means there’s no easy way to, say, mechanically
    extract them via static analysis.'
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些不变量是*隐式*的：假设本身并未在源代码中明确表示。这意味着没有简单的方法可以通过静态分析轻松地提取它们。
- en: A change can happen that violates an assumed invariant can be arbitrary far
    away from code that depends on the invariant to function properly.
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种改变可能会违反一个被假设的不变量，这可能发生在依赖于该不变量正常运行的代码远离的地方。
- en: What this means is that these kinds of failure modes are *inevitable*. If you’ve
    been in this business long enough, you’ve almost certainly run into an incident
    where one of the contributors was an implicit invariant that was violated by a
    new change. If you’re system lives long enough, it’s going to change. And one
    of those changes is eventually going to invalidate an assumption that somebody
    made long ago, which was a reasonable assumption to make at the time.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着这些失败模式是*不可避免*的。如果你在这个行业待了足够长的时间，你几乎肯定会遇到一个情况，其中一个贡献者是被新变更违反的隐式不变量。如果你的系统存在足够长的时间，它将会改变。并且这些改变最终会使得某个早些时候的合理假设失效。
- en: Implicit invariants are, by definition, impossible to enforce explicitly. They
    are time bombs. And they are everywhere.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 隐式不变量根据定义是无法显式执行的。它们是定时炸弹。而且它们无处不在。
- en: '**Published** March 26, 2024March 26, 2024'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**发布于** 2024年3月26日2024年3月26日'
