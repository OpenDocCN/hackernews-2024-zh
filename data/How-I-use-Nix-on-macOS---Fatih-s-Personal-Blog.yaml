- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-29 13:23:17'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 13:23:17
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: How I use Nix on macOS | Fatih's Personal Blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我如何在 macOS 上使用 Nix | Fatih 的个人博客
- en: 来源：[https://blog.6nok.org/how-i-use-nix-on-macos/](https://blog.6nok.org/how-i-use-nix-on-macos/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.6nok.org/how-i-use-nix-on-macos/](https://blog.6nok.org/how-i-use-nix-on-macos/)
- en: '[](#my-personal-history-with-package-managers)My personal history with package
    managers'
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#my-personal-history-with-package-managers)我的软件包管理经历'
- en: I’ve been using GNU/Linux ^(as my main operating system since as early as 2005\.
    I like a lot of things about it, but one thing I didn’t like was the lack of polish.
    After years of tinkering and crashing, I was looking for something more stable.
    This is why I was excited to switch to Mac when I changed jobs and the company
    ^(could afford a Macbook.))
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从早在 2005 年起，我就一直使用 GNU/Linux ^(作为我的主要操作系统。我喜欢它的很多东西，但有一件事我不喜欢，那就是它的粗糙。经过多年的摸索和崩溃，我开始寻找更加稳定的东西。这就是为什么当我换工作，公司
    ^(能负担得起 Macbook 的时候，我对切换到 Mac 感到兴奋。))
- en: However, I was missing some things from my previous Linux system, chief among
    them being package management. Those familiar with Linux will recognize that most
    distributions come with a central repository of pre-configured packages. macOS
    has the App Store, but it’s limited to graphical user interfaces. Coming from
    Linux I’m accustomed to command-line tools and find them indispensable for my
    work.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我错过了我以前 Linux 系统的一些东西，其中最主要的是软件包管理。熟悉 Linux 的人会知道，大多数发行版都带有一个预配置的中央软件包仓库。macOS
    有 App Store，但它只限于图形用户界面。作为来自 Linux 的用户，我习惯于命令行工具，并发现它们在我的工作中不可或缺。
- en: I quickly found that there’s an unofficial package manager and its accompanying
    package repository for macOS, collectively called [Homebrew](https://brew.sh).
    I used that for a while and it worked okay. My coworkers, on the other hand, were
    using [NixOS](https://nixos.org), and seeing their workflow changed what I expect
    from a package manager fundamentally. Luckily for me, Nix is cross-platform and
    it works well on macOS. Naturally, I gave it a try.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我很快发现了 macOS 的一个非官方软件包管理器及其附带的软件包仓库，总称为 [Homebrew](https://brew.sh)。我使用了一段时间，效果还可以。然而，我的同事们却在使用
    [NixOS](https://nixos.org)，看到他们的工作流程从根本上改变了我对软件包管理器的期望。幸运的是，Nix 是跨平台的，并且在 macOS
    上运行良好。自然地，我也试用了一下。
- en: '[](#whats-nix)What’s Nix'
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#whats-nix)什么是 Nix'
- en: I’ll keep this short so as not to be intimidating, but there are a few things
    that Nix may be referring to.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我会尽量简短，以免令人畏惧，但 Nix 可能指的是一些事情。
- en: '[Nix](https://zero-to-nix.com/concepts/nix-language), the purely functional
    programming language'
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Nix](https://zero-to-nix.com/concepts/nix-language)，纯函数式编程语言'
- en: '[Nix](https://zero-to-nix.com/concepts/package-management), the package manager'
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Nix](https://zero-to-nix.com/concepts/package-management)，这个软件包管理器'
- en: '[Nixpkgs](https://zero-to-nix.com/concepts/nixpkgs), the package repository,
    where package definitions are written in the Nix language'
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Nixpkgs](https://zero-to-nix.com/concepts/nixpkgs)，软件包仓库，包的定义是用 Nix 语言编写的'
- en: '[NixOS](https://zero-to-nix.com/concepts/nixos), the Linux distribution powered
    by all of the above'
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[NixOS](https://zero-to-nix.com/concepts/nixos)，由上述所有支持的 Linux 发行版'
- en: In my case, I started using the Nix package manager with the Nixpkgs repository
    to install stuff on my Mac. I had no intention to replace my operating system
    and didn’t need to write Nix expressions just yet.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我这种情况下，我开始使用 Nix 软件包管理器和 Nixpkgs 仓库在我的 Mac 上安装软件。我没有打算更换操作系统，也不需要立即编写 Nix 表达式。
- en: '[](#package-management-with-nix)Package management with Nix'
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#package-management-with-nix)使用 Nix 进行软件包管理'
- en: Here are some basic package management commands, you can use this as a cheat
    sheet.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些基本的软件包管理命令，你可以把它当作备忘单使用。
- en: 'Search for a package (alternatively, you can use [the web interface](https://search.nixos.org/packages)):'
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索一个软件包（或者，您可以使用 [Web 界面](https://search.nixos.org/packages)）：
- en: '[PRE0]'
  id: totrans-split-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install a package:'
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装一个软件包：
- en: '[PRE1]'
  id: totrans-split-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'List installed packages:'
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出已安装的软件包：
- en: '[PRE2]'
  id: totrans-split-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Upgrade a package:'
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级一个软件包：
- en: '[PRE3]'
  id: totrans-split-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Delete a package:'
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除一个软件包：
- en: '[PRE4]'
  id: totrans-split-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Update the registry (your local package index) to the latest version
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新注册表（您的本地软件包索引）到最新版本
- en: '[PRE5]'
  id: totrans-split-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And some advanced commands, showing the true power of Nix.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 和一些高级命令，展示了 Nix 的真正威力。
- en: This is useful if you can find the specific version of a package in the [Nixpkgs
    GitHub repository](https://github.com/NixOS/nixpkgs), you can copy the commit
    hash and set the registry to that point in time.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以在 [Nixpkgs GitHub 仓库](https://github.com/NixOS/nixpkgs) 中找到特定版本的软件包，您可以复制提交哈希并将注册表设置为那个时间点。
- en: If you want to undo an operation that affects your profile, you can undo your
    latest change, or roll back to a known good version. Nix packages are immutable,
    so upgrades or uninstalls aren’t destructive.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想撤消影响你个人配置文件的操作，你可以撤销最近的更改，或者回滚到一个已知的良好版本。Nix 包是不可变的，因此升级或卸载不会造成破坏。
- en: This is a game-changer, you don’t have to pollute your system to run a one-off
    command, or you can try a package out before committing to installing it. Since
    Nix packages are deterministic, they are built only the first time they are run,
    afterwards, they are brought back from the cache and installs are instantaneous.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这改变了游戏规则，你不必污染系统来运行一次性命令，或者你可以在安装前尝试一个包。由于 Nix 包是确定性的，它们只在第一次运行时构建，之后从缓存中获取并且安装是即时的。
- en: This is another game-changer. You can open a shell with all the tools you need,
    without installing them. One project may have Node 18 while the other has Node
    20\. No more version managers. You can take this even further with tools like
    [devenv](https://devenv.sh).
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个改变游戏规则的地方。你可以打开一个带有你需要的所有工具的 shell，而不必安装它们。一个项目可能使用 Node 18，而另一个使用 Node
    20。不再需要版本管理器。你甚至可以通过像[devenv](https://devenv.sh)这样的工具进一步扩展功能。
- en: 'Clean up your Nix store:'
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理你的 Nix 存储：
- en: '[PRE6]'
  id: totrans-split-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can periodically run this to clean up packages not depended on by anything,
    freeing up disk space. It has a nice feeling.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以定期运行这个命令来清理掉没有任何依赖的包，从而释放磁盘空间。感觉很不错。
- en: '[](#what-you-may-miss-from-homebrew)What you may miss from Homebrew'
  id: totrans-split-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#what-you-may-miss-from-homebrew)你可能会错过的 Homebrew 功能'
- en: The only thing that comes to mind is [Homebrew Cask](https://formulae.brew.sh/cask/).
    There’s no good way to install prepackaged GUI applications with Nix that I could
    find. I’m using the App Store and disk images for that purpose.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我想到的唯一一件事是[Homebrew Cask](https://formulae.brew.sh/cask/)。目前我找不到在 Nix 上安装预打包
    GUI 应用程序的好方法。我目前使用 App Store 和磁盘镜像来解决这个问题。
- en: '[](#how-to-install-nix-on-macos)How to install Nix on macOS'
  id: totrans-split-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#how-to-install-nix-on-macos)如何在 macOS 上安装 Nix'
- en: I can highly recommend the [Determinate Nix Installer](https://github.com/DeterminateSystems/nix-installer).
    You can even use [the graphical installer](https://determinate.systems/posts/graphical-nix-installer/).
    The [official installer](https://nixos.org/download#nix-install-macos) is fine
    too, but it doesn’t survive OS upgrades and it doesn’t generate an installation
    receipt, which makes it harder to uninstall if you need to uninstall it for whatever
    reason. I also find it comforting to have a receipt in general.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈推荐使用[Determinate Nix Installer](https://github.com/DeterminateSystems/nix-installer)。你甚至可以使用[图形安装程序](https://determinate.systems/posts/graphical-nix-installer/)。[官方安装程序](https://nixos.org/download#nix-install-macos)也可以，但它在操作系统升级后无法继续运行，并且不生成安装收据，这使得如果需要卸载它的话更加困难。总体上，我觉得有一个收据会更加令人放心。
- en: '[](#where-to-go-from-there)Where to go from there'
  id: totrans-split-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#where-to-go-from-there)接下来如何进行'
- en: You’re more than welcome to stop here and use the newfound powers Nix bestowed
    upon you. But if you want to go further, you may check out [nix-darwin](https://github.com/LnL7/nix-darwin)
    and [home-manager](https://github.com/nix-community/home-manager), which some
    use to manage their system more declaratively. I find it a bit too complicated
    for my tastes. You can also use Nix to manage dependencies of your projects; I
    find [devenv](https://devenv.sh) useful for that purpose and hope to write more
    about it in the future.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你完全可以在这里停下来，利用 Nix 赋予你的新能力。但如果你想更进一步，可以尝试使用[nix-darwin](https://github.com/LnL7/nix-darwin)和[home-manager](https://github.com/nix-community/home-manager)，有些人用它们来更声明式地管理系统。我觉得这对我来说有点复杂。你也可以使用
    Nix 来管理项目的依赖；我发现[devenv](https://devenv.sh)在这方面很有用，并希望未来能写更多关于它的内容。
- en: '* * *'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'I hope I made a strong case for the benefits of using Nix as a package manager
    for a macOS system. This is only my workflow and others are using Nix for their
    convenience in unique and creative ways. Here are some posts praising Nix that
    I read and can recommend:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望我已经充分展示了使用 Nix 作为 macOS 系统包管理器的好处。这仅仅是我的工作流程，其他人在使用 Nix 时可能以独特和创造性的方式进行方便的使用。这里有一些我阅读过并可以推荐的赞美
    Nix 的文章：
- en: I hope you’ll find Nix as charming and empowering as I do. Let me know if you
    run into any troubles or just want to share how much you love it!
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你会像我一样觉得 Nix 既迷人又强大。如果你遇到任何问题或者只是想分享你有多喜欢它，请告诉我！
- en: '*Thanks to [Aycan](https://twitter.com/aycanirican) and [Taylan](https://twitter.com/taylan_dgn)
    for reviewing a draft of this post.*'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢[Aycan](https://twitter.com/aycanirican)和[Taylan](https://twitter.com/taylan_dgn)审阅本文稿件。*'
