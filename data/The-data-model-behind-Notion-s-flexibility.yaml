- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: '类别: 未分类'
- en: 'date: 2024-05-29 12:38:22'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-05-29 12:38:22'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The data model behind Notion's flexibility
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Notion灵活性背后的数据模型
- en: 来源：[https://www.notion.so/blog/data-model-behind-notion](https://www.notion.so/blog/data-model-behind-notion)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.notion.so/blog/data-model-behind-notion](https://www.notion.so/blog/data-model-behind-notion)
- en: A [generation of pioneers](https://www.notion.so/about) (Doug Engelbart, Ted
    Nelson, Alan Kay, and many more) saw the computer as tool to augment human problem-solving
    by giving people power over information.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[先驱的一代](https://www.notion.so/about)（道格·英格尔巴特、泰德·尼尔森、艾伦·凯等）认为计算机是一种工具，通过赋予人们对信息的控制权，增强人类解决问题的能力。'
- en: Today, that information mostly remains siloed across tools. Take cloud-based
    document editors, where pages are their smallest atomic unit. Information is locked
    inside of pages and files and folders — that’s reminiscent of how things were
    done a century ago.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，信息大多数仍然孤立地分布在各种工具中。以云端文档编辑器为例，页面是它们最小的原子单位。信息被锁在页面、文件和文件夹中 —— 这与一个世纪前的做法很类似。
- en: We built Notion on a framework that allows information to stand on its own,
    free from any constraint or container, instead putting the power in the hands
    of the user at a granular level. That framework is built on blocks.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建立Notion的框架使得信息能够自由地独立存在，摆脱任何约束或容器，而是将权力交到用户手中的细粒度级别。这个框架建立在块之上。
- en: Everything you see in Notion is a block. Text, images, lists, a row in a database,
    even pages themselves — these are all blocks, dynamic units of information that
    can be transformed into other block types or moved freely within Notion. They’re
    the LEGOs we use to build and model information. And when put together, blocks
    are like LEGO sets, creating something much greater than the sum of their parts.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在Notion中，你所见的每一样东西都是一个块。文本、图片、列表、数据库中的一行，甚至页面本身 —— 这些都是块，信息的动态单元，可以转换成其他类型的块或自由移动在Notion内部。它们就像我们用来构建和建模信息的乐高积木一样。而当这些块放在一起时，它们就像乐高积木套装一样，创造出比部件总和更伟大的东西。
- en: This flexibility is at the heart of Notion’s mission. While blocks require our
    engineering team to apply extreme rigor when structuring information, we wanted
    an atomic, graph-like data model to provide our users with the ability to customize
    how their information is moved, organized, and shared.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这种灵活性是Notion使命的核心。虽然块要求我们的工程团队在结构化信息时极其严谨，但我们希望提供一种原子的、类似图形的数据模型，让用户能够自定义他们的信息如何被移动、组织和共享。
- en: The block model makes Notion unique, and it’s the foundation for how Notion
    thinks about bringing to life what pioneers thought computing, as a medium, could
    become.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 块模型使Notion独特，是Notion思考计算作为媒介可能发展成什么的基础。
- en: Much like LEGO blocks in a LEGO set, Notion blocks are the singular pieces that
    represent all units of information inside the Notion editor. The attributes of
    a block determine how that information is rendered and organized.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 就像乐高积木在乐高套装中一样，Notion的块代表了Notion编辑器中所有信息单元。块的属性决定了如何渲染和组织这些信息。
- en: 'Every block has the following attributes:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每个块都有以下属性：
- en: '**ID** — each block is uniquely identifiable by its ID. You can see the ID
    of page blocks at the end of the URL in your browser. We use randomly-generated
    UUIDs (UUID v4) for IDs in Notion.'
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID** — 每个块都通过其ID唯一标识。您可以在浏览器中的URL末尾看到页面块的ID。在Notion中，我们使用随机生成的UUID（UUID v4）作为ID。'
- en: '**Properties** — a data structure containing custom attributes about a specific
    block. The most common property is `title`, which stores the text content of block
    types like paragraphs, lists, and of course, the title of a page. More elaborate
    block types require additional or different properties, like a page block in a
    database with [user-defined properties](https://www.notion.so/notion/Intro-to-databases-fd8cd2d212f74c50954c11086d85997e#6b755095caf3419fb544f2cc996fe926).'
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性** — 包含有关特定块的自定义属性的数据结构。最常见的属性是`标题`，它存储段落、列表等块类型的文本内容，当然还包括页面的标题。更复杂的块类型需要更多或不同的属性，例如数据库中带有[用户定义属性](https://www.notion.so/notion/Intro-to-databases-fd8cd2d212f74c50954c11086d85997e#6b755095caf3419fb544f2cc996fe926)的页面块。'
- en: '**Type** — every block has a type, which defines how a block is displayed,
    and how the block’s properties are interpreted. Notion supports many types of
    blocks, most of which you can see in the “new block” menu that appears when you
    press the `+` button or in the `/` menu:'
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型** — 每个块都有一种类型，定义了块如何显示以及如何解释块的属性。Notion支持许多类型的块，大多数可以在按下`+`按钮或在`/`菜单时出现的“新块”菜单中看到：'
- en: 'In addition to the attributes that describe the block itself, every block has
    attributes that define their relationship with other blocks:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了描述块本身的属性之外，每个块还具有定义它们与其他块关系的属性：
- en: '**Content** — an array (or ordered set) of block IDs representing the content
    inside this block, like nested bullet items in a bulleted list or the text inside
    a toggle.'
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容** — 一个数组（或有序集合）的块ID，代表此块内部的内容，如项目符号列表中的嵌套项目或展开块内部的文本。'
- en: '**Parent** — the block ID of the block’s parent. The parent block is only used
    for permissions.'
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**父级** — 块的父级块ID。父级块仅用于权限。'
- en: Like LEGO blocks, Notion blocks can be combined with other blocks to make something
    much more powerful — like a roadmap that’s been totally customized to your team’s
    process, tracking progress and holding all project information in one place. We
    organize all aspects of blocks to make sure they do the right things and live
    in the right places, enabling users to connect them and further tailor Notion
    to solve their problems.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 像乐高积木一样，Notion块可以与其他块组合在一起，创造出更强大的东西 — 比如一个完全定制为您团队流程的路线图，跟踪进展并将所有项目信息集中在一个地方。我们组织所有块的方面，确保它们执行正确的任务并位于正确的位置，使用户能够连接它们并进一步调整Notion以解决他们的问题。
- en: The block type is what specifies how the block is rendered in Notion’s UI —
    and depending on that type, we interpret the block’s properties and content differently.
    You may be familiar with this if you've used the `Turn into` function in Notion,
    which allows you to turn one block type into another.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 块类型决定了在Notion的UI中如何呈现块 — 根据不同的类型，我们会不同解析块的属性和内容。如果你使用过Notion中的`Turn into`功能，你可能对此很熟悉，它允许你将一个块类型转换为另一个块类型。
- en: Changing the type of a block doesn’t change the block’s properties or content
    — it only changes the type attribute. The information is just rendered differently,
    or even ignored if the property isn’t used by that block type.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 更改块的类型不会改变块的属性或内容 — 它仅改变类型属性。信息只是以不同方式渲染，甚至如果该属性未被该块类型使用，则可能会被忽略。
- en: For example, you can see here that a `To-do list` block is transformed into
    several other block types. We also check that `To-do list` item. The “checked”
    property of the `To-do list` block is ignored when the block is transformed into
    `Heading` and `Callout` block types — but by the time we come full circle to turn
    the block back into a `To-do list` block, it is still checked.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以在这里看到一个`待办事项`块被转换为几种其他块类型。我们还检查了`待办事项`项目。当将块转换回`标题`和`Callout`块类型时，“已选中”属性将被忽略
    — 但当我们最终将块转回`待办事项`块时，它仍然被选中。
- en: Decoupling property storage from block type allows for efficient transformation
    and changes to our rendering logic. But it’s also essential for collaboration,
    because we preserve as much user intention as possible.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将属性存储与块类型解耦，可以有效实现转换和改变我们的渲染逻辑。但对于协作而言同样重要，因为我们尽可能保留用户意图。
- en: Content and the render tree
  id: totrans-split-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内容和渲染树
- en: The flexibility of the block model also allows blocks to be nested inside of
    other blocks, like text inside a toggle or infinitely nested sub-pages inside
    of pages. The content attribute of a block is what stores the array of block IDs
    (or pointers) referencing those nested blocks.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 块模型的灵活性还允许块嵌套在其他块内部，例如在展开块内部的文本或在页面内部无限嵌套的子页面。块的内容属性存储了一个数组，其中包含了指向这些嵌套块的块ID（或指针）。
- en: In the to-do list example, we have a `To-do list` block (“Write a blog post
    about blocks”) with three block IDs in its content array. We think of these IDs
    as “downward pointers,” and call the blocks that they refer to “content” or “render
    children.”
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在待办事项列表示例中，我们有一个`待办事项`块（“撰写关于块的博客文章”），其内容数组中包含三个块ID。我们将这些ID称为“向下指针”，并称它们指向的块为“内容”或“渲染子节点”。
- en: Each block defines the position and order in which its content blocks are rendered.
    We call this hierarchical relationship between blocks and their render children
    the “render tree.” But, it doesn't look like a tree with branches — different
    block types render their children in different ways.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个块定义了其内容块渲染的位置和顺序。我们称之为块与其渲染子节点之间的层次关系为“渲染树”。但它并不像树一样有分支 — 不同的块类型以不同的方式渲染其子节点。
- en: 'Here are a few examples of how the content attribute is rendered by different
    block types:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是几个示例，展示了不同块类型如何渲染内容属性：
- en: '**List blocks** — `Text`, `Bulleted list`, and `To-do list`. List blocks display
    their content indented.'
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列表块** — `Text`、`Bulleted list` 和 `To-do list`。列表块会将它们的内容显示为缩进。'
- en: '**Toggles** — `Toggle list` blocks only display content when expanded. Otherwise,
    they only display the title property.'
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**折叠块** — `Toggle list` 块仅在展开时显示内容。否则，它们只显示标题属性。'
- en: '**Pages** — `Page` blocks display their content in a new page, instead of rendering
    it indented in the current page. To see this content, you would need to click
    into the new page.'
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面** — `Page` 块会将它们的内容显示在新页面中，而不是在当前页面中缩进渲染。要查看此内容，您需要点击进入新页面。'
- en: Structurally, this continues to bring power to your information by allowing
    you to manipulate blocks at the most granular level. It’s a concept that preserves
    user intent of how information should be organized and displayed when working
    with other information.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在结构上，这继续通过允许您在最粒度的级别操作块来增强信息的能力。这是一个保留用户意图的概念，在处理其他信息时，这种意图规定了信息的组织和显示方式。
- en: 'Have you ever been surprised by how indentation works in Notion? In conventional
    word processors, indentation is presentational: it only affects the spacing of
    text from the margins. In Notion, indentation is structural: it’s a reflection
    of the structure of the render tree. In other words, when you indent something
    in Notion, you are manipulating relationships between blocks and their content,
    not just adding a style.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否曾对 Notion 中缩进的工作方式感到惊讶？在传统的文字处理器中，缩进是呈现性的：它只影响文本与边缘的间距。在 Notion 中，缩进是结构性的：它反映了呈现树的结构。换句话说，当您在
    Notion 中缩进时，您正在操纵块及其内容之间的关系，而不仅仅是添加样式。
- en: For example, pressing indent in a content block tries to add that block to the
    content of the nearest sibling block in the content tree.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在内容块中按下缩进键会尝试将该块添加到内容树中最近的同级块的内容中。
- en: Most of the time, indenting works like it would in a traditional document editor
    — the currently-selected block will move into the content array of the preceding
    block, and will be rendered indented within. However, when the preceding block
    isn’t a list (or there’s no previous block at all), indenting will have no effect
    because there is nowhere to move the block into. The visual representation of
    a document in Notion reflects the structure of the information it contains.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，缩进的工作方式与传统文档编辑器中的方式相同——当前选定的块将移动到前面块的内容数组中，并在其中缩进渲染。但是，当前面的块不是列表（或根本没有前面的块）时，缩进将不会生效，因为没有地方可以将块移入其中。Notion
    中文档的视觉表现反映了它包含的信息的结构。
- en: So far, we’ve explained how blocks come together to organize and structure your
    information. It’s also important to understand how this structure protects your
    information so only the right people can read it or change it.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经解释了如何将块组合起来以组织和结构化您的信息。理解这种结构如何保护您的信息，以便只有合适的人可以阅读或更改它，也非常重要。
- en: 'Blocks inherit permissions based on the blocks in which they’re located (which
    are above them in the tree). Consider a page — to read its contents, you must
    be able to read the blocks within that page. However, there are two reasons we
    can’t use the content array to build this permissions system:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 块根据它们所在的块（即在树中位于它们上面的块）继承权限。考虑一个页面 —— 要阅读其内容，您必须能够阅读该页面内的块。然而，有两个原因我们不能使用内容数组来构建这种权限系统：
- en: Initially, we allowed blocks to be referenced by multiple content arrays to
    simplify our collaboration and concurrency model. But because a block can be referenced
    in multiple places, it’s ambiguous which block it would inherit permissions from.
    And ambiguity is unacceptable in a permissions system.
  id: totrans-split-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最初，我们允许多个内容数组引用块，以简化我们的协作和并发模型。但是因为一个块可以在多个地方被引用，所以不清楚它将继承哪个块的权限。在权限系统中，模棱两可是不可接受的。
- en: The second reason is mechanical. To implement permission checks for a block,
    we need to look up the tree, getting that block’s ancestors all the way up to
    the root of the tree (which is the workspace). Trying to find this ancestor path
    by searching through all blocks’ content arrays is inefficient, especially on
    the client.
  id: totrans-split-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个原因是机械性的。为了为一个块实现权限检查，我们需要向上查找树，获取该块的祖先，直到树的根（即工作空间）。试图通过搜索所有块的内容数组来找到这个祖先路径，在客户端上是低效的。
- en: Instead, we use an “upward pointer” — the parent attribute — for the permission
    system. The upward parent pointers, and the downward content pointers mirror each
    other (outside of a few edge cases we’re working to clean up).
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们使用一个“向上指针” —— 父属性 —— 用于权限系统。向上的父指针和向下的内容指针彼此镜像（在我们正在清理的一些边缘情况之外）。
- en: A block’s life starts on the client.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一个块的生命周期始于客户端。
- en: When you take an action in the UI — typing in the editor, dragging blocks around
    a page — these changes are expressed as operations that create or update a single
    record. Our team refers to “records” as any kind of persisted data in Notion,
    like blocks, users, workspaces, etc. And because many actions usually change more
    than one record, operations are batched into transactions that are committed (or
    rejected) by the server as a group.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在用户界面上执行操作 —— 在编辑器中输入文字，或者在页面上拖动块 —— 这些更改会表现为操作，创建或更新单个记录。我们团队把“记录”指的是 Notion
    中任何类型的持久化数据，比如块、用户、工作空间等。因为许多操作通常会更改多个记录，所以操作会被批量处理成事务，由服务器作为一组进行提交（或者拒绝）。
- en: Let’s say you're working inside a page with a friend, both on separate computers
    editing a to-do list. What happens behind the scenes?
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，你和朋友在一个页面上工作，分别使用不同的电脑编辑一个待办列表。在幕后会发生什么呢？
- en: Creating and updating blocks
  id: totrans-split-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建和更新块
- en: You press enter — this creates a new `To-do` block.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你按下回车键 —— 这样就创建了一个新的 `To-do` 块。
- en: 'First, the client defines all the initial attributes of the block, generating
    a new unique ID, setting the appropriate block type (`to_do`), and filling in
    the block’s properties (an empty `title`, and `checked: [["No"]]`). It builds
    operations to represent the creation of a new block with those attributes.'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，客户端定义块的所有初始属性，生成一个新的唯一 ID，设置适当的块类型（`to_do`），并填写块的属性（一个空的 `title`，和 `checked:
    [["No"]]`）。它构建操作来表示使用这些属性创建一个新块。'
- en: 'New blocks are not created in isolation: blocks are also added to their parent’s
    content array, so they’re in the right position in the content tree. So, the client
    also generates an operation to do so. All these individual change operations are
    grouped into a transaction.'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 新块并不是孤立创建的：块也会被添加到其父块的内容数组中，所以它们会在内容树中处于正确的位置。因此，客户端也会生成一个相应的操作。所有这些单独的变更操作都会被组合成一个事务。
- en: Then, the client applies the operations in the transaction to its local state.
    New block objects are created in-memory and existing blocks are modified. On our
    native apps, we cache all records you access locally in an LRU (least recently
    used) cache on top of [SQLite](https://www.notion.so/blog/faster-page-load-navigation)
    or IndexedDB called RecordCache. When you change records on a native app, we also
    update the local copies in RecordCache. The editor re-renders to draw the newly
    created block onto your screen. This happens within a few milliseconds of your
    keypress.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，客户端将事务中的操作应用于其本地状态。新的块对象在内存中被创建，现有的块被修改。在我们的原生应用程序中，我们使用一个称为 RecordCache
    的 LRU（最近最少使用）缓存，在 [SQLite](https://www.notion.so/blog/faster-page-load-navigation)
    或 IndexedDB 上存储所有你访问的记录。当你在原生应用上更改记录时，我们也会更新 RecordCache 中的本地副本。编辑器重新渲染以将新创建的块绘制到屏幕上。这在你按键后的几毫秒内完成。
- en: At the same time, the transaction is saved into TransactionQueue, the part of
    the client responsible for sending all transactions to Notion’s servers so your
    data is persisted and shared with collaborators. TransactionQueue stores transactions
    safely in IndexedDB or SQLite (depending on platform) until they’re persisted
    by the server or rejected.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，事务也会保存到 TransactionQueue 中，这是客户端的一部分，负责将所有事务发送到 Notion 的服务器，以便将数据持久化并与协作者共享。TransactionQueue
    会安全地将事务存储在 IndexedDB 或 SQLite 中（根据平台不同），直到它们被服务器持久化或被拒绝。
- en: Saving changes on the server
  id: totrans-split-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在服务器上保存更改
- en: Here’s how your block ends up saved safely on the server, so your friend can
    see it.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你的块如何安全地保存在服务器上，以便你的朋友可以看到它。
- en: Usually, TransactionQueue sits empty, so the transaction to create the block
    is sent to Notion’s server right away in an API request. The transaction data
    is serialized to JSON and posted to the `/saveTransactions` API endpoint.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，TransactionQueue 是空的，因此创建块的事务会立即发送到 Notion 的服务器中，以 API 请求的形式。事务数据被序列化为 JSON，并发布到
    `/saveTransactions` API 端点。
- en: SaveTransaction’s main job is to get your data into our source-of-truth databases,
    which store all block data, as well as all other kinds of persisted records in
    Notion.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: SaveTransaction 的主要工作是将你的数据存入我们的源数据数据库中，该数据库存储 Notion 中的所有块数据，以及所有其他持久化记录。
- en: 'Once the request reaches the Notion API server:'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦请求到达 Notion API 服务器：
- en: We load all the blocks and parents involved in the transaction. This gives us
    a “before” picture in memory. For this example, remember that we’re creating a
    block. So we need to, at least, load the page block so that we can insert the
    newly created block’s ID into the page’s content array.
  id: totrans-split-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们加载涉及交易的所有区块和父级。这为我们提供了内存中的“之前”图片。例如，记住我们正在创建一个区块的示例。因此，我们至少需要加载页面区块，以便我们可以将新创建的区块
    ID 插入页面内容数组中。
- en: We duplicate the “before” data that had just been loaded in memory. Then, we
    apply the operations in the transaction to the new copy to create the “after”
    data.
  id: totrans-split-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们复制了刚刚在内存中加载的“之前”数据。然后，我们将交易中的操作应用于新副本，创建了“之后”数据。
- en: Then we use both “before” and “after” data to validate the changes for permissions
    and data coherency. If everything checks out (it usually does), all created or
    changed records are committed to the database — meaning your block has now officially
    been created.
  id: totrans-split-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用“之前”和“之后”的数据来验证权限和数据的一致性变更。如果一切正常（通常情况下都是这样），所有创建或更改的记录都将提交到数据库中 —— 这意味着您的区块现在正式创建完成。
- en: At this point, there’s a “success” HTTP response to the original API request
    that had been sent by your client. This confirms your client knows the transaction
    was saved successfully and that it can move onto saving the next transaction in
    the TransactionQueue.
  id: totrans-split-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，原始 API 请求接收到了“成功”HTTP 响应。这证实了您的客户端知道交易已成功保存，并且可以继续保存 TransactionQueue 中的下一个交易。
- en: In the background, we schedule additional work depending on the kind of change
    made for your transaction. For example, we schedule [version history](https://www.notion.so/Version-history-eec3af1f5bc64ba0a712ee5794e12a9c)
    snapshots and indexing block text for [Quick Find](https://www.notion.so/Searching-with-Quick-Find-af945b6e69b64437afba2d143e4b546f).
    Importantly, we also notify MessageStore — Notion's real-time updates service
    — about the changes you made.
  id: totrans-split-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在后台，我们根据您的交易所做的更改类型安排额外的工作。例如，我们为[版本历史](https://www.notion.so/Version-history-eec3af1f5bc64ba0a712ee5794e12a9c)快照和索引区块文本进行安排[Quick
    Find](https://www.notion.so/Searching-with-Quick-Find-af945b6e69b64437afba2d143e4b546f)。重要的是，我们还通知
    MessageStore —— Notion 的实时更新服务 —— 您所做的更改。
- en: We’ll cover how the data gets to your friend’s screen in the next section.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍数据如何传输到您朋友的屏幕上。
- en: You pressed enter, created a new block, and now your block shows up on your
    friend’s screen. How does that work?
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您按下回车键，创建了一个新的区块，现在您的朋友的屏幕上显示出了您的区块。这是如何运作的呢？
- en: Every client has a long-lived WebSocket connection to MessageStore, Notion’s
    real-time updates service. When the Notion client renders a block (or page, or
    any other kind of record), the client subscribes to changes of that record from
    MessageStore using this WebSocket connection. When your friend opens the same
    page as you, they’re subscribed to changes of all those blocks.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 每个客户端都与 MessageStore 持久的 WebSocket 连接连接，这是 Notion 的实时更新服务。当 Notion 客户端渲染一个区块（或页面或任何其他类型的记录）时，客户端使用此
    WebSocket 连接订阅来自 MessageStore 的该记录的更改。当您的朋友打开与您相同的页面时，他们将订阅所有这些区块的更改。
- en: After your changes made it through the saveTransactions process, the API notified
    MessageStore of new recorded versions. MessageStore finds client connections subscribed
    to those changing records, and passes on the new version to them through their
    WebSocket connection.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的更改通过保存交易流程后，API 通知 MessageStore 记录了新的版本。 MessageStore 找到已订阅这些变更记录的客户端连接，并通过它们的
    WebSocket 连接将新版本传递给它们。
- en: When your friend’s client receives version update notifications from MessageStore,
    it verifies that version of the block in its local cache. Because the versions
    from the notification and the local block are different, it sends a `syncRecordValues`
    API request to the sever with the list of outdated client records. The server
    responds with the new record data. The client uses this response data to update
    the local cache with the new version of the records, then re-renders the UI to
    display the latest block data.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当您朋友的客户端从 MessageStore 接收到版本更新通知时，它会验证其本地缓存中该区块的版本。由于通知中的版本和本地区块的版本不同，它会向服务器发送一个`syncRecordValues`API
    请求，带有过时客户端记录的列表。服务器响应新的记录数据。客户端使用此响应数据更新本地缓存，显示最新的区块数据。
- en: Your friend takes a nap, but you continue working on the to-do list. To let
    them know you’ve made some changes to the list, you send them a link to the Notion
    page you’ve both been working in.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您的朋友打了个盹，但您继续处理待办事项清单。为了让他们知道您已对清单进行了一些更改，您向他们发送了一个链接到您共同工作的 Notion 页面。
- en: In the first few milliseconds after your friend wakes up and clicks the link,
    we first try to load that page using only local data. On web, this means block
    data that’s in-memory. On our native apps, we try loading blocks that aren’t in
    memory from the RecordCache persisted storage. But if we need block data that’s
    missing, we stop and request the page data from the API instead.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的朋友醒来并点击链接的前几毫秒内，我们首先尝试仅使用本地数据加载页面。在 Web 上，这意味着内存中的块数据。在我们的原生应用上，我们尝试从 RecordCache
    持久化存储中加载不在内存中的块。但是如果需要的块数据缺失，我们会停止操作，并从 API 请求页面数据。
- en: The API method for loading the data for a page is called `loadPageChunk` — it
    descends from a starting point (likely the block ID of a page block) down the
    content tree, and returns the blocks in the content tree plus any dependent records
    needed to properly render those blocks. We use several layers of caching for `loadPageChunk`,
    but in the worst case, this API might need many trips to the database as it recursively
    crawls down the tree to chase down blocks and their record dependencies.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 用于加载页面数据的 API 方法称为 `loadPageChunk` — 它从一个起始点（通常是页面块的块 ID）开始向下遍历内容树，并返回内容树中的块以及正确渲染这些块所需的任何相关记录。我们为
    `loadPageChunk` 使用了几层缓存，但在最坏的情况下，这个 API 可能需要多次访问数据库，因为它递归地向下遍历树，追踪块及其记录依赖关系。
- en: All data loaded by `loadPageChunk` is put into memory (and saved in the RecordCache
    if you’re using the app). Once the data is in memory, we lay out the page and
    render it using React.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由 `loadPageChunk` 载入的所有数据都存入内存（如果你在使用该应用，还会保存在 RecordCache 中）。数据一旦进入内存，我们会使用
    React 对页面进行布局和渲染。
- en: Building blocks for what’s next
  id: totrans-split-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为未来构建基础模块
- en: Blocks are the most foundational component of Notion’s mission to empower any
    person or business to tailor software to their problems. This architecture sets
    a path for Notion’s future — new block types, automations ([like the API](http://developers.notion.so)),
    workflows, and functionality that enables you to create even more powerful tools.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 块是 Notion 使任何人或企业能够根据自己的问题定制软件的最基础组件。这种架构为 Notion 的未来铺平了道路 — 新的块类型、自动化（[比如 API](http://developers.notion.so)）、工作流以及能够帮助你创建更强大工具的功能。
- en: Still, we know there’s a lot of room to grow Notion the product, improving things
    like efficiency, performance, offline, and block-specific quirks in the editor.
    What you see when you’re using Notion is only the part of the iceberg that’s above
    the surface. After reading this, we hope you understand a bit of what’s underneath.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们知道 Notion 这款产品还有很大的提升空间，比如提高效率、性能、离线功能以及编辑器中特定块的怪癖。当你使用 Notion 时，看到的只是浮在水面上的冰山一角。希望通过阅读本文，你能稍微了解底层的一些内容。
- en: We’re [looking for help](https://www.notion.so/careers) to build the future
    of Notion. Is that you?
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在[寻找帮助](https://www.notion.so/careers)来建设 Notion 的未来。你感兴趣吗？
