- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:52:33'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:52:33
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Computer: Interview with Ken Thompson, May 1999'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算机：与Ken Thompson的访谈，1999年5月
- en: 来源：[https://www.cs.princeton.edu/courses/archive/spring03/cs333/thompson](https://www.cs.princeton.edu/courses/archive/spring03/cs333/thompson)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.cs.princeton.edu/courses/archive/spring03/cs333/thompson](https://www.cs.princeton.edu/courses/archive/spring03/cs333/thompson)
- en: '[Back to the *Computer* Page](/computer/)'
  id: totrans-split-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[回到*计算机*页面](/computer/)'
- en: '**Unix and Beyond: An Interview with Ken Thompson**'
  id: totrans-split-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Unix与更多：与Ken Thompson的一次访谈**'
- en: '*Daniel Cooke*'
  id: totrans-split-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Daniel Cooke*'
- en: Texas Tech University
  id: totrans-split-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 德克萨斯理工大学
- en: '*Joseph Urban* Arizona State University'
  id: totrans-split-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Joseph Urban* 亚利桑那州立大学'
- en: '*Scott Hamilton* *Computer*'
  id: totrans-split-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Scott Hamilton* *计算机*'
- en: '***Computer*** **recently visited Ken Thompson at Lucent''s Bell Labs to learn
    about Thompson''s early work on Unix and his more recent work in distributed computing.**'
  id: totrans-split-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机*** **最近访问了贝尔实验室的Ken Thompson，了解他在Unix早期工作和分布式计算的最新成果。**'
- en: 'Ken Thompson needs no introduction: the co-creator of the Unix operating system
    as well as the Plan 9 and Inferno distributed operating systems; creator, along
    with Joseph Condon, of Belle, a world champion chess computer; 1998 US National
    Medal of Technology winner, along with Dennis Ritchie, for their role in developing
    the Unix system and C.'
  id: totrans-split-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Ken Thompson无需介绍：Unix操作系统的共同创造者，以及Plan 9和Inferno分布式操作系统的创造者；与Joseph Condon合作创造了世界冠军国际象棋计算机Belle；1998年与Dennis
    Ritchie共同因其在Unix系统和C语言开发中的贡献而获得美国国家技术奖章。
- en: On the occasion of the presentation of the Computer Society's and Hitachi's
    inaugural Tsutomu Kanai Award for distributed computing, *Computer* visited recipient
    Ken Thompson at Lucent's Bell Labs. We were interested in learning about Thompson's
    early work on Unix and his more recent work in distributed computing. We were
    especially interested in learning about the creative process within Bell Labs
    and his sense of where computer science was heading.
  id: totrans-split-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由于计算机学会和日立公司首届金井勉奖的颁奖典礼，*计算机*拜访了获奖者Ken Thompson先生，地点为贝尔实验室。我们对了解Thompson先生在Unix早期工作和分布式计算方面的成就很感兴趣。我们特别关注贝尔实验室内的创造过程及他对计算机科学发展方向的看法。
- en: '**CREATIVITY AND SOFTWARE DEVELOPMENT**'
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**创造力与软件开发**'
- en: '***Computer.*** *Your nominators and endorsers for the Kanai Award consistently
    characterized your work as simple yet powerful. How do you discover such powerful
    abstractions?*'
  id: totrans-split-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机.*** *您被提名和支持者一致认为您的工作简单而强大。您如何发现这样强大的抽象？*'
- en: '**Thompson.** It is the way I think. I am a very bottom-up thinker. If you
    give me the right kind of Tinker Toys, I can imagine the building. I can sit there
    and see primitives and recognize their power to build structures a half mile high,
    if only I had just one more to make it functionally complete. I can see those
    kinds of things.'
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Thompson.** 这就是我思考问题的方式。我是一个非常自下而上的思考者。如果你给我合适的Tinker Toys，我可以想象出那座大楼。我可以坐在那里看到基本部件，并认识到它们的力量，可以建造出半英里高的结构，只要再给我一个部件，使它完整。我能看到那些东西。'
- en: The converse is true, too, I think. I *can't* from the building imagine the
    Tinker Toys. When I see a top-down description of a system or language that has
    infinite libraries described by layers and layers, all I just see is a morass.
    I can't get a feel for it. I can't understand how the pieces fit; I can't understand
    something presented to me that's very complex. Maybe I do what I do because if
    I built anything more complicated, I couldn't understand it. I really must break
    it down into little pieces.
  id: totrans-split-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 同样，反过来也是对的，我认为。我*无法*从那座大楼中想象出Tinker Toys。当我看到一个系统或语言的自上而下的描述，有无数层的无限库时，我只是看到了一片混乱。我无法感受到它。我无法理解那些片段如何拼凑在一起；我无法理解被呈现给我的复杂东西。也许我之所以做我现在的工作，是因为如果我再建造任何更复杂的东西，我就无法理解它。我真的必须把它分解成小片段来理解。
- en: '***Computer.*** *In your group you probably have both the bottom-up thinker
    and the top-down thinker. How do you interact with both?*'
  id: totrans-split-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机.*** *在你的团队中，你可能既有自下而上的思考者，也有自上而下的思考者。你如何与两者互动？*'
- en: '**Thompson.** I think there''s room for both, but it makes for some interesting
    conversations, where two people think they are talking to each other but they''re
    not. They just miss, like two ships in the night, except that they are using words,
    and the words mean different things to both sides. I don''t know how to answer
    that really. It takes both; it takes all kinds.'
  id: totrans-split-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Thompson.** 我认为两者都有其空间，但这确实引发了一些有趣的对话，两个人认为他们在彼此交流，但实际上并没有。他们就像两艘在夜晚擦肩而过的船，只是他们在使用词汇，而这些词汇对双方来说意义不同。我真的不知道如何回答这个问题。事情需要多样性；需要各种各样的人才。'
- en: Occasionallymaybe once every five yearsI will read a paper and I'll say, "Boy,
    this person just doesn't think like normal people. This person thinks at an orthogonal
    angle." When I see people like that, my impulse is to try to meet them, read their
    work, hire them. It's always good to take an orthogonal view of something. It
    develops ideas.
  id: totrans-split-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有时——也许每五年一次——我会读到一篇论文，我会说：“哇，这个人就是不像正常人思考。这个人是以正交角度思考的。”当我看到这样的人时，我会有冲动想要见见他们，读读他们的作品，雇用他们。以正交视角看待某事总是很好的。这促进了思想的发展。
- en: 'I think that computer science in its middle age has become incestuous: people
    are trained by people who think one way. As a result, these so-called orthogonal
    thinkers are becoming rarer and rarer. Of course, many of their ideas have become
    mainstreamlike message passing, which I thought was something interesting when
    I first saw it. But occasionally you still see some very strange stuff.'
  id: totrans-split-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 计算机科学在其中年时期已经变得闭门造车：人们接受的训练方式大多相同。因此，那些所谓的正交思想者越来越少见了。当然，其中许多想法已经变得主流，比如消息传递，我刚开始看到时觉得非常有趣。但偶尔你仍然会看到一些非常奇怪的东西。
- en: '**SOFTWARE DEVELPOMENT PARADIGMS**'
  id: totrans-split-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**软件开发范式**'
- en: '***Computer.*** *What makes Plan 9 and the Inferno network operating system
    very striking is the consistent and aggressive use of a small number of abstractions.
    It seems clear that there''s a coherent vision and team assembled here working
    on these projects. Could you give us further insight into how the process works?*'
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机。*** *Plan 9 和 Inferno 网络操作系统之所以非常引人注目，是因为它们在少数几个抽象上保持了一致且积极的使用。看起来，这里组成了一个有着明确愿景并且团队紧密合作的团队。您能否进一步深入了解其工作过程？*'
- en: '**Thompson.** The aggressive use of a small number of abstractions is, I think,
    the direct result of a very small number of people who interact closely during
    the implementation. It''s not a committee where everyone is trying to introduce
    their favorite thing. Essentially, if you have a technical argument or question,
    you have to sway two or three other people who are very savvy. They know what
    is going on, and you can''t put anything over on them.'
  id: totrans-split-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森。** 我认为，对少数几个抽象的积极使用，是在实施过程中几个密切互动的人的直接结果。这不是一个每个人都试图引入自己喜欢的东西的委员会。基本上，如果你有一个技术论点或问题，你必须说服另外两三个非常精明的人。他们知道发生了什么，你不能欺骗他们。'
- en: As for the process, it's hard to describe. It's chaotic, but somehow something
    comes out of it. There is a structure that comes out of it. I am a member of the
    Computing Sciences Research Center, which consists of a bunch of individualsno
    teams, no leaders. It's the old Bell Labs model of research; these people just
    interact every day.
  id: totrans-split-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 至于过程，很难描述。它是混乱的，但不知何故总会有一些结果产生。有一个结构产生了。我是计算科学研究中心的一员，这里是一群个体——没有团队，没有领导。这是研究的老贝尔实验室模式；这些人每天都在互动。
- en: At different times you have nothing to do. You've stopped working for some reasonyou
    finished a project or got tired of itand you sit around and look for something
    to do. You latch on to somebody else, almost like water molecules interacting.
  id: totrans-split-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不同的时间，你可能无事可做。你因某些原因停止工作——可能是完成了一个项目或对其厌倦——然后你坐下来寻找事情做。你紧抓住别人，几乎像水分子相互作用一样。
- en: You get together and say, "I have an idea for a language," and somebody gets
    interested. Somebody else asks how we put networking in it. Well, so-and-so has
    a model for networking, and somebody else comes in. So you have these teams that
    rarely get above five or six, and usually hover around two or three. They each
    bring in whatever they did previously.
  id: totrans-split-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你们聚在一起说：“我有一个语言的想法”，有人对此感兴趣。其他人问我们如何在其中加入网络。嗯，某某有一个网络模型，然后另一个人参与其中。因此，你们有这些团队，很少超过五六个人，通常在两三人左右。他们每个人都带入他们之前做过的东西。
- en: So that's the way it works. There are no projects per se in the Computing Sciences
    Research Center. There are projects near it of various sorts that will draw on
    our research as a resource. But they have to deal with our style. If people get
    stuck, they come to us but usually don't want to deal with the management stylewhich
    means nonethat comes along with it.
  id: totrans-split-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 就是这样工作的。在计算科学研究中心本身没有项目。周围有各种类型的项目，它们会利用我们的研究成果。但它们必须适应我们的风格。如果人们遇到困难，他们会来找我们，但通常不想处理伴随其而来的管理风格——这意味着没有管理。
- en: '***Computer.*** *You mentioned technical arguments and how you build your case.
    How are technical arguments resolved?*'
  id: totrans-split-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机。*** *你提到了技术论点及你如何构建你的案例。技术论点是如何解决的？*'
- en: '**Thompson.** When you know something is systemically wrong despite all the
    parts being correct, you say there has to be something better. You argue back
    and forth. You may sway or not sway, but mostly what you do is come up with an
    alternative. Try it. Many of the arguments end up that way.'
  id: totrans-split-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**唐森德**。当你知道某些东西系统上存在问题，尽管各部分都正确无误，你就认为需要有更好的方法。你会进行辩论，有时成功，有时失败。大部分人所做的，是提出一种替代方案，并尝试实践，很多争论最终方式就是如此。'
- en: You say, "I am right, the hell with you." And, of course the person who has
    been "to helled with" wants to prove his point, and so he goes off and does it.
    That's ultimately the way you prove a point. So that is the way most of the arguments
    are donesimply by trying them.
  id: totrans-split-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你会说，'我的想法是对的，和你没关系。' 当然，那些被'忽视'的人会努力证明自己的观点，因此他会去尝试实践。这就是证明观点的一种方式。因此，大部分争论是通过尝试解决的。
- en: I don't think there are many people up in research who have strong ideas about
    things that they haven't really had experience with. They won't argue about the
    theory of something that's never been done. Instead, they'll say, "Let's try this."
    Also, there's not that much ego up there either, so if it's a failure you come
    back and say, "Do you have another idea? That one didn't work." I have certainly
    generated as many bad ideas as I have good ones.
  id: totrans-split-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我认为，在研究中谈论真正有想法的人并不一定会有任何实际经验，因此他们不会在从未实施过的事情上争论理论。相反，他们会说'让我们试一试吧。'此外，该领域中的自负感较少，因此如果失败了，他们会回来并说'你有别的想法吗？这个不行。'
    我当然产生了比好想法更多的坏想法。
- en: '***Computer.*** *What advice do you have for developers who are out there now
    to improve their designs so that they could be viewed as producing simple yet
    powerful systems?*'
  id: totrans-split-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算器**。你有何建议提供给正努力改进设计的开发人员，以便他们能够创造出既简单又强大的系统？*'
- en: '**Thompson.** That is very hard; that is a very difficult question. There are
    very few people in my position who can really do a design and implement it. Most
    people are a smaller peg in a big organization where the design is done, or they
    do the design but can''t implement it, or they don''t understand the entire system.
    They are just part of a design team. There are very few people I could give advice
    to.'
  id: totrans-split-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**唐森德**。这非常困难；这是一个非常困难的问题。能在我这种位置真正设计并实施的东西的人很少。大多数人处于大型组织中的小角色，设计已经完成，或者他们只负责设计但无法实现，或者他们不理解整个系统。他们是设计团队的一部分。我可以给些建议的人很少。'
- en: 'It''s hard to give advice in a product kind of world when what I do, I guess,
    is some form of computer Darwinism: Try it, and if it doesn''t work throw it out
    and do it again. You just can''t do that in a product-development environment.'
  id: totrans-split-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在产品开发的世界里提供建议很难，我做的，可以说是某种形式的计算机德瓦林主义：尝试，如果行不通就放弃，再试一次。而在产品开发环境中无法这样做。
- en: 'Plus I am not sure there are real principles involved as opposed to serendipity:
    You happened to require this as a function before someone else saw the need for
    it. The way you happen upon what you think about is just very lucky. My advice
    to you is just be lucky. Go out there and buy low and sell high, and everything
    will be fine.'
  id: totrans-split-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 加上我认为，可能没有真正的原则在起作用，更多的是偶然：你恰好在别人意识到需要它之前，要求某种功能。你遇到的思考方法只是你运气好。我给你的建议是，只是去碰运气。去低价买入，高价卖出，一切都会顺利。
- en: '**UNIX**'
  id: totrans-split-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**UNIX**'
- en: '***Computer****. In an earlier interview you were asked what you might do differently
    if you had to do Unix over again, and you said that you would add an "e" to the*
    creat *system call. Seriously, in hindsight, can you give us an assessment of
    the problems you overcame, the elegant solutions, and the things you would have
    done differently.*'
  id: totrans-split-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算器***。在早期的访谈中，你被问及如果再次进行Unix开发，你会有何不同之处，你回答了在creat系统调用中添加一个“e”字母。严肃地说，在反思过后，你能对我们遇到的问题予以评估，其中巧妙的解决方案以及你希望做得不同的事情给出评价吗？'
- en: '**Thompson**. I think the major good idea in Unix was its clean and simple
    interface: open, close, read, and write. This enabled the implementation of the
    shell as well as Unix''s portability. In earlier systems, I/O had different entry
    points, but with Unix you could abstract them away: You open a file, and if the
    file happens to be a tape, you could write to it. Pipes allowed tools and filters
    that could accommodate classical monster programs like sort.'
  id: totrans-split-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**唐森德**。我认为Unix的主要好点子在于其干净简洁的界面：打开、关闭、读取和写入。这使得终端的实现以及Unix的可移植性成为可能。在早期系统中，输入输出有不同的入口点，但Unix则能将这些抽象掉：你打开一个文件，如果是磁带文件，你就能将其写入。管道允许工具和过滤器适应诸如排序这样的经典大型程序。'
- en: Probably the glaring error in Unix was that it underevaluated the concept of
    remoteness. The open-close-read-write interface should have been encapsulated
    together as something for remoteness; something that brought a group of interfaces
    together as a single thinga remote file system as opposed to a local file system.
  id: totrans-split-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Unix 的一个显眼错误可能是它低估了远程概念。打开-关闭-读-写接口应该被封装在一起成为一个远程事物；将一组接口作为一个单一事物，远程文件系统与本地文件系统相对立。
- en: Unix lacked that concept; there was just one group of open-close-read-write
    interfaces. It was a glaring omission and was the reason that some of the awful
    things came into Unix like ptrace and some of the system calls. Every time I looked
    at later versions of Unix there were 15 new system calls, which tells you something's
    wrong. I just didn't see it at the time. This was fixed in a fairly nice way in
    Plan 9\.
  id: totrans-split-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Unix缺乏这个概念；只有一个组打开-关闭-读-写接口，这是一个显眼的遗漏，也是一些糟糕的东西进入Unix的原因，比如ptrace和一些系统调用。每次我看Unix的更新版本都有15个新的系统调用，这说明有些地方出了问题。我当时就是没有看到。这在Plan
    9中被一个非常好的方法修复了。
- en: '***Computer**. Going back a little bit further, what were the good and not
    so good aspects of Multics that were the major drivers in the Unix design rationale?*'
  id: totrans-split-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机**。再退后一点，Multics在Unix设计理念中是好的还是不太好的方面是什么？*'
- en: '**Thompson**. The one thing I stole was the hierarchical file system because
    it was a really good ideathe difference being that Multics was a virtual memory
    system and these "files" weren''t files but naming conventions for segments. After
    you walk one of these hierarchical name spaces, which were tacked onto the side
    and weren''t really part of the system, you touch it and it would be part of your
    address space and then you use machine instructions to store the data in that
    segment. I just plain lifted this.'
  id: totrans-split-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森**。我偷的唯一一件事就是分层文件系统，因为这是一个非常好的主意——不同的地方是，Multics是一个虚拟内存系统，这些“文件”不是文件，而是段的命名约定。当你遍历一个这样的分层命名空间时，它们被附加到侧面，实际上并不是系统的一部分，你触碰到它，并且它会成为你的地址空间的一部分，然后你使用机器指令将数据存储在这个段中。我就是直接拿了这个。'
- en: By the same token, Multics was a virtual memory system with page faults, and
    it didn't differentiate between data and programs. You'd jump to a segment as
    it was faulted in, whether it was faulted in as data or instructions. There were
    no files to read or writenothing you could remotewhich I thought was a bad idea.
    This huge virtual memory space was the unifying concept behind Multicsand it had
    to be tried in an era when everyone was looking for the grand unification theory
    of programmingbut I thought it was a big mistake.
  id: totrans-split-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 同样，Multics是一个带有页面故障的虚拟内存系统，它不区分数据和程序。当段被故障引入时，你会跳转到这个段，不管它是作为数据还是指令引入的。没有文件可供读取或写入，没有远程访问的东西，我认为这是一个坏主意。这个巨大的虚拟内存空间是Multics背后的统一概念，并且在所有人都在寻求编程的大一统理论的时代，这个理论一定需要被验证，但我认为这是一个严重的错误。
- en: I wanted to separate data from programs, because data and instructions are very
    different. When you're reading a file, you're almost always certain that the data
    will be read sequentially, and you're not surprised when you fault *a* and read
    *a* + 1\. Moreover, it's much harder to excise instructions from caches than to
    excise data. So I added the exec system call that says "invoke this thing as a
    program," whereas in Multics you would fault in an instruction and jump to it.
  id: totrans-split-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我想把数据与程序分开，因为数据和指令是非常不同的。当你读取一个文件时，你几乎总是确定数据将按顺序读取，当发生故障并读取*a* + 1时，你并不会感到惊讶。此外，从缓存中删除指令要比删除数据难得多。所以我加入了exec系统调用，它表示“将这个东西作为程序调用”，而在Multics中你会发生故障并跳转到这里。
- en: '**DEVELOPMENT HISTORY**'
  id: totrans-split-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**发展历史**'
- en: '***Computer****. What about the development history of Unix?*'
  id: totrans-split-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机***。Unix的发展历史如何？'
- en: '**Thompson**. The early versions were essentially me experimenting with some
    Multics concepts on a PDP-7 after that project disbanded, which is about as small
    a team as you can imagine. I then picked up a couple of users, Doug McIlroy and
    Dennis Ritchie, who were interested in languages. Their criticism, which was very
    expert and very harsh, led to a couple of rewrites in PDP-7 assembly.'
  id: totrans-split-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森**。早期版本基本上是我在PDP-7上尝试Multics概念的实验，在那个项目结束后，可以说已经没有比现在的团队更小的了。之后我加入了一些用户，Doug
    McIlroy和Dennis Ritchie，他们对语言很感兴趣。他们的批评非常专业和严厉，导致我在PDP-7汇编上进行了几次重写。'
- en: At one point, I took BCPL from Martin Richards at MIT and converted it into
    what I thought was a fairly straight translation, but it turned out to be a different
    language so I called it B, and then Dennis took it and added types and called
    it C.
  id: totrans-split-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有一次，我从MIT的Martin Richards那里拿到了BCPL，并将其转换为我认为是一个相当直接的翻译，但结果证明它是一种不同的语言，所以我称之为B，然后Dennis拿到它并添加了类型，并称之为C。
- en: We bought a PDP11one of the very firstand I rewrote Unix in PDP-11 assembly
    and got it running. That was exported to several internal Bell telephone applications,
    to gather trouble reports and monitor various things like rerouted cables. Those
    applications, independent of what we were doing, started a political pressure
    to get support for the operating system; they demanded service. So Bell Labs started
    the Unix Support Group, whose purpose was to serve as the interface to us, to
    take our modifications and interface them with the applications in the field,
    which demanded a more stable environment. They didn't like surprises. This grew
    over time into the commercial version from AT&T and the more autonomous version
    from USL.
  id: totrans-split-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们买了一台PDP11，那是最早的几台之一，我用PDP-11汇编语言重写了Unix并让它运行起来。这被导出到几个贝尔电话内部应用程序中，用于收集故障报告并监视各种事物，如重定向电缆。这些应用程序独立于我们正在做的事情，开始对操作系统施加政治压力；它们要求服务。因此，贝尔实验室成立了Unix支持组，其目的是作为我们与现场应用程序接口的接口，接受我们的修改并与现场应用程序进行接口，这要求一个更稳定的环境。他们不喜欢惊喜。随着时间的推移，这逐渐发展成了来自AT&T的商业版本和来自USL的更自主版本。
- en: Independently, we went on and tried to rewrite Unix in this higher-level language
    that was evolving simultaneously. It's hard to say who was pushing whomwhether
    Unix was pushing C or C was pushing Unix. These rewrites failed twice in the space
    of six months, I believe, because of problems with the language. There would be
    a major change in the language and we'd rewrite Unix.
  id: totrans-split-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 独立地，我们尝试使用同时发展的更高级语言重写Unix。很难说是Unix推动了C还是C推动了Unix。这些重写在我认为的六个月内失败了两次，因为语言的问题。语言发生了重大变化，我们就重写Unix。
- en: The third rewriteI took the OS proper, the kernel, and Dennis took the block
    I/O, the diskwas successful; it turned into version 5 in the labs and version
    6 that got out to universities. Then there was a version 7 that I rewrote for
    Johnson and Ritchie to port to an Interdata 832; I rewrote the OS with almost
    all its language intact but reapportioned the portable and nonportable parts so
    that the next port would be better.
  id: totrans-split-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 第三次重写——我负责操作系统的核心部分，内核，Dennis负责块I/O，磁盘——成功了；它变成了实验室中的第5版和到达大学的第6版。然后有一个第7版，我为Johnson和Ritchie重新编写，以便在Interdata
    832上进行移植；我重写了几乎所有语言但重新分配了便携和非便携部分，以便下一个移植会更好。
- en: Around version 6, ARPA [Advanced Research Projects Agency] adopted it as a standard
    language for the Arpanet community. Berkeley was contracted to fix the Arpanet
    interfacewhich started at the University of Illinois and was extended by Berkeley's
    getHostbyName interfaceand to add virtual memory to Bell Labs' port to the VAX.
  id: totrans-split-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大约在第6版时，ARPA（高级研究计划署）将其作为Arpanet社区的标准语言采纳。伯克利被承包修复Arpanet接口——它始于伊利诺伊大学，并由伯克利的getHostbyName接口扩展——并为贝尔实验室的VAX移植添加虚拟内存。
- en: There's a nice history of Unix written by Dennis that's available on his home
    page [*ed*."[The Evolution of the Unix Time-Sharing System](http://cm.bell-labs.com/cm/cs/who/dmr/hist.html),"].
  id: totrans-split-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在[Dennis的主页](http://cm.bell-labs.com/cm/cs/who/dmr/hist.html)上有一篇有关Unix的精彩历史[*ed*."Unix时分系统的演变"]。
- en: '***Computer**: What accounted for the success of Unix ultimately?*'
  id: totrans-split-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机***：Unix最终成功的原因是什么？'
- en: '**Thompson**: I mostly view it as serendipitous. It was a massive change in
    the way people used computers, from mainframes to minis; we crossed a monetary
    threshold where computers became cheaper. People used them in smaller groups,
    and it was the beginning of the demise of the monster comp center, where the bureaucracy
    hidden behind the guise of a multimillion dollar machine would dictate the way
    computing ran. People rejected the idea of accepting the OS from the manufacturer
    and these machines would never talk to anything but the manufacturer''s machine.'
  id: totrans-split-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森**：我大多认为这是意外的。这是人们使用计算机方式的重大变化，从大型机到小型机；我们跨越了一个货币门槛，使得计算机变得更便宜。人们开始在较小的群体中使用它们，这标志着巨型计算中心的衰落开始了，那里隐藏着一种伪装成千万美元机器背后的官僚主义，它会决定计算运行的方式。人们拒绝接受来自制造商的操作系统的想法，而这些机器永远不会与除制造商的机器外的任何东西交流。'
- en: I view the fact that we were caught up in thatwhere we were glommed onto as
    the only solution to maintaining open computingas the main driving force for the
    revolution in the way computers were used at the time.
  id: totrans-split-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我认为我们被卷入其中，被视为保持开放计算唯一解决方案的事实是推动当时计算机使用方式革命的主要驱动力。
- en: There were other smaller things. Unix was a very small, understandable OS, so
    people could change it at their will. It would run itselfyou could type "go" and
    in a few minutes it would recompile itself. You had total control over the whole
    system. So it was very beneficial to a lot of people, especially at universities,
    because it was very hard to teach computing from an IBM end-user point of view.
    Unix was small, and you could go through it line by line and understand exactly
    how it worked. That was the origin of the so-called Unix culture.
  id: totrans-split-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 还有其他一些小事情。Unix 是一个非常小而可理解的操作系统，因此人们可以随心所欲地修改它。它会自己运行——你可以输入"go"，几分钟后它会重新编译自己。你对整个系统有完全控制。因此，对许多人特别是大学而言，这非常有益，因为从IBM终端用户的角度教授计算机非常困难。Unix
    很小，你可以逐行查看它，完全理解它是如何工作的。这就是所谓的Unix文化的起源。
- en: '***Computer**: In a sense, Linux is following in this tradition. Any thoughts
    on this phenomenon?*'
  id: totrans-split-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机*：** *从某种意义上说，Linux正在继承这一传统。对这一现象有何看法？*'
- en: '**Thompson**: I view Linux as something that''s not Microsofta backlash against
    Microsoft, no more and no less. I don''t think it will be very successful in the
    long run. I''ve looked at the source and there are pieces that are good and pieces
    that are not. A whole bunch of random people have contributed to this source,
    and the quality varies drastically.'
  id: totrans-split-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森：** 我认为Linux不是微软，是对微软的反击，不多不少。我认为它长期来看不会非常成功。我看过源代码，有好的部分也有不好的部分。一大群随机的人为这个源代码做出了贡献，质量差异很大。'
- en: My experience and some of my friends' experience is that Linux is quite unreliable.
    Microsoft is *really* unreliable but Linux is *worse*. In a non-PC environment,
    it just won't hold up. If you're using it on a single box, that's one thing. But
    if you want to use Linux in firewalls, gateways, embedded systems, and so on,
    it has a long way to go.
  id: totrans-split-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我的经验以及一些朋友的经验表明，Linux 非常不可靠。微软真的不可靠，但 Linux 更糟。在非PC环境中，它根本无法支持。如果你只是在一个单一的系统上使用它，那还可以。但是，如果你想在防火墙、网关、嵌入式系统等方面使用Linux，它还有很长的路要走。
- en: '**DISTRIBUTED COMPUTING: NETWORK OPERATING SYSTEMS AND LANGUAGES**'
  id: totrans-split-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**分布式计算：网络操作系统和语言**'
- en: '***Computer*:** *How does your work on Plan 9 and Inferno derive from your
    earlier work on Unix? What are some of the new ideas arising out of this work
    that could and should apply to distributed operating systems in general?*'
  id: totrans-split-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机*：** *Plan 9 和 Inferno 上的工作如何从你在Unix上的早期工作中衍生出来？这项工作中产生的一些新想法，可以和应该应用于分布式操作系统吗？*'
- en: '**Thompson:** Saying these ideas haven''t been applied before is tough because,
    if you look closely, everything is reinvented, nothing''s new. There are good
    ideas and bad ideas in Unix. You can''t escape your history. What you think today
    is not much different from what you thought yesterday. And, by induction, it is
    not that different from what you thought twenty years ago.'
  id: totrans-split-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森：** 坦言这些观念以前没有被应用过是困难的，因为如果你仔细观察，一切都在重新发明，没有什么是全新的。Unix 中有好的想法和坏的想法。你无法逃避你的历史。今天的想法与昨天的想法并没有太大的不同。归纳起来，它与二十年前的想法也没有太大的不同。'
- en: In Plan 9 and Inferno, the key ideas are the protocol for communicating between
    components and the simplification and extension of particular concepts. In Plan
    9, the key abstraction is the file systemanything you can read and write and select
    by names in a hierarchyand the protocol exports that abstraction to remote channels
    to enable distribution. Inferno works similarly, but it has a layer of language
    interaction above it through the Limbo language interfacewhich is like Java, but
    cleaner I think.
  id: totrans-split-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在Plan 9和Inferno中，关键的思想是组件之间通信的协议以及特定概念的简化和扩展。在Plan 9中，关键的抽象是文件系统——任何你可以在层次结构中按名称读取和写入的东西——该协议通过远程通道导出该抽象以实现分布。Inferno的工作方式类似，但它通过Limbo语言接口在其上有一个语言交互层——这类似于Java，但我认为更清晰。
- en: '**LIMBO**'
  id: totrans-split-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**林波**'
- en: '***Computer:*** *How would you characterize Limbo as a language?*'
  id: totrans-split-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机*：** *你如何描述Limbo语言？*'
- en: '**Thompson:** First, I have to say that the language itself is almost exclusively
    the work of Sean Dorward, and in my talking about it I don''t want to imply I
    had much to do with it.'
  id: totrans-split-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森：** 首先，我必须说，这门语言几乎完全是肖恩·多沃德的作品，在我谈论它时，我不想暗示我对它有很大的贡献。'
- en: I think it's a good language. In a pragmatic sense, it's a simplification of
    the larger languages like C++ and Java. The inheritance rules are much simpler,
    it's easier to use, and the restrictions there for simplicity don't seem to impair
    its functionality.
  id: totrans-split-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我认为这是一种较好的语言。从实际应用的角度看，它简化了像C++ 或 Java 这些大型语言。继承规则更加简单，使用更加便利，为了简单化所设置的限制似乎并未影响其功能。
- en: In C++ and Java I experience a certain amount of angst when you ask how to do
    this and they say, "Well, you do it like this or you could do it like that." There
    are obviously too many features if you can do something that many waysand they
    are more or less equivalent. I think there are smaller concepts that fit better
    in Inferno.
  id: totrans-split-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在C++和Java中，当我询问如何实现某些功能时，如果他们说“你可以这样做或那样做”，我会感受到一定的焦虑。显然，可以采用多种方式实现相似的功能。我认为更适合
    Inferno 的是一些更简洁且更适合的构想。
- en: '***Computer:*** *We know that Plan 9 was done in C. It would almost seem that
    the group needed Limbo to develop Inferno. Do we need new types of languages to
    build distributed systems?*'
  id: totrans-split-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Computer:* *我们知道Plan 9 是用C语言开发的。似乎团队需要 Limbo 开发 Inferno。我们是否需要新的语言来构建分布式系统？*'
- en: '**Thompson:** The language, I think, doesn''t matter per se. The language''s
    actual size and features are almost separate issues from the distribution of the
    language. It shouldn''t be too large or too small; it should be some nice language
    that you can live with. The idea, though, is that it is dynamically loadable so
    that you can replace little modules. And through some other mechanisms like encryption
    you can validate those modules, and when they are loaded you have some confidence
    that it''s the module you wanted and that someone hasn''t spoofed you.'
  id: totrans-split-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Thompson:** 语言本身，就其本质而言，并不决定性重要。语言的实际大小和特性与语言的分发几乎无关紧要，它应该是大小适中、功能完整、足够实用的编程语言。关键在于它可以动态加载，这样你就可以替换小模块。此外，还能通过一些机制如加密验证这些模块，当模块加载时，确保加载的是你想要的模块，不是有人觊觎你的系统。'
- en: There are certain features you must havesome form of objectorientation, for
    example. You could replace Limbo with JavaI wouldn't want toand not change Inferno's
    basic principles other than the way it meets system requirements. Sean decided
    the whole system had to have a garbage-collected language at a much higher level
    in that it's not separate interacting processes maintaining their own addresses,
    with some being garbage-collected and some not.
  id: totrans-split-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你必须具备一些基本功能，例如对象导向特性等。用 Java 替换 Limbo 不是最好的选择，但它在满足系统需求上，没有改变 Inferno 的基本原则，尤其是它的垃圾回收机制在高级级别上运行，整个系统在本质上具有同一层的垃圾回收语言，而非单独的相互交互进程分别维护自己的地址，有些进程被垃圾回收，有些则不。
- en: The language and the system are all garbage-collected together. Whatever protection
    mechanisms you have for the language apply all the way down through the system.
    For example, if you open a file, you don't have to close it. If you stop using
    it, just return from the function and it will be garbage-collected and the file
    will be closed. So the system and the language are part of the same ball of wax.
  id: totrans-split-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 语言和系统都一起进行垃圾回收。你为语言所设置的一切保护机制在系统中也同样有效。例如，如果你打开了一个文件，不需要关闭它。不再使用时，只要从函数中返回，文件就会被垃圾回收并自动关闭。因此，系统和语言这部分是属于同一套的东西。
- en: 'In addition, the language implementationand again I don''t want to take any
    creditdoesn''t have big markandsweep type garbage collection. It has reference
    counting: If you open something and then return, it''s gone by reference count.
    Thus, you don''t have high and low watermarks because 99 percent of the garbage
    goes away as soon as it is dereferenced. If you store a null in a pointer, it
    chases the pointer and all that stuff goes.'
  id: totrans-split-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此外，语言实现上（我并不想夺功）没有复杂的标记和清除类型的垃圾回收机制，它采用引用计数：打开后返回，通过引用计数可知其已被释放。因此，没有高水位和低水位标记，因为99%的垃圾在被引用取消后即自动消失。如果在指针中存储一个null值，它会追踪指针，所有与此相关的东西都会随之消除。
- en: 'If you make cycles, there is a background distributed mark-and-sweep algorithm
    that just colors the next step a little bit at a time. It doesn''t have to be
    very aggressive because there is not much garbage around in most applications:
    People really don''t leave dangling loop structures that require this kind of
    algorithm. So you can devote just one percent of your time in the background looking
    for garbage without these monster mark-and-sweep things.'
  id: totrans-split-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你形成循环，那么有一个后台分布式标记-清除算法，一次只会稍微涂上一点。它不必非常积极，因为大多数应用程序中几乎没有垃圾：人们真的不会留下需要这种算法的悬挂循环结构。因此，你可以将背景中寻找垃圾的时间只占一小部分，而不是那种庞大的标记-清除处理方式。
- en: So, again, it's pragmatic. It's not the theoretical top-of-the-line garbage
    collection paper. It's just a way of doing it that seems to be very, very effective.
  id: totrans-split-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 所以，再次强调，这是务实的。这不是理论上的最先进的垃圾收集论文。这只是一种看起来非常非常有效的做法。
- en: '**CURRENT WORK**'
  id: totrans-split-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**当前工作**'
- en: '***Computer:*** *What are you working on now?*'
  id: totrans-split-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机：*** *你现在在做什么？*'
- en: '**Thompson:** A few of us in research were tapped by a newly formed development
    organization within Lucent to work on a product called the PathStar Access Server.
    It''s essentially a central office switch and router for IP phone and data services.
    It''s strictly IP-based. You pick up the phone, dial it, and make conference calls.'
  id: totrans-split-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森：** 我们研究部门的一些人被陆登特新成立的开发组织选中，参与了一个名为PathStar接入服务器的产品开发。它本质上是一个中央办公室的交换机和路由器，用于IP电话和数据服务。它完全基于IP。你拿起电话，拨号，然后进行会议呼叫。'
- en: I think packet switching will replace circuit switching in the phone system
    and will invert the hierarchy. Whereas data is currently carried in the leftover
    space of a circuit-switched network, eventually the backbone will be a packet-switched
    network with the phone implemented under it. You don't have to go out on a limb
    to say thisprobably 90 percent of the people believe that now. But this project
    is "put up or shut up." We are actually inverting the phone system to run across
    a pretty classical packet-switched router.
  id: totrans-split-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我认为数据包交换将取代电话系统中的电路交换，并颠倒层次结构。目前数据通常在电路交换网络的剩余空间中传输，最终主干将是一个数据包交换网络，电话在其下实现。你不必大胆地说这个——现在可能有90%的人相信。但是这个项目是"实践出真知"。我们确实正在颠倒电话系统，让其在一个相当经典的数据包交换路由器上运行。
- en: In this kind of application what you need to pay attention to is maintenance
    and configuration, which is where Inferno comes in. All of the configuration code
    is Inferno and Limbo. You have to pay attention to quality of service so that
    you can raise the loading above minimal and still get real-time voice, in this
    particular case.
  id: totrans-split-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这种应用中，你需要注意的是维护和配置，这就是Inferno的用武之地。所有的配置代码都是Inferno和Limbo。你需要关注服务质量，以便在提高负载以上的情况下仍然获得实时语音，特别是在这种情况下。
- en: 'There were some fun parts: The actual call processing, which is typically done
    by a huge finite state machine, was fun to do. We did it by making a finite-state-machine-generation
    language. The object of the language is a finite state machine, but the source
    is not. The actual phone conversation or feature is a group interacting finite
    state machines, almost like processes. And, of course, they have to be distributed
    because you make calls to other phones.'
  id: totrans-split-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有一些有趣的部分：实际的呼叫处理通常由一个庞大的有限状态机完成，这样做很有趣。我们通过制作一个有限状态机生成语言来完成这项工作。这种语言的对象是有限状态机，但源代码不是。实际的电话会话或功能是一组交互的有限状态机，几乎像是进程。当然，它们必须分布，因为你要打电话给其他电话。
- en: '***Computer:*** *So this language generates the finite state machines. Did
    you create the language to allow for experimentation to come up with different
    finite state machines?*'
  id: totrans-split-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机：*** *这种语言生成有限状态机。你是不是为了允许实验，创造了这种语言来生成不同的有限状态机？*'
- en: '**Thompson:** Well, at first we thought it was simple: You just write a finite
    state machine for this phone system. And at first it *was* simple. You just say,
    "Well if you''re here do this, and if you''re there do that, and just manually
    lay out these finite state machines." And that works just beautifully for the
    very first implementation, which is just picking up a phone, dialing a number,
    calling another phone, picking that phone up, conversing, and hanging up. You
    can just picture those states laying out.'
  id: totrans-split-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森：** 起初，我们以为问题很简单：你只需为这个电话系统写一个有限状态机。起初它确实很简单。你只需说，“如果你在这里就这样做，如果你在那里就那样做”，并手动布置这些有限状态机。对于第一个实现，这非常有效，它仅仅是拿起电话，拨打号码，呼叫另一部电话，接听电话，交谈，然后挂断。你可以想象这些状态如何布置。'
- en: But when you get to some of the simple featuresthreeway calls, for examplewhat
    happens when caller ID or call waiting comes in on a three-way call? The classical
    phone just says busy because it can't handle more than three phones.
  id: totrans-split-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 但是当你涉及到一些简单的特性时，比如三方通话，当来电显示或通话等待进入三方通话时会发生什么？经典电话只会显示忙，因为它不能处理超过三个电话。
- en: So you build a model, which was initially a finite state machine model, and
    then you slowly add the features you need until the model breaks. It breaks pretty
    quickly, so you build a second one until it breaks, and so on. You just do it
    by exhaustion. So that's how the FSM-generation language came about; it wasn't
    "let's sit down and do everything at once." I think that's probably the way computer
    languages were built.
  id: totrans-split-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 所以你建立了一个模型，最初是一个有限状态机模型，然后你慢慢添加你需要的功能，直到模型崩溃。它很快就崩溃了，所以你又建立了第二个，直到它崩溃，以此类推。你只能通过穷举来做到这一点。这就是FSM生成语言的由来；它不是“让我们一次性坐下来做所有的事情”。我想这可能就是计算机语言的建立方式吧。
- en: Interestingly, this work was extended further by Gerard Holzmann, someone in
    our area who has been into state verificationrunning exhaustive studies finding
    error states in the finite state system. He was just delighted with this little
    FSM-generation language because now he could build his models, and he inverted
    it. He took it the way it is, which is to build finite state machines, but he
    also took it to build drivers. So he has my model, which runs the phones on the
    inside, but then he needed telephones to drive his model. So he can now build
    another finite state machine to model the telephone and do not only the synthesis
    but the analysis.
  id: totrans-split-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有趣的是，这项工作由我们地区的杰拉德·霍尔兹曼进一步扩展，他一直在进行状态验证，运行详尽的研究，找出有限状态系统中的错误状态。他对这种小型FSM生成语言感到非常满意，因为现在他可以构建自己的模型，并对其进行反转。他接受了它现在的形式，即构建有限状态机，但他还用它来构建驱动程序。所以他现在可以构建另一个有限状态机来模拟电话，并且不仅进行综合还进行分析。
- en: '**JUKEBOX MUSIC COLLECTION**'
  id: totrans-split-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**点唱机音乐收藏**'
- en: '***Computer***: *You''re also collecting music?*'
  id: totrans-split-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机：** 你也在收集音乐吗？*'
- en: '**Thompson:** It''s kind of a personal/research hobby/project. Let me explain
    it from an external point of view. Basically, I''m just collecting music. I''m
    getting lists from various sourcestop 10s, top 50sand I try to collect the music.'
  id: totrans-split-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森：** 这是一种个人/研究爱好/项目。让我从外部的角度来解释一下。基本上，我只是在收集音乐。我从各种来源获取列表，如前10名，前50名，然后尝试收集这些音乐。'
- en: Right now, my list has around 35,000 songs, of which I've collected around 20,000\.
    I compress the songs with a Bell Labs-invented algorithm called PAC [Perceptual
    Audio Coding] and store them on a jukebox storage system. I started this before
    MP3 was heard of on the network. PAC is vastly superior to MP3\.
  id: totrans-split-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在，我的列表大约有35,000首歌曲，其中我收集了大约20,000首。我使用贝尔实验室发明的算法PAC（感知音频编码）来压缩这些歌曲，并存储在点唱机存储系统上。在MP3在网络上被知道之前，我就开始做这件事了。PAC比MP3要好得多。
- en: My collection is not generally available because of the legal aspects. I went
    to legal and told them I was collecting a lot of music, but I don't think they
    realized what I meant by "a lot." Anyway, they said that in the case of research
    there's something similar to fair use and that they'd back me, but wouldn't go
    to jail for me. So I can't release it generally. But it's pretty impressive. It's
    split-screen like a Web browser; you can walk down lists, years, or weeks.
  id: totrans-split-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由于法律方面的原因，我的收藏通常不对外开放。我去法律部门告诉他们我正在收集大量音乐，但我认为他们并没有意识到我所说的“大量”是什么意思。无论如何，他们说在研究的情况下，有类似公平使用的东西，他们会支持我，但不会为我坐牢。所以我不能通常发布它。但它相当令人印象深刻。它像一个网页浏览器一样分屏；你可以浏览列表，年份或周数。
- en: '***Computer**: It''s a personal hobby.*'
  id: totrans-split-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机：** 这是一个个人爱好。*'
- en: '**Thompson:** It''s hard to differentiate since, if you haven''t noticed, almost
    everything I''ve done is personal interest. Almost everything I''ve done has been
    supported and I''m allowed to do it, but it''s always been on the edge of what''s
    acceptable for computer science at the time. Even Unix was right on the edge of
    what was acceptable at Bell Labs at the time. That''s almost been my history.'
  id: totrans-split-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森**：很难区分，因为你可能没有注意到，我几乎做的每件事都是出于个人兴趣。几乎我所做的一切都得到了支持，我也被允许这么做，但它们总是在计算机科学当时所能接受的边缘。即使是Unix在当时贝尔实验室也是边缘的。这几乎是我的历史。'
- en: '**COMPUTER SCIENCE AND THE FUTURE**'
  id: totrans-split-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**计算机科学与未来**'
- en: '***Computer:*** *You''ve been there through Multics, Unix, Inferno, and so
    on. Any thoughts about where computer science is going or should be going?*'
  id: totrans-split-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机***：*你经历过Multics、Unix、Inferno等等。对计算机科学未来的走向或应该走向有何想法吗？*'
- en: '**Thompson:** Well, I had to give advice to my son, and my advice to himto
    the next generationwas to get into biology. When I was a kid, I was interested
    in electronics. I got into computingnot being *interested* in it per se because
    it almost didn''t exist thenbecause it''s addictive. I think electronics had this
    cycle: It would do everythingnegative feedback and stuff like thatwhereas now
    it''s just commodity and grind them out.'
  id: totrans-split-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森**：好吧，我曾经给我儿子提过建议，也给下一代提过建议——让他涉足生物学。我小时候对电子学很感兴趣。我进入计算机领域不是因为本身对它感兴趣，因为那时它几乎不存在，而是因为它让人上瘾。我认为电子学有这样一个周期：它可以做任何事情——负反馈等等——而现在它只是商品化并大量生产。'
- en: Computer science is coming into its middle age. It's turning into a commodity.
    People don't know about Carnot cycles for refrigerators, yet they buy refrigerators.
    It's happening in computing too. Who knows about compilers? They buy computers
    to play games and balance their checkbooks. So my advice to my child wasI am unfortunately
    talking to *Computer* magazineto go into biology, not classic biology but gene
    therapy and things like that.
  id: totrans-split-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 计算机科学正在步入中年。它正在变成一种商品。人们不了解制冷剂的卡诺循环，但他们会购买冰箱。在计算机领域也是如此。谁了解编译器？他们购买电脑是为了玩游戏和记账。因此，我对我的孩子的建议——抱歉我不好意思正在和*计算机*杂志交谈——是进入生物学，不是传统意义上的生物学，而是基因疗法等领域。
- en: I think that computing is a finite field and it's reaching its apex and we will
    be on a wane after this. I am sorry to say that, but that's the way I feel. You
    look at any aspect of computer sciencewhat's being taught today, PhD theses, publications,
    any metric you can think of and compare it to historyand you realize that aspects
    of computer science are becoming more specialized.
  id: totrans-split-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我认为计算机是一个有限的领域，它正达到其顶峰，之后将会走下坡路。很抱歉我要这么说，但这是我的感觉。你看看计算机科学的任何方面——今天教授的内容、博士论文、出版物、任何你能想到的衡量标准，然后与历史比较——你会意识到计算机科学的各个方面正在变得更加专业化。
- en: '***Computer:** Which aspects?*'
  id: totrans-split-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机***：哪些方面？*'
- en: '**Thompson**: Operating systems, in particular, have to carry so much baggage.
    Today, if you''re going to do something that will have any impact, you have to
    compete with Microsoft, and to do that you have to carry the weight of all the
    browsers, Word, Office, and everything else. Even if you write a better operating
    system, nobody who actually uses computers today knows what an operating system
    interface is; their interface is the browser or Office.'
  id: totrans-split-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森**：特别是操作系统，必须承载如此多的负担。今天，如果你要做一些有影响的事情，你必须与微软竞争，而要做到这一点，你必须承担所有浏览器、Word、Office和其他所有东西的重量。即使你写了一个更好的操作系统，今天实际使用计算机的人也不知道操作系统界面是什么；他们的界面是浏览器或Office。'
- en: 'You can have the best and most beautiful interface in the world and the most
    extensible operating system that ports to anything and then you have to port on
    top of it a thousand staff-years worth of applications that you can''t obtain
    the source for. You have two choices: Go to Microsoft and ask for the source to
    Office to port to your operating system and they''ll laugh at you; or get a user''s
    manual and re-engineer the code and they''ll sue you anyway. Basically, it''ll
    never happen because the entry fee is too high.'
  id: totrans-split-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可以拥有世界上最好和最美丽的界面，最可扩展的操作系统，可以在任何平台上移植，然后你还得在其上移植一千人年的应用程序，而你却无法获得其源代码。你有两个选择：去微软要求Office的源代码移植到你的操作系统，他们会嘲笑你；或者获取用户手册并重新设计代码，然后他们还会起诉你。基本上，这是不可能发生的，因为入门费太高。
- en: 'Anything new will have to come along with the type of revolution that came
    along with Unix. Nothing was going to topple IBM until something came along that
    made them irrelevant. I''m sure they have the mainframe market locked up, but
    that''s just irrelevant. And the same thing with Microsoft: Until something comes
    along that makes them irrelevant, the entry fee is too difficult and they won''t
    be displaced.'
  id: totrans-split-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 任何新事物都必须伴随着类似Unix带来的革命。在没有什么能让他们变得无关紧要之前，没有什么能够推翻IBM。我确定他们在大型机市场上占据了主导地位，但这只是无关紧要的。微软也是同样的情况：在没有什么能让他们变得无关紧要之前，进入门槛太高，他们不会被取代。
- en: '***Computer**: So you''re not precluding the possibility of a paradigm shift.*'
  id: totrans-split-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机**：所以你并不排除出现范式转变的可能性。*'
- en: '**Thompson**: Absolutely not. Anybody who says there''s no more innovation
    in the world is doomed to be among the last 400 people who have stated this since
    the birth of Christ.'
  id: totrans-split-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森**：绝对不会。任何说世界上没有创新了的人注定要成为自基督诞生以来说过这话的最后400人之一。'
- en: '***Computer**: You''re still having fun?*'
  id: totrans-split-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机**：你还在玩得开心吗？*'
- en: '**Thompson**: Yes, there are still a lot of fun programs to write.'
  id: totrans-split-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森**：是的，还有很多有趣的程序要写。'
- en: '**WHAT I DID ON MY WINTER VACATION**'
  id: totrans-split-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**我在冬假做了什么**'
- en: '***Computer***: *We can''t let you go without asking why on earth you traveled
    to Russia to fly a Mig-29?*'
  id: totrans-split-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***计算机***：*我们不能让你离开，而不问你为什么要去俄罗斯驾驶米格-29战斗机？*'
- en: '**Thompson**: How often does the Soviet Union collapse? It would be just a
    shame if you couldn''t do something you have always wanted to do as a result.
    They are selling rides in what was once the top fighter. A mere two years earlier
    you would only get hints about its existence in Jane''s books. Now you can get
    in, use the laser sights, and go straight up at 600 miles per hour. Who wouldn''t
    do that? When things like that come along, I''ll take them. They''re fun.'
  id: totrans-split-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**汤普森**：苏联崩溃的频率有多高？如果因此而无法做你一直想做的事情，那真是一种遗憾。他们正在出售曾经是顶级战斗机的座驾。仅仅两年前，你只能在简氏书中找到它的存在迹象。现在你可以坐进去，使用激光瞄准器，以每小时600英里的速度直线上升。谁不愿意做这样的事情？当这些事情出现时，我会抓住机会。它们很有趣。'
- en: '*Contact the authors at [d.cooke@computer.org](mailto:d.cooke@computer.org),
    [j.urban](mailto:j.urban@computer.org)*[*@computer.org*](mailto:j.urban@computer.org)*,*
    [*s.hamilton@computer.org*](mailto:s.hamilton%7d@computer)*.*'
  id: totrans-split-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*请联系作者：[d.cooke@computer.org](mailto:d.cooke@computer.org), [j.urban](mailto:j.urban@computer.org)@computer.org,
    [s.hamilton@computer.org](mailto:s.hamilton@computer.org)*。'
