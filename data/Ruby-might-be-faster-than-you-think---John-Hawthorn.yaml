- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:32:38'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:32:38
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Ruby might be faster than you think - John Hawthorn
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ruby might be faster than you think - John Hawthorn
- en: 来源：[https://www.johnhawthorn.com/2024/ruby-might-be-faster-than-you-think/](https://www.johnhawthorn.com/2024/ruby-might-be-faster-than-you-think/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.johnhawthorn.com/2024/ruby-might-be-faster-than-you-think/](https://www.johnhawthorn.com/2024/ruby-might-be-faster-than-you-think/)
- en: I saw a project a couple weeks back which allows [writing and running Crystal
    methods inline inside a Ruby file](https://github.com/wouterken/crystalruby).
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 几周前，我看到一个项目允许在 Ruby 文件中内联写入和运行 Crystal 方法。
- en: It’s a neat project, and I don’t want to take away from it but something in
    the [README example](https://github.com/wouterken/crystalruby/blob/1d8b38e103d5f3a210e0b6fbc5c1465cade62258/README.md)
    looked off to me.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很棒的项目，我不想从中削减，但是 README 中的某些内容看起来对我来说有些不对劲。
- en: 'require ''crystalruby'' require ''benchmark'' module Fibonnaci crystalize [n:
    :int32] => :int32 def fib_cr(n) a = 0 b = 1 n.times { a, b = b, a + b } a end
    module_function def fib_rb(n) a = 0 b = 1 n.times { a, b = b, a + b } a end end
    puts(Benchmark.realtime { 1_000_000.times { Fibonnaci.fib_rb(30) } }) puts(Benchmark.realtime
    { 1_000_000.times { Fibonnaci.fib_cr(30) } })'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 'require ''crystalruby'' require ''benchmark'' module Fibonnaci crystalize [n:
    :int32] => :int32 def fib_cr(n) a = 0 b = 1 n.times { a, b = b, a + b } a end
    module_function def fib_rb(n) a = 0 b = 1 n.times { a, b = b, a + b } a end end
    puts(Benchmark.realtime { 1_000_000.times { Fibonnaci.fib_rb(30) } }) puts(Benchmark.realtime
    { 1_000_000.times { Fibonnaci.fib_cr(30) } })'
- en: My benchmark runs look pretty similar to the README’s. The “crystalized” version
    runs about 4x faster than the pure Ruby version.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我的基准运行看起来与 README 中的类似。"水晶化" 版本比纯 Ruby 版本运行快大约 4 倍。
- en: '[PRE0]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: But something is a bit off here. The Ruby implementation has a subtle mistake
    which causes signficantly more work than it needs to.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但这里有点不对劲。Ruby 实现中有一个细微的错误，导致它比必要的工作要多得多。
- en: Ruby’s multiple assignment `a, b = b, a + b` is equivalent to `a, b = [b, a
    + b]`. Most of the time that Array allocation doesn’t actually happen, but because
    in this case it’s the last line of the block, and because Ruby has an implicit
    return at the end of the block the Array is required (even though `Integer#times`
    doesn’t use the return we don’t yet have an optimization which “knows” that).
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby 的多重赋值 `a, b = b, a + b` 等同于 `a, b = [b, a + b]`。大多数情况下，这种数组分配实际上并没有发生，但因为在这种情况下它是块的最后一行，并且因为
    Ruby 在块的末尾有一个隐式返回，所以数组是必需的（尽管 `Integer#times` 不使用返回，我们还没有一个能“知道”这一点的优化）。
- en: Let’s see how we do avoiding that… (with a slightly unsightly `; nil` replacing
    the return)
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何避免这种情况...（稍微有些不雅观的 `; nil` 替代返回）
- en: def fib_rb(n) a = 0 b = 1 n.times { a, b = b, a + b; nil } a end
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: def fib_rb(n) a = 0 b = 1 n.times { a, b = b, a + b; nil } a end
- en: '[PRE1]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Not bad. We’re making up the difference. Now we’re only about 2x slower than
    crystal.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不错。我们正在弥合差距。现在我们只比水晶慢大约 2 倍。
- en: To make this a bit faster, instead of calling `Integer#times`, let’s inline
    the loop.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让这个过程变得更快一点，我们可以内联循环，而不是调用 `Integer#times`。
- en: def fib_rb(n) a = 0 b = 1 while n > 0 a, b = b, a + b n -= 1 end a end
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: def fib_rb(n) a = 0 b = 1 while n > 0 a, b = b, a + b n -= 1 end a end
- en: '[PRE2]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Nearly on par now! Finally, let’s enable YJIT, Ruby’s built-in JIT compiler
    to see the real comparison.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在几乎持平！最后，让我们启用 YJIT，Ruby 内置的 JIT 编译器，以查看真正的比较。
- en: '[PRE3]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now it’s Ruby that’s 5 times faster than Crystal!!! And 20x faster than our
    original version. Though most likely that’s some cost from the FFI, or something
    similar, though that does seem like a surprising amount of overhead.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Ruby 的速度是 Crystal 的 5 倍！！！比我们原来的版本快了 20 倍。尽管很可能这是来自于 FFI 的一些成本，或者类似的东西，尽管这似乎是一个令人惊讶的开销量。
- en: I thought it was notable that by making some minor tweaks to Ruby code it can
    now outperform a precompiled statically typed language in a purpose-built example
    of when it is slow. I’m hopeful that someday with future advancements in the Ruby
    JIT even the small tweaks might not be necessary.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为值得注意的是，通过对 Ruby 代码进行一些小的调整，它现在可以在某些情况下胜过预编译的静态类型语言。我希望将来随着 Ruby JIT 技术的进步，甚至可能不再需要这些小调整。
