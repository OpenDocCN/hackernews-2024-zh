- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:08:13'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:08:13
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: ULIDs and Primary Keys | Dave Allie
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ULIDs和主键 | Dave Allie
- en: 来源：[https://blog.daveallie.com/ulid-primary-keys](https://blog.daveallie.com/ulid-primary-keys)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.daveallie.com/ulid-primary-keys](https://blog.daveallie.com/ulid-primary-keys)
- en: When it comes to picking the type for your database's primary keys, there are
    a few divided camps. When making this decision for [Visibuild](https://www.linkedin.com/company/visibuild-pty-ltd/)
    I had to choose between the simplicity of sequential IDs and the longevity/future
    benefits of non-sequential IDs. I chose non-sequential IDs to make it easier to
    deal with sharding and regional databases in the future. Out of the many flavours
    of non-sequential IDs I chose ULIDs.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择数据库主键类型时，意见分歧。在为[Visibuild](https://www.linkedin.com/company/visibuild-pty-ltd/)做出这个决定时，我必须在顺序ID的简单性和非顺序ID的长期/未来益处之间选择。我选择了非顺序ID以便未来更容易处理分片和区域数据库。在众多非顺序ID的选择中，我选择了ULIDs。
- en: Here's how I got there.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我到达那里的方法。
- en: Let's start where most people do, with UUIDs.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从大多数人开始的地方开始，使用UUIDs。
- en: UUIDs (universally unique identifiers) are 128-bit labels typically represented
    as a hexadecimal string broken up into 5 sections containing 32 bits, 16 bits,
    16 bits, 16 bits, and 48 bits respectively.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: UUIDs（通用唯一标识符）是128位标签，通常表示为十六进制字符串，分为5个部分，分别包含32位、16位、16位、16位和48位。
- en: 'Here''s an example:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个例子：
- en: Within the UUID standard (which you can read about in [RFC 4122](https://datatracker.ietf.org/doc/html/rfc4122)),
    there are 5 different versions of that same 128-bit label. The differences between
    the versions are which inputs are required to generate the UUID and the structure
    of the bits that are output.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在UUID标准中（您可以在[RFC 4122](https://datatracker.ietf.org/doc/html/rfc4122)中了解详情），有5个不同版本的相同128位标签。这些版本之间的区别在于生成UUID所需的输入以及输出位的结构。
- en: Version 1 requires knowledge of the computer's MAC address to generate the label.
    Version 2 is only guaranteed to be unique if at most one is generated per computer
    about every 7 minutes. Versions 3 and 5, are deterministic based on the supplied
    input. This leaves only version 4 as a suitable choice for scalable, non-deterministic
    UUIDs.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第1版需要知道计算机的MAC地址才能生成标签。第2版只有在每台计算机大约每7分钟生成至多一个时才能保证唯一。第3版和第5版基于提供的输入是确定性的。这使得第4版是用于可扩展的、非确定性UUID的合适选择。
- en: When people say UUID they're almost always referring to UUIDv4\. It's the most
    prevalent and widely supported UUID standard, even the example UUID given above
    is a UUIDv4\. As UUIDv4 is based solely on randomness, it is extremely portable
    and can be used with very little prior knowledge about the state of the system.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们说UUID时，他们几乎总是指的是UUIDv4。它是最普遍和广泛支持的UUID标准，即使上面给出的示例UUID也是UUIDv4。由于UUIDv4仅基于随机性，因此它非常易于移植，并且可以在几乎不需要关于系统状态的先验知识的情况下使用。
- en: UUIDv4 are composed of **122** bits of randomness, and **6** bits of version/variant
    identification.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: UUIDv4由**122**位的随机性和**6**位的版本/变体标识组成。
- en: info_outline
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: info_outline
- en: Click the "Regenerate" button to see a few different UUIDv4.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“重新生成”按钮以查看几个不同的UUIDv4。
- en: The only non-random sections of a UUDv4 are the version and variant. The version
    is represented by 4 bits and is always set to 4 for UUIDv4, you can see it highlighted
    as the first orange nibble above. The variant is represented by 2 bits and is
    set to 2 for the UUIDv4 standard, you can see it highlighted as the second orange
    nibble above.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: UUIDv4中唯一的非随机部分是版本和变体。版本由4位表示，并且对于UUIDv4始终设置为4，您可以看到它作为上面第一个橙色nibble突出显示。变体由2位表示，并且对于UUIDv4标准设置为2，您可以看到它作为上面第二个橙色nibble突出显示。
- en: info_outline
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: info_outline
- en: The variant is only the first 2 bits of the second highlighted nibble. While
    the remaining 2 are random, meaning the value of that nibble can be 8 (
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 变体仅是第二个突出显示的nibble的前2位。而其余2位是随机的，意味着该nibble的值可以是8 (
- en: '`1000`'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`1000`'
- en: ), 9 (
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: ), 9 (
- en: '`1001`'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`1001`'
- en: ), a (
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: ), a (
- en: '`1010`'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`1010`'
- en: ), or b (
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: ), 或 b (
- en: '`1011`'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`1011`'
- en: '). While there are only 5 UUID variants in the RFC, there''s [a draft](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format)
    that includes 3 new ones: UUIDv6, UUIDv7, and UUIDv8.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: ). 虽然RFC中只有5种UUID变体，但有一个[草案](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format)，其中包括3种新的：UUIDv6、UUIDv7和UUIDv8。
- en: The three new versions are all based on a similar structure of a combination
    of time bits in the most significant positions, followed by random bits. The difference
    between the three is which kind of clock is used to generate the time bits. Version
    7 from the draft is using Unix Epoch time, making it the likely candidate for
    adoption in the future.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个新版本都基于类似的结构：将时间位放在最重要的位置，然后是随机位的组合。它们之间的区别在于使用哪种类型的时钟来生成时间位。草案中的第7版使用Unix
    Epoch时间，因此很可能会在未来被采用。
- en: Even within version 7, there are a few different ways to represent the time.
    Different levels of sub-second precision can be used, but the more precise in
    time you get, the fewer random bits you'll be able to use. Let's take a look at
    the millisecond precision setup of UUIDv7.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在第7版中，也有几种不同的表示时间的方式。可以使用不同级别的子秒精度，但时间越精确，可以使用的随机位数就越少。让我们来看看UUIDv7的毫秒精度设置。
- en: With the millisecond precision setup, there are **48** bits of time, **6** bits
    of version/variant, **12** bits for a monotonic sequence, and **62** bits of randomness.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过毫秒精度的设置，时间有**48**位，版本/变体有**6**位，单调序列有**12**位，随机性有**62**位。
- en: UUIDv7 always dedicates the first 36 bits to the seconds of the timestamp, and
    then a variable amount of bits for the sub-second precision, in our case that's
    12 bits for the milliseconds within the second.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: UUIDv7始终将前36位用于时间戳的秒数，然后根据子秒精度使用可变数量的位数，例如我们的情况下，用于每秒内的毫秒数的位数是12位。
- en: info_outline
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: info_outline
- en: If you click "Regenerate" a few times, you should see the first 9 characters
    of the timestamp only change once a second, these are the bits representing the
    Unix Epoch time in seconds. The last three bits are the milliseconds within that
    second.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击"重新生成"几次，你应该会看到时间戳的前9个字符每秒只改变一次，这些位表示的是Unix Epoch时间的秒数。最后的三位是该秒内的毫秒数。
- en: The version and variant follow the same setup as UUIDv4, however the version
    is set to 7.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 版本和变体遵循与UUIDv4相同的设置，但版本设置为7。
- en: The main value for the timestamp at the front of the UUID is that UUIDv7s (and
    the other new UUIDs in the draft) are monotonically increasing (within the same
    sub-second), meaning that a UUIDv7 generated now is always going to be larger
    than a UUIDv7 generated a millisecond ago.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: UUID前面的时间戳的主要价值在于UUIDv7（以及草案中的其他新UUID）在同一子秒内是单调递增的，这意味着现在生成的UUIDv7始终比一毫秒前生成的UUIDv7要大。
- en: You'll also notice a new kind of section in UUIDv7, the "monotonic sequence"
    section. This section of 12 bits is designed to ensure that the UUIDs generated
    within the same sub-second are also monotonically increasing. In our case, for
    each subsequent UUIDv7 generated within the same millisecond, the monotonic sequence
    counter will increase by one. Note that this is only relevant for UUIDs generated
    on the same machine within the same millisecond, it will not ensure any ordering
    of UUIDs if they're generated independently of each other in the same millisecond.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到UUIDv7中的一种新的部分，即"单调序列"部分。这个12位的部分旨在确保在同一子秒内生成的UUID也是单调递增的。在我们的情况下，对于在同一毫秒内生成的每个后续UUIDv7，单调序列计数器将增加一。请注意，这仅对在同一台机器上在同一毫秒内生成的UUIDs有意义，如果它们在同一毫秒内独立生成，则不能确保UUIDs的任何排序。
- en: 'Here are some example UUIDs generated in the same millisecond:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在同一毫秒内生成的一些示例UUIDs：
- en: '*   `061ff8d8-e24b-7000-8092-ca1e5440d491`'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*   `061ff8d8-e24b-7000-8092-ca1e5440d491`'
- en: '`061ff8d8-e24b-7001-b653-1c41e471cd78`'
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`061ff8d8-e24b-7001-b653-1c41e471cd78`'
- en: '`061ff8d8-e24b-7002-9bc2-82b5da559f1d`'
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`061ff8d8-e24b-7002-9bc2-82b5da559f1d`'
- en: When using UUIDv7 as a primary key, you get the same sortability as a sequential
    ID with the flexibility of distributed generation. If you're looking to do a performant
    sort on creation time using UUIDv4, you'd need a separate indexed creation time
    column, but if you're using UUIDv7 then you can use the primary key as the sort
    column (since it's already indexed).
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用UUIDv7作为主键时，您获得了与顺序ID相同的可排序性，同时具备分布式生成的灵活性。如果您希望对创建时间使用UUIDv4进行高效排序，则需要一个单独的带索引的创建时间列，但如果使用UUIDv7，则可以使用主键作为排序列（因为它已经被索引）。
- en: In late 2017, almost 4 years before the UUIDv7 specification was drafted, the
    Universally Unique Lexicographically Sortable Identifier (or ULID) was proposed,
    not as an RFC Draft, but as a grassroots proposal over GitHub. You can take a
    read of the (quite concise) [specification for ULID](https://github.com/ulid/spec)
    on GitHub.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在UUIDv7规范起草之前的约4年，普遍唯一字典排序标识符（或ULID）作为一个基于GitHub的提案而非RFC草案提出。您可以在GitHub上阅读（相当简洁的）[ULID规范](https://github.com/ulid/spec)。
- en: A ULID is a 128-bit label, just like a UUID. It's sortable, has millisecond
    precision, and is monotonically increasing, just like UUIDv7.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: ULID是一个128位标签，就像UUID一样。它是可排序的，具有毫秒精度，并且是单调递增的，就像UUIDv7一样。
- en: ULIDs are typically represented as a [Crockford's Base 32](http://www.crockford.com/base32.html)
    encoded string, instead of a hexadecimal string like UUIDs. As an example, instead
    of `017eb31e-1440-b69e-d82f-5f0937f823c8`, the same value can be represented as
    `0GWWXY2G84DFMRVWQNJ1SRYCMC`.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: ULID通常表示为[Crockford的Base 32](http://www.crockford.com/base32.html)编码字符串，而不是UUID的十六进制字符串。例如，与`017eb31e-1440-b69e-d82f-5f0937f823c8`相同的值可以表示为`0GWWXY2G84DFMRVWQNJ1SRYCMC`。
- en: For the purpose of comparison with UUIDs, I'm going to represent all ULIDs as
    hexadecimal strings, in the same 8, 4, 4, 4, 12 segments which we have been using.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与UUID进行比较，我将把所有ULID表示为十六进制字符串，采用相同的8、4、4、4、12段。
- en: Within a ULID, there are **48** bits of time and **80** bits of randomness.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在ULID中，有**48**位时间和**80**位随机性。
- en: While there are 48 bits of time information in both UUIDv7 (with millisecond
    precision) and ULID, the ULID standard encodes the time as Unix Epoch in milliseconds
    for the whole 48 bits whereas UUIDv7 splits the time into 36 seconds bits and
    12 millisecond bits.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管UUIDv7（具有毫秒精度）和ULID中都有48位时间信息，但ULID标准将整个48位时间编码为Unix Epoch的毫秒数，而UUIDv7将时间分为36秒位和12毫秒位。
- en: ULIDs also remove the bits pertaining to the version and variant, giving us
    6 extra bits to play with but removing all indication that ULIDs are in fact ULIDs.
    Because UUIDs encode version and variant information inside the label, they can
    be reliably decoded into their composite parts (e.g. timestamp and randomness).
    If you wanted to extract the timestamp from a ULID, the client would need to know
    that the string being processed is a ULID, and not an invalid (or potentially
    valid looking) UUID.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: ULID还移除了与版本和变体相关的位，给我们6位额外的空间，但移除了ULID的标识。因为UUID在标签中编码版本和变体信息，所以可以可靠地解码为其组成部分（例如时间戳和随机性）。如果要从ULID中提取时间戳，客户端需要知道正在处理的字符串是ULID，而不是无效的（或者看起来可能有效的）UUID。
- en: ULIDs are monotonically increasing, but there is no defined monotonic counter
    like in UUIDv7\. Instead, ULIDs generated in the same millisecond on the same
    machine will have sequential randomness sections.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: ULID是单调递增的，但在同一台机器上在同一毫秒内生成的ULID将具有顺序随机部分。
- en: 'Here are some example ULIDs generated in the same millisecond:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是在同一毫秒内生成的一些ULID示例：
- en: '*   `017ece40-2a1e-63ac-a58d-e336f30c1d76`'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*   `017ece40-2a1e-63ac-a58d-e336f30c1d76`'
- en: '`017ece40-2a1e-63ac-a58d-e336f30c1d77`'
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`017ece40-2a1e-63ac-a58d-e336f30c1d77`'
- en: '`017ece40-2a1e-63ac-a58d-e336f30c1d78`'
  id: totrans-split-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`017ece40-2a1e-63ac-a58d-e336f30c1d78`'
- en: ULIDs are a great alternative to UUIDv7s. They contain more randomness and a
    straightforward structure at the cost of not explicitly exposing the version,
    variant, or monotonic counter. UUIDs are also the perfect choice if you're writing
    some apocalypse-scenario software (assuming you have a working computer) as they
    can continue to be generated until 10,889AD compared to UUIDv7s measly 4,147AD
    death date.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: ULID是UUIDv7的一个很好的替代方案。它们包含更多的随机性和简单的结构，但代价是不显式暴露版本、变体或单调计数器。相比之下，如果你在编写一些末日场景软件（假设你有一个工作的计算机），UUID是完美的选择，因为它们可以一直生成直到公元10889年，而UUIDv7仅能生成到公元4147年。
- en: 'The main differences between UUIDv7 and ULID are:'
  id: totrans-split-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UUIDv7和ULID的主要区别是：
- en: '*   UUIDv7'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*   UUIDv7'
- en: UUIDv7 will work until 4,147AD whereas ULID will work until 10,889AD
  id: totrans-split-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UUIDv7将在公元4147年前工作，而ULID将在公元10889年前工作。
- en: '| Format | Sortable | Monotonic | Randomness |'
  id: totrans-split-58
  prefs: []
  type: TYPE_TB
  zh: '| 格式 | 可排序 | 单调 | 随机性 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-split-59
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| UUIDv4 | No | No | 122 bits |'
  id: totrans-split-60
  prefs: []
  type: TYPE_TB
  zh: '| UUIDv4 | 否 | 否 | 122位 |'
- en: '| UUIDv7 | Yes | Yes | 62 bits |'
  id: totrans-split-61
  prefs: []
  type: TYPE_TB
  zh: '| UUIDv7 | 是 | 是 | 62位 |'
- en: '| ULID | Yes | Yes | 80 bits* |'
  id: totrans-split-62
  prefs: []
  type: TYPE_TB
  zh: '| ULID | 是 | 是 | 80位* |'
- en: '* - Random bits are incremented sequentially within the same millisecond.'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: '* - 在同一毫秒内，随机位按顺序递增。'
- en: Implementing UUIDs/ULIDs in PostgreSQL
  id: totrans-split-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在PostgreSQL中实现UUIDs/ULIDs
- en: info_outline
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: info_outline
- en: This section is tailored to PostgreSQL, if you're using a different database
    engine then you'll need to look elsewhere to understand how to implement these
    kinds of primary keys.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这一节专为 PostgreSQL 设计，如果你使用不同的数据库引擎，你需要找其他地方了解如何实现这种类型的主键。
- en: While all of these formats can be generated by the client before inserting them
    into the database, for the purpose of simplicity and consistency, having them
    be generated within the database engine is preferred.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管所有这些格式都可以由客户端在插入数据库之前生成，但为了简单和一致性的目的，最好在数据库引擎内部生成它们。
- en: Thankfully, PostgreSQL includes a [`uuid` data type](https://www.postgresql.org/docs/14/datatype-uuid.html)
    which accepts a case insensitive 128-bit hexadecimal string, parses it into binary
    data and stores it as 16 bytes of data. This is drastically better than storing
    the value as a string in the database, which would take up 37 bytes of space including
    the dashes, or 33 bytes of space with the dashes stripped out.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，PostgreSQL 包含了 [`uuid` 数据类型](https://www.postgresql.org/docs/14/datatype-uuid.html)，接受大小写不敏感的
    128 位十六进制字符串，将其解析为二进制数据并存储为 16 字节的数据。这比将值作为字符串存储在数据库中要好得多，后者包括破折号占用 37 字节的空间，或者去除破折号后占用
    33 字节的空间。
- en: 'Here are some implementation details for populating those `uuid` columns and
    setting up tables with UUID/ULID primary keys:'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些用于填充那些 `uuid` 列并设置具有 UUID/ULID 主键表的实现细节：
- en: PostgreSQL has built in support for UUIDv4 through the `pgcrypto` or the `uuid-ossp`
    extensions.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 通过 `pgcrypto` 或 `uuid-ossp` 扩展内置支持 UUIDv4。
- en: '[PRE0]'
  id: totrans-split-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: CREATE EXTENSION IF NOT EXISTS pgcrypto;
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: CREATE EXTENSION IF NOT EXISTS pgcrypto;
- en: SELECT gen_random_uuid(); --> f449a5bc-a221-4e9d-8819-e7f22b83d8ae
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT gen_random_uuid(); --> f449a5bc-a221-4e9d-8819-e7f22b83d8ae
- en: '[PRE1]'
  id: totrans-split-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This makes it extremely easy to setup a table with a UUIDv4 primary key:'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得使用 UUIDv4 主键设置表格非常容易：
- en: '[PRE2]'
  id: totrans-split-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: CREATE  TABLE my_uuidv4_things(  id  UUID  NOT  NULL  DEFAULT gen_random_uuid(),  name  TEXT  NOT  NULL,
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: CREATE  TABLE my_uuidv4_things(  id  UUID  NOT  NULL  DEFAULT gen_random_uuid(),  name  TEXT  NOT  NULL,
- en: PRIMARY KEY (id) );
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: PRIMARY KEY (id) );
- en: INSERT  INTO my_uuidv4_things(name) VALUES ('foo');
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT  INTO my_uuidv4_things(name) VALUES ('foo');
- en: SELECT * FROM my_uuidv4_things; --                  id                  | name  ----------------------------------------+------  --
    8501364b-b669-4c17-bd98-00bad8cd8f7d | foo
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT * FROM my_uuidv4_things; --                  id                  | name  ----------------------------------------+------  --
    8501364b-b669-4c17-bd98-00bad8cd8f7d | foo
- en: '[PRE3]'
  id: totrans-split-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There don't seem to be any existing built-in or extension functions that support
    generating UUIDv7s in PostgreSQL. To generate a UUIDv7, the function below could
    be tweaked in order to support the correct formatting.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 中似乎没有任何现有的内置或扩展函数支持生成 UUIDv7。要生成 UUIDv7，可以调整下面的函数以支持正确的格式化。
- en: There are a few different implementations of ULIDs in [Go](https://github.com/iCyberon/pg_ulid),
    or in [plsql](https://github.com/geckoboard/pgulid). However, both of these implementations
    return the Crockford Base 32 text representation of ULID (taking up 26 bytes),
    instead of as a UUID datatype (taking up 16 bytes). Due to the natural multiplexing
    nature of PostgreSQL (and relational databases in general), having a consistent,
    shared monotonic counter is difficult, if not impossible. The [Go library](https://github.com/oklog/ulid)
    used by the Go PostgreSQL implementation includes an implementation of the monotonic
    counter, however, it's not used by the Go PostgreSQL extension. The plsql implementation
    doesn't have a monotonic counter at all.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [Go](https://github.com/iCyberon/pg_ulid) 中有几种不同的 ULID 实现，或者在 [plsql](https://github.com/geckoboard/pgulid)
    中也有。然而，这两种实现都返回 ULID 的 Crockford Base 32 文本表示形式（占用 26 字节），而不是 UUID 数据类型（占用 16
    字节）。由于 PostgreSQL（以及一般的关系型数据库）的自然复用特性，拥有一个一致的共享单调计数器是困难的，甚至不可能的。Go PostgreSQL
    实现使用的 [Go 库](https://github.com/oklog/ulid) 包含了单调计数器的实现，然而，它并未被 Go PostgreSQL
    扩展使用。plsql 实现根本没有单调计数器。
- en: 'I wanted a simple ULID PostgreSQL implementation without the complexity of
    the monotonic counter that generated a UUID data typed value. So I wrote one:'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要一个简单的 ULID PostgreSQL 实现，而不需要生成 UUID 数据类型值的单调计数器复杂性。所以我写了一个：
- en: '[PRE4]'
  id: totrans-split-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: CREATE  EXTENSION  IF  NOT  EXISTS pgcrypto;
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: CREATE  EXTENSION  IF  NOT  EXISTS pgcrypto;
- en: CREATE  OR REPLACE  FUNCTION generate_ulid() RETURNS  uuid   AS $$   SELECT
    (lpad(to_hex(floor(extract(epoch  FROM clock_timestamp()) * 1000)::bigint), 12,
    '0') || encode(gen_random_bytes(10), 'hex'))::uuid;
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: CREATE  OR REPLACE  FUNCTION generate_ulid() RETURNS  uuid   AS $$   SELECT
    (lpad(to_hex(floor(extract(epoch  FROM clock_timestamp()) * 1000)::bigint), 12,
    '0') || encode(gen_random_bytes(10), 'hex'))::uuid;
- en: $$  LANGUAGE  SQL;
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: $$  LANGUAGE  SQL;
- en: SELECT generate_ulid(); --> 017eb31e-1440-b69e-d82f-5f0937f823c8
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT generate_ulid(); --> 017eb31e-1440-b69e-d82f-5f0937f823c8
- en: '[PRE5]'
  id: totrans-split-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Breaking down the function:'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 分解函数：
- en: '*   The first half `lpad(to_hex(floor(extract(epoch FROM clock_timestamp())
    * 1000)::bigint), 12, ''0'')` gets the milliseconds since the Unix Epoch, and
    converts it to a hexadecimal string of length 12 (it''ll have a leading 0 for
    the next 500 years or so).'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: '-   第一个部分`lpad(to_hex(floor(extract(epoch FROM clock_timestamp()) * 1000)::bigint),
    12, ''0'')`获取自Unix纪元以来的毫秒数，并将其转换为长度为12的十六进制字符串（接下来大约500年内会有一个前导0）。'
- en: The second half `encode(gen_random_bytes(10), 'hex')` generates 10 random bytes
    and converts them to hexadecimal.
  id: totrans-split-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '-   第二个部分`encode(gen_random_bytes(10), ''hex'')`生成10个随机字节并将它们转换为十六进制。'
- en: Together these make the 16-byte (or 128-bit) ULID label, which is finally cast
    to a UUID data type with `::uuid`.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 二者结合成16字节（或128位）的ULID标签，最后使用`::uuid`转换为UUID数据类型。
- en: 'Our new function can now be used as a default value for a primary key:'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新函数现在可以作为主键的默认值使用：
- en: '[PRE6]'
  id: totrans-split-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: CREATE  TABLE my_ulid_things(  id  UUID  NOT  NULL  DEFAULT generate_ulid(),  name  TEXT  NOT  NULL,
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: CREATE  TABLE my_ulid_things(  id  UUID  NOT  NULL  DEFAULT generate_ulid(),  name  TEXT  NOT  NULL,
- en: PRIMARY KEY (id) );
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: PRIMARY KEY (id) );
- en: INSERT  INTO my_ulid_things(name) VALUES ('foo');
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT  INTO my_ulid_things(name) VALUES ('foo');
- en: SELECT * FROM my_ulid_things; --                  id                  | name  ----------------------------------------+------  --
    017eb31e-1440-b69e-d82f-5f0937f823c8 | foo
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT * FROM my_ulid_things; --                  id                  | name  ----------------------------------------+------  --
    017eb31e-1440-b69e-d82f-5f0937f823c8 | foo
- en: '[PRE7]'
  id: totrans-split-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When compared to the native implementation of `gen_random_uuid()`, `generate_ulid()`
    performs **73% slower** when **generating** 10 million values, but only **31%
    slower** when **generating and inserting** 1 million values.
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与`gen_random_uuid()`的本地实现相比，`generate_ulid()`在生成1000万个值时执行**慢73%**，但在生成和插入100万个值时仅执行**慢31%**。
- en: Meaning that while ULIDs are slower to generate (at least with this implementation),
    they are much faster to insert. My guess is that due to the sequential and highly
    clustered significant bytes of the ULIDs, they are much faster to create the index
    entries for. Meanwhile, the UUIDv4s are extremely sparse, so they are much slower
    to create the index entries for.
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: 意味着，虽然ULID生成速度较慢（至少在这个实现中是这样），但插入速度却快得多。我猜想这是因为ULID的顺序和高度聚集的重要字节，使得创建索引条目的速度快得多。与此同时，UUIDv4非常稀疏，因此创建索引条目的速度要慢得多。
- en: 'Here''s how I got these numbers:'
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我得到这些数字的方法：
- en: '[PRE8]'
  id: totrans-split-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: generate-benchmark.sql
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: generate-benchmark.sql
- en: '[PRE9]'
  id: totrans-split-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-split-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: generate-insert-benchmark.sql
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: generate-insert-benchmark.sql
- en: '[PRE11]'
  id: totrans-split-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-split-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
