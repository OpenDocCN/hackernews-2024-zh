- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:43:38'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:43:38'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The Erlangelist - Why Elixir
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The Erlangelist - Why Elixir
- en: 来源：[https://www.theerlangelist.com/article/why_elixir](https://www.theerlangelist.com/article/why_elixir)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.theerlangelist.com/article/why_elixir](https://www.theerlangelist.com/article/why_elixir)
- en: It’s been about a year since I’ve started using Elixir. Originally, I intended
    to use the language only for blogging purposes, thinking it could help me better
    illustrate benefits of Erlang Virtual Machine (EVM). However, I was immediately
    fascinated with what the language brings to the table, and very quickly introduced
    it to the Erlang based production system I have been developing at the time. Today,
    I consider Elixir as a better alternative for the development of EVM powered systems,
    and in this posts I’ll try to highlight some of its benefits, and also dispell
    some misconceptions about it.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我开始使用 Elixir 已经一年了。最初，我打算仅将这种语言用于博客目的，认为它可以帮助我更好地阐明 Erlang 虚拟机（EVM）的优势。然而，我立即被语言所带来的东西深深迷住，并很快将其引入到我当时正在开发的基于
    Erlang 的生产系统中。今天，我认为 Elixir 是开发基于 EVM 的系统的更好选择，在这些文章中，我将尝试突出一些它的优点，并消除一些关于它的误解。
- en: The problems of Erlang the language
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Erlang 语言的问题
- en: EVM has many benefits that makes it easier to build highly-available, scalable,
    fault-tolerant, distributed systems. There are various testimonials on the Internet,
    and I’ve blogged a bit about some advantages of Erlang [here](http://theerlangelist.com/2012/12/yet-another-introduction-to-erlang.html)
    and [here](http://www.theerlangelist.com/2013/01/erlang-based-server-systems.html),
    and the chapter 1 of my upcoming book [Elixir in Action](https://www.manning.com/books/elixir-in-action-second-edition?a_aid=sjuric)
    presents benefits of both Erlang and Elixir.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: EVM 具有许多优点，使得构建高可用、可扩展、容错、分布式系统变得更加容易。有各种各样的互联网见证，我在这里和这里写了一些关于 Erlang 的优势，并且我即将出版的书《Elixir
    实战》第一章介绍了 Erlang 和 Elixir 的优点。
- en: Long story short, Erlang provides excellent abstractions for managing highly-scalable,
    fault-tolerant systems, which is particularly useful in concurrent systems, where
    many independent or loosely-dependent tasks must be performed. I’ve been using
    Erlang in production for more than three years, to build a long-polling based
    HTTP push server that in peak time serves over 2000 reqs/sec (non-cached). Never
    before have I written anything of this scale nor have I ever developed something
    this stable. The service just runs happily, without me thinking about it. This
    was actually my first Erlang code, bloated with anti-patterns, and bad approaches.
    And still, EVM proved to be very resilient, and run the code as best as it could.
    Most importantly, it was fairly straightforward for me to work on the complex
    problem, mostly owing to Erlang concurrency mechanism.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 长话短说，Erlang 提供了优秀的抽象来管理高度可扩展、容错系统，这在并发系统中特别有用，其中需要执行许多独立或松散依赖的任务。我已经在生产环境中使用
    Erlang 超过三年，用来构建基于长轮询的 HTTP 推送服务器，在高峰期间每秒处理超过 2000 个请求（非缓存）。我以前从未编写过这样规模的东西，也从未开发过这么稳定的东西。服务运行得很顺利，我都不用担心。这实际上是我第一段
    Erlang 代码，充斥着反模式和糟糕的方法。然而，EVM 证明非常有弹性，尽可能地运行代码。最重要的是，对于复杂问题，我工作起来相当直接，主要归功于 Erlang
    的并发机制。
- en: However, despite some great properties, I never was (and I’m still not) quite
    comfortable programming in Erlang. The coding experience somehow never felt very
    fluent, and the resulting code was always burdened with excessive boilerplate
    and duplication. **The problem was not the language syntax**. I did a little Prolog
    back in my student days, and I liked the language a lot. By extension, I also
    like Erlang syntax, and actually think it is in many ways nicer and more elegant
    than Elixir. And this is coming from an OO developer who spent most of his coding
    time in languages such as Ruby, JavaScript, C# and C++.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有些优点，我从来不太喜欢（到现在也是如此）用 Erlang 编程。编程体验总是感觉不太流畅，最终的代码总是充斥着过多的样板和重复。**问题并不在语言语法上**。在学生时代，我稍微接触了一些
    Prolog，我非常喜欢那种语言。由此延伸，我也喜欢 Erlang 的语法，实际上认为它在很多方面比 Elixir 更加优雅。这是从一个大部分时间用 Ruby、JavaScript、C#
    和 C++ 等语言编码的面向对象开发者口中说出来的。
- en: The problem I have with Erlang is that the language is somehow too simple, making
    it very hard to eliminate boilerplate and structural duplication. Conversely,
    the resulting code gets a bit messy, being harder to write, analyze, and modify.
    After coding in Erlang for some time, I thought that functional programming is
    inferior to OO, when it comes to efficient code organization.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我对 Erlang 的问题是，这种语言似乎过于简单，使得很难消除样板和结构重复。相反，生成的代码有点混乱，编写、分析和修改都更加困难。在使用 Erlang
    编程一段时间后，我认为函数式编程在高效的代码组织方面不如面向对象。
- en: What Elixir is (not)
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Elixir 是什么（不是什么）
- en: This is where Elixir changed my opinion. After I’ve spent enough time with the
    language, I was finally able to see benefits and elegance of functional programming
    more clearly. Now I can’t say anymore that I prefer OO to FP. I find the coding
    experience in Elixir much more pleasant, and I’m able to concentrate on the problem
    I’m solving, instead of dealing with the language’s shortcomings.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Elixir 改变了我的看法的地方。在我花足够的时间与这门语言一起后，我终于能够更清楚地看到函数式编程的优点和优雅之处。现在我不能再说我更喜欢面向对象而不是函数式编程了。我觉得在
    Elixir 中编码体验更加愉快，我能够集中精力解决我遇到的问题，而不是处理语言的缺陷。
- en: 'Before discussing some benefits of Elixir, there is an important thing I’d
    like to stress: **Elixir is not Ruby for Erlang**. It is also not CoffeeScript,
    Clojure, C++ or something else for Erlang. Relationship between Elixir and Erlang
    is unique, with Elixir being often semantically very close to Erlang, but in addition
    bringing many ideas from different languages. The end result may on surface look
    like Ruby, but I find it much more closer to Erlang, with both languages completely
    sharing the type system, and taking the same functional route.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论 Elixir 的一些好处之前，有一件重要的事情我想强调：**Elixir 不是 Ruby 对于 Erlang**。它也不是 CoffeeScript、Clojure、C++
    或其他什么语言对于 Erlang。Elixir 与 Erlang 的关系是独特的，Elixir 通常在语义上非常接近 Erlang，但还从其他语言带来了许多想法。最终的结果可能在表面上看起来像
    Ruby，但我发现它更接近 Erlang，这两种语言完全共享类型系统，并采用相同的功能路线。
- en: So what is Elixir? To me, it is an Erlang-like language with improved code organization
    capabilities. This definition differs from what you’ll see on the official page,
    but I think it captures the essence of Elixir, when compared to Erlang.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是 Elixir？对我来说，它是一种类似于 Erlang 的语言，具有改进的代码组织能力。这个定义与您在官方页面上看到的不同，但我认为它捕捉了
    Elixir 的本质，与 Erlang 相比。
- en: 'Let me elaborate on this. In my opinion, a programming language has a couple
    of roles:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我详细说明一下。在我看来，编程语言有几个角色：
- en: It serves as an interface that allows programmers to control something, e.g.
    a piece of hardware, a virtual machine, a running application, UI layout, …
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它作为一个接口，允许程序员控制某些东西，例如硬件的一部分、虚拟机、运行中的应用程序、UI 布局等等。
- en: It shapes the way developers think about the world they’re modeling. An OO language
    will make us look for entities with state and behavior, while in FP language we’ll
    think about data and transformations. A declarative programming language will
    force us to think about rules, while in imperative language we’ll think more about
    sequence of actions.
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它塑造了开发者对他们建模的世界的思考方式。面向对象的语言会让我们寻找具有状态和行为的实体，而在函数式编程语言中，我们会思考数据和转换。声明式编程语言会迫使我们思考规则，而在命令式语言中，我们会更多地考虑操作的顺序。
- en: It provides tools to organize the code, remove duplications, boilerplate, noise,
    and hopefully model the problem as closely as possible to the way we understand
    it.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了工具来组织代码，消除重复、样板、噪声，并希望尽可能地模拟我们理解问题的方式。
- en: Erlang and Elixir are completely identical in first two roles - they target
    the same “thing” (EVM), and they both take a functional approach. It is in role
    three where Elixir improves on Erlang, and gives us additional tools to organize
    our code, and hopefully be more efficient in writing production-ready, maintainable
    code.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: Erlang 和 Elixir 在前两个角色上完全相同 - 它们都针对同样的“东西”（EVM），并且它们都采用功能性方法。在第三个角色中，Elixir
    改进了 Erlang，并为我们提供了额外的工具来组织我们的代码，并希望在编写生产就绪、可维护的代码时更加高效。
- en: Ingredients
  id: totrans-split-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成分
- en: Much has been said about Elixir on the Internet, but I especially like two articles
    from Devin Torres which you can find [here](https://devinus.io/the-excitement-of-elixir/)
    and [here](https://devinus.io/elixir-its-not-about-syntax/). Devin is an experienced
    Erlang developer, who among other things wrote a popular [poolboy](https://github.com/devinus/poolboy)
    library, so it’s worth reading what he thinks about Elixir.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上已经有很多关于 Elixir 的讨论，但我特别喜欢 Devin Torres 的两篇文章，你可以在[这里](https://devinus.io/the-excitement-of-elixir/)和[这里](https://devinus.io/elixir-its-not-about-syntax/)找到。Devin
    是一位经验丰富的 Erlang 开发者，除其他事情外还编写了流行的 [poolboy](https://github.com/devinus/poolboy)
    库，所以值得了解他对 Elixir 的看法。
- en: I’ll try not to repeat much, and avoid going into many mechanical details. Instead,
    let’s do a brief tour of main tools that can be used for better code organization.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我会尽量不重复太多内容，并避免深入许多机械细节。相反，让我们简要介绍一下可以用于更好代码组织的主要工具。
- en: Metaprogramming
  id: totrans-split-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元编程
- en: Metaprogramming in Elixir comes in a couple of flavors, but the essence is the
    same. It allows us to write concise constructs that seems as if they’re a part
    of the language. These constructs are in compile-time then transformed into a
    proper code. On a mechanical level, it helps us remove structural duplication
    - a case where two pieces of code share the same abstract pattern, but they differ
    in many mechanical details.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Elixir 中的元编程有几种不同的风格，但本质是相同的。它允许我们编写简洁的构造，看起来就像它们是语言的一部分。然后这些构造在编译时转换为适当的代码。从机械层面上来说，它帮助我们消除结构重复——两段代码共享相同的抽象模式，但在许多机械细节上有所不同。
- en: 'For example, a following snippet presents a sketch of a module models a `User`
    record:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下片段展示了一个模块草图，用于建模 `User` 记录：
- en: '[PRE0]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Some other type of record will follow this pattern, but contain different fields.
    Instead of copy-pasting this pattern, we can use Elixir `defrecord` macro:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 后续将出现其他类型的记录，但包含不同的字段。我们可以使用 Elixir 的 `defrecord` 宏，而不是复制粘贴这种模式：
- en: '[PRE1]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Based on the given definition, `defrecord` generates a dedicated module that
    contains utility functions for manipulating our `User` record. Thus, the common
    pattern is stated only in one place (the code of `defrecord` macro), while the
    particular logic is relieved of mechanical implementation details.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的定义，`defrecord` 生成一个专用模块，其中包含用于操作我们的 `User` 记录的实用函数。因此，通用模式仅在一个地方（`defrecord`
    宏的代码）陈述，而特定逻辑则摆脱了机械实现细节。
- en: Elixir macros are nothing like C/C++ macros. Instead of working on strings,
    they are something like compile-time Elixir functions that are called in the middle
    of parsing, and work on the abstract syntax tree (AST), which is a code represented
    as Elixir data structure. Macro can work on AST, and spit out some alternative
    AST that represents the generated code. Consequently, macros are executed in compile-time,
    so once we come to runtime, the performance is not affected, and there are no
    surprise situations where some piece of code can change the definition of a module
    (which is possible for example in JavaScript or Ruby).
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: Elixir 宏与 C/C++ 宏完全不同。它们不是处理字符串，而是类似于编译时的 Elixir 函数，在解析中被调用，并在抽象语法树（AST）上工作，即以
    Elixir 数据结构表示的代码。宏可以在 AST 上工作，并输出表示生成代码的替代 AST。因此，宏在编译时执行，因此一旦到达运行时，性能不受影响，并且不会出现某些代码片段可以更改模块定义的意外情况（例如在
    JavaScript 或 Ruby 中可能发生的情况）。
- en: Owing to macros, most of Elixir, is actually implemented in Elixir, including
    constructs such as `if`, `unless`, or unit testing support. Unicode support works
    by reading UnicodeData.txt file, and generating the corresponding implementation
    of Unicode aware string function such as `downcase` or `upcase`. This in turn
    makes it easier for developers to contribute to Elixir.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于宏，大部分 Elixir 实际上是用 Elixir 实现的，包括诸如 `if`、`unless` 或单元测试支持之类的构造。Unicode 支持通过读取
    UnicodeData.txt 文件，并生成相应的 Unicode 意识字符串函数的实现，例如 `downcase` 或 `upcase`。这反过来使得开发者更容易为
    Elixir 贡献。
- en: Macros also allow 3rd party library authors to provide internal DSLs that naturally
    fit in language. [Ecto](https://github.com/elixir-lang/ecto) project, that provides
    embedded integrated queries, something like LINQ for Elixir, is my personal favorite
    that really showcases the power of macros.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 宏还允许第三方库作者提供自然适合语言的内部 DSL。[Ecto](https://github.com/elixir-lang/ecto) 项目提供了嵌入式集成查询，类似于
    Elixir 的 LINQ，是我个人特别喜欢的项目，它真正展示了宏的强大功能。
- en: I’ve seen people sometimes dismissing Elixir, stating they don’t need metaprogramming
    capabilities. While extremely useful, metaprogramming can also become very dangerous
    tool, and it is advised to carefully consider their usage. That said, there are
    many features that are powered by metaprogramming, and even if you don’t write
    macros yourself, you’ll still probably enjoy many of these features, such as aforementioned
    records, Unicode support, or integrated query language.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经看到有人有时会忽略 Elixir，声称他们不需要元编程能力。虽然极其有用，元编程也可能成为一种非常危险的工具，建议仔细考虑它们的使用。也就是说，有许多功能是由元编程支持的，即使你自己不编写宏，你可能仍然会享受到许多这些功能，比如前面提到的记录，Unicode
    支持或集成查询语言。
- en: Pipeline operator
  id: totrans-split-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管道操作符
- en: This seemingly simple operator is so useful, I “invented” its [Erlang equivalent](https://github.com/sasa1977/fun_chain)
    even before I was aware it exists in Elixir (or other languages for that matter).
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个看似简单的操作符非常有用，我甚至在意识到它在 Elixir（或其他语言中同样存在）之前，“发明”了它的[Erlang 等效](https://github.com/sasa1977/fun_chain)。
- en: 'Let’s see the problem first. In Erlang, there is no pipeline operator, and
    furthermore, we can’t reassign variables. Therefore, typical Erlang code will
    often be written with following pattern:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们看看问题。在 Erlang 中，没有管道操作符，而且我们也不能重新分配变量。因此，典型的 Erlang 代码通常以以下模式编写：
- en: '[PRE2]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is a very clumsy code that relies on intermediate variables, and correct
    passing of the last result to the next call. I actually had a nasty bug because
    I accidentally used `State6` in one place instead of `State7`.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一段非常笨拙的代码，依赖中间变量，并正确地将最后的结果传递给下一个调用。我实际上因为在一个地方意外地使用了`State6`而不是`State7`而出现了一个讨厌的错误。
- en: 'Of course, we can go around by inlining function calls:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以通过内联函数调用来绕过：
- en: '[PRE3]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, this code can soon get ugly, and the problem is often aggravated
    when transformation functions receive additional arguments, and the number of
    transformation increases.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，这段代码很快就会变得丑陋，当转换函数接收到额外的参数并且转换的数量增加时，问题通常会加剧。
- en: 'The pipeline operator makes it possible to combine various operations without
    using intermediate variables:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 管道操作符使得可以组合各种操作而无需使用中间变量：
- en: '[PRE4]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The code reads like the prose, from top to bottom, and highlights one of the
    strengths of FP, where we treat functions as data transformers that are combined
    in various ways to achieve the desired result.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 代码从上到下读起来像散文，并突显了 FP 的一项优势，即我们将函数视为数据转换器，以各种方式组合以达到期望的结果。
- en: 'For example, the following code computes the sum of squares of all positive
    numbers of a list:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码计算列表中所有正数的平方和：
- en: '[PRE5]'
  id: totrans-split-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The pipeline operator works extremely well because the API in Elixir libraries
    follows the “subject (noun) as the first argument” convention. Unlike Erlang,
    Elixir takes the stance that all functions should take the thing they operate
    on as the first argument. So `String` module functions take string as the first
    argument, while `Enum` module functions take enumerable as the first argument.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 管道操作符非常有效，因为 Elixir 库中的 API 遵循“主题（名词）作为第一个参数”的约定。与 Erlang 不同，Elixir 认为所有函数都应该将它们操作的东西作为第一个参数。因此，`String`
    模块函数以字符串作为第一个参数，而 `Enum` 模块函数以可枚举对象作为第一个参数。
- en: Polymorphism via protocols
  id: totrans-split-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过协议实现多态性
- en: Protocols are the Elixir way of providing something roughly similar to OO interfaces.
    Initially, I wasn’t much impressed with them, but as the time progressed, I started
    seeing many benefits they bring. Protocols allow developers to create a generic
    logic that can be used with any type of data, assuming that some contract is implemented
    for the given data.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 协议是 Elixir 提供类似于 OO 接口的方式。最初，我对它们并不怎么感兴趣，但随着时间的推移，我开始看到它们带来的许多好处。协议允许开发人员创建一个通用的逻辑，可以与任何类型的数据一起使用，假设给定数据实现了某些契约。
- en: 'An excellent example is the [Enum](https://hexdocs.pm/elixir/Enum.html) module,
    that provides many useful functions for manipulating with anything that is enumerable.
    For example, this is how we iterate an enumerable:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是[Enum](https://hexdocs.pm/elixir/Enum.html) 模块，它提供了许多用于操作任何可枚举对象的有用函数。例如，这是我们如何迭代一个可枚举对象的方式：
- en: '[PRE6]'
  id: totrans-split-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`Enum.each` works with different types such as lists, or key-value dictionaries,
    and of course we can add support for our own types by implementing corresponding
    protocol. This is resemblant of OO interfaces, with an additional twist that it’s
    possible to implement a protocol for a type, even if you don’t own its source
    code.'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`Enum.each`可以与不同类型一起工作，如列表或键值字典，当然，我们也可以通过实现相应的协议来为自己的类型添加支持。这类似于 OO 接口，但有一个额外的变化，即可以为一个类型实现协议，即使你没有其源代码。'
- en: 'One of the best example of protocol usefulness is the [Stream](https://hexdocs.pm/elixir/Stream.html)
    module, which implements a lazy, composable, enumerable abstraction. A stream
    makes it possible to compose various enumerable transformations, and then generate
    the result only when needed, by feeding the stream to some function from the `Enum`
    module. For example, here’s the code that computes the sum of squares of all positive
    numbers of a list in a single pass:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 协议实用性的最佳例子之一是[Stream](https://hexdocs.pm/elixir/Stream.html)模块，它实现了一个惰性、可组合的枚举抽象。通过将流馈送给`Enum`模块的某些函数，可以组合各种可枚举的转换，然后仅在需要时生成结果。例如，下面的代码计算列表中所有正数的平方和：
- en: '[PRE7]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In lines 2 and 3, operations are composed, but not yet executed. The result
    is a specification descriptor that implements an `Enumerable` protocol. Once we
    feed this descriptor to some `Enum` function (line 3), it starts producing values.
    Other than supporting protocol mechanism, there is no special laziness support
    from Elixir compiler.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 2 和第 3 行，操作已经组合，但尚未执行。结果是一个实现了`Enumerable`协议的规范描述符。一旦我们将这个描述符传递给某些`Enum`函数（第
    3 行），它就开始产生值。除了支持协议机制外，Elixir 编译器没有特殊的惰性支持。
- en: The mix tool
  id: totrans-split-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mix 工具
- en: The final important piece of puzzle is the tool that help us manage projects.
    Elixir comes bundled with the `mix` tool that does exactly that. This is again
    done in an impressively simple manner. When you create a new project, only 7 files
    are created (including .gitignore and README.md) on the disk. And this is all
    it takes to create a proper OTP application. It’s an excellent example of how
    far can things be simplified, by hiding necessary boilerplate and bureaucracy
    in the generic abstraction.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个重要的 puzzle piece 是帮助我们管理项目的工具。Elixir 自带了`mix`工具，正是它完成了这一任务。这也是以一种令人印象深刻的简单方式完成的。当你创建一个新项目时，只会在磁盘上创建
    7 个文件（包括 .gitignore 和 README.md）。这些就足够创建一个正确的 OTP 应用程序了。这是一个极好的例子，展示了通过在通用抽象中隐藏必要的样板和官僚主义，可以将事情简化到何种程度。
- en: Mix tool supports various other tasks, such as dependency management. The tool
    is also extensible, so you can create your own specific tasks as needed.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: Mix 工具支持各种其他任务，如依赖管理。该工具还是可扩展的，因此您可以根据需要创建自己的特定任务。
- en: Syntactical changes
  id: totrans-split-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语法上的变化
- en: The list doesn’t stop here, and there are many other benefits Elixir gives us.
    Many of these do include syntactical changes from Erlang, such as support for
    variable rebinding, optional parentheses, implicit statement endings, nullability,
    short circuits operators, …
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 列表并不止于此，Elixir 给我们提供了许多其他好处。其中许多包括语法上的变化，例如支持变量重绑定、可选的括号、隐式语句结束、可空性、短路运算符等等。
- en: 'Admittedly, some ambiguity is introduced due to optional parentheses, as illustrated
    in this example:'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 诚然，由于可选的括号引入了一些歧义，正如这个例子所示：
- en: '[PRE8]'
  id: totrans-split-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: However, I use parentheses (except for macros and zero arg functions), so I
    can’t remember experiencing this problem in practice.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我使用括号（除了宏和零参数函数），所以我不记得在实践中遇到过这个问题。
- en: In general, I like many of the decision made in this department. It’s nice to
    be able to write `if` without obligatory `else`. It’s also nice that I don’t have
    to consciously think which character must I use to end the statement.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，我喜欢这个部门做出的许多决定。能够写`if`而不必加上`else`是很好的。不用再有意识地考虑该用哪个字符来结束语句，也是件好事。
- en: 'Even optional parentheses are good, as they support DSL-ish usage of macros,
    making the code less noisy. Without them, we would have to add parentheses when
    invoking macros:'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是可选的括号也是很好的，因为它们支持宏的 DSL-ish 使用方式，使得代码更加简洁。如果没有它们，我们在调用宏时就必须添加括号：
- en: '[PRE9]'
  id: totrans-split-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Still, I don’t find these enhancements to be of crucial importance. They are
    nice finishing touches, but if this was all Elixir had to offer, I’d probably
    still use pure Erlang.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我并不认为这些增强功能至关重要。它们是不错的点睛之笔，但如果这就是 Elixir 提供的全部，我可能仍然会使用纯 Erlang。
- en: Wrapping up
  id: totrans-split-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Much has been said in this article, and yet I feel that the magic of Elixir
    is far from being completely captured. The language preference is admittedly something
    subjective, but I feel that Elixir really improves on Erlang foundations. With
    more than three years of production level coding in Erlang, and about a year of
    using Elixir, I simply find Elixir experience to be much more pleasant. The resulting
    code seems more compact, and I can be more focused on the problem I’m solving,
    instead of wrestling with excessive noise and boilerplate.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中所述内容已经很丰富，但我认为Elixir的魔力远远未被完全发掘。语言偏好固然是主观的，但我认为Elixir确实在Erlang的基础上有所提升。我有三年多的Erlang生产级编码经验，以及大约一年的Elixir使用经验，我发现Elixir的使用体验更加愉快。结果代码看起来更加紧凑，我可以更专注于我所解决的问题，而不用与过多的噪音和样板代码搏斗。
- en: It is for similar reasons that I like EVM. The underlying concurrency mechanisms
    makes it radically easier for me to tackle complexity of a highly loaded server-side
    system that must constantly provide service and perform many simultaneous tasks.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 出于类似的原因，我也喜欢使用EVM。其底层并发机制使得我能够轻松应对高度负载的服务器端系统的复杂性，这种系统必须始终提供服务并执行许多并行任务。
- en: Both Elixir and EVM raise the abstraction bar, and help me tackle complex problems
    with greater ease. This is why I would always put my money behind Elixir/EVM combination
    as the tools of choice for building a server-side system. YMMV of course.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: Elixir和EVM都提高了抽象化程度，并帮助我更加轻松地应对复杂问题。因此我总是会支持用Elixir/EVM组合作为构建服务器端系统的首选工具。当然，个人情况可能有所不同（Your
    mileage may vary）。
