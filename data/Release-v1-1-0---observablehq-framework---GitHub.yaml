- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:37:25'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:37:25'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Release v1.1.0 · observablehq/framework · GitHub
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布 v1.1.0 · observablehq/framework · GitHub
- en: 来源：[https://github.com/observablehq/framework/releases/tag/v1.1.0](https://github.com/observablehq/framework/releases/tag/v1.1.0)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://github.com/observablehq/framework/releases/tag/v1.1.0](https://github.com/observablehq/framework/releases/tag/v1.1.0)
- en: Windows support (and Node 18, too) 🎉
  id: totrans-split-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows支持（还有Node 18）🎉
- en: Framework now supports Windows! Thank you upvoting [#90](https://github.com/observablehq/framework/issues/90).
    👍 Framework internally uses POSIX path delimiters (forward slashes `/`), and now
    converts to the Windows path delimiters (backward slashes `\`) as needed when
    reading or writing files. Please reach out if you encounter any issues.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 框架现在支持Windows操作系统！感谢您为 [#90](https://github.com/observablehq/framework/issues/90)
    点赞。👍 框架内部使用POSIX路径分隔符（正斜杠 `/`），现在在读写文件时根据需要转换为Windows路径分隔符（反斜杠 `\`）。如果您遇到任何问题，请及时联系我们。
- en: We also now support Node 18\. We previously had a runtime dependency on [tsx](https://github.com/privatenumber/tsx),
    allowing us to ship Framework’s source as TypeScript; now we publish pre-built
    JavaScript. This reduces the number of moving parts and means we no longer depend
    on [module customization hooks](https://nodejs.org/docs/latest-v20.x/api/module.html#customization-hooks)
    added in Node 20.6.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在还支持Node 18。我们先前在[tsx](https://github.com/privatenumber/tsx)上有运行时依赖，允许我们将框架的源代码发布为TypeScript；现在我们发布预构建的JavaScript。这减少了组件数量，意味着我们不再依赖于Node
    20.6中添加的[模块定制钩子](https://nodejs.org/docs/latest-v20.x/api/module.html#customization-hooks)。
- en: Self-hosted `npm:` imports 🎉
  id: totrans-split-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自托管的`npm:`导入 🎉
- en: Framework now automatically downloads `npm:` imports from npm during preview
    and build! This means better performance and security for your users as your built
    site has **no external code dependencies**. For example, you can now enforce a
    [content security policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP)
    on your deployed site that disallows cross-origin requests. It also improves performance
    during local preview since you only need to download libraries once, and means
    you can develop offline (say from an airplane without wi-fi). Downloads from npm
    are cached in the `.observablehq/cache/_npm` folder within the source root. You
    can clear the cache and restart the server to re-fetch the latest versions of
    libraries from npm.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 框架现在在预览和构建期间自动从npm下载`npm:`导入！这意味着您的用户在使用构建站点时有更好的性能和安全性，因为您的站点没有**外部代码依赖**。例如，您现在可以强制在部署的站点上执行[内容安全策略](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP)，禁止跨源请求。它还改善了本地预览期间的性能，因为您只需下载库一次，并意味着您可以离线开发（例如在没有Wi-Fi的飞机上）。从npm下载的内容被缓存在源根目录下的`.observablehq/cache/_npm`文件夹中。您可以清除缓存并重新启动服务器以重新获取npm库的最新版本。
- en: 'Self-hosting of `npm:` imports applies to static imports, dynamic imports,
    and import resolutions (`import.meta.resolve`), provided the specifier is a static
    string literal. For example to load D3:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 自托管的`npm:`导入适用于静态导入、动态导入和导入解析（`import.meta.resolve`），前提是规范器是静态字符串文字。例如，加载D3：
- en: '[PRE0]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In both cases above, the latest version of `d3` is resolved and downloaded from
    jsDelivr as an ES module, including all of its transitive dependencies. Implicit
    `npm:` imports, as when you use the built-in `d3` provided by Framework’s standard
    library in Markdown, are also now self-hosted. (If you still want to load a library
    from the CDN at runtime rather than self-hosting, you can import a URL, but we
    don’t recommend this as it is slower and means your site could break when a new
    version of the library is published.)
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述两种情况下，都会从jsDelivr解析并下载`d3`的最新版本作为ES模块，包括其所有传递依赖项。隐式`npm:`导入，例如当您在Markdown中使用框架标准库提供的内置`d3`时，也现在是自托管的。
    （如果您仍希望在运行时从CDN加载库而不是自托管，您可以导入URL，但我们不建议这样做，因为它会导致速度变慢，并且意味着您的站点可能在发布新版本库时出现问题。）
- en: Transitive static imports are also registered as module preloads (`<link rel="modulepreload">`),
    such that the requests happen in parallel and as early as possible, rather than
    being chained. This dramatically improves performance on page load. Framework
    also now preloads `npm:` imports for `FileAttachment` methods, such as `d3-dsv`
    for CSV files.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 传递静态导入也会被注册为模块预加载（`<link rel="modulepreload">`），以便请求可以并行进行，并尽可能早地发生，而不是被链式加载。这显著提高了页面加载性能。框架现在还预加载`npm:`导入，例如用于CSV文件的`d3-dsv`方法。
- en: 'Import resolutions allow you to download files from npm. These files are automatically
    downloaded for self-hosting, too. For example, to load U.S. county geometry:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 导入解析允许您从npm下载文件。这些文件也会自动下载以供自托管。例如，要加载美国县的几何形状：
- en: '[PRE2]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Framework automatically downloads files as needed for [recommended libraries](https://observablehq.com/framework/javascript/imports#implicit-imports),
    and resolves import resolutions in transitive static and dynamic imports. For
    example, `npm:@duckdb/duckdb-wasm` needs WebAssembly bundles, `npm:katex` needs
    a stylesheet and fonts, *etc.* For any dependencies that are not statically analyzable
    (such as `fetch` calls or dynamic arguments to `import`) you can call `import.meta.resolve`
    to register additional files to download from npm.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 框架会根据[推荐的库](https://observablehq.com/framework/javascript/imports#implicit-imports)自动下载所需的文件，并解析静态和动态导入的导入解析。例如，`npm:@duckdb/duckdb-wasm`需要WebAssembly包，`npm:katex`需要样式表和字体，*等等*。对于那些不能静态分析的依赖项（例如`fetch`调用或动态参数传递给`import`的情况），您可以调用`import.meta.resolve`来注册需要从npm下载的其他文件。
- en: Oh, and we’re working on `jsr:` imports for our next release, too. [#956](https://github.com/observablehq/framework/issues/956)
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，我们也正在为下一个版本准备`jsr:`导入功能。[#956](https://github.com/observablehq/framework/issues/956)
- en: CommonMark compatibility 🎉
  id: totrans-split-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CommonMark兼容性 🎉
- en: 'Framework previously had a quirk with blank lines in Markdown. Now it doesn’t,
    so you can write bog-standard Markdown with no nasty surprises! 😌 In particular,
    you can now write Markdown *within* HTML blocks per the [GitHub-flavored Markdown
    specification](https://github.github.com/gfm/#html-blocks):'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 框架以前在Markdown中存在一个问题，即空行的处理。现在问题已经解决，因此您可以使用标准的Markdown书写，不会有任何意外的惊喜！😌 特别是，根据[GitHub风格的Markdown规范](https://github.github.com/gfm/#html-blocks)，您现在可以在HTML块内部编写Markdown：
- en: '[PRE3]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Content-hashed files names on build
  id: totrans-split-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建时文件名使用内容哈希
- en: 'Framework now inserts a content hash into published file names in `_file` and
    `_import`. This ensures cache-breaking on deploy and enables [cache-control: immutable](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#immutable)
    to further improve performance. When deploying to Observable, you’ll automatically
    get optimized caching.'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '框架现在在发布的文件名中插入内容哈希在`_file`和`_import`中。这确保了在部署时破坏缓存，并启用[cache-control: immutable](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#immutable)以进一步提高性能。当部署到Observable时，您将自动获得优化的缓存。'
- en: Draft mode
  id: totrans-split-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 草稿模式
- en: 'The new **draft** option allows you to exclude certain pages from the build.
    This allows you to develop pages locally but prevent them from being published
    until you are ready to share. To mark a page as draft, use front matter:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 新的**草稿**选项允许您在构建中排除某些页面。这使您可以在本地开发页面，但在准备好分享之前阻止它们被发布。要将页面标记为草稿，请使用front matter：
- en: markdown-it plugins
  id: totrans-split-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: markdown-it插件
- en: 'You can now register additional [markdown-it](https://github.com/markdown-it/markdown-it)
    [plugins](https://www.npmjs.com/search?q=keywords:markdown-it-plugin) using the
    [**markdownIt** config option](https://observablehq.com/framework/config#markdownit).
    For example, to use the [markdown-it-footnote](https://github.com/markdown-it/markdown-it-footnote)
    plugin:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以通过[markdown-it配置选项](https://observablehq.com/framework/config#markdownit)注册额外的[markdown-it](https://github.com/markdown-it/markdown-it)
    [插件](https://www.npmjs.com/search?q=keywords:markdown-it-plugin)。例如，要使用[markdown-it-footnote](https://github.com/markdown-it/markdown-it-footnote)插件：
- en: '[PRE4]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And many other improvements…
  id: totrans-split-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有许多其他的改进…
- en: '[Apache ECharts](https://observablehq.com/framework/lib/echarts) is now available
    by default as `echarts` in Markdown. (Though we still prefer our own [Observable
    Plot](https://observablehq.com/framework/lib/plot) and [D3](https://observablehq.com/framework/lib/d3)
    libraries for visualization!)'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[Apache ECharts](https://observablehq.com/framework/lib/echarts)现在作为Markdown中的默认选项`echarts`提供。（尽管我们仍然更喜欢我们自己的[Observable
    Plot](https://observablehq.com/framework/lib/plot)和[D3](https://observablehq.com/framework/lib/d3)库用于可视化！）'
- en: Framework now does live-updating of files referenced in static HTML, such as
    `<img>` and `<video>` elements, and stylesheets. Framework also does live-updating
    if you edit your [custom stylesheet](https://observablehq.com/framework/config#style).
    Framework now skips unused built-in modules and minifies CSS during build.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 框架现在对静态HTML中引用的文件（如`<img>`和`<video>`元素以及样式表）进行实时更新。如果编辑了[自定义样式表](https://observablehq.com/framework/config#style)，框架也会进行实时更新。框架现在会跳过未使用的内置模块，并在构建过程中对CSS进行缩小。
- en: Framework’s built-in search now correctly indexes text written in any [Unicode
    writing system](https://en.wikipedia.org/wiki/Script_(Unicode)). Diacritics and
    HTML entities are normalized before indexing; for example, you can now type “manana”
    and retrieve pages containing “mañana” and “ma&ntilde;ana”. Indexing no longer
    crashes when a title is not a string. The home page is now included in the index.
    The new [**keywords** option](https://observablehq.com/framework/search) allows
    indexing of additional boosted words in the front matter. And search results no
    longer show a spurious scrollbar.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 框架的内置搜索现在可以正确索引使用任何[Unicode编写系统](https://en.wikipedia.org/wiki/Script_(Unicode))的文本。索引之前会对变音符号和HTML实体进行规范化；例如，现在您可以键入“manana”并检索包含“mañana”和“ma&ntilde;ana”的页面。当标题不是字符串时，索引不再崩溃。首页现在包含在索引中。新的[**关键词选项**](https://observablehq.com/framework/search)允许在前事项中索引额外增强的词语。搜索结果不再显示不必要的滚动条。
- en: '`FileAttachment.url()` now returns an absolute URL rather than a relative path.
    `FileAttachment.mimeType` is now `"application/octet-stream"` instead of `"null"`
    when the MIME type is not known. Older browsers that do not yet support the CSS
    `:has()` selector are now supported. Framework no longer considers the `HOSTNAME`
    and `PORT` environment variables when starting the preview server; use the `--host`
    and `--port` command-line arguments instead. Markdown headers now have text-wrap:
    balance applied in default styles.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`FileAttachment.url()` 现在返回绝对URL而不是相对路径。当MIME类型未知时，`FileAttachment.mimeType`
    现在是`"application/octet-stream"`而不是`"null"`。不再支持不支持CSS `:has()` 选择器的旧版浏览器。在启动预览服务器时，框架不再考虑
    `HOSTNAME` 和 `PORT` 环境变量；而是使用命令行参数 `--host` 和 `--port`。Markdown标题现在在默认样式中应用了`text-wrap:
    balance`。'
- en: All this in less than three weeks since launch! 😅 Thanks for all the feedback
    and encouragement, y’all.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都发生在发布不到三周之内！😅 感谢大家的反馈和鼓励。
- en: New Contributors
  id: totrans-split-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新的贡献者
- en: '**Full Changelog**: [`v1.0.0...v1.1.0`](https://github.com/observablehq/framework/compare/v1.0.0...v1.1.0)'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**完整更新日志**: [`v1.0.0...v1.1.0`](https://github.com/observablehq/framework/compare/v1.0.0...v1.1.0)'
