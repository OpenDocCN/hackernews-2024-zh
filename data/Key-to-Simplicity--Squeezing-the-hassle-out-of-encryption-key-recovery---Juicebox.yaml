- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:06:13'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:06:13'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Key to Simplicity: Squeezing the hassle out of encryption key recovery – Juicebox'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化的关键：摆脱加密密钥恢复的麻烦 – Juicebox
- en: 来源：[https://www.juicebox.xyz/blog/key-to-simplicity-squeezing-the-hassle-out-of-encryption-key-recovery](https://www.juicebox.xyz/blog/key-to-simplicity-squeezing-the-hassle-out-of-encryption-key-recovery)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.juicebox.xyz/blog/key-to-simplicity-squeezing-the-hassle-out-of-encryption-key-recovery](https://www.juicebox.xyz/blog/key-to-simplicity-squeezing-the-hassle-out-of-encryption-key-recovery)
- en: Cryptography transforms the impossible task of safeguarding extensive data transmitted
    and stored across numerous systems and networks into the simpler task of securing
    a small singular key in one location. It is a magical thing. However, as services
    increasingly adopt end-to-end encryption for privacy features, this single small
    key has emerged as something with challenges and problems of its own.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学将在多个系统和网络中传输和存储的庞大数据的保护任务转变为在一个位置安全地保护一个小而独特的密钥的简单任务。这是一种神奇的事情。然而，随着服务越来越多地采用端到端加密以提供隐私功能，这个小而独特的密钥也因其自身的挑战和问题而显现出来。
- en: One of the most notable challenges is ensuring that someone (but only that someone!)
    has *continued* access to the encryption keys protecting their data, regardless
    of whether they reinstall an app, lose their phone, or encounter any of the other
    myriad pitfalls of life.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最引人注目的挑战之一是确保某人（但仅限于某人！）持续访问保护其数据的加密密钥，无论他们是否重新安装应用程序，丢失手机，或遇到生活中的其他种种困难。
- en: Unfortunately, the default approach to these problems is often to place the
    burden directly onto the user by requiring them to manage a backup of their secret
    key. These keys are too long to memorize and are challenging for users to store
    securely. This complexity becomes especially evident when users need to input
    their key material on a new device, leading some to opt for less secure alternatives
    instead of navigating the secure platform.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，解决这些问题的默认方法通常是直接将负担放在用户身上，要求他们管理密钥的备份。这些密钥过长，无法记忆，并且用户难以安全存储。当用户需要在新设备上输入他们的密钥材料时，这种复杂性尤为突出，导致一些人选择非安全的替代方案，而不是使用安全平台。
- en: Unlocking the key conundrum
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解锁密钥难题
- en: Various solutions have been proposed to address this issue. In the web3/crypto
    space, seed phrases offer a slight simplification by representing a key as a series
    of words, but they still require users to manage lengthy and unmemorable strings.
    Passkeys prove more compelling by eliminating the need for users to remember key
    material, but introduce their own UX challenges when storing and transferring
    this material across devices, and their own security challenges when considering
    how they are backed up themselves.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决这个问题上提出了各种解决方案。在 web3/crypto 领域，种子短语通过将密钥表示为一系列单词略微简化了这一过程，但仍然需要用户管理冗长且不易记忆的字符串。而传递密码则更具吸引力，因为它消除了用户记忆密钥材料的需要，但在设备间存储和传输材料时，以及考虑到它们自身备份时的安全挑战，引入了自己的用户体验挑战。
- en: The field of “password based encryption” aimed to solve this issue by transforming
    short user-memorable passwords into encryption keys through iterative hashing
    or the like, such that an encryption key can always be recovered from something
    that a user can remember. However, regardless of how a key derivation function
    is tuned, these systems have proven very vulnerable to attackers that [employ
    dictionary or brute force attacks to make guesses](https://www.nytimes.com/2014/08/06/technology/russian-gang-said-to-amass-more-than-a-billion-stolen-internet-credentials.html)
    until they too are able to recover the correct key.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: “基于密码的加密”领域旨在通过迭代哈希或类似方法将短用户可记忆的密码转换为加密密钥，以便始终可以从用户可以记住的东西中恢复加密密钥来解决这一问题。然而，无论如何调整密钥派生函数，这些系统都被证明对攻击者非常脆弱，攻击者可以使用字典或暴力攻击进行猜测，直到他们能够恢复正确的密钥为止。
- en: Some of the most promising solutions to date leverage secure hardware, such
    as programmable Hardware Security Modules (HSMs). The innovation here is that
    secure hardware can be used to limit an attacker’s ability to make guesses, so
    that short user-memorable inputs can be transformed into encryption keys without
    the same risks of brute forcing or dictionary attacks that came with traditional
    password based encryption.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止，一些最有前途的解决方案利用安全硬件，如可编程的硬件安全模块（HSM）。创新之处在于安全硬件可用于限制攻击者进行猜测的能力，因此可以将用户易记输入转换为加密密钥，而不会像传统基于密码的加密那样面临暴力破解或字典攻击的风险。
- en: Indeed, companies like Apple and WhatsApp [use programmable HSMs in this way](https://engineering.fb.com/2021/09/10/security/whatsapp-e2ee-backups/)
    to enable end-to-end backup of keys protecting some user data. Their interface
    typically involves logging into an account (using an Apple ID or phone number)
    and entering a 6-digit PIN. This PIN is indirectly used to protect a secret, and
    the HSM prevents an attacker (including the operator) from brute forcing. Signal’s
    [Secure Value Recovery](https://signal.org/blog/secure-value-recovery/) was an
    initial proof of concept for this type of system, but relies on a weaker version
    of secure hardware (Intel’s SGX) to provide a simplified PIN based user interface
    using a similar underlying mechanism.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，像苹果和WhatsApp这样的公司 [以这种方式使用可编程HSM](https://engineering.fb.com/2021/09/10/security/whatsapp-e2ee-backups/)
    来实现一些用户数据保护密钥的端到端备份。它们的接口通常涉及登录到账户（使用苹果ID或电话号码）并输入6位数PIN。这个PIN间接用于保护一个秘密，而HSM防止攻击者（包括操作员）进行暴力破解。Signal的
    [Secure Value Recovery](https://signal.org/blog/secure-value-recovery/) 是这种类型系统的初始概念验证，但依赖较弱版本的安全硬件（Intel的SGX）来提供简化的基于PIN的用户界面，使用类似的底层机制。
- en: However, while relying on hardware security reduces user burden, it assumes
    the inherent security of a specific set of hardware and firmware. The safety of
    your secrets becomes contingent on the security of the hardware used to recover
    them, which can lead to challenges in keeping up with evolving hardware vulnerabilities.
    Moreover, secure hardware is often performance-constrained, outdated, and costly,
    posing sustainability issues at scale.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，依赖硬件安全性虽然减少了用户的负担，但假设特定一组硬件和固件的固有安全性。您的秘密的安全性取决于用于恢复它们的硬件的安全性，这可能导致在跟上硬件漏洞演变方面面临挑战。此外，安全硬件通常受性能限制，过时且昂贵，存在规模化可持续性问题。
- en: 'Juicebox: Blending ease and security without the pulp'
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Juicebox：混合了便利和安全性，无需果肉
- en: We have designed Juicebox to solve these problems. Like some of the most promising
    solutions to date, Juicebox allows a user to recover their secret material by
    remembering a short PIN, without having access to any previous devices – but also
    without placing trust in any single party or hardware manufacturer.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设计了Juicebox来解决这些问题。与迄今为止一些最有前途的解决方案一样，Juicebox允许用户通过记住一个简短的PIN来恢复他们的秘密材料，而无需访问任何先前的设备
    - 但也无需信任任何单一方或硬件制造商。
- en: 'Additionally, Juicebox:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Juicebox：
- en: Never gives any service access to a user’s secret material or PIN.
  id: totrans-split-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绝不会向任何服务提供对用户秘密材料或PIN的访问。
- en: Distributes trust across mutually distrusting services, eliminating the need
    to trust any singular server operator or hardware vendor.
  id: totrans-split-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分布式信任跨互不信任的服务，消除对任何单个服务器操作者或硬件供应商的信任需求。
- en: Prevents brute-force attacks by limiting attempts.
  id: totrans-split-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过限制尝试次数来防止暴力攻击。
- en: Allows auditing of secret access attempts.
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许审计秘密访问尝试。
- en: We’re able to achieve these goals without the security trade-offs seen in HSMs
    alone by combining existing, proven distributed cryptography techniques to minimize
    the risks traditionally associated with them. All while keeping user burden low
    by allowing recovery through memorable low-entropy PINs, and maintaining similar
    security to solutions utilizing high-entropy keys.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合现有的、经过验证的分布式密码学技术来最小化传统上与之相关的风险，我们能够在不牺牲安全的情况下实现这些目标。同时，通过允许通过记忆低熵PIN进行恢复，并保持与使用高熵密钥的解决方案类似的安全性，从而减少用户的负担。
- en: Learning to share
  id: totrans-split-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学会分享
- en: 'The most straightforward version of standard HSM based key recovery looks like
    this:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 标准HSM基础密钥恢复的最简单版本如下：
- en: The client establishes a secure connection with the process running in the HSM.
  id: totrans-split-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端与运行在HSM中的进程建立了安全连接。
- en: The client transmits a key to the HSM, along with a PIN the user selects.
  id: totrans-split-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端将一个密钥传输到HSM，以及用户选择的PIN。
- en: The HSM securely stores the key, the PIN, and a guess counter associated with
    that user.
  id: totrans-split-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HSM 安全地存储密钥、PIN 和与该用户关联的猜测计数器。
- en: In the future, the HSM will return the key to the client if it can present the
    correct PIN.
  id: totrans-split-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将来，如果客户端能够提供正确的 PIN，HSM 将返回密钥给客户端。
- en: The HSM uses the guess counter to limit the total number of possible PIN attempts
    a client gets.
  id: totrans-split-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HSM 使用猜测计数器来限制客户端可以尝试的可能 PIN 总数。
- en: Obviously, if the HSM is compromised, all user data is compromised along with
    it. For Juicebox, our initial challenge was to sever this link between the security
    of a user secret and the security of the single server where it is stored.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 显而易见，如果 HSM 被破坏，所有用户数据也将一并被破坏。对于 Juicebox，我们最初的挑战是切断用户秘密的安全与存储它的单个服务器安全之间的联系。
- en: The first step is to allow for distributing trust beyond a single organization
    or HSM vendor. Juicebox employs a strategy of distributing secrets across ***n***
    independent services, each implementing the ***Juicebox Protocol***, and retrieving
    them from a ***threshold*** set where ***n >= threshold***. We refer to each of
    these services as a ***realm***.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是允许信任分布超出单一组织或 HSM 供应商。Juicebox 采用分发秘密到 ***n*** 个独立服务的策略，每个服务都实现 ***Juicebox
    协议***，并从 ***阈值*** 集合中检索，其中 ***n >= threshold***。我们称这些服务中的每一个为 ***领域***。
- en: At a glance, distributing secrets seems straightforward – [secret sharing schemes](https://en.wikipedia.org/wiki/Shamir%27s_secret_sharing)
    have been widely used for almost half a century. However, it is not that simple.
    Running the naive approach outlined above across multiple realms, but replacing
    a client key with a client key share (a threshold shard of a key), does not actually
    help. If a single realm is compromised, the attacker can get the PIN out and use
    it to retrieve a threshold of the other key shares from the other realms.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，分发秘密似乎很简单 - [秘密共享方案](https://en.wikipedia.org/wiki/Shamir%27s_secret_sharing)
    已经广泛使用了将近半个世纪。然而，事情并不那么简单。在多个领域中运行上面概述的朴素方法，但用客户端密钥份额（密钥的阈值碎片）替换客户端密钥实际上并没有帮助。如果一个领域被入侵，攻击者可以获取
    PIN 并使用它从其他领域中检索密钥份额的阈值。
- en: Instead, a different approach is required that ensures neither a user’s PIN
    nor their full key ever leaves their device. This is a place where oblivious pseudorandom
    functions (OPRFs) can work their magic!
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，需要一种不同的方法，确保用户的 PIN 和他们的完整密钥都不会离开他们的设备。这是无视伪随机函数（OPRFs）可以施展魔力的地方！
- en: Oblivious, obviously
  id: totrans-split-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无视，显而易见
- en: An OPRF is a cryptographic primitive that enables a realm to securely evaluate
    a function on a client’s input. This evaluation ensures the server learns nothing
    about the client’s input and the client learns nothing about the server’s private
    key beyond the result of the function.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: OPRF 是一种加密原语，使一个领域能够安全地对客户端的输入进行函数评估。此评估确保服务器不会了解客户端输入的任何内容，客户端也不会了解服务器除了函数结果以外的私钥。
- en: 'Here''s how it works:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的工作原理：
- en: The client generates a random blinding factor to obscure a user's PIN, creating
    a "blinded" version of the PIN.
  id: totrans-split-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端生成一个随机的混淆因子来模糊用户的 PIN，从而创建一个“混淆”的 PIN 版本。
- en: This blinded PIN is sent to a realm, where a long-lived private key is used
    to compute a result without knowledge of the original PIN.
  id: totrans-split-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个混淆的 PIN 被发送到一个领域，领域使用长期的私钥计算结果，而不知道原始的 PIN。
- en: Upon receiving the blinded result from the realm, the client removes the blinding
    factor, revealing the final result for the realm's private key and the original
    PIN.
  id: totrans-split-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在从领域接收到混淆结果后，客户端移除混淆因子，揭示最终结果用于领域的私钥和原始 PIN。
- en: This final result can be used as a recoverable encryption key.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最终结果可以用作可恢复的加密密钥。
- en: However, when you're dealing with ***threshold*** realms, controlled by any
    number of operators, this model becomes impractical. Executing an OPRF evaluation
    for each realm (and calculating ***threshold*** independent results) incurs significant
    performance costs. Moreover, if one realm's private key is compromised, it undermines
    trust in that realm for all users.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当你处理由任意数量的操作员控制的 ***threshold*** 领域时，这种模型变得不切实际。为每个领域执行 OPRF 评估（并计算 ***threshold***
    个独立结果）会产生显著的性能成本。此外，如果一个领域的私钥被破坏，它将破坏对所有用户的该领域的信任。
- en: Enter [Threshold OPRFs (T-OPRFs)](https://eprint.iacr.org/2017/363.pdf) – a
    variant on the traditional OPRF specifically designed to solve both of these problems
    by combining secret sharing with OPRFs. Each realm's private key becomes a unique
    share of a random root private key created on the client during secret storage.
    This mathematical association of realm private keys enables us to optimize the
    operation to a single T-OPRF evaluation across the entire threshold of realms.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 引入[Threshold OPRFs (T-OPRFs)](https://eprint.iacr.org/2017/363.pdf) - 这是传统OPRF的一种变体，专门设计用于通过将秘密共享与OPRF结合来解决这两个问题。每个领域的私钥成为客户端在秘密存储期间创建的随机根私钥的唯一份额。这种领域私钥的数学关联使我们能够将整个阈值领域的操作优化为单个T-OPRF评估。
- en: By creating shares of a single blinded input, and later reconstructing the blinded
    result shares received from each realm, we can reduce an entire threshold set
    to a single shared result. Additionally, since this approach requires the client
    to generate the associated keys for each realm, the client can also rotate those
    keys anytime it updates the stored secret.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建单个被盲目输入的份额，并稍后重建来自每个领域的被盲目结果份额，我们可以将整个阈值集合简化为一个共享结果。此外，由于这种方法要求客户端为每个领域生成相关的密钥，因此客户端也可以在更新存储的秘密时随时旋转这些密钥。
- en: Since it requires ***threshold*** realms to acquire this new shared result,
    it can now be used in place of the user’s PIN in the original model when hashed
    with a realm’s address, greatly reducing the cost of the interaction.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于需要***阈值***领域来获取这个新的共享结果，它现在可以在原始模型中代替用户的PIN，与领域地址哈希化时大大降低了交互成本。
- en: The client generates a root OPRF key, and creates ***n*** shares of it.
  id: totrans-split-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端生成一个根OPRF密钥，并创建***n***份额。
- en: The client computes an OPRF result locally using a PIN the user selects and
    the root key.
  id: totrans-split-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端使用用户选择的PIN和根密钥在本地计算OPRF结果。
- en: The client hashes the result with each realm’s address, deriving ***threshold***
    unlock tags.
  id: totrans-split-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端使用每个领域的地址对结果进行哈希处理，推导***阈值***解锁标签。
- en: The client establishes a secure connection with the process running in ***threshold***
    HSMs.
  id: totrans-split-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端与运行在***阈值*** HSM中的进程建立安全连接。
- en: The client creates shares of a key, and transmits a share to each HSM, along
    with the appropriate unlock tag and OPRF key share.
  id: totrans-split-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端创建了一个关键的份额，并将每个份额与适当的解锁标签和OPRF密钥份额一起传输到每个HSM。
- en: The HSM securely stores the key share, unlock tag, OPRF key share, and a guess
    counter associated with that user.
  id: totrans-split-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HSM安全地存储了密钥份额、解锁标签、OPRF密钥份额以及与该用户相关的猜测计数器。
- en: In the future, the client performs a T-OPRF evaluation with their PIN, and acquires
    the result.
  id: totrans-split-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在未来，客户端使用他们的PIN执行T-OPRF评估，并获得结果。
- en: When the client derives and presents a correct unlock tag, the HSM returns the
    key share.
  id: totrans-split-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当客户端推导并呈现正确的解锁标签时，HSM会返回密钥份额。
- en: The client reconstructs the key using the recovered key shares.
  id: totrans-split-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端使用恢复的密钥份额重构密钥。
- en: The HSM uses the guess counter to limit the total number of possible attempts
    a client gets.
  id: totrans-split-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HSM使用猜测计数器来限制客户端可以尝试的可能尝试总数。
- en: Ensuring integrity
  id: totrans-split-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确保完整性
- en: When performing a T-OPRF over multiple realms, it becomes important to verify
    integrity of the shares so that one misbehaving realm cannot prevent recovery
    of a secret. To achieve this, we need a way to detect misbehaving realms and exclude
    them from recovery.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在多个领域上执行T-OPRF时，验证份额的完整性变得很重要，以防止一个行为不端的领域阻止秘密的恢复。为了实现这一点，我们需要一种方法来检测行为不端的领域并将它们排除在恢复之外。
- en: Since each realm maintains a unique private key share, the client can sign these
    shares before providing them to the realm at storage time, discarding the signing
    key. Then, during recovery, each realm can present its public verification key
    and signature at the start of the T-OPRF evaluation. This allows the client to
    quickly establish a threshold of realms that have matching verification keys,
    with valid signatures.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个领域都维护一个独特的私钥份额，客户端可以在存储时为这些份额签名，然后丢弃签名密钥。然后，在恢复过程中，每个领域可以在T-OPRF评估开始时呈现其公共验证密钥和签名。这使得客户端能够快速建立具有匹配验证密钥和有效签名的领域阈值。
- en: 'Unfortunately, this still leaves the door open for a threshold of realms colluding
    to provide valid signatures that were not generated by the client. To work around
    this issue, we need to additionally establish a consensus on a value which, if
    manipulated, would reveal itself to the client. Since the T-OPRF result is of
    sufficiently high entropy, we can split it into two parts: one continues to be
    utilized for unlocking secrets, while the other serves as a commitment stored
    with each realm. Now, we can establish consensus on a threshold of realms based
    on commitments and verification keys, and during the T-OPRF evaluation we can
    validate that the produced result contains a matching commitment. This prevents
    a colluding threshold of realms from substituting different OPRF key shares and
    signatures without knowing the PIN.'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这仍然给了一个阈值的领域串通一气提供未由客户生成的有效签名的机会。为了解决这个问题，我们需要额外建立对一个值的共识，如果被操纵，将向客户显露自己。由于
    T-OPRF 结果具有足够高的熵，我们可以将其分成两部分：一部分继续用于解锁秘密，而另一部分作为存储在每个领域中的承诺。现在，我们可以基于承诺和验证密钥建立领域的阈值共识，并在
    T-OPRF 评估过程中验证生成的结果是否包含匹配的承诺。这样可以防止串通一气的领域阈值替换不同的 OPRF 密钥份额和签名，而不知道 PIN。
- en: With these protections established, we're in a much better place, but the door
    is still open for a realm to do *everything* right, while still returning a malicious
    OPRF result share to deny a user access to their secrets. We need a way to filter
    individual malicious realms out of a set, so the user can still proceed as long
    as ***threshold*** correct realms are present. The simplest path to solving this
    problem is allowing verification of the individual OPRF result shares, so we can
    reject a share and try a new realm without having to guess at random which realm
    has corrupted the set. Using [zero-knowledge proofs](https://en.wikipedia.org/wiki/Zero-knowledge_proof),
    a realm can share its public key share with clients and provide cryptographic
    proof that its result share was generated correctly using the associated private
    key share.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在确立这些保护措施后，我们的处境好了很多，但仍然有可能让某个领域做到*所有事情*都正确，同时返回一个恶意的 OPRF 结果共享来阻止用户访问他们的秘密。我们需要一种方法来过滤掉集合中的个别恶意领域，以便只要有足够数量的***阈值***正确领域存在，用户仍然可以继续进行。解决这个问题的最简单方法是允许验证单个
    OPRF 结果共享，这样我们就可以拒绝一个共享并尝试一个新的领域，而不是随机猜测哪个领域污染了集合。使用[零知识证明](https://en.wikipedia.org/wiki/Zero-knowledge_proof)，一个领域可以与客户共享其公钥份额，并提供加密证据表明其结果分享是使用关联的私钥份额正确生成的。
- en: There's one last piece of information that realms have the chance to manipulate
    – the user's secret share. Doing so could again potentially deny users access
    to their secrets, since the user would be unable to reconstruct them properly.
    We need a way to verify the secret has not been manipulated since storage. Since
    we can already verify the T-OPRF result, which we know at storage (and the realm
    never learns), we can solve this problem with a simple hash over the secret and
    T-OPRF result. We also want these hashes to be realm specific (so a malicious
    realm can't copy them from another realm), so we mix in the realm's share of the
    secret as well. During recovery, we can validate these values match, and remove
    any realms from the set that have tampered with the secret.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 领域有机会操纵的最后一部分信息是用户的秘密份额。这样做可能再次阻止用户访问他们的秘密，因为用户将无法正确重建它们。我们需要一种方法来验证自存储以来秘密未被操纵。由于我们已经可以验证
    T-OPRF 结果，我们知道在存储时（而领域永远不会得知），我们可以通过对秘密和 T-OPRF 结果进行简单的哈希来解决这个问题。我们还希望这些哈希是领域特定的（因此恶意领域无法从另一个领域复制它们），因此我们还混入领域的秘密份额。在恢复过程中，我们可以验证这些值是否匹配，并从集合中移除任何篡改秘密的领域。
- en: Trusting deliberately
  id: totrans-split-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 故意信任
- en: The new paradigm we've established gives us the opportunity to look at ways
    we could supplement HSM realms in a ***threshold*** set with additional realms
    that are scalable and cost-effective.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经确立的新范例使我们有机会探讨如何在与 HSM 领域共存的***阈值***集合中补充具有可扩展性和经济效益的额外领域。
- en: 'Juicebox supports two basic types of realm:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: Juicebox 支持两种基本类型的领域：
- en: A ***hardware realm*** is a type of realm backed by secure hardware — specifically
    a hardware security module (HSM), like we’ve been discussing. Hardware realms
    provide narrow trust boundaries as the HSM is designed such that only the hardware
    and the code it executes must be trusted. Not the operator.
  id: totrans-split-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***硬件领域*** 是一种由安全硬件支持的领域 —— 具体来说是硬件安全模块（HSM），正如我们一直讨论的那样。硬件领域提供了狭窄的信任边界，因为HSM的设计只信任硬件和它执行的代码。而不信任操作员。'
- en: A ***software realm*** is a type of realm that runs on commodity hardware or
    in common cloud providers. When paired with hardware realms, they can be used
    to distribute trust organizationally without the overhead of operating secure
    hardware.
  id: totrans-split-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***软件领域*** 是一种在通用硬件或常见云提供商上运行的领域。与硬件领域配对时，它们可以用于在不需要运行安全硬件的情况下在组织间分发信任。'
- en: The ***Juicebox Protocol*** is specifically designed such that, as long as you
    are performing your operations on some hardware realms, with a ***threshold***
    that requires their presence, it’s perfectly safe to include software realms in
    the operation to further distribute trust.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: '***Juicebox 协议*** 特别设计为，只要您在某些硬件领域上执行操作，有一个需要它们存在的***阈值***，在操作中包含软件领域是完全安全的，以进一步分散信任。'
- en: A simple configuration could consist of one hardware realm hosted by one organization
    and one software realm hosted by another, with a ***threshold*** of two. More
    complex configurations with multiple HSM vendors and cloud providers can be constructed
    to enable greater availability, reliability, and performance.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的配置可以包括一个由一个组织托管的硬件领域和一个由另一个组织托管的软件领域，具有阈值为两个。更复杂的配置可以使用多个HSM供应商和云提供商，以实现更高的可用性、可靠性和性能。
- en: Hardware hurdles
  id: totrans-split-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件障碍
- en: In traditional setups using HSMs, data is stored within the limited persistent
    memory of these specialized devices. However, due to the constrained storage capacity
    of HSMs, storing a large dataset entirely within them is often impractical or
    even impossible, and any hardware failure can result in a loss of user data without
    the use of complicated replication schemes.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用HSM的传统设置中，数据存储在这些专用设备的有限持久内存中。然而，由于HSM的存储容量受限，完全在其中存储大型数据集通常是不切实际甚至不可能的，任何硬件故障都可能导致用户数据的丢失，而不使用复杂的复制方案。
- en: On the other hand, storing sensitive data in a traditional database would negate
    the benefits of HSMs entirely. Even if the records were stored in encrypted form,
    an HSM could not reliably distinguish an old version of a record from the latest
    version, thereby allowing an adversary with access to the hardware to roll back
    the state. Preventing roll-back attacks is crucial to ensuring realms cannot deny
    access to secrets, while maintaining strict limits on attacker guesses before
    secret material becomes inaccessible.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在传统数据库中存储敏感数据将完全抵消HSM的好处。即使记录以加密形式存储，HSM也无法可靠区分记录的旧版本和最新版本，从而允许访问硬件的对手回滚状态。防止回滚攻击对确保领域不能拒绝访问机密资料至关重要，同时在机密材料变得不可访问之前限制攻击者的猜测次数。
- en: To work around these challenges, Juicebox uses a Merkle-Radix tree, allowing
    the service to scale to billions of secret records. These records are organized
    into trees, and the tree nodes can be safely stored in an external, untrusted
    storage system. The Merkle-Radix tree allows the HSMs to verify they are operating
    on the latest version of the record.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些挑战，Juicebox 使用 Merkle-Radix 树，允许服务扩展到数十亿的机密记录。这些记录被组织成树，树节点可以安全地存储在外部的、不受信任的存储系统中。Merkle-Radix
    树允许HSM验证它们正在操作记录的最新版本。
- en: 'Juicebox’s implementation enables:'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: Juicebox 的实现使以下功能成为可能：
- en: '**Efficient Scalability:** HSMs with limited capacity can efficiently handle
    requests on very large trees (billions of records) while ensuring data confidentiality,
    integrity, and freshness.'
  id: totrans-split-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效可扩展性：** 容量有限的HSM可以在非常大的树（数十亿条记录）上高效处理请求，同时确保数据的机密性、完整性和新鲜性。'
- en: '**Logarithmic Performance:** Tree operations'' performance scales logarithmically
    with the number of records in the tree, a significant improvement over linear
    lookup key approaches.'
  id: totrans-split-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对数性能：** 树操作的性能随着树中记录数量的对数增长，相比线性查找键方法有显著改进。'
- en: '**Dynamic Partitioning:** The overall dataset can be dynamically partitioned
    across multiple trees, facilitating seamless scaling up or down with fast and
    inexpensive repartitioning.'
  id: totrans-split-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态分区：** 可以动态地将整个数据集分区到多个树中，便于通过快速且廉价的重分区实现规模的快速扩展或缩减。'
- en: '**Parallelized Operations:** Reads from each tree can be fully parallelized,
    even during ongoing writes, allowing HSMs to process continuous requests to mutate
    a tree without waiting for results to reach storage.'
  id: totrans-split-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行化操作：** 每棵树的读取都可以完全并行化，即使在进行写入时也是如此，这使得 HSM 能够处理对树进行持续变更的请求，而无需等待结果传输到存储。'
- en: '**Reduced Storage Cost:** Tree nodes can be stored and cached freely on an
    untrusted, non-transactional storage system, reducing storage costs by enabling
    the use of highly scalable cloud storage solutions such as Bigtable.'
  id: totrans-split-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低存储成本：** 树节点可以在不受信任的非事务性存储系统上自由存储和缓存，通过使用高度可扩展的云存储解决方案如 Bigtable，从而降低存储成本。'
- en: Juicebox also employs an authenticated consensus protocol to recover from hardware
    failures, wherein HSMs validate freshness and authenticity on top of commodity
    hardware performing more [traditional consensus](https://en.wikipedia.org/wiki/Consensus_(computer_science)).
    The ability to authenticate the entire Merkle-Radix tree with a single hash allows
    this consensus protocol to reach agreement on just a small amount of metadata
    as the tree evolves, making operations simpler and more efficient.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: Juicebox 还采用了经过身份验证的共识协议来从硬件故障中恢复，其中 HSM 在传统共识协议之上验证新鲜度和真实性。通过单个哈希验证整个 Merkle-Radix
    树的能力，使得这种共识协议能够在树演变时仅达成对少量元数据的一致性，从而使操作更简单、更高效。
- en: Auditing attempts
  id: totrans-split-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审计尝试
- en: In the context of the naive storage system we initially discussed, one significant
    drawback is the lack of transparency regarding a user's attempts to recover their
    secret material. Without this information, users are unable to gauge the security
    of their secret or take necessary precautions if their attempts are exhausted.
    Users have now come to expect a prompt notification of any attempts made against
    their stored secret, akin to receiving alerts for login attempts on their other
    accounts.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们最初讨论的简单存储系统的背景下，一个重要的缺点是缺乏透明度，无法了解用户尝试恢复其秘密材料的情况。没有这些信息，用户无法评估其秘密的安全性，也无法在尝试耗尽后采取必要的预防措施。用户现在期望能够及时收到有关对其存储的秘密进行的任何尝试的通知，类似于接收其它账户的登录尝试警报。
- en: To address these concerns, each realm in our system logs recovery attempts –
    successful and unsuccessful – along with the remaining number of guesses. This
    data is made accessible through an API that clients can subscribe to, enabling
    functionalities such as push notifications to alert users when attempts are made
    against their accounts.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些问题，我们系统中的每个领域都记录了恢复尝试——成功和失败——以及剩余的猜测次数。客户可以通过订阅 API 来访问这些数据，从而实现功能，例如通过推送通知警告用户对其账户进行的尝试。
- en: 'Wrapping up: try a sip of Juicebox'
  id: totrans-split-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结：试试 Juicebox 的一口果汁
- en: Juicebox’s [source code](https://github.com/juicebox-systems) is now available,
    and we encourage you to read our [Juicebox Protocol](https://docs.juicebox.xyz/whitepapers/juiceboxprotocol_revision7_20230807.pdf)
    and [Merkle-Radix tree](https://docs.juicebox.xyz/whitepapers/merkleradix_revision1_20230629.pdf)
    whitepapers for more detailed information. If you’re ready to try it out, a [demo](https://demo.juicebox.xyz/)
    is available, configured for our sandbox realms.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: Juicebox 的 [源代码](https://github.com/juicebox-systems) 现已开放，我们鼓励您阅读我们的 [Juicebox
    协议](https://docs.juicebox.xyz/whitepapers/juiceboxprotocol_revision7_20230807.pdf)
    和 [Merkle-Radix 树](https://docs.juicebox.xyz/whitepapers/merkleradix_revision1_20230629.pdf)
    白皮书获取更详细的信息。如果您准备好尝试，我们的 [演示](https://demo.juicebox.xyz/) 已配置为我们的沙盒领域。
- en: Juicebox represents our earnest effort to tackle the challenges of end-to-end
    encryption key recovery with pragmatism and care. We've combined proven techniques
    like Threshold OPRFs and Merkle-Radix trees to create a solution that prioritizes
    security without sacrificing user experience. Our [doors are open to feedback](mailto:eng@juicebox.me)
    and collaboration as we continue to refine and enhance what we’ve created.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: Juicebox 代表我们解决端到端加密密钥恢复挑战的真诚努力和关怀。我们结合了诸如 Threshold OPRFs 和 Merkle-Radix 树之类的成熟技术，创造了一种既注重安全性又不牺牲用户体验的解决方案。我们在不断完善和增强所创造的内容的同时，也欢迎
    [反馈和合作](mailto:eng@juicebox.me)。
- en: Juicebox was created by Alex Bochannek, Simon Fell, Moxie Marlinspike, Diego
    Ongaro, Daniela Perlein, and Nora Trapp. The project received valuable feedback
    from Trevor Perrin and was audited by NCC in June 2023.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: Juicebox 是由 Alex Bochannek、Simon Fell、Moxie Marlinspike、Diego Ongaro、Daniela
    Perlein 和 Nora Trapp 创建的。该项目收到了 Trevor Perrin 的宝贵反馈，并于 2023 年 6 月由 NCC 进行了审计。
