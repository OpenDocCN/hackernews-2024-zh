- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:59:44'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:59:44
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: New Python Operators!. The new “walrus operator” in Python 3.8… | by Peter Norvig
    | Better Programming
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新 Python 操作符！Python 3.8 中的新“海象操作符”…… | Peter Norvig | Better Programming
- en: 来源：[https://betterprogramming.pub/new-python-operators-9f31b56ddcc7?gi=7918b2c3ccf0](https://betterprogramming.pub/new-python-operators-9f31b56ddcc7?gi=7918b2c3ccf0)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://betterprogramming.pub/new-python-operators-9f31b56ddcc7?gi=7918b2c3ccf0](https://betterprogramming.pub/new-python-operators-9f31b56ddcc7?gi=7918b2c3ccf0)
- en: Walrus Operator `:=`
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 海象操作符 `:=`
- en: The new “walrus operator” in Python 3.8 is written as `:=` and has been the
    topic of much [discussion](https://docs.python.org/3/whatsnew/3.8.html). This
    post describes a few of Python’s other whimsically-named but less-well-known multi-character
    operators.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.8 中的新“海象操作符”写作 `:=`，引发了许多[讨论](https://docs.python.org/3/whatsnew/3.8.html)。本文描述了
    Python 中其他富有幽默命名但不那么广为人知的多字符操作符。
- en: These operators are announced today, April 1, 2023, but, much like Dorothy with
    her ruby slippers, you always had the power to use them, you just had to learn
    it for yourself!
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作符于2023年4月1日宣布，但就像多萝西和她的红宝石鞋一样，你总是有能力使用它们，只是需要自己学会而已！
- en: Ski Hat Operator
  id: totrans-split-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滑雪帽操作员
- en: The “ski hat” operator is written as `*=0` and can be used to empty out a variable,
    be it a list, string, tuple, or numeric value.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: “滑雪帽”操作员写作 `*=0`，可以用来清空变量，无论是列表、字符串、元组还是数值。
- en: For example, after executing the following code, `skiers` is an empty list.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，执行以下代码后，`skiers` 是一个空列表。
- en: '[PRE0]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Ski Hat Operator `*=0`
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 滑雪帽操作员 `*=0`
- en: Dumbbell Operator
  id: totrans-split-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哑铃操作员
- en: The “dumbbell operator” is written as `[:]=[]` and can also be used to empty
    a list, but is not as versatile as the ski hat operator, as it doesn’t work for
    most other types.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: “哑铃操作员”写作 `[:]=[]`，也可以用来清空列表，但不如滑雪帽操作员那么灵活，因为它对大多数其他类型不起作用。
- en: 'After executing the following code, `reps` will be an empty list:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下代码后，`reps` 将是一个空列表：
- en: '[PRE1]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Dumbbell Operator `[:]=[]`
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 哑铃操作员 `[:]=[]`
- en: Lapping Cat Operator
  id: totrans-split-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 落喵操作员
- en: The “lapping cat” operator is written as `,=` and picks out the first element
    of an iterable. Like a finicky cat, it complains if there are other bothersome
    elements in the iterable.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: “落喵”操作员写作 `,=`，用于提取可迭代对象的第一个元素。就像一只挑剔的猫一样，如果可迭代对象中还有其他烦人的元素，它就会抱怨。
- en: After executing the following code, `water` is `'HHO'`.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下代码后，`water` 是 `'HHO'`。
- en: '[PRE2]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Lapping Cat Operator `,=`
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 落喵操作员 `,=`
- en: Starship Operator
  id: totrans-split-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 星际飞船操作员
- en: The “starship” operator is written as `, *_=` and depicts a dual-nacelle starship
    (such as the Enterprise) alongside a photon torpedo. It has a similar effect to
    the lapping cat operator in picking out the first element of an iterable, but
    it allows the iterable to have more than one element.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: “星际飞船”操作员写作 `, *_=`，描绘了一个双动力舰（如企业号）和一个光子鱼雷。它类似于落喵操作员，用于提取可迭代对象的第一个元素，但允许可迭代对象有多个元素。
- en: 'After executing the following code, `NCC` is `1`:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下代码后，`NCC` 是 `1`：
- en: '[PRE3]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Starship operator , *_=
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 星际飞船操作员 , *_=
- en: Flying Saucer Operator
  id: totrans-split-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 飞碟操作员
- en: The “flying saucer” operator is written as `--0--` and “beams up” an integer
    division, making it round up rather than round down. (I learned about it from
    [Mark Dickinson](https://www.enthought.com/team/mark-dickinson-2/).)
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: “飞碟”操作员写作 `--0--`，执行整数除法“上梁”，使其向上舍入而不是向下舍入。（我从[Mark Dickinson](https://www.enthought.com/team/mark-dickinson-2/)处了解到这个。）
- en: 'The following expression evaluates to 5, not 4:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表达式评估为 5，而不是 4：
- en: '[PRE4]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Flying Saucer Operator `— 0 —`
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 飞碟操作员 `--0--`
- en: Emphasis Operator
  id: totrans-split-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强调操作员
- en: The “emphasis operator” is written by surrounding an integer-valued expression
    with asterisks and is used to emphasize the following sequence by repeating it.
    For example,
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: “强调操作员”由整数值表达式用星号括起来编写，并用于通过重复强调以下序列。例如，
- en: '[PRE5]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: evaluates to `['oh', 'good', 'grief', '!', '!', '!']`.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 评估为 `['oh', 'good', 'grief', '!', '!', '!']`。
- en: The emphasis operator *sigh*
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 强调操作员 *叹息*
- en: Factorial Operator
  id: totrans-split-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阶乘操作员
- en: Math fans will be pleased to learn that the factorial operator `n!` has been
    partially incorporated into Python.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 数学爱好者将高兴地了解到阶乘操作符 `n!` 已部分整合到 Python 中。
- en: Unfortunately, the implementation is incomplete. But these unit tests all pass,
    so that’s good enough, right?
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，实现还不完整。但这些单元测试都通过了，所以这已经足够好了，对吧？
- en: '[PRE6]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Abstract keyword
  id: totrans-split-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象关键字
- en: Python also allows you to use the keyword `abstract` to indicate that a method
    of an abstract class must be implemented in a subclass for any instantiated object.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: Python 还允许您使用关键字 `abstract` 来指示抽象类的方法必须在子类中实现以便对任何实例化对象进行调用。
- en: In the following code, the method `name` is defined as `abstract`, so a call
    to an object of the class results in an error message pointing out that the method
    is not defined.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，方法 `name` 被定义为 `abstract`，因此对该类的对象调用将导致错误消息指出该方法未定义。
- en: '[PRE7]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: More
  id: totrans-split-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多
- en: The astute reader will recognize that these new operators rely on the placement
    of spaces in a way that violates [PEP 8](https://peps.python.org/pep-0008/).
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 机智的读者会意识到，这些新运算符依赖于空格的放置方式，这违反了 [PEP 8](https://peps.python.org/pep-0008/) 的规定。
- en: 'To that I say: but my way is more fun! Especially today, April 1\. For more
    operators, including implementations of the `++` and `<<` operators from C++,
    see my [old pos](https://norvig.com/python-iaq.html)t.'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 于此我说：但是我的方式更有趣！特别是今天，4月1日。有关更多运算符，包括来自C++的 `++` 和 `<<` 运算符的实现，请参阅我的 [old pos](https://norvig.com/python-iaq.html)t。
- en: 'PS: Everything in this post is true, except for “that’s good enough, right?”'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 'PS: 本文所有内容属实，除了“那就够了，对吧？”'
