- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:35:42'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:35:42
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Rust: maybe not for fast project iteration - DBohdan.com'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rust：也许不适合快速项目迭代 - DBohdan.com
- en: 来源：[https://dbohdan.com/rust-rapid-iteration](https://dbohdan.com/rust-rapid-iteration)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://dbohdan.com/rust-rapid-iteration](https://dbohdan.com/rust-rapid-iteration)
- en: I have ported [small utilities](https://crates.io/users/dbohdan) to Rust and
    enjoyed it as a [GC](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science))-free
    [ML](https://en.wikipedia.org/wiki/ML_(programming_language)). However, I have
    noticed there is a type of user that is unsatisfied with the language. They used
    Rust for a new, larger project that required rapid iteration. The point of this
    page is not to assert that every user of this type ends up unsatisfied but rather
    to highlight a category of users that should be extra cautious if they are considering
    Rust.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经将[小型实用程序](https://crates.io/users/dbohdan)迁移到Rust，并享受了这种不依赖[GC](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science))的[ML](https://en.wikipedia.org/wiki/ML_(programming_language))。然而，我注意到有一类用户对这种语言不满意。他们在需要快速迭代的新大型项目中使用Rust。本页的目的并不是断言每个这类用户最终都不满意，而是突出显示一类用户，如果他们考虑使用Rust，应该特别谨慎。
- en: Contents
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容
- en: '“Using Rust at a startup: A cautionary tale” ​(2022)'
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “在初创公司使用Rust：一个警示故事” ​(2022)
- en: Matt Welsh. [Link](https://medium.com/using-rust-at-a-startup-a-cautionary-tale-42ab823d9454).
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: Matt Welsh。[链接](https://medium.com/using-rust-at-a-startup-a-cautionary-tale-42ab823d9454)。
- en: '**Rust has made the decision that safety is more important than developer productivity.**
    This is the right tradeoff to make in many situations — like building code in
    an OS kernel, or for memory-constrained embedded systems — but I don’t think it’s
    the right tradeoff in all cases, especially not in startups where velocity is
    crucial. I am a pragmatist. I would much rather have my team sink time into debugging
    the occasional memory leak or type error for code written in, say, Python or Go,
    than have everyone on the team suffer a 4x productivity hit for using a language
    designed to avoid these problems entirely.'
  id: totrans-split-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Rust已经做出了选择，安全性比开发者的生产力更重要。** 这在许多情况下是正确的权衡，比如在操作系统内核中构建代码或者对内存受限的嵌入式系统。但我不认为这在所有情况下都是正确的权衡，尤其是在追求速度至关重要的初创公司中。我是个实用主义者。我宁愿让我的团队花时间调试偶发的内存泄漏或类型错误，而不是让团队每个人因为使用一种旨在避免这些问题的语言而遭受4倍的生产力损失，比如Python或Go。'
- en: “I love building a startup in Rust. I wouldn’t pick it again.” ​(2023)
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “我喜欢在Rust中建立初创公司。我不会再选择它。” ​(2023)
- en: Andrew Israel. [Link](https://www.propelauth.com/post/i-love-building-a-startup-in-rust-i-wouldnt-pick-it-again).
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: Andrew Israel。[链接](https://www.propelauth.com/post/i-love-building-a-startup-in-rust-i-wouldnt-pick-it-again)。
- en: '**Slower iterations.** When you first start with Rust, you’ll end up fighting
    the compiler a bit. This is natural and gets easier over time. However, at a new
    startup, one of the core problems is to figure out if you are building something
    useful.'
  id: totrans-split-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**迭代速度较慢。** 当你刚开始使用Rust时，你可能会与编译器斗争一番。这是自然的，随着时间的推移会变得更容易。然而，在一个新的初创公司，核心问题之一是弄清楚你是否在构建有用的东西。'
- en: A quick MVP can be invaluable in determining if you are on the right path or
    lost in the woods. All that time spent making readable, performant code might
    be wasted.
  id: totrans-split-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个快速的MVP在确定你是否走上正确的道路或者迷失在森林中是非常宝贵的。所有花在编写可读性强、性能优越的代码上的时间可能都会被浪费。
- en: “Leaving Rust gamedev after 3 years” ​(2024)
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “离开Rust游戏开发三年后” ​(2024)
- en: LogLog Games. [Link](https://loglog.games/blog/leaving-rust-gamedev/).
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: LogLog Games。[链接](https://loglog.games/blog/leaving-rust-gamedev/)。
- en: Making a fun & interesting games is about rapid prototyping and iteration, Rust’s
    values are everything but that
  id: totrans-split-17
  prefs:
  - PREF_BQ
  - PREF_H3
  type: TYPE_NORMAL
  zh: 制作有趣和有趣的游戏是关于快速原型和迭代，而Rust的价值观则与此相反
- en: '[…]'
  id: totrans-split-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[…]'
- en: I’d even say that it is correct and desirable that players do not care about
    the developer and just look at the game for a few seconds, but at least that keeps
    us honest. It keeps the games be about the game itself and nothing else, because
    ultimately, it is the game and the experience of playing it that matters.
  id: totrans-split-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我甚至会说，玩家不关心开发者，只看游戏几秒钟，这是正确且可取的，但至少这让我们保持诚实。这让游戏专注于游戏本身，而不是其他任何事情，因为最终，重要的是游戏和玩游戏的体验。
- en: It also reveals the values one as a game developer should appeal to. If you’re
    showcasing your game and the response is anything but “can I please play this?”,
    the game was not interesting to the person who you showed it to. At least not
    in the sense that truly matters for the purposes of making commercially successful
    games.
  id: totrans-split-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这也揭示了作为游戏开发者应该追求的价值观。如果你在展示你的游戏时，人们的反应除了“我可以玩这个吗？”以外还有别的，那么这个游戏对你展示给的人来说并不有趣。至少从商业成功的角度来看，这样的反应并不真正重要。
- en: People would often argue that Rust appeals to values like “maintainability”
    and how this leads to better games that don’t crash, but I think the problem here
    is completely different scales. Surely we can all agree that a game crashing when
    someone presses play is bad, and it is definitely bad when you corrupt a save
    file and the player loses progress.
  id: totrans-split-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 人们经常会争论说Rust吸引人的是像“可维护性”这样的价值观，以及这如何带来不会崩溃的更好的游戏，但我认为问题完全不在这个层面。我们都可以一致认为，当有人按下播放按钮时游戏崩溃是不好的，当你损坏了存档文件并且玩家失去了进度时，这绝对是不好的。
- en: But I think all of this completely misses the point of what matters to players.
    There are many cases where people would get their progress wiped and they’d still
    come back to the game and play it again, because the game was that good. I’ve
    done this more than once as a player.
  id: totrans-split-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 但我认为所有这些都完全忽略了对玩家来说真正重要的事情。有很多情况下，人们可能会丢失他们的进度，但他们仍然会回到游戏并重新开始玩，因为游戏本身非常出色。作为一个玩家，我已经不止一次这样做了。
- en: See also
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
