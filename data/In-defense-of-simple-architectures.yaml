- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:02:12'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:02:12'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: In defense of simple architectures
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对简单架构的辩护
- en: 来源：[https://danluu.com/simple-architectures/](https://danluu.com/simple-architectures/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://danluu.com/simple-architectures/](https://danluu.com/simple-architectures/)
- en: <main>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main>
- en: Wave is a $1.7B company with 70 engineers whose product is a CRUD app that adds
    and subtracts numbers. In keeping with this, our architecture is a standard CRUD
    app architecture, a Python monolith on top of Postgres. [Starting with a simple
    architecture and solving problems in simple ways](https://twitter.com/danluu/status/1462607028585525249)
    where possible has allowed us to scale to this size while engineers mostly focus
    on work that delivers value to users.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Wave是一家价值17亿美元的公司，拥有70名工程师，其产品是一个CRUD应用程序，用于加减数字。为此，我们的架构是一个标准的CRUD应用程序架构，即Python单体架构在Postgres之上。[从简单架构开始，通过简单方式解决问题](https://twitter.com/danluu/status/1462607028585525249)在可能的情况下允许我们扩展到这一规模，而工程师们主要专注于为用户提供价值的工作。
- en: Stackoverflow scaled up a monolith to good effect ([2013 architecture](https://nickcraver.com/blog/2013/11/22/what-it-takes-to-run-stack-overflow/)
    / [2016 architecture](https://nickcraver.com/blog/2016/02/17/stack-overflow-the-architecture-2016-edition/)),
    eventually getting acquired for $1.8B. If we look at traffic instead of market
    cap, Stackoverflow is among the top 100 highest traffic sites on the internet
    (for many other examples of valuable companies that were built on top of monoliths,
    [see the replies to this Twitter thread](https://twitter.com/danluu/status/1498678300163588096).
    We don’t have a lot of web traffic because we’re a mobile app, but Alexa still
    puts our website in the top 75k even though our website is basically just a way
    for people to find the app and most people don’t even find the app through our
    website).
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: Stackoverflow将单体架构扩展到了良好的效果（[2013架构](https://nickcraver.com/blog/2013/11/22/what-it-takes-to-run-stack-overflow/)
    / [2016架构](https://nickcraver.com/blog/2016/02/17/stack-overflow-the-architecture-2016-edition/)），最终被收购为18亿美元。如果我们看的是流量而不是市值，Stackoverflow是互联网上流量最高的100个网站之一（关于建立在单体架构之上的有价值公司的更多例子，请[参阅此Twitter线程的回复](https://twitter.com/danluu/status/1498678300163588096)）。我们的网站并不具有很高的Web流量，因为我们是一个移动应用，但即使如此，Alexa仍然将我们的网站列为前75k，尽管我们的网站基本上只是一个让人们找到应用程序的途径，大多数人甚至不是通过我们的网站找到应用程序的。
- en: There are some kinds of applications that have demands that would make a simple
    monolith on top of a boring database a non-starter but, for most kinds of applications,
    even at top-100 site levels of traffic, computers are fast enough that high-traffic
    apps can be served with simple architectures, which can generally be created more
    cheaply and easily than complex architectures.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有些应用程序的需求使得在无聊的数据库之上建立简单的单体架构根本行不通，但对于大多数应用程序而言，即使在高达前100个网站访问量的情况下，计算机的速度已经足够快，可以通过简单的架构来服务高流量应用程序，这些架构通常比复杂的架构更便宜、更容易创建。
- en: Despite the unreasonable effectiveness of simple architectures, most press goes
    to complex architectures. For example, at a recent generalist tech conference,
    there were six talks on how to build or deal with side effects of complex, microservice-based,
    architectures and zero on how one might build out a simple monolith. There were
    more talks on quantum computing (one) than talks on monoliths (zero). Larger conferences
    are similar; a recent enterprise-oriented conference in SF had a double-digit
    number of talks on dealing with the complexity of a sophisticated architecture
    and zero on how to build a simple monolith. Something that was striking to me
    the last time I attended that conference is how many attendees who worked at enterprises
    with low-scale applications that could’ve been built with simple architectures
    had copied the latest and greatest sophisticated techniques that are popular on
    the conference circuit and HN.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管简单架构非常有效，但大多数关注都集中在复杂架构上。例如，在最近的一次综合性技术会议上，有六场关于如何构建或处理基于复杂微服务的架构或其副作用的讨论，但关于如何构建简单单体架构的讨论却一场也没有。关于量子计算的讨论（一场）甚至比单体架构的讨论（零场）更多。较大的会议也是如此；最近在旧金山举办的企业导向会议上，有两位数的讨论是关于如何处理复杂先进架构的复杂性，却没有一场是关于如何构建简单单体架构的。我上次参加那个会议时，让我印象深刻的是多少参会者在那些可以使用简单架构构建的低规模企业应用中，却照搬了会议和Hacker
    News上流行的最新、最先进的复杂技术。
- en: Our architecture is so simple I’m not even going to bother with an architectural
    diagram. Instead, I’ll discuss a few boring things we do that help us keep things
    boring.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的架构非常简单，我甚至不打算画架构图。相反，我将讨论一些无聊的事情，这些事情帮助我们保持枯燥。
- en: We’re currently using boring, synchronous, Python, which means that our server
    processes block while waiting for I/O, like network requests. We previously tried
    Eventlet, an async framework that would, in theory, let us get more efficiency
    out of Python, but ran into so many bugs that we decided the CPU and latency cost
    of waiting for events wasn’t worth the operational pain we had to take on to deal
    with Eventlet issues. The are other [well-known async frameworks for Python](https://twitter.com/mcfunley/status/1194713713330122752),
    but users of those at scale often also report [significant fallout from using
    those frameworks at scale](https://twitter.com/mcfunley/status/1194715290841432064).
    Using synchronous Python is expensive, in the sense that we pay for CPU that does
    nothing but wait during network requests, but since we’re only handling billions
    of requests a month (for now), the cost of this is low even when using a slow
    language, like Python, and paying retail public cloud prices. The cost of our
    engineering team completely dominates the cost of the systems we operate.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前使用单调、同步的Python，这意味着我们的服务器进程在等待I/O（如网络请求）时会阻塞。我们之前尝试过Eventlet，一个异步框架，理论上可以让我们在Python中获得更高的效率，但是遇到了很多bug，我们决定等待事件的CPU和延迟成本不值得我们为了解决Eventlet问题而承担运维痛苦。还有其他[知名的Python异步框架](https://twitter.com/mcfunley/status/1194713713330122752)，但是大规模使用这些框架的用户通常也报告称[在大规模使用这些框架时会有显著的问题](https://twitter.com/mcfunley/status/1194715290841432064)。使用同步Python很昂贵，因为我们为了等待网络请求而支付了CPU的成本，但是由于我们每月只处理数十亿次请求（目前），即使使用像Python这样的慢语言，并支付公共云的零售价格，这种成本也很低。我们工程团队的成本完全主导了我们运营系统的成本。
- en: Rather than take on the complexity of making our monolith async we farm out
    long-running tasks (that we don’t want responses to block on) to a queue.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与其复杂化我们的单体架构，我们将长时间运行的任务（我们不希望等待响应的任务）分配到队列中处理。
- en: A place where we can’t be as boring as we’d like is with our on-prem datacenters.
    When we were operating solely in Senegal and Côte d'Ivoire, we operated fully
    in the cloud, but as we expand into Uganda (and more countries in the future),
    we’re having to split our backend and deploy on-prem to comply with local data
    residency laws and regulations. That's not exactly a simple operation, but as
    anyone who's done the same thing with a complex service-oriented architecture
    knows, this operation is much simpler than it would've been if we had a complex
    service-oriented architecture.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能像我们想要的那样无聊的地方是我们的本地数据中心。当我们仅在塞内加尔和科特迪瓦运营时，我们完全在云端运作，但随着我们扩展到乌干达（以及未来更多国家），为了遵守当地的数据存储法律法规，我们必须分割我们的后端并在本地部署。这并不是一个简单的操作，但是任何完成过类似复杂服务架构的人都知道，这个操作比如果我们有复杂的服务架构要简单得多。
- en: Another area is with software we’ve had to build (instead of buy). When we started
    out, we strongly preferred buying software over building it because a team of
    only a few engineers can’t afford the time cost of building everything. That was
    the right choice at the time even though [the “buy” option generally gives you
    tools that don’t work](https://danluu.com/nothing-works/). In cases where vendors
    can’t be convinced to fix showstopping bugs that are critical blockers for us,
    [it does make sense to build more of our own tools and maintain in-house expertise
    in more areas](https://danluu.com/in-house/), in contradiction to the standard
    advice that a company should only choose to “build” in its core competency. Much
    of that complexity is complexity that we don’t want to take on, but in some product
    categories, even after fairly extensive research we haven’t found any vendor that
    seems likely to provide a product that works for us. To be fair to our vendors,
    the problem they’d need to solve to deliver a working solution to us is much more
    complex than the problem we need to solve since our vendors are taking on the
    complexity of solving a problem for every customer, whereas we only need to solve
    the problem for one customer, ourselves.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个领域是我们不得不构建的软件（而不是购买）。当我们刚开始时，我们强烈倾向于购买而不是构建软件，因为只有少数几名工程师的团队无法承担构建所有内容的时间成本。那时做出了正确的选择，即使
    [“购买”选项通常提供的工具并不起作用](https://danluu.com/nothing-works/)。在供应商无法被说服修复对我们至关重要的阻碍性致命错误时，[构建更多我们自己的工具并在更多领域保持内部专业知识的做法确实是有道理的](https://danluu.com/in-house/)，这与公司应该只选择在其核心竞争力领域
    “构建”的标准建议相矛盾。其中许多复杂性是我们不愿承担的复杂性，但在某些产品类别中，即使经过相当广泛的研究，我们也没有找到任何似乎能为我们提供适用产品的供应商。为了公平对待我们的供应商，他们需要解决的问题比我们需要解决的问题复杂得多，因为我们的供应商正承担解决每个客户的问题的复杂性，而我们只需要解决一个客户的问题，也就是我们自己的问题。
- en: A mistake we made in the first few months of operation that has some cost today
    was not carefully delimiting the boundaries of database transactions. In Wave’s
    codebase, the SQLAlchemy database session is a request-global variable; it implicitly
    begins a new database transaction any time a DB object’s attribute is accessed,
    and any function in Wave’s codebase can call commit on the session, causing it
    to commit all pending updates. This makes it difficult to control the time at
    which database updates occur, which increases our rate of subtle data-integrity
    bugs, as well as making it harder to lean on the database to build things like
    [idempotency keys](https://brandur.org/idempotency-keys) or a [transactionally-staged
    job drain](https://brandur.org/job-drain). It also increases our risk of accidentally
    holding open long-running database transactions, which can [make schema migrations
    operationally difficult](https://gocardless.com/blog/zero-downtime-postgres-migrations-the-hard-parts/).
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行的最初几个月中我们犯了一个错误，这个错误今天仍然带来了一些成本，那就是没有仔细地界定数据库事务的边界。在 Wave 的代码库中，SQLAlchemy
    数据库会话是一个请求全局变量；每当访问 DB 对象的属性时，它会隐式地开始一个新的数据库事务，并且 Wave 代码库中的任何函数都可以调用会话的 commit
    方法，导致提交所有待处理的更新。这使得我们难以控制数据库更新发生的时间，增加了我们微妙数据完整性错误的发生率，同时也增加了构建诸如 [幂等键](https://brandur.org/idempotency-keys)
    或 [事务化阶段作业排放](https://brandur.org/job-drain) 等功能时的难度。这也增加了我们意外持续运行数据库事务的风险，这可能会使
    [模式迁移在操作上变得困难](https://gocardless.com/blog/zero-downtime-postgres-migrations-the-hard-parts/)。
- en: Some choices that we’re unsure about (in that these are things we’re either
    thinking about changing, or would recommend to other teams starting from scratch
    to consider a different approach) were using RabbitMQ (for our purposes, Redis
    would probably work equally well as a task queue and just using Redis would reduce
    operational burden), using Celery (which is overcomplicated for our use case and
    has been implicated in several outages e.g. due to backwards compatibility issues
    during version upgrades), using SQLAlchemy (which makes it hard for developers
    to understand what database queries their code is going to emit, leading to various
    situations that are hard to debug and involve unnecessary operational pain, especially
    related to the above point about database transaction boundaries), and using Python
    (which was the right initial choice because of our founding CTO’s technical background,
    but its concurrency support, performance, and extensive dynamism make us question
    whether it’s the right choice for a large-scale backend codebase). None of these
    was a major mistake, and for some (e.g. Python) the downsides are minimal enough
    that it’s cheaper for us to continue to pay the increased maintenance burden than
    to invest in migrating to something theoretically better, but if we were starting
    a similar codebase from scratch today we’d think hard about whether they were
    the right choice.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对某些选择还不确定（这些是我们正在考虑改变的事情，或者是我们建议其他团队从头开始考虑不同的方法），比如使用 RabbitMQ（对于我们的目的，Redis
    可能同样适用作为任务队列，仅使用 Redis 将减少操作负担），使用 Celery（对于我们的用例来说过于复杂，并且由于向后兼容性问题在版本升级期间导致了几次宕机），使用
    SQLAlchemy（这使得开发人员难以理解他们的代码将发出什么数据库查询，导致一些难以调试的情况和不必要的操作痛苦，特别是与上述关于数据库事务边界的问题相关）。这些选择没有一个是重大的错误，对于一些选择（比如
    Python），其缺点足够小，以至于我们继续承担增加的维护负担要比投资迁移到理论上更好的东西更为便宜，但如果我们今天从头开始创建类似的代码库，我们会认真考虑它们是否是正确的选择。
- en: Some areas where we’re happy with our choices even though they may not sound
    like the simplest feasible solution is with our API, where we use GraphQL, with
    our transport protocols, where we had a custom protocol for a while, and our host
    management, where we use Kubernetes. For our transport protocols, we used to use
    a custom protocol that runs on top of UDP, with an SMS and USSD fallback, [for
    the performance reasons described in this talk](https://www.youtube.com/watch?v=EAxnA9L5rS8).
    With the rollout of HTTP/3, we’ve been able to replace our custom protocol with
    HTTP/3 and we generally only need USSD for events like the recent internet shutdowns
    in Mali.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 API 中，我们使用 GraphQL；在我们的传输协议中，我们曾经使用了一段时间的自定义协议，它运行在 UDP 之上，同时具备 SMS 和 USSD
    的后备方案，[关于这次演讲中提到的性能原因](https://www.youtube.com/watch?v=EAxnA9L5rS8)。随着 HTTP/3
    的推出，我们已经能够用 HTTP/3 替换我们的自定义协议，通常只在像马里最近的互联网关闭事件这样的事件中才需要 USSD。
- en: 'As for using GraphQL, we believe the pros outweigh the cons for us:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 至于使用 GraphQL，我们认为对我们来说，利大于弊：
- en: 'Pros:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 优点：
- en: Self-documentation of exact return type
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精确返回类型的自我文档化。
- en: Code generation of exact return type leads to safer clients
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精确返回类型的代码生成可提高客户端的安全性。
- en: GraphiQL interactive explorer is a productivity win
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphiQL 交互式浏览器提高了生产力。
- en: Our various apps (user app, support app, Wave agent app, etc.) can mostly share
    one API, reducing complexity
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的各种应用程序（用户应用程序、支持应用程序、Wave 代理应用程序等）大多可以共享一个 API，从而减少了复杂性。
- en: Composable query language allows clients to fetch exactly the data they need
    in a single packet roundtrip without needing to build a large number of special-purpose
    endpoints
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可组合的查询语言允许客户端在单个数据包往返中精确获取他们所需的数据，而无需构建大量特定目的的端点。
- en: Eliminates bikeshedding over what counts as a RESTful API
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消除了关于何为 RESTful API 的无谓争论。
- en: 'Cons:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点：
- en: GraphQL libraries weren’t great when we adopted GraphQL (the base Python library
    was a port of the Javascript one so not Pythonic, Graphene required a lot of boilerplate,
    and Apollo-Android produced very poorly optimized code)
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们采用 GraphQL 时，GraphQL 库并不是很好用（基础的 Python 库是 JavaScript 版本的移植，所以不太符合 Python
    的风格，Graphene 需要大量的样板代码，而 Apollo-Android 生成的代码优化得非常差）。
- en: Default GQL encoding is redundant and we care a lot about limiting size because
    many of our customers have low bandwidth
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认的 GQL 编码是冗余的，我们非常关心限制大小，因为我们的许多客户带宽有限。
- en: As for Kubernetes, we use Kubernetes because knew that, if the business was
    successful (which it has been) and we kept expanding, we’d eventually expand to
    countries that require us to operate our services in country. The exact regulations
    vary by country, but we’re already expanding into one major African market that
    requires we operate our “primary datacenter” in the country and there are others
    with regulations that, e.g., require us to be able to fail over to a datacenter
    in the country.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 至于 Kubernetes，我们使用 Kubernetes 是因为我们知道，如果业务成功（事实证明确实如此），并且我们继续扩展，最终会扩展到需要在该国家运营服务的国家。具体的法规因国家而异，但我们已经在进入一个需要我们在该国家运营“主数据中心”的主要非洲市场，并且其他国家的法规要求我们能够故障转移至该国家的数据中心。
- en: An area where there’s unavoidable complexity for us is with telecom integrations.
    In theory, we would use a SaaS SMS provider for everything, but [the major SaaS
    SMS provider doesn’t operate everywhere in Africa](https://youtu.be/6tb8ALAvodM?t=196)
    and the cost of using them everywhere would be prohibitive. The earlier comment
    on how the compensation cost of engineers dominates the cost of our systems wouldn’t
    be true if we used a SaaS SMS provider for all of our SMS needs; the team that
    provides telecom integrations pays for itself many times over.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们面临不可避免的复杂性之一是与电信集成相关的问题。理论上，我们可以为所有事情使用 SaaS 短信提供商，但是[主要的 SaaS 短信提供商并不在非洲的每个地方运营](https://youtu.be/6tb8ALAvodM?t=196)，而在所有地方使用他们的成本将是禁止性的。如果我们为所有短信需求使用
    SaaS 短信提供商，之前关于工程师补偿成本主导我们系统成本的评论就不成立了；提供电信集成的团队多次超额支付自身的成本。
- en: By keeping our application architecture as simple as possible, we can spend
    our complexity (and headcount) budget in places where there’s complexity that
    it benefits our business to take on. Taking the idea of doing things as simply
    as possible unless there’s a strong reason to add complexity has allowed us to
    build a fairly large business with not all that many engineers despite running
    an African finance business, which is generally believed to be a tough business
    to get into, which we’ll discuss in a future post (one of our earliest and most
    helpful advisers, who gave us advice that was critical in Wave’s success, initially
    suggested that Wave was a bad business idea and the founders should pick another
    one because he foresaw so many potential difficulties).
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过保持我们的应用架构尽可能简单，我们可以在有利于我们业务的复杂性处花费我们的复杂性（和人头）预算。除非有强烈理由增加复杂性，否则尽可能简单地做事的想法使我们能够建立一个相当大的业务，尽管运营非洲金融业务通常被认为是一个艰难的业务，我们将在未来的帖子中讨论这一点（我们最早和最有帮助的顾问之一曾建议我们，由于预见到了许多潜在的困难，Wave
    是一个糟糕的商业理念，创始人应选择另一个）。
- en: '*Thanks to Ben Kuhn, Sierra Rotimi-Williams, June Seif, Kamal Marhubi, Ruthie
    Byers, Lincoln Quirk, Calum Ball, John Hergenroeder, Bill Mill, Sophia Wisdom,
    and Finbarr Timbers for comments/corrections/discussion.*'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢 Ben Kuhn、Sierra Rotimi-Williams、June Seif、Kamal Marhubi、Ruthie Byers、Lincoln
    Quirk、Calum Ball、John Hergenroeder、Bill Mill、Sophia Wisdom 和 Finbarr Timbers 的评论/修正/讨论。*'
- en: </main>
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
