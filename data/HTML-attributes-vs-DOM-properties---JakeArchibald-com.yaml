- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:32:33'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:32:33'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: HTML attributes vs DOM properties - JakeArchibald.com
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML 属性 vs DOM 属性 - JakeArchibald.com
- en: 来源：[https://jakearchibald.com/2024/attributes-vs-properties/](https://jakearchibald.com/2024/attributes-vs-properties/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://jakearchibald.com/2024/attributes-vs-properties/](https://jakearchibald.com/2024/attributes-vs-properties/)
- en: 'Attributes and properties are *fundamentally* different things. You can have
    an attribute and property of the same name set to different values. For example:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 属性和属性是*根本*不同的东西。您可以将同名的属性和属性设置为不同的值。例如：
- en: '[PRE0]'
  id: totrans-split-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It seems like fewer and fewer developers know this, partially thanks to frameworks:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来越来越少的开发者知道这一点，部分要归功于框架：
- en: '[PRE1]'
  id: totrans-split-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you do the above in a framework's templating language, you're using attribute-like
    syntax, but under the hood it'll sometimes be setting the property instead, and
    when it does that differs from framework to framework. In some cases, it'll set
    a property *and* an attribute as a side-effect, but that isn't the framework's
    fault.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在框架的模板语言中执行上述操作，您使用的是类似属性的语法，但在幕后，它有时会设置属性，与框架有关。在某些情况下，它将设置属性*和*属性作为副作用，但这不是框架的错。
- en: Most of the time, these distinctions don't matter. I think it's good that developers
    can have a long and happy career without caring about the differences between
    properties and attributes. But, if you need to dig down into the DOM at a lower
    level, it helps to know. Even if you feel you know the difference, maybe I'll
    touch on a couple of details you hadn't considered. So let's dig in…
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，这些区别并不重要。我认为开发者可以在不关心属性和属性之间的区别的情况下拥有长久和愉快的职业是件好事。但是，如果您需要在更低的 DOM 层次深入挖掘，了解这一点会有所帮助。即使您认为了解了区别，也许我会触及一些您没有考虑过的细节。因此，让我们深入探讨一下…
- en: 'Before we get to the interesting stuff, let''s get some of the technical differences
    out of the way:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论有趣的内容之前，让我们解决一些技术上的差异：
- en: 'Attributes serialise to HTML, whereas properties don''t:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 属性序列化为 HTML，而属性不会：
- en: '[PRE2]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So when you're looking at the elements panel in browser developer tools, you're
    only seeing attributes on elements, not properties.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当您在浏览器开发者工具的元素面板中查看时，您只能看到元素上的属性，而不是属性。
- en: 'In order to work in the serialised format, attribute values are always strings,
    whereas properties can be any type:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在序列化格式中工作，属性值始终是字符串，而属性可以是任何类型：
- en: '[PRE3]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Attribute names are case-insensitive, whereas property names are case-sensitive.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 属性名称不区分大小写，而属性名称区分大小写。
- en: '[PRE4]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: However, attribute *values* are case-sensitive.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，属性*值*是区分大小写的。
- en: 'Ok, here''s where things start to get blurry:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这里开始变得模糊起来：
- en: 'Take a look at this:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个：
- en: '[PRE5]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This seems to contradict the first example in the post, but the above only works
    because `Element` has an `id` getter & setter that 'reflects' the `id` attribute.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎与文章中的第一个示例相矛盾，但以上之所以有效，仅因为 `Element` 具有一个 `id` 的 getter 和 setter，它“反映”了 `id`
    属性。
- en: When a property reflects an attribute, the *attribute* is the source of the
    data. When you set the property, it's updating the attribute. When you read from
    the property, it's reading the attribute.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当属性反映属性时，*属性*是数据的来源。当您设置属性时，它更新属性。当您从属性读取时，它读取属性。
- en: For convenience, most specs will create a property equivalent for every defined
    attribute. It didn't work in the example at the start of the article, because
    `foo` isn't a spec-defined attribute, so there isn't a spec-defined `foo` property
    that reflects it.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 出于方便，大多数规范将为每个定义的属性创建一个相应的属性等效项。在文章开头的示例中它不起作用，因为 `foo` 不是规范定义的属性，因此没有反映它的规范定义的
    `foo` 属性。
- en: '[Here''s the spec for `<ol>`](https://html.spec.whatwg.org/multipage/grouping-content.html#the-ol-element).
    The "Content attributes" section defines the attributes, and the "DOM interface"
    defines the properties. If you click on `reversed` in the DOM interface, it takes
    you to this:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[这是 `<ol>` 的规范](https://html.spec.whatwg.org/multipage/grouping-content.html#the-ol-element)。"内容属性"部分定义了属性，而"DOM
    接口"定义了属性。如果您在 DOM 接口中点击 `reversed`，它会带您到这里：'
- en: The `reversed` and `type` IDL attributes must [reflect](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflect)
    the respective content attributes of the same name.
  id: totrans-split-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`reversed` 和 `type` IDL 属性必须反映相同名称的相应内容属性。[反映](https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflect)。'
- en: But some reflectors are more complex…
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但有些反射器更复杂…
- en: Ok, this is relatively minor, but sometimes the property has a different name
    to the attribute it reflects.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这相对较小，但有时属性的名称与其反映的属性不同。
- en: 'In some cases it''s just to add the kind of casing you''d expect from a property:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，它只是添加了你期望从属性中得到的大小写：
- en: On `<img>`, `el.crossOrigin` reflects the `crossorigin` attribute.
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<img>` 上，`el.crossOrigin` 反映了 `crossorigin` 属性。
- en: On all elements, `el.ariaLabel` reflects the `aria-label` attribute (the aria
    reflectors became cross browser in late 2023\. Before that you could only use
    the attributes).
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有元素上，`el.ariaLabel` 反映了 `aria-label` 属性（这些 aria 反射器在2023年底变得跨浏览器。在此之前，你只能使用这些属性）。
- en: 'In some cases, names had to be changed due to old JavaScript reserved words:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，由于旧的 JavaScript 保留字，名称不得不更改：
- en: On all elements, `el.className` reflects the `class` attribute.
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有元素上，`el.className` 反映了 `class` 属性。
- en: On `<label>`, `el.htmlFor` reflects the `for` attribute.
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<label>` 上，`el.htmlFor` 反映了 `for` 属性。
- en: 'Properties come with validation and defaults, whereas attributes don''t:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 属性带有验证和默认值，而属性则没有：
- en: '[PRE6]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this case, the validation is handled by the `type` getter. The setter allowed
    the invalid value `'foo'`, but when the getter saw the invalid value, or no value,
    it returned `'text'`.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，验证由 `type` 获取器处理。设置器允许无效值 `'foo'`，但当获取器看到无效值或无值时，它返回 `'text'`。
- en: 'Some properties perform type coercion:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一些属性执行类型强制转换：
- en: '[PRE7]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this case, the `open` property is a boolean, returning whether the attribute
    exists. The setter also coerces the type - even though the setter is given `'hello'`,
    it's turned to a boolean rather than going directly to the attribute.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`open` 属性是一个布尔值，返回属性是否存在。设置器还会强制类型转换 - 即使设置器给出 `'hello'`，它也会转换为布尔值，而不是直接转到属性。
- en: Properties like `img.height` coerce the attribute value to a number. The setter
    converts the incoming value to a number, and treats negative values as 0.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 像 `img.height` 这样的属性会将属性值强制转换为数字。设置器将传入的值转换为数字，并将负值视为 0。
- en: '`value` is a fun one. There''s a `value` property and a `value` attribute.
    However, the `value` property does not reflect the `value` attribute. Instead,
    the `defaultValue` property reflects the `value` attribute.'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`value` 是一个有趣的例子。有一个 `value` 属性和一个 `value` 属性。但是，`value` 属性不反映 `value` 属性。相反，`defaultValue`
    属性反映了 `value` 属性。'
- en: I know, I know.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道，我知道。
- en: In fact, the `value` property doesn't reflect *any* attribute. That isn't unusual,
    there's loads of these (`offsetWidth`, `parentNode`, `indeterminate` on checkboxes
    for some reason, and many more).
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`value` 属性不反映 *任何* 属性。这并不罕见，还有很多这样的情况（例如 `offsetWidth`、`parentNode`、复选框上的
    `indeterminate` 以及其他许多情况）。
- en: 'Initially, the `value` property defers to the `defaultValue` property. Then,
    once the `value` property is set, either via JavaScript or through user interaction,
    it switches to an internal value. It''s as if it''s implemented *roughly* like
    this:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，`value` 属性延迟到 `defaultValue` 属性。然后，一旦通过 JavaScript 或用户交互设置了 `value` 属性，它就会切换到内部值。它就像大致这样实现的：
- en: '[PRE8]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此：
- en: '[PRE9]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This would have made way more sense if the `value` attribute was named `defaultvalue`.
    Too late now.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `value` 属性命名为 `defaultvalue`，这将更合理。现在为时已晚。
- en: In my opinion, attributes should be for configuration, whereas properties can
    contain state. I also believe that the light-DOM tree should have a single owner.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，属性应该用于配置，而状态则可以包含在属性中。我也相信轻量 DOM 树应该有一个单一的所有者。
- en: In that sense, I think `<input value>` gets it right (aside from the naming).
    The `value` attribute configures the default value, whereas the `value` property
    gives you the current state.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个意义上，我认为 `<input value>` 做得对（除了命名）。`value` 属性配置默认值，而 `value` 属性则提供当前状态。
- en: It also makes sense that validation applies when getting/setting properties,
    but never when getting/setting attributes.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着在获取/设置属性时应用验证，但在获取/设置属性时绝不应用验证。
- en: I say 'in my opinion', because a couple of recent HTML elements have done it
    differently.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我说'在我看来'，因为最近的一些 HTML 元素已经做出了不同的处理。
- en: The `<details>` and `<dialog>` elements represent their open state via the `open`
    attribute, and the browser will self add/remove this attribute in response to
    user interaction.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`<details>` 和 `<dialog>` 元素通过 `open` 属性表示其打开状态，并且浏览器会根据用户交互自动添加/删除此属性。'
- en: I think this was a design mistake. It breaks the idea that attributes are for
    configuration, but more importantly it means that the system in charge of maintaining
    the DOM (a framework, or vanilla JS) needs to be prepared for the DOM to change
    itself.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这是一个设计错误。它破坏了属性用于配置的理念，但更重要的是，它意味着负责维护DOM的系统（框架，或者原生JS）需要准备好DOM自己改变。
- en: 'I think it should have been:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: '我认为应该是：  '
- en: '[PRE10]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And a `details.open` property to get/set the current state, along with a CSS
    pseudo-class for targeting that state.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 和一个`details.open`属性以获取/设置当前状态，以及一个用于定位该状态的CSS伪类。
- en: 'Update: [Simon Peters](https://twitter.com/zcorpan) unearthed some of the [early
    design discussion around this](https://lists.whatwg.org/pipermail/whatwg-whatwg.org/2007-August/054532.html).'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 更新：[西蒙·彼得斯](https://twitter.com/zcorpan)发现了一些关于这个问题的[早期设计讨论](https://lists.whatwg.org/pipermail/whatwg-whatwg.org/2007-August/054532.html)。
- en: I guess `contenteditable` also breaks that contract, but… well… it's a opt-in
    to a lot of breakage.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我想`contenteditable`也打破了这个约定，但……嗯……它是对很多破坏的选择。
- en: 'Back to the example from earlier:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 回到之前的例子：
- en: '[PRE11]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How do frameworks handle this?
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 框架如何处理这个问题？
- en: Aside from a predefined set of cases where they favour attributes, they'll set
    the prop as a property if `propName in element`, otherwise they'll set an attribute.
    Basically, they prefer properties over attributes. Their render-to-string methods
    do the opposite, and ignore things that are property-only.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 除了预定义的情况外，他们更喜欢属性，如果`propName in element`，他们就将属性设置为属性，否则他们会设置为属性。基本上，他们更喜欢属性而不是属性。他们的渲染为字符串方法则相反，忽略了仅为属性的内容。
- en: React does things the other way around. Aside from a predefined set of cases
    where they favour properties, they'll set an attribute. This makes their render-to-string
    method similar in logic.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: React则反其道而行之。除了一组预定义的情况，他们更喜欢属性，他们会设置一个属性。这使得他们的渲染为字符串方法在逻辑上类似。
- en: This explains why custom elements don't seem to work in React. Since they're
    custom, their properties aren't in React's 'predefined list', so they're set as
    attributes instead. Anything that's property-only on the custom element simply
    won't work. This will be fixed in React 19, where they'll switch to the Preact/VueJS
    model for custom elements.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这解释了为什么自定义元素在React中似乎无法正常工作。因为它们是自定义的，它们的属性不在React的“预定义列表”中，所以它们被设置为属性。在自定义元素上仅为属性的任何内容将简单地无法工作。这将在React
    19中修复，他们将切换到Preact/VueJS模型以处理自定义元素。
- en: The funny thing is, React popularised using `className` instead of `class` in
    what *looks like* an attribute. But, even though you're using the property name
    rather than the attribute name, [React will set the `class` attribute under the
    hood](https://github.com/facebook/react/blob/699d03ce1a175442fe3443e1d1bed14f14e9c197/packages/react-dom-bindings/src/client/ReactDOMComponent.js#L388-L389).
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，React推广了使用`className`而不是在*看起来*像属性的`class`。但即使你使用属性名称而不是属性名称，[React在幕后设置了`class`属性](https://github.com/facebook/react/blob/699d03ce1a175442fe3443e1d1bed14f14e9c197/packages/react-dom-bindings/src/client/ReactDOMComponent.js#L388-L389)。
- en: 'Lit does things a little differently:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: Lit做事情有些不同：
- en: '[PRE12]'
  id: totrans-split-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It keeps the distinction between attributes and properties, requiring you to
    prefix the name with `.` if you want to set the property rather than the attribute.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 它保持了属性和特性之间的区别，如果想设置属性而不是特性，就需要在名称前加上`。`。
- en: That's pretty much everything I know about the difference between properties
    and attributes. If there's something I've missed, or you have a question, let
    me know in the comments below!
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这大致是我知道的关于属性和特性之间区别的一切。如果有我忽略的地方，或者你有问题，请在下面的评论中让我知道！
- en: Thanks to my [podcast husband](https://offthemainthread.tech/) [Surma](https://surma.dev/)
    for his usual reviewing skills.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢我的[播客伴侣](https://offthemainthread.tech/) [Surma](https://surma.dev/)的常规审阅技能。
