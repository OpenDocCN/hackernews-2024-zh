- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:56:26'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:56:26'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: C and returning values quickly or safely. But not both. | Sub-Etha Software
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速或安全地返回值。但不能两者兼得。| Sub-Etha Software
- en: 来源：[https://subethasoftware.com/2024/01/18/c-and-returning-values-quickly-or-safely-but-not-both/](https://subethasoftware.com/2024/01/18/c-and-returning-values-quickly-or-safely-but-not-both/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://subethasoftware.com/2024/01/18/c-and-returning-values-quickly-or-safely-but-not-both/](https://subethasoftware.com/2024/01/18/c-and-returning-values-quickly-or-safely-but-not-both/)
- en: '**WARNING:** This article contains a C coding approach that many will find
    uncomfortable.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告：**本文包含一种许多人会感到不适的 C  编码方法。'
- en: In my day job as a mild-mannered embedded C programmer, I am usually too busy
    maintaining what was created before me to be creating something new for others
    to maintain after me. There was that one time I had two weeks that were very different,
    and fun, since they were almost entirely spent “creating” versus “maintaining.”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我作为一名温和的嵌入式 C 程序员的日常工作中，我通常忙于维护之前创建的东西，而不是为其他人创建新的东西，供其他人在我之后维护。有那么一次，我有两周的时间非常不同寻常，也很有趣，因为几乎全部都花在了“创建”而不是“维护”上。
- en: 'Today’s quick C tidbit is about getting parameters back from a C function.
    In C, you only get one thing back — typically a variable type like an int or float
    or whatever:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的快速 C 小知识是关于从 C 函数中获取参数的。在 C 中，你只会得到一件事情返回-通常是像 int 或 float 这样的变量类型，或者其他任何类型：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you need more than one thing returned, it is common to pass in variables
    by reference (the address of, or pointer to, the variable in memory) and have
    the function modify that memory to update the variables:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '如果需要返回多个值，通常通过引用传递变量（变量在内存中的地址）并使函数修改该内存来更新变量：  '
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The moment pointers come in to play, things get very dangerous. But fast.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦指针出现，事情就变得非常危险。但是快。
- en: 'When passing values in, they get copied in to a new variable:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在传递值时，它们被复制到一个新变量中：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Try it: [https://onlinegdb.com/WC3ihCAuj](https://onlinegdb.com/WC3ihCAuj)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 试试看：[https://onlinegdb.com/WC3ihCAuj](https://onlinegdb.com/WC3ihCAuj)
- en: Above, Function() gets a new variable (called “x” in this case) with the value
    of the variable that was passed in to the call. The function is like Las Vegas.
    Anything that happens to that variable inside the function stays inside the function
    – the variable disappears at the end of the function, while the original variable
    remains as-was.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，Function() 得到一个新变量（在这种情况下称为“x”），其值为传入调用的变量的值。该函数就像是拉斯维加斯。发生在函数内部的任何事情都留在函数内部-变量在函数结束时消失，而原始变量保持不变。
- en: C++ changes this, I have learned, so you can pass in variables that can be modified,
    but I am not a C++ programmer so this post is only about old-skool C.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我学到了 C++ 的变化，所以你可以传递可以修改的变量，但我不是 C++ 程序员，所以这篇文章只涉及老式的 C。
- en: Pointing to a variable’s memory
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指向变量内存
- en: 'By passing in the address of a variable, the function can go to that memory
    and modify the variable. It will be changed:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递变量的地址，函数可以访问该内存并修改变量。它将被更改：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Try it: [https://onlinegdb.com/Y2Z9WUvFG](https://onlinegdb.com/Y2Z9WUvFG)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 试试看：[https://onlinegdb.com/Y2Z9WUvFG](https://onlinegdb.com/Y2Z9WUvFG)
- en: Passing by value is slower, since a new variable has to be created. Passing
    by reference just passes an address and the code uses that address – no new variable
    is created.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 按值传递速度较慢，因为必须创建一个新变量。按引用传递只传递一个地址，代码使用该地址-不会创建新变量。
- en: 'But, using a reference for just for speed is dangerous because the function
    can modify the variable even if you didn’t want it to. Consider passing in a string
    buffer, which is a pointer to a series of character bytes:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，仅仅出于速度考虑使用引用是危险的，因为即使你不希望函数修改变量，它也可以修改变量。考虑传递一个字符串缓冲区，它是一个指向一系列字符字节的指针：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We do this all the time, but since PrintError() has access to the memory passed
    in, it could try to modify it. If we passed in a constant string like “Human Detected”,
    that string would typically be in program memory (though this is not true for
    Harvard Architecture systems like the PIC and Arduino). At best, an operating
    system with memory protection would trap that access with an exception and kill
    the program. At worst, the program would self-modify (which was the case when
    I learned this on OS-9/6809 back in the late 80s — no memory protection on my
    TRS-80 CoCo!).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常这样做，但由于PrintError()有访问传入内存的权限，它可能会尝试修改它。如果我们传递了一个常量字符串，比如“检测到人类”，那么该字符串通常会在程序内存中（尽管对于像PIC和Arduino这样的哈佛架构系统来说不是这样）。在最好的情况下，具有内存保护功能的操作系统将使用异常来捕获该访问并终止程序。在最坏的情况下，程序会自我修改（这是我在80年代末在OS-9/6809上学到的情况——在我的TRS-80
    CoCo上没有内存保护！）。
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Above would likely crash, though if the user had passed in the buffer holding
    a string, it would just be modified:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的做法很可能会崩溃，但如果用户传递了包含字符串的缓冲区，它就会被修改：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Try it: [https://onlinegdb.com/L50JRWYj](https://onlinegdb.com/L50JRWYj_)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 试一下：[https://onlinegdb.com/L50JRWYj](https://onlinegdb.com/L50JRWYj_)
- en: And your point is?
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的观点是？
- en: 'My point is — there are certainly times when speed is the most important thing,
    and it outweighs the potential problems/crashes that could be caused by a bug
    with code using the pointer. Take for example anything that passes in a buffer:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我的观点是——在某些时候，速度确实是最重要的事情，它超过了使用指针的代码可能引起的潜在问题/崩溃。例如，任何传递缓冲区的东西：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There are many bad things that could happen here. By using “strlen”, the buffer
    MUST be a string that has a NIL (‘\0’) byte at the end. This routine could end
    up trampling through memory uppercasing bytes that are beyond the caller’s string.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里可能发生很多不好的事情。通过使用“strlen”，缓冲区必须是一个以NIL（‘\0’）字节结尾的字符串。这个例程可能会在超出调用者字符串范围的字节上进行内存大写化。
- en: 'It is wise to always add another parameter that is the max size of the buffer:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 始终添加另一个参数作为缓冲区的最大大小是明智的：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: That helps. But it is still up to the compiler to catch the wrong type of pointer
    being passed in.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这有所帮助。但捕捉错误类型的指针是否传递给编译器还取决于编译器。
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The compiler should not let you do that, but some may just issue a warning and
    build it anyway. (This is why I always try to have NO warnings in my code. The
    more warnings there are, the more likely you will start ignoring them.)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器不应该让你这样做，但有些可能只会发出警告并继续构建。（这就是为什么我总是试图在我的代码中没有警告。警告越多，您忽略它们的可能性就越大。）
- en: 'Try #1: Passing by Reference'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试一下：通过引用传递
- en: 'Suppose we have a function that returns the date and time as individual values
    (year, month, day, hour, minute and second). Since we cannot get six values back
    from a function, we first try passing in six variables by reference and having
    the routine modify them:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个函数，它以独立值（年、月、日、时、分和秒）的形式返回日期和时间。由于我们无法从函数中获取六个值，因此我们首先尝试通过引用传递六个变量，并让例程修改它们：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'That works fine … as long as you know the parameters are “ints” (whatever that
    is) and not shorts or longs or any other numeric type. This, for example, would
    be bad:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 只要您知道参数是“ints”（不管那是什么），而不是shorts或longs或任何其他数值类型，那就没问题。例如，这样做是不好的：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Above, we are passing in a short (let’s say that is a 16-bit variable on this
    system) in to a function that expects an int (let’s say that is a 32-bit signed
    variable on this system). The function would try to place 32-bits of information
    at the address of a 16-bit value.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们将一个short（假设这在这个系统上是一个16位变量）传递给一个函数，该函数期望一个int（假设这在这个系统上是一个32位有符号变量）。该函数将尝试在16位值的地址处放置32位的信息。
- en: Bad things, as they say, can happen.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有些事情，就像他们说的那样，可能会发生。
- en: 'Try #2: Passing a structure by reference'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试一下：通过引用传递结构
- en: Passing in six variable pointers is more work than passing in one, so if we
    put the values in a structure we could pass in just the pointer to that structure.
    This has the benefit of making sure the structure is only loaded with values it
    can handle (unlike passing in an address of something that might be 8, 16, 32
    or 64 bits).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 传递六个变量指针比传递一个变量更多工作，因此如果我们将值放入结构中，我们只需传递指向该结构的指针。这样做的好处是确保结构只加载它能处理的值（不像传递某些可能是8、16、32或64位的东西的地址）。
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This should greatly reduce the potential problems since you only have one pointer
    to screw up, and if you get the type correct (a TimeStruct) the values it contains
    should be fine since the compiler takes care of trying to set a “uint8_t” to “65535”
    (a warning, hopefully, and storing 8-bits of that 16-bit value as a “loss of precision”).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该极大地减少潜在的问题，因为你只有一个指针可以搞砸，如果你把类型搞对了（一个TimeStruct），它包含的值应该是正确的，因为编译器会尝试将一个“uint8_t”设置为“65535”（一种警告，希望是这样，并将这16位值的8位存储为“精度丢失”）。
- en: 'Try #3: Returning the address of a static'
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试＃3：返回静态的地址
- en: An approach various standard C library functions take is having some fixed memory
    allocated inside the function as a static variable, and then returning a pointer
    to that memory. The user doesn’t make it and therefore isn’t passing in a pointer
    that could be wrong.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一些标准C库函数采用的方法是在函数内部分配一些固定的内存作为静态变量，然后返回指向该内存的指针。用户不会去创建它，因此不会传递一个可能错误的指针。
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This approach is better, since it gets the speed from using a pointer, and the
    safety of not being able to get the pointer wrong since the function tells you
    where it is, not the other way around.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法更好，因为它使用指针来提高速度，并且由于函数告诉您指针的位置，而不是相反，所以不会出错。
- en: BUT … once you have the address of that static memory, you can modify it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但是...一旦你有了那个静态内存的地址，你就可以修改它。
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In a real Date/Time function (like the one in the C library), those variables
    are populated with the system time when you call the function, so even if the
    user changed something like this, it would be set back to what it was the next
    time it was called. But, I can see where there could be issues with other types
    of functions that just hold on to memory like this.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个真正的日期/时间函数中（比如C库中的一个），当你调用函数时，这些变量会被系统时间填充，所以即使用户改变了类似这样的内容，它在下一次被调用时也会被设置回原来的状态。但是，我可以理解其他类型的函数可能存在问题。
- en: Plus, it’s always holding on to that memory whether anyone is using it or not.
    That is a no-no when working on memory constrained systems like an Arduino with
    4K of RAM.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它总是持有那个内存，无论有没有人在使用它。当在像具有4K RAM的Arduino这样的内存受限系统上工作时，这是不允许的。
- en: 'Try #4: Returning a copy of a structure'
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试＃4：返回结构的副本
- en: And now the point of today’s ramblings… I rarely have used this, since it’s
    probably the slowest way to do things, but … you don’t just have to return a date
    type like and int or a bool or a pointer. You can return a structure, and C will
    give the caller a copy of the structure.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在今天的唠叨的重点...我很少使用这个，因为这可能是做事情最慢的方法，但是...你不只是要返回一个日期类型，比如int或bool或指针。你可以返回一个结构，C会给调用者返回结构的一个副本。
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Above is possibly the safest way to return data, since no pointers are used.
    The called makes an new structure variable, and then the function creates a new
    structure variable and the return copies that structure in to the caller’s structure.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以上可能是返回数据的最安全方式，因为没有使用指针。调用者创建一个新的结构变量，然后函数创建一个新的结构变量，返回将该结构复制到调用者的结构中。
- en: 'Try it: [https://onlinegdb.com/F6rR1V-xb](https://onlinegdb.com/F6rR1V-xb)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 试一试：[https://onlinegdb.com/F6rR1V-xb](https://onlinegdb.com/F6rR1V-xb)
- en: This is slower, and consumes more memory during the process of making all these
    copies, BUT it’s far, far safer. Even ChatGPT agrees that, if going to “safe”
    code, this is the better approach.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这更慢，并且在制作所有这些副本的过程中消耗更多的内存，但是它远远更安全。即使ChatGPT也同意，如果要编写“安全”的代码，这是更好的方法。
- en: 'And, at my day job, I experimented with this and it’s been working very well.
    It’s about the closest thing C has to “objects”. I even use it for a BufferStruct
    so I can pass a buffer around without using a pointer (though internally there
    is a pointer to the buffer memory). It looks something like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，在我的日常工作中，我尝试了这个方法，效果非常好。这是C具有“对象”最接近的东西。我甚至用它来处理BufferStruct，这样我就可以传递一个缓冲区而不使用指针（尽管内部有一个指向缓冲区内存的指针）。它看起来像这样：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The extra overhead may be a problem if you are coding for speed, but doing
    this trick (while trying not to think about all the extra work and copying the
    code is doing) gives you a simple way to pass things around without ever using
    a pointer. You could even do this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你为了速度而编码，额外的开销可能会成为问题，但是做这个技巧（尽量不去想代码正在做的所有额外工作和复制）会给你一个简单的方法来传递东西，而不必使用指针。你甚至可以这样做：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: And now a certain percentage of C programmers who stumble in to this article
    should be having night terrors at what is going on here.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一定有一部分C程序员在读这篇文章时应该对这里发生的事情感到恐慌。
- en: Until next time…
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 直至下次…
- en: 'Like this:'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 像这样：
- en: Like Loading...
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 加载中...
- en: '*Related*'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*相关*'
