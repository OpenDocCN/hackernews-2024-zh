- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:29:04'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年05月27日 14:29:04
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: A New Approach to Local Multiplayer / Splitscreen Perspective With Raytracing
    | PH3 Blog
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一种新的本地多人游戏 / 分屏视角与光线追踪 | PH3 博客
- en: 来源：[https://ph3at.github.io/posts/Ray-Coop-Camera/](https://ph3at.github.io/posts/Ray-Coop-Camera/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ph3at.github.io/posts/Ray-Coop-Camera/](https://ph3at.github.io/posts/Ray-Coop-Camera/)
- en: Motivation
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动机
- en: I’m a huge fan of local multiplayer, and in particular local cooperative multiplayer.
    I’m *also* interested in 3D rendering, and especially raytracing.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我是本地多人游戏的超级粉丝，特别是本地合作多人游戏。我*也*对3D渲染特别感兴趣，尤其是光线追踪。
- en: This blog post is the result of me **finally** – barely scraping into 2023 –
    writing about an idea I had in 2019, and which I implemented as a prototype in
    2022\. It uses the unique strengths of fully raytraced realtime rendering to implement
    a new kind of screen sharing for local multiplayer. But before that, some history.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇博文是我终于在 2023 年勉强写的，它源于我在 2019 年提出的一个想法，并在 2022 年作为原型实现的结果。它利用完全光线追踪实时渲染的独特优势来实现本地多人游戏的新型屏幕共享。但在此之前，先来看看历史。
- en: If you’re not interested in the history lesson, then you can just skip directly
    to [the result](#the-result).
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你对历史课不感兴趣，你可以直接跳转到[结果](#the-result)。
- en: I swear that the history part is also interesting though!
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我发誓历史部分也很有趣！
- en: Split-Screen and Shared-Screen History[](#split-screen-and-shared-screen-history)
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分屏和共享屏幕的历史[](#split-screen-and-shared-screen-history)
- en: '*One of the more significant challenges with implementing any kind of local
    coop is the fact that all players share a single screen. Ideally, a game can be
    designed in such a way to make use of one shared perspective, and I generally
    feel like these games work best for local multiplayer. But often, particularly
    for 3D games, working with a single perspective is not feasible.*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*在实现任何类型的本地合作时，一个更大的挑战是所有玩家共享一个屏幕。理想情况下，一个游戏可以设计成这样一种方式，以利用一个共享的视角，我一般觉得这些游戏最适合本地多人游戏。但通常情况下，特别是对于3D游戏，使用单一视角是不可行的。*'
- en: '**Traditional Split-Screen Gameplay in Halo:Infinite**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**《光环：无穷》中的传统分屏游戏玩法**'
- en: '*The traditional solution to this conundrum is splitting the screen into N
    separate areas for N players, which are usually equally sized. Each shows a distinct
    perspective, and – in 3D rendering terms – has its own camera. Some games have
    developed this idea further, either visually or even by integrating it with gameplay.
    In the following I’ll go through a few examples of games that I am aware of which
    did something interesting within a single-screen, multi-camera framework.*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*解决这个难题的传统方法是将屏幕分割为N个区域，用于N个玩家，通常是大小相等的。每个区域显示一个独特的视角，并且 - 从3D渲染的角度来看 - 拥有自己的摄像机。一些游戏进一步发展了这个想法，无论是在视觉上还是通过将其与游戏玩法集成在一起。接下来，我将列举一些我知道的在单屏幕、多摄像机框架内做出有趣尝试的游戏示例。*'
- en: '*Renegade Ops – Dynamic Splitting[](#renegade-ops--dynamic-splitting)*'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*Renegade Ops – 动态分屏[](#renegade-ops--dynamic-splitting)*'
- en: '**The 2011 co-op twin-stick shooting action game [Renegade Ops](https://store.steampowered.com/app/99300/Renegade_Ops/)
    was the first time I encountered a system which varies the screen layout in multiplayer
    based on the relative position on the players in world space.**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**2011年合作双摇杆射击动作游戏[Renegade Ops](https://store.steampowered.com/app/99300/Renegade_Ops/)是我第一次遇到一个根据世界空间中玩家的相对位置变化而改变多人游戏屏幕布局的系统。**'
- en: '***Renegade Ops’ Dynamic Split-Screen Implementation***'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '***Renegade Ops 的动态分屏实现***'
- en: '**In the game, each player controls a vehicle, and when they are relatively
    close the screen is shared. If they move further away from each other, at some
    point the game switches over to two separate camera perspectives, which are split
    along a line that responds to the relative positioning. I.e. if the players were
    to be at the exact same postion on the horizontal axis, the line would be perfectly
    vertical, and if they were on the same vertical position, the split line would
    be perfectly horizontal. Any offset will result in a slanted line, as seen in
    the screenshot above.**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**在游戏中，每个玩家控制一个载具，当它们相对接近时，屏幕是共享的。如果它们相互远离，游戏会在某个时刻切换到两个单独的摄像机视角，这些视角沿着相对位置响应的一条线分割。也就是说，如果玩家在水平轴上的位置完全相同，分割线将完全垂直，如果它们在相同的垂直位置上，分割线将完全水平。任何偏移都会导致倾斜的线，就像上面的截图中所见。**'
- en: '**Several more games with a top-down or isometric camera have had this type
    of dynamic visual style for split-screen since Renegade Ops. If you know of anything
    that does something similar earlier than it, do let us know.**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**自《Renegade Ops》以来，有几款拥有俯视或等距摄像头的游戏采用了这种类型的动态分屏视觉风格。如果你知道有早于此的类似作品，请告诉我们。**'
- en: '**In internal PH3 proofreading, it turned out that Lego Indiana Jones 2 used
    dynamic split-screen, and released in 2009\. There might well be an even earlier
    example!**'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**在内部PH3校对中，发现《乐高印第安纳琼斯2》使用了动态分屏，并于2009年发布。可能会有更早的例子！**'
- en: '**DYO – Splitscreen as a Gameplay Mechanic[](#dyo--splitscreen-as-a-gameplay-mechanic)**'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**《DYO – 将分屏视为游戏机制》[](#dyo--splitscreen-as-a-gameplay-mechanic)**'
- en: '***[DYO](https://store.steampowered.com/app/791470/DYO/) is an indie co-op
    puzzle platformer released in 2018\. It implemented an idea which, to me, is nothing
    short of genius: instead of seeing the split-screen as a “necessary evil” required
    to allow two players with individual perspectives on a single screen, it instead
    re-conceptualized the split as a core gameplay mechanic.***'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '***[DYO](https://store.steampowered.com/app/791470/DYO/) 是一款于2018年发布的独立合作解谜平台游戏。对我来说，它实现了一个简直是天才的想法：不将分屏视为“必要的恶”，以便让两个玩家在单个屏幕上拥有各自的视角，而是重新将分屏概念化为核心游戏机制。***'
- en: '****DYO Uses its Split Screen as a Gameplay Mechanic****'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '****《DYO》将其分屏视为游戏机制****'
- en: '***In the game, players are given control over various aspects related to how
    and when the screen is split, and can e.g. arrange both halves to make a previously
    impassable obstacle traversable.***'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '***在游戏中，玩家可以控制与屏幕分割相关的各种方面，例如，可以安排两半使以前无法通过的障碍物变得可通过。***'
- en: '***DYO is now [free on Steam](https://store.steampowered.com/app/791470/DYO/),
    so do check it out if this sounds at all interesting to you!***'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***DYO现在在[Steam上免费](https://store.steampowered.com/app/791470/DYO/)，如果你对此感兴趣，请务必试试！***'
- en: '***Degrees of Separation – Why Not Both?[](#degrees-of-separation--why-not-both)***'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '***《Degrees of Separation – 为什么不两者兼而有之？》[](#degrees-of-separation--why-not-both)***'
- en: '***2019’s [Degrees of Separation](https://store.steampowered.com/app/809880/Degrees_of_Separation/)
    takes both Renegade Ops’ dynamic split and DYO’s screen-split-as-gameplay and
    integrates them into a brilliant puzzle platformer.***'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '***2019年的[Degrees of Separation](https://store.steampowered.com/app/809880/Degrees_of_Separation/)
    将《Renegade Ops》的动态分屏和《DYO》的屏幕分割作为游戏玩法融合到了一个出色的解谜平台游戏中。***'
- en: '****Degrees of Separation is Mechanically Interesting, and it’s also Beautiful****'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '****《Degrees of Separation》在机制上很有趣，而且也很美丽****'
- en: '***Each of Degrees of Separation’s levels introduces a new unique use of dynamic
    splitscreen as a mechanic, and each of those mechanics is in turn explored over
    many puzzles with quite some depth.***'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '***《Degrees of Separation》的每个关卡都引入了动态分屏作为机制的独特用法，并且每个这样的机制又在很多拼图中得到了深入的探索。***'
- en: '***Ys IX – Just Don’t Split It[](#ys-ix--just-dont-split-it)***'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '***《Ys IX – 不要分割它》[](#ys-ix--just-dont-split-it)***'
- en: '***Overall, I’m not a huge fan of split screen gameplay, when it is not used
    in a really clever way as in the games above.***'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '***总的来说，我对分屏游戏玩法并不十分喜欢，除非像上述游戏那样以非常聪明的方式使用。***'
- en: '***One option which I think is underutilized is simply not splitting the screen,
    even in fully 3D games. This is how the coop modes I implemented for both Ys VIII
    an Ys IX work. A single 3D camera does its best to keep both players in frame,
    and both players have the shared ability to adjust it. The video below some gameplay
    using that approach:***'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '***我认为被低估的一个选项是简单地不分割屏幕，即使在完全3D的游戏中也是如此。这就是我为《Ys VIII》和《Ys IX》都实现的合作模式的工作方式。一个单独的3D摄像头尽其所能保持两个玩家在画面内，并且两个玩家都有共享调整它的能力。下面的视频展示了使用该方法的一些游戏玩法：***'
- en: '***[https://www.youtube.com/embed/SNgDIFRG7S8?si=4pviUxcRhcUMSkYr](https://www.youtube.com/embed/SNgDIFRG7S8?si=4pviUxcRhcUMSkYr)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '***[https://www.youtube.com/embed/SNgDIFRG7S8?si=4pviUxcRhcUMSkYr](https://www.youtube.com/embed/SNgDIFRG7S8?si=4pviUxcRhcUMSkYr)'
- en: VIDEO***
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: VIDEO***
- en: '***Of course, this is not without tradeoffs: even with quite a lot of time
    invested into tweaking the camera, it still takes getting used to and good coordination
    between both players, and there are situations in which it can fail to show one
    or even both actual player characters. However, I know that we and others fully
    completed these games, and the shared camera provides a unique gameplay feeling,
    so I wish someone else would also give it a try at some point.***'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '***当然，这并不是没有牺牲的：即使花费了相当多的时间来调整摄像机，玩家之间仍然需要适应并良好协调，有时它可能无法显示一个或甚至两个实际玩家角色。然而，我知道我们和其他人都完成了这些游戏，并且共享摄像机提供了独特的游戏体验，所以我希望某时候也有其他人能试一试。*** '
- en: '***The Idea***'
  id: totrans-36
  prefs:
  - PREF_BQ
  - PREF_H1
  type: TYPE_NORMAL
  zh: '***这个想法***'
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***There is one thing that all implementations of split screen gameplay I am
    aware of at this point have in common: regardless of how the screen is divided
    – either traditionally in a fixed distribution or dynamically – it is still ultimately
    just a split into two or more standard camera perspectives, with one alloted to
    each player.***'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***迄今为止我所知道的所有分屏游戏实现都有一个共同点：无论屏幕如何分割 – 无论是传统的固定分配还是动态分配 – 最终仍然只是将屏幕分割成两个或多个标准摄像机视角，每个玩家分配一个。*** '
- en: ''
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Technical Background: Rasterization Limitations[](#technical-background-rasterization-limitations)***'
  id: totrans-40
  prefs:
  - PREF_BQ
  - PREF_H2
  type: TYPE_NORMAL
  zh: '***技术背景：光栅化的局限性[](#技术背景：光栅化的局限性)*** '
- en: ''
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***This universal truth is not surprising. Realtime rendering in games – at
    least until the advent of HW-accelerated raytracing – was based on rasterization,
    and the traditional rasterization pipeline assumes that there is one consistent
    camera projection across the entire screen. In order to accomplish split screen
    rendering in 3D games, the traditional cross-platform approach required basically
    performing almost the entire work of rendering a frame again, once for each perspective.***'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***这个普遍真理并不令人惊讶。游戏中的实时渲染 – 至少在硬件加速的光线追踪出现之前 – 是基于光栅化的，并且传统的光栅化流水线假设整个屏幕上有一个一致的摄像机投影。为了在3D游戏中实现分屏渲染，传统的跨平台方法基本上需要为每个视角再次执行几乎渲染整个帧的所有工作。*** '
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***A technology I’m also quite interested in, but which is unrelated to the
    topic of this post, actually brought some improvements in this respect: **VR**.
    VR rendering requires two perspectives, one per eye, or ideally even more for
    large-FoV displays. This motivated GPU vendors to provide improved support for
    this use case, though I am not sure if many (or any?) split-screen games actually
    leverage such hardware support.***'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***我也对一项与本文主题无关的技术很感兴趣，那就是**VR**。VR渲染需要两个视角，每个眼睛一个，或者对于大视场显示器来说最好是更多。这促使GPU供应商为这种用例提供了改进的支持，尽管我不确定有多少（或者有没有？）分屏游戏实际上利用了这样的硬件支持。*** '
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***NVidia has a thorough and very well-illustrated technical blog post about
    the VR-related multi-view rendering topic [here](https://developer.nvidia.com/blog/turing-multi-view-rendering-vrworks/).
    Give it a read if you want to learn more.***'
  id: totrans-46
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***NVIDIA在这里有一篇关于与VR相关的多视图渲染主题的详尽而且非常有图解的技术博文[（链接）](https://developer.nvidia.com/blog/turing-multi-view-rendering-vrworks/)。如果你想了解更多，可以阅读一下。*** '
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***However, even with the most advanced hardware support, only up to 4 different
    views can be rendered at once without substantial performance implications – and
    even that requires quite a lot of development effort.***'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***然而，即使有最先进的硬件支持，一次只能渲染最多4个不同的视图而没有重大的性能影响 – 甚至这也需要相当多的开发工作。*** '
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***The Potential of Raytracing[](#the-potential-of-raytracing)***'
  id: totrans-50
  prefs:
  - PREF_BQ
  - PREF_H2
  type: TYPE_NORMAL
  zh: '***光线追踪的潜力[](#光线追踪的潜力)*** '
- en: ''
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Raytracing changes these fundamental rules, and essentially eliminates all
    of these limitations. Somewhat simplified, every pixel is generated by shooting
    an individual ray into the scene and seeing what it hits. As such, we can in theory
    use a different direction and position for every single one of these rays. And
    that’s where we can finally get to the idea this is all about:***'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***光线追踪改变了这些基本规则，并且基本上消除了所有这些限制。略微简化，每个像素都是通过向场景发射一个单独的光线并观察它的击中情况生成的。因此，理论上我们可以为每一个这些光线使用不同的方向和位置。这就是我们最终可以实现的想法所在：*** '
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Rather than having entirely distinct and clearly delineated perspectives
    for each player, dynamically adjust the camera(s) at a pixel level.***'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***与其为每个玩家拥有完全不同和清晰界定的视角，动态调整摄像机(s)到像素级。*** '
- en: ''
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***This allows us to not only use an arbitrary distribution of screen space
    to various players’ perspectives, but even smoothly interpolate between their
    perspectives!***'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***这使我们不仅可以使用屏幕空间的任意分布来展示各个玩家的视角，甚至可以在他们的视角之间平滑地插值！***'
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Note that basically no mainstream game which uses raytracing today actually
    does so for the so-called primary or initial rays (mostly since rasterization
    is just more effective). It’s certainly possible to do so though, as you’ll see
    shorty.***'
  id: totrans-58
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***请注意，今天基本上没有使用光线追踪的主流游戏实际上会对所谓的主要或初始光线进行光线追踪（主要是因为光栅化更有效）。不过，你很快就会看到，这是完全可能的。***'
- en: ''
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***The Result***'
  id: totrans-60
  prefs:
  - PREF_BQ
  - PREF_H1
  type: TYPE_NORMAL
  zh: '***结果***'
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Without further ado, here’s what that could look like:***'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***话不多说，这就是它可能看起来像的样子：***'
- en: ''
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***[https://www.youtube.com/embed/O_LH6aGUzbY?si=dkKKrmzicJlHNOYV](https://www.youtube.com/embed/O_LH6aGUzbY?si=dkKKrmzicJlHNOYV)'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***[https://www.youtube.com/embed/O_LH6aGUzbY?si=dkKKrmzicJlHNOYV](https://www.youtube.com/embed/O_LH6aGUzbY?si=dkKKrmzicJlHNOYV)'
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: VIDEO***
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***视频***'
- en: ''
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***This is a short video showing a basic implementation of this idea.'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***这是一个展示这个想法的基本实现的短视频。'
- en: As you can see, the scene starts with a shared perspective, and when the two
    spheres (controlled by the two players) move further away from each other, the
    screen is smoothly split into separate areas for each of them. The most interesting
    part is what happens in the “no-man’s land” between, where space appears squished
    as the camera parameters are interpolated.***
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***正如你所看到的，场景从一个共享的视角开始，当两个球（由两名玩家控制）彼此远离时，屏幕会平滑地分割成每个玩家的独立区域。最有趣的部分是发生在它们之间的“无人区”，在那里，由于相机参数的插值，空间看起来被压缩了。***'
- en: ''
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***In case you’re wondering about the game: what you’re seeing (for the first
    time) is *Sphere Spectacle*. It’s something we worked on shortly after the release
    of the first RTX-series GPUs, so around 2019\. The idea, at a gameplay level,
    is to basically be a ball-rolling game. At a technical level, we wanted to build
    something that is **entirely** raytraced, with absolutely no rasterization. We
    also didn’t want to use any images/textures at all in the game, so everything
    is just geometry and shaders.***'
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***如果你想知道游戏是什么：你所看到的（第一次）是*球体壮观*。这是我们在首批RTX系列GPU发布后不久，大约在2019年左右开发的。在游戏玩法上，基本上是一个滚动球游戏。在技术层面上，我们想构建的是一个**完全**光线追踪的东西，绝对不使用光栅化。我们也不想在游戏中使用任何图像/纹理，所以一切都只是几何和着色器。***'
- en: ''
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Implementation***'
  id: totrans-73
  prefs:
  - PREF_BQ
  - PREF_H1
  type: TYPE_NORMAL
  zh: '***实施***'
- en: ''
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***I won’t go into too much detail here, but the most interesting part of the
    implementation is how to actually decide to split the screen. I experimented with
    a few options here. Mathematically, the problem seems similar to trying to draw
    a Voronoi diagram with the players on-screen positions as the points, and then
    setting some value for the width of the interpolation. I tried making that work,
    but ended up reverting to a more ad-hoc solution.***'
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***在这里我不会详细说明，但实现中最有趣的部分是如何实际决定分割屏幕。我在这里尝试了几个选项。从数学上讲，这个问题似乎类似于尝试用屏幕上玩家的位置绘制泰森多边形图，然后设置一些值来确定插值的宽度。我试图让它工作，但最终还是回到了更加临时的解决方案。***'
- en: ''
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***What you saw in the video is the result of me trying a few different formulas
    and sticking with something that looks vaguely like what I wanted, but there is
    a wealth of options to explore here. I ultimately only spent two working days
    hacking this demo into Sphere Spectacle – and that includes implementing support
    for two players!'
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***你在视频中看到的是我尝试了一些不同的公式，并坚持选择了看起来像我想要的东西，但在这里有很多探索的选项。我最终只花了两个工作日将这个演示程序改编成球体壮观
    - 这还包括为两名玩家实现支持！'
- en: As one might expect from that, the code is quite unhinged. The most interesting
    core aspect is here, in this excerpt of the ray generation shader:***
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***正如人们所预料的那样，代码相当混乱。最有趣的核心方面在这里，在光线生成着色器的这一部分：***'
- en: ''
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***I still think it’s remarkable that I could get this entire idea working,
    at least to some extent, in just two days of hacking, and it shows how it is fundamentally
    so much simpler than trying to do anything like it in a rasterization pipeline.***'
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***我仍然认为，我能够在短短两天的时间里将整个想法实现，至少在某种程度上，这令人感到非常了不起，这表明了它在根本上比试图在光栅化管线中做任何类似的事情要简单得多。***'
- en: ''
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Conclusion***'
  id: totrans-82
  prefs:
  - PREF_BQ
  - PREF_H1
  type: TYPE_NORMAL
  zh: '***结论***'
- en: ''
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***If you’ve read until this point then thanks for coming with me on this journey
    through the history of local multiplayer camera perspectives and my idea on having
    it take a new step based on raytracing.***'
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***如果你读到了这一点，那么感谢你和我一起通过本地多人游戏摄像机视角历史以及我基于光线追踪的新想法的旅程。***'
- en: ''
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Now we just need someone to build a full game around it!***'
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***现在我们只需要有人围绕它构建一个完整的游戏！***'
