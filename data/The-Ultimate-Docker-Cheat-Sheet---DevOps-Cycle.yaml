- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:46:56'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:46:56'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The Ultimate Docker Cheat Sheet - DevOps Cycle
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 终极 Docker 速查表 - DevOps 循环
- en: 来源：[https://devopscycle.com/blog/the-ultimate-docker-cheat-sheet/](https://devopscycle.com/blog/the-ultimate-docker-cheat-sheet/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://devopscycle.com/blog/the-ultimate-docker-cheat-sheet/](https://devopscycle.com/blog/the-ultimate-docker-cheat-sheet/)
- en: Get your Docker Cheat Sheet as [PDF](http://devopscycle.com/wp-content/uploads/sites/4/2023/12/the-ultimate-docker-cheat-sheet-1.pdf) or
    as an [image](http://devopscycle.com/wp-content/uploads/sites/4/2023/11/the-ultimate-docker-cheat-sheet-4.png).
    To follow this article, make sure your development machine has [Docker installed](https://docs.docker.com/get-docker/).
    In this blog post, we write our own Dockerfiles, learn how to create images, and
    finally run them as container. The complete source code is available on [GitHub](https://github.com/aichbauer/the-ultimate-docker-cheat-sheet).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 获取你的 Docker 速查表，可以选择[PDF](http://devopscycle.com/wp-content/uploads/sites/4/2023/12/the-ultimate-docker-cheat-sheet-1.pdf) 或者一个 [图片](http://devopscycle.com/wp-content/uploads/sites/4/2023/11/the-ultimate-docker-cheat-sheet-4.png) 。为了跟随本文，确保你的开发机器已经[安装了
    Docker](https://docs.docker.com/get-docker/)。在这篇博客文章中，我们将编写自己的 Dockerfile，学习如何创建镜像，最终将它们作为容器运行。完整的源代码可以在[GitHub](https://github.com/aichbauer/the-ultimate-docker-cheat-sheet)上找到。
- en: Please [download](http://devopscycle.com/wp-content/uploads/sites/4/2023/11/the-ultimate-docker-cheat-sheet-1.pdf) your
    Docker Cheat Sheet to follow along with this article. You are also welcome to
    share it with your colleagues and friends.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请[下载](http://devopscycle.com/wp-content/uploads/sites/4/2023/11/the-ultimate-docker-cheat-sheet-1.pdf)你的
    Docker 速查表，以便跟随本文。欢迎与你的同事和朋友分享。
- en: Be the first to join our new [community](https://discord.gg/7xpRbG2gY9) and
    stay up-to-date on the latest DevOps topics (free cookies for the first 42 arrivals!).
    Don’t miss out on any new resources by signing up for our [newsletter](#newsletter).
    Get access to our latest resources and insights directly in your inbox!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 成为我们新[社区](https://discord.gg/7xpRbG2gY9)的第一批成员，并了解最新的 DevOps 主题（首批到达的前 42 人免费提供饼干！）。通过注册我们的[通讯](#newsletter)，不要错过任何新资源。直接在你的收件箱里获得我们的最新资源和见解！
- en: All these things build on top of each other. You need a Dockerfile to create
    an image, and you need an Image to create a Container.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都是相互依赖的。你需要一个 Dockerfile 来创建一个镜像，你需要一个镜像来创建一个容器。
- en: 'In conclusion: the Dockerfile is the base for an image, and an image is used
    to create a container. A container is running as a process on the host machine.
    Yet, it has its own file system and is separated from the other processes.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 总之：Dockerfile 是镜像的基础，而镜像用于创建容器。容器作为主机上的一个进程运行。然而，它有自己的文件系统，并与其他进程分隔开来。
- en: 'To generate a Dockerfile, you can create a plain text file. This article will
    use the command line for it:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个 Dockerfile，你可以创建一个纯文本文件。本文将使用命令行来完成：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A Dockerfile holds all the instructions to build, start and run your application.
    Every command that you otherwise need to execute manually is written in a single
    file. It starts by using a [base image](https://devopscycle.com/blog/how-do-you-choose-a-docker-base-image/).
    This is usually a small Linux distribution like alpine. If you have to execute
    a binary, you should use `FROM [scratch](https://hub.docker.com/_/scratch/)`.
    This article uses a [Fastify](https://fastify.dev/) server, so it uses an [alpine](https://www.alpinelinux.org/) image
    configured for [Node.js](https://nodejs.org/en). You can view the complete code
    on [GitHub](https://github.com/aichbauer/the-ultimate-docker-cheat-sheet). If
    you are interested in how you should choose base images, you can read our article:
    [“How Do You Choose A Docker Base Image”](https://devopscycle.com/blog/how-do-you-choose-a-docker-base-image/).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Dockerfile 包含了构建、启动和运行应用程序的所有指令。你需要手动执行的每个命令都写在一个单独的文件中。它首先使用一个[基础镜像](https://devopscycle.com/blog/how-do-you-choose-a-docker-base-image/)。通常这是一个小型的
    Linux 发行版，比如 alpine。如果你必须执行一个二进制文件，你应该使用 `FROM [scratch](https://hub.docker.com/_/scratch/)。本文使用了一个[Fastify](https://fastify.dev/)服务器，因此它使用了一个为[Node.js](https://nodejs.org/en)配置的[alpine](https://www.alpinelinux.org/)镜像。你可以在[GitHub](https://github.com/aichbauer/the-ultimate-docker-cheat-sheet)上查看完整的代码。如果你对如何选择基础镜像感兴趣，你可以阅读我们的文章：“你如何选择
    Docker 基础镜像”
- en: 'Now we will edit the Dockerfile in Visual Studio Code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在 Visual Studio Code 中编辑 Dockerfile：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can compose a Dockerfile with many stages. You can think of one stage,
    as one image. Furthermore, you can then use materials like files from one stage
    in another stage. A new stage always starts with the line `FROM <base-image>`.
    If you are interested in how you should choose base images, you can read our article:
    [“How Do You Choose A Docker Base Image”](https://devopscycle.com/blog/how-do-you-choose-a-docker-base-image/).
    You name a stage using the `as` keyword. This article uses a simple HTML and JavaScript
    file as our client application. As a web server, we will use [NGINX](https://www.nginx.com/).
    You can view the complete code on [GitHub](https://github.com/aichbauer/the-ultimate-docker-cheat-sheet).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用多个阶段组成一个 Dockerfile。您可以将一个阶段视为一个镜像。此外，您可以在另一个阶段中使用来自一个阶段的材料，如文件。一个新的阶段总是以
    `FROM <base-image>` 行开始。如果您想了解如何选择基础镜像，您可以阅读我们的文章：[“如何选择 Docker 基础镜像”](https://devopscycle.com/blog/how-do-you-choose-a-docker-base-image/)。您可以使用
    `as` 关键字来命名一个阶段。本文将使用一个简单的 HTML 和 JavaScript 文件作为我们的客户端应用程序。作为 web 服务器，我们将使用 [NGINX](https://www.nginx.com/)。您可以在
    [GitHub](https://github.com/aichbauer/the-ultimate-docker-cheat-sheet) 上查看完整的代码。
- en: A typical approach is to have a `builder stage`, with a larger base image. This
    image holds all executables and libraries needed to build your source code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的方法是有一个 `builder stage`，拥有一个更大的基础镜像。该镜像包含构建源代码所需的所有可执行文件和库。
- en: The second stage is the `serve stage` and has a small base image. The benefit
    is fewer dependencies and libraries. Just enough to execute and serve your application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第二阶段是 `serve stage`，拥有一个小的基础镜像。好处是减少了依赖和库。刚好足够执行和提供你的应用程序。
- en: With this approach, you make your final image both smaller and more secure.
    As the image size decreases and the image consists of fewer libraries. Fewer system
    libraries means it has a lower attack surface. Multistage Dockerfiles are not
    limited to this use case and can have more than two stages as well.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这种方法，你可以使最终的镜像既更小又更安全。随着镜像大小的减小和镜像由更少的库组成。更少的系统库意味着它具有更低的攻击面。多阶段 Dockerfiles
    不仅限于此用例，也可以有多于两个阶段。
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is an example of a multistage app:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个多阶段应用程序的示例：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We use the Docker CLI to build images out of our Dockerfiles.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Docker CLI 来根据我们的 Dockerfiles 构建镜像。
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating an image from a Dockerfile only requires the `docker build` command.
    Without specifying a name and tag, you can reference the image only by its image
    ID.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Dockerfile 创建镜像只需要 `docker build` 命令。如果不指定名称和标记，则只能通过其镜像 ID 引用镜像。
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you want to give your image a name, you need to use the `--tag` (shorthand
    syntax: `-t`) flag while building the image. You will need this if you are working
    with a registry like [Docker Hub](https://hub.docker.com/).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想要给镜像命名，需要在构建镜像时使用 `--tag`（简写语法：`-t`）标志。如果您正在使用像 [Docker Hub](https://hub.docker.com/)
    这样的注册表，则需要这个。
- en: To name and tag your image, use the following pattern: `<name>:<tag>`. This
    is usually translated into `<username>/<repository>:<version>`. The username corresponds
    to the username of the registry.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要命名和标记您的镜像，请使用以下模式：`<name>:<tag>`。这通常被翻译为 `<username>/<repository>:<version>`。用户名对应于注册表的用户名。
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A container is a running image. You can run images with the CLI command `docker
    run <image-name>`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个容器是一个正在运行的镜像。您可以使用 CLI 命令 `docker run <image-name>` 运行镜像：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Every Docker installation comes with a local registry. Docker stores your images
    here. First, the `docker run` command will look at the local registry and try
    to find the image. This will happen with our image, since we built it on the same
    machine we are executing the `docker run` command. If it does not find the image
    locally, it will take a look at the Docker Hub registry. You can also get images
    from other registries (e.g., your self-hosted registry). For that, you can use
    the URL of the self-hosted registry.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Docker 安装都带有一个本地注册表。Docker 将您的镜像存储在这里。首先，`docker run` 命令将查看本地注册表并尝试找到镜像。由于我们在执行
    `docker run` 命令的同一台机器上构建了它，这将发生在我们的镜像上。如果本地找不到镜像，则会查看 Docker Hub 注册表。您还可以从其他注册表获取镜像（例如，您的自托管注册表）。为此，您可以使用自托管注册表的
    URL。
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you run an image, it starts in a foreground process. The container is running
    as a process in the terminal where you executed the `docker run` command. If you
    kill the terminal, it will stop the container immediately. To let your container
    run on your machine or server, you can run the container as a background process.
    In that way, you can close your terminal with no worries.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行镜像，它将在前台进程中启动。容器作为在执行`docker run`命令的终端中的一个进程运行。如果您关闭终端，它将立即停止容器。为了让您的容器在您的机器或服务器上运行，您可以将容器作为后台进程运行。这样，您就可以放心关闭终端。
- en: 'The `--detached` (shorthand syntax: `-d`) flag will start containers in a background
    process:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`--detached`（简写语法：`-d`）标志将在后台进程中启动容器：'
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You will see that the command will exit, and you can use the terminal again.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到命令退出，然后可以再次使用终端。
- en: Docker will only show the running containers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Docker只会显示正在运行的容器。
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you want to see all containers, even the stopped containers, you need to
    pass the flag `--all` (shorthand syntax: `-a`).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要查看所有容器，即使是已停止的容器，您需要传递`--all`（简写语法：`-a`）标志。
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Occasionally, you would like to stop containers. When you stop containers, they
    are still on the system, you can start them again. If you wish to clean the container
    from the system, you will need to remove it. You can only remove a stopped container.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您希望停止容器。停止容器后，它们仍然存在于系统中，您可以重新启动它们。如果希望从系统中清除容器，则需要将其删除。您只能删除已停止的容器。
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you wish to remove a container as soon as you stop it, you can pass the `--rm` flag
    when starting a container. Only use this if your container is stateless. If your
    container has its own state, make sure to use volumes to preserve it. Otherwise,
    all your data inside the container is lost when your container stops.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望一旦停止容器就删除容器，可以在启动容器时传递`--rm`标志。只有在容器是无状态的情况下才使用此选项。如果您的容器具有自己的状态，请确保使用卷来保留它。否则，当容器停止时，容器内的所有数据都将丢失。
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Sometimes signals are not passed to the container properly. Imagine you have
    killed your terminal because you could not stop the container with CTRL+C. But
    If you try to restart the container, it tells you that the port is already allocated.
    This means your old container is still running. To kill a container, run the following
    command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有时信号无法正确传递到容器。想象一下，您已经因为无法使用CTRL+C停止容器而杀死了终端。但是，如果您尝试重新启动容器，它会告诉您端口已被分配。这意味着您的旧容器仍在运行。要终止容器，请运行以下命令：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Usually, a Docker container exposes one or many ports. You can access the application
    which is running inside the container via those ports. To have access to these
    ports, you need to publish those port during the container creation. Another way
    to access containers from the host system is by executing commands inside them.
    This is often used for debugging or single use container application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Docker容器公开一个或多个端口。您可以通过这些端口访问运行在容器内部的应用程序。要访问这些端口，您需要在容器创建期间发布这些端口。从主机系统访问容器的另一种方式是在其中执行命令。这通常用于调试或单次使用容器应用程序。
- en: To expose the ports to the host system, you need to add the `--publish` (shorthand
    syntax: `-p`) flag.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要将端口暴露给主机系统，您需要添加`--publish`（简写语法：`-p`）标志。
- en: '[PRE15]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the first example above, we bind the port 3000 from the container to the
    port 3000 on the host system. The host system is your development machine or your
    server. The format is the following `--publish <hostport>:<containerport>`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的第一个示例中，我们将容器的端口3000绑定到主机系统的端口3000上。主机系统可以是您的开发机器或服务器。格式如下：`--publish <hostport>:<containerport>`。
- en: Sometimes, you want access to a container. This can be beneficial for debugging.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您希望访问容器。这对于调试很有好处。
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`--interactive --tty` (shorthand syntax `-it`) instructs Docker to allocate
    a pseudo-TTY connection. In this way, the containers’ stdin (standard input) creates
    an interactive shell in the container.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`--interactive --tty`（简写语法`-it`）指示Docker分配伪TTY连接。这样，容器的stdin（标准输入）在容器中创建一个交互式shell。'
- en: 'You can execute any command that would be possible within the container. If
    you have a Debian container running, you would be able to list the directory:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以执行任何容器内可能的命令。如果您运行的是Debian容器，您将能够列出目录：
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can even create a secure shell like connection with the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以使用以下命令创建一个类似于安全外壳的连接：
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Data that is stored inside a container is not persisted by default. When you
    stop and remove a container, all data from this container is lost. In our application,
    if you click the button on the website ([http://localhost:80](http://localhost/))
    we will write “New message” into a JSON file inside the container. Now if we stop
    and remove the container, all those messages are deleted as well.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 容器内存储的数据默认情况下不会持久化。当你停止并移除一个容器时，该容器中的所有数据都会丢失。在我们的应用程序中，如果你点击网站上的按钮（[http://localhost:80](http://localhost/)），我们会将“New
    message”写入容器内的一个 JSON 文件中。现在如果我们停止并移除容器，所有这些消息也会被删除。
- en: 'If you want to persist data between container starts, you need to use volumes.
    There are two different volume types: named volumes and mounted volumes. Named
    volumes are completely handled by Docker, a mounted volume is managed by you.
    For a mounted volume, you need to specify the location on the host system where
    this data will be stored. We use the `--volume` (shorthand `-v`) in our run command.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要在容器启动之间保持数据持久化，你需要使用卷（volumes）。有两种不同类型的卷：命名卷和挂载卷。命名卷完全由 Docker 处理，挂载卷由你管理。对于挂载卷，你需要指定主机系统上存储这些数据的位置。我们在运行命令中使用`--volume`（缩写`-v`）。
- en: '[PRE19]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'For our application, we need to use the following command for the server container:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用程序，我们需要使用以下命令来启动服务器容器：
- en: '[PRE20]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You can get an overview of all volumes and their metadata by listing them.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过列出它们来获取所有卷及其元数据的概述。
- en: '[PRE21]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this article we learned the difference between a Dockerfile, an image and
    a container. You can now write your Dockerfiles to create images. Furthermore,
    you can start containers and access them from the host system. Additionally, you
    also learned how to persist data between container starts.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们学习了 Dockerfile、镜像和容器之间的区别。现在你可以编写你的 Dockerfile 来创建镜像。此外，你还学会了如何启动容器并从主机系统访问它们。另外，你还学会了如何在容器启动之间持久化数据。
- en: If you need help with your containerization, [feel free to contact us](https://calendly.com/devopsberatung/meet),
    or join our new community for further questions and discussions (free cookies
    for the first 42 arrivals)!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要帮助容器化，[随时联系我们](https://calendly.com/devopsberatung/meet)，或加入我们的新社区进行进一步问题和讨论（前42位到场者可获得免费饼干）！
- en: You liked this article? Share it with your colleagues and friends.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你喜欢这篇文章吗？与你的同事和朋友分享吧。
- en: Do not miss out on our latest tips, guides, and updates – sign up for our newsletter
    now! We promise to only send you the most relevant and useful information. Be
    part of our journey in exploring the world of Docker and beyond.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 不要错过我们的最新提示、指南和更新——现在就订阅我们的通讯！我们承诺只向你发送最相关和最有用的信息。加入我们的行列，一起探索 Docker 和更多领域的世界。
