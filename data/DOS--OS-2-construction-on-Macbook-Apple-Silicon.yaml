- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:48:08'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:48:08'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: DOS, OS/2 construction on Macbook Apple Silicon
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Macbook Apple Silicon上构建DOS、OS/2
- en: 来源：[https://retrocoding.net/building-for-dos-os2-and-dos-on-a-macbook-apple-silicon](https://retrocoding.net/building-for-dos-os2-and-dos-on-a-macbook-apple-silicon)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://retrocoding.net/building-for-dos-os2-and-dos-on-a-macbook-apple-silicon](https://retrocoding.net/building-for-dos-os2-and-dos-on-a-macbook-apple-silicon)
- en: I've previously written about [OpenWatcom as a gateway to the ancient world](https://retrocoding.net/openwatcom-gateway-to-ancient-world-of-x86).
    However, at that time, I focused on installing it using Docker, as OpenWatcom
    1.9 only works on Windows and Linux. I'm not a full-time Windows or Linux user,
    so when I discovered that OpenWatcom's 2.0 series can be compiled and run on macOS,
    **and** it can run on ARM macOS, I was thrilled.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前写过关于[OpenWatcom作为通往古老世界的入口](https://retrocoding.net/openwatcom-gateway-to-ancient-world-of-x86)。然而，那时，我专注于使用Docker安装它，因为OpenWatcom
    1.9只在Windows和Linux上工作。我不是全职的Windows或Linux用户，所以当我发现OpenWatcom的2.0系列可以在macOS上编译和运行，并且可以在ARM
    macOS上运行时，我感到非常激动。
- en: 'It''s not mentioned on their website, and only in less prominent places like
    GitHub Issues. However, after testing it out, I believe it''s worth sharing with
    others who share my hobby: writing old Windows (and DOS) applications but still
    wants to use their newest, shiniest MacBook to do so.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 它没有出现在他们的网站上，只出现在像GitHub Issues这样不那么显眼的地方。然而，经过测试，我相信值得与其他像我一样热衷于写老式Windows（和DOS）应用程序但仍然想使用他们最新、最闪亮的MacBook的人分享。
- en: Preparation
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: There are some preparations you need to do before building OpenWatcom source
    code on an Apple Silicon.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在在Apple Silicon上构建OpenWatcom源代码之前，你需要做一些准备工作。
- en: '**First, the compiler and platform SDK**. To build anything on macOS, you need
    their official compiler and IDE. Xcode. Recently, they tried to slim everything
    down, so it''ll be 2 GB-ish download from [developer.apple.com](http://developer.apple.com).'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**首先，编译器和平台SDK**。要在macOS上构建任何东西，你需要他们的官方编译器和IDE。Xcode。最近，他们试图精简一切，所以从[developer.apple.com](http://developer.apple.com)下载大约2GB的内容。'
- en: '**Second, homebrew**. This is optional if you know what you''re doing. However,
    to smoothly compile OpenWatcom, you''d need DOSBOX command line and I feel the
    easiest way to obtain DosBox is using homebrew. Instal it from [brew.sh](https://brew.sh).'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**其次，homebrew**。如果你知道你在做什么，这是可选的。然而，为了顺利编译OpenWatcom，你需要DOSBOX命令行，我觉得获取DosBox最简单的方法是使用homebrew。从[brew.sh](https://brew.sh)安装它。'
- en: Getting Dependencies
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取依赖项
- en: To get the dependencies, first we install DosBox. In Terminal, use this command
    to install dosbox.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取依赖项，首先我们安装DosBox。在终端中，使用以下命令安装dosbox。
- en: '[PRE0]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That's the only dependencies you need.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你需要的唯一依赖项。
- en: Compilation
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译
- en: Compilation is actually straightforward. You'd only to obtain the source code
    for "latest" OpenWatcom v2.0 series. I'm using the February 2024 archive. Go to
    the release page and dowload the source (.tar.gz). Extract it
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 编译实际上非常简单。你只需要获取“latest” OpenWatcom v2.0系列的源代码。我正在使用2024年2月的存档。转到发布页面并下载源代码（.tar.gz）。解压它
- en: '[PRE1]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Before we do everything, now open the file `setenv.h` and search for line with
    `export OWTOOLS` and change it to:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们做所有事情之前，现在打开文件 `setenv.h` 并搜索带有 `export OWTOOLS` 的行并更改为：
- en: '[PRE2]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will change the compilation to clang, the compiler built into Xcode and
    then search for the line with `export OWDOSBOX`, uncomment and change it to.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这将改变编译为clang，Xcode内置的编译器，然后搜索带有 `export OWDOSBOX` 的行，取消注释并更改为。
- en: '[PRE3]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: From this point forward you're ready. The last step is just run this
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点上，你已经准备好了。最后一步只是运行这个命令
- en: '[PRE4]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And, wait. This will compile the OpenWatcom compiler using your `clang` compiler
    on your ARM64 platform. If everything is finished, you can put the compiled product
    by using this command.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 等待。这将使用你的ARM64平台上的 `clang` 编译器编译OpenWatcom编译器。如果一切都完成了，你可以通过以下命令将编译后的产品放置。
- en: '[PRE5]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will copy the resulting compilers, supporting headers for all supported
    platforms, as well as the libraries into `rel` directory.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将复制生成的编译器、支持所有支持平台的头文件以及库到 `rel` 目录中。
- en: I'm usually using watcom on a directory that I put on paths. For me it's on
    `/opt/watcom`. So if you haven't made it yet, you can run this to create a directory
    for your watcom installation and copy everything into that place.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常在一个我放置在路径上的目录上使用watcom。对我来说，它在 `/opt/watcom` 上。所以如果你还没有做过，你可以运行这个命令来为你的watcom安装创建一个目录，并把所有东西复制到那个地方。
- en: '[PRE6]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To use the binary, you need to add the toolchain to `PATH`. The toolchain for
    Apple Silicon mac is in `armo64` subdirectory. You need to also setup the `WATCOM`
    environment variable. That will point to our installation directory.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用二进制文件，你需要将工具链添加到 `PATH` 中。Apple Silicon Mac 的工具链位于 `armo64` 子目录中。你还需要设置 `WATCOM`
    环境变量，指向我们的安装目录。
- en: '[PRE7]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For each platform (16-bit Windows, 32-bit Windows, DOS, OS2) you need to set
    different environment variables for `INCLUDE` and `LIBS`. Here's for 32-bit Windows
    platform.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个平台（16位 Windows、32位 Windows、DOS、OS2），你需要设置不同的环境变量来配置 `INCLUDE` 和 `LIBS`。这里是针对
    32位 Windows 平台的设置。
- en: '[PRE8]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Please refer to the OpenWatcom/Watcom manual on where the headers and the libs
    are. You can basically guess from `/h` directory and `/libxxx` directory.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 OpenWatcom/Watcom 手册，查找头文件和库文件的位置。你可以从 `/h` 目录和 `/libxxx` 目录基本猜出来。
- en: After that you can run `wcl386` to see whether it works or not.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你可以运行 `wcl386` 看看是否能正常工作。
- en: '[PRE9]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This means that your watcom compilers are ready to be used to target old platforms.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你的 Watcom 编译器已经准备好用于旧平台的目标。
