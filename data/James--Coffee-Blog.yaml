- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-28 18:07:29'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-28 18:07:29'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: James' Coffee Blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 詹姆斯的咖啡博客
- en: 来源：[https://jamesg.blog/2024/02/28/programming-projects/](https://jamesg.blog/2024/02/28/programming-projects/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://jamesg.blog/2024/02/28/programming-projects/](https://jamesg.blog/2024/02/28/programming-projects/)
- en: My knowledge of programming has been largely self-directed. When I get excited
    about an idea, I research what I need to do to solve that problem. For example,
    when I was interested in how search engines work, I learned about the computational
    efficiency of sets. I discovered the problem "how can I check if I have crawled
    this URL?" when I may have crawled thousands of URLs. To answer this question
    faster, I used a set, which has O(1) lookup time, instead of O(n) lookup time.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我的编程知识主要是自学的。当我对一个想法感到兴奋时，我会研究需要解决这个问题的方法。例如，当我对搜索引擎的工作原理感兴趣时，我了解了集合的计算效率。我发现了一个问题：“我如何检查是否已经爬取了这个URL？”当我可能已经爬取了数千个URL时。为了更快地回答这个问题，我使用了一个具有O(1)查找时间的集合，而不是O(n)查找时间。
- en: Learning what you need to solve a problem is exciting, but following your own
    path in coding also leaves you with gaps in your knowledge. My conclusion here
    is that if you keep challenging yourself, you will fill in the gaps as you go
    (Even if it takes longer than it would have if you pursured a course. Fun is an
    important motivator for making progress; pursue what excites you.)
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 学会解决问题所需的知识是令人兴奋的，但是在编码中跟随自己的道路也会让你的知识有所欠缺。我的结论是，如果你不断挑战自己，你将在前进的过程中填补这些空白（即使这可能比追求一门课程要花更长的时间。乐趣是推动进步的重要动力；追求你所激动的东西。）
- en: 'The moment I really started to understand computational efficiency -- and build
    an appreciation for making my programs faster -- was tackling that one problem
    for that one search engine. Since then, I sometimes ask myself: what can I do
    next? What is the next challenge? This is highly specific to where you are; some
    ideas will make sense, others will seem out of reach. Thus is learning.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当我真正开始理解计算效率，并开始欣赏如何加快程序速度的时候，是解决那个搜索引擎的那个问题的时候。从那时起，我有时会问自己：接下来我能做什么？下一个挑战是什么？这与你所处的位置密切相关；有些想法是合理的，而其他的看起来则遥不可及。这就是学习。
- en: In the spirit of Austin Henley's "[challenging projects every programmer should
    try](https://austinhenley.com/blog/morechallengingprojects.html)" series, I wanted
    to offer my own list of projects that have sustained my joy of programming. Herein
    begins the list.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在奥斯汀·亨利的“[每个程序员都应该尝试的具有挑战性的项目](https://austinhenley.com/blog/morechallengingprojects.html)”系列的精神中，我想提供我自己的一系列项目列表，这些项目让我对编程充满了乐趣。这里开始列表。
- en: Build a search crawler
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建一个搜索爬虫
- en: A crawler is a bot that navigates web pages and saves their contents. Search
    engines use crawlers to explore the web. The contents of web pages are "indexed".
    This means that pages are saved somewhere that they can be looked up.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 爬虫是一个浏览网页并保存其内容的机器人。搜索引擎使用爬虫来探索网页。网页的内容被“索引”。这意味着页面被保存在某个地方，可以进行查找。
- en: I decided to build a search engine for a small community I was a part of. There
    were ~1000 sites that were known to the community, as established by people who
    contributed to our shared wiki. I used that as the list of sites to crawl. You
    can make your own list of sites and create your own search engine. Maybe you make
    a search engine for your favourite anime blogs. Or Taylor Swift fan sites. Whatever
    you want, so long as it's on the web.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定为我所属的一个小社区建立一个搜索引擎。社区已经通过贡献我们共享的维基页面的人们确定了大约1000个已知站点作为列表。我使用这个列表作为要爬取的站点列表。你也可以制作自己的站点列表并创建自己的搜索引擎。也许你可以为你最喜欢的动漫博客或者泰勒·斯威夫特的粉丝站点创建一个搜索引擎。无论你想做什么，只要在网上就行。
- en: My biggest learning through this process was that the web is a wild west. You
    can never trust that someone's web page is going to be exactly how you want it
    to be. Buidling a search crawler is an exercise in learning how to retrieve as
    many web pages as possible, reliably. without taking someone's site down.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个过程，我最大的收获是互联网就像是一个未被开垦的西部。你永远不能确信某个人的网页会完全按照你希望的方式出现。构建一个搜索爬虫就是学习如何可靠地检索尽可能多的网页，而不会使某个网站崩溃的练习。
- en: 'In building a search crawler, you will learn about:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建搜索爬虫时，你将学到以下内容：
- en: How to download a web page
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何下载网页
- en: Standards for content crawling (robots.txt, adult meta tags)
  id: totrans-split-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内容抓取的标准（robots.txt、成人元标签）
- en: Rate limiting
  id: totrans-split-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 速率限制
- en: Exponential back-offs
  id: totrans-split-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指数退避
- en: Knowing when to crawl and recrawl sites
  id: totrans-split-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 知道何时抓取和重新抓取站点
- en: Content negotiation
  id: totrans-split-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内容协商
- en: Etags
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Etags
- en: And more
  id: totrans-split-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有更多
- en: Indeed, the web is a wild west. But with that wild west comes many exciting
    technical challenges to solve. This challenge occupied my mind for months. While
    my search engine is no longer active, this project was what gave me confidence
    that I can do more than write small Python scripts.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，网络就像一个狂野的西部。但是伴随着那些挑战，也带来了许多激动人心的技术难题需要解决。这个挑战占据了我的思绪数月。虽然我的搜索引擎已经不再运行，但这个项目让我确信我可以做得更多，而不仅仅是写小小的
    Python 脚本。
- en: Build an autocomplete system
  id: totrans-split-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建自动补全系统
- en: Imagine you have a blog post. How could you auto-complete a word based on a
    sequence of letters? Take this blog post. If I started a word with "exponent",
    how could you, efficiently, recommend "exponential" as the last word? Herein lies
    a challenge. I am not going to talk too much about the how behind this project,
    but there is a lot of fun to be had!
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 想象你有一篇博客文章。如何根据一系列字母序列自动完成单词？拿这篇博客文章举例。如果我用“指数”开头一个词，你如何高效地推荐“指数”作为最后一个单词？这就是一个挑战。我不会过多讨论这个项目背后的原理，但这确实是一场充满乐趣的挑战！
- en: 'When you discover how to auto-complete words, there is another challenge: how
    to recommend *which* word to auto-complete. If I type "expone", how should an
    autocomplete know whether to recommend "exponent" or "exponential" (both used
    in this guide).'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当你发现如何自动完成单词时，还有另一个挑战：如何推荐*哪个*单词进行自动完成。如果我输入“expone”，自动补全应该如何知道是推荐“指数”还是“指数的”（本指南中都有使用）。
- en: Write a file compressor
  id: totrans-split-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写文件压缩器
- en: 'There are many existing tools that compress files, but have you ever asked:
    how do they make files smaller?'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多现有的工具可以压缩文件，但你有没有想过：它们是如何使文件变小的？
- en: 'Here''s a challenge: download this web page as a HTML file. Write a program
    that creates a compressed version of the HTML file. Your program should then be
    able to reproduce the exact file. Spaces, captalisation: everything should be
    the same.'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个挑战：下载这个网页作为 HTML 文件。编写一个程序，创建该 HTML 文件的压缩版本。你的程序应该能够精确复制原始文件。空格、大小写：一切都应该保持不变。
- en: 'Here are some relevant topics that may guide your reading on this subject (although
    I recommend trying to write a compressor before reading too much about it if that
    excites you!):'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些相关主题，可能会指导你在这个主题上的阅读（尽管我建议在读太多内容之前先尝试编写一个压缩器，如果这激起了你的兴趣！）：
- en: Information theory (the parent field of compression)
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息理论（压缩的父领域）
- en: Dictionary coding (a way of representing information)
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典编码（一种表示信息的方式）
- en: Huffman coding (a commonly used compression algorithm)
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈夫曼编码（一种常用的压缩算法）
- en: Entropy (a measure of the amount of "information" in a file; "information" is
    intentionally in quotation marks)
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熵（文件中“信息”量的度量；“信息”有意用引号括起来）
- en: Implement BitCask
  id: totrans-split-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现 BitCask
- en: '[BitCask](https://riak.com/assets/bitcask-intro.pdf) is a key-value store algorithm.
    Key-value stores map keys (names) to values (pieces of information). For example,
    I could store information about posts on this blog like so:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[BitCask](https://riak.com/assets/bitcask-intro.pdf) 是一种键值存储算法。键值存储将键（名称）映射到值（信息片段）。例如，我可以这样存储有关这个博客帖子的信息：'
- en: '[PRE0]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Where "title" and "published" are names, which are associated with values.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当“标题”和“发布”是与值相关联的名称时。
- en: 'BitCask works entirely using your file system. You store keys and values in
    files. Every file is append-only. You can delete keys, but this works by overriding
    an existing key rather than deleting the value explicitly. [BitCask is documented
    in a short, useful paper](https://riak.com/assets/bitcask-intro.pdf) that guided
    me when I was making it. Challenge yourself to implement:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: BitCask 完全使用你的文件系统运行。你把键和值存储在文件中。每个文件都是追加写入的。你可以删除键，但这是通过覆盖现有键来实现的，而不是显式删除值。[BitCask
    在一篇简短而有用的论文中有详细描述](https://riak.com/assets/bitcask-intro.pdf)，在我制作它时对我产生了指导作用。挑战自己来实现：
- en: Creating a "cask" (a key-value store that follows the BitCask algorithm)
  id: totrans-split-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个“桶”（遵循 BitCask 算法的键值存储）
- en: Add items to a cask
  id: totrans-split-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向一个桶添加项目
- en: Retrieve items from a cask
  id: totrans-split-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从一个桶中检索项目
- en: Remove items from a cask
  id: totrans-split-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从一个桶中移除项目
- en: Close a cask
  id: totrans-split-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭一个桶
- en: When you close a cask, a merge operation is performed to merge all cask files
    into one.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你关闭一个桶时，会执行合并操作将所有桶文件合并为一个。
- en: Write a programming language
  id: totrans-split-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写编程语言
- en: '*Wow... slow down. A programming language? Only serious experts can make that!*
    That''s what I thought, too. It turns out it isn''t true! You, too, can make a
    programming language. And you don''t even need to read hundreds of pages of literature
    on theory before you get started (although the more you read, the more information
    you''ll have to design your language!).'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*哇...慢下来。编程语言？只有专家才能做到这一点！*这也是我想的。事实证明并不是这样！你也可以制作一种编程语言。而且你甚至不需要在开始之前阅读数百页的理论文献（尽管你读得越多，设计语言时的信息就会越多！）。'
- en: Designing a programming language lets you decide how you want to write code.
    You can follow existing patterns or make up your own. You get to set the rules.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一种编程语言让你可以决定如何编写代码。你可以遵循现有的模式或者创造自己的模式。你可以制定规则。
- en: There are many types of programming language, but a good place to start is writing
    a language that doesn't need a compiler. I am biased because that's how I learned,
    but the thought of writing a compiler before I had a bit more experience with
    programming langauge theory felt daunting. Thus, I wrote an "interpreted" language.
    A file is read, parsed, then executed; no compiling.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言有很多种类，但一个很好的起点是编写一个不需要编译器的语言。我有偏见，因为这是我学习的方式，但在我对编程语言理论有更多经验之前写编译器的想法感觉令人畏惧。因此，我写了一种“解释”语言。文件被读取、解析，然后执行；无需编译。
- en: 'An interpreted language has a few key pieces:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一种解释语言有几个关键部分：
- en: A "grammar", which outlines the structure of a language;
  id: totrans-split-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个“语法”，概述语言的结构；
- en: A "lexer" / "parser", which takes in arbitrary text (i.e. a script written in
    your language!) and turns it into an Abstract Syntax Tree (AST) using your grammar,
    and;
  id: totrans-split-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个“词法分析器”/“解析器”，接受任意文本（即使用你的语言编写的脚本！），并使用你的语法将其转换为抽象语法树（AST），和；
- en: The evaluation engine, which reads the syntax tree and does something with it.
  id: totrans-split-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估引擎，读取语法树并执行相关操作。
- en: All of the above three components are separate technical challenges. I recommend
    starting with writing a grammar and a parser. Your grammar will state how your
    language works (i.e. how to declare variables, which symbols are allowed and in
    which order, how things can nest, or not nest). You can use an existing lexer
    to interpret your grammer. I used Lark in Python. Your evaluation engine will
    take your syntax tree and enforce the logic of your program (i.e. maintain variables,
    perform mathematical computations, work with strings and booleans; whatever you
    want your language to do).
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上述三个组件都是单独的技术挑战。我建议首先写一个语法和一个解析器。你的语法将说明你的语言如何工作（例如如何声明变量，允许哪些符号以及顺序，如何嵌套或不嵌套）。你可以使用现有的词法分析器来解释你的语法。我在Python中使用了Lark。你的评估引擎将接受你的语法树并实施程序的逻辑（例如维护变量，执行数学计算，处理字符串和布尔值；无论你想让你的语言做什么）。
- en: '*P.S. Writing a Lisp language is a great place to start, too!*'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*P.S. 写一个Lisp语言也是一个很好的起点！*'
- en: 'The list, and: What other ideas should be here?'
  id: totrans-split-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表，和：这里还应该有哪些其他想法？
- en: The list above is not a checklist, rather inspiration for projects you can take
    on. Perhaps one of the items above will inspire you to make something. Perhaps
    none of them resonate. That is okay, too. If that's the case, I recommend saving
    this post in the back of your mind; there may come a day when one of the ideas
    above delights you. James five years ago would probably have found the list above
    out of reach. James one year ago would have yearned for this list.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的列表不是一个清单，而是你可以承担的项目的灵感。也许上面的其中一项会激励你创造出某些东西。也许没有一个能引起共鸣。这也没关系。如果是这样的话，我建议把这篇文章保存在你的脑海中；可能会有一天，上面的其中一个想法会让你欣喜若狂。五年前的詹姆斯可能会觉得上面的列表难以企及。一年前的詹姆斯可能会渴望这个列表。
- en: I recommend [Austin Henley's writing](https://austinhenley.com/blog/morechallengingprojects.html)
    for more wonderful ideas. His post is the reason I wrote this one.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议阅读[Austin Henley的文章](https://austinhenley.com/blog/morechallengingprojects.html)，获取更多精彩的想法。他的文章是我写这篇文章的原因。
- en: If you do implement anything as a result of this post, let me know! Send me
    an email at readers [at] jamesg [dot] blog. In addition, if you need any guidance
    with the ideas above, email me. I would love to help. I have completed all the
    challenges I documented above; they continue to cultivate my child-like excitement
    for coding. I hope they can do the same for you, too.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你因此贴文实现了什么，请告诉我！发送邮件到 readers [at] jamesg [dot] blog。此外，如果你需要任何关于上述想法的指导，请给我发邮件。我很乐意帮助。我完成了我上面记录的所有挑战；它们继续培养我对编码的孩子般的兴奋。我希望它们也能对你有同样的作用。
- en: 'Now: what other ideas should be on this list? What have you made that you think
    would be a great challenge for other programmers? Share it with others! An idea
    for a project that pushed you to learn more about programming five years ago may
    be the thing that helps change someone''s perception of programming like search
    engines did for me.'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个清单上还应该有哪些其他想法？你做过什么认为对其他程序员来说是个很大挑战的项目？与他人分享吧！五年前推动你更多了解编程的项目想法，可能正是改变某人对编程看法的东西，就像搜索引擎对我一样。
- en: '[Share this post on Hacker News](https://news.ycombinator.com/submitlink?u=https://jamesg.blog/https://jamesg.blog/2024/02/28/programming-projects/&t=(Even%20more)%20challenging%20programming%20projects%20you%20should%20try).'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[分享此帖子至 Hacker News](https://news.ycombinator.com/submitlink?u=https://jamesg.blog/https://jamesg.blog/2024/02/28/programming-projects/&t=(Even%20more)%20challenging%20programming%20projects%20you%20should%20try)。'
- en: '[Share this post on Lobste.rs](https://lobste.rs/stories/new?url=https://jamesg.blog/https://jamesg.blog/2024/02/28/programming-projects/&title=(Even%20more)%20challenging%20programming%20projects%20you%20should%20try).'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[分享此帖子至 Lobste.rs](https://lobste.rs/stories/new?url=https://jamesg.blog/https://jamesg.blog/2024/02/28/programming-projects/&title=(Even%20more)%20challenging%20programming%20projects%20you%20should%20try)。'
