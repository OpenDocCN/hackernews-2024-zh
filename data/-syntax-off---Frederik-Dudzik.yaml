- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:54:44'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:54:44'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: :syntax off - Frederik Dudzik
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: :syntax off - Frederik Dudzik
- en: 来源：[https://dudzik.co/digress-into-development/syntax-off/](https://dudzik.co/digress-into-development/syntax-off/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://dudzik.co/digress-into-development/syntax-off/](https://dudzik.co/digress-into-development/syntax-off/)
- en: A couple of months ago I read a few articles about developers turning off their
    syntax highlighting. At that time I had never questioned its utility. I decided
    to conduct a little experiment with me as the test subject.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 几个月前，我阅读了几篇关于开发者关闭语法高亮的文章。当时我从未质疑过它的实用性。我决定用自己作为实验对象进行一次小小的实验。
- en: Initially, turning off syntax highlighting felt weird. I couldn’t skip through
    the source that fast anymore and it became harder to read. Even though this appeared
    to be an impairment I found it to be the strongest argument for making the switch.
    By forcing me to read the code more carefully, it made me understand it better.
    Another thing that I’ve noticed was that my coding style changed. I was structuring
    my source better; I was applying recurring visual patterns, writing less convoluted
    statements, and keeping my files short and concise. Instead of external stimuli
    (e.g. Linter, QA) forcing these practices upon me I was doing them naturally.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，关闭语法高亮感觉很奇怪。我无法再像以前那样快速浏览源代码，阅读也变得更加困难。尽管这似乎是一种障碍，但我发现这是支持转变的最有力的论据。通过迫使我更仔细地阅读代码，它使我更好地理解了它。我还注意到另一件事，那就是我的编程风格发生了变化。我开始更好地组织我的源代码；我应用了重复的视觉模式，写出了更简洁的语句，保持我的文件简短而简洁。而不是外部刺激（例如检查器、质量保证）强加给我这些实践，我是自然而然地做到了这些。
- en: The switch made me a big proponent of conditional highlighting. Unlike syntax
    highlighting, it emphasizes only the information that is relevant at a given time.
    For example a syntax checker that highlights your mistakes on every file save.
    Because the noise of the syntax highlighting was gone the conditional highlighting
    was even more visible, which made it an even more effective tool.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这种转变使我成为条件高亮的坚定支持者。与语法高亮不同，条件高亮仅强调在特定时间内相关的信息。例如，一个语法检查器会在每次文件保存时突出显示你的错误。因为语法高亮的噪音消失了，条件高亮变得更加显著，使它成为一个更有效的工具。
- en: 'As developers we have two objectives: Building software that works and writing
    code that others understand. Turning off syntax highlighting can make it easier
    to achieve the latter, but it doesn’t have to. You should decide for yourself
    if it belongs in your tool chain.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我们有两个目标：构建可工作的软件和编写易于他人理解的代码。关闭语法高亮可能会使实现后者变得更容易，但并非必须如此。你应该自行决定是否将其纳入你的工具链中。
- en: If you are interested what people think about this article you can read its
    [comments on hackernews](https://news.ycombinator.com/item?id=12886067).
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对本文的评论感兴趣，可以阅读其在[hackernews上的评论](https://news.ycombinator.com/item?id=12886067)。
