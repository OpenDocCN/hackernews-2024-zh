- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:33:59'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:33:59'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Paul Butler – The hater’s guide to Kubernetes
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Paul Butler – Kubernetes 的仇恨者指南
- en: 来源：[https://paulbutler.org/2024/the-haters-guide-to-kubernetes/](https://paulbutler.org/2024/the-haters-guide-to-kubernetes/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://paulbutler.org/2024/the-haters-guide-to-kubernetes/](https://paulbutler.org/2024/the-haters-guide-to-kubernetes/)
- en: Among a certain tech set, Kubernetes has earned a reputation as an unnecessarily
    complicated time-sink that startups should avoid. Using Kubernetes with a small
    team is seen as a sign of over-engineering.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些技术圈内，Kubernetes 因为过度复杂和浪费时间而获得了声誉，创业公司应该避免使用。使用 Kubernetes 和小团队被视为过度工程化的标志。
- en: I’m guilty of taking [pithy jabs](https://twitter.com/paulgb/status/1568257167882436608)
    myself.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我也曾经对自己进行[尖锐的挑剔](https://twitter.com/paulgb/status/1568257167882436608)。
- en: Despite my snark, “great piece of technology” truly is sincere; at the time
    of that post I had [recently written](https://driftingin.space/posts/complexity-kubernetes)
    about how much of Kubernetes’ complexity is necessary for what it does.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我的讽刺，“伟大的技术成就”确实是真诚的；在那篇文章发布时，我刚写过关于 Kubernetes 复杂性的文章[最近写的](https://driftingin.space/posts/complexity-kubernetes)，讲述了它的许多复杂性是必要的。
- en: We’ve been running Kubernetes in production for a few years now at [Jamsocket](https://jamsocket.com/),
    and I’ve found a good flow with it. Kubernetes serenity has been achieved internally.
    A big key to this has been [carving out a small chunk](https://twitter.com/paulgb/status/1743361919535260053)
    of Kubernetes’ features and pretending the rest don’t exist.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[Jamsocket](https://jamsocket.com/)的生产环境中运行 Kubernetes 已经几年了，我发现了与之相处的良好方式。我们内部已经实现了
    Kubernetes 的平静。其中一个重要因素是[切出一小块](https://twitter.com/paulgb/status/1743361919535260053)
    Kubernetes 功能，假装其他部分不存在。
- en: This post started as an internal guide to the way we use Kubernetes, so it’s
    not meant to apply prescriptively to every startup; nonetheless I think it’s a
    good starting place for avoiding many of the sandbars in the vast seas of Kubernetes.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章最初是作为我们使用 Kubernetes 的内部指南开始的，因此并不意味着适用于每个创业公司；尽管如此，我认为它是避开 Kubernetes 浩瀚海洋中许多陷阱的一个很好的起点。
- en: '**Why use Kubernetes at all?**'
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**为什么要使用 Kubernetes？**'
- en: 'As I see it, Kubernetes is the best-travelled path if you want all three of
    these things:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，如果你想要这三样东西，Kubernetes 是最佳选择。
- en: To run multiple processes/servers/scheduled jobs.
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于运行多个进程/服务器/定时作业。
- en: To run them redundantly and load balance across them.
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使它们具备冗余性并在它们之间进行负载均衡。
- en: To configure them, and the relationships between them, as code.
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将它们配置为代码及其之间的关系。
- en: At its most basic, Kubernetes is just a layer of abstraction that lets you think
    about a pool of computers if it were one (headless) computer. If that’s your use
    case, and you can avoid the other parts of it, you can get pretty far.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的来说，Kubernetes 只是一个抽象层，让你可以把一组计算机想象成一个（无头）计算机。如果这符合你的使用情况，并且你可以避开其他部分，你可以走得很远。
- en: 'Some people have told me that #2 is overkill, startups shouldn’t focus on zero-downtime
    deploys or high availability. But we often do multiple deploys per day, and when
    our products break, our customer’s products break for *their* users. Even a minute
    of downtime is noticed by someone. Rolling deploys give us the confidence to deploy
    unceremoniously and often.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人告诉我，#2 是杀鸡用牛刀，创业公司不应专注于零停机部署或高可用性。但我们通常每天进行多次部署，当我们的产品出问题时，我们客户的产品也会出现问题，他们的用户会受到影响。哪怕是一分钟的停机时间也会被某人注意到。滚动部署使我们能够毫不庄重地频繁部署。
- en: How we use Kubernetes
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何使用 Kubernetes
- en: For background, [Jamsocket](https://jamsocket.com) is a service for dynamically
    spinning up processes that a web app can talk to. Kind of like AWS Lambda, but
    where the process lifetime is bound to a WebSocket connection instead of a single
    request/response.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为背景，[Jamsocket](https://jamsocket.com) 是一个为动态生成 Web 应用程序可以通信的进程的服务。有点像 AWS
    Lambda，但进程生命周期绑定到 WebSocket 连接而不是单个请求/响应。
- en: We use Kubernetes to run the long-running processes that are needed to support
    that. The API server, container registry, controller, log collector, some DNS
    services, metrics collection, etc.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Kubernetes 运行需要支持的长时间运行的进程。API 服务器、容器注册表、控制器、日志收集器、一些 DNS 服务、指标收集等等。
- en: 'A few things we *don’t* use Kubernetes for:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一些我们**不**使用 Kubernetes 的事情：
- en: The ephemeral processes themselves. We did for a hot minute very early on, but
    we quickly found it limiting (more on that later.)
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些短暂的进程本身。我们在很早的时候确实做过，但很快发现它限制了我们（稍后详述）。
- en: Static/marketing sites. We use [Vercel](https://vercel.com/) for those. It’s
    more expensive, but so is the opportunity cost of an hour of engineering time
    at a small startup, and Vercel saves us more of that than it costs.
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态/营销网站。我们使用 [Vercel](https://vercel.com/)。虽然它更昂贵，但在小型初创公司中，一小时工程时间的机会成本也是如此，而
    Vercel 能为我们节省的时间比其成本更多。
- en: Anything that directly stores data we would be sad to lose. We do use some persistent
    volumes for caching or derived data, but otherwise we use a managed Postgres DB
    outside of the cluster and blob storage.
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何直接存储数据的内容，我们会因丢失而感到遗憾。我们确实使用一些持久卷来缓存或派生数据，但除此之外，我们在集群外使用托管的 PostgreSQL 数据库和
    Blob 存储。
- en: It’s also worth noting that we don’t administer Kubernetes ourselves — the main
    advantage of using Kubernetes is that we can outsource the infrastructure-level
    operation of it! We have been happy with Google Kubernetes Engine, and while the
    [Google Domains fiasco](https://blog.pragmaticengineer.com/google-domains-to-shut-down/)
    has shaken my faith in Google Cloud, I at least sleep soundly knowing that migrating
    to Amazon EKS would be relatively straightforward.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得一提的是，我们并不自行管理 Kubernetes — 使用 Kubernetes 的主要优势在于我们可以外包基础设施级的运维工作！我们对 Google
    Kubernetes Engine 感到满意，虽然 [Google Domains 的问题](https://blog.pragmaticengineer.com/google-domains-to-shut-down/)
    使我对 Google Cloud 的信心动摇，但我至少可以安心地知道迁移到 Amazon EKS 相对来说是相对简单的。
- en: Things we readily use
  id: totrans-split-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们乐意使用的内容
- en: There are a few types of k8s resources we use without hesitation. I’m only listing
    resources here that we create explicitly; most of these resources implicitly create
    other resources (like Pods) that I will not mention but which we of course (indirectly)
    use.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几种我们毫不犹豫使用的 Kubernetes 资源类型。我只在这里列出我们明确创建的资源；大多数这些资源隐含地创建其他资源（如 Pod），这些资源我们当然也（间接地）使用。
- en: '**[Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)**:
    Most of our pods are created through deployments. Every deployment critical to
    our service functioning has multiple replicas and rolling updates.'
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[部署](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)**：我们大部分的
    Pod 都是通过部署创建的。每个对我们服务功能至关重要的部署都有多个副本和滚动更新。'
- en: '**[Services](https://kubernetes.io/docs/concepts/services-networking/service/)**:
    specifically, `ClusterIP` for internal services and `LoadBalancer` for external
    ones. We have avoided `NodePort` and `ExternalName` services, preferring for our
    DNS configuration to live outside of Kubernetes.'
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[服务](https://kubernetes.io/docs/concepts/services-networking/service/)**：特别是内部服务的
    `ClusterIP` 和外部服务的 `LoadBalancer`。我们避免使用 `NodePort` 和 `ExternalName` 服务，更倾向于将我们的
    DNS 配置放在 Kubernetes 外部。'
- en: '[**CronJobs**](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/):
    for cleanup scripts and that sort of thing.'
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**CronJobs**](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/)：用于清理脚本和类似操作。'
- en: '**ConfigMaps** and **Secrets**: for passing data to the above resources.'
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ConfigMaps** 和 **Secrets**：用于向上述资源传递数据。'
- en: Things we cautiously use
  id: totrans-split-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们谨慎使用的内容
- en: '**StatefulSet** and **PersistentVolumeClaim**: we have used some StatefulSets.
    The configuration is a bit more convoluted than Deployments, but they can have
    a persistent volume across restarts. We prefer to persist important data in managed
    services outside of k8s. We don’t have a hard rule against volumes because sometimes
    it’s nice to persist e.g. a cache across a service restart, but I avoid them when
    possible because they can interact badly (deadlock) with rolling deploys.'
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**StatefulSet** 和 **PersistentVolumeClaim**：我们使用了一些 StatefulSets。配置比部署复杂一些，但它们可以在重启时保持持久卷。我们更喜欢将重要数据持久化在
    Kubernetes 外的托管服务中。我们没有针对卷设定严格规则，因为有时持久化缓存跨服务重启很有用，但我尽可能避免使用它们，因为它们可能与滚动部署产生不良互动（死锁）。'
- en: '**RBAC**: we have used this in a few places, e.g. to give a service permission
    to refresh a secret. It adds enough complexity to our small cluster that I mostly
    avoid it.'
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RBAC**：我们在几个地方使用了它，例如给服务权限来刷新一个密钥。它给我们较小的集群增加了足够的复杂性，所以我大多数情况下都会避免使用它。'
- en: Things we actively avoid
  id: totrans-split-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们积极避免的内容
- en: '**Hand-writing YAML**. YAML has [enough foot-guns](https://noyaml.com/) that
    I avoid it as much as possible. Instead, our Kubernetes resource definitions are
    created from TypeScript with [Pulumi](https://www.pulumi.com/).'
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手写 YAML**。YAML 存在足够多的坑，以至于我尽量避免使用它。相反，我们的 Kubernetes 资源定义是通过 TypeScript 和
    [Pulumi](https://www.pulumi.com/) 创建的。'
- en: '**Non-built-in resources and operators**. I’ve [written before](https://driftingin.space/posts/complexity-kubernetes)
    about how the [control loop](https://kubernetes.io/docs/concepts/architecture/controller/)
    pattern is a double-edged sword: it’s the core idea that makes K8s robust, but
    it’s also a source of indirection and complexity. The [operator pattern](https://kubernetes.io/docs/concepts/extend-kubernetes/operator/)
    and [custom resources](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/)
    allow third-party software to use Kubernetes’ robust infrastructure for its own
    control loops, which is a great idea in theory that I’ve found to be clunky in
    practice. Rather than [cert-manager](https://cert-manager.io/), we use [Caddy’s](https://caddyserver.com/)
    certificate automation.'
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非内置资源和操作符**。 我之前写过关于[Kubernetes复杂性](https://driftingin.space/posts/complexity-kubernetes)的文章，控制循环模式是个双刃剑：它是使K8s强大的核心思想，但也是间接性和复杂性的源头。
    [操作符模式](https://kubernetes.io/docs/concepts/extend-kubernetes/operator/)和[自定义资源](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/)允许第三方软件利用Kubernetes强大的基础设施进行自己的控制循环，理论上是个好主意，但我发现在实践中有些笨拙。
    我们不使用[cert-manager](https://cert-manager.io/)，而是使用[Caddy](https://caddyserver.com/)的证书自动化。'
- en: '**Helm**. Helm is a no-go because of the operators and no YAML rules, but I
    also just think that using unstructured string templating to generate something
    machine-parsable means introducing fragility for no gain. [`nindent`](https://v2.helm.sh/docs/charts_tips_and_tricks/#using-the-include-function)
    is like nails-on-a-chalkboard to me, I’m sorry.'
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Helm**。 Helm不适合我，因为操作符和没有YAML规则，但我也认为使用非结构化字符串模板来生成机器可解析的东西，意味着引入脆弱性却无任何收益。
    [`nindent`](https://v2.helm.sh/docs/charts_tips_and_tricks/#using-the-include-function)对我来说就像是在黑板上挠指甲一样让人难受，抱歉。'
- en: '**Anything with “mesh” in the name.** I guess they’re useful to somebody, but
    not me, and not [this guy](https://matduggan.com/k8s-service-meshes/) either.'
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任何名字中带有“mesh”的东西。** 我想它们对某些人可能有用，但对我来说不是，也对[这位先生](https://matduggan.com/k8s-service-meshes/)也不是。'
- en: '**Ingress resources**. I don’t have any battle scars from these, and I know
    some people use them productively, but a theme of our successful use of Kubernetes
    is avoiding adding unnecessary layers of indirection. Configuring Caddy works
    for us, so we just do that.'
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ingress资源**。 我对这些没有任何“战斗伤痕”，我知道有些人能够有效地使用它们，但我们成功使用Kubernetes的主题是避免增加不必要的间接层。
    配置Caddy对我们来说很合适，所以我们就这么做了。'
- en: '**Trying to replicate the entire k8s stack locally**. Instead of using things
    like k3s or kind to replicate production exactly, we just use Docker Compose or
    our own scripts that start the subset of the system we actually care about in
    the moment.'
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**试图在本地复制整个k8s堆栈**。 我们不使用k3s或kind之类的工具来精确复制生产环境，而是仅使用Docker Compose或我们自己的脚本，在需要时启动我们实际关心的系统子集。'
- en: A human should never wait for a pod
  id: totrans-split-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 人类永远不应该等待Pod
- en: Above I alluded to the fact that we briefly ran ephemeral, interactive, session-lived
    processes on Kubernetes. We quickly realized that Kubernetes is designed for robustness
    and modularity over container start times. As a general rule, my take is that
    Kubernetes is good for when you want to redundantly run some long-running processes,
    but if a human is ever waiting for a pod to start, [Kubernetes is the wrong choice](https://twitter.com/paulgb/status/1684718880353042432).
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 上面我提到，我们曾在Kubernetes上短暂运行过临时的交互式会话生命周期进程。 我们很快意识到，Kubernetes设计的重点是容错性和模块化，而不是容器启动时间。
    总的来说，我认为Kubernetes适合于想要冗余运行一些长时间运行的进程的场景，但如果人类等待Pod启动，则[Kubernetes是错误的选择](https://twitter.com/paulgb/status/1684718880353042432)。
- en: 'I’ll confess that I’m talking my book here, but at least it’s an open-source
    book: we use an MIT-licensed Rust orchestrator called [Plane](https://plane.dev/)
    that we designed specifically for quickly scheduling and running processes for
    interactive workloads (i.e. ones with a human waiting on them).'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我得承认我在这里表达了自己的观点，但至少这是一本开源的书：我们使用一个名为[Plane](https://plane.dev/)的MIT许可的Rust编排器，专门设计用于快速调度和运行人机交互工作负载的进程。
- en: Higher-level abstractions
  id: totrans-split-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更高级的抽象
- en: 'For completeness, I should also mention that some of the Kubernetes alternatives
    that have popped up are quite good. Particularly if you don’t want or need requirement
    #3 from my initial list (the ability to specify infrastructure as code.) For [one
    of our products](https://y-sweet.cloud/), we opted to use [Railway](https://railway.app/)
    rather than our k8s cluster, mainly for the preview environments. Some friends
    I respect highly swear by [Render](https://render.com/) (I’ve dabbled but personally
    find Railway’s environment model cleaner.) I’m also partial to [Flight Control’s](https://www.flightcontrol.dev/)
    bring-your-own-cloud approach.'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于完整性，我还应该提到，一些出现的 Kubernetes 替代方案也相当不错。特别是如果您不需要或不想要我最初列表中的第三项要求（能够指定基础设施为代码）。对于[我们的一个产品](https://y-sweet.cloud/)，我们选择使用[Railway](https://railway.app/)而不是我们的
    k8s 集群，主要是为了预览环境。我非常尊重的一些朋友非常推崇[Render](https://render.com/)（我尝试过，但个人认为Railway的环境模型更清晰）。我也偏爱[Flight
    Control](https://www.flightcontrol.dev/)的自带云方法。
- en: For a lot of SaaS type apps, you’ll probably get pretty far on those. But if
    you meet the three needs listed at the beginning of this article and you take
    a disciplined approach to it, don’t let anybody tell you that you’re too early
    for Kubernetes.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多SaaS类型的应用程序，您可能会在这些上取得相当大的进展。但是，如果您满足本文开头列出的三个需求，并且采取有纪律的方法对待它，那么不要让任何人告诉您，您对
    Kubernetes 来说还为时过早。
