- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:33:33'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:33:33
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'My favourite data structure: The trie | James'' Coffee Blog'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我最喜欢的数据结构：字典树 | 詹姆斯的咖啡博客
- en: 来源：[https://jamesg.blog/2024/01/16/trie/](https://jamesg.blog/2024/01/16/trie/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://jamesg.blog/2024/01/16/trie/](https://jamesg.blog/2024/01/16/trie/)
- en: 'Suppose you want to build a predictive text engine. Given a few letters, you
    want to predict the end of a word. Suppose we have the string "co". The next word
    could be:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想构建一个预测文本引擎。给定一些字母，你想预测单词的结尾。假设我们有字符串"co"。接下来的单词可能是：
- en: Cobalt
  id: totrans-split-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 钴
- en: Code
  id: totrans-split-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码
- en: Coffee
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 咖啡
- en: Co-operate
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合作
- en: Or many other words.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 或者其他很多单词。
- en: Given a dictionary of all words in the English language, you could find all
    the words that start with "co" and pick one to recommend. But how would you pick
    one to recommend?
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 给定包含所有英语单词的字典，你可以找到以"co"开头的所有单词，并挑选一个推荐。但是如何选择要推荐的单词呢？
- en: A good answer to this is to use word probabilities. You could have a reference
    text with a range of different texts from which you calculate how likely a word
    is to be used. You could tune this based on actual usage, too. If someone types
    "cobalt" a lot (I don't know why they would, but okay :D), you could rank "Cobalt"
    higher when choosing a word to recommend for the string "co".
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的答案是使用单词概率。你可以有一个包含各种不同文本的参考文本，从中计算一个单词使用的可能性。你也可以根据实际使用进行调整。如果有人经常输入"cobalt"（我不知道为什么会这样，但好吧
    :D），在为字符串"co"选择推荐单词时，你可以更高地排名"Cobalt"。
- en: 'We are missing one piece: how do we do this efficiently?'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们缺少的一个部分是如何高效地实现这一点？
- en: That is where the trie comes in, my favourite data structure.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是字典树发挥作用的地方，我的最爱数据结构。
- en: What is a trie?
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是字典树？
- en: The trie is a deeply nested tree. The structure is commonly used for predictive
    text engines because you can represent all strings as a tree. Then, you can use
    word probabilities to decide on what word you should recommend. This could be
    done by using a reference corpus of millions of words from English publications
    to identify how common dfifferent words are.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 字典树是一个深度嵌套的树。这种结构通常用于预测文本引擎，因为你可以将所有字符串表示为树。然后，你可以使用单词概率来决定应该推荐哪个单词。可以通过使用来自英语出版物的数百万单词的参考语料库来识别不同单词的常见程度来实现这一点。
- en: For next word prediction, a trie might be built at the letter level. This means
    that every letter has a value and also links to every other possible letter that
    could come next.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个单词的预测，字典树可能会在字母级别上构建。这意味着每个字母都有一个值，并且还链接到可能跟在其后的每一个其他可能字母。
- en: You can add items to, search for items, and remove items from a trie.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以向字典树添加项目，搜索项目，以及从字典树中删除项目。
- en: A trie, step by step
  id: totrans-split-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逐步了解字典树
- en: Let's mock up a trie to see how it works!
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们模拟一个字典树，看看它是如何工作的！
- en: 'Our trie will contain two words:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的字典树将包含两个单词：
- en: 'Consider the following trie:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下的字典树：
- en: '[PRE0]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Every possible letter is a key in our trie. Above, our trie is represented as
    a dictionary. In a real implementation, a trie might be represented as a set of
    classes, as is common in tree-based algorithms.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的字典树中的每个可能的字母都是一个键。如上所述，我们的字典树被表示为一个字典。在实际实现中，字典树可能会被表示为一组类，这在基于树的算法中很常见。
- en: 'Every key has two possible properties:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每个键有两种可能的属性：
- en: '`*`, which is the probability the word should be recommended, and;'
  id: totrans-split-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`*`，这表示单词推荐的概率，以及；'
- en: A dictionary that contains all possible next letters, or a number if there are
    no more letters.
  id: totrans-split-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个包含所有可能下一个字母或者如果没有更多字母则为一个数字的字典。
- en: 'Suppose we only want to get words that start with "co". Here is some pseudo
    code about how we would do this if our Trie was a dictionary:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们只想获取以"co"开头的单词。如果我们的字典树是一个字典，这是如何实现的伪代码：
- en: '[PRE1]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We could then recurse down all of the keys in "o" to calculate the next possible
    words. In this example, we can make two words:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后可以递归地遍历所有键中的"o"，以计算下一个可能的单词。在此示例中，我们可以生成两个单词：
- en: 'We could refine our search by adding another character:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过添加另一个字符来完善我们的搜索：
- en: '[PRE2]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The value of this would be:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的价值在于：
- en: '[PRE3]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `*` whose value is 0.1 represents "cod" (as in the fish). The "e" tells
    us there is one more letter that can follow "cod": "e". The value for this is
    "7.3".'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`*` 其值为 0.1 代表"cod"（鱼的一种）。"e"告诉我们后面还有一个字母可以跟在"cod"后面："e"。其值为"7.3"。'
- en: 'Now, let''s say we traverse our whole tree for "co" that we made earlier. We
    would end up with two values:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们假设我们遍历了先前创建的整个树以寻找"co"。我们最终会得到两个值：
- en: We can order these and choose the one with the highest probability for our next
    word.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对这些进行排序，并选择概率最高的一个作为我们的下一个单词推荐。
- en: Let's make a trie! (Python edition)
  id: totrans-split-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们制作一个字典树！（Python 版本）
- en: If you want to use a Trie in Python, I recommend the [pygtrie](https://pygtrie.readthedocs.io/en/latest/)
    library, originally developed by Google. This library has pre-built utilities
    for accessing items in a trie, traversing the Trie, and more.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在 Python 中使用 Trie，我推荐使用[pygtrie](https://pygtrie.readthedocs.io/en/latest/)库，该库由
    Google 原始开发。此库具有预建的实用程序，用于访问 Trie 中的项、遍历 Trie 等功能。
- en: 'First, run:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，运行：
- en: '[PRE4]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, create a new file with the following code:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个包含以下代码的新文件：
- en: '[PRE5]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this code, we create a trie with three elements:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们创建了一个包含三个元素的 Trie：
- en: At the end of the code, we search the trie to find all words that start with
    "co".
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码末尾，我们搜索 Trie 来查找以 "co" 开头的所有单词。
- en: 'Our code returns:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码返回：
- en: '[PRE6]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can sort the words by probability using this code:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码按概率对单词进行排序：
- en: '[PRE7]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is the result:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '[PRE8]'
  id: totrans-split-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Conclusion and resources
  id: totrans-split-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论和资源
- en: The trie is a tree data structure. In a trie, every node has a value for the
    node itself and a set of nodes that you can traverse. You can represent words
    as a trie to efficiently find all words that start with a given prefix. Because
    you can give each node a value, you can attach probabilities to each word in the
    trie. This is ideal for next word prediction, where you can extract candidates
    for a next word from the trie using letters someone has already typed and then
    rank them based on the probabilities associated with each node.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: Trie 是一种树数据结构。在 Trie 中，每个节点都有节点本身的值和一组可以遍历的节点。你可以将单词表示为 Trie，以便高效地查找以给定前缀开头的所有单词。由于你可以为每个节点赋值，你可以将概率附加到
    Trie 中的每个单词。这对于下一个单词预测非常理想，你可以使用用户已经输入的字母从 Trie 中提取下一个单词的候选项，然后根据每个节点关联的概率对它们进行排序。
- en: You can also find if a word is not in the trie efficiently. To do so, you would
    split up a word (i.e. "codep") into its letters and search for each one `trie["c"]["o"]["d"]["e"]["p"]`.
    If there is no value associated with the result, you know the word is not in the
    tree.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以高效地查找不在 Trie 中的单词。为此，你需要将一个单词（例如 "codep"）拆分为其字母，并逐个搜索 `trie["c"]["o"]["d"]["e"]["p"]`。如果结果没有关联的值，那么你就知道这个单词不在树中。
- en: For a detailed breakdown of the trie data structure, refer to the [Trie Wikipedia
    page](https://en.wikipedia.org/wiki/Trie).
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 欲详细了解 trie 数据结构，请参阅[Trie 维基百科页面](https://zh.wikipedia.org/wiki/Trie)。
- en: '[Share this post on Hacker News](https://news.ycombinator.com/submitlink?u=https://jamesg.blog//2024/01/16/trie/&t=My%20favourite%20data%20structure:%20The%20trie).'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 Hacker News 上分享此帖子](https://news.ycombinator.com/submitlink?u=https://jamesg.blog//2024/01/16/trie/&t=My%20favourite%20data%20structure:%20The%20trie)。'
- en: '[Share this post on Lobste.rs](https://lobste.rs/stories/new?url=https://jamesg.blog//2024/01/16/trie/&title=My%20favourite%20data%20structure:%20The%20trie).'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 Lobste.rs 上分享此帖子](https://lobste.rs/stories/new?url=https://jamesg.blog//2024/01/16/trie/&title=My%20favourite%20data%20structure:%20The%20trie)。'
