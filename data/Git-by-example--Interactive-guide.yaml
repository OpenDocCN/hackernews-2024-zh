- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:02:36'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:02:36
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Git by example: Interactive guide'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[Git示例](https://antonz.org/git-by-example/)：交互式指南'
- en: 来源：[https://antonz.org/git-by-example/](https://antonz.org/git-by-example/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://antonz.org/git-by-example/](https://antonz.org/git-by-example/)
- en: 'Git by example: Interactive guide'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git示例：交互式指南
- en: Git is *the* distributed version control system used in software development
    today. It's very powerful, but also known for its not-so-obvious syntax.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Git是*当今软件开发中使用的*分布式版本控制系统。它非常强大，但也以其不那么明显的语法而闻名。
- en: I got tired of googling the same Git commands over and over again. So I created
    an interactive step-by-step guide to Git operations, from basic to advanced. You
    can read it from start to finish to (hopefully) learn more about Git, or jump
    to a specific use case that interests you.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我厌倦了一遍又一遍地搜索相同的Git命令。因此，我创建了一个交互式的逐步指南，介绍Git操作，从基础到高级。您可以从头到尾阅读它（希望能）学到更多关于Git的知识，或者跳转到您感兴趣的特定用例。
- en: Feel free to experiment with the examples by changing the commands and clicking
    *Run*.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 随意通过更改命令并点击*运行*来尝试这些示例。
- en: '[Concepts](#concepts) • [Basics](#basics) • [Branch & merge](#branch-and-merge)
    • [Local & remote](#local-and-remote) • [Undo](#undo) • [Advanced](#advanced-stuff)
    • [Final thoughts](#final-thoughts)'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[概念](#concepts) • [基础](#basics) • [分支与合并](#branch-and-merge) • [本地与远程](#local-and-remote)
    • [撤销](#undo) • [高级](#advanced-stuff) • [最终思考](#final-thoughts)'
- en: 'This guide is also available in other formats:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南还提供其他格式：
- en: Concepts
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概念
- en: This is the only piece of theory in the guide. I'll keep it short and simplified
    to the π == 3 level. Please don't judge me if you're a Git master.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是指南中唯一的理论内容。我将其简化到π == 3的水平，请不要苛求，如果您是Git专家。
- en: Working tree, staging area, repository
  id: totrans-split-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作树，暂存区，仓库
- en: '[PRE0]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A *working tree* is the slice of the project at any given moment (usually it's
    the current moment). When you add or edit code, you change the working tree.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*工作树*是项目在任意时刻的片段（通常是当前时刻）。当你添加或编辑代码时，你改变了工作树。'
- en: A *staging area* is where you stage the changes from the working tree before
    making them permanent.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*暂存区*是你在将工作树的更改永久保存之前暂存这些更改的地方。'
- en: A *repo* (repository) is the collection of permanent changes (*commits*) made
    throughout the history of the project. Typically, there is a single *remote* repo
    (managed by GitHub/GitLab/etc) and many *local* repos — one for each developer
    involved in a project.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*仓库*（repository）是整个项目历史中所有永久更改（*提交*）的集合。通常有一个单一的*远程*仓库（由GitHub/GitLab等管理），以及许多*本地*仓库
    — 每个参与项目的开发者都有一个。'
- en: When you make a change in the staging area permanent, it is removed from the
    staging area and *committed* to the local repo. A commit is the permanent record
    of that change. The repo contains all the commits that have been made.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你把暂存区的更改永久保存时，它会从暂存区移除并*提交*到本地仓库。提交是该更改的永久记录。仓库包含所有已经提交的内容。
- en: When you *checkout* a specific commit, the working tree is updated to reflect
    the project state at the time of that commit.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当你*checkout*一个特定的提交时，工作树将更新以反映该提交时项目的状态。
- en: Local and remote repos are frequently synchronized so that all repos contain
    all commits from all developers.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本地和远程仓库经常同步，以便所有仓库包含所有开发者的所有提交。
- en: Branch, tag, HEAD
  id: totrans-split-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分支，标签，HEAD
- en: '[PRE1]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A *branch* is an alternate version of the project reality. Typically, there
    is a main branch, and separate branches for features under development. When work
    on a feature branch is complete, it is merged into the main branch (or discarded).
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*分支*是项目现实的另一个版本。通常有一个主分支，以及用于开发功能的单独分支。当功能分支上的工作完成时，它会被合并到主分支（或被丢弃）。'
- en: A *tag* is a named state of the project. Typically, tags are created on the
    main branch for important milestones such as releases.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*标签*是项目的一种命名状态。通常在主分支上为重要的里程碑（如发布）创建标签。'
- en: The currently checked-out commit (usually the latest commit in a branch) is
    referenced as *HEAD*.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当前检出的提交（通常是分支中的最新提交）被称为*HEAD*。
- en: Now that the boring stuff is out of the way, let's get to the recipes!
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在无聊的内容已经介绍完了，让我们开始做一些实际操作吧！
- en: Basics
  id: totrans-split-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础
- en: Let's start with basic Git operations on a local repo.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从本地仓库上的基本Git操作开始。
- en: '[init repo](#init-repo) • [add file](#add-file) • [edit file](#edit-file) •
    [rename file](#rename-file) • [delete file](#delete-file) • [show status](#show-current-status)
    • [show log](#show-commit-log) • [show commit](#show-specific-commit) • [search](#search-repo)'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[初始化仓库](#init-repo) • [添加文件](#add-file) • [编辑文件](#edit-file) • [重命名文件](#rename-file)
    • [删除文件](#delete-file) • [显示状态](#show-current-status) • [显示日志](#show-commit-log)
    • [显示提交](#show-specific-commit) • [搜索](#search-repo)'
- en: Init repo
  id: totrans-split-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化仓库
- en: 'Create an empty repo:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个空仓库：
- en: <codapi-snippet id="init-1" sandbox="shell" editor="basic" template="init.sh"
    output="">[PRE2]
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="init-1" sandbox="shell" editor="basic" template="init.sh"
    output="">[PRE2]
- en: 'Set user name and email for the repo (they are required):'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 设置用户姓名和电子邮件（它们是必需的）：
- en: '[PRE3]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <codapi-snippet id="init-2" sandbox="shell" editor="basic" template="init.sh"
    depends-on="init-1" output-tail="" output="">Use the `--global` flag to set the
    name and email at the OS user level instead of the repo level.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="init-2" sandbox="shell" editor="basic" template="init.sh"
    depends-on="init-1" output-tail="" output="">使用 `--global` 标志来在操作系统用户级别而不是仓库级别设置姓名和电子邮件。
- en: 'Show user and repo configs:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 显示用户和仓库配置：
- en: '[PRE4]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <codapi-snippet id="init-3" sandbox="shell" editor="basic" template="init.sh"
    depends-on="init-2" output-tail="" output="">[PRE5]
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="init-3" sandbox="shell" editor="basic" template="init.sh"
    depends-on="init-2" output-tail="" output="">[PRE5]
- en: Add file
  id: totrans-split-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加文件
- en: 'Create a file and add it to the staging area:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文件并将其添加到暂存区：
- en: '[PRE6]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '<codapi-snippet id="add-1" sandbox="shell" editor="basic" template="add.sh"
    output="">View changes in the staging area:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="add-1" sandbox="shell" editor="basic" template="add.sh"
    output="">查看暂存区中的更改：
- en: <codapi-snippet id="add-2" sandbox="shell" editor="basic" template="add.sh"
    depends-on="add-1" output-tail="" output="">[PRE7]
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="add-2" sandbox="shell" editor="basic" template="add.sh"
    depends-on="add-1" output-tail="" output="">[PRE7]
- en: 'Commit to the local repo:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 提交到本地仓库：
- en: '[PRE8]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <codapi-snippet id="add-3" sandbox="shell" editor="basic" template="add.sh"
    depends-on="add-1" output-tail="" output="">[PRE9]
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="add-3" sandbox="shell" editor="basic" template="add.sh"
    depends-on="add-1" output-tail="" output="">[PRE9]
- en: Edit file
  id: totrans-split-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑文件
- en: 'Edit the previously committed file:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑之前提交的文件：
- en: '[PRE10]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '<codapi-snippet id="edit-1" sandbox="shell" editor="basic" template="edit.sh"
    output="">View local changes:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="edit-1" sandbox="shell" editor="basic" template="edit.sh"
    output="">查看本地更改：
- en: <codapi-snippet id="edit-2" sandbox="shell" editor="basic" template="edit.sh"
    depends-on="edit-1" output-tail="" output="">[PRE11]
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="edit-2" sandbox="shell" editor="basic" template="edit.sh"
    depends-on="edit-1" output-tail="" output="">[PRE11]
- en: 'Add modified files and commit in one command:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 添加修改过的文件并在一条命令中提交：
- en: '[PRE12]'
  id: totrans-split-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: <codapi-snippet id="edit-3" sandbox="shell" editor="basic" template="edit.sh"
    depends-on="edit-1" output-tail="" output="">[PRE13]
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="edit-3" sandbox="shell" editor="basic" template="edit.sh"
    depends-on="edit-1" output-tail="" output="">[PRE13]
- en: Note that `-a` does not add new files, only changes to the already committed
    files.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`-a` 不会添加新文件，只会将已提交文件的更改添加。
- en: Rename file
  id: totrans-split-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重命名文件
- en: 'Rename the previously committed file:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 重命名之前提交的文件：
- en: '[PRE14]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '<codapi-snippet id="mv-1" sandbox="shell" editor="basic" template="mv.sh" output="">The
    change is already in the staging area, so `git diff` won''t show it. Use `--cached`:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="mv-1" sandbox="shell" editor="basic" template="mv.sh" output="">更改已在暂存区中，因此
    `git diff` 不会显示它。使用 `--cached`：
- en: <codapi-snippet id="mv-2" sandbox="shell" editor="basic" template="mv.sh" depends-on="mv-1"
    output-tail="" output="">[PRE15]
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="mv-2" sandbox="shell" editor="basic" template="mv.sh" depends-on="mv-1"
    output-tail="" output="">[PRE15]
- en: 'Commit the change:'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 提交更改：
- en: '[PRE16]'
  id: totrans-split-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: <codapi-snippet id="mv-3" sandbox="shell" editor="basic" template="mv.sh" depends-on="mv-1"
    output-tail="" output="">[PRE17]
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="mv-3" sandbox="shell" editor="basic" template="mv.sh" depends-on="mv-1"
    output-tail="" output="">[PRE17]
- en: Delete file
  id: totrans-split-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除文件
- en: 'Delete the previously committed file:'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 删除之前提交的文件：
- en: '<codapi-snippet id="rm-1" sandbox="shell" editor="basic" template="rm.sh" output="">The
    change is already in the staging area, so `git diff` won''t show it. Use `--cached`:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="rm-1" sandbox="shell" editor="basic" template="rm.sh" output="">更改已在暂存区中，因此
    `git diff` 不会显示它。使用 `--cached`：
- en: <codapi-snippet id="rm-2" sandbox="shell" editor="basic" template="rm.sh" depends-on="rm-1"
    output-tail="" output="">[PRE18]
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="rm-2" sandbox="shell" editor="basic" template="rm.sh" depends-on="rm-1"
    output-tail="" output="">[PRE18]
- en: 'Commit the change:'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 提交更改：
- en: '[PRE19]'
  id: totrans-split-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: <codapi-snippet id="rm-3" sandbox="shell" editor="basic" template="rm.sh" depends-on="rm-1"
    output-tail="" output="">[PRE20]
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="rm-3" sandbox="shell" editor="basic" template="rm.sh" depends-on="rm-1"
    output-tail="" output="">[PRE20]
- en: Show current status
  id: totrans-split-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示当前状态
- en: 'Edit the previously committed file and add the changes to the staging area:'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑之前提交的文件并将更改添加到暂存区：
- en: '[PRE21]'
  id: totrans-split-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '<codapi-snippet id="status-1" sandbox="shell" editor="basic" template="status.sh"
    output="">Create a new file:'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="status-1" sandbox="shell" editor="basic" template="status.sh"
    output="">创建新文件：
- en: '[PRE22]'
  id: totrans-split-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '<codapi-snippet id="status-2" sandbox="shell" editor="basic" template="status.sh"
    depends-on="status-1" output-tail="" output="">Show the working tree status:'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="status-2" sandbox="shell" editor="basic" template="status.sh"
    depends-on="status-1" output-tail="" output="">显示工作树状态：
- en: <codapi-snippet id="status-3" sandbox="shell" editor="basic" template="status.sh"
    depends-on="status-2" output-tail="" output="">[PRE23]
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="status-3" sandbox="shell" editor="basic" template="status.sh"
    depends-on="status-2" output-tail="" output="">[PRE23]
- en: Note that `message.txt` is in the staging area, while `praise.txt` is not tracked.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`message.txt` 在暂存区，而 `praise.txt` 未被跟踪。
- en: Show commit log
  id: totrans-split-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示提交日志
- en: 'Show commits:'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 显示提交：
- en: <codapi-snippet sandbox="shell" editor="basic" template="log.sh" output="">[PRE24]
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet sandbox="shell" editor="basic" template="log.sh" output="">[PRE24]
- en: 'Show only the commit message and the short hash:'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 仅显示提交消息和短哈希：
- en: <codapi-snippet sandbox="shell" editor="basic" template="log.sh" output="">[PRE25]
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet sandbox="shell" editor="basic" template="log.sh" output="">[PRE25]
- en: 'Show commits as an ASCII graph:'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 显示提交的ASCII图表：
- en: <codapi-snippet sandbox="shell" editor="basic" template="log.sh" output="">[PRE26]
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet sandbox="shell" editor="basic" template="log.sh" output="">[PRE26]
- en: 'Show compact ASCII graph:'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 显示紧凑的ASCII图表：
- en: '[PRE27]'
  id: totrans-split-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: <codapi-snippet sandbox="shell" editor="basic" template="log.sh" output="">[PRE28]
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet sandbox="shell" editor="basic" template="log.sh" output="">[PRE28]
- en: Show specific commit
  id: totrans-split-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示特定提交
- en: 'Show the last commit contents:'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 显示最后一次提交内容：
- en: <codapi-snippet sandbox="shell" editor="basic" template="show.sh" output="">[PRE29]
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet sandbox="shell" editor="basic" template="show.sh" output="">[PRE29]
- en: 'Show the second-to-last commit:'
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 显示倒数第二次提交：
- en: <codapi-snippet sandbox="shell" editor="basic" template="show.sh" output="">[PRE30]
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet sandbox="shell" editor="basic" template="show.sh" output="">[PRE30]
- en: Use `HEAD~n` to show the nth-before-last commit or use the specific commit hash
    instead of `HEAD~n`.
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `HEAD~n` 显示倒数第n次提交，或者使用特定的提交哈希代替 `HEAD~n`。
- en: Search repo
  id: totrans-split-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 搜索仓库
- en: 'There are 3 commits, each adding a new line to `message.txt`:'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有3次提交，每次都向 `message.txt` 添加了一行：
- en: <codapi-snippet sandbox="shell" editor="basic" template="grep.sh" output="">[PRE31]
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet sandbox="shell" editor="basic" template="grep.sh" output="">[PRE31]
- en: 'The current `message.txt` state:'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当前 `message.txt` 的状态：
- en: <codapi-snippet sandbox="shell" editor="basic" template="grep.sh" output="">[PRE32]
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet sandbox="shell" editor="basic" template="grep.sh" output="">[PRE32]
- en: 'Search in working tree (current state):'
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作树中搜索（当前状态）：
- en: <codapi-snippet sandbox="shell" editor="basic" template="grep.sh" output="">[PRE33]
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet sandbox="shell" editor="basic" template="grep.sh" output="">[PRE33]
- en: 'Search the project as of the second-to-last commit:'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索项目到倒数第二次提交为止：
- en: <codapi-snippet sandbox="shell" editor="basic" template="grep.sh" output="">[PRE34]
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet sandbox="shell" editor="basic" template="grep.sh" output="">[PRE34]
- en: You can use the specific commit hash instead of `HEAD~n`.
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用特定的提交哈希代替 `HEAD~n`。
- en: Branch and merge
  id: totrans-split-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分支和合并
- en: Let's dive into the wondrous world of merging.
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解合并的奇妙世界。
- en: '[branch](#branch) • [merge](#merge) • [rebase](#rebase) • [squash](#squash)
    • [cherry-pick](#cherry-pick)'
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[分支](#branch) • [合并](#merge) • [变基](#rebase) • [压缩](#squash) • [挑选](#cherry-pick)'
- en: Branch
  id: totrans-split-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分支
- en: 'Show branches (there is only `main` now):'
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: 显示分支（现在只有 `main`）：
- en: '<codapi-snippet id="branch-1" sandbox="shell" editor="basic" template="branch.sh"
    output="">Create and switch to a new branch:'
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="branch-1" sandbox="shell" editor="basic" template="branch.sh"
    output="">创建并切换到新分支：
- en: '[PRE35]'
  id: totrans-split-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: <codapi-snippet id="branch-2" sandbox="shell" editor="basic" template="branch.sh"
    output="">[PRE36]
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="branch-2" sandbox="shell" editor="basic" template="branch.sh"
    output="">[PRE36]
- en: 'Show branches (the current one is `ohmypy`):'
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: 显示分支（当前为 `ohmypy`）：
- en: '<codapi-snippet id="branch-3" sandbox="shell" editor="basic" template="branch.sh"
    depends-on="branch-2" output-tail="" output="">Add and commit a file:'
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="branch-3" sandbox="shell" editor="basic" template="branch.sh"
    depends-on="branch-2" output-tail="" output="">添加并提交文件：
- en: '[PRE37]'
  id: totrans-split-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: <codapi-snippet id="branch-4" sandbox="shell" editor="basic" template="branch.sh"
    depends-on="branch-2" output-tail="" output="">[PRE38]
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="branch-4" sandbox="shell" editor="basic" template="branch.sh"
    depends-on="branch-2" output-tail="" output="">[PRE38]
- en: 'Show only commits from the `ohmypy` branch:'
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 仅显示来自 `ohmypy` 分支的提交：
- en: '[PRE39]'
  id: totrans-split-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: <codapi-snippet id="branch-5" sandbox="shell" editor="basic" template="branch.sh"
    depends-on="branch-4" output-tail="" output="">### Merge
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="branch-5" sandbox="shell" editor="basic" template="branch.sh"
    depends-on="branch-4" output-tail="" output="">### 合并
- en: 'Show commits from all branches (two commits in `main`, one in `ohmypy`):'
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: 显示所有分支的提交（`main` 中有两次提交，`ohmypy` 中有一次）：
- en: '[PRE40]'
  id: totrans-split-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: <codapi-snippet id="merge-1" sandbox="shell" editor="basic" template="merge.sh"
    output="">[PRE41]
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="merge-1" sandbox="shell" editor="basic" template="merge.sh"
    output="">[PRE41]
- en: 'We are now on the `main` branch, let''s merge the `ohmypy` branch back into
    main:'
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在`main`分支上，让我们将`ohmypy`分支重新合并到主分支上：
- en: <codapi-snippet id="merge-2" sandbox="shell" editor="basic" template="merge.sh"
    output="">[PRE42]
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="merge-2" sandbox="shell" editor="basic" template="merge.sh"
    output="">[PRE42]
- en: 'There are no conflicts, so git commits automatically. Show the new commit history:'
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
  zh: 没有冲突，因此git会自动提交。显示新的提交历史：
- en: '[PRE43]'
  id: totrans-split-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: <codapi-snippet id="merge-3" sandbox="shell" editor="basic" template="merge.sh"
    depends-on="merge-2" output-tail="" output="">[PRE44]
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="merge-3" sandbox="shell" editor="basic" template="merge.sh"
    depends-on="merge-2" output-tail="" output="">[PRE44]
- en: Rebase
  id: totrans-split-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变基
- en: 'Show commits from all branches (two commits in `main`, one in `ohmypy`):'
  id: totrans-split-130
  prefs: []
  type: TYPE_NORMAL
  zh: 显示所有分支的提交（`main`分支有两个提交，`ohmypy`分支有一个提交）：
- en: '[PRE45]'
  id: totrans-split-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: <codapi-snippet id="rebase-1" sandbox="shell" editor="basic" template="rebase.sh"
    output="">[PRE46]
  id: totrans-split-132
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="rebase-1" sandbox="shell" editor="basic" template="rebase.sh"
    output="">[PRE46]
- en: 'We are now on the `main` branch, let''s rebase the `ohmypy` branch back into
    main:'
  id: totrans-split-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在`main`分支上，让我们将`ohmypy`分支重新合并到主分支上：
- en: <codapi-snippet id="rebase-2" sandbox="shell" editor="basic" template="rebase.sh"
    output="">[PRE47]
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="rebase-2" sandbox="shell" editor="basic" template="rebase.sh"
    output="">[PRE47]
- en: 'Note that the new commit history is linear, unlike when we do a `git merge
    ohmypy`:'
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
  zh: 注意新的提交历史是线性的，不像我们执行`git merge ohmypy`时的情况：
- en: '[PRE48]'
  id: totrans-split-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: <codapi-snippet id="rebase-3" sandbox="shell" editor="basic" template="rebase.sh"
    depends-on="rebase-2" output-tail="" output="">[PRE49]
  id: totrans-split-137
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="rebase-3" sandbox="shell" editor="basic" template="rebase.sh"
    depends-on="rebase-2" output-tail="" output="">[PRE49]
- en: Rebasing rewrites history. So it's better not to rebase branches that have already
    been pushed to remote.
  id: totrans-split-138
  prefs: []
  type: TYPE_NORMAL
  zh: 变基会重写历史。因此最好不要变基已经推送到远程的分支。
- en: Squash
  id: totrans-split-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 压缩
- en: 'Show commits from all branches (two commits in `main`, three in `ohmypy`):'
  id: totrans-split-140
  prefs: []
  type: TYPE_NORMAL
  zh: 显示所有分支的提交（`main`分支有两个提交，`ohmypy`分支有三个提交）：
- en: '[PRE50]'
  id: totrans-split-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: <codapi-snippet id="squash-1" sandbox="shell" editor="basic" template="squash.sh"
    output="">[PRE51]
  id: totrans-split-142
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="squash-1" sandbox="shell" editor="basic" template="squash.sh"
    output="">[PRE51]
- en: If we do `git merge ohmypy` to merge the `ohmypy` branch into `main`, the main
    branch will receive all three commits from ohmypy.
  id: totrans-split-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们执行`git merge ohmypy`将`ohmypy`分支合并到`main`分支，那么主分支将接收来自ohmypy的所有三个提交。
- en: Sometimes we prefer to "squash" all the branch commits into a single commit,
    and then merge it into main. Let's do it.
  id: totrans-split-144
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们更喜欢将所有分支提交“压缩”成一个单独的提交，然后合并到主分支。让我们来做吧。
- en: 'Switch to the `ohmypy` branch:'
  id: totrans-split-145
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到`ohmypy`分支：
- en: <codapi-snippet id="squash-2" sandbox="shell" editor="basic" template="squash.sh"
    output="">[PRE52]
  id: totrans-split-146
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="squash-2" sandbox="shell" editor="basic" template="squash.sh"
    output="">[PRE52]
- en: 'Combine all `ohmypy` changes into a single commit in the working directory:'
  id: totrans-split-147
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有`ohmypy`的更改合并为一个单独的提交在工作目录中：
- en: <codapi-snippet id="squash-3" sandbox="shell" editor="basic" template="squash.sh"
    depends-on="squash-2" output-tail="" output="">[PRE53]
  id: totrans-split-148
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="squash-3" sandbox="shell" editor="basic" template="squash.sh"
    depends-on="squash-2" output-tail="" output="">[PRE53]
- en: 'Commit the combined changes:'
  id: totrans-split-149
  prefs: []
  type: TYPE_NORMAL
  zh: 提交合并后的更改：
- en: '[PRE54]'
  id: totrans-split-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: <codapi-snippet id="squash-4" sandbox="shell" editor="basic" template="squash.sh"
    depends-on="squash-3" output-tail="" output="">[PRE55]
  id: totrans-split-151
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="squash-4" sandbox="shell" editor="basic" template="squash.sh"
    depends-on="squash-3" output-tail="" output="">[PRE55]
- en: 'Switch back to the `main` branch:'
  id: totrans-split-152
  prefs: []
  type: TYPE_NORMAL
  zh: 切换回`main`分支：
- en: '<codapi-snippet id="squash-5" sandbox="shell" editor="basic" template="squash.sh"
    depends-on="squash-4" output-tail="" output="">Merge the `ohmypy` branch into
    `main`:'
  id: totrans-split-153
  prefs: []
  type: TYPE_NORMAL
  zh: 合并`ohmypy`分支到`main`分支：
- en: '[PRE56]'
  id: totrans-split-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: <codapi-snippet id="squash-6" sandbox="shell" editor="basic" template="squash.sh"
    depends-on="squash-5" output-tail="" output="">[PRE57]
  id: totrans-split-155
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="squash-6" sandbox="shell" editor="basic" template="squash.sh"
    depends-on="squash-5" output-tail="" output="">[PRE57]
- en: 'Note the single commit in `main` made of three commits in `ohmypy`:'
  id: totrans-split-156
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`main`中的单个提交由`ohmypy`中的三个提交组成：
- en: '[PRE58]'
  id: totrans-split-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: <codapi-snippet id="squash-7" sandbox="shell" editor="basic" template="squash.sh"
    depends-on="squash-6" output-tail="" output="">[PRE59]
  id: totrans-split-158
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="squash-5" sandbox="shell" editor="basic" template="squash.sh"
    depends-on="squash-4" output-tail="" output="">[PRE59]
- en: Cherry-pick
  id: totrans-split-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 挑选
- en: 'I have a typo in `message.txt`:'
  id: totrans-split-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我在`message.txt`中有一个拼写错误：
- en: '<codapi-snippet id="cherry-1" sandbox="shell" editor="basic" template="cherry.sh"
    output="">And I accidentally fixed it in the `ohmypy` branch instead of `main`:'
  id: totrans-split-161
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="cherry-1" sandbox="shell" editor="basic" template="cherry.sh"
    output="">而我不小心在`ohmypy`分支而不是`main`分支中修复了它：
- en: '[PRE60]'
  id: totrans-split-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: <codapi-snippet id="cherry-2" sandbox="shell" editor="basic" template="cherry.sh"
    output="">[PRE61]
  id: totrans-split-163
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="cherry-2" sandbox="shell" editor="basic" template="cherry.sh"
    output="">[PRE61]
- en: 'I''m not ready to merge the entire `ohmypy` branch, so I will cherry-pick the
    commit:'
  id: totrans-split-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我还没有准备好合并整个`ohmypy`分支，所以我将挑选这个提交：
- en: <codapi-snippet id="cherry-3" sandbox="shell" editor="basic" template="cherry.sh"
    output="">[PRE62]
  id: totrans-split-165
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="cherry-3" sandbox="shell" editor="basic" template="cherry.sh"
    output="">[PRE62]
- en: '`cherry-pick` applied the comment to the `main` branch:'
  id: totrans-split-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`cherry-pick`将注释应用到`main`分支：'
- en: '[PRE63]'
  id: totrans-split-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: <codapi-snippet id="cherry-4" sandbox="shell" editor="basic" template="cherry.sh"
    depends-on="cherry-3" output-tail="" output="">[PRE64]
  id: totrans-split-168
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="cherry-4" sandbox="shell" editor="basic" template="cherry.sh"
    depends-on="cherry-3" output-tail="" output="">[PRE64]
- en: 'The typo is fixed:'
  id: totrans-split-169
  prefs: []
  type: TYPE_NORMAL
  zh: 修正了拼写错误：
- en: <codapi-snippet id="cherry-5" sandbox="shell" editor="basic" template="cherry.sh"
    depends-on="cherry-3" output-tail="" output="">## Local and remote
  id: totrans-split-170
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="cherry-5" sandbox="shell" editor="basic" template="cherry.sh"
    depends-on="cherry-3" output-tail="" output="">## 本地和远程
- en: Working with a local repo is fun, but adding a remote repo is even funnier.
  id: totrans-split-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地存储库中工作很有趣，但添加远程存储库更有趣。
- en: '[push](#push) • [pull](#pull) • [resolve](#resolve-conflict) • [push branch](#push-branch)
    • [fetch branch](#fetch-branch) • [tags](#tags)'
  id: totrans-split-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[push](#push) • [pull](#pull) • [resolve](#resolve-conflict) • [push branch](#push-branch)
    • [fetch branch](#fetch-branch) • [tags](#tags)'
- en: Push
  id: totrans-split-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推送
- en: Alice wants to clone our repo and make some changes.
  id: totrans-split-174
  prefs: []
  type: TYPE_NORMAL
  zh: Alice想克隆我们的存储库并做一些更改。
- en: 'Clone the remote repo:'
  id: totrans-split-175
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆远程存储库：
- en: '[PRE65]'
  id: totrans-split-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: <codapi-snippet id="push-1" sandbox="shell" editor="basic" template="push.sh"
    output="">[PRE66]
  id: totrans-split-177
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="push-1" sandbox="shell" editor="basic" template="push.sh"
    output="">[PRE66]
- en: Normally you'd see a GitHub/GitLab/etc URL here, but our "remote" repo is on
    the same machine in `/tmp/remote.git`.
  id: totrans-split-178
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在这里你会看到GitHub/GitLab等的URL，但我们的“远程”存储库在同一台机器上的`/tmp/remote.git`。
- en: 'Set user name and email:'
  id: totrans-split-179
  prefs: []
  type: TYPE_NORMAL
  zh: 设置用户名和电子邮件：
- en: '[PRE67]'
  id: totrans-split-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '<codapi-snippet id="push-2" sandbox="shell" editor="basic" template="push.sh"
    depends-on="push-1" output-tail="" output="">Make some changes and commit:'
  id: totrans-split-181
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="push-2" sandbox="shell" editor="basic" template="push.sh"
    depends-on="push-1" output-tail="" output="">做一些更改并提交：
- en: '[PRE68]'
  id: totrans-split-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: <codapi-snippet id="push-3" sandbox="shell" editor="basic" template="push.sh"
    depends-on="push-2" output-tail="" output="">[PRE69]
  id: totrans-split-183
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="push-3" sandbox="shell" editor="basic" template="push.sh"
    depends-on="push-2" output-tail="" output="">[PRE69]
- en: 'Push locally committed changes to the remote repo:'
  id: totrans-split-184
  prefs: []
  type: TYPE_NORMAL
  zh: 将本地提交的更改推送到远程存储库：
- en: <codapi-snippet id="push-4" sandbox="shell" editor="basic" template="push.sh"
    depends-on="push-3" output-tail="" output="">### Pull
  id: totrans-split-185
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="push-4" sandbox="shell" editor="basic" template="push.sh"
    depends-on="push-3" output-tail="" output="">### 拉取
- en: I want to pull Alice's changes to the local repo.
  id: totrans-split-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我想将Alice的更改拉到本地存储库。
- en: 'No commits from Alice yet:'
  id: totrans-split-187
  prefs: []
  type: TYPE_NORMAL
  zh: Alice还没有提交：
- en: '<codapi-snippet id="pull-1" sandbox="shell" editor="basic" template="pull.sh"
    output="">Pull the latest changes from the remote repo:'
  id: totrans-split-188
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="pull-1" sandbox="shell" editor="basic" template="pull.sh"
    output="">从远程存储库拉取最新更改：
- en: <codapi-snippet id="pull-2" sandbox="shell" editor="basic" template="pull.sh"
    output="">[PRE70]
  id: totrans-split-189
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="pull-2" sandbox="shell" editor="basic" template="pull.sh"
    output="">[PRE70]
- en: 'The local repo now contains commits from Alice:'
  id: totrans-split-190
  prefs: []
  type: TYPE_NORMAL
  zh: 本地存储库现在包含来自Alice的提交：
- en: <codapi-snippet id="pull-3" sandbox="shell" editor="basic" template="pull.sh"
    depends-on="pull-2" output-tail="" output="">[PRE71]
  id: totrans-split-191
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="pull-3" sandbox="shell" editor="basic" template="pull.sh"
    depends-on="pull-2" output-tail="" output="">[PRE71]
- en: Resolve conflict
  id: totrans-split-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决冲突
- en: I have a local commit (not yet pushed to the remote) that conflicts with Alice's
    changes (already pushed to the remote), so I need to resolve it.
  id: totrans-split-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个本地提交（尚未推送到远程），与Alice的更改（已经推送到远程）冲突，所以我需要解决它。
- en: 'Pull the changes from the remote repo:'
  id: totrans-split-194
  prefs: []
  type: TYPE_NORMAL
  zh: 从远程存储库拉取更改：
- en: <codapi-snippet id="conflict-1" sandbox="shell" editor="basic" template="conflict.sh"
    output="">[PRE72]
  id: totrans-split-195
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="conflict-1" sandbox="shell" editor="basic" template="conflict.sh"
    output="">[PRE72]
- en: 'There is a conflict in `message.txt`! Let''s show it:'
  id: totrans-split-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`message.txt`中有冲突！让我们展示一下：'
- en: <codapi-snippet id="conflict-2" sandbox="shell" editor="basic" template="conflict.sh"
    depends-on="conflict-1" output-tail="" output="">[PRE73]
  id: totrans-split-197
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="conflict-2" sandbox="shell" editor="basic" template="conflict.sh"
    depends-on="conflict-1" output-tail="" output="">[PRE73]
- en: 'I like Alice''s version better, so let''s choose it:'
  id: totrans-split-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢Alice的版本，所以让我们选择它：
- en: '[PRE74]'
  id: totrans-split-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '<codapi-snippet id="conflict-3" sandbox="shell" editor="basic" template="conflict.sh"
    depends-on="conflict-1" output-tail="" output="">Add the resolved file to the
    staging area and complete the merge:'
  id: totrans-split-200
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="conflict-3" sandbox="shell" editor="basic" template="conflict.sh"
    depends-on="conflict-1" output-tail="" output="">将解决后的文件添加到暂存区并完成合并：
- en: '[PRE75]'
  id: totrans-split-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: <codapi-snippet id="conflict-4" sandbox="shell" editor="basic" template="conflict.sh"
    depends-on="conflict-3" output-tail="" output="">[PRE76]
  id: totrans-split-202
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="conflict-4" sandbox="shell" editor="basic" template="conflict.sh"
    depends-on="conflict-3" output-tail="" output="">[PRE76]
- en: Push branch
  id: totrans-split-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推送分支
- en: 'Create the local `ohmypy` branch:'
  id: totrans-split-204
  prefs: []
  type: TYPE_NORMAL
  zh: 创建本地的`ohmypy`分支：
- en: '[PRE77]'
  id: totrans-split-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: <codapi-snippet id="push-branch-1" sandbox="shell" editor="basic" template="push-branch.sh"
    output="">[PRE78]
  id: totrans-split-206
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="push-branch-1" sandbox="shell" editor="basic" template="push-branch.sh"
    output="">[PRE78]
- en: 'Add and commit a file:'
  id: totrans-split-207
  prefs: []
  type: TYPE_NORMAL
  zh: 添加并提交一个文件：
- en: '[PRE79]'
  id: totrans-split-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: <codapi-snippet id="push-branch-2" sandbox="shell" editor="basic" template="push-branch.sh"
    depends-on="push-branch-1" output-tail="" output="">[PRE80]
  id: totrans-split-209
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="push-branch-2" sandbox="shell" editor="basic" template="push-branch.sh"
    depends-on="push-branch-1" output-tail="" output="">[PRE80]
- en: 'Push the local branch to remote:'
  id: totrans-split-210
  prefs: []
  type: TYPE_NORMAL
  zh: 将本地分支推送到远程：
- en: '[PRE81]'
  id: totrans-split-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: <codapi-snippet id="push-branch-3" sandbox="shell" editor="basic" template="push-branch.sh"
    depends-on="push-branch-2" output-tail="" output="">[PRE82]
  id: totrans-split-212
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="push-branch-3" sandbox="shell" editor="basic" template="push-branch.sh"
    depends-on="push-branch-2" output-tail="" output="">[PRE82]
- en: 'Show both local and remote branches:'
  id: totrans-split-213
  prefs: []
  type: TYPE_NORMAL
  zh: 显示本地和远程分支：
- en: <codapi-snippet id="push-branch-4" sandbox="shell" editor="basic" template="push-branch.sh"
    depends-on="push-branch-3" output-tail="" output="">[PRE83]
  id: totrans-split-214
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="push-branch-4" sandbox="shell" editor="basic" template="push-branch.sh"
    depends-on="push-branch-3" output-tail="" output="">[PRE83]
- en: Fetch branch
  id: totrans-split-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取分支
- en: 'Fetch remote branches:'
  id: totrans-split-216
  prefs: []
  type: TYPE_NORMAL
  zh: 获取远程分支：
- en: '<codapi-snippet id="fetch-1" sandbox="shell" editor="basic" template="fetch.sh"
    output="">Remote has the `ohmypy` branch, but it''s not checked out locally:'
  id: totrans-split-217
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="fetch-1" sandbox="shell" editor="basic" template="fetch.sh"
    output="">远程有`ohmypy`分支，但本地未检出：
- en: '<codapi-snippet id="fetch-2" sandbox="shell" editor="basic" template="fetch.sh"
    depends-on="fetch-1" output-tail="" output="">Checkout the `ohmypy` branch:'
  id: totrans-split-218
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="fetch-2" sandbox="shell" editor="basic" template="fetch.sh"
    depends-on="fetch-1" output-tail="" output="">检出`ohmypy`分支：
- en: '[PRE84]'
  id: totrans-split-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: <codapi-snippet id="fetch-3" sandbox="shell" editor="basic" template="fetch.sh"
    depends-on="fetch-1" output-tail="" output="">[PRE85]
  id: totrans-split-220
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="fetch-3" sandbox="shell" editor="basic" template="fetch.sh"
    depends-on="fetch-1" output-tail="" output="">[PRE85]
- en: 'Show branches:'
  id: totrans-split-221
  prefs: []
  type: TYPE_NORMAL
  zh: 显示分支：
- en: '<codapi-snippet id="fetch-4" sandbox="shell" editor="basic" template="fetch.sh"
    depends-on="fetch-3" output-tail="" output="">Create a tag for the latest commit:'
  id: totrans-split-222
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="fetch-4" sandbox="shell" editor="basic" template="fetch.sh"
    depends-on="fetch-3" output-tail="" output="">为最新提交创建一个标签：
- en: '<codapi-snippet id="tag-1" sandbox="shell" editor="basic" template="tag.sh"
    output="">Create a tag for the nth-before-last commit:'
  id: totrans-split-223
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="tag-1" sandbox="shell" editor="basic" template="tag.sh"
    output="">为倒数第n次提交创建一个标签：
- en: '[PRE86]'
  id: totrans-split-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: <codapi-snippet id="tag-2" sandbox="shell" editor="basic" template="tag.sh"
    depends-on="tag-1" output-tail="" output="">You can use the commit hash instead
    of `HEAD~n`.
  id: totrans-split-225
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="tag-2" sandbox="shell" editor="basic" template="tag.sh"
    depends-on="tag-1" output-tail="" output="">可以使用提交哈希代替`HEAD~n`。
- en: 'Show tags:'
  id: totrans-split-226
  prefs: []
  type: TYPE_NORMAL
  zh: 显示标签：
- en: '<codapi-snippet id="tag-3" sandbox="shell" editor="basic" template="tag.sh"
    depends-on="tag-2" output-tail="" output="">Show compact log with tags:'
  id: totrans-split-227
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="tag-3" sandbox="shell" editor="basic" template="tag.sh"
    depends-on="tag-2" output-tail="" output="">显示带标签的简明日志：
- en: '[PRE87]'
  id: totrans-split-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: <codapi-snippet id="tag-4" sandbox="shell" editor="basic" template="tag.sh"
    depends-on="tag-2" output-tail="" output="">[PRE88]
  id: totrans-split-229
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="tag-4" sandbox="shell" editor="basic" template="tag.sh"
    depends-on="tag-2" output-tail="" output="">[PRE88]
- en: 'Delete tag:'
  id: totrans-split-230
  prefs: []
  type: TYPE_NORMAL
  zh: 删除标签：
- en: <codapi-snippet id="tag-5" sandbox="shell" editor="basic" template="tag.sh"
    depends-on="tag-2" output-tail="" output="">[PRE89]
  id: totrans-split-231
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="tag-5" sandbox="shell" editor="basic" template="tag.sh"
    depends-on="tag-2" output-tail="" output="">[PRE89]
- en: 'Push tags to the remote:'
  id: totrans-split-232
  prefs: []
  type: TYPE_NORMAL
  zh: 将标签推送到远程：
- en: <codapi-snippet id="tag-6" sandbox="shell" editor="basic" template="tag.sh"
    depends-on="tag-5" output-tail="" output="">## Undo
  id: totrans-split-233
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="tag-6" sandbox="shell" editor="basic" template="tag.sh"
    depends-on="tag-5" output-tail="" output="">## 撤销
- en: '"Damn, how do I undo what I just did?" — is the eternal Git question. Let''s
    answer it once and for all.'
  id: totrans-split-234
  prefs: []
  type: TYPE_NORMAL
  zh: '"该死，我怎么撤销我刚才做的事情？" — 这是 Git 中永恒的问题。让我们一劳永逸地回答它。'
- en: '[amend commit](#amend-commit) • [undo uncommitted](#undo-uncommitted-changes)
    • [undo local](#undo-local-commit) • [undo remote](#undo-remote-commit) • [rewind
    history](#rewind-history) • [stash changes](#stash-changes)'
  id: totrans-split-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[修订提交](#amend-commit) • [撤销未提交的更改](#undo-uncommitted-changes) • [本地撤销](#undo-local-commit)
    • [远程撤销](#undo-remote-commit) • [重置历史记录](#rewind-history) • [存储更改](#stash-changes)'
- en: Amend commit
  id: totrans-split-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修订提交
- en: 'Edit a file and commit:'
  id: totrans-split-237
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑文件并提交：
- en: '[PRE90]'
  id: totrans-split-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: <codapi-snippet id="amend-1" sandbox="shell" editor="basic" template="amend.sh"
    output="">[PRE91]
  id: totrans-split-239
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="amend-1" sandbox="shell" editor="basic" template="amend.sh"
    output="">[PRE91]
- en: 'Show commits:'
  id: totrans-split-240
  prefs: []
  type: TYPE_NORMAL
  zh: 显示提交：
- en: <codapi-snippet id="amend-2" sandbox="shell" editor="basic" template="amend.sh"
    depends-on="amend-1" output-tail="" output="">[PRE92]
  id: totrans-split-241
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="amend-2" sandbox="shell" editor="basic" template="amend.sh"
    depends-on="amend-1" output-tail="" output="">[PRE92]
- en: 'I made a typo, so I want to change the commit message:'
  id: totrans-split-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我打错字了，所以我想改变提交消息：
- en: '[PRE93]'
  id: totrans-split-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: <codapi-snippet id="amend-3" sandbox="shell" editor="basic" template="amend.sh"
    depends-on="amend-1" output-tail="" output="">[PRE94]
  id: totrans-split-244
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="amend-3" sandbox="shell" editor="basic" template="amend.sh"
    depends-on="amend-1" output-tail="" output="">[PRE94]
- en: 'Git has replaced the last commit:'
  id: totrans-split-245
  prefs: []
  type: TYPE_NORMAL
  zh: Git 已经替换了最后一次提交：
- en: <codapi-snippet id="amend-4" sandbox="shell" editor="basic" template="amend.sh"
    depends-on="amend-3" output-tail="" output="">[PRE95]
  id: totrans-split-246
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="amend-4" sandbox="shell" editor="basic" template="amend.sh"
    depends-on="amend-3" output-tail="" output="">[PRE95]
- en: To change the commit message for one of the last `n` commits, use `git rebase
    -i HEAD~n` (interactive) and follow the instructions on the screen.
  id: totrans-split-247
  prefs: []
  type: TYPE_NORMAL
  zh: 要为最后 `n` 次提交之一更改提交消息，使用 `git rebase -i HEAD~n`（交互式），并按屏幕上的说明操作。
- en: Amend only works if the commit has not yet been pushed to the remote repo!
  id: totrans-split-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提交还没有推送到远程仓库，修改只适用于这种情况！
- en: Undo uncommitted changes
  id: totrans-split-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 撤销未提交的更改
- en: 'Edit the previously committed file and add the changes to the staging area:'
  id: totrans-split-250
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑之前提交的文件并将更改添加到暂存区：
- en: '[PRE96]'
  id: totrans-split-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '<codapi-snippet id="undo-local-1" sandbox="shell" editor="basic" template="undo-local.sh"
    output="">Show the working tree status:'
  id: totrans-split-252
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="undo-local-1" sandbox="shell" editor="basic" template="undo-local.sh"
    output="">显示工作树状态：
- en: <codapi-snippet id="undo-local-2" sandbox="shell" editor="basic" template="undo-local.sh"
    depends-on="undo-local-1" output-tail="" output="">[PRE97]
  id: totrans-split-253
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="undo-local-2" sandbox="shell" editor="basic" template="undo-local.sh"
    depends-on="undo-local-1" output-tail="" output="">[PRE97]
- en: 'Remove the changes from the staging area:'
  id: totrans-split-254
  prefs: []
  type: TYPE_NORMAL
  zh: 从暂存区中移除更改：
- en: '[PRE98]'
  id: totrans-split-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '<codapi-snippet id="undo-local-3" sandbox="shell" editor="basic" template="undo-local.sh"
    depends-on="undo-local-1" output-tail="" output="">The local file is still modified,
    but it''s not staged for commit:'
  id: totrans-split-256
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="undo-local-3" sandbox="shell" editor="basic" template="undo-local.sh"
    depends-on="undo-local-1" output-tail="" output="">本地文件仍然被修改，但没有暂存以进行提交：
- en: <codapi-snippet id="undo-local-4" sandbox="shell" editor="basic" template="undo-local.sh"
    depends-on="undo-local-3" output-tail="" output="">[PRE99]
  id: totrans-split-257
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="undo-local-4" sandbox="shell" editor="basic" template="undo-local.sh"
    depends-on="undo-local-3" output-tail="" output="">[PRE99]
- en: 'Now let''s discard the changes altogether:'
  id: totrans-split-258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们彻底放弃这些更改：
- en: '[PRE100]'
  id: totrans-split-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '<codapi-snippet id="undo-local-5" sandbox="shell" editor="basic" template="undo-local.sh"
    depends-on="undo-local-3" output-tail="" output="">Show the file contents:'
  id: totrans-split-260
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="undo-local-5" sandbox="shell" editor="basic" template="undo-local.sh"
    depends-on="undo-local-3" output-tail="" output="">显示文件内容：
- en: <codapi-snippet id="undo-local-6" sandbox="shell" editor="basic" template="undo-local.sh"
    depends-on="undo-local-5" output-tail="" output="">The changes are gone.
  id: totrans-split-261
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="undo-local-6" sandbox="shell" editor="basic" template="undo-local.sh"
    depends-on="undo-local-5" output-tail="" output="">这些更改已经消失。
- en: Undo local commit
  id: totrans-split-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 撤销本地提交
- en: I changed my mind about the last commit and I want to undo it.
  id: totrans-split-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我改变了关于上次提交的想法，我想撤销它。
- en: 'Show commits:'
  id: totrans-split-264
  prefs: []
  type: TYPE_NORMAL
  zh: 显示提交：
- en: <codapi-snippet id="undo-commit-1" sandbox="shell" editor="basic" template="undo-commit.sh"
    output="">[PRE101]
  id: totrans-split-265
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="undo-commit-1" sandbox="shell" editor="basic" template="undo-commit.sh"
    output="">[PRE101]
- en: 'Undo the last one:'
  id: totrans-split-266
  prefs: []
  type: TYPE_NORMAL
  zh: 撤销上一次提交：
- en: '<codapi-snippet id="undo-commit-2" sandbox="shell" editor="basic" template="undo-commit.sh"
    output="">The commit is gone:'
  id: totrans-split-267
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="undo-commit-2" sandbox="shell" editor="basic" template="undo-commit.sh"
    output="">提交已经被删除：
- en: '<codapi-snippet id="undo-commit-3" sandbox="shell" editor="basic" template="undo-commit.sh"
    depends-on="undo-commit-2" output-tail="" output="">But the changes are still
    in the staged area:'
  id: totrans-split-268
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="undo-commit-3" sandbox="shell" editor="basic" template="undo-commit.sh"
    depends-on="undo-commit-2" output-tail="" output="">但更改仍然在暂存区：
- en: <codapi-snippet id="undo-commit-4" sandbox="shell" editor="basic" template="undo-commit.sh"
    depends-on="undo-commit-2" output-tail="" output="">[PRE102]
  id: totrans-split-269
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="undo-commit-4" sandbox="shell" editor="basic" template="undo-commit.sh"
    depends-on="undo-commit-2" output-tail="" output="">[PRE102]
- en: 'To remove both the commit and the local changes, use `--hard` instead of `--soft`:'
  id: totrans-split-270
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除提交和本地更改，请使用 `--hard` 而不是 `--soft`：
- en: '[PRE103]'
  id: totrans-split-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: <codapi-snippet id="undo-commit-5" sandbox="shell" editor="basic" template="undo-commit.sh"
    output="">[PRE104]
  id: totrans-split-272
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="undo-commit-5" sandbox="shell" editor="basic" template="undo-commit.sh"
    output="">[PRE104]
- en: Reset only works if the commit has not yet been pushed to the remote repo!
  id: totrans-split-273
  prefs: []
  type: TYPE_NORMAL
  zh: 重置只适用于提交还没有推送到远程仓库的情况！
- en: Undo remote commit
  id: totrans-split-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 撤销远程提交
- en: I changed my mind about the last commit and I want to undo it, but the commit
    is already pushed to the remote repo.
  id: totrans-split-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我改变了关于上次提交的想法，但提交已经推送到远程仓库。
- en: 'Show commits:'
  id: totrans-split-276
  prefs: []
  type: TYPE_NORMAL
  zh: 显示提交：
- en: <codapi-snippet id="undo-remote-1" sandbox="shell" editor="basic" template="undo-remote.sh"
    output="">[PRE105]
  id: totrans-split-277
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="undo-remote-1" sandbox="shell" editor="basic" template="undo-remote.sh"
    output="">[PRE105]
- en: 'Undo the last one:'
  id: totrans-split-278
  prefs: []
  type: TYPE_NORMAL
  zh: 撤销上一次提交：
- en: '[PRE106]'
  id: totrans-split-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: <codapi-snippet id="undo-remote-2" sandbox="shell" editor="basic" template="undo-remote.sh"
    output="">[PRE107]
  id: totrans-split-280
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="undo-remote-2" sandbox="shell" editor="basic" template="undo-remote.sh"
    output="">[PRE107]
- en: You can revert to nth-before-last commit by using `HEAD~n` or use the specific
    commit hash instead of `HEAD~n`.
  id: totrans-split-281
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用 `HEAD~n` 恢复到倒数第 `n` 次提交，或者使用特定的提交哈希代替 `HEAD~n`。
- en: 'Since the commit has already been pushed, git can''t delete it. Instead it
    creates an "undo" commit:'
  id: totrans-split-282
  prefs: []
  type: TYPE_NORMAL
  zh: 由于提交已经推送，git 无法删除它。而是创建一个“撤销”提交：
- en: <codapi-snippet id="undo-remote-3" sandbox="shell" editor="basic" template="undo-remote.sh"
    depends-on="undo-remote-2" output-tail="" output="">[PRE108]
  id: totrans-split-283
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="undo-remote-3" sandbox="shell" editor="basic" template="undo-remote.sh"
    depends-on="undo-remote-2" output-tail="" output="">[PRE108]
- en: 'Push the "undo" commit to the remote:'
  id: totrans-split-284
  prefs: []
  type: TYPE_NORMAL
  zh: 将“撤销”提交推送到远程：
- en: <codapi-snippet id="undo-remote-4" sandbox="shell" editor="basic" template="undo-remote.sh"
    depends-on="undo-remote-2" output-tail="" output="">### Rewind history
  id: totrans-split-285
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="undo-remote-4" sandbox="shell" editor="basic" template="undo-remote.sh"
    depends-on="undo-remote-2" output-tail="" output="">### 倒带历史
- en: 'Show commits:'
  id: totrans-split-286
  prefs: []
  type: TYPE_NORMAL
  zh: 显示提交：
- en: '[PRE109]'
  id: totrans-split-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: <codapi-snippet id="reflog-1" sandbox="shell" editor="basic" template="reflog.sh"
    output="">[PRE110]
  id: totrans-split-288
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="reflog-1" sandbox="shell" editor="basic" template="reflog.sh"
    output="">[PRE110]
- en: 'Show all repo states in reverse chronological order:'
  id: totrans-split-289
  prefs: []
  type: TYPE_NORMAL
  zh: 按时间顺序显示所有存储库状态：
- en: <codapi-snippet id="reflog-2" sandbox="shell" editor="basic" template="reflog.sh"
    output="">[PRE111]
  id: totrans-split-290
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="reflog-2" sandbox="shell" editor="basic" template="reflog.sh"
    output="">[PRE111]
- en: 'Suppose I want to go back to `HEAD@{3}`:'
  id: totrans-split-291
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我想回到 `HEAD@{3}`：
- en: '[PRE112]'
  id: totrans-split-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: <codapi-snippet id="reflog-3" sandbox="shell" editor="basic" template="reflog.sh"
    output="">[PRE113]
  id: totrans-split-293
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="reflog-3" sandbox="shell" editor="basic" template="reflog.sh"
    output="">[PRE113]
- en: 'This resets the entire repo and the working tree to the moment of `HEAD@{3}`:'
  id: totrans-split-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这将重置整个存储库和工作树到 `HEAD@{3}` 时的状态：
- en: '[PRE114]'
  id: totrans-split-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: <codapi-snippet id="reflog-4" sandbox="shell" editor="basic" template="reflog.sh"
    depends-on="reflog-3" output-tail="" output="">[PRE115]
  id: totrans-split-296
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="reflog-4" sandbox="shell" editor="basic" template="reflog.sh"
    depends-on="reflog-3" output-tail="" output="">[PRE115]
- en: Stash changes
  id: totrans-split-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 堆栈更改
- en: 'Edit the previously committed file:'
  id: totrans-split-298
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑先前提交的文件：
- en: '[PRE116]'
  id: totrans-split-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: <codapi-snippet id="stash-1" sandbox="shell" editor="basic" template="stash.sh"
    output="">Let's say we need to switch to another branch, but we don't want to
    commit the changes yet.
  id: totrans-split-300
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="stash-1" sandbox="shell" editor="basic" template="stash.sh"
    output="">假设我们需要切换到另一个分支，但尚未提交更改。
- en: 'Stash the local changes (i.e. save them in "drafts"):'
  id: totrans-split-301
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈本地更改（即将它们保存在“草稿”中）：
- en: <codapi-snippet id="stash-2" sandbox="shell" editor="basic" template="stash.sh"
    depends-on="stash-1" output-tail="" output="">[PRE117]
  id: totrans-split-302
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="stash-2" sandbox="shell" editor="basic" template="stash.sh"
    depends-on="stash-1" output-tail="" output="">[PRE117]
- en: 'Stash is a stack, so you can push multiple changes onto it:'
  id: totrans-split-303
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈是一种堆栈结构，因此您可以将多个更改推送到其中：
- en: '[PRE118]'
  id: totrans-split-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: <codapi-snippet id="stash-3" sandbox="shell" editor="basic" template="stash.sh"
    depends-on="stash-2" output-tail="" output="">[PRE119]
  id: totrans-split-305
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="stash-3" sandbox="shell" editor="basic" template="stash.sh"
    depends-on="stash-2" output-tail="" output="">[PRE119]
- en: 'Show stash contents:'
  id: totrans-split-306
  prefs: []
  type: TYPE_NORMAL
  zh: 显示堆栈内容：
- en: <codapi-snippet id="stash-4" sandbox="shell" editor="basic" template="stash.sh"
    depends-on="stash-3" output-tail="" output="">[PRE120]
  id: totrans-split-307
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="stash-4" sandbox="shell" editor="basic" template="stash.sh"
    depends-on="stash-3" output-tail="" output="">[PRE120]
- en: 'Now we can switch to another branch and do something:'
  id: totrans-split-308
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以切换到另一个分支并执行某些操作：
- en: '[PRE121]'
  id: totrans-split-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Switch back to the main branch and re-apply the latest changes from the stash:'
  id: totrans-split-310
  prefs: []
  type: TYPE_NORMAL
  zh: 切换回主分支并重新应用来自堆栈的最新更改：
- en: '[PRE122]'
  id: totrans-split-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: <codapi-snippet id="stash-5" sandbox="shell" editor="basic" template="stash.sh"
    depends-on="stash-3" output-tail="" output="">[PRE123]
  id: totrans-split-312
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="stash-5" sandbox="shell" editor="basic" template="stash.sh"
    depends-on="stash-3" output-tail="" output="">[PRE123]
- en: '`pop` returns changes from the stack in "last in, first out" order.'
  id: totrans-split-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`pop` 按“后进先出”的顺序返回堆栈中的更改。'
- en: 'Clear the stash:'
  id: totrans-split-314
  prefs: []
  type: TYPE_NORMAL
  zh: 清除堆栈：
- en: <codapi-snippet id="stash-6" sandbox="shell" editor="basic" template="stash.sh"
    depends-on="stash-5" output-tail="" output="">## Advanced stuff
  id: totrans-split-315
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="stash-6" sandbox="shell" editor="basic" template="stash.sh"
    depends-on="stash-5" output-tail="" output="">## 高级内容
- en: While git gurus probably know all about these features, most developers have
    never heard of them. Let's fix that.
  id: totrans-split-316
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 git 高手可能对这些功能了如指掌，但大多数开发者从未听说过。让我们修复这个问题。
- en: '[log summary](#log-summary) • [worktree](#worktree) • [bisect](#bisect) • [partial
    checkout](#partial-checkout) • [partial clone](#partial-clone)'
  id: totrans-split-317
  prefs: []
  type: TYPE_NORMAL
  zh: '[日志摘要](#log-summary) • [工作树](#worktree) • [二分法](#bisect) • [部分检出](#partial-checkout)
    • [部分克隆](#partial-clone)'
- en: Log summary
  id: totrans-split-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日志摘要
- en: 'Since the 1.0 release (tag `v1.0`), we have 6 commits from 3 contributors:'
  id: totrans-split-319
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.0 发布（标签 `v1.0`）以来，我们有来自 3 位贡献者的 6 个提交：
- en: '[PRE124]'
  id: totrans-split-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: <codapi-snippet sandbox="shell" editor="basic" template="shortlog.sh" output="">[PRE125]
  id: totrans-split-321
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet sandbox="shell" editor="basic" template="shortlog.sh" output="">[PRE125]
- en: 'Note the `--pretty` option which customizes the log fields:'
  id: totrans-split-322
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意 `--pretty` 选项，该选项自定义日志字段：
- en: '[PRE126]'
  id: totrans-split-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'List the commits grouped by contributors:'
  id: totrans-split-324
  prefs: []
  type: TYPE_NORMAL
  zh: 按贡献者分组列出提交：
- en: <codapi-snippet sandbox="shell" editor="basic" template="shortlog.sh" output="">[PRE127]
  id: totrans-split-325
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet sandbox="shell" editor="basic" template="shortlog.sh" output="">[PRE127]
- en: 'A couple of useful options:'
  id: totrans-split-326
  prefs: []
  type: TYPE_NORMAL
  zh: 一些有用选项：
- en: '`-n` (`--numbered`) sorts the output by descending number of commits per contributor.'
  id: totrans-split-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-n`（`--numbered`）会根据提交者数量降序排序输出。'
- en: '`-s` (`--summary`) omits commit descriptions and prints only counts.'
  id: totrans-split-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s`（`--summary`）选项会省略提交描述，仅输出计数值。'
- en: 'List contributors along with the number of commits they have authored:'
  id: totrans-split-329
  prefs: []
  type: TYPE_NORMAL
  zh: 按提交者及其提交数量列出信息：
- en: <codapi-snippet sandbox="shell" editor="basic" template="shortlog.sh" output="">###
    Worktree
  id: totrans-split-330
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet sandbox="shell" editor="basic" template="shortlog.sh" output="">###
    工作目录
- en: 'I''m in the middle of something important in the `ohmypy` branch:'
  id: totrans-split-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在`ohmypy`分支进行重要的工作：
- en: '[PRE128]'
  id: totrans-split-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: <codapi-snippet id="worktree-1" sandbox="shell" editor="basic" template="worktree.sh"
    output="">[PRE129]
  id: totrans-split-333
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="worktree-1" sandbox="shell" editor="basic" template="worktree.sh"
    output="">[PRE129]
- en: Suddenly I need to fix an annoying typo in the `main` branch. I can stash the
    local changes with `git stash`, or I can checkout multiple branches at the same
    time with `git worktree`.
  id: totrans-split-334
  prefs: []
  type: TYPE_NORMAL
  zh: 突然间，我在`main`分支中发现了一个烦人的拼写错误。我可以用`git stash`暂存本地更改，或者使用`git worktree`在同时暂存多个分支。
- en: 'Checkout the main branch into `/tmp/hotfix`:'
  id: totrans-split-335
  prefs: []
  type: TYPE_NORMAL
  zh: 将主线支暂存至`/tmp/hotfix`目录下：
- en: '[PRE130]'
  id: totrans-split-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: <codapi-snippet id="worktree-2" sandbox="shell" editor="basic" template="worktree.sh"
    output="">[PRE131]
  id: totrans-split-337
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="worktree-2" sandbox="shell" editor="basic" template="worktree.sh"
    output="">[PRE131]
- en: 'Fix the typo and commit:'
  id: totrans-split-338
  prefs: []
  type: TYPE_NORMAL
  zh: 修正拼写错误并提交更改：
- en: '[PRE132]'
  id: totrans-split-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: <codapi-snippet id="worktree-3" sandbox="shell" editor="basic" template="worktree.sh"
    depends-on="worktree-2" output-tail="" output="">[PRE133]
  id: totrans-split-340
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="worktree-3" sandbox="shell" editor="basic" template="worktree.sh"
    depends-on="worktree-2" output-tail="" output="">[PRE133]
- en: 'Push to remote main:'
  id: totrans-split-341
  prefs: []
  type: TYPE_NORMAL
  zh: 将更改推送到远程`main`分支：
- en: '[PRE134]'
  id: totrans-split-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: <codapi-snippet id="worktree-4" sandbox="shell" editor="basic" template="worktree.sh"
    depends-on="worktree-3" output-tail="" output="">[PRE135]
  id: totrans-split-343
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="worktree-4" sandbox="shell" editor="basic" template="worktree.sh"
    depends-on="worktree-3" output-tail="" output="">[PRE135]
- en: Now I can return to `/tmp/repo` and continue working on the `ohmypy` branch.
  id: totrans-split-344
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我可以回到`/tmp/repo`并继续在`ohmypy`分支中工作。
- en: Bisect
  id: totrans-split-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比塞尔算法
- en: 'I have 5 poorly named commits:'
  id: totrans-split-346
  prefs: []
  type: TYPE_NORMAL
  zh: 我有5个命名不恰当的提交：
- en: <codapi-snippet id="bisect-1" sandbox="shell" editor="basic" template="bisect.sh"
    output="">[PRE136]
  id: totrans-split-347
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="bisect-1" sandbox="shell" editor="basic" template="bisect.sh"
    output="">[PRE136]
- en: 'And a failing test:'
  id: totrans-split-348
  prefs: []
  type: TYPE_NORMAL
  zh: 出现失败测试结果：
- en: '<codapi-snippet id="bisect-2" sandbox="shell" editor="basic" template="bisect.sh"
    output="">I will use the bisection algorithm to find the commit that introduced
    the bug:'
  id: totrans-split-349
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="bisect-2" sandbox="shell" editor="basic" template="bisect.sh"
    output="">我将使用比塞尔算法找出引入bug的提交：
- en: <codapi-snippet id="bisect-3" sandbox="shell" editor="basic" template="bisect.sh"
    output="">[PRE137]
  id: totrans-split-350
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="bisect-3" sandbox="shell" editor="basic" template="bisect.sh"
    output="">[PRE137]
- en: 'The current state is obviously buggy, but I''m pretty sure the first "main.sh"
    commit was good:'
  id: totrans-split-351
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的状况显然存在bug，但在我的印象中，第一个`main.sh`提交无误：
- en: '[PRE138]'
  id: totrans-split-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: <codapi-snippet id="bisect-4" sandbox="shell" editor="basic" template="bisect.sh"
    depends-on="bisect-3" output-tail="" output="">[PRE139]
  id: totrans-split-353
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="bisect-4" sandbox="shell" editor="basic" template="bisect.sh"
    depends-on="bisect-3" output-tail="" output="">[PRE139]
- en: 'Git has automatically checked out the middle commit. Let''s test it:'
  id: totrans-split-354
  prefs: []
  type: TYPE_NORMAL
  zh: Git 已自动暂存中间的提交。让我们测试一下：
- en: '<codapi-snippet id="bisect-5" sandbox="shell" editor="basic" template="bisect.sh"
    depends-on="bisect-4" output-tail="" output="">The test passes. Mark the commit
    as good:'
  id: totrans-split-355
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="bisect-5" sandbox="shell" editor="basic" template="bisect.sh"
    depends-on="bisect-4" output-tail="" output="">测试通过。标记该提交为正常：
- en: <codapi-snippet id="bisect-6" sandbox="shell" editor="basic" template="bisect.sh"
    depends-on="bisect-5" output-tail="" output="">[PRE140]
  id: totrans-split-356
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="bisect-6" sandbox="shell" editor="basic" template="bisect.sh"
    depends-on="bisect-5" output-tail="" output="">[PRE140]
- en: 'Git has automatically checked out the middle commit. Let''s test it:'
  id: totrans-split-357
  prefs: []
  type: TYPE_NORMAL
  zh: Git 已自动暂存中间的提交。让我们测试一下：
- en: '<codapi-snippet id="bisect-7" sandbox="shell" editor="basic" template="bisect.sh"
    depends-on="bisect-6" output-tail="" output="">The test fails. Show the commit
    details:'
  id: totrans-split-358
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="bisect-7" sandbox="shell" editor="basic" template="bisect.sh"
    depends-on="bisect-6" output-tail="" output="">测试失败。显示提交详情：
- en: <codapi-snippet id="bisect-8" sandbox="shell" editor="basic" template="bisect.sh"
    depends-on="bisect-7" output-tail="" output="">[PRE141]
  id: totrans-split-359
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="bisect-8" sandbox="shell" editor="basic" template="bisect.sh"
    depends-on="bisect-7" output-tail="" output="">[PRE141]
- en: This is the commit that introduced the bug (subtraction instead of addition)!
  id: totrans-split-360
  prefs: []
  type: TYPE_NORMAL
  zh: 引入错误的提交（减法替换为加法）！
- en: Partial checkout
  id: totrans-split-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部分暂存
- en: 'The remote repo looks like this:'
  id: totrans-split-362
  prefs: []
  type: TYPE_NORMAL
  zh: 远程代码库如下所示：
- en: '[PRE142]'
  id: totrans-split-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: We will selectively checkout only some of the directories.
  id: totrans-split-364
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将仅选择性地暂存某些目录。
- en: 'Clone the repo, but do not checkout the working tree:'
  id: totrans-split-365
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆代码库，但不暂存工作区：
- en: '[PRE143]'
  id: totrans-split-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: <codapi-snippet id="sparse-checkout-1" sandbox="shell" editor="basic" template="sparse-checkout.sh"
    output="">[PRE144]
  id: totrans-split-367
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="sparse-checkout-1" sandbox="shell" editor="basic" template="sparse-checkout.sh"
    output="">[PRE144]
- en: 'Tell git to checkout only the root and `users` directories:'
  id: totrans-split-368
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉git仅检出根目录和`users`目录：
- en: '[PRE145]'
  id: totrans-split-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '<codapi-snippet id="sparse-checkout-2" sandbox="shell" editor="basic" template="sparse-checkout.sh"
    depends-on="sparse-checkout-1" output-tail="" output="">Checkout the directories:'
  id: totrans-split-370
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="sparse-checkout-2" sandbox="shell" editor="basic" template="sparse-checkout.sh"
    depends-on="sparse-checkout-1" output-tail="" output="">检出目录：
- en: <codapi-snippet id="sparse-checkout-3" sandbox="shell" editor="basic" template="sparse-checkout.sh"
    depends-on="sparse-checkout-2" output-tail="" output="">[PRE146]
  id: totrans-split-371
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="sparse-checkout-3" sandbox="shell" editor="basic" template="sparse-checkout.sh"
    depends-on="sparse-checkout-2" output-tail="" output="">[PRE146]
- en: 'Only the root and users directories are checked out:'
  id: totrans-split-372
  prefs: []
  type: TYPE_NORMAL
  zh: 仅检出根目录和用户目录：
- en: <codapi-snippet id="sparse-checkout-4" sandbox="shell" editor="basic" template="sparse-checkout.sh"
    depends-on="sparse-checkout-3" output-tail="" output="">[PRE147]
  id: totrans-split-373
  prefs: []
  type: TYPE_NORMAL
  zh: <codapi-snippet id="sparse-checkout-4" sandbox="shell" editor="basic" template="sparse-checkout.sh"
    depends-on="sparse-checkout-3" output-tail="" output="">[PRE147]
- en: The `products` directory was not checked out.
  id: totrans-split-374
  prefs: []
  type: TYPE_NORMAL
  zh: 未检出`products`目录。
- en: Partial clone
  id: totrans-split-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部分克隆
- en: The partial checkout approach we tried earlier still clones the entire repo.
    So if the repo itself is huge (which is often the case if it has a long history
    or large binary files), the clone step can be slow and traffic-intensive.
  id: totrans-split-376
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前尝试的部分检出方法仍会克隆整个存储库。因此，如果存储库本身很大（如果具有悠久历史或大型二进制文件，则通常如此），克隆步骤可能会很慢且耗费流量。
- en: 'To reduce the amount of data downloaded during cloning, use *partial clone*
    with one of the following commands:'
  id: totrans-split-377
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在克隆时减少下载数据量，请使用以下命令之一进行*部分克隆*：
- en: '[PRE148]'
  id: totrans-split-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: In both cases, git will lazily fetch the missing data later when needed.
  id: totrans-split-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，git将在需要时延迟获取缺失的数据。
- en: Note that for this to work, the remote server should support partial cloning
    (GitHub does).
  id: totrans-split-380
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，为使此功能正常工作，远程服务器应支持部分克隆（GitHub支持）。
- en: Final thoughts
  id: totrans-split-381
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后的思考
- en: We've covered important Git operations, from basic editing to branching and
    merging, remote syncing, undoing changes, and performing some moderate magic.
  id: totrans-split-382
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已涵盖重要的Git操作，从基本编辑到分支和合并，远程同步，撤销更改，以及执行一些适度的魔法。
- en: To learn more about Git, check out the [reference manual](https://git-scm.com/docs)
    and the [Pro Git](https://git-scm.com/book) book by Scott Chacon and Ben Straub.
  id: totrans-split-383
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于Git的信息，请查看[参考手册](https://git-scm.com/docs)以及由Scott Chacon和Ben Straub撰写的[Pro
    Git](https://git-scm.com/book)。
- en: And may Git be with you!
  id: totrans-split-384
  prefs: []
  type: TYPE_NORMAL
  zh: 愿Git与你同在！
- en: ──
  id: totrans-split-385
  prefs: []
  type: TYPE_NORMAL
  zh: ──
- en: P.S. Interactive examples in this post are powered by [**codapi**](https://codapi.org/)
    — an open source tool I'm building. Use it to embed live code snippets into your
    product docs, online course or blog.
  id: totrans-split-386
  prefs: []
  type: TYPE_NORMAL
  zh: P.S. 本文中的交互式示例由[**codapi**](https://codapi.org/)提供支持 —— 这是我正在开发的开源工具。使用它将实时代码片段嵌入到产品文档、在线课程或博客中。
- en: '*[* **Subscribe***](/subscribe/) *to keep up with new posts.**</codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet>'
  id: totrans-split-387
  prefs: []
  type: TYPE_NORMAL
  zh: '*[* **订阅***](/subscribe/) *以获取最新的帖子。*'
