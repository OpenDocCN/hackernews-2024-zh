- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:34:11'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:34:11
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Firstyear's blog-a-log
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firstyear 的博客
- en: 来源：[https://fy.blackhats.net.au/blog/2024-04-26-passkeys-a-shattered-dream/](https://fy.blackhats.net.au/blog/2024-04-26-passkeys-a-shattered-dream/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://fy.blackhats.net.au/blog/2024-04-26-passkeys-a-shattered-dream/](https://fy.blackhats.net.au/blog/2024-04-26-passkeys-a-shattered-dream/)
- en: At around 11pm last night my partner went to change our lounge room lights with
    our home light control system. When she tried to login, her account couldn't be
    accessed. Her Apple Keychain had deleted the Passkey she was using on that site.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 昨晚大约在晚上11点，我的伴侣试图通过我们的家庭灯光控制系统更换客厅灯光时，她的账户无法访问。她的苹果钥匙链已删除了她在该网站上使用的 Passkey。
- en: This is just the icing on a long trail of [enshittification](https://en.wikipedia.org/wiki/Enshittification)
    that has undermined Webauthn. I'm over it at this point, and I think it's time
    to pour one out for Passkeys. The irony is not lost on me that I'm about to release
    a new major version of [webauthn-rs](https://crates.io/crates/webauthn-rs) today
    as I write this.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是对削弱 Webauthn 的一长串 [enshittification](https://en.wikipedia.org/wiki/Enshittification)
    的点缀。我已经超越这一点了，我认为现在是为 Passkeys 倒一杯的时候了。讽刺的是，在我写下这些文字的今天，我正准备发布 [webauthn-rs](https://crates.io/crates/webauthn-rs)
    的新主要版本。
- en: The Dream
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 梦想
- en: In 2019 I flew to my mates place in Sydney and spent a week starting to write
    what is now *the* Webauthn library for Rust. In that time I found a number of
    issues in the standard and contributed improvements to the Webauthn workgroup,
    even though it took a few years for those issues to be resolved. I started to
    review spec changes and participate more in discussions.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 2019 年，我飞往悉尼朋友家，花了一周时间开始编写如今 Rust 的 Webauthn 库。在那段时间里，我发现了一些标准中的问题，并为 Webauthn
    工作组贡献了改进意见，尽管那些问题花了几年时间才得以解决。我开始审查规范变更并更多地参与讨论。
- en: 'At the time there was a lot of optimism that this technology could be the end
    of passwords. You had three major use cases:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当时有很多乐观情绪认为这项技术可能是终结密码的一种方式。你有三个主要的使用案例：
- en: Second Factor
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二因素
- en: Passwordless
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无密码
- en: Usernameless
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无用户名
- en: Second Factor was a stepping stone toward the latter two. Passwordless is where
    you would still type in an account name then authenticate with PIN+Touch to your
    security key, and usernameless is where the identity for your account was resident
    (discoverable) on the key. This was (from my view) seen as a niche concept by
    developers since really - how hard is it for a site to have a checkbox that says
    "remember me"?
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第二因素是通往后两种情况的一个过渡阶段。无密码是你仍需输入帐户名，然后使用 PIN+Touch 对安全密钥进行身份验证，无用户名是你的帐户身份驻留（可发现）于密钥上。从我的角度来看，这被开发人员视为一个小众概念，因为一个网站要有一个
    "记住我" 的复选框有多难呢？
- en: This library ended up with [Kanidm](https://kanidm.com/) being (to my knowledge)
    the very first OpenSource IDM to implement passwordless (now passkeys). The experience
    was wonderful. You went to [Kanidm](https://kanidm.com/), typed in your username
    and then were prompted to type your PIN and touch your key. Simple, fast, easy.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库最终成为了 [Kanidm](https://kanidm.com/) 开源 IDM 中我所知道的第一个实现无密码（现在是 passkeys）。这一体验非常棒。你访问
    [Kanidm](https://kanidm.com/)，输入用户名，然后提示你输入 PIN 并触摸你的密钥。简单、快速、轻松。
- en: For devices like your iPhone or Android, you would do similar - just use your
    Touch ID and you're in.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像你的 iPhone 或 Android 设备，你可以做类似的事情 - 只需使用你的 Touch ID 就可以进入。
- en: It was so easy, so accessible, I remember how it almost felt impossible. That
    authentication could be cryptographic in nature, but so usable and trivial for
    consumers. There really was the idea and goal within FIDO and Webauthn that this
    could be "the end of passwords".
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 那真的很简单，非常易于使用，我记得那几乎感觉不可能。认证可以具有密码学性质，但对消费者来说如此易用和琐碎。在 FIDO 和 Webauthn 中确实存在这样一个想法和目标，即这可能是
    "终结密码" 的时代。
- en: This is what motivated me to continue to improve webauthn-rs. It's reach has
    gone beyond what I expected with parts of it being used in Firefox's authenticator-rs,
    a whole microcosm of Rust Identity Providers (IDPs) being created from this library
    and my work, and even *other* language's Webauthn implementations and password
    managers using our library as *the* reference implementation to test against.
    I can not understate how humbled I am of the influence webauthn-rs has had.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是促使我继续改进 webauthn-rs 的动力。它的影响超出了我的预期，其中的部分内容被用于 Firefox 的 authenticator-rs
    中，从这个库和我的工作中衍生出了整个 Rust 身份提供者（IDP）的微观世界，甚至其他语言的 Webauthn 实现和密码管理器都将我们的库作为参考实现进行测试。我无法低估
    webauthn-rs 的影响力。
- en: The Warnings
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 警告
- en: However warnings started to appear that the standard was not as open as people
    envisaged. The issue we have is well known - Chrome controls a huge portion of
    the browser market, and development is tightly controlled by Google.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，警告开始出现，标准并非如人们所设想的那样开放。我们现在面临的问题是众所周知的 - Chrome控制了浏览器市场的很大一部分，并且由Google严密控制其开发。
- en: An example of this was the [Authenticator Selection Extension](https://www.w3.org/TR/webauthn-1/#sctn-authenticator-selection-extension).
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[认证器选择扩展](https://www.w3.org/TR/webauthn-1/#sctn-authenticator-selection-extension)的一个例子。'
- en: This extension is *important* for sites that have strict security requirements
    because they will attest the make and model of the authenticator in use. If you
    know that the attestation will only accept certain devices, then the browser should
    filter out and only allow those devices to participate.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有严格安全要求的网站来说，这个扩展是*重要的*，因为它会证明所使用的认证器的品牌和型号。如果你知道认证将仅接受特定的设备，那么浏览器应该进行筛选，并且只允许这些设备参与。
- en: However Chrome simply never implemented it leading to it being [removed](https://github.com/w3c/webauthn/issues/1386).
    And it was removed because Chrome never implemented it. As a result, if Chrome
    doesn't like something in the specification they can just veto it without consequence.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Chrome根本没有实现它，导致它被[移除](https://github.com/w3c/webauthn/issues/1386)。并且它被移除是因为Chrome从未实现它。因此，如果Chrome不喜欢规范中的某些内容，他们可以毫不犹豫地否决它，而不会受到任何后果。
- en: 'Later the [justification](https://github.com/w3c/webauthn/issues/1688#issuecomment-1011516074)
    for this not being implemented was: "We have never implemented it because we don''t
    feel that authenticator discrimination is broadly a good thing. ... they [users]
    *should* have the expectation that a given security key will broadly work where
    they want to use it."'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 后来对于未实施此功能的[理由](https://github.com/w3c/webauthn/issues/1688#issuecomment-1011516074)是：“我们从未实施它，因为我们认为认证器歧视在广泛意义上不是一件好事……他们[用户]
    *应该* 期望给定的安全密钥在他们想使用的地方广泛适用。”
- en: '*I want you to remember this quote and it''s implications.*'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*我希望你记住这句话及其含义。*'
- en: '*Users should be able to use any device they choose without penalty.*'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*用户应该能够自由选择任何设备而不受处罚。*'
- en: Now I certainly agree with this notion for general sites on the internet, but
    within a business where we have policy around what devices may be acceptable the
    ability to filter devices does matter.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于互联网上的普通网站，我当然同意这种观念，但在一个有关设备可接受性政策的企业内部，过滤设备的能力确实很重要。
- en: This makes it very possible that you can go to a corporate site, enroll a security
    key and it appears to work but then it will fail to register (even better if this
    burns one of your resident key slots that can not be deleted without a full reset
    of your device) since the IDP rejected the device attestation. That's right, even
    without this, IDP's can still "discriminate" against devices without this extension,
    but the user experience is much worse, and the consequences far more severe in
    some cases.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得你很可能去到一个公司网站，注册一个安全密钥，它似乎能工作，但后来注册失败了（更糟糕的是，如果这烧掉了你的某个不能被删除的常驻密钥槽位，你的设备必须进行完全重置）因为IDP拒绝了设备证明。没错，即使没有这个，IDP仍然可以对没有此扩展的设备“歧视”，但用户体验在某些情况下要糟糕得多，后果也更严重。
- en: The kicker is that Chrome has internal feature flags that they can use for Google's
    needs. They can simply enable their own magic features that control authenticator
    models for their policy, while everyone else has to have a lesser experience.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，Chrome有内部的功能标志，他们可以为Google的需求启用自己的魔术功能，控制认证器模型的策略，而其他人必须接受次一等的体验。
- en: The greater warning here is that many of these decisions are made at "F2F" or
    Face to Face meetings held in the US. This excludes the majority of international
    participants leading some voices to be stronger than others. It's hard to convince
    someone when you aren't in the room, even more so when the room is in a country
    that has a list of [travel advisories](https://www.smartraveller.gov.au/destinations/americas/united-states-america)
    including "Violent crime is more common in the US than in Australia", "There is
    a persistent threat of mass casualty violence and terrorist attacks in the US"
    and "Medical costs in the US are extremely high. You may need to pay up-front
    for medical assistance". (As an aside, there are countries that have a "do not
    travel" warning for less, but somehow the US gets a pass ...).
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 更大的警告在于，这些决定很多都是在美国举行的“面对面”会议上做出的。这排除了大多数国际参与者，导致一些声音比其他声音更强烈。当你不在房间里时，很难说服别人，当房间在一个有[旅行建议](https://www.smartraveller.gov.au/destinations/americas/united-states-america)的国家时，这种情况就更加困难了，“美国的暴力犯罪比澳大利亚更普遍”，“美国存在大规模伤亡暴力和恐怖袭击的持续威胁”，“美国的医疗费用极高。你可能需要预付医疗援助费用”。（顺便说一句，有些国家因为更少的原因而有“不要旅行”的警告，但不知何故美国却被放过了…）。
- en: The Descent
  id: totrans-split-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下降
- en: In 2022 Apple annouced [Passkeys](https://appleinsider.com/articles/22/06/07/apple-passkey-feature-will-be-our-first-taste-of-a-truly-password-less-future).
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在2022年，Apple宣布了[Passkeys](https://appleinsider.com/articles/22/06/07/apple-passkey-feature-will-be-our-first-taste-of-a-truly-password-less-future)。
- en: At the time this was just a really nice "marketing" term for passwordless, and
    Apple's Passkeys had the ability to oppurtunistically be usernameless. It was
    all in all very polished and well done.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，这只是一个对无密码的“营销”术语的称呼，而且Apple的通行证可以选择性地不带用户名。总体而言，做得非常精致和出色。
- en: But of course, thought leaders exist, and Apple hadn't defined what a Passkey
    was. One of those thought leaders took to the FIDO conference stage and announced
    "Passkeys are resident keys", at the same time as the unleashed a passkeys dev
    website (I won't link to it out of principal).
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有思想领袖存在，Apple还没有定义什么是通行证。其中一位思想领袖在FIDO会议上发言，宣布“通行证就是常驻密钥”，与此同时他们还发布了一个通行证开发网站（出于原则，我不会链接到它）。
- en: The issue is described in detail in another of [my blog posts](../2023-02-02-how-hype-will-turn-your-security-key-into-junk/)
    but to summarise, this push to resident keys means that security keys are excluded
    because they often have extremely low limits on storage, the highest being 25
    for yubikeys. That simply won't cut it for most people where they have more than
    25 accounts.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题在我[博客文章](../2023-02-02-how-hype-will-turn-your-security-key-into-junk/)中有详细描述，但总结起来，这种对常驻密钥的推动意味着安全密钥被排除在外，因为它们通常对存储有极低的限制，最高为25个yubikeys。对于大多数人来说，这根本不够用。
- en: Now with resident keys as passkeys as users we certainly don't have the expectation
    that our security keys will work when we want to use them!
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，作为用户的常驻密钥，我们当然不指望我们的安全密钥在我们想要使用它们时能够工作！
- en: The Enshittocene Period
  id: totrans-split-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 恩希托塞因纪
- en: Since then Passkeys are now seen as a way to capture users and audiences into
    a platform. What better way to encourage long term entrapment of users then by
    locking all their credentials into your platform, and even better, credentials
    that can't be extracted or exported in any capacity.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 自那时起，通行证现在被视为将用户和观众捕捉到一个平台的一种方式。有什么比把所有他们的凭据锁在你的平台上更能鼓励长期囚禁用户的方式更好呢？甚至更好的是，这些凭据根本无法以任何方式被提取或导出。
- en: Both Chrome and Safari will try to force you into using either hybrid (caBLE)
    where you scan a QR code with your phone to authenticate - you have to click through
    menus to use a security key. caBLE is not even a good experience, taking more
    than 60 seconds work in most cases. The UI is beyond obnoxious at this point.
    Sometimes I think [the password game has a better ux](https://neal.fun/password-game/).
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome和Safari都会试图强制你使用混合（caBLE）方式，其中你需要用手机扫描QR码进行身份验证 - 你必须通过菜单点击才能使用安全密钥。在大多数情况下，caBLE甚至都不是一个良好的体验，通常需要超过60秒的工作时间。UI已经非常让人讨厌了。有时候我觉得[密码游戏的用户体验更好](https://neal.fun/password-game/)。
- en: The more egregious offender is Android, which [won't even activate your security
    key](https://github.com/kanidm/webauthn-rs/issues/365#issuecomment-1756605203)
    if the website sends the set of options that are needed for Passkeys. This means
    the IDP gets to choose what device you enroll without your input. And of course,
    all the developer examples only show you the options to activate "Google Passkeys
    stored in Google Password Manager". After all, why would you want to use anything
    else?
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 更严重的问题在于 Android，如果网站发送了 Passkeys 所需的选项集，[甚至无法激活您的安全键](https://github.com/kanidm/webauthn-rs/issues/365#issuecomment-1756605203)，这意味着
    IDP 可以选择您注册的设备，而您无法进行选择。当然，所有开发者示例只展示激活“存储在 Google 密码管理器中的 Google 通行密钥”的选项。毕竟，您为什么要使用其他任何东西呢？
- en: A sobering pair of reads are the [Github Passkey Beta](https://github.com/orgs/community/discussions/54450)
    and [Github Passkey](https://github.com/orgs/community/discussions/67791) threads.
    There are instances of users whose security keys are not able to be enrolled as
    the resident key slots are filled. Multiple users describe that Android can not
    create Passkeys due to platform bugs. Some devices need firmware resets to create
    Passkeys. Keys can be saved on the client but not the server leading to duplicate
    account presence and credentials that don't work, or worse lead users to delete
    the [real credentials](https://bugs.webkit.org/show_bug.cgi?id=270553).
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一个令人深思的阅读材料是[GitHub 通行密钥 Beta](https://github.com/orgs/community/discussions/54450)和[GitHub
    通行密钥](https://github.com/orgs/community/discussions/67791)的讨论帖。有用户反映，由于居住键槽已满，他们的安全键无法注册。多个用户描述说，由于平台错误，Android
    无法创建通行密钥。某些设备需要固件重置才能创建通行密钥。密钥可以保存在客户端但不能保存在服务器上，导致账户重复存在和无法工作的凭证，甚至更糟的是导致用户删除[真实凭证](https://bugs.webkit.org/show_bug.cgi?id=270553)。
- en: The helplessness of users on these threads is obvious - and these are technical
    early adopters. The users we need to be advocates for changing from passwords
    to passkeys. If these users can't make it work how will people from other disciplines
    fare?
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些讨论帖上用户的无助是显而易见的 - 而这些用户都是技术上的早期采纳者。他们是我们需要说服从密码转向通行密钥的倡导者。如果这些用户无法使其正常工作，其他学科的人们又该如何应对呢？
- en: Externally there are other issues. Apple Keychain has personally wiped out all
    my Passkeys on *three separate occasions*. There are external reports we have
    recieved of other users who's Keychain Passkeys have been wiped just like mine.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 外部存在其他问题。Apple Keychain 已经三次*个人*清除了我所有的通行密钥。我们还收到其他用户的外部报告，他们的 Keychain 通行密钥也被像我一样清除了。
- en: Since this blog has been published many people have contacted me with their
    own stories of how Passkeys have failed them in various ways. Disappointment in
    the technology appears to be the norm rather than the exception.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 自从这篇博客发表以来，许多人联系我，分享了他们自己使用通行密钥失败的故事。对这项技术的失望似乎成为常态而非例外。
- en: As users how are we meant to trust this technology, a technology that is trying
    to become the default method to protect our account security?
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 作为用户，我们该如何信任这项技术，这项试图成为保护我们账户安全的默认方法的技术？
- en: In order to try to resolve this the workgroup seems to be doubling down on more
    complex JS apis to try to patch over the issues that they created in the first
    place. All this extra complexity comes with fragility and more bad experiences,
    but without resolving the core problems.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了试图解决这个问题，工作组似乎在更加复杂的JS API上加倍努力，试图弥补他们最初造成的问题。所有这些额外复杂性都带来脆弱性和更糟的体验，但并未解决核心问题。
- en: It's a mess.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 简直一团糟。
- en: The Future
  id: totrans-split-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来
- en: At this point I think that Passkeys will fail in the hands of the general consumer
    population. We missed our golden chance to eliminate passwords through a desire
    to capture markets and promote hype.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为通行密钥在普通消费者手中将会失败。我们错过了通过渴望占领市场和推广炒作来消除密码的黄金机会。
- en: Corporate interests have overruled good user experience once again. Just like
    ad-blockers, I predict that Passkeys will only be used by a small subset of the
    technical population, and consumers will generally reject them.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 企业利益再次凌驾于良好用户体验之上。就像广告拦截器一样，我预测通行密钥（Passkeys）只会被技术人群的一小部分使用，而消费者普遍会拒绝它们。
- en: To reiterate - my partner, who is extremely intelligent, an avid computer gamer
    and *veterinary surgeon* has sworn off Passkeys because the user experience is
    so shit. She wants to go back to passwords.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 重申一遍 - 我的伴侣，一个极其聪明、狂热的电脑游戏玩家和*兽医外科医生*，因为用户体验太差而发誓不再使用通行密钥。她想要回到密码。
- en: And I'm starting to agree - a password manager gives a better experience than
    passkeys.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 而且我开始同意——一个密码管理器比密码键提供了更好的体验。
- en: That's right. I'm here saying *passwords are a better experience than passkeys*.
    Do you know how much it pains me to write this sentence? (and yes, that means
    MFA with TOTP is still important for passwords that require memorisation outside
    of a password manager).
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。我在这里说*密码比密码键提供了更好的体验*。你知道我写下这句话有多痛苦吗？（是的，这意味着需要记忆密码管理器之外的密码的MFA仍然对重要密码很重要）。
- en: So do yourself a favour. Get something like [bitwarden](https://bitwarden.com/)
    or if you like self hosting get [vaultwarden](https://github.com/dani-garcia/vaultwarden).
    Let it generate your passwords and manage them. If you really want passkeys, put
    them in a password manager you control. But don't use a platform controlled passkey
    store, and be very careful with security keys.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，请对自己好一点。使用类似于[bitwarden](https://bitwarden.com/)这样的工具，或者如果你喜欢自行托管，可以选择[vaultwarden](https://github.com/dani-garcia/vaultwarden)。让它生成和管理你的密码。如果你真的想要密码键，把它们放在你能控制的密码管理器中。但不要使用平台控制的密码存储，并且要非常小心安全密钥。
- en: And if you do want to use a security key, just use it to unlock your password
    manager and your email.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确实想使用安全密钥，只需用它来解锁你的密码管理器和电子邮件。
- en: Within enterprise there still is a place for attested security keys where you
    can control the whole experience to avoid the vendor lockin parts. It still has
    rough edges though. Just today I found a browser that has broken attestation which
    is not good. You still have to dive through obnoxious UX elements that attempt
    to force you through caBLE even though your IDP will only accept certain security
    models, so you're still likely to have some confused users.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业内部，仍然存在一个需要经过验证的安全密钥的地方，你可以控制整个体验以避免供应商锁定的部分。尽管它仍然存在一些问题。就在今天，我发现了一个有损破解验证的浏览器，这不太好。你仍然必须在试图强制你通过caBLE的恶心用户体验元素中游走，尽管你的IDP只接受某些安全模型，因此你仍然可能会有一些困惑的用户。
- en: Despite all this, I will continue to maintain webauuthn-rs and it's related
    projects. They are still important to me even if I feel disappointed in the direction
    of the ecosystem.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这一切，我将继续维护webauuthn-rs及其相关项目。即使我对生态系统的发展方向感到失望，它们对我仍然很重要。
- en: But at this point, in [Kanidm](https://kanidm.com/) we are looking into device
    certificates and smartcards instead. The UI is genuinely better. Which says a
    lot considering the PKCS11 and PIV specifications. But at least PIV won't fall
    prone to attempts to enshittify it.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 但在这一点上，在[Kanidm](https://kanidm.com/)中，我们正在研究设备证书和智能卡。用户界面确实更好。这说了很多，考虑到PKCS11和PIV规范。但至少PIV不会容易受到使其变糟的尝试的影响。
