- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:30:14'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:30:14'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: lamplightdev - Streaming HTML out of order without JavaScript
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: lamplightdev - 在没有JavaScript的情况下以任意顺序流式HTML
- en: 来源：[https://lamplightdev.com/blog/2024/01/10/streaming-html-out-of-order-without-javascript/](https://lamplightdev.com/blog/2024/01/10/streaming-html-out-of-order-without-javascript/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://lamplightdev.com/blog/2024/01/10/streaming-html-out-of-order-without-javascript/](https://lamplightdev.com/blog/2024/01/10/streaming-html-out-of-order-without-javascript/)
- en: Streaming HTML out of order without JavaScript
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在没有JavaScript的情况下以任意顺序流式HTML
- en: 'Let''s start with a demo: **[https://ooo.lamplightdev.workers.dev](https://ooo.lamplightdev.workers.dev)**:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个演示开始：**[https://ooo.lamplightdev.workers.dev](https://ooo.lamplightdev.workers.dev)**：
- en: </images/ooo-a0475c62.mp4>
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: </images/ooo-a0475c62.mp4>
- en: 'This is a simple page that renders a list of 10 items. Try it with and **without
    JavaScript enabled** in your browser. There''s a few things to notice:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的页面，呈现了一个包含10个项目的列表。在浏览器中启用和**禁用JavaScript**后尝试一下。有几点需要注意：
- en: '**The ''app shell'' renders first** - you see the header and the footer, but
    there''s a loading placeholder where the list of items will be rendered.'
  id: totrans-split-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**''应用壳''首先渲染** - 您会看到页眉和页脚，但列表项目将渲染的加载占位符。'
- en: After a second the **loading placeholder is replaced** with the list of items
    - but with each item itself having a loading placeholder.
  id: totrans-split-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一秒钟后，**加载占位符被替换**为项目列表 - 但每个项目本身也有一个加载占位符。
- en: '**The content of the items then renders out of order**, replacing the loading
    placeholders - you see item 5 first, then the other items as they are generated.'
  id: totrans-split-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**然后项目内容按任意顺序渲染**，替换加载占位符 - 首先看到项目5，然后随着生成过程看到其他项目。'
- en: If you look at the page source you'll see that the **html is in the order it
    was sent - not the order it was rendered in**
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果查看页面源代码，您会看到**HTML的顺序是发送时的顺序 - 而不是渲染时的顺序**。
- en: The page makes use of **Shadow DOM** without Custom Elements.
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面使用不包含自定义元素的**Shadow DOM**。
- en: Pretty nice, right? It may be a contrived example but it's an interesting technique
    that enables things that have not been possible before without JavaScript.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 相当不错，对吧？这可能是一个刻意制造的例子，但它是一种有趣的技术，使得以前没有JavaScript时不可能实现的功能成为可能。
- en: Have a look at the **[code for this demo](https://github.com/lamplightdev/ooo)**,
    or read on for an explanation of how it works.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 查看**[此演示的代码](https://github.com/lamplightdev/ooo)**，或者继续阅读它是如何工作的解释。
- en: '* * *'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Background
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景
- en: Streaming HTML
  id: totrans-split-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流式HTML
- en: The **concept of streaming HTML** - sending HTML from a web server to a browser
    in chunks as it is generated - is **nothing new**. It seemed to take a back seat
    at the beginning of the age of modern front-end frameworks and Single Page Applications
    - where the entire page was generated in the browser - but as the pendulum swings
    back towards server-side rendering with full stack frameworks, **streaming responses
    are becoming popular again**.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**流式HTML的概念** - 将HTML以块的形式从服务器发送到浏览器中生成 - **并不新鲜**。 在现代前端框架和单页面应用程序的时代初期，整个页面在浏览器中生成，这一概念似乎处于次要地位
    - 但随着全栈框架向服务器端渲染回归，**流式响应再次流行起来**。'
- en: The **advantages of streaming HTML** over waiting for the entire response to
    be generated before sending it to the browser are clear - you can **render something
    immediately** to indicate to the user that something is happening, and you can
    start downloading assets like CSS and JavaScript earlier, while you **wait for
    the more time consuming parts of the response** to be generated.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**流式HTML的优势**在于，在整个响应生成之前发送到浏览器之前，您可以**立即渲染一些内容**以指示用户有活动发生，并且可以在**等待响应的耗时部分生成**时更早地开始下载CSS和JavaScript等资产。'
- en: What's been lacking up to this point is a way to **stream HTML out of order**
    - that is to stream the HTML in chunks as it's generated without worrying about
    the order in which the chunks are sent to the browser - and still have the browser
    render the chunks of HTML in the correct order as in the demo above.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止缺少的是一种**无序流式HTML**的方式 - 即在生成HTML时以块的形式进行流式传输，而无需担心将哪些块以何种顺序发送到浏览器 - 并且仍然能够像上面的演示中那样使浏览器按正确顺序渲染HTML块。
- en: Modern full stack frameworks enable this functionality by using a variety of
    clever techniques, all of which require buy-in to the particular framework and
    a **hefty chunk of JavaScript**. That might be fine for your use case, but what
    if we could **achieve the same thing without any JavaScript or framework?** *Well
    now you can*.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现代全栈框架通过使用各种巧妙的技术实现了这一功能，所有这些技术都需要参与到特定框架中，并且需要大量的 JavaScript。这对于你的用例来说可能没问题，但如果我们能够**在没有任何
    JavaScript 或框架的情况下实现相同的功能**，那会怎样？*现在你可以*。
- en: Shadow DOM
  id: totrans-split-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 影子 DOM
- en: '**[Shadow DOM](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM)**
    is a way to render a piece of DOM in isolation from the rest of the page. Whilst
    often associated with Custom Elements, Shadow DOM **can be used with any HTML
    tag**, such as the humble `<div>` tag.'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**[影子 DOM](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM)**
    是一种将 DOM 片段与页面其余部分隔离渲染的方法。虽然通常与自定义元素相关联，但**可以与任何 HTML 标签**一起使用，如普通的 `<div>` 标签。'
- en: 'It also has the concept of **slots** - tags that act as portals that you can
    render HTML into from elsewhere within the parent tag by specifying a `slot` attribute
    on the tag you want to render. Here the shadow root is attached to the outer `<div>`
    tag, and the inner `<div>` tag is rendered into the slot in that shadow root:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 它还有**插槽**的概念 - 这些标签充当门户，您可以通过在要渲染的标签上指定 `slot` 属性，在父标签内的其他位置渲染 HTML。这里影子根附加到外部
    `<div>` 标签上，并且内部 `<div>` 标签被渲染到该影子根中的插槽中：
- en: '[PRE0]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '* * *'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Requirements
  id: totrans-split-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要求
- en: 'So how do you use Shadow DOM to stream HTML out of order? There''s a few things
    you need:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如何使用影子 DOM 来无序流式传输 HTML？你需要几件事情：
- en: A **http server that supports streaming responses**. You're in luck here, there
    is pretty much universal support for this across all languages. I've opted for
    **[Hono](https://hono.dev/)** as it's a lightweight server, built on web standards,
    that runs on node as well as a wide variety of edge platforms. It's worth noting
    though that there's no dependency on a JavaScript backend - the same thing can
    be achieved on PHP, Java, Go, etc.
  id: totrans-split-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个**支持流式响应的 HTTP 服务器**。你在这里很幸运，几乎所有语言都对此提供了广泛的支持。我选择了 **[Hono](https://hono.dev/)**，因为它是一个轻量级的服务器，基于
    Web 标准构建，可以在 Node 和各种边缘平台上运行。但需要注意的是，并不依赖于 JavaScript 后端 - 同样可以在 PHP、Java、Go 等上实现相同的功能。
- en: A **templating language that supports streaming**. In theory you don't need
    a templating language - you could handcraft the HTML and manually manage the streaming
    - but that's a lot of work. In the JavaScript world, there aren't a lot of standalone
    templating languages that support streaming, but a recent project called **[SWTL](https://github.com/thepassle/swtl)**
    does. SWTL was created to be used in Service Workers, but since we're using web
    standards all the way down, it can be used on the server too. The other great
    thing about SWTL is that you can chuck pretty much anything at it - async functions,
    generators, arrays, responses - and it will handle it all.
  id: totrans-split-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个**支持流式的模板语言**。理论上你不需要模板语言 - 你可以手工制作 HTML 并手动管理流式传输 - 但那是一项繁重的工作。在 JavaScript
    的世界中，没有太多独立的模板语言支持流式传输，但最近有一个叫做 **[SWTL](https://github.com/thepassle/swtl)**
    的项目做到了。SWTL 是为了在服务工作者中使用而创建的，但由于我们始终使用 Web 标准，因此也可以在服务器上使用。SWTL 的另一个优点是你几乎可以用它来处理任何东西
    - 异步函数、生成器、数组、响应 - 它都能处理。
- en: '**Declarative Shadow DOM** - Until recently custom Shadow DOM was a browser
    only technology - you could only create Shadow DOM in the browser using JavaScript
    - but now, thanks to **[Declarative Shadow DOM](https://developer.chrome.com/docs/css-ui/declarative-shadow-dom)**
    (DSD), you can create Shadow DOM on the server and the browser will render it
    without JavaScript by using a new `shadowrootmode` attribute on a `<template>`
    tag. The shadow root is then automatically attached to the containing element:'
  id: totrans-split-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**声明式影子 DOM** - 直到最近，自定义影子 DOM 是一种仅限于浏览器的技术 - 你只能使用 JavaScript 在浏览器中创建影子 DOM
    - 但现在，多亏了 **[声明式影子 DOM](https://developer.chrome.com/docs/css-ui/declarative-shadow-dom)**
    (DSD)，你可以在服务器上创建影子 DOM，并通过在 `<template>` 标签上使用新的 `shadowrootmode` 属性，浏览器将在不使用
    JavaScript 的情况下渲染它。然后自动将影子根附加到包含的元素上：'
- en: '[PRE1]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '* * *'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Piecing it together
  id: totrans-split-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将其组合起来
- en: 'So how was that initial demo created? Let''s break it down in a simplified
    code example:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 那么初始演示是如何创建的？让我们通过一个简化的代码示例来解析它：
- en: '[PRE2]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And that's all there is to it! Browse the **[code for this demo](https://github.com/lamplightdev/ooo)**
    and have a play with it yourself. I'd love to hear your thoughts on this technique
    - and any novel use cases you can think of for it - so please **[get in touch](https://lamplightdev.com/contact/)**.
    Until next time 👋.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里就是全部啦！浏览**[这个演示的代码](https://github.com/lamplightdev/ooo)**，然后自己试试。我很想听听你对这种技术的想法，还有你能想到的任何新用途，请**[联系我](https://lamplightdev.com/contact/)**。下次见！👋。
- en: '*With thanks to [@passle_](https://twitter.com/passle_), author of SWTL, for
    proofreading and feedback on this article.*'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*特别感谢[@passle_](https://twitter.com/passle_)，《SWTL》的作者，为本文的校对和反馈提供支持。*'
