- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:37:59'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:37:59'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Programmers are bad at managing state | Read the Tea Leaves
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序员在状态管理方面做得很糟糕 | 读茶叶
- en: 来源：[https://nolanlawson.com/2020/12/29/programmers-are-bad-at-managing-state/](https://nolanlawson.com/2020/12/29/programmers-are-bad-at-managing-state/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://nolanlawson.com/2020/12/29/programmers-are-bad-at-managing-state/](https://nolanlawson.com/2020/12/29/programmers-are-bad-at-managing-state/)
- en: “Have you tried turning it off and back on again?” is one of the most familiar
    tropes associated with tech support. But as someone who is often asked by family
    members for help with misbehaving devices, I find it to be one of my most effective
    tools.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: “你试过关闭然后再打开吗？”是与技术支持相关的最熟悉的模式之一。但作为经常被家人要求帮忙解决设备问题的人，我发现这是我最有效的工具之一。
- en: 'The solution is primitive, but the logic behind it is surprisingly profound:
    programmers are bad at managing state.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案很原始，但背后的逻辑却令人惊讶：程序员在状态管理方面做得很糟糕。
- en: As a programmer, I understand this fact intuitively. When a program I’ve written
    has first booted up, it is in its most pristine, perfect state. I have lovingly
    crafted every variable and array to be exactly how I intend it to be. If I have
    automated tests, then this is the state that is most heavily tested.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名程序员，我本能地理解这一事实。当我编写的程序首次启动时，它处于最原始、完美的状态。我精心设计每个变量和数组，确保它们完全符合我的意图。如果我有自动化测试，那么这种状态就是经过最严格测试的状态。
- en: It’s only after this initial bootup phase that everything starts to go to hell.
    The user clicked on something! The user typed in a field! How could they? How
    could they besmirch my beautiful, perfect program with their grubby little hands?
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在这个初始启动阶段之后，一切才开始变得一团糟。用户点击了某些东西！用户在字段中输入了东西！他们怎么可以？他们怎么可以用他们那双肮脏的小手毁坏我的美丽、完美的程序呢？
- en: Before you know it, the user has not only clicked and typed – they’ve pressed
    the browser’s back and forward buttons, and the refresh button, and they’ve booted
    up the program after a few weeks of inactivity, so that some of the data has become
    stale, or maybe they installed an update and now they’ve got some locally cached
    files that were designed for an older version of the app… It’s here that users
    run into the countless errors, crashes, and freezes associated with software that
    finds itself in a state that the original programmers didn’t intend.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在你意识到之前，用户不仅仅是点击和输入了 - 他们还按了浏览器的返回和前进按钮，并且点击了刷新按钮，还有可能是在几周不活动后启动了程序，以至于一些数据变得过时，或者可能是安装了更新，现在他们有一些本地缓存的文件，设计用于应用程序的旧版本...
    就在这时，用户遇到了与软件陷入的状态不符合的无数错误、崩溃和冻结。
- en: This is why “turn it off and on again” works so well. You put the software back
    in a state that the programmers predicted, and poof, everything works again. Sometimes,
    though, you have to take this logic even further.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么“关闭然后再打开”如此有效。你将软件恢复到程序员预测的状态，嘿，一切又正常了。不过有时候，你必须进一步采用这种逻辑。
- en: Recently my wife was having problems launching Steam. She hadn’t run it in a
    few years, so she reinstalled it and clicked the icon, but it refused to load.
    I googled around and couldn’t find a solution, so, on a hunch, I deleted the `~/Library/Application
    Support/Steam` folder, where Steam was apparently storing data, and relaunched
    it. Poof! It worked.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我妻子在启动Steam时遇到了问题。她已经好几年没运行过它了，所以她重新安装了它并点击了图标，但它却拒绝加载。我搜索了一番也找不到解决方案，所以凭直觉，我删除了`~/Library/Application
    Support/Steam`文件夹，那里显然是Steam存储数据的地方，然后重新启动了它。嘿！它奇迹般地正常工作了。
- en: Another time, she was having trouble with a web app that was stuck on a loading
    bar, no matter how many times she refreshed. So I opened up the handy Chrome DevTools
    “Application” tab, clicked [“Clear storage”](https://developers.google.com/web/tools/chrome-devtools/manage-data/local-storage#clear-storage),
    and what do you know? After refreshing and logging in again, everything worked.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一次，她遇到了一个卡在加载栏上的网页应用问题，无论刷新多少次都没有用。于是我打开了便捷的Chrome DevTools的“应用”选项卡，点击了[“清除存储”](https://developers.google.com/web/tools/chrome-devtools/manage-data/local-storage#clear-storage)，结果怎么样？刷新并重新登录后，一切正常了。
- en: Another time, her MacBook refused to print anything on our HP printer after
    a macOS update. After about an hour of searching various web forums, it turned
    out that I needed to run a program called [HP Uninstaller](https://support.hp.com/us-en/document/c02440673)
    to remove old HP software. Poof! Everything worked.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一次，她的MacBook在macOS更新后拒绝在我们的HP打印机上打印任何东西。在各种网上论坛上搜索了约一个小时后，结果发现我需要运行一个叫做[HP卸载程序](https://support.hp.com/us-en/document/c02440673)来删除旧的HP软件。噗！一切都正常了。
- en: Having a dedicated program to clean up your own program’s files may seem a bit
    ridiculous, like an admission of defeat, but I actually think it’s kind of brilliant.
    As a programmer, it’s impossible to predict all the states that your program can
    end up in. You can use something like [XState](https://xstate.js.org/) to help
    visualize it, but when you start multiplying the possible states by the cached
    configuration files by the different versions of the software by the *different
    teams of people* who built each version… it just becomes unfeasible to plan for
    every outcome. (Let alone write tests for every possible state!) So rather than
    having software that doesn’t work, maybe it’s better to just admit your own human
    frailty, and offer a way for users to start from scratch.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个专门的程序来清理你自己程序的文件可能看起来有点荒谬，像是承认失败，但我实际上认为这有点聪明。作为一个程序员，不可能预测你的程序可能陷入的所有状态。你可以使用类似于[XState](https://xstate.js.org/)来帮助可视化，但当你开始将可能的状态乘以缓存配置文件再乘以软件的不同版本再乘以*构建每个版本的不同团队的人*时……计划每个结果变得不可行。（更不用说为每种可能的状态编写测试了！）因此，与其拥有不起作用的软件，也许承认自己的人类脆弱性，提供一种让用户可以从头开始的方式可能更好。
- en: 'Mozilla’s [“Refresh Firefox”](https://support.mozilla.org/en-US/kb/refresh-firefox-reset-add-ons-and-settings)
    feature is another brilliant application of this principle. If you haven’t used
    Firefox in a while, then it will pop up a little alert offering to blow everything
    away and start from scratch. This is probably a great way to avoid attrition to
    other browsers: I’m sure plenty of people switch from Browser A to Browser B because
    on day 1, Browser B feels so much faster – not because B is actually superior
    to A, but because B isn’t bogged down with a bunch of extensions, settings, history,
    leftover update files, etc.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla的[“刷新Firefox”](https://support.mozilla.org/en-US/kb/refresh-firefox-reset-add-ons-and-settings)功能是这一原则的又一个精彩应用。如果你有一段时间没有使用Firefox，它会弹出一个小提示，询问是否彻底清除所有内容然后重新开始。这可能是避免用户流失到其他浏览器的好方法：我相信很多人会从浏览器A转到浏览器B，因为在第一天，浏览器B感觉要快得多——不是因为B真的比A更优越，而是因为B没有被一堆扩展、设置、历史记录、残留更新文件等所拖累。
- en: If you’ve ever reinstalled Windows or Android from scratch, and observed how
    remarkably fast and lightweight everything suddenly feels, then you’ve probably
    also seen this phenomenon in action.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经重新安装过Windows或Android，观察到一切突然感觉如此快速和轻便，那么你可能也看到了这种现象的实际效果。
- en: I don’t have a solution to this problem. Software is complicated, and unless
    you have the luxury of writing code that can be tested with formal proofs, it’s
    impossible to predict every possible state that your code can be in. So maybe
    the best bet is to just provide some kind of escape hatch, so that at least it’s
    easy to “turn it off and back on again.”
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我对这个问题没有解决方案。软件很复杂，除非你有幸编写可以通过正式证明测试的代码，否则不可能预测代码可能出现的每种状态。所以也许最好的办法就是提供某种逃生舱口，这样至少可以轻松地“关闭然后重新启动”。
