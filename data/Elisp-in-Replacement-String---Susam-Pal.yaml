- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:43:12'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年05月27日 14:43:12
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Elisp in Replacement String - Susam Pal
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替换字符串中的Elisp - Susam Pal
- en: 来源：[https://susam.net/maze/elisp-in-replacement-string.html](https://susam.net/maze/elisp-in-replacement-string.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://susam.net/maze/elisp-in-replacement-string.html](https://susam.net/maze/elisp-in-replacement-string.html)
- en: <main>
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main>
- en: Elisp in Replacement String
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替换字符串中的Elisp
- en: By **Susam Pal** on 09 Jan 2024
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作者**Susam Pal**于2024年01月09日
- en: It is likely well known among Emacs users that the following key sequence starts
    a search-and-replace operation to match strings with the regular expression pattern
    `f..` and replace the matches with `bar`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Emacs用户而言，很可能众所周知，以下关键序列启动了搜索和替换操作，以匹配正则表达式模式`f..`的字符串，并用`bar`替换匹配项。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Similarly, the following key sequence looks for strings that match a pattern
    that has two capturing groups and replaces each match with a new string that swaps
    the substrings matched by the capturing groups:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，以下关键序列查找匹配具有两个捕获组的模式的字符串，并将每个匹配替换为新字符串，该新字符串交换了捕获组匹配的子字符串：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For example, this operation matches a string like `foo-bar` and replaces it
    with `bar-foo`. A string like `postfix-boxing` becomes `postbox-fixing`. The backreference
    `\1` refers to the string matched by the first capturing group `\(f..\)` and similarly
    `\2` refers to the string matched by the second capturing group `\(b..\)`. The
    replacement string then swaps the positions of the matches in both capturing groups.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，此操作匹配字符串`foo-bar`并将其替换为`bar-foo`。像`postfix-boxing`这样的字符串变成了`postbox-fixing`。反向引用`\1`指的是第一个捕获组`\（f..\)`匹配的字符串，类似地`\2`指的是第二个捕获组`\（b..\)`.然后，替换字符串交换了两个捕获组中匹配的位置。
- en: 'What may be less commonly known is the ability to utilise Elisp expressions
    to dynamically compute portions of the replacement strings. To employ this feature,
    simply write `\,` (i.e., backslash and comma) followed by the Elisp expression
    in the replacement string. Consider the following key sequence:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可能较少人知道的是，利用Elisp表达式动态计算替换字符串的部分的能力。要使用此功能，只需在替换字符串中写入`\,`（即反斜杠和逗号），然后写入Elisp表达式。考虑以下关键序列：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The backreference `\&` refers to the whole match. We pass it as the argument
    to the Elisp function `upcase`. This function converts its argument to upper-case.
    This example searches for strings that match the pattern `f..` and replaces each
    match with the upper-case form of the match. A string like `foo-bar` is replaced
    with `FOO-bar`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 反向引用`\＆`指的是整个匹配项。我们将其作为Elisp函数`upcase`的参数传递。此函数将其参数转换为大写。此示例搜索与模式`f..`匹配的字符串，并将每个匹配项替换为匹配项的大写形式。像`foo-bar`这样的字符串将被替换为`FOO-bar`。
- en: 'Here is another slightly more sophisticated example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个稍微复杂一些的例子：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The backreference `\#1` refers to the string matched by the first capturing
    group `\([0-9]+\)` as a *number*. The Elisp expression in the replacement pattern
    simply adds `1000` to that number and replaces the matched string with the result.
    A string like `host:80` becomes `host:1080`. Another string like `localhost:8000`
    becomes `localhost:9000`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 反向引用`\＃1`将第一个捕获组`\([0-9]+\)`匹配的字符串作为*数字*。替换模式中的Elisp表达式简单地将`1000`添加到该数字，并用结果替换匹配的字符串。像`host:80`这样的字符串变成了`host:1080`。另一个字符串`localhost:8000`变成了`localhost:9000`。
- en: 'Finally, here is an example from the real world of text editing where this
    feature was useful to me recently while solving a text editing problem. Consider
    the following text buffer with a list of numbered items:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里有一个来自文本编辑真实世界的示例，最近在解决文本编辑问题时，这个功能对我很有用。考虑以下包含编号项目列表的文本缓冲区：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: While this is a toy example presented here for the sake of simplicity and clarity,
    this example is based on an actual text editing problem I encountered recently.
    In my actual problem though, there were more words on each line and there were
    some arbitrary paragraphs of text between every consecutive pair of items. Further,
    the list was long with 50 or so items. The problem now was to remove item number
    3 and renumber all the lines below it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此处提供的是一个为了简单和清晰起见而提供的玩具示例，但此示例基于我最近遇到的一个实际文本编辑问题。不过，在我的实际问题中，每行上有更多的单词，并且每个连续项目对之间有一些任意的文本段落。此外，列表很长，有大约50个项目。现在的问题是删除第3项并对其下面的所有行重新编号。
- en: 'It is quite straightforward to remove item 3\. Just move the point (cursor)
    to that line and type `C-S-<backspace>` or `C-a C-k` to kill that line. We get
    this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易删除第3项。只需将点（光标）移到该行并键入`C-S-<backspace>`或`C-a C-k`以删除该行。我们得到这个：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'How do we now renumber all the items starting from `4) cat`? This is where
    the support for Elisp expressions in replacement strings turns out to be useful.
    First move the point to the beginning of that line. Then type the following key
    sequence:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在如何重新编号所有以 `4) cat` 开头的项目？这就是支持替换字符串中 Elisp 表达式的地方。首先将光标移动到那一行的开头。然后输入以下键序列：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The search pattern captures the item number on each line in a capturing group.
    The replacement string contains an Elisp expression that subtracts one from this
    number. Thus a string like `### 4` gets replaced with `### 3`. After completing
    the replacement, the buffer looks like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索模式在每行中捕获项目编号。替换字符串包含一个 Elisp 表达式，用于从该编号中减去一。因此像 `### 4` 这样的字符串将被替换为 `### 3`。替换完成后，缓冲区看起来像这样：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: I hope this was useful. Do you have an interesting Elisp-in-replacement-string
    story? Please share it in the comments.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这对你有帮助。你有一个有趣的 Elisp-in-replacement-string 故事吗？请在评论中分享。
- en: </main>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
