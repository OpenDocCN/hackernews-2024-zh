- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: CFEngine的星际迷航与人工智能起源
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 30周年纪念致敬
- en: 'date: 2024-05-29 12:39:45'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: 1993年，我与奥斯陆大学物理系的系统管理员深入讨论之后，编写了CFEngine。当时，我们正使用shell和Perl脚本来自动化约五十台服务器的操作。物理系是该大学Unix-like操作系统中最苛刻的IT环境之一。那时候的Unix有很多种：SunOS4、后来成为Solaris的SunOS5、带有类似Sinclair
    Spectrum的橡皮键盘的HP-UX、Apollo工作站、IBM的多版本AIX、DEC Alpha上的OSF1、Ultrix等等。Linux当时还只是一个梦想。
- en: CFEngine’s Star Trek and AI origins | by Mark Burgess | Medium
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如今，CFEngine广为人知的是一款配置管理工具，曾经被Puppet、Chef，然后是Ansible所取代。*“我知道工程师，他们喜欢改变事物！”*（在《星际迷航：电影版》中Dr
    McCoy曾如此说）。确实，我们喜欢新工具，但说CFEngine被取代了并不准确。它依然活跃且健康。更重要的是，仅仅称CFEngine为配置管理也不完全准确。CFEngine的设想远远超出了我们现在理解的配置管理范畴。它设计之时还没有虚拟机和云计算，但其原则至今仍然合乎逻辑，适用于现代IT世界的很多方面。要在现代IT系统中实现CFEngine多年来的所有功能（配置、监控、网络路由、文本处理、网络编排等），你需要半打不同的软件，并需要进行一些复杂的集成。
- en: 来源：[https://mark-burgess-oslo-mb.medium.com/cfengines-star-trek-and-ai-origins-e99096fe845b](https://mark-burgess-oslo-mb.medium.com/cfengines-star-trek-and-ai-origins-e99096fe845b)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CFEngine的星际迷航与AI起源 | 作者：Mark Burgess | Medium
- en: CFEngine’s Star Trek and AI origins
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: -->
- en: A 30 year anniversary tribute
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我和CFEngine的Nick Anderson合影
- en: '*CFEngine is 30 years old this year. For a piece of software, that’s been quite
    a long life. A lot has happened on its journey to arrive at where we are today,
    but most users have now forgotten how it emerged from a young lad’s dreams of
    artificial intelligence. I’ve written at length about the science in my book*
    [*In Search of Certainty*](http://markburgess.org/certainty.html)*, and even some*
    [*biographical*](/list/youre-not-a-scientist-maybe-a-dj-e09240fbaaa6) *notes.
    but grab a coffee and gather around, and I’ll tell you a bit more.*'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-05-29 12:39:45'
- en: Me with Nick Anderson from CFEngine
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：[https://mark-burgess-oslo-mb.medium.com/cfengines-star-trek-and-ai-origins-e99096fe845b](https://mark-burgess-oslo-mb.medium.com/cfengines-star-trek-and-ai-origins-e99096fe845b)
- en: Today, CFEngine is widely known as the configuration management tool that was
    replaced by Puppet, Chef, and then Ansible. *“I know engineers, they love to change
    things!”* (said Dr McCoy in Star Trek The Motion Picture). True, we love new tools,
    but it’s not accurate to say that CFEngine has been replaced. It’s alive and well.
    More importantly, calling CFEngine only configuration management isn’t quite accurate
    either. CFEngine was imagined to be much more than what we’ve now come to understand
    as configuration management. It was designed in the age before virtual machines
    and cloud computing, and yet its principles are still sound and applicable to
    much of the IT world today. To do everything that CFEngine did in modern IT systems
    over the years (configuration, monitoring, network routing, text processing, network
    orchestration, etc), you would need half a dozen different bits of software with
    some challenging integration on top.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '类别: 未分类'
- en: 'I wrote CFEngine at the University of Oslo in 1993 after a deep discussion
    with the system administrator at the department of physics about the complexity
    of the shell and Perl scripts we were then using to automate the fifty or so servers
    we had. The physics department was one of the most demanding IT environments at
    the university for Unix-like operating systems. There were many flavours of Unix
    then: SunOS4, SunOS5 (which became Solaris), HP-UX with its Sinclair Spectrum-like
    rubber keyboards, Apollo workstations, IBM’s AIX in multiple versions, OSF1 on
    the DEC alphas, Ultrix, and more. Linux was still a pipe dream at that time.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*CFEngine今年已经30岁了。对于一款软件来说，这算是很长的生命周期了。它的发展历程中发生了很多事情，但大多数用户现在已经忘记了它是如何从一个年轻人对人工智能的梦想中诞生的。我在我的书籍*
    [*《寻找确定性》*](http://markburgess.org/certainty.html)* 中详细探讨了这门科学，甚至还有一些* [*传记*](/list/youre-not-a-scientist-maybe-a-dj-e09240fbaaa6)
    *笔记。但是，抓杯咖啡过来，围坐一起，我会告诉你更多。*'
- en: These flavours of Unix were all quite different from one another–some based
    on [BSD Unix](https://en.wikipedia.org/wiki/Berkeley_Software_Distribution), some
    based on [System V](https://en.wikipedia.org/wiki/UNIX_System_V). On top of this,
    everyone at the university had special needs! Today we try to make systems as
    similar as possible in order to manage scale, but CFEngine was designed to handle
    diversity and variability without breaking the bounds of human effort. It was
    putting the user needs ahead of limitations imposed for managerial convenience.
    It was as much about *knowledge management* as configuration management. Biology
    can handle diversity, why not technology?
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些Unix的风味彼此非常不同 —— 有些基于[BSD Unix](https://en.wikipedia.org/wiki/Berkeley_Software_Distribution)，有些基于[System
    V](https://en.wikipedia.org/wiki/UNIX_System_V)。而且，大学里的每个人都有特殊需求！今天我们试图使系统尽可能相似以便管理规模，但CFEngine设计用于处理多样性和变异性，而不违反人力的界限。它把用户需求放在管理方便性的限制之前。它不仅仅是关于*知识管理*，也是关于配置管理。生物学可以处理多样性，为什么技术不能？
- en: A colleague at the university computing service USIT had written some impressive
    daily and weekly shell scripts to manage the university’s computing service’s
    interests on the machines. The idea of running the same software regularly, like
    an error correction loop was intriguing. Most software installed once and then
    went into a hands-off monitoring mode. I was intrigued by these maintenance scripts–not
    least the huge complexity that went just into dealing with the different syntax
    between systems. Half the scripts were if-then-else tests to figure out the precise
    version. One could hardly see what they were actually doing for all the checking.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大学计算服务USIT的一位同事编写了一些令人印象深刻的日常和每周shell脚本来管理大学计算服务在机器上的兴趣。定期运行相同软件的想法，就像一个错误校正循环，是令人着迷的。大多数软件安装一次，然后进入无人监控模式。我对这些维护脚本很感兴趣
    —— 至少也是因为它们处理不同系统之间不同语法的巨大复杂性。有一半的脚本是if-then-else测试，以确定精确的版本。人们几乎无法看到它们究竟在做什么。
- en: What we were talking about was a *software robot* that lived not in the physical
    world, but whose environment was the abstract state space of operating systems.
    A declarative language could be used to express desired intent, but every machine
    had to have the robotic chops to be responsible for its own state. Back then,
    you never knew if the network would be up or down. The robot wouldn’t manipulate
    blocks or chess pieces as one thought in the 80s, but rather system files and
    processes.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论的是一个不生存在物理世界的*软件机器人*，而是其环境是操作系统的抽象状态空间。声明性语言可以用来表达期望的意图，但每台机器都必须具备自己状态的机器人技能。那时候，你从未知道网络是联通还是断开。这个机器人不会像80年代人们所想的那样操纵块或棋子，而是系统文件和进程。
- en: One of the major challenges was the configuration of difficult subsystems like
    [Berkeley Sendmail](https://en.wikipedia.org/wiki/Sendmail), which involved complex
    text editing as well as process management. One couldn’t simply install standard
    files because they wouldn’t work across all machines and they wouldn’t respect
    the special needs of what local users wanted. It would be best if people kept
    their hands off the hosts, but you could never guarantee that, so it was bad-form
    to just overwrite stuff to impose change. From this experience, the concept of
    autonomy and *promises* versus *impositions* eventually evolved in [Promise Theory](https://en.wikipedia.org/wiki/Promise_theory).
    CFEngine’s text editing language remains one of the most sophisticated models
    of automated editing for files, working convergently while working around what
    others might have done (what we now tend to call idempotently, which is not quite
    accurate).
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个主要挑战是配置困难的子系统，比如[伯克利Sendmail](https://en.wikipedia.org/wiki/Sendmail)，涉及复杂的文本编辑和进程管理。不能简单地安装标准文件，因为它们在所有机器上都不起作用，并且不会考虑本地用户所需的特殊需求。最好让人们不要碰主机，但你永远不能保证，所以强行改变是不好的做法。从这一经验中，自主性和*承诺*与*强制*的概念最终演变成了[承诺理论](https://en.wikipedia.org/wiki/Promise_theory)。CFEngine的文本编辑语言仍然是自动编辑文件的最复杂模型之一，以收敛方式运作，同时避免其他人可能已经完成的工作（我们现在倾向于称之为幂等，这并不完全准确）。
- en: Old notes on convergence in CFEngine. Today a new generation name drops semi-lattices
    and idempotence.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在CFEngine中关于收敛的旧笔记。今天新一代的名字放弃了半格和幂等性。
- en: Just running shell commands wasn’t going to cut it either as some software does
    today for relatively homogeneous Linux. For one thing, all the options of shell
    commands were different across the Unices. A software agent that could manage
    a computer as well as a human needed to have complex manipulative skills and cause
    as little downtime disruption as possible.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅运行Shell命令并不能如今为相对同质的Linux所做到。 其中一个问题是，不同的Unix系统中的所有Shell命令选项都是不同的。 软件代理人需要像人类一样具备复杂的操纵技能，并尽可能少地造成停机中断。
- en: 'The answer was obvious: one should separate the cognitive or *sensory* environmental
    concerns and hide all that checking from the language of intent to reveal the
    purpose. We discussed the idea of a Domain Specific Language to make everything
    crystal clear, and over the Christmas break I wrote one. It was an ad hoc affair
    to begin with, which went through several revisions, but it did the job of exposing
    the intent rather than the technicalities. Simplicity was what system administrators
    wanted then (the story is different now, in an age of developers).'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 答案显而易见：应该分离认知或*感知*环境问题，并隐藏所有这些检查，使其与意图的语言相分离，以揭示目的。 我们讨论了使用特定领域语言的想法，以使一切变得清晰明了，在圣诞节假期期间我写了一篇。
    它起初是一个临时性的事务，经历了几次修订，但它完成了揭示意图而非技术细节的任务。 简单是当时系统管理员们所期望的（如今的情况已经不同了，在开发者时代）。
- en: A doodle I made in a meeting in 2009 accurately shows CFEngine as an integrator
    of independent pieces in a larger game :) of configuration !
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年会议中我做的一个涂鸦准确地展示了CFEngine作为在更大的配置游戏中整合独立部件的整合者 :)
- en: The endless if-then-else statements of scripts were replaced by a set-algebra
    evaluator for policy rule relevance that was likened to Prolog. I didn’t know
    much about AI research then, except for what I’d read in [Douglas Hoftadter’s
    *Gödel Escher Bach*](https://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach)*.*
    I started intuitively, and only later came to try to put the ideas on a [proper
    academic footing](http://markburgess.org/sysadmin.html). Still, I’m still surprised
    at how often I rediscover that the right way to solve modern problems is to do
    what I did intuitively in CFEngine.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本中无尽的if-then-else语句被一个类似于Prolog的策略规则相关性的集合代数评估器所取代。 当时我对人工智能研究了解不多，除了在[Douglas
    Hoftadter的《哥德尔，艾舍尔，巴赫》](https://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach)中读到的内容。我当时凭直觉开始，直到后来才尝试将这些想法放在[适当的学术基础](http://markburgess.org/sysadmin.html)上。
    尽管如此，我仍然惊讶于如何经常重新发现，解决现代问题的正确方式是以我在CFEngine中直觉做的方式。
- en: As a physicist, with an interest in computers, the challenge of regulating a
    system had several dimensions. I didn’t just want to run commands to be forgotten,
    like a [Markov process](https://en.wikipedia.org/wiki/Markov_chain). I wanted
    to understand the dynamic stability of the machines and measure their behaviour.
    I was intrigued by the idea of [artificial life](https://en.wikipedia.org/wiki/Artificial_life),
    and I imagined a system like the one in Star Trek where you could ask the computer
    for a diagnostic and everything would heal itself. In an [early online manual](https://www.gnu.org/software/cfengine/daystrom.html),
    I even quoted with some self-irony from the original episode of [Star Trek *The
    Ultimate Computer*](https://en.wikipedia.org/wiki/The_Ultimate_Computer), about
    Dr Daystrom’s M5 “duotronic” computer.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名物理学家，对计算机感兴趣，管理系统的挑战有多个维度。 我不仅仅想要运行命令然后被遗忘，就像[马尔科夫过程](https://en.wikipedia.org/wiki/Markov_chain)一样。
    我想要理解机器的动态稳定性并测量它们的行为。 我对[人工生命](https://en.wikipedia.org/wiki/Artificial_life)的概念很感兴趣，我想象过像星际迷航中的那种系统，你可以向计算机询问诊断，然后一切都能自动修复。
    在[早期的在线手册](https://www.gnu.org/software/cfengine/daystrom.html)中，我甚至引用了《星际迷航：究极计算机》这一原始剧集中关于Dr
    Daystrom的M5“双电子管”计算机的一些自嘲。
- en: '*Kirk*: “I’m curious, Doctor, why is it called the M5?”'
  id: totrans-split-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Kirk*: “我很好奇，博士，为什么它被称为M5？”'
- en: '*Daystrom*: “Well you see, M1 to M4 were not entirely successful. This one
    is. M5 is ready to take control of your ship.”'
  id: totrans-split-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Daystrom*: “嗯，你看，M1到M4并不完全成功。 而这一款确实成功了。 M5已准备好控制你的飞船。”'
- en: '*Kirk*: “Total control?”'
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Kirk*: “全面控制？”'
- en: '*Daystrom*: “That is what it is designed for.”'
  id: totrans-split-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Daystrom*: “这就是它的设计初衷。”'
- en: '*Kirk*: “There are some things that Men have to do to remain Men, your computer
    takes that away.”'
  id: totrans-split-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Kirk*: “有些事情人类必须做才能继续保持人性，你的计算机却把这些都夺走了。”'
- en: '*Daystrom*: “The computer can do your job … One machine can do all those things
    that Men do now. Men can go on to do greater things…”'
  id: totrans-split-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Daystrom*: “计算机可以做你的工作…… 一台机器可以完成现在人类所做的所有事情。 人类可以继续做更伟大的事情……”'
- en: I was no expert on AI, but I’d just written a paper with an old colleague, Allan
    McLachlan, who had left physics and gone into AI research. AI was fresh in my
    mind.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我对AI并不是专家，但我刚与老同事艾伦·麦克拉克兰合写了一篇论文，他已经离开物理学转向AI研究。AI仍然新鲜在我的脑海中。
- en: I realised that CFEngine needed to have extensive sensory skills to understand
    what kind of Unix system it was working on, and have powerful manipulators to
    be able to change system configurations, especially when it came to editing text
    files that were ubiquitous on Unix. In the mid 90’s I was inspired by immunology
    and [swarm intelligence](https://en.wikipedia.org/wiki/Swarm_intelligence). Polly
    Matzinger’s [Danger Model](https://en.wikipedia.org/wiki/Danger_model) of the
    human immune system was featured on a BBC documentary, and I began to develop
    the [self-healing capabilities](https://www.usenix.org/conference/lisa-98/computer-immunology)
    in reference to the ingenious methods of environmental regulation employed by
    our immune systems.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我意识到CFEngine需要具备广泛的感知技能，以了解它所工作的Unix系统的类型，并具备强大的操作器，能够改变系统配置，特别是在编辑Unix上随处可见的文本文件时。在90年代中期，我受到免疫学和[群体智能](https://en.wikipedia.org/wiki/Swarm_intelligence)的启发。Polly
    Matzinger的人类免疫系统的[危险模型](https://en.wikipedia.org/wiki/Danger_model)在BBC的纪录片中亮相，我开始开发[自愈能力](https://www.usenix.org/conference/lisa-98/computer-immunology)，以参考我们免疫系统所采用的环境调节的巧妙方法。
- en: Eventually, I released what I then called cfengine 1.0 internally at the university,
    and later [cfengine 2.0](http://markburgess.org/papers/cfengine_history.pdf) in
    the spring of 1993 for use at CERN and gave a talk there to the CERN unix group.
    I published a couple of papers on it, and hoped it might be useful to others without
    any real expectations. Little could I know about how quickly it found a home.
    By then, Richard Stallman’s [Free Software Foundation](https://en.wikipedia.org/wiki/Free_Software_Foundation)
    had started its GNU project for Free Software. I thought it was a great idea to
    make the code available and learn from others. I gave the code to cfengine 2.x
    and the project became the public version 1.0.0 of [GNU cfengine](https://www.gnu.org/software/cfengine/).
    The restylised naming CFEngine was only adopted around 2009 for CFEngine 3.0 when
    the company formed.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我在大学内部发布了当时称为cfengine 1.0的版本，并在1993年春季发布了用于CERN的[cfengine 2.0](http://markburgess.org/papers/cfengine_history.pdf)，并在那里向CERN
    unix小组做了一个演讲。我还发表了几篇关于它的论文，并希望它可能对他人有用，但并没有真正的期望。我不知道它会有多快地找到归属。此时，理查德·斯托曼的[自由软件基金会](https://en.wikipedia.org/wiki/Free_Software_Foundation)已经启动了GNU自由软件项目。我认为公开代码并从他人那里学习是个好主意。我将代码发布为cfengine
    2.x，并且这个项目成为了[GNU cfengine](https://www.gnu.org/software/cfengine/)的公共版本1.0.0。CFEngine的重新命名CFEngine发生在2009年的CFEngine
    3.0时，当时公司成立。
- en: Security was beginning to be a hot topic, with recent memories of the [Internet
    Worm](https://www.gnu.org/software/cfengine/) still burned into people’s minds.
    I realised that the only way to realistically make a system of distributed agents
    secure was to build security into the design itself. CFEngine was designed to
    *never* accept commands or instructions from other sources than its local policy.
    Some found the idea of not being allowed to do whatever they wanted infuriating.
    Others saw the wisdom of having safe limits.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 安全问题开始成为一个热门话题，人们的记忆中还新鲜着[互联网蠕虫](https://www.gnu.org/software/cfengine/)的记忆。我意识到实现一个分布式代理系统真正安全的唯一途径是在设计本身中构建安全性。CFEngine被设计为*绝不*接受来自其它来源的命令或指令，只接受本地策略。一些人对不能随心所欲感到愤怒，而另一些人则看到了设定安全限制的智慧。
- en: As far as I know, no CFEngine installation has ever been compromised or compromisable.
    Like all software, it had occasional buffer overflow problems (ironically these
    were usually in OpenSSL encryption which was the presumed centre of security),
    but they couldn’t be exploited because of the way everything was isolated. [Richard
    Stallman](https://en.wikipedia.org/wiki/Richard_Stallman) encouraged me to make
    powerful features harder to invoke to prevent accidents. These principles made
    sense to me, and although we parted ways later over politics, I learned lessons
    from his experience.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 据我所知，从未有任何CFEngine安装被攻破或者说能被攻破。像所有软件一样，它偶尔会出现缓冲区溢出问题（具有讽刺意味的是，这些问题通常出现在预计的安全中心OpenSSL加密中），但由于一切都被隔离的方式，它们无法被利用。[理查德·斯托曼](https://en.wikipedia.org/wiki/Richard_Stallman)鼓励我使强大的功能更难以调用，以防止意外发生。这些原则对我来说是有意义的，尽管后来因政治分歧我们分道扬镳，但我从他的经验中吸取了教训。
- en: USENIX LISA at the Town & Country Hotel, San Diego
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在圣地亚哥的Town & Country Hotel举办的USENIX LISA大会。
- en: By 1997, I went to [USENIX](https://en.wikipedia.org/wiki/USENIX) Lisa conference
    to give a talk about CFEngine’s stability mechanisms to a thousand or more attendees.
    Afterwards, I gave an informal Birds of a Feather talk about the software and
    was overwhelmed when hundreds of people came to the small room to hear about it.
    People were sitting on the floor around my feet, and I was fixed to a few square
    feet to stand. The software was now in use on a scale I had not expected, yet
    lots of things were missing from my original vision of a system of smart autonomous
    agents. I wrote GNU cfengine 2 after giving a follow up talk about CFEngine and
    a vision of artificial immune systems in 1998\. This included machine learning
    of behavioural patterns, with the capability to defend itself against Denial Of
    Service attacks. In the audience was a member of the University of New Mexico
    who introduced me to the work of [Stephanie Forrest](https://en.wikipedia.org/wiki/Stephanie_Forrest);
    our groups codeveloped different concepts of artificial immune systems.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 1997年，我参加了[USENIX](https://en.wikipedia.org/wiki/USENIX) Lisa大会，向一千多名与会者演讲CFEngine的稳定性机制。之后，我在小房间举行了一场关于这款软件的非正式“鸟羽会谈”，数百人蜂拥而至听我讲解。人们围坐在我脚下的地板上，我则固定在几平方英尺的空间里讲述。这款软件的使用规模已超出我的预期，但我的原始愿景中仍有许多遗漏之处，即智能自治代理系统。在1998年，我在关于CFEngine和人工免疫系统愿景的后续演讲后，编写了GNU
    cfengine 2。这包括行为模式的机器学习，具备对抗服务拒绝攻击的能力。在观众中，有一位来自新墨西哥大学的成员向我介绍了[斯蒂芬妮·福雷斯特](https://en.wikipedia.org/wiki/Stephanie_Forrest)的工作；我们的团队共同发展了人工免疫系统的不同概念。
- en: 'I tried both symbolic AI and Bayesian machine learning methods in order to
    make CFEngine as self-contained as possible. I was highly suspicious of anything
    that smelled of complex logical reasoning. I knew from physics that stability
    was the prime concern for any automatic system, and logical reasoning is highly
    fragile. I wanted to make sure that nothing could prevent CFEngine from self-healing
    a host that got into trouble. I built CFEngine around “[fixed point](https://en.wikipedia.org/wiki/Fixed_point_(mathematics))”
    thinking: every desired state of a system should be an achievable fixed point,
    else it should be discouraged.'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我尝试过符号人工智能和贝叶斯机器学习方法，以使CFEngine尽可能自包含。我对任何复杂逻辑推理的东西都非常怀疑。我从物理学中知道，稳定性是任何自动系统的首要关注点，而逻辑推理则非常脆弱。我希望确保没有任何事情能阻止CFEngine对陷入麻烦的主机进行自我修复。我围绕“[不动点](https://en.wikipedia.org/wiki/Fixed_point_(mathematics))”思维构建了CFEngine：系统的每个期望状态都应是可达的不动点，否则应予以抑制。
- en: 'Though it took many years to understand all the details, my choices were surprisingly
    fortuitous. Symbolic methods were certain and powerful, and while machine learning
    had limited value they allowed the first continuous monitoring studies of computers
    to accomplish anomaly detection. Machine Learning quickly becomes expensive and
    suffers from a basic flaw: what happens *normally* isn’t necessarily what you
    *want* your system to do in the future. Autopilots are good at flying in a straight
    line, or landing at certain airports, but they can’t tell you what to do if there’s
    bad weather or an engine falls off. As I tried to understand the issues in depth,
    I stumbled into Promise Theory and operator algebras (sometimes called semi-lattices
    etc). Many of these methods were forgotten and rediscovered by a new generation
    of researchers (often at Google) in the 21st century.'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管花了多年时间才理解所有细节，但我的选择出奇的幸运。符号方法是确定和强大的，而机器学习虽然价值有限，但它们使得计算机的首次持续监控研究得以实现异常检测。机器学习很快变得昂贵并且存在一个基本缺陷：*通常*发生的事情未必是您希望您的系统将来要做的。自动驾驶系统擅长直线飞行或在特定机场降落，但如果天气恶劣或发动机掉落，它们无法告诉您该怎么做。在我试图深入理解问题时，我偶然发现了承诺理论和算子代数（有时被称为半格等）。许多这些方法被新一代研究人员（经常在谷歌工作）在21世纪重新发现。
- en: CFEngine’s strict model of autonomous agents meant that there could be no client
    server protocols that pushed data. What we now call [publish subscribe](https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern)
    methods were the basis of all communication as a matter of policy. A version of
    [Voluntary Cooperation based RPC](https://www.usenix.org/legacy/events/lisa05/tech/burgess.html)
    was designed based on pub-sub messaging. The effect was to create something like
    the [Name Data Networking](https://en.wikipedia.org/wiki/Named_data_networking)
    (NDN) concept for Internet Services. Hosts would make a kind of collect-call home
    to check for messages without committing to anything or exposing themselves to
    vulnerability.
  id: totrans-split-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CFEngine 的严格的自主代理模型意味着不能有推送数据的客户端服务器协议。现在我们所称的[发布订阅](https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern)方法作为一项政策基础上的所有通信方法。基于发布-订阅消息传递设计了一个版本的[自愿合作基于
    RPC](https://www.usenix.org/legacy/events/lisa05/tech/burgess.html)。其效果类似于为互联网服务创建一种类似于[命名数据网络](https://en.wikipedia.org/wiki/Named_data_networking)（NDN）概念。主机们会进行某种形式的“请人来电”以检查消息，而不承诺任何事情或暴露自己于漏洞之中。
- en: The ideas were there for a universal platform, but everything was on far too
    slow a timescale for modern applications. I used CFEngine as a generic distributed
    platform and we'd discussed its use for wide ranging network methods with [Claudio
    Bartolini](https://scholar.google.com/citations?user=j6eORnoAAAAJ&hl=en) and [John
    Wilkes](https://www.usenix.org/conference/lisa13/speaker-or-organizer/john-wilkes-google)
    at Hewlett Packard as part of a European academic Network of Excellence called
    EMANICS. I knew that some of those ideas belonged elsewhere, but never quite had
    time to rebuild them in a modernized architecture. The way cloud was eventually
    implemented initially violated many of the precepts I’d studied and approved and
    it would take another 10 years to find their way back to basic safety principles
    with rediscoveries like [Kubernetes.](https://en.wikipedia.org/wiki/Kubernetes)
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些想法为一个通用平台奠定了基础，但对于现代应用来说一切发展得太慢了。我将 CFEngine 用作通用分布式平台，并与惠普的[克劳迪奥·巴尔托利尼](https://scholar.google.com/citations?user=j6eORnoAAAAJ&hl=en)和[约翰·威尔克斯](https://www.usenix.org/conference/lisa13/speaker-or-organizer/john-wilkes-google)讨论过其在欧洲学术卓越网络项目
    EMANICS 中的广泛网络方法应用。我知道这些想法中有些应该放到其他地方，但从未完全有时间在现代化架构中重建它们。最终实施的云计算方式最初违反了我研究和认可的许多原则，需要另外10年才能回归基本的安全原则，例如通过重新发现[Kubernetes](https://en.wikipedia.org/wiki/Kubernetes)来实现。
- en: I tried some silly ideas too, like using *entropy* as a way of measuring configuration
    (as most academics do at some point), but eliminated these as systematically as
    I could by research. I wrote a research text Analytic Network and System Administration
    (J. Wiley & Sons, 2002) and started a Master’s degree at the university and was
    awarded the first professorship in the area of system administration.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我也尝试了一些愚蠢的想法，比如将*熵*作为衡量配置的方法（正如大多数学者在某些时候所做的），但通过系统化的研究我尽可能将它们消除。我撰写了一本研究文本《分析网络与系统管理》（J.
    Wiley & Sons, 2002），并开始攻读硕士学位，并且被授予系统管理领域的第一个教授职位。
- en: By the mid 2000s, GNU cfengine 2 was ubiquitous. You could turn over any stone
    in IT datacenters and you’d find CFEngine working underneath, like a secret colony
    of ants. Users were usually only using a tiny fraction of the capabilities in
    most cases, and many were unaware of the careful thinking that had gone into the
    design for robustness.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 到了2000年代中期，GNU cfengine 2 已经无处不在。你可以翻开任何 IT 数据中心的石头，你会发现 CFEngine 就像一个秘密的蚂蚁殖民地在下面工作。在大多数情况下，用户通常只使用其能力的一小部分，并且许多人并不知道在设计上进行了多少精心思考以确保其稳健性。
- en: Around this time, Luke Kanies, once a CFEngine user, started a company of his
    own with a tool called Puppet. We had met at LISA 2001, where I was conference
    chair. He was wandering around alone looking lost when we were setting up a dinner
    for the organisers, so I asked him to join us at the "high table". One time when
    he was out of work and Stanford University asked me to consult for them, I passed
    the job to him and he migrated them to Puppet, starting his company Reductive
    Labs. Luke was outspoken and was good at rallying the online community in a way
    that I wasn’t. I’m a pathologically antisocial introvert, with too many conflicting
    interests. I had a day job as a Professor of computer science, and I was exhausted
    from maintaining CFEngine basically alone. [I started a company in 2008](https://www.aftenposten.no/norge/i/P96nJ/it-mygg-sikter-mot-stjernene)
    only after seeing what Puppet was doing, partly to escape what I felt had become
    a dead end job at the university, and partly to be able to hand over the CFEngine
    support burden to someone else. Just before CFEngine incorporated, Chef software
    was also started by Adam Jacob (a former Puppet user) and Jesse Robbins.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在这个时候，曾经是CFEngine用户的Luke Kanies开始了自己的公司，使用了一个叫做Puppet的工具。我们在2001年的LISA会议上见过面，那时我是会议主席。当我们为组织者准备晚宴时，他一个人在那里徘徊，看起来很迷茫，于是我邀请他加入我们的“高桌”宴会。有一次他失业，斯坦福大学要求我为他们提供建议时，我把这份工作转给了他，他使用Puppet将他们迁移，开始了他的公司Reductive
    Labs。Luke很直言不讳，并且善于在网上社区中发动群众，这是我所不擅长的。我是一个病态的反社交内向者，有太多矛盾的兴趣。我当时是计算机科学教授，维护CFEngine基本上是一个人的活，非常疲惫。[2008年我创办了一家公司](https://www.aftenposten.no/norge/i/P96nJ/it-mygg-sikter-mot-stjernene)，部分原因是看到Puppet的发展，逃避了我在大学的死胡同工作，另一部分原因是能够把CFEngine的支持负担交给别人。就在CFEngine公司成立之前，Adam
    Jacob（一位前Puppet用户）和Jesse Robbins也开始了Chef软件。
- en: Many users went over to using Puppet and Chef instead of CFEngine, as it was
    the latest thing. They had venture backing much earlier and poured money into
    community building. There was a bizarre hostility amongst some of them. I started
    to receive abuse online from Puppet users. It was a first taste of what the software
    communities can be like. It revealed a tribalism that made me pull back from engaging
    in community too much. Over the years I’ve received about 30% hate mail from Puppet
    and Chef users. Sometimes it was because I was unable to be one of the tribe.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 许多用户转向使用Puppet和Chef而非CFEngine，因为它们是最新的工具。它们早期获得了风险投资，并投入大量资金进行社区建设。其中一些用户之间存在着奇怪的敌意。我开始在网上收到Puppet用户的辱骂。这是我第一次尝试软件社区的情况。它揭示了一种部落主义，让我不太愿意过多参与社区。多年来，我收到了大约30%来自Puppet和Chef用户的恶意邮件。有时是因为我无法融入这个部落之一。
- en: Commercial interests had the effect of making the three tools competitors. Neither
    of the newer tools were as powerful as CFEngine in features or efficiency, but
    they were more popular for their approach to usability, partly because the web
    generation was encouraged to develop the Ruby code they were based on. I embarked
    on rewriting CFEngine 3 to solve some of the deep seated limitations in the code
    base. I experimented with C++ for six months and eventually abandoned it in exasperation
    and went back to C. I rewrote the entire code base in 3 months with most limitations
    removed.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 商业利益导致这三种工具竞争激烈。新出现的工具在功能或效率上都不如CFEngine强大，但它们在可用性上更受欢迎，部分原因是基于Ruby代码的开发受到Web一代的鼓励。我着手重写CFEngine
    3，以解决代码基础中存在的一些深层限制。我尝试使用C++进行了六个月的实验，最终由于沮丧而放弃，回到了C语言。我在三个月内重新编写了整个代码基础，大多数限制都得到了解决。
- en: 'By the time CFEngine 3 was ready, there was a new generation of IT people who
    had grown up in web commerce and didn’t have the deep system knowledge that system
    administrators had had before. I confess that, at the time, I didn’t think we
    could sell configuration management: after all it was a solved problem and already
    free and open–but that was only my inexperience in business talking. I watched
    as the competitive market analysts dragged the cutting edge research back to the
    lowliest commodity basics.'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当CFEngine 3准备就绪时，已经有一批在Web商务中成长起来的新一代IT人员，他们不具备系统管理员以前所具有的深入系统知识。当时，我承认我并不认为我们能够销售配置管理：毕竟这已经是一个解决的问题，而且已经是自由和开放的——但那只是我商业上的不成熟观念在作祟。我看到竞争市场分析师把前沿研究拉回到了最低级的商品基础上。
- en: CFEngine Nova's knowledge map and machine learning graphs
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: CFEngine Nova的知识图和机器学习图表
- en: My idea for the company had been to employ knowledge management methods, including
    semantic networks and machine learning, to understand systems. After all, configuring
    systems is fairly easy, but understanding the monster you’ve created is hard.
    I put a lot of effort into this, collaborating with my friend [Alva Couch](https://engineering.tufts.edu/cs/people/faculty/alva-couch)
    from Tufts university. We didn’t believe the approaches to semantic web (and its
    RDF language) were correct, so we came up with a [simpler alternative](https://www.researchgate.net/publication/224146282_Human-understandable_inference_of_causal_relationships)
    to support causal inference. It appeared in the first CFEngine commercial product,
    called CFEngine Nova. By this time, I’d already developed [Promise Theory](https://en.wikipedia.org/wiki/Promise_theory)
    somewhat and the promise model was used strictly in CFEngine 3 to ensure the reliability,
    safety, and above all *certainty* of every aspect of operations.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我为公司的想法是采用知识管理方法，包括语义网络和机器学习，以理解系统。毕竟，配置系统相对容易，但理解你所创造的“怪物”却很难。我在这方面付出了很多努力，与我的朋友[Tufts大学的Alva
    Couch](https://engineering.tufts.edu/cs/people/faculty/alva-couch)合作。我们认为语义网（及其RDF语言）的方法不正确，因此我们提出了[更简单的替代方案](https://www.researchgate.net/publication/224146282_Human-understandable_inference_of_causal_relationships)来支持因果推理。它首次出现在第一个CFEngine商业产品中，名为CFEngine
    Nova。那时，我已经在某种程度上发展了[Promise Theory](https://en.wikipedia.org/wiki/Promise_theory)，并且承诺模型严格应用于CFEngine
    3，以确保每个操作的可靠性、安全性，尤其是*确定性*。
- en: Our grand plan for CFEngine's commerical product was to start with *CFEngine
    Nova* (for starburst networks), then join these into clusters with *CFEngine Constellation*,
    and finally crown the whole with *CFEngine Galaxy*! However, after the company
    took on venture funding, the smart heads of the newly imposed management removed
    the knowledge related and AI related parts of CFEngine — partly because the developer
    team wasn’t ready to understand them, and partly due to lack of a current market
    for them. Today, 15 years later, those ideas are coming of age.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们CFEngine商业产品的宏伟计划是从*CFEngine Nova*（星星网络）开始，然后将它们组成*CFEngine Constellation*集群，最后用*CFEngine
    Galaxy*来完善整个系统！然而，在公司接受风险投资后，新任管理层的聪明头脑去掉了与CFEngine相关的知识和人工智能部分 — 部分是因为开发团队尚未准备好理解它们，部分是因为当前市场缺乏需求。今天，15年后，这些理念正在逐步成熟。
- en: After a rough ride with internal struggles and venture capital skullduggery.
    I eventually decided to move on from the company I’d started in 2014\. I continued
    to develop some of the machine learning and semantic features, and developed [Semantic
    Spacetime](https://en.wikipedia.org/wiki/Semantic_spacetime) as the Promise Theory
    formalisation of [virtual process](https://www.researchgate.net/publication/351492269_Motion_of_the_Third_Kind_I_Notes_on_the_causal_structure_of_virtual_processes_for_privileged_observers)
    representations. It took another ten years to make my version of the AI features
    work as successfully as I’d wanted, working in between other jobs when I could
    and developing a small graph database to support it. Then, working with [CAIDA](https://www.caida.org/)
    and a more powerful independent graph database [ArangoDB](https://en.wikipedia.org/wiki/ArangoDB),
    I [mapped the whole Internet in Semantic Spacetime](https://medium.com/@mark-burgess-oslo-mb/semantic-spacetime-and-data-analytics-aabbb811cb26).
    Today we are in a new age of AI and everything old is new again.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在经历了内部斗争和风险投资的艰难旅程后，我最终决定离开我在2014年创办的公司。我继续开发一些机器学习和语义特性，并将[Semantic Spacetime](https://en.wikipedia.org/wiki/Semantic_spacetime)作为[虚拟过程的因果结构](https://www.researchgate.net/publication/351492269_Motion_of_the_Third_Kind_I_Notes_on_the_causal_structure_of_virtual_processes_for_privileged_observers)的Promise
    Theory正式化表示。在我希望的情况下，再过十年，我的AI功能版本开始成功运行，我尽力在其他工作间隙中开发了一个小型图形数据库来支持它。然后，与[CAIDA](https://www.caida.org/)和更强大的独立图形数据库[ArangoDB](https://en.wikipedia.org/wiki/ArangoDB)合作，我[在Semantic
    Spacetime中绘制了整个互联网的图像](https://medium.com/@mark-burgess-oslo-mb/semantic-spacetime-and-data-analytics-aabbb811cb26)。今天，我们正处于人工智能的新时代，一切旧事物都再次焕发生机。
- en: CFEngine's trophy for wining the induction into JPMC's Hall of Innovation
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: CFEngine赢得了进入JPMC创新名人堂的奖杯。
- en: The commercial environment brought about by the arrival of Puppet and Chef pulled
    the narrative away from my own technological aspirations, back to basics more
    aligned with a web generation who had mainly known Linux and the LAMP stack. Only
    a few advanced customers could really see the possibilities of CFEngine’s unbridled
    capabilities–J.P. Morgan Chase inducted CFEngine into their prestigious Hall of
    Innovation just as I had decided to leave.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Puppet和Chef的到来带来的商业环境，将叙事重心从我自己的技术抱负转移到了更符合主要以Linux和LAMP堆栈为主的Web一代基础的基本事务上。只有少数高级客户真正能看到CFEngine无限潜力的可能性——正如我决定离开时，J.P.摩根大通将CFEngine纳入他们著名的创新殿堂。
- en: I never called the knowledge related features of CFENgine “AI”, but in my mind
    there was always that vision of the starship Enterprise flying itself and healing
    itself like an artificial organism. The tools are more manual than before, and
    more developer centric than self-governing. Some of the design principles of CFEngine
    were carried over into Kubernetes. Open Policy Agent does basically what CFEngine’s
    classification system did automatically, but I like to think that CFEngine still
    holds its own in this space.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我从未将CFEngine的知识相关特性称为“AI”，但在我心中，始终有着星舰企业号自动飞行和自我愈合的愿景。这些工具比以往更加手动化，更加偏向于开发者而非自我治理。CFEngine的一些设计原则被引入了Kubernetes。Open
    Policy Agent基本上是CFEngine的分类系统自动化执行，但我愿意认为CFEngine在这个领域仍然占据一席之地。
- en: '20 years ago I recall reading an article where the authors wrote: the good
    news and the bad about speech recognition is that we have a long way to go to
    get to the level of understanding we see on Star Trek. The good news is that,
    at least we have until the 23rd century to figure it out. In just 20 years, we’ve
    come a long way in IT hardware, but we haven’t come far at all when it comes to
    system automation. In some ways, we’ve gone backwards. Each generation has new
    tools to build because the infrastructure changes, but each also has to relearn
    the lessons of the past for themselves. We are not good at *principles* in IT.'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 20 年前，我记得读过一篇文章，作者写道：关于语音识别的利弊，好消息是我们在达到《星际迷航》中理解水平之前还有很长的路要走。坏消息是，至少我们有到23世纪来弄清楚它。在过去的20年中，我们在IT硬件方面取得了长足的进步，但在系统自动化方面并没有取得多大进展。在某些方面，我们甚至出现了倒退。每一代都有新工具需要构建，因为基础设施在变化，但每一代也都必须重新学习过去的经验教训。我们在IT领域并不擅长*原则*。
- en: Remarkably, both GNU cfengine 2 and CFEngine 3 are *still* out there in the
    wild running some of the largest corporations–out of sight, out of mind, keeping
    the swarms of systems flying in a straight line. My friend Nick Anderson, who
    still works for the company and has been a stalwart CFEngine supporter for as
    long as I can remember, tells me that the largest single deployment is currently
    around 3 million nodes. Few companies are happy to reveal what they do publicly,
    but it gives me some comfort to know that the years of effort were worth it.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，GNU cfengine 2和CFEngine 3依然在野外运行，管理着一些最大的企业——虽然看不见，但它们确保着系统群在一条直线上飞行。我的朋友尼克·安德森，他仍然在公司工作，并且一直是CFEngine的坚定支持者，告诉我目前最大的单一部署约为300万个节点。很少有公司愿意公开宣布他们做了什么，但知道这些年的努力是值得的，让我感到一些安慰。
- en: Happy birthday, CFEngine. Middle age is coming for you.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 生日快乐，CFEngine。中年已经悄然而至。
