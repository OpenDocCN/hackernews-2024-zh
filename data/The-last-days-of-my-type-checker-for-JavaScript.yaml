- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:28:39'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:28:39'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The last days of my type checker for JavaScript
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我的JavaScript类型检查器的最后几天
- en: 来源：[https://jsmonk.github.io/2024-01-29-last-days-of-hegel/](https://jsmonk.github.io/2024-01-29-last-days-of-hegel/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://jsmonk.github.io/2024-01-29-last-days-of-hegel/](https://jsmonk.github.io/2024-01-29-last-days-of-hegel/)
- en: '**TL;DR** Last year, I started to work on the 2.0 version of [my static type
    checker for JavaScript](https://hegel.js.org/) written in [Rust](https://www.rust-lang.org/),
    but, unfortunately, I see that nowadays, [TypeScript](https://www.typescriptlang.org/)
    won. The idea of strict type-checking for JavaScript is less popular than in 2019\.
    Additionally, another way to bring stricter types into the web exists. So, I lost
    my belief that there could be an audience for such a tool and decided to close
    the project.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**TL;DR** 去年，我开始开发使用[Rust](https://www.rust-lang.org/)编写的[JavaScript静态类型检查器的2.0版本](https://hegel.js.org/)，但不幸的是，如今，[TypeScript](https://www.typescriptlang.org/)获胜。严格类型检查JavaScript的想法不如2019年流行。此外，网上还有一种将更严格的类型引入web的方法。因此，我失去了对这样一个工具有观众的信心，并决定关闭项目。'
- en: To make the story short
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简而言之
- en: At the beginning of 2019, I worked in a small outsourcing company called [WookieeLabs](https://github.com/wookieelabs).
    In most of the projects, we preferred to use [Flow](https://flow.org/) over the
    [TypeScript](https://www.typescriptlang.org/). There were a lot of benefits such
    as [nominal classes](https://flow.org/en/docs/lang/nominal-structural/#toc-classes-are-nominally-typed),
    [type variances](https://flow.org/en/docs/lang/variance), [opaque types](https://flow.org/en/docs/types/opaque-types/),
    [smooth integration with React](https://flow.org/en/docs/react/). But the main
    reason was that Flow in 2019 was just JavaScript with types.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2019年初，我在一个名为[WookieeLabs](https://github.com/wookieelabs)的小型外包公司工作。在大多数项目中，我们更喜欢使用[Flow](https://flow.org/)而不是[TypeScript](https://www.typescriptlang.org/)。有许多好处，比如[nominal
    classes](https://flow.org/en/docs/lang/nominal-structural/#toc-classes-are-nominally-typed)，[type
    variances](https://flow.org/en/docs/lang/variance)，[opaque types](https://flow.org/en/docs/types/opaque-types/)，[与React的平滑集成](https://flow.org/en/docs/react/)。但主要原因是，2019年的Flow只是带有类型的JavaScript。
- en: 'But the way Flow type inference was working in 2019 was not ideal:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但是2019年Flow类型推断的工作方式并不理想：
- en: '[PRE0]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can play with this example [here](https://flow.org/try/#1N4Igxg9gdgZglgcxALmAXwDTggEwKYrZQDOALgARw7kC85AHrQHwMDcAOlJCRQIa2UcACgBMASg5doZcgCMBVIexBkATnCgJlEkFgBueVcTjRCegAwA6AIwAOAKw2QaIA)
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[此处](https://flow.org/try/#1N4Igxg9gdgZglgcxALmAXwDTggEwKYrZQDOALgARw7kC85AHrQHwMDcAOlJCRQIa2UcACgBMASg5doZcgCMBVIexBkATnCgJlEkFgBueVcTjRCegAwA6AIwAOAKw2QaIA)尝试此示例
- en: 'So, Flow analyzed the usage of the function and, based on it, inferred the
    type of a function. In the example above, we provided to the `id` function a number
    and a string, so, based on the usage, the tool infered the type of the `id` as
    `(x: number | string) => number | string`.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: '因此，Flow分析了函数的使用情况，并基于此推断了函数的类型。在上面的示例中，我们向`id`函数提供了一个数字和一个字符串，所以根据使用情况，工具推断出`id`的类型为`(x:
    number | string) => number | string`。'
- en: However, the Flow team did a significant job of fixing such behavior by requiring
    annotations in places where the tool knows it will not have a local typing context.
    You can read about it [here](https://medium.com/flow-type/local-type-inference-for-flow-aaa65d071347).
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Flow团队通过在工具知道不会有本地类型上下文的地方要求注释来显著改进了此类行为。您可以在[这里](https://medium.com/flow-type/local-type-inference-for-flow-aaa65d071347)阅读相关信息。
- en: At the same time, there was hype about the new “language” (syntax for [OCaml](https://ocaml.org/))
    called [ReasonML](https://reasonml.github.io/) (today there is also an alternative
    project called [ReScript](https://rescript-lang.org/)).
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，有关新的“语言”（[OCaml](https://ocaml.org/)的语法）称为[ReasonML](https://reasonml.github.io/)（今天也有一个名为[ReScript](https://rescript-lang.org/)的替代项目）也被大肆炒作。
- en: And I was wondering, what if we take the power of the [Hindley-Milner type inference](https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system),
    as strict as possible type system for JavaScript and the simple Flow like types
    syntax and combine it inside a single tool. So, I created [Hegel](https://hegel.js.org/)
    as my university bachelor project and started to talk about it at some conferences.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我在想，如果我们把[Hindley-Milner类型推断](https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system)的强大和简单的Flow类型语法结合起来，会发生什么。因此，我作为大学学士项目创建了[Hegel](https://hegel.js.org/)并开始在一些会议上讨论它。
- en: You can check the main differences in comparison with TypeScript [here](https://hegel.js.org/docs#benefits-and-disadvantages-over-typescript)
    and with Flow [here](https://hegel.js.org/docs#benefits-and-disadvantages-over-flowjs)
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[这里](https://hegel.js.org/docs#benefits-and-disadvantages-over-typescript)和[这里](https://hegel.js.org/docs#benefits-and-disadvantages-over-flowjs)查看与
    TypeScript 和 Flow 的主要区别。
- en: 'But my favorite example that describes what the tool provides is [this](https://hegel.js.org/try#GYVwdgxgLglg9mABAEwKYGdUCcYEMA2MAXqgKqZYAU6UOYA5jMDKsudgFLoICUiA3gChEiCAhqIAtrgCeAIzIVEAXkQcAygHkAcgDoADriyZqtGAyYs2FLrwDcwxE0SVHIqDP2o4wKbIXsWCrKqgBEcHIAVqjQoYgAZPFufvKK2IgAhCGIYCD4+AlJIiKhYLiSqHHmKQFKickeXj41aVi6ZRXBYTR09KGOfELFiFioUCBYSNKpgQ4iAL6OUAAWWHAA7jmomwAqnqgAolhrVKEACmsAbjBoyIgUeIQkdyBKMOhOYJcENxmhPA5FoJaDIBI4xGAJMA4HAVCgMNhHsRWpRQgAWABM-0BolwUAgyxcqEGgkEiyAA):'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我最喜欢的一个例子是描述这个工具提供的功能是[这个](https://hegel.js.org/try#GYVwdgxgLglg9mABAEwKYGdUCcYEMA2MAXqgKqZYAU6UOYA5jMDKsudgFLoICUiA3gChEiCAhqIAtrgCeAIzIVEAXkQcAygHkAcgDoADriyZqtGAyYs2FLrwDcwxE0SVHIqDP2o4wKbIXsWCrKqgBEcHIAVqjQoYgAZPFufvKK2IgAhCGIYCD4+AlJIiKhYLiSqHHmKQFKickeXj41aVi6ZRXBYTR09KGOfELFiFioUCBYSNKpgQ4iAL6OUAAWWHAA7jmomwAqnqgAolhrVKEACmsAbjBoyIgUeIQkdyBKMOhOYJcENxmhPA5FoJaDIBI4xGAJMA4HAVCgMNhHsRWpRQgAWABM-0BolwUAgyxcqEGgkEiyAA)。
- en: '[PRE1]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And there were difficulties
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有一些困难。
- en: Because most of the time I was the only contributor in the core modules, working
    on a full-time job and continuing study as a master didn’t give me enough time
    to contribute more, so there were (and still) a lot of issues and bugs, that should
    be fixed, so the development took a long time.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因为大部分时间我是核心模块的唯一贡献者，全职工作并继续攻读硕士学位并没有给我足够的时间去做更多的贡献，所以问题和 bug 非常多（至今如此），需要修复，因此开发时间很长。
- en: Also, speaking at local conferences didn’t help a lot in finding a lot of new
    contributors.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，参加本地会议并没有帮助我找到很多新的贡献者。
- en: I want to thank everyone who supported me with the project, proposed exciting
    ideas, and helped me prepare different examples. Some people also helped me fix
    grammar mistakes in the documentation, review all the sections, and set up the
    CI/CD. You all are unbelievable.
  id: totrans-split-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我要感谢所有支持过我的人，提出了激动人心的想法，并帮助我准备了不同的示例。一些人还帮助我修正了文档中的语法错误，审查了所有的章节，并设置了 CI/CD。你们都是不可思议的。
- en: At some point (around March 2021), I struggled with all the COVID-19 restrictions
    and the rumors about the upcoming war between Ukraine and Russia. So, my wife
    and I relocated to the Netherlands two months before the war started.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时刻（大约在2021年3月左右），我因为所有的COVID-19限制和关于乌克兰与俄罗斯即将发生战争的谣言而感到困扰。因此，我和妻子在战争开始前两个月搬到了荷兰。
- en: I also want to say a big thank you to [JetBrains](https://www.jetbrains.com/).
    You not only gave me the possibility to work on such exciting projects but literally
    saved my and my wife’s lives.
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我还要向[JetBrains](https://www.jetbrains.com/)表示衷心的感谢。你们不仅让我有机会参与如此激动人心的项目，而且真正拯救了我和我妻子的生命。
- en: After a while, I started to rework the core system differently to support an
    incremental compilation (to improve analysis speed) and an intermediate representation
    (to support multiple syntaxes, including TypeScript syntax; the tool had previously
    worked directly with the AST).
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 过了一段时间，我开始重新设计核心系统，以支持增量编译（以提高分析速度）和中间表示（以支持包括 TypeScript 语法在内的多种语法；此前该工具直接使用
    AST 进行工作）。
- en: But during that time, I felt like I was trying to overtake a Ferrari, and the
    community interest in such a project was already insignificant.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但在那段时间里，我感觉自己像是在试图赶超一辆法拉利，而社区对这样一个项目的兴趣已经微乎其微。
- en: Reflection on the project
  id: totrans-split-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对项目的反思。
- en: For today, I have only results for the [State of JavaScript 2022](https://2022.stateofjs.com/en-US/),
    and as soon as the results of [State of JavaScript 2023](https://stateofjs.com/en-US)
    become available, I will update the numbers.
  id: totrans-split-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 到今天为止，我只有[State of JavaScript 2022](https://2022.stateofjs.com/en-US/)的结果，一旦[State
    of JavaScript 2023](https://stateofjs.com/en-US)的结果出来，我会更新数据。
- en: 'The following things made me lose the belief that I should continue my work:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事情让我失去了继续工作的信心：
- en: The developers of TypeScript are doing an excellent language and working a lot
    on its improvement, so it is the most popular alternative for JavaScript nowadays
    (98.9% [question](https://2022.stateofjs.com/en-US/other-tools#javascript_flavors)
    respondents use TypeScript, the nearest competitor is Elm with the result 2.3%)
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript 的开发者们正在打造一门优秀的语言，并在不断努力改进，因此它如今是 JavaScript 最受欢迎的替代品（98.9%的[问题](https://2022.stateofjs.com/en-US/other-tools#javascript_flavors)回答者使用
    TypeScript，最接近的竞争对手是 Elm，其结果为2.3%）。
- en: JavaScript as a technology and community is already mature, so the new tools,
    frameworks, and libraries take a small part of the market. [Here](https://2022.stateofjs.com/en-US/other-tools#runtimes)
    you can take a look on the usage of [Deno](https://deno.com/) (one of the Deno
    prototypes [was presented](https://www.youtube.com/watch?v=M3BM9TB-8yA) in 2019)
    comparing to the [Node.js](https://nodejs.org/en), or [the comparison of frameworks
    usage](https://2022.stateofjs.com/en-US/libraries/front-end-frameworks#front_end_frameworks_experience_linechart)
    where we can see that the new frameworks such as [Solid.js](https://www.solidjs.com/)
    or [qwik](https://qwik.builder.io/) take 6% and 2%
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript作为一项技术和社区已经非常成熟，因此新工具、框架和库只占据了市场的一小部分。[这里](https://2022.stateofjs.com/en-US/other-tools#runtimes)你可以看到[Deno](https://deno.com/)（2019年其中一个Deno原型的演示[已经呈现](https://www.youtube.com/watch?v=M3BM9TB-8yA)）与[Node.js](https://nodejs.org/en)的使用情况比较，或者[框架使用情况的比较](https://2022.stateofjs.com/en-US/libraries/front-end-frameworks#front_end_frameworks_experience_linechart)，在那里我们可以看到像[Solid.js](https://www.solidjs.com/)或[qwik](https://qwik.builder.io/)这样的新框架分别占有6%和2%的市场份额。
- en: Based on my communication with different developers, I realized that TypeScript
    changed how developers think about the types in JavaScript. In 2019, people thought
    of types as the rules restricting the language for developing safer software (fewer
    bugs or unexpected runtime errors). Still, today, people think more about describing
    **any** (even not so secure) software with types. All of these fancy [template
    literal types](https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html),
    [conditional types](https://www.typescriptlang.org/docs/handbook/2/conditional-types.html),
    an unchecked body of [assert functions](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions)
    and [type predicates](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates),
    and of course [any](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any),
    give people a fantastic tool to cover existed code with types but doesn’t force
    to re-design it to make it safer.
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于我与不同开发者的沟通，我意识到TypeScript改变了开发者对JavaScript中类型的看法。在2019年，人们认为类型是限制开发更安全软件（减少错误或意外运行时错误）的规则，但今天，人们更多地考虑使用类型来描述**任何**（甚至不那么安全的）软件。所有这些花哨的[模板文字类型](https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html)，[条件类型](https://www.typescriptlang.org/docs/handbook/2/conditional-types.html)，[断言函数的未经检查的主体](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions)和[类型断言](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates)，当然还有[任何](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any)，为人们提供了一个奇妙的工具，可以用类型覆盖现有的代码，但不强制重新设计它以使其更安全。
- en: I see other opportunities to increase the language diversity on the web (further
    in the article)
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我看到网页上增加语言多样性的其他机会（文章中进一步讨论）
- en: So, primarily based on those things, I decided to close the project [Hegel](https://hegel.js.org/).
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，基于这些原因，我决定关闭项目[Hegel](https://hegel.js.org/)。
- en: Other projects and other opportunities
  id: totrans-split-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他项目和其他机会
- en: Last year, I unexpectedly realized what a big and fantastic job was done on
    [wasm](https://webassembly.org/) as a technology. Proposals such as [GC proposal](https://github.com/WebAssembly/gc/blob/main/proposals/gc/Overview.md)
    and [Exception handling](https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/Exceptions.md)
    help to bring to the web more and more programming languages with stricter type
    system that are already familiar to people, that have already a mature ecosystem
    of build tools, libraries, frameworks, but also [Component Model](https://github.com/WebAssembly/component-model)
    proposes the solution to interop between of them, that means sharing parts of
    the extensive ecosystems between each other.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 去年，我意外地意识到作为一项技术的[wasm](https://webassembly.org/)已经完成了一项如此庞大而精彩的工作。像[GC proposal](https://github.com/WebAssembly/gc/blob/main/proposals/gc/Overview.md)和[Exception
    handling](https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/Exceptions.md)这样的提案帮助将更多具有严格类型系统的编程语言带到网络上，这些语言已经为人们所熟悉，并且拥有成熟的构建工具、库和框架生态系统，但也有[Component
    Model](https://github.com/WebAssembly/component-model)提出了解决方案来使它们之间可以互操作，这意味着可以在它们之间共享广泛的生态系统的部分。
- en: So, this is one of the reasons why I decided to join [Kotlin/Wasm](https://kotlinlang.org/docs/wasm-overview.html)
    team and focus most of the time on helping to bring the amazing [Kotlin](https://kotlinlang.org/)
    and its ecosystem into the web.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这也是我决定加入[Kotlin/Wasm](https://kotlinlang.org/docs/wasm-overview.html)团队，并大部分时间专注于帮助将令人惊叹的[Kotlin](https://kotlinlang.org/)及其生态系统引入网络的原因之一。
- en: Suppose you are still looking for the analyzing tool for your JavaScript project.
    In that case, you can bring your attention to a cool project called [Ezno](https://github.com/kaleidawave/ezno),
    which provides strict type checking and also (because it’s a full compiler) focuses
    on optimizing your code. [Ben](https://twitter.com/kaleidawave) is doing an incredible
    job.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你仍在寻找 JavaScript 项目的分析工具。那么，你可以关注一个很酷的项目，名为[Ezno](https://github.com/kaleidawave/ezno)，它提供严格的类型检查，并且（因为它是一个完整的编译器）专注于优化你的代码。[Ben](https://twitter.com/kaleidawave)正在做一份令人难以置信的工作。
