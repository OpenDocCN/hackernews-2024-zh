- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:56:53'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:56:53
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: GraphQL and the beads on a string - by Lucca Siaudzionis
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GraphQL 和串上的珠子 - 作者：Lucca Siaudzionis
- en: 来源：[https://blog.luccasiau.com/p/graphql-and-the-beads-on-a-string](https://blog.luccasiau.com/p/graphql-and-the-beads-on-a-string)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.luccasiau.com/p/graphql-and-the-beads-on-a-string](https://blog.luccasiau.com/p/graphql-and-the-beads-on-a-string)
- en: “Your database, backend and the user are all beads on a string.”
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “你的数据库、后端和用户都是串上的珠子。”
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Dax ([thdxr](https://twitter.com/thdxr))
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Dax（[thdxr](https://twitter.com/thdxr)）
- en: 'Basically:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上：
- en: 'But normally you’ll be hosting your backend very closely to your database,
    making this other piece of art a bit more accurate:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但通常您将把后端托管得非常靠近数据库，使这另一块艺术更准确一些：
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Loading a typical web page requires different pieces of information — for example,
    you may be loading the logged-in user’s profile on the corner, the main content
    in the center, and other little details around the page. In a typical REST API
    design, this will often translate to several separate requests, looking like:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 加载典型的网页需要不同的信息片段 —— 例如，您可能正在加载右上角的已登录用户个人资料，中间的主要内容以及页面周围的其他细节。在典型的 REST API
    设计中，这通常会转换为几个单独的请求，看起来像是：
- en: 'One of the main benefits of GraphQL is that easily enables the client to make
    a single request specifying all those pieces of data, and the backend stitches
    them together. The browser would make a single request asking for the user’s profile,
    the main content, and the rest — and the result looks way better:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 的主要好处之一是它可以轻松地使客户端发出单个请求，指定所有这些数据片段，后端将它们组合在一起。浏览器会发出一个请求，请求用户的个人资料、主要内容和其他内容
    —— 结果看起来更好：
- en: Which brings some simplicity to the client and potentially reduces load time,
    improving your users’ experience.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这为客户端带来了一些简单性，可能减少了加载时间，提高了用户体验。
- en: '* * *'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: While it’s true that, in the RESTful case, you can make those requests asynchronously,
    you would on the other hand add significant complexity to the client. That means
    dealing with independent request failures and all the dependencies between these
    separate calls.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在 RESTful 的情况下，您可以异步进行这些请求，但另一方面，这会给客户端增加显著的复杂性。这意味着处理独立请求失败以及这些单独调用之间的所有依赖关系。
- en: You could also define a single REST endpoint that contains all the information
    to load the page and mimic the GraphQL behavior. But this would just shift the
    burden of dealing with complexity from the client to the backend. And while that
    may be viable for simple applications, it would not be in more complex ones.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以定义一个单一的 REST 端点，其中包含加载页面所需的所有信息，并模仿 GraphQL 的行为。但这只会将处理复杂性的负担从客户端转移到后端。虽然这对于简单的应用可能是可行的，但对于更复杂的应用来说则不然。
- en: In contrast, GraphQL’s design fits like a glove for this case. There is no need
    to design solutions to reduce latency, as it was designed specifically to address
    such cases.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，GraphQL 的设计非常适合这种情况。无需设计解决方案来减少延迟，因为它是专门为解决这类情况而设计的。
- en: '* * *'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This is just one of the many reasons I appreciate GraphQL. Some other advantages
    are the very, very easy use of GraphQL subscriptions, and how it makes the API
    contract between frontend and backend explicitly define (some people don’t like
    this one though, but I’m a huge fan).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是我欣赏 GraphQL 的许多原因之一。其他一些优点包括 GraphQL 订阅的非常、非常容易使用，以及它如何明确定义前端和后端之间的 API 合同（尽管有些人不喜欢这一点，但我是一个铁杆粉丝）。
- en: Admittedly, GraphQL is *quite* different and feels weird at first. It may not
    seem worth spending the effort to “relearn” a new way to do core things. But one
    day I decided to just try it with Apollo and was surprised and how easy it was.
    So, if you ever feel a bit curious, just give it a shot.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 诚然，GraphQL *相当* 不同，一开始感觉很奇怪。也许觉得值得花费精力“重新学习”一种做核心事情的新方式并不值得。但有一天，我决定只是尝试一下 Apollo，惊讶于它是如此容易。所以，如果你有一点好奇，就试试吧。
- en: '[Share](https://blog.luccasiau.com/p/graphql-and-the-beads-on-a-string?utm_source=substack&utm_medium=email&utm_content=share&action=share)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[分享](https://blog.luccasiau.com/p/graphql-and-the-beads-on-a-string?utm_source=substack&utm_medium=email&utm_content=share&action=share)'
