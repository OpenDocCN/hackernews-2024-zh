- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:35:23'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:35:23'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Java is becoming more like Rust, and I am here for it! | Josh Austin
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 正变得越来越像 Rust，我对此感到兴奋！ | Josh Austin
- en: 来源：[https://joshaustin.tech/blog/java-is-becoming-rust/](https://joshaustin.tech/blog/java-is-becoming-rust/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://joshaustin.tech/blog/java-is-becoming-rust/](https://joshaustin.tech/blog/java-is-becoming-rust/)
- en: Introduction[#](#introduction)
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Introduction[#](#introduction)
- en: As programming enhancements and sophistications gain popularity, many programming
    languages follow suit. Java is no different.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 随着编程增强和复杂化的流行，许多编程语言也在效仿。Java 也不例外。
- en: 'Rust has gained developer love year-over-year despite problems within the community.
    And for good reason: Rust enables developers to avoid entire categories of problems
    thanks to the compiler. The compiler demands correctness to the point some developers
    begin to experience some insecurity.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 尽管在社区内存在问题，但已经获得了开发者的喜爱。理由是显而易见的：Rust 让开发者能够避免整个类别的问题，这要归功于编译器。编译器要求正确性，有时会让开发者感到一些不安。
- en: I’d like to showcase two Rust features that are part of what makes Rust excellent,
    and then compare them with recent innovations in Java.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我想展示一下 Rust 的两个特性，这些特性是使 Rust 出色的一部分，然后与 Java 中的最新创新进行比较。
- en: '*Disclaimer: In no way am I claiming that these Rust features caused their
    counterparts to appear in Java. I would not be surprised if Kotlin and/or Scala
    were more influential in bringing this to life. But I am excited to see Rust features
    that can also be (sort of) found in Java!*'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*免责声明：我并不是在暗示 Rust 的这些特性导致它们在 Java 中出现。如果 Kotlin 和/或 Scala 对此更有影响，我一点也不会感到意外。但我很高兴看到
    Rust 的特性在某种程度上也可以在 Java 中找到！*'
- en: Immutable Data[#](#immutable-data)
  id: totrans-split-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不可变数据[#](#immutable-data)
- en: In Rust, data is immutable by default.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Rust 中，默认情况下数据是不可变的。
- en: '[PRE0]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If we want data to be mutable, it must be declared mutable explicitly.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望数据是可变的，必须明确声明其可变性。
- en: '[PRE1]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, a plain ol’ Java object (aka POJO) is often written with mutability by
    default, and rather verbosely. Here is how it looks like in Java 8:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一个普通的 Java 对象（也称为 POJO）通常默认以可变的方式编写，而且写法相当冗长。以下是 Java 8 中的示例：
- en: '[PRE2]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: However, thanks to modern Java, record classes simplify this with immutability
    in mind and our code is far less verbose. The below is valid Java 21 code with
    previews enabled.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于现代 Java，记录类考虑到不可变性而简化了这一过程，我们的代码变得不那么冗长。以下是启用预览的 Java 21 代码示例。
- en: '[PRE3]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Algebraic Data Types[#](#algebraic-data-types)
  id: totrans-split-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代数数据类型[#](#algebraic-data-types)
- en: 'In [this YouTube video](https://www.youtube.com/watch?v=z-0-bbc80JM), we see
    how Rust can leverage algebraic types to aid in making invalid state unrepresentable,
    with strong guarantees against buggy behavior. In Rust, this is done using enums:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [这个 YouTube 视频](https://www.youtube.com/watch?v=z-0-bbc80JM) 中，我们可以看到 Rust
    如何利用代数类型帮助使无效状态无法表示，从而保证程序行为的稳定性。在 Rust 中，这是通过枚举来实现的：
- en: '[PRE4]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Up until recently, this could not be implemented elegantly in Java. As of Java
    21 and beyond, however, you can implement this in Java elegantly using sealed
    interfaces containing records and using exhaustive switch syntax:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，这在 Java 中并不能以优雅的方式实现。但是，从 Java 21 开始，您可以使用包含记录和详尽的 switch 语法的封闭接口来优雅地实现这一点：
- en: RealCat.java
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: RealCat.java
- en: '[PRE5]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: RealCatApplication.java
  id: totrans-split-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: RealCatApplication.java
- en: '[PRE6]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Conclusion[#](#conclusion)
  id: totrans-split-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Conclusion[#](#conclusion)
- en: There are myriad (good) reasons that Java will never become Rust, but I’m glad
    to see some of Rust’s strong features making their way into Java. This will strengthen
    Java’s long-term placement as one of the programming languages of choice in the
    business world. Java has owned significant market share for the last 28 years
    and is poised to retain, if not regain significant market share over the next
    28 years because of the OpenJDK project’s dedication to developer productivity.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: Java 永远不会变成 Rust，有着无数（好的）原因，但我很高兴看到 Rust 的一些强大特性正在进入 Java。这将加强 Java 在商业世界中作为首选编程语言的长期地位。Java
    在过去 28 年中占据了显著的市场份额，并且由于 OpenJDK 项目致力于开发者生产力，它有望在未来 28 年内保持或重获重要市场份额。
