- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:37:41'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年05月27日 14:37:41
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'OpenDev: Free Software Needs Free Tools'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenDev：自由软件需要自由工具
- en: 来源：[https://opendev.org/](https://opendev.org/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://opendev.org/](https://opendev.org/)
- en: What is OpenDev?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是OpenDev？
- en: OpenDev is a collaboratory for open source software development at scale. Its
    focus is on code review, continuous integration, and project hosting provided
    exclusively through open source solutions like Git, Gerrit, Zuul, and Gitea. It
    also provides a number of peripheral collaboration services (like Mailman mailing
    lists, IRC bots for notifications and annotating text-based meetings, Jitsi-Meet
    for videoconference discussions integrated with Etherpad for collective text editing).
    All of these services are openly operated by the community, and continuously integrated
    and deployed using OpenDev itself.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: OpenDev是一个面向规模的开源软件开发协作平台。其重点是通过Git、Gerrit、Zuul和Gitea等开源解决方案提供的代码审查、持续集成和项目托管。它还提供了许多外围协作服务（如Mailman邮件列表、用于通知和注释基于文本的会议的IRC机器人、集成了Etherpad用于集体文本编辑的Jitsi-Meet视频会议讨论等）。所有这些服务都由社区公开运营，并使用OpenDev本身进行持续集成和部署。
- en: How is development different with OpenDev
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与OpenDev一起开发有何不同
- en: OpenDev doesn't use a pull request (or merge request) workflow, like those implemented
    by GitHub or Gitlab. Instead it follows Gerrit's iterative change proposal workflow,
    which results in a slightly different experience.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: OpenDev不使用拉取请求（或合并请求）工作流，而是遵循Gerrit的迭代更改提议工作流，这使得体验略有不同。
- en: In GitHub or Gitlab, contribution typically starts by forking a personal copy
    of the original repository, cloning that locally, and pushing one or more commits
    to that personal fork. Once your code seems ready to merge, you ask the service
    to create a pull request for your branch into the original repository. The pull
    request is reviewed, and if accepted your changes get merged into the original
    repository. If not, you push more commits to your fork and update the request
    seeking more reviews.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub或Gitlab中，贡献通常通过复刻原始存储库的个人副本开始，将其克隆到本地，然后将一个或多个提交推送到该个人副本。一旦你的代码准备好合并，你就可以要求服务在原始存储库中为你的分支创建一个拉取请求。拉取请求将被审核，如果被接受，你的更改将被合并到原始存储库中。如果不被接受，你可以将更多的提交推送到你的副本中，并更新请求以获得更多审查。
- en: By contrast, contribution with Gerrit starts by cloning the original repository
    locally. You iterate on development of one or more local commits, and then use
    git push (or the git-review tool) to propose your commits as a series of changes
    to the Gerrit code review service. Each change in the series is reviewed, and
    if it's accepted (and passing tests) then it gets merged into the original repository.
    If more work is needed, you amend the same commits and push new versions of them
    for re-review.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，与Gerrit一起贡献是通过在本地克隆原始存储库开始的。你迭代开发一个或多个本地提交，然后使用git push（或git-review工具）将你的提交作为一系列更改提议给Gerrit代码审查服务。系列中的每个更改都将进行审查，如果被接受（并通过测试），则将其合并到原始存储库中。如果需要更多的工作，你可以修改相同的提交，并推送它们的新版本进行重新审查。
- en: The difference is subtle, but significant. In the pull request model, you create
    a fork of the original repository, push changes to it, and ultimately propose
    to merge changes back. In the change proposal model, you prepare a change, and
    propose it. You do not create a complete fork and everyone contributes into the
    same original repository with what are basically lightweight, ephemeral topic
    branches. It results in less fragmentation overall, and avoids confusion between
    the original repository and its numerous forks.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 差异微妙但重要。在拉取请求模型中，你创建一个原始存储库的副本，对其进行更改，最终提出将更改合并回来。在更改提议模型中，你准备一项更改，并提出它。你不创建一个完整的副本，每个人都在同一个原始存储库中为基本上是轻量级的、短暂的主题分支做出贡献。这导致了较少的整体碎片化，并避免了原始存储库及其众多分支之间的混淆。
- en: That high-level difference also affects lower-level details. A pull request
    may contain several commits, and if merged all those commits will appear in the
    original repository history. In Gerrit, every commit is a separate change (optionally
    depending on other related changes) for code reviewers to review, so developers
    squash or amend edits made while developing to represent the desired final state
    of that change. Each prior revision of a change is still retained by the service,
    as are all the review comments, so updates can be compared side-by-side for a
    clear picture of how the change evolved. It generally results in easier code review,
    but also a cleaner branch history with the commit messages reviewed as an integral
    part of each change.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这种高层次的差异也影响了更低层次的细节。一个拉取请求可能包含多个提交，如果合并了所有这些提交，那么所有这些提交将出现在原始仓库的历史记录中。在 Gerrit
    中，每个提交都是一个单独的更改（可选地依赖于其他相关更改），供代码审阅人员审查，因此开发人员会压缩或修改在开发过程中进行的编辑，以代表该更改的期望最终状态。每个更改的先前修订版仍然由服务保留，以及所有审阅意见，因此可以将更新进行比较，以清晰地了解更改的演变过程。这通常会导致更容易的代码审查，但也会产生一个更清晰的分支历史，其中的提交消息被审查为每个更改的整体部分。
- en: In summary, the Gerrit workflow, its user experience and UI are different from
    the pull request workflow. While it may not be immediately familiar to developers
    used to pull request workflows, it's worth learning. Long-term benefits outweigh
    the short-term cost of having to learn a new tool, especially for someone who
    is going to spend a lot of time developing for that project anyway.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，Gerrit 工作流程，其用户体验和 UI 与拉取请求工作流不同。虽然对于习惯于拉取请求工作流的开发人员来说可能不是立即熟悉的，但它值得学习。长期利益超过了学习新工具的短期成本，尤其是对于那些打算花费大量时间为该项目开发的人来说。
- en: Integrated Continuous Integration
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成的持续集成
- en: One key benefit of OpenDev is that it integrates powerful continuous integration
    features, made possible by the donation of compute resources from our generous
    infrastructure partners. Test jobs are run when changes are proposed and provide
    code reviewers with valuable information. Test jobs also run again at merge time,
    in case recently approved changes introduce an incompatibility, preventing code
    which doesn't pass tests from merging to the repository.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: OpenDev 的一个关键好处是它集成了强大的持续集成功能，这得益于我们慷慨的基础设施合作伙伴捐赠的计算资源。当提出更改时，会运行测试作业，并为代码审阅人员提供有价值的信息。测试作业还会在合并时再次运行，以防最近批准的更改引入不兼容性，防止未通过测试的代码合并到仓库中。
- en: Advanced Zuul features like speculative execution of tests allow the testing
    of sequenced changes in parallel, so development velocity is rarely limited by
    how thorough you want your tests to be. Changes in one Git repository can depend
    on proposed changes in another repository, allowing integration testing of features
    actively developed across multiple projects, removing artificial barriers between
    development teams.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 高级的 Zuul 功能，比如测试的推测执行，允许并行测试序列化的更改，因此开发速度很少受到测试 thoroughness 的限制。一个 Git 仓库的更改可以依赖于另一个仓库中提议的更改，允许跨多个项目积极开发的功能进行集成测试，消除了开发团队之间的人为障碍。
- en: This advanced continuous integration system was developed to sustain the complexity
    and scale of OpenStack development, one of the three most actively developed open
    source projects in the world. OpenDev makes this system available to other projects,
    enabling open development at scale for everyone.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个高级的持续集成系统是为了支持 OpenStack 开发的复杂性和规模而开发的，这是全球三个最活跃的开源项目之一。OpenDev 使这个系统对其他项目可用，为所有人提供了规模化的开放式开发。
- en: Finally, another key difference between OpenDev and other development infrastructure
    services like GitHub or Gitlab.com is that it's built purely using open source
    software. GitHub and Gitlab.com are provided free of charge for open source projects,
    but they are both implemented using proprietary code. If development of your free
    and open source software requires interaction with proprietary code, is it truly
    free (as in freedom)?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，OpenDev 与 GitHub 或 Gitlab.com 等其他开发基础设施服务之间的另一个关键区别是，它纯粹是使用开源软件构建的。GitHub
    和 Gitlab.com 为开源项目免费提供，但它们都是使用专有代码实现的。如果您的自由和开源软件的开发需要与专有代码交互，那么它真的是自由的（作为自由）吗？
- en: It is widely accepted today that using open source technology reduces your reliance
    on outside parties and enables innovation. It should be obvious that developing
    software by using open source toolchains has the same effect. Nothing prevents
    a service provider from changing its terms of service, creating new limitations,
    blocking access for contributors connecting from specific countries, or even fully
    removing your project. Proprietary development services create the same form of
    hard limits, lock-in and dependency that proprietary software does, and prevent
    open innovation in the development infrastructure space.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如今普遍认为，使用开源技术可以减少你对外部方的依赖，促进创新。显然，通过使用开源工具链开发软件具有相同的效果。没有什么能阻止服务提供商更改其服务条款、创建新的限制、阻止来自特定国家的贡献者的访问，甚至完全删除你的项目。专有开发服务造成的是与专有软件相同形式的严格限制、锁定和依赖，阻碍了开放式基础设施领域的开放式创新。
- en: 'OpenDev is entirely built using open source software, but goes one step beyond:
    it is also openly operated. Even its operation tooling and configuration is open
    source, lives in Git, and is continuously-deployed. It serves as a clear example
    of transparent collaboration for systems administration. Like free and open source
    software, it requires engaging with its community to get the most of it -- OpenDev
    is not a service you consume, it''s a community you join. That can be a bit overwhelming
    if you just want to focus on development, especially when ready-to-consume services
    are available. But it''s worth it, especially if you want to have a say in what
    services are provided, or just support the idea of improving open source tools
    in that space.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: OpenDev 完全使用开源软件构建，但它还走了一步：它也是公开运营的。即使是其操作工具和配置也是开源的，存储在 Git 中，并且是持续部署的。它作为系统管理透明协作的明显例子。就像自由开源软件一样，它需要与其社区互动，以充分利用它
    -- OpenDev 不是一个你消费的服务，而是一个你加入的社区。如果你只想专注于开发，尤其是当现成的可消费服务可用时，这可能会有点压力。但这是值得的，尤其是如果你想对所提供的服务发表意见，或者只是支持改进该领域的开源工具的想法。
