- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:56:42'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:56:42'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: So you think you understand IP fragmentation? [LWN.net]
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所以你认为你理解 IP 分段了吗？[LWN.net]
- en: 来源：[https://lwn.net/Articles/960913/](https://lwn.net/Articles/960913/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://lwn.net/Articles/960913/](https://lwn.net/Articles/960913/)
- en: '| **LWN.net needs you!**Without subscribers, LWN would simply not exist. Please
    consider [signing up for a subscription](/subscribe/) and helping to keep LWN
    publishing |'
  id: totrans-split-6
  prefs: []
  type: TYPE_TB
  zh: '| **LWN.net 需要你！** 没有订户，LWN 就无法存在。请考虑[订阅](/subscribe/)并帮助维持 LWN 的出版 |'
- en: February 7, 2024
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2024 年 2 月 7 日
- en: This article was contributed by Valerie Aurora
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本文由 Valerie Aurora 贡献
- en: What is IP fragmentation, why is it important, and do people understand it?
    The answer to that last question is "not as well as they think". This article
    will also answer the rest of those questions and introduce [fragquiz](https://valerieaurora.org/fragquiz.html),
    a game that I wrote to allow players to guess how IP packets will behave when
    they are too large for the network. As evidence that IP fragmentation is not well-understood,
    a room full of networking experts played fragquiz and got a score that was nowhere
    close to perfect. In addition, I will describe a new algorithm for fragmentation
    avoidance, which some colleagues and I developed, that helped motivate development
    of fragquiz.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: IP 分段是什么，为什么它很重要，人们是否理解它？对于最后一个问题的答案是“并不像他们想象的那样好”。本文还将回答其余这些问题，并介绍[fragquiz](https://valerieaurora.org/fragquiz.html)，这是一个我编写的游戏，让玩家猜测当
    IP 数据包过大无法适应网络时它们的行为。作为 IP 分段理解不佳的证据，一个由网络专家组成的房间玩了 fragquiz，并得到了远非完美分数的分数。此外，我将描述一个我们和同事们开发的新的分段避免算法，这促使了
    fragquiz 的开发。
- en: Why care?
  id: totrans-split-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为什么要关心？
- en: IP fragmentation is when an IP (Internet Protocol) packet is split into smaller
    pieces before it is sent to another computer. TCP and UDP, along with a lot of
    other network protocols, are implemented on top of IP. Many networking experts
    think they know when IP fragmentation will happen, and I thought I did too—until
    I had to implement an algorithm for a VPN. That's when I learned that, like me,
    a lot of other networking experts are quite bad at predicting when a packet would
    be split into pieces. To explain why, we start with what IP fragmentation is.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: IP 分段是当 IP（Internet Protocol）数据包在发送到另一台计算机之前被分成较小片段时发生的情况。TCP 和 UDP 以及许多其他网络协议都建立在
    IP 之上。许多网络专家认为他们知道 IP 分段将在何时发生，我也曾如此认为，直到我不得不为 VPN 实现算法时。那时我才意识到，像我一样，许多其他网络专家在预测何时数据包会被分割成片段时表现不佳。为了解释为什么会这样，我们首先要了解
    IP 分段是什么。
- en: 'An IP packet is a building block of the internet: a little chunk of application
    data with a header describing what it contains, where to send it, and what intermediate
    routers are allowed to do to it, among other things. Each router on the path between
    the source and destination host reads the IP header, changes it slightly, consults
    the routing tables, and (hopefully) sends the packet on to the next router in
    the path.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: IP 数据包是互联网的基本构建块：一个小应用数据块，带有描述其内容、发送位置以及允许中间路由器对其进行的操作等信息的头部。源主机和目标主机之间路径上的每个路由器读取
    IP 头部，稍作更改，查阅路由表，然后（希望）将数据包传送到路径上的下一个路由器。
- en: 'Each network link has a maximum size of IP packet that can be sent over it:
    the Maximum Transmission Unit (MTU). The path MTU (PMTU) is the minimum of all
    of the MTUs on the path between two hosts. The path can change over time, however,
    based on congestion, outages, and other network changes.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网络链路都有一个能发送的最大 IP 数据包大小：最大传输单元（MTU）。路径最小传输单元（PMTU）是两个主机之间路径上所有 MTU 的最小值。然而，路径可以随时间改变，这取决于拥塞、故障和其他网络变化。
- en: IP fragmentation happens when IP packets get split up into smaller IP packets,
    each with their own header, so that they can fit into the MTU of the network path.
    In IPv4 and IPv6, fragmentation can occur at the source, the computer where the
    packet is coming from. In IPv4, packets can also be fragmented by any router on
    the path between the source and the destination.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: IP 分段发生在 IP 数据包被分割成较小的 IP 数据包时，每个都有自己的头部，以便适应网络路径的 MTU。在 IPv4 和 IPv6 中，分段可以在数据包起源处发生，即数据包生成的计算机上。在
    IPv4 中，数据包也可以由路径上任何路由器分段。
- en: 'Generally speaking, IP fragmentation is bad for performance in just about every
    dimension: throughput, latency, CPU usage, memory usage, and network congestion.
    To see why, imagine a typical IPv4 packet of 20 bytes of IP metadata and 1480 bytes
    of data that has been fragmented into packets that each contain only eight bytes
    or fewer of data for a total of 1480/8 = 185 packets. (This is possible but unlikely
    to ever happen in reality; usually packets are only split into two pieces.)'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，IP 分段在各个方面对性能都有负面影响：吞吐量、延迟、CPU 使用率、内存使用率和网络拥塞。要了解为什么，可以想象一个典型的 IPv4 数据包，其中包含
    20 字节的 IP 元数据和 1480 字节的数据，已经被分割成每个只包含八字节或更少数据的数据包，共 1480/8 = 185 个数据包。（这种情况可能发生，但在现实中不太可能发生；通常数据包只会被分割成两部分。）
- en: To send 1480 bytes of data in eight-byte fragments, the source must send 185*20 = 3700
    bytes of metadata instead of just 20 bytes in the unfragmented case. Processing
    the packet header costs a certain amount of CPU time, which will happen 185 times
    at every host in the path. The destination can't pass the data up the networking
    stack until it receives all of the fragments, so the latency is the worst case
    of 185 packets. The destination must also reserve memory for assembling the fragmented
    packet, which it will throw away if it does not receive even one of the fragments
    after waiting for a reasonable time.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要在八字节片段中发送 1480 字节的数据，源必须发送 185 * 20 = 3700 字节的元数据，而不是在未分段情况下仅需 20 字节。处理数据包头会消耗一定数量的
    CPU 时间，这将在路径上的每个主机上发生 185 次。在收到所有片段之前，目标无法将数据传递给网络堆栈，因此延迟是 185 个数据包的最坏情况。目标还必须为组装分段数据包保留内存，如果等待合理时间后未收到任何片段，则将丢弃此内存。
- en: Worse, fragments are more likely to be lost. Many routers and firewalls treat
    fragments as a security risk because they don't include the information from higher-level
    protocols like TCP or UDP and can't be filtered based on port, so they drop all
    IP fragments. Also, load-balancing systems might route fragments to different
    hosts, where they can never be reassembled.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，片段更容易丢失。许多路由器和防火墙认为片段是安全风险，因为它们不包含来自于像 TCP 或 UDP 这样的更高层协议的信息，也无法基于端口进行过滤，所以它们会丢弃所有
    IP 片段。此外，负载平衡系统可能会将片段路由到不同的主机，那里永远无法重新组装它们。
- en: Even when an IP packet is only split into two pieces, it usually causes a noticeable
    degradation of connection performance due to the doubling of the per-packet overhead.
    Sometimes IP fragmentation results in a network "black hole" if a router is configured
    to drop fragments. The small packets that initiate a connection get through, but
    the larger packets containing the data are fragmented, so they are all dropped.
    This is why network programmers really *really* want to prevent IP fragmentation.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 即使 IP 数据包只分成两部分，通常也会因为每个数据包的开销加倍而导致连接性能明显下降。有时，如果路由器配置为丢弃片段，则 IP 分段会导致网络“黑洞”。连接初始化的小数据包能够通过，但包含数据的较大数据包被分割，所以它们都被丢弃。这就是为什么网络程序员非常希望防止
    IP 分段。
- en: Prevention
  id: totrans-split-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 预防措施
- en: IP fragmentation is prevented by only sending packets that are equal to or smaller
    than the path MTU between two hosts. But how do we find the path MTU? This is
    called path MTU discovery (PMTUD) and there are a variety of methods to do this,
    depending on the networking protocol and the characteristics of the network. One
    reliable way to find the path MTU is to send IP packets of a known size that are
    not allowed to be fragmented. If the source gets confirmation that a packet arrived
    at the destination, then the path MTU is at least as large as that packet.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 只有发送小于或等于两个主机之间路径 MTU 的数据包才能防止 IP 分段。但是我们如何找到路径 MTU 呢？这称为路径 MTU 发现（PMTUD），根据网络协议和网络特性，有多种方法可以实现此目的。找到路径
    MTU 的一种可靠方法是发送一个已知大小的 IP 数据包，该数据包不允许分段。如果源获得确认数据包已到达目的地，则路径 MTU 至少与该数据包大小一样大。
- en: 'So, to prevent IP fragmentation, you must understand IP fragmentation well
    enough to predict two things: the size of the IP packet as sent by the source
    host, and whether any intermediate routers are permitted to fragment the packet
    into smaller pieces. This depends on, among other things:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了防止 IP 分段，您必须充分了解 IP 分段，以预测两件事：由源主机发送的 IP 数据包的大小，以及任何中间路由器是否允许将数据包分段成更小的片段。这取决于，除其他因素外：
- en: the MTU of the local interface
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地接口的 MTU
- en: the IP version (IPv4 or IPv6)
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP 版本（IPv4 或 IPv6）
- en: the options in the IP packet header
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP 数据包头中的选项
- en: the protocol (TCP/UDP/ICMP/etc.)
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协议（TCP/UDP/ICMP 等）
- en: the socket options
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 套接字选项
- en: any system-wide PMTUD-related settings
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何系统范围的与 PMTUD 相关的设置
- en: any relevant PMTU-cache entries
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何相关的 PMTU 缓存条目
- en: 'If the sender tries to send a IP packet that is bigger than the MTU on any
    part of the path to the receiving host, there are three possibilities: the `send()`
    system call returns `EMSGSIZE`, the packet is fragmented, and/or the packet is
    dropped. (The last two may happen on either the source host or an intermediate
    router, depending on the packet type and options.) When I say that someone "understands
    IP fragmentation", I mean that they can predict which of those things might happen
    to a given packet.'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发送方尝试发送大于路径中接收主机的 MTU 的 IP 数据包，则有三种可能性：`send()` 系统调用返回 `EMSGSIZE`，数据包被分段，和/或数据包被丢弃。（后两种情况可能发生在源主机或中间路由器上，具体取决于数据包类型和选项。）当我说某人“理解
    IP 分段”时，我指的是他们能预测对于给定数据包可能发生的情况。
- en: Well-understood?
  id: totrans-split-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 明白了吗？
- en: If you'd asked me a year ago if most networking experts could predict the size
    and fragmentation status of an IP packet, I would have confidently said "yes".
    Then I had to implement [DPLPMTUD](https://datatracker.ietf.org/doc/html/rfc8899)
    for a VPN. (Yes, that's a real acronym, for real software, from a real RFC. It
    stands for Datagram Packetization Layer Path Maximum Transmission Unit Discovery.)
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一年前问我大多数网络专家是否能预测 IP 数据包的大小和分段状态，我会自信地说“可以”。然后我不得不为 VPN 实现 [DPLPMTUD](https://datatracker.ietf.org/doc/html/rfc8899)。（是的，这是一个真实的首字母缩略词，用于真实的软件，来自真实的
    RFC。它代表 Datagram Packetization Layer Path Maximum Transmission Unit Discovery。）
- en: Initially, it seemed like it would be easy. My colleagues were networking experts
    with a lot of experience working on the application, which is a WireGuard-based
    VPN using IPv4 and IPv6\. Together, we came up with a fast, simple path MTU discovery
    algorithm. They were confident that the software already only sent packets that
    couldn't be fragmented, so all we had to do is send the right size of probe packets,
    using a built-in ping feature, and record the response. Imagine our surprise when
    the packet captures turned out to be full of fragmented packets.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，这似乎很容易。我的同事们都是网络专家，有着丰富的应用经验，这个应用程序基于 WireGuard VPN，支持 IPv4 和 IPv6。我们一起设计了一种快速简单的路径
    MTU 发现算法。他们确信软件已经只发送无法分段的数据包，所以我们只需发送正确大小的探测数据包，使用内置的 ping 功能，并记录响应。想象一下我们看到数据包捕获结果充满了分段数据包时的惊讶。
- en: As I searched for ways to disable IP fragmentation, I found a lot of misleading
    and unhelpful answers on Stack Overflow. Sometimes the best answer would be down-voted.
    The official documentation either didn't exist (macOS) or was hard to understand
    (Linux). We all thought the probe packets should be sent on a socket with `IP_PMTUDISC_DO`
    set on Linux, but it took a few weeks to realize that we actually wanted `IP_PMTUDISC_PROBE`.
    Eventually I figured out all the correct settings for Linux and macOS, but it
    took much longer than it should have.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当我寻找禁用 IP 分段的方法时，在 Stack Overflow 上找到了很多误导和无用的答案。有时候最好的答案会被踩。官方文档要么不存在（macOS），要么难以理解（Linux）。我们都以为应该在
    Linux 上使用 `IP_PMTUDISC_DO` 设置来发送探测数据包，但几周后才意识到我们实际上想要的是 `IP_PMTUDISC_PROBE`。最终我弄清楚了
    Linux 和 macOS 的所有正确设置，但用了比预期更长的时间。
- en: 'I wanted to share what I learned with other people, but now I faced an even
    harder problem: How do you teach people something they think they already know?
    People were confidently wrong about IP fragmentation everywhere I looked, including
    in the mirror. Also, let''s face it, IP fragmentation is kind of boring.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我想和其他人分享我学到的东西，但现在我面临一个更大的问题：如何教会那些认为他们已经了解的人？无论我看哪里，包括镜子里，人们对 IP 分段都有着自信的错误理解。另外，让我们面对现实，IP
    分段有点无聊。
- en: Introducing fragquiz
  id: totrans-split-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 引入 fragquiz
- en: I decided to write a game to help people learn IP fragmentation. The program
    would send packets that were larger than the MTU of the local network connection
    (the gateway interface), while changing the IP version (IPv6 or IPv4), the transport-layer
    protocol (TCP or UDP), and the socket-fragmentation options (do/don't fragment
    on macOS, four different PMTUD options from the [ip(7) man page](https://man7.org/linux/man-pages/man7/ip.7.html)
    for Linux). It would then report whether the packet was sent, what the packet's
    fragmentation setting was, and if it was fragmented en route—but first it would
    make the user guess what would happen. At the end, it would tell them their score
    and encourage them to send their score and a link to the program to someone else,
    Wordle-style.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定编写一个游戏，帮助人们学习IP分片。该程序将发送大于本地网络连接（网关接口）的MTU的数据包，同时更改IP版本（IPv6或IPv4）、传输层协议（TCP或UDP）和套接字分段选项（在macOS上是否分段，在Linux上来自[ip(7)手册页](https://man7.org/linux/man-pages/man7/ip.7.html)的四个不同的PMTUD选项）。然后它将报告数据包是否已发送、数据包的分片设置以及在传输过程中是否分片——但首先它会让用户猜测会发生什么。最后，它会告诉他们他们的得分，并鼓励他们将他们的得分和程序链接发送给其他人，类似Wordle的方式。
- en: 'I had a few requirements:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我有几个要求：
- en: Works on macOS and Linux
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS和Linux上运行
- en: Easy to run (no superuser, no separate server, no configuration)
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于运行（无需超级用户、无需单独的服务器、无需配置）
- en: No virtualization, tunnels, or loopback interface since they often have bugs
    related to MTU
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有虚拟化、隧道或者环回接口，因为它们经常存在与MTU相关的错误。
- en: No host packet tracing because fragmentation/reassembly often happens on the
    network interface
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有主机数据包跟踪，因为分片/重组经常发生在网络接口上。
- en: I decided to use a [traceroute](https://en.wikipedia.org/wiki/Traceroute)-style
    solution. The default mode in traceroute sends packets with a small time-to-live
    (TTL), or hop limit for IPv6\. When a router receives a packet, it subtracts one
    from the TTL; if the TTL is now zero and the packet isn't for the router itself,
    it will throw away the packet and send an ICMP Time Exceeded message back to the
    source. Traceroute then reads the IP address of the sending router from the Time
    Exceeded message and prints that out. It continues sending packets with increasing
    TTLs to find the IP address of routers that are increasingly close to the destination.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定使用一个[路由追踪](https://zh.wikipedia.org/wiki/路由追踪)-风格的解决方案。路由追踪的默认模式发送带有小生存时间（TTL）的数据包，或者针对IPv6的跳数限制。当路由器接收到一个数据包时，它会从TTL中减去一；如果TTL现在为零且数据包不是发给路由器自己的，则会丢弃该数据包并向源发送ICMP超时消息。路由追踪然后读取发送路由器的IP地址，并将其打印出来。它继续发送具有递增TTL的数据包，以查找越来越接近目的地的路由器的IP地址。
- en: Fragquiz uses the same TTL technique, sending each packet with a small TTL,
    and reading the ICMP Time Exceeded packet sent by the router. The Time Exceeded
    message includes the header of the packet that triggered the message, which includes
    the packet size and fragmentation status. On macOS and Linux, an unprivileged
    user can read (and send) a restricted subset of ICMP messages using the unprivileged
    ICMP socket type.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: Fragquiz使用相同的TTL技术，发送每个带有小TTL的数据包，并读取路由器发送的ICMP超时数据包。超时消息包括触发消息的数据包的头部，其中包括数据包大小和分片状态。在macOS和Linux上，非特权用户可以使用非特权ICMP套接字类型读取（和发送）受限制的ICMP消息的受限子集。
- en: It worked, but there were a few surprises along the way.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 它起作用了，但是在这个过程中也有一些意外。
- en: Initially, I assumed that routers would not reassemble a packet with a TTL of
    one, since they would just decrement the TTL and throw it away as soon as they
    finished. But the first router that I tested, my home WiFi access point, did exactly
    that. I added code to automatically probe the network with larger-than-MTU packets
    with increasing TTL values until it received a Time Exceeded message for a fragment
    instead of the whole packet, signaling that the packets reached a router that
    did not reassemble the packet before sending a Time Exceeded message. Then I used
    that value for the TTL for the packets testing IP fragmentation. Usually the necessary
    TTL is one or two; the largest TTL I've seen in practice is six, meaning that
    routers one through five all reassembled fragments before sending Time Exceeded
    responses.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，我假设路由器不会重新组装 TTL 为一的数据包，因为它们只会在完成后减少 TTL 并且在抛弃数据包之前执行。但是我测试的第一个路由器，我的家用 WiFi
    接入点，确实执行了这个动作。我添加了代码来自动使用不断增加的 TTL 值通过发送大于 MTU 的数据包来探测网络，直到收到一个超时消息，该消息表明数据包在到达路由器之前已被分片。然后我使用了这个
    TTL 值进行测试 IP 分片。通常所需的 TTL 是一或两；我在实践中看到的最大 TTL 是六，这意味着路由器一到五都在发送超时响应前重新组装了分片。
- en: Some networks simply don't send Time Exceeded messages. I found this out the
    hard way when fragquiz suddenly stopped working and I spent a few minutes frantically
    trying to figure out how I'd broken the code. Then I realized that turning off
    my VPN made fragquiz work again. In my experience, it is rare for a network to
    correctly generate Time Exceeded messages for both IPv4 and IPv6\.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有些网络根本不发送超时消息。当 fragquiz 突然停止工作时，我苦苦寻找自己的错误几分钟，然后我意识到关闭 VPN 后 fragquiz 又能正常工作了。在我的经验中，网络能正确生成
    IPv4 和 IPv6 的超时消息是罕见的。
- en: While the unprivileged ICMP listener allowed non-superusers to read Time Exceeded
    messages on macOS, that code only worked for the superuser on Linux. According
    to the [initial commit message](https://git.kernel.org/linus/c319b4d76b9e) for
    ICMP sockets, an ICMP Time Exceeded message can only be read by an unprivileged
    user using `IP_RECVERR` on the sending socket. I didn't implement that, so currently
    the Linux version only works as root.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，非特权 ICMP 监听程序允许非超级用户读取超时消息，但这段代码在 Linux 上只对超级用户有效。根据 ICMP 套接字的 [初次提交消息](https://git.kernel.org/linus/c319b4d76b9e)，使用
    `IP_RECVERR` 在发送套接字上可以使非特权用户读取 ICMP 超时消息。目前我还没有实现这一功能，所以 Linux 版本目前只能以 root 用户身份运行。
- en: Both macOS and Linux keep a cache of path MTUs discovered by the operating system.
    The cached path MTU will affect the IP-fragmentation behavior in some cases, which
    made testing a pain since I had to wait for the cached path MTU to expire. I would
    like to add an option to clear the path MTU cache in the future. Also, note that
    the prototype version has a kind of placeholder license, for now, but I plan to
    release a version with an open license in the future.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: macOS 和 Linux 都会保存操作系统发现的路径 MTU 的缓存。在某些情况下，缓存的路径 MTU 将影响 IP 分片的行为，这使得测试变得很麻烦，因为我必须等待缓存的路径
    MTU 过期。我希望未来添加一个选项来清除路径 MTU 缓存。此外，请注意原型版本目前有一种占位符许可证，但我计划未来发布一个开放许可证版本。
- en: I [presented fragquiz at RIPE 87](https://ripe87.ripe.net/archives/video/1252/),
    which is a conference for network operators and internet service providers. At
    the end of the talk, I had the audience play fragquiz by voting with raised hands.
    Almost every question had people voting both "yes" and "no". Collectively, their
    score was just below 80%. That means an audience full of professional network
    engineers and researchers working together didn't even get a "B" on the assignment.
    I think we can safely conclude that understanding IP fragmentation is hard.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 [RIPE 87](https://ripe87.ripe.net/archives/video/1252/) 上介绍了 fragquiz，这是一个面向网络运营商和互联网服务提供商的会议。在演讲结束时，我让听众通过举手投票来玩
    fragquiz。几乎每个问题都有人同时投票 "是" 和 "否"。他们的总分接近 80%。这意味着一个由专业网络工程师和研究人员组成的观众群体甚至没有达到
    "B"。我们可以有把握地认为理解 IP 分片是困难的。
- en: A novel (?) algorithm
  id: totrans-split-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一个新颖的 (?) 算法
- en: Finally, I promised to explain the new algorithm, which I co-created with Salman
    Aljammaz and James Tucker.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我承诺解释这项新算法，这是我与 Salman Aljammaz 和 James Tucker 共同创造的。
- en: 'Most path MTU discovery algorithms test one path MTU at a time. They send a
    packet of a certain size and see whether it got through, then decide what to do
    next: send a bigger packet, send a smaller packet, or decide that the current
    estimate of the path MTU is good enough and terminate the search algorithm. This
    can take several round trips to find the best path MTU.'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数路径 MTU 发现算法一次只测试一个路径 MTU。它们发送一个特定大小的数据包，并查看是否传输成功，然后决定下一步该怎么做：发送更大的数据包，发送更小的数据包，或者决定当前路径
    MTU 的估计已经足够好并终止搜索算法。这可能需要多次往返才能找到最佳的路径 MTU。
- en: 'Our first insight was that, [as shown by Custura, et al.](https://aura.abdn.ac.uk/bitstream/handle/2164/11693/tma2018_paper57.pdf),
    in the real world there are a small number of likely packet sizes, less than ten.
    We aren''t the first to realize that; in fact, [RFC 8899](https://datatracker.ietf.org/doc/html/rfc8899#name-selection-of-probe-sizes)
    says: "<q>Implementations could optimize the search procedure by selecting step
    sizes from a table of common PMTU sizes.</q>"'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个发现是，[正如Custura等人所示](https://aura.abdn.ac.uk/bitstream/handle/2164/11693/tma2018_paper57.pdf)，在现实世界中可能的数据包大小很少，不到十种。我们并不是第一个意识到这一点的人；事实上，[RFC
    8899](https://datatracker.ietf.org/doc/html/rfc8899#name-selection-of-probe-sizes)说：“<q>实现可以通过选择一张常见
    PMTU 大小的表格来优化搜索过程。</q>”
- en: 'What we did differently is this: we sent ALL of the possible packet sizes at
    the same time. So if the local MTU is 9000 bytes, then we send packets with sizes
    of 1280, 1400, 1500, 8000, and 9000 bytes all at the same time. The other end
    sends an acknowledgment for every packet it sees. Then we set the path MTU to
    the largest packet size that was acknowledged. It''s okay if it''s off by a few
    bytes; most PMTU search algorithms stop probing when they get "close enough."'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做得不同的是：我们同时发送了所有可能的数据包大小。因此，如果本地的 MTU 是 9000 字节，那么我们同时发送大小为 1280、1400、1500、8000
    和 9000 字节的数据包。对方会对它看到的每个数据包发送确认。然后我们将路径 MTU 设置为被确认的最大数据包大小。如果有少量字节的偏差也没关系；大多数
    PMTU 搜索算法在达到“足够接近”时会停止探测。
- en: Every ten minutes, we reprobe the path MTU by sending a packet that is the next
    MTU size up. If we get an acknowledgment for the larger MTU size, then we know
    the path MTU has changed, and we reprobe with all of the packet sizes larger than
    that and smaller than the local MTU. Otherwise we use the current path MTU for
    another ten minutes. If we start losing packets for any reason, including the
    path MTU shrinking, we renegotiate the connection from scratch.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每十分钟，我们通过发送一个比当前 MTU 大的数据包来重新探测路径 MTU。如果我们收到了较大 MTU 大小的确认，那么我们知道路径 MTU 已经改变，然后我们使用比本地
    MTU 大且小于新确认的路径 MTU 的所有数据包大小重新探测。否则，我们继续使用当前路径 MTU 十分钟。如果由于任何原因导致数据包丢失，包括路径 MTU
    缩小，我们将从头开始重新协商连接。
- en: 'This algorithm has a latency of one RTT (round trip time) and is extremely
    simple: one timer, one static table, and one variable to hold the current path
    MTU. The downside is that it might use more bandwidth than other path MTU search
    algorithms if they can find the path MTU with fewer packets.'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个算法的延迟为一个 RTT（往返时间），非常简单：一个定时器，一个静态表，和一个变量来保存当前路径的最大传输单元（MTU）。缺点是，与其他路径 MTU
    搜索算法相比，可能会使用更多的带宽，如果它们能够用更少的数据包找到路径 MTU。
- en: Reader challenge
  id: totrans-split-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 读者挑战
- en: 'I hope you can now state proudly that you also don''t understand IP fragmentation.
    If you''re still not sure, here''s a fun closing challenge: Download [fragquiz](https://valerieaurora.org/fragquiz.html)
    and run the following on either Linux or macOS with the standard configuration.
    (If you''ve made a TCP connection to bing.com in the last 10 minutes, replace
    it with a domain you haven''t connected to recently. If you''re on macOS, you
    don''t need the sudo.)'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 希望现在你也可以自豪地说你不懂 IP 分段了。如果你仍然不确定，这里有一个有趣的挑战：下载 [fragquiz](https://valerieaurora.org/fragquiz.html)，并在
    Linux 或 macOS 上使用标准配置运行以下命令。（如果你在过去的10分钟内与 bing.com 建立了 TCP 连接，请将其替换为你最近未连接的域名。如果你在
    macOS 上，不需要使用 sudo。）
- en: '[PRE0]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Do you get the same answer on the first and third command? Why or why not?
    Hint: consult the Linux ip(7) man page linked above.'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条和第三条命令得到相同的答案吗？为什么？提示：参考上面链接的 Linux ip(7) 手册页面。
- en: '[ [Valerie Aurora](https://valerieaurora.org/) is a software consultant who
    enjoys writing ridiculous hacks and solving difficult systems problems. ]'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[ [瓦莱丽·奥罗拉](https://valerieaurora.org/)是一位软件顾问，喜欢编写荒谬的黑客技巧并解决复杂的系统问题。 ]'
- en: '* * *'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: (
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: （
- en: '[Log in](https://lwn.net/Login/?target=/Articles/960913/)'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[登录](https://lwn.net/Login/?target=/Articles/960913/)'
- en: to post comments)
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 发布评论）
