- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:42:25'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:42:25'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Using accesskey attribute in HTML forms and links
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 HTML 表单和链接中使用 accesskey 属性
- en: 来源：[https://jkorpela.fi/forms/accesskey.html](https://jkorpela.fi/forms/accesskey.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://jkorpela.fi/forms/accesskey.html](https://jkorpela.fi/forms/accesskey.html)
- en: Using `accesskey` attribute in HTML forms and links
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 HTML 表单和链接中使用 `accesskey` 属性
- en: The `accesskey` attribute, aimed at making web pages more accessible e.g. to
    people with motoric disabilities, has proved out to be poorly designed and poorly
    implemented. Although it is still endorsed by some recommendations, it tends to
    reduce accessibility rather than help people, though there are some special situations
    where it might improve useability.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`accesskey` 属性旨在使网页更易访问，例如对于运动能力障碍人士，但实际证明设计和实现均不佳。尽管仍有一些建议支持其使用，但它往往不利于提高可访问性，尽管在某些特殊情况下可能会提高可用性。'
- en: 'The original version of this document had a much more positive attitude to
    the `accesskey` attribute. Experience and analysis has shown, however, that the
    idea of author-defined shortcuts is generally not useful on the Web. Moreover,
    serious damage is often caused by the way in which the attribute has been implemented
    in browsers: it uses key combinations that override built-in functionality in
    browsers and other software. Ihave preserved the technical descriptions, however,
    since they might be of some use.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档的早期版本对 `accesskey` 属性持更为积极的态度。然而，经验和分析表明，由作者定义的快捷方式在Web上通常并不实用。此外，由于浏览器中实现的方式，该属性经常会造成严重破坏：它使用的键组合会覆盖浏览器和其他软件中内置的功能。然而，我仍保留了技术描述，因为它们可能会有所用处。
- en: In [HTML](../html-primer.html "Getting Started with HTML; a primer by J. Korpela"),
    one can use the `accesskey` attribute in [forms](index.html "Annotated links to
    tutorials, references, and specialized documents about HTML forms") and [links](../HTML3.2/4.7.html
    "Discussion of links in an HTML 3.2 tutorial"). When supported by a browser, it
    allows the user to use keyboard keys for functions which are normally done using
    a mouse. For example, to follow a link, one might (in some environments) use the
    Alt key and a letter, as alternative to clicking on the link. This requires that
    the author has specified an access key assignment for that link, using the `accesskey`
    attribute. Unfortunately, browser support to the attribute is limited, and rather
    primitive. The `accesskey` attribute tends to mask out the functionality of a
    browser's predefined keyboard control, which is often much more important than
    page-specific access keys. Moreover, browsers do not indicate that access keys
    are available. Authors may wish to consider including explicit notes about access
    key assignments in their documents; this document suggests some conventions about
    this. It also presents reasons for using only *digit* keys as access keys.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [HTML](../html-primer.html "HTML入门：J. Korpela的入门指南") 中，可以在 [表单](index.html
    "关于HTML表单的教程、参考和专业文档的注释链接") 和 [链接](../HTML3.2/4.7.html "HTML 3.2教程中关于链接的讨论") 中使用
    `accesskey` 属性。在浏览器支持的情况下，用户可以使用键盘键执行通常需要鼠标完成的功能。例如，要跟随链接，用户可以（在某些环境中）使用Alt键和一个字母，作为点击链接的替代方法。这要求作者已使用
    `accesskey` 属性为该链接指定了访问键分配。不幸的是，浏览器对该属性的支持有限且相当原始。`accesskey` 属性往往会掩盖浏览器预定义的键盘控制功能，后者通常比特定页面的访问键更重要。此外，浏览器不会指示可用的访问键。作者可能希望考虑在其文档中包含有关访问键分配的显式说明；本文档建议一些关于此的惯例。它还提出了仅使用
    *数字* 键作为访问键的原因。
- en: 'In the W3C note [Techniques for Web Content Accessibility Guidelines 1.0](http://www.w3.org/TR/WAI-WEBCONTENT-TECHS/),
    section [Keyboard access](http://www.w3.org/TR/WAI-WEBCONTENT-TECHS/#keyboard),
    the need for access keys is motivated as follows:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 W3C 的文档 [Web内容无障碍指南1.0的技术](http://www.w3.org/TR/WAI-WEBCONTENT-TECHS/) 中，章节
    [键盘访问](http://www.w3.org/TR/WAI-WEBCONTENT-TECHS/#keyboard) 中，介绍了对访问键的需求如下：
- en: Not every user has a graphic environment with a mouse or other pointing device.
    Some users rely on keyboard, alternative keyboard or voice input to navigate links,
    activate form controls, etc. Content developers should always ensure that users
    may interact with a page with devices other than a pointing device. A page designed
    for keyboard access (in addition to mouse access) will generally be accessible
    to users with other input devices. What's more, designing a page for keyboard
    access will usually improve its overall design as well.
  id: totrans-split-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 并非每个用户都有带鼠标或其他指向设备的图形环境。一些用户依赖键盘、替代键盘或语音输入来浏览链接、激活表单控件等。内容开发者应始终确保用户可以使用除指向设备以外的设备与页面进行交互。为键盘访问（除了鼠标访问之外）设计的页面通常也能够让其他输入设备的用户使用。而且，为键盘访问设计页面通常还会提高其整体设计。
- en: This can be crucial to people with motoric disabilities. Of course there are
    other conditions where it could be necessary or useful. To take a trivial example,
    if your mouse is temporarily broken, you might still wish to do some Web surfing.
    And in technologies which differ from "normal" PCs or terminals, such as WebTV,
    laptops, and handheld devices, a pointing device or function - if available at
    all - can be significantly more difficult to use for exact pointing than a good
    mouse.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于运动障碍的人来说，这可能至关重要。当然，在其他情况下也可能是必要或有用的。举个简单的例子，如果你的鼠标暂时坏了，你可能仍然希望进行一些网络浏览。在与“正常”个人电脑或终端不同的技术中，如
    WebTV、笔记本电脑和手持设备中，指向设备或功能（如果有的话）相对于好的鼠标来说可能会更难以进行精确指向。
- en: Browsers generally support "tabbing" from one field to another in a form. Thus,
    a form could usually be filled out without using a mouse or other pointing device.
    No special effort (like writing extra attributes) is required from the author,
    except that he should put form fields into a logical order; but that should be
    done anyway, so it's no *extra* effort. Note that <dfn>order</dfn> here refers
    to the order in which the form field elements appear in the HTML source. If this
    does not coincide with the order in which they appear on *screen*, problems may
    arise; this is one reason why one should not use tables e.g. for formatting a
    table that way but only for [expressing the structure of a form](tables.html "How
    to use tables to structurize forms in HTML"). The problems caused by unnatural
    ordering of form fields could, in principle, be reduced by using the [`tabindex`
    attribute](http://www.w3.org/TR/REC-html40/interact/forms.html#adef-tabindex),
    but that too has limited browser support.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器通常支持在表单中从一个字段“切换”到另一个字段。因此，通常可以填写表单而无需使用鼠标或其他指向设备。作者不需要特别努力（如编写额外的属性），只需按逻辑顺序放置表单字段即可；但无论如何，这都应该做到，因此这并不是*额外*的工作。请注意，在这里<dfn>顺序</dfn>指的是表单字段元素在
    HTML 源代码中出现的顺序。如果这与它们在*屏幕*上出现的顺序不一致，则可能会出现问题；这是为什么不应该例如以这种方式格式化表格而仅仅用于[表达表单结构](tables.html
    "如何使用表格在 HTML 中结构化表单")的原因之一。通过使用 [`tabindex` 属性](http://www.w3.org/TR/REC-html40/interact/forms.html#adef-tabindex)，原则上可以减少由于表单字段顺序不自然而导致的问题，但这也受限于浏览器的支持。
- en: For a **large form** with lots of optional fields, so that the user would have
    to "tab" through several fields when he is ready to submit the form, an author
    could make things easier. He could include an **accesskey** attribute for the
    submit field. That way, a user could use the access key to get into that field
    and press enter or return key to submit the form.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有很多可选字段的**大型表单**，当用户准备提交表单时，他可能需要“切换”多个字段。作者可以简化操作。他可以为提交字段包含一个**accesskey**属性。这样，用户可以使用访问键进入该字段，并按回车键或返回键提交表单。
- en: The following presentation contains some explanations to the [description of
    the `accesskey` attribute](http://www.w3.org/TR/html4/interact/forms.html#adef-accesskey)
    in the [HTML 4.0 specification](http://www.w3.org/TR/html4/). (Minor editorial
    changes have been made to the text of the specification, in order to make this
    presentation require less horizontal space.)
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下演示包含一些解释，解释了 [HTML 4.0 规范中 `accesskey` 属性](http://www.w3.org/TR/html4/interact/forms.html#adef-accesskey)
    的描述。 （为了使本演示需要的水平空间较少，对规范文本进行了轻微的编辑更改。）
- en: '| Quotation from the HTML 4.0 specification | Comments  |'
  id: totrans-split-16
  prefs: []
  type: TYPE_TB
  zh: '| HTML 4.0 规范的引用 | 评论  |'
- en: '|'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '*Attribute definitions*'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*属性定义*'
- en: <samp class="adef">accesskey</samp> = [*character*](http://www.w3.org/TR/REC-html40/types.html#type-character)
    [[CN]](http://www.w3.org/TR/REC-html40/types.html#case-neutral)
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="adef">accesskey</samp> = [*字符*](http://www.w3.org/TR/REC-html40/types.html#type-character)
    [[CN]](http://www.w3.org/TR/REC-html40/types.html#case-neutral)
- en: This attribute assigns an access key to an element. An access key is a single
    character from the document character set. **Note.** Authors should consider the
    input method of the expected reader when specifying an accesskey.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性将访问键分配给一个元素。访问键是文档字符集中的单个字符。 **注意。** 作者在指定访问键时应考虑预期读者的输入方法。
- en: '| In principle, the access key character could be any [Unicode](../chars.html#10646)
    character. In practice, the [support](#support "On accesskey support on browsers")
    is much more limited; e.g., IE 4.0 supports only the Latin letters "a" through
    "z" as access keys and treats upper and lower case letters as identical in this
    context. |'
  id: totrans-split-21
  prefs: []
  type: TYPE_TB
  zh: '| 原则上，访问键字符可以是任何[Unicode](../chars.html#10646)字符。实际上，[支持情况](#support "On accesskey
    support on browsers")要更为有限；例如，IE 4.0仅支持拉丁字母"a"到"z"作为访问键，并且在此上下文中将大写和小写字母视为相同。
    |'
- en: '| Pressing an access key assigned to an element gives focus to the element.
    The action that occurs when an element receives focus depends on the element.
    For example, when a user activates a link defined by the [<samp class="einst">A</samp>](http://www.w3.org/TR/REC-html40/struct/links.html#edef-A)
    element, the user agent generally follows the link. When a user activates a radio
    button, the user agent changes the value of the radio button. When the user activates
    a text field, it allows input, etc. |'
  id: totrans-split-22
  prefs: []
  type: TYPE_TB
  zh: '| 按下分配给元素的访问键将使元素获得焦点。元素获得焦点时所发生的动作取决于元素本身。例如，当用户激活由[<samp class="einst">A</samp>](http://www.w3.org/TR/REC-html40/struct/links.html#edef-A)元素定义的链接时，用户代理通常会跟随该链接。当用户激活单选按钮时，用户代理会更改单选按钮的值。当用户激活文本字段时，允许输入等。|'
- en: '"Pressing an access key" is apparently not to be taken literally only (see'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '"按下访问键"显然并非只是字面意义上的操作（参见'
- en: '[notes on invocation methods](#invoc)'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[调用方法注释](#invoc)'
- en: below). The point is that the user can use the keyboard instead of a mouse (or
    a pointing device in general).
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下文）。重点在于用户可以使用键盘而非鼠标（或通用指针设备）。
- en: '|'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| The following elements support the [<samp class="ainst">ACCESSKEY</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accesskey)
    attribute: [<samp class="einst">A</samp>](http://www.w3.org/TR/REC-html40/struct/links.html#edef-A),
    [<samp class="einst">AREA</samp>](http://www.w3.org/TR/REC-html40/struct/objects.html#edef-AREA),
    [<samp class="einst">BUTTON</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#edef-BUTTON),
    [<samp class="einst">INPUT</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#edef-INPUT),
    [<samp class="einst">LABEL</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#edef-LABEL),
    and [<samp class="einst">LEGEND</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#edef-LEGEND),
    and [<samp class="einst">TEXTAREA</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#edef-TEXTAREA).
    | The `A` element is related to links. The `AREA` element is used for clickable
    image maps (which also define links in a sense). The other elements mentioned
    are for form input fields. |'
  id: totrans-split-27
  prefs: []
  type: TYPE_TB
  zh: '| 以下元素支持[<samp class="ainst">ACCESSKEY</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accesskey)属性：[<samp
    class="einst">A</samp>](http://www.w3.org/TR/REC-html40/struct/links.html#edef-A),
    [<samp class="einst">AREA</samp>](http://www.w3.org/TR/REC-html40/struct/objects.html#edef-AREA),
    [<samp class="einst">BUTTON</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#edef-BUTTON),
    [<samp class="einst">INPUT</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#edef-INPUT),
    [<samp class="einst">LABEL</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#edef-LABEL),
    以及 [<samp class="einst">LEGEND</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#edef-LEGEND),
    以及 [<samp class="einst">TEXTAREA</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#edef-TEXTAREA)。|
    元素`A`用于链接。元素`AREA`用于可点击的图像映射（在某种意义上也定义了链接）。其他提到的元素用于表单输入字段。|'
- en: '|'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: This example assigns the access key "U" to a label associated with an [<samp
    class="einst">INPUT</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#edef-INPUT)
    control. Typing the access key gives focus to the label which in turn gives it
    to the associated control. The user may then enter text into the [<samp class="einst">INPUT</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#edef-INPUT)
    area.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将访问键"U"分配给与一个[<samp class="einst">INPUT</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#edef-INPUT)控件关联的标签。输入访问键使标签获得焦点，进而使其关联的控件获得焦点。用户随后可以在[<samp
    class="einst">INPUT</samp>](http://www.w3.org/TR/REC-html40/interact/forms.html#edef-INPUT)区域输入文本。
- en: '[PRE0]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '| The user could fill out and submit the form without using the mouse at all.
    He might, for example, type Alt-u followed by his input text and press the enter
    key.Note, however, that the sketchy form presented in the example has no explicit
    submit field; [it would improve the accessibility to add an `INPUT TYPE="SUBMIT"`
    element](../HTML3.2/5.25.html#submit "Notes on form submission (by pressing enter
    and other means)"). |'
  id: totrans-split-31
  prefs: []
  type: TYPE_TB
  zh: '| 用户完全可以在不使用鼠标的情况下填写并提交表单。例如，他可以输入Alt-u，然后输入文本并按回车键。然而，请注意，示例中的草图表单没有显式的提交字段；[增加一个`INPUT
    TYPE="SUBMIT"`元素将有助于提高可访问性](../HTML3.2/5.25.html#submit "通过按回车键和其他方式提交表单的注释")。
    |'
- en: '|'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: In this example, we assign an access key to a link defined by the [<samp class="einst">A</samp>](http://www.w3.org/TR/REC-html40/struct/links.html#edef-A)
    element. Typing this access key takes the user to another document, in this case,
    a table of contents.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们为由[<samp class="einst">A</samp>](http://www.w3.org/TR/REC-html40/struct/links.html#edef-A)元素定义的链接分配了一个访问键。键入此访问键会将用户带到另一个文档，本例中是目录。
- en: '[PRE1]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| Instead of the typical method of following a link by clicking (on the words
    "Table of Contents" in this case), the user could alternatively use the "C" access
    key (e.g. Alt-C). |'
  id: totrans-split-35
  prefs: []
  type: TYPE_TB
  zh: '| 用户不仅可以通过点击链接（在本例中是“Table of Contents”）来跟踪链接，还可以选择使用“C”访问键（例如Alt-C）。 |'
- en: '| The invocation of access keys depends on the underlying system. For instance,
    on machines running MS Windows, one generally has to press the "alt" key in addition
    to the access key. On Apple systems, one generally has to press the "cmd" key
    in addition to the access key. | Thus, for example, if we have `accesskey="a"`,
    pressing the `a` key typically has no effect or could be taken as normal input
    (in a form input field) or as a command to the browser; a user would typically
    need to type Alt-a (that is, hit the `a` key while keeping the Alt key pressed
    down). |'
  id: totrans-split-36
  prefs: []
  type: TYPE_TB
  zh: '| 调用访问键取决于底层系统。例如，在运行MS Windows的机器上，通常需要按“alt”键以及访问键。在Apple系统上，通常需要同时按下“cmd”键和访问键。
    | 因此，例如，如果我们有`accesskey="a"`，按下`a`键通常没有效果，或者可以被视为正常输入（在表单输入字段中）或作为对浏览器的命令；用户通常需要同时按下Alt-a键（即按下`a`键同时按住Alt键）。
    |'
- en: '| The rendering of access keys depends on the user agent. We recommend that
    authors include the access key in label text or wherever the access key is to
    apply. User agents should render the value of an access key in such a way as to
    emphasize its role and to distinguish it from other characters (e.g., by underlining
    it). | It seems to be the intent that the author specifies a label (using the
    `LABEL` element) and that the browser uses that information for making it clear
    to the user what the access key assignments are. In practice, things don''t work
    that way at present. See [below](#display "Displaying the access key assignments")
    for more discussion. |'
  id: totrans-split-37
  prefs: []
  type: TYPE_TB
  zh: '| 访问键的呈现取决于用户代理。我们建议作者在标签文本或应用访问键的任何位置包含访问键。用户代理应以强调其作用并将其与其他字符区分开的方式呈现访问键的值（例如通过下划线）。
    | 似乎意图是作者指定一个标签（使用`LABEL`元素），而浏览器使用该信息来向用户清楚地显示访问键分配情况。实际上，事实并非如此。有关更多讨论，请参见下文的[显示访问键分配](#display
    "显示访问键分配")。'
- en: Browser support to the `accesskey` attribute is getting wider, but it's still
    not universal; e.g., Netscape 4 lacks it. Since the whole idea is to provide *additional
    possibilities* to users, this is not so serious as it may sound. As an author,
    you can start using the attribute, and those users who really need those possibilities
    will hopefully be able to select a browser which supports them.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器对`accesskey`属性的支持范围正在扩大，但仍不普遍；例如，Netscape 4就不支持。由于整个想法是为用户提供*额外的可能性*，这并不像听起来那么严重。作为作者，你可以开始使用这个属性，那些真正需要这些可能性的用户将希望能够选择支持它们的浏览器。
- en: As some support has been added, the **quality** of implementations has become
    an issue. The following discussion will show that the implementations are still
    rather immature. Naturally, the situation keeps changing, and some of the notes
    below might be somewhat outdated. See also some interesting notes on implementations
    in section [Accessibility Attributes](http://www.blooberry.com/indexdot/html/tagpages/attributes/accessibility.htm)
    of Index DOT Html.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 随着一些支持的增加，实现的**质量**已成为一个问题。接下来的讨论将表明，这些实现仍然相当不成熟。当然，情况不断变化，以下一些注释可能有些过时。另请参阅[Accessibility
    Attributes](http://www.blooberry.com/indexdot/html/tagpages/attributes/accessibility.htm)部分中关于实现的一些有趣注释。
- en: Generally, as regards to support to the features introduced in the HTML 4.0
    specification, see the document [HTML 4.0 in Netscape and Explorer](http://www.webreference.com/dev/html4nsie/)
    (and [my margin notes](../www/4.html) to it). There has of course been progress
    after versions 4.0 of those browsers, but the steps are far smaller than you would
    expect if you took the version number game seriously.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，关于HTML 4.0规范引入的功能的支持，请参阅文档[HTML 4.0在Netscape和Explorer中](http://www.webreference.com/dev/html4nsie/)（以及我对它的边注）。当然，在这些浏览器的4.0版本之后，已经有所进展，但这些步骤远不如你认真考虑版本号游戏时所期望的那样大。
- en: '**Internet Explorer on Windows** has to some extent supported `accesskey` since
    version 4.0\. On IE 4.0, if the value of that attribute is a letter of the English
    alphabet, then using the corresponding keyboard key together with the Alt key
    will focus on the element where the attribute appears. On newer versions, the
    support is wider; e.g., IE 5.5 supports digits as access keys, too. For details,
    see Microsoft''s documentation of [`accesskey` on IE](http://msdn.microsoft.com/workshop/author/dhtml/reference/properties/accesskey.asp).
    Microsoft calls it "accelerator key" in prose, since similar functionality in
    Windows user interface (e.g., in command menus) was already called that way. The
    name reflects the idea of speeding things up, rather than accessibility. It is
    often faster to use keyboard keys rather than the mouse.'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows上的Internet Explorer**从版本4.0开始在一定程度上支持`accesskey`。在IE 4.0上，如果该属性的值是英文字母，则使用相应的键盘键和Alt键将焦点放在出现该属性的元素上。在更新版本中，支持更广泛；例如，IE
    5.5也支持数字作为访问键。详细信息，请参阅Microsoft关于[`IE上的accesskey`](http://msdn.microsoft.com/workshop/author/dhtml/reference/properties/accesskey.asp)的文档。在文中，Microsoft称其为“加速键”，因为Windows用户界面中类似的功能（例如在命令菜单中）早已被称为如此。这个名字反映了加快事物速度的理念，而不仅仅是可访问性。通常情况下，使用键盘键比使用鼠标更快。'
- en: Note that on IE, using the access key typically *only* gives focus to the element.
    If the element is a link, it is not followed. The user can thus move to a link
    (e.g., in order to proceed by tabbing then), as separately from following it,
    which can be activating by hitting the Enter key when the focus is on the link.
    I think this is how things should be, although there's the counterargument that
    *mostly* people just want to follow links when they use access keys for links.
    But the IE implementation might be seen as differing from what the specification
    suggests, especially if you consider the example there that says "In this example,
    we assign an access key to a link defined by the `A` element. Typing this access
    key takes the user to another document, in this case, a table of contents."
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在IE上，使用访问键通常*只*会将焦点放在元素上。如果该元素是一个链接，则不会跟随它。因此，用户可以移动到链接（例如通过制表键然后进行操作），而不是跟随它，这可以通过在焦点位于链接上时按Enter键来激活。我认为事情应该是这样，尽管有一个反驳的观点，即*大多数*人在使用链接的访问键时通常只是想跟随链接。但是IE的实现可能被视为与规范的建议不同，特别是如果你考虑到那里的示例说：“在此示例中，我们将访问键分配给了由`A`元素定义的链接。键入此访问键将使用户转到另一个文档，即目录表。”
- en: The implementation of accesskeys on IE is not very consistent. For example,
    using an accesskey for a checkbox does not just focus on it but also toggles its
    setting. I can imagine the logic behind this, since for a link, there are several
    things you could do with it (e.g., open in a new window or view link properties),
    whereas for a checkbox, you normally just want to toggle it.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在IE上，`accesskey`的实现并不是非常一致。例如，对于复选框使用`accesskey`不仅仅将焦点置于它上面，还会切换其设置。我可以想象其背后的逻辑，因为对于链接，你可以做几件事情（例如，在新窗口中打开或查看链接属性），而对于复选框，通常你只想切换它的状态。
- en: 'There are many other problems as regards to what using an access key really
    causes. For example, if a submit button has an `accesskey` attribute, should we
    assume that using the access key *submits* the form, instead of just *focusing*
    on submit button? It would be rather natural to interpret that it should indeed,
    if we consider what the specification says:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用访问键实际上会引起的其他问题还有很多。例如，如果提交按钮具有`accesskey`属性，我们是否应该假设使用访问键*提交*表单，而不仅仅是*聚焦*于提交按钮？如果我们考虑规范所说的内容，这样理解是相当自然的：
- en: Pressing an access key assigned to an element gives focus to the element. The
    action that occurs when an element receives focus depends on the element. For
    example, when a user activates a link defined by the [<samp class="einst">A</samp>](http://www.w3.org/TR/html4/struct/links.html#edef-A)
    element, the user agent generally follows the link. When a user activates a radio
    button, the user agent changes the value of the radio button. When the user activates
    a text field, it allows input, etc.
  id: totrans-split-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 按下分配给元素的访问键会将焦点放在该元素上。当元素接收焦点时发生的操作取决于该元素。例如，当用户激活由[<samp class="einst">A</samp>](http://www.w3.org/TR/html4/struct/links.html#edef-A)元素定义的链接时，用户代理通常会跟随该链接。当用户激活单选按钮时，用户代理会更改单选按钮的值。当用户激活文本字段时，它允许输入等等。
- en: This seems to say implicitly that "giving focus" automagically causes some "activation",
    intentionally leaving it more or less open what "activation" means in each case.
    The specification should be clarified quite a lot as regards to the semantics.
    But I'm afraid there's little hope; the work is oriented towards [XForms](http://www.w3.org/MarkUp/Forms/
    "XForms - The Next Generation of Web Forms") and other XML based approaches that
    break continuity with HTML.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎含蓄地表明，“给予焦点”自动地导致某种“激活”，有意使得“激活”在每种情况下的具体含义更或多或少地保持开放。关于语义，规范应该进行相当大的澄清。但我担心希望不大；这项工作是面向[XForms](http://www.w3.org/MarkUp/Forms/
    "XForms - The Next Generation of Web Forms")和其他基于XML的方法，这些方法与HTML断续性不同。
- en: 'Testing on Netscape 6.1, Opera 6.0, and IE 5.5, all on Windows 98, I noticed
    confusing differences as regards to an access key for a submit button:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 98上测试Netscape 6.1、Opera 6.0和IE 5.5时，我注意到关于提交按钮的访问键存在令人困惑的差异：
- en: Opera doesn't support access keys
  id: totrans-split-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Opera不支持访问键。
- en: IE focuses on a link when an access key is used but does not follow the link
    (hitting "Enter" is needed), and it submits a form if an access key for the submit
    button is used
  id: totrans-split-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用访问键时，IE会将焦点放在链接上，但不会跟随链接（需要按下“Enter”），并且如果使用提交按钮的访问键，它会提交表单。
- en: Netscape follows a link when an access key is used.
  id: totrans-split-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用访问键时，Netscape会跟随链接。
- en: In IE on the Mac platform, access key is performed with the control key, in
    combination with the key specified in the `accesskey` attribute. For links, the
    implementation follows the link rather than just setting focus on it.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac平台的IE中，访问键是通过控制键和`accesskey`属性中指定的键组合来执行的。对于链接，实现会跟随链接而不仅仅是设置焦点。
- en: On **Netscape 6**, the support is similar. Using an access key to select a link
    causes the link to be followed. And it seems that access keys are not supported
    for form buttons.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Netscape 6**上，支持类似。使用访问键选择链接会导致跟随该链接。而且似乎表单按钮不支持访问键。
- en: On Netscape, the focus must first be on the web page itself before the accesskey
    will work. In other words, if you just bring up Netscape and go to a page with
    accesskeys specified, the accesskeys will not work until you either tab into the
    web page or click on it with your mouse.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在Netscape上，访问键在使用之前必须首先将焦点放在网页本身。换句话说，如果您只是启动Netscape并转到具有指定访问键的页面，则在将焦点移至网页或用鼠标单击网页之前，访问键将不起作用。
- en: The `accesskey` attribute implementation typically uses the same technique (Alt
    key) as the browser's built-in user interface. This means that access key assignments
    in a document may mask out some basic functionality which users might be familiar
    with or, less seriously, the built-in assignments might mask out the page-specific
    assignments.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`accesskey`属性的实现通常使用与浏览器内置用户界面相同的技术（Alt键）。这意味着文档中的访问键分配可能会屏蔽用户可能熟悉的一些基本功能，或者更不严重的情况是，内置的分配可能会屏蔽页面特定的分配。'
- en: For example, if you specify `accesskey="f"` for some link or field, an IE user
    will not be able to use Alt-F in its *normal* meaning within IE (opening the File
    menu). Whether the gain compensates for the loss depends on the document and on
    the user. But the browser's own shortcut assignments could be very important to
    users, especially to people with disabilities, so overriding them could cause
    severe problems, especially when the user does not know about the situation. It
    would be rather distracting if you are accustomed to, say, using Alt-a to Add
    a page to a bookmark list, and then one day you note that on some page, it submitted
    a form that you hadn't quite filled out yet.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您为某个链接或字段指定了`accesskey="f"`，IE用户将无法在IE中的*正常*情况下使用Alt-F（打开“文件”菜单）。是否损失弥补了收益，取决于文档和用户。但浏览器自身的快捷键分配对用户尤其是残疾人群体非常重要，因此覆盖它们可能会引起严重问题，特别是当用户不知情时。如果您习惯于使用Alt-a将页面添加到书签列表，然后某天注意到在某个页面上，它提交了一个您尚未完全填写的表单，那将会非常分散注意力。
- en: For a survey of conflicts, see the document [Accesskeys and Reserved Keystroke
    Combinations](http://www.wats.ca/resources/accesskeysandkeystrokes/38) at [WATS.com](http://www.wats.ca
    "WATS.ca - Web Accessibility Testing and Services").
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解冲突的调查，请参阅文档[访问键和保留的按键组合](http://www.wats.ca/resources/accesskeysandkeystrokes/38)，在[WATS.com](http://www.wats.ca
    "WATS.ca - Web Accessibility Testing and Services")查看。
- en: However, the user can hit first the Alt key, then a normal key (say, the "a"
    key), to invoke IE's built-in shortcut assignment. I wonder how many users know
    that. Moreover, this really works so that hitting the Alt key separately activates
    the menu bar. Pressing IE's built-in hot key for the menu you want then opens
    that menu. This means that the workaround helps in some situations only.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，用户可以先按Alt键，然后按一个普通键（比如说，“a”键），来调用IE内置的快捷键分配。我想知道有多少用户知道这一点。此外，这种方法确实有效，按Alt键单独激活菜单栏。按下IE内置菜单的热键，然后打开该菜单。这意味着这种解决方法只在某些情况下有帮助。
- en: To make things worse, it is impossible to list the "standard" Alt key assignments
    in browsers since the assignments depend on the *language* of the user interface.
    For example, in the Finnish version of IE, Alt-F is unassigned but Alt-T (from
    Finnish Tiedosto 'file') opens a file menu.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，不可能列出浏览器中的“标准”Alt键分配，因为这些分配取决于用户界面的*语言*。例如，在IE的芬兰语版本中，Alt-F未分配，但Alt-T（来自芬兰语的Tiedosto
    '文件'）会打开文件菜单。
- en: Moreover, access key assignments may clash with other technologies as well.
    For example, if you use IE in combination with [IBM Home Page Reader](http://www-3.ibm.com/able/hpr.html)
    and the document contains an element with `accesskey="l"`, then Alt-L will not
    work as an access key for the element but as Home Page Reader's command (for "links
    reading mode"). The keyboard key assignments are often affected by settings at
    the operating system level, too. The problems are illustrated in the detailed
    document [Guidelines for Keyboard User Interface Design](http://msdn.microsoft.com/library/?url=/library/en-us/dnacc/html/ATG_KeyboardShortcuts.asp?frame=true).
    And it needs to be remembered that the variation within Windows platforms is just
    one part of the variation in the World Wide Web.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，访问键分配也可能与其他技术冲突。例如，如果您将IE与[IBM主页阅读器](http://www-3.ibm.com/able/hpr.html)结合使用，并且文档包含带有`accesskey="l"`的元素，则Alt-L将不作为元素的访问键，而是作为主页阅读器的命令（用于“链接阅读模式”）。键盘键分配通常也受操作系统级别设置的影响。这些问题在详细文档[键盘用户界面设计指南](http://msdn.microsoft.com/library/?url=/library/en-us/dnacc/html/ATG_KeyboardShortcuts.asp?frame=true)中有所体现。还需记住，在Windows平台内的变化只是全球网络变化的一部分。
- en: Assuming that you are using a browser which supports `accesskey`, you can see
    how the following works.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您使用支持`accesskey`的浏览器，您可以看看以下内容是如何工作的。
- en: The following simple form has accesskeys for all fields. You can try submitting
    the form; this will only result in the form data being echoed back to you.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的简单表单为所有字段设置了访问键。您可以尝试提交表单；这只会导致表单数据被回显给您。
- en: 'A simple link: [**J**ukka K. Korpela](../personal.html "Personal home page
    of Jukka K. Korpela, IT generalist and specialist") (accesskey: J).'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 简单链接：[**J**ukka K. Korpela](../personal.html "Jukka K. Korpela 的个人主页，IT通才与专家")（访问键：J）。
- en: 'Another simple link, with a digit as accesskey: [Home (main page of this site)](../index.html)
    (accesskey: digit 1).'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个简单的链接，带有数字作为访问键：[主页（本站的首页）](../index.html)（访问键：数字 1）。
- en: 'As mentioned [above](#asg), one cannot rely on browsers displaying the access
    key assignments (at present or in the near future). To clarify the situation,
    consider the following example given in the HTML 4.0 specification:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[上文](#asg)所述，目前或不久的将来，不能依赖浏览器显示访问键分配。为了澄清情况，请考虑HTML 4.0规范中提供的以下示例：
- en: '[PRE2]'
  id: totrans-split-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On your current browser, this looks like the following:'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在您当前的浏览器上，看起来像是以下内容：
- en: The specification seems to suggest that a browser should automatically indicate
    to the user that "U" is an accesskey for the input field, e.g. by underlining
    that character (presumably as it appears within the `LABEL` element). But although
    IE supports (from version 4.0 onwards) `accesskey`, there's no underlining in
    the presentation. In fact there is no evidence of real support to `LABEL`. It
    is also debatable whether the specification really suggests what it seems to be
    suggesting--that browsers should, in a case like this, check the content of the
    `LABEL` field and underline (any?) occurrence of the accesskey character!
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 规范似乎暗示浏览器应自动向用户指示“U”是输入字段的访问键，例如通过在`LABEL`元素内部（假设其出现在其中）下划线化该字符。但是，尽管IE（从版本4.0起）支持`accesskey`，但在显示上并没有下划线。实际上，也没有真正支持`LABEL`的证据。规范是否真正建议了其所暗示的情况--浏览器在这种情况下应检查`LABEL`字段的内容并下划线化（任何？）访问键字符--这也是值得商榷的。
- en: Thus it seems that the **author** should take care of the underlining or other
    specific presentation, e.g. writing the content of `LABEL` in this case as
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，看起来**作者**应该注意下划线或其他特定的呈现方式，例如在本例中编写`LABEL`的内容如下
- en: '[PRE3]'
  id: totrans-split-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Such explicit presentational suggestions may become unnecessary in the future
    if the browser support improves, of course. But for the time being, we need to
    consider how to present them.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果浏览器支持得到改进，这种明确的呈现建议在未来可能变得不再必要。但眼下，我们需要考虑如何呈现它们。
- en: To let users benefit from access keys, you need to take care of displaying the
    access key assignments.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要让用户受益于访问键，您需要注意显示访问键分配情况。
- en: The method used in the [examples](#ex) above--explicitly telling the access
    key after an element, and additionally bolding the access key letter when applicable--is
    somewhat naivistic but it can reasonably be expected to carry the message to those
    who need it. The main problem with it would probably not be the naivity but the
    fact that a reference to access keys might confuse people who do *not* need that
    information. They might have difficulties in understanding whether "accesskey"
    is something they need to know about. You might consider making that word a link
    to a suitable document about access keys. (The present document of mine can be
    used for the purpose, although it would probably be all too detailed for that.)
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[示例](#ex)中使用的方法--在元素后明确告知访问键，并在适用时加粗访问键字母--有些天真，但可以合理地期望它传达消息给那些需要的人。它的主要问题可能不是天真，而是访问键的参考可能会使不需要该信息的人感到困惑。他们可能难以理解“accesskey”是否是他们需要了解的内容。您可以考虑将该词链接到有关访问键的适当文档。我的现有文档可以用于此目的，尽管对于这一目的来说可能过于详细了。
- en: 'If there is a large number of access key assignments on a page or if you would
    otherwise like to express the assignments concisely, you could use one or several
    of the following alternatives:'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果页面上有大量访问键分配或者您希望简洁地表示分配，您可以使用以下一个或多个替代方案之一：
- en: '| Sample | Explanation of the method  |'
  id: totrans-split-74
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 方法的解释 |'
- en: '| home | Make the access key letter underlined, using the `U` element. This
    would correspond to widespread usage for analogous assignments in many widely
    used programs (e.g. Web browsers).  |'
  id: totrans-split-75
  prefs: []
  type: TYPE_TB
  zh: '| 主页 | 使用 `U` 元素使访问键字母带有下划线。这在许多广泛使用的程序（例如Web浏览器）中都是普遍使用的类似分配。 |'
- en: '| Home  | Make the access key letter appear in UPPERCASE. This too would correspond
    to widespread practice |'
  id: totrans-split-76
  prefs: []
  type: TYPE_TB
  zh: '| 主页 | 使访问键字母以大写形式显示。这也符合广泛的实践。 |'
- en: '| **h**ome | Make the access key letter **strongly emphasized**, using the
    `STRONG` element, or **bolded**, using the `B` element. (In this context, there
    isn''t much practical difference between these; but in principle, a speech-based
    user agent can be expected to present `STRONG` in some meaningful way whereas
    `B` would be meaningless to it.) This would make it more prominent. You might
    even consider suggesting--via a stylesheet or via the deprecated `FONT` element--a
    presentation where the letter appears in some distinctive color (although this
    might easily interfere with link colors).  |'
  id: totrans-split-77
  prefs: []
  type: TYPE_TB
  zh: '| **h**ome | 使用`STRONG`元素强调访问键字母，或使用`B`元素加粗（在这种情况下，这两者在实际上没有太大的差别；但原则上，语音用户代理可以预期以某种有意义的方式呈现`STRONG`，而`B`对它来说是没有意义的）。这将使其更加突出。您甚至可以考虑通过样式表或通过废弃的`FONT`元素建议，将字母呈现为某种特殊的颜色（尽管这可能会轻易干扰到链接颜色）。  |'
- en: These are all based on the assumption that the access key letter appears in
    the context e.g. in the link text or in the explanatory text (or label) preceding
    an input field. Usually that can be arranged; as an author, *you* formulate those
    texts and you select the access key assignments.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是基于以下假设：访问键字母在上下文中出现，例如在链接文本中或在输入字段之前的解释文本（或标签）中。通常可以安排这样做；作为作者，*你*制定这些文本，并选择访问键分配。
- en: It can hardly cause harm to use *all* of the methods mentioned to make the message
    clearer.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*所有*提到的方法几乎不会对使消息更清晰造成伤害。
- en: For normal submit (or reset) **buttons** in forms, underlining and bolding are
    impossible, since the text in a button is specified using an attribute, and attribute
    values cannot contain HTML markup. Thus, for example, if you have
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于表单中的普通提交（或重置）**按钮**，由于按钮中的文本是使用属性指定的，并且属性值不能包含HTML标记，因此加下划线和加粗是不可能的。因此，例如，如果你有
- en: '[PRE4]'
  id: totrans-split-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: then you cannot underline or bold the letter "A" in "Add this". Theoretically,
    you could use `INPUT TYPE="IMAGE"` and an image which contains the text "Add this"
    with A underlined (and/or bolded), but in practice [image buttons cause more problems
    than they might solve](imagebutton.html). Since the use of uppercase alone is
    not a very good signal--even if you otherwise use all lowercase in submit button
    texts--it seems to be necessary to include an explicit remark about the access
    key.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 那么你就不能在“Add this”中的字母“A”上加下划线或粗体。理论上，你可以使用`INPUT TYPE="IMAGE"`和一个包含“A”被下划线（和/或加粗）的文本的图像，但实际上，[图像按钮带来的问题可能比它们解决的问题更多](imagebutton.html)。由于仅使用大写字母本身并不是一个很好的信号--即使在提交按钮文本中你使用全部小写--似乎有必要包含关于访问键的明确说明。
- en: For *links* it seems best to present the access key letter underlined, bold
    face, and in upper case. For *buttons*, write the access key letter in upper case
    and provide an explanatory statement about the access key.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*链接*，最好将访问键字母呈现为下划线、加粗和大写。对于*按钮*，将访问键字母写成大写，并提供有关访问键的解释性语句。
- en: 'This is illustrated with the following simple examples:'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过以下简单示例来说明：
- en: '| HTML markup | Presentation on your current browser |'
  id: totrans-split-85
  prefs: []
  type: TYPE_TB
  zh: '| HTML标记 | 在您当前浏览器上的演示 |'
- en: '|'
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE5]'
  id: totrans-split-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '| [table of **C**ontent](index.html) |'
  id: totrans-split-88
  prefs: []
  type: TYPE_TB
  zh: '| [目录**C**](index.html) |'
- en: '|'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE6]'
  id: totrans-split-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|  |'
  id: totrans-split-91
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: It might be desirable to have some common conventions on access key assignments,
    e.g. so that some specific access key would always take you upwards in a document
    hierarchy. There seems be little hope of uniformity in this area. Quite often
    the access keys *need* to be application-dependent; for example, when you have
    a form with lots of input fields, you might have to use all characters a - z for
    them. Moreover, access key assignments in a document might interfere with *browser
    "standards"*, if the browser implements `accesskey` similarly to access keys in
    its own built-in user interface (as [several browsers do](#warn)).
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 可能希望在访问键分配上有一些常见的约定，例如，某些特定的访问键总是将您带到文档层次结构中的上层。在这个领域似乎很难达成统一。在这方面通常需要应用程序依赖的访问键分配；例如，当你有一个包含大量输入字段的表单时，你可能需要使用所有字符a
    - z。此外，文档中的访问键分配可能会与*浏览器“标准”*干扰，如果浏览器像其内置用户界面中的访问键一样实现`accesskey`（正如[几个浏览器所做的](#warn)）。
- en: 'But should you like to adopt some *site-wide* "standard", here is one possibility:'
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你希望采用一些*全站*“标准”，这里有一种可能性：
- en: Suggested "standard" access key assignments
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 建议的“标准”访问键分配
- en: '| key | Meaning (and corresponding [`REL` value](../HTML3.2/4.7.html#relrev)
    if applicable) |'
  id: totrans-split-95
  prefs: []
  type: TYPE_TB
  zh: '| 键 | 含义（及相应的[`REL`值](../HTML3.2/4.7.html#relrev)如果适用） |'
- en: '| A | **a**uthor''s home page |'
  id: totrans-split-96
  prefs: []
  type: TYPE_TB
  zh: '| A | **a**uthor''s home page |'
- en: '| B | **b**eginning of a series of documents to which the current document
    belongs (`REL="Start"`) |'
  id: totrans-split-97
  prefs: []
  type: TYPE_TB
  zh: '| B | 系列文档中当前文档的**起始**(`REL="Start"`) |'
- en: '| C | table of **c**ontents for current document (`REL="Contents"`) |'
  id: totrans-split-98
  prefs: []
  type: TYPE_TB
  zh: '| C | 当前文档的**目录**(`REL="Contents"`) |'
- en: '| G | **g**lossary for current document (`REL="Glossary"`) |'
  id: totrans-split-99
  prefs: []
  type: TYPE_TB
  zh: '| G | 当前文档的**词汇表**(`REL="Glossary"`) |'
- en: '| H | **h**elp for using current document (`REL="Help"`) |'
  id: totrans-split-100
  prefs: []
  type: TYPE_TB
  zh: '| H | 使用当前文档的**帮助**(`REL="Help"`) |'
- en: '| I | (keyword) **i**ndex for current document (`REL="Index"`) |'
  id: totrans-split-101
  prefs: []
  type: TYPE_TB
  zh: '| I | 当前文档的（关键字）**索引**(`REL="Index"`) |'
- en: '| M | **m**ail to author (for a `mailto:` link with the author''s address)
    |'
  id: totrans-split-102
  prefs: []
  type: TYPE_TB
  zh: '| M | 向**作者发送邮件**（用于`mailto:`链接及作者地址） |'
- en: '| N | **n**ext document in a series of documents to which the current document
    belongs (`REL="Next"`) |'
  id: totrans-split-103
  prefs: []
  type: TYPE_TB
  zh: '| N | 系列文档中当前文档的**下一个文档**(`REL="Next"`) |'
- en: '| P | **p**revious document in a series of documents to which the current document
    belongs (`REL="Prev"`) |'
  id: totrans-split-104
  prefs: []
  type: TYPE_TB
  zh: '| P | 系列文档中当前文档的**前一个文档**(`REL="Prev"`) |'
- en: '| R | **r**eset a form |'
  id: totrans-split-105
  prefs: []
  type: TYPE_TB
  zh: '| R | **重置表单** |'
- en: '| S | **s**ubmit a form |'
  id: totrans-split-106
  prefs: []
  type: TYPE_TB
  zh: '| S | **提交表单** |'
- en: '| U | **u**pwards in a hierarchy--typically, this leads to a page describing
    (e.g. as a list of links) a collection of documents to which the current document
    belongs |'
  id: totrans-split-107
  prefs: []
  type: TYPE_TB
  zh: '| U | **向上**浏览层次结构--通常导致页面描述（例如链接列表形式）当前文档所属的文档集合 |'
- en: That would still leave several letters unassigned, so they could be used for
    form fields and for essential links which are not covered in the general scheme.
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这样仍会有几个字母未分配，因此可以用于表单字段和未包含在通用方案中的重要链接。
- en: 'The [WebAIM](http://www.webaim.org/) (Web Accessibility In Mind) site uses
    the following assignments:'
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[WebAIM](http://www.webaim.org/)（以Web可访问性为主旨）网站使用以下分配：'
- en: WebAIM access keys
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: WebAIM访问键
- en: '| key | Meaning |'
  id: totrans-split-111
  prefs: []
  type: TYPE_TB
  zh: '| 键 | 含义 |'
- en: '| 1 | home page (i.e., main page of site) |'
  id: totrans-split-112
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 主页（即站点的主页） |'
- en: '| 2 | skip navigation (i.e., location after navigational links at the start
    of page) |'
  id: totrans-split-113
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 跳过导航（即在页面开始处导航链接后的位置） |'
- en: '| 3 | printer version |'
  id: totrans-split-114
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 打印版本 |'
- en: '| 4 | index/search |'
  id: totrans-split-115
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 索引/搜索 |'
- en: 'Paul Bohman has explained this in his [message](http://www.webaim.org/discussion/mail_message.php?id=800)
    on the [WebAIM Forum mailing list](http://www.webaim.org/discussion/):'
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: 保罗·博曼在[论坛邮件列表](http://www.webaim.org/discussion/mail_message.php?id=800)上解释道：
- en: You'll notice that we used numbers rather than letters. I would have preferred
    to use letters, but, unfortunately, when you use letters, there is a much greater
    likelihood that you will interfere with pre-existing keyboard shortcuts in either
    the browser or the assistive technologies (e.g. JAWS, Home Page Reader).
  id: totrans-split-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你会注意到我们使用了数字而不是字母。我本来更愿意使用字母，但不幸的是，使用字母时，很可能会干扰浏览器或辅助技术（例如JAWS，主页阅读器）中现有的键盘快捷键。
- en: On the other hand, even digit keys are used as built-in access keys by several
    programs. However, this typically means that in the case of conflict, the built-in
    assignment is in use.
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，许多程序将数字键用作内置访问键。然而，这通常意味着在冲突的情况下，将使用内置分配。
- en: 'In the United Kingdom, the [Guidelines for UK Government websites](http://www.cabinetoffice.gov.uk/e-government/resources/handbook/introduction.asp)
    specify, in section [2.4.4UK Government accesskeys standard](http://www.cabinetoffice.gov.uk/e-government/resources/handbook/html/2-4.asp#2.4.4),
    recommends the following assignments:'
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在英国，[英国政府网站指南](http://www.cabinetoffice.gov.uk/e-government/resources/handbook/introduction.asp)中的第[2.4.4英国政府访问键标准](http://www.cabinetoffice.gov.uk/e-government/resources/handbook/html/2-4.asp#2.4.4)建议以下分配：
- en: '| S | skip navigation |'
  id: totrans-split-120
  prefs: []
  type: TYPE_TB
  zh: '| S | 跳过导航 |'
- en: '| 1 | home page |'
  id: totrans-split-121
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 主页 |'
- en: '| 2 | what''s new page |'
  id: totrans-split-122
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 最新内容页面 |'
- en: '| 3 | site map |'
  id: totrans-split-123
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 网站地图 |'
- en: '| 4 | search facility on the site |'
  id: totrans-split-124
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 网站搜索功能 |'
- en: '| 5 | frequently asked questions (FAQ) |'
  id: totrans-split-125
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 常见问题解答（FAQ） |'
- en: '| 6 | help page/facility |'
  id: totrans-split-126
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 帮助页面/功能 |'
- en: '| 7 | complaints procedure |'
  id: totrans-split-127
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 投诉程序 |'
- en: '| 8 | terms and conditions (including privacy statement) |'
  id: totrans-split-128
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 条款和条件（包括隐私声明） |'
- en: '| 9 | feedback page |'
  id: totrans-split-129
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 反馈页面 |'
- en: '| 0 | information about of accesskeys |'
  id: totrans-split-130
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 访问键的信息 |'
- en: In practice, UK government sites contain other accesskeys as well. For example
    the [CabinetOffice](http://www.cabinetoffice.gov.uk) site also assigns C, I, J,
    K, L, M, N, O, P, Q, R, U, X, Y, and Z. In practice this guarantees that there
    are many conflicts with built-in keyboard shortcuts in browsers and other software.
  id: totrans-split-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，英国政府网站还包含其他访问键。例如，[内阁办公室](http://www.cabinetoffice.gov.uk) 网站还分配了C、I、J、K、L、M、N、O、P、Q、R、U、X、Y和Z。在实践中，这保证了与浏览器和其他软件中内置键盘快捷方式的许多冲突。
- en: 'The UK recommendation adds:'
  id: totrans-split-132
  prefs: []
  type: TYPE_NORMAL
  zh: 英国的建议增加了：
- en: When this navigational system is made available, it is important to inform your
    website users, as soon as they enter. Otherwise, users who are least able to do
    so will be faced with a mouse-dependent navigational system that could have been
    bypassed. Each page could display a message, e.g. ‘UKgovernment accesskeys system’
  id: totrans-split-133
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当这种导航系统可用时，重要的是在用户进入网站后尽快通知他们。否则，最不擅长使用鼠标的用户将面临一个本可以绕过的依赖鼠标的导航系统。每个页面可以显示一个消息，例如“UK政府访问键系统”。
- en: This means that all users will receive an announcement about technicalities,
    breaking a fundamental design principle. Moreover, the announcement is apparently
    meant to be prominent. This means causing disturbing all users in order to potentially
    help a few.
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着所有用户都将收到有关技术细节的公告，这违反了一个基本的设计原则。而且，显然这个公告意图显著。这就意味着为了可能帮助一些人而打扰所有用户。
- en: 'Jesper Tverskov has made an interesting suggestion: [Use first letter as accesskey](http://www.klapmusen.dk/artikel.aspx?xml=20021031&lg=en).
    Systematically using the first letter of a link text as the accesskey could be
    a simple, easy to understand and easy to remember scheme.'
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
  zh: Jesper Tverskov提出了一个有趣的建议：[使用首字母作为访问键](http://www.klapmusen.dk/artikel.aspx?xml=20021031&lg=en)。系统地使用链接文本的首字母作为访问键可能是一个简单、易于理解和记忆的方案。
- en: The *need* for access keys (in some sense) is obvious. There are many reasons
    why pages should be made useable using keyboard only, without a mouse, and in
    a convenient way. But the `accesskey` attributes don't seem to help in solving
    the problem very well. They might be useful, if a site-wide system of access keys
    makes a site more easily navigable. If you use them, the assignments should be
    described separately, not in `title` attributes or relying on underlining or other
    small hints. And I would recommend using just *digits* for access keys, with digit 0
    acting as access key to a document that describes the other assignments.
  id: totrans-split-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于访问键的*需求*（在某种意义上）是显而易见的。有很多原因说明页面应该能够只用键盘而不用鼠标方便地使用。但是`accesskey`属性似乎并没有很好地解决这个问题。如果全站使用访问键系统能使网站更易于导航，它们可能会有用。如果您使用它们，应该单独描述分配，而不是依赖于`title`属性或者其他小的提示。我建议仅使用*数字*作为访问键，其中数字0作为访问键指向描述其他分配的文档。
- en: '* * *'
  id: totrans-split-137
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
