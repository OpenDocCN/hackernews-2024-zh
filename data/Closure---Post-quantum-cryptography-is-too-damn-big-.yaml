- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:37:14'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:37:14'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Closure | Post-quantum cryptography is too damn big.
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束 | 后量子密码学实在太大了。
- en: 来源：[https://dadrian.io/blog/posts/pqc-signatures-2024/](https://dadrian.io/blog/posts/pqc-signatures-2024/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://dadrian.io/blog/posts/pqc-signatures-2024/](https://dadrian.io/blog/posts/pqc-signatures-2024/)
- en: Large-scale quantum computers are capable of breaking all of the common forms
    of asymmetric cryptography used on the Internet today. Luckily, they don’t exist
    yet. The Internet-wide transition to post-quantum cryptography began in 2022 when
    NIST announced their final candidates for key exchange and signatures in the [NIST
    PQC competition](https://csrc.nist.gov/projects/post-quantum-cryptography). There
    is [plenty](https://blog.cloudflare.com/pq-2024/) [written](https://bughunters.google.com/blog/5108747984306176/google-s-threat-model-for-post-quantum-cryptography)
    about the [various algorithms](https://durumcrustulum.com/2024/02/24/how-to-hold-kems/)
    and [standardization](https://csrc.nist.gov/projects/pqc-dig-sig) [processes](https://wiki.ietf.org/group/sec/PQCAgility)
    that are underway.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大规模量子计算机能够破解今天互联网上使用的所有常见非对称密码学形式。幸运的是，它们目前还不存在。从2022年起，全网范围内向后量子密码学的过渡开始，当时NIST宣布了他们在[NIST
    PQC竞赛](https://csrc.nist.gov/projects/post-quantum-cryptography)中的最终候选者。关于正在进行的各种算法和标准化进程，[有大量的文章](https://blog.cloudflare.com/pq-2024/)，[讨论](https://bughunters.google.com/blog/5108747984306176/google-s-threat-model-for-post-quantum-cryptography)，[以及](https://durumcrustulum.com/2024/02/24/how-to-hold-kems/)
    [标准化](https://csrc.nist.gov/projects/pqc-dig-sig) [进程](https://wiki.ietf.org/group/sec/PQCAgility)
    正在进行中。
- en: The conventional wisdom is that it will take a long time to transition to post-quantum
    cryptography, so we need to start standardizing and deploying things *now*, even
    though quantum computers are not actually visible on the horizon. We’ll take the
    best of what comes out the NIST competitions, and deploy it.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 传统观点是，转向后量子密码学需要很长时间，因此我们需要现在开始标准化和部署事物，尽管量子计算机实际上还没有出现在地平线上。我们将采纳NIST竞赛中涌现的最佳方案，并加以部署。
- en: Unfortunately, there has not been enough discussion about how what NIST has
    standardized is simply not good enough to deploy on the public web in most cases.
    We need better algorithms. Specifically, we need algorithms that use fewer bytes
    on the wire—a KEM that when embedded in a TLS ClientHello is still under one MTU,
    a signature that performs on par with ECDSA that is no larger than RSA-2048, and
    a sub-100 byte signature where we can optionally handle a larger public key.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，目前还没有足够讨论关于NIST标准化的内容是否足够在大多数情况下部署在公共网络上。我们需要更好的算法。具体来说，我们需要使用在传输中字节数较少的算法——一个嵌入在TLS
    ClientHello中的KEM仍然在一个MTU以下，一个性能与ECDSA相当且不大于RSA-2048的签名，以及一个小于100字节的签名，我们可以选择处理一个更大的公钥。
- en: 'To understand why, we’ll look at the current state of HTTPS. Cryptography is
    primarily used in five ways for HTTPS on the public web:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解为什么，我们将看看HTTPS的当前状态。在公共网络上，HTTPS主要通过五种方式使用密码学：
- en: '**Symmetric Encryption/Decryption**: The actual data for HTTP(2) is transmitted
    as data inside a TLS connection using some authenticated cipher (AEAD) such as
    AES-GCM. This is largely [already secure](https://words.filippo.io/dispatches/post-quantum-age/)
    against quantum computers.'
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对称加密/解密**：HTTP(2)的实际数据以一些认证的密码（AEAD）如AES-GCM的形式在TLS连接中作为数据传输。这在[量子计算机](https://words.filippo.io/dispatches/post-quantum-age/)面前大体上已经是安全的。'
- en: '**Key Agreement**: Symmetric cryptography requires a secret key. Key agreement
    is the process in which two parties mutually generate a secret key. TLS 1.3 traditionally
    used Elliptic Curve Diffie-Hellman for key agreement. All non-post-quantum key
    exchange mechanisms, including Diffie-Hellman, are broken by quantum computers.'
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密钥协商**：对称加密需要一个秘密密钥。密钥协商是两个方共同生成秘密密钥的过程。TLS 1.3传统上使用椭圆曲线Diffie-Hellman进行密钥协商。所有非后量子密钥交换机制，包括Diffie-Hellman，都被量子计算机破解了。'
- en: '**Server Identity**: Servers are authenticated via X.509 certificates. At minimum,
    a server certificate (leaf certificate) contains a public key, and a signature
    from an intermediate certificate. The intermediate certificate contains another
    public key, and a signature from an trusted root certificate.'
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器身份**：服务器通过X.509证书进行身份验证。至少，服务器证书（叶证书）包含一个公钥和来自中间证书的签名。中间证书包含另一个公钥和来自受信任根证书的签名。'
- en: '**Issuance Transparency**: The [public Web PKI](https://dadrian.io/blog/posts/certificates-explained)
    relies on trusted third-parties known as *Certification Authorities* to validate
    domain ownership. Certificates are publicly logged, and servers attest that their
    certificates are included in the logs. This provides a deterrent for malicious
    certificate issuance, since any certificate that is maliciously issued to an attacker
    for some site will be publicly visible, and has the potential to be detected.
    Servers achieve issuance transparency by providing at least two *Signed Certificate
    Timestamps*, usually embedded in the certificate itself.'
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**签发透明性**：[公共网络PKI](https://dadrian.io/blog/posts/certificates-explained)依赖于被称为*认证机构*的可信第三方来验证域名所有权。证书是公开记录的，并且服务器声明它们的证书已包含在日志中。这提供了对恶意证书签发的威慑，因为任何恶意颁发给攻击者某个站点的证书都将是公开可见的，有可能被检测到。服务器通过提供至少两个*签名证书时间戳*来实现签发透明性，通常嵌入在证书本身中。'
- en: '**Handshake Authentication**: The identity of the server needs to be bound
    to the connection itself during the TLS handshake. In TLS 1.3, this is provided
    by a signature over the server key share message from the key in the server certificate
    in the CertificateVerify message.'
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**握手认证**：在TLS握手期间，需要将服务器的身份绑定到连接本身。在TLS 1.3中，这由对服务器密钥分享消息的签名提供，该签名来自CertificateVerify消息中服务器证书的密钥。'
- en: There is a threat from *future* quantum computers to encrypted network connections
    *today* in the form of [“harvest now, decrypt later”](https://en.wikipedia.org/wiki/Harvest_now,_decrypt_later)
    attacks. To defend against this, we only need to ensure that key agreement and
    symmetric encryption are “quantum resistant” (secure in the presence of quantum
    computers). Luckily, symmetric encryption is already quantum resistant, and so
    defending against harvest-now-decrypt-later only requires updating the key exchange
    algorithm to a post-quantum variant.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，存在来自未来量子计算机的威胁，采用[“先收集，后解密”](https://en.wikipedia.org/wiki/Harvest_now,_decrypt_later)攻击形式对加密网络连接构成威胁。为了抵御这一威胁，我们只需确保密钥协商和对称加密是“量子抗性”的（即在量子计算机存在的情况下安全）。幸运的是，对称加密已经是量子抗性的，因此防御“先收集，后解密”攻击只需要将密钥交换算法更新为后量子变体。
- en: The remaining uses of cryptography in HTTPS—server identity, issuance transparency,
    and handshake authentication—will eventually need to transition to post-quantum
    variants. In the current structure of TLS, this means replacing all signatures
    with post-quantum variants. However, the need to do so, while no less *important*
    ^(than transitioning key exchange, is less *urgent*. This matches the actions
    of browsers, who are [actively](https://www.reddit.com/r/firefox/comments/1827g86/tls_13_hybridized_kyber_support_for_firefox/)
    [deploying](https://blog.chromium.org/2023/08/protecting-chrome-traffic-with-hybrid.html)
    post-quantum key exchange algorithms. An X25519 key exchange involves the client
    and server transmitted 32 bytes each. The NIST winner for key agreement, [ML-KEM
    (Kyber)](https://csrc.nist.gov/pubs/fips/203/ipd), involves the client sending
    1,184 bytes and the server sending 1,088 bytes.)
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTTPS中剩余的加密用途——服务器身份、签发透明性和握手认证——最终需要过渡到后量子变体。在当前TLS的结构中，这意味着将所有签名替换为后量子变体。然而，尽管这样做的必要性与过渡密钥协商一样*重要*，但不那么*紧急*。这与正在[积极](https://www.reddit.com/r/firefox/comments/1827g86/tls_13_hybridized_kyber_support_for_firefox/)
    [部署](https://blog.chromium.org/2023/08/protecting-chrome-traffic-with-hybrid.html)后量子密钥交换算法的浏览器行动相一致。X25519密钥交换涉及客户端和服务器各传输32字节。NIST密钥协商的获胜者，[ML-KEM（Kyber）](https://csrc.nist.gov/pubs/fips/203/ipd)，涉及客户端发送1,184字节和服务器发送1,088字节。
- en: However, no widely-used browser has started deploying post-quantum signatures.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，目前没有广泛使用的浏览器开始部署后量子签名。
- en: 'This is because post-quantum signatures and their corresponding public keys
    are too damn big. There are 5 signatures and 2 public keys transmitted during
    an average TLS handshake for HTTPS:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为后量子签名及其相应的公钥太大了。在HTTPS的平均TLS握手过程中，有5个签名和2个公钥传输：
- en: The leaf certificate has 1 signing public key of the site, and 1 signature from
    the intermediate certificate.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 叶证书具有站点的1个签名公钥和中间证书的1个签名。
- en: The intermediate certificate has 1 signing public key, used to the validate
    the signature on the leaf, and 1 signature from the key on the root certificate,
    which is used to validate the authenticity of the intermediate certificate. The
    root certificate and its embedded public key are predistributed to clients.
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间证书有1个签名公钥，用于验证叶上的签名，以及来自根证书的密钥的1个签名，用于验证中间证书的真实性。根证书及其嵌入的公钥预先分发给客户端。
- en: The handshake itself is has 1 signature from the private key corresponding to
    the public key in the leaf certificate.
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 握手本身只有1个来自与叶证书对应的公钥的私钥的签名。
- en: Each Signed Certificate Timestamp (SCT) contains one signature. The public key
    used to the validate the signature is predistributed to clients. Most certificates
    have 2 SCTs and therefore 2 additional signatures.
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个签名的证书时间戳（SCT）包含一个签名。用于验证签名的公钥预先分发给客户端。大多数证书有2个SCT，因此还有2个额外的签名。
- en: 'The current breakdown of key and signature sizes in TLS is roughly:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: TLS中密钥和签名大小的当前分解大致为：
- en: Root certificates often contain RSA keys, as do intermediate certificates. Root
    certificates are predistributed, and intermediates are provided by the server,
    alongside the leaft certificate. An RSA intermediate certificate has a 4096-bit
    (512 byte) signature, and a 2048-bit (256 byte) public key.
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根证书通常包含RSA密钥，中间证书也是如此。根证书预先分发，中间证书由服务器提供，与叶子证书一起。RSA中间证书有一个4096位（512字节）的签名，以及一个2048位（256字节）的公钥。
- en: An ECDSA leaf certificate has a 32-byte key and a 256-byte RSA signature from
    the intermediate.
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECDSA叶证书有一个32字节的密钥和一个来自中间证书的256字节的RSA签名。
- en: The handshake contains a 64-byte ECDSA signature.
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 握手包含一个64字节的ECDSA签名。
- en: Each SCT contains a 64-byte ECDSA signature.
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个SCT包含一个64字节的ECDSA签名。
- en: In total, this is 512 + 256 + 256 + 32 + 64 + 2*64 = 1,248 bytes of signatures
    and public keys in a normal TLS handshake for HTTPS. Of the winning signature
    algorithms from the first NIST PQC competition, [ML-DSA (Dilithium)](https://csrc.nist.gov/pubs/fips/204/ipd)
    is the only signature algorithm that could be used in the context of TLS ^(and
    it has 1,312-byte public keys and 2,420-byte signatures. This means *a single
    ML-DSA public key is bigger than all of the 5 signatures and 2 public keys currently
    transmitted during an HTTPS connection*. In a direct “copy-and-replace” of current
    signature algorithms with ML-DSA, a TLS handshake would contain 5*2420 + 2*1312
    = 14,724 bytes of signatures and public keys, an over 10x increase.)
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在HTTPS的普通TLS握手中，签名和公钥总共有512 + 256 + 256 + 32 + 64 + 2*64 = 1,248字节。从第一个NIST
    PQC竞赛的获胜签名算法中，[ML-DSA（Dilithium）](https://csrc.nist.gov/pubs/fips/204/ipd)是唯一可在TLS环境中使用的签名算法，它有1,312字节的公钥和2,420字节的签名。这意味着*单个ML-DSA公钥比当前在HTTPS连接期间传输的所有5个签名和2个公钥还要大*。在当前签名算法与ML-DSA的直接“复制和替换”中，TLS握手将包含5*2420
    + 2*1312 = 14,724字节的签名和公钥，增加了10倍以上。
- en: Barring a large-scale quantum computer staring us in the face, this is not a
    tenable amount of data to send simply to *open* a connection. As a baseline reality
    check, we should not be sending over 1% of a 3.5" floppy disk purely in signatures
    and public keys^.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除非面对一个大规模的量子计算机，否则这不是一个可接受的数据量，只是为了*建立*连接而发送。作为基准现实检验，我们不应该仅仅通过签名和公钥^发送超过3.5英寸软盘的1%。
- en: In more concrete terms, for the server-sent messages, [Cloudflare found](https://blog.cloudflare.com/pq-2024/)
    that every 1K of additional data added to the server response caused median HTTPS
    handshake latency increase by around 1.5%. For the ClientHello, Chrome saw a 4%
    increase in TLS handshake latency when they deployed ML-KEM, which takes up approximate
    1K of additional space in the ClientHello. This pushed the size of the ClientHello
    greater than the standard maximum transmission unit (MTU) of packets on the Internet,
    ~1400 bytes, causing the ClientHello to be fragmented over two underlying transport
    layer (TCP or UDP) packets^.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，对于服务器发送的消息，[Cloudflare发现](https://blog.cloudflare.com/pq-2024/)，每增加1K的额外数据到服务器响应，导致HTTPS握手中位数延迟增加约1.5%。对于ClientHello，当他们部署了ML-KEM时，Chrome看到TLS握手延迟增加了4%，这需要在ClientHello中占用约1K的额外空间。这使得ClientHello的大小大于互联网数据包的标准最大传输单元（MTU）约1400字节，导致ClientHello在两个底层传输层（TCP或UDP）数据包中被分段^。
- en: Assuming ML-KEM is here to stay, this means if we want to keep the total latency
    impact of post-quantum cryptography under 10%^(, we need to make all of the authentication
    happen in under ~4K of additional bytes in the server reponse messages. Unfortunately,
    a *single* ML-DSA signature/public key pair is ~4K bytes. ML-DSA is too big to
    deploy to mitigate a threat that does not yet have a timeline to exist.)
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 ML-KEM 将持续存在，这意味着如果我们希望将量子后密码学的总延迟影响保持在服务器响应消息中额外不超过 10%^(，我们需要确保所有的身份验证在约
    4K 字节以内完成。不幸的是，*单个* ML-DSA 签名/公钥对大小约为 4K 字节。ML-DSA 太大，无法部署以应对尚未存在时间表的威胁。）
- en: 'There is some good news on the horizon. NIST recognized that the signatures
    were quite large, and is running a [follow-on competition](https://csrc.nist.gov/projects/pqc-dig-sig)
    for smaller, faster signatures. Unfortunately, the [leaders](https://pqshield.github.io/nist-sigs-zoo/)
    in that competition are not quite there yet, but some do have potential:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有关未来的一些好消息。NIST 认识到签名非常庞大，并正在为更小、更快的签名进行 [后续竞争](https://csrc.nist.gov/projects/pqc-dig-sig)。不幸的是，竞争中的
    [领导者](https://pqshield.github.io/nist-sigs-zoo/) 还没有完全达到要求，但其中一些有潜力：
- en: '**Unbalanced Oil and Vinegar (UOV)**: UOV has big public keys (66K!), but signatures
    are 94 bytes, which is on par with the current 64 bytes from an ECDSA signature
    in an SCT. The 66K public key size is acceptable because the public keys for Certificate
    Transparency logs are predistributed, and there’s only a small number of logs
    (~10). UOV is not a solution for root certificates—there’s too many root certificates
    and root stores would be too big to embed in a binary.'
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unbalanced Oil and Vinegar (UOV)**：UOV 公钥非常大（66K！），但签名为 94 字节，与当前 SCT 中 ECDSA
    签名的 64 字节相当。66K 的公钥大小是可接受的，因为用于证书透明度日志的公钥是预分发的，并且只有少量日志（约 10 个）。UOV 并不适合根证书——根证书太多，根存储将会太大无法嵌入二进制文件中。'
- en: '**SQISign**: SQISign has 64-byte keys and 177-byte signatures. If used for
    certificates and the handshake signature, it would be 2*64 + 3*177 = 659 bytes.
    This is compared to the current RSA+ECDSA approach, which is 4096/8 + 2048/8 +
    2048/8 + 32 + 64 = 1,120 bytes. SQISign is a net win (and comparable to an ECDSA-only
    chain)! Unforunately, SQISign is incredibly slow. For SQISign to be feasible,
    it needs around a 10,000x performance improvement in signing speed, and a 100x
    performance improvement in verification.'
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQISign**：SQISign 公钥为 64 字节，签名为 177 字节。如果用于证书和握手签名，它将是 2*64 + 3*177 = 659
    字节。与当前的 RSA+ECDSA 方法相比，后者为 4096/8 + 2048/8 + 2048/8 + 32 + 64 = 1,120 字节。SQISign
    是一种净胜（与仅使用 ECDSA 的链相比类似）！不幸的是，SQISign 的速度非常慢。为了使 SQISign 可行，它需要约 10,000 倍的签名速度提升和
    100 倍的验证性能提升。'
- en: '**Mayo**: Mayo is possibly feasible. Mayo1 has 1,168-byte public keys and 321-byte
    signatures, which makes it a candidate for use in certificates and for handshake
    authentication (1168*2 + 321*3 = 3,299 bytes). Mayo2 has 5,488-byte keys, but
    only 180-byte signatures, which makes it a candidate for SCTs if UOV doesn’t pan
    out.'
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mayo**：Mayo 可能是可行的。Mayo1 公钥为 1,168 字节，签名为 321 字节，这使其成为证书和握手认证的候选者（1168*2
    + 321*3 = 3,299 字节）。Mayo2 公钥为 5,488 字节，但只有 180 字节的签名，这使其成为 SCT 的候选者，如果 UOV 方案不行的话。'
- en: There’s a couple other performance knobs we can attempt to tweak, but they all
    require larger changes to how HTTPS, TLS, and the Web PKI interact than doing
    a straight “copy-and-replace” with PQC algorithms.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 还有几个性能调节旋钮我们可以尝试调整，但这些都需要更大的变动来调整 HTTPS、TLS 和 Web PKI 之间的互动，而不是简单的“复制和替换”使用
    PQC 算法。
- en: '**Intermediate ellison**: Predistributing known intermediate certificates to
    browsers would save ~1.5K bytes for the median intermediate certificate. This
    doesn’t fundamentally change any of the feasibility of the NIST candidates, but
    it likely helps Mayo stay within bounds of what’s currently feasible.'
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Intermediate ellison**：预分发已知的中间证书到浏览器将为中位数中间证书节省约 1.5K 字节。这并不从根本上改变 NIST
    候选者的可行性，但可能有助于 Mayo 保持在当前可行范围内。'
- en: '**Merging SCTs and Certificates**: Experimental proposals such as [Merkle-Tree
    Certificates](https://datatracker.ietf.org/doc/draft-davidben-tls-merkle-tree-certs/)
    merge the certificate and SCTs into a single object with a single hash-based proof
    of authenticity. This would reduce the handshake to only require a single handshake
    signature and a single public key in the merkle-tree certificate, alongside a
    hash-based inclusion proof. Unfortunately, it makes some tradeoffs that are likely
    not feasible for non-browser applications, such as requiring delayed (hourly)
    batch issuance, and requiring clients to be up to date relative to a transparency
    server. Solutions in this form may be a performance optimization for browser clients,
    but are likely not feasible for non-browser clients. That being said, handshake
    latency matters considerably less for non-browser clients.'
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合并SCT和证书**：诸如[Merkle-Tree Certificates](https://datatracker.ietf.org/doc/draft-davidben-tls-merkle-tree-certs/)的实验性提案将证书和SCT合并成一个单一对象，并具有基于哈希的真实性证明。这将使握手过程仅需要单一的握手签名以及Merkle树证书中的单一公钥，以及一个基于哈希的包含证明。不幸的是，这做出了一些权衡，可能对非浏览器应用程序来说不太可行，例如需要延迟（每小时）批量发放，并要求客户端相对于透明度服务器保持最新状态。这种形式的解决方案可能是浏览器客户端的性能优化，但对非浏览器客户端来说可能不太可行。即便如此，对于非浏览器客户端来说，握手延迟问题较为不重要。'
- en: '**Shrink the size of the root store**: A post-quantum root store with fewer
    than 10 certificates containing UOV public keys would be within an order of magnitude
    of the size of current root stores.'
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩小根存储的大小**：一个包含少于10个包含UOV公钥的证书的后量子根证书存储将与当前根证书存储的大小相差不到一个数量级。'
- en: 'This means that combining Mayo and UOV with other changes to the PKI *may*
    be enough to transition to quantum-resistant authentication in the WebPKI. Unfortunately,
    all of this armchair design remains subject to several risks:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着将Mayo和UOV与PKI的其他更改结合起来*可能*足以转变为WebPKI中的抗量子认证。不幸的是，所有这些纸上谈兵的设计仍然存在一些风险：
- en: The performance impact is almost definitely larger than what Cloudflare measured.
    Cloudflare’s experiment likely was primarily ideal clients (enterprise users on
    desktop) accessing a login page (served by a low-RTT edge server).
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能影响几乎肯定比Cloudflare测量到的要大。Cloudflare的实验很可能主要是理想客户端（企业用户在桌面上）访问登录页面（由低往返时延的边缘服务器提供）。
- en: The performance impact is also probably worse than Chrome current sees! The
    4% latency increase is the net increase across all connections once ML-KEM was
    added to the key shares in the ClientHello. At this point in the deployment, ML-KEM
    is primarily only supported by Google properties and Cloudflare. Most servers
    are *not* selecting ML-KEM and responding with the ~1K of an ML-KEM encapsulation.
    As ML-KEM deployment expands, the 4% latency impact seen by Chrome will get *worse*
    as the cipher finishes standardization and servers start to deploy ML-KEM.
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能影响很可能也比Chrome当前看到的更糟！4%的延迟增加是在添加ML-KEM到ClientHello中的密钥份额之后的所有连接的净增加。在部署的这个阶段，ML-KEM主要仅受到Google属性和Cloudflare的支持。大多数服务器
    *没有* 选择ML-KEM并且用ML-KEM封装的~1K进行响应。随着ML-KEM的部署扩展，Chrome所看到的4%延迟影响将变得更加*严重*，因为加密算法的标准化和服务器开始部署ML-KEM。
- en: The security of Mayo and UOV might not hold. This would not be the first time
    a promising post-quantum algorithm [turns out to be broken](https://securitycryptographywhatever.com/2022/08/11/hot-cryptanalytic-summer-with-steven-galbraith/).
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mayo和UOV的安全性可能无法保证。这将不是有希望的后量子算法[被发现存在问题](https://securitycryptographywhatever.com/2022/08/11/hot-cryptanalytic-summer-with-steven-galbraith/)的第一次。
- en: Even if the performance estimates are accurate, it may be that 10% is still
    too much of a performance hit unless quantum computers are immenient.
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使性能估计是准确的，也许10%的性能损耗直到量子计算机出现仍然太大了。
- en: Putting this all together, even a drastic change like Merkele Tree Certs, when
    combined with ML-DSA or Mayo for handshake authentication, is likely still too
    big and only suitable for browser clients.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些放在一起，甚至像Merkele Tree Certs这样的激烈变化，当与ML-DSA或Mayo结合用于握手认证时，很可能仍然太大，只适合浏览器客户端。
- en: So what can we do to derisk all this? Well, for any solution, we need to get
    better at trust anchor agility, intermediate suppresion, and PKI migrations. This
    is [happening already](https://datatracker.ietf.org/doc/draft-davidben-tls-trust-expr/).
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们可以做些什么来降低所有这些风险？对于任何解决方案，我们都需要在信任锚点敏捷性、中间抑制和PKI迁移方面变得更好。这已经[在进行中了](https://datatracker.ietf.org/doc/draft-davidben-tls-trust-expr/)。
- en: 'The best thing we could do to make the post-quantum transition more feasible
    is to come up with better algorithms that have performance characteristics no
    worse than RSA-2048\. Specifically:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使后量子过渡更可行的最佳方法是提出比RSA-2048性能特性不差的更好的算法。
- en: A post-quantum KEM that fits in a single MTU when combined with the rest of
    the TLS ClientHello
  id: totrans-split-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个后量子KEM，在与TLS ClientHello的其余部分组合时可以适合单个MTU
- en: A 10,000x signing speed improvement and 100x verification speed improvement
    in SQISign (or a new, equivalent algorithm with these characteristics)
  id: totrans-split-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SQISign中签名速度提升了10,000倍，验证速度提升了100倍（或者一个具有这些特征的新的等效算法）
- en: To some extent, this may be yelling for the impossible. Unfortunately, using
    ML-DSA for the Web PKI in its current form is also impossible.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种程度上，这可能是对不可能的呼声。不幸的是，使用ML-DSA在当前形式下对Web PKI也是不可能的。
