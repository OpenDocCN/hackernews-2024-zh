- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:53:58'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:53:58'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Introducing FlakeHub Cache
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 FlakeHub Cache
- en: 来源：[https://determinate.systems/posts/flakehub-cache-beta/](https://determinate.systems/posts/flakehub-cache-beta/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://determinate.systems/posts/flakehub-cache-beta/](https://determinate.systems/posts/flakehub-cache-beta/)
- en: '[Binary caching](https://zero-to-nix.com/concepts/caching) is truly one of
    the most wonderful core features of [Nix](https://zero-to-nix.com). It enables
    you to fetch the build results of [derivations](https://zero-to-nix.com/concepts/derivations)
    rather than building them locally, which makes just about everything you do with
    Nix—[development environments](https://zero-to-nix.com/concepts/dev-env), [package
    builds](https://zero-to-nix.com/concepts/packages), continuous integrations runs—so
    much faster that Nix without caching is essentially a different, lesser tool.
    But despite our love for Nix caching, we’ve believed that existing caching solutions
    are not suitable for secure, production use cases. And so we’ve opted to build
    something better.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[二进制缓存](https://zero-to-nix.com/concepts/caching) 确实是 [Nix](https://zero-to-nix.com)
    最精彩的核心特性之一。它允许你获取 [导出](https://zero-to-nix.com/concepts/derivations) 的构建结果，而不是在本地构建它们，这使得你使用
    Nix 进行的一切工作——[开发环境](https://zero-to-nix.com/concepts/dev-env)、[软件包构建](https://zero-to-nix.com/concepts/packages)、持续集成运行——都变得更加快速，以至于没有缓存的
    Nix 本质上是一个不同的、次等的工具。但尽管我们热爱 Nix 缓存，我们认为现有的缓存解决方案不适合安全的生产环境。因此，我们决定打造一些更好的东西。'
- en: 'Today, we’re excited to announce **FlakeHub Cache**, a powerful new caching
    concept from us at [Determinate Systems](/) that offers [robust per-flake access
    control](#access-control). FlakeHub Cache is currently in *private beta* and we’re
    actively iterating on the implementation and seeking design partners to try it
    out. You can sign up for the beta right here and we’ll let you know next steps
    very soon:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们非常高兴地宣布 **FlakeHub Cache**，这是我们在 [Determinate Systems](/) 推出的一个强大的新缓存概念，提供[强大的
    flake 级别访问控制](#access-control)。FlakeHub Cache 目前处于 *私有 beta* 阶段，我们正在积极迭代实现，并寻找设计合作伙伴来尝试它。您可以在这里注册
    beta 版，并很快我们将告诉您下一步的操作：
- en: Register for the FlakeHub Cache private beta
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 注册 FlakeHub Cache 的私有 beta 版
- en: Nix’s official binary cache server, [`nix-serve`](https://nixos.org/manual/nix/stable/package-management/binary-cache-substituter),
    has some major gaps that make it unsuitable for secure, production use cases.
    Most importantly, `nix-serve` serves up a [Nix store](https://zero-to-nix.com/concepts/nix-store)
    as a single monolithic cache, and *everything* in the cache is available to anyone
    with a public key. This is an unacceptably fast-and-loose access model for most
    organizations.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: Nix 的官方二进制缓存服务器，[`nix-serve`](https://nixos.org/manual/nix/stable/package-management/binary-cache-substituter)，存在一些主要缺陷，使其不适合用于安全的生产环境。最重要的是，`nix-serve`
    将 [Nix 存储](https://zero-to-nix.com/concepts/nix-store) 作为单个整体缓存提供，而缓存中的*所有内容*对任何持有公钥的人都是可用的。对于大多数组织来说，这种松散的访问模型是不可接受的。
- en: With FlakeHub Cache’s access control model, however, you can grant or deny read
    and write access at the [flake](https://zero-to-nix.com/concepts/flakes) level,
    which affords you substantially more control. So what does this look like?
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，FlakeHub Cache 的访问控制模型允许你在 [flake](https://zero-to-nix.com/concepts/flakes)
    级别授予或拒绝读取和写入权限，这为你提供了更多的控制能力。那么这是什么样子呢？
- en: Let’s start with read access to pull from a flake’s cache. If your org has a
    flake called `security-mega-important`, for example, you can provide read access
    only to a small set of trusted users—or automated agents—in your org. If, on the
    other hand, you have a flake called `shared` that’s meant to be used by everyone,
    you can provide read access to everyone in your org.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从读取权限开始，以从 flake 的缓存中拉取数据。例如，如果你的组织有一个名为 `security-mega-important` 的 flake，你可以只为一小部分信任的用户或组织中的自动代理提供读取权限。另一方面，如果你有一个名为
    `shared` 的 flake，旨在供所有人使用，你可以为你的组织中的每个人提供读取权限。
- en: In terms of write access to push to a flake’s cache, we’ve opted for a model
    centered around controlled, authenticated build environments. FlakeHub Cache currently
    allows pushing to the cache [solely](#model) as part of [GitHub Actions](https://docs.github.com/en/actions)
    runs (with [GitLab](https://gitlab.com) support on the way). This means that there
    is *no ad-hoc push access whatsoever*, so you can’t accidentally push to a cache
    in a shell script or CLI command.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 至于写入权限，我们选择了围绕受控、经过身份验证的构建环境为中心的模型。FlakeHub Cache 目前允许将推送到缓存的操作仅作为 [GitHub Actions](https://docs.github.com/en/actions)
    运行的一部分（支持 [GitLab](https://gitlab.com) 的支持正在进行中）。这意味着*绝对不允许*通过 shell 脚本或 CLI 命令意外地推送到缓存。
- en: The granular and controlled nature of this model is far more suited for organizations
    with demanding security and other requirements, and a significant leap beyond
    existing solutions.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模型的粒度和可控性非常适合具有严格安全和其他要求的组织，远远超出了现有解决方案的水平。
- en: In order to grant or deny access, of course, FlakeHub Cache needs to figure
    out who—or what—is making a request. Authentication for FlakeHub Cache is based
    on [JSON Web Tokens](https://jwt.io) (JWTs). We currently use [GitHub](https://github.com)
    as our JWT authentication provider but will be adding [GitLab](https://gitlab.com)
    support very soon. In the future, this flexible model will enable us to support
    a wide variety of authentication solutions, including [SAML](https://en.wikipedia.org/wiki/SAML_2.0)
    and various [Single Sign-on](https://en.wikipedia.org/wiki/Single_sign-on) (SSO)
    providers.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，为了授予或拒绝访问，FlakeHub 缓存需要确定是谁或什么正在发出请求。FlakeHub 缓存的认证基于[JSON Web Tokens](https://jwt.io)
    (JWTs)。目前我们使用[GitHub](https://github.com)作为我们的 JWT 认证提供者，但很快将支持[GitLab](https://gitlab.com)。未来，这种灵活的模型将使我们能够支持各种认证解决方案，包括[SAML](https://en.wikipedia.org/wiki/SAML_2.0)和各种[单点登录](https://en.wikipedia.org/wiki/Single_sign-on)
    (SSO) 提供者。
- en: Static tokens are great for some use cases—and FlakeHub enables you to create
    such tokens in the UI—but we’re opting to go beyond this model.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 静态令牌在某些情况下非常有效—FlakeHub 允许您在 UI 中创建这样的令牌—但我们选择超越这种模型。
- en: FlakeHub Cache is able to provide [granular access control](#access-control)
    because of instead of serving an entire [Nix store](https://zero-to-nix.com/concepts/nix-store)
    as “the cache,” FlakeHub Cache applies a **slice** abstraction, where a slice
    is some subset of all store paths. With FlakeHub Cache enabled, each flake you
    publish on [FlakeHub](https://flakehub.com) gets its own slice and read and write
    access is applied at this level.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: FlakeHub 缓存能够提供[细粒度访问控制](#access-control)，因为它不是像服务整个[Nix store](https://zero-to-nix.com/concepts/nix-store)那样作为“缓存”，而是应用了**切片**抽象概念，其中切片是所有存储路径的某个子集。启用
    FlakeHub 缓存后，在[FlakeHub](https://flakehub.com)上发布的每个 flake 都有其自己的切片，并且在此级别应用读写权限。
- en: 'When a user has [authenticated](#auth) with FlakeHub Cache, it determines which
    slices you’re allowed to access and combines those slices into a single **view**
    of the cache. With this view abstraction, FlakeHub Cache can make decisions like
    these:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户通过[认证](#auth)与 FlakeHub 缓存连接时，它会确定您被允许访问的切片，并将这些切片组合成缓存的一个单一**视图**。通过这种视图抽象，FlakeHub
    缓存可以做出如下决策：
- en: User `devops_aficionado_123` from the `WidgetsDotCom` org *may* pull from the
    cache for the `WidgetsDotCom/devops` flake.
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户`devops_aficionado_123`来自`WidgetsDotCom`组织，*可以*从缓存中拉取`WidgetsDotCom/devops`
    flake。
- en: User `AnaBooper` from the `WidgetsDotCom` org *may not* pull from `WidgetsDotCom/super-secure`
    flake.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户`AnaBooper`来自`WidgetsDotCom`组织，*不得*从`WidgetsDotCom/super-secure` flake 拉取。
- en: 'Although these users are in the same organization, WidgetsDotCom can make access
    decisions on a per-flake basis and thus choose whichever access patterns and collaboration
    models they wish. This model is certainly more robust from a security standpoint
    but it also:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些用户属于同一组织，WidgetsDotCom 可以根据 flake 来做出访问决策，因此可以选择任何访问模式和协作模型。从安全角度来看，这种模型显然更为健壮，但同时也：
- en: '**Is much simpler**. When using Nix, you only need to configure FlakeHub Cache;
    there’s no need to distribute public keys for a multitude of them.'
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更简单**。在使用 Nix 时，您只需配置 FlakeHub 缓存；无需分发多个公钥。'
- en: '**Offers better performance**. Using only one platform for caching means fewer
    network round trips and fewer authentication handshakes. In addition, we run FlakeHub
    Cache in a variety of regions with CDN-backed storage. This results in a clear
    speed-up in your Nix builds.'
  id: totrans-split-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**提供更好的性能**。仅使用一个平台进行缓存意味着减少网络往返和认证握手次数。此外，我们在多个区域运行 FlakeHub 缓存，并支持 CDN 支持的存储，这显著加速了您的
    Nix 构建过程。'
- en: In addition to access control, things like garbage collection are also configurable
    at the flake level.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了访问控制外，像垃圾收集等功能也可以在 flake 级别进行配置。
- en: 'Two core aspects of using FlakeHub Cache make it a significant departure from
    other available cache systems:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 FlakeHub 缓存的两个核心方面使其与其他可用的缓存系统有显著差异：
- en: '**No public caches**. That’s right: FlakeHub Cache doesn’t allow you to expose
    public caches like [cache.nixos.org](http://cache.nixos.org). You can pull from
    the cache for a specific flake only if you’re (a) authenticated and (b) have [permission](#access-control).
    That means that you can’t even *accidentally* make caches for specific flakes
    truly public. We’re open to exploring public caches in the future but would only
    do so with due care.'
  id: totrans-split-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**不公开缓存**。没错：FlakeHub 缓存不允许您公开像[cache.nixos.org](http://cache.nixos.org)这样的公共缓存。只有在您（a）通过身份验证并且（b）有[权限](#access-control)的情况下，您才能从特定flake的缓存中拉取。这意味着您甚至不能*意外地*使特定flake的缓存真正公开。我们愿意在未来探索公共缓存，但只会谨慎行事。'
- en: '**Push only from CI**. At the moment, when you create FlakeHub Cache authentication
    tokens, those only apply to *pulling* from the cache. You can’t *push* to the
    cache in an ad hoc way using a CLI or other tool; you can only push from [GitHub
    Actions](https://docs.github.com/en/actions), particularly the [Magic Nix Cache
    Action](https://github.com/DeterminateSystems/magic-nix-cache-action) (with [GitLab
    support coming soon](https://gitlab.com)). If you enroll in the beta, you can
    enable pushing with this one-liner in your Actions configuration:'
  id: totrans-split-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**只能通过CI进行推送**。目前，在创建 FlakeHub 缓存认证令牌时，这些令牌仅适用于从缓存中*拉取*。您无法通过CLI或其他工具*推送*到缓存，只能从[GitHub
    Actions](https://docs.github.com/en/actions)，特别是[Magic Nix Cache Action](https://github.com/DeterminateSystems/magic-nix-cache-action)（支持[即将推出的GitLab支持](https://gitlab.com)）。如果您参加测试版，您可以通过在Actions配置中使用以下一行代码来启用推送：'
- en: '[PRE0]'
  id: totrans-split-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With that in place, anything that you `nix build` is automatically pushed to
    the cache—if authorized to!—without any need for separate push commands.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个设置，您通过`nix build`的任何东西都会自动推送到缓存中——如果有授权的话！——而无需单独的推送命令。
- en: We firmly believe that FlakeHub Cache is the first enterprise-ready cache in
    the Nix ecosystem. Public caches and caches without granular access control are
    simply not suited for a broad range of use cases and even whole industries, particularly
    those subject to exacting compliance standards, regulatory regimes, and security
    requirements. If you’re compelled by the power of Nix but have concerns about
    existing solutions, this might be precisely the sea change you’ve been waiting
    for.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们坚信，FlakeHub 缓存是Nix生态系统中首个企业级准备就绪的缓存。公共缓存和缺乏粒度访问控制的缓存简直不适合广泛的用例和整个行业，特别是那些受到严格合规标准、监管制度和安全需求约束的行业。如果您对Nix的强大感兴趣，但对现有解决方案有顾虑，这可能正是您一直在等待的重大变革。
- en: On top of that, Determinate Systems is the only [SOC2](https://www.imperva.com/learn/data-security/soc-2-compliance/)-compliant
    vendor in the Nix ecosystem, which should make otherwise-difficult discussions
    with the higher-ups go much more smoothly.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Determinate Systems是Nix生态系统中唯一符合[SOC2](https://www.imperva.com/learn/data-security/soc-2-compliance/)合规的供应商，这应该会使与高层的讨论变得更加顺利。
- en: You can try out FlakeHub Cache for yourself very soon. Sign up below, configure
    one of your GitHub Actions runs to use the Magic Nix Cache Action, make a small
    update to your Nix configuration, and you’ll experience this sea change first
    hand.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您很快就可以自行尝试 FlakeHub 缓存。立即注册，配置其中一个GitHub Actions运行以使用Magic Nix Cache Action，对您的Nix配置进行小幅更新，您将第一手体验这一海量变化。
- en: Register for the FlakeHub Cache private beta
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注册 FlakeHub 缓存的私人测试版
