- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 13:22:36'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 13:22:36
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Neat parallel output in Python | Max Bernstein
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的整洁并行输出 | Max Bernstein
- en: 来源：[https://bernsteinbear.com/blog/python-parallel-output/](https://bernsteinbear.com/blog/python-parallel-output/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://bernsteinbear.com/blog/python-parallel-output/](https://bernsteinbear.com/blog/python-parallel-output/)
- en: 'Say you have a program that does some processing of a list (loosely based on
    a work-in-progress project):'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个程序对列表进行一些处理（基于一个正在进行中的项目）：
- en: '[PRE0]'
  id: totrans-split-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is fine. It works. It’s a little noisy, but it works. But then you discover
    something great: your problem is data parallel. That is, you can process as many
    repos as your system allows in parallel. Hoorah! You rewrite using `multiprocessing`:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好。它可以工作。有点吵闹，但它可以工作。但是然后你发现了一些伟大的东西：你的问题是数据并行的。也就是说，你可以在系统允许的范围内并行处理尽可能多的存储库。万岁！你使用
    `multiprocessing` 重写了代码：
- en: '[PRE1]'
  id: totrans-split-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Unfortunately, the output is a little unwieldy. While each line is still nicely
    attributed to a repo, it’s spewing lines left and right and the lines are intermingled.
    Don’t you miss all the beautiful parallel output from tools such as Buck and Bazel
    and Cargo?
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，输出有点笨拙。虽然每行仍然很好地归属于一个存储库，但它左右吐出行并且这些行交错在一起。难道你不想念像 Buck 和 Bazel 以及 Cargo
    这样的工具的美丽并行输出吗？
- en: 'Fortunately, StackOverflow user [Leedehai](https://stackoverflow.com/questions/6840420/rewrite-multiple-lines-in-the-console/59147732#59147732)
    is a terminal pro user and knows how to rewrite multiple lines at a time in the
    console. We can adapt that answer for our needs:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，StackOverflow 用户 [Leedehai](https://stackoverflow.com/questions/6840420/rewrite-multiple-lines-in-the-console/59147732#59147732)
    是一个终端专家，知道如何在控制台一次性重写多行。我们可以根据我们的需求调整那个答案：
- en: '[PRE2]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will print each item’s status, one line at a time, to the terminal. It
    will print in the order that the item is added to `last_output_per_process`, but
    you can change that by (for example), sorting alphanumerically: `sorted(last_output_per_process.items())`.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这将每个项目的状态逐行打印到终端。它将按照添加到 `last_output_per_process` 的项目的顺序打印，但你可以通过（例如）按字母数字顺序排序来改变这一点：`sorted(last_output_per_process.items())`。
- en: Note that we have to lock both the data structure and the terminal output to
    avoid things getting mangled; they are shared (pickled, via `Manager`) between
    processes.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们必须锁定数据结构和终端输出，以避免混乱；它们在进程之间共享（通过 `Manager` 进行序列化）。
- en: I’m not sure what this does if the log output is multiple lines long or if someone
    else is mucking with `stdout`/`stderr` (a stray `print`, perhaps). Please write
    in if you find out or have neat solutions.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定如果日志输出有多行长或者如果有人在搞乱 `stdout`/`stderr`（可能是一个零星的 `print`）。如果你发现或者有了整洁的解决方案，请写信告诉我们。
- en: This technique is probably fairly portable to any programming language that
    has threads and locks. The key difference is those implementations should use
    threads instead of processes; I did processes because it’s Python.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术可能相对于任何有线程和锁的编程语言都是可移植的。关键区别在于那些实现应该使用线程而不是进程；我使用进程是因为这是 Python。
- en: Check out the expanded version [in this Gist](https://gist.github.com/tekknolagi/4bee494a6e4483e4d849559ba53d067b).
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 查看这个扩展版本的 [Gist](https://gist.github.com/tekknolagi/4bee494a6e4483e4d849559ba53d067b)。
- en: A demo for you
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这是给你的一个演示
- en: 'Since you read this far, here is a demo of the program:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你读到这里，这里有一个程序的演示：
- en: Enjoy your newfound fun output!
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在享受你新发现的有趣输出吧！
