- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 13:20:18'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024 年 5 月 29 日 13:20:18
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: /tmp | Python Generators Are Underutilized
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: /tmp | Python 生成器被低估了
- en: 来源：[https://www.slashtmp.io/posts/generators/](https://www.slashtmp.io/posts/generators/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.slashtmp.io/posts/generators/](https://www.slashtmp.io/posts/generators/)
- en: <main>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main>
- en: January 12, 2024
  id: totrans-split-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2024 年 1 月 12 日
- en: Python Generators Are Underutilized
  id: totrans-split-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 生成器被低估了
- en: 'One of my favorite features in the python ecosystem is one I don’t often see
    utilized:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 生态系统中我最喜欢的功能之一是一个我并不经常看到被利用的功能：
- en: '*Generators*'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*生成器*'
- en: Introduction
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简介
- en: 'Python generators *generate* values upon reaching yield statements. Unlike
    loops, generators yield values one at a time. Consider the following code snippet:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python 生成器 *在达到 yield 语句时* 生成值。与循环不同，生成器一次生成一个值。考虑以下代码片段：
- en: '[PRE0]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will yield the following output:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE1]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let’s bring in a utility library called [tracemalloc](https://docs.python.org/3/library/tracemalloc.html#tracemalloc.get_traced_memory).
    This is a python built-in library with some very simple utilities for tracking
    memory allocations in python programs. Let’s modify our program to track the amount
    of memory allocated for this entire program:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们引入一个叫做 [tracemalloc](https://docs.python.org/3/library/tracemalloc.html#tracemalloc.get_traced_memory)
    的实用库。这是一个 Python 内置库，带有一些非常简单的用于跟踪 Python 程序内存分配的实用工具。让我们修改我们的程序来跟踪为整个程序分配的内存量：
- en: '[PRE2]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will output:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出：
- en: '[PRE3]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here we’re seeing the amount of memory allocated at each line, as well as the
    peak memory. So in this code block, we’re performing the following allocations:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们看到了每一行分配的内存量，以及峰值内存。因此，在这个代码块中，我们进行了以下分配：
- en: '`py to_return = [val * val for val in x]` allocates 19616 bytes'
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`py to_return = [val * val for val in x]` 分配了 19616 字节'
- en: '`py squares = square_vals(nums_to_square)` allocates 11832 bytes'
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`py squares = square_vals(nums_to_square)` 分配了 11832 字节'
- en: '`py to_return = initial_mem, peak_mem = tracemalloc.get_traced_memory()` allocates
    64 bytes'
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`py to_return = initial_mem, peak_mem = tracemalloc.get_traced_memory()` 分配了
    64 字节'
- en: In total, we utilized a maximum of 31,468 bytes in this program.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个程序中，我们总共利用了 31,468 字节的内存。
- en: Now to add a generator.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加一个生成器。
- en: 'Consider the following code:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码：
- en: '[PRE4]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will output:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出：
- en: '[PRE5]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is interesting! Note that, compared to our first example, the act of providing
    the squared numbers `yield val * val` does not actually lead to any memory allocation,
    whereas `to_return = [val * val for val in x]` does. Instead, in the latter code
    block, we end up allocating 208 bytes on the line that calls the `gen_square_values()`.
    This is the beauty of a python generator!
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有趣！注意，与我们的第一个示例相比，提供平方数 `yield val * val` 的行为实际上不会导致任何内存分配，而 `to_return =
    [val * val for val in x]` 则会。相反，在后一个代码块中，我们在调用 `gen_square_values()` 的行上最终会分配
    208 字节的内存。这就是 Python 生成器的美妙之处！
- en: So what’s happening here?
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这里发生了什么？
- en: 'In our first example, when we call `square_vals()`, we create the list containing
    all the squared values in memory and return that memory block from the method.
    When we turn this into a generator, we are instead creating a *generator object*.
    This generator object creates values on-the-fly, that is: we won’t allocate any
    of the squared values until we’re ready to use them.'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个示例中，当我们调用 `square_vals()` 时，我们在内存中创建包含所有平方值的列表，并从方法返回该内存块。当我们将其转换为生成器时，我们实际上创建了一个
    *生成器对象*。这个生成器对象会实时生成值，也就是说：直到我们准备使用它们之前，我们不会分配任何平方值。
- en: 'If we go back to our codeblock, we can see this in action by adding a new loop:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回到我们的代码块，通过添加一个新的循环，我们可以看到它的运行情况：
- en: '[PRE6]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This just block just takes our generator and yields all the values into a list
    called `gen_to_list`. When we run this, we get additional output:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块只是将我们的生成器取出，并将所有值 yield 到一个名为 `gen_to_list` 的列表中。当我们运行这个代码时，我们会得到额外的输出：
- en: '[PRE7]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We’ve managed to get our peak memory usage back up! Notice that the line that
    generates values is, once again, allocating 11832 bytes when we yield all of our
    values into a list. This reveals the underlying functionality of the generator:
    it exists as a small, lightweight object that *generates* values one by one.'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地将我们的峰值内存使用量提高了！请注意，生成值的行再次分配了 11832 字节，当我们将所有值 yield 到列表中时。这揭示了生成器的基本功能：它作为一个小型、轻量级的对象存在，*逐个生成*
    值。
- en: Scaling Up
  id: totrans-split-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展
- en: 'So what’s the utility here? Well that becomes more obvious when we change things
    around a little. Let’s modify our code to generate 100,000 numbers instead of
    500\. Additionally I’m going to change the line:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这里的实用性是什么？当我们稍微改变一下事物时，这就变得更加明显了。让我们修改我们的代码，生成 100,000 个数字而不是 500 个。另外，我将修改以下行：
- en: '[PRE8]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'to:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 至：
- en: '[PRE9]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: in our generator example. (The range builtin in Python acts very similarly to
    a generator but is slightly different)
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的生成器示例中。（Python 中的 range 内置函数在行为上与生成器非常相似，但略有不同）
- en: 'Running our example using lists give us the following benchmarks:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用列表运行我们的示例给出以下基准：
- en: '[PRE10]'
  id: totrans-split-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '7,992,416 is a lot of bytes for not doing a lot of work. We’re already at 7MB
    of memory usage. Let’s instead look at a generator implementation:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不做太多工作的 7,992,416 个字节来说，这是很多的字节。我们已经使用了 7MB 的内存。让我们来看一个生成器的实现：
- en: '[PRE11]'
  id: totrans-split-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '288 bytes? Okay, but we’re not doing anything with those values, let’s actually
    do something with the generator:'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 288 字节？好吧，但我们没有对这些值做任何事情，让我们实际对生成器做些事情：
- en: '[PRE12]'
  id: totrans-split-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This prints:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印：
- en: '[PRE13]'
  id: totrans-split-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: That’s still tiny!
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍然是微不足道的！
- en: Why?
  id: totrans-split-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么？
- en: 'This is obviously just an exceptionally simple example of using generators
    to put data to the console, but generators are exceptionally useful in many applications.
    Python is often used as a glue language for ETL pipelines and batch jobs, and
    many engineers implement these by creating massive list objects within their application.
    Consider a simple JSON schema that we parse into a python object:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这只是使用生成器将数据输出到控制台的一个极为简单的示例，但是生成器在许多应用中非常有用。Python 常被用作 ETL 流水线和批处理作业的粘合语言，许多工程师通过在其应用程序中创建大型列表对象来实现这些工作。考虑一个我们解析成
    Python 对象的简单 JSON 模式：
- en: '[PRE14]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If we’re ingesting hundreds of thousands of these objects, storing those all
    in memory is going to get expensive quickly. Generators enable us to avoid creating
    these objects all in memory at once. This can be invaluable in reducing costs
    and increasing performance in memory limited cloud compute environments.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正在摄取成千上万的这些对象，将它们全部存储在内存中会很快变得昂贵。生成器使我们能够避免一次性在内存中创建所有这些对象。在减少成本和提高内存有限的云计算环境中的性能方面，这可能是非常宝贵的。
- en: Gotchas
  id: totrans-split-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注意事项
- en: 'Although convenient, generators *do* have some limitations that must be considered
    before using them:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管方便，生成器确实有一些必须在使用它们之前考虑的限制：
- en: Generators can’t be rewound or peeked without additional code
  id: totrans-split-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成器不能在没有额外代码的情况下倒回或查看。
- en: Once a value has been generated, it cannot be regenerated from the same generator.
    Likewise, there is no way to compute the next value of a generator without also
    consuming it.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦一个值被生成，它就不能从同一个生成器中重新生成。同样，没有办法计算生成器的下一个值而不消耗它。
- en: Generators can be tricky to debug
  id: totrans-split-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成器可能很难调试。
- en: Line-by-line debuggers often struggle inspecting the underlying object as they
    are unrewindable by nature. I am not currently aware of a python visual debugging
    application that allows for the inspection of generated values without also consuming
    the value. This can be worked around by implementing custom code on top of generators.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 逐行调试器通常很难检查底层对象，因为它们是不可倒回的。我目前不知道任何 Python 可视化调试应用程序，允许检查生成的值而不消耗该值。可以通过在生成器上实现自定义代码来解决这个问题。
- en: Generators can increase mental load of understanding code
  id: totrans-split-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成器可能增加了理解代码的心理负担。
- en: 'The under utilization of generators means that they are often difficult to
    understand for those with limited experience with python. It can take some time
    for people to develop the mental abstraction of “this effectively becomes a list
    when iterated over”. The apparent “out-of-order” execution can be hard to parse
    at first. Take the example:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器的低利用率意味着它们对于那些对 Python 经验有限的人来说通常很难理解。人们可能需要一些时间来开发“当迭代时，这实际上变成了一个列表”的心理抽象。最初，明显的“无序”执行可能很难解析。拿这个例子来说：
- en: '[PRE15]'
  id: totrans-split-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: It can be confusing, without a solid understanding of generators, to parse the
    order of output in this script.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有对生成器有扎实的了解，解析此脚本中输出的顺序可能会让人困惑。
- en: </main>
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
