- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:40:24'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:40:24'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Pydantic Logfire | Uncomplicated observability
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pydantic Logfire | 简单的可观测性
- en: 来源：[https://pydantic.dev/logfire](https://pydantic.dev/logfire)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://pydantic.dev/logfire](https://pydantic.dev/logfire)
- en: Structured Data & Direct SQL Access
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结构化数据与直接 SQL 访问
- en: Ensure your Python objects and structured data are query-ready. Use tools like
    Pandas, SQLAlchemy, or psql for querying, integrate seamlessly with BI software,
    and leverage AI for SQL generation.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的 Python 对象和结构化数据可以进行查询。使用像 Pandas、SQLAlchemy 或 psql 这样的工具进行查询，与 BI 软件无缝集成，并利用
    AI 进行 SQL 生成。
- en: '[PRE0]'
  id: totrans-split-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Manual Tracing
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动跟踪
- en: You can use the logfire library to create logs and traces directly — it’s kind
    of like standard logging in Python, with a more modern interface and some extra
    capabilities. And a lot less painful than using OpenTelemetry directly.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 logfire 库直接创建日志和跟踪 —— 这有点像 Python 中的标准日志记录，但具有更现代的界面和一些额外的功能。比直接使用 OpenTelemetry
    要简单得多。
- en: '[PRE1]'
  id: totrans-split-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: OpenTelemetry
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenTelemetry
- en: '[OpenTelemetry](https://opentelemetry.io/docs/what-is-opentelemetry/) (OTel)
    is an open source observability framework, it provides libraries for Python and
    every other popular language to let you collect traces, logs and metrics.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[OpenTelemetry](https://opentelemetry.io/docs/what-is-opentelemetry/)（OTel）是一个开源的可观测性框架，它提供了
    Python 和其他流行语言的库，让您可以收集跟踪、日志和指标。'
- en: OTel is a powerful tool that increasing numbers of developers want to use, but
    it can be time-consuming to set up and limited in the kinds of data it can collect.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: OTel 是一种强大的工具，越来越多的开发人员希望使用，但设置起来可能耗时，并且在可以收集的数据种类方面存在限制。
- en: Pydantic Logfire takes the best of OTel (instrumentation for popular Python
    packages, open standard for data transmission) and makes it easier to use and
    more flexible.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: Pydantic Logfire 继承了 OTel 的优点（流行 Python 包的仪器化，数据传输的开放标准），使其更易于使用和更灵活。
- en: By harnessing OpenTelemetry, Pydantic Logfire offers automatic instrumentation
    for popular Python packages, enables cross-language data integration, and supports
    data export to any OpenTelemetry-compatible backend or proxy.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用 OpenTelemetry，Pydantic Logfire 提供了流行 Python 包的自动仪器化，支持跨语言数据集成，并支持数据导出到任何兼容
    OpenTelemetry 的后端或代理。
