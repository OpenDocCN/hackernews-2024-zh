- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: '类别: 未分类'
- en: 'date: 2024-05-27 13:06:07'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024年5月27日 13:06:07'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: AI Coding Is Going From Copilot to Autopilot - IEEE Spectrum
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AI编码从副驾驶到自动驾驶 - IEEE Spectrum
- en: 来源：[https://spectrum.ieee.org/ai-code-generator](https://spectrum.ieee.org/ai-code-generator)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://spectrum.ieee.org/ai-code-generator](https://spectrum.ieee.org/ai-code-generator)
- en: A new breed of [AI-powered coding](https://spectrum.ieee.org/ai-programming)
    tools have emerged—and they’re claiming to be more autonomous versions of earlier
    assistants like [GitHub Copilot](https://github.com/features/copilot), [Amazon
    CodeWhisperer](https://aws.amazon.com/codewhisperer/), and [Tabnine](https://www.tabnine.com/).
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一种新型的[AI驱动编码](https://spectrum.ieee.org/ai-programming)工具已经出现，它们声称是以更自主的形式出现，早期助手如[GitHub
    Copilot](https://github.com/features/copilot)、[Amazon CodeWhisperer](https://aws.amazon.com/codewhisperer)和[Tabnine](https://www.tabnine.com/)。
- en: 'One such new entrant, [Devin AI](https://devinai.ai/), has been dubbed an “AI
    software engineer” by its maker, applied AI lab [Cognition](https://www.cognition-labs.com/).
    According to Cognition, Devin can [perform all these tasks unassisted](https://www.cognition-labs.com/introducing-devin):
    build a website from scratch and deploy it, find and fix bugs in codebases, and
    even train and fine-tune its own [large language model](https://spectrum.ieee.org/tag/llms).'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Devin AI这样的新产品，被其制造商应用于AI实验室的[Cognition](https://www.cognition-labs.com/)称为“AI软件工程师”。据Cognition称，Devin可以[独立执行所有这些任务](https://www.cognition-labs.com/introducing-devin)：从零开始构建网站并部署，查找并修复代码库中的错误，甚至训练和优化自己的[大型语言模型](https://spectrum.ieee.org/tag/llms)。
- en: Following its launch, open-source alternatives to Devin have cropped up, including
    [Devika](https://github.com/stitionai/devika) and [OpenDevin](https://github.com/OpenDevin/OpenDevin).
    Meanwhile makers of established assistants have not been standing still. Researchers
    at [Microsoft](https://spectrum.ieee.org/tag/microsoft), GitHub Copilot’s developer,
    recently uploaded a [paper to the arXiv preprint server](https://arxiv.org/abs/2403.08299)
    introducing AutoDev, which uses autonomous AI agents to generate code and test
    cases, run tests and check the results, and fix bugs within the test cases.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布后，Devin的开源替代产品如[Devika](https://github.com/stitionai/devika)和[OpenDevin](https://github.com/OpenDevin/OpenDevin)相继出现。与此同时，成熟助手的制造商也没有停下脚步。GitHub
    Copilot的开发者微软的研究人员最近在arXiv预印本服务器上传了一篇介绍AutoDev的论文，该论文使用自主AI代理生成代码和测试用例、运行测试和检查结果，并修复测试用例中的错误。
- en: “It’s exciting to see more versions of AI coding assistants with new capabilities,”
    says [Ben Dechrai](https://bendechrai.com/about), a coder and developer advocate
    at software company [Sonar](https://www.sonarsource.com/). “They validate the
    need for [generative AI](https://spectrum.ieee.org/what-is-generative-ai) tools
    in developers’ workflows.”
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: “看到有更多的AI编码助手具有新功能版本，这是令人兴奋的，”软件公司[Sonar](https://www.sonarsource.com/)的编码人员兼开发者倡导者[Ben
    Dechrai](https://bendechrai.com/about)说。“它们验证了开发者工作流程中对生成AI工具的需求。”
- en: Dechrai adds that these coding copilots can help software engineers write code
    faster, allowing them to focus on more strategic and creative tasks. Another advantage
    of these [programming](https://spectrum.ieee.org/tag/programming) tools is the
    ability to create a template for code, notes [Saurabh Bagchi](https://www.cs.purdue.edu/people/faculty/sbagchi.html),
    a professor of electrical and computer engineering at [Purdue University](https://www.purdue.edu/).
    Much as with [prompt engineering](https://spectrum.ieee.org/prompt-engineering-is-dead),
    developers must provide these assistants with “the right kind of software requirements
    to produce a template, and then a software engineer can fill in the gaps,” he
    says.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: Dechrai补充说，这些编码副驾驶可以帮助软件工程师更快地编写代码，从而能够专注于更具战略性和创造性的任务。这些[编程](https://spectrum.ieee.org/tag/programming)工具的另一个优势是能够为代码创建模板，普渡大学电子和计算机工程教授[Saurabh
    Bagchi](https://www.cs.purdue.edu/people/faculty/sbagchi.html)指出。正如同[提示工程](https://spectrum.ieee.org/prompt-engineering-is-dead)，开发者必须提供“产生模板所需的正确类型的软件需求，然后软件工程师可以填补空白”，他说。
- en: “To develop intuitive systems, you need an iterative process with humans in
    the loop to provide feedback” **—Saurabh Bagchi, Purdue University**
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: “要开发直观的系统，需要人在循环中进行迭代过程，提供反馈” **—普渡大学的Saurabh Bagchi**
- en: These gaps include safety and reliability considerations. Software engineers
    must look out for security vulnerabilities in AI-generated code, as well as the
    types of corner cases that could cause it to crash.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些差距包括安全性和可靠性考虑。 软件工程师必须注意AI生成的代码中的安全漏洞，以及可能导致其崩溃的各种边界情况。
- en: “Developers still need to ensure rigorous quality standards are in place when
    analyzing and reviewing code written with generative AI, just as they would with
    code developed by a human,” says Dechrai. “AI coding assistants are good at suggesting
    code, reflecting on the code, and reasoning about its effectiveness, but even
    then it’s not 100 percent accurate.”
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: “开发者在分析和审查生成AI编写的代码时，仍然需要确保严格的质量标准，就像他们对人类编写的代码一样，” Dechrai说。 “AI编码助手擅长建议代码，反思代码，并推理其有效性，但即使如此，它仍然不是百分之百准确。”
- en: Dechrai cautions that autonomous coders are “still so new that developers are
    just learning which use cases will be most beneficial.” And they’ll need to be
    “ironed out in the real world to see how much they’re able to deliver on their
    promise,” says Bagchi.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: Dechrai警告说，自动编码工具“仍然很新，开发者只是在学习哪些用例将是最有益的。” 他们需要在现实世界中“加以解决，看看它们能够实现多少它们的承诺，”
    Bagchi补充说。
- en: AI Coders vs. the Humans
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AI码农 vs. 人类
- en: Doom-and-gloom predictions of replacing human software engineers are also bound
    to follow the emergence of these “AI software engineers,” but that won’t be happening
    anytime soon. Devin, for instance, [resolved only 14 percent of a subset of GitHub
    issues](https://www.cognition-labs.com/post/swe-bench-technical-report) from real-world
    code repositories. “There’s still a long way to go for it to become something
    I can rely on blindfolded,” says Bagchi.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 灾难性的预测声称将替代人类软件工程师也将随着这些“AI软件工程师”的出现而产生，但这种情况不会很快发生。 例如，Devin仅[解决了GitHub代码库的一个子集的14％问题](https://www.cognition-labs.com/post/swe-bench-technical-report)。“要变得可以闭眼依赖它，还有很长的路要走，”Bagchi说。
- en: 'He notes that these autonomous programming tools have another blind spot: the
    fact that [software development](https://spectrum.ieee.org/tag/software-development)
    happens in collaboration. Coding copilots try to do everything, and they might
    do it reasonably well. On the other hand, different software engineers have their
    own specialties—be it front end, back end, full stack, or data, to name a few—and
    they all work together to build a cohesive product.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 他指出，这些自主编程工具还存在另一个盲点：[软件开发](https://spectrum.ieee.org/tag/software-development)是协作完成的事实。
    编码副驾驶尝试做所有事情，他们可能做得相当好。 另一方面，不同的软件工程师有各自的专长—无论是前端、后端、全栈还是数据等等—他们共同努力构建一个完整的产品。
- en: “To develop intuitive systems, you need an iterative process with humans in
    the loop to provide feedback,” Bagchi says. “The fundamental human intuition,
    depth, and imagination has to be brought to bear.”
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: “要开发直观的系统，你需要一个迭代过程，并让人类参与提供反馈，” Bagchi说。 “必须充分发挥人类的直觉、深度和想象力。”
- en: That’s why Bagchi believes these unassisted versions won’t be dominating the
    space that coding assistants hold—at least for now. “The models running underneath
    are similar in architecture, and as technology continues to evolve, both of them
    will get better,” he says. “But the Copilot or CodeWhisperer model seems most
    promising and is better suited to complex software development where humans work
    with the assistance of AI.”
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Bagchi认为这些未经协助的版本目前不会主导编码助手的领域。 “底层运行的模型在架构上相似，随着技术的进步，它们两者都会变得更好，”他说。 “但Copilot或CodeWhisperer模型似乎最有前途，并且更适合于复杂的软件开发，在这些开发中，人类与AI的协作是必不可少的。”
- en: Yet programmers “should start using these tools if they haven’t already, or
    they’ll risk getting left behind,” says Dechrai. “If you want to know if an AI
    coding assistant is truly beneficial, you have to use it yourself, get to know
    it, and see where it fails.”
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Dechrai表示：“如果开发者还没有开始使用这些工具，他们将面临被落下的风险。 “如果你想知道AI编码助手是否真正有益，你必须自己使用它，了解它，并看到它在哪些方面失败。”
- en: 'Bagchi echoes the sentiment: “Try them out with the use cases you have and
    stress them with the kinds of software you’re creating.” But because unassisted
    coding copilots are a nascent technology, they are likely to improve rapidly.
    “So you have to track them,” he adds.'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: Bagchi回应道：“用你现有的用例试试它们，并让它们承受你正在创建的软件的压力。” 但是由于未经协助的编码副驾驶是一种新兴技术，它们可能会迅速改进。
    “因此，你必须跟踪它们，”他补充道。
- en: Moreover, software engineers will have to “consistently ensure code is secure,
    reliable, and maintainable throughout its life cycle,” Dechrai says. “It will
    always be up to the developer to properly understand the output and how it was
    generated.”
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，软件工程师必须“始终确保代码在其生命周期内安全、可靠和可维护”，Dechrai 说道。“开发人员始终需要正确理解输出及其生成方式。”
