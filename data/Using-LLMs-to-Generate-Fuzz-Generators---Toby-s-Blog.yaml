- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:48:34'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:48:34'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Using LLMs to Generate Fuzz Generators - Toby's Blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LLMs生成Fuzz生成器 - Toby's Blog
- en: 来源：[https://verse.systems/blog/post/2024-03-09-using-llms-to-generate-fuzz-generators/](https://verse.systems/blog/post/2024-03-09-using-llms-to-generate-fuzz-generators/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://verse.systems/blog/post/2024-03-09-using-llms-to-generate-fuzz-generators/](https://verse.systems/blog/post/2024-03-09-using-llms-to-generate-fuzz-generators/)
- en: LLMs seem surprisingly good at many things. So much so that not a week goes
    by without someone coming up with yet another use-case for this technology, often
    to solve tasks quickly that traditionally took a non-trivial amount of human work
    to complete.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: LLMs在许多方面表现得令人惊讶的出色。以至于每周都有人提出另一个使用此技术的用例，通常是为了快速解决传统上需要大量人工工作才能完成的任务。
- en: Today’s example was [Brendan Dolan-Gavitt](https://engineering.nyu.edu/faculty/brendan-dolan-gavitt)’s
    remarkable [experiment](https://twitter.com/moyix/status/1765967602982027550)
    using [Claude](https://claude.ai) to generate a [fuzzer](https://en.wikipedia.org/wiki/Fuzzing)
    for some GIF parsing code. The entire thread is worth a read if you’re curious;
    however, Brendan gives Claude the C code for the GIF parser and asks Claude to
    generate the Python implementation for a fuzzer to generate GIF-like input to
    fuzz the given GIF parser. Claude dutifully complies and the resulting fuzzer
    finds a range of vulnerabilities. Brendan since [repeated](https://twitter.com/moyix/status/1766225423841550381)
    that success with a less well-known format, VRML files.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的示例来自[Brendan Dolan-Gavitt](https://engineering.nyu.edu/faculty/brendan-dolan-gavitt)，他使用了[Claude](https://claude.ai)来生成一个[fuzzer](https://en.wikipedia.org/wiki/Fuzzing)，用于一些GIF解析代码。如果你感兴趣的话，整个讨论串都是值得一读的；然而，Brendan将GIF解析器的C代码交给了Claude，并要求Claude生成一个Python实现的fuzzer，以生成类似GIF的输入来对给定的GIF解析器进行fuzz测试。Claude如此照办，生成的fuzzer发现了一系列的漏洞。此后，Brendan在一个不那么知名的格式——VRML文件中——也[重复取得了](https://twitter.com/moyix/status/1766225423841550381)这样的成功。
- en: 'This success is at first glance very pleasing: writing a good fuzzer for a
    non-trivial input format is time-consuming. Being able to automate this process
    is therefore super appealing. Brendan’s success here might even seem surprising.
    It certainly was to me when I first saw his tweet. Having thought about it, with
    the benefit of hindsight, I’ve started to understand why Brendan might have expected
    it to work in the first place.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这一成功乍看起来非常令人愉悦：编写一个针对非平凡输入格式的良好fuzzer是耗时的。能够自动化这一过程因此极具吸引力。Brendan在这里的成功甚至可能看似令人惊讶。当我第一次看到他的推文时，对我来说确实如此。在深思熟虑之后，事后诸葛亮地，我开始理解为什么Brendan在一开始就可能预料到它会奏效。
- en: Why Might This Work?
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么会奏效呢？
- en: The reason I found Brendan’s success surprising is because I hold the opinion
    that LLMs are not a great way to do precise reasoning about code. Indeed, many
    people have tried using LLMs to find bugs directly in code, by crafting a prompt
    with instructions telling the LLM what to do and including the code within the
    prompt. In asking an LLM to look at a piece of code and spot bugs in it, one is
    essentially asking the LLM to perform [static analysis](https://en.wikipedia.org/wiki/Static_program_analysis).
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现Brendan的成功之所以让我感到惊讶，是因为我认为LLMs并不是一种精确推理代码的好方法。事实上，许多人已经尝试使用LLMs直接在代码中找到bug，通过在提示中包含指导LLM做事和代码本身。要求LLM查看一段代码并发现其中的bug，实质上等同于要求LLM执行[静态分析](https://en.wikipedia.org/wiki/Static_program_analysis)。
- en: 'I hold the opinion that we shouldn’t expect LLMs to be very good at static
    analysis. After all, they are stochastic machines trained to produce the output
    that is statistically most likely to come next given the LLM’s training data.
    In other words, to generate output statistically “close to” the expected output.
    This is why they are of course known to be imprecise, or to [hallucinate](https://en.wikipedia.org/wiki/Hallucination_(artificial_intelligence))
    and so on. But effective static analysis requires *precision* above all else:
    if the static analyser tells you there is a bug in the code, it has to be very
    sure the bug is real. Otherwise, developer time drowns in a sea of [false bug
    reports](https://owasp.org/www-community/controls/Static_Code_Analysis#:~:text=Limitations-,False%20Positives,application%20from%20input%20to%20output.).'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我坚持认为，我们不应期望LLMs在静态分析方面表现很好。毕竟，它们是训练成根据LLM的训练数据生成统计上最可能出现的输出的随机机器。换句话说，生成统计上“接近”预期输出的输出。这就是为什么它们当然被认为是不精确的，或者会[产生幻觉](https://en.wikipedia.org/wiki/Hallucination_(artificial_intelligence))等等。但有效的静态分析要求*准确性*高于一切：如果静态分析器告诉你代码中有一个错误，它必须非常确信这个错误是真实存在的。否则，开发者的时间将淹没在[虚假的bug报告](https://owasp.org/www-community/controls/Static_Code_Analysis#:~:text=Limitations-,False%20Positives,application%20from%20input%20to%20output.)的海洋中。
- en: 'But, in contrast to static analysis, fuzzing is very different. Fuzzing is
    an inherently stochastic process. Quoting from [Wikipedia](https://en.wikipedia.org/wiki/Fuzzing):'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但与静态分析相比，模糊测试大不相同。模糊测试是一个固有的随机过程。引用自[Wikipedia](https://en.wikipedia.org/wiki/Fuzzing)：
- en: An effective fuzzer generates semi-valid inputs that are “valid enough” in that
    they are not directly rejected by the parser, but do create unexpected behaviors
    deeper in the program and are “invalid enough” to expose corner cases that have
    not been properly dealt with.
  id: totrans-split-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个有效的模糊测试工具生成半有效的输入，这些输入在解析器中“足够有效”，即它们不会直接被拒绝，但确实会在程序的深层产生意外行为，并且“足够无效”，以揭示那些未经妥善处理的边缘情况。
- en: In other words, a fuzzer should generate inputs that are “close to” what is
    expected by the program. Therefore, we might expect LLMs to be a better fit at
    generating a “close enough” fuzzer for a given program.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，模糊测试工具应生成与程序预期输入“接近”的输入。因此，我们可能期望LLMs更适合生成一个“足够接近”的模糊测试工具来适应给定程序。
- en: Fuzzing an Unknown Input Format
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模糊测试一个未知的输入格式
- en: One thing (to quote Carrie Bradshaw) I couldn’t help but wonder, however, about
    Brendan’s experiments was to what degree Claude performed well because both GIF
    and VRML are known input formats. We should expect the LLM to “know” about both
    formats, given that its training data likely contained much text about each input
    format, as well as lots of parsing and serialisation code for both formats, too
    (although considerably more for GIF than VRML).
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有一件事（引用卡里·布拉德肖）我忍不住想知道的是，然而，关于布兰登的实验，克劳德表现得有多好，因为GIF和VRML都是已知的输入格式。我们应该期望LLM“了解”这两种格式，因为其训练数据很可能包含大量关于每种输入格式的文本，以及大量用于这两种格式的解析和序列化代码（尽管对于GIF而言要多得多比VRML）。
- en: I therefore decided to test Claude on an unknown input format. Fortunately for
    me I had one lying around. 8 years ago, in 2016, when I first started [teaching](../2016-07-18-software-engineering-teaching/)
    at Melbourne, I set my students an assignment in which I created a fictitious
    input format and asked them to write fuzzers for this input format.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我决定在一个未知的输入格式上测试克劳德。幸运的是，我手头正好有一个。8年前，也就是2016年，当我首次在墨尔本[教学](../2016-07-18-software-engineering-teaching/)时，我给我的学生布置了一项任务，我创建了一个虚构的输入格式，并要求他们为这种输入格式编写模糊测试工具。
- en: 'To make the assignment challenging, the input format was protected by a [CRC32](https://en.wikipedia.org/wiki/Cyclic_redundancy_check)
    checksum. Specifically, each input is a *packet*, whose structure looks like the
    following and includes a (useless) sequence number, a two-byte length field, and
    a data payload (whose maximum size is 4096 bytes):'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使任务具有挑战性，该输入格式由[CRC32](https://en.wikipedia.org/wiki/Cyclic_redundancy_check)校验和保护。具体来说，每个输入是一个*数据包*，其结构如下，并包括一个（无用的）序列号，一个两字节长度字段和一个数据负载（其最大大小为4096字节）：
- en: '[PRE0]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The data payload consisted of a sequence of instructions (each one byte in size)
    for a simple arithmetic [stack machine](https://en.wikipedia.org/wiki/Stack_machine)
    that operated over a stack of signed integers (a bit like the venerable [UNIX
    `dc` utility](https://en.wikipedia.org/wiki/Dc_(computer_program)). The machine
    instructions included ones to push small integers (in the range [0,9]) onto the
    stack; to pop the stack; to `ADD`, `SUBTRACT`, `MULTIPLY` or `DIVIDE` the two
    items on the top of the stack, popping them from the stack and pushing the result;
    as well as operations to `READ` and `WRITE` to arbitrary positions in the stack
    (identified using the top-of-stack operand as an offset downwards from the top
    of the stack).
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 数据负载由一系列指令组成（每个指令大小为一个字节），用于简单算术[堆栈机器](https://en.wikipedia.org/wiki/Stack_machine)，操作有符号整数堆栈（类似于古老的[UNIX
    `dc`实用程序](https://en.wikipedia.org/wiki/Dc_(computer_program))）。机器指令包括将小整数（范围在[0,9]之间）推入堆栈；弹出堆栈；对堆栈顶部的两个项执行`ADD`、`SUBTRACT`、`MULTIPLY`或`DIVIDE`操作，从堆栈中弹出它们并推送结果；以及用于在堆栈中任意位置进行`READ`和`WRITE`操作（使用堆栈顶部操作数作为从堆栈顶部向下偏移的标识符）。
- en: 'I wrote a parser for the input format and an interpreter for the stack machine
    language. The [C code](https://www.dropbox.com/scl/fi/f4ixkhypnm0g9e0n42nfz/for_brendan.tar.gz?rlkey=0730l3mkoosn6cwo67vzazbz8&dl=0)
    that implements this functionality is under 400 [SLOC](https://en.wikipedia.org/wiki/Source_lines_of_code).
    I seeded a range of vulnerabilities in this code, namely:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我为输入格式编写了一个解析器，并为堆栈机器语言编写了一个解释器。实现这些功能的[C 代码](https://www.dropbox.com/scl/fi/f4ixkhypnm0g9e0n42nfz/for_brendan.tar.gz?rlkey=0730l3mkoosn6cwo67vzazbz8&dl=0)不到400个[SLOC](https://en.wikipedia.org/wiki/Source_lines_of_code)。我在这段代码中引入了一系列漏洞，包括：
- en: A [Heartbleed](https://en.wikipedia.org/wiki/Heartbleed) style out-of-bounds
    `memcpy` in the parsing code (blindly trusting the input data’s length field to
    use as the length to pass to `memcpy`, even though the source and destination
    buffers’ sizes are both 4096 bytes while the maximum 2-byte length value is 65535);
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在解析代码中的一个类似于[Heartbleed](https://en.wikipedia.org/wiki/Heartbleed)风格的越界`memcpy`（盲目信任输入数据的长度字段作为传递给`memcpy`的长度，尽管源和目标缓冲区的大小都为4096字节，而最大的2字节长度值为65535）；
- en: Unchecked division-by-zero when the second argument to the `DIVIDE` instruction
    was zero;
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`DIVIDE`指令的第二个参数为零时的未检查除零；
- en: Unchecked signed overflow when stack operands grow too large due to repeated
    application of arithmetic operations;
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未检查的有符号整数溢出，当由于算术操作的重复应用导致堆栈操作数增长过大时；
- en: Out-of-bounds read due to unchecked offset in the implementation of the `READ`
    instruction;
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于在`READ`指令的实现中未检查偏移量，导致越界读取；
- en: Out-of-bounds write similarly in the `WRITE` instruction.
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WRITE` 指令中的越界写入问题类似。'
- en: I [asked](https://gist.github.com/tobycmurray/195dc742a82c9bea8e02928229b4692f)
    Claude Sonnet (the default, free Claude model) to generate a Python fuzzer for
    the C code. The prompt I crafted gave Claude some hints about the code structure,
    telling it that there was an outer parser implemented by the `parse_packet` function,
    followed by an interpreter implemented by the `execute` function. My prompt (linked
    above) included the relevant bits of the code along with these explanations and
    the request to the model to generate the Python fuzzer.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我[请求](https://gist.github.com/tobycmurray/195dc742a82c9bea8e02928229b4692f)克劳德·索内特（默认的、免费的克劳德模型）为C代码生成一个Python模糊器。我精心设计的提示给了克劳德一些关于代码结构的提示，告诉它有一个由`parse_packet`函数实现的外部解析器，后面跟着一个由`execute`函数实现的解释器。我的提示（上面链接）包括代码的相关部分以及这些解释和对模型生成Python模糊器的请求。
- en: Claude generated a pretty useful fuzzer, although I had to ask it to fix a type
    error in the code it generated (which it did first try after I gave it the error
    message).
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 克劳德生成了一个相当有用的模糊器，尽管我不得不让它修复代码中生成的类型错误（我给了它错误消息后，它在第一次尝试后就修复了）。
- en: 'The resulting Python fuzzer code is below:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的Python模糊器代码如下：
- en: '[PRE1]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I compiled the C program with Clang’s [Address Sanitizer](https://clang.llvm.org/docs/AddressSanitizer.html)
    and [Undefined Behaviour Sanitizer](https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html)
    turned on. Running the Python code to produce inputs for the C program, and running
    the compiled C program against the inputs produced, I found that Claude’s fuzzer
    is able to trigger the out-of-bounds read and write bugs only.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用Clang的[地址消毒剂](https://clang.llvm.org/docs/AddressSanitizer.html)和[未定义行为消毒剂](https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html)编译了C程序。运行Python代码为C程序生成输入，并运行编译后的C程序对生成的输入进行测试，我发现克劳德的模糊器只能触发越界读取和写入漏洞。
- en: However, the fuzzer is unable to trigger the other bugs. I shared this code
    with Brendan who also played with it and got [similar results](https://twitter.com/moyix/status/1766311605413818826).
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，模糊器无法触发其他漏洞。我与布伦丹分享了这段代码，他也玩了一下，并得到了[类似的结果](https://twitter.com/moyix/status/1766311605413818826)。
- en: What should we make of this?
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该如何看待这一点？
- en: Understanding the Results
  id: totrans-split-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解结果
- en: 'Why is Claude’s fuzzer unable to find the other bugs? If we look at the fuzzing
    code, the answer is pretty clear. Here is the relevant snippet:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么克劳德的模糊器无法找到其他漏洞？如果我们看看模糊代码，答案是很明显的。这里是相关的片段：
- en: '[PRE2]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice how the packet data it generates is totally random bytes. It then generates
    what it calls `padding` which contains entirely valid instructions. So of course
    the correctly-formatted instruction data is hidden behind a mass of noise.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意它生成的数据包数据完全是随机字节。然后生成所谓的`padding`，其中包含完全有效的指令。因此，正确格式的指令数据隐藏在一堆噪音后面。
- en: 'Instead the data and padding should be calculated e.g. like this:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 而是应该计算数据和填充，例如像这样：
- en: '[PRE3]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: (With this change, the fuzzer can trigger the division-by-zero. However, the
    other bugs remain out of reach because the out-of-bounds read and write are far
    too easy to trigger, making the odds of being able to trigger the others without
    triggering one of those incredibly small. This is not the fuzzer’s fault, per
    se. Although is an inherent limitation with fuzzing in this manner.)
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: （通过这种改变，模糊器可以触发除零操作。然而，其他漏洞仍然无法触及，因为越界读取和写入太容易触发，使得在不触发其中之一的情况下触发其他漏洞的可能性极小。这并不是模糊器的问题本身。尽管如此，这是以这种方式进行模糊的固有限制。）
- en: 'Also, Claude’s fuzzer always correctly reports the packet length in the `len`
    field:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，克劳德的模糊器始终正确报告`len`字段中的数据包长度：
- en: '[PRE4]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This means the Heartbleed style vulnerability in the parser can never be triggered
    (and also means the correctly formatted instruction data is ignored by the interpreter,
    meaning that that correctly formatted input has no ability to trigger bugs in
    the code).
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着解析器中的Heartbleed风格漏洞永远无法触发（并且也意味着解释器忽略了正确格式的指令数据，这意味着这种正确格式的输入无法触发代码中的错误）。
- en: So What About Static Analysis?
  id: totrans-split-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么静态分析呢？
- en: Of course, like me I’m sure you’re wondering by now whether we might’ve been
    better off asking Claude to look for vulnerabilities directly in the code (i.e.,
    to perform the kind of static analysis I referred to above).
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，就像我一样，我敢肯定你现在也在想，也许让克劳德直接在代码中查找漏洞会更好（即进行我上面提到的静态分析类型）。
- en: 'Note: doing so isn’t very scientific. We are comparing a method (fuzzing) in
    which false alarms are impossible (and therefore all alerts are useful information)
    to another (static analysis by LLM) in which it is very difficult to trust the
    generated bug alerts. So we are hardly comparing apples with apples. But let’s
    proceed anyway.'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：这样做并不是非常科学。我们正在比较一种（模糊）方法，其中不可能出现误报（因此所有警报都是有用的信息），与另一种（LLM的静态分析），在这种方法中很难信任生成的漏洞警报。因此，我们几乎没有在比较苹果和苹果。但让我们继续吧。
- en: 'When I asked Claude to look for vulnerabilities in this code it found:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当我请克劳德查找这段代码中的漏洞时，它找到了：
- en: The Heartbleed-style buffer overflow in the parsing code;
  id: totrans-split-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析代码中的Heartbleed风格缓冲区溢出；
- en: The division-by-zero in the `DIVIDE` instruction
  id: totrans-split-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DIVIDE`指令中的除零错误'
- en: Out-of-bounds memory read in the `READ` instruction (due to arithmetic
  id: totrans-split-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READ`指令中的越界内存读取（由于算术操作'
- en: Uninitialised stack in the instruction execution function `execute`
  id: totrans-split-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execute`指令执行函数中的未初始化堆栈'
- en: So it found 3 out of 5 vulnerabilities and one additional one. Whether you consider
    the uninitialised stack a real vulnerability is debatable. It matters only in
    the presence of the out-of-bounds read vulnerability (because without that, the
    uninitialised portions of the stack can never be accessed). On balance I therefore
    consider the uninitialised stack a false positive.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，它发现了5个漏洞中的3个以及一个额外的漏洞。无论你是否认为未初始化的堆栈是真正的漏洞都是值得商榷的。只有在存在越界读取漏洞时，这才重要（因为没有这个漏洞，堆栈的未初始化部分永远无法被访问）。综合考虑，我因此认为未初始化的堆栈是一个误报。
- en: Claude also coached me on how I should fix these vulnerabilities.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 克劳德还指导我应该如何修复这些漏洞。
- en: '[Updated: Sun 10 Mar 2024 14:15:51 AEDT] A Promising Way Forward?'
  id: totrans-split-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[更新：周日，2024年3月10日14:15:51 AEDT] 一个有前途的前进方式？'
- en: 'A little over 12 hours after I wrote this post, it’s worth asking: what did
    we learn?'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 大约12小时后，我写下这篇文章，我们值得问：我们学到了什么？
- en: LLMs seem interestingly good at being able to analyse code and write a fuzzer
    to generate “close enough” inputs to exercise that code and find bugs. Though
    they have some limitations.
  id: totrans-split-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LLMs似乎非常擅长分析代码，并编写一个模糊器以生成“足够接近”的输入来执行该代码并发现漏洞。尽管它们有一些限制。
- en: LLMs can do static analysis but suffer from false positives and so on.
  id: totrans-split-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LLM可以进行静态分析，但会出现误报等问题。
- en: This [suggests](https://twitter.com/thuanpv_/status/1766593960959476182), as
    my colleague [Thuan Pham](https://thuanpv.github.io/) notes, that perhaps we should
    consider combining the two approaches.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我的同事[Thuan Pham](https://thuanpv.github.io/)所指出的，这[表明](https://twitter.com/thuanpv_/status/1766593960959476182)，也许我们应该考虑结合这两种方法。
- en: 'Specifically, we could consider performing the following steps:'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们可以考虑执行以下步骤：
- en: Ask the LLM to identify vulnerabilities in the code (i.e., to statically analyse
    it)
  id: totrans-split-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让LLM来识别代码中的漏洞（即静态分析它）。
- en: For each vulnerability the LLM identifies, ask it to generate a [directed](https://mboehme.github.io/paper/CCS17.pdf)
    fuzzer that generates inputs to try to trigger (just) that vulnerability.
  id: totrans-split-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于LLM识别的每个漏洞，都请它生成一个[有针对性的](https://mboehme.github.io/paper/CCS17.pdf)模糊器，生成输入以尝试触发（仅）该漏洞。
- en: A quick experiment with Claude suggests this approach could be promising (with
    some prompting, Claude was able to generate a program to generate an input to
    trigger the Heartbleed-style vulnerability mentioned above). But of course further
    work is needed to validate this approach and work out what challenges need to
    be overcome to make it practical (if indeed it can be made practical).
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 与克劳德的一个快速实验表明，这种方法可能是有希望的（在一些提示下，克劳德能够生成一个程序来生成一个输入，以触发上述提到的Heartbleed风格的漏洞）。但当然，还需要进一步的工作来验证这种方法，并解决使其实际可行的挑战（如果确实可以实现的话）。
- en: That’s certainly more work than can be squeezed into the odd free moment on
    a heatwave weekend.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对比在炎热的周末的闲暇时刻做的更多工作。
- en: Conclusion
  id: totrans-split-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: What are we to make of this, above any other unscientific experiment with an
    LLM?
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 与LLM进行的任何其他非科学实验相比，我们如何看待这个？
- en: In terms of fuzzing, LLMs have been used to generate [fuzz drivers](https://arxiv.org/abs/2307.12469)
    and there is much interest in that topic at present (which is distinct from using
    them to generate stand-alone fuzzers, the topic of this blog post). Indeed, [DARPA](https://www.darpa.mil/)
    sees so much potential in using LLMs for vulnerability discovery, exploitation
    and patching that last year it decided to [revisit](https://aicyberchallenge.com/)
    its 2016 Cyber Grand Challenge, launching the AIxCC competition, to understand
    the impact of LLM-related technology for these tasks.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在模糊测试方面，LLMs已被用来生成[fuzz drivers](https://arxiv.org/abs/2307.12469)，目前对这个主题非常感兴趣（这与使用它们生成独立模糊器的主题不同，这也是本博客文章的主题）。事实上，[DARPA](https://www.darpa.mil/)看到了在使用LLMs进行漏洞发现、利用和修补方面的巨大潜力，去年决定重新审视其2016年的Cyber
    Grand Challenge，推出AIxCC竞赛，以了解LLM相关技术在这些任务中的影响。
- en: 'With all this in mind, I’m curious to see whether any of the AIxCC competitors
    attempt to automate vulnerability discovery by fuzz generator generation (i.e.,
    the topic of this post), **[Updated: Sun 10 Mar 2024 14:15:51 AEDT to add]** whether
    directed or not. We should certainly expect many to try fuzz-driver generation
    and static-analysis via LLM.'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到所有这些，我很想看看AIxCC的竞争对手是否尝试通过模糊生成器发现漏洞的自动化（即本文的主题），**[更新时间：2024年3月10日14:15:51
    AEDT添加]** 无论是有针对性的还是无针对性的。我们当然应该期待许多人尝试通过模糊驱动程序生成和LLM进行静态分析。
- en: 'Like so many other experiments with LLMs, this one served to simultaneously
    surprise and disappoint, **[Updated: Sun 10 Mar 2024 14:15:51 AEDT to add]** though
    I remain optimistic about the value of exploring this approach further.'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 就像LLM的许多其他实验一样，这个实验同时令人惊讶和失望，**[更新时间：2024年3月10日14:15:51 AEDT添加]** 尽管我对进一步探索这种方法的价值仍然持乐观态度。
- en: I’d love to hear your thoughts.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我很想听听您的想法。
- en: In the meantime, much thanks of course to Brendan whose work inspired this post.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，当然也要非常感谢布兰登，他的工作激发了这篇文章。
