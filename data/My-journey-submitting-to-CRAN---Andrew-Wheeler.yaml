- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:05:21'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:05:21'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: My journey submitting to CRAN | Andrew Wheeler
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我提交给 CRAN 的旅程 | Andrew Wheeler
- en: 来源：[https://andrewpwheeler.com/2022/07/22/my-journey-submitting-to-cran/](https://andrewpwheeler.com/2022/07/22/my-journey-submitting-to-cran/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://andrewpwheeler.com/2022/07/22/my-journey-submitting-to-cran/](https://andrewpwheeler.com/2022/07/22/my-journey-submitting-to-cran/)
- en: So my R package [ptools is up on CRAN](https://cran.r-project.org/package=ptools).
    CRAN obviously does an important service – I find the issues I had to deal with
    pedantic – but will detail my struggles here, mostly so others hopefully do not
    have to deal with the same issues in the future. Long story short I knew going
    in it can be tough and CRAN did not disappoint.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我的 R 包[ptools 已经在 CRAN 上了](https://cran.r-project.org/package=ptools)。CRAN
    显然提供了重要的服务 - 我发现我必须处理啰嗦的问题 - 但将在此详细描述我的挣扎，主要是希望其他人将来不必处理相同的问题。长话短说，我知道这可能会很艰难，CRAN
    没有让我失望。
- en: Initially I submitted the package in early June, which it passed the email verification,
    but did not receive any email back after that. I falsely presumed it was in manual
    review. After around a month I sent an email to cran-sysadmin. The CRAN sysadmin
    promptly sent an email back with the reason it auto-failed – examples took too
    long – but not sure why I did not receive an auto-message back (so it never got
    to the manual review stage). When I got auto-fail messages at the equivalent stage
    in later submissions, it was typically under an hour to get that stage auto-fail
    message back.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最初我在 6 月初提交了这个包，通过了电子邮件验证，但之后没有收到任何邮件回复。我错误地以为它处于手动审查状态。大约一个月后，我给 cran-sysadmin
    发了封电子邮件。CRAN 系统管理员立即回了一封电子邮件，解释了自动失败的原因 - 示例太长了 - 但不确定为什么我没有收到自动消息回复（所以它从未到达手动审查阶段）。当我在后来的提交中等价阶段收到自动失败消息时，通常不到一小时就会收到该阶段的自动失败消息。
- en: So then I went to fixing the examples that took too long (which on my personal
    machine all run in under 5 seconds, I have a windows $400 low end “gaming” desktop,
    with an extra $100 in RAM, so I am not running some supercomputer here as background).
    Running devtools `check()` is not the same as running `R CMD check --as-cran path\package.tar.gz`,
    but maybe `check_built()` is, I am not sure. So first note to self just use the
    typical command line tools and don’t be lazy with devtools.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我去修复那些太久的示例（在我个人的机器上都在 5 秒内运行，我有一台价值 400 美元的低端“游戏”台式机，额外加了 100 美元的内存，所以我并不是在一台超级计算机上运行背景）。运行
    devtools 的`check()`不同于运行`R CMD check --as-cran path\package.tar.gz`，但也许`check_built()`是一样的，我不确定。所以首先要注意的是，只使用典型的命令行工具，不要在
    devtools 上偷懒。
- en: Initially I commented out sections of the examples that I knew took too long.
    Upon manual review though, was told don’t do that and to wrap too long of examples
    in `donttest{}`. Stochastic changes in run times even made me fail a few times
    at this – some examples passed the time check in some runs but failed in others.
    Some examples that run pretty much instantly on my machine failed in under 10
    seconds for windows builds on CRAN’s checks. (My examples use plots on occasion,
    and it may be `spplot` was the offender, as well as some of my functions that
    are not fast and use loops internally.) I have no advice here than to just always
    wrap plot functions in `donttest{}`, as well as anything too complicated for an
    abacus. There is no reliable way (that I can figure) to know examples that are
    very fast on my machine will take 10+ seconds on CRAN’s checks.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，我将我知道太久的示例部分注释掉。然而，在手动审查过程中，有人告诉我不要这样做，而是在`donttest{}`中包裹太长的示例。运行时间的随机变化甚至让我在这方面失败了几次
    - 有些示例在某些运行中通过了时间检查，但在其他运行中失败了。一些在我的机器上几乎立即运行的示例在 CRAN 的检查中失败，而在 windows 构建中在
    10 秒内失败。（我的示例偶尔使用绘图，并且可能`spplot`是罪魁祸首，以及一些内部不快速并且使用循环的函数。）我在这里没有别的建议，只是始终将绘图函数包装在`donttest{}`中，以及任何对算盘来说太复杂的东西。没有可靠的方法（我可以想到的）知道在我的机器上非常快速的示例将在
    CRAN 的检查中花费 10 秒以上的时间。
- en: But doing all of these runs resulted in additional Notes in the description
    about spelling errors. At first it was last names in citations (Wheeler and Ratcliffe).
    So I took those citations out to prevent the Note. Later in manual review I was
    asked to put them back in. Occasionally a DOI check would fail as well, [although
    it is the correct DOI](https://onlinelibrary.wiley.com/doi/10.1002/jip.1449).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，执行所有这些运行会导致关于拼写错误的其他说明。起初是引文中的姓氏（Wheeler 和 Ratcliffe）。所以我将这些引文拿出来以防止出现说明。后来在手动审查中，我被要求将它们放回去。偶尔
    DOI 检查也会失败，[尽管它是正确的 DOI](https://onlinelibrary.wiley.com/doi/10.1002/jip.1449)。
- en: One of the things that is confusing to me – some of the Note’s cause automatic
    failures (examples too long) and others do not (spelling errors, DOI check). The
    end result messages to me are the same though (or at least I don’t know how to
    parse a “this is important” Note vs a “whatever not a big deal” Note). The irony
    of this back and forth related to these spelling/DOI notes in the description
    is that the description went through changes only to get back to what is was originally.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有一件事让我感到困惑 - 一些说明会导致自动失败（例如，示例太长），而其他说明则不会（拼写错误，DOI检查）。但是对我来说，最终的结果消息是一样的（或者至少我不知道如何解析“这是重要的”说明与“无关紧要的”说明）。在这些与拼写/DOI说明相关的来回中的讽刺之处在于，描述经历了更改，只是回到了最初的状态。
- en: 'So at this point (somewhere around 10+ submission attempts), 7/16, it finally
    gets past the auto/human checks to the point it is uploaded to CRAN. Finished
    right – false! I then get an automated email from Brian Ripley/CRAN later that
    night saying it is up, but will be removed on 8/8 because `Namespace in Imports
    field not imported from: ''maptools''`.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在这一点上（大约提交了10次以上），7/16，它终于通过了自动/人工检查的点，上传到了CRAN。完成得好吗 - 错！然后，当晚晚些时候我收到了来自Brian
    Ripley/CRAN的自动邮件，说它已经上线了，但将在8/8被移除，因为`Imports字段中的命名空间未从导入：'maptools'`。
- en: One function had `requireNamespace("maptools")` to use the conversion functions
    in maptools to go between sp/spatspat objects. This caused that “final” note about
    maptools not being loaded. To fix this, I ended up just removing maptools dependency
    altogether, as using unexported functions, e.g. `maptools:::func` causes a note
    when I run `R CMD check` locally (so presume it will auto-fail). There is probably
    a smarter/more appropriate way to use imports – I default though to doing something
    I hope will pass the CRAN checks though.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数使用`requireNamespace("maptools")`来使用maptools中的转换函数在sp/spatspat对象之间进行转换。这导致了关于maptools未加载的“最终”说明。为了解决这个问题，我最终干脆删除了对maptools的依赖，因为在本地运行`R
    CMD check`时使用未导出的函数，例如`maptools:::func`会导致一个说明（因此我认为它会自动失败）。可能有一种更聪明/更合适的方法来使用导入
    - 不过，我默认选择做一些我希望能通过CRAN检查的事情。
- en: I am not sure why this namespace is deal breaker at this stage (after already
    on CRAN) and not earlier stages. Again this is another Note, not a warning/error.
    But sufficient to get CRAN to remove my package in a few weeks if I don’t fix.
    This email does not have the option “send email if a false positive”.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定为什么在这个阶段（已经在CRAN上了）这个命名空间是一个破坏性因素，而在之前的阶段不是。再次强调，这只是另一个说明，不是一个警告/错误。但如果我不加以修复，它足以让CRAN在几周内移除我的软件包。此电子邮件没有“如果是误报，则发送电子邮件”的选项。
- en: When resubmitting after doing my fixes, I then got a new error for the same
    package version (because it technically is on CRAN at this point), so I guess
    I needed to increment to 1.0.1 and not fix the 1.0.0 package at this point. Also
    now the DOI issue in the description causes a “warning”. So I am not sure if this
    update failed because of package version (which doesn’t say note or warning in
    the auto-fail email) or because of DOI failure (which again is now a warning,
    not a Note).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成修复后重新提交时，我收到了相同软件包版本的新错误（因为在这一点上它在CRAN上），所以我猜我需要将版本增加到1.0.1，而不是此时修复1.0.0包。现在描述中的DOI问题会导致“警告”。所以我不确定此更新失败是因为软件包版本（自动失败电子邮件中没有说明或警告）还是因为DOI失败（现在又变成了警告，而不是说明）。
- en: Why sometimes a DOI failure is a warning and other times it is a note I do not
    know. At some later stage I just take this offending DOI out (against the prior
    manual review), as it can cause auto-failures (all cites are in the examples/docs
    as well).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么有时DOI失败会是一个警告，而其他时候则是一种说明，我不知道。在以后的某个阶段，我会把这个有问题的DOI删除掉（尽管之前已经进行了手动审核），因为它可能导致自动失败（所有引用也都在示例/文档中）。
- en: OK, so package version incremented and namespace error fixed. Now in manual
    review for the 1.0.1 version, get a note back to fix my errors – one of *my tests*
    fails on noLD/M1Mac (what is noLD you may ask? It is “no long doubles”). These
    technically failed on prior as well, but I thought I just needed to pass 2+ OS’s
    to get on CRAN. I send an email to Uwe Ligges at this point (as he sent an email
    about errors in prior 1.0.0 versions at well) to get clarity about what exactly
    they care about (since the reason I started round 2 was because of the Namespace
    threat, not the test errors on Macs/noLD). Uwe responds very fast they care about
    my test that fails, not the DOI/namespace junk.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以包版本已增加，命名空间错误已修复。现在正在手动审查 1.0.1 版本，得到一条备注要修复我的错误 - 我的一个测试在 noLD/M1Mac 上失败了（你可能会问什么是
    noLD？它是“无长双精度”）。这些在以前技术上也失败了，但我以为我只需要通过 2 个以上的操作系统就可以进入 CRAN 了。于是我此时给 Uwe Ligges
    发了一封电子邮件（因为他之前发送了一封关于先前 1.0.0 版本错误的电子邮件），以明确他们到底关心什么（因为我开始第二轮的原因是因为命名空间的威胁，而不是
    Macs/noLD 上的测试错误）。Uwe 很快回复说他们关心我的测试失败了，而不是 DOI/命名空间垃圾。
- en: So in some of my exact tests I have checks along the line `ref <- c(0.25,0.58);
    act <- round(f,2)` where `f` is the results scooped up from my prior function
    calls. The note rounds the results to the first digit, e.g. `0.2 0.5` in the failure
    (I suspect this is some behavior for `testhat` in terms of what is printed to
    the console for the error, but I don’t know how exactly to fix the function calls
    so no doubles will work). I just admit defeat and comment out the part of this
    test function that I think is causing the failure, any solution I am not personally
    going to be able to test in my setup to see if it works. Caveat Emptor, be aware
    my exact test *power* calculation functions are not so good if you are on a machine
    that can’t have long doubles (or M1 Mac’s I guess, I don’t fricken know).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我的一些确切测试中，我检查了这样的内容`ref <- c(0.25,0.58); act <- round(f,2)`，其中 `f` 是我之前函数调用中收集到的结果。备注将结果舍入到第一个数字，例如失败中的
    `0.2 0.5`（我怀疑这是 `testhat` 在打印到控制台上的错误时的一些行为，但我不知道如何精确修复函数调用，以使不会出现双精度）。我只是承认失败，注释掉我认为导致失败的这个测试函数的一部分，任何解决方案我都无法在我的设置中进行测试以查看是否有效。购买者自负，注意我的确切测试*功率*计算函数如果您使用的是无法有长双精度的机器（或者
    M1 Mac，我猜，我不懂）可能效果不好。
- en: 'OK, so that one test fixed, upon resubmission (the following day) I get a *new*
    error in my tests (now on Windows) – `Error in sp::CRS(...): PROJ4 argument-value
    pairs must begin with +`. I have no clue why this is showing an error now, for
    the first time going on close to 20 submissions over the past month and a half.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '好的，那个测试修复了，在重新提交后（第二天）我的测试出现了一个*新*错误（现在在 Windows 上） - `Error in sp::CRS(...):
    PROJ4 argument-value pairs must begin with +`。我不知道为什么现在会出现这个错误，过去一个半月几乎有 20 次提交了。'
- en: The projection string I pass definitely has a “+” at the front – I don’t know
    and subsequent submissions to CRAN even after my attempts to fix (submitting projections
    with simpler epsg codes) continue to fail now. I give up and just remove that
    particular test.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我传递的投影字符串肯定在前面有一个“+” - 我不知道即使在我尝试修复后连续向 CRAN 提交后（提交简化的 epsg 代码的投影），现在也继续失败。我放弃了，只是删除了那个特定的测试。
- en: Uwe sends an updated email in manual review, asking why I removed the tests
    and did not fix them (or fix my code). I go into great detail about the new SP
    error (that I don’t think is my issue), and that I don’t know the root cause of
    the noLD/Mac error (and I won’t be able to debug before 8/8), that the code has
    pretty good test coverage (those functions pass the other tests for noLD/Mac,
    just one), and ask for his grace to upload. He says OK patch is going to CRAN.
    It has been 24 hours since then, so cannot say for sure I will not get a ‘will
    be removed’ auto-email.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Uwe 发来更新的邮件进行手动审查，询问我为什么删除了测试而没有修复它们（或者修复我的代码）。我详细说明了新的 SP 错误（我认为不是我的问题），以及我不知道
    noLD/Mac 错误的根本原因（我在 8 月 8 日之前无法调试），代码具有相当好的测试覆盖率（这些函数通过了其他 noLD/Mac 的测试，只有一个失败），并请求他的谅解来上传。他说好的，补丁要提交到
    CRAN。从那以后已经过去了 24 小时，所以不能确定我不会收到“将被移除”的自动邮件。
- en: To be clear these issues back and forth are on me (I am sure the `\donttest{}`
    note was somewhere [in online documentation](https://r-pkgs.org/) that I should
    have known). About the only legit complaint I have in the process is that the
    “Note” failure carries with it some ambiguity – some notes are deal breakers and
    others aren’t. I suspect this is because many legacy packages fail these stringent
    of checks though, so they need to not auto-fail and have some discretion.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了明确，这些来回的问题都是我的责任（我确定`\donttest{}`注释在某处[在线文档](https://r-pkgs.org/)中，我应该知道）。在这个过程中，我唯一合理的抱怨是“注意”失败带来了一些模糊性
    - 有些注意事项是不可接受的，而有些不是。我怀疑这是因为许多遗留软件包不符合这些严格的检查标准，所以它们不应该自动失败，而应该有一些自由裁量权。
- en: The noLD errors make me question reality itself – does `0.25 = 0.2` according
    to M1 Mac’s? Have I been living a lie my whole life? Do I **really** know my code
    works? I will eventually need to spin up a Docker image and try to replicate the
    noLD environment to know what is going on with that one exact test power function.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: noLD错误让我质疑现实本身 - 根据M1 Mac，`0.25 = 0.2`吗？我一生都在过着一个谎言吗？我**真的**知道我的代码是正确的吗？我最终需要启动一个Docker镜像，尝试复制noLD环境，以了解关于那一个精确测试功率函数的情况。
- en: For the projection errors, I haven’t travelled much recently – does Long Island
    still exist? Is the earth no longer an ellipsoid? At our core are we just binary
    bits flipping the neural networks of our brain – am I no better than the machine?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于投影误差，最近我没有去过太多地方 - 长岛还存在吗？地球不再是椭圆体吗？在我们的核心，我们只是大脑神经网络中的二进制位吗 - 难道我比机器还差吗？
- en: There is an irony here that people with better test code coverage are more likely
    to fail the auto-checks (although those packages are also more likely to be correct!).
    It is intended and reasonable behavior from CRAN, but it puts a very large burden
    on the developer (it is not easy to debug noLD behavior on your own, and M1 Mac’s
    are effectively impossible unless you wish to pony up the cash for one).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个讽刺之处，那些具有更好的测试代码覆盖率的人更有可能失败自动检查（尽管这些软件包也更有可能是正确的！）。这是CRAN的预期和合理行为，但它给开发者带来了很大的负担（在自己身上调试noLD行为并不容易，而且M1
    Mac几乎是不可能的，除非你愿意为此付出现金）。
- en: '* * *'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: CRAN’s model is much different than python’s PyPI, in that I could submit something
    to PyPI that won’t install at all, or will install but cause instant errors when
    running `import mypackage`. CRANs approach is more thorough, but as I attest to
    above is quite a bit on the pedantic side (there are no “functional” changes to
    my code in the last month I went through the back and forth).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: CRAN的模型与Python的PyPI大不相同，我可以向PyPI提交一些根本无法安装的东西，或者会安装但在运行`import mypackage`时立即出错。CRAN的方法更为彻底，但正如我上面所证明的，它有点偏执（在过去一个月里，我的代码没有“功能性”变化）。
- en: The main thing I really care about in a package repository is that it does not
    have malicious code that does suspicious `os` calls and/or sends suspicious things
    over the internet. It is on me to verify the integrity of the code in the end
    (even if the examples work it doesn’t mean the code is correct, I have come across
    a few packages on R that have functions that are obviously wrong/misleading).
    This isn’t an open vs closed source thing – you need to verify/sanity check some
    things work as expected on your own no matter what.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我在软件包存储库中真正关心的主要事情是，它没有恶意代码，不会进行可疑的`os`调用和/或将可疑内容发送到互联网上。最终，验证代码的完整性是我自己的责任（即使示例能够工作，也并不意味着代码是正确的，我在R上遇到过一些显然错误/误导性的函数）。这不是开源与闭源的问题
    - 无论如何，你都需要验证/合理检查一些事情是否按预期工作。
- en: 'So I am on the fence whether CRAN’s excessive checking is “worth it” or not.
    Ultimately since you can do:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我对CRAN过多的检查是“值得”的还是不值得的持保留态度。最终，因为你可以做到：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Maybe it does not matter in the end. And you can peruse the github actions to
    see the current state of whether it runs on different operating systems and avoid
    CRAN altogether.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 也许最后这并不重要。你可以查看github actions，了解它是否在不同的操作系统上运行，并且完全避开CRAN。
