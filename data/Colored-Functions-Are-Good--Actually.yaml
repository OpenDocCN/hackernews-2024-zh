- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:22:17'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:22:17
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Colored Functions Are Good, Actually
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 彩色函数其实挺好的
- en: 来源：[https://www.danmailloux.com/blog/colored-functions-are-good-actually](https://www.danmailloux.com/blog/colored-functions-are-good-actually)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.danmailloux.com/blog/colored-functions-are-good-actually](https://www.danmailloux.com/blog/colored-functions-are-good-actually)
- en: Colored Functions Are Good, Actually
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 彩色函数其实挺好的
- en: In Bob Nystrom's excellent article [What Color is Your Function?](https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/),
    he argues that "colored" (async) functions are bad because they create two separate
    code universes with rules about where you can call what and when. Kind of.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Bob Nystrom 的优秀文章 [What Color is Your Function?](https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/)
    中，他认为“彩色”（异步）函数不好，因为它们创建了两个分离的代码宇宙，规定了何时何地可以调用什么。有点。
- en: I'm going to flip that assertion on its head and argue that, in practice, this
    limitation is often a good thing. I'll admit that I'm setting up a bit of a strawman
    here, and because Bob is much smarter than me, his article also contains lots
    of technical details that may outweigh the benefits of what I'm about to say.
    Indulge my *sort of* correct intro, and I promise what's to come will be at least
    somewhat interesting.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我要把这个断言颠倒过来，我要争论说，在实践中，这种限制通常是一件好事。我承认我在这里有点故意制造一个草人，因为 Bob 比我聪明得多，他的文章也包含了很多技术细节，可能会超过我即将说出的好处。让我自由发挥我的
    *有点* 正确的开头，我保证接下来的内容至少会有点有趣。
- en: '## IO in Haskell'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '## Haskell 中的 IO'
- en: If you've spent some time in online programming circles, you've likely heard
    it said that JavaScript's promises are monads or that they are monadic. While
    a quick Google search reveals that this is not quite true, it is *kind of* true,
    and anyways this is just a botched segue in order to introduce monads.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在网络编程圈子里待过一段时间，你可能听说过 JavaScript 的 promises 是单子（monads）或者它们是单子的。虽然快速的谷歌搜索会告诉你这并不完全正确，但这
    *有点* 真实，无论如何这只是为了引入单子的一个失败的过渡。
- en: Don't worry, this isn't another article about monads. I'm not gonna "say the
    line." (Sike - monads are just monoids in the category of endofunctors!!!) Really,
    I just want to talk about a specific monad - Haskell's `IO` monad. For the uninitiated,
    Haskell is a [*purely* functional programming language](https://en.wikipedia.org/wiki/Functional_programming),
    emphasis on pure. In Haskell, in order to do things like reading from a database,
    writing logs, or making an HTTP request, you must wrap that code in the `IO` monad.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 别担心，这不是又一个关于单子的文章。我不会“说出这句话。”（开玩笑 - 单子其实只是函子范畴中的单子！）实际上，我只想讨论一个特定的单子 - Haskell
    的 `IO` 单子。对于未接触过的人来说，Haskell 是一种 [*纯* 函数式编程语言](https://en.wikipedia.org/wiki/Functional_programming)，强调纯粹。在
    Haskell 中，为了做像从数据库中读取、写入日志或发出 HTTP 请求这样的事情，你必须将那段代码包装在 `IO` 单子中。
- en: '"What''s a monad?" you might be asking. It''s a real rabbit hole, and to be
    honest, it doesn''t really matter right now. If you''re interested, I can recommend
    Arialdo Martini''s [Monads For The Rest Of Us](https://arialdomartini.github.io/monads-for-the-rest-of-us)
    series, but you really don''t need it to proceed, and to reiterate, monads are
    a *real* rabbit hole. **For the purposes of this article, think of `IO` as a simple
    type that wraps the return type of a function.** Much like how a function in JavaScript
    can return `promise<string>`, a function in Haskell can return `IO String`.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '"单子是什么？" 你可能会问。这是一个真正的兔子洞，老实说，现在并不重要。如果你感兴趣，我可以推荐 Arialdo Martini 的 [Monads
    For The Rest Of Us](https://arialdomartini.github.io/monads-for-the-rest-of-us)
    系列，但你真的不需要它来继续，再次强调，单子是一个 *真正* 的兔子洞。 **就本文而言，将 `IO` 视为简单类型，它包装了函数的返回类型。** 就像 JavaScript
    中的函数可以返回 `promise<string>` 一样，Haskell 中的函数可以返回 `IO String`。'
- en: Let's see an example!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子！
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Again, we see a program where side effects are suggested by the presence of
    a type. In this case, that type is `Task`, in JavaScript, it would be `Promise`,
    and as we saw above - in Haskell that type is `IO`. Of course, there are important
    technical distinctions between `Task<int>` and `IO Int`, but they share one important
    benefit. **It signals to the programmer that something effectful is probably happening
    inside that code.**
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们看到一个程序，其中的副作用是由类型的存在暗示的。在这种情况下，该类型是 `Task`，在 JavaScript 中，它可能是 `Promise`，正如我们上面看到的
    - 在 Haskell 中，该类型是 `IO`。当然，`Task<int>` 和 `IO Int` 之间有重要的技术区别，但它们共享一个重要的好处。**它向程序员发出信号，表明代码内可能正在发生某种效果。**
- en: Of course, in C# the compiler does not enforce this distinction, and not all
    effectful operations even are `async` such as writing to the console or generating
    a random number, but in practice, this turns out to be a pretty useful convention.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在 C# 中，编译器并不强制执行这种区别，甚至并不是所有有副作用的操作都是`async`，比如写入控制台或生成随机数，但实际上，这证明是一个相当有用的约定。
- en: Acknowledgements
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 致谢
- en: I'd like to point out that I am not the first person to notice this. Mark Seemann
    has written the excellent article [Async as surrogate IO](https://blog.ploeh.dk/2016/04/11/async-as-surrogate-io/)
    in which he uses much more rigor to truly compare `IO` and F#'s `Async`. His article
    is wonderful, and technical, and thought-provoking, and every programmer should
    read it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我想指出我并不是第一个注意到这一点的人。Mark Seemann 写了一篇优秀的文章 [Async as surrogate IO](https://blog.ploeh.dk/2016/04/11/async-as-surrogate-io/)，在这篇文章中，他更加严谨地比较了`IO`和
    F# 的`Async`。他的文章很棒，很技术性，很发人深省，每个程序员都应该阅读它。
- en: This article, however, is not meant to be that. It's a more casual look at the
    topic which asks, "even if we can't rely on the similarity, is there still something
    valuable there?"
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，本文并不是要这样。它更像是对这个主题的一种随意探讨，问道，“即使我们不能依赖相似性，是否仍然有价值可言？”
- en: As programmers, we can often get fixated on edge cases and technical details,
    but I think it's okay to acknowledge helpful rules of thumb as well, even if they're
    not always 100% accurate. In our day to day work, many of us are often more like
    tradespeople than scientists. If noticing that a function is `async` makes you
    think, "hey, there's probably a side effect in there" - I think that's nice. :)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，我们经常会固执于边缘情况和技术细节，但我认为承认有用的经验法则也是可以的，即使它们并不总是百分之百准确。在我们日常工作中，我们中的许多人通常更像是技工而不是科学家。如果注意到一个函数是`async`让你想到，“嘿，里面可能有副作用”
    - 我觉得那挺好的。 :)
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
