- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:30:27'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:30:27'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The "Hidden Standards" Problem in Interviews
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面试中的“隐藏标准”问题
- en: 来源：[https://thephilosopher.tech/the-hidden-standards-problem-in-interviews](https://thephilosopher.tech/the-hidden-standards-problem-in-interviews)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://thephilosopher.tech/the-hidden-standards-problem-in-interviews](https://thephilosopher.tech/the-hidden-standards-problem-in-interviews)
- en: The inflection point of every tech interview is when the interviewer gives a
    scenario, the candidate seemingly answers correctly, yet the interviewer rejects
    the candidate on the absurdity of the solution. Why do correct solutions tend
    to look absurd? Because of how questions are constructed in the first place.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每个技术面试的转折点是当面试官提出一个场景时，候选人似乎给出了正确答案，但面试官却因解决方案的荒谬而拒绝了候选人。为什么正确的解决方案看起来荒谬？因为问题首先是如何构造的。
- en: Startup engineers are NOT usually taught how to interview. If someone is good
    at their job, it is assumed that he can evaluate potential candidates. You'll
    thus find people with limited technical experience, and still lacking the maturity
    of working with a diverse team, having the authority to determine who works for
    the company.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 初创企业的工程师通常不会被教导如何进行面试。如果一个人擅长自己的工作，就会假设他能评估潜在的候选人。因此，你会发现人们在技术经验有限的情况下，仍然缺乏与多样化团队合作的成熟性，却有权决定谁为公司工作。
- en: When people are not taught, they wing it. A primary mistake in interviewing
    is conflating concepts with knowledge. Unless someone is really good at software
    engineering, he has not yet learnt that syntax is NOT semantics, and the Kafka
    queue he learnt in a systems design Udemy course is not the only way to build
    this particular system.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们没有受到教导时，他们凭感觉行事。面试中的一个主要错误是将概念与知识混为一谈。除非有人真的擅长软件工程，否则他还没有学会语法不是语义的概念，并且他在系统设计Udemy课程中学到的Kafka队列并不是构建这种特定系统的唯一方法。
- en: The conflating of concepts with knowledge degrades the whole interview process
    to "*how many different solutions have you memorised*" instead of "*do you have
    the ability to understand new problems and the skills to deal with them?*" And
    the reason this is culturally acceptable is because this is how schools work.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 将概念与知识混淆将整个面试过程降级为“你记住了多少种不同的解决方案”而不是“你有理解新问题和处理它们的技能吗”的状态。而这种文化接受的原因是因为这就是学校的工作方式。
- en: Thus, it becomes important for your interviewer to hear things like "Kafka"
    or "Microservices" rather than answer the candidate's *petty questions* like "*why
    do you need BigData for 100GB of data that you have?*"
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于你的面试官来说，听到像“Kafka”或“微服务”这样的东西比回答候选人的“琐碎问题”（比如“你为什么需要BigData来处理你拥有的100GB数据？”）更为重要。
- en: Because the emphasis is on arbitrary solutions rather than problems, there is
    never a good exchange of problems in an interview. Only comparing notes on "who
    has implemented a bigger solution so far in life."
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因为重点是在任意解决方案而不是问题上，所以面试中从来没有一个很好的问题交流。只是在比较“谁在生活中实现了更大的解决方案”。
- en: For you to understand what a candidate has accomplished, it's important to understand
    the landscape of the problems that he dealt with. Sure, he wrote an app to work
    with Sqlite databases, which sounds very simplistic. However, when you look closer,
    you realise that he got the company migrated off-of ScyllaDB by rearchitecting
    a read-heavy application to use Sqlite over S3\. And the primary motive was saving
    cost. Yeah, the solution does not look "cool," but he managed to pull off a major
    cost optimisation project. Usually, the arrogance of the interviewer prevents
    him from understanding the problem statement of the candidate, because it's not
    the interviewer who is getting interviewed.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解候选人取得了什么成就，重要的是理解他处理的问题的背景。当然，他编写了一个与Sqlite数据库一起工作的应用程序，听起来非常简单。但是，当你仔细观察时，你会意识到他通过重新架构一个读取密集型应用程序来使用Sqlite而不是ScyllaDB使公司迁移到了S3上，并且主要动机是节约成本。是的，这个解决方案看起来并不“酷”，但他成功地完成了一个重要的成本优化项目。通常，面试官的傲慢阻止他理解候选人的问题陈述，因为面试的对象不是面试官。
- en: 'On the flip side, inexperienced interviewers also see the world in black and
    white and think that their problem statements are the ONLY kind of problem statements
    that exist. They''ll go ahead and ask, "*How would you ensure that you rate-limit
    APIs properly?*" The candidate, not knowing the details of the problem, and being
    rebuffed on asking more details, answers: "*Well, I would just make sure the WAF
    takes care of any abnormal traffic; I wouldn''t add anything more to it unless
    deemed necessary.*"'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，经验不足的面试官也是非黑即白地看待世界，并认为他们的问题陈述是唯一存在的问题陈述。他们会继续问：“*你如何确保适当地限制API的速率？*”候选人不知道问题的细节，又被拒绝进一步询问细节，回答道：“*嗯，我只会确保WAF处理任何异常流量；除非被认为有必要，否则不会再增加其他措施。*”
- en: The above is not a bad answer in itself. It answers on the side of security
    (availability). But the interviewer's company rate-limits APIs because there is
    a non-public enterprise-tier API that is billed per call. But he never mentions
    this landscape to the candidate.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 上述回答本身并不差。它从安全（可用性）的角度进行了回答。但面试官的公司之所以限制API的速率，是因为存在一个按调用计费的非公开企业级API。但他从未向候选人提及这一背景。
- en: Now, many might jump to say, it's the candidate's job to fish out information.
    Well, most of the developing engineers don't have the skills to ferret out information
    either. Or else, there won't be such a big disconnect between the development
    and the product management team. The disconnect with the business teams is greater
    still on both sides. It's just that the interviewer has assumed what they know
    is what "*programming is all about*," and anyone who doesn't know it is "*not
    a programmer.*"
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，许多人可能会说，候选人的工作就是去搜集信息。但是，大多数开发工程师也没有获取信息的技能。否则，开发和产品管理团队之间不会存在如此大的脱节。在双方之间，与业务团队的脱节更为严重。只是面试官假设他们所知道的就是“*编程的全部*”，而任何不知道的人就是“*不是程序员*”。
- en: That's the *hidden standard* right there. Whatever answers you give as a candidate,
    the interviewer adds additional "data points" to it, and then deems the final
    picture incoherent. But these hidden standards are not known to the candidate,
    even if he had the ability to solve the company's problem.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 那就是**隐藏的标准**。无论你作为候选人给出什么答案，面试官都会对其添加额外的“数据点”，然后认为最终的画面不连贯。但这些隐藏的标准对候选人来说是未知的，即使他有能力解决公司的问题。
- en: Additionally, the problems communicated to the candidate are usually described
    through the lens of the interviewer. Most of the times, I've seen good engineers
    solve problems because they *viewed the problem differently*, not because they
    *computed differently on the exact same definition of the problem.* So one must
    not set up the problem landscape and be so biased toward it that opposing views
    are dismissed even before being evaluated on their merits.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，传达给候选人的问题通常是通过面试官的视角描述的。大多数时候，我见过优秀的工程师解决问题是因为他们*从不同的视角看待问题*，而不是因为他们在完全相同的问题定义上*计算方式不同*。因此，我们不应该设定问题的框架并对其持有偏见，以至于在评估其优点之前就将相反的观点排斥掉。
- en: It is hyper-critical that we expect candidates to instantly jump to an answer
    with incomplete and biased information, whereas we ourselves would have taken
    days to internalise the requirements, weeks to fight over the timelines, and months
    making excuses about a buggy implementation.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们非常苛刻地期望候选人立即根据不完整和偏见信息做出回答，而我们自己可能需要数天来内化需求，数周来争论时间表，数月来为有缺陷的实施找借口。
- en: Any time we're not able to evaluate skills, we degrade to evaluating memory
    in the name of experience.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们无法评估技能时，我们就会以经验之名降低到评估记忆的水平。
