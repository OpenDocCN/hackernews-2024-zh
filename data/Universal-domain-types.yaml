- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 13:27:37'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 13:27:37'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Universal domain types
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用领域类型
- en: 来源：[https://mmapped.blog/posts/25-domain-types.html](https://mmapped.blog/posts/25-domain-types.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mmapped.blog/posts/25-domain-types.html](https://mmapped.blog/posts/25-domain-types.html)
- en: 'Many languages provide syntax for simplifying domain type definitions. Such
    definitions create a new distinct type sharing representation with a chosen underlying
    type (e.g., a 64-bit integer). The semantics of such definitions vary across languages,
    but they usually fall into one of two categories: *newtypes* and *typedefs*.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 许多语言提供了简化领域类型定义的语法。这些定义创建了一个新的独特类型，与所选的基础类型共享表示（例如，64位整数）。这些定义的语义在各种语言中有所不同，但通常分为两类：*newtypes*
    和 *typedefs*。
- en: Newtypes wrap an existing type, allow the programmer to inherit some of the
    operations from the underlying type, and add new operations. Newtypes are flexible
    but may need boilerplate code to implement all features required in a real-world
    application.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Newtypes 包装现有类型，允许程序员继承一些来自底层类型的操作，并添加新操作。Newtypes 灵活，但可能需要样板代码来实现在真实世界应用中所需的所有功能。
- en: An example of using the newtype idiom in Rust. Inheriting basic operations,
    such as comparison and hashing, is easy, but arithmetic operations require a lot
    of boilerplate code. Some third-party packages, such as [`derive_more`](https://crates.io/crates/derive_more),
    make this task easier.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Rust 中使用 newtype 习惯用法的示例。继承基本操作，如比较和哈希，很容易，但算术操作需要大量样板代码。一些第三方包，如 [`derive_more`](https://crates.io/crates/derive_more)，使这项任务更加简单。
- en: '[PRE0]'
  id: totrans-split-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Haskell](https://wiki.haskell.org/Newtype) and [Rust](https://doc.rust-lang.org/book/ch19-04-advanced-types.html#using-the-newtype-pattern-for-type-safety-and-abstraction)
    are examples of languages supporting newtypes.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[Haskell](https://wiki.haskell.org/Newtype) 和 [Rust](https://doc.rust-lang.org/book/ch19-04-advanced-types.html#using-the-newtype-pattern-for-type-safety-and-abstraction)
    是支持 newtypes 的语言的示例。'
- en: Typedefs introduce a new name for an existing type, inheriting all underlying
    type operations.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: Typedefs 为现有类型引入一个新名称，继承所有底层类型的操作。
- en: An example of using typedefs in Go. Typedefs inherit all operations from the
    underlying type, even those meaningless for the new type.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Go 中使用 typedefs 的示例。Typedefs 继承了从底层类型继承的所有操作，即使对于新类型来说这些操作毫无意义。
- en: '[PRE1]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[Go](https://go.dev/ref/spec#Type_definitions), [D](https://dlang.org/library/std/typecons/typedef.html)
    and [Ada](https://en.wikibooks.org/wiki/Ada_Programming/Type_System#Derived_types)
    provide typedefs (Ada calls typedefs *derived types*). The [Boost](https://www.boost.org/)
    project for C++ implements [typedefs](https://www.boost.org/doc/libs/1_61_0/libs/serialization/doc/strong_typedef.html)
    as a library (C’s [typedef declarations](https://en.cppreference.com/w/c/language/typedef)
    are <q>weak typedefs</q>: they introduce an alias for an existing type, not a
    new type).'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[Go](https://go.dev/ref/spec#Type_definitions)，[D](https://dlang.org/library/std/typecons/typedef.html)
    和 [Ada](https://en.wikibooks.org/wiki/Ada_Programming/Type_System#Derived_types)
    提供了 typedefs（Ada 将 typedefs 称为 *derived types*）。[Boost](https://www.boost.org/)
    项目为 C++ 实现了 [typedefs](https://www.boost.org/doc/libs/1_61_0/libs/serialization/doc/strong_typedef.html)
    作为库（C 的 [typedef declarations](https://en.cppreference.com/w/c/language/typedef)
    是 <q>weak typedefs</q>：它们为现有类型引入了一个别名，而不是一个新类型）。'
- en: Newtypes and typedefs are versatile and practical, but they approach the problem
    in a way that’s too simplistic and mechanical. There is a more systematic way
    to think about domain types.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: Newtypes 和 typedefs 非常灵活且实用，但它们处理问题的方式过于简单和机械化。有一种更系统的方式来思考领域类型。
- en: Over the years, I found that specific classes of domain types appear repeatedly
    in most applications I work on. This section is an overview of these categories.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，我发现在我参与的大多数应用程序中，特定类别的领域类型会反复出现。本节是这些类别的概述。
- en: I use pseudo-Rust syntax to illustrate the concepts, but the ideas should easily
    translate to any statically typed language.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用伪 Rust 语法来说明这些概念，但这些思想应该很容易转换到任何静态类型语言。
- en: The interface shared by all universal domain types in this article.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章中所有通用领域类型共享的接口。
- en: '[PRE2]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The code snippets present *minimal* interfaces for each type class. Practical
    concerns often require adding more operations. For example, using identifiers
    as keys in a dictionary requires exposing a hash function (for hash maps) or imposing
    an ordering (for search trees), and serializing values requires accessing their
    internal representation.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段呈现了每个类型类的 *minimal* 接口。实际问题通常需要添加更多操作。例如，在字典中使用标识符作为键需要暴露一个哈希函数（用于哈希映射），或者强加一个顺序（用于搜索树），并且序列化值需要访问它们的内部表示。
- en: One of the most common uses of domain types is a transparent handle for an entity
    or an asset in the real world, such as a customer identifier in an online store
    or an employee number in a payroll application. I call these types *identifiers*.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 域类型的最常见用途之一是作为现实世界中实体或资产的透明句柄，例如在线商店中的客户标识符或工资应用程序中的员工编号。我将这些类型称为*标识符*。
- en: 'Identifiers have no structure, i.e., we don’t care about their internal representation.
    The only fundamental requirement is the ability to compare values of those types
    for equality. This lack of structure suggests an appropriate mathematical model
    for such types: a *set*, a collection of distinct objects.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 标识符没有结构，即我们不关心它们的内部表示。唯一的基本要求是能够比较这些类型的值是否相等。这种缺乏结构建议了这类类型的适当数学模型：一个*集合*，一个包含不同对象的集合。
- en: The minimal interface for identifiers.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 标识符的最小接口。
- en: '[PRE3]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[Newtypes](#newtypes) are a perfect fit for identifiers thanks to their ability
    to hide structure. [Typedefs](#typdefs), on the other hand, impose too much structure,
    allowing the programmer to add and subtract numeric identifiers accidentally.
    But given the choice, typedefs are safer than raw integers or strings.'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[Newtypes](#newtypes)非常适合作为标识符，因为它们能够隐藏结构。另一方面，[Typedefs](#typdefs)则过于结构化，允许程序员意外地添加和减去数值标识符。但是如果选择的话，typedefs比原始整数或字符串更安全。'
- en: Another typical use of domain types is representing quantities, such as the
    amount of money in usd on a bank account or the file size in bytes. Being able
    to compare, add, and subtract amounts is essential.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 域类型的另一个典型用途是表示数量，例如银行账户中以美元计的金额或字节中的文件大小。能够比较、添加和减去金额是至关重要的。
- en: Generally, we cannot multiply or divide two compatible amounts and expect to
    get the amount of the same type back
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我们不能将两个兼容的金额相乘或相除，然后期望得到相同类型的金额。
- en: Multiplying amounts by a dimensionless number, however, is meaningful. There
    is nothing wrong with a banking app increasing a dollar amount by ten percent
    or a disk utility dividing the total number of allocated bytes by the file count.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通过无量纲数乘以金额是有意义的。银行应用程序将金额增加十个百分点或磁盘工具通过文件计数来除以分配的总字节数都没有问题。
- en: 'The appropriate mathematical abstraction for amounts is [vector spaces](https://en.wikipedia.org/wiki/Vector_space).
    Vector space is a set with additional operations defined on the elements of this
    set: addition, subtraction, and scalar multiplication, such that behaviors of
    these operations satisfy a few natural [axioms](https://en.wikipedia.org/wiki/Vector_space#Definition_and_basic_properties).'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 适当的数学抽象化为金额的是[向量空间](https://en.wikipedia.org/wiki/Vector_space)。向量空间是一个集合，附加了定义在此集合元素上的额外操作：加法、减法和标量乘法，这些操作的行为满足一些自然的[公理](https://en.wikipedia.org/wiki/Vector_space#Definition_and_basic_properties)。
- en: The minimal interface for amounts.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 金额的最小接口。
- en: '[PRE4]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[Newtypes](#newtypes) allow us to implement amounts, but they might need some
    tedious code to get the multiplication and division right. [Typedefs](#typdefs)
    are handy, but get multiplication and division wrong, confusing dollars and dollars
    squared.'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[Newtypes](#newtypes)允许我们实现金额，但可能需要一些繁琐的代码才能正确进行乘法和除法。[Typedefs](#typdefs)很方便，但在乘法和除法方面会出错，混淆美元和美元的平方。'
- en: 'Working with space-like structures, such as time and space, poses an interesting
    challenge. Spaces have two types of values: absolute positions and relative distances.'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 处理类似空间的结构，如时间和空间，提出了一个有趣的挑战。空间有两种类型的值：绝对位置和相对距离。
- en: Positions refer to points in space, such as timestamps or geographical coordinates.
    Distances represent a difference between two such points.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 位置指的是空间中的点，例如时间戳或地理坐标。距离表示两个这样的点之间的差异。
- en: Some natural languages acknowledge the distinction and offer different words
    for these concepts, such as <q>o’clock</q> vs. <q>hours</q> in English or <q>Uhr</q>
    vs. <q>Stunden</q> in German.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一些自然语言承认这种区别，并为这些概念提供不同的词汇，例如英语中的<q>o’clock</q>与<q>hours</q>或德语中的<q>Uhr</q>与<q>Stunden</q>。
- en: While distances behave the same way as [amounts](#amounts), positions are trickier.
    We can compare, order, and subtract them to compute the distance between two points.
    For example, subtracting 5 am on Friday from 3 am on Saturday gives us twenty-two
    hours. Adding or multiplying these dates makes no sense, however. This semantic
    demands a new class of types, *loci* (plural of *locus*).
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然距离与[量](#amounts)相同，但位置更加棘手。我们可以比较、排序和减去它们以计算两点之间的距离。例如，从星期五凌晨5点减去星期六凌晨3点得到22小时。然而，增加或乘以这些日期没有意义。这种语义要求一种新的类型类别，*loci*（*locus*的复数形式）。
- en: One example of the locus/distance dichotomy coming from system programming is
    the memory address arithmetic. Low-level programming languages differentiate *pointers*
    (memory addresses) and *offsets* (distances between addresses). In the C programming
    language, the `void*` type represents a memory address, and the `ptrdiff_t` type
    represents an offset. Subtracting two pointers gives an offset, but adding or
    multiplying pointers is meaningless.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 系统编程中的位置/距离二分法示例之一来自内存地址算术。低级编程语言区分*指针*（内存地址）和*偏移量*（地址之间的距离）。在C语言中，`void*`类型表示内存地址，`ptrdiff_t`类型表示偏移量。减去两个指针得到一个偏移量，但增加或乘以指针没有意义。
- en: We can view each position as a distance from a fixed origin point. Changing
    the origin or the distance type calls for a new locus type.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将每个位置视为距离固定起始点的距离。改变起始点或距离类型需要新的位置类型。
- en: The minimal interface for loci.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: loci的最小接口。
- en: '[PRE5]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Timestamps offer an excellent demonstration of the <q>distance type + the origin</q>
    concept. Go and Rust represent timestamps as a number of *nanoseconds* passed
    from the unix epoch (midnight of January 1st, 1970), The C programming language
    defines the [`time_t`](https://en.cppreference.com/w/c/chrono/time_t) type, which
    is almost always the number of *seconds* from the unix epoch. The [q programming
    language](https://en.wikipedia.org/wiki/Q_(programming_language_from_Kx_Systems))
    also uses nanoseconds, but [chose the *millennium*](https://code.kx.com/q4m3/2_Basic_Data_Types_Atoms/#253-date-time-types)
    (midnight of January 1st, 2000) as its origin point. Changing the distance type
    (e.g., seconds to nanoseconds) or the origin (e.g., unix epoch to the millennium)
    calls for a different timestamp type.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳提供了<q>距离类型 + 起始点</q>概念的极好演示。Go语言和Rust使用纳秒数表示自UNIX纪元（1970年1月1日午夜）以来的时间。C语言定义了[`time_t`](https://en.cppreference.com/w/c/chrono/time_t)类型，通常表示自UNIX纪元以来的秒数。[q编程语言](https://en.wikipedia.org/wiki/Q_(programming_language_from_Kx_Systems))同样使用纳秒，但选择了[千年纪](https://code.kx.com/q4m3/2_Basic_Data_Types_Atoms/#253-date-time-types)（2000年1月1日午夜）作为其起始点。改变距离类型（如秒到纳秒）或起始点（如UNIX纪元到千年纪）需要不同的时间戳类型。
- en: The Go standard library employs the locus type design for its [`time`](https://pkg.go.dev/time)
    package, differentiating the time instant ([`time.Time`](https://pkg.go.dev/time#Time))
    and time duration ([`time.Duration`](https://pkg.go.dev/time#Duration)).
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: Go标准库在其[`time`](https://pkg.go.dev/time)包中采用了位置类型设计，区分时间点（[`time.Time`](https://pkg.go.dev/time#Time))和时间段（[`time.Duration`](https://pkg.go.dev/time#Duration))。
- en: The Rust standard module [`std::time`](https://doc.rust-lang.org/std/time/index.html)
    is a more evolved example. It defines the [`SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html)
    type for wall clock time (the origin is the [unix epoch](https://doc.rust-lang.org/std/time/struct.SystemTime.html#associatedconstant.UNIX_EPOCH)),
    [`Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html) for monotonic
    clocks (the origin is <q>some unspecified point in the past</q>, usually the system
    boot time), and the [`Duration`](https://doc.rust-lang.org/std/time/struct.Duration.html)
    type for distances between two clock measurements.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: Rust标准模块[`std::time`](https://doc.rust-lang.org/std/time/index.html)是一个更进化的示例。它定义了[`SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html)类型用于墙上钟时间（起始点是[UNIX纪元](https://doc.rust-lang.org/std/time/struct.SystemTime.html#associatedconstant.UNIX_EPOCH)），[`Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html)用于单调时钟（起始点是<q>过去某个未指定的时间点</q>，通常是系统启动时间），以及[`Duration`](https://doc.rust-lang.org/std/time/struct.Duration.html)类型用于两个时钟测量之间的距离。
- en: So far, we considered applications where domain types barely interact with one
    another. Many applications require combining values of different domain types
    in a single expression. A physics simulation might need to multiply a time interval
    by a velocity to compute the distance travelled. A financial application might
    need to multiply the dollar amount by the conversion rate to get an amount in
    euros.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们考虑了域类型几乎不相互作用的应用。许多应用需要在单个表达式中结合不同域类型的值。物理仿真可能需要将时间间隔乘以速度以计算行进距离。金融应用可能需要将美元金额乘以转换率以获取欧元金额。
- en: We can model complex type interactions using methods of [dimensional analysis](https://en.wikipedia.org/wiki/Dimensional_analysis).
    If we view [amounts](#amounts) as values with an attached label identifying their
    unit, then our new types are a natural extension demanding a more structured label
    equivalent to a vector of base units raised to rational powers. For example, acceleration
    would have label (distance × time^(-2)), and the usd/eur [pair](https://en.wikipedia.org/wiki/Currency_pair)
    exchange rate would have label (eur × usd^(-1)). I call types with such rich label
    structure *quantities*.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 [量纲分析](https://en.wikipedia.org/wiki/Dimensional_analysis) 方法来建模复杂的类型交互。如果我们将
    [amounts](#amounts) 视为带有附加标签的值，标识其单位，那么我们的新类型就是对更结构化标签的自然扩展，等效于基本单位的向量提升到有理幂。例如，加速度将具有标签
    (distance × time^(-2))，而 usd/eur [pair](https://en.wikipedia.org/wiki/Currency_pair)
    汇率将具有标签 (eur × usd^(-1))。我将具有这种丰富标签结构的类型称为*量*。
- en: 'Quantities are a proper extension of amounts: addition, subtraction, and scalar
    multiplication work the same way, leaving the label structure untouched. The additional
    label structure gives meaning to multiplication and division.'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 量是量的正确扩展：加法、减法和标量乘法的工作方式相同，保持标签结构不变。额外的标签结构赋予了乘法和除法以意义。
- en: The result of multiplication will have a base unit vector with the component-wise
    *sum* of the power vectors of the unit factors. For example, car fuel consumption
    computation could use an expression like 2 (km) × 0.05 (liter × km^(-1)) = 0.1
    (liter).
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 乘法的结果将具有基本单位向量，其组分为单位因子的幂向量的分量*和*。例如，汽车燃油消耗计算可以使用类似 2 (km) × 0.05 (liter × km^(-1))
    = 0.1 (liter) 的表达式。
- en: Dividing values produces a label that’s a component-wise *difference* between
    the dividend and divisor power vectors. For example, running pace computation
    could use an expression like 10 (min) / 2 (km) = 5 (min × km^(-1)).
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除法产生一个标签，它是被除数和除数幂向量之间的组分*差异*。例如，跑步配速计算可以使用类似 10 (min) / 2 (km) = 5 (min × km^(-1))
    的表达式。
- en: The minimal interface for quantities.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 数量的最小接口。
- en: '[PRE6]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Quantities require complex type-level machinery, which makes them hard to implement
    in most languages. [Boost.Units](https://www.boost.org/doc/libs/1_65_0/doc/html/boost_units.html)
    is one of the first libraries to provide comprehensive implementations of quantity
    types in C++. Rust ecosystem offers the [dimensioned](https://crates.io/crates/dimensioned)
    package. The [units](https://hackage.haskell.org/package/units) package is a popular
    choice in the Haskell ecosystem.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 数量需要复杂的类型级机制，这使得它们在大多数语言中难以实现。[Boost.Units](https://www.boost.org/doc/libs/1_65_0/doc/html/boost_units.html)
    是首批在 C++ 中提供完整数量类型实现的库之一。Rust 生态系统提供了 [dimensioned](https://crates.io/crates/dimensioned)
    包。在 Haskell 生态系统中，[units](https://hackage.haskell.org/package/units) 包是一个流行的选择。
- en: If your language doesn’t support advanced type-level programming or using rigid
    types is impractical in your application, you can do unit checks at runtime. Python’s
    [quantities](https://github.com/python-quantities/python-quantities) package is
    an example of this approach.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的语言不支持高级类型级编程或者在您的应用中使用严格类型不切实际，您可以在运行时进行单位检查。Python 的 [quantities](https://github.com/python-quantities/python-quantities)
    包就是一个这样的例子。
