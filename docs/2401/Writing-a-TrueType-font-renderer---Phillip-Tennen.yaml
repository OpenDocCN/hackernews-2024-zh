- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:24:45'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:24:45
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Writing a TrueType font renderer | Phillip Tennen
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 撰写一篇 TrueType 字体渲染器 | 菲利普·特南
- en: 来源：[https://axleos.com/writing-a-truetype-font-renderer/](https://axleos.com/writing-a-truetype-font-renderer/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://axleos.com/writing-a-truetype-font-renderer/](https://axleos.com/writing-a-truetype-font-renderer/)
- en: <content>Text is *the* medium of digital interaction, and text rendering has
    an outsized impact on the overall fit and finish of any system. It therefore pains
    me that axle has for years relied on a low-resolution 8x8 bitmap font. Let’s fix
    it!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: <content>文本是数字交互的**主**要介质，而文本渲染对于任何系统的整体质感和完成度都有着巨大影响。因此，我感到痛心的是，几年来 axle 一直依赖低分辨率的
    8x8 位图字体。让我们来解决这个问题吧！
- en: Take a look at the characters composing this sentence. Note the curves, the
    negative space, the use of size and distance.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下组成这个句子的字符。注意曲线，负空间，大小和距离的使用。
- en: 'If you’ve got a magnifying glass handy, you can even see how ‘black-on-white’
    text uses many shades of gray to make the text smoother on the eyes. I’ll show
    you:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你手边有放大镜，你甚至可以看到“白底黑字”文本如何使用许多灰色阴影使文本更加柔和。我来展示给你看：
- en: '![](img/f8f86de022dbeff655d130b12cdf384b.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8f86de022dbeff655d130b12cdf384b.png)'
- en: Font rendering comes down to telling the computer which pixels should be on
    or off, which should be darkened slightly for effect and which should let the
    background shine through.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 字体渲染归结为告诉计算机哪些像素应该打开或关闭，哪些应该略微加深以产生效果，哪些应该让背景透过。
- en: The challenge comes from describing this to the computer in a way that’s *efficient*
    and *resizable*. Fonts shouldn’t take up too much storage, and we should be able
    to scale a font to any size the user requests while preserving the character of
    the font design. Perhaps most importantly, we’ll want to satisfy these constraints
    while also making the text pleasant to read.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 挑战在于以一种*高效*和*可调整大小*的方式向计算机描述这一过程。字体不应该占用太多存储空间，而且我们应该能够根据用户请求的任何大小缩放字体，同时保留字体设计的特性。也许最重要的是，在满足这些约束条件的同时，我们希望文本阅读起来愉悦。
- en: Minimalist Text Renderer
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 极简主义文本渲染器
- en: Let’s do away with all of these requirements for now, and start off with the
    simplest viable approach to rendering characters. How might we go about coloring
    pixels into text?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在摒弃所有这些要求，从渲染字符的最简单可行方法开始。我们如何将像素着色成文本呢？
- en: Firstly, we’ll select a fixed size for each character. We’ll agree that every
    character will be exactly 8 pixels wide and 8 pixels high. That gives us a grid
    of 64 pixels per character to work with.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将为每个字符选择一个固定大小。我们将同意每个字符都是精确地 8 个像素宽和 8 个像素高。这给了我们每个字符 64 个像素的网格来处理。
- en: 'We can use a simple data format that describes whether each pixel in our 8x8
    grid should be on (colored with the font color) or off (retain the background
    color). We can draw out our character grid like so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一种简单的数据格式来描述我们的 8x8 网格中每个像素是应该打开（着色为字体颜色）还是关闭（保留背景颜色）。我们可以像这样绘制出我们的字符网格：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Since we’ve got 8 pixels in each row, and each pixel has two states, it’s natural
    to store each row in our grid as one byte. For example, we could represent a capital
    `A` using a representation like the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每行有 8 个像素，并且每个像素有两种状态，将每行存储在我们的网格中的一字节是很自然的。例如，我们可以使用以下表示来表示一个大写字母 `A`：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is equivalent to the following hexadecimal representation:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于以下十六进制表示：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '… and allows us to very efficiently store render maps for ASCII:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: …并且使我们能够非常高效地存储 ASCII 的渲染映射：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is quite a tidy encoding! To render a character, we can directly look
    up its render map using its ASCII representation:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相当整洁的编码！要渲染一个字符，我们可以直接使用其 ASCII 表示查找其渲染映射：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Believe it or not, that’s it. axle has been using the above font rendering technique
    for the better part of a decade.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 信不信由你，axle 近十年来一直在使用上述字体渲染技术。
- en: '![](img/7fe7c2216452c9e07fc93cc8cd3ba32d.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7fe7c2216452c9e07fc93cc8cd3ba32d.png)'
- en: Although the font above only natively provides 8px bitmaps, it’s pretty easy
    to scale it to any size we like. However, the font will always appear jagged and
    low-resolution.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管上面的字体只提供了 8px 的位图，但我们可以轻松将其缩放到任何我们喜欢的大小。然而，字体始终会显得锯齿状和低分辨率。
- en: '![](img/cccb1360fc1606bcdf0969f91e962a07.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cccb1360fc1606bcdf0969f91e962a07.png)'
- en: 'While the 8x8 bitmap font *works*, it sure isn’t pretty, and it’s quite limited:
    we can only use whatever font we’re willing to encode into this little 8x8 grid,
    and we’re unable to use any of the many fonts available online and in the public
    domain. Additionally, our 8x8 grid doesn’t give us much of a good way to describe
    curves, which are essential in some fonts (check out this `a`!).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Most importantly, writing a new font renderer sounds like fun.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: TrueType
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the next leap in our text rendering journey, we turn to TrueType: the de
    facto standard for encoding and distributing fonts. Unlike our humble 8x8 bitmaps,
    TrueType fonts are distributed as structured binary files (`.ttf`). We’ll need
    to parse these files and render their data into pixels.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: There’s few things in this world I love more than taking an opaque binary and
    gradually uncovering the organization that was present all along. Dissecting the
    underlying and general structure of a binary is as gratifying as anything I can
    imagine.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The [TrueType specification](https://developer.apple.com/fonts/TrueType-Reference-Manual/)
    gives a great introduction to the problem space (I highly recommend the overviews
    in `Digitizing Letterforms` and especially `Instructing Fonts`), but it doesn’t
    give much in the way of signposting “start parsing here”. I’ll save you the trouble.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: TTFs are structured somewhat similarly to Mach-Os. This is quite a nice surprise,
    because I’ve spent [a lot of time parsing Mach-Os](https://github.com/datatheorem/strongarm/)!
    Both file formats were developed ~~at Apple~~ around the same time, so I suppose
    they had some design points in the air.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: TTFs and Mach-Os are both largely structured around a flat series of sections,
    each of which is described by a table of contents at the beginning of the file.
    In the case of TTFs, each of these sections will contain some metadata or other
    that we’ll need over the course of rendering the font.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f03984ada9bca2e04b2e49f115ecd51.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: Before taking a look at these sections becomes fruitful, though, we need to
    know the fundamental process for describing fonts used by TrueType. The specification
    does a great job, so I’ll keep myself brief.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: The collection of lines and curves used to visually represent a particular letter
    is referred to as a *glyph*. As an example, the glyph `b` consists of a vertical
    line and a semicircle.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Without further information, though, our renderer won’t know *which* glyph represents
    each character. We’ll need some additional metadata to convert from a character
    within a *character map* (such as ASCII or Unicode) to the *glyph* that a particular
    font is using to visually represent that character. The job of the TTF is dually
    to describe how to draw all the glyphs represented by the font, and to describe
    the correspondence between the character map and these glyphs.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: TrueType describes how to draw each glyph by listing a series of points, which
    collectively compose the *outline* of each glyph. It’s up to the renderer to connect
    these points into lines, to turn these lines into curves, and to ‘color inside
    the lines’ as appropriate. There’s more nuance here, but that’s the bare bones.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a923630a3af9626fc6ab1786bfac129c.png) ![](img/a8846ea8a05bdb7879ec2495ca8bf318.png)
    *Rendering points without connecting them into lines*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Things start to look a lot more comprehensible once you connect the dots.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Coloring inside the lines turns out to be more difficult than you might imagine.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: My first implementation of this renderer didn’t draw any curves, but instead
    directly connected the points with straight lines. My colleague Amos [implemented](https://github.com/codyd51/axle/pull/47)
    the ability for the renderer to interpolate the glyph outline along the curves
    described in the font, which really improved the look of things. Thanks, Amos!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2190a7d64c3d781a5c1cbce04f64abbe.png)*Before and after Amos''s work
    to interpolate along curves*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Tangled Text Tables
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each section in the TTF is identified by a 4-character ASCII name. Different
    sections in the TTF contain different important metadata, such as:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '`glyf`: The set of points for each glyph outline in the font (most important!)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hmtx`: Spacing information, i.e. how far to advance the cursor after drawing
    each glyph'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cmap`: The correspondence of Unicode codepoints to glyph indexes'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each of these sections contains a bunch of structured data describing their
    contents. Here, our first mini challenge presents itself. TTF was designed in
    an era in which neither RAM nor core cycles were cheap. Therefore, the designers
    of the format made sure it’d be as easy as possible for the renderer to complete
    its work. To this end, they offloaded two responsibilities to the font file itself:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Efficient data structures that the renderer can walk to retrieve info (for example,
    lookup tables to map a character code to a glyph index)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-computation of some values used during lookup (for example, scaling parameters
    for binary searching a character map)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These optimizations aren’t so relevant today, but we’ll need to work with them
    nonetheless. The first one is particularly important: TTF is designed to be *loaded
    directly into memory* and read by the renderer *in-place*, without the renderer
    populating its own intermediary data structures. ~~Inexplicably, though~~, the
    TTF stores all fields in big endian, so we’ll definitely have to do some work
    on our end before we can read any sane values out of font structures.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: To be able to define and read from these font structures with minimal boilerplate
    and repetition, I set things up such that I could wrap any font structure fields
    in `BigEndianValue`. After I call `.into()`, everything is done and dusted and
    I can move on with my day. A little bit of structure definition upfront for some
    easy breezy parsing code down the line!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '`rust_programs/ttf_renderer/src/parser.rs`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`rust_programs/ttf_renderer/src/parser.rs`'
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Ready for the payoff?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了吗？
- en: '``pub  fn parse(&mut  self)  -> Font``'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '``pub  fn parse(&mut  self)  -> Font``'
- en: '`rust_programs/ttf_renderer/src/parser.rs`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`rust_programs/ttf_renderer/src/parser.rs`'
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Oh yeah! We can parse our high-level, byte-order-corrected representation directly
    from the TTF memory without even needing to *mention* the raw TTF representation
    at the call-site. I’ll call that a win.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 哦是的！我们可以直接从*TTF*内存中解析我们的高级、字节顺序校正的表示，甚至无需在调用站点*提及*原始*TTF*表示。我会把这看作是一种胜利。
- en: Parser
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析器
- en: Handy APIs in hand, we’ll parse all the section descriptions at the start of
    the file.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 手头有方便的 API，我们将在文件开头解析所有部分描述。
- en: The `head` section (or *table*, as TTF prefers) stores some important metadata
    about the font as a whole. We know that TTF describes glyph outlines via a series
    of connected points. But if we see a point like `(371, 205)`, without further
    information we don’t have a reference for understanding where this sits visually.
    The `head` table gives us such a reference, by describing the `glyph_bounding_box`
    that all points sit within.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`head` 部分（或*TTF*更喜欢的*table*）存储了关于整个字体的一些重要元数据。我们知道*TTF*通过一系列连接的点描述字形轮廓。但如果我们看到一个像`(371,
    205)`这样的点，没有进一步的信息，我们就无法理解它在视觉上的位置。`head` 表为我们提供了这样一个参考，通过描述所有点所在的`glyph_bounding_box`。'
- en: Next up, we’ll want to [parse a character map](https://github.com/codyd51/axle/blob/paging-demo/rust_programs/ttf_renderer/src/character_map.rs#L224)
    to find out how we’ll correspond encoded characters to glyph indexes. Each character
    map will also be described in an [extremely gnarly format](https://github.com/codyd51/axle/blob/paging-demo/rust_programs/ttf_renderer/src/character_map.rs#L340-L357)
    that the parser will need to know how to read.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将想要[解析字符映射](https://github.com/codyd51/axle/blob/paging-demo/rust_programs/ttf_renderer/src/character_map.rs#L224)，以找出如何将编码字符对应到字形索引。每个字符映射还将以[极端混乱的格式](https://github.com/codyd51/axle/blob/paging-demo/rust_programs/ttf_renderer/src/character_map.rs#L340-L357)描述，解析器需要知道如何读取它。
- en: 'And now the exciting bit: parsing glyphs! The `maxp` table will give us some
    metadata on how many glyphs the font contains, while the glyph data itself is
    stored in `glyf`.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来看一下令人兴奋的部分：解析字形！`maxp` 表将为我们提供有关字体包含多少字形的一些元数据，而字形数据本身存储在 `glyf` 中。
- en: Before we can parse each `glyf` entry, we’ll need to know where each entry begins.
    The `loca` table will give us these offsets. However, nowhere is the *size* of
    each glyph’s data given explicitly in the font. Instead, the size of each glyph’s
    data is implicitly given by the difference with the starting offset of the *next*
    glyph.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以解析每个`glyf`条目之前，我们需要知道每个条目的开始位置。`loca` 表将为我们提供这些偏移量。然而，在字体中并没有明确给出每个字形数据的*大小*。相反，每个字形数据的大小都隐含地由与*下一个*字形的起始偏移量的差异给出。
- en: 'The intrepid font parser will quickly notice that some glyph descriptions appear
    to have *no* size. This is intentional: some glyphs, such as the one corresponding
    to the space character, have no visible manifestation aside from the negative
    space they occupy. When the renderer tries to draw one of these zero-sized glyphs,
    we’ll just advance the cursor based on the corresponding `htmx` size for this
    glyph.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 勇敢的字体解析器会很快注意到一些字形描述似乎没有大小。这是故意的：一些字形，比如对应于空格字符的字形，除了占用的负空间之外没有可见的表现。当渲染器尝试绘制这些零大小的字形之一时，我们将根据该字形的对应`htmx`大小来推进光标。
- en: 'We’ve actually got three distinct types of glyphs:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们有三种不同类型的字形：
- en: '*Polygon* glyphs'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*多边形*字形'
- en: 'These glyphs are the classic case: an ordered collection of edge points and
    control points that should be connected in a series of curves.'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些字形是经典案例：一系列有序的边缘点和控制点，应该按照一系列曲线连接起来。
- en: '*Blank* glyphs'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*空白*字形'
- en: Special case for glyphs such as those corresponding to the space character.
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于诸如对应于空格字符的字形等特殊情况。
- en: '*Compound* glyphs'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*复合*字形'
- en: Glyphs manufactured by combining and scaling other glyphs.
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由组合和缩放其他字形制成的字形。
- en: The third category is really interesting! The glyphs for `i` and `j` both share
    an identical dot on top, and there’s no need to duplicate its description in the
    draw instructions. Instead, we can just say that `i` and `j` are each composed
    of a couple of glyph fragments laid out on the canvas at specific scales and positions.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 第三类真的很有趣！`i` 和 `j` 的字形都共享一个相同的顶部点，没有必要在绘制指令中复制其描述。相反，我们可以简单地说 `i` 和 `j` 都由放置在画布上特定比例和位置的一对字形片段组成。
- en: '![](img/ce29c4d37b65ade27622d9397351db3c.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce29c4d37b65ade27622d9397351db3c.png)'
- en: There are all sorts of counterintuitive edge cases with compound glyphs. As
    an example, we know that traditional polygon glyphs specify how far the cursor
    should advance after drawing them via corresponding entries in the `hmtx` and
    `vmtx` tables. However, how far should the cursor advance for a compound glyph?
    Sometimes the compound glyph has its own metrics table entries, and sometimes
    the compound glyph is annotated with a special flag indicating that it should
    take its cursor advance metrics from a specific child glyph.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理复合字形时，存在各种反直觉的边界情况。例如，我们知道传统的多边形字形通过`hmtx`和`vmtx`表中的相应条目指定在绘制后光标应该向前移动多远。但是，对于复合字形，光标应该向前移动多远呢？有时候复合字形有自己的度量表条目，有时候复合字形标有一个特殊的标志，表明它应该从特定的子字形那里获取其光标前进度量。
- en: '`rust_programs/ttf_renderer/src/glyph.rs`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`rust_programs/ttf_renderer/src/glyph.rs`'
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Compound glyphs don’t always directly contain polygon glyphs. Instead, a compound
    glyph can be composed of a tree of other compound glyphs, all stretched and scaled
    and repositioned across the bounding box.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 复合字形并不总是直接包含多边形字形。相反，一个复合字形可以由其他复合字形的树组成，所有这些字形都被拉伸、缩放和重新定位到边界框上。
- en: Hinting
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示
- en: TrueType famously defines a hinting VM that’s intended to help retain the essence
    of a font when rendering at low resolutions to a limited pixel grid. The job of
    the program running under this VM is to nudge the glyph’s control points into
    a specific layout on low-resolution bitmaps.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: TrueType 以其旨在在低分辨率渲染到有限像素网格时帮助保留字体本质的提示虚拟机而闻名。在该虚拟机下运行的程序的任务是将字形的控制点推到低分辨率位图上的特定布局中。
- en: Let’s say you’re trying to scale down a glyph’s points to fit on a small grid.
    If the render resolution isn’t exactly divisible by the glyph’s point spacing,
    you’re going to get scaling artifacts when you round each glyph point to a pixel.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在尝试将字形的点缩小以适应一个小网格。如果渲染分辨率不能完全被字形的点间距整除，那么当你将每个字形点舍入到像素时，你将会得到缩放伪影。
- en: The font can embed a little program that, when executed, nudges the glyph’s
    layout points to better represent the glyph within the available grid.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 字体可以嵌入一个小程序，当执行时，会微调字形的布局点，以更好地表示可用网格内的字形。
- en: Our renderer will need to implement this VM, which is always a fun endeavor.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的渲染器将需要实现这个虚拟机，这总是一个有趣的尝试。
- en: 'The hinting VM is built around a standard (and incredibly satisfying) interpreter
    loop that modifies a virtual machine state based on the operations indicated by
    the byte stream:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 提示虚拟机建立在一个标准的（令人难以满足的）解释器循环之上，该循环根据字节流指示的操作修改虚拟机状态：
- en: '`rust_programs/ttf_renderer/src/hints.rs`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`rust_programs/ttf_renderer/src/hints.rs`'
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There a slew of hilarious little engineering challenges that come up when trying
    to execute functions targeting a font’s operating environment.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行针对字体操作环境的函数时，会出现一系列有趣的小工程挑战。
- en: '`rust_programs/ttf_renderer/src/hints.rs`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`rust_programs/ttf_renderer/src/hints.rs`'
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: TrueType Quirks
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TrueType 怪癖
- en: Occult Memorabilia
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 神秘纪念品
- en: The hinting VM is all about nudging the glyph’s outline points so that they
    look better on a small pixel grid. All of these points that actually compose a
    part of the glyph outline are in the ‘Glyph Zone’.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 提示虚拟机的目的是微调字形轮廓点，使它们在小像素网格上看起来更好。所有这些实际上组成字形轮廓的点都在‘字形区’中。
- en: However, the VM designers realized that it was sometimes useful to have a point
    that wasn’t really part of the outline, but was just used as a reference when
    doing distance calculations. These points don’t belong in the Glyph Zone, so instead
    TrueType places them in a different space called… the [Twilight Zone](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html#SZP0).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，虚拟机的设计者意识到，有时候拥有一个并不真正属于轮廓的点是有用的，而只是在进行距离计算时作为参考使用。这些点不属于字形区域，因此TrueType
    将它们放置在一个叫做……[暮光区](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html#SZP0)的不同空间中。
- en: The TrueType designers were clearly fans of the paranormal. TrueType provides
    convenient support for describing emboldened and italicized versions of fonts
    by embedding offsets to apply to each point in a glyph outline. A font variation
    might need the entire bounding box of a glyph to be modified too, so there are
    [‘phantom points’](https://learn.microsoft.com/en-us/typography/opentype/spec/tt_instructing_glyphs#phantom-points)
    corresponding to the corners of the bounding box that can be stretched and squeezed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: TrueType 的设计者显然是超自然现象的粉丝。TrueType 通过嵌入偏移量来描述字体的加粗和斜体版本。一个字体变化可能需要修改字形轮廓的整个边界框，因此还有[‘幽灵点’](https://learn.microsoft.com/en-us/typography/opentype/spec/tt_instructing_glyphs#phantom-points)对应于可以拉伸和挤压的边界框的角。
- en: Implied Control Points
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 隐含控制点
- en: The TrueType specification suggests to the reader, hey! Maybe it’d be possible
    to save space by letting the renderer deduce missing control points?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: TrueType 规范向读者提出了一个建议，嘿！也许让渲染器推断缺失的控制点可能是可能的？
- en: '![](img/ede638b7a860f08eeb480ac6945383fa.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ede638b7a860f08eeb480ac6945383fa.png)'
- en: Despite the casual tone of observation, renderers are actually required to support
    this. Fonts rely on this all the time! This is the only mention of it in the whole
    spec! Everyone needs to detect and insert implied control points, all on the back
    of one introductory diagram.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管观察的语气轻松，但实际上渲染器必须支持这一点。字体一直依赖于这一点！这是整个规范中唯一提到它的地方！每个人都需要检测并插入隐含的控制点，所有这一切都依靠一个介绍性图表。
- en: 'Hint: Assume Nothing'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示：假设无事发生
- en: Like we’ve seen, TrueType has sophisticated support for manipulating the rendering
    process in constrained font sizes. But like any good programming environment,
    it also provides lots of escape hatches. One such escape hatch is the `bloc` table,
    which essentially says “if the font size is too small, ignore the glyph curves
    and hinting programs and just render these tiny bitmaps instead.”
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，TrueType 对于在受限字体大小下操纵渲染过程有着复杂的支持。但就像任何良好的编程环境一样，它也提供了许多逃生通道。其中一个逃生通道是
    `bloc` 表，它基本上表示“如果字体大小太小，则忽略字形曲线和提示程序，而只是渲染这些小位图。”
- en: Firming Up a Renderer
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加固渲染器
- en: There’s still work to do to integrate this font renderer neatly in all the stacks
    that wind up displaying text on axle’s desktop, but the foundations are ready.
    Here’s what things looked like the last time I worked on propagating TrueType
    throughout the desktop.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些工作要做，将这个字体渲染器整合到 axle 桌面上显示文本的所有堆栈中，但基础设施已经准备就绪。以下是上次我在整个桌面传播 TrueType 时的情况。
- en: The source code for this renderer is [here](https://github.com/codyd51/axle/tree/9d83c62eaad9dd0850bb7fe3641bd2821e5b84b0/rust_programs/ttf_renderer/src).
    Below are some screenshots from the course of this renderer’s development.</content>
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个渲染器的源代码在[这里](https://github.com/codyd51/axle/tree/9d83c62eaad9dd0850bb7fe3641bd2821e5b84b0/rust_programs/ttf_renderer/src)。以下是在开发过程中生成的一些屏幕截图。
