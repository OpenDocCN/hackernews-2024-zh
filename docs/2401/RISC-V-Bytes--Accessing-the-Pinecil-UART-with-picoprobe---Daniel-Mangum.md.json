["```\n$ git submodule update --init Submodule 'CMSIS_5' (https://github.com/ARM-software/CMSIS_5) registered for path 'CMSIS_5' Submodule 'freertos' (https://github.com/FreeRTOS/FreeRTOS-Kernel) registered for path 'freertos' Cloning into '/home/hasheddan/code/github.com/raspberrypi/picoprobe/CMSIS_5'... Cloning into '/home/hasheddan/code/github.com/raspberrypi/picoprobe/freertos'... Submodule path 'CMSIS_5': checked out 'a65b7c9a3e6502127fdb80eb288d8cbdf251a6f4' Submodule path 'freertos': checked out '2dfdfc4ba4d8bb487c8ea6b5428d7d742ce162b8' \n```", "```\n$ PICO_SDK_FETCH_FROM_GIT=on cmake .. Using PICO_SDK_FETCH_FROM_GIT from environment ('on') Downloading Raspberry Pi Pico SDK PICO_SDK_PATH is /home/hasheddan/code/github.com/raspberrypi/picoprobe/build/_deps/pico_sdk-src Defaulting PICO_PLATFORM to rp2040 since not specified. Defaulting PICO platform compiler to pico_arm_gcc since not specified. -- Defaulting build type to 'Release' since not specified. PICO compiler is pico_arm_gcc -- The C compiler identification is GNU 10.3.1 -- The CXX compiler identification is GNU 10.3.1 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /usr/bin/arm-none-eabi-gcc - skipped -- Detecting C compile features -- Detecting C compile features - done -- Detecting CXX compiler ABI info -- Detecting CXX compiler ABI info - done -- Check for working CXX compiler: /usr/bin/arm-none-eabi-g++ - skipped -- Detecting CXX compile features -- Detecting CXX compile features - done -- The ASM compiler identification is GNU -- Found assembler: /usr/bin/arm-none-eabi-gcc Build type is Release Defaulting PICO target board to pico since not specified. Using board configuration from /home/hasheddan/code/github.com/raspberrypi/picoprobe/build/_deps/pico_sdk-src/src/boards/include/boards/pico.h -- Found Python3: /usr/bin/python3.10 (found version \"3.10.12\") found components: Interpreter TinyUSB available at /home/hasheddan/code/github.com/raspberrypi/picoprobe/build/_deps/pico_sdk-src/lib/tinyusb/src/portable/raspberrypi/rp2040; enabling build support for USB. BTstack available at /home/hasheddan/code/github.com/raspberrypi/picoprobe/build/_deps/pico_sdk-src/lib/btstack cyw43-driver available at /home/hasheddan/code/github.com/raspberrypi/picoprobe/build/_deps/pico_sdk-src/lib/cyw43-driver Pico W Bluetooth build support available. lwIP available at /home/hasheddan/code/github.com/raspberrypi/picoprobe/build/_deps/pico_sdk-src/lib/lwip mbedtls available at /home/hasheddan/code/github.com/raspberrypi/picoprobe/build/_deps/pico_sdk-src/lib/mbedtls -- Configuring done -- Generating done -- Build files have been written to: /home/hasheddan/code/github.com/raspberrypi/picoprobe/build \n```", "```\n$ make [  2%] Built target bs2_default [  4%] Built target bs2_default_padded_checksummed_asm [  5%] Performing build step for 'PioasmBuild' [100%] Built target pioasm [  6%] No install step for 'PioasmBuild' [  7%] Completed 'PioasmBuild' [ 11%] Built target PioasmBuild [ 12%] Built target picoprobe_probe_pio_h [ 13%] Built target picoprobe_probe_oen_pio_h [ 14%] Performing build step for 'ELF2UF2Build' [100%] Built target elf2uf2 [ 15%] No install step for 'ELF2UF2Build' [ 15%] Completed 'ELF2UF2Build' [ 19%] Built target ELF2UF2Build [ 20%] Building C object CMakeFiles/picoprobe.dir/src/led.c.obj [ 21%] Building C object CMakeFiles/picoprobe.dir/src/main.c.obj [ 22%] Building C object CMakeFiles/picoprobe.dir/src/usb_descriptors.c.obj [ 23%] Building C object CMakeFiles/picoprobe.dir/src/probe.c.obj [ 24%] Building C object CMakeFiles/picoprobe.dir/src/cdc_uart.c.obj [ 25%] Building C object CMakeFiles/picoprobe.dir/src/sw_dp_pio.c.obj [ 25%] Building C object CMakeFiles/picoprobe.dir/src/tusb_edpt_handler.c.obj [ 26%] Building C object CMakeFiles/picoprobe.dir/CMSIS_5/CMSIS/DAP/Firmware/Source/DAP.c.obj [ 27%] Building C object CMakeFiles/picoprobe.dir/CMSIS_5/CMSIS/DAP/Firmware/Source/JTAG_DP.c.obj [ 28%] Building C object CMakeFiles/picoprobe.dir/CMSIS_5/CMSIS/DAP/Firmware/Source/DAP_vendor.c.obj [ 29%] Building C object CMakeFiles/picoprobe.dir/CMSIS_5/CMSIS/DAP/Firmware/Source/SWO.c.obj [ 30%] Linking CXX executable picoprobe.elf [100%] Built target picoprobe \n```", "```\n$ ls CMakeCache.txt  cmake_install.cmake  elf2uf2          generated  picoprobe.bin  picoprobe.elf      picoprobe.hex  pico-sdk  probe_oen.pio.h CMakeFiles      _deps                FREERTOS_KERNEL  Makefile   picoprobe.dis  picoprobe.elf.map  picoprobe.uf2  pioasm    probe.pio.h \n```", "```\n$ ls /media/hasheddan/RPI-RP2/ INDEX.HTM  INFO_UF2.TXT \n```", "```\n$ cp picoprobe.uf2 /media/hasheddan/RPI-RP2/ \n```", "```\n$ ls /dev/ | grep \"ACM\\|USB\" ttyACM0 \n```", "```\n$ minicom -D /dev/ttyACM0 -b 2000000 \n```", "```\n#if defined(BSP_USING_UART0) #ifndef UART0_CONFIG #define UART0_CONFIG \\  { .id = 0, .baudrate = 2000000, .databits = UART_DATA_LEN_8, .stopbits = UART_STOP_ONE, .parity = UART_PAR_NONE, .fifo_threshold = 0, } #endif #endif \n```", "```\n$ ./scripts/deploy.sh   ====>>>> Firing up & starting container...  * type \"./scripts/deploy.sh clean\" to delete created container (but not cached data)   ====>>>> /usr/bin/docker  compose  -f /home/hasheddan/code/github.com/Ralim/IronOS/./scripts/../Env.yml  run  --rm  builder   /build/ironos # \n```", "```\n/build/ironos # cd source/ && ./build.sh -l EN -m Pinecilv2   ********************************************  IronOS Firmware builder for Miniware + Pine64   by Ralim ******************************************** Available languages : BE BG CS DA DE EL EN ES ET FI FR HR HU IT JA_JP LT NB NL NL_BE PL PT RO RU SK SL SR_CYRL SR_LATN SV TR UK VI YUE_HK ZH_CN ZH_TW Requested languages : EN ******************************************** Available models : TS100 TS80 TS80P Pinecil MHP30 Pinecilv2 S60 TS101 Requested models : Pinecilv2 ******************************************** Cleaning previous builds  [Success] ******************************************** Building firmware for Pinecilv2 in EN ...  [Success] ********************************************  -- Firmwares successfully generated -- End... \n```", "```\n$ ls source/Hexfile/ Pinecilv2_EN.bin  Pinecilv2_EN.dfu  Pinecilv2_EN.elf  Pinecilv2_EN.elf.map  Pinecilv2_EN.hex \n```", "```\n$ sudo ./blisp write -c bl70x --reset Pinecilv2_EN.bin Sending a handshake... Handshake successful! Getting chip info... BootROM version 1.0.2.7, ChipID: 0000C41CD8FDD7C4 0b / 59200 (0.00%) 4092b / 59200 (6.91%) ... 59200b / 59200 (100.00%) Sending a handshake... Handshake with eflash_loader successful. Input file identified as a .bin file Erasing flash to flash boot header Flashing boot header... Erasing flash for firmware, this might take a while... Flashing the firmware 188440 bytes @ 0x00002000... 0b / 188440 (0.00%) 2052b / 188440 (1.09%) ... 188440b / 188440 (100.00%) Checking program... Program OK! Resetting the chip. Flash complete! \n```", "```\ndynamic memory init success,heap size = 48 Kbyte show flash cfg: jedec id   0x000000 mid            0xC2 iomode         0x11 clk delay      0x01 clk invert     0x01 read reg cmd0  0x05 read reg cmd1  0x00 write reg cmd0 0x01 write reg cmd1 0x00 qe write len   0x02 cread support  0x00 cread code     0x00 burst wrap cmd 0x77 ------------------- Enable IRQ's Hello from Pinecil via picoprobe! Pine64 Pinecilv2 Starting BLE Starting  BLE Starting...Done BLE Starting advertising \n```"]