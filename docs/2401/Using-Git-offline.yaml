- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:38:17'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Using Git offline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.gibbard.me/using_git_offline/](https://www.gibbard.me/using_git_offline/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Some companies use an isolated network or even the complete lack of a network
    as a security measure to protect from unauthorized access. Working on these systems
    can be a struggle but it is still possible, and perhaps even more important, to
    use a proper version control tool like Git.
  prefs: []
  type: TYPE_NORMAL
- en: By design Git works quite happily with no remote repository. You can branch,
    stage, and commit files just like normal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This works great if just a single machine is used for development, but this
    is often not the case.
  prefs: []
  type: TYPE_NORMAL
- en: Working with multiple machines — Using a USB memory stick/HDD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When security policy allows read/write access to a memory stick or portable
    hard drive a remote repository can be created on this device.
  prefs: []
  type: TYPE_NORMAL
- en: On one development machine mount the memory stick.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the repository that is to be shared, add the remote repository on
    the memory stick, and push the changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: NB. The remote can be called anything. It doesn’t have to be called “origin”.
  prefs: []
  type: TYPE_NORMAL
- en: Unmount the memory stick and mount it on another development machine.
  prefs: []
  type: TYPE_NORMAL
- en: If the development machine does not have a copy of the repository on it already
    then git clone can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If there is a copy of the repository already on the machine add the memory stick
    as a remote and fetch/pull the changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: From now on use Git as normal but make sure that whenever a git pull, fetch,
    or push is performed the memory stick is mounted on the machine.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure the memory stick is part of your backup routine.
  prefs: []
  type: TYPE_NORMAL
- en: Working with multiple machines — Using CD/DVDs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In locked down development environments memory sticks may be blocked. Using
    Git is still possible, but a little be more inconvenient.
  prefs: []
  type: TYPE_NORMAL
- en: 'Git will happily fetch changes from one copy of a local repository to another.
    One option then is to simply copy the directory containing the local Git repository
    to another computer via CD or other media and make changes and commits like normal
    on both machines. When you want to combine changes select one machine to perform
    the merge and copy the other repository over to this machine. To pull all the
    changes into the current branch use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively you can fetch the changes and create a new branch to store them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: At this point create a new copy of the repository complete with merges and move
    it over to the other machine/s. Pull the latest changes into the other repositories
    or if desired simply replace the whole repository with the new copy.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously this is far from optimal. Copying the whole repository directory will
    include personal settings and files excluded in the .gitignore file. To mitigate
    this Git clone could be used to duplicate the repository rather than just copying
    it, but a much better option is to use git bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Git bundle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A git bundle allows for part or all of a repository to be compressed into a
    single file in a format that git is able to clone and fetch from.
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow works very similar to before, but instead of copying the whole
    repository directory a git bundle is created. On the first machine create a bundle
    using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `-- all` option bundles the entire repository including all branches and
    tags. Specific branches or tags can be selected using `-b branchName` or `-t tagName`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the repoName.bundle file to another computer. To clone the repository
    simply use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Changes and commits can be made on any of the computers then like before one
    machine must be selected to perform the merge. On the non-merging machine make
    sure all changes are committed and create a bundle using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For larger repositories it is a good idea to only bundle part of the repository
    to avoid transferring more data than needed. For example to only include the last
    5 commits on the master branch use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It is important that there are no gaps between the commits in the bundle and
    the commits on the repository where the merging will occur or the process will
    fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the bundle to the computer where the merge will occur and pull the changes
    using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the merging/rebasing is done create another bundle using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the above command `--all` can be replaced with the desired subset of repos/commits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Move the bundle file to the other machine/s and update the changes there using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Creating a local remote repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bundles solve the problem of synchronising Git repositories without a network,
    but we are still left with multiple computers all likely to be slightly out of
    sync with each other. If a new developer joins the team who do they copy the repository
    from? The best option is to select one development machine that will act as the
    “server”. A bare Git repository can be created on this development machine in
    addition to a local clone of the repository where the developer will actually
    work.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Next navigate to the local git repository or create a new one and add the remoteRepoName.git
    repository as a remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Changes can then be made in the local repository, or pulled from bundles created
    on other development machines. Whenever changes are made they can be pushed to
    the remote using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The distributed nature of Git allows it to work well without a central server.
    While the options presented will never be as convenient as just pushing to github
    they certainly beat the alternative of: `main_v1_final version_with_bobs_extra_patch
    finalfinal_version`.'
  prefs: []
  type: TYPE_NORMAL
