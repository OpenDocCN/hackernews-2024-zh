["```\n# SHAcrypt using SHA-512, after https://akkadia.org/drepper/SHA-crypt.txt.\n#\n# Copyright Â© 2024 Tony Garnock-Jones.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE. \nimport hashlib\nimport secrets\n\nalphabet = \\\n    [ord(c) for c in './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz']\npermutation = [\n    [0, 21, 42], [22, 43, 1], [44, 2, 23], [3, 24, 45],\n    [25, 46, 4], [47, 5, 26], [6, 27, 48], [28, 49, 7],\n    [50, 8, 29], [9, 30, 51], [31, 52, 10], [53, 11, 32],\n    [12, 33, 54], [34, 55, 13], [56, 14, 35], [15, 36, 57],\n    [37, 58, 16], [59, 17, 38], [18, 39, 60], [40, 61, 19],\n    [62, 20, 41], [-1, -1, 63],\n]\ndef encode(bs64):\n    result = bytearray(4 * len(permutation))\n    i = 0\n    for group in permutation:\n        g = lambda j: bs64[j] if j != -1 else 0\n        bits = g(group[0]) << 16 | g(group[1]) << 8 | g(group[2])\n        result[i] = alphabet[bits & 63]\n        result[i+1] = alphabet[(bits >> 6) & 63]\n        result[i+2] = alphabet[(bits >> 12) & 63]\n        result[i+3] = alphabet[(bits >> 18) & 63]\n        i = i + 4\n    return bytes(result).decode('ascii')[:-2]\n\ndef repeats_of(n, bs): return bs * int(n / len(bs)) + bs[:n % len(bs)]\ndef digest(bs): return hashlib.sha512(bs).digest()\n\ndef shacrypt(password, salt = None, rounds = 5000):\n    if salt is None: salt = encode(secrets.token_bytes(64))[:16].encode('ascii')\n    salt = salt[:16]\n\n    B = digest(password + salt + password)\n    Ainput = password + salt + repeats_of(len(password), B)\n    v = len(password)\n    while v > 0:\n        Ainput = Ainput + (B if v & 1 else password)\n        v = v >> 1\n    A = digest(Ainput)\n\n    DP = digest(password * len(password))\n    P = repeats_of(len(password), DP)\n    DS = digest(salt * (16+A[0]))\n    S = repeats_of(len(salt), DS)\n\n    C = A\n    for round in range(rounds):\n        Cinput = b''\n        Cinput = Cinput + (P if round & 1 else C)\n        if round % 3: Cinput = Cinput + S\n        if round % 7: Cinput = Cinput + P\n        Cinput = Cinput + (C if round & 1 else P)\n        C = digest(Cinput)\n\n    if rounds == 5000:\n        return '$6$' + salt.decode('ascii') + '$' + encode(C)\n    else:\n        return '$6$rounds=' + str(rounds) + '$' + salt.decode('ascii') + '$' + encode(C)\n\n#--------------------------------------------------------------------------- \ndef extract_salt_and_rounds(i): # i must be '$6$...'\n    pieces = i.split('$')\n    if pieces[1] != '6': raise TypeError('shacrypt512 only supports $6$ hashes')\n    if pieces[2].startswith('rounds='):\n        rounds = int(pieces[2][7:])\n        if rounds < 1000: rounds = 1000\n        if rounds > 999999999: rounds = 999999999\n        return (pieces[3].encode('ascii'), rounds)\n    else:\n        return (pieces[2].encode('ascii'), 5000)\n\ndef password_ok(input_password, existing_crypted_password):\n    (salt, rounds) = extract_salt_and_rounds(existing_crypted_password)\n    return existing_crypted_password == shacrypt(input_password, salt, rounds)\n\nif __name__ == '__main__':\n    _test_password = 'Hello world!'.encode('ascii')\n    _test_salt = 'saltstring'.encode('ascii')\n    _test_rounds = 5000\n    _test_crypted_password = '$6$saltstring$svn8UoSVapNtMuq1ukKS4tPQd8iKwSMHWjl/O817G3uBnIFNjnQJuesI68u4OTLiBFdcbYEdFCoEOfaS35inz1'\n    assert shacrypt(_test_password, _test_salt, _test_rounds) == _test_crypted_password\n    assert password_ok(_test_password, _test_crypted_password)\n\n    _test_password = 'Hello world!'.encode('ascii')\n    _test_salt = 'saltstringsaltstring'.encode('ascii')\n    _test_rounds = 10000\n    _test_crypted_password = '$6$rounds=10000$saltstringsaltst$OW1/O6BYHV6BcXZu8QVeXbDWra3Oeqh0sbHbbMCVNSnCM/UrjmM0Dp8vOuZeHBy/YTBmSK6H9qs/y3RnOaw5v.'\n    assert shacrypt(_test_password, _test_salt, _test_rounds) == _test_crypted_password\n    assert password_ok(_test_password, _test_crypted_password)\n\n    import sys\n    salt = None if len(sys.argv) < 2 else sys.argv[1].encode('ascii')\n    print(shacrypt(sys.stdin.readline().strip().encode('utf-8'), salt))\n```"]