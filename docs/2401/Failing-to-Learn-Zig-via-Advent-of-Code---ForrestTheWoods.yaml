- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:36:47'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:36:47
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Failing to Learn Zig via Advent of Code - ForrestTheWoods
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未能通过《Advent of Code》学会 Zig - ForrestTheWoods
- en: 来源：[https://www.forrestthewoods.com/blog/failing-to-learn-zig-via-advent-of-code/](https://www.forrestthewoods.com/blog/failing-to-learn-zig-via-advent-of-code/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.forrestthewoods.com/blog/failing-to-learn-zig-via-advent-of-code/](https://www.forrestthewoods.com/blog/failing-to-learn-zig-via-advent-of-code/)
- en: This isn't the blog post I intended to write.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是我打算写的博客文章。
- en: In 2018 I wrote [Learning Rust via Advent of Code](https://www.forrestthewoods.com/blog/learning-rust-via-advent-of-code/).
    This was supposed to be the exciting sequel where I learn [Zig](https://ziglang.org/).
    Unfortunately I failed. Zig sparked more frustration than joy and I fizzled out
    after 6 days.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2018 年，我写了一篇关于 [通过《Advent of Code》学习 Rust](https://www.forrestthewoods.com/blog/learning-rust-via-advent-of-code/)
    的文章。这应该是一个令人兴奋的续集，我在这里学习 [Zig](https://ziglang.org/)。不幸的是，我失败了。Zig 给我带来的更多是沮丧而不是快乐，我在
    6 天后就失败了。
- en: My biggest failure was a poor decision to solve all Advent of Code puzzles in
    both Rust and Zig. Unfortunately I lost motivation to reimplement them in Zig.
    Some mild office competition didn't help. In hindsight I should have gritted my
    teeth and focused exclusively on Zig. Lesson learned.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我最大的失误是决定用 Rust 和 Zig 解决所有《Advent of Code》的难题。不幸的是，我失去了重新在 Zig 中实现它们的动力。一些轻微的办公室竞争也没有帮助。事后看来，我应该咬紧牙关，专注于
    Zig。教训已经吸取。
- en: I kept pretty good notes on my initial Zig experience. Rather than let it go
    to waste I want to share it here.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我对我的初始 Zig 经验做了相当不错的笔记。我不想让它白白浪费，所以我想在这里分享一下。
- en: 'GitHub: [Link](https://github.com/forrestthewoods/aoc2021/blob/master/zig/src/main.zig)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub：[链接](https://github.com/forrestthewoods/aoc2021/blob/master/zig/src/main.zig)
- en: To help paint context here's a little bit about me.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助理解，我稍微介绍一下我自己。
- en: I'm a game/VR developer with 15 years work experience. Most of that time has
    been spent in C++ and C# (Unity). I've done a mix of gameplay and systems code.
    I love Rust and [hate Python](https://www.forrestthewoods.com/blog/things-i-like-about-python/).
    I don't know anything about webdev or JavaScript; and intend to keep it that way.
    I probably like C++ more than C, but I try to keep my C++ simple and somewhat
    C-like.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我是一名拥有 15 年工作经验的游戏/VR 开发者。我大部分时间都在 C++ 和 C#（Unity）中度过。我既做过游戏玩法又做过系统代码。我喜欢 Rust，[讨厌
    Python](https://www.forrestthewoods.com/blog/things-i-like-about-python/)。我对 webdev
    或 JavaScript 一无所知，并打算保持这种状态。我可能比较喜欢 C++ 而不是 C，但我努力让我的 C++ 简单并且有些像 C。
- en: A few months ago I didn't know really anything about Zig. I knew it existed,
    but not much else.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 几个月前，我对 Zig 知之甚少。我知道它的存在，但其他不多。
- en: I attended the awesome [Handmade Seattle](https://handmade-seattle.com/) conference
    where Zig had a very strong presence. [Andrew Kelley](https://twitter.com/andy_kelley),
    Zig's benevolent dictator of life, gave a stellar presentation on [A Practical
    Guide to Data Oriented Design](https://media.handmade-seattle.com/practical-data-oriented-design/).
    Numerous presentations were for projects built in Zig.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我参加了令人惊叹的 [Handmade Seattle](https://handmade-seattle.com/) 大会，Zig 在那里有着非常强大的存在感。[Andrew
    Kelley](https://twitter.com/andy_kelley)，Zig 的生活独裁者，给出了一场关于 [数据导向设计实践指南](https://media.handmade-seattle.com/practical-data-oriented-design/)
    的出色演讲。许多演示文稿都是使用 Zig 构建的项目。
- en: 'My mental model is:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我的思维模式是：
- en: Rust is trying to be a better C++
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rust 试图成为更好的 C++
- en: Zig is trying to be a better C
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zig 试图成为更好的 C
- en: I don't know if that's entirely accurately. I think it's fair.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道这是否完全准确。我认为这是公平的。
- en: 'I decided to use [Advent of Code](https://adventofcode.com/2021/about) to help
    learn Zig. I had a great time doing this with Rust back in 2018\. Before AoC I
    did my best to read Zig docs. Here are some of the more useful pages I found:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定利用 [Advent of Code](https://adventofcode.com/2021/about) 来帮助学习 Zig。我在 2018
    年用 Rust 做这件事时过得很愉快。在 AoC 之前，我尽力阅读 Zig 文档。下面是我发现的一些更有用的页面：
- en: Downloading Zig and compiling Hello World was delightfully simple by following
    the [Getting Started](https://ziglang.org/learn/getting-started/) page.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下载 Zig 并编译 Hello World 非常简单，只需按照 [入门指南](https://ziglang.org/learn/getting-started/)
    页面的说明即可。
- en: I took a lot of notes when solving AoC puzzles. I tried to write down every
    question I had or problem I encountered. It's a long list.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当解决 AoC 难题时，我做了很多笔记。我尽力写下我遇到的每个问题或困难。这是一个很长的列表。
- en: The next few sections contain these notes in semi-raw form. I'll share my takeaways
    after.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几节以半原始形式包含了这些笔记。我会在之后分享我的心得体会。
- en: 'Immediately confused by `anyerror!void`. I think `!` is `Option` / `std::optional`.
    So I thought `!` was a prefix, but it''s also a suffix? Very confused. (Note:
    I was wrong. `?T` is `Option<T>` and `E!T` is `Result<T,E>`).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对`anyerror!void`感到立即困惑。我认为`!`是`Option` / `std::optional`。所以我认为`!`是一个前缀，但它也是一个后缀？非常困惑。（注：我错了。`?T`是`Option<T>`，而`E!T`是`Result<T,E>`）
- en: Can't figure out how to print an integer. Can't find documentation or an example
    in ZigLearn. Needed to search for `std.debug.print` not `std.log.info` to find
    the example. Annoying.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 搞不清楚如何打印一个整数。在ZigLearn中找不到文档或示例。需要搜索`std.debug.print`而不是`std.log.info`来找到示例。很烦人。
- en: Building is slow. It takes about ~3 seconds minimum which is frustratingly slow
    when I'm fighting basic syntax errors. I wish there was a fast `zig check`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 建立速度很慢。当我在与基本语法错误作斗争时，需要大约~3秒钟的最小时间，这真是令人沮丧地慢。我希望有一个快速的`zig check`。
- en: Compile error messages are mediocre. They're full of useless information and
    compiler callstacks I don't care about.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 编译错误信息一般般。充满了我不关心的无用信息和编译器调用栈。
- en: Zig reference documentation badly needs examples. Can't figure out how to use
    `std.fmt.parseInt`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Zig参考文档非常需要示例。搞不清楚如何使用`std.fmt.parseInt`。
- en: Catching memory leaks at run-time by default is very cool! Compiler should be
    able to trivially detect not calling `nums.deinit()` at compile-time.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下在运行时捕获内存泄漏非常酷！编译器应该能够在编译时轻松检测到未调用`nums.deinit()`。
- en: Can not figure out how to get the number of items in an `ArrayList`. The [documentation](https://ziglang.org/documentation/0.8.1/std/#std;ArrayList)
    does not reveal this basic information. The type of `items` is `var`. That is
    not helpful.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 搞不清楚如何获取`ArrayList`中的项目数量。[文档](https://ziglang.org/documentation/0.8.1/std/#std;ArrayList)没有提供这个基本信息。`items`的类型是`var`。这没有帮助。
- en: 'Can''t figure out how to array access an `ArrayList`. I get a compile error
    of: `error: array access of non-array type ''std.array_list.ArrayListAligned(u32,null)''`.
    That sure seems like an array type to me.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '搞不清楚如何访问`ArrayList`中的数组。我得到一个编译错误：`error: array access of non-array type ''std.array_list.ArrayListAligned(u32,null)''`。这确实看起来像是一个数组类型。'
- en: Need to access `myArray.items[idx]` instead of `myArray[idx]`. I get it. But
    very unintuitive and requires knowledge of implementation details.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 需要访问`myArray.items[idx]`而不是`myArray[idx]`。我明白了。但非常不直观，需要了解实现细节。
- en: Massive callstack on failed `expect` is annoying.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 失败的`expect`有一个巨大的调用栈，非常烦人。
- en: Can't figure out how to compare string. Can't find anything in ZigLearn or reference.
    Googling "zig string compare" is not helpful. This is a shockingly hard blocker.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 搞不清楚如何比较字符串。在ZigLearn或参考文档中找不到任何信息。谷歌搜索“zig string compare”也没用。这真是一个惊人的障碍。
- en: Ah hah. There is no such thing as strings. just `[]const u8`. Need to use `std.mem.eql`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 啊哈。字符串根本不存在，只有`[]const u8`。需要使用`std.mem.eql`。
- en: Can't figure out how to make an `ArrayList` of tuples. Never figured this out.
    Had to make a helper struct.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 搞不清楚如何创建一个元组的`ArrayList`。从未解决这个问题。不得不创建一个辅助结构体。
- en: It's really weird that I can call `myArraylist.push` but need to loop over `for
    (myArrayList.items)`. It feels inconsistent. I get it, but it's super unintuitive.
    I've used many programming languages and none behave this way.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 很奇怪我可以调用`myArraylist.push`，但需要循环遍历`for (myArrayList.items)`。感觉不一致。我明白了，但超级不直观。我使用过许多编程语言，没有一种语言表现得像这样。
- en: I can't actually figure out how to run in release mode. `zig build run` will
    build and run debug. Eventually figured out that `zig build -Drelease-safe` builds
    release. The internet told me it needed to be run manually. I didn't figure out
    until typing this blog post I can build and run via `zig build -Drelease-safe
    run`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我实际上搞不清楚如何在发布模式下运行。`zig build run`会构建和运行调试版本。最终发现`zig build -Drelease-safe`会构建发布版。网络告诉我需要手动运行。直到写这篇博客文章才发现可以通过`zig
    build -Drelease-safe run`构建和运行。
- en: '`std.mem.tokenize` is great. Awesome feature over vanilla C when combined with
    `foreach`-like `for` loop.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`std.mem.tokenize`非常棒。与`foreach`类似的`for`循环结合时，比起原始的C语言具有很棒的功能。'
- en: '[Documentation](https://ziglang.org/documentation/master/std/#std;builtin.TypeInfo)
    for `TypeInfo` is beyond worthless.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`TypeInfo`的[文档](https://ziglang.org/documentation/master/std/#std;builtin.TypeInfo)简直一文不值。'
- en: Should I pass the allocator to every function? Doesn't seem great. Maybe I'm
    supposed to create a global? Globals are evil and feel bad.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我应该将分配器传递给每个函数吗？感觉不太好。也许我应该创建一个全局变量？全局变量是邪恶的并且感觉很不好。
- en: How do I print a number in binary? Googling how to do things in Zig has like
    a 50% chance of taking you to a [GitHub issue](https://github.com/ziglang/zig/issues/1358)
    where the feature is being discussed. This happened to me a LOT.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如何以二进制形式打印数字？在 Zig 中搜索如何做事情的方式有 50% 的机会会把你带到一个正在讨论该功能的 [GitHub 问题](https://github.com/ziglang/zig/issues/1358)。这对我来说发生了很多次。
- en: How do I get the length of a tokenized line? What does [tokenize](https://ziglang.org/documentation/master/std/#std;mem.tokenize)
    return? It returns `anytype`. Cool. Very helpful. Had to compile, fail, and see
    in error spew the type was `[]const u8`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如何获取 tokenized 行的长度？[tokenize](https://ziglang.org/documentation/master/std/#std;mem.tokenize)
    返回什么？它返回 `anytype`。很酷。非常有帮助。不得不编译，失败，并在错误中看到类型是 `[]const u8`。
- en: Lack of `zig-analyzer` makes learning hard.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 缺乏 `zig-analyzer` 使得学习变得困难。
- en: How do I make a lambda / closure / local function? There's a too complicated
    pattern with numerous issues. There is, of course, a [GitHub issue](https://github.com/ziglang/zig/issues/229)
    discussing this.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我如何创建 lambda / 闭包 / 局部函数？有一个非常复杂的模式，存在很多问题。当然，有一个 [GitHub 问题](https://github.com/ziglang/zig/issues/229)
    讨论这个问题。
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Bit-shifting is a monumental pain in the ass. `const mask : usize = @as(usize,
    1) << @truncate(u6, i);`. I eventually wound up with: `@truncate(u16, @as(usize,
    1) << @truncate(u6, i));`. Blech.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '位移是一个巨大的痛苦。`const mask : usize = @as(usize, 1) << @truncate(u6, i);`。我最终得到了：`@truncate(u16,
    @as('
- en: 'The following line doesn''t compile: `const mask = 1 << (num_bits - 1);`. Blech.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行无法编译：`const mask = 1 << (num_bits - 1);`。糟糕。
- en: 'Casting seems too complex too: `@as(type, value)`. Blech.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 转换似乎也太复杂了：`@as(type, value)`。糟糕。
- en: Can't `xor` bools!? Blech.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 不能对布尔值执行 `xor`!? 糟糕。
- en: 'Can''t redirect output of `zig build run`. The following doesn''t work: `zig
    build run > c:/temp/out.txt`. :('
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 无法重定向 `zig build run` 的输出。以下方法无效：`zig build run > c:/temp/out.txt`。:(
- en: Parsing `i32` is delightful (once I figured it out).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 解析 `i32` 令人愉快（一旦我弄清楚了）。
- en: '`tokenize` is delightful.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`tokenize` 令人愉快。'
- en: '`try` syntax is nice and clean.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`try` 语法简洁明了。'
- en: Callstack on zig compiler error is too long and not helpful. Have to scroll
    way up to find actual error.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: zig 编译器错误的调用堆栈太长，也不够有帮助。必须向上滚动很长一段时间才能找到实际的错误。
- en: '`zig fmt src/main.zig` is nice. Wish it automatically ran on all files.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`zig fmt src/main.zig` 很好用。希望它能自动运行在所有文件上。'
- en: Wish there was an easy way to pretty print nested `ArrayList`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 希望有一种简单的方法来漂亮打印嵌套的 `ArrayList`。
- en: Producing an array of arrays required a lot of painful trial and error.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 生成数组的数组需要很多痛苦的反复尝试。
- en: 'Struggled to mutably iterate an `ArrayList`. The trick was: `for (board.tiles.items)
    |*tile| { ... }`. I don''t get it. I found understanding value vs reference semantics
    in Zig very difficult and confusing.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 努力对 `ArrayList` 进行可变迭代。诀窍是：`for (board.tiles.items) |*tile| { ... }`。我搞不懂。我发现在
    Zig 中理解值和引用语义非常困难和令人困惑。
- en: 'Index checking is cool... but the error message is not helpful. `thread 9888
    panic: index out of bounds`. What was the index? What was the slice length? This
    is important information.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '索引检查很酷... 但错误消息不够有帮助。`thread 9888 panic: index out of bounds`。是哪个索引？切片长度是多少？这是重要信息。'
- en: VSCode breakpoint on exception works great.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: VSCode 对异常的断点工作得很好。
- en: First-class support for callstacks is stellar. Something sorely missing in C
    and C++.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一流的调用堆栈支持是出色的。这是 C 和 C++ 中非常缺失的东西。
- en: My parser isn't working, but not sure why. Omg `tokenize` does not work as expected.
    Needed to use `split` not `tokenize`. Horrifically insidious.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我的解析器不起作用，但不确定原因。天啊，`tokenize` 不像预期的那样工作。需要使用 `split` 而不是 `tokenize`。令人毛骨悚然。
- en: Wanted to use regular expression. There's nothing built-in. There is a GitHub
    project. Not sure how to use it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 想要使用正则表达式。没有内置的。有一个 GitHub 项目。不确定如何使用它。
- en: No standard package manager in Zig. Gyro, zigmod, and submodules all exist.
    No standard.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Zig 中没有标准的包管理器。Gyro、zigmod 和子模块都存在。没有标准的。
- en: No zig tutorial shows how to correctly import external Zig code. This feels
    like a huge oversight.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 没有 Zig 教程显示如何正确导入外部 Zig 代码。这感觉像一个巨大的疏忽。
- en: VSCode debugging of Zig is easy to setup.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VSCode 中调试 Zig 很容易设置。
- en: Debugging `ArrayList` is not useful. Only shows first element. :(
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 调试 `ArrayList` 不实用。只显示第一个元素。:(
- en: 'Zig templates/generics is interesting. `pub fn max(x: anytype, y: anytype)
    @TypeOf(x, y) { return if (x > y) x else y; }`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 'Zig 的模板/泛型很有趣。`pub fn max(x: anytype, y: anytype) @TypeOf(x, y) { return if
    (x > y) x else y; }`'
- en: Compile times still frustrating. I wish there was a fast `zig check` similar
    to `cargo check`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 编译时间仍然令人沮丧。我希望有一个快速的 `zig check`，类似于 `cargo check`。
- en: Hard to cast `i32*i32` to `usize`. (Not sure why I made this note.)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `i32*i32` 转换为 `usize` 很困难。 （不确定为什么我会做这个笔记。）
- en: I don't actually know what `@` prefix means. I think "built-in". For some unspecified
    definition of built-in.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我实际上不知道 `@` 前缀代表什么意思。我认为是“内建”的。对于内建的某种未指定的定义。
- en: Zig's inability to infer type is annoying. If I create `var count` and return
    it and the function return type is `usize` then `var count` is obviously a `usize`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Zig 无法推断类型真的很烦人。如果我创建了 `var count` 并返回它，函数的返回类型是 `usize`，那么 `var count` 显然是一个
    `usize`。
- en: No notes. Simple problem that didn't require learning anything new. Maybe I'm
    starting to grasp the basics?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 没有笔记。简单的问题，不需要学习任何新东西。也许我开始掌握了基础知识？
- en: Did not complete in Zig.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 没有在 Zig 中完成。
- en: This is where I fell off the rails. I didn't intend to stop. I said I'll catch
    back up in a couple of days. I never did. The motivation drained out of me for
    no particular reason.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我掉进去的地方。我并不打算停下来。我说我会在几天后赶上。我没有。出于没有特定原因，我的动力消失了。
- en: The thought of picking Zig back up felt like a chore. There were things I knew
    I would have to learn in Zig, for example `HashMap` and `HashSet`, and the idea
    of fighting did not spark joy.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 拾起 Zig 的想法感觉像是一项琐事。我知道我必须在 Zig 中学习一些东西，比如 `HashMap` 和 `HashSet`，而与之抗争的想法并没有带来愉悦的感觉。
- en: I tried to pick Zig + AoC back up in January after a nice holiday break. Somewhere
    along the lines [Zig 0.9](https://ziglang.org/download/0.9.0/release-notes.html)
    released so I decided it would be a good exercise to upgrade.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个愉快的假期之后，我试图在一月份重新学习 Zig + AoC。然后在某个时候，[Zig 0.9](https://ziglang.org/download/0.9.0/release-notes.html)
    发布了，所以我决定这将是一个很好的升级练习。
- en: Upgrading Zig is a manual process. Download a new `zig.exe` and replace your
    old one in the path. A little tedious.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 升级 Zig 是一个手动过程。下载一个新的 `zig.exe` 并替换路径中的旧文件。有点乏味。
- en: I immediately encountered new errors about unused function parameters. My overly
    complex workaround for local functions stopped working, sometimes. I don't know
    why so I just turned it into a normal function.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我立即遇到了关于未使用函数参数的新错误。我过于复杂的本地函数解决方法停止工作了，有时候。我不知道为什么，所以我只是把它变成了一个普通的函数。
- en: Next, I had to deal with [allocgate](https://pithlessly.github.io/allocgate.html).
    I found the release notes for this really frustrating. The blog post explains
    in detail why the change was made. But it did not clearly explain what changes
    I needed to make to my code to make it compile. This was needlessly frustrating
    to figure out imho.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我不得不处理 [allocgate](https://pithlessly.github.io/allocgate.html)。我发现这个发布说明真的很令人沮丧。博客文章详细解释了为什么进行了更改。但它没有清楚地解释我需要对我的代码进行哪些更改才能使其编译。在我看来，这是不必要的令人沮丧的。
- en: Once I got my code working I realized something shocking. Zig appears to not
    report compiler errors for functions that get optimized out. Wat? I needed to
    explicitly make sure all functions were called for allocgate errors to be detected.
    Blech.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当我的代码工作起来时，我意识到了一件令人震惊的事情。Zig 似乎不会报告被优化掉的函数的编译器错误。什么？我需要明确确保所有函数都被调用以检测到分配错误。呃。
- en: At this point I simply have other projects that interest me more. Zig is going
    back on the shelf.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一点，我简单地对其他项目更感兴趣。Zig 又被搁置了。
- en: So where does this leave me? I think I have three key impressions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这对我意味着什么呢？我想我有三个关键印象。
- en: Zig does not currently spark joy
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zig 目前并没有带来愉悦的感觉。
- en: Zig may have several profound ideas
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zig 可能有几个深刻的想法。
- en: Zig is exciting and I will revisit for Advent of Code 2022
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zig 令人兴奋，我将在 2022 年复查 Advent of Code。
- en: Zig is not ready for primetime. This is not controversial. The Zig team explicitly
    states it is not ready for production use. I concur.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Zig 还没有准备好面向大众。这并不具有争议性。Zig 团队明确表示它还没有准备好用于生产。我同意。
- en: I don't think Zig is ready for most programmers. It is not as far along as I
    thought it was.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为 Zig 对大多数程序员来说还没有准备好。它的进展不如我想象的那么顺利。
- en: There is very little info on Zig out there. It's very difficult to use Google
    to answer questions. r/zig is not active. r/adventofcode solution threads do not
    have Zig solutions.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Zig 的信息非常少。使用谷歌回答问题非常困难。r/zig 不活跃。r/adventofcode 解决线程没有 Zig 解决方案。
- en: 'The Zig Discord is very active and the #advent-of-code channel is full of very
    friendly, very helpful people. They answered many questions from me. Without their
    help I likely would have given up earlier due to frustration.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Zig Discord 非常活跃，#advent-of-code 频道充满了非常友好、非常乐于助人的人。他们回答了我很多问题。如果没有他们的帮助，由于沮丧，我很可能早就放弃了。
- en: Zig has poor documentation. The [standard library reference](https://ziglang.org/documentation/0.9.0/std/)
    is experimental and not useful. The [language reference](https://ziglang.org/documentation/0.9.0/)
    is pretty good, but it's a reference not a guide or tutorial.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Zig 的文档质量较差。[标准库参考](https://ziglang.org/documentation/0.9.0/std/)是实验性的，没有什么用。[语言参考](https://ziglang.org/documentation/0.9.0/)相当不错，但它是一份参考资料，而不是指南或教程。
- en: '[ZigLearn](https://ziglearn.org/) is the best learning resource I found. It''s
    a good start. It isn''t the best at introducing concepts. For example it starts
    off with a bunch of unfamiliar `test "Do Thing"` function declarations without
    explaining what that syntax means or how to run tests. The second example introduces
    the `try` keyword, but it isn''t defined. That critically important definition
    occurs 7 sections later, in the middle, in an off-hand comment that''s trivially
    easy to miss.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我找到的最好的学习资源是[ZigLearn](https://ziglearn.org/)。这是一个不错的开始。它不是最好的引入概念的工具。例如，它从一堆不熟悉的`test
    "Do Thing"`函数声明开始，而没有解释该语法的含义或如何运行测试。第二个例子介绍了`try`关键字，但没有定义它。这个至关重要的定义在之后的第7节中出现，位置有些偏僻，很容易被忽略。
- en: Writing documentation is **hard**. I've tried to not compare Zig to Rust. However
    I simply have to compare Zig's lack of documentation to the absolute stellar [Rust
    book](https://doc.rust-lang.org/stable/book/) and [Rust Standard Library Documentation](https://doc.rust-lang.org/stable/std/).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 编写文档是**困难**的。我尽量不把 Zig 和 Rust 进行比较。然而，我必须得把 Zig 缺乏文档与绝佳的[Rust 书籍](https://doc.rust-lang.org/stable/book/)和[Rust
    标准库文档](https://doc.rust-lang.org/stable/std/)进行比较。
- en: I think Zig needs to put significant resources into the "Zig Book" now. It takes
    years of refinement and waiting for Zig 1.0 is too late IMHO. Start now and by
    Zig 1.2 it should be pretty good.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为 Zig 现在需要投入大量资源到“Zig 书”中。这需要多年的完善和等待，等到 Zig 1.0 太晚了，在我看来。现在就开始，到 Zig 1.2
    时应该会相当不错。
- en: I'm going to complain briefly about the Zig page titled [Why Zig When There
    is Already C++, D, and Rust?](https://ziglang.org/learn/why_zig_rust_d_cpp/).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我要简要抱怨一下 Zig 页面上标题为[为什么要选择 Zig，而不是已经有 C++、D 和 Rust？](https://ziglang.org/learn/why_zig_rust_d_cpp/)。
- en: 'Zig is a cool language. I think it has a lot of interesting ideas. I think
    in the future there are numerous reasons why someone might choose to use Zig.
    Here are the bullet points from "Why Zig":'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Zig 是一种很酷的语言。我认为它有很多有趣的想法。我认为未来有很多原因让人选择使用 Zig。以下是“为什么选择 Zig”的要点：
- en: No hidden control flow
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有隐藏的控制流
- en: No hidden allocations
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有隐藏的分配
- en: First class support for no standard library
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于无标准库的一流支持
- en: A portable language for libraries
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可移植的库语言
- en: A package manager and Build System for existing projects
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包管理器和用于现有项目的构建系统
- en: Simplicity
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单
- en: Tooling
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具
- en: This list is not compelling IMHO. Zig is a cool languge with a lot of really
    cool ideas. This list is not cool and does include most of the features that excite
    me. "It's like C, but better in every way". Now that's a hell of a sales pitch.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表在我看来并不吸引人。Zig 是一种带有许多非常酷的想法的酷语言。这个列表并不酷，也没有包含大部分让我兴奋的特性。“就像 C 语言，但在各个方面更好”。这简直就是一个了不起的销售宣传。
- en: '"No hidden control flow" seems to be a rallying cry of the Zig community. That
    is definitely not what I would put as the #1 most compelling bullet point for
    a new programming language. I don''t know why it''s the first feature listed on
    every page.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '"没有隐藏的控制流"似乎是 Zig 社区的一个呼声。这绝对不是我会把它作为新编程语言最吸引人的第一个要点的原因。我不知道为什么它是每个页面上列出的第一个特性。'
- en: I also think it's partially wrong. No one in the history of the world has ever
    been confused or upset by `a + b` calling a function. Operating overloading can
    be very evil. Don't allow `operator.` or `operator->` overloads. Overloading basic
    math operators is fine, not confusing, and a good idea. I do a lot of 3d vector
    math so I'm willing to die on this hill.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我也认为它部分错误。世界上从来没有人因为`a + b`调用一个函数而感到困惑或不满。操作重载可能是非常邪恶的。不允许`operator.`或`operator->`的重载。重载基本的数学运算符是可以的，不会令人困惑，也是一个好主意。我做了很多三维向量的数学计算，所以我愿意在这一点上坚持。
- en: '[PRE1]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I think Zig might have several profound ideas.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为 Zig 可能有一些深刻的想法。
- en: No language allocator function is profound. Passing allocators into every struct
    function is somewhat tedious, but profound. In C++ you have the workhorse `std::vector<Foo>`.
    Specifying the allocator requires specifying a template type, which is a monumental
    pain in the ass. In Zig you can trivially change the allocator type. `std.heap`
    contains `ArenaAllocator`, `FixedBufferAllocator`, `GeneralPurposeAllocator`,
    and `StackFallbackAllocator`. Delightful.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 没有语言分配器函数是深刻的。将分配器传递到每个结构函数中有点繁琐，但也很深刻。在C++中，你有工作马 `std::vector<Foo>`。指定分配器需要指定一个模板类型，这是一个巨大的痛点。在Zig中，你可以轻松地更改分配器类型。`std.heap`
    包含 `ArenaAllocator`、`FixedBufferAllocator`、`GeneralPurposeAllocator` 和 `StackFallbackAllocator`。令人愉快。
- en: Zig has a seemingly powerful ability to intergrate into existing projects. It's
    ability to cross-compile for different platforms is enviable. I think that "using
    Zig for isolated parts of your project" might be profound. I'm not sure. I strongly
    suspect integrating Zig into real projects is harder than the Zig team suggests.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Zig似乎有强大的能力整合到现有项目中。它的跨平台交叉编译能力令人羡慕。我认为“在项目的隔离部分使用Zig”可能是深刻的。我不确定。我强烈怀疑将Zig整合到真实项目中比Zig团队建议的要困难。
- en: Zig's comptime generic capabilities are fascinating and profound. I don't fully
    understand them yet. I'm not entirely sure how they compare to C++ template or
    Rust generics. Can Zig comptime do anything C++ templates can do? Are there limitations?
    I'm not sure.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Zig的comptime通用能力令人着迷和深刻。我还没有完全理解它们。我不完全确定它们与C++模板或Rust泛型的比较如何。Zig的comptime能做到C++模板能做的吗？有什么限制吗？我不确定。
- en: Zig's [error handling](https://ziglang.org/documentation/0.9.0/#Errors) is profound
    and powerful. It's also super confusing. I failed to grok erors sets which can
    be merged, inferred, coerced, deferred, and traced. Error tracing is super cool
    and something I badly wish was in other languages. I don't love syntax such as
    `anyerror!?u32`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Zig的[错误处理](https://ziglang.org/documentation/0.9.0/#Errors)是深刻而强大的。但也非常令人困惑。我未能理解可以合并、推断、强制、延迟和追踪的错误集。错误追踪非常酷，我非常希望其他语言也有。我不喜欢诸如
    `anyerror!?u32` 这样的语法。
- en: Zig's [colorblind](https://kristoff.it/blog/zig-colorblind-async-await/) async
    / coroutine system may be especially profound. I haven't dug deep enough to form
    an opinion. This could be a huge feature advantage over C and even C++.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Zig的[色盲](https://kristoff.it/blog/zig-colorblind-async-await/)异步/协程系统可能尤为深刻。我还没有深入研究到足以形成自己的观点。这可能是相对于C甚至C++的一个巨大特性优势。
- en: Zig did not spark my joy. I found it difficult and frustrating to learn. Lack
    of documentation, lack of tutorials, poor compiler errors, unintuitive types,
    confusing syntax, confusing reference vs value, ungoogleable, non-composable iterators,
    and more.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Zig没有引起我的兴奋。我发现学习它很困难和令人沮丧。缺乏文档，缺乏教程，糟糕的编译器错误，不直观的类型，混乱的语法，混乱的引用与值，无法通过谷歌搜索，不可组合的迭代器等等。
- en: However Zig has many things I loved and expect in a modern language. Runtime
    safety, slices, defer, simd, tagged unions (needs syntactic sugar), `foreach`
    style `for` loops, comptime, a standard build system, a promise of a package manager,
    basic iterators, and more.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Zig有很多我喜欢并期望在现代语言中看到的东西。运行时安全性、切片、延迟、simd、带标签的联合体（需要语法糖）、`foreach` 风格的 `for`
    循环、comptime、标准构建系统、包管理器的承诺、基本迭代器等等。
- en: I'm excited for the future of Zig. I love that it is exploring new ideas and
    pushing forward the next generation of programming languages. I think it will
    likely be very solid when Zig 1.0 releases. That looks to be several years from
    now.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我对Zig的未来感到兴奋。我喜欢它正在探索新的想法，并推动下一代编程语言的发展。我认为在Zig 1.0发布时它可能会非常稳定。看起来那将是几年后的事情。
- en: I've dipped my toes in the Zig water and it was chilly. I'm not ready to jump
    in. I will likely give Zig a more exclusive go for Advent of Code 2022\. Next
    time I'll have a better idea of what I'm signing up for.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经试探过Zig的水，感觉有些冷。我还没准备好全力投入。可能我会在2022年的编程之前更多地尝试Zig。下一次我会更清楚我在签约什么。
- en: Thanks for reading.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。
