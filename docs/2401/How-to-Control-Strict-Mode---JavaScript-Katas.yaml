- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:30:18'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: How to Control Strict Mode | JavaScript Katas
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://jskatas.org/blog/2023/10/16-control-strict-mode/](https://jskatas.org/blog/2023/10/16-control-strict-mode/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I was surprised to see that the worker threads run in non-strict mode by default.
    This should rarely happen, because when using ES modules (ESMs), classes or `"use
    strict"` then the engine forces strict mode. I didn't know this in the beginning.
    I have been working on the katas I use for this site in the [javascript-katas
    repo](https://codeberg.org/wolframkriesing/javascript-katas) which uses ESMs and
    `type=module`, my default. This makes the entire nodejs project, any `npm ...`
    command run use strict mode. Escaping from strict mode is not easily possible,
    but one way to run code in non-strict mode is by using a worker thread.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: I always like to understand where things originate, so let's read about strict
    mode.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Strict Mode – When and Why?
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Strict mode was introduced [in ES5 (in 2009)](https://262.ecma-international.org/5.1/#sec-4.2.2).
    In the specification it says strict mode was added
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: in the interests of security, to avoid what [...] consider to be error-prone
    features, to get enhanced error checking
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: and
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: The strict variant also specifies additional error conditions that must be reported
    by throwing error exceptions
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So strict mode was introduced for making JS safer.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Strict Mode?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Actually the worker I used was just a mean to solve my actual problem, which
    was running tests for the `arguments` kata. In order to do that I needed to run
    the tests in non-strict mode, so let's have a look at the strict mode.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Where does the strict mode play a role now? I had been diving deep into the
    "function API", digging in the very first [ES1 spec](https://www.ecma-international.org/wp-content/uploads/ECMA-262_1st_edition_june_1997.pdf)
    and all versions beyond to find out when was what introduced or deprecated (deprecation
    happens rarely in JavaScript). So I came across `arguments` and when I wrote the
    following test:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It failed with "Uncaught SyntaxError: Unexpected eval or arguments in strict
    mode", which was not due to the test code itself, but the rest of the code I ran
    in the worker thread. The above test only got injected and makes only a small
    part of the entire code run in the worker. The code has an `import` in it, which
    turned all the code to be run in strict mode. And as the error says `arguments`
    is not allowed in strict mode.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: So I want to control when to turn on strict mode. But for that let's understand
    strict mode a bit better first.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: What forces Strict Mode?
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As mentioned above `"use strict"` turns on strict mode, but in this case there
    was none in the worker code yet, so what turned it on? In the [ES6 spec chapter
    "Strict Mode Code"](https://262.ecma-international.org/6.0/#sec-strict-mode-code)
    the following lines were newly added which force strict mode to turn on:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Module code is always strict mode code.
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: All parts of a ClassDeclaration or a ClassExpression are strict mode code.
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ClassDeclaration 或 ClassExpression 的所有部分都是严格模式代码。
- en: So the `import` turned it on.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以`import`把它打开了。
- en: How to Control Strict Mode?
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何控制严格模式？
- en: So I rewrote the code to not use `import` and it ran in non-strict mode.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我重写了代码，不使用`import`，它在非严格模式下运行。
- en: Now I can control strict mode, I just have to add `"use strict"` at the top
    of the code. Even better, I can put `"use strict"` at the beginning of a function
    body, and it makes only this function run in strict mode. It must be the first
    statement in this function, see the code below for some exploration. Oooh, I see
    new katas arising.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我可以控制严格模式，我只需在代码顶部添加`"use strict"`。更好的是，我可以把`"use strict"`放在函数体的开头，只有这个函数以严格模式运行。它必须是这个函数中的第一条语句，请参见下面的代码进行一些探索。哦，我看到了新的挑战出现了。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The above fails with the error message we know from above "Unexpected eval or
    arguments in strict mode".
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码出错了，我们从上面知道的错误消息是"在严格模式下，意外的 eval 或 arguments"。
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The above fails too, for the same reason. Here only the function is run in strict
    mode, but that's also where `arguments` is used, so it fails.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码也因为同样的原因失败了。这里只有函数在严格模式下运行，但这也是使用`arguments`的地方，所以它失败了。
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Passes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过了。
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And this one passes too, because the `"use strict"` strings are not at the
    beginning of a function. I was irritated in the beginning, because I expected
    it to be at the beginning of a scope, so after the `{`, but I was wrong. The [spec
    also states](https://262.ecma-international.org/5.1/#sec-10.1.1) this explicitly:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个也通过了，因为`"use strict"`字符串不在函数的开头。一开始我很烦恼，因为我期望它在作用域的开头，即在`{`之后，但我错了。[规范也说明了](https://262.ecma-international.org/5.1/#sec-10.1.1)这一点：
- en: if the function code begins with a Directive Prologue that contains a Use Strict
    Directive.
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果函数代码以包含 Use Strict Directive 的 Directive Prologue 开头。
- en: in human words, this means the function must start with a `"use strict"` string.
    The scope is not mentioned there. The spec defines three more cases in very hard
    to read words. These are 1) the global code, 2) eval code and 3) `Function` code,
    when either starts with a `"use strict"` string, then the entire code is run in
    strict mode.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以人类的语言来说，这意味着函数必须以`"use strict"`字符串开头。作用域没有在那里提及。规范用非常难以理解的词语定义了另外三种情况。这些情况是
    1）全局代码，2）eval 代码和 3）`Function` 代码，当它们中的任何一个以`"use strict"`字符串开始时，整个代码就会在严格模式下运行。
- en: With this I did not only learn what strict mode restricts, but also how to control
    it. And all the magic is gone.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我不仅了解了严格模式限制了什么，还学会了如何控制它。所有的魔法都消失了。
- en: 💡 **To turn on strict mode, you can use `"use strict"` in the four described
    ways, classes or modules. That's how strict mode can be (manually) turned or forced
    to be on.**
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 💡 **要启用严格模式，您可以在四种描述的方式、类或模块中使用`"use strict"`。这就是严格模式可以（手动）打开或强制打开的方式。**
