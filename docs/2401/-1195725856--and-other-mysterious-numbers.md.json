["```\nRPC: fragment too large: 1195725856\nRPC: fragment too large: 1212498244 \n```", "```\nif (svc_sock_reclen(svsk) + svsk->sk_datalen >\n                            serv->sv_max_mesg) {\n    net_notice_ratelimited(\n        \"RPC: fragment too large: %d\\n\",\n        svc_sock_reclen(svsk));\n    goto err_delete;\n}\n```", "```\nstatic inline u32 svc_sock_reclen(struct svc_sock *svsk)\n{\n    return ntohl(svsk->sk_reclen) & RPC_FRAGMENT_SIZE_MASK;\n}\n```", "```\n#define RPC_LAST_STREAM_FRAGMENT (1U << 31)\n#define RPC_FRAGMENT_SIZE_MASK   (~RPC_LAST_STREAM_FRAGMENT)\n```", "```\n% python\n>>> hex(1195725856)\n'0x47455420'\n>>> hex(1212498244)\n'0x48454144'\n```", "```\n>>> '\\x47\\x45\\x54\\x20'\n'GET '\n>>> '\\x48\\x45\\x41\\x44'\n'HEAD'\n```", "```\ntcpdump -i any -w trap.pcap dst port 2049\n# ...wait for logs to appear again, then ^C...\ntcpdump -qX -r trap.pcap | less +/HEAD \n```", "```\n#include <assert.h> #include <byteswap.h> #include <inttypes.h> #include <limits.h> #include <stdio.h> #include <string.h>  \nstatic int system_is_little_endian(void) {\n    static const int tmp = 1;\n    return *(const char *)&tmp == 1;\n}\n\n#define print_reinterpreted_inner(type, fmt, bs_func, hdr)      \\\n    do {                                                        \\\n        if (strlen(hdr) >= sizeof(type)) {                      \\\n            type *_hdr_conv = (type *)hdr;                      \\\n            type _le, _be;                                      \\\n            if (system_is_little_endian()) {                    \\\n                _le = *_hdr_conv;                               \\\n                _be = bs_func(*_hdr_conv);                      \\\n            } else {                                            \\\n                _le = bs_func(*_hdr_conv);                      \\\n                _be = *_hdr_conv;                               \\\n            }                                                   \\\n            printf(\"%.*s,%zu,%\" fmt \",%\" fmt \"\\n\",              \\\n                   (int)strlen(hdr) - 2, hdr, sizeof(type),     \\\n                   _le, _be);                                   \\\n        }                                                       \\\n    } while (0) \n#define print_reinterpreted(bits, hdr)                          \\\n    print_reinterpreted_inner(uint##bits##_t, PRIu##bits,       \\\n                              bswap_##bits, hdr) \nint main(void) {\n    const char *methods[] = {\"GET\",   \"HEAD\",   \"POST\",\n                             \"PUT\",   \"DELETE\", \"OPTIONS\",\n                             \"TRACE\", \"PATCH\",  \"CONNECT\"};\n    size_t i;\n\n    printf(\"data,bytes,little-endian,big-endian\\n\");\n\n    for (i = 0; i < sizeof(methods) / sizeof(methods[0]); i++) {\n        int ret;\n        char hdr[16];\n        unsigned const char *check =\n            (unsigned const char *)methods[i];\n\n        /* No high bit, so no need to check signed integers */\n        assert(!(check[0] & (1U << (CHAR_BIT - 1))));\n\n        ret = snprintf(hdr, sizeof(hdr), \"%s /\", methods[i]);\n        assert(ret > 0 && ret < (int)sizeof(hdr));\n\n        print_reinterpreted(64, hdr);\n        print_reinterpreted(32, hdr);\n        print_reinterpreted(16, hdr);\n    }\n}\n```"]