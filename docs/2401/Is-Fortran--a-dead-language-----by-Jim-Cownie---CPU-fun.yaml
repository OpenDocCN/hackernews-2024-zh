- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:43:49'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:43:49
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Is Fortran "a dead language"? - by Jim Cownie - CPU fun
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fortran是“一门死语言”吗？- 作者：Jim Cownie - CPU fun
- en: 来源：[https://cpufun.substack.com/p/is-fortran-a-dead-language](https://cpufun.substack.com/p/is-fortran-a-dead-language)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://cpufun.substack.com/p/is-fortran-a-dead-language](https://cpufun.substack.com/p/is-fortran-a-dead-language)
- en: A recent tweet contained the phrase “dead languages such as Fortran”, which
    (although perhaps intended in jest) seemed worth debunking, since it is important
    that people making funding decisions about investments in compilers do not ignore
    Fortran as “a legacy language”, or even, as above, a “dead language”, since in
    its home domain Fortran remains critically important.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最近一条推文中含有“Fortran等死语言”的短语，尽管这可能是玩笑，但值得驳斥，因为在做关于投资编译器的决策时，不应将Fortran视为“遗留语言”，甚至不应像上面所说的那样将其视为“死语言”，因为在它的主要领域中，Fortran仍然至关重要。
- en: There are a few reasons for this misconception:-
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这种误解有几个原因：-
- en: Most programmers are never taught Fortran, and it is not a computer science
    or web language.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数程序员从未学过Fortran，它也不是计算机科学或Web语言。
- en: Fortran is only the 15th most popular language on the [Tiobe index](https://www.tiobe.com/tiobe-index/)
    for September 2022, and is low down in [IEEE’s language popularity estimates](https://spectrum.ieee.org/top-programming-languages-2022)
    as well.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fortran在2022年9月的[Tiobe指数](https://www.tiobe.com/tiobe-index/)中仅排名第15位，而且在[IEEE的语言流行度估计](https://spectrum.ieee.org/top-programming-languages-2022)中也排名靠后。
- en: It was released in 1957 (as, indeed, was I), so, since old people know nothing,
    and anything from the last century is technically suspect, it clearly must be
    dying.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它于1957年发布（与我一样），因此，由于老年人什么都不懂，而且上世纪的任何东西在技术上都值得怀疑，它显然必须在消失。
- en: The issue here is really one of insularity. The web sites and teaching resources
    that people use depend on the jobs they have and the tasks they are trying to
    solve. So, one would not expect accountants to be experts in structural mechanics,
    or to know how to drive a fork-lift truck. We are taught the tools we need for
    the things we are expected to do, and are interested in.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题实际上是封闭性的问题。人们使用的网站和教学资源取决于他们的工作和他们试图解决的任务。因此，我们不会指望会计师是结构力学方面的专家，或者知道如何驾驶叉车。我们被教授使用我们需要的工具来完成我们预期要做的事情，并对此感兴趣。
- en: Thus, people studying hard sciences such as physics and chemistry are taught
    to program in Fortran, whereas more general programmers (who, if the language
    popularity indices are to be believed will likely be developing web applications)
    are not, since Fortran is not used in that domain.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，学习物理和化学等硬科学的人被教授使用Fortran进行编程，而更一般的程序员（如果语言流行指数可信的话，他们可能主要开发Web应用程序）则没有，因为Fortran在那个领域不被使用。
- en: 'One particular group for whom this matters is the people writing the compilers.
    Since most compilers are now written in C or C++ (e.g. the [Gnu Compiler Collection](https://github.com/gcc-mirror/gcc)
    (GCC): 62.6% C++ or C, [LLVM](https://llvm.org/): 84% C++ or C ), those are the
    languages which the compiler writers use every day, so tend to consider as "real"
    languages. In particular, if they improve those compilers they experience the
    benefits themselves.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况影响较大的一个群体是编写编译器的人员。由于大多数编译器现在是用C或C++编写的（例如[Gnu Compiler Collection](https://github.com/gcc-mirror/gcc)（GCC）：62.6%
    C++或C，[LLVM](https://llvm.org/)：84% C++或C），这些是编译器编写者每天使用的语言，因此往往被视为“真正”的语言。特别是，如果他们改进这些编译器，他们会亲身体验到好处。
- en: Also, since they are not interested in Fortran, many people do not track the
    status of current Fortran, (which continues to evolve through Fortran 2018, with
    Fortran 2023 expected next year), but are under the impression that nothing has
    happened since Fortran 77 (or, at the latest, Fortran 90). While it is still possible
    to compile code in fixed, punch-card, format, modern Fortran is a more friendly
    language with useful built-in features for high-performance computing [HPC] codes
    (such as operations on whole arrays without needing to write a loop, explicitly
    parallel loops [`do concurrent`], and support for Partitioned Global Address Space
    [PGAS] parallelism via [coarrays](https://www.nag.com/nagware/np/r62_doc/nag_f2008.html#AUTOTOC_3_3:~:text=3.3-,Coarrays,-Coarrays%20are%20variables)).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，由于他们对Fortran不感兴趣，许多人不追踪当前Fortran的状态（Fortran持续通过Fortran 2018不断发展，预计明年推出Fortran
    2023），但他们却误以为自Fortran 77（或最迟Fortran 90）以来什么都没发生。虽然仍然可以以固定的打孔卡格式编译代码，但现代Fortran是一种更友好的语言，具有高性能计算[HPC]代码的有用内置功能（例如在不需要编写循环的情况下对整个数组进行操作，显式并行循环[`do
    concurrent`]以及通过[协数组](https://www.nag.com/nagware/np/r62_doc/nag_f2008.html#AUTOTOC_3_3:~:text=3.3-,Coarrays,-Coarrays%20are%20variables)支持分区全局地址空间[PGAS]并行性）。
- en: 'It is certainly true that Fortran is low down on the programming popularity
    indices, but they are not measuring anything that gives us useful information
    about the importance of a language, but rather they tell us how many people ask
    questions about it (TIOBE), or how many people are programming in it ([IEEE](https://spectrum.ieee.org/top-programming-languages-2022#:~:text=we%20look%20at%20nine%20metrics%20that%20we%20think)
    : “we look at nine metrics that we think are good proxies for measuring what languages
    people are programming in.”)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '的确，Fortran在编程流行度指数中排名较低，但它们并未测量任何给我们有关语言重要性的有用信息，而是告诉我们有多少人在询问它（TIOBE），或者有多少人在使用它([IEEE](https://spectrum.ieee.org/top-programming-languages-2022#:~:text=we%20look%20at%20nine%20metrics%20that%20we%20think)
    : “我们查看了九项我们认为是衡量人们正在使用哪些语言的良好代理指标。”）'
- en: However, these measures of popularity miss the point that the number of people
    writing in a language is a completely separate issue from how important the code
    is, and how much compute resource it may consume.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些流行度指标忽略了编写某种语言的人数与代码的重要性以及它可能消耗的计算资源之间的完全不同的问题。
- en: Consider the Vienna Ab initio Simulation Package [[VASP](https://www.vasp.at/)],
    which is the code that consumes the most resources on the UK’s largest HPC machine
    ([Archer2](https://www.archer2.ac.uk/)), and which is written in Fortran. At the
    VASP site we can see [photos of the VASP team](https://www.vasp.at/info/team/)
    which consists of … 15 people. Clearly 15 people writing Fortran make no impact
    on the statistics measured by the popularity indices, yet, as we will see below,
    their code is hugely important.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以维也纳第一性原理模拟软件包[[VASP](https://www.vasp.at/)]为例，这是英国最大的HPC机器（[Archer2](https://www.archer2.ac.uk/)）上消耗最多资源的代码，它是用Fortran编写的。在VASP网站上，我们可以看到[VASP团队的照片](https://www.vasp.at/info/team/)，该团队由15人组成。显然，15个人编写Fortran对流行指数的统计没有任何影响，然而，正如我们将在下面看到的，他们的代码非常重要。
- en: For reasons I cannot understand, “legacy” has become an insult, despite most
    of our knowledge being a legacy from previous generations. (I don’t see physicists
    tearing up energy conservation because it wasn’t theorised in this generation,
    actors complaining about having to learn a part in a Shakespeare play, or musicians
    complaining about playing Mozart, Bach, Beethoven, or [Hildegard of Bingen](https://en.wikipedia.org/wiki/Hildegard_of_Bingen)
    who died in 1169!).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我无法理解的原因，“传统”的成为了一种侮辱，尽管我们大部分的知识都是来自前几代人的传承。（我没有看到物理学家因为能量守恒不是这一代人理论化而将其撕毁，演员抱怨要学习莎士比亚剧本的角色，或者音乐家抱怨演奏莫扎特、巴赫、贝多芬或[希尔德加德·冯·宾根](https://en.wikipedia.org/wiki/Hildegard_of_Bingen)，她于1169年去世！）。
- en: The fact that there are many well tested Fortran codes which are being used
    and maintained, rather than being thrown away to be replaced by expensive, new,
    untested code in the language du jour is a good thing, not a bad one.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多经过充分测试的Fortran代码正在被使用和维护，而不是被扔掉以被代价高昂、新的、未经测试的代码所取代，这是一件好事，而不是坏事。
- en: While you might argue that the weather forecasts you get are bad, the forecasts
    save lives and many are written in Fortran (e.g. the US’ [WRF](https://github.com/wrf-model/WRF),
    the UK Meteorological Office’s Unified Model [UM], and ECMWF’s Integrated Forecast
    System [IFS]).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可能会认为你得到的天气预报很糟糕，但这些预报能够挽救生命，而且许多都是用 Fortran 编写的（例如美国的 [WRF](https://github.com/wrf-model/WRF)，英国气象局的统一模型
    [UM]，以及欧洲中期天气预报中心的综合预报系统 [IFS]）。
- en: Although Fortran may not be useful to hard-core computer-science folk, it remains
    one of the most important languages for scientists who are looking for a well
    understood, performant, portable, language in which to write the codes they need
    to support their real objectives of advancing knowledge in their field.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Fortran可能对于硬核计算机科学家来说没有用处，但对于寻找一个在实现其真正目标——推动其领域知识进步——时需要的具有良好理解性、高性能、可移植性的语言的科学家来说，它仍然是最重要的语言之一。
- en: As we all know, hardware continues to advance (despite the impact of the end
    of [Dennard scaling](https://en.wikipedia.org/wiki/Dennard_scaling)), but having
    a well understood tool that we can continue to use is important. If we buy a cross-head
    screwdriver we don’t throw away the straight, single slot, one we already owned,
    even though both are screwdrivers, rather we recognise that we need both in our
    toolbox. Similarly throwing away Fortran codes makes no sense. Fortran is also
    under [continuing development](https://wg5-fortran.org/), it’s just not visible
    to the people who make a lot of noise about the state of the C++ standard!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，硬件仍在不断进步（尽管[丹纳德缩放](https://en.wikipedia.org/wiki/Dennard_scaling)的结束产生了影响），但拥有一个我们可以继续使用的工具是重要的。如果我们买了一个十字螺丝刀，我们不会扔掉我们已经拥有的直槽单槽螺丝刀，尽管两者都是螺丝刀，而是我们意识到我们需要两者都放在我们的工具箱里。同样地，扔掉Fortran代码是没有意义的。Fortran也在[不断发展](https://wg5-fortran.org/)，只是对于那些大声抱怨C++标准状态的人来说看不到而已！
- en: With the addition of [OpenMP](https://openmp.org)®, Fortran codes can be extended
    in a vendor neutral way to operate on machines with both CPUs and GPUs or other
    accelerators.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加[OpenMP](https://openmp.org)®，Fortran代码可以以供应商中立的方式扩展，以在既有CPU又有GPU或其他加速器的机器上运行。
- en: Many people (including some people writing code themselves, who, if they are
    logical won’t expect to be paid) think that software, and, in particular, compilers,
    should all be free. However, in the real world, someone has to pay the developers
    ([glassdoor](https://www.glassdoor.co.uk/Salaries/us-c-developer-salary-SRCH_IL.0,2_IN1_KO3,14.htm?countryRedirect=true)
    reckons the mean C++ developer salary in the US is $94,466 /yr in September 2022,
    which means that the cost of employing a C++ developer is likely around $150k/yr
    after allowing for office space, machines, travel expenses, and so on). Of course
    that means that the people paying the developers must be able to see significant
    value in the code they produce even if it is given away, since we live in a capitalist
    economic system, and they want to make a profit.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人（包括一些自己编写代码的人，如果他们是理性的，就不会期望得到报酬）认为软件，尤其是编译器，应该是免费的。然而，在现实世界中，必须有人支付开发人员的费用（[glassdoor](https://www.glassdoor.co.uk/Salaries/us-c-developer-salary-SRCH_IL.0,2_IN1_KO3,14.htm?countryRedirect=true)
    在2022年9月估计美国平均C++开发人员工资为$94,466/年，这意味着雇佣一名C++开发人员的成本可能在考虑到办公空间、设备、差旅费等因素后约为每年$150k）。当然，这意味着支付开发人员的人必须能够看到他们提供的代码的重要价值，即使它是免费提供的，因为我们生活在一个资本主义经济体系中，他们希望获得利润。
- en: The compilers used in High Performance Computing [HPC] are mostly written by
    the providers of the hardware, and, normally, that means the designers of the
    CPU (or GPU) chips.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 用于高性能计算 [HPC] 的编译器大多由硬件供应商编写，通常意味着 CPU（或 GPU）芯片的设计者。
- en: There are good reasons for this:-
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多好理由：-
- en: To have compilers ready when a new chip comes out work has to start before the
    specifications are public, so an unrelated software company cannot do it.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在新芯片发布前准备好编译器工作必须在规格公开之前开始，因此一个无关的软件公司不能做到这一点。
- en: If they are sane, the hardware architects should be worrying whether their wonderful
    new features can be used by compilers, so they need to be talking to compiler
    writers and accepting their feedback even before the specification of new instructions
    is finalised.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果他们是明智的，硬件架构师应该担心他们美妙的新功能是否可以被编译器使用，因此他们需要与编译器编写者进行交流，并在新指令的规范最终确定之前接受他们的反馈。
- en: Since the price at which a CPU or GPU can be sold is related to its performance,
    having a compiler which improves the performance of whatever benchmark codes are
    used for this evaluation is valuable as it allows you to charge more for each
    machine you sell. Indeed, this may be a simpler, cheaper, way to achieve performance
    than using an improved process to make the chip, or having it run at a higher
    clock frequency (and thus consume more power).
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于CPU或GPU的售价与其性能相关，因此具有改善任何用于此评估的基准代码性能的编译器是有价值的，因为它使您能够为您销售的每台机器收取更高的价格。事实上，这可能是实现性能的更简单、更便宜的方法，而不是使用改进的工艺来制造芯片，或者使其以更高的时钟频率运行（从而消耗更多的功率）。
- en: Having an in-house compiler-team allows rapid fixes to be made if there are
    problems when running the benchmarks required for specific procurements.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有内部编译器团队可以在运行特定采购所需的基准测试时快速修复问题。
- en: To compete in a specific market the customers there must be able to run their
    codes on the machine you are trying to sell. In the HPC market that means having
    good Fortran support.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在特定市场上竞争，那里的客户必须能够在您试图销售的机器上运行他们的代码。在高性能计算市场上，这意味着必须具备良好的Fortran支持。
- en: That final reason should make it obvious why the number of programmers using
    a language is not the right metric for the people funding compiler development
    to use. Since they aren’t selling the compiler and charging people a license for
    each user, the number of people who will use the compiler is irrelevant. What
    matters is how much hardware is needed to run code that requires support for the
    language the compiler supports.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个原因应该很明显，即程序员使用一种语言的数量并不是资助编译器开发人员使用的正确指标。由于他们并没有出售编译器并向每个用户收取许可证费用，因此使用编译器的人数是无关紧要的。重要的是运行需要支持编译器支持的语言的代码所需的硬件量。
- en: Luckily for us, the Edinburgh Parallel Computing Centre ([EPCC](https://www.epcc.ed.ac.uk/))
    who run [Archer2](https://www.archer2.ac.uk/) (which is the largest centrally
    funded machine for scientific research here in the UK and is [25th in the June
    2022 Top500](https://www.top500.org/system/180036/) list of supercomputers) publish
    [information on the applications](https://www.archer2.ac.uk/support-access/status.html#:~:text=0.0-,Historical%20usage%20data,-Period)
    which are being run on the machine.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，爱丁堡并行计算中心（[EPCC](https://www.epcc.ed.ac.uk/)）运行着[Archer2](https://www.archer2.ac.uk/)（这是英国最大的中央资助科学研究机器，也是2022年6月[Top500](https://www.top500.org/system/180036/)超级计算机榜单上的第25名）发布了在该机器上运行的应用程序的[信息](https://www.archer2.ac.uk/support-access/status.html#:~:text=0.0-,Historical%20usage%20data,-Period)。
- en: Although they don’t currently publish information about the language in which
    each application is written, a morning on Google and a few emails to code authors
    let me fill in that information for most of the codes. The EPCC statistics do
    have a large chunk of “Unidentified” codes; we’ll discuss how usefully to allocate
    these to a programming language below.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管他们目前不公布每个应用程序所使用的语言的信息，但通过上午在谷歌上搜索和给一些代码作者发几封电子邮件，我已经为大多数代码填写了这些信息。EPCC的统计数据中有很大一部分是“未识别”的代码；我们将讨论如何将这些代码有用地分配给一种编程语言。
- en: Looking at the statistics for the last six months (March-August 2022), there
    are 43 applications which use more than 0.1% of the machine; those which use more
    than 1% of the machine (as identified by the program name in the statistics) are
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 查看过去六个月（2022年3月至8月）的统计数据，有43个应用程序使用了超过机器0.1%的资源；那些使用了超过机器1%的资源的应用程序（根据统计数据中的程序名称确定）是
- en: Even at first glance, Fortran seems important, though there’s more to discuss.
    Graphically that data looks like this:-
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 即使乍一看，Fortran似乎很重要，但还有更多讨论。从图形上看，数据如下：-
- en: Looking at results for all of the codes, not just the “over 1%” ones, and aggregating
    by language, we get a view like this :-
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 查看所有代码的结果，而不仅仅是“超过1%”的代码，并按语言聚合，我们得到了以下视图：-
- en: First, that Fortran is distinctly not pushing up the daisies!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Fortran明显没有退出舞台！
- en: However, we should do a little more analysis and think a bit more about what
    we mean by saying a code is written in a particular language. In particular, although
    it is not mentioned in the analysis we can reasonably assume that all the codes
    on this Linux based computer link against `libc`, which is written in a mixture
    of C and assembly code, and that most will be using the dynamic linker, which
    is also written in C, therefore support for C and assembler is fundamental. However
    since C **is** fundamental it can be assumed to be present and someone in a vendor
    working out what they need to fund to be able to sell an HPC machine doesn’t need
    to be funding the C compiler. (Heck, Linux wouldn’t be on the machine if it didn’t
    have a C compiler!)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们应该多做一些分析，对“一个代码是用特定语言编写”的含义进行更多思考。尤其是，尽管在分析中没有提到，但我们可以合理地假设，这台基于 Linux
    的计算机上的所有代码都链接到了`libc`，这是用 C 和汇编代码混合编写的，并且大多数将使用动态链接器，该链接器也是用 C 编写的，因此对 C 和汇编支持是基础性的。然而，由于
    C **是** 基础性的，可以假定它是存在的，而在供应商工作时，他们需要计算出需要资助哪些项目才能出售 HPC 机器，不必资助 C 编译器。（嘿，如果没有
    C 编译器，Linux 就不会存在于这台机器上！）
- en: For that question they need to think about how useful their proposed machine
    would be, and, therefore, how much of the desired load it could support if they
    were unable to run codes containing Fortran. From that point of view, we can assign
    the usage of codes written in Fortran + A.N.Other language to Fortran. If we do
    that, and (for want of better information) assume that the unknown codes use as
    much Fortran as those we know about we get these results
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个问题，他们需要考虑他们提出的机器有多有用，因此，如果他们无法运行包含 Fortran 代码的代码，它能支持多少所需的负载。从这个角度来看，我们可以将用
    Fortran + 其他语言编写的代码的使用分配给 Fortran。如果我们这样做，并且（缺乏更好的信息）假设未知代码使用与我们了解的代码一样多的 Fortran，我们会得到以下结果
- en: So, over 80% of the machine use requires that Fortran is supported.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，超过 80% 的机器使用需要支持 Fortran。
- en: We can also look at the number of codes written in each language (rather than
    the compute resources consumed by codes written in it), which shows us that it
    is not the case that there is just one important Fortran code which is taking
    all the time while most of the codes are written in other languages. Instead the
    proportion of codes in each language is similar to the amount of resources consumed.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以查看每种语言编写的代码数量（而不是编写它的代码所消耗的计算资源），这向我们表明，并非只有一个重要的 Fortran 代码在占用所有时间，而大多数代码都是用其他语言编写的。相反，每种语言的代码比例与所消耗的资源量相似。
- en: Well, Archer2 is believed to have cost £79 million (~ $102 million at the time),
    of which 81.1% was spent to run Fortran codes, making having such a compiler necessary
    to enable spending of ~$82.7 million. Or, perhaps more importantly for the CPU
    vendor, over 9,450 sockets (81.1% of 11,696 total sockets) of high-end, 64 core
    processors are needed to run Fortran based codes. [The Next Platform reckons](https://www.nextplatform.com/2019/09/18/amd-revs-up-hpc-variant-as-rome-chips-ramp/#:~:text=Our%20guess%20is%20that%20list%20price%20is%20around%20%249%2C000%20each%20for%20the%20Epyc%207H12)
    that the CPUs in those sockets had a list-price of ~$9000, so even with a 50%
    discount, that is a single sale worth $42.5 million which depends entirely on
    running Fortran. This is, of course, only one procurement.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，据信 Archer2 的成本为 7,900 万英镑（约合当时的 1.02 亿美元），其中 81.1% 用于运行 Fortran 代码，使得拥有这样的编译器成为能够支出约
    8270 万美元的必要条件。或者，对于 CPU 供应商来说，需要高端、64 核处理器的 9,450 个插槽（总插槽数的 81.1%）来运行基于 Fortran
    的代码。[The Next Platform 估计](https://www.nextplatform.com/2019/09/18/amd-revs-up-hpc-variant-as-rome-chips-ramp/#:~:text=Our%20guess%20is%20that%20list%20price%20is%20around%20%249%2C000%20each%20for%20the%20Epyc%207H12)，这些插槽中的
    CPU 的标价约为 9000 美元，因此即使打了 50% 的折扣，这也是一笔价值 4250 万美元的单笔销售，完全依赖于运行 Fortran。当然，这只是一次采购。
- en: Seems worth funding a compiler to me!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来值得资助一个编译器！
- en: Generalising from your personal experience can be misleading. Just because you
    don’t know any Fortran programmers and don’t write the language yourself doesn’t
    mean it is unimportant. (I don’t know any long-distance truck drivers, or train
    drivers, but they definitely exist, and deliver the food and goods I need to survive!)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从个人经验泛化可能会产生误导。仅因为你不认识任何 Fortran 程序员，也不自己编写这种语言，这并不意味着它不重要。（我不认识任何长途卡车司机或火车司机，但他们确实存在，并且运送我生存所需的食物和商品！）
- en: “Free” software has to be paid for somewhere, and it’s worth thinking a little
    about how that happens.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “免费”软件必须在某个地方付费，值得稍微思考一下是如何实现的。
- en: If you’re looking for a dead language to mention, maybe use [B](https://en.wikipedia.org/wiki/B_(programming_language)),
    [BCPL](https://en.wikipedia.org/wiki/BCPL), or [Algol](https://en.wikipedia.org/wiki/ALGOL),
    rather than Fortran. That will show that you know a bit more about language history,
    and aren’t saying something that is provably wrong.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想提及一门已经不再使用的语言，也许可以使用[B](https://en.wikipedia.org/wiki/B_(programming_language))，[BCPL](https://en.wikipedia.org/wiki/BCPL)，或[Algol](https://en.wikipedia.org/wiki/ALGOL)，而不是Fortran。这将表明你对编程语言历史有更多了解，而且不会说出被证明是错误的话。
- en: Be careful what you wish for when insulting programming languages; the CTO of
    Microsoft Azure, Mark Russinovich recently suggested that [C and C++ should be
    deprecated](https://twitter.com/markrussinovich/status/1571995117233504257) in
    favour of Rust, so perhaps Fortran will outlive C and C++.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在侮辱编程语言时要小心你的愿望；微软Azure的CTO Mark Russinovich最近建议[应该淘汰C和C++，转而使用Rust](https://twitter.com/markrussinovich/status/1571995117233504257)，所以也许Fortran将比C和C++更长寿。
- en: 'And, the most important one: **Fortran is alive and well.**'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 而且，最重要的是：**Fortran 现在仍然活跃。**
- en: Thanks to the EPCC Archer2 team for making their usage statistics publicly available
    and to those who rapidly answered my emails asking which language their code is
    written in.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢EPCC Archer2团队将他们的使用统计数据公开，并感谢那些迅速回复我邮件的人告诉我他们的代码是用哪种语言编写的。
- en: The script I wrote to aggregate the data (which includes the application to
    language mapping) and the data files I used are all at in GitHub [here](https://github.com/JimCownie/CpuFun/tree/main/Archer2Stats).
    To generate the plots I cut/pasted data from the output of [summarise.py](https://github.com/JimCownie/CpuFun/blob/main/Archer2Stats/summarise.py)
    into a spreadsheet. (Sorry, I wanted to get this out, and don’t expect to run
    it often enough to make it worth automating the whole task). Of course anyone
    who wants to can take that code and enhance it, or just lift the parts they need
    (like the application name → language dictionary).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我编写的脚本用于聚合数据（其中包括应用到语言的映射）和我使用的数据文件都在GitHub [这里](https://github.com/JimCownie/CpuFun/tree/main/Archer2Stats)。为了生成图表，我从[summarise.py](https://github.com/JimCownie/CpuFun/blob/main/Archer2Stats/summarise.py)的输出中剪切/粘贴数据到电子表格中。（抱歉，我想尽快完成这个任务，而且不指望经常运行它，所以没必要完全自动化这项任务）。当然，任何想要的人都可以拿取那段代码并加以改进，或者只提取他们需要的部分（比如应用程序名称→语言字典）。
- en: The code that EPCC use to generate their statistics (“SLURM Code Usage Analysis”
    [SCUA]) is all available in GitHub [here](https://github.com/ARCHER2-HPC/usage-analysis),
    and includes their data on application → language mapping (which I have used with
    one addition).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: EPCC用于生成他们统计数据的代码（“SLURM Code Usage Analysis” [SCUA]）都在GitHub [这里](https://github.com/ARCHER2-HPC/usage-analysis)可用，并包括他们的应用程序→语言映射数据（我使用了一个附加数据）。
- en: If anyone is interested in a wider discussion of following the money and growing
    as a software engineer, [the talk I gave (remotely) at UCL back in 2020](https://www.ucl.ac.uk/research-it-services/sites/research_it_services/files/socials-20200715-cownie.pdf)
    may be of interest.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人对跟踪资金流向和作为软件工程师的成长有更广泛的讨论感兴趣，[我在2020年远程发表的演讲](https://www.ucl.ac.uk/research-it-services/sites/research_it_services/files/socials-20200715-cownie.pdf)可能会引起兴趣。
