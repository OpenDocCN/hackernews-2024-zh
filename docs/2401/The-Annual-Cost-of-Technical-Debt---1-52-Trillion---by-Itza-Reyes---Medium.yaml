- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:08:31'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'The Annual Cost of Technical Debt: $1.52 Trillion | by Itza Reyes | Medium'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://itzareyesmx.medium.com/the-annual-cost-of-technical-debt-1-52-trillion-65afaa1e0005](https://itzareyesmx.medium.com/the-annual-cost-of-technical-debt-1-52-trillion-65afaa1e0005)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The Annual Cost of Technical Debt: $1.52 Trillion'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Para leer en Espa√±ol clic* [*aqu√≠*](/1ead73736a46)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: In case you need any more reasons to prioritize software quality, let me share
    with you that the cost of poor software quality in the US has risen to at least
    $2.41 trillion annually, while the accumulated technical debt of software has
    grown to approximately $1.52 trillion.
  prefs: []
  type: TYPE_NORMAL
- en: This is demonstrated by a study conducted in 2022 and set to be updated in 2024
    by the [Consortium for Information & Software Quality (CISQ)](https://www.it-cisq.org/).
  prefs: []
  type: TYPE_NORMAL
- en: While the report focuses on the cost of poor software quality (CPSQ), providing
    analysis, data, and solutions for areas such as cybercrime and the software supply
    chain with open-source software (OSS), this article will specifically delve into
    the topic of technical debt.
  prefs: []
  type: TYPE_NORMAL
- en: CPSQ 2022
  prefs: []
  type: TYPE_NORMAL
- en: üìà Why does technical debt arise?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A significant portion of the current technical debt that exists today was created
    through ‚Äúquick and dirty‚Äù development techniques (e.g., agile without software
    engineering discipline).
  prefs: []
  type: TYPE_NORMAL
- en: Technical debt accumulates when decision-makers opt for a short-term solution
    to a software development problem rather than a more comprehensive long-term solution.
    This initially hides substantial costs that organizations must later pay.
  prefs: []
  type: TYPE_NORMAL
- en: Increase in technical debt
  prefs: []
  type: TYPE_NORMAL
- en: There are various types of technical debt, including requirements, architecture,
    code, testing, and operational processes. Technical debt can be injected at any
    stage of software development, spreading to other phases and parts of the system
    and causing various issues.
  prefs: []
  type: TYPE_NORMAL
- en: Types of Technical Debt
  prefs: []
  type: TYPE_NORMAL
- en: üí∞ The Costs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two essential components to the costs of technical debt.
  prefs: []
  type: TYPE_NORMAL
- en: The principal refers to the cost of refactoring/modifying software artifacts
    to achieve the desired level of maintainability and evolvability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The interest is the additional effort developers will dedicate to making those
    changes due to the existence of the technical debt, which accumulates over time
    as the software becomes more fragile. Every minute spent on less-than-ideal code
    adds interest to the debt.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: üìè Measurement in Software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main challenges when dealing with technical debt has been the lack
    of a way to measure it. To help overcome that problem, CISQ/OMG led the development
    of an Automated Technical Debt ([ATD](https://www.omg.org/spec/ATDM/)) measurement
    standard, which is currently being updated with a new version expected in 2023.
  prefs: []
  type: TYPE_NORMAL
- en: The ATD standard estimates the effort required to address all instances of software
    weaknesses included in the ISO/IEC 5055:2021 standard for automated source code
    quality measures that remain in the code of a software application at the time
    of release.
  prefs: []
  type: TYPE_NORMAL
- en: This estimation can be used to predict future corrective maintenance costs and
    is calculated using static analysis tools.
  prefs: []
  type: TYPE_NORMAL
- en: The measure expresses the cost of software quality in terms that a company can
    understand by estimating the future costs of corrective maintenance to remedy
    structural defects in the code.
  prefs: []
  type: TYPE_NORMAL
- en: üëÄ Recommendations for Addressing It
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the report, several recommendations are made, and at the end, they
    provide a more specific list of recommendations to avoid poor quality in software
    development, including technical debt.
  prefs: []
  type: TYPE_NORMAL
- en: Use software quality standards, related metrics, and emerging tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze and evaluate the quality of all OSS/third-party components that will
    be included in any system. Monitor them closely in operation. Apply patches in
    a timely manner.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid DevOps and CI/CD models that do not include best practices and tools for
    continuous quality engineering.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrate continuous technical debt remediation into the software development
    life cycle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invest in the professionalism, knowledge, and tools of your software engineers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider the possibility of developers certifying their knowledge of critical
    code and architectural weaknesses in ISO/IEC 5055 (still in progress).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: üåü Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The growing impact of technical debt has become the biggest obstacle to making
    changes in existing code bases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many ways to achieve better software quality, but they all start with
    a well-conceived measurement program fully supported by top management.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The potential of managing technical debt is evident in [Stepsize‚Äôs](https://www.stepsize.com/)
    research, which revealed that organizations actively managing technical debt will
    release at least 50% faster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**And as we have seen in the CPSQ, preventing or early elimination of technical
    debt is the most cost-effective long-term strategy.**'
  prefs: []
  type: TYPE_NORMAL
- en: üîó Sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://www.it-cisq.org/the-cost-of-poor-quality-software-in-the-us-a-2022-report/](https://www.it-cisq.org/the-cost-of-poor-quality-software-in-the-us-a-2022-report/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.theee.ai/2021/01/06/6838-poor-software-quality-cost-the-usd-2-08-tn-in-2020/](https://www.theee.ai/2021/01/06/6838-poor-software-quality-cost-the-usd-2-08-tn-in-2020/)'
  prefs: []
  type: TYPE_NORMAL
