- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:56:04'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:56:04
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'DevOps: Don''t destroy silos, transform them'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps：不要摧毁筒仓，而是改造它们
- en: 来源：[https://fernandovillalba.substack.com/p/devops-dont-destroy-silos-transform](https://fernandovillalba.substack.com/p/devops-dont-destroy-silos-transform)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://fernandovillalba.substack.com/p/devops-dont-destroy-silos-transform](https://fernandovillalba.substack.com/p/devops-dont-destroy-silos-transform)
- en: DevOps should not be about destroying silos; it should be about transforming
    them into a self-service bar.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 不应该是摧毁筒仓，而应该是将其转变为自助服务栏。
- en: 'In Kelsey’s words: “Silos are fine, as long as there is an API between them”'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用凯尔西的话说：“筒仓是好的，只要它们之间有一个 API”
- en: Merging various team responsibilities and domains by destroying silos can overwhelm
    them with cognitive load.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过摧毁筒仓来合并各种团队的责任和领域可能会使他们承受巨大的认知负担。
- en: The pinnacle of inter-team interaction is providing an intuitive self-service
    (API, Library, CLI, UI etc)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队间交互的最高水平是提供直观的自助服务（API、库、CLI、UI 等）
- en: If you google [silos DevOps](https://www.google.com/search?q=silos+devops&oq=silos+devops),
    the top page is filled with many articles telling you that you must destroy silos.
    In fact, there is only [one article](https://polarsquad.com/blog/how-i-stopped-wanting-to-break-silos-and-why)
    that says otherwise on the top page! So, if the consensus is so overwhelming that
    destroying silos is a good thing, Why am I writing this piece? First, let’s take
    a look at what a silo is
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你搜索 [silos DevOps](https://www.google.com/search?q=silos+devops&oq=silos+devops)，排在最前面的页面上充满了许多告诉你必须摧毁筒仓的文章。事实上，在排在最前面的页面上只有
    [一篇文章](https://polarsquad.com/blog/how-i-stopped-wanting-to-break-silos-and-why)
    说出了不同的看法！那么，如果共识如此压倒性地认为摧毁筒仓是一件好事，为什么我要写这篇文章呢？首先，让我们来看看筒仓是什么。
- en: We use the word silo to refer to teams that are too isolated. These departments
    have no visibility of what’s going on with other teams; communication is minimal
    or non-existent, and naturally, they operate in a way that feels detached from
    the organization's goals or the needs of the teams that they should be aiming
    to serve.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用“筒仓”这个词来指代过于孤立的团队。这些部门对其他团队的情况一无所知；沟通很少或根本没有，自然地，它们的运作方式与组织的目标或它们应该服务的团队的需求感觉脱节。
- en: Destroying silos is a bad angle because you often end up merging various domains
    and responsibilities in a single team and creating significant cognitive load.
    Using teams as discrete and small units of delivery is preferable; it is the way
    that teams are separated and how they communicate that needs to be tackled.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 摧毁筒仓是一个糟糕的角度，因为你常常会将各种领域和责任合并到一个团队中，从而造成巨大的认知负担。将团队作为离散且小型的交付单位更为可取；需要解决的是团队是如何分离以及它们之间的交流方式。
- en: The problem with the DevOps movement is that it ended up taking “shifting left”
    to the extreme. In this sense, development teams weren’t so much empowered to
    deliver software faster; rather, they were over-encumbered with infrastructure
    tasks that were outside of their expertise.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 运动的问题在于它把“向左移动”的力度推到了极致。从这个意义上说，开发团队并不是被赋予了更快地交付软件的权力；相反，他们被过度拖累了超出他们专业范围之外的基础设施任务。
- en: 'This way of destroying silos is summarized in one of the [top articles](https://orangematter.solarwinds.com/2018/08/09/how-to-eliminate-silos-using-devops/)
    in my Google search:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这种摧毁筒仓的方式总结在我 Google 搜索中的一篇 [顶部文章](https://orangematter.solarwinds.com/2018/08/09/how-to-eliminate-silos-using-devops/)
    中：
- en: '*“The first function of DevOps implementation is to get operations and development
    groups working together as two areas of specialization that form a complete team”*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*“DevOps 实施的第一个功能是使运维和开发团队作为形成完整团队的两个专业领域进行合作”*'
- en: This “merging of two teams” sounds like a bad idea because the larger a team
    is, the more sluggish it becomes as trust breaks down and domains and responsibilities
    multiply. Teams should be small, with a single domain of responsibility for maximum
    agility. Team structure should also reflect the software architecture to maximize
    the effects of Conway's law.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这种“合并两个团队”的想法听起来像是一个坏主意，因为团队越大，信任就会瓦解，领域和责任会增多，团队就会变得越迟钝。团队应该是小型的，拥有单一的责任领域，以实现最大的敏捷性。团队结构也应该反映软件架构，以最大化康威定律的效果。
- en: '[Another suggestion](https://www.damcogroup.com/blogs/breaking-down-silos-in-software-product-engineering)
    to destroy silos found online is to create cross-functional teams. This is certainly
    better and desirable, but there is a small caveat. If your company is small to
    medium size with only a few teams, you may get away with using PaaS and SaaS tools
    that reduce the infrastructure complexity and give ease of use for operational
    tasks, but this becomes difficult to achieve as organizations get very large and
    have complex requirements. In this case, you will need to have a dedicated, product-driven
    platform teams that create an internal developer platform for your teams to be
    able to self-serve their infrastructure teams in standard, secure and compliant
    ways.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[另一个建议](https://www.damcogroup.com/blogs/breaking-down-silos-in-software-product-engineering)来自网上摧毁孤立体系的建议是创建跨职能团队。这无疑是更好和可取的，但有一个小问题。如果您的公司规模较小，只有几个团队，您可能可以使用减少基础设施复杂性并为操作任务提供易用性的
    PaaS 和 SaaS 工具，但随着组织规模变得非常大并且具有复杂的需求，这变得难以实现。在这种情况下，您需要有一个专门的、以产品为驱动的平台团队，为您的团队创建一个内部开发者平台，以标准、安全和符合要求的方式自助服务其基础设施团队。'
- en: 'Kelsey Hightower said something that echoed my feelings on [this interview](https://youtu.be/hD7HlWbmVqI):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Kelsey Hightower 在[这次采访](https://youtu.be/hD7HlWbmVqI)中说了一些与我对此的感受相呼应的话：
- en: “Silos are fine as long as there is an API between them”
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: “只要它们之间有 API，孤立体系就没问题”
- en: That is the best possible summary you can give to this entire post. Indeed,
    the best way to have inter-team communication in large organizations is not talking
    to each other all the time; it’s creating work that can speak for itself.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您对整篇文章给出的最好总结。确实，在大型组织中进行团队间沟通的最佳方式不是一直彼此交谈；而是创造可以为自己说话的工作。
- en: This usually takes the form of an API that’s intuitive, easy to use, and treating
    other teams as your valued users and customers. An API abstracts away your domain
    for other teams to focus on their expertise rather than being overloaded with
    infrastructure, compliance and other intricacies that slow down software delivery.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通常以直观、易于使用并将其他团队视为您的重要用户和客户的 API 形式出现。 API 为其他团队提供了您领域的抽象，使他们可以专注于自己的专业知识，而不是被基础设施、合规性和其他使软件交付变慢的复杂性所压倒。
- en: So in that sense, DevOps should NOT be about destroying silos, but about turning
    teams into self-service bars where they serve their domain expertise to other
    teams with an API, library, or other form of work that can be easily and intuitively
    consumed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这种意义上，DevOps 不应该是关于摧毁孤立体系，而应该是将团队转变为能够以 API、库或其他形式轻松直观地消费的工作形式，为其他团队提供领域专业知识的自助酒吧。
- en: The communication between teams is done via elegant user experience and by treating
    your teams as customers. As opposed to inter-team communication by meetings, Slack,
    or even [relying too heavily on documentation](https://nandovillalba.medium.com/platform-engineering-please-kill-rtfm-72de6f01075e).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 团队之间的沟通通过优雅的用户体验和将团队视为客户来进行。与会议、Slack，甚至[过度依赖文档](https://nandovillalba.medium.com/platform-engineering-please-kill-rtfm-72de6f01075e)的团队间沟通相反。
- en: Two teams can collaborate as one to achieve a common goal or to understand each
    other’s needs better, but usually this is temporary until the teams are able to
    deliver their domain expertise as a service to speed up delivery.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 两个团队可以合作成为一个团队以实现共同目标或更好地理解彼此的需求，但通常这只是暂时的，直到团队能够将自己的领域专业知识作为服务交付以加快交付速度为止。
- en: It is desirable for a developer team to be able to deploy and operate their
    own software, and it is also preferable for them to be able to create their own
    infrastructure; what’s not very productive is to task developers with onerous
    infrastructure chores to get there.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发团队而言，他们能够部署和操作自己的软件是可取的，他们也能够创建自己的基础设施更好；而让开发人员承担繁重的基础设施任务并不是很高效的。
- en: In that sense, giving an AWS account with admin permissions is just not enough;
    AWS is very complex to use, and even if your team has one or two experts that
    can do it, it takes a lot of time and effort to implement, and how do you ensure
    that it remains consistent and compliant with the rest of the organization?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种意义上，仅仅给予具有管理员权限的 AWS 账户是不够的；AWS 非常复杂，即使您的团队有一两位专家可以处理，也需要大量时间和精力来实现，那么您如何确保它保持一致并符合组织的其余部分呢？
- en: This is why it is desirable to have a segmentation of domains where a platform
    team is able to provide an API or tool with self-service capabilities for developer
    teams. In small companies, this may take the shape of using a PaaS or a smaller,
    simpler cloud provider; in big companies, it will take the shape of product-driven
    platform teams implementing an internal developer platform.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么希望在领域划分中有一个平台团队能够为开发团队提供具有自助服务能力的API或工具。在小公司中，这可能采用PaaS或更小、更简单的云提供商；在大公司中，产品驱动的平台团队实施内部开发者平台。
- en: 'Communication is not about every team talking all the time, which just slows
    things down; it’s about creating channels of communication via self-service tooling
    that speaks for itself, or as Manual Pais and Matthew Skelton put it in their
    phenomenal Team Topologies book:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通信不是指每个团队一直交谈，这只会减慢事务进程；它是通过自助服务工具来创建通信渠道，这些工具能够自我表达，或者正如Manual Pais和Matthew
    Skelton在他们出色的《团队拓扑》一书中所说的那样：
- en: If, logically, two teams shouldn’t need to communicate based on the software
    architecture design, then something must be wrong if the teams are communicating.
    Is the API not good enough? Is the platform not suitable? Is a component missing?
    If we can achieve low-bandwidth communication—or even zero-bandwidth communication—between
    teams and still build and release software in a safe, effective, rapid way, then
    we should.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从逻辑上讲，两个团队根据软件架构设计不需要进行通信，那么如果团队进行了通信，肯定是有问题的。API是否不够好？平台是否不合适？是否缺少某个组件？如果我们能在团队之间实现低带宽甚至零带宽的通信，并且仍能安全、有效、快速地构建和发布软件，那我们就应该这样做。
- en: 'And also:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 还有：
- en: “Flow is difficult to achieve when each team depends on a complicated web of
    interactions with many other teams”
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: “当每个团队依赖于与许多其他团队的复杂交互时，流动性很难实现”
- en: When a team uses another team’s API, there is a communication happening there,
    but this is done via design and user experience, not by talking. In this scenario,
    the self-service interaction is much faster and more conducive to flow state than
    many teams talking to each other all the time to get the job done.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个团队使用另一个团队的API时，这里存在一种通过设计和用户体验进行的交流，而不是口头交流。在这种情况下，自助服务的互动比许多团队一直互相交流更快，更有助于进入工作流状态。
- en: 'Close collaboration (more talking, more meetings, more slack and sharing of
    documents) between two teams can happen at discovery phase or during periods of
    big change and innovation, but once the needs to a development teams become more
    predictable, then team collaboration evolves into X-as-service as shown in the
    graph below from the book [Team Topologies](https://www.amazon.co.uk/Team-Topologies-Organizing-Business-Technology/dp/1942788819):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在发现阶段或在大变革和创新期间，两个团队之间可以进行紧密协作（更多交流、更多会议、更多闲聊和文档共享），但一旦开发团队的需求变得更加可预测，团队协作就会演变为下图中《团队拓扑》一书展示的服务提供形式：
- en: From close collaboration to team providing a service
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从密切协作到团队提供服务
- en: But it is worth noting that this scenario is generally temporary as it significantly
    slows down the pace of delivery and puts a strain on cognitive load on both teams.
    This is also different from merging two teams together as both teams remain independent.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 但值得注意的是，这种情况通常是暂时的，因为它显著减慢了交付速度，并给两个团队的认知负担带来了压力。这也不同于将两个团队合并，因为两个团队仍然保持独立。
- en: 'Platform engineering has a lot of marketing driven buzz these days and it is
    becoming the hot topic. While I understand that people get tired of hearing these
    things, there is one thing I like about it, the focus is on turning the silo into
    a sushi bar, not destroying the silo:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 平台工程在今天有很多由市场推动的热门话题，它正变得越来越受关注。虽然我明白人们厌倦听这些事情，但我喜欢的一点是，它的重点是将信息孤岛变成寿司吧，而不是摧毁信息孤岛：
- en: The problem with platform engineering and designing solutions in this way for
    teams to work together is that it is harder than just throwing a script or writing
    a how to document for other teams to use. And to be fair, the amount of tools
    available to make the task easier are scarce. Recently Microsoft has released
    an open source tool called [Radius](https://techcommunity.microsoft.com/t5/educator-developer-blog/introducing-radius-a-new-open-source-project-for-teams-building/ba-p/3976183)
    that promises to make it easy to deliver self service infrastructure and cloud
    native apps for developers, and there are multiple([CNOE](https://cnoe.io/), [platform
    whitepaper](https://tag-app-delivery.cncf.io/whitepapers/platforms/)) open source
    blueprints on how to make internal developer platforms, but the work involved
    is still very significant and daunting for most organizations.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这种方式进行平台工程和设计解决方案以便团队协作的问题在于，这比仅仅为其他团队编写脚本或编写使用说明文档要困难得多。公认的是，用于简化任务的工具数量有限。最近，微软发布了一个名为[Radius](https://techcommunity.microsoft.com/t5/educator-developer-blog/introducing-radius-a-new-open-source-project-for-teams-building/ba-p/3976183)的开源工具，承诺为开发人员提供交付自助服务基础设施和云原生应用的便利，并且有多个（[CNOE](https://cnoe.io/)，[平台白皮书](https://tag-app-delivery.cncf.io/whitepapers/platforms/)）开源蓝图可用于制作内部开发人员平台，但是对于大多数组织来说，所涉及的工作仍然非常重要和令人望而生畏。
- en: Destroying silos should be more about turning them into self-service stream-aligned
    teams than it is about destroying them. Team segmentation is desirable, it reduces
    cognitive load, it maximizes focus and enables easier flow state. When creating
    small teams organized by domain and in a way that mirrors the software architecture,
    the delivery of software will be faster and more effective. In order to achieve
    this, teams must understand [what great user experience means](https://nandovillalba.medium.com/ux-on-platform-engineering-1c7ecfaddea7)
    and treat other teams and colleagues as their customers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 破坏信息孤岛应该更多地转变为自助式流程对齐团队，而不是破坏它们。团队分割是可取的，它减少认知负荷，最大化关注并实现更轻松的流动状态。通过按域组织的小团队，并以与软件架构相似的方式组织，软件的交付将更快且更有效。为了实现这一目标，团队必须理解[优秀用户体验的含义](https://nandovillalba.medium.com/ux-on-platform-engineering-1c7ecfaddea7)，并将其他团队和同事视为他们的客户。
- en: Reading about DevOps and destroying silos from the articles on the top search
    results in Google is a little underwhelming as most of them are a little fluffy
    and marketingy. In order to understand team collaboration and team dynamics better,
    I strongly recommend a careful read of the Team Topologies book, it brilliantly
    describes all team categories, types of interaction and how you should organize
    them according to Conway’s law.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读谷歌搜索结果中排名靠前的关于DevOps和破坏信息孤岛的文章，会感到有些令人失望，因为大多数文章都有点空洞和营销性质。为了更好地理解团队协作和团队动态，我强烈建议仔细阅读《团队拓扑》一书，它精彩地描述了所有团队类别、交互类型以及根据康威定律如何组织它们。
- en: Fernando Villalba has over a decade of miscellaneous IT experience. He started
    in IT support ("Have you tried turning it on and off?"), veered to become a SysAdmin
    ("Don't you dare turn it off") and later segued into DevOps type of roles ("Destroy
    and replace!"). He has been a consultant for various multi-billion dollar organizations
    helping them achieve their highest potential with their DevOps processes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 费尔南多·维拉尔巴在IT领域有超过十年的各种经验。他从IT支持开始（“你试过关掉再打开吗？”），然后转向成为系统管理员（“你敢关掉我就敢找你麻烦”），后来进入了DevOps类型的角色（“破坏并替换！”）。他曾是各种市值数十亿美元的组织的顾问，帮助它们通过DevOps流程实现最高潜力。
- en: Follow Fernando Villalba in **[LinkedIn](https://www.linkedin.com/in/nandoit/)**
    or **[Twitter](https://twitter.com/nandoyum)**
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 关注费尔南多·维拉尔巴的**[LinkedIn](https://www.linkedin.com/in/nandoit/)**或**[Twitter](https://twitter.com/nandoyum)**
