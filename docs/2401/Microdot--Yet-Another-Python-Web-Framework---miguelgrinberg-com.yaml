- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:24:04'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月27日14:24:04
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Microdot: Yet Another Python Web Framework - miguelgrinberg.com'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Microdot：另一个Python Web框架 - miguelgrinberg.com
- en: 来源：[https://blog.miguelgrinberg.com/post/microdot-yet-another-python-web-framework](https://blog.miguelgrinberg.com/post/microdot-yet-another-python-web-framework)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.miguelgrinberg.com/post/microdot-yet-another-python-web-framework](https://blog.miguelgrinberg.com/post/microdot-yet-another-python-web-framework)
- en: I just realized that I have never written on this blog about [Microdot](https://github.com/miguelgrinberg/microdot),
    my very own web framework for Python. I have released Microdot 2.0 a few days
    ago, so I guess this is a good time to make a belated announcement, and tell you
    why this world needs yet another Python web framework.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我刚意识到我从未在这个博客上写过关于[Microdot](https://github.com/miguelgrinberg/microdot)，我的自己的Python
    Web框架。我几天前发布了Microdot 2.0，所以我想现在是一个很好的时机来做一个迟到的公告，并告诉你为什么这个世界需要另一个Python Web框架。
- en: 'But before I tell you about the reasons and the history of Microdot, let me
    share some of its features:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我告诉你关于Microdot的原因和历史之前，让我分享一些它的特点：
- en: Flask-like syntax, but without the magical/obscure parts (no application/request
    contexts)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似于Flask的语法，但没有神奇/晦涩的部分（没有应用程序/请求上下文）
- en: Small enough to work with MicroPython, while also being compatible with CPython
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大到足以与MicroPython一起工作，同时也与CPython兼容
- en: Fully compatible with asyncio
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与asyncio完全兼容
- en: Websocket support
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Websocket
- en: Server-Sent Events (SSE) support
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持服务器发送事件（SSE）
- en: Templating support with Jinja (CPython) and uTemplate (MicroPython)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jinja（CPython）和uTemplate（MicroPython）进行模板支持
- en: Cross-Origin Request Sharing (CORS) support
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持跨域请求共享（CORS）
- en: User sessions stored on cryptographically signed cookies
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户会话存储在加密签名的Cookie中
- en: Uses its own minimal web server on MicroPython, and integrates with any ASGI
    or WSGI web servers on CPython
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MicroPython上使用自己的最小Web服务器，并与CPython上的任何ASGI或WSGI Web服务器集成
- en: Included test client to use in unit tests
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含测试客户端用于单元测试
- en: Interested? Keep reading to learn more about Microdot.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣吗？继续阅读了解更多关于Microdot的信息。
- en: Why Microdot
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么Microdot
- en: Back in 2019, I was working on a hardware project based on the ESP8266 microcontroller.
    For the software portion of this project I used [MicroPython](https://micropython.org/),
    an alternative implementation of the Python language that is designed for small
    devices.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 回到2019年，我正在基于ESP8266微控制器的硬件项目上工作。对于这个项目的软件部分，我使用了[MicroPython](https://micropython.org/)，这是Python语言的一种替代实现，专为小型设备设计。
- en: I wanted to host a small web-based interface on the device, and to my surprise
    I could not find any usable web frameworks. Things such as Flask or Bottle do
    not work under MicroPython because they are too big for it. The only MicroPython
    web framework I could find was one called "picoweb", which required an unofficial
    fork of the MicroPython language, which to me was a deal breaker.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我想在设备上托管一个小型基于Web的界面，但令我惊讶的是，我找不到任何可用的Web框架。诸如Flask或Bottle之类的东西在MicroPython下不起作用，因为它们对它来说太大了。我能找到的唯一一个MicroPython
    Web框架叫做“picoweb”，它需要一个非官方的MicroPython语言分支，对我来说是个硬伤。
- en: Microdot was born out of needing to have a web framework that was as close as
    possible to Flask, but designed to run on an official and actively maintained
    version of MicroPython.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Microdot的诞生源于需要一个尽可能接近Flask的Web框架，但设计用于官方和积极维护的MicroPython版本。
- en: 'I ended up creating Microdot, and used it to complete my project. I also put
    the source code on GitHub, since it was obvious to me that there was a hole in
    the MicroPython ecosystem in terms of web frameworks. While it has received growing
    attention from hardware inclined developers, it managed to stay below the radar
    for a lot of people in the Python community for almost 5 years now. Here is a
    timeline of the major events in Microdot''s history:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我最终创建了Microdot，并用它完成了我的项目。我还将源代码放在GitHub上，因为对我来说很明显MicroPython生态系统在Web框架方面存在空白。虽然它受到了硬件倾向开发者越来越多的关注，但在Python社区的很多人眼中，它几乎在过去的5年里一直处于低调状态。以下是Microdot历史上的主要事件时间表：
- en: '| Date | Event |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 日期 | 事件 |'
- en: '| --- | --- |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| April 2019 | Microdot 0.1, first public release |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 2019年4月 | Microdot 0.1，首次公开发布 |'
- en: '| August 2022 | Microdot 1.0, with a synchronous base implementation and an
    asyncio extension |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 2022年8月 | Microdot 1.0，具有同步基础实现和异步扩展 |'
- en: '| December 2023 | Microdot 2.0, redesigned as 100% asynchronous |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 2023年12月 | Microdot 2.0，重设计为100％异步 |'
- en: How Does Microdot Code Look Like?
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Microdot代码是什么样子？
- en: 'Microdot is actually very similar to Flask. You write web routes as decorated
    functions:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Microdot 实际上与 Flask 非常相似。你可以将 Web 路由写成装饰函数：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `@app.get` decorator is used to define GET requests. There are similar decorators
    for POST, PATCH, PUT and DELETE. Like Flask, Microdot handles OPTIONS and HEAD
    requests automatically.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`@app.get` 装饰器用于定义 GET 请求。类似的装饰器也适用于 POST、PATCH、PUT 和 DELETE。像 Flask 一样，Microdot
    自动处理 OPTIONS 和 HEAD 请求。'
- en: Microdot 2 is asynchronous, so it is best to write handler functions as `async
    def` functions. Under CPython, regular `def` functions execute in a thread executor
    (like FastAPI), but most hardware devices that run MicroPython lack threading
    support, so regular functions on that platform just block for as long as they
    run.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Microdot 2 是异步的，所以最好将处理程序函数编写为 `async def` 函数。在 CPython 中，常规的 `def` 函数在线程执行器中执行（就像
    FastAPI 一样），但是大多数运行 MicroPython 的硬件设备缺乏线程支持，因此在该平台上的常规函数只会阻塞它们运行的时间。
- en: One aspect in Flask that I do not like is the use of application and request
    contexts, as these add an unnecessary layer of complexity. I did not want to have
    that, so request handler functions in Microdot just receive a request object as
    a first positional argument.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 中有一个我不喜欢的方面是应用程序和请求上下文的使用，因为这些增加了不必要的复杂性。我不想要那个，所以 Microdot 中的请求处理程序函数只是接收一个请求对象作为第一个位置参数。
- en: As with Flask, the return value from a handler function is the response, and
    Microdot automatically formats the response as JSON if a dictionary is returned.
    It also supports second and third returned values for custom status code and headers.
    Microdot also copies the way streamed responses work in Flask with the use of
    generators, and also supports asynchronous generators.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Flask 一样，处理程序函数的返回值是响应，如果返回的是字典，Microdot 会自动将响应格式化为 JSON。它还支持自定义状态码和标头的第二和第三个返回值。Microdot
    还通过使用生成器复制了 Flask 中流式响应的工作方式，并且还支持异步生成器。
- en: 'I like the functionality offered by Blueprints in Flask, but here once again
    I feel Flask makes everything too complicated. In Microdot, you can create multiple
    application instances and use the `mount()` method to combine them:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢 Flask 中蓝图提供的功能，但在这里我再次感到 Flask 使一切都变得太复杂了。在 Microdot 中，你可以创建多个应用程序实例并使用
    `mount()` 方法将它们组合起来：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Microdot has native support for WebSocket and Server-Sent Events. Here are
    example endpoints that use these features:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Microdot 原生支持 WebSocket 和服务器发送事件。以下是使用这些功能的示例端点：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Hopefully there is nothing mysterious or magical in this code and you can understand
    it fully just from reading it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这段代码中没有什么神秘或奇幻的东西，你可以完全理解它只是阅读它。
- en: If you want to render HTML templates, Microdot can use Jinja or uTemplate, the
    latter being the main (only?) templating library available for MicroPython. Templates
    can be rendered synchronously (blocking the asyncio loop) or asynchronously. For
    larger templates it is best to use the async interface as that improves concurrency.
    Templates can also be streamed as regular or asynchronous generators, one more
    way to improve performance and concurrency.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要渲染 HTML 模板，Microdot 可以使用 Jinja 或 uTemplate，后者是 MicroPython 中主要（唯一？）可用的模板库。模板可以同步（阻塞
    asyncio 循环）或异步地渲染。对于较大的模板，最好使用异步接口，因为这样可以提高并发性。模板还可以作为常规或异步生成器进行流式传输，这是提高性能和并发性的另一种方式。
- en: User sessions are implemented in a way that is also similar to Flask, but I
    decided to write user sessions as [JWTs](https://en.wikipedia.org/wiki/JSON_Web_Token),
    which are fairly easy to [debug](https://jwt.io/).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 用户会话的实现方式与 Flask 类似，但我决定将用户会话编写为 [JWTs](https://en.wikipedia.org/wiki/JSON_Web_Token)，这在
    [debug](https://jwt.io/) 方面相当容易。
- en: If you want to learn more about Microdot's features, I have written [documentation](https://microdot.readthedocs.io/en/stable/)
    for it. I also offer a nice collection of [examples](https://github.com/miguelgrinberg/microdot/tree/main/examples)
    in the GitHub repository.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 Microdot 的功能，我为它编写了 [文档](https://microdot.readthedocs.io/en/stable/)。我还在
    GitHub 仓库中提供了一个不错的 [示例集合](https://github.com/miguelgrinberg/microdot/tree/main/examples)。
- en: How Small is Microdot?
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Microdot 有多小？
- en: This is not a straightforward question to answer, because unlike Flask, FastAPI
    and most other frameworks, Microdot has a modular structure, so there are a number
    of different configurations that can be measured depending on what features are
    used. When working with CPython this is not very important, but for MicroPython
    projects running on microcontrollers it is useful to be able to pick and choose
    exactly what you need and drop the parts that you don't.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个直接的问题，因为与 Flask、FastAPI 和大多数其他框架不同，Microdot 采用模块化结构，因此可以根据使用的功能来测量许多不同的配置。在使用
    CPython 时，这并不重要，但对于在微控制器上运行的 MicroPython 项目，能够精确选择所需的内容并丢弃不需要的部分是有用的。
- en: 'The core Microdot framework comes in a single *microdot.py* Python source file.
    Below I used the [cloc](https://github.com/AlDanial/cloc) utility to count how
    many lines of code the current version of this file has:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 核心 Microdot 框架以一个名为 *microdot.py* 的 Python 源文件形式呈现。下面我使用 [cloc](https://github.com/AlDanial/cloc)
    实用程序来计算当前版本的此文件有多少行代码：
- en: '|  | files | blank | comment | code |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '|  | 文件 | 空白 | 注释 | 代码 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Microdot 2.0.1 (minimal) | 1 | 216 | 456 | 728 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| Microdot 2.0.1（最小版） | 1 | 216 | 456 | 728 |'
- en: 'Next I calculated the full Microdot configuration for the same version, including
    all of its features:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我计算了相同版本的完整 Microdot 配置，包括其所有功能：
- en: '|  | files | blank | comment | code |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '|  | 文件 | 空白 | 注释 | 代码 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Microdot 2.0.1 (full) | 11 | 435 | 759 | 1577 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| Microdot 2.0.1（完整版） | 11 | 435 | 759 | 1577 |'
- en: Just so that you have an idea of how small this is, let's see how big Flask
    and FastAPI are. To make this a more consistent comparison, I've included Werkzeug
    with Flask, and Starlette with FastAPI.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了让你了解这有多小，我们来看看 Flask 和 FastAPI 有多大。为了使比较更一致，我将 Werkzeug 与 Flask 一起使用，并将
    Starlette 与 FastAPI 一起使用。
- en: '|  | files | blank | comment | code |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '|  | 文件 | 空白 | 注释 | 代码 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Flask 3.0.0 | 24 | 1775 | 3211 | 3854 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| Flask 3.0.0 | 24 | 1775 | 3211 | 3854 |'
- en: '| Werkzeug 3.0.1 | 59 | 4043 | 5634 | 11704 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| Werkzeug 3.0.1 | 59 | 4043 | 5634 | 11704 |'
- en: '| Total | 83 | 5818 | 8845 | 15558 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 总计 | 83 | 5818 | 8845 | 15558 |'
- en: '|  | files | blank | comment | code |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '|  | 文件 | 空白 | 注释 | 代码 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| FastAPI 0.106.0 | 40 | 2052 | 5884 | 9839 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| FastAPI 0.106.0 | 40 | 2052 | 5884 | 9839 |'
- en: '| Starlette 0.27.0 | 34 | 1008 | 477 | 4969 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| Starlette 0.27.0 | 34 | 1008 | 477 | 4969 |'
- en: '| Total | 74 | 3060 | 6361 | 14808 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 总计 | 74 | 3060 | 6361 | 14808 |'
- en: From this you can see that both Flask and FastAPI, when combined with their
    main supporting dependency have about 15K lines of code each, while Microdot has
    1.5K or roughly 10% of the size of its bigger competitors (or 5% if you only need
    basic web routing features).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里你可以看到，Flask 和 FastAPI 都与它们的主要支持依赖项结合使用，每个约有 15K 行代码，而 Microdot 有 1.5K 行，大约是其较大竞争对手的
    10%（如果你只需要基本的 Web 路由功能，则为 5%）。
- en: Since I'm counting Werkzeug and Starlette as part of Flask and FastAPI respectively,
    you may be curious about what third-party dependencies Microdot relies on, and
    if there are any big ones. The single-file minimal version does not require any
    dependencies at all, and it even includes its own web server. Some of the optional
    features do require third-party dependencies, and this is comparable to the larger
    frameworks. Like Flask, you will need to add a templating library (Jinja or uTemplate)
    to use templates. For user sessions, Microdot relies on PyJWT, while Flask uses
    its own Itsdangerous package.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我将 Werkzeug 和 Starlette 视为 Flask 和 FastAPI 的一部分，你可能会对 Microdot 依赖的第三方依赖关系以及是否有大型依赖关系感到好奇。单文件最小版本根本不需要任何依赖项，甚至包含自己的
    Web 服务器。一些可选功能确实需要第三方依赖项，这与较大的框架相比较。与 Flask 一样，你需要添加一个模板库（Jinja 或 uTemplate）来使用模板。对于用户会话，Microdot
    依赖于 PyJWT，而 Flask 则使用其自己的 Itsdangerous 包。
- en: Should I Switch to Microdot?
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我应该切换到 Microdot 吗？
- en: For a MicroPython project I think Microdot is a great framework to use, even
    though there are now a couple others that did not exist back in 2019.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个 MicroPython 项目，我认为 Microdot 是一个很好的框架选择，尽管现在有一些在 2019 年并不存在的其他框架。
- en: If you are using CPython you are certainly welcome to switch if you want to,
    but my recommendation would be to stay with your current web framework if you
    are happy with it. A good reason to switch would be if you want to make better
    use of your server's resources. It's really hard to make predictions, but depending
    on the project you may be able to fit an extra web server worker or two on the
    same hardware, just from RAM savings after switching from a larger framework to
    Microdot. But as I said, I wouldn't go through the pain of a migration unless
    size is very important to you.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用CPython，你当然可以随意转换，但我建议如果你对当前的Web框架感到满意，最好还是保持不变。如果你想更好地利用服务器资源，换一个好的理由是很难做出预测，但根据项目的不同，你可能会在相同的硬件上装载一个或两个额外的Web服务器工作进程，只需从一个更大的框架切换到Microdot后节省RAM。但正如我所说的，除非对你来说大小非常重要，否则我不会去经历迁移的痛苦。
- en: What I would like to ask is that you keep Microdot in mind for when you start
    a new project. If you end up using it, I would like to know how it works for you,
    so please reach out!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要问的是，在你开始一个新项目时，请记住Microdot。如果你最终使用了它，我想知道它对你有什么作用，所以请联系我！
