- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:15:56'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:15:56
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Nick's blog / No more magic, please!
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尼克的博客/请不要再用魔法了！
- en: 来源：[https://nickgeorge.net/nomagic/](https://nickgeorge.net/nomagic/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://nickgeorge.net/nomagic/](https://nickgeorge.net/nomagic/)
- en: I’m learning that modern (web?) programming is a balance between configuring
    tools/services and writing your application’s code. The further I get into studying
    deployments/DevOps methods the more surprised I am that the [balance has shifted](https://vickiboykis.com/2022/12/05/the-cloudy-layers-of-modern-day-programming/)
    rather strongly towards configuring tools from third party infrastructure vendors
    and away from what most would call software engineering^(. Why is there such a
    strong preference for “one step app deployment”, no infrastructure knowledge required?)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在学习现代（Web？）编程是在配置工具/服务和编写应用程序代码之间取得平衡。我越深入研究部署/DevOps方法，我就越惊讶于[平衡已经发生了变化](https://vickiboykis.com/2022/12/05/the-cloudy-layers-of-modern-day-programming/)，而且相当强烈地倾向于从第三方基础设施供应商那里配置工具，而远离大多数人称之为软件工程的内容。（为什么要如此强烈地偏好“一键式应用部署”，不需要任何基础设施知识？）
- en: The obvious answer is because it is easier. We like using high level frameworks
    to get something pretty in front of users quickly, and most of us aren’t interested
    (or claim we don’t have time to be interested) in the underlying infrastructure
    or how it all works.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 显而易见的答案是因为它更容易。我们喜欢使用高级框架，快速将一些漂亮的东西展示给用户，而大多数人都对基础设施或它的工作原理不感兴趣（或声称自己没有时间感兴趣）。
- en: Infrastructure ^(also has a bad reputation. I’ve also read about untold drudgery
    and headaches from the days of configuring or hosting your own web servers and
    databases. You have to think of IP addresses and DNS, SSL certificates, Linux
    distribution updates, security, and on and on. Handing off the complexity is obviously
    something many (most?) are happy to pay for.)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施^(也有不好的口碑。我也读到过配置或托管自己的网络服务器和数据库的日子里，存在着无数的苦差事和头痛。你必须考虑IP地址和DNS、SSL证书、Linux发行版更新、安全性等等。显然，许多人（大多数人？）很乐意付费以摆脱这种复杂性。)
- en: But I’m not from around here– I came to programming and infrastructure from
    biomedical science, so I’m learning about how lucky I am second hand and dutifully
    searching stackoverflow and blogs for the magic incantation for enabling SSL for
    postgres in platform X’s new V2 {app/spec/beanstalk/fly}.yaml file^.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我不是本地人-我是从生物医学科学转到编程和基础设施的，所以我第二手了解到我是多么幸运，并且虔诚地在stackoverflow和博客上搜索着关于在平台X的新V2
    {app/spec/beanstalk/fly}.yaml文件中为postgres启用SSL的魔法咒语^。
- en: After troubleshooting a database connection for yet another vendor specific
    yaml file format and realizing the problem was a disagreement in how environmental
    variables were specified, I stepped back and thought about *what I was actually
    learning* in this process, and whether *I* was getting significant value from
    using PaaS providers without understanding what they’re actually doing for me.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在排除另一个特定供应商yaml文件格式的数据库连接问题后，我意识到问题是环境变量的规范存在分歧，于是我退后一步，思考了在这个过程中我实际学到了什么，以及使用PaaS提供商而不了解他们到底为我做了什么，我是否从中获得了重要价值。
- en: ''
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If I am working on a personal project and I spend a day figuring out how to
    configure a not-on-the-happy-path ^(option in a vendor specific yaml format, was
    that time well spent?)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我在进行个人项目，并花费一天时间来弄清楚如何配置供应商特定yaml格式中的一个不在快速路径上的选项，这段时间花得值得吗？
- en: For me the answer is no. I’ve just “learned” something that isn’t portable and
    doesn’t necessarily have any relation to what is really going on with that essential
    infrastructure^(. *If I had to start over on a new platform, I’d have to spend
    that time again*.)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，答案是否定的。我刚刚“学到”了一些并不可移植的东西，也不一定与那些基本基础设施的真实情况有任何关系。*如果我不得不从头开始在一个新平台上重新开始，我将不得不再次花费那么多时间。*
- en: I remember studying for my AWS Developer Associate exam and feeling like I was
    actually studying to be an unpaid AWS salesman/developer advocate– always ready
    with a new AWS product or product combo for every problem. It didn’t feel productive,
    or like I was actually learning anything that I could build on outside the AWS
    walled garden. While learning to use something someone else owns is sometimes
    necessary, it certainly isn’t intellectually rewarding. As a rule, I’d like to
    minimize the time I spend on non-portable or product focused skills.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得为我的AWS开发者认证考试而学习时，感觉自己实际上是在学习成为一名未付费的AWS推销员/开发者倡导者，总是随时准备为每个问题提供新的AWS产品或产品组合。这感觉不太有效率，也不像我真正学到了可以在AWS围墙外建立的任何东西。虽然学会使用别人拥有的东西有时是必要的，但这绝对不是智力上的奖励。作为一项规则，我希望尽量减少我花在不可移植或产品化技能上的时间。
- en: More importantly, I realized that if I don’t at least have an *understanding*
    of “the hard way” or the default/base case, how can I judge whether these products
    are a good deal or actually make my life easier? There is a difference between
    something being difficult because it is unfamiliar and something being difficult
    due to inherent complexity^.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，我意识到如果我至少不了解“艰难的方式”或默认/基本情况，那么我怎么能判断这些产品是否划算或是否真的能让我的生活更轻松呢？不熟悉导致的困难与固有复杂性导致的困难是有区别的。
- en: 'So I decided to start “doing it myself” for my personal projects^(. Reading
    about the best practices for securing servers and databases, OS updates, logging,
    firewalls, deployment– all of it. Whenever I start to struggle with a superficially
    easy PaaS offering, I think: How would I do it if all I had was access to a virtual
    private server, or an actually private server in my bedroom? And sometimes I’ll
    try it^(^(. What I’m finding is that while this is a bit more work, it is also
    a lot more rewarding and fun! I know underneath all the yaml magic, there are
    real systems, and I’m starting to learn how they interact with one another and
    work. By peeling back the magic layers, I’m starting to acquire knowledge about
    the important parts, and I know the time I’m investing in these “fundamentals”
    will continue compounding and paying off throughout my career^(^.))))'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我决定开始“自己动手”处理我的个人项目。阅读关于保护服务器和数据库、操作系统更新、日志记录、防火墙、部署等最佳实践的文章。每当我开始与一个表面上简单的PaaS（平台即服务）提供商挣扎时，我会想：如果我只能访问一个虚拟专用服务器，或者是我卧室里的一个真正的私有服务器，我会怎么做？有时我会尝试一下。我发现，虽然这需要付出更多的工作，但也更有回报和乐趣！我知道在所有yaml魔法背后，有真实的系统，我开始学习它们如何相互作用和工作。通过揭开魔法层，我开始获取关于重要部分的知识，并且我知道我在这些“基础”上投资的时间将在我的职业生涯中持续增长和产生回报。
- en: ''
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This isn’t to say managed options are bad and should be avoided. But I firmly
    believe that if your career revolves around building these apps, you’d be a much
    better developer if you at least try to understand the “hard way” too. What are
    you being paid for anyways? Writing API’s is becoming so routine that AI bots
    can do it for you.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说托管选项不好，应该避免使用。但我坚信，如果你的职业围绕构建这些应用程序，那么如果你至少试着理解“艰难的方式”，你将成为一名更好的开发者。你到底是被付钱做什么的？编写API已经变得如此例行，以至于AI机器人可以为你做到。
- en: Your value add is your experience and judgment, and you can’t develop either
    of those if you’re always catching up to the new vendor’s yaml config format.
    Plus, I think it demystifies things and leads to better judgment when you do choose
    to use a PaaS. Most importantly, knowing and learning your tools makes it all
    a lot more fun.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你的附加价值是你的经验和判断力，如果你总是追赶新供应商的yaml配置格式，你就无法发展这两者。此外，我认为这样做可以揭示事物的神秘面，从而在你选择使用PaaS时导致更好的判断。最重要的是，了解和学习你的工具会让一切变得更有趣。
