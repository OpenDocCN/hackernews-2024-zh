- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:53:29'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:53:29
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: White space does matter in C23 – Jens Gustedt's Blog
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: White space does matter in C23 – Jens Gustedt's Blog
- en: 来源：[https://gustedt.wordpress.com/2024/01/16/white-space-does-matter-in-c23/](https://gustedt.wordpress.com/2024/01/16/white-space-does-matter-in-c23/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://gustedt.wordpress.com/2024/01/16/white-space-does-matter-in-c23/](https://gustedt.wordpress.com/2024/01/16/white-space-does-matter-in-c23/)
- en: Usually in C identifiers are not directly followed by strings. But when `U`
    prefixed literals were introduced in C. there still were some rare clashes with
    existing code. This happened were a macro `U` that expanded to a string was used
    to add some sort of leading character sequence to a string. Prior, this usage
    was not sensible to whether or not there was a space between the two. By introducing
    the prefix the two usages (with and without space) became distinct and code changed
    its meaning or became invalid. So for this situation, space is in fact already
    significant.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，在 C 中，标识符不会直接跟在字符串后面。但是当在 C 中引入 `U` 前缀的文字时，仍然存在一些与现有代码冲突的情况。这种情况发生在一个将
    `U` 宏扩展为字符串的宏被用来向字符串添加某种前导字符序列时。在此之前，这种用法对是否在两者之间有空格并不敏感。通过引入前缀，这两种用法（有空格和无空格）变得不同，代码的含义或变得无效。所以对于这种情况，空格实际上已经是有意义的。
- en: Generally, it is often assumed that in C spaces don’t contribute much to the
    interpretation of programming text, but for C23 this has become an over-simplification
    that does not reflect the situation anymore.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，人们经常假设在 C 中，空格对于解释编程文本并不起作用，但对于 C23 来说，这已经变成了一种过于简化的情况，不再反映实际情况。
- en: In addition to problems internal to C, there is a problem of interfacing with
    C++, where some of the rules are different.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 C 内部的问题之外，还存在与 C++ 接口的问题，其中一些规则是不同的。
- en: '| syntax | meaning, C23 | different meaning, C++ |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 语法 | 含义，C23 | 不同的含义，C++ |'
- en: '| --- | --- | --- |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `# define X(A)` | function like macro, empty |  |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `# define X(A)` | 函数宏，空 |  |'
- en: '| `# define X (A)` | object macro, expands to `(A)` |  |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `# define X (A)` | 对象宏，展开为 `(A)` |  |'
- en: '| `0x4''7''a` | hex number with digit separators |  |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `0x4''7''a` | 带有数字分隔符的十六进制数 |  |'
- en: '| `0x4 ''7''a` | number, character literal, and identifier | number, character
    literal with suffix |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `0x4 ''7''a` | 数字、字符字面量和标识符 | 带有后缀的数字、字符字面量 |'
- en: '| `0x4 ''7'' a` | number, character literal, and identifier |  |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `0x4 ''7'' a` | 数字、字符字面量和标识符 |  |'
- en: '| `"%" PRIx64` | valid format string for `printf` |  |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `"%" PRIx64` | `printf` 的有效格式字符串 |  |'
- en: '| `"%"PRIx64` | valid format string for `printf` | string literal with suffix
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `"%"PRIx64` | `printf` 的有效格式字符串 | 带有后缀的字符串字面量 |'
- en: '| `R "(hör)"` | identifier followed by multi-byte string |  |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `R "(hör)"` | 标识符后跟多字节字符串 |  |'
- en: '| `R"(hör)"` | identifier followed by multi-byte string | raw multi-byte string,
    contains just `hör` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `R"(hör)"` | 标识符后跟多字节字符串 | 原始多字节字符串，只包含 `hör` |'
- en: '| `R "hör"` | identifier followed by multi-byte string |  |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `R "hör"` | 标识符后跟多字节字符串 |  |'
- en: '| `R"hör"` | identifier followed by multi-byte string | invalid raw string
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `R"hör"` | 标识符后跟多字节字符串 | 无效的原始字符串 |'
- en: '| `U "hör"` | identifier, followed by multi-byte string |  |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `U "hör"` | 标识符，后跟多字节字符串 |  |'
- en: '| `U"hör"` | UTF-32 string |  |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `U"hör"` | UTF-32 字符串 |  |'
- en: It would be good if there could be some coordination here between C and C++
    about such simple questions concerning lexing and the preprocessor.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这样简单的有关词法分析和预处理器的问题，希望 C 和 C++ 之间能够有所协调。
- en: Any use of identifiers that are adjacent to character and string literals should
    be discouraged; I think that such constructs should just be excluded by the syntax.
    If we want this to be diagnosed it should be before compilation phase 4, in particular
    before macro expansion. Best would be if this is diagnosed in phase 3, lexing.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 应该避免使用与字符和字符串字面量相邻的标识符；我认为这样的结构应该被语法所排除。如果我们希望进行诊断，那么应该在编译阶段 4 之前进行，特别是在宏展开之前。最好在阶段
    3，即词法分析阶段进行诊断。
- en: Compilers and preprocessor implementations could start to warn about such possible
    collision immediately, as of today. I don’t see much of a reason to still allow
    it. Even where there are valid uses, such as for the `printf` format string macros,
    the code becomes much easier to read if these are separated from the surrounding
    format string.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器和预处理器的实现可以立即开始警告此类可能的冲突，就像今天一样。我不认为还有任何理由允许它。即使存在有效的用途，比如 `printf` 的格式字符串宏，如果将其与周围的格式字符串分开，代码读起来也容易得多。
