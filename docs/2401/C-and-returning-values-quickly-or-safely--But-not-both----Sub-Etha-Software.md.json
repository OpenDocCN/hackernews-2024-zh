["```\nint GetTheUltimateAnswer()\n{\n    return 42;\n}\n\nint answer = GetTheUltimateAnswer();\nprint (\"The Ultimate Answer is %d\\n\", answer);\n```", "```\nvoid GetMinAndMax (int *min, int *max)\n{\n    *min = 0;\n    *max = 100;\n}\n\nint min, max;\nGetMinAndMax (&min, &max)\nprintf (\"Min is %d and Max is %d\\n\", min, max);\n```", "```\nint variable = 42;\n\nprintf (\"variable = %d\\n\", variable);\nFunction (variable);\nprintf (\"variable = %d\\n\", variable);\n\nvoid Function (int x)\n{\n    x = x + 1;\n}\n```", "```\nint variable = 42;\n\nprintf (\"variable = %d\\n\", variable);\nFunction (&variable);\nprintf (\"variable = %d\\n\", variable);\n\nvoid Function (int *x)\n{\n    *x = *x + 1;\n}\n```", "```\nvoid PrintError (char *message)\n{\n    print (\"ERROR: %s\\n\", message);\n}\n\nPrintError (\"Human Detected\");\n```", "```\nvoid PrintError (char *message)\n{\n    message[0] = 42;\n}\n\nPrintError (\"Human Detected\");\n```", "```\nvoid PrintError (char *message)\n{\n    message[0] = 42;\n}\n\nchar buffer[80];\nstrncpy (buffer, \"Hello, world!\", 80);\nprintf (\"buffer: %s\\n\", buffer);\nPrintError (buffer);\nprintf (\"buffer: %s\\n\", buffer);\n```", "```\nvoid UppercaseString (char *buffer)\n{\n    for (int idx=0; idx<strlen(buffer); idx++)\n    {\n        buffer[i] = toupper(buffer[I])\n    }\n}\n```", "```\nvoid UppercaseString (char *buffer, int bufferSize)\n{\n    for (int idx=0; idx<bufferSize; idx++)\n    {\n        buffer[i] = toupper(buffer[I])\n    }\n}\n```", "```\nint Number = 10;\n\nUppercaseString (&Number, 100);\n```", "```\nvoid GetDateTime1 (int *year, int *month, int *day,\n                   int *hour, int *minute, int *second)\n{\n    *year = 2023;\n    *month = 8;\n    *day = 19;\n    *hour = 4;\n    *minute = 20;\n    *second = 0;\n}\n\nint year, month, day, hour, minute, second;\nGetDateTime1 (&year, &month, &day, &hour, &minute, &second);\nprintf (\"GetDateTime1: %d/%d/%d %02d:%02d:%02d\\n\",\n        year, month, day, hour, minute, second);\n```", "```\nshort year, month, day, hour, minute, second;\n\nGetDateTime1 (&year, &month, &day, &hour, &minute, &second);\n```", "```\ntypedef struct\n{\n    int year;\n    int month;\n    int day;\n    int hour;\n    int minute;\n    int second;\n} TimeStruct;\n\nvoid GetDateTime2 (TimeStruct *timePtr)\n{\n    timePtr->year = 2023;\n    timePtr->month = 8;\n    timePtr->day = 19;\n    timePtr->hour = 4;\n    timePtr->minute = 20;\n    timePtr->second = 0;   \n}\n\nTimeStruct time;\nGetDateTime2 (&time);\nprintf (\"GetDateTime2: %d/%d/%d %02d:%02d:%02d\\n\",\n        time.year, time.month, time.day,\n        time.hour, time.minute, time.second);\n```", "```\nTimeStruct *GetDateTime3 (void)\n{\n    static TimeStruct s_time;\n\n    s_time.year = 2023;\n    s_time.month = 8;\n    s_time.day = 19;\n    s_time.hour = 4;\n    s_time.minute = 20;\n    s_time.second = 0;\n\n    return &s_time;\n}\n\nTimeStruct *timePtr;\ntimePtr = GetDateTime3 ();  \nprintf (\"GetDateTime3: %d/%d/%d %02d:%02d:%02d\\n\",\n       timePtr->year, timePtr->month, timePtr->day,\n       timePtr->hour, timePtr->minute, timePtr->second);\n```", "```\nTimeStruct *timePtr;\ntimePtr = GetDateTime3 ();\ntimePtr->year = 1969;\n```", "```\nTimeStruct GetDateTime4 (void)\n{\n    TimeStruct time;\n\n    time.year = 2023;\n    time.month = 8;\n    time.day = 19;\n    time.hour = 4;\n    time.minute = 20;\n    time.second = 0;\n\n    return time;\n}\n\nTimeStruct time;\ntime = GetDateTime4 ();    \nprintf (\"GetDateTime4: %d/%d/%d %02d:%02d:%02d\\n\",\n       time.year, time.month, time.day,\n       time.hour, time.minute, time.second);\n```", "```\n#include <stdio.h>\n#include <string.h>\n\ntypedef struct\n{\n    char buffer[80];\n    char bufferSize;\n} BufferStruct;\n\nBufferStruct GetBuffer ()\n{\n    BufferStruct buf;\n\n    strncpy (buf.buffer, \"Hello, world!\", sizeof(buf.buffer));\n    buf.bufferSize = strlen(buf.buffer);\n\n    return buf;\n}\n\nvoid ShowBuffer (BufferStruct buf)\n{\n    printf (\"Buffer: %s\\n\", buf.buffer);\n    printf (\"Size  : %d\\n\", buf.bufferSize);\n}\n\nint main()\n{\n    BufferStruct myBuffer;\n    myBuffer = GetBuffer ();\n    ShowBuffer (myBuffer);\n\n    BufferStruct testBuffer;\n    strncpy (testBuffer.buffer, \"I put this in here\",\n             sizeof(testBuffer.buffer));\n    testBuffer.bufferSize = strlen (testBuffer.buffer);\n    ShowBuffer (testBuffer);\n\n    return 0;\n} \n```", "```\ntypedef struct\n{\n    int year;\n    int month;\n    int day;\n    int hour;\n    int minute;\n    int second;\n} TimeStruct;\n\n// Global time values.\nint g_year, g_month, g_day, g_hour, g_minute, g_second;\n\nvoid SetTime (TimeStruct time)\n{\n    // Pretend we are setting the clock.\n    g_year = time.year;\n    g_month = time.month;\n    g_day = time.day;\n    g_hour = time.hour;\n    g_minute = time.minute;\n    g_second = time.second;\n}\n\nTimeStruct GetTime ()\n{\n    TimeStruct time;\n\n    // Pretend we are reading the clock.\n    time.year = g_year;\n    time.month = g_month;\n    time.day = g_day;\n    time.hour = g_hour;\n    time.minute = g_minute;\n    time.second = g_second;\n\n    return time;\n}\n\nTimeStruct time;\n\ntime.year = 2023;\ntime.month = 8;\ntime.day = 19;\ntime.hour = 12;\ntime.minute = 4;\ntime.second = 20;\nSetTime (time);\n\n...\n\ntime = GetTime ();\n```"]