- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:31:08'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Hard disk LEDs and noisy machines - by Julio Merino
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://blogsystem5.substack.com/p/hard-disk-leds-and-noisy-machines](https://blogsystem5.substack.com/p/hard-disk-leds-and-noisy-machines)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The computers of yesteryear had this little feature known as blinking LED lights
    üîÜ. They also had this other feature called noisy disks üíæ and loud fans ü™≠. Uh wait.
    Features? Why ‚Äúfeatures‚Äù and not ‚Äúannoyances‚Äù?!
  prefs: []
  type: TYPE_NORMAL
- en: Front panel of a common PC case in the late 1990s. My Pentium MMX 166 was hosted
    in one of these.
  prefs: []
  type: TYPE_NORMAL
- en: You see, these bright lights and loud noises acted as canaries üê¶ in a performance
    mine. They gave developers a chance to notice when things were off performance-wise.
    If your code abused the CPU or the hard disk by mistake, you could tell right
    away.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nowadays, developer machines tend to be quiet under heavy load, and the vast
    majority of laptops don‚Äôt even have lights anymore. The obvious example are Macs:
    they haven‚Äôt had hard disk LEDs for a really long time, and since the M1, they
    are silent and cold too.'
  prefs: []
  type: TYPE_NORMAL
- en: These characteristics are nice from a usability perspective. Unfortunately,
    as a developer, you now need to first *imagine* that something is wrong before
    even deciding to look for a problem. If the thought never crosses your mind, then
    you may never look.
  prefs: []
  type: TYPE_NORMAL
- en: Let me give you a few examples of the kinds of inefficiencies that I‚Äôm talking
    about. These would have been trivially noticed by the presence of indicators.
    These are all based on real-world situations I faced at some point in the (recent)
    past.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ü™µ In a project I worked on, our development builds started writing about 80
    MB of log messages *per second* to disk. No matter how you look at it, that‚Äôs
    *a lot* of disk traffic, and yet‚Ä¶ the problematic code passed code review and
    was merged into the main branch.
  prefs: []
  type: TYPE_NORMAL
- en: The only indication that something was wrong was when *other* developers came
    asking for help because their local disk space was running out faster than usual.
    There was no other symptom behind the problem.
  prefs: []
  type: TYPE_NORMAL
- en: You‚Äôd hope that this inefficiency would be caught while qualifying the new release
    for production because, in theory, such logging waste would translate in an increase
    in CPU consumption or network bandwidth. But‚Ä¶ I‚Äôm not so sure the issue would
    have been noticed.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: üåê In another project I worked on, I noticed that Bazel took an incredibly long
    time to complete some actions. It wasn‚Äôt until I looked in detail that I saw it
    stuck in a loop fetching the same remote artifact over and over again due to connection
    resets.
  prefs: []
  type: TYPE_NORMAL
- en: The build completed successfully after many minutes once Bazel gave up on the
    downloads and fell back local execution. There was no reason to suspect that something
    was wrong other than ‚Äúthese actions are just huge‚Äù. In reality, though, there
    was a bug somewhere.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: üß± Just today, I was in a video call and noticed that my laptop was reading 100MB/s
    from disk non-stop. I concluded the meeting but the disk reads didn‚Äôt stop. A
    quick peek at `top` showed something called `WallpaperVideoExtension` that seemed
    to have gone rogue.
  prefs: []
  type: TYPE_NORMAL
- en: This background process was consuming one full CPU, but such load wasn‚Äôt enough
    to make the system feel slower nor noisier. I suppose I would eventually have
    noticed that the battery was running out quicker than usual, but maybe not.
  prefs: []
  type: TYPE_NORMAL
- en: Killing the process made the problem go away and the constant disk reads stopped.
    Looking online, I find other instances of `WallpaperVideoExtension` consuming
    lots of CPU and memory, so this seems to be a bug. But if it‚Äôs common, why wasn‚Äôt
    it noticed in the first place?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'In any case, this last scenario gives you a hint üîç as to where I‚Äôm going: how
    did I even notice this last problem? After all, my M1 Mac was working just fine:
    it was just slightly warmer than usual but there was no loud fan noise nor lights
    to tell me about disk activity.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is simple: I have an omnipresent performance monitor in my screen
    that shows CPU load, memory pressure, disk I/O throughput, and network traffic.
    This monitor is always visible, taking little space in the menu bar or the task
    bar.'
  prefs: []
  type: TYPE_NORMAL
- en: iStat Menus on the macOS menu bar, with the panel for CPU usage tracking open.
  prefs: []
  type: TYPE_NORMAL
- en: Every time I sense something is a tiny bit off, I glance üëÄ at the monitor. You
    cannot imagine how many times I‚Äôve gone ‚Äúhuh, that‚Äôs interesting‚Äù by seeing unexpected
    activity and then went on to discover big performance problems somewhere in the
    system.
  prefs: []
  type: TYPE_NORMAL
- en: My recommendation is that you stop what you are doing and go and install such
    a performance monitor *right now*. I‚Äôd even argue that having one always visible
    should be a hard requirement for any development machine and corp IT departments
    should preinstall one.
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I‚Äôm a huge fan of [iStat Menus](https://bjango.com/mac/istatmenus/)
    for macOS and have been using it for years. But if macOS is not your thing, you
    can find similar tools for other platforms like [system-monitor-next](https://extensions.gnome.org/extension/3010/system-monitor-next/)
    for Gnome.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, these monitors only help if you develop on your local machine‚Äîa
    workflow that‚Äôs becoming exceedingly rare. If, instead, you SSH into remote virtual
    machines to do your development or use VSCode‚Äôs remote features, you‚Äôll need a
    different answer.
  prefs: []
  type: TYPE_NORMAL
- en: This is a situation I face right now. The modern ThinkStation I have in the
    garage is well-equipped with useful lights‚Ä¶ but I only access it over SSH for
    development so those lights and its disk noises are kinda useless from where I
    sit.
  prefs: []
  type: TYPE_NORMAL
- en: And I‚Äôm not sure what the right answer here is. If you have been around for
    a while, you may remember [GKrellM](http://gkrellm.srcbox.net), which I was an
    avid user of. This system monitor had the ability to display *remote* machine
    activity and I‚Äôd love to have that again.
  prefs: []
  type: TYPE_NORMAL
- en: ([You can read the original of this text in its Twitter thread form.](https://twitter.com/jmmv/status/1735712759604711494))
  prefs: []
  type: TYPE_NORMAL
