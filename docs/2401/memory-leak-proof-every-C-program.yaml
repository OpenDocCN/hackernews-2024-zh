- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:56:54'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: memory leak proof every C program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://flak.tedunangst.com/post/memory-leak-proof-every-C-program](https://flak.tedunangst.com/post/memory-leak-proof-every-C-program)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Memory leaks have plagued C programs for as long as the language has existed.
    Many solutions have been proposed, even going so far as to suggest we should rewrite
    C programs in other languages. But there’s a better way.
  prefs: []
  type: TYPE_NORMAL
- en: Presented here is a simple solution that will eliminate the memory leaks from
    every C program. Link this into your program, and memory leaks are a thing of
    the past.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>leakproof.c</summary>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: Every allocated pointer is saved in the big bucket, where it remains accessible.
    Even if no other references to the pointer exist in the program, the pointer has
    not leaked.
  prefs: []
  type: TYPE_NORMAL
- en: It is now entirely optional to call `free`. If you don’t call free, memory usage
    will increase over time, but technically, it’s not a leak. As an optimization,
    you may choose to call free to reduce memory, but again, strictly optional.
  prefs: []
  type: TYPE_NORMAL
- en: Problem sovled!
  prefs: []
  type: TYPE_NORMAL
- en: 'Posted 19 Jan 2024 16:55 by tedu Updated: 19 Jan 2024 16:55'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tagged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[c](/t/c) [programming](/t/programming) [rants](/t/rants)'
  prefs: []
  type: TYPE_NORMAL
