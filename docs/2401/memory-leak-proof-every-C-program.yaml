- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:56:54'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:56:54'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: memory leak proof every C program
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: memory leak proof every C program
- en: 来源：[https://flak.tedunangst.com/post/memory-leak-proof-every-C-program](https://flak.tedunangst.com/post/memory-leak-proof-every-C-program)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://flak.tedunangst.com/post/memory-leak-proof-every-C-program](https://flak.tedunangst.com/post/memory-leak-proof-every-C-program)
- en: Memory leaks have plagued C programs for as long as the language has existed.
    Many solutions have been proposed, even going so far as to suggest we should rewrite
    C programs in other languages. But there’s a better way.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 自从C语言诞生以来，内存泄漏一直困扰着C程序。已经有许多解决方案被提出，甚至有人建议我们应该用其他语言重写C程序。但有一种更好的方法。
- en: Presented here is a simple solution that will eliminate the memory leaks from
    every C program. Link this into your program, and memory leaks are a thing of
    the past.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提供了一种简单的解决方案，可以消除每个C程序中的内存泄漏。将此链接到您的程序中，内存泄漏将成为过去时。
- en: <details><summary>leakproof.c</summary>
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: <details><summary>leakproof.c</summary>
- en: '[PRE0]</details>'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0]</details>'
- en: Every allocated pointer is saved in the big bucket, where it remains accessible.
    Even if no other references to the pointer exist in the program, the pointer has
    not leaked.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每个分配的指针都保存在大桶中，仍然可以访问。即使程序中没有对指针的其他引用，指针也不会泄漏。
- en: It is now entirely optional to call `free`. If you don’t call free, memory usage
    will increase over time, but technically, it’s not a leak. As an optimization,
    you may choose to call free to reduce memory, but again, strictly optional.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在完全可以选择不调用`free`。如果您不调用free，内存使用量将随时间增加，但从技术上讲，这不是泄漏。作为优化，您可以选择调用free以减少内存，但再次强调，这是完全可选的。
- en: Problem sovled!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 问题已解决！
- en: 'Posted 19 Jan 2024 16:55 by tedu Updated: 19 Jan 2024 16:55'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由tedu于2024年1月19日16:55发布 更新：2024年1月19日16:55
- en: 'Tagged:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 'Tagged:'
- en: '[c](/t/c) [programming](/t/programming) [rants](/t/rants)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[c](/t/c) [programming](/t/programming) [rants](/t/rants)'
