- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:51:05'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:51:05
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: How we switched to Java 21 virtual threads and got a deadlock in TPC-C for PostgreSQL
    | by Evgeniy Ivanov | YDB.tech blog
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们如何切换到Java 21虚拟线程并在PostgreSQL的TPC-C中遇到死锁 | 作者：Evgeniy Ivanov | YDB.tech博客
- en: 来源：[https://blog.ydb.tech/how-we-switched-to-java-21-virtual-threads-and-got-deadlock-in-tpc-c-for-postgresql-cca2fe08d70b](https://blog.ydb.tech/how-we-switched-to-java-21-virtual-threads-and-got-deadlock-in-tpc-c-for-postgresql-cca2fe08d70b)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.ydb.tech/how-we-switched-to-java-21-virtual-threads-and-got-deadlock-in-tpc-c-for-postgresql-cca2fe08d70b](https://blog.ydb.tech/how-we-switched-to-java-21-virtual-threads-and-got-deadlock-in-tpc-c-for-postgresql-cca2fe08d70b)
- en: '**How we switched to Java 21 virtual threads and got a deadlock in TPC-C for
    PostgreSQL**'
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**我们如何切换到Java 21虚拟线程并在PostgreSQL的TPC-C中遇到死锁**'
- en: Dining Java 21 philosophers have a problem
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Java 21的餐馆哲学家有问题
- en: In our previous [post](/ydb-meets-tpc-c-distributed-transactions-performance-now-revealed-42f1ed44bd73)
    about TPC-C, we discussed some drawbacks in the original TPC-C implementation
    from the [Benchbase](https://github.com/cmu-db/benchbase) project (which is great
    nevertheless). One of the drawbacks was the concurrency limit due to spawning
    too many physical threads, and we solved it by switching to Java 21 virtual threads.
    Later we discovered that, as usual, there is no free lunch. In this post, we present
    a case study on how we encountered a deadlock with virtual threads in TPC-C for
    PostgreSQL, even without the dining philosophers problem.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的[文章](/ydb-meets-tpc-c-distributed-transactions-performance-now-revealed-42f1ed44bd73)中讨论了TPC-C的一些缺点，这些缺点来自于[Benchbase](https://github.com/cmu-db/benchbase)项目的原始实现（尽管这个项目仍然很棒）。其中一个缺点是由于生成了太多物理线程而导致的并发限制，我们通过切换到Java
    21虚拟线程来解决了这个问题。后来我们发现，和往常一样，没有免费的午餐。在这篇文章中，我们提供了一个案例研究，介绍了我们如何在TPC-C中遇到了虚拟线程在PostgreSQL中的死锁问题，即使没有餐馆哲学家问题。
- en: 'This post might be useful for Java developers who are considering switching
    to virtual threads. We revise some fundamental background and then highlight an
    important concern behind virtual threads: deadlocks might be unpredictable because
    they could happen deep inside the libraries you use. Fortunately, debugging is
    straightforward and we explain how to find these deadlocks when they happen.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章可能对考虑切换到虚拟线程的Java开发人员有所帮助。我们首先复习了一些基本背景，然后强调了虚拟线程背后的一个重要问题：死锁可能是不可预测的，因为它们可能发生在你使用的库的深处。幸运的是，调试是直接了当的，我们解释了如何在发生死锁时找到它们。
- en: Why are we talking about PostgreSQL in the YDB blog
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么在YDB博客中谈论PostgreSQL
- en: PostgreSQL is an open-source database management system renowned for its high
    performance, rich feature set, advanced level of SQL compliance, and vibrant and
    supportive community. It’s great until you take into consideration horizontal
    scalability and fault tolerance. Then you end up with PostgreSQL-based third-party
    solutions like Citus, which implement sharded PostgreSQL. Having a single elephant
    might be fun. Being a mahout of a herd of elephants is a challenge, especially
    if you want these elephants to maintain multiple consistent replicas and perform
    distributed transactions with serializable isolation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL是一个以其高性能、丰富的功能集、高级SQL兼容性水平和充满活力和支持性社区而闻名的开源数据库管理系统。直到你考虑到水平扩展性和容错性为止，它都很棒。然后，你会得到基于PostgreSQL的第三方解决方案，如Citus，它们实现了分片的PostgreSQL。拥有一只大象可能很有趣。成为一群大象的驭象人是一个挑战，特别是如果你想让这些大象维护多个一致的副本并执行具有可序列化隔离的分布式事务。
- en: As opposed to this, [YDB](https://ydb.tech/) is a distributed database management
    system by its original design. YDB’s distributed transactions are first-class
    citizens and run at a serializable isolation level by default. Now, we are actively
    moving towards PostgreSQL compatibility because we see strong demand among PostgreSQL
    users to make their existing applications automatically scalable and fault-tolerant.
    That’s why we maintain [TPC-C for PostgreSQL](https://github.com/ydb-platform/tpcc)
    (we hope to get it merged into upstream Benchbase soon).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与此相反，[YDB](https://ydb.tech/)是一个按其原始设计分布式数据库管理系统。 YDB的分布式事务是一流的公民，并且默认情况下以可序列化隔离级别运行。现在，我们正在积极地向PostgreSQL兼容性迈进，因为我们看到PostgreSQL用户中有很强的需求，希望他们的现有应用程序能够自动扩展和容错。这就是为什么我们维护[TPC-C
    for PostgreSQL](https://github.com/ydb-platform/tpcc)（我们希望很快将其合并到上游Benchbase中）。
- en: A very short background and motivation
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个非常简短的背景和动机
- en: 'Let’s recap some fundamental concepts: concurrency, parallel execution, and
    asynchronous vs. synchronous requests.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一些基本概念：并发性、并行执行以及异步与同步请求的区别。
- en: 'Concurrency means that tasks are performed at the same time, either in parallel
    or sequentially. For example, you might have two activities: writing your code
    in an editor and having a Slack chat with your colleagues. You perform these tasks
    concurrently, but not in parallel. Or you might take a walk with your dog and
    speak on the phone with a friend. Again, you perform these two tasks concurrently,
    but this time, in parallel.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 并发意味着任务同时执行，无论是并行还是顺序执行。例如，你可能在编辑器中编写代码并与同事在 Slack 上聊天。你同时进行这些任务，但不是并行执行。或者你可能带着狗散步并和朋友打电话。同样，你同时进行这两项任务，但这次是并行执行。
- en: Now, consider the case when your application wants to make a request to the
    database. The request is sent through the network, serviced by the database, and
    the reply is sent back to your application. Note that the network round trip might
    be the most expensive part of the request and could take several milliseconds.
    What can you do on the application side while waiting for the reply?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑当您的应用程序想要向数据库发出请求时的情况。请求通过网络发送，由数据库提供服务，然后回复发送回您的应用程序。请注意，网络往返可能是请求中最昂贵的部分，并且可能需要几毫秒。在等待回复期间，应用程序端可以做些什么？
- en: '1\. The request might be synchronous, i.e., it will block the calling thread.
    This approach is very easy to write code for: on line 1, you have the request;
    on line 2, you can process the response:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 请求可能是同步的，即它将阻塞调用线程。这种方法很容易编写代码：第 1 行是请求；第 2 行，您可以处理响应：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '2\. The request might be asynchronous. Your thread is not blocked and continues
    the execution, while the request is processed in parallel:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 请求可能是异步的。您的线程不会被阻塞，并继续执行，而请求会并行处理：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In either case, there are two concurrent tasks: your thread is waiting for
    the reply from the database, and the database is handling the request. Synchronous
    code is extremely simple to write and read. But what if you need to make thousands
    of requests to the database simultaneously? You will have to spawn a thread per
    request. Spawning a thread in Linux is cheap, though there are strong concerns
    behind spawning too many threads:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种情况，都有两个并发任务：您的线程正在等待来自数据库的回复，而数据库正在处理请求。同步代码非常简单易读。但是，如果您需要同时向数据库发出数千个请求怎么办？您将不得不为每个请求生成一个线程。在
    Linux 中生成线程很便宜，尽管生成太多线程背后存在着严重的担忧：
- en: Each thread requires a stack. You can’t allocate less memory than the page size
    on your system, which is usually about 4 KiB unless you use hugepages, where the
    default page size is 2 MiB.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个线程都需要一个堆栈。您无法分配比系统的页面大小更少的内存，通常为约 4 KiB，除非您使用大页面，其中默认页面大小为 2 MiB。
- en: There is the Linux scheduler. You can try to spawn 100,000 threads ready to
    execute only if you have a reset button.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存在着 Linux 调度器。如果有重置按钮，您可以尝试生成 100,000 个准备执行的线程。
- en: 'This is why, until Java 21, there was no way to write synchronous code with
    a high level of concurrency: you can’t spawn many threads. Concurrently (pun intended),
    the Go language revolutionized this: goroutines provide very lightweight concurrency
    so that you can write synchronous code *efficiently*. We recommend this [talk](https://youtu.be/-K11rY57K7k?si=XT8mkXL2ypmVj4ig)
    about the Go scheduler by Dmitry Vyukov. Java 21 introduced virtual threads which
    are in many senses similar to goroutines. Keep in mind that goroutines and virtual
    threads are not inventions, but rather a reincarnation of the good old concept
    of user-level threads.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么直到 Java 21，没有办法编写具有高并发性的同步代码：你无法生成许多线程。并发（创意打趣），Go 语言革新了这一点：goroutines
    提供了非常轻量级的并发，因此您可以*高效*地编写同步代码。我们推荐观看 Dmitry Vyukov 关于 Go 调度器的[演讲](https://youtu.be/-K11rY57K7k?si=XT8mkXL2ypmVj4ig)。Java
    21 引入了类似 goroutines 的虚拟线程。请记住，goroutines 和虚拟线程不是新发明，而是对用户级线程的一种再次实现。
- en: Now, you can understand the problem with synchronous database requests in the
    original Benchbase TPC-C implementation. If your database can handle a high load,
    you must run many TPC-C warehouses, spawning many threads. With physical threads,
    we failed to run more than 30,000 terminal-threads, while with virtual threads,
    we can easily have hundreds of thousands of terminal-vthreads.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以理解原始 Benchbase TPC-C 实现中同步数据库请求的问题了。如果你的数据库能够处理高负载，你必须运行许多 TPC-C 仓库，生成许多线程。使用物理线程，我们无法运行超过
    30,000 个终端线程，而使用虚拟线程，我们可以轻松拥有数十万个终端虚拟线程。
- en: Deadlocks made easy
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 死锁变得简单了
- en: 'Imagine that you already have multithreaded Java code. Adding an option to
    use virtual threads is surprisingly easy and can be incredibly beneficial. By
    simply replacing your standard thread creation with the new virtual thread builders,
    your application can handle thousands of concurrent tasks without the overhead
    associated with physical threads. Here is an [example](https://github.com/ydb-platform/tpcc/blob/c8474bc7cf40456de0fe4c7fb060d867dd985ede/src/main/java/com/oltpbenchmark/ThreadBench.java#L65-L69)
    from our TPC-C implementation:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您已经有了多线程Java代码。添加一个选项来使用虚拟线程非常容易，并且可能非常有益。通过简单地将标准线程创建替换为新的虚拟线程构建器，您的应用程序可以处理数千个并发任务，而无需与物理线程相关的开销。以下是我们TPC-C实现的一个[示例](https://github.com/ydb-platform/tpcc/blob/c8474bc7cf40456de0fe4c7fb060d867dd985ede/src/main/java/com/oltpbenchmark/ThreadBench.java#L65-L69)：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That’s all it takes; now, you’re using virtual threads. Under the hood, the
    Java Virtual Machine creates a pool of `carrier threads`, which execute your `virtual
    threads`. This transition appears seamless until, unexpectedly, your application
    freezes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样；现在，您正在使用虚拟线程。在幕后，Java虚拟机创建了一个`载体线程`池，用于执行您的`虚拟线程`。这种过渡看起来是无缝的，直到您的应用程序意外地冻结。
- en: Our PostgreSQL TPC-C implementation utilizes [c3p0](https://www.mchange.com/projects/c3p0/)
    for connection pooling. [The TPC-C standard](https://www.tpc.org/tpcc/) dictates
    that each terminal must have its own connection. However, in many real-world scenarios,
    this isn’t practical, so we’ve included an option to limit the number of database
    connections.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的PostgreSQL TPC-C实现利用了[c3p0](https://www.mchange.com/projects/c3p0/)进行连接池管理。[TPC-C标准](https://www.tpc.org/tpcc/)规定每个终端必须拥有自己的连接。然而，在许多实际场景中，这并不实际，因此我们提供了一个选项来限制数据库连接数。
- en: The number of terminals is much greater than the number of available connections.
    Consequently, some terminals must wait for a session to become available, i.e.,
    released by another terminal.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 终端数量远远大于可用连接数量。因此，一些终端必须等待会话变为可用，即由另一个终端释放。
- en: 'When we initiated the TPC-C run, the application froze. Fortunately, debugging
    such cases is straightforward:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们启动TPC-C运行时，应用程序卡住了。幸运的是，调试这种情况很简单：
- en: Capture the thread stacks using `jstack <PID>`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`jstack <PID>`捕获线程堆栈。
- en: Create a more detailed dump of the current state, which includes information
    about carrier threads and virtual threads, using `jcmd <PID> Thread.dump_to_file
    -format=text jcmd.dump.1`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`jcmd <PID> Thread.dump_to_file -format=text jcmd.dump.1`创建当前状态的更详细的转储，其中包括有关载体线程和虚拟线程的信息。
- en: 'Upon investigation, we discovered that some virtual threads waiting for a session
    had pinned their carrier thread. Here is the stack for one such virtual thread:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 经过调查，我们发现一些等待会话的虚拟线程已经将其载体线程固定住了。以下是其中一个虚拟线程的堆栈：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'and the stack of its carrying thread:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以及其载体线程的堆栈：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see, the thread is hanging in `Object.wait()`, a method used in
    conjunction with `synchronized`. This causes the carrier thread to become pinned,
    meaning it is not released to execute some other virtual thread. Meanwhile, the
    session holders have released their carrier threads while they are waiting for
    I/O operations:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，线程卡在`Object.wait()`中，这是与`synchronized`一起使用的方法。这导致载体线程被固定住，意味着它没有被释放以执行其他虚拟线程。与此同时，持有会话的线程在等待I/O操作时已经释放了它们的载体线程：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Thus, we ended up in the following situation:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们陷入了以下情况：
- en: All carrier threads are pinned by session waiters, meaning there are no carrier
    threads available.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有载体线程都被会话等待者固定住了，这意味着没有可用的载体线程。
- en: Virtual threads holding the sessions can’t finish their tasks to release the
    sessions.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拥有会话的虚拟线程无法完成其任务以释放会话。
- en: Deadlock made easy!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 死锁变得如此容易！
- en: '[JEP 444](https://openjdk.org/jeps/444) states that:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[JEP 444](https://openjdk.org/jeps/444)规定：'
- en: '*There are two scenarios in which a virtual thread cannot be unmounted during
    blocking operations because it is pinned to its carrier:*'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*在两种情况下，虚拟线程由于被固定在其载体上而无法在阻塞操作期间卸载：*'
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*When it executes code inside a synchronized block or method, or When it executes
    a native method or a foreign function.*'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*当执行代码时，它位于同步块或方法内，或当执行本机方法或外部函数时。*'
- en: 'The problem is that this synchronized code might be deeply embedded within
    the libraries you use. In our case, it was within the c3p0 library. So, the [fix](https://github.com/ydb-platform/tpcc/commit/175f0c03d9c16652c85a6103331fec473017797e)
    is straightforward: we simply wrapped the connection with a `java.util.concurrent.Semaphore`.
    With this change, virtual threads are blocked on the semaphore and, crucially,
    release the carrier thread instead of delving inside c3p0\. Thus, we never block
    inside c3p0 because we enter c3p0 code only when there is a free session available.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于这段同步代码可能被深深地嵌入到你所使用的库中。在我们的情况下，它位于 c3p0 库内。所以，[修复](https://github.com/ydb-platform/tpcc/commit/175f0c03d9c16652c85a6103331fec473017797e)
    很简单：我们只需用 `java.util.concurrent.Semaphore` 将连接包装起来。有了这个改变，虚拟线程会被阻塞在信号量上，并且至关重要的是，释放的是承载线程而不是深入到
    c3p0 中。因此，我们永远不会在 c3p0 内部阻塞，因为只有在有可用的空闲会话时我们才会进入 c3p0 代码。
- en: Summing up
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This is the front cover art for the book The Mythical Man-Month written by Fred
    Brooks. The book cover art copyright is believed to belong to the publisher, Addison-Wesley,
    or the cover artist.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是弗雷德·布鲁克斯（Fred Brooks）所著《人月神话》的封面艺术。这本书封面艺术的版权被认为属于出版商 Addison-Wesley，或者封面艺术家。
- en: 'It seems that despite decades of progress in software development, there is
    still [no silver bullet](https://en.wikipedia.org/wiki/No_Silver_Bullet). Yet,
    Java 21 virtual threads are a remarkable feature, offering significant benefits
    if used carefully: it’s very easy to write an efficient async code even when concurrency
    is high.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来尽管软件开发在几十年的进步，还是[没有银弹](https://en.wikipedia.org/wiki/No_Silver_Bullet)。然而，Java
    21 虚拟线程是一个非凡的功能，如果小心使用，将带来重大的好处：即使并发性很高，编写高效的异步代码也很容易。
