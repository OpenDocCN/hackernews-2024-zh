- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:31:20'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:31:20
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: CultriX/MistralTrix-v1 · Hugging Face
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CultriX/MistralTrix-v1 · Hugging Face
- en: 来源：[https://huggingface.co/CultriX/MistralTrix-v1](https://huggingface.co/CultriX/MistralTrix-v1)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://huggingface.co/CultriX/MistralTrix-v1](https://huggingface.co/CultriX/MistralTrix-v1)
- en: '[](#edit)EDIT:'
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[](#edit)编辑：'
- en: Always check my space for the latest benchmark results for my models!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 总是查看我的空间以获取最新的模型基准结果！
- en: '[](#results)Results:'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[](#results)结果：'
- en: 'T: 🟦 Model: CultriX/MistralTrix-v1 📑 Average: 73.39 ARC: 72.27 HellaSwag: 88.33
    MMLU: 65.24 TruthfulQA: 70.73 Winogrande: 80.98 GSM8K: 62.77'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 'T: 🟦 模型：CultriX/MistralTrix-v1 📑 平均值：73.39 ARC：72.27 HellaSwag：88.33 MMLU：65.24
    TruthfulQA：70.73 Winogrande：80.98 GSM8K：62.77'
- en: '[](#editdisclaimer)Edit/Disclaimer:'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[](#editdisclaimer)编辑/免责声明：'
- en: 'Currently the #1 ranked 7B LLM on the LLM Leaderboards, woah! I did not expect
    that result at all and am in no way a professional when it comes to LLM''s or
    computer science in general, just a guy that likes to nerd about and tinker around.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 目前在 LLM 排行榜上排名第一的 7B LLM，哇！我根本没想到会有这样的结果，而且在 LLM 或者计算机科学方面我完全不是专业的，只是一个喜欢研究和摆弄的家伙。
- en: 'For those wondering how I achieved this, the answer is that I simply attempted
    to apply the techniques outlined in this amazing article myself: [https://towardsdatascience.com/fine-tune-a-mistral-7b-model-with-direct-preference-optimization-708042745aac](https://towardsdatascience.com/fine-tune-a-mistral-7b-model-with-direct-preference-optimization-708042745aac)
    Therefore, all credit basically goes to the guy who wrote that. He offers the
    exact Colab notebook I used to train this model for free, as well as a really
    nice GitHub page I hope he doesn''t mind me sharing: [https://github.com/mlabonne/llm-course/](https://github.com/mlabonne/llm-course/)
    So huge thank you to him for sharing his knowledge and learning me a thing or
    two in the process!'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些想知道我是如何做到这一点的人，答案就是我简单地尝试了自己在这篇精彩文章中概述的技术：[https://towardsdatascience.com/fine-tune-a-mistral-7b-model-with-direct-preference-optimization-708042745aac](https://towardsdatascience.com/fine-tune-a-mistral-7b-model-with-direct-preference-optimization-708042745aac)
    因此，基本上所有的功劳都归功于那个写这篇文章的家伙。他提供了我用来训练这个模型的确切 Colab 笔记本，以及一个非常好的 GitHub 页面，我希望他不介意我分享：[https://github.com/mlabonne/llm-course/](https://github.com/mlabonne/llm-course/)
    所以非常感谢他分享他的知识，在这个过程中教了我一两件事情！
- en: '[](#gguf)GGUF'
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[](#gguf)GGUF'
- en: 'I attempted to quantisize the model myself, which again I pretty much have
    no clue about, but it seems to run fine for me when I test them: [https://huggingface.co/CultriX/MistralTrix-v1-GGUF](https://huggingface.co/CultriX/MistralTrix-v1-GGUF)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我尝试了自己量化模型，再次强调，我对此几乎一无所知，但当我测试它们时，它们似乎运行良好：[https://huggingface.co/CultriX/MistralTrix-v1-GGUF](https://huggingface.co/CultriX/MistralTrix-v1-GGUF)
- en: 'I''ll say it one more time though: "I am a complete beginner to all of this,
    so if these do end up sucking don''t be surprised."'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我要再说一次：“我对这一切完全是个新手，所以如果这些结果不好别感到惊讶。”
- en: You have been warned :)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经被警告了 :)
- en: '[](#description)Description:'
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[](#description)描述：'
- en: (trained on a single Colab GPU in less than a few hours)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: （在单个 Colab GPU 上训练，不到几个小时）
- en: MistralTrix-v1 is an zyh3826/GML-Mistral-merged-v1 model that has been further
    fine-tuned with Direct Preference Optimization (DPO) using Intel's dataset for
    neural-chat-7b-v3-1. It surpasses the original model on several benchmarks (see
    results).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: MistralTrix-v1 是一个 zyh3826/GML-Mistral-merged-v1 模型，经过使用 Intel 的数据集进行了进一步的直接偏好优化（DPO）
    fine-tune。它在几个基准测试中超越了原始模型（参见结果）。
- en: It is directly inspired by the RLHF process described by Intel/neural-chat-7b-v3-1's
    authors to improve performance. I used the same dataset and reformatted it to
    apply the ChatML template.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它直接受到了 Intel/neural-chat-7b-v3-1 的作者描述的 RLHF 过程的启发，以提高性能。我使用了相同的数据集，并重新格式化了它以应用
    ChatML 模板。
- en: The code to train this model is available on Google Colab and GitHub. Fine-tuning
    took about an hour on Google Colab A-1000 GPU with 40GB VRAM.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 训练此模型的代码可在 Google Colab 和 GitHub 上获得。在 Google Colab A-1000 GPU 上，使用 40GB VRAM
    的 fine-tuning 大约需要一个小时。
- en: '[](#training-specifications)TRAINING SPECIFICATIONS'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[](#training-specifications)训练规范'
- en: LoRA configuration peft_config = LoraConfig( r=16, lora_alpha=16, lora_dropout=0.05,
    bias="none", task_type="CAUSAL_LM", target_modules=['k_proj', 'gate_proj', 'v_proj',
    'up_proj', 'q_proj', 'o_proj', 'down_proj'] )
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: LoRA 配置 peft_config = LoraConfig( r=16, lora_alpha=16, lora_dropout=0.05, bias="none",
    task_type="CAUSAL_LM", target_modules=['k_proj', 'gate_proj', 'v_proj', 'up_proj',
    'q_proj', 'o_proj', 'down_proj'] )
- en: Model to fine-tune model = AutoModelForCausalLM.from_pretrained( model_name,
    torch_dtype=torch.float16, load_in_4bit=True ) model.config.use_cache = False
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 通过以下代码 fine-tune 模型：`AutoModelForCausalLM.from_pretrained( model_name, torch_dtype=torch.float16,
    load_in_4bit=True )`，`model.config.use_cache = False`
- en: Reference model ref_model = AutoModelForCausalLM.from_pretrained( model_name,
    torch_dtype=torch.float16, load_in_4bit=True )
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 参考模型 ref_model = AutoModelForCausalLM.from_pretrained( model_name, torch_dtype=torch.float16,
    load_in_4bit=True )
- en: Training arguments training_args = TrainingArguments( per_device_train_batch_size=4,
    gradient_accumulation_steps=4, gradient_checkpointing=True, learning_rate=5e-5,
    lr_scheduler_type="cosine", max_steps=200, save_strategy="no", logging_steps=1,
    output_dir=new_model, optim="paged_adamw_32bit", warmup_steps=100, bf16=True,
    report_to="wandb", )
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 训练参数 training_args = TrainingArguments( per_device_train_batch_size=4, gradient_accumulation_steps=4,
    gradient_checkpointing=True, learning_rate=5e-5, lr_scheduler_type="cosine", max_steps=200,
    save_strategy="no", logging_steps=1, output_dir=new_model, optim="paged_adamw_32bit",
    warmup_steps=100, bf16=True, report_to="wandb", )
- en: Create DPO trainer dpo_trainer = DPOTrainer( model, ref_model, args=training_args,
    train_dataset=dataset, tokenizer=tokenizer, peft_config=peft_config, beta=0.1,
    max_prompt_length=1024, max_length=1536, )
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 创建 DPO 训练器 dpo_trainer = DPOTrainer( model, ref_model, args=training_args, train_dataset=dataset,
    tokenizer=tokenizer, peft_config=peft_config, beta=0.1, max_prompt_length=1024,
    max_length=1536, )
