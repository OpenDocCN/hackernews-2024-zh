["```\n// TypeScript\nexport async function calculatePrice(order:Order) {\n  const itemPrices = order.items.map(i => calculateItemPrice(i))\n  const basePrice = itemPrices.reduce((acc, i) => acc + i.price, 0)\n  const discount = calculateDiscount(order)\n  const shipping = await calculateShipping(order)\n  const adjustedShipping = applyShippingDiscounts(order, shipping)\n  return basePrice + discount + adjustedShipping\n}\n\n```", "```\nexport async function calculatePrice(order:Order, shippingFn: (o:Order) => Promise<number>) {\n  const itemPrices = order.items.map(i => calculateItemPrice(i))\n  const basePrice = itemPrices.reduce((acc, i) => acc + i.price, 0)\n  const discount = calculateDiscount(order)\n  const shipping = await shippingFn(order)\n  const adjustedShipping = applyShippingDiscounts(order, shipping)\n  return basePrice + discount + adjustedShipping\n}\n\n```", "```\nconst shippingFn = async (o:Order) => 113\nexpect(await calculatePrice(sampleOrder, shippingFn)).toStrictEqual(153)\n```", "```\nexport async function calculatePrice(order:Order) {\n  const itemPrices = order.items.map(i => calculateItemPrice(i))\n  const basePrice = itemPrices.reduce((acc, i) => acc + i.price, 0)\n  const discount = calculateDiscount(order)\n  const shipping = await ShippingServices.calculateShipping(order)\n  const adjustedShipping = applyShippingDiscounts(order, shipping)\n  return basePrice + discount + adjustedShipping\n}\n\n```", "```\nclass ShippingServices {\n  static #soleInstance: ShippingServices\n  static init(arg?:ShippingServices) {\n    this.#soleInstance = arg || new ShippingServices()\n  }\n  static async calculateShipping(o:Order) {return this.#soleInstance.calculateShipping(o)}\n  async calculateShipping(o:Order)  {return legacy_calcuateShipping(o)}\n  // ... more services\n\n```", "```\nclass ShippingServicesStub extends ShippingServices {\n  calculateShippingFn: typeof ShippingServices.calculateShipping =\n     (o) => {throw new Error(\"no stub provided\")}\n  async calculateShipping(o:Order) {return this.calculateShippingFn(o)}\n  // more services\n\n```", "```\nconst stub = new ShippingServicesStub()\nstub.calculateShippingFn = async (o:Order) => 113\nShippingServices.init(stub)\nexpect(await calculatePrice(sampleOrder)).toStrictEqual(153)\n```", "```\nexport let calculateShipping = legacy_calculateShipping\n\nexport function reset_calculateShipping(fn?: typeof legacy_calculateShipping) {\n  calculateShipping = fn || legacy_calculateShipping\n}\n\n```", "```\nconst shippingFn = async (o:Order) => 113\nreset_calculateShipping(shippingFn)\nexpect(await calculatePrice(sampleOrder)).toStrictEqual(153)\n```"]