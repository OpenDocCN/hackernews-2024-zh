- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:44:10'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: What are File Descriptors in Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://linuxtldr.com/file-descriptors-linux/](https://linuxtldr.com/file-descriptors-linux/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this article, you will learn everything about file descriptors, like their
    uses in Linux, what a file descriptor table is, how to view the file descriptors
    under a specific process, and how to change the limit of a file descriptor in
    Linux.
  prefs: []
  type: TYPE_NORMAL
- en: '## What are File Descriptors in Linux?'
  prefs: []
  type: TYPE_NORMAL
- en: A file descriptor is a positive integer that acts as a unique identifier (or
    handle) for “files” and other I/O resources, such as pipes, sockets, blocks, devices,
    or terminal I/O.
  prefs: []
  type: TYPE_NORMAL
- en: All the file descriptor records are kept in a file descriptor table in the kernel.
    When a file is opened, a new file descriptor (or integer value) is given to that
    file in the file descriptor table.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you open a “`example_file1.txt`” file (which is nothing but
    a process), it will be allocated with the available file descriptor (for example,
    101), and a new entry will be created in the file descriptor table.
  prefs: []
  type: TYPE_NORMAL
- en: And when you open another file like “`example_file2.txt`“, it will be allocated
    to another available file descriptor like 102, and another entry will be created
    in the file descriptor table.
  prefs: []
  type: TYPE_NORMAL
- en: '| File Descriptor | Process |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 101 | example_file1.txt |'
  prefs: []
  type: TYPE_TB
- en: '| 102 | example_file2.txt |'
  prefs: []
  type: TYPE_TB
- en: The file descriptor for the referenced file will be available for use by another
    process once you close the file.
  prefs: []
  type: TYPE_NORMAL
- en: So, when you open hundreds of files or other I/O resources in your Linux system,
    there will be 100 entries in the file descriptor table, and each entry will reference
    a unique file descriptor (or integer value like 100, 102, 103…) to identify the
    file.
  prefs: []
  type: TYPE_NORMAL
- en: What is the File Descriptor Table in Linux?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a process or I/O device makes a successful request, the kernel returns
    a file descriptor to that process and keeps the list of current and all running
    process file descriptors in the file descriptor table, which is somewhere in the
    kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Now, your process might depend on other system resources like input and output;
    as this event is also a process, it also has a file descriptor, which will be
    attached to your process in the file descriptor table.
  prefs: []
  type: TYPE_NORMAL
- en: Each file descriptor in the file descriptor table points to an entry in the
    kernel’s global file table. The file table entry maintains the record of file
    (or other I/O resource) modes like (`r`)ead, (`w`)rite, and (`e`)xecute.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the file table entry points to a third table known as the inode table
    that points to actual file information like size, modification date, pointer,
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: '## Predefined File Descriptors'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, three types of standard POSIX file descriptors exist in the file
    descriptor table, and you might already be familiar with them as [data streams
    in Linux](https://linuxtldr.com/understanding-streams-in-linux/):'
  prefs: []
  type: TYPE_NORMAL
- en: '| File Descriptor | Name | Abbreviation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `0` | Standard Input | stdin |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | Standard Output | stdout |'
  prefs: []
  type: TYPE_TB
- en: '| `2` | Standard Error | stderr |'
  prefs: []
  type: TYPE_TB
- en: Apart from them, every other process has its own set of file descriptors, but
    few of them (except for some daemons) also utilize the above-mentioned file descriptors
    to handle input, output, and errors for the process.
  prefs: []
  type: TYPE_NORMAL
- en: To make sure that the process is using the above file descriptor, just look
    for the above file descriptor (in integer format) under “`/proc/PID/fd/`“, where
    PID stands for “process identifier.”
  prefs: []
  type: TYPE_NORMAL
- en: For example, I’ve started the GEDIT editor on my system, which uses all of the
    file descriptors mentioned above, as shown.
  prefs: []
  type: TYPE_NORMAL
- en: List all of a Running Process’s File Descriptors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you just learned, each running process in Linux has its own set of file descriptors,
    but it also uses others to identify the specific file when communicating with
    kernel space via system calls or library calls.
  prefs: []
  type: TYPE_NORMAL
- en: Find the Process ID (or PID)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, find out your process identifier (or PID) using the [ps command](https://linuxtldr.com/ps-command/)
    before viewing the file descriptors under it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Replace “`gedit`” with your running process name, or you can place “`$$`” to
    pass the current bash session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you have two ways to list the file descriptors under a specific process,
    followed by:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the ls command
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: List all of the file descriptors and the files they refer to under a certain
    PID by listing the content of the “`/proc/PID/fd/`” path, where PID is the process
    ID, using the [ls command](https://linuxtldr.com/ls-command/).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the lsof command
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The lsof command is used to list the information about running processes in
    the system and can also be used to list the file descriptor under a specific PID.
  prefs: []
  type: TYPE_NORMAL
- en: For that, use the “`-d`” flag to specify a range of file descriptors, with the
    “`-p`” option specifying the PID. To combine this selection, use the “`-a`” flag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the Purpose of File Descriptors in the First Place?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The file descriptor, along with the file table, keep track of each running process’s
    permissions in your system and maintain data integrity.
  prefs: []
  type: TYPE_NORMAL
- en: A running process can inherit the functionality of another process by inheriting
    its file descriptor, as you just learned in this article.
  prefs: []
  type: TYPE_NORMAL
- en: '**What Happens If You Run Out of File Descriptors?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is crucial because a file descriptor is an integer value that the kernel
    returns to the process (or other I/O resource) after a successful attempt to open
    a file.
  prefs: []
  type: TYPE_NORMAL
- en: There is a limit to the number of file descriptors (or integer values) that
    can be given to a process. When that limit is reached, data can be lost.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Linux, generally, there are two types of file descriptors: process-level
    file descriptors and system-level file descriptors.'
  prefs: []
  type: TYPE_NORMAL
- en: Process-Level File Descriptor Limits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check the current process-level file descriptor limit using the ulimit command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: Reset the limit by adding a custom positive number after the command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that non-root users are also able to use the above command to change the
    process-level limits (<Kernel 2.4.x), but you need to add the following lines
    in “`/etc/security/limits.conf`” to assign the user modification permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: System-Level File Descriptor Limits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check the limit of the system-level descriptor using the [cat command](https://linuxtldr.com/cat-command/).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify the file with the new value by using the “`>`” [redirection symbol](https://linuxtldr.com/understanding-streams-in-linux/).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: After modifying the above file, modify the value in the “`nr_open`” file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Final Tips!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I hope this article makes it clear for you to understand the workings of file
    descriptors in Linux computing.
  prefs: []
  type: TYPE_NORMAL
- en: If you have any questions or queries related to this topic, then feel free to
    ask them in the comment section.
  prefs: []
  type: TYPE_NORMAL
