- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:13:34'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:13:34
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: My Impressions of Hare
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我对 Hare 的印象
- en: 来源：[https://vfoley.xyz/hare/](https://vfoley.xyz/hare/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://vfoley.xyz/hare/](https://vfoley.xyz/hare/)
- en: '[When Hare was announced](https://harelang.org/blog/2022-04-25-announcing-hare/)
    back in 2022, I saw the post on Hacker News, went to the website, looked at the
    documentation, and my reaction was a lukewarm “meh”. Hare was a new entry in what
    I call the “Modern Cs”: languages that use C as their base inspiration and try
    to improve upon C by adding new features, removing some footguns, and polishing
    some sharp corners. These languages also try to avoid the complexity and [cognitive
    load](https://github.com/zakirullin/cognitive-load/blob/main/README.md#feature-rich-languages)
    of C++, Ada, or Rust by omitting certain features (e.g., exceptions, RAII). The
    Modern Cs include:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[当 Hare 宣布](https://harelang.org/blog/2022-04-25-announcing-hare/) 在 2022 年发布时，我在
    Hacker News 上看到了这篇文章，转到了网站，查看了文档，我的反应是冷淡的“无所谓”。Hare 是我所谓的“现代 C 语言”的新参与者：这些语言以
    C 语言为基础灵感，试图通过添加新特性、移除一些陷阱，并优化一些尖锐的角来改进 C 语言。这些语言还试图通过省略某些特性（例如异常、RAII）来避免 C++、Ada
    或 Rust 的复杂性和[认知负荷](https://github.com/zakirullin/cognitive-load/blob/main/README.md#feature-rich-languages)。现代
    C 语言包括：'
- en: '**Zig:** Probably the best-known Modern C, its main claim to fame is `comptime`,
    the ability to run Zig code at compile-time. This one feature is used pervasively
    in the language and it subsumes many features of other language: for example,
    a generic data structure can be implemented by calling a comptime function which
    accepts a type and returns a struct where the input type has been filled in.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Zig：** 可能是最著名的现代 C 语言，它的主要亮点是 `comptime`，即在编译时运行 Zig 代码的能力。这个特性在语言中广泛使用，并且它包含了其他语言的许多特性：例如，一个泛型数据结构可以通过调用一个接受类型并返回已填入输入类型的结构体的
    comptime 函数来实现。'
- en: '**Odin:** Another well-known Modern C, Odin is a simpler language than Zig
    and it draws its inspiration from C, but also Pascal and Go. One cool feature
    of Odin is its implicit context argument which allows custom loggers or memory
    allocators to be passed around without being explicitly in a function’s parameters’
    list.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Odin：** 另一个着名的现代 C 语言，Odin 是比 Zig 更简单的语言，它的灵感来源于 C 语言，还有 Pascal 和 Go。Odin
    的一个酷炫特性是它的隐式上下文参数，允许自定义的记录器或内存分配器在不显式出现在函数参数列表中的情况下传递。'
- en: '**C3:** A language that attempts to stay closer to C than the others, it still
    manages to improve upon C with better error handling, modules, generics, and cleaner
    semantics.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C3：** 一种试图与其他语言保持更接近 C 语言的语言，它仍然成功地通过更好的错误处理、模块、泛型和更清晰的语义来改进 C 语言。'
- en: '**Jai:** Jonathan Blow’s language which is currently in private beta. Like
    Zig, the big idea of Jai is to allow any part of a program to be run at compile-time
    by prefixing a statement with `#run`. The language is currently used for the creation
    of a AAA game, but no one knows when it’ll be available to the general public.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jai：** Jonathan Blow 的语言，目前处于私有测试阶段。与 Zig 一样，Jai 的主要思想是允许程序的任何部分通过在语句前加上
    `#run` 来在编译时运行。这种语言目前用于创建 AAA 游戏，但没有人知道它何时会向普通大众开放。'
- en: 'In my first quick look at the documentation of Hare, I saw a language that
    clearly improved upon C: it had better error handling, a stronger type system,
    bound-checked slices, `defer` for resource cleanup, UTF-8 support, and fewer syntactic
    gotchas than C (e.g., no fallthrough in switches, more intuitive declaration syntax).
    Hare doesn’t have generics, macros, or any means of doing compile-time programming,
    which was what cooled my interest for the language. Also, unlike the other languages
    on this list, Hare uses QBE for its backend instead of LLVM which can raise questions
    about how fast the generated programs are. At the time, I thought Hare was cute,
    but not a language I was interested in or a language that I thought I *could*
    be interested in.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我对 Hare 文档的第一次快速浏览中，我看到了一个明显改进了 C 语言的语言：它具有更好的错误处理、更强的类型系统、边界检查的切片、`defer`
    用于资源清理、UTF-8 支持，并且比 C 语言更少的语法陷阱（例如，switch 语句中没有穿透，更直观的声明语法）。Hare 没有泛型、宏，也没有任何进行编译时编程的手段，这让我对这种语言失去了兴趣。此外，与此列表上的其他语言不同，Hare
    使用 QBE 作为后端，而不是 LLVM，这可能会引发对生成的程序速度的质疑。当时，我觉得 Hare 很可爱，但并不是我感兴趣的语言，也不是我认为我 *可能*
    感兴趣的语言。
- en: 'Fast-forward a couple years, and I hear Drew DeVault, Hare’s creator, on the
    podcast [Developer Voices](https://www.youtube.com/watch?v=42y2Q9io3Xs) talking
    about Hare. I liked what Drew had to say, many of his sensibilities about programming
    languages matched my own, and since I had a week off for Christmas and New Year,
    I figured that I should give the language a try. When I tried Hare, something
    unexpected happened: I liked it more than I expected! The language is more basic
    than the other Modern Cs and boasts fewer of the features I look for in a language,
    yet I found that it was the one that most quickly and most comfortably “fit my
    hand”. I learned the basics of the language in a couple of hours and the built-in
    `haredoc` command let me explore the standard library from the comfort of my terminal.
    Before long, I could write small programs in Hare without consulting the documentation
    at every line. The more I used Hare, the more I realized that I had previously
    judged it as just a list of features; now that I was actually using it, the holistic
    experience was better than a simple reading of the features led me to believe.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 几年后，我在播客[开发者之声](https://www.youtube.com/watch?v=42y2Q9io3Xs)中听到了 Hare 的创建者 Drew
    DeVault 谈论 Hare。我喜欢 Drew 的讲话，他对编程语言的许多感觉与我自己的相符，而且我在圣诞节和新年有一周的假期，所以我想试试这种语言。当我尝试了
    Hare 时，发生了一些意外的事情：我比预期更喜欢它！这种语言比其他现代 C 语言更基础，拥有的特性更少，但我发现它是那种最快最舒适地“适应我的手”的语言。我在几个小时内学会了这种语言的基础知识，内置的
    `haredoc` 命令让我可以从我的终端舒适地探索标准库。没过多久，我就能够在 Hare 中编写小型程序，而无需在每一行代码处查阅文档。我越是使用 Hare，就越意识到以前我只是把它当作一堆特性来评价；现在我实际使用它后，整体体验要比简单地阅读特性要好得多。
- en: Some of my readers may know that I used to be quite a fan of very high-level
    programming languages, of functional programming, of advanced type system features,
    etc. However, over the past few years, age has made me become more conservative
    in my programming language preferences—I now value simplicity more than I did
    before and I find myself scowling at some of the advanced modern programming features,
    grumbling that they exist to solve uncommon problems or, worse, to provide an
    exciting toy to otherwise bored programmers. Were I 5–10 years younger, I would
    totally blow off Hare, but now I value different things in the software that I
    use and build, Hare appeals to me a lot more.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我的一些读者可能知道，我过去是非常喜欢非常高级的编程语言、函数式编程、高级类型系统特性等的。然而，在过去的几年里，年龄使我对自己编程语言的偏好变得更加保守——我现在更重视简单性，而不是以前那样，并且我发现自己对一些高级的现代编程特性皱起了眉头，抱怨它们的存在是为了解决不常见的问题，或者更糟的是，为了给本来无聊的程序员提供一个令人兴奋的玩具。如果我年轻
    5–10 年，我肯定会对 Hare 不屑一顾，但现在我在使用和构建软件时对不同的东西更加重视，Hare 对我来说更有吸引力。
- en: 'One aspect of Hare that I will follow with interest is its evolving story toward
    safety. Hare is already a lot safer than C: the compiler inserts bound check for
    array and slice accesses, the compiler refuses to compile code which doesn’t handle
    error conditions, strings don’t have the ambiguity of C where you don’t know if
    `length` includes the terminating NUL byte or not, etc. A lot of the common C
    footguns are nullified. However, the language does not track ownership and lifetimes—the
    programmer must have that discipline—which opens Hare programs to use-after-free
    and double-free bugs. There are early discussions of using linear types to prevent
    those kinds of errors; time will tell whether the Hare developers are able to
    integrate them in the language without sacrificing the simplicity and “feel” of
    the language.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我将有兴趣关注 Hare 的一个方面，即它在安全性方面的发展故事。Hare 已经比 C 语言安全得多：编译器为数组和切片访问插入了边界检查，编译器拒绝编译不处理错误条件的代码，字符串不像
    C 语言那样含糊不清，你不知道 `length` 是否包括终止的 NUL 字节等。许多常见的 C 语言陷阱都被消除了。但是，该语言不跟踪所有权和生命周期——程序员必须具备这种纪律——这使得
    Hare 程序容易出现使用后释放和双重释放的错误。有关使用线性类型来防止这些错误的早期讨论；时间会告诉我们 Hare 开发者能否在不牺牲语言的简洁性和“感觉”的情况下将其整合到语言中。
- en: I’ll finish by repeating how pleasantly surprised I was by Hare. If you value
    simplicity, directness, and performance, I recommend you give it a go for few
    hours; I think you’ll also be pleasantly surprised.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后我要重申一下我对 Hare 的惊喜之情。如果你重视简洁、直接和性能，我建议你试试它几个小时；我想你也会感到惊喜的。
