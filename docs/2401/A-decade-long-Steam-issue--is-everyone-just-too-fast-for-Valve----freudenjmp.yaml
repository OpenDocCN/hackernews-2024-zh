- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:45:35'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: A decade long Steam issue, is everyone just too fast for Valve? | freudenjmp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://blog.freudenjmp.com/posts/no-user-logon/](https://blog.freudenjmp.com/posts/no-user-logon/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Valve has shown to occasionally not act on community feedback and bug reports.
    A story about a decade old bug.
  prefs: []
  type: TYPE_NORMAL
- en: tl;dr[](#tldr)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '*To fix the infamous `No user logon` issue in Counter-Strike that existed for
    over a decade, wait 10 seconds in main menu after starting CS2, so Steam can properly
    validate your Steam ID.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Here are a few popular mitigations that do absolutely jack shit to fix the
    root cause. If you’ve found this article via Google: STOP, DO NOT DO THESE:*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Reinstall the game*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Validate the game files*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Restart Steam*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Restart your computer*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Disable WiFi*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*To learn what to do instead, read this article.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Introduction[](#introduction)*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***(You can skip to [No user logon](#no-user-logon) if you don’t care about
    the history of Counter-Strike or you can skip to [Solution](#solution) if you
    don’t care about the technical details/root cause.)***'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Counter-Strike](https://store.steampowered.com/app/730/CounterStrike_2/)
    is a famous game developed by [Valve](https://www.valvesoftware.com/en/). Recently,
    Counter-Strike 2 (CS2) has been published and has *replaced* (!) its predecessor
    Counter-Strike: Global Offensive (CS:GO). Some people tend to not consider CS2
    a game but one big bug. While this may be a bit harsh, it’s not far from the truth:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Be prepared for new bugs appearing, as Valve didn’t manage to include CS2
    in [Valves HackerOne bug bounty program](https://hackerone.com/valve). `cs2.exe`
    is not in scope and the only (outdated) mention of CS2 is inside their description.
    This means that Valve is not paying for bug reports related to CS2.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Effective 6/14/2023 10 AM PDT, CS:GO is out-of-scope for new reports. Reports
    for CS2 Limited Test are currently out-of-scope.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**However, this of course didn’t stop us from reporting bugs to Valve via e-mail.
    I hope you are not surprised to learn that these bugs have neither been fixed
    nor did they bother to reply. We have found at least one critical zero-day that
    compromises the competitive integrity of the game which is yet under the [industry-standard
    90-day responsible disclosure time frame](https://versprite.com/blog/what-is-responsible-disclosure/).**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Notable is that CS2 *replaced* CS:GO on September 27, 2023, which is a novum.
    This means CS:GO can’t be played anymore by the average user. Such a hard cutoff
    date is a new level of “*forcing things on the community they maybe don’t like*”.
    Gamers and platforms such as my employer [Esportal](https://esportal.com) were
    suddenly forced to use CS2.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**It’s not as if I never worked around bugs or needed to fix them on my own
    in CS:S or CS:GO. It is fine to a degree and expected as no software is bug free.
    But the amount of bugs in CS2 sets a new standard in a negative way. Especially
    bugs that are only relevant to community servers which Valve cares even less about.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Since middle of 2023, when CS2 release was apparent and we started to prepare
    support for it on Esportal, my working days look like this:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**No user logon[](#no-user-logon)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***Bugs that are reported by the community for years and years are still not
    fixed and are now in CS2\. One of these bugs is the infamous `No user logon` disconnection
    happening randomly while you are happily playing:***'
  prefs: []
  type: TYPE_NORMAL
- en: '****The infamous “No user logon” disconnection mid-game****'
  prefs: []
  type: TYPE_NORMAL
- en: '***For years ([2008](https://www.techsupportforum.com/threads/counter-strike-source-no-steam-logon-error.214386/),
    [2011](https://www.elitepvpers.com/forum/counter-strike/1264745-no-steam-logon.html),
    [2013](https://www.reddit.com/r/GlobalOffensive/comments/1fct7v/no_steam_logon_problem_need_help/),
    [2014](https://www.reddit.com/r/GlobalOffensive/comments/21auhx/kicked_for_no_steam_logon/),
    [2017](https://steamcommunity.com/discussions/forum/1/143387886726485073/), [2017](https://www.reddit.com/r/GlobalOffensive/comments/79i69y/no_user_logon/),
    [2018](https://steamcommunity.com/app/730/discussions/0/1727575977593194982/),
    [2021](https://steamcommunity.com/app/730/discussions/0/4809273833195803820/),
    [2023](https://www.reddit.com/r/FACEITcom/comments/nz3lmq/no_user_logon_problem_how_to_fix/),
    [2023](https://www.reddit.com/r/csgo/comments/16k7ioj/no_user_logon/)) people
    around the world have been reporting this issue in multiple forums, including
    the official support forum from Valve. Note that from a technical perspective
    `No user logon` and the sometimes mentioned `No steam logon` are likely just different
    names for the same root cause. I can’t know for sure, but it would make sense.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***There are countless *proposed fixes* to the issue:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Spoiler: None of these *proposed fixes* actually fix the issue. They are
    just randomly stopping the root cause from kicking in by pure coincidence.***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '***Esportal specific[](#esportal-specific)***'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***We were facing this issue on Esportal as well throughout the years. While
    the problem was not significant usually it was a constant companion that cost
    us several days to debug and mitigate it if one counts all the efforts made in
    the past. Yet we never really fixed the problem and only were able to mitigate
    so it does not happen often.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***CS:GO: *(all times CET)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First occurrence: 2019-11-15 19:15:32 (start of data information)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Last occurrence: 2023-09-26 21:38:01 (the day before the CS:GO got replaced
    by CS2)***'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '***In CS2 we were quite happy as apparently the issues was gone. We didn’t
    see any reports from our users and we didn’t see any occurrences in our logs.
    We were happy until the first week of January 2024 when we observed an increase
    of user reports related to this issue compared to all reports:***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '***This is significant, I started to investigate. Coincidentally, these are
    the time of the day when we received the reports:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***CS2: *(all times CET)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First occurrence: 2023-12-30 19:45:15 (and the only one that day)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '2023-12-31: no reports'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '2024-01-01: no reports'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '2024-01-02: no reports'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '2024-01-03: 15:19:30 - 15:38:26'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '2024-01-04: 14:27:12 - 15:57:24'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '2024-01-05: 14:00:57 - 17:13:36'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '2024-01-06: 13:01:55 - 17:35:12'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '2024-01-07: 12:56:30 - 17:44:09'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '2024-01-08: 14:15:06 - 16:41:57***'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '***My colleague connected the dots and wrote in Slack:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***~13-17 PM CET is 04-08 AM in Washington (where Valve is operating from),
    maybe they are running some kind of routine during their night'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — Jane Doe, Jan 8th, 2024, colorized***
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Previously the reported issues were evenly distributed throughout the day.
    Now they are concentrated in a specific time frame.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***We could confirm that players world wide are facing the issue outside of
    Esportal and thought it indeed is caused by some maintenance in the middle of
    the night in Washington.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Though I was thinking “I looked into this bug a hundred times already without
    a meaningful result” we were now incentivized to fix it once and for all given
    the significance of the problem and the volume of tickets.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***The symptoms[](#the-symptoms)***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***The observed `No user logon` errors happened 2-3 minutes after the player
    connected to the game. It was interesting to know, as this time span was pretty
    constant.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Luckily, a colleague mentioned, without knowing what important information
    they were sitting on at that time:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***I don’t see my skins in CS2 until some minutes into the game.***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Indeed, [players outside of Esportal reported missing skins](https://www.reddit.com/r/GlobalOffensive/comments/190s7am/gaben_stole_our_usps/)
    as well.***'
  prefs: []
  type: TYPE_NORMAL
- en: '****My colleague incepting an idea into my head without them knowing.****'
  prefs: []
  type: TYPE_NORMAL
- en: '***Boom! Was this the missing piece of the puzzle? The one information that
    was required to connect the dots which wasn’t apparent for years? I felt like
    I was in the movie [Inception](https://www.imdb.com/title/tt1375666/) and my colleague
    being [Leonardo DiCaprio](https://www.imdb.com/name/nm0000138/) incepting an idea
    into my head.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***It is well-known that Valve is sensitive when it comes to skins in their
    games. They make substantial amount of money with skins. So what if individual
    skins are not shown until maybe, just maybe, the player owning the skin has been
    properly authorized by Steam? This would make sure people can’t spoof their identity
    on the gameserver and use skins they don’t own.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Validation of the hypothesis[](#validation-of-the-hypothesis)***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***I picked a random match where a report came in. Matches are played 5vs5,
    so 10 players connect to a gameserver in total. Looking at the gameserver logs
    and applying proper filtering I was able to immediately see something that supports
    the hypothesis: `STEAM USERID validated` for a given user who didn’t have issues
    with `No user logon` appeared roughly 1min20s after the user connected. Example
    with user `Alice`:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***`|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '|`***'
  prefs: []
  type: TYPE_NORMAL
- en: '***In older logs before 3rd of January the Steam validation always finished
    within 2-3 seconds after connection instead.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***I tested myself and indeed: missing skins were only a thing during night
    time in Washington. I was able to reproduce the issue by connecting to a gameserver
    at 5 AM Washington time. I was not able to reproduce the issue during the Washington
    daytime.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Hypothesis that `No user logon` and no skins are connected is now confirmed.***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***NETWORK_DISCONNECT_STEAM_LOGON[](#network_disconnect_steam_logon)***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***Now it is apparent this issue has something to do with Steam validation.
    But what exactly is the bug? Coming back to the logs of the match I picked I now
    looked at user `Bob` who reported `No user logon` issues:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***`|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '|`***'
  prefs: []
  type: TYPE_NORMAL
- en: '***It is apparent it took 9 minutes for this user to get into the match until
    they received `STEAM USERID validated`.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***After the match ended, the disconnect reason is `NETWORK_DISCONNECT_EXITING`.
    It’s an internal identifiers of the [Source 2 engine](https://en.wikipedia.org/wiki/Source_2)
    which CS2 is using. The prefix `NETWORK_DISCONNECT_` is used to separate these
    identifiers from others in the engine.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***`NETWORK_DISCONNECT_EXITING` is a valid disconnect reason tells us the user
    closed their CS2 game while being connected to the gameserver. Another natural
    reason would be `NETWORK_DISCONNECT_DISCONNECT_BY_USER` which means the user disconnected
    from the gameserver by themselves without closing their CS2 game.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Looking at the events before the Steam validation was successful, four disconnections
    are apparent with two different reasons:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***`NETWORK_DISCONNECT_LOOPSHUTDOWN`***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***`NETWORK_DISCONNECT_STEAM_LOGON`***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***I can reasonably assume the message `No user logon` is the human translation
    of the identifier `NETWORK_DISCONNECT_STEAM_LOGON`, so I started looking into
    this first. Interesting is that `NETWORK_DISCONNECT_STEAM_LOGON` is an immediate
    consequence of `STEAMAUTH: Client Bob received failure code 8`. What does it mean
    though? To find out, I searched for the string `STEAMAUTH:` in the binary file
    that is providing the core of the Source 2 engine, `libengine2.so`:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***`|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '|`***'
  prefs: []
  type: TYPE_NORMAL
- en: '***The last part of the match is interesting: `STEAMAUTH: Client %s received
    failure code %d`. As I confirmed this string is in `libengine2.so`, I opened the
    file in a [reverse engineering](https://en.wikipedia.org/wiki/Reverse_engineering)
    tool, searched for the same string again and found the function which is referencing
    the string. This helps me to understand the context of the string and what it
    is used for.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***A little trick that comes handy when looking at Counter-Strike is the [CS:GO
    source code leak](https://www.ign.com/articles/valve-counter-strike-source-code-leak-no-danger).
    The same string appears in the file [sv_steamauth.cpp on line 792](https://github.com/perilouswithadollarsign/cstrike15_src/blob/f82112a2388b841d72cb62ca48ab1846dfcc11c8/engine/sv_steamauth.cpp#L792).
    Utilizing a [decompiler](https://en.wikipedia.org/wiki/Decompiler) I was able
    to get pseudo C code that reflects what the function is doing in CS2\. Combining
    the information from the source code leak and the reverse engineering tool I was
    able to understand the context of the string and what it is used for. The functions
    look nearly identical in both versions of Counter-Strike, but not 100%. Here is
    what the properly readable code for CS2 looks like:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***`|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '|`***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Leaving other cases aside as I am only interested in failure code `8` at
    the moment, this function disconnects the user from the gameserver with the beloved
    `NETWORK_DISCONNECT_STEAM_LOGON` reason. It happens when something called `CSteamServer3`
    tells us that the `eAuthSessionResponse` is one of:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***`k_EAuthSessionResponseUserNotConnectedToSteam` (maps to `1`)***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***`k_EAuthSessionResponseAuthTicketInvalidAlreadyUsed` (maps to `7`)***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***`k_EAuthSessionResponseAuthTicketInvalid` (maps to `8`)***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Steam3 validation:[](#steam3-validation)***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***So… what is `CSteamServer3`? I don’t know for sure, but I can deduce from
    what I learned looking at the leaked CS:GO source code. Saving you from following
    me through the jungle of C++ classes and functions, here is what I found out as
    diagram followed by a textual explanation:***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '***Steam3 server is likely responsible for authenticating users. It is not
    the same as the Steam client that you are using to play games. It is also not
    the same as the Steam servers that are responsible for matchmaking and other things.
    It is a separate thing. Think: it makes sure to proof that you are who you are
    claiming to be and that you own the game you are trying to play.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***When connecting to a gameserver, your game (`CS2.exe`) tells the gameserver
    what your Steam ID is. As you could be a bad person, you could modify the game
    and tell the gameserver that your Steam ID is `STEAM_0:0:0` instead. That would
    be the Steam ID of the first Steam account ever created. The gameserver has no
    way to know at this point whether your information is correct or not. This is
    where the Steam3 server comes into play. The gameserver asks the Steam3 server
    if the Steam ID is valid and whether you own the game.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Note that while the gameserver is waiting for the response, you can continue
    playing normally on the gameserver, but without skins.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***If the Steam3 server says `yes`, the gameserver starts trusting that information.
    It can now do interesting stuff with it, like starting to assign your personal
    skins to you. This would be the moment where you and others can see your skins.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***And now we know what is likely happening in Washington at night between
    4 and 8 AM: the Steam3 server is doing maintenance or is very slow to respond
    for other reasons. As we learned, that “slowness” is currently roughly 1min20s.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***If the Steam3 server says `no` instead, the gameserver knows that you (or
    your game) is lying and disconnects you with `NETWORK_DISCONNECT_STEAM_LOGON`.
    Looking at the logs from the match, the disconnect happens 2min50s seconds after
    the user connected to the gameserver. This is why users report the `No user logon`
    message appears after 2-3 minutes. This is a reasonable timeframe because in networks
    it’s always a good idea to have enough leeway for possible issues. It’s better
    to wait a bit longer than to disconnect too early.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Making it trustable[](#making-it-trustable)***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***The above scenario is not fully complete, though. It imposes one problem:
    it only guarantees that the Steam ID told to the gameserver is valid and owns
    the game. It does *not* proof that the instance of `CS2.exe` that connected to
    the gameserver is actually the one belonging to the signed in Steam account running
    on the same machine via `Steam.exe`. So what is needed is a way to proof that
    `CS2.exe` is actually trustable.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***This can be achieved by ensuring that `CS2.exe` can initiate a connection
    to Steam3 via `Steam.exe` running on the same machine. As `Steam.exe` as the Steam
    client knows the account which is currently signed in, it compares the Steam ID
    sent by `CS2.exe` to it. If they match, `Steam.exe` tells the Steam3 server that
    the Steam ID is valid, for `CS2.exe`. If it can’t match them, it doesn’t tell
    the Steam3 server about it.***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '***Learning: In reality though, the answer `no` is too simple. Deducing from
    above, it can be reasonably assumed that the answer `k_EAuthSessionResponseAuthTicketInvalid`
    (which maps to `8`) is the one we see in the logs for a failed Steam3 validation:
    `STEAMAUTH: Client Bob received failure code 8`.***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Reasons why Steam3 server could answer `no` are for example:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Steam3 is broken and answers wrong things: unlikely, even Valve can be trusted
    to get this right***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***Steam3 server is under maintenance: unlikely, as other users can connect***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***The Steam ID is not valid: unlikely, usually our players are trustworthy***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***The Steam ID is valid, but the instance of `CS2.exe` is not trustable: likely***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***Steam3 server doesn’t know about the Steam ID for this `CS2.exe` instance:
    likely***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***Aha! The last two points are likely candidates for the issue. But why do
    some users have problems with untrusted `CS2.exe` instances while other users
    are fine? And why was it possible that user `Bob` was able to validate their Steam
    ID after 9 minutes?***'
  prefs: []
  type: TYPE_NORMAL
- en: '***NETWORK_DISCONNECT_LOOPSHUTDOWN[](#network_disconnect_loopshutdown)***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***The other disconnect reason `NETWORK_DISCONNECT_LOOPSHUTDOWN` is still unclear.
    It’s appearing first and then the user connects again, eventually getting disconnected
    with `NETWORK_DISCONNECT_STEAM_LOGON`.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***`|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '|`***'
  prefs: []
  type: TYPE_NORMAL
- en: '***It seems like the gameserver disconnects the user with `NETWORK_DISCONNECT_LOOPSHUTDOWN`.
    Then the game connects itself again. This is a feature of the game and it happens
    automatically after 5 seconds to retry the connection, hence the multiple connection
    attempts visible in the gameserver logs.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Again: why are some users getting disconnected with `NETWORK_DISCONNECT_LOOPSHUTDOWN`
    while others aren’t?***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Loops in the Source 2 engine[](#loops-in-the-source-2-engine)***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***A loop in terms of software engineering is something that is executed until
    a specific goal is reached.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***The Source 2 engine has one active loop at a time. When `CS2.exe` starts,
    it is started with an active loop. A loop processes things in the background,
    waits until they are finished and once they are finished, invokes the next loop.
    A loop can run for a very long time, for example the `game` loop runs as long
    as you are playing. A loop can be shutdown in case something goes wrong.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***In this example, a the `levelload_loop` is executed until the level, materials
    and physics engine are loaded. Once they are loaded, the `levelload_loop` is considered
    finished and it executes the `game_loop`:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***`|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '|`***'
  prefs: []
  type: TYPE_NORMAL
- en: '***A valid shutdown reason for this loop would be missing material required
    for the level.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***The disconnection[](#the-disconnection)***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***So if a loop can be shutdown, and the disconnect reason is `NETWORK_DISCONNECT_LOOPSHUTDOWN`…***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Yes, I hear you thinking. This means that the first disconnection is initiated
    by `CS2.exe` because some loop is shutdown. The user is not disconnected by the
    gameserver but by themselves.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***No wonder the root cause hasn’t been found in so many years: it’s not a
    bug in the gameserver, it’s a bug in the game.***'
  prefs: []
  type: TYPE_NORMAL
- en: '****Me at that very moment: the famous “WASSS” by twitch streamer [ohnePixel](https://www.twitch.tv/ohnepixel)'
  prefs: []
  type: TYPE_NORMAL
- en: The 175+ shows his and my heartbeat rate because I searched in the wrong place
    for years****
  prefs: []
  type: TYPE_NORMAL
- en: '***So the search of the root cause has to continue in `CS2.exe` and not on
    the gameserver side.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Learning: the first disconnection before a `No user logon` comes from `CS2.exe`
    and not from the gameserver.***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***CS2 startup procedure[](#cs2-startup-procedure)***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***When `CS2.exe` is started it executes various loops from the Source 2 engine.
    The final loop is the `game` loop which is responsible for the actual menu interaction,
    user interaction and gameplay. It is *the* loop that is running as long as the
    game is fully loaded and/or you are playing.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***As `game` is the final loop it can’t be the one which is shut down and so
    it can’t be the one initiating the disconnection with `NETWORK_DISCONNECT_LOOPSHUTDOWN`
    as otherwise the game would end. To find out which loops are executed before the
    `game` loop, I decided to look at the output of the game console of `CS2.exe`,
    which can be enabled in the game settings.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Among a lot of other things, the following can be observed:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***`|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '|`***'
  prefs: []
  type: TYPE_NORMAL
- en: '***It appears there is a loop `levelload` (look at `CLoopModeLevelLoad`) which
    is executed before the `game` loop. In the end, that loop wants to transition
    to the `game` loop. And *directly* before that transition it says `AuthStatus
    (steamid:<redacted>): OK (OK)`. So the last thing that happens before the `game`
    loop is started is that the Steam ID validation is initiated.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***It all makes sense: `levelload` is called on startup of `CS2.exe`. While
    it’s not loading an actual map you are playing on, the initial screen you see
    in CS2 is likely considered a level too and initializing things like the intro
    video and the main menu. And while that initial screen is loaded in `levelload`
    it tries to initiate the validation with Steam3 via `Steam.exe`.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Learning: `levelload` is an important initialization loop and is, among
    other things, responsible to initiate the validation with Steam3 via `Steam.exe`
    from `CS2.exe` as the **last thing** this loop does.***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***The updated diagram with these learnings looks a bit different now. Note
    that `CS2.exe` is only considered the “initiator” of the `levelload` and all the
    game logic that was previously assigned to `CS2.exe` is taken over by the `game`
    loop:***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '***The bug[](#the-bug)***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***Deducing from above: CS2 is only fully initialized **after** the `levelload`
    loop successfully completes. The game can’t be considered to be in a usable state
    when it fails to complete.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Learning: When the initialization of `levelload` is incomplete (speak: CS2
    has not been fully loaded/initialized), the Steam3 validation is never initiated
    because it is the last thing that loop wants to do. This `CS2.exe` is now broken
    and can’t be fixed until a simple restart of `CS2.exe`.***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Putting everything together, the bug is now apparent:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***`NETWORK_DISCONNECT_LOOPSHUTDOWN` is caused by premature shutdown of `levelload`
    without initiating the Steam3 validation. Because `levelload` detects the premature
    shutdown, it disconnects the user from the gameserver every time a reconnection
    is tested.***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***The diagram looks like this when the bug is triggered:***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '****Note: while all of the examples, names and explanations here based on CS2,
    the bug is equivalent in CS:GO and even Counter-Strike: Source, though the technical
    names and means are different because those games are based on an older version
    of the Source engine.****'
  prefs: []
  type: TYPE_NORMAL
- en: '***Bug invocation[](#bug-invocation)***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***But why is `levelload` prematurely shutdown and why is it only happening
    to some users?***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Remember the multitude of people who thought they have fixed the issue?
    They didn’t, they were just lucky because the bug invocation is a [race condition](https://en.wikipedia.org/wiki/Race_condition)
    when CS2 is started in a specific way! Race condition means that the behavior
    of an application is dependent on timing, and that’s what happens here.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***The `levelload` loop is shut down before it can complete sometimes. And
    it’s only happening to some users because it depends on the following factors:***'
  prefs: []
  type: TYPE_NORMAL
- en: '*****The way Counter-Strike is started**: the blame factor is 90%***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***Speed of the computer: blame factor is 3%***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***Speed of the user: blame factor is 3%***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***State of the moon: blame factor is 3%***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***Something is actually wrong with the user configuration: blame factor is
    1%. Sadly I couldn’t investigate further here.***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***And what would be the way to start CS2 so the bug triggers with 99% certainty?***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Triggering the bug with 99% certainty: connect to a gameserver without CS2
    being open before.***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***And that’s why everyone is just too fast (to connect) for Valve:***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '***There are multiple ways of doing that:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Connecting from a server browser outside the game while it’s not running
    yet or has *just* been started before***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Connecting to a friend via Steam friends list outside the game while it’s
    not running yet or has *just* been started before***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Manually connecting to a server using Steams browser protocol (`steam://connect/127.0.0.1:27015`)
    outside the game while it’s not running yet or has *just* been started before***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***You can increase chances by starting CS2 and, before it has fully initialized,
    doing one of the above.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Solution[](#solution)***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*****Do not**:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Reinstall the game***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Validate the game files***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Restart Steam***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Restart your computer***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Disable WiFi***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Connect from outside the game to a gameserver before it has been started***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*****Instead:*****'
  prefs: []
  type: TYPE_NORMAL
- en: '***Start CS2 well before you connect to a gameserver. It’s good enough to wait
    until you see the game console or wait 5-10 seconds after you saw the intro video.***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***If you want to be absolutely sure you are not affected by the bug, start
    CS2, open the game console and type `status`. Check the output for this line.
    If you see it, you are good to go:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***`|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '|`***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Conclusion[](#conclusion)***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***To close the question you are still asking yourself: it was possible for
    the user `Bob` to validate 9 minutes after the first try for just one reason:
    they restarted CS2 and weren’t unlucky that time.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Another conclusion is: once a Steam ID is validated, it will never fail
    later for that game instance except if you close your Steam client while `CS2.exe`
    is running.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Closing words[](#closing-words)***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***While I am sure the proposed solution works for 99% of all users, I am well
    aware that there is a very small minority of users who are affected by this error
    for other reasons not covered in this blog post.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Guess what the Esportal matchmaking platform did until we fixed the behavior
    on 10th of January, 2024: it started `CS2.exe` and as soon as the process was
    available (but not fully initialized) it executed the `steam://connect/<IP>:<Port>`
    command with the appropriate matchmaking gameserver. User tickets related to this
    issue stopping coming in the moment we applied the fix and deployed it to every
    Esportal player.***'
  prefs: []
  type: TYPE_NORMAL
- en: '***That said, I am ending the blog post with a graph that I really like and
    I do hope to never ever see a Slack message with that error again:***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '***Social discussions:***'
  prefs: []
  type: TYPE_NORMAL
- en: '***Thanks to my colleagues for proof-reading and providing feedback!***'
  prefs: []
  type: TYPE_NORMAL
- en: '****Disclaimer: opinions my own and not the ones of my employer.****'
  prefs: []
  type: TYPE_NORMAL
