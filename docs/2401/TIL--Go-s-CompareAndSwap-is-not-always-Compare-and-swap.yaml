- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:35:58'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'TIL: Go’s CompareAndSwap is not always Compare-and-swap'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://lu.sagebl.eu/notes/go-cas/](https://lu.sagebl.eu/notes/go-cas/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'TIL: Go’s CompareAndSwap is not always Compare-and-swap'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Published on 7 January 2024
  prefs: []
  type: TYPE_NORMAL
- en: Go's standard package `sync/atomics` provides programmers with functions to
    use the underlying CPU-level atomic operations such as *compare-and-swap* (CAS),
    through `atomic.CompareAndSwapT` (where `T` is an integer type).
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem**: Not all CPU architectures offers a CAS instruction to rely on
    to implement `atomic.CompareAndSwapT`. However, Go must compile that function
    code to something semantically equivalent—let''s see what.'
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>What is a compare-and-swap?</summary>
  prefs: []
  type: TYPE_NORMAL
- en: Conceptually, CAS is an operation defined as followed, except it's atomic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]</details>'
  prefs: []
  type: TYPE_NORMAL
- en: x86_64 (AMD64)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at how `atomic.CompareAndSwapInt64` works with `int64`. The
    function calls a lower-level function `Cas64` which is defined in assembly language
    as follows. It's a mapping to x86_64's `LOCK CMPXCHG` ("Compare and Exchange")
    instruction that performs the CAS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The code is from [Go 1.21.5 source](https://cs.opensource.google/go/go/+/refs/tags/go1.21.5:src/runtime/internal/atomic/atomic_amd64.s;l=46-53).
  prefs: []
  type: TYPE_NORMAL
- en: 'Remarks: `LOCK` is not an instruction, it''s a prefix to make `CMPXCHG` atomic
    in concurrent contexts. `AX`, `BX`, `CX` and `FP` are translated into real corresponding
    registers during compilation; The Go assembler does not use the actual architecture''s
    regsiter names directly.'
  prefs: []
  type: TYPE_NORMAL
- en: Not much more to say, the Go function translates to the equivalent CPU instruction,
    here.
  prefs: []
  type: TYPE_NORMAL
- en: Arm64 (AArch64)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Arm64 case is interesting. The function `Cas64` defined for Arm64 has two
    ways to perform a CAS operation.
  prefs: []
  type: TYPE_NORMAL
- en: With the `CASAL` instruction, which is similar to AMD64's `CMPXCHG`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the `LDAXR` and `STLXR` instructions, enclosing the hand-coded CAS logic
    in-between.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `CASAL` instructions is part of the [Armv8.1-A Large System Extension (LSE)](https://learn.arm.com/learning-paths/servers-and-cloud-computing/lse/intro/)
    that provides CAS operations. If the CPU supports it, this path is taken. If the
    CPU does not support LSE, then the function fallbacks on another path, performing
    an "emulated" CAS with the help of `LDAXR` and `STLXR`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: (I added the comments.)
  prefs: []
  type: TYPE_NORMAL
- en: I was curious about the Arm64 case, because typical RISC architectures are not
    usually keen to provide instructions that operate directly on memory like x86_64.
    With RISC, one usually needs to load a value from memory, operates on it, and
    then stores the value into memory in distinct steps, unlike CAS does.
  prefs: []
  type: TYPE_NORMAL
- en: In theory LSE instructions such as `CASAL` should boost code performance. It
    appeared to be true on micro-benchmarks simulating cases of high contention, but
    according to some [benchmarks conducted by the author of the *MySQL on ARM* blog](https://mysqlonarm.github.io/ARM-LSE-and-MySQL/),
    the results are more mitigated on real workloads.
  prefs: []
  type: TYPE_NORMAL
- en: RISC-V 64 (RV64A)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: RV64A's `LRD` and `SCD` instructions are equivalent to Arm64's `LDAXR` and `STLXR`
    seen previously. The hand-coded logic is similar, too.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Code from [Go source](https://cs.opensource.google/go/go/+/refs/tags/go1.21.5:src/runtime/internal/atomic/atomic_riscv64.s;l=59-73).
  prefs: []
  type: TYPE_NORMAL
- en: 'It seems that RISC-V is purer than Arm64; it does not provide a ready-to-use
    CAS instruction. CAS must be done by hand with the LL/SC pattern. I found an interesting
    rationale in the RISC-V instruction manual:'
  prefs: []
  type: TYPE_NORMAL
- en: '<q>Both compare-and-swap (CAS) and LR/SC can be used to build lock-free data
    structures. After extensive discussion, we opted for LR/SC for several reasons:
    1) CAS suffers from the ABA problem, which LR/SC avoids because it monitors all
    accesses to the address rather than only checking for changes in the data value;
    2) CAS would also require a new integer instruction format to support three source
    operands (address, compare value, swap value) as well as a different memory system
    message format, which would complicate microarchitecture</q>'
  prefs: []
  type: TYPE_NORMAL
- en: Additional notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I looked at Go''s implementation because that''s what I use. Unsurprisingly,
    other implementations take the same approach: use LL/SC when CAS does not exist
    *in silico*, and for Arm64 use one or another pattern depending on the availability
    of LSE. The previously linked article says as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: <q>GCC auto emits a code with dynamic check with both variants (lse and non-lse).
    Runtime a decision is taken and accordingly said variant is executed.</q>
  prefs: []
  type: TYPE_NORMAL
