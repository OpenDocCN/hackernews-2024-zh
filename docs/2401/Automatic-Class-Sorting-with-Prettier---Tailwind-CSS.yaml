- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:54:28'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Automatic Class Sorting with Prettier - Tailwind CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://tailwindcss.com/blog/automatic-class-sorting-with-prettier](https://tailwindcss.com/blog/automatic-class-sorting-with-prettier)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: People have been talking about the best way to sort your utility classes in
    Tailwind projects for [at least four years](https://github.com/tailwindlabs/discuss/issues/97).
    Today we’re excited to announce that you can finally stop worrying about it with
    the release of our official [Prettier plugin for Tailwind CSS](https://github.com/tailwindlabs/prettier-plugin-tailwindcss).
  prefs: []
  type: TYPE_NORMAL
- en: This plugin scans your templates for class attributes containing Tailwind CSS
    classes, and then sorts those classes automatically following our [recommended
    class order](/blog/automatic-class-sorting-with-prettier#how-classes-are-sorted).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It works seamlessly with custom Tailwind configurations, and because it’s just
    a [Prettier](https://prettier.io/) plugin, it works anywhere Prettier works —
    including every popular editor and IDE, and of course on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, install `prettier-plugin-tailwindcss` as a dev-dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add the plugin to your [Prettier configuration file](https://prettier.io/docs/en/configuration):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can also [load the plugin by using the `--plugin` flag with the Prettier
    CLI, or by using the `plugins` option with the Prettier API](https://prettier.io/docs/en/plugins.html#using-plugins).
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: At its core, all this plugin does is organize your classes in the same order
    that Tailwind orders them in your CSS.
  prefs: []
  type: TYPE_NORMAL
- en: This means that any classes in the base layer will be sorted first, followed
    by classes in the components layer, and then finally classes in the utilities
    layer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Utilities themselves are sorted in the same order we sort them in the CSS as
    well, which means that any classes that override other classes always appear later
    in the class list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The actual order of the different utilities is loosely based on the box model,
    and tries to put high impact classes that affect the layout at the beginning and
    decorative classes at the end, while also trying to keep related utilities together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Modifiers like `hover:` and `focus:` are grouped together and sorted after
    any plain utilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Responsive modifiers like `md:` and `lg:` are grouped together at the end in
    the same order they’re configured in your theme — which is smallest to largest
    by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Any custom classes that don’t come from Tailwind plugins (like classes for
    targeting a third-party library) are always sorted to the front, so it’s easy
    to see when an element is using them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: We think [Prettier gets it right](https://prettier.io/docs/en/option-philosophy.html)
    when it comes to being opinionated and offering little in terms of customizability
    — at the end of the day the biggest benefit to sorting your classes is that it’s
    just one less thing to argue with your team about.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve tried really hard to come up with a sort order that is easy to understand
    and communicates the most important information as fast as possible.
  prefs: []
  type: TYPE_NORMAL
- en: The plugin *will* respect your `tailwind.config.js` file and work with any Tailwind
    plugins you’ve installed, but **there is no way to change the sort order**. Just
    like with Prettier, we think that the benefits of auto-formatting will quickly
    outweigh any stylistic preferences you have and that you’ll get used to it pretty
    fast.
  prefs: []
  type: TYPE_NORMAL
- en: Ready to try it out? [Check out the full documentation on GitHub →](https://github.com/tailwindlabs/prettier-plugin-tailwindcss)
  prefs: []
  type: TYPE_NORMAL
