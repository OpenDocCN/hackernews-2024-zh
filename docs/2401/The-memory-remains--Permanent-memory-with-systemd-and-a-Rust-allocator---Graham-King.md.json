["```\n// An arbitrary object we'll be using throughout this post\n#[allow(dead_code)]\n#[derive(Debug, Default)]\n#[repr(C)]\nstruct Person {\n    name: [u8; 8],\n    credits: u32,\n    age: u8,\n    is_admin: bool,\n    count: u32,\n} \n```", "```\n#![feature(allocator_api)]\nuse std::{\n    alloc::{AllocError, Allocator, GlobalAlloc, Layout, System},\n    ptr::NonNull,\n};\n\nstruct DelegateAlloc {}\nunsafe impl Allocator for DelegateAlloc {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {\n        unsafe {\n            let ptr = System.alloc(layout);\n            let slice = std::slice::from_raw_parts_mut(ptr, layout.size());\n            Ok(NonNull::new_unchecked(slice))\n        }\n    }\n\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {\n        System.dealloc(ptr.as_ptr(), layout)\n    }\n} \n```", "```\n let d = DelegateAlloc {};\n    let p = Box::new_in(Person::default(), d); \n```", "```\nfn main() -> anyhow::Result<()> {\n    let salloc = SystemdAlloc::new(\"person1\".to_string())?;\n    let mut p1: Box<Person, SystemdAlloc> = salloc.into_box(Person::default())?;\n    p1.count += 1;\n    println!(\"{}\", p1.count);\n    std:ðŸ§µ:sleep(std::time::Duration::from_secs(3600));\n} \n```", "```\ngktest[277943]: Received 0 fds from systemd\ngktest[277943]: Creating new store\ngktest[277943]: 1 \n```", "```\nsystemctl --user restart remains \n```", "```\nsystemd[4357]: Stopping remains.service\nsystemd[4357]: Stopped remains.service\nsystemd[4357]: Starting remains.service\nsystemd[4357]: Started remains.service\ngktest[278030]: Received 1 fds from systemd\ngktest[278030]: systemd sent us: person1\ngktest[278030]: Restoring\ngktest[278030]: 2 \n```", "```\n let mut p1: Box<Person, SystemdAlloc> = salloc.into_box(Person::default())?; \n```"]