- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:30:54'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:30:54
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Dennis Ritchie on & | vs. ==
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 丹尼斯·里奇谈& | vs. ==
- en: 来源：[https://www.lysator.liu.se/c/dmr-on-or.html](https://www.lysator.liu.se/c/dmr-on-or.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.lysator.liu.se/c/dmr-on-or.html](https://www.lysator.liu.se/c/dmr-on-or.html)
- en: From decvax!harpo!npoiv!alice!research!dmr Fri Oct 22 01:04:10 1982
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 decvax!harpo!npoiv!alice!research!dmr Fri Oct 22 01:04:10 1982
- en: 'Subject: Operator precedence'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 主题：运算符优先级
- en: 'Newsgroups: net.lang.c'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 新闻组：net.lang.c
- en: The priorities of `&& ||` vs. `==` etc. came about in the following way.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`&& ||` 与 `==` 的优先级等问题是这样产生的。'
- en: 'Early C had no separate operators for `&` and `&&` or `|` and `||`. (Got that?) Instead
    it used the notion (inherited from [B](msb-on-b.html#main) and [BCPL](alan-on-bcpl.html#bcpl-main))
    of "truth-value context": where a Boolean value was expected, after "if" and "while"
    and so forth, the & and | operators were interpreted as && and || are now; in
    ordinary expressions, the bitwise interpretations were used. It worked out pretty
    well, but was hard to explain. (There was the notion of "top-level operators"
    in a truth-value context.)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的 C 语言没有单独的 `&` 和 `&&` 或 `|` 和 `||` 运算符。（明白了吗？）相反，它使用了“真值上下文”的概念：在预期布尔值的地方，在“if”和“while”等之后，`&`
    和 `|` 运算符被解释为现在的 `&&` 和 `||`；在普通表达式中，使用了位操作的解释。这种方式效果还不错，但解释起来很困难。（在真值上下文中有“顶层运算符”的概念。）
- en: The precedence of `&` and `|` were as they are now.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`&` 和 `|` 的优先级与现在一样。'
- en: Primarily at the urging of Alan Snyder, the `&&` and `||` operators were added. This
    successfully separated the concepts of bitwise operations and short-circuit Boolean
    evaluation. However, I had cold feet about the precedence problems. For example,
    there were lots of programs with things like
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在艾伦·斯奈德的督促下，`&&` 和 `||` 运算符被添加了进来。这成功地区分了位操作和短路布尔运算的概念。然而，我对优先级问题有所顾虑。例如，有很多程序的代码像这样
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In retrospect it would have been better to go ahead and change the precedence
    of `&` to higher than `==`, but it seemed safer just to split `&` and `&&` without
    moving `&` past an existing operator. (After all, we had several hundred kilobytes
    of source code, and maybe 3 installations....)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾起来，改变 `&` 的优先级高于 `==` 更好，但只是将 `&` 和 `&&` 分开而不将 `&` 移动到现有运算符之后似乎更安全一些。（毕竟，我们有数百千字节的源代码，可能有
    3 个安装实例....）
- en: '[Dennis Ritchie](http://www.cs.bell-labs.com/who/dmr/index.html)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[丹尼斯·里奇](http://www.cs.bell-labs.com/who/dmr/index.html)'
