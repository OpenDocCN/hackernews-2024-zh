["```\n(import (lone print) (linux environment))\n\n(print environment) \n```", "```\n$ ./lone < env.ln\n{ \"HOME\" \"/home/matheus\" \"EDITOR\" \"vim\" … } \n```", "```\n$ cp lone env\n$ lone-embed env env.ln \n```", "```\n$ ./env\n{ \"HOME\" \"/home/matheus\" \"EDITOR\" \"vim\" … } \n```", "```\n$ strace env\nexecve(\"env\", [\"env\"], 0x7fe9752d40 /* 31 vars */) = 0\nwrite(1, \"{ \", 2)                                  = 2\nwrite(1, \"\\\"\", 1)                                  = 1\nwrite(1, \"HOME\", 4)                                = 4\nwrite(1, \"\\\"\", 1)                                  = 1\nwrite(1, \" \", 1)                                   = 1\n… \n```", "```\n$ xxd env | tail -n7\n00032fe0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n00032ff0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n00033000: 7b20 7275 6e20 2830 202e 2036 3329 207d  { run (0 . 63) }\n00033010: 0a28 696d 706f 7274 2028 6c6f 6e65 2070  .(import (lone p\n00033020: 7269 6e74 2920 286c 696e 7578 2065 6e76  rint) (linux env\n00033030: 6972 6f6e 6d65 6e74 2929 0a0a 2870 7269  ironment))..(pri\n00033040: 6e74 2065 6e76 6972 6f6e 6d65 6e74 290a  nt environment). \n```", "```\n$ readelf --segments env | grep 33000\nLOAD           0x0000000000033000 0x0000000000312000 0x0000000000312000\nLOOS+0xc6f6e65 0x0000000000033000 0x0000000000312000 0x0000000000312000 \n```", "```\nstruct lone_auxiliary_value {\n    union {\n        char *c_string;\n        void *pointer;\n        long integer;\n        unsigned long unsigned_integer;\n    } as;\n};\n\nstruct lone_auxiliary_vector {\n    long type;\n    struct lone_auxiliary_value value;\n} *auxv;\n\nvoid **pointer = (void **) envp;\nwhile (*pointer++ != 0);\nauxv = (struct auxiliary_vector *) pointer; \n```", "```\nstruct lone_auxiliary_value lone_auxiliary_vector_value(struct lone_auxiliary_vector *auxiliary, long type)\n{\n    for (; auxiliary->type != AT_NULL; ++auxiliary)\n        if (auxiliary->type == type)\n            return auxiliary->value;\n\n    return (struct lone_auxiliary_value) { .as.integer = 0 };\n}\n\nstruct lone_elf_segments lone_auxiliary_vector_elf_segments(struct lone_auxiliary_vector *auxv)\n{\n    return (struct lone_elf_segments) {\n        .entry_size  = lone_auxiliary_vector_value(auxv, AT_PHENT).as.unsigned_integer,\n        .entry_count = lone_auxiliary_vector_value(auxv, AT_PHNUM).as.unsigned_integer,\n        .segments    = lone_auxiliary_vector_value(auxv, AT_PHDR).as.pointer\n    };\n} \n```", "```\n #define PT_LONE 0x6c6f6e65 \n```", "```\ntypedef Elf64_Phdr lone_elf_segment; \ntypedef Elf32_Phdr lone_elf_segment; \n\nlone_elf_segment *lone_auxiliary_vector_embedded_segment(struct lone_auxiliary_vector *auxv)\n{\n    struct lone_elf_segments table = lone_auxiliary_vector_elf_segments(auxv);\n\n    for (size_t i = 0; i < table.entry_count; ++i) {\n        lone_elf_segment *entry = &table.segments[i];\n\n        if (entry->p_type == PT_LONE)\n            return entry;\n    }\n\n    return 0;\n}\n\nlone_elf_segment *segment = lone_auxiliary_vector_embedded_segment(auxv);\nstruct lone_bytes data;\ndata.count = segment->p_memsz;\ndata.pointer = (unsigned char *) segment->p_vaddr; \n```", "```\n{ run (0 . 63) } \n```"]