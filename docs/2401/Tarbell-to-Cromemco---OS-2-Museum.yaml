- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:05:16'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:05:16'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Tarbell to Cromemco | OS/2 Museum
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tarbell to Cromemco | OS/2 Museum
- en: 来源：[https://www.os2museum.com/wp/tarbell-to-cromemco/](https://www.os2museum.com/wp/tarbell-to-cromemco/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.os2museum.com/wp/tarbell-to-cromemco/](https://www.os2museum.com/wp/tarbell-to-cromemco/)
- en: While playing around with [old versions of 86-DOS](https://www.os2museum.com/wp/86-dos-revisited/),
    I came across a disk image of [86-DOS 1.14](https://archive.org/details/86-dos-1.14).
    I ran the older 86-DOS versions in the SIMH simulator which can emulate the Cromemco
    disk controller supported by 86-DOS.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩弄[旧版本的 86-DOS](https://www.os2museum.com/wp/86-dos-revisited/)时，我找到了[86-DOS
    1.14](https://archive.org/details/86-dos-1.14)的磁盘映像。我在 SIMH 模拟器中运行了较旧版本的 86-DOS，该模拟器可以模拟
    86-DOS 支持的 Cromemco 磁盘控制器。
- en: Unfortunately the 86-DOS 1.14 disk was meant to be used with the different and
    incompatible Tarbell disk controllers. SIMH doesn’t emulate the Tarbell controller
    and the disk can’t be booted.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，86-DOS 1.14 磁盘是用于与不同且不兼容的 Tarbell 磁盘控制器一起使用的。SIMH 不模拟 Tarbell 控制器，因此无法启动磁盘。
- en: Then it occurred to me that 86-DOS came with all the required source code and
    it should be possible to adapt the Tarbell disk to use the Cromemco disk controller
    instead. The two 86-DOS variants (Cromemco and Tarbell) used the exact same 8″
    floppy format (77 tracks, 26 sectors of 128 bytes each), just the disk controller
    was different, and therefore only the boot loader and the I/O system (both within
    the reserved tracks) were different; the actual files on the FAT file system were
    identical.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我意识到 86-DOS 随附了所有所需的源代码，应该可以将 Tarbell 磁盘改为使用 Cromemco 磁盘控制器。两个 86-DOS 变种（Cromemco
    和 Tarbell）使用完全相同的 8 英寸软盘格式（77 个磁道，每个磁道 26 个 128 字节的扇区），只是磁盘控制器不同，因此启动加载程序和 I/O
    系统（都位于保留的磁道内）不同；FAT 文件系统上的实际文件相同。
- en: Everything necessary is on the 86-DOS 1.14 disk, all that’s missing is a way
    to edit and reassemble the source files and put the resulting object code into
    place on the disk. But that’s actually not too difficult either — the only additional
    requirement is an 86-DOS disk that boots in SIMH. And fortunately there is a suitable
    86-DOS 1.10 disk. With that in hand, it is possible to attach both the (bootable)
    Cromemco 86-DOS 1.10 disk and the (non-bootable) Tarbell 86-DOS 1.14 disk to SIMH
    and boot.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 86-DOS 1.14 磁盘上包含了所有必需的内容，唯一缺少的是一种编辑和重新组装源文件，并将生成的目标代码放置在磁盘上的方法。但这实际上也不太困难 —
    唯一额外的要求是具有 SIMH 引导功能的 86-DOS 磁盘。幸运的是有一张适用的 86-DOS 1.10 磁盘。有了这个，就可以将（可启动的）Cromemco
    86-DOS 1.10 磁盘和（不可启动的）Tarbell 86-DOS 1.14 磁盘都连接到 SIMH 并启动。
- en: 'The boot disk will be A: and B: will be the not-yet-bootable Tarbell disk.
    The tools on the 1.14 disk have no trouble running under 86-DOS 1.10.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 引导盘将是 A：而 B：将是尚未可启动的 Tarbell 磁盘。1.14 磁盘上的工具在 86-DOS 1.10 下运行时没有任何问题。
- en: Prepare SIMH environment
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 准备 SIMH 环境
- en: Before any work can start, the compressed IMD image has to be converted to an
    uncompressed one using the IMDU utility, so that SIMH can write to it. This has
    already been done and an archive with the required disk images and SIMH can be
    obtained [here](/files/tarbell-to-cromemco.zip). The SIMH emulator set up to run
    86-DOS originally came from [here](https://web.archive.org/web/20080819181906/http://www.86dos.org/).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何工作开始之前，必须使用 IMDU 实用程序将压缩的 IMD 映像转换为未压缩的映像，以便 SIMH 可以对其进行写入。这已经完成了，并且可以通过[此处](/files/tarbell-to-cromemco.zip)获取带有所需磁盘映像和
    SIMH 的存档。最初用于运行 86-DOS 的 SIMH 模拟器来自[这里](https://web.archive.org/web/20080819181906/http://www.86dos.org/)。
- en: To use the two-disk setup, run ‘altairz80 tartocro’ on a Windows machine. Keep
    in mind that to exit SIMH, you can use Ctrl-Break.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用双磁盘设置，请在 Windows 机器上运行“altairz80 tartocro”。请记住，要退出 SIMH，可以使用 Ctrl-Break。
- en: Once 86-DOS boots, the first step is editing BOOT.ASM and DOSIO.ASM to support
    Cromemco rather than Tarbell controllers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 86-DOS 启动后，第一步是编辑 BOOT.ASM 和 DOSIO.ASM，以支持 Cromemco 而不是 Tarbell 控制器。
- en: To do that, there is EDLIN, which is… not a very nice editor, but it *does*
    work. Basic EDLIN documentation can be [found on Bitsavers](http://bitsavers.informatik.uni-stuttgart.de/pdf/seattleComputer/86-DOS_0.3_Users_Manual_1980.pdf#page=13&zoom=auto,-138,657).
    EDLIN has its own command line; to get at a specific line, enter the line number.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，有 EDLIN，它... 不是一个很好的编辑器，但*确实*可以工作。基本的 EDLIN 文档可以在[Bitsavers](http://bitsavers.informatik.uni-stuttgart.de/pdf/seattleComputer/86-DOS_0.3_Users_Manual_1980.pdf#page=13&zoom=auto,-138,657)上找到。EDLIN
    有自己的命令行；要访问特定行，请输入行号。
- en: Fix BOOT.ASM
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 修复 BOOT.ASM
- en: 'In BOOT.ASM, CROMEMCOLARGE must be enabled and TARBELLDOUBLE disabled. To do
    that, change line 18 from ‘CROMEMCOLARGE: EQU 0’ to ‘CROMEMCOLARGE: EQU 1’ and
    line 20 from ‘TARBELLDOUBLE: EQU 1’ to ‘TARBELLDOUBLE: EQU 0’.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '在 BOOT.ASM 中，必须启用 CROMEMCOLARGE 并禁用 TARBELLDOUBLE。要做到这一点，将第 18 行从 ‘CROMEMCOLARGE:
    EQU 0’ 改为 ‘CROMEMCOLARGE: EQU 1’，将第 20 行从 ‘TARBELLDOUBLE: EQU 1’ 改为 ‘TARBELLDOUBLE:
    EQU 0’。'
- en: Note that to copy the template (previous line contents) in EDLIN, the F3 key
    does not work but it is possible to press Esc and then U (this must be capital
    U not lowercase u; in other words, first press Esc and then Shift+U).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在 EDLIN 中复制模板（前一行内容）时，F3 键不起作用，但可以按 Esc，然后按 U（这必须是大写的 U，不是小写的 u；换句话说，首先按
    Esc，然后按 Shift+U）。
- en: 'Write out the modified file and exit EDLIN by entering ‘E’ on the EDLIN command
    line (in this version, the E can be lowercase). The SIMH output will look about
    like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 写出修改后的文件，并在 EDLIN 命令行上输入‘E’退出 EDLIN（在此版本中，E 可以是小写）。SIMH 输出将看起来像这样：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Fix DOSIO.ASM
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 修复 DOSIO.ASM
- en: 'Now DOSIO.ASM needs to be similarly modified. TARBELLDD must be disabled, CROMEMCO4FDC
    enabled, and additionally FASTSEEK must be enabled (otherwise the source file
    won’t assemble). To do that, change line 26 from ‘TARBELLDD: EQU 1’ to ‘TARBELLDD:
    EQU 0’, line 27 from ‘CROMEMCO4FDC: EQU 0’ to ‘CROMEMCO4FDC: EQU 1’, and finally
    change line 47 from ‘FASTSEEK: EQU 0’ to ‘FASTSEEK: EQU 1’.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '现在需要类似地修改 DOSIO.ASM。必须禁用 TARBELLDD，启用 CROMEMCO4FDC，并额外启用 FASTSEEK（否则源文件将无法汇编）。要做到这一点，将第
    26 行从 ‘TARBELLDD: EQU 1’ 改为 ‘TARBELLDD: EQU 0’，将第 27 行从 ‘CROMEMCO4FDC: EQU 0’
    改为 ‘CROMEMCO4FDC: EQU 1’，最后将第 47 行从 ‘FASTSEEK: EQU 0’ 改为 ‘FASTSEEK: EQU 1’。'
- en: Assemble modified source
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 汇编修改后的源文件
- en: 'Now assemble the modified source files. To avoid creating large listing files
    which take up too much disk space, it is necessary to use the rather odd syntax
    of the SCP assembler as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在汇编修改后的源文件。为了避免创建占用太多磁盘空间的大型列表文件，需要使用 SCP 汇编器的相当奇怪的语法，如下所示：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The assembler always assumes .ASM extension for source files. The fake ‘bbz’
    extension tells ASM to look for the source .ASM file on drive B:, also use drive
    B: to output the resulting .HEX file, and to produce no listing file (.PRN).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '汇编器始终假定源文件的扩展名为 .ASM。假的‘bbz’扩展名告诉 ASM 在 B: 驱动器上查找源 .ASM 文件，还使用 B: 驱动器来输出生成的
    .HEX 文件，并且不生成列表文件（.PRN）。'
- en: Now the HEX files need to be converted to binary (.COM) files. That is accomplished
    by the HEX2BIN utility. Simply run ‘hex2bin boot’ and ‘hex2bin dosio’. There should
    now be a fresh BOOT.COM and DOSIO.COM.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在需要将 HEX 文件转换为二进制（.COM）文件。这可以通过 HEX2BIN 实用程序完成。只需运行‘hex2bin boot’和‘hex2bin
    dosio’。现在应该有一个新的 BOOT.COM 和 DOSIO.COM。
- en: Install modified code
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装修改后的代码
- en: The last step requires writing the boot sector and I/O system to the right place
    on the disk. The boot sector is the first sector, and the I/O system immediately
    follows it on the first track. Conveniently, the DEBUG utility can do all the
    hard work.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步需要将引导扇区和 I/O 系统写入磁盘的正确位置。引导扇区是第一个扇区，I/O 系统紧随其后位于第一个磁道上。幸运的是，DEBUG 实用程序可以完成所有繁重的工作。
- en: 'To put the boot sector in place, run ‘debug boot.com’, then enter ‘w 100 1
    0 1’ and finally exit DEBUG with ‘q’. Like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要将引导扇区放置在正确位置，运行‘debug boot.com’，然后输入‘w 100 1 0 1’，最后使用‘q’退出 DEBUG。像这样：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The W command has four arguments. The first is the starting address, in this
    case 100h because .COM files are loaded at address 100h in the program segment.
    The second argument is the drive, with drive B: being addressed as drive 1 in
    DEBUG. The third argument is the starting record/sector, and zero is the boot
    sector. The fourth and last argument is the number of records to copy (one).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'W 命令有四个参数。第一个是起始地址，在本例中为 100h，因为 .COM 文件加载到程序段的地址 100h。第二个参数是驱动器，以 DEBUG 中的驱动器
    B: 为驱动器 1。第三个参数是起始记录/扇区，零是引导扇区。第四个也是最后一个参数是要复制的记录数（一个）。'
- en: Now the process must be repeated for the I/O system. Run ‘debug dosio.com’ and
    then ‘w 100 1 1 8’, exit DEBUG with ‘q’.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在必须为 I/O 系统重复这个过程。运行‘debug dosio.com’，然后‘w 100 1 1 8’，用‘q’退出 DEBUG。
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The W command is almost the same, except it writes 8 sectors and starts at logical
    sector 1 (the sector immediately following the boot sector).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: W 命令几乎相同，只是它写入 8 个扇区，并从逻辑扇区 1 开始（即在引导扇区之后的扇区）。
- en: Boot it up
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 启动它
- en: 'If everything went well, the modified 86-DOS 1.14 disk is now bootable in SIMH:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，修改后的 86-DOS 1.14 磁盘现在可以在 SIMH 中启动：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And there it is! 86-DOS 1.14 running in SIMH on the emulated Cromemco controller.
    All the necessary tools were on the 1.14 disk itself, the only thing missing was
    a way to run them. Borrowing an existing SIMH compatible 86-DOS disk did the trick.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是！在模拟的Cromemco控制器上运行的86-DOS 1.14。所有必要的工具都在1.14磁盘上，唯一缺少的是运行它们的方法。借用一个现有的SIMH兼容的86-DOS磁盘解决了这个问题。
