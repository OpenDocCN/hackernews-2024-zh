- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:15:17'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:15:17'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'MicroZed Alveo Edition: Installing XDMA Drivers.'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'MicroZed Alveo Edition: 安装 XDMA 驱动程序。'
- en: 来源：[https://www.adiuvoengineering.com/post/microzed-alveo-edition-installing-xdma-drivers](https://www.adiuvoengineering.com/post/microzed-alveo-edition-installing-xdma-drivers)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.adiuvoengineering.com/post/microzed-alveo-edition-installing-xdma-drivers](https://www.adiuvoengineering.com/post/microzed-alveo-edition-installing-xdma-drivers)
- en: So far in this series, we have introduced the range of Alveo cards and created
    our first application, based on the standard card management solution.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本系列中到目前为止，我们已经介绍了 Alveo 卡的范围，并创建了我们的第一个应用程序，基于标准的卡管理解决方案。
- en: In this blog we are going to install the software drivers on our Linux machine
    which contains the U55C and run a simple test to ensure the drivers are correctly
    installed. This will then allow us to look at creating additional software which
    allows us to exploit the DMA.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本博客中，我们将在包含 U55C 的 Linux 机器上安装软件驱动程序，并运行一个简单的测试以确保驱动程序已正确安装。这将允许我们查看创建额外的软件，以便利用
    DMA。
- en: The DMA instantiated as part of the CMS reference design uses the XDMA as such
    we need to install the XDMA drivers for our host computer.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 CMS 参考设计的一部分实例化的 DMA 使用了 XDMA，因此我们需要为我们的主机计算机安装 XDMA 驱动程序。
- en: To get started with this we are going to first clone the XDMA GitHub repository
    located [here](https://github.com/Xilinx/dma_ip_drivers/tree/2022.1.5), once the
    directory is cloned we are able to then compile the source to create the necessary
    drivers for our host machine.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用这个，我们将首先克隆位于[这里](https://github.com/Xilinx/dma_ip_drivers/tree/2022.1.5)的
    XDMA GitHub 仓库，一旦目录被克隆，我们就能够编译源代码，为我们的主机机器创建必要的驱动程序。
- en: To do this we need to compile the source under the XDMA path, from the cloned
    repo we are then able to compile the source by running the make file.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要在 XDMA 路径下编译源代码，从克隆的 repo 中，我们可以通过运行 make 文件来编译源代码。
- en: However, before we do this we need to double check the U55C cards  PCi identifier
    is included in the file XDMA_MOD.c. This file has a declaration of device PCi
    ids which are associated with the vendor ID.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在我们执行此操作之前，我们需要仔细检查文件 XDMA_MOD.c 中是否包含了 U55C 卡的 PCi 标识符。该文件包含了与供应商 ID 相关联的设备
    PCi ID 的声明。
- en: We can obtain the PCi identifier of the U55C by using the command
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用以下命令获取 U55C 的 PCi 标识符
- en: This will report the PCI ID of the fitted card, if this PCI ID is not within
    the XMDA_MOD.c file then add it into the list which begins at line 47
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这将报告安装的卡的 PCI ID，如果此 PCI ID 不在 XMDA_MOD.c 文件中，则将其添加到从第 47 行开始的列表中
- en: With the PCi Identifier added to the source code we are now in a position that
    we can compile the driver by using the make command, we need to do this from within
    the XDMA source directory.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将 PCi 标识符添加到源代码中后，我们现在可以使用 make 命令编译驱动程序，我们需要在 XDMA 源目录中执行此操作。
- en: Having created and installed the drivers, the next step is to compile the tool
    we will be using to test the compilation and installation.  Change directory into
    the tools directory and run the command
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 创建并安装了驱动程序后，下一步是编译我们将用于测试编译和安装的工具。切换到工具目录并运行以下命令
- en: We can now check we have the driver installed correctly and run tests to ensure
    we can communicate with the Alveo U55C board. Remember to program the board first
    with the CMS example design using hardware manager.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以检查我们是否正确安装了驱动程序，并运行测试以确保我们能够与 Alveo U55C 板通信。记得首先使用硬件管理器对板进行编程，使用 CMS
    示例设计。
- en: To load the driver into the kernel, we need to change directory into the tests
    directory and run the script load driver with the command.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要将驱动程序加载到内核中，我们需要切换到测试目录，并运行脚本加载驱动程序的命令。
- en: When this runs, you should expect to see the output as below.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行此操作时，您应该期望看到以下输出。
- en: To double check the XDMA driver was correctly installed and bound to the Alveo
    U55X we can run the command
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要双重检查 XDMA 驱动程序是否已正确安装并绑定到 Alveo U55X，我们可以运行以下命令
- en: This clearly shows the XDMA is in use as the kernel driver and module.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这清楚地显示了 XDMA 正在作为内核驱动程序和模块使用。
- en: The final step is to run the XDMA test script also available within the tests
    directory, to execute the script issue the command.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是运行测试目录中也可用的 XDMA 测试脚本，要执行脚本，请发出以下命令。
- en: This will run a series of tests between the host processor and the Alveo U55C
    using the XDMA driver.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在主机处理器和 Alveo U55C 之间使用 XDMA 驱动程序运行一系列测试。
- en: As we can see these tests all pass as expected so we are able to say we have
    correctly installed the driver and it is working with our CMS example design.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，这些测试都如预期地通过了，因此我们能够说我们已经正确安装了驱动程序，并且它与我们的 CMS 示例设计一起工作。
- en: In the next blog we will examine how to create our own software which uses this
    driver.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一篇博客中，我们将探讨如何创建使用此驱动程序的自己的软件。
- en: If you enjoyed the blog why not take a look at the free webinars, workshops
    and training courses we have created over the years. Highlights include
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢这篇博客，不妨看看我们多年来制作的免费网络研讨会、工作坊和培训课程。重点包括
- en: Do you want to know more about designing embedded systems from scratch? Check
    out our book on creating embedded systems. This book will walk you through all
    the stages of requirements, architecture, component selection, schematics, layout,
    and FPGA / software design. We designed and manufactured the board at the heart
    of the book! The schematics and layout are available in Altium [here](https://www.e3designers.com/altium-365)Learn
    more about the board (see previous blogs on [Bring up](https://www.adiuvoengineering.com/post/microzed-chronicles-configuring-zynq-on-a-custom-board),
    [DDR validation,](https://www.adiuvoengineering.com/post/microzed-chronicles-validating-your-custom-zynq-board-memory)
    [USB](https://www.adiuvoengineering.com/post/microzed-chronicles-smart-sensor-iot-board-getting-usb-up-and-running),
    [Sensors](https://www.adiuvoengineering.com/post/microzed-chronicles-petalinux-i2c-in-the-ps-and-axi-iic))
    and view the schematics [here](https://www.adiuvoengineering.com/post/sensorsthink-board-schematic).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '想要了解如何从零开始设计嵌入式系统吗？看看我们关于创建嵌入式系统的书籍。这本书将引导您完成所有阶段的要求、架构、元件选择、原理图、布局和 FPGA/软件设计。我们设计并制造了书中核心的板子！原理图和布局可在
    Altium 中获取[这里](https://www.e3designers.com/altium-365)了解有关板子的更多信息（请参阅先前博客中的[引导](https://www.adiuvoengineering.com/post/microzed-chronicles-configuring-zynq-on-a-custom-board)、[DDR
    验证](https://www.adiuvoengineering.com/post/microzed-chronicles-validating-your-custom-zynq-board-memory)、[USB](https://www.adiuvoengineering.com/post/microzed-chronicles-smart-sensor-iot-board-getting-usb-up-and-running)、[传感器](https://www.adiuvoengineering.com/post/microzed-chronicles-petalinux-i2c-in-the-ps-and-axi-iic))，并查看原理图[此处](https://www.adiuvoengineering.com/post/sensorsthink-board-schematic)。 '
