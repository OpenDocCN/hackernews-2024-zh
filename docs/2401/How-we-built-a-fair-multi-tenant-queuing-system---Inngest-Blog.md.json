["```\ntsx\n\ninngest.createFunction(\n\n {\n\n id:  \"update-user\",  // Unique function ID\n\n concurrency:  15,  // Concurrency controls per function (https://innge.st/concurrency)\n\n debounce: { // Debounce management (https://innge.st/debounce)\n\n period:  \"5s\",\n\n timeout:  \"20s\",\n\n }\n\n },\n\n { event:  \"clerk/user.created\" },\n\n  async ({ event, step }) => {\n\n  const  user  =  await  step.run(\"Load user info\",  async () => {\n\n  return  await  clerk.users.getUser(event.data.userId);\n\n });\n\n  return  await  step.run(\"Update DB\",  async () => {\n\n  const  updates  =  userFields(user); // grab fields from clerk\n\n  return  await  db.users.where({ clerk_id:  user.id }).update(updates);\n\n });\n\n }\n\n);\n\n```", "```\nts\n\n// ❌ classic queue workers aren't compatible with multi-tenant queues,\n\n// or > 1 custom concurrency limits per function\n\nworker.concurrency =  100;\n\nworker.run([\"queue:1\",  \"queue:2\"], () => {\n\n  // run jobs in queue 1 and 2\n\n})\n\n```"]