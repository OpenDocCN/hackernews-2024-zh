- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:30:29'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: The One Billion Row Challenge - Gunnar Morling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://www.morling.dev/blog/one-billion-row-challenge/](https://www.morling.dev/blog/one-billion-row-challenge/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Update Jan 4: Wow, this thing really took off!* *1BRC is discussed at a couple
    of places on the internet, including [Hacker News](https://news.ycombinator.com/item?id=38851337),
    [lobste.rs](https://lobste.rs/s/u2qcnf/one_billion_row_challenge), and [Reddit](https://old.reddit.com/r/programming/comments/18x0x0u/the_one_billion_row_challenge/).*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks a lot for all the submissions, this is going way beyond what I‚Äôd have
    expected!* *I am behind a bit with evalutions due to the sheer amount of entries,
    I will work through them bit by bit.* *I have also made a few clarifications to
    [the rules](https://github.com/gunnarmorling/1brc#faq) of the challenge; please
    make sure to read them before submitting any entries.*'
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs kick off 2024 true coder style‚Äî‚ÄãI‚Äôm excited to announce the [One Billion
    Row Challenge](https://github.com/gunnarmorling/onebrc) (1BRC), running from Jan
    1 until Jan 31.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your mission, should you decide to accept it, is deceptively simple: write
    a Java program for retrieving temperature measurement values from a text file
    and calculating the min, mean, and max temperature per weather station. There‚Äôs
    just one caveat: the file has **1,000,000,000 rows**!'
  prefs: []
  type: TYPE_NORMAL
- en: 'The text file has a simple structure with one measurement value per row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '1'
  prefs: []
  type: TYPE_NORMAL
- en: '2'
  prefs: []
  type: TYPE_NORMAL
- en: '3'
  prefs: []
  type: TYPE_NORMAL
- en: '4'
  prefs: []
  type: TYPE_NORMAL
- en: '5'
  prefs: []
  type: TYPE_NORMAL
- en: '6'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Hamburg;12.0
  prefs: []
  type: TYPE_NORMAL
- en: Bulawayo;8.9
  prefs: []
  type: TYPE_NORMAL
- en: Palembang;38.8
  prefs: []
  type: TYPE_NORMAL
- en: St. John's;15.2
  prefs: []
  type: TYPE_NORMAL
- en: Cracow;12.6
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The program should print out the min, mean, and max values per station, alphabetically
    ordered like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '1'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '{Abha=5.0/18.0/27.4, Abidjan=15.7/26.0/34.1, Ab√©ch√©=12.1/29.4/35.6, Accra=14.7/26.4/33.1,
    Addis Ababa=2.1/16.0/24.3, Adelaide=4.1/17.3/29.7, ...}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The goal of the 1BRC challenge is to create the fastest implementation for this
    task, and while doing so, explore the benefits of modern Java and find out how
    far you can push this platform. So grab all your (virtual) threads, reach out
    to the Vector API and SIMD, optimize your GC, leverage AOT compilation, or pull
    any other trick you can think of.
  prefs: []
  type: TYPE_NORMAL
- en: 'There‚Äôs a few simple rules of engagement for 1BRC (see [here](https://github.com/gunnarmorling/onebrc#running-the-challenge)
    for more details):'
  prefs: []
  type: TYPE_NORMAL
- en: Any submission must be written in Java
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any Java distribution available through [SDKMan](https://sdkman.io/) as well
    as early access builds from [openjdk.net](https://openjdk.net) may be used, including
    EA builds for OpenJDK projects like Valhalla
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No external dependencies may be used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To enter the challenge, clone the [1brc repository](https://github.com/gunnarmorling/1brc)
    from GitHub and follow the instructions in the README file. There is a very [basic
    implementation](https://github.com/gunnarmorling/1brc/blob/main/src/main/java/dev/morling/onebrc/CalculateAverage_baseline.java)
    of the task which you can use as a baseline for comparisons and to make sure that
    your own implementation emits the correct result. Once you‚Äôre satisfied with your
    work, open a pull request against the upstream repo to submit your implementation
    to the challenge.
  prefs: []
  type: TYPE_NORMAL
- en: All submissions will be evaluated by running the program on a [Hetzner Cloud
    CCX33](https://www.hetzner.com/cloud) instance (8 dedicated vCPU, 32 GB RAM).
    The `time` program is used for measuring execution times, i.e. end-to-end times
    are measured. Each contender will be run five times in a row. The slowest and
    the fastest runs are discarded. The mean value of the remaining three runs is
    the result for that contender and will be added to the [leaderboard](https://github.com/gunnarmorling/onebrc#results).
    If you have any questions or would like to discuss any potential 1BRC optimization
    techniques, please join [the discussion](https://github.com/gunnarmorling/1brc/discussions)
    in the GitHub repo.
  prefs: []
  type: TYPE_NORMAL
- en: As for a prize, by entering this challenge, you may learn something new, get
    to inspire others, and take pride in seeing your name listed in the scoreboard
    above. Rumor has it that the winner may receive a unique 1Ô∏è‚É£üêùüèéÔ∏è t-shirt, too.
  prefs: []
  type: TYPE_NORMAL
- en: So don‚Äôt wait, join this challenge, and find out how fast Java can be‚Äî‚ÄãI‚Äôm really
    curious what the community will come up with for this one. Happy 2024, coder style!
  prefs: []
  type: TYPE_NORMAL
