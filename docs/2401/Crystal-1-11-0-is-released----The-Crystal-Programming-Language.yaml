- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:46:23'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Crystal 1.11.0 is released! - The Crystal Programming Language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://crystal-lang.org/2024/01/08/1.11.0-released/](https://crystal-lang.org/2024/01/08/1.11.0-released/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We are announcing a new Crystal release with several new features and bug fixes.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-built packages are available on [GitHub Releases](https://github.com/crystal-lang/crystal/releases/tag/1.11.0)
    and our official distribution channels. See [crystal-lang.org/install](https://crystal-lang.org/install/)
    for installation instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Stats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This release includes [178 changes since 1.10.1](https://github.com/crystal-lang/crystal/pulls?q=is%3Apr+milestone%3A1.11.0)
    by 28 contributors. We thank all the contributors for all the effort put into
    improving the language! ❤️
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below we list the most remarkable changes in the language, compiler and stdlib.
    This is a pretty big release with lots of things going on, so hold tight 🚀
  prefs: []
  type: TYPE_NORMAL
- en: For details, visit the [full changelog](https://github.com/crystal-lang/crystal/releases/tag/1.11.0).
  prefs: []
  type: TYPE_NORMAL
- en: LLVM 18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the biggest steps forward is support for upcoming LLVM 18 which allows
    linking LLVM dynamically on Windows ([#14101](https://github.com/crystal-lang/crystal/pull/14101)).
    Additionally, LLVM 18 now provides everything we need in the upstream C API, removing
    the need for our wrapper extension `llvm_ext`. It’s still necessary for older
    LLVM versions, so we’ll keep it around for a while. But the future tool chain
    is getting simplified. Read more in [#13946](https://github.com/crystal-lang/crystal/issues/13946).
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks [@HertzDevil](https://github.com/HertzDevil)*'
  prefs: []
  type: TYPE_NORMAL
- en: Compiler Optimization Levels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The compiler gains four distinct optimization levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-O0`: No optimization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-O1`: Low optimization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-O2`: Middle optimization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-O3`: High optimization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each level activates the respective LLVM `RunPasses` and `CodeGenOptLevel` optimizations.
  prefs: []
  type: TYPE_NORMAL
- en: '`-O3` corresponds to the existing release mode and `-O0` corresponds to the
    default non-release mode. `-O0` remains the default and `--release` is equivalent
    to `-O3 --single-module`.'
  prefs: []
  type: TYPE_NORMAL
- en: Effectively, this introduces two optimization choices between the previous full
    or nothing. And it’s now possible to use high optimization without `--single-module`.
  prefs: []
  type: TYPE_NORMAL
- en: Read more in [#13464](https://github.com/crystal-lang/crystal/pull/13464).
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks [@kostya](https://github.com/kostya)*'
  prefs: []
  type: TYPE_NORMAL
- en: Alignment primitives
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The language has two new reflection primitives: [`alignof`](https://crystal-lang.org/reference/1.11/syntax_and_semantics/alignof.html)
    and [`instance_alignof`](https://crystal-lang.org/reference/1.11/syntax_and_semantics/instance_alignof.html)
    return a type’s memory alignment ([#14087](https://github.com/crystal-lang/crystal/pull/14087)).
    This allows implementing type-aware allocators in native Crystal with properly
    aligned pointers. They are siblings of `sizeof` and `instance_sizeof` and can
    be used in the same way.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Effect on existing code
  prefs: []
  type: TYPE_NORMAL
- en: The introduction of these primitives makes it impossible to define methods of
    the same names. So `def alignof` or `def instance_alignof` are now invalid syntax.
    We don’t expect there to be a big impact in practice.
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks [@HertzDevil](https://github.com/HertzDevil)*'
  prefs: []
  type: TYPE_NORMAL
- en: '`dll` parameter in `Link` annotation'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [`Link`](https://crystal-lang.org/api/1.11.0/Link.html) annotation has a
    new parameter `dll` for specifying dynamic link libraries on Windows ([#14131](https://github.com/crystal-lang/crystal/pull/14131)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Thanks [@HertzDevil](https://github.com/HertzDevil)*'
  prefs: []
  type: TYPE_NORMAL
- en: Macro `@caller` context
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Macros now have a reference to their calling context via the special instance
    variable [`@caller`](https://crystal-lang.org/reference/1.11/syntax_and_semantics/macros/index.html#call-information)
    ([#14055](https://github.com/crystal-lang/crystal/issues/14055)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Thanks [@Blacksmoke16](https://github.com/Blacksmoke16)*'
  prefs: []
  type: TYPE_NORMAL
- en: New collection methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`Enumerable#present?`](https://crystal-lang.org/api/1.11.0/Enumerable.html#present?:Bool-instance-method)
    is a direct inversion of `#empty?` avoiding some quirks with the similar, but
    not-quite, `#any?` ([#13847](https://github.com/crystal-lang/crystal/issues/13847)).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks [@straight-shoota](https://github.com/straight-shoota)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Enumerable#each_step`](https://crystal-lang.org/api/1.11.0/Enumerable.html#each_step(n:Int,*,offset:Int=0,&:T-%3E):Nil-instance-method)
    and [`Iterable#each_step`](https://crystal-lang.org/api/1.11.0/Iterable.html#each_step(n:Int)-instance-method)
    are direct methods for creating step iterators ([#13610](https://github.com/crystal-lang/crystal/pull/13610)).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks [@baseballlover723](https://github.com/baseballlover723)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Enumerable(T)#to_set(& : T -> U) : Set(U) forall U`](https://crystal-lang.org/api/1.11.0/Enumerable.html#to_set(&block:T-%3EU):Set(U)forallU-instance-method)
    and [`#to_a(& : T -> U) forall U`](https://crystal-lang.org/api/1.11.0/Enumerable.html#to_a%28%26%3AT-%3EU%29%3AArray%28U%29forallU-instance-method)
    allow materialising an `Enumerable` into a pre-defined collection, which gives
    more flexibility than the standard `#to_set` and `#to_a` methods ([#12654](https://github.com/crystal-lang/crystal/pull/12654),
    [#12653](https://github.com/crystal-lang/crystal/pull/12653)).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks [@caspiano](https://github.com/caspiano)*'
  prefs: []
  type: TYPE_NORMAL
- en: Numeric enhancements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`BigFloat#**`](https://crystal-lang.org/api/1.11.0/BigFloat.html#%2A%2A%28other%3ABigInt%29%3ABigFloat-instance-method)
    now works for all `Int::Primitive` arguments and supports the full exponent range
    for `BitInt` arguments ([#13971](https://github.com/crystal-lang/crystal/pull/13971),
    [#13881](https://github.com/crystal-lang/crystal/pull/13881))'
  prefs: []
  type: TYPE_NORMAL
- en: Floating point to string conversion in `printf` uses the Ryu algorithm ([#8441](https://github.com/crystal-lang/crystal/issues/8441)).
  prefs: []
  type: TYPE_NORMAL
- en: New methods [`Float::Primitive.to_hexfloat`](https://crystal-lang.org/api/1.11.0/Float64.html#to_hexfloat:String-instance-method),
    [`.parse_hexfloat`](https://crystal-lang.org/api/1.11.0/Float64.html#parse_hexfloat(str:String):self-class-method),
    and [`.parse_hexfloat?`](https://crystal-lang.org/api/1.11.0/Float64.html#parse_hexfloat(str:String):self-class-method)
    allow conversion to and from the hexfloat format ([#14027](https://github.com/crystal-lang/crystal/pull/14027)).
  prefs: []
  type: TYPE_NORMAL
- en: 'More math features:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks [@HertzDevil](https://github.com/HertzDevil)*'
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements for `crystal spec`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`crystal spec` gets two new commands for introspection:'
  prefs: []
  type: TYPE_NORMAL
- en: '`crystal spec --dry-run` prints all active specs without actually executing
    any spec code ([#13804](https://github.com/crystal-lang/crystal/pull/13804)).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks [@nobodywasishere](https://github.com/nobodywasishere)*'
  prefs: []
  type: TYPE_NORMAL
- en: '`crystal spec --list-tags` lists all tags defined in the spec suite ([#13616](https://github.com/crystal-lang/crystal/pull/13616)).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks [@baseballlover723](https://github.com/baseballlover723)*'
  prefs: []
  type: TYPE_NORMAL
- en: The basic implementation of `crystal tool unreachable` from Crystal 1.10 gets
    some useful enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: The `--tallies` option prints all methods and the total number of calls. Those
    with a zero tally are unreachable ([#13969](https://github.com/crystal-lang/crystal/pull/13969)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `--check` flag exits with a failure status if there is any unreachable code
    ([#13930](https://github.com/crystal-lang/crystal/pull/13930)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Annotations show up in the output ([#13927](https://github.com/crystal-lang/crystal/pull/13927)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New output format: CSV ([#13926](https://github.com/crystal-lang/crystal/pull/13926)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paths in the output are relativized, making it more succinct ([#13929](https://github.com/crystal-lang/crystal/pull/13929)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Thanks [@straight-shoota](https://github.com/straight-shoota)*'
  prefs: []
  type: TYPE_NORMAL
- en: Inherited macros in API docs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Inherited macros are now exposed in the API docs. They had previously been hidden,
    in contrast to inherited defs ([#13810](https://github.com/crystal-lang/crystal/pull/13810)).
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks [@Blacksmoke16](https://github.com/Blacksmoke16)*'
  prefs: []
  type: TYPE_NORMAL
- en: Text
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Misc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The capacity of `String::Buffer` and `IO::Memory` was unintentionally limited
    to 1GB. They now support the full range up to `Int32::MAX`, i.e. 2GB ([#13989](https://github.com/crystal-lang/crystal/pull/13989)).
    *Thanks [@straight-shoota](https://github.com/straight-shoota)*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There was a nasty bug in `Number#format` which could mess with the integral
    part. It is now fixed in [#14061](https://github.com/crystal-lang/crystal/pull/14061).
    *Thanks [@HertzDevil](https://github.com/HertzDevil)*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vendored shards `markd` and `reply` are no longer referenced by paths relative
    to the compiler source tree. This means they can be local dependencies (i.e. in
    `lib`) when using the compiler as a library ([#13992](https://github.com/crystal-lang/crystal/pull/13992)).
    *Thanks [@nobodywasishere](https://github.com/nobodywasishere)*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are two new constants which provide information on the compiler host
    and target: `Crystal::HOST_TRIPLE` and `TARGET_TRIPLE` ([#13823](https://github.com/crystal-lang/crystal/pull/13823)).
    *Thanks [@HertzDevil](https://github.com/HertzDevil)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shards 0.17.4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The bundled shards release was updated to [0.17.4](https://github.com/crystal-lang/shards/releases/tag/v0.17.4)
    which brings a couple minor bugfixes. ([#14133](https://github.com/crystal-lang/crystal/pull/14133)).
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks [@straight-shoota](https://github.com/straight-shoota)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Experimental: `ReferenceStorage` and `.pre_initialize`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ve started an effort to make it easier to use custom allocation mechanisms
    in Crystal and decouple allocation from initialization. The main tool is [`Reference.pre_initialize`](https://crystal-lang.org/api/1.11.0/Reference.html#pre_initialize(address:Pointer)-class-method)
    which performs the rudimentary object initialization, before actually calling
    `#initialize`.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Reference.unsafe_construct`](https://crystal-lang.org/api/1.11.0/Reference.html#unsafe_construct%28address%3APointer%2C%2Aargs%2C%2A%2Aopts%29%3Aself-class-method)
    is a higher level API on top of that. [`ReferenceStorage`](https://crystal-lang.org/api/1.11.0/ReferenceStorage.html)
    represents a static buffer for a reference allocation.'
  prefs: []
  type: TYPE_NORMAL
- en: These APIs are experimental and might be subject to change. We expect more features
    in this direction in future releases. Join the discussion about custom reference
    allocation at [#13481](https://github.com/crystal-lang/crystal/issues/13481).
  prefs: []
  type: TYPE_NORMAL
- en: '*NOTE:* `ReferenceStorage` was removed again in 1.11.1 due to compatibility
    issues with older versions of the standard library ([#14207](https://github.com/crystal-lang/crystal/pull/14207)).
    It will come back with an improved implementation.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Thanks [@HertzDevil](https://github.com/HertzDevil)*'
  prefs: []
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Splat operators in macro expressions are deprecated. Use `.splat` instead ([#13939](https://github.com/crystal-lang/crystal/pull/13939))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVM.start_multithreaded` and `.stop_multithreaded`. They have no effect ([#13949](https://github.com/crystal-lang/crystal/pull/13949))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVMExtSetCurrentDebugLocation` from `llvm_ext.cc` for LLVM 9+ ([#13965](https://github.com/crystal-lang/crystal/pull/13965))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Char::Reader#@end` ([#13920](https://github.com/crystal-lang/crystal/pull/13920))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thanks
  prefs: []
  type: TYPE_NORMAL
- en: We have been able to do all of this thanks to the continued support of [84codes](https://www.84codes.com/)
    and every other [sponsor](/sponsors). To maintain and increase the development
    pace, donations and sponsorships are essential. [OpenCollective](https://opencollective.com/crystal-lang)
    is available for that.
  prefs: []
  type: TYPE_NORMAL
- en: Reach out to [crystal@manas.tech](mailto:crystal@manas.tech) if you’d like to
    become a direct sponsor or find other ways to support Crystal. We thank you in
    advance!
  prefs: []
  type: TYPE_NORMAL
- en: '[Contribute](/sponsors#contribute)'
  prefs: []
  type: TYPE_NORMAL
