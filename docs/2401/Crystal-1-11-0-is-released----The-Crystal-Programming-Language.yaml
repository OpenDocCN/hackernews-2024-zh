- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:46:23'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:46:23
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Crystal 1.11.0 is released! - The Crystal Programming Language
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Crystal 1.11.0 发布了！- Crystal 编程语言
- en: 来源：[https://crystal-lang.org/2024/01/08/1.11.0-released/](https://crystal-lang.org/2024/01/08/1.11.0-released/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://crystal-lang.org/2024/01/08/1.11.0-released/](https://crystal-lang.org/2024/01/08/1.11.0-released/)
- en: We are announcing a new Crystal release with several new features and bug fixes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们宣布一个新的 Crystal 发布，其中包含几个新功能和错误修复。
- en: Pre-built packages are available on [GitHub Releases](https://github.com/crystal-lang/crystal/releases/tag/1.11.0)
    and our official distribution channels. See [crystal-lang.org/install](https://crystal-lang.org/install/)
    for installation instructions.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 预构建的软件包可在 [GitHub 发布页面](https://github.com/crystal-lang/crystal/releases/tag/1.11.0)
    和我们的官方发行渠道上获取。请参阅 [crystal-lang.org/install](https://crystal-lang.org/install/)
    获取安装说明。
- en: Stats
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 统计信息
- en: This release includes [178 changes since 1.10.1](https://github.com/crystal-lang/crystal/pulls?q=is%3Apr+milestone%3A1.11.0)
    by 28 contributors. We thank all the contributors for all the effort put into
    improving the language! ❤️
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本次发布包含自 1.10.1 版以来的 [178 个更改](https://github.com/crystal-lang/crystal/pulls?q=is%3Apr+milestone%3A1.11.0)，由
    28 位贡献者贡献。我们感谢所有为改进语言而付出努力的贡献者！❤️
- en: Changes
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改
- en: Below we list the most remarkable changes in the language, compiler and stdlib.
    This is a pretty big release with lots of things going on, so hold tight 🚀
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下面我们列出了语言、编译器和标准库中最显着的更改。这是一个非常重要的发布版本，有很多事情正在发生，所以请紧紧抓住 🚀
- en: For details, visit the [full changelog](https://github.com/crystal-lang/crystal/releases/tag/1.11.0).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 详细信息，请访问 [完整更新日志](https://github.com/crystal-lang/crystal/releases/tag/1.11.0)。
- en: LLVM 18
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: LLVM 18
- en: One of the biggest steps forward is support for upcoming LLVM 18 which allows
    linking LLVM dynamically on Windows ([#14101](https://github.com/crystal-lang/crystal/pull/14101)).
    Additionally, LLVM 18 now provides everything we need in the upstream C API, removing
    the need for our wrapper extension `llvm_ext`. It’s still necessary for older
    LLVM versions, so we’ll keep it around for a while. But the future tool chain
    is getting simplified. Read more in [#13946](https://github.com/crystal-lang/crystal/issues/13946).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的进步之一是对即将发布的 LLVM 18 的支持，这使得在 Windows 上动态链接 LLVM 成为可能（[#14101](https://github.com/crystal-lang/crystal/pull/14101)）。此外，LLVM
    18 现在提供了我们在上游 C API 中所需的一切，消除了我们对包装扩展 `llvm_ext` 的需要。对于较旧的 LLVM 版本，仍然是必需的，因此我们将继续保留它一段时间。但未来的工具链正在变得简化。在
    [#13946](https://github.com/crystal-lang/crystal/issues/13946) 中阅读更多内容。
- en: '*Thanks [@HertzDevil](https://github.com/HertzDevil)*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢 [@HertzDevil](https://github.com/HertzDevil)*'
- en: Compiler Optimization Levels
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译器优化级别
- en: 'The compiler gains four distinct optimization levels:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器获得了四个不同的优化级别：
- en: '`-O0`: No optimization'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-O0`：无优化'
- en: '`-O1`: Low optimization'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-O1`：低优化'
- en: '`-O2`: Middle optimization'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-O2`：中等优化'
- en: '`-O3`: High optimization'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-O3`：高度优化'
- en: Each level activates the respective LLVM `RunPasses` and `CodeGenOptLevel` optimizations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每个级别激活相应的 LLVM `RunPasses` 和 `CodeGenOptLevel` 优化。
- en: '`-O3` corresponds to the existing release mode and `-O0` corresponds to the
    default non-release mode. `-O0` remains the default and `--release` is equivalent
    to `-O3 --single-module`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`-O3` 对应于现有的发布模式，`-O0` 对应于默认的非发布模式。`-O0` 保持默认，`--release` 等效于 `-O3 --single-module`。'
- en: Effectively, this introduces two optimization choices between the previous full
    or nothing. And it’s now possible to use high optimization without `--single-module`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这引入了两个优化选择，介于之前的完全或无任何优化之间。现在可以在没有 `--single-module` 的情况下使用高度优化。
- en: Read more in [#13464](https://github.com/crystal-lang/crystal/pull/13464).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [#13464](https://github.com/crystal-lang/crystal/pull/13464) 中阅读更多内容。
- en: '*Thanks [@kostya](https://github.com/kostya)*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢 [@kostya](https://github.com/kostya)*'
- en: Alignment primitives
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对齐原语
- en: 'The language has two new reflection primitives: [`alignof`](https://crystal-lang.org/reference/1.11/syntax_and_semantics/alignof.html)
    and [`instance_alignof`](https://crystal-lang.org/reference/1.11/syntax_and_semantics/instance_alignof.html)
    return a type’s memory alignment ([#14087](https://github.com/crystal-lang/crystal/pull/14087)).
    This allows implementing type-aware allocators in native Crystal with properly
    aligned pointers. They are siblings of `sizeof` and `instance_sizeof` and can
    be used in the same way.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该语言有两个新的反射原语：[`alignof`](https://crystal-lang.org/reference/1.11/syntax_and_semantics/alignof.html)
    和 [`instance_alignof`](https://crystal-lang.org/reference/1.11/syntax_and_semantics/instance_alignof.html)
    返回类型的内存对齐方式（[#14087](https://github.com/crystal-lang/crystal/pull/14087)）。这使得在本机
    Crystal 中实现类型感知的分配器成为可能，使用正确对齐的指针。它们与 `sizeof` 和 `instance_sizeof` 是同级的，可以以相同的方式使用。
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Effect on existing code
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对现有代码的影响
- en: The introduction of these primitives makes it impossible to define methods of
    the same names. So `def alignof` or `def instance_alignof` are now invalid syntax.
    We don’t expect there to be a big impact in practice.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 引入这些原语使得无法定义同名的方法。所以`def alignof`或`def instance_alignof`现在是无效语法。我们不认为这会在实践中产生很大影响。
- en: '*Thanks [@HertzDevil](https://github.com/HertzDevil)*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢[@HertzDevil](https://github.com/HertzDevil)*'
- en: '`dll` parameter in `Link` annotation'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Link`注解中的`dll`参数'
- en: The [`Link`](https://crystal-lang.org/api/1.11.0/Link.html) annotation has a
    new parameter `dll` for specifying dynamic link libraries on Windows ([#14131](https://github.com/crystal-lang/crystal/pull/14131)).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Link`](https://crystal-lang.org/api/1.11.0/Link.html)注解有一个新参数`dll`，用于在Windows上指定动态链接库
    ([#14131](https://github.com/crystal-lang/crystal/pull/14131)).'
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Thanks [@HertzDevil](https://github.com/HertzDevil)*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢[@HertzDevil](https://github.com/HertzDevil)*'
- en: Macro `@caller` context
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 宏`@caller`上下文
- en: Macros now have a reference to their calling context via the special instance
    variable [`@caller`](https://crystal-lang.org/reference/1.11/syntax_and_semantics/macros/index.html#call-information)
    ([#14055](https://github.com/crystal-lang/crystal/issues/14055)).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在宏通过特殊实例变量[`@caller`](https://crystal-lang.org/reference/1.11/syntax_and_semantics/macros/index.html#call-information)引用其调用上下文
    ([#14055](https://github.com/crystal-lang/crystal/issues/14055)).
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Thanks [@Blacksmoke16](https://github.com/Blacksmoke16)*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢[@Blacksmoke16](https://github.com/Blacksmoke16)*'
- en: New collection methods
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的集合方法
- en: '[`Enumerable#present?`](https://crystal-lang.org/api/1.11.0/Enumerable.html#present?:Bool-instance-method)
    is a direct inversion of `#empty?` avoiding some quirks with the similar, but
    not-quite, `#any?` ([#13847](https://github.com/crystal-lang/crystal/issues/13847)).'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Enumerable#present?`](https://crystal-lang.org/api/1.11.0/Enumerable.html#present?:Bool-instance-method)
    是`#empty?`的直接反转，避免了与相似但不完全相同的`#any?`的一些怪癖 ([#13847](https://github.com/crystal-lang/crystal/issues/13847)).'
- en: '*Thanks [@straight-shoota](https://github.com/straight-shoota)*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢[@straight-shoota](https://github.com/straight-shoota)*'
- en: '[`Enumerable#each_step`](https://crystal-lang.org/api/1.11.0/Enumerable.html#each_step(n:Int,*,offset:Int=0,&:T-%3E):Nil-instance-method)
    and [`Iterable#each_step`](https://crystal-lang.org/api/1.11.0/Iterable.html#each_step(n:Int)-instance-method)
    are direct methods for creating step iterators ([#13610](https://github.com/crystal-lang/crystal/pull/13610)).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Enumerable#each_step`](https://crystal-lang.org/api/1.11.0/Enumerable.html#each_step(n:Int,*,offset:Int=0,&:T-%3E):Nil-instance-method)
    和 [`Iterable#each_step`](https://crystal-lang.org/api/1.11.0/Iterable.html#each_step(n:Int)-instance-method)
    是创建步进迭代器的直接方法 ([#13610](https://github.com/crystal-lang/crystal/pull/13610)).'
- en: '*Thanks [@baseballlover723](https://github.com/baseballlover723)*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢[@baseballlover723](https://github.com/baseballlover723)*'
- en: '[`Enumerable(T)#to_set(& : T -> U) : Set(U) forall U`](https://crystal-lang.org/api/1.11.0/Enumerable.html#to_set(&block:T-%3EU):Set(U)forallU-instance-method)
    and [`#to_a(& : T -> U) forall U`](https://crystal-lang.org/api/1.11.0/Enumerable.html#to_a%28%26%3AT-%3EU%29%3AArray%28U%29forallU-instance-method)
    allow materialising an `Enumerable` into a pre-defined collection, which gives
    more flexibility than the standard `#to_set` and `#to_a` methods ([#12654](https://github.com/crystal-lang/crystal/pull/12654),
    [#12653](https://github.com/crystal-lang/crystal/pull/12653)).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Enumerable(T)#to_set(& : T -> U) : Set(U) forall U`](https://crystal-lang.org/api/1.11.0/Enumerable.html#to_set(&block:T-%3EU):Set(U)forallU-instance-method)
    和 [`#to_a(& : T -> U) forall U`](https://crystal-lang.org/api/1.11.0/Enumerable.html#to_a%28%26%3AT-%3EU%29%3AArray%28U%29forallU-instance-method)
    允许将`Enumerable`转换为预定义集合，比标准的`#to_set`和`#to_a`方法更灵活 ([#12654](https://github.com/crystal-lang/crystal/pull/12654),
    [#12653](https://github.com/crystal-lang/crystal/pull/12653)).'
- en: '*Thanks [@caspiano](https://github.com/caspiano)*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢[@caspiano](https://github.com/caspiano)*'
- en: Numeric enhancements
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字增强
- en: '[`BigFloat#**`](https://crystal-lang.org/api/1.11.0/BigFloat.html#%2A%2A%28other%3ABigInt%29%3ABigFloat-instance-method)
    now works for all `Int::Primitive` arguments and supports the full exponent range
    for `BitInt` arguments ([#13971](https://github.com/crystal-lang/crystal/pull/13971),
    [#13881](https://github.com/crystal-lang/crystal/pull/13881))'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[`BigFloat#**`](https://crystal-lang.org/api/1.11.0/BigFloat.html#%2A%2A%28other%3ABigInt%29%3ABigFloat-instance-method)
    现在适用于所有`Int::Primitive`参数，并支持`BitInt`参数的完整指数范围 ([#13971](https://github.com/crystal-lang/crystal/pull/13971),
    [#13881](https://github.com/crystal-lang/crystal/pull/13881))'
- en: Floating point to string conversion in `printf` uses the Ryu algorithm ([#8441](https://github.com/crystal-lang/crystal/issues/8441)).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`printf`中的浮点到字符串转换使用了Ryu算法 ([#8441](https://github.com/crystal-lang/crystal/issues/8441)).'
- en: New methods [`Float::Primitive.to_hexfloat`](https://crystal-lang.org/api/1.11.0/Float64.html#to_hexfloat:String-instance-method),
    [`.parse_hexfloat`](https://crystal-lang.org/api/1.11.0/Float64.html#parse_hexfloat(str:String):self-class-method),
    and [`.parse_hexfloat?`](https://crystal-lang.org/api/1.11.0/Float64.html#parse_hexfloat(str:String):self-class-method)
    allow conversion to and from the hexfloat format ([#14027](https://github.com/crystal-lang/crystal/pull/14027)).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法 [`Float::Primitive.to_hexfloat`](https://crystal-lang.org/api/1.11.0/Float64.html#to_hexfloat:String-instance-method)、[`.parse_hexfloat`](https://crystal-lang.org/api/1.11.0/Float64.html#parse_hexfloat(str:String):self-class-method)
    和 [`.parse_hexfloat?`](https://crystal-lang.org/api/1.11.0/Float64.html#parse_hexfloat(str:String):self-class-method)
    允许在十六进制浮点格式之间进行转换 ([#14027](https://github.com/crystal-lang/crystal/pull/14027))。
- en: 'More math features:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 更多数学特性：
- en: '*Thanks [@HertzDevil](https://github.com/HertzDevil)*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢 [@HertzDevil](https://github.com/HertzDevil)*'
- en: Enhancements for `crystal spec`
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`crystal spec` 的增强'
- en: '`crystal spec` gets two new commands for introspection:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`crystal spec` 获取了两个用于内省的新命令：'
- en: '`crystal spec --dry-run` prints all active specs without actually executing
    any spec code ([#13804](https://github.com/crystal-lang/crystal/pull/13804)).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`crystal spec --dry-run` 打印出所有活动的规范，而不实际执行任何规范代码 ([#13804](https://github.com/crystal-lang/crystal/pull/13804))。'
- en: '*Thanks [@nobodywasishere](https://github.com/nobodywasishere)*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢 [@nobodywasishere](https://github.com/nobodywasishere)*'
- en: '`crystal spec --list-tags` lists all tags defined in the spec suite ([#13616](https://github.com/crystal-lang/crystal/pull/13616)).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`crystal spec --list-tags` 列出了规范套件中定义的所有标签 ([#13616](https://github.com/crystal-lang/crystal/pull/13616))。'
- en: '*Thanks [@baseballlover723](https://github.com/baseballlover723)*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢 [@baseballlover723](https://github.com/baseballlover723)*'
- en: The basic implementation of `crystal tool unreachable` from Crystal 1.10 gets
    some useful enhancements.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`Crystal 1.10` 中 `crystal tool unreachable` 的基本实现得到了一些有用的增强。'
- en: The `--tallies` option prints all methods and the total number of calls. Those
    with a zero tally are unreachable ([#13969](https://github.com/crystal-lang/crystal/pull/13969)).
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--tallies` 选项打印出所有方法及其调用总数。那些计数为零的方法是无法访问的 ([#13969](https://github.com/crystal-lang/crystal/pull/13969))。'
- en: The `--check` flag exits with a failure status if there is any unreachable code
    ([#13930](https://github.com/crystal-lang/crystal/pull/13930)).
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--check` 标志如果存在任何无法访问的代码，则以失败状态退出 ([#13930](https://github.com/crystal-lang/crystal/pull/13930))。'
- en: Annotations show up in the output ([#13927](https://github.com/crystal-lang/crystal/pull/13927)).
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释显示在输出中 ([#13927](https://github.com/crystal-lang/crystal/pull/13927))。
- en: 'New output format: CSV ([#13926](https://github.com/crystal-lang/crystal/pull/13926)).'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的输出格式：CSV ([#13926](https://github.com/crystal-lang/crystal/pull/13926))。
- en: Paths in the output are relativized, making it more succinct ([#13929](https://github.com/crystal-lang/crystal/pull/13929)).
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出中的路径被相对化，使其更加简洁 ([#13929](https://github.com/crystal-lang/crystal/pull/13929))。
- en: '*Thanks [@straight-shoota](https://github.com/straight-shoota)*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢 [@straight-shoota](https://github.com/straight-shoota)*'
- en: Inherited macros in API docs
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API 文档中的继承宏
- en: Inherited macros are now exposed in the API docs. They had previously been hidden,
    in contrast to inherited defs ([#13810](https://github.com/crystal-lang/crystal/pull/13810)).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 继承的宏现在在 API 文档中暴露出来了。它们以前是隐藏的，与继承的定义相反 ([#13810](https://github.com/crystal-lang/crystal/pull/13810))。
- en: '*Thanks [@Blacksmoke16](https://github.com/Blacksmoke16)*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢 [@Blacksmoke16](https://github.com/Blacksmoke16)*'
- en: Text
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本
- en: Misc
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他
- en: The capacity of `String::Buffer` and `IO::Memory` was unintentionally limited
    to 1GB. They now support the full range up to `Int32::MAX`, i.e. 2GB ([#13989](https://github.com/crystal-lang/crystal/pull/13989)).
    *Thanks [@straight-shoota](https://github.com/straight-shoota)*
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String::Buffer` 和 `IO::Memory` 的容量无意间被限制为 1GB。它们现在支持完整范围，最多可达到 `Int32::MAX`，即
    2GB ([#13989](https://github.com/crystal-lang/crystal/pull/13989))。 *感谢 [@straight-shoota](https://github.com/straight-shoota)*'
- en: There was a nasty bug in `Number#format` which could mess with the integral
    part. It is now fixed in [#14061](https://github.com/crystal-lang/crystal/pull/14061).
    *Thanks [@HertzDevil](https://github.com/HertzDevil)*
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number#format` 中有一个讨厌的 bug 可能会影响整数部分。现在在 [#14061](https://github.com/crystal-lang/crystal/pull/14061)
    中已经修复了。 *感谢 [@HertzDevil](https://github.com/HertzDevil)*'
- en: Vendored shards `markd` and `reply` are no longer referenced by paths relative
    to the compiler source tree. This means they can be local dependencies (i.e. in
    `lib`) when using the compiler as a library ([#13992](https://github.com/crystal-lang/crystal/pull/13992)).
    *Thanks [@nobodywasishere](https://github.com/nobodywasishere)*
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vendored shards `markd` 和 `reply` 不再通过相对于编译器源树的路径引用。这意味着当将编译器作为库使用时，它们可以是本地依赖项（即在
    `lib` 中） ([#13992](https://github.com/crystal-lang/crystal/pull/13992))。 *感谢 [@nobodywasishere](https://github.com/nobodywasishere)*
- en: 'There are two new constants which provide information on the compiler host
    and target: `Crystal::HOST_TRIPLE` and `TARGET_TRIPLE` ([#13823](https://github.com/crystal-lang/crystal/pull/13823)).
    *Thanks [@HertzDevil](https://github.com/HertzDevil)*'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shards 0.17.4
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The bundled shards release was updated to [0.17.4](https://github.com/crystal-lang/shards/releases/tag/v0.17.4)
    which brings a couple minor bugfixes. ([#14133](https://github.com/crystal-lang/crystal/pull/14133)).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks [@straight-shoota](https://github.com/straight-shoota)*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Experimental: `ReferenceStorage` and `.pre_initialize`'
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ve started an effort to make it easier to use custom allocation mechanisms
    in Crystal and decouple allocation from initialization. The main tool is [`Reference.pre_initialize`](https://crystal-lang.org/api/1.11.0/Reference.html#pre_initialize(address:Pointer)-class-method)
    which performs the rudimentary object initialization, before actually calling
    `#initialize`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[`Reference.unsafe_construct`](https://crystal-lang.org/api/1.11.0/Reference.html#unsafe_construct%28address%3APointer%2C%2Aargs%2C%2A%2Aopts%29%3Aself-class-method)
    is a higher level API on top of that. [`ReferenceStorage`](https://crystal-lang.org/api/1.11.0/ReferenceStorage.html)
    represents a static buffer for a reference allocation.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: These APIs are experimental and might be subject to change. We expect more features
    in this direction in future releases. Join the discussion about custom reference
    allocation at [#13481](https://github.com/crystal-lang/crystal/issues/13481).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '*NOTE:* `ReferenceStorage` was removed again in 1.11.1 due to compatibility
    issues with older versions of the standard library ([#14207](https://github.com/crystal-lang/crystal/pull/14207)).
    It will come back with an improved implementation.'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Thanks [@HertzDevil](https://github.com/HertzDevil)*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Deprecations
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Splat operators in macro expressions are deprecated. Use `.splat` instead ([#13939](https://github.com/crystal-lang/crystal/pull/13939))
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVM.start_multithreaded` and `.stop_multithreaded`. They have no effect ([#13949](https://github.com/crystal-lang/crystal/pull/13949))'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVMExtSetCurrentDebugLocation` from `llvm_ext.cc` for LLVM 9+ ([#13965](https://github.com/crystal-lang/crystal/pull/13965))'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Char::Reader#@end` ([#13920](https://github.com/crystal-lang/crystal/pull/13920))'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thanks
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: We have been able to do all of this thanks to the continued support of [84codes](https://www.84codes.com/)
    and every other [sponsor](/sponsors). To maintain and increase the development
    pace, donations and sponsorships are essential. [OpenCollective](https://opencollective.com/crystal-lang)
    is available for that.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Reach out to [crystal@manas.tech](mailto:crystal@manas.tech) if you’d like to
    become a direct sponsor or find other ways to support Crystal. We thank you in
    advance!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[Contribute](/sponsors#contribute)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
