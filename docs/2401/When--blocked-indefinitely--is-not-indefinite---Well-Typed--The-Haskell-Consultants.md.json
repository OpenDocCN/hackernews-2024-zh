["```\nx <- atomically $ takeTMVar v\n```", "```\nthread blocked indefinitely in an STM transaction\n```", "```\n/--------\\          /--------\\            /-------\\\n|        |   TMVar  |        |   TQueue   |       |\n| decode | <------> | buffer | <--------> | write |\n|        |          |        |            |       |\n\\--------/          \\--------/            \\-------/\n```", "```\ndecode :: TMVar Int -> IO ()\ndecode decoderOutput =\n forM_ [1..] $ \\i -> do\n threadDelay 2_000_000\n atomically $ putTMVar decoderOutput i\n```", "```\nnewtype NetworkFailure = NetworkFailure SomeException\n deriving (Show)\n\nbuffer :: TMVar Int -> TQueue (Either NetworkFailure Int) -> IO ()\nbuffer decoderOutput queue =\n loop\n where\n loop :: IO ()\n loop = do\n mMsg <- try $ atomically $ takeTMVar decoderOutput\n case mMsg of\n Left err -> do\n atomically $ writeTQueue queue $ Left (NetworkFailure err)\n putStrLn $ \"buffer exiting: \" ++ show err\n Right msg -> do\n atomically $ writeTQueue queue $ Right msg\n loop\n```", "```\nwrite :: TQueue (Either NetworkFailure Int) -> IO ()\nwrite queue =\n loop\n where\n loop :: IO ()\n loop = do\n mMsg <- atomically $ readTQueue queue\n case mMsg of\n Left (NetworkFailure err) ->\n putStrLn $ \"Network failure: \" ++ show err\n Right msg -> do\n putStrLn $ \"Incoming message: \" ++ show msg\n loop\n```", "```\natomicallyStubborn :: forall a. STM a -> IO a\natomicallyStubborn stm = persevere\n where\n persevere :: IO a\n persevere =\n catch (atomically stm) $ \\BlockedIndefinitelyOnSTM ->\n persevere\n```", "```\ndequeue :: TQueue (Either NetworkFailure Int) -> IO (Either NetworkFailure Int)\ndequeue queue = atomicallyStubborn $ readTQueue queue\n```", "```\n/--------\\          /--------\\            /-------\\          /-----\\\n|        |   TMVar  |        |   TQueue   |       |   TMVar  |     |\n| decode | <------> | buffer | <--------> | write | <------> | ... |\n|        |          |        |            |       |          |     |\n\\--------/          \\--------/            \\-------/          \\-----/\n```", "```\nwrite :: TQueue (Either NetworkFailure Int) -> IO ()\nwrite queue = do\n void $ newStablePtr =<< myThreadId\n loop\n where\n loop = .. -- as before\n```", "```\ndequeue :: TQueue (Either NetworkFailure Int) -> IO (Either NetworkFailure Int)\ndequeue queue = do\n tid <- myThreadId\n bracket (newStablePtr tid) freeStablePtr $ \\_ ->\n atomically $ readTQueue queue\n```"]