["```\nvoid print_boolean(BOOL value) {\n NSLog(value ? @\"True\" : @\"False\");\n}\n\nprint_boolean(YES);\nprint_boolean(NO);\n```", "```\n// To locally run this example:\n// $ xcrun clang++ main.mm -o objc-bool-test\n// $ ./objc-bool-test\n\n#include <objc/runtime.h>\n#include <iostream>\n#include <cstdlib>\n\nvoid print(bool value) { std::cout << \"(bool) \" << value << \"\\n\"; }\nvoid print(int value) { std::cout << \"(int) \" << value << \"\\n\"; }\n\nint main() {\n std::cout << \"YES: \";\n print(YES);\n std::cout << \"NO: \";\n print(NO);\n return EXIT_SUCCESS;\n}\n```", "```\nYES: (bool) 1\nNO: (bool) 0\n```", "```\nYES: (int) 1\nNO: (int) 0\n```", "```\n$ ls $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/objc\nList.h               Protocol.h           objc-api.h           objc-runtime.h\nNSObjCRuntime.h      hashtable.h          objc-auto.h          objc-sync.h\nNSObject.h           hashtable2.h         objc-class.h         objc.h\nObject.h             message.h            objc-exception.h     runtime.h\nObjectiveC.apinotes  module.modulemap     objc-load.h\n```", "```\n// $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/objc/objc.h\n...\n#if __has_feature(objc_bool)\n#define YES __objc_yes\n#define NO  __objc_no\n#else\n#define YES ((BOOL)1)\n#define NO  ((BOOL)0)\n#endif\n...\n```", "```\n#define YES ((BOOL)1)\n#define NO  ((BOOL)0)\n```", "```\nvoid print_boolean(BOOL value) {\n NSLog(value ? @\"True\" : @\"False\");\n}\n\nprint_boolean(__objc_yes);\nprint_boolean(__objc_no);\n```", "```\n// $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/objc/objc.h\n...\n#if OBJC_BOOL_IS_BOOL\n typedef bool BOOL;\n#else\n#   define OBJC_BOOL_IS_CHAR 1\n typedef signed char BOOL;\n // BOOL is explicitly signed so @encode(BOOL) == \"c\" rather than \"C\"\n // even if -funsigned-char is used.\n#endif\n...\n```", "```\n#import <Foundation/Foundation.h>\n\nint main() {\n#if OBJC_BOOL_IS_CHAR\n NSLog(@\"My BOOL is a signed char\");\n#else\n NSLog(@\"My BOOL is a bool\");\n#endif\n return EXIT_SUCCESS;\n}\n```", "```\n// $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/objc/objc.h\n...\n#if defined(__OBJC_BOOL_IS_BOOL)\n // Honor __OBJC_BOOL_IS_BOOL when available.\n#   if __OBJC_BOOL_IS_BOOL\n#       define OBJC_BOOL_IS_BOOL 1\n#   else\n#       define OBJC_BOOL_IS_BOOL 0\n#   endif\n#else\n // __OBJC_BOOL_IS_BOOL not set.\n#   if TARGET_OS_OSX || TARGET_OS_MACCATALYST || ((TARGET_OS_IOS || 0) && !__LP64__ && !__ARM_ARCH_7K)\n#      define OBJC_BOOL_IS_BOOL 0\n#   else\n#      define OBJC_BOOL_IS_BOOL 1\n#   endif\n#endif\n...\n```", "```\n// main.m\n#import <Foundation/Foundation.h>\n\nint main() {\n#if defined(__OBJC_BOOL_IS_BOOL)\n NSLog(@\"__OBJC_BOOL_IS_BOOL is %i\", __OBJC_BOOL_IS_BOOL);\n#else\n NSLog(@\"__OBJC_BOOL_IS_BOOL is not defined\");\n#endif\n return EXIT_SUCCESS;\n}\n```", "```\n// https://github.com/apple-oss-distributions/objc4/blob/objc4-906.2/test/bool.c\n...\n#if __OBJC__ && !defined(__OBJC_BOOL_IS_BOOL)\n#   error no __OBJC_BOOL_IS_BOOL\n#endif\n...\n```", "```\n$ xcrun clang++ main.mm -o force-signed-char -D__OBJC_BOOL_IS_BOOL=0\nIn file included from <built-in>:444:\n<command line>:1:9: warning: '__OBJC_BOOL_IS_BOOL' macro redefined [-Wmacro-redefined]\n#define __OBJC_BOOL_IS_BOOL 0\n ^\n<built-in>:34:9: note: previous definition is here\n#define __OBJC_BOOL_IS_BOOL 1\n ^\n1 warning generated.\n\n$ ./force-signed-char\nYES: (int) 1\nNO: (int) 0\n```", "```\n#define __OBJC_BOOL_IS_BOOL 1\n```", "```\n<built-in>:34:9\n```", "```\n$ cd $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk\n$ grep --recursive '__OBJC_BOOL_IS_BOOL' usr/include/objc\nusr/include/objc/objc.h:#if defined(__OBJC_BOOL_IS_BOOL)\nusr/include/objc/objc.h:    // Honor __OBJC_BOOL_IS_BOOL when available.\nusr/include/objc/objc.h:#   if __OBJC_BOOL_IS_BOOL\nusr/include/objc/objc.h:    // __OBJC_BOOL_IS_BOOL not set.\n```", "```\n// See https://github.com/llvm/llvm-project/blob/llvmorg-16.0.0/clang/lib/Frontend/InitPreprocessor.cpp#L859-L862\n...\n// Define a macro that describes the Objective-C boolean type even for C\n// and C++ since BOOL can be used from non Objective-C code.\nBuilder.defineMacro(\"__OBJC_BOOL_IS_BOOL\",\n Twine(TI.useSignedCharForObjCBool() ? \"0\" : \"1\"));\n...\n```", "```\n// See https://github.com/llvm/llvm-project/blob/llvmorg-16.0.0/clang/include/clang/Basic/TargetInfo.h#L848-L855\n...\n/// Check if the Objective-C built-in boolean type should be signed\n/// char.\n///\n/// Otherwise, if this returns false, the normal built-in boolean type\n/// should also be used for Objective-C.\nbool useSignedCharForObjCBool() const {\n return UseSignedCharForObjCBool;\n}\n...\n```", "```\n// See https://github.com/llvm/llvm-project/blob/llvmorg-16.0.0/clang/lib/Basic/TargetInfo.cpp#L135\n...\nTargetInfo::TargetInfo(const llvm::Triple &T) : Triple(T) {\n...\n UseSignedCharForObjCBool = true;\n...\n}\n...\n```", "```\n// See https://github.com/llvm/llvm-project/blob/llvmorg-16.0.0/clang/include/clang/Basic/TargetInfo.h#L856-L858\n...\nvoid noSignedCharForObjCBool() {\n UseSignedCharForObjCBool = false;\n}\n...\n```", "```\n// See https://github.com/llvm/llvm-project/blob/llvmorg-16.0.0/clang/lib/Frontend/CompilerInstance.cpp#L1023-L1025\n...\n// rewriter project will change target built-in bool type from its default.\nif (getFrontendOpts().ProgramAction == frontend::RewriteObjC)\n getTarget().noSignedCharForObjCBool();\n...\n```", "```\n$ grep --recursive 'UseSignedCharForObjCBool' clang/lib/Basic/Targets | uniq\nclang/lib/Basic/Targets/AArch64.cpp:  UseSignedCharForObjCBool = false;\nclang/lib/Basic/Targets/X86.h:      UseSignedCharForObjCBool = false;\nclang/lib/Basic/Targets/ARM.cpp:    UseSignedCharForObjCBool = false;\n```", "```\n// See https://github.com/llvm/llvm-project/blob/llvmorg-16.0.0/clang/lib/Basic/Targets/AArch64.cpp#L1432\n...\nDarwinAArch64TargetInfo::DarwinAArch64TargetInfo(const llvm::Triple &Triple,\n const TargetOptions &Opts)\n : DarwinTargetInfo<AArch64leTargetInfo>(Triple, Opts) {\n ...\n UseSignedCharForObjCBool = false;\n ...\n}\n...\n```", "```\n// See https://github.com/llvm/llvm-project/blob/llvmorg-16.0.0/clang/lib/Basic/Targets/X86.h#L533-L536\n...\nDarwinI386TargetInfo(const llvm::Triple &Triple, const TargetOptions &Opts)\n : DarwinTargetInfo<X86_32TargetInfo>(Triple, Opts) {\n ...\n // The watchOS simulator uses the builtin bool type for Objective-C.\n llvm::Triple T = llvm::Triple(Triple);\n if (T.isWatchOS())\n UseSignedCharForObjCBool = false;\n ...\n}\n...\n```", "```\n// See https://github.com/llvm/llvm-project/blob/llvmorg-16.0.0/clang/lib/Basic/Targets/X86.h#L915-L918\n...\nDarwinX86_64TargetInfo(const llvm::Triple &Triple, const TargetOptions &Opts)\n : DarwinTargetInfo<X86_64TargetInfo>(Triple, Opts) {\n ...\n // The 64-bit iOS simulator uses the builtin bool type for Objective-C.\n llvm::Triple T = llvm::Triple(Triple);\n if (T.isiOS())\n UseSignedCharForObjCBool = false;\n ...\n}\n...\n```", "```\n// See https://github.com/llvm/llvm-project/blob/llvmorg-16.0.0/clang/lib/Basic/Targets/ARM.cpp#L1412-L1417\n...\nDarwinARMTargetInfo::DarwinARMTargetInfo(const llvm::Triple &Triple,\n const TargetOptions &Opts)\n : DarwinTargetInfo<ARMleTargetInfo>(Triple, Opts) {\n ...\n if (Triple.isWatchABI()) {\n ...\n // BOOL should be a real boolean on the new ABI\n UseSignedCharForObjCBool = false;\n ...\n}\n...\n```"]