- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:33:25'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:33:25
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: A Beginner's Companion to Theorem Proving in Lean 4 | Blog | emallson.net
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个 Lean 4 中的定理证明的初学者同伴 | 博客 | emallson.net
- en: 来源：[https://emallson.net/blog/a-beginners-companion-to-theorem-proving-in-lean/](https://emallson.net/blog/a-beginners-companion-to-theorem-proving-in-lean/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://emallson.net/blog/a-beginners-companion-to-theorem-proving-in-lean/](https://emallson.net/blog/a-beginners-companion-to-theorem-proving-in-lean/)
- en: This year, one of my hobby projects has been implementing some basic properties
    and conversions between [Matroids](https://en.wikipedia.org/wiki/Matroid) in [Lean](https://lean-lang.org/).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 今年，我的一个业余项目之一是在[Lean](https://lean-lang.org/)中实现一些基本属性和[Matroids](https://en.wikipedia.org/wiki/Matroid)之间的转换。
- en: My primary resource for doing this has been [*Theorem Proving in Lean 4*](https://lean-lang.org/theorem_proving_in_lean4/title_page.html)
    (TPiL), which is an incredibly detailed walk through using Lean as a proof assistant.
    While useful, it has...gaps—as does the main Lean documentation. A lot of this
    gap appears to be [filled by the Zulip chat](https://leanprover-community.github.io/archive/).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我进行此操作的主要资源是[*Lean 4 中的定理证明*](https://lean-lang.org/theorem_proving_in_lean4/title_page.html)（TPiL），这是一个非常详细的关于如何使用
    Lean 作为证明助手的指南。虽然很有用，但它也有一些缺陷——正如主要的 Lean 文档一样。这些缺陷似乎大部分被[Zulip 聊天](https://leanprover-community.github.io/archive/)填补了。
- en: 'The title of this post is a bit of a double entendre: I am still a relative
    beginner, writing what I intend as a companion to TPiL; and this is is intended
    for beginners to Lean, covering that I wish I had known as a beginner myself.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章的标题有点双关：我仍然是一个相对初学者，写的是我打算作为 TPiL 的陪伴；而这也是为 Lean 的初学者准备的，涵盖了我作为一个初学者希望我自己知道的内容。
- en: 'A final caveat emptor: I haven''t really hung out in Zulip and don''t have
    a good grasp on good code organization and style in Lean. These may not be best
    practices, but they helped me.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的买方请注意：我并没有真正深入研究 Zulip，也不太了解 Lean 中的良好代码组织和风格。这些可能不是最佳实践，但它们对我有帮助。
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This is organized in small sections covering individual things that I learned
    the hard way while working on my hobby project.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这被组织成小节，涵盖了我在我的业余项目上艰难学到的一些东西。
- en: <details><summary>Running Snippets</summary>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <details><summary>运行片段</summary>
- en: 'You can run the code snippets below in Lean or on the [Lean website](https://live.lean-lang.org/)
    if you paste this prelude at the top:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Lean 或 [Lean 网站](https://live.lean-lang.org/) 上运行下面的代码片段，如果你将此前导语粘贴在顶部：
- en: '[PRE0]</details>'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0]</details>'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: One of the biggest pain points early in my Lean experience was *finding* theorems
    to use. The [`mathlib`](https://leanprover-community.github.io/mathlib4_docs/foundational_types.html)
    documentation is great, but lacking [hoogle](https://hoogle.haskell.org/)-style
    search.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的 Lean 学习早期，最大的痛点之一是找到要使用的定理。[`mathlib`](https://leanprover-community.github.io/mathlib4_docs/foundational_types.html)
    文档很棒，但缺乏 [hoogle](https://hoogle.haskell.org/)-风格的搜索。
- en: 'EDIT: Apparently not! `LeahNeukirchen` points out on [lobste.rs](https://lobste.rs/s/hwjv0f/beginner_s_companion_theorem_proving#c_7rypt5)
    two different hoogle-like search engines that I missed:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑：显然不是！`LeahNeukirchen` 在[lobste.rs](https://lobste.rs/s/hwjv0f/beginner_s_companion_theorem_proving#c_7rypt5)上指出了我忽略的两个不同的
    hoogle 风格搜索引擎：
- en: The `rw?`, `simp?`, `apply?` and `exact?` tactics give you specialized hoogle-like
    access within the Lean environment, finding candidate theorems that satisfy a
    specific goal and listing them in the editor UI. You can pick one of the solutions
    via code actions if using the LSP.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`rw?`、`simp?`、`apply?` 和 `exact?` 策略在 Lean 环境中为你提供了专门的 hoogle 风格访问，找到满足特定目标的候选定理，并在编辑器
    UI 中列出它们。如果使用 LSP，你可以通过代码操作选择其中一个解决方案。'
- en: 'By default, all target the current goal, but `rw?` and `simp?` can have `at`
    forms:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有目标都针对当前目标，但 `rw?` 和 `simp?` 可以有 `at` 形式：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: TPiL explains what each of these tactics do in technical terms, but it took
    time for me to grok what each do in practice.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: TPiL 在技术术语中解释了这些策略的每一个做什么，但我花了一些时间才理解每个在实践中是怎么做的。
- en: 'It is important to understand that these tactics are all fundamentally performing
    *pattern rewriting*. The patterns for each are:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，这些策略都在根本上执行*模式重写*。每个的模式为：
- en: '**Input Goal:** `a`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入目标:** `a`'
- en: '**Assumption:** `a = b` or `a ↔ b`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**假设：** `a = b` 或 `a ↔ b`'
- en: '**Output Goal:** `b`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出目标:** `b`'
- en: '`rw` is the most direct of the 3\. It applies a theorem or assumption that
    looks like `a = b` or `a <-> b` to a goal that looks like `a`, substituting it
    with `b`.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`rw` 是这三个中最直接的。它将一个类似 `a = b` 或 `a <-> b` 的定理或假设应用到一个类似 `a` 的目标上，并用 `b` 替换它。'
- en: '`rw`, unlike `apply` and `exact`, can be applied to non-goals to transform
    them. This is very useful to massage theorems from different sources into alignment
    to prove your goal.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`rw` 与 `apply` 和 `exact` 不同，可以应用于非目标以转换它们。这对将来自不同来源的定理调整到与你的目标一致以证明它们非常有用。'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Input Goal:** `a`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入目标：** `a`'
- en: '**Assumption:** `a`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**假设：** `a`'
- en: '**Output Goal:** *No Goal*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出目标：** *无目标*'
- en: '`exact` takes an assumption, along with any needed parameters, and uses it
    to resolve the current goal. It is simplistic, but effective.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`exact` 接受一个假设，以及任何需要的参数，并用它来解决当前的目标。它简单而有效。'
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Input Goal:** `b`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入目标：** `b`'
- en: '**Assumption:** `a → b`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**假设：** `a → b`'
- en: '**Output Goal:** `a`'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出目标：** `a`'
- en: '`apply` transforms your goal into a different goal using an implication. If
    a proof of `a` exists in the current scope, it is applied (in which case you basically
    get `exact`). Otherwise, you get a new goal `a`.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply` 使用蕴含转换你的目标为不同的目标。如果在当前范围内存在 `a` 的证明，那么它被应用（在这种情况下，你基本上得到 `exact`）。否则，你会得到一个新的目标
    `a`。'
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Importantly (so importantly I''ll bring it up again later): an `a ↔ b` or `a
    = b` assumption can be converted to `a → b` (with `.mp`) or `b → a` (with `.mpr`).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是（非常重要，我将在稍后再次提到）：一个 `a ↔ b` 或 `a = b` 的假设可以转换为 `a → b`（用 `.mp`）或 `b → a`（用
    `.mpr`）。
- en: TPiL mentions sub-goals at several points and does briefly discuss `have`, but
    I feel this area was glossed over. Adding sub-goals toward your larger goal is
    an extremely helpful method of making larger proofs tractable.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: TPiL 在几个地方提到了子目标，并简要讨论了`have`，但我觉得这个区域被忽略了。向你的大目标添加子目标是使更大的证明可处理的极其有用的方法。
- en: 'The first (and seemingly most common) way to introduce sub-goals is by way
    of `have`, which generally has two purposes. First: you can introduce smaller
    goals that are easier to prove—sometimes even possible for Lean to prove automatically.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种（也似乎是最常见的）引入子目标的方法是通过 `have`，它通常有两个目的。首先：你可以引入更小的目标，这些目标更容易证明 —— 有时甚至 Lean
    可以自动证明。
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Second: you can use it to instantiate other theorems for re-use:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，你可以用它来实例化其他定理以便重用：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In contrast, `if` / `else` is generally useful in cases where you need to introduce
    a goal that relies on the [law of the excluded middle](https://lean-lang.org/theorem_proving_in_lean4/axioms_and_computation.html?highlight=propext#the-law-of-the-excluded-middle).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，`if` / `else` 通常在需要引入依赖于[排中律](https://lean-lang.org/theorem_proving_in_lean4/axioms_and_computation.html?highlight=propext#the-law-of-the-excluded-middle)的目标时非常有用。
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that this, along with helpful theorems like `not_not` rely on classical
    logic and as such are not strictly constructive (as far as my knowledge indicates),
    but `if`/`else` in particular is such a useful means of organizing my thoughts
    in the implementation of a proof that I opted to use it quite heavily.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个与像 `not_not` 这样有用的定理依赖于经典逻辑，因此在严格的构造性意义上（据我所知）不是严格的，但`if` / `else` 特别是在证明的实现中组织思想方面是如此有用，以至于我选择大量使用它。
- en: 'EDIT: It appears that Lean will only allow non-constructive uses of `if` /
    `else` if you have used `open Classical` in the module. [More info](https://lobste.rs/s/hwjv0f/beginner_s_companion_theorem_proving#c_jc4wbc)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑：看起来 Lean 只有在模块中使用了`open Classical`才允许`if` / `else`的非构造性用法。[更多信息](https://lobste.rs/s/hwjv0f/beginner_s_companion_theorem_proving#c_jc4wbc)
- en: TLiP discusses handling cases with dots and `cases _ with` and `match _ with`,
    but it wasn't clear to me how to handle the (labelled) sub-goals generated other
    tools (like `apply Iff.intro`).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: TLiP 讨论了处理带点和 `cases _ with` 以及 `match _ with` 的情况，但我不清楚如何处理其他工具（如 `apply Iff.intro`）生成的（带标签的）子目标。
- en: You can use `case <label> => <proof>` to handle a specific named proof.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `case <label> => <proof>` 来处理特定命名的证明。
- en: 'This couples well with `refine`, which is like `exact` but generates sub-goals
    for (named or anonymous) placeholders:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这与`refine`很匹配，它类似于`exact`但会生成（命名或匿名）占位符的子目标：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As noted above, you can transform inferential rules with dot accessors:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如上文所述，你可以使用点访问符来转换推理规则：
- en: 'Beyond this, many operators expose helpful utilities. Using `a > b` as an example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，许多操作符公开了有用的实用程序。以 `a > b` 为例：
- en: '`le` produces `b < a`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`le` 产生 `b < a`'
- en: '`not_le` produces `¬ a <= b`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not_le` 产生 `¬ a <= b`'
- en: '`asymm` produces `¬ a < b`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`asymm` 产生 `¬ a < b`'
- en: '`trans_le` produces `a <= c -> b < c`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trans_le` 产生 `a <= c -> b < c`'
- en: and many more. These are super handy for cases where (for example) you've got
    your hands on a proof of `a > b` and need to prove `¬ a <= b`, which happens often
    with contraposition.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他用法。在你已经证明了`a > b`并且需要证明`¬ a <= b`的情况下，这些用法非常方便，这种情况在逆否命题中经常出现。
- en: These tactics are all negation-related. Much like `rw` / `apply` / `exact`,
    they do different yet similar things.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这些策略都与否定有关。与`rw`/`apply`/`exact`类似，它们做着不同但相似的事情。
- en: '**Input State:** an assumption `h`, for which you can prove `¬ h` from other
    assumptions'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入状态：**一个假设`h`，你可以从其他假设中证明`¬ h`'
- en: '**Output State:** the goal is replaced with `¬ h`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出状态：**目标被替换为`¬ h`'
- en: This is useful in cases where you have constructed a contradiction in your assumptions
    for a proof by contradiction, but the contradiction is not obvious to Lean.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这在你构建了一个矛盾的假设以证明矛盾时非常有用，但这个矛盾对于Lean来说并不明显的情况下。
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Input State:** a pair of assumptions `h` and `h''` which *blatantly* contradict'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入状态：**一对假设`h`和`h''`，它们*明显*地相互矛盾'
- en: '**Output State:** *No Goal*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出状态：** *无目标*'
- en: '`contradiction` cuts out the extra steps of `absurd` in cases where the contradiction
    is obvious to Lean. Typically, this means that you have hypothesis `h : a` and
    `h'' : ¬ a`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`contradiction`在Lean明显地将矛盾切除掉时省去了`absurd`的额外步骤。通常，这意味着你有假设`h：a`和`h''：¬ a`。'
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Input State:** an assumption `h`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入状态：**一个假设`h`'
- en: '**Output State:** the goal is replaced with `¬ h`, and `h` is replaced with
    `¬ goal`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出状态：**目标被替换为`¬ h`，并且`h`被替换为`¬ goal`'
- en: 'Unlike `absurd` / `contradiction`, this is *actually* doing something different:
    applying [contraposition](https://en.wikipedia.org/wiki/Contraposition). I''m
    including it mostly because the tactic wasn''t mentioned in TLiP and I often find
    that `contrapose` is useful to simplify goals that involve negation in combination
    with `rw [not_not]`.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 与`absurd`/`contradiction`不同，这实际上是在做一些不同的事情：应用[contraposition](https://en.wikipedia.org/wiki/Contraposition)。我包含它主要是因为在TLiP中没有提到这种策略，我经常发现`contrapose`在简化涉及否定与`rw
    [not_not]`组合的目标时很有用。
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In a conventional language with algebraic data types, there are broadly two
    groups of types:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的具有代数数据类型的语言中，类型大致分为两组：
- en: 'In a language like Rust, these are `struct`s or tuples:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在Rust等语言中，这些是`struct`或元组：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `And` type in Lean, while usually written `A ∧ B`, is actually a structure
    that looks something like:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Lean中，`And`类型，虽然通常写成`A ∧ B`，但实际上是一个看起来像这样的结构：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Since this is a structure, that means you can destructure it in an assumption:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个结构，这意味着你可以在假设中解构它：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can deal with it in a goal in two ways:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用两种方式来处理这个目标：
- en: 'Instantiating the structure: `exact 〈 a, b 〉` (closes the goal)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化结构：`exact 〈 a, b 〉`（关闭目标）
- en: 'Converting to sub-goals: `apply And.intro` (creates new goals for proving the
    left and right sides)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换为子目标：`apply And.intro`（为证明左侧和右侧创建新的目标）
- en: 'In a language like Rust, these are `enum`s:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在Rust等语言中，这些是`enum`：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `Or` type in Lean is a sum type. While written `A ∨ B`, it would actually
    look something like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在Lean中，`Or`类型是一个求和类型。虽然写成`A ∨ B`，但实际上会是这样的形式：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As a sum type, you deal with it by *pattern matching* in assumptions:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个求和类型，你可以通过在假设中进行*模式匹配*来处理它：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'However, in goals you generally do one of two things:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在目标中，你通常会做两件事之一：
- en: 'Instantiate one side of the structure: `exact Or.inr b` (which closes the goal).
    This pairs well with `have` to create a sub-goal for one side of the `Or`.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化结构的一侧：`exact Or.inr b`（关闭目标）。这与`have`很搭配，用于为`Or`的一侧创建一个子目标。
- en: 'Convert to an implication: for example `rw [or_iff_not_imp_left]` (which convers
    `a ∨ b` to `¬ a -> b`, and given a `¬a` assumption changes the goal to `b`)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换为蕴含式：例如`rw [or_iff_not_imp_left]`（将`a ∨ b`转换为`¬ a -> b`，并且给定一个`¬a`的假设将目标改为`b`）
- en: The single thing that gave me the most trouble in my hobby project was the proving
    of theorems involving *existential quantifiers.* It is important to understand
    the constructive elements of Lean to fully understand the design of existentials,
    and I think that TPiL does a pretty good job of explaining that. However, that
    explanation doesn't really tell you how to prove existentials in more complicated
    settings.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的业余项目中给我带来最多麻烦的单一事物是证明涉及*存在量词*的定理。了解Lean的构造元素以充分理解存在量词的设计是很重要的，我认为TPiL在解释这一点方面做得相当不错。然而，这种解释并没有真正告诉你如何在更复杂的情况下证明存在量词。
- en: 'First off: existentials have the type `Exist α β`. This is a product type,
    much like `And`, and can be destructured in a similar way:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 首先：存在量化器的类型是`Exist α β`。这是一个乘积类型，类似于`And`，并且可以以类似的方式解构：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This also means that your options for *proving* an existential are much like
    an `And`. Principally: construct it with `exact 〈x, h〉`, `x` is some value that
    satisfies `h`.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着你 *证明* 存在性的选项很像 `And`。主要是：用 `exact 〈x, h〉` 构造它，`x` 是满足 `h` 的某个值。
- en: 'The question then: for complex types, how do you get an `x`? The answer: get
    it from a method. `bex` seems like the common name for it. For example, to obtain
    an element of a finite set `S`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 那么问题来了：对于复杂类型，你怎么得到一个 `x`？答案是：通过方法得到它。`bex` 似乎是它的常见名字。例如，要获取有限集 `S` 的一个元素：
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Once you're used to this, it starts becoming fairly natural. Retrieving elements
    from collections generally requires proving that they are nonempty (otherwise
    there may be no element to retrieve!), but that this was a totally separate type
    (`Finset.Nonempty` in my case) was opaque and difficult for me to discover.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你习惯了这个，它开始变得相当自然。从集合中检索元素通常需要证明它们是非空的（否则可能没有元素可检索！），但这是一个完全不同的类型（在我的情况下是 `Finset.Nonempty`）是不透明的，我很难发现。
- en: 'Above, I discussed `have` as a means of introducing sub-goals to solve. Alongside
    it exists a syntactically-similar tool: `let`. Specifically:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我讨论了 `have` 作为引入子目标来解决的手段。在它旁边存在一个语法上类似的工具：`let`。具体地说：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'may be restated as:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 可以重新表述为：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'which is then (almost!) equivalent to:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎等同于：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'There is one key difference: `let` definitions are *transparent*, while `have`
    definitions are *opaque*. In other words: if you want the rewriter to be able
    to operate on the construction of a term, use `let`. Otherwise, `have`.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个关键区别：`let` 定义是 *透明的*，而 `have` 定义是 *不透明的*。换句话说：如果你希望重写器能够操作术语的构造，请使用 `let`。否则，使用
    `have`。
- en: 'To see the difference, consider this example:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要看到区别，考虑这个例子：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If `let x` is replaced by `have x`, then the inner sub-goal is no longer provable—the
    definition of `x` has become opaque.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `let x` 被替换为 `have x`，那么内部子目标就不再可证明了——`x` 的定义变得不透明。
- en: 'There is one other difference: which fields are optional. `have` requires *only*
    the `construction` / `proof` field, while `let` requires at least the `name` and
    `construction` fields (the type may be inferred).'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个区别：哪些字段是可选的。`have` 只需要 `construction` / `proof` 字段，而 `let` 至少需要 `name`
    和 `construction` 字段（类型可以推断）。
- en: 'My final note—and the only one on code organization—is to use small theorems.
    If you example much of mathlib, you will find small proofs: a handful of lines,
    at most. This is obviously helpful when you are familiar with the library internals,
    but opaque as a reader on how exactly the proof is constructed.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我的最后一条注记——也是关于代码组织的唯一注记——是使用小定理。如果你看一下 mathlib 的大部分内容，你会发现小证明：最多几行。当你熟悉库的内部结构时，这显然是有帮助的，但对于读者来说，不太清楚证明是如何构建的。
- en: 'Don''t let that discourage you from focusing on small proofs, though! There
    are two *strong* reasons beyond vague "code architecture" considerations for this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 但不要因此而让你不专注于小证明！有两个 *强有力* 的原因超出模糊的 "代码架构" 考虑范围：
- en: Small proofs can often be constructed automatically by Lean through `exact?`,
    `rw?` or `simp?` (if not more advanced tools like [`aesop`](https://github.com/JLimperg/aesop)),
    which means less work for you.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 Lean，小证明通常可以通过 `exact?`、`rw?` 或 `simp?`（如果没有更高级的工具像 [`aesop`](https://github.com/JLimperg/aesop)）自动构造，这意味着你需要做更少的工作。
- en: The theorem lookup tactics start to perform noticeable worse with large proof
    states, which makes the interactive experience worse.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定理查找策略开始在大型证明状态下表现得更差，这使得交互体验变得更糟。
- en: 'This is not *too* much of a problem—my proof of submodularity of Matroid rank
    functions derived from independence predicates is around 100 lines long and remained
    at least *usable*—but certainly an element of UX that coincides with good practice:
    small theorems, like small functions, are generally easier to work with and this
    aligns with the practical performance of Lean''s interactive systems.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是 *太* 大的问题——我的 Matroid 秩函数的次模性证明源自独立谓词，大约有100行，并且仍然至少是 *可用的*——但肯定是用户体验的一个因素，与良好实践相一致：小定理，像小函数一样，通常更容易处理，而这与
    Lean 交互系统的实际性能相一致。
- en: Overall, working through these proofs in Lean was a very instructive experience
    for me. Being a relative beginner to proof assistants in general (having only
    light experience toying with Emacs' [Proof General](https://proofgeneral.github.io/)
    + [Coq](https://coq.inria.fr/) during grad school), the quality of the LSP and
    other tools were huge boons. I wish this had existed while I was working on theory
    stuff more actively, as it did help me find issues with on-paper proofs that I'd
    done which held hidden assumptions.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，通过 Lean 中的这些证明对我来说是一次非常有教益的经验。相对来说，我是一个证明助手的初学者（在研究生期间只轻微地尝试过 Emacs 的[证明通用工具](https://proofgeneral.github.io/)
    + [Coq](https://coq.inria.fr/)），LSP 和其他工具的质量是巨大的优势。我希望在我更积极地研究理论时存在这样的工具，因为它确实帮助我发现了我做的纸上证明中存在的隐藏假设。
- en: 'That said: it definitely was not a replacement for working on paper for me.
    The degree to which Lean encourages small transformations caused me to miss the
    forest for the trees in a very direct way. It is useful in verification of theory,
    but not a replacement for sitting down with pen, paper, and tea and working through
    a proof.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此：对我来说，它绝对不是纸上工作的替代品。Lean 鼓励小的转换程度使我以一种非常直接的方式错过了森林。它在理论验证中很有用，但不能替代坐下来用笔、纸和茶来证明的过程。
- en: Hopefully these notes will be useful for others looking to use Lean as a proof
    assistant (and, perhaps, people who are less committed to constructive theory
    and are more than willing to embrace practical niceties like `if`/`else` and `not_not`).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这些笔记对其他人想要将 Lean 作为证明助手的人有所帮助（也许，对于不那么致力于建构理论并且更愿意接受诸如`if`/`else`和`not_not`等实际细节的人也是如此）。
