- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:25:38'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月27日 14:25:38
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Thoughts on PostgreSQL in 2024 | Jonathan Katz
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对 PostgreSQL 在 2024 年的思考 | 乔纳森·卡茨
- en: 来源：[https://jkatz05.com/post/postgres/postgresql-2024/](https://jkatz05.com/post/postgres/postgresql-2024/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://jkatz05.com/post/postgres/postgresql-2024/](https://jkatz05.com/post/postgres/postgresql-2024/)
- en: Thoughts on PostgreSQL in 2024
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对 PostgreSQL 在 2024 年的思考
- en: '*Tue, Jan 2, 2024 *18-minute read**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*Tue, Jan 2, 2024 *18分钟读完**'
- en: '**A question I often hear, and also ask myself, is “where is PostgreSQL going?”
    This is a deep question: it’s not limited to the work on the core database engine,
    but rather everything going on in the community, including related open source
    projects and event and community development. Even with the popularity of PostgreSQL,
    which was selected as [DB Engine’s “DBMS of the Year” for the fourth time](https://db-engines.com/en/blog_post/106),
    it’s a good idea to step back at times and reflect on what PostgreSQL will look
    like in the future. While it may not necessarily lead to immediate changes, it
    does help give context to all the work going on in the community.**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**我经常听到也自己问的一个问题是“PostgreSQL会走向何方？”这是一个深刻的问题：它不仅限于核心数据库引擎的工作，而是包括社区中的所有事物，其中也包括相关的开源项目和活动以及社区发展。尽管
    PostgreSQL 很受欢迎，已经第四次被选为[DB Engine的“年度数据库管理系统”](https://db-engines.com/en/blog_post/106)，但是有时放慢脚步，思考一下
    PostgreSQL 在未来会是什么样子，是一个好主意。尽管这可能不会立即导致改变，但它确实有助于为社区中正在进行的所有工作提供背景。**'
- en: '**The new year is a great opportunity to ask “where is PostgreSQL going?” and
    is a question I’ve been personally reflecting on. So here are some of my thoughts
    on where PostgreSQL is going as we enter into 2024\. This is not meant to be a
    roadmap, but rather personal thoughts on where PostgreSQL is going.**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**新的一年是一个很好的机会，问一下“PostgreSQL会走向何方？”这是我一直在思考的一个问题。所以在我们进入2024年之际，我想分享一些我对PostgreSQL未来发展的看法。这并不意味着是一个路线图，而仅仅是我个人对PostgreSQL未来走向的思考。**'
- en: '**PostgreSQL feature development**'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**PostgreSQL 功能的发展**'
- en: '**At the [PGCon 2023 Developer Meeting](https://wiki.postgresql.org/wiki/PgCon_2023_Developer_Meeting),
    I proposed a topic entitled [“What are the big challenges for PostgreSQL users?”](https://wiki.postgresql.org/wiki/PgCon_2023_Developer_Meeting#What_are_the_big_challenges_for_our_users.3F_What_are_the_big_challenges_for_us_to_solve.3F).
    The goal of this was to talk about both common user requests and understand where
    database workloads were heading to determine if we are building PostgreSQL towards
    where database workloads are going. Based on many conversation and observations,
    I proposed three broad feature buckets to look at:**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**在[PGCon 2023开发者会议](https://wiki.postgresql.org/wiki/PgCon_2023_Developer_Meeting)上，我提出了一个名为[“PostgreSQL用户面临的重大挑战是什么？”](https://wiki.postgresql.org/wiki/PgCon_2023_Developer_Meeting#What_are_the_big_challenges_for_our_users.3F_What_are_the_big_challenges_for_us_to_solve.3F)的话题。这个话题的目的是探讨常见的用户需求，了解数据库工作负载的方向，以确定我们是否将PostgreSQL建设成与数据库工作负载相一致。根据许多对话和观察，我提出了三个广泛的功能桶来进行研究：**'
- en: '****Availability****'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****可用性****'
- en: '****Performance****'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****性能****'
- en: '****Developer features****'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '****开发者功能****'
- en: '**These are all ongoing areas of work for 2024 and beyond, but there are definitely
    steps PostgreSQL can take in the coming year to make improvements in all of these
    areas. Below I dive into more details about each of these feature groups.**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**这些都是 2024 年及以后的持续工作领域，但 PostgreSQL 绝对可以在未来一年中采取一些步骤，在所有这些领域中进行改进。下面我将详细介绍这些功能组的更多细节。**'
- en: '**Availability**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**可用性**'
- en: '**Continuing to improve the availability of a PostgreSQL cluster is the first,
    second, and third most requested “feature” I hear about from both current and
    prospective PostgreSQL users. I’m not exaggerating either: while restarting PostgreSQL
    can be nearly instantaneous, there are use cases where that can be too much time
    (though those are at the extreme). Additionally, operations with locks that block
    writes for prolonged periods of time can be considered as “downtime.”**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续改善PostgreSQL集群的可用性是当前和潜在的PostgreSQL用户最常提到的第一、第二和第三“特性”。我没有夸张：虽然重新启动PostgreSQL几乎是瞬间完成的，但在极端情况下可能会花费太多时间（虽然这些情况很极端）。此外，锁定导致写入阻塞的操作可能被视为“停机时间”。**'
- en: '**While most PostgreSQL users can currently achieve their uptime requirements,
    there is a class of workloads with critical uptime requirements that we can better
    support in PostgreSQL with additional development effort. Most of this section
    (and blog post) focuses on one feature area where continued improvements will
    allow PostgreSQL to be deployed in even more environments that have these requirements.**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**虽然大多数 PostgreSQL 用户目前可以实现他们的持续运行时间要求，但是有一类具有关键运行时间要求的工作负载，我们可以通过额外的开发工作更好地支持
    PostgreSQL。本节（以及博客文章）的大部分内容都集中在一个功能领域，持续的改进将使 PostgreSQL 可以部署在更多具有这些要求的环境中。**'
- en: '**How logical replication can help with active-active, blue/green, zero-downtime
    upgrading, and other workflows**'
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**逻辑复制如何帮助实现活动-活动、蓝/绿、零停机升级和其他工作流程**'
- en: '**For existing PostgreSQL users and users looking to migrate to PostgreSQL,
    features around availability are the biggest ask. Typically, this centers around
    [high availability](https://en.wikipedia.org/wiki/High_availability), or the ability
    to continue to have access to the database (especially read/write access) during
    a planned (update) or unplanned (outage) disruption. PostgreSQL provides many
    features to support high availability, including streaming replication. However,
    maximizing HA still requires the use of an additional service or a utility like
    [Patroni](https://github.com/zalando/patroni) to achieve many uptime goals.**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于现有的 PostgreSQL 用户和希望迁移到 PostgreSQL 的用户来说，围绕可用性的特性是最重要的需求。通常，这集中在[高可用性](https://zh.wikipedia.org/wiki/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7)或者在计划（更新）或未计划（故障）中断期间继续访问数据库（特别是读/写访问）的能力。PostgreSQL
    提供了许多功能来支持高可用性，包括流复制。然而，要最大化高可用性仍然需要使用额外的服务或类似[Patroni](https://github.com/zalando/patroni)这样的实用程序来实现许多持续运行时间目标。**'
- en: '**Many users I talk to are happy with the availability they can get with PostgreSQL:
    it works for most of their use cases. However, I’ve been seeing an emerging trend
    of workloads on PostgreSQL that need even higher availability, where a 15-30s
    offline window isn’t good enough. This is both for planned outages (e.g. minor
    version upgrades, major version upgrades) and unplanned outages. I’ve even talked
    to users who have workloads that can only be unavailable for 1s – and while I
    was initially skeptical, when I heard what the workloads were for, I did agree
    that 1s was a reasonable requirement for them!**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**我与许多用户交谈时发现，他们对 PostgreSQL 提供的可用性感到满意：它适用于他们大多数的用例。然而，我注意到了一种新兴的趋势，即在 PostgreSQL
    上需要更高可用性的工作负载，其中 15-30 秒的离线窗口不够用。这既适用于计划中的中断（例如次要版本升级、主要版本升级）又适用于未计划中的中断。我甚至与那些需要只能中断
    1 秒的工作负载的用户进行了交谈 - 虽然我最初持怀疑态度，但当我了解到工作负载的内容时，我确实认为 1 秒对于他们来说是一个合理的要求！**'
- en: '**A key feature for PostgreSQL that will continue to improve availability is
    [logical replication](https://www.postgresql.org/docs/current/logical-replication.html).
    Logical replication allows the real-time streaming of changes from a database
    into any system that can understand the PostgreSQL logical replication protocol.
    Logical replication in PostgreSQL [has been around for awhile](/post/postgres/postgres-10-tribute/),
    but [recent releases](https://www.postgresql.org/about/news/postgresql-16-released-2715/)
    have added significant enhancements that can better support availability use-cases,
    including functionality and performance features.**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于 PostgreSQL 的一个关键特性将继续提高可用性，那就是[逻辑复制](https://www.postgresql.org/docs/current/logical-replication.html)。逻辑复制允许从数据库实时流式传输更改到任何能够理解
    PostgreSQL 逻辑复制协议的系统中。PostgreSQL 中的逻辑复制[已经存在一段时间了](/post/postgres/postgres-10-tribute/)，但是[最近的发布](https://www.postgresql.org/about/news/postgresql-16-released-2715/)添加了重要的增强功能，可以更好地支持可用性用例，包括功能和性能特性。**'
- en: '**One advantage this has over physical (or binary) replication is that you
    can use logical replication to stream changes from a PostgreSQL 15 to a PostgreSQL
    16 system as part of a major version upgrade. This can help reduce the amount
    of downtime it takes to perform a major version upgrade (here is an example of
    how [Instacart used logical replication to get to zero-downtime on major version
    upgrades](https://www.instacart.com/company/how-its-made/zero-downtime-postgresql-cutovers/)),
    but there is still work to be done in PostgreSQL to improve this use case and
    other high availability use cases. Additional features will help unlock more seamless
    ways of supporting [blue-green deployments](https://en.wikipedia.org/wiki/Blue%E2%80%93green_deployment)
    in PostgreSQL.**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**与物理（或二进制）复制相比的一个优势是，你可以使用逻辑复制将更改从 PostgreSQL 15 流式传输到 PostgreSQL 16 系统，作为主要版本升级的一部分。
    这可以帮助减少执行主要版本升级所需的停机时间（这是一个示例，[Instacart如何使用逻辑复制实现了零停机的主要版本升级](https://www.instacart.com/company/how-its-made/zero-downtime-postgresql-cutovers/)），但是在
    PostgreSQL 中仍需要进行一些工作以改进这种用法以及其他高可用性用例。 其他功能将有助于解锁更无缝地支持 [蓝绿部署](https://en.wikipedia.org/wiki/Blue%E2%80%93green_deployment)
    的方式。**'
- en: '**Logical replication can also be used as part of the high availability mechanism
    itself. One technique, “active-active replication,” allows multiple databases
    can simultaneously accept writes and replicate the changes amongst themselves.
    This technique is typically used in systems that have that “no more than 1s of
    unavailability” requirement: if a writer database is unavailable, then an application
    can switch its database traffic to a different writer database without waiting
    for it to be promoted. While this sounds ideal, building and managing an active-active
    system is extremely complicated: it impacts application design, requires you to
    have a write-conflict management and resolution strategy, and requires careful
    fault tolerance monitoring to help ensure data integrity (e.g. a “conflict storm”)
    and replication health (e.g. what happens if an instance can’t replicate changes
    for several hours?).**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**逻辑复制还可以作为高可用性机制的一部分使用。 一种技术，“主动-主动复制”，允许多个数据库同时接受写入并在它们之间复制更改。 该技术通常用于具有“不超过
    1s 的不可用性”要求的系统：如果写入数据库不可用，则应用程序可以将其数据库流量切换到另一个写入数据库，而无需等待其被提升。 尽管这听起来很理想，但构建和管理主动-主动系统非常复杂：它会影响应用程序设计，需要你拥有写入冲突管理和解决策略，并且需要仔细的容错监控以帮助确保数据完整性（例如“冲突风暴”）和复制健康状况（例如如果一个实例无法在几个小时内复制更改会发生什么？）。**'
- en: '**However, both the major version upgrade and active-active cases do present
    a roadmap for how we can continue to improve logical replication in PostgreSQL.
    [Amit Kapila](https://amitkapila16.blogspot.com/), who has led many of the logical
    replication feature efforts, and I developed a talk this year called [The journey
    towards active-active replication in PostgreSQL](https://www.postgresql.eu/events/pgconfeu2023/sessions/session/4783/slides/434/pgconfeu2023_active_active.pdf)
    ([video of us co-presening one version](https://www.youtube.com/watch?v=jPp4XIY4XRw))
    that talks about why solving for these use cases are important, the current state-of-the-art
    of PostgreSQL logical replication, and what work we need to do to get PostgreSQL
    to better support these cases. The good news: as of PostgreSQL 16, we have most
    of the foundational blocks for supporting active-active, blue-green deployments,
    and zero downtime major version upgrades – and even if they are not in core, there
    are PostgreSQL extensions that can provide this functionality (disclosure: I’ve
    been involved with one such extension, [`pgactive`](https://aws.amazon.com/blogs/database/using-pgactive-active-active-replication-extension-for-postgresql-on-amazon-rds-for-postgresql/)).**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**但是，主要版本升级和主动-主动情况确实为我们如何继续改进 PostgreSQL 中的逻辑复制提供了一个路线图。 [阿米特·卡皮拉](https://amitkapila16.blogspot.com/)，他领导了许多逻辑复制功能的工作，我今年开发了一个演讲，名为
    [在 PostgreSQL 中实现主动-主动复制的旅程](https://www.postgresql.eu/events/pgconfeu2023/sessions/session/4783/slides/434/pgconfeu2023_active_active.pdf)
    （[我们共同呈现的一个版本的视频](https://www.youtube.com/watch?v=jPp4XIY4XRw)），谈到了为什么解决这些用例很重要，PostgreSQL
    逻辑复制的当前技术水平，以及我们需要做什么工作来使 PostgreSQL 更好地支持这些用例。 好消息是：截至 PostgreSQL 16，我们已经具有支持主动-主动，蓝绿部署和零停机主要版本升级的大多数基础模块
    - 即使它们不在核心中，也有 PostgreSQL 扩展可以提供此功能（披露：我参与了一种这样的扩展，[`pgactive`](https://aws.amazon.com/blogs/database/using-pgactive-active-active-replication-extension-for-postgresql-on-amazon-rds-for-postgresql/)）。**'
- en: '**There are multiple efforts in 2024 to help close these feature gaps. Targeted
    for PostgreSQL 17 (usual disclaimer that these may not be included), there has
    been a focus on ensuring logical replication can work with key workflows, such
    as [`pg_upgrade`](https://www.postgresql.org/docs/current/pgupgrade.html) and
    in [high availability systems](https://commitfest.postgresql.org/46/4423/), and
    working to support replication of additional changes (e.g. [sequences](https://commitfest.postgresql.org/46/3823/)).
    Beyond that, we must continue to support more commands in logical replication
    (e.g. [DDL](https://commitfest.postgresql.org/46/3595/)), continue to improve
    performance (more parallelism support, worker optimizations), and add features
    that simplify management of logical replication (node synchronization/resynchronization).**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**在2024年，有多个努力来帮助弥补这些功能差距。针对PostgreSQL 17（通常的免责声明，可能不包括其中），我们重点关注确保逻辑复制可以与关键工作流程一起使用，例如[`pg_upgrade`](https://www.postgresql.org/docs/current/pgupgrade.html)和[高可用性系统](https://commitfest.postgresql.org/46/4423/)，并致力于支持附加更改的复制（例如[sequences](https://commitfest.postgresql.org/46/3823/)）。此外，我们必须继续在逻辑复制中支持更多命令（例如[DDL](https://commitfest.postgresql.org/46/3595/)），继续改善性能（更多并行支持，工作器优化），并添加简化逻辑复制管理的功能（节点同步/重新同步）。**'
- en: '**All of these efforts will make it possible to use PostgreSQL in more workloads
    that have very high uptime requirements, and simplify how users roll out new changes
    to their production environments. While there’s still more work to do with enhancing
    logical replication in PostgreSQL, it looks like 2024 will give us more features
    that help users run PostgreSQL in critical environments.**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**所有这些努力将使得在更多需要高可用性的工作负载中使用PostgreSQL成为可能，并简化用户在生产环境中实施新更改的方式。虽然在增强PostgreSQL中的逻辑复制方面还有更多工作要做，但看起来在2024年我们将获得更多功能，这些功能将帮助用户在关键环境中运行PostgreSQL。**'
- en: '**Unblocking the locks**'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**解锁锁定的状态**'
- en: '**Another area of availability to consider is around schema maintenance operations
    (i.e. [DDL](https://en.wikipedia.org/wiki/Data_definition_language) statements),
    such an [`ALTER TABLE`](https://www.postgresql.org/docs/current/sql-altertable.html)
    that takes an [`ACCESS EXCLUSIVE`](https://www.postgresql.org/docs/current/explicit-locking.html#LOCKING-TABLES)
    lock on the table that blocks all other write operations on that table. For many
    users, this is the same thing as being unavailable, even if it’s only to a subset
    of their data. Lack of full support for nonblocking/online schema maintenance
    operations in PostgreSQL has become more noticeable as other relational databases
    include support for this feature.**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**另一个需要考虑的可用性领域是围绕模式维护操作（即[DDL](https://en.wikipedia.org/wiki/Data_definition_language)语句），例如[`ALTER
    TABLE`](https://www.postgresql.org/docs/current/sql-altertable.html)会在表上获取一个[`ACCESS
    EXCLUSIVE`](https://www.postgresql.org/docs/current/explicit-locking.html#LOCKING-TABLES)锁，这将阻塞该表上的所有其他写操作。对于许多用户来说，即使只是对其数据的一个子集而言，这等同于不可用。随着其他关系数据库包括此功能的支持，PostgreSQL对非阻塞/在线模式维护操作的完整支持变得更加明显。**'
- en: '**There are various utilities and extensions that let you run nonblocking schema
    updates, but it would be more convenient, and likely performant, to support more
    nonblocking schema changes natively in PostgreSQL. Based on the design, we may
    already have the foundation to build out this feature, but it will take some time.
    While I’m not aware of active implementation efforts, I do think in 2024 we need
    to make more progress on making it possible for users to run most, if not all,
    DDL commands without blocking writes, if they so choose.**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**有各种实用程序和扩展可以让你运行非阻塞模式的模式更新，但更方便，而且可能更高效的方式是在PostgreSQL中本地支持更多的非阻塞模式变化。基于设计，我们可能已经有了构建这一功能的基础，但这需要一些时间。虽然我不知道有没有积极的实施工作，但我认为在2024年，我们需要在使用户能够运行大多数（如果不是全部）DDL命令而不会阻塞写入方面取得更多进展。**'
- en: '**Performance**'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**性能**'
- en: '**Performance is very much a “what have you done for me lately” feature: we
    can always go faster! The good news is that PostgreSQL has a reputation of vertically
    scaling, or being able to scale as you provide more hardware resources to a single
    instance. While there are use cases where horizontally scaling both reads and
    writes makes sense, we do need to continue to ensure PostgreSQL can continue to
    scale as compute and memory resources continue to grow.**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**性能是一个“最近你为我做了什么”的特性：我们总是可以更快！好消息是，PostgreSQL以垂直扩展或在向单个实例提供更多硬件资源时可以扩展的声誉。虽然有用例需要水平扩展读写，但我们需要继续确保PostgreSQL可以随着计算和内存资源的增长而继续扩展。**'
- en: '**Here’s a more “practical” way of putting it: there is an Amazon EC2 instance
    that has [448 vCPU and 24TB of RAM](https://aws.amazon.com/ec2/instance-types/high-memory/)
    – is PostgreSQL able to fully maximize its use of all of those resources on a
    single instance? Looking at the current and upcoming hardware that PostgreSQL
    users will use gives us a measured target for how we can continue to improve PostgreSQL
    performance.**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个更加“实际”的表述：有一个亚马逊EC2实例，拥有[448 vCPU和24TB的RAM](https://aws.amazon.com/ec2/instance-types/high-memory/)
    - PostgreSQL能否充分利用单个实例上的所有资源？观察当前和即将使用的硬件可以为PostgreSQL用户设定一个合适的目标，以便我们持续提高PostgreSQL的性能。
- en: '**As we enter 2024, there are already multiple efforts that will help make
    it possible to continue to vertically scale PostgreSQL. One of the biggest efforts,
    and one that’s been an ongoing multi-year project, is to support direct IO (DIO)
    and asynchronous IO (AIO) in PostgreSQL. For details, I’ll defer to Andres Freund’s
    [PGConf.EU](https://www.pgconf.eu/) slides on the [status of adding AIO to PostgreSQL](https://anarazel.de/talks/2023-12-14-pgconf-eu-path-to-aio/path-to-aio.pdf),
    but it looks like in 2024 that we’ll be much closer to full AIO support.**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 进入2024年，已经有多个努力在帮助继续垂直扩展PostgreSQL的可能性。其中最大的努力之一，也是一个持续多年的项目，是支持PostgreSQL中的直接IO（DIO）和异步IO（AIO）。有关详情，我将转交给Andres
    Freund在[PGConf.EU](https://www.pgconf.eu/)上关于[将AIO添加到PostgreSQL的状态](https://anarazel.de/talks/2023-12-14-pgconf-eu-path-to-aio/path-to-aio.pdf)的幻灯片介绍，但看起来在2024年，我们将更接近完全支持AIO。
- en: '**Another effort I’m intrigued by is [parallel recovery](https://wiki.postgresql.org/wiki/Parallel_Recovery).
    PostgreSQL users with heavy write workloads tend to postpone [checkpoints](https://www.postgresql.org/docs/current/sql-checkpoint.html)
    to defer I/O workload. This can be problematic on a busy system if PostgreSQL
    crashes and a checkpoint has not occurred for awhile. When PostgreSQL restarts,
    it enters “crash recovery” where it replays every change since the last checkpoint
    so it can reach a consistent state. During crash recovery, PostgreSQL cannot accept
    reads or writes, which means that it’s unavailable. This is problematic for busy
    stems: while PostgreSQL can accept concurrent writes, it can only replay changes
    with a single process. If a crash on a busy system occurred an hour after the
    last checkpoint, it could take several more hours to reach a consistent state
    while the system is offline!**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我对另一个努力很感兴趣，即[并行恢复](https://wiki.postgresql.org/wiki/Parallel_Recovery)。拥有大量写入工作负载的PostgreSQL用户往往会延迟[检查点](https://www.postgresql.org/docs/current/sql-checkpoint.html)以推迟I/O工作负载。如果PostgreSQL发生崩溃并且一段时间内没有发生检查点，这对于繁忙的系统可能会产生问题。当PostgreSQL重新启动时，它进入“崩溃恢复”阶段，在此期间它会重放自上次检查点以来的每一次更改，以达到一致状态。在崩溃恢复期间，PostgreSQL无法接受读取或写入操作，这意味着它不可用。这对于繁忙的系统来说是有问题的：虽然PostgreSQL可以接受并发写入，但它只能用一个进程重放更改。如果在上次检查点后的一个小时发生系统崩溃，系统可能需要几个小时才能达到一致状态，而在此期间系统将处于离线状态！
- en: '**One way to help overcome this limitation is to support “[parallel recovery](https://wiki.postgresql.org/wiki/Parallel_Recovery),”
    or being able to replay changes in parallel. At [PGCon 2023](https://www.pgcon.org/),
    Koichi Suzuki gave a [detailed presentation on how PostgreSQL can support parallel
    recovery](https://www.pgcon.org/events/pgcon_2023/sessions/session/392/slides/69/Parallel%20Recovery%20in%20PostgreSQL.pdf).
    This would apply not only to crash recovery, but how PostgreSQL can replay any
    WAL changes (e.g. point-in-time-recovery). While this is a very challenging problem
    to solve, supporting parallel recovery helps PostgreSQL to continue to scale vertically,
    as users can further optimize for heavy write workloads and mitigate the risk
    of a crash causing an untenable delay in coming back online.**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 克服这个限制的一种方式是支持“[并行恢复](https://wiki.postgresql.org/wiki/Parallel_Recovery)”，或者能够并行重放更改。在[PGCon
    2023](https://www.pgcon.org/)上，铃木浩一（Koichi Suzuki）详细介绍了PostgreSQL如何支持并行恢复。这不仅适用于崩溃恢复，还涉及PostgreSQL如何重放任何WAL更改（例如时间点恢复）。虽然这是一个非常具有挑战性的问题，但支持并行恢复有助于PostgreSQL继续垂直扩展，因为用户可以进一步优化大量写入工作负载，并减轻系统崩溃导致无法及时恢复上线的风险。
- en: '**This is not an exhaustive list of performance-related features. There are
    many more efforts around PostgreSQL server performance, including indexing optimizations,
    locking improvements, leveraging hardware acceleration, and more. This in addition
    to work on clients, such as drivers and connection poolers, that can bring additional
    performance gains to how apps interact with PostgreSQL. Looking at what the community
    is working on in 2024, I do believe we’ll continue to see general performance
    gains across all areas of PostgreSQL.**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**这不是与性能相关的功能的详尽清单。在PostgreSQL服务器性能方面还有许多努力，包括索引优化、锁定改进、利用硬件加速等。除此之外，还有一些关于客户端的工作，如驱动程序和连接池器，可以为应用程序与PostgreSQL的交互带来额外的性能提升。从社区在2024年正在努力的方向来看，我相信我们将继续看到PostgreSQL各个领域的性能提升。**'
- en: '**Developer features**'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**开发人员功能**'
- en: '**I view “developer features” as a fairly broad category around how users can
    architect and build their apps around PostgreSQL. This includes SQL syntax, functions,
    [procedural language support](https://wiki.postgresql.org/wiki/PL_Matrix), and
    other features that help users both build apps and transition from other database
    systems. One example of such an innovation is the [`multirange`](https://www.postgresql.org/docs/current/rangetypes.html)
    data type, added in PostgreSQL 14, which let users group non-contiguous ranges
    together. This had many practical purposes, such as in scheduling, and personally
    let me [reduce hundreds of lines of PL/pgSQL code into roughly three lines](https://www.crunchydata.com/blog/better-range-types-in-postgres-14-turning-100-lines-of-sql-into-3).
    Developer features is also a way to keep track of how PostgreSQL can support emergent
    workloads, such as [JSON or vectors](/post/postgres/vectors-json-postgresql/).**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**我认为“开发人员功能”是一个相当广泛的范畴，涉及用户如何围绕PostgreSQL构建和开发其应用程序的方式。这包括SQL语法、函数、[过程化语言支持](https://wiki.postgresql.org/wiki/PL_Matrix)和其他能够帮助用户构建应用程序并从其他数据库系统过渡的功能。一个这样创新的例子是在PostgreSQL
    14中添加的[`multirange`](https://www.postgresql.org/docs/current/rangetypes.html)数据类型，让用户可以将非连续的范围进行分组。这在排程等方面有着许多实际用途，个人而言，它让我将[P
    L/pgSQL代码](https://www.crunchydata.com/blog/better-range-types-in-postgres-14-turning-100-lines-of-sql-into-3)从数百行简化为大约三行。开发人员功能也是一种追踪PostgreSQL如何支持新兴工作负载（如[JSON或向量](/post/postgres/vectors-json-postgresql/)）的方法。**'
- en: '**Currently, a lot of innovation on PostgreSQL developer features is occurring
    in extensions, which is an advantage of PostgreSQL’s extensible model. In the
    server itself, there are areas where PostgreSQL is lagging behind its previous
    pace of releasing developer features. For example, PostgreSQL was the [first relational
    database to support JSON as a queryable data type](/post/postgres/vectors-json-postgresql/),
    but has been lagging on implementing syntax and features specified in the SQL/JSON
    standard. PostgreSQL 16 released several of the SQL/JSON syntax features, and
    there are multiple efforts targeted for 2024 that will include more of the SQL/JSON
    specification.**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**目前，在PostgreSQL开发人员功能方面，很多创新都发生在扩展中，这是PostgreSQL可扩展模型的优势。在服务器本身，有一些领域PostgreSQL的开发人员功能发布的速度正在落后。例如，PostgreSQL是[第一个支持JSON作为可查询数据类型的关系型数据库](/post/postgres/vectors-json-postgresql/)，但在实现SQL/JSON标准中指定的语法和功能方面一直滞后。PostgreSQL
    16发布了几个SQL/JSON语法功能，2024年还有多个计划，将包括更多的SQL/JSON规范。**'
- en: '**With that said, we should be investing in adding developer features in PostgreSQL
    that are not possible to add in extensions, such as SQL standard features. I suggest
    a focus of features that are already available in other databases, such as more
    of the SQL/JSON standard (e.g. `JSON_TABLE`), system versioned tables (useful
    for auditing and “flashback” / bitemporal queries to view data at a specific point
    in time), and module support (useful for “packaging” stored procedures).**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**话虽如此，我们应该投资于在PostgreSQL中添加那些无法通过扩展添加的开发人员功能，例如SQL标准功能。我建议将重点放在已经在其他数据库中可用的功能上，比如更多的SQL/JSON标准（例如`JSON_TABLE`）、系统版本表（用于审计和“闪回”/双时间轴查询以查看特定时间点的数据）和模块支持（用于“打包”存储过程）。**'
- en: '**Additionally, with the previously mentioned focus on availability and performance,
    we should continue to simplify how users can migrate from other databases to PostgreSQL.
    As part of my day job, I had the opportunity to read through a lot of content
    around migration strategies from commercial databases to PostgreSQL, and there’s
    still ample opportunity to simplify the process while enhancing PostgreSQL capabilities.
    This includes features available in other databases (e.g. global temporary tables,
    global partitioned indexes, [autonomous transactions](https://www.postgresql.org/message-id/f7470d5a-3cf1-4919-8404-5c4d91341a9f@tantorlabs.com))
    and adding more functionality and performance optimizations in PL/pgSQL (bulk
    data processing functions, [schema variables](https://commitfest.postgresql.org/46/1608/),
    [caching function metadata](https://commitfest.postgresql.org/46/4684/)). All
    these things improve the PostgreSQL developer experience while making it easier
    for users coming from other relational databases to adopt PostgreSQL.**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**此外，除了之前提到的可用性和性能方面的关注，我们还应该继续简化用户如何从其他数据库迁移到PostgreSQL的过程。作为我的日常工作的一部分，我有机会阅读了大量关于从商业数据库迁移到PostgreSQL的迁移策略的内容，尽管我们仍有充分机会简化这个过程，同时增强PostgreSQL的功能。这包括其他数据库中可用的功能（例如全局临时表、全局分区索引、[自主事务](https://www.postgresql.org/message-id/f7470d5a-3cf1-4919-8404-5c4d91341a9f@tantorlabs.com)）以及在PL/pgSQL中添加更多功能和性能优化（批量数据处理函数、[模式变量](https://commitfest.postgresql.org/46/1608/)、[缓存函数元数据](https://commitfest.postgresql.org/46/4684/)）。所有这些事情都可以改善PostgreSQL开发人员的体验，同时使来自其他关系数据库的用户更容易接受PostgreSQL。**'
- en: '**Finally, we need to see how we can continue to support the emergent workload
    coming from AI/ML data, specifically vector storage and search. At [PGCon](https://www.pgcon.org/)
    2023, while folks wanted to see native vector support in PostgreSQL itself, there
    was consensus that implementing functionality in an extension like [pgvector](https://github.com/pgvector/pgvector)
    would let us support these workloads more quickly (and this [strategy seems to
    have worked](/post/postgres/pgvector-overview-0.5.0/) with [great performance
    results on vector data](https://aws.amazon.com/blogs/database/accelerate-hnsw-indexing-and-searching-with-pgvector-on-amazon-rds-for-postgresql/)).
    However, [given many of the properties of vector workloads](https://www.postgresql.eu/events/pgconfeu2023/sessions/session/4592/slides/435/pgconfeu2023_vectors.pdf),
    there are additions we can make to PostgreSQL to further support them, including
    planner optimizations for working with [TOAST’d data that’s in the active query
    path](https://www.postgresql.org/message-id/ad8a178f-bbe7-d89d-b407-2f0fede93144@postgresql.org),
    and exploring how we can better support queries where the bulk filtering step
    occurs in the `ORDER BY` clause.**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**最后，我们需要看看如何继续支持来自人工智能/机器学习数据的新兴工作负载，特别是矢量存储和搜索。在 [PGCon](https://www.pgcon.org/)
    2023年会上，虽然人们希望在PostgreSQL本身中看到原生的矢量支持，但共识是在像 [pgvector](https://github.com/pgvector/pgvector)
    这样的扩展中实现功能将让我们更快地支持这些工作负载（而这个 [策略似乎已经奏效](/post/postgres/pgvector-overview-0.5.0/)
    ，在 [矢量数据上取得了很好的性能结果](https://aws.amazon.com/blogs/database/accelerate-hnsw-indexing-and-searching-with-pgvector-on-amazon-rds-for-postgresql/)）。然而，鉴于[矢量工作负载的许多特性](https://www.postgresql.eu/events/pgconfeu2023/sessions/session/4592/slides/435/pgconfeu2023_vectors.pdf)，我们可以对PostgreSQL进行一些增强，包括针对[处于活动查询路径中的TOAST’d数据的计划优化](https://www.postgresql.org/message-id/ad8a178f-bbe7-d89d-b407-2f0fede93144@postgresql.org)，以及探索如何更好地支持在`ORDER
    BY`子句中发生大量筛选步骤的查询。**'
- en: '**I do think we can make a lot of progress on all of these areas in 2024 and
    continue to add features directly to PostgreSQL that make it easier to build applications,
    even as we see a boon of functionality in extensions around PostgreSQL.**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**我确实认为我们可以在2024年在所有这些领域取得很大进展，并继续直接向PostgreSQL添加功能，使其更容易构建应用程序，即使我们在PostgreSQL周围看到扩展方面的功能激增。**'
- en: '**But what about security?**'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**但安全性呢？**'
- en: '**I do want to quickly disucss security features. PostgreSQL does have a strong
    reputation for enabling workloads in security-focused environments, but there
    is always more to do. The past several years, adding native support for [transparent
    data encryption](https://wiki.postgresql.org/wiki/Transparent_Data_Encryption)
    (TDE) in PostgreSQL has received a lot of attention, but there are other areas
    we can continue to innovate. This includes adding support for additional authentication
    methods or mechanisms (OIDC is amongst the biggest asks) and exploring the possibility
    of a federation authorization model to allow PostgreSQL to inherit permissions
    from other systems. And while this is challenging today, I’d suggest we look at
    how we can support TDE on a per-database level. I’m keeping this discussion short
    as there are ways to satisfy the requirements that these features would add to
    PostgreSQL today, but we can certainly continue to build towards full native support.**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**我确实想快速讨论一下安全功能。 PostgreSQL确实以在注重安全的环境中支持工作负载而享有良好的声誉，但总还有更多工作要做。 在过去的几年中，PostgreSQL添加了对[透明数据加密](https://wiki.postgresql.org/wiki/Transparent_Data_Encryption)（TDE）的本机支持引起了很多关注，但我们还可以在其他领域继续创新。
    这包括添加对其他认证方法或机制的支持（OIDC是最大的要求之一），并探索联邦授权模型的可能性，以允许PostgreSQL继承来自其他系统的权限。 尽管这在今天是具有挑战性的，但我建议我们看看如何支持数据库级别的TDE。
    我会把这个讨论简短，因为今天有满足这些功能的要求的方法，但我们当然可以继续努力支持完全本地的支持。**'
- en: '**And with that, let’s look at other areas where PostgreSQL can make progress
    in 2024.**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**现在让我们看看2024年PostgreSQL可以取得进展的其他领域。**'
- en: '**Extensions**'
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**扩展**'
- en: '**PostgreSQL was designed to be extensible: you can add functionality to PostgreSQL
    without having to fork it. This includes new data types, indexing methods, ways
    to work with other database systems, utilities that make it easier to manage PostgreSQL
    features, [additional programming languages](https://wiki.postgresql.org/wiki/PL_Matrix),
    and even [extensions that let you write your own extensions](https://github.com/aws/pg_tle).
    People have built open source communities and companies around specific PostgreSQL
    extensions (e.g. [PostGIS](https://postgis.net/)), and PostgreSQL extensions have
    made it possible to support all kinds of workloads (geospatial, timeseries, analytical,
    AI) from a single database. With [thousands of available PostgreSQL extensions](https://gist.github.com/joelonsql/e5aa27f8cc9bd22b8999b7de8aee9d47),
    they truly are a “force multiplier” for PostgreSQL and help drive significant
    adoption while letting users quickly build functionality for their databases!**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**PostgreSQL被设计为可扩展的：您可以在不分叉的情况下向PostgreSQL添加功能。 这包括新的数据类型、索引方法、与其他数据库系统配合工作的方法、使其更容易管理PostgreSQL功能的实用程序、[附加编程语言](https://wiki.postgresql.org/wiki/PL_Matrix)，甚至[让你编写自己的扩展的扩展](https://github.com/aws/pg_tle)。
    人们已经围绕特定的PostgreSQL扩展（例如[PostGIS](https://postgis.net/)）建立了开源社区和公司，PostgreSQL扩展使得支持各种工作负载（地理空间、时间序列、分析、人工智能）从一个数据库中成为可能。
    有[成千上万可用的PostgreSQL扩展](https://gist.github.com/joelonsql/e5aa27f8cc9bd22b8999b7de8aee9d47)，它们确实是PostgreSQL的“力量倍增器”，可以在让用户快速为他们的数据库构建功能的同时推动显著的采用！**'
- en: '**The side-effect of all this is we’re now seeing “extension [sprawl](https://en.wikipedia.org/wiki/Urban_sprawl).”
    How do I know which extension to use? What is the level of support of an extension?
    How do I know an extension will continue to be actively maintained? How can I
    help contribute a feature to an extension? Even “where can I download an extension”
    has become a big question: while postgresql.org has an [incomplete list of extensions](https://www.postgresql.org/download/products/6-postgresql-extensions/)
    and the [community packages](https://www.postgresql.org/download/) maintain a
    set of extensions, there are now multiple PostgreSQL extension repositories available
    ([PGXN](https://pgxn.org/), [dbdev](https://database.dev/), [Trunk](https://pgt.dev/)),
    and [pgxman](https://pgxman.com/).**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**所有这一切的副作用是我们现在看到了“扩展[过度](https://en.wikipedia.org/wiki/Urban_sprawl)”。 我怎么知道要使用哪个扩展？扩展的支持水平是多少？我怎么知道扩展将继续得到积极维护？我如何帮助对扩展做出贡献？甚至“我从哪里下载扩展”已经成为一个大问题：虽然postgresql.org有一个[不完整的扩展列表](https://www.postgresql.org/download/products/6-postgresql-extensions/)，并且[社区包](https://www.postgresql.org/download/)维护了一组扩展，但现在有多个可用的PostgreSQL扩展存储库（[PGXN](https://pgxn.org/)，[dbdev](https://database.dev/)，[Trunk](https://pgt.dev/)），以及[pgxman](https://pgxman.com/)。**'
- en: '**One of the strengths of the PostgreSQL community is that it is widely distributed,
    but we can make it easier to help guide users through the sprawl make informed
    choices about how they manage their data. I see 2024 as an opportunity to put
    more central resources into how we represent PostgreSQL extensions, and help users
    understand when to use certain extensions and their development maturity level,
    and likewise help extension builders with both governance and maintenance resources.**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**PostgreSQL 社区的一大优势是其分布广泛，但我们可以更方便地帮助用户在这一范围内做出明智的选择来管理他们的数据。我认为2024年是一个将更多核心资源投入到如何表示
    PostgreSQL 扩展的机会，并帮助用户了解何时使用某些扩展及其开发成熟度水平，并帮助扩展构建者获得治理和维护资源。**'
- en: '**Community Building**'
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**社区建设**'
- en: '**I wanted to round out thoughts for 2024 around community building. The PostgreSQL
    contributor community has significantly grown since I first started, and the community
    has done a better job of [recognizing contributors](https://www.postgresql.org/community/contributors/)
    to all parts of the project, not just the code base (noting that there is still
    room for improvement here). But we can continue to do better, and there are three
    areas I’d like to specifically highlight: mentorship and [DEI](https://en.wikipedia.org/wiki/Diversity,_equity,_and_inclusion),
    and transparency, which will help in all areas of the project.**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**我希望在2024年的思考中围绕社区建设展开。自从我开始参与 PostgreSQL 贡献者社区以来，社区已经显著增长，并且社区在[认可贡献者](https://www.postgresql.org/community/contributors/)方面做得更好，不仅仅是在代码库上（需要指出这里仍有改进空间）。但我们可以做得更好，我想特别强调三个方面：指导和[DEI](https://en.wikipedia.org/wiki/Diversity,_equity,_and_inclusion)（多元化、公平和包容性），以及透明度，这将有助于项目的各个方面。**'
- en: '**During the [developer meeting @ PGCon 2023](https://wiki.postgresql.org/wiki/PgCon_2023_Developer_Meeting#What_are_the_big_challenges_for_our_users.3F_What_are_the_big_challenges_for_us_to_solve.3F),
    [Melanie Plageman](https://mastodon.social/@melanieplageman/) gave a very detailed
    analysis of the experience of being a newer contributor to PostgreSQL and the
    challenges it takes to ramp up. Melanie identified many problems: ramp up time
    on learning basic of how to contribute to PostgreSQL (getting started on the codebase,
    communicating on the mailing list), the effort to get a patch to a committable
    state and having a committer interested in it, guidance that may be given with
    the best of intentions (get started by reviewing patches!) which actually may
    be more challenging than writing code, and how feedback, when delivered, is delivered.**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**在[2023年 PGCon 开发者会议](https://wiki.postgresql.org/wiki/PgCon_2023_Developer_Meeting#What_are_the_big_challenges_for_our_users.3F_What_are_the_big_challenges_for_us_to_solve.3F)期间，[Melanie
    Plageman](https://mastodon.social/@melanieplageman/) 对成为 PostgreSQL 的新贡献者的经历以及加速过程中的挑战进行了非常详细的分析。Melanie
    指出了许多问题：学习如何贡献到 PostgreSQL（开始接触代码库、在邮件列表上沟通）的启动时间，将补丁提交到可提交状态并且有提交者对其感兴趣所需的努力，以及可能出于善意给出的指导（通过审查补丁开始！）实际上可能比编写代码更具挑战性，以及反馈的传递方式。**'
- en: '**On the last point, how to give feedback, I want to call out an [excellent
    blog post by Robert Haas](https://rhaas.blogspot.com/2023/12/praise-criticism-and-dialogue.html)
    that specifically addresses the power of giving [praise while delivering feedback](https://rhaas.blogspot.com/2023/12/praise-criticism-and-dialogue.html)
    – these things do make a difference and it’s a good reminder in general that we
    should be supportive even while we’re being critical.**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于最后一点，如何提供反馈，我想提一下 Robert Haas 的一篇[卓越博客文章](https://rhaas.blogspot.com/2023/12/praise-criticism-and-dialogue.html)，该文章专门探讨了在[提供反馈时表达赞美的力量](https://rhaas.blogspot.com/2023/12/praise-criticism-and-dialogue.html)
    - 这些事情确实会产生影响，这是一个良好的提醒，即使在我们进行批评时，我们也应该给予支持。**'
- en: '**Back to Melanie’s points, mentorship is something we can do better across
    the community. Personally, I admit I have been bad at this in areas around project
    advocacy, including helping to get more people to contribute to the [web infrastructure](https://www.postgresql.org/developer/related-projects/)
    and the [release process](https://www.postgresql.org/about/press/presskit16/).
    This doesn’t mean PostgreSQL lacks mentorship – I can count numerous folks in
    the community as mentors – but we can be better in terms of how we can help people
    get started with contributing and finding mentors who can guide them on their
    journey.**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**回到 Melanie 的论点，导师制是整个社区可以做得更好的事情。就我个人而言，我承认我在项目倡导领域的导师制，包括帮助更多的人为[网络基础设施](https://www.postgresql.org/developer/related-projects/)和[发布流程](https://www.postgresql.org/about/press/presskit16/)做出贡献方面做得不够好。这并不意味着
    PostgreSQL 缺乏导师制 - 我可以数出社区中众多的导师 - 但在如何帮助人们开始贡献并找到能够指导他们前进的导师方面，我们可以做得更好。**'
- en: '**2024 serves as a gateway to building better mentorship processes, and we’re
    looking to test some of these ideas at [PGConf.dev 2024](https://2024.pgconf.dev/)
    in May 2024 in Vancouver.**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**2024年将成为建立更好导师制流程的一个契机，我们计划在2024年5月在温哥华举办[PGConf.dev 2024](https://2024.pgconf.dev/)，届时将测试一些这些想法。**'
- en: '**(Some history: Before [PGConf.dev](https://www.pgconf.dev/), [PGCon](https://www.pgcon.org/)
    was the event where PostgreSQL contributors gathered to discuss strategic projects
    for the upcoming development cycle. PGCon was organized by Dan Langille from 2007
    to 2023, and after umpteen years of organizing, he was ready to extend the efforts
    to a group of folks and helped to establish [PGConf.dev](https://www.pgconf.dev/)).**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**（一些历史：在[PGConf.dev](https://www.pgconf.dev/)之前，[PGCon](https://www.pgcon.org/)
    是 PostgreSQL 贡献者聚集讨论未来发展周期战略项目的活动。PGCon 由 Dan Langille 于2007年至2023年组织，并在经过多年的组织后，他已经准备好将努力扩展给一群人，并帮助建立了[PGConf.dev](https://www.pgconf.dev/)）。**'
- en: '**[PGConf.dev](https://www.pgconf.dev/) is a conference for folks who want
    to contribute to PostgreSQL, and covers topics around PostgreSQL development (both
    core server and all open source projects around PostgreSQL such as extensions
    and drivers), community building, and open source thought leadership. A big portion
    of PGConf.dev is dedicated to mentorship, and is planning to include workshops
    around how to contribute to PostgreSQL. If you’re looking for ways to help contribute
    to PostgreSQL, I strongly suggest attending or [submitting a talk](https://2024.pgconf.dev/cfp/)!**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**[PGConf.dev](https://www.pgconf.dev/) 是一个为想要为 PostgreSQL 做出贡献的人举办的会议，涵盖了围绕
    PostgreSQL 开发的主题（包括核心服务器和所有围绕 PostgreSQL 的开源项目，例如扩展和驱动程序）、社区建设和开源思想领导力。PGConf.dev
    的一个重要部分致力于导师制，并计划包括围绕如何为 PostgreSQL 做出贡献的研讨会。如果你正在寻找为 PostgreSQL 做贡献的方式，我强烈建议参加或者[提交演讲](https://2024.pgconf.dev/cfp/)！**'
- en: '**This leads into how the PostgreSQL community can improve in [DEI](https://en.wikipedia.org/wiki/Diversity,_equity,_and_inclusion).
    I strongly suggest reading the slides and watching the video (when it’s available)
    of [Karen Jex](https://karenjex.blogspot.com/) and [Lætitia AVROT](https://mydbanotebook.org/)’s
    PGConf.eu 2023 talk [Trying to be Barbie in Ken’s Mojo Dojo Casa House](https://www.postgresql.eu/events/pgconfeu2023/schedule/session/4913-trying-to-be-barbie-in-kens-mojo-dojo-casa-house/),
    as it’s an insightful presentation on how we can continue to make the PostgreSQL
    community more inclusive. The community has made progress in this area (and Karen
    and Lætitia point to initiatives that have helped with this), but we can still
    be better, and we should actively and proactively work to address feedback to
    help ensure contributing to PostgreSQL is a welcoming experience. There are actions
    we can all take, for example, calling out an inappropriate (e.g. sexist) behavior
    as it happens and providing guidance on why it’s not appropriate.**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**这引出了 PostgreSQL 社区在[DEI（多元化、公平、包容）](https://en.wikipedia.org/wiki/Diversity,_equity,_and_inclusion)方面可以改进的问题。我强烈建议阅读[卡伦·杰克斯](https://karenjex.blogspot.com/)和[拉提蒂娅·阿夫罗特](https://mydbanotebook.org/)的
    PGConf.eu 2023 演讲[试图在肯的Mojo Dojo Casa House里做芭比](https://www.postgresql.eu/events/pgconfeu2023/schedule/session/4913-trying-to-be-barbie-in-kens-mojo-dojo-casa-house/)幻灯片和观看视频（一旦可用），因为这是一个关于我们如何继续使
    PostgreSQL 社区更具包容性的深入演示。社区在这方面已经取得了进展（卡伦和拉提蒂娅指出了帮助此事的举措），但我们仍有待改进，我们应积极主动地努力解决反馈问题，以确保为
    PostgreSQL 做贡献是一种受欢迎的体验。我们都可以采取一些行动，例如在不当行为（例如性别歧视）发生时立即予以指出，并提供为何不恰当的指导。**'
- en: '**Finally, there’s transparency. This might seem odd in open source, given,
    well, it’s open. But there are quite a few governance issues that are discussed
    not in the open, and it helps to understand how decisions are made. The [PostgreSQL
    Code of Conduct Committee](https://www.postgresql.org/about/policies/coc_committee/)
    provides an excellent example of how the community can be transparent about issues
    that require sensitivity. Each year, the Code of Conduct committee publishes a
    report ([here is the one from 2022](https://www.postgresql.org/about/policies/coc/reports/2022/))
    of its work, including high level descriptions of cases and overall statistics.
    This is a practice we can reproduce across many of the PostgreSQL teams that are
    involved in tasks that may require privacy due to their sensitivity.**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，透明度也很重要。这在开源项目中可能看起来有点奇怪，因为，嗯，它是开放的。但是有一些治理问题并不是公开讨论的，了解决策是如何形成的很有帮助。[PostgreSQL行为准则委员会](https://www.postgresql.org/about/policies/coc_committee/)提供了一个很好的例子，展示了社区如何公开讨论需要敏感性的问题。每年，行为准则委员会都会发布一份工作报告（[这是2022年的报告](https://www.postgresql.org/about/policies/coc/reports/2022/)），包括案例的高层描述和整体统计数据。这是一个我们可以在许多参与可能因敏感性而需要保密的任务的PostgreSQL团队中复制的做法。
- en: '**Conclusion: This was originally supposed to be a shorter post**'
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论：这原本应该是一篇较短的帖子。
- en: '**When I originally started writing this, I thought it’d be a pithy post that
    I’d finish in a few hours. A few days later&mldr;**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当我最初开始写这篇文章时，我以为它会是一篇简洁的帖子，我会在几个小时内完成它。几天后&mldr;
- en: '**In all seriousness, PostgreSQL is in a good place. It remains popular, and
    its reputation for reliability, robustness, and performance remain sound. But
    we can still do better, and the good news is that the community is actively working
    towards improving in every which way**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 严肃地说，PostgreSQL处于一个良好的状态。它仍然很受欢迎，其可靠性、健壮性和性能的声誉仍然良好。但我们仍然可以做得更好，而好消息是社区正在积极努力在各个方面改进。
- en: '**While these are thoughts for what PostgreSQL can do in 2024 and beyond, there’s
    so much PostgreSQL already does today. In fact, asking questions like “where is
    PostgreSQL going” does give us an opportunity to step back and reflect on all
    the progress PostgreSQL has made over the past several years while looking ahead
    on what is to come!**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些是关于PostgreSQL在2024年及以后可能做的事情的思考，但PostgreSQL今天已经做了很多事情。事实上，像“PostgreSQL将何去何从”这样的问题确实给了我们一个机会，让我们回顾一下PostgreSQL在过去几年取得的所有进展，同时展望未来！
