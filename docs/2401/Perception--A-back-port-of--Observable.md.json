["```\n+import Perception\n\n-@Observable\n+@Perceptible\n class FeatureModel {\n   var count = 0\n } \n```", "```\n struct FeatureView: View {\n   let model: FeatureModel \n\n   var body: some View {\n+    WithPerceptionTracking {\n       Form {\n         Text(model.count.description)\n         Button(\"Increment\") {\n           model.count += 1\n         }\n       } \n     }\n+  }\n } \n```", "```\npublic struct PerceptionRegistrar: Sendable {\n  private let _rawValue: AnySendable\n  public init() {\n    if #available(iOS 17, macOS 14, tvOS 17, watchOS 10, *) {\n      #if canImport(Observation)\n        self._rawValue = AnySendable(ObservationRegistrar())\n      #else\n        self._rawValue = AnySendable(_PerceptionRegistrar())\n      #endif\n    } else {\n      self._rawValue = AnySendable(_PerceptionRegistrar())\n    }\n  }\n} \n```", "```\nextension PerceptionRegistrar {\n  #if canImport(Observation)\n    @available(iOS 17, macOS 14, tvOS 17, watchOS 10, *)\n    private var registrar: ObservationRegistrar {\n      self._rawValue.base as! ObservationRegistrar\n    }\n  #endif\n\n  private var perceptionRegistrar: _PerceptionRegistrar {\n    self._rawValue.base as! _PerceptionRegistrar\n  }\n} \n```", "```\nextension PerceptionRegistrar {\n  public func access<Subject: Perceptible, Member>(\n    _ subject: Subject,\n    keyPath: KeyPath<Subject, Member>\n  ) {\n    â€¦\n  }\n} \n```", "```\nextension PerceptionRegistrar {\n  @_disfavoredOverload\n  public func access<Subject: Perceptible, Member>(\n    _ subject: Subject,\n    keyPath: KeyPath<Subject, Member>\n  ) {\n    #if canImport(Observation)\n      if #available(iOS 17, macOS 14, tvOS 17, watchOS 10, *) {\n        func `open`<T: Observable>(_ subject: T) {\n          self.registrar.access(\n            subject,\n            keyPath: unsafeDowncast(keyPath, to: KeyPath<T, Member>.self)\n          )\n        }\n        if let subject = subject as? any Observable {\n          open(subject)\n        }\n      } else {\n        perceptionCheck()\n        self.perceptionRegistrar.access(subject, keyPath: keyPath)\n      }\n    #endif\n  }\n} \n```"]