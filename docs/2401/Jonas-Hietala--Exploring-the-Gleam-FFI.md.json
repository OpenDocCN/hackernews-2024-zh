["```\nimport gleam/io\n\n@external(erlang, \"rand\", \"uniform\")\npub fn random_float() -> Float\n\npub fn main() {\n  io.debug(random_float())\n} \n```", "```\n$ gleam run\n0.43487935467166317 \n```", "```\n[dependencies]\nbase32 = \"~> 0.1.0\" \n```", "```\n@external(erlang, \"base32\", \"encode\")\npub fn encode_base32(x: String) -> String\n\npub fn main() {\n  io.debug(encode_base32(\"superhidden\"))\n} \n```", "```\n$ gleam run\n  Compiling base32\n===> Fetching rebar3_hex v7.0.7\n===> Fetching hex_core v0.8.4\n===> Fetching verl v1.1.1\n===> Analyzing applications...\n===> Compiling hex_core\n===> Compiling verl\n===> Compiling rebar3_hex\n===> Analyzing applications...\n===> Compiling base32\n\"ON2XAZLSNBUWIZDFNY======\" \n```", "```\n-module(erlib).\n-export([ping/0]).\n\nping() ->\n    io:fwrite(\"ping~n\", []). \n```", "```\n@external(erlang, \"erlib\", \"ping\")\npub fn ping() -> a\n\npub fn main() {\n  ping()\n} \n```", "```\nimport gleam/io\n\npub fn pong() {\n  io.println(\"pong\")\n} \n```", "```\nping() ->\n    io:fwrite(\"ping from Erlang~n\", []),\n    mypong:pong(). \n```", "```\n$ gleam run\nping from Erlang\npong \n```", "```\nimport gleam/io\n\n@external(erlang, \"Elixir.RandomColor\", \"hex\")\npub fn random_color() -> String\n\npub fn main() {\n  io.println(random_color())\n} \n```", "```\n$ gleam add random_color\n$ gleam run\n#3724C9 \n```", "```\ndefmodule Exlib do\n def ping() do\n    IO.puts(\"ping from Elixir\")\n    :mypong.pong()\n  end\nend \n```", "```\n@external(erlang, \"Elixir.Exlib\", \"ping\")\npub fn ping() -> a\n\npub fn main() {\n  ping()\n} \n```", "```\n$ gleam run\nping from Elixir\npong \n```", "```\n$ cd rslib/\n$ cargo add rustler \n```", "```\n#[rustler::nif]\npub fn truly_random() -> i64 {\n    4 }\n\nrustler::init!(\"librs\", [truly_random]); \n```", "```\n[lib]\ncrate-type = [\"dylib\"] \n```", "```\n$ cargo build --release\n  ... \n```", "```\n$ mkdir ../priv\n$ cp target/release/librslib.so ../priv/ \n```", "```\n├── README.md\n├── build\n├── gleam.toml\n├── manifest.toml\n├── priv\n│   └── librslib.so     # The important part\n├── rslib\n│   ├── Cargo.lock\n│   ├── Cargo.toml\n│   ├── src\n│   │   └── lib.rs\n│   └── target\n└── src\n    └── myapp.gleam \n```", "```\n-module(librs).\n-export([truly_random/0]).\n-nifs([truly_random/0]).\n-on_load(init/0).\n\ninit() ->\n    ok = erlang:load_nif(\"priv/librslib\", 0).\n\ntruly_random() ->\n    exit(nif_library_not_loaded). \n```", "```\nimport gleam/io\n\n@external(erlang, \"librs\", \"truly_random\")\npub fn truly_random() -> String\n\npub fn main() {\n  io.debug(truly_random())\n} \n```", "```\n$ gleam run --target javascript \n```", "```\nimport * as gleam from \"./mypong.mjs\";\n\nexport function ping() {\n  console.log(\"ping from JavaScript\");\n  gleam.pong();\n} \n```", "```\n@external(javascript, \"./jslib.mjs\", \"ping\")\npub fn ping() -> a\n\npub fn main() {\n  ping()\n} \n```", "```\n$ gleam run --target javascript\nping from JavaScript\npong \n```"]