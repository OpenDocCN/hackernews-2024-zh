- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:44:53'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: ngn-k-tutorial/12-thinking-in-k.md at main · razetime/ngn-k-tutorial · GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://github.com/razetime/ngn-k-tutorial/blob/main/12-thinking-in-k.md](https://github.com/razetime/ngn-k-tutorial/blob/main/12-thinking-in-k.md)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thinking in an array language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[](#thinking-in-an-array-language)'
  prefs: []
  type: TYPE_NORMAL
- en: '*You can view the full source code for this chapter at [GitHub](/razetime/ngn-k-tutorial/blob/main/code/matmul.k).*'
  prefs: []
  type: TYPE_NORMAL
- en: Since you are now properly acquainted with K, let's do some programming. Most
    K programming happens through the REPL, because it is very useful to iterate upon
    previous code. ngn/k with rlwrap has history with the up/down arrow keys, and
    that should be more than enough to begin developing bigger programs in K. Functions
    are tested in the REPL, and then moved to actual code. Note that ngn/k's prettyprinting
    always returns valid k data, and you can precompute some things beforehand to
    speed up your program.
  prefs: []
  type: TYPE_NORMAL
- en: 'A K script is always executed like it was typed in the repl, that is: Each
    line is executed, and its return value is printed *unless* it ends with a semicolon.
    A script also allows multiline definitions, which are convenient for readability.
    Oftentimes, you may save your work in a script, and want to use it in a repl.
    In order to use your stored data and functions, just do `\l file.k` in the repl,
    and your file will be executed, and its data will be loaded. You can load a file
    into the REPL more than once, overwriting older data. The repl help accessed with
    `\` lists more useful commands as well.'
  prefs: []
  type: TYPE_NORMAL
- en: 'K programming (and array programming in general), is a continuous process of
    simplifying your patterns. A big, unwieldy pattern has one or more ways to condense
    to a smaller, more declarative, easy to read pattern. This is discussed in a lot
    of detail in [Patterns and Anti-patterns in APL: Escaping the Beginner''s Plateau
    - Aaron Hsu - Dyalog ''17](https://www.youtube.com/watch?v=9xCJ3BCIudI), if you''d
    like to understand it better.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A common problem most people have in K is the need to translate a common, well
    known algorithm to K, usually taken from a programming website like geeksforgeeks,
    or a Wikipedia article. Let us take an example: Matrix Multiplication.'
  prefs: []
  type: TYPE_NORMAL
- en: 'From [this wikipedia article](https://en.wikipedia.org/wiki/Matrix_multiplication_algorithm),
    the iterative algorithm for matrix multiplication is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want, you can try translating this to K. A direct translation would
    be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the worst K code I''ve ever written, because we are trying to write
    K like an imperative language, and K doesn''t work well with that design. The
    main problems are:'
  prefs: []
  type: TYPE_NORMAL
- en: Many, many globals are assigned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: multiple nested loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lots of modification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Luckily, there are a lot of things we can simplify here, and we can address
    these problems one by one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us begin at the innermost loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The first and simplest fix we can make is summing using a fold (`/`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: One global down, 9 more to go.
  prefs: []
  type: TYPE_NORMAL
- en: The next global we can remove is `C`. Since `'` (each) returns an array, C doesn't
    need to be modified. We can simply return the value of the nested loop.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have three loops with no modification, which makes our job much easier.
    The main variables to look at now are `i`, `j`, and `k`.
  prefs: []
  type: TYPE_NORMAL
- en: '`i` indexes each row of A.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`j` indexes each column of B.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`k` indexes each column of A and row of B.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basically, `k` is responsible for pairing each row of A with each column of
    B, which are then multiplied. Hence, we can eliminate the middle man here, and
    directly match them without `k`. This also eliminates one loop, and removes the
    need for `m`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Next, to remove `j`, we need to take each column of `B` and pair it with `A[i]`.
    To do this, we transpose `B` and pair each element with eachright (`/:`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to remove `i`, we do a similar thing: Use eachleft to pair each row
    of `A` with each column of `B`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We need no more globals!
  prefs: []
  type: TYPE_NORMAL
- en: Now *that* is matrix multiplication in K. This is the most direct algorithmic
    conversion of matrix multiplication. Now we will look at ways to shorten it, and
    remove more loops.
  prefs: []
  type: TYPE_NORMAL
- en: '`+` (transpose) is costly, and we can remove it. What we are currently doing
    is naive. Instead of multiplying each row of `x` with each column of `y`, we can
    conform each row of B to the whole of A, doing the same thing implicitly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have a function which can be easily made tacit. With the rules from
    [Chapter 3](#trains), we get our final result:'
  prefs: []
  type: TYPE_NORMAL
- en: A matrix multiplication function you can be proud of. This process may seem
    like it has a lot of steps, but condensing code will become much easier and intuitive
    as you practice your skill in K.
  prefs: []
  type: TYPE_NORMAL
- en: Matrix multiplication is a simple procedure which works well with K's array
    support. We will be seeing more algorithms that don't play well with K, and how
    to handle them in future chapters.
  prefs: []
  type: TYPE_NORMAL
