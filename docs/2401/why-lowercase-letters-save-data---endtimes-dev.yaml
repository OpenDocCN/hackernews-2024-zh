- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:58:13'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: why lowercase letters save data | endtimes.dev
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://endtimes.dev/why-lowercase-letters-save-data/](https://endtimes.dev/why-lowercase-letters-save-data/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <main class="text-content post-main">
  prefs: []
  type: TYPE_NORMAL
- en: Lowercase letters and uppercase letters use the same amout of data — `1 byte`
    each.
  prefs: []
  type: TYPE_NORMAL
- en: So, it's surprising to learn that swapping uppercase letters for lowercase letters
    saves data.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example: I took the front page of [Hacker News](https://news.ycombinator.com/)
    and rewrote the title of each article in `sentence case` instead of `title case` — reducing
    the size by `31 bytes`.'
  prefs: []
  type: TYPE_NORMAL
- en: How can it be true that changing a few uppercase letters to lowercase letters
    saves data? The answer is **compression**.
  prefs: []
  type: TYPE_NORMAL
- en: It isn't intuitive, but once you understand how text compression works, it will
    begin to make sense.
  prefs: []
  type: TYPE_NORMAL
- en: In this article I hope to…
  prefs: []
  type: TYPE_NORMAL
- en: Help you understand how text compression works, using **interactive examples**!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show you how I came to the conclusion that `title case` on hacker news emits
    the **equivalent yearly carbon as a car driving the width of Sri Lanka.**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show you some examples of where this knowledge can be used to **systematically
    save data.**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why do lowercase letters save data?[ #](#why-do-lowercase-letters-save-data)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Text compression is more effective when…
  prefs: []
  type: TYPE_NORMAL
- en: There's a smaller variety of characters in the text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The less common characters use used less frequently
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Characters or groups of characters are repeated more often.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replacing uppercase characters with their more common lowercase counterparts
    helps with all three of these.
  prefs: []
  type: TYPE_NORMAL
- en: To understand why this works you need to understand how compression works.
  prefs: []
  type: TYPE_NORMAL
- en: How does text compression work?[ #](#how-does-text-compression-work)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To explain how text compression works, we'll specifically look at the `deflate`
    algorithm commonly used in `zip` files. The principles are the same for other
    algorithms too.
  prefs: []
  type: TYPE_NORMAL
- en: Deflate uses two compression methods — `Huffman encoding` and `LZSS` — both
    of these compression methods are effected by replacing uppercase letters with
    lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: Huffman encoding[ #](#huffman-encoding)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The deflate algorithm starts with `Huffman encoding`.
  prefs: []
  type: TYPE_NORMAL
- en: Each character in an uncompressed text file uses up the same amount of data.
    (This isn't exactly true, but is true enough for this explanation.)
  prefs: []
  type: TYPE_NORMAL
- en: In `utf-8` this is `8 bits`. (a bit is a binary `1` or `0`)
  prefs: []
  type: TYPE_NORMAL
- en: 'A text file using `utf-8` encodes the letters like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`B` is `01000010`'
  prefs: []
  type: TYPE_NORMAL
- en: '`b` is `01100010`'
  prefs: []
  type: TYPE_NORMAL
- en: '`a` is `01100001`'
  prefs: []
  type: TYPE_NORMAL
- en: '`o` is `01101111`'
  prefs: []
  type: TYPE_NORMAL
- en: Now, take a word that only uses those four characters, say `Baobab`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `utf-8` the text `Baobab` is encoded like this: `010000100110000101101111011000100110000101100010`.'
  prefs: []
  type: TYPE_NORMAL
- en: If we know we don't need any other letters, we can save a lot of data by changing
    the encoding to use fewer bits.
  prefs: []
  type: TYPE_NORMAL
- en: We could change `B` to `10`, `b` to `11`, `a` to `00`, and `o` to `01`.
  prefs: []
  type: TYPE_NORMAL
- en: The text `Baobab` would compress to `100001110011`.
  prefs: []
  type: TYPE_NORMAL
- en: The word `Baobab` contains four distinct characters, the best we can do is give
    them each a `2-bit` sequence.
  prefs: []
  type: TYPE_NORMAL
- en: But if we lowercased the `B`, we'd only have three distinct characters, and
    we could take things a step further.
  prefs: []
  type: TYPE_NORMAL
- en: We could change the encoding so that the most frequently used character, `b`,
    is represented by only `1-bit`. Reducing the compressed version of `baobab` to
    `101001011`
  prefs: []
  type: TYPE_NORMAL
- en: We do this using `Huffman encoding`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Using `Huffman encoding` we can represent more frequently used characters
    with fewer bits.**'
  prefs: []
  type: TYPE_NORMAL
- en: Here's an interactive explanation for how it works. Enter text below to see
    its uncompressed and compressed binary forms.
  prefs: []
  type: TYPE_NORMAL
- en: To compress our text using huffman encoding we first need to build a frequency
    table of all the characters in our text. To do this we…
  prefs: []
  type: TYPE_NORMAL
- en: '**count the number of each character**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**order them by frequency**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then we build a **Huffman tree** following these rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Make each character a `leaf` in our tree.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take the two characters with the lowest frequency and connect them with a node —
    give that node the combined frequency of both our leaves.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove those two leaves from the list — and add their connecting node to the
    list instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the above steps until there are no more leaves or nodes left in the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It''s a little complicated but once you''re done you can make a pretty diagram
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: We can use the above tree to work out the new encoding for each of our characters.
  prefs: []
  type: TYPE_NORMAL
- en: To determine each character's encoding, we begin at the top of the tree and
    climb down towards the character to find its encoding. Each time we climb dow
    to the left we add a `0`, when we go down to the right we add a `1`.
  prefs: []
  type: TYPE_NORMAL
- en: The characters that appear more frequently in our text require a shorter climb
    down the tree — and so can be encoded with fewer `1s` and `0s`.
  prefs: []
  type: TYPE_NORMAL
- en: More savings with smaller trees[ #](#more-savings-with-smaller-trees)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can't decode `Huffman encoding` without the tree. So when we send text compressed
    with `Huffman encoding` we send the tree along too.
  prefs: []
  type: TYPE_NORMAL
- en: '**By using fewer uppercase letters in our text, we increase the chance of their
    being no instance of any given uppercase letter. Meaning the tree we send is smaller
    too.**'
  prefs: []
  type: TYPE_NORMAL
- en: For instance if we change the text "Decompression is the Mission of the Compression
    Commission" from `title case` to `sentence case` we don't need a leaf in our tree
    for uppercase `M` and `C`. This makes our compression more efficient — but also
    makes the `Huffman tree` smaller.
  prefs: []
  type: TYPE_NORMAL
- en: LZSS[ #](#lzss)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Deflate` also uses another compression method. It compresses data with `Huffman
    encoding` and then again using the `Lempel-Ziv-Storer-Szymanski (LZSS)` algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: '`LZSS` works by finding repeated chunks of data and replacing them with a shorter
    reference to the first time they appeared.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The referencing is done by replacing the repeated sequence with a `pointer`.
    This pointer consists of two numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: the first number tells us how far back to go to find the original sequence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the second number tells us how long the original sequence is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here's a simplified example of how the LZSS algorithm works, the pointers are
    displayed like this `<1,2>`.
  prefs: []
  type: TYPE_NORMAL
- en: Play around with the input below. See how removing capital letters can result
    in more repeated sequences — and fewer bytes.
  prefs: []
  type: TYPE_NORMAL
- en: How much data can lowercase save?[ #](#how-much-data-can-lowercase-save)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start lowercasing everything, remember that there are much worse
    offenders when it comes to online waste. *e.g. unoptimized images, auto-playing
    videos, unused JavaScript.* Do those first!
  prefs: []
  type: TYPE_NORMAL
- en: 'But that being said, lowercasing is surprisingly effective. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: Replacing title case with sentence case on Hacker News[ #](#replacing-title-case-with-sentence-case-on-hacker-news)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned in the intro — I took the front page of Hacker News and rewrote
    the title of each article in `sentence case` instead of `title case`.
  prefs: []
  type: TYPE_NORMAL
- en: Each `html` file had the exact same number of characters — but when compressed
    into zip files the `title case` file was `5,992 bytes` and the `sentence case`
    file was `5,961 bytes`. Saving `31 bytes`!
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps not a lot, but a nice side effect of making headings easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: Using the fomula provided by [sustainablewebdesign.org](https://sustainablewebdesign.org/calculating-digital-emissions/)
    tells us that for each visit to Hacker News would save `0.00001059642g` of carbon
    if written in `sentence case`.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that Hacker News gets about `10 million` visits a day changing to sentence
    case would result in the prevention of `105g` of carbon daily. that's the equivalent
    of burning `4.3` gallons of gasoline a year. Enough fuel to drive a Mini Cooper
    `137.6 miles` — roughly the width of Sri Lanka.
  prefs: []
  type: TYPE_NORMAL
- en: Systematically lowercasing case‑insensitive code.[ #](#systematically-lowercasing-case%E2%80%91insensitive-code)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some minifiers automatically lowercase some code to save a few bytes after compressing
    — but this is not common or applied consistently.
  prefs: []
  type: TYPE_NORMAL
- en: Any given optimisation from a `minifier` probably falls into the category of
    *too small to care about* — but collectively they save lots of data, which makes
    websites faster and less energy intensive.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, many `html` files start with am uppercase doctype declaration
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'but the [`HTML5` specification states that this is case insensitive](https://html.spec.whatwg.org/multipage/syntax.html#the-doctype),
    so an `html minifier` could save some data by changing this to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This optimizations has been implemented by [`html-minifier`](https://github.com/kangax/html-minifier/issues/822)
    but not by others.
  prefs: []
  type: TYPE_NORMAL
- en: Some examples of lowercase‑able code[ #](#some-examples-of-lowercase%E2%80%91able-code)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many examples of code that can be lowercased to save data. Here are
    some examples that are commonly uppercase when they needn't be.
  prefs: []
  type: TYPE_NORMAL
- en: I've hope you found this interesting. If you're similarly inclined to help optimize
    the web to save energy you can help me gather more of these examples in [this
    git repo](https://github.com/DitheringIdiot/lowercase-able-code).
  prefs: []
  type: TYPE_NORMAL
- en: published
  prefs: []
  type: TYPE_NORMAL
- en: 25 Nov 2023
  prefs: []
  type: TYPE_NORMAL
- en: modified
  prefs: []
  type: TYPE_NORMAL
- en: 25 Nov 2023
  prefs: []
  type: TYPE_NORMAL
- en: author
  prefs: []
  type: TYPE_NORMAL
- en: Nathaniel
  prefs: []
  type: TYPE_NORMAL
- en: tags
  prefs: []
  type: TYPE_NORMAL
- en: '`posts` `minutia` `web performance` `compression` `site speed`'
  prefs: []
  type: TYPE_NORMAL
- en: </main>
  prefs: []
  type: TYPE_NORMAL
