- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类。
- en: 'date: 2024-05-27 14:58:13'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:58:13。
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: why lowercase letters save data | endtimes.dev
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么小写字母能节省数据 | endtimes.dev
- en: 来源：[https://endtimes.dev/why-lowercase-letters-save-data/](https://endtimes.dev/why-lowercase-letters-save-data/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://endtimes.dev/why-lowercase-letters-save-data/](https://endtimes.dev/why-lowercase-letters-save-data/)
- en: <main class="text-content post-main">
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main class="text-content post-main">
- en: Lowercase letters and uppercase letters use the same amout of data — `1 byte`
    each.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大写字母和小写字母使用相同的数据量 — 每个都是 `1 字节`。
- en: So, it's surprising to learn that swapping uppercase letters for lowercase letters
    saves data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，了解将大写字母换成小写字母可以节省数据是令人惊讶的。
- en: 'For example: I took the front page of [Hacker News](https://news.ycombinator.com/)
    and rewrote the title of each article in `sentence case` instead of `title case` — reducing
    the size by `31 bytes`.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：我拿了 [Hacker News](https://news.ycombinator.com/) 的首页，并将每篇文章的标题从 `title case`
    改写为 `sentence case` — 减少了 `31 字节`。
- en: How can it be true that changing a few uppercase letters to lowercase letters
    saves data? The answer is **compression**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将几个大写字母改为小写字母能节省数据，这是真的吗？答案是**压缩**。
- en: It isn't intuitive, but once you understand how text compression works, it will
    begin to make sense.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是直观的，但一旦你了解了文本压缩的工作原理，它就会开始变得合乎逻辑。
- en: In this article I hope to…
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我希望…
- en: Help you understand how text compression works, using **interactive examples**!
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助你理解文本压缩的工作原理，使用**交互式示例**！
- en: Show you how I came to the conclusion that `title case` on hacker news emits
    the **equivalent yearly carbon as a car driving the width of Sri Lanka.**
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示我是如何得出结论的，即在 hacker news 上使用 `title case` 发布的新闻，其**相当于汽车在斯里兰卡宽度上行驶的年碳排放量**。
- en: Show you some examples of where this knowledge can be used to **systematically
    save data.**
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示一些例子，说明这种知识如何**系统地节省数据**。
- en: Why do lowercase letters save data?[ #](#why-do-lowercase-letters-save-data)
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么小写字母能节省数据？[ #](#why-do-lowercase-letters-save-data)
- en: Text compression is more effective when…
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 文本压缩在以下情况下更有效…
- en: There's a smaller variety of characters in the text
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本中字符的种类更少。
- en: The less common characters use used less frequently
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较不常见的字符使用频率较低。
- en: Characters or groups of characters are repeated more often.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符或字符组重复出现的频率更高。
- en: Replacing uppercase characters with their more common lowercase counterparts
    helps with all three of these.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 用更常见的小写字母替换大写字母有助于这三种情况。
- en: To understand why this works you need to understand how compression works.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解为什么这样做有效，您需要
- en: How does text compression work?[ #](#how-does-text-compression-work)
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本压缩如何工作？[ #](#how-does-text-compression-work)
- en: To explain how text compression works, we'll specifically look at the `deflate`
    algorithm commonly used in `zip` files. The principles are the same for other
    algorithms too.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要解释文本压缩的工作原理，我们将专门看一下通常用于 `zip` 文件的 `deflate` 算法。其他算法的原理也是相同的。
- en: Deflate uses two compression methods — `Huffman encoding` and `LZSS` — both
    of these compression methods are effected by replacing uppercase letters with
    lowercase.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Deflate 使用两种压缩方法 — `Huffman 编码` 和 `LZSS` — 这两种压缩方法都受到用小写字母替换大写字母的影响。
- en: Huffman encoding[ #](#huffman-encoding)
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Huffman 编码[ #](#huffman-encoding)
- en: The deflate algorithm starts with `Huffman encoding`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Deflate 算法以 `Huffman 编码` 开始。
- en: Each character in an uncompressed text file uses up the same amount of data.
    (This isn't exactly true, but is true enough for this explanation.)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 未压缩文本文件中的每个字符使用相同的数据量。（这并不完全正确，但对于这个解释来说是足够的。）
- en: In `utf-8` this is `8 bits`. (a bit is a binary `1` or `0`)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `utf-8` 中，这是 `8 位`。（位是二进制的 `1` 或 `0`）
- en: 'A text file using `utf-8` encodes the letters like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `utf-8` 对字母进行编码如下：
- en: '`B` is `01000010`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`B` 是 `01000010`。'
- en: '`b` is `01100010`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`b` 是 `01100010`。'
- en: '`a` is `01100001`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`a` 是 `01100001`。'
- en: '`o` is `01101111`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`o` 是 `01101111`。'
- en: Now, take a word that only uses those four characters, say `Baobab`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，拿一个只使用这四个字符的单词，比如 `Baobab`。
- en: 'Using `utf-8` the text `Baobab` is encoded like this: `010000100110000101101111011000100110000101100010`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `utf-8`，文本 `Baobab` 的编码如下：`010000100110000101101111011000100110000101100010`。
- en: If we know we don't need any other letters, we can save a lot of data by changing
    the encoding to use fewer bits.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们知道我们不需要其他任何字母，我们可以通过改变编码以使用更少的位来节省大量数据。
- en: We could change `B` to `10`, `b` to `11`, `a` to `00`, and `o` to `01`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将 `B` 改为 `10`，`b` 改为 `11`，`a` 改为 `00`，`o` 改为 `01`。
- en: The text `Baobab` would compress to `100001110011`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 文本 `Baobab` 将被压缩为 `100001110011`。
- en: The word `Baobab` contains four distinct characters, the best we can do is give
    them each a `2-bit` sequence.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 单词`Baobab`包含四个不同的字符，我们能做的最好的就是给它们每个一个`2位`的序列。
- en: But if we lowercased the `B`, we'd only have three distinct characters, and
    we could take things a step further.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果我们将`B`变成小写，我们只会有三个不同的字符，我们可以再进一步。
- en: We could change the encoding so that the most frequently used character, `b`,
    is represented by only `1-bit`. Reducing the compressed version of `baobab` to
    `101001011`
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以改变编码，使得最频繁使用的字符`b`只用`1位`表示。将`baobab`的压缩版本减少为`101001011`
- en: We do this using `Huffman encoding`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`哈夫曼编码`来做到这一点。
- en: '**Using `Huffman encoding` we can represent more frequently used characters
    with fewer bits.**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用`哈夫曼编码`我们可以用更少的位数表示更频繁使用的字符。**'
- en: Here's an interactive explanation for how it works. Enter text below to see
    its uncompressed and compressed binary forms.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个交互式解释它的工作原理。在下面输入文本，查看其未压缩和压缩的二进制形式。
- en: To compress our text using huffman encoding we first need to build a frequency
    table of all the characters in our text. To do this we…
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用哈夫曼编码压缩我们的文本，我们首先需要构建文本中所有字符的频率表。为此，我们需要…
- en: '**count the number of each character**'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**计算每个字符的数量**'
- en: '**order them by frequency**.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**按频率排序它们**。'
- en: 'Then we build a **Huffman tree** following these rules:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们按照这些规则构建一个**哈夫曼树**：
- en: Make each character a `leaf` in our tree.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个字符作为我们树中的`叶子`。
- en: Take the two characters with the lowest frequency and connect them with a node —
    give that node the combined frequency of both our leaves.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取两个频率最低的字符，并将它们连接到一个节点上 —— 给该节点分配两个叶子的组合频率。
- en: Remove those two leaves from the list — and add their connecting node to the
    list instead.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中移除这两个叶子 —— 并将它们的连接节点添加到列表中。
- en: Repeat the above steps until there are no more leaves or nodes left in the list.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复以上步骤，直到列表中不再有叶子或节点为止。
- en: 'It''s a little complicated but once you''re done you can make a pretty diagram
    like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点复杂，但是一旦完成，你就可以制作一个像这样的漂亮图表：
- en: We can use the above tree to work out the new encoding for each of our characters.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用上述树来计算每个字符的新编码。
- en: To determine each character's encoding, we begin at the top of the tree and
    climb down towards the character to find its encoding. Each time we climb dow
    to the left we add a `0`, when we go down to the right we add a `1`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定每个字符的编码，我们从树顶开始向下爬，找到字符的编码。每次向左爬时，我们加`0`，向右爬时加`1`。
- en: The characters that appear more frequently in our text require a shorter climb
    down the tree — and so can be encoded with fewer `1s` and `0s`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的文本中更频繁出现的字符需要在树上向下爬的距离更短 — 因此可以用更少的`1s`和`0s`进行编码。
- en: More savings with smaller trees[ #](#more-savings-with-smaller-trees)
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 较小的树可以节省更多[ #](#more-savings-with-smaller-trees)
- en: We can't decode `Huffman encoding` without the tree. So when we send text compressed
    with `Huffman encoding` we send the tree along too.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法在没有树的情况下解码`哈夫曼编码`。所以当我们发送用`哈夫曼编码`压缩的文本时，我们也会发送树。
- en: '**By using fewer uppercase letters in our text, we increase the chance of their
    being no instance of any given uppercase letter. Meaning the tree we send is smaller
    too.**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**在文本中使用较少的大写字母，可以增加没有任何给定大写字母实例的可能性。这意味着我们发送的树也更小。**'
- en: For instance if we change the text "Decompression is the Mission of the Compression
    Commission" from `title case` to `sentence case` we don't need a leaf in our tree
    for uppercase `M` and `C`. This makes our compression more efficient — but also
    makes the `Huffman tree` smaller.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们将文本“解压缩是压缩委员会的任务”从`标题大小写`改为`句子大小写`，我们就不需要一个树中的大写`M`和`C`。这使得我们的压缩更有效 ——
    但也使`哈夫曼树`更小。
- en: LZSS[ #](#lzss)
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LZSS[ #](#lzss)
- en: '`Deflate` also uses another compression method. It compresses data with `Huffman
    encoding` and then again using the `Lempel-Ziv-Storer-Szymanski (LZSS)` algorithm.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`Deflate`还使用另一种压缩方法。它首先用`哈夫曼编码`压缩数据，然后再使用`Lempel-Ziv-Storer-Szymanski（LZSS）`算法。'
- en: '`LZSS` works by finding repeated chunks of data and replacing them with a shorter
    reference to the first time they appeared.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`LZSS`通过找到重复的数据块并用指向它们第一次出现的较短引用替换它们来工作。'
- en: 'The referencing is done by replacing the repeated sequence with a `pointer`.
    This pointer consists of two numbers:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 引用是通过用`指针`替换重复序列来完成的。这个指针由两个数字组成：
- en: the first number tells us how far back to go to find the original sequence
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个数字告诉我们要倒退多远才能找到原始序列
- en: the second number tells us how long the original sequence is
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个数字告诉我们原始序列的长度是多少
- en: Here's a simplified example of how the LZSS algorithm works, the pointers are
    displayed like this `<1,2>`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 LZSS 算法的简化示例，指针显示为 `<1,2>`。
- en: Play around with the input below. See how removing capital letters can result
    in more repeated sequences — and fewer bytes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的输入中尝试一下。看看删除大写字母如何导致更多的重复序列 — 以及更少的字节。
- en: How much data can lowercase save?[ #](#how-much-data-can-lowercase-save)
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小写能节省多少数据？[ #](#how-much-data-can-lowercase-save)
- en: Before you start lowercasing everything, remember that there are much worse
    offenders when it comes to online waste. *e.g. unoptimized images, auto-playing
    videos, unused JavaScript.* Do those first!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始转换所有字母为小写之前，请记住在线资源浪费中还有更糟糕的例子。*例如，未经优化的图像、自动播放的视频、未使用的 JavaScript。* 首先解决这些问题！
- en: 'But that being said, lowercasing is surprisingly effective. Here''s an example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 但话虽如此，小写确实非常有效。这里是一个例子：
- en: Replacing title case with sentence case on Hacker News[ #](#replacing-title-case-with-sentence-case-on-hacker-news)
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Hacker News 上用句子大小写替换标题大小写[ #](#replacing-title-case-with-sentence-case-on-hacker-news)
- en: As mentioned in the intro — I took the front page of Hacker News and rewrote
    the title of each article in `sentence case` instead of `title case`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如介绍中所述 — 我将 Hacker News 的首页标题改写为`sentence case`而不是`title case`。
- en: Each `html` file had the exact same number of characters — but when compressed
    into zip files the `title case` file was `5,992 bytes` and the `sentence case`
    file was `5,961 bytes`. Saving `31 bytes`!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`html`文件的字符数完全相同 — 但压缩成zip文件后，`title case`文件为`5,992字节`，而`sentence case`文件为`5,961字节`。节省了`31字节`！
- en: Perhaps not a lot, but a nice side effect of making headings easier to read.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 也许不多，但这对于使标题更易于阅读来说是一个不错的副作用。
- en: Using the fomula provided by [sustainablewebdesign.org](https://sustainablewebdesign.org/calculating-digital-emissions/)
    tells us that for each visit to Hacker News would save `0.00001059642g` of carbon
    if written in `sentence case`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[sustainablewebdesign.org](https://sustainablewebdesign.org/calculating-digital-emissions/)提供的公式告诉我们，如果以`sentence
    case`编写，则每次访问 Hacker News 将节省`0.00001059642克`的碳。
- en: Assuming that Hacker News gets about `10 million` visits a day changing to sentence
    case would result in the prevention of `105g` of carbon daily. that's the equivalent
    of burning `4.3` gallons of gasoline a year. Enough fuel to drive a Mini Cooper
    `137.6 miles` — roughly the width of Sri Lanka.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 Hacker News 每天约有`1000万`次访问，转换为句子大小写将每天节省`105克`的碳。这相当于每年燃烧`4.3`加仑的汽油。足够驾驶一辆
    Mini Cooper `137.6英里` — 大约等于斯里兰卡的宽度。
- en: Systematically lowercasing case‑insensitive code.[ #](#systematically-lowercasing-case%E2%80%91insensitive-code)
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对大小写不敏感的代码进行系统转换为小写。[ #](#systematically-lowercasing-case%E2%80%91insensitive-code)
- en: Some minifiers automatically lowercase some code to save a few bytes after compressing
    — but this is not common or applied consistently.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一些代码压缩工具会在压缩后自动将一些代码转换为小写，以节省一些字节 — 但这并不常见，也不一直适用。
- en: Any given optimisation from a `minifier` probably falls into the category of
    *too small to care about* — but collectively they save lots of data, which makes
    websites faster and less energy intensive.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 任何一个来自`压缩工具`的优化可能都属于*不值一提的*类别 — 但它们共同节省了大量数据，使网站更快，消耗的能量更少。
- en: 'For instance, many `html` files start with am uppercase doctype declaration
    like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，许多`html`文件以大写的 doctype 声明开始，如下所示：
- en: '[PRE0]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'but the [`HTML5` specification states that this is case insensitive](https://html.spec.whatwg.org/multipage/syntax.html#the-doctype),
    so an `html minifier` could save some data by changing this to:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 但是[`HTML5`规范说明不区分大小写](https://html.spec.whatwg.org/multipage/syntax.html#the-doctype)，所以一个`html压缩工具`可以通过将其更改为以下内容节省一些数据：
- en: '[PRE1]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This optimizations has been implemented by [`html-minifier`](https://github.com/kangax/html-minifier/issues/822)
    but not by others.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这些优化已经被[`html-minifier`](https://github.com/kangax/html-minifier/issues/822)实现，但其他工具未实现。
- en: Some examples of lowercase‑able code[ #](#some-examples-of-lowercase%E2%80%91able-code)
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一些可转换为小写的代码示例[ #](#some-examples-of-lowercase%E2%80%91able-code)
- en: There are many examples of code that can be lowercased to save data. Here are
    some examples that are commonly uppercase when they needn't be.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可以转换为小写以节省数据的代码示例。以下是一些通常大写但不需要的示例。
- en: I've hope you found this interesting. If you're similarly inclined to help optimize
    the web to save energy you can help me gather more of these examples in [this
    git repo](https://github.com/DitheringIdiot/lowercase-able-code).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你觉得这很有趣。如果你也有兴趣帮助优化网络以节省能源，你可以帮我收集更多这样的例子，[在这个 git 仓库里](https://github.com/DitheringIdiot/lowercase-able-code)。
- en: published
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 发布
- en: 25 Nov 2023
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 2023年11月25日
- en: modified
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 修改
- en: 25 Nov 2023
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 2023年11月25日
- en: author
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 作者
- en: Nathaniel
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 纳撒尼尔
- en: tags
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 标签
- en: '`posts` `minutia` `web performance` `compression` `site speed`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`posts` `细枝末节` `网络性能` `压缩` `站点速度`'
- en: </main>
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: </主要>
