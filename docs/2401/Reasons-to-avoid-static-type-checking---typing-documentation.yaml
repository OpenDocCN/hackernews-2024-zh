- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:17:36'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:17:36'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Reasons to avoid static type checking — typing documentation
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免静态类型检查的原因 —— 类型文档
- en: 来源：[https://typing.readthedocs.io/en/latest/source/typing_anti_pitch.html](https://typing.readthedocs.io/en/latest/source/typing_anti_pitch.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://typing.readthedocs.io/en/latest/source/typing_anti_pitch.html](https://typing.readthedocs.io/en/latest/source/typing_anti_pitch.html)
- en: The idea that dynamism in Python is a strength of the language is reflected
    in the fact that Python’s type system is gradual. See [**PEP 483**](https://peps.python.org/pep-0483/)
    for details, but the long and short of this is that you can add static types to
    your codebase only to the extent that you want to, and static type checkers and
    other tools should be able to put up with this.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的动态性是该语言的优点的想法体现在 Python 的类型系统是渐进的这一事实中。有关详细信息，请参阅 [**PEP 483**](https://peps.python.org/pep-0483/)，但长话短说，您可以根据需要仅向您的代码库添加静态类型，并且静态类型检查器和其他工具应该能够应对这一点。
- en: It’s also worth noting that “static type checking” encompasses a spectrum of
    possible degrees of strictness. On the one hand, you can set yourself up so that
    your type checker does almost nothing. On the other – well, I love type checking,
    but I would quit Python if I had to enable all possible strictness checks that
    type checkers offer.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，“静态类型检查”涵盖了一系列可能的严格程度。一方面，您可以设置自己几乎不做任何事情的类型检查器。另一方面，嗯，我喜欢类型检查，但如果我不得不启用类型检查器提供的所有可能的严格检查，我会退出
    Python。
- en: 'Anyway, with all that said, here’s a list of possible reasons to not use static
    type checking in Python:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，话虽如此，以下是不使用 Python 中的静态类型检查的可能原因列表：
- en: You simply don’t want to. Python is a tool that is meant to serve you. Python
    is a big tent, multi-paradigm language that generally allows you to do things
    in the way that best suits your needs, as best determined by you.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你根本不想这样做。Python 是一种旨在为您服务的工具。Python 是一个大篷车，支持多范式语言，通常允许您以最符合您需求的方式来做事情，由您自己来确定最适合您的方式。
- en: Type annotations can both help and hurt readability. While type annotations
    can serve both humans and machines, particularly complex annotations or changes
    to idioms serve machines more than they do humans. Readability counts.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型注释既可以帮助又可以损害可读性。尽管类型注释可以为人类和机器服务，特别是复杂的注释或对习语的更改对机器的服务大于对人类的服务。可读性很重要。
- en: The cost-benefit ratio isn’t good enough. Pleasing static type checkers requires
    a non-zero amount of busy work. If this isn’t worth the extra confidence you get,
    you shouldn’t add static type checking.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本效益比不够好。取悦静态类型检查器需要一定量的繁琐工作。如果这不值得您获得额外信心，您就不应该添加静态类型检查。
- en: Your codebase fits in your developers’ heads. Opinions vary, but people tend
    to agree that at some number of developers and lines of code, static type checking
    confers significantly more benefit. You don’t feel like you’re there yet.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的代码库适合于您的开发人员的思维。意见各异，但人们倾向于同意在一些开发人员和代码行数后，静态类型检查会带来更多的益处。您觉得还没有达到那个程度。
- en: If you maintain high test coverage, that might provide sufficient quality assurance
    for your needs (acknowledging that static type checking and tests enforce different
    things; static type checking usually cannot validate logic, tests can often not
    prove invariants of your code to hold).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您保持高测试覆盖率，那可能足以满足您的需求（承认静态类型检查和测试执行不同的任务；静态类型检查通常不能验证逻辑，测试通常不能证明代码的不变性保持）。
- en: Your codebase is old, large and has been working fine without static type checking
    for years. While Python’s type system is designed to [allow gradual adoption of
    static type checking](https://mypy.readthedocs.io/en/stable/existing_code.html),
    the total cost of adding type annotations to a large extant codebase can be prohibitive.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的代码库古老、庞大，并且多年来一直没有进行静态类型检查，也能正常运行。虽然 Python 的类型系统旨在[允许逐渐采用静态类型检查](https://mypy.readthedocs.io/en/stable/existing_code.html)，但将类型注释添加到大型现有代码库的总成本可能会令人望而却步。
- en: Your application uses a particularly dynamic framework or your library does
    enough dynamic things that type checking would be unlikely to help your developers
    and users. Migrating application frameworks could be costly. Either a) redesigning
    your library in ways that static type checkers could better understand or b) figuring
    out clever type annotations to twist the arms of type checkers would take a lot
    of effort.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的应用程序使用了特别动态的框架，或者您的库执行了足够多的动态操作，以至于类型检查可能不太可能帮助您的开发人员和用户。迁移应用程序框架可能会很昂贵。要么a)以静态类型检查器更好理解的方式重新设计您的库，要么b)找出巧妙的类型注释来诱导类型检查器将需要很多工作。
- en: Your codebase has suffered at the hands of [Hyrum’s Law](https://www.hyrumslaw.com/)
    and all possible observable behaviour is depended on. In order to avoid false
    positives for your users, all your types end up being either a) complicated `Protocol`s
    that are hard to maintain, or b) `Any` in which case there’s not much point. (On
    the other hand, static type checking could be a good solution for communicating
    to users what behaviour they should be allowed to rely on)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的代码库已经受到了[Hyrum的法则](https://www.hyrumslaw.com/)的伤害，并且所有可能的可观察行为都依赖于它。为了避免给您的用户带来误报，所有您的类型最终都是a)难以维护的复杂`Protocol`，或者b)`Any`，在这种情况下，没有太大意义。（另一方面，静态类型检查可能是一个很好的解决方案，用于向用户传达他们应该依赖的行为）
- en: You’re not opposed to type checking in theory, but you dislike Python type checkers
    in practice. Maybe they don’t understand enough of the idioms you use, maybe you’d
    like them to infer more instead of relying on explicit annotations, maybe they’re
    too slow, maybe they don’t integrate well with your editor, maybe they’re too
    hard to configure. Whatever the reason – it just doesn’t work for your project.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你并不反对理论上进行类型检查，但你实际上不喜欢Python类型检查器。也许它们不够理解你使用的习惯用法，也许你希望它们能够更多地推断而不是依赖显式注释，也许它们太慢，也许它们与你的编辑器集成得不好，也许它们太难配置。无论原因是什么——它对你的项目都不起作用。
- en: Type checking in Python isn’t actually strict enough, powerful enough or expressive
    enough for you. Python type checkers end up making various decisions out of pragmatism,
    or due to limited resources, and these decisions might not be the ones for you.
    This might mean that typed Python simply isn’t the right language for you, or
    you need to find other methods to enforce the properties you desire.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Python中进行的类型检查实际上不够严格、强大或表达力强。Python类型检查器最终会基于实用主义或由于资源有限而做出各种决策，而这些决策可能并不适合你。这可能意味着带类型的Python根本不适合你，或者你需要找到其他方法来强制执行你想要的属性。
- en: Advice for maintainers of untyped libraries
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未类型化库的维护者建议
- en: You’ve made the decision that adding static types isn’t the right choice for
    your library. But perhaps you’d still like to help your users who do use static
    type checking – and maybe you have some enthusiastic would-be contributors willing
    to help with this.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经做出了不向您的库添加静态类型的决定。但也许你仍然希望帮助那些使用静态类型检查的用户——也许你有一些热情的潜在贡献者愿意帮助您。
- en: One option is encourage such contributors to publish a [**PEP 561**](https://peps.python.org/pep-0561/)
    stub-only package that is maintained separately from your main project. They could
    also contribute these stubs to the [typeshed](https://github.com/python/typeshed)
    project.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一种选择是鼓励这些贡献者发布一个[**PEP 561**](https://peps.python.org/pep-0561/)仅包含存根的包，该包与您的主要项目分开维护。他们也可以将这些存根贡献给[typeshed](https://github.com/python/typeshed)项目。
- en: Note that if you’re willing to maintain the stubs, but you don’t wish to have
    them inline and don’t want to statically type check your code, you can accomplish
    this by distributing type stubs inside your package. See [Typing Python Libraries](libraries.html#libraries)
    for more information. See [Writing and Maintaining Stub Files](writing_stubs.html#writing-stubs)
    for advice on how to help maintain type stubs.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您愿意维护存根，但不希望将它们内联，并且不希望静态类型检查您的代码，您可以通过在您的包内分发类型存根来实现此目的。有关更多信息，请参阅[Typing
    Python Libraries](libraries.html#libraries)。有关如何帮助维护类型存根的建议，请参阅[Writing and Maintaining
    Stub Files](writing_stubs.html#writing-stubs)。
- en: If more users pester you about adding static types, feel free to link them to
    this document. And if you ever change your mind, make sure to check out some of
    the other guides in this documentation, and ask any questions you have over at
    [Python’s typing discussions](https://github.com/python/typing/discussions).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有更多用户纠缠你要求添加静态类型，请随时将它们链接到本文档。如果你改变主意，确保查看本文档中的其他一些指南，并在[Python类型讨论](https://github.com/python/typing/discussions)中提出你的任何问题。
