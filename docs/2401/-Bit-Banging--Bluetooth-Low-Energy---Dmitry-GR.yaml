- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:38:05'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:38:05
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: '"Bit-Banging" Bluetooth Low Energy - Dmitry.GR'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '"按位传输"蓝牙低功耗 - Dmitry.GR'
- en: 来源：[https://dmitry.gr/?r=05.Projects&proj=11.%20Bluetooth%20LE%20fakery](https://dmitry.gr/?r=05.Projects&proj=11.%20Bluetooth%20LE%20fakery)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://dmitry.gr/?r=05.Projects&proj=11.%20Bluetooth%20LE%20fakery](https://dmitry.gr/?r=05.Projects&proj=11.%20Bluetooth%20LE%20fakery)
- en: Faking Bluetooth LE
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟蓝牙低功耗
- en: '**Bluetooth LE** is a new technology, introduced in the Bluetooth 4.0 spec.
    It has *absolutely nothing* to do with bluetooth besides the name. Now that we
    have that out of the way, why is it cool? Well, it was made for low power, and
    the design shows. Unlike real bluetooth that does frequency hoppping on a precise
    schedule, regardless of anything, LE hops after some number of packets are sent,
    and thus one does not need to be awake to keep a running clock to know where to
    hop to next. In fact, LE allows a device to completely shut down its radio for
    large periods of time while maintaining a connection. This makes it awesome for
    keyboards and mice and all kinds of other such things. Another cool feature in
    LE is that devices can send unsolicited broadcasts of small chunks of data. Unlike
    real bluetooth, scanning for devices in the LE world can be passive - you just
    listen for advertisement packets on the right channels and you hear all the advertisements.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**蓝牙低功耗**是一种新技术，是在蓝牙4.0规范中引入的。 它与蓝牙除了名字之外*绝对没有任何关系*。 现在我们已经解释清楚了，为什么它很酷？ 嗯，它是为低功耗而设计的，这一点从设计上可以看出。
    与真正的蓝牙不同，它会根据严格的时间表进行频率跳跃，而LE则是在发送一定数量的数据包后进行跳跃，因此不需要保持清醒来保持一个运行时钟以知道下一步跳到哪里。
    事实上，LE允许设备在保持连接的同时完全关闭其无线电长达一段时间。 这使得它非常适用于键盘、鼠标和各种其他设备。 在LE中的另一个很酷的功能是，设备可以发送小块数据的未请求广播。
    与真正的蓝牙不同，在LE世界中扫描设备可以是被动的 - 你只需在正确的频道上监听广告数据包，你就能听到所有的广告。'
- en: '**The simple channel hopping behaviour** of LE means that we can probably pretend
    to be an LE device without the complex radio that normal bluetoth requires. The
    frequency is 2.4GHz, chanels are 1MHz apart, modulation is GFSK, datarate is 1MBps,
    preamble is 10101010 or 01010101 based on first data byte, and addressing is done
    using a 32-bit address. Gee, don''t we know a device that can do all that? Of
    course we do! The ever-popular [Nordic nRF24L01+](http://www.semiconductorstore.com/cart/pc/viewPrd.asp?idproduct=41939).
    So let''s look at the differences between what LE needs and what we have:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**LE的简单信道跳频行为**意味着我们可能可以假装成LE设备，而无需正常蓝牙所需的复杂无线电。 频率为2.4GHz，通道间隔为1MHz，调制为GFSK，数据速率为1MBps，前导码为10101010或01010101，取决于第一个数据字节，寻址使用32位地址。
    哎呀，我们难道不知道一个可以做到这一切的设备吗？ 当然知道！ 那就是广受欢迎的[Nordic nRF24L01+](http://www.semiconductorstore.com/cart/pc/viewPrd.asp?idproduct=41939)。
    那么让我们看看LE需要什么以及我们所拥有的有什么区别：'
- en: '**CRC:** BTLE uses a 24-bit CRC that is not something nRF24 can do. Luckily
    for us, nRF24 allows us to disable the CRC, and then we can send our own and check
    received ones manually. Unpleasant? Sure, but doable.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CRC：**BTLE使用的是24位CRC，这是nRF24无法做到的。 幸运的是，对于我们来说，nRF24允许我们禁用CRC，然后我们可以自己发送并手动检查接收到的CRC。
    不愉快？ 当然，但可行。'
- en: '**Frequency Hopping:** BTLE needs ut to be able to hop quickly - 150us or faster.
    Sadly here nRF24 fails us. After every transmission it shuts down its PLL, and
    then restarts it on every transmit or receive command. This takes 130us. We are
    left with too little time to do anything here, sadly. Luckily this is not the
    major issue.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**频率跳跃：**BTLE需要我们能够快速跳跃 - 150微秒或更快。 遗憾的是，nRF24在这里让我们失望。 每次传输后，它都会关闭其PLL，然后在每个传输或接收命令上重新启动它。
    这需要130微秒。 遗憾的是，我们在这里几乎没有时间做任何事情。 幸运的是，这并不是主要问题。'
- en: '**Packet Length:** BTLE packets are of various sizes, up to 39 bytes of payload
    in fact. But the one packet we would really want to support is the CONNECT_REQ
    packet, which is in fact 34 bytes of payload + 3 of CRC, meaning we''d need to
    receive 37 bytes if we want to check CRCs, and even if we were willing to throw
    caution to the wind and ignore them, we need to receive 34\. nRF24 will not handle
    packets over 32 bytes. Sadly the last two bytes are kind of important (hop size
    and a part of the channel map). This is where we lose.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据包长度：**BTLE数据包的大小各不相同，实际上可达39字节的有效负载。 但我们真正想要支持的一个数据包是CONNECT_REQ数据包，实际上它有34字节的有效负载+3字节的CRC，这意味着我们需要接收37字节，如果要检查CRC，即使我们愿意不顾一切地忽略它们，我们也需要接收34字节。
    nRF24将无法处理超过32字节的数据包。 遗憾的是，最后两个字节相当重要（跳频大小和频道映射的一部分）。 这就是我们失败的地方。'
- en: '**So... we cannot accept connections,** but not all is lost... BTLE allows
    unsolicited advertisements, so we can still do some cool things by making them
    broadcast data to anyone who''ll listen. Let''s work out just how much data we
    can send... Out of our 32-byte budget: 3 go into CRC, 2 go into the ADV_NONCONN_IND
    packet header, and 6 go into the MAC address, leaving us with 21 bytes of payload.
    This payload, however, must have structure. Assuming minimum required headers,
    we can get away with sending 19 bytes of data if we do not want our device to
    broadcast a name. If we do want a name, we have 17 bytes to split between the
    name (in UTF-8) and our data. And if we want to comply with the spec better and
    broadcast device attributes, we''ll have 14 bytes to split between name and data
    or 16 bytes of pure data - not too bad.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**所以...我们不能接受连接**，但并非一切都完了... BTLE 允许未经请求的广告，所以我们仍然可以通过让它们向愿意倾听的任何人广播数据来做一些酷事情。让我们计算一下我们可以发送多少数据...
    在我们的 32 字节预算中：3 用于 CRC，2 用于 ADV_NONCONN_IND 数据包标头，6 用于 MAC 地址，剩下 21 字节的负载。然而，这个负载必须具有结构。假设最小的必需标头，如果我们不想让设备广播名称，我们可以发送
    19 字节的数据。如果我们想要一个名称，我们有 17 个字节可以在名称（以 UTF-8 编码）和我们的数据之间分配。如果我们想更好地符合规范并广播设备属性，我们将有
    14 个字节可以在名称和数据之间分配，或者 16 个字节的纯数据 - 不太糟糕。'
- en: '**Let''s sort out the details** then... first of all, BTLE and nRF24 send data
    bits in the air in opposite order, so we''ll have to reverse all our bits. Second,
    BTLE uses data whitening, and nRF24 does not, so we''ll need to do that by hand
    too. Lastly, there is the previously-mentioned 24-bit CRC. All LE broadcasts get
    sent to the same "address": 0x8E89BED6, also known as "bed six." Of course, for
    us it''ll be bit-reversed. BTLE applies CRC to the whole payload but not the address.
    Whitening is applied to the payload and the CRC. Knowing this, thus, gives us
    the ordering of events needed to assemble a complete working packet. Advertisement
    packets are sent on 3 channels: 37, 38, and 39, which are 2.402HGz, 2.426GHz,
    and 2.480GHz respectively. We''ll alternate between them, spewing our broadcast
    everywhere methodically.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**然后让我们梳理一下细节**...首先，BTLE 和 nRF24 在空中发送数据位的顺序相反，因此我们将不得不反转所有位。其次，BTLE 使用数据白化，而
    nRF24 不使用，所以我们也需要手动处理。最后，还有前面提到的 24 位 CRC。所有 LE 广播都被发送到同一个"地址"：0x8E89BED6，也被称为"bed
    six"。当然，对于我们来说，它将被位反转。BTLE 将 CRC 应用于整个负载，但不应用于地址。白化应用于负载和 CRC。了解这一点，因此，我们知道了组装完整工作数据包所需的事件顺序。广告数据包被发送到
    3 个通道：37、38 和 39，它们分别是 2.402HGz、2.426GHz 和 2.480GHz。我们将在它们之间交替，有条不紊地将我们的广播涌入到各个地方。'
- en: '**BTLE CRC** is not too hard to implement in C, uses the initial value of 0x555555,
    and looks something like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**BTLE CRC** 在 C 中实现起来并不太困难，使用初始值为 0x555555，并且大致如下所示：'
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**The data whitening function** is also not too complicated. It is a 7-bit
    linear-shift feedback style and is initialized by the value that is equal to (channelNum
    << 1) + 1\. The code goes something like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据白化函数**也不是太复杂。它是一个 7 位线性移位反馈样式，并通过等于 (channelNum << 1) + 1 的值进行初始化。代码大致如下：'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**The advertisement packet payload** looks like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**广告数据包负载**看起来是这样的：'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**So if we lump all this together,** we''ll end up with a packet with the above
    header. We then CRC it using the above CRC function. We then whiten it using the
    above whitening function. After this we send it. Let''s see... yup, it works.
    An iPad3 running BTLExplorer shows that our device is visible and is a BTLE device.
    Cool! One caveat: if you do not broadcast a device name, BTLExplorer will crash
    - this is their bug, so do not worry.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**所以如果我们把这些放在一起**，我们将得到一个具有上述标头的数据包。然后我们使用上述 CRC 函数对其进行 CRC 计算。然后我们使用上述白化函数对其进行白化。之后我们发送它。让我们看看...
    是的，它起作用了。运行 BTLExplorer 的 iPad3 显示我们的设备可见且是 BTLE 设备。酷！一个注意事项：如果你不广播设备名称，BTLExplorer
    将崩溃 - 这是他们的 bug，所以不用担心。'
- en: '**What is the payload data format?** you may ask. Well, data is made of chunks,
    each of which has a 2-byte header: length and type (in that order, length includes
    the length of the type byte). Types you care about are:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**负载数据格式是什么？**你可能会问。好吧，数据由块组成，每个块都有一个 2 字节的标头：长度和类型（按顺序，长度包括类型字节的长度）。你关心的类型是：'
- en: '**2:** Flags - length will be 2 and the lone byte''s value you want is 5 -
    this means a single-mode (not BTLE/BT combo) device in limited discovery mode.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2：** 标志 - 长度为 2，唯一字节的值你想要的是 5 - 这意味着单模式（非 BTLE/BT 组合）设备处于有限发现模式。'
- en: '**8 or 9:** Name - length is the length of the name in UTF-8 without NULL-termination.
    8 is for "shortened name" and 9 is for "complete name."'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**8 或 9：** 名称 - 长度是名称的 UTF-8 编码长度，不包括 NULL 结尾。8 用于"缩写名称"，9 用于"完整名称"。'
- en: '**255:** Custom data. This is where you can shove your custom data. On iPhone
    you''ll have complete access to this.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**255：** 自定义数据。这是您可以放入自定义数据的地方。在iPhone上，您将完全访问此数据。'
- en: '**Why all this?** Well, if you know a simpler way for an embedded project to
    communicate data to an iPhone, let me know. WiFi is power hungry and messy. Real
    bluetooth is locked down in iPhone, as are serial ports. This method works. If
    and when Android gets a BTLE API, I am sure broadcast data will be available to
    you too - it just makes sense.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么这样做？** 嗯，如果您知道一种更简单的方式让嵌入式项目向iPhone通信，请告诉我。WiFi耗电量大且凌乱。真正的蓝牙在iPhone上被封锁，串口也是如此。这种方法行得通。如果Android有了BTLE
    API，我相信广播数据也将对您可用-这只是有道理的。'
- en: '**Future work:** I just got some non-nordic 2.4GHz parts that support packets
    up to 64 bytes and can keep their PPLs on, meaning that a full BTLE stack may
    be possible on them. I am working on this as you read this.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**未来工作：** 我刚收到了一些支持最大传输单元为64字节且可以保持其 PPL（可能传输延迟）的非北欧2.4GHz部件，这意味着可能可以在它们上实现完整的BTLE堆栈。我正在阅读此内容时致力于此。'
- en: 'All the code as well as the research that went into this and is published here
    is under this license: you may use it in any way you please if and only if it
    is for non-commercial purposes, you must provide a link to this page as well.
    Any commercial use must be discussed with me.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所有在此处发布的代码以及研究都受到此许可证的约束：您可以按照任何您喜欢的方式使用它，但仅限于非商业目的，您必须同时提供指向此页面的链接。任何商业用途必须与我讨论。
- en: '**Full sample code**, that will run on the nordic-fob from Sparkfun looks **approximately**
    like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**完整样例代码**，将在Sparkfun的nordic-fob上运行，看起来**大致**像这样：'
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
