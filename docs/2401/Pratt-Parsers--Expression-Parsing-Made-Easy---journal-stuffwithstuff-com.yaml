- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:57:55'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:57:55'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Pratt Parsers: Expression Parsing Made Easy – journal.stuffwithstuff.com'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pratt 解析器：轻松解析表达式 – journal.stuffwithstuff.com
- en: 来源：[https://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/](https://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/](https://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/)
- en: 'Every now and then, I stumble onto some algorithm or idea that’s so clever
    and such a perfect solution to a problem that I feel like I got smarter or gained
    [a new superpower](http://xkcd.com/208/) just by learning it. [Heaps](http://en.wikipedia.org/wiki/Heap_%28data_structure%29)
    were one, just about the only thing I got out of my truncated CS education. I
    recently stumbled onto another: [Pratt](http://en.wikipedia.org/wiki/Vaughan_Pratt)
    or “top-down operator precedence” parsers.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 时不时地，我会偶然发现一些算法或思想，它们非常聪明，对于解决问题来说是如此完美的解决方案，以至于我觉得通过学习它们我变得更聪明或获得了 [一种新的超能力](http://xkcd.com/208/)。堆就是其中之一，几乎是我在截断的计算机科学教育中得到的唯一东西。我最近又发现了另一种：Pratt
    或“自顶向下运算符优先级”解析器。
- en: When you’re writing a parser, [recursive descent](http://en.wikipedia.org/wiki/Recursive_descent)
    is as easy as spreading peanut butter. It excels when you can figure out what
    to parse based on the next bit of code you’re looking at. That’s usually true
    at the declaration and statement levels of a language’s grammar since most syntax
    there starts with keywords—`class`, `if`, `for`, `while`, etc.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写一个解析器时，[递归下降](http://en.wikipedia.org/wiki/Recursive_descent) 就像涂抹花生酱一样简单。当你可以根据你正在查看的代码的下一部分来确定解析什么时，它就会表现出色。这通常适用于语言语法的声明和语句级别，因为大多数语法从关键字开始——`class`、`if`、`for`、`while`
    等等。
- en: Parsing gets trickier when you get to expressions. When it comes to infix operators
    like `+`, postfix ones like `++`, and even mixfix expressions like `?:`, it can
    be hard to tell what kind of expression you’re parsing until you’re halfway through
    it. You *can* do this with recursive descent, but it’s a chore. You have to write
    separate functions for each level of precedence (JavaScript has 17 of them, for
    example), manually handle associativity, and smear your grammar across a bunch
    of parsing code until it’s hard to see.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 解析在处理表达式时变得更加棘手。当涉及到中缀运算符如`+`，后缀运算符如`++`，甚至是混合表达式如`?:`时，直到解析到一半时才能确定正在解析的表达式是什么类型的，这可能会很困难。你
    *可以* 用递归下降来实现这一点，但这很繁琐。你必须为每个优先级水平编写单独的函数（例如 JavaScript 有 17 个优先级），手动处理结合性，并且将你的语法分散到一堆解析代码中，直到变得难以看清楚。
- en: Peanut butter and jelly, the secret weapon
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 花生酱和果冻，秘密武器
- en: Pratt parsing solves that. If recursive descent is peanut butter, Pratt parsing
    is the jelly. When you mix the two together, you get a simple, terse, readable
    parser that can handle any grammar you throw at it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Pratt 解析解决了这个问题。如果递归下降是花生酱，那么 Pratt 解析就是果冻。当你把两者结合在一起时，你得到了一个简单、简洁、易读的解析器，可以处理任何你投入其中的语法。
- en: Pratt’s technique for handling operator precedence and infix expressions is
    so simple and effective it’s a mystery why almost no one knows about it. After
    the seventies, top down operator precedence parsers seem to have fallen off the
    Earth. Douglas Crockford’s [JSLint](http://www.jslint.com/) uses one to [parse
    JavaScript](http://crockford.com/javascript/tdop/tdop.html), but his treatment
    is one of the [very few](http://effbot.org/zone/simple-top-down-parsing.htm) remotely
    modern articles about it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Pratt 处理运算符优先级和中缀表达式的技术是如此简单和有效，以至于几乎没有人知道它是为什么。在七十年代之后，自顶向下的运算符优先级解析器似乎已经消失了。Douglas
    Crockford 的 [JSLint](http://www.jslint.com/) 使用它来 [解析 JavaScript](http://crockford.com/javascript/tdop/tdop.html)，但他的处理方式是
    [极少数](http://effbot.org/zone/simple-top-down-parsing.htm) 关于此的现代文章之一。
- en: Part of the problem, I think, is that Pratt’s terminology is opaque, and Crockford’s
    article is itself rather murky. Pratt uses terms like “null denominator” and Crockford
    mixes in extra stuff like tracking lexical scope that obscures the core idea.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为问题的一部分在于，Pratt 的术语是晦涩的，而 Crockford 的文章本身也相当混沌。Pratt 使用诸如“null denominator”之类的术语，而
    Crockford 则混入了额外的东西，比如跟踪词法作用域，这使得核心思想变得模糊。
- en: This is where I come in. I won’t do anything revolutionary. I’ll just try to
    get the core concepts behind top down operator precedence parsers and present
    them as clearly as I can. I’ll switch out some terms to (I hope) clarify things.
    Hopefully I won’t offend anyone’s purist sensibilities. I’ll be coding in Java,
    the vulgar Latin of programming languages. I figure if you can write it in Java,
    you can write it in anything.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我的所在之处。我不会做出任何革命性的事情。我只会尝试清楚地阐述自顶向下运算符优先级解析器背后的核心概念。我会更换一些术语以（我希望）澄清事物。希望我不会冒犯任何人的纯粹主义情感。我会用
    Java 编写代码，这是编程语言中的俚语拉丁文。我想，如果你能用 Java 写出来，你就能用任何语言写出来。
- en: What we’ll be making
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们将制作什么
- en: I’m a learn-by-doing person, which means I’m also a teach-by-doing one. So to
    show how Pratt parsers work, we’ll build a parser for a [tiny little toy language
    called *Bantam*](https://github.com/munificent/bantam). The language only has
    expressions since that’s where Pratt parsing is really helpful, but that should
    be enough to convince you of its usefulness.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我是一个通过实践学习的人，这意味着我也是一个通过实践教学的人。所以为了展示 Pratt 解析器的工作原理，我们将为一个[名为 *Bantam* 的微型玩具语言构建解析器](https://github.com/munificent/bantam)。该语言只有表达式，因为那是
    Pratt 解析真正有用的地方，但这应该足以让你相信它的有用性。
- en: 'Even though Bantam is simple, it has a full gamut of operators: prefix (`+`,
    `-`, `~`, `!`), postfix (`!`), infix (`+`, `-`, `*`, `/`, `^`), and even a mixfix
    conditional operator (`?:`). It has multiple precedence levels and both right
    and left associative operators. It also has assignment, function calls and parentheses
    for grouping. If we can parse this, we can parse anything.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 即使 Bantam 简单，它也有一整套运算符：前缀 (`+`, `-`, `~`, `!`)，后缀 (`!`)，中缀 (`+`, `-`, `*`, `/`,
    `^`)，甚至还有混合条件运算符 (`?:`)。它有多个优先级级别和右结合和左结合运算符。它还有赋值，函数调用和用于分组的括号。如果我们能解析这个，我们就能解析任何东西。
- en: What we’ll start with
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们将从什么开始
- en: All we care about is parsing, so we’ll ignore the tokenizing phase. I slapped
    together [a crude lexer](https://github.com/munificent/bantam/blob/master/src/com/stuffwithstuff/bantam/Lexer.java)
    that works and we’ll just pretend that tokens are raining down from heaven or
    something.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只关心解析，所以我们会忽略标记化阶段。我拼凑了一个[简陋的词法分析器](https://github.com/munificent/bantam/blob/master/src/com/stuffwithstuff/bantam/Lexer.java)，它可以工作，我们假装令牌就像从天上下来一样。
- en: 'A token is the smallest chunk of meaningful code. It has a type and a string
    associated with it. Given `from + offset(time)`, the tokens would be:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 令牌是最小的有意义代码块。它有一个与之关联的类型和字符串。给定 `from + offset(time)`，令牌将是：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For this exercise, we won’t be *interpreting* or *compiling* this code. We
    just want to parse it to a nice data structure. For our purposes, that means our
    parser should chew up a bunch of [Token](https://github.com/munificent/bantam/blob/master/src/com/stuffwithstuff/bantam/Token.java)
    objects and spit out an instance of some class that implements [Expression](https://github.com/munificent/bantam/blob/master/src/com/stuffwithstuff/bantam/expressions/Expression.java).
    To give you an idea, here’s a simplified version of the class for a [conditional
    expression](https://github.com/munificent/bantam/blob/master/src/com/stuffwithstuff/bantam/expressions/ConditionalExpression.java):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习，我们不会*解释*或*编译*这段代码。我们只想将其解析为一个漂亮的数据结构。对于我们的目的，这意味着我们的解析器应该吃掉一堆[Token](https://github.com/munificent/bantam/blob/master/src/com/stuffwithstuff/bantam/Token.java)对象，并输出一个实现[Expression](https://github.com/munificent/bantam/blob/master/src/com/stuffwithstuff/bantam/expressions/Expression.java)的某个类的实例。为了给你一个想法，这里是[条件表达式](https://github.com/munificent/bantam/blob/master/src/com/stuffwithstuff/bantam/expressions/ConditionalExpression.java)类的简化版本：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: (You gotta love Java’s “please sign it in quadruplicate” level of bureaucracy
    here. Like I said, if you can tolerate this in Java, it can work in *any* language.)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: （你得爱上 Java 的“请四次签名”级别的官僚主义。就像我说的，如果你能容忍 Java 中的这种情况，它在*任何*语言中都可以运行。）
- en: We’ll start from a simple [Parser](https://github.com/munificent/bantam/blob/master/src/com/stuffwithstuff/bantam/Parser.java)
    class. The parser owns the token stream, handles lookahead and provides the basic
    methods you need to write a top-down recursive descent parser with a single token
    of lookahead (it’s [LL(1)](https://en.wikipedia.org/wiki/LL_parser)). This is
    enough to get us going. If we need more later, it’s easy to extend it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个简单的[解析器](https://github.com/munificent/bantam/blob/master/src/com/stuffwithstuff/bantam/Parser.java)类开始。解析器拥有令牌流，处理前瞻并提供你编写自顶向下递归下降解析器所需的基本方法（它是[LL(1)](https://en.wikipedia.org/wiki/LL_parser)）。这足以让我们开始。如果以后需要更多，扩展它很容易。
- en: OK, let’s build ourselves a parser!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们建立一个解析器吧！
- en: First things first
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先说重要的事情
- en: Even though a “full” Pratt parser is pretty tiny, I found it to be hard to decipher.
    Sort of like [quicksort](http://en.wikipedia.org/wiki/Quicksort), the implementation
    is a deceptively simple handful of deeply intertwined code. To untangle it, we’ll
    build it up one tiny step at a time.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管“完整”的Pratt解析器非常小，但我发现它很难解读。有点像[快速排序](http://en.wikipedia.org/wiki/Quicksort)，实现是一小撮深度交织的代码，看起来简单但实则错综复杂。为了解开这一困惑，我们将一步一步地构建它。
- en: 'The simplest expressions to parse are prefix operators and single-token expressions.
    For those, the current token tells us everything we need to do. Bantam has one
    single-token expression: named variables. It has four prefix operators: `+`, `-`,
    `~`, and `!`. The simplest possible code to parse those is:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的表达式解析是前缀操作符和单令牌表达式。对于这些，当前标记告诉我们我们需要做什么。Bantam只有一个单令牌表达式：命名变量。它有四个前缀操作符：`+`、`-`、`~`和`!`。解析这些的最简单代码是：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'But that’s a bit monolithic. As you can see, we’re switching off of a TokenType
    to branch to different parsing behavior. Let’s encode that directly by making
    a Map from TokenTypes to chunks of parsing code. We’ll call these chunks “parselets”,
    and they will implement this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但这有点庞大。正如你所看到的，我们正在从TokenType转换为不同的解析行为。让我们直接将其编码，通过将TokenType映射到解析代码块的Map。我们将这些块称为“解析器”，它们将实现这个：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'An parselet implementation to parse variable names is simply:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 解析变量名的解析器实现简单地是：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can use a single class for all of the prefix operators since they only differ
    in the actual operator token itself:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用单个类来表示所有前缀操作符，因为它们在实际的操作符令牌本身上不同：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You’ll note that it calls back into `parseExpression()` to parse the operand
    that appears after the operator (for example, to parse the `a` in `-a`). This
    recursion takes care of nested operators like `-+~!a`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到它回调到`parseExpression()`中以解析运算符之后出现的操作数（例如，解析`-a`中的`a`）。这种递归处理嵌套的运算符，如`-+~!a`。
- en: 'Back in Parser, the chained `if` statements are replaced with a map:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 回到解析器，链式`if`语句被替换为一个映射：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To define the grammar we have so far—variables and the four prefix operators—we’ll
    add these helper methods:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义到目前为止的语法——变量和四个前缀运算符——我们将添加这些辅助方法：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And now we can define the grammar like:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以像这样定义语法：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is already an improvement over a recursive descent parser because our grammar
    is now more declarative instead of being spread out over a few imperative functions,
    and we can see the actual grammar all in one place. Even better, we can extend
    the grammar just by registering new parselets. We don’t have to change the Parser
    class itself.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经比递归下降解析器有所改进，因为我们的语法现在更具声明性，而不是分散在几个命令式函数中，而且我们可以在一个地方看到实际的语法。更好的是，我们可以通过注册新的解析器来扩展语法。我们不必更改解析器类本身。
- en: If we *only* had prefix expressions, we’d be done now. Alas, we don’t.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们*只有*前缀表达式，现在我们就已经完成了。然而，我们没有。
- en: Stuck in the middle
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 卡在中间了
- en: What we have so far only works if the *first* token tells us what kind of expression
    we’re parsing, but that isn’t always the case. With an expression like `a + b`,
    we don’t know we have an add expression until after we parse the `a` and get to
    `+`. We have to extend the parser to support that.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们所拥有的仅在*第一个*标记告诉我们我们正在解析什么类型的表达式时才有效，但情况并非总是如此。对于表达式`a + b`，我们直到解析完`a`并到达`+`之后才知道我们有一个加法表达式。我们必须扩展解析器以支持这一点。
- en: 'Fortunately, we’re in a good place to do so. Our current `parseExpression()`
    method parses a complete prefix expression including any nested prefix expressions
    and then stops. So, if we throw this at it:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们现在有能力这样做。我们当前的`parseExpression()`方法解析一个完整的前缀表达式，包括任何嵌套的前缀表达式，然后停止。因此，如果我们对其进行解析：
- en: 'It will parse `-a` and leave us sitting on `+`. That’s exactly the token we
    need to tell what infix expression we need to parse. Compared to prefix parsing,
    the only change for infix parsing is that there’s another expression *before*
    the infix operator that the infix parser receives as an argument. Let’s define
    a parselet that supports that:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 它将解析`-a`并让我们停在`+`上。这正是告诉我们需要解析什么中缀表达式的标记。与前缀解析相比，中缀解析的唯一变化是在中缀运算符之前有另一个表达式，该表达式作为参数传递给中缀解析器。让我们定义一个支持此的解析器：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The only difference is that `left` argument, which is the expression we parsed
    before we got to the infix token. We wire this up to our parser by having another
    table of infix parselets.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别在于`left`参数，它是我们在到达中缀标记之前解析的表达式。我们通过另一个中缀解析器表将其连接到我们的解析器，通过将中缀解析器作为参数传递给它的解析方法。
- en: Having separate tables for prefix and infix expressions is important because
    we sometimes have both a prefix and infix parselet for the same TokenType. For
    example, the prefix parselet for `(` handles grouping in an expression like `a
    * (b + c)`. Meanwhile, the *infix* parselet for `(` handles function calls like
    `a(b)`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为前缀和中缀表达式分别设置单独的表格很重要，因为有时我们对于同一 TokenType 既有前缀解析器又有中缀解析器。例如，`(`的前缀解析器处理像`a
    * (b + c)`这样的表达式中的分组。同时，`(`的*中缀*解析器处理函数调用，如`a(b)`。
- en: 'Now, after we parse the leading prefix expression, we look for an infix parser
    that matches the next token and wraps the prefix expression as an operand:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们解析前缀表达式之后，我们查找匹配下一个令牌并将前缀表达式包装为操作数的中缀解析器：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Pretty straightforward. We can implement an infix parselet for binary arithmetic
    operators like `+` like so:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 相当直接。我们可以这样为二元算术运算符`+`实现一个中缀解析器：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Infix parselets also works for postfix operators. I’m calling them “infix”,
    but they’re really “anything but prefix”. If there’s some leading subexpression
    that comes before the token, the token will be handled by an infix parselet. That
    includes postfix expressions and mixfix ones like `?:`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 中缀解析器也适用于后缀运算符。我称它们为“中缀”，但它们实际上是“除前缀之外的任何东西”。如果在令牌之前有一些前导子表达式，那么该令牌将由中缀解析器处理。这包括后缀表达式和像`?:`这样的混合式表达式。
- en: 'Postfix expressions are as simple as single-token prefix parselets: they just
    take the `left` operand and wraps it in another expression:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 后缀表达式与单令牌前缀解析器一样简单：它们只是取`left`操作数，并将其包装在另一个表达式中：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Mixfix is easy too. It’s similar to recursive descent:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Mixfix 也很简单。它类似于递归下降：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we can parse prefix, postfix, infix, and even mixfix expressions. With
    a pretty small amount of code, we can parse complex nested expressions like `a
    + (b ? c! : -d)`. We’re done, right? Well… almost.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们可以解析前缀、后缀、中缀甚至混合式表达式。凭借相当少量的代码，我们可以解析像`a + (b ? c! : -d)`这样的复杂嵌套表达式。我们完成了，对吧？嗯...
    差不多了。'
- en: Excuse you, aunt Sally
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 劳驾你了，阿姨莎莉
- en: Our parser *can* parse all of this stuff, but it doesn’t parse it with the right
    precedence or associativity. If you throw `a - b - c` at the parser, it will parse
    the nested expressions like `a - (b - c)`, which isn’t right. (Well, actually
    it is *right*—associative that is. We need it to be *left*.)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的解析器*可以*解析所有这些东西，但它没有以正确的优先级或结合性进行解析。如果你将`a - b - c`传递给解析器，它将解析嵌套表达式，如`a -
    (b - c)`，这是不正确的。（嗯，实际上它是*正确的*——是结合性的。我们需要它是*左*的。）
- en: And this *last* step where we fix that is where Pratt parsers go from pretty
    nice to totally radical. We’ll make two simple changes. We extend `parseExpression()`
    to take a *precedence*—a number that tells which expressions can be parsed by
    that call. If `parseExpression()` encounters an expression whose precedence is
    lower than we allow, it stops parsing and returns what it has so far.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 而这个*最后*一步，我们解决了这个问题，这就是 Pratt 解析器从相当好到完全激进的地方。我们会做两个简单的更改。我们扩展`parseExpression()`以接受*优先级*——一个数字，表示哪些表达式可以通过该调用进行解析。如果`parseExpression()`遇到一个优先级低于允许的表达式，它将停止解析并返回到目前为止所拥有的内容。
- en: 'To make that check we need to know the precedence of any given infix expression.
    We’ll let the parselet specify it:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行该检查，我们需要知道任何给定中缀表达式的优先级。我们让解析器指定它：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Using that, our core expression parser looks like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个，我们的核心表达式解析器看起来像这样：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'That relies on a tiny helper function to get the precedence of the current
    token or a default value if there’s no infix parselet for the token:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 那依赖于一个微小的辅助函数，以获取当前令牌的优先级，或者如果没有中缀解析器，则获取默认值：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And that’s it. To wire precedence into Bantam’s grammar, we set up a little
    precedence table:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。为了将优先级编入 Bantam 的语法中，我们设置了一个小的优先级表：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To make our operators parse their operands with the correct precedence, they
    pass an appropriate value back into `parseExpression()` when they call it recursively.
    For example, the [BinaryOperatorParselet](https://github.com/munificent/bantam/blob/master/src/com/stuffwithstuff/bantam/parselets/BinaryOperatorParselet.java)
    instance that handles the `+` operator passes in `Precedence.SUM` when it parses
    its right-hand operand.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的运算符以正确的优先级解析其操作数，它们在递归调用`parseExpression()`时会将适当的值传递回去。例如，处理`+`运算符的[BinaryOperatorParselet](https://github.com/munificent/bantam/blob/master/src/com/stuffwithstuff/bantam/parselets/BinaryOperatorParselet.java)实例在解析其右操作数时传递`Precedence.SUM`。
- en: Associativity is easy too. If an infix parselet calls `parseExpression()` with
    the *same* precedence that it returns for its own `getPrecedence()` call, you
    get left associativity. To be right-associative, it just needs to pass in *one
    less* than that instead.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 结合性也很容易。如果中缀解析器在其自身的`getPrecedence()`调用中返回相同的优先级，并使用`parseExpression()`进行调用，你将得到左结合性。要成为右结合，它只需要传入比那个优先级小*一个*。
- en: Go forth and multiply
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前进并繁殖
- en: I’ve rewritten the [parser for Magpie](https://github.com/munificent/magpie/blob/master/src/com/stuffwithstuff/magpie/parser/MagpieParser.java)
    using this and it worked like a charm. I’m also working on a JavaScript parser
    using this technique and again it’s been a great fit.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经使用这种方法重写了[Magpie的解析器](https://github.com/munificent/magpie/blob/master/src/com/stuffwithstuff/magpie/parser/MagpieParser.java)，它运行得非常完美。我还正在使用这种技术开发一个JavaScript解析器，同样效果很好。
- en: I Pratt parsers to be simple, terse, extensible (Magpie, for example, uses this
    to [let you extend its own syntax](/2011/02/13/extending-syntax-from-within-a-language/)
    at runtime), and easy to read. I’m at the point where I can’t imagine writing
    a parser any other way. I never thought I’d say this, but parsers feel easy now.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为Pratt解析器应该是简单的、简洁的、可扩展的（例如，Magpie就使用这个特性在运行时[让你扩展自己的语法](/2011/02/13/extending-syntax-from-within-a-language/)），并且易于阅读。我已经到了无法想象以其他方式编写解析器的地步。我从未想过会说出这样的话，但是现在解析器感觉很容易。
- en: To see for yourself, just take a look at [the complete program](https://github.com/munificent/bantam).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 想要亲自见识，只需查看[完整的程序](https://github.com/munificent/bantam)。
