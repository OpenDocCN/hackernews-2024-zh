- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:41:47'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:41:47
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Chris''s Wiki :: blog/tech/MFAIsBothSimpleAndWork'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Chris''s Wiki :: blog/tech/MFAIsBothSimpleAndWork'
- en: 来源：[https://utcc.utoronto.ca/~cks/space/blog/tech/MFAIsBothSimpleAndWork](https://utcc.utoronto.ca/~cks/space/blog/tech/MFAIsBothSimpleAndWork)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://utcc.utoronto.ca/~cks/space/blog/tech/MFAIsBothSimpleAndWork](https://utcc.utoronto.ca/~cks/space/blog/tech/MFAIsBothSimpleAndWork)
- en: 'Over on the Fediverse [I said something a while back](https://mastodon.social/@cks/111564970574073609):'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Fediverse 上[我之前说过一些话](https://mastodon.social/@cks/111564970574073609)：
- en: I have a rant bubbling around my head about 'why I'll never enable MFA for Github'.
    The short version is that I publish code on GH because it's an easy and low effort
    way to share things. So far, managing MFA and MFA recovery is neither of those;
    there's a lot of hassles, worries, work to do, and 'do I trust you to never abuse
    my phone number in the future?' questions (spoiler, no).
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我对“为什么我永远不会为 Github 启用 MFA”有些抱怨。简短版本是我在 GH 上发布代码是因为这是一个轻松且低成本的分享方式。到目前为止，管理
    MFA 和 MFA 恢复都不是这样的；有很多麻烦，担忧，要做的工作，以及“我相信你永远不会滥用我的电话号码吗？”的问题（剧透，不会）。
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I'll deal with MFA for work. I won't do it for things I'm only doing for fun,
    because MFA makes it not-fun.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我会处理工作的 MFA。但我不会为我只是为了好玩而做的事情启用 MFA，因为MFA使得事情不好玩。
- en: '[Basic MFA](/~cks/space/blog/tech/MFABasicOptionsIn2023) is ostensibly pretty
    simple these days. You get a trustworthy app for your smartphone (that''s two
    strikes right there), you scan the QR code you get when you enable MFA on your
    account, and then afterward you use your phone to generate the MFA [TOTP](https://en.wikipedia.org/wiki/Time-based_one-time_password)
    code that you type in when logging in along with your password. That''s a little
    bit more annoying than the plain password, but think of the security, right?'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[基本MFA](/~cks/space/blog/tech/MFABasicOptionsIn2023)现在在表面上看起来相当简单。你会得到一个值得信赖的智能手机应用程序（这已经是两个打击了），你在启用账户
    MFA 时会得到一个二维码，然后之后你使用手机生成 MFA [TOTP](https://en.wikipedia.org/wiki/Time-based_one-time_password)
    代码，在登录时和密码一起输入。这比纯密码略微麻烦，但想想安全性，对吧？'
- en: But what if your phone is lost, damaged, or unusable because it has a bulging
    battery and it's taking a week or two to get your carrier to exchange it for a
    new one (which happened to us with our work phones)? Generally you get some one
    time use special codes, but now you have to store and manage them (obviously not
    on the phone). If you're cautious about losing access to your phone, you may want
    to back up the TOTP QR code and secret itself. Both the recovery codes and the
    TOTP secret are effectively passwords and now you need to handle them securely;
    if you use a password manager, it may or may not be willing to store them securely
    for you. Perhaps you can look into [age](https://age-encryption.org/).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你的手机丢失、损坏或无法使用，因为它的电池鼓包了，而且需要花费一两周时间才能让运营商为你换一个新的（这种情况曾经发生在我们的工作手机上），那该怎么办？通常你会得到一些一次性的特殊代码，但现在你需要存储和管理它们（显然不是在手机上）。如果你担心手机丢失，可能希望备份TOTP二维码和密钥本身。恢复代码和TOTP密钥都是有效的密码，现在你需要安全地处理它们；如果你使用密码管理器，它可能会或可能不会愿意为你安全地存储它们。也许你可以考虑[age](https://age-encryption.org/)。
- en: (Printing out your recovery codes and storing the paper somewhere leaves you
    exposed to issues like a home fire, which is an occasion where you might also
    lose your phone.)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: （打印出您的恢复代码并将纸张存放在某个地方会使您面临像家庭火灾这样的问题，这是您可能会丢失手机的场合。）
- en: Broadly, [no website has a good account recovery story for MFA](/~cks/space/blog/tech/MFAAccountRecoveryDistrust).
    Figuring out how to deal with this is not trivial and is your problem, not theirs.
    And while TOTP is not the in MFA thing these days, the story is in many ways worse
    with physical hardware tokens, because you can't back them up at all (unlike TOTP
    secrets). Some environments will back up software [Passkeys](https://en.wikipedia.org/wiki/WebAuthn),
    but so far only between the same type of thing and often at the price of synchronizing
    things like all of your browser state.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 广泛地说，[多重身份验证(MFA)在没有一个网站有一个良好的账户恢复故事](/~cks/space/blog/tech/MFAAccountRecoveryDistrust)。弄清楚如何处理这个问题并不是微不足道的，这是你的问题，而不是他们的问题。虽然目前TOTP不是MFA中的东西，但物理硬件令牌的故事在很多方面更糟糕，因为你根本不能备份它们（与TOTP密钥不同）。一些环境将备份软件[通行证](https://en.wikipedia.org/wiki/WebAuthn)，但到目前为止，只在相同类型的环境之间备份，并且通常以同步所有浏览器状态等价格。
- en: However, all of this is basically invisible in the simple MFA story. The simple
    MFA story is that everything magically just works and that you can turn it on
    without problems or serious risks. Of course, websites have a good reason for
    pushing this story; they want their users to turn on MFA, for various reasons.
    My belief is that the gap between the simple MFA story and the actual work of
    doing MFA in a way that you can reliably maintain access to your account is dangerous,
    and sooner or later this danger is going to become painfully visible.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，所有这些在简单的 MFA 故事中基本上是看不见的。简单的 MFA 故事是一切都神奇地自然而然地运行，你可以毫无问题或严重风险地打开它。当然，网站有充分的理由推动这个故事；他们希望他们的用户打开
    MFA，出于各种各样的原因。我相信，简单的 MFA 故事与以可靠方式维护对帐户的访问的实际 MFA 工作之间的差距是危险的，而且迟早这种危险会变得痛苦地显现出来。
- en: (Like many other versions of [mathematical security](/~cks/space/blog/tech/SecurityIsPeople),
    the simple MFA story invites blaming people (invariably called 'users' when doing
    this) when something goes wrong. They should have carefully saved their backup
    codes, not lost track of them; they should have sync'd their phone's TOTP stores
    to the cloud, or done special export and import steps when changing phones, or
    whatever else might have prevented the issue. This is as wrong as it always is.
    [Security is not math, it is people](/~cks/space/blog/tech/SecurityIsPeople).)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: (就像许多其他版本的[数学安全性](/~cks/space/blog/tech/SecurityIsPeople)，简单的 MFA 故事在出现问题时会归咎于人们（无论何时这样做，总是称为“用户”）。当事情出了问题时，他们应该小心地保存他们的备用代码，不要把它们弄丢；他们应该将手机的
    TOTP 存储同步到云端，或者在更换手机时执行特殊的导出和导入步骤，或者任何其他可能防止问题发生的事情。这与通常情况下一样错误。[安全不是数学，是人](/~cks/space/blog/tech/SecurityIsPeople)。)
