- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:48:45'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:48:45
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Chris''s Wiki :: blog/programming/GitBranchesSocialConstructs'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Chris''s Wiki :: blog/programming/GitBranchesSocialConstructs'
- en: 来源：[https://utcc.utoronto.ca/~cks/space/blog/programming/GitBranchesSocialConstructs](https://utcc.utoronto.ca/~cks/space/blog/programming/GitBranchesSocialConstructs)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://utcc.utoronto.ca/~cks/space/blog/programming/GitBranchesSocialConstructs](https://utcc.utoronto.ca/~cks/space/blog/programming/GitBranchesSocialConstructs)
- en: 'Over on the Fediverse, [I had a half-baked thesis](https://mastodon.social/@cks/111449110724408233):'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Fediverse 上，[我提出了一个半成品的论点](https://mastodon.social/@cks/111449110724408233)：
- en: 'A half-baked thesis: branches in Git are a social construct, somewhat enabled
    by technical features. We talk about things having been done on a branch or existing
    on a branch, or what branches are what on an intertwined tree of them, even when
    this is not something you can find in the Git repository.'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个半成品的论点：Git 中的分支是一种社会构建，部分是由技术特性所赋能的。我们谈论某些事情是在分支上完成的，或者存在于分支上，或者在它们交织的树上是什么分支，即使这并不是你能在
    Git 存储库中找到的东西。
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (This is since commits aren't permanently associated with a branch; they are
    merely currently reachable from one or more branches. What branch a multi-head-reachable
    commit is on is up to us.)
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: （这是因为提交并没有永久地与一个分支关联起来；它们只是当前可以从一个或多个分支到达的。多头可达的提交在哪个分支上取决于我们。）
- en: 'The background on this is more or less Julia Evans'' [git branches: intuition
    & reality](https://jvns.ca/blog/2023/11/23/branches-intuition-reality/), or more
    exactly a Fediverse discussion between [Julia Evans](https://social.jvns.ca/@b0rk/111445767832607539)
    and [Mark Dominus](https://mathstodon.xyz/@mjd/111446192179078717) (and Mark Dominus''s
    [I wish people would stop insisting that Git branches are nothing but refs](https://blog.plover.com/prog/git/branches.html)).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这其中的背景或多或少可以追溯到[Julia Evans](https://social.jvns.ca/@b0rk/111445767832607539)的[git
    分支：直觉与现实](https://jvns.ca/blog/2023/11/23/branches-intuition-reality/)，更确切地说是
    Julia Evans 和 [Mark Dominus](https://mathstodon.xyz/@mjd/111446192179078717)（以及
    Mark Dominus 的[I wish people would stop insisting that Git branches are nothing
    but refs](https://blog.plover.com/prog/git/branches.html)）之间的 Fediverse 讨论。
- en: This ties into my long standing view that [modern version control systems are
    a user interface to their underlying mathematics](/~cks/space/blog/tech/VCSUINotMathematics).
    Git has an internal, mathematical view of what 'branches' are, but very few people
    actually use this mathematical view; instead we use a variety of 'user interface'
    views of what branches are and how we think of them. Git supports these user views
    of branches with various 'porcelain' features.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我长期以来的观点有关，即[现代版本控制系统是其底层数学的用户界面](/~cks/space/blog/tech/VCSUINotMathematics)。Git
    对 '分支' 的内部数学视图，但很少有人实际使用这种数学视图；相反，我们使用各种 '用户界面' 视图来思考分支以及如何看待它们。Git 通过各种 '美观的'
    特性支持这些用户视图。
- en: Some projects using Git actively work to create branches that have a more concrete
    and durable existence. For instance, [commits on a Go release branch have the
    branch name in the commit's title](https://go.googlesource.com/go/+log/refs/heads/release-branch.go1.21),
    which is something the Go project does for a lot of branches that are used in
    Go development and release. For development branches specifically, this durably
    marks commits as having been done on the branch even after the branch is merged
    to the 'main' development branch.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一些使用 Git 的项目积极努力地创建具有更具体和持久存在的分支。例如，[Go 发布分支上的提交在提交标题中带有分支名称](https://go.googlesource.com/go/+log/refs/heads/release-branch.go1.21)，这是
    Go 项目为在 Go 开发和发布中使用的许多分支所做的事情。对于开发分支，这可持久地标记了提交作为在分支上完成的，即使分支已经合并到 'main' 开发分支中。
- en: Certainly, how I normally think of Git branches is different from their technical
    existence, and it differs from branch to branch. For example, in a typical repository
    I think of the 'main' branch as running all the way back to the creation of the
    repository, but other branches as only running back to where they split from 'main',
    despite this not being technically correct.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我通常对 Git 分支的思考方式与它们的技术存在不同，并且分支之间也有所不同。例如，在一个典型的存储库中，我认为 'main' 分支一直延伸到存储库创建的地方，但其他分支只延伸到它们从
    'main' 分支分离的地方，尽管这在技术上并不正确。
- en: (Another sign of Git branches as being a bit socially constructed is [how you
    can rename them (per the comments)](/~cks/space/blog/programming/GitMasterToMainWithLocalChanges).)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: （Git 分支有点社会构建的另一个迹象是[您可以重命名它们（按照评论）](/~cks/space/blog/programming/GitMasterToMainWithLocalChanges)。）
- en: 'PS: There are other VCSes where branches have a more durable existence in the
    VCS history. These VCSes are neither wrong nor right; my view is that they''ve
    taken a different view of both the UI and the mathematics of what ''branches''
    are in their mathematical version of version control.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
