- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:08:44'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Babashka
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://babashka.org/](https://babashka.org/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Instant startup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Leveraging GraalVM native-image and the Small Clojure Interpreter, babashka
    is a self-contained and instantly starting scripting environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Babashka comes with scripting batteries included: tools.cli, cheshire, babashka.fs,
    babashka.process, java.time and many more libraries and classes.'
  prefs: []
  type: TYPE_NORMAL
- en: Cross-platform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Babashka scripts work on linux, macOS and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the built-in libraries, babashka is able to load libraries from source,
    tapping into the world of already existing Clojure libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-threaded
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Babashka supports real JVM threads and like Clojure, supports futures and dynamic
    thread-locally bound vars
  prefs: []
  type: TYPE_NORMAL
- en: Babashka features a built-in task runner which covers the most popular use cases
    of make, just and npm scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Babashka can shell out to other CLI programs like you are used to in bash. It
    goes one step further and offers seamless integration with other binaries using
    the pod protocol. Pods can be implemented in any language, including Clojure,
    Rust and Go.
  prefs: []
  type: TYPE_NORMAL
