["```\npip install --upgrade langchain \n```", "```\nfrom langchain_community.document_loaders.s3_file import S3FileLoader\n\n# MinIO Configuration for the public testing server\nendpoint = 'play.min.io:9000'\naccess_key = 'minioadmin'\nsecret_key = 'minioadmin'\nuse_ssl = True\n\n# Initialize and load a single document\nfile_loader = S3FileLoader(\n    bucket='web-documentation',\n    key='MinIO_Quickstart.md',\n    endpoint_url=f'http{\"s\" if use_ssl else \"\"}://{endpoint}',\n    aws_access_key_id=access_key,\n    aws_secret_access_key=secret_key,\n    use_ssl=use_ssl\n)\n\ndocument = file_loader.load()\n```", "```\nfrom langchain_community.document_loaders.s3_directory import S3DirectoryLoader\n\n# Initialize and load documents\ndirectory_loader = S3DirectoryLoader(\n    bucket='web-documentation',\n    prefix='',\n    endpoint_url=f'http{\"s\" if use_ssl else \"\"}://{endpoint}',\n    aws_access_key_id=access_key, \n    aws_secret_access_key=secret_key, \n    use_ssl=use_ssl\n)\n\ndocuments = directory_loader.load()\n```", "```\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.output_parsers import StrOutputParser\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_core.runnables import RunnableLambda\nimport os\n\n# Set your OpenAI API key\nos.environ['OPENAI_API_KEY'] = 'your-openai-api-key'\nmodel = ChatOpenAI(temperature=0, model=\"gpt-3.5-turbo-1106\")\n\nprompt = ChatPromptTemplate.from_template(\n    \"Summarize the following document '{document_name}':{context}Please provide the summary and key points.\"\n)\n\nloaded_documents = [documents, document]  # From S3 Loaders\nflattened_documents = [doc for sublist in loaded_documents for doc in sublist] \n\nfor loaded_document in flattened_documents:\n    document_text = loaded_document.page_content\n    document_name = getattr(loaded_document, 'name', 'Unknown Document')  # Assuming each document has a 'name' attribute\n    chain = (\n        RunnableLambda(lambda x: {\"context\": document_text, \"document_name\": document_name})\n        | prompt\n        | model\n        | StrOutputParser()\n    )\n    summary = chain.invoke(None)\n    print(\"Summary:\", summary) \n```", "```\nSummary: The document is a quickstart guide for MinIO, a high-performance object storage system that is compatible with Amazon S3\\. It explains how to run MinIO on bare metal hardware or in containers. For Kubernetes environments, it recommends using the MinIO Kubernetes Operator. The key points are:\n\n- MinIO is a high-performance object storage system.\n- It is released under the GNU Affero General Public License v3.0.\n- MinIO is API compatible with Amazon S3.\n- It can be used to build high-performance infrastructure for machine learning, analytics, and application data workloads.\n- The guide provides quickstart instructions for running MinIO on bare metal hardware or in containers.\n- For Kubernetes environments, the MinIO Kubernetes Operator is recommended.\n```"]