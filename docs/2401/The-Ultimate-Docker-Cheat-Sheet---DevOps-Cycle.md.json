["```\n# create a new file in your current working directory called Dockerfile\n$ touch Dockerfile\n# open the file in your favorite editor (we are using Visual Studio Code)\n# if you do not have the code command installed, you will need to open it manually\n$ code DockerfileCode language: Bash (bash)\n```", "```\n# the next line sets the base image for this image # the base image is also based on a Dockerfile # see: https://hub.docker.com/layers/library/node/18-alpine/images/sha256-a0b787b0d53feacfa6d606fb555e0dbfebab30573277f1fe25148b05b66fa097 # node provides official images for Node.js and # alpine: a lightweight Linux distribution to reduce image size FROM node:18-alpine \n# sets the working directory inside the image # all commands after this instruction will be # executed inside this directory WORKDIR /app \n# copies the package.json and package-lock.json # from the client (e.g., your server or your development machine) # into the /app directory inside the image # before running npm ci to # get the advantage of layer caching COPY ./package* . \n# installs all node.js dependencies # npm ci is similar to npm install but intended to be # used in continuous integration (CI) environments # it will do a clean installion based on the package-lock.json RUN npm ci \n# copies the source code into the image COPY . . \n# this runs the build command specified in the package.json RUN npm run build:server \n# the EXPOSE instruction does not actually expose the port 300 of this image # this is documentation so that we know which port we need to expose # we do this when starting the container with the --publish flag EXPOSE 3000 \n# executes the server.js file that is located in the build directory CMD [\"node\", \"./build/index.js\"] Code language: Dockerfile (dockerfile)\n```", "```\n# lets create a new Dockerfile for our frontend application\n# as we can specify a file in the build command, we name this Dockerfile.client\n$ touch Dockerfile.client\n# open the file in your favorite editor (we are using Visual Studio Code)\n# if you do not have the code command installed, you will need to open it\n$ code Dockerfile.clientCode language: Bash (bash)\n```", "```\n# the base image # name it builder # you can reference this stage # in other stages by this name FROM node:18-alpine as builder \n# working directory inside the image WORKDIR /app \n# copies files from the client to the image COPY ./package* . \n# run a command inside the image RUN npm ci \n# copies files from the client to the image COPY . . \n# run a command inside the container # this will create a new folder in called dist in our app directory # inside the dist directory, you will find the # final HTML and JavaScript file RUN npm run build:client \n# serve stage # slim nginx base image named as serve # will start nginx as non root user FROM nginxinc/nginx-unprivileged:1.24 as serve \n# we can now copy things from the first stage to the second # we copy the build output to the directory where nginx serves files COPY --from=builder /app/dist /var/www \n# we overwrite the default config with our own # if you take a look at the GitHub repository, you # see the .nginx directory with the nginx.conf # here we only use the port 80 # in production, you would also want to make sure # all requests, even in your internal network or Kubernetes cluster # is served via HTTPS when dealing with sensible data COPY --from=builder /app/.nginx/nginx.conf /etc/nginx/conf.d/default.conf \n# the EXPOSE instruction does not actually expose the port 80 of this image # this is documentation so that we know which port we need to expose # we do this when starting the container with the --publish flag EXPOSE 80 \n# The command used when the image is started as a container # Note: for Docker containers (or for debugging), # the \"daemon off;\" directive which is used in this example # tells nginx to stay in the foreground. # for containers, this is useful. # best practice: one container = one process. # one server (container) has only one service. CMD [\"nginx\", \"-g\", \"daemon off;\"] Code language: Dockerfile (dockerfile)\n```", "```\n# list the directory to make sure you are in the directory with the Dockerfile\n$ ls\n# if not, change the directory with \"cd ./path/to/directory-with-Dockerfile\"\n# build an Image out of the Dockerfile in the current working directory\n$ docker build .\n# if you want to build another Dockerfile in this directory, use the --file flag\n# e.g., --file <filename>\n$ docker build --file Dockerfile.client .Code language: Bash (bash)\n```", "```\n# list all local images on the client (your server or your development machine)\n$ docker image ls\n# find your image IDCode language: Bash (bash)\n```", "```\n# build and tag your image\n# a tag consists of a name and a tag, which is separated by a colon (:)\n$ docker build --tag examplename/examplerepository-server:0.1.0 .\n# or\n$ docker build --file Dockerfile.client --tag examplename/examplerepository-client:0.1.0 .\n# list all local images\n$ docker image ls\n# you will see your image with a proper repository name and a tagCode language: PHP (php)\n```", "```\n# start our image\n$ docker run examplename/examplerepository-server:0.1.0\n# or\n$ docker run examplename/examplerepository-client:0.1.0Code language: Bash (bash)\n```", "```\n# try to find an image on another registry\n$ docker run https://registrydomain.com/examplename/examplerepository-server:0.1.0Code language: Bash (bash)\n```", "```\n# run container in the background\n$ docker run --detached examplename/examplerepository-server:0.1.0\n# or\n$ docker run --detached examplename/examplerepository-client:0.1.0Code language: Bash (bash)\n```", "```\n# list all running containers\n$ docker container ls\n# short\n$ docker psCode language: Bash (bash)\n```", "```\n# list all stopped and running containers\n$ docker container ls --allCode language: Bash (bash)\n```", "```\n# stop a container\n$ container stop <container-id>\n# start a container\n$ container start <container-id>\n# restart container\n$ container restart <container-id>\n# remove a stopped container\n$ container rm <container-id>Code language: Bash (bash)\n```", "```\n# automatically remove a container after it stops\n$ docker run --rm examplename/examplerepository-server:0.1.0\n# or\n$ docker run --rm examplename/examplerepository-client:0.1.0Code language: Bash (bash)\n```", "```\n# kill a container\n$ docker kill <conatiner-id>Code language: Bash (bash)\n```", "```\n# publish ports, e.g., forward container port to a port on the host system\n$ docker run --publish 3000:3000 examplename/examplerepository-server:0.1.0\n# or\n$ docker run --publish 80:80 examplename/examplerepository-server:0.1.0\n# if you run both containers, the server and the client\n# and you visit the localhost:80 in your browser\n# you should see the message Hello WorldCode language: Bash (bash)\n```", "```\n# access the container\n$ docker exec --interactive --tty <container-id> <shell-command>Code language: Bash (bash)\n```", "```\n# list the directory inside the container\n$ docker exec --interactive --tty <container-id> lsCode language: PHP (php)\n```", "```\n# SSH into the container (if the `sh` command exists in the container)\n$ docker exec --interactive --tty <container-id> sh\n# this will keep the connection to the container open\n# and you can execute multiple commands within the container\n# to exit the container, run the following\n$ exitCode language: Bash (bash)\n```", "```\n# using a named volume\n# everything within this path of the container will be stored\n# in a volume named <volume-name>\n$ docker run --volume <volume-name>:/path/in/container <image-name>\n\n# using a mounted volume\n# everything inside the path of the container will be stored \n# in the path of the host\n$ docker run --volume /path/on/host:/path/in/container <image-name>Code language: Bash (bash)\n```", "```\n# create a volume called server-volume\n# we store the content of /app/build/data within our container\n# on our host machine (your dev machine or your server)\ndocker run --volume server-volume:/app/build/data --publish 3000:3000 examplename/examplerepository-server:0.1.0Code language: Bash (bash)\n```", "```\n# list all volumes\n$ docker volume ls\n\n# here you will see the location where Docker will store the named volumes\n# on the host machineCode language: Bash (bash)\n```"]