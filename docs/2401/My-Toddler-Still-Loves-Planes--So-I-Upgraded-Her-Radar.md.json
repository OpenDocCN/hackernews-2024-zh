["```\n// ControlsView.swift\n\nvar body: some View {\n    // ... \n    .presentationDetents(availableDetents, selection: $selectedDetent)\n    .presentationDragIndicator(.visible)\n    .presentationCornerRadius(24)\n    .presentationBackground {\n        LinearGradient(colors: [.gray, .spaceGrey],\n                           startPoint: .top,\n                           endPoint: .bottom)\n                .padding(-2)\n                .embossEffect()\n        }\n    .presentationBackgroundInteraction(.enabled)\n```", "```\n// AviatorView.swift\n\n@AppStorage(\"zoomed\") var zoomed: Bool = false\n\n// ...\n\ncameraPosition = .camera(MapCamera(centerCoordinate: coordinate,\n                                   distance: (zoomed ? 70 : 100) * 1_000,\n                                   heading: angle))\n```", "```\n// RadarView.swift \n\nprivate var radarCircles: some View {\n    GeometryReader { geometry in\n        let diameter = min(geometry.size.width, geometry.size.height)\n        let middleDiameter = diameter * (2.0 / 3.0)\n        let innerDiameter = diameter * (1.0 / 3.0)\n\n        ForEach(zoomed ? [diameter, middleDiameter]\n                       : [diameter, middleDiameter, innerDiameter], id: \\.self) {\n\n        // drawing the radar circles ... \n}\n```", "```\n// Country.swift\n\nextension Flight {\n\n    var flag: String {\n        guard let countryCode = Country(name: origin_country)?.abbreviation else { return \"\" }\n        return countryCode.uppercased().unicodeScalars.reduce(into: \"\") {\n            if let scalar = UnicodeScalar(UInt32(127397) + $1.value) {\n                $0.unicodeScalars.append(scalar)\n            }\n        }\n    }\n}\n```", "```\n@AppStorage(\"showFlags\") var showFlags: Bool = false\n\nprivate var planeMapAnnotations: some MapContent {\n    ForEach(flights.filter, id: \\.icao24) { flight in\n        Annotation(showFlags ? flight.flag : \"\", coordinate: flight.coordinate) {\n            // custom annotation view ... \n        }\n    }\n}\n```", "```\nstruct Flight {    \n\n    // ...\n\n    var isLowAltitude: Bool {\n        geo_altitude < 2500.0\n    }\n}\n```", "```\n@AppStorage(\"cloudy\") var cloudy: Bool = false \n\nprivate var planeMapAnnotations: some MapContent {\n    ForEach(flights.filter { cloudy ? $0.isLowAltitude : true }, id: \\.icao24) { flight in\n        // MapKit annotation ...\n    }\n}\n```", "```\n// Flight.swift\n\nenum AircraftCategory: Int {\n\n    // ...   \n\n    var image: Image {\n        switch self {\n        case .rotorcraft: return Image(systemName: \"xmark.circle.fill\")\n        default: return Image(systemName: \"airplane\")\n        }\n    }\n\n    var emoji: String? {\n        switch self {\n        case .spaceTransatmospheric: return \"🛰️\"\n        default: return nil\n        }\n    }\n\n    var scaling: Double {\n        switch self {\n        case .small: return 0.6\n        case .large: return 1\n        case .heavy: return 1.5\n        // ... \n        default: return 1.0\n        }\n    }\n}\n```", "```\n// FlightAnnotationView.swift\n\nvar body: some View {\n    aircraft\n        .scaleEffect(flight.category.scaling)\n        // other effects ...\n}\n\n@ViewBuilder\nprivate var aircraft: some View {\n    if let emoji {\n        GeometryReader { geo in\n            Rectangle()\n                .mask(\n                    Text(emoji)\n                        .font(.system(size: min(geo.size.width, geo.size.height)))\n                        .frame(width: geo.size.width, height: geo.size.height, alignment: .center)\n                )\n        }\n\n    } else {\n        image\n    }\n}\n```", "```\n// ControlsView.swift\n\n@AppStorage(\"username\") var username: String = \"\"\n@AppStorage(\"password\") var password: String = \"\"\n\nTextField(\"Username\", text: $username)\nSecureField(\"Password\", text: $password)\n```", "```\n// FlightAPI.swift\n\nfunc fetchLocalFlightData(coordinate: CLLocationCoordinate2D) async throws -> [Flight] {\n\n    // flight data url from coordinate ... \n\n    var request = URLRequest(url: url)\n\n    if let base64LoginString = getBase64LoginString() {\n        request.setValue(\"Basic \\(base64LoginString)\", forHTTPHeaderField: \"Authorization\")\n    }\n\n    let data = try await session.data(for: request).0\n    let flightData = try decoder.decode(FlightData.self, from: data)\n    return flightData.states\n}\n\nfunc getBase64LoginString() -> String? {\n    guard let username = UserDefaults.standard.string(forKey: \"username\"),\n          let password = UserDefaults.standard.string(forKey: \"password\") else { return nil } \n    let loginString = String(format: \"%@:%@\", username, password)\n    guard let loginData = loginString.data(using: String.Encoding.utf8) else { return nil }\n    return loginData.base64EncodedString()\n}\n```"]