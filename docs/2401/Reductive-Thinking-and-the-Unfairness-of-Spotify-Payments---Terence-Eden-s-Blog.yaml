- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:26:44'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Reductive Thinking and the Unfairness of Spotify Payments – Terence Eden’s Blog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://shkspr.mobi/blog/2024/01/the-unfairness-of-spotify-payments-and-reductive-thinking/](https://shkspr.mobi/blog/2024/01/the-unfairness-of-spotify-payments-and-reductive-thinking/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In "[Theory Of Games And Economic Behavior](https://en.wikipedia.org/wiki/Theory_of_Games_and_Economic_Behavior)"
    by John von Neumann and Oskar Morgenstern, the authors discuss the card game of
    poker. There are dozens of variations of poker, each with their own intricacies.
    But they all boil down to the same pattern - is my hand stronger than your hand?
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how the authors frame it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since a “square deal” amounts to assuming that all possible hands are dealt
    with the same probability, we must interpret the drawing of the above number s
    as a chance move, each one of the possible values s = 1, • • • , S having the
    same probability 1/S. Thus the game begins with two chance moves: The drawing
    of the number s for player 1 and for player 2, which we denote by s[1] and s[2].'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[19.1.2](https://archive.org/details/in.ernet.dli.2015.215284/page/n211/mode/2up?q=poker)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Essentially, in two player poker, you could distribute cards labelled 1 - 100
    and have people bet / bluff on whether their number is higher or lower than their
    opponents. That might not be a *fun* game - but it is a useful toy example for
    thinking about formal rules for a game.
  prefs: []
  type: TYPE_NORMAL
- en: It is sometimes helpful for us to reduce the complexities of the real world
    into simple examples. It allows us to examine our base assumptions about reality
    without getting bogged down in messy practicalities.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take Spotify as an example. I often hear that artists complain that they
    get paid micro-cents per listen and that streaming is destroying their livelihood.
    I've no idea how much a recording artist gets every time their song is played
    on the radio, and I've no idea if Spotify is better or worse than the record deals
    generated by corrupt studio bosses.
  prefs: []
  type: TYPE_NORMAL
- en: So let's reduce Spotify to a toy example. Imagine a streaming service where
    people pay a fixed monthly subscription to get unlimited access to media.
  prefs: []
  type: TYPE_NORMAL
- en: This streaming service has only two users. They each pay £10 for the service.
    The service has no operating expenses and takes no profit. That money needs to
    be fairly split between the artists. We do not care about record companies, publishers,
    contracts, fees, taxes etc. We'll ignore copyright lengths as well. Some media
    is more expensive to produce than others, again ignored. We're assuming *all*
    things are equal.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what should happen in this scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: User 1 listens once to a 3 minute song by Ariana Grande.
  prefs: []
  type: TYPE_NORMAL
- en: User 2 listens once to a 3 minute song by Billie Eilish.
  prefs: []
  type: TYPE_NORMAL
- en: That's all they do for that month.
  prefs: []
  type: TYPE_NORMAL
- en: I think most reasonable people would say that artists A & B would split the
    money evenly. All things being equal, they each get £10.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's take a different scenario.
  prefs: []
  type: TYPE_NORMAL
- en: User 1 listens to 90 songs by Ariana Grande.
  prefs: []
  type: TYPE_NORMAL
- en: User 2 listens to 10 songs by Billie Eilish.
  prefs: []
  type: TYPE_NORMAL
- en: How should the money be fairly split? 50:50? 90:10? Something else?
  prefs: []
  type: TYPE_NORMAL
- en: '[I asked this question on Mastodon](https://mastodon.social/deck/@Edent/111602714475511040):'
  prefs: []
  type: TYPE_NORMAL
- en: What I find interesting is that there isn't an *obviously* fair split. Some
    people think the service should pay out proportional to total consumption across
    all users. But a significant minority think that the money should be split per
    individual customer. Both positions are reasonable and I can see the arguments
    for each.
  prefs: []
  type: TYPE_NORMAL
- en: Is it fair for some users to subsidise others? Is it fair if artist A gets paid
    less per stream than artist B? Should there be a maximum or minimum amount an
    artist can earn? Would people accept a logarithmic formula which decreases the
    profitability of an artist the more times they are streamed?
  prefs: []
  type: TYPE_NORMAL
- en: '[Mammals like us have an innate need for fairness](https://phys.org/news/2017-02-animals-unfairly-dont.html).
    Our primitive monkey-brains can''t exactly quantify what makes something unfair
    - but we know it when we see it.'
  prefs: []
  type: TYPE_NORMAL
- en: When artists complain about fairness in streaming, they're probably right; it
    *is* unfair.
  prefs: []
  type: TYPE_NORMAL
- en: But when pundits start saying there is an obviously fairer solution, they're
    *probably wrong*.
  prefs: []
  type: TYPE_NORMAL
- en: And that's the purpose of this exercise. Even at the most reduced example, there
    isn't an obvious way to pay artists fairly.
  prefs: []
  type: TYPE_NORMAL
- en: Once you scale up to millions of users, in different countries, interacting
    with complex licencing regimes, exclusive deals, songs of varying lengths and
    of varying copyright, etc then it becomes unsolvable without radically reconfiguring
    how we approach consumerism.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve written before about [the Feynman Algorithm](https://shkspr.mobi/blog/2022/01/an-algorithm-to-write-an-assignment/)
    which is a universal method for solving any problem. It goes:'
  prefs: []
  type: TYPE_NORMAL
- en: Write down the problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Think real hard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write down the solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I think step 0 needs to be a von Neumann reduction:'
  prefs: []
  type: TYPE_NORMAL
- en: Reduce the problem to its very simplest use case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write down the problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Think real hard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write down the solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to step (0) and increase the complexity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I suppose what I'm trying to say is ~~if you can't handle me at my worst, you
    don't deserve me at my best~~ if you can't solve a problem at its simplest level,
    you can't solve it at its most complex.
  prefs: []
  type: TYPE_NORMAL
