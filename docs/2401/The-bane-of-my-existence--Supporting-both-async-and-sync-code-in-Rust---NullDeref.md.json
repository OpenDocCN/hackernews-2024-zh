["```\n#[maybe_async::maybe_async] async  fn endpoint()  {  /* stuff */  }\n```", "```\n#[cfg(not(feature = \"is_sync\"))] async  fn endpoint()  {  /* stuff */  }   #[cfg(feature = \"is_sync\")] fn endpoint()  {  /* stuff with `.await` removed */  }\n```", "```\n#[maybe_async] trait  HttpClient  {  async  fn get(&self)  -> String; }   #[sync_impl] impl  HttpClient  for  UreqClient  {  fn get(&self)  -> String {  ureq::get(/* ... */)  } }   #[async_impl] impl  HttpClient  for  ReqwestClient  {  async  fn get(&self)  -> String {  reqwest::get(/* ... */).await  } }   struct SpotifyClient<Http: HttpClient>  {  http: Http }   #[maybe_async] impl<Http: HttpClient>  SpotifyClient<Http>  {  async  fn endpoint(&self)  {  self.http.get(/* ... */)  } }\n```", "```\n#[maybe_async::maybe_async] async  fn endpoint()  {  /* stuff */  }\n```", "```\n#[cfg(feature = \"is_async\")] async  fn endpoint_async()  {  /* stuff */  }   #[cfg(feature = \"is_sync\")] fn endpoint_sync()  {  /* stuff with `.await` removed */  }\n```"]