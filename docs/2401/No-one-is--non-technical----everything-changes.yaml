- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:23:08'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年05月27日 15:23:08
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: No one is “non-technical” | everything changes
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有人是“非技术” | 一切都在变化
- en: 来源：[https://everythingchanges.us/blog/no-one-is-non-technical/](https://everythingchanges.us/blog/no-one-is-non-technical/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://everythingchanges.us/blog/no-one-is-non-technical/](https://everythingchanges.us/blog/no-one-is-non-technical/)
- en: No one is “non-technical”
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有人是“非技术”
- en: 13 Oct 2022 by Mandy Brown
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2022年10月13日 由Mandy Brown
- en: 'When we talk about the makeup of our teams, there’s often an impulse to break
    people down into “technical” and “non-technical” roles, as code for “engineers”
    and “everyone else.” The latter comes up often when discussing internal tools
    or systems, which by definition have to be accessible to those “non-technical”
    folks. Sometimes the language bleeds out to refer to users of a product, especially
    if the product has both a developer-facing experience and orientations for other
    kinds of users. I’ve even used the “non-technical” language myself, bemoaning
    the lack of a better alternative. But that right there should have been a tell:
    there’s no suitable synonym because the concept is a fiction. There’s no such
    thing as a “non-technical” role; there are only different techniques.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论团队的构成时，常常有一种冲动把人们分成“技术”和“非技术”角色，作为“工程师”和“其他人”的代码。后者在讨论内部工具或系统时经常出现，这些工具或系统必须能够被“非技术”人员访问。有时，这种语言会渗透到产品的用户身上，尤其是如果产品既有面向开发者的体验，又有其他类型用户的定位时。我甚至自己也用过“非技术”的语言，为找不到更好的替代品而叹息。但这里就应该有一个提示：没有合适的同义词，因为这个概念是虚构的。没有所谓的“非技术”角色；只有不同的技术。
- en: 'The root of the problem with this language is that the distinction attempts,
    at face value, to be neutral—but no one actually believes that, and there’s little
    evidence to sustain the facade. People in “non-technical” roles are typically
    paid less, afforded less flexibility, and granted less prestige. The categories
    of “technical” and “non-technical” serve wholly to privilege those in the former,
    at the expense of the latter. But literally no product organization would survive
    a week without the deep—and, I’d argue, *technical*—expertise of the people who
    are usually lumped into the “non” bucket: a bucket that includes knowledge of
    financial systems, laws, business models, operations, ethics, research tactics,
    user behavior, cultural patterns, learning development, communication practices,
    organizational psychology, and so much more than could ever be listed in a single
    paragraph. The “non-technical” nomenclature not only does a disservice to that
    work—and to those people—it also diminishes the ability of the organization to
    really get the most benefit from those skills. It’s difficult to earn value from
    the things you disparage, even if the disparagement is superficially polite.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 该语言存在问题的根源在于，这种区分试图在表面上保持中立——但实际上没有人相信，也很少有证据支持这个假象。在“非技术”角色的人通常薪水较低，灵活性较差，声望也较低。
    “技术”和“非技术”这两个类别完全是为了优待前者而存在，以牺牲后者。但事实上，没有哪个产品组织能在没有通常被归为“非技术”的人的深入——而且我会说是*技术*——专业知识的情况下生存一个星期：这包括对金融系统、法律、商业模式、运营、道德、研究策略、用户行为、文化模式、学习发展、沟通实践、组织心理等等的了解，远远超过单一段落中可以列出的内容。
    “非技术”这一称谓不仅对那项工作——以及那些人——造成了伤害，而且还削弱了组织真正从这些技能中获得最大利益的能力。即使这种贬低只是表面上客气的，也很难从你轻视的事物中获得价值。
- en: But even setting aside the perceived hierarchy in the technical versus non-technical
    dichotomy, I think applying the “non” prefix to disciplines like design or research
    or recruiting is simply wrong. The [OED](https://www.oed.com/view/Entry/198447?redirectedFrom=technical#eid)
    has the first definition of technical as, “having knowledge of or expertise in
    a particular art, science, or other subject; skilled in the formal and practical
    techniques of a particular field.” Only in later usage does it morph into “expert
    in or concerned with applied and industrial sciences,” and even that definition
    doesn’t on its face exclude experts in, say, user experience or SAAS business
    models. And while it’s natural and good for words to evolve and change, it’s also
    worth interrogating *why* they’ve changed over time—and who benefits from those
    changes, and who might be harmed. The word “computer” once referred to a person
    who performed computation, and those people were nearly entirely women. The intentional
    masculinization of computer science as a field (a move I’d argue the technical/non-technical
    language emerges out of) only came later, and served to push women out of what
    was then becoming a lucrative sector of work. Likewise, constraining the word
    “technical” to refer only to “people who write code” serves to uphold a system
    in which benefits like compensation and prestige are distributed inequitably—regardless
    of the actual value of the various techniques being deployed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但即使抛开技术与非技术的认知层级，我认为将“非”前缀应用于设计、研究或招聘等学科是错误的。[OED](https://www.oed.com/view/Entry/198447?redirectedFrom=technical#eid)将技术一词的第一定义为“对特定艺术、科学或其他学科具有知识或专门技能；精通特定领域的正式和实践技术。”仅在后来的使用中，它才演变为“精通或关注应用和工业科学”，即使这个定义本身也不会排除对用户体验或SAAS商业模式等领域的专家。虽然单词的演变和变化是自然而良好的，但审视它们随着时间的变化以及谁从这些变化中受益、谁可能受到伤害也是值得的。单词“计算机”曾经指的是执行计算的人，而那些人几乎全部是女性。将计算机科学有意男性化（我认为技术/非技术语言的出现是这种做法的结果）只是后来才出现的，并且推动女性退出了当时正在变得利润丰厚的工作领域。同样，将“技术”一词限制为仅指“编写代码的人”有助于维护一个利益不均等分配的体系，而不考虑所部署各种技术的实际价值。
- en: In that way, the “technical/non-technical” breakdown fails along similar lines
    as the “hard/soft” skills terminology. The latter language more explicitly harks
    back to sexist notions of value, where hard/masculine things and behaviors are
    considered more valid than soft/feminine ones. Ironically, I mostly see the hard/soft
    language used by people trying to resurrect the value of the latter; but, again,
    simultaneously arguing for the importance of something while borrowing language
    that demeans it is like loading up on boulders before you hike up a steep hill.
    You might get to the top, but not without some bruises, and there are likely easier
    ways.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面，“技术/非技术”分类与“硬/软”技能术语的失败沿着类似的轨迹。后者的语言更明确地回溯到了性别歧视的价值观念，其中硬/男性化的事物和行为被认为比软/女性化的更有效。具有讽刺意味的是，我大部分看到的硬/软语言都是被试图重申后者的价值的人使用的；但是，再次辩论某事的重要性，同时借用贬低它的语言，就像在攀登陡峭的山丘之前装满巨石一样。你可能会到达山顶，但不会没有受伤，而且可能有更容易的方式。
- en: 'As with a lot of problematic language, one way to move forward is to simply
    choose to be more specific: instead of referring to “non-technical” people, talk
    about which people you mean. Instead of bucketing all skills that aren’t writing
    code into a big “non-technical” lump, list out those skills, or choose some representative
    examples. I think this is about more than being precise, though, and more than
    a courtesy to those folks unfairly maligned as “nons.” Code is great and important
    and obviously critical to bringing many a product to life. But too many of our
    digital products suffer from a lack of input from other fields and perspectives—especially
    when it comes to a nuanced understanding of how products interact with systems
    of oppression and power. Nearly everyone I talk to about their work—whether they
    are an engineer or a designer or a product manager or a CEO—says they want to
    do some good with their work. They want the things they build to lead to some
    improvement in people’s lives. Even the best code can’t do that alone; and a culture
    that values code above all else cannot be depended on to consider our lives in
    full.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多问题性的语言一样，向前迈进的一种方法就是简单选择更为具体：不要提及“非技术性”人群，而是谈论你指的是哪些人。不要将所有非编写代码的技能都归为一个大的“非技术性”类别，而是列出这些技能，或者选择一些代表性的例子。我认为这不仅仅是关于精确，而且不仅仅是对那些被不公平地贬低为“非技术性”的人的一种礼貌。编码是伟大的、重要的，显然对于将许多产品带入生活至关重要。但我们的许多数字产品过于缺乏来自其他领域和视角的输入——尤其是在对产品与压迫和权力系统如何相互作用的微妙理解方面。我与的几乎每个人谈论他们的工作时——无论他们是工程师、设计师、产品经理还是首席执行官——都会说他们希望通过自己的工作做些好事。他们希望他们建造的东西能够改善人们的生活。即使是最好的代码也无法独立做到这一点；而一个将代码看作最重要的一切的文化也不能指望全面考虑我们的生活。
