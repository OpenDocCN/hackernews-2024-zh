- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:45:32'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Perception: A back-port of @Observable'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://www.pointfree.co/blog/posts/129-perception-a-back-port-of-observable](https://www.pointfree.co/blog/posts/129-perception-a-back-port-of-observable)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Swift 5.9 brought powerful observation tools to the language, but unfortunately
    they only work in iOS 17, macOS 14, tvOS 17, watchOS 10, and newer. But by some
    accounts, less than 50% of devices are on iOS 17, and so most developers will
    not be able to make use of these tools for a few more years.
  prefs: []
  type: TYPE_NORMAL
- en: So we have backported the observation tools to work on Apple‚Äôs platforms going
    all the way back to iOS 13, macOS 10.15, tvOS 13, watchOS 6, and we‚Äôve released
    it as an [open-source library](http://github.com/pointfreeco/swift-perception).
    This means you can massively simplify your SwiftUI views *today* by using our
    library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Join us for a quick overview of our new library: [Perception](http://github.com/pointfreeco/swift-perception).'
  prefs: []
  type: TYPE_NORMAL
- en: Using Perception
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The library provides its own version of the observation tools from Swift 5.9,
    but they can be used on older Apple platforms. When designing your models, instead
    of using the `@Observable` macro, you will use our `@Perceptible` macro:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That is all it takes for the `FeatureModel` class to track access to its properties
    and to broadcast when those properties are mutated.
  prefs: []
  type: TYPE_NORMAL
- en: 'This model can be used in a SwiftUI view, but there is one additional step
    that must be taken to guarantee that the view subscribes to the model‚Äôs changes.
    We must wrap the view in a special view called `WithPerceptionTracking`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: On the one hand it‚Äôs unfortunate that we have to wrap our view in this, but
    on the other hand it‚Äôs fantastic that we can use these observation tools *today*
    without waiting for iOS 17 to have mass adoption.
  prefs: []
  type: TYPE_NORMAL
- en: 'And the library will help you out if you forget to use `WithPerceptionTracking`.
    If a field of a `@Perceptible` class is accessed in a view while *not* inside
    `WithPerceptionTracking`, then a runtime warning will be triggered:'
  prefs: []
  type: TYPE_NORMAL
- en: 'üü£ Runtime Warning: Perceptible state was accessed but is not being tracked.
    Track changes to state by wrapping your view in a ‚ÄòWithPerceptionTracking‚Äô view.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This lets you instantly know when something is not set up correctly, and do
    so in a noticeable yet [unobstrusive](https://www.pointfree.co/blog/posts/70-unobtrusive-runtime-warnings-for-libraries)
    way. To debug this, expand the warning in the Issue Navigator of Xcode (‚åò5), and
    click through the stack frames displayed to find the line in your view where you
    are accessing state without being inside `WithPerceptionTracking`.
  prefs: []
  type: TYPE_NORMAL
- en: How the Perception library works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new Observation framework is a part of the Swift open source project, which
    means all of the [source code](https://github.com/apple/swift/tree/f7f5070454850ed6bda85a9574b1759115705da4/stdlib/public/Observation)
    is immediately available, including the [source for the @Observable macro](https://github.com/apple/swift/tree/f7f5070454850ed6bda85a9574b1759115705da4/lib/Macros/Sources/ObservationMacros).
    So, we were able to copy all of that code to a new project, and with a few small
    changes we were able to get it all compiling.
  prefs: []
  type: TYPE_NORMAL
- en: We also made some major changes to the code to have it behave the way we wanted.
    The first major change we made to the code was to rename all variations of ‚Äúobservation‚Äù
    to ‚Äúperception‚Äù (*e.g.*, `@Observable` becomes `@Perceptible`). We did this so
    to make it clear that these are tools separate from the ones that Apple ships
    directly in the Swift tool chain. But we also [deprecated](https://github.com/pointfreeco/swift-perception/blob/92858a542c498742d51c1e736591d91a807d65a7/Sources/Perception/Perceptible.swift#L19-L23)
    all of the backported tools with renames so that once you can set your minimum
    deployment target to iOS 17 you will have an easy way to transition off of our
    library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Further, we wanted our tools to be able to defer to Apple‚Äôs native Observation
    framework when running on an iOS 17 device. This took a bit of extra work at runtime.
    All of the work takes place in the `PerceptionRegistrar`, which wraps either a
    native `ObservationRegistrar` when possible, and if not possible it falls back
    to our back-port, the `_PerceptionRegistrar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And we expose ways to get the honest, unwrapped `ObservationRegistrar` or `_PerceptionRegistrar`
    from this type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that these properties are technically unsafe since we are force casting.
    But we can be careful to only invoke the properties when the underlying wrapped
    value is of the type of registrar we expect.
  prefs: []
  type: TYPE_NORMAL
- en: Then we need to implement the `access`, `willSet`, `didSet` and `withMutation`
    methods on `PerceptionRegistrar`, and do so in a way that can dynamically, at
    runtime, choose to invoke our backported tools or Apple‚Äôs native tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, `access` can be implemented as a method constrained to work with
    the backported `Perceptible` types rather than `Observable` types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then in the body of this method we can dynamically check if iOS 17 is available,
    and if so try casting the object to the `Observable` protocol, as well as do some
    fancy maneuvers to open the existential and cast the key path to the right type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: And similar tricks can be employed for the `willSet`, `didSet` and `withMutation`
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: Those little tricks allow iOS 16 and earlier devices to use our perception framework,
    but iOS 17 and new devices will use the native observation tools in Swift 5.9.
  prefs: []
  type: TYPE_NORMAL
- en: Get started today
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Try out [Perception](http://github.com/pointfreeco/swift-perception) in your
    project today to start making use of Swift‚Äôs amazing observation tools, even if
    you can‚Äôt target the newest Apple platforms.
  prefs: []
  type: TYPE_NORMAL
