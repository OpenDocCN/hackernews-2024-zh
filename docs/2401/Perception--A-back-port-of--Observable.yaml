- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:45:32'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:45:32
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Perception: A back-port of @Observable'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Perception: @Observable 的回溯'
- en: 来源：[https://www.pointfree.co/blog/posts/129-perception-a-back-port-of-observable](https://www.pointfree.co/blog/posts/129-perception-a-back-port-of-observable)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.pointfree.co/blog/posts/129-perception-a-back-port-of-observable](https://www.pointfree.co/blog/posts/129-perception-a-back-port-of-observable)
- en: Swift 5.9 brought powerful observation tools to the language, but unfortunately
    they only work in iOS 17, macOS 14, tvOS 17, watchOS 10, and newer. But by some
    accounts, less than 50% of devices are on iOS 17, and so most developers will
    not be able to make use of these tools for a few more years.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 5.9 为语言带来了强大的观察工具，但不幸的是，它们仅适用于 iOS 17、macOS 14、tvOS 17、watchOS 10 和更新的版本。但根据一些统计数据，不到
    50% 的设备使用 iOS 17，所以大多数开发者将无法在几年内使用这些工具。
- en: So we have backported the observation tools to work on Apple’s platforms going
    all the way back to iOS 13, macOS 10.15, tvOS 13, watchOS 6, and we’ve released
    it as an [open-source library](http://github.com/pointfreeco/swift-perception).
    This means you can massively simplify your SwiftUI views *today* by using our
    library.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们已经将观察工具回溯到适用于苹果平台的版本，包括 iOS 13、macOS 10.15、tvOS 13、watchOS 6，并将其发布为[开源库](http://github.com/pointfreeco/swift-perception)。这意味着您可以通过使用我们的库来大大简化您的
    SwiftUI 视图*今天*。
- en: 'Join us for a quick overview of our new library: [Perception](http://github.com/pointfreeco/swift-perception).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们快速浏览我们的新库：[Perception](http://github.com/pointfreeco/swift-perception)。
- en: Using Perception
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Perception
- en: 'The library provides its own version of the observation tools from Swift 5.9,
    but they can be used on older Apple platforms. When designing your models, instead
    of using the `@Observable` macro, you will use our `@Perceptible` macro:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 该库提供了其自己版本的 Swift 5.9 中的观察工具，但它们可以在旧的 Apple 平台上使用。在设计您的模型时，您将使用我们的`@Perceptible`宏，而不是使用`@Observable`宏：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That is all it takes for the `FeatureModel` class to track access to its properties
    and to broadcast when those properties are mutated.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`FeatureModel`类跟踪其属性访问并在这些属性发生变化时广播的全部内容。
- en: 'This model can be used in a SwiftUI view, but there is one additional step
    that must be taken to guarantee that the view subscribes to the model’s changes.
    We must wrap the view in a special view called `WithPerceptionTracking`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型可以在 SwiftUI 视图中使用，但必须执行一个额外步骤以确保视图订阅模型的更改。我们必须将视图包装在一个特殊的视图中，称为`WithPerceptionTracking`：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: On the one hand it’s unfortunate that we have to wrap our view in this, but
    on the other hand it’s fantastic that we can use these observation tools *today*
    without waiting for iOS 17 to have mass adoption.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，我们不得不将我们的视图包装在这个视图中，这有点不太幸运，但另一方面，今天就可以使用这些观察工具是太棒了，而不必等待 iOS 17 的广泛采用。
- en: 'And the library will help you out if you forget to use `WithPerceptionTracking`.
    If a field of a `@Perceptible` class is accessed in a view while *not* inside
    `WithPerceptionTracking`, then a runtime warning will be triggered:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您忘记使用`WithPerceptionTracking`，该库将会帮助您。如果在视图中访问`@Perceptible`类的字段，而 *不* 在`WithPerceptionTracking`内部，则会触发运行时警告：
- en: '🟣 Runtime Warning: Perceptible state was accessed but is not being tracked.
    Track changes to state by wrapping your view in a ‘WithPerceptionTracking’ view.'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 🟣 运行时警告：Perceptible 状态已被访问，但未被跟踪。通过将您的视图包装在‘WithPerceptionTracking’视图中来跟踪状态的变化。
- en: This lets you instantly know when something is not set up correctly, and do
    so in a noticeable yet [unobstrusive](https://www.pointfree.co/blog/posts/70-unobtrusive-runtime-warnings-for-libraries)
    way. To debug this, expand the warning in the Issue Navigator of Xcode (⌘5), and
    click through the stack frames displayed to find the line in your view where you
    are accessing state without being inside `WithPerceptionTracking`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这让您立即知道何时设置不正确，并以一种引人注目但[不显眼的](https://www.pointfree.co/blog/posts/70-unobtrusive-runtime-warnings-for-libraries)方式执行此操作。要调试此问题，请展开
    Xcode 的 Issue Navigator（⌘5），并点击显示的堆栈帧，找到您正在访问状态而不在`WithPerceptionTracking`内部的视图中的行。
- en: How the Perception library works
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Perception 库的工作原理
- en: The new Observation framework is a part of the Swift open source project, which
    means all of the [source code](https://github.com/apple/swift/tree/f7f5070454850ed6bda85a9574b1759115705da4/stdlib/public/Observation)
    is immediately available, including the [source for the @Observable macro](https://github.com/apple/swift/tree/f7f5070454850ed6bda85a9574b1759115705da4/lib/Macros/Sources/ObservationMacros).
    So, we were able to copy all of that code to a new project, and with a few small
    changes we were able to get it all compiling.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 Observation 框架是 Swift 开源项目的一部分，这意味着所有的[源代码](https://github.com/apple/swift/tree/f7f5070454850ed6bda85a9574b1759115705da4/stdlib/public/Observation)都可以立即获得，包括[@Observable宏的源代码](https://github.com/apple/swift/tree/f7f5070454850ed6bda85a9574b1759115705da4/lib/Macros/Sources/ObservationMacros)。因此，我们能够将所有这些代码复制到一个新项目中，并在进行了一些小的更改后使其全部编译通过。
- en: We also made some major changes to the code to have it behave the way we wanted.
    The first major change we made to the code was to rename all variations of “observation”
    to “perception” (*e.g.*, `@Observable` becomes `@Perceptible`). We did this so
    to make it clear that these are tools separate from the ones that Apple ships
    directly in the Swift tool chain. But we also [deprecated](https://github.com/pointfreeco/swift-perception/blob/92858a542c498742d51c1e736591d91a807d65a7/Sources/Perception/Perceptible.swift#L19-L23)
    all of the backported tools with renames so that once you can set your minimum
    deployment target to iOS 17 you will have an easy way to transition off of our
    library.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还对代码进行了一些重大更改，使其表现出我们想要的行为。我们对代码进行的第一个重大更改是将所有“observation”的变体重命名为“perception”（*例如*，`@Observable`变为`@Perceptible`）。我们这样做是为了清楚地表明这些工具是与苹果直接在
    Swift 工具链中提供的工具分开的。但我们还[弃用](https://github.com/pointfreeco/swift-perception/blob/92858a542c498742d51c1e736591d91a807d65a7/Sources/Perception/Perceptible.swift#L19-L23)了所有使用重命名的后备工具，这样一旦您将最低部署目标设置为
    iOS 17，您就可以轻松过渡到我们的库。
- en: 'Further, we wanted our tools to be able to defer to Apple’s native Observation
    framework when running on an iOS 17 device. This took a bit of extra work at runtime.
    All of the work takes place in the `PerceptionRegistrar`, which wraps either a
    native `ObservationRegistrar` when possible, and if not possible it falls back
    to our back-port, the `_PerceptionRegistrar`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们希望我们的工具在运行在 iOS 17 设备上时能够推迟使用 Apple 的原生 Observation 框架。这需要在运行时进行一些额外的工作。所有的工作都发生在`PerceptionRegistrar`中，它包装了一个原生的`ObservationRegistrar`（如果可能的话），如果不可能，它就会回退到我们的后端端口，即`_PerceptionRegistrar`：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And we expose ways to get the honest, unwrapped `ObservationRegistrar` or `_PerceptionRegistrar`
    from this type:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了获取这种类型的诚实、未包装的`ObservationRegistrar`或`_PerceptionRegistrar`的方法：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that these properties are technically unsafe since we are force casting.
    But we can be careful to only invoke the properties when the underlying wrapped
    value is of the type of registrar we expect.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些属性在技术上是不安全的，因为我们进行了强制类型转换。但我们可以小心地只在基础包装值是我们预期的注册器类型时才调用这些属性。
- en: Then we need to implement the `access`, `willSet`, `didSet` and `withMutation`
    methods on `PerceptionRegistrar`, and do so in a way that can dynamically, at
    runtime, choose to invoke our backported tools or Apple’s native tools.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要在`PerceptionRegistrar`上实现`access`、`willSet`、`didSet`和`withMutation`方法，并以一种可以在运行时动态选择调用我们的后备工具或苹果原生工具的方式来实现。
- en: 'For example, `access` can be implemented as a method constrained to work with
    the backported `Perceptible` types rather than `Observable` types:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`access`可以作为一种方法来实现，该方法受限于与`Observable`类型而不是`Perceptible`类型一起使用：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then in the body of this method we can dynamically check if iOS 17 is available,
    and if so try casting the object to the `Observable` protocol, as well as do some
    fancy maneuvers to open the existential and cast the key path to the right type:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在这个方法的主体中，我们可以动态地检查 iOS 17 是否可用，如果是，尝试将对象转换为`Observable`协议，以及进行一些花哨的操作来打开外在性并将关键路径转换为正确的类型：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And similar tricks can be employed for the `willSet`, `didSet` and `withMutation`
    methods.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的技巧也可以用于`willSet`、`didSet`和`withMutation`方法。
- en: Those little tricks allow iOS 16 and earlier devices to use our perception framework,
    but iOS 17 and new devices will use the native observation tools in Swift 5.9.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些小技巧使 iOS 16 及更早版本的设备可以使用我们的感知框架，但 iOS 17 及更新版本的设备将使用 Swift 5.9 中的本地观察工具。
- en: Get started today
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从今天开始入门
- en: Try out [Perception](http://github.com/pointfreeco/swift-perception) in your
    project today to start making use of Swift’s amazing observation tools, even if
    you can’t target the newest Apple platforms.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 今天就在你的项目中尝试使用[Perception](http://github.com/pointfreeco/swift-perception)，开始利用
    Swift 令人惊叹的观察工具，即使你无法面向最新的苹果平台。
