- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:37:48'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: How Discord Serves 15-Million Users on One Server
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://blog.bytebytego.com/p/how-discord-serves-15-million-users](https://blog.bytebytego.com/p/how-discord-serves-15-million-users)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How is GenAI impacting software development?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Join LinearB and ThoughtWorks’ Global Lead for AI Software Delivery to explore
    the metrics showing AI’s impact, unpack best practices for leveraging AI in software
    development, and measure the ROI of your own GenAI initiative.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[This workshop](https://bit.ly/LinearB_010924) includes:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '**📊Data insights** from LinearB’s new GenAI Impact Report'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '**🗣️Case studies** into how others are already doing it'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '**🔎Impact Measures:** adoption, benefits & risk metrics'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: ✅**Live demo:** How you can measure the impact of your GenAI initiative today
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Join the conversation on January 25th or 30th.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[Register Now](https://bit.ly/LinearB_010924)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: In early summer 2022, the Discord operations team noticed unusually high activity
    on their dashboards. They thought it was a bot attack, but it was legitimate traffic
    from MidJourney - a new, fast-growing community for generating AI images from
    text prompts.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: To use MidJourney, you need a Discord account. Most MidJourney users join one
    main Discord server. This server grew so quickly that it soon hit Discord’s old
    limit of around 1 million users per server.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Discord risked losing this important new community if they didn’t act fast.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: This is the story of how the Discord team creatively solved this challenge.
    They found ways to dramatically expand what their infrastructure could handle
    - keeping the thriving MidJourney community active on Discord.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Discord is a popular chat app used by hundreds of millions to connect. Originally
    for gamers, now all types of communities use it - from hiking clubs to study groups
    to large gaming communities.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: In Discord, a "server" hosts a community. It has chat channels to discuss topics
    chosen by the server owner.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Internally, Discord calls these servers "guilds" - so we'll use that term going
    forward.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Largest Discord Guilds (image source: [Discord](https://discord.com/servers))'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Before MidJourney, the biggest guilds had around 1 million members - huge gaming
    communities like Roblox and Fortnite.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: The Discord engineering team thought 1 million members was very close to the
    maximum a guild could handle. Let's explore why - but first, some quick background
    on the technologies powering Discord.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Discord’s real-time messaging backend is built with Elixir. Elixir runs on the
    BEAM virtual machine. BEAM was created for Erlang - a language optimized for large
    real-time systems requiring rock-solid reliability and uptime.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: A key capability BEAM provides is extremely lightweight parallel processes.
    This enables a single server to efficiently run tens or hundreds of thousands
    of processes concurrently.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Elixir brings friendlier, Ruby-inspired syntax to the battle-tested foundation
    of BEAM. Combined they make it much easier to program massively scalable, fault-tolerant
    systems.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Elixir 将友好、受 Ruby 启发的语法带入了 BEAM 的经过大量测试的基础。它们的结合使得编写大规模可扩展、容错系统变得更加容易。
- en: 'Code snippets comparing Erlang and Elixir syntax (image source: [elixirforum](https://elixirforum.com/t/code-snippets-to-compare-erlang-and-elixir-syntax/16443/3))'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 比较 Erlang 和 Elixir 语法的代码片段（图片来源：[elixirforum](https://elixirforum.com/t/code-snippets-to-compare-erlang-and-elixir-syntax/16443/3)）
- en: So by leveraging BEAM's lightweight processes, the Elixir code powering Discord
    can "fan out" messages to hundreds of thousands of users around the world concurrently.
    However, limits emerge as communities grow larger.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过利用 BEAM 的轻量级进程，驱动 Discord 的 Elixir 代码可以同时向全球数十万用户“扇出”消息。然而，随着社区规模的扩大，限制也出现了。
- en: As mentioned, Discord handles all real-time communication using Elixir processes
    on the highly concurrent BEAM virtual machine.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，Discord 使用高度并发的 BEAM 虚拟机上的 Elixir 进程处理所有实时通信。
- en: 'The path of a message through Discord’s real-time infra to other users and
    bots in a guild (Source: [Discord eng blog](https://discord.com/blog/maxjourney-pushing-discords-limits-with-a-million-plus-online-users-in-a-single-server))'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 消息通过 Discord 的实时基础设施传递到公会中的其他用户和机器人的路径（来源：[Discord 工程博客](https://discord.com/blog/maxjourney-pushing-discords-limits-with-a-million-plus-online-users-in-a-single-server)）
- en: Internally, each Discord community is called a “guild”. A dedicated Elixir “guild
    process” handles coordination and routing for each guild. This tracks all connected
    users to the guild.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，每个 Discord 社区被称为“公会”。一个专门的 Elixir “公会进程”处理每个公会的协调和路由。这跟踪所有连接到公会的用户。
- en: Every online user has a separate Elixir "session process”. When the guild process
    gets a new message, event, or update, it fans out this information to the relevant
    session processes. These session processes then push the update over WebSocket
    to the Discord clients.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每个在线用户都有一个单独的 Elixir “会话进程”。当公会进程收到新消息、事件或更新时，它会将这些信息扇出到相关的会话进程。然后，这些会话进程将更新通过
    WebSocket 推送给 Discord 客户端。
- en: This architecture provides a cost-effective way to handle millions of active
    guilds across a large pool of Linux servers in Discord's cloud infrastructure.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构为 Discord 在云基础设施中的大量 Linux 服务器上处理数百万个活跃公会提供了一种经济有效的方式。
- en: However, scaling limits emerge as guilds grow larger. Distributing messages
    and events to more users creates exponentially more work. Larger guilds also have
    more activity to distribute.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着公会规模的扩大，扩展限制也出现了。向更多用户分发消息和事件会产生指数级的工作量。更大的公会也有更多的活动要分发。
- en: So the guild process load grows much faster as its number of users increases.
    BEAM helps tremendously, but there's only so much one BEAM process can handle.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，随着用户数量的增加，公会进程的负载增长速度会更快。BEAM 能提供巨大帮助，但是一个 BEAM 进程能处理的事情是有限的。
- en: This is why Discord thought breaking 1 million concurrent users per guild would
    be very difficult.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么 Discord 认为每个公会同时在线用户突破 100 万会很困难。
- en: '* * *'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: If you’re not a paid subscriber, here’s what you missed this month.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不是付费订阅者，这就是你本月错过的内容。
- en: '[Netflix: What Happens When You Press Play?](https://blog.bytebytego.com/p/netflix-what-happens-when-you-press)'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Netflix：当你按下播放按钮时会发生什么？](https://blog.bytebytego.com/p/netflix-what-happens-when-you-press)'
- en: '[6 More Microservices Interview Questions](https://blog.bytebytego.com/p/6-more-microservices-interview-questions)'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[另外6个微服务面试问题](https://blog.bytebytego.com/p/6-more-microservices-interview-questions)'
- en: '[7 Microservices Interview Questions](https://blog.bytebytego.com/p/7-microservices-interview-questions)'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[7个微服务面试问题](https://blog.bytebytego.com/p/7-microservices-interview-questions)'
- en: '[Why the Internet Is Both Robust and Fragile](https://blog.bytebytego.com/p/why-the-internet-is-both-robust-and)'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[为什么互联网既稳健又脆弱](https://blog.bytebytego.com/p/why-the-internet-is-both-robust-and)'
- en: '[Unlock Highly Relevant Search with AI](https://blog.bytebytego.com/p/unlock-highly-relevant-search-with)'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[利用人工智能实现高度相关的搜索](https://blog.bytebytego.com/p/unlock-highly-relevant-search-with)'
- en: 'To receive all the full articles and support ByteByteGo, consider subscribing:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取所有完整文章并支持 ByteByteGo，请考虑订阅：
- en: '* * *'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: With that background established, let’s return to the main story. Facing a scaling
    crisis from Midjourney's runaway growth, Discord formed a small team of senior
    engineers to dig into the problems. This team was called MaxJourney.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在建立了这样的背景之后，让我们回到主要故事。面对 Midjourney 的快速增长带来的规模危机，Discord 组建了一个由资深工程师组成的小团队来深入研究这些问题。这个团队被称为
    MaxJourney。
- en: Here’s what they accomplished.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是他们取得的成就。
- en: Understanding where systems spend time and memory is critical before improving
    them. The team used various profiling techniques to analyze guild process performance.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在改进之前，了解系统花费时间和内存的位置至关重要。团队使用各种分析技术分析公会流程的性能。
- en: The simplest was sampling stack traces to reveal expensive operations. This
    quickly highlights issues without much effort. However, richer data was needed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是抽样堆栈跟踪以揭示昂贵的操作。这样可以快速凸显问题，而不需要太多努力。但是，需要更丰富的数据。
- en: So they instrumented the event loop to record metrics on each message type.
    This included frequency, min/max/average processing times. This analysis revealed
    the costliest operations to optimize. Cheap ones could be ignored.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，他们对事件循环进行了仪表化，以记录每种消息类型的指标。这包括频率、最小/最大/平均处理时间。这种分析揭示了需要优化的成本最高的操作。可以忽略廉价的操作。
- en: Memory usage was also examined, since it impacts hardware needs and garbage
    collection throughput.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 还检查了内存使用情况，因为它影响硬件需求和垃圾收集吞吐量。
- en: To estimate sizes of large data structures reasonably quickly, a helper library
    was built to sample maps and lists. It avoids fully traversing all elements.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了相对快速地估计大型数据结构的大小，构建了一个辅助库来对地图和列表进行抽样。它避免了完全遍历所有元素。
- en: This sampling revealed memory-intensive fields to refactor.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这次抽样揭示了需要重构的内存密集型领域。
- en: Armed with visibility into these time and memory hotspots, the team could now
    systematically target optimizations to rewrite inefficient code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有了对这些时间和内存热点的可见性，团队现在可以有系统地针对性地优化代码。
- en: The team's first optimization was reducing unnecessary work. They realized the
    client app did not always need every update for guilds that users were not actively
    viewing in the app's foreground.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 团队的第一个优化是减少不必要的工作。他们意识到客户端应用程序并不总是需要在应用程序前台不活动时更新公会的每个更新。
- en: So they implemented "passive" connections for those guilds. Passive connections
    skip processing and data transmission until the user opens the guild.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，他们为这些公会实现了“被动”连接。被动连接跳过处理和数据传输，直到用户打开该公会。
- en: Over 90% of the user-guild connections became passive for large servers. This
    cut required work by 90%, greatly reducing load.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 超过 90% 的用户 - 公会连接变为大服务器的被动连接。这将所需的工作量减少了 90%，大大减轻了负载。
- en: However, MidJourney kept growing. So this alone was not enough.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，MidJourney 不断增长。因此，单独做这些还不够。
- en: Relays already existed to split fanout work across BEAM processes for scaling.
    Relays are only enabled for large guilds, where they maintain session connections
    on behalf of the guild.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 中继已经存在，用于跨 BEAM 进程进行扩展的扇出工作。中继仅在大型公会中启用，它们代表公会维护会话连接。
- en: Each relay handles fanout and permissions for up to 15,000 users. This allowed
    leverage more BEAM processes to serve large guilds.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 每个中继处理扇出和权限，最多可容纳 15,000 名用户。这允许利用更多的 BEAM 进程来服务大型公会。
- en: Originally, relays duplicated full member lists. It was simple to implement,
    but for massive guilds with millions of members, dozens of copied lists wasted
    huge amount of RAM.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，中继复制了完整的成员列表。这很容易实现，但对于拥有数百万成员的大型公会来说，几十个复制列表浪费了大量的内存。
- en: Also, creating relays stalled massive guilds for seconds while serializing and
    transmitting member data.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，创建中继会在序列化和传输成员数据时使大型公会停顿几秒钟。
- en: So the team optimized relays to track just the tiny subset of members needed
    per relay.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 团队优化了中继，仅跟踪每个中继所需的微小成员子集。
- en: In addition to overall throughput, ensuring low latency was critical. So the
    team analyzed operations with high per-call duration, beyond just total time.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 除了整体吞吐量，确保低延迟也至关重要。因此，团队分析了操作的每次调用持续时间高的情况，而不仅仅是总时间。
- en: Key culprits were member iterations taking seconds, blocking guilds. The solution
    was worker processes to offload these. Workers leverage ETS, an in-memory database
    for fast inter-BEAM-process data sharing.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的问题是成员迭代需要花费几秒钟，阻塞了公会。解决方案是使用工作进程来卸载这些任务。工作进程利用 ETS，这是一个用于快速 BEAM 进程间数据共享的内存数据库。
- en: Members were stored in ETS, with recent changes in the guild's heap. This hybrid
    model kept the guild's memory small.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 成员存储在 ETS 中，最近的更改在公会的堆中。这种混合模型保持了公会的内存较小。
- en: For slow tasks, workers are spawned to run them asynchronously using the shared
    ETS data, freeing the guild to continue handling messages.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于慢任务，会生成工作进程以异步方式运行它们，使用共享的 ETS 数据，从而使公会能够继续处理消息。
- en: An example slow task is handling guild migration between machines. Copying state
    from the old guild process to the new process normally stalls the old one for
    minutes. But offloading this to a worker avoids blocking the old guild process
    from handling incoming messages.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是处理机器之间的公会迁移的缓慢任务。将状态从旧的公会进程复制到新进程通常会使旧进程停滞数分钟。但是，将此任务卸载到工作程序中可避免阻塞旧的公会进程处理传入消息。
- en: Another idea was offloading fanout from guilds to separate "sender" processes,
    further reducing guild workload and insulating the guild processes from network
    backpressure.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个想法是将公会的扇出从公会分离到单独的“发送者”进程，进一步减少公会的工作量，并使公会进程免受网络背压的影响。
- en: However, this unexpectedly tanked performance due to pathological garbage collection.
    Analysis showed it was triggered by freeing small memory outside the heap.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于病态垃圾收集，性能意外下降。分析表明，这是由于释放堆外的小内存而触发的。
- en: Tuning the virtual binary heap size fixed this. Now offload could be enabled,
    significantly improving throughput.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 调整虚拟二进制堆大小解决了这个问题。现在可以启用卸载，显着提高吞吐量。
- en: Through systematic optimization, the MaxJourney team achieved the seemingly
    impossible - expanding guild capacity 15x to keep MidJourney thriving on Discord.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过系统优化，MaxJourney团队实现了看似不可能的事情 - 将公会容量扩展了15倍，以保持MidJourney在Discord上蓬勃发展。
- en: '[1] [Maxjourney: Pushing Discord’s Limits with a Million+ Online Users in a
    Single Server](https://discord.com/blog/maxjourney-pushing-discords-limits-with-a-million-plus-online-users-in-a-single-server)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] [Maxjourney：在单个服务器上推动Discord超过一百万在线用户的限制](https://discord.com/blog/maxjourney-pushing-discords-limits-with-a-million-plus-online-users-in-a-single-server)'
- en: '[Using Rust to Scale Elixir for 11 Million Concurrent Users](https://discord.com/blog/using-rust-to-scale-elixir-for-11-million-concurrent-users)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用Rust将Elixir扩展到1100万并发用户](https://discord.com/blog/using-rust-to-scale-elixir-for-11-million-concurrent-users)'
- en: '[2] [How Discord Scaled Elixir to 5,000,000 Concurrent Users](https://discord.com/blog/how-discord-scaled-elixir-to-5-000-000-concurrent-users)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] [如何将Discord的Elixir扩展到500万并发用户](https://discord.com/blog/how-discord-scaled-elixir-to-5-000-000-concurrent-users)'
- en: '[3] [Discord Developer Portal — Documentation — Guild](https://discord.com/developers/docs/resources/guild)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] [Discord开发者门户 — 文档 — 公会](https://discord.com/developers/docs/resources/guild)'
- en: '[4] [GitHub - discord/manifold: Fast batch message passing between nodes for
    Erlang/Elixir.](https://github.com/discord/manifold)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] [GitHub - discord/manifold：Erlang/Elixir之间的快速批量消息传递。](https://github.com/discord/manifold)'
- en: '[5] [BEAM (Erlang virtual machine) - Wikipedia](https://en.wikipedia.org/wiki/BEAM_(Erlang_virtual_machine))'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[5] [BEAM（艾伦虚拟机器） - 维基百科](https://en.wikipedia.org/wiki/BEAM_(Erlang_virtual_machine))'
- en: '[6] [Erlang''s virtual machine, the BEAM](https://www.erlang-solutions.com/blog/erlangs-virtual-machine-the-beam/)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[6] [艾伦的虚拟机器，BEAM](https://www.erlang-solutions.com/blog/erlangs-virtual-machine-the-beam/)'
- en: '[7] [Introduction — Elixir v1.16.0](https://hexdocs.pm/elixir/1.16/introduction.html)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[7] [介绍 — Elixir v1.16.0](https://hexdocs.pm/elixir/1.16/introduction.html)'
