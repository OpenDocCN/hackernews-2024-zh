- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:33:32'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: In-browser code playgrounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://antonz.org/in-browser-code-playgrounds/](https://antonz.org/in-browser-code-playgrounds/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In-browser code playgrounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''m a big fan of interactive code snippets in all kinds of technical writing,
    from product docs to online courses to blog posts. Like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="python" editor="basic">In fact, I even built an open
    source tool called Codapi ^(for embedding such snippets.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, a code playground consists of a client-side widget and a server-side
    part that executes the code and returns the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Personally, I'm quite happy with this setup. But often people prefer not to
    depend on a server and run the code entirely in the browser. So I decided to look
    into it and implemented embeddable in-browser code playgrounds for JavaScript,
    Python, PHP, Ruby, Lua, and SQLite.
  prefs: []
  type: TYPE_NORMAL
- en: Running language runtimes in the browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The modern way to run arbitrary programs in the browser seems to be WebAssembly
    System Interface (WASI^() — an executable binary format based on WebAssembly.
    With WASI, you compile a program (originally written in C, Rust, Go, or some other
    language) into a WASI binary and then run it with a WASI runtime (there are a
    number of these runtimes from different vendors).)
  prefs: []
  type: TYPE_NORMAL
- en: Just as we can compile an arbitrary program into WASI binary, we can take a
    language interpreter like Lua or CPython, compile it into WASI, and run it with
    the WASI runtime to execute Lua or Python code. In practice, however, it's not
    that easy, because WASI compilers do not (yet) implement all the features of traditional
    compilers like GCC.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, VMWare Labs has already done the hard part and compiled PHP^(,
    Python ^(and Ruby ^(into WASI. So all I had to do was publish the WASI binaries
    as NPM packages to make them available on the CDN. I've also compiled Lua ^(and
    SQLite ^(to WASI.)))))
  prefs: []
  type: TYPE_NORMAL
- en: There is also Kohei Tokunaga's container2wasm initiative^(, which converts arbitrary
    Docker images into WASI binaries. It looks promising, but it generates 100+ MB
    binaries for even the smallest Alpine-based images. And since downloading hundreds
    of megabytes just to read an interactive article is probably not the best idea,
    this approach is not very practical (yet).)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Language runtimes compiled into WASI are one part of the equation. The other
    one is the WASI runtime (the thing that runs the binaries) capable of working
    in the browser. I chose the Runno ^(runtime by Ben Taylor because it's simple
    and lightweight (27 KB).)
  prefs: []
  type: TYPE_NORMAL
- en: The last step was to modify the JavaScript widget ^(to support pluggable engines
    (WASI is one of them).)
  prefs: []
  type: TYPE_NORMAL
- en: And that was it!
  prefs: []
  type: TYPE_NORMAL
- en: Showcase
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are some interactive code snippets implemented as described above. Note
    that the language runtime is downloaded when you click the Run button, so the
    first run may take some time. Subsequent runs are almost instantaneous.
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Executes the code using the Python 3.12 WASI runtime (26.3 MB).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet engine="wasi" sandbox="python" editor="basic">### PHP
  prefs: []
  type: TYPE_NORMAL
- en: Executes the code using the PHP 8.2 WASI runtime (13.2 MB).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet engine="wasi" sandbox="php" editor="basic" template="main.php">###
    Ruby
  prefs: []
  type: TYPE_NORMAL
- en: Executes the code using the Ruby 3.2 WASI runtime (24.5 MB).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet engine="wasi" sandbox="ruby" editor="basic">### Lua
  prefs: []
  type: TYPE_NORMAL
- en: Executes the code using the Lua 5.4 WASI runtime (330 KB).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet engine="wasi" sandbox="lua" editor="basic">### JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: Executes the code using the AsyncFunction^.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet engine="browser" sandbox="javascript" editor="basic">### Fetch
  prefs: []
  type: TYPE_NORMAL
- en: Executes the code using the Fetch API^.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet engine="browser" sandbox="fetch" editor="basic">### SQLite
  prefs: []
  type: TYPE_NORMAL
- en: Executes the code using the SQLite 3.44 WASI runtime (2.1 MB).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet engine="wasi" sandbox="sqlite" editor="basic" template="employees.sql">##
    Advanced features
  prefs: []
  type: TYPE_NORMAL
- en: Because the WASI runtime plugs into the existing architecture, WASI-powered
    code snippets support advanced Codapi features such as templates or code cells.
  prefs: []
  type: TYPE_NORMAL
- en: Templates ^(allow you to hide some code behind the scenes and show only the
    relevant part. For example, in the SQLite example above, the `employees` table
    is created as part of the template, so the snippet can take it for granted:)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet engine="wasi" sandbox="sqlite" editor="basic" template="employees.sql">Code
    cells ^(allow you to make code snippets depend on each other. For example, the
    first snippet defines the `wrap` function, while the second snippet uses it:)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet id="cell-1" engine="wasi" sandbox="python" editor="basic">[PRE11]
  prefs: []
  type: TYPE_NORMAL
- en: <codapi-snippet id="cell-2" engine="wasi" sandbox="python" editor="basic" depends-on="cell-1">##
    Usage
  prefs: []
  type: TYPE_NORMAL
- en: 'To use native browser playgrounds (e.g. JavaScript or Fetch), include the `snippet.js`
    script and add the `codapi-snippet` element next to the static code example. Use
    the `browser` engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To use WASI-powered playgrounds (e.g. Python or SQLite), include two additional
    scripts and use the `wasi` engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To switch from in-browser to server-side playgrounds (which can run virtually
    any software), remove the `engine` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: See the documentation ^(for details.)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WASI-powered sandboxes allow code snippets to run completely in-browser, with
    no server involved. They may take some time and traffic to initialize the runtime,
    but after that they run almost instantly.
  prefs: []
  type: TYPE_NORMAL
- en: As implemented in Codapi, they fit nicely into the overall architecture, providing
    access to features like templates and code cells. You can also easily switch from
    a browser-side to a server-side execution model.
  prefs: []
  type: TYPE_NORMAL
- en: Give them a try!
  prefs: []
  type: TYPE_NORMAL
- en: '[Playgrounds](https://github.com/nalgeon/codapi-js/blob/main/docs/browser-only.md)
    • [Snippet widget](https://github.com/nalgeon/codapi-js) • [About Codapi](https://codapi.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: '*[* **Subscribe***](/subscribe/) *to keep up with new posts.**</codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet>'
  prefs: []
  type: TYPE_NORMAL
