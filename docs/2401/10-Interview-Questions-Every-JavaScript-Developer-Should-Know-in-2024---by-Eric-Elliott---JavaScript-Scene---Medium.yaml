- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:31:03'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 10 Interview Questions Every JavaScript Developer Should Know in 2024 | by Eric
    Elliott | JavaScript Scene | Medium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-in-2024-c1044bcb0dfb](https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-in-2024-c1044bcb0dfb)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**10 Interview Questions Every JavaScript Developer Should Know in 2024**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The world of JavaScript has evolved significantly, and interview trends have
    changed a lot over the years. This guide features 10 essential questions that
    every JavaScript developer should know the answers to in 2024\. It covers a range
    of topics from closures to TDD, equipping you with the knowledge and confidence
    to tackle modern JavaScript challenges.
  prefs: []
  type: TYPE_NORMAL
- en: As a hiring manager, I use all of these questions in real technical interviews
    on a regular basis.
  prefs: []
  type: TYPE_NORMAL
- en: When engineers don’t know the answers, I don’t automatically reject them. Instead,
    I teach them the concepts and get a sense of how well they listen, and learn,
    and deal with the stressful situation of not knowing the answer to an interview
    question.
  prefs: []
  type: TYPE_NORMAL
- en: A good interviewer is looking for people who are eager to learn and advance
    their understanding and their career. If I’m hiring for a less experienced role,
    and the candidate fails all of these questions, but demonstrates a good aptitude
    for learning, they may still land the job!
  prefs: []
  type: TYPE_NORMAL
- en: 1\. What is a Closure?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A closure gives you access to an outer function’s scope from an inner function.
    When functions are nested, the inner functions have access to the variables declared
    in the outer function scope, even after the outer function has returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Closure variables are live references to the outer-scoped variable, not a copy.
    This means that if you change the outer-scoped variable, the change will be reflected
    in the closure variable, and vice versa, which means that other functions declared
    in the same outer function will have access to the changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Common use cases for closures include:'
  prefs: []
  type: TYPE_NORMAL
- en: Data privacy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Currying and partial applications (frequently used to improve function composition,
    e.g. to parameterize Express middleware or [React higher order components](/javascript-scene/why-every-react-developer-should-learn-function-composition-23f41d4db3b1))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing data with event handlers and callbacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Privacy**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Encapsulation is a vital feature of object oriented programming. It allows
    you to hide the implementation details of a class from the outside world. Closures
    in JavaScript allow you to declare private variables for objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Curried functions and partial applications:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 2\. What is a Pure Function?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pure functions are important in functional programming. Pure functions are
    predictable, which makes them easier to understand, debug, and test than impure
    functions. Pure functions follow two rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Deterministic** — given the same input, a pure function will always return
    the same output.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**No side-effects** — A side effect is any application state change that is
    observable outside the called function other than its return value.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Examples of Non-deterministic Functions**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Non-deterministic functions include functions that rely on:'
  prefs: []
  type: TYPE_NORMAL
- en: A random number generator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A global variable that can change state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A parameter that can change state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current system time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Examples of Side Effects**'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying any external variable or object property (e.g., a global variable,
    or a variable in the parent function scope chain).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging to the console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing to the screen, file, or network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throwing an error. Instead, the function should return a result indicating the
    error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triggering any external process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Redux, all reducers must be pure functions. If they are not, the state of
    the application will be unpredictable, and features like time-travel debugging
    will not work. Impurity in reducer functions may also cause bugs that are difficult
    to track down, including stale React component state.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. What is Function Composition?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Function composition is the process of combining two or more functions to produce
    a new function or perform some computation: `(f ∘ g)(x) = f(g(x))` (`f` composed
    with `g` of `x` equals `f` of `g` of `x`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[React developers can clean up large component trees with function composition](/javascript-scene/why-every-react-developer-should-learn-function-composition-23f41d4db3b1).
    Instead of nesting components, you can compose them together to create a new higher-order
    component that can enhance any component you pass to it with additional functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. What is Functional Programming?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Functional programming is a programming paradigm that uses pure functions as
    the primary units of composition. Composition is so important in software development
    that virtually all programming paradigms are named after the units of composition
    they use:'
  prefs: []
  type: TYPE_NORMAL
- en: Object-oriented programming uses objects as the unit of composition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Procedural programming uses procedures as the unit of composition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional programming uses functions as the unit of composition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional programming is a declarative programming paradigm, which means that
    programs are written in terms of what they do, rather than how they do it. This
    makes functional programs easier to understand, debug, and test than imperative
    programs. They also tend to be a lot more concise, which reduces code complexity
    and makes it easier to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other key aspects of functional programming include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Immutability** — immutable data structures are easier to reason about than
    mutable data structures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Higher-order functions** — functions that take other functions as arguments
    or return functions as their result.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avoiding shared mutable state** — shared mutable state makes programs difficult
    to understand, debug, and test. It also makes it difficult to reason about the
    correctness of a program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since pure functions are easy to test, functional programming also tends to
    lead to better test coverage and fewer bugs.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. What is a Promise?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Promise in JavaScript is an object representing the eventual completion or
    failure of an asynchronous operation. It acts as a placeholder for a value that
    is initially unknown, typically because the computation of its value is not yet
    complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'Key Characteristics of Promises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stateful:** A Promise is in one of three states:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pending:** Initial state, neither fulfilled nor rejected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fulfilled:** The operation completed successfully.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rejected:** The operation failed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Immutable:** Once a Promise is fulfilled or rejected, its state cannot change.
    It becomes immutable, permanently holding its result. This makes Promises reliable
    in asynchronous flow control.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chaining:** Promises can be chained, meaning the output of one Promise can
    be used as input for another. This is done using `.then()` for success or `.catch()`
    for handling failures, allowing for elegant and readable sequential asynchronous
    operations. Chaining is the async equivalent of function composition.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In JavaScript, you can treat promises and promise returning functions as if
    they are synchronous, using the async/await syntax. This makes asynchronous code
    much easier to read and reason about.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 6\. What is TypeScript?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TypeScript is a superset of JavaScript, developed and maintained by Microsoft.
    It has grown significantly in popularity in recent years, and chances are good
    that if you are a JavaScript engineer, you will eventually need to use TypeScript.
    It adds static typing to JavaScript, which is a dynamically typed language. Static
    typing helps developers catch errors early in the development process, improving
    code quality and maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: '**Key Features of TypeScript:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Static Typing:** Define types for your variables and function parameters
    to ensure consistency throughout your code.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enhanced IDE Support:** Integrated Development Environments (IDEs) can provide
    better autocompletion, navigation, and refactoring, making the development process
    more efficient.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compilation:** TypeScript code is transpiled into JavaScript, making it compatible
    with any browser or JavaScript environment. During this process, type errors are
    caught, making the code more robust.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Interfaces:** Interfaces allow you to specify abstract contracts that objects
    and functions must satisfy.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compatibility with JavaScript:** TypeScript is highly compatible with existing
    JavaScript code. JavaScript code can be gradually migrated to TypeScript, making
    the transition smooth for existing projects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The best defenses against bugs are code review, TDD, and lint tools such as
    ESLint. TypeScript is not a substitute for these practices, because type correctness
    does not guarantee program correctness. TypeScript does occasionally catch bugs
    even after all your other quality measures have been applied. But its main benefit
    is the improved developer experience it provides via IDE support.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. What is a Web Component?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web Components are a set of web platform APIs that allow you to create new custom,
    reusable, encapsulated HTML tags to use in web pages and web apps. They are built
    using open web technologies such as HTML, CSS, and JavaScript. They are part of
    the browser, and do not require external libraries or frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Web Components are particularly useful on large teams with many engineers who
    may be using different frameworks. They allow you to create reusable components
    that can be used in any framework, or no framework at all. For example, Adobe’s
    Spectrum design system is built using Web Components, and integrates smoothly
    with popular frameworks like React.
  prefs: []
  type: TYPE_NORMAL
- en: Web Components have existed for a long time, but have grown in popularity recently,
    especially in large organizations. They are supported by all major browsers, and
    are a W3C standard.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 8\. What is a React Hook?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hooks are functions that let you use state and other React features without
    writing a class. Hooks allow you to use state, context, refs, and component lifecycle
    events by calling functions instead of writing class methods. The additional flexibility
    of functions allows you to organize your code better, grouping related functionality
    together in a single hook call, and separating unrelated functionality by implementing
    it in separate function calls. Hooks offer a powerful and expressive way to compose
    logic inside a component.
  prefs: []
  type: TYPE_NORMAL
- en: Important React Hooks
  prefs: []
  type: TYPE_NORMAL
- en: '`useState` - allows you to add state to functional components. State variables
    are preserved between re-renders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useEffect` - lets you perform side effects in functional components. It combines
    the capabilities of `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount`
    into a single function call, reducing the required code and creating better code
    organization than class components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useContext` - allows you to consume context in function components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useRef` - allows you to create a mutable reference that persists for the lifetime
    of the component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom Hooks** — to encapsulate reusable logic. This makes it easy to share
    logic across different components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rules of Hooks:** Hooks must be used at the top level of React functions
    (not inside loops, conditions, or nested functions) and only in React function
    components or custom Hooks.'
  prefs: []
  type: TYPE_NORMAL
- en: Hooks solved some common pain points with class components, such as the need
    to bind methods in the constructor, and the need to split functionality into multiple
    lifecycle methods. They also make it easier to share logic between components,
    and to reuse stateful logic without changing your component hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. How Do you Create a Click Counter in React?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create a click counter in React by using the `useState` hook as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note that passing a function to `setCount` is best practice when you are deriving
    the new value from existing state, to ensure that you're always working with the
    latest state.
  prefs: []
  type: TYPE_NORMAL
- en: 10\. What is Test Driven Development (TDD)?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test Driven Development (TDD) is a software development approach where tests
    are written before the actual code. It revolves around a short, repetitive development
    cycle designed to ensure that the code meets specified requirements and is free
    of bugs. TDD can play a vital role in improving code quality, reducing bugs, and
    increasing developer productivity.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important measures of development team productivity is deployment
    frequency. One of the primary obstacles to continuous delivery is the fear of
    change. TDD helps to reduce this fear by ensuring that the code is always in a
    deployable state. This makes it easier to deploy new features and bug fixes, which
    in turn increases deployment frequency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Testing first has many benefits over testing after:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Better Code Coverage:** Tests are more likely to cover all edge cases when
    they are written first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improved API Design:** Tests force you to think about the API design before
    you write the code, which helps avoid leaking implementation details into the
    API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fewer Bugs:** Testing first helps you catch bugs earlier in the development
    process, when they are easier to fix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Better Code Quality:** Testing first forces you to write modular, loosely
    coupled code, which is easier to maintain and reuse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final point is my favorite feature of TDD, and it taught me most of what
    I know about writing modular, cleanly architected code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Key Steps in TDD:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Write a Test:** This test will fail initially, as the corresponding functionality
    does not yet exist.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Write the Implementation:** Just enough to make the test pass.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Refactor with Confidence:** Once the test passes, the code can be refactored
    with confidence. Refactoring is the process of restructuring existing code without
    changing its external behavior. Its purpose is to clean up the code, improve readability,
    and reduce complexity. With the test in place, if you make a mistake, you will
    be alerted to it immediately by the test failure.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Repeat:** The cycle repeats for each functional requirement, gradually building
    up the software while ensuring that all tests continue to pass.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Challenges**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Learning Curve:** TDD is a skill and discipline that can take considerable
    time to develop. After 6 months of TDD, you may still feel like TDD is difficult
    and gets in the way of productivity. However, after 2 years with TDD, you will
    likely find that it has become second nature, and that you are more productive
    than ever before.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time-Consuming:** Writing tests for every small functionality can feel time-consuming
    initially, though it usually pays off in the long term with reduced bugs and easier
    maintenance. I often tell people, “if you think you don’t have time for TDD, you
    *really* don’t have time to skip TDD.”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Preparing yourself to answer these questions in an interview setting will certainly
    help you stand out from the crowd. It will help you become a better JavaScript
    developer, and that will help you thrive in your new role.
  prefs: []
  type: TYPE_NORMAL
- en: '**Next Steps**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The fastest way to level up your career is 1:1 mentorship. With that in mind,
    I cofounded a platform that pairs engineers and engineering leaders with senior
    mentors who will meet with you via video every week. Topics include *JavaScript,
    TypeScript, React, TDD,* [*AI Driven Development*](/javascript-scene/the-art-of-effortless-programming-3e1860abe1d3)*,
    and Engineering Leadership.* Join today at [DevAnywhere.io](https://devanywhere.io).
  prefs: []
  type: TYPE_NORMAL
- en: Prefer to learn about topics like functional programming and JavaScript on your
    own? Check out [EricElliottJS.com](https://ericelliottjs.com) or purchase my book,
    Composing Software in [ebook](https://leanpub.com/composingsoftware) or [print](https://amzn.to/3H2xqsQ).
  prefs: []
  type: TYPE_NORMAL
