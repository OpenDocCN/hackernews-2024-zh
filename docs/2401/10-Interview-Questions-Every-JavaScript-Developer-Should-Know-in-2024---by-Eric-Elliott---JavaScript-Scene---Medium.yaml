- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:31:03'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 10 Interview Questions Every JavaScript Developer Should Know in 2024 | by Eric
    Elliott | JavaScript Scene | Medium
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-in-2024-c1044bcb0dfb](https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-in-2024-c1044bcb0dfb)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**10 Interview Questions Every JavaScript Developer Should Know in 2024**'
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The world of JavaScript has evolved significantly, and interview trends have
    changed a lot over the years. This guide features 10 essential questions that
    every JavaScript developer should know the answers to in 2024\. It covers a range
    of topics from closures to TDD, equipping you with the knowledge and confidence
    to tackle modern JavaScript challenges.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: As a hiring manager, I use all of these questions in real technical interviews
    on a regular basis.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: When engineers don’t know the answers, I don’t automatically reject them. Instead,
    I teach them the concepts and get a sense of how well they listen, and learn,
    and deal with the stressful situation of not knowing the answer to an interview
    question.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: A good interviewer is looking for people who are eager to learn and advance
    their understanding and their career. If I’m hiring for a less experienced role,
    and the candidate fails all of these questions, but demonstrates a good aptitude
    for learning, they may still land the job!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 1\. What is a Closure?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A closure gives you access to an outer function’s scope from an inner function.
    When functions are nested, the inner functions have access to the variables declared
    in the outer function scope, even after the outer function has returned:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Closure variables are live references to the outer-scoped variable, not a copy.
    This means that if you change the outer-scoped variable, the change will be reflected
    in the closure variable, and vice versa, which means that other functions declared
    in the same outer function will have access to the changes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Common use cases for closures include:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Data privacy
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Currying and partial applications (frequently used to improve function composition,
    e.g. to parameterize Express middleware or [React higher order components](/javascript-scene/why-every-react-developer-should-learn-function-composition-23f41d4db3b1))
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing data with event handlers and callbacks
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Privacy**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Encapsulation is a vital feature of object oriented programming. It allows
    you to hide the implementation details of a class from the outside world. Closures
    in JavaScript allow you to declare private variables for objects:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Curried functions and partial applications:**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 2\. What is a Pure Function?
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pure functions are important in functional programming. Pure functions are
    predictable, which makes them easier to understand, debug, and test than impure
    functions. Pure functions follow two rules:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '**Deterministic** — given the same input, a pure function will always return
    the same output.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**确定性** — 给定相同的输入，纯函数将始终返回相同的输出。'
- en: '**No side-effects** — A side effect is any application state change that is
    observable outside the called function other than its return value.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**无副作用** — 副作用是指除了返回值以外，在被调用函数之外可观察到的任何应用程序状态更改。'
- en: '**Examples of Non-deterministic Functions**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**非确定性函数的例子**'
- en: 'Non-deterministic functions include functions that rely on:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 非确定性函数包括依赖于的函数：
- en: A random number generator.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个随机数生成器。
- en: A global variable that can change state.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可以改变状态的全局变量。
- en: A parameter that can change state.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以改变状态的参数。
- en: The current system time.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前系统时间。
- en: '**Examples of Side Effects**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**副作用的例子**'
- en: Modifying any external variable or object property (e.g., a global variable,
    or a variable in the parent function scope chain).
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改任何外部变量或对象属性（例如全局变量，或者父函数作用域链中的变量）。
- en: Logging to the console.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录到控制台。
- en: Writing to the screen, file, or network.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入到屏幕、文件或网络。
- en: Throwing an error. Instead, the function should return a result indicating the
    error.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抛出错误。相反，函数应返回指示错误的结果。
- en: Triggering any external process.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发任何外部进程。
- en: In Redux, all reducers must be pure functions. If they are not, the state of
    the application will be unpredictable, and features like time-travel debugging
    will not work. Impurity in reducer functions may also cause bugs that are difficult
    to track down, including stale React component state.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Redux 中，所有的 reducer 必须是纯函数。如果不是，应用程序的状态将是不可预测的，像时间旅行调试之类的功能也将无法工作。reducer
    函数中的不纯性也可能导致难以追踪的错误，包括陈旧的 React 组件状态。
- en: 3\. What is Function Composition?
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 什么是函数组合？
- en: 'Function composition is the process of combining two or more functions to produce
    a new function or perform some computation: `(f ∘ g)(x) = f(g(x))` (`f` composed
    with `g` of `x` equals `f` of `g` of `x`).'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 函数组合是将两个或多个函数组合成一个新函数或执行某些计算的过程：`(f ∘ g)(x) = f(g(x))`（`f` 组合 `g` 的 `x` 等于 `f`
    的 `g` 的 `x`）。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[React developers can clean up large component trees with function composition](/javascript-scene/why-every-react-developer-should-learn-function-composition-23f41d4db3b1).
    Instead of nesting components, you can compose them together to create a new higher-order
    component that can enhance any component you pass to it with additional functionality.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[React 开发人员可以通过函数组合清理大型组件树](/javascript-scene/why-every-react-developer-should-learn-function-composition-23f41d4db3b1)。你可以将组件组合在一起，而不是嵌套它们，以创建一个新的高阶组件，可以通过传递给它的任何组件增强附加功能。'
- en: 4\. What is Functional Programming?
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 什么是函数式编程？
- en: 'Functional programming is a programming paradigm that uses pure functions as
    the primary units of composition. Composition is so important in software development
    that virtually all programming paradigms are named after the units of composition
    they use:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程是一种以纯函数作为主要组合单位的编程范式。组合在软件开发中非常重要，以至于几乎所有的编程范式都是根据它们使用的组合单位命名的：
- en: Object-oriented programming uses objects as the unit of composition.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向对象编程使用对象作为组合的单位。
- en: Procedural programming uses procedures as the unit of composition.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过程式编程使用过程作为组合的单位。
- en: Functional programming uses functions as the unit of composition.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数式编程使用函数作为组合的单位。
- en: Functional programming is a declarative programming paradigm, which means that
    programs are written in terms of what they do, rather than how they do it. This
    makes functional programs easier to understand, debug, and test than imperative
    programs. They also tend to be a lot more concise, which reduces code complexity
    and makes it easier to maintain.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程是一种声明式的编程范式，这意味着程序是根据它们所做的事情编写的，而不是它们是如何做到的。这使得函数式程序比命令式程序更容易理解、调试和测试。它们也往往更加简洁，这减少了代码复杂性，并使其更易于维护。
- en: 'Other key aspects of functional programming include:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程的其他关键方面包括：
- en: '**Immutability** — immutable data structures are easier to reason about than
    mutable data structures.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不可变性** — 不可变数据结构比可变数据结构更容易理解。'
- en: '**Higher-order functions** — functions that take other functions as arguments
    or return functions as their result.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高阶函数** — 接受其他函数作为参数或返回函数作为其结果。'
- en: '**Avoiding shared mutable state** — shared mutable state makes programs difficult
    to understand, debug, and test. It also makes it difficult to reason about the
    correctness of a program.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免共享可变状态** — 共享可变状态使得程序难以理解、调试和测试。它也使得很难推断程序的正确性。'
- en: Since pure functions are easy to test, functional programming also tends to
    lead to better test coverage and fewer bugs.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于纯函数易于测试，函数式编程还倾向于产生更好的测试覆盖率和更少的错误。
- en: 5\. What is a Promise?
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 什么是 Promise？
- en: A Promise in JavaScript is an object representing the eventual completion or
    failure of an asynchronous operation. It acts as a placeholder for a value that
    is initially unknown, typically because the computation of its value is not yet
    complete.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的 Promise 是一个表示异步操作的最终完成或失败的对象。它充当一个值的占位符，最初是未知的，通常是因为其值的计算尚未完成。
- en: 'Key Characteristics of Promises:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Promise 的关键特性：
- en: '**Stateful:** A Promise is in one of three states:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**有状态：** Promise 处于以下三种状态之一：'
- en: '**Pending:** Initial state, neither fulfilled nor rejected.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**待定：** 初始状态，既不被完成也不被拒绝。'
- en: '**Fulfilled:** The operation completed successfully.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已完成：** 操作成功完成。'
- en: '**Rejected:** The operation failed.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已拒绝：** 操作失败。'
- en: '**Immutable:** Once a Promise is fulfilled or rejected, its state cannot change.
    It becomes immutable, permanently holding its result. This makes Promises reliable
    in asynchronous flow control.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**不可变：** 一旦 Promise 被完成或拒绝，其状态就不能改变。它变得不可变，永久地保存其结果。这使得 Promise 在异步流程控制中可靠。'
- en: '**Chaining:** Promises can be chained, meaning the output of one Promise can
    be used as input for another. This is done using `.then()` for success or `.catch()`
    for handling failures, allowing for elegant and readable sequential asynchronous
    operations. Chaining is the async equivalent of function composition.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**链式调用：** Promise 可以链式调用，意味着一个 Promise 的输出可以作为另一个 Promise 的输入。这是通过 `.then()`
    来处理成功或 `.catch()` 来处理失败完成的，允许进行优雅且可读的顺序异步操作。链式调用是函数组合的异步等价。'
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In JavaScript, you can treat promises and promise returning functions as if
    they are synchronous, using the async/await syntax. This makes asynchronous code
    much easier to read and reason about.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，您可以将 promises 和返回 promise 的函数视为同步使用，使用 async/await 语法。这使得异步代码更易于阅读和理解。
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 6\. What is TypeScript?
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6\. 什么是 TypeScript？
- en: TypeScript is a superset of JavaScript, developed and maintained by Microsoft.
    It has grown significantly in popularity in recent years, and chances are good
    that if you are a JavaScript engineer, you will eventually need to use TypeScript.
    It adds static typing to JavaScript, which is a dynamically typed language. Static
    typing helps developers catch errors early in the development process, improving
    code quality and maintainability.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 是 JavaScript 的一个超集，由 Microsoft 开发和维护。它在近年来已经显著增长，并且有可能如果你是一名 JavaScript
    工程师，您最终将需要使用 TypeScript。它为 JavaScript 添加了静态类型，这是一种动态类型语言。静态类型帮助开发人员在开发过程的早期捕获错误，提高代码质量和可维护性。
- en: '**Key Features of TypeScript:**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**TypeScript 的主要特性：**'
- en: '**Static Typing:** Define types for your variables and function parameters
    to ensure consistency throughout your code.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**静态类型：** 为您的变量和函数参数定义类型，以确保代码的一致性。'
- en: '**Enhanced IDE Support:** Integrated Development Environments (IDEs) can provide
    better autocompletion, navigation, and refactoring, making the development process
    more efficient.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**增强的 IDE 支持：** 集成开发环境（IDE）可以提供更好的自动完成、导航和重构功能，使开发过程更加高效。'
- en: '**Compilation:** TypeScript code is transpiled into JavaScript, making it compatible
    with any browser or JavaScript environment. During this process, type errors are
    caught, making the code more robust.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**编译：** TypeScript 代码被转译为 JavaScript，使其与任何浏览器或 JavaScript 环境兼容。在此过程中，捕获类型错误，使代码更加健壮。'
- en: '**Interfaces:** Interfaces allow you to specify abstract contracts that objects
    and functions must satisfy.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**接口：** 接口允许您指定对象和函数必须满足的抽象约定。'
- en: '**Compatibility with JavaScript:** TypeScript is highly compatible with existing
    JavaScript code. JavaScript code can be gradually migrated to TypeScript, making
    the transition smooth for existing projects.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**与 JavaScript 的兼容性：** TypeScript 与现有的 JavaScript 代码高度兼容。JavaScript 代码可以逐渐迁移到
    TypeScript，使得对现有项目的过渡更加平稳。'
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The best defenses against bugs are code review, TDD, and lint tools such as
    ESLint. TypeScript is not a substitute for these practices, because type correctness
    does not guarantee program correctness. TypeScript does occasionally catch bugs
    even after all your other quality measures have been applied. But its main benefit
    is the improved developer experience it provides via IDE support.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 防止错误的最佳方法是代码审查、TDD 和诸如 ESLint 等的 lint 工具。TypeScript 不是这些实践的替代品，因为类型正确性不能保证程序正确性。即使在应用了所有其他质量措施之后，TypeScript
    有时也会捕获错误。但它的主要好处是通过 IDE 支持提供的改进的开发人员体验。
- en: 7\. What is a Web Component?
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. 什么是 Web 组件？
- en: Web Components are a set of web platform APIs that allow you to create new custom,
    reusable, encapsulated HTML tags to use in web pages and web apps. They are built
    using open web technologies such as HTML, CSS, and JavaScript. They are part of
    the browser, and do not require external libraries or frameworks.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Web 组件是一组 Web 平台 API，允许您创建新的自定义、可重用、封装的 HTML 标签，用于网页和 Web 应用程序中。它们使用诸如 HTML、CSS
    和 JavaScript 之类的开放 Web 技术构建。它们是浏览器的一部分，不需要外部库或框架。
- en: Web Components are particularly useful on large teams with many engineers who
    may be using different frameworks. They allow you to create reusable components
    that can be used in any framework, or no framework at all. For example, Adobe’s
    Spectrum design system is built using Web Components, and integrates smoothly
    with popular frameworks like React.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Web 组件在具有许多可能使用不同框架的工程师的大型团队中特别有用。它们允许您创建可在任何框架中或完全无框架中使用的可重用组件。例如，Adobe 的 Spectrum
    设计系统使用 Web 组件构建，并与流行的框架如 React 无缝集成。
- en: Web Components have existed for a long time, but have grown in popularity recently,
    especially in large organizations. They are supported by all major browsers, and
    are a W3C standard.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Web 组件已经存在很长时间，但最近在大型组织中变得越来越受欢迎。它们受到所有主要浏览器的支持，并且是 W3C 标准。
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 8\. What is a React Hook?
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8\. 什么是 React Hook？
- en: Hooks are functions that let you use state and other React features without
    writing a class. Hooks allow you to use state, context, refs, and component lifecycle
    events by calling functions instead of writing class methods. The additional flexibility
    of functions allows you to organize your code better, grouping related functionality
    together in a single hook call, and separating unrelated functionality by implementing
    it in separate function calls. Hooks offer a powerful and expressive way to compose
    logic inside a component.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Hooks 是一种让您在不编写类的情况下使用状态和其他 React 功能的函数。通过调用函数而不是编写类方法，Hooks 允许您使用状态、上下文、引用和组件生命周期事件。函数的额外灵活性使您能够更好地组织代码，将相关功能组合在单个钩子调用中，并通过在单独的函数调用中实现将无关的功能分离。Hooks
    提供了一种强大而富有表现力的方式来在组件内部组合逻辑。
- en: Important React Hooks
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的 React Hooks
- en: '`useState` - allows you to add state to functional components. State variables
    are preserved between re-renders.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useState` - 允许您向函数组件添加状态。状态变量在重新渲染之间保留。'
- en: '`useEffect` - lets you perform side effects in functional components. It combines
    the capabilities of `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount`
    into a single function call, reducing the required code and creating better code
    organization than class components.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useEffect` - 允许您在函数组件中执行副作用。它将 `componentDidMount`、`componentDidUpdate` 和
    `componentWillUnmount` 的功能组合成单个函数调用，减少了所需的代码，并创建了比类组件更好的代码组织。'
- en: '`useContext` - allows you to consume context in function components.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useContext` - 允许您在函数组件中消耗上下文。'
- en: '`useRef` - allows you to create a mutable reference that persists for the lifetime
    of the component.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useRef` - 允许您创建一个在组件生命周期内持续存在的可变引用。'
- en: '**Custom Hooks** — to encapsulate reusable logic. This makes it easy to share
    logic across different components.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义 Hooks** — 用于封装可重用的逻辑。这使得跨不同组件共享逻辑变得容易。'
- en: '**Rules of Hooks:** Hooks must be used at the top level of React functions
    (not inside loops, conditions, or nested functions) and only in React function
    components or custom Hooks.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hooks 规则：** Hooks 必须在 React 函数的顶层使用（不能在循环、条件或嵌套函数内部使用），且仅限于 React 函数组件或自定义
    Hooks 中使用。'
- en: Hooks solved some common pain points with class components, such as the need
    to bind methods in the constructor, and the need to split functionality into multiple
    lifecycle methods. They also make it easier to share logic between components,
    and to reuse stateful logic without changing your component hierarchy.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 9\. How Do you Create a Click Counter in React?
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create a click counter in React by using the `useState` hook as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that passing a function to `setCount` is best practice when you are deriving
    the new value from existing state, to ensure that you're always working with the
    latest state.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 10\. What is Test Driven Development (TDD)?
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test Driven Development (TDD) is a software development approach where tests
    are written before the actual code. It revolves around a short, repetitive development
    cycle designed to ensure that the code meets specified requirements and is free
    of bugs. TDD can play a vital role in improving code quality, reducing bugs, and
    increasing developer productivity.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important measures of development team productivity is deployment
    frequency. One of the primary obstacles to continuous delivery is the fear of
    change. TDD helps to reduce this fear by ensuring that the code is always in a
    deployable state. This makes it easier to deploy new features and bug fixes, which
    in turn increases deployment frequency.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Testing first has many benefits over testing after:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '**Better Code Coverage:** Tests are more likely to cover all edge cases when
    they are written first.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improved API Design:** Tests force you to think about the API design before
    you write the code, which helps avoid leaking implementation details into the
    API.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fewer Bugs:** Testing first helps you catch bugs earlier in the development
    process, when they are easier to fix.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Better Code Quality:** Testing first forces you to write modular, loosely
    coupled code, which is easier to maintain and reuse.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final point is my favorite feature of TDD, and it taught me most of what
    I know about writing modular, cleanly architected code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Key Steps in TDD:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '**Write a Test:** This test will fail initially, as the corresponding functionality
    does not yet exist.'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Write the Implementation:** Just enough to make the test pass.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Refactor with Confidence:** Once the test passes, the code can be refactored
    with confidence. Refactoring is the process of restructuring existing code without
    changing its external behavior. Its purpose is to clean up the code, improve readability,
    and reduce complexity. With the test in place, if you make a mistake, you will
    be alerted to it immediately by the test failure.'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Repeat:** The cycle repeats for each functional requirement, gradually building
    up the software while ensuring that all tests continue to pass.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '**Challenges**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '**Learning Curve:** TDD is a skill and discipline that can take considerable
    time to develop. After 6 months of TDD, you may still feel like TDD is difficult
    and gets in the way of productivity. However, after 2 years with TDD, you will
    likely find that it has become second nature, and that you are more productive
    than ever before.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习曲线：** TDD 是一种需要花费相当时间来发展的技能和纪律。进行了 6 个月的 TDD 后，你可能仍然觉得 TDD 很困难，并且影响了生产力。然而，进行了
    2 年的 TDD 后，你可能会发现它已经变得轻车熟路，并且比以往任何时候都更加高效。'
- en: '**Time-Consuming:** Writing tests for every small functionality can feel time-consuming
    initially, though it usually pays off in the long term with reduced bugs and easier
    maintenance. I often tell people, “if you think you don’t have time for TDD, you
    *really* don’t have time to skip TDD.”'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**耗时：** 为每个小功能编写测试最初可能会感到耗时，尽管通常在长期内会以减少错误和更容易的维护来得到回报。我经常告诉人们，“如果你认为自己没有时间做
    TDD，那么你*真的*没有时间跳过 TDD。”'
- en: Conclusion
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Preparing yourself to answer these questions in an interview setting will certainly
    help you stand out from the crowd. It will help you become a better JavaScript
    developer, and that will help you thrive in your new role.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好在面试环境中回答这些问题，肯定会帮助你脱颖而出。它会帮助你成为一名更优秀的 JavaScript 开发者，这将有助于你在新角色中蓬勃发展。
- en: '**Next Steps**'
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**接下来的步骤**'
- en: The fastest way to level up your career is 1:1 mentorship. With that in mind,
    I cofounded a platform that pairs engineers and engineering leaders with senior
    mentors who will meet with you via video every week. Topics include *JavaScript,
    TypeScript, React, TDD,* [*AI Driven Development*](/javascript-scene/the-art-of-effortless-programming-3e1860abe1d3)*,
    and Engineering Leadership.* Join today at [DevAnywhere.io](https://devanywhere.io).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 提升职业生涯的最快方式是一对一的导师指导。考虑到这一点，我共同创建了一个平台，该平台将工程师和工程领导与资深导师配对，他们将每周通过视频与您会面。主题包括*JavaScript，TypeScript，React，TDD，*
    [*AI 驱动开发*](/javascript-scene/the-art-of-effortless-programming-3e1860abe1d3)*和工程领导力*。立即加入
    [DevAnywhere.io](https://devanywhere.io)。
- en: Prefer to learn about topics like functional programming and JavaScript on your
    own? Check out [EricElliottJS.com](https://ericelliottjs.com) or purchase my book,
    Composing Software in [ebook](https://leanpub.com/composingsoftware) or [print](https://amzn.to/3H2xqsQ).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 更愿意自学有关函数式编程和 JavaScript 等主题吗？请查看 [EricElliottJS.com](https://ericelliottjs.com)
    或购买我的书，[电子书](https://leanpub.com/composingsoftware) 或 [纸质书](https://amzn.to/3H2xqsQ)。
