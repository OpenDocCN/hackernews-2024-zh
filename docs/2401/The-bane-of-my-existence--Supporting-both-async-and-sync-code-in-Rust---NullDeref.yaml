- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:55:02'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:55:02
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'The bane of my existence: Supporting both async and sync code in Rust | NullDeref'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我的存在的噩梦：在Rust中支持异步和同步代码 | NullDeref
- en: 来源：[https://nullderef.com/blog/rust-async-sync/](https://nullderef.com/blog/rust-async-sync/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://nullderef.com/blog/rust-async-sync/](https://nullderef.com/blog/rust-async-sync/)
- en: '[The third attempt](https://github.com/ramsayleung/rspotify/pull/129) is based
    on a crate called [`maybe_async`](https://crates.io/crates/maybe_async) . I remember
    foolishly thinking it was the perfect solution back when I discovered it.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[第三次尝试](https://github.com/ramsayleung/rspotify/pull/129)基于一个叫做[`maybe_async`](https://crates.io/crates/maybe_async)的crate。我记得当我发现它时，愚蠢地认为它是完美的解决方案。'
- en: 'Anyway, the idea is that with this crate you can automatically remove the `async`
    and `.await` occurrences in your code with a procedural macro, essentially automating
    the copy-pasting approach. For example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，这个crate的想法是，在你的代码中自动删除`async`和`.await`的出现，使用过程宏实现，基本上是自动化的复制-粘贴方法。例如：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Generates the following code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 生成以下代码：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can configure whether you want asynchronous or blocking code by toggling
    the `maybe_async/is_sync` feature when compiling the crate. The macro works for
    functions, traits and `impl` blocks. If one conversion isn’t as easy as removing
    `async` and `.await`, you can specify custom implementations with the `async_impl`
    and `sync_impl` procedural macros. It does this wonderfully, and we’ve already
    been using it for Rspotify for a while now.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译创建时，你可以通过切换`maybe_async/is_sync`功能来配置你想要异步还是阻塞的代码。这个宏适用于函数、特性和`impl`块。如果一个转换不像删除`async`和`.await`那么简单，你可以使用`async_impl`和`sync_impl`过程宏来指定自定义实现。它做得非常好，我们已经使用它一段时间了。
- en: In fact, it worked so well that I made Rspotify *http-client agnostic*, which
    is even more flexible than being *async/sync agnostic*. This allows us to support
    multiple HTTP clients like [`reqwest`](https://crates.io/crates/reqwest) and [`ureq`](https://crates.io/crates/ureq)
    , independently of whether the client is asynchronous or synchronous.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，它的效果很好，我使Rspotify成为了*http客户端不可知*，这比*异步/同步不可知*更灵活。这使我们能够独立地支持多个HTTP客户端，像[`reqwest`](https://crates.io/crates/reqwest)和[`ureq`](https://crates.io/crates/ureq)，无论客户端是异步还是同步。
- en: 'Being *http-client agnostic* is not that hard to implement if you have `maybe_async`
    around. You just need to define a trait for the [HTTP client](https://github.com/ramsayleung/rspotify/blob/89b37219a2230cdcf08c4cfd2ebe46d64902f03d/rspotify-http/src/common.rs#L46),
    and then implement it for each of the clients you want to support:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 保持*http客户端的不可知性*并不难以实现，如果你有`maybe_async`的话。你只需为[HTTP客户端](https://github.com/ramsayleung/rspotify/blob/89b37219a2230cdcf08c4cfd2ebe46d64902f03d/rspotify-http/src/common.rs#L46)定义一个特性，然后为你想要支持的每个客户端实现它：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Then, we could extend it so that whichever client they want to use can be enabled
    with feature flags in their `Cargo.toml`. For example, if `client-ureq` is enabled,
    since `ureq` is synchronous, it would enable `maybe_async/is_sync`. In turn, this
    would remove the `async`/`.await` and the `#[async_impl]` blocks, and the Rspotify
    client would use `ureq`'s implementation internally.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以扩展它，使用户可以通过在他们的`Cargo.toml`中启用特性标志来使用任何他们想要的客户端。例如，如果启用了`client-ureq`，因为`ureq`是同步的，它会启用`maybe_async/is_sync`。这会移除`async`/`.await`和`#[async_impl]`块，并且Rspotify客户端会在内部使用`ureq`的实现。
- en: 'This solution has none of the downsides I listed in previous attempts:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '这个解决方案没有我在之前尝试中列出的任何缺点:'
- en: No code duplication at all
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何代码重复
- en: No overhead neither at runtime nor at compile time. If the user wants a blocking
    client, they can use `ureq`, which doesn’t pull `tokio` and friends
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 既没有运行时开销，也没有编译时开销。如果用户想要一个阻塞客户端，他们可以使用`ureq`，它不会拉取`tokio`和其它依赖
- en: Quite easy to understand for the user; just configure a flag in you `Cargo.toml`
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对用户来说很容易理解；只需在你的`Cargo.toml`中配置一个标志
- en: However, stop reading for a couple of minutes and try to figure out why you
    shouldn’t do this. In fact, I’ll give you 9 months, which is how long it took
    me to do so…​
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，停下来读一会儿，试着想想为什么你不应该这样做。事实上，我给你9个月的时间，就是我想明白这点的时间……
- en: The problem[#](#_the_problem)
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题[#](#_the_problem)
- en: 'Well, the thing is that features in Rust must be **additive**: “enabling a
    feature should not disable functionality, and it should usually be safe to enable
    any combination of features”. Cargo may merge features of a crate when it’s duplicated
    in the dependency tree in order to avoid compiling the same crate multiple times.
    [The reference explains this quite well, if you want more details](https://doc.rust-lang.org/cargo/reference/features.html#feature-unification).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，问题是Rust中的特性必须是**可加的**：“启用一个特性不应该禁用功能，并且通常可以安全地启用任意组合的特性”。Cargo在重复出现在依赖树中的crate时可能会合并crate的特性，以避免多次编译同一个crate。[如果你想了解更多细节，可以参考](https://doc.rust-lang.org/cargo/reference/features.html#feature-unification)。
- en: This optimization means that mutually exclusive features may break a dependency
    tree. In our case, `maybe_async/is_sync` is a *toggle* feature enabled by `client-ureq`.
    So if you try to compile it with `client-reqwest` also enabled, it will fail because
    `maybe_async` will be configured to generate synchronous function signatures instead.
    It’s impossible to have a crate that depends on both sync and async Rspotify either
    directly or indirectly, and the whole concept of `maybe_async` is currently wrong
    according to the Cargo reference.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个优化意味着互斥的特性可能会破坏依赖树。在我们的情况下，`maybe_async/is_sync`是由`client-ureq`启用的*切换*特性。所以如果你尝试编译时同时启用了`client-reqwest`，它将会失败，因为`maybe_async`将被配置为生成同步函数签名。根据Cargo参考，直接或间接地依赖于同时依赖于sync和async
    Rspotify的crate是不可能的，而`maybe_async`的整个概念目前都是错误的。
- en: The feature resolver v2[#](#_the_feature_resolver_v2)
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特性解析器v2[#](#_the_feature_resolver_v2)
- en: 'A common misconception is that this is fixed by the “feature resolver v2”,
    which [the reference also explains quite well](https://doc.rust-lang.org/cargo/reference/features.html#feature-resolver-version-2).
    It has been enabled by default since the 2021 edition, but you can specify it
    inside your `Cargo.toml` in previous ones. This new version, among other things,
    avoids unifying features in some special cases, but not in ours:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的误解是这被“特性解析器v2”修复了，[参考也很好地解释了](https://doc.rust-lang.org/cargo/reference/features.html#feature-resolver-version-2)。它自2021版起默认启用，但你可以在之前的版本中在`Cargo.toml`中指定它。这个新版本，除其他外，在某些特殊情况下避免了合并特性，但在我们的情况下没有：
- en: Features enabled on platform-specific dependencies for targets not currently
    being built are ignored.
  id: totrans-26
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为当前未构建的目标启用的平台特定依赖项上的特性将被忽略。
- en: ''
  id: totrans-27
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-28
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Build-dependencies and proc-macros do not share features with normal dependencies.
  id: totrans-29
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建依赖和过程宏与普通依赖不共享功能。
- en: ''
  id: totrans-30
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Dev-dependencies do not activate features unless building a target that needs
    them (like tests or examples).
  id: totrans-32
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发依赖不会激活特性，除非构建需要它们的目标（例如测试或示例）。
- en: Just in case, I tried to reproduce this myself, and it did work as I expected.
    [This repository](https://github.com/marioortizmanero/resolver-v2-conflict) is
    an example of conflicting features, which breaks with any feature resolver.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以防万一，我尝试自己重现了这个问题，结果和我预期的一样。[这个存储库](https://github.com/marioortizmanero/resolver-v2-conflict)是冲突特性的一个例子，它会使任何特性解析器失败。
- en: Other fails[#](#_other_fails)
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他失败[#](#_other_fails)
- en: 'There were a few crates that also had this problem:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些crate也有这个问题：
- en: '[`arangors`](https://crates.io/crates/arangors) and [`aragog`](https://crates.io/crates/aragog)
    : wrappers for ArangoDB. Both use `maybe_async` to switch between async and sync
    (`arangors`''s author is the same person, in fact) [[5]](#arangors-error) [[6]](#aragog-error).'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`arangors`](https://crates.io/crates/arangors)和[`aragog`](https://crates.io/crates/aragog)：ArangoDB的包装器。两者都使用`maybe_async`在异步和同步之间切换（实际上，`arangors`的作者就是同一个人）[[5]](#arangors-error)
    [[6]](#aragog-error)。'
- en: '[`inkwell`](https://crates.io/crates/inkwell) : a wrapper for LLVM. It supports
    multiple versions of LLVM, which are not compatible with eachother [[7]](#inkwell-error).'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`inkwell`](https://crates.io/crates/inkwell)：LLVM的包装器。它支持多个版本的LLVM，这些版本彼此不兼容[[7]](#inkwell-error)。'
- en: '[`k8s-openapi`](https://crates.io/crates/k8s-openapi) : a wrapper for Kubernetes,
    with the same issue as `inkwell` [[8]](#k8s-error).'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`k8s-openapi`](https://crates.io/crates/k8s-openapi)：Kubernetes的包装器，与`inkwell`一样存在相同的问题[[8]](#k8s-error)。'
- en: Fixing `maybe_async`[#](#_fixing_maybe_async)
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修复`maybe_async`[#](#_fixing_maybe_async)
- en: 'Once the crate started to gain popularity, this issue was opened in `maybe_async`,
    which explains the situation and showcases a fix:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建开始流行起来，`maybe_async`中就会出现这个问题，它解释了情况并展示了一个解决方案：
- en: '`maybe_async` would now have two feature flags: `is_sync` and `is_async`. The
    crate would generate the functions in the same way, but with a `_sync` or `_async`
    suffix appended to the identifier so that they wouldn’t be conflicting. For example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`maybe_async` 现在将有两个功能标志：`is_sync` 和 `is_async`。crate 会以相同的方式生成函数，但是会在标识符后加上
    `_sync` 或 `_async` 后缀，以避免冲突。例如：'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Would now generate the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将生成以下代码：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: However, these suffixes introduce noise, so I wondered if it would be possible
    to do it in a more ergonomic way. I forked `maybe_async` and gave it a try, about
    which you can read more [in this series of comments](https://github.com/fMeow/maybe-async-rs/issues/6#issuecomment-880581551).
    In summary, it was too complicated, and I ultimately gave up.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些后缀引入了噪音，所以我想知道是否可能以更符合人体工程学的方式来做。我分叉了 `maybe_async` 并尝试了一下，关于这一点你可以阅读更多[在这系列评论中](https://github.com/fMeow/maybe-async-rs/issues/6#issuecomment-880581551)。总的来说，这太复杂了，我最终放弃了。
- en: The only way to fix this edge case would be to worsen the usability of Rspotify
    for everyone. But I’d argue that someone who depends on both async and sync is
    unlikely; we haven’t actually had anyone complaining yet. Unlike `reqwest`, `rspotify`
    is a “high level” library, so it’s hard to imagine a scenario where it appears
    more than once in a dependency tree in the first place.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 修复这种边缘情况的唯一方法是恶化 Rspotify 的可用性，但我认为同时依赖异步和同步的人不太可能；实际上我们还没有人抱怨过。与 `reqwest`
    不同，`rspotify` 是一个“高级”库，因此很难想象它在依赖树中出现超过一次的情况。
- en: Perhaps we could ask the Cargo devs for help?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 或许我们可以向 Cargo 的开发者寻求帮助？
- en: Official Support[#](#_official_support)
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 官方支持[#](#_official_support)
- en: 'Rspotify is far from being the first who has been through this problem, so
    it might be interesting to read previous discussions about it:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Rspotify 远非第一个遇到此问题的人，因此阅读以前关于此问题的讨论可能会很有趣：
- en: '[This now-closed RFC for the Rust compiler](https://github.com/rust-lang/rfcs/pull/2962)
    suggested adding the `oneof` configuration predicate (think `#[cfg(any(…​))]`
    and similars) to support exclusive features. This only makes it easier to have
    conflicting features for cases where there’s *no choice*, but features should
    still be strictly additive.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[这个现已关闭的 Rust 编译器的 RFC](https://github.com/rust-lang/rfcs/pull/2962) 建议添加 `oneof`
    配置谓词（类似 `#[cfg(any(…​))]` 等）以支持排他性功能。这仅仅是为了在存在*没有选择*的情况下更容易地出现冲突功能，但功能仍应严格是增加的。'
- en: The previous RFC started [some discussion](https://internals.rust-lang.org/t/pre-rfc-cargo-mutually-exclusive-features/13182/27)
    in the context of allowing exclusive features in Cargo itself, and although it
    has some interesting info, it didn’t go too far.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先前的 RFC 在允许 Cargo 本身具有排他功能的背景下 [引发了一些讨论](https://internals.rust-lang.org/t/pre-rfc-cargo-mutually-exclusive-features/13182/27)，尽管它提供了一些有趣的信息，但并没有取得太大进展。
- en: '[This issue in Cargo](https://github.com/rust-lang/cargo/issues/2980) explains
    a similar case with the Windows API. The discussion includes more examples and
    solution ideas, but none have made it to Cargo yet.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Cargo 中的这个问题](https://github.com/rust-lang/cargo/issues/2980) 解释了与 Windows
    API 类似的情况。讨论包括更多的示例和解决方案想法，但尚未在 Cargo 中实现。'
- en: '[Another issue in Cargo](https://github.com/rust-lang/cargo/issues/4803) asks
    for a way to test and build with combinations of flags easily. If features are
    strictly additive, then `cargo test --all-features` will cover everything. But
    in case it doesn’t, the user has to run the command with multiple combinations
    of feature flags, which is quite cumbersome. This is already possible unofficially
    thanks to [`cargo-hack`](https://github.com/taiki-e/cargo-hack).'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Cargo 中的另一个问题](https://github.com/rust-lang/cargo/issues/4803) 要求以简单的方式测试和构建组合标志。如果功能严格是增加的，那么
    `cargo test --all-features` 将涵盖所有内容。但如果不行，用户必须以多种功能标志组合运行命令，这相当繁琐。这已经可以在非官方情况下通过
    [`cargo-hack`](https://github.com/taiki-e/cargo-hack) 实现。'
- en: A completely different approach [based on the Keyword Generics Initiative](https://blog.rust-lang.org/inside-rust/2023/02/23/keyword-generics-progress-report-feb-2023.html).
    It seems to be the most recent take on solving this, but it’s in an “exploration”
    phase, and [no RFCs are available as of this writing](https://blog.rust-lang.org/inside-rust/2022/07/27/keyword-generics.html#q-is-there-an-rfc-available-to-read).
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全不同的方法 [基于关键字泛型倡议](https://blog.rust-lang.org/inside-rust/2023/02/23/keyword-generics-progress-report-feb-2023.html)。这似乎是最新解决这个问题的方法，但处于“探索”阶段，并且[截至本文撰写时还没有可用的
    RFC](https://blog.rust-lang.org/inside-rust/2022/07/27/keyword-generics.html#q-is-there-an-rfc-available-to-read)。
- en: According to [this old comment](https://github.com/rust-lang/rfcs/pull/2962#issuecomment-664656377),
    it’s not something the Rust team has already discarded; it’s still being discussed.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 [这条旧评论](https://github.com/rust-lang/rfcs/pull/2962#issuecomment-664656377)，这不是
    Rust 团队已经丢弃的东西； 它仍在讨论中。
- en: Although unofficial, another interesting approach that could be explored further
    in Rust is [“Sans I/O”](https://sans-io.readthedocs.io/). This is a Python protocol
    that abstracts away the use of network protocols like HTTP in our case, thus maximizing
    reusability. An existing example in Rust would be [`tame-oidc`](https://github.com/EmbarkStudios/tame-oidc).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管不是官方的，但在 Rust 中可以进一步探索的另一种有趣方法是 [“Sans I/O”](https://sans-io.readthedocs.io/)。
    这是一个Python协议，可以在我们的情况下抽象出像HTTP这样的网络协议，从而最大限度地提高了可重用性。 Rust 中的一个现有示例是 [`tame-oidc`](https://github.com/EmbarkStudios/tame-oidc)。
