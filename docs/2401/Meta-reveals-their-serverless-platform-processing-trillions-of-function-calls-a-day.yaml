- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:51:51'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:51:51'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Meta reveals their serverless platform processing trillions of function calls
    a day
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meta披露他们的无服务器平台每天处理数万亿个函数调用
- en: 来源：[https://read.engineerscodex.com/p/meta-xfaas-serverless-functions-explained](https://read.engineerscodex.com/p/meta-xfaas-serverless-functions-explained)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://read.engineerscodex.com/p/meta-xfaas-serverless-functions-explained](https://read.engineerscodex.com/p/meta-xfaas-serverless-functions-explained)
- en: '*Engineer’s Codex is a newsletter explaining real-world software engineering.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*Engineer’s Codex是一封解释实际软件工程的新闻简报。*'
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Meta’s [XFaaS](https://dl.acm.org/doi/abs/10.1145/3600006.3613155) is their
    serverless platform that “processes trillions of function calls per day on more
    than 100,000 servers spread across tens of datacenter regions.”
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Meta的[XFaaS](https://dl.acm.org/doi/abs/10.1145/3600006.3613155)是他们的无服务器平台，“在数十个数据中心地区的10万台服务器上每天处理数万亿次函数调用。”
- en: XFaaS is Meta’s internal version of public Function-as-a-Service (FaaS) options,
    such as AWS Lambda, Google Cloud Functions, and Azure Functions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: XFaaS是Meta内部版本的公共Function-as-a-Service（FaaS）选项，例如AWS Lambda、Google Cloud Functions和Azure
    Functions。
- en: I was lucky enough to get an early look at [the paper](https://drive.google.com/file/d/1FXejqjUgBfW_OSy3Q6FfwgnHEoV4FZPC/view)
    they wrote about it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我很幸运能够提前阅读他们写的[论文](https://drive.google.com/file/d/1FXejqjUgBfW_OSy3Q6FfwgnHEoV4FZPC/view)。
- en: '*Computer scientists aren’t really the most creative at naming, as there are
    two papers this year introducing “XFaaS.” One is by Meta, the other by IISC Bangalore
    scientists.*'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*计算机科学家在命名方面并不是最有创意的，因为今年有两篇论文介绍了“XFaaS”。一篇是Meta发表的，另一篇是IISC班加罗尔的科学家发表的。*'
- en: ''
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Both are completely different systems, so if you Google “XFaaS,” just know
    that this paper is talking about Meta’s version of the system.*'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*两者完全是不同的系统，所以如果你谷歌“XFaaS”，请知道这篇论文是在谈论Meta的系统版本。*'
- en: 'In this article, I start off with the high-level takeaways and lessons, for
    those who want a quick summary. *(estimated read time: 3 minutes)*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我从高层次的摘要和教训开始，针对那些想要快速了解的人。 *(预计阅读时间：3分钟)*
- en: 'Then, I do a more detailed walkthrough of the paper for those who want to understand
    the architecture behind XFaaS. *(estimated read time: 5 minutes)*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我会对那些想要了解XFaaS背后架构的人进行更详细的论文解读。 *(预计阅读时间：5分钟)*
- en: A key point of the paper is that hardware usage can be optimized by software
    to improve serverless performance.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这篇论文的一个关键点是硬件使用可以通过软件优化以提高无服务器性能。
- en: Meta recognizes the wastage of startup overhead for serverless functions and
    aims to emulate **a universal worker, i.e., any worker can execute any function
    instantly without startup overhead.**
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Meta意识到了无服务器函数的启动开销浪费，并旨在模仿**通用工作人员，即任何工作人员都可以立即执行任何函数而无需启动开销。**
- en: XFaaS is **only used for non-user-facing functions**. Serverless functions have
    too much variable latency to be consistently used for user-facing functions.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XFaaS **仅用于非用户界面函数**。无服务器函数的可变延迟太大，无法一致地用于用户界面函数。
- en: The clients of XFaaS submit function calls in a highly spiky manner. **The peak
    demand is 4.3 times higher** than the off-peak demand.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XFaaS的客户以高度峰值的方式提交函数调用。 **高峰需求比低峰需求高4.3倍。**
- en: One example of load they demonstrate has **20 million function calls submitted
    to XFaaS within 15 minutes.**
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们展示的负载示例之一是**在15分钟内向XFaaS提交了2000万次函数调用。**
- en: Meta found that even their spiky functions had patterns, which they leveraged
    to make spiky functions more predictable on their workload.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Meta发现即使是他们的高峰函数也有模式，他们利用这些模式使高峰函数在其工作负载上更加可预测。
- en: '**XFaaS has achieved a daily average CPU utilization of 66%,**  **much better
    than the industry average.**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**XFaaS的日均CPU利用率达到了66%，** **比行业平均水平要好得多。**'
- en: It efficiently **spreads the load using time (by delaying functions) and space
    (by sending it to a less-loaded datacenter).**
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过时间（延迟函数）和空间（将其发送到负载较轻的数据中心）有效地**扩散负载。**
- en: '*Meta is continuing to transition as many of their functions to being scheduled
    during off-peak hours, where the load and cost is more predictable.*'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Meta正在继续将他们的许多功能过渡到非高峰时段进行调度，这样负载和成本更可预测。*'
- en: Since it’s an internal cloud, Meta is able to perform a lot of unique optimizations,
    such as running multiple functions from different users in the same process.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是内部云，Meta能够执行许多独特的优化，例如在同一进程中运行来自不同用户的多个函数。
- en: Most functions execute in less than a second, but not all.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数函数在不到一秒的时间内执行，但并非所有函数都是如此。
- en: '* * *'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Friendly plug: **[SWE Quiz](https://swequiz.com/?utm_source=codex) is a compilation
    of 450+ software engineering and system design questions covering databases, authentication,
    caching, etc.**'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 友情插播：**[SWE Quiz](https://swequiz.com/?utm_source=codex) 是涵盖数据库、身份验证、缓存等 450+
    软件工程和系统设计问题的汇编。**
- en: ''
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**They’ve been created by engineers from Google, Meta, Apple, and more.**'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**它们由来自 Google、Meta、Apple 等公司的工程师创建。**'
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It’s helped many of my peers (including myself) pass the “software trivia questions”
    during interviews and feel more confident at work.
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它帮助了我和许多同行（包括我自己）在面试中通过了“软件琐碎问题”，并在工作中感到更自信。
- en: '[Check out SWE Quiz](https://swequiz.com)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[查看 SWE Quiz](https://swequiz.com)'
- en: '* * *'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Problem: Lengthy cold start time.**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题：冷启动时间过长。**'
- en: If a container shuts down too early, the entire container must be initialized
    again for the next call.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个容器关闭得太早，整个容器必须为下一次调用重新初始化。
- en: If a container shuts down too late, it sits idle, wasting valuable compute resources.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个容器关闭得太晚，它就会闲置，浪费宝贵的计算资源。
- en: '**Solution: XFaaS uses methods like just-in-time compilation to approximate
    that every worker can instantly execute any function.**'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解决方案：XFaaS 使用即时编译等方法来近似每个工作者都可以立即执行任何函数。**'
- en: '**Problem: High variance of load.**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题：负载的高方差。**'
- en: Results in extra hardware costs due to over-provisioning or in a slower system
    when under-provisioned
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导致额外的硬件成本，因为过度配置或系统速度较慢时的情况。
- en: '**Solution: XFaaS postpones running delay-tolerant functions until off-peak
    times and distributes function calls worldwide across datacenter regions.**'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解决方案：XFaaS 推迟运行延迟容忍函数，直到非高峰时间，并在数据中心区域全球范围内分发函数调用。**'
- en: '**Problem: Overloading downstream services.**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题：过载下游服务。**'
- en: 'Example: Once, a spike in calls from non-user-facing-functions caused an outage
    for user-facing online services.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例子：曾经，来自非用户界面功能的呼叫激增导致用户在线服务的中断。
- en: '**Solution: XFaaS employs a mechanism similar to TCP congestion control to
    regulate the execution of functions.**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解决方案：XFaaS 使用类似于 TCP 拥塞控制的机制来调节函数的执行。**'
- en: 'XFaaS techniques that could benefit public clouds include:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: XFaaS 的技术可能有助于公共云，包括：
- en: Allowing callers to specify function execution start times.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许调用者指定函数执行开始时间。
- en: Enabling function owners to set Service Level Objectives (SLOs) regarding completion
    deadlines. (Low SLOs can be delayed for a better time.)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许功能所有者设置关于完成期限的服务水平目标（SLOs）。 （低 SLOs 可以延迟到更合适的时间。）
- en: Permitting function owners to assign criticality levels to functions.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许功能所有者为函数分配关键性级别。
- en: While public clouds might not run functions from different users in the same
    process like XFaaS, large cloud customers can adopt the XFaaS approach in their
    virtual private clouds.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然公共云可能不会像 XFaaS 一样在同一个进程中运行来自不同用户的函数，但大型云客户可以在其虚拟专用云中采用 XFaaS 方法。
- en: A small number of Meta teams consume a significant portion of XFaaS’s capacity.
    Similar large customers in public clouds might also benefit from XFaaS’s strategies.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 少数 Meta 团队消耗了 XFaaS 容量的大部分。 类似的大型客户在公共云中也可能受益于 XFaaS 的策略。
- en: '*This is where the detailed overview of XFaaS begins. Estimated read time:
    5 minutes*'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*这是 XFaaS 详细概述的开始。预计阅读时间：5 分钟*'
- en: As mentioned before, XFaaS handles very spikey loads. At peak demand, just one
    function can receive 1.3 million calls per minute.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，XFaaS 处理非常尖锐的负载。 在需求高峰时，只有一个功能就可以每分钟接收 130 万个呼叫。
- en: A key insight is that **most XFaaS functions are triggered by automated workflows,
    which are okay with delays.** Again, this allows XFaaS to balance load across
    time (by delaying functions) and space (by sending it to a less-loaded datacenter).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关键的见解是**大多数 XFaaS 功能是由自动化工作流触发的，这些工作流对延迟可以接受。** 再次，这使得 XFaaS 能够在时间（通过延迟功能）和空间（通过将其发送到负载较轻的数据中心）上平衡负载。
- en: XFaaS supports runtimes for PHP, Python, Erlang, Haskell, and a generic container-based
    runtime for any language.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: XFaaS 支持 PHP、Python、Erlang、Haskell 的运行时，以及用于任何语言的通用基于容器的运行时。
- en: A function has several attributes that developers can set, such as function
    name, arguments, runtime, criticality, execution start time, execution completion
    deadline, resource quota, concurrency limit, and retry policy. The execution completion
    deadline can range from seconds to 24 hours.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数有几个开发人员可以设置的属性，如函数名、参数、运行时、关键性、执行开始时间、执行完成期限、资源配额、并发限制和重试策略。 执行完成期限可以从几秒钟到
    24 小时不等。
- en: '**Lastly, XFaaS has varying hardware capacity across regions, so load balancing
    must take this into account.**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**最后，XFaaS 在不同区域具有不同的硬件容量，因此负载均衡必须考虑这一点。**'
- en: 'Meta has three types of workloads on XFaaS: **queue-triggered functions**,
    **event-triggered functions** (from data-change events in data warehouse and data-stream
    systems), and **timer-triggered functions** (auto-fired on a pre-set timing).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Meta 在 XFaaS 上有三种工作负载类型：**队列触发函数**、**事件触发函数**（来自数据仓库和数据流系统中的数据更改事件）、以及**定时触发函数**（在预设时间自动触发）。
- en: XFaaS is used for non-user-facing functions, such as async recommendation systems,
    logging, productivity bots, notifications, and more.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: XFaaS 用于非用户界面的功能，例如异步推荐系统、日志记录、生产力机器人、通知等。
- en: Clients initiate function calls by sending a request to a submitter, which applies
    rate limits before passing it to the QueueLB (queue load balancer).
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 客户端通过向提交者发送请求来发起函数调用，在将其传递给 QueueLB（队列负载均衡器）之前应用速率限制。
- en: ''
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The QueueLB directs the function calls to a DurableQ for storage until completion.
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: QueueLB 将函数调用指向 DurableQ 进行存储，直到完成。
- en: ''
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Periodically, the scheduler moves these calls to its FuncBuffer (in-memory function
    buffer), sorting them by criticality, deadline, and quota.
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 定期，调度器将这些调用移动到其 FuncBuffer（内存中的函数缓冲区），按重要性、截止日期和配额进行排序。
- en: ''
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ready-to-execute calls move to the RunQ, and the WorkerLB (worker load balancer)
    then dispatches them to suitable workers.
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 就绪执行的调用会移动到 RunQ 中，然后 WorkerLB（工作负载均衡器）将其分派给适当的工作者。
- en: The submitter, QueueLB, scheduler, and WorkerLB are all stateless, unsharded,
    and replicated without a designated leader, so their replicas play equal roles.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 提交者、QueueLB、调度器和 WorkerLB 都是无状态的、非分片的，并且没有指定的领导者，因此它们的副本发挥相同的作用。
- en: DurableQ is stateful and has a sharded, highly available database.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: DurableQ 是有状态的，并且拥有分片式、高可用的数据库。
- en: Scaling a stateless component is easy by just adding more replicas. If a stateless
    component fails, it’s work can just be taken over by a peer.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仅添加更多副本，扩展无状态组件变得很容易。如果无状态组件失败，它的工作可以被同级接管。
- en: Central controllers are separate from the function execution path. They **continuously
    optimize the system** by updating key configuration parameters, which are consumed
    by critical-path components like workers and schedulers.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 中央控制器与函数执行路径分开。它们通过更新关键配置参数来**持续优化系统**，这些参数由关键路径组件（如工作者和调度器）使用。
- en: These configs are cached in the components themselves, so if the central controllers
    fail, the system keeps running just fine (but it cannot be reconfigured).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配置被缓存在组件本身中，因此如果中央控制器失败，系统仍然正常运行（但无法重新配置）。
- en: This allows for central controller downtime for tens of minutes. It’s an example
    of how Meta has built resilience into this system.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得中央控制器可以停机数十分钟。这是 Meta 如何将弹性构建到该系统中的一个例子。
- en: Functions that require strong isolation for security or performance are assigned
    to different namespaces, each using distinct worker pools to achieve physical
    isolation.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 需要强隔离以确保安全性或性能的函数被分配到不同的命名空间，每个命名空间使用不同的工作者池实现物理隔离。
- en: Multiple functions can operate in a single Linux process due to trust within
    a private cloud, mandatory peer reviews, and existing security measures. Data
    can only flow from lower to higher classification levels.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于私有云中的信任、强制同行审查和现有的安全措施，多个功能可以在单个 Linux 进程中运行。数据只能从较低的分类级别流向较高的分类级别。
- en: The client sends calls to the submitter. The submitter improves efficiency by
    batching calls and writing them to DurableQ as one operation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端通过向提交者发送调用来发送调用。提交者通过批处理调用并将其作为一个操作写入 DurableQ 来提高效率。
- en: The submitter manages large argument storage through a distributed key-value
    store and has built-in rate-limiting policies. To manage the variation in client
    submission rates, regions have two submitter sets for regular and high-frequency
    clients.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 提交者通过分布式键值存储管理大型参数存储，并具有内置的速率限制策略。为了管理客户端提交速率的变化，各区域都有两个提交者集用于常规和高频客户端。
- en: XFaaS actively monitors high-frequency clients, and human intervention is required
    for throttling or Service Level Objective (SLO) adjustments.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: XFaaS 积极监控高频客户端，需要人工干预来进行限流或服务水平目标（SLO）调整。
- en: The submitter then sends function calls to the QueueLB. The [Configerator](https://research.facebook.com/publications/holistic-configuration-management-at-facebook/)
    (Configuration Management System central controller) provides routing policies
    to the QueueLB to balance loads across different regions, as DurableQ hardware
    capacities vary.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 提交者然后将函数调用发送到QueueLB。[Configerator](https://research.facebook.com/publications/holistic-configuration-management-at-facebook/)（配置管理系统中央控制器）为QueueLB提供了路由策略，以在不同区域之间平衡负载，因为DurableQ的硬件容量各不相同。
- en: Calls to DurableQs are sharded using UUIDs for equal distribution. Each DurableQ
    categorizes and stores function calls by their scheduled execution time, set by
    the caller.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用UUID对DurableQ的调用进行分片，以实现均匀分布。每个DurableQ通过调用方设置的计划执行时间对函数调用进行分类和存储。
- en: The scheduler continuously queries DurableQs for stored function calls that
    are due. When a function call is handed over to a scheduler by a DurableQ, it
    is exclusive to that scheduler unless there's a failure in execution.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 调度器不断查询存储在DurableQ中到期的函数调用。当DurableQ将函数调用交给调度器时，除非执行失败，否则该函数调用将专属于该调度器。
- en: 'The scheduler communicates with the DurableQ:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 调度器与DurableQ进行通信：
- en: '**Sends an ACK message for successful execution.** Then the function call is
    permanently deleted from DurableQ.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发送成功执行的ACK消息。**然后，函数调用将从DurableQ中永久删除。'
- en: '**NACK for unsuccessful attempts.** The function call is made available again
    in the DurableQ for another scheduler to process.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于不成功的尝试，发送NACK。**函数调用再次在DurableQ中可用，供另一个调度器处理。'
- en: A scheduler's primary role is to prioritize function calls based on their importance,
    deadline, and capacity quota.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 调度器的主要作用是根据其重要性、截止日期和容量配额对函数调用进行优先级排序。
- en: It fetches function calls from DurableQs, consolidates them into FuncBuffers
    (ordered by importance, then execution deadline), and then arranges them in a
    RunQ for execution. Both FuncBuffers and RunQ are in-memory data structures.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 它从DurableQ中提取函数调用，将它们合并到FuncBuffers中（按重要性和执行截止日期排序），然后将它们安排在RunQ中进行执行。FuncBuffers和RunQ都是内存数据结构。
- en: To manage efficient execution and prevent system lags, the RunQ controls the
    flow of function calls. The system also ensures load balancing, with the Global
    Traffic Conductor (central controller) directing function call traffic across
    regions based on demand and capacity, optimizing worker utilization across the
    board.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理有效执行并防止系统滞后，RunQ控制函数调用的流量。该系统还确保负载平衡，全局流量调度器（中央控制器）根据需求和容量指导函数调用流量跨区域流动，优化整体工作器利用率。
- en: The RunQ from the scheduler sends functions to the WorkerLB (worker load balancer),
    which has functions run by workers in a worker pool.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 调度器中的RunQ将函数发送给WorkerLB（工作负载均衡器），WorkerLB将函数发送到工作池中的工作器中运行。
- en: In the XFaaS system, functions that use the same programming language have isolation,
    with a dedicated runtime and worker pool.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在XFaaS系统中，使用相同编程语言的函数具有隔离性，具有专用运行时和工作器池。
- en: '**The system''s design aims to allow immediate function execution by any worker
    without any initial delays.** XFaaS maintains an always-active runtime and keeps
    functions’ code updated on local SSDs.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**该系统的设计旨在允许任何工作器立即执行函数，而无需初始延迟。**XFaaS保持始终活动的运行时，并在本地SSD上更新函数代码。'
- en: XFaaS introduces cooperative JIT compilation, periodically bundling and pushing
    function code to workers. Since code is frequently updated, this is necessary.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: XFaaS引入了合作式JIT编译，周期性地将函数代码打包并推送到工作器。由于代码经常更新，这是必要的。
- en: 'There are three execution phases to JIT compilation:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: JIT编译有三个执行阶段：
- en: A few workers test the new code.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 少数工作器测试新代码。
- en: 2% of workers further test the code; some perform profiling for JIT compilation.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2%的工作器进一步测试代码；一些进行JIT编译的性能分析。
- en: JIT compilation is done right before receiving function calls, eliminating delays.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JIT编译是在接收函数调用之前完成的，从而消除了延迟。
- en: With cooperative JIT compilation, a worker reached its maximum requests-per-second
    in only 3 minutes after a function code update, compared to 21 minutes without
    JIT compilation.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有了合作式JIT编译，与没有JIT编译相比，工作器在函数代码更新后仅在3分钟内达到了每秒最大请求量，而不是在21分钟内。
- en: Memory constraints make storing every function's JIT code infeasible.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于内存限制，存储每个函数的即时编译（JIT）代码是不可行的。
- en: The Locality Optimizer (central controller) partitions functions and workers
    into groups, ensuring memory-hungry functions are distributed.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本地优化器（中央控制器）将函数和工作器分成组，确保内存消耗大的函数得到分发。
- en: Using locality groups reduced memory consumption by 11-12% and allowed for efficient,
    consistent memory utilization by workers.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用局部组可将内存消耗降低 11-12%，并且允许工作者高效、一致地利用内存。
- en: '**Quota for Functions**: Every function has a quota, set by its owner, which
    defines its CPU cycles per second. This quota is transformed into a requests-per-second
    (RPS) rate limit. The Central Rate Limiter determines whether to throttle function
    calls based on the function''s RPS limit.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数配额**：每个函数都有一个由其所有者设定的配额，该配额定义了其每秒的 CPU 循环次数。该配额被转换为每秒请求数（RPS）速率限制。中央速率限制器根据函数的
    RPS 限制确定是否限制函数调用。'
- en: '**Dynamic RPS Limits for Functions**: To prevent overburdening downstream services,
    XFaaS utilizes a TCP-like [AIMD (Additive Increase, Multiplicative Decrease) method](https://en.wikipedia.org/wiki/Additive_increase/multiplicative_decrease#:~:text=The%20additive%2Dincrease%2Fmultiplicative%2D,reduction%20when%20congestion%20is%20detected.)
    to adjust the RPS limits dynamically. It can set concurrency levels and manage
    RPS shifts using a slow start approach.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数的动态 RPS 限制**：为了防止给下游服务带来过大负担，XFaaS 利用类似 TCP 的[AIMD（加性增加，乘性减少）方法](https://en.wikipedia.org/wiki/Additive_increase/multiplicative_decrease#:~:text=The%20additive%2Dincrease%2Fmultiplicative%2D,reduction%20when%20congestion%20is%20detected.)动态调整
    RPS 限制。它可以使用慢启动方法设置并管理并发级别和 RPS 转移。'
- en: Past challenges, like an XFaaS function overloading the [TAO database](https://research.facebook.com/publications/tao-facebooks-distributed-data-store-for-the-social-graph/)
    causing a service cascade failure, highlighted the need for these safeguards.
    Now, XFaaS has proven its adeptness in shielding downstream services, as seen
    in real-world incidents where its back-pressure mechanism preemptively curbed
    potential overloads, ensuring service stability.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 过去的挑战，比如一个 XFaaS 函数过载了[TAO 数据库](https://research.facebook.com/publications/tao-facebooks-distributed-data-store-for-the-social-graph/)，导致服务级联故障，凸显了这些防护措施的必要性。现在，XFaaS
    已经证明了其在保护下游服务方面的能力，在真实世界的事件中，其反压力机制预防性地抑制了潜在的过载，确保了服务的稳定性。
- en: '**This is a fantastic paper.** Meta gives us a deep, honest look into their
    own serverless platform while providing clear lessons for developers and companies
    who want to optimize their own serverless function usage. [The paper can be found
    here, though you might need institutional access to read it for free.](https://dl.acm.org/doi/abs/10.1145/3600006.3613155)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是一篇很棒的论文。**Meta 为我们提供了对他们自己的无服务器平台的深入，诚实的了解，同时为那些希望优化自己的无服务器函数使用的开发人员和公司提供了明确的教训。[您可以在此处找到论文，尽管您可能需要机构访问权限才能免费阅读。](https://dl.acm.org/doi/abs/10.1145/3600006.3613155)'
- en: Furthermore, hardware optimization using software, such as efficient CPU usage,
    isn’t focused on enough in the industry. While Google, Facebook, and others do
    it for their own systems, it’s not talked about much compared to software optimizations.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用软件进行硬件优化，例如有效的 CPU 使用，在行业中并没有得到足够的关注。尽管谷歌、Facebook 等公司为其自己的系统进行了优化，但与软件优化相比，它并没有得到太多讨论。
- en: In the meantime, if you’re interested in other real-world distributed systems,
    **[I also wrote about how Meta handled billions of requests a second by creating
    the largest Memcached system in the world. Read it here.](https://engineercodex.substack.com/p/how-facebook-scaled-memcached)**
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，如果您对其他真实世界的分布式系统感兴趣，**[我还写过关于 Meta 如何通过创建世界上最大的 Memcached 系统来处理数十亿请求的文章。点击此处阅读。](https://engineercodex.substack.com/p/how-facebook-scaled-memcached)**
- en: If you have any questions about any parts of the paper or system, please do
    leave a comment below. I will answer them.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对论文或系统的任何部分有任何疑问，请在下方留下评论。我会回答它们。
