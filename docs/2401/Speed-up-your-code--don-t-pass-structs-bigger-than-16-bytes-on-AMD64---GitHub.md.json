["```\n==========\nharness.h:\n==========\n\n#define TYPE double\n\nstruct Vector { TYPE x, y, z; };\n\nstruct Vector vector_add_struct(struct Vector left, struct Vector right);\n\nstruct Vector vector_add_fields(\n    TYPE left_x, TYPE left_y, TYPE left_z,\n    TYPE right_x, TYPE right_y, TYPE right_z);\n\n==========\nharness.c:\n==========\n\n#include <stdio.h>\n#include <stdlib.h>\n#include \"harness.h\"\n\nint main(int argc, const char *argv[])\n{\n    int mode = atoi(argv[1]);\n    int length = atoi(argv[2]);\n    struct Vector result = {0};\n    if (mode == 0)\n    {\n        for (int i = 0; i < length; i++)\n            result = vector_add_struct(result, (struct Vector) {i, i, i});\n    }\n    else\n    {\n        for (int i = 0; i < length; i++)\n            result = vector_add_fields(result.x, result.y, result.z, i, i, i);\n    }\n    printf(\"result <%f, %f, %f>\\n\", result.x, result.y, result.z);\n}\n\n=======\nimpl.c:\n=======\n\n#include \"harness.h\"\n\nstruct Vector vector_add_struct(struct Vector left, struct Vector right)\n{\n    return (struct Vector) {\n        left.x + right.x,\n        left.y + right.y,\n        left.z + right.z,\n    };\n}\n\nstruct Vector vector_add_fields(\n    TYPE left_x, TYPE left_y, TYPE left_z,\n    TYPE right_x, TYPE right_y, TYPE right_z)\n{\n    return (struct Vector) {\n        left_x + right_x,\n        left_y + right_y,\n        left_z + right_z,\n    };\n} \n```", "```\nclang -O3 impl.c -c -o impl.o\nclang -O3 harness.c impl.o -o benchmark\ntime ./benchmark 0 1000000000\ntime ./benchmark 1 1000000000 \n```"]