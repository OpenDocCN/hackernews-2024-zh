["```\nfunc (s *Service) GetWidget(w http.ResponseWriter, r *http.Request) {  if err := r.ParseForm(); err != nil {  http.Error(w, err.Error(), http.StatusBadRequest)  return  }  id, err := strconv.Atoi(r.Form.Get(\"widget_id\"))  if err != nil {  http.Error(w, err.Error(), http.StatusBadRequest)  return  }  widget, err := s.db.GetWidget(id)  if err != nil {  if errors.Is(err, sql.ErrNoRows) {  http.Error(w, err.Error(), http.StatusNotFound)  return  }  http.Error(w, err.Error(), http.StatusInternalServerError)  return  }  widgetJSON, err := json.Marshal(widget)  if err != nil {  http.Error(w, err.Error(), http.StatusInternalServerError)  return  }  w.Header.Set(\"Content-Type\", \"application/json\")  w.Write(widgetJSON) } \n```", "```\ntype HandlerFunc func(c Context) error \n```", "```\n// customHandler converts an error-returning handler to a standard http.HandlerFunc. func customHandler(f func(http.ResponseWriter, *http.Request) error) http.HandlerFunc {  return func(w http.ResponseWriter, r *http.Request) {  err := f(w, r)  if err != nil {  http.Error(w, err.Error(), http.StatusInternalServerError) // Wait, alwyas 500? More on that later  }  } } \n```", "```\nfunc (s *Service) GetWidget(w http.ResponseWriter, r *http.Request) error {  if err := r.ParseForm(); err != nil {  return err  }  id, err := strconv.Atoi(r.Form.Get(\"widget_id\"))  if err != nil {  return err  }  widget, err := s.db.GetWidget(id)  if err != nil {  return err  }  widgetJSON, err := json.Marshal(widget)  if err != nil {  return err  }  w.Header.Set(\"Content-Type\", \"application/json\")  w.Write(widgetJSON) } \n```", "```\nmux.Handle(\"/widget\", customHandler(s.GetWidget)) \n```", "```\nimport \"gitlab.com/flimzy/httpe\"   mux.Handle(\"/widget\", httpe.ToHandler(s.GetWidget)) \n```", "```\ntype error interface {  Error() string } \n```", "```\ntype statusError struct {  error  status int } \n```", "```\nfunc (e statusError) Unwrap() error {  return e.error } \n```", "```\nfunc (e statusError) HTTPStatus() int {  return e.status } \n```", "```\nfunc (s *Service) GetWidget(w http.ResponseWriter, r *http.Request) error {  if err := r.ParseForm(); err != nil {  return statusError{error: err, status: http.StatusBadRequest}  }  id, err := strconv.Atoi(r.Form.Get(\"widget_id\"))  if err != nil {  return statusError{error: err, status: http.StatusBadRequest}  }  widget, err := s.db.GetWidget(id)  if err != nil {  return statusError{error: err, status: http.StatusInternalServerError}  }  widgetJSON, err := json.Marshal(widget)  if err != nil {  return statusError{error: err, status: http.StatusInternalServerError}  }  w.Header.Set(\"Content-Type\", \"application/json\")  w.Write(widgetJSON) } \n```", "```\nfunc (db *DB) GetWidget(id int) (*Widget, error) {  widget, err := db.Get(/* ... */)  if errors.Is(err, sql.ErrNoRows) {  return nil, statusError{error: err, status: http.StatusNotFound}  }  if err != nil {  return nil, statusError{error: err, status: http.StatusInternalServerError}  }  return widget, nil } \n```", "```\n// customHandler converts an error-returning handler to a standard http.HandlerFunc. func customHandler(f func(http.ResponseWriter, *http.Request) error) http.HandlerFunc {  return func(w http.ResponseWriter, r *http.Request) {  err := f(w, r)  if err != nil {  var status int  var statusErr interface {  error  HTTPStatus() int  }  if errors.As(err, &statusErr) {  status = statusErr.HTTPStatus()  }  http.Error(w, err.Error(), status)  }  } } \n```", "```\npackage apperr // Use a descriptive name  type statusError struct {  error  status int }   func (e statusError) Unwrap() error   { return e.error } func (e statusError) HTTPStatus() int { return e.status }   func WithHTTPStatus(err error, status int) error {  return statusError{  error: err,  status: int,  } } \n```", "```\nfunc (s *Service) GetWidget(w http.ResponseWriter, r *http.Request) error {  if err := r.ParseForm(); err != nil {  return apperr.WithStatus(err, http.StatusBadRequest)  }  id, err := strconv.Atoi(r.Form.Get(\"widget_id\"))  if err != nil {  return apperr.WithStatus(err, http.StatusBadRequest)  }  widget, err := s.db.GetWidget(id)  if err != nil {  return err // No call to apperr.WithStatus here, as we trust the db has already set the appropriate status code for us  }  widgetJSON, err := json.Marshal(widget)  if err != nil {  return apperr.WithStatus(err, http.StatusBadRequest)  }  w.Header.Set(\"Content-Type\", \"application/json\")  w.Write(widgetJSON) } \n```", "```\npackage apperr   // HTTPStatus returns the HTTP status included in err. If err is nil, this // function returns 0\\. If err is non-nil, and does not include an HTTP status, // a default value of [net/http.StatusInternalServerError] is returned. func HTTPStatus(err error) int {  if err == nil {  return 0  }  var statusErr interface {  error  HTTPStatus() int  }  if errors.As(err, &statusErr) {  return statusErr.HTTPStatus()  }  return http.StatusInternalServerError } \n```", "```\n// customHandler converts an error-returning handler to a standard http.HandlerFunc. func customHandler(f func(http.ResponseWriter, *http.Request) error) http.HandlerFunc {  return func(w http.ResponseWriter, r *http.Request) {  err := f(w, r)  if err != nil {  http.Error(w, err.Error(), apperr.HTTPStatus(err))  }  } } \n```", "```\nfunc loggingMiddleware(logger *slog.Logger) func(next httpe.HandlerWithError) httpe.HandlerWithError {  return httpe.HandlerWithErrorFunc(func (w http.ResponseWriter, r *http.Request) error {  err := next.ServeHTTPWithError(w, r)  status := http.StatusOK  if err != nil {  status = apperr.HTTPStatus(err)  logger.Error(\"request served with error\", \"status\", status, \"request\", r, \"error\", err)  } else {  logger.Info(\"request served\", \"status\", status, \"request\", r)  }  }) } \n```", "```\nfunc serveErrors() func(next httpe.HandlerWithError) httpe.HandlerWithError {  return httpe.HandlerWithErrorFunc(func (w http.ResponseWriter, r *http.Request) error {  err := next.ServeHTTPWithError(w, r)  if err != nil {  http.Error(w, err.Error(), apperr.Status(err))  }  }) } \n```", "```\nfunc serveErrors() func(next httpe.HandlerWithError) httpe.HandlerWithError {  return httpe.HandlerWithErrorFunc(func (w http.ResponseWriter, r *http.Request) (err error) {  defer func() {  if r := recover(); r != nil {  switch t := r.(type) {  case error:  err = t  default:  err = fmt.Errorf(\"%v\")  }  }  }()  return next.ServeHTTPWithError(w, r)  }) } \n```", "```\nfunc (db *DB) GetWidget(id int) (*Widget, error) {  widget, err := db.Get(/* ... */)  if errors.Is(err, sql.ErrNoRows) {  return nil, apperror.ErrWidgetNotFound  }  if err != nil {  return nil, err  }  return widget, nil } \n```", "```\ninternalCode := apperror.Code(err) // The internal error code  httpStatus := apperror.HTTPStatus(err) // The HTTP status \n```"]