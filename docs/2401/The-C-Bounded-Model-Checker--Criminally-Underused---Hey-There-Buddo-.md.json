["```\n%%bash\n# download and install CBMC\nwget https://github.com/diffblue/cbmc/releases/download/cbmc-5.95.1/ubuntu-20.04-cbmc-5.95.1-Linux.deb\napt-get install bash-completion\ndpkg -i ubuntu-20.04-cbmc-5.95.1-Linux.deb \n```", "```\n%%file /tmp/ex1.c\n#include <assert.h> int main(){\n    assert(1 == 0);\n} \n```", "```\n! gcc /tmp/ex1.c -o /tmp/ex1 && /tmp/ex1 \n```", "```\nex1: /tmp/ex1.c:3: main: Assertion `1 == 0' failed. \n```", "```\nCBMC version 5.95.1 (cbmc-5.95.1) 64-bit x86_64 linux\nParsing /tmp/ex1.c\nConverting\nType-checking ex1\nGenerating GOTO Program\nAdding CPROVER library (x86_64)\nRemoval of function pointers and virtual functions\nGeneric Property Instrumentation\nRunning with 8 object bits, 56 offset bits (default)\nStarting Bounded Model Checking\nRuntime Symex: 0.00026975s\nsize of program expression: 20 steps\nsimple slicing removed 5 assignments\nGenerated 1 VCC(s), 1 remaining after simplification\nRuntime Postprocess Equation: 1.098e-05s\nPassing problem to propositional reduction\nconverting SSA\nRuntime Convert SSA: 3.654e-05s\nRunning propositional reduction\nPost-processing\nRuntime Post-process: 2.905e-06s\nSolving with MiniSAT 2.2.1 with simplifier\n0 variables, 0 clauses\nSAT checker: instance is SATISFIABLE\nRuntime Solver: 2.3624e-05s\nRuntime decision procedure: 7.9172e-05s\n\n** Results:\n/tmp/ex1.c function main\n[2m[main.assertion.1] [0mline 3 assertion 1 == 0: [31mFAILURE[0m\n\n** 1 of 1 failed (2 iterations)\nVERIFICATION FAILED \n```", "```\n%%file /tmp/ex2.c\n#include <assert.h> int main(){\n    int x;\n    assert(x != 12345);\n} \n```", "```\n! gcc /tmp/ex2.c -o /tmp/ex2 && /tmp/ex2 \n```", "```\n! cbmc /tmp/ex2.c --trace \n```", "```\nCBMC version 5.95.1 (cbmc-5.95.1) 64-bit x86_64 linux\nParsing /tmp/ex2.c\nConverting\nType-checking ex2\nGenerating GOTO Program\nAdding CPROVER library (x86_64)\nRemoval of function pointers and virtual functions\nGeneric Property Instrumentation\nRunning with 8 object bits, 56 offset bits (default)\nStarting Bounded Model Checking\nRuntime Symex: 0.000307621s\nsize of program expression: 21 steps\nsimple slicing removed 5 assignments\nGenerated 1 VCC(s), 1 remaining after simplification\nRuntime Postprocess Equation: 1.093e-05s\nPassing problem to propositional reduction\nconverting SSA\nRuntime Convert SSA: 0.000651015s\nRunning propositional reduction\nPost-processing\nRuntime Post-process: 4.693e-06s\nSolving with MiniSAT 2.2.1 with simplifier\n33 variables, 33 clauses\nSAT checker: instance is SATISFIABLE\nRuntime Solver: 7.3262e-05s\nRuntime decision procedure: 0.000780993s\nBuilding error trace\n\n** Results:\n/tmp/ex2.c function main\n[2m[main.assertion.1] [0mline 4 assertion x != 12345: [31mFAILURE[0m\n\nTrace for main.assertion.1:\n\nState 11 file /tmp/ex2.c function main line 3 thread 0\n----------------------------------------------------\n  x=12345 [2m(00000000 00000000 00110000 00111001)[0m\n\n[31mViolated property:[0m\n  file /tmp/ex2.c function main line 4 thread 0\n  [31massertion x != 12345[0m\n  x != 12345\n\n** 1 of 1 failed (2 iterations)\nVERIFICATION FAILED \n```", "```\n%%file /tmp/ex3.c\nint main(){\n    int x;\n    if (x <= 42){\n            assert(x != 12345);\n    }\n} \n```", "```\nCBMC version 5.95.1 (cbmc-5.95.1) 64-bit x86_64 linux\nParsing /tmp/ex3.c\nConverting\nType-checking ex3\nfile /tmp/ex3.c line 4 function main: function 'assert' is not declared\nGenerating GOTO Program\nAdding CPROVER library (x86_64)\nRemoval of function pointers and virtual functions\nGeneric Property Instrumentation\nRunning with 8 object bits, 56 offset bits (default)\nStarting Bounded Model Checking\nRuntime Symex: 0.000833781s\nsize of program expression: 23 steps\nsimple slicing removed 5 assignments\nGenerated 1 VCC(s), 1 remaining after simplification\nRuntime Postprocess Equation: 1.5136e-05s\nPassing problem to propositional reduction\nconverting SSA\nRuntime Convert SSA: 0.000201988s\nRunning propositional reduction\nPost-processing\nRuntime Post-process: 4.988e-06s\nSolving with MiniSAT 2.2.1 with simplifier\n67 variables, 100 clauses\nSAT checker inconsistent: instance is UNSATISFIABLE\nRuntime Solver: 2.427e-05s\nRuntime decision procedure: 0.00026319s\n\n** Results:\n/tmp/ex3.c function main\n[2m[main.assertion.1] [0mline 4 assertion x != 12345: [32mSUCCESS[0m\n\n** 0 of 1 failed (1 iterations)\nVERIFICATION SUCCESSFUL \n```", "```\n%%file /tmp/test.c\n#include <assert.h>\n#include <stdint.h> \nint64_t myabs(int64_t x){\n    return x <= 0 ? -x : x;\n}\n\nint64_t nondet_int();\n\nint main(){\n    int64_t x = nondet_int();\n    int64_t y = myabs(x);\n    assert(y >= 0);\n} \n```", "```\n! cbmc /tmp/test.c --trace \n```", "```\nCBMC version 5.95.1 (cbmc-5.95.1) 64-bit x86_64 linux\nParsing /tmp/test.c\nConverting\nType-checking test\nGenerating GOTO Program\nAdding CPROVER library (x86_64)\nRemoval of function pointers and virtual functions\nGeneric Property Instrumentation\nRunning with 8 object bits, 56 offset bits (default)\nStarting Bounded Model Checking\nRuntime Symex: 0.000758549s\nsize of program expression: 33 steps\nsimple slicing removed 5 assignments\nGenerated 1 VCC(s), 1 remaining after simplification\nRuntime Postprocess Equation: 1.2014e-05s\nPassing problem to propositional reduction\nconverting SSA\nRuntime Convert SSA: 0.000439795s\nRunning propositional reduction\nPost-processing\nRuntime Post-process: 3.483e-06s\nSolving with MiniSAT 2.2.1 with simplifier\n701 variables, 1075 clauses\nSAT checker: instance is SATISFIABLE\nRuntime Solver: 0.000975965s\nRuntime decision procedure: 0.00144989s\nBuilding error trace\n\n** Results:\n/tmp/test.c function main\n[2m[main.assertion.1] [0mline 13 assertion y >= 0: [31mFAILURE[0m\n\nTrace for main.assertion.1:\n\nState 13 file /tmp/test.c function main line 11 thread 0\n----------------------------------------------------\n  return_value_nondet_int=-9223372036854775808l [2m(10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)[0m\n\nState 14 file /tmp/test.c function main line 11 thread 0\n----------------------------------------------------\n  x=-9223372036854775808l [2m(10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)[0m\n\nState 19 file /tmp/test.c function main line 12 thread 0\n----------------------------------------------------\n  x=-9223372036854775808l [2m(10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)[0m\n\nState 20 file /tmp/test.c function myabs line 5 thread 0\n----------------------------------------------------\n  goto_symex$$return_value$$myabs=-9223372036854775808l [2m(10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)[0m\n\nState 22 file /tmp/test.c function main line 12 thread 0\n----------------------------------------------------\n  return_value_myabs=-9223372036854775808l [2m(10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)[0m\n\nState 23 file /tmp/test.c function main line 12 thread 0\n----------------------------------------------------\n  y=-9223372036854775808l [2m(10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)[0m\n\n[31mViolated property:[0m\n  file /tmp/test.c function main line 13 thread 0\n  [31massertion y >= 0[0m\n  y >= (signed long int)0\n\n** 1 of 1 failed (2 iterations)\nVERIFICATION FAILED \n```", "```\n%%file /tmp/buffer.c\nint main(){\n    char buffer[10];\n    buffer[10] = 0;\n} \n```", "```\nCBMC version 5.95.1 (cbmc-5.95.1) 64-bit x86_64 linux\nParsing /tmp/buffer.c\nConverting\nType-checking buffer\nGenerating GOTO Program\nAdding CPROVER library (x86_64)\nRemoval of function pointers and virtual functions\nGeneric Property Instrumentation\nRunning with 8 object bits, 56 offset bits (default)\nStarting Bounded Model Checking\nRuntime Symex: 0.000799121s\nsize of program expression: 21 steps\nsimple slicing removed 0 assignments\nGenerated 0 VCC(s), 0 remaining after simplification\nRuntime Postprocess Equation: 0.000160385s\nVERIFICATION SUCCESSFUL \n```", "```\n! cbmc /tmp/buffer.c --bounds-check --conversion-check --div-by-zero-check --float-overflow-check --malloc-fail-null \\\n\t--malloc-may-fail --nan-check --pointer-check --pointer-overflow-check --pointer-primitive-check \\\n\t--signed-overflow-check --undefined-shift-check --unsigned-overflow-check --memory-leak-check \n```", "```\nCBMC version 5.95.1 (cbmc-5.95.1) 64-bit x86_64 linux\nParsing /tmp/buffer.c\nConverting\nType-checking buffer\nGenerating GOTO Program\nAdding CPROVER library (x86_64)\nRemoval of function pointers and virtual functions\nGeneric Property Instrumentation\nRunning with 8 object bits, 56 offset bits (default)\nStarting Bounded Model Checking\nRuntime Symex: 0.00054141s\nsize of program expression: 24 steps\nsimple slicing removed 8 assignments\nGenerated 2 VCC(s), 1 remaining after simplification\nRuntime Postprocess Equation: 1.7143e-05s\nPassing problem to propositional reduction\nconverting SSA\nRuntime Convert SSA: 0.000106257s\nRunning propositional reduction\nPost-processing\nRuntime Post-process: 4.634e-06s\nSolving with MiniSAT 2.2.1 with simplifier\n160 variables, 0 clauses\nSAT checker: instance is SATISFIABLE\nRuntime Solver: 4.0895e-05s\nRuntime decision procedure: 0.000177761s\n\n** Results:\nfunction __CPROVER__start\n[2m[__CPROVER__start.memory-leak.1] [0mdynamically allocated memory never freed in __CPROVER_memory_leak == NULL: [32mSUCCESS[0m\n\n/tmp/buffer.c function main\n[2m[main.array_bounds.1] [0mline 3 array 'buffer' upper bound in buffer[(signed long int)10]: [31mFAILURE[0m\n\n** 1 of 2 failed (2 iterations)\nVERIFICATION FAILED \n```", "```\necho '\n#include <assert.h>\nint safeprog(int low, int high){\n    int foo = low ^ high;\n    foo = ((foo << 1) ^ high) >> 1;\n    return foo;\n}\n\nint main(){\n    int high = nondet_int();\n    int high1 = nondet_int();\n    int low = nondet_int();\n    //int high, high1, low;\n\n    __ESBMC_assert(safeprog(low,high) == safeprog(low,high1), \"information security property\");\n    return 0;\n}\n' > /tmp/test.c\nesbmc /tmp/test.c \n```", "```\necho \"\n#include<stdbool.h>\n\nbool check_balance(char *input){\n    int count = 0;\n    while(*input != '\\0'){\n        if(*input == '(') count++;\n        if(*input == ')') count--;\n        input++;\n    }\n    return count == 0;\n\" > /tmp/parens.c\ncbmc /tmp/parens.c \n```", "```\necho \"\nint main()\n{\n  int buffer[10];\n  buffer[20] = 10;\n}\n\" > /tmp/overflow.c\ncbmc /tmp/overflow.c --bounds-check --pointer-check --trace \n```", "```\n%%script sqlite3 --echo\nCREATE TABLE test (x INTEGER, y INTEGER);\nINSERT INTO test VALUES (1, 2);\nINSERT INTO test SELECT x+1, y+1 FROM test;\nSELECT * FROM test;\n.quit \n```", "```\nAvailable line magics:\n%alias  %alias_magic  %autoawait  %autocall  %automagic  %autosave  %bookmark  %cat  %cd  %clear  %colors  %conda  %config  %connect_info  %cp  %debug  %dhist  %dirs  %doctest_mode  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %lf  %lk  %ll  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %lx  %macro  %magic  %man  %matplotlib  %mkdir  %more  %mv  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %pip  %popd  %pprint  %precision  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %rep  %rerun  %reset  %reset_selective  %rm  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode\n\nAvailable cell magics:\n%%!  %%HTML  %%SVG  %%bash  %%capture  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%markdown  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile\n\nAutomagic is ON, % prefix IS NOT needed for line magics. \n```", "```\nIPython -- An enhanced Interactive Python - Quick Reference Card\n================================================================\n\nobj?, obj??      : Get help, or more help for object (also works as\n                   ?obj, ??obj).\n?foo.*abc*       : List names in 'foo' containing 'abc' in them.\n%magic           : Information about IPython's 'magic' % functions.\n\nMagic functions are prefixed by % or %%, and typically take their arguments\nwithout parentheses, quotes or even commas for convenience.  Line magics take a\nsingle % and cell magics are prefixed with two %%.\n\nExample magic function calls:\n\n%alias d ls -F   : 'd' is now an alias for 'ls -F'\nalias d ls -F    : Works if 'alias' not a python name\nalist = %alias   : Get list of aliases to 'alist'\ncd /usr/share    : Obvious. cd -<tab> to choose from visited dirs.\n%cd??            : See help AND source for magic %cd\n%timeit x=10     : time the 'x=10' statement with high precision.\n%%timeit x=2**100\nx**100           : time 'x**100' with a setup of 'x=2**100'; setup code is not\n                   counted.  This is an example of a cell magic.\n\nSystem commands:\n\n!cp a.txt b/     : System command escape, calls os.system()\ncp a.txt b/      : after %rehashx, most system commands work without !\ncp ${f}.txt $bar : Variable expansion in magics and system commands\nfiles = !ls /usr : Capture system command output\nfiles.s, files.l, files.n: \"a b c\", ['a','b','c'], 'a\\nb\\nc'\n\nHistory:\n\n_i, _ii, _iii    : Previous, next previous, next next previous input\n_i4, _ih[2:5]    : Input history line 4, lines 2-4\nexec(_i81)       : Execute input history line #81 again\n%rep 81          : Edit input history line #81\n_, __, ___       : previous, next previous, next next previous output\n_dh              : Directory history\n_oh              : Output history\n%hist            : Command history of current session.\n%hist -g foo     : Search command history of (almost) all sessions for 'foo'.\n%hist -g         : Command history of (almost) all sessions.\n%hist 1/2-8      : Command history containing lines 2-8 of session 1.\n%hist 1/ ~2/     : Command history of session 1 and 2 sessions before current.\n%hist ~8/1-~6/5  : Command history from line 1 of 8 sessions ago to\n                   line 5 of 6 sessions ago.\n%edit 0/         : Open editor to execute code with history of current session.\n\nAutocall:\n\nf 1,2            : f(1,2)  # Off by default, enable with %autocall magic.\n/f 1,2           : f(1,2) (forced autoparen)\n,f 1 2           : f(\"1\",\"2\")\n;f 1 2           : f(\"1 2\")\n\nRemember: TAB completion works in many contexts, not just file names\nor python names.\n\nThe following magic functions are currently available:\n\n%alias:\n    Define an alias for a system command.\n%alias_magic:\n    ::\n%autoawait:\n\n%autocall:\n    Make functions callable without having to type parentheses.\n%automagic:\n    Make magic functions callable without having to type the initial %.\n%autosave:\n    Set the autosave interval in the notebook (in seconds).\n%bookmark:\n    Manage IPython's bookmark system.\n%cat:\n    Alias for `!cat`\n%cd:\n    Change the current working directory.\n%clear:\n    Clear the terminal.\n%colors:\n    Switch color scheme for prompts, info system and exception handlers.\n%conda:\n    Run the conda package manager within the current kernel.\n%config:\n    configure IPython\n%connect_info:\n    Print information for connecting other clients to this kernel\n%cp:\n    Alias for `!cp`\n%debug:\n    ::\n%dhist:\n    Print your history of visited directories.\n%dirs:\n    Return the current directory stack.\n%doctest_mode:\n    Toggle doctest mode on and off.\n%ed:\n    Alias for `%edit`.\n%edit:\n    Bring up an editor and execute the resulting code.\n%env:\n    Get, set, or list environment variables.\n%gui:\n    Enable or disable IPython GUI event loop integration.\n%hist:\n    Alias for `%history`.\n%history:\n    ::\n%killbgscripts:\n    Kill all BG processes started by %%script and its family.\n%ldir:\n    Alias for `!ls -F -o --color %l | grep /$`\n%less:\n    Show a file through the pager.\n%lf:\n    Alias for `!ls -F -o --color %l | grep ^-`\n%lk:\n    Alias for `!ls -F -o --color %l | grep ^l`\n%ll:\n    Alias for `!ls -F -o --color`\n%load:\n    Load code into the current frontend.\n%load_ext:\n    Load an IPython extension by its module name.\n%loadpy:\n    Alias of `%load`\n%logoff:\n    Temporarily stop logging.\n%logon:\n    Restart logging.\n%logstart:\n    Start logging anywhere in a session.\n%logstate:\n    Print the status of the logging system.\n%logstop:\n    Fully stop logging and close log file.\n%ls:\n    Alias for `!ls -F --color`\n%lsmagic:\n    List currently available magic functions.\n%lx:\n    Alias for `!ls -F -o --color %l | grep ^-..x`\n%macro:\n    Define a macro for future re-execution. It accepts ranges of history,\n%magic:\n    Print information about the magic function system.\n%man:\n    Find the man page for the given command and display in pager.\n%matplotlib:\n    ::\n%mkdir:\n    Alias for `!mkdir`\n%more:\n    Show a file through the pager.\n%mv:\n    Alias for `!mv`\n%notebook:\n    ::\n%page:\n    Pretty print the object and display it through a pager.\n%pastebin:\n    Upload code to dpaste.com, returning the URL.\n%pdb:\n    Control the automatic calling of the pdb interactive debugger.\n%pdef:\n    Print the call signature for any callable object.\n%pdoc:\n    Print the docstring for an object.\n%pfile:\n    Print (or run through pager) the file where an object is defined.\n%pinfo:\n    Provide detailed information about an object.\n%pinfo2:\n    Provide extra detailed information about an object.\n%pip:\n    Run the pip package manager within the current kernel.\n%popd:\n    Change to directory popped off the top of the stack.\n%pprint:\n    Toggle pretty printing on/off.\n%precision:\n    Set floating point precision for pretty printing.\n%prun:\n    Run a statement through the python code profiler.\n%psearch:\n    Search for object in namespaces by wildcard.\n%psource:\n    Print (or run through pager) the source code for an object.\n%pushd:\n    Place the current dir on stack and change directory.\n%pwd:\n    Return the current working directory path.\n%pycat:\n    Show a syntax-highlighted file through a pager.\n%pylab:\n    ::\n%qtconsole:\n    Open a qtconsole connected to this kernel.\n%quickref:\n    Show a quick reference sheet \n%recall:\n    Repeat a command, or get command to input line for editing.\n%rehashx:\n    Update the alias table with all executable files in $PATH.\n%reload_ext:\n    Reload an IPython extension by its module name.\n%rep:\n    Alias for `%recall`.\n%rerun:\n    Re-run previous input\n%reset:\n    Resets the namespace by removing all names defined by the user, if\n%reset_selective:\n    Resets the namespace by removing names defined by the user.\n%rm:\n    Alias for `!rm`\n%rmdir:\n    Alias for `!rmdir`\n%run:\n    Run the named file inside IPython as a program.\n%save:\n    Save a set of lines or a macro to a given filename.\n%sc:\n    Shell capture - run shell command and capture output (DEPRECATED use !).\n%set_env:\n    Set environment variables.  Assumptions are that either \"val\" is a\n%store:\n    Lightweight persistence for python variables.\n%sx:\n    Shell execute - run shell command and capture output (!! is short-hand).\n%system:\n    Shell execute - run shell command and capture output (!! is short-hand).\n%tb:\n    Print the last traceback.\n%time:\n    Time execution of a Python statement or expression.\n%timeit:\n    Time execution of a Python statement or expression\n%unalias:\n    Remove an alias\n%unload_ext:\n    Unload an IPython extension by its module name.\n%who:\n    Print all interactive variables, with some minimal formatting.\n%who_ls:\n    Return a sorted list of all interactive variables.\n%whos:\n    Like %who, but gives some extra information about each variable.\n%xdel:\n    Delete a variable, trying to clear it from anywhere that\n%xmode:\n    Switch modes for the exception handlers.\n%%!:\n    Shell execute - run shell command and capture output (!! is short-hand).\n%%HTML:\n    Alias for `%%html`.\n%%SVG:\n    Alias for `%%svg`.\n%%bash:\n    %%bash script magic\n%%capture:\n    ::\n%%debug:\n    ::\n%%file:\n    Alias for `%%writefile`.\n%%html:\n    ::\n%%javascript:\n    Run the cell block of Javascript code\n%%js:\n    Run the cell block of Javascript code\n%%latex:\n    Render the cell as a block of LaTeX\n%%markdown:\n    Render the cell as Markdown text block\n%%perl:\n    %%perl script magic\n%%prun:\n    Run a statement through the python code profiler.\n%%pypy:\n    %%pypy script magic\n%%python:\n    %%python script magic\n%%python2:\n    %%python2 script magic\n%%python3:\n    %%python3 script magic\n%%ruby:\n    %%ruby script magic\n%%script:\n    ::\n%%sh:\n    %%sh script magic\n%%svg:\n    Render the cell as an SVG literal\n%%sx:\n    Shell execute - run shell command and capture output (!! is short-hand).\n%%system:\n    Shell execute - run shell command and capture output (!! is short-hand).\n%%time:\n    Time execution of a Python statement or expression.\n%%timeit:\n    Time execution of a Python statement or expression\n%%writefile:\n    :: \n```", "```\n%script z3\n(echo \"starting z3\")\n(declare-const x Int)\n(declare-const y Int)\n(assert (= y (+ x 1)))\n(check-sat)\n(get-model) \n```", "```\n Cell In [16], line 2\n    (echo \"starting z3\")\n          ^\nSyntaxError: invalid syntax \n```"]