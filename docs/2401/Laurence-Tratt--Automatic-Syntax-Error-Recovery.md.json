["```\nParsing error at line 2 column 13\\. Repair sequences found:\n 1: Insert ), Shift {, Delete if, Delete true 2: Insert ), Shift {, Shift if, Insert (, Shift true, Insert ) \n```", "```\nclass C {\n  void f() {\n { } } } \n```", "```\nclass C {\n  void f() {\n  if (true) { }\n } } \n```", "```\nParsing error at line 2 column 11\\. Repair sequences found:\n 1: Insert , 2: Insert = 3: Delete y \n```", "```\nclass C { int x z() { } }  \n```", "```\nParsing error at line 2 column 11\\. Repair sequences found:\n 1: Delete z 2: Insert ; \n```", "```\nParsing error at line 2 column 11\\. Repair sequences found:\n 1: Insert = 2: Insert ; 3: Delete z Parsing error at line 2 column 15\\. Repair sequences found:\n 1: Insert ; \n```", "```\n. \"ERROR\" \n```", "```\nErrorRule: \"ERROR\" ; \n```", "```\nParsing error at line 2 column 11\\. Repair sequences found:\n 1: Delete #, Delete y 2: Insert ,, Delete # 3: Insert =, Delete # \n```", "```\nExpr -> Result<u64, Box<dyn Error>>:\n Expr '+' Term {\n Ok($1?.checked_add($3?)\n .ok_or_else(||\n Box::<dyn Error>::from(\"Overflow detected.\"))?)\n } | Term { $1 } ;   Term -> Result<u64, Box<dyn Error>>:\n Term '*' Factor {\n Ok($1?.checked_mul($3?)\n .ok_or_else(||\n Box::<dyn Error>::from(\"Overflow detected.\"))?)\n } | Factor { $1 } ;   Factor -> Result<u64, Box<dyn Error>>:\n '(' Expr ')' { $2 }\n | 'INT' {\n  parse_int($lexer.span_str($1.map_err(|_|\n \"<evaluation aborted>\")?.span()))\n } ; \n```", "```\nExpr -> Result<u64, Box<dyn Error>>:\n Expr '+' Term { $1? + $3? }\n | Term { $1 } \n```", "```\nFactor -> Result<u64, Box<dyn Error>>:\n '(' Expr ')' { $2 }\n | 'INT' {\n  parse_int($1.map_err(|_| \"<evaluation aborted>\")?)\n } ; \n```", "```\nInsert x, Insert +, Insert y Insert x, Insert +, Insert z Insert x, Insert -, Insert y Insert x, Insert -, Insert z \n```", "```\nInsert x, Insert {+, -}, Insert {y, z} \n```"]