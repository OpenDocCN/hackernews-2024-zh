- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:20:01'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:20:01
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'How to Learn Nix, Part 49: nix-direnv is a huge quality of life improvement'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何学习 Nix，第 49 部分：nix-direnv 是一个巨大的生活质量改善
- en: 来源：[https://ianthehenry.com/posts/how-to-learn-nix/nix-direnv/](https://ianthehenry.com/posts/how-to-learn-nix/nix-direnv/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ianthehenry.com/posts/how-to-learn-nix/nix-direnv/](https://ianthehenry.com/posts/how-to-learn-nix/nix-direnv/)
- en: The *reason* I [discovered an ancient blog post](/posts/how-to-learn-nix/installing-nix-on-macos/)
    the other day was that I had something new to say about Nix for the first time
    in over two years.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我之所以[发现了一篇古老的博客文章](/posts/how-to-learn-nix/installing-nix-on-macos/)，是因为我有了两年多以来第一次对
    Nix 有新的看法。
- en: 'The thing I want to say is this: [`nix-direnv`](https://github.com/nix-community/nix-direnv)
    is great. It fixes roughly every problem that I’ve had with `nix-shell`, and does
    so in a much nicer way than my previous ad-hoc solutions.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我想说的是：[`nix-direnv`](https://github.com/nix-community/nix-direnv) 真的很棒。它解决了我遇到的每个`nix-shell`问题，而且比以前的临时解决方案要好得多。
- en: This is important because I *mostly* just use Nix to document and install per-project
    native dependencies. I do use it to install “global” tools as well, but that is
    [rarely very interesting](https://ianthehenry.com/posts/janet-game/how-to-patch-emacs/),
    and most of my interaction with Nix these days consists of editing small `shell.nix`
    files.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要，因为我*主要*只是使用 Nix 来记录和安装每个项目的本地依赖。我也会用它来安装“全局”工具，但那是[很少很有趣的](https://ianthehenry.com/posts/janet-game/how-to-patch-emacs/)，而我如今与
    Nix 的大部分交互都是编辑小小的`shell.nix`文件。
- en: But it took a bit of doing to get to the point that I felt *good* about using
    Nix for this. For one thing, shells don’t register GC roots, which means that
    every time you collect garbage you have to re-download all the dependencies for
    the project you were working on. We overcame that hurdle in [part 37](/posts/how-to-learn-nix/saving-your-shell/),
    by making a custom wrapper around `nix-shell` that sets up GC roots correctly,
    but it was surprisingly difficult.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但要让我感觉*好*使用 Nix 还需要一些努力。首先，shell 不会注册 GC 根，这意味着每次收集垃圾时，您都必须重新下载您正在处理的项目的所有依赖。我们在[第
    37 部分](/posts/how-to-learn-nix/saving-your-shell/)克服了这个障碍，通过制作一个围绕`nix-shell`的自定义包装器来正确设置
    GC 根，但这实际上是相当困难的。
- en: For another thing, Nix is pretty insistent that you use *bash* as your interactive
    shell. I figured out a workaround for that in [Nix classic](/posts/how-to-learn-nix/nix-zshell/),
    but [essentially failed](/posts/how-to-learn-nix/nix-develop/) to make `nix develop`
    similarly usable.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，Nix 相当坚持你使用*bash*作为交互式 shell。我在[Nix 经典](/posts/how-to-learn-nix/nix-zshell/)中找到了一个解决方法，但在[nix-develop](/posts/how-to-learn-nix/nix-develop/)中实际上未能使`nix
    develop`同样可用。
- en: '[`nix-direnv`](https://github.com/nix-community/nix-direnv) solves both of
    these problems. Instead of spawning a new shell, it just adds environment variables
    to your existing shell. And when it evaluates `shell.nix`, it automatically registers
    the result as a GC root.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nix-direnv`](https://github.com/nix-community/nix-direnv) 解决了这两个问题。它不是生成一个新的
    shell，而是将环境变量添加到您现有的 shell 中。并且当它评估`shell.nix`时，它会自动将结果注册为 GC 根。'
- en: It also only re-evaluates `shell.nix` when it actually changes, which means
    that it in the typical case there’s no startup time. In contrast, my GC-root-installing
    wrapper takes about 750ms to open a typical shell (raw `nix-shell`, without the
    GC root evaluation dance, takes only 400ms). This doesn’t sound very long, because
    it’s not – I’m running Nix on what I can only characterize as a supercomputer.
    But I originally installed Nix on a laptop that pre-dated germ theory, and its
    startup latency was a lot more annoying.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 它还仅在`shell.nix`实际更改时重新评估，这意味着在典型情况下没有启动时间。相比之下，我的 GC 根安装包装器需要大约 750ms 打开一个典型的
    shell（原始的`nix-shell`，不涉及 GC 根评估过程，只需 400ms）。这听起来并不算很长，因为它确实不长——我在我只能称之为超级计算机的设备上运行
    Nix。但最初我是在一台比起菌理论还早的笔记本电脑上安装了 Nix，它的启动延迟更加令人讨厌。
- en: '`nix-direnv` also automatically updates the environment when `shell.nix` changes,
    so you don’t have to close and re-open your `nix-shell` whenever you add a dependency.
    Not only is this ergonomically better, but it also means that you don’t mess up
    your shell history every time you add a dependency or exit a project.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`nix-direnv` 还会在 `shell.nix` 更改时自动更新环境，所以每次添加依赖时都不需要关闭和重新打开`nix-shell`。这不仅在人体工程学上更好，而且意味着每次添加依赖或退出项目时都不会弄乱您的
    shell 历史记录。'
- en: I had never used [`direnv`](https://direnv.net/) before, and to this date the
    only thing I’ve used it for is managing my Nix shells. But it’s a general tool
    for managing per-directory environment variables, which is *essentially* all that
    `nix-shell` is. `nix-shell` can also register bash functions – if you’re using
    bash – which is useful if you want to use it to debug a derivation. But for my
    purposes, environment variables are all I really need.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我以前从未使用过[`direnv`](https://direnv.net/)，直到现在我唯一使用它的东西就是管理我的Nix shells。但它是一个通用的管理每个目录环境变量的工具，这基本上就是`nix-shell`的全部内容。`nix-shell`还可以注册bash函数
    - 如果你使用的是bash - 这对于想要用它调试推导很有用。但对我来说，环境变量是我真正需要的全部。
- en: '`direnv` has some built-in support for Nix, but it isn’t great; [direnv publishes
    a table outlining some of the advantages](https://github.com/direnv/direnv/wiki/Nix#some-factors-to-consider)
    of using `nix-direnv`. `nix-direnv` is some sort of plugin(?) that replaces the
    native Nix support with something much better. And it’s great. It makes the “reproducible
    developer environment” aspect of Nix just work™. And it’s pretty easy to use:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`direnv`对Nix有一些内置支持，但不是很好；[direnv发布了一张表格，概述了一些使用`nix-direnv`的优点](https://github.com/direnv/direnv/wiki/Nix#some-factors-to-consider)。`nix-direnv`是一种什么样的插件(?)，用更好的东西替代了原生的Nix支持。而且非常棒。它使Nix的“可重复的开发环境”方面变得很顺畅™。而且使用起来很容易：'
- en: First off, install `nixpkgs.direnv` and `nixpkgs.nix-direnv`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，安装`nixpkgs.direnv`和`nixpkgs.nix-direnv`。
- en: I installed them with `nix-env`, using the same declarative wrapper that I wrote
    in [part 22](/posts/how-to-learn-nix/declarative-user-environment/). If you install
    `nix-direnv` in a different way, the following will be different.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我用`nix-env`安装了它们，使用的是我在[part 22](/posts/how-to-learn-nix/declarative-user-environment/)中编写的相同的声明式封装。如果你以不同的方式安装`nix-direnv`，下面的内容会有所不同。
- en: 'Installing `nix-direnv` doesn’t “enable” the plugin; you have to separately
    tell `direnv` about it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`nix-direnv`不会“启用”插件；你必须单独告诉`direnv`它：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once you do that, you have to run the following commands in every directory
    that you want to nix-shellify:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你这样做了，你就必须在每个想要nix-shellify的目录中运行以下命令：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And you’re done. That’s it! Now every time you navigate to that directory, you’ll
    have&mldr;
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。就这样！现在每次你进入那个目录，你都会有&mldr;
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Oh. Well that’s not great.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 噢。好像不太好。
- en: By default `direnv` prints every environment variable that it adds, removes,
    or changes. Which makes sense if you’re using it for, like, credentials or something,
    but for Nix shells it’s just a waste of scrollback.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`direnv`会打印它添加、删除或更改的每个环境变量。如果你用它来处理像凭据之类的东西，这是有意义的，但对于Nix shells来说，这只是浪费滚动条。
- en: 'There’s not really a simple way to suppress printing that giant `export` line,
    but you can hack it away by adding something like this to your `.zshrc`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 没有简单的方法来禁止打印那个巨大的`export`行，但是你可以通过在你的`.zshrc`中添加类似以下内容来将其屏蔽掉：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: (The `.`s in the regex exclude the “dim text” control characters at the beginning
    of the line.)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: (正则表达式中的`.`排除了行首的“暗文本”控制字符。)
- en: 'That removes the giant export line without removing the rest of the input.
    And now:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就去掉了巨大的导出行而不移除其他输入。现在：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Ahhh. That’s better.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 啊。好多了。
- en: 'I’ve been using `nix-direnv` for a few months now, and I must say: I wish that
    I had installed it sooner. It’s a *much* nicer experience than the default `nix-shell`,
    and I’m happy that I can get rid of the bespoke hacks that I’ve accrued over the
    years.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经使用`nix-direnv`几个月了，我必须说：我希望我早点安装它。它比默认的`nix-shell`体验*好多了*，我很高兴我可以摆脱多年来积累的特殊技巧。
- en: '&mldr;almost. The one thing this does not help with is `nix-shell -p`. `nix-shell
    -p` is a useful way to “temporarily” install packages without actually putting
    them on your PATH, and I still use my zsh hack so that `nix-shell -p` doesn’t
    drop me into a bash session. Although I do this rarely enough that I could probably
    just suffer through it.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '&mldr;几乎。这个方法唯一不帮助的是`nix-shell -p`。`nix-shell -p`是一种有用的方式，可以“临时”安装软件包而不实际将它们放在你的PATH上，我仍然使用我的zsh
    hack，以便`nix-shell -p`不会将我置于bash会话中。虽然我很少这样做，但我可能只能忍受它。'
