["```\nfn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {  return Ok(()); // don't actually do any analysis! ... \n```", "```\nif matches!(diagnostic.level, Level::Error { lint: true }) {  self.bump_lint_err_count(); } \n```", "```\nfn hold_my_vec<T>(_: Vec<T>) {}   fn main() {  let v = vec![2, 3, 5, 7, 11, 13, 17]; hold_my_vec(v); let element = v.get(3);   println!(\"I got this element from the vector: {:?}\", element); } \n```", "```\nerror[E0382]: borrow of moved value: `v`  --> src/main.rs:6:19 | 4    |     let v = vec![2, 3, 5, 7, 11, 13, 17];  |         - move occurs because `v` has type `Vec<i32>`, which does not implement the `Copy` trait 5    |     hold_my_vec(v);  |                 - value moved here 6    |     let element = v.get(3);  |                   ^^^^^^^^ value borrowed here after move | = note: borrow occurs due to deref coercion to `[i32]` note: deref defined here  --> /home/smit/rustc-dev/rust/library/alloc/src/vec/mod.rs:2434:5 | 2434 |     type Target = [T];  |     ^^^^^^^^^^^^^^^^^^   For more information about this error, try `rustc --explain E0382`.  Finished dev [unoptimized + debuginfo] target(s) in 0.00s Running `target/debug/rustnoerror` I got this element from the vector: Some(-501713657) \n```", "```\nerror[E0499]: cannot borrow `owned` as mutable more than once at a time  --> src/main.rs:6:22 | 5  |     let mut_1 = &mut owned[0];  |                      ----- first mutable borrow occurs here 6  |     let mut_2 = &mut owned[1];  |                      ^^^^^ second mutable borrow occurs here ... 10 |     let undefined = *mut_1 + *mut_2;  |                     ------ first borrow later used here   error[E0505]: cannot move out of `owned` because it is borrowed  --> src/main.rs:9:10 | 5  |     let mut_1 = &mut owned[0];  |                      ----- borrow of `owned` occurs here ... 9  |     drop(owned);  |          ^^^^^ move out of `owned` occurs here 10 |     let undefined = *mut_1 + *mut_2;  |                     ------ borrow later used here   Some errors have detailed explanations: E0499, E0505. For more information about an error, try `rustc --explain E0499`.  Finished dev [unoptimized + debuginfo] target(s) in 0.00s Running `target/debug/rustnoerror` 1511396695 \n```"]