- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:38:20'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:38:20'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Laurence Tratt: Practising Programming'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Laurence Tratt：练习编程
- en: 来源：[https://tratt.net/laurie/blog/2022/practising_programming.html](https://tratt.net/laurie/blog/2022/practising_programming.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://tratt.net/laurie/blog/2022/practising_programming.html](https://tratt.net/laurie/blog/2022/practising_programming.html)
- en: When we see a world-class musician flawlessly play challenging music, it can
    be tempting to imagine that they were always able to do so. A moment’s thought
    makes it obvious that they must have had to spend huge amounts of time practising
    basic techniques in order to reach that level. What’s less obvious is that they
    have to continue spending considerable amounts of time simply to maintain that
    technique, let alone expand it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们看到世界一流的音乐家无缺地演奏具有挑战性的音乐时，很容易想象他们总是能够做到这一点。稍加思考就会明显地意识到，他们必须花费大量时间练习基本技巧才能达到那个水平。不那么明显的是，他们必须继续花费相当多的时间来维持那种技术，更不用说扩展它了。
- en: In contrast, in programming, we have only a haphazard notion of how one should
    go about obtaining sufficient technique to become good enough to write good software;
    and we have almost no notion of continued practise to maintain or expand that
    technique. Often overtaken by life events – notably, though not only, the requirement
    to earn money to support a family – many programmers implicitly finish the bulk
    of their learning early on, and some stop learning entirely.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，在编程中，我们对如何获得足够的技术以成为写出优秀软件的人有着零零散散的概念；而且我们几乎没有持续练习以维持或扩展那种技术的概念。许多程序员往往被生活事件所超越——特别是，尽管不仅仅是这样，赚钱养家的要求——许多程序员在早期隐含地完成了大部分学习，有些甚至停止了学习。
- en: As someone of rather limited talent, I have long been aware that if I’m not
    proactive about learning, I will fall even further behind where I would like to
    be. While some people enjoy practising programming with small puzzles (the programming
    equivalent of musical scales perhaps?), I am too grumpy to find them enlightening
    or enjoyable. Instead, I’ve found that real-world tasks that require me to do
    something new are where I most improve, and most enjoy improving, my programming
    skills. Fortunately, and at first accidentally, I’ve found that it’s relatively
    easy for me to continue practising programming on real-world tasks as part of
    my day-to-day life.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个天赋有限的人，我早就意识到如果我不积极学习，我将会比我希望的更落后。虽然有些人喜欢通过解决小难题来练习编程（也许相当于音乐中的音阶？），但我太脾气暴躁了，无法觉得它们有启发性或令人愉快。相反，我发现真正需要我做一些新事情的现实任务是我提高编程技能、并且最享受提高编程技能的地方。幸运的是，一开始是意外的，我发现作为我日常生活的一部分，继续练习编程在现实任务上是相对容易的。
- en: 'One habit I have is to try to automate most tasks that look automatable. Especially
    when I was younger, people would laugh at this tendency: “you’ve spent 4 hours
    to automate what you could have done in 2.” They were nearly always right in the
    short term, but what’s astonishing is how often, with only minor variations, the
    same tasks crop up repeatedly . If that same 2 hour task crops up twice, I have
    broken even, and if it comes up three times, I’ve come out ahead.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个习惯，那就是尽可能自动化看起来可自动化的大多数任务。特别是在我年轻的时候，人们会嘲笑这种倾向：“你花了4个小时去自动化一个你本可以用2个小时完成的任务。”
    他们在短期内几乎总是对的，但令人惊讶的是，同样的任务往往会以微小的变化重复出现。如果同样的2小时任务出现了两次，我就实现了成本回收，如果出现了三次，我就赚了。
- en: 'When I started trying to automate things, I was pretty bad at doing so: I was
    notably less competent than my peers. But just as a musician gains compound interest
    from practising multiple hours a day, so did I. Each task I automated not only
    improved my basic programming technique, but also opened my eyes to new techniques
    and tools that might help me in future tasks. For example, a lot of the early
    things I automated boiled down to text processing: parsing input, transforming
    it, and outputting it in a different form. I didn’t know that there was a theory
    of parsing (let alone parsing tools!) but, gradually, I built up an understanding
    of reasonable ways to go about this kind of task. Something similar happened for
    other areas such as GUI and systems programming. Broadly speaking, in my teens
    and early 20s I was often running a net loss in terms of time; I’d broken even
    by my mid to late 20s; and by the time I was 30 it was very clear to me that my
    investments had paid off. Those more talented than I would probably have reached
    this point well before that time, but better late than never!'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始尝试自动化事务时，我的能力很差：我明显比我的同行更不称职。但就像音乐家每天练习多个小时会产生复利效应一样，我也是如此。我自动化的每项任务不仅改善了我的基本编程技巧，还让我看到了可能帮助我解决未来任务的新技术和工具。例如，我早期自动化的许多事情归结为文本处理：解析输入，转换它，并以不同的形式输出它。我不知道有解析的理论（更不用说解析工具了！），但渐渐地，我建立了一种解决这类任务的合理方式的理解。对于其他领域（如
    GUI 和系统编程）也发生了类似的情况。总的来说，在我十几岁和二十出头的时候，我的时间通常是负增长的；到了我二十多岁，我达到了平衡；到我三十岁的时候，我非常清楚我的投资已经得到了回报。比我更有天赋的人可能在此之前就已经达到了这一点，但迟做总比不做好！
- en: 'These days, mostly because of the time that other responsibilities require,
    I am more careful about which tasks I’m willing to invest time in automating.
    Experience has given me a better sense of what tasks are plausibly automatable
    and what tasks I might learn something more general from. I also have a wider
    palate of tools to call upon: for example, I now use clever tricks in my text
    editor to perform some text processing tasks that I once would have written a
    program for. However, if a task looks automatable, seems like it might allow me
    to learn something more general, and isn’t covered by other tools, then I’m now
    more willing than I used to be to invest considerable time in it.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，主要是因为其他职责需要的时间，我更加谨慎地选择要投资时间自动化的任务。经验使我更清楚哪些任务可以自动化，哪些任务可能让我学到更通用的知识。我现在也有更广泛的工具可以使用：例如，我现在在我的文本编辑器中使用一些聪明的技巧来执行一些文本处理任务，以前我可能会编写一个程序。然而，如果一个任务看起来可以自动化，似乎可能让我学到更通用的东西，并且没有其他工具可以完成，那么我现在比过去更愿意投入大量时间来完成它。
- en: 'The first time I did that was for [extsmaild](/laurie/src/extsmail/). I was
    spending a lot of time on trains and planes and reliably sending email was a problem
    . I then realised that this might be an opportunity to understand how to write
    a “proper” Unix daemon in C. It soon became clear to me that the major challenge
    in a daemon is how to keep going in the face of undesirable situations (including,
    but not only, outright errors): these days, extsmaild can recover from nearly
    anything except a lack of memory (which, given its frugality with resources, is
    an unlikely scenario). I had no idea *how* many different undesirable situations
    such a program could encounter and consequently I have learnt a considerable amount
    from writing and maintaining extsmaild.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我第一次这样做是为了 [extsmaild](/laurie/src/extsmail/)。我在火车和飞机上花了很多时间，可靠地发送电子邮件是个问题。后来我意识到这可能是一个了解如何用
    C 语言编写一个“正确的” Unix 守护进程的机会。很快我就意识到，在守护进程中的主要挑战是如何在面对不良情况时保持运行（包括但不限于明显的错误）：这些天，extsmaild
    几乎可以从任何情况中恢复，除了缺少内存（考虑到其节约资源的特点，这是一个不太可能的情况）。我不知道这样一个程序可能会遇到多少不同的不良情况，因此从编写和维护
    extsmaild 中我学到了很多。
- en: 'When, more recently, I needed a way of executing commands based on actions
    on GitHub PRs, I felt I wouldn’t learn much by writing another C daemon. Instead,
    I wrote [snare](/laurie/src/snare/) in Rust, because I wanted to understand if
    Rust daemons could be as robust as their C counterparts. Broadly speaking my conclusion
    was “yes”. I also wanted to learn about async/await, a technique I’d never previously
    used. snare incorporates both an HTTP server (to listen to GitHub events) and
    a job runner (which waits upon child processes, collecting their stdout/stderr
    output). I started with the HTTP server, but I found async/await to be a frustrating
    experience: even in a very small chunk of code, its tentacles spread more widely
    than I expected, and I found the resulting control flow hard to reason about.
    When I got to the job runner I reverted back to traditional Unix `poll` ing. `poll`
    is a horrible interface that’s difficult to use correctly, but for me it has the
    virtue that it isolates the horrors to one place. That wasn’t the result from
    practising that I expected, but it’s useful nonetheless.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，当我需要一种基于 GitHub PRs 动作执行命令的方法时，我觉得写另一个 C 守护程序学到的东西不多。相反，我用 Rust 写了 [snare](/laurie/src/snare/)，因为我想知道
    Rust 守护程序是否和它们的 C 对应物一样健壮。总的来说，我的结论是“是”。我还想学习一下 async/await，这是我以前从未使用过的技术。snare
    包括一个 HTTP 服务器（用于监听 GitHub 事件）和一个作业运行程序（等待子进程，收集它们的 stdout/stderr 输出）。我从 HTTP 服务器开始，但我发现
    async/await 是一种令人沮丧的经历：即使在一个非常小的代码块中，它的触角扩展得比我预期的更广泛，我发现由此产生的控制流很难理解。当我转到作业运行程序时，我又回到了传统的
    Unix `poll`。`poll` 是一个可怕的接口，很难正确使用，但对我来说，它的优点是将恐怖局限在一个地方。这不是我预期的练习结果，但它仍然很有用。
- en: 'When I wanted to add a [newsletter subscription](/laurie/newsletter/) to my
    website, I was briefly tempted to use an external service, before realising that
    I didn’t want to worry about the resulting privacy issues. Based on my snare experience,
    I felt that writing a Rust daemon to handle the backend tasks of a newsletter
    system would be relatively easy, but I had never written any JavaScript in a webpage:
    small though it was, the JavaScript that makes the subscription system more user-friendly
    taught me quite a bit. When I came to add a comments system to my blog, I was
    able to be slightly more ambitious in what I expected of JavaScript.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我想在我的网站上添加一个 [newsletter 订阅](/laurie/newsletter/) 时，我曾一时冲动地想使用外部服务，直到意识到我不想担心由此产生的隐私问题。基于我的
    snare 经验，我觉得编写一个 Rust 守护程序来处理 newsletter 系统的后端任务相对容易，但我从未在网页中编写过任何 JavaScript：尽管它很小，但使订阅系统更用户友好的
    JavaScript 教会了我不少。当我要向我的博客添加评论系统时，我能够对 JavaScript 的期望稍微大胆一些。
- en: As that last example might suggest, some of my programming practise is smaller
    scale, though still nearly always on real-world code. For example, sometimes I
    will try a new, or different, library to see if it helps me solve a familiar task
    quicker or better. Sometimes I might look at a function I’ve written and try to
    rewrite it to make it easier to understand, perhaps using a language feature I
    rarely use. The time I’m investing is small, and the result of such practise is
    much more likely to be a “failure” than in the bigger cases, but there are successes
    and, small though they are, they accumulate over time. The most noticeable change,
    at least to me, is that I’ve gradually become better at writing code that is concise
    while, I hope, still being relatively easy to understand.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如最后一个例子可能暗示的那样，我的一些编程练习规模较小，但几乎总是在实际的代码中。例如，有时我会尝试一个新的或不同的库，看看它是否能帮助我更快或更好地解决一个熟悉的任务。有时候我可能会看一下我写的一个函数，尝试重写它以使其更容易理解，也许使用我很少使用的语言特性。我投入的时间很少，这样的练习的结果更有可能是一个“失败”，而不是在更大的情况下，但也有成功，尽管它们很小，但它们随着时间的推移而积累。最明显的变化，至少对我来说，是我逐渐变得更擅长编写简洁的代码，同时希望它仍然相对容易理解。
- en: For me, at least, practising programming is something I do frequently. Fortunately
    I’m able to incorporate it into my day-to-day life, and fortunately I enjoy the
    process! Do you deliberately practise your programming skills? If so, how do you
    go about it? Feel free to comment below!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，至少编程练习是我经常做的事情。幸运的是，我能将其融入我的日常生活中，幸运的是，我享受这个过程！你有意识地练习你的编程技能吗？如果是，你是怎么做的？欢迎在下面评论！
- en: '**Acknowledgements**: thanks to [Edd Barrett](http://www.eddbarrett.co.uk/),
    [Lukas Diekmann](https://diekmann.uk/), and [Dan Luu](https://danluu.com/) for
    comments.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**致谢**：感谢 [Edd Barrett](http://www.eddbarrett.co.uk/)、[Lukas Diekmann](https://diekmann.uk/)
    和 [Dan Luu](https://danluu.com/) 的评论。'
- en: '[Newer](/laurie/blog/2022/where_do_research_problems_come_from.html)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[较新](/laurie/blog/2022/where_do_research_problems_come_from.html)'
- en: 2022-04-20 08:00
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 2022-04-20 08:00
- en: '[Older](/laurie/blog/2022/making_rust_a_better_fit_for_cheri_and_other_platforms.html)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[较旧](/laurie/blog/2022/making_rust_a_better_fit_for_cheri_and_other_platforms.html)'
- en: 'If you’d like updates on new blog posts: follow me on'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想获取新博客文章的更新：关注我
- en: '[Mastodon](https://mastodon.social/@ltratt)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[Mastodon](https://mastodon.social/@ltratt)'
- en: or
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[Twitter](https://twitter.com/laurencetratt)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[Twitter](https://twitter.com/laurencetratt)'
- en: ; or
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: ；或
- en: '[subscribe to the RSS feed](../blog.rss)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[订阅 RSS 源](../blog.rss)'
- en: ; or
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: ；或
- en: '[subscribe to email updates](/laurie/newsletter/)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[订阅电子邮件更新](/laurie/newsletter/)'
- en: ':'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: ：
- en: Footnotes
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 脚注
- en: Comments
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 评论
