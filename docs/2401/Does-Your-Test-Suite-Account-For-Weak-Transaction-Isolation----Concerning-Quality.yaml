- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:29:45'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:29:45'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Does Your Test Suite Account For Weak Transaction Isolation? | Concerning Quality
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的测试套件是否考虑到了**弱事务隔离**？ | 关于质量
- en: 来源：[https://concerningquality.com/txn-isolation-testing/](https://concerningquality.com/txn-isolation-testing/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://concerningquality.com/txn-isolation-testing/](https://concerningquality.com/txn-isolation-testing/)
- en: Transaction isolation is the kind of thing that you learn about and it fills
    you with fear. Specifically, there are *weak* transaction isolation levels which
    allow some fairly unexpected behavior. Tools like Jepsen are used to test the
    general isolation guarantees of databases, but it’s pretty uncommon to check the
    application layer for issues related to isolation anomalies. These anomalies can
    impact actual domain logic, so it’s important to understand them as well as how
    we can test them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 事务隔离是一种你学到后会让你感到恐惧的东西。具体来说，有一些*弱*事务隔离级别允许一些相当意外的行为。像 Jepsen 这样的工具用于测试数据库的一般隔离保证，但检查应用层与隔离异常相关的问题相当不常见。这些异常可能会影响实际的领域逻辑，所以理解它们以及我们如何测试它们是很重要的。
- en: What is Weak Transaction Isolation?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是**弱事务隔离**？
- en: Transaction isolation means that concurrent transactions against a database
    will be independent of one another. It’s the “I” in ACID. Unfortunately, “independence”
    in this context is a spectrum, and there are actually different isolation levels
    that are supported, each with subtly different behavior.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 事务隔离意味着对数据库的并发事务将彼此独立。这是 ACID 中的“I”。不幸的是，在这种情况下，“独立”是一个光谱，并且实际上支持不同的隔离级别，每个级别的行为略有不同。
- en: 'Here’s a quick example script which makes concurrent queries against a database
    (Postgres):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个快速示例脚本，它对数据库（Postgres）进行并发查询：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This script executes two transactions concurrently: one that reads the `txn_iso.ival`
    column two different times, and another which modifies the value of that column.
    There’s some sleeps sprinkled in so that the second read occurs after the write.
    The question is: do both reads return the same value?'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本同时执行两个事务：一个事务两次读取 `txn_iso.ival` 列的值，另一个事务修改该列的值。为了让第二次读取发生在写操作之后，这里插入了一些休眠。问题是：两次读取会返回相同的值吗？
- en: 'In Postgres, with the default transaction isolation level set, the answer is
    surprisingly no. This is an example output of running the script:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Postgres 中，使用默认的事务隔离级别，答案出乎意料地是否定的。这是运行脚本的一个示例输出：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first read will return the value of the column at the time that the read
    transaction begins, but the second read will return the value that was updated
    by the concurrent write transaction. That’s because the default level is Read
    Committed, which allows non-repeatable reads. A non-repeatable read means that
    in the span of the same transaction, queries to the same column may return different
    results! This isn’t unique to Postgres either - Read Committed is the default
    isolation level in Oracle and SQL Server as well^.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次读取将返回读事务开始时列的值，但第二次读取将返回并发写事务更新的值。这是因为默认级别是提交读，它允许非可重复读取。非可重复读取意味着在同一事务的范围内，对同一列的查询可能返回不同的结果！这在
    Postgres 中并不是唯一的 - 提交读也是 Oracle 和 SQL Server 中的默认隔离级别^。
- en: This is surprising to a lot of people, and rightfully so, since it seems to
    go against the very definition of what a transaction is. But that’s because Read
    Committed is a *weak* transaction isolation level. Weak isolation means that transactions
    aren’t truly independent from one another, and the effects of one concurrent transaction
    can be seen in another. There’s 4 isolation levels defined by the ANSI SQL standard^(.
    All but Serializable, which is the strictest, are weak and allow some kind of
    interference between transactions.)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这对很多人来说是令人惊讶的，而且理所当然，因为它似乎违背了事务的定义。但这是因为提交读是一个*弱*事务隔离级别。弱隔离意味着事务并不真正独立于彼此，一个并发事务的影响可以在另一个事务中看到。ANSI
    SQL 标准定义了 4 个隔离级别^（除了最严格的 Serializable 外，所有级别都是弱的，并允许事务之间的某种干扰）。
- en: Hopefully it’s clear why this is an issue. If you have an important column value,
    say a user’s account balance, you might query multiple different values in the
    same transaction which will surely result in a domain logic bug. Will our test
    suites catch such bugs? That depends how we set up the tests.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 希望现在清楚为什么这是一个问题了。如果你有一个重要的列值，比如用户的账户余额，你可能会在同一个事务中查询多个不同的值，这肯定会导致领域逻辑错误。我们的测试套件会捕捉到这种错误吗？这取决于我们如何设置测试。
- en: Simulating Concurrent Connections
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟并发连接
- en: The difficulty with coming up with tests that expose transaction isolation anomalies
    is that the test has to simulate multiple concurrent connections. Test cases almost
    always have the implicit assumption that they’re being executed by a single user,
    and isolation anomalies don’t show up in that scenario.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 测试出现事务隔离异常的困难在于测试必须模拟多个并发连接。测试用例几乎总是具有隐含的假设，即它们由单个用户执行，并且隔离异常不会在该场景中出现。
- en: 'As an example, here’s some oversimplified code for making outbound transfers
    from an account with overdraft protection:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是一个简化的代码，用于从具有透支保护的帐户进行出站转账：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The main logic that we want to test is that overdraft protection adds additional
    funds when there’s not enough to cover a transfer, and that the final balance
    is correct. To test this, we’re placing all queries behind a `BalanceRepository`
    interface and creating a `protectedBalanceRepo` which starts out with insufficient
    funds but updates the balance based on overdraft protection.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要测试的主要逻辑是透支保护在没有足够资金覆盖转账时添加额外资金，并且最终余额正确。为了测试这一点，我们将所有查询都放在一个`BalanceRepository`接口后面，并创建一个`protectedBalanceRepo`，该接口开始时资金不足，但根据透支保护更新余额。
- en: This is the operation from the perspective of a single user and thus a single
    DB connection, so the insufficient funds error won’t get hit. As we saw with the
    Read Committed example though, another concurrent transaction can affect a value
    that’s read multiple times. So one way to simulate a concurrent transaction is
    to simply ignore the overdraft protection and specify a different balance result
    directly.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从单个用户的角度来看的操作，因此是单个DB连接，因此不会出现资金不足的错误。但是，正如我们在Read Committed示例中看到的那样，另一个并发事务可能会影响多次读取的值。因此，模拟并发事务的一种方法是简单地忽略透支保护，并直接指定不同的余额结果。
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This test double sets up two different balance results: it’ll first return
    100, which will bypass overdraft protection, but the next balance check will return
    90 which will result in an insufficient funds error. One way this would be possible
    in real life is if multiple people have access to the same account and initiate
    a transfer in close proximity to one another.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试双重设置了两种不同的余额结果：首先将返回100，这将绕过透支保护，但下一个余额检查将返回90，这将导致资金不足的错误。在现实生活中，这种情况可能发生的一种方式是如果多个人都可以访问同一个帐户，并在彼此之间的时间接近时发起转账。
- en: 'There’s a simple fix for this failure: just don’t read the balance multiple
    times, and instead pass in the sampled balance to any function that needs it:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种失败，有一个简单的修复方法：只需不要多次读取余额，而是将采样的余额传递给任何需要它的函数：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now the logic of `checkOverdraftProtection` and `applyFundTransfer` can get
    changed to use a balance value instead of querying it. This also means that `checkOverdraftProtection`
    has to return the balance after protection is applied since `applyFundTransfer`
    used to get this value with the second balance query, and using the pre-protection
    balance will result in an insufficient funds error.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`checkOverdraftProtection`和`applyFundTransfer`的逻辑可以更改为使用余额值而不是查询它。这也意味着`checkOverdraftProtection`在应用保护后必须返回余额，因为`applyFundTransfer`过去用第二个余额查询获取此值，并且使用预保护余额将导致资金不足的错误。
- en: 'This solves the repeatable read anomaly by avoiding multiple reads, but there’s
    still a major issue: there’s a race condition between multiple concurrent transactions
    that can result in an incorrect balance.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过避免多次读取，这解决了可重复读取的异常，但仍然存在一个主要问题：多个并发事务之间存在竞争条件，可能导致余额不正确。
- en: Race Conditions and Serializability
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 竞争条件和可串行性
- en: 'To show the error we can execute two fund transfers concurrently against the
    actual DB, and we can introduce a write delay so that we can control which one
    writes last (we’d see errors even without this, but this reduces the non-determinism):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示错误，我们可以针对实际数据库同时执行两次资金转账，并引入写入延迟，以便我们可以控制最后写入的是哪一个（即使没有这个，我们也会看到错误，但这样可以减少非确定性）：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When this is run, the transfers will see the same initial balance (100), but
    the one with the write delay will overwrite the balance set in the other one.
    This also means that neither transfer will trigger overdraft protection, there
    will be no insufficient funds error, and the resulting balance will be an incorrect
    value of 20.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时，转账将看到相同的初始余额（100），但具有写入延迟的转账将覆盖另一个中设置的余额。这也意味着任何一个转账都不会触发透支保护，也不会出现资金不足的错误，最终余额将是错误的20。
- en: 'This is a *serialization anomaly*. The Postgres docs define this as:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 *序列化异常*。 Postgres 文档将其定义为：
- en: The result of successfully committing a group of transactions is inconsistent
    with all possible orderings of running those transactions one at a time.
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 成功提交一组事务的结果与依次运行这些事务的所有可能顺序的结果不一致。
- en: 'There are only two possible orderings of the two fund transfers here:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里只有两种资金转账的可能顺序：
- en: Transfer 80, then transfer 60
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转账 80，然后转账 60
- en: Transfer 60, then transfer 80
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转账 60，然后转账 80
- en: Since the starting balance is 100, both of these cases should trigger overdraft
    protection on the second transfer, and the resulting balance in both cases should
    be 60 (100 + 100 - 80 - 60). Race conditions can exist when transactions don’t
    adhere to serializability, and that’s what’s going on here - two fund transfers
    are initiated, but only one is accounted for because of a concurrent race. This
    is known as the “lost update” problem.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于初始余额为 100，这两种情况都应触发第二次转账的透支保护，结果余额应为 60（100 + 100 - 80 - 60）。 当事务不遵守可串行化时，竞争条件可能存在，这就是这里发生的情况
    - 启动了两次资金转账，但只有一次被记入账户，因为有并发竞争。 这被称为“丢失更新”问题。
- en: 'There’s a few different ways to fix this, but the simplest is to lock the row
    for the duration of the transaction with `FOR UPDATE`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的方法可以解决这个问题，但最简单的方法是使用 `FOR UPDATE` 在事务期间锁定行：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Again from the Postgres docs:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 再次来自 Postgres 文档：
- en: FOR UPDATE causes the rows retrieved by the SELECT statement to be locked as
    though for update. This prevents them from being locked, modified or deleted by
    other transactions until the current transaction ends.
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: FOR UPDATE 使由 SELECT 语句检索到的行像更新一样被锁定。 这阻止它们被其他事务锁定，修改或删除，直到当前事务结束。
- en: This means that each transaction will grab a lock on the `accounts` row and
    that will block all other transactions from modifying that row until it’s complete,
    i.e. the transactions will execute in a serializable fashion. It’s worth noting
    that this is now slower. Without the lock the transactions could truly operate
    concurrently, but now they have to wait in contention over balance updates to
    the same account. This is necessary for correct behavior, but it’s worth understanding
    the tradeoff.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着每个事务将锁定`accounts`行，直到它完成，即事务将以可串行化的方式执行。 值得注意的是，这现在变慢了。 没有锁定，事务可以真正并发运行，但现在它们必须等待争夺对同一帐户的余额更新。
    这是必要的正确行为，但值得理解权衡。
- en: Also of note, test doubles alone won’t help with this bug because the fix is
    in the real Postgres repository implementation. Test doubles are useful for testing
    application code independent of the database in many cases, but transaction isolation
    is a case where the different levels are so subtly different that it’s simpler
    to test against the real thing.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，仅仅使用测试替身是无法解决此问题的，因为修复程序在真实的 Postgres 存储库实现中。 在许多情况下，测试替身对独立于数据库的应用程序代码进行测试是有用的，但事务隔离是一种情况，其中不同级别之间的差异微妙地不同，所以最简单的方法是针对真实情况进行测试。
- en: '* * *'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Transaction isolation has a major impact on an application, both in terms of
    performance as well as its influence on domain logic. It’s important to integration
    test against the real database to make sure that a weak transaction isolation
    level isn’t the cause of concurrency bugs. To expose such bugs, we have to execute
    at least two concurrent transactions in a test case. Unfortunately this can require
    some amount of time-based coordination which is never ideal, but is often necessary
    when tools like databases have opaque non-deterministic behavior that’s out of
    our control.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 事务隔离对应用程序有重大影响，无论是性能还是对领域逻辑的影响。 对真实数据库进行集成测试非常重要，以确保弱事务隔离级别不是并发错误的原因。 为了暴露此类错误，我们必须在测试用例中执行至少两个并发事务。
    不幸的是，这可能需要一定数量的基于时间的协调，这永远不是理想的，但通常是必要的，当像数据库这样的工具具有不受我们控制的不透明的非确定性行为时。
- en: Still, it is something we can and should test for at the application level.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，这是我们可以而且应该在应用程序级别进行测试的东西。
- en: '* * *'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
