- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:35:23'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:35:23
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Stream to chromecast with resolved, vlc and bash
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 resolved、vlc 和 bash 向 Chromecast 流式传输
- en: 来源：[https://linderud.dev/blog/stream-to-chromecast-with-resolved-vlc-and-bash/](https://linderud.dev/blog/stream-to-chromecast-with-resolved-vlc-and-bash/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://linderud.dev/blog/stream-to-chromecast-with-resolved-vlc-and-bash/](https://linderud.dev/blog/stream-to-chromecast-with-resolved-vlc-and-bash/)
- en: Chromecast is one of those devices I just generally use a lot. They are small
    practical and enables me to stream video or music to my TV from multiple devices.
    But it also requires you to have a supported browser or video player. This is
    obviously a bit boring.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Chromecast 是我经常使用的设备之一。它们小巧实用，使我能够从多个设备向电视机传输视频或音乐。但它也需要你拥有支持的浏览器或视频播放器。显然，这有点无聊。
- en: There has been multiple command line chromecast streamers through the years.
    But their ffmpeg usage has been shoddy at best with no hardware decoding support
    and usually quite bad implementations.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来已经有多个命令行 Chromecast 流式传输工具了。但它们对于 ffmpeg 的使用程度往往不佳，没有硬件解码支持，并且通常实现得相当糟糕。
- en: Instead of using these tools I have wound up with two bash scripts that pipes
    together a command line program to stream towards chromecasts and it works surprisingly
    well.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是使用这些工具，我最终编写了两个 bash 脚本，将命令行程序组合在一起，向 Chromecast 流式传输，并且效果出奇地好。
- en: The first part of this is how we stream towards the chromecast. This is easily
    solveable with `vlc` luckily. You can just open `vlc file://....`, select `Playback
    -> Renderer` and generally find the correct chromecast there. But this is boring.
    We have to manually open the GUI and select the device!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这的第一部分是我们如何向 Chromecast 进行流式传输。幸运的是，使用 `vlc` 很容易解决这个问题。你只需打开 `vlc file://....`，选择
    `播放 -> 渲染器`，通常会在那里找到正确的 Chromecast。但这很无聊。我们必须手动打开 GUI 并选择设备！
- en: I can peak into the app on my phone and learn that the local IP of my chromecast
    is `192.168.1.231`. With `clvc` you can also pass `sout` and `sout-chromecast-ip`
    to auto-start a headless VLC players that will connect towards your chromecast.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以在手机上查看应用程序，并了解到我的 Chromecast 的本地 IP 地址为 `192.168.1.231`。使用 `clvc`，你还可以传递
    `sout` 和 `sout-chromecast-ip` 来自动启动一个无头 VLC 播放器，该播放器将连接到你的 Chromecast。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This works really well on it’s own. You can also pipe `yt-dlp` into `clvc` and
    support most media websites like youtube or twitch. This allows you to quickly
    write up some scripts to stream from these sites and is fairly flexible.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这本身就非常有效。你还可以将 `yt-dlp` 管道传递到 `clvc` 并支持大多数媒体网站，如 YouTube 或 Twitch。这使你能够快速编写一些脚本来从这些网站流式传输，并且非常灵活。
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There is one issue though, that IP is not static. If the chromecast reconnects
    to the network it might change it’s IP, and I’m never going to bother setting
    a static device.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，存在一个问题，即该 IP 不是静态的。如果 Chromecast 重新连接到网络，它的 IP 可能会更改，而我永远不会费心设置静态设备。
- en: Luckily chromecast announces itself over [DNS Service Discovery](http://www.dns-sd.org/)
    which allows devices to announce themself over the network through DNS names.
    To query for these devices we will be using `systemd-resolved` and `resolvectl`.
    You can probably use another DNS query tool, but `systemd-resolved` also supports
    `mDNS` which is useful for finding services on the network.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Chromecast 通过 [DNS 服务发现](http://www.dns-sd.org/) 自报告，这使得设备可以通过 DNS 名称在网络上进行广播。为了查询这些设备，我们将使用
    `systemd-resolved` 和 `resolvectl`。你可能也可以使用其他 DNS 查询工具，但 `systemd-resolved` 还支持
    `mDNS`，这对于在网络上查找服务很有用。
- en: First you need to enable `systemd-resolved` through `systemctl enable --now
    systemd-resolved`. Your mileage might wary but in some distributions this comes
    enabled by default. It’s also important to note that you don’t need to make `resolved`
    your default stub resolver for any of this to work.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要通过 `systemctl enable --now systemd-resolved` 启用 `systemd-resolved`。你的情况可能有所不同，但在某些发行版中，默认情况下已启用此功能。值得注意的是，你不需要将
    `resolved` 设为默认的存根解析器才能使所有这些功能正常运行。
- en: If you do read the [`resolvctl(1)` man page](https://man.archlinux.org/man/resolvectl.1#COMMANDS)
    you will see it has native support for dns-sd through `resolvectl service`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你阅读 [`resolvctl(1)` 手册页](https://man.archlinux.org/man/resolvectl.1#COMMANDS)，你会看到它通过
    `resolvectl service` 原生支持 dns-sd。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: However I have not gotten this to work as it seems like it will try to send
    a combined DNS query to your network DNS resolver, and this doesn’t seem supported
    depending on the router you have. So we have to implement this ourself. So we
    will be using the `PTR+SRV+TXT` process as outlined in [RFC6763](https://www.ietf.org/rfc/rfc6763.txt).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我还没有让它工作，因为它似乎会尝试向您的网络 DNS 解析器发送一个组合的 DNS 查询，这似乎取决于您拥有的路由器是否支持。所以我们必须自己实现这个功能。因此，我们将使用
    [RFC6763](https://www.ietf.org/rfc/rfc6763.txt) 中概述的 `PTR+SRV+TXT` 过程。
- en: To find available chromecasts on the network we’ll first query for PTR records
    on `_googlecast._tcp.local`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找网络上可用的 Chromecast，我们首先会在 `_googlecast._tcp.local` 上查询 PTR 记录。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here I see one Chromecast. Then we need to query for the service record it self,
    SRV is defined as part of [RFC2782](https://tools.ietf.org/html/rfc2782).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我看到一个 Chromecast。然后我们需要查询服务记录本身，SRV 被定义为 [RFC2782](https://tools.ietf.org/html/rfc2782)
    的一部分。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And finally we can just query the TXT record of the service for the IP of the
    device itself, which is the correct IP we started out with :)!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们只需查询服务的 TXT 记录以获取设备本身的 IP 地址，这是我们起初正确的 IP 地址 :)！
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To make this easier in the future we can easily parse this space limited output
    with `read` in a bash script^.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将来更容易处理，我们可以在 bash 脚本中使用 `read` 轻松解析这个空格限制的输出^。
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: And we can make our `chromecast` script as well which calls `dns-sd`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以制作我们自己的 `chromecast` 脚本，调用 `dns-sd`。
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this we have a neat way to stream web content to our chromecast without
    having to go through a GUI.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们有了一个很好的方法将 web 内容流式传输到我们的 chromecast，而不必通过 GUI。
- en: 'Bonus content: qutebrowser'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附加内容：qutebrowser
- en: If you, like me, enjoy qutebrowser but find the lack of chromecast support annoying
    we can resolve that with the script above.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你和我一样喜欢 qutebrowser，但发现缺少 chromecast 支持很烦人，我们可以用上面的脚本解决这个问题。
- en: 'We’ll use the current chromecast script from qutebrowser:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 qutebrowser 中的当前 chromecast 脚本：
- en: '[https://github.com/qutebrowser/qutebrowser/blob/main/misc/userscripts/cast](https://github.com/qutebrowser/qutebrowser/blob/main/misc/userscripts/cast)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/qutebrowser/qutebrowser/blob/main/misc/userscripts/cast](https://github.com/qutebrowser/qutebrowser/blob/main/misc/userscripts/cast)'
- en: And apply the diff here, which just removes code we don’t really need.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 并在这里应用差异，只删除我们实际不需要的代码。
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then add a keybind into `config.py`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 `config.py` 中添加一个键绑定。
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Ta-da, chromecast support with our script.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 哒哒，我们的脚本支持 chromecast 了。
- en: '[Back to posts](https://linderud.dev/blog/)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回文章](https://linderud.dev/blog/)'
