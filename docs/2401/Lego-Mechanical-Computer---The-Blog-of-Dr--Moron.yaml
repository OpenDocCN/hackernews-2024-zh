- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:42:04'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:42:04
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Lego Mechanical Computer - The Blog of Dr. Moron
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 乐高机械计算机 - Moron博士的博客
- en: 来源：[https://www.drmoron.org/posts/mechanical-computer/](https://www.drmoron.org/posts/mechanical-computer/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.drmoron.org/posts/mechanical-computer/](https://www.drmoron.org/posts/mechanical-computer/)
- en: Not long ago I was part of a discussion about using mechanical things to demonstrate
    computing concepts (such as building a [learning Tic-Tac-Toe game out of matchboxes](http://boingboing.net/2009/11/02/mechanical-computer.html)).
    This got my head spinning on different ways to use mechanical devices to compute
    things, whether or not such computation is useful. I figured I had enough Legos
    lying around the house to make something interesting.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不久前，我参与了关于使用机械装置来演示计算概念的讨论（比如用火柴盒构建[学习井字棋游戏](http://boingboing.net/2009/11/02/mechanical-computer.html)）。这让我开始思考使用机械装置进行计算的不同方式，无论这种计算是否有用。我觉得我家里有足够多的乐高积木可以做一些有趣的东西。
- en: I started by thinking of some of the more famous early computers, such as [Pascal’s
    calculator](http://en.wikipedia.org/wiki/Pascal's_calculator) and [Babbage’s difference
    engine](http://en.wikipedia.org/wiki/Difference_engine). However, I chose not
    to implement these. Perhaps partially because they are mechanically complex, but
    also because they are missing some of the fundamental components we take for granted
    in computing. I wanted something that had a form of memory that could hold a state
    and then perform an action based on that state. I also wanted something that I
    could “program” by changing the state transition logic.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先想到了一些更有名的早期计算机，比如[Pascal的计算器](http://en.wikipedia.org/wiki/Pascal's_calculator)和[Babbage的差分机](http://en.wikipedia.org/wiki/Difference_engine)。但我选择不去实现它们。也许部分原因是它们在机械上很复杂，但也因为它们缺少了我们在计算中视为理所当然的一些基本组件。我想要的是一种具有可以保存状态并根据该状态执行操作的记忆形式。我还想要一些我可以通过改变状态转换逻辑来“编程”的东西。
- en: I ended up gravitating toward a clever toy called [Digi-Comp I](http://en.wikipedia.org/wiki/Digi-Comp_I),
    which was manufactured in the 1960’s. The Digi-Comp I is a simple 3 bit machine
    that is programmed by adding or removing pegs in its side. As it happens, a company
    named [Minds-On Toys](http://mindsontoys.com) recently started selling [replica
    Digi-Comp I kits](http://mindsontoys.com/kits.htm?dc1_main.htm). A rational person
    would have just bought and assembled one. But not me.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我最终转向了一款聪明的玩具，名为[Digi-Comp I](http://en.wikipedia.org/wiki/Digi-Comp_I)，它是在1960年代制造的。Digi-Comp
    I是一款简单的3位机器，可以通过在其侧面添加或移除销来编程。恰好，一家名为[Minds-On Toys](http://mindsontoys.com)的公司最近开始销售[复制版Digi-Comp
    I套件](http://mindsontoys.com/kits.htm?dc1_main.htm)。一个理性的人可能只会买来组装一个。但不是我。
- en: I wanted to make my own device to prove to myself that I could. I borrowed a
    lot from the Digi-Comp design and ended up with something that worked fairly well.
    My computer only had two bits instead of three, and I didn’t have a nice clocking
    mechanism, but it was compact and operated quite nicely. Here is a video of it
    in operation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我想自己制作一个设备来证明我自己能做到。我从Digi-Comp设计中借鉴了很多东西，并最终得到了一个运行相当不错的东西。我的计算机只有两位而不是三位，而且我没有一个好的时钟机制，但它非常紧凑并且运行得相当好。这里有一个它操作的视频。
- en: '[https://www.youtube.com/embed/LfFbX2GgPnE](https://www.youtube.com/embed/LfFbX2GgPnE)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/embed/LfFbX2GgPnE](https://www.youtube.com/embed/LfFbX2GgPnE)'
- en: VIDEO
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 视频
- en: After posting this video, I was inundated with requests for more details on
    the internal mechanisms. (Well, OK, I got a couple of comments.) Anyway, this
    post is me finally getting around to providing more detail. I have long ago dismantled
    the device, and I have no intention of providing step-by-step instructions in
    any case. However, I am giving the high level concepts that lead me to the final
    design. My implementation is far from perfect anyway, so there is lots of room
    for improvement.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布这个视频后，我被要求提供更多关于内部机制的细节。（好吧，其实只有几条评论。）无论如何，这篇文章是我终于开始提供更多细节的时候了。我早就拆卸了这个设备，并且我也没有打算提供逐步说明。但是，我会提供导致最终设计的高层概念。无论如何，我的实现远非完美，因此还有很大的改进空间。
- en: Basic Design
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本设计
- en: There are two main components to the computer. The first is a memory structure
    that holds some number of bits (in my case, two) to represent the state of the
    machine. The second is a control circuit that takes as input the memory bits and
    produces as output the signals that change the state of the memory. Because there
    is this feedback loop between memory and control logic, you need a fairly careful
    timing mechanism so that the output of the control holds steady long enough to
    set the appropriate state of the memory. That said, this control mechanism is
    basically missing from my computer. Instead, it relies on the operator (me) performing
    several different motions in the correct order to advance to the next state (as
    you can see in the video with me flipping several controls).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机有两个主要组成部分。第一个是一个存储结构，保存一些比特（在我的案例中是两个）来表示机器的状态。第二个是一个控制电路，它将内存位作为输入，并产生改变内存状态的信号作为输出。由于内存和控制逻辑之间存在这种反馈回路，你需要一个相当精确的定时机制，以便控制的输出保持稳定足够长的时间来设置内存的适当状态。话虽如此，这个控制机制基本上在我的计算机中是缺失的。相反，它依赖于操作者（我）按照正确的顺序执行几个不同的动作来进入下一个状态（正如你在视频中看到我的几个控制翻转）。
- en: Of these two components, the control mechanism is fairly straightforward. There
    are several ways to build logic gates out of mechanical components like Legos.
    One of the simplest to implement and most compact designs for gates uses [rod
    logic](https://sites.google.com/site/santiagoontanonvillar/Home/lego-projects/lego-rod-logic).
    Memory, however, is generally more complicated than simple logic. It was the creation
    of this memory that dominates most of this computer’s design.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个组成部分中，控制机制相当简单。有几种方法可以使用机械部件（如乐高积木）构建逻辑门。其中一种最简单且最紧凑的门的设计使用了[rod logic](https://sites.google.com/site/santiagoontanonvillar/Home/lego-projects/lego-rod-logic)。然而，内存通常比简单逻辑复杂。是内存的创建主导了这台计算机的设计。
- en: The Flip-Flop
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触发器
- en: Memory can be implemented using a special kind of digital circuit known as a
    [flip-flop](https://en.wikipedia.org/wiki/Flip-flop_(electronics)). The flip-flop
    is designed to change its state when it receives a signal and then continue to
    hold that state after the signal is released.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用一种称为[触发器](https://en.wikipedia.org/wiki/Flip-flop_(electronics))的特殊类型的数字电路来实现内存。触发器设计为在接收到信号时改变其状态，然后在释放信号后继续保持该状态。
- en: An SR flop-flop from NOR gates. © Napalm Llama, Creative Commons Attribution-Share
    Alike
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个由 NOR 门构建的 SR 触发器。© Napalm Llama，知识共享署名-相同方式共享
- en: A flip-flop can be constructed out of standard gates (at least, the electronic
    variety) using a feedback loop that makes a circular loop from the output of gates
    back to the input of the same gate. If constructed carefully, this feedback can
    hold the output state of the gate. This image here shows an animation of a set/reset
    (SR) flip-flop. When the set (S) signal is raised, the output goes positive and
    stays that way even after S is lowered again. When the reset (R) is raised, the
    output goes negative and stays there.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用标准门（至少是电子设备）构建触发器，使用使从门的输出返回到同一门的输入的反馈回路。如果构建得当，此反馈可以保持门的输出状态。这里的图片显示了一个
    set/reset (SR) 触发器的动画。当 set (S) 信号被提高时，输出变为正，并在 S 再次降低后保持不变。当 reset (R) 被提高时，输出变为负并保持在那里。
- en: This circuit is straightforward to build out of electronic logic circuits, but
    problematic when the gates are mechanical. The real challenge is in designing
    this feedback loop in a way that does not lock up the mechanism. Added to this
    challenge is the fact that the overall mechanical computer introduces a *second*
    feedback loop (memory to control back to memory) that must also be managed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个电路很容易通过电子逻辑电路构建，但是当门是机械时就有问题了。真正的挑战在于设计这个反馈回路，使得机械不会卡住。增加到这个挑战中的是整体机械计算机引入了*第二*个反馈回路（内存到控制再到内存），这也必须得到管理。
- en: Fortunately, there is a simple way around all these problems. The approach bypasses
    all these problems by building the flip-flop without any gates at all. A simple
    device is shown below.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一个简单的方法可以解决所有这些问题。这种方法通过完全不使用门来构建触发器，从而绕过了所有这些问题。下面展示了一个简单的设备。
- en: A mechanical SR flip-flop with output of 0.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个输出为0的机械 SR 触发器。
- en: A mechanical SR flip-flop with output of 1.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一个输出为1的机械 SR 触发器。
- en: That’s right. The mechanical flip-flop is&mldr; a stick. I’ve added some labels
    to define the SR implementation and a post to clearly mark the position, but ultimately
    the flip-flop is just a stick you push back and forth. Unlike electrons, sticks
    (and really most physical things) tend to stay put, so you can represent state
    by where they are sitting.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 没错。机械触发器是一根棍子。我添加了一些标签来定义 SR 实现和一个柱子来清楚地标记位置，但最终触发器只是你来回推动的一根棍子。与电子不同，棍子（实际上大多数物理事物）倾向于保持不动，因此你可以通过它们所处的位置来表示状态。
- en: Of course, to use this stick flip-flop in a larger circuit we’ll need to place
    it in a holder. And to support the circuit from control back to flip-flop, we
    need a gating mechanism that hold the set or reset signal until the rest of the
    control logic gets out of the way (literally) and then activate it with a clock
    signal. Both of these are demonstrated below.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，要在更大的电路中使用这个触发器，我们需要把它放在一个支架中。为了支持电路从控制返回到触发器，我们需要一个门控机制，它可以保持设置或复位信号，直到控制逻辑的其余部分让路（字面意思）然后用时钟信号激活它。这两者都在下面演示。
- en: The "stick" flip-flop placed in a holder with added latched and gated inputs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 放置在支架中的“棍子”触发器，增加了锁存和门控输入。
- en: The set and reset signals are now bars that block a second pair of “clock” bars
    from moving the stick. As long as both set and reset are blocking, the flip-flop
    state will remain in place. Set or reset is activated by moving that bar out of
    the way, and the next time you push the clock the state of the flip-flop will
    change.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，设置和复位信号是阻挡第二对“时钟”杆移动棍子的杆。只要设置和复位都阻挡着，触发器状态就会保持不变。设置或复位是通过将该杆移开来激活的，下次你推动时钟时，触发器的状态将会改变。
- en: The actual flip-flops implemented in my Lego mechanical computer are a bit different.
    They are designed to activate the set or reset by pushing in rather than pulling
    out, but the basic idea is the same.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的乐高机械计算机中实现的实际触发器有些不同。它们被设计为通过推入而不是拉出来激活设置或复位，但基本思想是相同的。
- en: Control Circuit
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制电路
- en: Notice in the image above that this design for a mechanical flip flop places
    the set and reset bars perpendicular to the stick representing the flip flop state.
    As it happens, this is an ideal position for the set/reset signals to be in.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意上面的图像中，这个机械触发器的设计将设置和复位杆与表示触发器状态的棍子垂直放置。恰好地，这是设置/复位信号的理想位置。
- en: The mechanical computer has yet another bar for each set and reset that slides
    laterally in and out to activate the set or reset. Because of the orientation
    of the set and reset bars, it is simple to add posts to the flip flop state stick
    that will block the set or reset from being activated. These posts are moved in
    and out of the way based on the position of the stick (i.e. the state of the flip
    flop). The operation of this mechanism is clearly shown in the video.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 机械计算机每个设置和复位还有一个杆，可以在横向上滑动以激活设置或复位。由于设置和复位杆的方向，很容易向触发器状态棍子添加柱子，这些柱子将阻止设置或复位被激活。这些柱子根据棍子的位置（即触发器的状态）来移动进出。该机制的操作在视频中清楚地展示。
- en: Multiple flip flop sticks can be stacked to provide posts for each bit of state.
    Thus, the control for each set and reset is an AND operation for the state of
    each bit. For an arbitrary number of bits, this logic is not powerful enough to
    capture every possible state change, but for just two bits (the number in my computer),
    it just so happens to be enough to capture all possible state changes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 多个触发器棍子可以堆叠以提供每个状态位的柱子。因此，每个位的设置和复位的控制是每个位状态的与操作。对于任意数量的位，这个逻辑不够强大，无法捕捉到每个可能的状态变化，但对于只有两位的情况（我的计算机中的数字），它恰好足够捕捉到所有可能的状态变化。
- en: The nice thing about this control logic is that it is very compact giving the
    overall mechanical computer a surprisingly small form factor. Another convenient
    feature is that the computer can be reprogrammed with minimal reconstruction.
    It is just a matter of moving the posts in the flip flop sticks, which are accessible
    from the front of the device.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这种控制逻辑的好处是非常紧凑的，使整个机械计算机具有惊人的小体积。另一个便利的特性是计算机可以通过最小的重建来重新编程。只需移动触发器棍子上的柱子，这些柱子可以从设备的前面访问。
- en: The Final Word
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最后
- en: The point of this device, if there is one, is to separate out the concept and
    theory of computation from the digital electronic devices we most commonly associate
    with computing. There is nothing inherently electronic about computers. It just
    so happens that it is much easier to design computing devices using components
    driven from electricity. At least, that is the state of the known inventions so
    far.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个设备有一个目的的话，那就是将计算的概念和理论与我们最常见的与计算相关联的数字电子设备分开。计算机并非天生与电子相关。只不过，使用从电力驱动的元件设计计算设备要容易得多。至少，目前已知的发明就是这样的状态。
- en: Links
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链接
- en: Here is a collection of links to other projects concerning famous mechanical
    computers or other Lego computer projects (most far more impressive than mine).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个链接集合，链接到其他关于著名机械计算机或其他乐高计算机项目的项目（大多比我的项目要印象深刻得多）。
- en: '* * *'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
