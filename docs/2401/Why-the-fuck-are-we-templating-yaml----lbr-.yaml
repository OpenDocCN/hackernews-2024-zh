- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:03:35'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Why the fuck are we templating yaml? | lbr.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://leebriggs.co.uk/blog/2019/02/07/why-are-we-templating-yaml](https://leebriggs.co.uk/blog/2019/02/07/why-are-we-templating-yaml)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I was at [cfgmgmtcamp 2019](https://cfgmgmtcamp.eu) in Ghent, and [did a talk](https://www.youtube.com/watch?v=eBm3oyUmoAo&feature=youtu.be&t=18586)
    which I think was well received about the need for some Kubernetes configuration
    management as well as the solution we built for it at $work, [kr8](https://kr8.rocks).
  prefs: []
  type: TYPE_NORMAL
- en: 'I made a statement during the talk which ignited some fairly fierce discussion
    both online, and at the conference:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To put this into my own words:'
  prefs: []
  type: TYPE_NORMAL
- en: At some point, we decided it was okay for us to template yaml. When did this
    happen? How is this acceptable?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: After some conversation, I figured it was probably best to back up my claims
    in some way. This blog post is going to try to do that.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the applications and infrastructure you’re going to manage grows past
    a certain size, you inevitably end up in some form of configuration complexity
    hell. If you’re only deploying 1 or maybe 2 things, you can write a yaml configuration
    file and be done with it. However once you grow beyond that, you need to figure
    out how to manage this complexity. It’s incredibly likely that the reason you
    have multiple configuration files is because the $thing that uses that config
    is slightly different from its companions. Examples of this include:'
  prefs: []
  type: TYPE_NORMAL
- en: Applications deployed in different environments, like dev, stg and prod
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications deployed in different regions, like Europe or North American
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obviously, not *all* the configuration is different here, but it’s likely the
    configuration differs enough that you want to be able to differentiate between
    the two.
  prefs: []
  type: TYPE_NORMAL
- en: This configuration complexity has been well known for Operators (System Administrators,
    DevOps engineers, whatever you want to call them) for some years now. An entire
    discpline grew up around this in Configuration Management, and each tool solved
    this problem in their own way, but ultimately, they used YAML to get the job done.
  prefs: []
  type: TYPE_NORMAL
- en: My favourite method has always been [hiera](https://puppet.com/docs/puppet/6.2/hiera_intro.html)
    which comes bundled with Puppet. Having the ability to hierarchically look up
    the variables of specific config needs is incredibly powerful and flexible, and
    has generally meant you don’t actually need to do any templating of yaml at all,
    except perhaps for embedding Puppet facts into the yaml.
  prefs: []
  type: TYPE_NORMAL
- en: Did we go backwards?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Then, as our industries’ needs moved above the operating system and into cloud
    computing, we had a whole new data plane to configure. The tooling to configure
    this changed, and tools like [CloudFormation](https://aws.amazon.com/cloudformation/)
    and [Helm](https://helm.sh/) appeared. These tools are excellent configuration
    tools, but I firmly believe we (as an industry) got something really, really wrong
    when we designed them. To examine that, let’s take a look at example of a helm
    chart taking a custom parameter
  prefs: []
  type: TYPE_NORMAL
- en: Helm Charts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Helm charts can take external parameters defined by an `values.yaml` file which
    you specify when rendering the chart. A simple example might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say my external parameter is simple - it’s a string. It’d look a bit
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That’s not so bad right? You just specify a value for `image` in your values.yaml
    and you’re on your way.
  prefs: []
  type: TYPE_NORMAL
- en: 'The real problem starts to get highlighted when you want to do more complicated
    and complex things. In this particular example, you’re doing okay because you
    *know* you have to specify an image for a Kubernetes deployment. However, what
    if you’re working with something like an optional field? Well, then it gets a
    little more unwieldy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Optional values just make things ugly in templating languages, and you can’t
    just leave the value blank, so you have to resort to ugly loops and conditionals
    that are probably going to bite you later.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say you need to go a step further, and you need to push an array or map
    into the config. With helm, you’d do something like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Firstly, let’s ignore the madness of having a templating function `toYaml` to
    convert yaml to yaml and focus more on the whitespace issue here.
  prefs: []
  type: TYPE_NORMAL
- en: 'YAML has strict requirements and whitespace implementation rules. The following,
    for example, is not valid or complete yaml:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Generally, if you’re handwriting something, this isn’t necessarily a problem
    because you just hit backspace twice and it’s fixed. However, if you’re generating
    YAML using a templating system, you can’t do that - and if you’re operating above
    5 or 10 configuration files, you probably want to be *generating* your config
    rather than writing it.
  prefs: []
  type: TYPE_NORMAL
- en: So, in the above example, you want to embed the values of `.Values.podAnnotations`
    under the annotations field, which is indented already. So you’re having to not
    only indent your values, but indent them correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'What makes this *even more confusing* is that the go parser doesn’t actually
    know anything about YAML at all, so if you try to keep the syntax clean and indent
    the templates like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You actually can’t do that, because the templating system gets confused. This
    is a singular example of the complexity and difficulty you end up facing when
    generating config data in YAML, but when you really start to do more complex work,
    it really starts to become obvious that this isn’t the way to go.
  prefs: []
  type: TYPE_NORMAL
- en: Needless to say, this isn’t what I want to spend *my* time doing. If fiddling
    around with whitespace requirements in a templating system doing something it’s
    not really designed for is what suits you, then I’m not going to stop you. I also
    don’t want to spend my time writing configuration in JSON without comments and
    accidentally missing commas all over the shop. We (as an industry) decided a long
    time ago that shit wasn’t going to work and that’s why YAML exists.
  prefs: []
  type: TYPE_NORMAL
- en: So what should we do instead? That’s where [jsonnet](https://jsonnet.org) comes
    in.
  prefs: []
  type: TYPE_NORMAL
- en: JSON, Jsonnet & YAML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we actually talk about Jsonnet, it’s worth reminding people of a very
    important (but oft forgotten point). [YAML is a superset of JSON](https://yaml.org/spec/1.2/spec.html#id2759572)
    and converting between the two is trivial. Many applications and programming languages
    will parse JSON and YAML natively, and many can convert between the two very simple.
    For example, in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: So with that in mind, let’s talk about Jsonnet.
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to the church of Jsonnet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jsonnet is a relatively new, little known (outside the Kubernetes community?)
    language that calls itself a *data templating language*. It’s definitely a good
    exercise to read and consume the Jsonnet [design rationale](https://jsonnet.org/articles/design.html)
    page to get an idea why it exists, but if I was going to define in a nutshell
    what its purpose is - it’s to generate JSON config.
  prefs: []
  type: TYPE_NORMAL
- en: So, how does it help, exactly?
  prefs: []
  type: TYPE_NORMAL
- en: Well, let’s take our earlier example - we want to generate some JSON config
    specifying a parameter (ie, the image string). We can do that very very easily
    with Jsonnet using external variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, let’s define some Jsonnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can generate it using the Jsonnet command line tool, passing in the
    external variable as we need to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Easy!
  prefs: []
  type: TYPE_NORMAL
- en: Optional fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before, I noted that if you wanted to define an optional field, with YAML templating
    you had to define if statements for everything. With Jsonnet, you’re just defining
    code!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output here, because our variable is null, means that we never actually
    populate resourceGroup. If you specify a value, it will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Maps and parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Okay, now let’s look at our previous annotation example. We want to define
    some pod annotations, which takes a YAML map as its input. You want this map to
    be configurable by specifying external data, and obviously doing that on the command
    line sucks (you’d be very unlikely to specify this with Helm on the command line,
    for example) so generally you’d use Jsonnet imports to this. I’m going to specify
    this config as a variable and then load that variable into the annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This might just be my bias towards Jsonnet talking, but this is so dramatically
    easier than faffing about with indentation that I can’t even begin to describe
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Additional goodies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The final thing I wanted to quickly explore, which is something that I feel
    can’t really be done with Helm and other yaml templating tools, is the concept
    of manipulating existing objects in config.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take our example above with the annotations, and look at the result file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s say for example I wanted to append a set of annotations to this annotations
    map. In any templating system, I’d probably have to rewrite the whole map.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jsonnet makes this *trivial*. I can simply use the `+` operator to add something
    to this. Here’s a (poor) example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The end result is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, in this case, it’s more code to this, but as your example get more
    complex, it becomes extremely useful to be able to manipulate objects this way.
  prefs: []
  type: TYPE_NORMAL
- en: Kr8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use all of these methods in [kr8](https://kr8.rocks) to make creating and
    manipulating configuration for multiple Kubernetes clusters easy and simple. I
    highly recommend you check it out if any of the concepts you’ve found here have
    found you nodding your head.
  prefs: []
  type: TYPE_NORMAL
