- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:20:41'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Chris Date and the Relational Model - Simple Talk
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.red-gate.com/simple-talk/opinion/opinion-pieces/chris-date-and-the-relational-model/](https://www.red-gate.com/simple-talk/opinion/opinion-pieces/chris-date-and-the-relational-model/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Chris Date has long realized that his aim to convert everyone to his way of
    thinking will not prove harmonious. It is forty-five years this year since Date’s
    mentor and colleague Ted Codd, a former Royal Air Force pilot, Oxford educated
    mathematician and winner of the Turing Award, invented the relational model for
    database management and transformed the humble database.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Looking back it seems such a simple idea to replace the hierarchical structures
    used to build databases with tables of rows and columns but Codd worked in a different
    world, when you had to deal with a huge amount of complexity to build a functioning
    database.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: In 1970 Ted Codd published A Relational Model of Data for Large Shared Data
    Banks. It ushered in a global database market which in 2013 was estimated to be
    worth $28 billion and it is growing at approximately 7.5 per cent a year.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Codd’s paper was hugely influential to those working in the database field though
    a little more directly on Chris Date than a lot of other people.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Since his first meeting with Codd, Chris has become one of the leading voices
    specializing in relational database technology.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'RM:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Chris, can you talk about the influence of Ted Codd on your work?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'CJD:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Before I respond to this first question, I simply can’t resist the temptation
    to note that in my world, “RM” always stands for the relational model! So I’m
    truly honored to be interviewed by someone with such auspicious initials.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, what was Ted’s influence on my work? Well, of course it was huge. Let
    me explain how I got into this business. My background is in mathematics. When
    I left university, the only job that seemed to be available to mathematicians
    at the time that didn’t sound totally boring-I recall one option was *time and
    motion study*; can you imagine?-was this new thing called computing.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: (This was back in 1962, and we certainly didn’t have any computer science in
    our curriculum in those days; very few people even knew what a computer was.)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: So I became a computer programmer. And that was fun and interesting for a while,
    but quite frankly it didn’t seem to have much to do with the mathematics I learned
    at Cambridge.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'And then, in 1970, two things happened: First, a colleague and myself were
    given the job of figuring out what the language PL/I should do about another new
    thing, namely databases (I was working for the IBM Hursley lab by this time, which
    was the home of PL/I).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: “I got in touch with Ted,
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: and we became friends
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: and colleagues
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Second, Ted Codd’s famous paper was published (“A Relational Model of Data for
    Large Shared Data Banks,” *CACM 13*, No. 6, June 1970). So I read that paper-in
    among a lot of other database stuff, I should quickly add-and I discovered it
    was all about set theory and logic, stuff I did know and love from my time at
    Cambridge.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，泰德·科德的著名论文发表了（“大型共享数据银行的数据关系模型”，*CACM 13*，第6期，1970年6月）。所以我阅读了那篇论文——当然还有很多其他数据库相关的东西，我应该迅速补充一句——我发现它全都是关于集合论和逻辑的内容，而这些正是我在剑桥时期所熟悉和热爱的内容。
- en: So at last I had found an aspect of computing, database technology, where my
    mathematical background was relevant. I got in touch with Ted, and we became friends
    and colleagues-first within IBM, later in a consulting company that we started,
    along with Sharon Weinberg, in 1985 or so. And I’ve been working in that field
    (database technology, that is) all through that time, for almost 45 years now.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我终于找到了与计算机有关的一个方面，即数据库技术，这里我的数学背景是相关的。我联系了泰德，我们成为了朋友和同事——首先是在IBM内部，后来是在1985年左右与莎朗·温伯格一起创办的一家咨询公司。自那时以来，我一直在这个领域（即数据库技术）工作，已经有将近45年了。
- en: To get back to your question, I don’t think I can do better than quote from
    the tribute piece I wrote for Ted when he died, back in 2003\. (Of course, it’s
    very conceited to quote from oneself, but in the circumstances I hope you’ll forgive
    me.)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 回到你的问题，我认为我最好还是引用一下我在2003年泰德去世时为他写的致敬文章。（当然，引用自己的话是非常自负的，但在这种情况下，我希望你能原谅我。）
- en: Dr. Codd, known universally to his colleagues and friends-among whom I was proud
    to count myself-as Ted, was the man who, singlehanded, put the field of database
    management on a solid scientific footing. The entire relational database industry,
    now worth many billions of dollars a year, owes the fact of its existence to Ted’s
    original work, and the same is true of all of the huge number of relational database
    research and teaching programs under way worldwide in universities and similar
    organizations.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 作为泰德的同事和朋友（我自己也以此为荣），医生科德，广为人知的泰德，是一个单枪匹马将数据库管理领域确立在坚实的科学基础上的人。现在价值数十亿美元的整个关系型数据库行业，都要归功于泰德的原始工作，同样适用于全球大量正在进行的关系型数据库研究和教学计划，这些计划正在各大学和类似机构中展开。
- en: Indeed, all of us who work in this field owe our career and livelihood to the
    giant contributions Ted made during the period from the late 1960s to the early
    1980s. We all owe him a huge debt. This tribute to Ted and his achievements is
    offered in recognition of that debt.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们所有在这个领域工作的人都要感谢泰德在从上世纪60年代末到80年代初期所做出的巨大贡献。我们都欠他很大的债。这篇对泰德及其成就的致敬就是为了表达对这笔债务的认可。
- en: In other words, Ted’s influence on me was, as I’ve said, huge, but it wasn’t
    just me-it was all of us in the database field. Though perhaps it was a little
    more directly on me than it was on a lot of other people.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，泰德对我的影响，正如我所说的，是巨大的，但这并不仅限于我——而是我们数据库领域的所有人。虽然也许他对我直接一些，比他对其他许多人的影响更大一点。
- en: “Ted and I certainly
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “泰德和我确实
- en: didn’t see eye to
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 不太合眼缘
- en: eye on everything
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 关注一切
- en: -we did have our
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: -我们确实留意了每件事
- en: disagreements
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 分歧
- en: That said, I should say too that Ted and I certainly didn’t see eye to eye on
    everything-we did have our disagreements. I say this because the idea seems to
    exist in certain circles that Ted’s writings are and must forever be the final
    arbiter on all things relational. (“This must be the way it is because it’s what
    Ted Codd said.”) I think such an attitude is quite dangerous.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我也要说一下，泰德和我确实在一些事情上存在分歧——我们确实有我们的分歧。我之所以这么说是因为在某些圈子里似乎存在这样一种想法，即泰德的著作是关于关系型数据库的一切事情的最终裁决者，而且永远都是如此。（“这一定是这样的，因为这是泰德·科德说的。”）我认为这种态度是相当危险的。
- en: Science is a social activity; it’s also an activity that’s always in an ongoing
    state of development; and I don’t think scientists in general-true scientists,
    that is-would ever claim that their own opinion is the absolute last word on any
    scientific subject. Critical thinking is just as important in the database field
    as it is everywhere else.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 科学是一种社会活动；它也是一种始终处于不断发展状态的活动；我认为真正的科学家——也就是真正的科学家——从来不会声称自己的意见是任何科学问题的绝对最后结论。批判性思维在数据库领域和其他任何领域一样重要。
- en: 'RM:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 'RM:'
- en: Do you think we’re taken a huge step backwards in terms of how SQL has developed?
    Do you think people have the intellectual curiosity about where the idea of relational
    databases came from? Are people aware of the history?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为我们在SQL的发展方面是不是在向后退？你认为人们对关系数据库的概念是不是有兴趣？人们是否意识到这段历史呢？
- en: 'CJD:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: CJD：
- en: 'Oh dear. There’s so much I want to say here! Let me see if I can put it all
    into some kind of sensible order. Perhaps the first item to address is: Why did
    SQL happen at all? I mean, why was it developed in the first place?'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，亲爱的。我这里有很多想说的！让我看看能否把它们都整理成一种合理的顺序。也许首先要解决的问题是：SQL到底为什么会出现？我的意思是，它为什么会被开发出来？
- en: 'The answer to this question can be found, I think, in the very first SQL paper
    (Donald D. Chamberlin and Raymond F. Boyce, “SEQUEL: A Structured English Query
    Language,” Proc. 1974 ACM SIGMOD Workshop on Data Description, Access, and Control,
    Ann Arbor, Mich., May 1974; the name SEQUEL was subsequently changed to SQL for
    legal reasons).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '我认为，这个问题的答案可以在第一篇SQL论文中找到（Donald D. Chamberlin和Raymond F. Boyce，“SEQUEL: A
    Structured English Query Language,” 1974年ACM SIGMOD Workshop on Data Description,
    Access, and Control论文集，密歇根州安娜堡，1974年5月；后来由于法律原因，名称SEQUEL被改为SQL）。'
- en: In that paper, the authors claimed, in effect, that their language was more
    user friendly than predicate calculus, and in particular that it didn’t need what
    they called “the mathematical sophistication” of predicate calculus.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在那篇论文中，作者们实际上声称他们的语言比谓词演算更加用户友好，特别是它不需要他们所谓的谓词演算的“数学复杂性”。
- en: You see, Ted’s 1970 paper had proposed, among other things, that predicate calculus
    might reasonably be used as a basis for a data language (or data sublanguage,
    as Ted called it), and it gave examples of what expressions in such a language
    might look like.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗，泰德1970年的论文提出，谓词演算可以合理地用作数据语言（或者泰德所称的数据子语言）的基础，并且提供了这种语言中表达式的示例。
- en: Unfortunately, it did so using the formal notation of predicate calculus, notation
    that many people in the computing world at the time-now too, probably-were quite
    unfamiliar with. So the idea arose that predicate calculus was just too difficult
    for ordinary mortals, and something simpler was needed. Ergo, SQL.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，它使用了**谓词演算**的正式符号表示法，这个符号在当时的计算机世界中——现在可能也是如此——很多人都不太熟悉。因此，人们产生了一种想法，即谓词演算对普通人来说实在是太难了，需要一些更简单的东西。因此，SQL诞生了。
- en: Now I think this was all a confusion on the part of the SQL folks. It’s true
    that the notation-the syntax-of predicate calculus might look a little strange
    and complicated; but the concepts expressed by that notation-the semantics-are
    actually quite simple, and can be explained quite simply too. In other words,
    it’s not difficult to wrap some nice syntactic sugar around those concepts and
    make them very palatable indeed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我认为，这一切都是SQL团队的一种混淆。的确，谓词演算的符号——语法——看起来可能有点奇怪和复杂；但这些符号所表达的概念——语义——实际上相当简单，并且也可以很简单地解释清楚。换句话说，将一些漂亮的语法糖包裹在这些概念周围，并使它们非常可口，其实并不困难。
- en: “QBE, like so many
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: “QBE，就像许多其他提议一样
- en: other proposals,
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 其他提议，
- en: was subsequently
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 随后
- en: overwhelmed by
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 被压倒
- en: the SQL juggernaut
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: SQL巨无霸
- en: Do you happen to be familiar with Query-By-Example (QBE)? QBE is exactly predicate
    calculus! In my opinion, it’s a very user friendly syntactic sugar coating of
    the semantic ideas embodied in predicate calculus. (Of course, QBE, like so many
    other proposals, was subsequently overwhelmed by the SQL juggernaut. I know one
    of your later questions has to do with such matters, so we’ll come back to this
    issue later.)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否熟悉例子查询（QBE）？QBE就是谓词演算！在我看来，它是谓词演算所体现的语义思想的一种非常用户友好的语法糖。 （当然，QBE，就像许多其他提议一样，后来被SQL巨无霸所压倒。我知道你稍后的问题涉及到这些问题，所以我们稍后会回到这个问题上。）
- en: Anyway, the SQL folks didn’t do that (I mean, they didn’t do what QBE did)-instead,
    they invented something different, based on what they called a mapping (basically,
    the ability to use a subquery in the WHERE clause). I don’t want to get into details
    of those “mappings” here; I just want to note that they’re actually 100% redundant!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，SQL团队没有这样做（我的意思是，他们没有像QBE那样做）——相反，他们发明了一些不同的东西，基于他们所谓的映射（基本上，是在WHERE子句中使用子查询的能力）。我不想在这里详细讨论那些“映射”；我只想指出它们实际上是完全多余的！
- en: By which I mean, there’s nothing relational you can do using them that you can’t
    also do without them. It’s ironic, really-the single biggest innovation in the
    SQL language could actually be thrown away without any serious loss of function.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，使用它们，你无法做到任何与关系相关的事情，而不使用它们也可以做到。真讽刺，SQL 语言中最重要的创新实际上可以被抛弃而不会严重损失功能。
- en: What’s more, I really question whether SQL is more user friendly than predicate
    calculus, anyway. In fact I think it’s what might reasonably be described as user
    hostile … In my seminars (which are mostly intended these days for SQL professionals
    specifically) I make a point of showing a set of SQL queries, or would-be queries,
    and asking the class which ones are legal and which illegal. And *nobody* gets
    them all right the first time around.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，我真的怀疑 SQL 是否比谓词演算更加用户友好。事实上，我认为它可能合理地被描述为对用户不友好…… 在我的研讨会上（这些研讨会现在主要是专为 SQL
    专业人员举办的），我特意展示了一组 SQL 查询或准查询，并问班上哪些是合法的，哪些是非法的。*没有人*第一次就全部答对。
- en: “I really question whether
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: “我真的怀疑
- en: SQL is more user friendly
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 更加用户友好
- en: than predicate calculus
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 比谓词演算更
- en: As a matter of fact I can never remember the answers myself either, because
    the pertinent syntax rules are just so convoluted and intertangled. You know,
    it’s very easy to make something complicated; it’s very hard to make something
    simple. (Parenthetically, part of the beauty of the relational model is precisely
    that it’s fundamentally so simple.)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我自己也永远记不住答案，因为相关的语法规则实在是太复杂和纠缠不清了。你知道，把事情弄复杂很容易；把事情弄简单却很难。（顺便说一句，关系模型的美之一恰恰在于它基本上如此简单。）
- en: There’s more, a lot more. SQL isn’t just user hostile, it involves some very
    serious departures from relational theory. I don’t think this is the place to
    get into specifics-I’ve written about those problems at great length elsewhere
    (as indeed other people have too, including in particular my friend and colleague
    Hugh Darwen).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多，很多。SQL 不仅对用户不友好，它还涉及一些与关系理论严重偏离的问题。我不认为这是讨论具体问题的地方——我在其他地方详细写过这些问题（事实上，其他人也写过，尤其是我的朋友和同事休·达文）。
- en: Suffice it to say that those departures are so serious that I honestly believe
    SQL has no real right to be called relational at all. As a consequence, SQL DBMSs
    have no real right to be called relational at all, either. The truth is, there
    never has been a mainstream DBMS product that’s truly relational.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 只需说这一点，这些偏离如此严重，以至于我真诚地相信 SQL 完全没有被称为关系的实质权利。因此，SQL 数据库管理系统也完全没有被称为关系。事实上，从来没有一款主流的数据库管理系统产品是真正的关系型的。
- en: “I honestly believe
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: “我真诚地相信
- en: SQL has no real
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 没有真正的
- en: right to be called
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有资格被称为
- en: relational at all
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 完全不是关系
- en: I honestly believe SQL has no real right to be called relational at all
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我真诚地认为 SQL 完全没有被称为关系型的实质权利
- en: There’s something else I’d like to say in connection with all this. People who
    don’t accept our criticisms of SQL often describe the points on which we disagree
    as “religious issues”-implying, I suppose, that a proper resolution of those issues
    is a matter of faith, not science.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 关于所有这些，我还想说一些别的事情。那些不接受我们对 SQL 的批评的人通常将我们的分歧描述为“宗教问题”——我想，暗示的是，对这些问题的适当解决是一种信仰而不是科学。
- en: 'Our position is exactly the opposite: Proper resolution is a matter of science,
    not mere faith. For example, take nulls. The simple *scientific* fact is that
    an SQL table that contains a null isn’t a relation; thus, relational theory doesn’t
    apply, and all bets are off. (Of course there’s a lot more I could say here, but
    for present purposes I think this should be enough.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的立场恰恰相反：适当的解决是一门科学，而不仅仅是信仰。例如，拿空值来说。一个包含空值的 SQL 表不是关系；因此，关系理论不适用，一切皆有可能。（当然，我可以在这里说更多，但出于现在的目的，我认为这应该足够了。
- en: 'Well, I’ll just say one thing: If you’d prefer to replace the words *science*
    and *scientific* in the foregoing by *logic* and *logical*, respectively, then
    I won’t argue with you. I mean, I don’t think it makes any difference.)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我只想说一件事：如果你更愿意将上述的“科学”和“科学的”替换为“逻辑”和“逻辑的”，那么我不会和你争论。我的意思是，我不认为这会有任何区别。）
- en: You also ask whether people are aware of the history here, and whether they
    have the intellectual curiosity to want to be aware. Well, I don’t think I should
    generalize too much here. At least I can say that the people who attend my seminars
    do seem to take an interest in this stuff.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你还在问人们是否意识到这里的历史，是否有兴趣知道。嗯，我认为我不应该过于一般化。至少我可以说，参加我的研讨会的人们似乎对这些东西感兴趣。
- en: 'On the other hand, we live for better or worse in a world where the market
    is king, and a lot of people seem to take it as an article of faith that if something’s
    new it must be better than what we had before: a position that seems to me to
    demonstrate a considerable *lack* of historical perspective, or interest. In connection
    with this point, I note that Lou Gerstner-IBM chairman at the time-was once quoted
    in *Informationweek* (February 9th, 1998) as saying “All large companies know
    today that speed and being early to market are often more important than being
    right.” Make of that what you will.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 无论好坏，我们生活在一个市场至上的世界，在那里许多人似乎相信，如果某样东西是新的，那一定比之前的更好：这一立场对我来说似乎显示出了相当大的历史缺乏视角或兴趣。在这一点上，我注意到，当时的IBM主席鲁·格斯特纳曾在*Informationweek*
    （1998年2月9日）上说过“所有大公司今天都知道，速度和市场先机往往比准确性更重要。” 你如何看待这一点。
- en: 'RM:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 'RM:'
- en: What was key to SQL becoming the standard language for relational databases
    in the mid- 1980s? Was all down to good marketing?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 1980年中SQL成为关系数据库标准语言的关键是什么？全靠好营销？
- en: 'CJD:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 'CJD:'
- en: 'In other words, why did SQL became so popular? Especially given all its faults?
    Well, I think this is rather a sorry story. I said earlier that there has never
    been a mainstream DBMS product that’s truly relational. So the obvious question
    is: Why not? And I think a good way for me to answer your questions here is to
    have a go at answering this latter question in their place, which I’ll do by means
    of a kind of Q&A dialog. Like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，为什么SQL变得如此受欢迎？特别考虑到它的所有缺点？嗯，我认为这是一个遗憾的故事。我之前说过，从来没有一款真正的关系型数据库管理系统产品成为主流。那么，显而易见的问题是：为什么呢？我想我应该在这里回答你的问题，来回答这后一个问题，我会以一种问答对话的方式来做。就像这样：
- en: 'Q:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 'Q:'
- en: Why has no truly relational DBMS has ever been widely available in the marketplace?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么真正的关系型DBMS在市场上从未广泛可用？
- en: 'A:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 'A:'
- en: Because SQL gained a stranglehold very early on, and SQL isn’t relational.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 因为SQL很早就获得了严格的控制力，并且SQL并不是关系型的。
- en: 'Q:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 'Q:'
- en: Why does SQL have such a stranglehold?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么SQL拥有如此严格的控制力？
- en: 'A:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 'A:'
- en: Because SQL is “the standard language for RDBMSs.”
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因为SQL是“关系型数据库管理系统的标准语言”。
- en: 'Q:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 'Q:'
- en: Why did the standard endorse SQL as such and not something else-something better?
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么标准支持SQL而不是其他更好的东西？
- en: 'A:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 'A:'
- en: Because IBM endorsed SQL originally, when it decided to build what became DB2\.
    IBM used to be more of a force in the marketplace than it is today. One effect
    of that state of affairs was that-in what might be seen as a self-fulfilling prophecy-competitors
    (most especially Relational Software Inc., which later became Oracle Corp.) simply
    assumed that SQL was going to become a big deal in the marketplace, and so they
    jumped on the SQL bandwagon very early on, with the consequence that SQL became
    a kind of de facto standard anyway.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 因为最初IBM支持了SQL，当它决定构建最终成为DB2的时候。IBM在市场上曾经是更大的力量。这种状态的一个影响是-在某种意义上可以看作预言自我实现-竞争对手（尤其是后来成为甲骨文公司的关系性软件公司）简单地认定SQL将成为市场上的大生意，于是他们很早就加入了SQL的行列，结果SQL成为了一种事实上的标准。
- en: 'Q:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 'Q:'
- en: Why did DB2 support SQL?
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么DB2支持SQL？
- en: 'A:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 'A:'
- en: Because (a) IBM Research had running code for an SQL prototype called System
    R and (b) the people in IBM management who made the decision to use System R as
    a basis on which to build DB2 didn’t understand that there’s all the difference
    in the world between a running prototype and an industrial strength product. They
    also, in my opinion, didn’t understand software (they certainly didn’t understand
    programming languages). They thought they had a bird in the hand.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因为(a) IBM研究已经有一个名为System R的SQL原型的运行代码(b) 在IBM管理层的人们决定使用System R作为构建DB2的基础时，并没有意识到正在运行的原型与工业强度产品之间有着天壤之别。他们也没有理解软件（他们显然没有理解编程语言）。他们认为他们已经如获至宝。
- en: 'Q:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 'Q:'
- en: Why did the System R prototype support SQL?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: System R原型为什么支持SQL？
- en: 'A:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 'A:'
- en: My memory might be deficient here, but it’s my recollection that the System
    R implementers were interested primarily in showing that a relational-or “relational”-DBMS
    could achieve reasonable performance (recall that “relational will never perform”
    was a widely held mantra at the time). They weren’t so interested in the form
    or quality of the user interface. In fact, some of them, at least, freely admitted
    that they weren’t language designers as such. I’m pretty sure they weren’t all
    totally committed to SQL specifically. (On the other hand, it’s true that at least
    one of the original SQL language designers was a key player in the System R team.)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我的记忆可能有缺失，但我记得 System R 的实施者主要是对一种关系型或“关系型”DBMS能否获得合理性能感兴趣（当时普遍流行“关系型永远不可能获得良好性能”）。他们对用户界面的形式或质量并不那么感兴趣。实际上，至少有一些人坦率承认他们不是语言设计者。我非常确定，他们并不是特别致力于
    SQL。 （另一方面，至少有一位原始SQL语言设计者是System R团队的关键人物。）
- en: 'Q:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 'Q:'
- en: Why didn’t “the true relational fan club” in IBM-Ted and yourself in particular-make
    more fuss about SQL’s deficiencies at the time, when the DB2 decision was made?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当初 IBM 决定开发 DB2 时，“真正的关系粉丝俱乐部”为什么没有对 SQL 的不足之处提出更多抱怨，而你们特别是 IBM-Ted自己呢？
- en: 'A:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 'A:'
- en: We did make some fuss but not enough. The fact is, we were so relieved that
    IBM had finally agreed to build a relational-or would-be relational-product that
    we didn’t want to rock the boat too much. At the same time, I have to say too
    that we didn’t realize how truly awful SQL was or would turn out to be (note that
    it’s much worse now than it was then, though it was pretty bad right from the
    outset). But I’m afraid I have to agree, somewhat, with the criticism that’s implicit
    in the question; that is, I think I have to admit that the present mess is partly
    my fault.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '我们确实进行了一些抗议，但不够。事实是，当 IBM 终于同意建立一个关系型或者可能是关系型产品时，我们是如此地如释重负，以至于我们不想过分搅乱局面。同时，我也不得不说我们没有意识到
    SQL 是多么糟糕，或者说将会是多么糟糕（请注意，现在它比当时更糟糕，虽然从一开始就很糟糕）。但我害怕我不得不在一定程度上同意问题中隐含的批评；也就是说，我认为我必须承认现在的混乱部分是我的错。 '
- en: “Certainly I did my bit
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: “自然地，我做了我的一份责任
- en: in the early days to
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期
- en: help push SQL on to
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 推动 SQL
- en: an unsuspecting public
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一个毫无准备的公众
- en: Certainly I did my bit in the early days to help push SQL on to an unsuspecting
    public. In my defense, let me say that the battles inside IBM to get management
    to commit to building a product at all were both bloody and exhausting, and I
    don’t think we had much energy left to fight the battle that said “Well, we’re
    glad you’ve agreed to build a product, but don’t you see you’re still not doing
    it right.” As I’ve said, we made some fuss but not enough, and in fact I don’t
    think the people who were making the decisions at that time cared very much what
    we thought, anyway. (I could cite some concrete examples here but probably shouldn’t.)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，我在早期为了推广 SQL 而向一个毫无准备的公众进行了我的努力。为自己辩护，我可以说，在 IBM 内部争取让管理层承诺建立产品的斗争是非常激烈和耗费精力的，我认为我们已经没有太多的精力去与这样的斗争。“我们很高兴你们同意建立产品，但难道你们没有意识到你们仍然没有做对。”如我所说，我们也进行了一些抗议，但远远不够，实际上，当时做决定的人根本不太在乎我们的想法。（我可以引用一些具体的例子，但可能不应该。）
- en: Anyway, you see what I mean by a sorry story. What makes it even sorrier is
    that, even at the time, a vastly preferable alternative to SQL existed *inside
    IBM!* I’m referring here to ISBL (“Information Systems Base Language”), which
    was developed by Stephen Todd and others at the IBM Peterlee Scientific Centre
    in England (P. A. V. Hall, P. Hitchcock, and S. J. P. Todd, “An Algebra of Relations
    for Machine Computation,” Conf. Record of the 2nd ACM Symposium on Principles
    of Programming Languages, Palo Alto, Calif., January 1975).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，你可以看出这是一个痛心疾首的故事。更令人遗憾的是，即使在当时，IBM内部*存在着一个远优于 SQL 的选择*！我在这里指的是 ISBL（“信息系统基础语言”），这是由IBM彼得利科学中心的
    Stephen Todd 和其他人在英国开发的（P. A. V. Hall, P. Hitchcock 和 S. J. P. Todd，“用于计算机计算的关系代数”，第2届ACM编程语言原理研讨会会议记录，1975年1月，加利福尼亚州帕洛阿尔托）。
- en: The trouble was, California was the center of the world for database work at
    the time. Certainly all mainstream database work in IBM was being done in California.
    Thus, through no fault of their own, the work being done by the ISBL team was
    marginalized at best, if not overlooked entirely, by the IBM powers that be. I
    don’t think it’s an exaggeration to say that the database community in particular,
    and in fact society at large, are still paying the price for this state of affairs.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'RM:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: You’ve said that Ted was a genius but he wasn’t too good at communicating his
    ideas to ordinary mortals, so you took over this area. Your writing style is very
    coherent. Did you learn to write in this style or do you write as you talk?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'CJD:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: I didn’t exactly “take over this area”!-it would be more accurate to say it
    fell into my lap. So much always depends on happenstance, doesn’t it-the chance,
    or good luck, of being in the right place at the right time. I’ve explained how
    I first came across Ted’s ideas in 1970, and I’ve said, or at least implied, that
    they seemed right to me because of their mathematical foundation. I’ve also talked
    about how we (my colleague in IBM Hursley and myself) were thinking about how
    to incorporate Ted’s ideas into PL/I. What I didn’t say was that Ted at the time
    was fighting very much of a lone battle in IBM; he was up against some rather
    powerful vested interests.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: “Ted at the time was fighting very
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: much of a lone battle in IBM;
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: he was up against some rather
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: powerful vested interests.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: So in order to show that he wasn’t completely alone, Ted invited IBM Hursley
    to send someone out to California, where he was, to talk to various people about
    what we were doing. And that was me. And I flatter myself that my presentations
    went down well-I mean, I was able to make people understand what we were doing-and
    I began to get more requests to talk about relational technology, both to IBM
    folks and to IBM customers (and to technical audiences outside IBM as well, come
    to that). Then I got an IBM assignment to California (this was in 1974) and, well,
    one thing led to another, and Ted and I found ourselves increasingly being seen
    as a team.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for saying my writing style is “coherent”! But I think I can explain
    that, too. The truth is, I’m a rather slow learner. As a consequence, I think
    I can be a good teacher, because I can identify places where students are likely
    to have trouble. The truth is, all of my books are essentially written for me!
    What I mean is, I try to write the book I would have liked to have read when I
    was learning the subject at hand myself. But I’ve never taken any formal lessons
    in how to write. (It’s relevant to add that I’ve always loved books anyway, and
    I’ve always been interested in words, and language, and languages. Not just or
    even primarily computer books, I hasten to add; and not just or even primarily
    computer languages, either.)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: As for “Do I talk the same way?” well, I certainly try to when I’m teaching
    a class. Probably not, in unprepared conversation! In fact, certainly not. I need
    time to get my thoughts in order. So I’m often unable to answer a question coherently
    right away, for example. But then again, I tend to be rather suspicious of people
    who have an immediate opinion on everything and are never at a loss for words.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 至于“我是否说话方式相同？”嗯，当我在上课时，我肯定会尽量做到。可能不会在没有准备的对话中！实际上，肯定不会。我需要时间整理思绪。所以，例如，我经常不能立即有条理地回答问题。但另一方面，我倾向于对那些对一切都有立即意见并且从不缺乏话语的人持怀疑态度。
- en: 'RM:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'RM:'
- en: There’s a common application language in D. Why, in your view isn’t this more
    widely used? Is there a possibility that in say 5 years, SQL will become what
    COBOL is to programmers, very much the last resort? If SQL is demoted to a language
    of last resort what will have been its legacy?
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在 D 中有一个通用的应用语言。在你看来，为什么这不被更广泛地使用呢？有没有可能在5年内，SQL会变成程序员眼中的像 COBOL 一样，非常不得已的最后手段？如果
    SQL 被降级为最后手段的语言，那它的遗产会是什么？
- en: 'CJD:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 'CJD:'
- en: 'First let me correct a misconception. **D**-the name is always set in bold
    face, by the way-isn’t a language; rather, it’s a generic name for any language
    that conforms to the principles laid down by *The Third Manifesto*. *The Third
    Manifesto* in turn is a set of prescriptions for future data and database management
    systems; it consists essentially of a precise though somewhat terse definition
    of the relational model and a supporting type theory (including a comprehensive
    model of type inheritance). It’s described in detail in the book *Databases, Types,
    and the Relational Model: The Third Manifesto* (3rd edition), by Hugh Darwen and
    myself (Addison-Wesley, 2007). Now, Hugh and I needed a generic name for a language
    that we could reference in the prescriptions of the *Manifesto*, just so that
    we could save ourselves a great deal of circumlocution in writing those prescriptions,
    and for reasons of our own we chose the name **D**. Any number of distinct languages
    could qualify as a valid **D**, though it goes without saying that SQL unfortunately
    isn’t one of them.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我纠正一个误解。**D**——顺便说一句，名字总是以粗体显示——不是一种语言；相反，它是符合《第三宣言》所规定原则的任何语言的通用名称。《第三宣言》本身是针对未来数据和数据库管理系统的一套规范；它基本上是对关系模型和支持类型理论的精确但有些简洁的定义（包括一种全面的类型继承模型）。它在
    Hugh Darwen 和我（Addison-Wesley，2007年）合著的《数据库、类型和关系模型：第三宣言》（第三版）一书中有详细描述。现在，Hugh
    和我需要一个通用的名称来引用我们在《宣言》中的规定的语言，只是为了在写这些规定时节省大量的绕圈子的话，出于我们自己的原因，我们选择了名字**D**。任何数量的不同语言都可以符合有效的**D**的要求，尽管不言而喻，SQL不幸不是其中之一。
- en: Now, we also needed a concrete language that we could use in the *Manifesto*
    book in examples and so forth, and so we invented a concrete **D** that we called,
    for obvious reasons, **Tutorial D**. (**Tutorial D** is, of course, a valid **D**;
    in fact, it was expressly designed to be suitable as a vehicle for illustrating
    and teaching the ideas of *The Third Manifesto*, though Hugh and I have since
    used it as the basis for examples, and the like, in numerous other books and papers
    and presentations.) And implementations of **Tutorial D**, or something very close
    to it, do exist, though not in product form. One in particular I’d like to mention
    is *Rel*, by Dave Voorhis, which you can access by going to the website *www.thethirdmanifesto.com*.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们还需要一种具体的语言，可以在《宣言》书中进行示例等用途，因此我们发明了一种具体的**D**，我们称之为，毫无疑问，**Tutorial D**。（**Tutorial D**当然是一种有效的**D**；实际上，它被专门设计为适合用作说明和教授《第三宣言》中的思想的工具，尽管
    Hugh 和我后来在许多其他书籍、论文和演示中使用它作为例子等的基础。）**Tutorial D** 的实现，或者非常接近它的东西确实存在，尽管不是产品形式。我想特别提到的一个是由
    Dave Voorhis 制作的 *Rel*，你可以通过访问网站 *www.thethirdmanifesto.com* 来访问。
- en: 'So now let me reinterpret your question: Why isn’t **Tutorial D** more widely
    used? Well, I think I’ve already answered that when I talked earlier about the
    SQL “stranglehold.” But it’s also true that there’s something you might call “the
    *Third Manifesto* community,” which consists of people all over the world-I’m
    afraid I don’t really have any idea how many-who do indeed use **Tutorial D**
    or something very like it for various practical and theoretical purposes.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我重新解释你的问题：为什么**教程 D**没有被广泛使用？嗯，我认为我在早些时候谈到 SQL “控制”时已经回答过了。但也可以说，有一种你可以称之为“*第三宣言*社区”，由世界各地的人组成——恐怕我真的不知道有多少人——他们确实使用**教程
    D**或非常类似它用于各种实际和理论目的。
- en: “Tutorial **D** is, in a sense,
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: “教程 **D** 在某种意义上
- en: only a toy language …
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 只是一个玩具语言……
- en: it has no I/O, and it has
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 它没有 I/O，也有
- en: no exception handling
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 没有异常处理
- en: That said, I should also explain that **Tutorial D** is, in a sense, only a
    toy language. To be specific, it has no I/O, and it has no exception handling.
    On the other hand, it *is* well designed, as far as it goes, and one of the things
    we’d like to do (in among a very long list of such things!) is beef it up to become
    what you might call **Industrial D**. And yes, we’d like **Industrial D** to be
    considered-under a much better name, I would assume!-for implementation in an
    industrial context. (As a matter of fact, we’ve already given some thought to
    the question of implementing **Tutorial D**, at least, on top of SQL.) But even
    if **Industrial D** is implemented in product form, will it displace SQL? Well,
    obviously not for many years, if ever (certainly more than five years, I’m quite
    sure of that). But we’re optimists; we’re in this for the long haul; we take the
    view that if we do nothing, then nothing will happen, but if we do something,
    then something might happen.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我也应该解释一下，**教程 D** 在某种意义上只是一个玩具语言。具体来说，它没有 I/O，也没有异常处理。另一方面，就其设计而言，它*是*设计良好的，而且我们想做的事情之一（在很长的事项清单中！）是加强它，使其成为你可能称之为**工业
    D**的东西。是的，我们希望**工业 D**被认为是在工业环境中实现的——我会假设使用一个更好的名字！-。事实上，我们已经考虑过实现**教程 D**的问题，至少是在
    SQL 之上。但即使**工业 D**以产品形式实现，它会取代 SQL 吗？显然不会，至少在很多年之后，如果真的有可能的话（我对此非常确定，至少要五年以上）。但我们是乐观主义者；我们长期以来都持这种观点；我们认为如果我们什么都不做，那么什么都不会发生，但如果我们做了些什么，那么可能会发生些什么。
- en: 'RM:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: RM：
- en: The World Wide Web Consortium (W3C) enthuses about XQuery saying it’s replacing
    proprietary languages, is much simpler to work with and easier to maintain than
    many other alternatives. Is XQuery a better alternative to SQL?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 万维网联盟（W3C）对 XQuery 表示赞赏，称其正在取代专有语言，比许多其他替代方案更简单易用且更易维护。XQuery 是否是 SQL 的更好替代方案？
- en: 'RM:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: RM：
- en: No. But you probably wanted more than that, so I’ll give it a go. First of all,
    Xquery is designed to work with XML data, of course. Now, I haven’t taken a close
    look at either XML or XQuery for some years now, so the following remarks might
    no longer be totally applicable. If they aren’t, then I apologize. But here’s
    what I believe. First of all, XML structures are fundamentally hierarchic; thus,
    all of the intrinsic difficulties with hierarchies that we experienced all those
    years ago-with IBM’s IMS product in particular-are rearing their ugly head again.
    (I often characterize XML, perhaps a little unfairly, as “IMS warmed over.”) At
    least two serious problems arise immediately. First, the innate lack of symmetry
    in hierarchies means the structure might be suitable for some problems but will
    certainly be unsuitable for others. Second, many to many relationships will have
    to be dealt with in some ad hoc and probably unsatisfactory fashion.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 不。但你可能想要更多，所以我会尝试解释一下。首先，Xquery 当然是设计用于处理 XML 数据的。现在，我已经多年没有仔细研究过 XML 或 XQuery
    了，所以以下观点可能不再完全适用。如果不适用，那么我道歉。但这是我所相信的。首先，XML 结构基本上是分层的；因此，我们多年前在与 IBM 的 IMS 产品（特别是）一起经历的所有层次结构固有的困难再次出现了。（我经常将
    XML 描述为“重新加工的 IMS”。）至少有两个严重的问题立即出现。首先，层次结构中固有的不对称性意味着该结构可能适用于某些问题，但肯定不适用于其他问题。其次，许多对多关系将不得不以一些临时和可能不令人满意的方式处理。
- en: “XQuery is necessarily
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: “XQuery 必然是
- en: much more complicated
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 更加复杂
- en: than a relational language
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 胜过关系语言
- en: In fact, XML structures aren’t just hierarchies, they’re linearizable hierarchies-there’s
    a linear sequence to the nodes (I think I’m right in saying it’s top down, left
    to right sequence).   As a consequence, when W3C tried to define an XML algebra
    (allegedly as a basis for XQuery, though I think it was defined after XQuery was
    defined), they had to build on the sequence abstraction. But sequences aren’t
    a *good* abstraction! I mean, they’re unnecessarily complicated. Sets (which the
    relational model is based on) are so much better. One immediate consequence is
    that XQuery is necessarily much more complicated than a relational language. In
    particular, it includes support for iteration, which relational languages don’t
    need, or have.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up: I’m obviously no fan of SQL, but no, I don’t think XQuery is any
    better. In fact, I think it suffers from some of the same problems that SQL does.
    At least SQL, with all of its faults, can be used-with a *lot* of discipline,
    like avoiding duplicates and nulls-almost as if it were relational; but the same
    clearly can’t be said of XQuery.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'RM:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Can you identify any big changes in the way you think about relations and relational
    databases since your early days? Do you still enjoy your work as much as you used
    to when you first started?
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'CJD:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: “A database, in order to be
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: a truly general purpose
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: database within the meaning
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: of the act, must be relational
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'In answer to your first question, yes. One big change is that in the early
    days, when we were still trying to convince people that relational was real (or
    at least could be), we-and especially I-necessarily got into the business of comparing
    the relational model with the systems (primarily hierarchic and network systems)
    that existed at the time. Typically, we would take sample problems and show how
    and why the relational solutions were so much better than the hierarchic and network
    solutions. But in doing that, we unwittingly did ourselves and the cause a huge
    disservice: We effectively spread the idea, or perception, that relations were
    “the same kind of animal” as hierarchies and networks, and in particular by the
    idea that even if relations did replace hierarchies and networks as we said they
    would, so relations in turn would sometime be replaced by something better. But
    I’ve come to realize that that perception was very wrong. I now believe-and I’ve
    explained this belief in detail in writing, as well as in my live lectures-that
    a database, in order to be a truly general purpose database within the meaning
    of the act, *must* be relational.  Relational really is different.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve lost count of the number of times someone has come up to me and said “I’ve
    got something that’s better than the relational model.” (For a good example of
    the kind of thing I mean, take a look at the letters column in the January 2013
    issue of *CACM*. I might also mention the truly appalling preamble to a book I
    read recently extolling the virtues and “advantages” of graph databases. And look
    at all the nonsense we were hearing a few years ago about how object databases
    were going to take over the world. At least we don’t hear so much about this last
    one any more, do we?) It seems to me that if you want to replace Technology A
    by Technology B, then it’s incumbent on you, first, to understand Technology A
    properly; second, to show that Technology B can solve all of the problems that
    Technology A solves; and third, to show there’s some problem that Technology B
    solves and Technology A doesn’t. And I can state categorically that, in my experience,
    people always fail at the first of these hurdles: They don’t understand the relational
    model in the first place. In fact, I’d like to offer a challenge: Show me one
    problem the relational model ought to be able to solve but can’t.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经数不清有多少人过来对我说“我有比关系模型更好的东西”。（作为一个很好的例子，看一下*CACM* 2013年1月期的信件专栏。我还可以提一下最近我读过的一本书的真正糟糕的序言，它大肆吹捧图数据库的优点和“优势”。还有几年前我们听到的所有有关对象数据库将统治世界的胡说八道。至少我们不再听到这最后一个了，不是吗？）在我看来，如果你想用技术B取代技术A，那么首先你必须正确理解技术A；其次，你必须证明技术B可以解决技术A解决的所有问题；第三，你必须证明技术B可以解决技术A不能解决的某些问题。而我可以明确地说，在我的经验中，人们总是在这三个难题的第一个障碍上失败：他们根本就不理解关系模型。事实上，我想提出一个挑战：给我展示一个关系模型应该能够解决但不能解决的问题。
- en: 'In connection with the foregoing, I’d like to mention one of my current research
    interests, temporal data. There’s been a lot of research into this subject over
    the years, and a lot of solutions proposed-but most of those solutions are nonrelational.
    I don’t want to get into details here of just exactly how they’re nonrelational;
    let me just say that the researchers often don’t seem to realize what they’re
    proposing is indeed nonrelational, because their papers have titles like “Temporal
    Extensions to the Relational Model,” or “Adding the Time Dimension to the Relational
    Model.” I believe this is more evidence of the general lack of understanding of
    the relational model in the database community at large. In strong contrast to
    the foregoing, I’m very pleased to be able to tell you that the relational model
    actually needs no extension, and no subsumption, and above all no perversion,
    in order to incorporate temporal support.  In fact, Hugh Darwen, Nikos Lorentzos,
    and I have just (July 2014) published a book that clearly demonstrates this very
    point (*Time and Relational Theory: Temporal Data in the Relational Model and
    SQL*, Morgan Kaufmann, 2014).'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 关于前述内容，我想提到我目前的一个研究兴趣，时间数据。多年来对这个主题进行了大量研究，并提出了许多解决方案，但大多数解决方案都是非关系型的。我不想在这里详细说明它们究竟是非关系型的；让我只说一下，研究人员通常似乎没有意识到他们所提出的确实是非关系型的，因为他们的论文标题通常是“关系模型的时间扩展”或“向关系模型添加时间维度”。我相信这更多地证明了数据库社区对关系模型普遍缺乏理解。与前述情况形成鲜明对比的是，我很高兴地告诉大家，实际上关系模型不需要任何扩展、子类化，尤其是没有任何歪曲，就可以纳入时间支持。事实上，Hugh
    Darwen、Nikos Lorentzos和我刚刚（2014年7月）出版了一本书，清楚地证明了这一点（《时间与关系理论：关系模型和SQL中的时间数据》，Morgan
    Kaufmann，2014年）。
- en: 'I have another reason for answering yes to your question, too (“Have I changed
    the way I think about relations and relational databases since the early days?”)-and
    here I must credit several people: my friends David McGoveran, Hugh Darwen again,
    and a late colleague Adrian Larner. Together, these friends and colleagues made
    me realize that the best way to think of a relation is not just as an abstraction
    of the classical concept of a file (with its records and fields), but rather as
    the extension of a predicate. Once again, I don’t think this is the place to get
    into details-I’ll just to have to point you to any of my recent writings (e.g.,
    the book on temporal databases just mentioned), where this perception is explained
    in depth (and the reason why it’s important is explained in depth, too).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我还有另一个理由回答肯定的，即使对于你的问题（“自从早期以来，我对关系和关系数据库的思考方式有所改变吗？”）-在这里我必须感谢几个人：我的朋友大卫·麦克高文、休·达温，还有已故的同事阿德里安·拉纳。这些朋友和同事一起让我意识到，把关系看作不仅是对经典文件概念（具有记录和字段）的抽象，而是谓词的延伸才是最佳方式。再次强调，我认为这不是深入讨论的地方
    - 我只能把你指向我最近的任何写作（例如，刚提到的关于时间数据库的书），在那里这种感知被深入解释（以及为什么这很重要也被深入解释）。
- en: 'By the way, as a kind of PS to both of the foregoing responses, I’d like to
    mention that the SQL standard does now include some support for temporal data.
    But it seems to us (i.e., my coauthors and myself) that the support in question
    involves yet another rather large violation of relational principles. To be more
    specific: Suppose we create a table EMP, with columns EMPNO, EFROM, and ETO, with
    an intended interpretation along the lines of *Employee ENO was employed from
    date EFROM to date ETO*. Then it turns out, in general, that-despite what I just
    said about “intended interpretation”-that table actually has no predicate! At
    least, we haven’t been able to find a predicate that works. (Maybe there is one,
    but as I say we haven’t found it, and I can assure you it certainly wasn’t for
    want of trying.)   I don’t know what the consequences of this departure from relational
    theory are likely to be, but as far as I’m concerned it looks like yet another
    nail in the “SQL is relational” coffin.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，作为对上述两个回答的附带说明，我想提一下，SQL标准现在确实包含了一些对于时间数据的支持。但是在我们看来（即我和我的合著者），所涉及的支持涉及对关系原则的又一个相当大的违反。更具体地说：假设我们创建一个表EMP，其中包含列EMPNO、EFROM和ETO，其预期解释类似于*员工ENO从日期EFROM到日期ETO被雇用*。然后事实证明，一般来说，尽管我刚才提到“预期解释”，但该表实际上没有谓词！至少，我们还没有找到有效的谓词。（也许有，但我可以告诉你，我们并没有找到，我可以向你保证，这绝对不是因为没有尝试。）我不知道这种偏离关系理论的后果可能是什么，但就我而言，这看起来像是“SQL是关系型”的又一个证据。
- en: “The relational model, although
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: “关系模型，尽管
- en: it’s fundamentally so simple,
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上是如此简单，
- en: has amazing depths
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有惊人的深度
- en: 'Turning to your second question (“Do you still enjoy your work as much as you
    used to when you first started?”), my answer here is yes as well. In many ways,
    in fact, I enjoy it more, especially since I now work for myself instead of for
    some corporation. But the real point is this: The relational model, although it’s
    fundamentally so simple (you can explain the basic idea in five minutes), has
    amazing depths. You can peel away layer after layer of meaning and keep on discovering
    more and more. Thus, I’m still learning things about it myself. (Indeed, if I
    wasn’t, I would probably have given up this career years ago and become a park
    ranger or something.)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 转向你的第二个问题（“你现在是否和你刚开始时一样热爱自己的工作？”），我的答案也是肯定的。实际上，在许多方面，我更加喜欢它，特别是因为我现在是为自己工作，而不是为某个公司工作。但真正的重点在于：关系模型，尽管它基本上是如此简单（你可以在五分钟内解释基本思想），但拥有惊人的深度。你可以一层一层地剥开意义，不断发现更多。因此，我自己仍然在学习它的东西。（事实上，如果我没有在学习，那么我可能在几年前就放弃了这个职业，去当公园管理员或其他什么。）
- en: 'RM:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: RM：
- en: Do you feel there were times in your life where your passion for work ran contrary
    or to the detriment of other parts of your life?
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在你生活中是否有过这样的时候，你对工作的热情与其他生活方面相抵触或对其他生活方面造成损害？
- en: 'CJD:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: CJD：
- en: 'Well, I think I need to dispute the premise of your question, slightly. I do
    enjoy my work, very much; it’s challenging and creative and (I believe) useful.
    But I don’t live to work, I work to live. I have absolutely no difficulty in switching
    off work-related thinking when (for example) I’m hiking the desert-which, parenthetically,
    is something I really enjoy doing. I have many interests outside of work: birdwatching,
    wildlife in general, music, politics, hiking, poetry, beer and wine, cosmology,
    art, science fiction, and on and on. Work is one of my interests, but it’s not
    number one in the list. (I don’t think I *have* a number one.)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我想我需要稍微质疑一下你问题的前提。我非常喜欢我的工作；它具有挑战性、创造性，而且（我相信）是有用的。但我不是为了工作而生活，我是为了生活而工作。当我（例如）在徒步旅行沙漠时——顺便说一句，这是我非常喜欢做的事情——我绝对没有任何困难地摆脱与工作相关的思维。我的工作之外还有很多兴趣：观鸟、野生动物，音乐，政治，徒步旅行，诗歌，啤酒和葡萄酒，宇宙学，艺术，科幻小说等等。工作是我的兴趣之一，但不是第一位。（我不认为我有一个第一位。）
- en: 'RM:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 'RM:'
- en: Do you consider yourself a scientist, an engineer, a writer or a craftsman?
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为自己是科学家、工程师、作家还是工匠？
- en: 'CJD:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 'CJD:'
- en: 'Scientist: Yes (at least if you consider mathematics a science; I know some
    people don’t, but I do). Engineer: No. Writer: Yes (though I might prefer “teacher”).
    Craftsman: Don’t know! I’m not sure what you’re getting at here.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 科学家：是的（至少如果你认为数学是一门科学的话；我知道有些人不这样认为，但我认为是）。工程师：不是。作家：是的（虽然我可能更喜欢“教师”）。工匠：不知道！我不确定你在这里想表达什么。
- en: 'RM:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 'RM:'
- en: Do you have any recommendations for people who want to follow in your footsteps?
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有对那些想要走你的路的人有什么建议？
- en: 'CJD:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 'CJD:'
- en: 'I don’t know about “following in my footsteps,” but if you’re talking about
    people who want to work in the relational field-let me stress that *relational*,
    though!-then, well, I don’t think I can do better than paraphrase some remarks
    I made in another recent interview. First, if people are serious about going into
    this field, then I congratulate them; the subject is intellectually stimulating,
    and pragmatically important, and it can be *fun*.  As for advice, one thing I
    can say is this (and I’m sorry if this sounds a little self-serving-I don’t mean
    it to be):'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我不清楚“追随我的脚步”，但如果你说的是想在关系领域工作的人——让我强调一下*关系*，尽管！——那么，嗯，我觉得我无法比另一次最近的采访中我所说的话更好地改述了。首先，如果人们认真考虑进入这个领域，那么我祝贺他们；这个主题在智力上刺激，实用重要，并且可以是*有趣的*。至于建议，我可以说的一件事是（如果这听起来有点自私，我很抱歉——我不是这个意思）：
- en: 1\. Learn the relational model, by reading the right books and/or attending
    the right courses.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 通过阅读合适的书籍和/或参加合适的课程来学习关系模型。
- en: 2\. Go out and get your hands dirty working on a real project for a year or
    three.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 出去，动手实际做一年或三年的真实项目。
- en: 3\. Come back and read those books and/or attend those courses again.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 回来，重新阅读那些书籍和/或再次参加那些课程。
- en: “Learn the relational
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: “学习关系
- en: model first,SQL second
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 先模型，其次是SQL。
- en: 'A related piece of advice is:  Learn the relational model first, SQL second
    (doing it the other way around is *hard*).  Finally, read either or both of Ted
    Codd’s first two papers every year. (Those papers are “Derivability, Redundancy,
    and Consistency of Relations Stored in Large Data Banks”, IBM Research Report
    RJ599, August 19th, 1969, reprinted in *ACM SIGMOD Record 38*, No. 1 (March 2009),
    and “A Relational Model of Data for Large Shared Data Banks”, *CACM 13*, No. 6,
    June 1970, which you can find online.)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个相关的建议是：先学习关系模型，其次学习SQL（反过来做是*困难的*）。最后，每年阅读泰德·科德的前两篇论文中的任何一篇或两篇。（这些论文是“存储在大型数据库中的关系的推导性、冗余性和一致性”，IBM研究报告RJ599，1969年8月19日，重印于*ACM
    SIGMOD Record 38*，第1期（2009年3月），以及“用于大型共享数据库的关系模型”，*CACM 13*，第6期，1970年6月，你可以在网上找到。）
- en: 'RM:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 'RM:'
- en: Is there anything I haven’t asked about your work that you thought I might?
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 有关你的工作我没有问到的东西吗？
- en: 'CJD:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'CJD:'
- en: This is a dangerously open ended question! But I think I’ve been quite self-indulgent
    enough already, about quite enough different topics, so I think I’d better just
    stop here. Thank you for the opportunity to air my opinions.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个危险的开放式问题！但我认为我已经对相当多不同的话题非常自我放纵了，所以我想我最好在这里停止了。谢谢你给我发表意见的机会。
