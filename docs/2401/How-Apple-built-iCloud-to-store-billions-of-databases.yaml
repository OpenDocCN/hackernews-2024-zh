- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:51:55'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年05月27日14:51:55
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: How Apple built iCloud to store billions of databases
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 苹果如何构建iCloud来存储数十亿个数据库
- en: 来源：[https://read.engineerscodex.com/p/how-apple-built-icloud-to-store-billions](https://read.engineerscodex.com/p/how-apple-built-icloud-to-store-billions)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://read.engineerscodex.com/p/how-apple-built-icloud-to-store-billions](https://read.engineerscodex.com/p/how-apple-built-icloud-to-store-billions)
- en: '*Engineer’s Codex is a publication distilling real-world software engineering.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*Engineer’s Codex是一个概括实际软件工程的出版物。*'
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Throughout the last few months, I’ve written about various tech “behind-the-scenes”
    in Big Tech, such as [Meta's internal serverless platform](https://engineercodex.substack.com/p/meta-xfaas-serverless-functions-explained)
    and [Google’s internally-loved code review tool](https://engineercodex.substack.com/p/how-google-takes-the-pain-out-of).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几个月中，我已经写了一些关于大型科技公司“幕后”的技术，例如[Meta的内部无服务器平台](https://engineercodex.substack.com/p/meta-xfaas-serverless-functions-explained)和[Google内部喜爱的代码审查工具](https://engineercodex.substack.com/p/how-google-takes-the-pain-out-of)。
- en: Apple, on the other hand, is not as public with their infrastructure. I wanted
    to find out how Apple built iCloud and in this article, I cover everything I know.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，苹果的基础设施并不像公开。我想找出苹果是如何构建iCloud的，在本文中，我涵盖了我所知道的一切。
- en: '**Apple uses [FoundationDB](https://www.foundationdb.org/) and Cassandra for
    iCloud and CloudKit, their cloud backend service.** And yes, the title is not
    incorrect: Apple really does store **billions of databases in their extreme multi-tenant
    architecture.**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**苹果使用[FoundationDB](https://www.foundationdb.org/)和Cassandra来构建iCloud和CloudKit，他们的云后端服务。**
    是的，标题并没有错误：苹果确实在他们的极端多租户架构中存储**数十亿个数据库**。'
- en: Before reading, these are the **applicable lessons and guidelines.**
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读之前，这些是**适用的教训和指南。**
- en: I found that a lot of the lessons from the paper and from Apple track very closely
    to the lessons of [Meta’s architecture of their serverless platform.](https://read.engineerscodex.com/p/meta-xfaas-serverless-functions-explained)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[我发现论文和苹果的很多课程与[Meta的无服务器平台架构](https://read.engineerscodex.com/p/meta-xfaas-serverless-functions-explained)的课程非常接近。](https://read.engineerscodex.com/p/meta-xfaas-serverless-functions-explained)'
- en: Both use **asynchronous processing** smartly in order to make user functionalities
    smoother. Meta uses their serverless stack for non-user-facing functions. Apple
    uses async processing for almost *all* of the Record Layer’s functionalities (explained
    in-depth down below) in order to *hide latency from the user*.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两者都巧妙地使用**异步处理**，以使用户功能更加流畅。Meta使用他们的无服务器堆栈进行非用户界面功能。苹果几乎*所有*的Record Layer功能（在下面进行了详细解释）都使用异步处理，以*隐藏用户的延迟*。
- en: Both utilize **stateless architecture** liberally, knowing that they have intense
    scalability needs.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两者都大量使用**无状态架构**，因为它们具有强大的可扩展性需求。
- en: Both **isolate resources logically** for reliability and availability.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两者都为了可靠性和可用性而**逻辑隔离资源**。
- en: Both **handle diverse ranges of needs simply**. Apple mentions how it’s “tempting
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两者都**简单处理多样化的需求**。苹果提到了如何“诱人
- en: to provision and operate separate systems to store ‘small data’ and ‘big data.’”
    However, this increases operational complexity, and instead, they handle all types
    of data needs with one abstraction. Meta does the same with their serverless platform
    providing one abstraction for all kinds of function loads.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了提供‘小数据’和‘大数据’而预留和操作单独的系统。”然而，这会增加操作复杂性，而他们通过一个抽象处理所有类型的数据需求。Meta在其无服务器平台上使用相同的方式，为所有类型的功能负载提供一个抽象。
- en: Both **build layers of abstractions** in order to make the developer experience
    better. Application developers shouldn’t have to worry about scalability needs
    - that’s handled deeper down the stack by distributed system engineers.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两者都**构建抽象层**，以改善开发人员的体验。应用程序开发人员不必担心可扩展性需求 - 这由分布式系统工程师在更深的堆栈中处理。
- en: '**Know your user.** Each layer, API, and design decision provided by Meta and
    Apple is guided by clear knowledge on who the user of the specific technology
    is, whether it be an application development team or an observability team.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**了解你的用户。** Meta和苹果提供的每个层，API和设计决策都受到对特定技术用户的清晰了解的指导，无论是应用开发团队还是可观察性团队。'
- en: '* * *'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '***[SWE Quiz](http://swequiz.com/)** is a resource of 450+ questions to reveal
    your gaps in software domain knowledge, like [databases](https://swequiz.com/learn/databases-roadmap),
    [caching](https://swequiz.com/learn/caching-roadmap), and [networking](https://swequiz.com/learn/networking-roadmap).
    Many of these questions are verified concepts that have been asked in interviews
    with Meta, Apple, Airbnb, Google, and more.*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '***[SWE Quiz](http://swequiz.com/)** 是一个包含 450+ 个问题的资源，可揭示您在软件领域知识中的差距，比如[数据库](https://swequiz.com/learn/databases-roadmap)、[缓存](https://swequiz.com/learn/caching-roadmap)和[网络](https://swequiz.com/learn/networking-roadmap)。其中许多问题是经过验证的概念，曾在
    Meta、Apple、Airbnb、Google 等公司的面试中提出。*'
- en: '*SWE Quiz also has [structured roadmaps](https://swequiz.com/learn) for learning
    important software concepts.*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*SWE Quiz 还提供[结构化路线图](https://swequiz.com/learn)，用于学习重要的软件概念。*'
- en: '[Get Lifetime Access to SWE Quiz](https://swequiz.com)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[获得 SWE Quiz 终身访问权限](https://swequiz.com)'
- en: '* * *'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[Cassandra](https://cassandra.apache.org/_/index.html) is a wide-column NoSQL
    database management system. It was originally developed at Facebook to power the
    Facebook inbox search feature. Interestingly, Meta themselves have replaced much
    of their Cassandra usage with [ZippyDB](https://engineering.fb.com/2021/08/06/core-infra/zippydb/)
    instead.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[Cassandra](https://cassandra.apache.org/_/index.html) 是一种宽列 NoSQL 数据库管理系统。它最初是在
    Facebook 开发，用于支持 Facebook 的收件箱搜索功能。有趣的是，Meta 本身已经用 [ZippyDB](https://engineering.fb.com/2021/08/06/core-infra/zippydb/)
    替换了大部分的 Cassandra 使用。'
- en: iCloud is partly powered by Cassandra. Apple runs one of the largest Cassandra
    deployments in the world, [according to DataStax](https://news.ycombinator.com/item?id=9307563).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: iCloud 部分由 Cassandra 提供支持。根据 DataStax 的说法，苹果运行着世界上最大的 Cassandra 部署之一](https://news.ycombinator.com/item?id=9307563)。
- en: '[They report](https://twitter.com/erickramirezau/status/1578063811495477248):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[他们报告](https://twitter.com/erickramirezau/status/1578063811495477248)：'
- en: Over 300k instances/nodes
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超过 300k 个实例/节点
- en: Hundreds of petabytes of data (if not exabytes)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数以百万计的 PB 数据（如果不是 EB）
- en: Over 2 PB per cluster, with thousands of clusters
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个集群超过 2 PB，拥有数千个集群
- en: Millions of queries per second
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每秒数百万次查询
- en: Thousands of applications
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数千个应用
- en: Other snippets of Cassandra in iCloud show that there are **exabytes of data
    under management**. [There are](https://news.ycombinator.com/item?id=33124631#33136026)
    **[multiple Cassandra nodes per server](https://news.ycombinator.com/item?id=33124631#33136026)**[,
    and the teams at Apple are smart about blast radius and sharding](https://news.ycombinator.com/item?id=33124631#33136026).
    This makes sure iCloud data availability is near 100%.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: iCloud 中的其他 Cassandra 片段显示，管理着**数量巨大的数据**。[有](https://news.ycombinator.com/item?id=33124631#33136026)
    **[每个服务器上都有多个 Cassandra 节点](https://news.ycombinator.com/item?id=33124631#33136026)**，而且苹果的团队在分片和分区方面非常聪明](https://news.ycombinator.com/item?id=33124631#33136026)，这确保了
    iCloud 数据的可用性接近 100%。
- en: Cassandra is still actively improved upon at Apple. Scott Andreas of Apple gave
    a talk about the [future of Cassandra last month.](https://www.youtube.com/watch?v=hUxLJSFi2-A)
    On Apple’s jobs page, they commonly mention Cassandra when hiring for distributed
    systems engineers.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Apple，Cassandra 仍在积极改进。苹果的 Scott Andreas 上个月就[Cassandra 的未来](https://www.youtube.com/watch?v=hUxLJSFi2-A)做了一次演讲。在苹果的职位页面上，他们在招聘分布式系统工程师时经常提到
    Cassandra。
- en: '**However, [CloudKit](https://developer.apple.com/icloud/cloudkit/) + Cassandra
    ran into two scalability limitations, which led to their adoption of FoundationDB.**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**然而，[CloudKit](https://developer.apple.com/icloud/cloudkit/) + Cassandra 遇到了两个可扩展性限制，这导致他们采用了
    FoundationDB。**'
- en: Within a single zone, **only one operation can happen at a time**, even if different
    records are being edited. This can be problematic for apps where multiple users
    or devices need to work on shared data simultaneously.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单个区域内，**每次只能进行一项操作**，即使正在编辑不同的记录。对于需要多个用户或设备同时处理共享数据的应用程序，这可能会有问题。
- en: When updating multiple records simultaneously in an atomic operation, the updates
    are limited to a single Cassandra partition. **These partitions have a maximum
    size they can handle, and as a partition's size increases, Cassandra tends to
    slow down.**
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在原子操作中同时更新多个记录时，更新将限制在单个 Cassandra 分区内。**这些分区有它们能处理的最大大小，随着分区大小的增加，Cassandra
    的速度会变慢。**
- en: '**FoundationDB and the Record Layer solved both of these issues.**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**FoundationDB 和 Record Layer 解决了这两个问题。**'
- en: Apple is much more public about FoundationDB. They [acquired FoundationDB in
    2015](https://techcrunch.com/2015/03/24/apple-acquires-durable-database-company-foundationdb/)
    and have since published various papers detailing their use of FoundationDB.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果对 FoundationDB 更加公开。他们[在2015年收购了 FoundationDB](https://techcrunch.com/2015/03/24/apple-acquires-durable-database-company-foundationdb/)，此后发布了各种详细介绍他们使用
    FoundationDB 的论文。
- en: '[FoundationDB](https://github.com/apple/foundationdb) is an open-source, distributed,
    transactional key-value store. It’s designed to handle large volumes of data and
    works well for both read/write workloads and write-heavy workloads. It’s also
    [ACID-compliant](https://www.swequiz.com/learn/acid-properties).'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[FoundationDB](https://github.com/apple/foundationdb)是一个开源的、分布式的、事务性的键值存储。它被设计用于处理大量数据，对于读/写工作负载和写入重负载都很有效。它也是[ACID
    兼容](https://www.swequiz.com/learn/acid-properties)的。'
- en: Apple uses the **[FoundationDB Record Layer](https://github.com/FoundationDB/fdb-record-layer)**
    extensively for CloudKit (Apple’s cloud backend service).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果广泛使用**[FoundationDB Record Layer](https://github.com/FoundationDB/fdb-record-layer)**来支持
    CloudKit（苹果的云后端服务）。
- en: 'From their [GitHub](https://github.com/FoundationDB/fdb-record-layer):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从他们的[GitHub](https://github.com/FoundationDB/fdb-record-layer)页面：
- en: 'The Record Layer is a Java API providing a record-oriented store on top of
    FoundationDB, (very) roughly equivalent to a simple relational database, featuring:'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 记录层是一个 Java API，在 FoundationDB 之上提供了一个基于记录的存储，（非常）粗略地相当于一个简单的关系数据库，具有以下特点：
- en: ''
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Structured types** - Records are defined and stored in terms of [protobuf](https://developers.google.com/protocol-buffers/)
    (Protocol Buffer) messages. Protocol Buffers were first designed by Google.'
  id: totrans-45
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构化类型** - 记录是根据[protobuf](https://developers.google.com/protocol-buffers/)（Protocol
    Buffer）消息定义和存储的。Protocol Buffers 最初由 Google 设计。'
- en: ''
  id: totrans-46
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Indexes** - The Record Layer supports a variety of different index types
    including value indexes (the kind provided by most databases), rank indexes, and
    aggregate indexes. Indexes and primary keys can be defined either via protobuf
    options or programmatically.'
  id: totrans-48
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引** - 记录层支持各种不同类型的索引，包括值索引（大多数数据库提供的类型）、排名索引和聚合索引。索引和主键可以通过 protobuf 选项或以编程方式定义。'
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-50
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Complex types** - Support for complex types, such as lists and nested records,
    including the ability to define indexes against such nested structures.'
  id: totrans-51
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂类型** - 支持复杂类型，例如列表和嵌套记录，包括定义针对这些嵌套结构的索引的能力。'
- en: ''
  id: totrans-52
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Queries** - The Record Layer does not provide a query language, however it
    provides query APIs with the ability to scan, filter, and sort across one or more
    record types, and a query planner capable of automatic selection of indexes.'
  id: totrans-54
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询** - 记录层并不提供查询语言，但提供了具有扫描、过滤和排序能力的查询 API，并且具有自动选择索引的查询计划器。'
- en: ''
  id: totrans-55
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-56
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Many record stores, shared schema** - The Record Layer provides the ability
    to support many discrete record store instances, all with a shared (and evolving)
    schema. For example, rather than modeling a single database in which to store
    all users'' data, each user can be given their own record store, perhaps sharded
    across different FDB cluster instances.'
  id: totrans-57
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**许多记录存储，共享模式** - 记录层提供支持许多离散记录存储实例的能力，所有这些实例都具有共享的（和不断演变的）模式。例如，与其对所有用户数据建模以存储在单个数据库中，可以为每个用户提供他们自己的记录存储，可能分片存储在不同的
    FDB 集群实例中。'
- en: ''
  id: totrans-58
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-59
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Very light weight** - The Record layer is designed to be used in a large,
    distributed, stateless environment. The time between opening a store and the first
    query is intended to be measured in milliseconds.'
  id: totrans-60
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非常轻量级** - 记录层设计用于在大型、分布式、无状态环境中使用。打开存储并进行第一次查询之间的时间应该以毫秒计。'
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-62
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Extensible** - New index types and custom index key expressions may be dynamically
    incorporated into a record store.'
  id: totrans-63
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展** - 新的索引类型和自定义索引键表达式可以动态地并入记录存储。'
- en: 'From the [FoundationDB Record Layer](https://www.foundationdb.org/files/record-layer-paper.pdf)
    paper, they write:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[FoundationDB Record Layer](https://www.foundationdb.org/files/record-layer-paper.pdf)的论文，他们写道：
- en: “[FoundationDB Record Layer is used] to provide powerful abstractions to applications
    serving **hundreds of millions of users**. CloudKit uses the Record Layer to host
    **billions of independent databases**, many with a common schema.”
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “[FoundationDB Record Layer被用来]为服务于**数亿用户**的应用程序提供强大的抽象。CloudKit 使用 Record Layer
    来托管**数十亿个独立的数据库**，其中许多具有共同的模式。”
- en: 'The structure of FoundationDB, Record Layer, and CloudKit looks like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: FoundationDB、Record Layer 和 CloudKit 的结构如下：
- en: '**FoundationDB** does all the distributed systems and concurrency control work.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FoundationDB**完成了所有的分布式系统和并发控制工作。'
- en: '**The Record Layer** serves as a relational database to make FoundationDB easier
    to work with.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记录层**作为一个关系型数据库，使得FoundationDB更易于使用。'
- en: '**CloudKit** is the highest layer on top and provides features and APIs for
    application developers. CloudKit isn’t the only thing built on top of the Record
    Layer, but there are also other layers on top built internally for things that
    need structured storage, like a JSON document store.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CloudKit**位于最顶层，为应用程序开发人员提供功能和API。CloudKit不是建立在记录层之上的唯一内容，还有其他层次，用于构建需要结构化存储的内容，比如JSON文档存储。'
- en: '**The Record Layer allows Apple to support multi-tenancy at scale. **'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**记录层使得苹果能够支持大规模的多租户。**'
- en: Actually, that’s somewhat underselling it.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这有点低估了它的价值。
- en: The Record Layer is used for **extreme multi-tenancy, where each user of each
    application gets independent record stores. This means the Record Layer hosts
    billions of independent databases sharing thousands of schemata.**
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 记录层用于**极端的多租户，其中每个应用程序的每个用户都拥有独立的记录存储。这意味着记录层托管着数十亿个独立的数据库，这些数据库共享数千个模式。**
- en: That’s better! And much, much more impressive.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 真是太棒了！而且令人印象深刻得多。
- en: The Record Layer is engineered to handle multi-tenancy at such a large scale
    thanks to two fundamental architectural decisions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 记录层通过两个基本的架构决策，实现了对大规模多租户的处理。
- en: The layer **operates statelessly** allowing for effortless scaling of the compute
    resources by simply adding more of these stateless instances.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该层**以无状态方式运行**，可以通过简单地添加更多这种无状态实例来轻松扩展计算资源。
- en: This stateless architecture simplifies the task for load balancers and routers
    since they only need to focus on the location of the data rather than the capabilities
    of the compute servers. Additionally, stateless servers have a reduced set of
    resources to distribute amongst clients.
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这种无状态的架构简化了负载均衡器和路由器的任务，因为它们只需要关注数据的位置，而不是计算服务器的能力。此外，无状态服务器只需要在客户端之间分配更少的资源。
- en: The layer uses **record store abstraction to manage resource allocation and
    scalability** effectively. This abstraction represents the entirety of a logical
    database, comprising serialized data, indexes, and the operational state.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该层使用**记录存储抽象**来有效地管理资源分配和可伸缩性。这种抽象表示了一个逻辑数据库的全部内容，包括序列化数据、索引和操作状态。
- en: Each record store is allocated a specific key range, which guarantees logical
    separation of data for different tenants. Transferring a tenant's data, if necessary,
    becomes a straightforward process of relocating the assigned key range to a new
    cluster, as all the information required to manage and use the record store is
    contained within this range.
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个记录存储都被分配了一个特定的键范围，这保证了为不同租户的数据进行逻辑分离。如果需要，将租户的数据转移变得非常简单，只需要将分配的键范围重新定位到新的集群即可，因为管理和使用记录存储所需的所有信息都包含在此范围内。
- en: '**In CloudKit, an application is represented by a ''logical container'' which
    follows a defined schema.** This schema outlines the necessary record types, fields,
    and indexes to enable efficient data retrieval and queries. **Applications organize
    their data into ''zones''** within CloudKit, which allows for grouping records
    logically for selective synchronization with client devices.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**在CloudKit中，一个应用程序由一个''逻辑容器''表示，该容器遵循一个定义好的模式。**这个模式概述了启用有效数据检索和查询所需的记录类型、字段和索引。**应用程序在CloudKit中将其数据组织成''区域''**，这允许对记录进行逻辑分组，以便与客户端设备进行选择性同步。'
- en: For each user, CloudKit designates a unique **subspace in FoundationDB**. Within
    this subspace, it creates a **record store for each application a user interacts
    with.** In essence, CloudKit manages a massive number of logical databases—multiplying
    the number of users by the number of applications—each containing its own set
    of records, indexes, and metadata, amounting to **billions of databases.**
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个用户，CloudKit为FoundationDB中的每个应用程序指定一个独特的**子空间**。在这个子空间内，它为用户与之交互的每个应用程序创建一个**记录存储**。实质上，CloudKit管理着大量的逻辑数据库——将用户数量乘以应用程序数量——每个数据库都包含其自己的记录、索引和元数据，总计**数十亿个数据库。**
- en: When CloudKit receives a request from a client device, it directs this request
    to an available **CloudKit Service process via load balancing**. This process
    then interacts with the specific Record Layer record store to fulfill the request.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当CloudKit从客户端设备收到请求时，它会通过**负载均衡**将此请求定向到可用的**CloudKit服务进程**。然后，该进程与特定的记录层记录存储进行交互，以满足请求。
- en: CloudKit converts the defined application schema into a **metadata definition
    within the Record Layer**, which is stored in a separate metadata store. This
    metadata is augmented by CloudKit-specific system fields that track the **record's
    creation, modification times, and the zone** where the record is stored. Zone
    names are prefixed to primary keys to enable efficient access to records within
    each zone. Alongside indexes defined by the user, CloudKit also manages **'system
    indexes'** for internal purposes like managing storage quotas by keeping an index
    that tracks the size of records by their type.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: CloudKit 将定义的应用程序模式转换为 Record Layer 中的 **元数据定义**，该元数据存储在单独的元数据存储中。这些元数据由 CloudKit
    特定的系统字段增强，用于跟踪 **记录的创建、修改时间和存储记录的区域**。区域名称被添加到主键前缀，以便在每个区域内有效地访问记录。除了用户定义的索引外，CloudKit
    还管理用于内部目的的 **'系统索引'**，例如通过跟踪记录大小的索引来管理存储配额。
- en: '**FoundationDB and the Record Layer together solve 4 key problems for Apple
    that either Cassandra alone or FoundationDB alone could not.**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**FoundationDB 和 Record Layer 共同解决了 4 个苹果公司的关键问题，而单独使用 Cassandra 或 FoundationDB
    都无法解决。**'
- en: FoundationDB helps solve personalized full-text search for users to quickly
    access their data.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: FoundationDB 帮助解决了用户快速访问其数据的个性化全文搜索问题。
- en: Their system utilizes **FoundationDB's key order** to allow for quick searches
    on text beginnings (**prefix matching**) and also for more complex searches (like
    finding words that are close together or in a specific order - **proximity and
    phrase search**) without no extra overhead.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 他们的系统利用 **FoundationDB 的键顺序**，允许快速搜索文本开头（**前缀匹配**）以及更复杂的搜索（例如找到彼此接近或按特定顺序排列的单词
    - **接近和短语搜索**）而不需要额外的开销。
- en: In traditional search systems, you often need extra processes running in the
    background to keep the search index up to date, but Apple’s system does everything
    in real-time, which means as soon as data changes, the search index is updated
    instantly—no extra steps needed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的搜索系统中，通常需要额外的后台进程来保持搜索索引的更新，但是苹果公司的系统在实时进行，这意味着数据发生变化时，搜索索引立即更新 - 无需额外步骤。
- en: With FoundationDB, CloudKit handles many updates happening simultaneously in
    a smooth way.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 FoundationDB，CloudKit 能够平稳地处理许多同时发生的更新。
- en: 'Previously, with Cassandra, CloudKit used to rely on a special index that kept
    track of changes in each zone to synchronize data across devices. When a device
    needed to update its data, it would check this index to see what''s new. But this
    system had a drawback: it could cause conflicts when multiple updates happened
    at the same time.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，使用 Cassandra 时，CloudKit 依赖于一个特殊的索引来跟踪每个区域的更改，以同步设备之间的数据。当设备需要更新其数据时，它会检查此索引以查看新内容。但是这个系统有一个缺点：当多个更新同时发生时，可能会导致冲突。
- en: But with FoundationDB, CloudKit uses a special kind of index that keeps track
    of the exact sequence of each change without causing conflicts. This is done by
    **assigning a unique 'version' to every change, and when CloudKit needs to sync,
    it looks at these versions to figure out what updates a device has missed.**
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 但是使用 FoundationDB 时，CloudKit 使用一种特殊类型的索引来跟踪每个更改的确切顺序，而不会引起冲突。这是通过为每个更改分配唯一的“版本”来完成的，当
    CloudKit 需要同步时，它会查看这些版本以确定设备错过了哪些更新。
- en: However, when CloudKit needs to move data across different storage clusters—perhaps
    to distribute the load more evenly—things get tricky because each cluster has
    its own version numbers that don't match up. To solve this, CloudKit gives each
    user's data a 'move count' (called the “incarnation”), which increases every time
    their data is transferred to a new cluster. Each record update includes the user's
    current “incarnation” number, ensuring that even after a move, CloudKit can still
    figure out the correct order of updates by looking at both the incarnation and
    version numbers.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当 CloudKit 需要在不同的存储集群之间移动数据 - 也许是为了更均匀地分配负载 - 事情变得棘手，因为每个集群都有自己的版本号，这些版本号不匹配。为了解决这个问题，CloudKit
    为每个用户的数据分配一个“移动计数”（称为“化身”），每次将其数据传输到新的集群时都会增加这个计数。每个记录更新都包含用户当前的“化身”编号，确保即使在移动后，CloudKit
    仍然可以通过查看化身和版本号来找出正确的更新顺序。
- en: When they switched to this new system, CloudKit faced the challenge of dealing
    with old data that didn't have these version numbers. They cleverly overcame this
    by using a special function that sorts old updates using the previous system before
    the new ones. This meant no complicated changes to the app or leaving behind outdated
    code. This function took into account the incarnation, version, and the old update-counter
    values to maintain the correct order of records.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当他们转换到这个新系统时，CloudKit 面临着处理旧数据的挑战，这些数据没有这些版本号。他们巧妙地通过使用一个特殊函数来克服这一挑战，该函数对旧更新使用先前的系统进行排序，然后再处理新的更新。这意味着不需要对应用程序进行复杂的更改，也不需要留下过时的代码。这个函数考虑了版本、版本和旧的更新计数器值，以维护记录的正确顺序。
- en: FoundationDB is designed for high-concurrency, not low latency. This means it
    can **handle a lot of tasks at the same time rather than focus on the speed of
    individual tasks.**
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: FoundationDB 的设计是为了高并发而不是低延迟。这意味着它可以**同时处理大量任务，而不是关注单个任务的速度。**
- en: To make the most of this design, **the Record Layer does a lot of its work 'asynchronously'**—
    it queues up tasks to be completed in the future, allowing for other work to be
    done in the meantime. This approach helps to cover up any delays that might occur
    during these tasks.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用这种设计，**Record Layer 大部分工作都是“异步”进行的**—它排队等待未来完成的任务，同时允许在此期间完成其他工作。这种方法有助于弥补在这些任务中可能发生的任何延迟。
- en: However, the tool that FoundationDB uses to communicate with its database is
    designed to do one thing at a time using a single thread for networking. In earlier
    versions, this setup caused a traffic jam in the system because everything was
    waiting for its turn in this network thread. **The Record Layer had been using
    this single-threaded approach, which led to a bottleneck.**
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，FoundationDB 用于与其数据库通信的工具设计为使用单个线程进行一次一次的操作进行处理网络。在早期版本中，这个设置导致系统中的交通堵塞，因为一切都在等待在这个网络线程中的轮到。**Record
    Layer 一直在使用这种单线程方法，这导致了瓶颈的产生。**
- en: To improve this, Apple reduced the workload on this network thread. **Now, complex
    tasks seem faster because the system is working with the database on several fronts
    at the same time, rather than forming a queue.** This way, the latency, or the
    apparent slowness, is hidden because the system doesn't wait for one task to finish
    before starting another.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改进这一点，苹果减少了这个网络线程上的工作负载。**现在，复杂的任务似乎更快，因为系统在与数据库同时进行多个任务而不是形成队列。**这样，潜在的延迟或明显的缓慢被隐藏起来，因为系统在开始另一个任务之前不会等待一个任务完成。
- en: In FoundationDB, if one transaction is reading certain keys and another transaction
    modifies those same keys at the same time, it causes a 'transaction conflict'.
    **FoundationDB allows precise management of these conflicts by providing control
    over the sets of keys that can cause these conflicts when read or written to.**
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 FoundationDB 中，如果一个事务正在读取某些键，而另一个事务同时修改这些相同的键，这将导致“事务冲突”。**FoundationDB 允许通过提供控制来管理这些冲突，这些控制控制着在读取或写入时可能导致这些冲突的键集合。**
- en: A common method to avoid unnecessary conflicts is to perform a special kind
    of read that doesn't cause conflicts, known as a 'snapshot' read, on a range of
    keys. If this read finds important keys, the transaction will only flag those
    specific keys for potential conflict, rather than the entire range. This ensures
    the transaction is only affected by changes that actually matter to its outcome.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 避免不必要的冲突的一种常见方法是对一系列键进行一种不会引起冲突的特殊读取，称为“快照”读取。如果这次读取发现了重要的键，事务将只标记这些特定的键可能存在的冲突，而不是整个范围。这确保了事务只受到实际影响其结果的变化的影响。
- en: The Record Layer uses this strategy to efficiently manage a structure known
    as a skip list, which is part of its ranking index system. However, manually setting
    these conflict ranges can be tricky and can lead to bugs that are difficult to
    identify, especially when they're mixed in with the main logic of the application.
    Therefore, **it's recommended that systems built on top of FoundationDB create
    higher-level tools, like custom indexes, to handle these patterns**. This approach
    helps to avoid leaving the responsibility to relax conflict rules up to each client
    application, which could lead to mistakes and inconsistencies.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Record Layer使用这种策略来高效管理称为跳表的结构，该结构是其排名索引系统的一部分。然而，手动设置这些冲突范围可能会很棘手，并且可能会导致难以识别的错误，特别是当它们与应用程序的主逻辑混在一起时。因此，**建议基于FoundationDB构建的系统创建更高级的工具，例如自定义索引，来处理这些模式**。这种方法有助于避免将松散的冲突规则责任留给每个客户端应用程序，这可能会导致错误和不一致性。
- en: '* * *'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Thanks for reading! If you’re interested in reading the full FoundationDB Record
    Layer paper, it’s here: [FoundationDB Record Layer: A Multi-Tenant Structured
    Datastore](https://www.foundationdb.org/files/record-layer-paper.pdf).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！如果您对阅读完整的FoundationDB Record Layer论文感兴趣，可以在这里查看：[FoundationDB Record Layer：多租户结构化数据存储](https://www.foundationdb.org/files/record-layer-paper.pdf)。
