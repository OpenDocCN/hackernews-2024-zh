- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:36:38'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: How to stop Linux threads cleanly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://mazzo.li/posts/stopping-linux-threads.html](https://mazzo.li/posts/stopping-linux-threads.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*2024-01-07* How to stop Linux threads cleanly'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let‚Äôs say you‚Äôre writing a long running multi-threaded application, on Linux.
    Maybe it‚Äôs a database or a server of some sort. Let‚Äôs also imagine that you‚Äôre
    not running on some managed runtime (maybe the JVM, Go, or BEAM), but rather managing
    threads spawned using the [`clone`](https://man7.org/linux/man-pages/man2/clone.2.html)
    syscall. Think of threads created in C with [`pthread_create`](https://man7.org/linux/man-pages/man3/pthread_create.3.html),
    or using C++‚Äôs [`std::thread`](https://en.cppreference.com/w/cpp/thread/thread/thread).
  prefs: []
  type: TYPE_NORMAL
- en: Once you get into the business of starting threads, you‚Äôre probably also in
    the business of stopping them. However the former is much easier than the latter.
    With ‚Äústopping‚Äù I mean stopping the thread while giving it a chance to run some
    cleanup operations before fully terminating. Or in other words, we want to terminate
    a thread while ensuring that memory is freed, locks are released, logs are flushed,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: This task is sadly not as straightforward as it should be, and there definitely
    isn‚Äôt a one-size-fits-all solution. This blog post aims to give an overview of
    the problem space and to highlight some pitfalls in an area with no shortage,
    and present [a little magic trick at the end.](#rseq)
  prefs: []
  type: TYPE_NORMAL
- en: (Quasi-)busy looping [#](#quasi-busy-looping)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you can afford it, you can structure each thread as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`stop` here is a per-thread boolean. When we want to stop a thread, we set
    `stop` to `true`, and then call [`pthread_join`](https://man7.org/linux/man-pages/man3/pthread_join.3.html)
    or equivalents to ensure that the thread has actually terminated.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here‚Äôs a contrived but working example in C++:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Which prints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you can write or refactor your code to work in such time slices, then terminating
    threads is very easy.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the loop body does not need to be fully non blocking ‚Äì it just needs
    to be terminated as quickly as we want our termination to be quick. For instance,
    if our thread is reading from a socket, we could set `SO_TIMEOUT` to be 100 milliseconds
    so that we know that every iteration of the loop will terminate quickly.
  prefs: []
  type: TYPE_NORMAL
- en: What if I want to block forever? [#](#what-if-i-want-to-block-forever)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quasi-busy loops are all well and good, but they‚Äôre sometimes not desirable.
    The most common roadblock is foreign code that we don‚Äôt control which does not
    fit this pattern ‚Äì think of a third-party library doing some blocking network
    call.
  prefs: []
  type: TYPE_NORMAL
- en: As we‚Äôll see later, there‚Äôs essentially no clean way to stop a thread running
    code we don‚Äôt control, but there are other reasons to not want to write all our
    code with the quasi-busy loop pattern.
  prefs: []
  type: TYPE_NORMAL
- en: If we have many threads even relatively slow timeouts might cause significant
    scheduling overhead due to spurious wakeups, especially on an already busy system.
    The timeouts will also make debugging and inspecting the system considerably more
    annoying (e.g.¬†imagine what the output of `strace` would look like).
  prefs: []
  type: TYPE_NORMAL
- en: So it is worth thinking about how to stop a thread while it is blocked on a
    syscall. The most straightforward way to do that is through signals.
  prefs: []
  type: TYPE_NORMAL
- en: We need to talk about signals [#](#we-need-to-talk-about-signals)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Signals are the main way to interrupt execution of a thread without explicit
    coordination of the interrupted thread, and are therefore very relevant to the
    topic of this blog post. They‚Äôre also a bit of a mess. These two facts generate
    unhappiness.
  prefs: []
  type: TYPE_NORMAL
- en: For a good overview on signals I recommend the surprisingly informative [man
    page](https://man7.org/linux/man-pages/man7/signal.7.html), but I‚Äôll give a sufficient
    overview here. If you already know how signals work, you can skip to [the next
    section](#thread-cancellation).
  prefs: []
  type: TYPE_NORMAL
- en: Signals can arise because of some hardware exception or be initiated by software.
    The most familiar instance of a software-initiated signal is your shell sending
    SIGINT to the foreground process when you press `ctrl-c`. All signals initiated
    by software originate from a handful of syscalls ‚Äì for instance [`pthread_kill`](https://man7.org/linux/man-pages/man3/pthread_kill.3.html)
    will send a signal to a thread.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hardware initiated signals are generally handled immediately, while software
    initiated signals are handled when a CPU is about to re-enter user mode after
    the kernel has done some work. In any event, when a signal needs to handled in
    a given thread:'
  prefs: []
  type: TYPE_NORMAL
- en: If the signal has been blocked by the receiving thread, it‚Äôll wait to be handled
    until it is unblocked;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the signal is not blocked, it might be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ignored;
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: handled in the ‚Äúdefault‚Äù manner;
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: handled using some custom signal handler.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which signals are blocked is controlled by modifying the *signal mask* using
    [`sigprocmask`](https://man7.org/linux/man-pages/man2/sigprocmask.2.html)/[`pthread_sigmask`](https://man7.org/linux/man-pages/man3/pthread_sigmask.3.html),
    and which action is taken if the thread is not blocked is controlled by [`sigaction`](https://man7.org/linux/man-pages/man2/sigaction.2.html).
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that the signal is *not* blocked, paths 2.a and 2.b will be managed
    entirely by the kernel, while path 2.c will cause the kernel to pass control to
    a user-space signal handler which will do something with the signal.
  prefs: []
  type: TYPE_NORMAL
- en: Importantly, if some thread is in a syscall (for instance blocked while reading
    from a socket), and a signal needs to be handled, the syscall will return early
    with error code `EINTR` after the signal handler has run.
  prefs: []
  type: TYPE_NORMAL
- en: The signal handler code is subject [to various constraints](https://man7.org/linux/man-pages/man7/signal-safety.7.html),
    but otherwise it can do as it pleases, including deciding to not give back control
    to the code that was executing before. By default, most signals just cause the
    program to stop abruptly, possibly with a core dump. In the next few sections
    we‚Äôre going to explore various ways to use signals to stop our threads.
  prefs: []
  type: TYPE_NORMAL
- en: Thread cancellation, a false hope [#](#thread-cancellation)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let‚Äôs first examine a way to stop threads, implemented through signals, which
    would seem to do exactly what we want: thread cancellation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The API for thread cancellation is very promising. [`pthread_cancel(tid)`](https://man7.org/linux/man-pages/man3/pthread_cancel.3.html)
    will ‚Äúcancel‚Äù thread `tid`. The way `pthread_cancel` works boils down to:'
  prefs: []
  type: TYPE_NORMAL
- en: A special signal is sent to thread `tid`;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The libc you‚Äôre using (say [glibc](https://en.wikipedia.org/wiki/Glibc) or [musl](https://en.wikipedia.org/wiki/Musl))
    sets up a handler so that when the cancel signal is received the thread winds
    down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are additional details, but that‚Äôs essentially all there is to it. However,
    trouble lies ahead.
  prefs: []
  type: TYPE_NORMAL
- en: Resource management + thread cancellation = üò¢ [#](#resource-management-thread-cancellation)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recall that signals can essentially arise anywhere in your code. So if we have
    code such as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: we might get a signal in the critical section. In the case of thread cancellation,
    our thread might get cancelled while we‚Äôre holding a lock as above, or with some
    memory to be freed, or in general with some outstanding resource, and our cleanup
    code will never run. This is not good.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some mitigating circumstances, although none sufficient:'
  prefs: []
  type: TYPE_NORMAL
- en: Thread cancellation can be temporarily disabled. So we could disable it any
    time we are in such a critical section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However some ‚Äúcritical sections‚Äù are very long (consider the lifespan of some
    allocated memory), and moreover we‚Äôd have to make sure to decorate all relevant
    code by enabling/disabling cancellation at the right time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Linux threads include facilities to add/remove global cleanup handlers with
    [`pthread_cleanup_push`](https://man7.org/linux/man-pages/man3/pthread_cleanup_push.3.html)
    and `pthread_cleanup_pop`. These cleanup handlers *are* run when a thread is cancelled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However to ensure safety using these functions one would have to again decorate
    every critical section with not only with a push/pop, but also temporarily disabling
    cancellations to avoid races as we setup the cleanup.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Again, this would be very error prone and would slow down our code considerably.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By default the signal sent by thread cancellation is only received at ‚Äúcancellation
    points‚Äù, which to a first approximation are the syscalls that might block ‚Äì see
    [`pthreads(7)`](https://man7.org/linux/man-pages/man7/pthreads.7.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So really we would only run into trouble if we have such a syscall in the critical
    sections. But again, we‚Äôd have to manually ensure that either critical section
    have no cancellation points, or that they‚Äôre made safe otherwise (possibly with
    the two measures described above).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Thread cancellation is incompatible with modern C++ [#](#thread-cancellation-is-incompatible-with-modern-c)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you‚Äôre a C++/Rust programmer, you might have sneered at the explicit locking
    above ‚Äì you‚Äôve got RAII to handle such cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You might have also been wondering what happens if a thread cancellation arrives
    in the RAII-managed critical section here.
  prefs: []
  type: TYPE_NORMAL
- en: The answer is that thread cancellation will trigger a stack unwinding very much
    like throwing an exception would (in fact it‚Äôs implemented with a special exception),
    which means that destructors *will* be run on cancellation. This mechanism is
    known as *forced unwinding*. Great, right?
  prefs: []
  type: TYPE_NORMAL
- en: Well, since thread cancellation is implemented using exceptions, and thread
    cancellation can happen in arbitrary places, [we‚Äôre always liable to a cancellation
    happening in a `noexcept` block](https://gcc.gnu.org/legacy-ml/gcc/2017-08/msg00121.html),
    which will cause your program to crash via [`std::terminate`](https://en.cppreference.com/w/cpp/error/terminate).
  prefs: []
  type: TYPE_NORMAL
- en: So since C++11, and especially since C++14 where destructors are marked as `noexcept`
    by default, thread cancellation is essentially useless in C++.
  prefs: []
  type: TYPE_NORMAL
- en: Forced unwinding is unsafe anyway [#](#forced-unwinding-is-unsafe-anyway)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'However note that even if this mechanism worked in C++, it‚Äôd still not be safe
    in many situations. Consider situations like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If we get forcefully unwound after `balance_1 += x`, our invariants go out of
    the window. This is why Java‚Äôs form of forced unwinding, [`Thread.stop`](https://docs.oracle.com/javase/8/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html),
    was deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: You can‚Äôt cleanly stop threads running code you don‚Äôt control [#](#you-cant-cleanly-stop-threads-running-code-you-dont-control)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a brief aside, the nature of signals (and by extension thread cancellation)
    implies that it‚Äôs impossible to cleanly stop code that you don‚Äôt control. You
    cannot guarantee that memory isn‚Äôt leaked, files are closed, global locks are
    released, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to interrupt foreign code reliably, it‚Äôs better to isolate it in
    its own process. It might still leak temporary files and other such persistent
    resources, but most relevant state would be cleaned up by the operating system
    when the process dies.
  prefs: []
  type: TYPE_NORMAL
- en: Controlled thread cancellation [#](#controlled-thread-cancellation)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hopefully you‚Äôre now convinced that unrestricted thread cancellation is not
    a great idea in most circumstances. However we can pick the circumstances explicitly
    by enabling thread cancellation only at specific times. So our event loop becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We turn off thread cancellation by default, but turn it back on as we do our
    blocking syscall.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring our code to fit this pattern might seem onerous. However many applications
    with long lived threads already contain loops with a blocking syscall at the beginning
    (reading from a socket, sleeping on a timer, and so on), followed by some work
    that will not block indefinitely.
  prefs: []
  type: TYPE_NORMAL
- en: Homegrown thread cancellation [#](#homegrown-thread-cancellation)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: However once we‚Äôve done this, it might be worth getting rid of thread cancellation
    entirely. Relying on the stack unwinding to free resources would not be portable
    to alternative libcs, and we‚Äôd need to be [fairly careful](https://udrepper.livejournal.com/21541.html)
    if we wanted to perform some explicit cleanup actions outside destructors.
  prefs: []
  type: TYPE_NORMAL
- en: So instead we can work with signals directly. We can pick SIGUSR1 as our ‚Äústopping‚Äù
    signal, install a handler which sets our stopping variable, and check the variable
    before doing blocking syscalls.
  prefs: []
  type: TYPE_NORMAL
- en: '[Here‚Äôs a worked out example in C++.](https://gist.github.com/bitonic/d3281b2d0fd95b4fd788aa7e013d1fb9/7f5a705198f5f9c3c250d24ec085bb75796a4752)
    The interesting parts of the code are setting up the signal handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And the code checking the flag before running the syscall:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'However, the code checking the flag and starting the syscall is racy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: There‚Äôs no easy way to check the flag and run the syscall atomically.
  prefs: []
  type: TYPE_NORMAL
- en: '[Another approach to this problem](https://gist.github.com/bitonic/d3281b2d0fd95b4fd788aa7e013d1fb9/139cc58cbdbba88ef311f7ea1b47a06050f03016)
    would be to have USR1 blocked normally, and unblock it only when the syscall runs,
    similarly to what we did with the temporary thread cancellation. If the syscall
    terminates with `EINTR`, we know that we should quit.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sadly the race is still there, just between the unblocking and running the
    syscall:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Changing the sigmask atomically [#](#changing-the-sigmask-atomically)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'However, there often *is* an easy to atomically change the sigmask and run
    a syscall:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`select`](https://man7.org/linux/man-pages/man2/select.2.html)/[`poll`](https://man7.org/linux/man-pages/man2/poll.2.html)/[`epoll_wait`](https://man7.org/linux/man-pages/man2/epoll_wait.2.html)
    have `pselect`/`ppoll`/`epoll_pwait` variants which take a `sigmask` argument;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read`/`write` and similar syscalls can be replaced by their non-blocking versions
    and a blocking `ppoll`;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To sleep one can use [`timerfd`](https://man7.org/linux/man-pages/man2/timerfd_create.2.html)
    or just `ppoll` with no file descriptors but with a timeout;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The newly added [`io_uring_enter`](https://man7.org/linux/man-pages/man2/io_uring_enter.2.html)
    supports this use case out of the box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The syscalls above already cover a very large footprint.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this style, the [receive loop of the program becomes](https://gist.github.com/bitonic/d3281b2d0fd95b4fd788aa7e013d1fb9/9bd6b18f6329a0b07cba5cb38d3c45bbf27ae968):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Making it work with any syscall [#](#rseq)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sadly, not all syscalls have variants which let us atomically change the sigmask
    as they execute. [`futex`](https://man7.org/linux/man-pages/man2/futex.2.html),
    the main syscall used to implement userspace concurrency primitives, is a notable
    example of a syscall which does *not* include such a facility.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of `futex` one can interrupt threads through `FUTEX_WAKE`, but it
    turns out we can setup a mechanism to safely check the boolean stop flag atomically
    with starting *any* syscall.
  prefs: []
  type: TYPE_NORMAL
- en: 'To recap, the problematic code [looks like this](https://gist.github.com/bitonic/d3281b2d0fd95b4fd788aa7e013d1fb9/7f5a705198f5f9c3c250d24ec085bb75796a4752):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If we could know that no signal handler is ran between the flag check and the
    syscall, then we‚Äôd be safe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Linux 4.18 introduced a syscall, [`rseq`](../assets/other/rseq.html) (‚Äúrestartable
    sequences‚Äù), which lets us achieve this, although with some effort. The `rseq`
    machinery works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You write some code which you want to run atomically with regards to preemption
    or signals ‚Äì the critical section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before the critical section is entered, we inform the kernel that the critical
    section is about to run by writing to a bit of memory shared between the kernel
    and userspace.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This bit of memory contains:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start_ip`, the instruction pointer which marks the begin of the critical section;'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`post_commit_offset`, the length of the critical section;'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`abort_ip`, the instruction pointer to jump to if the kernel needs to preempt
    the critical section.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If the kernel has preempted a thread, or if a signal needs to be delivered to
    the thread, it checks if the thread is in a `rseq` critical section, and if it
    does sets the program counter for the thread to `abort_ip`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The process above forces the critical section to be a single contiguous block
    (from `start_ip` to `start_ip+post_commit_offset`) which we must know the address
    of. These requirements force us to write it in inline assembly.
  prefs: []
  type: TYPE_NORMAL
- en: Note that rather than disabling preemption entirely, `rseq` lets us specify
    some code (the code starting at `abort_ip`) to perform some cleanup if the critical
    section is interrupted. The correct functioning of the critical section therefore
    often depends on a ‚Äúcommit instruction‚Äù at the very end of the critical section
    which makes the changes in the critical section visible.
  prefs: []
  type: TYPE_NORMAL
- en: In our case the ‚Äúcommit instruction‚Äù is `syscall` ‚Äì the instruction which will
    invoke the syscall that we‚Äôre interested in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Which leads us to the following x86-64 widget for a 6-argument syscall stub
    which atomically checks a stop flag and executes a `syscall`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We‚Äôre using glibc‚Äôs [recently added support for `rseq`](https://lwn.net/Articles/883104/),
    which provides a `__rseq_offset` variable containing the offset where the critical
    section information lives, relative to the thread pointer. All we need to do in
    the critical section is check the flag, skip the syscall if it‚Äôs set, and perform
    the syscall if it is. If the flag is set we pretend the syscall has failed with
    `EINTR`.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the full code for the previous example using this trick to call
    `recvfrom` [here](https://gist.github.com/bitonic/d3281b2d0fd95b4fd788aa7e013d1fb9).
    I‚Äôm not necessarily advocating the use of this technique, but it‚Äôs definitely
    an interesting curiosity.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up [#](#wrapping-up)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It‚Äôs quite frustrating that there‚Äôs no agreed upon way to interrupt and stack
    unwind a Linux thread and to protect critical sections from such unwinding. There
    are no technical obstacles to such facilities existing, but clean teardown is
    often a neglected part of software.
  prefs: []
  type: TYPE_NORMAL
- en: Haskell is one language where these capabilities do exist in the form of [asynchronous
    exceptions](https://hackage.haskell.org/package/base-4.19.0.0/docs/Control-Exception.html#v:throwTo),
    although one still needs to be careful to protect critical sections appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgements [#](#acknowledgements)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Peter Cawley](https://twitter.com/corsix) provided input on many details treated
    in this blog post and read its draft. He also suggested `rseq` as a possible solution.
    Many thanks also go to [Niklas Hamb√ºchen](https://nh2.me/), [Alexandru S√ßvortov](https://scvalex.net/),
    [Alex Sayers](https://www.asayers.com/), and Alex Appetiti for reading drafts
    of this blog post.'
  prefs: []
  type: TYPE_NORMAL
