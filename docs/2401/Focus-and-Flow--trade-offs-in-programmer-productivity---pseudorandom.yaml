- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:33:47'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:33:47'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Focus and Flow: trade-offs in programmer productivity | pseudorandom'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 专注与心流：程序员生产力中的权衡 | 伪随机
- en: 来源：[https://www.aaronbuxbaum.com/focus-and-flow/](https://www.aaronbuxbaum.com/focus-and-flow/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.aaronbuxbaum.com/focus-and-flow/](https://www.aaronbuxbaum.com/focus-and-flow/)
- en: Programmers are fiends for productivity methodologies — ways to estimate tasks
    more accurately, get more done in less time, and get work done at a higher quality.
    I, too, have fallen far into this hole. Between all of the books I’ve read, I’ve
    come up with some interesting findings that may be useful to other software developers.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员对提高生产力的方法论很感兴趣——比如更准确地估算任务时间、在更短的时间内完成更多工作，以及以更高的质量完成工作。我也深陷其中。在我阅读的所有书籍中，我找到了一些有趣的发现，可能对其他软件开发人员有用。
- en: “Being completely involved in an activity for its own sake. The ego falls away.
    Time flies. Every action, movement, and thought follows inevitably from the previous
    one, like playing jazz. Your whole being is involved, and you’re using your skills
    to the utmost.” *Mihaly Csikszentmihalyi on flow state*
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “全神贯注地投入一项活动。自我消失了。时间飞逝。每一个动作、移动和思想都是前一个的必然结果，就像演奏爵士乐一样。你的整个存在都参与其中，你尽情运用你的技能。”
    *米哈伊·奇克塞尼米哈伊（Mihaly Csikszentmihalyi）关于心流状态*
- en: At first glance, it’s easy to argue that achieving a flow state is a good thing.
    It’s enjoyable, and one can get a lot of work done without feeling burned out
    at the end of it. By definition, a flow state is non-collaborative; you’re not
    going to be in that mindset when you have responsibilities to look at Slack channels,
    and you’re certainly not going to be in that mindset while you’re in a pair programming
    session. In addition, engineers sometimes “flow” for a full day or more of wasted
    time. If the concept was poorly thought out or designed from the beginning, flow
    state hurts productivity.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，很容易认为达到心流状态是件好事。它令人愉快，一个人可以在不感到精疲力竭的情况下完成大量工作。根据定义，心流状态是非协作的；当你有责任查看 Slack
    频道时，你不会处于那种心态下，当你进行配对编程会话时，你肯定不会处于那种心态下。此外，工程师有时会“心流”地浪费一整天甚至更长时间。如果这个概念从一开始就设计不周，心流状态会影响生产力。
- en: A common technique that many productivity gurus live by is the Pomodoro timer
    — set a timer for 25 minutes, for which you have a singular goal in mind; when
    the timer goes off, you take a 5-minute break and repeat. Every four iterations,
    take an extended break. The Pomodoro timer is an intentional flow-breaker under
    the idea that focused chunks of work provide better results than a lengthy flow-state
    session. Those who fully buy into the Pomodoro concept even argue that one should
    stop what they’re doing effectively immediately; a minute or two is allowed to
    finish up your thought and write notes if necessary, but no more than that. Again,
    this is an argument explicitly against flow state; regardless of if the juices
    are flowing, one should take a break.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 许多生产力大师常用的一种常见技巧是番茄工作法定时器——设置一个 25 分钟的定时器，你要完成一个明确的目标；当定时器响起时，你休息 5 分钟然后重复。每四次迭代，休息一次。番茄工作法定时器是一种有意的心流中断器，其理念是专注的工作块比长时间的心流状态更容易产生更好的结果。那些完全接受番茄工作法概念的人甚至主张应立即停止正在做的事情；允许花一两分钟结束你的思绪并写笔记，如果必要的话，但不能超过这个时间。同样，这是明确反对心流状态的观点；无论思维是否流畅，都应该休息一下。
- en: I find the downside of the Pomodoro technique is that my motivation has “reset”
    along with my short break. Before I start the next Pomodoro, I find it easy for
    me to get distracted — to get caught up in reading e-mail, or any other problem
    that I was temporarily able to put off while in the middle of the session. On
    the positive side, once I have started the timer, that 25 minutes tends to be
    quite productive. When I use several Pomodoros over a day instead of trying to
    achieve flow, I tend to get more done overall.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现番茄工作法的缺点是，我的动力随着我短暂的休息而“重置”了。在我开始下一个番茄工作法之前，我发现很容易分心——陷入阅读电子邮件或者任何我在会话中暂时能够推迟的问题中。积极的一面是，一旦我开始计时器，那
    25 分钟往往非常有效。当我一天使用几个番茄工作法而不是试图达到心流时，总体上我往往会完成更多工作。
- en: There’s another reason I’m a proponent of the Pomodoro technique — shallow work
    takes up a vast majority of many knowledge-worker’s time, and on analysis, this
    adds very little value to either the company or to the worker’s knowledge growth
    possibilities. Shallow vs. deep work is a concept tackled in Cal Newport’s “Deep
    Work.” Newport explains that the brain is designed to seek quick, guaranteed dopamine
    hits, and that behaviors that *feel* productive are a prime way for it to accomplish
    that desire. The biggest example out there is the amount of time spent reading
    and responding to e-mail, Slack messages, and other asynchronous communication
    methodologies. The act of checking e-mail actually produces a tiny dopamine hit,
    a way of the brain rewarding yourself for doing something that may produce social
    value. The fact that you don’t know what might be sitting in your e-mail inbox
    is precisely why it’s addictive and exactly why e-mails are read and sent too
    often. This is no different than the dopamine hit received when browsing social
    media! The Pomodoro technique helps here, because it’s designed to have a single
    goal when starting, but requires the worker still to be cognizant that some behaviors
    are not actually productive and should not be done while in the middle of the
    focused session.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[Pomodoro 技术](https://zh.wikipedia.org/wiki/%E7%95%AA%E8%95%89%E6%8A%80%E6%B3%95)
    是我支持的另一个原因——表层工作占据了许多知识工作者的绝大部分时间，经过分析，这对公司或工作者的知识增长可能性都没有什么价值。表层工作与深度工作之间的对比是卡尔·纽波特的《深度工作》中探讨的一个概念。纽波特解释说，大脑设计成寻求快速、确保的多巴胺刺激，而*感觉*有效率的行为是实现这种愿望的主要方式。最大的例子就是花在阅读和回复电子邮件、Slack
    消息和其他异步通信方法上的时间。查看电子邮件实际上产生了微小的多巴胺刺激，这是大脑奖励你做某事可能产生社会价值的方式。你不知道邮箱里可能有什么正是它具有成瘾性的原因，也正是为什么邮件读取和发送得太频繁。这与浏览社交媒体时产生的多巴胺刺激没有什么不同！Pomodoro
    技术在这里有所帮助，因为它在开始时有一个明确的目标，但仍然要求工作者意识到某些行为实际上并不具有生产力，并且在专注的会话中不应该这样做。'
- en: 'After a few years of working on it, there are a few productivity tips I’d strongly
    suggest for programmers:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在经过几年的努力后，有一些我强烈建议程序员采用的生产力技巧：
- en: Turn off your notifications! This is the biggest one. No buzzes, no texts, no
    dings. Do it on your phone and on your computer. You can keep things that you
    actually want to know, but be very careful. For example, you want to know when
    PagerDuty goes off, but you don’t want to see a text.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭通知！这是最重要的一个。没有嗡嗡声、没有短信、没有叮当声。在手机和电脑上都要这样做。你可以保留你真正想知道的东西，但要非常小心。例如，你想在 PagerDuty
    发出警报时知道，但你不想看到一条短信。
- en: Turn off badges. You can do this from the notifications section in MacOS and
    iOS — I turn off the little red counters on all of my apps except my to-do list.
    In particular, I want to be sure I don’t see a red dot or number on my e-mail
    client, text message client, Slack app, etc. I can always check them later, or
    turn the badges back on after my session.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭徽章提醒。你可以在 MacOS 和 iOS 的通知部分做到这一点——我关闭了所有应用程序的小红点计数器，除了我的待办清单。特别是，我希望确保我看不到我的电子邮件客户端、短信客户端、Slack
    应用程序等上的红点或数字。我随时可以稍后检查它们，或者在会话后重新打开徽章提醒。
- en: Carefully cultivate what remains of attention-grabbers. For example, even when
    notifications are turned off, Slack still makes a noise when mentioned. Sometimes,
    this is actually really important… but it’s usually not. Use your best judgement,
    and tend towards turning off the notification.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仔细培养仍然吸引注意力的事物。例如，即使通知已关闭，Slack 在提及时仍会发出声音。有时这实际上非常重要…但通常并非如此。请慎重考虑，并趋向于关闭通知。
- en: Batch your time on Slack and e-mails. Close the windows and open the apps only
    at certain intervals. Some argue that you should check only once or twice a day;
    for my work environment, it’s much more common (more like every 30-60 minutes).
    If you find yourself keeping an e-mail window open or clicking the e-mail app
    regularly, re-evaluate your relationship with e-mail as a dopamine-releasing concept.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 批量处理你在 Slack 和电子邮件上的时间。关闭窗口，只在特定时间间隔打开应用程序。有人认为你应该每天只查看一两次；对于我的工作环境来说，更常见的是（更像是每30-60分钟）。如果你发现自己一直保持着一个电子邮件窗口或者经常点击电子邮件应用程序，重新评估你对电子邮件作为多巴胺释放概念的关系。
- en: Be very careful about asynchronous communication. Whenever possible, do not
    shoot off a small e-mail to someone else to kick responsibility for a task over.
    For example, e-mail scheduling often requires several back-and-forths, which is
    wasting all recipients’ time and attention. Similarly, sending a simple Slack
    message and hoping someone gets back to it kicks responsibility away from you,
    but draws others’ attention. This paradox is problematic — if you want to get
    an answer to something you can’t yourself, but don’t want to pull someone’s direct
    attention away, what do you do? There are some pretty good solutions out there,
    such as Twist. If you can communicate over a dedicated work means, for example
    over an Asana or Kanban board, that’s a much better place for communication since
    it doesn’t pull other attentions away. If your organization has good focus hygiene
    practices, Slack is relatively safe.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于异步通信要非常小心。在可能的情况下，不要随意给别人发送一封小邮件来分担任务责任。例如，邮件调度通常需要几次来回，这样做浪费了所有收件人的时间和注意力。同样地，发送一条简单的
    Slack 消息，希望有人回复，把责任推给了别人，但也吸引了其他人的注意力。这种悖论很棘手——如果你想得到一个你自己无法得到的答案，但又不想直接让别人分心，你该怎么办？有一些非常好的解决方案，比如
    Twist。如果你可以通过专门的工作方式进行沟通，例如通过 Asana 或看板，那么那里是进行沟通的更好地方，因为它不会分散其他人的注意力。如果你的组织有良好的专注卫生习惯，Slack
    是相对安全的。
- en: Communicate with others about your new communication preferences. Many apps
    have “busy” indicators on them, including Slack. Use those to tell your teammates
    that you’re busy and won’t see a message. Some people use tools like auto-responders,
    others use physical objects like a red light. Either way, tell your team what
    to expect when they see these indicators so that everyone is on the same page.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与他人沟通你的新沟通偏好。许多应用程序上都有“忙碌”指示器，包括 Slack。使用这些指示器告诉你的队友你正忙，看不到消息。有些人使用类似自动回复器的工具，其他人使用物理物品，比如一个红灯。无论哪种方式，告诉你的团队当他们看到这些指示器时会发生什么，这样每个人都在同一页面上。
- en: Use the Pomodoro system. I like an app called “Session,” but you can use anything
    as long as it won’t draw your attention until the end of your session. When you
    start the session, write down or conceptualize what exactly you will be working
    on and what you hope to accomplish at the end of your 25 minutes. If you deviate
    from doing that task, bring yourself back to the task at hand until the timer
    goes off; only then can you do something else. For example, if you have a task
    to complete some work ticket, checking e-mail is not part of that task! So, you
    are not allowed to check your e-mail. If you feel you must, you can end your session
    early, but there are no breaks from the task mid-session. Experiment with hard
    breaks and soft breaks (ie. allowed to continue the task as long as focus stays)
    and see what works best for you and your work environment.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用番茄工作法。我喜欢一个叫做“Session”的应用，但只要不会在会话结束前分散你的注意力，你可以使用任何应用。开始会话时，写下或构思你将要做的事情，以及希望在
    25 分钟结束时取得的成果。如果你偏离了这个任务，就把注意力带回到手头的任务上，直到计时器响起；只有在那时你才能做其他事情。例如，如果你的任务是完成一些工作票，查看电子邮件不属于这个任务！所以，你不被允许查看电子邮件。如果你觉得必须查看，你可以提前结束会话，但是不允许在会话中途休息。尝试一下硬休息和软休息（即只要注意力集中，就可以继续任务），看看哪种方法对你和你的工作环境最有效。
- en: Do pair programming sessions. Pairing is great because both people’s attentions
    are held. It’s bad form to check your e-mail while pairing together, and the social
    pressure will help keep focus on both sides. Switch the driver when attention
    starts to wane. I’ve found that actually doing Pomodoros in a pairing session
    works remarkably well — at the beginning of the session, decide between yourselves
    what will get done. At the end of the 25 minutes, each person takes their own
    5-minute break, then reconvene and switch the driver. The end result is that you
    get some time to consolidate the information, and information is shared more effectively
    between the two developers.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行配对编程会议。配对很棒，因为两个人的注意力都被吸引住了。在一起配对时检查电子邮件是不礼貌的，而社会压力将有助于保持双方的注意力。当注意力开始减弱时，换个驱动器。我发现在配对会议中实际进行番茄工作法效果非常好——在会话开始时，彼此决定完成什么任务。在
    25 分钟结束时，每个人都休息 5 分钟，然后重新开始并换个驱动器。最终结果是你有一些时间来巩固信息，并且信息在两个开发者之间更有效地共享。
- en: Please contact me for any thoughts, comments, or feedback.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如有任何想法、评论或反馈，请与我联系。
