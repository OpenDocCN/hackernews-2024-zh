- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:20:28'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Adding type safety to object IDs in TypeScript - Kravchyk's
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.kravchyk.com/adding-type-safety-to-object-ids-typescript/](https://www.kravchyk.com/adding-type-safety-to-object-ids-typescript/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I was creating a type for an options object of a function, one of the options
    properties would accept an ID of the item (string based UUID) or a special value,
    i.e. `'currentNode'`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'Initially I would come up with something like this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Try It](https://www.typescriptlang.org/play?#code/JYOwLgpgTgZghgYwgAgJIgM7TAeQA5jAD2myA3gFDLID0Nam2yoYRyYAFisJALbIAjAJ7MAJsiJR2XZIkIA3bnyrs4UAOYQwALmQYwUUOuQAfZAHIEAVyhQI4AHJFREcxQC+FCjCsgEhEmZGKDAACiICYkxddCwQ-ADMAEpdeSJgcUpqOg8vUDiwslUNLV1zOWBFJxdzZHckgG5aegAFOAwMI1lkBAAbCDVekV8WexdxCMTkeTheqxQAd2Be3uQQIjBkOwwrXs3QWRBkaChJIA)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'There are 2 problems with this approach:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: No autotype hints for currentNode
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No type checking for the special option since `curentNode` is a also just a
    `string`.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type NodeId = string` would hardly help since it’s just an alias for string
    and is the same from type checking perspective.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'One way to solve this would be to wrap the special option in an object:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[Try It](https://www.typescriptlang.org/play?#code/JYOwLgpgTgZghgYwgAgJIgM7TAeQA5jAD2myA3gFDLJhxQDmEYAXMhmFKPcgD7k11GLZAHJEhAG4QAckQAmEEQF8KKijACuIBIRLJQWKGAAURAsUyt0h3OZIYAlKwlFgc8lWQB6L6ooUDbGMyAQYmVhEAaQBFAFEAJQBmAA0ANQAhOQARRI0RZCUHAG5vL2RUuAAbNwDMIJDaMOEGwXDRcWApWQV8pQLi0vKqmsCjYNChVhamiIQNKCgIcG7FAv6Sn2RYhaIoIA)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: This is going to work, both type checking and autoexpand suggestion will work,
    but it does not look nice at all…
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately TypeScript has [template literal types](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html)
    since version 4.1\. It’s possible to use them to create a type that only an ID
    would have, like:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'So now we can do:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[Try It](https://www.typescriptlang.org/play?#code/C4TwDgpgBAcg9gEwgSQVAvFABgO0RAfQBIBvAZ2ACcBLHAcwF8sAoZ24CSgMwEMBjaMhxlOwAPJhg1OMKglmUKMB6U6EYAC5Y+VFAA+UAOT8pANwjwkh5g1ZcArjj5SZUWiMrAAFHEnThWkIe4n4yZACUWqZw1GjyigD0CTas7qJeJEoqappGJtTmlhCGUAzhANxQSVAAajwANrFswumZyqrqWoZ4SAQA0gCKAKIASgDMABo1AEIIACJj9iVlldV1jQjNwRlZHbmGfPaUlBA4wEXLFVUJUEPHcJRAA)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Now the target type is not string anymore and TS can see the difference between
    the ID and the special options, meaning that the special options are type checked
    and will show in autotype suggestions.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: This does not only solve the 2 problems mentioned, but also introduces type
    safety of IDs in TypeScript. Each type of item can have a different type of ID
    assigned, I.e.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[Try It](https://www.typescriptlang.org/play?#code/C4TwDgpgBAqgzhATgSQCZQLxQAYFcGID6AJAN5zCICWAdgOYC+2A3AFCiRQDiiA9rmDSYcdPgJLlKtRi1asAZrhoBjYFV40oA1AENgEeEgAUVVAC5YBNAEoLAN16mopVlCgB6d6wZzPUZAC2OnS00HC8ARAA7gAWSNC0UMBxUMq8qNAg-FAxOnbQOppOdjrUOgBGADbQyXpQVHBQOtxigqisGcqVpdBpNBT15i38bWys2noGBCao1swe7lAAooh8iBYAgoh0uJE0wFC88kng0ADk2KIjEhTU9Exn9Y00vAc6cHBUdDQV1Um8UDApR0kX0iEOxw45zwBBuUnu2DOQA)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: I have been using it for a year now and implementing type safe IDs has already
    prevented me a few times already from mixing entity types.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经使用了一年了，实现类型安全的ID已经几次防止我混淆实体类型。
- en: The benefit of this is not just at compile time, but also at runtime. You can
    use this to detect the type of object by checking its ID prefix and it’s also
    very convenient that whenever the object pops up in the logs, you immediately
    know what it is just by looking at the ID.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的好处不仅仅体现在编译时，而且在运行时也同样如此。你可以通过检查其ID前缀来检测对象的类型，而且非常方便的是，每当对象在日志中出现时，你只需看一眼ID就立刻知道它是什么。
