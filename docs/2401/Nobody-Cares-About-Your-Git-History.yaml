- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:12:48'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:12:48
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Nobody Cares About Your Git History
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有人关心你的 Git 历史
- en: 来源：[https://spin.atomicobject.com/git-history/](https://spin.atomicobject.com/git-history/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://spin.atomicobject.com/git-history/](https://spin.atomicobject.com/git-history/)
- en: The topic of Git history, rebasing, [squashing](https://spin.atomicobject.com/squash-merge/),
    and commit messaging often surfaces, igniting debates as fiery as those over Vim
    vs. Emacs, tabs vs. spaces, or pineapple on pizza. For some, Git history is the
    unsung hero of software teams; for others, it’s a persistent thorn in the side.
    Opinions vary widely, and those who have them often hold them with conviction
    (it’s me, hi, I’m the problem).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Git 历史、变基、[压缩](https://spin.atomicobject.com/squash-merge/)和提交消息的话题经常浮出水面，引发与
    Vim vs. Emacs、制表符 vs. 空格或是披萨上的菠萝一样激烈的辩论。对于一些人来说，Git 历史是软件团队的无名英雄；对于其他人来说，它是一个持久的刺。意见大不相同，拥有意见的人常常怀着坚定的信念持有它们（就是我，嗨，我就是问题）。
- en: This post isn’t about preaching or gatekeeping; it’s about sharing thoughts
    and sparking a dialogue. I don’t claim to have all the answers, nor do I consider
    myself the ultimate authority on this topic. If you think I’m off the mark, I
    welcome your corrections in the comments. After all, I might just be on the wrong
    side of history (pun intended).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章不是为了宣扬或限制，而是为了分享思考并引发对话。我不认为自己拥有所有答案，也不认为自己是这个话题的最终权威。如果你认为我说得不对，欢迎在评论中指正。毕竟，我可能只是站在历史的错误一边（意味深长）。
- en: Decoding “Clean Git History”
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解读“清理 Git 历史”
- en: 'The phrase “clean Git history” commonly conjures up images of a linear, immaculate
    sequence of commits—each one polished and purposeful. Achieving this often involves
    rebasing or squashing feature branches to create a simple-to-follow narrative.
    It may also include tagging, releases, and other Git features. But here’s a thought:
    is this meticulous curation necessary, or even beneficial?'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: “清理 Git 历史”一词通常让人联想到一系列线性、完美无瑕的提交——每个提交都经过精心打磨和目的明确的。实现这一点通常需要变基或压缩功能分支以创建简单易懂的叙述。它还可能包括标记、发布和其他
    Git 功能。但是，有个问题：这种细致的策划是必要的，甚至是有益的吗？
- en: Mastering your tools, [especially Git](https://spin.atomicobject.com/favorite-git-commands/),
    is something I firmly believe in. However, it’s important to acknowledge that
    we’re all at different stages in our development journey. For those just starting
    out, and already drinking from the firehose of professional software development,
    a complex Git process could be more daunting and dangerous than helpful.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握你的工具，[尤其是 Git](https://spin.atomicobject.com/favorite-git-commands/)，是我坚信的事情。然而，重要的是要承认我们在发展旅程中处于不同阶段。对于刚刚起步，并已经开始从专业软件开发的火水管中喝水的人来说，复杂的
    Git 流程可能比有帮助更令人望而却步和危险。
- en: 'Opinions on Git usage vary: some see code as the ultimate truth and pay less
    attention to Git history, while others craft and rewrite their commits like poetry.
    I tend to rely on Git as a tool for sharing code and tracking changes, and I do
    recognize the value in the history. This post is for everyone, no matter where
    you stand.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Git 使用的看法各不相同：有些人将代码视为终极真理，对 Git 历史关注较少，而其他人则像创作诗歌一样精心制作和重写自己的提交。我倾向于将 Git
    视为分享代码和跟踪变更的工具，并认识到历史的价值。这篇文章适合所有人，无论你站在哪一边。
- en: Why Rebase?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要变基？
- en: So, who should rebase, and why?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，谁应该变基，为什么？
- en: Large organizations and open-source projects
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大型组织和开源项目
- en: These groups often manage complex codebases with numerous contributors, where
    a neater history can assist in navigating changes and understanding the evolution
    of the code. Rebasing helps maintain a readable and coherent history, which is
    more important when many people are simultaneously working on different features
    or fixes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些团体通常管理着复杂的代码库，有许多贡献者，在这里，一个更整洁的历史可以帮助导航变更和理解代码的演变。变基有助于维护可读性和连贯性的历史，在许多人同时处理不同功能或修复时更为重要。
- en: '**Why:** A cleaner commit history in these environments aids in tracking changes
    and features over time. Individual commits are meaningful and self-contained,
    which makes them easier to review, test, and potentially revert without affecting
    unrelated changes. It also simplifies the task of pinpointing where bugs were
    introduced and facilitates the process of reverting to stable states. Fewer, but
    more thoughtfully crafted commits will reduce noise for the rest of the contributors.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为什么：** 在这些环境中，更清晰的提交历史有助于跟踪随时间变化的更改和功能。单个提交具有意义并且是自包含的，这使得它们更易于审查、测试，并且在不影响不相关更改的情况下可能撤销。它还简化了定位引入错误的位置并促进恢复到稳定状态的过程。较少但更深思熟虑的提交将减少其他贡献者的噪音。'
- en: '**Addendum**: This may especially be true for a project utilizing a **monorepo**
    strategy, where a number of different teams and contributors are committing to
    the same codebase. Maintaining a clean history can be useful to reduce the amount
    of noise that other teams see.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附录：** 对于使用**单体库**策略的项目来说，这可能尤其真实，其中许多不同的团队和贡献者正在提交到同一个代码库。保持干净的历史记录可以减少其他团队看到的噪音量。'
- en: Small, highly experienced teams
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小型，经验丰富的团队
- en: Teams that are well-versed in Git and showcase a number too big to fit on their
    “days since last rebase accident” sign might find rebasing a useful tool to keep
    their history concise. They’re less likely to encounter the pitfalls that can
    come with a complex rebase, and they have the necessary skills to resolve conflicts
    and understand the implications of rewriting history.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 熟练掌握 Git 的团队，其“自上次重新设置基线意外以来的天数”显示出一个不适合放在上面的数字的团队，可能会发现重新设置基线是保持其历史简洁的有用工具。他们不太可能遇到与复杂重新设置相关的陷阱，并且他们具备解决冲突和理解重写历史影响的必要技能。
- en: '**Why:** For these teams, rebasing can be part of a routine to ensure that
    the main branch remains clean and that features are integrated seamlessly. It’s
    also a way to condense work into logical chunks that make sense to others and
    to their future selves.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为什么：** 对于这些团队来说，重新设置基线可以成为例行工作的一部分，以确保主分支保持清洁，并且功能无缝集成。这也是一种将工作压缩成对他人和未来自己有意义的逻辑块的方法。'
- en: Individual contributors working on isolated features
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 独立工作的个人贡献者
- en: When working alone on a feature or in a branch that doesn’t have frequent interactions
    with others, rebasing can be a way to tidy up before merging back into main. It
    allows the contributor to present their work in a clear and structured manner,
    which can be helpful for some code reviewers.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在独自开发功能或与他人频繁交互的分支中工作时，重新设置基线可以在合并回主分支之前整理工作。它允许贡献者以清晰和结构化的方式展示他们的工作，这对某些代码审查者可能是有帮助的。
- en: '**Why:** The rebase here serves to streamline the individual’s contributions
    into a narrative that’s easier for others to follow. It can help to highlight
    the development process of the feature or fix, showing a clear progression from
    start to finish and making it easier for reviewers to understand the rationale
    behind each change.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为什么：** 这里的重新设置基线旨在将个人的贡献整合成一个对他人更易于理解的叙述。它可以帮助突出显示特性或修复的开发过程，显示清晰的从开始到结束的进展，并使审查者更容易理解每个更改背后的原因。'
- en: The Upside of a Clean Commit History
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清洁的提交历史的优势
- en: Let’s look at the pros and cons of each approach. First, the upside of a clean
    commit history.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看每种方法的利弊。首先是清洁的提交历史的优势。
- en: '**A streamlined log**'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**流畅的日志**'
- en: An orderly history can be easier to read and understand. Single, self-contained
    commits for feature branches can quickly show when things were introduced.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有序的历史记录更易于阅读和理解。特性分支的单个、自包含的提交可以快速显示引入更改的时间。
- en: '**Commit-centric PR reviews:** Some find value in this method, though it’s
    not universally applicable.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**以提交为中心的 PR 审查：** 有些人认为这种方法有价值，尽管它并非普遍适用。'
- en: '**My perspective**: Reviewing PRs commit-by-commit can lead to scrutinizing
    outdated code. While reviewing smaller changes might seem helpful, the lack of
    context of the full PR can diminish its utility. I don’t recommend this approach.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**我的观点：** 逐个提交审查 PR 可能会导致仔细检查过时的代码。虽然审查较小的更改似乎有所帮助，但是缺少完整 PR 上下文的情况可能会降低其效用。我不推荐这种方法。'
- en: '**Less WIP clutter**'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更少的 WIP 混乱**'
- en: Carefully rewritten commits mean fewer half-baked or broken changes, avoiding
    the frustration of build errors and test failures when checking out a teammate’s
    code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细重写的提交意味着更少的未成形或损坏的更改，避免了在检查队友的代码时出现构建错误和测试失败的沮丧。
- en: '**Easier to revert changes**'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更容易撤销更改**'
- en: 'While not the only way to manage this (see: feature flags), being able to quickly
    revert a commit is easier than going through the codebase and manually commenting
    things out. Rolling back a whole release can also be an option, but there are
    times when it’s not tenable.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这不是管理此类问题的唯一方式（参见：功能标志），但能够快速回滚提交要比浏览代码库并手动注释事项更容易。完全回滚整个发布版本也是一个选择，但有时可能行不通。
- en: The Downside of Over-Curation
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过度策展的坏处
- en: So, what’s the downside?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，有什么坏处吗？
- en: Loss of detail
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 详细信息的丢失
- en: The development process is inherently messy and non-linear. Squashing commits
    can remove the context around why certain decisions were made, which can be crucial
    for understanding the rationale behind the current state of the code when revisiting
    it in the future.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 开发过程本质上是混乱且非线性的。压缩提交可能会移除围绕某些决策背后的背景，这对于理解在将来重新访问代码时当前状态背后的基本原理至关重要。
- en: '**Finding old code**'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**查找旧代码**'
- en: At times, the code that gets removed during the development process can be as
    informative as the code that remains. When commits are squashed, the ability to
    retrieve and examine these discarded snippets is lost, which can be a disadvantage
    when trying to understand past decisions or resurrect a shelved idea. If you’ve
    written and removed code in a single branch, it can be nearly impossible to retrieve
    those changes after a squash or rebase.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在开发过程中被删除的代码与保留的代码一样具有信息量。当提交被压缩时，检索和检查这些被丢弃的片段的能力将会丧失，这在尝试理解过去的决策或重新启动搁置的想法时可能会是一个劣势。如果你在单个分支中编写并删除代码，那么在压缩或变基后几乎不可能检索到这些更改。
- en: '**Tracking the author**'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**追踪作者**'
- en: 'In collaborative environments, understanding who wrote what can be essential
    for seeking clarification or addressing issues. Squashing commits often attributes
    all changes to the person performing the squash, removing the granularity of authorship
    and complicating accountability. Simply put: `git blame` is not effective when
    commits are rewritten.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在协作环境中，了解谁写了什么对于寻求澄清或解决问题可能至关重要。压缩提交通常将所有更改属性于执行压缩的人，移除了作者身份的细微差别，并使责任更加复杂化。简单来说：`git
    blame` 在提交被重写时不起作用。
- en: '**Git bisect to the rescue**'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Git bisect 拯救**'
- en: Bisecting is a lifesaver when isolating issues, and it’s far easier with smaller
    commits than with a huge squashed feature branch. It’s quick to churn through
    even thousands of commits to find the offending one, but if it only turns up a
    squashed feature branch, it will take more time to comb through every line of
    code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在隔离问题时，二分查找是一个救命稻草，而且相对于一个庞大的压缩特性分支而言，使用较小的提交要容易得多。甚至可以快速地浏览数千个提交以找到有问题的提交，但如果只找到一个压缩的特性分支，那么需要花更多时间来逐行查看代码。
- en: '**Potential for errors**'
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**可能的错误**'
- en: Rebasing, especially when done across branches that are widely divergent, can
    introduce errors that are difficult to trace. A single misstep during conflict
    resolution can lead to subtle bugs that may not be immediately apparent, creating
    a hidden cost that manifests later. A botched rebase can wreak havoc, leading
    to lost work at worst, or wasted time at best. I know plenty of horror stories
    of colleagues trying to untangle codebases that have been afflicted by the rebase
    bug. This isn’t to say that this doesn’t occur via other Git usage —- conflicts
    are a fact of life — but it can be particularly challenging to work through with
    rebasing. This is especially evident with folks who are new to Git, as the ramifications
    of rewriting history aren’t as obvious.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 变基，特别是在跨度广泛不同的分支之间进行时，可能会引入难以追踪的错误。在冲突解决过程中的一次错误步骤可能会导致不明显的细微错误，从而产生后期才显现出来的隐藏成本。失败的变基可能会造成严重破坏，最坏的情况下导致丢失的工作，或者最好的情况下浪费时间。我知道很多同事试图解开受到变基错误影响的代码库的恐怖故事。这并不是说这种情况不会通过其他
    Git 使用方式发生——冲突是生活的一部分——但在变基中解决这些问题可能特别具有挑战性。对于新手来说尤其如此，因为重写历史的后果并不那么明显。
- en: '**When, not if**'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**时间不是问题**'
- en: At some point, even the most experienced of Git users will need to deal with
    a botched rebase. This is a frustrating experience, a tremendous time-suck, and
    a risky entry point for new bugs. New errors may be introduced as old commits
    are rewritten, and finding bugs can be complicated. While a merge may also introduce
    bugs, there is a single point in the commit history to mark that. Bugs could be
    introduced at any time in a chain of rewritten commits.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时刻，即使是最有经验的 Git 用户也需要处理一个失败的变基。这是一种令人沮丧的经历，耗时巨大，也是引入新 bug 的一个风险点。随着旧的提交被重写，可能会引入新的错误，而查找错误可能会变得复杂。虽然合并也可能引入错误，但在提交历史中只有一个单一点来标记它。在一系列重写的提交中，随时可能引入错误。
- en: '**Time consumption**'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**时间消耗**'
- en: Crafting the perfect history is a significant time sink with debatable benefits.
    Developers may spend hours resolving conflicts during rebasing, time that could
    otherwise be spent writing new features or fixing bugs.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 制作完美的历史是一个巨大的时间消耗，其益处存疑。开发者可能会花费数小时解决变基过程中的冲突，这段时间本可以用来编写新功能或修复 bug。
- en: '**Perils of perfectionism**'
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**完美主义的危害**'
- en: In striving for a pristine commit history, developers might hesitate to commit
    frequently or push their changes, which can lead to significant portions of work
    existing only on local machines. This not only increases the risk of data loss
    but also delays collaboration and feedback. I’d rather a teammate push up a broken
    WIP commit as they rush out the door than nothing at all.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了追求一份完美的提交历史，开发者可能会犹豫不决，不经常提交或推送他们的更改，这可能导致很大一部分工作仅存在于本地机器上。这不仅增加了数据丢失的风险，还延迟了协作和反馈。我宁愿看到一个队友在匆忙出门时提交一个不完整的
    WIP（工作进行中）提交，而不是什么都没有。
- en: '**The value of commit messages**'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**提交消息的价值**'
- en: 'While well-crafted commit messages are helpful, an overemphasis on their importance
    can detract from the primary goal of version control: collaborating with a team.
    Developers might spend more time managing their Git artifacts than coding, or
    worse, avoid committing frequently to avoid having to write messages for “trivial”
    changes.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然精心制作的提交消息是有帮助的，但过分强调它们的重要性可能会削弱版本控制的主要目标：与团队协作。开发者可能会花费更多时间管理他们的 Git 代码库而不是编码，或者更糟的是，避免频繁提交以避免为“琐碎”的更改编写消息。
- en: '**They’re just lies, after all**'
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**毕竟它们只是谎言**'
- en: 'Rewriting old history, especially with rebasing, but even with squashing, is
    simply that: rewriting history. It’s not a true representation of when changes
    were made, who made them, how the process went, and most importantly, why they
    were made. We’re lying to ourselves by saying a commit was created today when
    it was created days or weeks ago. Some people may choose to do this because it
    presents a better picture of how something went: no WIP commits, no broken builds,
    no test failures, and no mistakes taken to arrive at a solution. It’s simply not
    the truth, but it looks nice on paper.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 重写旧历史，尤其是使用变基，甚至使用压缩，都只是重写历史。这不是对当时更改何时进行、由谁进行、过程如何以及最重要的是为什么进行的真实表示。我们在自欺欺人，说一个提交是今天创建的，而实际上是在几天或几周前创建的。有些人可能选择这样做是因为它呈现了更好的情况：没有
    WIP 提交，没有破碎的构建，没有测试失败，也没有在解决方案到达之前采取的错误。这只是不符合事实，但在纸上看起来很好。
- en: '**One rebase, all rebase**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**一个变基，全变基**'
- en: Rebasing isn’t a solo activity; it has team-wide implications. When one team
    member starts rebasing and force-pushing, it requires everyone on the team to
    adapt to this workflow. This can be disruptive, especially if team members are
    at different skill levels with Git. Newer members may struggle with the complexities
    of rebasing, which can lead to errors and frustration. I advocate for managing
    your Git workflow as you see fit *without* imposing this standard on everyone.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 变基不是一项孤立的活动；它具有团队范围的影响。当一个团队成员开始变基和强制推送时，这就需要团队中的每个人都适应这种工作流程。这可能会带来干扰，尤其是如果团队成员对
    Git 有不同的技能水平。新成员可能会因为变基的复杂性而苦恼，这可能会导致错误和沮丧。我主张根据自己的意愿管理你的 Git 工作流程，*不要*把这一标准强加给每个人。
- en: '**Why this matters**'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**为什么这很重要**'
- en: Rebasing rewrites history, and when that rewritten history is shared, it can
    cause confusion and conflicts for others who have the old history in their local
    repositories. Team members must then spend additional time learning advanced Git
    commands to safely synchronize their work, which can be a steep learning curve
    for some and may introduce even more potential errors in that process.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 变基会重写历史，当共享这些重写的历史时，可能会导致其他人的困惑和冲突，因为他们的本地仓库中有旧的历史。然后团队成员必须花费额外的时间学习高级的 Git
    命令来安全地同步他们的工作，这对一些人来说可能是一个陡峭的学习曲线，并且可能会在这个过程中引入更多的潜在错误。
- en: '**The ripple effect**'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**涟漪效应**'
- en: Even a well-intentioned rebase can create a ripple effect requiring others to
    halt their work to resolve unexpected issues. This can lead to a significant productivity
    hit for the team as a whole, as members must pause feature development to address
    problems introduced by history rewrites.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是出于良好意图的变基也可能产生涟漪效应，需要其他人停下手头的工作来解决意外问题。对整个团队来说，这可能会导致生产力的显著下降，因为成员必须暂停特性开发以解决历史重写带来的问题。
- en: '**Utilizing Git History Correctly**'
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**正确利用 Git 历史**'
- en: I seldom pore over commit messages, relying instead on tools like `git grep`
    and `git log -p` for understanding code changes. Commit messages don’t tell the
    whole story; that is the purpose of the codebase itself. The story of the code
    is best told first-hand, when commits are introduced, not as an archaeologist
    or anthropologist going back in time and piecing things together. The original
    commit message, timestamp, author, and order are all more effective when left
    untampered.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我很少钻研提交信息，而是依赖像`git grep`和`git log -p`这样的工具来理解代码更改。提交信息并不能讲述整个故事；这正是代码本身的目的所在。代码的故事最好是第一手讲述的，在提交时，而不是像考古学家或人类学家那样回到过去，拼凑事物。原始的提交信息、时间戳、作者和顺序在保持不变时更有效。
- en: '**Respecting diverse workflows**'
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**尊重多样化的工作流**'
- en: Best practices should be adaptable to fit various team and project dynamics.
    When in doubt, opt for the approach that’s safer, quicker, and preserves more
    data.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践应该适应各种团队和项目动态。当有疑问时，选择更安全、更快速且保留更多数据的方法。
- en: '**Avoiding disruption**'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**避免中断**'
- en: Frequent context switching between coding and crafting detailed commit messages
    can hamper productivity. Sometimes it’s best to note it’s a work-in-progress (WIP)
    and move on. Is it worth revisiting those and fixing them in the future?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在编码和编写详细的提交信息之间频繁切换可能会影响生产力。有时最好注明这是一个正在进行中的工作（WIP）然后继续前进。是否值得在未来重新审视并修复它们呢？
- en: '**Embracing change**'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**拥抱变化**'
- en: As requirements and knowledge evolve, so does our code. Time spent polishing
    history is pointless if those changes are later altered or discarded.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 随着需求和知识的演变，我们的代码也在不断发展。如果这些更改后来被更改或丢弃，花费时间打磨历史就是毫无意义的。
- en: '**Finding the right process**'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**找到合适的流程**'
- en: Too many processes can get in the way of actually building software. Rebasing
    can add unnecessary steps to completing a task, and I hesitate to add another
    one to a constantly growing list in modern development.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 过多的流程可能妨碍软件的实际构建。变基可能会增加完成任务的不必要步骤，我不愿意在现代开发中的不断增长的列表中再添加另一个步骤。
- en: Organize and rebase your commits if you like, but consider your team’s preferences,
    the team-wide implications, and potential drawbacks.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果愿意，可以组织和变基提交，但要考虑团队的偏好、团队范围的影响和潜在的缺点。
- en: '**The Ultimate Purpose of Git**'
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Git 的最终目的**'
- en: How you choose to use Git is up to you, but at its core, it is a tool to share
    code and teach changes with teammates, not a holy text of changelogs.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用 Git 由你决定，但其核心是与队友共享代码并教授更改，而不是更改日志的神圣文本。
- en: Rewriting commit history demands a substantial investment of time, adds complexity
    and risk, obscures the development story, and offers limited benefit. It’s just
    not worth it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 重写提交历史需要大量的时间投入，增加了复杂性和风险，使开发故事变得模糊，并且收益有限。这简直不值得。
- en: 'While it’s not an apples-to-apples comparison, consider this: we change source
    code via minification and obfuscation at the final stages of the release pipeline
    to maintain readability and debuggability during the development phase. Rewriting
    commit history obfuscates and minifies our source code at the first stage of that
    same pipeline, which obscures the natural, iterative problem-solving that unfolds
    as the code evolves.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不是苹果与苹果的比较，但请考虑这一点：我们通过在发布管道的最后阶段通过缩小和混淆来改变源代码，以在开发阶段保持可读性和可调试性。重新编写提交历史会在同一管道的第一阶段混淆和缩小我们的源代码，这会遮蔽代码演变过程中自然的迭代问题解决过程。
- en: The appeal of a pristine Git history is understandable, yet I’ve often found
    more practical value in a detailed, albeit cluttered, commit log. Small commits
    tracking all changes over time and accurate contributor logs are more beneficial
    than lumping them into one. Time spent managing this is often wasted effort. It
    can be put to better use.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 保持**Git**历史记录的完整性的吸引力是可以理解的，但我常常发现，一个详细的，虽然杂乱，但却有用的提交日志在实际中更有价值。小的提交可以跟踪所有变更，准确的贡献者日志比把它们合并成一个更有益。时间花在管理这些方面通常是徒劳的努力。可以有更好的利用方式。
- en: Finally, my experiences are mostly with smaller teams focused on delivering
    functional code rather than maintaining spotless commit narratives. As I haven’t
    worked in an organization or on an open-source project where this is more important,
    it’s possible that I just haven’t developed the necessary skills, and I’m afraid
    of change. If you’ve struck a balance between meticulous Git habits and efficiency,
    I’m all ears.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我的经验主要来自于专注于交付功能代码而非维护无瑕提交记录的小团队。由于我并没有在更重视这一点的组织或开源项目中工作过，可能我只是没有培养必要的技能，而且我害怕改变。如果你在精确的
    Git 习惯和效率之间找到了平衡，我非常愿意倾听。
- en: I hope this post has provided some food for thought, whether you’re a Git purist
    or a pragmatist. I would love to continue the conversation in the comments. Please
    tell me why I’m wrong!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇文章能为您提供一些思考的食物，无论您是 Git 纯粹主义者还是实用主义者。我很乐意在评论中继续这个对话。请告诉我我哪里错了！
