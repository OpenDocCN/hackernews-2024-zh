["```\nIf we were to try and call `someUnexpectedIOThing` from inside the top `add` function, our program would not compile. The type signature of a function with side effects is different from the type signature of a similar function without side effects. Furthermore, functions with side effects can call other functions with or without side effects, but functions without side effects can only call other functions without side effects. You can probably see where I'm going with this.\nIt's easy to imagine the benefits of such an approach already. If you would think that working with `IO` functions is relatively more awkward than working with equivalent non-`IO` functions, you'd be correct. The effect of this is that the `IO` portion of your program naturally tends towards being only as large as it has to be, and the non-`IO` parts tend towards being as much of the program as is possible. This is a huge win because pure functions are easy to read, easy to reason about, and easy to change.\nAsync/Await in C#\nLet's see a similar example in a language with colored functions like C#.\n\n```", "```\n\n```"]