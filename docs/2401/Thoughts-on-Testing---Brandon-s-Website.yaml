- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:32:11'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:32:11
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Thoughts on Testing | Brandon's Website
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试思考 | Brandon's Website
- en: 来源：[https://www.brandons.me/blog/thoughts-on-testing](https://www.brandons.me/blog/thoughts-on-testing)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.brandons.me/blog/thoughts-on-testing](https://www.brandons.me/blog/thoughts-on-testing)
- en: Thoughts on Testing January 4, 2024
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试思考 2024年1月4日
- en: 1548 Brandon Smith
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 1548 Brandon Smith
- en: Today I was thinking about tests.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我在思考测试问题。
- en: Skepticism
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怀疑
- en: I'm skeptical of tests. I'm not *against* tests (even though my coworker opened
    a conversation today with "I know you hate tests" and I quickly projected my voice
    across the office as I said "I don't hate tests!" just to make sure everyone knew),
    but *a lot of people really love tests* and I sometimes feel like I have to pour
    some cold water on that.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我对测试持怀疑态度。我不是*反对*测试（尽管我的同事今天开口就说“我知道你讨厌测试”，我迅速放大声音说“我不讨厌测试！”只是为了确保每个人都知道），但*很多人真的很喜欢测试*，有时我觉得我需要泼些冷水。
- en: Cost
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成本
- en: The thing is that *tests are code*, and *all code is technical debt*, but unlike
    normal code tests can grow without bounds, and they don't always get seen as a
    something with a cost because they don't get shipped to production. But every
    test is...
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于*测试就是代码*，*所有代码都是技术债务*，但与普通代码不同，测试可以无限增长，并且它们并不总被视为一种有成本的东西，因为它们不会被部署到生产环境。但是每个测试都是...
- en: Code that takes time to write
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码需要花费时间编写时
- en: Code that takes time to maintain (when requirements change, dependencies change,
    etc)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码需要花费时间维护时（需求变化、依赖项变化等）
- en: Code that takes time running in CI
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 需要在CI中运行的代码时间
- en: And bad tests can give a false sense of security
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 而且糟糕的测试可能会给人一种虚假的安全感
- en: So I think it's fair to say that (despite certain engineering books and management
    directives) *the optimal number of tests isn't as many as we can possibly come
    up with*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我认为可以这样说（尽管有些工程书籍和管理指导）*最佳测试数量不是我们可能提出的那么多*。
- en: Judgement calls
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 判断
- en: So what is the optimal number of tests? It depends, but here are some ways I
    like to frame the question
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是最佳测试数量呢？这取决于情况，但以下是我喜欢提出问题的一些方式：
- en: '"Is this something static analysis can test?"'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: “这是静态分析可以测试的内容吗？”
- en: Anything that can be checked by static types, linting, etc, is better caught
    by those than by tests. A whole lot of things can't, but this is a starting point.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可以通过静态类型、代码检查等进行检查的内容，都比测试更容易被捕捉到。有很多事情是不能被捕捉到的，但这是一个起点。
- en: 'It''s not just personal preference: static analysis prevents entire classes
    of bugs at once, while tests cover individual inputs. You always might forget
    to write a test for an edge case, but a type checker won''t.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅仅是个人偏好：静态分析一次性防止了整类错误，而测试则覆盖了个别输入。你可能会忘记为边缘情况编写测试，但类型检查器不会忘记。
- en: But static analysis isn't available in every language, and in those unit tests
    become more important as they try to fill that gap.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但是静态分析并不适用于每种语言，在这些语言中，单元测试变得更加重要，因为它们试图填补这个空白。
- en: '"How often will the behavior *intentionally* change?"'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: “行为会*有意*改变多少次？”
- en: 'This question tells us how often we''ll get false-positives (tests that need
    to "be fixed"). Consider two functions having tests written for them:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题告诉我们我们会有多少次假阳性（需要“修复”的测试）。考虑为两个函数编写测试的情况：
- en: The first is a [fibonacci](https://en.wikipedia.org/wiki/Fibonacci_sequence)
    function. The fibonacci sequence is well-defined, it has a clear definition, it
    will never change. If we test a given input + output combination, and our test
    fails, it will *always* mean our code is broken. There will *never* be a false-positive
    (failed test when the implementation is actually doing what we want it to do),
    because if we ever wanted `fib(3)` to equal `100`, we're no longer talking about
    a fibonacci function.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是一个[fibonacci](https://en.wikipedia.org/wiki/Fibonacci_sequence)函数。斐波那契序列是有明确定义的，它有一个明确的定义，它永远不会改变。如果我们测试一个给定的输入+输出组合，而我们的测试失败了，那将*始终*意味着我们的代码出了问题。将*永远*不会出现假阳性（测试失败，但实际上实现了我们想要的内容），因为如果我们希望`fib(3)`等于`100`，我们就不再讨论斐波那契函数了。
- en: 'Imagine another function that returns a greeting message containing a person''s
    name (eg. `"Hello, Brandon!"`). Suppose we write a test that checks that `greet("Brandon")`
    returns `"Hello, Brandon!"`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 想象另一个返回包含人名的问候消息的函数（例如。`"Hello, Brandon!"`）。假设我们编写了一个测试，检查`greet("Brandon")`是否返回`"Hello,
    Brandon!"`：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, suppose that the product manager comes to us one day and says, "We have
    a new design, we'd now like it to say `"Greetings Brandon, welcome to our website!"`
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设产品经理有一天来找我们说，"我们有一个新设计，我们现在想让它说`"欢迎Brandon，欢迎来到我们的网站！"`"
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We change the code behavior, and now our test fails! But the failure isn't because
    we introduced a bug, it's because *we changed our mind*. The new message is now
    the *correct* behavior of `greet()`, and so the test is now incorrect and needs
    to be updated. Time spent "fixing" the test is pure overhead.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们改变了代码的行为，现在我们的测试失败了！但失败不是因为我们引入了一个错误，而是因为*我们改变了主意*。新消息现在是`greet()`的*正确*行为，因此测试现在是不正确的，需要更新。花在"修复"测试上的时间是纯粹的额外开销。
- en: 'Put differently: what''s the definition of "correct" for the code being tested,
    and how durable is that definition?'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说：被测试代码的"正确"的定义是什么，以及这个定义有多稳固？
- en: 'Most cases aren''t as clear-cut as these two, but in general:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况并不像这两种情况那样明显，但总的来说：
- en: Really general utilities are unlikely to need their behavior changed
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确实，通用的实用工具不太可能需要改变它们的行为。
- en: Core business logic is unlikely to need its behavior changed (depending on how
    close it is to feature churn)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心业务逻辑不太可能需要改变它的行为（取决于它离特性变化有多近）
- en: Surface behaviors like user interfaces (more on this later) are more likely
    to intentionally change
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像用户界面的表面行为（稍后会详细介绍）更有可能有意改变。
- en: '"Does the test just mirror the logic being tested?"'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"测试是否只是映射了被测试逻辑的逻辑？"'
- en: 'Consider the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下内容：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This hasn''t told us anything interesting about the logic being tested, we''re
    just writing it twice. It''ll tell us if `calculation`''s behavior *changed*,
    but not if it''s *wrong*. Good tests check against *intent* instead of *behavior*.
    Example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这并没有告诉我们有趣的东西，我们只是把它写了两遍。它会告诉我们`calculation`的行为*改变*，但不会告诉我们它是否*错误*。好的测试检查*意图*而非*行为*。
    例如：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here we're documenting a *meaningful concept* in our test that isn't directly
    represented in the code being tested, and so it's more likely to be *stable over
    time* than implementation details.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在文档化我们测试中的一个*有意义的概念*，这个概念在被测试的代码中并不直接表示，因此它比实现细节更有可能*随时间稳定*。
- en: '"Is the test simpler than the implementation?"'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"测试是否比实现更简单？"'
- en: Along the same lines, a good candidate for testing is code that's complicated
    enough for its behavior to be *hard* to just copy in a test. A great function
    to test is one where *you're not sure it's going to do the right thing just by
    looking at it*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在相同的线路上，一个很好的测试候选者是代码，其行为复杂到在测试中*难以*简单复制。一个很好的测试函数是一个*看着不确定它是否会通过看来就能正确执行的*函数。
- en: For code like this, the test will be simpler than what it's testing. "Test intent
    instead of implementation"; the *intent* of most code will be simpler than the
    implementation, and we want the test to reflect the intent.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这样的代码，测试将比它所测试的内容更简单。"测试意图而非实现细节"；大多数代码的*意图*都比实现要简单，我们希望测试能反映出意图。
- en: '"How much does the code being tested interact with the outside world?"'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"正在测试的代码与外部世界互动的程度有多大？"'
- en: Mocking adds a ton of complexity and reduces the amount of functionality actually
    being tested. It makes code both harder to test and less valuable to test.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟增加了大量的复杂性，并且减少了实际被测试功能的数量。它使得代码既更难测试又更不值得测试。
- en: But it's unavoidable when you're testing code that's coupled to external systems.
    Unit tests that rely on outside systems are never a good idea; they can break
    mysteriously and inconsistently.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当你测试与外部系统耦合的代码时，这是不可避免的。依赖外部系统的单元测试从来都不是一个好主意；它们可能会神秘地和不一致地出现故障。
- en: Sometimes mocking can be avoided by re-structuring your code, but sometimes
    it can't be. If it can't be, the need for lots of mocking is one clue that a piece
    of code might not be worth (unit) testing.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有时可以通过重新构造你的代码来避免模拟，但有时是不可能的。如果不可能，大量模拟的需要是代码可能不值得（单元）测试的一个线索。
- en: '"How important is this code?"'
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '"这段代码有多重要？"'
- en: Of course, the more business-critical a piece of code is, and/or the more widespread
    its use is (eg. a core component used in lots of places), the more valuable it
    is to test. It may be worth testing `coreBusinessRule` even if the implementation
    is trivial, even if our test can only make sure it doesn't change by surprise.
    It may be worth dealing with a ton of mocking just to make sure the testable part
    of an auth flow prevents illegal operations. Everything is a judgement call.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，代码越是业务关键，和/或者使用越广泛（例如，在许多地方使用的核心组件），测试的价值就越高。即使实现是微不足道的，即使我们的测试只能确保它不会出现意外变化，也值得测试`coreBusinessRule`。即使我们的测试只能确保它不会出现意外变化，也值得测试`coreBusinessRule`。即使我们的测试只能确保它不会出现意外变化，也值得测试`coreBusinessRule`。即使我们的测试只能确保它不会出现意外变化，也值得测试`coreBusinessRule`。即使我们的测试只能确保它不会出现意外变化，也值得测试`coreBusinessRule`。即使我们的测试只能确保它不会出现意外变化，也值得测试`coreBusinessRule`。一切都是一种判断。一切都是一种判断。
- en: Integration tests
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成测试
- en: 'So far I''ve been talking about unit tests, but integration tests are different
    in certain ways, especially the mocking question: almost by definition you aren''t
    really mocking systems, you''re testing the interactions between them that are
    otherwise hard to test.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我一直在谈论单元测试，但集成测试在某些方面有所不同，尤其是在模拟问题上：几乎可以通过定义说你并不真正模拟系统，而是测试它们之间的交互，这些交互否则很难测试。
- en: 'Other rules still apply though: writing tests that reflect intent (eg, "click
    the button with the label ''Submit''") instead of implementation ("click the third
    `<button>` tag on the page") will make them less fragile. Favoring tests that
    check valuable behavior ("can the user log in?") over tests that check unvaluable
    behavior ("is the submit button blue?") makes the best use of your effort. Etc.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 其他规则仍然适用：编写反映意图的测试（例如，“单击标签为“提交”的按钮”）而不是实现（“单击页面上的第三个`<button>`标签”）会使它们更加稳定。更喜欢检查有价值行为的测试（“用户能否登录？”）而不是检查无价值行为的测试（“提交按钮是蓝色的吗？”）会更好地利用你的努力。等等。
- en: UI tests
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UI 测试
- en: 'I hinted above, but my controversial take is that *I think UI rendering code
    is rarely worth unit-testing* based on these heuristics. User interfaces:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我在上面暗示过，但是我有一种具有争议的看法，*我认为基于这些启发的 UI 渲染代码很少值得进行单元测试*。用户界面：
- en: Often change output/behavior intentionally (leading to flaky tests)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常常有意改变输出/行为（导致测试不稳定）
- en: Often (not always!) have trivial logic that's easy to verify by looking at it
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常常（不总是！）有易于通过查看验证的微不足道的逻辑
- en: Are usually tightly coupled to their framework/platform, requiring elaborate
    mocking and test suite plugins
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常与其框架/平台紧密耦合，需要精心设计的模拟和测试套件插件
- en: '*But* I really only mean the rendering layer, not the entire front-end codebase:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*但是*我真正指的只是渲染层，而不是整个前端代码库：'
- en: State management decoupled from the UI (React hooks, stores, etc) can be a great
    candidate; that's where most of the complexity is, and it doesn't have most of
    the problems above
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 UI 脱钩的状态管理（React hooks、存储等）可能是一个很好的选择；那是大部分复杂性所在，而且它没有上述大部分问题
- en: Business rules like validation are also great to test; the logic is often pure
    (which makes it super easy to test), and they often have really stable definitions
    of "correct" and "incorrect" (when was the last time the meaning of "valid phone
    number" changed?)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务规则如验证也是很好测试的；逻辑通常是纯粹的（这使得测试变得非常容易），它们通常对“正确”和“错误”的定义非常稳定（上次“有效电话号码”的含义改变是什么时候？）
- en: Any other core utilities that are far away from user-facing feature churn
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何与面向用户功能变更远的核心实用程序
- en: And then, a library of UI components that are really general and used in a bunch
    of places may tip the scales towards unit testing. The value is higher, and the
    cost (of mocking, etc) is usually lower because they're meant to be reusable.
    They may also change less often than product features.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，一个包含在许多地方使用的非常通用的 UI 组件库可能会倾向于进行单元测试。价值更高，成本（模拟等）通常较低，因为它们是可重复使用的。它们也可能比产品特性更少地改变。
- en: Closing thoughts
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 收尾思考
- en: I don't hate tests (I promise, Avid!), I just try to question them on a case
    by case basis, and I haven't met a lot of people who do.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我不讨厌测试（我保证，Avid！），我只是试图根据具体情况来质疑它们，我还没有遇到过很多这样做的人。
- en: They have a very real organizational cost, which as engineers we need to be
    aware of. Having more of them makes more little green things light up in the console
    and makes that coverage number go up, so it feels good to add them. But like anything,
    testing needs to be done with consideration.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 它们有很高的组织成本，作为工程师，我们需要意识到这一点。拥有更多的界面使控制台中的绿色标记变得更多，使覆盖率数字增加，因此增加它们感觉很好。但是像任何东西一样，测试需要考虑周全。
