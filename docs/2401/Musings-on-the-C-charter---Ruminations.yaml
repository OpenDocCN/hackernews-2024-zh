- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:27:08'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:27:08
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Musings on the C charter | Ruminations
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对 C 宪章的思考 | 沉思录
- en: 来源：[https://blog.aaronballman.com/2023/12/musings-on-the-c-charter/](https://blog.aaronballman.com/2023/12/musings-on-the-c-charter/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.aaronballman.com/2023/12/musings-on-the-c-charter/](https://blog.aaronballman.com/2023/12/musings-on-the-c-charter/)
- en: Within the C committee, there’s been a lot of talk about what the [C charter](https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2611.htm)
    means and whether it should be updated or not. My personal musing on the topic
    is that the C charter needs to be updated in order for C to remain relevant long-term.
    Whether C should remain relevant long-term is an exercise left to the reader.
    Note, these thoughts may change over time as I gather more feedback from more
    places.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C 委员会内部，人们一直在讨论[C 宪章](https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2611.htm)的含义以及是否应该对其进行更新。我个人对这个话题的思考是，为了让
    C 保持长期相关性，C 宪章需要更新。C 是否应该保持长期相关性是留给读者去思考的问题。请注意，随着我从更多地方收集到的反馈越来越多，这些想法可能会随着时间而变化。
- en: '## Existing code is important, existing implementations are not.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '## 现有代码很重要，现有实现不重要。'
- en: A standard is a treaty between implementor and programmer.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 标准是实现者和程序员之间的协定。
- en: Migration of an existing code base is an issue.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对现有代码库的迁移是一个问题。
- en: Minimize incompatibilities with C90.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量减少与 C90 的不兼容性。
- en: I think we could combine these principles into one bullet instead of four because
    they’re all effectively about code migration to newer standard versions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为我们可以将这些原则合并成一个要点，而不是四个，因为它们实际上都是关于将代码迁移到更新的标准版本的。
- en: Each new release of C should provide a simple upgrade path from the previous
    release of C so that users can gradually transition between adjacent versions
    of C, but incompatibilities between releases are acceptable. In other words, it’s
    fine to deprecate old functionality even without replacement, or remove previously
    deprecated functionality (again, even without replacement), but this should only
    be done with significant justification given the costs to users of C.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每个新版本的 C 应该提供从上一个 C 版本到下一个 C 版本的简单升级路径，以便用户可以逐渐过渡到相邻版本的 C，但是版本之间的不兼容性是可以接受的。换句话说，即使没有替代，也可以弃用旧功能，或者删除先前弃用的功能（同样，即使没有替代），但是只有在给出对
    C 用户的成本的重要的理由时才应该这样做。
- en: Changing the standard a code base compiles against is a new agreement between
    the programmer and the implementer; it is akin to changing your code (as is changing
    your compiler), and there should be no expectation that everything remains identical
    to how it was before. Older functionality will be deprecated, newer functionality
    will be added, bugs will be fixed, etc. New standard == new treaty.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 更改代码编译标准是程序员和实现者之间的新协议；这类似于更改您的代码（就像更改编译器一样），并且不应期望一切都保持与之前完全相同。旧功能将被弃用，新功能将被添加，错误将被修复等等。新标准
    == 新条约。
- en: 'I think we should be careful about blind adherence to this principle. It’s
    obviously true that there’s a lot of economic value tied up in existing C code
    bases and that rewriting that code is both expensive and error-prone. However,
    C has undergone multiple revisions in its long history. A good idea in 1978 is
    not necessarily even acceptable practice in 2024\. I would love to see this principle
    updated to set a time limit, along the lines of: existing code that has been maintained
    to not use features marked deprecated, obsolescent, or removed in the past ten
    years is important; unmaintained code and existing implementations are not. If
    you cannot update your code to stop relying on deprecated functionality, your
    code is not actually economically important — people spend time and money maintaining
    things that are economically important.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为我们应该谨慎地遵循这个原则。显然，现有的 C 代码库中有很多经济价值，并且重新编写该代码既昂贵又容易出错。然而，C 在其漫长的历史中已经经历了多次修订。1978
    年的一个好主意在 2024 年不一定是可接受的做法。我希望看到这个原则得到更新，以设定一个时间限制，类似于：已经维护不使用过去十年中标记为弃用、废弃或移除功能的现有代码很重要；不维护的代码和现有实现不重要。如果您无法更新您的代码以停止依赖弃用功能，那么您的代码实际上并不重要——人们会花时间和金钱来维护重要的东西。
- en: C code can be portable.
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C 代码可以是可移植的。
- en: C code can be non-portable.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: C 代码可能是不可移植的。
- en: I think both of these principles are still reasonable today. While commodity
    hardware has trended towards more homogeneity, there is still plenty of heterogeneous
    hardware solutions out there (DSPs, FPGAs, etc) and domains like AI, ML, cryptography,
    etc are pushing the boundaries for new hardware solutions. We should continue
    to aim to be as portable as possible while not constraining ourselves to the lowest
    common denominator of hardware.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这两个原则今天仍然是合理的。虽然商品硬件趋向于更加同质化，但仍然存在大量异构硬件解决方案（DSP、FPGA 等），而且像人工智能、机器学习、密码学等领域正在推动新的硬件解决方案的边界。我们应该继续努力做到尽可能的可移植性，同时不限制自己在硬件的最低公分母上。
- en: Avoid quiet changes.
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免悄无声息的变化。
- en: I still strongly believe in this principle. It directly impacts transitions
    between standard versions — quiet changes make it much harder for users to upgrade
    to the latest standard.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我依然坚信这个原则。它直接影响标准版本之间的过渡 —— 悄无声息的变化使用户更难以升级到最新的标准。
- en: Keep the spirit of C.
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持 C 的精神。
- en: I do not think this principle has much value because it is too subjective, though
    I understand the desire behind it. I think people want C to remain familiar between
    releases instead of being reinvented. For example, I think users do not want to
    see a Perl 5/Perl 6- or Python 2/Python 3-style bifurcation of the language and
    community. However, I think the principle that existing code is important is sufficient
    to cover that need.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我不认为这个原则有太多价值，因为它太主观了，尽管我理解它背后的愿望。我认为人们希望 C 在发布之间保持熟悉，而不是被重新发明。例如，我认为用户不希望看到语言和社区出现类似
    Perl 5/Perl 6 或 Python 2/Python 3 的分叉。然而，我认为现有代码至关重要的原则已经足以满足这种需求。
- en: Most especially, I think concepts like “trust the programmer”, “don’t prevent
    the programmer from doing what needs to be done”, “make it fast”, etc are problematic
    given the increased need for improved security in system’s level programming languages.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，我认为像“相信程序员”、“不阻止程序员做必须要做的事情”、“让它快”等概念在系统级编程语言中的安全性需要得到提升的情况下是有问题的。
- en: I would prefer to see this bullet removed because it’s not an actionable principle
    and I think other bullets cover the main thrust of what it was trying to say.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望看到这个项目被删除，因为它不是一个可操作的原则，我认为其他项目已经涵盖了它试图传达的主要内容。
- en: Support international programming.
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持国际编程。
- en: I still strongly believe in this principle, though I worry that WG14 lacks enough
    expertise to really help validate designs in this space. I appreciate that WG21’s
    SG16 members have been willing to provide advice, and that the Unicode consortium
    folks are actively engaging with programming language committees as well. But
    there’s more to internationalization than simply text (for example, units of measure,
    date/time functionality, and input methods are also part of internationalization).
    I think the goal is excellent, but hopefully we have enough humility as a committee
    to recognize when we could use outside advice.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '我依然坚信这个原则，尽管我担心 WG14 缺乏足够的专业知识来真正帮助验证这个领域的设计。我感激 WG21 的 SG16 成员愿意提供建议，以及 Unicode
    联盟的人员也积极与编程语言委员会进行交流。但是国际化不仅仅是文本（例如，度量单位、日期/时间功能和输入方法也是国际化的一部分）。我认为这个目标是优秀的，但希望我们作为一个委员会足够谦虚，认识到我们需要外部建议的时候。 '
- en: Codify existing practice to address evident deficiencies.
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将现有实践系统化以解决明显的不足之处。
- en: Unlike for C99, the consensus at the London meeting was that there should be
    no invention, without exception.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不同于 C99，伦敦会议的共识是不应该有任何新的发明，没有例外。
- en: I think these bullets are saying the same thing and we only need to say this
    once if we wish to say it at all. However, I do not think the committee agrees
    with the idea of no invention without exception and we do everyone a disservice
    by stating it as a principle. For starters, we’ve shown we’re perfectly comfortable
    with invention during the C11 and C23 cycles. Invention is necessary if we want
    to unify divergent existing practice in the wild into something standardized.
    “No new invention” is why we still have no solution for a “pointer + size” type
    or a “string” type. There are a lot of different ways to solve those kinds of
    problems and until the committee picks one and says “This is The Way”, we’ll continue
    to see more ad hoc solutions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: That said, I think there are really important points hiding in these two bullets.
    For example, having a principled way to separate “need” from “want” is critical
    to avoid spending too much committee time on work that does not benefit enough
    users. What makes something a good feature to standardize vs not? How integrated
    should a feature be (for example, does adding a new arithmetic type to the language
    also require it be supported in I/O operations in the standard library, etc)?
    When two implementations support the same notional feature with slightly differing
    semantics, should the committee use undefined behavior to resolve the conflict
    so no users have to change code, or should the committee push for well-defined
    behavior despite knowing it will break some users? I think we want to have answers
    to these sorts of questions, but they’re less about charter and more about feature
    design guidance. Perhaps we want a second document to help authors understand
    what the committee needs in a proposal and why?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Minimize incompatibilities with C++
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[C++ inherits the C standard library almost directly from C,](https://eel.is/c++draft/library.c#2)
    but the core C++ language is specified entirely independently of the C language
    specification. Despite the languages being distinct in terms of specification,
    every production C++ compiler also claims to be a conforming C compiler. Further,
    C++ standard library implementations eventually need to use C interfaces to communicate
    with the host operating system. So I think it is in the best interests of WG21,
    users of C++, and C++ implementers for WG14 to minimize incompatibilities with
    C++.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Based on my experience as the former C and C++ compatibility study group chair
    and from being on both of these committees for about a decade, I think WG14 spends
    a significantly larger percentage of committee time on C and C++ compatibility
    than WG21 does. WG14 has a charter that mandates we minimize these incompatibilities
    (WG21 has no such mandate as they do not have a charter). The WG14 committee spends
    a considerable amount of meeting time deliberating how changes to C will impact
    C++ and our convener regularly reminds us of our obligations to minimize incompatibilities
    where possible. Comparatively, WG21 spends relatively little committee time on
    C compatibility and WG21 leadership does not proactively attempt to steer the
    committee to minimize incompatibilities. Given the difference in size between
    our committees (WG21 is approximate 15x larger than WG14), this is not a tenable
    situation. The committee with the least resources is spending the most time on
    compatibility despite reaping the least benefits.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我作为前 C 和 C++ 兼容性研究组主席以及在这两个委员会中任职约十年的经验，我认为 WG14 在 C 和 C++ 兼容性上花费的委员会时间比 WG21
    多得多。WG14 有一个规约要求我们尽量减少这些不兼容性（WG21 没有这样的规约，因为他们没有一个规约）。WG14 委员会花费相当多的会议时间来研究 C
    的变化如何影响 C++，我们的召集人经常提醒我们尽量减少不兼容性。相比之下，WG21 在 C 兼容性上花费的委员会时间相对较少，WG21 的领导不积极地试图引导委员会减少不兼容性。考虑到我们委员会之间的规模差异（WG21
    的规模大约是 WG14 的 15 倍），这种情况是不可持续的。资源最少的委员会花费了最多的时间在兼容性上，尽管收获最少。
- en: 'I believe compatibility with C++ should not be a chartered requirement for
    features brought into C that are present in C++. Without closer cooperation between
    WG21 and WG14 (such as [a shared base document between the two languages](https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2644.pdf)),
    I do not think WG14, C implementers, or C users get sufficient benefit for the
    amount of WG14 committee effort spent on compatibility with C++. Unfortunately,
    an inability for the committees to effectively collaborate hurts the people least
    represented on either committee: users working in this shared space. Therefore,
    I do believe compatibility with C++ should continue to be a goal as a design principle,
    especially for features that are likely to be used in header files shared between
    a mixed C and C++ code base.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为，将 C++ 的特性引入 C 不应该是一个 WG14 规定的要求。如果 WG21 和 WG14 之间没有更紧密的合作（比如[两种语言之间共享的基础文档](https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2644.pdf)），我认为
    WG14、C 实现者或 C 用户在与 C++ 兼容性上花费的 WG14 委员会的努力所得到的好处不足以支持。不幸的是，委员会之间无法有效合作，损害了委员会中最少代表的人：在这个共享空间中工作的用户。因此，我认为与
    C++ 的兼容性应继续作为一个设计原则的目标，特别是对于可能在混合的 C 和 C++ 代码库之间共享的头文件中使用的特性。
- en: Maintain conceptual simplicity.
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持概念上的简单性。
- en: I still believe in this principle, though it’s a bit too ambiguous for my tastes.
    What one committee members finds to be simple, another might find to be too complex.
    For example, is a feature for overloading operators maintaining conceptual simplicity?
    I suspect asking five committee members that exact question will net about seven
    different answers.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个原则对我来说有些模糊不清，但我仍然相信它。一个委员会成员认为简单的东西，另一个可能会觉得太复杂了。例如，一个用于重载运算符的特性是否保持了概念上的简单性？我怀疑，问五个委员会成员这个确切的问题，可能会得到七个不同的答案。
- en: Trust the programmer, as a goal, is outdated in respect to the security and
    safety programming communities.
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “相信程序员”作为一个目标，在安全和安全编程社区方面已经过时。
- en: 'I don’t think this goes far enough. I think “trust the programmer” has lead
    to decades of security vulnerabilities, to the point that major government agencies
    are now [recommending against](https://media.defense.gov/2022/Nov/10/2003112742/-1/-1/0/CSI_SOFTWARE_MEMORY_SAFETY.PDF)
    [using C](https://advocacy.consumerreports.org/wp-content/uploads/2023/01/Memory-Safety-Convening-Report-1-1.pdf)
    (and C++). I would prefer we take a stronger stance along the lines of: do not
    trust the programmer. Design facilities such that their misuse becomes almost
    impossible outside of pathological code. Prefer “defined” behavior (well-defined,
    implementation-defined, or unspecified behaviors) to undefined behavior where
    possible. When misuse is possible, require strong error detection mechanisms which
    can prevent undefined behavior. I think it’s perfectly reasonable to expect “trust
    me, I know what I’m doing” users to have to step outside of the language to accomplish
    their goals and use facilities like inline assembly or implementation extensions.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这还不够。我认为“信任程序员”导致了几十年的安全漏洞，以至于主要政府机构现在都[建议不要](https://media.defense.gov/2022/Nov/10/2003112742/-1/-1/0/CSI_SOFTWARE_MEMORY_SAFETY.PDF)使用
    C（和 C++）。我更希望我们采取更强硬的立场，比如：不要相信程序员。设计设施，使其滥用几乎在病态代码之外几乎不可能。在可能的情况下，更喜欢“定义”行为（明确定义的、实现定义的或未指定的行为），而不是未定义的行为。当可能发生误用时，要求强大的错误检测机制，可以防止未定义的行为。我认为，可以合理地期望“信任我，我知道我在做什么”的用户必须走出语言范畴来实现他们的目标，并使用诸如内联汇编或实现扩展等设施。
- en: Application Programming Interfaces (APIs) should be self-documenting when possible.
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序编程接口（API）应尽可能自我记录。
- en: I agree with the idea, but I don’t agree with the way it is presented regarding
    preference for VLA interfaces. That’s reasonable guidance for new APIs unrelated
    to any existing APIs, but it is not defensible when adding new APIs that are related
    to existing ones. e.g., adding `memset_explicit` should not (and thankfully did
    not) rearrange parameter order to fit this guidance, because it would have been
    very hard for people to migrate existing uses of `memset` to `memset_explicit`
    without introducing memory-related errors. I would prefer we made the guidance
    more general and less about VLAs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我同意这个想法，但我不同意它关于偏好 VLA 接口的表述方式。对于与任何现有 API 无关的新 API，这是合理的指导，但在添加与现有 API 相关的新
    API 时，这是不能被辩护的。例如，添加`memset_explicit`不应（也幸运地没有）重新排列参数顺序以符合这个指导，因为这样做会使人们很难将现有使用`memset`迁移到`memset_explicit`，而不会引入与内存相关的错误。我更希望我们将指导更普遍化，而不是关于
    VLAs。
- en: What’s Missing?
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还缺了什么？
- en: To me, the biggest thing we’re missing is a plan. ISO standards committees are
    “obligated” to consider all proposals from committee members, and so the approach
    the committee takes is to take whatever papers arrive and try to give the author
    feedback so that they can make progress. That said, our obligations do not include
    a mandate on when to schedule discussion of papers — we could elect to consider
    papers that aren’t in the committee’s plan only after considering all other in-scope
    work. But the committee has never gone to those lengths and so we release standards
    with a hodge podge of unrelated features and bug fixes. I would love to see the
    committee charter require that we come up with a roadmap of what we want to accomplish
    in a given release cycle and then stick to that road map. I don’t mind considering
    occasional out-of-scope work during the cycle, but that should not come at the
    expense of in-scope work. I think having a roadmap will also help the relationship
    between the committee, implementers, and users because it gives everyone more
    time to plan for what’s coming in the next few years.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，我们最缺少的是一个计划。ISO 标准委员会“有责任”考虑来自委员会成员的所有提案，因此委员会采取的方法是接受到达的任何文件，并尝试给予作者反馈，以便他们能够取得进展。话虽如此，我们的责任不包括对讨论论文的时间安排的强制性规定
    —— 在考虑所有其他范围内的工作之后，我们可以选择在委员会计划之外考虑文件。但是，委员会从未做到这一点，因此我们发布的标准包括一系列无关的功能和错误修复。我希望看到委员会章程要求我们制定在给定发布周期中要实现的目标路线图，然后坚持这个路线图。我不介意在周期内考虑偶尔的超范围工作，但这不应以牺牲范围内工作为代价。我认为有一个路线图也将有助于委员会、实施者和用户之间的关系，因为它为每个人提供了更多时间来规划未来几年的事务。
- en: 'The #1 thing I want to see on that roadmap is a goal to address the memory
    safety issues that plague C. We don’t have to fix everything at once, but we do
    need to start making inroads into solving the problem.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我在路线图上最想看到的第一件事情是解决困扰 C 的内存安全问题的目标。我们不必一次性解决所有问题，但我们确实需要开始着手解决这个问题。
- en: Closing Thoughts
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结思考
- en: Regardless of whether others on the committee agree with my current thinking,
    I think it’s a great thing that committee is reflecting on our charter. I think
    C is at an inflection point in many ways the should spend time carefully considering
    what we want the future of the language to look like. I don’t think C or C++ will
    be irrelevant any time soon, but I do worry they’re heading that direction and
    will continue to do so without course correction. No programming language is “too
    big to fail”, not even something as venerable and ubiquitous as C.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 不管委员会中的其他人是否同意我的当前想法，我认为委员会反思我们的章程是一件好事。我认为 C 从许多方面来看都处于一个拐点，他们应该花时间仔细考虑我们希望编程语言的未来是什么样子。我不认为
    C 或 C++ 近期会变得无关紧要，但我担心它们正在朝着这个方向发展，并将在没有调整的情况下继续这样做。没有哪种编程语言是“太大而无法失败”的，即使是像 C
    这样古老而普遍的语言也不例外。
