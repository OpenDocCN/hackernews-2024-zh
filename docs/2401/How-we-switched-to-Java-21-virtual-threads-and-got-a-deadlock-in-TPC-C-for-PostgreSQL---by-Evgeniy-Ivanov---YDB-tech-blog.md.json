["```\nString userName = get_username_from_db(userId);\nSystem.out.printf(\"Hello, %s!\", userName);\n```", "```\nCompletableFuture<String> userNameFuture = get_username_from_db(userId);\n\n// Note, that this is kind of callback, it's not executed \"right here\",\n// even more, at some point it will be executed in parallel with your thread.\n// In real life scenarios, you will have to use mutual exclusion.\nuserNameFuture.thenAccept(userName -> {\n    System.out.println(\"Hello, %s!\", userName);\n});\nexecute_something_else();\nuserNameFuture.get(); // wait for the completion of your request\n```", "```\nif (useRealThreads) {\n    thread = new Thread(worker);\n} else {\n    thread = Thread.ofVirtual().unstarted(worker);\n}\n```", "```\n#7284 \"TPCCWorker<7185>\" virtual\n      java.base/java.lang.Object.wait0(Native Method)\n      java.base/java.lang.Object.wait(Object.java:366)\n      com.mchange.v2.resourcepool.BasicResourcePool.awaitAvailable(BasicResourcePool.java:1503)\n      com.mchange.v2.resourcepool.BasicResourcePool.prelimCheckoutResource(BasicResourcePool.java:644)\n      com.mchange.v2.resourcepool.BasicResourcePool.checkoutResource(BasicResourcePool.java:554)\n      com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.checkoutAndMarkConnectionInUse(C3P0PooledConnectionPool.java:758)\n      com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.checkoutPooledConnection(C3P0PooledConnectionPool.java:685)\n      com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getConnection(AbstractPoolBackedDataSource.java:140)\n      com.oltpbenchmark.api.BenchmarkModule.makeConnection(BenchmarkModule.java:108)\n      com.oltpbenchmark.api.Worker.doWork(Worker.java:428)\n      com.oltpbenchmark.api.Worker.run(Worker.java:304)\n      java.base/java.lang.VirtualThread.run(VirtualThread.java:309)\n```", "```\n\"ForkJoinPool-1-worker-254\" #50326 [32859] daemon prio=5 os_prio=0 cpu=12.39ms elapsed=489.99s tid=0x00007f3810003140  [0x00007f37abafe000]\n   Carrying virtual thread #7284\n        at jdk.internal.vm.Continuation.run(java.base@21.0.1/Continuation.java:251)\n        at java.lang.VirtualThread.runContinuation(java.base@21.0.1/VirtualThread.java:221)\n        at java.lang.VirtualThread$$Lambda/0x00007f3c2424e410.run(java.base@21.0.1/Unknown Source)\n        at java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(java.base@21.0.1/ForkJoinTask.java:1423)\n        at java.util.concurrent.ForkJoinTask.doExec(java.base@21.0.1/ForkJoinTask.java:387)\n        at java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(java.base@21.0.1/ForkJoinPool.java:1312)\n        at java.util.concurrent.ForkJoinPool.scan(java.base@21.0.1/ForkJoinPool.java:1843)\n        at java.util.concurrent.ForkJoinPool.runWorker(java.base@21.0.1/ForkJoinPool.java:1808)\n        at java.util.concurrent.ForkJoinWorkerThread.run(java.base@21.0.1/ForkJoinWorkerThread.java:188)\n```", "```\njava.base/java.lang.VirtualThread.park(VirtualThread.java:582)\n      java.base/java.lang.System$2.parkVirtualThread(System.java:2639)\n      java.base/jdk.internal.misc.VirtualThreads.park(VirtualThreads.java:54)\n      java.base/java.util.concurrent.locks.LockSupport.park(LockSupport.java:369)\n      java.base/sun.nio.ch.Poller.pollIndirect(Poller.java:139)\n      java.base/sun.nio.ch.Poller.poll(Poller.java:102)\n      java.base/sun.nio.ch.Poller.poll(Poller.java:87)\n      java.base/sun.nio.ch.NioSocketImpl.park(NioSocketImpl.java:175)\n      java.base/sun.nio.ch.NioSocketImpl.park(NioSocketImpl.java:201)\n      java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:309)\n      java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:346)\n      java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:796)\n      java.base/java.net.Socket$SocketInputStream.read(Socket.java:1099)\n      java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:489)\n      java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:483)\n      java.base/sun.security.ssl.SSLSocketInputRecord.bytesInCompletePacket(SSLSocketInputRecord.java:70)\n      java.base/sun.security.ssl.SSLSocketImpl.readApplicationRecord(SSLSocketImpl.java:1461)\n      java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1066)\n      org.postgresql.core.VisibleBufferedInputStream.readMore(VisibleBufferedInputStream.java:161)\n      org.postgresql.core.VisibleBufferedInputStream.ensureBytes(VisibleBufferedInputStream.java:128)\n      org.postgresql.core.VisibleBufferedInputStream.ensureBytes(VisibleBufferedInputStream.java:113)\n      org.postgresql.core.VisibleBufferedInputStream.read(VisibleBufferedInputStream.java:73)\n      org.postgresql.core.PGStream.receiveChar(PGStream.java:465)\n      org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2155)\n      org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:574)\n      org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:896)\n      org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:919)\n      org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1685)\n      com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeBatch(NewProxyPreparedStatement.java:2544)\n      com.oltpbenchmark.benchmarks.tpcc.procedures.NewOrder.newOrderTransaction(NewOrder.java:214)\n      com.oltpbenchmark.benchmarks.tpcc.procedures.NewOrder.run(NewOrder.java:147)\n      com.oltpbenchmark.benchmarks.tpcc.TPCCWorker.executeWork(TPCCWorker.java:66)\n      com.oltpbenchmark.api.Worker.doWork(Worker.java:442)\n      com.oltpbenchmark.api.Worker.run(Worker.java:304)\n      java.base/java.lang.VirtualThread.run(VirtualThread.java:309)\n```"]