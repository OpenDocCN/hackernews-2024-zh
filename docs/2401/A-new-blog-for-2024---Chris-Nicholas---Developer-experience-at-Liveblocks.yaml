- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:26:38'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:26:38
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: A new blog for 2024 | Chris Nicholas | Developer experience at Liveblocks
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2024 年的新博客 | 克里斯·尼古拉斯 | Liveblocks 的开发者体验
- en: 来源：[https://chrisnicholas.dev/blog/a-new-blog-for-2024](https://chrisnicholas.dev/blog/a-new-blog-for-2024)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://chrisnicholas.dev/blog/a-new-blog-for-2024](https://chrisnicholas.dev/blog/a-new-blog-for-2024)
- en: It’s been a *long time* since I’ve published a blog post, two whole years. Part
    of the reason is that it took too much effort to create posts for my previous
    blog. I needed better DX. A few nights ago, feeling inspired after reading articles
    by [Pedro Duarte](https://ped.ro/writing/website-refresh-2023), [Rauno Freiberg](https://rauno.me/craft/vercel),
    and [Lee Robinson](https://leerob.io/blog/2023), I decided it was time to start
    over.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经很长时间没有发布博客文章了，整整两年。部分原因是之前的博客花费了太多精力来创建帖子。我需要更好的 DX。几个晚上前，在阅读了[Pedro Duarte](https://ped.ro/writing/website-refresh-2023)、[Rauno
    Freiberg](https://rauno.me/craft/vercel)和[Lee Robinson](https://leerob.io/blog/2023)的文章后，我感到很有启发，我决定重新开始。
- en: So here’s the score—I want a blog with great DX that makes it as easy as possible
    to create posts. I also want to go *minimal*, so I can get away with a single
    design on mobile and desktop. No faffing around; I want this blog built and published
    in 5 days! And lastly, I’m looking to try some new libraries and technologies.
    Right, let’s dive in.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是我的目标——我想要一个具有极佳 DX 的博客，尽可能地让创建帖子变得简单。我还想要*极简*，这样我就可以在移动端和桌面端使用单一设计。不要拖拖拉拉；我希望这个博客在
    5 天内建立并发布！最后，我想尝试一些新的库和技术。好的，让我们开始吧。
- en: At work I spend most of my time [writing and programming](/work), so dipping
    my toes into design was a nice change. Here’s a couple of details.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作中，我大部分时间都在[写作和编程](/work)，所以尝试设计是一个很好的改变。这里有一些细节。
- en: For the header, I was aiming for an animated background that combined an *aurora*,
    *light beams*, and a *rainbow*. I’m quite pleased with the result, and it's actually
    pure CSS—try changing `hue-rotate` below to emulate the animation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于头部，我的目标是创建一个动画背景，结合了*极光*、*光束*和*彩虹*。我对结果非常满意，而且这实际上是纯 CSS——尝试在下面更改`hue-rotate`以模拟动画。
- en: An interactive demo showing the header background
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 显示头部背景的交互式演示
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All text that overlays the aurora is saturated with its underlying colours—a
    tiny touch that really unifies the design. You can do this by simply applying
    a `luminosity` [blend mode](https://www.ctnicholas.dev/articles/which-blend-mode)
    to the text.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所有悬停在极光上的文字都充满了其底层颜色——这是一个微小的触摸，真正统一了设计。您只需简单地将`luminosity` [混合模式](https://www.ctnicholas.dev/articles/which-blend-mode)应用于文字即可实现这一点。
- en: Demo of luminosity text effect over an aurora.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 光度文本效果在极光上的演示。
- en: I’m applying a tiny amount of film grain to the `body`. To me, this makes the
    page feel like one consistent piece; as you scroll down, the noise sticks to the
    content, somewhat similar to seeing texture on paper.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我给`body`应用了一点点胶片颗粒。对我来说，这使页面感觉像一个一致的整体；当你向下滚动时，噪音会附着在内容上，有点像在纸上看到纹理。
- en: An interactive demo allowing you to change the noise level on the page.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个交互式演示，允许您在页面上更改噪声级别。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I wouldn’t recommend noise for most websites, and it’s very easy to overdo it,
    but I enjoy the subtle filmic effect on my blog.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我不建议大多数网站使用噪声，而且很容易过度使用，但我喜欢我的博客上微妙的电影效果。
- en: I’m using [Catalyst](https://tailwindcss.com/blog/introducing-catalyst), a new
    UI kit by the Tailwind team. It’s clear that a tonne of thought has gone into
    making these components accessible, and pixel perfect, on both light and dark
    modes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用[Catalyst](https://tailwindcss.com/blog/introducing-catalyst)，这是 Tailwind
    团队的一个新的 UI 工具包。很明显，这些组件的制作考虑到了使其在浅色和深色模式下都完美无缺地可访问和像素完美。
- en: Tailwind UI Catalyst demo
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Tailwind UI Catalyst 演示
- en: Catalyst provides you with a set of files to download into your project, and
    you can export your components from these. [Heroicons](https://heroicons.com)
    has also been updated with new icons that fit neatly into Catalyst.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Catalyst 为您提供一组文件，可下载到您的项目中，并且您可以从这些文件中导出您的组件。[Heroicons](https://heroicons.com)
    也已更新，提供了适合 Catalyst 的新图标。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you’d like to customise your components further, you can edit the downloaded
    files directly. Each file contains [Headless UI](https://headlessui.com/) components
    with lists of carefully annotated classes dispersed throughout.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要进一步自定义您的组件，您可以直接编辑下载的文件。每个文件都包含[Headless UI](https://headlessui.com/)组件，其中包含精心注释的类列表。
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Catalyst is still in alpha, so be warned, breaking changes will most likely
    be ahead!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Catalyst 仍处于 alpha 阶段，所以请注意，可能会出现重大变更！
- en: While we’re talking about Tailwind, I’ve used a new library called [TWC](https://react-twc.vercel.app/)
    to save time building reusable components. It takes boilerplate code you've written
    countless times (forwarding refs, adding `clsx`, etc.), and makes it a one-liner.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论Tailwind时，我使用了一个名为[TWC](https://react-twc.vercel.app/)的新库来节省构建可重用组件的时间。它接管了你已经写了无数次的样板代码（转发引用、添加`clsx`等），并将其变成了一行代码。
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I’ve used [Next.js](https://nextjs.org/) to build my new blog, and virtually
    every component is a server component. It feels pretty snappy, I like it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用[Next.js](https://nextjs.org/)构建了我的新博客，几乎每个组件都是服务器组件。感觉相当迅速，我喜欢。
- en: Layout files
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 布局文件
- en: Did you notice that the header animation continues running when you change pages?
    That’s because it’s placed in a Next.js [layout file](https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#layout-pattern),
    meaning it doesn’t get refreshed on route changes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有注意到，在切换页面时标题动画会继续运行？这是因为它放在了一个Next.js[布局文件](https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#layout-pattern)中，这意味着在路由更改时不会刷新。
- en: Header animation when changing pages.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改页面时的标题动画。
- en: </blog/a-new-blog-for-2024/header-animation.mp4>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: </blog/a-new-blog-for-2024/header-animation.mp4>
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: OG image generation
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: OG图片生成
- en: A major pain point on my previous blog was manually creating each social media
    image. Nowadays, you can [generate OpenGraph images dynamically](https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image)
    in Next.js, and it’s very little effort to get started.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我以前博客的一个主要痛点是手动创建每个社交媒体图片。如今，你可以在Next.js中[动态生成OpenGraph图片](https://nextjs.org/docs/app/api-reference/file-conventions/metadata/opengraph-image)，而且很容易上手。
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: My blog uses `.mdx` files with custom React components interspersed throughout.
    I’d heard a lot of good things about [Contentlayer](https://contentlayer.dev/),
    so I gave it a try—it’s been a breeze to use, and has really sped up my development
    time. It’s so easy to make changes to your schema, and the type-safe setup is
    excellent.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我的博客使用`.mdx`文件，并在其中穿插了自定义React组件。我听说[Contentlayer](https://contentlayer.dev/)有很多好评，所以我试了试——使用起来非常轻松，而且真的加快了我的开发速度。更改模式非常容易，类型安全的设置也很棒。
- en: How it works
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 工作原理
- en: You can generate a `Post` schema, for example with a `title` and `date`, and
    then ask it to load files from the `/posts` folder.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以生成一个`Post`模式，例如包含`title`和`date`，然后要求它从`/posts`文件夹加载文件。
- en: contentlayer.config.ts
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: contentlayer.config.ts
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Next, create your `.mdx` file in `/posts`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`/posts`中创建你的`.mdx`文件。
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then simply import your posts, with full type-safety, and render your `mdx`
    content.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后简单地导入你的帖子，具有完全的类型安全性，并呈现你的`mdx`内容。
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: I’ve archived all the posts from my previous blog, *ctnicholas.dev*, as it’d
    take too long to transfer them to the new site, though they’re all still [available
    to read](/blog).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经归档了以前博客的所有帖子，*ctnicholas.dev*，因为将它们转移到新站点需要太长时间，尽管它们仍然[可以阅读](/blog)。
- en: 'My blog’s a work in progress, and there''s so much more I’d like to add, for
    example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我的博客还在不断完善中，还有很多我想要添加的功能，例如：
- en: But it’s all too easy to get stuck in the “just one more feature…” loop, when
    the most important thing is to get shipping! So here it is—thanks for reading.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但是很容易陷入“再加一个功能…”的循环中，而最重要的是要开始运送！所以这就是——谢谢你的阅读。
