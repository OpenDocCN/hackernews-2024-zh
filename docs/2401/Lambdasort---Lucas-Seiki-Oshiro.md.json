["```\n # anonymous function (lambda). This is equivaltent to sqrt: lambda n: n ** 0.5\n\n# function that takes another function as parameter def apply_func(func, parameter):\n    return func(parameter)\n\n# function that returns another function. in this case, this is a mutiplier factory def multiplier_factory(n):\n    return lambda x: n * x \n```", "```\nt = lambda a: lambda b: a\nf = lambda a: lambda b: b\nx = (lambda a: lambda b: a(b)(f))(t)(f) \n```", "```\ndef car(A):\n    return A[0]\n\ndef cdr(A):\n    return A[1:]\n\ndef cons(A, x):\n    return [x] + A\n\ndef concat(A, B):\n    return A + B\n\ndef quicksort(A):\n    if len(A) <= 1: return A\n    L, R = partition(A)\n    p = car(R)\n    L = quicksort(L)\n    R = quicksort(cdr(R))\n    return concat(L, concat([p], R))\n\ndef partition(A):\n    p = car(A)\n\n    L, R = [], []\n\n    for x in cdr(A):\n        if x < p:\n            L, R = cons(x, L), R\n        else:\n            L, R = L, cons(x, R)\n\n    L, R = L, cons(p, R)\n\n    return L, R \n```", "```\n#boolean constants LAMBDA_TRUE = lambda a: lambda b: a\nLAMBDA_FALSE = lambda a: lambda b: b\n\n#boolean opearations LAMBDA_OR = lambda a: lambda b: a(LAMBDA_TRUE)(b)\nLAMBDA_AND = lambda a: lambda b: a(b)(LAMBDA_FALSE)\nLAMBDA_NOT = lambda a: a(LAMBDA_FALSE)(LAMBDA_TRUE) \n```", "```\nLAMBDA_IF = lambda c: lambda t: lambda e: c(t)(e) \n```", "```\nuse_5 = LAMBDA_TRUE\ndont_use_5 = LAMBDA_FALSE\n\na = LAMBDA_IF(use_5)(5)(0) # a = 5 b = LAMBDA_IF(dont_use_5)(5)(0) # a = 0 \n```", "```\n#boolean conversion def l2b(l):\n    return l(True)(False)\n\ndef b2l(b):\n    return LAMBDA_TRUE if b else LAMBDA_FALSE \n```", "```\nLAMBDA_ZERO = lambda p: lambda x: x\nLAMBDA_ONE = lambda p: lambda x: p(x)\nLAMBDA_TWO = lambda p: lambda x: p(p(x))\n# etc \n```", "```\nLAMBDA_INCREMENT = lambda l: lambda p: lambda x: p(l(p)(x)) \n```", "```\nLAMBDA_DECREMENT = lambda n: lambda f: lambda x: n(lambda g: lambda h: h(g(f)))(lambda y: x)(lambda y: y) \n```", "```\nLAMBDA_ADD = lambda m: lambda n: n(LAMBDA_INCREMENT)(m)\nLAMBDA_SUB = lambda m: lambda n: n(LAMBDA_DECREMENT)(m) \n```", "```\nLAMBDA_EQZ = lambda n: n(lambda x: LAMBDA_FALSE)(LAMBDA_TRUE) \n```", "```\nLAMBDA_LEQ = lambda m: lambda n: LAMBDA_EQZ(LAMBDA_SUB(m)(n))\nLAMBDA_EQ = lambda m: lambda n: LAMBDA_AND(LAMBDA_LEQ(m)(n))(LAMBDA_LEQ(n)(m))\nLAMBDA_LESS = lambda m: lambda n: LAMBDA_AND(LAMBDA_LEQ(m)(n))(LAMBDA_NOT(LAMBDA_EQ(m)(n))) \n```", "```\ndef l2i(l):\n    return l(lambda x: x + 1)(0) \n```", "```\ndef i2l(i):\n    l = LAMBDA_ZERO\n    for j in range(0, i):\n        l = LAMBDA_INCREMENT(l)\n\n    return l \n```", "```\ndef llist2pylist(L):\n    return list(map(l2i, L))\n\ndef pylist2llist(L):\n    return list(map(i2l, L)) \n```", "```\ndef quicksort(A):\n    if len(A) <= 1: return A\n    L, R = partition_wrapper(A)\n    p = car(R)\n    L = quicksort(L)\n    R = quicksort(cdr(R))\n    return concat(L, concat([p], R))\n\ndef partition_wrapper(A):\n    B = pylist2llist(A)\n    L, R = partition(B)\n    return llist2pylist(L), llist2pylist(R)\n\ndef partition(A):\n    p = car(A)\n\n    L, R = [], []\n\n    for x in cdr(A):\n        if l2b(LAMBDA_LESS(x)(p)):\n            L, R = cons(x, L), R\n        else:\n            L, R = L, cons(x, R)\n    L, R = L, cons(p, R)\n\n    return L, R \n```", "```\nLAMBDA_CONS = lambda a: lambda b: lambda l: l(a)(b)\nLAMBDA_CAR = lambda p: p(lambda a: lambda b: a)\nLAMBDA_CDR = lambda p: p(lambda a: lambda b: b) \n```", "```\nl = LAMBDA_CONS(15)(20)\na, b = (x.cell_contents for x in l.__closure__) # a = 15, b = 20 \n```", "```\nLAMBDA_EMPTY = LAMBDA_FALSE \n```", "```\nLAMBDA_CONS(1)(LAMBDA_CONS(2)(LAMBDA_CONS(3)(LAMBDA_FALSE))) \n```", "```\n(1, (2, (3, LAMBDA_EMPTY))) \n```", "```\nLAMBDA_ISEMPTY = lambda l: l(lambda h: lambda t: lambda d: LAMBDA_FALSE)(LAMBDA_TRUE) \n```", "```\ndef l2p(l):\n    return [LAMBDA_CAR(l), LAMBDA_CDR(l)]\n\ndef p2l(p):\n    return LAMBDA_CONS(p[0])(p[1]) \n```", "```\ndef ll2pl(l):\n    if l2b(LAMBDA_ISEMPTY(l)): return []\n    return [LAMBDA_CAR(l)] + ll2pl(LAMBDA_CDR(l))\n\ndef pl2ll(l):\n    if len(l) == 0: return LAMBDA_EMPTY\n    return LAMBDA_CONS(l[0])(pl2ll(l[1:])) \n```", "```\n # before:\n    return L, R\n\n    # after:\n    return LAMBDA_CONS(L)(R) \n```", "```\ndef partition(A):\n    p = car(A)\n\n    L, R = [], []\n\n    for x in cdr(A):\n        if l2b(LAMBDA_LESS(x)(p)):\n            L, R = cons(x, L), R\n        else:\n            L, R = L, cons(x, R)\n    L, R = L, cons(p, R)\n\n    return L, R \n```", "```\ndef partition(A):\n    p = LAMBDA_CAR(A)\n    L, R = LAMBDA_EMPTY, LAMBDA_EMPTY\n\n    for x in lliterator(LAMBDA_CDR(A)):\n        if l2b(LAMBDA_LESS(x)(p)):\n            L, R = LAMBDA_CONS(x)(L), R\n        else:\n            L, R = L, LAMBDA_CONS(x)(R)\n    L, R = L, LAMBDA_CONS(p)(R)\n\n    return LAMBDA_CONS(L)(R) \n```", "```\ndef lliterator(l):\n    while not l2b(LAMBDA_ISEMPTY(l)):\n        yield LAMBDA_CAR(l)\n        l = LAMBDA_CDR(l) \n```", "```\ndef LAMBDA_CONCAT(l1):\n    def _LAMBDA_CONCAT(l2):\n        if l2b(LAMBDA_ISEMPTY(LAMBDA_CDR(l1))):\n            return LAMBDA_CONS(LAMBDA_CAR(l1))(l2)\n        else:\n            return LAMBDA_CONS(LAMBDA_CAR(l1))(LAMBDA_CONCAT(LAMBDA_CDR(l1))(l2))\n    return _LAMBDA_CONCAT \n```", "```\ndef quicksort(A):\n    # len(A) <= 1\n    if l2b(LAMBDA_ISEMPTY(A)): return A\n    if l2b(LAMBDA_ISEMPTY(LAMBDA_CDR(A))): return A\n\n    L, R = partition(A)\n    p = LAMBDA_CAR(R)\n\n    L = quicksort(L)\n    R = quicksort(LAMBDA_CDR(R))\n\n    return LAMBDA_IF(LAMBDA_ISEMPTY(L))(LAMBDA_CONS(p)(R))(LAMBDA_CONCAT(L)(LAMBDA_CONS(p)(R))) \n```", "```\np = LAMBDA_CAR(A)\nL, R = LAMBDA_EMPTY, LAMBDA_EMPTY\n\nfor x in lliterator(LAMBDA_CDR(A)):\n    if l2b(LAMBDA_LESS(x)(p)):\n        L, R = LAMBDA_CONS(x)(L), R\n    else:\n        L, R = L, LAMBDA_CONS(x)(R) \n```", "```\np = LAMBDA_CAR(A)\nL, R = LAMBDA_EMPTY, LAMBDA_EMPTY\n\nS = LAMBDA_CDR(A)\nwhile True:\n    if l2b(LAMBDA_ISEMPTY(S)): break\n    x = LAMBDA_CAR(S)\n    if l2b(LAMBDA_LESS(x)(p)):\n        L, R = LAMBDA_CONS(x)(L), R\n    else:\n        L, R = L, LAMBDA_CONS(x)(R)\n    S = LAMBDA_CDR(S) \n```", "```\np = LAMBDA_CAR(A)\nL, R = LAMBDA_EMPTY, LAMBDA_EMPTY\n\nS = LAMBDA_CDR(A)\n\ndef _partition(S, L, R):\n    if l2b(LAMBDA_ISEMPTY(S)): return L, R\n    x = LAMBDA_CAR(S)\n    if l2b(LAMBDA_LESS(x)(p)):\n        nL, nR = LAMBDA_CONS(x)(L), R\n    else:\n        nL, nR = L, LAMBDA_CONS(x)(R)\n    S = LAMBDA_CDR(S)\n    return _partition(S, nL, nR)\n\nnL, nR = _partition(S, L, R) \n```", "```\np = LAMBDA_CAR(A)\nL, R = LAMBDA_EMPTY, LAMBDA_EMPTY\n\nS = LAMBDA_CDR(A)\n\ndef _partition(S, L, R):\n    if l2b(LAMBDA_ISEMPTY(S)): return LAMBDA_CONS(L)(R)\n    x = LAMBDA_CAR(S)\n    if l2b(LAMBDA_LESS(x)(p)):\n        nL, nR = LAMBDA_CONS(x)(L), R\n    else:\n        nL, nR = L, LAMBDA_CONS(x)(R)\n    S = LAMBDA_CDR(S)\n    return _partition(S, L, R)\n\nLR = _partition(S, L, R)\nnL, nR = LAMBDA_CAR(LR), LAMBDA_CDR(LR) \n```", "```\nval x = 2.let { a -> \n   3.let { b ->\n      a + b * a\n   }\n} \n```", "```\nx = let a = 2\n        b = 3\n    in a + b * a \n```", "```\n(setv  x  (let  [  a  2  b  3  ]  (+  a  (*  b  a))  )  ) \n```", "```\ndef _f(a, b):\n   return a + b * a\nx = _f(2, 3)\n\n# or using lambda and currying: \nx = (lambda a: lambda b: a + b * a)(2)(3) \n```", "```\ndef _partition(S, L, R):\n    if l2b(LAMBDA_ISEMPTY(S)): return LAMBDA_CONS(L)(R)\n    x = LAMBDA_CAR(S)\n    if l2b(LAMBDA_LESS(x)(p)):\n        nL, nR = LAMBDA_CONS(x)(L), R\n    else:\n        nL, nR = L, LAMBDA_CONS(x)(R)\n    S = LAMBDA_CDR(S)\n    return _partition(S, L, R) \n```", "```\ndef _partition(S, L, R):\n    if l2b(LAMBDA_ISEMPTY(S)): return LAMBDA_CONS(L)(R)\n    x = LAMBDA_CAR(S)\n    nL, nR = (LAMBDA_CONS(x)(L), R) if l2b(LAMBDA_LESS(x)(p)) else (L, LAMBDA_CONS(x)(R))\n\n    S = LAMBDA_CDR(S)\n    return _partition(S, nL, nR) \n```", "```\ndef _partition(S, L, R):\n    if l2b(LAMBDA_ISEMPTY(S)): return LAMBDA_CONS(L)(R)\n\n    def _partition2(x):\n        return (LAMBDA_CONS(x)(L), R) if l2b(LAMBDA_LESS(x)(p)) else (L, LAMBDA_CONS(x)(R))\n\n    nL, nR = _partition2(LAMBDA_CAR(S))\n\n    S = LAMBDA_CDR(S)\n    return _partition(S, nL, nR) \n```", "```\ndef _partition(S, L, R):\n    if l2b(LAMBDA_ISEMPTY(S)): return LAMBDA_CONS(L)(R)\n\n    def _partition2(x):\n        return LAMBDA_CONS(LAMBDA_CONS(x)(L))(R) if l2b(LAMBDA_LESS(x)(p)) else LAMBDA_CONS(L)(LAMBDA_CONS(x)(R))\n\n    LR = _partition2(LAMBDA_CAR(S))\n    nL, nR = LAMBDA_CAR(LR), LAMBDA_CDR(LR)\n\n    return _partition(LAMBDA_CDR(S), nL, nR) \n```", "```\ndef quicksort(A):\n    if l2b(LAMBDA_ISEMPTY(A)): return A\n    if l2b(LAMBDA_ISEMPTY(LAMBDA_CDR(A))): return A\n\n    def _quicksort(A, LR):\n        return LAMBDA_IF(LAMBDA_ISEMPTY(quicksort(LAMBDA_CAR(LR))))(LAMBDA_CONS(LAMBDA_CAR(LAMBDA_CDR(LR)))(quicksort(LAMBDA_CDR(LAMBDA_CDR(LR)))))(LAMBDA_CONCAT(quicksort(LAMBDA_CAR(LR)))(LAMBDA_CONS(LAMBDA_CAR(LAMBDA_CDR(LR)))(quicksort(LAMBDA_CDR(LAMBDA_CDR(LR))))))\n\n    return _quicksort(A, partition(A))\n\ndef partition(A):\n    def _partition(S, L, R, p):\n        if l2b(LAMBDA_ISEMPTY(S)): return LAMBDA_CONS(L)(R)\n        def _partition2(x, L, R, p):\n            if l2b(LAMBDA_LESS(x)(p)): return LAMBDA_CONS(LAMBDA_CONS(x)(L))(R)\n            else: return LAMBDA_CONS(L)(LAMBDA_CONS(x)(R))\n\n        def _partition3(S, LR, p):\n            return _partition(LAMBDA_CDR(S), LAMBDA_CAR(LR), LAMBDA_CDR(LR), p)\n\n        return _partition3(S, _partition2(LAMBDA_CAR(S), L, R, p), p)\n\n    def _partition4(LR):\n        return LAMBDA_CONS(LAMBDA_CAR(LR))(LAMBDA_CONS(LAMBDA_CAR(A))(LAMBDA_CDR(LR)))\n\n    return _partition4(_partition(LAMBDA_CDR(A), LAMBDA_EMPTY, LAMBDA_EMPTY, LAMBDA_CAR(A))) \n```", "```\ndef quicksort(A):\n    _quicksort = lambda A: lambda LR: LAMBDA_CONCAT(quicksort(LAMBDA_CAR(LR)))(LAMBDA_CONS(LAMBDA_CAR(LAMBDA_CDR(LR)))(quicksort(LAMBDA_CDR(LAMBDA_CDR(LR)))))\n\n    _quicksort2 = lambda A: LAMBDA_IF(LAMBDA_ISEMPTY(A))(lambda A: A)(lambda A: LAMBDA_IF(LAMBDA_ISEMPTY(LAMBDA_CDR(A)))(A)(_quicksort(A)(partition(A))))\n\n    return _quicksort2(A)(A)\n\ndef partition(A):\n    _partition2 = lambda x: lambda L: lambda R: lambda p: LAMBDA_IF(LAMBDA_LESS(x)(p))(LAMBDA_CONS(LAMBDA_CONS(x)(L))(R))(LAMBDA_CONS(L)(LAMBDA_CONS(x)(R)))\n\n    _partition3 = lambda S: lambda LR: lambda p: _partition(LAMBDA_CDR(S))(LAMBDA_CAR(LR))(LAMBDA_CDR(LR))(p)\n\n    _partition = (lambda S: LAMBDA_IF(LAMBDA_ISEMPTY(S))(lambda L: lambda R: lambda p: LAMBDA_CONS(L)(R))(lambda L: lambda R: lambda p: _partition3(S)(_partition2(LAMBDA_CAR(S))(L)(R)(p))(p)))\n\n    _partition4 = (lambda A: lambda LR: LAMBDA_CONS(LAMBDA_CAR(LR))(LAMBDA_CONS(LAMBDA_CAR(A))(LAMBDA_CDR(LR))))(A)\n\n    return _partition4(_partition(LAMBDA_CDR(A))(LAMBDA_EMPTY)(LAMBDA_EMPTY)(LAMBDA_CAR(A))) \n```", "```\n_quicksort = lambda A: lambda LR: LAMBDA_CONCAT(quicksort(LAMBDA_CAR(LR)))(LAMBDA_CONS(LAMBDA_CAR(LAMBDA_CDR(LR)))(quicksort(LAMBDA_CDR(LAMBDA_CDR(LR)))))\n_quicksort2 = lambda A: LAMBDA_IF(LAMBDA_ISEMPTY(A))(lambda A: A)(lambda A: LAMBDA_IF(LAMBDA_ISEMPTY(LAMBDA_CDR(A)))(A)(_quicksort(A)(partition(A))))\nquicksort = lambda A: _quicksort2(A)(A)\n_partition2 = lambda x: lambda L: lambda R: lambda p: LAMBDA_IF(LAMBDA_LESS(x)(p))(LAMBDA_CONS(LAMBDA_CONS(x)(L))(R))(LAMBDA_CONS(L)(LAMBDA_CONS(x)(R)))\n_partition3 = lambda S: lambda LR: lambda p: _partition(LAMBDA_CDR(S))(LAMBDA_CAR(LR))(LAMBDA_CDR(LR))(p)\n_partition = (lambda S: LAMBDA_IF(LAMBDA_ISEMPTY(S))(lambda L: lambda R: lambda p: LAMBDA_CONS(L)(R))(lambda L: lambda R: lambda p: _partition3(S)(_partition2(LAMBDA_CAR(S))(L)(R)(p))(p)))\n_partition4 = (lambda A: lambda LR: LAMBDA_CONS(LAMBDA_CAR(LR))(LAMBDA_CONS(LAMBDA_CAR(A))(LAMBDA_CDR(LR))))\npartition = lambda A:_partition4(A)(_partition(LAMBDA_CDR(A))(LAMBDA_EMPTY)(LAMBDA_EMPTY)(LAMBDA_CAR(A))) \n```", "```\ndef fac(n):\n   return 1 if n == 0 else n * fac(n-1)\n\n# using lambda: fac = lambda n: 1 if n == 0 else n * fac(n-1) \n```", "```\nfac = (lambda f: f(f))(lambda f: lambda n: 1 if n == 0 else n * f(f)(n-1))\n\n# we even don't need to name fac. This expression calculates 5! = 120 recursively: (lambda f: f(f))(lambda f: lambda n: 1 if n == 0 else n * f(f)(n-1))(5) \n```", "```\n_quicksort2 = lambda A: LAMBDA_IF(LAMBDA_ISEMPTY(A))(lambda A: A)(lambda A: LAMBDA_IF(LAMBDA_ISEMPTY(LAMBDA_CDR(A)))(A)(_quicksort(A)(partition(A))))\nquicksort = lambda A: _quicksort2(A)(A) \n```", "```\n_quicksort2 = lambda r: lambda A: LAMBDA_IF(LAMBDA_ISEMPTY(A))(lambda A: A)(lambda A: LAMBDA_IF(LAMBDA_ISEMPTY(LAMBDA_CDR(A)))(A)(_quicksort(r)(A)(partition(A))))\nquicksort = (lambda r: r(r)) lambda A: _quicksort2(r)(A)(A) \n```", "```\ndef quicksort_wrapper(A):\n    church = pl2ll([i2l(x) for x in A])\n    sorted_church = quicksort(church)\n    return [l2i(x) for x in ll2pl(sorted_church)] \n```", "```\n>>> from lambdasort import quicksort_wrapper\n>>> x = [22, 33, 11, 55, 99, 11, 33, 77, 44]\n>>> quicksort_wrapper(x)\n[11, 11, 22, 33, 33, 44, 55, 77, 99] \n```"]