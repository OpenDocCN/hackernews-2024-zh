- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:23:40'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:23:40
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: PyPy has moved to Git, GitHub | PyPy
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyPy 已经转移到了 Git、GitHub | PyPy
- en: 来源：[https://www.pypy.org/posts/2023/12/pypy-moved-to-git-github.html](https://www.pypy.org/posts/2023/12/pypy-moved-to-git-github.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.pypy.org/posts/2023/12/pypy-moved-to-git-github.html](https://www.pypy.org/posts/2023/12/pypy-moved-to-git-github.html)
- en: PyPy has moved its canonical repo and issue tracker from [https://foss.heptapod.net/pypy/pypy](https://foss.heptapod.net/pypy/pypy)
    to [https://github.com/pypy/pypy](https://github.com/pypy/pypy). Obviously, this
    means development will now be tracked in Git rather than Mercurial.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: PyPy 已将其主要仓库和问题跟踪器从 [https://foss.heptapod.net/pypy/pypy](https://foss.heptapod.net/pypy/pypy)
    迁移到 [https://github.com/pypy/pypy](https://github.com/pypy/pypy)。显然，这意味着开发现在将在
    Git 而不是 Mercurial 中跟踪。
- en: Motivation
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动机
- en: We still feel Mercurial is a better version control system. The named branch
    model and user interface are superior. But
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然认为 Mercurial 是一个更好的版本控制系统。命名分支模型和用户界面都更好。但是
- en: foss.heptapod.net is not well indexed in google/bing/duckduckgo search, so people
    find it harder to search for issues in the project.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: foss.heptapod.net 在 google/bing/duckduckgo 搜索中的索引不好，所以人们发现在项目中搜索问题更困难。
- en: Since Heptapod has tightened its spam control, we get reports that users create
    issues only to have them flagged as spam.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自从 Heptapod 加强了垃圾邮件控制以来，我们收到的报告说用户只是为了发现它们被标记为垃圾邮件而创建问题。
- en: Open Source has become synonymous with GitHub, and we are too small to change
    that.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源已经成为 GitHub 的代名词，而我们太小了以至于无法改变这一点。
- en: Much of the current development comes as a reaction to fixing issues. Tracking
    interlocking issues is easier if all the code is on the same platform.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前的大部分开发都是为了解决问题而进行的。如果所有代码都在同一个平台上，跟踪交错的问题会更容易。
- en: 'The [FAQ](https://doc.pypy.org/en/latest/faq.html#why-doesn-t-pypy-use-git-and-move-to-github)
    presents two arguments against the move. [Github notes](https://git-scm.com/docs/git-notes)
    solves much of point (1): the difficulty of discovering provenance of commits,
    although not entirely. But the main problem is point (2), it turns out that **not**
    moving to GitHub is an impediment to contribution and issue reporting.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[FAQ](https://doc.pypy.org/en/latest/faq.html#why-doesn-t-pypy-use-git-and-move-to-github)
    提出了两个反对迁移的论点。[Github notes](https://git-scm.com/docs/git-notes) 解决了第一点的很多问题：发现提交来源的困难，尽管不是完全解决。但主要问题在于第二点，事实证明**不**迁移到
    GitHub 是对贡献和问题报告的一种阻碍。'
- en: People who wish to continue to use Mercurial can use the same method below to
    push to GitHub.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 希望继续使用 Mercurial 的人可以使用下面相同的方法将代码推送到 GitHub。
- en: GitHub is more resource rich than foss.heptapod.net. We could add CI jobs to
    replace some of our aging [buildbot infrastructure](https://buildbot.pypy.org).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 比 foss.heptapod.net 更丰富资源。我们可以添加 CI 任务来替换部分老化的 [buildbot 基础设施](https://buildbot.pypy.org)。
- en: Method
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法
- en: 'The migration required two parts: migrating the code and then migrating the
    issues and merge requests.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移需要两部分：迁移代码，然后迁移问题和合并请求。
- en: 'Code migration 1: code and notes'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 'Code migration 1: 代码和笔记'
- en: 'I used a [fork of git-remote-hg](https://github.com/mnauw/git-remote-hg) to
    create a local Git repo with all the changesets. Then I wanted to add a Git note
    to each commit with the branch it came from. So I prepared a file with two columns:
    the Git commit hash, and the corresponding branch from Mercurial. Mercurial can
    describe each commit in two ways: either the commit hash or by a number index.
    I used `hg log` to convert an index `i` to the Mercurial hash, and then `git-hg-helper`
    from `git-remote-hg` to convert the Mercurial hash to a Git hash:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了 [git-remote-hg 的分支](https://github.com/mnauw/git-remote-hg) 来创建一个包含所有变更集的本地
    Git 仓库。然后我想给每个提交添加一个 Git 笔记，标明它来自哪个分支。所以我准备了一个文件，有两列：Git 提交哈希和对应的 Mercurial 分支。Mercurial
    可以用两种方式描述每个提交：提交哈希或数值索引。我使用 `hg log` 将索引 `i` 转换为 Mercurial 哈希，然后使用 `git-remote-hg`
    中的 `git-hg-helper` 将 Mercurial 哈希转换为 Git 哈希：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then I used `hg log` again to print the Mercurial branch for the index `i`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我再次使用 `hg log` 来打印索引 `i` 的 Mercurial 分支：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Putting these two together, I could loop over all the commits by their numerical
    index to prepare the file. Then I iterated over each line in the file, and added
    the Git note. Since the `git note add` command works on the current HEAD, I needed
    to checkout each commit in turn and then add the note:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两者结合起来，我可以通过它们的数值索引循环遍历所有的提交，以准备好文件。然后我遍历文件中的每一行，并添加 Git 笔记。由于 `git note add`
    命令作用于当前 HEAD，我需要依次检出每个提交，然后添加笔记：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I could then use `git push --all` to push to GitHub.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我可以使用 `git push --all` 推送到 GitHub。
- en: 'Code migration 2: prepare the branches'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 'Code migration 2: 准备分支'
- en: PyPy has almost 500 open branches. The code migration created all the branch
    HEADs, but `git push --all` did not push them. I needed to check them out and
    push each one. So I created a file with all the branch names
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: PyPy 几乎有 500 个未关闭的分支。 代码迁移创建了所有分支 HEAD，但 `git push --all` 没有将它们推送。 我需要检出它们并逐个推送。
    因此，我创建了一个包含所有分支名称的文件
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: and then push each one to the GitHub repo
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将每个分支推送到 GitHub 存储库
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that the branches were named `branches/XXX` by the migration, not `branch/XXX`.
    This confuses the merge request migration, more about that later.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，分支由迁移命名为 `branches/XXX`，而不是 `branch/XXX`。 这会使合并请求迁移混乱，稍后会详细说明。
- en: Issue and merge request migration
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 问题和合并请求迁移
- en: 'I used the solution from [node-gitlab-2-github](https://github.com/piceaTech/node-gitlab-2-github)
    which worked almost perfectly. It is important to do the conversion on a **private
    repo** otherwise every mention of a sucessfully mapped user name notifies the
    user about the transfer. This can be quite annoying for a repo the size of PyPy
    with 600 merge requests and over 4000 issues. Issues transfered without a problem:
    the script properly retained the issue numbers. However the script does not convert
    the Mercurial hashes to Git hashes, so the bare hashes in comments show up without
    a link to the commit. Merge requests are more of a problem:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了来自[node-gitlab-2-github](https://github.com/piceaTech/node-gitlab-2-github)的解决方案，几乎完美地运行了。
    在**私有存储库**上执行转换非常重要，否则每次成功映射的用户名提及都会通知用户有关转移。 对于像 PyPy 这样有 600 个合并请求和 4000 多个问题的存储库来说，这可能相当恼人。
    问题转移没有问题：脚本正确保留了问题编号。 但是脚本不会将 Mercurial 哈希转换为 Git 哈希，因此注释中的裸哈希显示时没有指向提交的链接。 合并请求是更大的问题：
- en: The Mercurial named branch "disappears" once it is merged, so a merge request
    to a merged branch does not find the target branch name in Git. The conversion
    creates an issue instead with the label `gitlab merge request`.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦合并，Mercurial 命名分支就会“消失”，因此对于已合并分支的合并请求在 Git 中找不到目标分支名称。 转换将创建一个带有标签 `gitlab
    merge request` 的问题。
- en: For some reason, the branches created by `git-remote-hg` are called `branches/XXX`
    and not `branch/XXX` as expected by GitLab. This messes up the merge request/PR
    conversion. For some of the branches (open PRs and main target branches) I manually
    created additional branches without the `es`. The net result is that open merge
    requests became open PRs, merged merge requests became issues, and closed-not-merged
    merge requests were not migrated.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 `git-remote-hg` 创建的分支之所以被称为 `branches/XXX`，而不是预期的 `branch/XXX`，原因不明。 这使得合并请求/PR
    转换混乱。 对于某些分支（开放的 PR 和主目标分支），我手动创建了额外的不带 `es` 的分支。 最终结果是，开放的合并请求变成了开放的 PR，已合并的合并请求变成了问题，并且已关闭但未合并的合并请求未被迁移。
- en: Layered conversions
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 分层转换
- en: 'PyPy already migrated once from Bitbucket to Heptapod. Many of the issues reflect
    the multiple transitions: they have lines like "Created originally on Bitbucket
    by XXX" from the first transition, and an additional line "In Heptapod" from this
    transition.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: PyPy 已经从 Bitbucket 迁移到了 Heptapod。 许多问题反映了多次转换：它们有着像“最初在 Bitbucket 上创建的 XXX”这样的行，来自第一次转换，以及来自此转换的额外行“在
    Heptapod 中”。
- en: Credits
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 鸣谢
- en: We would like to express our gratitude to the [Octobus](https://octobus.net/)
    team who support Heptapod. The transition from Bitbucket was quite an effort,
    and they have generously hosted our developement since then. We wish them all
    the best, and still believe that Mercurial should have "won".
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要向[Octobus](https://octobus.net/)团队表示感谢，他们支持 Heptapod。 从 Bitbucket 迁移是相当费力的，自那时起，他们一直慷慨地托管我们的开发。
    我们祝愿他们一切顺利，并仍然相信 Mercurial 应该“胜出”。
- en: Next steps
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下一步
- en: 'While the repo at GitHub is live, there are still a few more things we need
    to do:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 GitHub 上的存储库已经上线，但我们仍然有一些需要做的事情：
- en: Documentation needs an update for the new repo and the build automation from
    readthedocs must be adjusted.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档需要更新为新存储库，并且需要调整来自 readthedocs 的构建自动化。
- en: The wiki should be copied from Heptapod.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wiki 应从 Heptapod 复制过来。
- en: buildbot.pypy.org should also look at the new repo. I hope the code is up to
    the task of interacting with a Git repo.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: buildbot.pypy.org 也应查看新存储库。 我希望代码能够与 Git 存储库交互。
- en: speed.pypy.org tracks changes, it too needs to reference the new location
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: speed.pypy.org 跟踪变化，它也需要引用新位置
- en: To keep tracking branches with Git notes on new commits, I activated a [github
    action](https://github.com/Julian/named-branch-action) by Julian to add a Git
    branch note to each commit. Please see the README there for directions on using
    Git notes.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了在新提交上使用 Git 笔记跟踪分支，我激活了 Julian 的 [github action](https://github.com/Julian/named-branch-action)
    来为每个提交添加一个 Git 分支注释。请查看那里的 README 以了解如何使用 Git 笔记的说明。
- en: Some of the merge requests were not migrated. If someone wants to, they could
    migrate those once they figure out the branch naming problems.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些合并请求没有迁移。如果有人想要，他们可以在解决分支命名问题后进行迁移。
- en: 'Additionally, now is the time for all of you to prove the move is worthwhile:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，现在是时候让你们所有人证明这次迁移是值得的：
- en: Star the repo, let others know how to find it,
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给这个仓库加星星，让其他人知道如何找到它，
- en: Help fix some of the open issues or file new ones,
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助解决一些未解决的问题或提出新问题，
- en: Take advantage of the more familiar workflow to get involved in the project,
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用更熟悉的工作流程参与到项目中，
- en: 'Suggest ways to improve the migration: are there things I missed or could have
    done better?'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议改进迁移的方法：我是否遗漏了什么或者可以做得更好？
- en: How will development change?
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发将如何改变？
- en: 'Heptapod did not allow personal forks, so we were generous with a commit bit
    to the main repo. Additionally, we (well, me) have been using a commit-directly-to-main
    workflow. We will now be adopting a more structured workflow. Please fork the
    repo and submit a pull request for any changes. We can now add some pre-merge
    CI to check that the PR at least passes the first stage of translation. The live
    and active branches will be:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Heptapod 不允许个人分支，因此我们慷慨地将提交权限授予了主要仓库。此外，我们（嗯，我）一直在使用直接提交到主要工作流。我们现在将采用更有结构的工作流程。请分叉仓库并提交拉取请求以进行任何更改。我们现在可以添加一些预合并
    CI 来检查 PR 至少是否通过了第一阶段的转换。活跃的分支将是：
- en: '`main`: what was "default" in Mercurial, it is the Python2.7 interpreter and
    the base of the RPython interpreter,'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main`: 在 Mercurial 中是 "default"，它是 Python2.7 解释器和 RPython 解释器的基础，'
- en: '`py3.9`: the Python3.9 interpreter, which also includes all RPython changes
    from `main`. This is exactly like on Mercurial, and'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`py3.9`: Python3.9 解释器，还包括来自 `main` 的所有 RPython 更改。这与 Mercurial 上的情况完全相同，以及'
- en: '`py3.10`: the Python3.10 interpreter, which also includes all RPython changes
    from `main` and all bugfixes from `py3.9`. This is exactly like on Mercurial.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`py3.10`: Python3.10 解释器，还包括来自 `main` 的所有 RPython 更改和来自 `py3.9` 的所有错误修复。这与
    Mercurial 上的情况完全相同。'
- en: Working between the repos
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在仓库之间工作
- en: Finding commits
  id: totrans-59
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 查找提交
- en: 'If you want to figure out how a Mercurial commit relates to a Git commit, you
    can use `git-hg-helper`. You run it in the Git repo. It takes the full long hash
    from one repo and gives you the corresponding hash of the other repo:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想弄清楚 Mercurial 提交如何与 Git 提交相关联，您可以使用 `git-hg-helper`。您在 Git 仓库中运行它。它接受来自一个仓库的完整的长哈希，然后给您另一个仓库的相应哈希：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Finding branches
  id: totrans-62
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 查找分支
- en: Branches migrated from Mercurial will have a `branches` prefix, not `branch`.
    While GitLab uses `branch` for its prefix, the `git-remote-hg` script uses `branches`.
    New work should be in a PR targeting `main`, `py3.9` or `py3.10`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Mercurial 迁移的分支将具有 `branches` 前缀，而不是 `branch`。虽然 GitLab 使用 `branch` 作为其前缀，但
    `git-remote-hg` 脚本使用 `branches`。新工作应该在针对 `main`、`py3.9` 或 `py3.10` 的 PR 中进行。
- en: Thanks for helping to make PyPy better.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您帮助改进 PyPy。
- en: Matti
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Matti
