["```\n { \n\n  hello, stdenv,\n\n  enableSomething ? false\n\n}:\n\nstdenv.mkDerivation (finalAttrs: {\n\n}) \n```", "```\n {\n\n  outputs = { nixpkgs, ... }:\n\n    let pkgs = nixpkgs.legacyPackages.x86_64-linux;\n\n    in {\n\n      packages.x86_64-linux.x = pkgs.callPackage ./package.nix { };\n\n  };\n\n} \n```", "```\n { stdenv, hello, openssl }:\n\nstdenv.mkDerivation {\n\n  nativeBuildInputs = [ hello ];\n\n  buildInputs = [ openssl ];\n\n} \n```", "```\n final: prev: {\n\n  hello = final.writeShellScriptBin \"hello\" ''\n\n ${prev.hello}/bin/hello -g \"hellorld\" \"$@\"\n\n '';\n\n} \n```", "```\n» nix run --impure --expr '(import <nixpkgs> { overlays = [ (import ./overlay.nix) ]; }).hello'\nhellorld \n```", "```\n {\n\n  inputs.nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n\n  inputs.flake-utils.url = \"github:numtide/flake-utils\";\n\n  outputs = { self, nixpkgs, flake-utils, ... }:\n\n    let\n\n      out = system:\n\n        let\n\n          pkgs = nixpkgs.legacyPackages.${system};\n\n          appliedOverlay = self.overlays.default pkgs pkgs;\n\n        in\n\n        {\n\n          packages.myPackage = appliedOverlay.myPackage;\n\n        };\n\n    in\n\n    flake-utils.lib.eachDefaultSystem out // {\n\n      overlays.default = final: prev: {\n\n        myPackage = final.callPackage ./package.nix { };\n\n      };\n\n    };\n\n} \n```", "```\n let pkgs = import nixpkgs { inherit system; overlays = [ self.overlays.default ]; };\n\nin \n```", "```\n let depInject = { pkgs, lib, ... }: {\n\n  options.dep-inject = lib.mkOption {\n\n    type = with lib.types; attrsOf unspecified;\n\n    default = { };\n\n  };\n\n  config.dep-inject = {\n\n    flake-inputs = inputs;\n\n  };\n\n};\n\nin {\n\n  nixosModules.default = { pkgs, lib, ... }: {\n\n    imports = [ depInject ];\n\n  };\n\n} \n```", "```\n nixosConfigurations.something = nixpkgs.lib.nixosSystem {\n\n  system = \"x86_64-linux\";\n\n  specialArgs = {\n\n    myPkgs = nixpkgs;\n\n  };\n\n  modules = [\n\n    ({ pkgs, lib, myPkgs }: {\n\n    })\n\n  ];\n\n} \n```", "```\n {\n\n  inputs.nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n\n  outputs = { self, nixpkgs, ... }: {\n\n    overlays.default = final: prev: {\n\n      meow = final.writeShellScriptBin \"meow\" ''\n\n echo meow\n\n '';\n\n    };\n\n    nixosModules.default = { pkgs, config, lib, ... }: {\n\n      imports = [ ./nixos-module.nix ];\n\n      config = lib.mkIf config.services.meow.enable {\n\n        nixpkgs.overlays = [ self.overlays.default ];\n\n        services.meow.package = lib.mkDefault pkgs.meow;\n\n      };\n\n    };\n\n  };\n\n} \n```", "```\n { pkgs, config, lib, ... }:\n\nlet cfg = config.services.meow; in {\n\n  options = {\n\n    services.meow = {\n\n      enable = lib.mkEnableOption \"meow\";\n\n      package = lib.mkOption {\n\n        description = \"meow package to use\";\n\n        type = lib.types.package;\n\n      };\n\n    };\n\n  };\n\n  config = lib.mkIf cfg.enable {\n\n    systemd.services.meow = {\n\n      description = \"meow at the user on the console\";\n\n      serviceConfig = {\n\n        Type = \"oneshot\";\n\n        ExecStart = \"${cfg.package}/bin/meow\";\n\n        StandardOutput = \"journal+console\";\n\n      };\n\n      wantedBy = [ \"multi-user.target\" ];\n\n    };\n\n  };\n\n} \n```", "```\n nixosConfigurations.test = nixpkgs.lib.nixosSystem {\n\n  system = \"x86_64-linux\";\n\n  modules = [\n\n    self.nixosModules.default\n\n    ({ pkgs, lib, ... }: {\n\n      fileSystems.\"/\" = {\n\n        device = \"/dev/sda1\";\n\n      };\n\n      boot.loader.grub.enable = false;\n\n      boot.initrd.enable = false;\n\n      boot.kernel.enable = false;\n\n      documentation.enable = false;\n\n      environment.noXlibs = true;\n\n      services.meow.enable = true;\n\n      system.stateVersion = \"23.05\";\n\n    })\n\n  ];\n\n}; \n```", "```\n» nix build .#nixosConfigurations.test.config.system.build.toplevel \n```", "```\nnix-build -A hello\n```", "```\nnix build -f . hello\n```", "```\nnix-shell -A blah\n```", "```\nnix develop -f . blah\n```", "```\n-\n```", "```\nnix run -f . hello\n```", "```\nnix-build -E\n'(import <nixpkgs> { config.allowUnfree = true; }).blah'\n```", "```\nnix build --impure --expr\n'(import <nixpkgs> { config.allowUnfree = true; }).blah'\n```", "```\nnix-instantiate --eval --strict -E 'blah'\n```", "```\nnix eval --impure --expr 'blah'\n```"]