["```\n* **Hans Reiser on ReiserFS deprecation**\n@ 2024-01-18 14:57 Fredrick R. Brennan\n  0 siblings, 0 replies; only message in thread\nFrom: Fredrick R. Brennan @ 2024-01-18 14:57 UTC (permalink / raw)\n  To: LKML\n\n[-- Attachment #1.1.1: Type: text/plain, Size: 37949 bytes --]\n\nGreetings LKML.\n\nWhat follows is a letter from Hans Reiser to myself, which he wrote some \ntwo months back, and has asked me to publish, with his thoughts on the \ndeprecation of ReiserFS from the Linux kernel. I have transcribed it to \nthe best of my ability. Plaintext email may not be the best way to read \nit, as such, I have also made available PDF and HTML versions of the letter.\n\nThese may be found at <https://ftp.mfek.org/Reiser/Letters>. My letter \nto Hans is №1, Hans’ reply is №2.\n\n---\n\n§ 1\nCover letter\nTo:\nFredrick R, Brennan\n597 North Raleigh Avenue\nAtlantic City, New Jersey 08401-1081\n\nDear Mr. Frederick [sic] R. Brennan,\n\nI thank you so much for writing me. I apologize for the delay, and for \nit being so long.\n\nThe length is the reason for the delay in my response. I hope that OCR \ntechnologies are effective at saving you from having to type this in. \nCould you carefully proof the OCR results? I apologize for the burden it \nwill be. I hope you understand the length as my taking your request \nseriously, and are pleased rather than dismayed. It was alot of work to \nwrite it. If you sign up for text messaging at gettingout.com, you can \nget faster responses from me. Sending a phone number will also work.\n\nPlease use your judgment in where to send this—any place that would be \ninterested is fine.\n\nLKML and Slashdot.org seem like reasonable places to send it (as of \n2006). Your advice is desired.\n\nPlease let me know if you or anyone else has questions. If after sending \nthis somewhere you still have time, could you send me info on Reiser5, \nor any interesting papers on other Filesystems, compression (especially \nDeep Learning based compression), etc.1\n\nGratefully,\nHans Reiser\n11/26/23\nFrom: Hans Reiser\n(architect of ReiserFS V3 + Reiser4)\n\n26 November 2023\n§ 2\nIntroduction\nIwas asked by a kind Fredrick Brennan for my comments that I might offer \non the discussion of removing ReiserFS V3 from the kernel. I don’t post \ndirectly because I am in prison for killing my wife Nina in 2006.\n\nI am very sorry for my crime–a proper apology would be off topic for \nthis forum, but available to any who ask.\n\nA detailed apology for how I interacted with the Linux kernel community, \nand some history of V3 and V4, are included, along with descriptions of \nwhat the technical issues were. I have been attending prison workshops, \nand working hard on improving my social skills to aid my becoming less \nof a danger to society. The man I am now would do things very \ndifferently from how I did things then.\n\nPerhaps some might accept my apology; others might learn from my \nmistakes if I describe them well; some might find the design issues \ninteresting.\n\nI will leave it to the users to decide whether ReiserFS V3 is still \nuseful. Users should understand that it is a burden for those who \nmaintain VFS and the like to have to test their changes on an additional \nfilesystem, especially given Linux filesystems are hard code at the VFS \nlayer.\n\nReiserFS 4 provides a more maintainable basis for the future for those \nusers who like the features of V3\\. If V3 isn’t used it should go, I \ntrust the users and the kernel maintainers to discuss whether it is \nused, and to make the right decision together.\n\n§ 3\nMain text\nV3 had a moment in time when it was useful, and I am happy that we were \nable to contribute to the success of GNU/Linux for a few crucial years \nduring which it was growing rapidly in usage. Chris[page 2 follows] \nMason’s contribution of journaling was the most practically useful \nfeature of V3, and I thank him for it.\n\nI am sad that SUSE didn’t make it in the market place, I found it to be \na well-crafted distro, and it was a privilege to be able to contribute \nto it. I am grateful for their sponsorship and support.\n\nReiser FS V3 was our first filesystem, and in doing it we made mistakes, \nbecause we didn’t know what we were doing. I have to tell you that when \nI did the first benchmarks the performance was terrible, and I didn’t \nknow why. By terrible I mean that no sane person would use it for \nanything, there were years of dark depression before it was debugged \nenough to run at all, and then, 5% here and 5% there, I dragged it into \nbeing a little faster than the competition, and saving some space for \ntraditional filesystem sizes, and more space for small files. Changing \nthe allocation of blocks to files—simple code fortunately—yielded most \nof the performance gains. In V3 performance tweaking, Ext2, the existing \nGNU/Linux filesystem, was actually a very high performance \nfilesystem—probably the best in the world.1 The man I was then presented \npapers with benchmarks showing that ReiserFS was faster than ext2\\. The \nman I am now would start his papers [page 3 follows] crediting them for \nbeing faster than the filesystems of other operating systems, and \nthanking them for the years we used their filesystem to write ours. Not \ndoing that was my first serious social mistake in the Linux community, \nand it was completely unnecessary.\n\nVladimir Saveliev, who had pity on me and came back after everyone else \nhad quit, was the man who made the code work well enough that anyone \nwould want to use it for more than a benchmark. After he came back, I \nleft the debugging to him. He is one of the most good, mild-mannered, \nand hard working men that exists, anyone who has ever worked with him \nwill agree with that. He didn’t say much about it, but he believed in \nthe Free Software Movement. Through force of will, and hard work, he \nmade himself into a programmer of extraordinary skill, the effects of \nwhich you can see manifested in our Reiser4 code. He went from being the \nmust junior of the programmers at the start of V3 to being the lead \nprogrammer, earning it through hard work all the way,\n\nAssuming that the decision is to remove V3 from the kernel, I have just \none request: that for one last release the README be edited to add \nMikhail Gilula, Konstantin Shvachko, and Anatoly Pinchuk to the credits, \nand to delete anything in there I might have said about why they were \nnot credited. It is time to let go.[page 4 follows]\n\nIn prison I have been working quite hard on developing my social skills, \nespecially my conflict resolution and conflict avoidance skills. There \nis a lot of conflict in prison, as you can imagine, and it is quite a \ngood place to learn those skills. Nothing like lots of practice, and the \ngroups they let us take if we want to have a quite well developed \ncurriculum, Repetition helps, at least for me. It has changed me.\n\nI had a tendency to see people in extremes. That I am working on by \nbeing mindful of it, and by being around people who it would be easy to \nsee in extremes, Many of them have become very good persons [sic] since \ntheir crimes.\n\nI look back, with the advantage of the passing of years helping to \nimprove my vision, and I see that while I intended to be helpful to \nresearchers in Russia living on less than a hundred dollars a month, I \ncould not be as helpful as a job working in America earning a Western \nsalary. I put everything I had into the project, working 40+ hours a \nweek at a day job, most employers not happy that I wanted to work only \n40 hours if I could, and then I spent 15-20 hours a week arguing over \nalgorithms, architecture, code, etc., by email. I learned to cut out \neverything in my life besides the[page 5 follows] project because \notherwise my dream just would not make it.\n\nI had more dream than experience. With Mikhail there running things in \nRussia it went pretty well because we had an ability to understand each \nother, I believe Mikhail Gilvla was the brightest mind in his generation \nof computer scientists, and his talent was wasted. First it was wasted \nby Russia’s economy making his success impossible, and then in America \nit was wasted by most of the database field not being able to understand \nthat he was right in wanting to rewrite the basics of their field in the \nways be wanted to because he was just so much brighter than they were. I \ndon’t think they could even understand why it mattered, what he wanted \nto do.\n\nWe both believed that relational algebra was a special case of something \nmore general, something that was needed for “semi-structured data\". He \ncalled his approach “set-theoretic\", and implemented it in the form of a \ndatabase. I had my own syntax that expanded the filesystem namespace, \ninstead. We came up with our ideas independently, before we met.[page 6 \nfollows]\n\nI had the idea that the place to implement it was in a filesystem, and \nthat the motivation for implementing it there was to evolve it into a \nnamespace that would allow unifying all of the namespaces of the \noperating system into one namespace. I thought this would be the most \nimportant refactoring of code ever, and would increase the expressive \npower of everything in those namespaces. I drew analogies between the \neffect of roads and waterways on the development of civilization \naccording to Adam Smith, and the effects of free trade on specialization \nthus wealth according to Adam Smith again, and the effects of unifying \nthe namespaces on the expressive power of the operating system.\n\nThat was my dream.\n\nI was not the only one with this dream. The term “namespace\" is pretty \nmuch only used by people who share in that dream enough to use a term \nthat implies an equivalency between databases, filesystems, DNS, etc. \nRob Pike and Plan 9 are examples of work to increase the Filesystem \nnamespace, My particular flavor of the dream was that I had a syntax \nthat could expand the filesystem hierarchical namespace to handle \n“semi-structured data\". That means queries that are constructed from \nprimitives that can be combined into the equivalent of searche engine \nqueries (unstructured associations), database queries (unordered ordered \npairs to search tables), or filesystems (fully[page 7 follows] ordered \nnames to search hierarchies), or things that are richer than any of \nthose special cases. Now that was my dream! Sigh, It probably won’t \nsurprise you that I was a teenager when I came up with this dream, and \nits syntax for searching semi-structured data.\n\nI apologize to the users that I never got to that dream because of my \ncrime and my going to prison, and they never got to see any semantic \nenhancements to Reiser 4.\n\nThe most technically difficult task that was a prerequisite to someday \nimplementing my syntax, a task that had to be implemented first to do \nthings right, was to make the filesystem efficient for small files.\n\nI was very sensitive from the start to the power of net work effects to \ndrown efforts to shift paradigms, to introduce better ways to do things. \nNetwork effects were abstract, so I understood them better than the \nimportance of believing that I can make friends and allies of people who \nstart out hostile because I had not made them feel included.\n\nAwareness of network effects was why I decided that the path to unifying \nthe namespaces of the operating system started with enhancing filesystem \nsemantics which started with creating a storage layer that could emulate \na filesystem faster than any existing filesystem but could also be[page \n8 follows] effective for storing small objects like databases are. Yes, \nit was arrogant to attempt that, but it seemed like it should be \npossible to do it. I had no idea how long it would take to get it right.\n\nMikhail advised me to use balanced trees instead of extensible hashing \n(what dcache uses). I would come to understand that locality of \nreference is the sina qua non of performance, and that balanced trees \nare the best of all tools for implementing clever ways of maximizing \nlocality of reference, Mikhail had tried extensible hashing, and learned \nthe hard way that trying to fix its problems leads to using balanced \ntrees. Locality of reference doesn’t just affect hard drive performance, \nit affects compressed data performance (that means SPRAM performance), \nand even affects CPU cache performance (and thus DRAM stored data \nperformance). He told me he was saving me 2 years by telling me to use \nbalanced trees, and that’s true, and I thank him for that,\n\nI never told Mikhail that Oracle had tried implementing a filesystem \nusing balanced trees, and its performance was terrible leading to most \ninsiders in the industry concluding that balanced trees performed poorly \nfor filesystem File size patterns. I didn’t tell Mikhail; I didn’t tell \nany of the programmers; I didn’t tell anyone involved in the project. I \ncouldn’t see why they should be slower so I disregarded it, Vladimir \nwould[page 9–1 follows] have good cause to be angry with me if he reads \nthis.\n\nI think part of their performance problems were how they did their \njournaling. I’ve observed that most balanced tree implementations are \ntoo synchronous, and most filesystems aren’t very synchronous for \nperformance reasons. fsync() is like using a sledge hammer to turn a \nscrew with repeated sideways blows on the hoad of the screw. What is \nneeded to have high data integrity guarantees with no unnecessary \nperformance losses is a new API that allows intelligence in doing it by \nallowing the different layers to share their greater intelligence with \nthe other layers. We need to allow the user to share their intelligence \nwith the application, the application to share its intelligence with the \nfilesystem, the filesystem and process scheduler to share their \nintelligence with the I/O scheduler, the I/O scheduler to share its \nintelligence with the I/O scheduler and other aspects of the hard drive, \nand then share intelligence back up the other direction of that stack, \nand then also tie in the memory manager in there too. 2 It requires not \njust ordering of I/O’s, but specifying groupings of I/O’s that should \ncommit or not commit as a group, to communicate that intelligence, and \nnot be more synchronous than necessary. Other features relating to \npriorities, fairness, guaranteeing I/O rates, etc, would also be \ndesirable. If more details are wanted by anyone, ask, please, This is an \narea where Reiser 4 should do more[page 9-2 follows] than we had time to do.\n\nI wish I had had the money to retain Joshua MacDonald when Orade hired \nhim away from me, and learn more from him about logical journaling ideas \nhe had then, I hope he is doing well—he was simply a brilliant young \nman, I’ll just say that block aligning journaling isn’t necessarily \noptimal for all needs that userspace has, and refer the reader to him \nfor more. What I didn’t know when we were arguing over the V3 design is \nthat the FFS bench marks are misleading, and fail to highlight something \nthat also hurts database performance, FFS is the BSD filesystem, and it \nwas regarded as the best of its day. It used 4k blocks except for the \ntail end of files for which it used 1k blocks, and it would combine \nthose 1k blocks from different files into the same 4k, thereby allowing \nthem to increase block size but still conserve space.\n\nSounds clearly correct, yes? Alas, the performance cost of pulling the \ntails of files out of line with the rest of the file to combine it with \nthe tails of other files is a seek plus a rotational delay (20 ms), \nThat’s hugely expensive compared to the tail size divided by the \ntransfer rate, Seeks dominate filesystem performance unless the layout \nis perfect. You can see the importance of avoiding adding any seeks by \nhaving the tail of a[page 10 follows] file located inline with the rest \nof the file,\n\nDatabases with their \"BLOBS\", ReiserFS V3, and FFS all combine tails in \na way that adds seeks and hurts performance substantially. For Databases \nand Reiserts V3 it’s even worse though, because BLOBS make it not really \na balanced tree, and the ability to effectively cache all the internal \nnodes of the tree is lost. Google “Reiser 4 twigs”, and hopefully that \nwill find a longer discussion of that for interested readers, including \nhow to fix it,\n\nThat performance failing drove me crazy—I felt the design was just \nwrong, and I resolved to redo everything from scratch with Reiser 4, The \nplugins, and the modularity of the code they created, are the most \nimportant feature of Reiser 4, It is far easier to add features to \nReiser 4 than to add them to other filesystems, because you just add new \nplugins. The hard stuff is done, and new features are a downhill ride. \nWell, except that I am in prison, and so I must leave all that to others.\n\nThere is a problem that filesystems have, and that is that format \nchanges are unwanted by many for good reasons, That is the primary \nreason that filesystems stagnate, Well, that, and stagnating is \neasy…[page 11 follows]\n\nI just had to fix all these flaws, fix them and make a filesystem that \nwas done right. It’s hard to explain why I had to do it, but I just \ncouldn’t rest as long as the design was wrong and I knew it was wrong.\n\nSUSE didn’t want a format change, they wanted incremental improvements \nto V3\\. That’s the way it is for a lot of filesystem architects. \nIncrementally changing things they know are deeply wrong to their cores, \nbut stuck in that misery of doing so. I said no to that, which I won’t \napologize for and don’t regret, because I have a soul, and I had a \ndream. What I do apologize for is how utterly inarticulate and \nunsociable I was in explaining that to SUSE. What I essentially said to \nSUSE was that the code was unmaintainable terrible code that needed to \nbe rewritten from scratch, trust me, it needed to be done, we didn’t \nknow what we were doing then and now we have learned what we should have \nknown, but we will fix every bug in V3 that is found.\n\nI could have said that I hear them, and I hear them well, so well that \nReiser 4 has node format plugins that solve the format change problem. I \ncould have told them of our plans for a repacker for Reiser 4, so that \npartitions could be shrunk, and layout perfectly optimized, and …spent a \nday visiting them and making Reiser 4 our dream not my dream. Instead \nI[page 12 follows] communicated that I couldn’t pursue my dream without \na format change. Both SUSE and I wanted what was best for Linux and \nSUSE, so the reason for my failure was that I had failed to socially \nconnect by reaching past the initial hostility to the format change to I \nmake my (and DARPA’s) dream into our3 dream. I would repeat this failure \nstyle with the Linux kernel community when Reiser 4 was submitted for \ninclusion, only worse.\n\nLet me go back in time though to the early days of V3\\. Not long after \nthe computers were purchased, and then the project really got going, \nMikhail got a job in America, Mikhail was the reason I had hired this \ngroup. Now I no longer had somebody running things on site that I was \nintellectually compatible with, and frictions developed. I had not \nchosen them, and they had not chosen me, nor had they chosen my dream or \nthe Free Software Movement. Alas, I was inexperienced, and they didn’t \nrespect. that, which is understandable, yes? I had a feel for \nabstractions that was stronger than my feel for people, and a casual \ndelight for tossing socially established algorithms that made them even \nless comfortable than my wearing a cowboy hat instead of a tie, None of \nthis was a problem with Mikhails but Mikhail had left.\n\nIt was to be expected that there would be problems, but I was too young \nand hopeful to see that. There was a cost to going from system \nadministrator to architect without first spending a few years as a \ncoder.[page 13 follows]\n\nAn example of this was their use of BLOBS in V3\\. I didn’t know that \nputting unformatted nodes on a level of the tree below the putative \nleaves of the tree was the standard way of doing things in the database \nworld. When I saw it in the code I objected to it. I was asked to just \nlet them try it their way, and if it didn’t work it could be removed , I \nwas too inexperienced as a software project manager to know that that \nwas an argument to only entertain after the first version of a product \nhas shipped, because whatever gets written before product shipment is \nnot likely to get rewritten until after product shipment, especially if \nyou know the design is wrong. That’s especially true if you know the \ndesign is wrong. What I didn’t know was just how wrong the design was, \nThe performance cost was higher than I feared it would be, I should also \nsay that the coding cost of doing it right was higher than I thought it \nwould be, To the young architects out there, let me say that if you know \nsomething is wrong, don’t lot it happen just to be agreeable or to \naccept the consensus, Yes, listen to all the arguments, but if you don’t \nhave a better feel for algorithms, you should not be in the job of \narchitect. Believe in yourself, I paid the price for not knowing when to \nbe firm, when the benchmarks came in, and then again when fixing it \nrequired a format change that lost me SUSE. 4 [page 14 follows]\n\nThen Mikhail’s employer hired the rest of them, and left me with a pile \nof poorly commented code that was not able to run. It would have been \nwiser for me to write it again from scratch, but that would have meant \nadmitting that all I had invested into the project was a total loss.5\n\nNow, with the distance of time, I can see that their leaving was simply \nthe reasonable thing from their point of view, There were some \nunkindnesses in how they left, but that’s to be expected, says the \ndistance of time, Then I felt so betrayed. Now I wish to let go of that. \nThey were just ordinary people caught in economic forces, and not \nenjoying working for the guy with more dream than experience. They too \nwere inexperienced: none of us had worked on a filesystem before. We \nwere all young, and impatient. I never did get to where we made enough \nmoney that I could pay people well, and I am truly sorry for that. If I \nhad not committed my crime, that day when Reiser 4 was a worthy use of \nthe extraordinary talent of the programmers working on it probably would \nhave come. I was callous and indifferent to their needs and dreams when \nI committed my crime, and victimized them financially and ruined their \ndreams that I had talked them into.\n\nOne of my great regrets is that I let go of Mikhail as a friend. I hope \nbe is alive, and doing well.[page 15 follows]\n\nI read about a DARPA request for proposals for open source software on a \nFriday on Slashdot, and it had a Monday submission deadline. I went into \na writing Frenzy, and proposed what became Reiser 4, DARPA was very good \nto us, very and I learned a lot about accounting and security both from \nthem. I’d like to apologize to DARPA for two things:\n\nAll we were able to complete was the infrastructure that would enable \nthe security features I proposed, and that was despite my putting \nseveral times the money they gave us into the project from every where I \ncould get it, including using 29% interest credit card cash advances to \nmake payroll near the end. 6 Now that Reiser 4 is stable, the plugin \ninfrastructure would make it so easy to add extra features, we could \nprobably have done the encryption plug in and stat data inheritance in \njust 6 months.7\nAt the time I made the Reiser4 proposal it looked like democracy had won \nin Russia, I believe we were a point of light in US–Russian relations, \nThe problem was that what was needed was a thousand points of light, and \nwe were one of a very few.[page 16 follows]\nRussian Intelligence/Law Enforcement, after doing a very thorough job of \nmaking sure we weren’t a CIA cover operation,8 was very nice to us, and \nquite supportive of us and the Free Software Movement, It might not have \nbeen a coincidence that we had no Mafia problems, The time that I got \nscammed for $300, they got my money back in 45 minutes. I know that one \nis not supposed to say good things about them, but my own personal \nexperience is that they were very effective, kind, and even wisely \nguiding. In important ways,\n\nRussian culture teaches a better understanding of people. As a for \ninstance, one of them told me that my wife was in a lot of pain. Now I \ncan see clearly that that was exactly correct, and perfectly illuminated \nthe path I should have taken. Alas, I lacked the wisdom to understand \nthe words with just one repetition.\n\n*9\n\nIn prison I have learned that alienation, which I intend to use to \nprotect myself, is often a cage I bulld around myself instead. A fear of \nbeing naïve can often be as dangerous in its reality distortions as \nbeing naïve,[page 17 follows] Now is not the time to try to be a light \nin US-Russian relations. I hope that there will again be such a time, \nand an end to all the death and dying. I hope the time will come again \nfor reaching past the alienation, and finding friendship[page 18 \nfollows] and love, between Russia and Ukraine and the U.S, and between \nmy children and I. Call me a fool, or simply someone who thinks the pain \nis too much for us all, I leave that to you.\n\nBack to Reiser4: We10 built a beautiful filesystem that embedied \neverything we had figured out we should have done the first time, called \nReiser 4, and it smoked, What’s more, it had this plugin architecture \nthat I had proposed to DARPA in that writing frenzy, but that Nikita \nDanilov had made even better than what I had proposed (he made the \nbalancing operations plugins too, and I am so glad that he was smarter \nthan me and showed that the performance costs were acceptable).\n\nWith most filesystems, adding a feature is 80% altering the existing \ncode and 20% writing the new feature, and then you will be likely adding \na Format change that someone not even working in the filesystem group \nwill say no to. With Reiser 4 we made every aspect of it that we could \nimagine doing so for into a plugin. If you want to add a new feature, \nyou just spend your time writing the new plugins for it, and 90% of the \ntime that is all you will have to write, or failing that, it will be 80% \nof what you will have to write, You get to spand your time on your \nclever idea instead of on why it was so much harder than it should have \nbeen to write it. I think you’ll find it is more than 3 times faster to \nadd it to Reiser 4 than to any[page 19 follows] other filesystem, with \nall the features required of a filesystem for compatibility (an enormous \nburden to write—if you have a clever filesystem idea save yourself that \nburden and add a plugin to Reiser 4 instead—you can be one programmer \ndoing a 6 month plugin instead of having to fund a team for 5 years to \ndo a filesystem) completed, it was going to be all downhill from there. \nWe would have been theones implementing a substantive new feature per \nprogrammer per 6 months, The code that Alexander Zarochentcev, Nikita \nDanilov, and Vladimir Saveliev wrote (all three of them contributing \nequally, working together like the three musketeers) was beautiful code, \nand then the junior programmer Edward Shishkin came along as the fourth \nmusketeer and his compression plugin doubled performance again for \ncompressible files. I cannot remember ever finding anything I could \nimprove in Alexander Zarochentcev’s code: it was always perfectly \nwritten: “read it and learn how things should be written” kind of code.\n\nI am not known for being unable to find things to criticize, or praising \neasily. Somehow with the smallest budget for paying them in the \nfilesystem world, I lucked onto the best programming team in the \nfilesystem world. The filesystem was worthy of their talents—I wish that \nI as a person had been worthy of them.[page 20 follows]\n\nThe problem was that it didn’t use the code that had been written by \nothers in the kernel community, and people don’t really like their code \nnot being used. People want to feel included. I responded to their \nsocial need by, well, screwing the pooch in response (benchmarks and \ndisputing their expertise). Imagine if I had responded by saying that I \nneeded their help in imagining new file plugins instead?\n\nYou know how people are much more likely to read an email if it is one \nscreen long, rather than the length of this :-/ ? It is similar with \ncontributing code to the kernel. It is much more social and relationship \ndeveloping to contribute a screenful or two of code once every week or \ntwo over the course of years. We were dropping 90,000 lines of code on \nthem all at once, having worked on it in total social isolation for 5 \nyears in Moscow, Socially it was all bad. Small increments are the more \nsocial way to go. Incremental improvements to V3 would have met no \nopposition. We could have lived a life of being a little bit better than \next3, and been respected in the field as we waited for someone young to \nobsolete us,\n\nAlas,11 it had to be written from scratch to be written right, to be \nwritten the best I knew how to to design it, to fix what the benchmarks \nhad 12 revealed to an empiricist. My leadership and project management \nfailures needed to be atoned for. The maintainability of a plugin based \nfilesystem was perhaps more important than the[page 21 follows] \nbenchmarks, I had added comments, and we had added bug Fixes, but I am \nso glad I kept none of it for V4.\n\nIf I had had then the conflict resolution skills I have learned in \nprison Cognitive Behavioral Intervention classes I might would have been \nable to overcome all that.\n\nThen, my attitude was, it’s the fastest filesystem in the world, why \naren’t you happy and helpful?! Look at these benchmarks! These plugins! \nWhy do I have to deal with these people who didn’t write as fast of a \nfilesystem ? Let them write theirs, and us write ours - VFS should allow \nthat ! My attitude should have been, ignore the hostility, that’s to be \nexpected at first and overcome, I can overcome hostility, and the way to \ndo that is simple : 1) make people Feel appreciated and cared about, 2) \nmake people Feel included, 3) make people want to do things with those \nplugins themselves by asking them for their ideas on what plugins they \ncould imagine.\n\nNow I Know that it is possible to overcome such problems if I actively \napply my mind to Finding an emotional or social path to making people \nFeel good.\n\nThe most important part of that is to believe that I can do that \nsuccessfully. I used to lack the ability to imagine that I could succeed \nat overcoming hostility, but by doing the exercises in my Cognitive \nBehavioral Intervention classes in prison situations, I have started to \nsee that I can,[page 22 follows] started to believe that I can,\n\nIf you believe you can do it, you usually can, when it comps to making \nthings go well with others, If you focus on Finding a way past a \nproblem, instead of on your Feelings of having been wronged, you can \nusually get past a relationship hiccop. If you Fail, you’ve lost little \nto nothing in making the attempt, so why Fear to make the attempt? \nContrary to what young men so often Fear, if you Fail in such an attempt \nyou don’t lose Face - you gain respect From others watching you try - \nespecially the older ones. If you make a habit of always trying, you \nwill inevitably get good at it,\n\n*13\n\nOne of my dreams is to someday convince the State Legislature to teach \nthe curriculum they teach us prisoners, in elementary school, that \npeople like me can learn it better without having to go to prison to \nlearn it, I’m try my to convince some people to pitch it to \nlegislators—if any one would like to help with that please let me know. \nIt will help with more than just avoiding prison—it will help with all \nrelationship conflicts, and who does not have those…? The prison \nparenting class should be taught in High School too…[page 23 follows]\n\nAn example of what I could have hand led differently was when Viro \nannounced that there was a race condition in our code, but that he would \nnot tell us where it was because if we could not audit our code for race \nconditions we should not be allowed into the kernel, Viro was this guy \nwhose career focus was lacking, I didn’t know any thing about auditing \ncode for race conditions, and disappointingly Google didn’t get me any \nwhere in looking for how does one audit for race conditions. My attitude \nat the time was that it sounded like necessary but tedious work, really \ntedious, that hopefully the guys who were doing the debugging would \nfigure out while I tried to get the money for their next pay check. 14 I \nshould have done more than communicate the problem, I should have asked \n“what is the audit for race conditions plan, and help me find literature \non how to do it, and then let’s divide up the relevant code and do it, \nall code to be audited by two different people\". Race conditions are \nvery expensive to debug when they are rare—auditing would have saved \nmoney. This was an area where we all needed to improve our methodology. 15\n\nI Failed to communicate by Failing to ask if this was an area where my \nguys didn’t know how to do it and were too shy to say so, and in this \nwere just like me.[page 24 follows]\n\nWhat I should have done was ask Viro instead of Google, and invite him \nto come to Moscow, stay in my spare room, sample the world’s wildest \nnightlife (Moscow), and give our team a seminar on auditing for race \nconditions and supervise us as we each took a part of the code and did \nthe audit per his instructions, We had as much motivation to eliminate \nrace conditions, no, much more because it was our code and business, as \nViro, There was no good reason for us to not be allies in this. There \nwas only a bad reason I was responding to the initial hostility rather \nthan reaching past it to make an ally of someone who had a lot of \npotential to be very helpful to us. Now of course he might well have \nrefused the invitation, said he was too busy, told us to get better at \nusing Google, etc., but even if he refused the invitation he would \nprobably have felt mollified somewhat. If he took us up on the \ninvitation all of us could have made valuable Friendships likely to have \nbeen useful for the rest of our lives, as we fed him shi [sic] (щи, \nRussian soup, one of the best aspects of Russian cuisine is their soups) \nand pelmenie (elmeni, Georgian spicy pot stickers), and took him to \ndance the night away when the race conditions were gone.\n\nI could have similarly approached other Key persons in the Kernel \ncommunity who expressed unhappiness at our contribution offering, if \nonly I had had then the social confidence, and belief that it is \npossible to overcome initial touches of alienation, that I have now \ndeveloped.[page 25 follows]\n\nInstead I responded to hostility with my own hostility.\n\nIn prison, on MLK day, I learned of MLK’s words:\n\n“Only love can fight hate.”\n\nI have come to appreciate, and fully understand those words, I wish I \nhad understood them then.\n\nThere were a bunch of such situations that I handled in ways that did \nnot make people Feel appreciated or included, and I want to take this \nopportunity to apologize For those.\n\nI especially want to apologize to the other members of our team who \ninvested so much of their lives into our dream only to be failed by me, \nand by my alienating others in the Linux kernel community.\n\nThe Linux kernel is not about benchmarks, it is about a community of \npeople who enjoy working together in the Christmas Spirit to give to the \nusers all year long. Now that I have changed who I am I can better see that.\n\nI don’t know what is in Reiser 5—I haven’t been told, and I cannot go on \nthe Internet. Edward Shishkin is a very bright man though, and one of my \nregrets is that I didn’t spend more time with him, I am confident he has \ndone some thing nice in Reiser 5\\. Who knows, maybe he has done some nice \nplugins that I would never have imagined. The compression plugin Edward \ncoded was the one thing yielding the biggest performance boost of all \nthe things we did in Reiser 4\\. Chances are high that I won’t be[page 26 \nfollows] released anytime soon. I encourage people to allow those who \nworked so hard to build a beautiful filesystem for the users to escape \nthe effects of my reputation. I invite you to empathize with what this \nhas been like for them for a minute.\n\nLet their dreams escape from the harm I have done, if that feels right \nto you.\n\n§ 4\nConclusion\nIwish I had learned the things I have been learning in prison about \ntalking through problems, and believing I can talk through problems and \ndoing it, before I had married or joined the LKML. I hope that day when \nthey teach these things in Elementary School comes.\n\nI thank Richard Stallman for his inspiration, software, and great \nsacrifices,\n\nIt has been an honor to be of even passing value to the users of Linux. \nI wish all of you well.\n\nHans\n11/26/23\n\nP.S. Letters are welcome, Please send them to:\n\nHans Reiser\nchcf g31008\np.o. box 213040\nStockton, ca, 95213\nu.s.a.\n\nYou can also send texts. or video chat or phone about, if you go to \ngettingout.com, or phone chat if you send a phone number, for me to call \nand accept the phone call.\n\n[-- Attachment #1.1.2: OpenPGP public key --]\n[-- Type: application/pgp-keys, Size: 4775 bytes --]\n\n[-- Attachment #2: OpenPGP digital signature --]\n[-- Type: application/pgp-signature, Size: 236 bytes --]\n\n^ permalink raw reply\t[**flat**|nested] only message in thread\n```", "```\nonly message in thread, other threads:[~2024-01-18 14:57 UTC | newest]\n\nThread overview: (only message) (download: mbox.gz / follow: Atom feed)\n-- links below jump to the message on this page --\n2024-01-18 14:57 Hans Reiser on ReiserFS deprecation Fredrick R. Brennan\n\n```", "```\nThis is a public inbox, see mirroring instructions\nfor how to clone and mirror all data and code used for this inbox;\nas well as URLs for NNTP newsgroup(s).\n```"]