- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:23:31'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年05月27日 14:23:31
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: j3s.sh
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: j3s.sh
- en: 来源：[https://j3s.sh/thought/fail2ban-sux.html](https://j3s.sh/thought/fail2ban-sux.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://j3s.sh/thought/fail2ban-sux.html](https://j3s.sh/thought/fail2ban-sux.html)
- en: 'fail2ban sucks 2020-03-22 -> fail2ban sucks i''ve made this argument countless
    times on the internet, so i figure i''d write it down so that i can just link
    to it instead. this tends to be a controversial opinion, i think. critical note:
    i am not saying that fail2ban sucks for every use-case, i am mostly writing this
    in such a way to try and counteract the fervant fail2ban recommendations that
    i see everywhere, which i think are dangerous. if you like fail2ban, fine, use
    it - but these are my thoughts. for those unfamiliar with fail2ban, generally
    speaking, it is a piece of software that monitors log files for login failures,
    and then interacts with your firewall to block the IP addresses belonging to those
    failures. It is configurable such that one can say "if an IP fails to login via
    SSH 10 times in a row, block it for 1 hour." i see fail2ban commonly recommended
    on the internet. typically when someone new to server administration sets up a
    server and asks about all of these weird SSH attempts, that''s when fail2ban comes
    up. here are some quotes from fail2ban fans: > One handy service is fail2ban,
    which will automatically > IP addresses to the firewall if enough failed attempts
    > are tried > To ban those, you could try to use fail2ban. Seems to be a common
    approach to > this kind of bot activity. > In this case, a good password with
    iptables rate limiting, fail2ban & log > monitoring is better. > Non-standard
    port and/or fail2ban for logspam if you''re having fun. > I find the best/laziest
    combo is ufw/ssh/fail2ban/f2b-loop/logwatch. i have a few arguments, this is the
    summary: do not change your standard ports. do not use fail2ban. do harden your
    applications with their built-in mechanisms. if you need super extra security
    for certain apps, only allow trusted IP ranges - use an IP whitelist. most everyone
    else is overengineering. fail2ban sucks, let me count the ways. fail2ban: * will
    not stop an advanced persistent threat * will inconvinience you at some point
    * may inconvinience *your users* at some point * opens you up to fail2ban vulnerabilities
    * may make you feel like your system is more secure than it is * is no more secure
    than a properly configured application * is actually _less_ secure than a properly
    configured application at best, fail2ban: does nothing at worst, fail2ban: causes
    you massive inconvinience or total lockout let''s put ourselves in the mindset
    of a new system administrator. they spun up a new capsul[1], they''re peeking
    around their new system. suddenly they notice their SSH logs - hundreds of ip
    addresses from russia and china attempting to log into their systems over and
    over. naturally, this triggers what one might call "bad vibes." it makes the system
    feel less clean. who decided that this was okay? i just finished setting this
    system up and it''s already under attack!? do not listen to their advice, new
    admin. simply setup SSH properly, and don''t worry about a thing. here is my rationale.
    first, let''s think about who exactly those IPs belong to. * bots there are tens
    of thousands of bots trying common username/password combination against every
    service known on earth - SSH isn''t special. This goes for every login page on
    the internet that expects a username and a password. Think email and neocities.
    Think wordpress admin pages and databases interfaces left wide open. if you do
    not leave your services listening on public interfaces while they''re configured
    with usernames like "admin" and passwords like "admin", you have nothing to worry
    about. * curious users friends looking to prank you, kids with no idea what SSH
    even is, maybe that one girl at the bar you pissed off who has Kali installed
    on her laptop. pro tip: these attempts will likely be less successful than the
    bots. * advanced persistent threads usually state actors, maybe a botnet operator
    with a grudge. in either case, fail2ban does nothing - these users can scream
    through proxies like they''re seeing the matrix. they can change their IP address
    nineteen million times a second without blinking. you can ban a quarter of the
    IP addresses on earth with fail2ban - the attacker will use another quarter. what
    i''m saying is, if you''re fucked, you''re fucked. fail2ban will not help. but
    if you''re secure, you''re secure, fail2ban will not help. see what i''m getting
    at? OpenSSH i''ll speak about OpenSSH specifically, but only because it''s brought
    up so often. here are the hardening guidelines that you should abide by. * generate
    a password protected private/public keypair * use key-based authentication to
    your system(s) * turn off username/password auth you will still see the failed
    login messages. ignore them. unless someone hacks your key _and_ the decryption
    password, they **are not getting in via SSH**. it would take roughly 2,000 years
    using the dedicated compute power of every computer on earth put together to bruteforce
    that key. don''t sweat it. they are not getting in. fail2ban is good for freeing
    up resources though, right? wrong. fail2ban has to fuck with a live firewall.
    it''ll probably block you out. every second of your time is worth more than a
    hundred hours of your compute operating properly. setting up fail2ban takes time,
    and so does getting yourself unblocked from it. the resources consumed by 10 SSH
    login attempts per minute is staggeringly low. * if someone is trying to DDOS
    you, sorry, _you are going to get DDOS''d_, fail2ban will not help. but j3s i
    have a very valid super-dooper good reason for changing the default OpenSSH port
    of 22 to some other port well, okay fine. go ahead. but please take the following
    into account: * changing your SSH port to non-root port (>1024) means that if
    the SSH daemon dies, any userland process can take its'' place. this is bad. *
    changing your SSH port means that you''ll have to do a bunch of fuckery to get
    basic functionality working. you will very likely waste hours of your life. you
    will have to google "rsync ssh non standard port" every time you want to use rsync.
    you will have to remember scp flags. this is also bad. probably worse. * you will
    have to tell the port to anyone else who tries legitimately accessing your system.
    in my mind, the only valid use-case for switching your default SSH port is that
    flipping it to listen on port 80 or 443 will get around most workplace firewalls.
    well okay fine, OpenSSH is a special case though, right? any application that
    is used to being bruteforced will likely have protections implemented that you
    can use against such bruteforcing. for an interesting read, check out spamd: https://man.openbsd.org/spamd
    > When a sending host talks to spamd, the reply will be > stuttered. That is,
    the response will be sent back a > character at a time, slowly. For blacklisted
    hosts, the > entire dialogue is stuttered. For greylisted hosts, the > default
    is to stutter for the first 10 seconds of > dialogue only. hilarious. are you
    okay? not really aka, my recommendations: * understand the security mechanisms
    built-in to your application/daemon * use those mechanisms * get on with your
    life misc [1]: https://capsul.org fail2ban CVEs: https://www.cvedetails.com/vendor/5567/Fail2ban.html
    SSH hardening: https://linux-audit.com/audit-and-harden-your-ssh-configuration/'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[fail2ban sucks](https://www.example.org/fail2ban_sucks) 2020-03-22 -> fail2ban
    sucks 我在互联网上多次提出了这个论点，所以我想把它写下来，这样我就可以直接链接到它。我觉得这通常是一个有争议的观点。重要说明：我并不是说 fail2ban
    对每种用例都不好，我主要是以这样的方式写作，试图对抗我在各处看到的狂热的 fail2ban 推荐，我认为这是危险的。如果你喜欢 fail2ban，那就用吧
    - 但这是我的想法。对于那些不熟悉 fail2ban 的人，通常来说，它是一款软件，用于监视日志文件中的登录失败，然后与防火墙交互，以阻止属于这些失败的 IP
    地址。它是可配置的，以便可以说“如果某个 IP 在 SSH 上连续登录失败 10 次，则阻止它 1 小时。”我在互联网上经常看到 fail2ban 被推荐。通常当一个新的服务器管理员设置服务器并询问所有这些奇怪的
    SSH 尝试时，fail2ban 就会出现。这里有一些 fail2ban 粉丝的引用： > 一个方便的服务是 fail2ban，它会自动 > 将 IP 地址添加到防火墙，如果失败尝试足够多的话
    > 为了禁止它们，你可以尝试使用 fail2ban。似乎是一种常见的做法 > 对于这种类似机器人的活动，一个好的密码与 iptables 速率限制、fail2ban
    和日志监视更好。 > 如果你玩得开心的话，非标准端口和/或 fail2ban 可以防止日志垃圾邮件。 > 我觉得最好/最懒的组合是 ufw/ssh/fail2ban/f2b-loop/logwatch。我有几个论点，这是摘要：不要更改你的标准端口。不要使用
    fail2ban。使用内置机制加固你的应用程序。如果你需要为某些应用程序提供超级额外的安全性，请只允许受信任的 IP 范围 - 使用 IP 白名单。大多数人都是在过度设计。fail2ban
    糟透了，让我数数它的缺点。fail2ban： * 不会阻止高级持续威胁 * 有时会给你带来麻烦 * 有时可能会给 *你的用户* 带来麻烦 * 使你暴露于 fail2ban
    的漏洞 * 可能会让你觉得你的系统比实际上更安全 * 在最佳情况下，fail2ban：不比正确配置的应用程序更安全 * 实际上比正确配置的应用程序_更_不安全
    在最好的情况下，fail2ban：什么都没做，在最糟糕的情况下，fail2ban：给你带来巨大的麻烦或完全锁定你出来 让我们设身处地地想象一下一个新的系统管理员的心态。他们启动了一个新的
    capsul[1]，他们在他们的新系统周围窥探。突然间，他们注意到他们的 SSH 日志 - 数百个来自俄罗斯和中国的 IP 地址一次又一次地试图登录到他们的系统中。自然地，这引发了人们可能称之为“不好的氛围”。这让系统感觉不够清洁。谁决定这样做是可以的？我刚刚完成了设置这个系统，它已经被攻击了！？不要听他们的建议，新的管理员。只需正确设置
    SSH，不用担心任何事情。这是我的理由。首先，让我们想一想这些 IP 到底属于谁。 * 机器人 数以万计的机器人正在尝试对地球上已知的每个服务使用常见的用户名/密码组合
    - SSH 并不特殊。这适用于互联网上的每个登录页面，这些页面期望有用户名和密码。想想电子邮件和 neocities。想想 wordpress 管理员页面和留下大门大开的数据库接口。如果你不把你的服务配置为在公共接口上侦听，而这些服务配置的用户名像“admin”和密码像“admin”，你就没什么可担心的。
    * 好奇的用户 朋友想要捉弄你，对 SSH 一无所知的孩子，也许是在酒吧惹恼了你的那个女孩，她的笔记本电脑上安装了 Kali。专业提示：这些尝试可能会比机器人的尝试不成功。
    * 高级持续威胁 通常是国家行为者，也许是一个有怨恨的僵尸网络操作员。无论哪种情况，fail2ban 无济于事 - 这些用户可以像看到矩阵一样通过代理尖叫。他们可以每秒变换十九百万次
    IP 地址而不眨眼。你可以用 fail2ban 禁止地球四分之一的 IP 地址 - 攻击者会使用另一个四分之一。我想说的'
- en: follow me on [mastodon!](https://merveilles.town/@j3s)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在[mastodon！](https://merveilles.town/@j3s)上关注我！
- en: last updated 2020-03-22T00:00:00.000Z
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后更新于2020-03-22T00:00:00.000Z
