- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:07:34'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:07:34
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: scrapscript.py | Max Bernstein
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scrapscript.py | Max Bernstein
- en: 来源：[https://bernsteinbear.com/blog/scrapscript/](https://bernsteinbear.com/blog/scrapscript/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://bernsteinbear.com/blog/scrapscript/](https://bernsteinbear.com/blog/scrapscript/)
- en: '[Scrapscript](https://scrapscript.org/) is a small, pure, functional, content-addressable,
    network-first programming language. It’s designed to allow creating small, simply
    shareable programs. The language was created by [Taylor Troesh](https://taylor.town/)
    and the main implementation was created by me and [Chris](https://www.chrisgregory.me/).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[Scrapscript](https://scrapscript.org/) 是一种小型、纯粹的、功能型、内容可寻址的、以网络为先的编程语言。它旨在允许创建小型、简单共享的程序。该语言由
    [Taylor Troesh](https://taylor.town/) 创建，主要实现由我和 [Chris](https://www.chrisgregory.me/)
    创建。'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I’m not going to fill out the [usual checklist](https://www.mcmillen.dev/language_checklist.html)—that’s
    not the point of the post, and a lot of it is answered on the website. This post
    is more about the implementation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我不打算填写 [通常的清单](https://www.mcmillen.dev/language_checklist.html)——这不是本文的重点，而且很多问题在网站上都有答案。本文更多地涉及实现方面的内容。
- en: A bit of history
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一点历史
- en: In April of 2023, I saw scrapscript posted on Hacker News and sent it to Chris.
    We send each other new programming languages and he’s very into functional programming,
    so I figured he would enjoy it. He did!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 2023 年 4 月，我在 Hacker News 上看到了 scrapscript 的发布，并将其发送给了 Chris。我们经常互相发送新的编程语言，他非常喜欢函数式编程，所以我想他会喜欢它。他确实喜欢！
- en: But we didn’t see any links to download or browse an implementation, so we were
    a little bummed. We love trying stuff out and getting a feel for how it works.
    A month or two passed and there still was not an implementation, so we decided
    to email Taylor and ask if we could help.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们没有看到任何下载或浏览实现的链接，所以我们有点失望。我们喜欢尝试各种东西，了解它们的运作方式。一个月或两个月过去了，仍然没有实现，所以我们决定给
    Taylor 发电子邮件问问我们能否提供帮助。
- en: 'Subject: Chris and I would like to help you with scrapscript'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 主题：Chris 和我想帮你处理 scrapscript
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hi Taylor,
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 嗨 Taylor，
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: My friend Chris (cc’ed) and I are excited about scrapscript. This is the kind
    of project we have talked about building for years. He’s an ML guy with an unreasonable
    interest in Haskell and I’m a PL/compilers guy (not as much into Haskell) and
    would be very interested in chipping in, or at least trying early betas.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我的朋友 Chris（抄送）和我对 scrapscript 感到兴奋。这是我们多年来一直想要构建的项目。他是一个对 Haskell 具有不合理兴趣的 ML
    程序员，我是一个 PL/编译器程序员（对 Haskell 不是很感兴趣），很乐意提供帮助，或者至少尝试早期版本。
- en: ''
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Chris: https://www.chrisgregory.me/'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Chris：https://www.chrisgregory.me/
- en: 'Me: https://bernsteinbear.com/'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我：https://bernsteinbear.com/
- en: ''
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Cheers,
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 问候，
- en: Max
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Max
- en: Taylor was very gracious about the whole thing and shared his [small JavaScript
    implementation of scrapscript](https://github.com/tekknolagi/scrapscript/blob/71d1afecc32879aed9c80a3ed17cb81fe1c010d6/scrapscript.ts).
    For such a little file, it implemented an impressive featureset.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Taylor 对整个事情非常慷慨，并分享了他的 [scrapscript 的小型 JavaScript 实现](https://github.com/tekknolagi/scrapscript/blob/71d1afecc32879aed9c80a3ed17cb81fe1c010d6/scrapscript.ts)。对于这样一个小文件，它实现了一个令人印象深刻的功能集。
- en: Chris nor I are particularly good at JavaScript and we figured more implementations
    couldn’t hurt, so we decided to make a parallel implementation with the same features.
    While Taylor’s primary design constraint was implementation size, ours was some
    combination of readability and correctness. This meant that we wrote a lot of
    tests along the way to pin down the expected behavior.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Chris 和我对 JavaScript 不是特别擅长，我们认为更多的实现不会有害，所以我们决定用相同的功能制作一个并行实现。虽然 Taylor 的主要设计约束是实现大小，但我们的约束是可读性和正确性的某种组合。这意味着我们在编写过程中撰写了大量的测试来确定预期的行为。
- en: Two days into this little hackathon, we told Taylor and he was pretty happy
    about it, so we started having semi-regular chats and continued hacking. Three
    weeks later, we opened up [the repo](https://github.com/tekknolagi/scrapscript)
    to the public. Please take a look around! Most of it is in one file, `scrapscript.py`.
    This was one of our early design decisions…
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个小型黑客马拉松进行了两天之后，我们告诉了 Taylor，他对此感到非常高兴，所以我们开始定期交流并继续进行编程。三周后，我们将 [repo](https://github.com/tekknolagi/scrapscript)
    公开了。请随意查看！大部分内容都在一个文件中，`scrapscript.py`。这是我们早期的设计决策之一…
- en: Implementation design decisions
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现设计决策
- en: 'While we weren’t explicitly trying to keep the implementation size down like
    Taylor was, we did want to keep it self-contained. That led to a couple of implicit
    and explicit design choices:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们没有像 Taylor 一样明确地试图控制实现的大小，但我们确实希望将其保持自包含。这导致了一些隐式和显式的设计选择：
- en: '**No external dependencies for core features.** Keep the core understandable
    without needing to go off and refer to some other library.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**核心功能没有外部依赖。**使核心可理解，而无需去查阅其他库。'
- en: As a sort of corollary, **try to limit dependencies on unusual or fancy features
    of the host programming language (Python).** We wanted to make sure that porting
    the implementation to another programming language was as easy as possible.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作为某种推论，**尽量减少对主机编程语言（Python）不寻常或花哨特性的依赖。**我们希望确保将实现移植到另一种编程语言尽可能容易。
- en: '**Test features at the implementation level and end-to-end.** Write functions
    that call `tokenize` and `parse` and `eval_exp` explicitly so that we catch errors
    and other behavior as close to the implementation as possible. Also write full
    integration tests, because those can be used as a feature showcase and are easily
    portable to other implementations.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**在实现级别和端到端的测试功能。**编写调用`tokenize`、`parse`和`eval_exp`的函数，以便我们尽可能地捕获错误和其他行为。同时编写完整的集成测试，因为这些测试可以作为功能展示，并且很容易移植到其他实现中。'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Choosing Python was mostly a quirk. Python is not in general special; it just
    happens to be a language that Chris and I have worked with a lot.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Python主要是一个怪癖。Python一般来说并不特别；它只是恰好是我和克里斯经常使用的一种语言。
- en: Consequences of our testing strategy
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们测试策略的后果
- en: Making sure to test early and test thoroughly had some excellent consequences.
    It meant that we could keep a record of the expected behavior we discovered in
    `scrapscript.js` as we ported it and have that record continuously checked. It
    also meant that as we [gutted and re-built it](https://github.com/tekknolagi/scrapscript/commit/082e30375225394f30fd270ffdcee7f5d63173ae),
    we felt very confident that we weren’t breaking everything.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 确保尽早进行测试并进行彻底的测试带来了一些出色的后果。这意味着，我们可以在将其移植时，记录在`scrapscript.js`中发现的预期行为，并持续检查该记录。这也意味着，当我们[彻底重建它](https://github.com/tekknolagi/scrapscript/commit/082e30375225394f30fd270ffdcee7f5d63173ae)时，我们非常有信心我们没有把一切都搞砸。
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: All the tests continued to pass and we could even enable a new one!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的测试都继续通过，我们甚至可以启用一个新的测试！
- en: Why is this interpreter different from all other interpreters?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么这个解释器与所有其他解释器不同？
- en: It’s not. It’s a pretty bog-standard tree-walking interpreter for a juiced-up
    lambda calculus^(. Perhaps we’ll eventually generate bytecode or some other IR
    and compile it, but we do not have any performance problems (yet). And scrapscript
    doesn’t feel like an “industrial strength” language; nobody is writing large applications
    in it and the language is expressly not designed for that.)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不是。这是一个相当标准的树遍历解释器，用于增强的lambda演算^(也许我们最终会生成字节码或其他IR并将其编译，但我们目前没有任何性能问题。而且scrapscript并不像一个“工业强度”的语言；没有人在其中编写大型应用程序，而且该语言明确不是为此设计的。)
- en: It’s a little different *for me*, though, because it has features that I have
    never implemented before! In particular, scrapscript supports some pretty extensive
    pattern matching, which we had to learn how to implement from scratch.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说有点不同，因为它具有我以前从未实现过的功能！特别是，scrapscript支持一些相当广泛的模式匹配，我们不得不学习如何从零开始实现它。
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It’s also different because it’s the first from-scratch language implementation
    I have worked on with someone else (I think). Chris has been an excellent co-implementor,
    which is very impressive considering it his first programming language implementation
    *ever*!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 它也不同，因为这是我与他人合作的第一个从零开始的语言实现（我想）。克里斯一直是一个出色的共同实现者，考虑到这是他第一次实现编程语言，这是非常令人印象深刻的！
- en: Some neat implementation features
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些巧妙的实现特性
- en: Why have a little programming project if you don’t get to try out some new tricks
    and techniques?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不尝试一些新的技巧和技术，为什么要有一个小型编程项目呢？
- en: The REPL
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: REPL
- en: You might have seen [my recent blog post](/blog/simple-python-repl/) about building
    a featureful REPL using a nice library that Python gives you. I wrote that post
    while learning about all that stuff for scrapscript. Scrapscript’s REPL implementation
    is pretty short but it has `readline` support, tab completion, line continuation,
    and more. Thanks, Python!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经看过[我最近的博客文章](/blog/simple-python-repl/)，关于使用Python提供的一个很好的库构建一个功能丰富的REPL。我在学习有关scrapscript的所有内容时编写了那篇文章。Scrapscript的REPL实现非常简短，但它具有`readline`支持、制表符补全、行继续等功能。谢谢，Python！
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: An actually portable executable
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个真正可移植的可执行文件
- en: We build scrapscript as an Actually Portable Executable using [Cosmopolitan](https://justine.lol/cosmopolitan/)
    by Justine Tunney. This means that it is packaged with a small libc implementation
    and Python runtime into one (reasonably) small, self-contained executable. This
    executable is theoretically runnable on all major platforms without fuss. And
    the Docker container that we build with it is ~~36MB~~ 25.5MB in total (!) because
    it does not need to have a bunch of operating system stuff in the filesystem.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Justine Tunney 的[Cosmopolitan](https://justine.lol/cosmopolitan/)将 scrapscript
    构建为一个实际的便携可执行文件。这意味着它打包了一个小的 libc 实现和 Python 运行时到一个（相对）小的、自包含的可执行文件中。这个可执行文件理论上可以在所有主要平台上轻松运行。而我们用它构建的
    Docker 容器总共只有 25.5MB（~~36MB~~），因为它不需要在文件系统中有一堆操作系统的东西。
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Check out [build-com](https://github.com/tekknolagi/scrapscript/blob/e38210f7aa8ce375a7e615b301922bd7b9710d37/build-com)
    and [the Dockerfile](https://github.com/tekknolagi/scrapscript/blob/e38210f7aa8ce375a7e615b301922bd7b9710d37/Dockerfile)
    for more information.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看[build-com](https://github.com/tekknolagi/scrapscript/blob/e38210f7aa8ce375a7e615b301922bd7b9710d37/build-com)和[Dockerfile](https://github.com/tekknolagi/scrapscript/blob/e38210f7aa8ce375a7e615b301922bd7b9710d37/Dockerfile)以获取更多信息。
- en: The web REPL
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网页 REPL
- en: We wanted to have an interactive playground like a bunch of other programming
    languages do. I, however, didn’t feel like implementing scrapscript a second time.
    So instead I wrote a little stateless server program in Python that is a function
    `(env, exp) -> (env', result)` and a JS program to drive the web requests. What
    you get is [the web REPL](https://scrapscript.fly.dev/repl). Building this required
    being able to serialize objects and environments so that they could be stored
    on the client as opaque blobs. That’s mostly working, but I don’t have a full
    solution for objects with cycles. Yet. It’s in progress!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望有一个像许多其他编程语言一样的交互式 playground。然而，我并不想再次实现 scrapscript。所以我写了一个小的无状态服务器程序，在
    Python 中是一个函数`(env, exp) -> (env', result)`，并编写了一个 JS 程序来驱动 web 请求。你得到的是[web REPL](https://scrapscript.fly.dev/repl)。构建这个需要能够序列化对象和环境，以便它们可以作为不透明
    blob 存储在客户端上。这基本上已经可以了，但我还没有一个完整的解决方案来处理带有循环的对象。然而，这个功能正在进行中！
- en: In progress features
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进度中的功能
- en: As I mentioned before, serializing objects with cycles is a work in progress.
    This requires adding support for fake `ref` types inside the serializer and resolving
    them in the deserializer. It should be ready to ship soon enough, though.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，带有循环的对象序列化是一个正在进行的工作。这需要在序列化器内部添加对假`ref`类型的支持，并在反序列化器中解析它们。不过，很快就应该准备好了。
- en: We also don’t have full support for alternates as described on the main website.
    It shouldn’t be particularly difficult but nobody has implemented it yet. We did
    get symbols working, though, so we have `#true` and `#false` implemented inside
    scrapscript.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有完全支持主网站上描述的备用功能。这并不特别困难，但还没有人实现它。不过，我们确实让符号起作用了，所以我们在 scrapscript 中实现了`#true`和`#false`。
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We’re also working on the first implementations of scrapyards. We’re not sure
    exactly what design direction to go yet so Taylor and I have each prototyped it
    in different ways. My implementation uses Git as a versioned blob store to be
    very lazy about it and re-use a bunch of existing infrastructure. That’s one of
    my personal goals for this implementation: minimal implementation first.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在第一次实现 scrapyards。我们还不确定要走哪种设计方向，所以 Taylor 和我各自以不同的方式原型化了它。我的实现使用 Git 作为版本化的
    blob 存储，以便对其非常懒惰，并重复使用一堆现有的基础设施。这是我对这个实现的个人目标之一：首先是最小化实现。
- en: Scrapscript comes with a notion of platforms—different sets of APIs given to
    a scrap by the host running it. It’s not really built in yet but I did prototype
    a “web platform”. This was a little Python shell around a scrap that fed it web
    requests as scrap records. Then the scrap could use pattern matching to route
    the request and build up a request. As Taylor says on the website, scrapscript
    is pretty decent for an HTML DSL.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Scrapscript 带有平台的概念——主机运行时给 scrap 提供的不同 API 集。目前还没有真正实现，但我确实原型化了一个“web 平台”。这是一个围绕
    scrap 的小 Python shell，将 web 请求作为 scrap 记录提供给它。然后 scrap 可以使用模式匹配来路由请求并构建请求。正如网站上所说的，scrapscript
    对于 HTML DSL 来说相当不错。
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the future I think it could be fun to—similar to the web REPL—write a function
    `(db, request) -> (db', response)` and have a stateless webserver kernel that
    can still store data if the outside world applies the delta to the database.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，我认为编写一个函数`(db, request) -> (db', response)`并拥有一个无状态的 webserver 内核，即使外部世界将变化应用到数据库上，它仍然可以存储数据，可能会很有趣。
- en: Chris and I also talked about building out a graphics API or graphics platform.
    We’re not sure what this looks like, but he is into cellular automata and it would
    be neat to be able to write pixels directly from scrap without going through PPM
    or something.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 克里斯和我还谈论了构建一个图形 API 或图形平台的事情。我们不确定这是什么样子，但他对细胞自动机很感兴趣，能够直接从 scrap 写像素，而不用经过
    PPM 或其他东西，这将是很棒的。
- en: Last, but certainly not least, we are working on a scrapscript compiler. The
    neat thing, though, is that this compiler is written *in scrapscript*. The goal
    is to port scrapscript to the browser not by writing a new interpreter in JS,
    but by compiling the compiler to JS (on top of the Python interpreter), then running
    the compiler (now JS code) on the web.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，但肯定不是最不重要的，我们正在开发一个 scrapscript 编译器。不过，有趣的是，这个编译器是用*scrapscript*编写的。目标是通过将编译器编译成
    JS（在 Python 解释器之上），然后在 web 上运行编译器（现在是 JS 代码），将 scrapscript 移植到浏览器上，而不是通过在 JS 中编写一个新的解释器。
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Thanks for reading
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 感谢阅读。
- en: Well first, play with [the web REPL](https://scrapscript.fly.dev/repl). Then
    take a look at [the repo](https://github.com/tekknolagi/scrapscript) and start
    contributing! Since we don’t have a huge backlog of well-scoped projects just
    yet, I recommend posting in the [discourse group](https://scrapscript.discourse.group/)
    first to get an idea of what would be most useful and also interesting to you.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，玩一玩[web REPL](https://scrapscript.fly.dev/repl)。然后查看[repo](https://github.com/tekknolagi/scrapscript)，开始贡献吧！由于我们目前还没有一大堆明确定义范围的项目积压，我建议先在[discourse
    group](https://scrapscript.discourse.group/)发帖，了解一下对你来说最有用和最有趣的是什么。
