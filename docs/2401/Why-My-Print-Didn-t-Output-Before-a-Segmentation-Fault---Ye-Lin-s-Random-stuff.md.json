["```\n#include <stdio.h>  int main(void) {  printf(\"%s\", \"Hello!\"); int *p = NULL; *p = 5; // Will not be reached due to crash above printf(\"%s\", \"Another Hello!\"); } \n```", "```\n$ gcc -Wall -Wextra -o hello hello.c && ./hello Segmentation fault (core dumped) \n```", "```\n#include <stdio.h>  int main(void) {  printf(\"%s\", \"Hello!\"); printf(\"%s\", \"Another Hello!\"); } \n```", "```\nubuntu@playground:~$ gcc -Wall -Wextra -o hello hello.c && ./hello Hello!AnotherHello!ubuntu@playground:~$ \n```", "```\n#include <stdio.h>  int main(void) {  // This should prints \"Hello!\" and // flushes to an output device (stdout) due to newline printf(\"%s\\n\", \"Hello!\"); int *p = NULL; *p = 5; printf(\"%s\\n\", \"Another Hello!\"); } \n```", "```\n$ gcc -Wall -Wextra -o hello hello.c && ./hello Hello! Segmentation fault (core dumped) \n```", "```\n$ ./hello Hello! Segmentation fault (core dumped) $ echo $? 139 \n```", "```\n#include <stdio.h>  int main(void) {  printf(\"%s\", \"Hello!\"); fflush(stdout); int *p = NULL; *p = 5; printf(\"%s\\n\", \"Another Hello!\"); } \n```", "```\n$ gcc -Wall -Wextra -o hello hello.c && ./hello Hello!Segmentation fault (core dumped) \n```", "```\n#include <stdio.h>  int main(void) {  fprintf(stderr, \"%s\", \"Hello!\"); int *p = NULL; *p = 5; printf(\"%s\\n\", \"Another Hello!\"); } \n```", "```\n$ gcc -Wall -Wextra -o hello_stderr hello_stderr.c && ./hello_stderr Hello!Segmentation fault (core dumped) \n```"]