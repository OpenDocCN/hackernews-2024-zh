- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:12:43'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:12:43'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Why Tailwind Isn’t for Me | The Spicy Web
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么Tailwind不适合我 | The Spicy Web
- en: 来源：[https://www.spicyweb.dev/why-tailwind-isnt-for-me/](https://www.spicyweb.dev/why-tailwind-isnt-for-me/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.spicyweb.dev/why-tailwind-isnt-for-me/](https://www.spicyweb.dev/why-tailwind-isnt-for-me/)
- en: '*Breaking News!* The brand-new course **[CSS Nouveau](/css-nouveau)** is now
    available! This is the first release in the **THE SPICY WEB** Courses Series.
    **[Go take a look around and sign up today!](/css-nouveau)**'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*热点新闻！*全新课程 **[CSS Nouveau](/css-nouveau)** 现已上线！这是 **THE SPICY WEB** 课程系列的第一版发布。**[去看看并今天注册！](/css-nouveau)**'
- en: '**August 2022 Update**: Still working on that design systems course (😅), but
    in the meantime, I’ve written [The Three Laws of Utility Classes](/the-three-laws-of-utility-classes/)
    and announced [Vanilla Breeze](https://www.vanillabreeze.dev), a new open source
    tool which will convert Tailwind “class soup” into clean, portable, vanilla HTML
    + CSS! Progress…'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**2022年8月更新**：仍在致力于设计系统课程（😅），但与此同时，我已经撰写了[实用类的三大法则](/the-three-laws-of-utility-classes/)，并宣布了[Vanilla
    Breeze](https://www.vanillabreeze.dev)，这是一个新的开源工具，将把Tailwind的“class soup”转换为干净、可移植的纯HTML
    + CSS！进展中…'
- en: '**March 2022 Update**: Well the JIT is now the default way of managing Tailwind
    output generation, so that’s cool. Unfortunately, Tailwind’s purview has only
    grown in directions that are [breathtaking in their weirdness](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values).
    I remain as dubious of TW as ever, and in fact have started writing a course *specifically
    designed* to teach people how to switch *away* from Tailwind and use the best
    of today’s “vanilla” CSS. **Stay tuned.** 😁 –JW'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**2022年3月更新**：嗯，JIT现在是管理Tailwind输出生成的默认方式，所以很酷。不幸的是，Tailwind的视野只在[其怪异程度令人惊叹的方向上](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values)增长了。我对TW的怀疑一直存在，事实上，我已经开始编写一个课程，*专门设计*教人们如何*远离*Tailwind，并使用当今“纯粹”CSS的最佳实践。**敬请关注。**
    😁 - JW'
- en: '**March 2021 Update**: [the experimental new JIT (Just-In-Time) compiler for
    Tailwind](https://twitter.com/tailwindcss/status/1374675986965528576?s=21) has
    the potential to alleviate some of the concerns outlined here and also provides
    some intriguing new benefits. I haven’t tried it out yet, but once I do I’ll formulate
    additional thoughts and link to them from here. –JW'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**2021年3月更新**：[Tailwind的试验性新 JIT（Just-In-Time）编译器](https://twitter.com/tailwindcss/status/1374675986965528576?s=21)有望缓解此处概述的一些担忧，并提供一些有趣的新优势。我还没有尝试过，但一旦我尝试过，我会形成额外的想法，并从这里链接到它们。-
    JW'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: I’ve gotten into more than one heated argument on the interwebs lately over
    [Tailwind CSS](https://tailwindcss.com). I’m not proud of this. I don’t like being
    at odds with anybody. I think the folks building Tailwind are talented people.
    But at a pure technical level, I simply don’t like Tailwind. Whoever it was built
    for, **it was not built for me**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最近我在网络上为[Tailwind CSS](https://tailwindcss.com)陷入了不止一场激烈的争论。我为此感到不骄傲。我不喜欢与任何人对立。我认为构建Tailwind的人都是有才华的人。但从纯技术角度来看，我简直不喜欢Tailwind。**它不是为我而建的**。
- en: And in one sense, that’s fine. There are *tons* of web technologies out there
    which I’ll never use. Doesn’t mean they’re bad. There are plenty of groovy tech
    stacks to go around.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种意义上说，这没关系。世界上有*很多*我永远不会使用的网络技术。这并不意味着它们不好。有很多酷炫的技术栈供选择。
- en: The problem I keep running into however is this increasing popular sentiment
    that Tailwind *is the future* (man). It’s *the way things should be done*. In
    other words, it’s opinionated and it inspires a cadre of evangelists. Again, on
    a certain level, that’s fine. Rails is very opinionated, for example, and I love
    using Rails.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但我一直遇到的问题是这种日益普遍的观点：Tailwind *是未来*（兄弟）。这是*应该做的事情*。换句话说，它有观点，并且它激发了一群狂热的信徒。同样，在某种程度上，这没问题。比如，Rails就很有观点，我喜欢用Rails。
- en: 'But Tailwind definitely throws down a gauntlet. I’ll quote directly from creator
    Adam Wathan highlighted right on the Tailwind website:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但是Tailwind确实提出了一个挑战。我将直接引用创始人亚当·瓦森在Tailwind网站上突出显示的内容：
- en: “Best practices” don’t actually work.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “最佳实践”实际上并不奏效。
- en: ''
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I’ve written a few thousand words on why traditional “semantic class names”
    are the reason CSS is hard to maintain, but the truth is you’re never going to
    believe me until you actually try it. If you can suppress the urge to retch long
    enough to give it a chance, I really think you’ll wonder how you ever worked with
    CSS any other way.
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我已经写了几千字来解释为什么传统的“语义类名”是 CSS 难以维护的原因，但事实上，除非你真的尝试过，否则你永远不会相信我。如果你能够克制住厌恶的冲动，给它一个机会，我真的认为你会想知道你是如何以其他方式使用
    CSS 的。
- en: Challenge accepted.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 挑战接受。
- en: I’ve tried it. And I’ve used it. A lot. A project one of my largest clients
    has me developing is built on top of React and Tailwind. So whatever you may come
    at me with, you can’t accuse me of not giving Tailwind the good ol’ college try.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我试过了。我用过了。很多。我最大的一家客户要求我开发的项目是基于 React 和 Tailwind 构建的。所以无论你拿什么来对付我，你都不能指责我没有充分尝试过
    Tailwind。
- en: Still not my thing. At all. In fact I have some real concerns about Tailwind,
    and what I find supremely frustrating is whenever I raise these concerns, I get
    immediate pushback from die-hard Tailwind fans who accuse me (in so many words)
    of just being a fucking idiot. As a programmer who has worked full-time in the
    web industry since the late 90s, that just doesn’t sit right with me.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说仍然不是我的菜。事实上，我对 Tailwind 有一些真正的担忧，而我发现极为令人沮丧的是，每当我提出这些担忧时，都会立即遭到死忠的 Tailwind
    粉丝的强烈反对，他们指责我（用了很多话）只是一个该死的白痴。作为一个自 90 年代末以来一直在网络行业全职工作的程序员，这让我感到非常不舒服。
- en: So since Twitter and Hacker News comments are apparently poor mediums for technical
    conversations of this magnitude, I will now attempt to outline the very real reasons
    why Tailwind is not for me.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以由于 Twitter 和 Hacker News 的评论显然不适合进行如此重要的技术对话，我现在将尝试概述 Tailwind 不适合我的真实原因。
- en: This first reason is an aesthetic concern, yet it’s intimately related to real
    technical challenges which I’ll outline shortly. But at the very least, I **hate**
    the way utility-css-only HTML looks. Hate, hate, hate it. Adam even acknowledges
    this head on when he begs us to “suppress the urge to retch long enough to give
    it a chance…”. This is a tacit admission that writing markup this way initially
    seems ugly and weird—but somehow we’ll eventually just “get over it” because the
    benefits are so great.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这第一个原因是审美上的关注点，但与我将很快概述的真正技术挑战密切相关。但至少，我**讨厌**只使用实用程序 CSS 的 HTML 看起来的方式。讨厌，讨厌，讨厌。当亚当直截了当地请求我们“克制一下厌恶的冲动，给它一个机会……”时，这是一种默认的承认，以这种方式编写标记最初看起来很丑陋和奇怪——但不知何故，我们最终会“克服它”，因为好处是如此之大。
- en: 'After a year of writing Tailwind, I haven’t gotten over it. Sorry folks! You’ll
    *never* get me to appreciate this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 写了一年的 Tailwind，我还没有摆脱它。抱歉，伙计们！你们永远都不会让我欣赏这一点：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now I already hear many of you screaming at your computer screens to tell me
    “dude, just use `@apply` if you want to keep your HTML clean! Problem solved!”
    Well, that is a potential solution, and in fact that’s what we’ve done on the
    aforementioned project. Much of our HTML is oriented around component-scoped class
    names (fairly close to BEM in concept) and thus we use `@apply` extensively. But
    that brings me to my next concern.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我已经听到很多人在电脑屏幕前尖叫着告诉我“伙计，如果你想保持你的 HTML 干净，就使用 `@apply`！问题解决了！”嗯，这是一个潜在的解决方案，事实上，这就是我们在上述项目中所做的。我们的大部分
    HTML 都是围绕组件作用域的类名（概念上与 BEM 相当接近），因此我们广泛使用 `@apply`。但这就引出了我的下一个担忧。
- en: 'Reason 2: `@apply` is fundamentally incompatible and non-standard (and largely
    unnecessary). [#](#reason-2-apply-is-fundamentally-incompatible-and-non-standard-and-largely-unnecessary)'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原因 2：`@apply` 从根本上是不兼容和不标准的（并且在很大程度上是不必要的）。[#](#reason-2-apply-is-fundamentally-incompatible-and-non-standard-and-largely-unnecessary)
- en: This is where a lot of Tailwind fans get tripped up and keep on arguing with
    me over and over again, so I’ll try to explain this as clearly and obviously as
    possible.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是很多 Tailwind 粉丝遇到困难并一遍又一遍地与我争论的地方，所以我会尽可能清晰和明显地解释这一点。
- en: '`@apply mt-3` in a CSS file *only* works if you use Tailwind. It requires the
    presence of Tailwind in your build process. If you remove Tailwind from your build
    process, that statement doesn’t work and your CSS is broken.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 CSS 文件中使用 `@apply mt-3` *只有* 当你使用 Tailwind 时才有效。它需要在你的构建过程中存在 Tailwind。如果你从构建过程中删除
    Tailwind，那么这个语句就不起作用，你的 CSS 就会出错。
- en: While it’s true you can take the generated output CSS of a site and use that
    without Tailwind, it’s typically a bundled compilation of dozens if not hundreds
    of small CSS files scattered around a codebase (if you write CSS-per-component
    files like we do). It’s not something you can count on for source code.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然你可以拿到一个网站的生成的输出 CSS 并且在不使用 Tailwind 的情况下使用它，但通常情况下它是一个捆绑编译的成百上千个小 CSS 文件在代码库中散布（如果你像我们一样编写
    CSS-per-component 文件）。这不是你可以依赖的源代码。
- en: Therefore, it’s simply the truth that CSS files built for Tailwind are non-standard
    (aka proprietary) and **fundamentally incompatible** with all other CSS frameworks
    and tooling. Once you go Tailwind, *you can never leave*. (da da dum 😱)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，事实上，为 Tailwind 构建的 CSS 文件是非标准的（即专有的）并且与所有其他 CSS 框架和工具不兼容。一旦你使用 Tailwind，*你就再也离不开*（da
    da dum 😱）。
- en: 'And as an added bonus, writing all your CSS files with `@apply` everywhere
    basically means you’re not learning and authoring CSS. You’re authoring Tailwind.
    No matter how many times you write `@apply flex`, that’s **not** the same as writing
    `display: flex`.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '而且作为额外的奖励，到处写`@apply`的所有 CSS 文件基本上意味着你不是在学习和编写 CSS。你正在编写 Tailwind。无论你写了多少次`@apply
    flex`，那都**不是**写`display: flex`。'
- en: Now I realize most of us aren’t in the habit of trying to swap out CSS frameworks
    on projects on a regular basis. But believe me, I have done this! I’m on a client
    project right now where we’re migrating from Foundation to Bulma. While it’s true
    that it requires updating a bunch of HTML and some of the stylesheets in use,
    rest assured any custom bits of styling we wrote before will work again without
    hassle, because when you write plain ol’ CSS (or even Sass), it just works no
    matter what.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我意识到，我们大多数人并不习惯定期在项目中更换 CSS 框架。但相信我，我已经做过这个！我现在正在一个客户项目上，我们正在从 Foundation
    迁移到 Bulma。虽然这需要更新一堆 HTML 和一些正在使用的样式表，但请放心，以前我们编写的任何自定义样式都将再次无忧无虑地工作，因为当你编写普通的
    CSS（甚至是 Sass）时，无论如何都会生效。
- en: And while `@apply` seems cool on the face of it, it ends up becoming an enormous
    crutch. For example, I like the way Tailwind makes writing styles using CSS Grid
    techniques pretty straightforward. Unfortunately, after having done so, I still
    don’t really understand Grid syntax itself. I remain ignorant of the open CSS
    standard.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，虽然`@apply`在表面上看起来很酷，但最终会变成一个巨大的支撑。例如，我喜欢 Tailwind 使用 CSS Grid 技术编写样式的方式很简单。不幸的是，尽管如此，我仍然不太理解
    Grid 语法本身。我对开放的 CSS 标准一无所知。
- en: As for why `@apply` in the grand scheme of things is largely unnecessary, that
    brings me to my third point.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 至于为什么`@apply`在整体计划中基本上是不必要的，这就引出了我的第三点。
- en: 'Reason 3: Tailwind’s focus on design systems and tokens could mostly be replaced
    by CSS Custom Properties (aka variables)—which IS a standard. [#](#reason-3-tailwinds-focus-on-design-systems-and-tokens-could-mostly-be-replaced-by-css-custom-properties-aka-variableswhich-is-a-standard)'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第三个原因：Tailwind 关注设计系统和标记的重点大部分可以被 CSS 自定义属性（即变量）取代—这是一个标准。[#](#reason-3-tailwinds-focus-on-design-systems-and-tokens-could-mostly-be-replaced-by-css-custom-properties-aka-variableswhich-is-a-standard)
- en: People initially like Tailwind because it comes out-of-the-box with a nice design
    system and lots of tokens you can tweak (colors, font sizes, spacing, etc.). It’s
    easy to get good-looking results quickly.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，人们喜欢 Tailwind 是因为它开箱即用，具有漂亮的设计系统和许多可以调整的标记（颜色、字体大小、间距等）。很容易快速获得好看的结果。
- en: The problem is that all these tokens are defined…in JavaScript. A CSS framework.
    Using JavaScript for its design tokens. In 2021.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是所有这些标记都是在 JavaScript 中定义的。一个 CSS 框架。使用 JavaScript 进行设计标记。在 2021 年。
- en: I hate to break it to you, but all modern browsers support this thing called
    CSS Custom Properties. You can define design tokens once at the `:root` level
    as variables, and utilize them **everywhere**. You can even modify them in real-time
    while the site is loaded, or overload them in particular parts of the DOM tree.
    And they work *great* with web components. More on that in a moment.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我很遗憾要告诉你，但所有现代浏览器都支持这个叫做 CSS 自定义属性的东西。你可以在`:root`级别定义一次设计标记作为变量，并**在任何地方**使用它们。你甚至可以在网站加载时实时修改它们，或在
    DOM 树的特定部分中重载它们。而且它们与 Web 组件*非常*兼容。稍后再详细介绍。
- en: 'So for example, in Tailwind you can write `class="mb-8"` and you get a `margin-bottom:
    2rem` style applied. But guess what you could do instead? Define `:root { --spacing-8:
    2rem }` in your stylesheet, and then write `margin-bottom: var(--spacing-8)` anywhere
    you want. As in literally anywhere: a stylesheet, or a JS component, *or even
    a* `style=` *attribute directly in HTML!*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，在 Tailwind 中，你可以写 `class="mb-8"`，然后应用 `margin-bottom: 2rem` 样式。但你猜猜你可以做什么？在你的样式表中定义
    `:root { --spacing-8: 2rem }`，然后在任何你想要的地方写 `margin-bottom: var(--spacing-8)`。就是在任何地方：一个样式表，或一个
    JS 组件，*甚至是* 直接在 HTML 中的 `style=` *属性！*'
- en: While the story gets a little murkier once you start looking at how to accommodate
    responsive breakpoints and so forth, nevertheless the principle here is that Tailwind
    uses a non-standard JavaScript-based build process for its design system at a
    time when you can build design systems using syntax that’s *native* to all modern
    browsers.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你开始考虑如何适应响应式断点等问题，故事就会变得有些混淆，但是在这里的原则仍然是，Tailwind 在设计系统中使用了一个非标准的基于 JavaScript
    的构建过程，而你可以使用所有现代浏览器 *本地* 支持的语法构建设计系统。
- en: Speaking of what’s native in modern web browsers…
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到现代 Web 浏览器中的本地功能...
- en: 'Reason 4: Tailwind forgets that web components exist. [#](#reason-4-tailwind-forgets-that-web-components-exist)'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第四个原因：Tailwind 忘记了 Web 组件的存在。[#](#reason-4-tailwind-forgets-that-web-components-exist)
- en: This is perhaps the biggest knock against Tailwind. It seemingly was conceived
    and promoted in a world where web components don’t exist. Tailwind CSS is completely
    unusable within the Shadow DOM. Some enterprising developers have come up with
    solutions where select bits of Tailwind styling can get injected into components
    through a build process, but it’s definitely a hack.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是针对 Tailwind 的最大批评。它似乎是在一个 Web 组件不存在的世界中构思和推广的。Tailwind CSS 在 Shadow DOM
    中完全无法使用。一些有远见的开发人员提出了解决方案，通过构建过程将一些 Tailwind 样式注入到组件中，但这绝对是一种妥协。
- en: Meanwhile, there are ways to build web component-based design systems today
    where global theming and component styling via the Shadow DOM (and exposed Parts)
    all work together. Again, you can do all this based on technology that’s built-in
    and native to all modern browsers. And before you shrug your shoulders and go
    back to your React or your Vue, bear in mind that web components are not only
    an integral part of the HTML/CSS/JS spec today but are increasingly at the heart
    of further advancements to browser technology (for example how advanced customization
    of form controls might work in the future).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，今天有多种构建基于 Web 组件的设计系统的方法，全局主题和通过 Shadow DOM（以及暴露的部件）进行的组件样式化都能够一起工作。同样，你可以基于所有现代浏览器内置且本地支持的技术进行所有这些操作。在你耸耸肩膀，回到
    React 或 Vue 之前，请记住，Web 组件不仅是今天 HTML/CSS/JS 规范的一个组成部分，而且越来越多地成为浏览器技术进一步发展的核心（例如，未来如何工作的高级表单控件定制）。
- en: Tailwind in this respect is no more helpful to you than Bootstrap or Foundation
    or any other CSS framework written years/decades ago. (Even my beloved Bulma!
    😢)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面，Tailwind 对你的帮助不比 Bootstrap 或 Foundation 或任何其他几年/几十年前编写的 CSS 框架更多。（甚至是我心爱的
    Bulma！ 😢）
- en: 'Reason 5: Finally, Tailwind encourages div/span-tag soup. [#](#reason-5-finally-tailwind-encourages-divspan-tag-soup)'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第五个原因：最后，Tailwind 鼓励使用 div/span 标记汤。[#](#reason-5-finally-tailwind-encourages-divspan-tag-soup)
- en: I almost included this in the previous point, but it really bears its own conversation.
    I have become convinced by now that using `<div>` and `<span>` tags everywhere
    in your markup is an anti-pattern. We live in a world where custom elements (aka
    `<whatever-you-can-dream-of>`) are fully supported and enabled by modern browsers.
    There’s virtually no reason you’re forced to write `<div class="card"></div>`
    when you can write `<ui-card></ui-card>`. And in fact it’s quite possible to use
    custom attributes along with elements to write *extremely expressive markup* that—compared
    to ye markup of ol’—looks quite futuristic!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我几乎把这个包含在前一个观点中，但它确实需要单独的讨论。我现在已经相信，到处在你的标记中使用 `<div>` 和 `<span>` 标签是一种反模式。我们生活在一个现代浏览器完全支持和启用自定义元素（又称
    `<whatever-you-can-dream-of>`）的世界。当你可以编写 `<ui-card></ui-card>` 时，没有什么理由你被迫写 `<div
    class="card"></div>`。事实上，你完全可以在元素中使用自定义属性来编写 *极具表现力的标记*，与过去相比，这种标记看起来非常 futurist！
- en: 'Take the [Shoelace](https://shoelace.style) web component library for example.
    Here’s a button:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以 [Shoelace](https://shoelace.style) Web 组件库为例。这是一个按钮：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And here’s a modal:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个模态窗口：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that this isn’t JSX. This isn’t XML. This isn’t some kind of fancy-pants
    template language you have to convert to ordinary HTML.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这不是 JSX。这不是 XML。这也不是某种你需要将其转换为普通 HTML 的花哨模板语言。
- en: '**This is HTML.** This is what modern markup can look like.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是 HTML。**这就是现代标记语言的样子。'
- en: 'Compare that to an example from Tailwind’s home page:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 将其与 Tailwind 官方网站上的一个示例进行比较：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Ewwwww. 🤢
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 呃…… 🤢
- en: There is a future world of HTML/CSS/JS (and in large part it’s here already)
    where you can write bespoke Grid/Flexbox layouts quickly and easily with vanilla
    CSS, set up design tokens with CSS variables, utilize a well-architected web component
    library like Shoelace (or even mix ‘n’ match two or three), and end up with a
    website/app that **looks amazing** and works quite well—all without needing *any*
    of the many megabytes of Tailwind utility classes that you then need to purge
    to get your performance back down to manageable levels.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个未来的 HTML/CSS/JS 世界（在很大程度上它已经存在了），在那里你可以使用原生 CSS 快速轻松地编写定制的网格/弹性布局，使用 CSS
    变量设置设计令牌，利用像 Shoelace 这样的精心构建的 Web 组件库（甚至混合两三个），最终获得一个**看起来很棒**且功能相当不错的网站/应用程序——而不需要
    *任何* Tailwind 的大量实用程序类，然后需要清除它们以将性能降至可管理的水平。
- en: In other words, Tailwind’s main selling point (besides rapid prototyping via
    utility classes) is its attractive design system—yet the way it implements that
    design system really kind of sucks! (Incompatible with web components by default,
    only minimally leverages CSS variables, doesn’t encourage custom elements/attributes
    with relevant scoped styling…)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，Tailwind 的主要卖点（除了通过实用程序类进行快速原型设计之外）是其具有吸引人的设计系统——但它实现该设计系统的方式实际上有点糟糕！（默认情况下与
    Web 组件不兼容，仅最小程度地利用 CSS 变量，不鼓励使用相关的作用域化样式的自定义元素/属性……）
- en: 'Which begs the question: how does Tailwind enable us to “build modern websites”
    exactly? On a pure technical level, I honestly don’t see it as being much of an
    improvement over Bootstrap. And Bootstrap at least provides an open-source component
    library for free. If you use Tailwind, [they ask you to pay for it](https://tailwindui.com).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这就引出了一个问题：Tailwind 究竟能让我们如何“构建现代网站”？从纯技术层面上讲，我真的不认为它比 Bootstrap 好多少。而 Bootstrap
    至少提供了一个免费的开源组件库。如果你使用 Tailwind，[他们会让你付费](https://tailwindui.com)。
- en: 'Conclusion: If you like Tailwind, use it! But don’t try to convince me it’s
    the future. [#](#conclusion-if-you-like-tailwind-use-it-but-dont-try-to-convince-me-its-the-future)'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论：如果你喜欢 Tailwind，就使用它吧！但不要试图说服我它是未来。[#](#结论如果你喜欢tailwind就使用它但不要试图说服我它是未来)
- en: Listen, we can go back and forth on the relative merits or problems with any
    technology. There are definitely some benefits to choosing Tailwind, most notably
    how you can go from blank page to fancy-pants design quickly by simply hammering
    out a bunch of div tags with utility classes.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 听着，我们可以就任何技术的相对优点或问题来回讨论。选择 Tailwind 明显有一些好处，最值得注意的是你可以通过简单地用实用程序类添加一堆 div 标签，快速从空白页面转变为花哨的设计。
- en: But after over a year of experience with Tailwind and weighing the pros and
    cons against other approaches to HTML, styling, and component-based web development
    in general, I’m thoroughly convinced that Tailwind does not represent the direction
    I wish to see the web head in as a whole. And apologies to all the Tailwind fans
    out there, but you just don’t have a compelling argument that will convince me
    otherwise.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在与 Tailwind 一年多的经验之后，并将其与其他处理 HTML、样式和基于组件的 Web 开发方法进行权衡后，我完全相信 Tailwind 并不代表我希望看到
    Web 发展的方向。对所有 Tailwind 的粉丝表示歉意，但你们没有令我改变看法的令人信服的论点。
- en: And that’s why Tailwind isn’t for me. YMMV. 🙃
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么 Tailwind 不适合我。你的情况可能不同。🙃
