- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:22:06'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:22:06
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: On the Costs of Syscalls | Georg's Log
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对系统调用成本的探究 | George's Log
- en: 来源：[https://gms.tf/on-the-costs-of-syscalls.html](https://gms.tf/on-the-costs-of-syscalls.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://gms.tf/on-the-costs-of-syscalls.html](https://gms.tf/on-the-costs-of-syscalls.html)
- en: It's well known that [syscalls](https://en.wikipedia.org/wiki/System_call) are
    expensive. And that software mitigations against [CPU bugs](https://en.wikipedia.org/wiki/Transient_execution_CPU_vulnerability)
    (such as Meltdown) even have made them more expensive. But how expensive are they
    really? To begin to answer this question I wrote a small [micro-benchmark](https://github.com/gsauthof/osjitter/blob/master/bench_syscalls.cc)
    in order to measure the minimal costs of a syscall. Meaning the cost of syscalls
    one always has to pay whether a context-switch happens or not, even when the work
    in the kernel is minuscule, i.e. the costs of switching from [user-mode to kernel-mode](https://en.wikipedia.org/wiki/Context_switch#User_and_kernel_mode_switching)
    and back.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，[系统调用](https://zh.wikipedia.org/wiki/系统调用)是昂贵的。而软件对抗[CPU漏洞](https://zh.wikipedia.org/wiki/崩溃_(计算机安全))（如熔断）甚至使它们变得更加昂贵。但它们真的有多昂贵？为了开始回答这个问题，我写了一个小的[微基准](https://github.com/gsauthof/osjitter/blob/master/bench_syscalls.cc)来衡量系统调用的最小成本。这意味着不管是否发生上下文切换，甚至在内核工作微不足道时，也就是从[用户模式切换到内核模式](https://zh.wikipedia.org/wiki/上下文切换#用户模式和内核模式切换)和切换回去的成本。
- en: Methods
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法
- en: The user-kernel mode-switch [micro-benchmark](https://en.wikipedia.org/wiki/Benchmark_(computing)#Types_of_benchmark)
    uses Google's [benchmark library](https://github.com/google/benchmark) for the
    measurements and is [available in a git repository](https://github.com/gsauthof/osjitter/blob/master/bench_syscalls.cc).
    The repository also contains some helper scripts, e.g. a [playbook](https://github.com/gsauthof/osjitter/blob/master/helper/bench_playbook.py)
    for distributing it to and executing it on a bunch of hosts. The benchmark library
    repeats each case until the result is considered stable and the playbook allows
    for repeated executions of the test cases. In the following sections the median
    value of 100 repetitions is reported (real time in nanoseconds).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 用户内核模式切换[微基准](https://zh.wikipedia.org/wiki/基准测试_(计算机))使用了Google的[基准库](https://github.com/google/benchmark)进行测量，并且可在[git存储库](https://github.com/gsauthof/osjitter/blob/master/bench_syscalls.cc)中获得。该存储库还包含一些辅助脚本，例如一个[playbook](https://github.com/gsauthof/osjitter/blob/master/helper/bench_playbook.py)，用于将其分发到一组主机并在其上执行。基准库重复每个案例，直到结果被认为是稳定的，playbook允许重复执行测试用例。在以下各节中，报告了100次重复的中位数值（实际时间以纳秒为单位）。
- en: For the benchmark a bunch of syscalls is called that are expected to be very
    cheap, such as getting the user id (UID), the program id (PID), closing an invalid
    file descriptor, calling an non-existent syscall etc. Thus, a measurement should
    really just include two mode switches. As controls, a few cases don't call a syscall
    but do other cheap stuff.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基准测试，调用了一堆预期非常便宜的系统调用，比如获取用户 ID（UID）、程序 ID（PID）、关闭无效文件描述符、调用不存在的系统调用等。因此，一个测量应该真的只包括两次模式切换。作为对照，一些情况下不调用系统调用，而是执行其他廉价的操作。
- en: I ran the benchmark on a heterogeneous set of hosts, i.e. different kernels,
    operating systems and configurations. For more details see also the Hosts Section.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我在一组异构主机上运行了基准测试，即不同的内核、操作系统和配置。有关更多详细信息，还请参阅主机部分。
- en: Results and Discussion
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结果和讨论
- en: 'The following table shows the real time (ns) for the different cases:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了不同情况下的实际时间（纳秒）：
- en: '| host | 5i4250u | 7i6600u | ac3758 | x2643 | x2667h | x2667s | x2687w | x2689
    | x2690 | xg6144 | xg6148 | xg6246 | xg6256 | xg6256b | xs4110 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 主机 | 5i4250u | 7i6600u | ac3758 | x2643 | x2667h | x2667s | x2687w | x2689
    | x2690 | xg6144 | xg6148 | xg6246 | xg6256 | xg6256b | xs4110 |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- |'
- en: '| name |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 名称 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- |'
- en: '| assign | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 分配 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |'
- en: '| clock_gettime | 23 | 21 | 31 | 19 | 16 | 16 | 17 | 14 | 21 | 14 | 24 | 14
    | 13 | 13 | 24 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| clock_gettime | 23 | 21 | 31 | 19 | 16 | 16 | 17 | 14 | 21 | 14 | 24 | 14
    | 13 | 13 | 24 |'
- en: '| clock_gettime_mono | 23 | 22 | 32 | 16 | 16 | 16 | 17 | 14 | 21 | 15 | 24
    | 14 | 13 | 13 | 24 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| clock_gettime_mono | 23 | 22 | 32 | 16 | 16 | 16 | 17 | 14 | 21 | 15 | 24
    | 14 | 13 | 13 | 24 |'
- en: '| clock_gettime_mono_raw | 23 | 22 | 33 | 542 | 544 | 350 | 582 | 332 | 762
    | 660 | 427 | 274 | 122 | 290 | 218 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: '| clock_gettime_tai | 23 | 21 | 32 | 542 | 546 | 352 | 587 | 333 | 762 | 660
    | 427 | 274 | 122 | 292 | 218 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
- en: '| close | 568 | 262 | 275 | 484 | 495 | 283 | 514 | 277 | 668 | 610 | 356 |
    243 | 93 | 257 | 145 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
- en: '| getpid | 558 | 257 | 255 | 2 | 1 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 1 | 1 | 2
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
- en: '| getuid | 560 | 231 | 259 | 464 | 473 | 276 | 505 | 259 | 649 | 592 | 347
    | 224 | 78 | 239 | 137 |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
- en: '| nothing | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
- en: '| pthread_cond_signal | 3 | 2 | 6 | 14 | 13 | 12 | 14 | 11 | 15 | 10 | 17 |
    10 | 10 | 10 | 17 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
- en: '| sched_yield | 706 | 374 | 430 | 569 | 560 | 414 | 634 | 346 | 773 | 694 |
    454 | 280 | 126 | 300 | 232 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
- en: '| sqrt | 6 | 2 | 15 | 4 | 4 | 4 | 4 | 1 | 7 | 1 | 3 | 1 | 1 | 1 | 3 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
- en: '| sqrtrec | 4 | 4 | 15 | 2 | 3 | 2 | 3 | 2 | 3 | 3 | 5 | 3 | 3 | 3 | 5 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
- en: '| syscall | 560 | 252 | 265 | 440 | 460 | 269 | 497 | 243 | 620 | 579 | 345
    | 221 | 76 | 233 | 136 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
- en: Controls
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The cases used as controls are 'nothing' which literally does nothing, 'assign'
    which just assigns to a variable, `sqrt` which computes the square root of a small
    constant and `sqrtrec` which stacks a bunch of sqrt calls. The results for these
    are plausible, i.e. doing nothing is really measured as `10**-7` ns or so, the
    assignment costs 0.5 ns or so and computing the square root takes only a few ns.
    Perhaps the most remarkable result is, that computing the square root on a Atom
    CPU (ac3758) is pretty constant over the 2 cases, whereas on the other hosts its
    runtime depends on its argument.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Clock Gettime
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Looking at the syscalls, one relation that holds true on all hosts is that the
    `clock_gettime(CLOCK_REALTIME)` syscall is much faster than `getuid()` or `close()`.
    This can be explained by the fact that on Linux, `clock_gettime(CLOCK_REALTIME)`
    and a [few other syscalls](https://manpath.be/f34/7/vdso#L334) are implemented
    via the efficient [vDSO](https://en.wikipedia.org/wiki/VDSO) mechanism. Meaning
    when they are called no mode switch happens!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '`clock_gettime()` supports different clocks and not all of them are vDSO optimized
    on all kernels. The table shows that on RHEL 7 querying `CLOCK_MONOTIC_RAW` and
    `CLOCK_TAI` invokes a real syscall while on Fedora 33 kernels (5.12/5.13) these
    clock readings are also implemented as vDSO.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Dummy Signaling
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similarly, the dummy `pthread_cond_signal()` case, which signals without anybody
    listening, is much cheaper than a real syscall - since the C library doesn't have
    to call a real syscall but can just invoke some relatively cheap atomic operation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Getpid
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `getpid()` syscall is surprisingly fast on RHEL 7\. It turns out that RHEL
    7 ships an [older glibc version which caches the ID of a process](https://manpath.be/f34/2/getpid#L43)!
    Which arguably is a curious optimization, since, what's the point? I mean how
    often to you have to call `getpid()` in a program, really? At some point (around
    Fedora 26) this [feature was removed](https://bugzilla.redhat.com/show_bug.cgi?id=1469670)
    since it apparently caused more [trouble](https://yarchive.net/comp/linux/getpid_caching.html)
    than it's worth. Perhaps unsurprisingly, that [removal](https://bugzilla.redhat.com/show_bug.cgi?id=1469670)
    even [broke somebodies workflow](https://xkcd.com/1172/).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`getpid()`系统调用在RHEL 7上出奇地快。事实证明，RHEL 7使用了[较旧的glibc版本来缓存进程的ID](https://manpath.be/f34/2/getpid#L43)！这可能是一个有趣的优化，因为，这有什么意义呢？我是说，你多频繁地在程序中调用`getpid()`呢？在某个时候（大约Fedora
    26左右），这个[特性被移除了](https://bugzilla.redhat.com/show_bug.cgi?id=1469670)，因为显然它引起了更多的[麻烦](https://yarchive.net/comp/linux/getpid_caching.html)而不值得。也许并不奇怪的是，那个[移除](https://bugzilla.redhat.com/show_bug.cgi?id=1469670)甚至[破坏了某人的工作流程](https://xkcd.com/1172/)。'
- en: Real Syscalls
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 真实系统调用
- en: So looking at the real syscalls, the user-kernel mode switches cost in the order
    of a few hundred nanoseconds, on all hosts. The higher costs on some hosts can
    be explained by CPU bug mitigations being enabled (they are enabled by default)
    and/or kind of older/lower-end hardware. See also the Hosts Section for some details.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，查看真实的系统调用，用户态与内核态之间的切换成本大约在几百纳秒左右，对于所有主机来说都是如此。某些主机上较高的成本可以通过启用CPU缺陷修复（它们默认启用）和/或较旧/低端硬件来解释。另请参阅主机部分以获取一些详细信息。
- en: The fastest host is `xg6256` which manages to switch modes in less than 100
    ns. It has a fast CPU with good single core performance (Xeon Gold 6256), has
    frequency scaling disabled and runs at a constant 4.1 GHz frequency above it's
    base frequency (i.e. a frequency between the base and turbo frequency).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最快的主机是`xg6256`，它成功地在少于100纳秒内切换模式。它配备了一颗性能优异的快速CPU（至强金牌 6256），已禁用频率缩放，并以恒定的4.1
    GHz频率运行在其基础频率之上（即在基础和睿频频率之间的频率）。
- en: Sched Yield
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调度让步
- en: 'The `sched_yield()` syscall could be considered as a minimal work syscall,
    e.g. when there is nothing to yield to. Also, the benchmark process is running
    under the standard scheduling policy and on Linux [`sched_yield()` is described
    as](https://manpath.be/f34/2/sched_yield#L43):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`sched_yield()`系统调用可以被视为一个最小的工作系统调用，例如当没有东西可让出时。此外，基准进程正在标准调度策略下运行，并且在Linux下[`sched_yield()`被描述为](https://manpath.be/f34/2/sched_yield#L43)：'
- en: '`sched_yield()` is intended for use with real-time scheduling policies (i.e.,
    `SCHED_FIFO` or `SCHED_RR`). Use of `sched_yield()` with nondeterministic scheduling
    policies such as `SCHED_OTHER` is unspecified and very likely means your application
    design is broken.'
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`sched_yield()`旨在'
- en: So unspecified could mean that the syscall just bails out after the process'
    scheduling policy compares equal to `SCHED_OTHER`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 未指定可能意味着系统调用在进程的调度策略等于`SCHED_OTHER`后就退出了。
- en: On most hosts sched_yield 150 ns or so more expensive than a really minimal
    syscall such as `getuid()` - which indicates some more overhead, but not necessarily
    a context switch.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数主机上，`sched_yield`比一个真正的最小系统调用（如`getuid()`）昂贵大约150纳秒左右，这表明了一些额外的开销，但不一定是一个上下文切换。
- en: Nanosleep
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 纳秒睡眠
- en: 'A bit out of the competition is the `nanosleep()` syscall:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`nanosleep()`系统调用有点脱颖而出：'
- en: '| host | 5i4250u | 7i6600u | ac3758 | x2643 | x2667h | x2667s | x2687w | x2689
    | x2690 | xg6144 | xg6148 | xg6246 | xg6256 | xg6256b | xs4110 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 主机 | 5i4250u | 7i6600u | ac3758 | x2643 | x2667h | x2667s | x2687w | x2689
    | x2690 | xg6144 | xg6148 | xg6246 | xg6256 | xg6256b | xs4110 |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- |'
- en: '| name |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 名称 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
    | --- | --- | --- |'
- en: '| nanosleep0 | 52632 | 50474 | 52620 | 50588 | 50003 | 50011 | 50000 | 50014
    | 50312 | 50018 | 50000 | 50014 | 50000 | 50000 | 54866 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| nanosleep0 | 52632 | 50474 | 52620 | 50588 | 50003 | 50011 | 50000 | 50014
    | 50312 | 50018 | 50000 | 50014 | 50000 | 50000 | 54866 |'
- en: '| nanosleep0_slack1 | 4355 | 2836 | 7076 | 3247 | 2736 | 2483 | 2835 | 3908
    | 3401 | 2762 | 2870 | 2446 | 1974 | 2248 | 3837 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| nanosleep0_slack1 | 4355 | 2836 | 7076 | 3247 | 2736 | 2483 | 2835 | 3908
    | 3401 | 2762 | 2870 | 2446 | 1974 | 2248 | 3837 |'
- en: '| nanosleep1_slack1 | 4348 | 2840 | 7102 | 3252 | 2736 | 2486 | 2834 | 3908
    | 3410 | 2767 | 2871 | 2446 | 1975 | 2246 | 3836 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| nanosleep1_slack1 | 4348 | 2840 | 7102 | 3252 | 2736 | 2486 | 2834 | 3908
    | 3410 | 2767 | 2871 | 2446 | 1975 | 2246 | 3836 |'
- en: Calling `nanosleep()` to sleep for 0 ns or 1 ns seemingly also is a very cheap
    syscall or even a null operation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`nanosleep()`以睡眠0 ns或1 ns似乎也是一个非常廉价的系统调用，甚至是一个空操作。
- en: However, in the first case it takes 50 µs an all hosts. Incidentally, 50 µs
    is also the [default timer slack value](https://manpath.be/f34/2/prctl#L1052)
    for a normally scheduled process on Linux. The [timer slack mechanism](https://lwn.net/Articles/588086/)
    extends timer expirations up to the slack value in order to group multiple timers
    since this reduces wake ups and thus saves energy. And since `nanosleep()` creates
    a timer, it's also affected by this mechanism.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在第一种情况下，所有主机都需要50 µs。巧合的是，50 µs也是Linux上通常安排的进程的[默认定时器松弛值](https://manpath.be/f34/2/prctl#L1052)。[定时器松弛机制](https://lwn.net/Articles/588086/)将定时器到期时间延长到松弛值，以便组合多个定时器，因为这样可以减少唤醒次数，从而节省能量。由于`nanosleep()`创建一个定时器，因此也受到这种机制的影响。
- en: Thus, the other nanosleep cases [set a minimal timer slack](https://github.com/gsauthof/osjitter/blob/f1a4ca9cbf7516efc61c3bab2fe06ffe83cfb43c/bench_syscalls.cc#L117)
    of 1 ns which reduces the runtime, as expected. However, it's still much more
    expensive than the other syscalls. Of course, a timer expiration has a limited
    accuracy. However, with 0 ns or 1 ns no timer has to be expired, really. It turns
    out that calling `nanosleep()` unconditionally yields a (voluntary) [context switch](https://en.wikipedia.org/wiki/Context_switch).
    Even on isolated cores, where the scheduler happily switches to the swapper kernel
    thread. Thus, the last two nanonsleep cases really measure the context switch
    costs which are more expensive than a simple mode switch.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，其他nanosleep案例[设置了最小的定时器松弛值](https://github.com/gsauthof/osjitter/blob/f1a4ca9cbf7516efc61c3bab2fe06ffe83cfb43c/bench_syscalls.cc#L117)为1
    ns，从而减少了运行时间，符合预期。但是，它仍然比其他系统调用要昂贵得多。当然，定时器到期具有有限的精度。但是，对于0 ns或1 ns，确实不需要到期定时器。事实证明，无条件调用`nanosleep()`会产生（自愿）[上下文切换](https://en.wikipedia.org/wiki/Context_switch)。即使在隔离的核心上，调度程序也会愉快地切换到交换内核线程。因此，最后两个nanonsleep案例实际上测量了上下文切换的成本，这比简单的模式切换要昂贵。
- en: The costs of a context switch match what [others are measuring](https://eli.thegreenplace.net/2018/measuring-context-switching-and-memory-overheads-for-linux-threads/#how-expensive-are-context-switches)
    (modulo division by two).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文切换的成本与[其他人测量的情况](https://eli.thegreenplace.net/2018/measuring-context-switching-and-memory-overheads-for-linux-threads/#how-expensive-are-context-switches)相匹配（模除二）。
- en: Hosts
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主机
- en: 'The following table shows the hosts under benchmark:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了受基准测试影响的主机：
- en: '|  | host | CPU | mitigations | poll | os | kernel |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '|  | 主机 | CPU | 缓解措施 | 轮询 | 操作系统 | 内核 |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| 0 | 5i4250u | Core i5-4250U | yes | yes | Fedora 33 | 5.12 |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 5i4250u | Core i5-4250U | 是 | 是 | Fedora 33 | 5.12 |'
- en: '| 1 | 7i6600u | Core i7-6600U | yes | yes | Fedora 33 | 5.13 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 7i6600u | Core i7-6600U | 是 | 是 | Fedora 33 | 5.13 |'
- en: '| 2 | ac3758 | Atom C3758 | no | yes | Fedora 33 | 5.13 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 2 | ac3758 | Atom C3758 | 否 | 是 | Fedora 33 | 5.13 |'
- en: '| 3 | x2643 | Xeon E5-2643 v2 | yes | no | RHEL 7 | 3.10 |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 3 | x2643 | Xeon E5-2643 v2 | 是 | 否 | RHEL 7 | 3.10 |'
- en: '| 4 | x2667h | Xeon E5-2667 v3 | yes | yes | RHEL 7 | 3.10 |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 4 | x2667h | Xeon E5-2667 v3 | 是 | 是 | RHEL 7 | 3.10 |'
- en: '| 5 | x2667s | Xeon E5-2667 v3 | yes | yes | RHEL 7 | 3.10 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 5 | x2667s | Xeon E5-2667 v3 | 是 | 是 | RHEL 7 | 3.10 |'
- en: '| 6 | x2687w | Xeon E5-2687W v3 | yes | yes | RHEL 7 | 3.10 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 6 | x2687w | Xeon E5-2687W v3 | 是 | 是 | RHEL 7 | 3.10 |'
- en: '| 7 | x2689 | Xeon E5-2689 v4 | yes | yes | RHEL 7 | 3.10 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 7 | x2689 | Xeon E5-2689 v4 | 是 | 是 | RHEL 7 | 3.10 |'
- en: '| 8 | x2690 | Xeon E5-2690 0 | yes | yes | RHEL 7 | 3.10 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 8 | x2690 | Xeon E5-2690 0 | 是 | 是 | RHEL 7 | 3.10 |'
- en: '| 9 | xg6144 | Xeon Gold 6144 | yes | yes | RHEL 7 | 3.10 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 9 | xg6144 | Xeon Gold 6144 | 是 | 是 | RHEL 7 | 3.10 |'
- en: '| 10 | xg6148 | Xeon Gold 6148 | no | yes | RHEL 7 | 3.10 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 10 | xg6148 | Xeon Gold 6148 | 否 | 是 | RHEL 7 | 3.10 |'
- en: '| 11 | xg6246 | Xeon Gold 6246 | yes | yes | RHEL 7 | 3.10 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 11 | xg6246 | Xeon Gold 6246 | 是 | 是 | RHEL 7 | 3.10 |'
- en: '| 12 | xg6256 | Xeon Gold 6256 | no | yes | RHEL 7 | 3.10 |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 12 | xg6256 | Xeon Gold 6256 | 否 | 是 | RHEL 7 | 3.10 |'
- en: '| 13 | xg6256b | Xeon Gold 6256 | yes | yes | RHEL 7 | 3.10 |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 13 | xg6256b | Xeon Gold 6256 | 是 | 是 | RHEL 7 | 3.10 |'
- en: '| 14 | xs4110 | Xeon Silver 4110 | no | yes | RHEL 7 | 3.10 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 14 | xs4110 | Xeon Silver 4110 | 否 | 是 | RHEL 7 | 3.10 |'
- en: 'Notes:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注：
- en: the kernels are the ones packaged by the distributions
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核是发行版打包的内核
- en: most RHEL hosts are on RHEL 7.9
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数RHEL主机使用的是RHEL 7.9
- en: CPU mitigations are disabled via the `mitigations=off` kernel parameter or similar
    parameters
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`mitigations=off`内核参数或类似参数禁用了CPU缓解措施
- en: polling means that CPU frequency scaling and power saving is disabled via kernel
    parameters and tuned PM QoS settings
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轮询意味着通过内核参数和调整的PM QoS设置禁用CPU频率调节和节能
- en: so the host's CPU runs on a fixed frequency; where possible this frequency is
    set slightly above the base frequency, e.g. on the Xeon Gold 6256 CPU it's set
    to 4.1 GHz
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，主机的CPU以固定频率运行；在可能的情况下，此频率略高于基本频率，例如，在Xeon Gold 6256 CPU上设置为4.1 GHz
- en: the Atom CPU doesn't support Hyperthreading and Hyperthreading is disabled on
    all Xeon hosts
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Atom CPU不支持超线程，并且所有Xeon主机上的超线程都已禁用
- en: all hosts have SELinux and/or Auditing enabled (on Fedora/RHEL these features
    are enabled by default) which adds some syscall overhead to some degree
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有主机都已启用SELinux和/或审计（在Fedora/RHEL中这些功能默认启用），这在某种程度上增加了一些系统调用的开销
- en: Terminology
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 术语
- en: 'There are basically two important separate terms to distinguish in the above
    discussion:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述讨论中有两个重要的单独的术语需要区分：
- en: '[Mode Switch](https://en.wikipedia.org/wiki/Context_switch#User_and_kernel_mode_switching)
    (or Mode Transition)'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[模式切换](https://en.wikipedia.org/wiki/Context_switch#User_and_kernel_mode_switching)（或模式转换）'
- en: '[Context Switch](https://en.wikipedia.org/wiki/Context_switch)'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[上下文切换](https://en.wikipedia.org/wiki/Context_switch)'
- en: The definitions of these terms might vary in different literature and different
    operating systems. Also, in other contexts (no pun intended!) one might describe
    different modes as different contexts. However, the definitions given in the linked
    Wikipedia articles are widely used and apply to Linux.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些术语的定义在不同的文献和不同的操作系统中可能会有所不同。另外，在其他情境中（不是在开玩笑！）可能会将不同的模式描述为不同的上下文。然而，在链接的维基百科文章中给出的定义是被广泛应用并适用于Linux。
- en: Basically, a mode transition denotes the switch between user mode and kernel
    mode (or between user space and kernel space) whereas a context switch denotes
    a switch between different tasks, which is facilitated by the kernel. A context
    switch requires more work than a mode switch and thus is more expensive.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，模式转换表示用户模式和内核模式（或用户空间和内核空间）之间的切换，而上下文切换表示不同任务之间的切换，这是由内核协助的。上下文切换需要比模式切换更多的工作，因此更昂贵。
