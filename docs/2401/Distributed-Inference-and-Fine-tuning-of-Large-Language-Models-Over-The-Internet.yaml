- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:26:10'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Inference and Fine-tuning of Large Language Models Over The Internet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://browse.arxiv.org/html/2312.08361v1](https://browse.arxiv.org/html/2312.08361v1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 0:  prefix_tokens, embeddings, known_servers
  prefs: []
  type: TYPE_NORMAL
- en: 1:  generated_sequence = list()
  prefs: []
  type: TYPE_NORMAL
- en: 2:  cache = dictionary()
  prefs: []
  type: TYPE_NORMAL
- en: 3:  streams = dictionary()
  prefs: []
  type: TYPE_NORMAL
- en: 4:  chain = find_best_chain(known_servers)
  prefs: []
  type: TYPE_NORMAL
- en: 5:  for <math alttext="\text{server}\in\text{chain}" class="ltx_Math" display="inline"
    id="alg1.l5.m1.1"><semantics id="alg1.l5.m1.1a"><mrow id="alg1.l5.m1.1.1" xref="alg1.l5.m1.1.1.cmml"><mtext
    id="alg1.l5.m1.1.1.2" xref="alg1.l5.m1.1.1.2a.cmml">server</mtext><mo id="alg1.l5.m1.1.1.1"
    xref="alg1.l5.m1.1.1.1.cmml">∈</mo><mtext id="alg1.l5.m1.1.1.3" xref="alg1.l5.m1.1.1.3a.cmml">chain</mtext></mrow><annotation-xml
    encoding="MathML-Content" id="alg1.l5.m1.1b"><apply id="alg1.l5.m1.1.1.cmml" xref="alg1.l5.m1.1.1"><ci
    id="alg1.l5.m1.1.1.2a.cmml" xref="alg1.l5.m1.1.1.2"><mtext id="alg1.l5.m1.1.1.2.cmml"
    xref="alg1.l5.m1.1.1.2">server</mtext></ci><ci id="alg1.l5.m1.1.1.3a.cmml" xref="alg1.l5.m1.1.1.3"><mtext
    id="alg1.l5.m1.1.1.3.cmml" xref="alg1.l5.m1.1.1.3">chain</mtext></ci></apply></annotation-xml><annotation
    encoding="application/x-tex" id="alg1.l5.m1.1c">\text{server}\in\text{chain}</annotation><annotation
    encoding="application/x-llamapun" id="alg1.l5.m1.1d">server ∈ chain</annotation></semantics></math> do
  prefs: []
  type: TYPE_NORMAL
- en: 6:     streams[server] = rpc_inference(server)
  prefs: []
  type: TYPE_NORMAL
- en: 7:     cache[server] = list()
  prefs: []
  type: TYPE_NORMAL
- en: 8:  end for
  prefs: []
  type: TYPE_NORMAL
- en: '9:'
  prefs: []
  type: TYPE_NORMAL
- en: 10:  inputs = embeddings(prefix_tokens)
  prefs: []
  type: TYPE_NORMAL
- en: 11:  while should_continue(generated_sequence) do
  prefs: []
  type: TYPE_NORMAL
- en: 12:     tail_servers = copy(chain)
  prefs: []
  type: TYPE_NORMAL
- en: 13:     while not empty(tail_servers) do
  prefs: []
  type: TYPE_NORMAL
- en: 14:        server = tail_servers.pop_left()
  prefs: []
  type: TYPE_NORMAL
- en: '15:        try:'
  prefs: []
  type: TYPE_NORMAL
- en: 16:              <math alttext="\triangleright" class="ltx_Math" display="inline"
    id="alg1.l16.m1.1"><semantics id="alg1.l16.m1.1a"><mo id="alg1.l16.m1.1.1" xref="alg1.l16.m1.1.1.cmml">▷</mo><annotation-xml
    encoding="MathML-Content" id="alg1.l16.m1.1b"><ci id="alg1.l16.m1.1.1.cmml" xref="alg1.l16.m1.1.1">▷</ci></annotation-xml><annotation
    encoding="application/x-tex" id="alg1.l16.m1.1c">\triangleright</annotation><annotation
    encoding="application/x-llamapun" id="alg1.l16.m1.1d">▷</annotation></semantics></math>
  prefs: []
  type: TYPE_NORMAL
- en: Attempt normal inference
  prefs: []
  type: TYPE_NORMAL
- en: 17:              outputs = streams[server].send(inputs)
  prefs: []
  type: TYPE_NORMAL
- en: 18:              cache[server].append(inputs)
  prefs: []
  type: TYPE_NORMAL
- en: 19:              inputs = outputs
  prefs: []
  type: TYPE_NORMAL
- en: '20:        catch ServerFailed:'
  prefs: []
  type: TYPE_NORMAL
- en: 21:              <math alttext="\triangleright" class="ltx_Math" display="inline"
    id="alg1.l21.m1.1"><semantics id="alg1.l21.m1.1a"><mo id="alg1.l21.m1.1.1" xref="alg1.l21.m1.1.1.cmml">▷</mo><annotation-xml
    encoding="MathML-Content" id="alg1.l21.m1.1b"><ci id="alg1.l21.m1.1.1.cmml" xref="alg1.l21.m1.1.1">▷</ci></annotation-xml><annotation
    encoding="application/x-tex" id="alg1.l21.m1.1c">\triangleright</annotation><annotation
    encoding="application/x-llamapun" id="alg1.l21.m1.1d">▷</annotation></semantics></math>
  prefs: []
  type: TYPE_NORMAL
- en: Replace the failed server
  prefs: []
  type: TYPE_NORMAL
- en: 22:              streams.pop(server).close()
  prefs: []
  type: TYPE_NORMAL
- en: 23:              past_inputs = cache.pop(server)
  prefs: []
  type: TYPE_NORMAL
- en: 24:              new_servers = replace_failed_server(
  prefs: []
  type: TYPE_NORMAL
- en: 25:                    server, past_inputs, cache,
  prefs: []
  type: TYPE_NORMAL
- en: 26:                    streams, known_servers)
  prefs: []
  type: TYPE_NORMAL
- en: 27:              chain.replace(server, new_servers)
  prefs: []
  type: TYPE_NORMAL
- en: 28:              tail_servers.push_left(new_servers)
  prefs: []
  type: TYPE_NORMAL
- en: 29:     end while
  prefs: []
  type: TYPE_NORMAL
- en: '30:'
  prefs: []
  type: TYPE_NORMAL
- en: 31:     logits = compute_logits(outputs, embeddings)
  prefs: []
  type: TYPE_NORMAL
- en: 32:     next_token = choose_next(logits) {e.g. greedy}
  prefs: []
  type: TYPE_NORMAL
- en: 33:     generated_sequence.append(next_token)
  prefs: []
  type: TYPE_NORMAL
- en: 34:     inputs = embeddings(next_token)
  prefs: []
  type: TYPE_NORMAL
- en: 35:  end while
  prefs: []
  type: TYPE_NORMAL
- en: '36:'
  prefs: []
  type: TYPE_NORMAL
- en: 37:  for <math alttext="\text{server}\in\text{chain}" class="ltx_Math" display="inline"
    id="alg1.l37.m1.1"><semantics id="alg1.l37.m1.1a"><mrow id="alg1.l37.m1.1.1" xref="alg1.l37.m1.1.1.cmml"><mtext
    id="alg1.l37.m1.1.1.2" xref="alg1.l37.m1.1.1.2a.cmml">server</mtext><mo id="alg1.l37.m1.1.1.1"
    xref="alg1.l37.m1.1.1.1.cmml">∈</mo><mtext id="alg1.l37.m1.1.1.3" xref="alg1.l37.m1.1.1.3a.cmml">chain</mtext></mrow><annotation-xml
    encoding="MathML-Content" id="alg1.l37.m1.1b"><apply id="alg1.l37.m1.1.1.cmml"
    xref="alg1.l37.m1.1.1"><ci id="alg1.l37.m1.1.1.2a.cmml" xref="alg1.l37.m1.1.1.2"><mtext
    id="alg1.l37.m1.1.1.2.cmml" xref="alg1.l37.m1.1.1.2">server</mtext></ci><ci id="alg1.l37.m1.1.1.3a.cmml"
    xref="alg1.l37.m1.1.1.3"><mtext id="alg1.l37.m1.1.1.3.cmml" xref="alg1.l37.m1.1.1.3">chain</mtext></ci></apply></annotation-xml><annotation
    encoding="application/x-tex" id="alg1.l37.m1.1c">\text{server}\in\text{chain}</annotation><annotation
    encoding="application/x-llamapun" id="alg1.l37.m1.1d">server ∈ chain</annotation></semantics></math> do
  prefs: []
  type: TYPE_NORMAL
- en: 38:     streams[server].close()
  prefs: []
  type: TYPE_NORMAL
- en: 39:  end for
  prefs: []
  type: TYPE_NORMAL
- en: 40:  return generated_sequence
  prefs: []
  type: TYPE_NORMAL
