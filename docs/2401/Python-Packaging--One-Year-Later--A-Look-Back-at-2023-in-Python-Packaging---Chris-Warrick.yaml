- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:50:30'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:50:30'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Python Packaging, One Year Later: A Look Back at 2023 in Python Packaging |
    Chris Warrick'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 打包，一年后：回顾 2023 年 Python 打包 | Chris Warrick
- en: 来源：[https://chriswarrick.com/blog/2024/01/15/python-packaging-one-year-later/](https://chriswarrick.com/blog/2024/01/15/python-packaging-one-year-later/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://chriswarrick.com/blog/2024/01/15/python-packaging-one-year-later/](https://chriswarrick.com/blog/2024/01/15/python-packaging-one-year-later/)
- en: A year ago, I wrote about the sad state of Python packaging. The large number
    of tools in the space, the emphasis on writing vague standards instead of rallying
    around the One True Tool, and the complicated `venv`-based ecosystem instead of
    a solution similar to `node_modules`. What has changed in the past year? Has anything
    improved, is everything the same, or are things worse than they were before?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一年前，我写了一篇关于 Python 打包状况不佳的文章。领域中有大量的工具，强调编写模糊的标准而不是围绕着一个真正的工具集结，以及复杂的基于 venv
    的生态系统而不是类似于 `node_modules` 的解决方案。在过去的一年里发生了什么变化？有什么改进了吗，还是一切仍然如旧，甚至比以前更糟？
- en: The tools
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具们
- en: '[The original post](https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/)
    listed a bunch of packaging tools, calling *fourteen tools at least twelve too
    many*. My idea with that was that most people would be happy with one tool that
    does everything, but the scientific-Python folks might have special requirements
    that would work best as a second tool.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[原始帖子](https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/)
    列出了一堆打包工具，称其中至少有十四个工具过多。我的想法是大多数人会满意于一个可以完成所有任务的工具，但科学 Python 用户可能有特殊要求，最好使用第二个工具。'
- en: Out of the tools named in last year’s post, all of them still seem to be maintained.
    Except for Flit (zero new commits in the past 30 days) and virtualenv (only automated
    and semi-automated version bumps), the tools have recent commits, pull requests,
    and issues.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在去年的帖子中提到的工具中，它们似乎都在维护状态。除了 Flit（过去 30 天没有新提交）和 virtualenv（只有自动化和半自动化的版本更新），这些工具都有最新的提交、拉取请求和问题。
- en: 'All of those tools are still in use. [Françoise Conil analysed all PyPI packages](https://framapiaf.org/@fcodvpt/111540079686191842)
    and checked their PEP 517 build backends: setuptools is the most popular (at 50k
    packages), Poetry is second at 41k, Hatchling is third at 8.1k. Other tools to
    cross 500 users include Flit (4.4k), PDM (1.3k), Maturin (1.3k, build backend
    for Rust-based packages).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些工具仍在使用中。[Françoise Conil 分析了所有 PyPI 包](https://framapiaf.org/@fcodvpt/111540079686191842)，并检查了它们的
    PEP 517 构建后端：setuptools 是最受欢迎的（有 50k 个包），Poetry 是第二位，有 41k，Hatchling 是第三位，有 8.1k。其他超过
    500 用户的工具包括 Flit（4.4k），PDM（1.3k），Maturin（1.3k，用于 Rust 包的构建后端）。
- en: There are some new tools, of course. Those that crossed my radar are [Posy](https://github.com/njsmith/posy)
    and [Rye](https://github.com/mitsuhiko/rye). Posy is a project of Nathaniel J.
    Smith (of trio fame), Rye is a project of Armin Ronacher (of Flask fame). The
    vision for both of them is to manage Python interpreters and projects, but not
    have a custom build backend (instead using something like hatchling). Posy is
    built on top of PyBI (a format for distributing binaries of Python interpreters,
    proposed by Smith in draft [PEP 711](https://peps.python.org/pep-0711/)), Rye
    uses Gregory Szorc’s pre-built Pythons. Rye seems to be fairly complete and usable,
    Posy is right now a PoC of the PyBI format, and only offers a REPL with pre-installed
    packages.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，也有一些新工具。我关注到的工具有[Posy](https://github.com/njsmith/posy)和[Rye](https://github.com/mitsuhiko/rye)。Posy
    是由纳撒尼尔·J·史密斯（trio 的作者）开发的项目，Rye 则是由阿尔明·罗纳赫尔（Flask 的作者）开发的项目。它们的愿景都是管理 Python 解释器和项目，但不使用自定义的构建后端（而是使用类似孵化器的东西）。Posy
    是建立在 PyBI 之上的（PyBI 是由史密斯在草案 [PEP 711](https://peps.python.org/pep-0711/) 中提出的用于分发
    Python 解释器二进制文件的格式），Rye 则使用格雷戈里·索尔克（Gregory Szorc）预构建的 Python。Rye 看起来相当完整和可用，而
    Posy 现在只是 PyBI 格式的 PoC，只提供一个带有预安装包的 REPL。
- en: Both Posy and Rye are written in Rust. On the one hand, it makes sense that
    the part that manages Python interpreters is not written in Python, because that
    would require a separate Python, not managed by Posy/Rye, to run those tools.
    But Rye also has its own pyproject.toml parser in Rust, and many of its commands
    are implemented mostly or largely using Rust (sometimes also calling one-off Python
    scripts; although the main tasks of creating venvs, installing packages, and working
    with lockfiles are handed off to `venv`, `pip`, and `pip-tools` respectively).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Posy和Rye都是用Rust编写的。一方面，管理Python解释器的部分不是用Python编写是有道理的，因为那将需要一个单独的Python，而不是由Posy/Rye管理的，来运行这些工具。但是Rye也有自己的pyproject.toml解析器，用Rust编写，并且它的许多命令大部分或主要是用Rust实现的（有时也会调用一次性的Python脚本；虽然创建虚拟环境、安装包和处理锁文件的主要任务分别交给了`venv`、`pip`和`pip-tools`）。
- en: Speaking of Rust and Python, there’s been another project in that vein that
    has grown a lot [(and gathered a lot of funding)](https://astral.sh/blog/announcing-astral-the-company-behind-ruff)
    in the past year. That project is [Ruff](https://github.com/astral-sh/ruff), which
    is a linter and code formatter. Ruff formats Python code, and is written in Rust.
    This means it’s 10–100× faster than existing tools written in Python (according
    to Ruff’s own benchmarks). Fast is good, I guess, but what does this say about
    Python? Is the fact that package tools (which aren’t rocket science, maybe except
    for fast dependency solvers, and which often need access to Python internals to
    do their job) and code formatters (which require a deep understanding of Python
    syntax, and parsing Python sources to ASTs, something easy by the `ast` Python
    module) are written in another language? Does this trend make Python a toy language
    (as it is also often considered *a glue language* for NumPy and friends)? Also,
    why should contributing to a tool important to many Python developers require
    learning Rust?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到Rust和Python，过去一年中还有另一个项目在这方面取得了很大的发展（并集聚了大量的资金）。那个项目是[Ruff](https://github.com/astral-sh/ruff)，它是一个代码规范化工具和代码格式化工具。Ruff可以格式化Python代码，并且是用Rust编写的。这意味着它比现有的用Python编写的工具快10-100倍（根据Ruff自己的基准测试）。快速是好的，我想，但是这对Python意味着什么呢？事实上，包工具（除了快速依赖解决器，可能还包括快速访问Python内部以执行其工作的工具）和代码格式化器（需要深入理解Python语法，并将Python源代码解析为AST，这对于`ast`
    Python模块来说是很容易的）都用另一种语言编写了？这个趋势是否使Python成为了一种玩具语言（因为它也经常被认为是NumPy和朋友们的“胶水语言”）？此外，为什么贡献给许多Python开发人员重要的工具需要学习Rust呢？
- en: The standards
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准
- en: Last time we looked at packaging standards, we focused on [PEP 582](https://peps.python.org/pep-0582/).
    It proposed the introduction of `__pypackages__`, which would be a place for third-party
    packages to be installed to locally, on a per-project basis, without involving
    virtual environments, similarly to what `node_modules` is for node. The PEP was
    ultimately [rejected](https://discuss.python.org/t/pep-582-python-local-packages-directory/963/430)
    in March 2023\. The PEP wasn’t perfect, and some of its choices were questionable
    or insufficient (such as not recursively searching for `__pypackages__` in parent
    directories, or focusing on simple use-cases only). No new standards for something
    in that vein (with a better design) were proposed to this day.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上次我们讨论了包装标准，重点是[PEP 582](https://peps.python.org/pep-0582/)。它提出了引入`__pypackages__`的想法，这将是一个地方，第三方包可以在本地按项目安装，而不涉及虚拟环境，类似于`node_modules`对于node来说是什么。该PEP最终于2023年3月[被拒绝了](https://discuss.python.org/t/pep-582-python-local-packages-directory/963/430)。PEP并不完美，其中一些选择是有问题的或者不足的（比如不递归搜索父目录中的`__pypackages__`，或者只关注简单的用例）。迄今为止，没有提出类似的新标准（设计更好）。
- en: Another contentious topic is lock files. Lock files for packaging systems are
    useful for reproducible dependency installations. The lock file records all installed
    packages (i.e. includes transitive dependencies) and their versions. Lock files
    often include checksums (like sha512) of the installed packages, and they often
    support telling apart packages installed via different groups of dependencies
    (runtime, buildtime, optional, development, etc.).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有争议的话题是锁文件。包装系统的锁文件对于可重复的依赖安装非常有用。锁文件记录了所有已安装的包（即包含传递依赖项）及其版本。锁文件通常包含已安装包的校验和（如sha512），它们通常支持区分通过不同依赖组（运行时、构建时、可选的、开发等）安装的包。
- en: The classic way of achieving this goal are `requirements.txt` files. They are
    specific to pip, and they only contain a list of packages, versions, and possibly
    checksums. Those files can be generated by `pip freeze`, or the third-party `pip-compile`
    from `pip-tools`. `pip freeze` is very basic, `pip-compile` can’t handle different
    groups of dependencies other than making multiple `requirements.in` files, compiling
    them, and hoping there are no conflicts.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一目标的经典方式是 `requirements.txt` 文件。它们是针对 pip 的，只包含包、版本和可能的校验和列表。这些文件可以由 `pip
    freeze` 生成，也可以使用第三方的 `pip-tools` 的 `pip-compile` 生成。`pip freeze` 非常基础，`pip-compile`
    无法处理除了生成多个 `requirements.in` 文件、编译它们并希望没有冲突之外的其他依赖组。
- en: Pipenv, Poetry, and PDM have their own lockfile implementations, incompatible
    with one another. Rye piggybacks on top of `pip-tools`. Hatch doesn’t have anything
    in core; they’re waiting for a standard implementation (there are some plugins
    though). [PEP 665](https://peps.python.org/pep-0665/) was [rejected](https://discuss.python.org/t/pep-665-take-2-a-file-format-to-list-python-dependencies-for-reproducibility-of-an-application/11736/140)
    in January 2022\. Its author, Brett Cannon, [is working on a PoC](https://snarky.ca/state-of-standardized-lock-files-for-python-august-2023/)
    of something that *might* become a standard (named [mousebender](https://github.com/brettcannon/mousebender)).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Pipenv、Poetry 和 PDM 都有自己的锁定文件实现，彼此不兼容。Rye 基于 `pip-tools` 进行开发。Hatch 的核心没有任何内容；他们正在等待标准实现（尽管有一些插件）。[PEP
    665](https://peps.python.org/pep-0665/) 在 2022 年 1 月被[拒绝](https://discuss.python.org/t/pep-665-take-2-a-file-format-to-list-python-dependencies-for-reproducibility-of-an-application/11736/140)。其作者
    Brett Cannon [正在研究一个可能成为标准的 PoC](https://snarky.ca/state-of-standardized-lock-files-for-python-august-2023/)（名为
    [mousebender](https://github.com/brettcannon/mousebender)）。
- en: This is the danger of the working model adopted by the Python packaging world.
    Even for something as simple as lock files, there are at least four incompatible
    standards. An attempt at a specification was rejected due to “lukewarm reception”,
    even though there exist at least four implementations which are achieving roughly
    the same goals, and other ecosystems also went through this before.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Python 包装世界采用的工作模型的危险所在。即使是像锁文件这样简单的事情，也至少有四种不兼容的标准。由于“冷淡的反应”，一个规范的尝试被拒绝了，尽管至少有四种实现达到了大致相同的目标，其他生态系统也经历过这样的情况。
- en: Another thing important to Python are extension modules. Extension modules are
    written in C, and they are usually used to interact with libraries written in
    other languages (and also sometimes for performance). Poetry, PDM, and Hatchling
    don’t really support building extension modules. Setuptools does; [SciPy and NumPy
    migrated from their custom numpy.distutils to Meson](https://numpy.org/doc/stable/reference/distutils_status_migration.html).
    The team behind the PyO3 Rust bindings for Python develops [Maturin](https://github.com/PyO3/maturin),
    which allows for building Rust-based extension modules — but it’s not useful if
    you’re working with C.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中另一个重要的事情是扩展模块。扩展模块是用 C 编写的，它们通常用于与其他语言编写的库进行交互（有时也用于提高性能）。Poetry、PDM
    和 Hatchling 实际上不支持构建扩展模块。Setuptools 支持；[SciPy 和 NumPy 从他们的自定义 numpy.distutils
    迁移到了 Meson](https://numpy.org/doc/stable/reference/distutils_status_migration.html)。负责
    Python 的 PyO3 Rust 绑定的团队开发了 [Maturin](https://github.com/PyO3/maturin)，它允许构建基于
    Rust 的扩展模块 — 但如果你使用的是 C，这并不有用。
- en: There weren’t many packaging-related standards that were accepted in 2023\.
    A standard worth mentioning is [PEP 668](https://peps.python.org/pep-0668/), which
    allows distributors to prevent pip from working (to avoid breaking distro-owned
    site packages) by adding an `EXTERNALLY-MANAGED` file. It was accepted in June
    2022, but pip only implemented support for it in January 2023, and many distros
    already have enabled this feature in 2023\. Preventing broken systems is a good
    thing.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2023 年没有太多关于包装的标准被接受。值得一提的标准是[PEP 668](https://peps.python.org/pep-0668/)，它允许发行商通过添加一个
    `EXTERNALLY-MANAGED` 文件来阻止 pip 的工作（以避免破坏发行版拥有的站点包），该标准于 2022 年 6 月被接受，但 pip 直到
    2023 年 1 月才实现了对其的支持，许多发行版在 2023 年已经启用了此功能。防止系统崩溃是一件好事。
- en: 'But some standards did make it through. Minor and small ones aside, the most
    prominent 2023 standard would be [PEP 723](https://peps.python.org/pep-0723/):
    inline script metadata. It allows to add a comment block at the top of the file,
    that specifies the dependencies and the minimum Python version in a way that can
    be consumed by tools. Is it super useful? I don’t think so; setting up a project
    with pyproject.toml would easily allow things to grow. If you’re sending something
    via a GitHub gist, just make a repo. If you’re sending something by e-mail, just
    tar the folder. That approach promotes messy programming without source control.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但是一些标准确实通过了。除了次要和小的标准之外，最突出的 2023 年标准应该是 [PEP 723](https://peps.python.org/pep-0723/)：内联脚本元数据。它允许在文件顶部添加注释块，以一种可以被工具消费的方式指定依赖项和最低的
    Python 版本。这非常有用吗？我不这么认为；使用 pyproject.toml 设置项目很容易就能让事情变得更加复杂。如果你通过 GitHub gist
    发送某些东西，只需创建一个仓库。如果你通过电子邮件发送某些东西，只需将文件夹打包。这种方法促进了没有源代码控制的混乱编程。
- en: Learning curves and the deception of “simple”
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习曲线与“简单”的欺骗
- en: Microsoft Word is simple, and a great beginner’s writing tool. You can make
    text bold with a single click. You can also make it blue in two clicks. But it’s
    easy to make an inconsistent mess. To make section headers, many users may just
    make the text bold and a bit bigger, without any consistency or semantics . Making
    a consistent document with semantic formatting is hard in Word. Adding [section
    numbering](https://www.techrepublic.com/article/how-to-create-multilevel-numbered-headings-in-word-2016/)
    requires you to select a heading and turn it into a list. There’s also supposedly
    some magic involved, that magic doesn’t work for me, and I have to tell Word to
    update the heading style. Even if you try doing things nicely, Word will randomly
    break, mess up the styles, mix up styles and inline ad-hoc formatting, and your
    document may look differently on different computers.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Word 很简单，是一个很好的初学者写作工具。你可以用一次点击将文本变粗。你也可以用两次点击将其变成蓝色。但很容易造成不一致的混乱。为了制作章节标题，许多用户可能只是将文本加粗并稍微放大一点，没有任何一致性或语义。在
    Word 中制作一致的具有语义格式的文档很难。添加 [节编号](https://www.techrepublic.com/article/how-to-create-multilevel-numbered-headings-in-word-2016/)
    需要你选择一个标题并将其变成列表。也有一些所谓的魔法参与其中，那种魔法对我不起作用，我必须告诉 Word 更新标题样式。即使你试图做事情的时候很好，Word
    也会随机出错，破坏样式，混合样式和行内临时格式化，你的文档在不同的计算机上可能会看起来不同。
- en: LaTeX is very confusing to a beginner, and has a massive learning curve. And
    you can certainly write `\textbf{hello}` everywhere. But with some learning, you’ll
    be producing beautiful documents. You’ll define a `\code{}` command that makes
    code monospace and adds a border today, but it might change the background and
    typeset in Comic Sans tomorrow if you so desire. You’ll use packages that can
    render code from external files with syntax highlighting. Heading numbering is
    on by default, but it can easily be disabled for a section. LaTeX can also automatically
    put new sections on new pages, for example. LaTeX was built for scientific publishing,
    so it has stellar support for maths and bibliographies, among other things.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: LaTeX 对初学者来说非常令人困惑，有着巨大的学习曲线。你肯定可以在各处写 `\textbf{hello}`。但是通过一些学习，你将能够制作出漂亮的文档。你将定义一个
    `\code{}` 命令，使代码等宽并添加边框，但如果你愿意的话，明天它可能会改变背景并以 Comic Sans 字体排版。你将使用能够从外部文件渲染带有语法突出显示的代码的包。标题编号默认是开启的，但可以轻松禁用某个章节的编号。LaTeX
    还可以自动将新的章节放在新的页面上，例如。LaTeX 是为科学出版而建立的，因此在数学和参考文献等方面具有出色的支持。
- en: Let’s now talk about programming. Python is simple, and a great beginner’s programming
    language. You can write *hello world* in a single line of code. The syntax is
    simpler, there are no confusing leftovers from C (like the index-based `for` loop)
    or machine-level code (like `break` in `switch`), no pointers in sight. You also
    don’t need to write classes at all; you don’t need to write a class only to put
    a `public static void main(String[] args)` method there . You don’t need an IDE,
    you can just write code using any editor (even notepad.exe will do for the first
    day or so), you can save it as a .py file and run it using `python whatever.py`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在谈论一下编程。Python 很简单，是一个很好的初学者编程语言。你可以用一行代码写出 *hello world*。语法更简单，没有令人困惑的
    C 语言遗留问题（比如基于索引的 `for` 循环）或者机器级代码（比如 `switch` 中的 `break`），看不到任何指针。你也不需要完全写类；你不需要写一个类只是为了把
    `public static void main(String[] args)` 方法放在那里。你不需要一个 IDE，你可以用任何编辑器（甚至 notepad.exe）来写代码，你可以把它保存为
    .py 文件，并使用 `python whatever.py` 运行它。
- en: Your code got more complicated? No worry, you can split it into multiple `.py`
    files, use `import name_of_other_file_without_py` and it will just work. Do you
    need more structure, grouping into folders perhaps? Well, forget about `python
    whatever.py`, you must use `python -m whatever`, and you must `cd` to where your
    code is, or mess with `PYTHONPATH`, or install your thing with `pip`. This simple
    yet common action (grouping things into folders) has massively increased complexity.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码变得更复杂了？别担心，你可以将其拆分成多个`.py`文件，使用`import name_of_other_file_without_py`，它就会正常工作。你需要更多的结构，也许是分组到文件夹中吗？嗯，忘记`python
    whatever.py`吧，你必须使用`python -m whatever`，并且你必须`cd`到你的代码所在的位置，或者搞定`PYTHONPATH`，或者使用`pip`安装你的东西。这个简单但常见的操作（将东西分组到文件夹中）大大增加了复杂性。
- en: The standard library is not enough and you need a third-party dependency? You
    find some tutorial that tells you to `pip install`, but `pip` will now tell you
    to use `apt`. And `apt` may work, but it may give you an ancient version that
    does not match the tutorial you’re reading. Or it may not have the package. Or
    the Internet will tell you not to use Python packages from `apt`. So now you need
    to [learn about venvs](https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/)
    (which add more complexity, more things to remember; most tutorials teach activation,
    venvs are easy to mess up via basic operations like renaming a folder, and you
    may end up with a venv in git or your code in a venv). Or you need to pick one
    of the many one-stop-shop tools to manage things.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库不够用，你需要第三方依赖？你找到了一些教程告诉你要`pip install`，但现在`pip`会告诉你使用`apt`。`apt`可能有效，但它可能给你一个与你正在阅读的教程不匹配的古老版本。或者它可能没有这个软件包。或者网络会告诉你不要从`apt`使用Python软件包。所以现在你需要[了解关于虚拟环境的知识](https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/)（这增加了更多的复杂性，需要记住更多的事情；大多数教程都教如何激活，但通过基本操作如重命名文件夹可能会弄乱venvs，并且你可能会在git中得到一个venv或在venv中得到你的代码）。或者你需要选择众多的一站式工具来管理事务。
- en: In other ecosystems, an IDE is often a necessity, even for beginners. The IDE
    will force you into a project system (maybe not the best or most common one by
    default, but it will still be a coherent project system). Java will force you
    to make more than one file with the “1 public class = 1 file” rule, and it will
    be easy to do so, you won’t even need an `import`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他生态系统中，IDE通常是必不可少的，即使是对初学者也是如此。IDE将强制你使用项目系统（也许默认情况下不是最好或最常见的系统，但它仍将是一个连贯的项目系统）。Java将强制你使用“1个公共类
    = 1个文件”的规则创建多个文件，并且这样做很容易，你甚至不需要一个`import`。
- en: Do you want folders? In Java or C#, you just create a folder in the IDE, and
    create a class there. The new file may have a different `package`/`namespace`,
    but the IDE will help you to add the correct `import`/`using` to the codebase,
    and there is no risk of you using too many directories (including something like
    `src`) or using too few (not making a top-level package for all your code) that
    will require correcting all imports. The disruption from adding a folder in Java
    or C# is minimal.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要文件夹吗？在Java或C#中，你只需在IDE中创建一个文件夹，然后在那里创建一个类。新文件可能有一个不同的`package`/`namespace`，但IDE将帮助你向代码库添加正确的`import`/`using`，而且你不会冒用太多目录（包括像`src`这样的东西）或使用太少（不为所有代码创建一个顶级包）的风险，这将需要修正所有导入。在Java或C#中添加文件夹的干扰是最小的。
- en: The project system will also handle third-party packages without you needing
    to think about where they’re downloaded or what a virtual environment is and how
    to activate it from different contexts. A few clicks and you’re done. And if you
    don’t like IDEs? Living in the CLI is certainly possible in many ecosystems, they
    have reasonable CLI tools for common management tasks, as well as building and
    running your project.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 项目系统还会处理第三方软件包，而无需考虑它们被下载到哪里或什么是虚拟环境以及如何从不同的上下文激活它们。点击几下，就完成了。如果你不喜欢IDE呢？在许多生态系统中，生活在CLI中当然是可能的，它们有合理的CLI工具用于常见的管理任务，以及构建和运行项目。
- en: 'PEP 723 solves a very niche problem: dependency management for single-file
    programs. Improving life for one-off things and messy code was apparently more
    important to the packaging community than any other improvements for big projects.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: PEP 723 解决了一个非常特定的问题：单文件程序的依赖管理。对于一次性的事情和混乱的代码，改善生活显然比为大型项目做任何其他改进更重要对于打包社区来说。
- en: By the way, you could adapt this lesson to static and dynamic typing. Dynamic
    typing is easier to get started with and requires less typing, but compile-type
    checking can prevent many bugs — bugs that require higher test coverage to catch
    with dynamic typing. That’s why the JS world has TypeScript, that’s why mypy/pyright/typing
    has gained a lot of mindshare in the Python world.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，你可以将这个教训应用到静态和动态类型上。动态类型更容易上手，打字更少，但编译类型检查可以防止许多错误——这些错误需要更高的测试覆盖率才能通过动态类型进行捕获。这就是为什么
    JS 世界有 TypeScript，这也是为什么 mypy/pyright/typing 在 Python 世界中赢得了很多关注度。
- en: The future…
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来…
- en: Looking at the [Python Packaging Discourse](https://discuss.python.org/c/packaging/14),
    there were some discussions about ways to improve things.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[Python Packaging Discourse](https://discuss.python.org/c/packaging/14)，有一些关于改进事物的讨论。
- en: For example, this [discussion about porting off setup.py](https://discuss.python.org/t/user-experience-with-porting-off-setup-py/37502)
    was started by Gregory Szorc, who had [a long list of complaints](https://gregoryszorc.com/blog/2023/10/30/my-user-experience-porting-off-setup.py/),
    pointing out the issues with the communication from the packaging world, and documentation
    mess (his post is worth a read, or at least a skim, because it’s long and full
    of packaging failures). There’s one page which recommends setuptools, another
    which has four options with Hatchling as a default, and another still promoting
    Pipenv. We’ve seen this a year ago, nothing changed in that regard. Some people
    tried finding solutions, some people shared their opinions… and then the Discourse
    moderator decided to protect his PyPA friends from having to read user feedback
    and locked the thread.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这个[关于迁移setup.py的讨论](https://discuss.python.org/t/user-experience-with-porting-off-setup-py/37502)是由Gregory
    Szorc发起的，他有[一长串抱怨](https://gregoryszorc.com/blog/2023/10/30/my-user-experience-porting-off-setup.py/)，指出了包装世界中的沟通问题和文档混乱（他的帖子值得一读，或者至少浏览一下，因为它很长，而且充满了包装失败）。有一个页面推荐使用setuptools，另一个页面有四个选项，Hatchling作为默认选项，还有一个页面推广Pipenv。一年前我们已经看到了这一点，在这方面没有任何变化。一些人尝试找到解决方案，一些人分享了他们的观点……然后论坛的管理员决定保护他的
    PyPA 朋友，不让他们阅读用户反馈，并锁定了主题。
- en: Many other threads about visions were had, like the one about [10-year views](https://discuss.python.org/t/the-10-year-view-on-python-packaging-whats-yours/31834)
    or about [singular packaging tools](https://discuss.python.org/t/wanting-a-singular-packaging-tool-vision/21141).
    The strategy discussions, based on the user survey, had [a second part](https://discuss.python.org/t/python-packaging-strategy-discussion-part-2/23442)
    (the [first one](https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420)
    concluded in January 2023), but it saw less posts than the first one, and discussions
    did not continue (and there were [discussions about how to hold the discussions](https://discuss.python.org/t/structure-of-the-packaging-strategy-discussions/23478)).
    There are plans to [create a packaging council](https://discuss.python.org/t/draft-update-to-python-packaging-governance/31608)
    — design-by-committee at its finest.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多关于愿景的其他讨论，比如关于[10年观点](https://discuss.python.org/t/the-10-year-view-on-python-packaging-whats-yours/31834)或[单一包装工具](https://discuss.python.org/t/wanting-a-singular-packaging-tool-vision/21141)。基于用户调查的策略讨论有[第二部分](https://discuss.python.org/t/python-packaging-strategy-discussion-part-2/23442)（[第一部分](https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420)于2023年1月结束），但比第一部分少了很多帖子，讨论也没有继续（还有[关于如何进行讨论的讨论](https://discuss.python.org/t/structure-of-the-packaging-strategy-discussions/23478)）。计划[创建一个包装委员会](https://discuss.python.org/t/draft-update-to-python-packaging-governance/31608)——设计委员会的最佳实践。
- en: But all those discussions, even when not locked by an overzealous moderator,
    haven’t had any meaningful effect. The packaging ecosystem is still severely fragmented
    and confusing. [The PyPA docs and tutorials](https://packaging.python.org/en/latest/tutorials/)
    still contradict each other. The PyPA-affiliated tools still have less features
    than the unaffiliated competition (even the upstart Rye has some form of lockfiles,
    unlike Hatch or Flit), and going by the PEP 517 build backend usage statistics,
    they are more popular than the modern PyPA tools. The authors of similar yet competing
    tools have not joined forces to produce the One True Packaging Tool.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 但是所有这些讨论，即使没有被过度热心的版主锁定，也没有产生任何实质性的影响。打包生态系统仍然严重分散和令人困惑。[PyPA文档和教程](https://packaging.python.org/en/latest/tutorials/)
    仍然彼此矛盾。与PyPA关联的工具仍然比未关联的竞争对手功能更少（甚至新秀Rye也有某种形式的锁文件，不像Hatch或Flit），并且根据PEP 517构建后端使用统计数据，它们比现代PyPA工具更受欢迎。类似但竞争的工具的作者没有联合起来制作出真正的打包工具。
- en: …is looking pretty bleak
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: …看起来相当黯淡
- en: On the other hand, if you look at the 2023 contribution graphs for most packaging
    tools, you might be worried about the state of the packaging ecosystem.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您查看大多数打包工具的2023年贡献图表，您可能会担心打包生态系统的状态。
- en: '[Pip](https://github.com/pypa/pip/graphs/contributors?from=2023-01-01&to=2023-12-31&type=c)
    has had a healthy mix of contributors and a lot of commits going into it.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pip](https://github.com/pypa/pip/graphs/contributors?from=2023-01-01&to=2023-12-31&type=c)
    的贡献者结构健康，有大量提交。'
- en: '[Pipenv](https://github.com/pypa/pipenv/graphs/contributors?from=2023-01-01&to=2023-12-31&type=c)
    and [setuptools](https://github.com/pypa/setuptools/graphs/contributors?from=2023-01-01&to=2023-12-31&type=c)
    have two lead committers, but still a healthy amount of commits.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pipenv](https://github.com/pypa/pipenv/graphs/contributors?from=2023-01-01&to=2023-12-31&type=c)
    和 [setuptools](https://github.com/pypa/setuptools/graphs/contributors?from=2023-01-01&to=2023-12-31&type=c)
    有两位主要提交者，但仍然有大量提交。'
- en: '[Hatch](https://github.com/pypa/hatch/graphs/contributors?from=2023-01-01&to=2023-12-31&type=c),
    however, is a **one-man-show**: Ofek Lev (the project founder) made 184 commits,
    the second place belongs to Dependabot with 6 commits, and the third-place contributor
    (who is a human) has five commits. The bus factor of Hatch and Hatchling is 1.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Hatch](https://github.com/pypa/hatch/graphs/contributors?from=2023-01-01&to=2023-12-31&type=c)，然而，是一个**单人表演**：Ofek
    Lev（项目创始人）有184次提交，第二名是Dependabot有6次提交，第三名（一个人类贡献者）有5次提交。Hatch和Hatchling的巴士因子为1。'
- en: 'The non-PyPA tools aren’t doing much better:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 非PyPA工具的情况并不好：
- en: '[Poetry](https://github.com/python-poetry/poetry/graphs/contributors?from=2023-01-01&to=2023-12-31&type=c)
    has two top contributors, but at least there are four human contributors with
    a double-digit number of commits.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Poetry](https://github.com/python-poetry/poetry/graphs/contributors?from=2023-01-01&to=2023-12-31&type=c)
    有两位主要贡献者，但至少有四位人类贡献者的提交数量是两位数。'
- en: '[PDM](https://github.com/pdm-project/pdm/graphs/contributors?from=2023-01-01&to=2023-12-31&type=c)
    is a one-man-show, like Hatch.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PDM](https://github.com/pdm-project/pdm/graphs/contributors?from=2023-01-01&to=2023-12-31&type=c)
    是像Hatch一样的单人表演。'
- en: '[Rye](https://github.com/mitsuhiko/rye/graphs/contributors?from=2023-04-23&to=2023-12-31&type=c)
    has one main contributor, and three with a double-digit number of commits; note
    it’s pretty new (started in late April 2023) and it’s not as popular as the others.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Rye](https://github.com/mitsuhiko/rye/graphs/contributors?from=2023-04-23&to=2023-12-31&type=c)
    有一位主要贡献者，以及三位提交数量是两位数的贡献者；注意它相当新（于2023年4月下旬开始），并且不如其他工具那样受欢迎。'
- en: Conclusion
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: I understand the PyPA is a loose association of volunteers. It is sometimes
    said the name *Python Packaging Authority* was [originally a joke](https://discuss.python.org/t/remove-the-authority-from-packaging/1993).
    However, they are also the group that maintains all the packaging standards, so
    they *are* the authority when it comes to packaging. For example, [PEP 668](https://peps.python.org/pep-0668/)
    starts with a warning block saying it’s a historical document, and [the up-to-date
    version of the specification is on PyPA’s site](https://packaging.python.org/en/latest/specifications/externally-managed-environments/)
    (as well as a bunch of other [packaging specs](https://packaging.python.org/en/latest/specifications/)).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我理解 PyPA 是一个由志愿者组成的松散协会。有时人们说 *Python Packaging Authority* 这个名字最初是一个笑话。然而，他们也是维护所有打包标准的组织，所以在打包方面他们
    *是* 权威的。例如，[PEP 668](https://peps.python.org/pep-0668/) 以一个警告块开头，表示这是一个历史性文件，并且[规范的最新版本在
    PyPA 的网站上](https://packaging.python.org/en/latest/specifications/externally-managed-environments/)（以及一堆其他[打包规范](https://packaging.python.org/en/latest/specifications/)）。
- en: '**The PyPA should shut down or merge some duplicate projects, and work with
    the community (including maintainers of non-PyPA projects) to build One True Packaging
    Tool.** To make things easier. To avoid writing code that does largely the same
    thing 5 times. To make sure thousands of projects don’t depend on tools with a
    bus factor of 1 or 2\. To turn packaging from a problem and an insurmountable
    obstacle to something that *just works™*, something that an average developer
    doesn’t need to think about.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyPA 应该关闭或合并一些重复的项目，并与社区合作（包括非 PyPA 项目的维护者）共同构建一个真正的打包工具。** 为了让事情更简单。为了避免编写大部分功能相同的代码。为了确保成千上万的项目不依赖于只有
    1 或 2 个关键人员的工具。将打包从一个难以解决的障碍转变为 *只是工作™*，是一个普通开发者不需要考虑的东西。'
- en: It’s not rocket science. Tons of languages, big and small, have a coherent packaging
    ecosystem (just read [last year’s post](https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/)
    for some examples of how simple it can be). Instead of focusing on specifications
    and governance, focus on producing one comprehensive, usable, user-friendly tool.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是火箭科学。许多语言，大大小小，都有一个连贯的打包生态系统（只需阅读[去年的帖子](https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/)，了解一些它可以多么简单）。与其专注于规范和治理，不如专注于制作一个全面的、可用的、用户友好的工具。
- en: Discuss below or [on Hacker News](https://news.ycombinator.com/item?id=39004600).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面讨论或者[在 Hacker News 上讨论](https://news.ycombinator.com/item?id=39004600)。
