- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:29:27'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年05月27日 14:29:27
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'RIP: Software design pioneer Niklaus Wirth • The Register'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深切悼念：软件设计先驱尼古劳斯·维尔特 • The Register
- en: 来源：[https://www.theregister.com/2024/01/04/niklaus_wirth_obituary/](https://www.theregister.com/2024/01/04/niklaus_wirth_obituary/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.theregister.com/2024/01/04/niklaus_wirth_obituary/](https://www.theregister.com/2024/01/04/niklaus_wirth_obituary/)
- en: Obit Swiss computer scientist Professor Niklaus Wirth died on New Year's Day,
    roughly six weeks before what would have been his 90th birthday.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 瑞士计算机科学家尼古劳斯·维尔特教授于新年第一天去世，大约六周后他将迎来他的90岁生日。
- en: '[Wirth](https://people.inf.ethz.ch/wirth/) is justly celebrated as the creator
    of the Pascal programming language, but that was only one step in a series of
    important languages and research projects. Both [asteroid 21655](https://ssd.jpl.nasa.gov/tools/sbdb_lookup.html#/?sstr=21655)
    and a [law of computer design](https://www.techslang.com/definition/what-is-wirths-law/)
    are named after him. He won computer-science boffinry''s highest possible gong,
    the Turing Award, [in 1984](https://amturing.acm.org/award_winners/wirth_1025774.cfm),
    and that page has some short English-language clips from a [2018 interview](https://www.youtube.com/watch?v=SUgrS_KbSI8).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[维尔特](https://people.inf.ethz.ch/wirth/)因创建 Pascal 编程语言而受到公正的赞誉，但这只是他一系列重要语言和研究项目中的一步。他赢得了计算机科学界最高荣誉图灵奖，[于1984年](https://amturing.acm.org/award_winners/wirth_1025774.cfm)，该页面有一些来自[2018年采访](https://www.youtube.com/watch?v=SUgrS_KbSI8)的简短英语片段。'
- en: '[Youtube Video](https://www.youtube.com/embed/SUgrS_KbSI8)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Youtube 视频](https://www.youtube.com/embed/SUgrS_KbSI8)'
- en: Niklaus Emil Wirth was born in Wintherthur in Switzerland, the day after St
    Valentine's Day 1934. In 1959 he got his bachelor's degree from [ETH Zürich](https://ethz.ch/en.html),
    to which he returned later in life and from which much of his important research
    emerged.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尼古劳斯·埃米尔·维尔特于1934年圣瓦伦丁节的第二天出生在瑞士的温特图尔。1959年，他从[苏黎世联邦理工学院](https://ethz.ch/en.html)获得了学士学位，后来他回到了那里，并在那里进行了许多重要的研究。
- en: 'He changed countries several times in his life – his 1960 master''s degree
    was from the [Université Laval](https://www.ulaval.ca/en) in Canada, and his 1963
    doctorate from [UC Berkeley*](https://www.berkeley.edu/) – the home of [Berkeley
    Unix](https://www.theregister.com/2022/02/09/section_8_unix_user_manual/), or
    BSD as it''s usually known. He stayed in California for the next four years as
    assistant professor of computer science at [Stanford University](https://www.stanford.edu/about/).
    During this time, he worked on his first two programming languages: [Euler](http://pascal.hansotten.com/niklaus-wirth/euler-2/)
    in 1965, and [PL/360](https://dl.acm.org/doi/10.1145/321439.321442), published
    in 1968.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 他一生中几次改变了国家——1960年他获得了加拿大[拉瓦尔大学](https://www.ulaval.ca/en)的硕士学位，1963年获得了加州大学伯克利分校[UC
    Berkeley*](https://www.berkeley.edu/)的博士学位——伯克利 Unix（通常称为 BSD）的诞生地。在接下来的四年里，他在[斯坦福大学](https://www.stanford.edu/about/)担任计算机科学助理教授。在这期间，他创作了他的前两种编程语言：[Euler](http://pascal.hansotten.com/niklaus-wirth/euler-2/)于1965年，以及1968年出版的[PL/360](https://dl.acm.org/doi/10.1145/321439.321442)。
- en: Partly as a result of this work, he was invited into the Working Group planning
    the next iteration of the ALGOL programming language, to replace [ALGOL 60](https://www.theregister.com/2020/05/15/algol_60_at_60/).
    Along with [British computer scientist Sir Tony Hoare](https://www.theregister.com/2004/06/14/grand_challenge_compsci/),
    he presented a proposal called [ALGOL-W](http://pascal.hansotten.com/niklaus-wirth/algol-w/).
    However, this was rejected in favour of a more complex proposal from Adriaan van
    Wijngaarden, which became ALGOL-68.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一部分是由于这项工作，他被邀请加入筹划下一代 ALGOL 编程语言的工作组，以取代[ALGOL 60](https://www.theregister.com/2020/05/15/algol_60_at_60/)。与[英国计算机科学家托尼·霍尔爵士](https://www.theregister.com/2004/06/14/grand_challenge_compsci/)一起，他提出了一个名为[ALGOL-W](http://pascal.hansotten.com/niklaus-wirth/algol-w/)的提案。然而，这个提案被阿德里安·范·温加登提出的更复杂的提案所取代，后者成为了
    ALGOL-68。
- en: 'As described in C H Lindsey''s [History of ALGOL-68](https://dl.acm.org/doi/pdf/10.1145/234286.1057810)
    [PDF], when the ALGOL-W proposal was rejected, Wirth resigned from the committee,
    contributing a strong ["Closing Word"](https://archive.computerhistory.org/resources/text/algol/algol_bulletin/A29/P32.HTM)
    to the November 1968 [Algol Bulletin 29](https://archive.computerhistory.org/resources/text/algol/algol_bulletin/),
    containing gems such as:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如C H林赛的[ALGOL-68历史](https://dl.acm.org/doi/pdf/10.1145/234286.1057810) [PDF]所述，当ALGOL-W提案被拒绝时，威斯特辞去了委员会的职务，并在1968年11月的[Algol
    Bulletin 29](https://archive.computerhistory.org/resources/text/algol/algol_bulletin/)上发表了一篇强有力的["结语"](https://archive.computerhistory.org/resources/text/algol/algol_bulletin/A29/P32.HTM)，其中包含了一些珍贵的话语，例如：
- en: Instead, Wirth took his proposal, changed it to be somewhat less compatible
    with ALGOL, and released it in 1970 under the name Pascal.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，威斯特采取了他的建议，使之与ALGOL相比略微不那么兼容，并于1970年以帕斯卡的名义发布了它。
- en: 'In this way, the story of Pascal''s creation has two, different, parallel impacts.
    It was, of course, a [big hit](https://www.theregister.com/2020/05/29/happy_50th_pascal/)
    and is still used today. The flipside of this, though, is that the overcomplicated
    ALGOL-68 was a flop: as the *ALGOL-60 Forever* page [puts it](https://www.algol60.org/15algolw.htm):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，帕斯卡创作的故事产生了两种不同但平行的影响。 当然，它是一场[巨大的成功](https://www.theregister.com/2020/05/29/happy_50th_pascal/)，至今仍在使用。
    但与此同时，复杂的ALGOL-68却是一个失败：正如*ALGOL-60 Forever*页面所[描述的](https://www.algol60.org/15algolw.htm)：
- en: It's not much of an exaggeration to say that ALGOL-60 influenced every programming
    language invented afterwards, but its influence ended with the version released
    after Wirth's departure. His own languages were successful, in research and also
    commercially – Delphi is still on sale, and the [Free Pascal project](https://www.freepascal.org/)
    just released Version 3.0 of its cross-platform [Lazarus IDE](https://www.lazarus-ide.org/).
    However, the complexity of ALGOL-68 opened up the opportunities for newer, simpler
    languages such as C, Simula-67, and their offspring C++, and the legions of other
    languages and OSes implemented in them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不夸张，ALGOL-60影响了后来发明的每一种编程语言，但其影响在威斯特离职后发布的版本结束。 他自己的语言在研究和商业上都很成功 - Delphi仍在销售中，而[Free
    Pascal项目](https://www.freepascal.org/)刚刚发布了跨平台的[Lazarus IDE 3.0版本](https://www.lazarus-ide.org/)。
    然而，ALGOL-68的复杂性为C、Simula-67及其衍生物C++等更新、简化的语言以及由它们实现的大量其他语言和操作系统提供了机会。
- en: 'You can get a hint of the relationship between the leaders of the rival ALGOL
    proposals from the way that Van Wijngaarden introduced Wirth on stage at the [International
    Federation for Information Processing](https://www.ifip.org/) congress in 1965\.
    He made a joke which became famous:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从Van Wijngaarden在1965年的[国际信息处理联合会](https://www.ifip.org/)大会上向威斯特介绍的方式可以略窥两位竞争对手ALGOL提案的领导者之间的关系。
    他开了一个笑话，后来变得很有名：
- en: If Wirth had continued to work on ALGOL, its huge influence might well have
    continued. Similarly, if he had stuck with the well-known Pascal brand, his later
    projects might have replaced it, rather than it surviving alongside its intended
    replacements.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果威斯特继续致力于ALGOL的研究，它的巨大影响力可能会继续存在。 类似地，如果他坚持使用著名的帕斯卡品牌，他的后续项目可能会取代它，而不是与其预期的替代品一起存活。
- en: In 1976, Wirth named his next language [Modula](https://www.research-collection.ethz.ch/bitstream/20.500.11850/68669/1/eth-3057-01.pdf)
    [PDF], but it was quickly replaced with Modula-2 in 1977\. This added cooperating
    processes called *coroutines* to the language, using his former co-worker C A
    R Hoare's [Communicating Sequential Processes](https://dl.acm.org/doi/10.1145/359576.359585)
    model. (These days, these feature in Erlang, Go, and Clojure, and [were lampooned](https://www.theregister.com/2009/12/10/verity_stob/)
    by our own Verity Stob.) In the 1980s and 1990s, Modula-2 was an important language
    across the industry, as we discussed when [GCC 13 gained support for it](https://www.theregister.com/2022/12/16/gcc_13_will_support_modula2/)
    last year.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 1976年，威斯特命名了他的下一个语言[Modula](https://www.research-collection.ethz.ch/bitstream/20.500.11850/68669/1/eth-3057-01.pdf)
    [PDF]，但很快就被1977年的Modula-2取代了。 这为语言添加了协作进程，称为*协程*，使用了他的前同事C A R Hoare的[通信顺序进程](https://dl.acm.org/doi/10.1145/359576.359585)模型。（这些特性如今在Erlang、Go和Clojure中出现，并且[被我们自己的Verity
    Stob所讽刺](https://www.theregister.com/2009/12/10/verity_stob/)。）在1980年代和1990年代，Modula-2是行业内的一种重要语言，就像我们去年在[GCC
    13增加对其的支持](https://www.theregister.com/2022/12/16/gcc_13_will_support_modula2/)时讨论的那样。
- en: 'Wirth spent two one-year sabbaticals back in California at Xerox PARC, the
    first in 1976-1977 and the second in 1984-1985\. Inspired by what he saw there,
    on his return to Zürich he created the much more ambitious Oberon System. Oberon
    is a programming language, and a tiled-window development environment, and a complete
    operating system implemented in itself. The introduction to the [Oberon manual](http://www.projectoberon.net/wirth/ProjectOberon/PO.System.pdf)
    [PDF] contains what came to be known as *Wirth''s Law,* although he modestly [credited
    it to Martin Reiser](https://www.theregister.com/2023/01/11/software_versus_hardware/):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 维尔斯在1976年至1977年和1984年至1985年两次在加利福尼亚的施乐帕克进行了为期一年的休假。受到那里的启发，他回到苏黎世创造了更雄心勃勃的奥伯龙系统。奥伯龙是一种编程语言，一个瓦片式窗口开发环境，以及一个完整的自实现操作系统。[奥伯龙手册](http://www.projectoberon.net/wirth/ProjectOberon/PO.System.pdf)
    [PDF]的介绍包含了后来被称为*维尔斯法则*的内容，尽管他谦虚地将其归功于[Martin Reiser](https://www.theregister.com/2023/01/11/software_versus_hardware/)。
- en: The project is described very readably in [Oberon – the Overlooked Jewel](https://people.cis.ksu.edu/~danielwang/Investigation/System_Security/download.pdf)
    [PDF], which is just 13 pages long. Oberon has inspired multiple successors, including
    Oberon-2, Oberon 07, and [Component Pascal](https://blackboxframework.org/index.php?cID=home,en-us).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目在[奥伯龙——被忽视的宝石](https://people.cis.ksu.edu/~danielwang/Investigation/System_Security/download.pdf)
    [PDF]中被描述得非常易读，仅有13页。奥伯龙激发了多个后继者，包括奥伯龙-2、奥伯龙 07 和[组件帕斯卡](https://blackboxframework.org/index.php?cID=home,en-us)。
- en: 'The Oberon System is a sort of existence proof of how software can be very
    capable while being almost unbelievably tiny: the `inner`, `outer` and `systools`
    archives from the 2013 edition total some 4,623 lines of code, in 262kB of text.
    That''s the entire core environment. But if that were not enough, Wirth explained
    the idea in a famous 1995 paper, ["A Plea for Lean Software"](https://blog.frantovo.cz/s/1576/Niklaus%20Wirth%20-%20A%20Plea%20for%20Lean%20Software%20-%20OCR.pdf)
    (The original is a PDF, but I have put a text version [here](https://liam-on-linux.dreamwidth.org/88032.html).)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 奥伯龙系统是软件如何可以非常强大而几乎不可思议地小的一种存在证明：2013年版的`inner`、`outer`和`systools`归档总共约有4,623行代码，占据262kB的文本。这就是整个核心环境。但如果这还不够的话，维尔斯在一篇著名的1995年论文中解释了这个想法，["对于精简软件的呼吁"](https://blog.frantovo.cz/s/1576/Niklaus%20Wirth%20-%20A%20Plea%20for%20Lean%20Software%20-%20OCR.pdf)（原版是PDF，但我在[这里](https://liam-on-linux.dreamwidth.org/88032.html)放了一个文本版本）。
- en: 'His *alma mater* ETH Zürich interviewed him in 2021, and the German-language
    videos have English subtitles: [Part 1](https://inf.ethz.ch/news-and-events/spotlights/infk-news-channel/2021/11/niklaus-wirth-video-interview.html),
    [Part 2](https://inf.ethz.ch/news-and-events/spotlights/infk-news-channel/2021/12/niklaus-wirth-video-interview.html)
    and [Part 3](https://inf.ethz.ch/news-and-events/spotlights/infk-news-channel/2021/12/niklaus-wirth-video-interview-part3.html).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 他的母校苏黎世联邦理工学院在2021年对他进行了采访，德语视频带有英文字幕：[第1部分](https://inf.ethz.ch/news-and-events/spotlights/infk-news-channel/2021/11/niklaus-wirth-video-interview.html)，[第2部分](https://inf.ethz.ch/news-and-events/spotlights/infk-news-channel/2021/12/niklaus-wirth-video-interview.html)
    和 [第3部分](https://inf.ethz.ch/news-and-events/spotlights/infk-news-channel/2021/12/niklaus-wirth-video-interview-part3.html)。
- en: From many accounts, he was approachable, friendly, and witty; we particularly
    liked [this tribute](https://mastodon.online/@raph/111693863925852135) from Googler
    [Raph Levien](https://levien.com/). Wirth retired in April 1999, although in 2013,
    shortly before he turned 80, he reappeared to publish an updated version of [Project
    Oberon](http://www.projectoberon.net/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 根据许多描述，他很平易近人、友好且风趣；我们特别喜欢来自谷歌员工[Raph Levien](https://levien.com/)的[这篇致敬](https://mastodon.online/@raph/111693863925852135)。维尔斯于1999年4月退休，尽管在2013年，就在他快80岁时，他重新出现并发布了[奥伯龙计划](http://www.projectoberon.net/)的更新版本。
- en: In his work, the languages and tools he created, in his eloquent plea for smaller,
    more efficient software – even in the projects from which he quit – his influence
    on the computer industry has been almost beyond measure. The modern software industry
    has signally failed to learn from him. Although he has left us, his work still
    has much more to teach. ®
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的工作中，他创造的语言和工具，在他对更小、更高效软件的雄辩呼吁中——即使在他辞职的项目中——他对计算机行业的影响几乎无法估量。现代软件行业显然未能从他身上学到。尽管他已经离开我们，但他的工作仍有很多东西可以教给我们。®
- en: '*A previous version of this story had that as "UCSD" Pascal, which a member
    of that project was kind enough to remind us was a derivative of the P2 compiler
    from ETH Zürich.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*本故事的先前版本将之称为"UCSD" Pascal，该项目的一位成员很好地提醒我们，这是来自瑞士苏黎世联邦理工学院（ETH Zürich）的P2编译器的一个派生版本。'
