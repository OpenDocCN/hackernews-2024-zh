["```\nlibrary ieee;\nuse ieee.std_logic_1164.all;\n\nentity lfsr is port(\n\n    i_clk       : in std_logic;\n    o_fibonacci : out std_logic_vector(7 downto 0);\n    o_galois    : out std_logic_vector(7 downto 0)\n    );\nend entity;\n\narchitecture rtl of lfsr is \n\n    signal s_galois_lfsr    : std_logic_vector(1 to 8) :=(others =>'0');\n    signal s_fibonacci_lfsr : std_logic_vector(1 to 8) :=(others =>'0');\n\nbegin\n    G_LFSR: process(i_clk)\n    begin\n        if rising_edge(i_clk) then\n            s_galois_lfsr(6 to 8) <= s_galois_lfsr(5 to 7);\n            s_galois_lfsr(5) <= s_galois_lfsr(4) XNOR s_galois_lfsr(8);\n            s_galois_lfsr(4) <= s_galois_lfsr(3) XNOR s_galois_lfsr(8);\n            s_galois_lfsr(3) <= s_galois_lfsr(2) XNOR s_galois_lfsr(8);\n            s_galois_lfsr(2) <= s_galois_lfsr(1);\n            s_galois_lfsr(1) <= s_galois_lfsr(8);\n        end if;\n    end process;\n\n    F_LFSR: process(i_clk)\n    begin\n        if rising_edge(i_clk) then\n            s_fibonacci_lfsr(2 to 8) <= s_fibonacci_lfsr(1 to 7);\n            s_fibonacci_lfsr(1) <= s_fibonacci_lfsr(8) XNOR s_fibonacci_lfsr(6) XNOR s_fibonacci_lfsr(5) XNOR s_fibonacci_lfsr(4) ;\n        end if;\n    end process;\n\n    o_galois <= s_galois_lfsr;\n    o_fibonacci <= s_fibonacci_lfsr;\n\nend architecture;\n```", "```\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\nuse std.textio.all;\nuse ieee.std_logic_textio.all;\n\nentity lfsr_tb is\nend;\n\narchitecture bench of lfsr_tb is\n  -- Clock period\n  constant clk_period : time := 10 ns;\n\n  file fibonacci : text;\n  file galois    : text;\n\n  signal i_clk : std_logic :='0' ;\n  signal o_fibonacci : std_logic_vector(7 downto 0);\n  signal o_galois : std_logic_vector(7 downto 0);\n\nbegin\n\n  lfsr_inst : entity work.lfsr\n  port map (\n    i_clk => i_clk,\n    o_fibonacci => o_fibonacci,\n    o_galois => o_galois\n  );\n\nprocess\n\n    variable f_line : line;\n    variable g_line : line;\nbegin \n\n    file_open(fibonacci, \"fibonacci.txt\", write_mode);\n    file_open(galois, \"galois.txt\", write_mode);\n\n    for i in 0 to 256 loop\n        wait until rising_edge(i_clk);\n        HWRITE(f_line, o_fibonacci );\n        HWRITE(g_line, o_galois );\n        WRITELINE(fibonacci, f_line);\n        WRITELINE(galois, g_line);\n    end loop;\n    file_close(fibonacci);\n    file_close(galois);\n    report \"simulation complete\" severity failure;\nend process;\n\ni_clk <= not i_clk after clk_period/2;\n\nend;\n```"]