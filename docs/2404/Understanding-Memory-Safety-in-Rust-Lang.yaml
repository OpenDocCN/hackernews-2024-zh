- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:04:30'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:04:30
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Understanding Memory Safety in Rust Lang
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Rust Lang中理解内存安全
- en: 来源：[https://coderoasis.com/rust-lang-memory-safety/](https://coderoasis.com/rust-lang-memory-safety/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://coderoasis.com/rust-lang-memory-safety/](https://coderoasis.com/rust-lang-memory-safety/)
- en: The last decade has been amazing for the Rust Programming Language to become
    the choice for people has the goal of writing fast, machine native software and
    web applications. The way that the language was made was for strong guarantees
    for memory safety. We are here to try to understand this better.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 过去十年对于Rust编程语言而言是不可思议的，它已成为写快速、机器本地化软件和Web应用程序的首选。语言的设计目标是为了强有力地保证内存安全。我们在这里尝试更好地理解这一点。
- en: Languages like `C` runs fast and low level as can be. They usually lack the
    features of ensuring the memory of a program is allocated and disposed of properly
    when the program is used and terminated. Noted by the White House National Cybersecurity
    Director, warns that without taking proper care of programming standards, there
    can be [serious exploits and vulnerabilities which can cause some major real world
    consequences](https://www.tomshardware.com/software/security-software/white-house-urges-developers-to-avoid-c-and-c-use-memory-safe-programming-languages?ref=coderoasis.com).
    The languages like Go and Rust – which put memory safety first – are gaining more
    and more attention.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`C`的语言运行速度快，属于低级别语言。它们通常缺乏确保程序在使用和终止时内存分配和释放正确的功能。白宫国家网络安全主任指出，如果不遵循适当的编程标准，可能会导致[严重的漏洞和安全问题，这可能导致一些重大的现实世界后果](https://www.tomshardware.com/software/security-software/white-house-urges-developers-to-avoid-c-and-c-use-memory-safe-programming-languages?ref=coderoasis.com)。像Go和Rust这样把内存安全放在首位的语言正越来越受到关注。
- en: How does the Rust Language guarantee memory safety? Let's find out!
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: Rust语言如何保证内存安全？让我们一起来了解一下！
- en: '* * *'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*Do you like what you are reading? We do recommend this next article – *[**Implementing
    RSA from Scratch in JavaScript**](https://coderoasis.com/implementing-rsa-from-scratch-in-javascript/)* –
    to you to continue learning with us.*'
  id: totrans-split-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*您喜欢正在阅读的内容吗？我们建议您继续学习，阅读下一篇文章 – *[**用JavaScript从头开始实现RSA**](https://coderoasis.com/implementing-rsa-from-scratch-in-javascript/)* –*'
- en: '[Implementing RSA from Scratch in JavaScript'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[用JavaScript从头开始实现RSA'
- en: Please note that it is essential for me to emphasize that the code and techniques
    presented here are intended solely for educational purposes and should never be
    employed in real-world applications without careful consideration and expert guidance.
    At the same time, understanding the principles of RSA cryptography and exploring
    various](https://coderoasis.com/implementing-rsa-from-scratch-in-javascript/)
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我必须强调这里所介绍的代码和技术仅供教育目的，不应在没有仔细考虑和专家指导的情况下用于真实的应用程序中。同时，理解RSA加密原理并探索各种](https://coderoasis.com/implementing-rsa-from-scratch-in-javascript/)
- en: '* * *'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Memory Safety is Native
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存安全是本地的
- en: The most important thing to understand about the Rust Programming Language is
    that they do not require an extra library or analysis tool to check for issues.
    They can be optional though to double check – yet the memory safety features are
    built right into the programming language by default. They are mandatory and enforced
    standards before any of your code ever runs.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Rust编程语言最重要的理解是，它们不需要额外的库或分析工具来检查问题。尽管可以选择性地进行双重检查，但内存安全特性默认内置在编程语言中。这些是强制性的，是在代码运行之前强制执行的标准。
- en: By default, in Rust, code that is not memory safe are treated as *compiler errors*
    and not *runtime errors*. This has major advantages to coding in Rust because
    code that is invalid will never compile. This means it will never make it to a
    production environment. With languages like `C` or `C++`, memory errors are far
    too often are only discovered at runtime.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Rust中，默认情况下，不安全的代码被视为*编译器错误*而不是*运行时错误*。这对于在Rust中编写代码具有重大优势，因为无效的代码永远不会编译通过。这意味着它永远不会进入生产环境。而在像`C`或`C++`这样的语言中，内存错误往往只有在运行时才会被发现。
- en: You also need to remember that this does not mean that the Rust programming
    language or any software applications coded in it is completely bulletproof either.
    There can be rare issues – like [race conditions](https://doc.rust-lang.org/nomicon/races.html?ref=coderoasis.com)
    – that are still the developer's responsibility to make sure are not an issue
    with their code. Yet, at the same time, Rust does take a lot of common exploits
    and vulnerabilities out of the equation for us.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这并不意味着Rust编程语言或者使用它编写的任何软件应用程序完全是无懈可击的。仍可能存在一些罕见的问题，比如[竞争条件](https://doc.rust-lang.org/nomicon/races.html?ref=coderoasis.com)，开发者仍需确保其代码中不存在这些问题。然而，同时，Rust确实排除了许多常见的漏洞和安全问题。
- en: Programming languages like `C#`, `Python`, and `Java` require the developer
    to do memory management manually. With Rust, the developer is more able to focus
    on writing code and getting the job done more efficiently. This level of convenience
    also comes at a small cost – usually in speed or the need of a larger runtime.
    From my experience dabbling around with Rust, the binaries are usually always
    more compact and runs at native machine level speeds by default while remaining
    memory safe the whole time.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言如`C#`、`Python`和`Java`要求开发者手动进行内存管理。而使用Rust，开发者更能集中精力编写代码并更高效地完成工作。这种便利性通常会以一定的成本为代价——通常是速度上的损失或更大的运行时需求。根据我在Rust上的使用经验，生成的二进制文件通常更为紧凑，且默认情况下以本机机器级速度运行，同时始终保持内存安全。
- en: Immutable by Default
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认为不可变
- en: One of the first things I learned about researching the the Rust programming
    language is that all variables are immutable by default. This means that they
    can't be reassigned or modified. If you wanted to change or modify a immutable
    variable or function, then you have to specifically declare it as mutable for
    it to be changed.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在研究Rust编程语言的最初阶段，我了解到所有变量默认为不可变。这意味着它们无法重新分配或修改。如果您想要更改或修改一个不可变的变量或函数，则必须明确声明它为可变以便进行更改。
- en: This may seem like something very small or not important to a lot of developers,
    but it has the amazing effect to forcing the developer to be highly conscious
    of what values need to be mutable in the software application that they are developing
    – this includes *when* they need them to be also. The results of the Rust application
    are making it way easier for the developer to tell when, where, and what you can
    change.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于很多开发者来说，这可能看起来微不足道或不重要，但它确实使开发者高度关注在他们开发的软件应用程序中哪些值需要是可变的，包括需要它们何时变化。Rust应用程序的结果使开发者更容易确定何时、何地以及可以改变什么。
- en: The concept of *immutable by default* is very important and different from the
    ideas of a constant. Let's take a immutable variable as an example. This variable
    can be computed then stored as an immutable at the runtime. This means that it
    can first be computed, then stored, and not changed. Now, let's take a constant.
    The constant must be computable at the time of compile – this is also before the
    program ever runs. There are many different kinds of values – such as one being
    of user input, as an example – that can't be stored as a constant this way at
    all.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 默认为*不可变*的概念非常重要，与常数的概念有所不同。我们以不可变变量为例。该变量可以在运行时首先计算，然后存储为不可变。这意味着它可以首先计算，然后存储，并且不会更改。现在，我们再来看一个常数。常数必须在编译时计算——这也是程序运行之前。有许多不同类型的值——例如用户输入的一个示例——无法以这种方式作为常数存储。
- en: The `C++` programming language assumes this is the opposite of the Rust programming
    language – where everything is highly mutable. By default, you must use the `const`
    keyword to declare a something as immutable. In theory, you could honestly adopt
    the `C++` coding style of using `const` by default. This will only ever cover
    the code that you write for your own software applications. While using Rust by
    default, the way you code in it ensures that all software applications are written
    in the programming language are immutable.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`C++`编程语言假设这与Rust编程语言相反——其中一切都高度可变。默认情况下，您必须使用`const`关键字将某些内容声明为不可变。理论上，您可以诚实地采用`C++`的编码风格，将`const`作为默认选项。这只会覆盖您为自己的软件应用程序编写的代码。而使用Rust，默认情况下编写的所有软件应用程序都是不可变的。'
- en: The Cost of Memory Safety
  id: totrans-split-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存安全的代价
- en: There is also some costs to the memory safety that we need to go over also.
    The one that comes to the top of my head is the need to learn how to use the language
    itself.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些与内存安全相关的成本也需要我们讨论。我脑海中首先想到的是需要学习如何使用语言本身。
- en: I will admit that switching to a new programming language is never an easy thing
    for me. Rust, so far, has a massive learning curve for me to learn. It is taking
    me some time to grasp the memory management model to be able to produce usable
    code for my applications which I want to learn to make. The learning curve of
    the language has been a big discussion online for people starting out to the experts
    of the language in many different forums, communities, and websites.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我要承认，对我来说，切换到一种新的编程语言从来都不是一件容易的事情。到目前为止，Rust 对我来说有一个巨大的学习曲线。我需要一些时间来掌握内存管理模型，以便能够为我想要学习制作的应用程序生成可用的代码。语言的学习曲线已经成为在线许多不同论坛、社区和网站上从初学者到语言专家的大讨论。
- en: The older languages like `C` and `C++` which has even larger and more experienced
    developer community argues in their favor over Rust. They also have something
    which Rust lacks in a few ways which is code examples, libraries, and complete
    application examples to work off of. For me, it's not that hard to understand
    why some people choose to use any of the `C` languages over Rust at times. They
    have more development tools and resources that exist around them.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 像`C`和`C++`这样的老旧语言，它们甚至拥有更大、更有经验的开发者社区，为它们辩护优于 Rust。它们还有 Rust 在某些方面缺少的东西，例如代码示例、库和完整的应用程序示例。对我来说，有时很难理解为什么有些人会选择使用任何`C`语言而不是
    Rust。它们拥有更多的开发工具和围绕它们存在的资源。
- en: Yet, at the same time, within the decade that Rust has been around, it has gained
    a lot of development tools, good documentation, and an amazing community to learn
    and discuss with. They make it super easy to get up to speed and take off development
    of good software applications. The amazing collection of third-party libraries
    – also known as Crates – is highly expansive and growing more and more everyday.
    Developers who are joining the Rust programming language could require some retraining
    and learning new tools, but you will barely ever lack the resources you need or
    a library for a given project.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在 Rust 存在的这十年中，它已经获得了许多开发工具、良好的文档和一个令人惊叹的社区用于学习和讨论。它们使得快速上手和开发优秀软件应用变得非常容易。第三方库的惊人集合
    - 也称为 Crates - 非常广泛，每天都在不断增长。加入 Rust 编程语言的开发者可能需要一些重新培训和学习新工具，但你几乎永远不会缺少所需的资源或给定项目的库。
- en: Buffer Overflow Example
  id: totrans-split-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓冲区溢出示例
- en: '[PRE0]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Code Example
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 代码示例
- en: 'When we compiled this code, it compiled without errors and warnings. However.
    when we run the code, see the following output:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编译此代码时，它无错误和警告地编译。然而，当我们运行代码时，查看以下输出：
- en: '[PRE1]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Compiled Code Output
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的代码输出
- en: What are Ownership, Borrowing, and References?
  id: totrans-split-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是所有权、借用和引用？
- en: By default, every value in the Rust programming language has an *owner*. This
    means that any value – anywhere or any point in the code also – can only have
    full read/write control can have it at one time. The ownership of a value can
    be given away or better yet be *borrowed* from the original owner. Yet at the
    same time of a value being borrowed, this behavior is strictly tracked by the
    compiler. If any code tries to violate the ownership rules which are defined in
    the programming language than the compiler refuses to compile the code.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Rust 编程语言中的每个值都有一个*所有者*。这意味着任何值 - 无论何时或代码中的任何点 - 都只能在某一时刻具有完全的读/写控制权。一个值的所有权可以被转移，或者更好地*借用*自原始所有者。然而，在值被借用的同时，这种行为严格由编译器跟踪。如果任何代码试图违反编程语言中定义的所有权规则，则编译器拒绝编译该代码。
- en: When we look to see how the `C` programming language handles this, we come to
    find out that there is no ownership with objects. This means that anything we
    want can be accessed by any other thing at literally anytime that it wants access
    to it. All of the responsibility of how anything is changed, modified, or used
    rests with how the programmer developes the software application.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们看看`C`编程语言如何处理这个问题时，我们发现对象没有所有权。这意味着我们想要的任何东西都可以随时被任何其他东西访问。如何修改、修改或使用任何东西的所有责任都取决于程序员如何开发软件应用程序。
- en: In other programming languages such as `Python,` `C#`, and `Java`, the ownership
    rules just flat out do not exist at all. This is also due to that just don't need
    to exist either. This usually means that that they handle Object access – and
    also includes memory safety – is handled at the runtime. Like before, this comes
    at a cost – it can also be big or small depending on the software application
    – which is the speed or the size or even presence of a runtime.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他编程语言如 `Python`、`C#` 和 `Java` 中，所有权规则根本不存在。这也是因为它们根本不需要存在。这通常意味着它们处理对象访问 –
    还包括内存安全 – 是在运行时处理的。与之前一样，这是有代价的 – 它可以是大的或小的，具体取决于软件应用程序 – 这是速度、大小甚至运行时存在性的问题。
- en: Ownership Code Examples
  id: totrans-split-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 所有权代码示例
- en: In the following example, the `s1` variable is now longer valid when we assign
    it to `s2`. This prevents from having double free errors, because `s2` goes out
    of scope. This allows the memory to be freed only one time. If we try to use `s1`
    after handing over ownership of the variable to `s2` then we will receive a compile
    time error.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，当我们将 `s1` 变量赋值给 `s2` 时，`s1` 不再有效。这样可以防止双重释放错误，因为 `s2` 超出作用域。这样只允许内存释放一次。如果我们在将变量所有权交给
    `s2` 后尝试使用 `s1`，则会收到编译时错误。
- en: '[PRE2]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Variable Ownership
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 变量所有权
- en: The next example shows us how ownership is transferred via variables when they
    are passed unto functions. If the `type` implements the `Copy` trait – such as
    `integers`, `booleans`, and other types – the value is also copied. Then the original
    variable that was called can still be used also. Otherwise when the ownership
    is moved, the original variable can no longer be used.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个例子展示了在将变量传递给函数时如何通过变量传递所有权。如果 `type` 实现了 `Copy` 特性，比如 `整数`、`布尔值` 和其他类型，那么值也会被复制。然后调用的原始变量也可以继续使用。否则，当所有权被移动时，原始变量就不能再使用了。
- en: '[PRE3]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Functions Ownership
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 函数所有权
- en: Some Takeaways
  id: totrans-split-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些要点
- en: Ownership is an amazingly powerful feature of the Rust programming language
    that ensures memory safety and efficiency.
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有权是 Rust 编程语言的一个非常强大的特性，它确保了内存安全和效率。
- en: The language enforces a single owner for each piece of memory. Rust eliminates
    common errors like double free, memory leaks, and dangling pointers.
  id: totrans-split-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该语言强制每个内存片段只有一个所有者。Rust 消除了诸如双重释放、内存泄漏和悬垂指针等常见错误。
- en: The key to writing an application in Rust is understanding and using ownership
    correctly from now on.
  id: totrans-split-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Rust 中编写应用程序的关键是从现在开始正确理解和使用所有权。
- en: Borrowing Code Example
  id: totrans-split-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 借用代码示例
- en: The Rust programming language will allow you to reference a value without needing
    to take ownership of it. This is known as barrowing. There are two types of borrowing
    – they are immutable and mutable.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 编程语言允许您引用值而无需拥有它。这称为借用。借用有两种类型 – 它们是不可变的和可变的。
- en: In the following example, `s` is used as a reference to `s1`, meaning it does
    not own the `String`. Since the `s` variable does not take ownership, the `s1`
    variable will remain valid after the call to `calculate_length`.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，`s` 被用作对 `s1` 的引用，这意味着它不拥有 `String`。由于 `s` 变量不拥有所有权，调用 `calculate_length`
    后 `s1` 变量仍然有效。
- en: '[PRE4]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The next example is mutable borrowing. This allows you to change something that
    is being borrowed. However, there is a big limitation. There can only be one mutable
    reference to a piece of data in a particular scope. This is to prevent people
    from data races at the time of compiling.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个例子是可变借用。这允许您更改被借用的东西。但是有一个很大的限制。在特定范围内同一时间只能有一个可变引用数据。这是为了防止在编译时发生数据竞争。
- en: '[PRE5]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What are Lifetimes?
  id: totrans-split-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生命周期是什么？
- en: Lifetimes are references to values in the Rust programming language that just
    don't have owners – but they do have Lifetimes. This means it's a scope of which
    a given reference is allowed to be valid. In most cases coding in Rust, lifetimes
    are left implicit, since the compiler can trace them easily. Yet, at the same
    time, lifetimes can also be explicitly used for more complex use cases.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 生命周期是 Rust 编程语言中对值的引用，它们没有所有者 – 但它们确实有生命周期。这意味着给定引用被允许有效的范围。在大多数情况下，编写 Rust
    代码时，生命周期被隐式地留下，因为编译器可以轻松地追踪它们。然而，同时，生命周期也可以用于更复杂的用例，显式地使用。
- en: You also need to remember that if you attempt to access or modify something
    outside of the lifetime that it was given – or better yet if it has gone out of
    scope – it will result in a compiler error. The goal of this is to prevent whole
    classes of bugs making it all the way to production environments or live software
    applications.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 还需记住，如果试图在给定的生命周期之外访问或修改某些内容 – 更好的是如果它已经超出作用域 – 这将导致编译器错误。这个目标是防止整类bug最终进入生产环境或实际软件应用程序。
- en: '`Dangling pointers` can emerge when you try to access a variable or function
    that has either been deallocated or has gone out of scope. This also tends to
    happen in the `C` and `C++` programming languages more than Rust. The `C` programming
    language has no official or proper enforcement at the compile time for a lifetime
    of an object. The `C++` programming language has *smart pointers* concepts to
    help prevent this – they are not native or implemented or enforced by default
    – so you will have to opt-in to using them.'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`悬空指针（Dangling pointers）`可能在你试图访问一个已被释放或超出作用域的变量或函数时出现。这种情况在`C`和`C++`编程语言中比在Rust中更为常见。`C`编程语言在编译时没有官方或适当的执行对象生命周期的强制规定。`C++`编程语言引入了*智能指针*的概念来帮助预防这种情况
    – 它们并不是默认的本地实现或强制执行 – 因此你需要选择使用它们。'
- en: A lot of people leave the safety of the programming language up to the developers.
    What I mean is when it comes to memory safety practices in `C` or the `C++` programming
    language, it is usually a coding style that a developer has picked up on or even
    a institutional requirement – it's not something that the programming language
    outright requires you to do by default or is built into the language.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人把编程语言的安全性留给开发者。我的意思是，当涉及到`C`或`C++`编程语言中的内存安全实践时，这通常是开发者采用的编码风格或机构要求 – 并不是编程语言默认要求你做的事情或内置于语言中。
- en: With programming languages such as `C#`, `Java`, or even `Python`, the memory
    management is the core responsibility of that languages runtime. This comes at
    a pretty big cost – in my personal opinion – of requiring a pretty big runtime.
    This can highly reduce the execution speeds of the software application. By default,
    the Rust programming language reduces the execution speed by enforcing the `lifetimes`
    rules before the code ever gets a chance to run.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在`C#`、`Java`或甚至`Python`等编程语言中，内存管理是语言运行时的核心责任。这会以相当大的成本 – 在我个人看来 – 即需要一个相当大的运行时。这可能大大降低软件应用程序的执行速度。而Rust编程语言通过在代码运行之前强制执行`生命周期（lifetimes）`规则来减少执行速度。
- en: Lifetime Code Example
  id: totrans-split-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生命周期代码示例
- en: Lifetimes guarantees that a reference is only valid as long as it is required
    to be. The compiler uses lifetimes to make sure they do not outlive any of the
    data which is being referenced.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 生命周期保证引用只在需要时有效。编译器使用生命周期来确保它们不会超出所引用的任何数据的生命周期。
- en: In the following example, using the `longest` function, we have a lifetime of
    `a` declared to specify the return value of the function. This will allow it to
    live as long as the shortest of the two input lifetimes.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，使用`longest`函数，我们声明了一个生命周期`a`来指定函数的返回值。这将允许它的生命周期与两个输入生命周期中的最短者相同。
- en: '[PRE6]'
  id: totrans-split-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Some Takeaways
  id: totrans-split-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些收获
- en: Lifetimes make sure that the references do not outlive the data that they are
    referring to.
  id: totrans-split-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生命周期确保引用不会超出它们所引用的数据的生存期。
- en: They are apart of the `Type` system that are used to perform checks at compile
    time without any cost at runtime.
  id: totrans-split-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是`类型（Type）`系统的一部分，用于在编译时执行检查，而没有运行时成本。
- en: Lifetimes in a function define how the lifetime of a difference reference can
    relate to each other.
  id: totrans-split-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数中的生命周期定义了不同引用之间生命周期的关系。
- en: The key to writing an application in Rust is understanding and using lifetimes
    correctly from now on.
  id: totrans-split-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Rust中编写应用程序的关键是从现在开始正确理解和使用生命周期。
- en: The Conclusion
  id: totrans-split-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Rust has changed the conversation about adding features or changes to existing
    programming languages that are lacking memory safety features by default or natively.
    They are transforming other languages enough to adopt these features.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: Rust已经改变了关于向现有编程语言添加功能或修改缺乏内存安全特性的对话。它们正在足够改变其他语言以采纳这些特性。
- en: These can be pretty ambitious ideas for the other languages that could be harder
    to implement. As an example if they were to add these features to `C` or `C++`,
    then we would have to talk about backwards compatibility. The behaviors that Rust
    brings by default to memory safety are harder to because it would force a hard
    divide between the existing legacy code and the new behaviors which developers
    will have to account for when switching over.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可能是其他语言中实现起来可能更难的雄心勃勃的想法。例如，如果将这些功能添加到 `C` 或 `C++` 中，我们将不得不讨论向后兼容性问题。Rust
    默认提供的内存安全行为更难实现，因为它将强制现有的遗留代码与新的行为方式进行严格分离，开发人员在切换时必须考虑这一点。
- en: The main thing that gives the Rust programming Language its place in the programming
    world and the most notable feature that it offers over other languages is the
    memory safety and the compile time behaviors that guarantees it. Using these features
    – the memory safety the way Rust wants you to do it – will demand more work from
    the developer initially, but the trade offs always pay off later in the software
    application.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 编程语言在编程世界中占据一席之地的主要原因，以及它相对于其他语言提供的最显著特征是内存安全和编译时行为的保证。使用这些特性——Rust 希望你这样做的内存安全方式——将会在开发者最初需投入更多工作，但这种折衷方案在软件应用程序中后续总是会得到回报。
- en: '* * *'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Do you like what you're reading from the CoderOasis Technology Blog? We recommend
    reading our [***Implementing RSA in Python from Scratch***](https://coderoasis.com/implementing-rsa-from-scratch-in-python/)
    series next.
  id: totrans-split-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你是否喜欢阅读 CoderOasis 技术博客的内容？我们推荐阅读我们的 [***Python 从零开始实现 RSA***](https://coderoasis.com/implementing-rsa-from-scratch-in-python/)
    系列。
- en: '[Implementing RSA in Python from Scratch'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python 从零开始实现 RSA'
- en: Please note that it is essential for me to emphasize that the code and techniques
    presented here are intended solely for educational purposes and should never be
    employed in real-world applications without careful consideration and expert guidance.
    At the same time, understanding the principles of RSA cryptography and exploring
    various](https://coderoasis.com/implementing-rsa-from-scratch-in-python/)
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要强调的是，这里所展示的代码和技术仅供教育目的，不应在现实应用中使用，除非经过仔细考虑和专家指导。同时，理解 RSA 加密原理并探索各种技术](https://coderoasis.com/implementing-rsa-from-scratch-in-python/)
- en: '* * *'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Did you know we have a [**Community Forums**](https://forums.coderoasis.com/?ref=coderoasis.com) and [**Discord
    Server**](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com)? which we invite everyone
    to join us? Want to discuss this article with other members of our community?
    Want to join a laid back place to chill and discuss topics like programming, cybersecurity,
    web development, and Linux? Consider joining us today!
  id: totrans-split-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你知道我们有一个 [**社区论坛**](https://forums.coderoasis.com/?ref=coderoasis.com) 和 [**Discord
    服务器**](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com) 吗？我们邀请每个人加入我们！想要与社区的其他成员讨论这篇文章吗？想要加入一个轻松愉快的地方，讨论编程、网络安全、Web
    开发和 Linux 等主题吗？今天就考虑加入我们吧！
- en: '[Join the CoderOasis.com Discord Server!'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[加入 CoderOasis.com 的 Discord 服务器！'
- en: CoderOasis offers technology news articles about programming, security, web
    development, Linux, systems admin, and more. | 112 members](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com)  [CoderOasis
    Forums
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: CoderOasis 提供关于编程、安全、Web 开发、Linux、系统管理等技术新闻文章。 | 112 位会员](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com)
    [CoderOasis 论坛
- en: CoderOasis Community Forums where our members can have a place to discuss technology
    together and share resources with each other.](https://forums.coderoasis.com/?ref=coderoasis.com)
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: CoderOasis 社区论坛，这里是我们的会员们可以一起讨论技术并分享资源的地方。](https://forums.coderoasis.com/?ref=coderoasis.com)
