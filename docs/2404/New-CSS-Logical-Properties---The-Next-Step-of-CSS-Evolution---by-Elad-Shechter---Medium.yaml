- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:00:31'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:00:31
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: New CSS Logical Properties!. The Next Step of CSS Evolution | by Elad Shechter
    | Medium
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的CSS逻辑属性！CSS进化的下一步 | 作者：Elad Shechter | Medium
- en: 来源：[https://elad.medium.com/new-css-logical-properties-bc6945311ce7](https://elad.medium.com/new-css-logical-properties-bc6945311ce7)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://elad.medium.com/new-css-logical-properties-bc6945311ce7](https://elad.medium.com/new-css-logical-properties-bc6945311ce7)
- en: CSS Floats
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS浮动
- en: Float is very straightforward, there are only two values, `**inline-start**`/`**inline-end,**`
    that replace the values of `left`/`right` **.**
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动非常直观，只有两个值，`**inline-start**`/`**inline-end,**`替换了`left`/`right`的值**。**
- en: 'In English(LTR):'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用英语（LTR）：
- en: '`float: left` = `float: **inline-start**`'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`float: left` = `float: **inline-start**`'
- en: '`float: right` = `float**: inline-end**`'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`float: right` = `float**: inline-end**`'
- en: Text-align
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本对齐
- en: Even easier than floats, the values `left`/`right` are replaced by `**start**`/`**end**`.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 比浮动更容易，值`left`/`right`被`**start**`/`**end**`替换。
- en: 'In English(LTR):'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用英语（LTR）：
- en: '`text-align :left` = `text-align: **start**;`'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`text-align :left` = `text-align: **start**;`'
- en: '`text-align :right` = `text-align: **end**;`'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`text-align :right` = `text-align: **end**;`'
- en: More Stuff
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容
- en: '**Resize** property: used mostly for `<textarea>`, its values are updated from
    `horizontal`/`vertical` to `**inline**`/`**block**`;'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**Resize** 属性：主要用于 `<textarea>`，其值从`horizontal`/`vertical`更新为`**inline**`/`**block**`；'
- en: 'In English (LTR):'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用英语（LTR）：
- en: '`resize: horizontal` = `resize: **inline**;`'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`resize: horizontal` = `resize: **inline**;`'
- en: '`resize: vertical` = `resize: **block;**`'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`resize: vertical` = `resize: **block;**`'
- en: '**background-position**: There isn’t any implementation yet in any browser,
    but if you look deeply, you can find some references to `**background-position-inline**`
    & `**background-position-block**` in Mozilla’s MDN website. There is no complete
    documentation yet, but they’re working on it! :-)'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**background-position**：尚未在任何浏览器中实现，但如果你仔细查看，可以在Mozilla的MDN网站中找到对`**background-position-inline**`和`**background-position-block**`的引用。尚无完整的文档，但他们正在努力中！
    :-)'
- en: '**Other Stuff**: We can assume that properties like `**transform-origin**`
    will be updated as well, much like any property that has to do with directions.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**其他内容**：我们可以假设像`**transform-origin**`这样的属性也将被更新，就像任何与方向有关的属性一样。'
- en: CSS Grid & CSS Flexbox
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS Grid & CSS Flexbox
- en: The great news for CSS Grid & CSS Flexbox is that these two features are already
    built with the new methodology of logical properties, and there is no need to
    update them.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于CSS Grid和CSS Flexbox来说，一个好消息是它们已经使用新的逻辑属性方法构建，无需更新它们。
- en: Understanding the Workflow with Logical Properties
  id: totrans-split-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解逻辑属性的工作流程
- en: At first, It looks very complicated, but it’s very easy to use. While writing
    the styles, there is no need to worry about cross-language support. You just need
    to use logical properties, instead of the old physical properties, and match them
    to your preferred language.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 起初看起来非常复杂，但实际上非常容易使用。在编写样式时，无需担心跨语言支持。只需使用逻辑属性，而不是旧的物理属性，并将它们匹配到你的首选语言即可。
- en: Applying Alignment According to Language
  id: totrans-split-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据语言应用对齐
- en: After we learned all the updates of the new logical properties, here are two
    properties that let us define the **block axis alignment** (flow of the website),
    and the **inline axis alignment** (the direction in which we read the text).
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们学习了新的逻辑属性的所有更新之后，这里有两个属性让我们定义**块轴对齐**（网站的流动方向），以及**行内轴对齐**（文本阅读的方向）。
- en: Writing-mode property (block axis)
  id: totrans-split-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Writing-mode 属性（块轴）
- en: Defines the flow of the website. In most cases, it will be top to bottom, but
    as mentioned, certain language can flow from right to left (Japanese), or even
    left to right (Mongolian). In both cases, we will have a horizontal scroll instead
    of the vertical scroll we are used to.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 定义网站的流动方向。在大多数情况下，它将是从上到下，但正如提到的，某些语言可以从右到左（日语），甚至从左到右（蒙古语）。在这两种情况下，我们将有水平滚动而不是我们习惯的垂直滚动。
- en: 'Note: For now there are 3 main values for `**writing-mode**` . Their names
    are a little bit confusing. That’s because in their name there is the block-axis
    direction, plus what will be the alignment of the text in that case (inline-axis).
    This is obviously very frustrating, as the text alignment is redundant, and it
    causes only confusion.'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：目前有3个主要的`**writing-mode**`值。它们的名称有点令人困惑。这是因为在它们的名称中有块轴方向，再加上在该情况下文本的对齐方式（行内轴）。这显然非常令人沮丧，因为文本对齐是多余的，只会引起混淆。
- en: To eliminate this confusion, it’s recommended to ignore the inline-axis part
    of the value, and only refer to the block-axis part of the value.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: '**values:**'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: '`writing-mode: horizontal-**tb**;` = **Top to Bottom flow**, like in English
    (default value)'
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`writing-mode: vertical-**rl**;` = **Right to Left Flow,** for Japanese.'
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`writing-mode: vertical-**lr**;` = **Left to Right Flow**, for Mongolian.'
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As for my personal opinion, I would have preferred that the values included
    only: **tb/rl/lr (block-axis part),** to eliminate this potential confusion.'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Example definition for **Japanese**:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Direction property (inline axis)
  id: totrans-split-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Defines whether the text should start from **left-to-right** or **right-to-left**,
    but only when the default horizontal `writing-mode` property is active. If we
    change the `writing-mode` to one of the vertical modes, the actual text direction,
    of left-to-right, will change to top-to-bottom. Or the opposite, with an`rtl`(right-to-left)
    value, it will change to bottom-to-top.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Example definition for **Arabic**:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It’s Amazing how easily a top-to-bottom website can be transformed into a right-to-left
    website with a horizontal scroll.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: Here is a demo I made, best viewed in Firefox (which currently supports more
    features).
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: '[**Live Example**](https://codepen.io/elad2412/pen/oQJmYQ/) **(try out the
    language selection!):**'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: Browsers Support
  id: totrans-split-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All The Box Model properties `margin`/`padding`/`border` and the new `width`/`height`(`inline-size`,
    `block-size`) properties work in all main browsers except for Edge.
  id: totrans-split-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text-align` new values work in all main browsers except for Edge.'
  id: totrans-split-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Floats`/`Positions`/`Resize` — values/properties work only in Firefox.'
  id: totrans-split-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Issues With the Logical Properties
  id: totrans-split-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With these new refactors, we are facing new issues. For example, what if we
    want to write all properties of margin in the shorthand way:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: '`margin: 10px 20px 8px 5px;` you can’t predict how it would be interpreted.'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: 'If the website is using physical properties, the values will be interpreted
    as:'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: '`**margin-top**`**/**`**margin-right**`**/**`**margin-bottom**`**/**`**margin-left**`**,**'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: 'but if the website is using the new logical properties, the values should be:'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: '`**margin-block-start**`**/**`**margin-inline-end**`**/**`**margin-block-end**`**/**`**margin-inline-start**`**.**'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: In English websites, the physical properties and the logical properties work
    in the same way. In other languages, when we use shorthand, like `margin`, the
    goal is for it to work according to the `**direction**` property or the new property
    `**writing-mode**`**.**
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: This is still an open issue. I’ve added a [*suggestion that can solve the issue
    at github csswg-drafts*](https://github.com/w3c/csswg-drafts/issues/1282#issuecomment-443253091)*.*
    If you think you have a better solution, you can comment there!
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: For now, if you want to use logic properties, you have to use the full property
    names without any shorthand.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: '**My Optional Solution:**'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Issue With Responsive Design
  id: totrans-split-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When trying to make a fully working demo, I tried to use the new “max-width”
    property `**max-inline-size**`in a media query**,** with the understanding that
    in left-to-right/right-to-left it will be behave like `**max-width**` and for
    languages like Japanese, it will behave like `**max-height**`. Unfortunately,
    the browsers are not interpreting this property currently in media queries.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试制作一个完全工作的演示时，我尝试在媒体查询中使用新的“max-width”属性`**max-inline-size**`，理解左到右/右到左时它会像`**max-width**`一样运行，而对于日语等语言，它会像`**max-height**`一样。不幸的是，目前浏览器没有解释这个属性。
- en: '[PRE3]'
  id: totrans-split-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Changes to be Considered
  id: totrans-split-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考虑的变化
- en: 'When I wrote this post, after learning and understanding the concept of logical
    properties in-depth, there were still some missing adaptions, that I thought should
    be incorporated in the future:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我写这篇文章时，在深入学习和理解逻辑属性的概念之后，仍然存在一些缺失的适应性，我认为应在将来加以考虑：
- en: '- `line-height` can be `“line-size”`'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: '- `line-height`可以是`“line-size”`'
- en: '- `border-width` can be `“border-size”`'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: '- `border-width`可以是`“border-size”`'
- en: And it does not seem to be the case, at least with the `border-width`. It just
    got updated with logical properties and it still has the word ‘width’ in its name.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来似乎不是这种情况，至少在`border-width`方面是这样。它刚刚更新了逻辑属性，并且它的名称仍然包含“width”这个词。
- en: 'Example: `border-block-start-width`.'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：`border-block-start-width`。
- en: But who knows, maybe the right people at w3c will read this post :-)
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 但谁知道，也许 W3C 的合适人士会看到这篇文章 :-)
- en: Final Words
  id: totrans-split-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的话
- en: That’s all,
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了，
- en: I hope you’ve enjoyed this article and learned from my experience.
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您喜欢这篇文章并从我的经验中学到了东西。
- en: If you like this post, I would appreciate applause and sharing :-)
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢这篇文章，我会很感激您的掌声和分享 :-)
- en: I create lots of content about CSS. Be sure to follow me via [**Twitter**](https://twitter.com/eladsc)**,**
    [**Linkedin**](https://www.linkedin.com/in/eladshechter/)**, and** [**Medium**](https://medium.com/@elad)**.**
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了大量关于CSS的内容。请务必通过 [**Twitter**](https://twitter.com/eladsc)**，** [**Linkedin**](https://www.linkedin.com/in/eladshechter/)**和**
    [**Medium**](https://medium.com/@elad)**跟随我**。
- en: 'You can also access all of my content on my website: [**eladsc.com**](https://eladsc.com/).'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在我的网站上访问所有内容：[**eladsc.com**](https://eladsc.com/)。
- en: '**More Recommended posts on typography:**'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多关于排版的推荐文章：**'
- en: '[CSS Writing Modes](https://24ways.org/2016/css-writing-modes/) — Very Recommended!'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[CSS书写模式](https://24ways.org/2016/css-writing-modes/) — 非常推荐！'
- en: '[Text Orientations](https://tympanus.net/codrops/css_reference/text-orientation/)'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[文本方向](https://tympanus.net/codrops/css_reference/text-orientation/)'
- en: '**More of my CSS posts:**'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**我更多的CSS文章：**'
- en: '[Why CSS HSL Colors are Better!](https://medium.com/@elad/why-css-hsl-colors-are-better-83b1e0b6eead)'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[为什么 CSS HSL 颜色更好！](https://medium.com/@elad/why-css-hsl-colors-are-better-83b1e0b6eead)'
- en: '[The New Responsive Design Evolution](https://medium.com/@elad/the-new-responsive-design-evolution-2bfb9b504a4e)'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[响应式设计的新演进](https://medium.com/@elad/the-new-responsive-design-evolution-2bfb9b504a4e)'
- en: '[CSS Position Sticky — How It Really Works!](https://medium.com/@elad/css-position-sticky-how-it-really-works-54cd01dc2d46)'
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[CSS粘性定位 — 真正的工作原理！](https://medium.com/@elad/css-position-sticky-how-it-really-works-54cd01dc2d46)'
- en: '**Who Am I?**'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**我是谁？**'
- en: '**I am Elad Shechter**, a Web Developer specializing in CSS & HTML design and
    architecture.'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**我是Elad Shechter**，一名专注于CSS和HTML设计与架构的Web开发者。'
- en: (Me talking at ConFrontJS 2019, Warsaw, Poland)
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: （我在2019年ConFrontJS会议上的发言，波兰华沙）
- en: My Talk on CSS Logical Properties — New!
  id: totrans-split-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我的CSS逻辑属性演讲 — 新内容！
- en: This is my full talk on CSS Logical Properties, fill free to share it [🙂](https://emojipedia.org/slightly-smiling-face/)
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我关于CSS逻辑属性的完整演讲，请随意分享它 [🙂](https://emojipedia.org/slightly-smiling-face/)
