- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:12:53'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: My list of challenging software projects some programmers should try | andreinc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.andreinc.net/2024/03/28/programming-projects-ideas](https://www.andreinc.net/2024/03/28/programming-projects-ideas)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Before we begin, I’d like to clarify that the project ideas I am about to suggest
    are mainly intended for those who are interested in exploring new areas of knowledge.
    However, it’s important to note that most of these ideas may not be relevant to
    today’s job market. If you’re looking to add something impressive to your portfolio
    for recruitment purposes, it might be worth considering other options. For example,
    instead of building yet another TODO app in React (75k repos on GitHub), you might
    want to focus on back-end or front-end development by cloning a well-known site.
    Such projects are likely to be more beneficial in terms of knowledge gained and
    job perspectives.
  prefs: []
  type: TYPE_NORMAL
- en: That said, some developers are more interested in exploring creative fields
    beyond the traditional job market. For these individuals, programming is more
    of a hobby than a means of earning a living. If you fall into this category, you
    may find the following project suggestions more appealing.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also check other articles on this topic:'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: My list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Lesser Known Data Structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For example, [Austin Z. Henley](https://austinhenley.com/) recommends writing
    your own [Topological Sort](https://en.wikipedia.org/wiki/Topological_sorting),
    [Recursive Descent Tree Parsing](https://en.wikipedia.org/wiki/Recursive_descent_parser),
    [Bloom Filter](https://en.wikipedia.org/wiki/Bloom_filter), [Piece Table](https://en.wikipedia.org/wiki/Piece_table),
    [Splay Tree](https://en.wikipedia.org/wiki/Splay_tree) implementations.
  prefs: []
  type: TYPE_NORMAL
- en: The truth is that many Computer Science curricula have been diluted. In fact,
    some schools only teach the basics, such as Dynamic Arrays, Linked Lists, Queues,
    Stacks, and Hash Tables. However, there are many other Data Structures and Algorithms
    that are worth exploring beyond these fundamental concepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Personally, I would also go for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[B-Tree](https://en.wikipedia.org/wiki/B-tree) - I would defintely implement
    this one. It’s an interesting data structure that is used in database systems
    or filesystems. It also opens you to new ways of thinking about improving your
    memory and data layout in your applications;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Circular Buffer](https://en.wikipedia.org/wiki/Circular_buffer) - This is
    a data structure that solves the Consumer-Producer problem elegantly, especially
    when the Consumer cannot (momentarily) keep up with the Producer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Cuckoo Filter](https://en.wikipedia.org/wiki/Cuckoo_filter) and [Cuckoo Hash
    Table](https://en.wikipedia.org/wiki/Cuckoo_hashing) - The practicality of the
    *Cuckoo* approach is yet to be proven, but this is definitely something that’s
    worth your time for fun purposes. Simply put, the idea behind those data structures
    is fun and creative.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Open-Addressing Hash Tables](https://en.wikipedia.org/wiki/Open_addressing)
    - Most schools and courses focus on the Separate Chaining technique and blatantly
    ignore the elegant ways of *open addressing*. So why don’t you want write a few
    open-addressing implementations and benchmark them against existing library implementations?
    Try to make your implementation faster, brag, and learn.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a distributed Hash Table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you already know how to write your own *Hash Table*, building a [*Distributed
    Hash Table*](https://en.wikipedia.org/wiki/Distributed_hash_table) won’t be an
    impossible task. Although it might seem like a complicated project, it doesn’t
    necessarily have to be *production-ready* or become the next Redis.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the project, you will likely become more comfortable with network
    programming and managing concurrency issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bonus: Thoroughly testing your DHT will be a journey in itself.'
  prefs: []
  type: TYPE_NORMAL
- en: ^(Don’t get demotivated if you get stuck or the result is terrible!)
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Write a *scientific* calculator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a relatively easy project, but it’s worth witnessing the power of the
    *Stack* data structure. You can do this by learning how to evaluate [RPN expressions](https://en.wikipedia.org/wiki/Reverse_Polish_notation)
    and implementing the [Shunting Yard algorithm](https://en.wikipedia.org/wiki/Shunting_yard_algorithm).
    As you work on this project, challenge yourself to learn a new GUI library, one
    that you haven’t touched before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have a working calculator, start exploring crazy ideas:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement your own [sine function](https://androidcalculator.com/how-do-calculators-compute-sine/)
    just for the thrills.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement your own big numbers library to operate on huge numbers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can your calculator handle raising `3` to the power of `2.27`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a module that enables users to operate on matrices, including adding,
    multiplying, calculating the inverse, computing the determinant, and solving systems
    of linear equations, among other things.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can your calculator check if a number is prime?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you write a module that gives the user random insights about numbers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It can also work in the [browser](http://numcalc.com/).
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Write your own HTTP Server in C + POSIX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ^(*First, start learning C if you haven’t already. Contrary to popular belief,
    learning C early in your career will make you a better programmer in the long-run.
    I am more convinced of this now than I ever was before. However, this is not the
    time or the article to support my claim.*)
  prefs: []
  type: TYPE_NORMAL
- en: 'When implementing the HTTP protocol, keep in mind that you don’t have to cover
    everything. The purpose of this exercise is not to write the fastest HTTP server
    out there. Instead, you do it to:'
  prefs: []
  type: TYPE_NORMAL
- en: Accumulate frustrations that come with dealing with `char*` frequently. Of course,
    you can create an abstraction over `char*` to solve this problem, and while it
    may be buggy, it will be uniquely yours!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about `fork()`, `pthreads`, and all the other low-level knowledge you
    don’t usually have to deal with, except in your Operating Systems course.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gain an understanding of how TCP and Networking Programming work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If mentioning C has offended you, you can always rewrite the project in Rust.
    That would be *new*.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Write an esoteric programming language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ^(*An esoteric programming language (sometimes shortened to esolang) is a programming
    language designed to test the boundaries of computer programming language design,
    as a proof of concept, as software art, as a hacking interface to another language
    (particularly functional programming or procedural programming languages), or
    as a joke. ([source](https://en.wikipedia.org/wiki/Esoteric_programming_language))*)
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a side project that lets you unleash your creativity. Here are some
    tips to help you get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Your language can have a simple grammar, so you don’t need to use [a parser
    generator](https://en.wikipedia.org/wiki/Comparison_of_parser_generators). Write
    the parser yourself. An [APL](https://en.wikipedia.org/wiki/APL_(programming_language))-like
    language with a limited set of *special graphic symbols* is not impossible to
    implement or parse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have you heard of [UIUA](https://www.uiua.org/) ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Altough it may seem like a long shot, take a look at [Tsevhu](https://www.reddit.com/r/tsevhu/comments/iserji/tsevhu_key_activity/)
    and [Koilang](https://gammagames.itch.io/koilang). Tsevhu is not a programming
    language but a language in itself. Can you create similar with code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Speaking of Koilang, have you checked out [piet](https://www.dangermouse.net/esoteric/piet.html)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It can also be a better joke than the [Albanian Laundry Machine](https://esolangs.org/wiki/Albanian_Laundry_Machine).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more inspiration, check the esolangs [wiki](https://esolangs.org/wiki/Language_list).
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Write your own Virtual Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I’ve personally tackled this challenge (check this [article](/2021/12/01/writing-a-simple-vm-in-less-than-125-lines-of-c)).
    However, I regret not designing an original set of instructions and instead implementing
    the [LC-3](https://en.wikipedia.org/wiki/Little_Computer_3) instruction set.
  prefs: []
  type: TYPE_NORMAL
- en: Your project can be register-based, stack-based, or a hybrid. It can even have
    a JIT compiler if you are feeling brave.
  prefs: []
  type: TYPE_NORMAL
- en: Whatever you choose to do, the key is to be creative.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, please look at [uxn](https://100r.co/site/uxn.html), which can
    run on multiple operating Systems or devices, and has a small community of dans
    writing [software for it](https://github.com/hundredrabbits/awesome-uxn#applications).
    Even [tsoding](https://www.twitch.tv/tsoding), one of my favourite Tech Youtubers,
    recently [implemented Conway’s Game Of Life as an uxn program](https://www.youtube.com/watch?v=rTb6NFKUmQU).
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Write a game for UXN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firstly, understand how [uxn](https://100r.co/site/uxn.html) works by reading
    the official documentation or by following [this excellent tutorial](https://compudanzas.net/uxn_tutorial.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at existing examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Come up with an original game idea.
  prefs: []
  type: TYPE_NORMAL
- en: Everyone seems to prefer Snake, Tetris, Pong, and Space Invaders. But there
    are other (now forgotten) games that deserve your attention.
  prefs: []
  type: TYPE_NORMAL
- en: 'Why don’t you try implementing something different:'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Write a game for TIC-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[TIC-80](https://tic80.com/) is a fantasy computer for making, playing, and
    sharing tiny games.'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t know what game to write, take inspiration from [here](https://tic80.com/play).
  prefs: []
  type: TYPE_NORMAL
- en: This is more of an artistic project than a programming one, but still.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Write your original markdown language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write a markdown language that is not precisely markdown but something alien.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extend an existing markdown implementation. You can get inspiration from [LiaScript](https://liascript.github.io/)
    or [R Markdown](https://rmarkdown.rstudio.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Write a static site-generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yes, it’s boring, but something needs to use the newly invented markdown language.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Mandelbrot Set Navigator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You don’t have to be [Arthur C. Clarke](https://www.youtube.com/watch?v=5qXSeNKXNPQ)
    or a mathematican to appreciate the useless beauty of the [Mandelbrot Set](https://en.wikipedia.org/wiki/Mandelbrot_set).
  prefs: []
  type: TYPE_NORMAL
- en: 'Have you ever considered building your own Mandelbrot Set Explorer using HTML
    Canvas? There are plenty of examples on the internet:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a creative touch! For example:'
  prefs: []
  type: TYPE_NORMAL
- en: To make your Mandelbrot Set Navigator unique, you can incorporate an intelligent
    coordinate system to help you navigate through infinity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, you can add a bookmark feature so you can save and revisit interesting
    patterns that you discover during your exploration. For instance, if you stumble
    upon the [Elephant Valley](https://math.stackexchange.com/questions/2979906/are-there-any-unique-places-in-the-mandelbrot-set-that-have-not-yet-been-seen-gr),
    you can bookmark the location for future reference and easily share it with others.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Simulate various phenomena from physics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start with optics; it might be easier, and there are tons of examples on the
    internet:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you understand what you are doing, jump to other areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Start small and slowly become [Bartosz Ciechanowski](https://ciechanow.ski/).
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with Conway’s Game Of Life
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I suppose you are already familiar with [Conway’s Game Of Life](https://en.wikipedia.org/wiki/Conway's_Game_of_Life).
  prefs: []
  type: TYPE_NORMAL
- en: 'Make something creative out of it:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the rules, add more states, add colors, emoticons and animations;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put the cells in a labyrinth, add portals, let the cells teleport;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a slot machine that’s powered this cellular automaton;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interfere with the cells in real-time, see how they react, throw them some meat;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s so much you can do.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Approximate reality with polynomials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’ve studied computer graphics, you might’ve encountered the concept of
    [Bezier Curves](https://en.wikipedia.org/wiki/B%C3%A9zier_curve). Why don’t you
    start approximating *reality* with them?
  prefs: []
  type: TYPE_NORMAL
- en: 'Some fans of [Pierre Bezier](https://en.wikipedia.org/wiki/Pierre_B%C3%A9zier)
    and [Jamiroquai](https://en.wikipedia.org/wiki/Jamiroquai) have already played
    this game:'
  prefs: []
  type: TYPE_NORMAL
- en: Maybe now it’s your time to write a different renderer.
  prefs: []
  type: TYPE_NORMAL
- en: Why don’t you pick sines and cosines instead of polynomials? I hope you see
    where [I am going](https://www.youtube.com/watch?v=-qgreAUpPwM).
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: A calculator for symbolic differentiation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ^(To understand what I am referring to, check this question on [StackOverflow](https://stackoverflow.com/questions/43455320/difference-between-symbolic-differentiation-and-automatic-differentiation).)
  prefs: []
  type: TYPE_NORMAL
- en: This is going to be a challenging project, but not as hard as you would imagine.
    Basically, you need to come up with something WolframAlpha is [already capable
    of](https://www.wolframalpha.com/input?i=derivative++x%5E2*cos%28x-7%29%2F%28sin%28x%29%29).
  prefs: []
  type: TYPE_NORMAL
- en: You will have to be able to parse mathematical expressions. Then, you will have
    to (recursively) apply specific rules for differentiation (e.g. the [chain](https://en.wikipedia.org/wiki/Chain_rule)
    and [product](https://en.wikipedia.org/wiki/Product_rule)). In the end, you will
    have to *simplify* the resulting expression.
  prefs: []
  type: TYPE_NORMAL
- en: You don’t have to implement everything.
  prefs: []
  type: TYPE_NORMAL
- en: You will have to remember the fundamentals of calculus.
  prefs: []
  type: TYPE_NORMAL
- en: It’s going to be fun.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: A slot machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: … In the name of science.
  prefs: []
  type: TYPE_NORMAL
- en: 'I wouldn’t put to much effort into the graphics. It’s not like you want to
    contribute to people’s misfortune and addiction. But the [mathematics behind a
    slot machine](https://www.youtube.com/watch?v=BFlRH99TQOw) can be interesting,
    plus you can be *creative*:'
  prefs: []
  type: TYPE_NORMAL
- en: Why don’t you write a \(\pi\) slot machine that uses the decimals of \(\pi\)
    to give prizes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why don’t you use a Game Of Life Slot Machine, where you stop on specific cell
    configurations and give prizes;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why don’t you build a Sinusoidal Slot Machine (you can get inspiration from
    a previous project of mine called [The Sinusoidal Tetris](/2024/02/06/the-sinusoidal-tetris)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a game engine for text-based games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ^(This idea was suggested by @snej on the [lobste.rs](https://lobste.rs/s/5fsjpu/my_list_challenging_software_projects))
  prefs: []
  type: TYPE_NORMAL
- en: Few of our generation have played *text-based* games, and it’s fine - we need
    to put our hardware to better use than rendering fonts in a terminal.
  prefs: []
  type: TYPE_NORMAL
- en: But there was a time when games like [Zork](https://playclassic.games/games/adventure-dos-games-online/the-hitchhikers-guide-to-the-galaxy/play/)
    or [Colossal Cave](https://rickadams.org/adventure/advent/) were extremely popular.
  prefs: []
  type: TYPE_NORMAL
- en: So why don’t you build a game engine for text-based adventures?
  prefs: []
  type: TYPE_NORMAL
- en: Make the engine *cross-platform* - allow the game to work in the terminal, browser,
    or an [SDL](https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer) window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Or leave it terminal only. There are beautiful TUI libraries nowadays, so you
    don’t have to stay cursed because you are stuck with [ncurses](https://en.wikipedia.org/wiki/Ncurses):'
  prefs: []
  type: TYPE_NORMAL
- en: Write a Tiling Window Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that [Wayland](https://en.wikipedia.org/wiki/Wayland_(protocol)) is almost
    here, I am sure there’s a lot of *new* room for creativity. Look at [sway](https://swaywm.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Ok, writing a [Tiling Window Manager](https://en.wikipedia.org/wiki/Tiling_window_manager)
    is not the most approachable project you can think of. But at the same time, you
    can keep things simple. For example, XMonad, when launched, had roughly 1000 lines
    of code.
  prefs: []
  type: TYPE_NORMAL
