["```\n# LiveView component\ndefmodule Web.SyncLive.Form do\n  def render(assigns) do\n    assigns = \n      assigns\n      |> Map.put(:encoded_collections, Enum.map(assigns.collections, &encode_collection/1))\n      |> Map.put(:encoded_errors, encode_errors(assigns.changeset))\n\n    ~H\"\"\"\n      <.svelte\n        name=\"MyForm\"\n        props={\n          %{\n            collections: @encoded_collections,\n            credential_options: @credential_options,\n            errors: @encoded_errors,\n          }\n        }\n        socket={@socket}\n      />\n    \"\"\"\n  end\nend \n```", "```\n defp encode_collection(%Collection{} = collection) do\n    %{\n      \"id\" => collection.id,\n      \"slug\" => collection.slug,\n      \"name\" => collection.name\n    }\n  end \n```", "```\n// Svelte component\n<script>\n  export let resource;\n  export let credential_options = [];\n  export let errors = {};\n  export let live;\n</script> \n```", "```\n<script>\n  // ...\n  $: {\n    live.pushEvent(\"form_updated\", { form }, () => {});\n  }\n</script> \n```", "```\n# In the LiveView\n# ...\n  @impl LiveView\n  def handle_event(\"form_updated\", %{\"form\" => form}, socket) do\n    params = decode_params(socket, form)\n    {:noreply, merge_changeset(socket, params)}\n  end\n\n  defp merge_changeset(socket, params) do\n    changeset = Collection.create_changeset(socket.assigns.resource, params)\n\n    assign(socket, :changeset, changeset)\n  end \n```"]