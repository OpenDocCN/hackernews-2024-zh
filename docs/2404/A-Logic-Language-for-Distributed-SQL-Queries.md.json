["```\nallow(user: User, \"read\", org: Organization) if   has_role(user, \"member\", org); \t\nhas_role(User{\"alice\"}, \"member\", Organization{\"acme\"});\n```", "```\n1 = 1  # two concrete values, behaves like comparison true  1 = 2  # false  \nx = 1  # behaves like assignment, the variable `x` now has value 1  \nx = 1  # `x` is now 1  y = x # true, the variable `y` is equal to 1  \ny = x # true, the variable `y` is equal to variable `x`  x = 1  # true, `x` is now 1, `y` is also 1\n```", "```\n> tee -a intro.polar <<EOF allow(user: User, \"read\", org: Organization) if  has_role(user, \"member\", org);   has_role(User{\"alice\"}, \"member\", Organization{\"acme\"}); EOF  \n> oso-cloud policy intro.polar\nPolicy successfully loaded.\n\n> oso-cloud query allow User:alice read Organization:_ allow(User:alice, String:read, Organization:acme)\n```", "```\n> tee intro.polar <<EOF allow(user: User, \"read\", org: Organization) if  has_role(user, \"member\", org);   has_role(User{\"alice\"}, \"member\", Organization{\"acme\"}); has_role(User{\"bob\"}, \"member\", Organization{\"megacorp\"}); EOF  \n> oso-cloud policy intro.polar && oso-cloud query allow User:_ _ Organization:_\nPolicy successfully loaded.\nallow(User:alice, String:read, Organization:acme) allow(User:bob, String:read, Organization:megacorp)\n```", "```\nallow(user: User, \"read\", org: Organization) if   has_role(user, \"member\", org); \nallow(user: User, \"create_repository\", org: Organization) if   has_role(user, \"member\", org);\n```", "```\nallow(user: User, \"read\", org: Organization) if   has_role(user, \"admin\", org); \nallow(user: User, \"create_repository\", org: Organization) if   has_role(user, \"admin\", org); \nallow(user: User, \"invite_users\", org: Organization) if   has_role(user, \"admin\", org);\n```", "```\n- allow(user: User, \"read\", org: Organization) if  -\t    has_role(user, \"admin\", org);  -  - allow(user: User, \"create_repository\", org: Organization) if  -\t    has_role(user, \"admin\", org);  \n+ has_role(user: User, \"member\", org: Organization) if  +    has_role(user, \"admin\", org);  \nallow(user: User, \"invite_users\", org: Organization) if\n\thas_role(user, \"admin\", org); \n```", "```\nactor User { } \nresource Organization {\n roles = [\"admin\", \"member\"];\n permissions = [\"read\", \"create_repository\", \"invite_users\"];\n\n  \"read\"  if  \"member\";\n  \"create_repository\"  if  \"member\";\n\n  \"member\"  if  \"admin\";\n  \"invite_users\"  if  \"admin\"; }\n```", "```\n#                          \"read\"                              if  #                            \\/  has_permission(user: User, \"read\", organization: Organization) if  #                \"member\"               ;  #                   \\/   has_role(user, \"member\", organization);\n```", "```\nactor User {} \nresource Organization {\n roles = [\"member\", \"admin\"]; }\n\nresource Repository {\n roles = [\"reader\", \"triage\", \"admin\"];\n permissions = [\"close_issues\"];\n    relations = {\n  parent: Organization,    };\n\n  \"admin\"  if  \"admin\" on \"parent\";\n  \"close_issues\"  if  \"triage\";\n  \"triage\"  if  \"admin\"; }\n\nhas_role(user: User, role: String, repository: Repository) if  org matches Organization and  has_relation(repository, \"parent\", org) and  has_role(user, \"member\", org) and     default_repository_role(org, role);\n\nresource Issue {\n permissions = [\"read\", \"close\"];\n    relations = {\n  parent: Repository,  creator: User,    };\n  \"close\"  if  \"creator\"  and  \"read\" on \"parent\";\n  \"close\"  if  \"close_issues\" on \"parent\";\n }\n\n has_permission(user: User, \"close_issues\", repository: Repository) if  org matches Organization and  has_relation(repository, \"parent\", org) and  role matches CustomRole and  has_relation(role, \"parent\", org) and  has_role(user, role, repository) and  grants_permission(role, \"Repository\", \"close_issues\");\n\ngrants_permission(role: Role, resource_type: String, permission: String) if  inherited_role matches String and  inherits_role(role, inherited_role) and     grants_permission(inherited_role, resource_type, permission);\n```", "```\n resource Issue {    permissions = [\"read\", \"close\"];\n    relations = {\n \t    parent: Repository,\n \t    creator: User,\n \t  };\n-   \"close\" if \"creator\" and \"read\" on \"parent\";  -   \"close\" if \"close_issues\" on \"parent\";  +   \"close\" if \"creator\" and \"read\" on \"parent\" and is_locked(resource, false);  +   \"close\" if \"close_issues\" on \"parent\" and is_locked(resource, false);  +   \"close\" if \"close_locked_issues\" on \"parent\";  }\n```", "```\nhas_role(User{\"alice\"}, \"member\", Organization{\"acme\"});\n```", "```\nhas_role(User{\"alice\"}, \"member\", Organization{\"acme\"});\n```", "```\n1 -> has_role, [User, String, Organization]\n```", "```\narg0 | arg1   | arg2 ---------------------\nalice | member | acme\n```", "```\nhas_role(user, \"member\", organization)\n```", "```\nOutputs:   issue:  f0.arg0  \nFacts:   f0:  has_relation(Issue,  String,  Repository)   f1:  has_role(User,  String,  Repository)  \nConditions:   f0.arg2  =  f1.arg2   f0.arg1  =  \"parent\"   f1.arg1  =  \"triage\"   f1.arg0  =  User{\"alice\"}\n```", "```\nSELECT f0.arg0 FROM  fact_0 f0,\n fact_1 f1\nWHERE  f0.arg2 = f1.arg2 and  f0.arg1 =  'parent'  and  f1.arg1 =  'triage'  and  f1.arg0 =  'alice';\n```", "```\nCREATE  UNIQUE INDEX fact_0_idx_0 on fact_0 ( arg0, arg2, arg1 ); CREATE  UNIQUE INDEX fact_0_idx_1 on fact_0 ( arg2, arg0, arg1 ); \nCREATE  UNIQUE INDEX fact_1_idx_0 on fact_1 ( arg0, arg2, arg1 ); CREATE  UNIQUE INDEX fact_1_idx_1 on fact_1 ( arg2, arg0, arg1 );\n```", "```\nQUERY PLAN |--SEARCH f0 USING COVERING INDEX fact_0_idx_0 (arg0=?)\n`--SEARCH f1 USING COVERING INDEX fact_1_idx_1 (arg2=?)\n```", "```\nQUERY PLAN |--SEARCH f1 USING COVERING INDEX fact_1_idx_0 (arg0=?)\n`--SEARCH f0 USING COVERING INDEX fact_0_idx_0 (arg0=?)\n```", "```\n// issuesService/controller/closeIssue.ts  \nasync  function  closeIssue(currentUser: User, issueData: IssueData) {\n  // Note: we should still check for read permission on the repo   // even if the user is the creator -- you cannot   // close issues for repositories you don't have access to   if (!canRead) {  throw  new PermissionDeniedError();  }\n\n  if (!canClose) {  // Implement issue-level authorization logic directly in the issue service.   //   // unless you have the repository-level canClose permission,   // you need to be the issue creator   const issueCreator = await db .selectFrom(\"issue\")\n .select(\"creator_id\")\n .where(\"id\", \"=\", issueData.id)\n      .execute();\n  if (issueCreator[0] !== currentUser.id) {\n  throw  new PermissionDeniedError();    }\n  }\n\n  // close the issue  } \n```", "```\nWITH fact_0(arg0, arg1, arg2) as (  SELECT id, 'parent', repository_id FROM    issues\n), fact_1(arg0, arg1, arg2) as )  SELECT user_id, \"role\", repository_id FROM    repository_roles\n)\nSELECT f0.arg0 FROM  fact_0 f0,\n fact_1 f1\nWHERE  f0.arg2 = f1.arg2 and  f0.arg1 =  'parent'  and  f1.arg1 =  'triage'  and  f1.arg0 =  'alice';\n```", "```\nfacts:   has_relation(Issue:_,  String:_,  Repository:_):   query:  |-\n SELECT id, 'parent', repository_id FROM  issues   has_role(User:_,  String:_,  Repository:_):   query:  |-\n SELECT user_id, \"role\", repository_id FROM  repository_roles\n```", "```\nOutputs:   issue:  f0.arg0  \nFacts:   f0:  has_relation(Issue,  String,  Repository)   f1:  has_role(User,  String,  Repository)  \nConditions:   f0.arg2  =  f1.arg2   f0.arg1  =  \"parent\"   f1.arg1  =  \"triage\"   f1.arg0  =  User{\"alice\"} \n```", "```\n### Oso part:  \nOutputs:   var0:  f1.arg2  \nFacts:   f1:  has_role(User,  String,  Repository)  \nConditions:   f1.arg1  =  \"triage\"   f1.arg0  =  User{\"alice\"}  \n### Local part  \nOutputs:   issue:  f0.arg0  \nFacts:   f0:  has_relation(Issue,  String,  Repository)  \nConditions:   f0.arg2  =  inputs.var0   f0.arg1  =  \"parent\"\n```", "```\nOutputs:   issue:  f0.arg0  \nFacts:   f0:  has_relation(Issue,  String,  Repository)  \nConditions:   f0.arg2  =  inputs.var0   f0.arg1  =  \"parent\"\n```", "```\nhas_relation(Issue:_,  String:_,  Repository:_):   query:  |   select  id,  repository_id  from  issues\n```", "```\ninputs:  ('anvil',  ...)\n```", "```\nWITH fact_0(arg0, arg1, arg2) as (  SELECT id, 'parent', repository_id FROM    issues\n)\nSELECT f0.arg0 FROM  fact_0 f0\nWHERE  f0.arg2 in ('anvil', ...);\n```", "```\n // get \"Local Part\" from Oso Cloud   const authorizeSql = await oso.authorizeLocal(user, \"close\", issue);\n  const { allowed } = (   // evaluate \"Local Part\" against application database   await sql.raw<{ allowed: boolean }>(authorizeSql).execute(db) ).rows[0];\n```", "```\nasync  function  closeIssue(issueData: IssueData) {\n  // get \"Local Part\" from Oso Cloud   const authorizeSql = await oso.authorizeLocal(user, \"close\", issue);\n  const { allowed } = (   // evaluate \"Local Part\" against application database   await sql.raw<{ allowed: boolean }>(authorizeSql).execute(db) ).rows[0]; \n  if (!allowed) {  throw  new PermissionDeniedError();  }\n\n  // close the issue  } \n```", "```\n// get \"Local Part\" from Oso Cloud  const listSql = await  await oso.listLocal(user, \"close\", \"Issue\", \"id\") \n// evaluate \"Local Part\" against application database  const results = await db .selectFrom(\"issues\")\n .where(sql.raw<boolean>(listSql))\n  .selectAll()\n  .execute();\n```", "```\n// get \"Local Part\" from Oso Cloud  const listSql = await  await oso.listLocal(user, \"close\", \"Issue\", \"id\") \n// evaluate \"Local Part\" against application database  const results = await db .selectFrom(\"issues\")\n .where(sql.raw<boolean>(listSql))  .orderBy(\"created_at\")\n .offset(50)\n .limit(25)\n  .selectAll()\n  .execute(); \n```"]