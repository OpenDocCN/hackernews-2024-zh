["```\nconst id = x => x;\nconst a = id(2); // number | string\nconst b = id(\"string\"); // number | string \n```", "```\n// The type of the function is: (string) => { name: string, ... } throws SyntaxError | TypeError\nfunction deserializeUser(stringifiedUserJson) {\n  /* the result type is unknown because there is no `any` type */\n  const maybeUser  = JSON.parse(stringifiedUserJson); /* it throws a SyntaxError, so it was added to the type signature */\n  if (\n    typeof maybeUser === \"object\" && maybeUser !== null       // a proof that `maybeUser` is an object\n    \"name\" in maybeUser && typeof maybeUser.name === \"string\" // a proof that there is a property called `name` with `string` type\n  ) {\n    return maybeUser; // the result type is { name: string, ... }\n  }\n  throw new TypeError(\"Provided serialized user is invalid!\");\n}\n\ntry {\n  /* the type of `foo` is { name: string, ... } */\n  const foo = deserializeUser(\"42\");\n} catch (e) {\n  // the type of `e` is SyntaxError | TypeError | unknown\n} \n```"]