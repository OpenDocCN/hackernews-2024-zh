- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:08:40'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Notes on git's error messages
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://jvns.ca/blog/2024/04/10/notes-on-git-error-messages/](https://jvns.ca/blog/2024/04/10/notes-on-git-error-messages/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'While writing about Git, I’ve noticed that a lot of folks struggle with Git’s
    error messages. I’ve had many years to get used to these error messages so it
    took me a really long time to understand *why* folks were confused, but having
    thought about it much more, I’ve realized that:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: sometimes I actually *am* confused by the error messages, I’m just used to being
    confused
  id: totrans-split-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I have a bunch of strategies for getting more information when the error message
    git gives me isn’t very informative
  id: totrans-split-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So in this post, I’m going to go through a bunch of Git’s error messages, list
    a few things that I think are confusing about them for each one, and talk about
    what I do when I’m confused by the message.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: improving error messages isn’t easy
  id: totrans-split-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we start, I want to say that trying to think about why these error messages
    are confusing has given me a lot of respect for how difficult maintaining Git
    is. I’ve been thinking about Git for months, and for some of these messages I
    really have no idea how to improve them.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: 'Some things that seem hard to me about improving error messages:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: if you come up with an idea for a new message, it’s hard to tell if it’s actually
    better!
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: work like improving error messages often [isn’t funded](https://lwn.net/Articles/959768/)
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the error messages have to be translated (git’s error messages are translated
    into [19 languages](https://github.com/git/git/tree/master/po)!)
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That said, if you find these messages confusing, hopefully some of these notes
    will help clarify them a bit.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Some things I find confusing about this:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: 'You get the exact same error message whether the branch is just **behind**
    or the branch has **diverged**. There’s no way to tell which it is from this message:
    you need to run `git status` or `git pull` to find out.'
  id: totrans-split-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It says `failed to push some refs`, but it’s not totally clear *which* references
    it failed to push. I believe everything that failed to push is listed with `!
    [rejected]` on the previous line– in this case just the `main` branch.
  id: totrans-split-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**What I like to do if I’m confused:**'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: I’ll run `git status` to figure out what the state of my current branch is.
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I think I almost never try to push more than one branch at a time, so I usually
    totally ignore git’s notes about which specific branch failed to push – I just
    assume that it’s my current branch
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The main thing I think is confusing here is that git is presenting you with
    a kind of overwhelming number of options: it’s saying that you can either:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: configure `pull.rebase false`, `pull.rebase true`, or `pull.ff only` locally
  id: totrans-split-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: or configure them globally
  id: totrans-split-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: or run `git pull --rebase` or `git pull --no-rebase`
  id: totrans-split-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It’s very hard to imagine how a beginner to git could easily use this hint to
    sort through all these options on their own.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: If I were explaining this to a friend, I’d say something like “you can use `git
    pull --rebase` or `git pull --no-rebase` to resolve this with a rebase or merge
    *right now*, and if you want to set a permanent preference, you can do that with
    `git config pull.rebase false` or `git config pull.rebase true`.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我向朋友解释这个问题，我会说“你可以使用 `git pull --rebase` 或 `git pull --no-rebase` 立即使用重排或合并来解决这个问题，如果你想设置一个永久的偏好，你可以使用
    `git config pull.rebase false` 或 `git config pull.rebase true`。
- en: '`git config pull.ff only` feels a little redundant to me because that’s git’s
    default behaviour anyway (though it wasn’t always).'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`git config pull.ff only` 对我来说有点多余，因为那本来就是 git 的默认行为（尽管并非总是如此）。'
- en: '**What I like to do here:**'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**我在这里喜欢做的事情：**'
- en: run `git status` to see the state of my current branch
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 `git status` 查看当前分支的状态
- en: maybe run `git log origin/main` or `git log` to see what the diverged commits
    are
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能要运行 `git log origin/main` 或 `git log` 查看分歧的提交是什么
- en: usually run `git pull --rebase` to resolve it
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常运行 `git pull --rebase` 来解决它
- en: sometimes I’ll run `git push --force` or `git reset --hard origin/main` if I
    want to throw away my local work or remote work (for example because I accidentally
    commited to the wrong branch, or because I ran `git commit --amend` on a personal
    branch that only I’m using and want to force push)
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时我会运行 `git push --force` 或 `git reset --hard origin/main` 如果我想放弃我的本地工作或远程工作（例如因为我不小心提交到了错误的分支，或者因为我在只有我在用的个人分支上运行了
    `git commit --amend` 并且想要强制推送）
- en: '[PRE2]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is a little weird because we my intention was to check out a **branch**,
    but `git checkout` is complaining about a **path** that doesn’t exist.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点奇怪，因为我本意是要检出一个 **分支**，但 `git checkout` 却在抱怨一个不存在的 **路径**。
- en: 'This is happening because `git checkout`’s first argument can be either a branch
    or a path, and git has no way of knowing which one you intended. This seems tricky
    to improve, but I might expect something like “No such branch, commit, or path:
    asdf”.'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 发生这种情况是因为 `git checkout` 的第一个参数可以是分支也可以是路径，而 git 无法知道你打算使用哪一个。这似乎很难改进，但我可能会期望看到类似
    “没有这样的分支、提交或路径：asdf” 的提示。
- en: '**What I like to do here:**'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**我在这里喜欢做的事情：**'
- en: in theory it would be good to use `git switch` instead, but I keep using `git
    checkout` anyway
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理论上使用 `git switch` 会更好，但我仍然会继续使用 `git checkout`
- en: generally I just remember that I need to decode this as “branch `asdf` doesn’t
    exist”
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常我只记得我需要将其解码为 “分支 `asdf` 不存在”
- en: '[PRE3]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`git switch` only accepts a branch as an argument (unless you pass `-d`), so
    why is it saying `invalid reference: asdf` instead of `invalid branch: asdf`?'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`git switch` 只接受一个分支作为参数（除非你传递 `-d`），那么为什么它会说 `invalid reference: asdf` 而不是
    `invalid branch: asdf`？'
- en: 'I think the reason is that internally, `git switch` is trying to be helpful
    in its error messages: if you run `git switch v0.1` to switch to a tag, it’ll
    say:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得原因是内部 `git switch` 尝试在其错误消息中提供帮助：如果你运行 `git switch v0.1` 切换到一个标签，它会说：
- en: '[PRE4]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'So what git is trying to communicate with `fatal: invalid reference: asdf`
    is “`asdf` isn’t a branch, but it’s not a tag either, or any other reference”.
    From my various [git polls](https://jvns.ca/blog/2024/03/28/git-poll-results/)
    my impression is that a lot of git users have literally no idea what a “reference”
    is in git, so I’m not sure if that’s coming across.'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '因此 git 尝试用 `fatal: invalid reference: asdf` 传达的是 “`asdf` 不是一个分支，但也不是标签，或者任何其他引用”。从我的各种
    [git 调查](https://jvns.ca/blog/2024/03/28/git-poll-results/) 来看，我觉得很多 git 用户实际上不知道
    git 中的 “引用” 是什么，所以我不确定它是否传达了这个意思。'
- en: '**What I like to do here:**'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**我在这里喜欢做的事情：**'
- en: 90% of the time when a git error message says `reference` I just mentally replace
    it with `branch` in my head.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个 git 错误消息说 `reference` 时，我只会在脑海中将其替换为 `branch` 的百分之九十时间。
- en: '[PRE5]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is a tough one. Definitely a lot of people are confused about this message,
    but obviously there's been a lot of effort to improve it too. I don't have anything
    smart to say about this one.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是个棘手的问题。显然很多人对这条消息感到困惑，但显然也已经有很多努力去改进它。我对这个问题没有什么聪明的话要说。
- en: '**What I like to do here:**'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**我在这里喜欢做的事情：**'
- en: my shell prompt tells me if I’m in detached HEAD state, and generally I can
    remember not to make new commits while in that state
  id: totrans-split-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的 shell 提示我是否处于分离 HEAD 状态，通常我会记得在这种状态下不要进行新的提交
- en: when I’m done looking at whatever old commits I wanted to look at, I’ll run
    `git checkout main` or something to go back to a branch
  id: totrans-split-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我查看完我想看的旧提交后，我会运行 `git checkout main` 或其他来回到一个分支
- en: 'This isn’t an error message, but I still find it a little confusing on its
    own:'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个错误消息，但单独看还是有点令人困惑：
- en: '[PRE6]'
  id: totrans-split-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Two things I think could be clearer here:'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有两件事我认为这里可以更清晰：
- en: I think it would be nice if `You are currently rebasing branch 'main' on 'c694cf8'.`
    were on the first line instead of the 5th line – right now the first line doesn’t
    say which branch you’re rebasing.
  id: totrans-split-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我认为如果“正在将分支'main'重新基于'c694cf8'”在第一行而不是第五行，那会更好——当前第一行没有说明正在重新基的是哪个分支。
- en: In this case, `c694cf8` is actually `origin/main`, so I feel like `You are currently
    rebasing branch 'main' on 'origin/main'` might be even clearer.
  id: totrans-split-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，`c694cf8`实际上是`origin/main`，所以我觉得“正在将分支'main'重新基于'origin/main'”可能会更清晰。
- en: '**What I like to do here:**'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**我在这里喜欢做的事情：**'
- en: My shell prompt includes the branch that I’m currently rebasing, so I rely on
    that instead of the output of `git status`.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我的Shell提示包含我当前正在重新基的分支，所以我依赖它而不是`git status`的输出。
- en: '[PRE7]'
  id: totrans-split-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The thing I still find confusing about this is – `index.html` was modified in
    `HEAD`. But what is `HEAD`? Is it the commit I was working on when I started the
    merge/rebase, or is it the commit from the other branch? (the answer is “`HEAD`
    is your branch if you’re doing a merge, and it’s the “other branch” if you’re
    doing a rebase, but I always find that hard to remember)
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然觉得这件事令人困惑——`index.html`在`HEAD`中被修改了。但`HEAD`是什么？它是我在开始合并/变基时正在工作的提交，还是来自另一个分支的提交？（答案是“如果你在进行合并，`HEAD`是你的分支；如果你在进行变基，它是“另一个分支”，但我总是觉得很难记住）
- en: 'I think I would personally find it easier to understand if the message listed
    the branch names if possible, something like this:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为如果可能的话，如果消息列出了分支名称，我会觉得更容易理解，例如：
- en: '[PRE8]'
  id: totrans-split-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-split-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'I find this one confusing in exactly the same way as the previous message:
    it says `deleted by them:`, but what “them” refers to depends on whether you did
    a merge or rebase or cherry-pick.'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得这个和前一个消息的困惑程度完全相同：它说“由他们删除：”，但“他们”指的是你进行了合并、变基或挑选樱桃。
- en: for a merge, `them` is the other branch you merged in
  id: totrans-split-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于合并，`them`是你合并进来的另一个分支
- en: for a rebase, `them` is the branch that you were on when you ran `git rebase`
  id: totrans-split-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于变基，`them`是你运行`git rebase`时所在的分支
- en: for a cherry-pick, I guess it’s the commit you cherry-picked
  id: totrans-split-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于挑选樱桃，我猜这是你挑选的提交
- en: '**What I like to do if I’m confused:**'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果我感到困惑，我喜欢做的事情：**'
- en: try to remember what I did
  id: totrans-split-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试记住我做过什么
- en: run `git show main --stat` or something to see what I did on the `main` branch
    if I can’t remember
  id: totrans-split-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行`git show main --stat`或类似的命令来查看我在`main`分支上做了什么，如果我记不起来了
- en: '[PRE10]'
  id: totrans-split-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: I just find it a bit confusing that you need to look up what `-i`, `-n` and
    `-f` are to be able to understand this error message. I’m personally way too lazy
    to do that so even though I’ve probably been using `git clean` for 10 years I
    still had no idea what `-i` stood for (`interactive`) until I was writing this
    down.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是觉得有点困惑，你需要查找`-i`、`-n`和`-f`是什么才能理解这个错误消息。我个人太懒了，所以即使我可能已经使用`git clean`十年了，我仍然不知道`-i`代表什么（`interactive`），直到我写下这个。
- en: '**What I like to do if I’m confused:**'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果我感到困惑，我喜欢做的事情：**'
- en: Usually I just chaotically run `git clean -f` to delete all my untracked files
    and hope for the best, though I might actually switch to `git clean -i` now that
    I know what `-i` stands for. Seems a lot safer.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通常我只是混乱地运行`git clean -f`来删除所有未跟踪的文件，并希望一切顺利，尽管现在我可能会改用`git clean -i`，因为我知道`-i`代表什么了。看起来安全得多。
- en: that’s all!
  id: totrans-split-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 就这些！
- en: Hopefully some of this is helpful!
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 希望其中一些对你有帮助！
