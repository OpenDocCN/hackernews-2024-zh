["```\nVector3  LinePlaneIntersection(Line line,  Plane plane)  {  float denom = Vector3.Dot(line.normal, plane.normal);  float dist = Vector3.Dot(plane.normal, line.point);  float D =  (plane.distance - dist)  / denom;  return line.point + line.normal * D;}\n```", "```\nfloat denom = Vector3.Dot(line.normal, plane.normal);if  (Mathf.Abs(denom)  < EPSILON)  {  return  null;  }\n```", "```\nVector3  LinePlaneIntersection(Line line,  Plane plane)  {  float denom = Vector3.Dot(line.normal, plane.normal);  if  (Mathf.Abs(denom)  < EPSILON)  {  return  null;    }  float dist = Vector3.Dot(plane.normal, line.point);  float D =  (plane.distance - dist)  / denom;  return line.point + line.normal * D;}\n```", "```\nif  (D <  0)  {  return  null;}\n```", "```\nVector3  LinePlaneIntersection(Line line,  Plane plane)  {  float denom = Vector3.Dot(line.normal, plane.normal);  if  (Mathf.Abs(denom)  < EPSILON)  {  return  null;    }}\n```", "```\nVector3  RayPlaneIntersection(Line line,  Plane plane)  {  float denom = Vector3.Dot(line.normal, plane.normal);  if  (denom < EPSILON)  {  return  null;  }}\n```", "```\nLine  PlanePlaneIntersection(Plane P1,  Plane P2)  {  Vector3 direction = Vector3.cross(P1.normal, P2.normal);  if  (direction.magnitude < EPSILON)  {  return  null;    }}\n```", "```\nfloat dot = Vector3.Dot(P1.normal, P2.normal);float denom =  1  - dot * dot;float k1 =  (P1.distance - P2.distance * dot)  / denom;float k2 =  (P2.distance - P1.distance * dot)  / denom;Vector3 point = P1.normal * k1 + P2.normal * k2;\n```", "```\nVector3 direction = Vector3.cross(P1.normal, P2.normal);float denom = Vector3.Dot(direction, direction);Vector3 a = P1.distance * P2.normal;Vector3 b = P2.distance * P1.normal;Vector3 point = Vector3.Cross(a - b, direction)  / denom;\n```", "```\nLine  PlanePlaneIntersection(Plane P1,  Plane P2)  {  Vector3 direction = Vector3.cross(P1.normal, P2.normal);  if  (direction.magnitude < EPSILON)  {  return  null;    }  float denom = Vector3.Dot(direction, direction);  Vector3 a = P1.distance * P2.normal;  Vector3 b = P2.distance * P1.normal;  Vector3 point = Vector3.Cross(a - b, direction)  / denom;  Vector3 normal = direction.normalized;  return  new  Line(point, normal);}\n```", "```\nVector3  ThreePlaneIntersection(Plane P1,  Plane P2,  Plane P3)  {  Vector3 cross = Vector3.Cross(P2.normal, P3.normal);  float dot = Vector3.Dot(P1.normal, cross);  if  (Mathf.Abs(dot)  < EPSILON)  {  return  null;    }}\n```", "```\nVector3  ThreePlaneIntersection(Plane P1,  Plane P2,  Plane P3)  {  Vector3 dir = Vector3.Cross(P2.normal, P3.normal);  float denom = Vector3.Dot(u);  if  (Mathf.Abs(denom)  < EPSILON)  {  return  null;    }  Vector3 a = P2.normal * P3.distance;  Vector3 b = P3.normal * P2.distance;  Vector3 V = Vector3.Cross(P1.normal, a - b);  Vector3 U = dir * P1.distance;  return  (V + U)  / denom;}\n```"]