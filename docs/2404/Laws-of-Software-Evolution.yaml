- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:35:46'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:35:46'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Laws of Software Evolution
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件演化法则
- en: 来源：[https://two-wrongs.com/laws-of-software-evolution](https://two-wrongs.com/laws-of-software-evolution)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://two-wrongs.com/laws-of-software-evolution](https://two-wrongs.com/laws-of-software-evolution)
- en: The software I encounter most is software that interacts with a changing world.
    It’s software that needs to adapt to other software, but critically, it needs
    to adapt to its users – to *people*! People change their attitudes and processes
    in response to the environment, and the software needs to adapt around that.¹
    This is ultimately a good thing. Imagine if we didn’t change how we build roads
    in response to new types of vehicles! Or didn’t change how we handle user data
    in response to security breaches. In almost any human behaviour change, there
    is a software system that will struggle to accept it, because software is not
    good at improvisation.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我遇到最多的软件是与变化世界交互的软件。这些是需要适应其他软件的软件，但更重要的是，它们需要适应它们的用户 —— *人类*！人们根据环境改变他们的态度和流程，软件需要围绕这些变化进行适应。¹
    这其实是一件好事。想象一下，如果我们不根据新型车辆改变我们建造道路的方式！或者在安全漏洞曝光后不改变我们处理用户数据的方式。几乎任何人类行为的变化，都会让某个软件系统难以接受，因为软件并不擅长即兴表现。
- en: Based on this, Lehman formulated some laws of software evolution.² *On understanding
    laws, evolution, and conservation in the large-program life cycle*; Lehman; Journal
    of Systems and Software; 1980. This was in 1974, before companies had started
    with the practises Andrew Kelley discusses, so the idea of software needing continuous
    maintenance may be older than exploiting finished software for more profit.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 基于此，Lehman制定了一些软件演化法则。² *理解大型程序生命周期中的法则、演化和保护*；Lehman；《系统与软件杂志》；1980年。这是在1974年，在安德鲁·凯利讨论公司开始实践之前，因此软件需要持续维护的概念可能比利用完成的软件获取更多利润的概念更为古老。
- en: 'Many of the observations Lehman offers in his 1980 article directly contradict
    observations I’ve made myself, so I don’t propose a blind acceptance of all he
    says.³ I suggest reading his paper to evaluate the scientific basis more clearly
    for yourself. But the first two laws he summarises I carry close to my heart:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Lehman在他的1980年文章中提出的观察，与我自己的观察直接相矛盾，因此我并不建议盲目接受他所说的一切。³ 我建议阅读他的论文，以便更清楚地评估科学基础。但他总结的前两条法则我深有感触：
- en: Software exists to support a real-world task, and as the real world changes,
    the software must change with it or become increasingly less relevant.
  id: totrans-split-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件存在是为了支持实际任务，随着现实世界的变化，软件必须随之变化，否则就会变得越来越不相关。
- en: As software is changed, its complexity will increase, increasing the cost of
    further changes – unless effort is spent countering this effect.
  id: totrans-split-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当软件被修改时，其复杂性将增加，进而增加进一步修改的成本 —— 除非付出努力来对抗这种影响。
- en: I have found these laws to be useful guides through multiple problems I’ve encountered
    professionally. One example was when a team was stuck in a [reinforcing feedback
    loop of increasing difficulty of change](the-reinforcing-nature-of-toil.html),
    and the way out was to establish stricter quality controls on changes to turn
    the loop around.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现这些法则在我职业生涯中遇到的多个问题中都是有用的指导。例如，有一次团队陷入了[难以改变的正反馈循环中](the-reinforcing-nature-of-toil.html)，摆脱这种困境的方法是建立更严格的质量控制措施来扭转局面。
- en: Another case was when a product was discontinued but bug fixes were supported
    for existing customers of that product. There was a temptation to make fixes through
    ugly hacks to spend as little development time as possible on that product. As
    sensible as that sounds, in this case the customers would not be migrated off
    that product for several years. When problems are solved with quick hacks, the
    second law of software evolution is accelerated, and thus maintenance will cost
    more and more as time goes on. On a long time frame, such as in that case, the
    better choice is to spend more on fixes up front, to reduce the total cost. The
    cost savings of discontinuing the product should come from a reduced number of
    fixes (only fix critical bugs, not long-lived quirks), rather than reduced effort
    per bug fix.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个案例是，当一个产品停产但仍为现有客户提供 bug 修复支持时。有一种诱惑是通过丑陋的补丁尽可能少地花费开发时间来修复问题。尽管听起来很合理，在这种情况下，客户在几年内仍然不会迁移出该产品。当问题通过快速补丁解决时，软件演化的第二法则被加速，因此随着时间的推移，维护成本将越来越高。在长期的时间框架内，比如在这种情况下，更好的选择是在前期花费更多的修复费用，以降低总成本。停产产品的成本节约应该来自于减少修复数量（仅修复关键
    bug，而不是长期存在的怪癖），而不是减少每个 bug 修复的努力。
