["```\ntest('calculates total basket value', async () => {\n await pool.transaction(async (tx) => {\n await tx.query(sql.unsafe`\n INSERT INTO basket (product_id, quantity)\n VALUES (1, 2)\n `);\n\n const  total  =  await  getBasketTotal(tx);\n\n expect(total).toBe(20);\n });\n});\n```", "```\npostgres=# CREATE  DATABASE foo TEMPLATE contra;\nCREATE  DATABASE\nTime: 1999.758 ms (00:02.000)\n```", "```\npostgres=# CREATE  DATABASE bar TEMPLATE contra;\nCREATE  DATABASE\nTime: 87.168 ms\n```", "```\n$  docker  run  \\\n -p  5435:5432  \\\n --tmpfs  /var/lib/pg/data  \\\n -e  PGDATA=/var/lib/pg/data  \\\n -e  POSTGRES_PASSWORD=postgres  \\\n --name  contra-database  \\\n --rm  \\\n postgres:14\n```", "```\nimport {\n createPool,\n sql,\n stringifyDsn,\n} from  'slonik';\n\ntype  TestDatabase  = {\n destroy: () =>  Promise<void>;\n getConnectionUri: () =>  string;\n name: () =>  string;\n};\n\nconst  createTestDatabasePooler  =  async (connectionUrl:  string) => {\n const  pool  =  await  createPool(connectionUrl, {\n connectionTimeout: 5_000,\n // This ensures that we don't attempt to create multiple databases in parallel.\n maximumPoolSize: 1,\n });\n\n const  createTestDatabase  =  async (\n templateName:  string,\n ):  Promise<TestDatabase> => {\n const  database  =  'test_'  +  uid();\n\n await pool.query(sql.typeAlias('void')`\n CREATE DATABASE ${sql.identifier([database])}\n TEMPLATE ${sql.identifier([templateName])}\n `);\n\n return {\n destroy: async () => {\n await pool.query(sql.typeAlias('void')`\n DROP DATABASE ${sql.identifier([database])}\n `);\n },\n getConnectionUri: () => {\n return  stringifyDsn({\n ...parseDsn(connectionUrl),\n databaseName: database,\n password: 'unsafe_password',\n username: 'contra_api',\n });\n },\n name: () => {\n return database;\n },\n };\n };\n\n return () => {\n return  createTestDatabase('contra_template');\n };\n};\n\nconst  getTestDatabase  =  await  createTestDatabasePooler();\n```"]