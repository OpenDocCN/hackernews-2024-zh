- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:00:35'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:00:35'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Cache is King: A guide for Docker layer caching in GitHub Actions - Blacksmith'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存为王：GitHub Actions 中 Docker 层次缓存的指南 - Blacksmith
- en: 来源：[https://blacksmith.sh/blog/cache-is-king-a-guide-for-docker-layer-caching-in-github-actions](https://blacksmith.sh/blog/cache-is-king-a-guide-for-docker-layer-caching-in-github-actions)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blacksmith.sh/blog/cache-is-king-a-guide-for-docker-layer-caching-in-github-actions](https://blacksmith.sh/blog/cache-is-king-a-guide-for-docker-layer-caching-in-github-actions)
- en: A majority of the GitHub Action workflows we see at Blacksmith use Docker. Whether
    it is to setup containers to run tests against, or build custom Docker images
    and push them to a registry, Docker is everywhere. It is also common knowledge
    that for a healthy Continuous Integration (CI) pipeline, one has to think through
    an effective caching strategy - there are few things as mind-numbing as watching
    tests rebuild undifferentiated dependencies on every run.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Blacksmith 看到的大部分 GitHub Action 工作流都在使用 Docker。无论是为了设置容器以运行测试，还是构建自定义 Docker
    镜像并将其推送到注册表，Docker 都无处不在。众所周知，为了一个健康的持续集成（CI）流水线，必须考虑一个有效的缓存策略——在每次运行时看到测试重新构建无差别的依赖项是一件让人头疼的事情。
- en: A few weeks ago, I was helping a customer setup their Docker workflows, and
    started reading about the best way to enable caching in GitHub Actions. Surprisingly,
    I found *at least* three ways to achieve this, each with its own quirks. This
    blog is a one-stop shop with everything I learned and will help you choose the
    most suitable caching strategy for your workflows.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 几周前，我在帮助一个客户设置他们的 Docker 工作流时，开始研究在 GitHub Actions 中启用缓存的最佳方式。令人惊讶的是，我找到了*至少*三种实现这一目标的方式，每种方式都有其自己的特点。本文是我学到的所有内容的一站式指南，将帮助您为工作流选择最合适的缓存策略。
- en: Docker caching 101
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 缓存 101
- en: Docker images are best visualized as a stack of layers, where each layer represents
    a set of filesystem changes resulting from an instruction in the `Dockerfile`.
    Each layer only contains the changes from the layer before it. This ensures that
    there is no duplication of data across layers. A big advantage of the layered
    structure is that the intermediate filesystems (layers) can be re-used in subsequent
    Docker builds. This re-using of layers is what forms the basis of Docker caching,
    and results in much faster, incremental builds, instead of always building the
    image from scratch.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 镜像最好被视为一组层次结构，其中每个层代表由 `Dockerfile` 中的指令引起的文件系统更改集。每个层仅包含其前一层的更改。这确保了在层次结构中没有数据重复。分层结构的一个重要优势是可以在后续的
    Docker 构建中重用中间文件系统（层次），这种层次的重用是 Docker 缓存的基础，使得构建变得更快、增量化，而不是每次都从头开始构建镜像。
- en: The best `Dockerfile` s are the ones that stack layers in order from least frequently
    to most frequently mutated. Consolidating the layers that are least likely to
    change as the base of every Docker build, allows for the most effective re-use
    of layers when building subsequent Docker images. There are several, much more
    informed blogs out there about `Dockerfile` best practices, so that’s the last
    I’ll speak of it.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的 `Dockerfile` 是那些按从最不频繁到最频繁变化的顺序堆叠层的文件。将最不可能改变的层作为每个 Docker 构建的基础，允许在构建后续
    Docker 镜像时最有效地重用这些层。有关 `Dockerfile` 最佳实践，还有许多更详细的博客文章，所以这是我将要谈论的最后一点。
- en: '**Starting simple**'
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**从简单开始**'
- en: If you are familiar with how a Docker build and push step is written in GitHub
    Actions, feel free to skip over to the next section that talks about caching.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉在 GitHub Actions 中编写 Docker 构建和推送步骤，可以直接跳到下一节讨论缓存的部分。
- en: '[PRE0]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is what a vanilla GitHub Action workflow that builds and pushes a Docker
    image looks like. This workflow assumes the `Dockerfile` is in the root of the
    repository, and uses two popular Docker actions:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个典型的 GitHub Action 工作流示例，用于构建并推送 Docker 镜像。此工作流假设 `Dockerfile` 位于仓库的根目录，并使用了两个流行的
    Docker 动作：
- en: '`[setup-buildx-action](https://github.com/docker/setup-buildx-action)` to configure
    [Docker Buildx](https://github.com/docker/buildx) to create a builder instance
    for running the image build'
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[setup-buildx-action](https://github.com/docker/setup-buildx-action)` 用于配置
    [Docker Buildx](https://github.com/docker/buildx) 以创建一个运行镜像构建的构建器实例'
- en: '`[build-push-action](https://github.com/docker/build-push-action)` to build
    and push the Docker image using the builder configured in the previous step'
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[build-push-action](https://github.com/docker/build-push-action)` 用于使用上一步配置的构建器构建并推送
    Docker 镜像'
- en: Notably, there is no caching occurring in this workflow - so, every time the
    job is run, Docker will have to build the image from scratch!
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在此工作流程中没有发生缓存 - 因此，每次运行作业时，Docker 都必须从头开始构建镜像！
- en: Docker caching with GitHub Actions cache
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 缓存的 Docker 缓存
- en: The first caching strategy we are going to explore is caching Docker layer blobs
    to the native Github Actions [cache](https://github.com/actions/cache). This approach
    is the simplest to reconcile, and I’d recommend it as a good starting point to
    build intuition. There are, however, some limitations to this approach as your
    codebase scales.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要探讨的第一种缓存策略是将 Docker 层 blob 缓存到本机 GitHub Actions [cache](https://github.com/actions/cache)。这种方法最容易协调，我建议它作为建立直觉的良好起点。然而，随着代码库规模的扩展，此方法存在一些限制。
- en: Each GitHub repository is only given 10GB of cache space, after which, the oldest
    entries in the cache are evicted. If your Docker image is reasonably large, or
    has several layers, you will likely run into this limit and not reap the benefits
    of effective caching.
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 GitHub 存储库仅提供 10GB 的缓存空间，此后，缓存中的最旧条目将被驱逐。如果您的 Docker 镜像相当大，或者有多个层次，您可能会遇到此限制，并且无法享受到有效缓存的好处。
- en: GitHub’s cache is only scoped to the development branch running the Docker build.
    Sharing the cached layers across your organization, or with other build systems,
    is not possible with this approach.
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 的缓存仅限于运行 Docker 构建的开发分支。不能通过此方法在整个组织或其他构建系统中共享缓存层。
- en: Here is how you would edit the above workflow file to enable caching backed
    by GitHub’s cache.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您如何编辑上述工作流文件以启用由 GitHub 的缓存支持的缓存。
- en: '[PRE1]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let’s take a second to understand `cache-from` and `cache-to`.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间来理解 `cache-from` 和 `cache-to`。
- en: '`cache-from` points to the source where the build process will attempt to find
    a cache to use while building the Docker image'
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache-from` 指向构建过程中尝试寻找缓存以供使用的源。'
- en: '`cache-to` specifies the destination where the cache generated during the build
    process will be stored'
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache-to` 指定了在构建过程中生成的缓存的目标存储位置。'
- en: In the above workflow, the first run will be an uncached run, since there is
    no cache at `cache-from` to import. At the end of this run, cache blobs will be
    written to `cache-to`. Subsequent runs will be able to leverage these cached Docker
    layers, and just like that, you’re running much faster than you were!
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述工作流程中，第一次运行将是未缓存的运行，因为 `cache-from` 中没有缓存可导入。在此运行结束时，缓存 blob 将被写入 `cache-to`。后续运行将能够利用这些缓存的
    Docker 层，就像这样，您的运行速度比以前快得多！
- en: Docker caching with a registry backed cache
  id: totrans-split-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 使用注册表支持的缓存
- en: The second flavour of Docker caching we’ll look at uses a Docker registry as
    the cache backend. A Docker registry is a storage and distribution system for
    Docker images. There are two ways you can leverage a registry backed cache, each
    with its own strengths and limitations.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一看使用 Docker 注册表作为缓存后端的第二种 Docker 缓存方式。Docker 注册表是 Docker 镜像的存储和分发系统。您可以利用两种方法来使用注册表支持的缓存，每种方法都有其优点和限制。
- en: 1\. Inline cache
  id: totrans-split-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1\. 内联缓存
- en: An inline cache is the simplest registry backed cache to setup. This method
    embeds the build cache artifacts directly into the Docker image. Let’s modify
    our workflow file before diving in.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 内联缓存是设置最简单的注册表支持的缓存。此方法将构建缓存工件直接嵌入到 Docker 镜像中。让我们在深入之前修改我们的工作流文件。
- en: '[PRE2]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, our `cache-to` now points to a different cache backend. The
    `type=inline` instructs the Docker builder to embed cache artifacts into the Docker
    image, and push them to the same location as the Docker image Subsequent runs
    of this workflow will use the image referenced in `cache-from` as their base,
    to significantly speed-up Docker builds.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，我们的 `cache-to` 现在指向不同的缓存后端。`type=inline` 指示 Docker 构建器将缓存工件嵌入到 Docker
    镜像中，并将它们推送到与 Docker 镜像相同的位置。此工作流程的后续运行将使用 `cache-from` 中引用的镜像作为基础，显著加快 Docker
    构建速度。
- en: So… why is this better than the GitHub Action’s cache backend?
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 那么... 这比 GitHub Action 的缓存后端更好在哪里呢？
- en: You are not subject to GitHub’s cache size limits and eviction policies.
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不受 GitHub 缓存大小限制和驱逐策略的约束。
- en: You can re-use the cache artifacts across your organization or with other build
    systems.
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在整个组织或其他构建系统中重复使用缓存工件。
- en: So… why aren’t we done yet?
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 那么... 为什么我们还没完成呢？
- en: For this we need to take a slight detour to understand “multi-stage” Docker
    builds. A [multi-stage](https://docs.docker.com/build/building/multi-stage/) Docker
    build is one where the `Dockerfile` is organized into multiple stages. Each stage
    has its own base image and set of instructions. The author has complete flexibility
    to decide what artifacts from the previous stage should be copied over to the
    next stage. For example, you can have a `Build` stage that includes all the tools
    and dependancies, but have your `Final` stage only have the necessary pieces to
    run your application.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要稍微绕个弯来理解“多阶段”Docker构建。[多阶段](https://docs.docker.com/build/building/multi-stage/)Docker构建指的是`Dockerfile`组织为多个阶段的情况。每个阶段都有自己的基础镜像和一组指令。作者完全可以决定哪些前阶段的构件应复制到下一个阶段。例如，您可以有一个`Build`阶段，其中包含所有工具和依赖项，但是您的`Final`阶段只包含运行应用程序所需的必要部分。
- en: '[PRE3]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Having only the necessary files and dependencies copied into the final production
    image allows for it to be much smaller and more secure, than if the entire `Dockerfile`
    were to be written in a single stage.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 只将必要的文件和依赖项复制到最终的生产镜像中，可以使其比在单阶段编写整个`Dockerfile`时更小更安全。
- en: The `inline` cache only supports `mode=min` . This mode only caches the layers
    of the final stage, not any of the intermediate layers in a multi-stage Docker
    build. This significantly reduces the chances of a cache hit in subsequent Docker
    builds.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`inline`缓存仅支持`mode=min`。此模式仅缓存最终阶段的层，而不是多阶段Docker构建中的任何中间层。这显著减少了后续Docker构建中缓存命中的机会。'
- en: Another shortcoming of the `inline` cache is that since it embeds the cache
    artifacts into the Docker image, it can significantly inflate the size of your
    Docker image. Enter, our final caching solution.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`inline`缓存的另一个缺点是，由于它将缓存生成物嵌入到Docker镜像中，这可能会显著增加您的Docker镜像大小。接下来，让我们介绍我们的最终缓存解决方案。'
- en: 2\. Registry cache
  id: totrans-split-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. 注册表缓存
- en: The registry cache backend is the `inline` cache++. This backend pushes cache
    artifacts as a separate image than the Docker image to a dedicated location in
    the registry.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表缓存后端是`inline`缓存++。此后端将缓存生成物推送为独立的镜像，而不是与Docker镜像合并到注册表的专用位置。
- en: '[PRE4]'
  id: totrans-split-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Contrary to the `inline` cache, the registry cache supports caching of intermediate
    layers in a multi-stage Docker build when configured with `mode=max` . This increases
    the chances of cache hits on subsequent builds. It also supports a host of [options](https://docs.docker.com/build/cache/backends/registry/)
    to control compression type, levels, and naming of the cache image etc. At the
    cost of some additional complexity to set up, this is the best-in-class caching
    solution for Docker builds.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与`inline`缓存相反，注册表缓存在配置为`mode=max`时支持缓存多阶段Docker构建中的中间层。这增加了后续构建中缓存命中的机会。它还支持一系列[选项](https://docs.docker.com/build/cache/backends/registry/)，用于控制缓存镜像的压缩类型、级别和命名等。尽管设置复杂度有所增加，但这是Docker构建的最佳类缓存解决方案。
- en: At Blacksmith, we are always thinking of ways to boost the performance of your
    CI jobs. Keep your eyes peeled for out-of-the-box Docker layer caching with zero
    code changes, collocated Docker mirrors, and beefy remote builders from us in
    the near future! If you need help optimizing your workflows, or want to be notified
    as new features drop, email us at [hello@blacksmith.sh](mailto:hello@blacksmith.sh).
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在Blacksmith，我们始终考虑提升您的CI作业的性能。请密切关注我们即将推出的无需代码更改的Docker层缓存、共同位置的Docker镜像镜像和强大的远程构建器！如果您需要优化工作流程或希望在新功能发布时收到通知，请发送电子邮件至[hello@blacksmith.sh](mailto:hello@blacksmith.sh)。
