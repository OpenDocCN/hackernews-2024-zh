["```\nClient                                 Server  |                                       | |----- GET Request -------------------->| |                                       | |<---- Response 200 OK + ETag ----------| |     (Cache response locally)          | |                                       | |----- GET Request + If-None-Match ---->|  (If-None-Match == previous ETag) |                                       | |       Does ETag match?                | |<---- Yes: 304 Not Modified -----------|  (No body sent; Use local cache) |       No: 200 OK + New ETag ----------|  (Update cached response) |                                       | \n```", "```\nHTTP/2.0 200 OK Etag: W/\"b8fdfabd59aed6e0e602dd140c0a0ff48a665cac791dede458c5109bf4bf9463\"   {  \"login\":\"rednafi\", \"id\":30027932, ... } \n```", "```\ngh api -i -H \\  'If-None-Match: W/\"b8fdfabd59aed6e0e602dd140c0a0ff48a665cac791dede458c5109bf4bf9463\"' \\ /users/rednafi \n```", "```\nHTTP/2.0 304 Not Modified Etag: \"b8fdfabd59aed6e0e602dd140c0a0ff48a665cac791dede458c5109bf4bf9463\"   gh: HTTP 304 \n```", "```\npackage main   import (  \"crypto/sha256\" \"encoding/hex\" \"fmt\" \"net/http\" \"strings\" )   // calculateETag generates a weak ETag by SHA-256-hashing the content // and prefixing it with W/ to indicate a weak comparison func calculateETag(content string) string {  hasher := sha256.New() hasher.Write([]byte(content)) hash := hex.EncodeToString(hasher.Sum(nil)) return fmt.Sprintf(\"W/\\\"%s\\\"\", hash) }   func main() {  http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { // Define the content within the handler content := `{\"message\": \"Hello, world!\"}` eTag := calculateETag(content)   // Remove quotes and W/ prefix for If-None-Match header comparison ifNoneMatch := strings.TrimPrefix( strings.Trim(r.Header.Get(\"If-None-Match\"), \"\\\"\"), \"W/\")   // Generate a hash of the content without the W/ prefix for comparison contentHash := strings.TrimPrefix(eTag, \"W/\")   // Check if the ETag matches; if so, return 304 Not Modified if ifNoneMatch == strings.Trim(contentHash, \"\\\"\") { w.WriteHeader(http.StatusNotModified) return }   // If ETag does not match, return the content and the ETag w.Header().Set(\"ETag\", eTag) // Send weak ETag w.Header().Set(\"Content-Type\", \"application/json\") w.WriteHeader(http.StatusOK) fmt.Fprint(w, content) })   fmt.Println(\"Server is running on http://localhost:8080\") http.ListenAndServe(\":8080\", nil) } \n```", "```\ncurl -i  http://localhost:8080/foo \n```", "```\nHTTP/1.1 200 OK Content-Type: application/json Etag: W/\"1d3b4242cc9039faa663d7ca51a25798e91fbf7675c9007c2b0470b72c2ed2f3\" Date: Wed, 10 Apr 2024 15:54:33 GMT Content-Length: 28   {\"message\": \"Hello, world!\"} \n```", "```\ncurl -i -H \\  'If-None-Match: \"1d3b4242cc9039faa663d7ca51a25798e91fbf7675c9007c2b0470b72c2ed2f3\"' \\ http://localhost:8080/foo \n```", "```\nHTTP/1.1 304 Not Modified Date: Wed, 10 Apr 2024 15:57:25 GMT \n```"]