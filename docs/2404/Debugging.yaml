- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 12:50:12'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 12:50:12'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Debugging
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: 来源：[https://airs.com/ian/essays/debug/debug.html](https://airs.com/ian/essays/debug/debug.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://airs.com/ian/essays/debug/debug.html](https://airs.com/ian/essays/debug/debug.html)
- en: '|   |  **"The realization came over me with full force that a good part of
    the remainder of my life was going to be spent in finding errors in my own programs."**  |'
  id: totrans-split-6
  prefs: []
  type: TYPE_TB
  zh: '|   |  **“我突然完全意识到，我余下的一大部分生命将会花在找自己程序中的错误上。”**  |'
- en: '|   | *Maurice Wilkes* |'
  id: totrans-split-7
  prefs: []
  type: TYPE_TB
  zh: '|   | *莫里斯·威尔克斯* |'
- en: 'Last changed on $Date: 2003/04/15 04:18:55 $.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '上次更改时间：$Date: 2003/04/15 04:18:55 $。'
- en: A practicing programmer inevitably spends a lot of time tracking down and fixing
    bugs. Debugging, particularly debugging of other people's code, is a skill separate
    from the ability to write programs in the first place. Unfortunately, while debugging
    is often practiced, it is rarely taught. A typical course in debugging techniques
    consists merely of reading the manual for a debugger.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个实践中的程序员不可避免地会花费大量时间来追踪和修复 bug。调试，特别是调试别人的代码，是一种独立于首次编写程序的技能。然而，尽管调试经常被实践，但很少被教授。关于调试技术的典型课程仅仅包括阅读调试器手册。
- en: This essay contains my thoughts on debugging, developed over the course of my
    twenty years as a professional programmer. This essay is aimed at people who already
    have some programming experience.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章包含了我在作为一名职业程序员二十年间对调试的思考。这篇文章是针对那些已经具有一定编程经验的人群。
- en: '* * *'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Debugging means removing bugs from programs. A bug is unexpected and undesirable
    behaviour by a program.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 调试意味着从程序中消除 bug。bug 是程序产生的意外和不希望的行为。
- en: Occasionally there is a formal specification that the program is required to
    follow, in which case a bug is a failure to follow the spec. More frequently the
    program specification is informal, in which case people may disagree as to whether
    a particular program behaviour is in fact a bug or not.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔会有一个程序需要遵循的正式规范，这种情况下 bug 就是未能遵循规范。更频繁地，程序规范是非正式的，这种情况下人们可能对某个程序行为是否真的是 bug
    存有分歧。
- en: As one of the people writing a program, you should be a source of bug reports.
    Don't simply rely on testers or users. If you notice something odd while running
    a program, it can be tempting to disregard it and hope that it will go away. This
    is especially true if you are working on something else at the time. Resist the
    temptation. Record the bug. If you have data files or logs, save them. If you
    have time later, return to the issue; otherwise, pass it on to somebody else.
    As one of the people most familiar with how the program is supposed to work, you
    are in the best possible position for detecting unexpected behaviour.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 作为编写程序的人之一，你应该是 bug 报告的来源。不要仅仅依赖测试人员或用户。如果在运行程序时注意到一些奇怪的现象，很容易忽视它并希望它会消失。尤其是在此时正在处理其他事情时。抵制诱惑。记录下
    bug。如果有数据文件或日志，请保存它们。如果以后有时间，回到这个问题；否则，将其传递给其他人。作为了解程序应如何工作的人之一，你处于检测意外行为的最佳位置。
- en: Once you have a bug report, the first step in removing the bug is identifying
    it. This is of particular importance when working with a bug report produced by
    somebody else, such as the testing team or a user. Some bugs are relatively obvious,
    as when the program crashes unexpectedly. Others are obscure, as when the program
    generates output which is slightly incorrect.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦有了 bug 报告，消除 bug 的第一步是找出它。这在处理由其他人生成的 bug 报告时尤为重要，比如测试团队或用户提供的。有些 bug 相对明显，比如程序意外崩溃。其他一些
    bug 则较隐晦，比如程序生成略微不正确的输出。
- en: Many bug reports received from users are of the form "I did such and such, and
    something went wrong." Before doing anything else, you must find out what went
    wrong--that is, you must identify the bug by determining the program behaviour
    which was unexpected and undesirable. Any attempt to fix the bug before understanding
    what went wrong is generally wasted time.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 很多用户反馈的 bug 报告形式是：“我做了某事，然后出了问题。” 在做任何其他事情之前，你必须找出问题出在哪里——也就是说，你必须通过确定意外和不希望的程序行为来识别
    bug。在理解问题出在哪里之前尝试修复 bug 通常是浪费时间。
- en: 'Identifying a bug reported by a user typically requires getting the answer
    to two questions: "What did the program do?" and "What did you expect the program
    to do?" The goal is to determine precisely the behaviour of the program which
    was unexpected and undesirable.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，确定用户报告的 bug 需要回答两个问题：“程序做了什么？”和“你希望程序做什么？”目标是确定程序的行为精确地是意外和不希望的。
- en: Once the bug has been identified, the easiest and fastest way to fix it is to
    determine that it is not a bug at all. If there is a formal specification for
    the program, you may have to modify the specification. In other cases, you may
    have to modify the expectations of the user. This rapid fix is often known as
    declaring the behaviour to be an "undocumented feature." Despite the obvious potential
    for abuse, this is in fact sometimes the correct way to handle the problem.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了 bug，最简单最快速的修复方法是确定它根本不是 bug。如果程序有正式的规范，可能需要修改规范。在其他情况下，可能需要修改用户的期望。这种快速修复通常被称为声明行为为“未记录的特性”。尽管有滥用的明显潜力，但有时这确实是处理问题的正确方式。
- en: Unfortunately, most bugs are real bugs, and require further work.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，大多数 bug 是真正的 bug，并需要进一步的工作。
- en: '* * *'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The first step in fixing a bug is to replicate it. This means to recreate the
    undesirable behaviour under controlled conditions. The goal is to find a precisely
    specified set of steps which demonstrate the bug.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 修复 bug 的第一步是复制它。这意味着在受控条件下重新创建不良行为。目标是找到一组精确指定的步骤来演示 bug。
- en: In many cases this is straightforward. You run the program on a particular input,
    or you press a particular button on a particular dialog, and the bug occurs. In
    other cases, replication can be very difficult. It may require a lengthy series
    of steps, or, in an interactive program such as a game, it may require precise
    timing. In the worst cases, replication may be nearly impossible.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，这很简单。您在特定输入上运行程序，或者在特定对话框上按下特定按钮，bug 就会发生。在其他情况下，复制可能非常困难。可能需要一系列冗长的步骤，或者在像游戏这样的交互式程序中，可能需要精确的时间控制。在最坏的情况下，复制可能几乎不可能。
- en: '* * *'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Programmers are sometimes tempted to skip the replication step, and to go straight
    from the bug report to the fix. However, failing to replicate the bug means that
    it is impossible to verify the fix. The fix may turn out to be for a different
    bug, or it may have no significant effect at all. If the bug has not been replicated,
    there is no way to tell.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员有时候会想要跳过复制步骤，直接从 bug 报告到修复。然而，未能复制 bug 意味着无法验证修复结果。修复可能会变成针对另一个 bug，或者根本没有显著影响。如果
    bug 没有被复制，就无法确定。
- en: Failure to replicate the bug is a real problem which I've seen happen many times.
    In a complex program, it's often quite easy to find something to fix--perhaps
    a real problem, perhaps merely something which looks like a problem. It's human
    nature to assume that any particular fix solves the problem at hand. Without a
    means of verification, any plausible fix will be accepted, whether it is right
    or wrong. An incorrect fix leads to future problems. On average, skipping the
    replication step wastes more time than it saves.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 未能复制 bug 是一个真正的问题，我已经看到这种情况发生了很多次。在复杂的程序中，往往很容易找到要修复的东西--也许是一个真正的问题，也许只是看起来像一个问题。人类倾向于假设任何特定的修复解决了手头的问题。没有验证手段，任何看似合理的修复都将被接受，无论它是正确还是错误的。不正确的修复会导致未来问题。总体而言，跳过复制步骤比节省的时间更多地浪费时间。
- en: '* * *'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: By far the best way to replicate the bug is on a system wholly under your own
    control, with a copy of the program you built yourself. Replicating the bug on
    your own system means that you can easily test a patched version of the program.
    Unfortunately, in some cases this is impossible.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过完全控制的系统上复制 bug 是迄今为止最好的方法，使用您自己构建的程序副本。在您自己的系统上复制 bug 意味着您可以轻松测试程序的修补版本。不幸的是，在某些情况下这是不可能的。
- en: One reason that replication on your system may be impossible is that the user
    reporting the bug may have a unique system configuration, or the user may be using
    private input files which you can not obtain. In these cases you must try to ensure
    that the user can reliably replicate the bug, and that the user can test the patched
    program. Without this help from the user, debugging is reduced to little more
    than guessing. It's generally not worth proceeding. If that is not an option,
    then you should at least try to construct some sort of test case for any possible
    patch, to confirm that the patch does do something useful even if you can't verify
    that it fixes the original bug.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的系统上无法复制问题的一个原因可能是报告 Bug 的用户可能有独特的系统配置，或者用户可能在使用您无法获取的私有输入文件。在这些情况下，您必须努力确保用户能可靠地复制
    Bug，并且用户可以测试已修补的程序。如果没有用户的帮助，调试基本上就只能靠猜测。通常不值得继续。如果这不是一个选择，那么您至少应该尝试为任何可能的补丁构建某种测试案例，以确认即使您无法验证其是否修复了原始
    Bug，该补丁确实会起作用。
- en: A more common problem is that the user can demonstrate the bug, but you can
    not replicate it on your own system, and you don't know why. There is no definitive
    way to solve this problem, but here are some of the possibilities to consider.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 更常见的问题是，用户可以演示 Bug，但您无法在自己的系统上复制它，也不知道原因。解决这个问题没有确定的方法，但有一些可以考虑的可能性。
- en: The user may simply be misreporting the problem, or the way in which it is replicated.
    Go over it again. Confirm what the user actually types and where the user actually
    clicks. Confirm what the user sees on the screen. Try not to make any assumptions
    about how the program is being run--the user may be doing something which is so
    off the wall that you would never consider it.
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可能只是错误地报告了问题，或者复制问题的方式不正确。再检查一遍。确认用户实际输入了什么以及用户实际点击了哪里。确认用户在屏幕上看到了什么。尽量不要假设程序的运行方式——用户可能在做某些非常特殊的事情，你从未考虑过。
- en: Some programs have odd behaviour under unusual conditions. Check whether the
    user's system is very low on disk space, or has bad network connectivity, or is
    very overloaded. Check whether any other programs are failing unexpectedly--hardware
    problems are rare, but they do happen. Check for messages in the system logs.
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些程序在不寻常的条件下会表现出奇怪的行为。检查用户的系统是否磁盘空间非常低，或者网络连接状况不佳，或者负载非常重。检查是否有其他程序意外失败——硬件问题很少见，但确实会发生。检查系统日志中是否有消息。
- en: Check the version of the software the user is running. Check the versions of
    the operating system and any system libraries. Check which system patches have
    been applied. Check the exact system type, monitor type, keyboard type, etc.
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查用户运行的软件版本。检查操作系统版本以及任何系统库的版本。检查已应用的系统补丁。检查确切的系统类型、显示器类型、键盘类型等。
- en: In some cases a bug may happen rarely and apparently randomly, so that it is
    very difficult to figure out what triggers it, and how to replicate it. In this
    frustrating situation, I only know of one reliable approach, which is to automatically
    log all potentially relevant events, and save the logs when the bug occurs. In
    some cases it's particularly useful to be able to replay the program using the
    log, which can be a powerful mechanism for replicating a bug. Of course this requires
    a logging facility, and adding one to a large program can be a large undertaking.
    Nevertheless, it's probably worth doing the second time you find yourself searching
    for a bug which appears to occur randomly.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，Bug 可能很少发生，看起来是随机的，因此非常难以确定触发它的条件以及如何复制它。在这种令人沮丧的情况下，我只知道一种可靠的方法，那就是自动记录所有可能相关的事件，并在
    Bug 发生时保存日志。在某些情况下，能够使用日志重新运行程序非常有用，这可以是复制 Bug 的有效机制。当然，这需要有一个日志记录设施，并且向大型程序添加一个日志记录设施可能是一个很大的工作。尽管如此，当您发现自己第二次在搜索似乎随机发生的
    Bug 时，这可能是值得做的。
- en: '* * *'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Once you are able to replicate the bug, you must figure out what causes it.
    This is generally the most time-consuming step.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您能够复制 Bug，您必须弄清楚是什么原因引起了它。这通常是最耗时的步骤。
- en: '* * *'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: As a practicing programmer, you are probably familiar with the tool called a
    debugger. The name of this tool makes it seem like the tool of choice for debugging--it
    seems logical that in order to debug you would use a debugger. However, this is
    inaccurate. As I said initially, debugging means removing bugs from programs;
    while a debugger is a powerful tool, one thing it does not do is remove bugs.
    A better name for the tool would be "inspector". (As it is unfortunately too late
    to rename the tool, I will continue referring to it as a debugger.)
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名实践程序员，你可能熟悉一个称为调试器的工具。这个工具的名称让人觉得它是调试的首选工具--似乎逻辑上讲，要调试就要用调试器。然而，这是不准确的。正如我最初所说，调试意味着从程序中移除错误；虽然调试器是一个强大的工具，但它无法去除错误。这个工具的一个更好的名称应该是“检查器”。（由于现在改名为工具已经太晚，我将继续称其为调试器。）
- en: In order to fix a bug, you must understand it. A debugger can sometimes help
    you understand a bug, but it is only one of several tools for that purpose. Only
    in certain specific circumstances should it be the first tool you reach for.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修复错误，你必须理解它。调试器有时可以帮助你理解错误，但它只是用于此目的的几个工具之一。只有在特定情况下，它才应该是你首选的工具之一。
- en: '* * *'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In order to understand a bug in a program, you must have some understanding
    of the program.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解程序中的错误，你必须对程序有一些了解。
- en: If you wrote the program, then you presumably understand it. If not, then you
    have more serious problems. [[1]](#FTN.AEN75)
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你编写了程序，那么你可能已经理解了它。如果没有，那么你就有了更严重的问题。[[1]](#FTN.AEN75)
- en: If you didn't write the program, you need to grasp its general structure. Most
    programs are organized in a fairly sensible fashion, once you know the general
    approach. If you are lucky, the general approach is documented, or you can ask
    the original designer.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有编写该程序，你需要掌握其一般结构。大多数程序在你了解一般方法后，组织得相当合理。如果你幸运的话，一般方法是有文档记录的，或者你可以询问原始设计者。
- en: More commonly, you need to pull the structure out of the source code. The best
    approach is to start looking at the source code from the start of the program
    (e.g., the `main` function in a C program). Skim through the program, stepping
    down through functions, until you find the main center of action--in most programs,
    some sort of loop. This can normally be done fairly quickly. The nature of this
    center of action should tell you where to look in the source code for any particular
    activity. It should also tell you the general way in which the program acts.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 更普遍地说，你需要从源代码中提取结构。最好的方法是从程序的开始处开始查看源代码（例如，在C程序中的`main`函数）。快速浏览程序，逐步进入函数，直到找到主要的行动中心--在大多数程序中，通常是某种循环。这通常可以很快完成。这个行动中心的性质应该告诉你在源代码中查找特定活动的位置。它还应该告诉你程序的一般行为方式。
- en: The worst cases are large programs written over many years by many different
    people. These often become a hodge-podge of different ideas with little consistency.
    The situation is depressingly common. You must simply do the best you can. At
    least try to avoid making the mess worse.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最糟糕的情况是多年来由许多不同人编写的大型程序。这些通常变成了各种不同想法的混杂，缺乏一致性。这种情况令人沮丧地普遍存在。你只能尽力而为。至少要尽量避免让混乱变得更糟。
- en: When examining a large program, some people find it helpful to use a source
    code analysis tool, such as [Source Navigator](https://sourcenav.sourceforge.net/).
    Personally, I normally rely simply on Emacs tags tables.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查大型程序时，有些人发现使用源代码分析工具（例如[Source Navigator](https://sourcenav.sourceforge.net/)）很有帮助。就我个人而言，我通常简单依赖Emacs的标签表。
- en: A debugger can also be helpful when trying to understand a program. By running
    the program under the debugger and setting breakpoints, you may be able to see
    the dynamic behaviour of the program. When you reach a breakpoint, look at the
    call stack to see how you got there, and look at key variables. Or if you don't
    reach a breakpoint you expected to reach, you've also learned something.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器在试图理解程序时也可能很有帮助。通过在调试器下运行程序并设置断点，你可以看到程序的动态行为。当你到达一个断点时，查看调用堆栈以了解你是如何到达那里的，并查看关键变量。或者如果你没有达到预期的断点，那么你也学到了一些东西。
- en: '* * *'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The next step is to locate the bug in the program source code.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤是定位程序源代码中的错误。
- en: 'There are two source code locations which you need to consider: the code which
    causes the visible incorrect behaviour, and the code which is actually incorrect.
    It''s fairly common for these to be the same pieces of code. However, it''s also
    fairly common for these to be in different parts of the program. A typical example
    of this is when an error in one part of the program causes memory corruption which
    leads to visible bad behaviour in a completely different part of the program.
    Do not let your eagerness to fix the bug mislead you into thinking that the code
    which directly causes the bad behaviour is actually incorrect.'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个源代码位置你需要考虑：引起可见错误行为的代码，以及实际上有问题的代码。这些代码通常是相同的一部分是很常见的。然而，这些代码也往往在程序的不同部分。一个典型的例子是，程序的某一部分中的错误导致内存损坏，从而在程序的完全不同部分导致可见的糟糕行为。不要让你修复
    bug 的急切心情误导你以为直接导致不良行为的代码实际上是错误的。
- en: Ordinarily you must first find the code which causes the incorrect behaviour.
    Knowing the incorrect behaviour, and knowing how the source code is arranged,
    will often lead you quickly to the part of the program which is at fault. Sometimes
    a quick scan of the source code is enough to identify the problematic code.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通常你必须首先找到导致不正确行为的代码。了解不正确的行为，并知道源代码的排列方式，通常会迅速帮助你找到有问题的程序部分。有时，简单扫描源代码就足以识别有问题的代码。
- en: Otherwise, narrowing down the bad behaviour to a particular piece of code is
    where a debugger can be very useful. If you are lucky enough to have a core dump,
    a debugger can immediately identify the line which fails. Otherwise, judiciously
    setting breakpoints while replicating the bug can quickly hone in on the code
    you are after.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，将不良行为缩小到特定代码片段的过程是调试器非常有用的地方。如果你有幸有一个核心转储，调试器可以立即识别失败的行。否则，在复制 bug 时审慎设置断点可以快速锁定你需要的代码。
- en: Modern debuggers, such as gdb, have powerful capabilities to make this process
    more manageable, such as conditional breakpoints, data watchpoints, ignoring breakpoints
    certain numbers of time, and support for executing simple code at breakpoints.
    These features are very useful when locating bad behaviour in code which is executed
    many times, and only fails under particular circumstances. It's a good idea to
    learn the features which your debugger provides.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现代调试器，如 gdb，具有强大的功能，使这一过程更加可管理，如条件断点、数据监视点、忽略特定次数的断点和支持在断点处执行简单代码等。这些功能在定位执行多次但只在特定情况下失败的代码中的不良行为时非常有用。了解你的调试器提供的这些功能是个好主意。
- en: Of course, sometimes a debugger does not help. In some cases, a bug will not
    occur when the program is run under a debugger, even though it can be reliably
    replicated without the debugger; this typically indicates a problem which depends
    upon precise timing or memory layout. In other cases, you may not have access
    to a debugger, or the debugger may not be very powerful; this can happen when
    working on embedded systems or other impoverished programming environments, or
    when using programming features which are not supported by the debugger (for example,
    in some environments, threads).
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有时候调试器也无法帮助。在某些情况下，即使程序在调试器下运行时不会出现 bug，但在没有调试器的情况下可以可靠地重现；这通常表明问题取决于精确的时间或内存布局。在其他情况下，你可能无法访问调试器，或者调试器可能不够强大；这在嵌入式系统或其他资源匮乏的编程环境中常见，或者在使用调试器不支持的编程特性（例如在某些环境中使用线程）时可能会发生。
- en: In such cases simple print statements can sometimes help locate the source of
    the bad behaviour. Add print statements to relevant locations, rebuild the program,
    replicate the problem with the new program, and use the print statements to hone
    in on exactly what code is being executed when the problem occurs. Ideally the
    program already has some sort of logging facility which you can reuse. Even if
    it doesn't, you should consider a systematic approach to the print statements
    you add, so that you can build on that when doing future debugging of the same
    program. In particular, every print statement should clearly indicate where it
    is located in the program, so that it can be quickly found again later.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，简单的打印语句有时可以帮助定位不良行为的来源。在相关位置添加打印语句，重新构建程序，使用新程序复制问题，并使用打印语句精确查找问题发生时执行的代码。理想情况下，程序已经具有某种日志记录设施，您可以重复使用。即使没有，您也应考虑系统化地添加打印语句，以便在将来调试相同程序时建立在此基础上。特别是，每个打印语句都应清楚地指示其在程序中的位置，以便以后可以快速找到。
- en: Another useful approach is to add check routines to the code to verify that
    data structures are in a valid state. Such routines can help narrow down where
    data corruption occurs. If the check routines are fast, you may want to always
    enable them. Otherwise, leave them in the code, and provide some sort of mechanism
    to turn them on when you need them.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种有用的方法是将检查例程添加到代码中，以验证数据结构是否处于有效状态。这些例程可以帮助缩小数据损坏发生的位置。如果检查例程运行速度很快，您可能希望始终启用它们。否则，保留它们在代码中，并提供某种机制，在需要时打开它们。
- en: In the specific case of a memory corruption bug, you may be able to replace
    the standard memory allocation routines with ones that perform various checks.
    For example, on GNU/Linux systems, read the `malloc` documentation to see how
    the environment variable `MALLOC_CHECK_` can be used to do this.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定的内存损坏 bug 情况下，您可以使用执行各种检查的替代标准内存分配例程。例如，在 GNU/Linux 系统上，阅读 `malloc` 文档，了解如何使用环境变量
    `MALLOC_CHECK_` 来执行此操作。
- en: The final fallback for locating the source of the bad behaviour is simple source
    code inspection. This is the only option if you can't replicate the problem. A
    clear understanding of the overall program source code is an absolute requirement
    for this to work. Unfortunately, a complex problem is nearly impossible to isolate
    by simply reading the source code. You will have to guess at likely possibilities,
    and try to trace through the code carefully to see if they are really problems.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 定位不良行为来源的最后退路是简单的源代码检查。如果无法复制问题，这是唯一的选择。对整体程序源代码的清晰理解绝对是使其正常工作的要求。不幸的是，仅通过阅读源代码几乎不可能隔离复杂的问题。您将不得不猜测可能的可能性，并仔细跟踪代码，看看它们是否真的有问题。
- en: If you are very unlucky, the bug may not be in the program source code at all.
    It may be in a library routine, or in the operating system, or in the compiler.
    These cases are rare, and it is a mark of an inexperienced programmer to suspect
    a compiler bug too quickly. However, they do happen--they've all happened to me--so
    when all else fails, consider these possibilities. Verify a bug in a library routine
    or the OS by writing a check program, and verify a bug in the compiler by examining
    the machine code directly.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您非常不幸，bug 可能根本不在程序源代码中。它可能在库例程中、操作系统中或编译器中。这些情况很少见，而且怀疑编译器 bug 过早是一个经验不足的程序员的标志。但是，它们确实发生过--我自己经历过--所以当所有其他方法都失败时，请考虑这些可能性。通过编写检查程序验证库例程或操作系统中的
    bug，并通过直接检查机器代码来验证编译器中的 bug。
- en: '* * *'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Now that you have found the code which causes the bad behaviour, you need to
    identify the actual coding error. Often they are the same code--that is, the coding
    error directly causes the bad behaviour. However, you should always consider the
    possibility that the actual error is elsewhere.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经找到了导致不良行为的代码，您需要确定实际的编码错误。通常它们是同一段代码--也就是说，编码错误直接导致不良行为。但是，您应始终考虑实际错误可能在其他地方的可能性。
- en: For example, the routine which causes the bad behaviour may be behaving correctly,
    but be called with bad input, or at the wrong time. A coding error elsewhere may
    cause a data structure to hold unreasonable values. Another possibility is bad
    user input.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，导致不良行为的例程可能会表现正确，但是在输入错误或错误的时间调用。其他地方的编码错误可能导致数据结构持有不合理的值。另一种可能性是错误的用户输入。
- en: The fix in such cases may be two-fold. You should, of course, fix the code which
    called the routine incorrectly or otherwise created the bad input data. In the
    case of bad user input, you should validate the input. In addition, however, you
    may want to add checks to the code which used the values. It should check for
    unreasonable input, and report an error or otherwise handle the error without
    causing invalid behaviour.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下的修复可能是双重的。当然，你应该修复调用例程错误或以其他方式创建错误输入数据的代码。对于不良用户输入，你应该验证输入。但是，此外，你可能还希望向使用这些值的代码添加检查。它应该检查不合理的输入，并报告错误或以其他方式处理错误，而不会导致无效的行为。
- en: '* * *'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The final step in the debugging process is, of course, to fix the bug. I won't
    discuss this step in detail, as fixing a bug is where you leave the debugging
    phase and return to programming. I'll just mention a couple of points.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 调试过程的最后一步当然是修复错误。我不会详细讨论这一步，因为修复错误意味着您离开调试阶段并回到编程。我只是提一下几点。
- en: If you want a program which can be maintained in the future, then make sure
    you fix the bug in the right way. This means making a fix which fits in with the
    rest of the program, and which fixes all aspects of the problem, without introducing
    any new problems. Don't forget to update any relevant documentation.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望程序在将来可以维护，那么确保以正确的方式修复错误非常重要。这意味着要进行一个符合程序其余部分的修复，并且要修复问题的所有方面，而不引入任何新问题。不要忘记更新所有相关文档。
- en: In some cases you may need a quick patch to fix an immediate problem. There
    is nothing wrong with doing that, as long as you take the time afterward to go
    back and make the right fix.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能需要快速修补以解决一个即时问题。这没有问题，只要您事后花时间回头正确修复它。
- en: Obviously, always test any fix you make by ensuring that you can no longer replicate
    the bad behaviour. Don't forget to make sure that the program continues to pass
    its test suites. Consider extending the test suites to detect the case which you
    just fixed, to make sure it doesn't reappear.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，始终要测试你所做的任何修复，以确保无法再现错误行为。不要忘记确保程序继续通过其测试套件。考虑扩展测试套件以检测你刚刚修复的情况，确保它不会再次出现。
- en: '* * *'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'After you fix the bug, consider whether there is anything you can learn from
    it. Here are some things to think about:'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 修复错误后，请考虑是否可以从中学到些什么。以下是一些需要考虑的事项：
- en: Does the same programming error occur anywhere else in the program?
  id: totrans-split-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种编程错误是否在程序的其他地方也发生？
- en: What new problems might be introduced by the bug fix?
  id: totrans-split-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复错误可能会引入什么新问题？
- en: How could this error have been prevented? What could you have done differently
    such that the bug was not created in the first place? Even some excellent programmers
    repeatedly make characteristic errors; are there types of programming where you
    need to exercise particular care?
  id: totrans-split-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个错误本可以如何预防？你可以做些什么不同的事情，以避免首次创建这个错误？即使是一些优秀的程序员也会反复地犯一些特定的错误；是否有些编程类型需要特别小心？
- en: If you didn't find the bug yourself, could it have been detected sooner? Do
    your testing procedures need improvement? If you have not already done so, can
    you automate the testing? Would it have been possible to use automated code inspection
    tools to find the error?
  id: totrans-split-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你自己没有找到这个错误，它是否可以更早地被检测到？你的测试程序需要改进吗？如果还没有这样做，你能否自动化测试？是否可能使用自动化代码检查工具来找到这个错误？
- en: '* * *'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This essay incorporates suggestions from Jonathan Mark.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本文采纳了Jonathan Mark的建议。
- en: '* * *'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
