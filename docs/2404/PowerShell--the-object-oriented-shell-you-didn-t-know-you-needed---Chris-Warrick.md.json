["```\nPS C:\\tmp\\hello> dir\n\n    Directory: C:\\tmp\\hello\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd----          2024-04-29    18:00                world\n-a---          2024-04-29    18:00             23 example.py\n-a---          2024-04-29    18:00              7 foobar.txt\n-a---          2024-04-29    18:00             14 helloworld.txt\n-a---          2024-04-29    18:00              0 newfile.txt\n-a---          2024-04-29    18:00              5 test.txt\n\n```", "```\n7  foobar.txt\n14  helloworld.txt\n0  newfile.txt\n5  test.txt\n26  total\n\n```", "```\nPS C:\\tmp\\hello> $x = dir\nPS C:\\tmp\\hello> $x[0]\n\n    Directory: C:\\tmp\\hello\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd----          2024-04-29    18:00                world\n\n```", "```\nPS C:\\tmp\\hello> $x[1]\n\n    Directory: C:\\tmp\\hello\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a---          2024-04-29    18:00             23 example.py\n\n```", "```\nPS C:\\tmp\\hello> $x[1].Length\n23\n\n```", "```\nPS C:\\tmp\\hello> Get-ChildItem -Filter '*.txt' |\n  ForEach-Object { $_.Length } |\n  Measure-Object -Sum\n\nCount             : 4\nAverage           :\nSum               : 26\nMaximum           :\nMinimum           :\nStandardDeviation :\nProperty          :\n\nPS C:\\tmp\\hello> (Get-ChildItem -Filter '*.txt' |\n  ForEach-Object { $_.Length } |\n  Measure-Object -Sum).Sum\n26\nPS C:\\tmp\\hello> (Get-ChildItem -Filter '*.txt' |\n  Measure-Object -Sum -Property Length).Sum\n26\nPS C:\\tmp\\hello> (Get-ChildItem -Recurse -Filter '*.txt' |\n  Measure-Object -Sum -Property Length).Sum\n30\nPS C:\\tmp\\hello> $measured = (Get-ChildItem -Recurse -Filter '*.txt' |\n  Measure-Object -Sum -Property Length)\nPS C:\\tmp\\hello> $measured.Sum / $measured.Count\n6\n\n```", "```\nPS C:\\tmp> Get-ChildItem Photos/*/*.jpg |\n  Group-Object { $_.Directory.Name } |\n  Sort-Object -Property Count -Descending\nCount Name                      Group\n----- ----                      -----\n   10 foo bar                   {C:\\tmp\\Photos\\foo bar\\img001.jpg, C:\\tmp\\Photos\\foo bar\\img002.jpg, C:\\tmp\\Photos\\foo bar\\img003.jpgâ€¦}\n    2 example                   {C:\\tmp\\Photos\\example\\img101.jpg, C:\\tmp\\Photos\\example\\img201.jpg}\n\n```", "```\n# Fully spelled out\nGet-ChildItem -Recurse -File |\n  Group-Object { $_.Length } |\n  Where-Object { $_.Count -gt 1 } |\n  ForEach-Object { $_.Group } |\n  Group-Object { (Get-FileHash -Algorithm MD5 $_).Hash } |\n  Where-Object { $_.Count -gt 1 }\n\n# Using aliases\ngci -Recurse -File |\n  group { $_.Length } |\n  where { $_.Count -gt 1 } |\n  foreach { $_.Group } |\n  group { (Get-FileHash -Algorithm MD5 $_).Hash } |\n  where { $_.Count -gt 1 }\n\n# Using less readable aliases\ngci -Recurse -File |\n  group { $_.Length } |\n  ? { $_.Count -gt 1 } |\n  % { $_.Group } |\n  group { (Get-FileHash -Algorithm MD5 $_).Hash } |\n  ? { $_.Count -gt 1 }\n\n```", "```\n$ErrorActionPreference = \"Stop\" # stop execution on any error\nSet-StrictMode -Version 3.0\n\nfunction Get-CsprojPackages([string]$Path) {\n  return Select-Xml -Path $Path -XPath '//PackageReference' |\n    ForEach-Object {\n      [PSCustomObject]@{\n        Name = $_.Node.GetAttribute(\"Include\")\n        Version = $_.Node.GetAttribute(\"Version\")\n        Source = 'nuget'\n        License = 'TODO'\n      }\n    }\n}\n\nfunction Get-NodePackages([string]$Path) {\n  $nameToVersion = (Get-Content -Raw $Path | ConvertFrom-Json).dependencies\n  return $nameToVersion.psobject.Properties | ForEach-Object {\n    [PSCustomObject]@{\n      Name = $_.Name\n      Version = $_.Value\n      Source = 'node'\n      License = (Get-NodeLicense -Name $_.Name)\n    }\n  }\n}\n\nfunction Get-NodeLicense([string]$Name) {\n  try {\n    return (Invoke-RestMethod -TimeoutSec 3\n      \"https://registry.npmjs.org/$Name\").license\n  } catch {\n    return \"???\"\n  }\n}\n\n$csprojData = @(Get-ChildItem -Recurse -Filter '*.csproj' |\n  ForEach-Object { Get-CsprojPackages $_.FullName })\n\n$nodeData = @(Get-ChildItem -Recurse -Filter 'package.json' |\n  Where-Object { $_.FullName -notlike '*node_modules*' } |\n  ForEach-Object { Get-NodePackages $_.FullName })\n\n$allData = $csProjData + $nodeData\n$allData | ConvertTo-Csv -NoTypeInformation | Tee-Object sbom.csv\n\n```", "```\n\"Name\",\"Version\",\"Source\",\"License\"\n\"AWSSDK.S3\",\"3.7.307.24\",\"nuget\",\"TODO\"\n\"Microsoft.AspNetCore.SpaProxy\",\"7.0.17\",\"nuget\",\"TODO\"\n\"@testing-library/jest-dom\",\"^5.17.0\",\"node\",\"MIT\"\n\"@testing-library/react\",\"^13.4.0\",\"node\",\"MIT\"\n\"@testing-library/user-event\",\"^13.5.0\",\"node\",\"MIT\"\n\"@types/jest\",\"^27.5.2\",\"node\",\"MIT\"\n\"@types/node\",\"^16.18.96\",\"node\",\"MIT\"\n\"@types/react\",\"^18.3.1\",\"node\",\"MIT\"\n\"@types/react-dom\",\"^18.3.0\",\"node\",\"MIT\"\n\"react\",\"^18.3.1\",\"node\",\"MIT\"\n\"react-dom\",\"^18.3.1\",\"node\",\"MIT\"\n\"react-scripts\",\"5.0.1\",\"node\",\"MIT\"\n\"typescript\",\"^4.9.5\",\"node\",\"Apache-2.0\"\n\"web-vitals\",\"^2.1.4\",\"node\",\"Apache-2.0\"\n\n```", "```\nPS> $set = New-Object System.Collections.Generic.HashSet[string]\nPS> $set.Add(\"hello\")\nTrue\nPS> $set.Add(\"hello\")\nFalse\nPS> $set.Add(\"world\") | Out-Null\nPS> $set.Count\n2\nPS> $set -contains \"hello\"\nTrue\nPS> $set -contains \"world\"\nFalse\n\n```", "```\n$ie = New-Object -ComObject InternetExplorer.Application\n$ie.Visible = $true\n\n```", "```\n$c = Get-Volume C\n\"$(($c.SizeRemaining / $c.Size) * 100)%\"\n\n```", "```\n$changes = (git status --porcelain --null)\nif ($LASTEXITCODE -eq 128) {\n  throw \"Not a git repository\"\n} elseif ($LASTEXITCODE -ne 0) {\n  throw \"Getting changes from git failed\"\n}\n\nif ($null -eq $changes) {\n  Write-Host \"No changes found\"\n} else {\n  $untrackedFiles = @(\n    $changes.Split(\"`0\") |\n    Where-Object { $_.StartsWith('?? ') } |\n    ForEach-Object { $_.Remove(0, 3) }\n  )\n\n  # Alternate spelling for regex fans:\n  $untrackedFilesForRegexFans = @(\n    $changes.Split(\"`0\") |\n    Where-Object { $_ -match '^\\?\\? ' } |\n    ForEach-Object { $_ -replace '^\\?\\? ','' }\n  )\n\n  if ($untrackedFiles) {\n    Write-Host \"Opening $($untrackedFiles.Length) untracked files in VS Code\"\n    code $untrackedFiles\n  } else {\n    Write-Host \"No untracked files\"\n  }\n}\n\n```", "```\nSet-PSReadLineOption -HistorySearchCursorMovesToEnd\nSet-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward\nSet-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward\nSet-PSReadlineKeyHandler -Key ctrl+d -Function DeleteCharOrExit\nSet-PSReadlineKeyHandler -Key Tab -Function MenuComplete\nSet-PSReadLineOption -AddToHistoryHandler {\n  param($command)\n  # Commands starting with space are not remembered.\n  return -not ($command -like ' *')\n}\n\n```"]