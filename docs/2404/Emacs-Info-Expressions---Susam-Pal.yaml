- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:13:25'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Emacs Info Expressions - Susam Pal
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://susam.net/emacs-info-expressions.html](https://susam.net/emacs-info-expressions.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <main>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: Emacs Info Expressions
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By **Susam Pal** on 12 Apr 2024
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: 'On `#emacs` IRC or Matrix channels, we often share references to the built-in
    Emacs documentation as Elisp expressions that look like this:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
- en: 'Here is another example:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
- en: 'This is a common practice in the Emacs channels even though all of the Emacs
    manual is available on the world wide web too. For example, the section referred
    to in the above expression is available here: [GNU Emacs Manual: Word Search](https://www.gnu.org/software/emacs/manual/html_node/emacs/Word-Search.html).
    The reason for sharing Elisp expressions like this is likely partly tradition
    and partly convenience. Many Emacs users are logged into IRC networks via Emacs
    itself, so once the recipient sees an Elisp expression like the above one in their
    chat buffer, visiting the corresponding manual page is a simple matter of placing
    the cursor right after the closing parenthesis and typing `C-x C-e`.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: But isn't it clumsy for the sender to type Elisp expressions like this merely
    to share a pointer to a section of a manual with others? Turns out, it is not.
    This is Emacs! So of course there are key-bindings to do this.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: Copy Info Node Name
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Say, while helping another Emacs user we type `M-x info-apropos RET version
    control RET` and land on the section "Branches" and realise that this is the section
    that the person we are trying to help should read. Now when we are on this section,
    we can simply type `c` and Emacs will copy the name of the current Info node to
    the kill ring. This name looks like this:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
- en: 'Now we can go to the `*scratch*` buffer (or any buffer), copy the node name,
    and complete the `info` expression manually. For example, we could type the following
    key sequence on a fresh new line to create the Elisp expression and copy it to
    the kill ring:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
- en: 'On vanilla Emacs, the above rather long key sequence first types two double-quotes
    next to each other (`" "`), then moves the cursor back to go within the double-quotes
    (`C-b`), then pastes the text `(emacs) Branches` from the kill ring (`C-y`), then
    selects the pasted text (`C-a C-SPC C-e`), then surrounds it within parentheses
    (`M-(`), then inserts the text `info` just after the opening parentheses, and
    finally copies the resulting expression to the kill ring (`C-a C-k C-/`). The
    expression copied to the kill ring looks like this:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
- en: Can we avoid constructing the `info` expression manually and have Emacs do it
    for us? Turns out we can as we see in the next section.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: Copy Info Expression
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I recently learnt from [Karthink](https://karthinks.com/) and [Mekeor Melire](https://mastodon.social/@mekeor@catgirl.cloud)
    that we can ask Emacs to create the entire `info` expression automatically for
    us. All we need to do is use the zero prefix argument with the `c` key. So when
    we are on section "Branches", if we type `C-0 c`, the following expression is
    copied to the kill ring:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
- en: 'I should have known this because indeed while we are in the Info documentation
    browser, if we type `C-h k c` to describe the key sequence `c`, we see the following
    documentation:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
- en: 'So indeed Emacs has a convenient key sequence to create the complete `info`
    expression for the current Info node. The person who receives this `info` expression
    can visit the corresponding section of the manual simply by evaluating it. For
    example, after copying the expression in Emacs, they could simply type `C-y C-x
    C-e` to paste the expression into a buffer and evaluate it immediately. Alternatively,
    they might want to type `M-: C-y RET` to bring the `eval-expression` minibuffer,
    paste the expression, and evaluate it.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: </main>
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
