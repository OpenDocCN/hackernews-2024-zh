- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:36:12'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:36:12'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 4 Software Design Principles I Learned the Hard Way
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我学到的4个软件设计原则的艰辛经验
- en: 来源：[https://read.engineerscodex.com/p/4-software-design-principles-i-learned](https://read.engineerscodex.com/p/4-software-design-principles-i-learned)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://read.engineerscodex.com/p/4-software-design-principles-i-learned](https://read.engineerscodex.com/p/4-software-design-principles-i-learned)
- en: '*Engineer’s Codex is a publication about real-world software engineering.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*《工程师法典》是一本关于真实世界软件工程的出版物。*'
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: I recently built and designed a massive service that (finally) launched successfully
    last month. During the design and implementation process, I found that the following
    list of “rules” kept coming back up over and over in various scenarios.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近设计并成功推出了一个大型服务。在设计和实施过程中，我发现以下这些“规则”在各种场景中一次又一次地回到了我的视线。
- en: These rules are common enough that I daresay that at least one of them will
    be useful for a project that any software engineers reading this are *currently*
    working on. But if you can’t apply it directly now, I hope that these principles
    are a useful thought exercise that you are free to comment on below or challenge
    directly too.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则是足够常见的，我敢说至少其中一个对任何正在*当前*工作的软件工程师的项目都会有所帮助。但如果你现在无法直接应用它，我希望这些原则能成为一个有用的思考练习，欢迎在下方评论或直接挑战。
- en: One thing I will note here is that of course - each “principle” has a time and
    place. Nuance is necessary, as always. These are conclusions that I find myself
    erring towards *in general* because oftentimes, *the opposite that is the default*
    that I see when I’m reviewing code or reading design docs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我要注意的一件事当然是 - 每一个“原则”都有其时间和场合。细微之处是必要的，一如既往。这些结论通常是我在审查代码或阅读设计文档时*总体*而言偏向的结论，因为往往*相反即默认*。
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: To be a top software engineer, you need to know a lot. But how do you know what
    you don't know? **[SWE Quiz](https://swequiz.com/?utm_source=codex) is a compilation
    of 450+ software engineering and system design questions covering databases, authentication,
    caching, etc.**
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要成为顶级软件工程师，你需要了解很多。但你又怎么知道自己不知道什么呢？**[SWE测验](https://swequiz.com/?utm_source=codex)**是一个汇编了450多个涵盖数据库、认证、缓存等软件工程和系统设计问题的测验。
- en: '**They’ve been created by engineers from Google, Meta, Apple, and more.**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**它们是由来自Google、Meta、Apple等公司的工程师们创造的。**'
- en: It’s helped many of my peers (including myself) pass the “software trivia questions”
    during interviews and feel more confident at work.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 它帮助了我和我的同行（包括我自己）在面试中通过“软件琐事问题”，并在工作中感到更自信。
- en: '[Get Lifetime Access to SWE Quiz](https://swequiz.com)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[获取终身访问SWE测验](https://swequiz.com)'
- en: '* * *'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: If there’s two sources of truth, one is probably wrong. If it’s not wrong, it’s
    not wrong… yet.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有两个真理源，其中一个可能是错误的。如果它不是错误的，它暂时不是错误的…
- en: Basically, if you’re trying to maintain a piece of state in two different locations
    within the same service… just don’t. It’s better to try to just reference the
    same state wherever you can. For example, if you’re maintaining a frontend application
    and have a bank balance that is from the server, I’ve seen enough sync bugs in
    my time that I always want to get that balance from the server. If there is some
    balance that is derived from that, such as “spendable balance” versus “total”
    (for example, some banks make you keep a minimum balance), then that “spendable
    balance” should be derived on-the-fly rather than stored separately. Else, you’ll
    now have to update both balances whenever a transaction happens.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，如果你试图在同一个服务内的两个不同位置维护一个状态…… 最好不要这样做。最好的方式是尽可能在任何地方引用相同的状态。例如，如果你在维护一个前端应用并且有一个来自服务器的银行余额，我在这段时间里见过足够多的同步错误，以至于我总是希望从服务器获取那个余额。如果有一些由此派生的余额，比如“可支配余额”与“总余额”（例如，一些银行要求你保留最低余额），那么“可支配余额”应该是实时派生的，而不是分开存储。否则，每次发生交易时你现在必须更新这两个余额。
- en: In general, if there is a piece of data that is derived from another value,
    then that value should be derived rather than stored. Storing that value leads
    to synchronization bugs. (Yes, I know this isn’t always possible. There will always
    be other factors in play, like the expense of the derivation. At the end of the
    day, it’s a tradeoff.)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果有一个数据是由另一个值派生出来的，那么应该派生出那个值，而不是存储它。存储这个值会导致同步错误。（是的，我知道这并不总是可能的。总会有其他因素起作用，比如派生的费用。归根结底，这是一个权衡。）
- en: We’ve heard of DRY (Don’t Repeat Yourself) and now I present to you PRY (Please
    Repeat Yourself).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们听说过 DRY（不要重复自己），现在我向你介绍 PRY（请重复自己）。
- en: Far too many times I’ve seen code that looks *mostly* the same try to get abstracted
    out into a “re-usable” class. The problem is, this “re-usable” class gets one
    method added to it, then a special constructor, then a few more methods, until
    it’s this giant Frankenstein of code that serves multiple different purposes and
    the original purpose of the abstraction no longer exists.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 太多次我见过的代码*大部分*看起来相同，试图被抽象成一个“可重用”的类。问题是，这个“可重用”的类增加了一个方法，然后是一个特殊的构造函数，接着又是几个方法，最终它成为了一个巨大的代码怪物，服务于多种不同的目的，原始的抽象目的不复存在。
- en: A pentagon may be *similar-looking* to a hexagon, but there is still enough
    of a difference that they are *absolutely not the same*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个五边形可能看起来与六边形*相似*，但它们之间还是有足够的差异，所以它们*绝对不是同一个*。
- en: I’m also guilty of spending way too much time trying to make things reusable,
    when a bit of code duplication works perfectly fine. (Yes, you have to write more
    tests and it doesn’t scratch the “refactoring” itch, but oh well.)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我也有过花费过多时间试图使事物可重用的罪名，而一点代码重复也能完美地运行。 （是的，你必须编写更多的测试，它不能满足“重构”的欲望，但嗯，没办法。）
- en: Mocks. I have a love-hate relationship with mocks. My favorite one-liner from
    a [Reddit](https://www.reddit.com/r/programming/comments/1cckf07/comment/l1b66ok/)
    discussion about this post was “with mocks, we sell test fidelity for ease of
    testing.”
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟对象。我对模拟对象有爱恨交加的感觉。我在一篇[Reddit](https://www.reddit.com/r/programming/comments/1cckf07/comment/l1b66ok/)关于这篇文章的讨论中最喜欢的一句话是：“使用模拟对象，我们为了测试的便利性而牺牲了测试的真实性。”
- en: Mocks are great when I have to write unit tests to test something quickly and
    don’t want to mess with “prod-level” code. Mocks are not great when prod breaks
    because as it turns out - something you mocked broke deeper down the stack, even
    though that “deeper down the stack” is owned by another team. It doesn’t matter
    because it was your service that broke so it's your responsibility to fix it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当我必须快速编写单元测试并且不想与“生产级”代码混在一起时，模拟对象非常有用。但是，当生产环境发生故障时，模拟对象并不好用，因为事实证明 - 你模拟的东西在更深层次的堆栈中出了问题，即使这个“更深层次的堆栈”是由另一个团队拥有也无所谓，因为是你的服务出了问题，所以你有责任修复它。
- en: Writing tests is hard. The line between unit tests and integration tests is
    blurrier than you think. Knowing what to mock and not mock is subjective.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 编写测试很难。单元测试和集成测试之间的界限比你想象的更模糊。知道什么时候使用模拟对象和不使用模拟对象是主观的。
- en: It’s much nicer to find things while developing rather than in prod. As I continue
    writing software, I try to stay away from mocks if possible. Tests being a bit
    more heavyweight is completely worthwhile when it comes to a much higher reliability.
    If mocks are really required by my code reviewer, I’d rather write more (and maybe
    even redundant) tests rather than skip out on tests. Even if I can’t use a real
    dependency in a test, I will still try to use other options first before mocks,
    like a local server.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 开发过程中找到问题比在生产环境中找到问题要好得多。随着我继续编写软件，我尽可能地避免使用模拟对象。当可靠性要求更高时，测试变得更加重量级完全是值得的。如果我的代码审阅者真的要求使用模拟对象，我宁愿写更多（甚至可能是冗余的）测试，也不愿跳过测试。即使我在测试中不能使用真实的依赖，我仍会尝试先使用其他选项，而不是模拟对象，比如本地服务器。
- en: '[Google’s “Testing on the Toilet” has a good note on this from 2013.](https://testing.googleblog.com/2013/05/testing-on-toilet-dont-overuse-mocks.html)
    They note that overusing mocks causes:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[Google 的《厕所上的测试》在2013年有一篇很好的笔记。](https://testing.googleblog.com/2013/05/testing-on-toilet-dont-overuse-mocks.html)
    他们指出，过度使用模拟对象会导致：'
- en: Computers are VERY fast. In the optimization game, it’s super popular to instantly
    throw caching and store everything in a database immediately. I think this is
    probably the *end state* of most successful software products and services. Of
    course, most services will need some sort of state, but it’s important to figure
    out what is truly necessary storage-wise versus what can be derived on-the-fly.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机速度非常快。在优化游戏中，立即投入缓存并将所有内容存储在数据库中变得非常流行。我认为这可能是大多数成功的软件产品和服务的*最终状态*。当然，大多数服务都需要某种状态，但重要的是要弄清楚什么是真正必要的存储需求，以及什么可以动态衍生。
- en: In the “v1” of something, I’ve found that minimizing as much mutable state as
    possible gets you pretty far. It lets you develop faster because you don’t have
    to worry about sync bugs, conflicting data, and stale state. It also lets you
    develop functionality piece-by-piece, rather than introducing too much at once.
    Machines are fast enough today where doing a few redundant calculations is totally
    fine. If machines are supposedly “replacing us” soon, then they can handle a few
    extra work units of calculations.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在某事物的“v1”版本中，我发现尽量减少可变状态可以让你走得更远。它让你开发更快，因为你不必担心同步错误、数据冲突和过时状态。它还让你可以逐步开发功能，而不是一次性引入太多内容。今天的机器速度已经足够快，所以做一些多余的计算完全没问题。如果机器很快就要“取代我们”，那么它们可以处理几个额外的工作单位的计算量。
