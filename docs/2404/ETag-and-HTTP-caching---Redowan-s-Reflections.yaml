- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:04:46'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: ETag and HTTP caching | Redowan's Reflections
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://rednafi.com/misc/etag_and_http_caching/](https://rednafi.com/misc/etag_and_http_caching/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: One neat use case for the HTTP `ETag` header is client-side HTTP caching for
    `GET` requests. Along with the `ETag` header, the caching workflow requires you
    to fiddle with other conditional HTTP headers like `If-Match` or `If-None-Match`.
    However, their interaction can feel a bit confusing at times.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: Every time I need to tackle this, I end up spending some time browsing through
    the relevant MDN docs ^(^(^(to jog my memory. At this point, I’ve done it enough
    times to justify spending the time to write this.)))
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: Caching the response of a `GET` endpoint[#](#caching-the-response-of-a-get-endpoint)
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The basic workflow goes as follows:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: The client makes a `GET` request to the server.
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server responds with a `200 OK` status, including the content requested
    and an `ETag` header.
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client caches the response and the `ETag` value.
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For subsequent requests to the same resource, the client includes the `If-None-Match`
    header with the `ETag` value it has cached.
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server regenerates the `ETag` independently and checks if the `ETag` value
    sent by the client matches the generated one.
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If they match, the server responds with a `304 Not Modified` status, indicating
    that the client’s cached version is still valid, and the client serves the resource
    from the cache.
  id: totrans-split-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If they don’t match, the server responds with a `200 OK` status, including the
    new content and a new `ETag` header, prompting the client to update its cache.
  id: totrans-split-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can test this workflow with GitHub’s REST API suite via the GitHub CLI^(.
    If you’ve installed the CLI and authenticated yourself, you can make a request
    like this:)
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: 'This asks for the data associated with the user `rednafi`. The response looks
    as follows:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I’ve truncated the response body and omitted the headers that aren’t relevant
    to this discussion. You can see that the HTTP status code is `200 OK` and the
    server has included an `ETag` header.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: The `W/` prefix indicates that a weak validator ^(is used to validate the content
    of the cache. Using a weak validator means when the server compares the response
    payload to generate the hash, it doesn’t do it bit-by-bit. So, if your response
    is JSON, then changing the format of the JSON won’t change the value of the `ETag`
    header since two JSON payloads with the same content but with different formatting
    are semantically the same thing.)
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see what happens if we make the same request again while passing the value
    of the `ETag` in the `If-None-Match` header.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This returns:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This means that the cached response in the client is still valid and it doesn’t
    need to refetch that from the server. So, the client can be coded to serve the
    previously cached data to the users when asked for.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: 'A few key points to keep in mind:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: Always wrap your `ETag` values in double quotes when sending them with the `If-None-Match`
    header, just as the spec says^.
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在发送具有`If-None-Match`头的`ETag`值时，始终将您的`ETag`值包装在双引号中，就像规范所述^。
- en: Using the `If-None-Match` header to pass the `ETag` value means that the client
    request is considered successful when the `ETag` value from the client doesn’t
    match that of the server. When the values match, the server will return `304 Not
    Modified` with no body.
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`If-None-Match`头传递ETag值意味着当来自客户端的ETag值与服务器的不匹配时，客户端请求被视为成功。当值匹配时，服务器将返回`304
    Not Modified`，并且没有正文。
- en: If we’re writing a compliant server, when it comes to `If-None-Match`, the spec
    tells us ^(to use a weak comparison for ETags. This means that the client will
    still be able to validate the cache with weak ETags, even if there have been slight
    changes to the representation of the data.)
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们正在编写一个符合规范的服务器，当涉及到`If-None-Match`时，规范告诉我们^对ETag使用弱比较。这意味着即使数据表示中有轻微变化，客户端仍然可以使用弱ETag验证缓存。
- en: If the client is a browser, it’ll automatically manage the cache and send conditional
    requests without any extra work.
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果客户端是浏览器，它会自动管理缓存并发送条件请求，无需额外操作。
- en: Writing a server that enables client-side caching[#](#writing-a-server-that-enables-client-side-caching)
  id: totrans-split-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 撰写一个允许客户端缓存的服务器[#](#writing-a-server-that-enables-client-side-caching)
- en: If you’re serving static content, you can configure your load balancer to enable
    this caching workflow. But for dynamic `GET` requests, the server needs to do
    a bit more work to allow client-side caching.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您提供静态内容，可以配置负载均衡器以启用此缓存工作流程。但对于动态`GET`请求，服务器需要做更多工作以允许客户端缓存。
- en: 'Here’s a simple server in Go that enables the above workflow for a dynamic
    `GET` request:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个简单的Go服务器，用于动态`GET`请求的上述工作流程：
- en: '[PRE4]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The server generates a weak `ETag` for its content by creating a SHA-256 hash
    and adding `W/` to the front, indicating it’s meant for weak comparison.
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器通过创建SHA-256哈希为其内容生成弱`ETag`，并在前面加上`W/`来表示它用于弱比较。
- en: You could make the `calculateETag` function format-agnostic, so the hash stays
    the same if the JSON format changes but the content does not. The current `calculateETag`
    implementation is susceptible to format changes, and I kept it that way to keep
    the code shorter.
  id: totrans-split-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使`calculateETag`函数与格式无关，这样如果JSON格式更改但内容不变，哈希值仍然相同。当前的`calculateETag`实现容易受格式更改的影响，但我保留了这一点以保持代码简短。
- en: When delivering content, the server includes this weak `ETag` in the response
    headers, allowing clients to cache the content along with the `ETag`.
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在传递内容时，服务器在响应头中包含这个弱`ETag`，允许客户端缓存内容和`ETag`一起。
- en: For subsequent requests, the server checks if the client has sent an `ETag`
    in the `If-None-Match` header and weakly compares it with the current content’s
    `ETag` by independently generating the hash.
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于后续请求，服务器会检查客户端是否在`If-None-Match`头中发送了一个`ETag`，并通过独立生成哈希来弱比较当前内容的`ETag`。
- en: If the ETags match, indicating no significant content change, the server replies
    with a `304 Not Modified` status. Otherwise, it sends the content again with a
    `200 OK` status and updates the `ETag`. When this happens, the client knows that
    the existing cache is still warm and can be served without any changes to it.
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果ETag匹配，表示内容没有显著更改，服务器以`304 Not Modified`状态回复。否则，它以`200 OK`状态重新发送内容并更新`ETag`。当这种情况发生时，客户端知道现有缓存仍然有效，可以无需更改地提供服务。
- en: 'You can spin up the server by running `go run main.go` and from a different
    console, start making requests to it like this:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行`go run main.go`来启动服务器，然后从不同的控制台开始像这样进行请求：
- en: '[PRE5]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will return the `ETag` header along with the JSON response:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将与JSON响应一起返回`ETag`头：
- en: '[PRE6]'
  id: totrans-split-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, you can make another request with the value of
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用以下值进行另一个请求
- en: 'the `ETag` in the `If-None-Match` header:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`If-None-Match`头中的ETag：'
- en: '[PRE7]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will return a `304 Not Modified` response with no body:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个`304 Not Modified`响应，无需正文：
- en: '[PRE8]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In a real-life scenario, you’ll probably factor out the caching part in middleware
    so that all of your HTTP `GET` requests can be cached from the client-side without
    repetition.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际情况下，您可能会将中间件中的缓存部分提取出来，以便所有HTTP`GET`请求都可以从客户端缓存中获取，避免重复。
- en: One thing to look out for[#](#one-thing-to-look-out-for)
  id: totrans-split-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有一件事需要注意[#](#one-thing-to-look-out-for)
- en: While writing a cache-enabled server, make sure the system is set up so that
    the server always sends back the same `ETag` for the same content, even when there
    are multiple servers working behind a load balancer. If these servers give out
    different ETags for the same content, it can mess up how clients cache that content.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写支持缓存的服务器时，确保系统设置使服务器对于相同内容始终返回相同的`ETag`，即使多个服务器在负载均衡器后面工作。如果这些服务器对于相同内容给出不同的ETag，会影响客户端如何缓存该内容。
- en: Clients use ETags to decide if content has changed. If the `ETag` value hasn’t
    changed, they know the content is the same and don’t download it again, saving
    bandwidth and speeding up access. But if ETags are inconsistent across servers,
    clients might download content they already have, wasting bandwidth and slowing
    things down.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端使用ETag来判断内容是否已更改。如果`ETag`值未更改，他们知道内容相同，就不会再次下载，节省带宽并加快访问速度。但是如果服务器之间的ETag不一致，客户端可能会下载已经存在的内容，浪费带宽并降低速度。
- en: This inconsistency also means servers end up dealing with more requests for
    content that clients could have just used from their cache if ETags were consistent.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这种不一致性也意味着服务器最终会处理更多的内容请求，而客户端本可以直接从缓存中使用这些内容，如果ETag是一致的话。
- en: Recent posts
  id: totrans-split-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最近的帖子
- en: '[Protobuffed contracts](https://rednafi.com/misc/protobuffed_contracts/)*   [TypeIs
    does what I thought TypeGuard would do in Python](https://rednafi.com/python/typeguard_vs_typeis/)*   [Crossing
    the CORS crossroad](https://rednafi.com/misc/crossing_the_cors_crossroad/)*   [Dysfunctional
    options pattern in Go](https://rednafi.com/go/dysfunctional_options_pattern/)*   [Einstellung
    effect](https://rednafi.com/zephyr/einstellung_effect/)*   [Strategy pattern in
    Go](https://rednafi.com/go/strategy_pattern/)*   [Anemic stack traces in Go](https://rednafi.com/go/anemic_stack_traces/)*   [Retry
    function in Go](https://rednafi.com/go/retry_function/)*   [Type assertion vs
    type switches in Go](https://rednafi.com/go/type_assertion_vs_type_switches/)*   [Patching
    pydantic settings in pytest](https://rednafi.com/python/patch_pydantic_settings_in_pytest/)'
  id: totrans-split-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Protobuf协议的契约](https://rednafi.com/misc/protobuffed_contracts/)*   [TypeIs在Python中做了我以为TypeGuard会做的事情](https://rednafi.com/python/typeguard_vs_typeis/)*   [跨越CORS的十字路口](https://rednafi.com/misc/crossing_the_cors_crossroad/)*   [Go语言中的功能不全选项模式](https://rednafi.com/go/dysfunctional_options_pattern/)*   [艾因斯特效应](https://rednafi.com/zephyr/einstellung_effect/)*   [Go语言中的策略模式](https://rednafi.com/go/strategy_pattern/)*   [Go语言中的贫血堆栈跟踪](https://rednafi.com/go/anemic_stack_traces/)*   [Go语言中的重试函数](https://rednafi.com/go/retry_function/)*   [Go语言中的类型断言与类型开关](https://rednafi.com/go/type_assertion_vs_type_switches/)*   [在pytest中修补pydantic设置](https://rednafi.com/python/patch_pydantic_settings_in_pytest/)'
