- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:33:39'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Chris''s Wiki :: blog/sysadmin/FindPruningThingsOut'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://utcc.utoronto.ca/~cks/space/blog/sysadmin/FindPruningThingsOut](https://utcc.utoronto.ca/~cks/space/blog/sysadmin/FindPruningThingsOut)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Suppose that you need to scan your filesystems and pass some files with specific
    names, ownerships, or whatever, except that you want to exclude scanning under
    /tmp and /var/tmp (as illustrative examples). Perhaps also you're feeding the
    file names to a shell script, especially in a pipeline, which means that you'd
    like to screen out directory and file names that have (common) problem characters
    in them, like spaces.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: (If you can use Bash for your shell script, the latter problem can be dealt
    with because you can get Bash to read NUL-terminated lines that can be produced
    by 'find ... -print0'.)
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: 'Excluding things from ''`find`'' results is done with find''s -prune action,
    which is a little bit tricky to use when you want to exclude absolute paths (well
    okay it''s a little bit tricky in general; see [this SO question and answers](https://stackoverflow.com/questions/1489277/how-to-use-prune-option-of-find-in-sh)).
    To start with, you''re going to want to generate a list of filesystems and then
    scan them by absolute path:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-9
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'Starting with an absolute path to the filesystem (instead of cd''ing into the
    root of the filesystem and doing ''`find . -xdev [...]`'' means that we can now
    use absolute paths in find''s -path argument instead of ones relative to the filesystem
    root:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-11
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: With absolute paths, we don't have to worry about what if /var or /tmp (or /var/tmp)
    are separate filesystems, instead of being directories on the root filesystem.
    Although it's hard to work out without experimentation, -xdev and -prune combine
    the way we want.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: (If we're running '`find`' on a filesystem that doesn't contain either /tmp
    or /var/tmp, we'll waste a bit of CPU time having '`find`' evaluate those -path
    arguments all the time despite it never being possible for them to match. This
    is unimportant when compared to having a simpler, less error prone script.)
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to exclude paths with spaces in them, this is easily done with ''`-name
    "* *"`''. If we want to get all whitespace, we need [GNU Find](https://man7.org/linux/man-pages/man1/find.1.html)
    and its ''-regex'' argument, documented best in ["Regular Expressions" in the
    info documentation](https://www.gnu.org/software/findutils/manual/html_mono/find.html#Regular-Expressions).
    Because we want to use [a character class](https://www.gnu.org/software/grep/manual/html_node/Character-Classes-and-Bracket-Expressions.html)
    to match whitespace, we need to use one of the regular expression types that include
    this, so:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: On the whole, '`find`' is an awkward tool to use for this sort of filtering.
    Unfortunately it's sometimes what we turn to because our other options involve
    things like writing programs that consume and filter NUL-terminated file paths.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: (And having '`find`' skip entire directory trees is more efficient than letting
    it descend into them, print all their file paths, and then filtering the file
    paths out later.)
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: 'PS: One of the little annoyances of Unix for system administrators is that
    so many things in a stock Unix environment fall apart the moment people start
    putting odd characters in file names, unless you take extreme care and use unusual
    tools. This often affects sysadmins because we frequently have to deal with other
    people''s almost arbitrary choices of file and directory names, and we may be
    dealing with actively malicious attackers for extra concern.'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Sidebar: Reading null-terminated lines in Bash'
  id: totrans-split-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Bash''s version of the ''`read`'' builtin](https://www.gnu.org/software/bash/manual/bash.html#index-read)
    supports a ''-d'' argument that can be used to read NUL-terminated lines:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-21
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: You still have to properly quote `"$line"` in every single use, especially as
    you're doing this because you expect your lines to (or filenames) to sometimes
    contain troublesome characters. You should definitely use [Shellcheck](http://www.shellcheck.net/)
    and pay close attention to its warnings ([they're good for you](/~cks/space/blog/programming/ShellcheckGoodForMe)).
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
