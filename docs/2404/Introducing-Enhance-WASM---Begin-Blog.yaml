- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:07:55'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Enhance WASM — Begin Blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://begin.com/blog/posts/2024-04-08-introducing-enhance-wasm](https://begin.com/blog/posts/2024-04-08-introducing-enhance-wasm)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Backend agnostic server-side rendering (SSR) for Web Components
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Web Components are the browser native way to extend HTML. But as a primarily
    browser based technology they are defined with JavaScript which limits them to
    either rendering solely client side — which has janky performance, poor SEO, and
    is not optimally accessible — or within a server-side JavaScript runtime, which
    isn’t always an option for shops that use other backend runtimes.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: '**[Enhance WASM](https://enhance.dev/wasm)** unlocks **server-side rendering
    Web Components** for any backend runtime.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: '**Write Once, Render Anywhere**: Author standard web components and deploy
    them with any backend. **[Enhance WASM](https://enhance.dev/wasm)** takes care
    of rendering across any server environment.'
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Seamless Integration**: Easily integrate **[Enhance WASM](https://enhance.dev/wasm)**
    into your existing projects with minimal setup. Extensive documentation, high
    quality baseline components, and broad community support make adoption a breeze.'
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Better DX**: Stop wasting time on slow build steps and reimplementing brittle
    frontend code that already works. Web standards ensure rock solid reliability
    and performance without rewrites.'
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance Optimized**: No more spinners or skeleton screens. Enjoy faster
    load times and improved SEO. Your users get a snappy experience, and you get better
    developer velocity.'
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We really believe this is a leapfrog moment for frontend development. Server-side
    rendering is a key requirement for personalized web applications. Organizations
    that prioritize the stability, performance and accessibility of web standards
    run workloads in a huge variety of backend runtimes. **Now we can build browser
    native web interfaces that cross the runtime chasm.**
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: Try it out and get involved!
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Enhance is completely open source code and we need your help! We’re opening
    up Enhance WASM immediately with support for **[Node](https://github.com/enhance-dev/enhance-ssr)**,
    **[Deno](https://github.com/enhance-dev/enhance-ssr-deno)**, **[Python](https://github.com/enhance-dev/enhance-ssr-python)**,
    **[Ruby](https://github.com/enhance-dev/enhance-ssr-ruby)**, **[PHP](https://github.com/enhance-dev/enhance-ssr-php)**,
    **[Java](https://github.com/enhance-dev/enhance-ssr-java)**, **[C#](https://github.com/enhance-dev/enhance-ssr-c-sharp)**,
    **[Rust](https://github.com/enhance-dev/enhance-ssr-rust)**, and **[Go](https://github.com/enhance-dev/enhance-ssr-go)**.
    We need your help testing and implementing support for these and other runtimes!
    If you want to see a runtime not mentioned here [please let us know](https://github.com/enhance-dev/enhance-ssr/issues).
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Example starter projects:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*How are components authored?*'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: Components are authored exactly per the Web Components specification. Enhance
    WASM also enables a more backend oriented pure functional style and has several
    helper libraries for making common client-side patterns cleaner.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: '*Do I need to run client JS to render components?*'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: No. Web Components are completely rendered server-side HTML. You can then optionally
    run client-side upgrades should the element need it. It is worth noting we’ve
    found the majority of elements only need to be server rendered and do not require
    any client javascript at all.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: '*Can I use client-side JS with these components?*'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: Of course!
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: '*What about Lit?*'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: We definitely hear community folk when they say, “just use Lit”, but per the
    Lit documentation their own SSR renderer isn’t production ready today, and even
    then is Node.js only. Lit is ultimately more focused on client-side upgrade than
    server-side usage which is totally cool! Enhance encourages SSR and “HTML first”
    and treats the client-side element upgrade as a progressive enhancement step.
    You can use Enhance to render initial HTML and Lit for client-side interactions
    if that makes sense for your project. We find most elements are not client-side
    interactive anyhow.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
