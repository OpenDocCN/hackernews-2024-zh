- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 12:59:00'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月27日 12:59:00
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'A History of Source Control Systems: SCCS and RCS (Part 1) | dsp'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码控制系统的历史：SCCS 和 RCS（第一部分）| dsp
- en: 来源：[https://experimentalworks.net/posts/2024-03-18-a-history-of-vcs-part1/](https://experimentalworks.net/posts/2024-03-18-a-history-of-vcs-part1/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://experimentalworks.net/posts/2024-03-18-a-history-of-vcs-part1/](https://experimentalworks.net/posts/2024-03-18-a-history-of-vcs-part1/)
- en: Updates[#](#updates)
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新[#](#updates)
- en: April 7th, 2024[#](#april-7th-2024)
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2024年4月7日[#](#april-7th-2024)
- en: I received an email from Marc Rochkind. He recounts some details of the creation
    of SCCS. I attached the email at the end of the article and made corrections inside
    the article. Most importantly, check out Marc’s [original paper](mrochkind.com/aup/talks/SCCS-Slideshow.pdf).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我收到了Marc Rochkind发来的电子邮件。他回顾了SCCS的创立细节。我在文章结尾附上了这封电子邮件，并在文章中进行了更正。最重要的是，请查看Marc的[原始论文](mrochkind.com/aup/talks/SCCS-Slideshow.pdf)。
- en: Thank you all for the kind comments and interesting discussion Hacker News and
    Lobste.rs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢Hacker News和Lobste.rs的亲切评论和有趣讨论。
- en: '*[HN Thread](https://news.ycombinator.com/item?id=39950712) and [lobste.rs
    thread](https://lobste.rs/s/i3eg8u/history_source_control_systems_sccs_rcs).*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*[HN主题](https://news.ycombinator.com/item?id=39950712) 和 [lobste.rs 主题](https://lobste.rs/s/i3eg8u/history_source_control_systems_sccs_rcs).*'
- en: 'A History of Source Control Systems: SCCS and RCS[#](#a-history-of-source-control-systems-sccs-and-rcs)'
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码控制系统的历史：SCCS 和 RCS[#](#a-history-of-source-control-systems-sccs-and-rcs)
- en: Source Control Management (SCM) Systems, have a long and rich history. As the
    systems evolved, so have their concepts, use cases and adoption over time. While
    SCMs are ubiquitous in modern software development, they have been fairly novel
    in the 80s and 90s, and arguable it took the rise of Git and Github for them to
    be used nearly everywhere.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码控制管理（SCM）系统有着悠久而丰富的历史。随着系统的发展，它们的概念、用例和在整个时间范围内的应用也在不断演变。虽然SCM在现代软件开发中无处不在，但在80年代和90年代，它们还相当新颖，可以说是Git和Github的兴起使它们几乎到处都被使用了。
- en: I want to provide an overview of what I consider the most important and influential
    systems over time. This list does not attempt to be complete. There are many systems
    that aren’t covered and details that I will be missing. The history of some of
    these systems are difficult to trace back. There is little write up on the origins
    of early software, and so my primary sources of many of these are Wikipedia. More
    recent systems such as SVN, Mercurial and Git are easier to find sources on and
    I often recall some of the details from memory.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我想概述一下我认为最重要和有影响力的系统。这个列表并不试图完全涵盖所有系统。有很多系统没有涉及，我可能会遗漏一些细节。有些系统的历史难以追溯。早期软件的起源很少有记录，所以我许多信息的主要来源是维基百科。最近的系统如SVN、Mercurial和Git更容易找到来源，我经常从记忆中回忆一些细节。
- en: Note that this posts focuses on source control systems, meaning systems meant
    for storing versions of source code. Other version control systems that focus
    primarily binary data will not be covered. For the purpose of this blog post,
    I will use the terms *source control system* and *version control system* interchangeable.
    I recognize that source control systems are a subcategory of version control systems.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，本文集中讨论源代码控制系统，即用于存储源代码版本的系统。并不涵盖主要关注二进制数据的其他版本控制系统。为了本博客文章的目的，我将术语 *源代码控制系统*
    和 *版本控制系统* 视为可互换使用。我认识到源代码控制系统是版本控制系统的一个子类。
- en: I have used most of the systems on this list myself at some point in time. For
    systems that I haven’t used myself, such as SourceSafe and ClearCase, I would
    love to hear from you about your experience with them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我自己曾经使用过这个列表中的大多数系统。至于我自己没有使用过的系统，比如 SourceSafe 和 ClearCase，我很想听听你对它们的使用经验。
- en: Overview[#](#overview)
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概览[#](#overview)
- en: The blog post is ordered chronological. The initial post, Part 1, will cover
    SCCS and RCS, two hugely influential version control systems of the 70s and 80s.
    The systems are generally local only and version single files at a time.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本博客文章按时间顺序排列。最初的帖子，第一部分，将涵盖 70 年代和 80 年代两个极具影响力的版本控制系统 SCCS 和 RCS。这些系统通常仅支持本地，并一次版本控制单个文件。
- en: Part 2 (TBD) will cover the rise of centralised version control systems, such
    as CVS, SourceSafe, ClearCase, that allow users for the first time concurrent
    access to the same files from different machines.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分（待定）将涵盖集中式版本控制系统的崛起，如 CVS、SourceSafe、ClearCase，这些系统首次允许用户从不同的机器并发访问同一文件。
- en: In the third part (TBD), we will focus on the evolution of centralised version
    control systems and touch on SVN and Perforce, two very successful and until this
    day, widely used version control systems.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三部分（待定），我们将重点关注集中式版本控制系统的演变，并涉及到 SVN 和 Perforce，这两个非常成功且至今广泛使用的版本控制系统。
- en: 'Part 4 (TBD) will put the spotlight on the next leap in version control systems:
    Decentralised version control. We will take a look at the origins of decentralised
    version control systems at Sun Microsystems, and their spiritual descendant Bitkeeper,
    and take a look at early open source systems such as has GNU Arch, Monotone and
    the very unique Darcs.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第四部分（待定）将聚焦于版本控制系统的下一个飞跃：去中心化版本控制。我们将探讨去中心化版本控制系统在 Sun Microsystems 的起源及其精神继承者
    Bitkeeper，并查看早期开源系统，如 GNU Arch、Monotone 和非常独特的 Darcs。
- en: With the origins of decentralised version control systems behind us, we will
    focus in Part 5 (TBD), on the version control systems wars between 2005 to 2015,
    where three main systems, Git, Mercurial and Bazaar were simultaneously developed.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 随着去中心化版本控制系统的起源告一段落，我们将在第五部分（待定）专注于 2005 年至 2015 年间版本控制系统的竞争，当时同时开发了三个主要系统，Git、Mercurial
    和 Bazaar。
- en: In the last two parts (TBD), we will take a quick look at the current landscape
    of version control systems, as well as some interesting ideas that are developed
    as part of Fossil and Pijul, before I will talk about, what I consider the missing
    version control system.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后两部分（TBD）中，我们将快速查看版本控制系统的当前景观，以及作为Fossil和Pijul一部分开发的一些有趣的想法，然后我将讨论我认为缺失的版本控制系统。
- en: I would very much appreciate feedback on this series of blog posts. Please reach
    out to me at blog at (this domain), [Lobste.rs](https://lobste.rs/s/i3eg8u/history_source_control_systems_sccs_rcs)
    or [Hacker News](https://news.ycombinator.com/item?id=39950712).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常希望能够得到关于这系列博客文章的反馈。请联系我，邮箱是该博客的域名，或者访问[Lobste.rs](https://lobste.rs/s/i3eg8u/history_source_control_systems_sccs_rcs)或者[Hacker
    News](https://news.ycombinator.com/item?id=39950712)。
- en: 'Part 1: SCCS and RCS[#](#part-1-sccs-and-rcs)'
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1部分：SCCS和RCS[#](#part-1-sccs-and-rcs)
- en: '1973: SCCS[#](#1973-sccs)'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1973年：SCCS[#](#1973-sccs)
- en: 'It might surprise you to learn that the first version control system emerged
    relatively late in the history of computing. UNIX had been in development for
    three years by the time SCCS, the first version control system, was created in
    1972\. However, in the context of the time, it makes sense:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 也许让你惊讶的是，第一个版本控制系统在计算历史上出现得相对较晚。UNIX在开发了三年后，即1972年，才创建了第一个版本控制系统SCCS。然而，在当时的背景下，这是有道理的：
- en: Before the late 1960s, most programs were written using [punched cards](https://en.wikipedia.org/wiki/Punched_card).
    A program’s version was its physical set of punched cards. Versioning a program
    involved the physical labor of organizing and storing these cards in boxes. Terminals
    and disks existed but were expensive. Programmers used them for input and output
    to the system rather than for development.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪60年代后期之前，大多数程序是使用[打孔卡片](https://en.wikipedia.org/wiki/Punched_card)编写的。程序的版本就是其一套物理打孔卡片。对程序进行版本控制涉及组织和存储这些卡片的体力劳动，放在盒子里。虽然存在终端和磁盘，但它们非常昂贵。程序员用它们进行系统的输入和输出，而不是进行开发。
- en: 'In the 1970s, [video terminals](https://en.wikipedia.org/wiki/Computer_terminal)
    like the [VT100](https://en.wikipedia.org/wiki/VT100) and [time-sharing operating
    systems](https://en.wikipedia.org/wiki/Time-sharing), such as [UNIX](https://en.wikipedia.org/wiki/History_of_Unix)
    and [DEC TSS/8](https://en.wikipedia.org/wiki/OpenVMS) became cheaper and more
    widespread. Programmers started working on a central, time-shared computer, and
    moved from punched cards to files on disks. As computing became more widely available,
    the amount of source code written at Bell Labs and other centers of computing
    increased, leading to source code chaos. The question arose: How do you best organize
    and version source code?'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在1970年代，像[视频终端](https://zh.wikipedia.org/wiki/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B5%82%E7%AB%AF)如[VT100](https://zh.wikipedia.org/wiki/VT100)和[分时操作系统](https://zh.wikipedia.org/wiki/%E5%88%86%E6%99%82%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1)，如[UNIX](https://zh.wikipedia.org/wiki/Unix%E5%8E%86%E5%8F%B2)和[DEC
    TSS/8](https://zh.wikipedia.org/wiki/OpenVMS)变得更加便宜和广泛。程序员开始在中央的、共享的计算机上工作，并从打孔卡转移到磁盘文件上。随着计算机的普及，贝尔实验室和其他计算中心编写的源代码量增加，导致了源代码混乱。问题出现了：如何最好地组织和版本化源代码？
- en: The creation of SCCS[#](#the-creation-of-sccs)
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[SCCS的创建](#the-creation-of-sccs)'
- en: 'In 1972 [Marc Rochkind](https://en.wikipedia.org/wiki/Marc_Rochkind) developed
    a version control system for IBM System/370 in [SNOBOL](https://en.wikipedia.org/wiki/SNOBOL).
    He rewrote it in C for UNIX a year later in 1973: *Thus, the first version control
    system, SCCS, was born.*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 1972年，[Marc Rochkind](https://zh.wikipedia.org/wiki/Marc_Rochkind)为IBM System/370开发了一个版本控制系统，使用[SNOBOL](https://zh.wikipedia.org/wiki/SNOBOL)语言。一年后，他在1973年用C语言重写了UNIX版本：*因此，第一个版本控制系统SCCS诞生了*。
- en: 'Note: You can find the original paper on SCCS on Marc’s website: [https://mrochkind.com/aup/talks/SCCS-Slideshow.pdf](https://mrochkind.com/aup/talks/SCCS-Slideshow.pdf)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注：您可以在Marc的网站上找到关于SCCS的原始论文：[https://mrochkind.com/aup/talks/SCCS-Slideshow.pdf](https://mrochkind.com/aup/talks/SCCS-Slideshow.pdf)
- en: SCCS could manage multiple versions of a file. Unlike modern source control
    systems, it lacked concepts like a repository or tracked files.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: SCCS可以管理文件的多个版本。与现代源代码控制系统不同，它缺乏仓库或跟踪文件的概念。
- en: The initial version of SCCS edited on-disk source files through punched card
    commands, adding and deleting source code lines. With the move to UNIX, SCCS now
    had to version files that were edited by `ed` (or later other editors). In order
    to achieve this, users issued a `delta` command to record the changes. SCCS stored
    the difference between the current version and the last stored version as a delta.
    In addition it stored metadata such as a comment (now known as a commit message)
    and the change date. To retrieve versions, programmers would ask SCCS to `get`
    a version ^.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 初始版本的SCCS通过打孔卡命令编辑磁盘上的源文件，添加和删除源代码行。随着迁移到UNIX，SCCS现在必须为由`ed`（或后来的其他编辑器）编辑的文件版本化。为了实现这一点，用户发出`delta`命令来记录更改。SCCS将当前版本与上次存储的版本之间的差异存储为增量。此外，它还存储了元数据，如注释（现在称为提交消息）和更改日期。为了检索版本，程序员会要求SCCS`get`一个版本^。
- en: This sounds familiar? In principle, it is how most version control systems work
    today. However, SCCS has some very notable limitations.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来很熟悉？原则上，这是今天大多数版本控制系统的工作方式。然而，SCCS有一些非常显著的局限性。
- en: Limitations[#](#limitations)
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 局限性[#](#limitations)
- en: Firstly, it is *local-only*, meaning that SCCS does not include any way to exchange
    deltas between users. In an era of large, time-shared machines, this wasn’t necessary.
    Developers had accounts on central machines (like a [PDP-11](https://en.wikipedia.org/wiki/PDP-11))
    and worked independently or simply shared work folders with colleagues.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它是*仅限本地*的，这意味着SCCS没有包括任何交换用户之间增量的方式。在大型、分时共享机器的时代，这并不是必需的。开发者在中央机器上有账户（如[PDP-11](https://en.wikipedia.org/wiki/PDP-11)），可以独立工作或者与同事简单地共享工作目录。
- en: Secondly, SCCS was *single-file* only ^(. It tracked changes for one file at
    a time. Concepts like a repository of tracked files or atomic commits across multiple
    files didn’t exist yet.)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，SCCS仅支持*单一文件* ^(. 它一次只能跟踪一个文件的更改。像跟踪文件仓库或者跨多个文件进行原子提交这样的概念当时还不存在。)
- en: Thirdly, to ensure single-writer access, SCCS used locking. A file under SCCS
    control was read-only on the disk until a user retrieved it for editing. If another
    user had the file checked out, SCCS would abort the operation. If no other user
    currently marked the file for editing, the file would become writable on disk
    and the user could modify it. Merging did not yet exist.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，为了确保单一写入者访问，SCCS使用了锁定。在SCCS控制下的文件在磁盘上是只读的，直到用户检索它进行编辑为止。如果另一个用户已经检出了该文件，SCCS将中止操作。如果没有其他用户当前标记该文件以供编辑，则该文件将在磁盘上变为可写，并且用户可以修改它。合并操作还不存在。
- en: SCCS exposed the storage terminology such as `delta` directly to the user. For
    instance, to create a new version of a file, one would use the command `sccs delta`.
    Modern terms like repository, commit, and checkout didn’t exist then.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: SCCS直接向用户公开存储术语，比如`delta`。例如，要创建文件的新版本，可以使用命令`sccs delta`。现代术语如仓库、提交和检出在那个时候还不存在。
- en: A quick example[#](#a-quick-example)
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 快速示例[#](#a-quick-example)
- en: Let’s take a quick look how one would use SCCS. In the following example, we
    put the file `main.c` into SCCS control and retrieve it for editing. Note that
    we are using a more recent version of SCCS, as found in FreeBSD. Original SCCS
    used `get`, `delta`, command and operated on SCCS files directly. The `sccs` command
    with subcommands appeared much later.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看看如何使用SCCS。在以下示例中，我们将文件`main.c`放入SCCS控制并检索它进行编辑。请注意，我们使用的是FreeBSD中更近期的SCCS版本。最初的SCCS使用`get`、`delta`命令直接操作SCCS文件。带有子命令的`sccs`命令出现得晚得多。
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Storage[#](#storage)
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 存储[#](#storage)
- en: The file format for storing deltas is one of the most fascinating bits of SCCS.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 存储增量的文件格式是SCCS最引人入胜的部分之一。
- en: It uses [Interleaved Deltas](https://en.wikipedia.org/wiki/Interleaved_deltas)
    (or weaves), storing changed lines and their information next to the original
    lines in plain text. Hence, the deltas are **weaved** into the file. For example,
    let’s take a file
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用[交错增量](https://en.wikipedia.org/wiki/Interleaved_deltas)（或编织），将更改的行及其信息以纯文本形式存储在原始行旁边。因此，增量被**编织**到文件中。例如，让我们来看一个文件
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And modify it to
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 并将其修改为
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In modern diff terms:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以现代diff术语：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The SCCS file containing the weaved deltas for this might look something along
    the lines of ^:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 包含这些编织增量的SCCS文件可能看起来类似于^：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So the first line `^AI 1`, `^AD 2` means at version 1 the line was inserted
    and version 2 it was deleted. The line content is `foo`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，第一行 `^AI 1`，`^AD 2` 意味着版本1时插入了这一行，版本2时删除了它。这一行的内容是 `foo`。
- en: This has distinct advantages for attributing lines to changes, as well as uniform
    retrieval time for any revision. The disadvantage is fairly inefficient storage
    and as well as potentially fairly poor performance in practice, as you will have
    to read all revisions of a file to checkout a revision. While most SCMs later
    on use different storage algorithms, we will see interleaved deltas being used
    again in modern version control systems.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于归因行的更改具有明显优势，以及对于任何修订版本的统一检索时间。缺点是存储效率相当低效，实际上性能可能相当差，因为你必须阅读文件的所有修订版本来检出一个修订版本。虽然后来大多数SCM使用不同的存储算法，但我们将在现代版本控制系统中再次看到交错增量的使用。
- en: Implementations[#](#implementations)
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实现[#](#implementations)
- en: Marc’s original version for SNOBOL was only used by one department. The quickly
    afterwards developed UNIX version, became part of the [Programmer’s Workbench
    PWB/UNIX](https://en.wikipedia.org/wiki/PWB/UNIX) and saw widespread adoption.
    However it stayed proprietary throughout. It’s [source code](https://www.tuhs.org/cgi-bin/utree.pl?file=PWB1/sys/source/sccs4)
    of SCCS v4 for PWB/UNIX can now be found on the site of the Unix Heritage Society.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Marc原始的SNOBOL版本只被一个部门使用。随后快速开发的UNIX版本成为了[程序员工作台PWB/UNIX](https://en.wikipedia.org/wiki/PWB/UNIX)的一部分，并得到了广泛采用。然而，它一直是专有的。它的[源代码](https://www.tuhs.org/cgi-bin/utree.pl?file=PWB1/sys/source/sccs4)现在可以在Unix
    Heritage Society的网站上找到，这是PWB/UNIX的SCCS v4版本。
- en: Eric Allman reimplemented SCCS in 1980 at the University of California Berkley.
    This versions made was later maintained by AT&T and Sun Microsystems before it
    made it’s way to [shilytools](https://codeberg.org/schilytools/schilytools/src/branch/master/sccs)
    where it resides today under the CDDL license. Most modern UNIX and UNIX-like
    distributions such as Solaris and FreeBSD, still offer this version as a package.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Eric Allman在1980年在加利福尼亚大学伯克利分校重新实现了SCCS。这个版本后来由AT&T和Sun Microsystems维护，然后转移到了[shilytools](https://codeberg.org/schilytools/schilytools/src/branch/master/sccs)，现在以CDDL许可证存放。大多数现代UNIX和类UNIX发行版，如Solaris和FreeBSD，仍然将这个版本作为一个软件包提供。
- en: The GNU projects maintains a reimplementation of SCCS as [CSSC](https://www.gnu.org/software/cssc/)
    under the GPL.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: GNU项目维护了SCCS的一个重新实现，称为[CSSC](https://www.gnu.org/software/cssc/)，采用GPL许可证。
- en: Legacy[#](#legacy)
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 传统[#](#legacy)
- en: While very few people use SCCS nowadays, it influence on modern version control
    systems can’t be denied. Ideas such as storing deltas, adding comments to commits
    and expanding version IDs during checkout will remain used in many version control
    systems.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然现在很少有人使用SCCS，但它对现代版本控制系统的影响无法否认。像存储增量、在提交中添加注释和在检出过程中扩展版本ID等思想将继续被许多版本控制系统使用。
- en: '1982: RCS[#](#1982-rcs)'
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1982年：RCS[#](#1982-rcs)
- en: SCCS was the sole version control system for the first nine years after its
    creation. In 1982, [Walter Tichy](https://en.wikipedia.org/wiki/Walter_F._Tichy)
    developed [RCS](https://en.wikipedia.org/wiki/Revision_Control_System) at the
    Purdue University. It’s design was published as a paper [“Design, Implementation,
    and Evolution of a Revision Control System”](https://dl.acm.org/doi/10.5555/800254.807748)
    in the Proceedings of the 6th International Conference on Software Engineering
    (ICSE’82).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: SCCS在创建后的头九年是唯一的版本控制系统。1982年，[Walter Tichy](https://en.wikipedia.org/wiki/Walter_F._Tichy)
    在普渡大学开发了[RCS](https://en.wikipedia.org/wiki/Revision_Control_System)。其设计以一篇名为“Design,
    Implementation, and Evolution of a Revision Control System”的论文发表在第六届国际软件工程会议(ICSE’82)的会议文集中。
- en: 'In many ways it is similar to SCCS. It operates on one file at a time, with
    [similar limitations](#Limitations). However, it had one trick up his sleeves:
    **Reversed Deltas**.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在很多方面，它类似于SCCS。它一次只能处理一个文件，并且有[类似的限制](#Limitations)。不过，它有一个独特的技巧：**反向增量**。
- en: Reversed, Separated Deltas[#](#reversed-separated-deltas)
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 反向、分离的增量[#](#reversed-separated-deltas)
- en: The first difference of RCS to SCCS, is that RCS stored **separate deltas**.
    Instead of interweaving the deltas into the file like SCCS did, RCS would store
    the full file for one revision, and deltas as generated by [`diff`](https://man7.org/linux/man-pages/man1/diff.1.html)
    (notable diff didn’t exist when SCCS was written) for following revisions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: RCS与SCCS的第一个不同之处在于，RCS存储**单独的增量**。与SCCS将增量编织到文件中不同，RCS会将一个修订版的完整文件存储起来，然后存储由[`diff`](https://man7.org/linux/man-pages/man1/diff.1.html)生成的增量（需要注意的是，在SCCS编写时并没有`diff`）。后续修订版则存储从下一版本到当前版本的增量。
- en: The second difference, was to store **deltas in reverse order**. The most recent
    stored revision consists of the full file format. Other revisions store the delta
    going from the next version to the current version, forming a delta-chain from
    the newest revision to the older revision.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个不同之处是，RCS以**反向顺序存储增量**。最新存储的修订版包含完整的文件格式。其他修订版则存储从下一个版本到当前版本的增量，形成从最新修订版到较旧修订版的增量链。
- en: Tichy claimed that this has distinct advantages. In the most common case, of
    checking out the most recent version, RCS requires only to read the last version
    and stream the content directly to a file, making checkout much faster. However,
    retrieving older versions of the file was slower in RCS than SCCS. When writing
    a new versions RCS calculated the difference between the new version and the most
    recently stored version and rewrite the whole RCS file. SCCS also needed to rewrite
    the whole file, but did not need expensive difference calculation ^.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Tichy 声称这有明显的优势。在最常见的情况下，即检出最新版本，RCS 只需读取最后一个版本并直接将内容流式传输到文件中，使得检出速度更快。然而，在
    RCS 中检索旧版本的文件比 SCCS 慢。在写入新版本时，RCS 计算新版本与最近存储版本之间的差异，并重新写入整个 RCS 文件。SCCS 也需要重新写入整个文件，但不需要昂贵的差异计算^。
- en: 'Let’s take a look at a RCS file. Note that all RCS files are usually stored
    as the filename with an appended suffix `,v`. Binary data is generally stored
    with each version being gzipped:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个 RCS 文件。请注意，所有 RCS 文件通常以文件名加上后缀`,v`的形式存储。二进制数据通常是每个版本都经过 gzip 压缩存储的：
- en: 'An example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can see that the most recent version `1.2` contains the full text. Version
    `1.1` contains the reversed delta information to go from `1.2` to `1.1`. Delta
    information is *line based*. The string `d1 4` means starting at line 1 delete
    4 lines. `a4 1 ...`, means starting at line 4, add the following line. If we follow
    these commands, we get the original version^:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到最新版本`1.2`包含了完整的文本。版本`1.1`包含了从`1.2`到`1.1`的反向增量信息。增量信息是*基于行的*。字符串`d1 4`表示从第
    1 行开始删除 4 行。`a4 1 ...`表示从第 4 行开始，添加以下行。如果我们按照这些命令操作，就可以得到原始版本^：
- en: Claimed improvements over SCCS[#](#claimed-improvements-over-sccs)
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 声称相对于 SCCS 的改进[#](#claimed-improvements-over-sccs)
- en: 'Tichy’s original paper from 1982 claimed a few improvements over SCCS:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Tichy 在 1982 年的原始论文中声称相对于 SCCS 有一些改进：
- en: Firstly, the results in checkout and checking operations were much faster for
    the common case (e.g. most recent revision), but showed slowness checking out
    older revisions (as expected).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，对于常见情况下（例如最新修订版），检出和检查操作的结果要快得多，但检出旧版本会显示出较慢的速度（如预期的那样）。
- en: Secondly, it claimed that the UX of SCCS at the time, where one has to operate
    on the version files, rather than the checked out files (e.g. `sccs delta s.main.c`),
    was a common pinpoint among programmers. Hence RCS supported specifying either
    the checked out file or the version file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，它声称当时 SCCS 的用户体验，需要在版本文件上操作，而不是已检出的文件（例如`sccs delta s.main.c`），是程序员之间的一个常见痛点。因此，RCS
    支持指定已检出文件或版本文件。
- en: Thirdly, RCS improved on the lock mechanism employed by both SCCS and RCS to
    ensure a single writer at a time, by allowing unprivileged users to overwrite
    a lock, and sending a local email the the holder of the lock, when a lock was
    broken. SCCS in contrast required privileged users to break the lock, and did
    not leave any paper trail.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，RCS改进了锁定机制，该机制由SCCS和RCS同时使用，以确保一次只有一个写入者，允许非特权用户覆盖锁定，并在锁定被打破时发送本地电子邮件给锁定的持有者。相比之下，SCCS需要特权用户来打破锁定，并且不留下任何记录。
- en: Notable, the initial version of RCS did not include checksumming, branching
    or tagging, which SCCS at the time already supported. Tichy felt that some of
    these features were unnecessary, but already foresaw that RCS will eventually
    gain these features (which of course it did).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，RCS的初始版本不包括校验和、分支或标记功能，而当时SCCS已经支持了这些功能。Tichy认为其中一些功能是不必要的，但他已经预见到RCS最终会获得这些功能（当然，它确实做到了）。
- en: '*In all fairness, we need to point out that SCCS offers many features that
    are missing from RCS. For example, SCCS performs complete checksumming, and provides
    flags that control the creation of branches and the range of revision numbers.
    We feel that many of these features are unnecessary and contribute to the bulkiness
    of SCCS. We realize, however, that some of these features may creep into RCS eventually.*'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*公平地说，我们需要指出，SCCS提供了许多RCS缺少的功能。例如，SCCS执行完整的校验和，并提供控制分支创建和修订号范围的标志。我们认为许多这些功能是不必要的，并导致了SCCS的臃肿。然而，我们意识到，这些功能中的一些可能最终会渗入RCS。*'
- en: ''
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: – Design, Implementation, and Evolution of a Revision Control System
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: – 修订控制系统的设计、实现和演进
- en: Example[#](#example)
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例[#](#example)
- en: Now let’s take a look at a common usage. We checkout our `main.c` from an existing
    RCS file. We lock it during checkout so we can write it (without, RCS would check
    it out read-only). We edit it and check in a new version. Lastly, we are done
    and unlock the file.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一个常见的用法。我们从现有的RCS文件中检出我们的`main.c`。我们在检出期间将其锁定，以便我们可以写入它（否则，RCS会将其检出为只读）。我们进行编辑并提交一个新版本。最后，我们完成并解锁文件。
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Implementations[#](#implementations-1)
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实现[#](#implementations-1)
- en: The original implementation of RCS was distributed as 4.3 BSD but the license
    [prohibited redistribution without written permission from Tichy](https://en.wikipedia.org/wiki/Revision_Control_System#cite_note-11).
    [4.3BSD-Reno](https://en.wikipedia.org/wiki/Berkeley_Software_Distribution#4.3BSD)
    would contain RCS with a permissive license, BSD like license. In the running
    up to RCS 4.3, Tichy moved the project to GNU, changing the license to GPL ^.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: RCS的最初实现是作为4.3 BSD发布的，但其许可证[禁止未经Tichy书面许可进行再分发](https://en.wikipedia.org/wiki/Revision_Control_System#cite_note-11)。[4.3BSD-Reno](https://en.wikipedia.org/wiki/Berkeley_Software_Distribution#4.3BSD)版本将包含RCS，并采用类似BSD的宽松许可证。在推出RCS
    4.3之前，Tichy将项目迁移到GNU，并将许可证改为GPL ^。
- en: 'The [first commit](https://git.savannah.gnu.org/cgit/rcs.git/commit/?h=p&id=2a07671f9ce40cfab440c40c465357945f06aef2)
    from November 18th, 1989 reads:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 1989年11月的[第一次提交](https://git.savannah.gnu.org/cgit/rcs.git/commit/?h=p&id=2a07671f9ce40cfab440c40c465357945f06aef2)如下所述：
- en: Import RCS 4.3 from [ftp://ftp.cs.purdue.edu/pub/RCS/](ftp://ftp.cs.purdue.edu/pub/RCS/)
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从[ftp://ftp.cs.purdue.edu/pub/RCS/](ftp://ftp.cs.purdue.edu/pub/RCS/)导入RCS 4.3
- en: GNU RCS tracks it history all the way back to the original RCS from 1982\. GNU
    RCS was actively maintained by [Thien-Thi Nguyen](https://savannah.gnu.org/users/ttn),
    until his [death](https://lists.gnu.org/archive/html/emacs-devel/2023-09/msg00713.html)
    in October 2022\. The project is unmaintained at the moment.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: GNU RCS从1982年的原始RCS追溯其历史。GNU RCS由[Thien-Thi Nguyen](https://savannah.gnu.org/users/ttn)积极维护，直到他在2022年10月的[逝世](https://lists.gnu.org/archive/html/emacs-devel/2023-09/msg00713.html)。目前该项目未得到维护。
- en: OpenRCS maintains a [reimplementation of RCS](https://cvsweb.openbsd.org/cgi-bin/cvsweb/src/usr.bin/rcs/)
    under the MIT license. It is distributed as part of OpenBSD since version 4.0\.
    FreeBSD and NetBSD ship GNU RCS as part of their packages/ports.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: OpenRCS维护着一个基于MIT许可重新实现的[RCS](https://cvsweb.openbsd.org/cgi-bin/cvsweb/src/usr.bin/rcs/)。自OpenBSD
    4.0版本以来，它作为其一部分进行分发。FreeBSD和NetBSD则将GNU RCS作为它们的包/端口的一部分进行发布。
- en: Legacy[#](#legacy-1)
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 遗留[#](#legacy-1)
- en: RCS is one of the most influential source control systems to this day. Systems
    like CVS and Perforce use RCS file formats to this day. Terminology such as commit,
    checkout, log are common source control terminology. RCS’s keyword expansion syntax
    ($Id$, $Date$) will find widespread adoption in other version control systems.
    Most modern source control system such as Git or Mercurial use similar separated-delta
    techniques.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: RCS至今仍然是最具影响力的源代码控制系统之一。诸如CVS和Perforce的系统至今仍使用RCS文件格式。诸如提交、检出、日志等术语是常见的源代码控制术语。RCS的关键词扩展语法（$Id$，$Date$）在其他版本控制系统中广泛采用。大多数现代源代码控制系统如Git或Mercurial使用类似的分隔增量技术。
- en: Conclusion[#](#conclusion)
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论[#](#conclusion)
- en: I hope you enjoyed this little overview of SCCS and RCS. In the next blog post
    we will take a look at the 1990s where the first centralized source control systems
    appear. They will allow multiple users to work on source code concurrently and
    exchange commits via the network.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这篇对SCCS和RCS的简要概述。在下一篇博客中，我们将看看20世纪90年代，第一个集中式源代码控制系统出现了。它们允许多用户同时处理源代码，并通过网络交换提交。
- en: If you have corrections, suggestions or just want to say thanks, please send
    a mail to blog at (this domain).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有更正、建议或只是想说谢谢，请发送邮件到该博客的邮箱（此域名）。
- en: Appendix[#](#appendix)
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录[#](#appendix)
- en: Mail from Marc Rochkind[#](#mail-from-marc-rochkind)
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Marc Rochkind的邮件[#](#mail-from-marc-rochkind)
- en: 'Mark kindly wrote me an email as a response to this article. I attached it
    in full:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Mark友善地给我写了一封回复本文的电子邮件。我将其完整附上：
- en: Hello! I just read your article. It seems pretty accurate, at least about the
    part I had to do with. I can add some things.
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你好！我刚刚阅读了你的文章。至少在我参与的部分，似乎相当准确。我可以补充一些内容。
- en: ''
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You might want to reference my 1975 paper, which I have online here:'
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可能想参考我1975年的论文，我在这里放了在线版本：
- en: ''
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: mrochkind.com/aup/talks/SCCS-Slideshow.pdf
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: mrochkind.com/aup/talks/SCCS-Slideshow.pdf
- en: ''
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Originally, there was no “sccs” command. That is, one typed “get”, not “sccs
    get.” Actually, I never heard of the “sccs” command until I read your article;
    sounds like an improvement. (I stopped working on SCCS about 50 years ago.)
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最初，没有“sccs”命令。也就是说，人们输入的是“get”，而不是“sccs get”。实际上，在读了你的文章之前，我从未听说过“sccs”命令；听起来像是一种改进。（我大约50年前停止使用SCCS。）
- en: ''
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The original SNOBOL implementation didn’t have a “delta” command. Rather, it
    allowed the programmer to edit the on-disk source file with punched card commands
    to change, add, or delete source code lines. (No terminals!) Since all edits went
    through SCCS, it knew what constituted the delta. But, in going to UNIX, it was
    obvious that “ed” had to be used, and this presented a problem: How would the
    system know what had happened? The “diff” command existed then, and it was amazingly
    good. So, I incorporated that into the system, resulting in the “delta” command.
    As I recall, it invoked “diff” as a subprocess; I didn’t incorporate the code
    itself. There was only one editor for UNIX at the time, but, of course, many others
    came along later, such as “vi”.'
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最初的SNOBOL实现没有“delta”命令。相反，它允许程序员使用穿孔卡命令编辑磁盘上的源文件，以更改、添加或删除源代码行（没有终端！）。由于所有编辑都通过SCCS进行，它知道什么构成了差异。但是，在转向UNIX时，显然必须使用“ed”，这带来了一个问题：系统如何知道发生了什么？“diff”命令当时已经存在，而且非常好用。因此，我将其合并到系统中，形成了“delta”命令。据我记得，它调用了“diff”作为子进程；我没有将代码本身合并进去。当时UNIX只有一个编辑器，“vi”等后来出现了许多其他编辑器。
- en: ''
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The IBM SNOBOL punched-card-image version was used by only one application department
    at Bell Labs, and would have gone nowhere. SCCS became widely used only as part
    of the Programmer’s Workbench, which you should look up if you’re not familiar
    with it. Using UNIX as a front end for IBM and Univac mainframes was very attractive
    to programmers and became enormously popular in our corner of Bell Labs. As UNIX
    development took off, SCCS became part of the normal workflow. Personally, I was
    on to other things by then and I recall how surprised I was when I learned that
    SCCS had become so widely used.
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: IBM SNOBOL的穿孔卡版本仅被贝尔实验室的一个应用部门使用，并没有广泛传播。SCCS仅作为程序员工作台的一部分而广泛使用，如果你不熟悉的话，可以查阅一下。使用UNIX作为IBM和Univac大型机的前端对程序员非常有吸引力，并在我们贝尔实验室的这一领域内非常流行。随着UNIX的发展，SCCS成为了正常工作流程的一部分。个人而言，那时候我已经忙于其他事情，当得知SCCS变得如此广泛使用时，我感到非常惊讶。
- en: ''
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I really hardly knew anything when I invented SCCS, I was just a 25-year-old
    kid who was charged by upper management with doing something about our source
    code chaos. That’s what I came up with. But, at Bell Labs, coming up with things
    was what we were all supposed to be doing.
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当我发明SCCS时，我几乎什么都不懂，只是一个被高层管理要求解决源代码混乱问题的25岁小伙子。这就是我想出来的解决方案。但在贝尔实验室，我们所有人都应该在创造新东西。
- en: ''
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Good luck to you! If there’s anything I can help with, let me know. By the way,
    I don’t know your name – your article seems to be unsigned.
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 祝你好运！如果有什么我可以帮忙的，请告诉我。顺便说一句，我不知道你的名字 - 你的文章似乎没有署名。
- en: ''
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Marc Rochkind
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Marc Rochkind
