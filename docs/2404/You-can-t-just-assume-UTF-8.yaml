- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:37:36'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:37:36'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: You can't just assume UTF-8
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你不能只是假设UTF-8
- en: 来源：[https://csvbase.com/blog/9](https://csvbase.com/blog/9)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://csvbase.com/blog/9](https://csvbase.com/blog/9)
- en: Humans speak countless different languages. Not only are these languages incompatible,
    but runtime transpilation is a real pain. Sadly, every [standardisation](https://en.wikipedia.org/wiki/Esperanto)
    [initiative](https://en.wikipedia.org/wiki/Lojban) has failed.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 人类说着无数不同的语言。这些语言不兼容，而且运行时的转译真的很痛苦。遗憾的是，每一个[标准化](https://en.wikipedia.org/wiki/Esperanto)
    [倡议](https://en.wikipedia.org/wiki/Lojban) 都以失败告终。
- en: 'At least there is someone to blame for this state-of-affairs: God. It was him,
    after-all, who cursed humanity to speak different languages, in an [early dispute
    over a controversial property development](https://www.kingjamesbibleonline.org/Genesis-11-7/).'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 至少有一个人应该为这种局面负责：上帝。毕竟是他在[早期关于一个有争议的房地产开发问题](https://www.kingjamesbibleonline.org/Genesis-11-7/)上，诅咒了人类说不同的语言。
- en: However, mankind can only blame itself for the fact that *computers* struggle
    to talk to each other.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，人类只能责备自己，因为*计算机*之间的通信困难。
- en: 'And one of the biggest problems is the most simple: computers do not agree
    on how to write letters in binary.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 而最大的问题之一是最简单的：计算机对如何用二进制写字母意见不一。
- en: How to write letters in binary
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何用二进制写字母
- en: How are letters encoded into binary?
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如何把字母编码成二进制？
- en: Let's take the character "A" for example. It was assigned the number 65 in the
    American Standard Code for Information Interchange, or [ASCII](https://man7.org/linux/man-pages/man7/ascii.7.html).
    This numbering was [grandfathered into](https://codepoints.net/U+0041) Unicode,
    except that they the Unicode people write the number 65 in hexadecimal, as `U+0041`.
    And they call it a "codepoint".
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，让我们以字符“A”为例。它在美国信息交换标准码（或[ASCII](https://man7.org/linux/man-pages/man7/ascii.7.html)）中被分配了编号65。这个编号被[继承到](https://codepoints.net/U+0041)了Unicode，不过Unicode的人们把65写成十六进制，即`U+0041`，并称其为“码点”。
- en: Easy enough - at least the number for "A" enjoys wide consensus. But computers
    can't just store decimal numbers, they can only store binary.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 足够简单——至少关于“A”的数字享有广泛的共识。但计算机不能简单地存储十进制数，它们只能存储二进制。
- en: 'In the most popular character encoding, UTF-8, character number 65 ("A") is
    written:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在最流行的字符编码UTF-8中，字符编号65（“A”）被写成：
- en: '`01000001`'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`01000001`'
- en: Only the second and final bits are `1`, or "on". The second bit is worth 64
    and the last bit is worth 1\. Those two sum up to 65\. Easy peasy.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 只有第二和最后的两位是`1`，或者说“打开”的。第二位值为64，最后一位值为1。这两位加起来就是65。非常简单。
- en: 'Another popular encoding is UTF-16, mainly in the world of Windows, Java and
    JavaScript. 65 is represented in UTF-16 this way:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个流行的编码是UTF-16，在Windows、Java和JavaScript世界中主要使用。65在UTF-16中表示为：
- en: '`01000001 00000000`'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`01000001 00000000`'
- en: That's much the same, except the UTF-16 uses (at least) two full bytes for each
    character, but doesn't need any more bits to represent 65, so the second byte
    is blank.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这与UTF-16类似，除了UTF-16使用（至少）两个完整字节表示每个字符，但不需要任何额外的位来表示65，所以第二个字节为空白。
- en: 'What about the other encodings? Here are just a few of the other popular ones:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 其他编码怎么样？这里只列出了几个流行的：
- en: '[Win-1252](https://en.wikipedia.org/wiki/Windows-1252), a non-Unicode encoding,
    used where European languages are spoken'
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Win-1252](https://en.wikipedia.org/wiki/Windows-1252)，一个非Unicode编码，在欧洲语言使用地区使用'
- en: '[KOI8](https://en.wikipedia.org/wiki/KOI8-RU) - non-Unicode, used where the
    [Cyrillic alphabet](https://en.wikipedia.org/wiki/Cyrillic_script) is'
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KOI8](https://en.wikipedia.org/wiki/KOI8-RU) - 非Unicode，在使用[西里尔字母](https://en.wikipedia.org/wiki/Cyrillic_script)的地方使用'
- en: '[GB18030](https://en.wikipedia.org/wiki/GB_18030) - is Unicode, but mainly
    used in mainland China'
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GB18030](https://en.wikipedia.org/wiki/GB_18030) - 是Unicode，但主要在中国大陆使用'
- en: '[Big5](https://en.wikipedia.org/wiki/Big5) - non-Unicode, widely used where
    Traditional Chinese is'
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Big5](https://en.wikipedia.org/wiki/Big5) - 非Unicode，在繁体中文使用广泛'
- en: '[Shift_JIS](https://en.wikipedia.org/wiki/Shift_JIS) - non-Unicode, used in
    Japan'
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Shift_JIS](https://en.wikipedia.org/wiki/Shift_JIS) - 非Unicode，在日本使用'
- en: 'Well, all these other encodings also grandfathered in the ASCII letters, so
    they all represent `A` as:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，所有这些其他编码也都继承了ASCII字母，所以它们都将`A`表示为：
- en: '`01000001`'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`01000001`'
- en: Just like UTF-8 does.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 就像UTF-8一样。
- en: So happy days. This is why the basic western alphabet usually works even when
    the rest of the document is [a garbled mess](https://en.wikipedia.org/wiki/Mojibake).
    Many popular encodings - with the notable exception of UTF-16 - follow ASCII at
    least for the Latin alphabet.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: Well, so far, so good. But now let's look at a trickier character. The euro
    sign, €. It is numbered [8364](https://codepoints.net/U+20AC) (`U+20AC`) by the
    Unicode consortium.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: 'In UTF-8, 8364 is represented by:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: '`11100010 10000010 10101100`'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: Notice that it takes three bytes in UTF-8\. UTF-8 is a "variable-length" character
    encoding - the higher the Unicode number goes, the more bytes are required. (This
    is actually true for UTF-16 as well, but more rarely.)
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: 'In UTF-16 however, 8364 is encoded completely differently:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: '`10101100 00100000`'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Win-1252, however, doesn''t follow Unicode. Instead, it numbers the euro sign
    as 128\. Then it represents 128 this way:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: '`10000000`'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: So just the first bit is on, worth 128.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: And this is where the trouble starts. Once you leave the leafy suburbs of the
    English alphabet, the representations quickly go to hell in an hand-basket.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: '`€` is completely unrepresentable in KOI8.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: 'In GB18030, € is encoded:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: '`10100010 11100011`'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: 'In Big5, € is:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: '`10100011 11100001`'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: 'In Shift JIS, it is:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: '`10000000 00111111`'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: All completely different and completely incompatible. If you assume UTF-8 you
    will get absolute nonsense.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: How to tell which encoding is being used?
  id: totrans-split-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some formats dictate the encoding, as JSON mandates UTF-8\. That certainly keeps
    things simple - as soon as you know it's JSON, you know it must be UTF-8.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Other times, it''s possible to transmit the encoding "out-of-band". HTTP allows
    you to put the encoding in the `Content-Type` header:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And some formats have an "in-band" way to signal the encoding. For example,
    some text files have the header:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Though that's a bit of a mind-bender because you need to be able to read the
    file already in order to find that bit.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: But what if there is no label?
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: And what if the label is wrong? As I will come on to, this is not uncommon.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: CSV files, in particular, have no way to signal, in-band, which encoding is
    used. You can't put a comment, because there is no space - and csv readers will
    be unable to parse your csv in most cases. And many popular tools that work with
    CSV files (MS Excel) do not use UTF-8.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: What then?
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is: statistics.'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: Detecting the encoding with statistics
  id: totrans-split-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two basic strategies which are used to detect the encoding of an unlabelled
    text string.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: Byte-level
  id: totrans-split-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Character-level
  id: totrans-split-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Most implementations use byte-level first, then character level next, if necessary.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: Byte level heuristics
  id: totrans-split-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The byte level is fairly straight forward. You can just look at the bytes and
    say whether they are plausible for a given character encoding.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: For example, as I said above, UTF-16 (mostly) uses two bytes per character.
    For Latin text (eg English) that tends to result in a lot of "blank" second bytes.
    Happily, many markup languages use a lot of Latin text (eg `<`, `>`, `[`, `]`
    and so on), even if the document is not in a Latin script. If your test string
    contains lots and lots of blank second bytes - well, then it's likely that it's
    UTF-16.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，正如我之前所说的，UTF-16（大多数情况下）每个字符使用两个字节。对于拉丁文本（例如英文），这往往导致许多“空白”的第二字节。幸运的是，许多标记语言使用大量的拉丁文本（例如`<`，`>`，`[`，`]`等），即使文档不是拉丁文。如果您的测试字符串包含大量的空白第二字节——那么很可能它是UTF-16。
- en: 'There are other giveaways. Imagine you are a web-browser and a link has taken
    the user to a file whose first two bytes are these:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他的线索。想象你是一个网络浏览器，链接把用户带到一个文件，这个文件的前两个字节是这些：
- en: '`00111100 00100001`'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`00111100 00100001`'
- en: If this were UTF-16, these two bytes would be ℼ, a symbol called ["double struck
    small pi"](https://codepoints.net/U+213C), numbered in Unicode as 8508 (U+213C).
    Is that a common first character in an HTML file?
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是UTF-16，这两个字节将是ℼ，一个名为["double struck small pi"](https://codepoints.net/U+213C)的符号，Unicode编码为8508（U+213C）。这是HTML文件中常见的第一个字符吗？
- en: Or, perhaps, is it more likely to be the two character sequence `<!` encoded
    with UTF-8? Perhaps the following bytes are `doctype>`, or the standard boilerplate
    of any HTML document? Just a hint!
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，也许，更可能是UTF-8编码的两个字符序列`<!`？也许接下来的字节是`doctype>`，或者任何HTML文档的标准模板？仅供参考！
- en: Another giveaway are specific bytes. UTF-16 frustratingly comes in two versions,
    one where you write the bits in the normal way and one where you write them all
    backwards. In order for people to tell these two forms apart the standard for
    UTF-16 includes a ["byte order mark"](https://en.wikipedia.org/wiki/Byte_order_mark)
    that you can put at the front of a text stream to indicate which version you've
    used. This pair of bytes doesn't occur very often in other encodings, and certainly
    not at the start, so it's usually a good hint about what follows.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个线索是特定的字节。令人沮丧的是，UTF-16有两个版本，一个是您按照正常方式编写位，另一个是您将它们全部反转。为了让人们区分这两种形式，UTF-16的标准包括一个["字节顺序标记"](https://en.wikipedia.org/wiki/Byte_order_mark)，您可以将其放在文本流的开头以指示您使用的版本。这对字节在其他编码中并不经常出现，特别是在开头，因此通常是关于接下来内容的一个好提示。
- en: So bytes can get you pretty far. If you can narrow it down unambiguously to
    UTF-8 or UTF-16 at this point, your job is finished.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 所以字节可以让你走得相当远。如果你现在可以明确地将其缩小到UTF-8或UTF-16，那么你的工作就完成了。
- en: Character level heuristics
  id: totrans-split-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符级的启发式方法。
- en: The tricky cases tend to be non-Unicode single byte encodings. For example,
    telling Win-1252 apart from KOI8, as both use the otherwise blank 1st bit of ASCII
    to encode different things.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 棘手的情况往往是非Unicode的单字节编码。例如，区分Win-1252和KOI8，因为它们都使用ASCII的空白第一位来编码不同的东西。
- en: How do you tell these apart? By frequency analysis. You look at the letters
    that would be present in the document, for example if it were KOI8 and ask "is
    this a typical distribution of letters for a Cyrillic document?".
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何区分它们？通过频率分析。你看看文档中可能出现的字母，例如如果它是KOI8，然后问：“这是一个西里尔文档的典型字母分布吗？”。
- en: 'Here is a basic algorithm:'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个基本算法：
- en: Exclude all encodings ruled out by prior byte-level heuristics
  id: totrans-split-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排除所有被先前的字节级启发式方法排除的编码
- en: For each remaining possible encoding `X`
  id: totrans-split-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个剩余可能的编码`X`
- en: Parse the input as though it were encoded with `X`
  id: totrans-split-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为若被编码为`X`的输入解析。
- en: Compare the frequencies of the characters in the string with those in a known
    frequency table
  id: totrans-split-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将字符串中字符的频率与已知频率表中的字符进行比较
- en: Optionally, also compare the *pairs* of letters (eg `qu`) with a known frequency
    table
  id: totrans-split-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选地，也比较*字母对*（例如`qu`）与已知的频率表。
- en: If they are a good match, return `X`
  id: totrans-split-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果它们是一个很好的匹配，返回`X`
- en: Otherwise, fail
  id: totrans-split-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，失败。
- en: Often you can also tell which language the document is in as well this way -
    that's one way that web browsers know to pop up the "do you want to translate
    this page" dialogue box.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通常你也可以通过这种方式告诉文档使用的语言——这是网页浏览器知道弹出“是否要翻译此页面”的对话框的一种方式。
- en: Does it really work?
  id: totrans-split-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它真的有效吗？
- en: 'Heuristics tend to make people uneasy but the answer is: yes. It works surprisingly
    well. It certainly works far better than simply assuming that the text is UTF-8
    - and ultimately that is the benchmark.'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 启发式方法往往让人感到不安，但答案是：是的。它的效果出奇地好。它当然比简单地假定文本是UTF-8要好得多——而且最终这是基准。
- en: It probably should not be a surprise the statistics work well. They often work
    well on languages, from the [first effective spam filters](https://paulgraham.com/better.html)
    to, well, [many things](https://research.google.com/pubs/archive/35179.pdf).
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些统计数据能很好地工作可能不应该令人惊讶。它们通常在语言上表现良好，从[第一个有效的垃圾邮件过滤器](https://paulgraham.com/better.html)到[许多其他事物](https://research.google.com/pubs/archive/35179.pdf)。
- en: Heuristics are also important because people get the encoding wrong.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 启发式方法同样重要，因为人们经常搞错编码。
- en: It would seem reasonable to assume that if you exporting a Excel sheet as a
    csv file in the most recent release of MS Excel that you would get UTF-8\. Or
    maybe UTF-16\. You would be wrong. By default, in most configurations, Excel will
    output your CSV encoded in Win-1252.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你假设在最新版的 MS Excel 中将 Excel 表格导出为 CSV 文件会得到 UTF-8 或者 UTF-16 编码，那你就错了。在大多数配置中，默认情况下，Excel
    会输出你的 CSV 以 Win-1252 编码。
- en: Win-1252 is a non-Unicode, single byte encoding. It is an extension of ASCII
    that rams enough characters for almost every European language into the unused
    8th bit. The typical Excel user has never heard of it, if they have heard of character
    encoding at all. [Ignorance is bliss](https://www.kingjamesbibleonline.org/Ecclesiastes-1-18/).
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: Win-1252 是一种非 Unicode 的单字节编码。它是 ASCII 的扩展，将几乎所有欧洲语言的字符塞入了未使用的第八位。典型的 Excel 用户从未听说过它，即使他们听说过字符编码。[无知是福](https://www.kingjamesbibleonline.org/Ecclesiastes-1-18/)。
- en: See also
  id: totrans-split-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Probably the majority of encoding detection code runs off the principles established
    by Netscape in the early 2000s. The original authors' paper describing their approach
    [is in Mozilla's archive](https://www-archive.mozilla.org/projects/intl/universalcharsetdetection).
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数编码检测代码可能都基于早期 2000 年代 Netscape 奠定的原则。原始作者描述他们方法的论文[存于 Mozilla 的档案](https://www-archive.mozilla.org/projects/intl/universalcharsetdetection)。
- en: 'There is a definite sense that auto-detecting text encoding is an instance
    of [Postel''s Law](https://en.wikipedia.org/wiki/Robustness_principle): "be conservative
    in what you do, be liberal in what you accept from others". Postel''s Law is something
    I always accepted as true but is now [increasingly controversial](https://datatracker.ietf.org/doc/html/rfc9413).
    Perhaps there is a case to be made that csvbase''s auto-detection should be a
    more explicit user interface action than a pre-selected combo-box. Answers on
    [a postcard, to the usual address](mailto:cal@calpaterson.com).'
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 自动检测文本编码确实体现了[波斯特尔法则](https://en.wikipedia.org/wiki/Robustness_principle)的一种实例：“在你所做的事情上保守，在你接受别人的事情上宽容”。波斯特尔法则是我一直认为是真理的东西，但现在[越来越有争议](https://datatracker.ietf.org/doc/html/rfc9413)。或许有理由认为
    csvbase 的自动检测应该是一个更显式的用户界面操作，而不是一个预选的组合框。关于此问题请寄明信片至[常用地址](mailto:cal@calpaterson.com)。
