- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:29:05'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:29:05'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Understanding and avoiding visually ambiguous characters in IDs
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解并避免ID中的视觉歧义字符
- en: 来源：[https://gajus.com/blog/avoiding-visually-ambiguous-characters-in-ids](https://gajus.com/blog/avoiding-visually-ambiguous-characters-in-ids)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://gajus.com/blog/avoiding-visually-ambiguous-characters-in-ids](https://gajus.com/blog/avoiding-visually-ambiguous-characters-in-ids)
- en: It is not uncommon that I need to write down or communicate IDs when interacting
    with systems, e.g. reporting a bug, entering a discount code, or tracking a package.
    It is frustrating when the experience is marred by an easy mistake to avoid -
    visually ambiguous characters.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当与系统交互时，例如报告错误，输入折扣代码或跟踪包裹时，我通常需要书写或传达ID。当经验因易于避免的错误而受损时，这非常令人沮丧 - 视觉上的歧义字符。
- en: '`O` / `0` - The letter `O` and the number `0` can look very similar, especially
    in fonts where the number zero isn’t slashed or dotted.'
  id: totrans-split-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`O` / `0` - 字母 `O` 和数字 `0` 在某些字体中看起来非常相似，尤其是在没有斜线或点的数字零的字体中。'
- en: '`I` / `l` / `1` / `7` - The letter `I` (uppercase `i`), lowercase `l` (`L`),
    the number `1`, and the number `7` ^([1](#user-content-fn-1)) can be indistinguishable
    in many types of print and handwriting.'
  id: totrans-split-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`I` / `l` / `1` / `7` - 字母 `I`（大写 `i`），小写 `l`（`L`），数字 `1` 和数字 `7` ^([1](#user-content-fn-1))
    在许多印刷和手写形式中难以区分。'
- en: '`5` / `S` - In some fonts, the number `5` and the letter `S` can appear quite
    similar.'
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`5` / `S` - 在某些字体中，数字 `5` 和字母 `S` 可能非常相似。'
- en: '`2` / `Z` - These can also be confused with each other, particularly in handwritten
    forms.'
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2` / `Z` - 在手写形式中特别容易混淆。'
- en: '`8` / `B` - These characters might be mixed up when poorly written or in certain
    stylized fonts.'
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`8` / `B` - 这些字符在书写不清或某些风格化字体中可能会混淆。'
- en: '`6` / `G` - These characters can be confused in some fonts.'
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`6` / `G` - 在某些字体中这些字符可能会混淆。'
- en: '`9` / `q` / `g` - These characters can be confused in some fonts.'
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`9` / `q` / `g` - 在某些字体中这些字符可能会混淆。'
- en: They cause confusion and errors in data entry, especially when the characters
    are handwritten or when the font is not clear. For example, if a user is trying
    to enter a code that contains the letter 'O' and the number '0', they might not
    be able to tell which character is which. This leads to frustrating user experiences.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 它们在数据输入时引起混淆和错误，特别是在手写或字体不清晰的情况下。例如，如果用户试图输入包含字母 'O' 和数字 '0' 的代码，他们可能无法确定哪个字符是哪个。这导致令人沮丧的用户体验。
- en: 'A few examples using different system fonts:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不同系统字体的几个示例：
- en: 9qg6G8B2Z5SIl170O (arial)
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9qg6G8B2Z5SIl170O (arial)
- en: 9qg6G8B2Z5SIl170O (helvetica)
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9qg6G8B2Z5SIl170O (helvetica)
- en: 9qg6G8B2Z5SIl170O (courier)
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9qg6G8B2Z5SIl170O (courier)
- en: 9qg6G8B2Z5SIl170O (times)
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9qg6G8B2Z5SIl170O (times)
- en: 9qg6G8B2Z5SIl170O (verdana)
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9qg6G8B2Z5SIl170O (verdana)
- en: 9qg6G8B2Z5SIl170O (georgia)
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9qg6G8B2Z5SIl170O (georgia)
- en: 9qg6G8B2Z5SIl170O (tahoma)
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9qg6G8B2Z5SIl170O (tahoma)
- en: 9qg6G8B2Z5SIl170O (impact)
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9qg6G8B2Z5SIl170O (impact)
- en: 9qg6G8B2Z5SIl170O (comic sans)
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 9qg6G8B2Z5SIl170O (comic sans)
- en: Some pairs are visually ambiguous in all fonts (e.g. `I` and `l`), while others
    are much harder to distinguish in handwritten forms, e.g. try writing `9qg` in
    your own handwriting.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有些字符对在所有字体中都视觉上有歧义（例如 `I` 和 `l`），而其他字符在手写形式中更难以区分，例如试着自己手写 `9qg`。
- en: Any time that the ID might need to be communicated verbally or written down,
    e.g.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每当需要口头或书面传达ID时，例如
- en: Customer support
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户支持
- en: Discount codes
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 折扣码
- en: Tracking codes
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 追踪代码
- en: Error IDs
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误ID
- en: Product IDs
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品ID
- en: etc.
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等等。
- en: You may also consider whether your IDs should be case-sensitive or not. Is `abc`
    the same as `ABC`?
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以考虑您的ID是否应区分大小写。`abc` 是否等同于 `ABC`？
- en: Assuming that you are going with case sensitivity, you have 53 characters to
    choose from (adjusted for visually ambiguous characters). On the other hand, if
    you decide to make your IDs case-insensitive, you have only 22 characters to choose
    from.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您选择区分大小写，您有53个字符可供选择（考虑到视觉上的歧义字符）。另一方面，如果您决定使您的ID不区分大小写，您只有22个字符可供选择。
- en: 'Assuming an ID length of 5 characters, you have the following number of possible
    IDs:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 假设ID长度为5个字符，您有以下可能的ID数量：
- en: 'Case-sensitive: 53^5 = 418,195,493'
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区分大小写：53^5 = 418,195,493
- en: 'Case-insensitive: 22^5 = 5,153,632'
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不区分大小写：22^5 = 5,153,632
- en: However, as the number of members in the set increases, the number of possible
    IDs increases exponentially.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着集合中成员数量的增加，可能的ID数量呈指数增长。
- en: 'Case-sensitive: 53^8 = 62,259,690,411,361'
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区分大小写：53^8 = 62,259,690,411,361
- en: 'Case-insensitive: 22^8 = 54,875,873,536'
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不区分大小写：22^8 = 54,875,873,536
- en: Therefore, the real question is whether what's preferable is a shorter ID with
    a higher chance of visual ambiguity or a longer ID with a lower chance of visual
    ambiguity.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，真正的问题是，是更短的 ID，但视觉上的混淆可能性更高，还是更长的 ID，但视觉上的混淆可能性更低，更为可取。
- en: As pointed out in a Hacker News comment ^([2](#user-content-fn-2)), if you use
    both upper and lower case, you are likely to eventually be surprised by some third
    party system or protocol that is case insensitive.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如一个 Hacker News 评论 ^([2](#user-content-fn-2)) 指出的，如果同时使用大小写，你可能最终会被一些大小写不敏感的第三方系统或协议所惊讶。
- en: I even found a commercial system which allowed users to choose IDs with case
    sensitivity (iD and id being distinct) but if you query it for one which does
    not exist they do case insensitive matching and return the wrong data.
  id: totrans-split-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我甚至发现了一个商业系统，允许用户选择区分大小写的 ID（例如 iD 和 id 是不同的），但如果查询不存在的 ID，则会执行大小写不敏感匹配并返回错误的数据。
- en: When I reported this bug they said it was for convenience!
  id: totrans-split-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当我报告这个错误时，他们说这是为了方便！
- en: 'As my preference is readability, this is the character set that I use for generating
    IDs in my projects:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 出于可读性的考虑，这是我在项目中生成 ID 时使用的字符集：
- en: '[PRE0]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`rn` (looks like `m`) ^([3](#user-content-fn-3))'
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rn`（看起来像 `m`） ^([3](#user-content-fn-3))'
- en: '`vv` (looks like `w`) ^([4](#user-content-fn-4))'
  id: totrans-split-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vv`（看起来像 `w`） ^([4](#user-content-fn-4))'
- en: Personally, I would be wary of excluding characters just because they look like
    other characters when combined. Avoiding these particular combinations might be
    a good idea at the ID generation level.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 就个人偏好而言，我会谨慎地排除某些看起来像其他字符组合的字符。在生成 ID 的级别上避免这些特定组合可能是个好主意。
- en: In some cases, you might also want to avoid characters that sound similar when
    spoken. For example, `b` and `p` can sound similar when spoken out loud. This
    can be especially important in situations where IDs are communicated verbally.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能还希望避免在口头沟通时听起来相似的字符。例如，`b` 和 `p` 在口语中可能听起来相似。这在口头传达 ID 的情况下尤为重要。
- en: Crockford’s [Base32](https://www.crockford.com/base32.html) (distinct from the
    [IETF Base32](https://www.rfc-editor.org/rfc/rfc4648#page-8))
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: Crockford 的 [Base32](https://www.crockford.com/base32.html)（与 [IETF Base32](https://www.rfc-editor.org/rfc/rfc4648#page-8)
    不同）
- en: This takes the approach of allowing ambiguous characters by decoding them to
    the same value, and also considers the problem of accidental obscenities.
  id: totrans-split-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这采用的方法允许通过将其解码为相同值来处理模棱两可的字符，并且还考虑了意外的不雅用语问题。
- en: '[Open Location Code](https://github.com/google/open-location-code)'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[开放地理编码（Open Location Code）](https://github.com/google/open-location-code)'
- en: A character set I like to use when I need something like this is the one used
    by Open Location Code, which is 23456789CFGHJMPQRVWX. It was apparently chosen
    not only to avoid visually ambiguous characters, but also to [avoid spelling words
    in common languages](https://github.com/google/open-location-code/wiki/Evaluation-of-Location-Encoding-Systems#open-location-code).
    It does however include both 6 and G, as well as 9 and Q.
  id: totrans-split-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我喜欢在需要类似字符集时使用的是 Open Location Code 使用的字符集，其中包括 23456789CFGHJMPQRVWX。显然，这些字符不仅避免视觉上的混淆，还避免了在
    [常见语言中拼写单词](https://github.com/google/open-location-code/wiki/Evaluation-of-Location-Encoding-Systems#open-location-code)。然而，它确实包含了
    6 和 G，以及 9 和 Q。
