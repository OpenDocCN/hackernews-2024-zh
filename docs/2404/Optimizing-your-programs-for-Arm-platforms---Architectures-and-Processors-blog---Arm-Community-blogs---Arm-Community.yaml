- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:33:10'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:33:10
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Optimizing your programs for Arm platforms - Architectures and Processors blog
    - Arm Community blogs - Arm Community
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化您的 Arm 平台程序 - 架构和处理器博客 - Arm 社区博客 - Arm 社区
- en: 来源：[https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/optimizing-your-programs-for-arm-platforms](https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/optimizing-your-programs-for-arm-platforms)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/optimizing-your-programs-for-arm-platforms](https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/optimizing-your-programs-for-arm-platforms)
- en: Today’s compilers are quite good at producing highly optimized code on their
    own. However, there are several cases where you as the programmer can help compilers
    generate better code. This blog post covers techniques and tips that are useful
    to create better performing programs whether you are creating Android, Desktop
    or Server applications.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的编译器在自动产生高度优化的代码方面表现相当出色。然而，作为程序员，您可以帮助编译器生成更好的代码的情况还有几种。本博客文章涵盖了一些技术和提示，这些对于创建性能更好的程序非常有用，无论您是创建
    Android、桌面还是服务器应用程序。
- en: Memory aliasing and the ‘restrict’ keyword
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存别名和 'restrict' 关键字
- en: Whenever a compiler auto-vectorizes code, it needs to first be sure that this
    is safe to do. One of the performed safety checks is for pointer aliasing. This
    check is used to see if the pointers the compiler is reading and writing can be
    pointing to the same data. When the compiler cannot determine this statically,
    it has to insert a runtime check.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每当编译器自动向量化代码时，它首先需要确保这样做是安全的。进行的安全性检查之一是指针别名检查。此检查用于查看编译器读取和写入的指针是否可能指向相同的数据。当编译器无法静态确定时，它必须插入运行时检查。
- en: These checks can slow your program down significantly or, even worse, fail to
    vectorize entirely if it can not insert the runtime checks. However, there is
    a way for you as the programmer to tell the compiler to go ahead and assume the
    pointers do not alias. Read the following Learning Path in the URL that explains
    the importance of using the ‘restrict’ keyword in C correctly.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些检查无法插入运行时检查，您的程序速度可能会显著减慢，甚至无法完全进行向量化。然而，作为程序员，您可以通过告诉编译器假定指针不别名的方式来解决这个问题。阅读以下
    URL 中的学习路径，详细说明了在 C 中正确使用 'restrict' 关键字的重要性。
- en: '[CTAToken URL = "https://learn.arm.com/learning-paths/cross-platform/restrict-keyword-c99/"
    target="_blank" text="Learn about the restrict keyword" class ="green"]'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[CTAToken URL = "https://learn.arm.com/learning-paths/cross-platform/restrict-keyword-c99/"
    target="_blank" text="了解 restrict 关键字" class ="green"]'
- en: Memory latency
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存延迟
- en: Loading and storing data to memory is an activity that takes time for the CPU
    to complete. How much time depends on several factors, but there are various things
    that you as the programmer can do to improve this access time. Often compilers
    cannot do these for you and so knowing these techniques can give your program
    the edge it needs. Read the Memory Latency Learning Path in the following URL
    to gain a better understanding of caches, prefetching and data alignment on Arm
    platforms.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 加载和存储数据到内存是 CPU 完成的活动，需要一定时间。这个时间取决于几个因素，但是作为程序员，有很多事情可以做来提高访问时间。通常编译器无法为您完成这些工作，因此了解这些技术可以让您的程序具备必要的优势。阅读以下
    URL 中的 Memory Latency 学习路径，以更好地理解在 Arm 平台上的高速缓存、预取和数据对齐。
- en: '[CTAToken URL = "https://learn.arm.com/learning-paths/cross-platform/memory-latency/"
    target="_blank" text="Learn about memory latency" class ="green"]'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[CTAToken URL = "https://learn.arm.com/learning-paths/cross-platform/memory-latency/"
    target="_blank" text="了解内存延迟" class ="green"]'
- en: Leveraging integer vs floating point
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用整数与浮点数
- en: Performing operations using integer arithmetic instead of floating-point arithmetic
    can often result in significantly faster programs, as CPUs tend to have more bandwidth
    to perform integer arithmetic. However, there are cases where, due to the semantics
    of the programming language, you inadvertently end up with floating point operations.
    One common pitfall is implicit conversions to floating-point. Read the Speed benefit
    of integer vs float Learning Path in the following URL to find out how to avoid
    these pitfalls and leverage the power of integer performance for faster programs.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用整数算术而不是浮点算术执行操作通常可以显著提高程序速度，因为 CPU 倾向于具有更多整数算术的带宽。然而，有些情况下，由于编程语言的语义，您可能会不经意地进行浮点运算。一个常见的陷阱是隐式转换为浮点数。阅读以下
    URL 中的 Speed benefit of integer vs float 学习路径，了解如何避免这些陷阱，并利用整数性能的力量来实现更快的程序。
- en: '[CTAToken URL = "https://learn.arm.com/learning-paths/cross-platform/integer-vs-floats/"
    target="_blank" text="Learn about integer vs floating point performance" class
    ="green"]'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[CTAToken URL = "https://learn.arm.com/learning-paths/cross-platform/integer-vs-floats/"
    target="_blank" text="了解整数与浮点性能差异" class ="green"]'
- en: Leveraging auto-vectorization in compilers
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在编译器中利用自动向量化
- en: Modern compilers are often referred to as optimizing compilers, because they
    perform various optimizations and transformations on your input program to get
    better performance. One such optimization is the transformation of your program
    from scalar to vector. The act of vectorization refers to transforming your program
    from handling one value at a time into one that can handle multiple values at
    a time in each operation.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现代编译器通常被称为优化编译器，因为它们对输入程序执行各种优化和转换以获得更好的性能。其中一种优化是将程序从标量转换为向量。向量化的行为指的是将程序从一次处理一个值转换为一次可以处理多个值的操作。
- en: While compilers are very good at this and constantly improving, there are still
    various ways you can structure the flow of your program to make it easier for
    the compiler to perform auto-vectorization and leverage the power of Advanced
    SIMD and SVE instructions.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然编译器在这方面非常出色并不断改进，但仍然有各种方法可以结构化程序的流程，以便更容易地进行自动向量化并利用先进的 SIMD 和 SVE 指令的能力。
- en: 'Intrigued? Read more in the following URL:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有兴趣吗？在以下网址阅读更多：
- en: '[CTAToken URL = "https://learn.arm.com/learning-paths/cross-platform/loop-reflowing/"
    target="_blank" text="Learn how to leverage auto-vectorization" class ="green"]'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[CTAToken URL = "https://learn.arm.com/learning-paths/cross-platform/loop-reflowing/"
    target="_blank" text="了解如何利用自动向量化" class ="green"]'
- en: Modifying loop layout to be auto-vectorization friendly
  id: totrans-split-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改循环布局以支持自动向量化
- en: Of equal importance when writing auto-vectorization friendly programs is the
    data layout. When the compiler is transforming loops during auto-vectorization
    It makes a significant difference whether it can be load data sequentially, or
    whether it needs to skip some elements, for instance loading every other element.
    Even accesses like reading a field of a struct inside an array, such as data[i].x,
    can result in strided accesses.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 编写自动向量化友好程序同样重要的是数据布局。在自动向量化时，编译器转换循环时，它能够顺序加载数据或者需要跳过某些元素（例如每隔一个元素加载）。即使像在数组中读取结构体中的字段，如data[i].x，也可能导致步进访问。
- en: An efficient data layout can be the difference between a slow and very fast
    program. This is one area where the compiler often does not have enough context
    to be able to help and where it is important for the programmer to understand
    how they can help the compiler. Interested in taking your program’s performance
    to the next level? Read more in the link below.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 高效的数据布局可以决定程序是慢还是非常快。这是编译器通常无法提供足够上下文帮助的领域之一，程序员了解如何帮助编译器非常重要。有兴趣将程序性能提升到下一个级别吗？请在下面的链接中继续阅读。
- en: '[CTAToken URL = "https://learn.arm.com/learning-paths/cross-platform/vectorization-friendly-data-layout/data-layout-basics/"
    target="_blank" text="Learn about data layout" class ="green"]'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[CTAToken URL = "https://learn.arm.com/learning-paths/cross-platform/vectorization-friendly-data-layout/data-layout-basics/"
    target="_blank" text="了解数据布局" class ="green"]'
- en: Summary
  id: totrans-split-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: The Arm architecture has plenty of great features that when used properly can
    significantly improve your program's performance. It is easy to take advantage
    of them if you keep the tips and background knowledge in mind.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: Arm 架构具有许多出色的功能，如果正确使用，可以显著提高程序的性能。如果您记住了提示和背景知识，就很容易利用它们。
- en: 'Be sure to read the other Learning Paths here: [https://learn.arm.com](https://learn.arm.com) for
    other helpful and informative tips on how to best leverage all that the Arm platform
    provides.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要阅读这里的其他学习路径：[https://learn.arm.com](https://learn.arm.com)，获取有关如何充分利用 Arm
    平台提供的所有信息和提示。
- en: '[CTAToken URL = "https://learn.arm.com/" target="_blank" text="Read more Arm
    Learning Paths" class ="green"]'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[CTAToken URL = "https://learn.arm.com/" target="_blank" text="阅读更多 Arm 学习路径"
    class ="green"]'
