["```\n* **bug#70209: 30.0.50; describe key + lambda too poetic**\n@ 2024-04-05  4:47 No Wayman\n  2024-04-05  5:07 ` No Wayman\n  0 siblings, 1 reply; 8+ messages in thread\nFrom: No Wayman @ 2024-04-05  4:47 UTC (permalink / raw)\n  To: 70209\n\nGNU Emacs 30.0.50 (build 1, x86_64-pc-linux-gnu, GTK+ Version \n3.24.41, cairo version 1.18.0) of 2024-04-02  \n\nemacs -Q --batch \\\n--eval '(global-set-key (kbd \"c\") (lambda () (interactive) t))' \\\n--eval '(describe-key \"c\")' \\\n--eval '(with-current-buffer \"*Help*\" (print \n  (buffer-substring-no-properties (point-min) (point-max))))'\n\nOutputs the following poetry:\n\n\"c runs the command #<closure 0FE> (found in global-map), which is \n.\n\nIt is bound to c.\n\n(anonymous)\n\"\n\n\"which is...\"?\nWhat is describe-key trying to tell us?\nIs it respecting the function's wish to remain anonymous?\nIs it commentary on the limits of descriptive language?\nI can only respond with the output of M-x describe-feelings:\n\n\"It is bound to c, yet I see a bind:\nThough closure mentioned, none I've yet to find.\"\n~ Anonymous\n\n^ permalink raw reply\t[**flat**|nested] 8+ messages in thread\n```", "```\n* bug#70209: 30.0.50; describe key + lambda too poetic\n  2024-04-05  4:47 bug#70209: 30.0.50; describe key + lambda too poetic No Wayman\n@ 2024-04-05  5:07 ` No Wayman\n  2024-04-05  5:43   ` Eli Zaretskii\n  2024-04-05 11:44   ` Stefan Monnier via Bug reports for GNU Emacs, the Swiss army knife of text editors\n  0 siblings, 2 replies; 8+ messages in thread\nFrom: No Wayman @ 2024-04-05  5:07 UTC (permalink / raw)\n  To: 70209\n\n[-- Attachment #1: Type: text/plain, Size: 32 bytes --]\n\nSee attached patch, which is.\n\n[-- Warning: decoded text below may be mangled, UTF-8 assumed --]\n[-- Attachment #2: 0001-Include-lambda-type-in-describe-key-output.patch --]\n[-- Type: text/x-patch, Size: 903 bytes --]\n\nFrom 65f0f2fa251a7b18c15698460c499394b931d09d Mon Sep 17 00:00:00 2001\nFrom: Nicholas Vollmer <iarchivedmywholelife@gmail.com>\nDate: Thu, 4 Apr 2024 23:54:42 -0400\nSubject: [PATCH] Include lambda type in describe-key output\n\n* lisp/help-fns.el (help-fns-function-description-header):\nAdd case to describe lambda forms (Bug#70209).\n---\n lisp/help-fns.el | 2 ++\n 1 file changed, 2 insertions(+)\n\n[diff](#iZ2e.:..:87wmpc9z38.fsf::40gmail.com:2lisp:help-fns.el) --git a/lisp/help-fns.el b/lisp/help-fns.el\nindex a291893e9a2..3a5984d5b84 100644\n--- a/lisp/help-fns.el\n+++ b/lisp/help-fns.el @@ [-1102,6](../../a291893e9a2/s/?b=lisp/help-fns.el#n1102) [+1102,8](../../3a5984d5b84/s/?b=lisp/help-fns.el#n1102) @@ help-fns-function-description-header\n \t\t\t\telts nil))\n \t\t      (setq elts (cdr-safe elts)))\n \t\t    (concat beg (if is-full \"keymap\" \"sparse keymap\"))))\n+                 ((eq (car-safe def) 'lambda)\n+                  (concat beg \"anonymous Lisp function\"))\n \t\t (t \"\"))))\n     (with-current-buffer standard-output\n       (insert description))\n-- \n2.44.0\n\n^ permalink raw reply related\t[**flat**|nested] 8+ messages in thread\n```", "```\n* bug#70209: 30.0.50; describe key + lambda too poetic\n  2024-04-05  5:07 ` No Wayman\n@ 2024-04-05  5:43   ` Eli Zaretskii\n  2024-04-05 11:44   ` Stefan Monnier via Bug reports for GNU Emacs, the Swiss army knife of text editors\n  1 sibling, 0 replies; 8+ messages in thread\nFrom: Eli Zaretskii @ 2024-04-05  5:43 UTC (permalink / raw)\n  To: No Wayman, Stefan Monnier; +Cc: 70209\n\n> From: No Wayman <iarchivedmywholelife@gmail.com>\n> Date: Fri, 05 Apr 2024 01:07:39 -0400\n> \n> See attached patch, which is. \nThanks.  Stefan, any comments?\n\n^ permalink raw reply\t[**flat**|nested] 8+ messages in thread\n```", "```\n* bug#70209: 30.0.50; describe key + lambda too poetic\n  2024-04-05  5:07 ` No Wayman\n  2024-04-05  5:43   ` Eli Zaretskii\n@ 2024-04-05 11:44   ` Stefan Monnier via Bug reports for GNU Emacs, the Swiss army knife of text editors\n  2024-04-05 20:58     ` No Wayman\n  1 sibling, 1 reply; 8+ messages in thread\nFrom: Stefan Monnier via Bug reports for GNU Emacs, the Swiss army knife of text editors @ 2024-04-05 11:44 UTC (permalink / raw)\n  To: No Wayman; +Cc: 70209\n\nThank you for your enjoyable bug report and the suggested patch.\n\n> @@ -1102,6 +1102,8 @@ help-fns-function-description-header\n>  \t\t\t\telts nil))\n>  \t\t      (setq elts (cdr-safe elts)))\n>  \t\t    (concat beg (if is-full \"keymap\" \"sparse keymap\"))))\n> +                 ((eq (car-safe def) 'lambda)\n> +                  (concat beg \"anonymous Lisp function\"))\n>  \t\t (t \"\"))))\n>      (with-current-buffer standard-output\n>        (insert description)) \nActually, I think this won't help because in my test the `car` of `def`\nis `closure` rather than `lambda`.\n\nI installed the patch below instead.\n\n        Stefan\n\ndiff --git a/lisp/help-fns.el b/lisp/help-fns.el\nindex a291893e9a2..27011575333 100644\n--- a/lisp/help-fns.el\n+++ b/lisp/help-fns.el @@ [-1086,13](../../a291893e9a2/s/?b=lisp/help-fns.el#n1086) [+1086,6](../../27011575333/s/?b=lisp/help-fns.el#n1086) @@ help-fns-function-description-header\n \t\t      ;; need to check macros before functions.\n \t\t      (macrop function))\n \t\t  (concat beg \"Lisp macro\"))\n-\t\t ((atom def)\n-\t\t  (let ((type (or (oclosure-type def) (cl-type-of def))))\n-\t\t    (concat beg (format \"%s\"\n-\t\t                        (make-text-button\n-\t\t                         (symbol-name type) nil\n-\t\t                         'type 'help-type\n-\t\t                         'help-args (list type))))))\n \t\t ((keymapp def)\n \t\t  (let ((is-full nil)\n \t\t\t(elts (cdr-safe def)))\n@@ [-1102,7](../../a291893e9a2/s/?b=lisp/help-fns.el#n1102) [+1095,16](../../27011575333/s/?b=lisp/help-fns.el#n1095) @@ help-fns-function-description-header\n \t\t\t\telts nil))\n \t\t      (setq elts (cdr-safe elts)))\n \t\t    (concat beg (if is-full \"keymap\" \"sparse keymap\"))))\n-\t\t (t \"\")))) +\t\t (t\n+\t\t  (let ((type\n+\t\t         (if (and (consp def) (symbolp (car def)))\n+\t\t             (car def)\n+\t\t           (or (oclosure-type def) (cl-type-of def)))))\n+\t\t    (concat beg (format \"%s\"\n+\t\t                        (make-text-button\n+\t\t                         (symbol-name type) nil\n+\t\t                         'type 'help-type\n+\t\t                         'help-args (list type)))))))))\n     (with-current-buffer standard-output\n       (insert description))\n\n^ permalink raw reply related\t[**flat**|nested] 8+ messages in thread\n```", "```\n* bug#70209: 30.0.50; describe key + lambda too poetic\n  2024-04-05 11:44   ` Stefan Monnier via Bug reports for GNU Emacs, the Swiss army knife of text editors\n@ 2024-04-05 20:58     ` No Wayman\n  2024-04-05 22:32       ` Stefan Monnier via Bug reports for GNU Emacs, the Swiss army knife of text editors\n  0 siblings, 1 reply; 8+ messages in thread\nFrom: No Wayman @ 2024-04-05 20:58 UTC (permalink / raw)\n  To: Stefan Monnier; +Cc: 70209\n\nStefan Monnier <monnier@iro.umontreal.ca> writes:\n\n> Thank you for your enjoyable bug report and the suggested patch. \n:)\n\n> Actually, I think this won't help because in my test the `car` \n> of `def`\n> is `closure` rather than `lambda`.\n>\n> I installed the patch below instead.\n> diff --git a/lisp/help-fns.el b/lisp/help-fns.el\n> index a291893e9a2..27011575333 100644 \nWith patch applied, thy *scratch* prepared to itch which I bemoan,\n*Help* link replied, its ink ensnared, with \"lambda, type \n Unknown.\"[1]\nApostrophized: \"Be tossed, repaired, my user-error thrown!\"\nWith paren pride, I then declared a test which I have shown.[2]\nTest now revised as thou compared. Composure hath no throne\nwhen teary-eyed, in fear I blared, \"My closure! Type Unknown?\"\n\n[1]:\nemacs -Q --batch \\\n--eval '(global-set-key (kbd \"c\") `(lambda () (interactive) t)))' \n  \\\n--eval '(describe-key \"c\")' \\\n--eval '(with-current-buffer \"*Help*\"\n           (forward-button 2)\n           (push-button)\n           (print (buffer-substring-no-properties (point-min) \n           (point-max))))'\n\nUnknown type lambda\n\n[2]:\nemacs -Q --batch \\\n--eval '(global-set-key (kbd \"c\") (lambda () (interactive) t)))' \\\n--eval '(describe-key \"c\")' \\\n--eval '(with-current-buffer \"*Help*\"\n           (forward-button 2)\n           (push-button)\n           (print (buffer-substring-no-properties (point-min) \n           (point-max))))'\n\nUnknown type closure\n\n^ permalink raw reply\t[**flat**|nested] 8+ messages in thread\n```", "```\n* bug#70209: 30.0.50; describe key + lambda too poetic\n  2024-04-05 20:58     ` No Wayman\n@ 2024-04-05 22:32       ` Stefan Monnier via Bug reports for GNU Emacs, the Swiss army knife of text editors\n  2024-04-06  5:36         ` No Wayman\n  0 siblings, 1 reply; 8+ messages in thread\nFrom: Stefan Monnier via Bug reports for GNU Emacs, the Swiss army knife of text editors @ 2024-04-05 22:32 UTC (permalink / raw)\n  To: No Wayman; +Cc: 70209\n\n> [1]:\n> emacs -Q --batch \\\n> --eval '(global-set-key (kbd \"c\") `(lambda () (interactive) t)))'   \\\n> --eval '(describe-key \"c\")' \\\n> --eval '(with-current-buffer \"*Help*\"\n>           (forward-button 2)\n>           (push-button)\n>           (print (buffer-substring-no-properties (point-min)\n>            (point-max))))'\n>\n> Unknown type lambda \nThat's mild punishment for quoting a lambda.\n\n> [2]:\n> emacs -Q --batch \\\n> --eval '(global-set-key (kbd \"c\") (lambda () (interactive) t)))' \\\n> --eval '(describe-key \"c\")' \\\n> --eval '(with-current-buffer \"*Help*\"\n>           (forward-button 2)\n>           (push-button)\n>           (print (buffer-substring-no-properties (point-min)\n>            (point-max))))'\n>\n> Unknown type closure \nOK, OK, I relent, it shouldn't be button.\nShould be fixed now on `master`, thanks to the handy patch below.\n\n        Stefan\n\ndiff --git a/lisp/help-fns.el b/lisp/help-fns.el\nindex 27011575333..cfe27077055 100644\n--- a/lisp/help-fns.el\n+++ b/lisp/help-fns.el @@ [-1096,15](../../27011575333/s/?b=lisp/help-fns.el#n1096) [+1096,15](../../cfe27077055/s/?b=lisp/help-fns.el#n1096) @@ help-fns-function-description-header\n \t\t      (setq elts (cdr-safe elts)))\n \t\t    (concat beg (if is-full \"keymap\" \"sparse keymap\"))))\n \t\t (t\n-\t\t  (let ((type\n-\t\t         (if (and (consp def) (symbolp (car def)))\n-\t\t             (car def)\n-\t\t           (or (oclosure-type def) (cl-type-of def)))))\n-\t\t    (concat beg (format \"%s\"\n-\t\t                        (make-text-button\n-\t\t                         (symbol-name type) nil\n-\t\t                         'type 'help-type\n-\t\t                         'help-args (list type))))))))) +\t\t  (concat beg (format \"%s\"\n+\t\t                      (if (and (consp def) (symbolp (car def)))\n+\t\t                          (car def)\n+\t\t                        (let ((type (or (oclosure-type def)\n+\t\t                                        (cl-type-of def))))\n+\t\t                          (make-text-button\n+\t\t                           (symbol-name type) nil\n+\t\t                           'type 'help-type\n+\t\t                           'help-args (list type))))))))))\n     (with-current-buffer standard-output\n       (insert description))\n\n^ permalink raw reply related\t[**flat**|nested] 8+ messages in thread\n```", "```\n* bug#70209: 30.0.50; describe key + lambda too poetic\n  2024-04-05 22:32       ` Stefan Monnier via Bug reports for GNU Emacs, the Swiss army knife of text editors\n@ 2024-04-06  5:36         ` No Wayman\n  2024-04-06 13:17           ` Stefan Monnier via Bug reports for GNU Emacs, the Swiss army knife of text editors\n  0 siblings, 1 reply; 8+ messages in thread\nFrom: No Wayman @ 2024-04-06  5:36 UTC (permalink / raw)\n  To: Stefan Monnier; +Cc: 70209\n\nStefan Monnier <monnier@iro.umontreal.ca> writes: \n\n> That's mild punishment for quoting a lambda. \nAlas, that form doth quote itself!\nA parcel pulled from off the shelf\nunfurls a worm somewhat shoddy \nwhen passed betwixt macro's body.\n\n> OK, OK, I relent, it shouldn't be button.  Should be fixed now \n> on `master`, thanks to the handy patch below. \nAnd though the worm may bore the fruit\nthou treat it warm! No frore repute!\nSoil tilled from core to clover.\nThy patch doth bring a type of closure.\n\n;; poem.el ends here\n\nThanks, Stefan\n\n^ permalink raw reply\t[**flat**|nested] 8+ messages in thread\n```", "```\n* bug#70209: 30.0.50; describe key + lambda too poetic\n  2024-04-06  5:36         ` No Wayman\n@ 2024-04-06 13:17           ` Stefan Monnier via Bug reports for GNU Emacs, the Swiss army knife of text editors\n  0 siblings, 0 replies; 8+ messages in thread\nFrom: Stefan Monnier via Bug reports for GNU Emacs, the Swiss army knife of text editors @ 2024-04-06 13:17 UTC (permalink / raw)\n  To: No Wayman; +Cc: 70209-done\n\n> Thanks, Stefan \nMy pleasure, closing,\n\n        Stefan\n\n^ permalink raw reply\t[**flat**|nested] 8+ messages in thread\n```", "```\nend of thread, other threads:[~2024-04-06 13:17 UTC | newest]\n\nThread overview: 8+ messages (download: mbox.gz / follow: Atom feed)\n-- links below jump to the message on this page --\n2024-04-05  4:47 bug#70209: 30.0.50; describe key + lambda too poetic No Wayman\n2024-04-05  5:07 ` No Wayman\n2024-04-05  5:43   ` Eli Zaretskii\n2024-04-05 11:44   ` Stefan Monnier via Bug reports for GNU Emacs, the Swiss army knife of text editors\n2024-04-05 20:58     ` No Wayman\n2024-04-05 22:32       ` Stefan Monnier via Bug reports for GNU Emacs, the Swiss army knife of text editors\n2024-04-06  5:36         ` No Wayman\n2024-04-06 13:17           ` Stefan Monnier via Bug reports for GNU Emacs, the Swiss army knife of text editors\n\n```", "```\nCode repositories for project(s) associated with this public inbox https://git.savannah.gnu.org/cgit/emacs.git\n\nThis is a public inbox, see mirroring instructions\nfor how to clone and mirror all data and code used for this inbox;\nas well as URLs for read-only IMAP folder(s) and NNTP newsgroup(s).\n```"]