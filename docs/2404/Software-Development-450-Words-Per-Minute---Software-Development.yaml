- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 12:56:19'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 12:56:19'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Software Development 450 Words Per Minute | Software Development
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件开发 450 字每分钟 | 软件开发
- en: 来源：[https://www.vincit.com/blog/software-development-450-words-per-minute](https://www.vincit.com/blog/software-development-450-words-per-minute)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.vincit.com/blog/software-development-450-words-per-minute](https://www.vincit.com/blog/software-development-450-words-per-minute)
- en: “Something’s a little bit off here.” That’s what I predict your first thought
    to be upon seeing my cubicle for the first time. There’s no screen or mouse in
    sight. Instead there’s a guy hammering away on a keyboard, staring at seemingly
    nothing.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: “这里有点奇怪。” 这可能是你第一次看到我小隔间时的第一个想法。屏幕或鼠标都看不到，取而代之的是一个在键盘上敲击的家伙，看似盯着无物。
- en: It’s only me, and my colleagues can assure you that I’m mostly harmless. I’m
    a [software developer working at Vincit](https://www.vincit.com/careers) offices
    in Tampere. I’m also blind. In this blog post I’m going to shed some light on
    the way I work.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 只有我，我的同事可以向你保证，我大多数时候是无害的。我是在坦佩雷的Vincit办公室工作的[软件开发人员](https://www.vincit.com/careers)。我也是盲人。在这篇博文中，我将揭示我工作的方式。
- en: Are you blind as in actually blind?
  id: totrans-split-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Are you blind as in actually blind?
- en: Correct. I can perceive sunlight and some other really bright lights but that’s
    about it. In essence, nothing that would be useful for me at work.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: Correct. 我可以感知阳光和一些其他非常明亮的光线，但仅限于此。实质上，在工作中对我没有什么用处。
- en: What are you doing there, then?
  id: totrans-split-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: What are you doing there, then?
- en: 'The same as almost everyone else, that is: [developing software](https://www.vincit.com/services)
    and bantering with my colleagues whenever the time permits. I have worked in [full
    stack web projects](/offering/websites-and-desktop-applications) with a focus
    on the backend. I have also taken up the role of a general accessibility consultant — or
    police; depends on how you look at it.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 就像几乎所有其他人一样，我开发软件，并在时间允许时与同事闲聊。我在全栈Web项目中担任后端重点，还承担起一般无障碍顾问的角色 — 或警察，这取决于你的观点。
- en: How do you use the computer?
  id: totrans-split-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: How do you use the computer?
- en: 'The computer I use is a perfectly normal laptop running Windows 10\. It’s in
    the software where the “magic happens”. I use a program called a screen reader
    to access the computer. A screen reader intercepts what’s happening on the screen
    and presents that information via braille (through a separate braille display)
    or synthetic speech. And it’s not the kind of synthetic speech you hear in today’s
    smart assistants. I use a robotic-sounding voice which speaks at around 450 words
    per minute. For comparison, English is commonly spoken at around 120–150 words
    per minute. There’s one additional quirk in my setup: Since I need to read both
    Finnish and English regularly I’m reading English with a Finnish speech synthesizer.
    Back in the old days screen readers weren’t smart enough to switch between languages
    automatically, so this was what I got used to. Here’s a sample of this paragraph
    being read as I would read it:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的电脑是一台完全正常的运行Windows 10的笔记本电脑。软件是“魔法”的地方。我使用一个叫做屏幕阅读器的程序来访问电脑。屏幕阅读器拦截屏幕上的内容，并通过点字（通过独立的点字显示器）或合成语音呈现信息。这并不是你今天智能助手中听到的那种合成语音。我使用的是一种机器音，以每分钟大约450个单词的速度朗读。作为比较，英语通常以每分钟120-150个单词的速度朗读。我的设置中还有一个额外的怪癖：由于我需要定期阅读芬兰语和英语，我用芬兰语的语音合成器来阅读英语。在旧日子里，屏幕阅读器还不够智能，无法自动切换语言，所以这就是我习惯的方式。以下是我朗读这段文字的样本：
- en: Finnish Sample
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: Finnish Sample
- en: English Sample
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: English Sample
- en: 'A mouse is naturally not very useful to me so I work exclusively at the keyboard.
    The commands I use should be familiar to anyone reading this post: Arrow keys
    and the tab key move you around inside a window, alt+tab changes between windows
    etc. Screen readers also have a whole lot of shortcuts of their own, such as reading
    various parts of the active window or turning some of their features on or off.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，鼠标自然不太有用，所以我完全依赖键盘工作。我使用的命令应该对任何阅读此帖子的人来说都很熟悉：箭头键和Tab键在窗口内移动，Alt+Tab在窗口间切换等等。屏幕阅读器也有很多自己的快捷键，例如阅读活动窗口的各个部分或打开/关闭某些功能。
- en: It’s when reading web pages and other formatted documents that things get a
    little interesting. You see, a screen reader presents its information in chunks.
    That chunk is most often a line but it may also be a word, a character or any
    other arbitrary piece of text. For example, if I press the down arrow key on a
    web page I hear the next line of the page. This type of reading means that I can’t
    just scan the contents of my screen the same way a sighted person would do with
    their eyes. Instead, I have to read through everything chunk by chunk, or skip
    over those chunks I don’t care about.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当阅读网页和其他格式化文档时，事情变得有点有趣。你看，屏幕阅读器将信息呈现为块状。这个块通常是一行，但也可能是一个单词、一个字符或任何其他任意的文本片段。例如，如果我在网页上按下向下箭头键，我会听到页面的下一行。这种阅读方式意味着我不能像视觉有视力的人那样扫描屏幕上的内容。相反，我必须逐块地阅读所有内容，或者跳过我不关心的那些块。
- en: 'Speech or braille alone can’t paint an accurate representation of how a window
    is laid out visually. All the information is presented to me in a linear fashion.
    If you copy a web page and paste it into notepad you get a rough idea of how web
    pages look to me. It’s just a bunch of lines stacked on top of another with most
    of the formatting stripped out. However, a screen reader can pick up on the semantics
    used in the HTML of the web page, so that links, headings, form fields etc. are
    announced to me correctly. That’s right: I don’t know that a check box is a check
    box if it’s only styled to look like one. However, more on that later; I’ll be
    devoting an entire post to this subject. Just remember that the example I just
    gave is a crime against humanity.'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 仅凭语音或盲文无法准确呈现窗口的视觉布局。所有信息都以线性方式呈现给我。如果你将网页复制并粘贴到记事本中，你会对我看网页的样子有一个大概的了解。它只是一堆堆叠在一起的行，大部分格式被剥离了。然而，屏幕阅读器可以捕捉到网页HTML中使用的语义，因此链接、标题、表单字段等能够正确地向我宣读。没错：如果只是样式上看起来像复选框，我不知道它是一个复选框。不过，稍后我会专门撰写一篇文章讨论这个问题。只记住我刚才提到的例子是反人类行为。
- en: I spend a good deal of my time working at the command line. In fact I rarely
    use any other graphical applications than a web browser and an editor. I’ve found
    that it’s often much quicker to do the task at hand on the command line than to
    use an interface which was primarily designed with mouse users in mind.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我花了很多时间在命令行上工作。实际上，除了网页浏览器和编辑器之外，我很少使用其他图形应用程序。我发现，在命令行上完成手头任务通常比使用为鼠标用户设计的界面快得多。
- en: 'So, given my love of the command line, why am I sticking with Windows, the
    operating system not known for its elegant command line tools? The answer is simple:
    Windows is the most accessible operating system there is. NVDA, my screen reader
    of choice is open source and maintained more actively than any other screen reader
    out there. If I had the choice I would use Mac OS since in my opinion it strikes
    a neat balance between usability and functionality. Unfortunately VoiceOver, the
    screen reader built in to Mac OS, suffers from long release cycles and general
    neglect, and its navigation models aren’t really compatible with my particular
    way of working. There’s also a screen reader for the Gnome desktop and, while
    excellently maintained for such a minor user base, there are still rough edges
    that make it unsuitable for my daily use. So, Windows it is. I’ve been compensating
    for Windows’ inherent deficiencies by living inside Git Bash which comes with
    an excellent set of GNU and other command line utilities out of the box.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，考虑到我对命令行的热爱，为什么我还在坚持使用 Windows，这个不以优雅的命令行工具而闻名的操作系统？答案很简单：Windows 是最具可访问性的操作系统。NVDA，我选择的屏幕阅读器，是开源的，并且比其他任何屏幕阅读器都更加活跃地维护着。如果可以选择，我会使用
    Mac OS，因为在我看来它在可用性和功能性之间取得了一个巧妙的平衡。不幸的是，Mac OS 内置的屏幕阅读器 VoiceOver 的发布周期长，受到普遍忽视，而且其导航模型与我的特定工作方式并不兼容。Gnome
    桌面也有一个屏幕阅读器，虽然对这个小众用户群体来说维护得非常好，但仍然存在一些不完善之处，使其不适合我的日常使用。所以，Windows 就是我的选择。我通过在
    Git Bash 中生活来弥补 Windows 本身的不足，这款工具箱默认包含了一套优秀的 GNU 和其他命令行实用程序。
- en: How can you code?
  id: totrans-split-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你如何编码？
- en: 'It took me quite a long time to figure out why this question was such a big
    deal for so many people. Remember what I said earlier about reading text line
    by line? That’s how I read code. I do skip over the lines that aren’t useful to
    me, or maybe listen only halfway through them just for context, but whenever I
    actually need to know what’s going on I have to read everything as if I were reading
    a novel. Naturally I can’t just read through a huge codebase like that. In those
    cases I have to abstract some parts of the code in my mind: this component takes
    x as its input and returns y, never mind what it actually does.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我花了相当长的时间才弄明白为什么这个问题对很多人来说如此重要。还记得我之前说过的一行一行阅读文本的事吗？这就是我阅读代码的方式。我会跳过对我无用的行，或者也许只听一半，仅仅是为了理解上下文，但每当我真正需要知道发生了什么时，我必须像阅读小说一样读每一行。当然，我不能像那样读完一个庞大的代码库。在这些情况下，我必须在脑海中抽象出代码的某些部分：这个组件以
    x 作为输入并返回 y，不管它实际上是做什么。
- en: This type of reading makes me do some coding tasks a little bit differently
    than my sighted colleagues. For example, [when doing a code review](https://www.vincit.com/blog/a-day-in-the-life-of-a-software-developer)
    I prefer to look at the raw diff output whenever I can. Side-by-side diffs are
    not useful to me, in fact they are a distraction if anything. The + and — signs
    are also a far better indicator of modified lines than background colours, not
    because I couldn’t get the names of those colours, but because “plus” takes far
    less time to say than some convoluted shade of red that is used for highlighting
    an added line. (I am looking at you, Gerrit.)
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这种阅读方式让我在某些编码任务上与我的视觉同事有所不同。例如，在[进行代码审查时](https://www.vincit.com/blog/a-day-in-the-life-of-a-software-developer)，我更喜欢尽可能看原始的差异输出。并排对比对我来说没有用，事实上它们只会分散注意力。+
    和 - 符号也比背景颜色更好地指示修改的行数，这不是因为我不能说出那些颜色的名字，而是因为“加号”比用于突出显示添加行的某种复杂红色更快。 （我在说你，Gerrit。）
- en: 'You might think that indentation and other code formatting would be totally
    irrelevant to me since those are primarily visual concerns. This is not true:
    proper indentation helps me just as much as it does a sighted programmer. Whenever
    I’m reading code in braille (which, by the way, is a lot more efficient than with
    speech) it gives me a good visual clue of where I am, just like it does for a
    sighted programmer. I also get verbal announcements whenever I enter an indented
    or unindented block of text. This information helps me to paint a map of the code
    in my head. In fact [Python development](/python-development-outsourcing) was
    the first real programming language I picked up (Php doesn’t count) and its forced
    indentation never posed a problem for me. I’m a strong advocate of a clean and
    consistent coding style for a number of reasons, but mostly because not having
    one makes my life much more difficult.'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为缩进和其他代码格式对我来说完全无关紧要，因为这些主要是视觉问题。这不是真的：适当的缩进对我和视觉程序员同样有帮助。每当我用盲文阅读代码（顺便说一句，这比语音要高效得多），它给了我一个很好的视觉线索，让我知道自己在哪里，就像它对视觉程序员一样。我进入缩进或未缩进的文本块时还会得到口头通知。这些信息帮助我在头脑中绘制代码的地图。事实上，[Python开发](/python-development-outsourcing)是我学会的第一门真正的编程语言（Php不算），它的强制缩进从未给我造成过问题。我强烈推崇干净一致的编码风格，有很多理由，但主要是因为没有一个风格会让我的生活变得更加困难。
- en: Which editor do you prefer?
  id: totrans-split-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你更喜欢哪个编辑器？
- en: 'Spoiler alert: The answer to this question doesn’t start with either V or E.
    (Granted, I do use Vim for crafting git commit messages and other quick notes
    on the command line. I consider myself neutral on this particular minefield.)
    A year ago my answer would have been, of all things, Notepad++. It’s a lightweight,
    well-made text editor that gets the job done. However, a year ago I hadn’t worked
    in a large-scale Java project. When that eventually happened it was time to pick
    between Notepad++ and my sanity. I ended up clinging to the latter (as long as
    I can, anyway) and ditching Notepad++ in favour of IntelliJ IDEA. It has been
    my editor of choice ever since. I have a deeply-rooted aversion towards IDEs since
    most of them are either inaccessible or inefficient to work with solely on the
    keyboard. Chances are that I would have switched to using an IDE a lot sooner
    if I was sighted.'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 剧透警告：这个问题的答案不以V或E开头。（诚然，我确实使用Vim来编写git提交消息和命令行上的其他快速注释。我对这个特定的领域保持中立。）一年前，我对这个问题的答案是Notepad++。它是一个轻量级、做事效果不错的文本编辑器。然而，一年前我还没有参与过大规模的Java项目。当这最终发生时，我必须在Notepad++和我的理智之间做出选择。最终，我选择了后者（无论如何，只要我能坚持），放弃了Notepad++，转而选择了IntelliJ
    IDEA。从那时起，它一直是我的首选编辑器。我对IDE有根深蒂固的厌恶，因为它们中大多数要么无法访问，要么在键盘操作方面效率低下。如果我能看见，很有可能我早就转向使用IDE了。
- en: 'But why Notepad++, you might ask. There are more advanced lightweight editors
    out there like Sublime text or Atom. The answer is simple: neither of them is
    accessible to screen readers. Text-mode editors like Vim aren’t an option either,
    since the screen reader I use has some problems in its support of console applications
    that prevent those editors from being used for anything longer than a commit message.
    Sadly, accessibility is the one thing that has the last word on the tools I use.
    If it’s not workable enough that I can use it efficiently, it’s out of the question.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但你可能会问为什么不用Notepad++呢？像Sublime Text或Atom这样的更先进的轻量级编辑器有更好的选择。答案很简单：它们中没有一个对屏幕阅读器友好。像Vim这样的文本模式编辑器也不是一个选择，因为我使用的屏幕阅读器在支持控制台应用程序方面存在一些问题，这些问题阻止了这些编辑器被用于超过提交消息的任何事情。可悲的是，无障碍性是我使用工具时的最后一道考量。如果我无法高效地使用它，那就不可能考虑。
- en: Do you ever work with frontend code?
  id: totrans-split-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你是否曾经处理过前端代码？
- en: You would think that frontend development was so inherently visual that it would
    be no place for a blind developer, and for the most part that is true. You won’t
    find me doing a basic Proof-of-Concept on my own, since those projects tend to
    be mostly about getting the looks right and adding the real functionality later.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为前端开发是如此视觉化，以至于盲人开发人员没有位置，这在很大程度上是正确的。你不会看到我独自完成基本的概念验证，因为这些项目通常主要是为了正确呈现外观，并稍后添加实际功能。
- en: However, I’ve had my fair share of Angular and [React](https://www.vincit.com/blog/getting-started-with-storybook-js-with-react)
    work too. How’s that? Many web apps of today have a lot going on under the hood
    in the browser. For example, I once worked a couple of weeks adding internationalization
    support to a somewhat complex Angular app. I didn’t need to do any visual changes
    at all.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我也做过相当多的Angular和[React](https://www.vincit.com/blog/getting-started-with-storybook-js-with-react)工作。怎么样？当今的许多Web应用在浏览器中有很多潜在的内容。例如，我曾经花了几周的时间向一个相当复杂的Angular应用程序添加国际化支持。我根本不需要进行任何视觉上的更改。
- en: 'I’ve found that libraries like Bootstrap are a godsend for people like me.
    Because of the grid system I can lay out a rough version of the user interface
    on my own. Despite this all the interface-related changes I’m doing are going
    through a pair of eyes before shipping to the customer. So, to sum up: I can do
    frontend development up to a point, at least while not touching the presentation
    layer too much.'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现像Bootstrap这样的库对像我这样的人来说简直是救星。由于网格系统，我可以自己设计出初步的用户界面版本。尽管如此，我所做的所有与界面相关的更改在交付给客户之前都要经过一双眼睛的检查。因此，总结一下：至少在不太触及呈现层的情况下，我可以做前端开发到一定程度。
- en: How about all the things you didn’t mention?
  id: totrans-split-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 那你没有提到的所有事情呢？
- en: There are certainly a lot of things I had to leave out of this blog post. As
    promised I’ll be devoting a post to the art of making web pages more accessible,
    since the lack of proper semantics is one of my pet peeves. However, there’s a
    good chance I won’t leave it at that. Stay tuned!
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有很多事情我在这篇博文中没提到。正如我承诺的那样，我将专门撰写一篇文章来讨论如何使网页更具可访问性，因为缺乏适当的语义是我一直以来的烦恼之一。不过，我可能不会就此打住。敬请关注！
