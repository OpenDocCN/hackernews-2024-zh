- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 12:53:25'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: How the XZ backdoor works [LWN.net]
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://lwn.net/SubscriberLink/967192/6c39d47b5f299a23/](https://lwn.net/SubscriberLink/967192/6c39d47b5f299a23/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| **Benefits for LWN subscribers**The primary benefit from [subscribing to
    LWN](/subscribe/) is helping to keep us publishing, but, beyond that, subscribers
    get immediate access to all site content and access to a number of extra site
    features. Please sign up today! |'
  id: totrans-split-6
  prefs: []
  type: TYPE_TB
- en: By **Daroc Alden**
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: April 2, 2024
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Versions 5.6.0 and 5.6.1 of the [XZ](https://git.tukaani.org/?p=xz.git;a=summary)
    compression utility and library were shipped with [a backdoor](/Articles/967180)
    that targeted [OpenSSH](https://www.openssh.com/). Andres Freund [discovered](/ml/oss-security/20240329155126.kjjfduxw2yrlxgzm@awork3.anarazel.de/)
    the backdoor by noticing that [failed SSH logins were taking a lot of CPU time](/Articles/967194/)
    while doing some micro-benchmarking, and tracking down the backdoor from there.
    It was introduced by XZ co-maintainer "Jia Tan" — a probable alias for person
    or persons unknown. The backdoor is a sophisticated attack with multiple parts,
    from the build system, to link time, to run time.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: The community response to the attack is just as interesting as the technical
    aspects. For more information on that, refer to [this companion article](/Articles/967866).
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Build time
  id: totrans-split-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The backdoor consists of several distinct phases, starting when the package
    is being built. Gynvael Coldwind wrote [an in-depth investigation](https://gynvael.coldwind.pl/?lang=en&id=782)
    of the build-time parts of the backdoor. Releases of XZ were provided via GitHub,
    which has since disabled the maintainers' accounts and taken the releases offline.
    Like many projects that use [GNU Autoconf](https://www.gnu.org/software/autoconf/),
    XZ made releases that provided several versions of the source for download — an
    automatically generated tarball containing the source and related files in the
    repository, along with versions containing the generated build files. Those extra
    files include the `configure` script and makefiles for the project. Releasing
    versions that contain the generated files allows downstream users of the software
    to build without needing to install Autoconf.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: In this case, however, the scripts in the maintainer-provided source tarballs
    were not generated by Autoconf. Instead, one of the build scripts contained the
    first stage of the exploit in `m4/build-to-host.m4`. This script is originally
    from the [Gnulib](https://www.gnu.org/software/gnulib/) library; it provides a
    macro that converts between the style of pathname used by the build environment
    and the run-time environment of the program. The version in these XZ releases
    was modified to extract the next stage of the exploit, which is contained in `tests/files/bad-3-1corrupt_lzma2.xz`.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: This file is included in the repository, ostensibly as part of XZ's test suite,
    though it was never used by those tests. It was committed well before the release
    of version 5.6.0\. The file, supposedly a corrupted XZ file, is actually a valid
    XZ stream with some bytes swapped — for example, `0x20` is swapped with occurrences
    of `0x09` and vice versa. When decoded, it yields [a shell script](/Articles/967979)
    that unpacks and executes the next stage of the backdoor.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: The next stage of the backdoor is located in `tests/files/good-large_compressed.lzma`.
    This is the `injected.txt` file attached to Freund's message. That file contains
    more than just the next stage of the script — it also contains additional binary
    data that forms the actual backdoor itself. The final script skips over the header
    of the file from which it was extracted, and then uses `awk` to decrypt the remainder
    of the file. Finally, that decrypted stream is decompressed using the XZ command-line
    program, in order to extract a pre-compiled file called `liblzma_la-crc64-fast.o`,
    which is also attached to Freund's message.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: Link time
  id: totrans-split-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The extracted file is a 64-bit relocatable ELF library. The remainder of the
    build process links it into the final `liblzma` library which ends up being loaded
    into OpenSSH on some distributions. Those distributions [patch](https://sources.debian.org/patches/openssh/1:9.2p1-2%2Bdeb12u2/systemd-readiness.patch/)
    OpenSSH to use systemd for daemon-readiness notifications; `libsystemd` in turn
    depends on liblzma for compressing journal files. Lennart Poettering has since
    [posted](https://mastodon.social/@pid_eins/112202687764571433) some example code
    (written by Luca Boccassi) showing how to let applications use systemd readiness
    notifications without pulling in the entire library. When the malicious `liblzma`
    is used by a dynamically linked process, it uses the [indirect function](https://sourceware.org/glibc/wiki/GNU_IFUNC)
    mechanism to involve itself in the [linking process](/Articles/961117).
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Indirect functions are a feature of the GNU C library (glibc) that permits a
    developer to include several versions of a function and select which version to
    use at dynamic linking time. Indirect functions are useful for including optimized
    versions of a function that rely on specific hardware features, for example. In
    this case, the backdoor provides its own version of the indirect function resolvers
    `crc32_resolve()` and `crc64_resolve()` that select versions of `crc32()` and
    `crc64()` to use, respectively. `liblzma` does not usually use indirect functions,
    but using faster functions to calculate checksums does sound like a plausible
    use of the feature. This plausible deniability is probably why the exploit itself
    lives in a file called `liblzma_la-crc64-fast.o`.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: When the dynamic linker finalizes the locations of those functions, it calls
    the backdoor's resolver functions. At this point, dynamic linking is still in
    progress, so many of the linker's internal data structures have not yet been made
    read-only. This would let the backdoor manipulate libraries that had already been
    loaded by overwriting entries in the procedure linkage table (PLT) or global offset
    table (GOT). However, `liblzma` is loaded fairly early in the link order of OpenSSH,
    which means that the [OpenSSL](https://www.openssl.org/) cryptography functions
    that are the backdoor's ultimate target may not have been loaded yet.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: To deal with that, the backdoor adds an [audit hook](https://www.man7.org/linux/man-pages/man7/rtld-audit.7.html).
    The dynamic linker calls all the registered audit hooks when it is resolving a
    symbol. The backdoor uses this to wait until it sees the [`RSA_public_decrypt@got.plt`](https://linux.die.net/man/3/rsa_public_decrypt)
    symbol being resolved. Despite the name, this function is actually part of handling
    an RSA signature (which is a decryption operation) — OpenSSH calls it while validating
    an RSA certificate provided by the client during a connection.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: Run time
  id: totrans-split-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once the backdoor detects this function being linked, it replaces the function
    with its own version. What the altered version does is still being investigated,
    but at least one of its functions is to attempt to extract a command from the
    public-key field of the provided RSA certificate (which means that certificates
    that are used in this attack cannot actually be used to authenticate normally).
    The backdoor checks whether the command is signed by the attacker's private key
    and has valid formatting. If it does, then the backdoor directly runs the given
    command as the user running `sshd`, which is usually root.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: Anthony Weems has put together [an explanation](https://github.com/amlweems/xzbot)
    of the run-time portion of the exploit, including a honeypot to detect attempts
    to use the exploit, and code to generate command payloads. Using the backdoor
    involves signing the command to be executed with a private key, but the attacker's
    is not available, so the backdoored server needs to be patched to use another
    private key. This also means that detecting backdoored servers remotely is nearly
    impossible, since they will not react any differently to connections that don't
    use the attacker's private key.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, the effect of the backdoor appears to be that a compromised SSH
    server which receives a connection with a hand-crafted RSA certificate for authentication
    can be made to run attacker-controlled code.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: Anti-analysis
  id: totrans-split-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The design of the backdoor makes it difficult to notice without directly inspecting
    `liblzma`. For example, the choice to enable remote code execution rather than
    an authentication bypass means that use of the exploit does not detect a login
    session that could be noticed by traditional administration tools. The backdoor's
    code also uses several techniques to make discovery more difficult. For example,
    the string "RSA_public_decrypt@got.plt", which is used by the audit hook, never
    appears in the binary of the exploit. Instead, it uses a [trie](https://en.wikipedia.org/wiki/Trie)
    to hold various strings. Serge Bazanski posted [a list](https://gist.github.com/q3k/af3d93b6a1f399de28fe194add452d01)
    of strings in the malicious `liblzma` encoded this way.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: Examining that list shows that `RSA_public_decrypt` is likely not the only function
    interfered with; several other cryptography routines are listed. It also shows
    various functions and strings that are used to interfere with OpenSSH's logging.
    This is not yet confirmed, but it seems likely that a compromised SSH server would
    not actually log any connection attempts that use the exploit.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: 'The backdoor also includes many checks to ensure it is running in the expected
    environment — a standard precaution for modern malware that is intended to make
    reverse-engineering more difficult. The backdoor is only active under specific
    circumstances, including: running in a non-graphical environment, ~~as root~~
    (see [this comment](/Articles/968045) from Freund), in a binary located at `/usr/sbin/sshd`,
    with `sshd` having the expected ELF header, and where none of its functions have
    had a breakpoint inserted by a debugger. Despite these obstacles, community efforts
    to reverse-engineer and explain the remainder of the backdoor''s code [remain
    underway](https://gist.github.com/smx-smx/a6112d54777845d389bd7126d6e9f504).'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: ~~The backdoor also includes code that patches the binary of `sshd` itself to
    disable [`seccomp()`](https://man7.org/linux/man-pages/man2/seccomp.2.html) and
    prevent the program from creating a [chroot sandbox](https://en.wikipedia.org/wiki/Chroot)
    for its children~~ (see [this comment](/Articles/968317)). In total, the code
    of the backdoor is 87KB, which is plenty of space for additional unpleasant surprises.
    Many people have put together their own summaries of the exploit, including [this
    comprehensive FAQ](https://gist.github.com/thesamesam/223949d5a074ebc3dce9ee78baad9e27)
    by Sam James, which links to other resources.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: Being safe
  id: totrans-split-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The exploit was caught promptly, so almost no users were affected. Debian sid,
    Fedora Rawhide, the Fedora 40 beta, openSUSE Tumbleweed, and Kali Linux all briefly
    shipped the compromised package. NixOS unstable also shipped the compromised version,
    but was not vulnerable because it does not patch OpenSSH to link `libsystemd`.
    Tan also included some other changes to the XZ code to make detecting and mitigating
    the backdoor more difficult, such as [sabotaging](https://git.tukaani.org/?p=xz.git;a=blobdiff;f=CMakeLists.txt;h=d2b1af7ab0ab759b6805ced3dff2555e2a4b3f8e;hp=76700591059711e3a4da5b45cf58474dac4e12a7;hb=328c52da8a2bbb81307644efdb58db2c422d9ba7;hpb=eb8ad59e9bab32a8d655796afd39597ea6dcc64d)
    sandboxing measures and making preemptive efforts to redirect security reports.
    Even though the exploit did not reach their stable versions, several distributions
    are nonetheless taking steps to move to a version of XZ that does not contain
    any commits from Tan, so users should expect to see security updates related to
    that soon. Readers may also wish to refer to the security notice for their distribution
    for more specific information.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: (
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: '[Log in](https://lwn.net/Login/?target=/Articles/967192/)'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: to post comments)
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
