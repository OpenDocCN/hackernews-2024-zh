["```\n1\n2\n3\n\n```", "```\n#define EV_NONE 0\n#define EV_CURRENT 1\n#define EV_LIGHT 2\n\n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n```", "```\n const uint8_t *sht = base + ehdr->e_shoff;\nconst uint8_t *p = sht + ((Elf_Word*)sht)[i];\nuint8_t presence = *p++;\nElf_Shdr shdr = {};\nshdr.sh_name = readULEB128(p);\nshdr.sh_type = presence & 1 ? readULEB128(p) : ELF::SHT_PROGBITS;\nshdr.sh_flags = presence & 2 ? readULEB128(p) : 0;\nshdr.sh_addr = presence & 4 ? readULEB128(p) : 0;\nshdr.sh_offset = readULEB128(p);\nshdr.sh_size = presence & 8 ? readULEB128(p) : 0;\nshdr.sh_link = presence & 16 ? readULEB128(p) : 0;\nshdr.sh_info = presence & 32 ? readULEB128(p) : 0;\nshdr.sh_addralign = presence & 64 ? 1UL << readULEB128(p) : 1;\nshdr.sh_entsize = presence & 128 ? readULEB128(p) : 0; \n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n```", "```\ntypedef struct {\n Elf32_Word\tch_type;\n Elf32_Word\tch_size;\n Elf32_Word\tch_addralign;\n} Elf32_Chdr;\n typedef struct {\n Elf64_Word\tch_type;\n Elf64_Word\tch_reserved;\n Elf64_Xword\tch_size;\n Elf64_Xword\tch_addralign;\n} Elf64_Chdr; \n```"]