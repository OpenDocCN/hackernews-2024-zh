- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:34:24'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:34:24'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'The Rise of GQL: A New ISO Standard in Graph Query Language'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GQL的崛起：图查询语言的新ISO标准
- en: 来源：[https://www.tigergraph.com/blogs/gsql/the-rise-of-gql-a-new-iso-standard-in-graph-query-language/](https://www.tigergraph.com/blogs/gsql/the-rise-of-gql-a-new-iso-standard-in-graph-query-language/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.tigergraph.com/blogs/gsql/the-rise-of-gql-a-new-iso-standard-in-graph-query-language/](https://www.tigergraph.com/blogs/gsql/the-rise-of-gql-a-new-iso-standard-in-graph-query-language/)
- en: by [Mingxi Wu](https://www.linkedin.com/in/mingxi-wu-a1704817/)
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[吴明熙](https://www.linkedin.com/in/mingxi-wu-a1704817/)
- en: 'We’re thrilled to celebrate a significant milestone in the world of database
    technology: the publication of the first version of the ISO GQL standard on April
    12, 2024\. You can access the standard [here](https://www.iso.org/standard/76120.html).'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们非常高兴地庆祝数据库技术领域的一个重要里程碑：ISO GQL标准第一版于2024年4月12日发布。您可以在此处访问标准[here](https://www.iso.org/standard/76120.html)。
- en: As an active contributor to the development of GQL standard version 1, I’ve
    witnessed the entire journey from its inception to its high-quality final publication.
    I can attest that this marks a significant milestone in the history of databases.
    Thanks to the GQL editor [Stefan Plantikow](https://www.linkedin.com/in/stefan-plantikow-49896637/)
    and [Stephen Cannan](https://www.linkedin.com/in/ACoAAAAtayUB9pzZK_nIKrdtC8hm6aoCRwnzxk8),
    editing tooling support from [Jim Melton](https://www.linkedin.com/in/ACoAAADNnC4BsfclEJ6S5Ux61kbqFFtkzTn8dA4),
    the convenor of WG3 [Keith Hare](https://www.linkedin.com/in/ACoAAAJRseUBq_q6BsMZ8gZhHW3T3StojwXC4X0),
    and  the original author of the GQL manifesto [Alastair Green](https://www.linkedin.com/in/ACoAABa6wGYB8jtCFp2w2BWnBEWhFrKNYNm9dzE).
    This elegant standard is developed with a strong international team including
    both academia and industry query language experts. A non-exhaustive contributor
    list can be found on these two SIGMOD papers [1](https://dl.acm.org/doi/abs/10.1145/3514221.3526057),
    [2](https://dl.acm.org/doi/10.1145/3183713.3190654).
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为GQL标准版本1的积极贡献者，我见证了从其起源到高质量最终出版的整个过程。我可以证明，这标志着数据库历史上的一个重要里程碑。感谢GQL编辑器[斯蒂芬·普兰提科](https://www.linkedin.com/in/stefan-plantikow-49896637/)和[斯蒂芬·卡南](https://www.linkedin.com/in/ACoAAAAtayUB9pzZK_nIKrdtC8hm6aoCRwnzxk8)，以及编辑工具支持者[吉姆·梅尔顿](https://www.linkedin.com/in/ACoAAADNnC4BsfclEJ6S5Ux61kbqFFtkzTn8dA4)，WG3召集人[基思·哈尔](https://www.linkedin.com/in/ACoAAAJRseUBq_q6BsMZ8gZhHW3T3StojwXC4X0)，以及GQL宣言的原始作者[阿拉斯泰尔·格林](https://www.linkedin.com/in/ACoAABa6wGYB8jtCFp2w2BWnBEWhFrKNYNm9dzE)。这一优雅的标准是由包括学术界和工业界查询语言专家在内的强大国际团队开发的。一个非详尽的贡献者名单可以在这两篇SIGMOD论文[1](https://dl.acm.org/doi/abs/10.1145/3514221.3526057)，[2](https://dl.acm.org/doi/10.1145/3183713.3190654)中找到。
- en: In this blog, I’m going to share my personal enthusiasm on GQL and invite you
    to start learning it.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客中，我将分享我对GQL的个人热情，并邀请您开始学习它。
- en: '**What is GQL?**'
  id: totrans-split-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**GQL是什么？**'
- en: GQL, or Graph Query Language, is an ISO standard defined for property graph
    databases. It stands as the first sibling database language emerging from the
    ISO standard committee for databases since the initial publication of the SQL
    standard in 1986.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: GQL，或称为图查询语言，是为属性图数据库定义的ISO标准。它是自1986年SQL标准首次发布以来ISO标准委员会数据库领域出现的第一个同胞数据库语言。
- en: GQL aims to become the de facto query language standard for property graph databases,
    addressing the growing demand for such databases.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: GQL旨在成为属性图数据库的事实查询语言标准，以应对对此类数据库日益增长的需求。
- en: Let’s revisit some background knowledge on property graph databases.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新审视一些属性图数据库的背景知识。
- en: Firstly, property graph databases utilize property graph data modeling, where
    vertices and edges serve as the fundamental units to represent data elements.
    In contrast, the traditional relational data model relies on tables for data representation.
    Intuitively, the property graph model offers greater flexibility and aligns more
    closely with real-world interactions between objects.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，属性图数据库利用属性图数据建模，其中顶点和边作为表示数据元素的基本单位。相比之下，传统的关系数据模型依赖于表来表示数据。直观地说，属性图模型提供了更大的灵活性，并且更贴近对象之间的真实交互。
- en: Secondly, there are various storage formats tailored to support the property
    graph data model. Native graph databases distinguish themselves from non-native
    counterparts primarily through their storage format. In a native graph database,
    vertices and edges are treated as first-class citizens within the storage layer,
    resulting in superior performance, particularly in path traversal and iterative
    graph algorithms. This performance boost stems from the native graph database’s
    inherent structure as a gigantic object index. During graph traversal, one navigates
    from an active vertex set to another via their connecting edges, circumventing
    the need for costly runtime joins (as relational databases do) to reconnect data
    elements. In my opinion, native graph database’s graph storage format is the key
    differentiator to other databases. TigerGraph falls in the category of native
    graph database.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，有各种存储格式专门支持属性图数据模型。本地图数据库主要通过其存储格式与非本地同行区别开来。在本地图数据库中，顶点和边被视为存储层的一等公民，这导致了卓越的性能，特别是在路径遍历和迭代图算法中。这种性能提升源于本地图数据库作为巨大对象索引的固有结构。在图遍历过程中，通过它们连接的边，从一个活动顶点集导航到另一个，避免了需要昂贵的运行时连接（如关系数据库所做的）来重新连接数据元素。在我看来，本地图数据库的图存储格式是与其他数据库的关键差异。TigerGraph属于本地图数据库的范畴。
- en: '**Why GQL and Why Now?**'
  id: totrans-split-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**为什么选择GQL？为什么现在？**'
- en: As the graph database industry evolves, it becomes the third canonical database,
    alongside relational databases and key-value store databases. In the past decade,
    the burgeoning graph database industry has witnessed a plethora of vendors offering
    their own graph database products, each accompanied by their proprietary graph
    query language. Examples include Neo4j’s Cypher, TigerGraph’s GSQL, Oracle’s PGQ,
    LDBC’s G-core, and Gremlin, among others. For a comprehensive overview of the
    graph query language landscape, I recommend referring to Peter Boncz’s insightful
    [survey slide](https://homepages.cwi.nl/~boncz/gql-survey.pdf) from CWI.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 随着图数据库行业的发展，它成为了继关系数据库和键值存储数据库之后的第三种经典数据库。在过去的十年中，蓬勃发展的图数据库行业见证了众多厂商推出了各自的图数据库产品，每个产品都伴随其专有的图查询语言。例如，Neo4j的Cypher、TigerGraph的GSQL、Oracle的PGQ、LDBC的G-core以及Gremlin等。关于图查询语言的全面概述，我建议参考Peter
    Boncz在CWI的见解深刻的[survey slide](https://homepages.cwi.nl/~boncz/gql-survey.pdf)。
- en: Amidst this thriving ecosystem, GQL emerged to address the growing demand for
    a standardized graph query language. Its publication establishes a solid foundation
    and drives the prosperity of graph databases in the coming years, akin to what
    SQL did for relational databases
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个蓬勃发展的生态系统中，GQL应运而生，以应对对标准化图查询语言日益增长的需求。其发布奠定了坚实的基础，并推动了未来几年图数据库的繁荣，类似于SQL对关系数据库的作用。
- en: '**Scratching the GQL Surface**'
  id: totrans-split-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**浅谈GQL的表层**'
- en: At its core, GQL uses pattern matching syntax to declaratively ask queries against
    graph databases, similar to SQL for relational databases.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，GQL使用模式匹配语法来声明性地针对图数据库进行查询，类似于关系数据库中的SQL。
- en: The building blocks of a pattern are (1) vertex pattern and (2) edge pattern,
    illustrated below.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 模式的基本构件包括(1)顶点模式和(2)边模式，如下所示。
- en: '**MATCH** (x:Account **WHERE** x.isBlocked=’no’)'
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MATCH** (x:Account **WHERE** x.isBlocked=’no’)'
- en: x binds to a vertex in the graph. () is a node pattern.
  id: totrans-split-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: x绑定到图中的一个顶点。()是一个节点模式。
- en: '**MATCH** −[e:Transfer **WHERE** e.amount>5M]−>'
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MATCH** −[e:Transfer **WHERE** e.amount>5M]−>'
- en: e binds to an edge in the graph. -[]-> is an edge pattern.
  id: totrans-split-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: e绑定到图中的一条边。-[]->表示一种边的模式。
- en: With the above building blocks, you can have a longer pattern by alternating
    the node and edge patterns.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 借助以上基础构件，你可以通过交替节点和边模式来构建更长的模式。
- en: '**MATCH** (x:Account)-[:SignInWithIP]->(y:IP)  -[:Associated]->(p:Phone)'
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MATCH** (x:Account)-[:SignInWithIP]->(y:IP)  -[:Associated]->(p:Phone)'
- en: Each matched pattern provides a table. You can filter, group by, aggregate,
    and project the columns of the table, as you do in SQL.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个匹配的模式提供一张表。你可以像在SQL中那样对表进行过滤、分组、聚合和投影。
- en: 'GQL has two syntax flavors: one is Cypher, and the other is SQL. However, both
    flavors share the same core pattern matching part.'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: GQL有两种语法风格：一种是Cypher，另一种是SQL。然而，这两种风格共享相同的核心模式匹配部分。
- en: If you’re coming from the SQL world, you’ll use something like this.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你来自SQL世界，你会像这样使用。
- en: '**SELECT** x.age, y.ip**FROM** g **MATCH** (x:Account)-[:SignInWithIP]-(y:IP)  **WHERE**
    x.name == “John”'
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SELECT** x.age, y.ip**FROM** g **MATCH** (x:Account)-[:SignInWithIP]-(y:IP)  **WHERE**
    x.name == “John”'
- en: '*Note: TigerGraph is the main contributor and advocate for the SQL flavor in
    GQL because we firmly believe that SQL users will have a much easier time learning
    GQL with the SQL dialect. *'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*注：TigerGraph 是 GQL 中 SQL 风格的主要贡献者和倡导者，因为我们坚信 SQL 用户将更容易学习带有 SQL 方言的 GQL。*'
- en: If you’re familiar with the Cypher world, you’ll use something like the example
    below.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉 Cypher 的世界，您将会使用下面的例子。
- en: '**MATCH** (x:Account)-[:SignInWithIP]-(y:IP)  **WHERE** x.name == “John”  **RETURN**
    x.age, y.ip'
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MATCH** (x:Account)-[:SignInWithIP]-(y:IP)  **WHERE** x.name == “John”  **RETURN**
    x.age, y.ip'
- en: 'Furthermore, GQL supports linear composition of pattern match statements, meaning
    that each MATCH statement’s generated result table columns can be used to drive
    the next MATCH statement. This linear composition can be illustrated by the two
    flavors:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，GQL 支持模式匹配语句的线性组合，意味着每个 MATCH 语句生成的结果表列可以驱动下一个 MATCH 语句。这种线性组合可以用两种风格来说明：
- en: '{'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '**SELECT** expression_list  **FROM** g **MATCH** graph_pattern1  **WHERE**
    xxx'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**SELECT** expression_list  **FROM** g **MATCH** graph_pattern1  **WHERE**
    xxx'
- en: '**NEXT**'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**NEXT**'
- en: '**SELECT** expression_list  **FROM** g **MATCH** graph_pattern2  **WHERE**
    yyy'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**SELECT** expression_list  **FROM** g **MATCH** graph_pattern2  **WHERE**
    yyy'
- en: '**NEXT**'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**NEXT**'
- en: '**SELECT** expression_list  **FROM** g **MATCH** graph_pattern3  **WHERE**
    zzz'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**SELECT** expression_list  **FROM** g **MATCH** graph_pattern3  **WHERE**
    zzz'
- en: '}'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '{'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '**USE** g  **MATCH** graph_pattern1  **WHERE** xxx  **YIELD** expression_list'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**USE** g  **MATCH** graph_pattern1  **WHERE** xxx  **YIELD** expression_list'
- en: '**NEXT**'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**NEXT**'
- en: '**USE** g**MATCH** graph_pattern2  **WHERE** yyy  **YIELD** expression_list    **NEXT**'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**USE** g**MATCH** graph_pattern2  **WHERE** yyy  **YIELD** expression_list    **NEXT**'
- en: '**USE** g  **MATCH** graph_pattern2  **WHERE** zzz  **RETURN** expression_list'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**USE** g  **MATCH** graph_pattern2  **WHERE** zzz  **RETURN** expression_list'
- en: '}'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Besides the query syntax, GQL also supports a Linux file system-style directory
    hierarchy to host graph schemas and their catalog objects. This physical design
    of the catalog layout is to adapt to the flexibility of two-level property graph
    modeling, where a graph is a logical container and vertices and edges are the
    base containers. This design was initially informally discussed between TigerGraph
    and Neo4j, as we were first inspired by our multi-graph modeling product offering—multiple
    graphs can share a subset of the base vertex and edge containers. After multi-round
    constructive discussions, we agree that graph schemas will evolve freely under
    this catalog layout, especially for cross graph sharing and joining.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 除了查询语法，GQL 还支持类似 Linux 文件系统的目录层次结构，用于托管图模式及其目录对象。这种目录布局的物理设计是为了适应两级属性图建模的灵活性，其中一个图是逻辑容器，顶点和边是基本容器。这个设计最初是在
    TigerGraph 和 Neo4j 之间非正式讨论的结果，因为我们最初受到我们的多图建模产品提供的启发——多个图可以共享一部分基本顶点和边的容器。经过多轮建设性讨论后，我们一致认为图模式将在这种目录布局下自由演变，特别是用于跨图共享和连接。
- en: There are many other gems in the GQL standard; interested readers can purchase
    and study the standard.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他宝藏在 GQL 标准中；有兴趣的读者可以购买并学习这个标准。
- en: '**How To Learn It?**'
  id: totrans-split-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**如何学习呢？**'
- en: 'Many TigerGraph users have asked me how to learn GQL or have an early peek.
    Here is my suggested approach for a quick ramp-up:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 TigerGraph 用户问我如何学习 GQL 或者提前看看。这里是我推荐的快速上手方法：
- en: 'Study the core pattern matching design: get familiar with the Pattern Match
    syntax by reading [this](https://arxiv.org/abs/2112.06217) SIGMOD paper. It lays
    the foundation for understanding pattern matching nuances and design philosophy.'
  id: totrans-split-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 研究核心模式匹配设计：通过阅读 [这篇](https://arxiv.org/abs/2112.06217) SIGMOD 论文来熟悉模式匹配语法。这为理解模式匹配的细微差别和设计理念奠定了基础。
- en: Study existing LDBC-SNB BI benchmark queries written in [Cypher](https://github.com/ldbc/ldbc_snb_bi/tree/main/cypher/queries)
    and [GSQL](https://github.com/ldbc/ldbc_snb_bi/tree/main/tigergraph/queries_syntax_v3).
    They bear many similarities to GQL syntax.
  id: totrans-split-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 研究现有的 LDBC-SNB BI 基准查询，使用 [Cypher](https://github.com/ldbc/ldbc_snb_bi/tree/main/cypher/queries)
    和 [GSQL](https://github.com/ldbc/ldbc_snb_bi/tree/main/tigergraph/queries_syntax_v3)
    编写的查询。它们与 GQL 语法有很多相似之处。
- en: 'Dive into the Standard: read the 628-page ISO GQL standard (cost: 217 CHF)
    for a comprehensive understanding of the language’s specifications.'
  id: totrans-split-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 深入标准：阅读 628 页的 ISO GQL 标准（费用：217 瑞士法郎），全面理解该语言的规范。
- en: Last and the most important thing, start writing!
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后也是最重要的一点，开始写作吧！
- en: '**What’s Next for GQL?**'
  id: totrans-split-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**接下来 GQL 会怎么发展？**'
- en: GQL version 1 marks just the beginning of an ongoing journey. As the industry
    evolves, there are still challenges to address, including graph view support,
    trigger support, enhanced graph algorithm capabilities, and join graphs and tables,
    among others. At TigerGraph, we’re actively implementing GQL to champion this
    standard, maintaining our unwavering commitment to both openCypher and GQL.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: GQL 1版本标志着持续旅程的开端。随着行业的发展，仍然需要解决一些挑战，包括图形视图支持、触发器支持、增强的图算法能力以及连接图和表等。在TigerGraph，我们正在积极实施GQL，以支持这一标准，保持我们对openCypher和GQL的坚定承诺。
- en: Reflecting on our journey, Alin Deutsch, Yu Xu, and I began inventing GSQL in
    the summer of 2015 in Mountain View, CA, drawing inspiration from both the SQL
    standard and pattern matching literature. Alin and I implemented the initial version
    of GSQL that summer, burning many night candles. Throughout this process, we’ve
    contributed our best practices and real-world experiences back to the ISO GQL
    standard. We’re continuing this journey with the ISO standard committee, actively
    shaping the future versions of GQL. Along the way, we’ve forged numerous friendships
    within the global graph community, collectively delivering this beautiful standard.
    We hope you’ll recognize the dedication and passion this community has poured
    into this endeavor and take the time to learn, appreciate the design, and, most
    importantly, start using it.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾我们的旅程，Alin Deutsch、Yu Xu和我在2015年夏天在加州山景城开始了GSQL的创造，从SQL标准和模式匹配文献中汲取灵感。那个夏天，Alin和我实现了最初版本的GSQL，熬夜不少。在整个过程中，我们将最佳实践和现实世界的经验贡献给了ISO的GQL标准。我们与ISO标准委员会继续这个旅程，积极塑造GQL未来的版本。在这个过程中，我们在全球图形社区内结交了许多朋友，共同推动了这一美丽的标准。我们希望您能认识到这个社区为这一努力付出的奉献和热情，并花时间学习、欣赏设计，最重要的是开始使用它。
- en: In conclusion, GQL represents a significant leap forward in standardizing graph
    query languages. Whether you’re a seasoned database professional or new to graph
    databases, now is the time to start learning GQL and embrace the future of graph
    data management. Stay tuned for exciting developments in the world of GQL!
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，GQL代表了标准化图查询语言的重大进步。无论您是经验丰富的数据库专业人员还是新手，现在是学习GQL并拥抱图数据管理未来的时候了。请继续关注GQL领域的激动人心的发展！
- en: If you want to learn more about TigerGraph and GQL contact us at [[email protected]](/cdn-cgi/l/email-protection).
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于TigerGraph和GQL的信息，请联系我们：[[email protected]](/cdn-cgi/l/email-protection)。
