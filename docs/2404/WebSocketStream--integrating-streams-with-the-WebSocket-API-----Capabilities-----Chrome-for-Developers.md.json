["```\n// A heavy data crunching operation.\nconst process = async (data) => {\n  return new Promise((resolve) => {\n    window.setTimeout(() => {\n      console.log('WebSocket message processed:', data);\n      return resolve('done');\n    }, 1000);\n  });\n};\n\nwebSocket.onmessage = async (event) => {\n  const data = event.data;\n  // Await the result of the processing step in the message handler.\n  await process(data);\n}; \n```", "```\n const wss = new WebSocketStream(WSS_URL);\n  const {readable, writable} = await wss.opened;\n  const reader = readable.getReader();\n  const writer = writable.getWriter();\n\n  while (true) {\n    const {value, done} = await reader.read();\n    if (done) {\n      break;\n    }\n    const result = await process(value);\n    await writer.write(result);\n  } \n```", "```\nconst chatWSS = new WebSocketStream(CHAT_URL, {protocols: ['chat', 'chatv2']});\nconst {protocol} = await chatWSS.opened; \n```", "```\nconst {readable, writable, protocol, extensions} = await chatWSS.opened; \n```", "```\nconst {code, reason} = await chatWSS.closed; \n```", "```\nconst controller = new AbortController();\nconst wss = new WebSocketStream(URL, {signal: controller.signal});\nsetTimeout(() => controller.abort(), 1000); \n```", "```\nwss.close({code: 4000, reason: 'Game over'}); \n```", "```\nif ('WebSocketStream' in window) {\n  // `WebSocketStream` is supported!\n} \n```"]