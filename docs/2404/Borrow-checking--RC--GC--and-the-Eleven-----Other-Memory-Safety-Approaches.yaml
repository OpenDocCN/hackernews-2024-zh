- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:29:13'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:29:13'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Borrow checking, RC, GC, and the Eleven (!) Other Memory Safety Approaches
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 借用检查、RC、GC 和另外十一个（！）内存安全方法
- en: 来源：[https://verdagon.dev/grimoire/grimoire](https://verdagon.dev/grimoire/grimoire)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://verdagon.dev/grimoire/grimoire](https://verdagon.dev/grimoire/grimoire)
- en: '**13: Constraint references** is a blend of reference counting and single ownership
    (in the C++ sense, unrelated to borrow checking). In this approach, every object
    has a single owner, doesn''t necessarily need to be on the heap, and has a counter
    for all references to it. When we try to destroy the object, we just assert that
    there are no other references to this object.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**13：约束引用** 是参考计数和单所有权（在C++中的意义，与借用检查无关）的结合体。在这种方法中，每个对象都有一个单一所有者，不一定需要在堆上，并且有一个计数器来统计对它的所有引用。当我们试图销毁对象时，我们只需断言没有其他引用指向这个对象。'
- en: This is used surprisingly often. Some [game developers](https://discord.com/channels/402956206529970177/402956206529970180/451828861861101569)
    have been using this for a long time, and it can be used as the memory safety
    model for an entire language like in [Gel](https://web.archive.org/web/20220111001720/https://researcher.watson.ibm.com/researcher/files/us-bacon/Dingle07Ownership.pdf).
    It supports a lot more patterns than borrow checking (intrusive data structures,
    graphs, observers, back-references, dependency references, callbacks, delegates,
    many forms of RAII, etc).
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法出奇地经常被使用。一些[游戏开发者](https://discord.com/channels/402956206529970177/402956206529970180/451828861861101569)长期以来一直在使用这种方法，并且它可以作为整个语言的内存安全模型，如[Gel](https://web.archive.org/web/20220111001720/https://researcher.watson.ibm.com/researcher/files/us-bacon/Dingle07Ownership.pdf)。它支持比借用检查更多的模式（侵入式数据结构、图、观察者、反向引用、依赖引用、回调、委托、多种形式的RAII等）。
- en: However, this checking is at run-time. Halting in release mode is often undesirable,
    so this technique shines the most when it's very targeted or when we can fall
    back to a different strategy in release mode.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种检查是在运行时进行的。在发布模式下停止通常是不希望的，因此当目标非常明确或者在发布模式下可以切换到不同的策略时，这种技术才能发挥最大的作用。
