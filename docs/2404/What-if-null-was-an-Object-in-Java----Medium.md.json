["```\n@Test\npublic void nullIsNotAnObject()\n{\n    // Assert things about null\n    Assertions.assertFalse(null instanceof Object);\n    final Set<?> set = null;\n    Assertions.assertFalse(set instanceof Set);\n\n    // Assert things about exceptions thrown when calling methods on null\n    Assertions.assertThrows(\n            NullPointerException.class,\n            () -> set.getClass());\n    Assertions.assertThrows(\n            NullPointerException.class,\n            () -> set.toString());\n\n    // Assert things about a non-null variable named set2\n    final Set<?> set2 = new HashSet<>(Set.of(1, 2, 3));\n    set2.add(null);\n    Assertions.assertNotNull(set2);\n    Assertions.assertNotNull(set2.getClass());\n    Assertions.assertTrue(set2 instanceof Set);\n\n    // Filter all of the non-null values from set2 in the Set named set3\n    // Uses a static method refererence from the Objects class\n    final Set<?> set3 = set2.stream()\n            .filter(Objects::nonNull)\n            .collect(Collectors.toUnmodifiableSet());\n    Assertions.assertEquals(Set.of(1, 2, 3), set3);\n}\n```", "```\ntestNilIsAnObject\n |set setNoNils|\n\n # Assert things about nil\n self assert: nil isNil.\n self assert: 'nil' equals: nil printString.\n\n # Assert things about the set variable which is nil\n set := nil.\n self assert: set isNil.\n self assert: set equals: nil.\n self assert: set class equals: UndefinedObject.\n self assert: (set ifNil: [ true ]).\n self assert: set isEmptyOrNil.\n\n # Assert things about the set variable which is not nil\n set := Set with: 1 with: 2 with: 3 with: nil.\n self deny: set isNil.\n self assert: set isNotNil.\n self deny: set equals: nil.\n self deny: set isEmptyOrNil.\n self assert: set class equals: Set.\n\n # Select all the non-nil values into a new Set name setNoNils\n setNoNils := set select: #isNotNil.\n self assert: (Set with: 1 with: 2 with: 3) equals: setNoNils.\n```", "```\n# Use the built in control structures around nil on all objects\nself assert: (set ifNil: [ 'nil' ] ifNotNil: [ 'not nil']) equals: 'not nil'. \nself assert: (nil ifNil: [ 'nil' ] ifNotNil: [ 'not nil']) equals: 'nil'.\n```", "```\n@Test\n// NOTE THIS CODE WILL NOT COMPILE AND IS PURELY SPECULATIVE!!!\npublic void nullIsNotAnObject()\n{\n    // Assert things about null\n    Assertions.assertTrue(null instanceof Object);\n    final Set<?> set = null;\n    Assertions.assertFalse(set instanceof Set);\n\n    // Assert things about calling methods on null as an object\n    Assertions.assertTrue(set.isNull());\n    Assertions.assertEquals(Null.class, set.getClass());\n    Assertions.assertEquals(\"null\", set.toString());\n\n    // Assert things about a non-null variable\n    final Set<?> set2 = Set.of(1, 2, 3);\n    Assertions.assertNotNull(set2);\n    Assertions.assertNotNull(set2.getClass());\n    Assertions.assertTrue(set2 instanceof Set);\n\n    // Filter all of the non-null values from set2 in the Set named set3\n    // Uses an instance method refererence from the Object class\n    final Set<?> set3 = set2.stream()\n            .filter(Object::isNotNull)\n            .collect(Collectors.toUnmodifiableSet());\n\n    // Calling methods defined on Object, that would be overridden in Null\n    Assertions.assertEquals(\"null\", null.ifNull(() -> \"null\")); \n    Assertions.assertNull(null.ifNotNull(() -> \"notNull\"));\n    Assertions.assertEquals(\"not null\", set3.ifNotNull(() -> \" not null\"));\n}\n```"]