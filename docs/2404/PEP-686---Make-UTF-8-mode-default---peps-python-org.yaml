- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:33:51'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: PEP 686 – Make UTF-8 mode default | peps.python.org
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://peps.python.org/pep-0686/](https://peps.python.org/pep-0686/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PEP 686 – Make UTF-8 mode default
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Author:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: Inada Naoki <songofacandy at gmail.com>
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: 'Discussions-To:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '[Discourse thread](https://discuss.python.org/t/14737)'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: 'Status:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: Accepted
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: Standards Track
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Created:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: 18-Mar-2022
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Python-Version:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: '3.15'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Post-History:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: '[18-Mar-2022](https://discuss.python.org/t/14435 "Discourse thread"), [31-Mar-2022](https://discuss.python.org/t/14737
    "Discourse thread")'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Resolution:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: '[Discourse message](https://discuss.python.org/t/14737/9)'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: This PEP proposes enabling [UTF-8 mode](../pep-0540/ "PEP 540 – Add a new UTF-8
    Mode") by default.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: With this change, Python consistently uses UTF-8 for default encoding of files,
    stdio, and pipes.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: UTF-8 becomes de facto standard text encoding.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: The default encoding of Python source files is UTF-8.
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON, TOML, YAML use UTF-8.
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most text editors, including Visual Studio Code and Windows Notepad use UTF-8
    by default.
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most websites and text data on the internet use UTF-8.
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And many other popular programming languages, including Node.js, Go, Rust, and
    Java uses UTF-8 by default.
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the default encoding to UTF-8 makes it easier for Python to interoperate
    with them.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, many Python developers using Unix forget that the default encoding
    is platform dependent. They omit to specify `encoding="utf-8"` when they read
    text files encoded in UTF-8 (e.g. JSON, TOML, Markdown, and Python source files).
    Inconsistent default encoding causes many bugs.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: Python will enable UTF-8 mode by default from Python 3.15.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: Users can still disable UTF-8 mode by setting `PYTHONUTF8=0` or `-X utf8=0`.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: Since UTF-8 mode affects `locale.getpreferredencoding(False)`, we need an API
    to get locale encoding regardless of UTF-8 mode.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: '`locale.getencoding()` will be added for this purpose. It returns locale encoding
    too, but ignores UTF-8 mode.'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: When `warn_default_encoding` option is specified, `locale.getpreferredencoding()`
    will emit `EncodingWarning` like `open()` (see also [PEP 597](../pep-0597/ "PEP
    597 – Add optional EncodingWarning")).
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: This API was added in Python 3.11.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PEP 597](../pep-0597/ "PEP 597 – Add optional EncodingWarning") added the
    `encoding="locale"` option to the `TextIOWrapper`. This option is used to specify
    the locale encoding explicitly. `TextIOWrapper` should use locale encoding when
    the option is specified, regardless of default text encoding.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: But `TextIOWrapper` uses `"UTF-8"` in UTF-8 mode even if `encoding="locale"`
    is specified for now. This behavior is inconsistent with the [PEP 597](../pep-0597/
    "PEP 597 – Add optional EncodingWarning") motivation. It is because we didn’t
    expect making UTF-8 mode default when Python changes its default text encoding.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: This inconsistency should be fixed before making UTF-8 mode default. `TextIOWrapper`
    should use locale encoding when `encoding="locale"` is passed even in UTF-8 mode.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: This issue was fixed in Python 3.11.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: Most Unix systems use UTF-8 locale and Python enables UTF-8 mode when its locale
    is C or POSIX. So this change mostly affects Windows users.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: When a Python program depends on the default encoding, this change may cause
    `UnicodeError`, mojibake, or even silent data corruption. So this change should
    be announced loudly.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the guideline to fix this backward compatibility issue:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: Disable UTF-8 mode.
  id: totrans-split-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `EncodingWarning` ([PEP 597](../pep-0597/ "PEP 597 – Add optional EncodingWarning"))
    to find every places UTF-8 mode affects.
  id: totrans-split-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If `encoding` option is omitted, consider using `encoding="utf-8"` or `encoding="locale"`.
  id: totrans-split-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If `locale.getpreferredencoding()` is used, consider using `"utf-8"` or `locale.getencoding()`.
  id: totrans-split-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Test the application with UTF-8 mode.
  id: totrans-split-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ruby [changed](https://bugs.ruby-lang.org/issues/16604) the default `external_encoding`
    to UTF-8 on Windows in Ruby 3.0 (2020).
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java [changed](https://openjdk.java.net/jeps/400) the default text encoding
    to UTF-8 in JDK 18\. (2022).
  id: totrans-split-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both Ruby and Java have an option for backward compatibility. They don’t provide
    any warning like [PEP 597](../pep-0597/ "PEP 597 – Add optional EncodingWarning")’s
    `EncodingWarning` in Python for use of the default encoding.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: Deprecating the use of the default encoding is considered.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: But there are many cases that the default encoding is used for reading/writing
    only ASCII text. Additionally, such warnings are not useful for non-cross platform
    applications run on Unix.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: So forcing users to specify the `encoding` everywhere is too painful. Emitting
    a lot of `DeprecationWarning` will lead users ignore warnings.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PEP 387](../pep-0387/ "PEP 387 – Backwards Compatibility Policy") requires
    adding a warning for backward incompatible changes. But it doesn’t require using
    `DeprecationWarning`. So using optional `EncodingWarning` doesn’t violate the
    [PEP 387](../pep-0387/ "PEP 387 – Backwards Compatibility Policy").'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: Java also rejected this idea in [JEP 400](https://openjdk.java.net/jeps/400).
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: To ease backward compatibility issue, using `PYTHONIOENCODING` as the default
    encoding of PIPEs in the `subprocess` module is considered.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: With this idea, users can use legacy encoding for `subprocess.Popen(text=True)`
    even in UTF-8 mode.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: But this idea makes “default encoding” complicated. And this idea is also backward
    incompatible.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: So this idea is rejected. Users can disable UTF-8 mode until they replace `text=True`
    with `encoding="utf-8"` or `encoding="locale"`.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: For new users, this change reduces things that need to teach. Users don’t need
    to learn about text encoding in their first year. They should learn it when they
    need to use non-UTF-8 text files.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: For existing users, see the [Backward compatibility](#backward-compatibility)
    section.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: This document is placed in the public domain or under the CC0-1.0-Universal
    license, whichever is more permissive.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
