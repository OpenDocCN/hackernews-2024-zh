- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 13:33:51'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:33:51'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: PEP 686 – Make UTF-8 mode default | peps.python.org
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PEP 686 – 使 UTF-8 模式成为默认 | peps.python.org
- en: 来源：[https://peps.python.org/pep-0686/](https://peps.python.org/pep-0686/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://peps.python.org/pep-0686/](https://peps.python.org/pep-0686/)
- en: PEP 686 – Make UTF-8 mode default
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PEP 686 – 使 UTF-8 模式成为默认
- en: 'Author:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：
- en: Inada Naoki <songofacandy at gmail.com>
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: Inada Naoki <songofacandy at gmail.com>
- en: 'Discussions-To:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论地址：
- en: '[Discourse thread](https://discuss.python.org/t/14737)'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[Discourse 主题](https://discuss.python.org/t/14737)'
- en: 'Status:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 状态：
- en: Accepted
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 已接受
- en: 'Type:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 类型：
- en: Standards Track
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 标准跟踪
- en: 'Created:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 创建于：
- en: 18-Mar-2022
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 18-Mar-2022
- en: 'Python-Version:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: Python 版本：
- en: '3.15'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '3.15'
- en: 'Post-History:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 发表历史：
- en: '[18-Mar-2022](https://discuss.python.org/t/14435 "Discourse thread"), [31-Mar-2022](https://discuss.python.org/t/14737
    "Discourse thread")'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[18-Mar-2022](https://discuss.python.org/t/14435 "Discourse 主题"), [31-Mar-2022](https://discuss.python.org/t/14737
    "Discourse 主题")'
- en: 'Resolution:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 决议：
- en: '[Discourse message](https://discuss.python.org/t/14737/9)'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[Discourse 消息](https://discuss.python.org/t/14737/9)'
- en: '* * *'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This PEP proposes enabling [UTF-8 mode](../pep-0540/ "PEP 540 – Add a new UTF-8
    Mode") by default.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此 PEP 建议默认启用 [UTF-8 模式](../pep-0540/ "PEP 540 – Add a new UTF-8 Mode")。
- en: With this change, Python consistently uses UTF-8 for default encoding of files,
    stdio, and pipes.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这一变更使得 Python 在文件、stdio 和管道的默认编码上始终使用 UTF-8。
- en: UTF-8 becomes de facto standard text encoding.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: UTF-8 已成为事实上的标准文本编码。
- en: The default encoding of Python source files is UTF-8.
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 源文件的默认编码是 UTF-8。
- en: JSON, TOML, YAML use UTF-8.
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON、TOML 和 YAML 使用 UTF-8。
- en: Most text editors, including Visual Studio Code and Windows Notepad use UTF-8
    by default.
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数文本编辑器，包括 Visual Studio Code 和 Windows 记事本，默认使用 UTF-8。
- en: Most websites and text data on the internet use UTF-8.
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数网站和互联网上的文本数据使用 UTF-8。
- en: And many other popular programming languages, including Node.js, Go, Rust, and
    Java uses UTF-8 by default.
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及许多其他流行的编程语言，包括 Node.js、Go、Rust 和 Java，默认情况下都使用 UTF-8。
- en: Changing the default encoding to UTF-8 makes it easier for Python to interoperate
    with them.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将默认编码更改为 UTF-8 使 Python 更易于与它们互操作。
- en: Additionally, many Python developers using Unix forget that the default encoding
    is platform dependent. They omit to specify `encoding="utf-8"` when they read
    text files encoded in UTF-8 (e.g. JSON, TOML, Markdown, and Python source files).
    Inconsistent default encoding causes many bugs.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，许多使用 Unix 的 Python 开发者忽视了默认编码取决于平台的事实。当他们读取以 UTF-8 编码的文本文件（例如 JSON、TOML、Markdown
    和 Python 源文件）时，他们忘记指定 `encoding="utf-8"`。不一致的默认编码导致了许多 bug。
- en: Python will enable UTF-8 mode by default from Python 3.15.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: Python 将从 Python 3.15 开始默认启用 UTF-8 模式。
- en: Users can still disable UTF-8 mode by setting `PYTHONUTF8=0` or `-X utf8=0`.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 用户仍然可以通过设置 `PYTHONUTF8=0` 或 `-X utf8=0` 来禁用 UTF-8 模式。
- en: Since UTF-8 mode affects `locale.getpreferredencoding(False)`, we need an API
    to get locale encoding regardless of UTF-8 mode.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 UTF-8 模式影响 `locale.getpreferredencoding(False)`，我们需要一个 API 来获取不受 UTF-8 模式影响的区域设置编码。
- en: '`locale.getencoding()` will be added for this purpose. It returns locale encoding
    too, but ignores UTF-8 mode.'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`locale.getencoding()` 将被添加用于此目的。它也返回区域设置编码，但忽略 UTF-8 模式。'
- en: When `warn_default_encoding` option is specified, `locale.getpreferredencoding()`
    will emit `EncodingWarning` like `open()` (see also [PEP 597](../pep-0597/ "PEP
    597 – Add optional EncodingWarning")).
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定了`warn_default_encoding`选项时，`locale.getpreferredencoding()`会像`open()`一样发出`EncodingWarning`（参见[PEP
    597](../pep-0597/ "PEP 597 – Add optional EncodingWarning")）。
- en: This API was added in Python 3.11.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此 API 在 Python 3.11 中添加。
- en: '[PEP 597](../pep-0597/ "PEP 597 – Add optional EncodingWarning") added the
    `encoding="locale"` option to the `TextIOWrapper`. This option is used to specify
    the locale encoding explicitly. `TextIOWrapper` should use locale encoding when
    the option is specified, regardless of default text encoding.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[PEP 597](../pep-0597/ "PEP 597 – Add optional EncodingWarning") 添加了`encoding="locale"`选项到`TextIOWrapper`。此选项用于显式指定区域设置编码。当指定了此选项时，`TextIOWrapper`
    应该使用区域设置编码，而不管默认文本编码是什么。'
- en: But `TextIOWrapper` uses `"UTF-8"` in UTF-8 mode even if `encoding="locale"`
    is specified for now. This behavior is inconsistent with the [PEP 597](../pep-0597/
    "PEP 597 – Add optional EncodingWarning") motivation. It is because we didn’t
    expect making UTF-8 mode default when Python changes its default text encoding.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，即使在 UTF-8 模式下，`TextIOWrapper` 目前也会在指定 `encoding="locale"` 时使用 `"UTF-8"`。这种行为与[PEP
    597](../pep-0597/ "PEP 597 – Add optional EncodingWarning")的动机不一致。这是因为我们没有预料到当
    Python 更改其默认文本编码时会使 UTF-8 模式成为默认。
- en: This inconsistency should be fixed before making UTF-8 mode default. `TextIOWrapper`
    should use locale encoding when `encoding="locale"` is passed even in UTF-8 mode.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在使 UTF-8 模式成为默认之前，应修复此不一致性。即使在 UTF-8 模式下，当传递 `encoding="locale"` 时，`TextIOWrapper`
    应该使用区域设置编码。
- en: This issue was fixed in Python 3.11.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题在 Python 3.11 中已经修复。
- en: Most Unix systems use UTF-8 locale and Python enables UTF-8 mode when its locale
    is C or POSIX. So this change mostly affects Windows users.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Unix 系统使用 UTF-8 语言环境，而 Python 在其语言环境为 C 或 POSIX 时启用 UTF-8 模式。因此，这一变更主要影响
    Windows 用户。
- en: When a Python program depends on the default encoding, this change may cause
    `UnicodeError`, mojibake, or even silent data corruption. So this change should
    be announced loudly.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Python 程序依赖于默认编码时，这一变更可能导致 `UnicodeError`、乱码或甚至是静默数据损坏。因此，这一变更应该被大声宣布。
- en: 'This is the guideline to fix this backward compatibility issue:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是解决这一向后兼容性问题的指南：
- en: Disable UTF-8 mode.
  id: totrans-split-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用 UTF-8 模式。
- en: Use `EncodingWarning` ([PEP 597](../pep-0597/ "PEP 597 – Add optional EncodingWarning"))
    to find every places UTF-8 mode affects.
  id: totrans-split-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `EncodingWarning` ([PEP 597](../pep-0597/ "PEP 597 – Add optional EncodingWarning"))
    来查找所有受 UTF-8 模式影响的地方。
- en: If `encoding` option is omitted, consider using `encoding="utf-8"` or `encoding="locale"`.
  id: totrans-split-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果省略了 `encoding` 选项，请考虑使用 `"utf-8"` 或 `"locale"` 作为编码。
- en: If `locale.getpreferredencoding()` is used, consider using `"utf-8"` or `locale.getencoding()`.
  id: totrans-split-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用 `locale.getpreferredencoding()`，考虑使用 `"utf-8"` 或 `locale.getencoding()`。
- en: Test the application with UTF-8 mode.
  id: totrans-split-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 UTF-8 模式测试应用程序。
- en: Ruby [changed](https://bugs.ruby-lang.org/issues/16604) the default `external_encoding`
    to UTF-8 on Windows in Ruby 3.0 (2020).
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ruby 在 Ruby 3.0（2020 年）中将默认的 `external_encoding` 改为 UTF-8，在 Windows 上进行了更改（https://bugs.ruby-lang.org/issues/16604）。
- en: Java [changed](https://openjdk.java.net/jeps/400) the default text encoding
    to UTF-8 in JDK 18\. (2022).
  id: totrans-split-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 在 JDK 18 中（2022 年）将默认文本编码改为 UTF-8。详见 [JEP 400](https://openjdk.java.net/jeps/400)。
- en: Both Ruby and Java have an option for backward compatibility. They don’t provide
    any warning like [PEP 597](../pep-0597/ "PEP 597 – Add optional EncodingWarning")’s
    `EncodingWarning` in Python for use of the default encoding.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby 和 Java 都有向后兼容的选项。它们不像 Python 中的 [PEP 597](../pep-0597/ "PEP 597 – Add optional
    EncodingWarning") 的 `EncodingWarning` 那样提供任何警告，用于使用默认编码。
- en: Deprecating the use of the default encoding is considered.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 弃用使用默认编码正在考虑中。
- en: But there are many cases that the default encoding is used for reading/writing
    only ASCII text. Additionally, such warnings are not useful for non-cross platform
    applications run on Unix.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 但是有许多情况下，默认编码仅用于读写 ASCII 文本。此外，这样的警告对于在 Unix 上运行的非跨平台应用程序并不实用。
- en: So forcing users to specify the `encoding` everywhere is too painful. Emitting
    a lot of `DeprecationWarning` will lead users ignore warnings.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，强制用户在每个地方指定 `encoding` 是非常痛苦的。发出大量的 `DeprecationWarning` 将导致用户忽略警告。
- en: '[PEP 387](../pep-0387/ "PEP 387 – Backwards Compatibility Policy") requires
    adding a warning for backward incompatible changes. But it doesn’t require using
    `DeprecationWarning`. So using optional `EncodingWarning` doesn’t violate the
    [PEP 387](../pep-0387/ "PEP 387 – Backwards Compatibility Policy").'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[PEP 387](../pep-0387/ "PEP 387 – Backwards Compatibility Policy") 要求对不向后兼容的更改添加警告。但并不要求使用
    `DeprecationWarning`。因此，使用可选的 `EncodingWarning` 不违反 [PEP 387](../pep-0387/ "PEP
    387 – Backwards Compatibility Policy")。'
- en: Java also rejected this idea in [JEP 400](https://openjdk.java.net/jeps/400).
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: Java 也在 [JEP 400](https://openjdk.java.net/jeps/400) 中拒绝了这个想法。
- en: To ease backward compatibility issue, using `PYTHONIOENCODING` as the default
    encoding of PIPEs in the `subprocess` module is considered.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了缓解向后兼容性问题，在 `subprocess` 模块的 PIPEs 中使用 `PYTHONIOENCODING` 作为默认编码正在考虑中。
- en: With this idea, users can use legacy encoding for `subprocess.Popen(text=True)`
    even in UTF-8 mode.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个想法，即使在 UTF-8 模式下，用户也可以为 `subprocess.Popen(text=True)` 使用传统编码。
- en: But this idea makes “default encoding” complicated. And this idea is also backward
    incompatible.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但这一想法使得“默认编码”变得复杂。并且这一想法也是向后不兼容的。
- en: So this idea is rejected. Users can disable UTF-8 mode until they replace `text=True`
    with `encoding="utf-8"` or `encoding="locale"`.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这个想法被拒绝了。用户可以在将 `text=True` 替换为 `encoding="utf-8"` 或 `encoding="locale"`
    之前禁用 UTF-8 模式。
- en: For new users, this change reduces things that need to teach. Users don’t need
    to learn about text encoding in their first year. They should learn it when they
    need to use non-UTF-8 text files.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新用户，这一变更减少了需要教授的内容。用户在第一年不需要学习关于文本编码的内容。他们在需要使用非 UTF-8 文本文件时再学习即可。
- en: For existing users, see the [Backward compatibility](#backward-compatibility)
    section.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于现有用户，请参阅 [向后兼容性](#backward-compatibility) 部分。
- en: This document is placed in the public domain or under the CC0-1.0-Universal
    license, whichever is more permissive.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档属于公共领域，或者使用 CC0-1.0-Universal 许可证，以较宽松的那个为准。
