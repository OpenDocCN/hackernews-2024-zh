- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:17:29'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: What were the tax consequences of letting Windows 95 team members keep a piece
    of software as long as they tested it? - The Old New Thing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://devblogs.microsoft.com/oldnewthing/20240415-47/?p=109663](https://devblogs.microsoft.com/oldnewthing/20240415-47/?p=109663)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What were the tax consequences of letting Windows 95 team members keep a piece
    of software as long as they tested it?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every so often, somebody rediscovers my story of [buying an entire Egghead Software
    store](https://devblogs.microsoft.com/oldnewthing/20050824-11/?p=34463). One question
    that comes up is the issue of taxes. (You can never avoid taxes. Taxes are due
    today for most people in the United States.)
  prefs: []
  type: TYPE_NORMAL
- en: If the employees were allowed to keep the software provided they tested the
    program and filed bugs against it, did that count as work compensation that became
    taxable income?
  prefs: []
  type: TYPE_NORMAL
- en: 'The thing is, nobody ever checked whether you tested the program you took,
    and it was obvious to everybody participating in the activity, seeing as you just
    picked up the software and walked out of the room without filling out any paperwork.
    You were assumed to be a well-meaning member of the team who wouldn’t show up
    for an activity without any intention of doing it. The expectation that you test
    the program was just that: An expectation. It wasn’t a condition.'
  prefs: []
  type: TYPE_NORMAL
- en: My understanding is that this makes the software count as a gift that falls
    under the *de minimis* rule of the United States tax code. This was a one-time
    thing, so the frequency criterion is met. The value of the software was well under
    $100, so that requirement was met. And since nobody actually kept track of who
    took which software, the administrative impracticality requirement was also satisfied.
  prefs: []
  type: TYPE_NORMAL
- en: But really, this was just a development manager taking it upon himself to do
    some unconventional application compatibility test coverage and to instill camaraderie
    at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bonus chatter**: During one of the many iterations of this story being retold,
    someone remarked that they got a copy of the video game *Wing Commander III* through
    this exercise. I immediately remembered that they fulfilled their expectation
    by filing a bug against Windows 95: When you earned the cloaking device on level
    58 or something, you couldn’t activate it.'
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, they provided a save-game at level 58, so I didn’t have to play
    all the way to level 58 by myself.
  prefs: []
  type: TYPE_NORMAL
- en: The problem was that the hotkey for activating the cloaking device was `Ctrl`+`C`,
    and that conflicted with the use of `Ctrl`+`C` to cancel an active clipboard paste
    operation into an MS-DOS session. Normally, Windows 95 realized that there was
    no active paste active and replayed the hotkey into the MS-DOS session. However,
    the replay of the hotkey was apparently too fast for this game to recognize, so
    it never activated the cloaking device.
  prefs: []
  type: TYPE_NORMAL
- en: I fixed it by changing Windows 95 so that it installed the `Ctrl`+`C` hotkey
    handler only when a clipboard paste operation was active, and removed it when
    the paste operation completed. That way, when you hit it outside of a paste operation,
    the keys were visible to the game at human speeds, and this allowed it to engage
    the cloaking device.
  prefs: []
  type: TYPE_NORMAL
