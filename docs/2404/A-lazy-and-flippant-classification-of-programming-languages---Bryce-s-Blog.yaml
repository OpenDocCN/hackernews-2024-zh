- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 12:51:34'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 12:51:34'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: A lazy and flippant classification of programming languages | Bryce’s Blog
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 懒散而轻率的编程语言分类 | Bryce’s Blog
- en: 来源：[https://blog.brycekerley.net/2024/04/01/p-langs.html](https://blog.brycekerley.net/2024/04/01/p-langs.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.brycekerley.net/2024/04/01/p-langs.html](https://blog.brycekerley.net/2024/04/01/p-langs.html)
- en: Sometimes I post in an online community of computer touchers, as one does. When
    talking flippantly about programming languages, it’s sometimes useful to glob
    a bunch of them together based on characteristics, whether superficial or not.
    This started with jokes about common features of “P languages” like Perl, PHP,
    Python, JavaScript and Ruby, but you can classify other languages too.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我在一个电脑爱好者的在线社区发帖，像是正常人一样。当随意谈论编程语言时，根据特征（无论表面或深刻），将它们集合在一起有时是有用的。这始于对“P语言”（如Perl、PHP、Python、JavaScript和Ruby）常见特征的笑话，但你也可以对其他语言进行分类。
- en: This classification isn’t intended as the final word or to be accepted uncritically.
    It’s mostly here to get it out of my head, and if it starts a conversation that’s
    good too?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分类并不意味着是最终结论或者被盲目接受。它主要是为了把它从我的头脑中挖出来，如果能引发讨论那就更好了？
- en: P-languages
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: P语言
- en: Perl, PHP, Python, Ruby, Javascript (the last two have an honorary “P”) are
    all garbage-collected “scripting” ^(languages that let you get stuff done quick,
    often in web contexts. They often make sense from the beginning but get idiosyncratic
    at the edges. Often times huge swaths of the standard library will be very thin
    wrappers over the C standard library, system calls, or other platform libraries.)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Perl、PHP、Python、Ruby、Javascript（最后两个荣誉性地加了个“P”）都是垃圾回收的“脚本”语言，能让你在网页环境中迅速完成任务。它们通常从一开始就很合理，但在边缘处变得古怪。通常情况下，大片的标准库只是对C标准库、系统调用或其他平台库的薄包装。
- en: C-languages
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C语言
- en: A wise man once said that “the C++ spec is a case of regulatory capture by compiler
    vendors.” There’re enough cases of “undefined behavior” doing something absolutely
    ridiculous (like running off the end of an infinite loop into the next function)
    that C-language people have helpfully abbreviated it “UB” to save time while threatening
    you that maybe they’ll make a structural part of your program UB too.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 曾有智者说过，“C++规范是编译器供应商监管的一个案例。” 有足够的“未定义行为”导致一些绝对荒谬的情况（比如从无限循环的末尾跳到下一个函数），C语言的人们很乐意将其缩写为“UB”，以节省时间，同时威胁你，也许他们也会把你程序的结构部分也变成UB。
- en: These also have lots of well-named standard library functions like `printf`,
    `strcpy`, and `gets` that give control of your program counter and memory to arbitrary
    input. There are functions that supersede or obsolete these, but the old busted
    ones have to hang around forever. For example, C++ added safe ways to access `std::vector`
    and `std::array`, but gave them the name `at` instead of `operator[]` to not break
    the unsafe version that everyone uses.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 它们还有很多命名良好的标准库函数，比如 `printf`、`strcpy` 和 `gets`，可以控制程序计数器和内存以处理任意输入。虽然有函数取代了或淘汰了这些旧的函数，但这些旧的破烂函数必须一直存在。例如，C++
    添加了安全访问 `std::vector` 和 `std::array` 的方法，但使用了 `at` 而非 `operator[]` 这个名字，以免破坏所有人都在使用的不安全版本。
- en: J-languages
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: J-语言
- en: Java and C#, these have separate compilation steps that go to a non-native bytecode
    that requires some kind of separate executable to run. They all subscribe to a
    “[Kingdom of Nouns](https://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html)”
    vision of “object oriented” that tends towards lots of gang of four patterns in
    codebases, that makes it hard to find the code that actually does stuff. They
    also both really like UTF-16.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Java 和 C#，它们有单独的编译步骤，生成的是非本地字节码，需要一种单独的可执行文件来运行。它们都遵循“名词王国”的“面向对象”视角，倾向于在代码库中使用大量的四人帮设计模式，这使得找到实际执行功能的代码变得困难。它们也都非常喜欢
    UTF-16 编码。
- en: SQL
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL
- en: SQL
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: SQL
- en: G-languages
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: G-语言
- en: Golang, Rust, Crystal (my beloved), these are chasing after J-language safety
    while targeting native bytecode like a C-language, with a willingness to make
    syntax changes (if not the drastic typing system changes Rust and Crystal make)
    from C- and J-languages.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Golang、Rust、Crystal（我钟爱的语言），它们追求 J-语言的安全性，同时以类似 C-语言的本地字节码为目标，愿意进行语法上的改变（虽然不像
    Rust 和 Crystal 那样做出激进的类型系统改变）。
- en: R-languages
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: R-语言
- en: Erlang and Elixir are the big ones. They have the compilation to bytecode step
    of J-languages, but instead of calling methods on objects, you have lightweight
    processes passing messages around, and you get to use functional programming stuff
    too. Elixir works really hard to be an on-ramp to these for P-language people,
    but it’s not so much “idiosyncratic” at the edges as a whole new thing altogether.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Erlang 和 Elixir 是大名鼎鼎的语言。它们像 J-语言一样，经历了字节码编译阶段，但不同的是，它们不是在对象上调用方法，而是通过轻量级进程传递消息，还能运用函数式编程的一些技术。Elixir
    特别努力地成为 P-语言用户的入门工具，但它在边缘上并非“古怪”，而是一种全新的东西。
- en: F-languages
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: F-语言
- en: Haskell, Ocaml, and other languages where concepts get names like “applicative
    functor” and variables get names like `v` and `m`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Haskell、Ocaml 和其他语言，这些语言中概念被命名为“applicative functor”，变量被命名为 `v` 和 `m`。
- en: Conclusion
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: computers
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机
