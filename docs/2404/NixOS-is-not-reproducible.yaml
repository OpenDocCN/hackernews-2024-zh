- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 12:52:56'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 12:52:56
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: NixOS is not reproducible
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NixOS 不可再现
- en: 来源：[https://linderud.dev/blog/nixos-is-not-reproducible/](https://linderud.dev/blog/nixos-is-not-reproducible/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://linderud.dev/blog/nixos-is-not-reproducible/](https://linderud.dev/blog/nixos-is-not-reproducible/)
- en: Okay, sorry for the clickbait.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，抱歉标题党。
- en: NixOS is not reproducible according to the Reproducible Builds definition.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 根据“可再现构建”定义，NixOS 不可再现。
- en: I keep reading people making this claim repeatedly on orange-site, even LWN.net
    made a similar claim when writing about Nix and Guix earlier this week. ^(Along
    with their recently launched [wiki](https://wiki.nixos.org/wiki/Overview_of_the_NixOS_Linux_distribution).)
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直在读取人们在橙色网站上反复声称这一点，甚至 LWN.net 在本周早些时候在写有关 Nix 和 Guix 的文章时也做了类似的声明。 ^(连同他们最近推出的
    [wiki](https://wiki.nixos.org/wiki/Overview_of_the_NixOS_Linux_distribution)。)
- en: So, what is the Reproducible Builds definition?
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，“可再现构建”定义是什么？
- en: '**When is a build reproducible?**'
  id: totrans-split-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**什么是可再现构建？**'
- en: A build is reproducible if given the same source code, build environment and
    build instructions, any party can recreate bit-by-bit identical copies of all
    specified artifacts.
  id: totrans-split-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个构建是可再现的，如果给定相同的源代码、构建环境和构建说明，任何一方都可以重新创建所有指定的工件，且完全一致。
- en: Neither Nix or NixOS gives you these guarantees.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是 Nix 还是 NixOS 都不能给你这些保证。
- en: When I point this out to people they generally seem surprised to learn this,
    and I’m not completely sure where this originated from.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当我向人们指出这一点时，他们通常似乎对此感到惊讶，我也不完全确定这是从哪里来的。
- en: I suspect some people think this holds true because Nix heavily lives on hashes
    from the derivations files to store the files under `/nix`. An example would be
    `/nix/store/bnjps68g8ax6abzvys2xpx12imrx8949-binutils-2.31.1`.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我怀疑有些人认为这是真的，因为 Nix 严重依赖于派生文件中的哈希值，以在 `/nix` 下存储文件。例如 `/nix/store/bnjps68g8ax6abzvys2xpx12imrx8949-binutils-2.31.1`。
- en: Here the package is `binutils-2.31.1` and it is prefixed with a hash that is
    `bnjps68g8ax6abzvys2xpx12imrx8949`. For any casual user it’s completely reasonable
    to believe this hash represents the builds artifacts. But in reality the hash
    is based off on the derivation file. If you are unfamiliar with nix you can imagine
    that you would install Rust packages under a path that includes the sha256 of
    `Cargo.lock` file.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的软件包是 `binutils-2.31.1`，并且其名称前缀为 `bnjps68g8ax6abzvys2xpx12imrx8949`。对于任何普通用户来说，相信这个哈希代表了构建的工件是完全合理的。但实际上，该哈希是基于派生文件的。如果您不熟悉
    nix，可以想象您会在安装 Rust 包时，其路径中包含 `Cargo.lock` 文件的 sha256 哈希。
- en: I also suspect it is because nixos.org had “Reproducible Builds” as the first
    words of their homepage for years.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我也怀疑这是因为 nixos.org 多年来在其主页上的前几个单词就是“可再现构建”。
- en: And I get it? The word “reproducible builds” encapsulates the intent of what
    NixOS is trying to achieve, while also being an existing buzzword and quite catchy.
    Compared to “deterministic builds” which doesn’t exactly roll off the tongue.
    I also think parts of this is when people say “reproducible” they sometimes mean
    “reproducible behaviour”, as in the system behaving the same, or “Reproducible
    Builds”. And this confusion leads to a great deal of the misconception.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我明白了吗？“可再现构建”一词概括了 NixOS 尝试实现的意图，同时也是一个现有的流行词，非常引人注目。相比之下，“确定性构建”并不那么顺口。我也认为，当人们说“可再现”时，有时他们指的是“可再现行为”，即系统的行为相同，或者“可再现构建”。这种混淆导致了很多误解。
- en: I should clarify that I’m not saying NixOS doesn’t *have* some reproducible
    packages. I’m trying to point out that proving a small set of packages is reproducible
    doesn’t make the entire project reproducible. We still do not know how to make
    that work, and any grandeur claims about having solved this problem should be
    met with a lot of scepticism.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我应该澄清，我并不是说 NixOS 没有*一些*可再现的软件包。我试图指出的是，证明一小部分软件包是可再现的并不意味着整个项目都是可再现的。我们仍然不知道如何使其生效，对于任何宣称解决了这个问题的大言不惭都应该持怀疑态度。
- en: Definitions and semantics, yay
  id: totrans-split-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义和语义，耶
- en: To try and expand on the concepts of *words* in this realm I though I’d defer
    to the “Building Secure and Reliable Systems” book from Google. ^(Where they try
    to define some terminology in this area.)
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尝试扩展这个领域中的*词汇*概念，我想引用 Google 的《构建安全可靠系统》一书。 ^(在那里，他们试图定义这个领域的一些术语。)
- en: Hermetic builds
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隔离构建
- en: Reproducible builds
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可再现构建
- en: Verifiable builds
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可验证构建
- en: Hermetic builds means that we are building in isolated environments, with all
    the sources specified up front and some cryptographic pinning to ensure this is
    true. I believe most Linux distributions and language package managers accomplishes
    this to some degree and it is somewhat of an solved problem.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 离子构建意味着我们在隔离环境中进行构建，所有源文件都提前指定，并进行一些加密固定以确保这一点。我相信大多数 Linux 发行版和语言包管理器在某种程度上都实现了这一点，这在某种程度上是一个解决方案。
- en: Reproducible builds, is well, Reproducible Builds. It means that running the
    same build ensures the same build artifacts are bit-for-bit identical. This is
    a work in progress for everyone involved and there are so many issues we are trying
    to figure out.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可重复构建，嗯，可重复构建。这意味着运行相同的构建确保生成的构建产物是逐位相同的。这对所有参与者来说都是一个正在进行的工作，并且我们正在努力解决如此多的问题。
- en: Verifiable builds implies there is a trusted and validated *path* from binary
    to the source. This doesn’t mean the build is reproducible, but it means that
    we should know what the build contains a high degree of certainty. This is what
    I believe a lot of the recent years of “Supply Chain Security”-focus has given
    us with build provenance, attestation and a myriad of SBOM standards. I think
    NixOS can make probably make some claims about having “Verifiable Builds” in their
    distro and they could probably lean a bit harder on this part.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可验证构建意味着从二进制到源代码有一个受信任和验证的*路径*。这并不意味着构建是可重复的，但意味着我们应该高度确信构建包含什么内容。我认为最近几年的“供应链安全”关注已经通过构建来源、证明和一系列SBOM标准为我们提供了这一点。我认为NixOS可以对其发行版中的“可验证构建”提出一些主张，并且他们可能会更加依赖这一部分。
- en: Addendum
  id: totrans-split-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录
- en: I think it is important to point out I take this entire thing a bit personal
    for several reasons.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为重要的是指出，出于几个原因，我对整个事情都有点个人情感。
- en: I have heavily invested my free-time on this topic since 2017, and met some
    of the accomplishments we have had with “Doesn’t NixOS solve this?” for just as
    long… and I thought it would be of peoples interest to clarify?
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 自2017年以来，我已经在这个主题上投入了大量的空闲时间，并与“NixOS是否解决了这个问题？”取得了一些成就...我认为澄清这些可能会引起人们的兴趣？
- en: Out of the last three times I went to a F/OSS event with my Reproducible Builds
    t-shirt the two reactions I did get was from enthusiastic Nix users that wanted
    to talk about… nix? And I’m not really into Nix after spending almost a decade
    working on Arch?
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我最近三次穿着我的可重复构建T恤参加自由/开源软件活动时，我得到的两个反应都来自热情的Nix用户，他们想要谈论... Nix？尽管我几乎花了十年时间在Arch上工作，但我并不真的对Nix感兴趣。
- en: But it seems to me that the misconception is so common these days that trying
    to clarify is generally useful, and I have edited this on Wikipedia two times
    because the claims where just wrong.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我看来，这种误解如今是如此普遍，试图澄清通常是有用的，因为我两次在维基百科上编辑了这些声明，因为它们完全是错误的。
- en: 'But to try and end on a positive note:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了试图以积极的态度结束：
- en: What does all of this mean?
  id: totrans-split-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 这一切意味着什么？
- en: '*There* *is* *so* *much* *work* *to* *do*. Come join the Reproducible Builds
    effort in your Linux distro. There is constant work in all major Linux distros
    that needs help. It’s a great way to do cross-distro collaborative work and you
    can learn the eldritch horror that is “build systems”. I spent 2-3 months tracking
    down a `gcc` bug in `-flto` and I assure you I thought it was fun at least for
    an hour or two.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*有* *太* *多* *的* *工* *作* *要* *做*。来加入您 Linux 发行版的可重复构建工作。所有主要 Linux 发行版都需要帮助。这是跨发行版协作工作的绝佳方式，您可以学习到“构建系统”的神秘恐怖。我花了2-3个月追踪`gcc`在`-flto`中的一个bug，我敢保证，至少有一两个小时我觉得挺有趣的。'
- en: Fedora has recently kicked off their efforts again^.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: Fedora 最近再次启动了他们的努力^。
- en: In Arch we want to try and reach the 90% mark again for our package^.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Arch中，我们希望再次达到90%的包^。
- en: NixOS has a great dashboard for their reproducible builds issues
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: NixOS 在他们的可重复构建问题上有一个很棒的仪表板。
- en: We are also sufficiently old-school there are active mailing lists for this
    as well.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也足够老派，还有活跃的邮件列表。
- en: '[https://lists.reproducible-builds.org/listinfo/](https://lists.reproducible-builds.org/listinfo/)'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://lists.reproducible-builds.org/listinfo/](https://lists.reproducible-builds.org/listinfo/)'
- en: Hopefully this clears up some of the misconception people have on this topic,
    and maybe it inspired you to contribute to the collective effort to solve this
    :)
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这能澄清人们对这个主题的一些误解，也许会激励您参与解决这个共同的努力 :)
- en: '[Back to posts](https://linderud.dev/blog/)'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回文章](https://linderud.dev/blog/)'
