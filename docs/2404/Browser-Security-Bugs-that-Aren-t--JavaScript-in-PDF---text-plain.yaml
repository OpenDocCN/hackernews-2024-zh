- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:10:30'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:10:30'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Browser Security Bugs that Aren’t: JavaScript in PDF – text/plain'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器中的非安全性问题：JavaScript在PDF中 – text/plain
- en: 来源：[https://textslashplain.com/2024/04/10/browser-security-bugs-that-arent-javascript-in-pdf/](https://textslashplain.com/2024/04/10/browser-security-bugs-that-arent-javascript-in-pdf/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://textslashplain.com/2024/04/10/browser-security-bugs-that-arent-javascript-in-pdf/](https://textslashplain.com/2024/04/10/browser-security-bugs-that-arent-javascript-in-pdf/)
- en: 'A fairly common security bug report is of the form: “*I can put JavaScript
    inside a PDF file and it runs!*”'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一种相当常见的安全漏洞报告形式是：“*我可以将JavaScript放入PDF文件中并执行它！*”
- en: 'For example, open [this PDF file](https://webdbg.com/test/pdf/contains-script.pdf)
    with Chrome, and you can see the `alert(1)` message displayed:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用Chrome打开[此PDF文件](https://webdbg.com/test/pdf/contains-script.pdf)，您可以看到`alert(1)`消息显示：
- en: Support for JavaScript within PDFs is by-design and expected by the developers
    of PDF rendering software, including common browsers like Chrome and Edge. Much
    like HTML, PDF files are an [active content](https://chromium.googlesource.com/chromium/src/+/master/docs/security/faq.md#Are-PDF-files-static-content-in-Chromium)
    type and may contain JavaScript.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript在PDF中的支持是按设计预期的PDF渲染软件开发人员支持的功能，包括常见的浏览器如Chrome和Edge。就像HTML一样，PDF文件是一种[活动内容](https://chromium.googlesource.com/chromium/src/+/master/docs/security/faq.md#Are-PDF-files-static-content-in-Chromium)类型，可能包含JavaScript。
- en: Periodically, *less experienced* security researchers excitedly file this issue
    against **browsers**, and those reports are quickly resolved “[By Design](https://chromium.googlesource.com/chromium/src/+/master/docs/security/faq.md#Are-PDF-files-static-content-in-Chromium).”
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，*经验不足的*安全研究人员会兴奋地针对**浏览器**提交此问题，而这些报告很快会被“[按设计](https://chromium.googlesource.com/chromium/src/+/master/docs/security/faq.md#Are-PDF-files-static-content-in-Chromium)”解决。
- en: Periodically, *more experienced* security researchers excitedly file this issue
    against **sites and applications** that are willing to host or transfer untrusted
    PDF files, arguing that this represents a “[Stored Cross-Site Scripting vulnerability](https://owasp.org/www-community/attacks/xss/#stored-xss-attacks).”
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，*经验丰富的*安全研究人员会兴奋地针对**站点和应用程序**提交此问题，这些站点和应用程序愿意托管或传输不受信任的PDF文件，认为这代表了“[存储型跨站脚本漏洞](https://owasp.org/www-community/attacks/xss/#stored-xss-attacks)”。
- en: Their confusion here is somewhat more understandable– if a website allows a
    user to upload a **HTML document** containing script, and then serves that HTML
    document from their domain, any script within it will run in the security context
    of the serving domain. *That* describes a classic Stored XSS Attack, and it presents
    a security threat because the embedded script can steal or manipulate cookies
    (by accessing the `document.cookie` property), manipulate web platform storage
    (IndexedDB, `localStorage`, etc), conduct request forgery attacks from a 1st party
    origin, etc.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 他们在这里的困惑更加可以理解——如果一个网站允许用户上传包含脚本的**HTML文档**，然后从其域中提供该HTML文档，其中的任何脚本将在服务域的安全上下文中运行。*这*描述了经典的存储型XSS攻击，并且它存在安全威胁，因为嵌入的脚本可以窃取或操作cookie（通过访问`document.cookie`属性），操作Web平台存储（IndexedDB、`localStorage`等），进行来自第一方源的请求伪造攻击等。
- en: The story for PDF documents is very different.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: PDF文档的情况则大不相同。
- en: The [Chrome Security FAQ](https://chromium.googlesource.com/chromium/src/+/master/docs/security/faq.md#does-executing-javascript-in-a-pdf-file-mean-there_s-an-xss-vulnerability)
    describes the limitation tersely, noting `the set of bindings provided to the
    PDF are more limited than those provided by the DOM to HTML documents, nor do
    PDFs get any ambient authority based upon the domain from which they are served`.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[Chrome安全FAQ](https://chromium.googlesource.com/chromium/src/+/master/docs/security/faq.md#does-executing-javascript-in-a-pdf-file-mean-there_s-an-xss-vulnerability)简要描述了这一限制，指出PDF文件提供给PDF的绑定集合比HTML文档提供给DOM的更有限，并且PDF不会根据其服务域获得任何环境权限。'
- en: 'What does that mean? It means that, while PDF’s JavaScript does run, the *universe*
    the script runs in is limited: there’s no access to cookies or storage, very limited
    ability to make requests (e.g. you can navigate the document’s window elsewhere,
    but that’s about it), and no ability to make use of the Web Platform’s powerful
    capabilities exposed by the HTML Document Object Model (DOM) objects like `document`,
    `window`, `navigator`, et cetera. While the capabilities of JavaScript in PDF
    are extremely limited, they’re not non-existent, and PDF engine software must
    take care to avoid introducing new capabilities that void the safety assumptions
    of PDF-handling code.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是什么意思？这意味着，虽然 PDF 中的 JavaScript 确实运行，但脚本运行的*宇宙*是受限的：无法访问 cookie 或存储，极其有限地进行请求（例如，可以将文档的窗口导航到其他位置，但仅此而已），也无法利用
    HTML 文档对象模型（DOM）对象如 `document`、`window`、`navigator` 等所暴露的 Web 平台强大功能。虽然 PDF 中的
    JavaScript 能力非常有限，但并非不存在，PDF 引擎软件必须小心，避免引入新的功能，从而破坏 PDF 处理代码的安全性假设。
- en: Restricting JavaScript in PDF
  id: totrans-split-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 限制 PDF 中的 JavaScript
- en: Engineers should take care that handling of JavaScript in PDF respects app/user
    settings. For example, if the user turns off JavaScript for a site, PDFs hosted
    on that site [shouldn’t allow script](https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/resources/pdf/main.ts;l=40;drc=1076746b494b84eeaf625c7a475ee501de270f17)
    either. This works properly in Chrome and Edge.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 工程师们应该注意，在处理 PDF 中的 JavaScript 时，要尊重应用程序/用户的设置。例如，如果用户在某个网站上关闭了 JavaScript，那么托管在该网站上的
    PDF 文件 [不应允许脚本](https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/resources/pdf/main.ts;l=40;drc=1076746b494b84eeaf625c7a475ee501de270f17)。这在
    Chrome 和 Edge 中都能正常工作。
- en: 'Firefox’s global `javascript.enabled` toggle from the `about:`config page doesn’t
    impact script inside its PDF viewer:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: Firefox 中全局的 `javascript.enabled` 切换设置并不影响其 PDF 查看器中的脚本：
- en: Instead, Firefox offers an individual `pdfjs.enableScripting` preference that
    can be configured from the `about:`config page.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，Firefox 提供了一个名为 `pdfjs.enableScripting` 的个别偏好设置，可以从 `about:`config 页面进行配置。
- en: Chromium currently [ignores](https://issues.chromium.org/issues/41494478) `Content-Security-Policy`
    headers on PDF responses because it renders PDF files using web technologies that
    could otherwise be disallowed by the `CSP`, leading to user confusion and webdev
    annoyance.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: Chromium 目前 [忽略](https://issues.chromium.org/issues/41494478) PDF 响应中的 `Content-Security-Policy`
    头部，因为它使用 web 技术来渲染 PDF 文件，这可能与 `CSP` 不兼容，导致用户困惑和开发者不便。
