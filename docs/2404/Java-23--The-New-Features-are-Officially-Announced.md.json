["```\nstatic final VectorSpecies<Float> SPECIES = FloatVector.SPECIES_PREFERRED;\n\nvoid vectorComputation(float[] a, float[] b, float[] c) {\n    int i = 0;\n    int upperBound = SPECIES.loopBound(a.length);\n    for (; i < upperBound; i += SPECIES.length()) {\n        // FloatVector va, vb, vc;\n        var va = FloatVector.fromArray(SPECIES, a, i);\n        var vb = FloatVector.fromArray(SPECIES, b, i);\n        var vc = va.mul(va)\n                   .add(vb.mul(vb))\n                   .neg();\n        vc.intoArray(c, i);\n    }\n    for (; i < a.length; i++) {\n        c[i] = (a[i] * a[i] + b[i] * b[i]) * -1.0f;\n    }\n}\n```", "```\nClassWriter classWriter = ...;\nMethodVisitor mv = classWriter.visitMethod(0, \"fooBar\", \"(ZI)V\", null, null);\nmv.visitCode();\nmv.visitVarInsn(ILOAD, 1);\nLabel label1 = new Label();\nmv.visitJumpInsn(IFEQ, label1);\nmv.visitVarInsn(ALOAD, 0);\nmv.visitVarInsn(ILOAD, 2);\nmv.visitMethodInsn(INVOKEVIRTUAL, \"Foo\", \"foo\", \"(I)V\", false);\nLabel label2 = new Label();\nmv.visitJumpInsn(GOTO, label2);\nmv.visitLabel(label1);\nmv.visitVarInsn(ALOAD, 0);\nmv.visitVarInsn(ILOAD, 2);\nmv.visitMethodInsn(INVOKEVIRTUAL, \"Foo\", \"bar\", \"(I)V\", false);\nmv.visitLabel(label2);\nmv.visitInsn(RETURN);\nmv.visitEnd();\n```", "```\nClassBuilder classBuilder = ...;\nclassBuilder.withMethod(\"fooBar\", MethodTypeDesc.of(CD_void, CD_boolean, CD_int), flags,\n                        methodBuilder -> methodBuilder.withCode(codeBuilder -> {\n    Label label1 = codeBuilder.newLabel();\n    Label label2 = codeBuilder.newLabel();\n    codeBuilder.iload(1)\n        .ifeq(label1)\n        .aload(0)\n        .iload(2)\n        .invokevirtual(ClassDesc.of(\"Foo\"), \"foo\", MethodTypeDesc.of(CD_void, CD_int))\n        .goto_(label2)\n        .labelBinding(label1)\n        .aload(0)\n        .iload(2)\n        .invokevirtual(ClassDesc.of(\"Foo\"), \"bar\", MethodTypeDesc.of(CD_void, CD_int))\n        .labelBinding(label2);\n        .return_();\n});\n```", "```\nswitch (x.getStatus()) {\n    case 0 -> \"okay\";\n    case 1 -> \"warning\";\n    case 2 -> \"error\";\n    case int i -> \"unknown status: \" + i;\n}\n```", "```\npublic class PositiveBigInteger extends BigInteger {\n\n    public PositiveBigInteger(long value) {\n        if (value <= 0)\n            throw new IllegalArgumentException(\"non-positive value\");\n        super(value);\n    }\n\n}\n```"]