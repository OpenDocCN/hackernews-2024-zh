- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 12:58:56'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Programming With DOS Debugger - Susam Pal
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://susam.net/programming-with-dos-debugger.html](https://susam.net/programming-with-dos-debugger.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <main>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: Programming With DOS Debugger
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By **Susam Pal** on 11 Feb 2003
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MS-DOS as well as Windows 98 come with a debugger program named `DEBUG.EXE`
    that can be used to work with assembly language instructions and machine code.
    In MS-DOS version 6.22, this program is named `DEBUG.EXE` and it is typically
    present at `C:\DOS\DEBUG.EXE`. On Windows 98, this program is usually present
    at `C:\Windows\Command\Debug.exe`. It is a line-oriented debugger that supports
    various useful features to work with and debug binary executable programs consisting
    of machine code.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we see how we can use this debugger program to assemble a few
    minimal programs that print some characters to standard output. We first create
    a 7-byte program that prints a single character. Then we create a 23-byte program
    that prints the "hello, world" string. All the steps provided in this post work
    well with Windows 98 too.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: Contents
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Print Character
  id: totrans-split-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us first see how to create a tiny 7-byte program that prints the character
    `A` to standard output. The following `DEBUG.EXE` session shows how we do it.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now we can execute this program as follows:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The debugger command `A` creates machine executable code from assembly language
    instructions. The machine code created is written to the main memory at address
    CS:0100 by default. The first three instructions generate the software interrupt
    0x21 (decimal 33) with AH set to 2 and DL set to 0x41 (decimal 65) which happens
    to be the ASCII code of the character `A`. Interrupt 0x21 offers a wide variety
    of DOS services. Setting AH to 2 tells this interrupt to invoke the function that
    prints a single character to standard output. This function expects DL to be set
    to the ASCII code of the character we want to print.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: The command `G` executes the program in memory from the current location. The
    current location is defined by the current value of CS:IP which is CS:0100 by
    default. We use this command to confirm that the program runs as expected.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: Next we prepare to write the machine code to a binary executable file. The command
    `N` is used to specify the name of the file. The command `W` is used to write
    the machine code to the file. This command expects the registers BX and CX to
    contain the number of bytes to be written to the file. When the DOS debugger starts,
    BX is already initialised to 0, so we only set the register CX to 7 with the `R
    CX` command. Finally, we use the command `Q` to quit the debugger and return to
    MS-DOS.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: Hello, World
  id: totrans-split-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following `DEBUG.EXE` session shows how to create a program that prints
    a string.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we can execute this 23-byte program like this:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the program above we use the pseudo-instruction `DB` to define the bytes
    of the string we want to print. We add the trailing bytes 0xD and 0xA to print
    the carriage return (CR) and the line feed (LF) characters so that the string
    is terminated with a newline. Finally, the string is terminated with the byte
    for dollar sign (`'/main>`) because the software interrupt we generate next expects
    the string to be terminated with this symbol's byte value.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们使用伪指令 `DB` 来定义我们要打印的字符串的字节。我们添加尾随字节 0xD 和 0xA 来打印回车（CR）和换行（LF）字符，以便字符串以换行符终止。最后，字符串以美元符号（`'/main>`）的字节结束，因为接下来生成的软中断期望字符串以此符号的字节值终止。
- en: We use the software interrupt 0x21 again. However, this time we set AH to 9
    to invoke the function that prints a string. This function expects DS:DX to point
    to the address of a string terminated with the byte value of `'/main>`. The register
    `DS` has the same value as that of `CS`, so we only set `DX` to the offset at
    which the string begins.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用软中断 0x21。然而，这次我们将 AH 设置为 9，以调用打印字符串的函数。该函数期望 DS:DX 指向以`'/main>`字节值结尾的字符串的地址。寄存器
    `DS` 的值与 `CS` 相同，因此我们只需将 `DX` 设置为字符串开始的偏移量。
- en: Debugger Scripting
  id: totrans-split-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试器脚本
- en: We have already seen above how to assemble a "hello, world" program in the previous
    section. We started the debugger program, typed some commands, and typed assembly
    language instructions to create our program. It is also possible to prepare a
    separate input file with all the debugger commands and assembly language instructions
    in it. We then feed this file to the debugger program. This can be useful while
    writing more complex programs where we cannot afford to lose our assembly language
    source code if we inadvertently crash the debugger by executing an illegal instruction.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们已经了解了如何组装一个 "hello, world" 程序。我们启动了调试器程序，输入了一些命令，并输入了汇编语言指令来创建我们的程序。还可以准备一个单独的输入文件，其中包含所有调试器命令和汇编语言指令。然后，我们将此文件提供给调试器程序。在编写更复杂的程序时，如果我们因执行非法指令而意外崩溃调试器，不能丢失我们的汇编语言源代码，这将非常有用。
- en: To create a separate input file that can be fed to the debugger, we may use
    the DOS command `EDIT HELLO.TXT` to open a new file with MS-DOS Editor, then type
    in the following debugger commands, and then save and exit the editor.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个可以提供给调试器的单独输入文件，我们可以使用 DOS 命令 `EDIT HELLO.TXT` 打开一个新文件，使用 MS-DOS 编辑器，然后输入以下调试器命令，保存并退出编辑器。
- en: '[PRE4]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is almost the same as the inputs we typed into the debugger in the previous
    section. The only difference from the previous section is that we omit the `G`
    command here because we don't really need to run the program while assembling
    it, although we could do so if we really wanted to.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们在前一节中在调试器中输入的内容几乎相同。与前一节的唯一区别是，我们这里省略了 `G` 命令，因为在组装程序时我们实际上不需要运行程序，尽管如果真的想要，我们也可以这样做。
- en: 'Then we can run the DOS command `DEBUG < HELLO.TXT` to assemble the program
    and create the binary executable file. Here is a DOS session example that shows
    what the output of this command looks like:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以运行 DOS 命令 `DEBUG < HELLO.TXT` 来组装程序并创建二进制可执行文件。下面是一个显示此命令输出的 DOS 会话示例：
- en: '[PRE5]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The output is in fact very similar to the debugger session in the previous section.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，输出与前一节中的调试器会话非常相似。
- en: Disassembly
  id: totrans-split-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反汇编
- en: Now that we have seen how to assemble simple programs into binary executable
    files using the debugger, we will now briefly see how to disassemble the binary
    executable files. This could be useful when we want to debug an existing program.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何使用调试器将简单程序组装成二进制可执行文件，接下来我们将简要介绍如何反汇编二进制可执行文件。当我们需要调试现有程序时，这将非常有用。
- en: '[PRE6]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The debugger command `U` (unassemble) is used to translate the binary machine
    code to assembly language mnemonics.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器命令 `U`（反汇编）用于将二进制机器码翻译成汇编语言助记符。
- en: '[PRE7]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: INT 20 vs RET
  id: totrans-split-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: INT 20 vs RET
- en: 'Another way to terminate a .COM program is to simply use the instruction `INT
    20`. This consumes two bytes in the machine code: `CD 20`. While producing the
    smallest possible executables was not really the goal of this post, the code examples
    above indulge in a little bit of size reduction by using the `RET` instruction
    to terminate the program. This consumes only one byte: `C3`. This works because
    when a .COM file starts, the register SP contains FFFE. The stack memory locations
    at offset FFFE and FFFF contain 00 and 00, respectively. Further, the memory address
    offset 0000 contains the instruction `INT 20`. Here is a demonstration of these
    facts using the debugger program:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 终止.COM程序的另一种方式是直接使用指令`INT 20`。这在机器代码中消耗两个字节：`CD 20`。虽然本篇文章的真正目标不是创建最小可执行文件，但通过使用`RET`指令示例中的终止程序，
    我们在游戏中获得了些许的大小减少。它仅消耗一个字节：`C3`。这是因为当.COM文件开始时，寄存器SP包含FFEFE。栈内存位置在FFEFE处和FFFF处分别包含00和00。进一步地说，内存地址偏移F000包含指令`INT
    20`。通过调试工具的演示，我们可以展现这些事实：
- en: '[PRE8]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As a result, executing the `RET` instruction pops 0000 off the stack at FFFE
    and loads it into IP. This results in the instruction `INT 20` at offset 0000
    getting executed which leads to program termination.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是`RET`指令在FFEFE位置弹出0000并将其加载到IP中。这导致偏移0000处的指令`INT 20`被执行，导致程序终止。
- en: While both `INT 20` and `RET` lead to successful program termination both in
    DOS as well as while debugging with `DEBUG.EXE`, there is some difference between
    them which affects the debugging experience. Terminating the program with `INT
    20` allows us to run the program repeatedly within the debugger by repeated applications
    of the `G` debugger command. But when we terminate the program with `RET`, we
    cannot run the program repeatedly in this manner. The program runs and terminates
    successfully the first time we run it in the debugger but the stack does not get
    reinitialised with zeros to prepare it for another execution of the program within
    the debugger. Therefore when we try to run the program the second time using the
    `G` command, the program does not terminate successfully. It hangs instead. It
    is possible to work around this by reinitialising the stack with the debugger
    command `E FFFE 0 0` before running `G` again.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`INT 20`和`RET`在DOS和使用`DEBUG.EXE`进行调试时都成功地终止了程序，但它们之间存在某些差异，这一点影响了调试体验。使用`INT
    20`终止程序允许我们在调试器中通过多次应用`G`调试器命令反复运行程序。但当我们将程序终止方式改为使用`RET`时，我们不能使用类似的方式反复运行程序。程序第一次在调试器中运行并成功终止，但栈不会重新初始化为零准备在另一个调试器中的程序执行。因此，当我们尝试第二次使用`G`命令运行程序时，程序不会成功终止，仅挂起。我们可以通过在再次运行`G`命令前通过调试器命令`E
    FFFE 0 0`重新初始化栈来解决这个问题。
- en: Conclusion
  id: totrans-split-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Although the DOS debugger is very limited in features in comparison with sophisticated
    assemblers like NASM, MASM, etc., this humble program can perform some of the
    basic operations involved in working with assembly language and machine code.
    It can read and write binary executable files, examine memory, execute machine
    instructions in memory, modify registers, edit binary files, etc. The fact that
    this debugger program is always available with MS-DOS or Windows 98 system means
    that these systems are ready for some rudimentary assembly language programming
    without requiring any additional tools.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然DOS调试器在功能上与NASM、MASM等复杂汇编器相比十分有限，但这个笨拙的程序可以执行与汇编语言和机器代码相关的一些基本操作。它可以读取和写入二进制可执行文件，检查内存，执行内存中的机器指令，修改寄存器，编辑二进制文件等。DOS或Windows
    98系统总是随附这个调试程序的事实意味着，这些系统为一些基础的汇编语言编程做好了准备，无需额外的工具。
- en: </main>
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
