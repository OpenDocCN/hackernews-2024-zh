- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 12:57:33'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月27日12:57:33
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Tattle
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tattle
- en: 来源：[https://tattle.co.in/blog/2024-04-03-securing-feluda-pt1/](https://tattle.co.in/blog/2024-04-03-securing-feluda-pt1/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://tattle.co.in/blog/2024-04-03-securing-feluda-pt1/](https://tattle.co.in/blog/2024-04-03-securing-feluda-pt1/)
- en: Securing your Codebase
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护您的代码库
- en: Published on Tue Apr 02 2024Aurora - Feluda
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 发表于2024年4月2日Aurora - Feluda
- en: We have recently made numerous improvements to [Feluda](https://github.com/tattle-made/feluda),
    following a security-first approach to allow long-term maintenance and active
    contributions. These approaches are not specific to Feluda, but can be applied
    to any software project. These articles are written for a technical audience,
    and we hope they help other projects learn how to implement these practices for
    a safer digital experience.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最近对[Feluda](https://github.com/tattle-made/feluda)进行了许多改进，遵循安全优先的方法，以支持长期维护和积极贡献。这些方法不仅适用于Feluda，还可以应用于任何软件项目。这些文章是为技术人员撰写的，我们希望它们帮助其他项目学习如何为更安全的数字体验实施这些实践。
- en: When building software projects, every developer should take ownership ensuring
    that the code they write is secure, before it can be accepted into the codebase.
    Though the idea is daunting, the learning curve has substantially reduced with
    current security tooling that also serve as teaching aids. This approach ensures
    that the responsibility of maintaining security does not fall solely on a separate
    cybersecurity team to fix bugs after the code is already in the repository. Hence,
    bug fixes occur earlier in the development pipeline, or more towards the left
    when the development cycle is visualized as starting from the left and ending
    at the right. Hence, this approach to secure code development is also known as
    a [shift-left](https://en.wikipedia.org/wiki/DevOps#DevSecOps,_shifting_security_left)
    approach. The process is part of what the "DevSecOps" team aims to accomplish.
    As the name suggests, this includes development, security and operations. These
    teams have different objectives that are [generally misaligned](https://www.youtube.com/watch?v=EB5yT-GS460).
    Developers want faster development, operations folks desire stability, while the
    cybersecurity people want secure code. DevSecOps is guided by the [CALMS framework](https://www.atlassian.com/devops/frameworks/calms-framework)
    - Culture, Automation, Lean, Measurement, and Sharing. The approach advocates
    for a culture shift towards collaboration, automating components for reproducible
    and stable systems, implementing the process in a lean manner for agility, measuring
    improvements from the processes implemented, and sharing knowledge to break down
    siloed teams for increased trust, agility and reliability.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建软件项目时，每个开发人员都应确保他们编写的代码在被接受到代码库之前是安全的。虽然这个想法令人望而生畏，但通过当前的安全工具，学习曲线大大降低，这些工具也充当教学辅助工具。这种方法确保了维护安全责任不仅仅落在单独的网络安全团队身上，以修复代码已经进入存储库后的漏洞。因此，在开发管线的早期阶段或更向左的地方进行bug修复。当开发周期被视为从左到右开始和结束时，这种方法也被称为[向左转移](https://en.wikipedia.org/wiki/DevOps#DevSecOps,_shifting_security_left)方法。该过程是“DevSecOps”团队旨在实现的一部分。正如名称所示，这包括开发、安全和运营。这些团队有不同的目标，通常是[不对齐的](https://www.youtube.com/watch?v=EB5yT-GS460)。开发人员希望更快的开发，运营人员希望稳定性，而网络安全人员则希望安全代码。DevSecOps遵循[CALMS框架](https://www.atlassian.com/devops/frameworks/calms-framework)
    - 文化、自动化、精益、测量和分享。该方法倡导文化转变，朝向协作，为可重复和稳定的系统自动化组件，以敏捷的方式实施过程，从实施的过程中衡量改进，并分享知识，打破团队之间的隔离，增加信任、敏捷性和可靠性。
- en: We will now discuss how we implemented automations for Feluda within the development
    cycle for increased security, reduced technical debt, code robustness and stability.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将讨论如何在开发周期中为Feluda实施自动化，以提高安全性、减少技术债务、增强代码健壮性和稳定性。
- en: Our goal was to ensure that insecure code does not enter the Feluda code repository.
    For that, we setup checks that run every time someone contributes code to Feluda
    i.e. the checks run every time a Pull Request (PR) is opened for any branch in
    the Feluda repository. This automated testing is setup using [Continuous Integration](https://en.wikipedia.org/wiki/Continuous_integration)
    (CI) pipelines. If the checks fail, the option to merge the changes into the codebase
    is automatically blocked. In Github, these are done through [Github Actions Workflows](https://docs.github.com/en/actions/using-workflows).
    You can view these [here](https://github.com/tattle-made/feluda/tree/main/.github/workflows)
    in the Feluda repository.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是确保不安全的代码不进入Feluda代码仓库。为此，我们设置了每当有人向Feluda贡献代码时运行的检查，即每当在Feluda仓库的任何分支中打开Pull
    Request（PR）时运行检查。这种自动化测试是使用[持续集成](https://en.wikipedia.org/wiki/Continuous_integration)（CI）流水线设置的。如果检查失败，将自动阻止将更改合并到代码库中的选项。在Github中，这些操作通过[Github
    Actions Workflows](https://docs.github.com/en/actions/using-workflows)完成。您可以在Feluda代码库的[这里](https://github.com/tattle-made/feluda/tree/main/.github/workflows)查看。
- en: It is good practice to have all tests running in the CI pipeline as part of
    pre-commit checks too. Pre-commit checks run every time a developer tries to commit
    code locally. If the checks fail, the local commit fails, forcing the developer
    to fix the bugs before waiting for the PR to fail. However, there are drawbacks
    to pre-commit checks. For one, pre-commit checks may silently fail to run when
    using a GUI tool to [commit changes](https://github.com/typicode/husky/issues/390#issuecomment-436966021).
    More importantly, pre-commit checks rely on the assumption that the developer
    is not malicious and will not bypass these checks locally to commit changes. Hence,
    it is essential to have all checks running as part of the CI pipeline.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有测试作为预提交检查的一部分运行在CI流水线中是良好的做法。预提交检查在开发人员尝试在本地提交代码时每次运行。如果检查失败，本地提交将失败，强制开发人员在等待PR失败之前修复错误。然而，预提交检查也有缺点。首先，当使用GUI工具来[提交更改](https://github.com/typicode/husky/issues/390#issuecomment-436966021)时，预提交检查可能会默默失败运行。更重要的是，预提交检查依赖于开发人员不是恶意的并且不会在本地绕过这些检查来提交更改的假设。因此，将所有检查作为CI流水线的一部分运行是至关重要的。
- en: List of [checks](https://www.youtube.com/watch?v=cmWQF2FDlG8) for a security-focused
    software project
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 安全重点软件项目的[检查清单](https://www.youtube.com/watch?v=cmWQF2FDlG8)
- en: A basic check to ensure submitted code is not buggy is to ensure that the existing
    features still work after we merge new code. For this, it is essential to have
    [unit tests](https://en.wikipedia.org/wiki/Unit_testing) and [integration tests](https://en.wikipedia.org/wiki/Integration_testing)
    with sufficient [code coverage](%5Bhttps://en.wikipedia.org/wiki/Code_coverage).
    Our team continued adding tests to every new and existing feature so that we could
    test that we do not break features during development. Further, we setup a Github
    workflow that [runs tests](https://github.com/tattle-made/feluda/blob/main/.github/workflows/pr-tests.yml)
    for every PR created.
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保提交的代码没有错误的基本检查是确保在合并新代码后现有功能仍然正常工作。为此，有足够的[单元测试](https://en.wikipedia.org/wiki/Unit_testing)和[集成测试](https://en.wikipedia.org/wiki/Integration_testing)以及足够的[代码覆盖率](%5Bhttps://en.wikipedia.org/wiki/Code_coverage)是至关重要的。我们的团队继续为每个新功能和现有功能添加测试，以便在开发过程中测试我们不会破坏功能。此外，我们设置了一个Github工作流，用于[运行测试](https://github.com/tattle-made/feluda/blob/main/.github/workflows/pr-tests.yml)以验证每个创建的PR。
- en: The next step is to add linting code as part of the CI pipeline. A language-specific
    [linter](https://en.wikipedia.org/wiki/Lint_(software)) checks for basic syntax
    and formatting issues. While linting does not indicate security issues, it does
    indicate poorly written code, which may be buggy right now or will eventually
    become buggy. Hence, it is essential to fix these issues early than accumulate
    technical debt that leads to potential future security and stability issues.
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的步骤是将代码检查作为CI流水线的一部分添加。语言特定的[linter](https://en.wikipedia.org/wiki/Lint_(software))检查基本的语法和格式问题。虽然linting不会指示安全问题，但它确实指出了编写不良代码，这些代码可能目前有错误或最终会变得有错误。因此，早期修复这些问题比积累可能导致未来安全和稳定问题的技术债务更为重要。
- en: Most modern software use package repositories from which they source external
    dependencies. These include Gradle and Maven for Java, PyPi for Python and NPM
    registry for Node.js projects. Most package repositories maintain a database of
    known vulnerabilities in each version of the projects they host. These are not
    necessarily intentionally malicious packages, but include vulnerabilities that
    were discovered after product release. The language-specific tooling usually has
    auditing tools to check the packages you are using against the vulnerability database.
    You can typically check for these using, for example, the `pip audit` command
    for dependencies sourced from PyPi or `npm audit` for dependencies sourced from
    NPM registry. Vulnerability databases are usually downloaded and checks are run
    locally to prevent vulnerabilities in your code from being made visible to third-party
    servers. If security issues are found, the fix is usually as simple as upgrading
    the package to a newer version. The audit tools provide options for an automatic
    fix or more information if there is none. In case a fix is not available, you
    have the hard choice of moving to a more secure dependency or wait for an updated
    version with the fix. In either case, you now know that your codebase has known
    vulnerabilities. Dependency auditing is a basic check during code development.
    However, it becomes essential in a CI system since new code that is submitted
    may have either added a new known malicious package or downgraded an existing
    package to a vulnerable version. In Feluda, we run dependency auditing for every
    PR.
  id: totrans-split-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大多数现代软件使用软件包存储库来获取外部依赖项。这些存储库包括 Java 的 Gradle 和 Maven，Python 的 PyPi，以及 Node.js
    项目的 NPM 注册表。大多数软件包存储库维护着每个项目版本中已知漏洞的数据库。这些漏洞不一定是故意的恶意软件包，而是在产品发布后发现的漏洞。语言特定的工具通常具有审计工具，用于检查您正在使用的软件包与漏洞数据库的匹配情况。例如，您可以使用
    `pip audit` 命令检查来自PyPi的依赖项，或者使用 `npm audit` 检查来自NPM注册表的依赖项。漏洞数据库通常会下载并在本地运行检查，以防止您的代码中的安全问题暴露给第三方服务器。如果发现安全问题，修复通常只需将软件包升级到较新版本。审计工具提供自动修复选项或更多信息（如果没有修复）。如果修复不可用，则需要选择更安全的依赖项或等待包含修复的更新版本。无论哪种情况，您现在知道您的代码库存在已知的漏洞。依赖关系审计在代码开发过程中是基本的检查，但在CI系统中变得至关重要，因为提交的新代码可能添加了一个新的已知恶意软件包或将现有软件包降级到一个易受攻击的版本。在Feluda中，我们为每个PR运行依赖关系审计。
- en: While dependency auditing is good practice, it is best practice to always use
    the latest version of all software tools and dependencies. This ensures that bug
    fixes are applied as soon as possible, protecting against undiscovered vulnerabilities
    and known stability issues. This is accomplished using [Software Composition Analysis](https://en.wikipedia.org/wiki/Software_composition_analysis)
    (SCA) tools that scan your codebase for all dependencies and can automatically
    create PRs for you to update your packages. These tools also alert you as soon
    as a new vulnerability is found in one of your dependencies. Dependabot is a tool
    by Github that is easy to setup for this purpose. [Renovate](https://github.com/renovatebot/renovate)
    is a good open-source alternative. When upgrading packages directly through PRs
    created by SCA tools, it becomes essential that you have unit and integration
    tests running in CI to ensure automated package updates don't break your software
    functionality. This is even more important when there are major version updates
    (which imply breaking changes).
  id: totrans-split-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管依赖关系审计是良好的实践，但始终使用所有软件工具和依赖项的最新版本是最佳实践。这样可以尽快应用程序修复，防止未发现的漏洞和已知的稳定性问题。这可以通过[软件组成分析](https://en.wikipedia.org/wiki/Software_composition_analysis)（SCA）工具实现，这些工具会扫描您的代码库以查找所有依赖项，并可以自动为您创建更新软件包的PR。这些工具还会在发现依赖项中的新漏洞时立即向您发出警报。Github
    的 Dependabot 是一个易于设置的工具，专门用于此目的。开源社区中的一个好的替代品是 [Renovate](https://github.com/renovatebot/renovate)。直接通过SCA工具创建的PR进行软件包升级时，确保在CI中运行单元测试和集成测试以确保自动化软件包更新不会破坏软件功能显得至关重要，尤其是在存在主要版本更新（意味着有破坏性更改）时更为重要。
- en: An essential security tooling to use is one that scans your codebase for secrets.
    These could include cryptographic keys or passwords to your development account
    or production server. It is important to setup this tool early so that secrets
    are not intentionally or unintentionally committed to the code repository and
    leaked publicly. Secret scanning tools exist because this oversight is common.
    Github provides a [secret scanning](https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning)
    tool. A good open-source option is [TruffleHog](https://github.com/trufflesecurity/trufflehog).
    In case you accidentally committed secrets to your repository, it's best to [rotate
    your keys](https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html).
    A good practice to prevent accidentally committing secrets is to use environment
    files to store secrets during development and adding these files to your `.gitignore`
    file to ensure these files are never uploaded.
  id: totrans-split-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用的一个必要的安全工具是扫描您的代码库以查找秘密信息。这些可能包括加密密钥或密码，用于您的开发帐户或生产服务器。重要的是尽早设置此工具，以确保秘密信息不会故意或无意地提交到代码库并公开泄露。秘密扫描工具存在是因为这种疏忽很常见。Github
    提供了一个[秘密扫描](https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning)工具。一个好的开源选择是[TruffleHog](https://github.com/trufflesecurity/trufflehog)。如果您意外地将秘密信息提交到您的存储库中，最好是[轮换您的密钥](https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html)。防止意外提交秘密信息的一个好方法是在开发过程中使用环境文件来存储秘密，并将这些文件添加到您的`.gitignore`文件中，以确保这些文件永远不会上传。
- en: The next step is to add a [static analysis](https://en.wikipedia.org/wiki/Static_program_analysis)
    tool that will check your code for vulnerabilities. This is an essential part
    to automate "[blue teaming](https://en.wikipedia.org/wiki/Blue_team_(computer_security))"
    or hardening of your defenses. There are multiple open source SAST tools available.
    Some work across multiple languages while otheres are geared for specific languages.
    These tools have different false positive and false negative rates. They will
    usually assign a risk score to the found vulnerability, and provide information
    on where the vulnerability exists in code, why this is bad coding practice, how
    to evaluate if this is really a risk, and how to mitigate the risk. These tools
    may provide a CVSS score [Common Vulnerability Scoring System](https://en.wikipedia.org/wiki/Common_Vulnerability_Scoring_System)
    or a CWE [(Common Weakness Enumeration)](https://en.wikipedia.org/wiki/Common_Weakness_Enumeration)
    for additional information to evaluate and fix issues. This is the step that can
    get daunting when initially starting to fix security issues. You need to be able
    to evaluate the risk, research on the optimal approach to apply a fix, and ensure
    that the fix does not add additional vulnerabilities to your code. However, it
    is important to understand that many security issues you may encounter will probably
    be low complexity issues and easy to fix for most developers with sufficient technical
    knowledge. It is ideal to have someone experienced to advise and review your code
    at this stage. In Feluda, we use the open source python-specific SAST tool [bandit](https://github.com/PyCQA/bandit),
    to automate vulnerability scanning on each PR.
  id: totrans-split-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是添加一个[静态分析](https://en.wikipedia.org/wiki/Static_program_analysis)工具，它将检查您的代码中的漏洞。这是自动化"[蓝队战术](https://en.wikipedia.org/wiki/Blue_team_(computer_security))"或加固防御的重要部分。有多个开源的SAST工具可用。一些适用于多种语言，而另一些则专为特定语言设计。这些工具具有不同的误报率和漏报率。它们通常会为发现的漏洞分配一个风险评分，并提供有关漏洞存在于代码中的位置、为何这是不良编码实践、如何评估其是否真正存在风险以及如何减轻风险的信息。这些工具可能会提供CVSS评分[通用漏洞评分系统](https://en.wikipedia.org/wiki/Common_Vulnerability_Scoring_System)或CWE[(通用弱点枚举)](https://en.wikipedia.org/wiki/Common_Weakness_Enumeration)以获取额外的信息以评估和修复问题。这是开始解决安全问题时可能变得艰巨的步骤。您需要能够评估风险，研究最佳方法来应用修复，并确保修复不会为您的代码增加额外的漏洞。然而，重要的是要理解，您可能遇到的许多安全问题可能是低复杂性问题，并且对于具有足够技术知识的大多数开发人员来说很容易修复。在这个阶段最好有经验丰富的人士提供建议并审查您的代码。在Feluda中，我们使用开源的特定于Python的SAST工具[bandit](https://github.com/PyCQA/bandit)，在每个PR上自动化漏洞扫描。
- en: Feluda is a server-side project that gets deployed on a hosted production machine
    to function. Hence, we have a lot of Infrastructure-as-Code (IaC) files as part
    of our production deployment process. IaC files can include dockerfiles and kubernetes
    configuration files. It is important to ensure that IaC code itself does not have
    security issues and is following best practices. These issues can be discovered
    by tools built for scanning IaC code. For Feluda, we use the open source IaC scanning
    tool [Trivy](https://github.com/aquasecurity/trivy) to scan for production configuration
    vulnerabilities. Fixing IaC vulnerabilities requires knowledge of hardening configuration
    files, and may require in-depth research.
  id: totrans-split-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Feluda是一个部署在托管生产机器上运行的服务器端项目。因此，我们的生产部署流程中包含大量的基础设施即代码（IaC）文件。IaC文件可以包括dockerfile和kubernetes配置文件。确保IaC代码本身没有安全问题并且遵循最佳实践非常重要。这些问题可以通过专门用于扫描IaC代码的工具来发现。对于Feluda，我们使用开源的IaC扫描工具[Trivy](https://github.com/aquasecurity/trivy)来扫描生产配置的漏洞。修复IaC漏洞需要掌握加固配置文件的技能，并可能需要深入研究。
- en: 'Note: SAST tools and IaC vulnerability scanning tools keep getting updated
    with better scanning techniques and/or updated vulnerability databases. Hence,
    it is best practice to have these tools run weekly as part of a cron job in CI
    so new vulnerabilities in existing code can be detected.'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：SAST工具和IaC漏洞扫描工具不断更新，采用更好的扫描技术和/或更新的漏洞数据库。因此，作为CI的定期cron作业的最佳实践，每周运行这些工具可以检测现有代码中的新漏洞。
- en: We also use the [OSSF Scorecard](https://github.com/ossf/scorecard) static supply-chain
    security analysis tool to measure the security posture of Feluda. This tool is
    able to suggest fixes to prevent supply-chain attacks, which are increasingly
    becoming common. The issues detected may require fixes as simple as pinning dependencies.
  id: totrans-split-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还使用[OSSF Scorecard](https://github.com/ossf/scorecard)静态供应链安全分析工具来评估Feluda的安全状况。该工具能够建议修复措施以防止供应链攻击，这种攻击越来越普遍。检测到的问题可能需要简单的依赖关系固定修复。
- en: Finally - A software project can never be guaranteed to be 100% secure. It is
    also not possible to detect every vulnerability in a project by the core team
    alone. Hence, it is essential to provide a method for external researchers to
    securely submit security issues without fear of retaliation. For that, we have
    written a security policy for Feluda that can be accessed [here](https://github.com/tattle-made/feluda/security/policy).
    Writing a security policy requires a basic understanding of cybersecurity laws
    and how they function in practice, best practices in reporting security issues
    and vulnerability disclosure processes.
  id: totrans-split-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后 - 软件项目永远不能保证100%安全。核心团队也不可能单独检测项目中的每一个漏洞。因此，提供一种方法让外部研究人员安全提交安全问题而不必担心报复是至关重要的。为此，我们为Feluda撰写了一个安全政策，可以在[这里](https://github.com/tattle-made/feluda/security/policy)访问。撰写安全政策需要基本的网络安全法律理解，以及如何在实践中运作，报告安全问题的最佳实践和漏洞披露流程。
- en: Securing code is a continuous process and not necessarily a technical one. The
    human element is essential as it requires building a collaborative environment,
    avoiding blame, learning from mistakes, and developing trust.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 保护代码是一个持续的过程，并不一定是技术性的。人的因素至关重要，因为它需要建立协作环境，避免责备，从错误中学习，并建立信任。
