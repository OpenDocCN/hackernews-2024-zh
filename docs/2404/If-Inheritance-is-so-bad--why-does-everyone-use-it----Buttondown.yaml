- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:07:44'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:07:44'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: If Inheritance is so bad, why does everyone use it? • Buttondown
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果继承如此糟糕，为什么每个人都在使用它？ • Buttondown
- en: 来源：[https://buttondown.email/hillelwayne/archive/if-inheritance-is-so-bad-why-does-everyone-use-it/](https://buttondown.email/hillelwayne/archive/if-inheritance-is-so-bad-why-does-everyone-use-it/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://buttondown.email/hillelwayne/archive/if-inheritance-is-so-bad-why-does-everyone-use-it/](https://buttondown.email/hillelwayne/archive/if-inheritance-is-so-bad-why-does-everyone-use-it/)
- en: <date>May 15, 2020</date>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <date>2020年5月15日</date>
- en: If Inheritance is so bad, why does everyone use it?
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果继承如此糟糕，为什么每个人都在使用它？
- en: '[This essay](https://solovyov.net/blog/2020/inheritance/) says that inheritance
    is harmful and if possible you should "ban inheritance completely". You see these
    arguments a lot, as well as things like "prefer composition to inheritance". A
    lot of these arguments argue that in practice inheritance has problems. But they
    don''t preclude inheritance working in another context, maybe with a better language
    syntax. And it doesn''t explain why inheritance became so popular in the first
    place. I want to explore what''s *fundamentally* challenging about inheritance
    and why we all use it anyway.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[这篇文章](https://solovyov.net/blog/2020/inheritance/)称继承是有害的，如果可能的话应该“完全禁止继承”。你会经常看到这些争论，例如“更喜欢组合而不是继承”。许多这些论点认为在实践中继承存在问题。但这并不排除在另一种语境下继承能够工作，也许有更好的语言语法。它也没有解释为什么继承在第一次被广泛使用时如此流行。我想探讨继承中存在哪些*根本*的挑战，以及为什么我们还是会使用它。'
- en: 'My favorite essay on inheritance is [Why inheritance never made any sense](https://www.sicpers.info/2018/03/why-inheritance-never-made-any-sense/).
    In it Graham argues that there''s actually three ways that we mean inheritance:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我最喜欢的关于继承的文章是[为什么继承从未有意义过](https://www.sicpers.info/2018/03/why-inheritance-never-made-any-sense/)。在其中，格雷厄姆认为实际上有三种我们指的是继承的方式：
- en: 'Ontological inheritance is about specialisation: this thing is a specific variety
    of that thing (a football is a sphere and it has this radius)'
  id: totrans-split-10
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实体继承是关于特化的：这个东西是那个东西的特定品种（一个足球是一个球体，它有这个半径）
- en: 'Abstract data type inheritance is about substitution: this thing behaves in
    all the ways that thing does and has this behaviour (this is the Liskov substitution
    principle)'
  id: totrans-split-11
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 抽象数据类型继承是关于替换的：这个东西行为上像那个东西，并具有这种行为（这就是Liskov替换原则）。
- en: 'Implementation inheritance is about code sharing: this thing takes some of
    the properties of that thing and overrides or augments them in this way.'
  id: totrans-split-12
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现继承是关于代码共享的：这个东西获取那个东西的一些属性，并以这种方式覆盖或增强它们。
- en: Since conventional class-based inheritance conflates these three types of inheritance,
    it doesn't really satisfy any of them properly. This is what makes it so challenging
    to use in practice. Things like abstract data types and modules and such only
    hit one of these kinds at a time, properly separating the concerns and making
    them easier to use.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于传统的基于类的继承混淆了这三种继承类型，它并没有真正满足任何一种。这正是在实践中使用它如此具有挑战性的原因。像抽象数据类型和模块等只能一次命中其中一种类型，正确地分离关注点并使其更易于使用。
- en: So then why do we use inheritance instead of ADTs and modules and stuff? And
    that's where we need to look at the history.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那么为什么我们使用继承而不是ADT和模块等？这就是我们需要看看历史的地方。
- en: History
  id: totrans-split-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 历史
- en: 'Where did inheritance come from? As with many things in OOP, it comes from
    SIMULA-67\. The creators, Dahl and Nygaard, introduced objects as a generalization
    of their SIMULA-I''s simulation syntax. That''s important to understand why inheritance
    works the way it does: it was originally designed for use in simulation software.
    The [first examples](http://simula67.at.ifi.uio.no/Standard-70/Simula-1970-NR-22.pdf)
    of inheritance are for modeling customer orders and a jobshop simulation!'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 继承从哪里来？和面向对象编程的许多事物一样，它来自SIMULA-67。创造者达尔和尼加德将对象引入作为SIMULA-I模拟语法的一般化。理解为什么继承工作的方式是重要的：它最初是为了在仿真软件中使用而设计的。继承的[最初示例](http://simula67.at.ifi.uio.no/Standard-70/Simula-1970-NR-22.pdf)是用于建模客户订单和作业车间仿真！
- en: 'SIMULA had a big influence on other object languages. Smalltalk credits it
    for a lot of the design decisions. This meant that inheritance was pretty entrenched
    by the point that the alternative started appearing. And that''s the key point:
    inheritance came *first*. The idea of subtypes, or abstract data types, come from
    Barbara Liskov''s CLU. That was six years later, *in part* based on her knowledge
    of SIMULA. Notably, CLU was a research language, not an industry language. ADTs
    only entered widespread industry use with Java interfaces, about two decades after
    CLU. ^(In the intervening thirty years, inheritance was established by C++, Smalltalk,
    and Object Pascal.)'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: SIMULA对其他对象语言有很大影响。Smalltalk认为它在很多设计决策上有功劳。这意味着到了替代品开始出现的时候，继承已经相当根深蒂固了。这就是关键：继承*先出现*。子类型的概念或者说抽象数据类型，来源于巴巴拉·利斯科夫的CLU。六年后，这部分是基于她对SIMULA的了解。值得注意的是，CLU是一个研究语言，而不是行业语言。ADTs直到Java接口广泛使用，大约是CLU之后二十年才进入行业。
- en: Similarly, modularization was a concept for a while but modules only appeared
    as a first-class language component with Modula, which came out in 1975\. Even
    *today* most industry languages don't have proper modules that encourage code
    specialization. Most languages with "modules" are really just namespaces.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，模块化是一个概念一段时间了，但模块只在1975年推出的Modula中作为一个一流语言组成部分出现。即使*今天*，大多数行业语言也没有真正鼓励代码专业化的适当模块。大多数带有“模块”的语言实际上只是命名空间而已。
- en: Time to take off the Fact Hat and put on the Speculation Hat. It seems to me
    that ADTs and modules were in part influenced by the existence of inheritance.
    People saw the idea and try to separate out the various concerns. This happens
    quite often in language design, and in fact any sort of technical development.
    Often people will introduce a practical innovation that sort of blends together
    a bunch of abstract concepts *without knowing about those concepts beforehand*.
    It's only once the innovation is used in practice and people get a better "intuition"
    for it that they start to see the abstract concepts and try to tease them apart.
    Of course, once something becomes established it's very hard to get rid of. And
    because a lot of languages started out using inheritance, it became a common thing.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 时间到了，我们要摘下事实帽，戴上推测帽子了。在我看来，抽象数据类型（ADTs）和模块在一定程度上受到了继承的影响。人们看到这个概念，试图将各种关注点分离出来。这在语言设计中经常发生，在任何技术发展中也是如此。通常人们会引入一个实际的创新，将一堆抽象概念*在事先不知道这些概念的情况下*混合在一起。只有当这种创新在实践中被使用，并且人们对其有了更好的“直觉”时，他们才开始看到这些抽象概念并试图将它们区分开来。当然，一旦某物被确立，就很难摆脱。因为很多语言最初都使用了继承，所以它成为了一种常见的事物。
- en: 'See also: *everything else in software*.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 参见：*软件中的一切*。
- en: It's also notably the first case where we put a syntactic relationship between
    two classes. Surprisingly, it still remains one of the only ways to relate two
    classes. You've basically got interfaces, traits/mixins, and inheritance, and
    that's *it*. I suspect this is because most object relationships are domain-based,
    and while language syntax tries to remain generality-based.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是我们第一次在两个类之间建立语法关系。令人惊讶的是，它仍然是唯一一种关联两个类的方式。基本上有接口、特征/混入和继承，就是*这些*。我怀疑这是因为大多数对象关系都是基于领域的，而语言语法试图保持一般性。
- en: The better mousetrap
  id: totrans-split-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的老鼠夹
- en: 'There is one part of the story we need to talk about though: can we do inheritance
    in a better way? The key language here is Eiffel, by Bertrand Meyer. Eiffel used
    to be a rising giant in the OOP world but has mostly faded into irrelevance now.
    Among other things, almost all of the relationships were inheritance-based. There
    were no interfaces, no modules, no traits, etc. You''re even expected to use multiple
    inheritance quite regularly.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但有一个我们需要谈论的故事部分：我们能否以更好的方式进行继承？这里的关键语言是伊凡·梅尔的Eiffel。Eiffel曾经在面向对象编程世界中是一个崛起的巨人，但现在大多数已经淡出了视野。除了其他事情，几乎所有的关系都是基于继承的。没有接口、没有模块、没有特征等等。你甚至经常被期望使用多重继承。
- en: 'This isn''t as bad as it sounds. Eiffel was designed from the start to avoid
    a lot of the pitfalls that you often see with inheritance. For example it avoided
    the "diamond problem" with a robust renaming mechanism. It also had a really interesting
    feature that made its inheritance a lot more powerful: code contracts. You could
    place preconditions and postconditions on methods that would be checked and every
    call. If you inherited the class, though, Eiffel could guarantee that you could
    *only* weaken preconditions and *only* strengthen postconditions. This means that
    you can substitute a child class anywhere the parent class would be accepted and
    guarantee that all of the invariants were still satisfied. That''s a pretty cool
    language feature!'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实际情况并不像听起来那么糟糕。Eiffel 设计初衷就是避免你经常在继承中看到的许多问题。例如，它通过强大的重命名机制避免了“菱形问题”。它还有一个非常有趣的特性，使得它的继承更加强大：代码契约。你可以在方法上放置前置条件和后置条件，并且每次调用都会被检查。如果你继承了这个类，Eiffel
    可以保证你只能“弱化前置条件”和“加强后置条件”。这意味着你可以在父类接受的任何地方替换子类，并保证所有不变量仍然被满足。这是一个相当酷的语言特性！
- en: Incidentally, Meyer also coined the "open closed principle", which is the O
    in SOLID. So his thinking on languages did have at least some effect on our modern
    development, if somewhat indirect.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，梅耶还创造了“开闭原则”，这是 SOLID 原则中的 O。所以他在语言方面的思考至少对我们现代的开发有了一些影响，尽管有些间接。
- en: Unfortunately, Eiffel also had a minor problem with inheritance. You see, Eiffel
    is statically typed. The input types of a method's parameters are effectively
    preconditions. This means, to be type safe, you should only be able to "weaken
    the preconditions" on an inherited method's parameters' types, like say "instead
    of taking any natural number, this method can now take any integer". This is equivalent
    to replacing a type with its supertype, or "contravariance". But Meyer thought
    that ["wasn't useful"](https://archive.eiffel.com/doc/manuals/technology/typing/paper/page.html)
    and made method parameters *covariant*, replaceable with their *subtypes*. This
    makes the type system unsound.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Eiffel 在继承方面也存在一个小问题。你看，Eiffel 是静态类型的。方法参数的输入类型实际上是前置条件。这意味着，为了类型安全，你只能在继承方法的参数类型上“弱化前置条件”，比如说“不再接受任何自然数，而是可以接受任何整数”。这相当于用其超类型替换类型，或者“逆变”。但是梅耶认为这“没有用处”，并使方法参数*协变*，可以替换为它们的*子类型*。这使得类型系统不安全。
- en: They call this the "CATcall" problem and still haven't figured out how to fix
    it.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 他们称之为“CATcall”问题，至今仍未找到解决方法。
- en: So yeah, inheritance has problems. I mean of course there are cases where you
    can safely use it, and there are cases where it's the right choice, but it definitely
    shows signs of being a "first-generation solution".
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，继承确实存在问题。当然，也有一些情况下可以安全使用它，也有一些情况下它是正确的选择，但它显然显示出是“第一代解决方案”的迹象。
- en: Some thoughts on first-generation solutions
  id: totrans-split-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些关于第一代解决方案的想法
- en: Probably something bigger here worth exploring but that's getting further away
    from "why inheritance", so I'll leave that for another newsletter. Cheers!
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 也许还有更值得探索的更大的内容，但这已经远离了“为什么要继承”的讨论，所以我会把它留到下一期通讯中。谢谢！
- en: '* * *'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Update 2024-04-24
  id: totrans-split-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新于 2024-04-24
- en: I wrote this essay four years ago. Since then I've written [this piece exploring
    when inheritance is preferable to composition](https://buttondown.email/hillelwayne/archive/when-to-prefer-inheritance-to-composition/).
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 四年前我写了这篇文章。此后，我又写了[这篇探讨继承何时优于组合的文章](https://buttondown.email/hillelwayne/archive/when-to-prefer-inheritance-to-composition/)。
- en: '*If you''re reading this on the web, you can subscribe [here](/hillelwayne).
    Updates are once a week. My main website is [here](https://www.hillelwayne.com).*'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你在网页上阅读本文，可以在[这里](/hillelwayne)订阅。更新每周一次。我的主网站在[这里](https://www.hillelwayne.com)。*'
