- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:22:52'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:22:52
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Announcing git bisect-find - Kevin Cox
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 宣布 git bisect-find - Kevin Cox
- en: 来源：[https://kevincox.ca/2024/05/19/git-bisect-find/](https://kevincox.ca/2024/05/19/git-bisect-find/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://kevincox.ca/2024/05/19/git-bisect-find/](https://kevincox.ca/2024/05/19/git-bisect-find/)
- en: <main class="kevincox-content">
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main class="kevincox-content">
- en: Posted on 2024-04-19
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 发布于2024-04-19
- en: This is a small utility that I wrote to compliment [`git bisect`](https://git-scm.com/docs/git-bisect).
    `git bisect` is a fantastic tool. In the most basic usage you give it one “good”
    commit (a commit that doesn’t yet include some property) and at least one “bad”
    commit (one that does have it). `git bisect` will then guide you through the search,
    picking commits to test that cut the search space in half. This allows you to
    efficiently identify the first commit with a particular feature.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我为了补充[`git bisect`](https://git-scm.com/docs/git-bisect)而编写的一个小工具。`git bisect`是一个很棒的工具。在最基本的用法中，您提供一个“好”的提交（一个尚未包含某些属性的提交）和至少一个“坏”的提交（一个已经包含它的提交）。`git
    bisect`然后将引导您通过搜索，选择测试的提交，从而将搜索空间减半。这使您能够有效地识别具有特定功能的第一个提交。
- en: However one of the premises of `git bisect` is that you know a good commit.
    Often times you notice a bug but don’t yet know a good version. Was that broken
    in the last release? Or is it new? Maybe it was broken unnoticed in the past couple
    of releases? Sure, you could start checking out various revisions to see if the
    bug is there, but why do this manually?
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`git bisect`的一个前提是你知道一个良好的提交。通常情况下，你会注意到一个 bug，但还不知道一个良好的版本。它是在最近的发布中出现的问题吗？还是新问题？也许过去几个发布版本中曾经出现过问题而未被注意到？当然，您可以开始检查各种修订版本，看看是否存在
    bug，但为什么要手动做这些呢？
- en: 'This is where [`git bitsect-find`](https://gitlab.com/kevincox/git-bisect-find)
    comes in. It will take just a bad commit, and step back looking for the first
    good commit. Basic usage looks like this:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是[`git bitsect-find`](https://gitlab.com/kevincox/git-bisect-find)的用武之地。它只需要一个不良提交，然后开始查找第一个良好的提交。基本用法如下：
- en: 'First check out your bad commit:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先检查您的不良提交：
- en: Then start bisecting with `git bisect-find bad`.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`git bisect-find bad`开始进行二分搜索。
- en: You will be asked to start a regular `git bisect` run, type `y`.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被要求启动常规的`git bisect`运行，输入`y`。
- en: Then a new candidate commit will be checked out. If the candidate commit is
    bad run `git bisect-find bad` and a new candidate will be checked out. Repeat
    the test and mark process until a good commit is found.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将检出一个新的候选提交。如果候选提交是不良的，则运行`git bisect-find bad`，然后将检出一个新的候选提交。重复测试和标记过程，直到找到一个良好的提交。
- en: Once you have a good commit found you are done with `git bisect-find`. Just
    run `git bisect good` and continue with the regular bisection process.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到一个良好的提交，您就可以使用`git bisect-find`完成。只需运行`git bisect good`，然后继续常规的二分搜索过程。
- en: There are more complete docs [in the README](https://gitlab.com/kevincox/git-bisect-find/-/blob/master/README.md).
    There are also more features to add (like automatic bisection). However the basics
    have already been quite useful to me so I figured I would share.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 更完整的文档可以在[README](https://gitlab.com/kevincox/git-bisect-find/-/blob/master/README.md)中找到。还有更多功能可以添加（如自动二分搜索）。但基本功能已经对我非常有用，所以我想分享一下。
- en: There really isn’t anything too special about the way it works. It just jumps
    back twice as far each time (following first parents). All state is logged via
    regular `git bisect` so once you find a good commit all of your `git bisect-find
    bad` (and `git bisect-find skip`) commands are remembered as regular `git bisect
    bad` and `git bisect skip` would be.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作原理并没有太特别的地方。每次跳回两倍远（遵循第一父级）。所有状态均通过常规的`git bisect`进行记录，因此一旦找到一个良好的提交，您的所有`git
    bisect-find bad`（和`git bisect-find skip`）命令都会像常规的`git bisect bad`和`git bisect
    skip`一样被记住。
- en: I do wonder if jumping back by twice as much is optimal. Obviously jumping right
    to the first commit would reduce the number of `git bisect-find` steps. But would
    result in more `git bisect`. But `git bisect` is quite efficient. (Not to mention
    that the first commit is likely not particularly interesting.) At some point I
    should probably work out which growth pattern results in the shortest number of
    total steps. However I think the optimal number also depends on the distribution
    of the age of the target commit. But either way doubling works well enough for
    this tool to be very helpful for me.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实在想，如果跳回两倍会不会更优。显然，直接跳到第一个提交会减少`git bisect-find`步骤。但会导致更多的`git bisect`。不过`git
    bisect`效率相当高。（更不用说第一个提交可能并不特别有趣。）在某种程度上，我应该弄清楚哪种增长模式可以减少总步数。不过我认为最佳步数也取决于目标提交的年龄分布。但无论如何，对于这个工具来说，两倍的跳跃足够有效，对我非常有帮助。
- en: '* * *'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: </main>
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
