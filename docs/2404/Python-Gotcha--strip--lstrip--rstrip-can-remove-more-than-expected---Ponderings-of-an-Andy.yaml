- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:35:04'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Gotcha: strip, lstrip, rstrip can remove more than expected · Ponderings
    of an Andy'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://andrewwegner.com/python-gotcha-strip-functions-unexpected-behavior.html](https://andrewwegner.com/python-gotcha-strip-functions-unexpected-behavior.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a software engineer, you've cleaned your fair share of dirty strings. Removing
    leading or trailing spaces is probably one of the most common things done to user
    input.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, this is done with the [`.strip()`](https://docs.python.org/3.10/library/stdtypes.html#str.strip),
    [`.lstrip()`](https://docs.python.org/3.10/library/stdtypes.html#str.lstrip) or
    [`.rstrip()`](https://docs.python.org/3.10/library/stdtypes.html#str.rstrip) functions
    and generally looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That's pretty straightforward and nothing unexpected in going on.
  prefs: []
  type: TYPE_NORMAL
- en: Gotcha
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Gotcha is that each of these functions take a list of characters that can
    be removed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: What happened? Why wasn't the result just
  prefs: []
  type: TYPE_NORMAL
- en: Explaination
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Read line from the documentation again, carefully:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of **characters**
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Not a list of strings.
  prefs: []
  type: TYPE_NORMAL
- en: This is explicitly spelled out in the documentation, with an example, showing
    what the implications are. However, for a new developer, it's unexpected behavior.
    After all, these seem like intutive functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example with my does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Receives a list of characters to remove. In this case it is all letters in
    my last name, plus the space character: `wegner`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lower case all letters in the input string, resulting in `andrew wegner`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the right hand side of the string, begin removing characters that are in
    the input list. Stop when you encounter a character not in the list. In this case
    that means that `rengew wer` are removed (right to left) and then the `d` in `andrew`
    is encountered so that `rstrip` function stops.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return the remaining string of `and`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python has two functions that will correctly remove a **string** - [`.removesuffix()`](https://docs.python.org/3.10/library/stdtypes.html#str.removesuffix)
    and [`.removeprefix()`](https://docs.python.org/3.10/library/stdtypes.html#str.removeprefix)
    for right and left side removals.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: These two functions were introduced in Python 3.9 as part of [PEP-616](https://peps.python.org/pep-0616/).
    In the PEP, it explicitly calls out the confusion users have about the `*strip()`
    functions and how they behave. These two were introduced to allow the desired
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: One important note is that these two `remove*` functions will only remove *at
    most* one instance of the string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
