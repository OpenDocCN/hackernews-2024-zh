- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 12:58:34'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Text Manipulation in Linux: Awk Vs. Sed | Linux Journal'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.linuxjournal.com/content/text-manipulation-linux-awk-vs-sed](https://www.linuxjournal.com/content/text-manipulation-linux-awk-vs-sed)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Linux operating system is a powerhouse for developers, system administrators,
    and enthusiasts alike, offering unparalleled flexibility and control. Central
    to its prowess is the command line, a potent interface through which users can
    perform intricate operations with just a few keystrokes. Among the myriad of command-line
    tools available, `awk` and `sed` stand out for their text processing capabilities.
    These tools, though distinct in their functionalities, can be incredibly powerful
    when used independently or in conjunction. This article delves deep into both,
    unraveling their complexities, comparing their functionalities, and guiding users
    on when and how to use them effectively.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: 'Understanding Awk: The Text Processing Powerhouse'
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`awk` is more than just a command-line tool; it''s a full-fledged programming
    language designed for pattern scanning and processing. It shines in tasks that
    involve scanning files, extracting parts of the data, and performing actions on
    that data. The beauty of `awk` lies in its simplicity for basic tasks, yet it
    scales to accommodate complex programming logic for more advanced needs.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: '**The Structure of an Awk Command**'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: 'An `awk` command typically follows this structure: `awk ''pattern { action
    }'' input-file`. The `pattern` specifies when the `action` should be performed.
    If the `pattern` matches, the corresponding `action` is executed. This structure
    allows `awk` to sift through lines of text, searching for those that meet the
    criteria specified in the pattern, and then execute operations on those lines.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: '**Key Features of Awk**'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: '**Built-in Variables:** `awk` offers variables like `NR` (number of records),
    `NF` (number of fields in the current record), and `FS` (field separator), which
    are instrumental in text processing tasks.'
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Patterns and Actions:** Users can specify patterns to match and actions to
    execute when a match is found, making `awk` highly versatile.'
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Associative Arrays:** Unlike traditional arrays, associative arrays allow
    indexing using strings, facilitating complex data manipulation.'
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Demystifying Sed: The Stream Editor'
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While `awk` is celebrated for its processing capabilities, `sed` specializes
    in transforming text. `sed` is a stream editor, meaning it performs basic text
    transformations on an input stream (a file or input from a pipeline). It is renowned
    for its efficiency in editing files without opening them.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '**Sed''s Syntax**'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: The syntax of a `sed` command is `sed [options] 'command' file`. The `command`
    tells `sed` what operation to perform, such as substitution, deletion, or insertion,
    making `sed` an invaluable tool for quick edits and text transformations.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: '**Capabilities of Sed**'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: '**Stream-Oriented Nature:** `sed` works by reading input line by line, making
    changes as specified, and outputting the result. This makes it incredibly efficient,
    especially for large files.'
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向流的特性：** `sed`逐行读取输入，按指定的方式进行修改，并输出结果。这使得它在处理大文件时非常高效。'
- en: '**In-Place Editing:** With the `-i` option, `sed` can edit files in place,
    eliminating the need to output to a temporary file and then rename it.'
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原地编辑：** 使用`-i`选项，`sed`可以直接编辑文件，无需输出到临时文件再重命名。'
- en: 'Awk vs. Sed: A Comparative Look'
  id: totrans-split-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Awk与Sed：比较分析
- en: While both tools are designed for text processing, they serve different purposes.
    `awk` is better suited for tasks that involve data extraction and reporting, thanks
    to its built-in support for arithmetic operations and conditional logic. On the
    other hand, `sed` excels at simple text transformations like substitutions and
    deletions, thanks to its efficient, stream-oriented nature.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这两个工具都是用于文本处理的，但它们的用途不同。`awk`更适合涉及数据提取和报告的任务，因为它内置了对算术运算和条件逻辑的支持。另一方面，`sed`则擅长于简单的文本转换，比如替换和删除，得益于其高效的面向流的特性。
- en: '**Practical Examples**'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**实际示例**'
- en: '**Basic Text Processing with Awk**'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用Awk进行基本文本处理**'
- en: 'Suppose you want to print the first column of a text file:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要打印文本文件的第一列：
- en: '`awk ''{print $1}'' file.txt`'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`awk ''{print $1}'' file.txt`'
- en: This command illustrates `awk`'s simplicity for basic data extraction tasks.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令说明了`awk`在基本数据提取任务中的简易性。
- en: '**Simple Substitutions with Sed**'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用Sed进行简单替换**'
- en: 'To replace all instances of "text1" with "text2" in a file:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要在文件中替换所有的"text1"为"text2"：
- en: '`sed ''s/text1/text2/g'' file.txt`'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`sed ''s/text1/text2/g'' file.txt`'
- en: This command highlights `sed`'s efficiency in text substitution tasks.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令突显了`sed`在文本替换任务中的效率。
- en: '**Associative Arrays in Awk**'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**Awk中的关联数组**'
- en: '`awk`''s associative arrays can be used for sophisticated data manipulation,
    such as counting the occurrences of words in a text file.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`awk`的关联数组可用于复杂的数据操作，例如计算文本文件中单词的出现次数。'
- en: Multi-line Editing with Sed
  id: totrans-split-35
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 用Sed进行多行编辑
- en: '`sed` can be used for complex pattern matching and substitutions that span
    multiple lines, although this requires a deeper understanding of `sed`''s advanced
    features.'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`sed`可用于跨多行进行复杂的模式匹配和替换，尽管这需要对`sed`的高级特性有深入的理解。'
- en: When to Use Awk vs. Sed
  id: totrans-split-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 何时使用Awk与Sed
- en: '**Use `awk`** when dealing with tasks that require filtering, data extraction,
    or arithmetic operations.'
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用`awk`** 处理需要过滤、数据提取或算术操作的任务。'
- en: '**Opt for `sed`** for straightforward text transformations like substitutions,
    deletions, or insertions.'
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择`sed`** 用于简单的文本转换，如替换、删除或插入。'
- en: Additional Resources
  id: totrans-split-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 附加资源
- en: For those looking to dive deeper into `awk` and `sed`, numerous online tutorials,
    forums, and books are available. Resources such as the GNU Awk User's Guide and
    the Sed & Awk book are highly recommended for beginners and advanced users alike.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想深入了解`awk`和`sed`，有许多在线教程、论坛和书籍可供参考。强烈推荐初学者和高级用户使用资源，如GNU Awk用户指南和Sed & Awk书籍。
- en: Conclusion
  id: totrans-split-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 结论
- en: '`awk` and `sed` are indispensable tools in the Linux command-line toolbox,
    each with its strengths and ideal use cases. Whether you''re performing quick
    text substitutions with `sed` or extracting and processing data with `awk`, mastering
    these tools can significantly enhance your command-line proficiency. With practice
    and exploration, you''ll find that `awk` and `sed` can handle a wide range of
    text processing tasks, making your work on Linux more efficient and productive.'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`awk`和`sed`是Linux命令行工具箱中不可或缺的工具，各自具有其优势和理想的使用场景。无论是用`sed`进行快速文本替换，还是用`awk`提取和处理数据，精通这些工具都能显著提升您的命令行技能。通过实践和探索，您会发现`awk`和`sed`可以处理各种文本处理任务，使您在Linux上的工作更加高效和富有成效。'
