["```\nval a: A = ???\nval b = doSomething(a)\nval c = doSomething2(b)\nval d = doSomething3(c)\n```", "```\ndoSomething(a)\n  .flatMap(b => doSomething(b))\n  .flatMap(c => doSomething(c))\n```", "```\nfor {\n  b <- doSomething(a)\n  c <- doSomething(b)\n  d <- doSomething(c)\n} yield d\n```", "```\nprintln(\"OMG, it's an effect\")\n```", "```\nprintln(\"\\u001b[91m\") \nprintln(\"OMG, it's an effect\")\n```", "```\nEffect.println(\"OMG, it's an effect\").foregroundBrightRed\n```", "```\ndef cthulhuFhtagn(): Unit\n```", "```\ndef cthulhuFhtagn(): IO[Unit]\n```", "```\nIO.canceled *> cthulhuFhtagn()\n```", "```\ndef cancelOrRecover(effect: IO[Unit]): IO[Unit] =\n\n  IO.realTimeInstant\n    .map(time => starsAreRight(time))\n    .ifM(\n      true = effect.handleError(...),\n      false = IO.cancel *> effect \n    )\n\ncancelOrRecover(cthulhuFhtagn())\n```", "```\ndef cthulhuFhtagn[F[_]: WakeGreatOldOne](): F[Unit]\n```", "```\n type Console = Console.type\n\ntype Print[A] = Console ?=> A\nextension [A](print: Print[A]) {\n\n  def prefix(first: Print[Unit]): Print[A] =\n    Print {\n      first\n      print\n    }\n\n  def red: Print[A] =\n    Print {\n      Print.print(Console.RED)\n      val result = print\n      Print.print(Console.RESET)\n      result\n    }\n}\nobject Print {\n  def print(msg: Any)(using c: Console): Unit =\n    c.print(msg)\n\n  def println(msg: Any)(using c: Console): Unit =\n    c.println(msg)\n\n  def run[A](print: Print[A]): A = {\n    given c: Console = Console\n    print\n  }\n\n  inline def apply[A](inline body: Console ?=> A): Print[A] =\n    body\n}\n\n@main def go(): Unit = {\n\n  val message: Print[Unit] =\n    Print.println(\"Hello from direct-style land!\")\n\n  val red: Print[Unit] =\n    Print.println(\"Amazing!\").prefix(Print.print(\"> \").red)\n\n  Print.run(message)\n  Print.run(red)\n}\n```", "```\nval message: Print[Unit] =\n  Print.println(\"Hello from direct-style land!\")\n```", "```\nval message =\n  Print.println(\"Hello from direct-style land!\")\n```", "```\ndef red: Print[A] =\n  Print {\n    Print.print(Console.RED)\n    val result = print\n    Print.print(Console.RESET)\n    result\n  }\n```", "```\nimport scala.util.Random\n\ntype Sample[A] = Random ?=> A\nobject Sample {\n\n  def run[A](sample: Sample[A])(using random: Random = scala.util.Random): A = {\n    given r: Random = random\n    sample\n  }\n\n  def int(using r: Random): Int =\n    r.nextInt()\n\n  def double(using r: Random): Double =\n    r.nextDouble()\n\n  inline def apply[A](inline body: Random ?=> A): Sample[A] =\n    body\n}\n```", "```\nval printSample: (Console, Random) ?=> Unit =\n  Print {\n    val i = Sample { Sample.int }\n    Print.println(i)\n  }\n\nPrint.run(Sample.run(printSample))\n```", "```\n import scala.util.boundary\nimport scala.util.boundary.{break, Label}\n\nfinal class Error[-A](using label: Label[A]) {\n  def raise(error: A): Nothing =\n    break(error)\n}\n\ntype Raise[A] = Error[A] ?=> A\nobject Raise {\n  inline def apply[A](inline body: Error[A] ?=> A): Raise[A] =\n    body\n\n  def raise[A](error: A)(using e: Error[A]): Nothing =\n    e.raise(error)\n\n  def run[A](raise: Raise[A]): A = {\n    boundary[A] {\n      given error: Error[A] = new Error[A]\n      raise\n    }\n  }\n}\n\n@main def go(): Unit = {\n  val program: Raise[String] =\n    Raise {\n\n      List(1, 2, 3, 4)\n        .foreach(x => if x == 3 then Raise.raise(\"Found 3\"))\n      \"No 3 found\"\n    }\n\n  val result = Raise.run(program)\n  println(result)\n}\n```", "```\nval traverse: Raise[Option[List[Int]]] =\n  Raise {\n    Some(\n      List(1, 2, 3, 4).map(x => if x == 3 then Raise.raise(None) else x)\n    )\n  }\nprintln(Raise.run(traverse))\n```", "```\nval traverseCats: Option[List[Int]] =\n  List(1, 2, 3, 4).traverse(x => if x == 3 then None else Some(x))\n```", "```\nval capture: Raise[() => String] =\n  Raise { error ?=> () =>\n    if 3 < 2 then \"Nothing to see here\"\n    else Raise.raise(() => \"Hahahahaha!\")(using error)\n  }\n\nval closure = Raise.run(capture)\nprintln(closure())\n```"]