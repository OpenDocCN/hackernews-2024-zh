- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:03:21'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:03:21
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: ImperialViolet - Let's Kerberos
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ImperialViolet - Let's Kerberos
- en: 来源：[https://www.imperialviolet.org/2024/04/07/letskerberos.html](https://www.imperialviolet.org/2024/04/07/letskerberos.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.imperialviolet.org/2024/04/07/letskerberos.html](https://www.imperialviolet.org/2024/04/07/letskerberos.html)
- en: (I think this is worth pondering, but I don’t mean it *too* seriously—don’t
    panic.)
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: （我认为这值得思考，但不要太认真—不要惊慌。）
- en: Are the sizes of post-quantum signatures [getting you down](https://dadrian.io/blog/posts/pqc-signatures-2024/)?
    Are you despairing of deploying a post-quantum Web PKI? Don’t fret! Symmetric
    cryptography is post-quantum too!
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 是否量子后的签名大小 [让你沮丧](https://dadrian.io/blog/posts/pqc-signatures-2024/)？您是否对部署量子后Web
    PKI感到绝望？别担心！对称加密也是量子后的！
- en: 'When you connect to a site, also fetch a record from DNS that contains a handful
    of “CA” records. Each contains:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当您连接到一个站点时，还要从DNS获取一个包含一些“CA”记录的记录。每个记录包含：
- en: a UUID that identifies a CA
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于标识CA的UUID。
- en: E[CA-key](server-CA-key, AAD=server-hostname)
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: E[CA-key](server-CA-key, AAD=server-hostname)
- en: A key ID so that the CA can find “CA-key” from the previous field.
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密钥ID，以便CA可以从上述字段中找到“CA-key”。
- en: “CA-key” is a symmetric key known only to the CA, and “server-CA-key” is a symmetric
    key known to the server and the CA.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: “CA-key”是只有CA知道的对称密钥，“server-CA-key”是服务器和CA知道的对称密钥。
- en: 'The client finds three of these CA records where the UUID matches a CA that
    the client trusts. It then sends a message to each CA containing:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端找到三个这些UUID与客户端信任的CA匹配的CA记录。然后它向每个CA发送包含：
- en: E[CA-key’](client-CA-key) — i.e. a key that the client and CA share, encrypted
    to a key that only the CA knows. We’ll get to how the client has such a value
    later.
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: E[CA-key’](client-CA-key) — 即客户端和CA共享的密钥，加密给只有CA知道的密钥。我们稍后会解释客户端如何拥有这样的值。
- en: A key ID for CA-key’.
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA-key’的密钥ID。
- en: E[client-CA-key](client-server-key) — the client randomly generates a client–server
    key for each CA.
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: E[client-CA-key](client-server-key) — 客户端随机为每个CA生成客户端-服务器密钥。
- en: The CA record from the server’s DNS.
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自服务器DNS的CA记录。
- en: The hostname that the client is connecting to.
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端连接的主机名。
- en: The CA can decrypt “client-CA-key” and then it can decrypt “server-CA-key” (from
    the DNS information that the client sent) using an AAD that’s either the client’s
    specified hostname, or else that hostname with the first label replaced with `*`,
    for wildcard records.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: CA可以解密“client-CA-key”，然后可以使用AAD来解密“server-CA-key”（来自客户端发送的DNS信息），该AAD要么是客户端指定的主机名，要么是具有通配符记录的主机名用第一个标签替换为`*`。
- en: The CA replies with E[server-CA-key](client-server-key), i.e. the client’s chosen
    key, encrypted to the server. The client can then start a TLS connection with
    the server, send it the three encrypted client–server keys, and the client and
    server can authenticate a Kyber key-agreement using the three shared keys concatenated.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: CA 回复 E[server-CA-key](client-server-key)，即客户端选择的密钥，加密给服务器。然后客户端可以与服务器建立TLS连接，将三个加密的客户端-服务器密钥发送给服务器，并且客户端和服务器可以使用连接的三个共享密钥进行Kyber密钥协商认证。
- en: Both the client and server need symmetric keys established with each CA for
    this to work. To do this, they’ll need to establish a public-key authenticated
    connection to the CA. So these connections will need large post-quantum signatures,
    but that cost can be amortised over many connections between clients and servers.
    (And the servers will have to pass standard challenges in order to prove that
    they can legitimately speak for a given hostname.)
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端和服务器都需要与每个CA建立的对称密钥才能工作。为此，它们需要与CA建立公钥认证连接。因此，这些连接将需要大的量子后签名，但这种成本可以分摊到客户端和服务器之间的许多连接中。（并且服务器将不得不通过标准挑战来证明它们可以合法地代表特定的主机名。）
- en: 'Some points:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一些要点：
- en: The CAs get to see which servers clients are talking to, like OCSP servers used
    to. Technical and policy controls will be needed to prevent that information from
    being misused. E.g. CAs run audited code in at least SEV/TDX.
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA可以看到客户端正在与哪些服务器交流，就像OCSP服务器一样。将需要技术和政策控制以防止该信息被滥用。例如，CA在至少SEV/TDX中运行经过审计的代码。
- en: You need to compromise at least three CAs in order to achieve anything. While
    we have Certificate Transparency today, that’s a post-hoc auditing mechanism and
    a single CA compromise is still a problem in the current WebPKI.
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要至少三个CA才能取得成果。虽然我们今天有证书透明度，但这是一种事后审计机制，当前的WebPKI中单个CA的妥协仍然是一个问题。
- en: The CAs can be required to publish a log of server key IDs that they recognise
    for each hostname. They could choose not to log a record, but three of them need
    to be evil to compromise anything.
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CAs 可能需要发布一个针对每个主机名识别的服务器密钥 ID 日志。它们可以选择不记录记录，但是需要至少有三个恶意 CAs 才能威胁到任何事情。
- en: There’s additional latency from having to contact the CAs. However, one might
    be able to overlap that with doing the Kyber exchange with the server. Certainly
    clients could cache and reuse client-server keys for a while.
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联系 CAs 会增加额外的延迟。然而，可以将其与与服务器进行 Kyber 交换的过程重叠。客户端可以缓存并重复使用客户端-服务器密钥一段时间。
- en: CAs can generate new keys every day. Old keys can continue to work for a few
    days. Servers are renewing shared keys with the CAs daily. (ACME-like automation
    is very much assumed here.)
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CAs 可以每天生成新的密钥。旧的密钥可以继续工作几天。服务器每天都在与 CAs 更新共享密钥。（在这里非常假设类似 ACME 的自动化。）
- en: The public-keys that parties use to establish shared keys are very long term,
    however. Like roots are today.
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当事方用来建立共享密钥的公钥是非常长期的，就像今天的根密钥一样。
- en: 'Distrusting a CA in this model needn’t be a Whole Big Thing like it is today:
    Require sites to be set up with at least five trusted CAs so that any CA can be
    distrusted without impact. I.e. it’s like distrusting a Certificate Transparency
    log.'
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这种模型中，不信任一个 CA 不必像今天那样是一件大事：要求站点设置至少五个受信任的 CAs，这样任何一个 CA 都可以被不信任而没有影响。即，这就像不信任证书透明度日志一样。
- en: Revocation by CAs is easy and can be immediately effective.
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CAs 撤销操作简便且立即生效。
- en: CAs should be highly available, but the system can handle a CA being unavailable
    by using other ones. The high-availability part of CA processing is designed to
    be nearly stateless so should scale very well and be reasonably robust using anycast
    addresses.
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CAs 应该具有高可用性，但是系统可以通过使用其他 CAs 来处理一个 CA 不可用的情况。CA 处理的高可用部分设计为几乎无状态，因此应该可以非常好地扩展，并且使用任播地址应该相当稳健。
