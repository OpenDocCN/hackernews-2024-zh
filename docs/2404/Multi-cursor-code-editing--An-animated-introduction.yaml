- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:22:52'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:22:52
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Multi-cursor code editing: An animated introduction'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多光标代码编辑：一个动画介绍
- en: 来源：[https://alexharri.com/blog/multi-cursor-code-editing-animated-introduction](https://alexharri.com/blog/multi-cursor-code-editing-animated-introduction)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://alexharri.com/blog/multi-cursor-code-editing-animated-introduction](https://alexharri.com/blog/multi-cursor-code-editing-animated-introduction)
- en: <main class="css-fkkl8v">
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main class="css-fkkl8v">
- en: 'Multi-cursor code editing: An animated introduction'
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多光标代码编辑：一个动画介绍
- en: January 28, 2023
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2023年1月28日
- en: When editing text, especially structured text, the need occurs to make repeated
    changes in multiple locations. A common case is renaming a variable.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当编辑文本时，特别是结构化文本时，通常需要在多个位置进行重复更改。一个常见情况是重命名变量。
- en: Select and type, select and type.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 选择并键入，选择并键入。
- en: For a small block of code it's fine. A bit tedious, but fine. Banging this out
    doesn't take a lot of time.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个小的代码块来说，这没问题。有点乏味，但还好。这样敲出来不会花费太多时间。
- en: However, the number of keystrokes grows linearly. Increasing the number of references
    to a few dozens already makes the task quite taxing.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，按键次数会线性增长。增加几十个引用已经让任务相当繁重。
- en: We want the effort for repeated changes to grow in a non-linear fashion. We
    can do that using Command `D`.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望重复更改的工作量呈非线性增长。我们可以使用 Command `D` 做到这一点。
- en: 'Note: This post is focused on VS Code, but Command `D` can be used in other
    text editors such as Sublime Text. Other text editors will have analogous keyboard
    shortcuts.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：本文集中在 VS Code 上，但 Command `D` 可以用于其他文本编辑器，如 Sublime Text。其他文本编辑器将具有类似的键盘快捷键。
- en: Command `D` selects the next instance of whatever you have selected, which enables
    multi-cursor editing.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: Command `D` 选择下一个你已选择的实例，这样可以进行多光标编辑。
- en: 'Using Command `D` seems deceptively simple. Find a pattern to match, and then
    make the change:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Command `D` 看起来简单得令人难以置信。找到一个匹配的模式，然后进行更改：
- en: There's already a lot of value in using Command `D` for simple transformations,
    such as the above, but we're just scratching the surface. Combined with smart
    text navigation techniques, we can take Command `D` quite far.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Command `D` 进行简单转换（例如上述内容）已经非常有价值，但我们只是触及到表面。结合智能文本导航技术，我们可以把 Command `D`
    发挥得更加淋漓尽致。
- en: Navigating text
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航文本
- en: First off, the basics.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，基础知识。
- en: '**Arrow keys** to move the cursor'
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**箭头键** 用于移动光标'
- en: '**Shift** to select text while moving the cursor.'
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Shift** 在移动光标的同时选择文本。'
- en: Use Option to jump over words.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Option 跳过单词。
- en: Jumping over words allows us to navigate text containing words of different
    lengths.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过单词允许我们导航包含不同长度单词的文本。
- en: Use Command to jump to the beginning or end of a line.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Command 跳转到行的开头或结尾。
- en: Jumping to line boundaries allows us to navigate text that contains a variable
    number of words.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 跳转到行边界允许我们导航包含可变数量单词的文本。
- en: With text navigation locked down, let's do some cool stuff.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在锁定文本导航的同时，让我们做一些酷炫的事情。
- en: Finding the pattern
  id: totrans-split-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 寻找模式
- en: Take this example of converting a series of `if` statements to a switch statement.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以将一系列 `if` 语句转换为 switch 语句的示例为例。
- en: The `if` statements all have the exact same structure, so matching them is somewhat
    trivial. These sorts of patterns are the bread and butter of Command `D`, they're
    very common.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的 `if` 语句都具有完全相同的结构，因此匹配它们有些琐碎。这些类型的模式是 Command `D` 的基础，非常常见。
- en: But Command `D` is still very effective for non-uniform patterns. Those more
    complex patterns can come in the form of
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，对于非统一模式，Command `D` 仍然非常有效。这些更复杂的模式可以以
- en: a variable number of arguments,
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量数量的参数，
- en: a variable number of words in a string, or
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串中的变量数量的单词，或者
- en: different argument types.
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的参数类型。
- en: Let's take a look at an example.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。
- en: Non-uniform patterns
  id: totrans-split-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非统一模式
- en: Let's say that we're developing a library for evaluating math expressions.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在开发一个用于评估数学表达式的库。
- en: '[PRE0]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In making testing the library less verbose, we made a utility function that
    takes an expression, and its expected value.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使测试库变得不那么冗长，我们制作了一个实用函数，它接受一个表达式和它的期望值。
- en: '[PRE1]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We have some test code using it that looks like so:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一些使用它的测试代码看起来像这样：
- en: '[PRE2]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, we want to convert this test code into the following:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们想将此测试代码转换为以下内容：
- en: '[PRE3]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Since we have a lot of tests, doing this manually would be a lot of work. This
    is a prime case for using Command `D`, we just need to find a pattern to match.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们有很多测试，手动完成这些工作将会非常繁琐。这是使用 Command `D` 的一个典型案例，我们只需要找到一个匹配的模式即可。
- en: If we match `expectEqual` and move in from there, we run into the problem of
    the expressions being of different lengths.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们匹配到 `expectEqual` 并从那里开始，我们会遇到表达式长度不同的问题。
- en: Matching the end runs into the same problem. The values are of different lengths.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配到末尾时遇到同样的问题。这些值的长度是不同的。
- en: 'If we try to match the commas `,` between the expression and the value, we
    also match commas within the expressions and expected values:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试匹配表达式和值之间的逗号 `,`，我们也会匹配表达式和期望值中的逗号：
- en: The expression and expected value can be of any length, so matching the start
    or end is of no use.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式和期望值可以是任意长度，因此匹配开头或结尾是没有用的。
- en: However, we can observe that the expression is always a string. The expression
    always ends with double quote `"` immediately followed by a comma `,`. That's
    a pattern we can match!
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以观察到表达式总是一个字符串。表达式总是以双引号 `"` 紧接着逗号 `,` 结束。这是我们可以匹配的模式！
- en: Matching every instance
  id: totrans-split-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配每一个实例
- en: In the example above, we matched four tests. That's a pretty small number of
    tests, especially for a library that evaluates math expressions.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们匹配了四个测试。对于一个评估数学表达式的库来说，这是一个相当少量的测试。
- en: Pressing Command `D` three times is not a lot of work, but if the number of
    tests were increased to 1,000 we would need to press Command `D` 999 times. This
    goes against our goal of making repeated changes grow non-linearly.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 按三次 Command `D` 不算多的工作，但如果测试数量增加到 1,000，我们将需要按下 999 次 Command `D`。这与我们使重复更改呈非线性增长的目标相违背。
- en: This is a nice time to introduce Shift Command `L`, which is the keyboard shortcut
    for *Select All Matches*.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是介绍 Shift Command `L` 的好时机，这是 *选择所有匹配项* 的键盘快捷键。
- en: You have to be a bit more careful with Shift Command `L`, since it selects **every**
    match in a file. You may match something that you did not intend to, which can
    occur outside of the current viewport.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Shift Command `L`，您必须更加小心，因为它会选择文件中的**每个**匹配项。您可能会匹配到不打算匹配的内容，这种情况可能发生在当前视图之外。
- en: For this reason, I prefer Command `D` when working with a small number of matches.
    The matching feels more local, you visually see every match happen.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当处理少量匹配项时，我更喜欢使用 Command `D`。匹配感觉更加局部化，您可以直观地看到每个匹配的发生。
- en: Skipping an instance
  id: totrans-split-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跳过一个实例
- en: When selecting matches, you may want to skip an instance. To skip a match, press
    Command `K` followed by Command `D`.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择匹配项时，您可能想跳过某个实例。要跳过一个匹配项，请按下 Command `K`，然后再按 Command `D`。
- en: In order to skip a match, you first need to add the match to the selection.
    After you have added a match to your selection, press Command `K` and Command `D`
    to unselect it and select the next match.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要跳过匹配项，首先需要将匹配项添加到选择中。在将匹配项添加到选择后，按下 Command `K` 和 Command `D` 取消选择它并选择下一个匹配项。
- en: Pressing Command `K` and Command `D` resolves to a command called **Move Last
    Selection to Next Find Match**. It's quite a technical name, but basically means
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 Command `K` 和 Command `D` 解决了一个名为**将最后的选择移至下一个查找匹配项**的命令。这是一个非常技术化的名称，但基本上意味着
- en: remove the most recent match, and
  id: totrans-split-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除最近的匹配项，并
- en: select the next match.
  id: totrans-split-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择下一个匹配项。
- en: This is not very intuitive at first, but becomes second-nature given enough
    practice.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 起初这并不是很直观，但是经过足够的练习，它会变得很熟练。
- en: Matching line breaks
  id: totrans-split-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配换行符
- en: Matching every line can be useful when working with arbitrary data.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理任意数据时，匹配每一行可以是有用的。
- en: 'Take this text file:'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个文本文件：
- en: '[PRE4]'
  id: totrans-split-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s say that we want to convert the lines of this file into a JSON array
    of strings:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想将此文件的行转换为 JSON 数组：
- en: '[PRE5]'
  id: totrans-split-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There is no pattern across these lines, so matching each line seems impossible.
    However, Command `D` allows us to match newlines.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行之间没有模式，因此匹配每一行似乎是不可能的。但是，Command `D` 允许我们匹配换行符。
- en: Matching newlines is occasionally useful when
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配换行符在某些情况下是有用的，例如
- en: matching every line, or
  id: totrans-split-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匹配每一行，或者
- en: matching a pattern that only appears at the end of a line, or
  id: totrans-split-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匹配仅出现在行末的模式，或者
- en: matching a pattern that spans two or more lines.
  id: totrans-split-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匹配跨越两行或更多行的模式。
- en: 'For an example of matching a multi-line pattern, take this example of only
    matching the empty arrays:'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于匹配跨多行模式的示例，请看这个只匹配空数组的例子：
- en: Case transformations
  id: totrans-split-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大小写转换
- en: Translating between cases (such as changing snake-case to camelCase) comes up
    from time-to-time. I typically encounter this case when working across HTML, CSS
    and JavaScript.
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的情况下进行大小写转换（例如将蛇形命名转换为驼峰命名）偶尔会出现。我通常在处理 HTML、CSS 和 JavaScript 时遇到这种情况。
- en: VS Code has a handy `Transform to Uppercase` command that we can combine with
    Command `D` to make this happen.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 提供了一个方便的`转换为大写`命令，我们可以与命令`D`结合使用。
- en: There is not a direct keyboard shortcut for the `Transform to Uppercase` command.
    In VS Code, you can run it by opening the command prompt with Shift Command `P`
    and then typing the name of the command.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`转换为大写`命令没有直接的键盘快捷键。在 VS Code 中，你可以通过打开命令提示符（Shift Command `P`）然后输入命令名称来运行它。'
- en: 'Note: Unfortunately, you will not be able to use the `Transform to Uppercase`
    method in this editor. This post uses Monaco Editor, which does not have VS Code''s
    command prompt.'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：不幸的是，你无法在此编辑器中使用`转换为大写`方法。本文使用的是 Monaco Editor，它没有 VS Code 的命令提示符。
- en: That's a wrap!
  id: totrans-split-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 到此结束！
- en: There are many ways to do multi-cursor editing using VS Code, but I find Command `D`
    to be the simplest and most useful method.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 VS Code 进行多光标编辑有许多方法，但我发现使用命令`D`是最简单和最实用的方法。
- en: Take what you learned in this post and apply it in your own work! There is a
    learning curve, but if you get past it then I promise that Command `D` will prove
    itself to be a really useful and productive tool.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 将本文学到的内容应用到你自己的工作中！虽然有一定的学习曲线，但如果你能克服它，我保证命令`D`将证明是一个非常有用和高效的工具。
- en: Thanks for reading the post!
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读本文！
- en: </main>
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
