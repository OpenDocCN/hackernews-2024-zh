- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:22:52'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Multi-cursor code editing: An animated introduction'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://alexharri.com/blog/multi-cursor-code-editing-animated-introduction](https://alexharri.com/blog/multi-cursor-code-editing-animated-introduction)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <main class="css-fkkl8v">
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: 'Multi-cursor code editing: An animated introduction'
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: January 28, 2023
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: When editing text, especially structured text, the need occurs to make repeated
    changes in multiple locations. A common case is renaming a variable.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Select and type, select and type.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: For a small block of code it's fine. A bit tedious, but fine. Banging this out
    doesn't take a lot of time.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: However, the number of keystrokes grows linearly. Increasing the number of references
    to a few dozens already makes the task quite taxing.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: We want the effort for repeated changes to grow in a non-linear fashion. We
    can do that using Command `D`.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: This post is focused on VS Code, but Command `D` can be used in other
    text editors such as Sublime Text. Other text editors will have analogous keyboard
    shortcuts.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: Command `D` selects the next instance of whatever you have selected, which enables
    multi-cursor editing.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Command `D` seems deceptively simple. Find a pattern to match, and then
    make the change:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: There's already a lot of value in using Command `D` for simple transformations,
    such as the above, but we're just scratching the surface. Combined with smart
    text navigation techniques, we can take Command `D` quite far.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Navigating text
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First off, the basics.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: '**Arrow keys** to move the cursor'
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shift** to select text while moving the cursor.'
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Option to jump over words.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: Jumping over words allows us to navigate text containing words of different
    lengths.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: Use Command to jump to the beginning or end of a line.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: Jumping to line boundaries allows us to navigate text that contains a variable
    number of words.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: With text navigation locked down, let's do some cool stuff.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: Finding the pattern
  id: totrans-split-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Take this example of converting a series of `if` statements to a switch statement.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: The `if` statements all have the exact same structure, so matching them is somewhat
    trivial. These sorts of patterns are the bread and butter of Command `D`, they're
    very common.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: But Command `D` is still very effective for non-uniform patterns. Those more
    complex patterns can come in the form of
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: a variable number of arguments,
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a variable number of words in a string, or
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: different argument types.
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at an example.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: Non-uniform patterns
  id: totrans-split-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's say that we're developing a library for evaluating math expressions.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
- en: In making testing the library less verbose, we made a utility function that
    takes an expression, and its expected value.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
- en: 'We have some test code using it that looks like so:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
- en: 'However, we want to convert this test code into the following:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
- en: Since we have a lot of tests, doing this manually would be a lot of work. This
    is a prime case for using Command `D`, we just need to find a pattern to match.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: If we match `expectEqual` and move in from there, we run into the problem of
    the expressions being of different lengths.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: Matching the end runs into the same problem. The values are of different lengths.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: 'If we try to match the commas `,` between the expression and the value, we
    also match commas within the expressions and expected values:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: The expression and expected value can be of any length, so matching the start
    or end is of no use.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: However, we can observe that the expression is always a string. The expression
    always ends with double quote `"` immediately followed by a comma `,`. That's
    a pattern we can match!
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: Matching every instance
  id: totrans-split-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the example above, we matched four tests. That's a pretty small number of
    tests, especially for a library that evaluates math expressions.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: Pressing Command `D` three times is not a lot of work, but if the number of
    tests were increased to 1,000 we would need to press Command `D` 999 times. This
    goes against our goal of making repeated changes grow non-linearly.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: This is a nice time to introduce Shift Command `L`, which is the keyboard shortcut
    for *Select All Matches*.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: You have to be a bit more careful with Shift Command `L`, since it selects **every**
    match in a file. You may match something that you did not intend to, which can
    occur outside of the current viewport.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, I prefer Command `D` when working with a small number of matches.
    The matching feels more local, you visually see every match happen.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: Skipping an instance
  id: totrans-split-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When selecting matches, you may want to skip an instance. To skip a match, press
    Command `K` followed by Command `D`.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: In order to skip a match, you first need to add the match to the selection.
    After you have added a match to your selection, press Command `K` and Command `D`
    to unselect it and select the next match.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: Pressing Command `K` and Command `D` resolves to a command called **Move Last
    Selection to Next Find Match**. It's quite a technical name, but basically means
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: remove the most recent match, and
  id: totrans-split-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: select the next match.
  id: totrans-split-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is not very intuitive at first, but becomes second-nature given enough
    practice.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: Matching line breaks
  id: totrans-split-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Matching every line can be useful when working with arbitrary data.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Take this text file:'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-66
  prefs: []
  type: TYPE_PRE
- en: 'Let''s say that we want to convert the lines of this file into a JSON array
    of strings:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-68
  prefs: []
  type: TYPE_PRE
- en: There is no pattern across these lines, so matching each line seems impossible.
    However, Command `D` allows us to match newlines.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
- en: Matching newlines is occasionally useful when
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: matching every line, or
  id: totrans-split-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: matching a pattern that only appears at the end of a line, or
  id: totrans-split-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: matching a pattern that spans two or more lines.
  id: totrans-split-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For an example of matching a multi-line pattern, take this example of only
    matching the empty arrays:'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
- en: Case transformations
  id: totrans-split-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Translating between cases (such as changing snake-case to camelCase) comes up
    from time-to-time. I typically encounter this case when working across HTML, CSS
    and JavaScript.
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
- en: VS Code has a handy `Transform to Uppercase` command that we can combine with
    Command `D` to make this happen.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
- en: There is not a direct keyboard shortcut for the `Transform to Uppercase` command.
    In VS Code, you can run it by opening the command prompt with Shift Command `P`
    and then typing the name of the command.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: Unfortunately, you will not be able to use the `Transform to Uppercase`
    method in this editor. This post uses Monaco Editor, which does not have VS Code''s
    command prompt.'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
- en: That's a wrap!
  id: totrans-split-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many ways to do multi-cursor editing using VS Code, but I find Command `D`
    to be the simplest and most useful method.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
- en: Take what you learned in this post and apply it in your own work! There is a
    learning curve, but if you get past it then I promise that Command `D` will prove
    itself to be a really useful and productive tool.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading the post!
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
- en: </main>
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
