["```\n local limit_conn = require 'resty.limit.conn'\nlocal limits = {}\n\nlocal default_limit = 5;\n\nfunction limits.GetAllowedConcurrency(token)\n    -- Here you can connect your database or a local cache to get limits, \n    -- in case you can not get limits could be usefull defining a default\n    return default_limit;\nend\n\nfunction limits.LimitRequestsByToken(token, limitsDictionary)\n    local limit = limits.GetAllowedConcurrency(token)\n    local limitManager, err = limit_conn.new(limitsDictionary, limit, 0, 0.5)\n    if not limitManager then\n        ngx.log(ngx.ERR, \"failed to instantiate a resty.limit.conn object: \", err)\n        return ngx.exit(500)\n    end\n\n    local delay, err = limitManager:incoming(token, true)\n    if not delay then\n        if err == \"rejected\" then\n            return ngx.exit(429)\n        end\n        ngx.log(ngx.ERR, \"failed to limit req: \", err)\n        return ngx.exit(500)\n    end\n\n    if limitManager:is_committed() then\n        local ctx = ngx.ctx\n        ctx.limit_conn = limitManager\n        ctx.limit_conn_key = token\n        ctx.limit_conn_delay = delay\n    end\nend\n\nfunction limits.LeavingConnection()\n    local ctx = ngx.ctx\n    local limitManager = ctx.limit_conn\n    if limitManager then\n        local key = ctx.limit_conn_key\n        assert(key)\n        local conn, err = limitManager:leaving(key)\n        if not conn then\n            ngx.log(ngx.ERR, \"failed to record the connection leaving \", \"request: \", err)\n            return\n        end\n    end\nend\n\nreturn limits \n\n```", "```\n lua_shared_dict limit_conn_store 100m;\nserver {\n    listen       80;\n    server_name  localhost;\n\n    location / {\n        access_by_lua_block {\n          local limits = require \"limiter\"\n          local token = ngx.var.http_authorization\n          limits.LimitRequestsByToken(token, 'limit_conn_store')\n        }\n\n        log_by_lua_block {\n          local limits = require \"limiter\"\n          limits.LeavingConnection()\n        }\n        echo_sleep 5.0;\n        echo 'request completed';\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/local/openresty/nginx/html;\n    }\n} \n\n```", "```\n worker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    lua_package_path '/YOUR_LUA_SCRIPTS_FOLDER/?.lua;;';\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    include /etc/nginx/conf.d/*.conf;\n} \n\n```", "```\n package.path = \"/usr/local/balancer/lua/?.lua;\" .. package.path \n\n```", "```\n package.path = \"/usr/local/balancer/lua/?.lua;/usr/local/balancer/lua/?.lua;/usr/local/balancer/lua/?.lua;...\" \n\n```"]