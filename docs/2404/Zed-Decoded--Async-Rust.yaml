- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:03:09'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:03:09'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Zed Decoded: Async Rust'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Zed Decoded: 异步 Rust'
- en: 来源：[https://zed.dev/blog/zed-decoded-async-rust](https://zed.dev/blog/zed-decoded-async-rust)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://zed.dev/blog/zed-decoded-async-rust](https://zed.dev/blog/zed-decoded-async-rust)
- en: 'Zed Decoded: Async Rust'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Zed Decoded: 异步 Rust'
- en: Welcome to the first article in a new series called **Zed Decoded**. In Zed
    Decoded I'm going to take a close look at Zed — how it's built, which data structures
    it uses, which technologies and techniques, what features it has, which bugs we
    ran into. The best part? I won't do this alone, but get to interview and ask my
    colleagues here at Zed about everything I want to know.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到新系列文章的第一篇 **Zed Decoded**。在 Zed Decoded 中，我将仔细研究 Zed — 它是如何构建的，使用了哪些数据结构，哪些技术和技巧，具备了哪些功能，我们遇到了哪些错误。最棒的部分？我不会独自完成，而是有机会采访和询问在
    Zed 工作的同事关于我想了解的一切。
- en: '**Companion Video**: Async Rust'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**伴随视频**：异步 Rust'
- en: This post comes with a 1hr companion video, in which Thorsten and Antonio explore
    how Zed uses async Rust — in Zed. It's a loose conversation that focuses on the
    code and dives a bit deeper into some topics that didn't fit into the post.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本文配有一段 1 小时的视频，在其中 Thorsten 和 Antonio 探讨 Zed 如何在异步 Rust 中使用 — 在 Zed 中。这是一次自由的对话，侧重于代码并深入探讨了一些没有包含在文章中的主题。
- en: 'Watch the video here: [https://youtu.be/gkU4NGSe21I](https://youtu.be/gkU4NGSe21I)'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里观看视频：[https://youtu.be/gkU4NGSe21I](https://youtu.be/gkU4NGSe21I)
- en: 'The first topic that was on my list: async Rust and how it''s used in Zed.
    Over the past few months I''ve become quite fascinated with async Rust — Zed''s
    the first codebase I''ve worked in that uses it — so I decided to sit down and
    ask Antonio, one of Zed''s co-founders, about how we use async Rust in Zed.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我列表上的第一个主题：异步 Rust 及其在 Zed 中的应用。在过去的几个月里，我对异步 Rust 深感兴趣 — Zed 是我工作过的第一个使用它的代码库
    — 所以我决定坐下来询问 Zed 的联合创始人之一 Antonio，关于我们如何在 Zed 中使用异步 Rust。
- en: 'We won''t get into the details of async Rust itself (familiarity with that
    is to be expected if you want to understand the nitty-gritty of the code we''ll
    see), but instead focus on how Zed uses async Rust to build a high-performance,
    native application: what async code looks like on the application level, which
    runtime it uses, why it uses that runtime.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入讨论异步 Rust 本身的细节（如果你想理解我们将看到的代码的细微差别，熟悉它是理所当然的），而是专注于 Zed 如何使用异步 Rust 构建高性能本地应用程序：应用层面的异步代码看起来如何，它使用哪个运行时，为什么使用该运行时。
- en: Writing async Rust with GPUI
  id: totrans-split-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用 GPUI 编写异步 Rust
- en: 'Let''s jump right into the deep end. Here is a snippet of code that''s representative
    of async code in the Zed codebase:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直接进入深水区。这里是一个代码片段，代表了 Zed 代码库中的异步代码：
- en: '[PRE0]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It''s [a function from our `Editor`](https://github.com/zed-industries/zed/blob/98ddefc8884d0957ab766b3aea09265c8423684e/crates/editor/src/editor.rs#L3935-L3947).
    When it''s called, Zed shows the names of the owners of each cursor: your name
    or the names of the people you''re collaborating with. It''s called, for example,
    when the editor is re-focused, so you can quickly see who''s doing what and where.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自我们的 `Editor` 的一个函数。调用它时，Zed 会显示每个光标的所有者姓名：你的姓名或者你正在协作的人的姓名。例如，当编辑器重新聚焦时会调用它，这样你可以快速看到谁在做什么。
- en: 'What `show_cursor_names` does is the following:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`show_cursor_names` 的作用是：'
- en: Toggle on `Editor.show_cursor_names` and trigger a re-render of the editor.
    When `Editor.show_cursor_names` is true, cursor names will be rendered.
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开 `Editor.show_cursor_names` 并触发编辑器的重新渲染。当 `Editor.show_cursor_names` 为 true
    时，光标名称将被渲染。
- en: Spawn a task that sleeps for `CURSOR_VISIBLE_FOR`, turn the cursors off, and
    trigger another re-render.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 派生一个任务，它会休眠 `CURSOR_VISIBLE_FOR`，关闭光标，并触发另一个重新渲染。
- en: 'If you''ve ever written async Rust before, you can spot some familiar elements
    in the code: there''s a `.spawn`, there''s an `async move`, there''s an `await`.
    And if you''ve ever used the `async_task` crate before, this might remind you
    of code [like this](https://docs.rs/async-task/4.7.0/async_task/struct.Task.html#method.detach):'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前写过异步 Rust，你可以在代码中看到一些熟悉的元素：有一个 `.spawn`，有一个 `async move`，有一个 `await`。如果你以前使用过
    `async_task` crate，这可能会让你想起类似这样的代码 [像这样](https://docs.rs/async-task/4.7.0/async_task/struct.Task.html#method.detach)。
- en: '[PRE1]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: That's because Zed uses `async_task` for its `Task` type. But in this example
    there's an `Executor` — where is that in the Zed code? And what does `cx.background_executor()`
    do? Good questions, let's find answers.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 Zed 使用 `async_task` 来实现其 `Task` 类型。但在这个示例中有一个 `Executor` — 在 Zed 代码中它在哪里？`cx.background_executor()`
    是做什么的？好问题，让我们找到答案。
- en: macOS as our async runtime
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: macOS 作为我们的异步运行时
- en: One remarkable thing about async Rust is that it allows you to choose your own
    runtime. That's different from a lot of other languages (such as JavaScript) in
    which you can also write asynchronous code. Runtime isn't a term with very sharp
    definition, but for our purposes here, we can say that a runtime is the thing
    that runs your asynchronous code and provides you with utilities such as `.spawn`
    and something like an `Executor`.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 的异步编程中一个显著的特点是它允许你选择自己的运行时。这与许多其他语言（如 JavaScript）不同，这些语言也可以编写异步代码。运行时并没有非常明确的定义，但在这里，我们可以说运行时是运行您的异步代码并为您提供像
    `.spawn` 和类似 `Executor` 这样的实用程序的东西。
- en: The most popular of these runtimes is probably [tokio](https://github.com/tokio-rs/tokio).
    But there's also [smol](https://github.com/smol-rs/smol), [embassy](https://github.com/embassy-rs/embassy)
    and others. Choosing and switching runtimes comes with tradeoffs, they [are only
    interchangable to a degree](https://corrode.dev/blog/async/), but it is possible.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些运行时中最流行的可能是 [tokio](https://github.com/tokio-rs/tokio)。但还有 [smol](https://github.com/smol-rs/smol)，[embassy](https://github.com/embassy-rs/embassy)
    等等。选择和切换运行时伴随着权衡，它们 [在一定程度上是可以互换的](https://corrode.dev/blog/async/)，但是确实可能。
- en: In Zed for macOS, as it turns out, we don't use any one of these. We also don't
    use `async_task`'s `Executor`. But there has to be something to execute the asynchronous
    code, right? Otherwise I wouldn't be typing these lines in Zed.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 的 Zed 中，事实证明我们不使用其中任何一个。我们也不使用 `async_task` 的 `Executor`。但是必须有某些东西来执行异步代码，对吧？否则我就不能在
    Zed 中输入这些行了。
- en: 'So what then does `cx.spawn` do and what is the `cx.background_executor()`?
    Let''s take a look. Here are [three relevant methods from GPUI''s `AppContext`](https://github.com/zed-industries/zed/blob/dc98b3cfa19d6bd4eae813ce7dfaf9d9e13c232c/crates/gpui/src/app.rs#L818-L836):'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 那么 `cx.spawn` 是做什么的，`cx.background_executor()` 又是什么？让我们来看看。这里有 [GPUI 的 `AppContext`
    中三个相关方法](https://github.com/zed-industries/zed/blob/dc98b3cfa19d6bd4eae813ce7dfaf9d9e13c232c/crates/gpui/src/app.rs#L818-L836)：
- en: '[PRE2]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Alright, two executors, `foreground_executor` and `background_executor`, and
    both have `.spawn` methods. We already saw `background_executor`'s `.spawn` above
    in `show_cursor_names` and here, in `AppContext.spawn`, we see the `foreground_executor`
    counterpart.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，有两个执行器，`foreground_executor` 和 `background_executor`，它们都有 `.spawn` 方法。我们之前已经在
    `show_cursor_names` 中看到了 `background_executor` 的 `.spawn` 方法，在 `AppContext.spawn`
    中，我们看到了 `foreground_executor` 的对应部分。
- en: 'One level deeper, we can see what `foreground_executor.spawn` does:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 再深入一层，我们可以看到 `foreground_executor.spawn` 做了什么：
- en: '[PRE3]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There''s a lot going on here, a lot of syntax, but what happens can be boiled
    down to this: the `.spawn` method takes in a `future`, turns it into a [`Runnable`](https://docs.rs/async-task/latest/async_task/struct.Runnable.html)
    and a `Task`, and asks the `dispatcher` to run it on the main thread.'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里涉及很多内容，有很多语法，但发生的事情可以归结为：`.spawn` 方法接受一个 `future`，将其转换为 [`Runnable`](https://docs.rs/async-task/latest/async_task/struct.Runnable.html)
    和一个 `Task`，并请求 `dispatcher` 在主线程上运行它。
- en: The `dispatcher` here is a `PlatformDispatcher`. That's the GPUI equivalent
    of `async_task`'s `Executor` from above. It has `Platform` in its name because
    it has different implementations for macOS, Linux, and Windows. But in this post,
    we're only going to look at macOS, since that's our best-supported platform at
    the moment and Linux/Windows implementations are still work-in-progress.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的 `dispatcher` 是一个 `PlatformDispatcher`。这是 GPUI 中相当于 `async_task` 的 `Executor`。它的名称中带有
    `Platform` 是因为它在 macOS、Linux 和 Windows 上有不同的实现。但在本文中，我们只关注 macOS，因为这是目前我们支持最好的平台，而
    Linux/Windows 的实现仍在进行中。
- en: 'So what does `dispatch_on_main_thread` do? Does *this* now call an async runtime?
    No, no runtime [there either](https://github.com/zed-industries/zed/blob/dc98b3cfa19d6bd4eae813ce7dfaf9d9e13c232c/crates/gpui/src/platform/mac/dispatcher.rs#L66-L75):'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 那么 `dispatch_on_main_thread` 做什么？现在是调用异步运行时吗？不，也没有运行时 [在这里](https://github.com/zed-industries/zed/blob/dc98b3cfa19d6bd4eae813ce7dfaf9d9e13c232c/crates/gpui/src/platform/mac/dispatcher.rs#L66-L75)：
- en: '[PRE4]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`dispatch_async_f` is where the call leaves the Zed codebase, because `dispatch_async_f`
    is actually a compile-time generated binding to the [`dispatch_async_f`](https://developer.apple.com/documentation/dispatch/1452834-dispatch_async_f)
    function in [macOS'' Grand Central Dispatch''s (GCD)](https://developer.apple.com/documentation/DISPATCH).
    `dispatch_get_main_queue()`, too, is such a binding.'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`dispatch_async_f` 是调用离开 Zed 代码库的地方，因为 `dispatch_async_f` 实际上是 [`dispatch_async_f`](https://developer.apple.com/documentation/dispatch/1452834-dispatch_async_f)
    函数在 macOS 的 Grand Central Dispatch (GCD) 中的编译时生成的绑定。`dispatch_get_main_queue()`
    也是这样的一个绑定。'
- en: 'That''s right: Zed, as a macOS application, uses macOS'' GCD to schedule and
    execute work.'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 是的：Zed 作为 macOS 应用程序，使用 macOS 的 GCD 来调度和执行工作。
- en: What happens in the snippet above is that Zed turns the `Runnable` — think of
    it as a handle to a `Task` — into a raw pointer and passes it to `dispatch_async_f`
    along with a `trampoline`, which puts it on its `main_queue`.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的片段中，Zed将`Runnable` —— 将其视为`Task`的句柄 —— 转换为原始指针，并将其与`trampoline`一起传递给`dispatch_async_f`，将其放入其`main_queue`中。
- en: When GCD then decides it's time to run the next item on the `main_queue`, it
    pops it off the queue, and calls `trampoline`, which takes the raw pointer, turns
    it back into a `Runnable` and, to poll the `Future` behind its `Task`, calls `.run()`
    on it.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当 GCD 决定在`main_queue`上运行下一个项目时，它会将其从队列中弹出，并调用`trampoline`，该函数将原始指针转换回`Runnable`，并轮询其后的`Future`的`.run()`方法。
- en: 'And, as I learned to my big surprise: that''s it. That''s essentially all the
    code necessary to use GCD as a "runtime" for async Rust. Where other applications
    use tokio or smol, Zed uses thin wrappers around GCD and crates such as `async_task`.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 而正如我惊讶地发现的那样：就是这样。这基本上是使用 GCD 作为异步 Rust 的“运行时”的所有代码。其他应用程序使用 tokio 或 smol，而
    Zed 使用 GCD 和诸如`async_task`等库的薄包装。
- en: 'Wait, but what about the `BackgroundExecutor`? It''s very, very similar to
    the `ForegroundExecutor`, with the main difference being that the `BackgroundExecutor`
    calls this method on `PlatformDispatcher`:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，`BackgroundExecutor`怎么样？与`ForegroundExecutor`非常非常相似，主要区别在于`BackgroundExecutor`在`PlatformDispatcher`上调用此方法。
- en: '[PRE5]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The only difference between this `dispatch` method and `dispatch_async_f` from
    above is the queue. The `BackgroundExecutor` doesn't use the `main_queue`, but
    [a global queue](https://developer.apple.com/documentation/dispatch/1452927-dispatch_get_global_queue?language=objc).
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此`dispatch`方法与上述`dispatch_async_f`的唯一区别是队列。`BackgroundExecutor`不使用`main_queue`，而是使用[全局队列](https://developer.apple.com/documentation/dispatch/1452927-dispatch_get_global_queue?language=objc)。
- en: 'Like I did when I first read through this code, you now might wonder: why?'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我第一次阅读这段代码时所做的那样，现在你可能会想知道：为什么？
- en: Why use GCD? Why have a `ForegroundExecutor` and a `BackgroundExecutor`? What's
    so special about the `main_queue`?
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么使用 GCD？为什么有`ForegroundExecutor`和`BackgroundExecutor`？`main_queue`有何特殊之处？
- en: Never block the main thread
  id: totrans-split-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绝不能阻塞主线程。
- en: In a native UI application, the main thread is important. No, the main thread
    is *holy*. The main thread is where the rendering happens, where user input is
    handled, where the operating system communicates with the application. The main
    thread should never, ever block. On the main thread, the responsiveness of your
    app lives or dies.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本机 UI 应用程序中，主线程非常重要。不，主线程是*神圣*的。主线程是渲染发生的地方，处理用户输入的地方，操作系统与应用程序通信的地方。主线程绝对不能阻塞。在主线程上，您的应用程序的响应速度决定了其生死。
- en: That's true for [Cocoa](https://en.wikipedia.org/wiki/Cocoa_(API)) applications
    on macOS too. Rendering, receiving user input, communication with macOS, and other
    platform concerns have to happen on the main thread. And since Zed wants perfect
    cooperation with macOS to ensure high-performance and responsiveness, it does
    two things.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这对 macOS 上的[Cocoa](https://en.wikipedia.org/wiki/Cocoa_(API))应用程序同样适用。渲染、接收用户输入、与
    macOS 通信以及其他平台相关的问题都必须在主线程上进行。由于 Zed 希望与 macOS 完美合作，以确保高性能和响应速度，它做了两件事。
- en: First, it uses GCD to schedule its work — on and off the main thread — so that
    macOS can maintain high responsiveness and overall system efficiency.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它使用 GCD 调度其工作 —— 在主线程和其他线程上 —— 以便 macOS 可以保持高响应性和整体系统效率。
- en: Second, the importance of the main thread is baked into GPUI, the UI framework,
    by explicitly making the distinction between the `ForegroundExecutor` and the
    `BackgroundExecutor`, both of which we saw above.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，主线程的重要性被GPUI UI 框架内化，通过显式区分`ForegroundExecutor`和`BackgroundExecutor`来体现，正如我们之前所见。
- en: As a writer of application-level Zed code, you should always be mindful of what
    happens on the main thread and never put too much blocking work on it. If you
    were to put, say, a blocking `sleep(10ms)` on the main thread, rendering the UI
    now has to wait for that `sleep()` to finish, which means that rendering the next
    frame would take longer than 8ms — the maximum frame time available if you want
    to achieve [120 FPS](https://zed.dev/blog/120fps). You'd "drop a frame", as they
    say.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Zed 应用层代码的编写者，你应该始终注意主线程上发生的事情，并且永远不要将太多阻塞工作放在主线程上。例如，如果在主线程上放置一个阻塞的 `sleep(10ms)`，那么
    UI 渲染现在必须等待该 `sleep()` 完成，这意味着渲染下一帧将花费超过 8ms — 这是如果想实现 [120 FPS](https://zed.dev/blog/120fps)
    的最大帧时间。你会“丢帧”，正如他们所说的那样。
- en: 'Knowing that, let''s take a look at another small snippet of code. This time
    it''s from the built-in terminal in Zed, a function that [searches through the
    contents of the terminal buffer](https://github.com/zed-industries/zed/blob/dc98b3cfa19d6bd4eae813ce7dfaf9d9e13c232c/crates/terminal/src/terminal.rs#L1346-L1358):'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 了解了这些，让我们再来看另一个小代码片段。这次来自 Zed 内置终端的函数，它[搜索终端缓冲区内容的函数](https://github.com/zed-industries/zed/blob/dc98b3cfa19d6bd4eae813ce7dfaf9d9e13c232c/crates/terminal/src/terminal.rs#L1346-L1358)：
- en: '[PRE6]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The first line in `find_matches`, the `self.term.clone()`, happens on the main
    thread and is quick: `self.term` is an `Arc<Mutex<...>>`, so cloning only bumps
    the reference count on the `Arc`. The call to `.lock()` then only happens in the
    background, since `.lock()` might block. It''s unlikely that there will be contention
    for this lock in this particular code path, but if there was contention, it wouldn''t
    freeze the UI, only a single background thread. That''s the pattern: if it''s
    quick, you can do it on the main thread, but if it might take a while or even
    block, put it on a background thread by using `cx.background_executor()`.'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `find_matches` 的第一行，`self.term.clone()` 在主线程上执行并且很快：`self.term` 是一个 `Arc<Mutex<...>>`，所以克隆只是增加了
    `Arc` 的引用计数。然后调用 `.lock()` 是在后台进行的，因为 `.lock()` 可能会阻塞。在这个特定的代码路径中，不太可能发生对该锁的争用，但如果有争用，它不会冻结
    UI，只会影响单个后台线程。这是模式：如果很快，可以在主线程上执行，但如果可能需要一段时间甚至会阻塞，使用 `cx.background_executor()`
    将其放到后台线程执行。
- en: 'Here''s another example, the project-wide search in Zed (`⌘-shift-f`). It pushes
    as much heavy work as possible onto background threads to ensure Zed stays responsive
    while searching through tens of thousands of files in your project. Here''s a
    simplified and heavily-commented [excerpt from `Project.search_local`](https://github.com/zed-industries/zed/blob/dc98b3cfa19d6bd4eae813ce7dfaf9d9e13c232c/crates/project/src/project.rs#L6485-L6498)
    that shows the main part of the search:'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一个例子，在 Zed 中进行的项目范围搜索 (`⌘-shift-f`)。它尽可能将大量繁重的工作推到后台线程，以确保在搜索数万个项目文件时，Zed
    仍然保持响应性。这是简化且有大量注释的 [`Project.search_local` 的节选](https://github.com/zed-industries/zed/blob/dc98b3cfa19d6bd4eae813ce7dfaf9d9e13c232c/crates/project/src/project.rs#L6485-L6498)，展示了搜索的主要部分。
- en: '[PRE7]'
  id: totrans-split-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It''s a lot of code — sorry! — but there''s not a lot more going on than the
    concepts we already talked about. What''s noteworthy here and why I wanted to
    show it is the ping-pong between the main thread and background threads:'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 代码很多 — 抱歉！ — 但实际上并没有比我们已经讨论过的概念更多的东西。这里值得注意的是主线程和后台线程之间的 ping-pong：
- en: '**main thread**: kicks off the search and hands the `query` over to background
    thread'
  id: totrans-split-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主线程**：启动搜索并将 `query` 交给后台线程处理。'
- en: '**background thread**: finds files in project with >1 occurrences of `query`
    in them, sends results back over channel as they come in'
  id: totrans-split-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后台线程**：在项目中找到包含 `query` 多于 1 次出现的文件，并在收到结果时通过通道发送回来。'
- en: '**main thread**: waits until background thread has found `MAX+1` results, then
    drops channel, which causes background thread to exit'
  id: totrans-split-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主线程**：等待直到后台线程找到 `MAX+1` 个结果，然后关闭通道，导致后台线程退出。'
- en: '**main thread**: spawns multiple other main-thread tasks to open each file
    & create a snapshot.'
  id: totrans-split-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主线程**：启动多个其他主线程任务以打开每个文件并创建快照。'
- en: '**background threads**: search through buffer snapshot to find all results
    in a buffer, sends results back over channel'
  id: totrans-split-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后台线程**：搜索缓冲区快照以找到缓冲区中的所有结果，并通过通道发送结果回来。'
- en: '**main thread**: waits for background thread to find results in all buffers,
    then sends them back to the caller of the outer `search_local` method'
  id: totrans-split-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主线程**：等待后台线程在所有缓冲区中找到结果，然后将它们发送回调用外部 `search_local` 方法的调用者。'
- en: Even though this method can be optimized and the search made a lot faster (we
    haven't gotten around to that yet), it can already search thousands of files without
    blocking the main thread, while still using multiple CPU cores.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种方法可以进行优化，并且搜索速度可以大大提高（我们还没有开始做到这一点），它已经可以搜索成千上万个文件而不会阻塞主线程，同时仍然利用多个CPU核心。
- en: Async-Friendly Data Structures, Testing Executors, and More
  id: totrans-split-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步友好的数据结构、测试执行器等更多内容
- en: 'I''m pretty sure that the previous code excerpt raised a lot of questions that
    I haven''t answered yet: how exactly is it possible to send a buffer snapshot
    to a background thread? How efficient is it do that? What if I want to modify
    such a snapshot on another thread? How do you test all this?'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常确定之前的代码摘录引发了许多问题，我还没有回答：如何确切地将缓冲快照发送到后台线程？这样做的效率如何？如果我想在另一个线程修改这样的快照怎么办？如何测试所有这些？
- en: And I'm sorry to say that I couldn't fit all of the answers into this post.
    But there is a [companion video](https://youtu.be/gkU4NGSe21I) in which Antonio
    and I did dive into a lot of these areas and talked about async-friendly data
    structures, copy-on-write buffer snapshots, and other things. Antonio also gave
    [a fantastic talk about how we do property-testing of async Rust code](https://www.youtube.com/watch?v=ms8zKpS_dZE)
    in the Zed code base that I highly recommend. I also promise that in the future
    there will be a post about the data structures underlying the Zed editor.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 很抱歉我没有办法在这篇文章中涵盖所有的答案。但是有一个[配套视频](https://youtu.be/gkU4NGSe21I)，在这个视频中，安东尼奥和我深入探讨了许多这些领域，并讨论了异步友好的数据结构、写时复制的缓冲快照等内容。安东尼奥还给出了[一个关于我们如何对Zed代码库中的异步Rust代码进行属性测试的精彩演讲](https://www.youtube.com/watch?v=ms8zKpS_dZE)，强烈推荐。我也承诺将来会发表关于Zed编辑器底层数据结构的文章。
- en: Until next time!
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 期待下次再见！
- en: '* * *'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
