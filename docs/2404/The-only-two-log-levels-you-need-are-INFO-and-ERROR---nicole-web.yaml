- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:39:29'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:39:29'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The only two log levels you need are INFO and ERROR | nicole@web
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The only two log levels you need are INFO and ERROR | nicole@web
- en: 来源：[https://ntietz.com/blog/the-only-two-log-levels-you-need-are-info-and-error/](https://ntietz.com/blog/the-only-two-log-levels-you-need-are-info-and-error/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ntietz.com/blog/the-only-two-log-levels-you-need-are-info-and-error/](https://ntietz.com/blog/the-only-two-log-levels-you-need-are-info-and-error/)
- en: Logging is a critical tool for maintaining any web application, and yet we're
    getting it wrong.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录是维护任何 Web 应用程序的关键工具，然而我们却搞错了。
- en: With great logs, you can see what your application is doing. And without them?
    Things can be broken left and right without you ever finding out. Instead, you
    wonder why your customers don't come back, and shrug, and blame someone other
    than engineering.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用良好的日志记录，您可以了解应用程序的运行情况。如果没有日志记录呢？问题可能无处不在，而您却一无所知。相反，您会想知道为何您的客户不再回来，并耸耸肩，把责任推给工程之外的人。
- en: Unfortunately, it's common for us to log in ways that are unhelpful. Log levels
    are inconsistent, and logs are added to fix bugs then removed afterwards. But
    come on, you saw the title, this is about the log levels, mostly.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，我们常常以无益的方式记录日志。日志级别不一致，日志仅用于修复错误后便被移除。但请看标题，这篇文章主要讨论日志级别。
- en: The typical log levels
  id: totrans-split-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 典型的日志级别
- en: 'Most languages and logging libraries have a handful of log levels, at least
    five. But they vary! Here are three examples:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 'Most languages and logging libraries have a handful of log levels, at least
    five. But they vary! Here are three examples:'
- en: 'Rust''s `tracing` has [five log levels](https://docs.rs/tracing/latest/tracing/struct.Level.html):
    ERROR, WARN, INFO, DEBUG, and TRACE.'
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rust 的 `tracing` 拥有 [五个日志级别](https://docs.rs/tracing/latest/tracing/struct.Level.html)：ERROR、WARN、INFO、DEBUG
    和 TRACE。
- en: 'Python''s `logging` also has [five log levels](https://docs.python.org/3/howto/logging.html):
    CRITICAL, ERROR, WARNING, INFO, and DEBUG.'
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Python''s `logging` also has [five log levels](https://docs.python.org/3/howto/logging.html):
    CRITICAL, ERROR, WARNING, INFO, and DEBUG.'
- en: 'The infamous `log4j` has [six log levels](https://logging.apache.org/log4j/1.x/apidocs/org/apache/log4j/Level.html):
    FATAL, ERROR, WARN, INFO, DEBUG, and TRACE.'
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'The infamous `log4j` has [six log levels](https://logging.apache.org/log4j/1.x/apidocs/org/apache/log4j/Level.html):
    FATAL, ERROR, WARN, INFO, DEBUG, and TRACE.'
- en: 'Three examples and three wholly different sets of log levels. They all function
    in about the same way: you log certain information at different levels, based
    on your ideas of "severity" and "granularity", and then as you get toward the
    fatal/error end of the log levels you see only the most critical alerts, and toward
    the other end you see *everything* to help you debug your application.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 'Three examples and three wholly different sets of log levels. They all function
    in about the same way: you log certain information at different levels, based
    on your ideas of "severity" and "granularity", and then as you get toward the
    fatal/error end of the log levels you see only the most critical alerts, and toward
    the other end you see *everything* to help you debug your application.'
- en: There's really no typical set of log levels, nor common cross-language guidance
    on what to log at which level. There can't be that advice, because the levels
    vary so much!
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 确实没有典型的日志级别集，也没有跨语言的常见指导方针来告诉您在哪个级别记录什么。这种建议不可能存在，因为级别差异太大！
- en: What do we do with logs?
  id: totrans-split-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: What do we do with logs?
- en: When we add log statements, that's typically because we think that we will need
    those logs sometime in the future. We think they'll help us debug something, or
    help us audit that it happened, or discover a critical error.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: When we add log statements, that's typically because we think that we will need
    those logs sometime in the future. We think they'll help us debug something, or
    help us audit that it happened, or discover a critical error.
- en: 'Think about a time when you went to debug a deployed web application (not on
    your local machine) and used the logs. Typically, we''re doing a few things:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，当您尝试调试部署在网络上的 Web 应用程序（而不是在本地机器上），您是如何使用日志的。通常，我们会做以下几件事情：
- en: '**Discovering errors to fix.** We want to know when something has gone wrong,
    so we look for errors in the logs. Typically, you also want to get alerted if
    something needs to be fixed. And related, you *don''t* want to be alerted if something
    happens that doesn''t deserve attention. Alert fatigue is a serious problem.'
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '-   **发现需要修复的错误。** 我们希望知道什么时候出了问题，因此我们在日志中查找错误。通常情况下，您还希望在需要修复的时候收到警报。而且相关的是，*如果发生不值得关注的事情，您不希望收到警报*。警报疲劳是一个严重的问题。'
- en: '**Debugging a problem.** When something does go wrong, whether you were alerted
    from logs or not, you''ll turn to them to understand what''s up. The logs can
    tell you what''s happening that''s unexpected. They should include any stack traces,
    related errors, and conditions leading up to the problem.'
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试问题。** 当出现问题时，无论你是否从日志中收到警报，你都会查看日志来理解问题所在。日志可以告诉你发生了什么意外情况。它们应包括任何堆栈跟踪、相关错误以及导致问题发生的条件。'
- en: '**Understanding usage.** Sometimes logs are good for understanding how things
    are used! You can see generally which portions of the application are accessed
    or left untouched. They''re not a substitute for metrics or distributed tracing,
    though!'
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解用法。** 有时日志对于理解事物的使用方式很有帮助！你可以大致看到应用程序的哪些部分被访问或者被忽略。然而，它们并不能取代指标或分布式追踪！'
- en: '**Understanding how it works.** Logs can also help you understand how a system
    works! If you have just the code, you''ll see a lot of functions and request handlers
    and data and where do you start? With the logs, you can generally find an entry
    point where a request or session starts. From there, you can follow along with
    those logs through the life cycle of the session and follow the execution!'
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解它是如何工作的。** 日志还可以帮助你理解系统的运作方式！如果你只有代码，你会看到很多函数、请求处理程序、数据以及你从哪里开始？通过日志，你通常可以找到一个入口点，即请求或会话的开始。从那里，你可以沿着这些日志来跟踪会话的生命周期和执行过程！'
- en: 'These can be split into two categories: logs that wake me up, and logs that
    help me fix things.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以分为两类日志：把我从睡梦中惊醒的日志，以及帮助我解决问题的日志。
- en: For logs that wake me up, I want to know a few things. What's the problem *precisely*?
    When did it happen? And where can I find related logs?
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于把我从睡梦中惊醒的日志，我想知道一些事情。问题*具体*在哪里？它是什么时候发生的？我可以在哪里找到相关的日志？
- en: And then for logs that help me fix things, I really want to know everything.
    Well, when debugging, everything relevant, I don't need to go down a rabbit hole
    about CNCs right *then*. And you don't know what's going to be relevant until
    you know the answer to your question! You might have a guess, but it's a guess.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于帮助我解决问题的日志，我真的想知道一切。当调试时，所有相关的信息都很重要，我不需要立即陷入有关CNC的细节。而且在你找到问题答案之前，你不知道什么信息是相关的！你可能有猜测，但那只是猜测。
- en: The levels you need
  id: totrans-split-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你需要的级别
- en: 'In practice, I tend to find that you only really want two log levels: ERROR
    and INFO. That''s because we really do only care if something should alert us
    or not. For all the other uses of logs, we want to see *all* the context.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我倾向于认为你只需要两个日志级别：ERROR 和 INFO。这是因为我们真的只关心是否应该警报某事。对于日志的所有其他用途，我们希望看到*所有*的上下文。
- en: 'Let''s use WARNING as an example. Suppose you *should* have a WARNING log level,
    and some of those show up in your logs. What should you do when you see them?
    There are three choices:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以 WARNING 为例。假设你*应该*有一个 WARNING 日志级别，并且一些警告显示在你的日志中。当你看到它们时，你应该怎么办？有三种选择：
- en: If the information isn't useful at *all*, in any scenario, delete them entirely!
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这些信息在*任何*情况下都没有用处，可以完全删除它们！
- en: If it helps you make sense of other logs, potentially related to an error, then
    these are just info logs for debugging! They should be INFO level to reflect that.
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果它们帮助你理解其他日志，这些日志可能与错误相关，那么它们只是用于调试的信息日志！它们应该是 INFO 级别以反映这一点。
- en: And if it is an error you need to fix, well, it's not a warning now is it? Make
    that an ERROR log.
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是需要修复的错误，那么现在不是警告了吗？将其作为一个 ERROR 日志。
- en: And similar for things like DEBUG or TRACE. Usually you reach for those log
    levels when you want to see extremely verbose information, but... That's not practical
    to enable in production environments, because the volume of logs you produce would
    be way too high. And if you can't use it in production, you probably shouldn't
    use it elsewhere! That's what your local debugger is for.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像 DEBUG 或 TRACE 这样的日志级别也是类似的。通常你会在想要查看极其详细信息时使用这些日志级别，但是... 在生产环境中启用这些级别并不实际，因为生成的日志量将会非常高。如果在生产环境中无法使用它们，那么在其他地方也不应该使用！这就是你本地调试器的用处。
- en: Things like FATAL? Yep, that's *also* an ERROR log, because you do want to be
    alerted on it!
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 像 FATAL 这样的事物？是的，那也是一个 ERROR 日志，因为你确实希望在它出现时得到提醒！
- en: In every situation that I've run into in production, a single log line at a
    given level is never sufficient to debug something, only to know it happened.
    And even then, what actually happened? Shrug. Let's look at more log lines.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我实际生产环境遇到的每一种情况中，单个日志行的特定级别从未足以调试问题，只能表明发生了什么。即便如此，实际发生了什么？耸耸肩。让我们看更多的日志行。
- en: And so if you separate things out into different log levels, you end up looking
    at all of them together *anyway*, because to understand your warnings or errors
    you need all the info logs to see what was going on! You need that broader context
    to make sense of the overall situation. It's very slight semantic information,
    similar to syntax highlighting, but there are better ways to deliver that information.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果将事物分开到不同的日志级别中，最终您将仍然需要一起查看所有这些，因为要理解您的警告或错误，您需要所有信息日志来查看当时的情况！您需要更广泛的上下文来理解整体情况。这与语法高亮非常微妙地提供了语义信息，但有更好的方法来传达这些信息。
- en: Enhance your logs in other ways
  id: totrans-split-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过其他方式增强您的日志
- en: There are better ways to increase the usability of your logs than with strict
    adherence to different log levels. Structured logging is the practice of emitting
    logs in a machine-readable format. They're often created from maps, and then output
    in the logs as JSON or output for humans to see in a more readable format. Using
    structured logging, you can attach a lot more detail to each log in a way that's
    *useful*.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有比严格遵守不同日志级别更好的方式来增加日志的可用性。结构化日志是以机器可读格式发出日志的实践。它们通常是从映射创建的，然后以JSON格式输出到日志中，或者以更可读的格式输出供人类查看。使用结构化日志，您可以以*有用*的方式附加更多详细信息到每个日志中。
- en: 'Here are a few practices I like to use:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几种实践方法我喜欢使用：
- en: '**Attach a request/trace id.** This goes along with distributed tracing, and
    helps you filter effectively. Filtering down by log level won''t give you context,
    but correlating by request id will give you all the logs for a given event!'
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附加请求/跟踪ID**。这与分布式跟踪相伴而行，并帮助您有效地进行筛选。按日志级别筛选不会给您上下文，但通过请求ID进行关联将为您提供给定事件的所有日志！'
- en: '**Include timestamps.** All logs should include timestamps, but let''s just
    make *sure* we have them and at a useful precision. Having these in a structured
    format makes it easier to use them for calculations.'
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包括时间戳**。所有日志都应包含时间戳，但让我们确保我们拥有它们，并且具有有用的精度。以结构化格式拥有这些信息使得可以更轻松地用于计算。'
- en: '**Add related ids.** When an incoming request relates to a given user, document,
    or other data, adding that id into the logs is so helpful! Then when you''re debugging,
    you can see either all the logs for a particular object, or you can see if a particular
    set of data is related to the issue you''re working on. Without this, you are
    just guessing "Maybe this is just a BigCo issue," and with it you know whether
    other customers see it too.'
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加相关的ID**。当传入请求涉及特定用户、文档或其他数据时，将该ID添加到日志中非常有帮助！这样在调试时，您可以查看特定对象的所有日志，或者查看特定数据是否与您正在解决的问题相关。没有这些信息，你只是在猜测“也许这只是一个大公司的问题”，而有了它，你就知道其他客户是否也遇到了这个问题。'
- en: '**Note information for auditing.** If you log information for audit purposes,
    how will you find it? By including something in the logs that let you look for
    the needle in that haystack (and retain the needles when you toss out the haystack
    because paying the haystack storage company is akin to setting a pile of cash
    on fire—not to torture the metaphor). This can be as simple as a boolean for if
    it''s an audit log, or more complicated if you need that.'
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注意审计信息**。如果为了审计目的记录信息，您将如何找到它？通过在日志中包含一些内容，让您能够在这堆草堆中寻找针（并在丢弃草堆时保留针），因为支付草堆存储公司就像点燃一堆现金一样。这可以简单到一个用于审计日志的布尔值，或者如果需要的话可以更复杂一些。'
- en: '**Flags which were set.** Your application probably has feature flags. Which
    ones were enabled for this request? Let''s put them in the logs so we can tell.'
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置的标志**。您的应用程序可能具有特性标志。此请求启用了哪些标志？让我们将它们放入日志中，这样我们就可以知道。'
- en: '**Where the log came from.** Including the module or function name that a log
    came from can be really helpful for looking at surrounding context later. Too
    often, I''ve not had this, and had to grep for a specific string to find where
    that log was emitted. Hopefully only in one spot.'
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志来源**。包括产生日志的模块或函数名，对于稍后查看周围上下文非常有帮助。太多时候，我没有这个信息，不得不使用grep来查找特定字符串以找到发出该日志的位置。希望只有一个地方。'
- en: You do want to avoid adding too much information, because it can be an overwhelming
    amount! But if you add in this information tastefully, it's really helpful.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您确实希望避免添加过多信息，因为这可能会产生压倒性的信息量！但是，如果您适当地添加这些信息，它真的非常有帮助。
- en: And don't add logs in to fix one issue, then remove them later, okay? I've seen
    that done, and what that says is you did not have enough logs in the first place
    to understand what was going on! You might not have known exactly what you need,
    but after you do, then make sure the logs you would have needed for *this* issue
    are present. Ideally they're in a more general form, so that other related but
    different issues can also be debugged in the future.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 并且不要在修复一个问题时添加日志，然后稍后再移除它们，好吗？我见过这样的情况，这表明你一开始并没有足够的日志来理解发生了什么！你可能不清楚你确切需要什么，但是在明确需求后，确保你需要的日志*此*问题都存在。理想情况下，它们应该以更一般的形式存在，以便将来也能调试其他相关但不同的问题。
- en: '* * *'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Look.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 看。
- en: I know, log levels are useful. I'm not actually terribly dogmatic about this,
    because there *can* be situations where you want to tune the amount of detail
    (especially helpful for libraries to limit their log levels, so you don't get
    everything from them on INFO).
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道，日志级别很有用。我对此并不特别教条，因为*有时*可能存在你希望调整细节程度的情况（特别是对于限制日志级别的库来说，这样做可以避免在INFO级别获取所有内容）。
- en: 'I just don''t think it''s useful, most of the time, for the kind of work I
    do—web applications, mostly—to worry about anything beyond: wake me up, or don''t.
    If you do it differently, I''d love to hear about your experience.'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是认为，在我大部分时间从事的工作——主要是Web应用程序方面，超出唤醒我或不唤醒我的范畴，关注其他方面并不太有用。如果你有不同的做法，我很愿意听听你的经验。
