- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:24:40'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:24:40'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Finding the First 10-digit Prime in (a Billion) Digits of e
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在（十亿位）e中找到第一个10位质数
- en: 来源：[https://www.hanshq.net/eprime.html](https://www.hanshq.net/eprime.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.hanshq.net/eprime.html](https://www.hanshq.net/eprime.html)
- en: 'Back in 2004, Google ran a [recruitment campaign](https://googleblog.blogspot.com/2004/07/warning-we-brake-for-number-theory.html)
    where they posted the following billboard along the main freeway running through
    Silicon Valley, and later at [other locations](http://web.archive.org/web/20040912012847/http://www.boston.com/business/technology/articles/2004/09/09/comprehension_test/)
    in the country:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 2004年，谷歌运行了一个 [招聘活动](https://googleblog.blogspot.com/2004/07/warning-we-brake-for-number-theory.html)，在硅谷主要高速公路沿线的广告牌上发布了以下内容，后来也在
    [其他地点](http://web.archive.org/web/20040912012847/http://www.boston.com/business/technology/articles/2004/09/09/comprehension_test/)
    进行了发布：
- en: For those who managed to find the answer, a second problem awaited on the secret
    web site, and those who solved that were then encouraged to send in a job application.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些找到答案的人，秘密网站上还等待着第二个问题，解决了这个问题的人随后被鼓励提交工作申请。
- en: Effectively [nerd sniped](http://xkcd.com/356/), I started playing with this
    problem sometime last year, and it led down a path to some excellent programming
    exercises.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有效地 [怪胎抢夺](http://xkcd.com/356/)，我去年某个时候开始玩这个问题，它引导我进行了一些出色的编程练习。
- en: This post describes a few different ways of solving the problem; from a Perl
    one-liner, to using hand-rolled fixed-point arithmetic (including an implementation
    of [Improved division by invariant integers](https://gmplib.org/~tege/division-paper.pdf))
    or using binary splitting with GMP to compute a billion decimals of *e*.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本文描述了解决问题的几种不同方法；从Perl的一行代码，到使用手动编写的定点算术（包括[改进的不变整数除法](https://gmplib.org/~tege/division-paper.pdf)的实现），或者使用GMP进行二分拆分计算十亿位的*e*。
- en: The code is available in [eprime.c](files/eprime.c).
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可以在 [eprime.c](files/eprime.c) 中找到。
- en: Table of Contents
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录
- en: Finding the 10-digit Prime With Perl
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Perl找到10位质数
- en: 'Searching for ["first 10-digit prime in e"](https://www.google.com/search?q=first+10-digit+prime+in+e)
    quickly yields the answer: 7427466391 is the number we''re looking for. But let''s
    assume we found this problem early on, and that the solution had yet to be posted
    online. We can still benefit from the web by searching for ["many digits of e"](https://www.google.com/search?q=many+digits+of+e).
    The [first hit](https://apod.nasa.gov/htmltest/gifcity/e.2mil) provides two million
    digits in which we can search for the solution, for example with a Perl one-liner:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索 ["e中的第一个10位质数"](https://www.google.com/search?q=first+10-digit+prime+in+e)
    很快就能找到答案：7427466391 是我们寻找的数字。但假设我们早期找到这个问题，并且解决方案尚未在网上发布。我们仍然可以通过搜索 ["e的许多位数"](https://www.google.com/search?q=many+digits+of+e)
    在网上获益。[第一个链接](https://apod.nasa.gov/htmltest/gifcity/e.2mil) 提供了两百万位数字，我们可以在其中搜索解决方案，例如使用Perl的一行代码：
- en: '[PRE0]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '(To install the required Perl module on a Debian system: sudo apt-get install
    libmath-prime-util-perl)'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: （在Debian系统上安装所需的Perl模块：sudo apt-get install libmath-prime-util-perl）
- en: How does this work?
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何运作的？
- en: '[curl](https://curl.haxx.se/docs/manpage.html) downloads the e.2mil file, which
    is then piped to the next command. The -s (for silent) flag makes it not print
    any other output.'
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[curl](https://curl.haxx.se/docs/manpage.html) 下载 e.2mil 文件，然后将其传输到下一个命令。-s（静默）标志使其不打印任何其他输出。'
- en: '[tr](https://linux.die.net/man/1/tr) deletes (-d) all whitespace characters,
    making sure the digits of *e* from the file end up on one line with no spaces
    in between them.'
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[tr](https://linux.die.net/man/1/tr) 删除（-d）所有空白字符，确保从文件中取出的*e*的数字都在一行上，中间没有空格。'
- en: 'With Perl''s [-M](https://perldoc.perl.org/perlrun.html#*-M*%5b*-*%5d_module_)
    flag, we import two Perl module subroutines: [Math::Prime::Util::is_prime](http://search.cpan.org/~danaj/Math-Prime-Util-0.65/lib/Math/Prime/Util.pm#is_prime)
    and [List::Util::first](http://search.cpan.org/~pevans/Scalar-List-Utils-1.48/lib/List/Util.pm#first).'
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Perl的 [-M](https://perldoc.perl.org/perlrun.html#*-M*%5b*-*%5d_module_) 标志，我们导入了两个Perl模块的子例程：[Math::Prime::Util::is_prime](http://search.cpan.org/~danaj/Math-Prime-Util-0.65/lib/Math/Prime/Util.pm#is_prime)
    和 [List::Util::first](http://search.cpan.org/~pevans/Scalar-List-Utils-1.48/lib/List/Util.pm#first)。
- en: '[-n](https://perldoc.perl.org/perlrun.html#*-n*) makes Perl loop over the input,
    executing our code for each line, with the current line in [$_](https://perldoc.perl.org/perlvar.html#%24_).'
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[-n](https://perldoc.perl.org/perlrun.html#*-n*) 使Perl循环处理输入，对每行执行我们的代码，当前行存在
    [$_](https://perldoc.perl.org/perlvar.html#%24_) 中。'
- en: '[-l](https://perldoc.perl.org/perlrun.html#*-l*%5b_octnum_%5d) causes a newline
    to be added to each print statement.'
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[-l](https://perldoc.perl.org/perlrun.html#*-l*%5b_octnum_%5d)会在每个打印语句中添加一个换行符。'
- en: '[-e](https://perldoc.perl.org/perlrun.html#*-e*-_commandline_) specifies the
    code we want to run.'
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[-e](https://perldoc.perl.org/perlrun.html#*-e*-_commandline_)指定我们要运行的代码。'
- en: The /.../g [match operator](https://perldoc.perl.org/perlop.html#%2f_PATTERN_%2fmsixpodualngc)
    matches a regular expression against $_, which holds the current line. The [/g](https://perldoc.perl.org/perlop.html#Matching-in-list-context)
    (global matching) modifier makes it return a list of all the strings matched by
    capture groups.
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /.../g [匹配运算符](https://perldoc.perl.org/perlop.html#%2f_PATTERN_%2fmsixpodualngc)针对$_（当前行）匹配正则表达式。[/g](https://perldoc.perl.org/perlop.html#Matching-in-list-context)（全局匹配）修饰符使其返回所有由捕获组匹配的字符串列表。
- en: The capture group in our regex, ([1-9]\d{9}), matches a non-zero digit followed
    by nine digits, i.e. a ten-digit number (leading zeros wouldn't count).
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正则表达式中的捕获组([1-9]\d{9})匹配一个非零数字后面跟着九个数字，即一个十位数（前导零不计）。
- en: 'Perl starts looking for the next regex match where the previous match ends,
    and since we want to find all ten-digit numbers in the string, including those
    that overlap, we put the pattern in a [lookahead assertion](https://perldoc.perl.org/perlre.html#Lookaround-Assertions):
    (?=..). Our regex matches an empty string followed by a ten-digit number; the
    number isn''t considered part of the match, but it does get captured.'
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Perl开始寻找下一个正则表达式匹配，前一个匹配结束后，由于我们想在字符串中找到所有的十位数，包括那些重叠的数，我们将模式放在[前瞻断言](https://perldoc.perl.org/perlre.html#Lookaround-Assertions)中：(?=..)。我们的正则表达式匹配一个空字符串，后面跟着一个十位数；这个数字不被视为匹配的一部分，但确实被捕获。
- en: first returns the first element from the list of regex matches for which is_prime
    returns true.
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先返回正则表达式匹配列表中使is_prime返回true的第一个元素。
- en: Finally, that element is printed.
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，打印该元素。
- en: Computing *e* Ourselves
  id: totrans-split-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自己计算*e*
- en: Computing mathematical constants to a large number of digits has been a popular
    sport (in select circles) for a long time. Pi is [especially popular](https://en.wikipedia.org/wiki/Chronology_of_computation_of_%CF%80),
    with the current record at 22.5 trillion digits, but *e* too has been computed
    to extreme precision ([at least](http://www.numberworld.org/digits/E/) to 5 trillion
    digits).
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 将数学常数计算到极大的位数一直是一个受欢迎的活动（在特定圈子内）。Pi是[特别流行的](https://en.wikipedia.org/wiki/Chronology_of_computation_of_%CF%80)，目前的记录为22.5万亿位，但*e*也已经计算到极端的精度（至少[到5万亿位](http://www.numberworld.org/digits/E/)）。
- en: One way to approach the computation is from [Taylor's theorem](https://en.wikipedia.org/wiki/Taylor's_theorem),
    which for *e* gives us
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是从[泰勒定理](https://en.wikipedia.org/wiki/Taylor's_theorem)来计算*e*，对于*e*，我们得到
- en: where *R*, the remainder term, is bounded by
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 其中*R*，余项，受到限制
- en: The factorial in the denominator of the remainder term means the series converges
    quickly.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 分母中的阶乘意味着余项快速收敛。
- en: By choosing a large enough *n* and adding the terms of the series, we can approximate
    *e* to any precision we want. To get *k* correct decimals, we need an *n* such
    that
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择足够大的*n*并添加系列的项，我们可以按任意精度近似*e*。为了获得*k*位正确的小数，我们需要一个*n*，使得
- en: Taking the logarithm of both sides and using [Stirling's approximation for factorials](https://en.wikipedia.org/wiki/Stirling's_approximation)
    gives us
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 取对数两边并使用[斯特林逼近公式计算阶乘](https://en.wikipedia.org/wiki/Stirling's_approximation)得到
- en: 'Since the left-hand side is monotonic, we can use binary search to quickly
    find the smallest *n* that fulfills the inequality:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于左侧是单调的，我们可以使用二分搜索快速找到满足不等式的最小*n*：
- en: '[PRE1]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To compute 10,000 decimals, we need 3,249 terms.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算10,000位小数，我们需要3,249个项。
- en: For the computation of *e*, we cannot use the regular double data type, since
    it only has enough precision for a handful of decimals. Instead, we will use [GMP](https://gmplib.org/)'s
    arbitrary-precision [floating-point functions](https://gmplib.org/manual/Floating_002dpoint-Functions.html).
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于计算*e*，我们不能使用常规的双精度数据类型，因为它只能保留少数几位小数的精度。相反，我们将使用[GMP](https://gmplib.org/)的任意精度[浮点函数](https://gmplib.org/manual/Floating_002dpoint-Functions.html)。
- en: How many bits of precision do we need? Each decimal digit requires
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要多少位的精度？每个十进制数字都需要
- en: 'bits, so to compute 10,000 decimals we define:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 位，因此要计算10,000位小数我们定义：
- en: '[PRE2]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: (Note that we have to be careful not to lose any bits due to the truncating
    integer division.)
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: （注意，我们必须小心，不要因为截断的整数除法而丢失任何位。）
- en: 'We need two floating-point variables: one for the sum of the terms (which approaches
    *e*), and one for the current term. The current term starts at 1, and then we
    divide it by 1, 2, 3, etc. so that in each loop iteration, its value is *1/i!*'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要两个浮点变量：一个用于项的和（逼近 *e*），一个用于当前项。当前项从1开始，然后我们除以1, 2, 3等，以便在每次循环迭代中，其值为 *1/i!*
- en: '[PRE3]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We convert the final value to a string of decimal digits using [mpf_get_str](https://gmplib.org/manual/Converting-Floats.html#index-mpf_005fget_005fstr):'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 [mpf_get_str](https://gmplib.org/manual/Converting-Floats.html#index-mpf_005fget_005fstr)
    将最终值转换为十进制数字的字符串：
- en: '[PRE4]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The string we get back starts with "2718..", i.e. there is an implicit decimal
    point after the first character.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获取的字符串以 "2718.." 开头，即第一个字符后有一个隐含的小数点。
- en: 'Finally, we iterate over the string, checking for 10-digit primes with [mpz_probab_prime_p](https://gmplib.org/manual/Number-Theoretic-Functions.html#index-Prime-testing-functions):'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们遍历字符串，使用 [mpz_probab_prime_p](https://gmplib.org/manual/Number-Theoretic-Functions.html#index-Prime-testing-functions)
    检查10位素数：
- en: '[PRE5]'
  id: totrans-split-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To install GMP, build and run the program on Debian:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Debian上安装GMP，请构建并运行程序：
- en: '[PRE6]'
  id: totrans-split-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'On Mac, to install GMP from [MacPorts](https://www.macports.org/), build and
    run the program:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上，要从 [MacPorts](https://www.macports.org/) 安装GMP，请构建并运行程序：
- en: '[PRE7]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To print the digits, pass along -DPRINT_E:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印数字，请传递 -DPRINT_E：
- en: '[PRE8]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The result can be compared against for example [this page](http://www-history.mcs.st-andrews.ac.uk/HistTopics/e_10000.html).
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将结果与例如 [此页面](http://www-history.mcs.st-andrews.ac.uk/HistTopics/e_10000.html)
    进行比较。
- en: (Note that mpf_get_str has rounded the last decimal up to 9, and so has that
    page. If you print more decimals, you will see that the 10,000th decimal is actually
    8, followed by 5674..)
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: （请注意，mpf_get_str已将最后一个小数四舍五入到9，该页面也是如此。如果打印更多小数，您将看到第10000个小数实际上是8，然后是5674..）
- en: As it turns out, the 10-digit prime occurs early in *e*, starting at the 99th
    decimal (in the second row above), so there is no need to compute all 10,000 decimals.
    But more decimals is more fun!
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，10位素数出现在 *e* 的早期，从第99个小数（在上面的第二行）开始，因此无需计算全部10000位小数。但更多的小数更有趣！
- en: Computing *e* Ourselves Without GMP
  id: totrans-split-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自行计算 *e* 而不使用 GMP
- en: It seems amazing that just by repeatedly dividing and adding some numbers together,
    we end up with this sophisticated mathematical constant.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 只需反复分割和添加一些数字，我们就能得到这个复杂的数学常数，看起来很不可思议。
- en: GMP did all the work in the code above. Perhaps if we implemented all of it
    ourselves, it would be even more satisfying? This seems like a worthwhile programming
    exercise.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，GMP完成了所有工作。也许如果我们自己实现所有这些，会更加令人满意？这似乎是一个值得的编程练习。
- en: Fixed-Point Representation
  id: totrans-split-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 固定点表示
- en: 'Remember how numbers are represented in our regular decimal system. For example:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 记住我们常规十进制系统中数字的表示方式。例如：
- en: 'As long as we remember the position of the decimal point, we could simply store
    the number as an array of digits:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 只要记住小数点的位置，我们可以简单地将数字存储为数字数组：
- en: '[PRE9]'
  id: totrans-split-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is called fixed-point representation because the implicit decimal point
    occurs in a fixed position of the number (as opposed to floating-point, where
    it can change).
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这称为固定点表示，因为隐含的小数点位于数字的固定位置（与浮点表示不同，其小数点位置可以变化）。
- en: Since the instructions in modern computers perform arithmetic on 64-bit values,
    it's much more efficient to store numbers as arrays of 64-bit values rather than
    decimals.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于现代计算机指令在64位值上执行算术运算，将数字存储为64位值数组而不是小数更有效率。
- en: 'As we know that the integer part of *e* is 2, we only concern ourselves with
    computing and storing the fractional part. We will represent it as an array of
    *n* 64-bit words:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道 *e* 的整数部分是2，我们只关心计算和存储其分数部分。我们将其表示为 *n* 个64位字的数组：
- en: Fixed-Point Addition
  id: totrans-split-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 固定点加法
- en: 'To compute *e*, we only need to perform two operations: addition and division
    (what we did with mpf_add and mpf_div_ui in the GMP version).'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算 *e*，我们只需执行两种操作：加法和除法（类似于我们在GMP版本中使用mpf_add和mpf_div_ui所做的操作）。
- en: 'Addition is straight-forward; we add the numbers place by place, starting at
    the least significant end and carrying the one as necessary (this is Algorithm
    A in The Art of Computer Programming, Section 4.3.1):'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 加法很简单；我们按位加数，从最不显著位开始，并在必要时进行进位（这是《计算机程序设计艺术》第4.3.1节中的算法A）：
- en: '[PRE10]'
  id: totrans-split-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Fixed-Point Division
  id: totrans-split-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 固定点除法
- en: Performing the division is trickier. Luckily, we only need to divide our n-word
    term number by a single word. That means the algorithm is straight-forward, essentially
    how we do [short division](https://en.wikipedia.org/wiki/Short_division) in school.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 执行除法更加棘手。幸运的是，我们只需要将我们的n字项数除以一个单字。这意味着算法非常直接，基本上就是我们在学校里做[短除法](https://en.wikipedia.org/wiki/Short_division)的方式。
- en: However, the algorithm relies on being able to divide a two-word divisor by
    a one-word dividend (dividing 128 bits by 64 bits in our case), "two-by-one division".
    Some CPUs have an instruction for that; for example, Intel x86's DIV does exactly
    what we need as long as the result fits in a single word (which it always will
    in our case). But it is not possible to express that division in standard C, and
    many CPUs don't have an instruction for it.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，该算法依赖于能够将一个双字除数除以一个单字被除数（在我们的情况下是将128位除以64位），“双除一”操作。一些CPU有这样的指令；例如，Intel
    x86 的 DIV 指令正好满足我们的需求，只要结果能够适应单字（在我们的情况下总是可以的）。但是在标准C中无法表达这种除法，而且很多CPU也没有这样的指令。
- en: Instead, we will perform two-by-one division using a clever technique that relies
    on multiplying the divisor with the approximate reciprocal of the dividend. Not
    only does this solve the division problem for us, it solves it efficiently because
    we can reuse the reciprocal when dividing by the same value multiple times. Using
    X86's DIV instruction would be much slower since it can take up to 100 cycles.
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们将使用一个巧妙的技术进行双对一除法，该技术依赖于将除数乘以被除数的近似倒数。这不仅解决了我们的除法问题，而且因为我们可以在多次除以相同值时重复使用倒数，所以它的效率也高。使用X86的DIV指令会慢得多，因为它可能需要多达100个周期。
- en: The algorithm is described in Möller and Granlund "[Improved division by invariant
    integers](https://gmplib.org/~tege/division-paper.pdf)" (IEEE Trans. Comput. 2011).
    The paper is an improved version of Granlund and Montgomery "[Division by Invariant
    Integers using Multiplication"](https://gmplib.org/~tege/divcnst-pldi94.pdf) (PLDI'94)
    which is also the subject of Chapter 10 in [Hacker's Delight](http://www.hackersdelight.org/).
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法在 Möller 和 Granlund 的论文"[Improved division by invariant integers](https://gmplib.org/~tege/division-paper.pdf)"（IEEE
    Trans. Comput. 2011）中有描述。该论文是 Granlund 和 Montgomery 的"[Division by Invariant Integers
    using Multiplication](https://gmplib.org/~tege/divcnst-pldi94.pdf)"（PLDI'94）的改进版本，也是[Hacker's
    Delight](http://www.hackersdelight.org/)第10章的主题。
- en: The approximate reciprocal is defined as
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 近似倒数定义为
- en: which when *d* is "normalised", meaning that its highest bit is set, fits in
    a 64-bit word. Basically it's *1/d* shifted up 128 bits, with some adjustments
    to make it fit in a 64-bit word.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当 *d* 被“标准化”时，意味着它的最高位被设置，适合于64位字。基本上它是将 *1/d* 向上移动了128位，做了一些调整使其适应64位字。
- en: 'The algorithms in the paper rely on performing 64-bit by 64-bit multiplications,
    the results of which can be up to 128 bits. Standard C only provides the lower
    64 bits of such multiplications, which the paper refers to as umullo:'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 论文中的算法依赖于执行64位乘以64位的乘法，其结果可以达到128位。标准C只提供这种乘法的低64位，论文中称为umullo：
- en: '[PRE11]'
  id: totrans-split-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Most CPUs do provide the full result of the multiplication. With GCC or Clang
    we can use the non-standard __uint128_t type to implement umulhi (the high 64-bits
    of the result) and umul (both the high and low 64-bits). With Microsoft Visual
    C++ we can use intrinsics, and when none of those options are available, we can
    compute the result by hand using four 32-bit multiplications:'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数CPU确实提供了乘法的完整结果。使用GCC或Clang，我们可以使用非标准的__uint128_t类型来实现umulhi（结果的高64位）和umul（高位和低位的64位）。使用Microsoft
    Visual C++，我们可以使用内部函数，在没有这些选项可用时，我们可以通过手动计算使用四个32位乘法来得到结果：
- en: '[PRE12]'
  id: totrans-split-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With these functions in place, we can proceed to implement reciprocal_word,
    which computes *v* using carefully implemented (and hard to follow in the paper)
    [Newton iteration](https://en.wikipedia.org/wiki/Newton's_method).
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些函数，我们可以继续实现reciprocal_word，这个函数使用了精心实现的（在论文中难以理解的）[牛顿迭代法](https://en.wikipedia.org/wiki/Newton's_method)来计算*v*。
- en: '[PRE13]'
  id: totrans-split-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If we do have access to the X86 DIV instruction, it can be used to compute the
    approximate reciprocal directly. We use this in the assert above to check our
    work.
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有X86 DIV指令的访问权限，可以直接用它来计算近似倒数。我们在上面的断言中使用它来检查我们的工作是否正确。
- en: Using the reciprocal, 2-by-1 division is implemented as below, using two multiplications
    and some adjustments.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用倒数，2对1除法的实现如下，使用了两次乘法和一些调整。
- en: '[PRE14]'
  id: totrans-split-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: And with that in place, we can finally implement our n-by-1 division.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这一步，我们最终可以实现我们的n对1除法。
- en: To normalize the dividend, it is convenient to have a function for getting the
    number of leading zeros in a word. Many CPUs have an instruction for that (X86
    has BSR), and otherwise we can do it ourselves.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了标准化被除数，有一个函数可以得到字中前导零的数量是很方便的。许多CPU有这种指令（X86有BSR），否则我们可以自己做。
- en: '[PRE15]'
  id: totrans-split-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Since we shift the dividend to normalize it, we must also shift the divisor
    the same amount to get the correct result. We can do this in-place while performing
    the division (this "short division" algorithm is Exercise 16 in The Art of Computer
    Programming, Section 4.3.1):'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将被除数移位以使其标准化，我们必须同时移动除数相同的量以获得正确的结果。我们可以在执行除法时原地执行此操作（这种“短除法”算法是《计算机程序设计艺术》第4.3.1节中的练习16）：
- en: '[PRE16]'
  id: totrans-split-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Computing *e* With Our Fixed-Point Routines
  id: totrans-split-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用我们的固定点例程计算*e*
- en: 'Now we can finally proceed to computing *e*. Note that since we''re only computing
    the fraction, we skip the first terms (which add up to 2), and start with the
    third one. To initialize efrac and term to 0.5, we need to figure out what that
    is in the base we''re using:'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们终于可以继续计算*e*了。请注意，由于我们只计算分数部分，我们跳过了前几项（它们加起来是2），并从第三项开始。为了将 efrac 和 term
    初始化为 0.5，在我们使用的基数中，我们需要弄清楚那是什么：
- en: '[PRE17]'
  id: totrans-split-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Decimal Conversion
  id: totrans-split-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 十进制转换
- en: The code above leaves us with an array of carefully computed 64-bit words that
    represent the fractional part of *e*. How do we turn that into a decimal string?
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码给出了一个精心计算的64位字数组，它表示*e*的小数部分。我们如何将其转换为一个十进制字符串？
- en: 'We have:'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有：
- en: If we multiply it by 10, the most significant digit, 7, gets moved to the integer
    position (in our case there is no integer position, so the 7 arrives as an overflow
    of the multiplication). We can repeat the process to extract one decimal at the
    time.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们乘以10，最高有效位7被移动到整数位置（在我们的例子中没有整数位置，所以7作为乘法溢出到达）。我们可以重复这个过程一次提取一个小数。
- en: Instead of multiplying by 10 to get one decimal, we can multiply by 100 to get
    two, or any power of 10 to extract multiple decimals at the time. The largest
    power of 10 that fits in a 64-bit word is 10^19, so we will use that to extract
    19 decimals at a time.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过乘以10来获得一个小数，也可以乘以100来获得两个小数，或者任何幂的10来一次性提取多个小数。64位字中适合的最大的10的幂是10^19，所以我们将使用它来一次性提取19个小数。
- en: '(The time complexity of this is quadratic: *O(n)* multiplications are performed
    *O(n)* times. GMP implements faster [algorithms](https://gmplib.org/manual/Binary-to-Radix.html#Binary-to-Radix)
    for binary to decimal conversion.)'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: （这个时间复杂度是二次的：*O(n)*次乘法执行了*O(n)*次。GMP实现了更快的[算法](https://gmplib.org/manual/Binary-to-Radix.html#Binary-to-Radix)用于二进制到十进制的转换。）
- en: '[PRE18]'
  id: totrans-split-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Back in eprime_manual:'
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 回到eprime_manual：
- en: '[PRE19]'
  id: totrans-split-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Primality Testing
  id: totrans-split-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 素性测试
- en: To check whether a number is prime, we will implement Algorithm P from The Art
    of Computer Programming, Section 4.5.4, also known as the [Miller-Rabin primality
    test](https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test).
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查一个数是否为素数，我们将实现《计算机程序设计艺术》第4.5.4节中的算法P，也称为[Miller-Rabin素性测试](https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test)。
- en: This is a probabilistic test, which means it cannot tell us that a number is
    prime with absolute certainty, but it's good enough for our purposes, and it's
    fast.
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个概率测试，这意味着它不能绝对确定一个数是素数，但对我们的目的来说已经足够了，而且速度很快。
- en: The algorithm relies on modular exponentiation, which we can implement with
    [repeated squaring](https://en.wikipedia.org/wiki/Exponentiation_by_squaring)
    (also known as binary exponentiation). What makes it a little difficult is that
    we're dealing with 64-bit numbers, so we need to be able to compute 128-bit products
    and divide those by a 64-bit dividend. Luckily, we implemented exactly the necessary
    tools with umul and div2by1 above.
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法依赖于模指数运算，我们可以通过[重复平方法](https://en.wikipedia.org/wiki/Exponentiation_by_squaring)（也称为二进制指数运算）来实现。稍微困难的是我们处理64位数字，所以我们需要能够计算128位乘积，并将其除以64位被除数。幸运的是，我们以上正好实现了必要的工具，使用umul和div2by1。
- en: '[PRE20]'
  id: totrans-split-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Back in eprime_manual:'
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: 回到eprime_manual：
- en: '[PRE21]'
  id: totrans-split-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: A Million Decimals
  id: totrans-split-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一百万位小数
- en: 'We can use our program to compute a million decimals:'
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用我们的程序计算一百万位小数：
- en: '[PRE22]'
  id: totrans-split-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: On my laptop, the "manual" version takes about 2 minutes. If I use X86's DIV
    instruction instead of multiplying by the reciprocal, it takes 4 minutes. The
    GMP version takes just over 1 minute; it uses fancier and more carefully implemented
    algorithms.
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的笔记本电脑上，“手动”版本大约需要2分钟。如果我使用X86的DIV指令而不是乘以倒数，需要4分钟。GMP版本仅需超过1分钟；它使用更高级别和更谨慎实施的算法。
- en: Computing *e* Using Binary Splitting
  id: totrans-split-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用二分法拆分计算*e*
- en: While the algorithms above suffice for computing a million decimals, computing
    a billion decimals calls for a faster approach. The programs used for calculating
    *e*, *pi*, and other constants to trillions of decimals normally use a technique
    called *binary splitting*. My implementation is based on [the description](http://numbers.computation.free.fr/Constants/Algorithms/splitting.html)
    ([PostScript version](http://numbers.computation.free.fr/Constants/Algorithms/splitting.ps))
    by Xavier Gourdon and Pascal Sebah.
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然上面的算法足以计算一百万位小数，但计算十亿位小数需要更快的方法。用于计算 *e*、*pi* 和其他常数到万亿位小数的程序通常使用一种称为“二分法”的技术。我的实现基于[Xavier
    Gourdon 和 Pascal Sebah 的描述](http://numbers.computation.free.fr/Constants/Algorithms/splitting.html)（[PostScript
    版本](http://numbers.computation.free.fr/Constants/Algorithms/splitting.ps)）。
- en: Consider the series below.
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑下面的级数。
- en: When *a = 0* and *b = n*, it is equivalent to the Taylor series for *e* except
    that it's missing the first term, *1/0!*
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当 *a = 0* 且 *b = n* 时，这相当于 *e* 的泰勒级数，只是缺少第一项 *1/0!*。
- en: 'To compute the fraction resulting from adding the terms together, we need to
    rewrite each term to use the common denominator, *Q(a,b)*:'
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算加起来的项得到的分数，我们需要将每一项重新写成使用公共分母 *Q(a,b)* 的形式：
- en: 'To compute *Q(a,b)*, we can use binary splitting. Instead of iteratively multiplying
    with *a+1*, *a+2*, and so on, we can use a recursive approach, splitting the computation
    into two halves at each step and combining the results (binary splitting is really
    just another name for [divide and conquer](https://en.wikipedia.org/wiki/Divide_and_conquer_algorithm)):'
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算 *Q(a,b)*，我们可以使用二分法。不是迭代地乘以 *a+1*、*a+2* 等，而是使用递归方法，在每一步将计算拆分为两半并组合结果（二分法实际上就是[分治法](https://en.wikipedia.org/wiki/Divide_and_conquer_algorithm)的另一个名称）：
- en: When *Q(a,b)* is small, this isn't any faster than the iterative computation,
    because binary splitting performs the same number of operations. However, when
    the numbers are larger, the time required for each operation grows (often super-linearly)
    with the size of the numbers involved, and then we benefit from the binary splitting
    method reducing the size of the sub-problems.
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当 *Q(a,b)* 较小时，这并不比迭代计算更快，因为二分法执行的操作数量相同。然而，当数字变大时，每次操作所需的时间（通常是超线性增长）随着所涉及数字的大小而增加，此时我们从二分法中受益，它通过减小子问题的规模来提高效率。
- en: (Besides reducing the size of the sub-problems, binary splitting is also a nice
    way to parallelize the computation by computing the sub-problems on separate threads.)
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
  zh: （除了减小子问题的规模外，二分法还是一种将计算并行化的好方法，通过在不同线程上计算子问题来实现。）
- en: 'Computing the numerator of the series, *P(a,b)* is a little trickier. To rewrite
    each term on the common denominator, we need to multiply them with the factors
    missing from their denominators. For example, for the first term, we need to multibly
    by *a+2*, *a+3*, and so on all the way to *b*. For the second term, we start with
    *a+3*, and so on:'
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
  zh: 计算级数的分子 *P(a,b)* 稍微复杂一些。为了将每一项重新写成公共分母的形式，我们需要将它们乘以其分母所缺失的因子。例如，对于第一项，我们需要乘以
    *a+2*、*a+3*，一直到 *b*。对于第二项，我们从 *a+3* 开始，依此类推：
- en: 'If we split *P(a,b)* into *P(a,m)* and *P(m,b)*, how can we combine them? Look
    at what we get:'
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将 *P(a,b)* 分成 *P(a,m)* 和 *P(m,b)*，如何将它们组合起来？看看我们得到了什么：
- en: '*P(m,b)* matches the last terms of *P(a,b)*, so that seems fine.'
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*P(m,b)* 匹配 *P(a,b)* 的最后一项，所以看起来没问题。'
- en: '*P(a,m)* looks like the first terms of *P(a,b)* except that the numerators
    are wrong; we need them to be *b!*. To fix this, we can multiply them by *b!/m!*,
    which we also know as *Q(m,b)*. So, we end up with:'
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*P(a,m)* 看起来像 *P(a,b)* 的前面几项，只是分子不对；我们需要它们是 *b!*。为了修正这一点，我们可以将它们乘以 *b!/m!*，也就是我们称之为
    *Q(m,b)* 的东西。因此，最终我们得到：'
- en: 'In order for the computation to be fast, it''s necessary to use a multiplication
    algorithm with good time complexity (in particular, the naive schoolbook algorithm
    with *O(mn)* time won''t do). GMP implements [fancy multiplication algorithms](https://gmplib.org/manual/Multiplication-Algorithms.html),
    so we will rely on that for performance:'
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使计算快速，需要使用时间复杂度好的乘法算法（特别是，简单的竖式乘法算法，时间复杂度为 *O(mn)*，是不够的）。GMP 实现了[高级乘法算法](https://gmplib.org/manual/Multiplication-Algorithms.html)，因此我们会依赖它来提升性能：
- en: '[PRE23]'
  id: totrans-split-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: A Billion Decimals
  id: totrans-split-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 十亿位小数
- en: 'Using this version to compute a million decimals is significantly faster than
    what we saw [above](#million):'
  id: totrans-split-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个版本计算一百万位小数比我们在[上文](#million)看到的要快得多：
- en: '[PRE24]'
  id: totrans-split-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'How about a billion decimals? On my laptop, it takes about 20 minutes:'
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
  zh: 十亿位小数怎么样？在我的笔记本上，大约需要 20 分钟：
- en: '[PRE25]'
  id: totrans-split-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Further Reading
  id: totrans-split-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
