- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:34:11'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:34:11
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Patching requests for fun and (concurrent) profit
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修补请求以获取乐趣和（并发）利润
- en: 来源：[https://blog.borrego.dev/entries/patching-requests-for-fun-and-concurrent-profit.html](https://blog.borrego.dev/entries/patching-requests-for-fun-and-concurrent-profit.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.borrego.dev/entries/patching-requests-for-fun-and-concurrent-profit.html](https://blog.borrego.dev/entries/patching-requests-for-fun-and-concurrent-profit.html)
- en: Patching requests for fun and (concurrent) profit
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修补请求以获取乐趣和（并发）利润
- en: 24 apr. 2024
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年4月24日
- en: Because life is too short to spam calls to `SSL_CTX_load_verify_locations()`.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因为生命太短暂，无法频繁调用`SSL_CTX_load_verify_locations()`。
- en: What's the issue?
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题在哪里？
- en: Let's consider the following script. It runs a bunch of concurrent requests
    against a URL using the [requests](https://requests.readthedocs.io/en/latest/)
    library, both with certificate verification enabled and disabled, and outputs
    the time it takes to do it in both cases.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下脚本。它使用[requests](https://requests.readthedocs.io/en/latest/)库针对一个URL运行一堆并发请求，分别启用和禁用证书验证，并输出每种情况下所需的时间。
- en: '[PRE0]'
  id: totrans-split-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What's the time difference between the two? It turns out it is highly dependent
    on your local configuration. On my local machine, with a relatively modern config
    (Python 3.12 + OpenSSL 3.0.2), the times are `~1.2s` for `verify=True` and `~0.5s`
    for `verify=False`.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 两者之间的时间差异是多少？结果非常依赖于您的本地配置。在我的本地机器上，使用相对现代的配置（Python 3.12 + OpenSSL 3.0.2），`verify=True`时花费约`~1.2s`，而`verify=False`时花费约`~0.5s`。
- en: It's a >100% difference, but we initially blamed it on cert verification not
    being trivial and taking some time. However, we observed even larger differences
    (>500%) in some of our environments, and decided to find out what was going on.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这有超过100%的差异，但最初我们将其归咎于证书验证不是微不足道的，而且需要一些时间。然而，我们在一些环境中观察到了更大的差异（超过500%），决定找出问题所在。
- en: What's going on?
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发生了什么？
- en: Our main use case for requests is running lots of requests concurrently, and
    we spent some time bisecting this oddity to see if there was room for a performance
    optimization.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主要请求用例是并发运行大量请求，并且我们花了一些时间对这种奇怪现象进行二分，看是否有性能优化的空间。
- en: 'The issue is a bit more clear after profiling the concurrent executions. When
    verifying certs, these are the top 3 function calls by total time spent in them
    among all threads:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在验证证书后，通过对并发执行进行分析，问题变得更加清晰。这些是所有线程中花费时间最长的前三个函数调用：
- en: '[PRE1]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Conversely, this is how the top 3 looks like without cert verification:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，这是没有证书验证时前三名的情况：
- en: '[PRE2]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the first case, a full 0.68 seconds are spent in the `load_verify_locations()`
    function of the `ssl` module, which configures a `SSLContext` object to use a
    set of root CA certificates for validation. This is done via a C FFI call to OpenSSL's
    `SSL_CTX_load_verify_locations()` which [is known](https://github.com/python/cpython/issues/95031)
    to be [quite slow](https://github.com/openssl/openssl/issues/16871). This happens
    once per request (hence the `30` on the left).
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，每个请求都会在`ssl`模块的`load_verify_locations()`函数中花费整整0.68秒，该函数配置一个`SSLContext`对象以使用一组根CA证书进行验证。这通过C
    FFI调用到OpenSSL的`SSL_CTX_load_verify_locations()`来完成，已知是[相当慢的](https://github.com/openssl/openssl/issues/16871)。这每个请求只需一次（因此左边的`30`）。
- en: Taken at face value, 0.68 seconds isn't that big of a deal, but please note
    that this is **longer than the network wait for the requests themselves**. In
    scenarios with a higher concurrency, we have also observed some global blocking
    going on, either because each FFI call locks up the GIL or because of some thread
    safety mechanisms in OpenSSL itself. In either case, the performance hit gets
    worse and worse as you scale the number of concurrent requests up. We also think
    that this is more or less pronounced depending on internal changes between OpenSSL's
    versions, hence the variability between environments.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地看，0.68秒并不算什么大问题，但请注意，这比请求本身的网络等待时间**更长**。在高并发场景中，我们还观察到一些全局阻塞，这可能是因为每个FFI调用锁定了GIL，或者是OpenSSL本身的一些线程安全机制。无论哪种情况，随着并发请求数量的增加，性能损失都会变得越来越严重。我们也认为，这在不同OpenSSL版本之间的内部更改之间可能会更或少显著，因此在不同环境中的可变性。
- en: When cert validation isn't needed, these calls are skipped which speeds up concurrent
    performance dramatically.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当不需要证书验证时，这些调用会被跳过，这极大地提升了并发性能。
- en: A possible fix
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个可能的修复方法
- en: 'It isn''t possible to skip loading root CA certificates entirely, but it isn''t
    necessary to do it on every request. At the time of writing this, a call to `load_verify_locations()`
    happens when:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 完全跳过加载根CA证书是不可能的，但也没有必要在每个请求中都这样做。在撰写本文时，每次调用`load_verify_locations()`时发生的情况如下：
- en: A new `urllib3.connectionpool.HTTPSConnectionPool` is created, or
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个新的`urllib3.connectionpool.HTTPSConnectionPool`，或者
- en: On each connection, by urllib3's `ssl_wrap_socket()`, when the connection's
    `ca_certs` or `ca_cert_dir` attributes are set (see [the relevant code](https://github.com/urllib3/urllib3/blob/9929d3c4e03b71ba485148a8390cd9411981f40f/src/urllib3/util/ssl_.py#L438)).
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每个连接中，通过urllib3的`ssl_wrap_socket()`，当连接的`ca_certs`或`ca_cert_dir`属性被设置时（参见[相关代码](https://github.com/urllib3/urllib3/blob/9929d3c4e03b71ba485148a8390cd9411981f40f/src/urllib3/util/ssl_.py#L438)）。
- en: Recently, Requests added an internal `_get_connection()` function that caches
    connection pools, and so, for most cases, the first case doesn't need to be addressed
    anymore, since most HTTPS requests will share the same cached `HTTPSConnectionPool`
    instead of creating one per request.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，Requests添加了一个内部的`_get_connection()`函数，用于缓存连接池，因此在大多数情况下，不再需要处理第一种情况，因为大多数HTTPS请求将共享相同的缓存`HTTPSConnectionPool`，而不是每个请求创建一个。
- en: 'The second one is addressed in [the submitted PR](https://github.com/psf/requests/pull/6667).
    It creates a default `SSLContext` with the default CA certificates already loaded,
    and patches the function that hooks up each connection with a secure context to
    reuse the default one:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种情况在[提交的PR](https://github.com/psf/requests/pull/6667)中已解决。它创建了一个默认的`SSLContext`，其中已经加载了默认的CA证书，并修补了将每个连接与安全上下文连接起来以重用默认上下文的函数：
- en: '[PRE3]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When `verify=True`, we provide the connection pool with a `SSLContext` with
    the CA certificates already loaded. As shown, by not setting `ca_certs` or `ca_cert_dir`
    in that case, we avoid a spurious call to `load_verify_locations()` by urllib3
    and cert verification still works as intended. A couple of additional changes
    are also made in the PR to carefully avoid setting those two connection parameters
    when not needed.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当`verify=True`时，我们使用已加载了CA证书的`SSLContext`提供连接池。正如所示，在这种情况下不设置`ca_certs`或`ca_cert_dir`，我们避免了urllib3不必要地调用`load_verify_locations()`，并且证书验证仍然按预期工作。在PR中还进行了一些额外的更改，仔细避免在不需要时设置这两个连接参数。
- en: A small caveat happens when `verify` isn't a boolean, but rather a string indicating
    a path to an alternative CA bundle or cert store. In those cases, we do set `ca_certs`
    or `ca_cert_dir` accordingly to ensure that the alternative CA bundle requested
    by the user is loaded instead. There is further room for optimization here, because
    this use case will still incur in a call to `load_verify_locations()` per request.
    Perhaps the previous approach could be generalized by caching different `SSLContext`
    objects depending on the CA bundle that the request wishes to use.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当`verify`不是布尔值，而是一个指示替代CA捆绑包或证书存储路径的字符串时，会发生一个小的警告。在这些情况下，我们相应地设置`ca_certs`或`ca_cert_dir`，以确保加载用户请求的替代CA捆绑包。这里还有进一步的优化空间，因为这种用例仍然会在每个请求中调用`load_verify_locations()`。也许可以通过根据请求希望使用的CA捆绑包缓存不同的`SSLContext`对象来泛化先前的方法。
- en: '* * *'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Update: The corresponding [pull request](https://github.com/psf/requests/pull/6667)
    has since been accepted by the maintainers and merged, and the changes have been
    published in version [2.32.0](https://github.com/psf/requests/blob/main/HISTORY.md#2320-2024-05-20)
    of Requests.'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 更新：相应的[pull request](https://github.com/psf/requests/pull/6667)已被维护者接受并合并，并已在Requests的[2.32.0](https://github.com/psf/requests/blob/main/HISTORY.md#2320-2024-05-20)版本中发布了这些更改。
