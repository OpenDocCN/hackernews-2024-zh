- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 12:53:04'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: LiveView is best with Svelte
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://blog.sequin.io/liveview-is-best-with-svelte/](https://blog.sequin.io/liveview-is-best-with-svelte/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We’re [Sequin](https://sequin.io/docs?ref=blog.sequin.io). We turn 3rd-party
    API data (e.g. Salesforce, AWS) into Postgres tables and event streams. As an
    infrastructure company, we questioned if we really need a SPA. So, we started
    with LiveView, which helped us move fast but left us wanting more. This post is
    about that journey.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: Phoenix's [LiveView](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html?ref=blog.sequin.io)
    has polarized our team. Compared to SPA, there are components and features that
    we’re able to build 2-3x faster. Conversely, there are components and features
    that are frustrating to build or feel very counterintuitive.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: Said another way, LiveView makes a lot of things easy. But it also makes some
    easy things hard.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: This created tension. Do we keep forging down this path? Or do we give in and
    convert our app to a SPA?
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, we found a companion library called [LiveSvelte](https://github.com/woutdp/live_svelte?ref=blog.sequin.io).
    LiveView enables a development experience with Svelte that’s unlike any other
    fullstack paradigm I’ve used.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: 'The team agrees: this is a killer way to build.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: To appreciate the LiveView+Svelte paradigm, I’ll start by explaining how LiveView
    works and what makes it different. Then, I’ll detail the friction we encountered
    with a pure LiveView approach. At that point, you’ll be able to appreciate what
    LiveSvelte offers.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: What is LiveView
  id: totrans-split-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LiveView offers a very unique way to build web applications.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: In a traditional server-rendered web application, the server is stateless. The
    client requests a page and the server renders it. All client actions route back
    to the server, which re-renders the next page.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: In a SPA, the client is in charge of building pages. It leverages a backend
    API to read and write data. Client apps are stateful (e.g. `useState` in React).
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: In LiveView, the server is in charge of rendering the page. But it’s stateful.
    Actions in the frontend are handled by the backend, but the server *incrementally*
    updates the DOM, much like in a SPA.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: At a high-level, the reason a SPA is complex is because distributed systems
    are complex. Supporting a client JS app is supporting a microservice (and one
    that runs in a hostile, untrusted environment, no less!)
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: In *theory* your frontend app uses a backend REST API that *could* be used to
    support lots of different services and clients. In reality, the needs of your
    frontend app are unique. So your backend routes and controllers explode with functions
    that serve the needs of a single client.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: 'If nothing else, this complexity just means shaving a lot of yaks. Each request
    requires a fair bit of plumbing on both the frontend and the backend. Callstacks
    can easily exceed half a dozen layers:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: '`onMount`'
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`await api.fetchUsers`'
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parseResponse`'
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Router.handle(/api/users)`'
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AuthPlug.verify_cookie`'
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AuthPlug.verify_cookie`'
- en: '`UsersController.index`'
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UsersController.index`'
- en: '`Users.list_for_org`'
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Users.list_for_org`'
- en: '`ApiHelpers.prepare_response`'
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApiHelpers.prepare_response`'
- en: The promise of LiveView is that you get to create rich client-side experiences
    without the frontend microservice. You're back to the much simpler world where
    you can query the database in the function adjacent to the function that renders
    your table rows. If a new row comes in, you just need to push it to your table,
    and LiveView will update the client for you.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: LiveView 的承诺是，您可以创建丰富的客户端体验，而无需前端微服务。您回到了更简单的世界，在那里您可以在渲染表行的函数旁边查询数据库。如果有新的行进来，您只需要将它推送到表中，LiveView
    将为您更新客户端。
- en: But in addition, you also get to enjoy building an app using the stateful paradigm
    of frontend frameworks. It's much easier and faster to build rich interaction
    patterns this way vs prior backend paradigms where you'd need to "rebuild the
    world" on each request.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但此外，您还可以享受使用前端框架的状态化范式构建应用程序的乐趣。通过这种方式比以前的后端范式更容易更快地构建丰富的交互模式，您无需在每次请求时“重建整个世界”。
- en: Where LiveView makes easy things hard
  id: totrans-split-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LiveView 使易事变难
- en: There's a lot of good stuff in LiveView. But there are also real thorns.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: LiveView 中有很多好东西。但也有真正的障碍。
- en: 'There are two primary areas that we struggled with LiveView:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 LiveView 中遇到困难的两个主要领域是：
- en: Client-side state is inevitable
  id: totrans-split-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户端状态是不可避免的
- en: 'There is a (literal) speed of light limitation with this approach: your server
    can only be *so close* to your users.'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法有（字面上的）光速限制：您的服务器只能与您的用户 *如此* 接近。
- en: Invariably, you’re going to need to do some stuff client-side. Animations, tooltips,
    showing/hiding DOM elements, disabling form fields, etc.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 不可避免地，您需要在客户端执行一些操作。动画、工具提示、显示/隐藏 DOM 元素、禁用表单字段等等。
- en: 'For example, there’s a form in our app with two interdependent dropdowns. Selecting
    an option in the first dropdown allows our server to generate the list for the
    second dropdown. To get the best UX, you want to disable the second dropdown immediately
    after the first dropdown changes. Then, when it’s repopulated by the server, you
    can re-enable it:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们的应用程序中有一个表单，有两个相互依赖的下拉菜单。在第一个下拉菜单中选择一个选项允许服务器为第二个下拉菜单生成列表。为了获得最佳用户体验，您希望在第一个下拉菜单更改后立即禁用第二个下拉菜单。然后，当服务器重新填充它时，您可以重新启用它：
- en: '*Simulating 1000ms of roundtrip latency between the client and the server.*'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*模拟客户端和服务器之间 1000ms 的往返延迟。*'
- en: 'To pull this off, as far as we could tell, you need to use two independent
    concepts in LiveView:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 据我们所知，要实现这一点，您需要在 LiveView 中使用两个独立的概念：
- en: Use the [JS module](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html?ref=blog.sequin.io)
    to disable the second dropdown when the first dropdown changes.
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[JS 模块](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html?ref=blog.sequin.io)在第一个下拉菜单更改时禁用第二个下拉菜单。
- en: Use a [hook](https://hexdocs.pm/phoenix_live_view/js-interop.html?ref=blog.sequin.io#client-hooks-via-phx-hook)
    to register an event listener on the second dropdown. Then, send an action to
    re-enable the second dropdown from the backend.
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[hook](https://hexdocs.pm/phoenix_live_view/js-interop.html?ref=blog.sequin.io#client-hooks-via-phx-hook)在第二个下拉菜单上注册事件侦听器。然后，从后端发送一个动作来重新启用第二个下拉菜单。
- en: And for slightly more complex interaction patterns, you’ll need to incorporate
    a *third* concept, LiveView state. For example, maybe you only want to re-enable
    the second dropdown in certain conditions.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于稍微复杂的交互模式，您需要融入*第三*个概念，即 LiveView 状态。例如，也许您只想在特定条件下重新启用第二个下拉菜单。
- en: The way these three concepts fit together is not obvious (we’re still not sure
    this is the right pattern!)
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个概念如何组合在一起并不明显（我们仍然不确定这是否是正确的模式！）
- en: So, while the server is in charge of a lot of DOM changes, it can’t command
    all of them. You use JS and hooks to sprinkle in JavaScript where needed. These
    tools feel side-chained to core LiveView, and therefore their patterns of use
    are not obvious. And the more JS and hooks you use, the more of your DOM state
    now exists *outside* of LiveView.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，虽然服务器负责大量 DOM 更改，但并非全部。您可以在必要时使用 JS 和 hooks 来添加 JavaScript。这些工具感觉像是附加到核心
    LiveView 上，因此它们的使用模式并不明显。而且您使用的 JS 和 hooks 越多，您的 DOM 状态现在就存在于 LiveView *之外*。
- en: This is a stark contrast to a paradigm like React. In React, it’s state and
    actions all the way down. With that core concept, you can do most anything. And
    there is no blurry line between DOM state and component state.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这与 React 这样的范式形成鲜明对比。在 React 中，一路下来都是状态和动作。有了这个核心概念，您几乎可以做任何事情。而且 DOM 状态和组件状态之间没有模糊的界线。
- en: React can take that approach because there’s no latency between client-side
    actions and client-side state. This means you can let React’s state paradigm handle
    every action and transition. Because all of LiveView’s state is server-side, it
    has to contend with the latency between client-side actions and server-side state.
    This means that while LiveView state *looks like* other frontend frameworks, the
    model is actually quite different.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: React能采取这种方法是因为客户端操作和客户端状态之间没有延迟。这意味着你可以让React的状态范式处理每一个操作和转换。因为LiveView的所有状态都在服务器端，它必须应对客户端操作和服务器端状态之间的延迟。这意味着，虽然LiveView的状态*看起来像*其他前端框架，但模型实际上是非常不同的。
- en: Take input fields, for example. In React, a character can’t be inserted into
    an input field without routing through state. This unlocks a powerful programming
    model, where your component re-renders – and therefore responds – to every keystroke.
    It gives the state and action paradigm a lot of reach, where you can use one core
    concept (`useState`) to solve a huge space of problems.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以输入字段为例。在React中，不能在不经过状态路由的情况下插入字符到输入字段中。这解锁了一个强大的编程模型，其中你的组件重新渲染——因此对每次按键作出响应。这为状态和操作范式提供了很大的影响力，在这里你可以使用一个核心概念（`useState`）来解决大量的问题空间。
- en: In LiveView, it’s more accurate to say that the input field is changed by the
    user, *and then* a short while later LiveView finds out about it and reacts to
    it. With no latency, *it looks a lot like React*. But with increased latency,
    it’s quite a different paradigm.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在LiveView中，更准确地说是用户更改了输入字段，*然后*过了一小段时间LiveView才会知道并做出反应。没有延迟时，*它看起来很像React*。但是随着延迟增加，它的范式就大不相同了。
- en: In frontend frameworks like React, you need to contend with server-side latency
    all the time. But *when* a high-latency action is going to take place is clear
    (i.e. you’re fetching from a server). In LiveView, the boundary is murkier.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在像React这样的前端框架中，你需要一直应对服务器端延迟。但是*何时*进行高延迟操作是明确的（即你正在从服务器获取数据）。在LiveView中，这个边界就比较模糊。
- en: Three components
  id: totrans-split-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三个组件
- en: 'LiveView has three different types of components: LiveViews, LiveComponents,
    and Components.'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: LiveView有三种不同类型的组件：LiveViews、LiveComponents和Components。
- en: LiveViews and LiveComponents are like stateful components in React, whereas
    Components are like functional components.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: LiveView和LiveComponent就像React中的有状态组件，而Components则像功能组件。
- en: Importantly, a LiveView will always be the uppermost parent component. You render
    LiveComponents and Components as children underneath a LiveView.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，LiveView始终是最上层的父组件。你在LiveView下面作为子元素渲染LiveComponents和Components。
- en: In React, it's easy to switch between stateful and functional components–just
    add or remove `useState` hooks. The API for both are the same (they both accept
    props in the same way). And outside state, they have an identical feature set.
    For example, they can both register and respond to DOM events in the same way.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中，轻松切换状态组件和功能组件很容易——只需添加或删除`useState`钩子。两者的API是相同的（它们都以相同的方式接受props）。并且除了状态之外，它们具有相同的功能集。例如，它们都可以以相同的方式注册和响应DOM事件。
- en: The ease of switching between component types is important. As an app matures,
    you’re constantly factoring out components. You’re figuring out which bits should
    be reused, what should be generalized, where state should live, etc.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 切换组件类型的简易性很重要。随着应用程序的成熟，你不断地提取组件。你要弄清楚哪些部分应该被重用，什么应该被泛化，状态应该放在哪里等等。
- en: In LiveView, all three components are very different. As a result, refactoring
    a LiveView into a LiveComponent is surprisingly cumbersome.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在LiveView中，这三个组件是非常不同的。因此，将LiveView重构为LiveComponent实际上是相当繁琐的。
- en: 'In particular:'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是：
- en: The syntax for rendering and passing props to LiveViews and LiveComponents is
    different.
  id: totrans-split-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染和向LiveViews和LiveComponents传递props的语法是不同的。
- en: The lifecycle of LiveViews and LiveComponents are different.
  id: totrans-split-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LiveViews和LiveComponents的生命周期是不同的。
- en: The [communication options](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html?ref=blog.sequin.io#module-unifying-liveview-and-livecomponent-communication)
    between LiveViews and LiveComponents are different. For example, you `send` to
    LiveViews but `send_update` to LiveComponents.
  id: totrans-split-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在LiveView和LiveComponent之间的[通信选项](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html?ref=blog.sequin.io#module-unifying-liveview-and-livecomponent-communication)是不同的。例如，你向LiveView发送信息，但向LiveComponent发送更新。
- en: LiveComponents are not processes, and so can't interact with the rest of the
    system like LiveViews can.
  id: totrans-split-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LiveComponents不是进程，因此无法像LiveViews那样与系统的其余部分进行交互。
- en: 'That last point is what makes LiveComponents so different and so frustrating.
    The limitations *make sense*: A LiveView is a process. That''s one of the best
    parts about a LiveView, they''re "just processes" and so they can fit into your
    Elixir/OTP system like every other process. For example, you can use pub/sub in
    a LiveView to subscribe to system-wide changes.'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点是使LiveComponents如此不同和令人沮丧的原因。这些限制*是合理的*：LiveView是一个进程。这是LiveView最棒的部分之一，它们“只是进程”，因此可以像其他进程一样适应您的Elixir/OTP系统。例如，您可以在LiveView中使用发布/订阅来订阅系统范围的更改。
- en: A LiveComponent is *not* its own process, they are modules invoked by a LiveView.
    The parent LiveView process holds the state for all subcomponents. So, a LiveView
    has a `pid`, state, and an inbox; a LiveComponent does not. This means the LiveView
    also has to handle all message routing for its child LiveComponents.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: LiveComponent不是它自己的进程，它们是由LiveView调用的模块。父LiveView进程持有所有子组件的状态。因此，LiveView有一个`pid`，状态和一个收件箱；LiveComponent没有。这意味着LiveView还必须处理其子LiveComponent的所有消息路由。
- en: 'This is in keeping with Elixir/OTP design principles: processes are the building
    blocks. To give LiveComponents the same powers of independent state management
    and action handling, they would each need to be their own process.'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这符合Elixir/OTP设计原则：进程是构建块。为了让LiveComponents具有独立状态管理和操作处理的能力，它们每个都需要成为自己的进程。
- en: 'Still, for the life of me, I *really* struggled with LiveComponents. So often,
    I wanted to send my LiveComponent an event/action but didn''t have a good way
    to do it. You end up using `send_update`, which is an awkward API. We couldn''t
    decide: do we send *actions* via `send_update`, or do we use it to patch state?
    If we use it to patch state, how do we tell in our `update` clause whether we''re
    mounting or updating?'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，对我来说，真的很难理解LiveComponents。我经常想给我的LiveComponent发送一个事件/动作，但却没有好的方法去做。我们最终使用了`send_update`，这是一个尴尬的API。我们无法决定：我们是通过`send_update`发送*动作*，还是用它来修补状态？如果我们在我们的`update`条款中使用它来修补状态，我们如何告诉是否正在装载或更新？
- en: The elusive “LiveView way”
  id: totrans-split-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这就是“LiveView方式”的难以捉摸之处。
- en: LiveView often made us feel like we were “missing something.” The “LiveView
    way” feels elusive.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: LiveView经常让我们感觉好像“缺了点什么”。“LiveView方式”似乎难以捉摸。
- en: Perhaps LiveView is in an uncanny valley. It shares a lot in common with contemporary
    frontend frameworks. So, our “React brains” and intuitions would kick in, driving
    us to use old patterns–but those would often lead to a dead end. More alienness
    would have forced us to recognize the differences and to approach problems differently.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 或许LiveView处于一种奇异谷状态。它与现代前端框架有很多共同点。因此，我们的“React大脑”和直觉会驱使我们使用旧模式——但这些往往会导致死胡同。更多的陌生感本应迫使我们认识到这些差异，并以不同的方式解决问题。
- en: You can do a lot with just LiveView state and actions. But there are limits,
    and when you hit them you need to switch paradigms.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以仅使用LiveView状态和动作做很多事情。但是存在限制，当您遇到它们时，您需要切换范式。
- en: It has components to help you organize and reuse code. But due to differences
    between JavaScript and Elixir, LiveView can’t really offer the same isomorphic
    component trees without a ton of abstraction, and so has LiveViews and LiveComponents.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有组件，帮助您组织和重用代码。但由于JavaScript和Elixir之间的差异，LiveView无法提供同构组件树，除非进行大量抽象，因此有LiveViews和LiveComponents。
- en: '**This is what makes LiveSvelte so promising**. As you’ll see, it shifts more
    responsibility to the frontend. It embraces the fact that the frontend will have
    its own state. And it lets you take advantage of all the maturity of contemporary
    JavaScript component frameworks.'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**这就是使LiveSvelte如此有前景的原因**。正如您将看到的那样，它将更多责任转移到前端。它接受了前端将具有自己状态的事实。并且让您利用所有现代JavaScript组件框架的成熟性。'
- en: LiveView + Svelte
  id: totrans-split-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LiveView + Svelte
- en: LiveSvelte lets you render Svelte components from LiveView. It's an awesome
    paradigm.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: LiveSvelte允许您从LiveView中渲染Svelte组件。这是一个很棒的范例。
- en: 'There’s a couple different ways to render Svelte from your LiveViews, but the
    most basic way looks like this:'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的方式可以从您的LiveViews渲染Svelte，但最基本的方式如下所示：
- en: '[PRE0]'
  id: totrans-split-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is an Elixir module, the LiveView. Inside the render, we first take our
    Elixir data structures and encode them for the frontend. We like the pattern of
    explicitly encoding Elixir structs and such as plain maps before passing to Svelte,
    like this:'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个Elixir模块，LiveView。在渲染中，我们首先将我们的Elixir数据结构编码为前端所需的形式。我们喜欢在传递给Svelte之前明确地将Elixir结构等编码为纯映射的模式，就像这样：
- en: '[PRE1]'
  id: totrans-split-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We’re able to set props on the Svelte component. Those are passed down as you’d
    expect to the component:'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够在Svelte组件上设置属性。这些属性如预期般传递到组件：
- en: '[PRE2]'
  id: totrans-split-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'One of the props that LiveSvelte sets for us is the `live` prop. To communicate
    from the Svelte component back up to the LiveView, we can call `live.pushEvent`.
    For example, check how easy it is to send the server changes to the form:'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: LiveSvelte 为我们设置的 props 之一是 `live` prop。为了从 Svelte 组件向 LiveView 发送通信，我们可以调用
    `live.pushEvent`。例如，看看将变更发送到服务器的过程是多么简单：
- en: '[PRE3]'
  id: totrans-split-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is a reactive block in Svelte. It will be executed whenever the variable
    `form` is changed. (Kind of like a `useEffect`, where `form` is the dependency.)
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Svelte 中的一个响应式块。只要变量 `form` 发生变化，它就会被执行。（有点像 `useEffect`，其中 `form` 是依赖项。）
- en: 'The LiveView can handle and respond to the `pushEvent` using typical Elixir
    message handling semantics:'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: LiveView 可以处理并响应 `pushEvent`，使用典型的 Elixir 消息处理语义：
- en: '[PRE4]'
  id: totrans-split-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We first decode the params from the frontend, reversing any encoding/mapping
    we did on the way out. Then, `merge_changeset/2` updates our changeset. If there
    are any validation errors in the changeset, those will make their way back to
    the frontend via the `errors` prop.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从前端解码参数，逆转我们在出路时做的任何编码/映射。然后，`merge_changeset/2` 更新我们的 changeset。如果在 changeset
    中有任何验证错误，这些错误将通过 `errors` prop 返回到前端。
- en: So, you have data flow from Elixir down to the component via props. The LiveView
    process can update props at any time to cause the Svelte component to re-render.
    Any other communication can happen via the websocket.
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你有来自 Elixir 的数据流通过 props 传递到组件。LiveView 进程可以随时更新 props，导致 Svelte 组件重新渲染。任何其他通信可以通过
    websocket 进行。
- en: The boundary between the two is very clear–just as clear as in any SPA.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 两者之间的边界非常明确——就像任何单页面应用程序一样清晰。
- en: What's most game-changing, though, is that you have a *backend, stateful process*
    that is collaborating with a *frontend, stateful process*.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最具革命性的是，你有一个 *后端，有状态进程* 和一个 *前端，有状态进程* 在协作。
- en: And it's *so* fun and productive.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 而且这样做 *既* 有趣又高效。
- en: 'The three powerhouse properties:'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个强大的特性：
- en: The backend controls the props on the frontend component.
  id: totrans-split-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 后端控制前端组件上的 props。
- en: The frontend *and* the backend are stateful.
  id: totrans-split-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前端 *和* 后端都是有状态的。
- en: You have a private, bi-directional communication channel between the two *where
    either side can initiate a message to the other*.
  id: totrans-split-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在两者之间你有一个私有的、双向通信通道，*其中任意一方都可以向另一方发起消息*。
- en: '#1 is made possible thanks to LiveView’s rendering paradigm: re-renders on
    the server are automatically pushed and applied to the client. This lets the server
    update props on the component just like a JS parent component can!'
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: '#1 可以实现多亏了 LiveView 的渲染范式：服务器上的重新渲染会自动推送并应用于客户端。这使得服务器可以像 JS 的父组件一样更新组件上的属性！'
- en: '#2 is possible because a LiveView is a process. Processes are how Elixir encapsulates
    and reduces state.'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可能的，因为 LiveView 是一个进程。进程是 Elixir 封装和减少状态的方式。
- en: '#3 is made possible by the persistent websocket that LiveView gives you, wired
    to the frontend.'
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: '#3 可以实现多亏了 LiveView 提供的持久 websocket，连接到了前端。'
- en: 'Consider the differences between this paradigm and a SPA:'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这种范式与单页面应用程序之间的区别：
- en: First, all browser routing happens via the backend. This is a great simplifier.
    (In a regular SPA you have to maintain *two* sets of routes, one for the browser
    and one for your API.)
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，所有浏览器路由都通过后端进行。这是一个很好的简化器。（在常规单页面应用程序中，你必须维护 *两* 套路由，一个用于浏览器，一个用于 API。）
- en: Second, the backend is stateful. It knows what route you’re on. Which resource
    you’re working with. Each action it handles can be far more incremental, as it’s
    applying a state change to itself vs rebuilding state from scratch.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，后端是有状态的。它知道你所在的路由。你正在处理哪个资源。它处理的每个动作都可以更加增量化，因为它是将状态变更应用于自身，而不是从头开始重建状态。
- en: Third, communication between the frontend and backend is private and coupled,
    as it should be. You’re not “polluting” your server’s public routes with a bunch
    of RPC calls that support a single component. When you see a `pushEvent` in the
    client, you know exactly where the handler for that is – in the collaborating
    Elixir module.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，前端和后端之间的通信是私有的和耦合的，正如它应该是的。你不会在服务器的公共路由中使用一堆支持单个组件的 RPC 调用。当你在客户端看到 `pushEvent`
    时，你知道处理它的位置——在协作的 Elixir 模块中。
- en: Fourth, functionality is split across just two files. Sure, the backend module
    will call out to your backend functions (e.g. fetch data from database) and the
    frontend will import components and styles. But roundtrips between the two aren’t
    routing through a stack of API modules, routers, and controllers.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 第四，功能被分割到仅有两个文件中。当然，后端模块会调用你的后端函数（例如从数据库获取数据），前端会导入组件和样式。但是两者之间的往返不需要通过一堆API模块、路由器和控制器。
- en: 'Fifth, communication between frontend and backend is far less ceremonious.
    The backend can simply update props to inform frontend changes. And the frontend
    can `pushEvent` without needing handlers for expired tokens, timeouts, or outages.
    It’s binary: either the websocket is open which means the server is open for business,
    or it’s not in which case LiveView helpfully shows the user a global “disconnected”
    banner.'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第五，前端和后端之间的通信要简单得多。后端可以简单地更新属性以通知前端的更改。前端可以使用`pushEvent`而不需要处理过期令牌、超时或故障。它是二进制的：要么WebSocket打开，这意味着服务器正在运行，要么关闭，这时LiveView会友好地向用户显示全局“断开连接”横幅。
- en: In the simplest terms, the frontend microservice is eliminated.
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，前端微服务被消除了。
- en: What you end up with feels like such a great split of responsibilities with
    very little boilerplate. All your business logic is on the backend – how you load
    data, *which* data to load, how to sort and filter the data, your validators,
    etc. Your frontend code is stupid simple. In Svelte, it’s all (1) `if/end` blocks
    to conditionally render stuff (2) animations and (3) a few dead simple `pushEvent`
    functions back to the server.
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最终你会感觉到责任分工得当，几乎没有样板代码。所有的业务逻辑都在后端 - 如何加载数据、*加载哪些*数据、如何排序和过滤数据，以及你的验证器等等。你的前端代码非常简单。在Svelte中，它全部是（1）`if/end`块来有条件地渲染东西（2）动画和（3）几个非常简单的`pushEvent`函数返回到服务器。
- en: That last part has been blowing my mind. The typical SPA frontend is full of
    so much logic, usually `map`, `reduce`, and `filter` in order to process server
    data, prepare data for display, or prepare data for the server. In a LiveSvelte
    app, all this can just happen server-side. The LiveView can prepare data exactly
    as the Svelte component needs it. This keeps complexity in your server language,
    in your server's data structures, and in your server's test suite.
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后那部分真是让我大开眼界。典型的SPA前端通常充满了大量逻辑，通常是`map`、`reduce`和`filter`，以便处理服务器数据，为显示准备数据或为服务器准备数据。在LiveSvelte应用中，所有这些都可以在服务器端完成。LiveView可以精确地准备数据，使其与Svelte组件所需的数据完全匹配。这将复杂性留在了你的服务器语言、服务器数据结构和服务器测试套件中。
- en: 'The backend LiveView and the frontend Svelte component aren''t so much coupled
    as they are two halves: the LiveView only renders that Svelte component, and that
    Svelte component is only ever rendered by that LiveView.'
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 后端LiveView和前端Svelte组件并不是紧密耦合，而是两半：LiveView仅呈现该Svelte组件，并且该Svelte组件仅由该LiveView呈现。
- en: 'In contrast to a “regular” LiveView, this paradigm:'
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与“常规”LiveView相比，这种范式：
- en: Embraces state and state transitions in the frontend.
  id: totrans-split-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前端中拥抱状态和状态转换。
- en: Creates a clear boundary layer between the frontend and backend.
  id: totrans-split-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前端和后端之间创建了一个清晰的边界层。
- en: Leverages Svelte’s component paradigm, which like other contemporary JS frameworks
    is very mature and familiar.
  id: totrans-split-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Svelte的组件范式，像其他当代JS框架一样非常成熟和熟悉。
- en: In general, lets great frontend frameworks do what they do best! A pure LiveView
    approach doesn’t let you tap into this huge ecosystem. (For example, Svelte comes
    with great animation primitives.)
  id: totrans-split-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总的来说，让出色的前端框架发挥其所长！纯LiveView方法不允许你利用这个庞大的生态系统。（例如，Svelte带有出色的动画基元。）
- en: By moving more into the frontend, we no longer felt like we were straddling
    an awkward middleground.
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更多地移到前端，我们不再感觉自己处于尴尬的中间地带。
- en: We chose LiveSvelte because React didn't have a similarly complete LiveView
    library. The joy of working with Svelte has been a very happy bonus. Because LiveView
    does the heavy lifting with state management, our state management in Svelte is
    very simple. For basic state and reactivity, Svelte is the lightest and fastest
    frontend framework I've worked with. We also prefer its templating features to
    React's, namely getting to use `if/else` instead of ternary operators and its
    conditional property setting.
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了LiveSvelte，因为React没有类似完整的LiveView库。与Svelte一起工作的乐趣是一个非常愉快的意外。因为LiveView处理了状态管理的繁重工作，我们在Svelte中的状态管理非常简单。对于基本的状态和响应性，Svelte是我使用过的最轻量、最快的前端框架。我们也更喜欢其模板特性，尤其是可以使用`if/else`而不是三元运算符和其条件属性设置。
- en: Further, Svelte 5 is around the corner, and we're bullish on its [runes](https://svelte.dev/blog/runes?ref=blog.sequin.io).
    We think it makes Svelte even easier to pick up and reason about, meaning everyone
    on the team is empowered to traverse the stack.
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步说，Svelte 5 即将面世，我们对其 [符文](https://svelte.dev/blog/runes?ref=blog.sequin.io)
    感到乐观。我们认为这使得 Svelte 更易上手和理解，这意味着团队中的每个人都能够跨越技术栈。
- en: I’m now convinced LiveView shines brightest as a backend-for-frontend. By rendering
    frontend components, incrementally updating them, maintaining a stateful backend
    process, and providing a websocket API, it creates a tremendously productive platform
    for frontend applications.
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在确信 LiveView 最擅长作为后端-for-前端。通过渲染前端组件，增量更新它们，维护有状态的后端进程，并提供 websocket API，它为前端应用程序创造了一个极具生产力的平台。
- en: If you’re using LiveView and resonated with any of the friction I highlighted,
    you need to give this a try. If you’ve never used LiveView, you’ll find that this
    paradigm *lowers* the learning curve. This is because you’re able to use a lot
    of the JavaScript framework primitives you’re used to.
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 LiveView 并且对我强调的任何摩擦感到 resonated，你需要试一试。如果你从未使用过 LiveView，你会发现这种范式 *降低*
    了学习曲线。这是因为你可以使用大量你熟悉的 JavaScript 框架原语。
- en: '* * *'
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Update 4/3/2024**: Join the discussion on [Hacker News](https://news.ycombinator.com/item?id=39916144&ref=blog.sequin.io).'
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**2024年3月4日更新**：加入 [Hacker News](https://news.ycombinator.com/item?id=39916144&ref=blog.sequin.io)
    上的讨论。'
