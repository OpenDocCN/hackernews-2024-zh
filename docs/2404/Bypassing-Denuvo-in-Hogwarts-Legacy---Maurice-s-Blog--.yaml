- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 12:47:49'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 12:47:49
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Bypassing Denuvo in Hogwarts Legacy | Maurice's Blog 🐍
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在《霍格沃茨传奇》中绕过Denuvo | Maurice的博客 🐍
- en: 来源：[https://momo5502.com/posts/2024-03-31-bypassing-denuvo-in-hogwarts-legacy/](https://momo5502.com/posts/2024-03-31-bypassing-denuvo-in-hogwarts-legacy/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://momo5502.com/posts/2024-03-31-bypassing-denuvo-in-hogwarts-legacy/](https://momo5502.com/posts/2024-03-31-bypassing-denuvo-in-hogwarts-legacy/)
- en: When I announced my Black Ops 3 integrity bypass, someone commented that my
    research was not impressive and I should try analyzing Denuvo instead.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我宣布我的《黑色行动3》完整性绕过时，有人评论说我的研究不令人印象深刻，建议我尝试分析Denuvo。
- en: That kinda stuck with me, so I did what everyone would do and spent the last
    5 months of my free time reverse engineering and bypassing the Denuvo DRM in Hogwarts
    Legacy.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 那种想法一直萦绕在我心中，所以我做了每个人都会做的事情，并在过去的五个月里利用空闲时间逆向工程并绕过《霍格沃茨传奇》中的Denuvo DRM。
- en: I am obviously not as skilled and experienced as EMPRESS, who managed to do
    it within days, but that’s ok 😃
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我没有EMPRESS那样的技术和经验，在几天内就完成这项任务，但没关系 😃
- en: How does Denuvo work?[#](#how-does-denuvo-work)
  id: totrans-split-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Denuvo是如何工作的？[#](#how-does-denuvo-work)
- en: '![](img/c3455a23c82a01c7d2d2405ea61a9b69.png)'
  id: totrans-split-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3455a23c82a01c7d2d2405ea61a9b69.png)'
- en: The game collects hardware/software features into a fingerprint and generates
    a Steam Ticket (proof of game ownership).
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏收集硬件/软件特征形成指纹，并生成Steam票据（游戏拥有的证据）。
- en: Fingerprint and Ticket are then sent to Denuvo Servers.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后指纹和票据被发送到Denuvo服务器。
- en: From there the Steam Ticket is sent to Steam to make sure the user really owns
    the game (I obviously don’t know what’s going on in their servers, so this is
    only an assumption, but it should be accurate enough).
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Steam票据发送到Steam以确保用户确实拥有该游戏（显然我不知道他们服务器上在发生什么，所以这只是一个假设，但应该足够准确）。
- en: If the user really owns the game, a Denuvo Token is generated, that only works
    on a PC with the exact fingerprint.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户真的拥有游戏，将生成一个仅在具有完全匹配指纹的PC上有效的Denuvo Token。
- en: Using that token, the player can now run the game.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该Token，玩家现在可以运行游戏。
- en: The game can not run without the token, as it is used to e.g. decrypt certain
    values at runtime and similar things.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 该游戏无法在没有Token的情况下运行，因为它用于例如在运行时解密某些值等用途。
- en: Ontop of using the token to decrypt values, Denuvo regularly verifies the hardware
    features for the fingerprint still match with the token, at runtime.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用Token解密值外，Denuvo还定期在运行时验证硬件特征以确保与Token匹配。
- en: What was my goal?[#](#what-was-my-goal)
  id: totrans-split-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我的目标是什么？[#](#what-was-my-goal)
- en: Cracking the game was not a goal I had. I like Hogwarts Legacy and thus causing
    any harm is not my intention. I wanted to do research purely for myself.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 破解游戏不是我的目标。我喜欢《霍格沃茨传奇》，因此不打算造成任何伤害。我仅为自己进行纯研究。
- en: Therefore this post is going to be intentionally vague and not going to show
    how I analyzed and patched the game in detail, because I don’t need anymore legal
    trouble than I already have.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本文将故意保持模糊，不详细展示我如何分析和详细修补游戏，因为我不想再多惹任何法律麻烦。
- en: The actual goal I had in mind was to find all features the game uses to derive
    the fingerprint and to patch them. Ontop of that, I want to patch most of the
    runtime checks.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我心中的真正目标是找到游戏用于生成指纹的所有特征，并修补它们。除此之外，我还想修补大部分运行时检查。
- en: For a real crack, it is obviously needed to patch all of the runtime checks.
    Finding all of them is still an extremely time consuming task, so everyone who
    has achieved that deserves my utmost respect.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于真正的破解，显然需要修补所有运行时检查。找到所有检查仍然是一项极其耗时的任务，所以任何能够完成的人都值得我最高的尊重。
- en: However, I do believe that once I have patched some/most of the runtime checks
    and discovered all hardware features, I would be capable to patch all of them
    with enough time and motivation.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我确信一旦我修补了大部分运行时检查并发现了所有硬件特征，我将能够在足够的时间和动力下修补所有运行时检查。
- en: The real challenge I saw for myself was to analyze the protection to discover
    all the bindings it uses for the fingerprint.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我为自己设定的真正挑战是分析保护措施，以发现它用于指纹的所有绑定。
- en: How did I do it?[#](#how-did-i-do-it)
  id: totrans-split-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我是如何做到的？[#](#how-did-i-do-it)
- en: 'Using a Denuvo Token on a PC that has a mismatching fingerprint shows the following
    dialog:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用在具有不匹配指纹的PC上的Denuvo Token将显示以下对话框：
- en: '![](img/d35fd0a6c1f4108a66e128c50a5e3fca.png)'
  id: totrans-split-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d35fd0a6c1f4108a66e128c50a5e3fca.png)'
- en: Therefore the goal is to get past that dialog.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，目标是跳过该对话框。
- en: This is the part I wish I could talk more about, but I don’t think that’s a
    good idea. Instead I will roughly scratch the surface and at least outline the
    tools I used.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我希望能更多谈论的部分，但我认为这不是一个好主意。相反，我将粗略地概述我使用的工具。
- en: To figure out what features the game collects I used the [Qiling](https://qiling.io/)
    reverse engineering framework.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了弄清楚游戏收集了哪些功能，我使用了[Qiling](https://qiling.io/)反向工程框架。
- en: 'Qiling emulates any kind of binary allowing to fully instrument it. It is truly
    a powerful framework:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: Qiling模拟任何类型的二进制文件，允许完全对其进行仪器化。这真是一个强大的框架：
- en: '![Qiling](img/775b82dff2e264bcdbf38313b5a14063.png)'
  id: totrans-split-32
  prefs: []
  type: TYPE_IMG
  zh: '![Qiling](img/775b82dff2e264bcdbf38313b5a14063.png)'
- en: However, it requires a whole lot of scripting and adaption. It is by far not
    a tool that does all the work for you out-of-the-box.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，它需要大量的脚本编写和适应。这绝对不是一个可以一键完成所有工作的工具。
- en: 'In fact, it even has quite a lot of bugs (e.g. wrongly emulated Windows APIs)
    and lacks quite a few essential features: I had to implement so many basics that
    I expected the framework to handle, e.g. TLS support 🥲.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，它甚至有相当多的bug（例如错误仿真的Windows API）和缺少相当多的基本功能：我不得不实现很多我希望框架处理的基础功能，例如TLS支持
    🥲。
- en: It feels like it is mainly designed for Linux, so maybe one day I can either
    upstream my patches/fixes or write my own framework. Who knows.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 它似乎主要是为Linux设计的，所以也许有一天我可以将我的补丁/修复上游，或者编写我自己的框架。谁知道呢。
- en: But even with all these flaws, I can not stress enough how helpful of a tool
    it was.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 但即使存在这些缺陷，我还是不能强调这个工具有多么有帮助。
- en: Getting fully accomodated to Qiling and finding most of the fingerprint features
    took me about two months. Discovering the last one took the remaining 3 months
    and I only discovered it on accident.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 完全适应Qiling并找到大部分指纹特征花了我大约两个月的时间。发现最后一个特征花了剩下的三个月，而且我是偶然发现的。
- en: To verify that a certain feature really is part of the fingerprint, I patched/spoofed
    it and checked that my previously valid Denuvo Token is now invalid and shows
    the error dialog.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证某个功能是否真的是指纹的一部分，我对其进行了补丁/欺骗，并检查了之前有效的Denuvo令牌现在无效并显示错误对话框。
- en: For most of my patches, I had to use quite a lot of runtime disassembling to
    dynamically build my hooks and stubs, which lead me to discover quite a few bugs
    in various disassemblers 😂. (In hindsight, thinking about this, folks at Denuvo
    might have intentionally included instructions that cause bugs with those disassemblers.
    I don’t know if that’s the case, but if it is, that’s hella smart.)
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我的大部分补丁，我不得不使用相当多的运行时反汇编来动态构建我的钩子和存根，这让我在各种反汇编器中发现了不少bug 😂。（事后看来，想想这个，Denuvo的人可能有意地包含了导致这些反汇编器出bug的指令。我不知道是不是这样，但如果是的话，那真是太聪明了。）
- en: However, as making a portable crack was not a goal, I made extensive use of
    my own [hypervisor](https://github.com/momo5502/hypervisor). I used it for example
    to install EPT hooks at a few locations that were otherwise too tedious to patch
    manually.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，由于制作便携式破解并不是目标，我大量使用了我自己的[hypervisor](https://github.com/momo5502/hypervisor)。例如，我用它在几个位置安装了EPT钩子，否则这些位置将太繁琐以手动修补。
- en: With all features at hand, I forced the game to generate a token on my PC, using
    a fingerprint for my PC. Using all my patches and hooks (~2000 in total), I now
    wanted to run the game on my laptop using the token generated for my PC.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有了所有功能，我强制游戏在我的PC上生成一个令牌，使用我的PC的指纹。使用所有我的补丁和钩子（总共约2000个），我现在想要使用为我的PC生成的令牌在我的笔记本电脑上运行游戏。
- en: 'After some time, I managed to get it to run until the start screen:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 过了一段时间，我成功地让它运行到启动画面：
- en: '![](img/6a7caeade614fbe897ae83813141dddc.png)'
  id: totrans-split-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a7caeade614fbe897ae83813141dddc.png)'
- en: This is the point I wanted to reach. The game can now launch with a token issued
    for a different machine and I am absolutely happy.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我想达到的点。现在游戏可以使用为另一台机器发行的令牌启动，我非常高兴。
- en: The game obviously still crashes here and there with the PC token. Sometimes
    I can launch into the game and play, sometimes it crashes. This is where one would
    need to patch all runtime checks.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 显然游戏仍然会偶尔在PC令牌上崩溃。有时我可以启动游戏并进行游戏，有时会崩溃。这是需要对所有运行时检查进行补丁的地方。
- en: Knowing how the game performs these, it is just a matter of time and motivation.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 了解游戏如何执行这些操作只是时间和动力的问题。
- en: However, as previously mentioned, this is still a huge task task to pull off,
    so everyone who managed to do that deserves my utmost respect.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正如前面提到的，这仍然是一个巨大的任务，因此每个成功做到这一点的人都值得我最崇高的尊重。
- en: Are there no details I can tell you?[#](#are-there-no-details-i-can-tell-you)
  id: totrans-split-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我可以告诉你没有细节吗？[#](#are-there-no-details-i-can-tell-you)
- en: 'There is one thing Denuvo does, that is extremely simple, yet so sophisticated.
    It doesn’t make up a huge part of the protection and I haven’t seen it being documented
    anywhere, yet:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: Denuvo有一件事非常简单，但却如此复杂。它并不占保护的大部分，我还没看到它在任何地方有文档记录：
- en: Denuvo doesn’t always use the stack in a linear fashion.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: Denuvo并不总是以线性方式使用堆栈。
- en: On modern computers, the stack usually grows downwards. If something is pushed
    onto the stack, the stack pointer is decremented. If it is removed from the stack,
    the pointer is incremented.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代计算机上，堆栈通常向下增长。如果将某些内容推送到堆栈上，堆栈指针会递减。如果从堆栈中移除，指针会递增。
- en: That means all memory above the pointer is reserved, everything below is free.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着指针上方的所有内存都被保留，下方的所有内容都是空闲的。
- en: This concept does not apply with Denuvo in place. Elements are stored above
    the pointer, as well as below.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念在Denuvo存在的情况下并不适用。元素存储在指针上方，以及下方。
- en: As long as everyone else adheres to that, everything works out fine. However,
    as soon as someone tries to use the stack linearly, values in the seemingly free
    region are going to be overwritten, resulting in the game to crash.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 只要每个人都遵守这一点，一切都会很顺利。但是，一旦有人试图线性使用堆栈，看似空闲区域中的值就会被覆盖，导致游戏崩溃。
- en: This happens for example when using hardware breakpoints. When the exception
    triggered by the breakpoint is dispatched to the application, the exception context
    is stored on the stack, overwriting values the game uses.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当使用硬件断点时会发生这种情况。当由断点触发的异常分派到应用程序时，异常上下文存储在堆栈上，覆盖了游戏使用的值。
- en: This essentially makes hardware breakpoints and many other techniques either
    extremely difficult to use, or even impossible.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上使得硬件断点和许多其他技术要么极其难以使用，要么甚至不可能。
- en: What I did instead, to still be able to use hardware breakpoints, was to write
    a small debugger. It is attached to the game and its only job is to receive the
    exceptions triggered by the hardware breakpoints. That way, the exceptions are
    not dispatched to the game, thus not corrupting the stack.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我所做的是，为了仍然能够使用硬件断点，我编写了一个小型调试器。它附加到游戏上，其唯一工作是接收由硬件断点触发的异常。这样，异常就不会分派到游戏，因此也不会破坏堆栈。
- en: Such a technique is so simple, but still results in all hooks having to take
    that into account and thus becoming vastly more complex. Very impressive.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的技术非常简单，但仍导致所有钩子都必须考虑到这一点，从而变得极为复杂。非常令人印象深刻。
- en: What about performance?[#](#what-about-performance)
  id: totrans-split-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那性能呢？[#](#what-about-performance)
- en: Everyone knows the rumors that Denuvo kills performance, but is that actually
    true?
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都知道Denuvo会降低性能，但这是否真的属实？
- en: Precisely measuring the performance impact Denuvo causes is extremely difficult.
    It requires knowing all the exact pieces of code Denuvo executes. Identifying
    these is an insanely huge amount of work.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 准确测量Denuvo造成的性能影响非常困难。需要知道Denuvo执行的所有确切代码片段。识别这些是一项极其庞大的工作。
- en: What I’ll do instead is to reason about it using measurements done by my hooks.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我将使用我的钩子完成这项工作的理由。
- en: This is not going to measure the performance impact directly, but it will give
    us is an estimate, a feeling, of how relevant it is to even talk about performance
    loss in combination with Denuvo.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会直接测量Denuvo对性能的影响，但它会给我们一个估计，一个感觉，关于与Denuvo结合谈论性能损失的相关性。
- en: 'A good analogy to visualize what I’m going to measure is the following:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的类比来形象化我即将测量的是：
- en: Imagine you are a developer and want to measure how much meetings slow down
    your pace of development. This is what I consider hard to measure.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你是一名开发者，想要衡量会议对你开发速度的影响。这正是我认为难以衡量的事情。
- en: 'Instead, what I’m going to measure is: Do you even have that many meetings,
    so that it is relevant to even think about how much they slow you down?'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我要测量的是：你是否有这么多会议，以至于考虑它们减慢你的速度是相关的？
- en: As in, if you have one meeting per year, doing the exhaustive test is just not
    worth it, because it doesn’t really matter that much.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，如果你一年只开一次会议，做详尽的测试根本不值得，因为它并不真正那么重要。
- en: Note that this analysis only applies to Hogwarts Legacy. I don’t know if any
    of that applies to other games protected by Denuvo!
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此分析仅适用于霍格沃茨传奇。我不知道其他由Denuvo保护的游戏是否适用！
- en: '[https://www.youtube.com/embed/6JriEmiZ1t0](https://www.youtube.com/embed/6JriEmiZ1t0)'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/embed/6JriEmiZ1t0](https://www.youtube.com/embed/6JriEmiZ1t0)'
- en: VIDEO
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 视频
- en: Every time the console prints `[MOMO] OVERHEAD` one of my hooks triggers. This
    essentially means Denuvo intervenes in the execution of the game (that I had to
    patch). This in turn means Denuvo causes at least “some” (non-zero) performance
    overhead during those times.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 每次控制台打印`[MOMO] OVERHEAD`时，我的一个钩子就会触发。这基本上意味着 Denuvo 干预了游戏的执行（我不得不对其进行补丁）。这反过来意味着
    Denuvo 在这些时候至少会造成“一些”（非零）性能开销。
- en: 'One can see that Denuvo does indeed intervene from time to time, but what one
    can clearly see: It doesn’t do that very often, definitely not every frame.'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 人们可以看到 Denuvo 确实不时干预，但可以清楚地看到：它并不经常这样做，绝对不是每一帧。
- en: It’s only once every few seconds. Even less, sometimes it doesn’t do anything.
    Only when major things happen, scene switches, loading screens or similar, the
    logs seem to accumulate.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 它只是每隔几秒钟一次。有时甚至什么都不做。只有在主要事件发生时，场景切换、加载屏幕或类似情况时，日志似乎会累积。
- en: What this exactly tells us is that during regular gameplay, only a small amount
    of Denuvo code is executed compared to during scene switches or loading screens.
    Potential performance issues during those occasions don’t seem relevant to me
    though.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这确切地告诉我们的是，在正常游戏过程中，与场景切换或加载屏幕期间相比，只执行了少量的 Denuvo 代码。然而，在这些情况下可能存在的性能问题对我来说似乎不相关。
- en: In fact was really surprised how few `OVERHEAD` lines were logged, as I expected
    the rumors to be true and tons of lines to be spamed, but this is not case! I
    don’t see any spamming happening, unlike in other DRMs who interact in every frame.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我对记录的`OVERHEAD`行数非常惊讶，因为我预期传言是真实的，会有大量的行被刷屏，但事实并非如此！我没有看到任何刷屏发生，不像其他在每帧中交互的
    DRM。
- en: I don’t know the exact overhead each line implies, but what I know is what I
    had to patch. My hooks only need to change the execution a super tiny bit. While
    that doesn’t mean anything for sure, I conclude that my changes would need to
    be more complex if Denuvo did more.
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道每行的确切开销是多少，但我知道我必须进行补丁。我的钩子只需要微调执行。虽然这并不意味着什么确定的事情，但我得出结论是，如果 Denuvo 做得更多，我的改动就必须更复杂。
- en: What I also don’t know is if there are other pieces of code Denuvo executes
    at that time, that I just didn’t need to hook.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我也不知道在那个时候 Denuvo 是否执行了其他的代码片段，只是我不需要挂钩而已。
- en: However, with 2000 hooks in place, I patched so many checks that I think it
    should at least give a good approximation and estimate.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有了 2000 个钩子，我补丁了这么多检查，我认为这至少可以给出一个很好的近似估计。
- en: To me personally, it tells that Denuvo executes checks so infrequently, that
    the likelyhood of it causing major performance issues seems rather low. In terms
    of the analogy, it might more be in the range of one meeting per year.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对我个人而言，这表明 Denuvo 检查的频率如此之低，以至于它引起主要性能问题的可能性似乎相当低。在类比上，它可能更像是每年一次会议的范围内。
- en: I don’t know whether this is actually the case or not. This requires a different,
    more time consuming measurement, which to me doesn’t seem worth setting up.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道这是否属实。这需要一种不同、更耗时的测量方法，而在我看来，这似乎不值得设立。
- en: Next time I am going to play a Denuvo protected game, I am not going to worry
    about it being the major cause of performance issues.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下次我玩受 Denuvo 保护的游戏时，我不会担心它是性能问题的主要原因。
- en: It seems the protection is very well integrated into the game. Being a DRM developer
    myself, I know this is often a super tough challenge and definitely requires the
    protection to be manually integrated and adapted for the game.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 看来该保护非常好地集成到了游戏中。作为一个 DRM 开发者，我知道这通常是一个非常棘手的挑战，绝对需要手动集成和适应游戏。
- en: Why not measure FPS?[#](#why-not-measure-fps)
  id: totrans-split-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么不测量 FPS？[#](#why-not-measure-fps)
- en: I understand that all the previous test measured is the frequency of Denuvo
    interactions. What’s missing is their magnitude.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我了解之前的所有测试测量的只是 Denuvo 交互的频率。缺少的是它们的大小。
- en: There is unfortunatly no way I could measure that. Looking at the FPS is not
    going to give me any conclusive results either.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我没有办法测量这些开销。单纯看 FPS 也不会给我任何确定的结果。
- en: 'This is the case for two reasons:'
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由于两个原因：
- en: The places Denuvo was integrated into could itself be complex. That means the
    game itself might be performing complex tasks on its own, that could have caused
    drops regardless of Denuvo executing a check at that time. This is likely going
    to be the case, as those are the locations where DRM checks are usually inserted.
  id: totrans-split-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: My hooks cause the overhead. There are many layers of complexity I introduce.
    Using EPT hooks through my hypervisor will cause at least 2 page faults resulting
    in 2 VM exits (due to the permission toggles). Ontop of that, I’m using `OutputDebugString`
    to log to the console, which is very expensive, due to raising an exception. What
    makes this even worse, however, is that I make the game debug itself. This results
    in the exceptions and console logs being synchronously intercepted by the debugger,
    while the game has to wait.
  id: totrans-split-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, looking at FPS and measuring drops is going to yield either two scenarios:'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
- en: There are no drops at all, which means everything is super optimized, or there
    are FPS drops.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
- en: 'In case of FPS drops, the results are going to be inconclusive, as it could
    mean Denuvo is bad, the game is bad, or the most likely scenario: my hooks are
    bad.'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
- en: The goal of my measurement was simply to give people a gut feeling in which
    direction things go, regarding performance.
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
- en: And, to me at least, it shows Denuvo is not that bad. And definitely not as
    bad as other DRMs I have seen.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
- en: Summary[#](#summary)
  id: totrans-split-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This was the last thing I currently had on my bucket list and I’m so happy to
    cross that one off. It is to note that Denuvo could have done things a bit differently
    that would have made my analysis a lot harder.
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
- en: However, I still have to admit that it’s an extremely strong protection. There
    was definitely more than one occasion when I was about to give up. On top of its
    protection, it seems to be very well integrated into the game and I was not able
    to measure any relevant performance overheads caused by it.
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
- en: Developing DRMs is always a super challenging task. Whether the use of DRMs
    is good or not, whether it feeds capitalism or just protects the hard work done
    by developers is something I can’t decide. After all though, I think Denuvo does
    not deserve all the hate it gets.
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
