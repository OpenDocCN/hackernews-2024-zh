- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:10:34'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Metaprogramming in Ruby: It''s All About the Self'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self/](https://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: After writing my last post on Rails plugin idioms, I realized that Ruby metaprogramming,
    at its core, is actually quite simple.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: 'It comes down to the fact that all Ruby code is executed code--there is no
    separate compile or runtime phase. In Ruby, every line of code is executed against
    a particular `self`. Consider the following five snippets:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'All five of these snippets define a `Person.species` that returns `Homo Sapien`.
    Now consider another set of snippets:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'These snippets all define a method called `name` on the Person class. So `Person.new.name`
    will return "Matz". For those familiar with Ruby, this isn''t news. When learning
    about metaprogramming, each of these snippets is presented in isolation: another
    mechanism for getting methods where they "belong". In fact, however, there is
    a single unified reason that all of these snippets work the way they do.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: 'First, it is important to understand how Ruby''s metaclass works. When you
    first learn Ruby, you learn about the concept of the class, and that each object
    in Ruby has one:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`Person` is an instance of `Class`, so any methods added to `Class` are available
    on `Person` as well. What they don''t tell you, however, is that each object in
    Ruby also has its own **metaclass**, a `Class` that can have methods, but is only
    attached to the object itself.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'What''s going on here is that we''re adding the `speak` method to `matz`''s
    **metaclass**, and the `matz` object inherits from its **metaclass** and then
    `Object`. The reason this is somewhat less clear than ideal is that the metaclass
    is invisible in Ruby:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In fact, `matz`''s "class" is its invisible metaclass. We can even get access
    to the metaclass:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: At this point in other articles on this topic, you're probably struggling to
    keep all of the details in your head; it seems as though there are so many rules.
    And what's this `class << matz` thing anyway?
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: 'It turns out that all of these weird rules collapse down into a single concept:
    control over the `self` in a given part of the code. Let''s go back and take a
    look at some of the snippets we looked at earlier:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we are adding the `name` method to the `Person` class. Once we say `class
    Person`, the `self` until the end of the block is the `Person` class itself.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, we''re doing exactly the same thing: adding the `name` method to instances
    of the Person class. In this case, `class_eval` is setting the `self` to `Person`
    until the end of the block. This is all perfectly straight forward when dealing
    with classes, but it''s equally straight forward when dealing with metaclasses:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As in the `matz` example earlier, we are defining the `species` method on `Person`'s
    metaclass. We have not manipulated `self`, but you can see using `def` with an
    object attaches the method to the object's metaclass.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前的`matz`示例中一样，我们在`Person`的元类上定义了`species`方法。我们没有操纵`self`，但是您可以看到在对象上使用`def`附加方法到对象的元类。
- en: '[PRE9]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, we have opened the `Person` class, setting the `self` to `Person` for
    the duration of the block, as in the example above. However, we are defining a
    method on `Person`'s metaclass here, since we're defining the method on an object
    (`self`). Also, you can see that `self.name` while inside the person class is
    identical to `Person.name` while outside it.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们打开了`Person`类，将`self`设置为`Person`，持续整个块的时间，就像上面的例子一样。但是，在这里我们在`Person`的元类上定义了一个方法，因为我们在对象（`self`）上定义了方法。此外，您可以看到，在`person`类内部使用`self.name`与在外部使用`Person.name`是相同的。
- en: '[PRE10]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Ruby provides a syntax for accessing an object's metaclass directly. By doing
    `class << Person`, we are setting `self` to `Person`'s metaclass for the duration
    of the block. As a result, the `species` method is added to `Person`'s metaclass,
    rather than the class itself.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby提供了一种直接访问对象元类的语法。通过`class << Person`，我们将`self`设置为`Person`的元类，持续整个块的时间。因此，`species`方法被添加到`Person`的元类中，而不是类本身。
- en: '[PRE11]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we combine several of the techniques. First, we open `Person`, making
    `self` equal to the `Person` class. Next, we do `class << self`, making `self`
    equal to `Person`'s metaclass. When we then define the `species` method, it is
    defined on `Person`'s metaclass.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们结合了几种技术。首先，我们打开了`Person`，使得`self`等于`Person`类。接下来，我们执行了`class << self`，使得`self`等于`Person`的元类。然后我们定义了`species`方法，该方法被定义在`Person`的元类上。
- en: '[PRE12]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The last case, `instance_eval`, actually does something interesting. It breaks
    apart the `self` into the `self` that is used to execute methods and the `self`
    that is used when new methods are defined. When `instance_eval` is used, new methods
    are defined on the **metaclass**, but the `self` is the object itself.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一种情况，`instance_eval` 实际上做了一些有趣的事情。它将`self`分解为用于执行方法的`self`和用于定义新方法时的`self`。当使用`instance_eval`时，新方法被定义在**元类**上，但`self`是对象本身。
- en: In some of these cases, the multiple ways to achieve the same thing arise naturally
    out of Ruby's semantics. After this explanation, it should be clear that `def
    Person.species`, `class << Person; def species`, and `class Person; class << self;
    def species` aren't three ways to achieve the same thing **by design**, but that
    they arise out of Ruby's flexibility with regard to specifying what `self` is
    at any given point in your program.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，通过多种方式实现相同结果自然而然地出现在Ruby语义中。在这个解释之后，应该清楚`def Person.species`，`class <<
    Person; def species`和`class Person; class << self; def species`并不是**设计上**达到相同目的的三种方式，而是由于Ruby在程序的任何给定点上指定`self`的灵活性而产生的。
- en: On the other hand, `class_eval` is slightly different. Because it take a block,
    rather than act as a keyword, it captures the local variables surrounding it.
    This can provide powerful DSL capabilities, in addition to controlling the `self`
    used in a code block. But other than that, they are exactly identical to the other
    constructs used here.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`class_eval` 有些许不同。因为它接受一个块而不是作为关键字，它捕获周围的局部变量。这不仅可以提供强大的DSL功能，还可以控制代码块中使用的`self`。但除此之外，它们与这里使用的其他结构完全相同。
- en: Finally, `instance_eval` breaks apart the `self` into two parts, while also
    giving you access to local variables defined outside of it.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`instance_eval`将`self`分解为两部分，并允许您访问其外部定义的局部变量。
- en: In the following table, *defines a new scope* means that code inside the block
    does **not** have access to local variables outside of the block.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中，*定义新的作用域* 意味着块内的代码**不能**访问块外的局部变量。
- en: '| mechanism | method resolution | method definition | new scope? |'
  id: totrans-split-40
  prefs: []
  type: TYPE_TB
  zh: '| 机制 | 方法解析 | 方法定义 | 新作用域？ |'
- en: '| --- | --- | --- | --- |'
  id: totrans-split-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| class Person | Person | same | yes |'
  id: totrans-split-42
  prefs: []
  type: TYPE_TB
  zh: '| class Person | Person | 相同 | 是 |'
- en: '| class << Person | Person''s metaclass | same | yes |'
  id: totrans-split-43
  prefs: []
  type: TYPE_TB
  zh: '| class << Person | Person 的元类 | 相同 | 是 |'
- en: '| Person.class_eval | Person | same | no |'
  id: totrans-split-44
  prefs: []
  type: TYPE_TB
  zh: '| Person.class_eval | Person | 相同 | 否 |'
- en: '| Person.instance_eval | Person | Person''s metaclass | no |'
  id: totrans-split-45
  prefs: []
  type: TYPE_TB
  zh: '| Person.instance_eval | Person | Person 的元类 | 否 |'
- en: Also note that `class_eval` is only available to `Modules` (note that Class
    inherits from Module) and is an alias for `module_eval`. Additionally, `instance_exec`,
    which was added to Ruby in 1.8.7, works exactly like `instance_eval`, except that
    it also allows you to send variables into the block.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`class_eval` 仅适用于 `Modules`（请注意，Class 继承自 Module），并且是 `module_eval` 的别名。此外，`instance_exec`
    在 Ruby 1.8.7 中添加，与 `instance_eval` 的作用完全相同，唯一的区别是它还允许你将变量传递到块中。
- en: '**UPDATE:** Thank you to Yugui of the Ruby core team for [correcting the original
    post](http://yugui.jp/articles/846?ref=yehudakatz.com), which ignored the fact
    that `self` is broken into two in the case of `instance_eval`.'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新：** 感谢 Ruby 核心团队的 Yugui [纠正原始发布内容](http://yugui.jp/articles/846?ref=yehudakatz.com)，该内容忽略了在
    `instance_eval` 的情况下 `self` 被分为两部分这一事实。'
