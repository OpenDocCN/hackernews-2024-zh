- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:28:43'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:28:43
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Changelog-Driven Releases
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变更日志驱动的发布
- en: 来源：[https://mathieularose.com/changelog-driven-releases](https://mathieularose.com/changelog-driven-releases)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mathieularose.com/changelog-driven-releases](https://mathieularose.com/changelog-driven-releases)
- en: <main>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main>
- en: <hgroup>
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: Changelog-Driven Releases
  id: totrans-split-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变更日志驱动的发布
- en: April 2024
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年4月
- en: </hgroup>
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: Ever released an untested version of your open-source project or forgot to update
    the version number? We've all been there. Managing releases for open-source projects
    can feel like a tedious, error-prone process, especially when done with a mix
    of manual and automated steps. This article introduces an approach that turns
    your changelog into the ultimate source of truth for releases, making your project's
    releases fully automated
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经发布过未经测试的开源项目版本或者忘记更新版本号？我们都有过这样的经历。管理开源项目的发布可以感觉像是一个繁琐、容易出错的过程，特别是当手动和自动化步骤混合进行时。本文介绍一种方法，将您的变更日志转变为发布的最终真相来源，使您项目的发布完全自动化。
- en: Changelog as the Release Source of Truth
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变更日志作为发布的真相来源
- en: 'Imagine a changelog that serves not just as a history, but also functions as
    a source of truth for releases. This is precisely the approach I adopted for [utt](https://github.com/larose/utt),
    an open source project I maintain. The changelog is kept in reverse chronological
    order, with the most recent version at the top. Here''s a glimpse:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个变更日志不仅作为历史记录，而且作为发布的真相来源。这正是我为 [utt](https://github.com/larose/utt) 采用的方法，这是我维护的一个开源项目。变更日志按照逆时间顺序排列，最新版本位于顶部。这里是一个概述：
- en: '[PRE0]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Unreleased Changes
  id: totrans-split-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 未发布的变更
- en: New changes are added to the changelog in utt with a special `(unreleased)`
    marker. This allows grouping multiple changes before publishing them together.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 新变更在 utt 的变更日志中以特殊的`(unreleased)`标记添加。这允许在一起发布多个变更。
- en: 'Here''s how it works:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的工作原理：
- en: '[PRE1]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Publishing a Release
  id: totrans-split-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布一个版本
- en: 'When ready to publish, I simply replace `(unreleased)` with the desired version
    number and date:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 准备发布时，我只需用所需的版本号和日期替换`(unreleased)`：
- en: '[PRE2]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Merging this change into the master branch triggers the automated release process
    in utt, including running automated tests.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将此更改合并到主分支将触发 utt 中的自动化发布流程，包括运行自动化测试。
- en: Implementation
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现
- en: While the specific implementation in utt uses Python and GitHub Actions (see
    [utt's workflow](https://github.com/larose/utt/blob/e31c7340cd4c151b7a5bfa004b676ca72149978f/.github/workflows/publish.yml)),
    the concepts are adaptable to most programming languages and CI/CD tools.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 utt 中具体实现使用了 Python 和 GitHub Actions（见[utt的工作流](https://github.com/larose/utt/blob/e31c7340cd4c151b7a5bfa004b676ca72149978f/.github/workflows/publish.yml)），但这些概念可以适用于大多数编程语言和
    CI/CD 工具。
- en: The core workflow involves a script that parses the changelog on push events
    to the master branch. If the latest entry is not `(unreleased)`, the script automatically
    updates the version number in relevant project files (e.g., pyproject.toml, version.txt).
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 核心工作流程涉及一个脚本，该脚本在推送事件到主分支时解析变更日志。如果最新条目不是`(unreleased)`，脚本会自动更新相关项目文件中的版本号（例如
    pyproject.toml、version.txt）。
- en: Finally, if the version is not `(unreleased)`, the script attempts to publish
    the new version to PyPI, if it's not already on PyPI. If the version already exists,
    the script skips the publish step to prevent attempting the same version again.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果版本不是`(unreleased)`，脚本将尝试发布新版本到 PyPI，如果还没有发布到 PyPI 的话。如果版本已存在，脚本会跳过发布步骤，以防止再次尝试相同版本。
- en: </main>
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
