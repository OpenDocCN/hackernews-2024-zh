- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:28:43'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Changelog-Driven Releases
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://mathieularose.com/changelog-driven-releases](https://mathieularose.com/changelog-driven-releases)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <main>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: <hgroup>
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: Changelog-Driven Releases
  id: totrans-split-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: April 2024
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: </hgroup>
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Ever released an untested version of your open-source project or forgot to update
    the version number? We've all been there. Managing releases for open-source projects
    can feel like a tedious, error-prone process, especially when done with a mix
    of manual and automated steps. This article introduces an approach that turns
    your changelog into the ultimate source of truth for releases, making your project's
    releases fully automated
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: Changelog as the Release Source of Truth
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Imagine a changelog that serves not just as a history, but also functions as
    a source of truth for releases. This is precisely the approach I adopted for [utt](https://github.com/larose/utt),
    an open source project I maintain. The changelog is kept in reverse chronological
    order, with the most recent version at the top. Here''s a glimpse:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
- en: Unreleased Changes
  id: totrans-split-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New changes are added to the changelog in utt with a special `(unreleased)`
    marker. This allows grouping multiple changes before publishing them together.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how it works:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
- en: Publishing a Release
  id: totrans-split-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When ready to publish, I simply replace `(unreleased)` with the desired version
    number and date:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
- en: Merging this change into the master branch triggers the automated release process
    in utt, including running automated tests.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the specific implementation in utt uses Python and GitHub Actions (see
    [utt's workflow](https://github.com/larose/utt/blob/e31c7340cd4c151b7a5bfa004b676ca72149978f/.github/workflows/publish.yml)),
    the concepts are adaptable to most programming languages and CI/CD tools.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: The core workflow involves a script that parses the changelog on push events
    to the master branch. If the latest entry is not `(unreleased)`, the script automatically
    updates the version number in relevant project files (e.g., pyproject.toml, version.txt).
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if the version is not `(unreleased)`, the script attempts to publish
    the new version to PyPI, if it's not already on PyPI. If the version already exists,
    the script skips the publish step to prevent attempting the same version again.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: </main>
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
