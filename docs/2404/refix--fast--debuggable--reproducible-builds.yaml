- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 12:51:09'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 12:51:09
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'refix: fast, debuggable, reproducible builds'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: refix：快速、可调试、可重现的构建
- en: 来源：[https://yosefk.com/blog/refix-fast-debuggable-reproducible-builds.html](https://yosefk.com/blog/refix-fast-debuggable-reproducible-builds.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://yosefk.com/blog/refix-fast-debuggable-reproducible-builds.html](https://yosefk.com/blog/refix-fast-debuggable-reproducible-builds.html)
- en: 'There''s a simple way to make your builds all of the following:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种简单的方法可以使您的构建实现以下效果：
- en: '**Reproducible**/deterministic - same binaries always built from the same source,
    so you can cache build outputs across users'
  id: totrans-split-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重现**/**确定性** - 总是从相同的源代码构建相同的二进制文件，因此您可以在用户之间缓存构建输出。'
- en: '**Debuggable** - gdb, sanitizers, Valgrind, KCachegrind, etc. find your source
    code effortlessly'
  id: totrans-split-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可调试** - gdb、sanitizers、Valgrind、KCachegrind 等可以轻松找到您的源代码'
- en: '**Fast** - the build time overhead is negligible, even compared to a blazing
    fast linker like [mold](https://github.com/rui314/mold)'
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速** - 构建时间开销可以忽略不计，甚至与如 [mold](https://github.com/rui314/mold) 这样的超快链接器相比。'
- en: What makes it really fast is a small Rust program called [refix](https://github.com/yosefk/refix)
    that post-processes your build outputs (if you don't want to compile from source,
    [here's a static Linux binary](https://yosefk.com/refix/).) Both the program and
    this document are written for the context of C/C++ source code compiled to native
    binaries. But this can work with other languages and binary formats, too, and
    it should be easy to support them in `refix`. (*In fact, it mostly supports them
    already...* you'll see.)
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使其真正快速的是一个名为 [refix](https://github.com/yosefk/refix) 的小型 Rust 程序，它会后处理您的构建输出（如果您不想从源代码编译，[这里有一个静态
    Linux 二进制文件](https://yosefk.com/refix/)）。该程序和本文档都是针对编译为本地二进制的 C/C++ 源代码的上下文编写的。但这也可以适用于其他语言和二进制格式，并且应该很容易在
    `refix` 中支持它们。（*实际上，它已经大部分支持它们了...您会看到的。*）
- en: This "one weird trick" isn't already popular, not because the solution is hard,
    nor because the problem isn't painful. Rather, it's not already popular because
    people widely consider it impossible for builds to be both debuggable and reproducible,
    and standardize on workarounds instead. Since "established practices" are sticky,
    and especially so in the darker corners like build systems, we'll need to discuss
    not only how to solve the problem, but also why solve it at all.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个“奇怪的技巧”之所以不那么流行，并不是因为解决方案很难，也不是因为问题不令人痛苦。相反，它之所以不那么流行，是因为人们普遍认为构建既可以进行调试，又可以进行复现是不可能的，并且通常采用解决方法来标准化。由于“已建立的实践”是粘性的，尤其是在像构建系统这样的较暗的角落，我们不仅需要讨论如何解决问题，还需要讨论为什么要解决它。
- en: The curious case of the disappearing source files
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消失的源文件的好奇案例
- en: 'Why are people so willing to give up their birthright - the effortless access
    to the source code of a debugged program? I mean, build a "Hello, world" cmake
    project, and everything just works: gdb finds your source code, `assert` prints
    a path you can just open in an editor, etc. "Source path" isn''t even a thing.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么人们如此愿意放弃他们的天赋 - 对调试程序的源代码无障碍访问？我的意思是，构建一个“Hello, world” cmake 项目，一切都运行正常：gdb
    可以找到您的源代码，`assert` 打印出一个您可以在编辑器中直接打开的路径等等。“源路径”甚至不是一件事情。
- en: 'Later on, the system grows, and the build slows down. So someone implements
    build artifact caching, in one of several ways:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，系统变得越来越庞大，构建速度变慢。因此，有人实现了构建工件缓存，有几种方式：
- en: A general-purpose distributed build cache, like Bazel's
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个通用的分布式构建缓存，像是 Bazel 的
- en: Something for caching specific kinds of artifacts, like ccache
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为缓存特定类型的工件而设计的系统，比如 ccache
- en: An entirely home-grown system - like running the build of user X in a build
    directory left previously by user Y at the build server's local disk (and hoping
    that their source code is similar enough, so most object files needn't be rebuilt)
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个完全自制的系统 - 就像在构建服务器的本地磁盘上留下用户X的构建目录并希望他们的源代码足够相似，因此大多数目标文件不需要重新构建。
- en: In any case, now that you need caching, you also need reproducible builds. Otherwise,
    you'd cache object files built by different users, and you'd get different file
    paths and other stuff depending on which user built each object file. And we can
    all agree that build caches are important, and pretty much force you to put relative
    paths into debug information and the value of `__FILE__` (and some meaningless
    garbage into `__TIME__`, etc.)
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，现在你需要缓存，你也需要可重现的构建。否则，你会缓存由不同用户构建的目标文件，而会得到依赖于哪个用户构建每个目标文件的不同文件路径和其他东西。我们都同意构建缓存很重要，并且几乎强迫您将相对路径放入调试信息以及`__FILE__`的值（以及一些无意义的垃圾放入`__TIME__`等等）。
- en: But we can *also* agree that the *final binaries* which users actually run should
    have full source paths, right? I mean, I know there are workarounds for finding
    the source files. We'll talk about them later; I'd say they don't really work.
    Of course, the workarounds would be tolerable if they were inevitable. But they
    aren't.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们也可以同意用户实际运行的最终二进制文件应该具有完整的源路径，对吧？我的意思是，我知道有一些解决方案可以找到源文件。我们稍后会讨论它们；我会说它们实际上并没有起作用。当然，如果它们是不可避免的，这些解决方案是可以容忍的。但它们并非如此。
- en: '**Why not fix the binary coming out of the build cache, so it points to the
    absolute path of the source files?** (The build system made an effort to detach
    the binary from the full source path, so that it can be cached. But now that the
    binary has left the cache, we should "refix" it back to the source path of the
    version where it belongs.)'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么不修复从构建缓存中出来的二进制文件，以便它指向源文件的绝对路径？**（构建系统已经努力将二进制文件与完整源路径分离，以便可以缓存它。但现在二进制文件已经离开缓存，我们应该“refix”它回到它所属版本的源路径。）'
- en: We'll look at 3 ways of refixing the binary to the source path - a thesis, an
    anti-thesis and a synthesis, as it were.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论3种重新修复二进制文件到源路径的方式 - 一个论题，一个反论和一个综合体，可以说是这样。
- en: 'Thesis: `debugedit` - civilized, standard and format-aware'
  id: totrans-split-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 论题：`debugedit` - 文明、标准和格式感知
- en: 'A standard tool for this is [debugedit](https://sourceware.org/debugedit/).
    The man page example does exactly the "refixing" we''re looking for:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 用于此目的的标准工具是[debugedit](https://sourceware.org/debugedit/)。手册示例正是我们所寻找的“refixing”示例：
- en: '[PRE0]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Some Linux distributions use `debugedit` for building source files in some arbitrary
    location, and then make the debug info point to wherever source files are installed
    when someone downloads them to debug the program.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一些Linux发行版在某些任意位置使用`debugedit`构建源文件，然后使调试信息指向当某人下载它们以调试程序时安装的位置。
- en: If debugedit works for you, problem solved. It works perfectly when it does.
    However, when I tried it on a 3GB shared object compiled from a C++ code base,
    it ran for 30 seconds, and then crashed. If you, too find debugedit either slow
    or buggy for your needs, read on.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`debugedit`适合您，问题就解决了。它在工作时表现得非常完美。然而，当我在从C++代码库编译的3GB共享对象上尝试它时，它运行了30秒，然后崩溃了。如果您也发现`debugedit`对您的需求来说要么太慢要么有bug，请继续阅读。
- en: 'Anti-thesis: `sed` - nasty, brutish, and short'
  id: totrans-split-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反论：`sed` - 粗暴、简短和残酷
- en: Why is debugedit's job hard (slow and bug-prone)? Mainly because it needs to
    grow or shrink the space reserved for each replaced string. When you do such things,
    you need to move a lot of data (slow), and adjust who-knows-which offset fields
    in the file (bug-prone.)
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么`debugedit`的工作如此困难（慢且容易出错）？主要是因为它需要调整每个替换字符串所保留空间的大小。当你做这种事情时，需要移动大量数据（慢），并调整文件中的谁知道哪个偏移字段（容易出错）。
- en: But what if the strings had the same length? Then we don't need to move or adjust
    anything, and we could, erm, we could replace them with `sed`.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果字符串长度相同怎么办？那么我们就不需要移动或调整任何东西，我们可以用`sed`来替换它们。
- en: 'Here, then, is our nasty, brutish, and short recipe:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们的粗暴简短的步骤：
- en: 'Our post-link step thus becomes:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的后链接步骤变成了：
- en: '[PRE1]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The downside, on top of the source path length limit, is a trace of the brutishness
    making it into the output file. Namely, you're going to see these extra forward
    slashes in some situations. We can't pad a prefix with an invisible character...
    luckily, we can pad it with a character not changing the meaning of the path.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，除了源路径长度限制之外，还有一点粗暴的痕迹会进入输出文件。换句话说，在某些情况下，您将看到这些额外的斜杠。我们不能用不可见字符填充前缀……幸运的是，我们可以用不改变路径意义的字符填充它。
- en: 'On the upside, compared to `debugedit`, the method using `sed` is:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，与`debugedit`相比，使用`sed`的方法：
- en: '**More widely applicable** - it, erm, "supports" all executable and debug information
    formats, as well as archives and object files.'
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更广泛适用** - 它，“嗯”，“支持”所有可执行和调试信息格式，以及存档和目标文件。'
- en: '**More robust** - not affected by input format complexity'
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更健壮** - 不受输入格式复杂性的影响'
- en: '**Faster** - 10 seconds to process the 3GB binary (about the time it takes
    `mold` to link that binary... yes, it''s that good!)'
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快** - 处理3GB二进制文件只需10秒（大约`mold`链接该二进制文件所需时间……是的，它就是这么好！）'
- en: Is this fast enough? Depends on your binary sizes. If yours are big and you
    don't want to effectively double the link time, our next and last method is for
    you.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 足够快吗？这取决于您的二进制文件大小。如果您的二进制文件很大，并且不想有效地将链接时间加倍，我们的下一个和最后一种方法就适合您。
- en: 'Synthesis: `refix` - nasty, brutish, and somewhat format-aware'
  id: totrans-split-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 综合体：`refix` - 粗暴、残酷，但有点格式感知
- en: 'Can we go faster than `sed`? We have two reasons to hope so:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能比`sed`更快吗？我们有两个希望的理由：
- en: '`sed` is unlikely to be optimized specifically for replacing strings of equal
    size; it''s not that common a use case.'
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sed`不太可能被专门优化用于替换相同大小的字符串；这不是很常见的用例。'
- en: We don't actually need to go through the entire file. File paths only appear
    in some of the sections - `.rodata` where strings are kept, and debug info sections.
    If we know enough about the file format to find the sections (which takes very
    little knowledge), we can avoid touching most of the bytes in the file.
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们实际上不需要遍历整个文件。文件路径仅出现在某些部分中 - `.rodata`存放字符串的部分和调试信息部分。如果我们了解文件格式的足够多以找到这些部分（这需要非常少的知识），我们可以避免触及文件中的大部分字节。
- en: But wait, isn't the giant binary built from C++ mostly giant because of the
    debug info? *Yes*, but it turns out that most of the debug info sections *don't
    contain file paths*; only `.debug_line` and `.debug_str` do and these are only
    about 10% of our giant file.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 但等等，巨大的二进制文件主要由调试信息构建的不是因为大吗？*是的*，但事实证明，大多数调试信息部分*不包含文件路径*；只有`.debug_line`和`.debug_str`包含这些内容，这些部分只占我们巨大文件的约10%。
- en: 'So the `refix` program works as follows:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此`refix`程序的工作方式如下：
- en: It `mmap`s the file, since it knows it never needs to move the data and can
    just overwrite the strings in place.
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它`mmap`文件，因为它知道永远不需要移动数据，可以直接在原地覆盖字符串。
- en: For ELF files, it finds `.rodata`, `.debug_line` and `.debug_str`, and searches
    & replaces only within these. This handles executables, shared libraries (`*.so`)
    and object files (`*.o`).
  id: totrans-split-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于ELF文件，它找到`.rodata`、`.debug_line`和`.debug_str`，仅在这些部分内搜索和替换。这处理可执行文件、共享库(`*.so`)和目标文件(`*.o`)。
- en: For `ar` archives, it finds the ELFs within the archive, then the sections it
    cares about within each ELF, and searches & replaces within these. This handles
    `lib*.a`.
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`ar`存档，它找到存档中的ELF文件，然后在每个ELF内部找到它关心的部分，并在这些部分内进行搜索和替换。这处理`lib*.a`。
- en: For files which are neither ELFs nor archives of ELFs, `refix` just replaces
    everywhere as `sed` would, but still faster because it's optimized for the same-sized
    source & destination strings case.
  id: totrans-split-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于既不是ELF格式也不是ELF存档的文件，`refix`像`sed`一样在整个文件中替换，但速度更快，因为它针对源和目标字符串大小相同的情况进行了优化。
- en: 'Thus, `refix` is:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`refix`是：
- en: '**Very fast** - 50 ms on the 3GB binary, and 250 ms on the same binary in "sed
    mode" (meaning, if we remove the ELF magic number, so `refix` is forced to replace
    everywhere and not just in the relevant sections.)'
  id: totrans-split-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非常快** - 在3GB二进制文件上为50毫秒，在相同二进制文件的“sed模式”下为250毫秒（即，如果我们去除ELF魔数，使`refix`强制在所有地方替换而不仅仅是相关部分）。'
- en: '**Widely applicable** - works on any file format where the file prefix isn''t
    compressed and is otherwise "laid bare"'
  id: totrans-split-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**广泛适用** - 适用于文件格式中文件前缀未压缩且"展示明显"'
- en: '**Robust** - while it knows a bit about the binary file format, it''s very,
    very little (enough to find the sections it''s interested in); it''s hundreds
    of lines of code vs `debugedit`''s thousands. And you can always make it run even
    less code by falling back to "sed mode."'
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健壮** - 虽然它对二进制文件格式了解不多，但真的非常少（足够找到它感兴趣的部分）；它是数百行代码，而不是`debugedit`的数千行。而且你总是可以通过回退到“sed模式”来使其运行更少的代码。'
- en: '...with the sole downside being that, same as with sed, you might occasionally
    see the leading slashes in pathnames.'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: '...唯一的缺点是，和`sed`一样，你可能偶尔会看到路径名中的前导斜杠。'
- en: That's it, right? We're done? Well, maybe, but it's not always how it goes.
    People have questions. So here we go.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，对吧？我们完成了？也许吧，但并不总是这样。人们会有疑问。所以我们继续。
- en: Q & A
  id: totrans-split-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问与答
- en: Why do this? We already have a system for finding the source code.
  id: totrans-split-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么要这样做？我们已经有一个查找源代码的系统了。
- en: First of all, it is worth saying that you *shouldn't* have any "system" for
    finding source code, because the tired, stressed developer who was sent a core
    dump to urgently look at is entitled to having at least *this* part work entirely
    effortlessly.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，值得一提的是，你*不应该*有任何用于查找源代码的“系统”，因为那些被送来紧急查看核心转储的疲惫、紧张的开发人员至少应该有*这个*部分能够毫不费力地工作。
- en: 'But also, whatever system you do have ought to have issues:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，无论你拥有什么样的系统，都应该有问题：
- en: If you do not modify the cacheable, reproducible binaries coming out of the
    build system, then by definition your way to find source code must rely on something
    inherent to a given source version, independent of who built it and where. Since
    you're not going to embed the entire source code into the executable, you must
    rely on some sort of version information. What if the program had uncommitted
    changes, which happens in debugging scenarios (someone built a version to test
    and someone else sent a core dump from this version?)
  id: totrans-split-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你不修改通过构建系统生成的可缓存、可重现的二进制文件，那么根据定义，你找到源代码的方式必须依赖于某个特定源代码版本的内在内容，而不是谁构建它和在哪里构建它。由于你不打算将整个源代码嵌入到可执行文件中，你必须依赖某种版本信息。如果程序有未提交的更改，这在调试场景中经常发生（有人构建了一个版本进行测试，然后另一个人发送了此版本的核心转储文件？）
- en: '"Well you''re not supposed to get core dumps from versions with uncommitted
    changes, unless it''s your local version that you haven''t given to anyone but
    are testing locally, so you know which version it is. You should only release
    versions externally thru CI" - so giving anything to anyone to test is now considered
    "releasing externally" and must necessarily go thru CI, and having trouble finding
    the source code is now a punishment for straying from proper procedure? How did
    this discussion, which started at how build caches *speed up* the build, deteriorate
    to the point where we''re telling developers to change how they work, in ways
    which will *slow them down?*'
  id: totrans-split-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “嗯，你不应该从有未提交更改的版本获取核心转储文件，除非它是你的本地版本，你没有把它交给任何人，而是在本地测试，所以你知道它是哪个版本。你应该只通过CI外部发布版本”
    - 所以现在把任何东西交给任何人测试都被认为是“外部发布”，必须通过CI进行，而且找不到源代码现在是因为违反了正确流程的惩罚？这场讨论是如何从讨论构建缓存如何加速构建，堕落到我们告诉开发人员改变工作方式，这种改变会减慢他们的速度的？
- en: But OK, let's say I didn't "release" anything - instead I have 5 local versions
    I'm working with and they go thru test flows and dump core - I'm now supposed
    to guess which core comes from which version, or develop my own "system" to know?
    (Some people actually assume this won't happen because you can't run tests outside
    CI anyway, so you will submit a merge request in order to run them. And they assume
    that because they use some testing infra intertwined with CI infra and most of
    their tests technically can't run outside CI. And perhaps they don't even have
    machines to run on that aren't managed by Jenkins or some such to begin with.
    But that is a horror story for another time. Here I'll just assume that we agree
    that it's good to be able to test changes locally and debug easily.)
  id: totrans-split-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但好吧，假设我没有“发布”任何东西 - 取而代之的是，我有5个本地版本正在处理，并且它们通过测试流程并且转储核心 - 我现在应该猜测哪个核心来自哪个版本，或者开发自己的“系统”来知道？（有些人实际上认为这不会发生，因为你不能在CI之外运行测试，所以你将提交合并请求以便运行它们。他们认为这是因为他们使用与CI基础设施交织在一起的一些测试基础设施，他们的大部分测试在技术上不能在CI之外运行。也许他们甚至没有管理Jenkins或类似软件之外的机器来运行。但这是另一个恐怖故事的内容。在这里，我只是假设我们同意能够在本地测试变更并且轻松调试是件好事。）
- en: In the cases where the version info actually enables you to find the right code,
    the process can be made more tolerable by developing a `gdb` Python extension
    that automatically tells gdb where the source code is based on the embedded version
    info. Do you have this extension and a team maintaining it together with the build
    system?
  id: totrans-split-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在版本信息实际能让你找到正确代码的情况下，通过开发一个`gdb`的Python扩展，根据嵌入的版本信息自动告诉gdb源代码所在的过程可以更加容忍。你有这个扩展和一个与构建系统一起维护它的团队吗？
- en: Do you also have this automated for all the other tools (sanitizers, Valgrind,
    KCachegrind, VTune, whatever)? Do they all even have a way to tell them where
    to look for source code? Is there a team handling this for all users, for every
    new tool used by developers?
  id: totrans-split-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否对所有其他工具（如消毒剂、Valgrind、KCachegrind、VTune等）也进行了自动化？它们是否都有一种方法告诉它们在哪里查找源代码？是否有一个团队为所有用户处理这个问题，为开发人员使用的每个新工具？
- en: I realize that these pain points aren't equally relevant to all organizations,
    and the extent of their relevance depends a lot on the proverbial software lifecycle.
    (They also aren't equally relevant to everyone in a given organization. I claim
    that the people suffering the most from this are the people doing the most debugging,
    and they are quite often very far removed from any team that could ameliorate
    their suffering by improving "the system for finding source code" - so they're
    bound to suffer for a long time.)
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我意识到这些痛点并不适用于所有组织，它们的相关性程度很大程度上取决于传统的软件生命周期。 （它们对于同一组织中的每个人也并不都同等相关。我认为最受此影响的是那些做大量调试工作的人，而他们往往与能够通过改进“查找源代码系统”的团队来减轻他们痛苦的团队相距甚远，所以他们注定要长期受苦。）
- en: 'My main point, however, is that you needn''t have any of these pain points
    *at all*. There''s no tradeoff or price to pay: your build is still reproducible
    and fast. Just make it debuggable with this one weird trick!'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我主要的观点是，你根本不需要遇到这些痛点*。没有任何权衡或代价需要支付：你的构建仍然是可再现的和快速的。只需用这个奇怪的技巧使它可调试即可！
- en: (Wow, I've been quite composed and civil here. I'm very proud of myself. Not
    that it's easy. I have strong *feelings* about this stuff, folks!)
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: （哇，我在这里相当冷静和有礼貌。我为自己感到非常自豪。并不是说这很容易。我对这些事情有强烈的*感觉*，朋友们！）
- en: What about non-reproducible info other than source path (time, build host, etc)?
  id: totrans-split-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 那么除了源路径之外的不可再现信息呢（例如时间、构建主机等）？
- en: 'I''m glad you asked! You can put all the stuff changing with every build into
    a separate section, reserved at build time and filled after link time. You make
    the section with:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我很高兴你问！您可以将每次构建变化的所有内容放入单独的段中，在构建时保留并在链接后填充。您可以通过以下方式创建该段：
- en: '[PRE2]'
  id: totrans-split-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This reserves `SIZE` bytes in a section called `.ver`. It's non-`const` deliberately,
    since if it's `const`, the OS will exclude it from core dumps (why save data to
    disk when it's guaranteed to be exactly the same as the contents of the section
    in the binary?) But you might actually very much want to look at the content of
    this section in a core dump, perhaps before looking at anything else. **For instance,
    the content of this section can help you find the path of the executable that
    dumped this core!**
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在名为 `.ver` 的段中预留 `SIZE` 字节。它故意不是`const`，因为如果是`const`，操作系统将在核心转储中排除它（为什么在保证与二进制文件中段内容完全相同时将数据保存到磁盘呢？但你实际上可能非常想要在核心转储中查看此段内容，也许比查看其他任何内容更重要。**例如，此段内容可以帮助您找到导致该核心转储的可执行文件的路径！**
- en: '(How do you find the section in the core dump without having an executable
    which the debugger could use to tell you the address of `ver`? Like so: `strings
    core | grep MagicOnlyFoundInVer`. Nasty, brutish, and short. The point is, having
    the executable path *in the core dump* is an additional and often major improvement
    on top of having full source paths *in the executable...* because you need to
    find the executable before you can find the source!)'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: （如果没有可供调试器使用以告诉你 `ver` 地址的可执行文件，你如何在核心转储中找到该部分？像这样：`strings core | grep MagicOnlyFoundInVer`。肮脏、野蛮而短暂。关键在于，在核心转储中有可执行路径*是对在可执行文件中具有完整源路径*的额外且通常是重大的改进...因为你需要在找到源代码之前找到可执行文件！）
- en: Additionally, our `ver` variable is deliberately initialized with one `1` followed
    by zeros, since if it's all zeros, then `.ver` will be a "bss" section, the kind
    zeroed by the loader and without space reserved for it in the binary. So you'd
    have nowhere to write your actual, "non-reproducible" version info at a post-link
    step.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们的 `ver` 变量故意初始化为一个后面跟着一串零的 `1`，因为如果全部为零，那么 `.ver` 将成为一个“bss”段，在二进制文件中由加载器清零，并且没有为它保留空间。所以在链接后你将找不到一个地方来写入你实际的、“不可再现”的版本信息。
- en: 'After the linker is done, you can use `objcopy` to replace the content of `.ver`.
    But if you''re using `refix`, which already mmaps the file, you can pass it more
    arguments to replace ELF sections:'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 链接器完成后，您可以使用 `objcopy` 替换 `.ver` 的内容。但如果您使用的是 `refix`，它已经将文件映射，您可以传递更多参数来替换
    ELF 段：
- en: '[PRE3]'
  id: totrans-split-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`refix` will put the content of `file` into `.ver`, or fail if the file doesn''t
    have the right length. (We don''t move stuff around in the ELF, only replace.)'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`refix` 将 `file` 的内容放入 `.ver` 中，如果文件长度不对则失败。（我们不在 ELF 中移动内容，只替换。）'
- en: What about compressed debug sections?
  id: totrans-split-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于压缩的调试段呢？
- en: What about them? I'm not sure why people use them, to be honest. I mean, who
    has *so many* executable files which they don't want to compress as a whole (because
    they need to run them often, I presume), but they do want to compress the debug
    sections to save space? Like, in what scenario *this* is your way to save enough
    space to even worry about it?
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 它们呢？老实说，我不确定人们为什么要使用它们。我的意思是，谁会有那么*多*的可执行文件不希望作为一个整体压缩（因为他们经常需要运行它们，我猜），但他们确实想压缩调试部分以节省空间？在什么场景下*这*是你的节省空间方式，以至于需要为此担心？
- en: But, they could be supported rather nicely, I think, if you really care. You
    wouldn't be able to just blithely `mmap` a file and replace inside it without
    updating any offset field in the file, but I think you could come close, or rather
    stay very far away from doing seriously heavy lifting making this slow and bug-prone.
    Let's chat if you're interested in this.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我认为如果你真的在意的话，他们可能会得到相当不错的支持。你不能只轻松地`mmap`一个文件并在其中替换而不更新文件中的任何偏移字段，但我认为你可以接近一些，或者说要离这些严重的工作越远越好，以避免低效和容易出错。如果你对此感兴趣的话，让我们来聊一聊。
- en: (I think maybe one problem is that some build caches have a file size limit?
    Like, something Bazel-related tops out at 2GB since it's the maximal value of
    the Java int type?.. Let's talk about something else, this is making me very sad.)
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: （我想也许有问题是一些构建缓存有文件大小的限制？比如，一些与 Bazel 相关的东西因为是一个 Java 的 int 类型的最大值，所以上限是 2GB？...让我们聊点别的吧，这让我很难过。）
- en: It's 250 ms on generic data. And you still did the ELF/ar thing to get to 50
    ms. Are you insane?
  id: totrans-split-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它在通用数据上是 250 毫秒。而且你还做了 ELF/ar 的操作，让时间减少到 50 毫秒。你疯了吗？
- en: Well, it's 250 ms on a fast machine with a fast SSD. Some people have files
    on NAS, which can slow down the file access a lot. In such cases, accessing 10x
    less of the `mmap`ed data will mitigate most of the NAS slowdown. You don't really
    want to produce linker output on NAS, but it can be very hard to make the build
    system stop doing that, and I want people stuck in this situation to at least
    have debuggable binaries without waiting even more for the build. So `refix` is
    optimized for a slow filesystem.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，如果在一台快速的机器上和一个快速的 SSD 上，那确实是 250 毫秒。有些人把文件存在 NAS 上，这可能会大大减慢文件访问的速度。在这种情况下，只访问
    `mmap` 的数据的十分之一将大大减轻 NAS 引起的减慢。你真的不希望在 NAS 上生成链接器输出，但是很难让构建系统停止这样做，我希望被困在这种情况的人至少拥有可调试的二进制文件，而不需要等待更久的构建过程。所以
    `refix` 是针对慢文件系统进行了优化。
- en: But also, if it's not too much work, I like things to be fast. [Insane or not](people-can-read-their-managers-mind.html),
    the people who make fast things are usually the people who like fast things, by
    themselves and not due to some compelling reason, and I'm not sure I'm ashamed
    of maybe going overboard a bit; better safe than sorry. Like, I don't parse most
    of the ELF file, which means I don't use the `Elf::parse` method from the `goblin`
    library, but instead I wrote a 30 line function to parse just what I need.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，也许如果它不需要太多工作，我喜欢事情变得快一点。[疯狂与否](people-can-read-their-managers-mind.html)，往往制作快速东西的人通常是那些自己喜欢快速东西的人，而不是因为有什么强制的理由，我不确定我是否为自己可能有些过头而感到羞愧；宁可多一事不做，也不愿感到遗憾。比如，我没有解析
    ELF 文件的大部分内容，这意味着我没有使用 `goblin` 库中的`Elf::parse` 方法，而是编写了一个30行的函数来解析我所需要的部分。
- en: This saves 300-350 ms, which, is it a lot? - maybe not. Will it become much
    more than that on a slower file system? I don't know, it takes less time to optimize
    the problem away than answer this question. Did I think of slow file systems when
    doing it? - not as much as I was just annoyed that my original C++ program, which
    the Rust program is a "clean room" open source implementation of, takes 150 ms
    and the Rust one takes about 400 ms. Am I happy now that I got it down to 50 ms?
    Indeed!
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这节省了 300-350 ms，这算很多吗？也许不是。在一个更慢的文件系统上会变得更多吗？我不知道，优化掉问题所需的时间比回答这个问题更短。在做这件事情时，我是否考虑到了慢文件系统？-
    不像我只是讨厌我的原来的 C++ 程序，而 Rust 程序是一个 "clean room" 的开源实现，耗时150毫秒，而 Rust 程序大约需要 400
    毫秒。现在我把它降到了 50 毫秒，我现在满意！
- en: (Why is Rust faster? Not sure; I think, firstly, GNU `memmem` is slower than
    `memchr::memmem::Finder`, and secondly, I didn't use TBB in C++ but did use Rayon
    in Rust, because the speedup is marginal - you bottleneck on I/O - and I don't
    want to complicate the build for small gains, but in Rust it's not complicated
    - just `cargo add rayon`.)
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: （为什么 Rust 更快呢？我不确定；我觉得首先，GNU 的 `memmem` 比 `memchr::memmem::Finder` 更慢，其次，我在
    C++ 中没有使用 TBB，但在 Rust 中使用了 Rayon，因为加速不大 - 你的瓶颈在 I/O 上 - 我不想为了小收益而使构建变复杂，但在 Rust
    中这并不复杂 - 只需`cargo add rayon`。）
- en: It often takes less time to just do the efficient thing than it takes to argue
    about the amount it would save relatively to the inefficient thing. (But it's
    still more time than just going ahead and doing the inefficient thing without
    arguing. But even that is not always the case. But most people who make fast things
    will usually just go for the efficient thing when they see it regardless if it's
    the case, I think. IME the people who always argue about whether optimizations
    are worth it make big and slow things in the end.)
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 相对于争论相对于低效率事物可以节省的金额，通常花费的时间更少。 （但仍然比仅仅继续执行低效率事物而不争论更多的时间。但即使如此，也不总是如此。但大多数制造快速事物的人通常只会在看到时选择高效事物，不管情况如何，我认为。根据我的经验，总是争论优化是否值得的人最终会制造出大而慢的东西。）
- en: I'm as crazy as you, and I want this speedup for non-ELF executable formats.
  id: totrans-split-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我和你一样疯狂，我希望这种速度提升适用于非ELF可执行格式。
- en: Let's chat. The `goblin` library probably supports your format - shouldn't take
    more than 100-150 LOC to handle this in `refix`.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们聊聊吧。`goblin`库可能支持您的格式——在`refix`中处理这个不应该超过100-150 LOC。
- en: Which binaries should I run this stuff on?
  id: totrans-split-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应该在哪些二进制文件上运行这些东西？
- en: Anything delivered "outside the build system" for the use of people (who run
    programs / load shared libraries) or other build systems (which link code against
    static libraries / object files.) And nothing "inside the build system", or it
    will ruin caching.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 任何交付给人们使用的“构建系统之外”的内容（运行程序/加载共享库的人）或其他构建系统（将代码链接到静态库/对象文件）都不需要在“构建系统之内”，否则将破坏缓存。
- en: I hope for your sake that you have a monolithic build where you build everything
    from source. But I wouldn't count on it; quite often team A builds libraries for
    team B, which gets them from Artifactory or something wonderful like that. In
    that case, you might start out with a bug where some libraries are shipped with
    the MAGIC as their source prefix instead of the real thing. This is easy to fix
    though, and someone might even remind you with "what's this weird MAGIC stuff?"
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望出于你的利益，你有一个单体构建，其中你从源代码构建所有东西。但我不会指望它；团队A经常为团队B构建库，后者从Artifactory或类似的地方获取它们。在这种情况下，您可能会遇到一个错误，其中一些库的源前缀是MAGIC而不是真实内容。不过这很容易修复，甚至有人可能会提醒您：“这些奇怪的MAGIC东西是什么？”
- en: (Somehow nobody used to ask "what's `/local/clone-87fg12eb/src`", when *that*
    was the prefix instead of MAGIC. Note that even if you have this bug and keep
    MAGIC in some library files, *nobody is worse off* than previously when it was
    `/local/clone-87fg12eb/src`. And once you fix it, they'll be *better* off.)
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: （不知何故，过去从未有人问过“`/local/clone-87fg12eb/src`是什么”，当*那*是前缀而不是MAGIC时。请注意，即使您有这个bug并在一些库文件中保留MAGIC，*没有人会比之前更糟*，当它是`/local/clone-87fg12eb/src`时。一旦您解决了它，他们会*更好*。）
- en: CI removes the source after building it. What should the destination source
    prefix be?..
  id: totrans-split-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CI在构建后删除源代码。目标源前缀应该是什么？..
- en: 'And here I was, thinking that it''s the build cache not liking absolute paths
    that was the problem... It turns out that we have a bigger problems: the source
    is just nowhere to be found! `/local/clone-87fg12eb/src` is gone forever!'
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 而我之前还以为是构建缓存不喜欢绝对路径是问题所在...结果我们有更大的问题：源代码就是找不到了！`/local/clone-87fg12eb/src`永远消失了！
- en: But actually, it makes sense for CI to build on the local disk in a temporary
    directory. In parallel with building, CI can export the code to a globally accessible
    NAS directory. And at the end of the build, CI can refix the binaries to that
    NAS directory. It's not good to *build* from NAS (or to NAS) - it's not only slow,
    but fails in the worst ways under load - which is why a temporary local directory
    makes sense. But NAS is a great place for *debugging tools* to get source from
    - widely accessible with no effort for the user.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际上，对CI来说，在本地磁盘的临时目录中构建是有意义的。在并行构建时，CI可以将代码导出到全局可访问的NAS目录中。在构建结束时，CI可以将二进制文件转移到该NAS目录中。从NAS（或到NAS）构建并不明智——不仅速度慢，而且在负载高的情况下会以最糟糕的方式失败——这就是为什么临时本地目录是有意义的。但NAS是获取源代码的*调试工具*的好地方——对用户来说无需任何努力就可以广泛访问。
- en: Many organizations decide against NAS source exports, because it would be too
    easy for developers. Instead you're supposed to download the source via HTTP,
    which is much more scalable than NAS, thus solving an important problem you don't
    have; plus, you can make yourself some coffee while the entire source code (of
    which you'll only need the handful of files you'll actually open in the debugger)
    is downloaded and decompressed.
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组织决定不使用NAS源导出，因为这对开发者来说太容易了。相反，你应该通过HTTP下载源代码，这比NAS要可扩展得多，从而解决了一个你没有的重要问题；此外，你还可以在下载和解压整个源代码时自己冲杯咖啡。
- en: In that case, your destination source prefix should be wherever the user downloads
    the files to. Decide on any local path independent of the user name, and with
    version information encoded in it, so multiple versions can be downloaded concurrently.
    Have a nice cup of coffee!
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这样的话，您的目标源前缀应该是用户下载文件的位置。选择任何本地路径，与用户名无关，并编码版本信息，因此可以同时下载多个版本。喝杯好咖啡！
- en: What should the root path length limit be?
  id: totrans-split-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 根路径长度限制应该是多少？
- en: 100 bytes.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 100字节。
- en: Our CI produces output in `/filer/kubernetes/docker/gitlab/jenkins/pre-commit/department/team/developer/branch-name/test-suite-name/repo/`,
    which is 110 bytes.
  id: totrans-split-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们的CI在`/filer/kubernetes/docker/gitlab/jenkins/pre-commit/department/team/developer/branch-name/test-suite-name/repo/`路径中生成了110字节的输出。
- en: Great! Now you have a reason to ask them to shorten it. I'm sure they'll get
    to it in a quarter or two, if you keep reminding.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在你有理由要求他们缩短它。我相信如果你继续提醒，他们会在一个季度或两个季度内解决这个问题。
- en: Our CEO's preschooler works as a developer, insists on a 200 byte prefix, and
    won't tolerate the build failing.
  id: totrans-split-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们的CEO的学龄前儿童作为开发者工作，坚持要求200字节的前缀，并且不容忍构建失败。
- en: Then truncate the path without failing the build. He won't find the source code
    easily, but he can't find it *already today.* **If there's one thing fixing the
    problem won't do, it's making anyone worse off.** It *can't* make you worse off,
    since the current situation leaves it nowhere worse to take you. It could only
    possibly take you from *never* being able to easily find the source to *sometimes*,
    if not always, being able to find it.
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后截断路径而不导致构建失败。他找不到源代码会很困难，但他*今天已经找不到*了。**如果有一件事情修复问题不会做的，那就是让任何人变得更糟。** *它*不会让你变得更糟，因为当前的情况已经无法让你更糟。它只可能从*从未*能够轻松找到源到*有时*，如果不是总是，能找到源。
- en: Conclusion
  id: totrans-split-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Use `refix`, `sed` or `debugedit` to make your fast, reproducible builds also
    effortlessly debuggable, so that it's trivial to find the source given an executable
    - and the executable given a core dump.
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`refix`、`sed`或`debugedit`使您的快速、可复现的构建也轻松调试，这样在给定可执行文件时找到源代码就变得微不足道——在给定核心转储时找到可执行文件也是如此。
- en: And please don't tell me it's OK for developers to roam the Earth looking for
    source code instead. It hurts my feelings!
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 请不要告诉我开发者可以在地球上漫游寻找源代码是可以接受的。这伤害了我的感情！
- en: '*Thanks to Dan Luu for reviewing a draft of this post.*'
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢Dan Luu审核本文的草稿。*'
