- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 12:48:37'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 12:48:37'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: There were no ancient computers and it's fine
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 古代并不存在计算机，这没什么大不了的。
- en: 来源：[https://lcamtuf.substack.com/p/there-were-no-ancient-computers-and](https://lcamtuf.substack.com/p/there-were-no-ancient-computers-and)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://lcamtuf.substack.com/p/there-were-no-ancient-computers-and](https://lcamtuf.substack.com/p/there-were-no-ancient-computers-and)
- en: 'Last August, in an article about the [history of the calculator](https://lcamtuf.substack.com/p/a-brief-history-of-counting-stuff),
    I opened with the following quip:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 去年8月，在一篇关于[计算器历史](https://lcamtuf.substack.com/p/a-brief-history-of-counting-stuff)的文章中，我以以下俏皮话开头：
- en: '*"I find it difficult to talk about the history of the computer. The actual
    record is dreadfully short: almost nothing of consequence happened before the
    year 1935\. We keep looking for a better story, but we inevitably end up grasping
    at straws.*'
  id: totrans-split-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"我发现很难谈论计算机的历史。实际记录极短：1935年之前几乎没有什么重要的事情发生。我们一直在寻找更好的故事，但最终总是在徒劳无功。*'
- en: '*Just look at what we’ve done so far. The “father of the computer” is no longer
    Konrad Zuse (Z1, 1938) or John Mauchly (ENIAC, 1943). Somehow, we pivoted to Charles
    Babbage — a 19th century polymath who never constructed such a device, and had
    no luck inspiring others to try. Not content with this injustice, we also turned
    “computing” into a meaningless word. On Wikipedia, the timeline of computer hardware
    includes mechanical clocks, dolls, weaving looms, and a miniature chariot from
    910 BCE. It’s historical synthesis run amok."*'
  id: totrans-split-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*看看我们到目前为止所做的事情。 “计算机之父”已经不再是康拉德·祖斯（Z1，1938年）或约翰·莫奇利（ENIAC，1943年）。不知何故，我们转向查尔斯·巴比奇——一个19世纪的博学家，他从未制造过这样的设备，也没有激励别人去尝试。对于这种不公正，我们还将“计算”变成了一个毫无意义的词。在维基百科上，计算机硬件的时间轴包括了910年前的机械钟、玩偶、织布机和一个小型战车。这是历史综合的失控。”*'
- en: 'My point was simple: if a cuckoo clock or a differential gear qualifies as
    a “proto-computer”, what *doesn’t* meet the bar? Almost any man-made tool performs
    some sort of a calculation. Let’s take a crowbar: it’s an instrument for multiplying
    force by a preset amount. Sure, it might not be Turing-complete, but it’s getting
    there!'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我的观点很简单：如果布谷钟或微分齿轮算作“原型计算机”，那么什么 *不* 符合标准？几乎任何人造工具都执行某种计算。让我们以撬杠为例：它是一种将力量乘以预设量的工具。当然，它可能不是图灵完备的，但它正在朝这个方向发展！
- en: I jest, but I wasn’t arguing for semantic purity just for the sake of it. My
    concern was that when we paint with overly broad strokes, much of the important
    detail is lost. Consider that Charles Babbage — the seemingly undisputed father
    of modern computing — had zero actual impact on the development of the computer;
    it can be quite illuminating to ponder why. Heck, even Alan Turing and John von
    Neumann — the two intellectual titans who laid the theoretical groundwork for
    computer science — probably weren’t the ones who made the early computers “click.”
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是开玩笑，但我并不是为了纯粹的语义纯净而争辩。我关心的是，当我们笼统地描绘时，很多重要的细节都会丢失。考虑查尔斯·巴比奇——看似无可争议的现代计算之父——实际上对计算机的发展毫无实际影响；思考一下为什么是相当有启发性的。甚至艾伦·图灵和约翰·冯·诺依曼——这两位理论上奠定了计算机科学基础的智者——也可能不是使早期计算机“启动”的人。
- en: 'Perhaps my beef is with the terminology itself: the word “computer” is imprecise
    and its meaning has evolved over time. That said, in contemporary usage, there’s
    no doubt that it means something more than a differential gear, an abacus, or
    a slide rule.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我的问题在于术语本身： “计算机”这个词不精确，其含义随时间演变。尽管如此，在当代的使用中，毫无疑问它的意义不仅限于微分齿轮、算盘或滑尺。
- en: '*A computer? Thales Model A, circa 1912\. From author’s collection.*'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*计算机？塔利斯A型，约1912年。作者收藏。*'
- en: 'Yet, absent a clear definition, many historians apply the term to just about
    any calculating device they see. In this view, we’ve been using computers for
    millennia. The designs ranged from simple mechanical registers (such as the abacus),
    to automated lookup tables (slide rule), to clockwork contraptions such as the
    four-operation calculator pictured above. Move over, Charles Babbage: the general
    operating principle behind that last device has been known at least since the
    1600s — although it wasn’t until the late 19th century that we learned how to
    mass-produce such mechanisms.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在没有明确定义的情况下，许多历史学家将这个术语应用于他们所看到的任何计算设备。从这个角度来看，我们已经使用计算机数千年了。这些设计从简单的机械注册（如算盘）到自动化查找表（滑尺），再到钟表机构，如上图所示的四则运算计算器。查尔斯·巴比奇，请让位：最后一个设备背后的通用操作原理至少自17世纪以来就已知——尽管直到19世纪末我们才学会如何大规模生产这些机制。
- en: Again, it’s not that I wish to pointlessly debate semantics; my problem with
    this approach is that it obscures the nature of the revolution that happened after
    1935\. A better definition of a computer would include not just the words “designed
    for calculation” but also “programmable.” In other words, the device should consist
    not only of an arithmetic logic unit (ALU), but also a sequencing mechanism that
    activates different subsystems — and passes data around — according to a flexible,
    user-specified plan.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我并非无谓地争论语义；我对这种方法的问题在于它掩盖了 1935 年后发生的革命的本质。对计算机更好的定义应该不仅包括“设计用于计算”的话语，还应包括“可编程”。换言之，设备不仅应包括算术逻辑单元（ALU），还应包括根据灵活的用户指定计划激活不同子系统并传递数据的排序机制。
- en: By that standard, all the non-programmable calculating devices — from notched
    sticks to the Atanasoff-Berry “computer” of 1942 — ought to be disqualified. The
    first true computers would probably be the creations of Konrad Zuse, followed
    by Howard Aiken’s Harvard Mark I; both of these designs cropped up in the late
    1930s.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以此标准，所有非可编程计算设备——从凹槽棍棒到 1942 年的 Atanasoff-Berry “计算机”——都应被取消资格。第一台真正的计算机可能是
    Konrad Zuse 的创作，接着是 Howard Aiken 的哈佛 Mark I；这两种设计都出现在 1930 年代后期。
- en: 'Some computer science nerds might also be tempted to add “Turing-complete”
    to the list of requirements. By that criterion, the ENIAC — constructed by John
    Mauchly and J. Presper Eckert in 1945 — gets to claim primacy. That said, it’s
    a wonky metric: many devices that are Turing-complete aren’t practical computers.
    Conversely, Konrad Zuse’s Z3 — although not 100% Turing-complete in the conventional
    sense — was unmistakably the real deal.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一些计算机科学书呆子可能也会被诱惑加入“图灵完备性”到要求清单中。按照这个标准，由 John Mauchly 和 J. Presper Eckert 于
    1945 年构建的 ENIAC 可以宣称首创。话虽如此，这是一个奇怪的度量标准：许多图灵完备的设备并非实际计算机。相比之下，虽然 Konrad Zuse 的
    Z3 在传统意义上并非 100% 图灵完备，但毫无疑问是真正的实物。
- en: '*Opcode handling in Zuse’s Z3\. From the Konrad Zuse Internet Archive.*'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*Zuse 的 Z3 中的操作码处理。来自 Konrad Zuse 互联网档案馆。*'
- en: The popular answer to this question is rather hand-wavy. You learn about Charles
    Babbage as the inventor of the programmable computer, and then Alan Turing and
    John von Neumann as the duo who teamed up (?) to make Mr. Babbage’s dream come
    true. Such pervasive is the cult of the three personalities that even in the Wikipedia
    article on Harvard Mark I, Mr. Babbage and Mr. von Neumann are name-dropped before
    any mention Mr. Aiken, the actual inventor of the device.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的普遍答案相当模糊。你会听说查尔斯·巴贝奇是可编程计算机的发明者，然后是艾伦·图灵和约翰·冯·诺伊曼这对组合（？）使巴贝奇先生的梦想成真。这三位人物的崇拜如此普及，以至于在哈佛
    Mark I 的维基百科文章中，巴贝奇先生和冯·诺伊曼先生在提到艾肯先生之前就被名字提起。
- en: Of course, this story doesn’t quite add up. Charles Babbage was a successful
    designer of advanced and elegant mechanical calculators, but such devices existed
    long before his time. So did commercially-successful programmable mechanisms,
    notably including the punch-card-operated weaving loom designed by Joseph Marie
    Jacquard in 1804.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个说法并不完全正确。查尔斯·巴贝奇是先进而优雅的机械计算器的成功设计者，但在他之前这样的设备就已存在。商业上成功的可编程机制也是如此，尤其是约瑟夫·玛丽·雅卡尔于
    1804 年设计的打孔卡片织布机。
- en: The bottleneck wasn’t conceptual; it was technical. We knew how to do calculation
    and we knew how to do the sequencing of operations; the challenge was the effortless
    propagation of data from one portion of the device to another. This was nearly
    impossible to do with sufficient flexibility, reliability, and scalability in
    the domain of sprockets, cams, and pawls. It’s the reason why Mr. Babbage’s Analytical
    Engine proved to be nothing but a pipe dream — and why even today, we don’t see
    copies of his grand design popping up left and right.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 瓶颈不是概念上的，而是技术上的。我们知道如何做计算，也知道如何进行操作的排序；挑战在于数据在设备的不同部分之间的无缝传播。在齿轮、凸轮和爪环领域内，实现足够的灵活性、可靠性和可扩展性几乎是不可能的。这就是为什么巴贝奇的分析引擎被证明只是一个空想的原因，也是为什么即使今天，我们也不会看到他宏伟设计的复制品频繁出现的原因。
- en: It follows that some of the most important names in early computing might not
    be Charles Babbage, Alan Turing, or John von Neumann — but the people who came
    up with early forms of electronic memory and thus made it simple to store and
    propagate data within increasingly complex calculating devices. In particular,
    the inventors of the humble yet enduring flip-flop circuit — William Eccles and
    Frank Wilfred Jordan — deserve far more recognition than they have ever gotten
    for their work.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由此可见，在早期计算机领域，一些最重要的名字可能不是查尔斯·巴贝奇、艾伦·图灵或约翰·冯·诺伊曼，而是提出早期电子存储器形式，并因此简化了在日益复杂的计算设备内存储和传播数据的人。特别是，谦卑却持久的触发器电路的发明者——威廉·埃克尔斯和弗兰克·威尔弗雷德·乔丹——应该得到比他们迄今为止得到的更多认可。
- en: 'Well, that’s a good question! Perhaps it’s this: in a world where the era of
    programmable computers begins with Zuse’s Z1 or Harvard Mark I, there’s still
    plenty of interesting stories to tell. In a world where it all goes back to the
    wheel and the pointed stick, the actual challenges and the ingenuity that went
    into overcoming the issues is easy to miss.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这是一个很好的问题！也许答案是：在一个以祖斯的Z1或哈佛马克I为起点的可编程计算机时代开始的世界中，仍然有许多有趣的故事可以讲述。在一个一切都可以追溯到轮子和尖端棍棒的世界中，我们往往容易忽视解决问题所需的实际挑战和创造力。
- en: 'Of course, I get it: we want to be inspired. We imagine Charles Babbage as
    a misunderstood Victorian scientist in the mold of Nikola Tesla. We lament the
    fate of Alan Turing, a WWII hero betrayed by his country. We look up to Ada Lovelace,
    a role model for women engineers around the globe. These are good stories; we
    should keep telling them. In comparison, Konrad Zuse’s Nazi-era biopic might not
    be a shoo-in.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我明白：我们想要被启发。我们想象查尔斯·巴贝奇是尼古拉·特斯拉模式下的被误解的维多利亚时代科学家。我们为艾伦·图灵的命运感到惋惜，他是二战时期的英雄，却被他的国家背叛。我们尊敬阿达·洛芙莱斯，她是全球女性工程师的榜样。这些都是好故事；我们应该继续讲述它们。相比之下，康拉德·祖斯的纳粹时代传记可能并不是一个显而易见的选择。
- en: '*A microscope photo of Ampex high-density core memory, 1970\. By author.*'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*1970年安培公司高密度磁芯存储显微镜照片，作者提供。*'
- en: '*For a another pretty solid if provocative take on the history of computing,
    check out [Rob Graham’s “deprogrammer”](https://cybersect.substack.com/p/a-computer-history-deprogrammer).
    For more of my articles about electronics, [click here](https://lcamtuf.coredump.cx/offsite.shtml).*'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*关于计算机历史的另一个相当扎实而又富有挑衅性的观点，请参阅[罗布·格雷厄姆的“解编程者”](https://cybersect.substack.com/p/a-computer-history-deprogrammer)。要了解更多关于电子的文章，请[点击这里](https://lcamtuf.coredump.cx/offsite.shtml)。*'
