["```\nCREATE TABLE \"simple\" (\n\tid uuid NOT NULL PRIMARY KEY,\n\tfoo character varying,\n);\n```", "```\nUPDATE public.simple SET foo = 'baz' WHERE ID = 'b18df779-0cae-43bc-9f4b-8efe571abd8a';\n```", "```\n{\n  \"before\": {\n    \"id\": \"b18df779-0cae-43bc-9f4b-8efe571abd8a\",\n    \"foo\": \"bar\",\n  },\n  \"after\": {\n    \"id\": \"b18df779-0cae-43bc-9f4b-8efe571abd8a\",\n    \"foo\": \"baz\"\n  },\n  \"source\": {\n    \"version\": \"2.5.0.Final\",\n    \"connector\": \"postgresql\",\n    \"name\": \"pg\",\n    \"ts_ms\": 1707250399964,\n    \"snapshot\": \"false\",\n    \"db\": \"production\",\n    \"sequence\": \"[\\\"573123170952\\\",\\\"573123068760\\\"]\",\n    \"schema\": \"public\",\n    \"table\": \"simple\",\n    \"txId\": 55986537,\n    \"lsn\": 573123068760,\n    \"xmin\": null\n  },\n  \"op\": \"u\",\n  \"ts_ms\": 1707250400533,\n  \"transaction\": null\n}\n```", "```\nbrew install --cask docker\n```", "```\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64\nsudo install minikube-darwin-amd64 /usr/local/bin/minikube\n```", "```\nminikube start --nodes 8 #docker-desktop will need to be running\n```", "```\nminikube kubectl -- get pods -A\n```", "```\ncat > pg-values.yaml <<'EOF'\nprimary:\n  extendedConfiguration: |-\n    wal_level = logical\n    shared_buffers = 256MB\nEOF\n\nhelm install blog oci://registry-1.docker.io/bitnamicharts/postgresql -f pg-values.yaml \n```", "```\nexport POSTGRES_PASSWORD=$(kubectl get secret --namespace default blog-postgresql -o jsonpath=\"{.data.postgres-password}\" | base64 -d)\n\nkubectl run blog-postgresql-client --rm --tty -i --restart='Never' --namespace default --image docker.io/bitnami/postgresql:16.2.0-debian-12-r6 --env=\"PGPASSWORD=$POSTGRES_PASSWORD\" \\\n      --command -- psql --host blog-postgresql -U postgres -d postgres -p 5432\n```", "```\n# after connecting to the PostgreSQL instance, create the table      \nCREATE TABLE simple (\nid uuid NOT NULL PRIMARY KEY,\nfoo character varying);\n\nALTER TABLE public.simple REPLICA IDENTITY FULL;\n```", "```\nCREATE USER blog WITH REPLICATION PASSWORD 'your_password' LOGIN;\n```", "```\nhelm repo add jetstack https://charts.jetstack.io\nhelm repo add redpanda https://charts.redpanda.com\nhelm repo update\nhelm install cert-manager jetstack/cert-manager  --set installCRDs=true --namespace cert-manager  --create-namespace\n```", "```\n helm install redpanda redpanda/redpanda \\\n  --namespace redpanda \\\n  --create-namespace \\\n  --set statefulset.initContainers.setDataDirOwnership.enabled=true \\\n  --set image.tag=v23.3.4-arm64 \\\n  --set tls.enabled=false \\\n  --set statefulset.replicas=1 \\\n  --set auth.sasl.enabled=true \\\n  --set \"auth.sasl.users[0].name=superuser\" \\\n  --set \"auth.sasl.users[0].password=changethispassword\" \\\n  --set external.domain=customredpandadomain.local \n```", "```\nbrew install redpanda-data/tap/redpanda\n```", "```\nalias local-rpk=\"kubectl --namespace redpanda exec -i -t redpanda-0 -c redpanda -- rpk -X user=superuser -X pass=changethispassword -X sasl.mechanism=SCRAM-SHA-512\"\n```", "```\nlocal-rpk cluster info\n\nCLUSTER\n=======\nredpanda.69087c28-e59b-4b25-bee2-bd199e6a9ab2\n\nBROKERS\n=======\nID    HOST                                             PORT\n0*    redpanda-0.redpanda.redpanda.svc.cluster.local.  9093\n\nTOPICS\n======\nNAME      PARTITIONS  REPLICAS\n_schemas  1           1\n```", "```\nlocal-rpk acl user create blog -p changethispassword --mechanism scram-sha-256\n```", "```\nlocal-rpk acl create --allow-principal User:blog \\\n  --operation all  --topic '*' --group '*'\n```", "```\nkubectl create namespace kafka-connect\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kafka-connect\n  labels:\n    app: kafka-connect\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kafka-connect\n  template:\n    metadata:\n      labels:\n        app: kafka-connect\n    spec:\n      containers:\n      - name: kafka-connect\n        image: debezium/connect:2.5.2.Final # Use the appropriate Debezium version\n        env:\n        - name: LOG_LEVEL\n          value: INFO\n        - name: BOOTSTRAP_SERVERS\n          value: \"redpanda-0.redpanda.redpanda.svc.cluster.local.:9093\" # Replace with your Kafka broker address\n        - name: GROUP_ID\n          value: \"blog-connect-cluster\" # Replace with your group ID\n        - name: CONFIG_STORAGE_TOPIC\n          value: \"connect-configs\"\n        - name: OFFSET_STORAGE_TOPIC\n          value: \"connect-offsets\"\n        - name: STATUS_STORAGE_TOPIC\n          value: \"connect-status\"\n        - name: CONNECT_SECURITY_PROTOCOL # additional values https://kafka.apache.org/24/javadoc/index.html?org/apache/kafka/common/security/auth/SecurityProtocol.html\n          value: \"SASL_PLAINTEXT\"\n        - name: CONNECT_SASL_MECHANISM # additional values https://docs.confluent.io/platform/current/kafka/authentication_sasl/auth-sasl-overview.html\n          value: \"SCRAM-SHA-256\"\n        - name: CONNECT_SASL_JAAS_CONFIG # additional values https://docs.confluent.io/platform/current/kafka/authentication_sasl/index.html\n          value: \"org.apache.kafka.common.security.scram.ScramLoginModule required username='blog' password='changethispassword';\"\n        - name: CONNECT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM\n          value: \"\" # Set to an empty string to disable hostname verification\n        - name: PRODUCER_SECURITY_PROTOCOL\n          value: \"SASL_PLAINTEXT\"\n        - name: PRODUCER_SASL_MECHANISM\n          value: \"SCRAM-SHA-256\"\n        - name: PRODUCER_SASL_JAAS_CONFIG\n          value: \"org.apache.kafka.common.security.scram.ScramLoginModule required username='blog' password='changethispassword';\"\n        - name: PRODUCER_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM\n          value: \"\" # Set to an empty string to disable hostname verification\n        ports:\n        - containerPort: 8083 \n```", "```\nkubectl apply -n kafka-connect -f kafka-connect-pod.yaml\n```", "```\ndeployment.apps/kafka-connect configured\n```", "```\n2024-03-03 23:40:40,484 INFO   ||  Successfully logged in.   [org.apache.kafka.common.security.authenticator.AbstractLogin]\n2024-03-03 23:40:40,504 INFO   ||  Kafka version: 3.6.1   [org.apache.kafka.common.utils.AppInfoParser]\n2024-03-03 23:40:40,504 INFO   ||  Kafka commitId: 5e3c2b738d253ff5   [org.apache.kafka.common.utils.AppInfoParser]\n2024-03-03 23:40:40,504 INFO   ||  Kafka startTimeMs: 1709509240504   [org.apache.kafka.common.utils.AppInfoParser]\n2024-03-03 23:40:40,508 INFO   ||  Kafka Connect worker initialization took 5851ms   [org.apache.kafka.connect.cli.AbstractConnectCli]\n2024-03-03 23:40:40,508 INFO   ||  Kafka Connect starting   [org.apache.kafka.connect.runtime.Connect]\n2024-03-03 23:40:40,510 INFO   ||  Initializing REST resources   [org.apache.kafka.connect.runtime.rest.RestServer]\n2024-03-03 23:40:40,510 INFO   ||  [Worker clientId=connect-1, groupId=propel-connect-cluster] Herder starting   [org.apache.kafka.connect.runtime.distributed.DistributedHerder]\n2024-03-03 23:40:40,510 INFO   ||  Worker starting   [org.apache.kafka.connect.runtime.Worker]\n```", "```\nlocal-rpk topic list\n\nNAME             PARTITIONS  REPLICAS\n_schemas         1           1\nconnect-configs  1           1\nconnect-offsets  25          1\nconnect-status   5           1\n```", "```\nlocal-rpk topic create blog.public.simple\n```", "```\nexport POSTGRES_PASSWORD=$(kubectl get secret --namespace default blog-postgresql -o jsonpath=\"{.data.postgres-password}\" | base64 -d)\necho $POSTGRES_PASSWORD\n```", "```\n# Run this in a separate terminal to get the Pod name\nkubectl get pod -n kafka-connect -o wide\nNAME                             READY   STATUS    RESTARTS      AGE   IP             NODE       NOMINATED NODE   READINESS GATES\nkafka-connect-5498764f4f-qw5qg   1/1     Running   1 (34m ago)   35m   10.244.0.253   minikube   <none>           <none>\n\n# Run this command to forward the traffic to local host\nkubectl port-forward -n kafka-connect pod/kafka-connect-5498764f4f-qw5qg 8083:8083\n\nForwarding from 127.0.0.1:8083 -> 8083\n```", "```\ncurl -X POST http://127.0.0.1:8083/connectors -H \"Content-Type: application/json\" --data '{\n                \"name\": \"debezium-postgres-connector\",\n                \"config\": {\n                  \"connector.class\": \"io.debezium.connector.postgresql.PostgresConnector\",\n                  \"after.state.only\": \"false\",\n                  \"tasks.max\": \"1\",\n                  \"plugin.name\": \"pgoutput\",\n                  \"database.hostname\": \"blog-postgresql.default.svc.cluster.local\",\n                  \"database.port\": \"5432\",\n                  \"database.user\": \"postgres\",\n                  \"database.password\": \"<replace>\",\n                  \"database.dbname\": \"postgres\",\n                  \"topic.prefix\": \"blog\",\n                  \"publication.autocreate.mode\": \"filtered\",\n                  \"table.include.list\": \"public.simple\",\n                  \"key.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\n                  \"value.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\n                  \"key.converter.schemas.enable\": \"false\",\n                  \"value.converter.schemas.enable\": \"false\",\n                  \"producer.override.sasl.mechanism\": \"SCRAM-SHA-256\",\n                  \"producer.override.security.protocol\": \"SASL_PLAINTEXT\",\n                  \"producer.override.sasl.jaas.config\": \"org.apache.kafka.common.security.scram.ScramLoginModule required username='blog' password='changethispassword';\",\n                  \"producer.override.ssl.endpoint.identification.algorithm\": \"\",\n                  \"producer.override.tls.insecure.skip.verify\": \"true\"\n                }\n}'\n```", "```\nkubectl run blog-postgresql-client --rm --tty -i --restart='Never' --namespace default --image docker.io/bitnami/postgresql:16.2.0-debian-12-r6 --env=\"PGPASSWORD=$POSTGRES_PASSWORD\" \\\n      --command -- psql --host blog-postgresql -U postgres -d postgres -p 5432\n```", "```\nINSERT INTO public.simple VALUES (\n'9cb52b2a-8ef2-4987-8856-c79a1b2c2f71',\n'foo'\n);\n\nINSERT INTO public.simple values(\n'9cb52b2a-8ef2-4987-8856-c79a1b2c2f73',\n'bar'\n);\n```", "```\nlocal-rpk topic consume blog.public.simple --num 1\n\n{\n  \"topic\": \"blog.public.simple\",\n  \"key\": \"{\\\"id\\\":\\\"9cb52b2a-8ef2-4987-8856-c79a1b2c2f71\\\"}\",\n  \"value\": \"{\\\"before\\\":null,\\\"after\\\":{\\\"id\\\":\\\"9cb52b2a-8ef2-4987-8856-c79a1b2c2f71\\\",\\\"foo\\\":\\\"foo\\\"},\\\"source\\\":{\\\"version\\\":\\\"2.5.2.Final\\\",\\\"connector\\\":\\\"postgresql\\\",\\\"name\\\":\\\"blog\\\",\\\"ts_ms\\\":1710755794795,\\\"snapshot\\\":\\\"false\\\",\\\"db\\\":\\\"postgres\\\",\\\"sequence\\\":\\\"[null,\\\\\\\"22407328\\\\\\\"]\\\",\\\"schema\\\":\\\"public\\\",\\\"table\\\":\\\"simple\\\",\\\"txId\\\":747,\\\"lsn\\\":22407328,\\\"xmin\\\":null},\\\"op\\\":\\\"c\\\",\\\"ts_ms\\\":1710755795117,\\\"transaction\\\":null}\",\n  \"timestamp\": 1710755795494,\n  \"partition\": 0,\n  \"offset\": 0\n}\n```", "```\nbrew install --cask localxpose\nbrew install kcat\n```", "```\nloclx tunnel tcp --port 31092 -t 127.0.0.1:9093\n```", "```\nexternal:\n  enabled: true\n  type: NodePort\n  addresses:\n    - <domain>\n```", "```\nhelm upgrade --install redpanda redpanda/redpanda --namespace redpanda --create-namespace --values external-dns.yaml --reuse-values --wait\n```", "```\nkubectl port-forward -n redpanda svc/redpanda-external 9093:9094\n```", "```\nkcat -L -b us.loclx.io:31092 -X sasl.username=blog -X sasl.password=changethispassword -X sasl.mechanism=SCRAM-SHA-256 -X security.protocol=SASL_PLAINTEXT\n```", "```\ncurl 'https://api.us-east-2.propeldata.com/graphql' \\\n-H 'Authorization: Bearer <TOKEN>' \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d '{\n  \"query\": \"query DataGridQuery($input: DataGridInput!) {\n    dataGrid(input: $input) {\n      headers\n      rows\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n        startCursor\n      }\n    }\n  }\",\n  \"variables\": {\n    \"input\": {\n      \"dataPool\": {\n        \"id\": \"<DATAPOOL_ID>\"\n      },\n      \"columns\": [\n        \"_key\",\n        \"_timestamp\",\n        \"_propel_payload\"\n      ],\n      \"orderByColumn\": 1,\n      \"sort\": \"DESC\",\n      \"filters\": [],\n      \"first\": 5\n    }\n  }\n}'\n```", "```\n{\n  \"dataGrid\": {\n    \"headers\": [\n      \"_key\",\n      \"_timestamp\",\n      \"_propel_payload\"\n    ],\n    \"rows\": [\n      [\n        \"{\\\"id\\\":\\\"9cb52b2a-8ef2-4987-8856-c79a1b2c2f73\\\"}\",\n        \"2024-03-18T09:56:37Z\",\n        \"{\\\"before\\\":null,\\\"after\\\":{\\\"id\\\":\\\"9cb52b2a-8ef2-4987-8856-c79a1b2c2f73\\\",\\\"foo\\\":\\\"bar\\\"},\\\"source\\\":{\\\"version\\\":\\\"2.5.2.Final\\\",\\\"connector\\\":\\\"postgresql\\\",\\\"name\\\":\\\"blog\\\",\\\"ts_ms\\\":1710755796308,\\\"snapshot\\\":\\\"false\\\",\\\"db\\\":\\\"postgres\\\",\\\"sequence\\\":\\\"[\\\\\\\"22407624\\\\\\\",\\\\\\\"22407680\\\\\\\"]\\\",\\\"schema\\\":\\\"public\\\",\\\"table\\\":\\\"simple\\\",\\\"txId\\\":748,\\\"lsn\\\":22407680,\\\"xmin\\\":null},\\\"op\\\":\\\"c\\\",\\\"ts_ms\\\":1710755796782,\\\"transaction\\\":null}\"\n      ],\n      [\n        \"{\\\"id\\\":\\\"9cb52b2a-8ef2-4987-8856-c79a1b2c2f71\\\"}\",\n        \"2024-03-18T09:56:35Z\",\n        \"{\\\"before\\\":null,\\\"after\\\":{\\\"id\\\":\\\"9cb52b2a-8ef2-4987-8856-c79a1b2c2f71\\\",\\\"foo\\\":\\\"foo\\\"},\\\"source\\\":{\\\"version\\\":\\\"2.5.2.Final\\\",\\\"connector\\\":\\\"postgresql\\\",\\\"name\\\":\\\"blog\\\",\\\"ts_ms\\\":1710755794795,\\\"snapshot\\\":\\\"false\\\",\\\"db\\\":\\\"postgres\\\",\\\"sequence\\\":\\\"[null,\\\\\\\"22407328\\\\\\\"]\\\",\\\"schema\\\":\\\"public\\\",\\\"table\\\":\\\"simple\\\",\\\"txId\\\":747,\\\"lsn\\\":22407328,\\\"xmin\\\":null},\\\"op\\\":\\\"c\\\",\\\"ts_ms\\\":1710755795117,\\\"transaction\\\":null}\"\n      ]\n    ],\n    \"pageInfo\": {\n      \"hasNextPage\": false,\n      \"hasPreviousPage\": false,\n      \"endCursor\": \"eyJvZmZzZXQiOjJ9\",\n      \"startCursor\": \"eyJvZmZzZXQiOjB9\"\n    }\n  }\n}\n```", "```\n# Connec to the database\nkubectl run blog-postgresql-client --rm --tty -i --restart='Never' --namespace default --image docker.io/bitnami/postgresql:16.2.0-debian-12-r6 --env=\"PGPASSWORD=$POSTGRES_PASSWORD\" \\\n      --command -- psql --host blog-postgresql -U postgres -d postgres -p 5432\n\nUPDATE public.simple SET foo = 'baz' WHERE id = '9cb52b2a-8ef2-4987-8856-c79a1b2c2f73';\n```", "```\n{\n  \"dataGrid\": {\n    \"headers\": [\n      \"_key\",\n      \"_timestamp\",\n      \"_propel_payload\"\n    ],\n    \"rows\": [\n      [\n        \"{\\\"id\\\":\\\"9cb52b2a-8ef2-4987-8856-c79a1b2c2f73\\\"}\",\n        \"2024-03-18T09:56:37Z\",\n        \"{\\\"before\\\":null,\\\"after\\\":{\\\"id\\\":\\\"9cb52b2a-8ef2-4987-8856-c79a1b2c2f73\\\",\\\"foo\\\":\\\"bar\\\"},\\\"source\\\":{\\\"version\\\":\\\"2.5.2.Final\\\",\\\"connector\\\":\\\"postgresql\\\",\\\"name\\\":\\\"blog\\\",\\\"ts_ms\\\":1710755796308,\\\"snapshot\\\":\\\"false\\\",\\\"db\\\":\\\"postgres\\\",\\\"sequence\\\":\\\"[\\\\\\\"22407624\\\\\\\",\\\\\\\"22407680\\\\\\\"]\\\",\\\"schema\\\":\\\"public\\\",\\\"table\\\":\\\"simple\\\",\\\"txId\\\":748,\\\"lsn\\\":22407680,\\\"xmin\\\":null},\\\"op\\\":\\\"c\\\",\\\"ts_ms\\\":1710755796782,\\\"transaction\\\":null}\"\n      ],\n      [\n        \"{\\\"id\\\":\\\"9cb52b2a-8ef2-4987-8856-c79a1b2c2f73\\\"}\",\n        \"2024-03-18T17:38:53Z\",\n        \"{\\\"before\\\":{\\\"id\\\":\\\"9cb52b2a-8ef2-4987-8856-c79a1b2c2f73\\\",\\\"foo\\\":\\\"bar\\\"},\\\"after\\\":{\\\"id\\\":\\\"9cb52b2a-8ef2-4987-8856-c79a1b2c2f73\\\",\\\"foo\\\":\\\"baz\\\"},\\\"source\\\":{\\\"version\\\":\\\"2.5.2.Final\\\",\\\"connector\\\":\\\"postgresql\\\",\\\"name\\\":\\\"blog\\\",\\\"ts_ms\\\":1710783532893,\\\"snapshot\\\":\\\"false\\\",\\\"db\\\":\\\"postgres\\\",\\\"sequence\\\":\\\"[\\\\\\\"22407880\\\\\\\",\\\\\\\"22408168\\\\\\\"]\\\",\\\"schema\\\":\\\"public\\\",\\\"table\\\":\\\"simple\\\",\\\"txId\\\":749,\\\"lsn\\\":22408168,\\\"xmin\\\":null},\\\"op\\\":\\\"u\\\",\\\"ts_ms\\\":1710783533138,\\\"transaction\\\":null}\"\n      ],\n      [\n        \"{\\\"id\\\":\\\"9cb52b2a-8ef2-4987-8856-c79a1b2c2f71\\\"}\",\n        \"2024-03-18T09:56:35Z\",\n        \"{\\\"before\\\":null,\\\"after\\\":{\\\"id\\\":\\\"9cb52b2a-8ef2-4987-8856-c79a1b2c2f71\\\",\\\"foo\\\":\\\"foo\\\"},\\\"source\\\":{\\\"version\\\":\\\"2.5.2.Final\\\",\\\"connector\\\":\\\"postgresql\\\",\\\"name\\\":\\\"blog\\\",\\\"ts_ms\\\":1710755794795,\\\"snapshot\\\":\\\"false\\\",\\\"db\\\":\\\"postgres\\\",\\\"sequence\\\":\\\"[null,\\\\\\\"22407328\\\\\\\"]\\\",\\\"schema\\\":\\\"public\\\",\\\"table\\\":\\\"simple\\\",\\\"txId\\\":747,\\\"lsn\\\":22407328,\\\"xmin\\\":null},\\\"op\\\":\\\"c\\\",\\\"ts_ms\\\":1710755795117,\\\"transaction\\\":null}\"\n      ]\n    ],\n    \"pageInfo\": {\n      \"hasNextPage\": false,\n      \"hasPreviousPage\": false,\n      \"endCursor\": \"eyJvZmZzZXQiOjJ9\",\n      \"startCursor\": \"eyJvZmZzZXQiOjB9\"\n    }\n  }\n}\n```", "```\nSELECT \n    \"blog-post\".\"_propel_payload.after.id\" AS id,\n    \"_timestamp\" AS timestamp,\n    \"blog-post\".\"_propel_payload.after.foo\" AS foo\nFROM \n    \"blog-post\" # the name of the Kafka Data Pool from above\nWHERE \n    \"blog-post\".\"_propel_payload.op\" = 'c' OR \n    \"blog-post\".\"_propel_payload.op\" = 'u';\n```", "```\n{\n  \"data\": {\n    \"createMaterializedView\": {\n      \"materializedView\": {\n        \"id\": \"MAT01HSY2DHN9HWKD1QAG0B9C115J\",\n        \"sql\": \"SELECT \\\"blog-post\\\".\\\"_propel_payload.after.id\\\" as id, \\\"_timestamp\\\" as timestamp, \\\"blog-post\\\".\\\"_propel_payload.after.foo\\\" as foo FROM \\\"blog-post\\\" WHERE \\\"blog-post\\\".\\\"_propel_payload.op\\\"='c' OR \\\"blog-post\\\".\\\"_propel_payload.op\\\" ='u'\",\n        \"destination\": {\n          \"id\": \"DPO01HSY2DHTZZDRZP2BDZAMX6PKP\",\n          \"uniqueName\": \"Data Pool for Materialized View MAT01HSY2DHN9HWKD1QAG0B9C115J\",\n          \"tableSettings\": {\n            \"partitionBy\": null,\n            \"primaryKey\": null,\n            \"orderBy\": [\n              \"\\\"id\\\"\"\n            ]\n          }\n        },\n        \"source\": {\n          \"id\": \"DPO01HS98EGS0W40ARYHBR2SDVR5X\",\n          \"uniqueName\": \"blog-post\",\n          \"tableSettings\": {\n            \"partitionBy\": null,\n            \"primaryKey\": null,\n            \"orderBy\": null\n          }\n        }\n      }\n    }\n  }\n}\n```", "```\n curl 'https://api.us-east-2.propeldata.com/graphql' \\\n-H 'Authorization: Bearer <TOKEN>' \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d '{\n  \"query\": \"query DataGridQuery($input: DataGridInput!) { dataGrid(input: $input) { headers rows pageInfo { hasNextPage hasPreviousPage endCursor startCursor } } }\",\n  \"variables\": {\n    \"input\": {\n      \"dataPool\": {\n        \"id\": \"<DATAPOOL_ID>\"\n      },\n      \"columns\": [\n        \"id\",\n        \"foo\"\n      ],\n      \"orderByColumn\": 1,\n      \"sort\": \"DESC\",\n      \"filters\": [],\n      \"first\": 5\n    }\n  }\n}'\n```", "```\n{\n  \"dataGrid\": {\n    \"headers\": [\n      \"id\",\n      \"foo\"\n    ],\n    \"rows\": [\n      [\n        \"9cb52b2a-8ef2-4987-8856-c79a1b2c2f73\",\n        \"baz\"\n      ],\n      [\n        \"9cb52b2a-8ef2-4987-8856-c79a1b2c2f71\",\n        \"foo\"\n      ]\n    ],\n    \"pageInfo\": {\n      \"hasNextPage\": false,\n      \"hasPreviousPage\": false,\n      \"endCursor\": \"eyJvZmZzZXQiOjF9\",\n      \"startCursor\": \"eyJvZmZzZXQiOjB9\"\n    }\n  }\n}\n```", "```\nexport CLIENT_ID=<CLIENT_ID> \\\nexport CLIENT_SECRET=<CLIENT_SECRET> \\\nexport TOKEN_HOST=https://auth.us-east-2.propeldata.com \\\nexport TOKEN_PATH=/oauth2/token\n```", "```\nnpm install simple-oauth2 cli-table\n```", "```\nconst { ClientCredentials } = require(\"simple-oauth2\");\nconst Table = require(\"cli-table\");\n\nasync function getToken() {\n  const config = {\n    client: {\n      id: process.env.CLIENT_ID,\n      secret: process.env.CLIENT_SECRET,\n    },\n    auth: {\n      tokenHost: process.env.TOKEN_HOST,\n      tokenPath: process.env.TOKEN_PATH,\n    },\n  };\n\n  const client = new ClientCredentials(config);\n\n  try {\n    const accessToken = await client.getToken();\n    return accessToken.token.access_token;\n  } catch (error) {\n    console.error(\"Access Token Error\", error.message);\n    return null;\n  }\n}\n\nasync function fetchDataGrid(accessToken) {\n  const url = \"https://api.us-east-2.propeldata.com/graphql\";\n  const query = `\n    query DataGridQuery($input: DataGridInput!) {\n      dataGrid(input: $input) {\n        headers\n        rows\n      }\n    }\n  `;\n  const variables = {\n    input: {\n      dataPool: { id: \"<DATAPOOL_ID>\" },\n      columns: [\"id\", \"foo\"],\n      sort: \"ASC\",\n      first: 5,\n      last: 5,\n    },\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        query,\n        variables,\n      }),\n    });\n\n    const data = await response.json();\n    return data.data.dataGrid;\n  } catch (error) {\n    console.error(\"Error fetching data grid:\", error.message);\n    return null;\n  }\n}\n\nasync function main() {\n  const accessToken = await getToken();\n\n  if (!accessToken) {\n    console.error(\"Failed to retrieve access token\");\n    return;\n  }\n\n  const dataGrid = await fetchDataGrid(accessToken);\n\n  if (!dataGrid) {\n    console.error(\"Failed to fetch data grid\");\n    return;\n  }\n\n  const { headers, rows } = dataGrid;\n\n  const table = new Table({\n    head: headers,\n  });\n\n  rows.forEach((row) => {\n    table.push(row);\n  });\n\n  console.log(table.toString());\n}\n\nmain(); \n```", "```\nnode script.js                                                                                                                 <aws:prod-propel>\n┌──────────────────────────────────────┬─────┐\n│ id                                   │ foo │\n├──────────────────────────────────────┼─────┤\n│ 9cb52b2a-8ef2-4987-8856-c79a1b2c2f71 │ foo │\n├──────────────────────────────────────┼─────┤\n│ 9cb52b2a-8ef2-4987-8856-c79a1b2c2f73 │ baz │\n└──────────────────────────────────────┴─────┘\n```"]