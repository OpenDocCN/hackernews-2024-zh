- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:38:45'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Good Ideas in Computer Science ・ Daniel Hooper
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://danielchasehooper.com/posts/good-ideas-in-cs/](https://danielchasehooper.com/posts/good-ideas-in-cs/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Programmers love arguing for their favorite technologies. C++ vs Rust. Mac
    vs PC. These arguments overshadow the victories of Computer Science — the ideas
    that we all agree on. To unearth these ideas, I recently [asked a simple question](https://twitter.com/DanielcHooper/status/1778795850107424827)
    on Twitter/X:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: What ideas in computer science are universally considered good?
  id: totrans-split-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'By “universally considered good” I mean they *aren’t* debated. Ideas so widespread
    and effective that you might not even think of them as being invented. Each idea
    may not be suitable in all situations, but you won’t find a programmer that thinks
    you should *never* use them. I intentionally focus on *ideas*, not *implementations*.
    For example: Unix contains many good ideas, but is not on the list because it
    is an implementation.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s my list, including the year each idea appeared:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: 'Intentionally excluded:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Garbage Collection
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many examples of teams fighting the garbage collector to hit performance
    goals^(. The [CPU/Memory performance gap](http://gec.di.uminho.pt/discip/minf/ac0102/1000Gap_Proc-Mem_Speed.pdf)
    necessitates control over memory to have performant code.)
  id: totrans-split-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Databases
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Databases are more than just one idea, with many ways to combine those ideas
    into a “database shape”. Some good ideas in databases: [Structured query language](https://en.wikipedia.org/wiki/SQL),
    [B-trees](https://en.wikipedia.org/wiki/B-tree), [ACID transactions](https://en.wikipedia.org/wiki/ACID).'
  id: totrans-split-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Other data structures and algorithms
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are too many to list. Few are as universal as arrays and hashmaps, which
    appear in almost all programs.
  id: totrans-split-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Object Oriented Programming
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a large group of programmers that do not consider Object Oriented Programming
    good^(. I recommend [data oriented design](https://github.com/dbartolini/data-oriented-design)
    as a replacement worldview.)
  id: totrans-split-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By 1974, 50 years ago, we had most of what we call modern computing. Today’s
    fundamentals are the same — a C programmer from 1974 would feel at home on a modern
    computer except for the alien-like speed. I hope we have new ideas that in 50
    years will be universally considered good.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: Discuss on [Twitter](https://twitter.com/DanielcHooper/status/1782446647047311466)
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: Discuss on [Lobste.rs](https://lobste.rs/s/kruxyr/good_ideas_computer_science)
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
