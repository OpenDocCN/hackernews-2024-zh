- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:00:23'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:00:23'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Currying - HaskellWiki
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数柯里化 - HaskellWiki
- en: 来源：[https://wiki.haskell.org/Currying](https://wiki.haskell.org/Currying)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://wiki.haskell.org/Currying](https://wiki.haskell.org/Currying)
- en: Currying is the process of transforming a function that takes multiple arguments
    in a tuple as its argument, into a function that takes just a single argument
    and returns another function which accepts further arguments, one by one, that
    the original function would receive in the rest of that tuple.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 函数柯里化是将一个接受元组作为参数的多参数函数转换为一个仅接受单个参数并返回另一个函数的过程，后者逐个接受原始函数在元组中接收的其余参数。
- en: <haskell>[PRE0]
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: <haskell>[PRE0]
- en: is the **curried** form of
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 是**柯里化**形式的
- en: <haskell>You can convert these two types in either directions with the Prelude
    functions <hask>`curry` and <hask>`uncurry`.</hask></hask>
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: <haskell>你可以使用 Prelude 中的函数 <hask>`curry` 和 <hask>`uncurry` 在这两种类型之间进行转换。</hask></hask>
- en: <haskell>[PRE1]
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: <haskell>[PRE1]
- en: Both forms are equally expressive. It holds
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种形式同样具有表达能力。它确实成立
- en: <haskell>however the curried form is usually more convenient because it allows
    [partial application](/Partial_application "Partial application").
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: <haskell>然而，柯里化形式通常更方便，因为它允许进行[部分应用](/Partial_application "Partial application")。
- en: 'In Haskell, *all* functions are considered curried: That is, *all functions
    in Haskell take just one argument.* This is mostly hidden in notation, and so
    may not be apparent to a new Haskeller. It can be said that arrows in the types
    notation associate *to the right*, so that <hask>`f :: a -> b -> c` is really
    <hask>`f :: a -> (b -> c)`. Functional application, correspondingly, associates
    *to the left*: <hask>`f x y` is really <hask>`(f x) y`, so the types fit.</hask></hask></hask></hask>'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '在 Haskell 中，*所有* 函数都被视为柯里化的：也就是说，*Haskell 中的所有函数都只接受一个参数*。这在符号表示中大多是隐藏的，因此对于新手来说可能不明显。可以说类型符号中的箭头是向*右*关联的，所以
    <hask>`f :: a -> b -> c` 实际上是 <hask>`f :: a -> (b -> c)`。相应地，函数应用是向*左*关联的： <hask>`f
    x y` 实际上是 <hask>`(f x) y`，因此类型吻合。</hask></hask></hask></hask>'
- en: As an illustration, let's take the function <haskell>[PRE2]
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 作为例证，让我们看一个函数 <haskell>[PRE2]
- en: which performs integer division. The expression <hask>`div 11 2` unsurprisingly
    evaluates to <hask>`5`.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它执行整数除法。表达式 <hask>`div 11 2` 可以预计地计算为 <hask>`5`。
- en: But there's more going on here than immediately meets the untrained eye. It
    could be a two-part process.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但这里发生的比初看起来更复杂。它可能是一个两部分的过程。
- en: On its own, <hask>`div 11` is a function of type <hask>`Int -> Int`. Then that
    resulting function can be applied to the value <hask>`2`, so <hask>`(div 11) 2`
    yields <hask>`5`. Of course an optimizing compiler will probably handle that whole
    expression at once, but conceptually that's what's going on.</hask></hask></hask></hask></hask>
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 单独使用 <hask>`div 11` 是一个类型为 <hask>`Int -> Int` 的函数。然后，该结果函数可以应用到值 <hask>`2` 上，因此
    <hask>`(div 11) 2` 得到 <hask>`5`。当然，优化编译器可能会一次处理整个表达式，但在概念上，这就是发生的事情。</hask></hask></hask></hask></hask>
- en: 'You''ll notice that the notation for types reflects this: you can read <hask>`Int
    -> Int -> Int` incorrectly as "takes two <hask>`Int`s and returns an <hask>`Int`",
    but what it''s *really* saying is "takes an <hask>`Int` and returns something
    of the type <hask>`Int -> Int`" -- that is, it returns a function that takes an
    <hask>`Int` and returns an <hask>`Int`. (One can write the type as <hask>`Int
    x Int -> Int` if you really mean the former -- but since all functions in Haskell
    are curried, that''s not legal Haskell. Alternatively, using tuples, you can write
    <hask>`(Int, Int) -> Int`, but keep in mind that the tuple constructor <hask>`(,)`
    itself can be curried.)</hask></hask></hask></hask></hask></hask></hask></hask></hask></hask>'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到类型的符号表示反映了这一点：你可能会错误地将 <hask>`Int -> Int -> Int` 读作“接受两个 <hask>`Int` 并返回一个
    <hask>`Int`”，但它*真正*表示的是“接受一个 <hask>`Int` 并返回类型为 <hask>`Int -> Int` 的东西”-- 也就是说，它返回一个接受一个
    <hask>`Int` 并返回一个 <hask>`Int` 的函数。 （如果你确实指的是前者，可以写成 <hask>`Int x Int -> Int`，但由于
    Haskell 中所有函数都是柯里化的，这在 Haskell 中是非法的。或者，可以使用元组，你可以写成 <hask>`(Int, Int) -> Int`，但要记住元组构造器
    <hask>`(,)` 本身也可以被柯里化。）</hask></hask></hask></hask></hask></hask></hask></hask></hask></hask>
- en: 'Much of the time, currying can be ignored by the new programmer. The major
    advantage of considering all functions as curried is theoretical: formal proofs
    are easier when all functions are treated uniformly (one argument in, one result
    out). Having said that, there *are* Haskell idioms and techniques for which you
    need to understand currying.'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分情况下，新程序员可以忽略柯里化。将所有函数视为柯里化的主要优势在于理论上：当所有函数统一处理（一个参数进，一个结果出）时，形式化证明更容易。话虽如此，有*Haskell*惯用法和技术需要理解柯里化。
- en: See
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: Exercises
  id: totrans-split-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Simplify <hask>`curry id`</hask>
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化 `<hask>`curry id`</hask>`
- en: Simplify <hask>`uncurry const`</hask>
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化 `<hask>`uncurry const`</hask>`
- en: Express <hask>`snd` using <hask>`curry` or <hask>`uncurry` and other basic Prelude
    functions and without lambdas</hask></hask></hask>
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基本的 Prelude 函数和不使用 lambda 表达式，表达 `<hask>`snd` 使用 `curry` 或 `uncurry` 和其他基本
    Prelude 函数</hask>`
- en: Write the function <hask>`\(x,y) -> (y,x)` without lambda and with only Prelude
    functions</hask></hask></hask></haskell></haskell></haskell></haskell></haskell>
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写出函数 `<hask>`\(x,y) -> (y,x)` 不使用 lambda，仅使用 Prelude 函数
