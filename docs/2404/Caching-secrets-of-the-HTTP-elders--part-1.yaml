- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:17:23'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:17:23'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Caching secrets of the HTTP elders, part 1
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存HTTP前辈的秘密，第1部分
- en: 来源：[https://csvbase.com/blog/8](https://csvbase.com/blog/8)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://csvbase.com/blog/8](https://csvbase.com/blog/8)
- en: There is no hard limit on table size in csvbase. Within reason, they can be
    as big as you like. And if you go off and run your own instance you can do whatever
    you want. Big Data isn't always Better Data, but it's nice to have the option.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在csvbase中，表格大小没有硬性限制。在合理范围内，可以任意大。如果你自己运行实例，可以做任何你想做的事情。大数据并不总是更好的数据，但有这个选择是很好的。
- en: That said, wouldn't it be nice to have those tables cached, so that if you read
    it twice you don't have to fully download it again the second time?
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，如果那些表格可以被缓存，那不是挺好的吗？这样，如果你第二次阅读，就不必再完全下载它了。
- en: Cache-control header - with max-age
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cache-control头部 - 带有max-age
- en: 'Perhaps this HTTP server header?:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 或许是这个HTTP服务器头？：
- en: '[PRE0]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above header says "keep using this file for a day [86400 seconds] before
    re-downloading it". Great!
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 上述标题说“在重新下载之前继续使用这个文件一天[86400秒]”。太棒了！
- en: Hang on though. If someone changes that table you'd be stuck looking at the
    old version for up to 24 hours. Being [eventually consistent](https://doi.org/10.1145%2F1435417.1435432)
    was once very trendy. But it's no longer hip - even Amazon S3 [no longer returns
    stale data](https://aws.amazon.com/blogs/aws/amazon-s3-update-strong-read-after-write-consistency/).
    So serving stale data just won't do for csvbase.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下。如果有人更改了那个表格，你可能会被困在旧版本上最多24小时。[最终一致性](https://doi.org/10.1145%2F1435417.1435432)曾经非常时髦。但现在不再流行
    - 即使是Amazon S3 [也不再返回过时数据](https://aws.amazon.com/blogs/aws/amazon-s3-update-strong-read-after-write-consistency/)。因此，对于csvbase来说，提供过时数据是不行的。
- en: HTTP/1.1 has a lot of caching features
  id: totrans-split-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP/1.1有许多缓存功能
- en: 'The elden ones [thought deeply about caching](https://doi.org/10.1109/ICDE.2000.839382).
    DNS [is a cache](https://www.internethalloffame.org/2012/07/23/why-does-net-still-work-christmas-paul-mockapetris/).
    [Virtual memory](https://www.linuxatemyram.com/) is a cache. And if you''ve ever
    wondered why HTTP/1.0 got a patch release (HTTP/1.1) less than a year after it
    came out: more caching.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前辈们深思熟虑地关于缓存的想法可以参考[这篇文章](https://doi.org/10.1109/ICDE.2000.839382)。DNS [是一个缓存](https://www.internethalloffame.org/2012/07/23/why-does-net-still-work-christmas-paul-mockapetris/)。[虚拟内存](https://www.linuxatemyram.com/)也是一个缓存。如果你曾经想知道为什么HTTP/1.0发布不到一年后就发布了补丁版本(HTTP/1.1)：更多的缓存。
- en: HTTP/1.0 had almost nothing in the way of caching. In HTTP/1.1, a whole new
    top-level section on the subject was added to the standard. This was essential
    because, back in the day, the repeated re-downloading of unchanged files was a
    real headache.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP/1.0在缓存方面几乎什么也没有。在HTTP/1.1中，标准中添加了一个全新的顶级部分来讨论这个主题。这是必不可少的，因为在过去，重复重新下载未更改的文件是一个真正的头疼。
- en: This needless re-downloading was especially bad for popular sites, whose pages
    would be massively re-downloaded over and over - even though they hadn't changed
    - by many, many people. Enough to start cause problems for the internet as a whole.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于流行网站来说，这种不必要的重新下载尤其糟糕，它们的页面会被许多人反复地重新下载，即使它们没有变化。足以开始为整个互联网带来问题。
- en: 'One of the *cool new features* in HTTP/1.1 (implemented in Netscape Navigator
    4.0, available from all reputable software stockists) is the `ETag` header. It
    works like this:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP/1.1中的*酷新特性*之一（在Netscape Navigator 4.0中实现，在所有信誉良好的软件经销商处可获得）是`ETag`头。它的工作方式如下：
- en: The HTTP server generates a unique id for each version of a file. 'Version'
    in this context means not just revision but also format, so CSV files get different
    ids from Parquet files even if served from the same URL (csvbase [does this](https://csvbase.com/blog/2)).
    The HTTP server returns this id in the `ETag` header.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP服务器为每个文件版本生成唯一的ID。在这里，“版本”不仅指修订版，还包括格式，因此即使从同一URL提供，CSV文件与Parquet文件也会有不同的ID（csvbase
    [做到了这一点](https://csvbase.com/blog/2)）。HTTP服务器在`ETag`头中返回此ID。
- en: When an HTTP client requests the file again, it provides that same id in the
    `If-None-Match` header.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当HTTP客户端再次请求文件时，它在`If-None-Match`头中提供相同的ID。
- en: If that ETag is up-to-date, the server just sets the status to `304 Not Modified`
    and returns absolutely nothing. The client then knows that it should use the file
    it already has.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该ETag是最新的，服务器只需将状态设置为`304 Not Modified`并且不返回任何内容。客户端随后知道它应该使用已有的文件。
- en: This is a way to both keep a cache *and* avoid stale data.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种既保持缓存又避免过时数据的方式。
- en: Generating the ETag
  id: totrans-split-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成ETag
- en: How should the ETag be generated? That is up to the server - up to csvbase.
    csvbase could just md5sum the file and put that in the header. That would be valid
    and it would work.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: ETag 应该如何生成？这取决于服务器 - 取决于csvbase。 csvbase可以只是对文件进行md5sum，并将其放入标头。那将是有效的，它将起作用。
- en: Well, except. Except, csvbase is not actually a database of CSV files. The name
    is a bit of a trick. csvbase doesn't keep the CSV files on some filesystem (or
    in an [object store](https://calpaterson.com/s3.html) for that matter). Instead,
    uploaded CSV files are fully parsed and then put into a SQL database. When csvbase
    returns you a CSV file it's being generated *on the fly*. That's how csvbase returns
    other formats like Parquet, JSONlines, JSON, etc.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，除了。 除此之外，csvbase实际上并不是CSV文件的数据库。 名称有点把戏。 csvbase并不在某些文件系统（或[对象存储](https://calpaterson.com/s3.html)中）保留CSV文件。
    相反，上传的CSV文件被完全解析，然后放入SQL数据库中。 当csvbase返回CSV文件时，它是*即时生成*的。 这就是csvbase返回Parquet、JSONlines、JSON等其他格式的方式。
- en: It would be quicker for csvbase not to have to regenerate the CSV file (or Parquet
    file) each time, just in order to check whether the md5sum of that file matched
    the `If-None-Match` header.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于csvbase来说，不必每次都重新生成CSV文件（或Parquet文件）会更快，只需检查该文件的md5sum是否与 `If-None-Match`
    标头匹配。
- en: 'So instead of hashing the contents of the file, we''ll create the ETag by hashing
    a key:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将不是通过散列文件内容来生成ETag，而是通过散列密钥来创建ETag：
- en: '`(table id, last change time, file format, page number [if any])`'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`(表ID，上次更改时间，文件格式，页面编号[如果有的话])`'
- en: That key represents both the version of the file plus what page is being looked
    it (the JSON and HTML formats are paginated). And if your table is changed, last
    change time is different and the ETag changes too. Fab.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该键表示文件的版本以及正在查看的页面（JSON和HTML格式是分页的）。 如果您的表格更改了，上次更改时间是不同的，ETag 也会改变。 真棒。
- en: How long to cache for?
  id: totrans-split-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存多长时间？
- en: 'At this point we have a caching system that:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们有了一个缓存系统，它：
- en: Spares the client downloading the file
  id: totrans-split-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 免去了客户端下载文件的时间
- en: though they must make a tiny request
  id: totrans-split-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然他们必须提出一个微小的请求
- en: Also avoids the server regenerating the file
  id: totrans-split-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还避免了服务器重新生成文件
- en: 'Prevents any stale results (ie: avoids ["TTL hell"](https://calpaterson.com/ttl-hell.html))'
  id: totrans-split-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 防止任何过时结果（即：避免["TTL hell"](https://calpaterson.com/ttl-hell.html)）
- en: The only question now is how long we tell clients to cache stuff. How long?
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在唯一的问题是告诉客户端缓存多长时间。 多久？
- en: The answer is forever. csvbase sets no `max-age`. Clients can cache stuff as
    long as they like, **providing that they revalidate each time** the use that data.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是永远。 csvbase 不设置 `max-age`。 客户端可以根据需要缓存数据，**只要在使用数据时每次重新验证**。
- en: Here's what csvbase's response looks like
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是csvbase的响应的样子
- en: '[PRE1]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The operative bit here is the `no-cache` pragma. Despite the misleading name,
    this tells clients that they can in fact cache this file, *but* that they must
    revalidate each time they use it. Here''s how [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#response_directives)
    describes it (emphasis is mine):'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键是 `no-cache` pragma。 尽管名字有误导性，但这告诉客户端他们实际上可以缓存此文件，*但是*他们必须每次使用时重新验证。 这是[MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#response_directives)如何描述它的（重点是我的）：
- en: '*"The no-cache response directive indicates that the **response can be stored
    in caches**, but the response must be validated with the origin server before
    each reuse, even when the cache is disconnected from the origin server."*'
  id: totrans-split-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"no-cache 响应指令表示可以将响应存储在缓存中，但必须在每次重用之前与源服务器验证响应，即使缓存与源服务器断开连接也是如此。"*'
- en: '*"If you want caches to always check for content updates while reusing stored
    content, no-cache is the directive to use. It does this by requiring caches to
    revalidate each request with the origin server."*'
  id: totrans-split-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"如果您希望缓存始终在重复使用存储的内容时检查内容更新，no-cache 是要使用的指令。 通过要求缓存每个请求与源服务器重新验证。"*'
- en: '`must-revalidate` is probably not necessary but the original RFC suggests that
    maybe caches might choose, in exceptional circumstances, yadda yadda yadda, to
    actually serve stale data anyway. `must-revalidate` bans that. `must-revalidate`''s
    name actually makes sense so I probably don''t need to quote chapter and verse,
    but here, anyway, again from MDN:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`must-revalidate` 可能是不必要的，但原始RFC建议在特殊情况下，缓存可能会选择仍然提供过时数据。 `must-revalidate`
    禁止这样做。 `must-revalidate` 的名称实际上是有意义的，所以我可能不需要引用章节和诗歌，但在这里，再次来自MDN：'
- en: '*HTTP allows caches to reuse stale responses when they are disconnected from
    the origin server. must-revalidate is a way to prevent this from happening - either
    the stored response is revalidated with the origin server or a 504 (Gateway Timeout)
    response is generated.*'
  id: totrans-split-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*HTTP允许缓存在与原始服务器断开连接时重用陈旧的响应。must-revalidate是一种防止这种情况发生的方法——要么重新验证存储的响应，要么生成504（网关超时）响应。*'
- en: No TTL necessary. And browsers really support this stuff. It all works.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要TTL。而且浏览器真的支持这些东西。这一切都有效。
- en: '[`csvbase-client`](https://pypi.org/project/csvbase-client/) also supports
    this. You can test it out this way:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[`csvbase-client`](https://pypi.org/project/csvbase-client/)也支持这一点。您可以用这种方式测试它：'
- en: '[PRE2]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And if you prefer just to use `curl`, here''s how to test it:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢只使用`curl`，这里是如何测试它的方法：
- en: '[PRE3]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What else is possible with ETags?
  id: totrans-split-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ETags还可以实现哪些其他可能性？
- en: 'A bit more. Join me next time when I use ETags as an effective form of concurrency
    control. Until then:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多内容。下次我将使用ETags作为一种有效的并发控制形式。在那之前，请保持关注：
- en: See also
  id: totrans-split-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'I wrote [another article on caching](https://calpaterson.com/ttl-hell.html)
    a couple of years ago. The subject bit different but the aim is the same: caching
    but without correctness problems.'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我几年前写了[另一篇关于缓存的文章](https://calpaterson.com/ttl-hell.html)。主题有所不同，但目的是相同的：缓存但避免正确性问题。
- en: I loved Eric's Brewer's [2004 lecture on Inktomi](https://www.youtube.com/watch?v=E91oEn1bnXM).
    [Inktomi](https://en.wikipedia.org/wiki/Inktomi) was effectively a primordial
    Google who tried white-labelling instead of running the search engine themselves.
    They later changed to being a content distribution network and at [around 57 minutes](https://youtu.be/E91oEn1bnXM?si=zt5vj1TPSBOMkKzG&t=3434)
    Brewer relays the story of the release of the Starr report which vindicated much
    of the effort put into web caching since HTTP/1.1 was released. He is very emotional
    throughout as Inktomi had gone spectacularly bust a couple of years before.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢埃里克·布鲁尔（Eric Brewer）2004年关于Inktomi的演讲。[Inktomi](https://en.wikipedia.org/wiki/Inktomi)实际上是一个原始的Google，试图采用白标方式而非自己运行搜索引擎。后来他们转变为内容分发网络，并在[大约57分钟处](https://youtu.be/E91oEn1bnXM?si=zt5vj1TPSBOMkKzG&t=3434)布鲁尔讲述了发布Starr报告的故事，这份报告证明了自HTTP/1.1发布以来对Web缓存投入的很多努力。他在整个演讲中情绪非常激动，因为Inktomi在几年前已经彻底垮掉。
- en: One wrinkle I have not discussed is that many caching reverse proxies don't
    have exactly have spectacular support for cache revalidation. The going advice
    on Varnish is to use some [quite complicated config](https://developers.cloudflare.com/cache/concepts/default-cache-behavior/).
    Cloudflare [do the wrong thing with `no-cache`](https://developers.cloudflare.com/cache/concepts/cache-control/#origin-cache-control-behavior)
    but it's possible to work around it. What can't be worked around, for csvbase,
    is their [lack of support for `Vary`](https://simonwillison.net/2023/Nov/20/cloudflare-does-not-consider-vary-values-in-caching-decisions/).
    This is all HTTP/1.1 stuff - from 1997 - and browsers overwhelmingly support it.
    But reverse proxies don't, for some reason.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有讨论的另一个问题是，许多缓存反向代理并没有非常好的缓存重新验证支持。有关Varnish的通用建议是使用一些[相当复杂的配置](https://developers.cloudflare.com/cache/concepts/default-cache-behavior/)。Cloudflare在处理`no-cache`时[做错了事情](https://developers.cloudflare.com/cache/concepts/cache-control/#origin-cache-control-behavior)，但可以通过解决方案来解决。对于csvbase而言，无法解决的是他们对`Vary`的[不支持](https://simonwillison.net/2023/Nov/20/cloudflare-does-not-consider-vary-values-in-caching-decisions/)。这些都是1997年的HTTP/1.1内容，而浏览器几乎全部支持。但是出于某种原因，反向代理并没有支持这些。
