- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:12:43'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: XZ Utils review notes
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://tukaani.org/xz-backdoor/review.html](https://tukaani.org/xz-backdoor/review.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2023-01
  id: totrans-split-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: OK. Also, the VS project files aren’t present anymore.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: He wanted to use liblzma’s internal headers in some tests and eventually I gave
    in. This required making those particular internal headers standalone in sense
    that they don’t include other internal headers.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: The second commit was combined from my edits squashed into a single commit.
    The commit message was clearly edited by him, collecting the messages from my
    separate commits. For example, the way the bullet points are formatted doesn’t
    match the way I would have done them.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: Likely OK. The Doxyfile was updated later again anyway.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: The intent is good, fixing a very minor issue in a rarely-seen corner case.
    It had waited some time on a branch until I gave the permission to merge it. This
    introduced a regression that was fixed in [2023-11](#_2023_11).
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: The fix is good but commit message goes beyond overthinking. The doc simply
    was incorrect and that’s it.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: 2023-02
  id: totrans-split-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OK. These are the first commits that update the API docs.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: OK (documentation updates).
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: OK (more documentation updates).
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: OK (even more documentation updates).
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: OK (documentation updates continue still).
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: 'The return value updates were good to do:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: '`lzma_properties_encode` should only return `LZMA_OK` or `LZMA_PROG_ERROR`.
    `LZMA_OPTIONS_ERROR` shouldn’t be possible although it was listed before as a
    possible value too.'
  id: totrans-split-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lzma_filter_flags_decode` can return also `LZMA_DATA_ERROR`.'
  id: totrans-split-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: 2023-03
  id: totrans-split-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: This series has intermediate steps that I didn’t like. The end result is good
    though (the last two commits are by me).
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: 'This series is identical to the two following commits in `v5.4`:'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: With the tweaks that were made later, this is OK enough.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: I found and still find these useless additions to the API. He kept insisting
    on them so eventually I gave in. There’s nothing technically wrong, I just think
    they don’t improve readability.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: '`tuktest.h` had made these obsolete.'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: This is one of the supposedly suspicous commits due to the timezone. In reality
    Jia put it in my name by common agreement because I had done a significant portion
    of it.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: OK. These will look different after the 5.6.1 release because pre-generated
    Doxygen output won’t be included in distribution tarballs anymore (not only to
    reduce the number of generated files but also to simplify the license questions
    of the source tarball).
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
- en: 2023-06
  id: totrans-split-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is from [PR #51](https://github.com/tukaani-project/xz/pull/51). The commit
    message seems slightly wrong as it speaks about `ZLIB::ZLIB` but otherwise everything
    is fine.'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
- en: Some genuine fixes were needed later but because ifunc support is now gone from
    the package, these commits aren’t relevant anymore.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
- en: These are my commits that Jia merged. Since ifunc support is now gone from the
    `master` branch, these commits aren’t relevant anymore.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
- en: OK. An inline function could have been better than a macro.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
- en: 2023-07
  id: totrans-split-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OK. I think the CI setup with various build configs helped to spot this.
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
- en: '`--powerpc` had been abbreviated to `--power` by accident in the old version
    but it still worked correctly because `getopt_long` accepts unambiguous abbreviations.'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
- en: OK. `str_to_filter` was renamed to more correct plural `str_to_filters` two
    commits later.
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
- en: This commit begins the series of commits that add the `--filters1` …​ `--filters9`
    options.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
- en: It’s OK as an intermediate step. The next commits improve things.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
- en: I restored the `{ }` to one `if` statement. I like to keep the two if-statements
    in the nested form instead of using short-circuiting (`&&`) to make the function
    call conditional.
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
- en: 'This does what it is supposed to do but it needed cleaning up:'
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
- en: '`filters_memusage_max()` sets the static array `filter_memusages` but it’s
    better to make that array a local variable.'
  id: totrans-split-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second half is more complex than it needs to be. Splitting the dictionary
    size scaling into three steps makes it hard to read.
  id: totrans-split-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`orig_dict_size` should be `uint32_t`, not `uint64_t`.'
  id: totrans-split-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `while (count > 0)` loop and the need for the `count` variable are an odd
    way to do this. It adjusts the chains in parallel instead of handling one chain
    at a time.
  id: totrans-split-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if (filt_mem_usage < memory_limit)` should have had `<=`. In practice it didn’t
    matter though as the values are in bytes.'
  id: totrans-split-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: I edited this code quite a bit in 2024-05, including the fixes and cleanups
    for the things listed above. It might still be a bit heavy to read but it’s not
    due to the 2023 commits.
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
- en: OK. Using multiple filter chains with `--flush-timeout` isn’t a likely use case
    but this isn’t much extra code either.
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
- en: However, it’s better to collect the required information in `parse_block_list()`
    because it avoids the need to loop through the `opt_block_list` array. I did that
    change in 2024-05, thus not a lot remains from this commit.
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
- en: This is the last commit to the `--filters1` …​ `--filters9` series.
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
- en: 'OK. As the commit message says, it only reorders lines. The following can be
    helpful:'
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-126
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-130
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-131
  prefs: []
  type: TYPE_NORMAL
- en: '| Tip | Never tell how many things you are going to list. |'
  id: totrans-split-132
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-split-133
  prefs: []
  type: TYPE_NORMAL
- en: OK. We had been asked how to cross-compile on one machine but then run the tests
    on the target machine, so it was good to document it.
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-136
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-137
  prefs: []
  type: TYPE_NORMAL
- en: OK but it’s gone from the `master` now.
  id: totrans-split-138
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-139
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-140
  prefs: []
  type: TYPE_NORMAL
- en: OK. It makes `test_files.sh` use exit status 77 (skipped test) when the feature
    isn’t configured instead of exit status 0 (passed test).
  id: totrans-split-141
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-142
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-143
  prefs: []
  type: TYPE_NORMAL
- en: 'The special cases on Windows were researched and commented well but the end
    result is more complex than it needs to be. Instead of creating the symlinks in
    the build directory and then installing (copying) them, it’s simpler to create
    the symlinks at install time directly in the target directory. This was simplified
    in [CMake: Simplify symlink creation and install translated man pages.](https://github.com/tukaani-project/xz/commit/67610c245ba6c68cf65991693bab9312b7dc987b)
    which itself is a messy commit though as it did multiple things.'
  id: totrans-split-144
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-145
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-146
  prefs: []
  type: TYPE_NORMAL
- en: 2023-09
  id: totrans-split-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-148
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-149
  prefs: []
  type: TYPE_NORMAL
- en: These are OK, including getopt.m4 which was simplified a lot. xz doesn’t need
    support for all corner cases of getopt_long so checking for those corner cases
    isn’t needed either.
  id: totrans-split-150
  prefs: []
  type: TYPE_NORMAL
- en: The GNU getopt_long isn’t used on GNU/Linux, *BSDs, Solaris, or MinGW-w64.
  id: totrans-split-151
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-152
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify these commits, the following can be helpful:'
  id: totrans-split-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-154
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  id: totrans-split-155
  prefs: []
  type: TYPE_NORMAL
- en: 2023-10
  id: totrans-split-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It matches the file in Gnulib.
  id: totrans-split-157
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-158
  prefs: []
  type: TYPE_NORMAL
- en: The final version is fine.
  id: totrans-split-159
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-160
  prefs: []
  type: TYPE_NORMAL
- en: This attribute is obviously scary but it is unfortunately required with this
    version of the x86 SIMD code. The code makes aligned 16-byte reads which may read
    up to 15 bytes before the beginning or past the end of the buffer if the buffer
    is misaligned. The unneeded bytes are then ignored. It cannot cross page boundaries
    and thus cannot cause access violations.
  id: totrans-split-161
  prefs: []
  type: TYPE_NORMAL
- en: The correctness is easy to review because memory is read only in a few places.
    If you do this, I suggest looking at the latest code in the `master` branch as
    that is the code that is actually in use now.
  id: totrans-split-162
  prefs: []
  type: TYPE_NORMAL
- en: '**However**, it also trips memory sanitizer which is a different thing than
    address sanitizer. Instead of adding another attribute to disable it, this code
    will be changed so that such attributes aren’t needed. Such a change won’t be
    backported to 5.4.x though because the current code does work correctly.'
  id: totrans-split-163
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-164
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-165
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-166
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-167
  prefs: []
  type: TYPE_NORMAL
- en: 2023-11
  id: totrans-split-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-169
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s simplest to review this as a whole. It was a bit hilarious series of commits
    in the `master` branch as I had spotted a regression that was introduced in [xz:
    Refactor duplicated check for custom suffix when using --format=raw](https://github.com/tukaani-project/xz/commit/cc5aa9ab138beeecaee5a1e81197591893ee9ca0).
    We discussed it and gave ideas about the fix and then it turned out to be a bit
    wrong and needing another fix until he thought it’s better to finish it another
    day. Then the test script was added as well.'
  id: totrans-split-170
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-171
  prefs: []
  type: TYPE_NORMAL
- en: These are good although I clarified a comment in the next commit. It fixed a
    very old bug in Windows build of xz.
  id: totrans-split-172
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-173
  prefs: []
  type: TYPE_NORMAL
- en: 'Ifunc detection was causing issues with musl. This seems fine but ifunc support
    was removed in [liblzma: Remove ifunc support.](https://github.com/tukaani-project/xz/commit/689ae2427342a2ea1206eb5ca08301baf410e7e0)
    so this doesn’t matter anymore anyway.'
  id: totrans-split-174
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-175
  prefs: []
  type: TYPE_NORMAL
- en: It really is just space change, no dots.
  id: totrans-split-176
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-177
  prefs: []
  type: TYPE_NORMAL
- en: 2023-12
  id: totrans-split-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are from [PR #73](https://github.com/tukaani-project/xz/pull/73) and
    have been merged correctly with cleanups to commit messages and white space usage.'
  id: totrans-split-179
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-180
  prefs: []
  type: TYPE_NORMAL
- en: OK. Needed one minor comment fix.
  id: totrans-split-181
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-182
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-183
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-184
  prefs: []
  type: TYPE_NORMAL
- en: OK. `options` definitely must not be `NULL`, and in practice it never is because
    it would be a bug in the application too.
  id: totrans-split-185
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-186
  prefs: []
  type: TYPE_NORMAL
- en: OK, just like the commit message says.
  id: totrans-split-187
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-188
  prefs: []
  type: TYPE_NORMAL
- en: The bug isn’t as serious as the commit message makes it sound as no one has
    a reason to call `lzma_filters_update` on a LZMA1 encoder, a function that is
    very rarely used anyway.
  id: totrans-split-189
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-190
  prefs: []
  type: TYPE_NORMAL
- en: The order of the macros in the `#if` directive is different from src/xz/sandbox.h
    but the directive is correct still.
  id: totrans-split-191
  prefs: []
  type: TYPE_NORMAL
- en: 'The Capsicum code is slightly simpler and stricter than in xz because xzdec
    needs to do less. Silently running without sandbox when kernel support is missing
    (`ENOSYS`) is an intentional feature and commonly accepted practice: without this,
    on such kernels xz wouldn’t run at all.'
  id: totrans-split-192
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-193
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-194
  prefs: []
  type: TYPE_NORMAL
- en: This moves code around and edits it a little. Comparing the moved sections shows
    it’s fine including the small edits. No suspicious typos (like mispelling `SANDBOX_COMPILE_DEFINITION`)
    are apparent.
  id: totrans-split-195
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-196
  prefs: []
  type: TYPE_NORMAL
- en: 2024-01
  id: totrans-split-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `riscv.c` file in this commit was almost solely written by me and matched
    the file I had outside of the Git tree. Jia did some minor work on it like adding
    macros to avoid repeated code and a few comment improvements. Those I reviewed
    and edited further.
  id: totrans-split-198
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the commit was by Jia. Those changes are good.
  id: totrans-split-199
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-200
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-201
  prefs: []
  type: TYPE_NORMAL
- en: This is the first commit preparing for the backdoor.
  id: totrans-split-202
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-203
  prefs: []
  type: TYPE_NORMAL
- en: It’s very similar to the ARM64 code below the new code.
  id: totrans-split-204
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-205
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-206
  prefs: []
  type: TYPE_NORMAL
- en: This is fine although now that the backdoor has been removed, this commit alone
    doesn’t do anything. But I left it there so that it’s ready *if* proper files
    along with a generator program are added.
  id: totrans-split-207
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-208
  prefs: []
  type: TYPE_NORMAL
- en: I had mentioned the dictionary size and that gave a good excuse to update something
    in the backdoor code.
  id: totrans-split-209
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-210
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-211
  prefs: []
  type: TYPE_NORMAL
- en: There is some churn in these commits so it’s simplest to review only the final
    outcome.
  id: totrans-split-212
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-213
  prefs: []
  type: TYPE_NORMAL
- en: 2024-02
  id: totrans-split-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-215
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-216
  prefs: []
  type: TYPE_NORMAL
- en: These are good and were created at my request. They are big but it’s hard to
    split them into smaller pieces. The original versions of these are from 2023-04-24.
    I made small edits but it was agreed that I would commit these in his name.
  id: totrans-split-217
  prefs: []
  type: TYPE_NORMAL
- en: Since these commits are complex, it’s understandable if they look scary. The
    new code does input buffer bounds checking only once per loop iteration, checking
    that there is at least 21 bytes available. At first this may look insufficient
    because, in the worst case, `rc_normalize` may be executed up to 48 times (22
    bit model + 26 direct) per loop iteration. Each `rc_normalize` macro will read
    one input byte if needed. However, the condition to read a new byte cannot be
    true everytime. This has been verified both with math and experimentally. Comments
    in the code about this could be improved.
  id: totrans-split-218
  prefs: []
  type: TYPE_NORMAL
- en: 'The small edits I made included fixing an off-by-one error with the loop condition.
    The commit originally had 20 but I changed it to 21 because the final normalization
    after the end of payload marker (EOPM) was included in the non-resumable path.
    The next commit by me ([liblzma: LZMA decoder improvements.](https://github.com/tukaani-project/xz/commit/e0c0ee475c0800c08291ae45e0d66aa00d5ce604))
    made the non-resumable variant jump to the safe code (`goto eopm`) instead and
    thus 21 was changed to 20.'
  id: totrans-split-219
  prefs: []
  type: TYPE_NORMAL
- en: XZ Embedded has had somewhat comparable code with the per-loop 20-byte check
    since the beginning (2009) and it’s been in the Linux kernel since 2010.
  id: totrans-split-220
  prefs: []
  type: TYPE_NORMAL
- en: As most of the core compression code in XZ Utils, the original idea for this
    detail comes from LZMA SDK. It’s just fairly different-looking code.
  id: totrans-split-221
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-222
  prefs: []
  type: TYPE_NORMAL
- en: Modified build-to-host.m4 had the backdoor trigger. Ignoring the file here is
    correct because it is added among several other .m4 files when running `./autogen.sh`
    or `autoreconf -fi`.
  id: totrans-split-223
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-224
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-225
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-226
  prefs: []
  type: TYPE_NORMAL
- en: I didn’t like the extra macro that had been added solely for this test. The
    last commit does more than reverting a single commit but the change is OK.
  id: totrans-split-227
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-228
  prefs: []
  type: TYPE_NORMAL
- en: This test assumes that the encoder output doesn’t change, that is, the test
    will fail if the encoder is modified too much. If the encoder is modified, updating
    the test to match isn’t much extra to do.
  id: totrans-split-229
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-230
  prefs: []
  type: TYPE_NORMAL
- en: Note that tests/test_files.sh uses globs to pick the files. So just adding files
    means that a decompression test will be done with them.
  id: totrans-split-231
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-232
  prefs: []
  type: TYPE_NORMAL
- en: We discussed this and I agreed to it. This way man page translations didn’t
    need to go via translators in the last days of the release rush to fix a typo
    in the English source text.
  id: totrans-split-233
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-234
  prefs: []
  type: TYPE_NORMAL
- en: The symbol name was supposed to be `XZ_5.6` not `XZ_5.6.0`. It makes no difference
    in practice as it is merely a string.
  id: totrans-split-235
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-236
  prefs: []
  type: TYPE_NORMAL
- en: OK. He liked to run codespell while I didn’t.
  id: totrans-split-237
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-238
  prefs: []
  type: TYPE_NORMAL
- en: He fixed it because I noticed it. Clearly the test file had been written some
    time ago already.
  id: totrans-split-239
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-240
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-241
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-242
  prefs: []
  type: TYPE_NORMAL
- en: The need to add this fix had been discussed.
  id: totrans-split-243
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-244
  prefs: []
  type: TYPE_NORMAL
- en: This was discussed in length with multiple people. The commit matches what was
    decided.
  id: totrans-split-245
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-246
  prefs: []
  type: TYPE_NORMAL
- en: 2024-03
  id: totrans-split-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is [a real bug](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=114115#c12)
    but the bug number in the commit message lacks one digit.
  id: totrans-split-248
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-249
  prefs: []
  type: TYPE_NORMAL
- en: It’s one of the backdoor commits.
  id: totrans-split-250
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-251
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-252
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a continuation for [xz: Add missing RISC-V on the filter list in the
    man page](https://github.com/tukaani-project/xz/commit/eee579fff50099ba163c12305e81a4bd42b7dd53).
    Almost always it’s not good to touch the translations without upstream approval.
    In this case I felt mixed as I wondered if the date translations would be correct
    but didn’t want to stop it so that the translation could be in the 5.6.1 release
    that was going to be made the same day.'
  id: totrans-split-253
  prefs: []
  type: TYPE_NORMAL
- en: When translations are sent to the translators, they will remake these changes
    anyway (they only pick the original English text from the tarball).
  id: totrans-split-254
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-255
  prefs: []
  type: TYPE_NORMAL
- en: I got the impression that a lot of speculation happened around this commit.
  id: totrans-split-256
  prefs: []
  type: TYPE_NORMAL
- en: I had asked Jia to simplify the GitHub PR and Issue templates already, and simplifying
    `SECURITY.md` seemed reasonable too. People reporting such bugs don’t need detailed
    handholding.
  id: totrans-split-257
  prefs: []
  type: TYPE_NORMAL
- en: I felt 21–30 days would be appropriate but Jia wanted to keep 90. With backdoor
    like “bugs”, fast full disclosure is the only correct way though.
  id: totrans-split-258
  prefs: []
  type: TYPE_NORMAL
