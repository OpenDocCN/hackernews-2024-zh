- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:12:43'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: XZ Utils review notes
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://tukaani.org/xz-backdoor/review.html](https://tukaani.org/xz-backdoor/review.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2023-01
  id: totrans-split-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: OK. Also, the VS project files aren’t present anymore.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: He wanted to use liblzma’s internal headers in some tests and eventually I gave
    in. This required making those particular internal headers standalone in sense
    that they don’t include other internal headers.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: The second commit was combined from my edits squashed into a single commit.
    The commit message was clearly edited by him, collecting the messages from my
    separate commits. For example, the way the bullet points are formatted doesn’t
    match the way I would have done them.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: Likely OK. The Doxyfile was updated later again anyway.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: The intent is good, fixing a very minor issue in a rarely-seen corner case.
    It had waited some time on a branch until I gave the permission to merge it. This
    introduced a regression that was fixed in [2023-11](#_2023_11).
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: The fix is good but commit message goes beyond overthinking. The doc simply
    was incorrect and that’s it.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: 2023-02
  id: totrans-split-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OK. These are the first commits that update the API docs.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: OK (documentation updates).
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: OK (more documentation updates).
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: OK (even more documentation updates).
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: OK (documentation updates continue still).
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: 'The return value updates were good to do:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: '`lzma_properties_encode` should only return `LZMA_OK` or `LZMA_PROG_ERROR`.
    `LZMA_OPTIONS_ERROR` shouldn’t be possible although it was listed before as a
    possible value too.'
  id: totrans-split-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lzma_filter_flags_decode` can return also `LZMA_DATA_ERROR`.'
  id: totrans-split-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: 2023-03
  id: totrans-split-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: This series has intermediate steps that I didn’t like. The end result is good
    though (the last two commits are by me).
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: 'This series is identical to the two following commits in `v5.4`:'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: With the tweaks that were made later, this is OK enough.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: I found and still find these useless additions to the API. He kept insisting
    on them so eventually I gave in. There’s nothing technically wrong, I just think
    they don’t improve readability.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: '`tuktest.h` had made these obsolete.'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: This is one of the supposedly suspicous commits due to the timezone. In reality
    Jia put it in my name by common agreement because I had done a significant portion
    of it.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: OK. These will look different after the 5.6.1 release because pre-generated
    Doxygen output won’t be included in distribution tarballs anymore (not only to
    reduce the number of generated files but also to simplify the license questions
    of the source tarball).
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
- en: 2023-06
  id: totrans-split-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is from [PR #51](https://github.com/tukaani-project/xz/pull/51). The commit
    message seems slightly wrong as it speaks about `ZLIB::ZLIB` but otherwise everything
    is fine.'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
- en: Some genuine fixes were needed later but because ifunc support is now gone from
    the package, these commits aren’t relevant anymore.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 后来确实需要了一些真正的修复，但由于ifunc支持已经从软件包中移除，这些提交现在不再相关。
- en: '* * *'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: These are my commits that Jia merged. Since ifunc support is now gone from the
    `master` branch, these commits aren’t relevant anymore.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是贾合并的我的提交。由于ifunc支持现在从`master`分支中消失了，因此这些提交现在不再相关。
- en: '* * *'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: OK. An inline function could have been better than a macro.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 好。一个内联函数可能比宏更好。
- en: '* * *'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 2023-07
  id: totrans-split-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2023-07
- en: OK. I think the CI setup with various build configs helped to spot this.
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 好。我认为具有各种构建配置的CI设置有助于发现这一点。
- en: '* * *'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`--powerpc` had been abbreviated to `--power` by accident in the old version
    but it still worked correctly because `getopt_long` accepts unambiguous abbreviations.'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`--powerpc`在旧版本中由于错误被缩写为`--power`，但仍然能够正确工作，因为`getopt_long`接受非歧义的缩写。'
- en: '* * *'
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: OK. `str_to_filter` was renamed to more correct plural `str_to_filters` two
    commits later.
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 好。`str_to_filter`两个提交后更名为更正确的复数形式`str_to_filters`。
- en: This commit begins the series of commits that add the `--filters1` …​ `--filters9`
    options.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个提交开始了添加`--filters1`到`--filters9`选项系列的提交。
- en: '* * *'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: It’s OK as an intermediate step. The next commits improve things.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 作为中间步骤还可以。接下来的提交改进了情况。
- en: '* * *'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: I restored the `{ }` to one `if` statement. I like to keep the two if-statements
    in the nested form instead of using short-circuiting (`&&`) to make the function
    call conditional.
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我将`{ }`还原为一个`if`语句。我喜欢将两个if语句保持在嵌套形式中，而不是使用短路（`&&`）来使函数调用有条件。
- en: '* * *'
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'This does what it is supposed to do but it needed cleaning up:'
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实做到了它应该做的事情，但是需要进行清理：
- en: '`filters_memusage_max()` sets the static array `filter_memusages` but it’s
    better to make that array a local variable.'
  id: totrans-split-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filters_memusage_max()`设置静态数组`filter_memusages`，但最好将该数组作为局部变量。'
- en: The second half is more complex than it needs to be. Splitting the dictionary
    size scaling into three steps makes it hard to read.
  id: totrans-split-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二部分比必要的复杂。将字典大小扩展分为三个步骤，使得阅读变得困难。
- en: '`orig_dict_size` should be `uint32_t`, not `uint64_t`.'
  id: totrans-split-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orig_dict_size`应该是`uint32_t`，而不是`uint64_t`。'
- en: The `while (count > 0)` loop and the need for the `count` variable are an odd
    way to do this. It adjusts the chains in parallel instead of handling one chain
    at a time.
  id: totrans-split-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`while (count > 0)`循环和需要`count`变量的方式有点奇怪。它并行调整链条，而不是一次处理一个链条。'
- en: '`if (filt_mem_usage < memory_limit)` should have had `<=`. In practice it didn’t
    matter though as the values are in bytes.'
  id: totrans-split-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if (filt_mem_usage < memory_limit)`应该是`<=`。实际上并不重要，因为值是以字节为单位的。'
- en: I edited this code quite a bit in 2024-05, including the fixes and cleanups
    for the things listed above. It might still be a bit heavy to read but it’s not
    due to the 2023 commits.
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我在2024-05对这段代码进行了相当大的编辑，包括上述修复和清理。它可能仍然有些难以理解，但这不是因为2023年的提交。
- en: '* * *'
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: OK. Using multiple filter chains with `--flush-timeout` isn’t a likely use case
    but this isn’t much extra code either.
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 好。使用`--flush-timeout`进行多个过滤链的情况不太可能，但这也不需要太多额外的代码。
- en: '* * *'
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: However, it’s better to collect the required information in `parse_block_list()`
    because it avoids the need to loop through the `opt_block_list` array. I did that
    change in 2024-05, thus not a lot remains from this commit.
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最好在`parse_block_list()`中收集所需的信息，因为这样可以避免循环遍历`opt_block_list`数组。我在2024-05做了这个改变，因此这次提交的内容不多了。
- en: This is the last commit to the `--filters1` …​ `--filters9` series.
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`--filters1`到`--filters9`系列的最后一次提交。
- en: '* * *'
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'OK. As the commit message says, it only reorders lines. The following can be
    helpful:'
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
  zh: 好。如提交消息所说，它只是重新排列了行。以下内容可能会有所帮助：
- en: '[PRE0]'
  id: totrans-split-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '* * *'
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-130
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-131
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '| Tip | Never tell how many things you are going to list. |'
  id: totrans-split-132
  prefs: []
  type: TYPE_TB
  zh: '| Tip | 永远不要告诉你要列出多少事物。 |'
- en: '* * *'
  id: totrans-split-133
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: OK. We had been asked how to cross-compile on one machine but then run the tests
    on the target machine, so it was good to document it.
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
  zh: 好。我们被问及如何在一台机器上交叉编译，然后在目标机器上运行测试，因此将其文档化是很好的。
- en: '* * *'
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-136
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-137
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: OK but it’s gone from the `master` now.
  id: totrans-split-138
  prefs: []
  type: TYPE_NORMAL
  zh: 好，但现在已经从`master`分支移除了。
- en: '* * *'
  id: totrans-split-139
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-140
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: OK. It makes `test_files.sh` use exit status 77 (skipped test) when the feature
    isn’t configured instead of exit status 0 (passed test).
  id: totrans-split-141
  prefs: []
  type: TYPE_NORMAL
  zh: 好。这样可以使得`test_files.sh`在未配置功能时使用退出状态77（跳过测试），而不是退出状态0（测试通过）。
- en: '* * *'
  id: totrans-split-142
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-143
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'The special cases on Windows were researched and commented well but the end
    result is more complex than it needs to be. Instead of creating the symlinks in
    the build directory and then installing (copying) them, it’s simpler to create
    the symlinks at install time directly in the target directory. This was simplified
    in [CMake: Simplify symlink creation and install translated man pages.](https://github.com/tukaani-project/xz/commit/67610c245ba6c68cf65991693bab9312b7dc987b)
    which itself is a messy commit though as it did multiple things.'
  id: totrans-split-144
  prefs: []
  type: TYPE_NORMAL
  zh: Windows上的特殊情况已经研究并且注释得很好，但结果比必要的复杂。与其在构建目录中创建符号链接然后安装（复制）它们，不如直接在目标目录中的安装时创建符号链接更简单。这在[CMake：简化符号链接创建并安装已翻译的man页。](https://github.com/tukaani-project/xz/commit/67610c245ba6c68cf65991693bab9312b7dc987b)中得到了简化，虽然它本身是一个混乱的提交，因为它做了多件事。
- en: '* * *'
  id: totrans-split-145
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-146
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 2023-09
  id: totrans-split-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2023-09
- en: '* * *'
  id: totrans-split-148
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-149
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: These are OK, including getopt.m4 which was simplified a lot. xz doesn’t need
    support for all corner cases of getopt_long so checking for those corner cases
    isn’t needed either.
  id: totrans-split-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是可以接受的，包括极大地简化了的getopt.m4。xz不需要对getopt_long的所有边界情况提供支持，因此也不需要检查这些边界情况。
- en: The GNU getopt_long isn’t used on GNU/Linux, *BSDs, Solaris, or MinGW-w64.
  id: totrans-split-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在GNU/Linux、*BSD、Solaris或MinGW-w64中不使用GNU getopt_long。
- en: '* * *'
  id: totrans-split-152
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'To verify these commits, the following can be helpful:'
  id: totrans-split-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证这些提交，以下内容可能会有所帮助：
- en: '[PRE1]'
  id: totrans-split-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '* * *'
  id: totrans-split-155
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 2023-10
  id: totrans-split-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2023-10
- en: It matches the file in Gnulib.
  id: totrans-split-157
  prefs: []
  type: TYPE_NORMAL
  zh: 它与Gnulib中的文件相匹配。
- en: '* * *'
  id: totrans-split-158
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The final version is fine.
  id: totrans-split-159
  prefs: []
  type: TYPE_NORMAL
  zh: 最终版本是好的。
- en: '* * *'
  id: totrans-split-160
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This attribute is obviously scary but it is unfortunately required with this
    version of the x86 SIMD code. The code makes aligned 16-byte reads which may read
    up to 15 bytes before the beginning or past the end of the buffer if the buffer
    is misaligned. The unneeded bytes are then ignored. It cannot cross page boundaries
    and thus cannot cause access violations.
  id: totrans-split-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性显然很可怕，但是对于这个版本的x86 SIMD代码来说却是不可避免的。代码进行了对齐的16字节读取，如果缓冲区未对齐，可能会读取到缓冲区开始之前或结束之后的15个字节。然后这些不需要的字节会被忽略。它不能越过页面边界，因此不会导致访问违规。
- en: The correctness is easy to review because memory is read only in a few places.
    If you do this, I suggest looking at the latest code in the `master` branch as
    that is the code that is actually in use now.
  id: totrans-split-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正确性很容易审查，因为内存只在几个地方进行只读操作。如果你这样做，我建议看看`master`分支中的最新代码，因为那才是现在实际在使用的代码。
- en: '**However**, it also trips memory sanitizer which is a different thing than
    address sanitizer. Instead of adding another attribute to disable it, this code
    will be changed so that such attributes aren’t needed. Such a change won’t be
    backported to 5.4.x though because the current code does work correctly.'
  id: totrans-split-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**然而**，它也会触发内存检测器，这与地址检测器是不同的事情。与其添加另一个属性来禁用它，不如改变这段代码以使这些属性不再需要。虽然这样的更改不会被反向移植到5.4.x，因为当前的代码确实正确运行。'
- en: '* * *'
  id: totrans-split-164
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-165
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-166
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-167
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 2023-11
  id: totrans-split-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2023-11
- en: '* * *'
  id: totrans-split-169
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'It’s simplest to review this as a whole. It was a bit hilarious series of commits
    in the `master` branch as I had spotted a regression that was introduced in [xz:
    Refactor duplicated check for custom suffix when using --format=raw](https://github.com/tukaani-project/xz/commit/cc5aa9ab138beeecaee5a1e81197591893ee9ca0).
    We discussed it and gave ideas about the fix and then it turned out to be a bit
    wrong and needing another fix until he thought it’s better to finish it another
    day. Then the test script was added as well.'
  id: totrans-split-170
  prefs: []
  type: TYPE_NORMAL
  zh: 把这个作为一个整体审查是最简单的。在`master`分支中，这是一系列有趣的提交，因为我发现了一个在[xz：重构使用--format=raw时自定义后缀的重复检查](https://github.com/tukaani-project/xz/commit/cc5aa9ab138beeecaee5a1e81197591893ee9ca0)中引入的回归。我们讨论了它，并提出了修复的想法，结果发现有点不对劲，需要另一个修复，直到他认为最好另一天再完成。然后测试脚本也被添加了。
- en: '* * *'
  id: totrans-split-171
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: These are good although I clarified a comment in the next commit. It fixed a
    very old bug in Windows build of xz.
  id: totrans-split-172
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我在下一个提交中澄清了一个注释，但这些仍然是好的。它修复了xz在Windows构建中一个非常古老的错误。
- en: '* * *'
  id: totrans-split-173
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Ifunc detection was causing issues with musl. This seems fine but ifunc support
    was removed in [liblzma: Remove ifunc support.](https://github.com/tukaani-project/xz/commit/689ae2427342a2ea1206eb5ca08301baf410e7e0)
    so this doesn’t matter anymore anyway.'
  id: totrans-split-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果unc检测导致musl出现问题，这似乎没问题，但是[liblzma：删除ifunc支持。](https://github.com/tukaani-project/xz/commit/689ae2427342a2ea1206eb5ca08301baf410e7e0)
    所以这也不再重要。
- en: '* * *'
  id: totrans-split-175
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: It really is just space change, no dots.
  id: totrans-split-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上只是空间更改，没有点号。
- en: '* * *'
  id: totrans-split-177
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 2023-12
  id: totrans-split-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2023-12
- en: 'These are from [PR #73](https://github.com/tukaani-project/xz/pull/73) and
    have been merged correctly with cleanups to commit messages and white space usage.'
  id: totrans-split-179
  prefs: []
  type: TYPE_NORMAL
  zh: '这些来自于 [PR #73](https://github.com/tukaani-project/xz/pull/73) 并已正确合并，提交消息和空白使用已经整理干净。'
- en: '* * *'
  id: totrans-split-180
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: OK. Needed one minor comment fix.
  id: totrans-split-181
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。需要做一个小注释修复。
- en: '* * *'
  id: totrans-split-182
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-183
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-184
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: OK. `options` definitely must not be `NULL`, and in practice it never is because
    it would be a bug in the application too.
  id: totrans-split-185
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。`options` 绝对不能为 `NULL`，实际上从未为 `NULL`，因为这也会是应用程序中的错误。
- en: '* * *'
  id: totrans-split-186
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: OK, just like the commit message says.
  id: totrans-split-187
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，就像提交消息所说的那样。
- en: '* * *'
  id: totrans-split-188
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The bug isn’t as serious as the commit message makes it sound as no one has
    a reason to call `lzma_filters_update` on a LZMA1 encoder, a function that is
    very rarely used anyway.
  id: totrans-split-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 bug 并不像提交消息所说的那样严重，因为没有人有理由在 LZMA1 编码器上调用 `lzma_filters_update`，这个函数本来就很少使用。
- en: '* * *'
  id: totrans-split-190
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The order of the macros in the `#if` directive is different from src/xz/sandbox.h
    but the directive is correct still.
  id: totrans-split-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`#if` 指令中宏的顺序与 `src/xz/sandbox.h` 中不同，但指令依然正确。'
- en: 'The Capsicum code is slightly simpler and stricter than in xz because xzdec
    needs to do less. Silently running without sandbox when kernel support is missing
    (`ENOSYS`) is an intentional feature and commonly accepted practice: without this,
    on such kernels xz wouldn’t run at all.'
  id: totrans-split-192
  prefs: []
  type: TYPE_NORMAL
  zh: Capsicum 代码相对于 xz 来说稍微简单且更为严格，因为 xzdec 需要执行较少的操作。当内核不支持时静默运行而不使用沙箱 (`ENOSYS`)
    是一个有意的特性和普遍接受的做法：否则，在这样的内核上 xz 将完全无法运行。
- en: '* * *'
  id: totrans-split-193
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-194
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This moves code around and edits it a little. Comparing the moved sections shows
    it’s fine including the small edits. No suspicious typos (like mispelling `SANDBOX_COMPILE_DEFINITION`)
    are apparent.
  id: totrans-split-195
  prefs: []
  type: TYPE_NORMAL
  zh: 移动代码并进行了一些编辑。比较移动的部分显示它是良好的，包括小的编辑。没有明显的可疑拼写错误（比如拼错 `SANDBOX_COMPILE_DEFINITION`）。
- en: '* * *'
  id: totrans-split-196
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 2024-01
  id: totrans-split-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2024-01
- en: The `riscv.c` file in this commit was almost solely written by me and matched
    the file I had outside of the Git tree. Jia did some minor work on it like adding
    macros to avoid repeated code and a few comment improvements. Those I reviewed
    and edited further.
  id: totrans-split-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次提交中，`riscv.c` 文件几乎完全由我编写，并与我在 Git 树之外拥有的文件匹配。Jia 做了一些小工作，比如添加宏以避免重复的代码和改进了一些注释。我对这些进行了审查和进一步编辑。
- en: The rest of the commit was by Jia. Those changes are good.
  id: totrans-split-199
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的提交是由 Jia 完成的。这些更改很好。
- en: '* * *'
  id: totrans-split-200
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-201
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This is the first commit preparing for the backdoor.
  id: totrans-split-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为后门做准备的第一个提交。
- en: '* * *'
  id: totrans-split-203
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: It’s very similar to the ARM64 code below the new code.
  id: totrans-split-204
  prefs: []
  type: TYPE_NORMAL
  zh: 它非常类似于 ARM64 代码中的新代码。
- en: '* * *'
  id: totrans-split-205
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-206
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This is fine although now that the backdoor has been removed, this commit alone
    doesn’t do anything. But I left it there so that it’s ready *if* proper files
    along with a generator program are added.
  id: totrans-split-207
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管现在后门已被移除，这个提交本身并没有做任何事情。但我将其留在这里，以备 *如果* 适当的文件和生成程序一起添加。
- en: '* * *'
  id: totrans-split-208
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: I had mentioned the dictionary size and that gave a good excuse to update something
    in the backdoor code.
  id: totrans-split-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到了字典大小，这给了更新后门代码的一个好借口。
- en: '* * *'
  id: totrans-split-210
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-211
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: There is some churn in these commits so it’s simplest to review only the final
    outcome.
  id: totrans-split-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些提交中有些波动，所以最简单的方法是只审查最终结果。
- en: '* * *'
  id: totrans-split-213
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 2024-02
  id: totrans-split-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2024-02
- en: '* * *'
  id: totrans-split-215
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-216
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: These are good and were created at my request. They are big but it’s hard to
    split them into smaller pieces. The original versions of these are from 2023-04-24.
    I made small edits but it was agreed that I would commit these in his name.
  id: totrans-split-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这些很好且是根据我的请求创建的。它们很大，但很难分割成更小的部分。这些的原始版本来自于 2023-04-24。我做了一些小修改，但同意以他的名义提交这些。
- en: Since these commits are complex, it’s understandable if they look scary. The
    new code does input buffer bounds checking only once per loop iteration, checking
    that there is at least 21 bytes available. At first this may look insufficient
    because, in the worst case, `rc_normalize` may be executed up to 48 times (22
    bit model + 26 direct) per loop iteration. Each `rc_normalize` macro will read
    one input byte if needed. However, the condition to read a new byte cannot be
    true everytime. This has been verified both with math and experimentally. Comments
    in the code about this could be improved.
  id: totrans-split-218
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些提交很复杂，如果它们看起来令人生畏，这是可以理解的。新代码每次循环迭代只进行一次输入缓冲区边界检查，检查是否至少有 21 个字节可用。起初这可能看起来不足，因为在最坏的情况下，`rc_normalize`
    每次循环迭代最多可能被执行 48 次（22 位模型 + 26 直接）。每个 `rc_normalize` 宏将在需要时读取一个输入字节。然而，条件读取新字节不能始终为真。这已经通过数学和实验验证过。代码中关于此的注释可能可以改进。
- en: 'The small edits I made included fixing an off-by-one error with the loop condition.
    The commit originally had 20 but I changed it to 21 because the final normalization
    after the end of payload marker (EOPM) was included in the non-resumable path.
    The next commit by me ([liblzma: LZMA decoder improvements.](https://github.com/tukaani-project/xz/commit/e0c0ee475c0800c08291ae45e0d66aa00d5ce604))
    made the non-resumable variant jump to the safe code (`goto eopm`) instead and
    thus 21 was changed to 20.'
  id: totrans-split-219
  prefs: []
  type: TYPE_NORMAL
  zh: '我所做的小改动包括修复了一个循环条件的偏移错误。原本的提交中有 20，但我改成了 21，因为在载荷标记（EOPM）结束后的最终规范化被包含在非可恢复路径中。接下来我的提交
    ([liblzma: LZMA 解码器改进。](https://github.com/tukaani-project/xz/commit/e0c0ee475c0800c08291ae45e0d66aa00d5ce604))
    让非可恢复变体跳到了安全代码 (`goto eopm`)，因此 21 被改回了 20。'
- en: XZ Embedded has had somewhat comparable code with the per-loop 20-byte check
    since the beginning (2009) and it’s been in the Linux kernel since 2010.
  id: totrans-split-220
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2009 年以来，XZ Embedded 自带的每次循环 20 字节检查的代码有些类似，并且自 2010 年以来已经在 Linux 内核中存在。
- en: As most of the core compression code in XZ Utils, the original idea for this
    detail comes from LZMA SDK. It’s just fairly different-looking code.
  id: totrans-split-221
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 XZ Utils 中大部分核心压缩代码的一部分，这个细节的原始想法来自于 LZMA SDK。只是代码看起来有些不同而已。
- en: '* * *'
  id: totrans-split-222
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Modified build-to-host.m4 had the backdoor trigger. Ignoring the file here is
    correct because it is added among several other .m4 files when running `./autogen.sh`
    or `autoreconf -fi`.
  id: totrans-split-223
  prefs: []
  type: TYPE_NORMAL
  zh: 修改的 build-to-host.m4 文件中有后门触发器。在这里忽略这个文件是正确的，因为在运行 `./autogen.sh` 或 `autoreconf
    -fi` 时，它会被添加在其他几个 .m4 文件中。
- en: '* * *'
  id: totrans-split-224
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-225
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-226
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: I didn’t like the extra macro that had been added solely for this test. The
    last commit does more than reverting a single commit but the change is OK.
  id: totrans-split-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我不喜欢为这个测试而额外添加的宏。最后的提交不仅撤销了单个提交，但更改是可以接受的。
- en: '* * *'
  id: totrans-split-228
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This test assumes that the encoder output doesn’t change, that is, the test
    will fail if the encoder is modified too much. If the encoder is modified, updating
    the test to match isn’t much extra to do.
  id: totrans-split-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试假设编码器的输出不会改变，也就是说，如果编码器修改过多，测试就会失败。如果编码器有所修改，更新测试以匹配并不算什么额外工作。
- en: '* * *'
  id: totrans-split-230
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Note that tests/test_files.sh uses globs to pick the files. So just adding files
    means that a decompression test will be done with them.
  id: totrans-split-231
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，tests/test_files.sh 使用通配符来选择文件。因此，只需添加文件就可以进行相应的解压缩测试。
- en: '* * *'
  id: totrans-split-232
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: We discussed this and I agreed to it. This way man page translations didn’t
    need to go via translators in the last days of the release rush to fix a typo
    in the English source text.
  id: totrans-split-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论过这个问题，我同意这样做。这样一来，手册页翻译就不需要在发布紧张的最后几天再通过翻译人员修复英文源文本中的拼写错误了。
- en: '* * *'
  id: totrans-split-234
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The symbol name was supposed to be `XZ_5.6` not `XZ_5.6.0`. It makes no difference
    in practice as it is merely a string.
  id: totrans-split-235
  prefs: []
  type: TYPE_NORMAL
  zh: 符号名称本应为 `XZ_5.6` 而不是 `XZ_5.6.0`。实际上这没有任何区别，因为它只是一个字符串。
- en: '* * *'
  id: totrans-split-236
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: OK. He liked to run codespell while I didn’t.
  id: totrans-split-237
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。他喜欢运行 codespell，而我不喜欢。
- en: '* * *'
  id: totrans-split-238
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: He fixed it because I noticed it. Clearly the test file had been written some
    time ago already.
  id: totrans-split-239
  prefs: []
  type: TYPE_NORMAL
  zh: 他修复了它是因为我注意到了。显然测试文件早就写好了。
- en: '* * *'
  id: totrans-split-240
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-241
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-242
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The need to add this fix had been discussed.
  id: totrans-split-243
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论过需要添加这个修复。
- en: '* * *'
  id: totrans-split-244
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This was discussed in length with multiple people. The commit matches what was
    decided.
  id: totrans-split-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经与多人长时间讨论过了。提交符合当时的决定。
- en: '* * *'
  id: totrans-split-246
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 2024-03
  id: totrans-split-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2024-03
- en: This is [a real bug](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=114115#c12)
    but the bug number in the commit message lacks one digit.
  id: totrans-split-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 [真实的错误](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=114115#c12)，但提交消息中的错误号码缺少了一个数字。
- en: '* * *'
  id: totrans-split-249
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: It’s one of the backdoor commits.
  id: totrans-split-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个后门提交之一。
- en: '* * *'
  id: totrans-split-251
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-252
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'This is a continuation for [xz: Add missing RISC-V on the filter list in the
    man page](https://github.com/tukaani-project/xz/commit/eee579fff50099ba163c12305e81a4bd42b7dd53).
    Almost always it’s not good to touch the translations without upstream approval.
    In this case I felt mixed as I wondered if the date translations would be correct
    but didn’t want to stop it so that the translation could be in the 5.6.1 release
    that was going to be made the same day.'
  id: totrans-split-253
  prefs: []
  type: TYPE_NORMAL
  zh: '这是对 [xz: 在手册页的过滤列表中添加遗漏的 RISC-V](https://github.com/tukaani-project/xz/commit/eee579fff50099ba163c12305e81a4bd42b7dd53)
    的延续。几乎总是不好在没有上游批准的情况下修改翻译。在这种情况下，我感到犹豫，因为我不确定日期翻译是否正确，但也不想阻止它，以便翻译可以在同一天发布的 5.6.1
    版本中进行。'
- en: When translations are sent to the translators, they will remake these changes
    anyway (they only pick the original English text from the tarball).
  id: totrans-split-254
  prefs: []
  type: TYPE_NORMAL
  zh: 当翻译发送给翻译人员时，他们会重新制作这些更改（他们只从tarball中挑选原始的英文文本）。
- en: '* * *'
  id: totrans-split-255
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: I got the impression that a lot of speculation happened around this commit.
  id: totrans-split-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一种印象，这次提交引起了很多猜测。
- en: I had asked Jia to simplify the GitHub PR and Issue templates already, and simplifying
    `SECURITY.md` seemed reasonable too. People reporting such bugs don’t need detailed
    handholding.
  id: totrans-split-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经要求贾简化GitHub的PR和问题模板，并且简化`SECURITY.md`也显得合理。报告这类漏洞的人并不需要详细的指导。
- en: I felt 21–30 days would be appropriate but Jia wanted to keep 90. With backdoor
    like “bugs”, fast full disclosure is the only correct way though.
  id: totrans-split-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我感觉21–30天可能更合适，但贾希望保持90天。像“漏洞”这样的后门，快速全面披露才是唯一正确的方式。
