- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:08:49'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Why I recommend Renovate over any other dependency update tools · Jamie Tanna
    | Software Engineer
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.jvt.me/posts/2024/04/12/use-renovate/](https://www.jvt.me/posts/2024/04/12/use-renovate/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you've read my blog before, or interacted with me at work or in the Open
    Source world, you're likely to know that I'm a huge fan of [Renovate](https://docs.renovatebot.com/).
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: For those that aren't aware, Renovate is one of the big players in dependency
    updating tooling, commonly seen in comparisons with Dependabot or Snyk.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: I've been using Renovate for the last ~5 years, alongside a mix of Dependabot
    and Snyk to keep me grounded. I *absolutely love* Renovate, and make a point of
    making it so I can run Renovate where possible.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: I've also had the experience operating Renovate in self-hosted mode as well
    as used [the hosted Renovate app by Mend](https://developer.mend.io) and the Mend
    Enterprise SAAS, and [I've written about the lessons learned self-hosting Renovate](https://www.jvt.me/posts/2024/05/03/renovate-self-hosting-lessons/).
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Renovate has some really key features that set it apart from the competition,
    and I'm sure in the time it's taken me to write this, they've shipped some new
    ones 😻
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: '(Aside: I''m largely writing this blog post now, as I''ve recently been shouting
    the benefits of Renovate, and instead of writing another internal-only document
    at work (as I did at Deliveroo), I wanted to [write it as a form of blogumentation](https://www.jvt.me/posts/2017/06/25/blogumentation/)).'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: Prior art
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A few years back, I wrote about [some tips for using Renovate](https://www.jvt.me/posts/2021/09/26/whitesource-renovate-tips/)
    to make keeping your software up-to-date easier, which I still stand by.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: Since then, I've worked across a number of different ecosystems, repository
    sizes, and levels of comfort merging dependency updates, and have learned a few
    more things about effectively using Renovate - but through it, I'm still very
    sure of Renovate being the best tool in the ecosystem.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: Configurability
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Renovate is *extremely* configurable, with [dozens of configuration options](https://docs.renovatebot.com/configuration-options/)
    to tune your experience. But Renovate doesn't end up being "too" configurable,
    where you end up spending more time tweaking config than doing the changes, but
    configurable enough that it's very likely you can do what you need to with it.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: Centralised, shareable presets
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is something that really hit me when we were rolling out Dependabot at
    Deliveroo, where my team owned ~30 repositories, and so for each of these repos,
    we needed to hand-craft a `dependabot.yml`, as Dependabot needs to be told which
    directories contain which dependencies, and how often to update them.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: After we'd had about a week of usage, we started needing to tweak the configuration
    in a few of them to reduce the noise, which then required us to raise PRs across
    all the repos and get them updated.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: Because Dependabot requires a bit of a snowflake configuration per repository,
    this wasn't easily automatable, even with [great tools available to automate some
    of the bulk updates](https://www.jvt.me/posts/2023/01/21/bulk-git-repo-changes/),
    which made this a rather onerous and frustrating process.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Dependabot需要每个存储库的特定配置，这并不容易自动化，即使有[用于自动化一些大量更新的很好的工具](https://www.jvt.me/posts/2023/01/21/bulk-git-repo-changes/)，这使得这个过程相当繁琐和令人沮丧。
- en: Compare this to Renovate, where there's an excellent first-class support for
    [shareable config presets](https://docs.renovatebot.com/config-presets/), in which
    you can "extend" multiple configuration(s).
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与Renovate相比，这里有对[可共享的配置预设](https://docs.renovatebot.com/config-presets/)的一流支持，您可以“扩展”多个配置。
- en: This allows a team that wants to have consistency (i.e. in how often they receive
    updates to the AWS and Google Cloud SDKs, or which labels they want on PRs) to
    create a shared preset for their team that defines this. Then, each of their repositories
    can "extend" this configuration, as well as defining their own configuration on
    top of it at a repo-specific level.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得希望保持一致性的团队（例如，他们希望多久收到一次AWS和Google Cloud SDK更新，或者希望在PR上有哪些标签）可以为他们的团队创建一个共享预设，定义这些。然后，他们的每个存储库可以“扩展”此配置，并在存储库特定级别上定义自己的配置。
- en: 'This also makes it possible to provide good guardrails for your organisation,
    providing a good set of defaults, such as a `base.json`:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这也使得为您的组织提供良好的默认设置成为可能，例如`base.json`：
- en: '[PRE0]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This then allows defining a somewhat opinionated good starting point for teams
    with a `default.json`:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以为团队提供一个相对有见地的良好起点，有一个`default.json`：
- en: '[PRE1]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, teams only need to set the following in their repos'' `renovate.json`,
    and they''ll have the benefits of onboarding with a lot of the hard work done
    with starting:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，团队只需在其存储库的`renovate.json`中设置以下内容，他们就能获得入门的好处，减少了许多初始工作：
- en: '[PRE2]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And that's it 👏
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样 👏
- en: Good defaults
  id: totrans-split-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 良好的默认设置
- en: Linking back to the comment about having to hand-craft `dependabot.yml`s, the
    great thing about Renovate is that there's some great defaults, and that it can
    autodetect the ecosystems your repo uses, and appropriately raises PRs.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 关于手工制作`dependabot.yml`的评论，Renovate的一个很大的优点是有一些很好的默认设置，它可以自动检测您的存储库使用的生态系统，并适当地提出PR。
- en: This ease of onboarding is truly excellent, and you can even have [an onboarding
    PR](https://docs.renovatebot.com/getting-started/installing-onboarding/#repository-onboarding)
    raised to your repos to make it even simpler.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这种轻松入门真的非常棒，甚至可以为您的存储库提出[入门PR](https://docs.renovatebot.com/getting-started/installing-onboarding/#repository-onboarding)来使其更加简单。
- en: For instance, at Deliveroo, we made it so [there was a default set of configuration
    for all repos](https://www.jvt.me/posts/2023/01/30/renovate-global-defaults/)
    to give us an easy means to update Docker images, but then if teams wanted to
    manage everything, they could add a `renovate.json`, and it'd be more fully featured.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在Deliveroo，我们做到了[所有存储库的默认配置](https://www.jvt.me/posts/2023/01/30/renovate-global-defaults/)，为我们提供了一个简单的更新Docker镜像的手段，但是如果团队想要管理所有内容，他们可以添加一个`renovate.json`，这样功能会更加全面。
- en: Additionally, Renovate comes with some great inbuilt configuration in the form
    of presets, including [a "best practices" guide](https://docs.renovatebot.com/upgrade-best-practices/)
    and associated preset, which makes it easier to keep on top of community best
    practices, without needing to bikeshed about what you think is best.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，Renovate还带有一些内置配置，例如[“最佳实践”指南](https://docs.renovatebot.com/upgrade-best-practices/)和相关预设，这使得更容易掌握社区的最佳实践，而不需要为了您认为最好的事物而纠缠不清。
- en: If you find that `config:best-practices` is a little too much, there's `config:recommended`
    as a starting point, and you can always downgrade or exclude rules you'd prefer
    not to follow. Or if you *really* want to control things `config:base` is the
    minimum you should pull in.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您觉得`config:best-practices`有点多，作为一个起点，有`config:recommended`，您总是可以降级或排除您不想遵循的规则。或者如果您*真的*想要控制事物，`config:base`是您应该引入的最小值。
- en: Grouping
  id: totrans-split-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分组
- en: As suggested above, it's possible to tune how different packages get updated,
    where you can [group multiple updates into a single PR](https://docs.renovatebot.com/noise-reduction/#package-grouping).
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所建议，可以调整如何更新不同的包，您可以[将多个更新分组到单个PR](https://docs.renovatebot.com/noise-reduction/#package-grouping)。
- en: 'For instance, let''s say that you use 9 different AWS services in your application,
    and instead of receiving 9 PRs every time there are updates across the SDKs, you
    want a single one. In this case, you could craft the following Renovate configuration:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您的应用程序中使用了 9 种不同的 AWS 服务，每次 SDK 更新时，您不想收到 9 个 PR，而是希望只收到一个。在这种情况下，您可以编写以下的
    Renovate 配置：
- en: '[PRE3]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'What''s great about this is that you can also bundle things like all patch
    updates into a single PR:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这很棒的一点是，您还可以将所有补丁更新捆绑到一个单独的 PR 中：
- en: '[PRE4]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is something that's [recently](https://github.blog/2023-08-24-a-faster-way-to-manage-version-updates-with-dependabot/)
    been added to Dependabot, which is great, cause Renovate's had it for years 😝
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Dependabot 最近添加的功能，这很棒，因为 Renovate 多年来就有了 😝
- en: Use for one-off bumps
  id: totrans-split-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于一次性升级
- en: Because Renovate is an Open Source tool you can run on the command-line, it
    means you can *also* get the ability to use [Renovate for one-off executions](https://www.jvt.me/posts/2022/12/12/renovate-one-off/),
    for instance to get everyone in your organisation to a minimum version of a given
    dependency, or just to do an infrequently performed set of updates.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 Renovate 是一个可以在命令行上运行的开源工具，这意味着您也可以使用 [Renovate 一次性执行](https://www.jvt.me/posts/2022/12/12/renovate-one-off/)
    的功能，例如将组织中的每个人都升级到给定依赖项的最低版本，或执行不经常执行的更新集。
- en: Something I always refer back to is the fact that Renovate has a *tonne* of
    supported package managers, package ecosystems and versioning tools.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常提到的一件事是 Renovate 支持大量的包管理器、包生态系统和版本工具。
- en: 'Renovate''s [bot comparison guide docs](https://docs.renovatebot.com/bot-comparison/)
    has a good example which links out to the differences between:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: Renovate 的 [机器人比较指南文档](https://docs.renovatebot.com/bot-comparison/) 中有一个很好的例子，链接到以下差异：
- en: As Dependabot is more focussed on being used on GitHub's platforms (citation
    needed?) support for things like CircleCI, GitLab CI or other competitors' tooling
    doesn't seem to be available.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Dependabot 更专注于在 GitHub 平台上使用（需要引证？），似乎不支持 CircleCI、GitLab CI 或其他竞争对手的工具。
- en: Adding support for additional ecosystems
  id: totrans-split-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加对额外生态系统的支持
- en: One of the things you'll be used to having from your dependency update tool
    of choice is your standard package manager support, where it'll update a `go.mod`
    or a `pom.xml` in your repositories.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从您选择的依赖更新工具中您习惯的一件事是标准的包管理器支持，它会在您的存储库中更新 `go.mod` 或 `pom.xml`。
- en: But one thing that's quite important to understand is that there are *many more*
    dependencies in your project than those installed in your package manager. Something
    I find great about Renovate is that, as well as managing `Dockerfile`s, `build.gradle`s,
    `.gitlab-ci.yml`, etc, it will *also* manage things your `.ruby-version` or configuration
    for the ASDF version manager.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 但是要理解的一点是，您的项目中有比包管理器中安装的依赖项更多的依赖关系。我认为 Renovate 很棒的一点是，除了管理 `Dockerfile`、`build.gradle`、`.gitlab-ci.yml`
    等文件外，它还会管理您的 `.ruby-version` 或 ASDF 版本管理器的配置。
- en: But what about some of the non-standard, or organisation-specific means for
    tracking versions?
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，有关一些非标准或组织特定的版本跟踪方式呢？
- en: 'For instance, installing the `golangci-lint` linting tool recommends using
    `curl | sh`:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，安装 `golangci-lint` 代码检查工具推荐使用 `curl | sh`：
- en: '[PRE5]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And it''s common for `Dockerfile`s to have a definition of the version of dependencies:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 并且 `Dockerfile` 中通常会定义依赖项的版本：
- en: '[PRE6]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Or what if you have a custom deployment configuration like:'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您有像以下这样的自定义部署配置：
- en: '[PRE7]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It's very unlikely that you have these supported by other tools out-of-the-box,
    and Renovate is the same.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 很不可能其他工具开箱即用支持这些功能，而 Renovate 是一样的。
- en: But Renovate *does* give you the ability to manage these versions yourself.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 但是 Renovate *确实* 让您能够自行管理这些版本。
- en: 'Using Renovate''s [custom managers](https://docs.renovatebot.com/modules/manager/regex/)
    we can craft a configuration file such as:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Renovate 的 [自定义管理器](https://docs.renovatebot.com/modules/manager/regex/)
    我们可以编写这样的配置文件：
- en: '[PRE8]'
  id: totrans-split-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And this will allow us to manage the `golangci-lint` installation.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们管理 `golangci-lint` 的安装。
- en: Ideally, this sort of configuration may make it upstream so Renovate can do
    it out-of-the-box, but as we can see from the above example, there may be things
    that are organisation- or repo-specific, and so having it upstream'd doesn't make
    sense.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，这种配置可能会被上游接受，使 Renovate 可以开箱即用地执行，但正如我们从上面的例子中看到的那样，可能会有组织或仓库特定的事物，因此将其上游化并不合理。
- en: Because you can do more with it
  id: totrans-split-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 因为您可以做更多事情
- en: And you can do even more with it - I've mentioned you can use it for one-off
    updates on the command-line, but for instance I've also written a tool [renovate-graph](https://gitlab.com/tanna.dev/renovate-graph)
    which takes the detected dependency data from Renovate and gives you a JSON blob
    you can consume.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 而且您可以做更多的事情 - 我提到您可以在命令行上进行一次性更新，但例如我还编写了一个工具 [renovate-graph](https://gitlab.com/tanna.dev/renovate-graph)，它会获取
    Renovate 检测到的依赖数据，并提供给您可以消费的 JSON 数据块。
- en: This underpins a large swathe of the power behind [dependency-management-data](https://dmd.tanna.dev)
    and can be used for other means, such as [converting Renovate data exports to
    a Software Bill of Materials (SBOM)](https://www.jvt.me/posts/2023/11/03/renovate-to-sbom/).
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这支撑了 [dependency-management-data](https://dmd.tanna.dev) 背后的大部分强大功能，并可以用于其他用途，比如将
    Renovate 数据导出转换为软件材料清单（SBOM）[转换](https://www.jvt.me/posts/2023/11/03/renovate-to-sbom/)。
- en: Dependency Dashboard
  id: totrans-split-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖项仪表板
- en: One thing I love about Renovate is that you can enable the [Dependency Dashboard](https://docs.renovatebot.com/key-concepts/dashboard/),
    which gives you an overview of the detected dependencies, open PRs, as well s
    anything that may be waiting, or has failed to update.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢 Renovate 的一件事是您可以启用 [Dependency Dashboard](https://docs.renovatebot.com/key-concepts/dashboard/)，这为您提供了检测到的依赖项、开放的
    PR、以及可能正在等待或失败更新的概览。
- en: This is a hugely useful insight into the at-a-glance how far behind are we on
    updates, giving a view of whether you maybe want to spend a bit more time focussing
    on updates, or looking at ways to cut through the noise.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常有用的见解，一目了然地显示我们在更新方面落后了多少，可以看到您是否想要花更多时间专注于更新，或者看看如何消除噪音。
- en: When you merge a PR into your default branch, Renovate will rebase open PRs,
    so they're easier to review, and are guaranteed to run against the latest changes.
    However, if you're not getting to your updates as often as changes are going in,
    you may have a tonne of PRs constantly building, which is a waste of energy and
    CI minutes.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将 PR 合并到默认分支时，Renovate 将重新基于开放的 PR，以便更轻松地审查，并确保与最新更改兼容。然而，如果您没有像更改那样频繁地进行更新，您可能会有大量的
    PR 不断构建，这是能源和 CI 分钟的浪费。
- en: Instead, you can use the Dependency Dashboard for its ability to i.e. [require
    major bumps be gated behind a manual approval](https://docs.renovatebot.com/key-concepts/dashboard/#require-approval-for-major-updates),
    as it's likely you'll need some human interaction for that PR, and can then only
    raise it when you're actually ready to deal with it.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，您可以使用依赖项仪表板，因为它具有例如[要求主要升级在手动批准后才能进行](https://docs.renovatebot.com/key-concepts/dashboard/#require-approval-for-major-updates)的能力，因为您可能需要一些人工干预来处理该
    PR，并且只能在您真正准备处理它时提出。
- en: Open Source
  id: totrans-split-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开源
- en: A very important factor to me is that Renovate is Open Source, and open to community
    contributions.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说非常重要的一个因素是 Renovate 是开源的，并且开放给社区进行贡献。
- en: Although it's probably best to be split into another article, I love the AGPL3,
    and it's a great way of making sure that anyone hosting Renovate as a platform
    makes sure that their users get the access to the source code.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然最好将其拆分为另一篇文章，但我喜欢 AGPL3，并且这是一种确保任何将 Renovate 作为平台托管的人都确保其用户获得访问源代码的好方法。
- en: 'Alternatively, Snyk is proprietary, and ~~Dependabot is source available (or
    at a stretch "open source" not "Open Source") with [a license](https://github.com/dependabot/dependabot-core?tab=readme-ov-file#license)
    that doesn''t even appear on the SPDX license list~~. **Update 2024-05-19**: Dependabot
    is now MIT-licensed 👏'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，Snyk 是专有的，而~~Dependabot 是开源的（或者说是源码可用的，不是“开源”）并带有[许可证](https://github.com/dependabot/dependabot-core?tab=readme-ov-file#license)，该许可证甚至不在SPDX许可证列表上~~。
    **更新 2024-05-19**：Dependabot 现在采用 MIT 许可证 👏
- en: Renovate is also brilliantly set up as a community project, where they're shipping
    hundreds of PRs a month, alongside managing the community really well. I've seen
    a few things change in the last few years I've been more actively contributing,
    and it's a really well run project and an indication of something I'd love to
    be able to replicate at some point!
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: Renovate 也被出色地设置为一个社区项目，他们每月都在发布数百个 PR，同时很好地管理社区。在过去几年中，我已经更积极地进行了一些贡献，看到了一些变化，这是一个管理良好的项目，也是我希望在某个时候能够复制的指示！
- en: It also helps that [Mend](https://mend.io), the company behind Renovate, invests
    a fair bit of time and money into development of the project, as well as their
    commercial offerings on top of it, which continue to make the project sustainable
    and remain Free and Open.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，背后支持Renovate的[Mend](https://mend.io)公司，投入了大量时间和金钱进行项目的开发，以及他们在其商业产品上的持续投入，这使得该项目具有可持续性并保持自由和开放。
- en: Great documentation
  id: totrans-split-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 出色的文档
- en: Following on from the excellent community and maintainer contributions alike,
    there's also some really excellent work on a technical writing and documentation
    point of view, which makes a lot of tasks straightforward to solve.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 借助卓越的社区和维护者的贡献，还有一些在技术写作和文档方面真正出色的工作，这使得许多任务变得简单易解决。
- en: If there's something a little more complex or custom than the docs can offer,
    it's usually something that can be answered by the community in a GitHub Discussion,
    and likely could turn into a docs improvement, if necessary.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有比文档更复杂或定制的需求，通常可以在GitHub讨论中由社区回答，并且有可能转化为文档的改进，如果需要的话。
- en: There's even a great [comparison table between Renovate and other dependency
    update bots](https://docs.renovatebot.com/bot-comparison/), as well as [tips on
    how best to update your projects](https://docs.renovatebot.com/upgrade-best-practices/).
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至还有一个很棒的[比较表，比较Renovate和其他依赖更新机器人](https://docs.renovatebot.com/bot-comparison/)，以及[关于如何最好地更新你的项目的建议](https://docs.renovatebot.com/upgrade-best-practices/)。
- en: I've recently discovered a few pages and features that I wasn't aware, just
    by going through the docs.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，通过阅读文档，我发现了一些之前不知道的页面和功能。
- en: Overall
  id: totrans-split-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总体来说
- en: In summary, there's just so much that makes Renovate a greater choice than any
    of the alternatives, and I'm sure I could talk about more things that make it
    great.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，Renovate在许多方面都比任何其他替代品更好，我相信我还可以谈论更多让它出色的地方。
- en: Whether you self-host it for maximum control (such as being able to access internal
    artifact registries), or run the hosted app for ease of operations, or just run
    it from the command-line once in a while, it can be hugely useful to your experience
    as an engineer.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是自主托管以实现最大控制（例如能够访问内部工件注册表），还是运行托管应用以便操作更简单，或者偶尔在命令行上运行它，作为工程师，它都可能极大地提升你的体验。
- en: I hope you'll check it out!
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你能去看看！
