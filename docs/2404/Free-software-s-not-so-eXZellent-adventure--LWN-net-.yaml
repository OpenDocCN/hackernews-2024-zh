- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 12:49:53'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Free software's not-so-eXZellent adventure [LWN.net]
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://lwn.net/SubscriberLink/967866/c38a847c932f0536/](https://lwn.net/SubscriberLink/967866/c38a847c932f0536/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| **Benefits for LWN subscribers**The primary benefit from [subscribing to
    LWN](/subscribe/) is helping to keep us publishing, but, beyond that, subscribers
    get immediate access to all site content and access to a number of extra site
    features. Please sign up today! |'
  id: totrans-split-6
  prefs: []
  type: TYPE_TB
- en: By **Jonathan Corbet**
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: April 2, 2024
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: A common theme in early-days anti-Linux FUD was that, since anybody can contribute
    to the code, it cannot be trusted. Over two decades later, one rarely hears that
    line anymore; experience has shown that free-software communities are not prone
    to shipping overtly hostile code. But, as
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '[the backdooring of XZ](/Articles/967180/)'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: has reminded us, the embedding of malicious code is, unfortunately, not limited
    to the proprietary realm. Our community will be busy analyzing this incident for
    some time to come, but clear conclusions may be hard to come by.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: The technical details of the attack are fascinating in many ways. See [the companion
    article](/Articles/967192/) for more about that aspect of things.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: 'For those needing a short overview: the XZ package performs data compression;
    it is widely distributed and used in many different places. Somebody known as
    "Jia Tan" managed to obtain maintainer-level access to this project and used that
    access to insert a cleverly concealed backdoor that, when the XZ library was loaded
    into an OpenSSH server process, would provide an attacker with the ability to
    run arbitrary code on the affected system. This code had found its way into some
    testing distributions and the openSUSE Tumbleweed rolling distribution before
    being [discovered](/ml/oss-security/20240329155126.kjjfduxw2yrlxgzm@awork3.anarazel.de/)
    by Andres Freund. (See [this page](https://research.swtch.com/xz-timeline) for
    a detailed timeline.)'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: The hostile code was quickly removed and, while it is too soon to be sure, it
    appears that it was caught before it could be exploited. Had that discovery not
    happened, the malicious code could have found its way onto vast numbers of systems.
    The consequences of a success at that level are hard to imagine and hard to overstate.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: Social engineering
  id: totrans-split-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Like so many important projects, XZ was for years the responsibility of a single
    maintainer (Lasse Collin) who was keeping the code going on his own time. That
    led to a slow development pace at times, and patches sent by others often languished.
    That is, unfortunately, not an unusual situation in our community.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: In May 2022, Collin was subjected to extensive criticism in [this email thread](https://www.mail-archive.com/xz-devel@tukaani.org/msg00562.html)
    (and [others](https://www.mail-archive.com/xz-devel@tukaani.org/msg00555.html))
    for failing to respond quickly enough to patches. That, too, again unfortunately,
    is not uncommon in our community. Looking back now, though, the conversation takes
    on an even more sinister light; the accounts used to bully the maintainer are
    widely thought to have been sock puppets, created for this purpose and abandoned
    thereafter. In retrospect, the clear intent was to pressure Collin into accepting
    another maintainer into the project.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: During this conversation, Collin [mentioned](https://www.mail-archive.com/xz-devel@tukaani.org/msg00567.html)
    ([more than once](https://www.mail-archive.com/xz-devel@tukaani.org/msg00571.html))
    that he had been receiving off-list help from Tan, and that Tan might be given
    a bigger role in the future. That, of course, did happen, with devastating effects.
    Tan obtained the ability to push code into the repository, and subsequently abused
    that power to add the backdoor over an extended period of time. As well as adding
    the backdoor, Tan [modified the posted security policy](https://git.tukaani.org/?p=xz.git;a=blobdiff;f=.github/SECURITY.md;h=9ddfe8e946cf1810f131bf4f56156626b7ca7e31;hp=e9b3458a2c377fea765483d51df5a33ebca8fd3e;hb=af071ef7702debef4f1d324616a0137a5001c14c;hpb=0b99783d63f27606936bb79a16c52d0d70c0b56f)
    in an attempt to contain the disclosure of any vulnerabilities found in the code,
    [changed the build system](https://git.tukaani.org/?p=xz.git;a=blobdiff;f=CMakeLists.txt;h=d2b1af7ab0ab759b6805ced3dff2555e2a4b3f8e;hp=76700591059711e3a4da5b45cf58474dac4e12a7;hb=328c52da8a2bbb81307644efdb58db2c422d9ba7;hpb=eb8ad59e9bab32a8d655796afd39597ea6dcc64d)
    to silently disable the [Landlock](https://docs.kernel.org/userspace-api/landlock.html)
    security module, [redirected](https://github.com/google/oss-fuzz/commit/6403e93344476972e908ce17e8244f5c2b957dfd)
    reports from the [OSS-Fuzz](https://github.com/google/oss-fuzz) effort, and more.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: Once the malicious code became part of an XZ release, Tan took the campaign
    to distributors in an attempt to get them to ship the compromised versions as
    quickly as possible. There was also [a series of patches](/ml/linux-kernel/20240320183846.19475-1-lasse.collin@tukaani.org/)
    submitted to the kernel that named Tan as a maintainer of the in-kernel XZ code.
    The patches otherwise look innocuous on their face, but do seem intended to encourage
    users to update to a malicious version of XZ more quickly. These patches made
    it as far as linux-next, but never landed in the mainline.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: Much has been made of the fact that, by having an overworked and uncompensated
    maintainer, XZ was especially vulnerable to this type of attack. That may be true,
    and support for maintainers is a huge problem in general, but it is not the whole
    story here. Even paid and unstressed maintainers are happy to welcome help from
    outsiders. The ability to take contributions from — and give responsibility to
    — people we have never met from a distant part of the world is one of the strengths
    of our development model, after all. An attacker who is willing to play a long
    game has a good chance of reaching a position of trust in many important projects.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: This whole episode is likely to make it harder for maintainers to trust helpful
    outsiders, even those they have worked with for years. To an extent, that may
    be necessary, but it is also counterproductive (we *want* our maintainers to get
    more help) and sad. Our community is built on trust, and that trust has proved
    to be warranted almost all of the time. If we cannot trust our collaborators,
    we will be less productive and have less fun.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: Closing the door
  id: totrans-split-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As might be expected, the Internet is full of ideas of how this attack could
    have been prevented or detected. Some are more helpful than others.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: There have been numerous comments about excess complexity in our systems. They
    have a point, but few people add complexity for no reason all; features go into
    software because somebody needs them. This is also true of patches applied by
    distributors, which were a part of the complex web this attack was built on. Distributors,
    as a general rule, would rather carry fewer patches than more, and don't patch
    the software they ship without a reason. So, while both complexity and downstream
    patching should be examined and avoided when possible, they are a part of our
    world that is not going away.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: In the end, the specific software components that were targeted in this attack
    are only so relevant. Had that vector not been available, the attacker would have
    chosen another. The simple truth is that there are many vectors to choose from.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: There is certainly no lack of technical and process questions that should be
    asked with regard to this attack. What are the dependencies pulled in by critical
    software, do they make sense, and can they be reduced? Why do projects ship tarballs
    with contents that are not found in their source repository, and why do distributors
    build from those tarballs? How can we better incorporate the ongoing reproducible-builds
    work to catch subtle changes? Should testing infrastructure be somehow separated
    from code that is built for deployment? What are the best practices around the
    management of binary objects belonging to a project? Why are we still using ancient
    build systems that almost nobody understands? How can we get better review of
    the sorts of code that makes eyes glaze over? What is the proper embargo policy
    for a problem like this one?
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: These are all useful questions that need to be discussed in depth; hopefully,
    some useful conclusions will come from them. But it is important to not get hung
    up on the details of this specific attack; the next one is likely to look different.
    And that next attack may well already be underway.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: On the unhelpful side, the [suggestion](https://openssf.org/blog/2024/03/30/xz-backdoor-cve-2024-3094/)
    from the OpenSSF that part of the problem was the lack of an "OpenSSF Best Practices
    badge" is unlikely to do much to prevent the next attack. (Note that the organization
    seems to have figured that out; see [the Wayback Machine](https://web.archive.org/web/20240331210703/https://openssf.org/blog/2024/03/30/xz-backdoor-cve-2024-3094/)
    for the original version of the post). The action by GitHub to block access to
    the XZ repository — after the horse had long since left the barn, moved to a new
    state, and raised a family — served only to inhibit the analysis of the problem
    while protecting nobody.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: The source
  id: totrans-split-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This attack was carried out in a careful and patient fashion over the course
    of at least two years; it is not a case of a script kiddie getting lucky. Somebody
    — or a group of somebodies — took the time to identify a way to compromise a large
    number of systems, develop a complex and stealthy exploit, and carry out an extensive
    social-engineering campaign to get that exploit into the XZ repository and, from
    there, into shipping distributions. All of this was done while making a minimum
    of mistakes until near the end.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: It seems clear that considerable resources were dedicated to this effort. Speculating
    on where those resources came from is exactly that — speculation. But to speculate
    that this may have been a state-supported effort does not seem to be going out
    too far on any sort of limb. There are, undoubtedly, many agencies that would
    have liked to obtain this kind of access to Linux systems. We may never know whether
    one of them was behind this attempt.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: Another thing to keep in mind is that an attack of this sophistication is unlikely
    to limit itself to a single compromise vector in a single package. The chances
    are high that other tentacles, using different identities and different approaches,
    exist. So, while looking at what could have been done to detect and prevent this
    attack at an earlier stage is a valuable exercise, it also risks distracting us
    from the next attack (or existing, ongoing attacks) that do not follow the same
    playbook.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: Over the years, there have not been many attempts to insert a backdoor of this
    nature — at least, that we have detected — into core free-software projects. One
    possible explanation for that is that our software has been sufficiently porous
    that a suitably skilled attacker could always find an existing vulnerability to
    take advantage of without risking the sort of exposure that is now happening around
    the XZ attack. An intriguing (and possibly entirely wishful) thought is that the
    long and ongoing efforts to harden our systems, move to better languages, and
    generally handle security issues in a better way has made that avenue harder,
    at least some of the time, pushing some attackers into risky, multi-year backdoor
    attempts.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: Finally
  id: totrans-split-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the numerous discussions sparked by this attack, one can readily find two
    seemingly opposing points of view:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: The XZ episode shows the strength of the free-software community. Through our
    diligence and testing, we detected a sophisticated attack (probably) before it
    was able to achieve its objectives, analyzed it, and disabled it. ([Example](https://social.wildeboer.net/@jwildeboer/112184074379919145)).
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The world was saved from a massive security disaster only by dint of incredible
    luck. That such an attack could get so far is a demonstration of the weakness
    of our community; given our longstanding sustainability problems, an attack like
    this was inevitable at some point. ([Example](https://cybervillains.com/@djm/112192731055910711)).
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the end, both of those points of view can be valid at the same time. Yes,
    there was a massive bit of luck involved in the detection of this attack, and
    yes, the support for maintainers (and many other contributors) is not what it
    needs to be. But, to paraphrase [Louis Pasteur](https://en.wikiquote.org/wiki/Louis_Pasteur),
    chance favors the prepared development community. We have skilled and curious
    developers who will look into anomalous behavior, and we have a software environment
    that facilitates that sort of investigation. We never have to accept that a given
    software system just behaves strangely; we have, instead, gone to great lengths
    to ensure that it is possible to dig in and figure out why that behavior is happening
    — and to fix it. That is, indeed, a major strength; that, along with luck and
    heroic work, is what saved us.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: We must hope that we can improve our game enough that our strengths will save
    us the next time as well. There is a good chance that our community, made up of
    people who just want to get something done and most of whom are not security experts,
    has just been attacked by a powerful adversary with extensive capabilities and
    resources. We are not equipped for that kind of fight. But, then, neither is the
    proprietary world. Our community has muddled through a lot of challenges to get
    this far; we may yet muddle through this one as well.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: (
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: '[Log in](https://lwn.net/Login/?target=/Articles/967866/)'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: to post comments)
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
