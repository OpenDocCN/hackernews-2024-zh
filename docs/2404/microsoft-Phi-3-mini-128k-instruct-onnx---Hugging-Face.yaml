- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:27:36'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: microsoft/Phi-3-mini-128k-instruct-onnx · Hugging Face
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://huggingface.co/microsoft/Phi-3-mini-128k-instruct-onnx](https://huggingface.co/microsoft/Phi-3-mini-128k-instruct-onnx)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](#phi-3-mini-128k-instruct-onnx-models)Phi-3 Mini-128K-Instruct ONNX models'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This repository hosts the optimized versions of [Phi-3-mini-128k-instruct](https://aka.ms/phi3-mini-128k-instruct)
    to accelerate inference with ONNX Runtime.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: 'Phi-3 Mini is a lightweight, state-of-the-art open model built upon datasets
    used for Phi-2 - synthetic data and filtered websites - with a focus on very high-quality,
    reasoning dense data. The model belongs to the Phi-3 model family, and the mini
    version comes in two variants: 4K and 128K which is the context length (in tokens)
    it can support. The model underwent a rigorous enhancement process, incorporating
    both supervised fine-tuning and direct preference optimization to ensure precise
    instruction adherence and robust safety measures.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Optimized Phi-3 Mini models are published here in [ONNX](https://onnx.ai) format
    to run with [ONNX Runtime](https://onnxruntime.ai/) on CPU and GPU across devices,
    including server platforms, Windows, Linux and Mac desktops, and mobile CPUs,
    with the precision best suited to each of these targets.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '[DirectML](https://aka.ms/directml) support lets developers bring hardware
    acceleration to Windows devices at scale across AMD, Intel, and NVIDIA GPUs. Along
    with DirectML, ONNX Runtime provides cross platform support for Phi-3 Mini across
    a range of devices for CPU, GPU, and mobile.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: To easily get started with Phi-3, you can use our newly introduced ONNX Runtime
    Generate() API. See [here](https://aka.ms/generate-tutorial) for instructions
    on how to run it.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: '[](#onnx-models)ONNX Models'
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some of the optimized configurations we have added:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: 'ONNX model for int4 DML: ONNX model for AMD, Intel, and NVIDIA GPUs on Windows,
    quantized to int4 using [AWQ](https://arxiv.org/abs/2306.00978).'
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ONNX model for fp16 CUDA: ONNX model you can use to run for your NVIDIA GPUs.'
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ONNX model for int4 CUDA: ONNX model for NVIDIA GPUs using int4 quantization
    via RTN.'
  id: totrans-split-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ONNX model for int4 CPU and Mobile: ONNX model for your CPU and Mobile, using
    int4 quantization via RTN. There are two versions uploaded to balance latency
    vs. accuracy. Acc=1 is targeted at improved accuracy, while Acc=4 is for improved
    perf. For mobile devices, we recommend using the model with acc-level-4.'
  id: totrans-split-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: More updates on AMD, and additional optimizations on CPU and Mobile will be
    added with the official ORT 1.18 release in early May. Stay tuned!
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: '[](#hardware-supported)Hardware Supported'
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The models are tested on:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: 'GPU SKU: RTX 4090 (DirectML)'
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GPU SKU: 1 A100 80GB GPU, SKU: Standard_ND96amsr_A100_v4 (CUDA)'
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CPU SKU: Standard F64s v2 (64 vcpus, 128 GiB memory)'
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mobile SKU: Samsung Galaxy S21'
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Minimum Configuration Required:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows: DirectX 12-capable GPU and a minimum of 4GB of combined RAM'
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CUDA: NVIDIA GPU with [Compute Capability](https://developer.nvidia.com/cuda-gpus)
    >= 7.0'
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](#model-description)Model Description'
  id: totrans-split-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Developed by:** Microsoft'
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model type:** ONNX'
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Language(s) (NLP):** Python, C, C++'
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**License:** MIT'
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model Description:** This is a conversion of the Phi-3 Mini-4K-Instruct model
    for ONNX Runtime inference.'
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](#additional-details)Additional Details'
  id: totrans-split-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](#how-to-get-started-with-the-model)How to Get Started with the Model'
  id: totrans-split-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make running of the Phi-3 models across a range of devices and platforms
    across various execution provider backends possible, we introduce a new API to
    wrap several aspects of generative AI inferencing. This API make it easy to drag
    and drop LLMs straight into your app. For running the early version of these models
    with ONNX Runtime, follow the steps [here](http://aka.ms/generate-tutorial).
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
- en: '[](#performance-metrics)Performance Metrics'
  id: totrans-split-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Phi-3 Mini-128K-Instruct performs better in ONNX Runtime than PyTorch for all
    batch size, prompt length combinations. For FP16 CUDA, ORT performs up to 5X faster
    than PyTorch, while with INT4 CUDA it's up to 9X faster than PyTorch.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: 'The table below shows the average throughput of the first 256 tokens generated
    (tps) for FP16 and INT4 precisions on CUDA as measured on [1 A100 80GB GPU, SKU:
    Standard_ND96amsr_A100_v4](https://learn.microsoft.com/en-us/azure/virtual-machines/ndm-a100-v4-series).'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: '| Batch Size, Prompt Length | ORT FP16 CUDA | PyTorch Eager FP16 CUDA | FP16
    CUDA Speed Up (ORT/PyTorch) |'
  id: totrans-split-43
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-split-44
  prefs: []
  type: TYPE_TB
- en: '| 1, 16 | 134.46 | 25.35 | 5.30 |'
  id: totrans-split-45
  prefs: []
  type: TYPE_TB
- en: '| 1, 64 | 132.21 | 25.69 | 5.15 |'
  id: totrans-split-46
  prefs: []
  type: TYPE_TB
- en: '| 1, 256 | 124.51 | 25.77 | 4.83 |'
  id: totrans-split-47
  prefs: []
  type: TYPE_TB
- en: '| 1, 1024 | 110.03 | 25.73 | 4.28 |'
  id: totrans-split-48
  prefs: []
  type: TYPE_TB
- en: '| 1, 2048 | 96.93 | 25.72 | 3.77 |'
  id: totrans-split-49
  prefs: []
  type: TYPE_TB
- en: '| 1, 4096 | 62.12 | 25.66 | 2.42 |'
  id: totrans-split-50
  prefs: []
  type: TYPE_TB
- en: '| 4, 16 | 521.10 | 101.31 | 5.14 |'
  id: totrans-split-51
  prefs: []
  type: TYPE_TB
- en: '| 4, 64 | 507.03 | 101.66 | 4.99 |'
  id: totrans-split-52
  prefs: []
  type: TYPE_TB
- en: '| 4, 256 | 459.47 | 101.15 | 4.54 |'
  id: totrans-split-53
  prefs: []
  type: TYPE_TB
- en: '| 4, 1024 | 343.60 | 101.09 | 3.40 |'
  id: totrans-split-54
  prefs: []
  type: TYPE_TB
- en: '| 4, 2048 | 264.81 | 100.78 | 2.63 |'
  id: totrans-split-55
  prefs: []
  type: TYPE_TB
- en: '| 4, 4096 | 158.00 | 77.98 | 2.03 |'
  id: totrans-split-56
  prefs: []
  type: TYPE_TB
- en: '| 16, 16 | 1689.08 | 394.19 | 4.28 |'
  id: totrans-split-57
  prefs: []
  type: TYPE_TB
- en: '| 16, 64 | 1567.13 | 394.29 | 3.97 |'
  id: totrans-split-58
  prefs: []
  type: TYPE_TB
- en: '| 16, 256 | 1232.10 | 405.30 | 3.04 |'
  id: totrans-split-59
  prefs: []
  type: TYPE_TB
- en: '| 16, 1024 | 680.61 | 294.79 | 2.31 |'
  id: totrans-split-60
  prefs: []
  type: TYPE_TB
- en: '| 16, 2048 | 350.77 | 203.02 | 1.73 |'
  id: totrans-split-61
  prefs: []
  type: TYPE_TB
- en: '| 16, 4096 | 192.36 | OOM |  |'
  id: totrans-split-62
  prefs: []
  type: TYPE_TB
- en: '| Batch Size, Prompt Length | PyTorch Eager INT4 CUDA | INT4 CUDA Speed Up
    (ORT/PyTorch) |'
  id: totrans-split-63
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-split-64
  prefs: []
  type: TYPE_TB
- en: '| 1, 16 | 25.35 | 8.89 |'
  id: totrans-split-65
  prefs: []
  type: TYPE_TB
- en: '| 1, 64 | 25.69 | 8.58 |'
  id: totrans-split-66
  prefs: []
  type: TYPE_TB
- en: '| 1, 256 | 25.77 | 7.69 |'
  id: totrans-split-67
  prefs: []
  type: TYPE_TB
- en: '| 1, 1024 | 25.73 | 6.34 |'
  id: totrans-split-68
  prefs: []
  type: TYPE_TB
- en: '| 1, 2048 | 25.72 | 5.24 |'
  id: totrans-split-69
  prefs: []
  type: TYPE_TB
- en: '| 1, 4096 | 25.66 | 2.97 |'
  id: totrans-split-70
  prefs: []
  type: TYPE_TB
- en: '| 4, 16 | 101.31 | 2.82 |'
  id: totrans-split-71
  prefs: []
  type: TYPE_TB
- en: '| 4, 64 | 101.66 | 2.77 |'
  id: totrans-split-72
  prefs: []
  type: TYPE_TB
- en: '| 4, 256 | 101.15 | 2.64 |'
  id: totrans-split-73
  prefs: []
  type: TYPE_TB
- en: '| 4, 1024 | 101.09 | 2.20 |'
  id: totrans-split-74
  prefs: []
  type: TYPE_TB
- en: '| 4, 2048 | 100.78 | 1.84 |'
  id: totrans-split-75
  prefs: []
  type: TYPE_TB
- en: '| 4, 4096 | 77.98 | 1.62 |'
  id: totrans-split-76
  prefs: []
  type: TYPE_TB
- en: '| 16, 16 | 394.19 | 2.52 |'
  id: totrans-split-77
  prefs: []
  type: TYPE_TB
- en: '| 16, 64 | 394.29 | 2.41 |'
  id: totrans-split-78
  prefs: []
  type: TYPE_TB
- en: '| 16, 256 | 405.30 | 2.00 |'
  id: totrans-split-79
  prefs: []
  type: TYPE_TB
- en: '| 16, 1024 | 294.79 | 1.79 |'
  id: totrans-split-80
  prefs: []
  type: TYPE_TB
- en: '| 16, 2048 | 203.02 | 1.81 |'
  id: totrans-split-81
  prefs: []
  type: TYPE_TB
- en: '| 16, 4096 | OOM |  |'
  id: totrans-split-82
  prefs: []
  type: TYPE_TB
- en: 'Note: PyTorch compile and Llama.cpp currently do not support the Phi-3 Mini-128K-Instruct
    model.'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
- en: '[](#package-versions)Package Versions'
  id: totrans-split-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Pip package name | Version |'
  id: totrans-split-85
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-split-86
  prefs: []
  type: TYPE_TB
- en: '| torch | 2.2.0 |'
  id: totrans-split-87
  prefs: []
  type: TYPE_TB
- en: '| triton | 2.2.0 |'
  id: totrans-split-88
  prefs: []
  type: TYPE_TB
- en: '| onnxruntime-gpu | 1.18.0 |'
  id: totrans-split-89
  prefs: []
  type: TYPE_TB
- en: '| onnxruntime-genai | 0.2.0 |'
  id: totrans-split-90
  prefs: []
  type: TYPE_TB
- en: '| onnxruntime-genai-cuda | 0.2.0 |'
  id: totrans-split-91
  prefs: []
  type: TYPE_TB
- en: '| onnxruntime-genai-directml | 0.2.0 |'
  id: totrans-split-92
  prefs: []
  type: TYPE_TB
- en: '| transformers | 4.39.0 |'
  id: totrans-split-93
  prefs: []
  type: TYPE_TB
- en: '| bitsandbytes | 0.42.0 |'
  id: totrans-split-94
  prefs: []
  type: TYPE_TB
- en: '[](#appendix)Appendix'
  id: totrans-split-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](#activation-aware-quantization)Activation Aware Quantization'
  id: totrans-split-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AWQ works by identifying the top 1% most salient weights that are most important
    for maintaining accuracy and quantizing the remaining 99% of weights. This leads
    to less accuracy loss from quantization compared to many other quantization techniques.
    For more on AWQ, see [here](https://arxiv.org/abs/2306.00978).
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
- en: '[](#model-card-contact)Model Card Contact'
  id: totrans-split-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: parinitarahi, kvaishnavi, natke
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
- en: '[](#contributors)Contributors'
  id: totrans-split-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kunal Vaishnavi, Sunghoon Choi, Yufeng Li, Akshay Sonawane, Sheetal Arun Kadam,
    Rui Ren, Edward Chen, Scott McKay, Ryan Hill, Emma Ning, Natalie Kershaw, Parinita
    Rahi, Patrice Vignola, Chai Chaoweeraprasit, Logan Iyer, Vicente Rivera, Jacques
    Van Rhyn
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
