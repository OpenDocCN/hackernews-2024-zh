- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 12:57:57'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: faces.js - A JavaScript library for generating vector-based cartoon faces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://zengm.com/facesjs/](https://zengm.com/facesjs/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A JavaScript library for generating vector-based cartoon faces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To load new random faces, click here or press "r" on your keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: faces.js is a JavaScript library that generates and displays cartoon faces,
    somewhat reminiscent of Nintendo's Miis. Faces are drawn as SVGs and are also
    represented by a small JavaScript object, which allows you to store that object
    and then draw the same face again later.
  prefs: []
  type: TYPE_NORMAL
- en: Originally faces.js was made for [Basketball GM](https://basketball-gm.com/)
    and other games by [ZenGM](https://zengm.com/), but now it is used in several
    other projects.
  prefs: []
  type: TYPE_NORMAL
- en: For users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use the [face editor](/facesjs/editor/) to generate a custom face, and
    then export in JSON/SVG/PNG format.
  prefs: []
  type: TYPE_NORMAL
- en: For developers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: (This is just a copy of
  prefs: []
  type: TYPE_NORMAL
- en: '[the README from the GitHub repo](https://github.com/zengm-games/facesjs)'
  prefs: []
  type: TYPE_NORMAL
- en: .)
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Import it with ES modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'or CommonJS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, generate a random face:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And display it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you’d like a non-random face, look inside the `face` variable and you’ll
    see all the available options for a manually constructed face.
  prefs: []
  type: TYPE_NORMAL
- en: Overrides
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Both `display` and `generate` accept an optional argument, specifying values
    to override either the randomly generated face (for `generate`) or the supplied
    face (for `display`). For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `generate` function takes a second optional argument, which takes in extra
    parameters for player creation, in the form of an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate a female/male face (default is male):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Assign a race attribute that can be white, black, asian, or brown (default
    is random):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Or both together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Exporting SVGs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use `faceToSvgString` to convert a face object to an SVG string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also specify overrides, similar to `display`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`faceToSvgString` is intended to be used in Node.js If you are doing client-side
    JS, it would be more efficient to render a face to the DOM using `display` and
    then [convert it to a blob like this](https://github.com/zengm-games/facesjs/blob/19ce236af6adbf76db29c4e669210b30e1de0e1a/public/editor/downloadFace.ts#L61-L64).'
  prefs: []
  type: TYPE_NORMAL
- en: CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also use `facesjs` as a CLI program. All of the functionality from `generate`
    and `display` are available on the CLI too.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Output a random face to stdout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate a blue female face and output to stdout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate a male white face and save it to test.svg:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Options
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`--input-file` and `--input-json` can specify either an entire face object
    or a partial face object. If it’s a partial face object, the other features will
    be random.'
  prefs: []
  type: TYPE_NORMAL
- en: Development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Running `yarn run dev` will do a few things:'
  prefs: []
  type: TYPE_NORMAL
- en: Give you a URL to open the face editor UI in your browser
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Watch for changes to the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Watch for changes to the facial feature SVG files
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the face editor UI when any code or SVG changes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This lets you immediately see your changes as you work.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new facial features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each face is assembled from multiple SVGs. You can see them within the “svg”
    folder. If you want to add another feature, just create an SVG (using a vector
    graphics editor like [Inkscape](https://inkscape.org/)) and put it in the appropriate
    folder. It should automatically work. If not, it’s a bug, please let me know!
  prefs: []
  type: TYPE_NORMAL
- en: When creating SVGs, assume the size of the canvas is 400x600\. For most features,
    it doesn’t matter where you draw on the canvas because it will automatically identify
    your object and position it in the appropriate place. But for head and hair SVGs,
    position does matter. For those you do need to make sure they are in the correct
    place on a 400x600 canvas, same as the existing head and hair SVGs. Otherwise
    it won’t know where to place the other facial features relative to the head and
    hair.
  prefs: []
  type: TYPE_NORMAL
- en: If you find it not quite placing a facial feature exactly where you want, it’s
    because by default it finds the center of the eye/eyebrow/mouth/nose SVG and places
    that in a specific location. If that’s not good for a certain facial feature,
    that behavior can be overridden in code. For instance, see how it’s done in display.js
    for the “pinocchio” nose which uses the left side of the SVG rather than the center
    to place it.
  prefs: []
  type: TYPE_NORMAL
- en: If you want a brand new “class” of facial features (like facial hair, or earrings,
    or hats) you’ll have to create a new subfolder within the “svg” folder and edit
    the code to recognize your new feature.
  prefs: []
  type: TYPE_NORMAL
- en: If you find any of this confusing, feel free to reach out to me for help! I
    would love for someone to help me make better looking faces :)
  prefs: []
  type: TYPE_NORMAL
- en: Credits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[dumbmatter](https://github.com/dumbmatter) wrote most of the code, [TravisJB89](https://github.com/TravisJB89)
    made most of the graphics, [Lia Cui](https://liacui.carrd.co/) made most of the
    female graphics, [gurushida](https://github.com/gurushida) wrote the code to export
    faces as SVG strings, and [tomkennedy22](https://github.com/tomkennedy22) wrote
    most of the editor UI code.'
  prefs: []
  type: TYPE_NORMAL
