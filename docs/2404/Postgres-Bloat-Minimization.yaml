- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:33:09'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:33:09'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Postgres Bloat Minimization
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Postgres Bloat Minimization
- en: 来源：[https://supabase.com/blog/postgres-bloat](https://supabase.com/blog/postgres-bloat)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://supabase.com/blog/postgres-bloat](https://supabase.com/blog/postgres-bloat)
- en: How data of Postgres tables stored[#](#how-data-of-postgres-tables-stored)
  id: totrans-split-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Postgres 表数据如何存储[#](#how-data-of-postgres-tables-stored)
- en: By default, all table data in Postgres are physically stored using the “heap”
    method. So every database is a set of 1Gb files (”segments”) and each file is
    logically split into 8Kb pages. Actual table rows are put into any page with enough
    free space.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Postgres 中所有表数据都是使用“堆”方法物理存储的。因此，每个数据库都是一组1Gb文件（“段”），每个文件逻辑上分成8Kb页面。实际表行放置在具有足够自由空间的任何页面中。
- en: When the row data is updated, a new version of a whole row is constructed and
    written (to any free space). The old one remains because, at the time of the update,
    the transaction is not completed and can be rolled back in the future. When the
    transaction is completed we’ll have two or several versions of the same row in
    the table. Cleaning old ones is by an asynchronous process called vacuum (and
    autovacuum).
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当行数据更新时，构造并写入一个整个行的新版本（到任何空闲空间）。旧版本仍然存在，因为在更新时，事务尚未完成，未来可能会回滚。事务完成时，我们将在表中拥有两个或多个相同行的版本。清理旧版本由称为清理（和自动清理）的异步过程完成。
- en: Vacuum goes through all table files looking for row versions that were updated
    or deleted by already completed transactions and frees the space on the pages.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 清理通过已完成事务更新或删除的所有表文件中的行版本，并在页面上释放空间。
- en: Then it updates the table’s free-space-map to reflect that some page has a certain
    amount of free space for row inserts.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它更新表的自由空间映射，以反映某些页面具有用于行插入的特定数量的自由空间。
- en: It also updates the visibility map for a page. It marks that all remaining rows
    are visible. So index scans can skip visibility checks, which is not so for the
    modified page before vacuuming. This significantly increases the speed of queries
    using indexes.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它还更新页面的可见性图。它标记所有剩余行都是可见的。因此，索引扫描可以跳过可见性检查，这对于修改前的页面不适用。这显著提高了使用索引的查询速度。
- en: In many cases vacuum runs automatically, cleans everything, and requires little
    care. But in some scenarios, we need to go deeper and tune the autovacuum parameters
    or run the vacuum manually.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，自动清理会自动运行，清理一切，需要很少的关注。但在某些情况下，我们需要深入了解并调整自动清理参数或手动运行清理。
- en: Vacuum marks space in a relation file as free to use for future row inserts
    or updates. And it’s not a problem unless we insert many rows, delete many rows
    at once, and then don’t make any inserts or updates. Space remains reserved in
    a file but we don’t use it.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 清理将关系文件中的空间标记为未来行插入或更新可用。除非我们一次插入许多行，一次删除许多行，然后不进行任何插入或更新，否则这不是问题。文件中的空间仍保留，但我们不使用它。
- en: 'In this case, we could free actual filesystem space by running more aggressive
    mode:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以通过运行更积极的模式来释放实际文件系统空间：
- en: It will rebuild the table from live rows and they will be placed compactly so
    that filesystem space will be freed. The downside is that it needs an exclusive
    lock and you won’t be able to modify the table while `VACUUM FULL` does it's work.
    It’s wise to execute that process when the database is least accessed e.g. at
    night.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它将从活动行重新构建表，并将其紧凑放置，以便释放文件系统空间。缺点是它需要一个排他锁，并且在`VACUUM FULL`执行时无法修改表。建议在数据库最少访问时执行此过程，例如晚上。
- en: 'An alternative way that doesn’t need full locks is using pg_repack extension:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不需要完全锁定的替代方法是使用 pg_repack 扩展：
- en: '`_10'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`_10'
- en: pg_repack --table mytable test`
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`pg_repack --table mytable test`'
- en: pg_repack operates similarly to VACUUM FULL for database `test` and table `mytable`.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: pg_repack 类似于对数据库 `test` 和表 `mytable` 进行 `VACUUM FULL` 操作。
- en: 'To see database bloat via the [Supabase CLI](https://supabase.com/docs/guides/cli/getting-started)
    run:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过[Supabase CLI](https://supabase.com/docs/guides/cli/getting-started)查看数据库膨胀情况，请运行：
- en: '`_10'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`_10'
- en: $ supabase inspect db bloat`
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: $ supabase inspect db bloat`
- en: 'or:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: '`_13'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`_13'
- en: -- number of dead rows
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: -- 未使用行数
- en: _13
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`_13'
- en: -- number of live rows`
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: -- 活动行数`
- en: If the numbers differ by more than 2x, chances are that the autovacuum didn’t
    start or hasn’t completed for a table. There could be several legitimate reasons
    for this.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数字相差超过2倍，很可能是自动清理未启动或未完成表。可能有几个合法的原因。
- en: 'You can see information for the last successful autovacuum by running:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令查看最后一次成功的自动清理信息：
- en: '`_10'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`_10'
- en: $ supabase inspect db vacuum-stats`
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: $ supabase inspect db vacuum-stats`
- en: 'or:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: 'Let’s turn on autovacuum logging so that all autovacuum events land in the
    log:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开autovacuum日志，以便所有autovacuum事件都记录在日志中：
- en: '`_10'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`_10'
- en: ALTER TABLE mytable SET log_autovacuum_min_duration to 0;`
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: ALTER TABLE mytable SET log_autovacuum_min_duration to 0;`
- en: 'There are two ways we can encounter this situation:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会遇到这种情况的两种方式：
- en: autovacuum hasn’t started
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: autovacuum尚未启动
- en: autovacuum did start, (possibly multiple times) but never succeeded
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: autovacuum已启动，（可能多次），但从未成功过
- en: Autovacuum starts based on several configuration parameters like timeout and
    pattern of access to a particular table. Maybe it’s even legitimate that it hasn’t
    started.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: Autovacuum根据几个配置参数如超时和对特定表的访问模式启动。也许它甚至合理地没有启动。
- en: '`autovacuum_vacuum_threshold` - number of rows updated or deleted in a table
    to invoke autovacuum'
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autovacuum_vacuum_threshold` - 表中更新或删除的行数以调用autovacuum'
- en: '`autovacuum_vacuum_insert_threshold` - number of rows inserted into a table
    to invoke autovacuum'
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autovacuum_vacuum_insert_threshold` - 插入到表中的行数以调用autovacuum'
- en: '`autovacuum_vacuum_scale_factor` - a fraction of table modified by updates
    or deletes to invoke autovacuum'
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autovacuum_vacuum_scale_factor` - 由更新或删除修改的表的分数以调用autovacuum'
- en: '`autovacuum_vacuum_insert_scale_factor` - a fraction of table modified by inserts
    to invoke autovacuum'
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autovacuum_vacuum_insert_scale_factor` - 由插入修改的表的分数以调用autovacuum'
- en: 'With all these parameters set, the autovacuum will start if the number of rows
    updated or deleted exceeds:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有这些参数设置完成后，如果更新或删除的行数超过以下数值，自动清理将开始：
- en: '`_10'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`_10'
- en: autovacuum_vacuum_scale_factor * size_of_table + autovacuum_vacuum_threshold`
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: autovacuum_vacuum_scale_factor * size_of_table + autovacuum_vacuum_threshold`
- en: 'The same logic applies for inserts. Default scale factors are 20% of a table,
    which could be too high for big tables. If we want autovacuum to occur on large
    tables more frequently and take less time each run, decrease the default values
    for these tables e.g.:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的逻辑适用于插入操作。默认比例因子为表的20%，这对大表可能太高。如果我们希望对大表更频繁地进行自动清理，并且每次运行所需时间较短，则可以减少这些表的默认值，例如：
- en: '`_10'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`_10'
- en: ALTER TABLE mytable SET autovacuum_vacuum_scale_factor to 0.05;`
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: ALTER TABLE mytable SET autovacuum_vacuum_scale_factor to 0.05;`
- en: '`autovacuum_naptime` (default 1 min) - Each 1-minute autovacuum daemon will
    see the state of all tables in the database and decide whether to start autovacuum
    for a table. Most often this parameter does not need to be modified.'
  id: totrans-split-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autovacuum_naptime`（默认为1分钟） - 每1分钟，autovacuum守护进程将检查数据库中所有表的状态，并决定是否为表启动autovacuum。大多数情况下，这个参数不需要修改。'
- en: 'To see global vacuum settings for your cluster let’s run:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看集群的全局清理设置，让我们运行：
- en: '`_10'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`_10'
- en: SELECT * from pg_settings where category like 'Autovacuum';`
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT * from pg_settings where category like 'Autovacuum';`
- en: 'To see current settings for a table (that overrides global settings) run:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看表的当前设置（覆盖全局设置），运行：
- en: '`_10'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`_10'
- en: SELECT relname, reloptions FROM pg_class WHERE relname='mytable';`
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT relname, reloptions FROM pg_class WHERE relname='mytable';`
- en: The most common reason autovacuum doesn’t succeed is long-running open transactions
    that access old row versions. In that case, Postgres recognizes that the row versions
    are still needed so any row versions created after that point can’t be marked
    as dead. One common cause for this problem is interactive sessions that were left
    open on accident. When tuples can’t be marked as dead, the database begins to
    bloat.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: autovacuum无法成功的最常见原因是长时间运行的访问旧行版本的未关闭事务。在这种情况下，Postgres会认识到仍然需要这些行版本，因此在此之后创建的任何行版本都无法标记为死行。导致此问题的常见原因之一是意外保持打开的交互会话。当无法标记行为死行时，数据库会开始膨胀。
- en: 'To see all open transactions run:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有打开的事务运行：
- en: '`_10'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`_10'
- en: SELECT xact_start, state FROM pg_stat_activity;`
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT xact_start, state FROM pg_stat_activity;`
- en: 'To close transactions found to be idling:'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了关闭发现处于空闲状态的事务：
- en: '`_10'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`_10'
- en: SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE xact_start = '<value
    from previous query>';`
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE xact_start = '<previous
    query中的值>';`
- en: 'For automatically closing idle transactions in a session:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 用于在会话中自动关闭空闲事务的参数：
- en: '`_10'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`_10'
- en: SET idle_in_transaction_session_timeout TO '10000s';`
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: SET idle_in_transaction_session_timeout TO '10000s';`
- en: The same parameter could be set per role or database as needed.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 同一参数可以根据需要设置为角色或数据库。
- en: Another, less likely, possibility is that autovacuum can’t succeed due to locks.
    If some of your processes take the `SHARE UPDATE EXCLUSIVE` lock e.g. `ALTER TABLE`
    clause, this lock will prevent vacuum from processing a table. Lock conflicts
    in your ordinary transactions could cause `SHARE UPDATE EXCLUSIVE` to be taken
    for a long time. A good recipe when this happens is to cancel all the open transactions
    and run VACUUM for a table manually (or wait until the next autovacuum comes for
    it).
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个不太可能的可能性是由于锁定导致自动真空无法成功。如果您的某些进程获取了`SHARE UPDATE EXCLUSIVE`锁，例如`ALTER TABLE`子句，此锁将阻止真空处理表。在您的普通事务中的锁冲突可能导致长时间获取`SHARE
    UPDATE EXCLUSIVE`。当发生这种情况时的一个好方法是取消所有打开的事务并手动为表运行真空（或等待下一个自动真空来处理它）。
- en: '`_10'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: _10
- en: SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE state = 'active';`
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE state = 'active';`
- en: There could be too few autovacuum workers or each worker could operate slowly
    due to the low setting of `autovacuum_work_mem`.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是自动真空工作者过少或每个工作者由于`autovacuum_work_mem`设置低而运行缓慢。
- en: '`autovacuum_max_workers` (default 3) - Number of parallel workers doing autovacuum
    for tables. When you have enough cores, increasing the default value is worthwhile.
    Note that this will decrease the number of possible backends or regular parallel
    workers running at a time.'
  id: totrans-split-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autovacuum_max_workers`（默认为3） - 执行表自动真空的并行工作者数量。当您有足够的核心时，增加默认值是值得的。请注意，这将减少同时运行的可能后端或常规并行工作者的数量。'
- en: '`autovacuum_work_mem` (default equal to `maintenance_work_mem` or 64Mb) - work
    memory that is used per autovacuum worker. If you see in your logs that autovacuum
    for some tables starts but takes a long time, that time may be decreased by increasing
    this value. This parameter can only be modified in the config file.'
  id: totrans-split-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autovacuum_work_mem`（默认等于`maintenance_work_mem`或64Mb） - 每个自动真空工作者使用的工作内存。如果在日志中看到某些表的自动真空开始但花费了很长时间，可能可以通过增加此值减少时间。此参数只能在配置文件中修改。'
- en: 'Vacuum and autovacuum are efficient ways to maintain the tables without bloat.
    They have several parameters that allow efficient tuning. Some insight into what
    database does can help prevent the cases where autovacuum becomes problematic
    and bloat increases i.e.:'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 用真空和自动真空是维护表而不膨胀的有效方式。它们有几个参数允许有效调整。对数据库做一些了解可以帮助防止自动真空成为问题，导致膨胀增加，例如：
- en: Long open transactions
  id: totrans-split-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长时间开放的事务
- en: Stuck locks
  id: totrans-split-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卡住的锁
- en: Insufficient resources allocated to vacuuming
  id: totrans-split-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配给真空不足的资源
- en: Space not freed on a filesystem level after massive table modifications
  id: totrans-split-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件系统级别在大规模表修改后未释放的空间
- en: 'For more information about bloat and vacuuming, here are some direct references
    to resources:'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有关膨胀和真空的更多信息，请参考以下资源：
- en: '[Full official documentation for vacuum](https://www.postgresql.org/docs/current/routine-vacuuming.html#VACUUM-BASICS)'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[真空的完整官方文档](https://www.postgresql.org/docs/current/routine-vacuuming.html#VACUUM-BASICS)'
- en: '[Per-table vacuum parameters](https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS)'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[每个表的真空参数](https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS)'
- en: '[Global autovacuum parameters (most of them need modifying postgresql.conf,
    but could be overridden by per-table parameters)](https://www.postgresql.org/docs/current/runtime-config-autovacuum.html)'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[全局自动真空参数（大多数需要修改 postgresql.conf，但可以由每个表参数覆盖）](https://www.postgresql.org/docs/current/runtime-config-autovacuum.html)'
- en: '[Supabase CLI reference](https://supabase.com/docs/reference/cli/global-flags)'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[Supabase CLI 参考](https://supabase.com/docs/reference/cli/global-flags)'
