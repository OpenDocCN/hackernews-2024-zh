- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 12:47:10'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 12:47:10'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: What even is a JSON Number?
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON 数字是什么？
- en: 来源：[https://blog.trl.sn/blog/what-is-a-json-number/](https://blog.trl.sn/blog/what-is-a-json-number/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.trl.sn/blog/what-is-a-json-number/](https://blog.trl.sn/blog/what-is-a-json-number/)
- en: <main id="skip">
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main id="skip">
- en: What even is a JSON Number?
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON 数字是什么？
- en: Not a question people generally ponder, and seems fairly straightforward. It's
    a number, *obviously*! But the question turns out to be somewhat hard to answer,
    and for API designers especially, the answer is really important to know! So lets
    explore by diving into the various JSON specifications and implementations. The
    findings are summarized at the end, so feel free to skip to the bottom if you
    just want to know the answer and not wade through the exploration.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是人们通常考虑的问题，看起来相当直接。这是一个数字，*显而易见*！但事实证明，这个问题有些难以回答，尤其对于 API 设计者来说，答案非常重要！因此，让我们通过深入研究各种
    JSON 规范和实现来探索一下。研究结果在文末总结，如果只想知道答案而不想深入探讨，可以直接跳到底部。
- en: Table of contents
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录
- en: Authoritative sources
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权威来源
- en: 'JSON is defined by two primary standards: [Ecma-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf)
    and [RFC 8259](https://datatracker.ietf.org/doc/html/rfc8259). Both standards
    are semantically identical, but RFC 8259 provides some additional recommendations
    for good interoperability. A related standard, [RFC 7493](https://datatracker.ietf.org/doc/html/rfc7493),
    describes the closely related Internet JSON format, a restricted profile of JSON
    which adds a bit more teeth to the recommendations found in RFC 8259\. Additionally,
    in the context of API descriptions, [JSON Schema](https://json-schema.org/draft/2020-12/json-schema-core)
    defines a number data type, which is also normatively referenced by [OpenAPI](https://spec.openapis.org/oas/v3.1.0).
    Let''s look at each of these specifications for clues.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 由两个主要标准定义：[Ecma-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf)
    和 [RFC 8259](https://datatracker.ietf.org/doc/html/rfc8259)。这两个标准在语义上是相同的，但 RFC
    8259 提供了一些额外的建议，用于良好的互操作性。一个相关的标准，[RFC 7493](https://datatracker.ietf.org/doc/html/rfc7493)，描述了紧密相关的
    Internet JSON 格式，这是 JSON 的一个限制配置文件，它在 RFC 8259 中的建议中添加了更多的约束。此外，在 API 描述的背景下，[JSON
    Schema](https://json-schema.org/draft/2020-12/json-schema-core) 定义了一个数字数据类型，这也是
    [OpenAPI](https://spec.openapis.org/oas/v3.1.0) 正式引用的。
- en: ECMA-404
  id: totrans-split-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ECMA-404
- en: A number is a sequence of decimal digits with no superfluous leading zero. It
    may have a preceding minus sign (U+002D). It may have a fractional part prefixed
    by a decimal point (U+002E). It may have an exponent, prefixed by e (U+0065) or
    E (U+0045) and optionally + (U+002B) or – (U+002D)
  id: totrans-split-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 数字是一系列十进制数字，不含不必要的前导零。它可能有一个前置减号（U+002D）。它可能有一个由小数点（U+002E）前缀的小数部分。它可能有一个指数，由
    e（U+0065）或 E（U+0045）前缀，并可选地有 +（U+002B）或 -（U+002D）。
- en: So, a JSON number is a sequence of digits with an optional sign, fractional
    part, and exponent. The description is purely syntactical.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，JSON 数字是一个带有可选符号、小数部分和指数的数字序列。这个描述纯粹是句法的。
- en: RFC 8259
  id: totrans-split-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RFC 8259
- en: 'This specification provides an equivalent ABNF grammar to the railroad diagrams
    provided by ECMA-404\. It also explicitly allows implementations to set limits
    on the range and precision of numbers accepted. It goes on to note:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规范提供了一个与 ECMA-404 铁路图相等的 ABNF 语法。它还明确允许实现对接受的数字的范围和精度设置限制。它继续指出：
- en: Since software that implements IEEE 754 binary64 (double precision) numbers
    is generally available and widely used, good interoperability can be achieved
    by implementations that expect no more precision or range than these provide
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由于广泛使用实现 IEEE 754 二进制 64 位（双精度）数的软件，可以通过期望不超过其提供的精度或范围的实现来实现良好的互操作性。
- en: This is pointing out that some JSON implementations use doubles to store JSON
    number values. The implementation found in browsers and used by billions of people
    around the world is one such implementation. So a JSON number will be interoperable
    if its range and precision fit within a double.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明，一些 JSON 实现使用双精度数来存储 JSON 数值。在浏览器中找到的并被全球数十亿人使用的实现就是这样一个实现。因此，如果 JSON 数字的范围和精度符合双精度数的要求，则可以实现互操作性。
- en: RFC 7493
  id: totrans-split-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RFC 7493
- en: 'This specification makes RFC 8259''s informative note a normative SHOULD NOT:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此规范使 RFC 8259 的信息性注释成为规范上的 SHOULD NOT：
- en: I-JSON messages SHOULD NOT include numbers that express greater magnitude or
    precision than an IEEE 754 double precision number provides
  id: totrans-split-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: I-JSON消息不应包含表达比IEEE 754双精度数提供的更大幅度或精度的数字
- en: It goes on to recommend that if you need greater range or precision, that you
    should encode the number as a string.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 它继续建议，如果需要更大的范围或精度，则应将数字编码为字符串。
- en: JSON Schema & OpenAPI
  id: totrans-split-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON Schema和OpenAPI
- en: 'JSON Schema describes a number as:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: JSON Schema将数字描述为：
- en: An arbitrary-precision, base-10 decimal number value, from the JSON "number"
    value
  id: totrans-split-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从JSON“number”值开始的任意精度的十进制数值
- en: JSON Schema and OpenAPI also define the concept of an integer. JSON schema defines
    an integer in terms of its value, as a number with a zero fractional part. It
    also notes that integer values SHOULD NOT be encoded with a fractional part. OpenAPI
    defines an integer in terms of its syntax, as a JSON number without a fractional
    part or exponent part.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: JSON Schema和OpenAPI还定义了整数的概念。 JSON schema根据其值定义整数，即零分数部分的数字。它还指出，整数值不应以分数部分编码。
    OpenAPI根据其语法定义整数，作为没有小数部分或指数部分的JSON数字。
- en: JSON numbers in practice
  id: totrans-split-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实践中的JSON数字
- en: 'RFC 8259 raises the important point that ultimately implementations decide
    what a JSON number is. Certainly there are limits to range and precision in practice,
    but what are they? We know that at least one extremely widely deployed implementation
    is limited to double precision. Are there other interoperability concerns to consider?
    Let''s investigate by going down two parallel tracks: JSON parsers and serializers
    across some common languages, and code generators in the OpenAPI ecosystem.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: RFC 8259提出了一个重要观点，即最终实现决定了JSON数字是什么。在实践中，确实存在范围和精度的限制，但是它们是什么？我们知道至少有一个广泛部署的实现受到双精度限制。还有其他互操作性问题需要考虑吗？让我们通过两条并行轨道进行调查：跨一些常见语言的JSON解析器和序列化器，以及OpenAPI生态系统中的代码生成器。
- en: Language implementations
  id: totrans-split-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语言实现
- en: Language implementations ultimately decide what a JSON number is, so let's look
    at a few examples and check for common patterns. For languages which have configurable
    serialization/deserialization, only the default behavior is covered.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 语言实现最终决定了JSON数字是什么，因此让我们看几个例子，并检查是否存在常见模式。对于具有可配置序列化/反序列化功能的语言，只涵盖默认行为。
- en: JavaScript
  id: totrans-split-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: JavaScript
- en: JavaScript's built-in JSON implementation only works with the built-in `Number`
    type, so all values are limited to the range and precision of a double. Serialization
    of `BigInt` is not supported by default. JavaScript also makes it impossible to
    preserve a numeric literal exactly when round-tripping, e.g. integers-as-decimals
    like `1.0` will be put back on the wire as `1`. There is a [language proposal](https://github.com/tc39/proposal-json-parse-with-source)
    to allow fixing both of these issues without swapping out the entire parser.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的内置JSON实现仅适用于内置的`Number`类型，因此所有值都限制在double的范围和精度内。默认情况下不支持BigInt的序列化。JavaScript还使得在往返过程中无法精确保留数值文字，例如将整数作为小数（如`1.0`）放回时，会将其作为`1`发送到网络。有一个[语言提案](https://github.com/tc39/proposal-json-parse-with-source)可以解决这些问题，而不用替换整个解析器。
- en: Python 3.8
  id: totrans-split-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Python 3.8
- en: Integers, decimals, and exponentials are treated differently. Integers can round
    trip as JSON numbers within the range of -10^(4299) to 10^(4299), while decimals
    and exponentials use doubles and so are limited to double range and precision.
    Integers outside the range an `int` can be serialized to result in a `ValueError`.
    Exponentials and decimals outside the range of doubles result in `inf`. When parsing
    then serializing exponentials, the exponential formatting is lost.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 整数、小数和指数处理方式不同。整数可以作为JSON数字在-10^(4299)到10^(4299)范围内往返，而小数和指数使用double，因此受到double范围和精度的限制。超出int范围的整数在序列化时会导致`ValueError`。超出double范围的指数和小数结果为`inf`。在解析和序列化指数时，指数格式会丢失。
- en: C# (.NET 8, System.Text.JSON)
  id: totrans-split-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: C#（.NET 8，System.Text.JSON）
- en: C#'s `System.Text.JSON` library is the recommended way to handle JSON data these
    days, though `Newtonsoft.JSON` is also commonly used. We examine the behavior
    of the former, the latter likely differs.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: C#的`System.Text.JSON`库是处理JSON数据的推荐方式，尽管`Newtonsoft.JSON`也常用。我们检查前者的行为，后者可能有所不同。
- en: C# supports deserializing into appropriate data types through the use of `TryGet*`
    APIs. Using this API, it is possible to deserialize integer types losslessly up
    to `int64` and somewhat larger integers into a `decimal`. `decimal` can also be
    used to represent decimal values, potentially with precision loss. If you know
    the schema in advance, you can add support for deserializing into other data types,
    like `BigInteger`.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: C# 支持通过 `TryGet*` API 将数据反序列化为适当的数据类型。使用此 API，可以无损地反序列化整数类型，最多到 `int64`，并将稍大的整数反序列化为
    `decimal`。`decimal` 也可以用于表示小数值，可能会有精度损失。如果事先知道模式，可以添加对其他数据类型（如 `BigInteger`）的反序列化支持。
- en: C# also supports getting the raw text of the literal which allows for custom
    handling and round-tripping of arbitrary literals without precision loss.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: C# 还支持获取字面量的原始文本，允许自定义处理和往返任意字面量而不会丢失精度。
- en: Java (JDK 11+, Jackson)
  id: totrans-split-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Java（JDK 11+，Jackson）
- en: Java typically uses the `Jackson` library to handle JSON serialization and deserialization.
    `Jackson` allows serialization and deserialization into any Java numeric type,
    including `BigDecimal`, allowing it to represent numeric literals of any range
    and precision without precision loss.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: Java 通常使用 `Jackson` 库来处理 JSON 的序列化和反序列化。`Jackson` 允许序列化和反序列化到任何 Java 数字类型，包括
    `BigDecimal`，从而可以表示任何范围和精度的数字字面量而不会丢失精度。
- en: Rust (serde)
  id: totrans-split-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Rust（serde）
- en: Rust's `serde_json` crate is commonly used for JSON serialization and deserialization.
    It supports deserialization of integer values that fit within the range of an
    `i64`/`u64`. It also supports deserialization of integer and decimal values that
    fit within the range of an `f64`, though doing so may result in precision loss.
    Integers and decimals outside the range of an `f64` result in an error. Exponentials
    are always deserialized as doubles. However, `serde` has a `arbitrary_precision`
    configuration flag that can be used to round-trip arbitrary numeric values without
    precision loss assuming they are not deserialized in a lossy fashion. Support
    for deseralizing into other data types can be added with some additional code,
    but requires knowing the schema of the data.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 的 `serde_json` 库通常用于 JSON 的序列化和反序列化。它支持反序列化符合 `i64`/`u64` 范围内的整数值。它还支持反序列化符合
    `f64` 范围内的整数和小数值，尽管这样做可能会导致精度损失。超出 `f64` 范围的整数和小数将导致错误。指数始终反序列化为 double 类型。但是，`serde`
    具有一个 `arbitrary_precision` 配置标志，可以用于往返任意数字值而不会丢失精度，假设它们没有以丢失精度的方式反序列化。可以通过一些额外的代码将支持添加到其他数据类型中，但需要知道数据的模式。
- en: Go
  id: totrans-split-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Go
- en: Go's `encoding/json` library is capable of dynamically unmarshalling JSON number
    literals using the`float64` type. If you know the schema in advance, you can parse
    known integers into an appropriate integer type up to `int64`, and parse decimals
    into a `float32` type as appropriate. Support for unmarshalling e.g. decimal types
    or big integers can be added with some additional code, but also requires knowing
    the schema of the data.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: Go 的 `encoding/json` 库能够动态地将 JSON 数字字面量解组为 `float64` 类型。如果事先知道模式，可以将已知整数解析为适当的整数类型，最多到
    `int64`，并根据需要将小数解析为 `float32` 类型。可以通过一些额外的代码添加对例如小数类型或大整数类型的解组支持，但同样需要知道数据的模式。
- en: Go can be instructed to deserialize number literals into strings, allowing for
    custom handling and round-tripping of arbitrary literals without precision loss.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: Go 可以指示将数字字面量反序列化为字符串，允许自定义处理和往返任意字面量而不会丢失精度。
- en: Summary
  id: totrans-split-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 摘要
- en: 'To summarize the behavior of the various implementations, we can examine their
    behavior with the following values:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 总结各种实现的行为，我们可以检查它们对以下值的行为：
- en: '| Number literal | Description |'
  id: totrans-split-48
  prefs: []
  type: TYPE_TB
  zh: '| 数字字面量 | 描述 |'
- en: '| --- | --- |'
  id: totrans-split-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 10 | Small integer |'
  id: totrans-split-50
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 小整数 |'
- en: '| 1000000000 | Medium integer: beyond int32 range, within int64 range |'
  id: totrans-split-51
  prefs: []
  type: TYPE_TB
  zh: '| 1000000000 | 中等整数：超出 int32 范围，但在 int64 范围内 |'
- en: '| 10000000000000001 | Large integer: beyond double range, within int64 range
    |'
  id: totrans-split-52
  prefs: []
  type: TYPE_TB
  zh: '| 10000000000000001 | 大整数：超出 double 范围，但在 int64 范围内 |'
- en: '| 100000000000000000001 | Huge integer: beyond the range of an int64 |'
  id: totrans-split-53
  prefs: []
  type: TYPE_TB
  zh: '| 100000000000000000001 | 巨大整数：超出 int64 范围 |'
- en: '| 1[309 zeros] | Ridonculous integer: beyond the range of a decimal128 |'
  id: totrans-split-54
  prefs: []
  type: TYPE_TB
  zh: '| 1[309 个0] | 荒谬整数：超出 decimal128 范围 |'
- en: '| 10.0 | Low-precision decimal |'
  id: totrans-split-55
  prefs: []
  type: TYPE_TB
  zh: '| 10.0 | 低精度小数 |'
- en: '| 10000000000000001.1 | High-precision decimal: precision > double |'
  id: totrans-split-56
  prefs: []
  type: TYPE_TB
  zh: '| 10000000000000001.1 | 高精度小数：精度 > double |'
- en: '| 1.[34 ones] | Ridonculous-precision decimal: precision > decimal128 |'
  id: totrans-split-57
  prefs: []
  type: TYPE_TB
  zh: '| 1.[34 个1] | 荒谬精度小数：精度 > decimal128 |'
- en: '| 1E2 | Small expontential |'
  id: totrans-split-58
  prefs: []
  type: TYPE_TB
  zh: '| 1E2 | 小指数形式 |'
- en: '| 1E309 | Large exponential: beyond the range of a float |'
  id: totrans-split-59
  prefs: []
  type: TYPE_TB
  zh: '| 1E309 | 大指数：超出 float 范围 |'
- en: The following table shows the data type used to represent the literal in each
    language. Cells colored with grey are errors. Cells colored with red are non-errors
    with precision loss. Only the default serialization behavior is covered here.
    It may be possible to code defensively against these kinds of errors by configuring
    the serializer or through other mechanisms. Additionally, the test code I used
    attempts to use a dynamic/schemaless parsing path if it is available. For some
    languages, knowing the schema in advance can result in better behavior. The test
    code can be found in the appendix.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下表展示了每种语言中用于表示文本字面值的数据类型。灰色单元格表示错误，红色单元格表示有精度损失但非错误。这里仅涵盖默认的序列化行为。可以通过配置序列化器或其他机制来防御此类错误。此外，我使用的测试代码尝试在可用时使用动态/无模式解析路径。对于某些语言，提前知道模式可以导致更好的行为。测试代码可以在附录中找到。
- en: '| Literal | JavaScript | C# | Python | Java | Go | Rust |'
  id: totrans-split-61
  prefs: []
  type: TYPE_TB
  zh: '| 字面值 | JavaScript | C# | Python | Java | Go | Rust |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-split-62
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| Small integer | Number | int16 | int | int | float64 | i8 |'
  id: totrans-split-63
  prefs: []
  type: TYPE_TB
  zh: '| 小整数 | 数字 | int16 | int | int | float64 | i8 |'
- en: '| Medium integer | Number | int64 | int | long | float64 | i64 |'
  id: totrans-split-64
  prefs: []
  type: TYPE_TB
  zh: '| 中等整数 | 数字 | int64 | int | long | float64 | i64 |'
- en: '| Large integer | Number | int64 | int | long | float64 | i64 |'
  id: totrans-split-65
  prefs: []
  type: TYPE_TB
  zh: '| 大整数 | 数字 | int64 | int | long | float64 | i64 |'
- en: '| Huge integer | Number | decimal | int | BigInteger | float64 | f64 |'
  id: totrans-split-66
  prefs: []
  type: TYPE_TB
  zh: '| 巨大整数 | 数字 | 小数 | int | BigInteger | float64 | f64 |'
- en: '| Ridonculous integer | Number | error | int | BigInteger | error | error |'
  id: totrans-split-67
  prefs: []
  type: TYPE_TB
  zh: '| 极度荒谬的整数 | 数字 | error | int | BigInteger | error | error |'
- en: '| Low-precision decimal | Number | decimal | double | float | float64 | f64
    |'
  id: totrans-split-68
  prefs: []
  type: TYPE_TB
  zh: '| 低精度的小数 | 数字 | 小数 | double | float | float64 | f64 |'
- en: '| High-precision decimal | Number | decimal | double | BigDecimal | float64
    | f64 |'
  id: totrans-split-69
  prefs: []
  type: TYPE_TB
  zh: '| 高精度的小数 | 数字 | 小数 | double | BigDecimal | float64 | f64 |'
- en: '| Ridonculous-precision decimal | Number | decimal | double | BigDecimal |
    float64 | f64 |'
  id: totrans-split-70
  prefs: []
  type: TYPE_TB
  zh: '| 极度精确的小数 | 数字 | 小数 | double | BigDecimal | float64 | f64 |'
- en: '| Small exponential | Number | decimal | double | float | float64 | f64 |'
  id: totrans-split-71
  prefs: []
  type: TYPE_TB
  zh: '| 小指数 | 数字 | 小数 | double | float | float64 | f64 |'
- en: '| Large exponential | Number | error | double | BigDecimal | error | error
    |'
  id: totrans-split-72
  prefs: []
  type: TYPE_TB
  zh: '| 大指数 | 数字 | error | double | BigDecimal | error | error |'
- en: 'Notes:'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 'Notes:'
- en: '**C#**: The test code attempts to deserialize into the smallest supported int
    `int16`, then `int64`, then `decimal`. No attempt is made to deserialize into
    a `double` at this point, since it would only have the value of `+/- Infinity`.
    Also note that `decimal` is not an IEEE `decimal128` - the former has 28-29 significant
    digits, whereas `decimal128` has 34.'
  id: totrans-split-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C#**: 测试代码尝试反序列化为最小支持的 int `int16`，然后是 `int64`，然后是 `decimal`。此时不尝试反序列化为 `double`，因为它只会具有`+/-
    Infinity`的值。还请注意，`decimal`不是 IEEE `decimal128` - 前者具有 28-29 位有效数字，而 `decimal128`
    则有 34 位。'
- en: '**Rust**: The type in this column represents the smallest possible type the
    value will deserialize into without error. If you know the schema in advance,
    you can make trivially make the huge integer case an error to avoid precision
    loss.'
  id: totrans-split-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Rust**: 此列中的类型表示将值反序列化为的最小可能类型，而不会出错。如果您事先知道模式，则可以将巨大整数情况轻松处理为错误，以避免精度损失。'
- en: '**Go**: You can serialize into integer types if you know the schema of the
    data and can ask the unmarshaller to give you an int64\. The table represents
    the best you can do if you don''t know the schema in advance. If you know the
    schema, you can handle the large integer case without precision loss, and also
    make the huge integer case an error.'
  id: totrans-split-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Go**: 如果您知道数据的模式并且可以要求解码器给您一个 int64，则可以将其序列化为整数类型。该表格表示如果您事先不知道模式，则可以做的最好的处理方式。如果您知道模式，则可以处理大整数情况而不会损失精度，并且还可以将巨大整数情况视为错误。'
- en: OpenAPI code generators
  id: totrans-split-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenAPI 代码生成器
- en: In the context of JSON APIs, an argument could be made that OpenAPI and its
    ecosystem of code generators matter as much as the parsers found in various implementations.
    Even if a language's JSON parser is capable of parsing a number literal of a particular
    size, it's possible OpenAPI's signatures could be more or less restrictive, especially
    for strongly typed languages.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JSON API 的上下文中，可以提出这样的论点：OpenAPI 及其代码生成器的生态系统与各种实现中的解析器同样重要。即使语言的 JSON 解析器能够解析特定大小的数字文本字面值，OpenAPI
    的签名也可能更或更不受限制，特别是对于强类型语言。
- en: 'In order to understand how the various languages behave, we will test with
    numeric types and formats defined in the OpenAPI 3 spec itself, as well as the
    numeric formats defined in the [OpenAPI Format Registry](https://spec.openapis.org/registry/format/):'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解各种语言的行为，我们将使用 OpenAPI 3 规范本身定义的数字类型和格式以及[OpenAPI 格式注册表](https://spec.openapis.org/registry/format/)中定义的数字格式进行测试：
- en: '| Type | Format | Description |'
  id: totrans-split-80
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 格式 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-split-81
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| number |  | Arbitrary-precision, base-10 decimal number value |'
  id: totrans-split-82
  prefs: []
  type: TYPE_TB
  zh: '| number |  | Arbitrary-precision, base-10 decimal number value |'
- en: '| integer |  | JSON number without a fraction or exponent part |'
  id: totrans-split-83
  prefs: []
  type: TYPE_TB
  zh: '| integer |  | JSON 中没有小数或指数部分的数字 |'
- en: '| number | float | Single precision floating point number |'
  id: totrans-split-84
  prefs: []
  type: TYPE_TB
  zh: '| number | float | 单精度浮点数 |'
- en: '| number | double | Double precision floating point number |'
  id: totrans-split-85
  prefs: []
  type: TYPE_TB
  zh: '| number | double | 双精度浮点数 |'
- en: '| number | decimal | Fixed point decimal number of unspecified precision and
    range |'
  id: totrans-split-86
  prefs: []
  type: TYPE_TB
  zh: '| number | decimal | 未指定精度和范围的固定点小数 |'
- en: '| number | decimal128 | Decimal floating-point number with 34 significant decimal
    digits |'
  id: totrans-split-87
  prefs: []
  type: TYPE_TB
  zh: '| number | decimal128 | 有34位有效十进制数字的十进制浮点数 |'
- en: '| integer | int8 | Signed 8-bit integer |'
  id: totrans-split-88
  prefs: []
  type: TYPE_TB
  zh: '| integer | int8 | Signed 8-bit integer |'
- en: '| integer | uint8 | Unsigned 8-bit integer |'
  id: totrans-split-89
  prefs: []
  type: TYPE_TB
  zh: '| integer | uint8 | Unsigned 8-bit integer |'
- en: '| integer | int16 | Signed 16-bit integer |'
  id: totrans-split-90
  prefs: []
  type: TYPE_TB
  zh: '| integer | int16 | Signed 16-bit integer |'
- en: '| integer | int32 | Signed 32-bit integer |'
  id: totrans-split-91
  prefs: []
  type: TYPE_TB
  zh: '| integer | int32 | Signed 32-bit integer |'
- en: '| integer | int64 | Signed 64-bit integer |'
  id: totrans-split-92
  prefs: []
  type: TYPE_TB
  zh: '| integer | int64 | Signed 64-bit integer |'
- en: Unsigned ints other than `uint8` are not defined in either OpenAPI or the format
    registry. `double-int` was recently added and is unlikely to be supported anywhere.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `uint8` 之外的无符号整数在 OpenAPI 或格式注册表中都没有定义。`double-int` 最近添加，不太可能在任何地方得到支持。
- en: The table below summarizes the output for each language using the [OpenAPI-Generator](https://openapi-generator.tech/)
    code generators. Cells higlighted in red show cases where the generated code creates
    a situation where either precision loss or an error may occur when providing certain
    values in OpenAPI's spec-defined range and precision.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了使用[OpenAPI-Generator](https://openapi-generator.tech/)代码生成器时每种语言的输出。红色高亮显示的单元格显示在提供
    OpenAPI 规范定义的范围和精度中提供某些值时可能会导致精度损失或错误的情况。
- en: '| OpenAPI | JavaScript | C# | Python | Java | Go | Rust |'
  id: totrans-split-95
  prefs: []
  type: TYPE_TB
  zh: '| OpenAPI | JavaScript | C# | Python | Java | Go | Rust |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-split-96
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| number | number | decimal128 | int, float | BigDecimal | float32 | f32 |'
  id: totrans-split-97
  prefs: []
  type: TYPE_TB
  zh: '| number | number | decimal128 | int, float | BigDecimal | float32 | f32 |'
- en: '| integer | number | int32 | int | Integer | int32 | i32 |'
  id: totrans-split-98
  prefs: []
  type: TYPE_TB
  zh: '| integer | number | int32 | int | Integer | int32 | i32 |'
- en: '| int8 | number | int32 | int | Integer | int32 | i32 |'
  id: totrans-split-99
  prefs: []
  type: TYPE_TB
  zh: '| int8 | number | int32 | int | Integer | int32 | i32 |'
- en: '| uint8 | number | int32 | int | Integer | int32 | i32 |'
  id: totrans-split-100
  prefs: []
  type: TYPE_TB
  zh: '| uint8 | number | int32 | int | Integer | int32 | i32 |'
- en: '| int16 | number | int32 | int | Integer | int32 | i32 |'
  id: totrans-split-101
  prefs: []
  type: TYPE_TB
  zh: '| int16 | number | int32 | int | Integer | int32 | i32 |'
- en: '| int32 | number | int32 | int | Integer | int32 | i32 |'
  id: totrans-split-102
  prefs: []
  type: TYPE_TB
  zh: '| int32 | number | int32 | int | Integer | int32 | i32 |'
- en: '| double-int | number | int32 | int | Integer | int32 | i32 |'
  id: totrans-split-103
  prefs: []
  type: TYPE_TB
  zh: '| double-int | number | int32 | int | Integer | int32 | i32 |'
- en: '| int64 | number | int64 | int | Long | int64 | i64 |'
  id: totrans-split-104
  prefs: []
  type: TYPE_TB
  zh: '| int64 | number | int64 | int | Long | int64 | i64 |'
- en: '| single | number | float | int, float | Float | float32 | f32 |'
  id: totrans-split-105
  prefs: []
  type: TYPE_TB
  zh: '| single | number | float | int, float | Float | float32 | f32 |'
- en: '| double | number | double | int, float | Double | float64 | f64 |'
  id: totrans-split-106
  prefs: []
  type: TYPE_TB
  zh: '| double | number | double | int, float | Double | float64 | f64 |'
- en: '| decimal | number | decimal128 | int, float | BigDecimal | float32 | f32 |'
  id: totrans-split-107
  prefs: []
  type: TYPE_TB
  zh: '| decimal | number | decimal128 | int, float | BigDecimal | float32 | f32 |'
- en: '| decimal128 | number | decimal128 | int, float | BigDecimal | float32 | f32
    |'
  id: totrans-split-108
  prefs: []
  type: TYPE_TB
  zh: '| decimal128 | number | decimal128 | int, float | BigDecimal | float32 | f32
    |'
- en: From this we can see that the OpenAPI-generator suite considers an `integer`
    to be an int32, despite the spec suggesting it has arbitrary range. As such, when
    using these tools, there seems to be no way to define an arbitrary-length integer
    across all languages that have a corresponding data type. Moreover, `number` is
    often understood as a 32-bit `float` despite the spec suggesting it has arbitrary
    range and precision.
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里我们可以看出，OpenAPI 生成器套件认为一个`integer`是一个int32，尽管规范建议它具有任意范围。因此，在使用这些工具时，似乎没有办法定义一个在所有具有相应数据类型的语言中都具有任意长度的整数。此外，尽管规范建议`number`具有任意范围和精度，但通常被理解为32位的`float`。
- en: Summary of findings
  id: totrans-split-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发现总结
- en: 'Let''s answer the question then: what is a JSON number?'
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来回答这个问题：JSON 数字是什么？
- en: According to the authoritative specs, a numeric literal of any length and precision.
  id: totrans-split-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据权威规范，任意长度和精度的数字字面量。
- en: According to an interoperable profile of JSON, a numeric literal with the length
    and precision of a double.
  id: totrans-split-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据JSON的可互操作性概要，数字文字具有双精度的长度和精度。
- en: According to various JSON implementations, a numeric literal with constraints
    that differ wildly depending on the implementation.
  id: totrans-split-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据各种JSON实现，数字文字具有因实现而异的约束。
- en: 'According to OpenAPI, either:'
  id: totrans-split-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据OpenAPI，要么：
- en: An integer of any length
  id: totrans-split-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任意长度的整数
- en: A decimal value of any length and precision
  id: totrans-split-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任意长度和精度的十进制值
- en: According to OpenAPI code generators,
  id: totrans-split-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据OpenAPI代码生成器，
- en: 'Without a format, either:'
  id: totrans-split-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有格式，则：
- en: For `number`, some floating point representation as small as float32
  id: totrans-split-120
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`number`，一些浮点表示形式，如float32那样小
- en: For `integer`, an int32
  id: totrans-split-121
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`integer`，一个int32
- en: 'With a format, either:'
  id: totrans-split-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有格式，则：
- en: the closest data type approximating the specified format in that language
  id: totrans-split-123
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在该语言中，最接近指定格式的数据类型近似值
- en: '`int32` or its closest approximation if the format is not supported.'
  id: totrans-split-124
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果格式不受支持，则使用`int32`或其最接近的近似值。
- en: We have also confirmed that interoperability of numbers outside the range of
    a double is spotty. All implementations tested can transact numbers inside the
    double range safely. All implementations except JavaScript can transact integer
    literals within the range of an `int64` (though go requires knowing the schema
    in advance).
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还确认了双倍范围外数字的互操作性。所有经过测试的实现都可以安全地传输双精度范围内的数字。除JavaScript外的所有实现都可以传输int64范围内的整数字面量（尽管Go需要事先知道模式）。
- en: 'For those using OpenAPI, we can infer some best practices for defining APIs
    that use numbers:'
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些使用OpenAPI的人，我们可以推断出一些关于定义使用数字的API的最佳实践：
- en: Always specify a format in OpenAPI. Neither `integer` or `number` is likely
    to do what you want.
  id: totrans-split-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在OpenAPI中始终指定格式。`integer`或`number`都不太可能符合您的要求。
- en: Avoid `double-int`. It's not supported and results in potential errors or data
    loss in many languages.
  id: totrans-split-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用`double-int`。它不受支持，并且在许多语言中可能导致错误或数据丢失。
- en: Avoid `decimal` and `decimal128`. They are also not widely supported.
  id: totrans-split-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用`decimal`和`decimal128`。它们也不被广泛支持。
- en: Avoid `int64` with a `number` type if you have JavaScript consumers. Use with
    the `string` type instead.
  id: totrans-split-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有JavaScript消费者，请避免使用带有`number`类型的`int64`。请改用`string`类型。
- en: 'If you''re using TypeSpec, this advice can be summed up as:'
  id: totrans-split-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用TypeSpec，此建议可以总结为：
- en: Avoid using `decimal`, `decimal128`, `integer`, and `numeric` types.
  id: totrans-split-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用`decimal`、`decimal128`、`integer`和`numeric`类型。
- en: If you use `int64` and you have JavaScript consumers, encode it as a string
    via `@encode("int64", string)`.
  id: totrans-split-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用`int64`并且有JavaScript消费者，请通过`@encode("int64", string)`将其编码为字符串。
- en: Finally, due to some languages handling numeric literals with exponential and
    decimal parts differently, implementations should preserve the format when round
    tripping (e.g. `10.0` should be put back as `10.0`).
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
  zh: 由于某些语言处理数字文字与指数和小数部分的方式不同，实现时应保留往返格式（例如`10.0`应还原为`10.0`）。
- en: 'Appendix: Test Code'
  id: totrans-split-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录：测试代码
- en: This code is garbage, LLMs were heavily involved in their creation. The output
    needs some interpretation. Feel free to [suggest improvements on GitHub](https://github.com/bterlson/blog/blob/main/content/blog/what-is-a-json-number.md).
  id: totrans-split-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码是垃圾，LLMs在其创建中大量参与。输出需要一些解释。欢迎在[GitHub上提出改进建议](https://github.com/bterlson/blog/blob/main/content/blog/what-is-a-json-number.md)。
- en: JavaScript
  id: totrans-split-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaScript
- en: '[PRE0]'
  id: totrans-split-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: C#
  id: totrans-split-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C#
- en: '[PRE1]'
  id: totrans-split-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Python (3.8)
  id: totrans-split-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python（3.8）
- en: '[PRE2]'
  id: totrans-split-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Java (JDK 21, Jackson)
  id: totrans-split-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java（JDK 21，Jackson）
- en: '[PRE3]'
  id: totrans-split-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Rust
  id: totrans-split-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Rust
- en: '[PRE4]'
  id: totrans-split-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Go
  id: totrans-split-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Go
- en: 'This code demonstrates the default behavior:'
  id: totrans-split-148
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码演示了默认行为：
- en: '[PRE5]'
  id: totrans-split-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This code demonstrates deserializing into a struct of a known shape:'
  id: totrans-split-150
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码演示了将反序列化为已知形状的结构体：
- en: '[PRE6]'
  id: totrans-split-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: </main>
  id: totrans-split-152
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
