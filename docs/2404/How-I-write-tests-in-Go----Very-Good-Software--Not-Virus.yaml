- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 13:04:55'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:04:55
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'How I write tests in Go :: Very Good Software, Not Virus'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '如何在Go中编写测试 :: 非常好的软件，不是病毒'
- en: 来源：[https://blog.verygoodsoftwarenotvirus.ru/posts/testing-in-go/](https://blog.verygoodsoftwarenotvirus.ru/posts/testing-in-go/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.verygoodsoftwarenotvirus.ru/posts/testing-in-go/](https://blog.verygoodsoftwarenotvirus.ru/posts/testing-in-go/)
- en: How I write unit tests in Go[⌗](#how-i-write-unit-tests-in-go)
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在Go中编写单元测试[⌗](#how-i-write-unit-tests-in-go)
- en: 'One of my favorite features of Go is that unlike many popular languages, it
    comes with it’s own testing framework, the [testing](https://pkg.go.dev/testing)
    package. Let’s say we have this trivial function in a file called `numbers.go`:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中，我最喜欢的功能之一是，与许多流行语言不同，它自带了自己的测试框架，即[testing](https://pkg.go.dev/testing)包。假设我们有一个在名为`numbers.go`的文件中的微不足道的函数：
- en: '[PRE0]'
  id: totrans-split-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The idiomatic way to test this function is to create a second file called `numbers_test.go`
    and test it using the aforementioned `testing` package:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 测试此函数的惯用方法是创建一个名为`numbers_test.go`的第二个文件，并使用上述`testing`包对其进行测试：
- en: '[PRE1]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then I can run `go test` and see the output of the test:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我可以运行`go test`并查看测试的输出：
- en: '[PRE2]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Alternatively, if the test fails (i.e. if I expect the result to be 11 instead),
    I get an appropriate error report:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果测试失败（即我期望的结果是11），我会得到一个合适的错误报告：
- en: '[PRE3]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This works pretty well, overall. When I need to find the tests for a given file,
    I can usually assume they’re in its corresponding `_test.go` file. The `testing`
    framework is built into the standard library, and does exactly what you’d expect
    with this code.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，这方法运行得相当不错。当我需要找到特定文件的测试时，通常可以假设它们位于相应的 `_test.go` 文件中。`testing` 框架内置于标准库中，对这段代码的处理正是你所期待的。
- en: We have the technology[⌗](#we-have-the-technology)
  id: totrans-split-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们拥有技术[⌗](#we-have-the-technology)
- en: This isn’t how I actually like to write Go unit tests, however. There are techniques
    and libraries I use to make unit testing in Go more effective to write and understand
    when things go (heh) awry.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不是我实际喜欢编写Go单元测试的方式。当事情出错时，我使用的技术和库可以使Go中的单元测试更有效率和易于理解。
- en: The test command[⌗](#the-test-command)
  id: totrans-split-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试命令[⌗](#the-test-command)
- en: 'You can run `go test` in a given directory and see the output of your test,
    but that leaves a lot of functionality on the table that can and will be useful.
    The full command I typically use is:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在给定目录中运行`go test`并查看测试的输出，但这会留下许多功能未使用的可能性。我通常使用的完整命令是：
- en: '`go test -cover -shuffle=on -race -vet=all -failfast <$RELEVANT_PACKAGE(S)>`'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`go test -cover -shuffle=on -race -vet=all -failfast <$RELEVANT_PACKAGE(S)>`'
- en: 'Here’s what each of these flags do:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标志各自的作用：
- en: Table-driven tests[⌗](#table-driven-tests)
  id: totrans-split-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表驱动测试[⌗](#table-driven-tests)
- en: 'I’m going to say something sort of controversial in the Go zeitgeist: I find
    table tests very rarely useful. For something like our `addNumbers` function,
    I might actually do it, because the inputs and outputs are simple. Here’s what
    that might look like:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go的潮流中，我要说一些可能有争议的话：我发现表驱动测试很少有用。对于像我们的`addNumbers`函数这样的简单输入输出，我可能会真的去做，因为这样做起来很简单。这可能是这样的：
- en: '[PRE4]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That said, it’s pretty easy to end up in a situation where your table tests
    need to be quite complicated and gnarly to get full coverage.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，很容易陷入一种情况，即你的表驱动测试需要变得非常复杂和棘手才能达到完全覆盖。
- en: 'Goland lets you generate tests for functions using a default template that
    attempts to adhere to the tradition of table-driven tests. Here’s what the generated
    test function looks like for a method in a side project. This method fetches a
    webhook object from the database, and accepts 3 total parameters — a context,
    a webhook ID, and an accountID:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: Goland允许您使用默认模板为函数生成测试，该模板试图遵循表驱动测试的传统。这是一个在旁边项目中生成的测试函数示例。该方法从数据库获取一个webhook对象，并接受3个参数
    - 上下文、webhook ID 和 accountID：
- en: '[PRE5]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: I think this is kind of a mess, and it doesn’t even include test cases yet.
    I’d rather have the querier built by an only-available-to-tests constructor that
    puts sensible defaults for all these values.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得这有点混乱，甚至还没有包括测试用例。我更愿意将查询器构建为仅在测试中可用的构造函数，该构造函数为所有这些值设置合理的默认值。
- en: The point of this is not to dunk on Goland (I am a happily paying customer and
    have been for many years), it’s just to illustrate how even a non-trivial function
    can really blow up the readability of a table-driven test.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是为了贬低Goland（我是一个快乐的付费用户，已经多年了），而是为了说明即使是一个非常复杂的函数，也可能会显著降低表驱动测试的可读性。
- en: Parallel[⌗](#parallel)
  id: totrans-split-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 并行[⌗](#parallel)
- en: Go tests can be run in parallel, by declaring the test as parallel in the top
    level. This behavior is on by default, and can only be disabled by setting the
    `-parallel=1` flag when invoking `go test` (which can be useful when debugging
    flaky tests).
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: I’m of the opinion that tests should be parallel unless they absolutely cannot
    be, and even then, I’d rather fix the flaw behind why they can’t be run in parallel
    than force them to be run sequentially.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Running your tests in parallel generally allows you to suss out concurrency
    bugs earlier, even if you’re not using the race detector (which you should), and
    will eventually lead to you developing concurrency-safe habits when writing code
    in the first place. So generally, when I write a test, the very first line is
    the parallel declaration:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Subtests[⌗](#subtests)
  id: totrans-split-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Subtests are a feature of Go’s testing library that allow you to have smaller
    tests for specific circumstances. These allow you to get some of the benefits
    of a behavior-driven testing style, without having to invoke an external dependency.
    I usually write subtests even when there’s only one test case I care about, because
    it incurs no real overhead to do so, and allows you to easily test a new case
    in the event the tested function gets more complex.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: When I write subtests, I usually name the top-level `*testing.T` object a capitalized
    `T`, and use the conventional lower-cased `t` for subtests only. This way, the
    subtest logic always looks like an idiomatic Go test, and there’s no confusion
    of what variable is which or what shadows what. Calls to `.Parallel()` will have
    to be made for both the big and little `*T` variables.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a demonstration that adapts our earlier example for the `addNumbers`
    function:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now if I decide to add another test case, it’s simply a matter of copying the
    subtest block, changing the name, and then making the test match that description:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Additionally, if there are test fixtures or constants that are relevant to all
    subtests, they can live in the space between the big-T call to `.Parallel()` and
    the first declared subtest.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: Libraries[⌗](#libraries)
  id: totrans-split-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While the standard library testing package is pretty great, there have been
    some great contributions by the community to the ecosystem that make testing in
    Go even better.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: Fake Values[⌗](#fake-values)
  id: totrans-split-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Typically, when I need to interact with an object in a test, I want to have
    unpredictable values to the extent possible for that object, so that I’m discouraged
    from relying on those conventions when writing tests.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: So for instance, if I need a `*User` object for a test, I want to have no idea
    what it’s username might be, as opposed to a common static value that I might
    copy/paste from place to place, which would make many tests fail if it was inadvertently
    changed.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: 'I like to use [brianvoe/gofakeit](https://pkg.go.dev/github.com/brianvoe/gofakeit/v7)
    for this. It comes with a ton of sensible functions with which to build fake instances
    of different types, and I’ve never had a problem with it. Here’s what that fake
    user builder might look like:'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢使用 [brianvoe/gofakeit](https://pkg.go.dev/github.com/brianvoe/gofakeit/v7)。它提供了大量合理的函数来构建不同类型的虚假实例，我从未遇到过问题。这是一个构建虚假用户的示例：
- en: '[PRE9]'
  id: totrans-split-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Testify[⌗](#testify)
  id: totrans-split-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Testify[⌗](#testify)
- en: 'I’m a huge fan of the `(assert|require|mock)` libraries in [testify](https://github.com/stretchr/testify).
    In our example test, using testify would look like:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常喜欢 [testify](https://github.com/stretchr/testify) 中的`(assert|require|mock)`库。在我们的示例测试中，使用
    testify 看起来像这样：
- en: '[PRE10]'
  id: totrans-split-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: I think `assert.Equal` is fairly obvious in its function for users who are new
    to a code base. `testify` is probably the only library I can think of that I would
    wholeheartedly support being absorbed into the standard library.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为`assert.Equal`对于新接触代码库的用户来说，其功能是相当明显的。`testify`可能是我唯一全力支持并入标准库的库。
- en: 'You can use `require` instead if you want the test to stop in the event of
    a failure. This is usually good for dependencies of a test, i.e. if I need to
    create a file and pass it to a function, I should probably `require` that no errors
    happen when creating it:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望测试在失败时停止使用 `require` 也可以。这通常适用于测试的依赖项，例如，如果我需要创建一个文件并将其传递给一个函数，我可能应该`require`在创建时没有错误发生：
- en: '[PRE11]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`mock` is also useful for defining mock implementations of structures. Say
    I have the following interface:'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`mock`也可以用于定义结构的模拟实现。假设我有以下接口：'
- en: '[PRE12]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Implementing a mock for this interface becomes a matter of:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个接口实现一个模拟只是一个简单的事情：
- en: '[PRE13]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Using the above mock in a test looks like this:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试中使用上述模拟看起来是这样的：
- en: '[PRE14]'
  id: totrans-split-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: I won’t lie, I’m not deeply impressed with the way that `mock.Mock` determines
    which variables to return in what order, and when things go wrong (i.e. you copy
    and paste something in the wrong order or have the wrong indices on your return
    values) it’s VERY hard to suss out, but by and large, `testify/mock` does an incredible
    job of what it needs to do.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会撒谎，我对`mock.Mock`确定哪些变量以及何时以何种顺序返回并不深感印象深刻，当事情出错时（例如，你复制并粘贴了顺序错误或者返回值的索引错误时），它非常难以理清，但总体而言，`testify/mock`做了它需要做的事情。
- en: 'You can avoid having to put `mock.Anything` in an expectation call by writing
    a type matcher. For `context.Context`, it would look like this:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编写类型匹配器，你可以避免在期望调用中放置`mock.Anything`。对于`context.Context`，它看起来是这样的：
- en: '[PRE15]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: There’s also `testify/suite`, which I *have* used, but wouldn’t recommend. It’s
    useful when you have a ton of common prerequisites for tests that need to be spun
    up ahead of time, but I still think it makes more sense to just make those prerequisites
    the product of a common function, instead of writing non-standard test code.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 还有`testify/suite`，我*曾经*使用过，但不推荐。当你需要大量公共前提条件用于预先设置测试时，它很有用，但我仍然认为更合理的做法是将这些前提条件作为一个通用函数的产物，而不是编写非标准的测试代码。
- en: Testcontainers[⌗](#testcontainers)
  id: totrans-split-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Testcontainers[⌗](#testcontainers)
- en: This is a neat tool I’ve only recently started using, but to great effect. It’s
    very common to have to write code that interfaces with a database, or a k/v store,
    or an in-memory cache, but before [testcontainers](https://testcontainers.com/),
    you either had to write a suite of integration tests that used that code to verify
    it did what you wanted, or otherwise fly blind in production. With testcontainers,
    I can spin up ephemeral containers that run a given piece of software and have
    my code interact with that to verify functionality.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个我最近才开始使用的很好的工具，效果非常好。通常需要编写与数据库、k/v 存储或内存中缓存进行交互的代码，但在有了 [testcontainers](https://testcontainers.com/)
    之前，你要么必须编写一套集成测试来使用该代码来验证其是否按预期工作，要么在生产环境中进行盲目测试。使用 testcontainers，我可以启动临时容器来运行指定的软件，并让我的代码与之交互以验证功能。
- en: In practice, it’s not perfect. These tests generally run great on my machine,
    and in Github Actions, but you must remember that you’re asking your computer
    to make a fake computer within itself, spin up a piece of software on that fake
    computer, and handle all the networking shenanigans that go along with interfacing
    with it, so there’s plenty of opportunity for mishaps and errors to occur.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，它并不完美。这些测试通常在我的机器上运行得很好，并且在 Github Actions 中也是如此，但你必须记住，你要求你的计算机在自身内部创建一个虚拟计算机，在该虚拟计算机上运行一个软件，并处理所有与其接口相关的网络花絮，因此存在大量机会出现问题和错误。
- en: 'Sometimes a testcontainer invocation will just fail, and the reason behind
    it can be summarized up as: computers are hard. Since they can be a big more error
    prone than standard tests, I don’t typically write subtests for these. Instead,
    I tend to write one big function that uses a single instance of the container
    to test a bunch of related functions.'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候测试容器的调用会失败，其原因可以总结为：计算机很难。由于它们可能比标准测试更容易出错，我通常不为这些写子测试。相反，我倾向于编写一个使用容器的单个实例来测试一堆相关函数的大函数。
- en: 'Here’s an example of the test for that aforementioned webhook retrieval function:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个测试前述 Webhook 检索函数的示例：
- en: '[PRE16]'
  id: totrans-split-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: (I acknowledge that this code is missing some function definitions, but it’s
    meant for you to get an idea, not copy/paste)
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: (我承认这段代码缺少一些函数定义，但它是为了让你有个概念，而不是复制/粘贴)
- en: Failure Cases[⌗](#failure-cases)
  id: totrans-split-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 失败案例[⌗](#failure-cases)
- en: Some functions in the Go standard library return errors that you might surface
    to higher-level call sites, but in order to test that those errors are caught
    and returned, Here are some ways I manage to achieve failures for very specific
    circumstances in Go.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: Go 标准库中的一些函数会返回错误，你可能会将这些错误暴露给更高级别的调用站点，但为了测试这些错误是否被捕获并返回，这里有一些我设法在特定情况下造成失败的方式。
- en: JSON Encoding[⌗](#json-encoding)
  id: totrans-split-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON 编码[⌗](#json-encoding)
- en: It’s a pretty common operation in Go code to take an instance of a given struct
    and render it as JSON. This function is capable of returning an error in the event
    the source struct is unrepresentable, but it’s actually pretty hard to make a
    struct unrepresentable in Go. You basically have to do it on purpose.
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Go 代码中，将给定结构的实例转换为 JSON 是一种非常常见的操作。如果源结构不可表示，此函数可以返回错误，但实际上在 Go 中很难使结构不可表示。你基本上必须是故意的。
- en: 'The way I achieve this is by using [`json.Number`](https://pkg.go.dev/encoding/json#Number),
    a string alias meant to represent numbers, and giving it a non-numerical value.
    Here’s what that looks like:'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我实现这一点的方式是使用 [`json.Number`](https://pkg.go.dev/encoding/json#Number)，这是一个代表数字的字符串别名，并给它一个非数字值。这是它的样子：
- en: '[PRE17]'
  id: totrans-split-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: URL Parsing[⌗](#url-parsing)
  id: totrans-split-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: URL 解析[⌗](#url-parsing)
- en: 'Parsing a URL in Go [returns an error](https://pkg.go.dev/net/url#Parse), but
    trying to force this error to occur was very confusing to me. I had to dive into
    the actual test cases in the standard library for [`net/url`](https://pkg.go.dev/net/url).
    Here are some inputs you might think return an error from `url.Parse`, but actually
    don’t:'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Go 中解析 URL [会返回一个错误](https://pkg.go.dev/net/url#Parse)，但试图强制这个错误发生对我来说非常令人困惑。我不得不深入到[`net/url`](https://pkg.go.dev/net/url)
    标准库的实际测试案例中。这里有一些你可能认为会从 `url.Parse` 返回错误的输入，但实际上并不会：
- en: an empty string
  id: totrans-split-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空字符串
- en: a URL with double dots in the path (i.e. `https://google.com/../../var/data`)
  id: totrans-split-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个路径中带有双点的网址（即`https://google.com/../../var/data`）
- en: just a scheme (i.e. `https://`)
  id: totrans-split-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只是一个方案（即`https://`）
- en: a URL with emojis in it (i.e. `https://😘.🔥`)
  id: totrans-split-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有表情符号的网址（即`https://😘.🔥`）
- en: a URL with an invalid scheme (i.e. `farts://`)
  id: totrans-split-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有无效方案的网址（即`farts://`）
- en: 'All of these actually don’t return an error. The only way I was able to force
    it to occur by using:'
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些实际上都没有返回错误。我能够强制它发生的唯一方法是使用：
- en: '[PRE18]'
  id: totrans-split-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: For whatever reason, this causes `url.Parse` to fail.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由于某种原因，这会导致 `url.Parse` 失败。
- en: Conclusion[⌗](#conclusion)
  id: totrans-split-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论[⌗](#conclusion)
- en: In many other languages, you have to not only evaluate testing libraries, but
    also write your tests in a style that complies with that library’s expectations.
    Gophers are blessed to have a thoroughly adequate solution out-of-the-box, and
    even further blessed to have an active ecosystem where folks are making in-depth
    testing a walk in the park.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多其他语言中，你不仅需要评估测试库，还需要以符合该库期望的方式编写你的测试。Gophers 幸运地拥有一个彻底合适的解决方案，甚至还有一个积极的生态系统，让深入测试变得轻而易举。
