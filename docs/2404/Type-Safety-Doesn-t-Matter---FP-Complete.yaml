- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:34:17'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:34:17'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Type Safety Doesn't Matter - FP Complete
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Type Safety Doesn't Matter - FP Complete
- en: 来源：[https://www.fpcomplete.com/blog/type-safety-doesnt-matter/](https://www.fpcomplete.com/blog/type-safety-doesnt-matter/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.fpcomplete.com/blog/type-safety-doesnt-matter/](https://www.fpcomplete.com/blog/type-safety-doesnt-matter/)
- en: 'I’m a huge believer in using strongly typed languages and leveraging type level
    protections in my codebases. But I’d like to clarify my new, somewhat modified
    stance on this:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我坚信使用强类型语言并在我的代码库中利用类型级别的保护措施是非常重要的。但我想澄清一下我的新观点，有些修改：
- en: '**Type safety does not matter.**'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型安全并不重要。**'
- en: 'What I mean is that, on its own, type safety is not important. It’s only useful
    because of what it accomplishes: moving errors from runtime to compile time. Even
    that isn’t a goal on its own. The real goal is reducing runtime errors. Type safety
    is one of the best methods of achieving these cascading goals, but it’s far from
    the only one.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，单独看来，类型安全并不重要。它之所以有用，是因为它完成了什么：将错误从运行时移到编译时。但这本身并不是一个目标。真正的目标是减少运行时错误。类型安全是实现这些级联目标的最佳方法之一，但绝非唯一途径。
- en: This may sound pedantic and click-baity, but in my opinion it’s a vitally important
    distinction with real world ramifications. For example, when discussing architecture
    of code or reviewing a pull request, I will often times push back on changes that
    add more complexity in the type system. The reason is because, even if a change
    adds “type safety,” this extra complexity is only warranted if it achieves our
    primary goal, namely reducing runtime errors.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来可能有些迂腐和标题党，但在我看来，这是一个具有现实世界影响的极其重要的区别。例如，在讨论代码架构或审查拉取请求时，我经常会反对增加类型系统复杂性的更改。原因是，即使一个改动增加了“类型安全性”，只有在它实现我们的主要目标——即减少运行时错误——时才是合理的。
- en: 'Such an assessment is largely speculative, subjective, and risk-based. By that
    last point, I’m tapping into my actuarial background. The idea is that, when considering
    a code change, the question will always be: do I think there’s a high likelihood
    that this change will meaningfully reduce bug count in the long term more so than
    other activities I could be spending this time on? And if you watched my talk [the
    economic argument for functional programming](https://www.youtube.com/watch?v=n7QETok5hYI) (or [read
    the slides](https://www.snoyman.com/reveal/economic-argument-functional-programming)),
    you may be familiar with this way of thinking as the *opportunity cost* of spending
    more time on type safety.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的评估很大程度上是推测性的、主观的，以及基于风险的。在最后一点上，我借鉴了我的精算背景。其核心思想是，当考虑代码变更时，问题始终是：我认为这个变更在长期内是否有显著减少错误数量的可能性，超过了我可以花在其他活动上的时间？如果你看过我的演讲 [函数式编程的经济论证](https://www.youtube.com/watch?v=n7QETok5hYI)（或者阅读了幻灯片](https://www.snoyman.com/reveal/economic-argument-functional-programming)），你可能已经熟悉这种思维方式，称之为在类型安全上花费更多时间的*机会成本*。
- en: This is why languages that provide for strong typing with type inference end
    up working out so well. There’s relatively little cost for basic type safety mechanisms
    with significant gain. It’s the 80/20 rule. I continue to believe that the vast
    majority of the value I’ve received from strongly typed languages like Rust, Haskell,
    and even TypeScript come from the “simplest” features like enums/ADTs and pattern
    matching.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么提供带有类型推断的强类型语言最终效果非常好。基本类型安全机制的成本相对较低，但收益显著。这就是80/20法则。我继续认为，我从像Rust、Haskell甚至TypeScript这样的强类型语言中获得的绝大多数价值来自“最简单”的特性，比如枚举/代数数据类型和模式匹配。
- en: 'Bug reduction is not the only benefit of strong typing. There’s also: easier
    codebase maintainability, simplicity of refactoring, new engineering onboarding,
    potentially performance gains, and probably a few other things I missed. But for
    me, reduction in bugs is still the primary benefit.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 强类型的好处不仅仅是减少错误。还有：更易于维护的代码库、重构的简单性、新工程师的入职、潜在的性能提升，还有可能有其他我没提到的好处。但对我来说，减少错误仍然是最主要的好处。
- en: This paradigm of assessing the value in bug reduction from type safety lets
    us broaden our scope a bit. If we want to reduce bugs in production, and we believe
    that moving bugs from runtime to compile time is a good way to do it, we can naturally
    find some related techniques. An obvious one is “static code analysis.” But I’ll
    simplify that with the 80/20 rule as well to *linting tools*. Using linting tools
    is a great way to get lots of benefits with little cost.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过评估从类型安全性减少 bug 的价值来扩展我们的视野。如果我们想要在生产中减少 bug，并且我们认为将 bug 从运行时移到编译时是一个好方法，我们自然可以找到一些相关的技术。一个显而易见的技术是“静态代码分析”。但我也会使用
    80/20 规则来简化到 *linting 工具*。使用 linting 工具是一种以较小成本获取许多好处的好方法。
- en: 'Just to prove this isn’t only about types, let’s take a concrete example from
    everyone’s favorite language, JavaScript. If I’m writing a React application in
    JavaScript, I get virtually no type safety. (TypeScript is a different story,
    and it’s the only thing that keeps me sane when working on frontend code.) Consider
    this bit of almost-correct React code:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅为了证明这不仅仅是关于类型，让我们从每个人都喜欢的语言 JavaScript 中的一个具体例子来看。如果我在 JavaScript 中编写 React
    应用程序，几乎没有类型安全性。（TypeScript 是另一回事，当我在前端代码上工作时，它是唯一使我保持理智的东西。）考虑一下这段几乎正确的 React
    代码片段：
- en: '[PRE0]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For those not familiar: useEffect allows me to run some kind of an action,
    in this case an asynchronous data load from a server. This is a common pattern
    in React. As the user is using this application and changes the game level, I
    want to perform an action to load up their current score from the server and set
    it in a local store that can be used by the rest of the application. useEffect takes
    two arguments: the function to perform, and the list of dependencies to use. When
    one of those dependencies changes, the effect is rerun.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不熟悉的人来说：`useEffect` 允许我执行某种操作，本例中是从服务器异步加载数据。这是 React 中的常见模式。当用户使用此应用并更改游戏关卡时，我希望执行一个操作，从服务器加载他们当前的分数，并将其设置在一个本地存储中，以便应用的其余部分使用。`useEffect`
    接受两个参数：要执行的函数和要使用的依赖项列表。当这些依赖项之一发生变化时，效果将重新运行。
- en: 'There are plenty of improvements to be made in this code, but there’s one blatant
    bug: my useEffect dependency list does not include gameLevel. This would be a
    bug at runtime: once the user’s score is loaded for a level, we would never reload
    it despite moving on to other levels. This would be the kind of bug that is easy
    to miss during manual testing, and could end up in production pretty easily.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中有很多改进的空间，但有一个明显的 bug：我的 `useEffect` 依赖列表中没有包括 `gameLevel`。这在运行时会产生 bug：一旦用户的分数加载完毕，我们将永远不会重新加载，尽管已经进入其他关卡。这是一种很容易在手动测试中忽略的
    bug，并且很容易进入生产环境。
- en: Automated testing, unit tests, QA acceptance guidelines… basically everything
    around quality assurance will help ameliorate bugs like this. But static analysis
    arguably does even better here. The above code will immediately trigger lints
    saying “hey, I see you used gameLevel in your function, but you didn’t list it
    in your dependencies.” This is a prime example of moving a bug from runtime to
    compile time (or at least development time), preventing an entire class of bugs
    from occurring, and it didn’t need any type safety to do it. Sure, it doesn’t
    eliminate every potential bug, but it does knock down a whole bunch of them.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试、单元测试、QA 接受指南……基本上所有与质量保证相关的事物都将有助于改善这样的 bug。但在这里，静态分析可能做得更好。上面的代码将立即触发
    lint，说“嘿，我看到你在函数中使用了 `gameLevel`，但你没有将其列入你的依赖项。”这是将 bug 从运行时（或至少是开发时）移到编译时（或开发时）的一个典型例子，防止了一整类
    bug 的发生，而且不需要任何类型安全性就能实现。当然，它并不能消除每一个潜在的 bug，但它确实消除了大量的 bug。
- en: 'As you might imagine, this blog post was inspired by a specific set of problems
    I was running into at work. I thought about getting into those details here, and
    if there’s interest I can write a follow-up blog post, but honestly the specific
    case isn’t terribly interesting. My point here is the general principles:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能想象的，这篇博文受到了我在工作中遇到的一组特定问题的启发。我考虑在这里详细说明这些细节，如果有兴趣的话，我可以写一篇后续博文，但老实说，具体案例并不是特别有趣。我在这里要表达的是一般原则：
- en: Understand *why* you’re trying to use type safety. Is it preventing some kind
    of a bug from occurring? Is the time you’re spending on implementing the type-safe
    solution paying off in bug reduction and other benefits?
  id: totrans-split-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 理解为什么要使用类型安全性。它是为了防止某种类型的 bug 发生吗？你花在实现类型安全解决方案上的时间是否在减少 bug 和其他好处方面得到了回报？
- en: There are lots of other techniques worth considering for bug reduction. Static
    analysis is one I mentioned. Automated testing falls into this category as well.
    Don’t be ideologically driven in which approaches you use. Choose the tool with
    the best power-to-weight ratio for what you’re dealing with right now.
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有许多其他减少错误的技术值得考虑。静态分析就是其中之一。自动化测试也属于这一类别。不要在选择方法时被意识形态所左右。选择当前处理情况下功率重量比最佳的工具。
- en: '[Subscribe to our blog via email](https://blogtrottr.com/?subscribe=https://www.fpcomplete.com/feed/atom)'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[通过电子邮件订阅我们的博客](https://blogtrottr.com/?subscribe=https://www.fpcomplete.com/feed/atom)'
- en: Email subscriptions come from our [Atom feed](/feed/atom) and are handled by
    [Blogtrottr](https://blogtrottr.com). You will only receive notifications of blog
    posts, and can unsubscribe any time.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件订阅来自我们的[Atom feed](/feed/atom)，由[Blogtrottr](https://blogtrottr.com)处理。您将仅收到博客文章的通知，并可以随时取消订阅。
