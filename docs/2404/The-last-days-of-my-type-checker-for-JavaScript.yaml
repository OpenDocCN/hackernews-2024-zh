- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:28:39'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: The last days of my type checker for JavaScript
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://jsmonk.github.io/2024-01-29-last-days-of-hegel/](https://jsmonk.github.io/2024-01-29-last-days-of-hegel/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**TL;DR** Last year, I started to work on the 2.0 version of [my static type
    checker for JavaScript](https://hegel.js.org/) written in [Rust](https://www.rust-lang.org/),
    but, unfortunately, I see that nowadays, [TypeScript](https://www.typescriptlang.org/)
    won. The idea of strict type-checking for JavaScript is less popular than in 2019\.
    Additionally, another way to bring stricter types into the web exists. So, I lost
    my belief that there could be an audience for such a tool and decided to close
    the project.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: To make the story short
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the beginning of 2019, I worked in a small outsourcing company called [WookieeLabs](https://github.com/wookieelabs).
    In most of the projects, we preferred to use [Flow](https://flow.org/) over the
    [TypeScript](https://www.typescriptlang.org/). There were a lot of benefits such
    as [nominal classes](https://flow.org/en/docs/lang/nominal-structural/#toc-classes-are-nominally-typed),
    [type variances](https://flow.org/en/docs/lang/variance), [opaque types](https://flow.org/en/docs/types/opaque-types/),
    [smooth integration with React](https://flow.org/en/docs/react/). But the main
    reason was that Flow in 2019 was just JavaScript with types.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: 'But the way Flow type inference was working in 2019 was not ideal:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
- en: You can play with this example [here](https://flow.org/try/#1N4Igxg9gdgZglgcxALmAXwDTggEwKYrZQDOALgARw7kC85AHrQHwMDcAOlJCRQIa2UcACgBMASg5doZcgCMBVIexBkATnCgJlEkFgBueVcTjRCegAwA6AIwAOAKw2QaIA)
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: 'So, Flow analyzed the usage of the function and, based on it, inferred the
    type of a function. In the example above, we provided to the `id` function a number
    and a string, so, based on the usage, the tool infered the type of the `id` as
    `(x: number | string) => number | string`.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: However, the Flow team did a significant job of fixing such behavior by requiring
    annotations in places where the tool knows it will not have a local typing context.
    You can read about it [here](https://medium.com/flow-type/local-type-inference-for-flow-aaa65d071347).
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, there was hype about the new “language” (syntax for [OCaml](https://ocaml.org/))
    called [ReasonML](https://reasonml.github.io/) (today there is also an alternative
    project called [ReScript](https://rescript-lang.org/)).
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: And I was wondering, what if we take the power of the [Hindley-Milner type inference](https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system),
    as strict as possible type system for JavaScript and the simple Flow like types
    syntax and combine it inside a single tool. So, I created [Hegel](https://hegel.js.org/)
    as my university bachelor project and started to talk about it at some conferences.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: You can check the main differences in comparison with TypeScript [here](https://hegel.js.org/docs#benefits-and-disadvantages-over-typescript)
    and with Flow [here](https://hegel.js.org/docs#benefits-and-disadvantages-over-flowjs)
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: 'But my favorite example that describes what the tool provides is [this](https://hegel.js.org/try#GYVwdgxgLglg9mABAEwKYGdUCcYEMA2MAXqgKqZYAU6UOYA5jMDKsudgFLoICUiA3gChEiCAhqIAtrgCeAIzIVEAXkQcAygHkAcgDoADriyZqtGAyYs2FLrwDcwxE0SVHIqDP2o4wKbIXsWCrKqgBEcHIAVqjQoYgAZPFufvKK2IgAhCGIYCD4+AlJIiKhYLiSqHHmKQFKickeXj41aVi6ZRXBYTR09KGOfELFiFioUCBYSNKpgQ4iAL6OUAAWWHAA7jmomwAqnqgAolhrVKEACmsAbjBoyIgUeIQkdyBKMOhOYJcENxmhPA5FoJaDIBI4xGAJMA4HAVCgMNhHsRWpRQgAWABM-0BolwUAgyxcqEGgkEiyAA):'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
- en: And there were difficulties
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because most of the time I was the only contributor in the core modules, working
    on a full-time job and continuing study as a master didn’t give me enough time
    to contribute more, so there were (and still) a lot of issues and bugs, that should
    be fixed, so the development took a long time.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: Also, speaking at local conferences didn’t help a lot in finding a lot of new
    contributors.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: I want to thank everyone who supported me with the project, proposed exciting
    ideas, and helped me prepare different examples. Some people also helped me fix
    grammar mistakes in the documentation, review all the sections, and set up the
    CI/CD. You all are unbelievable.
  id: totrans-split-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: At some point (around March 2021), I struggled with all the COVID-19 restrictions
    and the rumors about the upcoming war between Ukraine and Russia. So, my wife
    and I relocated to the Netherlands two months before the war started.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: I also want to say a big thank you to [JetBrains](https://www.jetbrains.com/).
    You not only gave me the possibility to work on such exciting projects but literally
    saved my and my wife’s lives.
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: After a while, I started to rework the core system differently to support an
    incremental compilation (to improve analysis speed) and an intermediate representation
    (to support multiple syntaxes, including TypeScript syntax; the tool had previously
    worked directly with the AST).
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: But during that time, I felt like I was trying to overtake a Ferrari, and the
    community interest in such a project was already insignificant.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: Reflection on the project
  id: totrans-split-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For today, I have only results for the [State of JavaScript 2022](https://2022.stateofjs.com/en-US/),
    and as soon as the results of [State of JavaScript 2023](https://stateofjs.com/en-US)
    become available, I will update the numbers.
  id: totrans-split-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The following things made me lose the belief that I should continue my work:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: The developers of TypeScript are doing an excellent language and working a lot
    on its improvement, so it is the most popular alternative for JavaScript nowadays
    (98.9% [question](https://2022.stateofjs.com/en-US/other-tools#javascript_flavors)
    respondents use TypeScript, the nearest competitor is Elm with the result 2.3%)
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript as a technology and community is already mature, so the new tools,
    frameworks, and libraries take a small part of the market. [Here](https://2022.stateofjs.com/en-US/other-tools#runtimes)
    you can take a look on the usage of [Deno](https://deno.com/) (one of the Deno
    prototypes [was presented](https://www.youtube.com/watch?v=M3BM9TB-8yA) in 2019)
    comparing to the [Node.js](https://nodejs.org/en), or [the comparison of frameworks
    usage](https://2022.stateofjs.com/en-US/libraries/front-end-frameworks#front_end_frameworks_experience_linechart)
    where we can see that the new frameworks such as [Solid.js](https://www.solidjs.com/)
    or [qwik](https://qwik.builder.io/) take 6% and 2%
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on my communication with different developers, I realized that TypeScript
    changed how developers think about the types in JavaScript. In 2019, people thought
    of types as the rules restricting the language for developing safer software (fewer
    bugs or unexpected runtime errors). Still, today, people think more about describing
    **any** (even not so secure) software with types. All of these fancy [template
    literal types](https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html),
    [conditional types](https://www.typescriptlang.org/docs/handbook/2/conditional-types.html),
    an unchecked body of [assert functions](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions)
    and [type predicates](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates),
    and of course [any](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any),
    give people a fantastic tool to cover existed code with types but doesn’t force
    to re-design it to make it safer.
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I see other opportunities to increase the language diversity on the web (further
    in the article)
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, primarily based on those things, I decided to close the project [Hegel](https://hegel.js.org/).
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: Other projects and other opportunities
  id: totrans-split-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Last year, I unexpectedly realized what a big and fantastic job was done on
    [wasm](https://webassembly.org/) as a technology. Proposals such as [GC proposal](https://github.com/WebAssembly/gc/blob/main/proposals/gc/Overview.md)
    and [Exception handling](https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/Exceptions.md)
    help to bring to the web more and more programming languages with stricter type
    system that are already familiar to people, that have already a mature ecosystem
    of build tools, libraries, frameworks, but also [Component Model](https://github.com/WebAssembly/component-model)
    proposes the solution to interop between of them, that means sharing parts of
    the extensive ecosystems between each other.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: So, this is one of the reasons why I decided to join [Kotlin/Wasm](https://kotlinlang.org/docs/wasm-overview.html)
    team and focus most of the time on helping to bring the amazing [Kotlin](https://kotlinlang.org/)
    and its ecosystem into the web.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you are still looking for the analyzing tool for your JavaScript project.
    In that case, you can bring your attention to a cool project called [Ezno](https://github.com/kaleidawave/ezno),
    which provides strict type checking and also (because it’s a full compiler) focuses
    on optimizing your code. [Ben](https://twitter.com/kaleidawave) is doing an incredible
    job.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
