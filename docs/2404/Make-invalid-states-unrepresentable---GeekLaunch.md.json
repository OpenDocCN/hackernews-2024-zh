["```\nerror[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n  --> src\\lib.rs:11:5\n   |\n10 |     let x = vec![];\n   |         - help: consider changing this to be mutable: `mut x`\n11 |     x.push(1);\n   |     ^^^^^^^^^ cannot borrow as mutable\n\nFor more information about this error, try `rustc --explain E0596`.\nerror: could not compile `invalid-state` due to previous error\n```", "```\nerror[E0063]: missing field `date_of_birth` in initializer of `Person`\n  --> src\\lib.rs:11:16\n   |\n11 |     let john = Person {\n   |                ^^^^^^ missing `date_of_birth`\n\nFor more information about this error, try `rustc --explain E0063`.\nerror: could not compile `invalid-state` due to previous error\n```", "```\nerror: Ferris cannot be used as an identifier\n --> src\\lib.rs:6:9\n  |\n6 |     let ðŸ¦€ = 0;\n  |         ^^ help: try using their name instead: `ferris`\n\nerror: could not compile `invalid-state` due to previous error\n```", "```\nfn accepts_color(color: &str) {\n    // ...\n}\n```", "```\naccepts_color(\"#000000\");\naccepts_color(\"rgba(255, 255, 255, 0)\");\naccepts_color(\"purple\");\naccepts_color(\"sapphire\");\naccepts_color(\"5\");\naccepts_color(\"ç™½\");\naccepts_color(\"Call me Ishmael.\");\naccepts_color(\"\");\n```", "```\nenum Color {\n    Rgb(u8, u8, u8),\n    Rgba(u8, u8, u8, u8),\n}\n\nfn accepts_color(color: Color) {\n    // ...\n}\n```", "```\naccepts_color(Color::Rgb(0, 0, 0));\naccepts_color(Color::Rgba(255, 255, 255, 0));\n```", "```\npub struct Motion(/* ... */);\npub struct Register(/* ... */);\n\npub struct SaveMacro {\n    register: Register,\n    actions: Vec<Action>,\n}\n\npub enum Action {\n    Move(Motion),\n    Delete(Motion),\n    Insert(String),\n    SaveMacro(SaveMacro),\n    RunMacro(Register),\n}\n```", "```\n#[derive(Debug)]\npub enum SaveMacroError {\n    IllegalSave,\n    IllegalRun,\n}\n\nimpl SaveMacro {\n    pub fn new(register: Register, actions: Vec<Action>) -> Result<Self, SaveMacroError> {\n        for action in actions.iter() {\n            match action {\n                Action::SaveMacro(..) => return Err(SaveMacroError::IllegalSave),\n                Action::RunMacro(..) => return Err(SaveMacroError::IllegalRun),\n                _ => {}\n            }\n        }\n\n        Ok(Self { register, actions })\n    }\n}\n```", "```\nlet save_macro = SaveMacro::new(\n    Register(/* ... */),\n    vec![\n        Action::Insert(String::from(\"code\")),\n        Action::Move(Motion(/* ... */)),\n        // Action::RunMacro(Register(/* ... */)),\n    ],\n)\n.unwrap();\n```", "```\npub enum Action {\n    Edit(EditAction),\n    SaveMacro(SaveMacro),\n    RunMacro(Register),\n}\n\npub enum EditAction {\n    Move(Motion),\n    Delete(Motion),\n    Insert(String),\n}\n\npub struct SaveMacro {\n    pub register: Register,\n    pub actions: Vec<EditAction>,\n}\n```", "```\nlet save_macro = SaveMacro {\n    register: Register(/* ... */),\n    actions: vec![\n        EditAction::Insert(String::from(\"code\")),\n        EditAction::Move(Motion(/* ... */)),\n        // Action::RunMacro(Register(/* ... */)),\n    ],\n};\n```", "```\nerror[E0308]: mismatched types\n  --> src\\compiletime_validation.rs:32:9\n   |\n32 |         Action::RunMacro(Register(/* ... */)),\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `compiletime_validation::EditAction`, found enum `compiletime_validation::Action`\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `invalid-state` due to previous error\n```", "```\nstruct Disconnected;\nstruct Connecting;\nstruct Connected;\n\nstruct Vpn<S> {\n    state: S,\n}\n```", "```\nimpl Vpn<Disconnected> {\n    pub fn new() -> Self {\n        Vpn {\n            state: Disconnected,\n        }\n    }\n}\n\nlet vpn: Vpn<Disconnected> = Vpn::new(); // ok\nlet vpn: Vpn<Connected> = Vpn::new(); // compile-time error\n```", "```\nimpl From<Vpn<Disconnected>> for Vpn<Connecting> {\n    fn from(_value: Vpn<Disconnected>) -> Self {\n        Vpn { state: Connecting }\n    }\n}\n\nimpl From<Vpn<Connected>> for Vpn<Disconnected> {\n    fn from(_value: Vpn<Connected>) -> Self {\n        Vpn { state: Disconnected }\n    }\n}\n```", "```\nimpl TryFrom<Vpn<Connecting>> for Vpn<Connected> {\n    type Error = Vpn<Disconnected>;\n\n    fn try_from(_value: Vpn<Connecting>) -> Result<Self, Self::Error> {\n        if can_connect() {\n            Ok(Vpn { state: Connected })\n        } else {\n            Err(Vpn {\n                state: Disconnected,\n            })\n        }\n    }\n}\n```"]