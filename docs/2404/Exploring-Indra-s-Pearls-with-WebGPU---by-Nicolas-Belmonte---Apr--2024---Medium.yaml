- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:23:42'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Indra’s Pearls with WebGPU | by Nicolas Belmonte | Apr, 2024 | Medium
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://medium.com/@philogb/exploring-indras-pearls-with-webgpu-e0f4a745c2f6](https://medium.com/@philogb/exploring-indras-pearls-with-webgpu-e0f4a745c2f6)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Generalizing Limit Sets: Beyond Circles'
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of carefully selecting circles and Mobius transformations mapping the
    outside of one into the inside of another, we can generalize the work by directly
    computing limit sets from the Mobius generators themselves. This yields limit
    sets that are not necessarily built from circles.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: Playing with parameters to get different limit sets
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: A parametrization of Mobius transformations that can give these “cusped” limit
    sets is known as the Maskit parametrization. A Maskit slice is the area under
    which the groups become non discrete (and we render nonsense).
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: µ values (x=Re(µ), y=Im(µ)) and the Maskit slice.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: If we stay at the exact boundary, we get to groups that are at the limit of
    non-discreetness. The visualization allows to explore these cusped groups. The
    book goes into detail on the properties of these groups.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: Moving through the boundary of the Maskit slice
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  id: totrans-split-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I used this project to get immersed into WebGPU and WGSL for shading programming.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: The initial visualizations are created via a `KleinGroup` class. The class renders
    each iteration into a texture that is fed back into the class for an ulterior
    iteration. Programmatically, this mimics well the action of the Mobius transformations.
    The resulting texture is fed into a `Quad` class which renders the quad to the
    screen.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: We then include an `RSphere` class which will render the Riemann Sphere. `KleinGroup`
    feeds the texture both to `Quad` and `RSphere`. The `quad` is then moved around
    with the sphere placed on top to describe how conjugations work.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: Animation showing the RSphere and Quad classes in action.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Limit Sets
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To visualize Limit Sets we implement Jos Ley’s: [*A fast algorithm for limit
    sets of Kleinian groups with the Maskit parametrisation*](https://www.josleys.com/articles/Kleinian%20escape-time_3.pdf).
    The algorithm renders a limit set via a fragment shader directly. The inputs to
    the fragment shader are the Mobius transformations and a texture that describes
    well the division across each side of the set. For each point in the screen if
    it falls in the area under or over the curve, we apply the Mobius transformation
    `a`or its inverse `A`.'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: The limit set and the underlying texture.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: For sets far enough from the Maskit boundary, the line can be implemented as
    a smooth curve.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: Cusps
  id: totrans-split-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Limit Sets that are at the boundary of a Maskit slice this is more complex.
    We need to find the combination of Mobius products for which the group is parabolic
    (we call this the parabolic “word”). For each two Mobius transformations and their
    inverses, `a`, `A`, `b`, `B`, the word for it to be parabolic could be something
    like: `aaaaBaaaaB`. Finding the fixed point for this matrix product gives us a
    point that is tangent to two circles in the set.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于处于Maskit切片边界上的极限集，这更加复杂。我们需要找到Mobius乘积的组合，使得群是抛物线的（我们称之为抛物线“词”）。对于每两个Mobius变换及其逆变换，`a`、`A`、`b`、`B`，使其成为抛物线的词可能是这样的：`aaaaBaaaaB`。找到这个矩阵乘积的不动点给出了一个点，它与集合中的两个圆相切。
- en: We then need to cycle through these words in order to obtain all other fixed
    points that will be tangent to each circle in the set. My implementation to get
    the word and its cyclic permutations can be found in [this notebook](https://observablehq.com/d/cde177e22e1a9a6e#getWord).
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要循环遍历这些词以获得与集合中每个圆相切的所有其他不动点。我实现了获取词及其循环排列的方法可以在[此笔记本](https://observablehq.com/d/cde177e22e1a9a6e#getWord)找到。
- en: Texture computed for a cusped group at the boundary of a Maskit slice.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了Maskit切片边界处的尖角群计算纹理。
- en: The texture above is using green and blue colors to indicate the algorithm to
    perform a horizontal shift before evaluating and applying the Mobius transformations
    (this gave me quite a headache).
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上述纹理使用绿色和蓝色表示算法，在评估和应用Mobius变换之前进行水平移位（这让我头疼不已）。
- en: Computing the Maskit Slice
  id: totrans-split-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算Maskit切片
- en: Finally, to trace the Maskit Boundary we need to implement a Newton solver for
    [parabolic generators](https://en.wikipedia.org/wiki/M%C3%B6bius_transformation#Fixed_points)
    (where the `Trace=2`). We walk the x-axis by obtaining a [Farey sequence](https://en.wikipedia.org/wiki/Farey_sequence)
    of fractions, for each of them we generate a Trace polygon, and we solve for it
    using Newton’s method, which will find the µ-value we need. Then the cusped limit
    set is fed the numerator of the Farey sequence `p`, its denominator `q`, and the
    complex value µ.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了追踪Maskit边界，我们需要为抛物生成器（其中`Trace=2`）实现一个牛顿求解器。我们通过获取分数的Farey序列来沿着x轴行走，对于每个分数，我们生成一个Trace多边形，并使用牛顿法求解它，这将找到我们需要的µ值。然后，给定Farey序列的分子`p`、分母`q`和复数值µ，将尖角极限集提供给它。
