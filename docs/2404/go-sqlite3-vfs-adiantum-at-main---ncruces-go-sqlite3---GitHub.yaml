- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:40:49'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:40:49'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: go-sqlite3/vfs/adiantum at main · ncruces/go-sqlite3 · GitHub
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: go-sqlite3/vfs/adiantum at main · ncruces/go-sqlite3 · GitHub
- en: 来源：[https://github.com/ncruces/go-sqlite3/tree/main/vfs/adiantum](https://github.com/ncruces/go-sqlite3/tree/main/vfs/adiantum)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://github.com/ncruces/go-sqlite3/tree/main/vfs/adiantum](https://github.com/ncruces/go-sqlite3/tree/main/vfs/adiantum)
- en: This package wraps an SQLite VFS to offer encryption at rest.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本包包装了一个SQLite VFS，提供了静态加密。
- en: Warning
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This work was not certified by a cryptographer. If you need vetted encryption,
    you should purchase the [SQLite Encryption Extension](https://sqlite.org/see),
    and either wrap it, or seek assistance wrapping it.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这项工作未经密码学家认证。如果您需要经过验证的加密，您应该购买[SQLite Encryption Extension](https://sqlite.org/see)，并将其包装或寻求帮助包装。
- en: The `"adiantum"` VFS wraps the default SQLite VFS using the [Adiantum](https://github.com/lukechampine/adiantum)
    tweakable and length-preserving encryption.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**"adiantum"** VFS wraps the default SQLite VFS using the [Adiantum](https://github.com/lukechampine/adiantum)
    tweakable and length-preserving encryption.'
- en: In general, any HBSH construction can be used to wrap any VFS.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，任何HBSH结构都可以用来包装任何VFS。
- en: The default Adiantum construction uses XChaCha12 for its stream cipher, AES
    for its block cipher, and NH and Poly1305 for hashing.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的Adiantum结构使用XChaCha12作为其流密码，AES作为其块密码，并使用NH和Poly1305作为哈希函数。
- en: Additionally, we use [Argon2id](https://pkg.go.dev/golang.org/x/crypto/argon2#hdr-Argon2id)
    to derive 256-bit keys from plain text where needed. File contents are encrypted
    in 4K blocks, matching the [default](https://sqlite.org/pgszchng2016.html) SQLite
    page size.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们使用[Argon2id](https://pkg.go.dev/golang.org/x/crypto/argon2#hdr-Argon2id)来从纯文本派生256位密钥。文件内容以4K块加密，与[默认](https://sqlite.org/pgszchng2016.html)SQLite页面大小匹配。
- en: 'The VFS encrypts all files *except* [super journals](https://sqlite.org/tempfiles.html#super_journal_files):
    these *never* contain database data, only filenames, and padding them to the block
    size is problematic. Temporary files *are* encrypted with **random** keys, as
    they *may* contain database data. To avoid the overhead of encrypting temporary
    files, keep them in memory:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: VFS加密所有文件 *除了* [超级日志](https://sqlite.org/tempfiles.html#super_journal_files)：这些文件
    *从不* 包含数据库数据，只包含文件名，并且将它们填充到块大小是有问题的。临时文件 *会* 使用**随机**密钥进行加密，因为它们 *可能* 包含数据库数据。为了避免加密临时文件的开销，将它们保留在内存中：
- en: '[PRE0]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Important
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: Adiantum is a cipher composition for disk encryption. The standard threat model
    for disk encryption considers an adversary that can read multiple snapshots of
    a disk. The only security property that disk encryption provides is that all information
    such an adversary can obtain is whether the data in a sector has or has not changed
    over time.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: Adiantum是用于磁盘加密的密码组合。磁盘加密的标准威胁模型考虑了一个能够读取磁盘多个快照的对手。磁盘加密提供的唯一安全属性是，对手能够获得的所有信息只是一个扇区中的数据是否随时间变化。
- en: The encryption offered by this package is fully deterministic.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本包提供的加密是完全确定性的。
- en: 'This means that an adversary who can get ahold of multiple snapshots (e.g.
    backups) of a database file can learn precisely: which blocks changed, which ones
    didn''t, which got reverted.'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，一个能够获取数据库文件多个快照（例如备份）的对手可以准确地了解：哪些块发生了改变，哪些没有，哪些被还原。
- en: This is slightly weaker than other forms of SQLite encryption that include *some*
    nondeterminism; with limited nondeterminism, an adversary can't distinguish between
    blocks that actually changed, and blocks that got reverted.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这比包含*一些*非确定性的其他形式的SQLite加密稍微弱一些；有了有限的非确定性，对手无法区分实际发生变化的块和被还原的块。
- en: Caution
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This package does not claim protect databases against tampering or forgery.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本包不声明保护数据库免受篡改或伪造。
- en: The major practical consequence of the above point is that, if you're keeping
    `"adiantum"` encrypted backups of your database, and want to protect against forgery,
    you should sign your backups, and verify signatures before restoring them.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 上述观点的主要实际后果是，如果您正在保留数据库的 **"adiantum"** 加密备份，并希望防止伪造，您应该签署您的备份，并在恢复之前验证签名。
- en: This is slightly weaker than other forms of SQLite encryption that include block-level
    [MACs](https://en.wikipedia.org/wiki/Message_authentication_code). Block-level
    MACs can protect against forging individual blocks, but can't prevent them from
    being reverted to former versions of themselves.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这比包含块级[MACs](https://en.wikipedia.org/wiki/Message_authentication_code)的其他形式的SQLite加密稍微弱一些。块级MAC可以防止伪造单个块，但不能防止它们被还原到先前版本。
