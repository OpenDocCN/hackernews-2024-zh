- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 12:47:04'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: RSS Feed Organization Strategies And New Feed Cost
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://yukinu.com/blog/2024/02/06/rss-feed-processing-strategies.html](https://yukinu.com/blog/2024/02/06/rss-feed-processing-strategies.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'I was reading an article posted on [The New Leaf Journal](https://thenewleafjournal.com/)
    about [Organizing RSS and ATOM Feeds](https://thenewleafjournal.com/organizing-rss-and-atom-feed-sources/)
    and it got me thinking about my own RSS feed strategy. At a high level, the article
    describes several strategies for organizing an RSS feed, of which from my interpretation
    can be broken down into 4 different methods for organizing feeds:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: '**Categorical**'
  id: totrans-split-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feeds are organized based how similar the content is to other feeds.
  id: totrans-split-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Temporal**'
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feeds are organized based on frequency of updates.
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rank**'
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feeds are organized by a ranking/grading system based on how engaging each feed
    is to the subscriber.
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Social Graph Distance**'
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feeds are organized by how close the feed is to you personally (roughly your
    distance from the feed source based on a social graph).
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A feed strategy, in turn, may use a combination of these methods. For example,
    in the past my strategy for organizing my RSS feed used a combination of the categorical
    and ranking methods; I organized my feed into 3 ranks (high, medium, and low priority),
    and categorized them based on topic. However, over time as my feed grew larger,
    I started to encounter problems with scale from this strategy. Notably:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: Most RSS readers use a tree data structure to organize feeds, but some feeds
    may not neatly fit within this data structure. For example, if you have a category
    for podcasts and a category for technology, then where do technology podcasts
    fit within the tree?
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As more feeds are added, more categories are likely needed, and the result may
    quickly grow into a deeply nested tree that is difficult to navigate.
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's often unclear how the lower ranks in the feed ranking method should be
    handled if you can't process your entire feed every day. For example, if you can
    process 20 feed items a day, and on a given day you get 20 high priority and 30
    low priority items, then what should happen to the 30 unprocessed low ranked feed
    items? Should they be automatically marked as read, or accumulated? Or should
    the feed be discarded entirely?
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As I reached over 100 feeds^([[1](#cite-1)]), the aforementioned problems started
    to surface, and so I decided to reformulate my strategy along more mathematical
    lines that would provide a logical mechanism for analyzing my feed and managing
    it's growth. So here is how my RSS strategy works.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Before delving into my strategy, we must first ask 3 questions:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: What is an RSS feed?
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we create our own curated feed?
  id: totrans-split-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What resource do we use to process a feed?
  id: totrans-split-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the most fundamental level, an RSS feed is simply a collection of feed items.
    Each feed item can be thought of as being 1 of 2 possible types of information:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: '**Signals** - Information that is relevant to us.'
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Noise** - Information that is *not* relevant to us.'
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The reason we curate our own feeds is to accumulate the former piece of information,
    **Signals**, at a more efficient rate than passively acquiring them (for example,
    through local news channels broadcasting in the background). However, actively
    processing feeds is not free, it requires us to expend a resource: time (represented
    by the variable `m`). And so, our overall goal with an RSS feed is to generally
    accumulate as many signals in as little of time as possible. With this in mind,
    we now have enough quantitative information that we can now start formulating
    our feed processing logic and equations.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: 'An RSS feed, being collection of feed items, can be mathematically represented
    as the sum of signal and noise feed items:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 1\. RSS Feed Collection Formula*'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Where:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: '`t` = total number of feed items.'
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s` = number of signal items.'
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n` = number of noise items'
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using these variables alone, we calculate a metric that will proxy the quality
    of a feed: the **Signal Ratio**, represented as the fraction of a feed that is
    composed of signals:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2\. Signal Ratio*'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: 'So, for example, if you refresh your feed, and it pulls 10 new items, of which
    2 are of interest to you, then the signal ratio is:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3\. Signal Ratio Example*'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: Higher ratios in this case would represent a higher quality feed (a signal ratio
    of 1.0 would indicate a feed where every item is relevant to you, and thus all
    signals), and lower ratios a lower quality feed (with a value of 0.0 indicates
    pure noise, and thus a feed you would discard).
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: Now, with our measure of quality derived, we need a variable to proxy the rate
    at which can be process feeds. For this, we will use the variable `r` (feed processing
    **r**ate), which will represent the average rate (measured in time) of processing
    a single feed item (processing, in this case, meaning determining if the item
    is a signal or noise). For example, suppose you refresh your feed, get 20 new
    items, and can process a feed at a rate of 10 feed items per minute, then the
    total amount of time you would spend processing this feed is (20 / 10) = 2 minutes.
    And with that, we have all of the logical necessary to analyze our feed.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, suppose:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: We have 0 feed subscriptions.
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We update our subscriptions 1 time per day.
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have at most 10 minutes per day to process all of the feed items.
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a feed processing rate of 5 items per 1 minute.
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Given these assumptions, We would currently be spending 0 minutes to read through
    the feed items and clear the feed, and thus given our time balance of 10 minutes,
    we are currently able to add 10 minutes worth (or 10 * 5 = 50 items worth) of
    subscriptions to the feed. Now, suppose we add a new subscriptions to the feed
    with the following characteristics:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: The new feed has, on average there, 5 new feed items per.
  id: totrans-split-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of the 5 items, on average 2 are signals and 3 are noise.
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Given this feed, a table of our subscriptions would look like:'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: '| Feed | Signal | Noise | Total | Time | Signal Ratio |'
  id: totrans-split-49
  prefs: []
  type: TYPE_TB
- en: '| Sum | 2 | 3 | 5 | 1 | 0.40 |'
  id: totrans-split-50
  prefs: []
  type: TYPE_TB
- en: '| 0 | 2 | 3 | 5 | 1 | 0.40 |'
  id: totrans-split-51
  prefs: []
  type: TYPE_TB
- en: 'This new feed will have an incremental feed processing cost of 1 minute per
    day, below my currently available 10 minutes, and will thus increase my signal
    ratio from 0 to 0.40\. As a result, adding this feed would be beneficial from
    the perspective of an increase in both signals and overall feed quality. Now let''s
    add a second subscription to the feed:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: '| Feed | Signal | Noise | Total | Time | Signal To Total Ratio |'
  id: totrans-split-53
  prefs: []
  type: TYPE_TB
- en: '| Sum | 3 | 5 | 8 | 1.6 | 0.38 |'
  id: totrans-split-54
  prefs: []
  type: TYPE_TB
- en: '| 0 | 2 | 3 | 5 | 1 | 0.40 |'
  id: totrans-split-55
  prefs: []
  type: TYPE_TB
- en: '| 1 | 1 | 2 | 3 | 0.6 | 0.33 |'
  id: totrans-split-56
  prefs: []
  type: TYPE_TB
- en: You'll notice that this new subscription has a lower signal ratio than the prior
    one, bringing the signal ratio down from 0.40 to 0.38, indicating an overall reduction
    in feed quality. However, the total time cost from after adding this subscription
    to the feed is still below 10 minutes (the sum is currently 1.6 minutes), and
    so despite the decrease in quality, it would still be beneficial to add this subscription
    to our feed.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: 'Now lets add 2 more subscriptions with markedly different update frequencies
    and signal ratios:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: '| Feed | Signal | Noise | Total | Time | Signal To Total Ratio |'
  id: totrans-split-59
  prefs: []
  type: TYPE_TB
- en: '| Sum | 6.03 | 35 | 41.03 | 8.206 | 0.15 |'
  id: totrans-split-60
  prefs: []
  type: TYPE_TB
- en: '| 0 | 2 | 3 | 5 | 1 | 0.40 |'
  id: totrans-split-61
  prefs: []
  type: TYPE_TB
- en: '| 1 | 1 | 2 | 3 | 0.6 | 0.33 |'
  id: totrans-split-62
  prefs: []
  type: TYPE_TB
- en: '| 2 | 0.03 | 0 | 0.03 | 0.006 | 1.00 |'
  id: totrans-split-63
  prefs: []
  type: TYPE_TB
- en: '| 3 | 3 | 30 | 33 | 6.6 | 0.09 |'
  id: totrans-split-64
  prefs: []
  type: TYPE_TB
- en: Feed 2 is all signal, no noise. However, the subscription updates so infrequently
    (about once a month) that it has minimal impact on the signal ratio of the entire
    feed. But, the ratio does still increase marginally, and the incremental cost
    is so low that adding it to our feed would be beneficial.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: Feed 3, on the other hand, despite having the highest number of signals per
    day, has such as high amount of noise and total items that it drags the signal
    ratio down by over 0.25 points. Furthermore, the subscription takes up about 80%
    of our time currently, and 66% of the maximum allotted time. Nevertheless, it
    would still be beneficial to add this to our feed, since the total number of signals
    increases and the time taken to process the entire feed is still below 10 minutes.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s add 1 more subscription to our feed:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
- en: '| Feed | Signal | Noise | Total | Time | Signal To Total Ratio |'
  id: totrans-split-68
  prefs: []
  type: TYPE_TB
- en: '| Sum | 9.03 | 42 | 51.03 | 10.206 | 0.18 |'
  id: totrans-split-69
  prefs: []
  type: TYPE_TB
- en: '| 0 | 2 | 3 | 5 | 1 | 0.40 |'
  id: totrans-split-70
  prefs: []
  type: TYPE_TB
- en: '| 1 | 1 | 2 | 3 | 0.6 | 0.33 |'
  id: totrans-split-71
  prefs: []
  type: TYPE_TB
- en: '| 2 | 0.03 | 0 | 0.03 | 0.006 | 1.00 |'
  id: totrans-split-72
  prefs: []
  type: TYPE_TB
- en: '| 3 | 3 | 30 | 33 | 6.6 | 0.09 |'
  id: totrans-split-73
  prefs: []
  type: TYPE_TB
- en: '| 4 | 3 | 7 | 10 | 2 | 0.30 |'
  id: totrans-split-74
  prefs: []
  type: TYPE_TB
- en: 'Now we''ve run into a problem. The new feed improves our signal ratio, so logically
    we would want to add it to our feed, but it also causes us to surpass our maximum
    allotted time (spending 10.2 minutes on average to process the feed, but only
    10 minutes available). So what do we do? Simple, we drop the feeds with the lowest
    signal ratio until the total time spent is below 10 minutes^([[2](#cite-2)]).
    In this case, Feed 3, the feed with the highest number of items but also the worst
    signal ratio, is dropped, producing a final feed of:'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: '| Feed | Signal | Noise | Total | Time | Signal To Total Ratio |'
  id: totrans-split-76
  prefs: []
  type: TYPE_TB
- en: '| Sum | 6.03 | 12 | 18.03 | 3.606 | 0.33 |'
  id: totrans-split-77
  prefs: []
  type: TYPE_TB
- en: '| 0 | 2 | 3 | 5 | 1 | 0.40 |'
  id: totrans-split-78
  prefs: []
  type: TYPE_TB
- en: '| 1 | 1 | 2 | 3 | 0.6 | 0.33 |'
  id: totrans-split-79
  prefs: []
  type: TYPE_TB
- en: '| 2 | 0.03 | 0 | 0.03 | 0.006 | 1.00 |'
  id: totrans-split-80
  prefs: []
  type: TYPE_TB
- en: '| 4 | 3 | 7 | 10 | 2 | 0.30 |'
  id: totrans-split-81
  prefs: []
  type: TYPE_TB
- en: 'And with that, our feed is in balance; We have maximized our feed quality subject
    to our time constraint. Now if we wanted to add Feed 3 back in, we would have
    to do one of the following:'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
- en: Increase `m`.
  id: totrans-split-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase `r`.
  id: totrans-split-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase `s`.
  id: totrans-split-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decrease `n`.
  id: totrans-split-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So how would we modify these variables? In practice,`s` is essentially unchangeable
    in the short run, as what we consider relevant to us typically only changes in
    the longer term. Additionally, `m` is difficult to change in the short run without
    making a trade off elsewhere (for example, spending more time processing the feed
    instead of on other hobbies). That leaves `r` and `n` as potential targets for
    short run optimization. Fortunately, we can improve these values through technical
    solutions that are zero-cost in the long run, allowing us the increase the number
    of signals given the same amount of allocated time.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Thunderbird is a popular desktop email client that also has a built in RSS
    feed reader^([[3](#cite-3)]). To use the RSS functionality, you need to create
    a new Feed Account. Click `File -> New -> Feed Account`, and give the account
    a name. On the most recent ESR version of Thunderbird (115 as of this writing),
    you should see a screen like this:'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4\. Thunderbird Feed Account*'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Now click `Manage feed subscriptions` to add a new feed. We''ll add the feeds
    for the [copyleft NT-based operating system ReactOS](https://reactos.org/index.xml)
    and the [extended LTS Debian project Freexian](https://www.freexian.com/index.xml):'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 5\. Add New Feeds*'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 6\. All Feed Items*'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
- en: 'As of this writing, the ReactOS feed has 523 feed items, and the Freexian feed
    has 1168\. The feeds are quite large, but don''t update that frequently. However,
    for the sake of the example, assume that feeds did ship ~1700 items every day.
    At that rate, we may struggle to process all of the feeds if our feed processing
    rate (the `r` variable) is too slow. Given that many computer users make heavy
    use of the mouse, I decided to do some quick speed tests to determine how fast
    I could comfortably click through items using a mouse, and I ended up with a rate
    of about 25 feed items processed per minute. At that rate, it would take about
    (1700 / 25) = ~68 minutes to process the entire feed. However, we can improve
    our rate substantially by using keyboard shortcuts. The most important feed navigation
    keyboard shortcuts for Thunderbird are:'
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
- en: '`n`: move to the next unread feed item in the current feed (or the next feed
    if the current feed has no more unread items).'
  id: totrans-split-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`f`: move forward 1 feed item (both read and unread).'
  id: totrans-split-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b`: move back 1 feed item (both read and unread).'
  id: totrans-split-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: star the current item.'
  id: totrans-split-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shift+c`: mark all items in a feed as read.'
  id: totrans-split-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using these keyboard shortcuts, we can very quickly navigate through all of
    our unread feed items, and mark entire feeds as read for those feeds that are
    too much noise. With the switch to keyboard shortcuts, I was able to improve my
    feed processing rate to about 75 items per minute, reducing the feed processing
    time to (1700 / 75) = ~22.6 minutes. That's quite a big gain, and in my experience
    keyboard-driven navigation is about as optimal as we can be for processing feed
    items.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Now with our feed processing rate optimized, the next thing we can do is decrease
    noise in the feed to improve our signal ratio and further reduce our total feed
    processing time. To do this, we can use Message Filters to automatically delete
    new feed items that we are not interested. Take a look at the ReactOS feed. Suppose
    we were only interested in the feed items for updated version of ReactOS. In this
    case, all of the non-release items would be noise, and as a result would want
    to filter them out. To do this, we''ll create a message filter by going to `Tools
    -> Message Filters -> New` and add the following filter:'
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 7\. ReactOS Filter*'
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
- en: And then click `Run Now` to filter the ReactOS feed.
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8\. Message Filter Menu*'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
- en: After the filter runs, the amount of feed items in the ReactOS feed is substantially
    reduced. Prior to the filter, the signal ratio was (32 / 523) = ~0.06; after the
    filter it's increased to 1.0 (as, from our perspective, we have filtered out all
    of the noise). Furthermore, the feed processing time is reduced from ~7 minutes
    to ~0.4 minutes.
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 9\. Filtered ReactOS Feed*'
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, for the Freexian feed, suppose we are only interested in general
    news, and not the package security update notifications. All of the security update
    notifications start with `ELA-`, so we an create a filter to remove those items.
    After creating the filter, the feed is reduced from 1168 items to 90 items, and
    we have substantially increased our signal ratio (although it likely is not 1.0,
    as we may get feed items about the project that are not relevant to us, in contrast
    to the very targeted in scope of the ReactOS version update feed items).
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10\. Filtered Freexian Feed*'
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
- en: And with both of these filters, we've reduced the number of feed items from
    1689 to 122 and massively improved our signal ratio of the overall feed. Combine
    this with our efficiency gains in feed processing, and we've reduce the amount
    of feed processing time from ~68 to ~1.6 minutes. If we have only 20 minutes to
    spend on our RSS feed per day, then after the additional efficiencies we will
    have ~18.4 minutes to read through all of the signals, enough to make the use
    of the RSS feed for these subscriptions actually worthwhile.
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
- en: So that's my strategy for processing my RSS feed every day. It's a bit more
    complex then the strategies derived from the organizational methods above, but
    the addition of mathematical and statistical reasoning provides quite a sound
    basis for understanding the feed and ensuring that the quality of the feed remains
    high and the amount of items remains low, reducing the long run risk of feed burnout.
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
- en: ^([^](#ref-1)) I currently subscribe to over 300 feeds.
  id: totrans-split-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ^([^](#ref-2)) Technically, the optimal solution in this case would be to discard
    Feed 1, as it would reduce the total time spent to 9.2 minutes (below the 10 minutes),
    with an average number of 8 signals (2 more than if we removed Feed 3). However,
    in practice we may have a variable amount of time each day to process feeds, and
    for a large number of feeds it becomes less likely that a single subscription
    becomes the majority of the new feed items. As a result, signal ratio is a better
    metric to track, since it ensures that removing subscriptions always increases
    the quality of the feed.
  id: totrans-split-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ^([^](#ref-3)) In fact, it's had RSS feed functionality for over a decade.
  id: totrans-split-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
