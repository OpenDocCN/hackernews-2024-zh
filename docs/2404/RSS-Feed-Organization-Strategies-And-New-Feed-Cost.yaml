- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 12:47:04'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 12:47:04
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: RSS Feed Organization Strategies And New Feed Cost
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RSS 源组织策略和新的源成本
- en: 来源：[https://yukinu.com/blog/2024/02/06/rss-feed-processing-strategies.html](https://yukinu.com/blog/2024/02/06/rss-feed-processing-strategies.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://yukinu.com/blog/2024/02/06/rss-feed-processing-strategies.html](https://yukinu.com/blog/2024/02/06/rss-feed-processing-strategies.html)
- en: 'I was reading an article posted on [The New Leaf Journal](https://thenewleafjournal.com/)
    about [Organizing RSS and ATOM Feeds](https://thenewleafjournal.com/organizing-rss-and-atom-feed-sources/)
    and it got me thinking about my own RSS feed strategy. At a high level, the article
    describes several strategies for organizing an RSS feed, of which from my interpretation
    can be broken down into 4 different methods for organizing feeds:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[The New Leaf Journal](https://thenewleafjournal.com/)发布的一篇关于[组织 RSS 和 ATOM
    源](https://thenewleafjournal.com/organizing-rss-and-atom-feed-sources/)的文章上阅读到的内容让我开始思考我的
    RSS 源策略。从我理解的角度来看，该文章在高层次上描述了几种组织 RSS 源的策略，其中可以分解为四种不同的方法来组织源：
- en: '**Categorical**'
  id: totrans-split-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分类**'
- en: Feeds are organized based how similar the content is to other feeds.
  id: totrans-split-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源是根据内容与其他源的相似性进行组织的。
- en: '**Temporal**'
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间**'
- en: Feeds are organized based on frequency of updates.
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源根据更新频率进行组织。
- en: '**Rank**'
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排名**'
- en: Feeds are organized by a ranking/grading system based on how engaging each feed
    is to the subscriber.
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源按照每个订阅者对其吸引力的排名/评分系统进行组织。
- en: '**Social Graph Distance**'
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社交图距离**'
- en: Feeds are organized by how close the feed is to you personally (roughly your
    distance from the feed source based on a social graph).
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源是按照它们与你个人的接近程度（基于社交图的大致距离）进行组织。
- en: 'A feed strategy, in turn, may use a combination of these methods. For example,
    in the past my strategy for organizing my RSS feed used a combination of the categorical
    and ranking methods; I organized my feed into 3 ranks (high, medium, and low priority),
    and categorized them based on topic. However, over time as my feed grew larger,
    I started to encounter problems with scale from this strategy. Notably:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 反过来，一个源策略可能会使用这些方法的组合。例如，过去我的 RSS 源组织策略使用了分类和排名方法的组合；我将我的源分为 3 个等级（高、中、低优先级），并根据主题对它们进行分类。然而，随着时间的推移，随着我的源规模的增长，我开始遇到这种策略的规模问题。特别是：
- en: Most RSS readers use a tree data structure to organize feeds, but some feeds
    may not neatly fit within this data structure. For example, if you have a category
    for podcasts and a category for technology, then where do technology podcasts
    fit within the tree?
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数 RSS 阅读器使用树形数据结构来组织源，但有些源可能不太适合这种数据结构。例如，如果你有一个播客类别和一个技术类别，那么技术类播客应该如何在这棵树中合理安排？
- en: As more feeds are added, more categories are likely needed, and the result may
    quickly grow into a deeply nested tree that is difficult to navigate.
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着添加更多源，可能需要更多类别，并且结果可能迅速发展成为一个难以导航的深度嵌套树。
- en: It's often unclear how the lower ranks in the feed ranking method should be
    handled if you can't process your entire feed every day. For example, if you can
    process 20 feed items a day, and on a given day you get 20 high priority and 30
    low priority items, then what should happen to the 30 unprocessed low ranked feed
    items? Should they be automatically marked as read, or accumulated? Or should
    the feed be discarded entirely?
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你不能每天处理整个源，那么如何处理源排名方法中的较低排名就往往不明确。例如，如果你每天能处理 20 个源项，而某一天你收到了 20 个高优先级和 30
    个低优先级的源项，那么未处理的 30 个低排名源项应该怎么处理呢？它们应该自动标记为已读，还是累积起来？或者应该完全丢弃这些源？
- en: As I reached over 100 feeds^([[1](#cite-1)]), the aforementioned problems started
    to surface, and so I decided to reformulate my strategy along more mathematical
    lines that would provide a logical mechanism for analyzing my feed and managing
    it's growth. So here is how my RSS strategy works.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当我达到超过 100 个源^([[1](#cite-1)])时，上述问题开始显现，因此我决定重新调整我的策略，更多地朝数学方向发展，这将为分析我的源和管理其增长提供一个逻辑机制。所以这是我的
    RSS 策略如何运作的。
- en: 'Before delving into my strategy, we must first ask 3 questions:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解我的策略之前，我们必须首先提出三个问题：
- en: What is an RSS feed?
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 RSS 源？
- en: Why do we create our own curated feed?
  id: totrans-split-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们要创建我们自己策划的源？
- en: What resource do we use to process a feed?
  id: totrans-split-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理源的资源是什么？
- en: 'At the most fundamental level, an RSS feed is simply a collection of feed items.
    Each feed item can be thought of as being 1 of 2 possible types of information:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在最基本的层面上，RSS 源只是一组源项。每个源项可以被看作是两种可能类型的信息之一：
- en: '**Signals** - Information that is relevant to us.'
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信号** - 对我们有关的信息。'
- en: '**Noise** - Information that is *not* relevant to us.'
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**噪音** - 对我们来说不相关的信息。'
- en: 'The reason we curate our own feeds is to accumulate the former piece of information,
    **Signals**, at a more efficient rate than passively acquiring them (for example,
    through local news channels broadcasting in the background). However, actively
    processing feeds is not free, it requires us to expend a resource: time (represented
    by the variable `m`). And so, our overall goal with an RSS feed is to generally
    accumulate as many signals in as little of time as possible. With this in mind,
    we now have enough quantitative information that we can now start formulating
    our feed processing logic and equations.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们策划自己的饲料的原因是为了以比通过本地新闻频道背景播放（例如通过主动处理饲料而不是被动获取的形式）更有效的速率积累前者的信息，**信号**。然而，主动处理饲料并非免费，它需要我们花费一种资源：时间（由变量`m`表示）。因此，我们RSS饲料的总体目标通常是在尽可能短的时间内积累尽可能多的信号。考虑到这一点，我们现在已经有足够的定量信息可以开始制定我们的饲料处理逻辑和方程。
- en: 'An RSS feed, being collection of feed items, can be mathematically represented
    as the sum of signal and noise feed items:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个RSS饲料，作为饲料项目的集合，可以数学上表示为信号和噪音饲料项目的总和：
- en: '*Figure 1\. RSS Feed Collection Formula*'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1\. RSS饲料收集公式*'
- en: 'Where:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '`t` = total number of feed items.'
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`t` = 总饲料项目数。'
- en: '`s` = number of signal items.'
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s` = 信号项数。'
- en: '`n` = number of noise items'
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n` = 噪音项数'
- en: 'Using these variables alone, we calculate a metric that will proxy the quality
    of a feed: the **Signal Ratio**, represented as the fraction of a feed that is
    composed of signals:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 仅凭这些变量，我们计算一个指标来代理饲料的质量：**信号比率**，表示饲料中信号占比的分数：
- en: '*Figure 2\. Signal Ratio*'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2\. 信号比率*'
- en: 'So, for example, if you refresh your feed, and it pulls 10 new items, of which
    2 are of interest to you, then the signal ratio is:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，例如，如果您刷新您的饲料，并且它拉取了10个新项目，其中有2个您感兴趣的项目，那么信号比率是：
- en: '*Figure 3\. Signal Ratio Example*'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3\. 信号比率示例*'
- en: Higher ratios in this case would represent a higher quality feed (a signal ratio
    of 1.0 would indicate a feed where every item is relevant to you, and thus all
    signals), and lower ratios a lower quality feed (with a value of 0.0 indicates
    pure noise, and thus a feed you would discard).
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，更高的比率表示更高质量的饲料（信号比率为1.0表示每个项目对您都是相关的，因此全部为信号），而较低的比率表示质量较低的饲料（值为0.0表示纯噪音，因此您会丢弃的饲料）。
- en: Now, with our measure of quality derived, we need a variable to proxy the rate
    at which can be process feeds. For this, we will use the variable `r` (feed processing
    **r**ate), which will represent the average rate (measured in time) of processing
    a single feed item (processing, in this case, meaning determining if the item
    is a signal or noise). For example, suppose you refresh your feed, get 20 new
    items, and can process a feed at a rate of 10 feed items per minute, then the
    total amount of time you would spend processing this feed is (20 / 10) = 2 minutes.
    And with that, we have all of the logical necessary to analyze our feed.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过我们衡量的质量衍生，我们需要一个变量来代理我们可以处理饲料的速率。为此，我们将使用变量`r`（饲料处理率），它将表示平均处理单个饲料项目的速率（以时间计量）。例如，假设您刷新您的饲料，获取了20个新项目，并且您可以以每分钟处理10个饲料项目的速率处理饲料，则您处理此饲料所需的总时间为（20
    / 10）= 2分钟。有了这些，我们已经具备分析我们饲料的所有逻辑必要条件。
- en: 'For example, suppose:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设：
- en: We have 0 feed subscriptions.
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有0个饲料订阅。
- en: We update our subscriptions 1 time per day.
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们每天更新我们的订阅1次。
- en: We have at most 10 minutes per day to process all of the feed items.
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们每天最多有10分钟来处理所有的饲料项目。
- en: We have a feed processing rate of 5 items per 1 minute.
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的饲料处理速率为每分钟5项。
- en: 'Given these assumptions, We would currently be spending 0 minutes to read through
    the feed items and clear the feed, and thus given our time balance of 10 minutes,
    we are currently able to add 10 minutes worth (or 10 * 5 = 50 items worth) of
    subscriptions to the feed. Now, suppose we add a new subscriptions to the feed
    with the following characteristics:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这些假设，我们目前需要花费0分钟阅读饲料项目和清理饲料，因此根据我们的时间平衡10分钟，我们目前能够添加价值10分钟（或10 * 5 = 50项价值）的订阅到饲料中。现在，假设我们向饲料中添加一个新的订阅，具有以下特征：
- en: The new feed has, on average there, 5 new feed items per.
  id: totrans-split-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新饲料，平均每个地方有5个新的饲料项目。
- en: Of the 5 items, on average 2 are signals and 3 are noise.
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这5项中，平均有2项是信号，3项是噪音。
- en: 'Given this feed, a table of our subscriptions would look like:'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 给定这个源，我们的订阅表格如下所示：
- en: '| Feed | Signal | Noise | Total | Time | Signal Ratio |'
  id: totrans-split-49
  prefs: []
  type: TYPE_TB
  zh: '| 源 | 信号 | 噪音 | 总数 | 时间 | 信号比 |'
- en: '| Sum | 2 | 3 | 5 | 1 | 0.40 |'
  id: totrans-split-50
  prefs: []
  type: TYPE_TB
  zh: '| 和 | 2 | 3 | 5 | 1 | 0.40 |'
- en: '| 0 | 2 | 3 | 5 | 1 | 0.40 |'
  id: totrans-split-51
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 2 | 3 | 5 | 1 | 0.40 |'
- en: 'This new feed will have an incremental feed processing cost of 1 minute per
    day, below my currently available 10 minutes, and will thus increase my signal
    ratio from 0 to 0.40\. As a result, adding this feed would be beneficial from
    the perspective of an increase in both signals and overall feed quality. Now let''s
    add a second subscription to the feed:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新源每天的增量处理成本为1分钟，低于我目前可用的10分钟，因此将会将我的信号比从0提高到0.40。因此，从增加信号和整体源质量的角度来看，添加此源是有益的。现在让我们将第二个订阅添加到源中：
- en: '| Feed | Signal | Noise | Total | Time | Signal To Total Ratio |'
  id: totrans-split-53
  prefs: []
  type: TYPE_TB
  zh: '| 源 | 信号 | 噪音 | 总数 | 时间 | 信号占总数比率 |'
- en: '| Sum | 3 | 5 | 8 | 1.6 | 0.38 |'
  id: totrans-split-54
  prefs: []
  type: TYPE_TB
  zh: '| 和 | 3 | 5 | 8 | 1.6 | 0.38 |'
- en: '| 0 | 2 | 3 | 5 | 1 | 0.40 |'
  id: totrans-split-55
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 2 | 3 | 5 | 1 | 0.40 |'
- en: '| 1 | 1 | 2 | 3 | 0.6 | 0.33 |'
  id: totrans-split-56
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 2 | 3 | 0.6 | 0.33 |'
- en: You'll notice that this new subscription has a lower signal ratio than the prior
    one, bringing the signal ratio down from 0.40 to 0.38, indicating an overall reduction
    in feed quality. However, the total time cost from after adding this subscription
    to the feed is still below 10 minutes (the sum is currently 1.6 minutes), and
    so despite the decrease in quality, it would still be beneficial to add this subscription
    to our feed.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到这个新订阅的信号比与之前的相比有所降低，从0.40降至0.38，表明总体上反映出源的质量降低。然而，从添加此订阅到源的总时间成本仍然低于10分钟（当前总和为1.6分钟），因此尽管质量有所下降，将此订阅添加到我们的源仍然是有利的。
- en: 'Now lets add 2 more subscriptions with markedly different update frequencies
    and signal ratios:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再增加2个订阅，其更新频率和信号比显著不同：
- en: '| Feed | Signal | Noise | Total | Time | Signal To Total Ratio |'
  id: totrans-split-59
  prefs: []
  type: TYPE_TB
  zh: '| 源 | 信号 | 噪音 | 总数 | 时间 | 信号占总数比率 |'
- en: '| Sum | 6.03 | 35 | 41.03 | 8.206 | 0.15 |'
  id: totrans-split-60
  prefs: []
  type: TYPE_TB
  zh: '| 和 | 6.03 | 35 | 41.03 | 8.206 | 0.15 |'
- en: '| 0 | 2 | 3 | 5 | 1 | 0.40 |'
  id: totrans-split-61
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 2 | 3 | 5 | 1 | 0.40 |'
- en: '| 1 | 1 | 2 | 3 | 0.6 | 0.33 |'
  id: totrans-split-62
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 2 | 3 | 0.6 | 0.33 |'
- en: '| 2 | 0.03 | 0 | 0.03 | 0.006 | 1.00 |'
  id: totrans-split-63
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 0.03 | 0 | 0.03 | 0.006 | 1.00 |'
- en: '| 3 | 3 | 30 | 33 | 6.6 | 0.09 |'
  id: totrans-split-64
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 3 | 30 | 33 | 6.6 | 0.09 |'
- en: Feed 2 is all signal, no noise. However, the subscription updates so infrequently
    (about once a month) that it has minimal impact on the signal ratio of the entire
    feed. But, the ratio does still increase marginally, and the incremental cost
    is so low that adding it to our feed would be beneficial.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 源2全是信号，没有噪音。然而，该订阅更新频率如此低（大约一个月一次），以至于对整个源的信号比影响微乎其微。但是，比率确实还是略有增加，而增量成本如此之低，将其添加到我们的源中将是有利的。
- en: Feed 3, on the other hand, despite having the highest number of signals per
    day, has such as high amount of noise and total items that it drags the signal
    ratio down by over 0.25 points. Furthermore, the subscription takes up about 80%
    of our time currently, and 66% of the maximum allotted time. Nevertheless, it
    would still be beneficial to add this to our feed, since the total number of signals
    increases and the time taken to process the entire feed is still below 10 minutes.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，尽管源3每天的信号数量最高，但噪音和总数都很高，导致信号比下降超过0.25个点。此外，该订阅目前占用了我们大约80%的时间，并且占用了最大允许时间的66%。尽管如此，将其添加到我们的源中仍然是有利的，因为信号总数增加，处理整个源所需的时间仍然低于10分钟。
- en: 'Finally, let''s add 1 more subscription to our feed:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们再向源中添加1个订阅：
- en: '| Feed | Signal | Noise | Total | Time | Signal To Total Ratio |'
  id: totrans-split-68
  prefs: []
  type: TYPE_TB
  zh: '| 源 | 信号 | 噪音 | 总数 | 时间 | 信号占总数比率 |'
- en: '| Sum | 9.03 | 42 | 51.03 | 10.206 | 0.18 |'
  id: totrans-split-69
  prefs: []
  type: TYPE_TB
  zh: '| 和 | 9.03 | 42 | 51.03 | 10.206 | 0.18 |'
- en: '| 0 | 2 | 3 | 5 | 1 | 0.40 |'
  id: totrans-split-70
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 2 | 3 | 5 | 1 | 0.40 |'
- en: '| 1 | 1 | 2 | 3 | 0.6 | 0.33 |'
  id: totrans-split-71
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 2 | 3 | 0.6 | 0.33 |'
- en: '| 2 | 0.03 | 0 | 0.03 | 0.006 | 1.00 |'
  id: totrans-split-72
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 0.03 | 0 | 0.03 | 0.006 | 1.00 |'
- en: '| 3 | 3 | 30 | 33 | 6.6 | 0.09 |'
  id: totrans-split-73
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 3 | 30 | 33 | 6.6 | 0.09 |'
- en: '| 4 | 3 | 7 | 10 | 2 | 0.30 |'
  id: totrans-split-74
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 3 | 7 | 10 | 2 | 0.30 |'
- en: 'Now we''ve run into a problem. The new feed improves our signal ratio, so logically
    we would want to add it to our feed, but it also causes us to surpass our maximum
    allotted time (spending 10.2 minutes on average to process the feed, but only
    10 minutes available). So what do we do? Simple, we drop the feeds with the lowest
    signal ratio until the total time spent is below 10 minutes^([[2](#cite-2)]).
    In this case, Feed 3, the feed with the highest number of items but also the worst
    signal ratio, is dropped, producing a final feed of:'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们遇到了一个问题。新的订阅源改善了我们的信号比，因此逻辑上我们希望将其添加到我们的订阅源中，但它也导致我们超过了最大可用时间（平均花费 10.2
    分钟处理订阅源，但只有 10 分钟可用）。那么我们该怎么办？简单，我们放弃信号比最低的订阅源，直到总时间低于 10 分钟^([[2](#cite-2)])。在这种情况下，Feed
    3，项目数最多但信号比最差的订阅源被放弃，产生了最终的订阅源：
- en: '| Feed | Signal | Noise | Total | Time | Signal To Total Ratio |'
  id: totrans-split-76
  prefs: []
  type: TYPE_TB
  zh: '| 订阅源 | 信号 | 噪音 | 总计 | 时间 | 信号到总比率 |'
- en: '| Sum | 6.03 | 12 | 18.03 | 3.606 | 0.33 |'
  id: totrans-split-77
  prefs: []
  type: TYPE_TB
  zh: '| 总计 | 6.03 | 12 | 18.03 | 3.606 | 0.33 |'
- en: '| 0 | 2 | 3 | 5 | 1 | 0.40 |'
  id: totrans-split-78
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 2 | 3 | 5 | 1 | 0.40 |'
- en: '| 1 | 1 | 2 | 3 | 0.6 | 0.33 |'
  id: totrans-split-79
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 2 | 3 | 0.6 | 0.33 |'
- en: '| 2 | 0.03 | 0 | 0.03 | 0.006 | 1.00 |'
  id: totrans-split-80
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 0.03 | 0 | 0.03 | 0.006 | 1.00 |'
- en: '| 4 | 3 | 7 | 10 | 2 | 0.30 |'
  id: totrans-split-81
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 3 | 7 | 10 | 2 | 0.30 |'
- en: 'And with that, our feed is in balance; We have maximized our feed quality subject
    to our time constraint. Now if we wanted to add Feed 3 back in, we would have
    to do one of the following:'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一来，我们的供给就平衡了；在时间约束下，我们已经最大化了我们的供给质量。现在，如果我们想要重新添加 Feed 3，我们必须执行以下操作之一：
- en: Increase `m`.
  id: totrans-split-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加 `m`。
- en: Increase `r`.
  id: totrans-split-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加 `r`。
- en: Increase `s`.
  id: totrans-split-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加 `s`。
- en: Decrease `n`.
  id: totrans-split-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少 `n`。
- en: So how would we modify these variables? In practice,`s` is essentially unchangeable
    in the short run, as what we consider relevant to us typically only changes in
    the longer term. Additionally, `m` is difficult to change in the short run without
    making a trade off elsewhere (for example, spending more time processing the feed
    instead of on other hobbies). That leaves `r` and `n` as potential targets for
    short run optimization. Fortunately, we can improve these values through technical
    solutions that are zero-cost in the long run, allowing us the increase the number
    of signals given the same amount of allocated time.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何修改这些变量呢？在实践中，`s` 在短期内基本上是不可改变的，因为我们认为对我们相关的内容通常只在较长时期内发生变化。此外，`m` 在短期内要想不做其他妥协（例如，花更多时间处理订阅源而不是做其他爱好）是很难改变的。这就把
    `r` 和 `n` 留作了短期优化的潜在目标。幸运的是，我们可以通过技术解决方案来提高这些值，在长期内是零成本的，允许我们在相同分配的时间内增加信号数。
- en: 'Thunderbird is a popular desktop email client that also has a built in RSS
    feed reader^([[3](#cite-3)]). To use the RSS functionality, you need to create
    a new Feed Account. Click `File -> New -> Feed Account`, and give the account
    a name. On the most recent ESR version of Thunderbird (115 as of this writing),
    you should see a screen like this:'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: Thunderbird 是一个流行的桌面邮件客户端，同时还内置了一个 RSS 订阅阅读器^([[3](#cite-3)])。要使用 RSS 功能，您需要创建一个新的
    Feed 帐户。点击 `文件 -> 新建 -> Feed 帐户`，然后给帐户取一个名字。在最新的 Thunderbird ESR 版本（截至本文写作时为 115），您应该会看到如下界面：
- en: '*Figure 4\. Thunderbird Feed Account*'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4\. Thunderbird Feed 帐户*'
- en: 'Now click `Manage feed subscriptions` to add a new feed. We''ll add the feeds
    for the [copyleft NT-based operating system ReactOS](https://reactos.org/index.xml)
    and the [extended LTS Debian project Freexian](https://www.freexian.com/index.xml):'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击 `管理订阅源` 来添加一个新的订阅源。我们将添加 [copyleft NT-based operating system ReactOS](https://reactos.org/index.xml)
    和 [extended LTS Debian project Freexian](https://www.freexian.com/index.xml) 的订阅源：
- en: '*Figure 5\. Add New Feeds*'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5\. 添加新的订阅源*'
- en: '*Figure 6\. All Feed Items*'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6\. 所有 Feed 项目*'
- en: 'As of this writing, the ReactOS feed has 523 feed items, and the Freexian feed
    has 1168\. The feeds are quite large, but don''t update that frequently. However,
    for the sake of the example, assume that feeds did ship ~1700 items every day.
    At that rate, we may struggle to process all of the feeds if our feed processing
    rate (the `r` variable) is too slow. Given that many computer users make heavy
    use of the mouse, I decided to do some quick speed tests to determine how fast
    I could comfortably click through items using a mouse, and I ended up with a rate
    of about 25 feed items processed per minute. At that rate, it would take about
    (1700 / 25) = ~68 minutes to process the entire feed. However, we can improve
    our rate substantially by using keyboard shortcuts. The most important feed navigation
    keyboard shortcuts for Thunderbird are:'
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 撰写本文时，ReactOS订阅有523个订阅项目，Freexian订阅有1168个。订阅非常庞大，但更新并不频繁。然而，为了举例说明，假设每天订阅发送约1700个项目。以这种速率，如果我们的订阅处理速率（变量
    `r`）过慢，可能会难以处理所有订阅。鉴于许多计算机用户经常使用鼠标，我决定进行一些快速速度测试，以确定我使用鼠标可以轻松点击项目的速度，最终得出每分钟处理约25个订阅项目的速率。以这种速率，处理整个订阅将需要约（1700
    / 25）= ~68分钟。然而，通过使用键盘快捷键，我们可以显著提高我们的速率。Thunderbird中最重要的订阅导航键盘快捷键包括：
- en: '`n`: move to the next unread feed item in the current feed (or the next feed
    if the current feed has no more unread items).'
  id: totrans-split-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`: 移动到当前订阅中的下一个未读项目（或者如果当前订阅没有更多未读项目，则移动到下一个订阅）。'
- en: '`f`: move forward 1 feed item (both read and unread).'
  id: totrans-split-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f`: 前进1个订阅项目（已读和未读都包括）。'
- en: '`b`: move back 1 feed item (both read and unread).'
  id: totrans-split-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b`: 后退1个订阅项目（已读和未读都包括）。'
- en: '`s`: star the current item.'
  id: totrans-split-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`: 给当前项目加星标。'
- en: '`Shift+c`: mark all items in a feed as read.'
  id: totrans-split-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Shift+c`: 将当前订阅中的所有项目标记为已读。'
- en: Using these keyboard shortcuts, we can very quickly navigate through all of
    our unread feed items, and mark entire feeds as read for those feeds that are
    too much noise. With the switch to keyboard shortcuts, I was able to improve my
    feed processing rate to about 75 items per minute, reducing the feed processing
    time to (1700 / 75) = ~22.6 minutes. That's quite a big gain, and in my experience
    keyboard-driven navigation is about as optimal as we can be for processing feed
    items.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些键盘快捷键，我们可以非常快速地浏览所有未读的订阅项目，并标记那些有太多噪音的订阅为已读。通过切换到键盘快捷键，我能够将我的订阅处理速率提高到大约每分钟75个项目，将订阅处理时间减少到（1700
    / 75）= ~22.6分钟。这是相当大的收益，在我的经验中，通过键盘驱动的导航是处理订阅项目时可以达到的最佳状态。
- en: 'Now with our feed processing rate optimized, the next thing we can do is decrease
    noise in the feed to improve our signal ratio and further reduce our total feed
    processing time. To do this, we can use Message Filters to automatically delete
    new feed items that we are not interested. Take a look at the ReactOS feed. Suppose
    we were only interested in the feed items for updated version of ReactOS. In this
    case, all of the non-release items would be noise, and as a result would want
    to filter them out. To do this, we''ll create a message filter by going to `Tools
    -> Message Filters -> New` and add the following filter:'
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，优化了我们的订阅处理速率，我们接下来可以做的是减少订阅中的噪音，以提高我们的信号比并进一步减少总体订阅处理时间。为此，我们可以使用消息过滤器自动删除我们不感兴趣的新订阅项目。看一下ReactOS订阅。假设我们只对ReactOS的更新版本订阅感兴趣。在这种情况下，所有非发布项目都是噪音，因此我们希望将它们过滤掉。为此，我们将通过转到`工具
    -> 消息过滤器 -> 新建`来创建一个消息过滤器，并添加以下过滤器：
- en: '*Figure 7\. ReactOS Filter*'
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7. ReactOS过滤器*'
- en: And then click `Run Now` to filter the ReactOS feed.
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击`立即运行`来过滤ReactOS订阅。
- en: '*Figure 8\. Message Filter Menu*'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8. 消息过滤器菜单*'
- en: After the filter runs, the amount of feed items in the ReactOS feed is substantially
    reduced. Prior to the filter, the signal ratio was (32 / 523) = ~0.06; after the
    filter it's increased to 1.0 (as, from our perspective, we have filtered out all
    of the noise). Furthermore, the feed processing time is reduced from ~7 minutes
    to ~0.4 minutes.
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在过滤器运行后，ReactOS订阅中的反馈项目数量大大减少。在应用过滤器之前，信号比为（32 / 523）= ~0.06；在过滤器应用后增加到1.0（从我们的角度来看，我们已经过滤掉了所有的噪音）。此外，反馈处理时间从约7分钟减少到约0.4分钟。
- en: '*Figure 9\. Filtered ReactOS Feed*'
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*图9. 过滤后的ReactOS订阅*'
- en: Similarly, for the Freexian feed, suppose we are only interested in general
    news, and not the package security update notifications. All of the security update
    notifications start with `ELA-`, so we an create a filter to remove those items.
    After creating the filter, the feed is reduced from 1168 items to 90 items, and
    we have substantially increased our signal ratio (although it likely is not 1.0,
    as we may get feed items about the project that are not relevant to us, in contrast
    to the very targeted in scope of the ReactOS version update feed items).
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，对于Freexian订阅源，假设我们只对一般新闻感兴趣，而不是包安全更新通知。所有的安全更新通知都以`ELA-`开头，因此我们可以创建一个过滤器来移除这些项。创建过滤器后，订阅源从1168项减少到90项，并且我们显著增加了信号比例（尽管可能不是1.0，因为我们可能会收到与我们不相关的项目有关的订阅项，与ReactOS版本更新订阅项非常具体的范围形成对比）。
- en: '*Figure 10\. Filtered Freexian Feed*'
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10\. 筛选后的Freexian订阅源*'
- en: And with both of these filters, we've reduced the number of feed items from
    1689 to 122 and massively improved our signal ratio of the overall feed. Combine
    this with our efficiency gains in feed processing, and we've reduce the amount
    of feed processing time from ~68 to ~1.6 minutes. If we have only 20 minutes to
    spend on our RSS feed per day, then after the additional efficiencies we will
    have ~18.4 minutes to read through all of the signals, enough to make the use
    of the RSS feed for these subscriptions actually worthwhile.
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这两个过滤器，我们将订阅项数量从1689减少到122，并显著改善了整体订阅源的信号比例。结合我们在处理订阅源方面的效率提升，我们将处理订阅源的时间从大约68分钟降低到约1.6分钟。如果我们每天只有20分钟用于处理RSS订阅源，那么在额外的效率提升后，我们将有约18.4分钟来阅读所有的信号，足以使得使用RSS订阅这些订阅变得真正值得。
- en: So that's my strategy for processing my RSS feed every day. It's a bit more
    complex then the strategies derived from the organizational methods above, but
    the addition of mathematical and statistical reasoning provides quite a sound
    basis for understanding the feed and ensuring that the quality of the feed remains
    high and the amount of items remains low, reducing the long run risk of feed burnout.
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是我每天处理我的RSS订阅源的策略。比上述组织方法衍生的策略稍微复杂一些，但是添加了数学和统计推理，为理解订阅源提供了相当坚实的基础，确保订阅源的质量保持高水平，项目数量保持较低，从而降低了长期疲劳的风险。
- en: '* * *'
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ^([^](#ref-1)) I currently subscribe to over 300 feeds.
  id: totrans-split-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ^([^](#ref-1)) 我目前订阅了超过300个源。
- en: ^([^](#ref-2)) Technically, the optimal solution in this case would be to discard
    Feed 1, as it would reduce the total time spent to 9.2 minutes (below the 10 minutes),
    with an average number of 8 signals (2 more than if we removed Feed 3). However,
    in practice we may have a variable amount of time each day to process feeds, and
    for a large number of feeds it becomes less likely that a single subscription
    becomes the majority of the new feed items. As a result, signal ratio is a better
    metric to track, since it ensures that removing subscriptions always increases
    the quality of the feed.
  id: totrans-split-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ^([^](#ref-2)) 从技术上讲，在这种情况下的最佳解决方案应该是丢弃订阅源1，因为这将把总共花费的时间降低到9.2分钟（低于10分钟），平均信号数量为8（比移除订阅源3多2个）。然而，在实践中，我们每天可能有不同的处理时间，对于大量的订阅源来说，一个单独的订阅源成为新的订阅项的主要来源的可能性较小。因此，信号比率是一个更好的跟踪指标，因为它确保移除订阅源总是增加订阅源质量。
- en: ^([^](#ref-3)) In fact, it's had RSS feed functionality for over a decade.
  id: totrans-split-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ^([^](#ref-3)) 实际上，它的RSS订阅功能已有十多年历史。
