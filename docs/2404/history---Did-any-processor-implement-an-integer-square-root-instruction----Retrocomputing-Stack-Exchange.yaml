- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:00:08'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:00:08'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: history - Did any processor implement an integer square root instruction? -
    Retrocomputing Stack Exchange
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 历史 - 任何处理器实现整数平方根指令吗？ - 复古计算 Stack Exchange
- en: 来源：[https://retrocomputing.stackexchange.com/questions/29787/did-any-processor-implement-an-integer-square-root-instruction](https://retrocomputing.stackexchange.com/questions/29787/did-any-processor-implement-an-integer-square-root-instruction)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://retrocomputing.stackexchange.com/questions/29787/did-any-processor-implement-an-integer-square-root-instruction](https://retrocomputing.stackexchange.com/questions/29787/did-any-processor-implement-an-integer-square-root-instruction)
- en: The claim in [another answer](/a/29789) of the Quake trick being the most efficient
    has not been true for a long time, and was only true regarding low-quality results
    for floats on specific hardware. On pretty much every modern chip the native instructions
    are much, much faster, often a few clock cycles. (I'm the Chris Lomont that wrote
    an early, widely cited paper on the Quake trick, providing generalizaitions and
    an improvement that seems to have been copied everywhere, despite it being a terrible
    idea now).
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个答案中的主张（/a/29789），地震技巧是最有效的，这种说法在现代硬件上很长一段时间内不再成立，并且仅对特定硬件上浮点数的低质量结果成立。在几乎所有现代芯片上，本地指令速度要快得多，通常只需几个时钟周期。
    （我是写过早期广泛引用的地震技巧的克里斯·洛蒙特，提供了一般化和似乎已被各处复制的改进，尽管现在它是一个可怕的想法）。
- en: A much quicker method, one used in hardware (with many more tricks), is to store
    a (non-equal spaced) table of values, use a quick method to pull two values, linear
    (or better) interpolate, shift base 2 exponent with any odd excess becoming a
    multiple by constant sqrt2, then, if needed, one iteration of methods better than
    Newton–Raphson.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更快的方法，一种在硬件中使用的方法（有更多的技巧），是存储一个（非等间距）值表，使用快速方法提取两个值，线性（或更好）插值，将基础2的指数移位，任何奇数余数变成常数sqrt2的倍数，然后，如果需要，使用比牛顿-拉弗逊更好的方法进行一次迭代。
- en: Things like Halley's (and many others) converge quicker than Netwon–Raphson,
    and are often much faster depending on what time various operations take.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 像哈雷（和许多其他方法）的收敛速度比牛顿-拉弗逊更快，并且通常取决于各种操作所需的时间，速度更快。
- en: Approximations for square root on a fixed interval (since all the methods for
    computers are bounded) are often also faster, polynomial, Cheby stuff, Pade and
    higher versions, all can be done in software or hardware, depending on what tradeoffs
    you want.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个固定区间上求平方根的近似方法（因为所有计算机方法都是有界的）通常也更快，多项式，切比雪夫方法，帕德和更高版本，都可以在软件或硬件上完成，这取决于你希望做出的权衡。
- en: 'If you only want integer, say 2^32, the same trick applies, do it in fixed
    point, and some not too hard analysis lets you bound tables very quickly. Another
    simple method used in hardware for integers is divide and conquer: each say 8
    bits maps to a table of 256 fixed point values, instantly looked up in parallel,
    then 3 multiples (2 in parallel) give the 32 bit value (after a free truncate).'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只需要整数，比如2^32，同样的技巧适用，以定点方式执行，并且一些不太复杂的分析能让你快速限制表格。另一种在整数硬件中使用的简单方法是分而治之：每8位映射到256个固定点值的表格中，并行即时查找，然后3倍（2个并行）给出32位值（经过免费截断）。
- en: 'There''s still plenty of research being done on speeding these up (e.g., [https://inria.hal.science/hal-03424131](https://inria.hal.science/hal-03424131)),
    so any technique over 10 years old is most surely obsolete for any metric: speed,
    power consumption, die size, etc.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术仍然在加速研究中进行（例如，[https://inria.hal.science/hal-03424131](https://inria.hal.science/hal-03424131)），因此超过10年的任何技术都绝对已过时，无论是速度，功耗，芯片面积等度量。
