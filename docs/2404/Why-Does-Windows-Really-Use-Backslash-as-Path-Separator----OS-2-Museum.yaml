- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:29:20'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:29:20'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Why Does Windows Really Use Backslash as Path Separator? | OS/2 Museum
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么Windows真的使用反斜杠作为路径分隔符？ | OS/2博物馆
- en: 来源：[https://www.os2museum.com/wp/why-does-windows-really-use-backslash-as-path-separator/](https://www.os2museum.com/wp/why-does-windows-really-use-backslash-as-path-separator/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.os2museum.com/wp/why-does-windows-really-use-backslash-as-path-separator/](https://www.os2museum.com/wp/why-does-windows-really-use-backslash-as-path-separator/)
- en: 'More or less anyone using modern PCs has to wonder: Why does Windows use backslash
    as a path separator when the rest of the world uses forward slash? The clear intermediate
    answer is “because DOS and OS/2 used backslash”. Both Windows 9x and NT were directly
    or indirectly derived from DOS and OS/2, and certainly inherited much of the DOS
    cultural landscape.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有现代PC用户都会有一个疑问：为什么Windows使用反斜杠作为路径分隔符，而其他地方使用正斜杠？明显的中间答案是“因为DOS和OS/2使用了反斜杠”。Windows
    9x和NT无论是直接还是间接地都是从DOS和OS/2衍生出来的，并且在很大程度上继承了DOS的文化背景。
- en: That, of course, is not much of an answer. The obvious next question is, why
    did DOS use backslash as a path separator? When DOS 2.0 added support for hierarchical
    directory structure, it was more than a little influenced by UNIX (or perhaps
    more specifically XENIX), and using the forward slash as a path separator would
    have been the logical choice. That’s what everyone can agree on. Beyond that,
    things get a bit muddled.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这并不是一个很好的答案。显而易见的下一个问题是，为什么DOS使用反斜杠作为路径分隔符？当DOS 2.0添加对分层目录结构的支持时，它受到了UNIX（或更确切地说是XENIX）的很大影响，使用正斜杠作为路径分隔符本应是一个逻辑的选择。这是所有人都可以同意的。除此之外，事情就有些混乱了。
- en: The only thing that is clear is that Microsoft and IBM were responsible for
    using the backslash as path separator in DOS 2.0\. Microsoft reportedly wanted
    to use the forward slash as path separator, but IBM nixed the idea because it
    would have created an incompatibility with DOS 1.x, which already used the forward
    slash as a switch character, separating command options.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一清楚的是微软和IBM在DOS 2.0中使用反斜杠作为路径分隔符。据报道，微软当初想使用正斜杠作为路径分隔符，但IBM否决了这个想法，因为这会与已经使用正斜杠作为开关字符的DOS
    1.x不兼容。
- en: Microsoft old-timers all agree that IBM was strongly against changing the forward
    slash as a switch character. They are less clear on where that particular slash
    usage had come from.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的老员工都一致认为，IBM曾强烈反对将斜杠作为开关字符。但他们对于这种特定用法的起源并不太清楚。
- en: There are [silly theories](https://superuser.com/questions/176388/why-does-windows-use-backslashes-for-paths-and-unix-forward-slashes)
    about it, like “the slash came from CP/M”. Well, it didn’t. There is no real evidence
    that CP/M used the forward slash anywhere except the name of the product. Most
    CP/M commands had no options at all. Third party CP/M tools (such as Micrsoft’s)
    may well have used slashes, but not the OS itself.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有些[荒谬的理论](https://superuser.com/questions/176388/why-does-windows-use-backslashes-for-paths-and-unix-forward-slashes)，比如“斜杠来源于CP/M”。其实不是的。实际上没有证据表明CP/M在任何地方使用正斜杠，除了产品名称。大多数CP/M命令根本没有选项。第三方的CP/M工具（比如微软的）可能会使用斜杠，但操作系统本身并没有。
- en: There is obvious nonsense like “CP/M got the slash from VMS”, which is simply
    not possible because CP/M is older than VMS, *and* CP/M did not use the forward
    slash anyway.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有些明显荒谬的理论，比如“CP/M从VMS那里得到了斜杠”，这是不可能的，因为CP/M比VMS更老，并且CP/M本身根本不使用正斜杠。
- en: SCP’s 86-DOS likewise did not use the forward slash. Which means DOS did not
    inherit the forward slash from its direct or indirect predecessors (86-DOS and
    CP/M). It must have come from somewhere else. Can we find out where from?
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: SCP的86-DOS同样没有使用正斜杠。这意味着DOS没有从其直接或间接的前辈（86-DOS和CP/M）那里继承正斜杠。它必定来自其他地方。我们能找到这个来源吗？
- en: In fact even PC DOS 1.0 (1981) used the forward slash very, very little. The
    FORMAT command had the /S option to copy system files, and LINK had a /P option
    to pause before writing the resulting executable, so that floppies could be swapped.
    That was it.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，即使是PC DOS 1.0（1981年），也极少使用正斜杠。FORMAT命令有/S选项用于复制系统文件，LINK有/P选项在写入结果可执行文件之前暂停，以便可以更换软盘。就是这样。
- en: Notably LINK and FORMAT were both written by Microsoft. An important point is
    that PC DOS 1.0 *did* use forward slashes as option separators upon release.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，LINK和FORMAT都是由微软编写的。一个重要的点是，PC DOS 1.0在发布时确实使用正斜杠作为选项分隔符。
- en: PC DOS 1.1 (1982) significantly increased the use of the forward slash. COPY
    had the /A, /B, and /V switches, DIR had /P and /W switches, while DISCKOMP, DISKCOPY,
    and FORMAT now had a /1 switch (for one-sided floppy operation). The linker likewise
    had new options such as /DSALLOCATION, /HIGH, /LINE, /MAP, /PAUSE, and /STACK.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: PC DOS 1.1（1982年）显著增加了斜杠的使用。COPY命令有/A、/B和/V等开关，DIR命令有/P和/W等开关，而DISCKOMP、DISKCOPY和FORMAT现在都有/1开关（用于单面软盘操作）。链接器也新增了选项，如/DSALLOCATION、/HIGH、/LINE、/MAP、/PAUSE和/STACK。
- en: That kind of forward slash usage was no doubt why IBM insisted on keeping it
    in DOS 2.0\. Changing the slash semantics had a clear potential for destroying
    data, especially when running batch files written for DOS 1.1\. Something like
    ‘COPY FOO + BAR /A’ has rather different semantics when /A is a switch vs. when
    /A is a file or directory in the disk’s root directory.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 那种斜杠的使用方式毫无疑问是IBM坚持将其保留在DOS 2.0中的原因。更改斜杠的语义显然具有破坏数据的潜力，特别是在运行为DOS 1.1编写的批处理文件时。例如像
    'COPY FOO + BAR /A'，当/A是一个开关时，其语义与/A是磁盘根目录中的文件或目录时完全不同。
- en: In retrospect it seems silly to change the path separator in order to preserve
    backward compatibility with a short-lived early PC operating system, but hindsight
    is 20/20 and in 1982, the future popularity of UNIX and DOS (and its derivatives)
    was incredibly non-obvious.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾来看，为了保留与一个短命的早期PC操作系统的向后兼容性而更改路径分隔符似乎有些愚蠢，但事后诸葛亮，1982年时UNIX及其衍生品的未来流行显然并不明显。
- en: At any rate, it’s clear that DOS used the forward slash since version 1.0, even
    though its immediate predecessors, CP/M and 86-DOS, did not. So where *did* it
    come from? Manuals for old Microsoft language products provide a very good hint.
    [Microsoft’s tools for the 8080](ftp://bitsavers.informatik.uni-stuttgart.de/pdf/microsoft/cpm/Microsoft_FORTRAN-80_Users_Manual_1977.pdf)
    (F80 FORTRAN compiler, M80 macro assembler, LINK 8080 linker all used the forward
    slash as a switch character separating command line options, and did so at least
    as far back as 1977\. In other words, Microsoft used slash as a switch character
    before the 8086 even existed, and continued using it for [8086-based tools](ftp://bitsavers.informatik.uni-stuttgart.de/pdf/microsoft/cpm/Microsoft_8086_Utility_Software_Package_1981.pdf).
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，显然DOS自1.0版本起就使用了斜杠，即使其直接前身CP/M和86-DOS没有使用。那么，它是从哪里来的呢？旧版Microsoft语言产品的手册提供了一个很好的提示。[Microsoft为8080提供的工具](ftp://bitsavers.informatik.uni-stuttgart.de/pdf/microsoft/cpm/Microsoft_FORTRAN-80_Users_Manual_1977.pdf)（如F80
    FORTRAN编译器、M80宏汇编器、8080链接器）都将斜杠用作分隔命令行选项的开关字符，至少从1977年开始就是如此。换句话说，Microsoft甚至在8086存在之前就已经使用斜杠作为开关字符，并继续在[基于8086的工具](ftp://bitsavers.informatik.uni-stuttgart.de/pdf/microsoft/cpm/Microsoft_8086_Utility_Software_Package_1981.pdf)中使用它。
- en: Did Microsoft invent the slash usage? Of course not. A good hint was [provided
    on Larry Osterman’s blog by Hans Spiller](https://web.archive.org/web/20140507004133/http://blogs.msdn.com/b/larryosterman/archive/2005/06/24/432386.aspx?PageIndex=2#comments),
    an old time Microsoft compiler author. Even that hint looks wrong, because the
    claimed history was DEC TOPS-10 to CP/M to DOS, even though CP/M itself did not
    use the slash. But TOPS-10 sure did use the slash. And a lot more.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft发明了斜杠的使用吗？当然没有。来自Hans Spiller的[Larry Osterman博客上的线索](https://web.archive.org/web/20140507004133/http://blogs.msdn.com/b/larryosterman/archive/2005/06/24/432386.aspx?PageIndex=2#comments)提供了一个很好的提示，他是一位早期的Microsoft编译器作者。即使是这个线索看起来也是错误的，因为所声称的历史是从DEC
    TOPS-10到CP/M再到DOS，即使CP/M本身并没有使用斜杠。但是TOPS-10确实使用了大量的斜杠。
- en: In his[*Computer Connections*](https://d1yx3ys82bpsa0.cloudfront.net/kildall-p.1-78-publishable-lowres.pdf)
    memoir, Gary Kildall claimed (page 26) that Bill Gates and Paul Allen used a DEC
    PDP-10 timesharing system, almost certainly running TOPS-10, after stealing other
    users’ passwords (because the OS recycled memory pages used by other users without
    scrubbing them, leaving information including plaintext passwords behind).
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的[*Computer Connections*](https://d1yx3ys82bpsa0.cloudfront.net/kildall-p.1-78-publishable-lowres.pdf)回忆录中，Gary
    Kildall声称（第26页），Bill Gates和Paul Allen在使用DEC PDP-10分时系统时几乎肯定是在运行TOPS-10，当时他们偷窃了其他用户的密码（因为操作系统未经擦除即回收了其他用户使用的内存页面，留下包括明文密码在内的信息）。
- en: Microsoft’s own *MS-DOS Encyclopedia* (1988) mentions that Marc McDonald, an
    early Microsoft employee, developed an 8-bit multitasking OS called M-DOS, which
    was “modeled after the DEC TOPS-10 operating system”. Further on, the same book
    explicitly says that “version 1.x of MS-DOS, borrowing from the tradition of DEC
    operating systems, already used the forward slash for switches in the command
    line”.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft's own *MS-DOS Encyclopedia*（1988）提到，早期微软员工Marc McDonald开发了一个名为M-DOS的8位多任务操作系统，该系统“仿照DEC
    TOPS-10操作系统”。同一本书还明确指出，“MS-DOS的1.x版本从DEC操作系统的传统中借鉴，已经在命令行中使用斜杠作为开关”。
- en: There we have Microsoft’s own word that the forward slash came not from CP/M,
    not from IBM, but from DEC, and there’s an explicit mention of [TOPS-10](https://en.wikipedia.org/wiki/TOPS-10).
    Can we find supporting evidence?
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，微软自己说斜杠不是来自CP/M，也不是来自IBM，而是来自DEC，明确提到了[TOPS-10](https://en.wikipedia.org/wiki/TOPS-10)。我们能找到支持的证据吗？
- en: It’s TOPS-10!
  id: totrans-split-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这就是TOPS-10！
- en: The DEC TOPS-10 goes back to the late 1960s and is certainly old enough that
    CP/M and DOS could have been influenced by it. UNIX, on the other hand, is not
    quite old enough to have had much influence on CP/M at all, because both were
    developed more or less at the same time, in the early 1970s. While UNIX was a
    strong influence on DOS 2.0, there is little evidence that it influenced DOS 1.x
    in any way at all (while CP/M was a very major influence, obviously).
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: DEC TOPS-10可以追溯到1960年代末，肯定足够早以至于CP/M和DOS可能受其影响。另一方面，UNIX并不足够早以至于对CP/M没有任何影响，因为它们几乎是在同一时间内开发的，即1970年代初。虽然UNIX对DOS
    2.0有很大影响，但几乎没有证据表明它在任何方面影响了DOS 1.x（而CP/M显然是一个非常主要的影响）。
- en: The DEC PDP-10 mainframe appeared in 1966, and since 1970 it was marketed as
    DECsystem-10, running the TOPS-10 operating system. The PDP-10 with TOPS-10 was
    perhaps the first widely used time-sharing system, and it was used by many universities
    in the 1970s. As such, many early Microsofties, likely including Gates and Allen,
    would have been familiar with TOPS-10.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: DEC PDP-10主机出现在1966年，并自1970年起作为DECsystem-10进行市场推广，运行TOPS-10操作系统。配备TOPS-10的PDP-10可能是第一个广泛使用的分时系统，并在1970年代被许多大学采用。因此，许多早期的微软员工，包括盖茨和艾伦，可能对TOPS-10很熟悉。
- en: 'Nowadays it is easy to find a [TOPS-10 manual](ftp://bitsavers.informatik.uni-stuttgart.de/scandocs.trailing-edge.com/tops10-aa-0916d-tb.pdf),
    and browsing through it is quite a revelation. Here’s a short example (page 2-220):'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，很容易找到[TOPS-10手册](ftp://bitsavers.informatik.uni-stuttgart.de/scandocs.trailing-edge.com/tops10-aa-0916d-tb.pdf)，浏览其中的内容会有很大的收获。这里举个简短的例子（第2-220页）：
- en: '[PRE0]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The DIR command lists directory contents. File names have a fixed length and
    a three-character extension. Executables have an .EXE extension. Disk names have
    a colon at the end. That looks a lot like DOS and nothing like UNIX.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: DIR命令列出目录内容。文件名具有固定长度和三字符扩展名。可执行文件的扩展名为.EXE。磁盘名称末尾带有冒号。这看起来非常像DOS，与UNIX毫不相似。
- en: Note that the odd numbers in square brackets are the TOPS-10 way of specifying
    directories. Good thing DOS didn’t adopt that one. Also note that DOS replicates
    the non-obvious behavior where ‘DIR PROG’ is the equivalent of ‘DIR PROG.*’ and
    will list files with any extension. That’s very unlikely to be a coincidence.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，方括号中的奇数是指定目录的TOPS-10方式。幸好DOS没有采纳这种方式。还要注意，DOS复制了不明显的行为，其中‘DIR PROG’等同于‘DIR
    PROG.*’，将列出带有任何扩展名的文件。这很不可能是巧合。
- en: The list of TOPS-10 standard file extensions (appendix D in the manual) brings
    a lot of DOS memories. The .EXE extension for executables is just the first; there
    is .OBJ for object files, .SYM for symbol files, .CRF for cross-reference files,
    .SYS for system files, .BAS for BASIC source files, or .TXT for ASCII text files.
    Again, these file extensions are very much like DOS and not at all like UNIX.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: TOPS-10标准文件扩展名列表（手册附录D）让人想起了很多DOS的记忆。可执行文件的扩展名为.EXE仅是其中之一；还有用于目标文件的.OBJ，用于符号文件的.SYM，用于交叉引用文件的.CRF，用于系统文件的.SYS，用于BASIC源文件的.BAS，或用于ASCII文本文件的.TXT。这些文件扩展名非常类似DOS，与UNIX则完全不同。
- en: The [TOPS-10 macro assembler](http://bitsavers.org/pdf/dec/pdp10/TOPS10_softwareNotebooks/vol13/AA-C780C-TB_Macro_Assembler_Reference_Manual_Apr78.pdf)
    also used the IRP macro construct which is known from MASM, but not used by other
    assemblers (notably Intel’s ASM86 has quite different macro syntax). It is extremely
    likely Microsoft found the inspiration for MASM in DEC’s assembler.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[TOPS-10 宏汇编器](http://bitsavers.org/pdf/dec/pdp10/TOPS10_softwareNotebooks/vol13/AA-C780C-TB_Macro_Assembler_Reference_Manual_Apr78.pdf)
    也使用了从 MASM 知名的 IRP 宏构造，但其他汇编器（特别是 Intel 的 ASM86 使用完全不同的宏语法）则不使用。微软极有可能是在 DEC 的汇编器中找到了
    MASM 的灵感。'
- en: Case Closed?
  id: totrans-split-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 案件结案？
- en: Only Microsoft old-timers could probably answer these questions, with the huge
    caveat that human memories tend to be less than reliable after 40 years. However,
    there is historical evidence that Microsoft used TOPS-10, very strong circumstantial
    evidence that several aspects of DOS were influenced by TOPS-10 (including the
    use of a forward slash as a option separator), and a clear statement in the *MS-DOS
    Encyclopedia* saying that the forward slash usage came from DEC operating systems,
    including mentions of TOPS-10.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 只有微软的老员工可能能回答这些问题，但必须说明，40 年后人类的记忆力往往不可靠。然而，有历史证据表明微软使用了 TOPS-10，有强烈的间接证据表明
    DOS 的几个方面受到了 TOPS-10 的影响（包括使用前斜杠作为选项分隔符），并且《MS-DOS 百科全书》明确表示斜杠的使用来自 DEC 的操作系统，包括对
    TOPS-10 的提及。
- en: It is probably fair to say that Windows today uses backslash as a path separator
    because 50 years ago, TOPS-10 used forward slash as an option separator.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，今天的 Windows 使用反斜杠作为路径分隔符，是因为 50 年前的 TOPS-10 使用了前斜杠作为选项分隔符。
- en: '**Update:** After posting this article, I realized that although it gives a
    good explanation of why DOS did not use the forward slash as path separator, it
    is vague on why backslash was used instead. The answer is the [IBM Model F keyboard](https://en.wikipedia.org/wiki/Model_F_keyboard#/media/File:IBM_Model_F_XT.png).
    The visual similarity of the forward slash and backslash likely played some role,
    but the deciding factor was ergonomics.'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新：** 在发布这篇文章后，我意识到虽然它很好地解释了为什么 DOS 没有使用斜杠作为路径分隔符，但对为什么改用反斜杠却模糊不清。答案在于 [IBM
    Model F 键盘](https://en.wikipedia.org/wiki/Model_F_keyboard#/media/File:IBM_Model_F_XT.png)。前斜杠和反斜杠的视觉相似性可能起到了一定作用，但决定性因素是人体工程学。'
- en: The path separator needed to be a key that does not require Shift to type and
    that did not already have established use (such as the dot, comma, or semicolon
    keys, many of which were used by Microsoft language tools). The backtick (`) may
    have been the only other key available, and given the choice a backslash makes
    a lot more sense.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 路径分隔符需要一个不需要按 Shift 键输入且没有已建立使用的按键（例如句点、逗号或分号键，这些键多数被微软语言工具使用）。反引号（`）可能是唯一可用的其他键，考虑到选择，反斜杠更合理。
- en: The ergonomics of non-US keyboards were naturally not considered, which caused
    the path separator to be ridiculously difficult to type on some national keyboards
    (e.g. German), perhaps as a perverse reminder that ergonomics do matter.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 非美国键盘的人体工程学自然没有考虑到，这导致了路径分隔符在某些国家的键盘上（例如德国）极为难以输入，或许这是对人体工程学重要性的一种反讽提醒。
