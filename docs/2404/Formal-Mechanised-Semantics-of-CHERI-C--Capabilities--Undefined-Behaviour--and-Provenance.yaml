- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:17:56'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:17:56'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Formal Mechanised Semantics of CHERI C: Capabilities, Undefined Behaviour,
    and Provenance | Proceedings of the 29th ACM International Conference on Architectural
    Support for Programming Languages and Operating Systems, Volume 1'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CHERI C的形式化机械化语义：能力、未定义行为和来源 | 第29届ACM国际架构支持程序设计语言和操作系统会议论文集，第1卷
- en: 来源：[https://dl.acm.org/doi/10.1145/3617232.3624859?ai=&ui=&af=](https://dl.acm.org/doi/10.1145/3617232.3624859?ai=&ui=&af=)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://dl.acm.org/doi/10.1145/3617232.3624859?ai=&ui=&af=](https://dl.acm.org/doi/10.1145/3617232.3624859?ai=&ui=&af=)
- en: ABSTRACT
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: Memory safety issues are a persistent source of security vulnerabilities, with
    conventional architectures and the C codebase chronically prone to exploitable
    errors. The CHERI research project has shown how one can provide radically improved
    security for that existing codebase with minimal modification, using unforgeable
    hardware capabilities in place of machine-word pointers in CHERI dialects of C,
    implemented as adaptions of Clang/LLVM and GCC. CHERI was first prototyped as
    extensions of MIPS and RISC-V; it is currently being evaluated by Arm and others
    with the Arm Morello experimental architecture, processor, and platform, to explore
    its potential for mass-market adoption, and by Microsoft in their CHERIoT design
    for embedded cores.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 内存安全问题是安全漏洞的持久来源，传统架构和C代码库常常容易受到可利用的错误的影响。CHERI研究项目展示了如何在最小修改的情况下为现有代码库提供显著改进的安全性，使用CHERI
    C的硬件不可伪造能力代替机器字指针，作为Clang/LLVM和GCC的CHERI C方言的适应实现。CHERI首先作为MIPS和RISC-V的扩展进行了原型设计；目前Arm及其它公司正在使用Arm
    Morello实验架构、处理器和平台评估其在大众市场中采用的潜力，并且Microsoft在其嵌入式核心的CHERIoT设计中进行评估。
- en: 'There is thus considerable practical experience with CHERI C implementation
    and use, but exactly what CHERI C''s semantics is (or should be) remains an open
    question. In this paper, we present the first attempt to rigorously and comprehensively
    define CHERI C semantics, discuss key semantics design questions relating to capabilities,
    provenance, and undefined behaviour, and clarify them with semantics in multiple
    complementary forms: in prose, as an executable semantics adapting the Cerberus
    C semantics, and mechanised in Coq.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有关CHERI C实现和使用的实际经验非常丰富，但CHERI C的语义究竟是什么（或应该是什么）仍然是一个未解决的问题。在本文中，我们首次尝试严格和全面地定义CHERI
    C的语义，讨论与能力、来源和未定义行为相关的关键语义设计问题，并通过多种互补形式的语义加以澄清：散文形式、作为适应Cerberus C语义的可执行语义，以及在Coq中机械化的语义。
- en: This establishes a solid foundation for CHERI C, for those porting code to it,
    for compiler implementers, and for future semantics and verification.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这为CHERI C奠定了坚实的基础，适用于那些将代码移植到其中的人员、编译器实现者以及未来的语义和验证工作。
