- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:13:11'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:13:11
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Do you *really* need to store all that telemetry?
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你*真的*需要存储所有这些遥测数据吗？
- en: 来源：[https://mattklein123.dev/2024/04/10/do-you-need-to-store-that-telemetry/](https://mattklein123.dev/2024/04/10/do-you-need-to-store-that-telemetry/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mattklein123.dev/2024/04/10/do-you-need-to-store-that-telemetry/](https://mattklein123.dev/2024/04/10/do-you-need-to-store-that-telemetry/)
- en: 'In my [last post](https://mattklein123.dev/2024/04/03/observability-cost-crisis/)
    I talked about why modern observability has become so expensive. At the end of
    the post I posit a question: *What if by default we never send any telemetry at
    all?*'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的[上一篇文章](https://mattklein123.dev/2024/04/03/observability-cost-crisis/)中，我讨论了现代可观察性为何变得如此昂贵。在文章末尾，我提出了一个问题：*默认情况下，如果我们根本不发送任何遥测会怎样？*
- en: In this post I’m going to talk specifically about the perceived need of storing
    all possible telemetry data. Is this a real need? Or is this an idea that has
    been drilled into us for so long that we think there’s no other possible way of
    doing it? If we can break away from the disconcerting idea that all possible telemetry
    is not stored by default, what new paradigms and cost models for observing and
    debugging systems become possible?
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将专门讨论存储所有可能的遥测数据的看法是否存在实际需要？或者这是否是一个被灌输了如此之久以至于我们认为没有其他可能的想法？如果我们能摆脱默认存储所有可能遥测的不安想法，那么新的系统观察和调试的范式和成本模型将变得可能。
- en: Reasons for emitting telemetry
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发射遥测的原因
- en: 'Before diving into the question of whether we really *need* to store telemetry,
    it’s first important to break down the reasons why we *do* store telemetry. Telemetry
    emission can be generally placed into three discrete categories:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨我们是否真的*需要*存储遥测之前，首先要重要地分解为什么我们*会*存储遥测的原因。遥测发射通常可以大致分为三个离散类别：
- en: '**Telemetry used for debugging, monitoring, and general observability**: When
    people mention telemetry in the observability context, this is typically the category
    that they are thinking about. Emitting logs, metrics, and traces to be used for
    alarming on anomalous conditions as well as debugging hard to understand issues.
    The end goal is to prevent downtime, continuously improve performance, and make
    customers happy.'
  id: totrans-split-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**用于调试、监控和一般可观察性的遥测**：当人们在可观察性上下文中提到遥测时，通常是指这个类别。发出日志、度量和跟踪以用于警报异常条件以及调试难以理解的问题。最终目标是防止停机、持续改进性能并使客户满意。'
- en: '**Telemetry required for compliance and auditing**: Security and compliance
    requirements may force us to store specific pieces of information for our applications
    (audit trails, network access logs, etc.). This class of telemetry generally never
    has to be queried live so can be sent to relatively cheap cold storage and queried
    later if absolutely necessary.'
  id: totrans-split-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**用于合规性和审计的遥测**：安全和合规要求可能迫使我们为应用程序存储特定信息（审计跟踪、网络访问日志等）。这类遥测通常不必实时查询，因此可以发送到相对便宜的冷存储，并在绝对必要时稍后查询。'
- en: '**Telemetry required for business intelligence**: Established businesses have
    core metrics that they track for decision making. Telemetry (whether in the form
    of traditional metrics, analytics events, or something else) is emitted by applications
    and tracked in business intelligence dashboards.'
  id: totrans-split-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**用于业务智能的遥测**：成熟的企业跟踪决策核心指标。应用程序发出遥测（无论是传统度量、分析事件还是其他形式），并在业务智能仪表板中进行跟踪。'
- en: 'For the purpose of the remainder of this post I will only consider the first
    category. Telemetry required for compliance, auditing, or business intelligence
    is very important though out of scope due to its required storage and is thus
    exempt from the thought exercise: can we disable everything by default?'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文的其余部分中，我将仅考虑第一类别。虽然符合、审计或业务智能所需的遥测非常重要，但由于其需要的存储而超出了范围，并因此不适用于这样一个思维实验：我们是否可以默认禁用所有内容？
- en: Are there truly unique problems?
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 是否存在真正独特的问题？
- en: 'When presented with the idea of disabling all telemetry by default, the most
    common skeptical response is: “What if I need to debug a problem that just happened?”
    This is a perfectly reasonable response and I admit that the idea of disabling
    all telemetry by default is likely to be deeply disconcerting to some.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当面对默认禁用所有遥测的想法时，最常见的怀疑回应是：“如果我需要调试刚发生的问题怎么办？”这是一个完全合理的回应，我承认默认禁用所有遥测的想法可能会深深令一些人不安。
- en: 'Let’s start by breaking down how telemetry helps with observability of systems:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先分解一下遥测如何帮助系统的可观察性：
- en: '**Metrics** provide a cost effective summarization of application events and
    can be used for understanding the overall shape of system behavior.'
  id: totrans-split-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**指标**提供了对应用事件的成本效益高的总结，并可用于了解系统行为的总体形状。'
- en: '**Logs/events** provide a more detailed trail of exact application behavior
    at higher relative cost to metrics. Logs are great for digging into the details
    of what led up to a specific event.'
  id: totrans-split-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**日志/事件**提供了更详细的应用行为轨迹，相对较高的成本以换取指标。日志非常适合深入挖掘导致特定事件发生的细节。'
- en: '**Traces** provide a parent/child grouping of events and timings either within
    a single process or across multiple processes/distributed nodes. Traces are great
    for understanding exact relationships between system components.'
  id: totrans-split-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**跟踪**提供了事件及其时间在单个进程内或跨多个进程/分布式节点之间的父子分组。跟踪非常适合理解系统组件之间的确切关系。'
- en: In my personal experience as an engineer working on very large scale systems
    for nearly 25 years, I understand the fear of disabling telemetry by default,
    but I also believe that there is *no problem that happens once and never happens
    again*. This is the critical point. If problems are not truly unique and are likely
    to happen again, can’t we *take steps to catch the issue the next time around
    with targeted telemetry specific to that problem*? Said another way, once a problem
    is known, can we instruct the system to collect additional information and provide
    it to us the next time the problem occurs?
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个工程师，在从事大规模系统工作近25年的个人经验中，我理解默认禁用遥测的担忧，但我也相信没有什么问题是**只发生一次且不再发生的**。这是关键点。如果问题并非真正独特，并有可能再次发生，那么我们是否可以**采取措施在下次发生时通过针对该问题的特定遥测来捕捉问题**？换句话说，一旦问题被发现，我们能否指示系统收集额外信息，并在下次问题发生时向我们提供？
- en: 'One might then naturally ask, “if I disable all telemetry by default how would
    I know about problems in the first place?” While the terms APM, monitoring, observability,
    etc. have become muddled due to vendor marketing, it is important to differentiate
    the act of “monitoring” a system from the act of debugging. The ideas presented
    in this post do not aim to change the methods of “monitoring” for problems: we
    are notified of problems via customer complaints, alert conditions on metrics
    or event counts (that are sent all the time so that we can run alert queries),
    in newer systems possibly anomaly detection, and so on. A different way of thinking
    about “off by default” is that all signals become opt-in vs. opt-out. I.e., the
    data needed to run an alert query would be opted-in by default. This post is talking
    about what happens *after* we are notified of a problem.'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 那么自然会问，“如果我默认禁用所有遥测，我如何首先了解到问题？” 虽然APM、监控、可观察性等术语因供应商营销而变得模糊不清，但区分“监控”系统与“调试”系统至关重要。本文所述的观点并不旨在改变“监控”问题的方法：我们通过客户投诉、指标警报条件或事件计数（这些信息始终发送以便我们运行警报查询），以及在较新的系统中可能的异常检测等方式被通知问题。关于“默认禁用”的不同思考方式是，所有信号都变成了默认选择加入而非默认选择退出。即，默认情况下，运行警报查询所需的数据将选择加入。本文讨论的是在我们被通知问题之后的情况。
- en: I admit that the scale of the systems that I have worked on have strongly shaped
    my views on this topic. Between working on high performance computing in AWS EC2,
    to building Twitter’s edge proxy, to creating [Envoy](https://www.envoyproxy.io/)
    at Lyft, the order of magnitude of requests per second across the entire system
    and on each node has always meant that capturing detailed logging by default was
    never practical purely from an overhead perspective. (By default, Envoy logs at
    Info level and at that level emits nearly no logs after startup, a pattern I have
    come to use on all systems that I build, for better or worse.)
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我承认我所工作的系统规模在很大程度上塑造了我对这个话题的看法。从在AWS EC2上进行高性能计算，到构建Twitter的边缘代理，再到在Lyft创建[Envoy](https://www.envoyproxy.io/)，整个系统和每个节点每秒请求数量的数量级总是意味着纯粹从资源消耗的角度来看，默认情况下捕获详细日志是不切实际的。（默认情况下，Envoy在Info级别记录日志，在此级别之后几乎在启动后不再记录日志，这是我在构建的所有系统上都使用的模式，无论是好是坏。）
- en: 'Instead, I have relied on metrics for large scale debugging and monitoring
    of these systems. While this has been a successful approach overall (Envoy after
    all is run by thousands of organizations and is considered a highly reliable piece
    of software), it’s not without issues. Taking Envoy as specific example (even
    though the same idea applies to other systems I have worked on):'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我依赖度量标准来进行大规模的调试和监控这些系统。尽管总体上这种方法很成功（毕竟Envoy由成千上万的组织运行，并被认为是高度可靠的软件），但也不是没有问题。以Envoy为具体例子（尽管同样的想法适用于我曾经工作过的其他系统）：
- en: Envoy emits so many metrics that the cost of the metrics themselves becomes
    prohibitive for many organizations, to the point that many operators [statically
    disable a portion of Envoy metrics by default](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/metrics/v3/stats.proto#envoy-v3-api-msg-config-metrics-v3-statsmatcher).
    (As an aside this disabling mechanism has exposed [many bugs](https://github.com/envoyproxy/envoy/issues/8771)
    over the years because the metrics themselves have been erroneously used for control
    logic – but that is an interesting story for a different day!)
  id: totrans-split-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Envoy产生了如此多的度量标准，以至于度量标准本身的成本对许多组织来说是禁锢性的，以至于许多操作员默认情况下[静态禁用了Envoy的部分度量标准](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/metrics/v3/stats.proto#envoy-v3-api-msg-config-metrics-v3-statsmatcher)。（顺便说一句，多年来，这种禁用机制暴露了[许多错误](https://github.com/envoyproxy/envoy/issues/8771)，因为度量标准本身被错误地用于控制逻辑
    - 但这是另一个有趣的故事！）
- en: When problems do crop up that require more intensive debugging, the lack of
    explicit logging at all times can lead to a prolonged debugging process.
  id: totrans-split-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当出现需要更深入调试的问题时，始终没有显式日志记录可能导致漫长的调试过程。
- en: On the topic of the prolonged debugging process, what does that look like using
    traditional telemetry production techniques?
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 关于漫长的调试过程，使用传统的遥测数据生成技术是什么样子？
- en: Attempt a local reproduction. If this is easily possible, using debug and trace
    logs to root cause the issue is usually relatively easy.
  id: totrans-split-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试进行本地复现。如果这很容易实现，使用调试和跟踪日志来找出问题的根本原因通常相对容易。
- en: If that fails (or in parallel), start with code inspection to try to manually
    intuit what might have happened.
  id: totrans-split-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果失败（或同时进行），请从代码检查开始，尝试手动推测可能发生的情况。
- en: If local reproduction and manual intuition fails, we are then left with the
    painful process of manual code changes, possibly across many deployments, to add
    telemetry breadcrumbs to aid in catching the issue *the next time it happens*
    and root causing it.
  id: totrans-split-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果本地复制和手动直觉失败，我们将不得不进行痛苦的手动代码更改过程，可能涉及多个部署，以添加遥测“面包屑”，帮助在*下次发生*时捕捉问题并找出根本原因。
- en: Thankfully (3) above doesn’t happen often, but it does happen, necessitating
    painfully involved debugging experiences.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，上述情况（3）并不经常发生，但确实会发生，这需要令人痛苦的深入调试体验。
- en: Building these types of systems over many years and debugging them has led me
    to think that there must be a more efficient way. And if there is a more efficient
    way for debugging and observing systems like Envoy, can those ideas be applied
    to systems at large in such a way to both improve the debugging and observation
    experience but *also reduce cost along the way*?
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来构建这些类型的系统并调试它们使我认为必须有更高效的方法。如果有更高效的调试和观察系统的方法，是否可以将这些想法应用到整个系统中，以改善调试和观察体验，同时*降低成本*？
- en: How does adding a control plane help?
  id: totrans-split-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加控制平面有什么帮助？
- en: 'For 30 years how telemetry is produced has not changed: we define all of the
    data points that we need ahead of time and ship them out of the origin process,
    typically at large expense. If we [apply the control plane / data plane split](https://konghq.com/learning-center/cloud-connectivity/control-plane-vs-data-plane)
    to observability telemetry production we can fundamentally change the status quo
    for the first time in three decades via getting real-time access to the data we
    need to debug without having to store and pay for all of it:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 30年来，遥测数据的生成方式没有改变：我们预先定义所需的所有数据点，并在起始进程中将它们输出，通常需要大量开支。如果我们将[控制平面 / 数据平面分离](https://konghq.com/learning-center/cloud-connectivity/control-plane-vs-data-plane)应用于可观察性遥测数据的生成，我们可以从根本上改变过去30年来的现状，通过实时访问我们需要调试的数据，而无需存储和支付所有数据的成本：
- en: Enable/disable metrics, logs, and events at the source.
  id: totrans-split-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在源头启用/禁用度量标准、日志和事件。
- en: Filter telemetry at the source.
  id: totrans-split-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在源头过滤遥测数据。
- en: Live stream telemetry at the source to a web portal or CLI without storing it
    anywhere along the way!
  id: totrans-split-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在不存储任何数据的情况下，直接在源头将遥测数据实时传送到Web门户或CLI！
- en: Beyond simply enabling/disabling/filtering at the source, we can add *intelligence*
    to our telemetry production points and do so much more. We can have the control
    plane send instructions on a specific sequence of events to match on (effectively
    a finite state machine sent from control plane to data plane), followed by a set
    of actions to take when that sequence of events occurs. Actions could be to dump
    extra information, take profiles, take screenshots on mobile apps, and so on.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅可以在源头上简单地启用/禁用/过滤，我们还可以在遥测生成点上添加*智能*，并做更多事情。我们可以让控制平面发送指令，匹配特定事件序列（实际上是从控制平面发送到数据平面的有限状态机），然后执行一系列事件发生时要执行的操作。这些操作可以是添加额外信息、进行性能分析、在移动应用程序上截取屏幕截图等等。
- en: Continuing with the Envoy example in the previous section, instead of having
    to painfully make code changes and deploy them over a long period of time, if
    all of the built-in metrics, debug, and trace logs could be controlled dynamically
    with very specific match conditions and actions, think about how much shorter
    the debugging cycle would be. If we assume that problems are never unique and
    will happen again, we can start doing iterative debugging in real-time against
    a fleet of running instances, and likely vastly reduce the time required to root
    cause an issue.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中继续使用Envoy的例子，与其痛苦地进行长时间的代码更改和部署，如果所有内置的度量标准、调试和跟踪日志都可以在非常具体的匹配条件和操作下动态控制，想想调试周期会缩短多少。如果我们假设问题从不是唯一的，并且会再次发生，我们可以开始对一组运行实例进行实时迭代调试，并可能大大缩短根本原因分析所需的时间。
- en: Another way of thinking about it is that *this model makes debug information
    available with immediacy relative to the criticality of the issue as defined by
    the number of occurrences*. Meaning, during an incident the wait time for recurrence
    will be close to zero, while the wait time might be longer for very uncommon things
    that are likely to be considered less critical.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种思考方式是*这种模式使得调试信息可以根据事件发生的频率立即可用*。这意味着，在事件发生时，再次发生的等待时间接近于零；而对于可能不太常见且可能被视为不太关键的事物，等待时间可能会更长。
- en: 'This approach is powerful across multiple dimensions:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法在多个方面都非常强大：
- en: By targeting specific conditions, operators can avoid wading through volumes
    of information that are not relevant to their observation of the system, significantly
    reducing cognitive load.
  id: totrans-split-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过针对特定条件进行定位，操作员可以避免在不相关的信息中浪费大量精力，显著降低认知负荷。
- en: Operators can decide in real-time what is the best observation method. Would
    they like to see actual log lines? Would they like to see synthetic metric aggregates
    of log lines? Would they like to see a subset of explicit metrics?
  id: totrans-split-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作员可以实时决定什么是最佳的观察方法。他们想看到实际的日志行吗？他们想看到日志行的合成度量聚合吗？他们想看到明确指定的一些度量指标的子集吗？
- en: Not surprisingly, because the data needed for investigation is enabled and nothing
    more, the value of the transported and stored data approaches 100%, making the
    ROI of the more limited dataset a great value proposition.
  id: totrans-split-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不足为奇的是，因为调查所需的数据已经启用且不会超出需要，所以传输和存储的数据价值接近100%，使得更有限的数据集的投资回报率成为一个极具价值的提议。
- en: As long as operators are able to accept the idea that problems *will* occur
    again, with the right system they can catch them the next time around!
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 只要操作员能接受问题*将*再次发生的想法，有了正确的系统，他们就能在下次发生时捕捉到它们！
- en: What about local storage?
  id: totrans-split-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地存储是什么情况？
- en: Along with real-time control, we can also add *local storage* of telemetry data
    in an [efficient circular buffer](https://blog.bitdrift.io/post/bitdrift-ring-buffer).
    Typically, local storage is cheap and underutilized, allowing for “free” storage
    of a finite amount of historical data, that wraps automatically. Local storage
    provides the ability to “time travel” when a particular event is hit. How many
    times have we logged an error only to realize that it’s impossible to figure out
    the real source of the error without the preceding debug/trace logs?
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 除了实时控制，我们还可以在[高效环形缓冲区](https://blog.bitdrift.io/post/bitdrift-ring-buffer)中添加遥测数据的*本地存储*。通常情况下，本地存储成本低廉且未被充分利用，允许“免费”存储有限量的历史数据，并自动进行循环包装。本地存储提供了在达到特定事件时“时光旅行”的能力。我们有多少次记录错误，然后才意识到没有前置调试/跟踪日志就无法找出错误真正的源头？
- en: A possibly obvious tradeoff of this system is that the lookback period is bounded,
    with the number of seconds of data available a function of the buffer size and
    the data rate. I still think that the benefits of the circular buffer in terms
    of cost efficiency outweigh the downsides of limited historical retention.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个系统的一个可能明显的权衡是，回看期限是有限的，可用数据秒数是缓冲区大小和数据速率的函数。我仍然认为，循环缓冲区在成本效率方面的好处胜过历史保留的局限性。
- en: When coupled with the matching and actions described in the previous section,
    dumping the local buffer becomes a specific action to take, along with many other
    possible actions.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一节描述的匹配和操作配对时，倾倒本地缓冲区成为一个特定的操作，以及许多其他可能的操作之一。
- en: 'I will note that this is not a new idea: the Apollo spacecraft guidance computer
    had a system to store recently executed instructions in a circular buffer and
    dump them when a problem occurred to ease debugging. Similar debugging tools have
    been implemented for many years in embedded devices and other systems. Circular
    buffers have also been used in modern observability systems as part of [centralized
    trace aggregation systems](https://docs.honeycomb.io/manage-data-volume/sample/honeycomb-refinery/monitor/#collector-metrics).
    The key difference is moving local storage all the way to the edge where it is
    easier to scale and coupling it with a control plane, which unlocks the ability
    to deploy dynamic queries across many targets that can result in history being
    dumped to ease debugging.'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我会指出，这不是一个新想法：阿波罗航天器的引导计算机具有在循环缓冲区中存储最近执行的指令，并在出现问题时倾倒它们以便于调试的系统。类似的调试工具多年来在嵌入式设备和其他系统中实现。在现代可观测性系统中，循环缓冲区也被用作[集中式跟踪聚合系统](https://docs.honeycomb.io/manage-data-volume/sample/honeycomb-refinery/monitor/#collector-metrics)的一部分。关键区别在于将本地存储移动到更易于扩展的边缘，并将其与控制平面耦合，从而解锁可以在许多目标上部署动态查询的能力，这些查询可能会导致历史数据被倾倒以便于调试。
- en: Imagining the combination of local storage and real-time control being used
    to debug Envoy is what started me down this entire path in the first place!
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 想象使用本地存储和实时控制来调试 Envoy 是我追求整个路径的起因！
- en: Putting it all together
  id: totrans-split-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将所有内容综合起来
- en: The paradigms used to emit telemetry have remained unchanged for many years.
    To this end, engineers are very used to sending data, and expecting it to be there
    in case they might need it.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 发送遥测的范式多年来保持不变。因此，工程师们非常习惯发送数据，并期望在需要时可以使用。
- en: Adding a control plane, local storage, and not sending any data by default is
    a *drastic* change to how engineers think about observability. Some engineers
    find these ideas deeply disconcerting, and fear that the data might be needed
    so it should be sent no matter what.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 添加控制平面、本地存储，并默认情况下不发送任何数据，是工程师们思考可观测性的一个**激烈**变化。一些工程师对这些想法深感不安，并担心数据可能会被需要，因此无论如何都应该发送。
- en: 'By starting from a default of no exported telemetry, engineers have the ability
    to “change the game” in multiple ways:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从默认情况下没有导出遥测开始，工程师们有多种方式“改变游戏”：
- en: Because the major cost of telemetry production is what happens to data after
    it leaves the process, not the production within a process, we can free developers
    from thinking about cost at all. Emit as many metrics, logs, events, traces, etc.
    as desired. It’s effectively free!
  id: totrans-split-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为遥测生产的主要成本是数据离开过程后发生的事情，而不是过程内的生产，所以我们可以完全不考虑成本。可以尽可能多地发出度量、日志、事件、跟踪等。它实际上是免费的！
- en: Real-time control via the control plane allows telemetry to be enabled and disabled
    on-demand, whether to temporarily debug an issue, permanently generate (synthetic)
    metrics to populate dashboards and alerts, etc. Ad-hoc investigations can lead
    to dynamic production of telemetry, solely for the purpose of solving the issue
    at hand, before being disabled again.
  id: totrans-split-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过控制平面进行实时控制允许根据需要启用和禁用遥测，无论是临时调试问题，永久生成（合成）度量以填充仪表板和警报等。临时调查可以导致动态生成遥测，仅用于解决手头问题，然后再次禁用。
- en: Critical telemetry needed for auditing and/or monitoring *can* be sent by default
    by request of the operator. Furthermore, the definition of critical telemetry
    can be changed without the need for any code changes or deployments.
  id: totrans-split-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关键的遥测数据，用于审计和/或监控，**可以**在操作员的请求下默认发送。此外，关键遥测的定义可以在无需任何代码更改或部署的情况下进行更改。
- en: 'It’s true that changing how engineers and operators think about telemetry production
    and consumption is a tall order, but in my opinion the benefits of this change
    far outweigh the challenges of relearning fundamental techniques: namely, vastly
    decreased cost and vastly *increased* fidelity for helping to understand and fix
    product issues that are actively problematic.'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 改变工程师和运维人员对遥测数据生成和消费的思维方式确实是一个艰巨的任务，但在我看来，这种改变的好处远远超过了重新学习基本技术的挑战：即，大大降低成本，并且*大幅度提高*了帮助理解和解决当前问题的产品问题的准确性。
- en: I founded [bitdrift](https://bitdrift.io/) last year with the singular purpose
    of moving away from 30 year old telemetry production paradigms and tackling this
    problem head on. Is it indeed possible to not send any telemetry by default and
    still successfully observe large scale production systems?
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我去年创立了[bitdrift](https://bitdrift.io/)，唯一的目的是摆脱30年前的遥测数据生成范式，并直接解决这个问题。是否确实可能在默认情况下不发送任何遥测数据，仍然成功地观察大规模生产系统？
- en: 'Since we [launched Capture](https://blog.bitdrift.io/post/honey-i-shrunk-the-telemetry)
    publicly a few months ago it’s been super interesting to start talking to potential
    customers; the responses we have received vary widely, ranging from those that
    immediately buy into the idea of off by default to those that are inherently skeptical,
    asking the same (completely reasonable!) question posed above: “But what if I
    *really* need to look at some of that data after the fact?”'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 自从我们几个月前[公开推出Capture](https://blog.bitdrift.io/post/honey-i-shrunk-the-telemetry)，开始与潜在客户交流，情况变得非常有趣；我们收到的回应多种多样，有些立即认同默认关闭的想法，有些本质上持怀疑态度，提出了上述完全合理的问题：“但如果我*真的*需要事后查看某些数据怎么办？”
- en: I continue to be extremely excited by the idea of what we can build if we start
    from the position of accepting that bugs *will* happen again, not sending any
    telemetry by default, and proceeding from there.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我对以下的想法仍然感到非常兴奋：如果我们从接受错误*会*再次发生的立场出发，不默认发送任何遥测数据，并从这个角度出发，我们可以构建出什么。
- en: 'So, say it with me: “No, I don’t *really* need to store all of that telemetry!”
    Or, [“Just say no to the logging industrial complex!”](https://twitter.com/mattklein123/status/1775632985192349754)'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，和我一起说：“不，我*真的*不需要存储所有的遥测数据！”或者，[“对记录工业复合体说不！”](https://twitter.com/mattklein123/status/1775632985192349754)
