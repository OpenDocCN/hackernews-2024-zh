- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:04:32'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:04:32'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Chris''s Wiki :: blog/programming/ConfigureNoSourceCodeChanges'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Chris''s Wiki :: blog/programming/ConfigureNoSourceCodeChanges'
- en: 来源：[https://utcc.utoronto.ca/~cks/space/blog/programming/ConfigureNoSourceCodeChanges](https://utcc.utoronto.ca/~cks/space/blog/programming/ConfigureNoSourceCodeChanges)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://utcc.utoronto.ca/~cks/space/blog/programming/ConfigureNoSourceCodeChanges](https://utcc.utoronto.ca/~cks/space/blog/programming/ConfigureNoSourceCodeChanges)
- en: Often, programs have build time configuration settings for features they include,
    paths they use, and so on. Some of the time, people suggest that the way to handle
    these is not through systems like 'configure' scripts (whether produced by [Autoconf](https://www.gnu.org/software/autoconf/manual/)
    or some other means) but instead by having people edit their settings into things
    such as your Makefiles or header files ('source code' in a broad sense). As someone
    who has spent a bunch of time and effort building other people's software over
    the years, my strong opinion is that you should not do this.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，程序在构建时有配置设置，用于包含的功能、使用的路径等。有时，人们建议处理这些设置的方法不是通过像“configure”脚本（无论是由 [Autoconf](https://www.gnu.org/software/autoconf/manual/)
    还是其他方式生成的）这样的系统，而是通过让人们将其设置编辑到像 Makefile 或头文件（在广义上的“源代码”）中的事物中。作为多年来花费大量时间和精力构建他人软件的人，我坚决认为你不应该这样做。
- en: The core problem of this approach is not that you require people to know the
    syntax of Makefiles or config.h or whatever in order to configure your software,
    although that's a problem too. The core problem is **you're having people modify
    files that you will also change**, for example when you release a new version
    of your software that has new options that you want people to be able to change
    or configure. When that happens, you're making every person who upgrades your
    software deal with merging their settings into your changes. And merging changes
    is hard and prone to error, especially if people haven't kept good records of
    what they changed (which they often won't if your configuration instructions are
    'edit these files').
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的核心问题不是你要求人们了解 Makefile 或者 config.h 的语法以配置你的软件，尽管这也是一个问题。核心问题是**你让人们修改你也会改动的文件**，例如当你发布一个新版本的软件，其中包含新的选项，你希望人们能够更改或配置。当这种情况发生时，你使每个升级你的软件的人都需要处理将他们的设置合并到你的更改中。合并更改很困难且容易出错，特别是如果人们没有记录他们所做更改的记录（如果你的配置说明是“编辑这些文件”，通常他们不会）。
- en: One of the painful lessons about maintaining systems that we've learned over
    the years is that you really don't want to have two people changing the same file,
    including the software provider and you. This is the core insight behind extremely
    valuable modern runtime configuration features such as 'drop-in files' (where
    you add or change things by putting your own files into some directory, instead
    of everything trying to update a common file). When you tell people to configure
    your program by editing a header file or a Makefile or indeed any file that you
    provide, you're shoving them back into this painful past. Every new release, every
    update they pull from your VCS, it's all going to be a source of pain for them.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，关于维护系统的痛苦教训之一是，你确实不希望两个人修改同一个文件，包括软件提供者和你自己。这是极其有价值的现代运行时配置特性的核心洞见，例如“插入文件”（通过将您自己的文件放入某个目录来添加或更改内容，而不是一切都试图更新一个共同的文件）。当你告诉人们通过编辑头文件或者
    Makefile，或者你提供的任何文件来配置你的程序时，你将他们推回到这个痛苦的过去。每一个新的发布，每一个他们从你的版本控制系统中拉取的更新，对他们来说都将是一种痛苦的源泉。
- en: A system where people maintain (or can maintain) their build time configurations
    entirely outside of anything you ship is far easier for people to manage. It doesn't
    matter exactly how this is implemented and there are mny options for relatively
    simple systems; you certainly don't need GNU Autoconf or even CMake.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 人们可以在发布之外完全维护（或可以维护）其构建时间配置的系统对于人们来说更容易管理。如何实现这一点并不重要，而且有许多相对简单的系统选项；你当然不需要
    GNU Autoconf，甚至不需要 CMake。
- en: The corollary to this is that if you absolutely insist on having people configure
    your software by editing files you ship, those files should be immutable by you.
    You should ship them in some empty state and promise never to change that, so
    that people building your software can copy their old versions from their old
    build of your software into your new release (or never get a merge conflict when
    they pull from your version control system repository). If your build system can't
    handle even this restriction, then you need to rethink it.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个推论是，如果你坚持让人们通过编辑你提供的文件来配置你的软件，那么这些文件应该对你是不可变的。你应该以空状态提供它们，并承诺永远不会更改，这样构建您软件的人就可以从旧版本的构建中复制它们到新版本的软件中（或者当他们从您的版本控制系统存储库中拉取时永远不会遇到合并冲突）。如果您的构建系统甚至不能处理这个限制，那么您就需要重新考虑。
