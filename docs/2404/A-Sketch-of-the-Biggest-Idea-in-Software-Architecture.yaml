- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:26:12'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:26:12'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: A Sketch of the Biggest Idea in Software Architecture
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件架构中最大的理念草图
- en: 来源：[https://www.oilshell.org/blog/2022/03/backlog-arch.html](https://www.oilshell.org/blog/2022/03/backlog-arch.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.oilshell.org/blog/2022/03/backlog-arch.html](https://www.oilshell.org/blog/2022/03/backlog-arch.html)
- en: '| [blog](/blog/) | [oilshell.org](/)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '| [博客](/blog/) | [oilshell.org](/)'
- en: A Sketch of the Biggest Idea in Software Architecture
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件架构中最大的理念草图
- en: 2022-03-12 (Last updated 2022-05-25)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2022-03-12 (最后更新 2022-05-25)
- en: 'This post was called *Backlog: Software Architecture* until I edited it and
    saw a coherent theme emerge.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章最初被称为*积压：软件架构*，直到我编辑它并看到一个连贯的主题出现。
- en: 'It elaborates on [narrow waists](/cross-ref.html?tag=narrow-waist#narrow-waist):
    an idea in #[software-architecture](/blog/tags.html?tag=software-architecture#software-architecture)
    that relates to networking, operating systems, language design, compilers, and
    distributed systems.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 它详细阐述了[窄腰](/cross-ref.html?tag=narrow-waist#narrow-waist)：一个与网络、操作系统、语言设计、编译器和分布式系统相关的#[软件架构](/blog/tags.html?tag=software-architecture#software-architecture)的理念。
- en: 'Another title I considered is *An Overview of Software Composition at Runtime*.
    That is, you can contrast these two styles of building software out of parts:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我考虑过的标题是*运行时软件构成概览*。也就是说，你可以对比这两种构建软件部件的风格：
- en: Fine-grained static types, build-time composition, static linking, [APIs](/cross-ref.html?tag=API#API),
    and version numbers
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 细粒度静态类型、构建时组合、静态链接、[APIs](/cross-ref.html?tag=API#API)和版本号
- en: Coarse-grained **"waists"**, runtime composition, [ABIs](/cross-ref.html?tag=ABI#ABI),
    [IPC](/cross-ref.html?tag=IPC#IPC), and versionless protocols
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 粗粒度的**"腰"**、运行时组合、[ABIs](/cross-ref.html?tag=ABI#ABI)、[IPC](/cross-ref.html?tag=IPC#IPC)和无版本协议
- en: Many programmers are familiar with the first style. This post is about the **second
    style**, which you see at large scales and long time horizons.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多程序员熟悉第一种风格。本文讨论的是你在大规模和长期视角中看到的**第二种风格**。
- en: This post is **long and dense** with links, so you may want to read it in multiple
    sittings. Let me know what you think [in the comments](https://old.reddit.com/r/oilshell/comments/tcy7ko/a_sketch_of_the_biggest_idea_in_software/?)!
    I especially welcome references to similar material.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章**长而深**，包含了很多链接，所以你可能需要分次阅读。请告诉我你的想法 [在评论中](https://old.reddit.com/r/oilshell/comments/tcy7ko/a_sketch_of_the_biggest_idea_in_software/?)！我特别欢迎类似材料的参考。
- en: Background
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景
- en: 'I''m happy that there was great discussion on the last post, [The Internet
    Was Designed With a Narrow Waist](//www.oilshell.org/blog/2022/02/diagrams.html):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我很高兴上一篇文章有很多讨论，[互联网是设计有窄腰的](//www.oilshell.org/blog/2022/02/diagrams.html)：
- en: I wrote about abstract ideas, but readers understood and applied them. And a
    reader answered my question about the history of the [narrow waist](/cross-ref.html?tag=narrow-waist#narrow-waist),
    which I repeat in the *Call to Action* below.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我写了一些抽象的想法，但读者理解并应用了它们。并且一位读者回答了我关于[narrow waist](/cross-ref.html?tag=narrow-waist#narrow-waist)历史的问题，我在下文的*号召行动*中重复了。
- en: 'On the other hand, there were a few responses that exhibited exactly the misconceptions
    I want to push back on. In particular, the lack of consideration for tradeoffs:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，也有一些回应展示了我想反驳的误解。特别是，对于权衡考虑的缺乏：
- en: '**Local** convenience vs. **global** economy, flexibility, generality, and
    extension'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地**便利 vs. **全球**经济，灵活性，一般性和扩展性'
- en: The **code** perspective vs. the **system** perspective
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码**视角 vs. **系统**视角'
- en: Fine-grained **types** vs. coarse-grained **"waists"**
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精细**类型** vs. 粗粒度**“腰部”**
- en: 'To be convincing about this, I would dive into examples: show code, analyze
    existing designs, and propose new designs. I collected a great deal of material
    on [the wiki](https://github.com/oilshell/oil/wiki/Perlis-Thompson-Principle)
    and in [Zulip](/cross-ref.html?tag=Zulip#Zulip).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要说服这一点，我将深入例证：展示代码，分析现有设计，并提出新的设计。我在[wiki](https://github.com/oilshell/oil/wiki/Perlis-Thompson-Principle)和[Zulip](/cross-ref.html?tag=Zulip#Zulip)上收集了大量资料。
- en: 'But I probably shouldn''t spend months writing and arguing about #[software-architecture](/blog/tags.html?tag=software-architecture#software-architecture).
    It''s better to **build** something with the principles I''m espousing.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但我可能不应该花几个月时间写作和辩论关于#[software-architecture](/blog/tags.html?tag=software-architecture#software-architecture)。最好根据我提倡的原则**构建**一些东西。
- en: So I'm squeezing many topics into this single post. I state the main points,
    with some justification.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我在这篇文章中压缩了许多主题。我陈述了主要观点，并进行了一些理由说明。
- en: Motivating Design Questions
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激励设计问题
- en: 'To be concrete, here are some questions that these ideas will help us with:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，这些思想将帮助我们解决以下一些问题：
- en: Should shells have **two tiers**?
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: shell 是否应该有**两个层次**？
- en: Both external processes and internal "functions"? Both pipelines of bytes and
    pipelines of structured data?
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部进程和内部“函数”？字节流和结构化数据流的管道？
- en: 'I argue that processes and byte streams should still be "primary" because it
    makes the shell more interoperable and useful. They are both fundamental [narrow
    waists](/cross-ref.html?tag=narrow-waist#narrow-waist). Last January: ["Shells
    Should Shell Out"](//www.oilshell.org/blog/2021/01/philosophy-design.html#shells-should-shell-out).'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我认为进程和字节流仍然应该是“主要”的，因为这使得 shell 更具互操作性和实用性。它们都是基本的[narrow waists](/cross-ref.html?tag=narrow-waist#narrow-waist)。去年一月：["Shells
    Should Shell Out"](//www.oilshell.org/blog/2021/01/philosophy-design.html#shells-should-shell-out)。
- en: Is [JSON](/cross-ref.html?tag=JSON#JSON) the new narrow waist for shell?
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[JSON](/cross-ref.html?tag=JSON#JSON) 是否成为 shell 的新“狭腰”？'
- en: It's **a** narrow waist, but it's not as universal as text or byte streams.
    For example, HTML and CSV are not the same as JSON, and they shouldn't be.
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个**狭窄的**腰部，但并不像文本或字节流那样普遍。例如，HTML和CSV与JSON不同，它们也不应该相同。
- en: How can we design a better distributed OS?
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何设计一个更好的分布式操作系统？
- en: Is [Docker](/cross-ref.html?tag=docker#docker) designed well? How could it be
    improved?
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Docker](/cross-ref.html?tag=docker#docker)设计良好吗？它如何改进？'
- en: I bring up this example because I've seen the claim that "the Unix philosophy
    is obvious" and has been absorbed into standard practice.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我举这个例子是因为我看到有人声称"Unix哲学是显而易见的"并已被纳入标准实践中。
- en: 'This couldn''t be further from the truth: [Docker](/cross-ref.html?tag=Docker#Docker)
    is a recent design, and its style is profoundly anti-Unix. (Oil''s build now uses
    [podman](/cross-ref.html?tag=podman#podman), which is a nice, compatible improvement.)'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这与事实相去甚远：[Docker](/cross-ref.html?tag=Docker#Docker)是一个最近的设计，其风格深受反Unix的影响。（现在Oil的构建使用[podman](/cross-ref.html?tag=podman#podman)，这是一个不错的兼容性改进。）
- en: But despite its design, Docker solved a real problem, and has [notable innovations](https://lobste.rs/s/ftkfnu/secure_containerized_browser#c_r6xgbh).
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但是尽管它的设计，Docker解决了一个真实的问题，并具有[显著的创新](https://lobste.rs/s/ftkfnu/secure_containerized_browser#c_r6xgbh)。
- en: 'So I believe the ideas below are relevant to the biggest forces and developments
    in the industry. I''m glad that Docker is being "refactored away" into something
    more Unix-y on two fronts: into [OCI](/cross-ref.html?tag=OCI#OCI) by Red Hat
    and others, and out of Kubernetes. (Related: [Docker''s Second Death](https://www.tariqislam.com/posts/kubernetes-docker-dep/))'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我相信以下的想法与行业中最重要的力量和发展相关。我很高兴看到Docker正在从两个方面"重构"成更加Unix化的东西：通过Red Hat和其他公司成为[OCI](/cross-ref.html?tag=OCI#OCI)，并且逐渐脱离Kubernetes。（相关：[Docker的第二次死亡](https://www.tariqislam.com/posts/kubernetes-docker-dep/)）
- en: What Is a Narrow Waist?
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是狭窄的腰部？
- en: 'Most readers understood the [last post](//www.oilshell.org/blog/2022/02/diagrams.html):
    I borrowed the [narrow waist](/cross-ref.html?tag=narrow-waist#narrow-waist) term
    from networking and extended it to software.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数读者理解了[上一篇文章](//www.oilshell.org/blog/2022/02/diagrams.html)：我从网络中借用了[narrow
    waist](/cross-ref.html?tag=narrow-waist#narrow-waist)这个术语，并将其扩展到软件中。
- en: 'But it''s become clear to me that not all narrow waists are alike. It''s worth
    distinguishing these categories, and more:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但是对我来说，不是所有的狭窄腰部都是相同的。值得区分这些类别，还有更多：
- en: Small, simple mechanisms like the [Internet Protocol](https://en.wikipedia.org/wiki/Internet_Protocol),
    [UTF-8](/cross-ref.html?tag=utf8#utf8), and [JSON](/cross-ref.html?tag=JSON#JSON).
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像[Internet Protocol](https://en.wikipedia.org/wiki/Internet_Protocol)、[UTF-8](/cross-ref.html?tag=utf8#utf8)和[JSON](/cross-ref.html?tag=JSON#JSON)这样的小而简单的机制。
- en: These waists are "narrow" in a strong sense. It's not a coincidence that Jon
    Postel, Ken Thompson, and Doug Crockford were their "editors" or creators.
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些"狭窄"的腰部在某种意义上非常显著。Jon Postel、Ken Thompson和Doug Crockford成为它们的"编辑"或创作者并非巧合。
- en: Language standards like [POSIX shell](/cross-ref.html?tag=posix-shell-spec#posix-shell-spec),
    JavaScript, and C++.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像[POSIX shell](/cross-ref.html?tag=posix-shell-spec#posix-shell-spec)、JavaScript和C++这样的语言标准。
- en: These are big and hard to reimplement. I know this first hand from working on
    Oil!
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些都很大且难以重新实现。我通过参与Oil的工作亲身体会到这一点！
- en: These are narrow waists because they solve the interoperability problem of {user
    programs ...} × {language implementations ...}
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些都是窄腰，因为它们解决了{用户程序...} × {语言实现...}的互操作性问题。
- en: '"Accidental" waists like [Win32](https://en.wikipedia.org/wiki/Windows_API)
    and [x86](https://en.wikipedia.org/wiki/X86).'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"偶然"窄腰，比如[Win32](https://en.wikipedia.org/wiki/Windows_API)和[x86](https://en.wikipedia.org/wiki/X86)。'
- en: Their evolution isn't guided by a standards body. They're also big and hard
    to reimplement.
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们的发展不受标准机构指导。它们也很大且难以重新实现。
- en: APIs like [LLVM](https://llvm.org). As the home page says, LLVM isn't a virtual
    machine. It's really a software library that changes with each release, requiring
    consumers to change their code. This makes it different than the other narrow
    waists, which are more about runtime composition.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似于[LLVM](https://llvm.org)的API。正如主页所述，LLVM不是一个虚拟机。它实际上是一个软件库，每次发布都会更改，需要消费者更改其代码。这使得它与其他更多关于运行时组合的窄腰有所不同。
- en: '... ?'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '... ?'
- en: So it's worth being more specific, and the posts below will refine definitions
    and explore related concepts.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，更加具体地描述是值得的，下面的文章将进一步界定定义并探索相关概念。
- en: The clearest objection I see to the narrow waist idea is that a narrow waist
    is simply a **standard**! Standards enable interoperability.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 窄腰思想的最明显反对意见是，窄腰只是一个**标准**！标准能够实现互操作性。
- en: But standards have to come from somewhere. A narrow waist may or may not become
    a standard. Also, LLVM is not a standard, and isn't intended to be one.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 但是标准必须有一个来源。窄腰可能会成为标准，也可能不会。此外，LLVM不是一个标准，也不打算成为标准。
- en: The hourglass metaphor also suggests why the idea is powerful, and what to aim
    for. You want something small that interfaces with many other things.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 小时glass隐喻还建议了为什么这个概念是强大的，以及应该追求什么。你希望有一个小东西与许多其他东西接口。
- en: Precisely Defining "The Unix Philosophy"
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准确定义“Unix哲学”
- en: 'I spent a week drafting a post called *Diagrams of Three Narrow Waists in Unix*.
    The first sentence is:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我花了一周时间起草一篇名为*Unix中的三个窄腰图表*的文章。第一句是：
- en: Have you heard vague claims about "the Unix Philosophy", and are you confused
    or skeptical about it?
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你听过关于“Unix哲学”的模糊说法吗？对此你感到困惑或怀疑吗？
- en: This is a valuable post, because surprisingly the [narrow waist](/cross-ref.html?tag=narrow-waist#narrow-waist)
    idea **says something new** and more specific about Unix! I justify this with
    references, including the classic ones [on this Wikipedia page](https://en.wikipedia.org/wiki/Unix_philosophy).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一篇有价值的文章，因为出人意料地，[窄腰](/cross-ref.html?tag=narrow-waist#narrow-waist)的概念**提出了关于Unix的新内容**，而且更加具体！我在这里使用了参考文献，包括经典的文献[在这个维基百科页面上](https://en.wikipedia.org/wiki/Unix_philosophy)。
- en: 'I have diagrams of these 3 narrow waists:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我有这3个窄腰的图表：
- en: '**Processes**'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**进程**'
- en: '{native code, shebang script, shell function, ...} × { start, kill, pipe, redirect,
    run with privileges, ... }'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{本地代码，shebang脚本，shell函数，...} × {启动，终止，管道，重定向，以特权运行，...}'
- en: '**File Descriptors**'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**文件描述符**'
- en: '{file, pipe, terminal, socket, ... } × {read, write, ioctl, ... }'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{文件，管道，终端，套接字，... } × {读，写，ioctl，... }'
- en: Tree-Shaped **Namespaces** of unstructured data (file systems)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 树形结构的**命名空间**（未结构化数据的文件系统）
- en: '{disk, SSD, memory with tmpfs, file with loopback, ... } × { ls, mount, version
    with git, serve over HTTP, ... }'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{磁盘，SSD，内存中的 tmpfs，通过回环文件的文件，... } × {ls，mount，使用 git 的版本，通过 HTTP 服务，... }'
- en: The diagrams show that Unix uses multiple narrow waists to achieve dynamic and
    extensible **polymorphism**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图表显示 Unix 使用多个狭窄的腰部来实现动态和可扩展的**多态性**。
- en: 'The file descriptor case shows both sides of the tradeoff. You don''t statically
    know what syscalls are valid on a descriptor. You also don''t know what errors
    you''ll get! I re-learned this lesson with:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 文件描述符的案例展示了权衡的双方。你不知道静态地可以在描述符上使用哪些系统调用。你也不知道会得到哪些错误！我通过以下内容重新学习了这个教训：
- en: '[A bug in Oil 0.9.6](//www.oilshell.org/blog/2022/01/notes-themes.html#oil-096-on-december-30th):
    `write()` can fail with `EISDIR` if the descriptor returned by `open()` points
    to a directory.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Oil 0.9.6 中的一个 bug](//www.oilshell.org/blog/2022/01/notes-themes.html#oil-096-on-december-30th)：`write()`
    在 `open()` 返回的描述符指向目录时可能失败，返回 `EISDIR`。'
- en: '[Bugs in Hello World](https://blog.sunfishcode.online/bugs-in-hello-world/):
    `write()` can fail with `ENOSPC` if the descriptor points to a disk file. Python
    2 has the bug but Python 3 fixed it.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Hello World 中的 Bugs](https://blog.sunfishcode.online/bugs-in-hello-world/)：`write()`
    在描述符指向磁盘文件时可能失败，返回 `ENOSPC`。Python 2 存在此问题，但 Python 3 已修复。'
- en: Nevertheless, the polymorphic design of file descriptors makes Unix compose,
    and is one reason why shell is powerful! I give examples in the post.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管文件描述符的多态设计使 Unix 能够组合，这也是 shell 强大的原因之一！我在文章中举了例子。
- en: 'Go addresses this problem with single function interfaces like `Reader` and
    `Writer`, and more generally the `-er` pattern. Here''s an interesting quote:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Go 通过像 `Reader` 和 `Writer` 这样的单函数接口来解决这个问题，并且更一般地使用 `-er` 模式。这里有一个有趣的引用：
- en: It would be nice if Haskell had [open polymorphism], possibly using Go as a
    model.
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 Haskell 能够拥有[开放多态性]，可能以 Go 为模型。
- en: ''
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '— [Philip Wadler: Featherweight Go](https://youtu.be/Dq0WFigax_c?t=912)'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '— [Philip Wadler: 轻量级 Go](https://youtu.be/Dq0WFigax_c?t=912)'
- en: 'More:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 更多：
- en: I mention the relationship to Plan 9 (fixing the composition bugs in Unix) and
    REST (the [uniform interface constraint](https://en.wikipedia.org/wiki/Representational_state_transfer#Architectural_constraints)).
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我提到与 Plan 9 的关系（修复 Unix 中的组合 bug）和 REST（[统一接口约束](https://en.wikipedia.org/wiki/Representational_state_transfer#Architectural_constraints)）。
- en: I link to two important academic papers, and related analysis of Unix.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我链接了两篇重要的学术论文以及 Unix 相关的分析。
- en: I also noticed that **Lines of Text** is distinct narrow waist from **Text**,
    which the [last post](//www.oilshell.org/blog/2022/02/diagrams.html) depicted.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我还注意到**文本行**与**文本**之间是一个明显的狭窄腰部，这在[最后一篇文章](//www.oilshell.org/blog/2022/02/diagrams.html)中有所描绘。
- en: In fact Oil's [QSN](/cross-ref.html?tag=QSN#QSN) format takes advantage of this
    narrow waist, while the GNU's NUL-delimited format doesn't. (This the format `xargs
    -0` accepts , mentioned in [the xargs post](//www.oilshell.org/blog/2021/08/xargs.html).)
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际上，Oil的[QSN](/cross-ref.html?tag=QSN#QSN)格式利用了这个狭窄腰，而GNU的NUL分隔格式则没有。（这是 `xargs
    -0` 接受的格式，提到在[xargs帖子](//www.oilshell.org/blog/2021/08/xargs.html)中。）
- en: In particular, `wc -l`, `head`, `tail`, and `tail -f` work "for free" with [QSN](/cross-ref.html?tag=QSN#QSN),
    but you need more code like to support the NUL-delimited format, like `head -z`
    and `tail -z`.
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特别是，`wc -l`，`head`，`tail` 和 `tail -f` 与[QSN](/cross-ref.html?tag=QSN#QSN)一起免费工作，但你需要更多像
    `head -z` 和 `tail -z` 这样的代码来支持NUL分隔的格式。
- en: This post isn't done, but it's the one I want to publish the most.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章还没有完成，但这是我最想发布的一篇。
- en: Characteristics of Narrow Waists
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 狭窄腰的特性
- en: In software, the most important characteristic of a [narrow waist](/cross-ref.html?tag=narrow-waist#narrow-waist)
    is that it reduces an [O(M x N) code explosion](/cross-ref.html?tag=m-by-n-explosion#m-by-n-explosion),
    allowing interoperability and code reuse.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件中，[狭窄腰](/cross-ref.html?tag=narrow-waist#narrow-waist)最重要的特征是减少了[O(M x N)代码爆炸](/cross-ref.html?tag=m-by-n-explosion#m-by-n-explosion)，从而实现了互操作性和代码复用。
- en: 'I also realized that there are two distinct senses of the word "narrow":'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我也意识到 "narrow" 这个词有两个明显的意义：
- en: In terms of architectural **connection** (topology).
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就架构**连接**（拓扑）而言。
- en: For example, applications and physical networks are decoupled by the the Internet's
    narrow waist. They don't interface directly with each other.
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，应用程序和物理网络是通过互联网的狭窄腰部解耦的。它们不直接与彼此接口。
- en: In terms of the **size** of the concept.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就概念的**大小**而言。
- en: IP is a small concept, and Unix is a small handful of concepts.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP是一个小概念，Unix是少数几个概念。
- en: But the web is a large set of concepts (HTTP, HTML, SVG, etc.). C++ and shell
    are also large.
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但Web是一个庞大的概念集（HTTP，HTML，SVG等）。C++和Shell也是庞大的。
- en: So this issue deserves some more thought, and perhaps more terminology.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此这个问题值得更多的思考，也许需要更多的术语。
- en: 'Here are more ways to characterize narrow waists:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是更多描述狭窄腰部的方式：
- en: They are **compromises**. They make systems economical and possible, not necessarily
    optimal.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们是**妥协**。它们使系统经济实惠且可能，但不一定是最优的。
- en: If you have a small or specialized network, you can design something more efficient
    than the Internet.
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你有一个小型或专业的网络，你可以设计比互联网更高效的东西。
- en: They arise through a mix of explicit **design** and implicit **evolution**.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们是通过显式的**设计**和隐式的**进化**混合产生的。
- en: Both the Internet and the web were designed and subject to evolution. But I'd
    say the web evolved more.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网和Web都是经过设计并经历了进化。但我会说Web的进化更多一些。
- en: The design can be done **well or poorly**. The evolution can be guided or haphazard.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计可以做得**好也可以做得差**。进化可以是有目的的，也可以是偶然的。
- en: '[JSON](/cross-ref.html?tag=JSON#JSON) was an explicit design, and it''s much
    better than CSV.'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[JSON](/cross-ref.html?tag=JSON#JSON)是一种明确的设计，比CSV好多了。'
- en: We should try to do better at design, because the resulting network effects
    mean we often get "stuck" with bad designs.
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应该在设计上做得更好，因为由此产生的网络效应意味着我们经常“陷入”糟糕的设计中。
- en: 'Regarding evolution:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 关于演化：
- en: Narrow waists can last for decades, usually evolving in a **versionless** manner.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 窄腰可以持续几十年，通常以**无版本**方式演化。
- en: For example, Unix shell is one of the oldest languages in wide use, and there's
    continuous compatibility between [Thompson shell](/cross-ref.html?tag=thompson-shell#thompson-shell),
    [Bourne Shell](/cross-ref.html?tag=bourne-shell#bourne-shell), [Korn shell](/cross-ref.html?tag=ksh#ksh),
    [bash](/cross-ref.html?tag=bash#bash), [OSH](/cross-ref.html?tag=osh-language#osh-language),
    and [Oil](/cross-ref.html?tag=oil-language#oil-language).
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，Unix shell 是广泛使用的最古老的语言之一，而且在[Thompson shell](/cross-ref.html?tag=thompson-shell#thompson-shell)、[Bourne
    Shell](/cross-ref.html?tag=bourne-shell#bourne-shell)、[Korn shell](/cross-ref.html?tag=ksh#ksh)、[bash](/cross-ref.html?tag=bash#bash)、[OSH](/cross-ref.html?tag=osh-language#osh-language)
    和 [Oil](/cross-ref.html?tag=oil-language#oil-language) 之间有持续的兼容性。
- en: A narrow waist has an amount of **inertia** that's proportional to the amount
    of functionality that hinges on it.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窄腰具有与依赖它的功能数量成比例的**惯性**。
- en: But narrow waists can also **move**!
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是窄腰也可以**移动**！
- en: TCP/IP → HTTP
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP/IP → HTTP
- en: POSIX C APIs → Linux x86 ABI
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: POSIX C APIs → Linux x86 ABI
- en: 'They''re subject to extreme **economic pressure** and network effects. For
    example:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们受到极端的**经济压力**和网络效应的影响。例如：
- en: The downside of inertia is that narrow waists can **inhibit innovation**.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 惯性的缺点是窄腰可以**抑制创新**。
- en: Narrow waists are often **overextended** to new applications.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 窄腰通常被**过度扩展**到新的应用中。
- en: The web was arguably overextended from a network of hyperlinked documents to
    an application delivery platform ([single-page apps](https://en.wikipedia.org/wiki/Single-page_application)
    in JavaScript)
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 可能被过度扩展，从超链接文档网络发展为应用交付平台（JavaScript 中的[单页应用](https://en.wikipedia.org/wiki/Single-page_application)）。
- en: It was also extended to a desktop UI framework via [Electron](https://www.electronjs.org/).
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它也通过[Electron](https://www.electronjs.org/)扩展到桌面 UI 框架。
- en: Linux was arguably overextended to embedded devices, especially those with real-time
    requirements.
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 可能被过度扩展到嵌入式设备，特别是那些具有实时要求的设备。
- en: Some recent narrow waists include [Docker](/cross-ref.html?tag=docker#docker)
    / [OCI](/cross-ref.html?tag=OCI#OCI), the [Language Server Protocol](https://en.wikipedia.org/wiki/Language_Server_Protocol),
    and [WebAssembly](https://en.wikipedia.org/wiki/WebAssembly). I should be more
    specific about their varying degrees of success with respect to design and user
    adoption. For example, I think WebAssembly is useful, but [less general than what's
    been recently claimed](https://news.ycombinator.com/item?id=28581634). It's a
    deep compromise which involves winners and losers.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最近的窄腰包括 [Docker](/cross-ref.html?tag=docker#docker) / [OCI](/cross-ref.html?tag=OCI#OCI)，[语言服务器协议](https://en.wikipedia.org/wiki/Language_Server_Protocol)，和
    [WebAssembly](https://en.wikipedia.org/wiki/WebAssembly)。我应该更具体地讨论它们在设计和用户采纳方面的不同成功程度。例如，我认为
    WebAssembly 是有用的，但[并非最近所宣称的那样通用](https://news.ycombinator.com/item?id=28581634)。这是一个深度的妥协，涉及到赢家和输家。
- en: Fallacies
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 错误观念
- en: Here are some common objections to the idea.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些对这个观点的常见反对意见。
- en: (1) *Textual data is hard to manipulate with programs*.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: (1) *文本数据难以通过程序操作*。
- en: This is **not** an objection to the narrow waist principle! The main claims
    of the principle are about interoperability and economy of implementation.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这**不是**对窄腰原则的反对！该原则的主要论点是关于互操作性和实施经济性。
- en: I want to make a **Simple vs. Easy** argument. Narrow waists are *simple* in
    Rich Hickey's terms (not "complected"), but not necessarily *easy* to use. For
    example, Unix shell can be hard to learn, but its power results in a small, extensible
    operating system.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我想提出一个**简单 vs. 易用**的论点。用 Rich Hickey 的术语，窄腰是*简单*的（不是"复杂的"），但未必易于使用。例如，Unix shell
    可能学习起来很难，但其强大性使得操作系统变得小巧、可扩展。
- en: (2) *The web is really messy, and thus unreliable*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: (2) *网络确实非常混乱，因此不可靠*。
- en: I make a strong **Messy vs. Stable** distinction. Messy systems aren't necessarily
    unreliable. Quite the contrary — the need for stability is the **cause of** the
    mess! Continuous backward compatibility (like the the many iterations of CSS)
    makes a mess, but keeps the system working.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈区分**混乱 vs. 稳定**。混乱的系统未必不可靠。恰恰相反 — 对稳定性的需求才是混乱的**原因**！持续的向后兼容性（例如 CSS 的多次迭代）造成了混乱，但保持系统运行。
- en: 'This relates to another concept I''ve been having a hard time describing: **versionless
    evolution**, which I describe below.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我一直难以描述的另一个概念相关：**无版本演进**，我将在下文中详细描述。
- en: Related Ideas
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关思想
- en: 'We can understand the [narrow waist](/cross-ref.html?tag=narrow-waist#narrow-waist)
    more precisely by relating it to these ideas:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下思想更精确地理解 [窄腰](/cross-ref.html?tag=narrow-waist#narrow-waist)：
- en: '[Metcalfe''s Law](https://en.wikipedia.org/wiki/Metcalfe%27s_law) states that
    the value of a network is proportional to N², where N is the number of nodes.'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[梅特卡夫定律](https://en.wikipedia.org/wiki/Metcalfe%27s_law)表明，一个网络的价值与节点数 N 的平方成正比。'
- en: This is related to, but distinct from, the M × N *architectural* connections
    of a narrow waist. Architectural connections are not network node connections.
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这与窄腰的M × N *架构*连接相关但又不同。架构连接不是网络节点连接。
- en: Thinking about the architectural hierarchy of narrow waists may clarify this.
    For example, CSV, JSON, and HTML are narrow waists at "level 1". And each of them
    **is** literally text, which is at "level 0". Generic operations are "inherited",
    which makes the system smaller. (This idea really needs diagrams.)
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 思考窄腰的架构层次可能会澄清这一点。例如，CSV、JSON 和 HTML 在“级别1”上是窄腰。而每一个都**是**文字，它位于“级别0”。通用操作是“继承”的，这使得系统更小。（这个想法确实需要图示。）
- en: The Internet Protocol follows the [End-to-End Principle](https://en.wikipedia.org/wiki/End-to-end_principle)
    **and** it's a [narrow waist](/cross-ref.html?tag=narrow-waist#narrow-waist).
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 互联网协议遵循[端到端原则](https://en.wikipedia.org/wiki/End-to-end_principle)**，**它是[窄腰](/cross-ref.html?tag=narrow-waist#narrow-waist)。
- en: This doesn't mean the two principles are the same. I view the narrow waist as
    more descriptive and predictive when applied to software.
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这并不意味着这两个原则是相同的。我认为在软件应用中，窄腰更具描述性和预测性。
- en: Examples and Elaboration
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例和详细说明
- en: Let's apply these principles to real world systems. Again, I claim the [narrow
    waist](/cross-ref.html?tag=narrow-waist#narrow-waist) is the **most important**
    idea in software architecture, because it describes the biggest and longest-lived
    systems.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些原则应用于现实世界的系统中。再次强调，[窄腰](/cross-ref.html?tag=narrow-waist#narrow-waist)是软件架构中**最重要**的思想，因为它描述了最大和最长寿命的系统。
- en: The Web Evolved In A Versionless Manner
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Web以无版本方式发展
- en: 'I''d like to elaborate on the "versionless" property of many narrow waists.
    You can contrast two philosophies of versioning:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我想详细说明许多窄腰的“无版本”属性。您可以对比两种版本控制的哲学：
- en: Version numbers that indicate breaking changes, e.g. [Semantic Versioning](https://semver.org/).
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指示破坏性更改的版本号，例如[语义化版本](https://semver.org/)。
- en: Linux distros and package managers [like NPM](https://docs.npmjs.com/about-semantic-versioning)
    like often pair semantic versioning with ad hoc constraint solvers to find a set
    of compatible versions for dependencies. This model can be **brittle** because
    you may end up running a set of versions that's never been tested together.
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux发行版和包管理器[如NPM](https://docs.npmjs.com/about-semantic-versioning)通常将语义化版本与临时约束求解器配对，以找到依赖项的兼容版本集。这种模型可能**脆弱**，因为您可能最终运行的一组版本从未经过测试。
- en: Continuous backward compatibility, i.e. **versionless** evolution.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续向后兼容，即**无版本**演化。
- en: There are also version numbers here, but they indicate feature additions rather
    than breaking changes.
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里还有版本号，但它们表示的是功能添加，而不是破坏性更改。
- en: For example, the web doesn't have incompatible versions, and [JSON](/cross-ref.html?tag=JSON#JSON)
    was explicitly designed by Doug Crockford to be versionless.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Web没有不兼容的版本，并且[JSON](/cross-ref.html?tag=JSON#JSON)是由道格·克罗克福特明确设计为无版本。
- en: History proves this rule. In [Don't Break X](//www.oilshell.org/blog/2021/12/backlog-project.html#three-analogies-dont-break-x),
    I mentioned that XHTML and ECMAScript 4 both tried to **break the web** with radical
    changes, but they failed because of the inertia of narrow waists.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 历史证明了这一规则。在[不要破坏X](//www.oilshell.org/blog/2021/12/backlog-project.html#three-analogies-dont-break-x)中，我提到XHTML和ECMAScript
    4都试图通过激进的变化**破坏Web**，但由于狭窄腰带的惯性而失败。
- en: In contrast, HTML5 and ECMAScript 5 evolved the web in a compatible way. We
    should study and disseminate the history of the web avoid repeating mistakes we
    get "stuck with".
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，HTML5和ECMAScript 5以一种兼容的方式推动了Web的进化。我们应该学习和传播Web的历史，以避免重蹈覆辙。
- en: '* * *'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Here''s a good way of thinking about versionless evolution:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于无版本演化的一个好方法：
- en: Relaxing a requirement should be a compatible change. Strengthening a promise
    should be a compatible change.
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 放宽要求应该是一种兼容的变化。加强承诺也应该是一种兼容的变化。
- en: ''
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — Rich Hickey in [Maybe Not](https://www.youtube.com/watch?v=YR5WdGrpoug) (2018,
    YouTube)
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —— Rich Hickey在[Maybe Not](https://www.youtube.com/watch?v=YR5WdGrpoug)（2018年，YouTube）
- en: 'Examples:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: HTML5 defined `<hr>` and `<hr />` to mean the same thing, whereas previous versions
    of HTML were stricter. (This is the [self-closing tag issue](http://xahlee.info/js/html5_non-closing_tag.html).)
    So HTML5 **relaxes a requirement** on web page authors, which is a compatible
    change.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5定义了`<hr>`和`<hr />`表示同样的意思，而以前的HTML版本则更为严格。（这是关于[自闭合标签的问题](http://xahlee.info/js/html5_non-closing_tag.html)。）因此，HTML5**放宽了对**网页作者的要求，这是一种兼容性的变化。
- en: Adding a new feature **strengthens the promise** that the browser makes to the
    web page author. For example, HTML5 added a `<video>` tag, which is a compatible
    change.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新功能**增强了**浏览器对网页作者的承诺。例如，HTML5添加了`<video>`标签，这是一种兼容性的变化。
- en: Bytes and Text Are Essential Narrow Waists
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字节和文本是必不可少的狭窄腰带。
- en: 'I have a recurring debate about "text vs. fine-grained types", mostly with
    people who are frustrated with ad hoc, incorrect #[parsing](/blog/tags.html?tag=parsing#parsing)
    in shell.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常与那些对shell中的临时、不正确的#[解析](/blog/tags.html?tag=parsing#parsing)感到沮丧的人们就“文本与细粒度类型”进行反复讨论。
- en: I think that a shell with support for [JSON](/cross-ref.html?tag=JSON#JSON),
    [QSN](/cross-ref.html?tag=QSN#QSN), [QTT](/cross-ref.html?tag=QTT#QTT) and HTML
    will address this problem. It will reduce the amount of parsing in shell programs,
    and make it correct.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为，支持[JSON](/cross-ref.html?tag=JSON#JSON)、[QSN](/cross-ref.html?tag=QSN#QSN)和HTML的shell将解决这个问题。它将减少shell程序中的解析量，并使其更加正确。
- en: I also claim that parsing is an O(M + N) problem, while types can create O(M
    × N) problems — and often do.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我还声称解析是一个O(M + N)问题，而类型可能会创建O(M × N)问题 —— 事实上也确实如此。
- en: 'To give more color on that, here''s an important comment which I mentioned
    in [January](//www.oilshell.org/blog/2021/01/audio-and-graphics.html), [June](//www.oilshell.org/blog/2021/06/hotos-shell-panel.html#conclusion),
    [July](//www.oilshell.org/blog/2021/07/blog-backlog-1.html#concepts), and [August](//www.oilshell.org/blog/2021/08/history-trivia.html#the-first-paper-about-unix-shell-thompson):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更加具体，这里是一个重要的评论，我在 [一月](//www.oilshell.org/blog/2021/01/audio-and-graphics.html)，[六月](//www.oilshell.org/blog/2021/06/hotos-shell-panel.html#conclusion)，[七月](//www.oilshell.org/blog/2021/07/blog-backlog-1.html#concepts)，和
    [八月](//www.oilshell.org/blog/2021/08/history-trivia.html#the-first-paper-about-unix-shell-thompson)
    中提到过。
- en: 'I make the M × N argument, and use concrete examples like IntelliJ and WebAssembly''s
    text format:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我提出了 M × N 的论点，并且使用了像 IntelliJ 和 WebAssembly 的文本格式这样的具体例子：
- en: You have M formats and N operations, and writing M × N tools is infeasible,
    even for the entire population of programmers in the world.
  id: totrans-153
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你有 M 种格式和 N 种操作，为全球程序员编写 M × N 工具是不可行的。
- en: 'I also note the tradeoff:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我还注意到这种权衡：
- en: It's not an absolute; in reality people do try to fill out every cell in the
    M × N grid [in certain domains]. They get partway there, and there are some advantages
    to that for sure.
  id: totrans-155
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这不是绝对的；事实上，人们确实试图填写 M × N 网格中的每个单元格 [在某些领域]。他们在某种程度上完成了，这确实有一些优势。
- en: I also quote Rust designer Graydon Hoare on text. While his "rant" is mostly
    about the information density of text, it also touches on the wide range of operations
    that text supports.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我还引述了 Rust 设计师 Graydon Hoare 在文本方面的看法。尽管他的“抱怨”主要是关于文本的信息密度，但也涉及到文本支持的广泛操作范围。
- en: '[Text] can be compared, diffed, clustered, corrected, summarized and filtered
    algorithmically. It permits multiparty editing. It permits branching conversations,
    lurking, annotation, quoting, reviewing, summarizing, structured responses, exegesis,
    even fan fic. The breadth, scale and depth of ways people use text is unmatched
    by anything.'
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[文本] 可以通过算法进行比较、差异化、聚类、校正、总结和过滤。它允许多方编辑。它允许分支对话、潜伏、注释、引用、审查、总结、结构化响应、注释解释，甚至是粉丝的剧情虚构。人们使用文本的广度、规模和深度是任何其他东西都无法比拟的。'
- en: I note a problematic M × N explosion in code **generated** by protocol buffers
    (as opposed to source code).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我注意到由协议缓冲区生成的代码存在问题的 M × N 爆炸（与源代码相对）。
- en: For example, equality becomes **schema-dependent** rather than generic. This
    is worth it in many systems, but it's a tradeoff.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，相等性变得**依赖于架构**，而不是通用的。在许多系统中，这是值得的，但这是一个权衡。
- en: 'Slogan: Text Is The Only Thing You Can Agree On'
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标语：文本是唯一能够达成一致的事物。
- en: Here are two variations of a slogan. It's meant to drive home the point of text
    as a narrow waist.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两种标语的变体。它旨在强调文本作为一个狭窄的腰部的观点。
- en: The lowest common denominator between a [PowerShell](https://en.wikipedia.org/wiki/PowerShell),
    [Elvish](https://elv.sh/), [Rash](https://docs.racket-lang.org/rash/), and [nushell](https://www.nushell.sh/)
    script is a Bourne shell script (and eventually an Oil script).
  id: totrans-162
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个 [PowerShell](https://en.wikipedia.org/wiki/PowerShell)、[Elvish](https://elv.sh/)、[Rash](https://docs.racket-lang.org/rash/)
    和 [nushell](https://www.nushell.sh/) 脚本的最低公分母是 Bourne shell 脚本（最终会变成 Oil 脚本）。
- en: This is because each alternative shell chooses a *different* kind of structured
    data as its narrow waist (.NET objects, tree-structured data, Racket data structures,
    and tables, respectively). **Text** is the most structured format they all agree
    on, and **shell** is the language of coarse-grained composition with text.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 因为每个替代壳都选择一种不同的结构化数据作为其狭窄的腰部（.NET 对象、树形数据、Racket 数据结构和表格）。**文本**是它们都同意的最结构化的格式，并且**shell**是用文本进行粗粒度组合的语言。
- en: I predict that this will be a real thing, and isn't theoretical! I have no doubt
    that there are already bash scripts invoking PowerShell scripts out there, and
    more complex agglomerations will arise as alternative shells become popular.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我预测这将成为一个真实的事情，而不是理论上的！我毫不怀疑，已经有 bash 脚本调用 PowerShell 脚本，并且随着替代性 shell 变得流行，将会出现更复杂的聚合物。
- en: It doesn't mean those shells aren't worth using, or more potentially more convenient.
    But it highlights the need for a better Bourne-style shell.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着那些 shell 不值得使用，或者潜在地更方便。但它强调了需要一个更好的 Bourne 风格的 shell。
- en: and
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: and
- en: 'A second phrasing:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种表达方式：
- en: The lowest common denominator between a [Common Lisp](https://common-lisp.net/),
    [Clojure](https://clojure.org/), and [Racket](https://racket-lang.org/) program
    is a Bourne shell script (and eventually an Oil script).
  id: totrans-168
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个 [Common Lisp](https://common-lisp.net/)、[Clojure](https://clojure.org/) 和
    [Racket](https://racket-lang.org/) 程序的最低公分母是 Bourne shell 脚本（最终会变成 Oil 脚本）。
- en: Again, these languages are similar, but have incompatible data models. (It's
    not just the compound data structures; Clojure's notion of numbers and strings
    is borrowed from the JVM.)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这些语言相似，但数据模型不兼容。（不仅仅是复合数据结构；Clojure 对数字和字符串的概念来自 JVM。）
- en: 'These two slogans are really another way of phrasing a slogan from the [last
    post](//www.oilshell.org/blog/2022/02/diagrams.html):'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个口号实际上是另一种表达方式，与[上一篇文章](//www.oilshell.org/blog/2022/02/diagrams.html)的一句口号相似：
- en: Unix is equally inconvenient for every programmer, and that's a good thing.
  id: totrans-171
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Unix 对每个程序员同样不方便，这是件好事。
- en: CSV, JSON, HTML - Tables, Records, Documents
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSV、JSON、HTML - 表格、记录、文档
- en: 'The full title of this post is:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章的完整标题是：
- en: CSV, JSON, and HTML are Different Because Tables, Records, and Documents Are
    Different
  id: totrans-174
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CSV、JSON 和 HTML 之所以不同，是因为表格、记录和文档不同。
- en: This is again pushing back on the notion that [JSON](/cross-ref.html?tag=JSON#JSON)
    is "the" new narrow waist of shell. Tables and documents are essential structures
    in software, and expressing them in JSON is awkward.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这再次回应了这样一个观点，即[JSON](/cross-ref.html?tag=JSON#JSON)是 shell 的“新”狭窄腰部。表格和文档是软件中的基本结构，在
    JSON 中表达它们很笨拙。
- en: I can give examples of this, e.g.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以举例说明，例如：
- en: '[PRE0]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: and
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '[PRE1]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This framing comes from the paper [Unifying Tables, Objects, and Documents](https://www.microsoft.com/en-us/research/publication/unifying-tables-objects-and-documents/)
    (Meijer and Schulte, 2003), but the technical details differ.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这个框架源自于论文[统一表格、对象和文档](https://www.microsoft.com/en-us/research/publication/unifying-tables-objects-and-documents/)（Meijer
    和 Schulte，2003），但技术细节有所不同。
- en: Tradeoffs Between Dynamic and Static Types (FAQ)
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态类型和静态类型之间的权衡（常见问题解答）
- en: Text as a narrow waist is at odds with fine-grained, static types. My goal is
    to highlight tradeoffs, and analyze situations where each style is natural and
    efficient.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 狭窄的文本与细粒度的静态类型相矛盾。我的目标是突出权衡，并分析每种风格在自然和高效的情况下的应用。
- en: Many programmers seem to think there is no tradeoff — or at least they *say*
    that on the Internet. I believe that when they create working systems they often
    use the dynamic, coarse-grained view!
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 许多程序员似乎认为没有权衡——或者至少他们在互联网上是这么*说*的。我相信当他们创建工作系统时，他们经常使用动态、粗粒度的视角！
- en: '[This recent comment](https://old.reddit.com/r/ProgrammingLanguages/comments/t0lzeq/types_considered_harmful_pdf_2008/hyfhhu2/)
    links to typical responses, which by now form a FAQ:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[这个最近的评论](https://old.reddit.com/r/ProgrammingLanguages/comments/t0lzeq/types_considered_harmful_pdf_2008/hyfhhu2/)链接到典型的回复，现在已经形成了一个常见问题解答：'
- en: 'Here''s a related, fantastic video which I want to signal-boost:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相关的、精彩的视频，我想要进行推广：
- en: I don't know the F# language, but it apparently has a very Clojure-like view
    of data, despite being statically typed. The "type provider" mechanism addresses
    the problem of types that are only available runtime, e.g. in SQL schemas, or
    implicitly in JSON and CSV files.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我不了解 F# 语言，但显然它对数据有一个非常类似 Clojure 的视角，尽管是静态类型的。"类型提供者"机制解决了仅在运行时可用的类型问题，例如在
    SQL 模式中或者隐含在 JSON 和 CSV 文件中。
- en: 'Overall, the fallacy is that we use dynamic typing when we''re "too lazy to
    write down the types". There are many useful programs that aren''t 100% statically
    typed, and I claim this trend is increasing. (Slogan: *Poorly Factored Software
    is Eating the World*.)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，谬误在于我们使用动态类型时是因为“懒得写类型”。有许多有用的程序并非完全静态类型化，我认为这种趋势正在增加。（口号：*糟糕的结构化软件正在吞噬世界*。）
- en: The real issues are **scale** in space and time, heterogeneity, and extensibility!
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的问题在于**规模**在空间和时间上的异质性和可扩展性！
- en: Refinements
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 细化
- en: In the discussion of the extensibility post, I said that I'm getting at *theory
    and guidelines for runtime composition and versionless evolution*. Shell is about
    software composition at runtime, as opposed composition via static linking.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在关于可扩展性的讨论中，我说过我在探索*运行时组合和无版本演进的理论和指南*。Shell 是关于运行时的软件组合，而不是通过静态链接进行组合。
- en: So in addition to the [Perlis-Thompson Principle](/cross-ref.html?tag=perlis-thompson#perlis-thompson),
    [narrow waists](/cross-ref.html?tag=narrow-waist#narrow-waist), and [O(M × N)
    code explosions](/cross-ref.html?tag=m-by-n-explosion#m-by-n-explosion), here
    are some more concepts that are worth exploring.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 因此除了[Perlis-Thompson Principle](/cross-ref.html?tag=perlis-thompson#perlis-thompson)，[窄腰](/cross-ref.html?tag=narrow-waist#narrow-waist)，和[O(M
    × N)代码爆炸](/cross-ref.html?tag=m-by-n-explosion#m-by-n-explosion)之外，这里还有一些值得探索的概念。
- en: Projection to Waists
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 投影到腰部
- en: 'I need a name for the idea of **code reuse** by changing the representation
    of data to a narrow waist. Examples:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要一个关于通过改变数据表示来实现**代码重用**的概念名称，以便投影到一个窄腰部。例如：
- en: The `/proc` file system projects kernel metadata onto the narrow waist of the
    file system.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/proc`文件系统将内核元数据投影到文件系统的窄腰上。'
- en: Now you can use existing tools like `ls` and `open()` to explore the state of
    processes.
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在你可以使用现有的工具像`ls`和`open()`来探索进程的状态。
- en: Any system that uses [FUSE](https://en.wikipedia.org/wiki/Filesystem_in_Userspace)
    is also like this, e.g. Michael Greenberg's [File File System](https://mgree.github.io/ffs/)
    projects [JSON](/cross-ref.html?tag=JSON#JSON) onto a virtual file system. This
    allows reuse of tools like `cd` and `ls`.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何使用[FUSE](https://en.wikipedia.org/wiki/Filesystem_in_Userspace)的系统也是如此，例如Michael
    Greenberg的[File File System](https://mgree.github.io/ffs/)将[JSON](/cross-ref.html?tag=JSON#JSON)投影到虚拟文件系统上。这允许重用`cd`和`ls`等工具。
- en: The [gron](https://github.com/tomnomnom/gron) tool projects tree-like [JSON](/cross-ref.html?tag=JSON#JSON)
    onto the narrow waist of "lines of text". This allows reuse of tools like [grep](/cross-ref.html?tag=grep#grep)
    and [awk](/cross-ref.html?tag=awk#awk).
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[gron](https://github.com/tomnomnom/gron)工具将类似树状的[JSON](/cross-ref.html?tag=JSON#JSON)投影到"文本行"的窄腰上。这允许重用像[grep](/cross-ref.html?tag=grep#grep)和[awk](/cross-ref.html?tag=awk#awk)这样的工具。'
- en: 'Notice that [JSON](/cross-ref.html?tag=JSON#JSON) is a narrow waist, but it''s
    been projected onto two others: the file system, and lines of text. Which one
    is appropriate (if any) depends on what set of tools helps you solve a particular
    problem.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，[JSON](/cross-ref.html?tag=JSON#JSON)是一个窄腰，但它已经投影到了另外两个窄腰上：文件系统和文本行。哪一个（如果有的话）适合取决于什么样的工具帮助您解决特定的问题。
- en: Emulation of Waists
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 腰部仿真
- en: This is the most straightforward one. As mentioned above, there's a big incentive
    for Windows to emulate Linux, and vice versa. The platform gets thousands and
    thousands of applications "for free".
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最直接的一个。如上所述，Windows和Linux之间仿真有很大的动机，反之亦然。这个平台获得了成千上万个应用程序的"免费"。
- en: Another example is when Illumos borrowed FreeBSD's Linux syscall ABI emulation
    in order to run user-uploaded [Docker](/cross-ref.html?tag=docker#docker) containers.
    This is **dynamic, runtime** composition with [ABIs](/cross-ref.html?tag=ABI#ABI),
    not static composition by compiling code against kernel [APIs](/cross-ref.html?tag=API#API)
    expressed as C header files.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是 Illumos 借用 FreeBSD 的 Linux 系统调用 ABI 模拟，以便运行用户上传的[Docker](/cross-ref.html?tag=docker#docker)
    容器。这是 **动态、运行时** 的组合，使用[ABI](/cross-ref.html?tag=ABI#ABI)，而不是通过将代码编译到内核[API](/cross-ref.html?tag=API#API)
    的静态组合。
- en: Extension of Waists
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 腰部的扩展
- en: 'I think "waist extension" is a good term for the following ideas:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为“腰部扩展”是以下思想的一个很好的术语：
- en: The web is a humble and brilliant **extension of Unix**, adding simple networking
    and hyperlinks (from [this recent comment](https://news.ycombinator.com/item?id=26865164);
    [a longer comment](https://news.ycombinator.com/item?id=6131335) from 2013).
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络是 Unix 的一种谦逊且精彩的**扩展**，添加了简单的网络和超链接（来自[最近的评论](https://news.ycombinator.com/item?id=26865164)；[2013
    年的更长评论](https://news.ycombinator.com/item?id=6131335)）。
- en: This design was not obvious! There is a long history of hypertext systems that
    were **not** built on Unix. It would be nice to research explain the history.
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个设计并不明显！存在着一个长期的超文本系统历史，并非都是建立在 Unix 上的。研究并解释这段历史将是很有意义的。
- en: '[apenwarr in 2006](https://apenwarr.ca/log/20061201): *The web works because
    it mostly just paraphrases Unix''s cleverness*. ("Working" is an important property
    that a lot of software lacks.)'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2006 年的 apenwarr](https://apenwarr.ca/log/20061201)：*网络之所以有效，主要是因为它大部分只是在模仿
    Unix 的聪明设计*。 （“有效”是很多软件缺乏的一个重要特性。）'
- en: '[Web Sites Are Naturally Made With Shell Scripts](//www.oilshell.org/blog/2020/02/good-parts-sketch.html#web-sites-are-naturally-made-with-shell-scripts)
    (2020)'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[网站自然地由 Shell 脚本制作](//www.oilshell.org/blog/2020/02/good-parts-sketch.html#web-sites-are-naturally-made-with-shell-scripts)（2020）'
- en: '[git](/cross-ref.html?tag=git#git) is a distributed extension of the Unix file
    system.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[git](/cross-ref.html?tag=git#git) 是 Unix 文件系统的分布式扩展。'
- en: Again, earlier systems were **not** like this, e.g. CVS and SVN. As with the
    web, the idea is only obvious in hindsight. It's obvious when it becomes "air",
    but someone had to invent it.
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次强调，早期的系统并不像现在这样，比如 CVS 和 SVN。与网络一样，这个想法在事后看来是显而易见的。当它变得“必需”时，它就显而易见了，但某人必须发明它。
- en: 'git has a messy UI, but a clean [narrow waist](/cross-ref.html?tag=narrow-waist#narrow-waist).
    This article seems like a good explanation, but there may be better ones: [Git
    is a purely functional data structure](https://blog.jayway.com/2013/03/03/git-is-a-purely-functional-data-structure/).'
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: git 的用户界面看起来很凌乱，但是它有一个清晰的[narrow waist](/cross-ref.html?tag=narrow-waist#narrow-waist)。这篇文章似乎是一个很好的解释，但可能有更好的解释：[Git
    是一个纯函数数据结构](https://blog.jayway.com/2013/03/03/git-is-a-purely-functional-data-structure/)。
- en: Composition Between Waists
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 腰部之间的组合
- en: 'Unix has multiple waists: processes, file descriptors, file systems, lines
    of text, unstructured text, and bytes. Each of them allows M × N things to compose,
    but they also must compose **amongst themselves**.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Unix 拥有多个狭腰：进程、文件描述符、文件系统、文本行、非结构化文本和字节。它们中的每一个都允许 M × N 个事物组合，但它们也必须**相互组合**。
- en: '"A few things that compose" is tantamount to the [Perlis-Thompson Principle](/cross-ref.html?tag=perlis-thompson#perlis-thompson).
    When I started this series, I wasn''t sure if this term and "narrow waist" were
    necessary — maybe they''re both tantamount to "simplicity".'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: “几件构成的事物”相当于[Perlis-Thompson 原则](/cross-ref.html?tag=perlis-thompson#perlis-thompson)。当我开始这个系列时，我不确定这个术语和“狭腰”是否必要
    —— 也许它们都等同于“简单性”。
- en: But after working through examples, I see them as distinct but related. So it
    would be nice to write more clearly about how narrow waists relate. This seems
    like a distinct style of long-lived architecture.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在通过示例工作之后，我将它们视为不同但相关的内容。因此，清楚地写出狭腰如何相关将是很好的。这似乎是一种独特的长期架构风格。
- en: Again, let me know if you have references. I **don't** want to write about ideas
    that other people have already explained, or invent new terms when there are existing
    ones.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，如果你有参考资料，请告诉我。我**不想**写别人已经解释过的想法，或者在已有术语存在时创造新术语。
- en: Addition of Waists
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加腰部
- en: It's common to create a new, larger narrow waist out of existing smaller ones.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的做法是通过现有的较小狭腰创建一个新的更大狭腰。
- en: For example, the [Language Server Protocol](https://en.wikipedia.org/wiki/Language_Server_Protocol)
    uses JSON-RPC [for notifications and responses](https://microsoft.github.io/language-server-protocol/overviews/lsp/overview/).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，[语言服务器协议](https://en.wikipedia.org/wiki/Language_Server_Protocol) 使用 JSON-RPC
    [进行通知和响应](https://microsoft.github.io/language-server-protocol/overviews/lsp/overview/)。
- en: In turn, [JSON-RPC](https://en.wikipedia.org/wiki/JSON-RPC) is built on top
    of [JSON](/cross-ref.html?tag=JSON#JSON) and a transport like TCP/IP or pipes.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 反过来，[JSON-RPC](https://en.wikipedia.org/wiki/JSON-RPC) 是基于 [JSON](/cross-ref.html?tag=JSON#JSON)
    和像 TCP/IP 或管道的传输方式构建的。
- en: Hierarchy Among Waists
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 腰部之间的层次结构
- en: 'There''s a clear hierarchy among data representations in Unix, which affects
    which operations are valid:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Unix 中的数据表示之间存在清晰的层次结构，影响哪些操作是有效的：
- en: In the [last post](//www.oilshell.org/blog/2022/02/diagrams.html), I mentioned
    that **text** (ASCII, UTF-8) is a special case of **bytes**, and inherits [operations
    on bytes](//www.oilshell.org/blog/2022/02/diagrams.html#bytes-flat-files).
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[上一篇文章](//www.oilshell.org/blog/2022/02/diagrams.html)中，我提到**文本**（ASCII、UTF-8）是**字节**的一个特例，并继承了[对字节的操作](//www.oilshell.org/blog/2022/02/diagrams.html#bytes-flat-files)。
- en: I mentioned above the **Lines of Text** is a special case of **text**.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我之前提到**文本行**是**文本**的一个特例。
- en: Likewise, JSON, CSV, and HTML are all **text**. and inherit [operations on text](//www.oilshell.org/blog/2022/02/diagrams.html#text-narrow-waist-of-unix-architecture).
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样，JSON、CSV 和 HTML 都是**文本**，并继承了[对文本的操作](//www.oilshell.org/blog/2022/02/diagrams.html#text-narrow-waist-of-unix-architecture)。
- en: Call to Action
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行动号召
- en: Jon Postel Made the Internet's Waist Narrow
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 乔恩·波斯特让互联网的“瘦腰”变窄。
- en: 'After a very helpful reader e-mail, I added [an appendix to the last post](//www.oilshell.org/blog/2022/02/diagrams.html#addendum-february-28th).
    I want to transcribe the first 10 minutes of [the video of Van Jacobsen](https://www.youtube.com/watch?v=69p78tfm29o).
    He describes the role of [Jon Postel](https://en.wikipedia.org/wiki/Jon_Postel)
    as Internet specification editor — specifically, his **relentless, decades-long
    drive for minimalism** in the Internet''s design:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在一位非常有帮助的读者的电子邮件后，我添加了[上篇文章的附录](//www.oilshell.org/blog/2022/02/diagrams.html#addendum-february-28th)。我想要转录[范·雅各布森的视频](https://www.youtube.com/watch?v=69p78tfm29o)的开头10分钟。他描述了互联网规范编辑[乔恩·波斯特](https://en.wikipedia.org/wiki/Jon_Postel)的角色
    — 具体来说，他对互联网设计中**几十年来坚持不懈的极简主义追求**：
- en: This narrow waist is not something that God gives you. It's something that you
    make. It's hard engineering.
  id: totrans-228
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个“瘦腰”不是上帝赐予你的东西。这是你创造出来的。这是艰苦的工程。
- en: and
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: We unfortunately don't have a lot of Jon Postel's in the world. It would be
    nice to get one on nearly every project.
  id: totrans-230
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不幸的是，世界上并没有很多乔恩·波斯特。几乎每个项目都能有一个这样的人将是件好事。
- en: 'This reminds me of the sentiments by Ken Thompson quoted in [Unix Shell: History
    and Trivia](//www.oilshell.org/blog/2021/08/history-trivia.html). They share a
    taste for minimalism that unlocks enormous functionality.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '这让我想起了肯·汤普森在[Unix Shell: History and Trivia](//www.oilshell.org/blog/2021/08/history-trivia.html)中引用的情感。他们都喜欢解锁巨大功能的极简主义。'
- en: 'I also enjoyed reading these memorials:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我也很享受阅读这些纪念文章：
- en: The point is that **people** have to behave differently to create valuable,
    interoperable systems!
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是**人们**必须采取不同的行动来创建有价值的、可互操作的系统！
- en: Conclusion
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: 'After [more than a year](//www.oilshell.org/blog/2021/12/review-arch.html)
    of circling these #[software-architecture](/blog/tags.html?tag=software-architecture#software-architecture)
    topics, I feel pretty good about them. They''ve informed Oil''s design and will
    continue to. It helps to be precise about definitions and support claims with
    examples.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 经过[一年多](//www.oilshell.org/blog/2021/12/review-arch.html)围绕这些#[软件架构](/blog/tags.html?tag=software-architecture#software-architecture)主题的讨论，我对它们感到相当满意。它们为Oil的设计提供了启发，并将继续提供支持。准确定义和例证支持确实有所帮助。
- en: I hope this outline was also useful to you. I wish I could have written a shorter
    post, but I didn't have time :-)
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这个大纲对你也有用。我希望我能写得更简短，但我没有时间 :-)
- en: And again, [please send](https://old.reddit.com/r/oilshell/comments/tcy7ko/a_sketch_of_the_biggest_idea_in_software/?)
    related references. They will help with future articles on these ideas. (I was
    surprised that the [history of the narrow waist in networking](//www.oilshell.org/blog/2022/02/diagrams.html#whats-the-history-of-this-idea)
    is not well documented or agreed upon.)
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，[请再次发送](https://old.reddit.com/r/oilshell/comments/tcy7ko/a_sketch_of_the_biggest_idea_in_software/?)相关的参考资料。它们将有助于未来关于这些理念的文章。（我对互联网中的“瘦腰”的历史](//www.oilshell.org/blog/2022/02/diagrams.html#whats-the-history-of-this-idea)并不是很清楚或达成一致的历史感到惊讶。）
- en: '* * *'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Now I want to switch gears to something more "tactical": translating Oil to
    C++! That has been on hold for a full year, since [the last milestone in March
    2021](https://www.oilshell.org/blog/2021/03/release-0.8.8.html).'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我想转换到更“战术”的东西：将Oil翻译成C++！自从[2021年3月的最后一个里程碑](https://www.oilshell.org/blog/2021/03/release-0.8.8.html)以来，这个项目已经搁置了一整年。
- en: I also want to expand the project. Please donate to my new [Github Sponsors](https://github.com/sponsors/oilshell)
    page if you think we need a new, principled shell. I'll ask for donations again
    in upcoming blog posts. All of the money will go to contributors and "employees",
    **not** to me!
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为我们需要一个新的、有原则的Shell，请捐款到我的新[Github赞助者](https://github.com/sponsors/oilshell)页面。我会在即将发布的博客文章中再次请求捐款。所有的钱都将用于贡献者和“员工”，**而不是**我自己！
- en: Appendices
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录
- en: The Lambda Calculus Is a Narrow Waist
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Lambda演算是一个狭窄的腰部
- en: 'This a "fun" post to help us with the definition. It''s based on this quote
    from chapter 5 of [Types and Programming Languages](https://mitpress.mit.edu/books/types-and-programming-languages):'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一篇“有趣”的文章，帮助我们定义。它基于《[类型与编程语言](https://mitpress.mit.edu/books/types-and-programming-languages)》第5章的这句引用：
- en: '[The importance of the [lambda calculus](https://en.wikipedia.org/wiki/Lambda_calculus)]
    arises from the fact that it can be viewed simultaneously as a simple programming
    language **in which** computations can be described and as a mathematical object
    **about which** rigorous statements can be proved.'
  id: totrans-244
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[λ演算的重要性](https://en.wikipedia.org/wiki/Lambda_calculus)在于它既可以被看作是一个描述计算的简单编程语言
    **也可以** 被看作是一个关于其能够进行严格陈述的数学对象。'
- en: In other words, it reduces an M × N explosion of {arbitrary algorithms ...}
    × {inductive cases in proofs about them}.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 换句话说，它减少了 {任意算法...} × {关于它们的归纳情况的证明} 的M×N爆炸。
- en: '**Derived forms** with respect to lambda calculus are like **intermediate representations**
    in compilers. Proofs about languages are laborious for a very similar reason that
    implementing compilers is laborious!'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**派生形式** 关于λ演算与编译器中的 **中间表示** 类似。关于语言的证明之所以费力，与实现编译器的原因非常相似！'
- en: Wiki, Zulip
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Wiki, Zulip
- en: This post was long, but there are still important things I left out. As mentioned
    in the *Motivating Design Questions* section, these ideas relate to the design
    of foundational cloud software like Docker and Kubernetes.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章很长，但我还是漏掉了一些重要的东西。正如在*激励性设计问题*部分提到的那样，这些想法涉及到像Docker和Kubernetes这样的基础云软件的设计。
- en: But I want Oil to be in better shape before I continue writing about these topics.
    For now here are my Wiki pages and Zulip links. (I really wish I had a single
    brainstorming and research app.)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我继续写这些话题之前，我希望Oil的状态更好一些。暂时先看看我的Wiki页面和Zulip链接。（我真希望我有一个单一的头脑风暴和研究应用。）
- en: 'I also mentioned the #[containers](https://oilshell.zulipchat.com/#narrow/stream/308821-containers)
    Zulip stream in December. Here is a (sloppily sketched) overview thread:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我还在去年12月提到了#[containers](https://oilshell.zulipchat.com/#narrow/stream/308821-containers)
    Zulip stream。这是一个（草草地勾勒出的）概述线程：
- en: '[Docker Summary](https://oilshell.zulipchat.com/#narrow/stream/308821-containers/topic/Docker.20Summary/near/264915992).
    The Value of Docker, and its anti-Unix design. Other threads substantiate these
    claims with experience.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Docker 总结](https://oilshell.zulipchat.com/#narrow/stream/308821-containers/topic/Docker.20Summary/near/264915992)。Docker
    的价值及其反 Unix 设计。其他线程通过经验证实了这些说法。'
