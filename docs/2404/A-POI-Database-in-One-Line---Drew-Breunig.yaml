- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:20:14'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: A POI Database in One Line | Drew Breunig
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.dbreunig.com/2024/04/18/a-poi-database-in-one-line.html](https://www.dbreunig.com/2024/04/18/a-poi-database-in-one-line.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This week, the [Overture Maps Foundation](https://overturemaps.org/) released
    [a handy command-line tool](https://github.com/OvertureMaps/overturemaps-py) for
    downloading a subset of the Overture dataset. Usage is simple:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command downloads a GeoJSON file containing all the Overture buildings
    in a chunk of Boston. We’re outputting GeoJSON to a local file named `boston.geojson`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: With the new tool, I wanted to revisit the exercise of creating a POI database
    with Overture. [Last time](https://gist.github.com/dbreunig/bd13dd99d6d708560bfcca9f45c9fb29),
    it took us 162 lines of wrangling with the `aws-cli` and `duckdb` to get us something
    usable. How many lines will it take us this time?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s just one line:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We made three tweaks to the `overturemaps` maps call: specifying we want `place`
    data, outputting `geojsonseq` (or new-line delimited GeoJSON), and removing the
    output arguments. With no output specified, place data is output to `stdout`,
    which we can pipe to Simon Willison’s [geojson-to-sqlite](https://simonwillison.net/2020/Jan/31/geojson-sqlite/),
    taking care to specify we’re using new-line delimited GeoJSON and that the primary
    key is `id`.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: On my machine, this task took ~9 seconds to pull down 1,648 places from the
    global Overture places dataset.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'But we can do better! If we wanted to grab all the places in my town, I’d have
    to figure out the bounding box. Which is kind of a pain. Thankfully, LLMs are
    spookily good at producing bounding boxes for towns, cities, states, and regions.
    So lets incorporate Simon’s [llm](https://llm.datasette.io/en/stable/) tool to
    generate our bounding box (here, with OpenAI’s `gpt-3.5`), using command substitution:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`llm` returns “-122.336,37.572,-122.187,37.804”, which is dead on.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: This one-liner downloads 4,005 places and loads them into a sqlite database
    in about 14 seconds.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个一行代码下载了 4,005 个位置数据，并在大约 14 秒内将它们加载到 SQLite 数据库中。
