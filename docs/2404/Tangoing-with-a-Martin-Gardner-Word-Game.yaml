- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:38:59'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:38:59'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Tangoing with a Martin Gardner Word Game
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Martin Gardner 的文字游戏共舞
- en: 来源：[https://pncnmnp.github.io/blogs/martin-gardner-game.html](https://pncnmnp.github.io/blogs/martin-gardner-game.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://pncnmnp.github.io/blogs/martin-gardner-game.html](https://pncnmnp.github.io/blogs/martin-gardner-game.html)
- en: Tangoing with a Martin Gardner Word Game
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Martin Gardner 的文字游戏共舞
- en: 'First Published: 28/01/24'
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首次发布日期：24年1月28日
- en: '*You’ll be sort of surprised what there is to be found once you go beyond Z
    and start poking around!*'
  id: totrans-split-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*一旦超越 Z 开始四处探索，你会感到有点惊讶，你会找到什么！*'
- en: '- On Beyond Zebra!, Dr. Seuss'
  id: totrans-split-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- 《超越 Zebra！》, Dr. Seuss'
- en: It's fascinating how, out of the blue, we sometimes discover something so tangential
    yet interesting that we stop whatever we're doing to pursue that idea.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 令人着迷的是，我们有时会突然发现一些边缘但有趣的东西，以至于停下手头的工作去追求这个想法。
- en: Yesterday, while researching bit arrays, I came across [a 1961 article in the
    Communications of the ACM](https://dl.acm.org/doi/10.1145/366786.366795) by Anatol
    W. Holt. Having never heard of Holt, I naturally decided to explore his works
    on Google Scholar and Google Books. That's when I stumbled upon [Martin Gardner's
    1969 column, "Mathematical Games"](https://archive.org/details/sim_scientific-american_1969-04_220_4/page/124/mode/2up),
    published in Scientific American.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 昨天，在研究位数组时，我偶然发现了 [《ACM通讯》中1961年的一篇文章](https://dl.acm.org/doi/10.1145/366786.366795)，作者是
    Anatol W. Holt。因为从未听说过 Holt，我自然决定在 Google 学术和 Google 图书中探索他的作品。就在那时，我偶然发现了 [Martin
    Gardner 1969 年的专栏文章“数学游戏”](https://archive.org/details/sim_scientific-american_1969-04_220_4/page/124/mode/2up)，刊登在《科学美国人》上。
- en: This was the April edition, in which Gardner had laid out eight problems based
    on logic and probability. A central theme amongst many of them was that the problem
    involved some sort of game - such as chess, name cards, and word games. *To call
    these problems intriguing would be an understatement* - there's an uncrossed knight's
    tour problem, a variant of chess where the first person to check the opponent's
    king wins, a variant of the urn problem, and, of course, the topic of this blog
    - a word game.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是四月份的版面，Gardner 在其中提出了八个基于逻辑和概率的问题。其中许多问题的中心主题是某种游戏，例如象棋、名片和文字游戏。*称这些问题有趣几乎是一种轻描淡写*
    - 有一个未解的骑士周游问题，一种变体的象棋，第一个将对手国王将死的人赢，一个乌尔纳问题的变体，当然，这个博客的主题 - 一个文字游戏。
- en: 'Here’s the word game:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个词语游戏：
- en: Anatol W. Holt, director of advanced systems for Applied Data Research, Inc.,
    is a mathematician who makes a hobby of inventing games. His board game MEM, played
    with 32 stones of 11 colors, is a delightful strategy game based on a completely
    new idea involving pattern recognition. (It is currently on sale in stores and
    can also be ordered postpaid for $6.50 from Holt’s own firm, Stelledar, Inc.,
    1700 Walnut Street, Philadelphia, Pa. 19103.)
  id: totrans-split-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Anatol W. Holt，应用数据研究公司高级系统主管，是一位喜欢发明游戏的数学家。他的棋盘游戏 MEM，使用了 11 种颜色的 32 颗石子，是一款基于全新思路的策略游戏，涉及模式识别。（目前在商店有售，也可以通过
    Holt 自己的公司 Stelledar, Inc., 1700 Walnut Street, Philadelphia, Pa. 19103，邮寄购买，价格为
    $6.50。）
- en: 'A few years ago, Holt devised the following word game. Two people each think
    of a “target word” with the same number of letters. Beginners should start with
    three-letter words and then go on to longer words as their skill improves. Players
    take turns calling out a “probe word” of the agreed length. The opponent must
    respond by saying whether the number of “hits” (right letter at the right position)
    is odd or even. The first to guess his opponent’s word is the winner. To show
    how logical analysis can determine the word without guesswork, Holt has supplied
    the following example of six probe words given by one player:'
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 几年前，Holt 设计了以下的文字游戏。两个人各自想一个“目标词”，字母数相同。初学者应从三个字母的单词开始，随着技能的提高逐渐转向更长的单词。玩家轮流报出同意长度的“探测词”。对手必须回答“击中”（正确的字母在正确的位置）的数量是奇数还是偶数。第一个猜到对手的单词的人获胜。为了展示如何通过逻辑分析而非猜测来确定单词，Holt
    提供了一个玩家提供的六个探测词的示例：
- en: 'Even: Day, May, Buy'
  id: totrans-split-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'Even: Day, May, Buy'
- en: 'Odd: Say, Due, Ten'
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'Odd: Say, Due, Ten'
- en: If you knew the target word and compared it letter by letter with any word on
    the even list, you would find that an even number of letters (zero counts as even)
    in each probe would match letters at the same positions in the target word; words
    on the odd list would match the target word in an odd number of positions. Find
    the target word.
  id: totrans-split-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你知道目标词并将其逐字与任何偶数列表中的词进行比较，你会发现每个探测中的偶数（零也算偶数）的字母与目标词中相同位置的字母匹配；奇数列表中的词将与目标词在奇数位置上匹配。找到目标词。
- en: '*Let''s not be mimes! Go ahead, pick up your pencils, and start brainstorming.*'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们不要充当哑剧演员！拿起你的铅笔，开始脑力激荡吧。*'
- en: This past Christmas, I played a "cannot count, but it's a lot" amount of NYT
    word games with my family. I must confess, I even tried building my own Wordle
    variants, but I couldn't come up with something as interesting and simple as this
    one.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过去的圣诞节，我与家人玩了大量的纽约时报单词游戏，虽然我承认，我甚至尝试构建我自己的Wordle变体，但我没能想出像这个那么有趣和简单的东西。
- en: A natural solution can be derived by examining the similarities and differences
    between the odd and even probe words. Take, for example, "Day," which is even,
    and "Say," which is odd. Since the "-ay" suffix is consistent, it indicates that
    "S" is the first letter in the target word. Further, considering "Due," "Day,"
    and "Buy," we deduce that "u" cannot be in the middle, and "D" cannot be at the
    start, as previously observed. This leaves "e" from the odd word "Due," suggesting
    that "e" is the last letter in the target word. Having determined both the first
    and last letters, we then look at "Ten." As it is an odd word and "e" is the middle
    letter, we can conclude that "e" is also the central letter in the target word.
    *Therefore, the target word is "See"*.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查奇数和偶数探测词之间的相似性和差异可以得出一个自然的解决方案。例如，“Day”是偶数，“Say”是奇数。由于后缀“-ay”是一致的，这表明“S”是目标词的第一个字母。进一步考虑“Due”，“Day”和“Buy”，我们推断出“u”不能在中间，“D”不能在开头，正如先前观察到的。这留下了奇数词“Due”中的“e”，表明“e”是目标词的最后一个字母。确定了第一个和最后一个字母后，我们再看“Ten”。由于它是一个奇数词，且“e”是中间字母，我们可以得出“e”也是目标词的中心字母。*因此，目标词是“See”。*
- en: '*This can easily be turned into an NYT-esque word game, where the computer
    thinks of a three-letter dictionary word (or four, to make it more challenging)
    at random, and our task is to guess the word while the computer gives us odd/even
    hints. The fewer the number of guesses it takes to find the target word, the better.*
    It''s a surprisingly fun game!'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*这可以很容易地变成一款类似纽约时报的文字游戏，计算机随机选择一个三个字母的词（或四个，以增加难度），我们的任务是猜测这个词，而计算机给出奇偶提示。猜测次数越少，找到目标词的效果越好。*
    这是一个令人惊讶地有趣的游戏！'
- en: 'This is a short Python program for playing the game:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于玩游戏的简短的Python程序：
- en: '[PRE0]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, here''s an interesting question: *how can we solve it computationally?*'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这里有一个有趣的问题：*我们如何计算地解决它呢？*
- en: 'For a three-letter target word, an algorithm can be as follows:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个三个字母的目标词，算法可以如下：
- en: Start by making random three-letter guesses from a dictionary.
  id: totrans-split-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从字典中随机选择三个字母的猜测开始。
- en: Continue guessing until you receive feedback indicating that the guessed word
    is an "odd probe word" (i.e., it has either one or three matching letters with
    the target word). If all three letters match, the problem is solved.
  id: totrans-split-28
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续猜测，直到你收到表明所猜测的词是一个“奇探测词”的反馈（即它与目标词匹配的字母数为一或三）。如果三个字母都匹配，问题就解决了。
- en: Take the odd probe word from Step 1 and generate variations of this word by
    changing one letter at a time while keeping the other two letters constant. For
    example, if “nay” is an odd probe word, generate variations such as “say”, “nap”,
    and “noy”.
  id: totrans-split-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从步骤1的奇数探测词中取一个并生成这个词的变体，每次改变一个字母，同时保持其他两个字母不变。例如，如果“nay”是一个奇数探测词，生成诸如“say”，“nap”和“noy”的变体。
- en: For each variation, make a guess and observe the feedback.
  id: totrans-split-30
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每一个变体，做一个猜测并观察反馈。
- en: Identify the letter that, when changed, results in an "even probe word" feedback.
    This letter is the first matching letter in the target word.
  id: totrans-split-31
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定一个字母的变化，导致一个“偶探测词”反馈。这个字母是目标词中第一个匹配的字母。
- en: Next, make guesses keeping the identified matching letter (and its position)
    constant from Step 2, while changing the other two letters.
  id: totrans-split-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在保持步骤2中确定的匹配字母（及其位置）不变的情况下进行猜测，同时改变其他两个字母。
- en: Continue until you receive feedback indicating an "even probe word."
  id: totrans-split-33
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续，直到你收到表明这是一个“偶探测词”的反馈。
- en: Apply the same process as in Step 2 to identify the second matching letter.
  id: totrans-split-34
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用与步骤2相同的过程来识别第二个匹配的字母。
- en: With two letters already identified, use a dictionary to make the last-letter
    guesses until you find the target word.
  id: totrans-split-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有了两个已经确定的字母后，使用字典来进行最后一个字母的猜测，直到找到目标单词。
- en: The problem becomes surprisingly complex when we restrict step 2 to only allow
    guesses of words found in a dictionary. This limitation means we cannot always
    generate variations while keeping the other letters constant. This complexity
    isn't immediately evident in the three-letter version; however, when we move to
    four or more letters, it becomes much harder. Dare I say, *the problem even becomes
    NP*.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将第二步限制为仅允许在字典中找到的单词时，问题变得令人惊讶地复杂起来。这种限制意味着我们不能在保持其他字母不变的情况下总是能够生成变体。这种复杂性在三个字母的版本中并不立即显现；然而，当我们移至四个或更多字母时，它变得更加困难。敢问，*这个问题甚至变成了NP*。
- en: Think about it! The odd/even feedback we get does not directly indicate which
    letters are correct or their positions. This uncertainty leads to a combinatorial
    explosion of possibilities as the word length increases. With each guess, we only
    partially constrain the solution space, and in the worst case, many guesses might
    be needed to converge on the correct word. I plan to ponder more on this.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 想一想！我们得到的奇偶反馈并不直接指示哪些字母是正确的或它们的位置。这种不确定性导致了随着单词长度增加而出现的组合爆炸。每次猜测，我们只能部分地限制解空间，在最坏的情况下，可能需要许多猜测才能收敛于正确的单词。我打算对此进一步思考。
- en: Lastly, *every world builder gets to name their town*. Since the original authors
    are likely not present anymore, I'd like to propose a name for it - **Yinique**!
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，*每个世界构建者都有权为他们的城镇命名*。由于原始作者可能已不在，我想为它提议一个名字 - **Yinique**！
- en: '[←](../blog.html)'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[←](../blog.html)'
