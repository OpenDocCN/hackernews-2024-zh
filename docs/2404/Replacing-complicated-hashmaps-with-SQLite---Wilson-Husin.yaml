- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: '分类: 未分类'
- en: 'date: 2024-05-27 12:58:47'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-05-27 12:58:47'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Replacing complicated hashmaps with SQLite | Wilson Husin
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 SQLite 替换复杂的哈希映射 | Wilson Husin
- en: 来源：[https://husin.dev/ephemeral-sqlite/](https://husin.dev/ephemeral-sqlite/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://husin.dev/ephemeral-sqlite/](https://husin.dev/ephemeral-sqlite/)
- en: In a recent project, I was working on a command line application with tricky
    data manipulation scenario. Imagine if you were moving members from mailing lists
    (e.g. Google Groups) to group chat service (e.g. Slack), where the goal is for
    members of the mailing list will find a new home in group chat channels.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最近的一个项目中，我正在处理一个带有棘手数据操作场景的命令行应用程序。想象一下，如果你正在将邮件列表的成员（例如 Google Groups）移动到群组聊天服务（例如
    Slack），目标是让邮件列表的成员在群组聊天频道中找到新的归属地。
- en: It is perfectly sensible for engineers with hacker spirit to say “script this
    out and run it for each of the groups” and I agree — surely it’s a thing that
    a few HTTP calls and hashmaps can solve?
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有黑客精神的工程师来说，说“将其脚本化并运行每个组的命令”是完全合理的，我同意 —— 当然，少量 HTTP 调用和哈希映射可以解决这个问题？
- en: 'Turns out, this situation comes with some curve balls:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 结果证明，这种情况带来了一些曲折：
- en: Mailing lists may have other mailing lists as members (nested mailing list),
    but group chat channels only have members, thus some may need to be merged in
    migration.
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邮件列表可能会有其他邮件列表作为成员（嵌套邮件列表），但群组聊天频道只有成员，因此在迁移时可能需要合并一些。
- en: Potential of many-to-one relationship, where 2+ entities of mailing lists ends
    up in 1 channel.
  id: totrans-split-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在多对一关系的潜力，即多个邮件列表实体最终合并为一个频道。
- en: Some mailing lists already have an existing group chat channel counterparts,
    but the membership is not guaranteed to be consistent.
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有些邮件列表已经有现有的群组聊天频道对应，但成员资格不一定保持一致。
- en: Not all requests are “create channel”.
  id: totrans-split-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并非所有请求都是“创建频道”。
- en: Same applies to users and memberships — take the existing records to consideration.
  id: totrans-split-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户和成员资格也是如此 — 考虑现有记录。
- en: Mailing list have members which are identified by email address. Group chat
    service can lookup users by email, but need the user ID for API calls to link
    channel membership.
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邮件列表的成员通过电子邮件地址识别。群组聊天服务可以通过电子邮件查找用户，但需要用户ID来进行 API 调用以链接频道成员资格。
- en: We would need to lookup users of group chat service by both email and user ID;
    2 lookup keys (hashmaps) for the same value kind.
  id: totrans-split-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要通过电子邮件和用户ID来查找群组聊天服务的用户；这是相同值类型的两个查找键（哈希映射）。
- en: 'Now that doesn’t look so simple anymore, does it? As I was thinking about it,
    there is a lingering thought at the back of my head: “If I could use `WHERE` on
    any field and `JOIN` several entities, the new memberships could be solved in
    a single SQL query.”'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来并不那么简单了，对吧？当我在考虑这个问题时，脑海中有一个悬而未决的想法：“如果我可以在任何字段上使用 `WHERE` 并且 `JOIN` 多个实体，新的成员资格可以在单个
    SQL 查询中解决。”
- en: And then it hit me — maybe I really could after all. So I did exactly that.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我意识到 — 或许我真的可以。所以我确实这样做了。
- en: 'Much of what I had originally implemented is now much simpler, without having
    to worry about passing around states in every function. Initial implementation
    has my function signatures looking like this:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我最初实施的大部分内容现在都变得简单得多，而不必担心在每个函数中传递状态。初始实现使我的函数签名看起来像这样：
- en: '[PRE0]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Pretty much all functions require the states to be passed around that creates
    noise and bug-prone (e.g. what if a function unintentionally modified the hashmap?).
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有功能都需要传递状态以避免产生噪音和易于出错（例如，如果一个函数意外修改了哈希映射怎么办？）。
- en: 'With SQLite as state management, the same method now look like this:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SQLite 作为状态管理，相同的方法现在看起来像这样：
- en: '[PRE1]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And thus when I want to lookup the list of users which did not find any matches,
    it ends up being an intuitive flow:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一来，当我想要查找未找到任何匹配项的用户列表时，它最终成为了一种直观的流程：
- en: '[PRE2]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you find yourself passing around hashmap, reindexing the map, writing too
    many conditions to settle state management, and thought that it would be trivial
    in SQL: consider using ephemeral SQLite instance!'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己在传递哈希映射、重建映射、编写太多条件来解决状态管理，并且认为在 SQL 中会轻而易举：考虑使用临时 SQLite 实例！
- en: 'Miscellaneous interesting bits from the project:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 项目中的其他有趣细节：
- en: Because database is ephemeral (using `:memory:`), I need to run migration every
    time the application boots. Corollary to that, I don’t need migration tools to
    manage up / down migrations!
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为数据库是临时的（使用 `:memory:`），我需要在每次应用程序启动时运行迁移。作为必然结果，我不需要迁移工具来管理向上 / 向下迁移！
- en: I can use `sqlite3` CLI to inspect the database, which is a nice bonus when
    debugging. Of course I would have to change the setup from `:memory:` to a file
    path that exists in file system.
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当调试时，我可以使用 `sqlite3` CLI 来检查数据库，这在调试时是一个很好的奖励。当然，我需要将设置从 `:memory:` 改变为文件系统中存在的文件路径。
- en: The final form of `MatchUsers` end up taking only `context.Context`, since it
    worked out better for the rest of the project to access database connection from
    context.
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MatchUsers` 的最终形式最终仅采用了 `context.Context`，因为这样对项目的其余部分访问数据库连接更为有效。'
