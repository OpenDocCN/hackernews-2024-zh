- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 12:57:05'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 12:57:05'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Easy Mode Rust — Llogiq on stuff
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简易模式Rust — Llogiq对事物的见解
- en: 来源：[https://llogiq.github.io/2024/03/28/easy.html](https://llogiq.github.io/2024/03/28/easy.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://llogiq.github.io/2024/03/28/easy.html](https://llogiq.github.io/2024/03/28/easy.html)
- en: Easy Mode Rust
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简易模式Rust
- en: 28 March 2024
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年3月28日
- en: This post is based on my [RustNationUK ‘24](https://rustnationuk.com) talk with
    the same title. The [talk video](https://www.youtube.com/watch?v=33FG6O3qejM)
    is on youtube, the slides [are served from here](/talks/easy.html).
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本文基于我的[RustNationUK ‘24](https://rustnationuk.com)演讲，主题相同。[演讲视频](https://www.youtube.com/watch?v=33FG6O3qejM)在YouTube上，幻灯片[从这里提供](/talks/easy.html)。
- en: 'Also, here’s the lyrics of the song I introduced the talk with (sung to the
    tune of Bob Dylan’s “The times, they are a-changin’”):'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这是我在演讲中介绍的歌曲歌词（以Bob Dylan的“The times, they are a-changin’”的曲调演唱）：
- en: Come gather Rustaceans wherever you roam
  id: totrans-split-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 招聚Rust爱好者们，无论你们在何处漂泊
- en: and admit that our numbers have steadily grown.
  id: totrans-split-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 并承认我们的人数已经稳步增长。
- en: The community’s awesomeness ain’t set in stone,
  id: totrans-split-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 社区的令人敬畏并不是一成不变的，
- en: so if that to you is worth saving
  id: totrans-split-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 所以如果这对你值得保存
- en: then you better start teamin’ up instead of toilin’ alone
  id: totrans-split-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 那么你最好开始联合起来而不是独自劳作
- en: for the times, they are a-changin’.
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 时光变迁。
- en: Come bloggers and writers who tutorize with your pen
  id: totrans-split-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来博客作者和作者们，用你的笔教导
- en: and teach those new folks, the chance won’t come again!
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 并教那些新手，这次机会不会再来！
- en: Where there once was one newbie, there soon will be ten
  id: totrans-split-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 曾经只有一个新手，很快就会变成十个
- en: and your knowledge is what they are cravin’.
  id: totrans-split-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你的知识是他们渴望的。
- en: Know that what you share with them is what you will gain
  id: totrans-split-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 知道你与他们分享的将是你所获得的
- en: for the times, they are a-changin’.
  id: totrans-split-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 时光变迁。
- en: Researchers and coders, please heed the call,
  id: totrans-split-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 研究人员和编码人员，请听从呼唤，
- en: Without your efforts Rust would be nothin’ at all
  id: totrans-split-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 没有你们的努力，Rust将一无所有
- en: and unsafety would rise where it now meets its fall.
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 而不安全性将在它现在遇到失败的地方上升。
- en: May C++ proponents be ravin’.
  id: totrans-split-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 愿C++支持者狂欢。
- en: What divides them from us is but a rustup install
  id: totrans-split-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它们与我们之间的分歧仅仅是一个rustup安装
- en: for the times, they are a-changin’.
  id: totrans-split-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 时光变迁。
- en: Fellow moderators throughout the land,
  id: totrans-split-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 全国各地的同行管理员们
- en: don’t you dare censor what is not meant to offend
  id: totrans-split-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你不敢审查那些不是为了冒犯而写的东西
- en: otherwise far too soon helpful people be banned
  id: totrans-split-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 否则很快乐于助人的人将被禁止
- en: and what’s left will be angry folks ragin’.
  id: totrans-split-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 剩下的将是愤怒的人们在愤怒。
- en: Our first order of business is to help understand
  id: totrans-split-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们的首要任务是帮助理解
- en: that the times, they are a-changin’.
  id: totrans-split-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 时光在变迁。
- en: The line it is drawn, the type it is cast
  id: totrans-split-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 界线已经划定，类型已经铸成
- en: What debug runs slow, release will run fast
  id: totrans-split-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 调试慢，发布会快
- en: as the present now will later be past
  id: totrans-split-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因为现在的现在将来会成为过去
- en: and our values be rapidly fadin’
  id: totrans-split-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们的价值观正在迅速消失
- en: unless we find new people who can make them last
  id: totrans-split-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 除非我们找到新的人才能让它们持续下去
- en: for the times, they are a-changin’.
  id: totrans-split-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 时光在变迁。
- en: Rust has an only somewhat deserved reputation for being hard to learn. But that
    is mostly an unavoidable consequence of being a systems language that has to supply
    full control over the myriad of specifics of your code and runtime. But I’d argue
    that our method of teaching Rust is rather more at fault for this reputation.
    So as an antidote to this “the right way to do it” thinking, I offer this set
    of ideas on how to learn as little Rust as possible to become productive in Rust,
    so you can start and have success right away and learn the harder parts later
    when you’re comfortable with the basics.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: Rust有一个并不完全理所当然的声誉，即学习起来很难。但这在很大程度上是作为系统语言的必然结果，必须提供对代码和运行时细节的完全控制。但我认为我们教授Rust的方法更多地导致了这种声誉。因此，作为对“正确方法”的反毒药，我提出了这一组关于如何尽可能少地学习Rust以在Rust中变得高效的想法，这样你可以立即开始并取得成功，等你对基础知识感到舒适后再学习更难的部分。
- en: 'In the talk I started with the “ground rules” for the exercise: I wanted to
    identify a small subset to learn that will allow people to successfully write
    Rust programs to solve the problems in front of them without being overwhelmed
    by all kinds of new concepts. I am happy to forgo on performance, brevity of the
    code or idiomatic code. In fact, some of the suggestions fly in the face of conventional
    guidelines on how good Rust code should look like. One of the questions after
    the talk was how to deal with new contributors or colleagues pushing “substandard”
    code to a project, and here my suggestion is to just merge it and clean it up
    after the fact. New users will feel unsure about their abilities, and nitpicking
    on details will put them off where we want to encourage them in their growth and
    learning, at least in the beginning.'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在演讲中，我从练习的“基本规则”开始：我想确定一个小的子集供学习，使人们能够成功地编写 Rust 程序来解决面前的问题，而不会被各种新概念所淹没。我乐意牺牲性能、代码简洁性或成语化的代码。事实上，一些建议与关于良好
    Rust 代码应该是什么样的传统指南背道而驰。演讲之后的一个问题是如何处理新的贡献者或同事向项目推送“次标准”代码，我的建议是先合并再清理。新用户会对自己的能力感到不安，对细节挑剔会让他们望而却步，而我们希望在他们刚开始学习和成长的阶段鼓励他们。
- en: Of course, the flipside of this is that I don’t suggest that every Rustacean
    learn only this subset and forever avoid all else. The idea here is to make you
    productive and successful quickly, and you can then build on that. A suggestion
    that also came up after my talk was to create a poster with a “research tree”
    (that is sometimes used in strategy games like e.g. Civilization to give people
    a path to progress without making it too linear). This is still on my list and
    I’ll open a repo for that soon, in the hope of finding people who’ll help me.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这种方法的反面是我并不建议每个 Rust 爱好者只学习这一小部分，并永远避免其他所有内容。这里的想法是让您快速地变得高效和成功，然后您可以在此基础上进行扩展。演讲之后还提出了一个建议，即创建一张“研究树”海报（有时在像
    Civilization 这样的策略游戏中使用，给人们提供一条不那么线性的进展路径）。这还在我的计划清单上，我很快会为此开一个仓库，希望能找到愿意帮助我的人。
- en: 'So without further ado, here are the things we want to avoid learning, and
    how to do that:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们要避免学习的事物，就是这些：
- en: Syntax
  id: totrans-split-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语法
- en: 'Rust is not a small language. When starting out, for flow control it’s best
    to stick to basic things like `if`, `for` and `while`. If you need to distinguish
    e.g. enum variants, you can also use `match`, but keep it simple: Only match one
    thing, and avoid more complex things like guard clauses:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 不是一种小语言。刚开始时，对于流程控制，最好只使用基本的东西如 `if`、`for` 和 `while`。如果需要区分例如枚举变体，还可以使用
    `match`，但保持简单：只匹配一件事，避免使用更复杂的东西如守卫条件：
- en: '[PRE0]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Avoid other constructs for now (such as `if let` or `let`-`else`). While they
    might make the code more readable, you can learn them later and have your IDE
    refactor your code quickly as you become privy to how they work. Within loops,
    avoid `break` and `continue`, especially with values. Rather introduce a new function
    that `return`s the value from within a loop.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在先避免使用其他结构（例如 `if let` 或 `let`-`else`）。尽管它们可能使代码更易读，但您可以稍后学习它们，并在了解它们的工作原理后让您的
    IDE 快速重构代码。在循环中，避免使用 `break` 和 `continue`，特别是与值相关的情况。最好是引入一个新函数，在循环内部返回该值。
- en: As discussed in the introduction, this will take more code and thus exacerbate
    both brevity and readability, but the individual moving parts are far simpler.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如介绍中所讨论的，这将需要更多的代码，因此会加剧代码的简洁性和可读性，但单独的移动部分要简单得多。
- en: The ~~S~~Borrow checker
  id: totrans-split-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ~~借用检查器~~
- en: 'In my talk, I used a classic example that will often come up during search
    algorithms: Extending a collection of items with filtered and modified versions
    of the prior items.'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的演讲中，我使用了一个经典的例子，搜索算法经常会遇到：扩展一组项的集合，使用之前项的过滤和修改版本。
- en: '[PRE1]'
  id: totrans-split-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The code here pretty much mirrors what you’d do in e.g. Python. It’s simple
    to read and understand, and there aren’t any needless moving parts. Unfortunately,
    it is also wrong, and the compiler won’t hesitate to point that out:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的代码几乎与例如 Python 中的操作相同。它易于阅读和理解，没有不必要的移动部分。不幸的是，它也是错误的，编译器会毫不犹豫地指出这一点：
- en: '[PRE2]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Luckily, in almost all of the cases, we can split the immutable from the mutable
    borrows. In this particular case, we can simply iterate over a clone of our item
    list:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在几乎所有情况下，我们可以将不可变借用与可变借用分开。在这种特殊情况下，我们可以简单地遍历我们项列表的克隆：
- en: '[PRE3]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'I used to be very wary of cloning in the past, considering it an antipattern,
    but unless that code is on the hot path, it literally won’t show up on your application’s
    profile. so going to the effort of avoiding that clone is premature optimization.
    However, if you have measured and note that the clone *is* in fact showing up
    either on your memory or CPU profile, you can switch to indexing instead:'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我过去对克隆非常谨慎，认为它是一种反模式，但除非该代码在热路径上，否则它实际上不会在您应用的性能分析中显示出来。因此，避免那个克隆是过早的优化。但是，如果您已经测量并注意到克隆实际上显示在您的内存或
    CPU 分析中，您可以切换到索引：
- en: '[PRE4]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Note that this approach is more brittle than the clone based one: While in
    this case the loop itself only uses integers and thus doesn’t borrow anything,
    we might still inadvertently introduce overlapping borrows into the loop body.
    For example, if we replaced the `if` with `if let`, `items` would be borrowed
    from for the duration of the then-clause, thus causing the exact error we were
    trying to avoid in the first place. Also note that we put `modify(..)` into a
    local to avoid having it within the `push`, which might also possibly trip up
    the borrow checker.'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这种方法比基于克隆的方法更脆弱：虽然在这种情况下，循环本身仅使用整数，因此不会借用任何内容，但我们仍然可能会在循环体中无意中引入重叠借用。例如，如果我们用
    `if let` 替换 `if`，则 `items` 将在 then 子句的持续时间内被借用，从而导致我们试图在第一次避免时遇到的确切错误。还请注意，我们将
    `modify(..)` 放入本地变量以避免将其放在 `push` 内部，这也可能会让借用检查器产生问题。
- en: Again, we’re not generally aiming for performance, so I would prefer the clone-based
    variant as much as possible.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们通常不追求性能，所以我尽可能地偏向基于克隆的变体。
- en: Macros
  id: totrans-split-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 宏
- en: 'Macros come up early in Rust. Literally the first Rust program everyone compiles
    (or even writes) is:'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 宏在 Rust 中早早就出现了。事实上，每个人编译（甚至编写）的第一个 Rust 程序是：
- en: '[PRE5]'
  id: totrans-split-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You’ll have a hard time writing Rust without calling macros, so I would suggest
    you treat them like you’d treat functions, with the caveat that they can have
    a rather variable syntax, but they’ll usually document that. So as long as you
    roughly know how to call the macro and what it does, feel free to call them as
    you like.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您在 Rust 中将很难避免调用宏，所以我建议您将它们视为函数一样对待，但要注意它们可能具有相当可变的语法，但它们通常会有文档说明。因此，只要大致知道如何调用宏以及它们的功能，随时可以自由调用它们。
- en: '*Writing* macros is something we’ll want to avoid. Rust has a number of macro
    types (declarative macros, declarative macros 2.0, derive macros, annotation macros
    and procedural bang-macros), but we’re not going to look into writing any of those.
    All of those macro variants solve a single problem: Code duplication.'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*编写* 宏是我们将要避免的事情。Rust 有许多宏类型（声明宏、声明宏 2.0、派生宏、注解宏和过程宏），但我们不打算编写任何这些宏。所有这些宏变体解决了一个问题：代码重复。'
- en: 'Now the obvious simple solution to avoiding macros is: Duplicate your code.'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，避免宏的明显简单解决方案是：复制您的代码。
- en: 'While that sounds very simple, in fact the advice can be split into a hierarchy
    of solutions that depend on the problem at hand:'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管听起来非常简单，但事实上，建议可以分为依赖于手头问题的一系列解决方案的层次结构：
- en: 'up to 5 times, less than 10 lines of code, not expected to change: In this
    case I’d just copy & paste the code and edit it to fit your requirements. Of course,
    you still have the risk of introducing errors in one of the instances of the copied
    code, but with the resulting code being reasonably compact, you’ll have a good
    chance to catch those quickly.'
  id: totrans-split-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最多五次，少于10行代码，不预计改变：在这种情况下，我会直接复制并粘贴代码，然后根据您的需求进行编辑。当然，您仍然面临将复制的代码中的一个实例引入错误的风险，但由于生成的代码相对紧凑，您有很好的机会快速捕捉到这些错误。
- en: 'more than that, still not expected to change within a certain time: Who is
    better than creating multiple almost-same instances of the same thing than you?
    Your computer of course! So write some Rust code that builds Rust code by building
    strings (using `format!(..)` or `println!(..)`), call it once and copy the output
    into your code. Voilà!'
  id: totrans-split-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多于此数量，但在一定时间内不预计更改：谁比你更擅长创建多个几乎相同的实例？当然是你的计算机！因此，编写一些 Rust 代码来通过构建字符串（使用 `format!(..)`
    或 `println!(..)`）构建 Rust 代码，调用它一次，然后将输出复制到您的代码中。就这样！
- en: expected to be up to date with the rest of the code? In that case, put your
    code generation into a unit test that reads and splits out the current version
    of the code, generates the possibly updated version, compares both and if they
    differ writes the updated version of the code, then panic with a message to tell
    whoever ran the test they need to commit the changes. It is helpful to add start
    and end marker comments to the generated code to make splitting it out easier
    and to document the fact that code is generated.
  id: totrans-split-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 期望与其余代码保持更新？在这种情况下，把你的代码生成放入一个单元测试中，读取和分割当前版本的代码，生成可能更新的版本，比较两者，如果它们不同，则写入更新的代码，然后用一条消息告诉运行测试的人他们需要提交更改。为了使分割更容易，并记录代码是生成的事实，向生成代码添加开始和结束标记注释是有帮助的。
- en: 'In code, instead of doing:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，而不是这样做：
- en: '[PRE6]'
  id: totrans-split-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Either 1\. copy & paste instead:'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 或者 1\. 复制并粘贴：
- en: '[PRE7]'
  id: totrans-split-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Or 2\. write code to generate code:'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 或者 2\. 编写代码来生成代码：
- en: '[PRE8]'
  id: totrans-split-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Additionally, 3\. use a test to keep code updated:'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，3\. 使用测试来保持代码更新：
- en: '[PRE9]'
  id: totrans-split-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Alexey Kladov explains the latter technique better than I could in his blog
    post about [Self-modifying code](https://matklad.github.io/2022/03/26/self-modifying-code.html).
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: Alexey Kladov 在他关于 [自修改代码](https://matklad.github.io/2022/03/26/self-modifying-code.html)
    的博客文章中更好地解释了后一种技术。
- en: Generics
  id: totrans-split-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 泛型
- en: Generics lets us re-use code in various situations by being able to swap out
    types. However, they can also be a great source of complexity, so we’ll of course
    want to avoid them. As Go before version 1.2 has shown, you can get quite far
    without them, so unless it’s for the element type of collections, we’ll want to
    avoid using them.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过泛型，我们可以在各种情况下重用代码，通过能够替换类型。然而，它们也可能是复杂性的主要来源，因此我们当然希望避免它们。正如 Go 在 1.2 版本之前展示的那样，你可以在很大程度上做到这一点，所以除非是用于集合的元素类型，否则我们将避免使用它们。
- en: So instead of writing
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，而不是编写
- en: '[PRE10]'
  id: totrans-split-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'we’d monomorphize by hand (that is build a copy of the code for each set of
    concrete types we need), so for each `A`/`B` combination, we’d write:'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将手动单态化（也就是为我们需要的每组具体类型构建代码的副本），因此对于每个 `A`/`B` 组合，我们将编写：
- en: '[PRE11]'
  id: totrans-split-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Of course, you might end up with a lot of copies, so use the code generation
    from above to deal with that.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可能会遇到很多副本，所以使用上面的代码生成来处理这些副本。
- en: Lifetimes
  id: totrans-split-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生命周期
- en: 'Lifetime annotations are those arcane tick+letter things that sometimes even
    stump intermediate Rust programmers, so you won’t be surprised to find them on
    this list. They look like this:'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 生命周期注解是那些神秘的标记+字母组合，有时甚至会让中级 Rust 程序员感到困惑，所以你不会对在这个列表上找到它们感到惊讶。它们看起来像这样：
- en: '[PRE12]'
  id: totrans-split-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Of course, we don’t want to burden ourselves with those sigil-laden monstrosities
    for now. To get rid of those, we have to avoid borrowing in function signatures.
    So instead of taking a reference, take an owned instance. And yes, this will incur
    more cloning yet. If you need to share an object (e.g. because you want to mutate
    it), wrap it in an `Arc`:'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们现在不想为自己背负这些带有符号的怪物。要摆脱这些东西，我们必须避免在函数签名中借用。因此，不要取一个引用，而是取一个拥有的实例。是的，这会导致更多的克隆。如果你需要共享一个对象（例如因为你想要改变它），把它包装在一个
    `Arc` 中：
- en: '[PRE13]'
  id: totrans-split-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`Arc` is a smart pointer that lets you `.clone()` without cloning the wrapped
    value. Both `Arc`s will lead to the exact same value, and if you mutate one, the
    other will also have changed.'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`Arc` 是一个智能指针，让你可以不克隆包装的值就调用 `.clone()`。两个 `Arc` 将指向完全相同的值，如果你改变一个，另一个也会改变。'
- en: Traits
  id: totrans-split-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特性
- en: You can get a lot done without ever implementing a trait in Rust. However, there
    are some traits (especially in the standard library, but also in trait-heavy crates
    like [serde](https://serde.rs)) that you might need to get some stuff done. In
    many cases, you can use a `#[derive(..)]`-annotation, such as
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Rust 中，你可以完成很多工作，而不必实现一个 trait。然而，在某些 trait （尤其是在标准库中，也在像 [serde](https://serde.rs)
    这样 trait-heavy 的 crate 中）中，你可能需要完成一些任务。在许多情况下，你可以使用 `#[derive(..)]` 注解，比如：
- en: '[PRE14]'
  id: totrans-split-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In some cases, Rust lore would tell you to use trait based dispatch, but in
    most of those cases, an `enum` and a `match` or even a bag of `if`-clauses will
    do the trick. Remember, we’re not attempting to have our code win a beauty contest,
    just get the job done.
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，Rust 的传统可能会建议你使用基于 trait 的分发，但在大多数情况下，一个 `enum` 和一个 `match` 或者一组 `if`-clauses
    就能解决问题。记住，我们并不打算让我们的代码参加美丽大赛，只是想完成工作而已。
- en: Finally, if you use a framework that requires you to manually implement a trait,
    write `impl WhateverTrait for SomeType` and use the `insert missing members` code
    action from your IDE if available.
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你使用一个需要手动实现 trait 的框架，请写 `impl WhateverTrait for SomeType`，并在你的 IDE 中使用
    `insert missing members` 代码操作（如果可用）。
- en: Modules and Imports
  id: totrans-split-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块和导入
- en: This is something we cannot completely avoid. If we don’t use any imports, our
    code can only use what’s defined in the standard library prelude, and we won’t
    get very far with that. Also even if we did, we’d end up with a 10+k lines of
    code file, and no one wants to navigate that. On the other hand, when using modules,
    we should strive to not go overboard, lest we find ourselves in a maze of twisty
    little `mod.rs` files, all different (pardon the text adventure reference).
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们无法完全避免的事情。如果我们不使用任何导入，我们的代码只能使用标准库预导入定义的内容，而我们不能做很多事情。即使我们这样做了，我们也会得到一个10+k行代码的文件，没有人想要导航到那里。另一方面，当使用模块时，我们应该努力避免过度使用，以免发现自己身处一个迷宫般的`mod.rs`文件中，所有文件都不同（原谅我这个文字冒险的引用）。
- en: 'So we obviously need to import stuff we `use`, but how do we introduce `mod`s?
    The key to keeping this simple is the observation that mods conflate code organization
    with the hierarchy of paths in our crate. So if I have a `mod foo` containing
    a `bar`, people using my code will have to either import or directly specify `foo::bar`.
    But there are two recipes we can follow to untangle those. Given an example `lib.rs`
    where our code has two functions:'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们显然需要导入我们使用的东西，但是如何引入`mod`呢？保持简单的关键在于，模块将代码组织与我们的 crate 中路径的层次结构混为一谈。因此，如果我有一个包含`bar`的`mod
    foo`，那么使用我的代码的人将不得不导入或直接指定`foo::bar`。但是有两种方法可以解开这些混乱的方法。给出一个示例`lib.rs`，我们的代码有两个函数：
- en: '[PRE15]'
  id: totrans-split-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now in practice, those functions likely won’t be empty, and in most cases we’ll
    have more than two of them, but you want to read this blog post, not wade through
    screens of code, so let’s look at the first recipe we will use to move `b` to
    a new `b.rs` file without changing the path where `b` is visible from the outside.
    The recipe has three steps:'
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在实践中，这些函数可能不会是空的，在大多数情况下我们会有更多的函数，但是你想要阅读这篇博客文章，而不是在大量代码中浏览，所以让我们看看我们将用来将`b`移动到新的`b.rs`文件的第一个方法，而不改变外部可见的`b`路径。这个方法有三个步骤：
- en: 'Declare the `b` module in `lib.rs` and `pub use` `b` from it:'
  id: totrans-split-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`lib.rs`中声明`b`模块并从中`pub use` `b`：
- en: '[PRE16]'
  id: totrans-split-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create `b.rs`, non-publicly importing everything from above, so that `fn b()`
    won’t fail to compile because of missing paths from `lib.rs`:'
  id: totrans-split-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`b.rs`，从上面导入所有内容，这样`fn b()`就不会因为来自`lib.rs`的路径丢失而无法编译：
- en: 'Move `fn b()` into `b.rs`:'
  id: totrans-split-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`fn b()`移动到`b.rs`：
- en: '[PRE17]'
  id: totrans-split-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Congratulations, you just split your code without anyone using it being the
    wiser.
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，你刚刚将你的代码拆分开来，而没有任何人使用它时会觉得愚蠢。
- en: 'The second recipe is to move the `b` path into the `b` module. In this case,
    we have to make the `b` module publicly visible and then remove the `pub use`
    from our `lib.rs`:'
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是将`b`路径移动到`b`模块中。在这种情况下，我们必须使`b`模块对外可见，然后从我们的`lib.rs`中移除`pub use`：
- en: '[PRE18]'
  id: totrans-split-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Voilà, your users won’t be able to call `b()` directly anymore unless they import
    it from `b::b`. Now modules are still a messy beast, but at least there are easy
    steps to take to deal with them.
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，你的用户将无法直接调用`b()`了，除非他们从`b::b`导入它。现在模块仍然是一个混乱的野兽，但至少有简单的步骤可以解决它们。
- en: Async
  id: totrans-split-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 异步
- en: Rust async is arcane, powerful and still has a good number of rough edges. So
    unless you’re writing a web service that needs to serve more than fifty thousand
    concurrent users on a single machine, try to avoid it (remember, we’re not after
    performance here). However, some libraries you may want to use *will* require
    async code. In this case, pick an async runtime (most libraries will work with
    [tokio](https://docs.rs/tokio), so that seems a safe choice) and
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 的异步是神秘的、强大的，但仍然存在许多棘手的问题。因此，除非你正在编写一个需要在单台机器上为五万个并发用户提供服务的网络服务（记住，我们这里不是为了性能），否则尽量避免使用它。然而，你可能想要使用的一些库*将*需要异步代码。在这种情况下，选择一个异步运行时（大多数库都可以与[tokio](https://docs.rs/tokio)一起使用，所以这似乎是一个安全的选择）并且
- en: write your functions as you would write a normal function, prepending `async`
    before the `fn`
  id: totrans-split-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写函数时，像写普通函数一样，在`fn`之前加上`async`
- en: add `.await` after every function call, and then remove it again wherever the
    compiler complains
  id: totrans-split-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每个函数调用后添加`.await`，然后在编译器抱怨的地方再次删除它
- en: avoid potentially locking mechanisms such as `Mutex`, `RwLock`, and channels.
    If you absolutely must use one of them, your async runtime will provide replacements
    that won’t deadlock on you
  id: totrans-split-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用像`Mutex`、`RwLock`和通道这样的潜在锁机制。如果你确实需要使用它们之一，你的异步运行时将提供替代方案，这些方案不会让你陷入死锁。
- en: You might still run into weird errors. Don’t say I didn’t warn you.
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能仍然会遇到奇怪的错误。不要说我没有警告过你。
- en: Data Structures
  id: totrans-split-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据结构
- en: 'If I had a penny for each internet troll asking me to write a doubly-linked
    list in safe Rust (hint: I can, but I don’t need to, there’s one in the standard
    library), I’d be a very well-off man. So you won’t be surprised to read me suggesting
    you avoid writing your own data structures. In fact I’ll go one step further and
    allow you to put off learning what data structures are already provided, because
    you can get by with only two in the majority of cases: Sequence-like and Lookup-like.'
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我每次有人要求我在安全的Rust中编写双向链表，我就能得到一分钱（提示：我可以，但我不需要，在标准库中已经有了一个），那我会成为一个非常富有的人。所以你不会惊讶于我建议你避免编写自己的数据结构。事实上，我会更进一步，让你推迟学习已提供的数据结构是什么，因为在大多数情况下，你只需要两种：类似序列和类似查找。
- en: Sequences
  id: totrans-split-119
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 序列
- en: 'Whether you call them lists, or arrays, or sequences is of little import. This
    type of structure is usually there to be filled and later iterated over. For example,
    if we want to have three items:'
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你把它们称为列表、数组还是序列都无关紧要。这种类型的结构通常用于填充和后续迭代。例如，如果我们想要三个项目：
- en: start
  id: totrans-split-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始
- en: more
  id: totrans-split-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更多
- en: end
  id: totrans-split-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结束
- en: 'we can put them in a `Vec`:'
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以把它们放在 `Vec` 中：
- en: '[PRE19]'
  id: totrans-split-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Use `Vec`s everywhere you want to sequentially iterate items.
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何需要顺序迭代项目的地方使用 `Vec`。
- en: Lookups
  id: totrans-split-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 查找
- en: Those may be called maps, or dictionaries, and allow you to associate a key
    with a value, to later retrieve the value given the key.
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
  zh: 可能称为映射或字典，并允许你将键与值关联起来，以便稍后根据键检索值。
- en: '| **KEY** | **VALUE** |'
  id: totrans-split-129
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **值** |'
- en: '| --- | --- |'
  id: totrans-split-130
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| recursion | please look at “recursion” |'
  id: totrans-split-131
  prefs: []
  type: TYPE_TB
  zh: '| 递归 | 请查看“递归” |'
- en: 'we will use `HashMap`s for this case:'
  id: totrans-split-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在此案例中使用 `HashMap`：
- en: '[PRE20]'
  id: totrans-split-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: While hashmaps can be iterated, the main use case is to get a value given a
    key.
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然哈希映射可以进行迭代，但主要用途是根据键获取值。
- en: You will be surprised how many programs you can create by just sticking to those
    two structures.
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你会惊讶地发现，只要坚持使用这两种结构，你可以创建多少程序。
- en: Custom Iterators
  id: totrans-split-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义迭代器
- en: 'Rust iterators are also very powerful, and being able to call their combinator
    functions (like `filter`, `map` etc.) you can create new iterators. There are
    only two points to be mindful of: First, the combinator functions *won’t* iterate
    anything, they will just wrap the given iterator into a new iterator type that
    will modify the iterator’s behavior, and second, the resulting types are usually
    very hard if not impossible to write out. So you should try avoiding returning
    such a custom iterator from a function, instead `collect`ing into a `Vec` or `HashMap`
    (see above). If however your iterator is infinite (yes, that can happen), you
    obviously cannot collect it. In those rare cases, here’s the magic trick to make
    it work:'
  id: totrans-split-137
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 迭代器也非常强大，可以调用它们的组合函数（如 `filter`、`map` 等）来创建新的迭代器。只需注意两点：首先，组合函数 *不会* 迭代任何内容，它们只会将给定的迭代器包装成一个新的迭代器类型，修改迭代器的行为；其次，生成的类型通常非常难以，甚至不可能写出。因此，你应该尽量避免从函数返回这样的自定义迭代器，而是将其
    `collect` 到 `Vec` 或 `HashMap` 中（见上文）。然而，如果你的迭代器是无限的（是的，这种情况确实会发生），那么你显然无法将其收集起来。在这些罕见的情况下，这是使其工作的魔法技巧：
- en: '[PRE21]'
  id: totrans-split-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: So now you know what things you can put off learning while you’re being productive
    in Rust. Have fun!
  id: totrans-split-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道在你在 Rust 中保持高效生产的同时可以推迟学习哪些事情。玩得开心！
