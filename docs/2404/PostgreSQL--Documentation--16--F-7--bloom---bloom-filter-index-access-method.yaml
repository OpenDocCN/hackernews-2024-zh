- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:28:02'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:28:02'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'PostgreSQL: Documentation: 16: F.7. bloom — bloom filter index access method'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PostgreSQL：文档：16：F.7. bloom — 布隆过滤器索引访问方法
- en: 来源：[https://www.postgresql.org/docs/current/bloom.html](https://www.postgresql.org/docs/current/bloom.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.postgresql.org/docs/current/bloom.html](https://www.postgresql.org/docs/current/bloom.html)
- en: A Bloom filter is a space-efficient data structure that is used to test whether
    an element is a member of a set. In the case of an index access method, it allows
    fast exclusion of non-matching tuples via signatures whose size is determined
    at index creation.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 布隆过滤器是一种空间高效的数据结构，用于测试元素是否属于集合的成员。在索引访问方法的情况下，它通过签名快速排除非匹配元组，签名的大小在索引创建时确定。
- en: A signature is a lossy representation of the indexed attribute(s), and as such
    is prone to reporting false positives; that is, it may be reported that an element
    is in the set, when it is not. So index search results must always be rechecked
    using the actual attribute values from the heap entry. Larger signatures reduce
    the odds of a false positive and thus reduce the number of useless heap visits,
    but of course also make the index larger and hence slower to scan.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 签名是索引属性的有损表示，因此容易报告假阳性；即当不在集合中时，可能会报告某个元素在集合中。因此，必须始终使用堆条目的实际属性值重新检查索引搜索结果。较大的签名降低假阳性的可能性，从而减少无用的堆访问次数，但这当然也会使索引更大，因此扫描速度更慢。
- en: This type of index is most useful when a table has many attributes and queries
    test arbitrary combinations of them. A traditional btree index is faster than
    a bloom index, but it can require many btree indexes to support all possible queries
    where one needs only a single bloom index. Note however that bloom indexes only
    support equality queries, whereas btree indexes can also perform inequality and
    range searches.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当表具有许多属性且查询测试它们的任意组合时，这种类型的索引最有用。传统的 btree 索引比布隆索引更快，但是为了支持所有可能的查询，可能需要多个 btree
    索引，而只需要一个布隆索引。然而请注意，布隆索引仅支持等式查询，而 btree 索引还可以执行不等式和范围搜索。
- en: 'This is an example of creating a bloom index:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建布隆索引的示例：
- en: '[PRE0]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The index is created with a signature length of 80 bits, with attributes i1
    and i2 mapped to 2 bits, and attribute i3 mapped to 4 bits. We could have omitted
    the `length`, `col1`, and `col2` specifications since those have the default values.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 索引使用签名长度为80位，属性 i1 和 i2 映射到2位，属性 i3 映射到4位。我们本可以省略`length`、`col1`和`col2`的规范，因为它们具有默认值。
- en: Here is a more complete example of bloom index definition and usage, as well
    as a comparison with equivalent btree indexes. The bloom index is considerably
    smaller than the btree index, and can perform better.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个更完整的布隆索引定义和使用示例，以及与等效的 btree 索引的比较。布隆索引比 btree 索引要小得多，并且性能更好。
- en: '[PRE1]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A sequential scan over this large table takes a long time:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个大表上的顺序扫描需要很长时间：
- en: '[PRE2]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Even with the btree index defined the result will still be a sequential scan:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 即使定义了 btree 索引，结果仍然是顺序扫描：
- en: '[PRE3]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Having the bloom index defined on the table is better than btree in handling
    this type of search:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在表上定义布隆索引比 btree 更好地处理这种类型的搜索：
- en: '[PRE4]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, the main problem with the btree search is that btree is inefficient when
    the search conditions do not constrain the leading index column(s). A better strategy
    for btree is to create a separate index on each column. Then the planner will
    choose something like this:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，btree 搜索的主要问题是，当搜索条件不限制前导索引列时，btree 效率低下。对 btree 的更好策略是在每列上创建单独的索引。然后计划程序将选择类似于这样的内容：
- en: '[PRE5]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Although this query runs much faster than with either of the single indexes,
    we pay a penalty in index size. Each of the single-column btree indexes occupies
    2 MB, so the total space needed is 12 MB, eight times the space used by the bloom
    index.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个查询运行速度比任何单个索引都要快得多，但我们在索引大小上付出了代价。每个单列 btree 索引占用2 MB，因此所需的总空间为12 MB，比布隆索引的空间大8倍。
