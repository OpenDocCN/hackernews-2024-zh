- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:35:51'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:35:51
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Direct-style Effects Explained
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接风格效果解释
- en: 来源：[https://www.inner-product.com/posts/direct-style-effects/](https://www.inner-product.com/posts/direct-style-effects/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.inner-product.com/posts/direct-style-effects/](https://www.inner-product.com/posts/direct-style-effects/)
- en: Direct-style effects, also known as algebraic effects and effect handlers, are
    the next big thing in programming languages. They are already available in [Unison](https://www.unison-lang.org/docs/fundamentals/abilities/)
    and [OCaml](https://github.com/ocaml-multicore/ocaml-effects-tutorial), are coming
    to [Scala](https://www.youtube.com/watch?v=0Fm0y4K4YO8), and I’m seeing discussion
    about them in other [closely-related-to-industry contexts](https://without.boats/blog/coroutines-and-effects/).
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 直接风格效果，也称为代数效果和效果处理程序，是编程语言中的下一个大事件。它们已经在[Unison](https://www.unison-lang.org/docs/fundamentals/abilities/)和[OCaml](https://github.com/ocaml-multicore/ocaml-effects-tutorial)中可用，即将进入[Scala](https://www.youtube.com/watch?v=0Fm0y4K4YO8)，我在其他[与行业密切相关的背景](https://without.boats/blog/coroutines-and-effects/)中也看到了关于它们的讨论。
- en: 'The goal is very simple: to allow us to write code in a natural style without
    monads, but still get the benefits of reasoning and composition that monads bring.
    At the same time I see [some](https://twitter.com/debasishg/status/1780636969841914279)
    [confusion](https://twitter.com/channingwalton/status/1780517826505166989) about
    direct-style effects. In this post I want to address this confusion by explaining
    the what, the why, and the how of direct-style effects using a Scala 3 implementation
    as an example.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 目标非常简单：允许我们以自然的方式编写代码，而无需单子，但仍能享受单子带来的推理和组合的好处。同时，我看到关于直接风格效果的[一些](https://twitter.com/debasishg/status/1780636969841914279)
    [混乱](https://twitter.com/channingwalton/status/1780517826505166989)。在本文中，我希望通过解释直接风格效果的何时、为何以及如何，以Scala
    3实现为例，解决这种混乱。
- en: There is quite a bit going on here. First we’ll talk about the problem we’re
    trying to solve and the constraints we’re operating under. Then we’ll look at
    a simple implementation in Scala 3 and describe the language feature, contextual
    functions, that enables it. Next up we’ll see some shortcomings of this implementation
    and see how they can solved by two language features, one well known (delimited
    continuations) and one in development (type system innovations). Finally I’ll
    give some pointers to more about information on this topic.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多事情要讲述。首先，我们将讨论我们试图解决的问题以及我们所操作的约束条件。然后，我们将看看在Scala 3中的简单实现，并描述语言特性——上下文函数，它使其能够实现。接下来，我们将看到此实现的一些不足之处，并了解如何通过两种语言特性来解决这些问题，一种是众所周知的（限定延续），另一种正在开发中的（类型系统创新）。最后，我将提供有关此主题的更多信息的一些指引。
- en: What We Care About
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们关心什么
- en: When we argue for one programming style over alternatives we are making a value
    judgement about programming. It is helpful to be explicit about what those values
    are. As I’ve written [elsewhere](https://noelwelsh.com/posts/what-and-why-fp/),
    I believe the core values of functional programming are **reasoning** and **composition**.
    Side effects stop us achieving both of these, but every useful program must interact
    with the world in some way. (If you’re uncertain what is meant by a side effect,
    [this chapter of Creative Scala](https://www.creativescala.org/creative-scala/substitution/index.html)
    goes into detail.) Therefore, replacing side effects with something in keeping
    with these core principles is considered an important problem in functional programming.
    Solutions to this problem are called **effect systems**.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们为一种编程风格辩论而不是其他选择时，我们对编程进行价值判断是有帮助的。明确表达这些价值是很有帮助的。正如我在[其他地方](https://noelwelsh.com/posts/what-and-why-fp/)所写的，我认为函数式编程的核心价值是**推理**和**组合**。副作用阻止我们实现这两者，但每个有用的程序必须以某种方式与世界互动。（如果您不确定副作用是什么，请参阅[Creative
    Scala的这一章节](https://www.creativescala.org/creative-scala/substitution/index.html)进行详细了解。）因此，用符合这些核心原则的东西替换副作用被视为函数式编程中的重要问题。解决此问题的解决方案称为**效果系统**。
- en: 'Nota bene: in this post I use the term *side effect* for uncontrolled effects,
    and just *effect* for effects that are controlled in a more desirable way.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意：在本文中，我使用术语*副作用*表示不受控制的效果，仅使用*效果*表示以更可控的方式控制的效果。
- en: Monads are the most common effect system in modern functional programming, but
    this doesn’t mean they are the only approach. Older versions of Haskell used streams.
    The [Clean](https://wiki.clean.cs.ru.nl/Language_features) language uses uniqueness
    types, which are very closely related to the affine types seen in Rust’s borrow
    checker. Most current research work focuses on what are called **algebraic effects**
    and **effect handlers**. It’s this kind of approach we will be exploring, though
    we have some background to get through first.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 单子是现代函数式编程中最常见的效果系统，但这并不意味着它们是唯一的方法。Haskell的早期版本使用流。[Clean](https://wiki.clean.cs.ru.nl/Language_features)语言使用独特类型，与Rust的借用检查器中看到的仿射类型非常相关。当前大多数研究工作集中在所谓的**代数效果**和**效果处理程序**的方法上。正是这种方法我们将要探索，尽管我们需要先了解一些背景。
- en: Now we known why effect systems are interesting, let’s look at some of the design
    choices in effect systems.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道为什么效果系统很有趣，让我们看看效果系统中一些设计选择。
- en: The Design Space of Effect Systems
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 效果系统的设计空间
- en: Reasoning and composition are non-negotiable criteria for any effect system.
    There are other criteria that are desirable, however. Here we will look at the
    style in which code is written, the separation between description and action,
    and some of the nuances in how effect systems can help us reason about and compose
    effectful code.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 推理和组合对于任何效果系统都是不可协商的标准。但是还有其他一些希望具备的标准。在这里，我们将看看代码编写的风格，描述与动作之间的分离，以及效果系统如何帮助我们推理和组合有副作用的代码的一些微妙之处。
- en: Direct and Monadic Style
  id: totrans-split-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接和单子风格
- en: The style of code that we have to write to use the effect system is a major
    determinant of how usable the system is. If an effect system requires too much
    work from the programmer it is unusable in practice, no matter what other properties
    it has. Here we will look at **direct style**, which is code as we want to write
    it, and **monadic style**, which is code as monadic effect systems force us to
    write it.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须编写的代码风格决定了使用效果系统的可用性。如果一个效果系统要求程序员付出过多努力，那么它在实践中是无法使用的，无论它具有什么其他属性。在这里，我们将看看**直接风格**，这是我们想要编写的代码，以及**单子风格**，这是单子效果系统迫使我们编写的代码。
- en: Direct style code is code as it is usually written. You call functions, they
    return results, and you use those results in further computations. Here’s the
    kind of code we write in direct style.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 直接风格的代码就是通常编写的代码。您调用函数，它们返回结果，然后您将这些结果用于进一步的计算。这是我们在直接风格中编写的代码示例。
- en: '[PRE0]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We don’t need to say much about direct style, other than that it is desirable
    to write in this style.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对直接风格不必多言，只要说写作风格具有可取性即可。
- en: As most Scala programmers will have experienced, we must write code in a different
    style if we are to use monads. In monadic style the code above ends up looking
    something like
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如大多数Scala程序员将经历的那样，如果我们要使用单子，我们必须以不同的风格编写代码。在单子风格中，上述代码最终看起来像是这样：
- en: '[PRE1]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is considered annoying enough that languages that support monads usually
    provide special syntax for them. In Scala we can write
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这被认为是足够恼人的，以至于支持单子的语言通常为它们提供特殊的语法。在Scala中，我们可以这样写：
- en: '[PRE2]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This isn’t too bad. Lots of developers have written code like this. However,
    it’s still a different style of coding that has been learned, and hence a barrier
    to entry. It’s also a whole program transform. Once one part of our code start
    using monads, it is usually the case that all of our code has to be transformed
    to monadic style. So ideally an alternative effect system would allow us to continue
    to write in direct style.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不算太糟糕。许多开发人员已经编写过这样的代码。然而，这仍然是一种不同的编码风格，需要学习，因此是一个入门障碍。这也是一个整体程序的转换。一旦我们的代码的一部分开始使用单子，通常情况下所有代码都必须转换为单子风格。因此，理想情况下，另一种效果系统应该允许我们继续以直接风格编写代码。
- en: Description and Action
  id: totrans-split-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述与动作
- en: 'Any effect system must have a separation between describing the effects that
    should occur, and actually carrying out those effects. This is a requirement of
    composition. Consider perhaps the simplest effect in any programming language:
    printing to the console. In Scala we can accomplish this as a side effect with
    `println`:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 任何效果系统必须在描述应该发生的效果与实际执行这些效果之间有所区分。这是组合的要求。考虑任何编程语言中可能最简单的效果：向控制台打印输出。在Scala中，我们可以通过`println`来作为副作用实现这一点：
- en: '[PRE3]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Imagine we want to compose the effect of printing to the console with the effect
    that changes the color of the text on the console. With the `println` side effect
    we cannot do this. Once we call `println` the output is already printed; there
    is no opportunity to change the color.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下我们想要将在控制台上打印文本的效果与改变文本颜色的效果组合起来。使用`println`的副作用我们做不到这一点。一旦调用了`println`，输出就已经打印出来了；没有机会改变颜色。
- en: Let me be clear that the goal is *composition*. We can certainly use two side
    effects that happen to occur in the correct order to get the output with the color
    we want.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我清楚地表明目标是*组合*。我们当然可以使用两个恰好按正确顺序发生的副作用来获得所需颜色的输出。
- en: '[PRE4]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'However this is not the same thing as composing an effect that combines these
    two effects. For example, the example above doesn’t reset the foreground color
    so all subsequent output will be bright red. This is the classic problem of side
    effects: they have “action at a distance” meaning one part of the program can
    change the meaning of another part of the program. This in turns means we cannot
    reason locally, nor can we build programs in a compositional way.'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这与组合这两种效果的效果不同。例如，上面的示例不会重置前景色，因此所有后续输出都将是亮红色。这是副作用的经典问题：它们具有“远距离作用”，这意味着程序的一部分可以改变程序的另一部分的含义。这反过来意味着我们不能局部推理，也不能以组合的方式构建程序。
- en: What we really want is to write code like
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真正想要的是像下面这样编写代码
- en: '[PRE5]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: which limits the foreground colour to just the given text. We can only do if
    we have a separation between describing the effect, as we have done above, and
    actually running it.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将仅限于给定文本的前景色。只有当我们在描述效果时与实际运行效果有所分离时才能做到这一点，正如我们上面所做的。
- en: Reasoning and Composing with Effects
  id: totrans-split-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过效果推理和组合
- en: 'Effect systems should help us reason about what code does. Take for example,
    the following method signature:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 效果系统应该帮助我们推断代码的行为。例如，考虑以下方法签名：
- en: '[PRE6]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What happens when we call this method? Returning `Unit` suggests it has some
    side-effect, but what is that side-effect? It could print to the console, raise
    an exception, or wake a Great Old One to destroy the Earth. We cannot tell.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用这个方法时会发生什么？返回`Unit`表明它具有某种副作用，但这种副作用是什么？它可能会打印到控制台，引发异常，或者唤醒一个古老的神来摧毁地球。我们无法确定。
- en: Using the `IO` monad is similar. If we instead see the method signature
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`IO`单子是类似的。如果我们看到的是方法签名
- en: '[PRE7]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: we again don’t know what effects will occur but we do have some way to manipulate
    those effects. We can attempt to cancel the effects, for example, by writing
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次不知道会发生什么效果，但我们确实有一些方法来操作这些效果。例如，我们可以尝试通过编写
- en: '[PRE8]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: or instead recover from errors using `handleError`.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用`handleError`从错误中恢复。
- en: It’s important to note that we can do this manipulation of effects in a composable
    way. For instance, we can pass the `IO` to some other method that chooses how
    to manipulate it.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是我们可以以可组合的方式操作这些效果。例如，我们可以将`IO`传递给另一个方法，该方法选择如何操作它。
- en: '[PRE9]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We cannot do this in the first case that uses side-effects.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能在使用副作用的第一种情况下做到这一点。
- en: Before we get into effect systems, there another issue I want to quickly deal
    with, which is composition of effects. One criticism of `IO` is that it lumps
    all effects into one type. We might want to be more precise, and say, for example,
    *this* method requires logging and database access, while *that* method reads
    from the keyboard and prints to the screen. Monad transformers are one way to
    achieve this, but they are difficult to use. A more common alternative is tagless
    final. The method signature
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入效果系统之前，还有另一个问题我想快速处理一下，那就是效果的组合。对`IO`的一个批评是它将所有效果都归为一种类型。我们可能希望更加精确地表达，比如*这个*方法需要记录日志和访问数据库，而*那个*方法从键盘读取并打印到屏幕上。单子变换器是实现这一点的一种方法，但它们很难使用。一个更常见的替代方法是标签终极。这个方法的签名
- en: '[PRE10]'
  id: totrans-split-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: indicates this method requires a `WakeGreatOldOne` effect, which we might use
    to decide to not call the method. Tagless final is also inconvenient, but not
    so inconvenient to stop it becoming relatively common in the Scala world.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 表示这个方法需要一个`WakeGreatOldOne`效果，我们可以用它来决定是否调用该方法。标签终极同样不方便，但不至于使其在Scala世界中变得相对常见。
- en: Direct-style Effect Systems in Scala 3
  id: totrans-split-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Scala 3中的直接式效果系统
- en: Let’s now implement a direct-style effect system in Scala 3\. This requires
    some machinery that is new in Scala 3\. Since that’s probably unfamiliar to many
    readers we’re going to start with an example, explain the programming techniques
    behind it, and then explain the concepts it embodies.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在 Scala 3 中实现一个直接式效果系统。这需要一些在 Scala 3 中新引入的机制。由于这对许多读者可能是不熟悉的，我们将从一个例子开始，解释它背后的编程技术，然后解释它所体现的概念。
- en: Our example is a simple effect system for printing to the console. The implementation
    is below. You can save this in a file (called, say, `Print.scala`) and run it
    with `scala-cli` with the command `scala-cli Print.scala`.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例是一个简单的向控制台打印效果系统。实现如下。你可以将其保存到一个文件中（比如，称为`Print.scala`），然后用`scala-cli`运行它，命令为`scala-cli
    Print.scala`。
- en: '[PRE11]'
  id: totrans-split-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A `Print[A]` is a description: a program that when run may print to the console
    and also compute a value of type `A`. It is implemented as a [context function](https://docs.scala-lang.org/scala3/reference/contextual/context-functions.html).
    You can think of a context function as a normal function with `given` (implicit)
    parameters. In our case a `Print[A]` is a context function with a `Console` given
    parameter. (`Console` is a type in the Scala standard library.)'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Print[A]` 是一个描述：一个程序，当运行时可能会向控制台打印，并计算一个类型为 `A` 的值。它被实现为一个[上下文函数](https://docs.scala-lang.org/scala3/reference/contextual/context-functions.html)。你可以将上下文函数视为带有
    `given`（隐式）参数的普通函数。在我们的情况下，`Print[A]` 是一个带有 `Console` 给定参数的上下文函数。（`Console` 是
    Scala 标准库中的一种类型。）'
- en: 'Context function types have a special rule that makes constructing them easier:
    a normal expression will be converted to an expression that produces a context
    function if the type of the expression is a context function. Let’s unpack that
    by seeing how it works in practice. In the example above we have the line'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文函数类型有一个特殊规则，使得它们的构造更加简单：如果表达式的类型是上下文函数类型，则普通表达式将被转换为产生上下文函数的表达式。让我们通过实际操作来理解这一点。在上面的例子中，我们有以下这行：
- en: '[PRE12]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`Print.println` is an expression with type `Unit`, not a context function type.
    However `Print[Unit]` is a context function type. This type annotation causes
    `Print.println` to be converted to a context function type. You can check this
    yourself by removing the type annotation:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`Print.println` 是一个类型为`Unit`的表达式，而不是上下文函数类型。但是 `Print[Unit]` 是一个上下文函数类型。这个类型标注会导致
    `Print.println` 被转换为上下文函数类型。你可以通过移除类型标注来自行验证：'
- en: '[PRE13]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will not compile.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将无法编译。
- en: We use the same trick with `Print.apply`, which is a general purpose constructor.
    You can call `apply` with any expression and it will be converted to a context
    function. (As far as I know it is not essential to use `inline`, but all the examples
    I learned from do this so I do it as well. I assume it is an optimization.)
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了与 `Print.apply` 相同的技巧，它是一个通用的构造函数。你可以用任何表达式调用 `apply`，它将被转换为上下文函数。 （据我所知，使用
    `inline` 并非必须，但我从学习的所有例子中都这样做了，因此我也这样做。我假设这是一种优化。）
- en: 'Running a `Print[A]` uses another bit of special sauce: if there is given value
    of the correct type in scope of a context function, that given value will be automatically
    applied to the function. This is also what makes direct-style composition, an
    example of which is shown below, work. The calls to `Print.print` are in a context
    where a `Console` is available, and so will be evaluated once the surrounding
    context function is run.'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `Print[A]` 使用了另一种特殊机制：如果在上下文函数的作用域中存在正确类型的给定值，则该给定值将自动应用于函数。这也是直接式组合的实现方式的一部分，下面显示了一个示例。调用
    `Print.print` 是在一个 `Console` 可用的上下文中，因此将在周围的上下文函数运行一次。
- en: '[PRE14]'
  id: totrans-split-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'That’s the mechanics of how direct-style effect systems work in Scala: it all
    comes down to context functions.'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是直接式效果系统在 Scala 中如何工作的机制：它归结为上下文函数。
- en: 'Notice what we have in these examples: we write code in the natural direct
    style, but we still have an informative type, `Print[A]`, that helps us reason
    about effects and we can compose together values of type `Print[A]`.'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们在这些示例中的内容：我们以自然的直接式编写代码，但我们仍然有一个信息丰富的类型 `Print[A]`，它帮助我们推理效果，并且我们可以组合类型为
    `Print[A]` 的值。
- en: I’m going to deal with composition of different effects and more in just a bit.
    First though, I want describe the concepts behind what we’ve done.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我稍后将处理不同效果的组合等更多内容。不过首先，我想描述我们所做的背后的概念。
- en: 'Notice in direct-style effects we split effects into two parts: context functions
    that define the effects we need, and the actual implementation of those effects.
    In the literature these are called algebraic effects and effect handlers respectively.
    This is an important difference from `IO`, where the same type indicates the need
    for effects and provides the implementation of those effects.'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在直接样式效果中，我们将效果分为两部分：定义我们需要的效果的上下文函数，以及这些效果的实际实现。在文献中，这些分别称为代数效果和效果处理程序，这与`IO`有一个重要的区别，后者同一类型既指示了效果的需求又提供了这些效果的实现。
- en: Also notice that we use the argument type of context functions to indicate the
    effects we need, rather the result type as in monadic effects. This difference
    avoids the [“colored function”](https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/)
    problem with monads. We can think of the arguments as specifying requirements
    on the environment or context in which the context functions, hence the name.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，我们使用上下文函数的参数类型来指示我们需要的效果，而不是像单子效果中那样使用结果类型。这种差异避免了单子中的“有色函数”问题。我们可以将参数视为指定上下文函数所需环境或上下文的要求，因此得名。
- en: Now let’s look at composition of effects, and effects that modify control flow.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看效果的组合，以及修改控制流的效果。
- en: Composition of Direct-Style Effects
  id: totrans-split-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接样式效果的组合
- en: 'Direct-style effects compose in a straightforward way: we just add additional
    parameters to our context function. Here’s a simple example that defines another
    effect, `Sample`, for producing random values, and then builds a program that
    requires both `Print` and `Sample`.'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 直接样式效果以直接方式组合：我们只需将额外参数添加到我们的上下文函数中。这里有一个简单的例子，定义了另一个效果，`Sample`，用于生成随机值，然后构建了一个需要同时使用`Print`和`Sample`的程序。
- en: First we define the effect, using the same pattern as before.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用与之前相同的模式定义效果。
- en: '[PRE15]'
  id: totrans-split-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now we can use both `Print` and `Sample`.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以同时使用`Print`和`Sample`。
- en: '[PRE16]'
  id: totrans-split-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Effects That Change Control Flow
  id: totrans-split-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变控制流的效果
- en: So far, the effects we’ve looked at have very simple control flow. In fact they
    don’t alter the control flow at all. Many interesting effects, such as error handling
    and concurrency, require manipulation of the program’s control flow. How do we
    handle this in our model?
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所看到的效果控制流非常简单。实际上，它们根本不改变控制流。许多有趣的效果，如错误处理和并发，需要操作程序的控制流。我们在模型中如何处理这些？
- en: 'We need a slight extension to accomodate this: when the user program calls
    an effect handler method, the effect handler is passed not just that method’s
    arguments but also also a **continuation** that it can resume when the effect
    is complete. What’s a continuation? It represents the “rest of the program”: a
    value that can be invoked to continue execution from the point that called the
    effect handler. Cooperative threads, fibers, generators, and coroutines are all
    examples of abstractions that use a form of continuations.'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应这一点，我们需要进行轻微扩展：当用户程序调用效果处理程序方法时，不仅传递该方法的参数，而且还传递了一个**延续**，该延续可以在效果完成时恢复执行。什么是延续？它表示“程序的其余部分”：一个可以调用以从调用效果处理程序的点继续执行的值。合作线程、纤程、生成器和协程都是使用延续形式的抽象的示例。
- en: Continuations can be implemented as a program transform, but for performance
    we ideally want runtime support. This is why [Scala Native is getting continuations](https://github.com/scala-native/scala-native/blob/main/nativelib/src/main/scala-3/scala/scalanative/runtime/Continuations.scala).
    On the JVM, [Project Loom](https://cr.openjdk.org/~rpressler/loom/Loom-Proposal.html)
    adds them.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 延续可以作为程序的一种转换来实现，但是为了性能，我们理想情况下希望有运行时支持。这就是为什么[Scala Native正在获取延续](https://github.com/scala-native/scala-native/blob/main/nativelib/src/main/scala-3/scala/scalanative/runtime/Continuations.scala)。在JVM上，[Project
    Loom](https://cr.openjdk.org/~rpressler/loom/Loom-Proposal.html)正在添加它们。
- en: Scala 3 does not yet expose a continuation API, but it does have non-local exits
    in `scala.util.boundary` that can express a few interesting things. Here’s an
    example implementing error-handling in the style of exceptions.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: Scala 3尚未暴露出一个延续API，但它确实在`scala.util.boundary`中有非局部退出，可以表达一些有趣的事情。这里有一个例子，实现了异常处理的样式。
- en: '[PRE17]'
  id: totrans-split-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Notice that we still have the separation between description and action. The
    `program` isn’t run until we call `Raise.run`, and the control-flow exits at the
    point where it is run, not at the point where it is defined.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们仍然保留了描述和动作之间的分离。`program`直到我们调用`Raise.run`时才运行，控制流在运行的点退出，而不是在定义的点退出。
- en: Using direct-style effects we can write programs that would have to use `traverse`
    or other combinators in monadic style. Here’s an example that produces an `Option[List[Int]]`
    from a `List[Int]`.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用直接风格效果，我们可以编写必须以单子风格使用`traverse`或其他组合器的程序。以下是一个从`List[Int]`生成`Option[List[Int]]`的示例。
- en: '[PRE18]'
  id: totrans-split-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This is the equivalent of the following program using Cats:'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用Cats编写的以下程序：
- en: '[PRE19]'
  id: totrans-split-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You might wonder how monads implement effects that play with control flow without
    requiring runtime support. The answer is that monads require the user to explicitly
    specify the control-flow. This is exactly what `flatMap` does: it expresses what
    should happen in what order, and by giving the monad this information as a chain
    of `flatMaps` it can evaluate them in the order that makes sense for the particular
    monad implementation. In fact monads are [equivalent to delimited continuations](https://dl.acm.org/doi/10.1145/174675.178047).
    So direct-style effects and monad effects can be seen as just two different syntaxes
    for writing the same thing.'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想知道单子如何实现影响控制流而不需要运行时支持。答案是单子要求用户显式指定控制流。这正是`flatMap`所做的：它表达了按顺序发生的事情，并通过将这些信息作为一系列`flatMap`链给单子，单子可以按照特定单子实现有意义的顺序进行评估。实际上，单子等价于[界定延续](https://dl.acm.org/doi/10.1145/174675.178047)。因此，直接风格效果和单子效果可以看作是编写相同内容的两种不同语法。
- en: Capturing, Types, and Effects
  id: totrans-split-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 捕获、类型和效果
- en: 'What we’ve seen so far suggests that effects are straightforward to implement
    and use, and they are for the most part. However there is at least one wrinkle
    that we need to be aware of: capturing effects.'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所看到的内容表明，效果的实现和使用是直接的，大部分情况下都是如此。但是，至少有一个我们需要注意的问题：捕获效果。
- en: In the following code we capture a `Error[String]` in a closure, and then attempt
    to call the `raise` method on that `Error` outside of the block where it is valid.
    This leads to a runtime exception.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们在闭包中捕获了一个`Error[String]`，然后试图在其有效范围之外调用该`Error`的`raise`方法。这会导致运行时异常。
- en: '[PRE20]'
  id: totrans-split-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Is this a serious flaw in the entire foundation of direct-style effects? No!
    What we’ve seen so far is only the portion of the effect system that is currently
    in Scala 3\. [Capture checking](https://dotty.epfl.ch/docs/reference/experimental/cc),
    which is still experimental, rules out this kind of bug. The [Capturing Types](https://dl.acm.org/doi/10.1145/3618003)
    paper has all the technical details.
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否是直接风格效果基础的严重缺陷？不是！到目前为止，我们只看到了Scala 3中当前效果系统的一部分。[捕获检查](https://dotty.epfl.ch/docs/reference/experimental/cc)，它仍处于实验阶段，消除了这类错误。[捕获类型](https://dl.acm.org/doi/10.1145/3618003)论文包含所有技术细节。
- en: Capture checking in fact goes further than the examples we’ve seen so far. It
    tracks capability usage in the dynamic scope of the program. It can be used to
    implement composition of different effects. We saw an example earlier where we
    constructed a context function with type `(Console, Random) ?=> Unit`. You might
    have given this type a bit of side-eye as it doesn’t use the type aliases we used
    for the two effects on their own (`Print` and `Sample`.) With capture checking
    the type system works out these types for us. It can also be use for resource
    checking, such as ensuring all open files are closed or that region-based memory
    management is implemented without leaks.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，捕获检查比我们到目前为止看到的例子更进一步。它跟踪程序的动态作用域中的能力使用。它可以用来实现不同效果的组合。我们之前看过一个例子，在那里我们构造了一个具有类型`(Console,
    Random) ?=> Unit`的上下文函数。您可能会对这种类型有些怀疑，因为它没有单独使用我们用于这两种效果的类型别名（`Print`和`Sample`）。通过捕获检查，类型系统为我们解决了这些类型。它还可以用于资源检查，例如确保所有打开的文件都已关闭或实现基于区域的内存管理而没有泄漏。
- en: Conclusions and Further Reading
  id: totrans-split-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论和进一步阅读
- en: 'We’ve seen that direct-style effect allow us to write code in a natural direct
    style, while still retaining useful types that help with reasoning and allowing
    composition of effects. The implementation is a combination of:'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，直接风格效果使我们能够以自然的直接风格编写代码，同时保留有助于推理和允许效果组合的有用类型。实现是以下内容的结合：
- en: context functions;
  id: totrans-split-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上下文函数；
- en: continuations; and
  id: totrans-split-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续；和
- en: type system improvements
  id: totrans-split-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类型系统改进
- en: which together allow us to express effects in direct-style as operations on
    effect handlers.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它们一起使我们能够以直接风格在效果处理程序上操作效果。
- en: Overall, I’m pretty excited by direct-style effects in general, and direct-style
    effects in Scala in particular. I think they are much more ergonomic than monadic
    effects, which in turn makes them accessible to a wider range of programmers.
    I’m also excited to have access to continuations, and presumably tail calls, in
    more languages. Tail calls are really useful for certain problems, such as [virtual
    machine dispatch](https://noelwelsh.com/posts/understanding-vm-dispatch/).
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我对直接风格效果感到非常激动，特别是在Scala中的直接风格效果。我认为它们比单子效果更符合人体工程学，从而使更广泛的程序员能够轻松使用。我还很高兴能够访问延续，以及更多语言中的尾调用。对于某些问题，如[虚拟机分派](https://noelwelsh.com/posts/understanding-vm-dispatch/)，尾调用确实非常有用。
- en: I’m also excited to see Scala continuing to evolve. Scala has always been a
    language of innovation, and these changes are nothing more than a continuation
    (pun-intended) of that heritage. I’m also excited to see more investment in Scala
    Native. I think it’s only in Scala Native that the developers will have the flexibility
    to implement the runtime support needed for a full effect system, and also to
    really maximise its advantages by providing things like region based memory management.
    I also think Scala Native is important for Scala’s industrial adoption in use
    cases like serverless, so I see more investment in Scala Native as a *big* win
    for the community.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我也很激动看到Scala继续演进。Scala一直是创新的语言，这些变化只不过是这一传统的延续（意在双关）。我也很期待看到对Scala Native的更多投资。我认为只有在Scala
    Native中，开发人员才能灵活实现完整的效果系统所需的运行时支持，并且通过提供诸如基于区域的内存管理之类的功能，真正最大化其优势。我还认为Scala Native对于Scala在像无服务器这样的使用案例中的工业采用至关重要，所以我认为对Scala
    Native的更多投资对社区来说是一个*重大*胜利。
- en: 'If you’d like to read more about direct-style effects here are some suggestions,
    which are a mix of accessible introductions and academic papers:'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想进一步了解直接风格效果，这里有一些建议，其中既有易于理解的介绍，也有学术论文：
- en: Finally, if you’ve found this interesting I think you’ll love my book, [Functional
    Programming Strategies](https://scalawithcats.com/). It covers lots of the concepts
    in this post, such as continuation-passing style and interpreters, and a whole
    lot more.
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你觉得这很有趣，我认为你会喜欢我的书，[函数式编程策略](https://scalawithcats.com/)。它涵盖了这篇文章中的许多概念，如延续传递风格和解释器，以及更多内容。
