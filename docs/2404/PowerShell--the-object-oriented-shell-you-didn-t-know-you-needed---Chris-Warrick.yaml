- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:37:34'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'PowerShell: the object-oriented shell you didn’t know you needed | Chris Warrick'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://chriswarrick.com/blog/2024/04/29/powershell-the-object-oriented-shell-you-didnt-know-you-needed/](https://chriswarrick.com/blog/2024/04/29/powershell-the-object-oriented-shell-you-didnt-know-you-needed/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PowerShell is an interactive shell and scripting language from Microsoft. It’s
    object-oriented — and that’s not just a buzzword, that’s a big difference to how
    the standard Unix shells work. And it is actually usable as an interactive shell.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PowerShell is so nice, Microsoft made it twice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, there concurrently exist two products named PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows PowerShell (5.1) is a built-in component of Windows. It is proprietary,
    Windows-only, and is based on the equally proprietary and equally Windows-only
    .NET Framework 4.x. It has a blue icon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell (7.x), formerly known as PowerShell Core, is a stand-alone application.
    It is MIT-licensed [(developed on GitHub)](https://github.com/PowerShell/PowerShell),
    available for Windows, Linux, and macOS, and is based on the equally MIT-licensed
    and equally multi-platform .NET (formerly .NET Core). It has a black icon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows PowerShell development stopped when PowerShell (Core) came out. There
    are some niceties and commands missing in it, but it is still a fine option for
    trying it out or for when one can’t install PowerShell on a Windows system but
    need to solve something with code.
  prefs: []
  type: TYPE_NORMAL
- en: All examples in this post should work in either version of PowerShell on any
    OS (unless explicitly noted otherwise).
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the modern PowerShell: [Windows](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.4),
    [Linux](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux?view=powershell-7.4),
    [macOS](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux?view=powershell-7.4).'
  prefs: []
  type: TYPE_NORMAL
- en: Objects? In my shell?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s try getting a directory listing. This is Microsoft land, so let’s try
    the DOS command for a directory listing — that would be `dir`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This looks like a typical (if slightly verbose) file listing.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s try to do something useful with this. Let’s get the total size of
    all `.txt` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a Unix shell, one option is `du -bc *.txt`. The arguments: `-b` (`--bytes`)
    gives the real byte size, and `-c` (`--summarize`) produces a total. The result
    is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: But how to get just the number? This requires text manipulation (getting the
    first word of the last line). Something like `du -bc *.txt | tail -n 1 | cut -f
    1` will do. There’s also `wc --total=only --bytes *.txt` — but this is specific
    to GNU wc, so it won’t cut it on *BSD or macOS. Another option would be to parse
    the output of `ls -l` — but that might not always be easy, and the output may
    contain something unexpected added by the specific `ls` version or the user’s
    specific shell configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try something in PowerShell. If we do `$x = dir`, we’ll have the output
    of the `dir` command in `$x`. Let’s try to analyse it further, is the first character
    a newline?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: That’s interesting, we didn’t get the first character or the first line, we
    got the first *file*. And if we try `$x[1]`?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What if we try getting the `Length` property out of that?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It turns out that `dir` returns an array of objects, and PowerShell knows how
    to format this array (and a single item from the array) into a nice table. What
    can we do with it? This:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We can iterate over all file objects, get their length (using `ForEach-Object`
    and a lambda), and then use `Measure-Object` to compute the sum (`Measure-Object`
    returns an object, we need to get its `Sum` property). We can replace the `ForEach-Object`
    call with the `-Property` argument in `Measure-Object`. And if we want to look
    into subdirectories, we can easily add `-Recurse` to `Get-ChildItem`. We get actual
    integers we can do math on.
  prefs: []
  type: TYPE_NORMAL
- en: You might have noticed I used `Get-ChildItem` instead of `dir` in the previous
    example. `Get-ChildItem` is the full name of the command (*cmdlet*). `dir` is
    one of its aliases, alongside `gci` and `ls` (Windows-only to avoid shadowing
    `/bin/ls`). Many common commands have aliases defined for easier typing and ease
    of use — `Copy-Item` can be written as `cp` (for compatibility with Unix), `copy`
    (for compatibility with MS-DOS), and `ci`. In our examples, we could also use
    `measure` for `Measure-Object` and `foreach` or `%` for `ForEach-Object`. Those
    aliases are a nice thing to have for interactive use, but for scripts, it’s best
    to use the full names for readability, and to avoid depending on the environment
    for those aliases.
  prefs: []
  type: TYPE_NORMAL
- en: More filesystem operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Files per folder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There’s a photo collection in a `Photos` folder, grouped into folders. The
    objective is to see how many `.jpg` files are in each folder. Here’s the PowerShell
    solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In Unix land, [StackOverflow has a lot of solutions](https://stackoverflow.com/questions/15216370/how-to-count-number-of-files-in-each-directory).
    The top solution is `du -a | cut -d/ -f2 | sort | uniq -c | sort -nr` — a lot
    of tools mashed together, starting with a tool to check disk usage, and a lot
    of string manipulation. The second solution uses find, read, and shell globbing.
    The PowerShell solution is quite simple and obvious to anyone who has ever touched
    SQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The above example works for one level of nesting. For more levels, given `Photos\one\two\three.jpg`,
    use `Get-ChildItem -Filter ''*.jpg'' -Recurse Photos`, and:'
  prefs: []
  type: TYPE_NORMAL
- en: Group by `$_.Directory.Name` (same as before) to get `two`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Group by `Split-Path -Parent ([System.IO.Path]::GetRelativePath("$PWD/Photos",
    $_.FullName))` to get `one/two`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Group by `([System.IO.Path]::GetRelativePath("$PWD/Photos", $_.FullName)).Split([System.IO.Path]::DirectorySeparatorChar)[0]`
    to get `one`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (All of the above examples work for a single folder as well. The latter two
    examples don’t work on Windows PowerShell.)
  prefs: []
  type: TYPE_NORMAL
- en: Duplicate finder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s build a simple tool to detect byte-for-byte duplicated files. `Get-FileHash`
    is a shell built-in. We can use `Group-Object` again, and `Where-Object` to filter
    only matching objects. Computing the hash of every file is quite inefficient,
    so we’ll group by the file length first, and then ensure the hashes match. This
    gives us a nice pipeline of 6 commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Serious Scripting: Software Bill of Materials'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Software Bills of Materials (SBOMs) and supply chain security are all the rage
    these days. The boss wants to have something like that, i.e. a CSV file with a
    list of packages and versions, and only the direct production dependencies. Sure,
    there exist standards like SPDX, but the boss does not like those pesky “standards”.
    The backend is written in C#, and the frontend is written in Node.js. Since we
    care only about the production dependencies, we can look at the `.csproj` and
    `package.json` files. For Node packages, we’ll also try to fetch the license name
    from the npm API (the API is a bit more complicated for NuGet, so we’ll keep it
    as a `TODO` in this example).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Just like every well-written shell script starts with `set -euo pipefail`, every
    PowerShell script should start with [`$ErrorActionPreference = "Stop"`](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/set-strictmode?view=powershell-7.4)
    so that execution is stopped as soon as something goes wrong. Note that this does
    *not* affect native commands, you still need to check `$LASTEXITCODE`. Another
    useful early command is [`Set-StrictMode -Version 3.0`](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/set-strictmode?view=powershell-7.4)
    to catch undefined variables.
  prefs: []
  type: TYPE_NORMAL
- en: For `.csproj` files, which are XML, we look for `PackageReference` elements
    using XPath, and then build a PSCustomObject out of a hashmap — extracting the
    appropriate attributes from the `PackageReference` nodes.
  prefs: []
  type: TYPE_NORMAL
- en: For `package.json`, we read the file, parse the JSON, and extract the properties
    of the `dependencies` object (it’s a map of package names to versions). To get
    the license, we use `Invoke-RestMethod`, which takes care of parsing JSON for
    us.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the main body of the script, we look for the appropriate files (skipping
    things under `node_modules`) and call our parser functions. After retrieving all
    data, we concatenate the two arrays, convert to CSV, and use `Tee-Object` to output
    to a file and to standard output. We get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Could it be done in a different language? Certainly, but PowerShell is really
    easy to integrate with CI, e.g. [GitHub Actions](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-running-a-command-using-powershell-core)
    or [Azure Pipelines](https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/powershell-v2?view=azure-pipelines).
    On Linux, you might be tempted to use Python — and you could get something done
    equally simply, as long as you don’t mind using the ugly `urllib.request` library,
    or alternatively ensuring `requests` is installed (and then you get into the hell
    that is Python package management).
  prefs: []
  type: TYPE_NORMAL
- en: Using .NET classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PowerShell is built on top of .NET. This isn’t just the implementation technology
    — PowerShell gives access to everything the .NET standard library offers. For
    example, the alternate ways to group photos in multiple subdirectories we’ve explored
    above involve a call to a static method of the .NET `System.IO.Path` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other .NET types are also available. Need a HashSet? Here goes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It is also possible to load any .NET DLL into PowerShell (as long as it’s compatible
    with the .NET version PowerShell is built against) and use it as usual from C#
    (although possibly with slightly ugly syntax).
  prefs: []
  type: TYPE_NORMAL
- en: Sick Windows Tricks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Microsoft supposedly killed off Internet Explorer last year. Attempting to
    launch `iexplore.exe` will bring up Microsoft Edge. But you see, Internet Explorer
    is a crucial part of Windows, and has been so for over two decades. Software vendors
    have built software that depends on IE being there and being able to show web
    content. Some of them are using web views, but some of them prefer something else:
    COM.'
  prefs: []
  type: TYPE_NORMAL
- en: COM, or Component Object Model, is Microsoft’s thing for interoperability between
    different applications and/or components. COM is basically a way for classes offered
    by different vendors and potentially written in different languages to talk to
    one another. Under the hood, COM is C++ `vtable`s plus standard reference counting
    and class loading/discovery mechanisms. The .NET Framework, and its successor
    .NET, have always included COM interoperability. The modern WinRT platform is
    COM on steroids.
  prefs: []
  type: TYPE_NORMAL
- en: 'Coming back to Internet Explorer, it exposes some COM classes. They were *not*
    removed with `iexplore.exe`. This means you can bring up a regular Internet Explorer
    window in just two lines of PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Why would you do that? The `InternetExplorer.Application` object lets you control
    the browser, e.g. you can use `$ie.Navigate("https://example.com/")` to go to
    a page. Why would you want to launch IE in 2024? I don’t know, I guess you can
    use it to laugh in the faces of the Microsoft developers who removed the user-accessible
    shortcuts? But there definitely exist some legacy applications that expect a COM-controllable
    IE.
  prefs: []
  type: TYPE_NORMAL
- en: We have already explored the possibility of using classes from .NET. .NET comes
    with a GUI framework named Windows Forms, [which can be loaded from PowerShell
    and used to build a GUI.](https://learn.microsoft.com/en-us/powershell/scripting/samples/creating-a-custom-input-box?view=powershell-7.4)
    There is no form designer, so it requires manually defining and positioning controls,
    but it actually works.
  prefs: []
  type: TYPE_NORMAL
- en: 'PowerShell can also do various Windows management tasks. It can manage boot
    settings, BitLocker, Hyper-V, networking, storage… For example, to get the percentage
    of disk space remaining:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Getting out of PowerShell land
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As a shell, PowerShell can obviously launch subprocesses. Unlike something
    like Python, running a subprocess is as simple as running anything else. If you
    need to `git pull`, you just type that. Or you can make PowerShell interact with
    non-PowerShell commands, reading output and passing arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'I chose to compute untracked files with the help of standard .NET string manipulation
    methods, but there’s also a regex option. On a related note, there are three content
    check operators: `-match` uses regex, `-like` uses [wildcards](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_wildcards?view=powershell-7.4),
    and `-contains` checks collection membership.'
  prefs: []
  type: TYPE_NORMAL
- en: Profile script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I use a fairly small profile script that adds some behaviours I’m used to from
    Unix, and to make Tab completion show a menu. Here are the most basic bits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Apart from that, I use a few aliases and a pretty prompt with the help of [oh-my-posh](https://ohmyposh.dev/).
  prefs: []
  type: TYPE_NORMAL
- en: The unusual and sometimes confusing parts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PowerShell can be verbose. Some of its syntax is a little quirky, compared to
    other languages, e.g. the equality and logic operators (for example, `-eq`, `-le`,
    `-and`). The aliases usually help with remembering commands, but they can’t always
    be depended on — `ls` is defined as an alias only on Windows, and Windows PowerShell
    aliases `wget` and `curl` to `Invoke-WebRequest`, even though all three have completely
    different command line arguments and outputs (this was removed in PowerShell).
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, the Unix/DOS aliases do not change the argument handling. `rm -rf
    foo` is invalid. `rm -r foo` is, since argument names can be abbreviated as long
    as the abbreviation is unambiguous. `rm -r -f foo` is not valid, because `-f`
    can be an abbreviation of `-Filter` or `-Force` (so `rm -r -fo foo`) will do.
    `rm foo bar` does not work, an array is needed: `rm foo,bar`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`C:\Windows\regedit.exe` launches the Registry editor. `"C:\Program Files\Mozilla
    Firefox\firefox.exe"` is a string. Launching something with spaces in its name
    requires the call operator: `& "C:\Program Files\Mozilla Firefox\firefox.exe"`.
    PowerShell’s tab completion will add the `&` if necessary.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two function call syntaxes. Calling a function/cmdlet uses the shell-style
    syntax with argument names: `Some-Function -Arg1 value1 -Arg2 value2`, and argument
    names can be abbreviated, and can sometimes be omitted. Calling a method requires
    a more traditional syntax: `$obj.SomeMethod(value1, value2)`. Names are case-insensitive
    in either case.'
  prefs: []
  type: TYPE_NORMAL
- en: The escape character is the backtick. The backslash is the path separator in
    Windows, so making it an escape character would make everything painful on Windows.
    At least it makes it easy to write regex.
  prefs: []
  type: TYPE_NORMAL
- en: The ugliest part
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The ugliest and the least intuitive part of PowerShell is the handling of single-element
    arrays. PowerShell *really* wants to unpack them to a scalar. The command `(Get-ChildItem).Length`
    will produce the number of files in the current directory — *unless* there is
    exactly one file, in which case it will produce the single file’s size in bytes.
    And if there are zero items, instead of an empty array, PowerShell produces `$null`.
    Sometimes, things will work out in the end (since many cmdlets are happy to get
    either as inputs), but sometimes, PowerShell must be asked to stop this madness
    and return an array: `@(Get-ChildItem).Length`.'
  prefs: []
  type: TYPE_NORMAL
- en: The previous example with `git status` leverages its `--null` argument to get
    zero-delimited data, so we expect either `$null` or a single string according
    to the rules. If we didn’t want to use `--null`, we would need to use `@(git status
    --porcelain)` to always get an array (but we would also need to remove quotes
    that `git` adds to paths that contain spaces).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PowerShell is a fine interactive shell and scripting language. While it does
    have some warts, it is more powerful than your usual Unix shell, and its strongly-typed,
    object-oriented code beats *stringly-typed* `sh` spaghetti any day.
  prefs: []
  type: TYPE_NORMAL
