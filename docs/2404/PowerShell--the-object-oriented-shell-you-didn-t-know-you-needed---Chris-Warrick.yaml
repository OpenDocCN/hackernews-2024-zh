- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:37:34'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:37:34'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'PowerShell: the object-oriented shell you didn’t know you needed | Chris Warrick'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PowerShell：你不知道自己需要的面向对象 shell | Chris Warrick
- en: 来源：[https://chriswarrick.com/blog/2024/04/29/powershell-the-object-oriented-shell-you-didnt-know-you-needed/](https://chriswarrick.com/blog/2024/04/29/powershell-the-object-oriented-shell-you-didnt-know-you-needed/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://chriswarrick.com/blog/2024/04/29/powershell-the-object-oriented-shell-you-didnt-know-you-needed/](https://chriswarrick.com/blog/2024/04/29/powershell-the-object-oriented-shell-you-didnt-know-you-needed/)
- en: PowerShell is an interactive shell and scripting language from Microsoft. It’s
    object-oriented — and that’s not just a buzzword, that’s a big difference to how
    the standard Unix shells work. And it is actually usable as an interactive shell.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 是来自微软的交互式 shell 和脚本语言。它是面向对象的 — 这不只是一个流行语，而是与标准 Unix shell 工作方式的显著区别。而且它确实可以作为交互式
    shell 使用。
- en: Getting Started
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门指南
- en: PowerShell is so nice, Microsoft made it twice.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 如此优秀，微软做了两次。
- en: 'Specifically, there concurrently exist two products named PowerShell:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，目前存在两个名为 PowerShell 的产品：
- en: Windows PowerShell (5.1) is a built-in component of Windows. It is proprietary,
    Windows-only, and is based on the equally proprietary and equally Windows-only
    .NET Framework 4.x. It has a blue icon.
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows PowerShell (5.1) 是 Windows 的内置组件。它是专有的，仅限于 Windows，并且基于同样专有且仅限于 Windows
    的 .NET Framework 4.x。它有一个蓝色图标。
- en: PowerShell (7.x), formerly known as PowerShell Core, is a stand-alone application.
    It is MIT-licensed [(developed on GitHub)](https://github.com/PowerShell/PowerShell),
    available for Windows, Linux, and macOS, and is based on the equally MIT-licensed
    and equally multi-platform .NET (formerly .NET Core). It has a black icon.
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerShell (7.x)，以前称为 PowerShell Core，是一个独立应用程序。它采用 MIT 许可证 [(在 GitHub 上开发)](https://github.com/PowerShell/PowerShell)，适用于
    Windows、Linux 和 macOS，基于同样采用 MIT 许可证且同样跨平台的 .NET（以前是 .NET Core）。它有一个黑色图标。
- en: Windows PowerShell development stopped when PowerShell (Core) came out. There
    are some niceties and commands missing in it, but it is still a fine option for
    trying it out or for when one can’t install PowerShell on a Windows system but
    need to solve something with code.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当 PowerShell (Core) 推出时，Windows PowerShell 开发停止了。它确实缺少一些便利性和命令，但对于尝试或在无法在 Windows
    系统上安装 PowerShell 但需要使用代码解决问题时，它仍然是一个很好的选择。
- en: All examples in this post should work in either version of PowerShell on any
    OS (unless explicitly noted otherwise).
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中的所有示例应该可以在任何操作系统上的 PowerShell 的任一版本中运行（除非另有说明）。
- en: 'Install the modern PowerShell: [Windows](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.4),
    [Linux](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux?view=powershell-7.4),
    [macOS](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux?view=powershell-7.4).'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 安装现代 PowerShell：[Windows](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.4)，[Linux](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux?view=powershell-7.4)，[macOS](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux?view=powershell-7.4)。
- en: Objects? In my shell?
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象？在我的 shell 中？
- en: 'Let’s try getting a directory listing. This is Microsoft land, so let’s try
    the DOS command for a directory listing — that would be `dir`:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试获取一个目录列表。这里是微软的地盘，所以让我们尝试 DOS 命令来获取目录列表 — `dir`：
- en: '[PRE0]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This looks like a typical (if slightly verbose) file listing.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来像是一个典型（如果稍微冗长一些）的文件列表。
- en: Now, let’s try to do something useful with this. Let’s get the total size of
    all `.txt` files.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们试着做点有用的事情。让我们获取所有 `.txt` 文件的总大小。
- en: 'In a Unix shell, one option is `du -bc *.txt`. The arguments: `-b` (`--bytes`)
    gives the real byte size, and `-c` (`--summarize`) produces a total. The result
    is this:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unix shell 中，一种选择是 `du -bc *.txt`。参数：`-b`（`--bytes`）显示实际字节大小，`-c`（`--summarize`）生成总计。结果如下：
- en: '[PRE1]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But how to get just the number? This requires text manipulation (getting the
    first word of the last line). Something like `du -bc *.txt | tail -n 1 | cut -f
    1` will do. There’s also `wc --total=only --bytes *.txt` — but this is specific
    to GNU wc, so it won’t cut it on *BSD or macOS. Another option would be to parse
    the output of `ls -l` — but that might not always be easy, and the output may
    contain something unexpected added by the specific `ls` version or the user’s
    specific shell configuration.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如何只获取数字？这需要文本操作（获取最后一行的第一个单词）。类似于`du -bc *.txt | tail -n 1 | cut -f 1` 将会做到这一点。还有`wc
    --total=only --bytes *.txt` — 但这是GNU wc特有的，因此在BSD或macOS上不适用。另一种选择是解析`ls -l`的输出
    — 但这可能并不总是容易，并且输出可能包含特定的`ls`版本或用户特定的shell配置添加的意外内容。
- en: Let’s try something in PowerShell. If we do `$x = dir`, we’ll have the output
    of the `dir` command in `$x`. Let’s try to analyse it further, is the first character
    a newline?
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在PowerShell中尝试一些东西。如果我们执行`$x = dir`，我们将在`$x`中得到`dir`命令的输出。让我们尝试进一步分析它，第一个字符是换行符吗？
- en: '[PRE2]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That’s interesting, we didn’t get the first character or the first line, we
    got the first *file*. And if we try `$x[1]`?
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有趣，我们没有得到第一个字符或第一行，我们得到了第一个*文件*。如果我们尝试`$x[1]`呢？
- en: '[PRE3]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What if we try getting the `Length` property out of that?
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试从中获取`Length`属性呢？
- en: '[PRE4]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It turns out that `dir` returns an array of objects, and PowerShell knows how
    to format this array (and a single item from the array) into a nice table. What
    can we do with it? This:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 原来`dir`返回一个对象数组，而PowerShell知道如何将这个数组（以及数组中的单个项目）格式化为一个漂亮的表格。我们能用它做些什么呢？像这样：
- en: '[PRE5]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can iterate over all file objects, get their length (using `ForEach-Object`
    and a lambda), and then use `Measure-Object` to compute the sum (`Measure-Object`
    returns an object, we need to get its `Sum` property). We can replace the `ForEach-Object`
    call with the `-Property` argument in `Measure-Object`. And if we want to look
    into subdirectories, we can easily add `-Recurse` to `Get-ChildItem`. We get actual
    integers we can do math on.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以遍历所有文件对象，获取它们的长度（使用`ForEach-Object`和lambda），然后使用`Measure-Object`来计算总和（`Measure-Object`返回一个对象，我们需要获取其`Sum`属性）。我们可以在`Measure-Object`中用`-Property`参数替换`ForEach-Object`调用。如果我们想要查看子目录，可以轻松地在`Get-ChildItem`中添加`-Recurse`选项。这样我们就能得到可以进行数学计算的实际整数。
- en: You might have noticed I used `Get-ChildItem` instead of `dir` in the previous
    example. `Get-ChildItem` is the full name of the command (*cmdlet*). `dir` is
    one of its aliases, alongside `gci` and `ls` (Windows-only to avoid shadowing
    `/bin/ls`). Many common commands have aliases defined for easier typing and ease
    of use — `Copy-Item` can be written as `cp` (for compatibility with Unix), `copy`
    (for compatibility with MS-DOS), and `ci`. In our examples, we could also use
    `measure` for `Measure-Object` and `foreach` or `%` for `ForEach-Object`. Those
    aliases are a nice thing to have for interactive use, but for scripts, it’s best
    to use the full names for readability, and to avoid depending on the environment
    for those aliases.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我在前面的例子中使用了`Get-ChildItem`而不是`dir`。`Get-ChildItem`是该命令的完整名称（*cmdlet*）。`dir`是其别名之一，还有`gci`和`ls`（仅限Windows，以避免遮蔽`/bin/ls`）。许多常见命令都有定义的别名，以便更易于键入和使用
    —— 例如，`Copy-Item`可以写作`cp`（与Unix兼容），`copy`（与MS-DOS兼容）和`ci`。在我们的示例中，我们也可以用`measure`代替`Measure-Object`，用`foreach`或`%`代替`ForEach-Object`。这些别名在交互使用时非常方便，但对于脚本，最好使用全名以提高可读性，并避免依赖于这些别名在不同环境下的变化。
- en: More filesystem operations
  id: totrans-split-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多文件系统操作
- en: Files per folder
  id: totrans-split-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每个文件夹中的文件数
- en: 'There’s a photo collection in a `Photos` folder, grouped into folders. The
    objective is to see how many `.jpg` files are in each folder. Here’s the PowerShell
    solution:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个名为`Photos`的文件夹中有一个照片集合，按文件夹分组。目标是查看每个文件夹中有多少个`.jpg`文件。以下是PowerShell解决方案：
- en: '[PRE6]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In Unix land, [StackOverflow has a lot of solutions](https://stackoverflow.com/questions/15216370/how-to-count-number-of-files-in-each-directory).
    The top solution is `du -a | cut -d/ -f2 | sort | uniq -c | sort -nr` — a lot
    of tools mashed together, starting with a tool to check disk usage, and a lot
    of string manipulation. The second solution uses find, read, and shell globbing.
    The PowerShell solution is quite simple and obvious to anyone who has ever touched
    SQL.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix领域，[StackOverflow上有很多解决方案](https://stackoverflow.com/questions/15216370/how-to-count-number-of-files-in-each-directory)。顶部的解决方案是
    `du -a | cut -d/ -f2 | sort | uniq -c | sort -nr` — 将许多工具组合在一起，以检查磁盘使用情况为起点，然后进行大量的字符串操作。第二个解决方案使用了find、read和shell通配符。PowerShell的解决方案对于曾经接触过SQL的任何人来说都非常简单和明显。
- en: 'The above example works for one level of nesting. For more levels, given `Photos\one\two\three.jpg`,
    use `Get-ChildItem -Filter ''*.jpg'' -Recurse Photos`, and:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例适用于一级嵌套。对于更多级别，给定 `Photos\one\two\three.jpg`，使用 `Get-ChildItem -Filter '*.jpg'
    -Recurse Photos`，并：
- en: Group by `$_.Directory.Name` (same as before) to get `two`
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Group by `$_.Directory.Name`（与以前相同）以获得 `two`
- en: Group by `Split-Path -Parent ([System.IO.Path]::GetRelativePath("$PWD/Photos",
    $_.FullName))` to get `one/two`
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Group by `Split-Path -Parent ([System.IO.Path]::GetRelativePath("$PWD/Photos",
    $_.FullName))` 以获得 `one/two`
- en: Group by `([System.IO.Path]::GetRelativePath("$PWD/Photos", $_.FullName)).Split([System.IO.Path]::DirectorySeparatorChar)[0]`
    to get `one`
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Group by `([System.IO.Path]::GetRelativePath("$PWD/Photos", $_.FullName)).Split([System.IO.Path]::DirectorySeparatorChar)[0]`
    以获得 `one`
- en: (All of the above examples work for a single folder as well. The latter two
    examples don’t work on Windows PowerShell.)
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: （所有上述示例也适用于单个文件夹。后两个示例在 Windows PowerShell 上不起作用。）
- en: Duplicate finder
  id: totrans-split-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重复查找器
- en: 'Let’s build a simple tool to detect byte-for-byte duplicated files. `Get-FileHash`
    is a shell built-in. We can use `Group-Object` again, and `Where-Object` to filter
    only matching objects. Computing the hash of every file is quite inefficient,
    so we’ll group by the file length first, and then ensure the hashes match. This
    gives us a nice pipeline of 6 commands:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个简单的工具来检测逐字节重复的文件。 `Get-FileHash` 是一个 shell 内置命令。我们可以再次使用 `Group-Object`，并使用
    `Where-Object` 来仅过滤匹配的对象。计算每个文件的哈希值相当低效，因此我们首先按文件长度分组，然后确保哈希值匹配。这给我们带来了一个漂亮的管道，总共有
    6 个命令：
- en: '[PRE7]'
  id: totrans-split-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Serious Scripting: Software Bill of Materials'
  id: totrans-split-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 严肃的脚本编写：软件材料清单
- en: Software Bills of Materials (SBOMs) and supply chain security are all the rage
    these days. The boss wants to have something like that, i.e. a CSV file with a
    list of packages and versions, and only the direct production dependencies. Sure,
    there exist standards like SPDX, but the boss does not like those pesky “standards”.
    The backend is written in C#, and the frontend is written in Node.js. Since we
    care only about the production dependencies, we can look at the `.csproj` and
    `package.json` files. For Node packages, we’ll also try to fetch the license name
    from the npm API (the API is a bit more complicated for NuGet, so we’ll keep it
    as a `TODO` in this example).
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 软件材料清单（SBOMs）和供应链安全是当今非常流行的话题。老板希望有类似的东西，即一个 CSV 文件，其中包含软件包和版本的列表，以及仅有的直接生产依赖项。当然，存在像
    SPDX 这样的标准，但老板不喜欢那些讨厌的“标准”。后端是用 C# 编写的，前端是用 Node.js 编写的。由于我们只关心生产依赖项，我们可以查看 `.csproj`
    和 `package.json` 文件。对于 Node 包，我们还会尝试从 npm API 获取许可证名称（在这个例子中，NuGet 的 API 比较复杂，所以我们将其保留为
    `TODO`）。
- en: '[PRE8]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Just like every well-written shell script starts with `set -euo pipefail`, every
    PowerShell script should start with [`$ErrorActionPreference = "Stop"`](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/set-strictmode?view=powershell-7.4)
    so that execution is stopped as soon as something goes wrong. Note that this does
    *not* affect native commands, you still need to check `$LASTEXITCODE`. Another
    useful early command is [`Set-StrictMode -Version 3.0`](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/set-strictmode?view=powershell-7.4)
    to catch undefined variables.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 就像每个写得很好的 shell 脚本都以 `set -euo pipefail` 开头一样，每个 PowerShell 脚本都应该以 [`$ErrorActionPreference
    = "Stop"`](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/set-strictmode?view=powershell-7.4)
    开头，这样一旦出现问题，执行就会停止。请注意，这不会影响本地命令，您仍然需要检查 `$LASTEXITCODE`。另一个有用的早期命令是 [`Set-StrictMode
    -Version 3.0`](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/set-strictmode?view=powershell-7.4)，用于捕获未定义的变量。
- en: For `.csproj` files, which are XML, we look for `PackageReference` elements
    using XPath, and then build a PSCustomObject out of a hashmap — extracting the
    appropriate attributes from the `PackageReference` nodes.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `.csproj` 文件，这些是 XML，我们使用 XPath 查找 `PackageReference` 元素，然后从 `PackageReference`
    节点中提取适当的属性，构建出一个 PSCustomObject。
- en: For `package.json`, we read the file, parse the JSON, and extract the properties
    of the `dependencies` object (it’s a map of package names to versions). To get
    the license, we use `Invoke-RestMethod`, which takes care of parsing JSON for
    us.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `package.json`，我们读取文件，解析 JSON，并提取 `dependencies` 对象的属性（这是一个将包名称映射到版本的映射）。要获取许可证，我们使用
    `Invoke-RestMethod`，它负责为我们解析 JSON。
- en: 'In the main body of the script, we look for the appropriate files (skipping
    things under `node_modules`) and call our parser functions. After retrieving all
    data, we concatenate the two arrays, convert to CSV, and use `Tee-Object` to output
    to a file and to standard output. We get this:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Could it be done in a different language? Certainly, but PowerShell is really
    easy to integrate with CI, e.g. [GitHub Actions](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-running-a-command-using-powershell-core)
    or [Azure Pipelines](https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/powershell-v2?view=azure-pipelines).
    On Linux, you might be tempted to use Python — and you could get something done
    equally simply, as long as you don’t mind using the ugly `urllib.request` library,
    or alternatively ensuring `requests` is installed (and then you get into the hell
    that is Python package management).
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: Using .NET classes
  id: totrans-split-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PowerShell is built on top of .NET. This isn’t just the implementation technology
    — PowerShell gives access to everything the .NET standard library offers. For
    example, the alternate ways to group photos in multiple subdirectories we’ve explored
    above involve a call to a static method of the .NET `System.IO.Path` class.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: 'Other .NET types are also available. Need a HashSet? Here goes:'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-split-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It is also possible to load any .NET DLL into PowerShell (as long as it’s compatible
    with the .NET version PowerShell is built against) and use it as usual from C#
    (although possibly with slightly ugly syntax).
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: Sick Windows Tricks
  id: totrans-split-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Microsoft supposedly killed off Internet Explorer last year. Attempting to
    launch `iexplore.exe` will bring up Microsoft Edge. But you see, Internet Explorer
    is a crucial part of Windows, and has been so for over two decades. Software vendors
    have built software that depends on IE being there and being able to show web
    content. Some of them are using web views, but some of them prefer something else:
    COM.'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: COM, or Component Object Model, is Microsoft’s thing for interoperability between
    different applications and/or components. COM is basically a way for classes offered
    by different vendors and potentially written in different languages to talk to
    one another. Under the hood, COM is C++ `vtable`s plus standard reference counting
    and class loading/discovery mechanisms. The .NET Framework, and its successor
    .NET, have always included COM interoperability. The modern WinRT platform is
    COM on steroids.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: 'Coming back to Internet Explorer, it exposes some COM classes. They were *not*
    removed with `iexplore.exe`. This means you can bring up a regular Internet Explorer
    window in just two lines of PowerShell:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Why would you do that? The `InternetExplorer.Application` object lets you control
    the browser, e.g. you can use `$ie.Navigate("https://example.com/")` to go to
    a page. Why would you want to launch IE in 2024? I don’t know, I guess you can
    use it to laugh in the faces of the Microsoft developers who removed the user-accessible
    shortcuts? But there definitely exist some legacy applications that expect a COM-controllable
    IE.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要这么做呢？`InternetExplorer.Application` 对象允许您控制浏览器，例如，您可以使用 `$ie.Navigate("https://example.com/")`
    访问网页。2024年为什么还要启动IE？我不知道，我猜你可以用它来嘲笑那些删除了用户可访问快捷方式的Microsoft开发人员吧？但确实存在一些遗留应用程序期望能够控制IE。
- en: We have already explored the possibility of using classes from .NET. .NET comes
    with a GUI framework named Windows Forms, [which can be loaded from PowerShell
    and used to build a GUI.](https://learn.microsoft.com/en-us/powershell/scripting/samples/creating-a-custom-input-box?view=powershell-7.4)
    There is no form designer, so it requires manually defining and positioning controls,
    but it actually works.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探索了使用.NET中的类的可能性。.NET带有一个名为Windows Forms的GUI框架，[可以从PowerShell中加载并用于构建GUI。](https://learn.microsoft.com/en-us/powershell/scripting/samples/creating-a-custom-input-box?view=powershell-7.4)
    没有表单设计器，因此需要手动定义和定位控件，但实际上是可行的。
- en: 'PowerShell can also do various Windows management tasks. It can manage boot
    settings, BitLocker, Hyper-V, networking, storage… For example, to get the percentage
    of disk space remaining:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 还可以执行各种Windows管理任务。它可以管理启动设置、BitLocker、Hyper-V、网络和存储… 例如，要获取磁盘剩余空间的百分比：
- en: '[PRE12]'
  id: totrans-split-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Getting out of PowerShell land
  id: totrans-split-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 走出PowerShell的领域
- en: 'As a shell, PowerShell can obviously launch subprocesses. Unlike something
    like Python, running a subprocess is as simple as running anything else. If you
    need to `git pull`, you just type that. Or you can make PowerShell interact with
    non-PowerShell commands, reading output and passing arguments:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个Shell，PowerShell显然可以启动子进程。与Python等不同，运行子进程就像运行其他任何东西一样简单。如果您需要 `git pull`，只需键入即可。或者您可以让PowerShell与非PowerShell命令交互，读取输出并传递参数：
- en: '[PRE13]'
  id: totrans-split-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'I chose to compute untracked files with the help of standard .NET string manipulation
    methods, but there’s also a regex option. On a related note, there are three content
    check operators: `-match` uses regex, `-like` uses [wildcards](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_wildcards?view=powershell-7.4),
    and `-contains` checks collection membership.'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择使用标准的.NET字符串操作方法来计算未跟踪的文件，但也有正则表达式选项。另外，还有三个内容检查运算符：`-match` 使用正则表达式，`-like`
    使用[通配符](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_wildcards?view=powershell-7.4)，而
    `-contains` 用于检查集合成员。
- en: Profile script
  id: totrans-split-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置脚本
- en: 'I use a fairly small profile script that adds some behaviours I’m used to from
    Unix, and to make Tab completion show a menu. Here are the most basic bits:'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用一个相当小的配置脚本，其中添加了一些我在Unix中习惯的行为，以及使Tab完成显示菜单的功能。以下是最基本的部分：
- en: '[PRE14]'
  id: totrans-split-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Apart from that, I use a few aliases and a pretty prompt with the help of [oh-my-posh](https://ohmyposh.dev/).
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我使用了一些别名，并借助[oh-my-posh](https://ohmyposh.dev/)实现了一个漂亮的提示符。
- en: The unusual and sometimes confusing parts
  id: totrans-split-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那些不寻常且有时令人困惑的部分
- en: PowerShell can be verbose. Some of its syntax is a little quirky, compared to
    other languages, e.g. the equality and logic operators (for example, `-eq`, `-le`,
    `-and`). The aliases usually help with remembering commands, but they can’t always
    be depended on — `ls` is defined as an alias only on Windows, and Windows PowerShell
    aliases `wget` and `curl` to `Invoke-WebRequest`, even though all three have completely
    different command line arguments and outputs (this was removed in PowerShell).
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 可能会有些啰嗦。与其他语言相比，它的一些语法有点古怪，例如相等和逻辑运算符（例如，`-eq`，`-le`，`-and`）。别名通常有助于记住命令，但不能总是依赖于它们
    — `ls` 仅在Windows上被定义为别名，而Windows PowerShell 将 `wget` 和 `curl` 别名为 `Invoke-WebRequest`，尽管这三者的命令行参数和输出完全不同（这在PowerShell中已经删除）。
- en: 'Moreover, the Unix/DOS aliases do not change the argument handling. `rm -rf
    foo` is invalid. `rm -r foo` is, since argument names can be abbreviated as long
    as the abbreviation is unambiguous. `rm -r -f foo` is not valid, because `-f`
    can be an abbreviation of `-Filter` or `-Force` (so `rm -r -fo foo`) will do.
    `rm foo bar` does not work, an array is needed: `rm foo,bar`.'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Unix/DOS别名不会改变参数处理方式。`rm -rf foo` 是无效的。`rm -r foo` 是有效的，因为参数名称可以缩写，只要缩写是明确的。`rm
    -r -f foo` 不是有效的，因为 `-f` 可能是 `-Filter` 或 `-Force` 的缩写（所以 `rm -r -fo foo` 将起作用）。`rm
    foo bar` 不起作用，需要一个数组：`rm foo,bar`。
- en: '`C:\Windows\regedit.exe` launches the Registry editor. `"C:\Program Files\Mozilla
    Firefox\firefox.exe"` is a string. Launching something with spaces in its name
    requires the call operator: `& "C:\Program Files\Mozilla Firefox\firefox.exe"`.
    PowerShell’s tab completion will add the `&` if necessary.'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`C:\Windows\regedit.exe` 启动注册表编辑器。`"C:\Program Files\Mozilla Firefox\firefox.exe"`
    是一个字符串。启动带有空格名称的内容需要使用调用运算符：`& "C:\Program Files\Mozilla Firefox\firefox.exe"`。如果需要，PowerShell
    的制表符补全将添加 `&`。'
- en: 'There are two function call syntaxes. Calling a function/cmdlet uses the shell-style
    syntax with argument names: `Some-Function -Arg1 value1 -Arg2 value2`, and argument
    names can be abbreviated, and can sometimes be omitted. Calling a method requires
    a more traditional syntax: `$obj.SomeMethod(value1, value2)`. Names are case-insensitive
    in either case.'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种函数调用语法。调用函数/cmdlet 使用带有参数名的 Shell 风格语法：`Some-Function -Arg1 value1 -Arg2
    value2`，参数名可以缩写，并且有时可以省略。调用方法需要更传统的语法：`$obj.SomeMethod(value1, value2)`。无论哪种情况，名称都是不区分大小写的。
- en: The escape character is the backtick. The backslash is the path separator in
    Windows, so making it an escape character would make everything painful on Windows.
    At least it makes it easy to write regex.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 转义字符是反引号。在Windows中，反斜杠是路径分隔符，因此将其作为转义字符会使Windows上的所有事情变得困难。至少它让编写正则表达式变得容易。
- en: The ugliest part
  id: totrans-split-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PowerShell 最丑陋的部分
- en: 'The ugliest and the least intuitive part of PowerShell is the handling of single-element
    arrays. PowerShell *really* wants to unpack them to a scalar. The command `(Get-ChildItem).Length`
    will produce the number of files in the current directory — *unless* there is
    exactly one file, in which case it will produce the single file’s size in bytes.
    And if there are zero items, instead of an empty array, PowerShell produces `$null`.
    Sometimes, things will work out in the end (since many cmdlets are happy to get
    either as inputs), but sometimes, PowerShell must be asked to stop this madness
    and return an array: `@(Get-ChildItem).Length`.'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 最丑陋且最不直观的部分是处理单元素数组。PowerShell *确实* 希望将它们解包成标量。命令 `(Get-ChildItem).Length`
    将生成当前目录中文件的数量 — *除非* 恰好有一个文件，在这种情况下，它将生成单个文件的字节大小。如果没有任何项，PowerShell 不会产生空数组，而是产生
    `$null`。有时，最终事情会解决（因为许多 cmdlet 都乐意接受任何输入），但有时，必须要求 PowerShell 停止这种疯狂并返回一个数组：`@(Get-ChildItem).Length`。
- en: The previous example with `git status` leverages its `--null` argument to get
    zero-delimited data, so we expect either `$null` or a single string according
    to the rules. If we didn’t want to use `--null`, we would need to use `@(git status
    --porcelain)` to always get an array (but we would also need to remove quotes
    that `git` adds to paths that contain spaces).
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前面带有 `git status` 的示例利用其 `--null` 参数获取零分隔数据，因此我们根据规则期望要么是 `$null` 要么是单个字符串。如果我们不想使用
    `--null`，我们将需要使用 `@(git status --porcelain)` 来始终获取一个数组（但我们还需要删除 `git` 添加到包含空格路径的引号）。
- en: Conclusion
  id: totrans-split-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: PowerShell is a fine interactive shell and scripting language. While it does
    have some warts, it is more powerful than your usual Unix shell, and its strongly-typed,
    object-oriented code beats *stringly-typed* `sh` spaghetti any day.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 是一个很好的交互式 Shell 和脚本语言。虽然它有一些缺陷，但比起通常的 Unix Shell，它更强大，并且它的强类型、面向对象的代码击败了
    *强类型* 的 `sh` 混乱。
