["```\nconst draggable = document.getElementById(\"myObject\");\nconst setStatus = (str) =>\n  (document.getElementById(\"status\").textContent = str);\n\nlet didDrag = false;\nlet dragOrigin;\nlet origPos;\n\ndraggable.addEventListener(\"pointerdown\", (evt) => {\n  evt.target.setPointerCapture(evt.pointerId);\n  dragOrigin = { x: evt.clientX, y: evt.clientY };\n  const { left, top } = draggable.getBoundingClientRect();\n  origPos = { left, top };\n  didDrag = false;\n});\ndraggable.addEventListener(\"pointermove\", (evt) => {\n  if (dragOrigin) {\n    didDrag = true;\n    const deltaX = evt.clientX - dragOrigin.x;\n    const deltaY = evt.clientY - dragOrigin.y;\n    draggable.style.left = `${origPos.left + deltaX}px`;\n    draggable.style.top = `${origPos.top + deltaY}px`;\n    setStatus(\"dragging...\");\n  }\n});\ndraggable.addEventListener(\"pointerup\", (evt) => {\n  dragOrigin = undefined;\n  if (didDrag) {\n    setStatus(\"Dropped!\");\n  } else {\n    setStatus(\"Clicked!\");\n  }\n});\nwindow.addEventListener(\"keydown\", (evt) => {\n  if (evt.key === \"Escape\") {\n    dragOrigin = undefined;\n    draggable.style.left = `${origPos.left}px`;\n    draggable.style.top = `${origPos.top}px`;\n    setStatus(\"Cancelled!\");\n  }\n});\n```", "```\nlet didDrag = false;\nlet didHandlePointerDown = false;\nlet dragOrigin;\nlet origPos;\n\nconst rectContains = ({ top, right, bottom, left }, x, y) =>\n  left <= x && x <= right && top <= y && y <= bottom;\n\n(function handleFrame() {\n  if (mouse.buttons[0].pressed) {\n    const { clientX, clientY } = mouse.location;\n    const draggableRect = draggable.getBoundingClientRect();\n\n    if (\n      !didHandlePointerDown &&\n      rectContains(draggableRect, clientX, clientY)\n    ) {\n      // Handle pointerdown\n      dragOrigin = { x: clientX, y: clientY };\n      origPos = {\n        left: draggableRect.left,\n        top: draggableRect.top,\n      };\n      didDrag = false;\n    }\n\n    // Ensure that we only act on pointerdown action in the\n    // first frame that we detect that the button is pressed.\n    didHandlePointerDown = true;\n\n    if (\n      dragOrigin &&\n      (clientX !== dragOrigin.x || clientY !== dragOrigin.y)\n    ) {\n      // Handle pointermove\n      didDrag = true;\n      const deltaX = clientX - dragOrigin.x;\n      const deltaY = clientY - dragOrigin.y;\n      draggable.style.left = `${origPos.left + deltaX}px`;\n      draggable.style.top = `${origPos.top + deltaY}px`;\n      setStatus(\"dragging...\");\n    }\n  } else if (dragOrigin) {\n    // Handle pointerup\n    dragOrigin = undefined;\n    if (didDrag) {\n      setStatus(\"Dropped!\");\n    } else {\n      setStatus(\"Clicked!\");\n    }\n  } else {\n    didHandlePointerDown = false;\n  }\n\n  if (dragOrigin && keyboard.keys[\"Escape\"].pressed) {\n    // Handle keypress\n    dragOrigin = undefined;\n    draggable.style.left = `${origPos.left}px`;\n    draggable.style.top = `${origPos.top}px`;\n    setStatus(\"Cancelled!\");\n  }\n\n  requestAnimationFrame(handleFrame);\n})();\n```", "```\nconst draggable = document.getElementById(\"myObject\");\nconst setStatus = (str) =>\n  (document.getElementById(\"status\").textContent = str);\n\nconst events = new abro.EventSource(draggable);\nconst windowEvents = new abro.EventSource(window);\n\nabro.loop(async () => {\n  // Control will block on this line until pointerdown happens.\n  const downEvent = await events.pointerdown; // üëà 1Ô∏è‚É£\n  downEvent.target.setPointerCapture(downEvent.pointerId);\n\n  const { left, top } = draggable.getBoundingClientRect();\n  const origPos = { left, top };\n\n  let didDrag = false;\n\n  // `abro.or` starts multiple fibers, and completes as soon as *one*\n  // of them completes (the others are terminated).\n  await abro.or( // üëà 2Ô∏è‚É£\n    async function handleDrag() {\n      // An infinite loop? Abro will terminate this fiber when either\n      // `handlePointerUp` or `handleEscape` is done.\n      while (true) { // üëà 3Ô∏è‚É£\n        const { clientX, clientY } = await events.pointermove;\n        didDrag = true;\n        const deltaX = clientX - downEvent.x;\n        const deltaY = clientY - downEvent.y;\n        draggable.style.left = `${origPos.left + deltaX}px`;\n        draggable.style.top = `${origPos.top + deltaY}px`;\n        setStatus(\"dragging...\");\n      }\n    },\n    async function handlePointerUp() {\n      await events.pointerup;\n      if (didDrag) {\n        setStatus(\"Dropped!\");\n      } else {\n        setStatus(\"Clicked!\");\n      }\n    },\n    async function handleEscape() {\n      let key;\n      while (key !== \"Escape\") {\n        ({ key } = await windowEvents.keydown);\n      }\n      draggable.style.left = `${origPos.left}px`;\n      draggable.style.top = `${origPos.top}px`;\n      setStatus(\"Cancelled!\");\n    }\n  );\n});\n```"]