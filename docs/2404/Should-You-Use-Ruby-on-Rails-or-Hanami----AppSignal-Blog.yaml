- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:30:01'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:30:01'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Should You Use Ruby on Rails or Hanami? | AppSignal Blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应该使用Ruby on Rails还是Hanami？| AppSignal博客
- en: 来源：[https://blog.appsignal.com/2024/04/24/should-you-use-ruby-on-rails-or-hanami.html](https://blog.appsignal.com/2024/04/24/should-you-use-ruby-on-rails-or-hanami.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.appsignal.com/2024/04/24/should-you-use-ruby-on-rails-or-hanami.html](https://blog.appsignal.com/2024/04/24/should-you-use-ruby-on-rails-or-hanami.html)
- en: '*This post was updated on 23 May 2024 to clarify the differences in models
    and data persistence between Rails and Hanami.*'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*本文更新于2024年5月23日，以澄清Rails和Hanami之间模型和数据持久性的差异。*'
- en: Ruby on Rails is the most popular web framework in the Ruby ecosystem and has
    a large user base, ranging from freelancers to large established companies. With
    an active user community and wide-ranging documentation, it can be used to build
    everything from simple applications to complex web platforms.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby on Rails是Ruby生态系统中最流行的Web框架，拥有广泛的用户群体，从自由职业者到大型成熟公司都有。凭借活跃的用户社区和广泛的文档，它可用于构建从简单应用程序到复杂Web平台的所有内容。
- en: 'That said, a new contestant is taking on Rails’ dominance for the full-stack
    Ruby framework title: Hanami. It is a fast, modular Ruby framework with improved
    performance and maintainability compared to Rails.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，一个新的竞争者正在挑战Rails在全栈Ruby框架领域的主导地位：Hanami。与Rails相比，它是一个快速、模块化的Ruby框架，具有更好的性能和可维护性。
- en: In this article, we'll explore the strengths and weaknesses of each framework
    in terms of performance, features, testing, and more. So whether you are looking
    to build a customer-facing web app, an internal tool, or a massively scalable
    API, you should leave being better informed about what to use for your next project.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将探讨每个框架在性能、功能、测试等方面的优势和劣势。因此，无论您是要构建面向客户的Web应用程序、内部工具还是高度可扩展的API，您都应该更加了解用于下一个项目的选择。
- en: Let's get started with a brief introduction to each framework.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从每个框架的简要介绍开始。
- en: Introducing Ruby on Rails
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Ruby on Rails
- en: '[Ruby on Rails](https://guides.rubyonrails.org/getting_started.html) is the
    most well-known Ruby web application development framework with a mission to enhance
    developer productivity (by making a bunch of assumptions about how apps should
    be built, often referred to as the "Rails way").'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[Ruby on Rails](https://guides.rubyonrails.org/getting_started.html)是最知名的Ruby
    Web应用程序开发框架，其使命是通过增强开发人员的生产力（通过对应用程序构建方式进行大量假设，通常称为“Rails方式”）。'
- en: Some of these assumptions include making sure developers do not spend time configuring
    stuff, or what is termed as "convention over configuration", and an emphasis on
    using DRY ("don't repeat yourself") principles. DRY principles encourage a developer
    to avoid repeating code over and over again, but instead use single and focused
    representations of app functionality to ensure maintainability and organization.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一些假设包括确保开发人员不花时间配置各种东西，或者所谓的“惯例优于配置”，并且强调使用DRY（“不要重复自己”）原则。DRY原则鼓励开发人员避免一遍又一遍地重复代码，而是使用单一和专注的应用功能表示，以确保可维护性和组织性。
- en: Introducing Hanami
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Hanami
- en: While Rails is very well-known in the Ruby community, [Hanami](https://hanamirb.org/)
    is less so. It's a fairly new modern Ruby framework trying to take on Rails' dominance
    of the full-stack web framework space.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Rails在Ruby社区中非常知名，但[Hanami](https://hanamirb.org/)则不太为人所知。它是一个相对较新的现代Ruby框架，试图挑战Rails在全栈Web框架领域的主导地位。
- en: Hanami is built from the ground up to have a small memory footprint and a focus
    on modularity, which, in turn, makes for a very fast and nimble framework.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: Hanami从头开始构建，具有较小的内存占用和模块化的重点，这反过来使其成为一个非常快速和灵活的框架。
- en: Obviously, these brief introductions won't really give you all the information
    you need to decide on the framework that suits you best. For that, we'll need
    to dive deeper into each, starting with how they are structured.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这些简要介绍并不能真正为你提供选择最适合你的框架所需的所有信息。为此，我们需要深入探讨每个框架，首先从它们的结构开始。
- en: Structure and Architecture of Rails and Hanami
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rails和Hanami的结构与架构
- en: Rails and Hanami are somewhat similar in that both are Ruby frameworks. However,
    how each is built and their application architecture is where you'll find most
    of the differences.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: Rails和Hanami在某种程度上相似，因为两者都是Ruby框架。然而，它们的构建方式及其应用架构是你将找到大部分差异的地方。
- en: For starters, with Rails, you have fewer files or *abstractions* (the building
    blocks you use to build your app), which tend to grow in size as you develop your
    app. On the other hand, Hanami takes abstractions to a whole new level, with lots
    of files that tend to be smaller in size.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 起步时，使用 Rails 时，你拥有较少的文件或*抽象*（用于构建应用程序的构建块），随着应用程序的开发，这些文件往往会增长。另一方面，Hanami将抽象推向一个全新的水平，拥有许多文件，这些文件往往较小。
- en: The diagrams below illustrate the point more clearly. Let's start with Rails.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图表更清楚地说明了这一点。让我们从 Rails 开始。
- en: Now compare the Rails abstraction diagram with the Hanami one below.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 Rails 的抽象图与下面的 Hanami 进行比较。
- en: As you can see, each framework generally follows the *model-view-controller*
    (MVC) structure. However, Hanami takes abstraction to the next level.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，每个框架通常都遵循*模型-视图-控制器*（MVC）结构。但是，Hanami将抽象化推向了一个新的水平。
- en: 'Here''s a simplified outline of how each framework is organized:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是每个框架组织结构的简化概述：
- en: '**Routes** - Each framework has a routes definition with your app''s endpoints.'
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由** - 每个框架都有一个定义应用程序端点的路由。'
- en: '**Controllers vs. actions** - In Rails, you get controllers with one or a couple
    of actions in them. Controllers receive and respond to route requests by directing
    them to the relevant actions. In Hanami, there are no controllers. Instead, you
    go straight to self-contained actions (each action has its own self-contained
    class).'
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器与动作** - 在 Rails 中，你会得到带有一个或多个动作的控制器。控制器接收并响应路由请求，将它们定向到相关的动作。在 Hanami
    中，没有控制器。取而代之的是直接进入自包含的动作（每个动作都有自己独立的类）。'
- en: '**Models and persistence** - The Rails model layer takes care of data validation
    and database communication, including any queries your app may have. Persistence is
    handled by the Ruby Object Mapper (ROM). In Hanami, the model layer is more abstract,
    separated into entities and repositories. Entities handle domain logic and are
    database-agnostic, whereas *repositories* (repos) are used to communicate with
    the database. Hanami 2.0 onwards ships without a pre-configured persistence layer,
    allowing you to choose an Object Relational Mapper (ORM) that suits your needs
    or program ORM free.'
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型和持久层** - Rails 的模型层负责数据验证和数据库通信，包括应用程序可能有的任何查询。持久性由 Ruby Object Mapper
    (ROM) 处理。在 Hanami 中，模型层更为抽象，分为实体和存储库。实体处理领域逻辑，并且与数据库无关，而*存储库*（repos）用于与数据库通信。从
    Hanami 2.0 开始，不再预配置持久层，允许你选择适合需求的对象关系映射器（ORM）或者不使用ORM。'
- en: '**View rendering** - As with the persistence layer, Ruby on Rails views tend
    to contain everything you need for rendering data to the outside world in one
    place. This includes all the HTML structure, view helpers, and view logic. When
    it comes to view rendering in Hanami, things are more abstract. For starters,
    you have *views* that utilize any view helpers the app has and also render the
    *template*. The *template* handles the actual HTML structure, while the *parts*
    take care of any presentation logic.'
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图渲染** - 与持久层类似，Ruby on Rails 的视图通常包含了渲染数据到外部世界所需的一切内容。这包括所有的 HTML 结构、视图帮助器和视图逻辑。而在
    Hanami 中，视图渲染更为抽象。首先，你有*视图*，它利用应用程序的任何视图帮助器，并且还渲染*模板*。*模板*处理实际的 HTML 结构，而*部分*则负责任何展示逻辑。'
- en: So, what does all this mean when it comes to building an app? With fewer abstractions,
    Rails is a good choice for getting your app off the ground and is more beginner-friendly
    (as we shall see later on in this article). With Rails, you can build very robust
    monolith apps, but your code will get more and more complex as you scale. On the
    other hand, Hanami's more complex structure can be daunting to learn, but it will
    allow you to build massively scalable applications and could make for much better
    code organization.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，当构建应用程序时，这意味着什么？Rails 的抽象较少，适合快速启动应用程序，对初学者更友好（我们稍后将在本文中看到）。使用 Rails，你可以构建非常健壮的单体应用程序，但随着规模扩大，你的代码会变得越来越复杂。另一方面，Hanami
    的结构更复杂，学习起来可能有些艰难，但它将允许你构建大规模可扩展的应用程序，并可能实现更好的代码组织。
- en: Next, let's take a look at each framework's ecosystem.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来看看每个框架的生态系统。
- en: Ecosystem and Community
  id: totrans-split-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生态系统和社区
- en: As we mentioned earlier, Rails has a more established framework than Hanami.
    Rails has been around for longer and, as such, has a bigger and more mature community.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，Rails 比 Hanami 拥有更为成熟的框架。Rails 已经存在更长时间，因此拥有更大、更成熟的社区。
- en: 'The differences in ecosystem and community are summarized below:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 生态系统和社区的差异如下所示：
- en: '**Documentation** - It doesn''t matter what you''re trying to build, if you
    use Rails, you have access to very well-done documentation. You are guided through
    all parts of an app build, from authentication, to data persistence, view presentation,
    and everything in between. Additionally, a wide range of third-party tutorials
    cover almost everything imaginable in terms of building an application.'
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档** - 不管你想要构建什么，如果你使用 Rails，你都可以获得非常完善的文档。文档会引导你完成应用的各个部分，从认证、数据持久性、视图展示，以及其他方方面面。此外，各种第三方教程几乎涵盖了构建应用可能涉及的一切内容。'
- en: That said, things are not so established on the Hanami side of things. Being
    a relatively newer framework, Hanami has a comparatively limited documentation
    base. The Hanami team has done an impressive job with the official guides, but
    compared to the Rails documentation base, it doesn't come close.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 就说到了，Hanami 这边的情况还没有那么成熟。作为一个相对较新的框架，Hanami 的文档基础相对有限。Hanami 团队在官方指南方面做得非常出色，但与
    Rails 的文档基础相比，还差得远。
- en: '**Community** - Here, as with the documentation, Rails is the clear winner.
    Rails has been around much longer than Hanami, so it''s been adopted the most.
    It doesn''t matter whether you are a beginner or advanced developer, you''ll find
    a Rails community on relevant subreddits, Slack groups, Discords, and so forth.
    On the other hand, Hanami is still growing, meaning it has a much smaller community.'
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区** - 在这里，和文档一样，Rails 显然是赢家。Rails 已经存在的时间比 Hanami 长得多，因此它被采用得最多。无论你是初学者还是高级开发者，在相关的
    subreddits、Slack 群组、Discord 群等地方，都能找到 Rails 社区。另一方面，Hanami 还在成长中，这意味着它的社区规模要小得多。'
- en: '**Gems and libraries** - Since both Hanami and Rails are Ruby frameworks, it
    could be argued that gems that work in Rails will work in Hanami. Although this
    is technically true, you''ll often find that Rails has a more established base
    of gems and libraries for all sorts of specialized functions.'
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gems 和库** - 由于 Hanami 和 Rails 都是 Ruby 框架，有人可能会认为在 Rails 中使用的 gems 可以在 Hanami
    中工作。尽管从技术上讲这是正确的，但你会发现 Rails 拥有更多成熟的 gems 和库，用于各种专门功能。'
- en: That said, because of Hanami's focus on abstractions and specialization, it
    has some very advanced gems that could take your Rails apps to the next level.
    For example, the default [dry-rb gems](https://dry-rb.org/) in Hanami could bring
    better code organization and abstraction when used in Rails apps.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，由于 Hanami 专注于抽象和专业化，它拥有一些非常先进的 gems，可以将你的 Rails 应用程序提升到更高的水平。例如，在 Hanami
    中默认的 [dry-rb gems](https://dry-rb.org/) 可以在使用于 Rails 应用程序时带来更好的代码组织和抽象。
- en: Moving on, let's compare each framework's learning curve and adoption.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们比较每个框架的学习曲线和应用情况。
- en: Ease of Use, Adoption, Governance, and Learning Curve
  id: totrans-split-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 易用性、采用率、治理和学习曲线
- en: 'For the very reasons outlined in the previous section, Ruby on Rails easily
    beats Hanami in terms of ease of use, industry adoption, and learning curve, specifically:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 基于上一节所说的原因，Ruby on Rails 在易用性、行业应用和学习曲线方面轻松击败 Hanami，具体如下：
- en: '**Learning** - Imagine you''re a complete beginner who''s looking to learn
    a new programming language. Your very first thought will be to check out online
    learning resources. If a framework has widely available learning materials covering
    the app-building process from start to finish, you''ll likely choose that language
    over others. And because Rails has a more established documentation base, it trumps
    Hanami as the beginner''s choice of framework. In addition, Rails is much more
    friendly for beginners to pick up since it makes so many assumptions under the
    hood (compared to Hanami, which offers a more abstract way of building apps).
    Hanami''s abstractions can be daunting even for established Rails developers.'
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习** - 想象一下，你是一个完全的初学者，正在学习一门新的编程语言。你第一个想到的将会是查找在线学习资源。如果一个框架有广泛可用的学习材料，覆盖从头到尾的应用构建过程，那么你可能会选择这门语言而不是其他。正因为
    Rails 有更成熟的文档基础，它比 Hanami 更适合初学者选择。此外，Rails 对于初学者来说更加友好，因为它在底层做了很多假设（相对于 Hanami，后者提供了一种更抽象的应用构建方式）。Hanami
    的抽象对于已经熟悉的 Rails 开发者来说，甚至都可能是令人望而生畏的。'
- en: '**Industry adoption** - Without including the adoption of other popular and
    more established frameworks like Python, React, C#, and others, if we consider
    the adoption of Ruby frameworks, Rails easily eclipses Hanami. The [Rails homepage](https://rubyonrails.org/)
    lists some big-name organizations using the framework. On the other hand, as the
    new kid on the block, Hanami is not so widely adopted. We''ll have to wait and
    see whether that will change in the future.'
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行业采纳** - 如果不考虑其他流行且更成熟的框架如 Python、React、C# 等的采纳情况，仅考虑 Ruby 框架的采纳情况，Rails
    显然比 Hanami 更受欢迎。[Rails 官网](https://rubyonrails.org/)列出了一些使用该框架的知名组织。另一方面，作为新兴框架，Hanami
    的采纳情况并不广泛。我们将等待看看未来是否会有所改变。'
- en: '**Job market prospects** - In terms of job prospects, you''ll find more job
    openings for Rails developers than Hanami developers.'
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**就业市场前景** - 在就业前景方面，Rails 开发者的职位开放数要比 Hanami 开发者多得多。'
- en: '**Governance** - Another important aspect that should not be overlooked is
    governance. A changing landscape guides how open-source frameworks evolve and
    advance. However, more than that, the core team members of these frameworks often
    wield immense powers and can dictate what goes into a framework, how it develops,
    etc.'
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**治理** - 另一个不容忽视的重要方面是治理。变化的格局指导着开源框架的进化和发展。然而，更重要的是，这些框架的核心团队成员往往拥有巨大的权力，可以决定框架的发展方向和内容等。'
- en: A good example is [January's announcement](https://twitter.com/dhh/status/1743664413964374505)
    by David Heinemeier Hansson (DHH), the creator of Rails. He said that, in the
    future, he would push for Rails to offer first-class support for building full-stack
    progressive web applications and native notifications. These features would make
    Rails very attractive to mobile developers.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是 [1月份的公告](https://twitter.com/dhh/status/1743664413964374505)，由 Rails
    的创始人 David Heinemeier Hansson (DHH) 宣布。他表示，未来将推动 Rails 提供全栈渐进式 Web 应用和本地通知的一流支持。这些功能将使
    Rails 对移动开发者非常有吸引力。
- en: In reaction, many developers, some outside the Ruby ecosystem and even others
    who had dropped Rails over the years, overwhelmingly responded in the positive,
    saying they would gladly pick up the framework or learn it if DHH kept his word.
    This example just goes to show you that governance is a very important consideration
    when deciding what framework to pick.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对此，许多开发者，包括 Ruby 生态系统之外的开发者，甚至是多年来放弃 Rails 的开发者，都积极响应，表示如果 DHH 兑现承诺的话，他们将很乐意选择或学习该框架。这个例子充分表明，在选择框架时，治理是一个非常重要的考虑因素。
- en: Let's now switch gears and look into something more technical, application performance.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转向更加技术化的内容，应用程序性能。
- en: 'Performance: Ruby on Rails vs. Hanami'
  id: totrans-split-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能：Ruby on Rails vs. Hanami
- en: As a developer, you will be concerned about your app's reliability, responsiveness,
    and how it will utilize server resources once deployed in production. These are
    fundamental concerns that can greatly affect your choice of framework.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，你会关心你的应用在部署到生产环境后的可靠性、响应性以及如何利用服务器资源。这些是极为重要的考虑因素，能够极大地影响你选择框架的决策。
- en: You could use many methods to run performance tests on your app, one of the
    most popular being [Apache JMeter](https://jmeter.apache.org/). Let's use the
    [benchmark numbers](https://web-frameworks-benchmark.netlify.app/result?asc=0&f=hanami,rails&order_by=level64)
    to compare Hanami and Rails.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用多种方法来对你的应用进行性能测试，其中最流行的之一是 [Apache JMeter](https://jmeter.apache.org/)。让我们使用
    [基准测试数据](https://web-frameworks-benchmark.netlify.app/result?asc=0&f=hanami,rails&order_by=level64)
    来比较 Hanami 和 Rails。
- en: 'Here''s a quick benchmark test showing the number of requests each framework
    can handle per second:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个快速的基准测试，显示了每个框架每秒可以处理的请求数：
- en: Hanami beats Rails hands down, with the ability to handle 3 times more requests
    than Rails can handle.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: Hanami 轻松击败了 Rails，其处理请求的能力是 Rails 的三倍。
- en: 'This next screenshot shows the average latency values for each framework:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了每个框架的平均延迟值：
- en: Again, Hanami beats Rails with an average latency time that's about 3 times
    shorter.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，Hanami 的平均延迟时间比 Rails 短大约 3 倍。
- en: If you're looking for a Ruby framework that is blazingly fast (let's say, you
    need to work on a fast and hugely scalable API), then you'll be hard-pressed to
    find anything better than Hanami in the Ruby landscape.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在寻找一个速度极快的 Ruby 框架（比如说，你需要开发一个快速且高度可扩展的 API），那么在 Ruby 领域内，你很难找到比 Hanami
    更好的选择。
- en: Testing
  id: totrans-split-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: When it comes to testing code, both frameworks are very much comparable since
    you can test either using the versatile [RSpec](https://rspec.info/) library.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试代码方面，由于你可以使用多功能的 [RSpec](https://rspec.info/) 库，所以两个框架都是非常可比的。
- en: 'RSpec is included via the `hanami-rspec` gem for Hanami apps, whereas you need
    to install the `rspec-rails` gem to use it in your Rails app. The example below
    shows a very basic test spec that is included with your new Hanami app:'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Hanami 应用，RSpec 通过 `hanami-rspec` gem 已经包含在内，而对于 Rails 应用，你需要安装 `rspec-rails`
    gem 才能使用它。下面的示例展示了在新的 Hanami 应用中包含的一个非常基本的测试规范：
- en: 'Running it with `$ bundle exec rspec spec/requests/root_spec.rb` should result
    in a passing test (assuming you''ve not edited the default view template):'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `$ bundle exec rspec spec/requests/root_spec.rb` 运行应该会通过测试（假设你没有编辑默认视图模板）：
- en: 'On the Rails side, you need to handle some things by yourself. Firstly, you
    need to add the RSpec gem to the development/test block in the `Gemfile` as shown
    below, then run `bundle`:'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Rails 来说，你需要自己处理一些事情。首先，你需要在 `Gemfile` 的开发/测试块中添加如下所示的 RSpec gem，然后运行 `bundle`：
- en: The next step is to run the RSpec install with the command `bundle exec rails
    generate rspec:install` to get it ready for your Rails project.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用命令 `bundle exec rails generate rspec:install` 安装 RSpec，为你的 Rails 项目做好准备。
- en: 'Finally, before writing and running any tests, you''ll likely need to install
    another gem to define test data for your Rails app: [FactoryBot](https://github.com/thoughtbot/factory_bot_rails).'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在编写和运行任何测试之前，你可能需要安装另一个 gem 来为你的 Rails 应用定义测试数据：[FactoryBot](https://github.com/thoughtbot/factory_bot_rails)。
- en: 'And assuming you''ve set up your test suite properly and defined a few tests,
    you can run a test just as you would in Hanami, with `bundle exec rspec spec/models/user_spec.rb`.
    You can get your test results just as you would with a Hanami app:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经设置好了你的测试套件，并定义了一些测试，你可以像在 Hanami 应用中一样运行测试，使用 `bundle exec rspec spec/models/user_spec.rb`。你可以获取到与
    Hanami 应用类似的测试结果：
- en: Finally, let's see how the frameworks compare when it comes to deployment.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看当涉及到部署时这两个框架如何比较。
- en: Deployment
  id: totrans-split-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署
- en: Nowadays, there are lots of options for deploying Ruby apps to production.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有很多选项可以部署 Ruby 应用到生产环境。
- en: 'To begin with, you could go with a Platform-as-a-Service (PaaS) provider like
    [Heroku](https://www.heroku.com/ruby), or [Fly](https://fly.io/) for a more seamless
    experience. You can also do a bit of DevOps: set up a Docker installation on a
    VPS and deploy your app there.'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，你可以选择一个像 [Heroku](https://www.heroku.com/ruby) 这样的平台即服务（PaaS）提供商，或者像 [Fly](https://fly.io/)
    这样更无缝的体验。你也可以进行一些 DevOps 工作：在 VPS 上设置 Docker 安装，并在那里部署你的应用。
- en: Whichever option you choose, you can expect deployment to be relatively similar
    in both cases. The only caveat is the lack of extensive documentation and tutorials
    for deploying Hanami apps.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择哪个选项，你都可以期待在部署方面有类似的体验。唯一的问题是缺乏详尽的文档和教程来部署 Hanami 应用。
- en: As we pointed out before, being a newer framework, Hanami still doesn't have
    extensive documentation covering the deployment process and the challenges that
    might crop up. If you don't mind hacking around this, then you should be okay.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，作为一个较新的框架，Hanami 还没有涵盖部署过程和可能出现的挑战的详尽文档。如果你不介意处理这些问题，那么你应该没问题。
- en: Wrapping Up
  id: totrans-split-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this article, we''ve looked at two Ruby frameworks — Ruby on Rails and Hanami
    — comparing them in terms of features, architecture, performance, and more. Ultimately,
    we have to answer the question: "Which framework should I use, and why?". We can
    summarize as follows:'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们比较了两个 Ruby 框架 — Ruby on Rails 和 Hanami — 从功能、架构、性能等方面进行了对比。最终，我们需要回答这样一个问题：“我应该选择哪个框架，为什么？”。我们可以总结如下：
- en: 'If you''re a beginner Ruby developer, start with Rails: it''s easier to pick
    up and learn. If you''re a more advanced Ruby developer, develop a Hanami skillset,
    as it will help you develop even more robust Ruby applications.'
  id: totrans-split-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你是一个初学者的 Ruby 开发者，建议从 Rails 开始：它更容易学习和掌握。如果你是一个更高级的 Ruby 开发者，发展 Hanami 技能集将帮助你开发更加健壮的
    Ruby 应用程序。
- en: If you need to develop an app that should be fast, say an API serving several
    clients, Hanami's small memory footprint, blazing fast responses, and low latency
    will serve you well. However, if you just need to develop a monolithic full-stack
    app to validate a SaaS idea, Rails will definitely get you there faster.
  id: totrans-split-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要开发一个快速的应用，比如为多个客户提供 API，Hanami 的小内存占用、极快的响应速度和低延迟将非常适合你。然而，如果你只需要开发一个单体全栈应用来验证
    SaaS 想法，Rails 肯定会更快地帮助你实现目标。
- en: Ultimately, what you end up choosing is really up to you. It isn't a bad idea
    to acquire skills in both frameworks. That way, you can decide on the best framework
    to go for, depending on the needs of your project.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，您选择什么取决于您自己。同时掌握两种框架的技能并不是一个坏主意。这样，您可以根据项目的需求选择最合适的框架。
- en: Happy coding!
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 快乐编程！
- en: '**P.S. If you''d like to read Ruby Magic posts as soon as they get off the
    press, [subscribe to our Ruby Magic newsletter and never miss a single post](https://blog.appsignal.com/ruby-magic)!**'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**P.S. 如果您想第一时间阅读 Ruby Magic 的文章，请[订阅我们的 Ruby Magic 新闻通讯，绝不错过任何一篇文章](https://blog.appsignal.com/ruby-magic)!**'
- en: '**P.P.S. Did you know AppSignal has an integration for [Rails](https://www.appsignal.com/ruby/rails-monitoring)
    and [Hanami](https://www.appsignal.com/ruby/hanami-monitoring)?**'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**P.P.S. 您知道 AppSignal 已经为 [Rails](https://www.appsignal.com/ruby/rails-monitoring)
    和 [Hanami](https://www.appsignal.com/ruby/hanami-monitoring) 提供了集成吗？**'
