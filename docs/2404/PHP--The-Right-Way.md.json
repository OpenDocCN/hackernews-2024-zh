["```\n>  php -S localhost:8000\n```", "```\nbrew unlink php\nbrew link --overwrite php@8.2 \n```", "```\nbrew unlink php\nbrew link --overwrite php@8.3 \n```", "```\nsudo port install php74\nsudo port install php83 \n```", "```\nsudo port select --set php php83 \n```", "```\n    sudo add-apt-repository ppa:ondrej/php \n    ```", "```\n    sudo apt-get -y install lsb-release ca-certificates curl \n    ```", "```\n    sudo curl -sSLo /usr/share/keyrings/deb.sury.org-php.gpg https://packages.sury.org/php/apt.gpg \n    ```", "```\n    sudo sh -c 'echo \"deb [signed-by=/usr/share/keyrings/deb.sury.org-php.gpg] https://packages.sury.org/php/ $(lsb_release -sc) main\" > /etc/apt/sources.list.d/php.list' \n    ```", "```\nphpcs -sw --standard=PSR1 file.php \n```", "```\nphpcbf -w --standard=PSR1 file.php \n```", "```\nphp-cs-fixer fix -v --rules=@PSR1 file.php \n```", "```\n>  php -i\n```", "```\n<?php\nif ($argc !== 2) {\n    echo \"Usage: php hello.php <name>\" . PHP_EOL;\n    exit(1);\n}\n$name = $argv[1];\necho \"Hello, $name\" . PHP_EOL;\n```", "```\n>  php hello.php\nUsage: php hello.php <name>  >  php hello.php world\nHello, world\n```", "```\nphp_value xdebug.remote_host 192.168.?.?\nphp_value xdebug.remote_port 9000\n```", "```\nhttp://your-website.example.com/index.php?XDEBUG_SESSION_START=1 \n```", "```\nmv composer.phar /usr/local/bin/composer\n```", "```\ncomposer require twig/twig:^2.0\n```", "```\ncomposer install\n```", "```\n<?php\nrequire 'vendor/autoload.php';\n```", "```\ncomposer global require phpunit/phpunit\n```", "```\npear install foo\n```", "```\n{  \"repositories\":  [  {  \"type\":  \"package\",  \"package\":  {  \"name\":  \"pear2/pear2-http-request\",  \"version\":  \"2.5.1\",  \"dist\":  {  \"url\":  \"https://github.com/pear2/HTTP_Request/archive/refs/heads/master.zip\",  \"type\":  \"zip\"  }  }  }  ],  \"require\":  {  \"pear2/pear2-http-request\":  \"*\"  },  \"autoload\":  {  \"psr-4\":  {\"PEAR2\\\\HTTP\\\\\":  \"vendor/pear2/pear2-http-request/src/HTTP/\"}  }  }\n```", "```\n<?php\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse PEAR2\\HTTP\\Request;\n\n$request = new Request();\n```", "```\n<?php\n$raw = '22\\. 11\\. 1968';\n$start = DateTime::createFromFormat('d. m. Y', $raw);\n\necho 'Start date: ' . $start->format('Y-m-d') . PHP_EOL;\n```", "```\n<?php\n// create a copy of $start and add one month and 6 days\n$end = clone $start;\n$end->add(new DateInterval('P1M6D'));\n\n$diff = $end->diff($start);\necho 'Difference: ' . $diff->format('%m month, %d days (total: %a days)') . PHP_EOL;\n// Difference: 1 month, 6 days (total: 37 days)\n```", "```\n<?php\nif ($start < $end) {\n    echo \"Start is before the end!\" . PHP_EOL;}\n```", "```\n<?php\n// output all thursdays between $start and $end\n$periodInterval = DateInterval::createFromDateString('first thursday');\n$periodIterator = new DatePeriod($start, $periodInterval, $end, DatePeriod::EXCLUDE_START_DATE);\nforeach ($periodIterator as $date) {\n    // output each date in the period\n    echo $date->format('Y-m-d') . ' ';\n}\n```", "```\n<?php\nheader('Content-Type: text/html; charset=UTF-8')\n```", "```\n<?php\n// Tell PHP that we're using UTF-8 strings until the end of the script\nmb_internal_encoding('UTF-8');\n$utf_set = ini_set('default_charset', 'utf-8');\nif (!$utf_set) {\n    throw new Exception('could not set default_charset to utf-8, please ensure it\\'s set on your system!');\n}\n\n// Tell PHP that we'll be outputting UTF-8 to the browser\nmb_http_output('UTF-8');\n\n// Our UTF-8 test string\n$string = 'Êl síla erin lû e-govaned vîn.';\n\n// Transform the string in some way with a multibyte function\n// Note how we cut the string at a non-Ascii character for demonstration purposes\n$string = mb_substr($string, 0, 15);\n\n// Connect to a database to store the transformed string\n// See the PDO example in this document for more information\n// Note the `charset=utf8mb4` in the Data Source Name (DSN)\n$link = new PDO(\n    'mysql:host=your-hostname;dbname=your-db;charset=utf8mb4',\n    'your-username',\n    'your-password',\n    array(\n        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n        PDO::ATTR_PERSISTENT => false\n    )\n);\n\n// Store our transformed string as UTF-8 in our database\n// Your DB and tables are in the utf8mb4 character set and collation, right?\n$handle = $link->prepare('insert into ElvishSentences (Id, Body, Priority) values (default, :body, :priority)');\n$handle->bindParam(':body', $string, PDO::PARAM_STR);\n$priority = 45;\n$handle->bindParam(':priority', $priority, PDO::PARAM_INT); // explicitly tell pdo to expect an int\n$handle->execute();\n\n// Retrieve the string we just stored to prove it was stored correctly\n$handle = $link->prepare('select * from ElvishSentences where Id = :id');\n$id = 7;\n$handle->bindParam(':id', $id, PDO::PARAM_INT);\n$handle->execute();\n\n// Store the result into an object that we'll output later in our HTML\n// This object won't kill your memory because it fetches the data Just-In-Time to\n$result = $handle->fetchAll(\\PDO::FETCH_OBJ);\n\n// An example wrapper to allow you to escape data to html\nfunction escape_to_html($dirty){\n    echo htmlspecialchars($dirty, ENT_QUOTES, 'UTF-8');\n}\n\nheader('Content-Type: text/html; charset=UTF-8'); // Unnecessary if your default_charset is set to utf-8 already\n?><!doctype html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>UTF-8 test page</title>\n    </head>\n    <body>\n        <?php\n        foreach($result as $row){\n            escape_to_html($row->Body);  // This should correctly output our transformed UTF-8 string to the browser\n        }\n        ?>\n    </body>\n</html>\n```", "```\n<project root>  ├─ src/\n ├─ templates/\n └─ locales/\n    ├─ forum.pot\n    ├─ site.pot\n    ├─ de/\n    │  └─ LC_MESSAGES/\n    │     ├─ forum.mo\n    │     ├─ forum.po\n    │     ├─ site.mo\n    │     └─ site.po\n    ├─ es_ES/\n    │  └─ LC_MESSAGES/\n    │     └─ ...\n    ├─ fr/\n    │  └─ ...\n    ├─ pt_BR/\n    │  └─ ...\n    └─ pt_PT/\n       └─ ...\n```", "```\nmsgid \"\"\nmsgstr \"\"\n\"Language: pt_BR\\n\"\n\"Content-Type: text/plain; charset=UTF-8\\n\"\n\"Plural-Forms: nplurals=2; plural=(n > 1);\\n\"\n\nmsgid \"We are now translating some strings\"\nmsgstr \"Nós estamos traduzindo algumas strings agora\"\n\nmsgid \"Hello %1$s! Your last visit was on %2$s\"\nmsgstr \"Olá %1$s! Sua última visita foi em %2$s\"\n\nmsgid \"Only one unread message\"\nmsgid_plural \"%d unread messages\"\nmsgstr[0] \"Só uma mensagem não lida\"\nmsgstr[1] \"%d mensagens não lidas\"\n```", "```\n<?php include 'i18n_setup.php' ?>\n<div id=\"header\">\n    <h1><?=sprintf(gettext('Welcome, %s!'), $name)?></h1>\n    <!-- code indented this way only for legibility -->\n    <?php if ($unread): ?>\n        <h2><?=sprintf(\n            ngettext('Only one unread message',\n                     '%d unread messages',\n                     $unread),\n            $unread)?>\n        </h2>\n    <?php endif ?>\n</div>\n\n<h1><?=gettext('Introduction')?></h1>\n<p><?=gettext('We\\'re now translating some strings')?></p>\n```", "```\n<?php\n/**\n * Verifies if the given $locale is supported in the project\n * @param string $locale\n * @return bool\n */\nfunction valid($locale) {\n   return in_array($locale, ['en_US', 'en', 'pt_BR', 'pt', 'es_ES', 'es']);\n}\n\n//setting the source/default locale, for informational purposes\n$lang = 'en_US';\n\nif (isset($_GET['lang']) && valid($_GET['lang'])) {\n    // the locale can be changed through the query-string\n    $lang = $_GET['lang'];    //you should sanitize this!\n    setcookie('lang', $lang); //it's stored in a cookie so it can be reused\n} elseif (isset($_COOKIE['lang']) && valid($_COOKIE['lang'])) {\n    // if the cookie is present instead, let's just keep it\n    $lang = $_COOKIE['lang']; //you should sanitize this!\n} elseif (isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {\n    // default: look for the languages the browser says the user accepts\n    $langs = explode(',', $_SERVER['HTTP_ACCEPT_LANGUAGE']);\n    array_walk($langs, function (&$lang) { $lang = strtr(strtok($lang, ';'), ['-' => '_']); });\n    foreach ($langs as $browser_lang) {\n        if (valid($browser_lang)) {\n            $lang = $browser_lang;\n            break;\n        }\n    }\n}\n\n// here we define the global system locale given the found language\nputenv(\"LANG=$lang\");\n\n// this might be useful for date functions (LC_TIME) or money formatting (LC_MONETARY), for instance\nsetlocale(LC_ALL, $lang);\n\n// this will make Gettext look for ../locales/<lang>/LC_MESSAGES/main.mo\nbindtextdomain('main', '../locales');\n\n// indicates in what encoding the file should be read\nbind_textdomain_codeset('main', 'UTF-8');\n\n// if your application has additional domains, as cited before, you should bind them here as well\nbindtextdomain('forum', '../locales');\nbind_textdomain_codeset('forum', 'UTF-8');\n\n// here we indicate the default domain the gettext() calls will respond to\ntextdomain('main');\n\n// this would look for the string in forum.mo instead of main.mo\n// echo dgettext('forum', 'Welcome back!');\n?>\n```", "```\n<?php\nnamespace Database;\n\nclass Database\n{\n    protected $adapter;\n\n    public function __construct()\n    {\n        $this->adapter = new MySqlAdapter;\n    }\n}\n\nclass MysqlAdapter {}\n```", "```\n<?php\nnamespace Database;\n\nclass Database\n{\n    public function __construct(protected MySqlAdapter $adapter)\n    {\n    }\n}\n\nclass MysqlAdapter {}\n```", "```\n<?php\nnamespace Database;\n\nclass Database\n{\n    public function __construct(protected AdapterInterface $adapter)\n    {\n    }\n}\n\ninterface AdapterInterface {}\n\nclass MysqlAdapter implements AdapterInterface {}\n```", "```\n<?php\n// PDO + MySQL\n$pdo = new PDO('mysql:host=example.com;dbname=database', 'user', 'password');\n$statement = $pdo->query(\"SELECT some_field FROM some_table\");\n$row = $statement->fetch(PDO::FETCH_ASSOC);\necho htmlentities($row['some_field']);\n\n// PDO + SQLite\n$pdo = new PDO('sqlite:/path/db/foo.sqlite');\n$statement = $pdo->query(\"SELECT some_field FROM some_table\");\n$row = $statement->fetch(PDO::FETCH_ASSOC);\necho htmlentities($row['some_field']);\n```", "```\n<?php\n$pdo = new PDO('sqlite:/path/db/users.db');\n$pdo->query(\"SELECT name FROM users WHERE id = \" . $_GET['id']); // <-- NO!\n```", "```\n<?php\n$pdo = new PDO('sqlite:/path/db/users.db');\n$stmt = $pdo->prepare('SELECT name FROM users WHERE id = :id');\n$id = filter_input(INPUT_GET, 'id', FILTER_SANITIZE_NUMBER_INT); // <-- filter your data first (see [Data Filtering](#data_filtering)), especially important for INSERT, UPDATE, etc.\n$stmt->bindParam(':id', $id, PDO::PARAM_INT); // <-- Automatically sanitized for SQL by PDO\n$stmt->execute();\n```", "```\n<ul>\n<?php\nforeach ($db->query('SELECT * FROM table') as $row) {\n    echo \"<li>\".$row['field1'].\" - \".$row['field1'].\"</li>\";\n}\n?>\n</ul>\n```", "```\n<?php\nfunction getAllFoos($db) {\n    return $db->query('SELECT * FROM table');\n}\n\n$results = getAllFoos($db);\nforeach ($results as $row) {\n    echo \"<li>\".$row['field1'].\" - \".$row['field1'].\"</li>\"; // BAD!!\n}\n```", "```\n<?php\n$db = new PDO('mysql:host=localhost;dbname=testdb;charset=utf8mb4', 'username', 'password');\n\n// Make your model available\ninclude 'models/FooModel.php';\n\n// Create an instance\n$fooModel = new FooModel($db);\n// Get the list of Foos\n$fooList = $fooModel->getAllFoos();\n\n// Show the view\ninclude 'views/foo-list.php';\n```", "```\n<?php\nclass FooModel\n{\n    public function __construct(protected PDO $db)\n    {\n    }\n\n    public function getAllFoos() {\n        return $this->db->query('SELECT * FROM table');\n    }\n}\n```", "```\n<?php foreach ($fooList as $row): ?>\n    <li><?= $row['field1'] ?> - <?= $row['field1'] ?></li>\n<?php endforeach ?>\n```", "```\n<?php // user_profile.php ?>\n\n<?php $this->insert('header', ['title' => 'User Profile']) ?>\n\n<h1>User Profile</h1>\n<p>Hello, <?=$this->escape($name)?></p>\n\n<?php $this->insert('footer') ?>\n```", "```\n<?php // template.php ?>\n\n<html>\n<head>\n    <title><?=$title?></title>\n</head>\n<body>\n\n<main>\n    <?=$this->section('content')?>\n</main>\n\n</body>\n</html>\n```", "```\n<?php // user_profile.php ?>\n\n<?php $this->layout('template', ['title' => 'User Profile']) ?>\n\n<h1>User Profile</h1>\n<p>Hello, <?=$this->escape($name)?></p>\n```", "```\n{% include 'header.html' with {'title': 'User Profile'} %}\n\n<h1>User Profile</h1>\n<p>Hello, {{ name }}</p>\n\n{% include 'footer.html' %}\n```", "```\n// template.html\n\n<html>\n<head>\n    <title>{% block title %}{% endblock %}</title>\n</head>\n<body>\n\n<main>\n    {% block content %}{% endblock %}\n</main>\n\n</body>\n</html>\n```", "```\n// user_profile.html\n\n{% extends \"template.html\" %}\n\n{% block title %}User Profile{% endblock %}\n{% block content %}\n    <h1>User Profile</h1>\n    <p>Hello, {{ name }}</p>\n{% endblock %}\n```", "```\n$  php -a\nphp >  echo $foo;\nNotice: Undefined variable: foo in php shell code on line 1\n```", "```\n$  python\n>>> print foo\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module> NameError: name 'foo' is not defined\n```", "```\n<?php\nerror_reporting(E_ERROR | E_WARNING);\n```", "```\n<?php\necho @$foo['bar'];\n```", "```\n<?php\n// Null Coalescing Operator\necho $foo['bar'] ?? '';\n```", "```\nxdebug.scream = On\n```", "```\n<?php\nini_set('xdebug.scream', '1')\n```", "```\n<?php\n$email = new Fuel\\Email;\n$email->subject('My Subject');\n$email->body('How the heck are you?');\n$email->to('guy@example.com', 'Some Guy');\n\ntry\n{\n    $email->send();\n}\ncatch(Fuel\\Email\\ValidationFailedException $e)\n{\n    // The validation failed\n}\ncatch(Fuel\\Email\\SendingFailedException $e)\n{\n    // The driver could not send the email\n}\nfinally\n{\n    // Executed regardless of whether an exception has been thrown, and before normal execution resumes\n}\n```", "```\n<?php\nclass ValidationException extends Exception {}\n```", "```\n<?php\nrequire 'password.php';\n\n$passwordHash = password_hash('secret-password', PASSWORD_DEFAULT);\n\nif (password_verify('bad-password', $passwordHash)) {\n    // Correct Password\n} else {\n    // Wrong password\n}\n```", "```\ndisplay_errors = On\ndisplay_startup_errors = On\nerror_reporting = -1\nlog_errors = On\n```", "```\ndisplay_errors = Off\ndisplay_startup_errors = Off\nerror_reporting = E_ALL\nlog_errors = On\n```", "```\ndocker run -d --name my-php-webserver -p 8080:80 -v /path/to/your/php/files:/var/www/html/ php:apache\n```", "```\n<?php\n// check if there is data saved as 'expensive_data' in cache\n$data = apcu_fetch('expensive_data');\nif ($data === false) {\n    // data is not in cache; save result of expensive call for later use\n    apcu_add('expensive_data', $data = get_expensive_data());\n}\n\nprint_r($data);\n```", "```\n<?php\n/**\n * @author A Name <a.name@example.com>\n * @link https://www.phpdoc.org/docs/latest/index.html\n */\nclass DateTimeHelper\n{\n    /**\n     * @param mixed $anything Anything that we can convert to a \\DateTime object\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return \\DateTime\n     */\n    public function dateTimeFromAnything($anything)\n    {\n        $type = gettype($anything);\n\n        switch ($type) {\n            // Some code that tries to return a \\DateTime object\n        }\n\n        throw new \\InvalidArgumentException(\n            \"Failed Converting param of type '{$type}' to DateTime object\"\n        );\n    }\n\n    /**\n     * @param mixed $date Anything that we can convert to a \\DateTime object\n     *\n     * @return void\n     */\n    public function printISO8601Date($date)\n    {\n        echo $this->dateTimeFromAnything($date)->format('c');\n    }\n\n    /**\n     * @param mixed $date Anything that we can convert to a \\DateTime object\n     */\n    public function printRFC2822Date($date)\n    {\n        echo $this->dateTimeFromAnything($date)->format('r');\n    }\n}\n```"]