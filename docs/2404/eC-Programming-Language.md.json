["```\nimport \"ecere\"\n#include <stdio.h>\n\nclass Spell\n{\npublic:\n   int difficulty;\n   int damage;\n   int manaCost;\n\n   virtual void Backfire(Creature self, Creature opponent)\n   {\n      self.health -= damage/4;\n   }\n\n   virtual void Success(Creature self, Creature opponent)\n   {\n      if(damage > opponent.health) damage = opponent.health;\n      PrintLn(self._class.name, \" did \", damage, \" damage to \", opponent._class.name, \".\");\n      opponent.health -= damage;\n   }\n}\n\nclass FireBall : Spell { difficulty = 20, damage = 8; manaCost = 5; };\nclass Lightning : Spell  { difficulty = 10, damage = 4; manaCost = 3; };\nclass Healing : Spell\n{\n   difficulty = 20;\n   manaCost = 5;\n   void Success(Creature self, Creature opponent)\n   {\n      self.health += self.maxHealth / 5;\n      if(self.health > self.maxHealth) self.health = self.maxHealth;\n   }\n\n   void Backfire(Creature self, Creature opponent)\n   {\n      self.health -= damage/4;\n   }\n};\n\nclass Creature\n{\npublic:\n   int xp;\n   int health, maxHealth;\n   int mana, maxMana;\n   int dexterity;\n   int magic;\n   int strength;\n   int gold;\n   Array<Spell> spells;\n   Array<Equipment> equipment;\n\n   void CastSpell(Spell spell, Creature opponent)\n   {\n      if(mana >= spell.manaCost)\n      {\n         int r = GetRandom(0, spell.difficulty);\n         mana -= spell.manaCost;\n         if(magic >= r)\n         {\n            PrintLn(_class.name, \" cast \", spell._class.name, \" successfully.\");\n            spell.Success(this, opponent);\n         }\n         else if(r > magic * 2)\n         {\n            PrintLn(_class.name, \"'s \", spell._class.name, \" backfired.\");\n            spell.Backfire(this, opponent);\n         }\n         else\n            PrintLn(_class.name, \" unsucessfully cast \", spell._class.name, \".\");\n      }\n   }\n\n   void Attack(Creature opponent)\n   {\n      Weapon weapon = (Weapon)(equipment ? equipment[EquipmentSlot::rightHand] : null);\n      int d, r, o;\n      if(!weapon) weapon = bareHand;\n      o = GetRandom(0, opponent.dexterity);\n      d = GetRandom(0, dexterity - weapon.difficulty);\n      if(d > o)\n      {\n         int d = GetRandom(1, strength);\n         int where = GetRandom(0, 100);\n         int armor = 0;\n         int howBad = 0;\n         EquipmentSlot slot;\n         int damage;\n\n         if(where < 60)\n         {\n            slot = body;\n            howBad = 2;\n         }\n         else if(where < 80)\n         {\n            slot = head;\n            howBad = 3;\n         }\n         else if(where < 95)\n         {\n            slot = legs;\n            howBad = 1;\n         }\n         else\n         {\n            slot = feet;\n            howBad = 1;\n         }\n         if(opponent.equipment && opponent.equipment[slot])\n            armor = ((Armor)opponent.equipment[slot]).decDamage;\n         damage = Max(1, (d * weapon.damage - armor) * howBad / 10);\n         if(damage > opponent.health) damage = opponent.health;\n         opponent.health -= damage;\n         PrintLn(_class.name, \" did \", damage, \" damage to \", opponent._class.name, \".\");\n      }\n      else\n         PrintLn(_class.name, \" missed.\");\n   }\n}\n\nWeapon bareHand { difficulty = 3, damage = 1 };\n\nenum EquipmentSlot { leftHand, rightHand, head, feet, body, legs, ring, ring2, ring3, ring4 };\n\nclass Equipment\n{\npublic:\n   int value;\n   EquipmentSlot slot;\n   bool twoHands;\n\n   virtual void Show();\n}\n\nclass Armor : Equipment\n{\npublic:\n   int decDamage;\n\n   void Show()\n   {\n      Print(\"Damage -\", decDamage);\n   }\n}\n\nclass Weapon : Equipment\n{\npublic:\n   int difficulty;\n   int damage;\n\n   void Show()\n   {\n      Print(\"Difficulty: \", difficulty, \", Damage +\", damage);\n   }\n}\n\nclass LightShield : Armor { decDamage = 2; slot = leftHand; value = 20; };\nclass HeavyShield : Armor { decDamage = 5; slot = leftHand; value = 100; };\nclass Helmet      : Armor { decDamage = 5; slot = head; value = 60; };\nclass SteelBoots  : Armor { decDamage = 2; slot = feet; value = 40; };\nclass LightArmor  : Armor { decDamage = 4; slot = body; value = 40; };\nclass PlateArmor  : Armor { decDamage = 8; slot = body; value = 150; };\nclass PlateLeggings : Armor { decDamage = 3; slot = legs; value = 50; };\n\nclass Dagger      : Weapon { difficulty = 2, damage = 2, value  = 10, slot = rightHand; };\nclass LongSword   : Weapon { difficulty = 4, damage = 4, value  = 40, slot = rightHand; };\nclass BattleSword : Weapon { difficulty = 8, damage = 10, value = 100, slot = rightHand, twoHands = true; };\n\nclass Slug           : Creature { xp = 10;  maxHealth = 10;  dexterity = 7; strength = 5; gold = 1; }\nclass GiantRat       : Creature { xp = 30;  maxHealth = 20;  dexterity = 9; strength = 8; gold = 3; }\nclass GiantSpider    : Creature { xp = 50;  maxHealth = 30;  dexterity = 20; strength = 10; gold = 4; }\nclass Bat            : Creature { xp = 70;  maxHealth = 10;  dexterity = 40; strength = 5; gold = 6; }\nclass Goblin         : Creature\n{\n   xp = 120; maxHealth = 50;  dexterity = 50; strength = 25; gold = 10;\n}\nclass Ghoul          : Creature { xp = 250; maxHealth = 70;  dexterity = 20; strength = 30; gold = 30; }\nclass DarkKnight     : Creature\n{\n   xp = 500; maxHealth = 100; dexterity = 50; strength = 50; gold = 50; magic = 30; maxMana = 50;\n   spells = { [ FireBall { } ] };\n   equipment = { [ HeavyShield { }, LongSword { }, Helmet { }, SteelBoots { }, PlateArmor { }, PlateLeggings { }, null, null, null, null ] };\n};\n\nArray<Class> badGuys { [ class(Slug), class(GiantRat), class(GiantSpider), class(Goblin), class(Bat), class(DarkKnight), class(Ghoul) ] };\n\nclass EvilSorcerer   : Creature\n{\n   xp = 1000; maxHealth = 1000; dexterity = 75; strength = 50; gold = 20000; magic = 50; maxMana = 500;\n   equipment = { [ HeavyShield { }, LongSword { }, Helmet { }, SteelBoots { }, PlateArmor { }, PlateLeggings { }, null, null, null, null ] };\n   spells = { [ FireBall { }, Lightning { }, Healing { } ] };\n}\n\nArray<Equipment> shopInventory\n{\n   [\n      Dagger { },\n      LongSword { },\n      BattleSword { },\n\n      LightShield { },\n      HeavyShield { },\n      Helmet { },\n      SteelBoots { },\n      LightArmor { },\n      PlateArmor { },\n      PlateLeggings { }\n   ]\n};\n\nenum GameState { realm, shop, fight, training, sorcerer, end };\n\nclass Player : Creature\n{\npublic:\n   int manaPotions;\n   int healthPotions;\n   int training;\n   spells = { [ FireBall { }, Lightning { }, Healing { } ] };\n   equipment = { [ null, null, null, null, null, null, null, null, null, null ] };\n}\n\nPlayer player { xp = 0, maxHealth = 40, health = 40, mana = 20, maxMana = 20, magic = 10, strength = 10, dexterity = 10, gold = 50, training = 2 };\nCreature opponent;\n\nclass RPGApp : Application\n{\n   GameState state;\n   char command[1024];\n\n   void PrintStatus()\n   {\n      PrintLn(\"\");\n      switch(state)\n      {\n         case sorcerer:\n         case fight:\n            PrintLn(\"You are fighting a \", opponent._class.name);\n            PrintLn(opponent._class.name, \"'s Health: \", opponent.health, \"/\",opponent.maxHealth);\n            PrintLn(\"Your Health: \", player.health, \"/\", player.maxHealth, \", Mana: \", player.mana, \"/\",player.maxMana);\n            PrintLn(\"[A]ttack\");\n            PrintLn(\"[R]un\");\n            if(player.healthPotions)\n               PrintLn(\"[H]ealth potion\");\n            if(player.manaPotions)\n               PrintLn(\"[M]ana potion\");\n            if(player.spells.count)\n            {\n               int n = 1;\n               PrintLn(\"Cast a spell:\");\n               for(s : player.spells)\n                  PrintLn(\"   \", n++, \". \", s._class.name);\n            }\n            break;\n         case shop:\n         {\n            int n = 1;\n            PrintLn(\"Welcome to the village shop! What could we interest you in?\");\n            PrintLn(\"   [H]ealth potions (10)  [M]ana potions (15)  Go [B]ack to the realm\");\n            PrintLn(\"   You have \", player.gold, \" gold coins\");\n            for(i : shopInventory)\n            {\n               Print(\"   \", n++, \". \", i._class.name, \": \");\n               i.Show();\n               PrintLn(\" (\", i.value, \")\");\n            }\n            break;\n         }\n         case realm:\n            PrintLn(\"You are wandering in the realm. What would you like to do?\");\n            PrintLn(\"[F]ight bad guys   Visit the [S]hop   [R]est     St[a]ts\");\n            if(player.xp >= 1000)\n               PrintLn(\"Are you ready to rescue the [P]rincess?\");\n            if(player.training)\n               PrintLn(\"Do you want to [T]rain? You have \", player.training, \" training points.\");\n            break;\n         case training:\n            PrintLn(\"You have \", player.training, \" training points. What would you like to improve?\");\n            PrintLn(\"[H]ealth\");\n            PrintLn(\"[M]ana\");\n            PrintLn(\"[S]trength\");\n            PrintLn(\"[D]exterity\");\n            PrintLn(\"Ma[g]ic\");\n            PrintLn(\"   Go [B]ack to the realm\");\n            break;\n      }\n   }\n\n   void GetCommand()\n   {\n      gets(command);\n      strlwr(command);\n   }\n   bool AreYouSure()\n   {\n      char input[1024];\n      gets(input);\n      strlwr(command);\n      return input[0] == 'y';\n   }\n\n   void OpponentAttacks()\n   {\n      if(opponent.health > 0 && player.health > 0)\n      {\n         if(opponent.spells && opponent.spells.count && opponent.mana > opponent.maxMana / 5)\n         {\n            if(GetRandom(0,1) == 1)\n            {\n               int s = GetRandom(0, opponent.spells.count-1);\n               if(opponent.mana >= opponent.spells[s].manaCost)\n                  opponent.CastSpell(opponent.spells[s], player);\n               else\n                  opponent.Attack(player);\n            }\n            else\n               opponent.Attack(player);\n         }\n         else\n            opponent.Attack(player);\n      }\n      if(player.health <= 0)\n      {\n         PrintLn(\"You died :(\");\n         state = end;\n      }\n      else if(opponent.health <= 0)\n      {\n         int trainingPointsBefore = player.xp / 50;\n         PrintLn(\"Congratulations! You won the fight. You gained \", opponent.xp/10, \" xp points and \", opponent.gold, \" gold.\");\n         player.gold += opponent.gold;\n         player.xp += opponent.xp / 10;\n         player.training += player.xp / 50 - trainingPointsBefore;\n         delete opponent;\n         if(state == sorcerer)\n            PrintLn(\"You saved the princess!! The end.\");\n         state = realm;\n      }\n   }\n\n   void FindOpponent()\n   {\n      while(true)\n      {\n         int c = GetRandom(0, badGuys.count-1);\n         opponent = eInstance_New(badGuys[c]);\n         if(opponent.xp < 40 || opponent.xp <= player.xp)\n            break;\n         delete opponent;\n      }\n      opponent.health = opponent.maxHealth;\n      opponent.mana = opponent.maxMana;\n      state = fight;\n   }\n\n   void ProcessCommand()\n   {\n      if(command[0] == 'q')\n      {\n         PrintLn(\"Are you sure you want to quit?\");\n         if(AreYouSure())\n            state = end;\n      }\n      switch(state)\n      {\n         case shop:\n            switch(command[0])\n            {\n               case 'b': state = realm; break;\n               case 'm': case 'h':\n               {\n                  int price = (command[0] == 'm') ? 15 : 10;\n                  if(player.gold < price)\n                     PrintLn(\"You do not have enough gold!\");\n                  else\n                  {\n                     (command[0] == 'm') ? player.manaPotions++ : player.healthPotions++;\n                     player.gold -= price;\n                  }\n                  break;\n               }\n               default:\n               {\n                  int item = atoi(command);\n                  if(item && item <= shopInventory.count)\n                  {\n                     Equipment eq = shopInventory[item-1];\n                     EquipmentSlot slot = eq.slot;\n                     int tradeIn;\n                     Equipment tradeIn1 = null, tradeIn2 = null;\n                     if(slot == ring)\n                        while(player.equipment[slot] && slot < ring4)\n                           slot++;\n\n                     if(slot == rightHand && eq.twoHands)\n                     {\n                        if(player.equipment[EquipmentSlot::leftHand])\n                           tradeIn1 = player.equipment[EquipmentSlot::leftHand];\n                        if(player.equipment[EquipmentSlot::rightHand])\n                           tradeIn2 = player.equipment[EquipmentSlot::rightHand];\n                     }\n                     else if((slot == leftHand || slot == rightHand) && player.equipment[EquipmentSlot::rightHand] && player.equipment[EquipmentSlot::rightHand].twoHands)\n                     {\n                        if(player.equipment[EquipmentSlot::rightHand])\n                           tradeIn1 = player.equipment[EquipmentSlot::rightHand];\n                     }\n                     else if(player.equipment[slot])\n                        tradeIn1 = player.equipment[slot];\n\n                     tradeIn = ((tradeIn1 ? tradeIn1.value : 0) + (tradeIn2 ? tradeIn2.value : 0)) / 2;\n                     if(player.gold + tradeIn < eq.value)\n                        PrintLn(\"You do not have enough gold!\");\n                     else\n                     {\n                        if(player.equipment[slot])\n                           PrintLn(\"You will need to trade in your \", player.equipment[slot]._class.name, \", for \", tradeIn, \".\");\n\n                        PrintLn(\"Are you sure you want to buy this \", eq._class.name, \" for \", eq.value, \"?\");\n                        if(AreYouSure())\n                        {\n                           if(tradeIn1) shopInventory.Add(tradeIn1);\n                           if(tradeIn2) shopInventory.Add(tradeIn2);\n                           player.equipment[slot] = eq;\n                           player.gold += tradeIn - eq.value;\n\n                           shopInventory.Remove(shopInventory.Find(eq));\n\n                           //shopInventory.TakeOut(eq);\n                        }\n                     }\n                  }\n               }\n            }\n            break;\n         case fight:\n         case sorcerer:\n         {\n            bool fightBack = false;\n            switch(command[0])\n            {\n               case 0:\n               case 'a':\n                  player.Attack(opponent);\n                  fightBack = true;\n                  break;\n               case 'm':\n                  if(player.manaPotions)\n                  {\n                     player.manaPotions--;\n                     player.mana += player.maxMana / 5;\n                     if(player.mana > player.maxMana) player.mana = player.maxMana;\n                  }\n                  break;\n               case 'h':\n                  if(player.healthPotions)\n                  {\n                     player.healthPotions--;\n                     player.health += player.maxHealth / 5;\n                     if(player.health > player.maxHealth) player.health = player.maxHealth;\n                  }\n                  break;\n               case 'r':\n                  OpponentAttacks();\n                  if(player.health > 0)\n                     state = realm;\n                  break;\n               default:\n               {\n                  int item = atoi(command);\n                  if(item && item <= player.spells.count)\n                  {\n                     if(player.mana >= player.spells[item-1].manaCost)\n                     {\n                        player.CastSpell(player.spells[item-1], opponent);\n                        fightBack = true;\n                     }\n                     else\n                        PrintLn(\"Not enough mana to cast that spell.\");\n                  }\n               }\n            }\n            if(fightBack)\n               OpponentAttacks();\n            break;\n         }\n         case realm:\n            switch(command[0])\n            {\n               case 'a':\n               {\n                  EquipmentSlot c;\n                  PrintLn(\"\\nYour statistics:\");\n                  PrintLn(\"XP: \", player.xp);\n                  PrintLn(\"Health: \", player.health, \"/\", player.maxHealth);\n                  PrintLn(\"Mana:   \", player.mana, \"/\", player.maxMana);\n                  PrintLn(\"Strength: \", player.strength, \", Dexterity: \", player.dexterity, \", Magic: \", player.magic);\n                  PrintLn(\"Gold: \", player.gold);\n                  PrintLn(\"Equipment:\");\n                  for(c = leftHand; c <= ring4; c++)\n                  {\n                     Equipment eq = player.equipment[c];\n                     if(eq)\n                     {\n                        Print(c, \": \", eq._class.name, \": \");\n                        eq.Show();\n                        PrintLn(\"\");\n                     }\n                  }\n                  if(player.manaPotions)\n                     PrintLn(player.manaPotions, \" mana potions\");\n                  if(player.healthPotions)\n                     PrintLn(player.healthPotions, \" health potions\");\n                  if(player.training)\n                     PrintLn(player.training, \" training points\");\n                  break;\n               }\n               case 's': state = shop; break;\n               case 'b': state = realm; break;\n               case 'f': FindOpponent(); break;\n               case 't': state = training; break;\n               case 'p':\n                  if(player.xp > 1000)\n                  {\n                     opponent = EvilSorcerer { };\n                     state = sorcerer;\n                  }\n                  break;\n               case 0:\n               case 'r':\n                  if(GetRandom(0, 3) == 0)\n                  {\n                     PrintLn(\"Your rest was interrupted!\");\n                     FindOpponent();\n                     OpponentAttacks();\n                  }\n                  else\n                  {\n                     player.health += player.maxHealth / 5;\n                     if(player.health > player.maxHealth) player.health = player.maxHealth;\n                     player.mana += player.maxMana / 5;\n                     if(player.mana > player.maxMana) player.mana = player.maxMana;\n                  }\n                  break;\n            }\n            break;\n         case training:\n         {\n            bool valid = true;\n            switch(command[0])\n            {\n               case 'h': player.health += player.maxHealth / 5; player.maxHealth += player.maxHealth / 5; break;\n               case 'm': player.mana += player.maxMana / 5; player.maxMana += player.maxMana / 5; break;\n               case 's': player.strength += player.strength / 5; break;\n               case 'd': player.dexterity += player.dexterity / 5; break;\n               case 'g': player.magic += player.magic / 5; break;\n               case 'b': state = realm;\n               default: valid = false;\n            }\n            if(valid)\n            {\n               player.training--;\n               if(!player.training)\n                  state = realm;\n            }\n            break;\n         }\n      }\n   }\n\n   void Main()\n   {\n      RandomSeed((uint)(GetTime()*1000));\n      PrintLn(\"Welcome to this great minimalist RPG!\");\n      PrintLn(\"You will need to save the princess from an Evil Sorcerer.\");\n      PrintLn(\"But first you should wander the realm to fight the sorcerer's minions, \");\n      PrintLn(\"gaining experience and equipment in the process. You will need to reach\");\n      PrintLn(\"at least 1000 experience points to search for the sorcerer's hideout.\");\n      PrintLn(\"At any time you can [Q]uit.\");\n      while(state != end)\n      {\n         PrintStatus();\n         GetCommand();\n         ProcessCommand();\n      }\n      system(\"pause\");\n   }\n} \n```"]