- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:08:31'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:08:31'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: You probably don't need GraphQL | Max Stoiber (@mxstbr)
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你可能并不需要 GraphQL | Max Stoiber (@mxstbr)
- en: 来源：[https://mxstbr.com/thoughts/graphql/](https://mxstbr.com/thoughts/graphql/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://mxstbr.com/thoughts/graphql/](https://mxstbr.com/thoughts/graphql/)
- en: I asked, [“Why are you not using GraphQL?”](https://twitter.com/mxstbr/status/1765821895742828915)
    on Twitter, and most of the 150+ responses were some form of “I don’t need it.”
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 Twitter 上问过 [“为什么你不使用 GraphQL？”](https://twitter.com/mxstbr/status/1765821895742828915)，大多数
    150 多个回复都是“我不需要它”的某种形式。
- en: '**And they are right: they probably don’t need GraphQL!**'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**他们是正确的：他们可能确实不需要 GraphQL！**'
- en: You might be surprised to read that from the co-founder of [a GraphQL company](https://stellate.co/).
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会惊讶地读到来自 [一家 GraphQL 公司的联合创始人](https://stellate.co/) 的说法。
- en: Let me explain.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我解释一下。
- en: Why you probably don’t need GraphQL
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么你可能不需要 GraphQL
- en: 'Shortly after its release by Facebook in 2015 (almost ten years ago!), GraphQL
    got a lot of hype because it enabled building typesafe APIs with a better developer
    experience than any other API. All kinds of people adopted it, including:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Facebook 于 2015 年发布它后不久（几乎十年前！），GraphQL 因其能够比其他 API 提供更好的开发者体验构建类型安全的 API
    而受到了广泛关注。各种各样的人开始采用它，包括：
- en: Early-stage startups with small teams
  id: totrans-split-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 早期阶段的小团队初创企业
- en: Indie hackers building their MVPs
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 独立开发者正在构建他们的 MVP
- en: Companies building products without a UI
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有 UI 的产品构建公司
- en: Microservice teams for service-to-service communication
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于服务间通信的微服务团队
- en: Even database engine teams as their query language
  id: totrans-split-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 甚至是作为其查询语言的数据库引擎团队
- en: But GraphQL wasn’t made for those use cases.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但是 GraphQL 并不适合这些用例。
- en: Facebook invented GraphQL as a central intermediary layer between their many
    end-user-facing clients and many data sources. They made a new language (and thus
    toolchain) to enable it to work across microservices written in different languages.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook 发明了 GraphQL 作为它们众多面向最终用户的客户端和众多数据源之间的中央中介层。他们创造了一种新语言（因此工具链），使其能够在不同语言编写的微服务之间工作。
- en: That makes it a heavy-handed solution for the problem of “I want client-side
    data access to be typesafe.” **Inevitably, better solutions for those use cases
    emerged (like tRPC) and overtook GraphQL in adoption.** And, with the advent of
    React server components, many of these use cases are yet again poised to be even
    further simplified.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得它成为“我希望客户端数据访问是类型安全的”问题的一个笨拙解决方案。**不可避免地，为这些用例出现了更好的解决方案（如 tRPC），并在采用上超越了
    GraphQL。** 随着 React 服务器组件的出现，许多这些用例再次准备变得更加简化。
- en: So then, who even needs GraphQL?
  id: totrans-split-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么，谁需要 GraphQL 呢？
- en: The difficulty of answering “Who needs GraphQL?” is that GraphQL solves many
    different problems. When you speak with two people who use it, you will inevitably
    get two different answers about *why* they’re using it.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 困扰人们的问题是，“谁需要 GraphQL？” GraphQL 解决了许多不同的问题。当你和两个使用它的人交谈时，你将不可避免地得到两种不同的关于他们为什么使用它的答案。
- en: Not only that, but **GraphQL doesn’t obviously *solve* all of these many different
    problems; many just kind of… disappear when you’re using GraphQL.** That makes
    it difficult to realize that GraphQL solves them because you “have to have been
    there before” to see which problems quietly disappeared.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅如此，但是 **GraphQL 并不显然 *解决* 所有这些不同的问题；许多问题只是在使用 GraphQL 时悄然消失。** 这使得很难意识到 GraphQL
    解决了这些问题，因为你“必须曾经经历过”才能看到那些悄然消失的问题。
- en: 'I would know: as part of my job of running a GraphQL company, I’ve spent the
    last three years speaking with thousands of engineers at hundreds of companies
    about their APIs, especially ones building with GraphQL.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道：作为运营 GraphQL 公司的一部分，我过去三年与数千名工程师在数百家公司进行了关于他们的 API 的讨论，特别是那些使用 GraphQL 的公司。
- en: Let me summarize what they’ve told me about the problems GraphQL solved for
    them and how it did.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我总结一下他们告诉我的 GraphQL 解决了他们的问题及其方式。
- en: The problems that GraphQL solves
  id: totrans-split-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GraphQL 解决的问题
- en: 1\. Mobile apps break periodically after API changes
  id: totrans-split-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 1\. API 变更后，移动应用程序定期崩溃
- en: GraphQL only returns the fields the client explicitly requests, so new capabilities
    can be added by adding new types or fields, which is never a breaking change for
    existing clients.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 仅返回客户端明确请求的字段，因此可以通过添加新类型或字段来添加新功能，这对于现有客户端来说永远不是一个破坏性的变化。
- en: On top of that, you can monitor which clients are using which fields because
    they have to specify exactly which data they need.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以监控哪些客户端使用了哪些字段，因为他们必须明确指定他们需要的数据。
- en: 2\. Slow loading times because of request waterfalls and/or overfetching
  id: totrans-split-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2\. 由于请求瀑布和/或过度获取导致的加载时间缓慢
- en: With GraphQL, a client sends one request for all the data it needs to render
    the whole page/view, and the server resolves all of it and sends it back in one
    response—without the duplication introduced by BFFs. (the client can even ask
    the server to stream above-the-fold data first with the `@defer` and `@stream`
    directives)
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GraphQL，客户端仅需发送一个请求获取渲染整个页面/视图所需的所有数据，服务器解析所有数据并一次性返回，**无需 BFFs 引入的重复数据**。（客户端甚至可以使用
    `@defer` 和 `@stream` 指令要求服务器优先流式传输上折叠数据）
- en: 3\. Difficult maintenance and endpoint discovery due to hundreds of duplicative
    one-off endpoints
  id: totrans-split-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 3\. 由于数百个重复的一次性端点而导致的难以维护和端点发现困难
- en: GraphQL centralizes the data access of each entity/resource. When an underlying
    microservice or database changes how it manages its data, that change only has
    to be applied to the single, central place in the API layer rather than having
    to update many endpoints or BFFs.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 集中每个实体/资源的数据访问。当底层微服务或数据库更改其数据管理方式时，只需将此更改应用于 API 层中的单个中心位置，而无需更新多个端点或
    BFFs。
- en: Going one step further, GraphQL enables clients to specify their data needs
    on a component level with fragments. (e.g., a `UserAvatar` component can abstractly
    specify that it needs `UserType.avatarUrl`) So, even on the client, changes must
    be applied only to the specific components the change is related to!
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 更进一步，GraphQL 使客户端能够按组件级别指定其数据需求使用片段。（例如，`UserAvatar` 组件可以抽象地指定它需要 `UserType.avatarUrl`）因此，即使在客户端，变更也只需应用于相关的特定组件！
- en: 4\. Security and performance are a game of whack-a-mole
  id: totrans-split-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 4\. 安全性和性能是一场打地鼠的游戏
- en: GraphQL is the central data access layer for clients, so you can enforce security
    and performance SLAs at as fine-grained a level as you need. Similarly to per-endpoint
    for REST APIs, you can enforce limits per-operation in GraphQL, but you can also
    go more fine-grained and limit per-type or even per-field.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 是客户端的中心数据访问层，因此您可以根据需要在非常精细的级别强制执行安全性和性能 SLA。类似于 REST API 的每个端点，您可以在
    GraphQL 中每个操作强制执行限制，但您还可以更加精细化并限制每种类型甚至每个字段。
- en: '* * *'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: If your company is running into one (or more!) of these problems, you owe it
    to yourselves to consider adding GraphQL to your stack.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果贵公司遇到了这些问题中的一个（或多个！），那么考虑将 GraphQL 加入到技术栈中是必须的。
- en: If you don’t have any of these problems today, you might wonder, “When will
    I hit these problems?” The answer is that it’s difficult to predict because it
    depends on your specific use case. Some companies scale to 50 engineers and millions
    of users without hitting any of these problems. Others hit multiple of these problems
    while building their MVPs.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果今天你没有遇到这些问题，你可能会想：“我什么时候会遇到这些问题？”答案是很难预测，因为这取决于您的具体用例。有些公司在扩展到50名工程师和数百万用户时，仍然没有遇到这些问题。而其他公司在构建其
    MVP 时就遇到了多个这些问题。
- en: 'To give some guidance from my experience: **at the latest when you have 100+
    engineers, you will likely run into at least one of these problems.**'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验给出一些建议：**最迟在您有100名以上的工程师时，您可能会遇到至少一个这些问题。**
- en: 'That’s why most of the responders to my tweet were right: they probably don’t
    need GraphQL.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我的推文中大多数回复者都是正确的：他们可能不需要 GraphQL。
- en: 'One thing is for certain, though: whenever you hit any of these problems, GraphQL
    will be there to solve them for you.'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有一件事是确定的：无论何时遇到这些问题之一，GraphQL 都会在那里为您解决。
- en: '*Stay tuned for my next essay, which will explain the counterintuitive path
    that we have learned works best to adopt GraphQL successfully. (subscribe to the
    newsletter below if you don’t want to miss it!)*'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*敬请期待我的下一篇文章，将解释我们已经学到的最佳采用 GraphQL 成功的逆向路径。（如果您不想错过，请订阅下面的通讯！）*'
