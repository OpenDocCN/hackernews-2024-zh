- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:08:31'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: You probably don't need GraphQL | Max Stoiber (@mxstbr)
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://mxstbr.com/thoughts/graphql/](https://mxstbr.com/thoughts/graphql/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I asked, [“Why are you not using GraphQL?”](https://twitter.com/mxstbr/status/1765821895742828915)
    on Twitter, and most of the 150+ responses were some form of “I don’t need it.”
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: '**And they are right: they probably don’t need GraphQL!**'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: You might be surprised to read that from the co-founder of [a GraphQL company](https://stellate.co/).
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Let me explain.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Why you probably don’t need GraphQL
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Shortly after its release by Facebook in 2015 (almost ten years ago!), GraphQL
    got a lot of hype because it enabled building typesafe APIs with a better developer
    experience than any other API. All kinds of people adopted it, including:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: Early-stage startups with small teams
  id: totrans-split-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Indie hackers building their MVPs
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Companies building products without a UI
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Microservice teams for service-to-service communication
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even database engine teams as their query language
  id: totrans-split-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: But GraphQL wasn’t made for those use cases.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Facebook invented GraphQL as a central intermediary layer between their many
    end-user-facing clients and many data sources. They made a new language (and thus
    toolchain) to enable it to work across microservices written in different languages.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: That makes it a heavy-handed solution for the problem of “I want client-side
    data access to be typesafe.” **Inevitably, better solutions for those use cases
    emerged (like tRPC) and overtook GraphQL in adoption.** And, with the advent of
    React server components, many of these use cases are yet again poised to be even
    further simplified.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: So then, who even needs GraphQL?
  id: totrans-split-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The difficulty of answering “Who needs GraphQL?” is that GraphQL solves many
    different problems. When you speak with two people who use it, you will inevitably
    get two different answers about *why* they’re using it.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: Not only that, but **GraphQL doesn’t obviously *solve* all of these many different
    problems; many just kind of… disappear when you’re using GraphQL.** That makes
    it difficult to realize that GraphQL solves them because you “have to have been
    there before” to see which problems quietly disappeared.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: 'I would know: as part of my job of running a GraphQL company, I’ve spent the
    last three years speaking with thousands of engineers at hundreds of companies
    about their APIs, especially ones building with GraphQL.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: Let me summarize what they’ve told me about the problems GraphQL solved for
    them and how it did.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: The problems that GraphQL solves
  id: totrans-split-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 1\. Mobile apps break periodically after API changes
  id: totrans-split-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: GraphQL only returns the fields the client explicitly requests, so new capabilities
    can be added by adding new types or fields, which is never a breaking change for
    existing clients.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: On top of that, you can monitor which clients are using which fields because
    they have to specify exactly which data they need.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Slow loading times because of request waterfalls and/or overfetching
  id: totrans-split-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With GraphQL, a client sends one request for all the data it needs to render
    the whole page/view, and the server resolves all of it and sends it back in one
    response—without the duplication introduced by BFFs. (the client can even ask
    the server to stream above-the-fold data first with the `@defer` and `@stream`
    directives)
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Difficult maintenance and endpoint discovery due to hundreds of duplicative
    one-off endpoints
  id: totrans-split-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: GraphQL centralizes the data access of each entity/resource. When an underlying
    microservice or database changes how it manages its data, that change only has
    to be applied to the single, central place in the API layer rather than having
    to update many endpoints or BFFs.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: Going one step further, GraphQL enables clients to specify their data needs
    on a component level with fragments. (e.g., a `UserAvatar` component can abstractly
    specify that it needs `UserType.avatarUrl`) So, even on the client, changes must
    be applied only to the specific components the change is related to!
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Security and performance are a game of whack-a-mole
  id: totrans-split-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: GraphQL is the central data access layer for clients, so you can enforce security
    and performance SLAs at as fine-grained a level as you need. Similarly to per-endpoint
    for REST APIs, you can enforce limits per-operation in GraphQL, but you can also
    go more fine-grained and limit per-type or even per-field.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: If your company is running into one (or more!) of these problems, you owe it
    to yourselves to consider adding GraphQL to your stack.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t have any of these problems today, you might wonder, “When will
    I hit these problems?” The answer is that it’s difficult to predict because it
    depends on your specific use case. Some companies scale to 50 engineers and millions
    of users without hitting any of these problems. Others hit multiple of these problems
    while building their MVPs.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: 'To give some guidance from my experience: **at the latest when you have 100+
    engineers, you will likely run into at least one of these problems.**'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s why most of the responders to my tweet were right: they probably don’t
    need GraphQL.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: 'One thing is for certain, though: whenever you hit any of these problems, GraphQL
    will be there to solve them for you.'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: '*Stay tuned for my next essay, which will explain the counterintuitive path
    that we have learned works best to adopt GraphQL successfully. (subscribe to the
    newsletter below if you don’t want to miss it!)*'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
