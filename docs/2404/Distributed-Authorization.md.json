["```\n// Get this user's roles on the repo  const userRoles = db.getUserRoles({ userId: user.id, repoId: issue.repoId}); \n// Check whether the user has a role that confers read access  if(!userRoles.some((r) => [\"maintainer\", \"admin\"].includes(r)) {\n  throw  new PermissionDeniedRoleRequired(\"maintainer\"); }\n```", "```\n# SQL for getting the repository roles for a user. select \"role\"  from repository_role rr join repository r on rr.repo_id = r.id\njoin organization_member om on r.org_id = om.org_id\nwhere om.user_id = ?\n    and r.id = ?\n```", "```\nallow(user: User, \"read\", org: Organization) if   has_role(user, \"member\", org); \t\nhas_role(User{\"alice\"}, \"member\", Organization{\"acme\"});\n```", "```\n@app.route(\"/repo/<name>\") def repo_show(name):\n    repo = Repository.get_by_name(name)\n\n  try:\n oso.authorize(User.get_current_user(), \"read\", repo)\n\n  return f\"<h1>A Repo</h1><p>Welcome to repo {repo.name}</p>\", 200     except NotFoundError:\n  return f\"<h1>Whoops!</h1><p>Repo named {name} was not found</p>\", 404\n```", "```\noso.authorize(<User>, <action>, <resource>)\n```"]