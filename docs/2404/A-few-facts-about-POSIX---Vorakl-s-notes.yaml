- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '类别: 未分类'
- en: 'date: 2024-05-27 13:41:21'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-05-27 13:41:21'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: A few facts about POSIX - Vorakl's notes
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有关 POSIX 的几个事实 - Vorakl 的笔记
- en: 来源：[https://vorakl.com/articles/posix/](https://vorakl.com/articles/posix/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://vorakl.com/articles/posix/](https://vorakl.com/articles/posix/)
- en: '[TLDR: quick summary of the article](#summary)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[TLDR: 文章的快速摘要](#summary)'
- en: How did we get there?
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们是如何做到的？
- en: In the early days of computing, programmers could only dream of portability.
    All programs were written directly in machine code for each computer architecture
    they were intended to run on. [Assembly languages](https://en.wikipedia.org/wiki/Assembly_language)
    with mnemonic names for each CPU instruction and other goodies made programmers'
    lives a little easier, but programs were still architecture-specific. Operating
    systems (OS) had not yet been invented, so a program not only controlled the entire
    computer system, it also had to initialize and manage the peripherals. In fact,
    such bare-metal programs implemented drivers for every device they used. And every
    time a program needed to run on hardware with a different architecture, it was
    literally rewritten to accommodate a difference in the [CPU instruction](https://en.wikipedia.org/wiki/Instruction_set_architecture)
    set, memory layout, and so on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机早期，程序员只能梦想可移植性。所有程序都直接用于每台计算机架构的机器码编写。[汇编语言](https://en.wikipedia.org/wiki/Assembly_language)为每个
    CPU 指令提供助记符名称等便利，使程序员的生活稍微轻松了一些，但程序仍然是特定于架构的。操作系统（OS）还未发明，因此一个程序不仅控制整个计算机系统，还必须初始化和管理外围设备。事实上，这些裸机程序为它们使用的每个设备实现了驱动程序。每当程序需要在具有不同架构的硬件上运行时，它都必须根据[CPU
    指令集架构](https://en.wikipedia.org/wiki/Instruction_set_architecture)、内存布局等差异进行重新编写。
- en: 'This is exactly what happened with Unix, which was originally written in assembly
    language by Ken Thompson over 50 years ago. The first versions of Unix were written
    for the [PDP-7](https://en.wikipedia.org/wiki/PDP-7) platform, and porting it
    to the [PDP-11](https://en.wikipedia.org/wiki/PDP-11) meant rewriting the code.
    When Dennis Ritchie created the C programming language, and [together they](https://www.invent.org/sites/default/files/2019-02/Inductee-UNIX_Thompson_Ritchie.jpg)
    rewrote most of the Unix code in it, software portability suddenly became possible.
    There are two main reasons for this. First, the code written in a high-level programming
    language is platform-agnostic, because compilers translate it into the assembly
    language for a target architecture. This is even more important for target systems
    based on [RISC CPUs](https://en.wikipedia.org/wiki/Reduced_instruction_set_computer),
    as they require writing significantly more assembly instructions than [CISC CPU](https://en.wikipedia.org/wiki/Complex_instruction_set_computer)
    architecture. Even porting Unix to another platform was mostly a matter of adapting
    the architecture-dependent parts of the code. On the other hand, the operating
    system itself abstracts away all hardware specifics from a user program. Programmers
    don''t have to implement multitasking, memory management, or drivers for different
    devices as they used to, because it''s all part of the OS kernel and runs in the
    kernel address space. In contrast, user programs run in the user address space
    and access all of the features provided by the OS through the the system call
    interface. In [Real-time OSes](https://en.wikipedia.org/wiki/Real-time_operating_system),
    such as [Zephyr OS](https://www.zephyrproject.org/), it''s [slightly different](https://www.youtube.com/watch?v=4_uL43V79xw),
    but the idea of memory isolation and protection for user programs is preserved.
    This leads to two conclusions:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Unix 就是这样发生的，50 多年前由 Ken Thompson 用汇编语言编写。Unix 的最初版本是为 [PDP-7](https://en.wikipedia.org/wiki/PDP-7)
    平台编写的，将其移植到 [PDP-11](https://en.wikipedia.org/wiki/PDP-11) 意味着要重写代码。当 Dennis Ritchie
    创建了 C 编程语言，[他们一起](https://www.invent.org/sites/default/files/2019-02/Inductee-UNIX_Thompson_Ritchie.jpg)
    就用它重写了大部分 Unix 代码，软件可移植性突然变得可能。这其中有两个主要原因。首先，用高级编程语言编写的代码与平台无关，因为编译器将其转换为目标体系结构的汇编语言。对于基于
    [RISC CPU](https://en.wikipedia.org/wiki/Reduced_instruction_set_computer) 的目标系统来说，这更加重要，因为它们需要写入比
    [CISC CPU](https://en.wikipedia.org/wiki/Complex_instruction_set_computer) 架构更多的汇编指令。甚至将
    Unix 移植到另一个平台大多数时候只需要调整代码中依赖于体系结构的部分。另一方面，操作系统本身将用户程序与硬件具体细节隔离开来。程序员不必像过去那样为不同的设备实现多任务处理、内存管理或驱动程序，因为这些都是操作系统内核的一部分，并在内核地址空间中运行。相比之下，用户程序在用户地址空间中运行，并通过系统调用接口访问操作系统提供的所有功能。在
    [实时操作系统](https://en.wikipedia.org/wiki/Real-time_operating_system) 如 [Zephyr OS](https://www.zephyrproject.org/)
    中，情况会有 [些许不同](https://www.youtube.com/watch?v=4_uL43V79xw)，但保留了用户程序的内存隔离和保护的思想。由此得出两个结论：
- en: '*User programs become portable when they are written in a high-level programming
    language for a particular OS*. Once both requirements are met, programs are compiled
    into instructions for a target CPU and linked with system functions provided by
    the [libc](https://en.wikipedia.org/wiki/C_standard_library) and OS-specific libraries
    to access the underlying hardware.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户编写的程序在使用特定操作系统的高级编程语言编写后变得更加易于移植。一旦满足这两个条件，程序将被编译成目标 CPU 的指令，并与由[libc](https://en.wikipedia.org/wiki/C_standard_library)和特定操作系统库提供的系统函数链接，以访问底层硬件。
- en: Portability is intended to be achieved **at the source code level**.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可移植性的目标是在**源代码级别**实现的。
- en: The birth of POSIX
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: POSIX的诞生
- en: This could have been the end of the story, but something fateful happened. Due
    to a legal restriction, AT&T was not allowed to sell Unix, so there was no money
    to be made from the newly born OS, which became increasingly popular after it
    was introduced to the world. However, it turned out to be possible to distribute
    Unix to any interested organization for the cost of the media. That's how Unix
    got to Berkeley in 1974 and many other places, leading to the creation of a number
    of OS derivatives. Some of the best known and still popular today are OSes based
    on the software distributed by Berkeley (BSD), e.g. FreeBSD and OpenBSD. Despite
    sharing the same ancestors and principles, each operating system followed its
    own unique path. Each of these operating systems had a unique interface (API)
    and implementation of kernel subsystems, syscalls, different system tools, etc.
    Even libc, which provides common functionality and wrappers on top of syscalls,
    used to be very OS-specific. All of these OSes were Unix-like, but at the same
    time, it wasn't possible to take the source code of a program written for one
    OS and recompile it on another.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 可能本可以就此结束，但发生了一件命运般的事情。由于法律限制，AT&T不能销售Unix，因此无法从这个新生的操作系统中获利，但在向世界推介后，它变得越来越受欢迎。然而，后来证明可以将Unix免费分发给任何有兴趣的组织，只需支付媒体成本。这就是Unix在1974年抵达伯克利和其他许多地方的方式，从而导致了多个操作系统分支的诞生。其中一些最著名且至今仍受欢迎的操作系统基于伯克利分发的软件（BSD），例如FreeBSD和OpenBSD。尽管它们共享相同的祖先和原则，但每个操作系统都走上了自己独特的道路。每个操作系统都有独特的接口（API）和内核子系统的实现，系统调用，不同的系统工具等。即使是libc，它提供了在系统调用之上的通用功能和包装器，也曾非常依赖于特定操作系统。所有这些操作系统都类似于Unix，但同时也无法将一个操作系统编写的程序源代码直接拿来在另一个操作系统上重新编译。
- en: Over 35 years ago, these problems with software portability led to the emergence
    of the first [POSIX standard](https://pubs.opengroup.org/onlinepubs/9699919799/nframe.html)
    in 1988\. The acronym [was coined by Richard Stallman](https://opensource.com/article/19/7/what-posix-richard-stallman-explains),
    who added "X" to the end of *Portable Operating System Interface*. The *POSIX™*
    trademark is currently owned by [IEEE](https://www.ieee.org/about/index.html),
    and *UNIX®* is a registered trademark of [The Open Group](https://www.opengroup.org/about-us).
    It's meant to provide a [specification of the interface](https://www.techtarget.com/whatis/definition/POSIX-Portable-Operating-System-Interface)
    that different Unix operating systems should have in common, including [programming
    languages and tools](https://stackoverflow.com/a/31865755). It's important to
    note that **the interface is portable**, and not the implementation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 35 年前，这些与软件可移植性有关的问题导致了 1988 年第一个 [POSIX 标准](https://pubs.opengroup.org/onlinepubs/9699919799/nframe.html)
    的出现。缩写 [由理查德·斯托曼 (Richard Stallman)](https://opensource.com/article/19/7/what-posix-richard-stallman-explains)
    创造，他在 *Portable Operating System Interface* 后面加上了 "X"。*POSIX™* 商标目前由 [IEEE](https://www.ieee.org/about/index.html)
    拥有，*UNIX®* 是 [The Open Group](https://www.opengroup.org/about-us) 的注册商标。它旨在提供一个
    [接口规范](https://www.techtarget.com/whatis/definition/POSIX-Portable-Operating-System-Interface)，使不同的
    Unix 操作系统拥有共同点，包括 [编程语言和工具](https://stackoverflow.com/a/31865755)。重要的是要注意，**接口是可移植的**，而不是实现。
- en: This was the common ground that made it possible to compile the same source
    code of a user program on any OS without modification, if both sides strictly
    followed the same standard. And this is still true to some extent today, as most
    modern and widely used Unix-like systems, such as Linux, and *BSD, do not strictly
    and completely follow POSIX standard, but rather use it as a guide. In addition
    to POSIX, there is also the [Single UNIX Specification](https://en.wikipedia.org/wiki/Single_UNIX_Specification)
    (SUS), which was consolidated with a few different POSIX standards in 2001\. However,
    the latest SUS (SUSv4 2018) extends the latest POSIX standard (POSIX.1-2017),
    which is essentially its base specification, with the X/Open Curses specification.
    There are [a number of operating systems, such as MacOS](https://en.wikipedia.org/wiki/POSIX#POSIX-oriented_operating_systems),
    which are fully compliant with the POSIX and SUS standards, pass The Open Group
    conformance tests and can therefore be called [Unix operating systems](https://www.opengroup.org/openbrand/register/),
    not just Unix-like. Originally, POSIX was only created for Unix-like OSes, but
    over time it became so popular that its specification, in the form of the [Operating
    System Abstraction Layer (OSAL)](https://en.wikipedia.org/wiki/Operating_system_abstraction_layer),
    was partially implemented (some subset of the interface that applicable to the
    target system) in non-Unix OSes, such as [Windows](https://en.wikipedia.org/wiki/Cygwin),
    [FreeRTOS](https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_POSIX/index.html),
    [Zephyr](https://docs.zephyrproject.org/latest/services/portability/posix/index.html),
    etc.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个共同点，使得在任何操作系统上，只要双方严格遵循同一标准，就能够无需修改地编译用户程序的相同源代码。在今天，这一点在某种程度上仍然成立，因为大多数现代和广泛使用的类Unix系统，如Linux和*BSD，并不严格和完全遵循POSIX标准，而是将其作为指南。除了POSIX之外，还有[Single
    UNIX Specification](https://en.wikipedia.org/wiki/Single_UNIX_Specification)（SUS），它在2001年与几个不同的POSIX标准合并。然而，最新的SUS（SUSv4
    2018）扩展了最新的POSIX标准（POSIX.1-2017），这基本上是其基本规范，并包括了X/Open Curses规范。有一些操作系统，如[MacOS](https://en.wikipedia.org/wiki/POSIX#POSIX-oriented_operating_systems)，完全符合POSIX和SUS标准，通过了开放组的符合性测试，因此不仅仅可以称为类Unix操作系统。最初，POSIX只是为类Unix操作系统创建的，但随着时间的推移，它变得非常流行，以至于其规范以[操作系统抽象层(OSAL)](https://en.wikipedia.org/wiki/Operating_system_abstraction_layer)的形式部分实现（适用于目标系统的接口子集），包括在非Unix操作系统中，如[Windows](https://en.wikipedia.org/wiki/Cygwin)，[FreeRTOS](https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_POSIX/index.html)，[Zephyr](https://docs.zephyrproject.org/latest/services/portability/posix/index.html)等。
- en: The POSIX spec
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: POSIX规范
- en: The very first standard was ratified by the IEEE in 1988 as IEEE Std 1003.1-1988,
    so it's called *POSIX.1-1988*. Since then, the standard has gone through several
    revisions, with different subsets of the specification being ratified under different
    names. For example, *POSIX.1-1990* (IEEE 1003.1-1990) defined *the system interface
    and computing environment*, *POSIX.2* (IEEE Std 1003.2-1992) defined *command
    language (shell) and tools*, etc. A very good and brief overview of the standard's
    revisions can be found in the [standards(7)](https://man7.org/linux/man-pages/man7/standards.7.html)
    Linux man page. You may even come across references to some old revisions, such
    as POSIX.2, for example, when reading the [Bash source code](https://git.savannah.gnu.org/cgit/bash.git/tree/jobs.c#n4269).
    In 2001, POSIX.1, POSIX.2, and the Single UNIX Specification (SUS) were merged
    into a single document called *POSIX.1-2001*. Despite the somewhat misleading
    name, it does include the shell and tools specifications from POSIX.2\. **The
    latest version of the standard is POSIX.1-2017**, also known as [IEEE Std 1003.1-2017](https://pubs.opengroup.org/onlinepubs/9699919799/nframe.html),
    which is almost identical to POSIX.1-2008.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 1988年，IEEE ratifies 了第一个标准，成为 IEEE Std 1003.1-1988，因此被称为*POSIX.1-1988*。自那时起，该标准经历了多次修订，不同的规范子集被以不同的名称ratify。例如，*POSIX.1-1990*
    (IEEE 1003.1-1990) 定义了*系统接口和计算环境*，*POSIX.2* (IEEE Std 1003.2-1992) 定义了*命令语言（shell）和工具*等等。关于标准修订的非常好的简要概述可以在
    [standards(7)](https://man7.org/linux/man-pages/man7/standards.7.html) Linux man
    页面中找到。在阅读 [Bash source code](https://git.savannah.gnu.org/cgit/bash.git/tree/jobs.c#n4269)
    时，你甚至可能会遇到对一些旧版本的引用，例如 POSIX.2。在2001年，POSIX.1、POSIX.2 和 Single UNIX Specification
    (SUS) 合并为名为*POSIX.1-2001*的单一文档。尽管名字有些误导，但它确实包括了来自 POSIX.2 的 shell 和工具规范。**标准的最新版本是
    POSIX.1-2017**，也被称为 [IEEE Std 1003.1-2017](https://pubs.opengroup.org/onlinepubs/9699919799/nframe.html)，几乎与
    POSIX.1-2008 相同。
- en: 'The document of the standard basically describes a specification that spans
    over two environments (a build-time and a run-time) and is represented by a few
    volumes:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该标准文档基本上描述了跨越两个环境（构建时和运行时）的规范，并由几个卷表示：
- en: '[Base Definitions](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/toc.html):
    defines common to all volumes general terms and concepts, conformant requirements
    (symbolic constants, options, option groups), computing environment (locales,
    regexp, directory structure, tty, environment variables, etc), and C-language
    header files which need to be implemented by the compliant systems.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[基础定义](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/toc.html)：定义了通用的术语和概念，符合要求（符号常量、选项、选项组）、计算环境（locales、regexp、目录结构、tty、环境变量等）以及需要由兼容系统实现的
    C 语言头文件。'
- en: '[System Interfaces](https://pubs.opengroup.org/onlinepubs/9699919799/idx/xsh.html):
    defines the C language standard ([ISO C99, ISO/IEC 9899:1999](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf)),
    system service functions, and the extension of the C standard library (libc) in
    terms of header files and functions.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[系统接口](https://pubs.opengroup.org/onlinepubs/9699919799/idx/xsh.html)：定义了C语言标准（[ISO
    C99, ISO/IEC 9899:1999](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf)），系统服务函数以及C标准库（libc）的扩展，包括头文件和函数。'
- en: '[Shell & Utilities](https://pubs.opengroup.org/onlinepubs/9699919799/idx/xcu.html):
    defines a source code-level interface to the Shell Command Language (sh) and the
    system utilities (awk, sed, wc, cat, ...), including behavior, command line parameters,
    exit statuses, etc.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Shell & 实用程序](https://pubs.opengroup.org/onlinepubs/9699919799/idx/xcu.html)：定义了Shell命令语言（sh）和系统实用程序（awk,
    sed, wc, cat等）的源代码级接口，包括行为、命令行参数、退出状态等。'
- en: '[Rationale](https://pubs.opengroup.org/onlinepubs/9699919799/idx/xrat.html):
    includes considerations for portability, subprofiling, option groups, and additional
    rationale that didn''t fit any other volumes.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[背景](https://pubs.opengroup.org/onlinepubs/9699919799/idx/xrat.html)：包括了可移植性、子分析、选项组和其他未归入任何其他卷的背景考虑。'
- en: 'The current POSIX standard defines source code-level compatibility for [only
    two programming languages](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap02.html#tag_02_04):
    *The C language (C99)* and *the shell command language*. However, some of the
    programs defined under "Utilities", such as [awk](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/awk.html),
    also have their own language. Strictly speaking, the C standard library (libc)
    doesn''t have to implement any additional functionality (functions and headers)
    that is not defined by the C standard (ISO C99 in this case), but most of them
    do. For example, the ISO C99 standard, defines 24 header files, including math
    functions (<math.h>), standard input/output (<stdio.h>), date and time (<time.h>),
    signal management (<signal.h>), string operations (<string.h>), and so on. However,
    the latest POSIX standard, defines 82 header files and, being fully compliant
    with ISO C99, extends it with with POSIX threads (<pthreads.h>), semaphores (<semaphore.h>),
    and many others. Modern libc implementations, e.g. [musl libc](https://musl.libc.org/about.html),
    are also very OS-specific, providing library functions to access operating system
    services (wrappers for system calls). Sometimes, the overlap with the POSIX specifications
    leads to difficulties in implementing the POSIX abstraction layer in the non-Unix
    operating systems, which also use some portable standalone libc implementations
    with their own POSIX support, e.g. using [picolibc](https://keithp.com/picolibc/)
    together with [Zephyr''s POSIX library](https://docs.zephyrproject.org/latest/services/portability/posix/implementation/index.html).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的POSIX标准仅为[两种编程语言](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap02.html#tag_02_04)——*C语言（C99）*和*shell命令语言*定义了源代码级兼容性。然而，“实用程序”下定义的一些程序，比如[awk](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/awk.html)，也有其自己的语言。严格来说，C标准库（libc）不必实现任何不被C标准（在此为ISO
    C99）定义的额外功能（函数和头文件），但大多数libc都这样做。例如，ISO C99标准定义了24个头文件，包括数学函数（<math.h>）、标准输入/输出（<stdio.h>）、日期和时间（<time.h>）、信号管理（<signal.h>）、字符串操作（<string.h>）等等。然而，最新的POSIX标准定义了82个头文件，并且完全兼容ISO
    C99，在此基础上增加了POSIX线程（<pthreads.h>）、信号量（<semaphore.h>）等。现代的libc实现，例如[musl libc](https://musl.libc.org/about.html)，也非常依赖于操作系统，提供访问操作系统服务的库函数（对系统调用的包装）。有时，与POSIX规范的重叠会导致在非Unix操作系统中实现POSIX抽象层时出现困难，这些系统也使用一些带有自己POSIX支持的便携式独立libc实现，例如与[picolibc](https://keithp.com/picolibc/)和[Zephyr的POSIX库](https://docs.zephyrproject.org/latest/services/portability/posix/implementation/index.html)一起使用。
- en: Options and Option Groups
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项和选项组
- en: While POSIX standardizes the system interface (C language headers and functions),
    shell, and utilities, it is not necessary to follow the entire specification to
    be [POSIX conformant](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap02.html#tag_02_01_03).
    Some features in "POSIX System Interfaces", "POSIX Shell and Utilities", and "XSI
    System Interfaces" are optional. The [<unistd.h> header file](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/unistd.h.html)
    contains definitions of the *standard symbolic constants* for [Options](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap02.html#tag_02_01_06),
    which reflect a particular feature, and [Option Groups](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap02.html#tag_02_01_05)
    which define a set of related functions or options. Names of option groups, unlike
    options, typically do not begin with the underscore symbol. POSIX Conformant systems
    are intended to implement and support a set of mandatory options with one or more
    additional options. The symbolic constants for mandatory options should have specific
    values, e.g. *200809L*, while other options may be
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 POSIX 标准化了系统接口（C 语言头文件和函数）、shell 和实用程序，但不必完全遵循整个规范以达到[POSIX 兼容性](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap02.html#tag_02_01_03)。"POSIX
    系统接口"、"POSIX Shell 和实用程序"以及"XSI 系统接口"中的一些功能是可选的。[<unistd.h> 头文件](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/unistd.h.html)
    包含了*标准符号常量*的定义，用于[选项](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap02.html#tag_02_01_06)，这些选项反映了特定功能，以及[选项组](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap02.html#tag_02_01_05)，定义了一组相关函数或选项。与选项不同，选项组的名称通常不以下划线符号开头。符合
    POSIX 的系统旨在实现和支持一组强制选项及一个或多个附加选项。强制选项的符号常量应具有特定值，例如*200809L*，而其他选项可能是
- en: '*undefined or contain -1*, which means that the option is not supported for
    compilation'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*未定义或包含-1*，表示该选项不支持编译'
- en: '*0*, which means the option might or might not be supported at runtime'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*0*，表示该选项可能在运行时支持或不支持'
- en: '*some other value*, which means the option is always supported'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*其他一些值*，表示该选项始终受支持'
- en: 'These symbolic constants are used by user applications to check the availability
    of a particular feature. At the C source code-level, constants may be checked
    either at build time (in #if preprocessing directives) or at runtime, by calling
    one of the *sysconf()*, *pathconf()*, *fpathconf()*, or *confstr(3)* functions.
    In the shell source code, the [getconf](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/getconf.html)
    utility should be used for runtime checks. A very good collection of the POSIX
    options, their corresponding names for use as the sysconf(3) parameters, and the
    list of header files and functions that these options represent can be found in
    the [posixoptions(7)](https://man7.org/linux/man-pages/man7/posixoptions.7.html)
    Linux man page.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '用户应用程序使用这些符号常量来检查特定功能的可用性。在 C 源代码级别，常量可以在构建时（在 #if 预处理指令中）或在运行时通过调用 *sysconf()*、*pathconf()*、*fpathconf()*
    或 *confstr(3)* 函数之一来检查。在 shell 源代码中，应使用 [getconf](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/getconf.html)
    实用程序进行运行时检查。可以在 [posixoptions(7)](https://man7.org/linux/man-pages/man7/posixoptions.7.html)
    Linux 手册页中找到 POSIX 选项、用作 sysconf(3) 参数的相应名称以及这些选项代表的头文件和函数的很好的集合。'
- en: '[Subprofiling Option Groups](https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_subprofiles.html)
    are intended for use within the systems where implementing a full POSIX specification
    is not reasonable. For example, real-time embedded systems are typically resource-constrained,
    do not have shells, user interfaces, and OS kernels are often designed to run
    as a single process (with multiple threads). Such systems may only implement subsets
    of related functions defined by option groups.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[子配置选项组](https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_subprofiles.html)
    旨在在实现完整 POSIX 规范不合理的系统内使用。例如，实时嵌入式系统通常资源受限，没有 shell，用户界面，且操作系统内核通常设计为单进程（带有多线程）。这些系统可能只实现由选项组定义的相关函数的子集。'
- en: Summary
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: The development of high-level programming languages like C, along with operating
    systems that abstract away hardware details, enabled software portability at the
    source code level.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级编程语言如 C 的发展，以及抽象硬件细节的操作系统，使得软件在源代码级别具有可移植性。
- en: The POSIX standard emerged in 1988 to provide a portable interface specification
    for Unix-like operating systems, allowing programs to be compiled across different
    platforms.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POSIX 标准于 1988 年出现，旨在为类 Unix 操作系统提供可移植的接口规范，允许程序在不同平台上编译。
- en: The POSIX standard has evolved over time, with the latest version being POSIX.1-2017
    (IEEE Std 1003.1-2017).
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POSIX 标准随着时间的推移发展，最新版本是 POSIX.1-2017（IEEE 标准 1003.1-2017）。
- en: Modern Unix-like systems like Linux and *BSD do not strictly follow the POSIX
    standard, but rather use it as a guide.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类 Unix 系统如 Linux 和 *BSD 并非严格遵循 POSIX 标准，而是将其作为指南。
- en: POSIX standardizes a C API (header files and functions), the shell, and utilities.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POSIX 标准化了一个 C API（包括头文件和函数）、shell 和实用程序。
- en: POSIX-compliant systems are expected to implement mandatory options and may
    support additional optional features.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符合 POSIX 的系统应该实现强制选项，并可能支持额外的可选特性。
- en: Applications can check for POSIX feature availability at both compile-time and
    runtime using symbolic constants and system functions.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序可以在编译时和运行时使用符号常量和系统函数检查 POSIX 特性的可用性。
- en: For resource-constrained systems like real-time embedded platforms, POSIX allows
    for the implementation of subsets of the full specification through "subprofile"
    option groups.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于资源受限的系统，比如实时嵌入式平台，POSIX 允许通过“子配置文件”选项组实现部分完整规范的实现。
