["```\n> void dft(complex* out_buf, complex* in_buf, uint32_t len) {\n> \n>   for (uint32_t bin_no = 0; bin_no < len; bin_no++) {\n>     complex sum = 0;\n>     for (uint32_t s_no = 0; s_no < len; s_no++)\n>       sum += in_buf[s_no] * cexp(-2 * I * M_PI * bin_no * s_no / len);\n>     out_buf[bin_no] = sum;\n>   }\n> \n> }\n> ```", "```\n> void idft(complex* out_buf, complex* in_buf, uint32_t len) {\n> \n>   for (uint32_t s_no = 0; s_no < len; s_no++) {\n>     complex sum = 0;\n>     for (uint32_t bin_no = 0; bin_no < len; bin_no++)\n>       sum += in_buf[bin_no] * cexp(2 * I * M_PI * s_no * bin_no / len);\n>     out_buf[s_no] = sum / len;\n>   }\n> \n> }\n> ```", "```\n> void __fft_int(complex* buf, complex* tmp, \n>                const uint32_t len, const uint32_t step) {\n> \n>   if (step >= len) return;\n>   __fft_int(tmp, buf, len, step * 2);\n>   __fft_int(tmp + step, buf + step, len, step * 2);\n> \n>   for (uint32_t pos = 0; pos < len; pos += 2 * step) {\n>     complex t = cexp(-I * M_PI * pos / len) * tmp[pos + step];\n>     buf[pos / 2] = tmp[pos] + t;\n>     buf[(pos + len) / 2] = tmp[pos] - t;\n>   }\n> \n> }\n> \n> void in_place_fft(complex* buf, const uint32_t len) {\n>   complex tmp[len];\n>   memcpy(tmp, buf, sizeof(tmp));\n>   __fft_int(buf, tmp, len, 1);\n> }\n> ```", "```\n> `void dct(double* out_buf, double* in_buf, uint32_t len) {\n> \n>   for (uint32_t bin_no = 0; bin_no < len; bin_no++) {\n>     double sum = 0;\n>     for (uint32_t s_no = 0; s_no < len; s_no++)\n>       sum += in_buf[s_no] * cos(M_PI * bin_no * (s_no + 0.5) / len);\n>     out_buf[bin_no] = sum;\n>   }\n> \n> }\n> \n> void idct(double* out_buf, double* in_buf, uint32_t len) {\n> \n>   for (uint32_t s_no = 0; s_no < len; s_no++) {\n>     double sum = 0;\n>     for (uint32_t bin_no = 0; bin_no < len; bin_no++)\n>       sum += in_buf[bin_no] * cos(M_PI * (s_no + 0.5) * bin_no / len) *\n>              (bin_no ? 2 : 1);\n>     out_buf[s_no] = sum / len;\n>   }\n> \n> }`\n> ```"]