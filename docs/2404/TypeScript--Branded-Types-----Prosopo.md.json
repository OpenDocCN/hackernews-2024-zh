["```\ntype A = {\n    x: number\n}\n\ntype B = {\n    x: number\n}\n```", "```\n type A = {\n    x: number,\n    y: boolean,\n    z: string,\n}\n\ntype B = {\n    x: number,\n    y: boolean,\n    z: string,\n} \n```", "```\n const fn = (a: A) => {\n    console.log('do something with A')\n}\n\nconst obj: B = {\n    x: 1,\n    y: true,\n    z: 'hello'\n}\n\nfn(obj) \n```", "```\n const brand = Symbol('brand') \n\ntype A = {\n    x: number,\n    y: boolean,\n    z: string,\n} & {\n    [brand]: 'A'\n}\n```", "```\n const fn = (a: A) => {\n    console.log('do something with A')\n}\n\nconst obj: B = {\n    x: 1,\n    y: true,\n    z: 'hello'\n}\n\nfn(obj) \n```", "```\nArgument of type 'B' is not assignable to parameter of type 'A'.\n  Property '[brand]' is missing in type 'B' but required in type '{ [brand]: \"a\"; }'.ts(2345) \n```", "```\n type B = {\n    x: number,\n    y: boolean,\n    z: string,\n} & {\n    [brand]: 'B'\n}\n```", "```\n const fn = (a: A) => {\n    console.log('do something with A')\n}\n\nconst obj: B = {\n    x: 1,\n    y: true,\n    z: 'hello'\n}\n\nfn(obj) \n```", "```\nArgument of type 'B' is not assignable to parameter of type 'A'.\n  Type 'B' is not assignable to type '{ [brand]: \"A\"; }'.\n    Types of property '[brand]' are incompatible.\n      Type '\"B\"' is not assignable to type '\"A\"'.ts(2345) \n```", "```\n type A = {\n    x: number,\n    y: boolean,\n    z: string,\n} & {\n    [brand]: 'foobar'\n}\n\ntype B = {\n    x: number,\n    y: boolean,\n    z: string,\n} & {\n    [brand]: 'foobar'\n}\n\nconst fn = (a: A) => {\n    console.log('do something with A')\n}\n\nconst obj: B = {\n    x: 1,\n    y: true,\n    z: 'hello'\n}\n\nfn(obj) \n```", "```\nconst brand = Symbol('brand') \n\ntype Brand<T, U> = T & {\n    [brand]: U\n}\n```", "```\n type A_Unbranded = {\n    x: number,\n    y: boolean,\n    z: string,\n}\n\ntype A = Brand<A_Unbranded, 'A'> \n```", "```\ntype RemoveBrand<T> = T[Exclude<keyof T, typeof brand>]\n```", "```\n class Dog {\n    constructor(public name: string) {}\n}\n\ntype DogBranded = Brand<Dog, 'Dog'>\n\nconst dog = new DogBranded('Spot') \n```", "```\n type Ctor<T> = new (...args: any[]) => T\n\nconst addBrand = <T>(ctor: Ctor<T>, name: string) => {\n    return ctor as Ctor<Brand<T, typeof name>>\n}\n\nconst DogBranded = addBrand(Dog, 'Dog')\n\nconst dog = new DogBranded('Spot') \n```", "```\nexport type DogExported = typeof DogBranded\n```", "```\n const removeBrand = <T>(value: T) => {\n    return value as RemoveBrand<T>\n}\n```"]