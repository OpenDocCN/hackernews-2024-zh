- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:09:55'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月27日13:09:55
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Finding and Fixing Standard Misconceptions About Program Behavior
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找和修正有关程序行为标准误解的标准。
- en: 来源：[https://blog.brownplt.org/2024/04/12/behavior-misconceptions.html](https://blog.brownplt.org/2024/04/12/behavior-misconceptions.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.brownplt.org/2024/04/12/behavior-misconceptions.html](https://blog.brownplt.org/2024/04/12/behavior-misconceptions.html)
- en: '*Posted on 12 April 2024.*'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*发布于2024年4月12日。*'
- en: 'A large number of modern languages — from Java and C# to Python and JavaScript
    to Racket and OCaml — share a common semantic core:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现代语言中有大量共同的语义核心，从Java和C#到Python和JavaScript，再到Racket和OCaml：
- en: variables are lexically scoped
  id: totrans-split-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量在词法上有作用域
- en: scope can be nested
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作用域可以嵌套
- en: evaluation is eager
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估是急切的
- en: evaluation is sequential (per “thread”)
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估是顺序的（按“线程”）
- en: variables are mutable, but first-*order*
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量是可变的，但是是一阶的：
- en: structures (e.g., vectors/arrays and objects) are mutable, and first-*class*
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构（例如，向量/数组和对象）是可变的，并且是一阶的
- en: functions can be higher-order, and close over lexical bindings
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数可以是高阶的，并且可以闭合词法绑定
- en: memory is managed automatically (e.g., garbage collection)
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存是自动管理的（例如，垃圾回收）
- en: We call this the *Standard Model of Languages* (SMoL).
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称之为*语言的标准模型*（SMoL）。
- en: 'SMoL potentially has huge pedagogic benefit:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**SMoL**潜在地具有巨大的教育价值：'
- en: If students master SMoL, they have a good handle on the core of several of these
    languages.
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果学生掌握了SMoL，他们对这些语言的核心有了很好的把握。
- en: 'Students may find it easier to port their knowledge between languages: instead
    of being lost in a sea of different syntax, they can find familiar signposts in
    the common semantic features. This may also make it easier to learn new languages.'
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学生可能会发现在不同语言之间移植他们的知识更容易：他们可以在共同的语义特征中找到熟悉的路标，而不是迷失在不同语法的海洋中。这也可能使学习新语言更容易。
- en: The *differences* between the languages are thrown into sharper contrast.
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同语言之间的*差异*变得更加明显。
- en: Students can see that, by going beyond syntax, there are several big semantic
    ideas that underlie all these languages, many of which we consider “best practices”
    in programming language design.
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学生可以看到，通过超越语法，有几个重要的语义概念贯穿所有这些语言，其中许多被我们认为是编程语言设计中的“最佳实践”。
- en: 'We have therefore spent the past four years working on the pedagogy of SMoL:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们过去四年一直致力于SMoL的教学法：
- en: Finding errors in the understanding of SMoL program behavior.
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找SMoL程序行为理解中的错误。
- en: Finding the (mis)conceptions behind these errors.
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找这些错误背后的（误解）概念。
- en: Collating these into clean instruments that are easy to deploy.
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将这些整理成干净的工具，易于部署。
- en: Building a *tutor* to help students correct these misconceptions.
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个*导师*来帮助学生纠正这些误解。
- en: Validating all of the above.
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证上述所有内容。
- en: 'We are now ready to present a checkpoint of this effort. We have distilled
    the essence of this work into a tool:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备展示这一努力的检查点。我们已将这项工作的精髓提炼成一个工具：
- en: '[The SMoL Tutor](https://smol-tutor.xyz/)'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[SMoL导师](https://smol-tutor.xyz/)'
- en: 'It identifies and tries to fix student misconceptions. The Tutor assumes users
    have a baseline of programming knowledge typically found after 1–2 courses: variables,
    assignments, structured values (like vectors/arrays), functions, and higher-order
    functions (`lambda`s). Unlike most tutors, instead of *teaching* these concepts,
    it investigates how well the user actually *understands* them. Wherever the user
    makes a mistake, the tutor uses an educational device called a *refutation text*
    to help them understand where they went wrong and to correct their conception.
    The Tutor lets the user switch between multiple syntaxes, both so they can work
    with whichever they find most comfortable (so that syntactic unfamiliarity or
    discomfort does not itself become a source of errors), and so they can see the
    semantic unity beneath these languages.'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 它能够识别并尝试修正学生的误解。该导师假设用户具有通常在1-2门课程后找到的编程知识基础：变量、赋值、结构化值（如向量/数组）、函数和高阶函数（`lambda`）。与大多数导师不同的是，它不是*教授*这些概念，而是调查用户对它们的理解程度。无论用户在哪里犯错，导师都使用称为*反驳文本*的教育工具帮助他们理解错误所在，并纠正他们的理解。导师允许用户在多种语法之间切换，这样他们可以选择最舒适的一种工作方式（以免语法上的陌生感或不适成为错误的源头），并且可以看到这些语言之下的语义统一性。
- en: 'Along the way, to better classify student responses, we invent a concept called
    the *misinterpreter*. A misinterpreter is an intentionally incorrect interpreter.
    Concretely, for each misconception, we create a corresponding misinterpreter:
    one that has the same semantics as SMoL *except* on that one feature, where it
    implements the misconception instead of the correct concept. By making misconceptions
    executable, we can mechanically check whether student responses correspond to
    a misconception.'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地分类学生的回答，我们提出了一个称为*misinterpreter*的概念。一个*misinterpreter*是一个有意错误的解释器。具体来说，对于每个误解，我们都创建一个相应的*misinterpreter*：在大部分方面它与SMoL具有相同的语义，**除了**在那个误解特征上，它实现了误解而不是正确的概念。通过使误解可执行，我们可以机械地检查学生的回答是否对应于误解。
- en: 'There are many interesting lessons here:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有许多有趣的教训：
- en: Many of the problematic programs are likely to be startlingly simple to experts.
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多问题程序对专家来说可能会显得非常简单。
- en: The combination of state, aliasing, and functions is complicated for students.
    (Yet most *introductory* courses plunge students into this maelstrom of topics
    without a second thought or care.)
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于学生来说，状态、别名和函数的组合非常复杂。（然而，大多数*入门*课程毫不犹豫或关心地将学生投入这些主题的漩涡中。）
- en: Misinterpreters are an interesting concept in their own right, and are likely
    to have value independent of the above use.
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Misinterpreters*本身是一个有趣的概念，并且可能独立于上述用途具有价值。'
- en: 'In addition, we have not directly studied the following claims but believe
    they are well warranted based on observations from this work and from experience
    teaching and discussing programming languages:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们尚未直接研究以下主张，但基于对这项工作和教授和讨论编程语言的经验的观察，我们认为它们是完全合理的：
- en: In SMoL languages, local and top-level bindings behave the same as the binding
    induced by a function call. However, students often do not realize that these
    have a uniform semantics. In part this may be caused by our focus on the “call
    by” terminology, which focuses on calls (and makes them seem special). We believe
    it would be an improvement to replace these with “bind by”.
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在SMoL语言中，局部和顶级绑定的行为与函数调用引起的绑定相同。然而，学生们经常没有意识到这些具有统一的语义。部分原因可能是我们对“按调用”术语的关注，它专注于调用（并使它们看起来很特殊）。我们认为用“bind
    by”取代这些术语会有所改进。
- en: We also believe that the terms “call-by-value” and “call-by-reference” are so
    hopelessly muddled at this point (between students, instructors, blogs, the Web…)
    that finding better terminology overall would be helpful.
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们也认为，“按值调用”和“按引用调用”这些术语在目前（学生、教师、博客、网络等方面）已经混淆不清，因此总体上找到更好的术语将会有所帮助。
- en: The way we informally talk about programming concepts (like “pass a variable”),
    and the syntactic choices our languages make (like `return x`), are almost certainly
    also sources of confusion. The former can naturally lead students to believe variables
    are being aliased, and the latter can lead them to believe the *variable*, rather
    than its *value*, is being returned.
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们非正式地讨论编程概念（例如“传递一个变量”）的方式，以及我们语言所做的语法选择（例如`return x`），几乎肯定也是混淆的根源。前者自然地会使学生认为变量被别名，而后者会使他们认为返回的是*变量*而不是它的*值*。
- en: For more details about the work, see [the paper](https://cs.brown.edu/~sk/Publications/Papers/Published/lk-smol-tutor/).
    The paper is based on an old version of the Tutor, where all programs were presented
    in parenthetical syntax. The Tutor now supports multiple syntaxes, so you don’t
    have to worry about being constrained by that. Indeed, it’s being used right now
    in a course that uses Scala 3.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于这项工作的详细信息，请参阅[该论文](https://cs.brown.edu/~sk/Publications/Papers/Published/lk-smol-tutor/)。该论文基于Tutor的旧版本，所有程序均以括号语法呈现。现在的Tutor支持多种语法，因此你无需受此限制。实际上，它目前正在使用Scala
    3的课程中。
- en: Most of all, the [SMoL Tutor](https://smol-tutor.xyz/) is free to use! We welcome
    and encourage instructors of programming courses to consider using it — you may
    be surprised by the mistakes your students make on these seemingly very simple
    programs. But we also welcome learners of all stripes to give it a try!
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，[SMoL Tutor](https://smol-tutor.xyz/)是免费使用的！我们欢迎并鼓励编程课程的教师考虑使用它 —— 你可能会对学生在这些看似非常简单的程序上犯的错误感到惊讶。但我们也欢迎各种学习者来尝试！
