- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:39:13'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:39:13'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: A brief history of web development. And why your framework doesn't matter.
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网页发展简史及为何你的框架并不重要。
- en: 来源：[https://gebna.gg/blog/brief-history-of-web-development](https://gebna.gg/blog/brief-history-of-web-development)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://gebna.gg/blog/brief-history-of-web-development](https://gebna.gg/blog/brief-history-of-web-development)
- en: A brief history of web development. And why your framework doesn't matter.
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网页发展简史及为何你的框架并不重要。
- en: '2024-04-25'
  id: totrans-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '2024-04-25'
- en: History is very important. It helps keep our perspectives in check. This is
    how I remember the crazy journey that web development has gone through in the
    past few years. This is my telling of it. So I will omit events. I may mess up
    the timeline. This whole article may not be of any use to you. But for me, putting
    all of it into writing helped me appreciate how much things stay the same no matter
    how much they change. So if you’re curious and undeterred, allow me to start with
    …
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 历史非常重要。它有助于保持我们的视角。这是我记得 Web 开发在过去几年中所经历的疯狂旅程的方式。这是我的讲述。所以我会省略事件。我可能弄乱时间线。整篇文章可能对你没有任何用处。但对我来说，把所有这些都写下来帮助我欣赏到事物无论如何都会保持不变的程度。所以，如果你好奇而且毫不畏惧，让我从…开始吧。
- en: The good ol’ days
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过去的美好时光
- en: The simplest architecture to build a website would be to have one server to
    handle everything. That means that there’s no frontend router, no hydration, no
    AJAX, and definitely no cache/store like [Apollo](https://www.apollographql.com/)
    or [Redux](https://redux.js.org/). It’s very simple, the user requests an HTML
    page, the user gets an HTML page back. Oh and mutations will all be handled by
    native HTML forms. This used to be how everything worked. Not much JavaScript
    was written. Just whatever language you picked for backend and HTML/CSS. This
    worked because the web was made to be a decentralized space for sharing information.
    The websites made in those days were very static in nature and very little mutations
    happened so it was fine for the page to refresh after each form submission. It
    was also fine to load an entirely new HTML document every time the user navigated
    to another page.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 搭建网站最简单的架构就是只有一个服务器处理一切。这意味着没有前端路由器，没有水合，没有 AJAX，当然也没有像[Apollo](https://www.apollographql.com/)或[Redux](https://redux.js.org/)这样的缓存/存储。非常简单，用户请求一个
    HTML 页面，用户得到一个 HTML 页面。哦，而且所有的变更都将由原生 HTML 表单处理。这曾经是一切运作的方式。几乎没有写 JavaScript。只需选择后端语言和
    HTML/CSS。这是因为 Web 被设计为一个去中心化的信息共享空间。那些年制作的网站在性质上非常静态，很少发生变更，所以在每次表单提交后刷新页面是可以接受的。每次用户导航到另一个页面时加载完全新的
    HTML 文档也是可以接受的。
- en: But then the web started to change. Websites started becoming more and more
    like apps. More functionality was needed on the client side. So more JavaScript
    was written. Browser APIs were not enough so [jQuery](https://jquery.com/) was
    made. And before we knew it, the language that was made to display sparkles and
    counters on websites took over everything and we started writing single page applications
    or SPAs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但是随着Web的变化，网站开始变得越来越像应用程序。客户端需要更多功能。因此，写了更多JavaScript代码。浏览器API已经不够用了，所以诞生了[jQuery](https://jquery.com/)。然后我们意识到，本来是为网站上的闪光和计数器设计的语言却横扫了一切，我们开始编写单页应用程序或SPA。
- en: Not the SPA you’re thinking of
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不是你想象中的SPA
- en: A SPA basically absolves the backend of its’ HTML/CSS duties. Servers don’t
    return HTML anymore. They expose REST endpoints. Each one returns JSON in response.
    In SPAs, when the user requests `yourdomain.com/any-thing`, the server responds
    with an empty HTML document that has a JavaScript that then takes over. The frontend
    handles fetching data, rendering html pages, and routing between them. This is
    when frameworks like [Knockout.js](https://knockoutjs.com/), [Backbone.js](https://backbonejs.org/),
    and [Angular.js](https://angularjs.org/) were released (late 2010). Three years
    later, React was released with its’ JSX syntax and one way data-binding. And it
    made writing web apps easier than ever. Or so we thought.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: SPA基本上解除了后端对HTML/CSS的职责。服务器不再返回HTML。它们暴露REST端点。每个端点返回JSON作为响应。在SPA中，当用户请求`yourdomain.com/any-thing`时，服务器会返回一个空的HTML文档，其中包含一个接管控制权的JavaScript。前端负责获取数据、渲染HTML页面和页面间的路由。这就是像[Knockout.js](https://knockoutjs.com/)、[Backbone.js](https://backbonejs.org/)和[Angular.js](https://angularjs.org/)这样的框架问世的时候（2010年末）。三年后，带有JSX语法和单向数据绑定的React问世了。它使得编写Web应用比以往任何时候都更容易。或者我们曾经这样认为。
- en: If a user submits a form, they don’t expect the page to refresh anymore. Since
    it’s an *app*, it should behave like one. If the data mutates, new data should
    just appear. Meaning developers had to write code to maintain *state* and *react*
    to any change in the state by *re-rendering* parts of the HTML accordingly. Imagine
    the poor frontend devs doing that in a large scale app like **Facebook** with
    so many moving parts to take care of. Imagine the poor backend devs needing to
    create numerous REST endpoints to accommodate all that functionality.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户提交表单，他们不再希望页面刷新。因为这是一个*应用程序*，它应该像一个应用程序一样运行。如果数据发生变化，新数据应该自动显示。这意味着开发人员必须编写代码来维护*状态*，并对状态的任何更改做出*重新渲染*相应HTML部分的反应。想象一下在像**Facebook**这样大规模应用中负责这些动态部分的前端开发人员。想象一下需要创建大量REST端点以适应所有功能的后端开发人员的处境。
- en: Facebook
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Facebook
- en: Say you’re a frontend dev in the ads team at Facebook. A new feature is proposed
    by the product manager, you go through the requirements they wrote and you start
    implementing. You know the feature is going to need access to some data from the
    backend but you’re at ease because your backend REST endpoints are well documented.
    You search the API docs, and you find a couple APIs that seem to fit what you
    need. You start writing your frontend code to find out that the docs are outdated
    and one of endpoints has been removed because it’s no longer in use. You let your
    project manager know and they assign a backend dev to work with you. After a couple
    days of waiting, they message you saying they added the endpoint you needed. You
    thank them and continue implementing the feature only to run into another problem.
    The *other* endpoint returns way too much data and is way too slow to be used
    within the context of the new feature you’re implementing. Oh and the product
    manager messaged you saying that requirements changed. So you repeat the previous
    cycle all over again.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是 Facebook 广告团队的前端开发工程师。产品经理提出了一个新功能，你查阅他们撰写的需求并开始实现。你知道该功能需要访问后端的一些数据，但你放心，因为你的后端
    REST 端点有很好的文档。你搜索 API 文档，找到了几个看似符合你需求的 API。你开始编写前端代码，结果发现文档已经过时，并且其中一个端点已被移除，因为不再使用。你通知项目经理，并他们指派一个后端开发与你合作。几天后，他们通知你说他们添加了你所需的端点。你感谢他们，继续实现功能，但又遇到了另一个问题。*另一个*端点返回的数据量过大，在新功能的上下文中使用起来太慢了。而且产品经理发消息说需求变了。所以你重新开始之前的循环。
- en: 'What went wrong there ? a few things, but I’ll focus on two:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 那里出了什么问题？有几个问题，但我将重点关注两个：
- en: The API endpoints and there documentation are two separate things and so they
    can go out of sync.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: API 端点和它们的文档是两个独立的事物，因此它们可能不同步。
- en: There’s no runtime guarantee that the API returns what it should. Essentially
    there’s no strict contract between the server and the client. It can return any
    JSON and the response will still be 200 OK.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并没有运行时保证 API 返回其应该返回的内容。实质上，服务器与客户端之间没有严格的契约。它可以返回任何 JSON 数据，响应仍将是 200 OK。
- en: Now you can probably solve the problems above by writing more automated tests
    and/or investing in doc-gen tools like [Swagger](https://swagger.io/). But these
    things treat the symptoms (bugs) while not curing the disease (lack of contract).
    So in 2012, Facebook engineers thought of something better.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过编写更多自动化测试和/或投资于类似 [Swagger](https://swagger.io/) 的文档生成工具来解决上述问题。但这些方法只能治标（修复
    bug），而不能治本（缺乏约定）。因此在 2012 年，Facebook 的工程师们想出了更好的方法。
- en: GraphQL
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GraphQL
- en: '[GraphQL](https://graphql.org/) fixes the above problems by changing APIs from
    a set of untyped REST endpoints like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[GraphQL](https://graphql.org/) 通过将 API 从一组不带类型的 REST 端点改为严格类型化的可查询模式来解决上述问题：'
- en: '`GET /posts`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET /posts`'
- en: '`POST /posts`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST /posts`'
- en: '`GET /posts/:id`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET /posts/:id`'
- en: '`DELETE /posts/:id`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE /posts/:id`'
- en: 'To a strictly typed, queryable schema like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 转变为严格类型化、可查询的模式：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now because the GraphQL server always checks coming requests and outgoing responses
    against the schema we define, we now have our contract, our runtime guarantee
    that the frontend is only requesting fields that exist and the backend will either
    respond with them or with an error. A few positive side effects of this design
    are:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在因为 GraphQL 服务器始终根据我们定义的模式检查传入请求和传出响应，我们现在有了我们的合同，我们的运行时保证：前端只请求存在的字段，后端将用这些字段回应或者返回错误。这种设计的一些积极副作用包括：
- en: No need for explicit documentation anymore. The schema is most of the documentation
    you need. And it’s always up to date.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再需要显式文档。模式就是你所需的大部分文档。而且它始终保持最新。
- en: The client can pick precisely the fields they need. No need to request the entire
    `User` object if you just need `id` and a `username`.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端可以精确选择他们所需的字段。如果你只需要 `id` 和 `username`，就无需请求整个`User`对象。
- en: Frontend state management becomes way simpler thanks to GraphQL clients like
    [Relay](https://relay.dev/), [Urql](https://commerce.nearform.com/open-source/urql/docs/),
    And [Apollo](https://www.apollographql.com/).
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端状态管理因 GraphQL 客户端（例如 [Relay](https://relay.dev/)，[Urql](https://commerce.nearform.com/open-source/urql/docs/)
    和 [Apollo](https://www.apollographql.com/)）变得更简单。
- en: So that’s it. A SPA frontend that is powered by a GraphQL server. That’s the
    *ideal* architecture for **every** web app. I mean, Facebook uses it so it must
    be the best option right ? … right ?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。一个由 GraphQL 服务器驱动的单页应用前端。这是每个 Web 应用的*理想*架构。我的意思是，Facebook 使用它，所以这一定是最佳选择，对吧？……对吧？
- en: Remember websites ?
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还记得网站吗？
- en: What if one needs to create a blog ? Typically, all a blog has to do is show
    some markdown and be SEO friendly. SPAs were notoriously difficult for SEO crawlers
    to index because it takes a few more hundred milliseconds for JavaScript to render
    on the client. So what then ? Does one have to go back to [Wordpress](https://wordpress.org/)
    ?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人需要创建博客怎么办？通常，博客只需显示一些 Markdown 并且友好于 SEO。单页应用在过去因为需要 JavaScript 在客户端渲染，所以被
    SEO 爬虫难以索引。那么现在呢？难道一定要回到 [Wordpress](https://wordpress.org/) 吗？
- en: '[**Atwood’s Law**](https://blog.codinghorror.com/the-principle-of-least-power/):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[**阿特伍德法则**](https://blog.codinghorror.com/the-principle-of-least-power/)：'
- en: Any application that *can* be written in JavaScript, *will* eventually be written
    in JavaScript.
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 任何可以用 JavaScript 编写的应用，最终都将会用 JavaScript 编写。
- en: By that point [Node.js](https://nodejs.org/) had picked up enough steam. We
    were beginning to see a new generation of tooling that was birthed from the idea
    that JavaScript is going to run **everywhere**. Not just the browser. Among these
    tools was [Gatsby](https://www.gatsbyjs.com/). It allowed you to write “websites”
    in React. It came riding on a wave of “headless” CMS startups that were trying
    to compete in this new market. All of a sudden we saw terms like ”[JAM stack](https://jamstack.org/)”
    thrown around. All it meant is decoupling presentation from data. Which was not
    a new idea. It turned out to be a very short lived trend for JAM stack. Gatsby
    couldn’t catch a break. Just as it was about to gain some traction as the defacto
    Node.js/React website generator, a new challenger approached.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 到了那个时候，[Node.js](https://nodejs.org/) 已经足够火热。我们开始看到一个新一代的工具，这些工具都是基于“JavaScript将无处不在”的理念诞生的。不仅仅是浏览器。在这些工具中，[Gatsby](https://www.gatsbyjs.com/)
    就是其中之一。它让你可以用React来写“网站”。它随着一波“无头”CMS初创公司的兴起而来。突然之间，我们开始听到像“[JAM stack](https://jamstack.org/)”这样的术语。所有它所代表的就是将展示与数据解耦。这并不是一个新概念。对于JAM
    stack来说，这很快就变成了一个非常短暂的潮流。Gatsby始终难以突围。正当它快要成为事实上的Node.js/React网站生成器时，一个新的竞争者出现了。
- en: Next.js
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Next.js
- en: Back then (around 2016), React was not opinionated. It was a library that only
    concerned itself with rendering and state. While other frameworks like Angular.js
    came bundled with everything you may need to get up and running, React opted to
    allow the community to figure things out. And figure out they did. We had a new
    JavaScript bundler every other Tuesday, a new router every Sunday, a new CSS-in-JS
    solution every Friday, and a new state management library every f***ken day.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当时（大约在2016年），React并不持有任何特定的观点。它只是一个专注于渲染和状态的库。而像Angular.js这样的其他框架则捆绑了你可能需要的一切，可以让你快速启动。React选择让社区自己解决问题。他们确实解决了问题。我们每隔一周就会有一个新的JavaScript打包工具，每个星期天都会有一个新的路由器，每个星期五都会有一个新的CSS-in-JS解决方案，每一天都会有一个新的状态管理库。
- en: Enters Next.js. Your very own open-source / blazingly-fast (not really) / batteries-included
    React framework. While things like Gatsby offered a choice between a dynamic SPA
    or a static pre-rendered website, Next.js supported multiple rendering modes.
    By default it pre-rendered pages which made site generators like Gatsby obsolete.
    In addition to pre-rendering, it supported server-side rendering for cases when
    page content can’t be known at build time and must be rendered depending on request
    params. It also came with client-side rendering support which also made it a viable
    option for SPAs. Furthermore, you could mix and match between all these rendering
    modes. The way it works is once the user requests a certain page from the server,
    the server renders an HTML document with all the elements needed to view the page.
    The JavaScript would take over and hydrate all the elements with the necessary
    event listeners for the page to be interactive. A client side router would also
    take over. This meant that we don’t need to choose between websites and apps anymore.
    As Next gave us the SEO/performance benefits of server-side-rendering while maintaining
    the app-like user experience. It meant the death of the website/web app dichotomy.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 进入 Next.js。你自己的开源/极速（其实不是）/一应俱全的 React 框架。虽然像 Gatsby 这样的工具在动态单页应用或静态预渲染网站之间提供了选择，Next.js
    支持多种渲染模式。默认情况下，它预渲染页面，使得像 Gatsby 这样的站点生成器过时了。除了预渲染，它还支持服务器端渲染，用于处理在构建时无法知道页面内容，必须根据请求参数进行渲染的情况。它还支持客户端渲染，这使得它成为单页应用的一个可行选择。此外，你可以混合匹配所有这些渲染模式。它的工作方式是一旦用户从服务器请求某个页面，服务器就会渲染一个带有所有页面查看所需元素的
    HTML 文档。然后 JavaScript 接管并为页面交互性添加必要的事件监听器。客户端路由器也会接管。这意味着我们不再需要在网站和应用之间做选择。因为
    Next.js 提供了服务器端渲染的 SEO/性能优势，同时保持了应用般的用户体验。这意味着网站/网络应用二元对立的终结。
- en: The Cloud™
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 云™
- en: 'Let’s take the timeline back a few years. At around 2006, another change brewing
    in parallel was the rise of “The Cloud”. In simple terms, it means you don’t have
    to use your bare metal servers anymore. You can use Amazon’s. Yes, Amazon had
    a few servers they did not need and decided to start [AWS](https://aws.amazon.com/).
    Amazon’s approach was unique compared the OGs that existed at that time. Companies
    like IBM and Oracle went for big/exclusive enterprise contracts that aimed to
    take over the IT department of a company using their proprietary tools. AWS offered
    a number of independent services that anyone could buy. Make no mistake, the end
    goal for AWS was the exact same: take over the IT department of your company.
    They just had you (the developer) work for it yourself. Genius if you ask me.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把时间线推回几年。大约在2006年左右，另一个并行发展的变化是“云”的兴起。简单来说，这意味着您不再需要使用裸金属服务器。您可以使用亚马逊的。是的，亚马逊有一些闲置的服务器，他们决定开始[AWS](https://aws.amazon.com/)。亚马逊的方法与当时的老牌公司有所不同。像IBM和Oracle这样的公司选择了大型/独家企业合同，旨在通过使用其专有工具接管公司的IT部门。AWS提供了许多任何人都可以购买的独立服务。不要误会，AWS的最终目标与之前完全相同：接管您公司的IT部门。他们只是让您（开发者）自己来完成这些工作。如果您问我，这是一个天才的想法。
- en: In practice, AWS’s approach of offering a large number of independent services
    that you can stitch together to architect your app worked well for large companies
    with dedicated sys-admin/ops teams. It didn’t work quite well for the new wave
    of JavaScript developers that just graduated bootcamps. Why do I have to fiddle
    with 15 services and an abhorrent dashboard to deploy my twitter clone ? And so
    a new generation of cloud companies was birthed from the market’s need for simpler
    cloud platforms. To my knowledge most of which were built on top of AWS. They
    just made the most common use cases easier than ever. Coming with things like
    CI/CD, scaling, analytics, and CDN out of the box and packaged in a beautiful
    dashboard. Among these companies was a company named [Vercel](https://vercel.com/).
    The company that made Next.js.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，AWS提供了大量独立的服务，您可以将它们拼凑在一起来设计您的应用程序，这在拥有专门的系统管理员/运维团队的大型公司中效果很好。但对刚从bootcamp毕业的新一波JavaScript开发者来说，这种方法并不是很适合。为什么我要费心去摆弄15个服务和一个难以忍受的仪表板来部署我的Twitter克隆？因此，市场对更简单的云平台的需求催生了一代新的云公司。据我所知，其中大多数都是建立在AWS之上的。它们只是让最常见的用例比以往更容易实现。像CI/CD、扩展、分析和CDN等功能都已内置，并包装在美观的仪表板中。在这些公司中，有一家名叫[Vercel](https://vercel.com/)的公司。它是让Next.js流行起来的公司。
- en: JavaScript that’s a lot more like C#
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaScript更像C#了。
- en: The more JavaScript took over, the more people started to realize that it was
    inadequate for its’ new role as the one language to rule them all. Among its’
    many inadequacies is being a dynamically typed language. Which meant that building
    libraries and big applications using JavaScript was a tedious process of `console.log`ing
    everything and hoping you get what you need. So a statically typed JavaScript
    was needed.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 随着JavaScript的普及，越来越多的人开始意识到它在其新角色作为统治所有语言的一种语言方面是不足的。在其许多不足之处之一是作为一种动态类型语言。这意味着使用JavaScript构建库和大型应用程序是一个繁琐的过程，需要不断地使用`console.log`并希望得到所需的结果。因此，需要一种静态类型的JavaScript。
- en: Meanwhile, a team at Google was building Angular 2 (because the first one wasn’t
    enough). They needed a typed JavaScript with support for decorator syntax. They
    were about to create their own language when they discovered that Microsoft had
    beat them to it and created [TypeScript](https://www.typescriptlang.org/).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，Google的一个团队正在构建Angular 2（因为第一个还不够）。他们需要一种支持装饰器语法的类型化JavaScript。当他们发现微软已经超越他们并创建了[TypeScript](https://www.typescriptlang.org/)时，他们正要创建自己的语言。
- en: TypeScript is simply a compiler that offers static type analysis to your JavaScript
    code. Its’ syntax was very close to JavaScript so adopting it was very simple.
    Facebook tried to compete with [Flow](https://flow.org/). But TypeScript’s familiarity
    ended up winning and Flow … flew into the mist (sorry). But why stop at static
    type analysis and syntactic sugar ? Why not make the most out of our build step
    ?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript只是一个为您的JavaScript代码提供静态类型分析的编译器。它的语法非常接近JavaScript，因此采用它非常简单。Facebook试图与[Flow](https://flow.org/)竞争。但是TypeScript的熟悉度最终赢得了胜利，而Flow…消失在迷雾中（抱歉）。但为什么要止步于静态类型分析和语法糖？为什么不充分利用我们的构建步骤呢？
- en: Svelte
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Svelte
- en: Driven by the belief that frameworks should only augment/enhance the web platform
    not replace it or change it, [Svelte](https://svelte.dev/) was made. While most
    frameworks at the time of its’ release had to ship a large JavaScript bundle to
    handle rendering and reactivity, Svelte was just a compiler. There’s no Svelte
    script that gets shipped to the browser. The Svelte compiler generates some highly
    optimized reactivity code that’s much much smaller and faster than the rest.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 基于一种信念，即框架应该只是增强/增强网络平台，而不是取代它或改变它，[Svelte](https://svelte.dev/)诞生了。在其发布时，大多数框架都必须发送一个大型JavaScript包来处理渲染和反应性，而Svelte只是一个编译器。没有Svelte脚本被发送到浏览器。Svelte编译器生成了一些高度优化的反应性代码，比其他框架要小得多，速度更快。
- en: The team behind it also made [SvelteKit](https://kit.svelte.dev/). A framework
    on top of Svelte that handles bundling, routing, and pretty much everything you
    may need in a web framework. Its’ very mature routing and data-loading patterns
    have made me give up on using GraphQL in most of my projects. Why spend time and
    effort securing and optimizing a GraphQL schema when I can throw a database call
    in a `load` function and have everything be typed server to client ? It’s an absolute
    win when it comes to app development. Similar techniques are also available in
    other frameworks like [Nuxt](https://nuxt.com/), [Next](https://nextjs.org/),
    and [SolidStart](https://start.solidjs.com/getting-started/what-is-solidstart).
    This makes the overhead cost of GraphQL development very hard to justify in *most*
    cases.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 背后的团队还开发了[SvelteKit](https://kit.svelte.dev/)。这是建立在Svelte之上的一个框架，处理捆绑、路由和几乎所有你在Web框架中可能需要的东西。它非常成熟的路由和数据加载模式使我放弃了在大多数项目中使用GraphQL。为什么要花时间和精力去保护和优化一个GraphQL模式，当我可以在`load`函数中调用数据库查询，并且所有的内容从服务器到客户端都是有类型的呢？在应用程序开发中，这绝对是一种胜利。类似的技术也适用于其他框架，如[Nuxt](https://nuxt.com/)、[Next](https://nextjs.org/)和[SolidStart](https://start.solidjs.com/getting-started/what-is-solidstart)。这使得在*大多数*情况下很难证明GraphQL开发的额外成本是合理的。
- en: 'HTMX: there and back again'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTMX：从那里再次回来
- en: Remember the good ol’ days ? When the server sent HTML instead of JSON ? [HTMX](https://htmx.org/)
    gives all the power *back* to the server. You include an HTMX script tag on all
    your pages. Any mutation that happens to the state will result in HTMX swapping
    an element on the screen with whatever the backend sent. This is not a particularly
    new idea. For example, [GitHub](https://github.com/) is already built that way
    using [Ruby](https://www.ruby-lang.org/en/). But HTMX revitalized it by [posting
    memes](https://twitter.com/htmx_org/status/1306234341056344065) on twitter. And
    I love it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 记得那些美好的旧日吗？服务器发送HTML而不是JSON？[HTMX](https://htmx.org/)将所有权力*还给*了服务器。你在所有页面上包含了一个HTMX脚本标签。任何对状态的变更都会导致HTMX将屏幕上的一个元素与后端发送的内容进行交换。这并不是一个特别新的想法。例如，[GitHub](https://github.com/)已经是用[Ruby](https://www.ruby-lang.org/en/)构建的。但HTMX通过[在Twitter上发布梗](https://twitter.com/htmx_org/status/1306234341056344065)使其复兴。我喜欢它。
- en: We must also appreciate the appeal it has to programmers who are not in the
    JavaScript bubble. Imagine you’ve been writing Go, Java, or anything that’s proper,
    and you went to make a website. People started telling you to use JavaScript.
    But why include JavaScript to begin with ? Why not do the whole thing in the one
    language you like? HTMX offers that to people without coupling it with a complete
    backend framework like [Rails](https://rubyonrails.org/) does it. You pick whatever
    backend language you like and as long as you’re returning HTML in response, you’re
    good to go. And speaking of Rails, why is that framework not dead yet ? Why is
    PHP still a thing ? And most importantly, why on earth is React still alive ?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须欣赏它对那些不局限于 JavaScript 的程序员的吸引力。想象一下，你一直在写 Go、Java 或其他合适的语言，然后你想做一个网站。人们开始告诉你要用
    JavaScript。但是为什么要一开始就用 JavaScript 呢？为什么不完全用你喜欢的那一种语言呢？HTMX 给那些人提供了这样的机会，而不会像[Rails](https://rubyonrails.org/)那样与完整的后端框架捆绑在一起。你可以选择任何你喜欢的后端语言，只要返回
    HTML 就可以了。而且说到 Rails，为什么这个框架还没死呢？为什么 PHP 仍然存在？最重要的是，为什么 React 还在继续存在呢？
- en: React is not going to die
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: React 不会死
- en: I know it’s very hard. But let’s look at this objectively. As of the time of
    writing (early 2024), is React *better* at any particular thing compared to all
    the other mainstream UI frameworks ? **No, it is not**. Even Angular, the framework
    everyone loves to hate has been getting updates that objectively improve performance,
    maintainability, and developer experience.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这很难。但让我们客观地看待这个问题。截至撰写本文（2024年初），React 在任何特定事情上是否比所有其他主流 UI 框架*更好*？**不，它没有**。即使是
    Angular，这个人人都爱讨厌的框架，也在不断更新，从客观上改进了性能、可维护性和开发者体验。
- en: Meanwhile React seems to be wandering aimlessly. We started with class components,
    then we changed some life cycle hooks, then everything became “functional”. Everyone
    was praising the new “functional” API with `useState` and `useEffect`. But people
    quickly realized that `useEffect` was a very bad abstraction given the way React
    works. It was a foot gun. And for a while React devs didn’t know what was the
    alternative ? It was at this time that Vercel started hiring a few of React’s
    core maintainers. It was at this time when Next.js and React essentially became
    one and the same. And [server components](https://www.joshwcomeau.com/react/server-components/)
    became the new ~~foot-gun~~ API the React team is recommending. All that and people
    are yet to figure out the “React” way of doing things.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，React 似乎在漫无目的地徘徊。我们从类组件开始，然后改变了一些生命周期钩子，然后一切都变成了“函数式”。每个人都在赞扬新的“函数式”API，比如
    `useState` 和 `useEffect`。但很快人们意识到，考虑到 React 的工作方式，`useEffect` 是一个非常糟糕的抽象。这是一个误导。有一段时间，React
    开发者不知道有什么替代方案？就在这个时候，Vercel 开始雇佣了一些 React 的核心维护者。就在这个时候，Next.js 和 React 本质上变成了一个整体。[服务器组件](https://www.joshwcomeau.com/react/server-components/)成为了
    React 团队推荐的新~~误导~~ API。所有这些，人们仍然没有找出“React”的正确做法。
- en: Regardless of all that pain, React is still [the most downloaded framework on
    NPM](https://npmtrends.com/@angular/core-vs-react-vs-solid-js-vs-svelte-vs-vue)
    compared to other frameworks. It’s not even close. But why ?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管所有这些痛苦，与其他框架相比，React 仍然是 [NPM 上下载量最多的框架](https://npmtrends.com/@angular/core-vs-react-vs-solid-js-vs-svelte-vs-vue)。没有任何框架能与它相提并论。但为什么呢？
- en: Look around you. No technology that was once mainstream ever dies. People rarely
    pick “the best tool for the job”. They say that. But what they mean is “the tool
    I’m familiar with the most”. That’s it. That’s why React is probably not dying
    anytime soon. But it doesn’t matter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 看看你周围。曾经主流的技术从不会消失。人们很少会选择“最适合工作的工具”。他们会这么说。但他们的意思是“我最熟悉的工具”。就这样。这就是为什么 React
    可能不会很快消亡的原因。但这并不重要。
- en: Really, it does not.
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 真的，没有。
- en: Wanna keep using React ? Wanna switch to something better like Svelte ? Wanna
    avoid JavaScript like the plague and use HTMX ? It doesn’t matter to the end user.
    As long as you’re providing value to people and/or having fun doing it, you’re
    good. Don’t feel bad about your technical choices because someone on the internet
    wants you to. Programming is a craft. There’s way more leeway than the person
    who’s selling you a course about “framework X”, “language Y”, or a book about
    “clean code/design/architecture” wants you to believe. And putting all this history
    into writing only serves to enforce this sentiment. **Things will change**. And
    no matter how much they do, we’ll still be programmers. Our primary function is
    to write useful programs. Have fun 🍉
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 想继续使用 React 吗？想转向像 Svelte 这样更好的东西吗？想像避开 JavaScript 一样避开瘟疫，用 HTMX 吗？对于最终用户来说并不重要。只要你为人们提供价值和/或乐在其中，就没问题。不要因为网上的某个人想让你改变技术选择而感到难过。编程是一门手艺。比起那些想要向你推销“框架
    X”、“语言 Y”的人，或者那些关于“清洁代码/设计/架构”的书籍所说的要自由得多。将所有这些历史写下来只会强化这种情感。**事情会变的**。无论它们如何变化，我们仍将是程序员。我们的主要功能是编写有用的程序。玩得开心
    🍉
