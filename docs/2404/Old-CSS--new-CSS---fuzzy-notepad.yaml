- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:12:14'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:12:14
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Old CSS, new CSS / fuzzy notepad
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旧的CSS，新的CSS / 模糊的笔记本
- en: 来源：[https://eev.ee/blog/2020/02/01/old-css-new-css/](https://eev.ee/blog/2020/02/01/old-css-new-css/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://eev.ee/blog/2020/02/01/old-css-new-css/](https://eev.ee/blog/2020/02/01/old-css-new-css/)
- en: I first got into web design/development in the late 90s, and only as I type
    this sentence do I realize how long ago that was.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我是在90年代末才开始涉足网页设计和开发的，直到我敲下这句话的时候才意识到那是多么久远的事了。
- en: And boy, it was horrendous. I mean, being able to make stuff and put it online
    where other people could see it was pretty slick, but we did not have very much
    to work with.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这简直太可怕了。我的意思是，能够制作东西并且让其他人在线上看到确实很酷，但我们的工具并不是很多。
- en: I’ve been taking for granted that *most* folks doing web stuff still remember
    those days, or at least the decade that followed, but I think that assumption
    might be a wee bit out of date. Some time ago I encountered a [tweet](https://twitter.com/keinegurke_/status/1162309192855822339)
    marvelling at what we had to do without `border-radius`. I still remember waiting
    with bated breath for it to be unprefixed!
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直认为*大多数*从事网页相关工作的人都还记得那些日子，或者至少记得随之而来的那十年，但我觉得这种假设可能有点过时。不久前，我看到一条[tweet](https://twitter.com/keinegurke_/status/1162309192855822339)，对我们在没有`border-radius`时所做的事感到惊讶。我仍然记得满怀期待地等待它去掉前缀！
- en: But then, I suspect I also know a number of folks who only tried web design
    in the old days, and assume nothing about it has changed since.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我怀疑我也认识一些只在旧日尝试过网页设计的人，他们或许认为一切都没有改变。
- en: I’m here to tell *all* of you to get off my lawn. Here’s a history of CSS and
    web design, as I remember it.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里要告诉**所有人**离开我的草坪。这是我记忆中的CSS和网页设计历史。
- en: '* * *'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: (Please bear in mind that this post is a fine blend of memory and research,
    so I can’t guarantee any of it is actually correct, *especially* the bits about
    causality. You may want to try the [W3C’s history of CSS](https://www.w3.org/Style/CSS20/history.html),
    which is considerably shorter, has a better chance of matching reality, and contains
    significantly less swearing.)
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: （请记住，这篇文章是记忆和研究的结合体，所以我不能保证任何内容是正确的，*特别是*关于因果关系的部分。你可能想看看[W3C关于CSS历史的页面](https://www.w3.org/Style/CSS20/history.html)，这个页面要短得多，更接近现实，也少得多的带有不雅语言。）
- en: (Also, this would benefit greatly from more diagrams, but it took long enough
    just to *write*.)
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: （另外，更多的示意图会让这篇文章大有裨益，但光是*写*就已经花了很长时间。）
- en: In the beginning, there was no CSS.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，并没有CSS。
- en: This was very bad.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的很糟糕。
- en: 'My favorite artifact of this era is the book that taught me HTML: O’Reilly’s
    [HTML: The Definitive Guide](https://isbnsearch.org/isbn/9781565924925), published
    in several editions in the mid to late 90s. The book was indeed about *HTML*,
    with no mention of CSS at all. I don’t have it any more and can’t readily find
    screenshots online, but here’s a page from HTML & XHTML: The Definitive Guide,
    which seems to be a revision (I’ll get to XHTML later) with much the same style.
    Here, then, is the cutting-edge web design advice of 199X:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我最喜欢的那个时代的遗物是教会我HTML的书籍：O’Reilly的[HTML权威指南](https://isbnsearch.org/isbn/9781565924925)，在90年代中后期出版了几个版本。这本书确实是关于*HTML*的，完全没有提到CSS。我已经找不到它了，也很难在网上找到截图，但这里有一张来自HTML与XHTML：权威指南的页面，似乎是修订版（我会稍后提到XHTML），风格基本相同。这里是199X年的尖端网页设计建议：
- en: “*Clearly delineate headers and footers with horizontal rules.*”
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: “*清楚地用水平线条分割页眉和页脚。*”
- en: No, that’s not a `border-top`. That’s an `<hr>`. The page title is almost certainly
    centered with, well, `<center>`.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不，那不是`border-top`。那是`<hr>`。页面标题几乎肯定是用了`<center>`居中。
- en: The page uses the default text color, background, and font. Partly because this
    is a guidebook introducing concepts one at a time; partly because the book was
    printed in black and white; and partly, I’m sure, because it reflected the reality
    that coloring anything was a huge pain in the ass.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 页面使用默认的文本颜色、背景和字体。部分原因是这本书是一本逐步介绍概念的指南；部分原因是这本书是黑白印刷的；还有部分原因，我敢肯定，是因为任何上色工作都非常让人头疼。
- en: 'Let’s say you wanted all your `<h1>`s to be red, across your entire site. You
    had to do this:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想让整个网站上所有的`<h1>`都是红色的。你必须这样做：
- en: '|  |'
  id: totrans-split-21
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE0]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: …*every single goddamn time*. Hope you never decide to switch to blue!
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: …*每一次都是这样*。希望你永远不要决定改用蓝色！
- en: 'Oh, and everyone wrote HTML tags in all caps. I don’t remember why we all thought
    that was a good idea. Maybe this was before syntax highlighting in text editors
    was very common (read: I was 12 and using Notepad), and uppercase tags were easier
    to distinguish from body text.'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，每个人都以大写字母编写HTML标签。我不记得为什么我们都认为那是个好主意。也许这是因为文本编辑器中的语法高亮还不太普遍（我的意思是：我12岁时在用记事本），大写标签更容易与正文区分开。
- en: Keeping your site consistent was thus something of a nightmare. One solution
    was to simply not style anything, which a lot of folks did. This was nice, in
    some ways, since browsers let you change those defaults, so you could read the
    Web how you wanted.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，保持你的网站一致性有点儿像噩梦。一个解决方案是简单地不对任何东西进行样式化，很多人都这样做了。在某些方面，这很好，因为浏览器允许你更改这些默认设置，所以你可以按自己的方式阅读网络。
- en: A clever alternate solution, which I remember showing up in a lot of Geocities
    sites, was to simply give every page a completely different visual style. Fuck
    it, right? Just do whatever you want on each new page.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个聪明的替代方案，我记得在很多Geocities网站上看到过，就是给每个页面都赋予完全不同的视觉风格。反正，对吧？每个新页面都随心所欲地做。
- en: That trend was quite possibly the height of web design.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 那种趋势很可能是网络设计的顶峰。
- en: Damn, I miss those days. There were no big walled gardens, no Twitter or Facebook.
    If you had anything to say to anyone, you had to put together your own website.
    It was *amazing*. No one knew what they were doing; I’d wager that the vast majority
    of web designers at the time were clueless hobbyist tweens (like me) all copying
    from other clueless hobbyist tweens. Half the Web was fan portals about Animorphs,
    with inexplicable splash pages warning you that their site worked best if you
    had a 640×480 screen. (Any 12-year-old with insufficient resolution should, presumably,
    buy a new monitor with their allowance.) Everyone who was cool and in the know
    used Internet Explorer 3, the most advanced browser, but some losers still used
    Netscape Navigator so you had to put a “Best in IE” animated GIF on your splash
    page too.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 天啊，我怀念那些日子。当时没有高墙花园，没有Twitter或Facebook。如果你想对任何人说点什么，你得自己搭建网站。那是*太棒了*。没有人知道自己在做什么；我敢打赌，当时绝大多数网页设计师都是毫无头绪的业余爱好者青少年（比如我），都在互相抄袭其他毫无头绪的业余爱好者青少年。一半的网络是关于《变形金刚》的粉丝门户网站，带有令人费解的闪屏页面，警告说如果你的屏幕分辨率是640×480，他们的网站效果最佳。（显然，任何分辨率不足的12岁孩子应该用零用钱买个新显示器。）所有Cool并且在行的人都使用Internet
    Explorer 3，这是当时最先进的浏览器，但是一些失败者仍然使用Netscape Navigator，所以你必须在闪屏页面上放置一个“最佳IE”动画GIF。
- en: This was also the era of “web-safe colors” — a palette of 216 colors, where
    every channel was one of `00`, `33`, `66`, `99`, `cc`, or `ff` — which existed
    because some people still had 256-color monitors! The things we take for granted
    now, like 24-bit color.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是“网络安全颜色”时代的产物 — 一种包含216种颜色的调色板，其中每个通道都是`00`、`33`、`66`、`99`、`cc`或`ff` — 这种存在是因为一些人仍然使用256色的显示器！现在我们理所当然的事物，比如24位色彩。
- en: 'In fact, a *lot* of stuff we take for granted now was still a strange and untamed
    problem space. You want to have the same navigation on every page on your website?
    Okay, no problem: copy/paste it onto each page. When you update it, be sure to
    update every page — but most likely you’ll forget some, and your whole site will
    become an archaeological dig into itself, with strata of increasingly bitrotted pages.'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们现在理所当然的*很多*东西当时仍然是一个奇怪而未被开发的问题空间。你想在网站的每个页面上都有相同的导航？好的，没问题：复制/粘贴到每个页面上。当你更新它时，记得更新每个页面
    —— 但最有可能你会忘记一些页面，整个网站就变成了自己的考古挖掘，有越来越腐败的页面层。
- en: Much easier was to use *frames*, meaning the browser window is split into a
    grid and a different page loads in each section… but then people would get confused
    if they landed on an individual page without the frames, as was common when coming
    from a search engine like AltaVista. (I can’t believe I’m explaining frames, but
    no one has used them since like 2001\. You know iframes? The “i” is for *inline*,
    to distinguish them from *regular* frames, which take up the entire viewport.)
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*框架*要简单得多，意思是浏览器窗口分割成网格，每个部分加载不同的页面……但是如果他们登陆没有框架的独立页面，这时人们会感到困惑，这在从AltaVista等搜索引擎跳转时很常见。（我真不敢相信我在解释框架，但是自2001年以来没有人再使用它们了。你知道iframes吗？“i”代表*内联*，以区别于*常规*框架，后者占据整个视口。）
- en: 'PHP wasn’t even called that yet, and nobody had heard of it. This weird “Perl”
    and “CGI” thing was really strange and hard to understand, and it didn’t work
    on your own computer, and the errors were hard to find and diagnose, and anyway
    Geocities didn’t support it. If you were *really* lucky and smart, your web host
    used Apache, and you could use its “server side include” syntax to do something
    like this:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 当时甚至还没有被称为 PHP，没人听说过它。这种奇怪的 “Perl” 和 “CGI” 真的很奇怪和难以理解，而且在你自己的计算机上无法运行，错误也很难找到和诊断，而且
    Geocities 不支持它。如果你真的很幸运和聪明，你的网络主机使用的是 Apache，你可以使用其 “服务器端包含” 语法来做类似于这样的事情：
- en: '|'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE1]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE2]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '*Mwah.* Beautiful. Apache would see the special comments, paste in the contents
    of the referenced files, and you’re off to the races. The downside was that when
    you wanted to work on your site, all the navigation was missing, because you were
    doing it on your regular computer without Apache, and your web browser thought
    those were just regular HTML comments. It was impossible to install Apache, of
    course, because you had a *computer*, not a *server*.'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*Mwah.* 美妙。Apache 会看到这些特殊注释，粘贴引用文件的内容，然后你就可以开始操作了。不过，缺点是当你想要在自己的网站上工作时，所有导航都不见了，因为你在没有
    Apache 的普通计算机上进行操作，而你的网络浏览器认为这些只是普通的 HTML 注释。当然，安装 Apache 是不可能的，因为你有一台 *电脑*，而不是
    *服务器*。'
- en: Sadly, that’s all gone now — paved over by homogenous timelines where anything
    that wasn’t made this week is old news and long forgotten. The web was supposed
    to make information eternal, but instead, so much of it became ephemeral. I miss
    when virtually everyone I knew had their own website. Having a Twitter and an
    Instagram as your entire online presence is a poor substitute.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，这一切都已经消失了 —— 被同质化的时间线所掩埋，那些不是这周制作的东西都成了过时和被遗忘的东西。互联网本应使信息永恒，但实际上，很多信息却是短暂的。我怀念几乎我认识的每个人都有自己的网站的时代。拥有
    Twitter 和 Instagram 作为你整个在线存在的替代品实在是差强人意。
- en: …
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: So, let’s look at the Space Jam website.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们来看看《Space Jam》的网站。
- en: Space Jam, if you’re not aware, is the greatest movie of all time. It documents
    Bugs Bunny’s extremely short-lived basketball career, playing alongside a live
    action Michael Jordan to save the planet from aliens for some reason. It was followed
    by a series of very successful and critically acclaimed [RPG spinoffs](https://www.talesofgames.com/related_game/barkley-shut-up-jam-gaiden/),
    which describe the fallout of the Space Jam and are extremely canon.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不了解，《Space Jam》是有史以来最伟大的电影。它记录了兔八哥极其短暂的篮球生涯，与现实中的迈克尔·乔丹一起拯救地球免受外星人侵害，原因无关紧要。它后来推出了一系列非常成功和广受好评的
    [RPG 衍生作品](https://www.talesofgames.com/related_game/barkley-shut-up-jam-gaiden/)，描述了《Space
    Jam》的余波，非常符合正史。
- en: And we are truly blessed, for 24 years after it came out, its website is [STILL
    UP](https://www.spacejam.com/1996/). We can explore the pinnacle of 1996 web design,
    right here, right now.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是真的幸运，因为《Space Jam》发布 24 年后，它的网站依然 [保持在线](https://www.spacejam.com/1996/)。我们可以在这里探索1996年网页设计的巅峰，就在这里，就在现在。
- en: First, notice that every page of this site is a static page. Not only that,
    but it’s a static page ending in `.htm` rather than `.html`, because people on
    Windows versions before 95 were still beholden to 8.3 filenames. Not sure why
    that mattered in a URL, as if you were going to run Windows 3.11 on a Web server,
    but there you go.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请注意，这个网站的每一页都是静态页面。不仅如此，它是以 `.htm` 结尾而不是 `.html`，因为在 Windows 95 之前的版本上，人们仍然受制于
    8.3 文件名。不确定为什么在 URL 中这很重要，好像你要在 Web 服务器上运行 Windows 3.11 一样，但是事实就是如此。
- en: 'The CSS for the splash page looks like this:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 闪屏页的 CSS 看起来是这样的：
- en: '|  |'
  id: totrans-split-47
  prefs: []
  type: TYPE_TB
  zh: '|'
- en: '[PRE3]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Haha, just kidding! What the fuck is CSS? Space Jam predates it by a month.
    (I do see a single line in the page source, but I’m pretty sure that was added
    much later to style some legally obligatory policy links.)
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 哈哈，开个玩笑！CSS 是什么鬼？《Space Jam》比它早了一个月。（我在页面源代码中看到了一行，但我很确定那是后来添加的，用来为一些法律上义务的政策链接设置样式。）
- en: 'Notice the extremely precise positioning of these navigation links. This feat
    was accomplished the same way everyone did everything in 1996: with tables.'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意这些导航链接的极其精确的定位。这项技术是1996年人们完成一切工作的方式：使用表格。
- en: In fact, tables have one functional advantage over CSS for layout, which was
    very important in those days, and not only because CSS didn’t exist yet. You see,
    you can ctrl-click to select a table *cell* and even drag around to select all
    of them, which shows you how the cells are arranged and functions as a super retro
    layout debugger. This was great because the first meaningful web debug tool, [Firebug](https://en.wikipedia.org/wiki/Firebug_%28software%29),
    wasn’t released until 2006 — a whole decade later!
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，表格在布局上比 CSS 有一个功能优势，这在那些日子非常重要，不仅因为当时还没有 CSS。你看，你可以使用 Ctrl+单击来选择表格*单元格*，甚至拖动来选择所有单元格，这显示了单元格的排列方式，起到了超级复古布局调试器的功能。这非常棒，因为第一个有意义的网络调试工具，[Firebug](https://en.wikipedia.org/wiki/Firebug_%28software%29)，直到
    2006 年才发布——整整十年之后！
- en: 'The markup for this table is overflowing with inexplicable blank lines, but
    with those removed, it looks like this:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表格的标记溢出了许多令人费解的空行，但如果去掉这些空行，它看起来就像这样：
- en: '|'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE4]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE5]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: That’s the first two rows, including the logo. You get the idea. Everything
    is laid out with `align` and `valign` on table cells; `rowspan`s and `colspan`s
    are used frequently; and there are some `<br>`s thrown in for good measure, to
    adjust vertical positioning by one line-height at a time.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前两行，包括徽标。你明白了吧。所有内容都用表格单元格上的`align`和`valign`布局；`rowspan`和`colspan`经常使用；还有一些
    `<br>` 用来微调每次一个行高的垂直定位。
- en: Other fantastic artifacts to be found on this page include this header, which
    contains Apache SSI syntax! This must’ve quietly broken when the site was moved
    over the years; it’s currently hosted on Amazon S3\. You know, Amazon? The bookstore?
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面上还有其他奇妙的遗物，包括这个头部，其中包含 Apache SSI 语法！这肯定在这些年移动站点时悄悄断掉了；它目前托管在 Amazon S3
    上。你知道，亚马逊？那个书店？
- en: '|  |'
  id: totrans-split-61
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE6]'
  id: totrans-split-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Okay, let’s check out [jam central](https://www.spacejam.com/1996/cmp/jamcentral/jamcentralframes.html).
    I’ve used my browser dev tools to reduce the viewport to 640×480 for the authentic
    experience (although I’d also have lost some vertical space to the title bar,
    taskbar, and five or six IE toolbars).
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，让我们来看看[jam central](https://www.spacejam.com/1996/cmp/jamcentral/jamcentralframes.html)。我已经使用浏览器开发工具将视口缩小到640×480，以获得真实体验（虽然我也会失去标题栏、任务栏和五六个
    IE 工具栏的一些垂直空间）。
- en: 'Note the frames: the logo in the top left leads back to the landing page, cleverly
    saving screen space on repeating all that navigation, and the top right is a fucking
    ad banner which has been blocked like seven different ways. All three parts are
    separate pages.'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意框架：左上角的徽标导航回着陆页，巧妙地节省了重复所有导航的屏幕空间，右上角则是一个该死的广告横幅，已经被七种不同方式拦截了。这三部分都是单独的页面。
- en: Note also the utterly unreadable red text on a textured background, one of the
    truest hallmarks of 90s web design. “Why not put that block of text on an easier-to-read
    background?” you might ask. You imbecile. How would I *possibly* do that? Only
    the `<body>` has a `background` attribute! I could use a table, but tables only
    support solid background colors, and that would look so boring!
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意完全无法阅读的红色文本放在纹理背景上，这是90年代网页设计的真正特征之一。“为什么不将那段文字放在易于阅读的背景上？”你可能会问。你这个蠢货。我怎么*可能*做到？只有`<body>`有`background`属性！我可以用表格，但表格只支持纯色背景，那看起来会太无聊了！
- en: 'But wait, what is this new navigation widget? How are the links all misaligned
    like that? Is this yet another table? Well, no, although filling a table with
    chunks of a sliced-up image wasn’t uncommon. But this is an *imagemap*, a long-forgotten
    HTML feature. I’ll just show you the source:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 但等等，这是什么新的导航小部件？为什么链接都这么对不齐？这又是一个表格吗？不是，尽管用切割图像块填充表格并不罕见。但这是一个*图像映射*，一个被遗忘的
    HTML 功能。我来展示一下源代码：
- en: '|  |'
  id: totrans-split-68
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE7]'
  id: totrans-split-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: I assume this is more or less self-explanatory. The `usemap` attribute attaches
    an image map, which is defined as a bunch of clickable areas, beautifully encoded
    as inscrutable lists of coordinates or something.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这基本上是不言自明的。`usemap` 属性附加了一个图像映射，其定义为一堆可点击的区域，美丽地编码为晦涩的坐标列表或其他什么东西。
- en: And this stuff still works! This is in HTML! You could use it right now! Probably
    don’t though!
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些东西仍然有效！这是在 HTML 中！你现在可以使用它！虽然你可能不应该这样做！
- en: Let’s look at one more random page here. I’d love to see some photos from the
    film. (Wait, *photos*? Did we not know what “screenshots” were yet?)
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再来看看这里的另一页随机页面。我很想看看电影中的一些照片。（等等，*照片*？难道我们还不知道什么是“截图”吗？）
- en: Another frameset, but arranged differently this time.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个框架集，但这次排列方式不同。
- en: '|  |'
  id: totrans-split-75
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE8]'
  id: totrans-split-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '|'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'They did an important thing here: since they specified a background image (which
    is opaque), they *also* specified a background color. Without it, if the background
    image failed to load, the page would be white text on the default white background,
    which would be unreadable.'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 他们在这里做了一件重要的事情：因为他们指定了一个背景图像（是不透明的），他们*还*指定了一个背景颜色。如果没有这个颜色，如果背景图像加载失败，页面将是白色文本在默认的白色背景上，这将是*难以阅读*。
- en: (That’s *still* an important thing to keep in mind. I feel like modern web development
    tends to assume everything will load, or sees loading as some sort of inconvenience
    to be worked around, but not everyone is working on a wired connection in a San
    Francisco office twenty feet away from a backbone.)
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: （这仍然是需要牢记的重要事情。我觉得现代网页开发倾向于假设所有内容都会加载，或者将加载视为某种需要解决的不便，但并非每个人都在距离主干网二十英尺的旧金山办公室内使用有线连接。）
- en: But about the page itself. Thumbnail grids are a classic problem of web design,
    dating all the way back to… er… well, at least as far back as Space Jam. The main
    issue is that you want to *put things next to each other*, whereas HTML defaults
    to stacking everything in one big column. You could put all the thumbnails inline,
    in a single row of (wrapping) text, but that wouldn’t be much of a grid — and
    you usually want each one to have some sort of caption.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 但关于页面本身。缩略图网格是网页设计的经典问题，可以追溯到……嗯……至少可以追溯到《Space Jam》时代。主要问题在于你希望*把东西放在一起*，而HTML默认将所有内容堆叠在一个大列中。你可以将所有缩略图放在同一行（自动换行）的文本中，但那不会形成一个真正的网格——而且你通常希望每个缩略图都有某种形式的标题。
- en: 'Space Jam’s approach was to use the only real tool anyone had in their toolbox
    at the time: a table. It’s structured like this:'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 《Space Jam》的方法是使用当时所有人都有的唯一真正工具：表格。它的结构是这样的：
- en: '|  |'
  id: totrans-split-82
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE9]'
  id: totrans-split-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: A 3×3 grid of thumbnails, left to the browser to arrange. (The last image, on
    a row of its own, isn’t actually part of the table.) This can’t scale to fit your
    screen, but everyone’s screen was pretty tiny back then, so that was *slightly*
    less of a concern. They didn’t add captions here, but since every thumbnail is
    wrapped in a table cell, they easily could have.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一个3×3的缩略图网格，由浏览器来排列。（最后一张图片单独一行，实际上不是表格的一部分。）这种方式无法按比例缩放到你的屏幕大小，但那时每个人的屏幕都非常小，所以*略*不是太大的问题。他们在这里没有添加标题，但由于每个缩略图都包裹在一个表格单元中，他们很容易可以这样做。
- en: This was the state of the art in thumbnail grids in 1996\. We’ll be revisiting
    this little UI puzzle a few times; you can see live examples (and view source
    for sample markup) on a [separate page](https://eev.ee/media/2020-02-css/thumbnail-grids.html#tables).
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是1996年缩略图网格的技术水平。我们将会多次回顾这个小UI难题；你可以在[另一页](https://eev.ee/media/2020-02-css/thumbnail-grids.html#tables)上查看实时示例（并查看样本标记的源代码）。
- en: But let’s take a moment to appreciate the size of the “full-size, full-color,
    internet-quality” movie screenshots on my current monitor.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 但是让我们花点时间来欣赏一下“全尺寸、全彩色、互联网质量”的电影截图在我当前的显示器上的大小。
- en: Hey, though, they’re less than 16 KB! That’ll only take nine seconds to download.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿，它们不到16 KB！只需九秒就可以下载。
- en: (I’m reminded of the problem of embedded *video*, which wasn’t solved until
    HTML5’s `<video>` tag some years later. Until then, you had to use a binary plugin,
    and all of them were terrible.)
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: （我想起了嵌入式*视频*的问题，直到几年后HTML5的`<video>`标签才解决了这个问题。在那之前，你必须使用二进制插件，而且所有插件都很糟糕。）
- en: '(Oh, by the way: images within links, by default, have a link-colored border
    around them. Image links are *usually* self-evident, so this was largely annoying,
    and until CSS you had to disable them for every single image with `<img border=0>`.)'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: （哦，顺便说一句：默认情况下，链接内的图像周围有一个与链接颜色相同的边框。图像链接通常是不言自明的，因此这通常很烦人，在使用`<img border=0>`之前你必须为每个图像单独禁用它们。）
- en: So that’s where we started, and it sucked. If you wanted *any* kind of consistency
    on more than a handful of pages, your options were very limited, and they were
    pretty much limited to a whole lot of copying and pasting. The Space Jam website
    opted to, for the most part, not bother at all — as did many others.
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是我们开始的地方，而且很糟糕。如果你想要在超过少数页面上保持*任何*一致性，你的选择非常有限，基本上只能大量复制和粘贴。《Space Jam》网站基本上选择了不去烦恼——许多其他网站也是如此。
- en: 'Then CSS came along, it was a *fucking miracle*. All that inline repetition
    went away. You want all your top-level headings to be a particular color? No problem:'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后CSS出现了，简直是*个奇迹*。所有内联重复消失了。你想要所有顶级标题都是特定颜色？没问题：
- en: '|  |  |'
  id: totrans-split-93
  prefs: []
  type: TYPE_TB
  zh: '|  |  |'
- en: Bam! You’re done. No matter how many `<h1>`s you have in your document, every
    single one of them will be eye-searing red, and you never have to think about
    it again. Even better, you can put that snippet in its own file and have that
    questionable aesthetic choice applied to *every page of your whole site* with
    almost no effort! The same applied to your gorgeous tiling background image, the
    colors of your links, and the size of the font in your tables.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: Bam！完成了。无论您的文档中有多少个`<h1>`，每一个都会变成令人眼花缭乱的红色，而您无需再费心思。更棒的是，您可以将这段代码放入自己的文件中，并且几乎不费力气地将这种颇具争议的美学选择应用于*整个网站的每一页*！同样适用于您华丽的平铺背景图像，链接的颜色以及表格中字体的大小。
- en: (Just remember to wrap the contents of your `<style>` tags in HTML comments,
    or old browsers without CSS support will display them as text.)
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: （只需记住在HTML注释中包裹您`<style>`标签的内容，否则不支持CSS的旧浏览器将把它们显示为文本。）
- en: You weren’t limited to styling tags en masse, either. CSS introduced “classes”
    and “IDs” to target only specifically flagged elements. A *selector* like `P.important`
    would only affect `<P CLASS="important">`, and `#header` would only affect `<H1
    ID="header">`. (The difference is that IDs are intended to be unique in a document,
    whereas classes can be used any number of times.) With these tools, you could
    effectively invent your own tags, giving you a customized version of HTML specific
    to your website!
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您不仅限于大规模地设置标签的样式，CSS还引入了“类”和“ID”来专门目标标记的元素。像`P.important`这样的*选择器*只会影响`<P CLASS="important">`，而`#header`则只会影响`<H1
    ID="header">`。（区别在于ID在文档中是唯一的，而类可以任意使用。）借助这些工具，您可以有效地发明自己的标签，为您的网站提供一个定制版本的HTML！
- en: This was a huge leap forward, but at the time, no one (probably?) was thinking
    of using CSS to actually *arrange* the page. When [CSS 1](https://www.w3.org/TR/2008/REC-CSS1-20080411/)
    was made a recommendation in December ‘96, it barely addressed layout at all.
    All it did was divorce HTML’s *existing* abilities from the tags they were attached
    to. We had font colors and backgrounds *because* `<FONT COLOR>` and `<BODY BACKGROUND>`
    existed. The only feature that even remotely affected where things were positioned
    was the `float` property, the equivalent to `<IMG ALIGN>`, which pulled an image
    to the side and let text flow around it, like in a magazine article. Hardly whelming.
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个巨大的进步，但当时没有人（大概？）在考虑使用CSS来实际*排列*页面。当[CSS 1](https://www.w3.org/TR/2008/REC-CSS1-20080411/)在1996年12月成为推荐标准时，它几乎没有涉及布局。它所做的只是从HTML的*现有*能力中分离出它们所附属的标签。我们有字体颜色和背景色*因为*存在`<FONT
    COLOR>`和`<BODY BACKGROUND>`。唯一远程影响事物位置的特性是`float`属性，相当于`<IMG ALIGN>`，它将图像拉到侧边，并让文本围绕其周围流动，就像杂志文章一样。远非令人满意。
- en: This wasn’t too surprising. HTML hadn’t had any real answers for layout besides
    tables, and the table properties were too complicated to generalize in CSS and
    too entangled with the tag structure, so there was nothing for CSS 1 to inherit.
    It merely reduced the repetition in what we were already doing with e.g. `<FONT>`
    tags — making Web design less tedious, less error-prone, less full of noise, and
    much more maintainable. A pretty good step forward, and everyone happily adopted
    it for that, but tables remained king for arranging your page.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不太令人惊讶。除了表格之外，HTML对于布局并没有真正的答案，而表格属性过于复杂，无法在CSS中进行概括，并且与标签结构纠缠不清，因此CSS 1没有任何继承的内容。它只是简化了我们在`<FONT>`标签等上已经在做的事情
    —— 让Web设计更少单调，更少出错，更少噪音，并且更易于维护。这是一个相当不错的进步，每个人都欣然接受它，但表格仍然是排列页面的王者。
- en: That was okay, though; all your blog really needed was a header and a sidebar,
    which tables could do just fine, and it wasn’t like you were going to overhaul
    that basic structure very often. Copy/pasting a few lines of `<TABLE BORDER=0>`
    and `<TD WIDTH=20%>` wasn’t nearly as big a deal.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，你的博客实际上只需要一个页眉和一个侧边栏，而表格完全可以胜任，而且你也不会经常彻底改变这个基本结构。复制/粘贴几行`<TABLE BORDER=0>`和`<TD
    WIDTH=20%>`也不是什么大不了的事情。
- en: For some span of time — I want to say a couple years, but time passes more slowly
    when you’re a kid — this was the state of the Web. Tables for layout, CSS for…
    well, *style*. Colors, sizes, bold, underline. There was even this sick trick
    you could do with links where they’d *only* be underlined when the mouse was *pointing*
    at them. Tubular!
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时间段内 —— 我想说是几年，但当你还是个孩子时，时间过得更慢 —— 这就是Web的状态。表格用于布局，CSS用于… 好吧，*样式*。颜色，大小，粗体，下划线。甚至还有这种酷炫的技巧，你可以让链接只在鼠标*指向*它们时才有下划线。*酷帅！*
- en: '(Fun fact: HTML *email* is still basically trapped in this era.)'
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: （有趣的事实：HTML *电子邮件*仍然基本困在这个*时代*。）
- en: (And here’s about where I come in, at the ripe old age of 11, with no clue what
    I was doing and mostly learning from other 11-year-olds who also had no clue what
    they were doing. But that was fine; a huge chunk of the Web was 11-year-olds making
    their own websites, and it was beautiful. Why would you go to a *business* website
    when you can take a peek into the very specific hobbies of someone on the other
    side of the planet?)
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: （大约在这个时候，我11岁，完全不知道自己在做什么，主要是从其他11岁的孩子那里学习。但那没关系；网络的一大部分是11岁的孩子在制作他们自己的网站，这是美好的。你为什么要去*商业*网站，当你可以窥探到地球另一边某人非常具体的爱好呢？）
- en: 'A year and a half later, in mid ‘98, we were gifted [CSS 2](https://www.w3.org/TR/2008/REC-CSS2-20080411/).
    (I *love* the background on this page, by the way.) This was a modest upgrade
    that addressed a few deficiencies in various areas, but most interesting was the
    addition of a couple positioning primitives: the `position` property, which let
    you place elements at precise coordinates, and the `inline-block` display mode,
    which let you stick an element in a line of text like you could do with images.'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一年半后的98年中，我们迎来了[CSS 2](https://www.w3.org/TR/2008/REC-CSS2-20080411/)的礼物。（顺便说一句，我*喜欢*这个页面的背景。）这是一个小小的升级，解决了各个领域的一些缺陷，但最有趣的是增加了几个定位原语：`position`属性，允许您在精确的坐标位置放置元素，以及`inline-block`显示模式，允许您像处理图像一样将元素放在文本行中。
- en: Such tantalizing fruit, just out of reach! Using `position` seemed nice, but
    pixel-perfect positioning was at serious odds with the fluid design of HTML, and
    it was difficult to make much of anything that didn’t fall apart on other screen
    sizes or have other serious drawbacks. This humble `inline-block` thing *seemed*
    interesting enough; after all, it solved the core problem of HTML layout, which
    is *putting things next to each other*. But at least for the moment, no browser
    implemented it, and it was largely ignored.
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如此诱人的果实，却又触手可及！使用`position`似乎很好，但像素完美的定位与HTML的流动设计严重不符，很难做到在其他屏幕尺寸上不崩溃或有其他严重缺陷。这个谦逊的`inline-block`似乎*足够*有趣；毕竟，它解决了HTML布局的核心问题，即*将东西放在一起*。但至少目前没有浏览器实现它，它基本被忽视了。
- en: I can’t say for sure if it was the introduction of positioning or some other
    factor, but *something* around this time inspired folks to try doing layout in
    CSS. Ideally, you would *completely* divorce the structure of your page from its
    appearance. A website even came along to take this principle to the extreme —
    [CSS Zen Garden](http://www.csszengarden.com/) is still around, and showcases
    the *same HTML* being radically transformed into completely different designs
    by applying different stylesheets.
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我不能确定是引入了定位还是其他因素，但*某些事物*在这个时候启发了人们尝试在CSS中进行布局。理想情况下，你会*完全*将页面的结构与其外观分离。甚至有一个网站将这一原则推向了极端
    — [CSS Zen Garden](http://www.csszengarden.com/)至今仍在，展示了通过应用不同样式表将*相同的HTML*彻底转变为完全不同设计的能力。
- en: 'Trouble was, early CSS support was buggy as hell. In retrospect, I suspect
    browser vendors merely plucked the behavior off of HTML tags and called it a day.
    I’m delighted to say that RichInStyle still has [an extensive list of early browser
    CSS bugs](http://www.richinstyle.com/bugs/) up; here are some of my favorites:'
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 麻烦的是，早期的CSS支持非常多BUG。回想起来，我怀疑浏览器供应商只是从HTML标签中挑出行为并称之为一天。我很高兴地说，RichInStyle仍然有一个[早期浏览器CSS错误的广泛列表](http://www.richinstyle.com/bugs/)；这里是一些我*最喜欢的*：
- en: IE 3 would ignore all but the last `<style>` tag in a document.
  id: totrans-split-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IE 3会忽略文档中除了最后一个`<style>`标签之外的所有`<style>`标签。
- en: IE 3 ignored pseudo-classes, so `a:hover` would be treated as `a`.
  id: totrans-split-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IE 3忽略了伪类，所以`a:hover`会被视为`a`。
- en: 'IE 3 and IE 4 treated `auto` margins as zero. Actually, I think this one might’ve
    persisted all the way to IE 6\. But that was okay, because IE 6 also incorrectly
    applied `text-align: center` to block elements.'
  id: totrans-split-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'IE 3和IE 4将`auto`边距视为零。实际上，我认为这一点可能一直持续到IE 6。但这没关系，因为IE 6还错误地将`text-align: center`应用于块元素。'
- en: If you set a background image to an absolute URL, IE 3 would try to open the
    image in a local program, as though you’d downloaded it.
  id: totrans-split-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你给一个绝对URL设置背景图像，IE 3会尝试在本地程序中打开图像，就像你已经下载了它一样。
- en: Netscape 4 understood an ID selector like `#id`, but ignored `h1#id` as invalid.
  id: totrans-split-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netscape 4理解像`#id`这样的ID选择器，但将`h1#id`视为*无效*。
- en: Netscape 4 didn’t inherit properties — including font and text color! — into
    table cells.
  id: totrans-split-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netscape 4没有继承属性 — 包括字体和文本颜色！ — 到表格单元格中。
- en: Netscape 4 applied properties on `<li>` to the list *marker*, rather than the contents.
  id: totrans-split-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netscape 4在`<li>`标签上应用了样式到列表*标记*，而不是内容。
- en: If the same element has both `float` and `clear` (not unreasonable), Netscape
    4 for Mac crashes.
  id: totrans-split-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果同一个元素同时设置了`float`和`clear`（这并不奇怪），Netscape 4 for Mac就会崩溃。
- en: This is what we had to work with. And folks wanted to use CSS to *lay out* an
    *entire page*? Ha.
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们所面对的情况。而人们想要使用CSS来*布局*整个页面？哈哈。
- en: Yet the idea grew in popularity. It even became a sort of elitist rallying cry,
    a best practice used to beat other folks over the head. Tables for layout are
    just plain bad, you’d hear! They confuse screenreaders, they’re semantically incorrect,
    they interact poorly with CSS positioning! All of which is true, but it was a
    much tougher pill to swallow when the alternative was—
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然而这个想法越来越受欢迎。甚至成为一种精英主义的呐喊口号，一种用来抨击其他人的最佳实践。表格布局只是纯粹糟糕，你会听到这样的说法！它们会让屏幕阅读器混乱，它们在语义上不正确，与CSS定位的交互性差！所有这些说法都是正确的，但当替代方案是——这就是一个更难接受的现实。
- en: Well, we’ll get to that in a moment. First, some background on the Web landscape
    circa 2000.
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我们马上就会谈到。首先，让我们了解一下2000年左右的网络背景。
- en: 'The short version is: this company Netscape had been selling its Navigator
    browser (to businesses; it was free for personal use), and then Microsoft entered
    the market with its completely free Internet Explorer browser, and *then* Microsoft
    had the audacity to bundle IE with Windows. Can you imagine? An operating system
    that *comes with* a browser? This was a whole big thing, [Microsoft was sued over
    it](https://en.wikipedia.org/wiki/United_States_v._Microsoft_Corp.), and they
    lost, and the consequence was basically nothing.'
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这家公司Netscape一直在销售其Navigator浏览器（面向企业使用，个人使用免费），然后微软推出了完全免费的Internet Explorer浏览器，*然后*微软竟然胆敢将IE捆绑在Windows系统中。你能想象吗？一个操作系统*带有*一个浏览器？这件事情闹得沸沸扬扬，[微软因此而被起诉](https://en.wikipedia.org/wiki/United_States_v._Microsoft_Corp.)，他们输了，但后果基本上是没有什么变化。
- en: But it wouldn’t have mattered either way, because they’d still *done it*, and
    it had worked. IE pretty much annihilated Netscape’s market share. Both browsers
    were buggy as hell, and *differently* buggy as hell, so a site built exclusively
    against one was likely to be a big mess when viewed in the other — this meant
    that when Netscape’s market share dropped, web designers paid less and less attention
    to it, and less of the Web worked in it, and its market share dropped further.
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: 但无论如何，这都不会有任何影响，因为他们已经*做到了*，并且成功了。IE几乎完全击败了Netscape的市场份额。两款浏览器都非常地有bug，而且这些bug还*各有不同*，所以一个网站如果只支持其中一款浏览器，当在另一款浏览器上浏览时很可能会出现大问题——这意味着当Netscape的市场份额下降时，网页设计师对它的关注越来越少，越来越少的网页在它上面运行，从而导致它的市场份额进一步下降。
- en: Sucks for you if you don’t use Windows, I guess. Which is funny, because there
    was an IE for Mac 5.5, and it was generally *less* buggy than IE 6\. (Incidentally,
    Bill Gates wasn’t so much a brilliant nerd as an aggressive and ruthless businessman
    who made his fortune by deliberately striving to annihilate any competition standing
    in his way and making computing worse overall as a result, just saying.)
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不使用Windows系统，那你就倒霉了，我猜。有趣的是，Mac版的IE 5.5其实比IE 6要*少*出错。（顺便说一句，比尔·盖茨不是一个天才程序员，而是一个积极而无情的商人，通过有意消灭所有竞争对手来赚取自己的财富，从而导致整体计算机技术恶化。）
- en: By the time Windows XP shipped in mid 2001, with Internet Explorer 6 built in,
    Netscape had gone from a juggernaut to a tiny niche player.
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: 到了2001年中期Windows XP发布时，内置了Internet Explorer 6，Netscape已经从一个巨头变成了一个小众玩家。
- en: And then, having completely and utterly dominated, Microsoft stopped. Internet
    Explorer had seen a release every year or so since its inception, but IE 6 was
    the last release for more than five years. It was still buggy, but that was less
    noticeable when there was no competition, and it was *good enough*. Windows XP,
    likewise, was good enough to take over the desktop, and there wouldn’t be another
    Windows for just as long.
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在完全完全主导之后，微软停了下来。自从成立以来，Internet Explorer每年发布一次左右，但IE 6成为了五年多来的最后一次发布。它仍然存在缺陷，但当没有竞争时这些缺陷就不那么明显了，而且*足够好*。同样，Windows
    XP也足够好以主导桌面，接下来几年也不会再有新的Windows系统。
- en: The W3C, the group who write the standards (not to be confused with W3Schools,
    who are shady SEO leeches), also stopped. HTML had seen several revisions throughout
    the mid 90s, and then froze as HTML 4\. CSS had gotten an update in only a year
    and a half, and then no more; the minor update [CSS 2.1](https://www.w3.org/TR/CSS21/)
    wouldn’t hit Candidate Recommendation status until early 2004, and took another
    seven years to be finalized.
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
  zh: W3C，编写标准的团体（不要与 W3Schools 混淆，后者是不正当的 SEO 寄生虫），也停滞了。HTML 在 90 年代中期经历了几次修订，然后在
    HTML 4 版本上冻结了。CSS 在短短一年半的时间里得到了更新，然后再也没有了；小更新 [CSS 2.1](https://www.w3.org/TR/CSS21/)
    直到 2004 年初才达到候选推荐阶段，并花了另外七年才最终定稿。
- en: With IE 6’s dominance, it was as if the entire Web was frozen in time. Standards
    didn’t matter, because there was effectively only one browser, and whatever it
    did became the de facto standard. As the Web grew in popularity, IE’s stranglehold
    also made it difficult to use any platform other than Windows, since IE was Windows-only
    and it was a coin flip whether a website would actually work with any other browser.
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 IE 6 的主导地位，整个 Web 就像是时间被冻结了一样。标准不再重要，因为实际上只有一个浏览器，无论它做什么都成为了事实上的标准。随着 Web
    的普及，IE 的控制也使得除了 Windows 之外的任何平台都难以使用，因为 IE 只能在 Windows 上运行，而实际上一个网站是否能在其他浏览器上工作还是个未知数。
- en: (One begins to suspect that monopolies are bad. There oughta be a law!)
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
  zh: （人们开始怀疑垄断是不好的。应该有一条法律！）
- en: In the meantime, Netscape had put themselves in an even worse position by deciding
    to do a massive rewrite of their browser engine, culminating in the vastly more
    standards-compliant Netscape 6 — at the cost of several years away from the market
    while IE was kicking their ass. It never broke 10% market share, while IE’s would
    peak at 96%. On the other hand, the new engine was open sourced as the Mozilla
    Application Suite, which would be important in a few years.
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，Netscape 通过决定对其浏览器引擎进行大规模重写，最终推出了更加符合标准的 Netscape 6，却付出了数年的市场缺席时间，而 IE
    则一直占据市场份额高达 96% 的垄断地位。另一方面，新引擎作为 Mozilla 应用套件开源，这在未来几年变得非常重要。
- en: Before we get to that, some other things were also happening.
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论那个问题之前，还有一些其他事情正在发生。
- en: 'All early CSS implementations were riddled with bugs, but one in particular
    is perhaps the most infamous CSS bug of all time: the *box model bug*.'
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
  zh: 所有早期的 CSS 实现都充斥着 bug，但有一个 bug 特别臭名昭著：*框模型 bug*。
- en: 'You see, a box (the rectangular space taken up by an element) has several measurements:
    its own width and height, then surrounding whitespace called padding, then an
    optional border, then a margin separating it from neighboring boxes. CSS specifies
    that these properties are all additive. A box with these styles:'
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你看，一个框（元素占用的矩形空间）有几个尺寸：它自己的宽度和高度，然后周围的空白称为填充，然后是可选的边框，然后是将其与相邻框分隔开的外边距。CSS 规定这些属性都是累加的。一个具有以下样式的框：
- en: '|  |'
  id: totrans-split-130
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE10]'
  id: totrans-split-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-split-132
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: …would thus be 124 pixels wide, from border to border.
  id: totrans-split-133
  prefs: []
  type: TYPE_NORMAL
  zh: …因此从边框到边框将会是 124 像素宽。
- en: 'IE 4 and Netscape 4, on the other hand, took a different approach: they treated
    `width` and `height` as measuring from border to border, and they *subtracted*
    the border and padding to get the width of the element itself. The same box in
    those browsers would be 100 pixels wide from border to border, with 76 pixels
    remaining for the content.'
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
  zh: 而 IE 4 和 Netscape 4 则采取了不同的方法：它们将 `width` 和 `height` 视为从边框到边框的测量，然后*减去*边框和填充以获取元素本身的宽度。在这些浏览器中，同样的框从边框到边框将是
    100 像素宽，其中 76 像素留给了内容部分。
- en: This conflict with the spec was not ideal, and IE 6 set out to fix it. Unfortunately,
    simply making the change would mean completely breaking the design of a whole
    lot of websites that had previously worked in *both* IE and Netscape.
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这种与规范冲突的情况并不理想，而 IE 6 则试图修复它。不幸的是，简单地进行改变将意味着完全破坏了许多之前在*两个* IE 和 Netscape 中都能正常工作的网站的设计。
- en: 'So the IE team came up with a very strange compromise: they declared the old
    behavior (along with several other major bugs) as “quirks mode” and made it the
    *default*. The new “strict mode” or “standards mode” had to be opted *into*, by
    placing a “doctype” at the beginning of your document, before the `<html>` tag.
    It would look something like this:'
  id: totrans-split-136
  prefs: []
  type: TYPE_NORMAL
  zh: 所以 IE 团队提出了一个非常奇怪的妥协方案：他们将旧的行为（以及其他几个主要的 bug）声明为“怪异模式”，并将其设为*默认*。新的“严格模式”或“标准模式”必须通过在文档的
    `<html>` 标签之前放置“doctype”来选择*进入*。看起来会是这样的：
- en: '|  |'
  id: totrans-split-137
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE11]'
  id: totrans-split-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-split-139
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Everyone had to paste this damn mess of a line at the top of every single HTML
    document for years. (HTML5 would later simplify it to `<!DOCTYPE html>`.) In retrospect,
    it’s a really strange way to opt into correct CSS behavior; doctypes had been
    part of the HTML spec since way back when it was an [RFC](https://tools.ietf.org/html/rfc1866).
    I’m guessing the idea was that, since *nobody* bothered actually including one,
    it was a convenient way to allow opting in without requiring proprietary extensions
    just to avoid behavior that had been wrong in the first place. Good for the IE team!
  id: totrans-split-140
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，每个HTML文档的顶部都必须粘贴这个该死的一行混乱代码。（HTML5稍后将其简化为`<!DOCTYPE html>`。）回过头来看，这实际上是一种奇怪的选择以实现正确的CSS行为；文档类型自HTML规范的早期就已经存在，那时候它是一个[RFC](https://tools.ietf.org/html/rfc1866)。我猜想的想法是，由于实际上*没有人*费心包含一个，这是一种便捷的方式允许选择，而无需要求专有扩展仅仅是为了避免最初就是错误的行为。对IE团队来说真是太好了！
- en: The funny thing is, quirks mode still exists *and is still the default* in all
    browsers, twenty years later! The exact quirks have varied over time, and in particular
    neither Chrome nor Firefox use the IE box model even in quirks mode, but there
    are still [quite a few other emulated bugs](https://developer.mozilla.org/en-US/docs/Mozilla/Mozilla_quirks_mode_behavior).
  id: totrans-split-141
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，怪异模式在所有浏览器中依然存在，并且仍然是默认的状态，二十年后！随着时间的推移，具体的怪癖变化了，特别是Chrome和Firefox即使在怪异模式下也不使用IE盒模型，但仍然有[相当多其他的模拟错误](https://developer.mozilla.org/en-US/docs/Mozilla/Mozilla_quirks_mode_behavior)。
- en: 'Modern browsers also have “almost standards” mode, which emulates only a single
    quirk, perhaps the second most infamous one: if a table cell contains only a single
    image, the space under the baseline is removed. Under normal CSS rules, the image
    is sitting within a line of (otherwise empty) text, which requires some space
    reserved underneath for descenders — the tails on letters like y. Early browsers
    didn’t handle this correctly, and some otherwise strict-mode websites from circa
    2000 rely on it — e.g., by cutting up a large image and arranging the chunks in
    table cells, expecting them to display flush against each other — hence the intermediate
    mode to keep them limping along.'
  id: totrans-split-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现代浏览器还有“准标准”模式，仅模拟一个怪癖，也许是第二个最臭名昭著的：如果一个表格单元格仅包含单个图像，则基线下的空间将被移除。在正常的CSS规则下，图像位于一行（其他情况下为空的）文本中，这需要一些保留在下面用于降部（如y字母的尾巴）的空间。早期的浏览器没有正确处理这个问题，大约在2000年左右的一些本来应该是严格模式的网站却依赖于它——例如，通过将大图切割并排列在表格单元格中，期望它们紧密显示在一起——因此有了中间模式来继续支持它们的使用。
- en: 'But getting back to the past: while this was certainly a win for standards
    (and thus interop), it created a new problem. Since IE 6 dominated, and doctypes
    were optional, there was little compelling reason to bother with strict mode.
    Other browsers ended up *emulating* it, and the non-standard behavior became its
    own de facto standard. Web designers who cared about this sort of thing (and to
    our credit, there were a lot of us) made a rallying cry out of enabling strict
    mode, since it was the absolute barest minimum step towards ensuring compatibility
    with other browsers.'
  id: totrans-split-143
  prefs: []
  type: TYPE_NORMAL
  zh: 但是回到过去：尽管这显然是标准的一种胜利（因此可以实现互操作性），但也带来了一个新问题。由于IE 6占主导地位，而文档类型（doctypes）是可选的，几乎没有令人信服的理由去费心使用严格模式。其他浏览器最终*模拟*了它，并且非标准行为成为了事实上的标准。关心这类事情的网页设计师（我们有很多）高呼要启用严格模式，因为这是确保与其他浏览器兼容性的绝对最低步骤。
- en: Meanwhile, the W3C had lost interest in HTML in favor of developing XHTML, an
    attempt to redesign HTML with the syntax of XML rather than SGML.
  id: totrans-split-144
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，W3C对HTML失去了兴趣，转而支持开发XHTML，这是一种尝试用XML语法而非SGML重新设计HTML。
- en: (What on Earth is SGML, you ask? I don’t know. Nobody knows. It’s the grammar
    HTML was built on, and that’s the only reason anyone has heard of it.)
  id: totrans-split-145
  prefs: []
  type: TYPE_NORMAL
  zh: （你问什么是SGML？我也不知道。没有人知道。那是HTML构建的语法，这是唯一让人们听说过它的原因。）
- en: To their credit, there were some good reasons to do this at the time. HTML was
    generally hand-written (as it still is now), and anything hand-written is likely
    to have the occasional bugs. Browsers weren’t in the habit of rejecting buggy
    HTML outright, so they had various error-correction techniques — and, as with
    everything else, different browsers handled errors differently. Slightly malformed
    HTML might appear to work fine in IE 6 (where “work fine” means “does what you
    hoped for”), but turn into a horrible mess in anything else.
  id: totrans-split-146
  prefs: []
  type: TYPE_NORMAL
  zh: 值得肯定的是，当时确实有一些很好的理由这样做。HTML通常是手工编写的（现在依然如此），而任何手工编写的东西都可能偶尔出现错误。浏览器并没有习惯直接拒绝有错误的HTML，所以它们采用了各种错误校正技术
    —— 而且和其他一切一样，不同的浏览器对错误的处理方式也不同。在IE 6中，略有格式不规范的HTML可能看起来工作正常（所谓的“工作正常”是指“做了你希望的事情”），但在其他任何浏览器中可能就会变成一团糟。
- en: The W3C’s solution was XML, because their solution to fucking everything in
    the early 2000s was XML. If you’re not aware, XML takes a much more explicit and
    aggressive approach to error handling — if your document contains a parse error,
    the *entire document* is invalid. That means if you bank on XHTML and make a single
    typo somewhere, **nothing at all** renders. Just an error.
  id: totrans-split-147
  prefs: []
  type: TYPE_NORMAL
  zh: W3C的解决方案是XML，因为在21世纪初他们几乎对所有问题的解决方案都是XML。如果你不知道，XML在错误处理方面采用了更为明确和激进的方法 —— 如果你的文档包含解析错误，*整个文档*都是无效的。这意味着如果你依赖XHTML并在某处打了一个错字，**什么都不会**呈现。只有一个*错误*。
- en: 'This sucked. It sounds okay on the face of things, but consider: generic XML
    is usually assembled dynamically with *libraries* that treat a document as a tree
    you manipulate, then turn it all into text when you’re done. That’s great for
    the common use of XML as data serialization, where your data is already a tree
    and much of the XML structure is simple and repetitive and easy to squirrel away
    in functions.'
  id: totrans-split-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这很糟糕。表面上听起来还可以，但是请考虑一下：通常使用*库*动态组装通用XML，将文档视为一个你操作的树，然后在完成时将其转换为文本。这在XML作为数据序列化的常见用途中非常棒，其中你的数据已经是树形结构，XML结构的大部分是简单且重复的，并且很容易隐藏在*函数*中。
- en: HTML is not like that. An HTML document has little reliable repeating structure;
    even this blog post, constructed *mostly* from `<p>` tags, also contains surprise
    `<em>`s within body text and the occasional `<h2>` between paragraphs. That’s
    not fun to express as a tree. And this is a big deal, because server-side rendering
    was becoming popular around the same time, and generated HTML was — still is!
    — put together with *templates* that treat it as a text stream.
  id: totrans-split-149
  prefs: []
  type: TYPE_NORMAL
  zh: HTML不是这样的。HTML文档几乎没有可靠的重复结构；即使是这篇博文，主要由`<p>`标签构成，也包含了意外的`<em>`标签和偶尔出现在段落之间的`<h2>`标签。这在树形结构中表达起来不太有趣。这是一件大事，因为同一时期服务器端渲染也变得流行起来，生成的HTML仍然被视为一个带有*模板*的文本流。
- en: If HTML were only written as complete static documents, then XHTML might have
    worked out — you write a document, you see it in your browser, you know it works,
    no problem. But generating it dynamically and risking that *particular edge cases*
    might replace your entire site with an unintelligible browser error? That sucks.
  id: totrans-split-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果HTML只是作为完整的静态文档写入，那么XHTML本来可能行得通 —— 你写一个文档，在浏览器中查看，知道它工作正常，没有问题。但是动态生成它，并冒着*特殊边界情况*可能导致整个站点被一个晦涩难懂的浏览器错误所替换的风险？那*太糟糕*了。
- en: It certainly didn’t help that we were just starting to hear about this newfangled
    Unicode thing around this time, and it was still not always clear how exactly
    to make that work, and one bad UTF-8 sequence is enough for an entire XML document
    to be considered malformed!
  id: totrans-split-151
  prefs: []
  type: TYPE_NORMAL
  zh: 那当时我们刚开始听说这个新潮的Unicode事物时，确实没有什么帮助。有时候要弄清楚怎么让它工作还不总是很清楚，而且一个糟糕的UTF-8序列足以让整个XML文档被视为*格式错误*！
- en: 'And so, after some dabbling, XHTML was largely forgotten. Its legacy lives
    on in two ways:'
  id: totrans-split-152
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，经过一些尝试之后，XHTML基本上被遗忘了。它的遗产以两种方式延续着：
- en: 'It got us all to stop using uppercase tag names! So long `<BODY>`, hello `<body>`.
    XML is case-sensitive, you see, and all the XHTML tags were defined in lowercase,
    so uppercase tags simply would not work. (Fun fact: to this day, JavaScript APIs
    report HTML tag names in uppercase.) The increased popularity of syntax highlighting
    probably also had something to do with this; we weren’t all still using Notepad
    as we had been in 1997.'
  id: totrans-split-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它让我们都停止使用大写标签名！再见`<BODY>`，你好`<body>`。XML是区分大小写的，所有XHTML标签都定义为小写，因此大写标签根本无法工作。（有趣的事实：直到今天，JavaScript
    API仍然以大写形式报告HTML标签名。）语法高亮的普及可能也与此有关；我们不再像1997年那样全都在使用记事本了。
- en: 'A bunch of folks *still* think self-closing tags are necessary. You see, HTML
    has two kinds of tags: containers like `<p>...</p>` and markers like `<br>`. Since
    a `<br>` can’t possibly contain anything, there’s no such thing as `</br>`. XML,
    as a generic grammar, doesn’t have this distinction; every tag *must* be closed,
    but as a shortcut, you can write `<br/>` to mean `<br></br>`.'
  id: totrans-split-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些人*仍然*认为自闭标签是必需的。你知道吗，HTML有两种类型的标签：像`<p>...</p>`这样的容器和像`<br>`这样的标记。由于`<br>`不可能包含任何内容，所以没有`</br>`这样的东西。作为一个通用语法，XML没有这种区别；每个标签*必须*关闭，但作为一种快捷方式，你可以写`<br/>`来表示`<br></br>`。
- en: XHTML has been dead for years, but for some reason, I still see folks write
    `<br/>` in regular HTML documents. Outside of XML, that slash doesn’t do anything;
    HTML5 has defined it for compatibility reasons, but it’s silently ignored. It’s
    even actively harmful, since it might lead you to believe that `<script/>` is
    an empty `<script>` tag — but in HTML, it definitely is not!
  id: totrans-split-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: XHTML已经死了很多年了，但由于某种原因，我仍然看到人们在常规HTML文档中写`<br/>`。在XML之外，这个斜杠什么都不做；HTML5已经为兼容性原因定义了它，但它被默默忽略了。它甚至是积极有害的，因为它可能会让你误以为`<script/>`是一个空的`<script>`标签
    —— 但在HTML中，它绝对*不是*！
- en: I do miss one thing about XHTML. You could combine it with XSLT, the XML templating
    meta-language, to do in-browser templating (i.e., slot page-specific contents
    into your overall site layout) with no scripting required. It’s the *only* way
    that’s ever been possible, and it was cool as all hell when it worked, but the
    drawbacks were too severe when it didn’t. Also, XSLT is totally fucking incomprehensible.
  id: totrans-split-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实怀念XHTML的一件事情。你可以将其与XSLT，即XML模板化元语言，结合使用，实现浏览器内模板化（即将页面特定内容插入整体站点布局），而无需脚本。这是*唯一*可能的方式，当它起作用时，它非常酷，但当它不起作用时，缺点就太严重了。另外，XSLT完全*难以理解*。
- en: Back to CSS!
  id: totrans-split-157
  prefs: []
  type: TYPE_NORMAL
  zh: 回到CSS！
- en: You’re an aspiring web designer. For whatever reason, you want to try using
    this CSS thing to lay out your whole page, even though it was *clearly* intended
    just for colors and stuff. What do you do?
  id: totrans-split-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你是一名有抱负的网页设计师。出于某种原因，你想尝试使用这个CSS东西来布局整个页面，尽管它*明显*只是用于颜色和其他东西。你会怎么*做*？
- en: As I mentioned before, your core problem is *putting things next to each other*.
    Putting things on *top* of each other is a non-problem — that’s the normal behavior
    of HTML. The whole reason everyone uses tables is that you can slop stuff into
    table cells and have it laid out side-by-side, in columns.
  id: totrans-split-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，你的核心问题在于*将事物放在一起*。把事物*放在*另一起并不是问题 —— 这是HTML的正常行为。之所以人们都用表格，是因为你可以把东西随便扔到表格单元中，让它们并排、列出来。
- en: 'Well, tables seem to be out. CSS 2 had added some element display modes that
    corresponded to the parts of a table, but to use them, you’d have to have the
    same three levels of nesting as real tables: the table itself, then a row, then
    a cell. That doesn’t seem like a huge step up, and anyway, IE won’t support them
    until the distant future.'
  id: totrans-split-160
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，表格似乎已经过时了。CSS 2添加了一些元素显示模式，这些模式对应于表格的各个部分，但要使用它们，你必须像真正的表格一样三级嵌套：表格本身，然后是行，然后是单元格。这似乎并不是一个巨大的进步，而且无论如何，IE在遥远的*未来*之前都不会支持它们。
- en: There’s that `position` thing, but it seems to make things *overlap* more often
    than not. Hmm.
  id: totrans-split-161
  prefs: []
  type: TYPE_NORMAL
  zh: 有那个`position`东西，但它似乎更多时候让事物*重叠*。嗯。
- en: What does that leave?
  id: totrans-split-162
  prefs: []
  type: TYPE_NORMAL
  zh: 那还*剩下*什么？
- en: 'Only one tool, really: `float`.'
  id: totrans-split-163
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一个工具，确实如此：`float`。
- en: 'I said that `float` was intended for magazine-style “pull” images, which is
    true, but CSS had defined it fairly generically. In *principle*, it could be applied
    to any element. If you wanted a sidebar, you could tell it to float to the left
    and be 20% the width of the page, and you’d get something like this:'
  id: totrans-split-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我说过`float`是为杂志式的“拉出”图像而设计的，这是真的，但CSS将其定义得相当通用。从*原理*上讲，它可以应用于任何元素。如果你想要一个侧边栏，你可以告诉它向左浮动，宽度占页面的20%，你会得到类似于这样的效果：
- en: '|  |'
  id: totrans-split-165
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE12]'
  id: totrans-split-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-split-167
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Alas! Floating has the secondary behavior that text wraps around it. If your
    page text was ever longer than your sidebar, it would wrap around *underneath*
    the sidebar, and the illusion would shatter. But hey, no problem. CSS specified
    that floats don’t wrap around each other, so all you needed to do was float the
    body as well!
  id: totrans-split-168
  prefs: []
  type: TYPE_NORMAL
  zh: 唉！浮动还有一个次要行为，那就是文本会围绕它环绕。如果你的页面文本比侧边栏长，它会围绕*在*侧边栏下方，并且这种错觉会破灭。但是嘿，没问题。CSS指定浮动不会互相环绕，所以你所需要做的就是也浮动主体！
- en: '|  |'
  id: totrans-split-169
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE13]'
  id: totrans-split-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|'
  id: totrans-split-171
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: This approach worked, but its limitations were much more obvious than those
    of tables. If you added a footer, for example, then it would try to fit to the
    *right* of the body text — remember, all of that is “pull” floats, so as far as
    the browser is concerned, the “cursor” is still at the top. So now you need to
    use `clear`, which bumps an element down below all floats, to fix that. And if
    you made the sidebar 20% wide and the body 80% wide, then any margin between them
    would add to that 100%, making the page wider than the viewport, so now you have
    an ugly horizontal scrollbar, so you have to do some goofy math to fix that as
    well. If you have borders or backgrounds on either part, then it was a little
    conspicuous that they were different heights, so now you have to do some *truly*
    grotesque stuff to fix *that*. And the more conscientious authors noticed that
    screenreaders would read the entire sidebar before getting to the body text, which
    is a pretty rude thing to subject blind visitors to, so they came up with yet
    *more* elaborate setups to have a three-column layout with the middle column appearing
    first in the HTML.
  id: totrans-split-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法虽然有效，但其限制比表格的限制明显得多。例如，如果添加页脚，它会尝试适应正文文本的 *右侧* — 记住，所有这些都是“拉”浮动，所以在浏览器看来，“光标”仍然在顶部。现在你需要使用`clear`，将一个元素移到所有浮动元素下方以修复这个问题。如果你将侧边栏设置为20%宽，正文设置为80%宽，那么它们之间的任何边距将增加到100%，使页面比视口更宽，因此现在你会看到一个难看的水平滚动条，所以你还需要进行一些奇怪的数学运算来修复它。如果任一部分有边框或背景，那么它们高度不同就会显得有点显眼，所以你必须进行一些
    *真正* 怪异的操作来修复 *那个*。而更加用心的作者注意到，屏幕阅读器会先读完整个侧边栏，然后才会读到正文文本，对盲人访客来说这是一种非常不礼貌的做法，所以他们想出了更
    *复杂* 的设置，以在HTML中实现三列布局，其中中间列首先出现。
- en: The result was a design that looked nice and worked well and scaled correctly,
    but backed by a weird mess of CSS. None of what you were *writing* actually corresponded
    to what you *wanted* — these are major parts of your design, not one-off pull
    quotes! It was difficult to understand the relationship between the layout-related
    CSS and what appeared on the screen, and that would get much worse before it got better.
  id: totrans-split-173
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个看起来漂亮且工作良好且正确缩放的设计，但支持的是一个奇怪混乱的CSS。你 *编写* 的东西实际上并不对应你 *想要* 的 — 这些是你设计的主要部分，而不是一次性的引用！很难理解布局相关的CSS与屏幕上显示的内容之间的关系，在变好之前，这种困惑只会变得更加严重。
- en: Armed with a new toy, we can improve that thumbnail grid. The original table-based
    layout was, even if you don’t care about tag semantics, incredibly tedious. Now
    we can do better!
  id: totrans-split-174
  prefs: []
  type: TYPE_NORMAL
  zh: 有了新的工具，我们可以改进缩略图网格。原始的基于表格的布局，即使你不关心标签语义，也令人难以忍受。现在我们可以做得 *更好*！
- en: '|  |'
  id: totrans-split-175
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE14]'
  id: totrans-split-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '|'
  id: totrans-split-177
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'This is the dream of CSS: your HTML contains the page data in some sensible
    form, and then CSS describes how it actually looks.'
  id: totrans-split-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是CSS的梦想：你的HTML以一种合理的形式包含页面数据，而CSS描述它的实际 *外观*。
- en: 'Unfortunately, with `float` as the only tool available to us, the results are
    a bit rough. This [new version](https://eev.ee/media/2020-02-css/thumbnail-grids.html#floats)
    does adapt better to various screen sizes, but it requires some hacks: the cells
    have to be a fixed height, centering the whole grid is fairly complicated, and
    the grid effect falls apart entirely with wider elements. It’s becoming clear
    that what we wanted is something more like a table, but with a flexible number
    of columns. This is just faking it.'
  id: totrans-split-179
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，只有`float`作为我们唯一的工具，结果有些粗糙。这个 [新版本](https://eev.ee/media/2020-02-css/thumbnail-grids.html#floats)
    对各种屏幕尺寸的适应性更好，但需要一些技巧：单元格必须是固定高度，居中整个网格相当复杂，并且在更宽的元素下网格效果完全崩溃。现在变得明显的是，我们想要的更像是一个具有灵活列数的表格。这只是在
    *伪装* 而已。
- en: You also need this weird “clearfix” thing, an incantation that would become
    infamous during this era. Remember that a float doesn’t move the “cursor” — a
    fake idea I’m using, but close enough. That means that this `<ul>`, which is full
    *only* of floated elements, has no height at all. It ends exactly where it begins,
    with all the floated thumbnails spilling out below it. Worse, because any subsequent
    elements don’t have any floated *siblings*, they’ll ignore the thumbnails entirely
    and render normally from just below the empty “grid” — producing an overlapping mess!
  id: totrans-split-180
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要这种奇怪的“clearfix”东西，这是在这个时代变得臭名昭著的咒语。记住，浮动不会移动“光标” — 这是我使用的一个虚假概念，但足够接近。这意味着这个
    `<ul>`，里面 *只有* 浮动元素，根本没有高度。它的结束点与开始点完全相同，所有浮动的缩略图都会溢出到它的下面。更糟糕的是，因为任何后续元素都没有任何浮动的
    *兄弟元素*，它们会完全忽略缩略图，并从空的“网格”下方正常渲染 — 产生一个重叠的 *混乱*！
- en: 'The solution is to add a dummy element at the *end* of the list which takes
    up no space, but has the CSS `clear: both` — bumping it down below all floats.
    That effectively pushes the bottom of the `<ul>` under all the individual thumbnails,
    so it fits snugly around them.'
  id: totrans-split-181
  prefs: []
  type: TYPE_NORMAL
  zh: '解决方案是在列表的*末尾*添加一个占用空间但具有 CSS `clear: both` 的虚拟元素 — 将它推到所有浮动元素下面。这有效地将 `<ul>`
    的底部推到所有单独缩略图的下方，使其紧密地围绕着它们。'
- en: 'Browsers would later support the `::before` and `::after` “generated content”
    pseudo-elements, which let us avoid the dummy element entirely. Stylesheets from
    the mid-00s were often littered with stuff like this:'
  id: totrans-split-182
  prefs: []
  type: TYPE_NORMAL
  zh: 后来的浏览器支持 `::before` 和 `::after` “生成内容” 伪元素，这使我们完全可以避免使用虚拟元素。从 00 年代中期开始的样式表通常都会被这样的东西所填充：
- en: '|  |'
  id: totrans-split-183
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE15]'
  id: totrans-split-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-split-185
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Still, it was better than tables.
  id: totrans-split-186
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，它比*表格*好多了。
- en: As a quick aside into the world of JavaScript, the newfangled `position` property
    *did* give us the ability to do some layout things dynamically. I heartily oppose
    such heresy, not least because no one has ever actually done it right, but it
    was nice for some toys.
  id: totrans-split-187
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 JavaScript 世界的一个快速插曲，新潮的 `position` 属性确实赋予了我们动态处理布局的能力。我强烈反对这种异端邪说，主要是因为没有人真正做对过，但对于某些人来说，玩具还是挺有用的。
- en: Thus began the era of “dynamic HTML” — i.e., HTML affected by JavaScript, a
    term that has fallen entirely out of favor because we can’t even make a fucking
    static blog without JavaScript any more. In the early days it was much more innocuous,
    with teenagers putting sparkles that trailed behind your mouse cursor or little
    analog clocks that ticked by in real time.
  id: totrans-split-188
  prefs: []
  type: TYPE_NORMAL
  zh: 于是开始了 “动态 HTML” 的时代 — 即由 JavaScript 影响的 HTML，一个现在已经完全不流行的术语，因为我们甚至不能再做一个静态的博客而不使用
    JavaScript 了。在早期，这种做法要无害得多，青少年们在鼠标光标后面放置了闪光的星星或者小模拟时钟，实时刻度。
- en: The most popular source of these things was [Dynamic Drive](http://www.dynamicdrive.com/),
    a site that miraculously still exists and probably has a bunch of toys not updated
    since the early 00s.
  id: totrans-split-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这些东西最流行的来源之一是 [Dynamic Drive](http://www.dynamicdrive.com/)，这个神奇的网站依然存在，并且可能有许多从早期到现在都没有更新的玩具。
- en: 'But if you don’t like digging, here’s an example: every year (except this year
    when I forgot oops), I like to add confetti and other nonsense to my blog on my
    birthday. I’m very lazy so I started this tradition by using [this script I found
    somewhere](http://www.schillmania.com/projects/snowstormv12_20041121a/script/snowstorm.js),
    originally intended for snowflakes. It works by placing a bunch of images on the
    page, giving them `position: absolute`, and meticulously altering their coordinates
    over and over.'
  id: totrans-split-190
  prefs: []
  type: TYPE_NORMAL
  zh: '但如果你不喜欢挖掘，这里有个例子：每年（今年除外，我忘了，哎呀），我喜欢在我的博客上加入彩带和其他无聊的东西来庆祝我的生日。我非常懒，所以开始这个传统时，我使用了
    [我从某处找到的这个脚本](http://www.schillmania.com/projects/snowstormv12_20041121a/script/snowstorm.js)，最初是为了雪花而设计的。它通过在页面上放置一堆图像，给它们
    `position: absolute`，然后精确地修改它们的坐标，来工作。'
- en: Contrast this with [the version I wrote from scratch a couple years ago](https://c.eev.ee/PARTYMODE/),
    which has only a [tiny bit of JS](https://c.eev.ee/PARTYMODE/partymode.js) to
    set up the images, then lets the browser animate them with CSS. It’s slightly
    less featureful, but lets the browser do all the work, possibly even with hardware
    acceleration. How far we’ve come.
  id: totrans-split-191
  prefs: []
  type: TYPE_NORMAL
  zh: 与我几年前从头写的[版本](https://c.eev.ee/PARTYMODE/)相比，这个版本只有一点点 JS 来设置图像，然后让浏览器用 CSS
    来动画显示它们。功能稍微少一些，但让浏览器完成所有工作，甚至可能使用硬件加速。我们已经走了这么远。
- en: Dark times can’t last forever. A combination of factors dragged us towards the light.
  id: totrans-split-192
  prefs: []
  type: TYPE_NORMAL
  zh: 黑暗时代不会永远持续。多种因素的结合使我们朝着光明前进。
- en: One of the biggest was [Firefox](https://www.mozilla.org/en-US/firefox/) — or,
    if you were cool, originally Phoenix and then Firebird — which hit 1.0 in Nov
    ‘04 and went on to take a serious bite out of IE. That rewritten Netscape 6 browser
    core, the heart of the Mozilla Suite, had been extracted into a standalone browser.
    It was quick, it was simple, it was much more standard-compliant, and absolutely
    none of that mattered.
  id: totrans-split-193
  prefs: []
  type: TYPE_NORMAL
  zh: 其中最重要的之一是 [Firefox](https://www.mozilla.org/en-US/firefox/) — 或者，如果你很酷，最初是 Phoenix，然后是
    Firebird — 它于 04 年 11 月发布了 1.0 版，并继续大幅度击败 IE。重新编写的 Netscape 6 浏览器内核，也就是 Mozilla
    Suite 的核心，被提取为独立的浏览器。它快速、简单，符合更多标准，但完全没有这些都无关紧要。
- en: No, Firefox really got a foothold because it had *tabs*. IE 6 did not have tabs;
    if you wanted to open a second webpage, you opened another window. It fucking
    sucked, man. Firefox was a miracle.
  id: totrans-split-194
  prefs: []
  type: TYPE_NORMAL
  zh: 不，Firefox 确实因为有 *选项卡* 才站稳了脚跟。IE 6 没有选项卡；如果你想打开第二个网页，你就得打开另一个窗口。真是糟糕透了。Firefox
    简直是个奇迹。
- en: Firefox wasn’t the first tabbed browser, of course; the full Mozilla Suite’s
    browser had them, and the obscure (but scrappy!) Opera had had them for ages.
    But it was Firefox that took off, for various reasons, not least of which was
    that it didn’t have a giant fucking ad bar at the top like Opera did.
  id: totrans-split-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Firefox 不是第一个支持选项卡的浏览器；完整的Mozilla 套件浏览器也有它们，而鲜为人知（但不畏强权！）的Opera 也有很长时间了。但Firefox因为各种原因才取得了成功，其中至少之一是它没有像Opera
    那样在顶部有一个巨大的广告栏。
- en: Designers did push for Firefox on standards grounds, of course; it’s just that
    that angle primarily appealed to other designers, not so much to their parents.
    One of the most popular and spectacular demonstrations was the [Acid2 test](https://en.wikipedia.org/wiki/Acid2),
    intended to test a variety of features of then-modern Web standards. It had the
    advantage of producing a cute smiley face when rendered correctly, and a [fucking
    nightmare hellscape](https://en.wikipedia.org/wiki/File:Ieacid2.png) in IE 6\.
    Early Firefox wasn’t perfect, but it was certainly much closer, and you could
    *see* it make progress until it fully passed with the release of Firefox 3.
  id: totrans-split-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，设计师们确实推动了Firefox 的标准理由；只是这个角度主要吸引了其他设计师，而不是他们的父母。其中最受欢迎和令人惊叹的演示之一是[Acid2
    测试](https://en.wikipedia.org/wiki/Acid2)，旨在测试当时的各种现代Web标准功能。它在正确渲染时能够显示一个可爱的笑脸，而在IE
    6 中却是一个[可怕的噩梦地狱场面](https://en.wikipedia.org/wiki/File:Ieacid2.png)。早期的Firefox
    并不完美，但肯定比较接近，你可以*看到*它在进步，直到Firefox 3 的发布时完全通过了测试。
- en: It also helped that Firefox had a faster JavaScript engine, even before JIT
    caught on. Much, much faster. Like, as I recall, IE 6 implemented `getElementById`
    by iterating over the entire document, even though IDs are unique. Glance at some
    [old jQuery release announcements](https://blog.jquery.com/2011/01/31/jquery-15-released/);
    they usually have some performance charts, and everything else absolutely *dwarfs*
    IE 6 through 8.
  id: totrans-split-197
  prefs: []
  type: TYPE_NORMAL
  zh: Firefox 还有一个更快的JavaScript引擎，甚至在JIT技术普及之前就已经非常快。比如，据我回忆，IE 6 通过遍历整个文档来实现 `getElementById`，尽管ID是唯一的。看看一些[旧的jQuery发布公告](https://blog.jquery.com/2011/01/31/jquery-15-released/)吧；它们通常有一些性能图表，而其他所有的东西绝对都*超越*了IE
    6 到 8。
- en: Oh, and there was that whole thing where IE 6 was a giant walking security hole,
    especially with its native support for arbitrary binary components that only needed
    a “yes” click on an arcane dialog to get full and unrestricted access to your
    system. Probably didn’t help its reputation.
  id: totrans-split-198
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，还有一件事，IE 6 还是一个巨大的安全漏洞，特别是它对任意二进制组件的本地支持，只需在复杂对话框上点击“是”，就可以完全无限制地访问您的系统。这可能并不有助于它的声誉。
- en: Anyway, with something other than IE taking over serious market share, even
    the most ornery designers couldn’t just target IE 6 and call it a day any more.
    Now there was a *reason* to use strict mode, a reason to care about compatibility
    and standards — which Firefox was making a constant effort to follow better, while
    IE 6 remained stagnant.
  id: totrans-split-199
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，除了IE以外的其他浏览器开始占据严肃市场份额，即使是最固执的设计师也不能再只针对IE 6，然后就可以一帆风顺了。现在有一个*理由*来使用严格模式，关心兼容性和标准——而Firefox正努力更好地遵循这些标准，而IE
    6则依然停滞不前。
- en: (I’d argue that this effect opened the door for OS X to make some inroads, and
    also for the iPhone to exist at all. I’m not kidding! Think about it; if the iPhone
    browser hadn’t actually worked with anything because everyone was still targeting
    IE 6, it’d basically have been a more expensive Palm. Remember, at first Apple
    didn’t even want native apps; it bet on the Web.)
  id: totrans-split-200
  prefs: []
  type: TYPE_NORMAL
  zh: （我认为这一效果为OS X 开辟了一些市场，并且为iPhone 的存在创造了条件。我不是在开玩笑！想想看；如果iPhone浏览器因为大家还在瞄准IE 6
    而什么都无法运行，它基本上就是一个更昂贵的Palm。记住，最初苹果甚至不想要原生应用程序；它押注于Web。）
- en: (Speaking of which, Safari was released in Jan ‘03, based on a fork of the KHTML
    engine used in KDE’s Konqueror browser. I think I was using KDE at the time, so
    this was very exciting, but no one else really cared about OS X and its 2% market share.)
  id: totrans-split-201
  prefs: []
  type: TYPE_NORMAL
  zh: （顺便说一句，Safari 在2003年1月发布，基于KDE Konqueror 浏览器中使用的KHTML引擎的一个分支。我想当时我在使用KDE，所以这对我来说非常激动人心，但其他人真的不太关心OS
    X及其2%的市场份额。）
- en: Another major factor appeared on April Fools’ Day, 2004, when Google announced
    Gmail. Ha, ha! A funny joke. Webmail that isn’t terrible? That’s a good one, Google.
  id: totrans-split-202
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要因素出现在2004年愚人节，谷歌宣布推出Gmail。哈哈！一个有趣的笑话。不糟糕的Web邮件？这真是个好笑的事情，谷歌。
- en: Oh. Oh, fuck. Oh they’re not kidding. *How the fuck does this even work*
  id: totrans-split-203
  prefs: []
  type: TYPE_NORMAL
  zh: 哦。哦，靠。哦他们不是开玩笑的。*这到底是怎么运作的*
- en: The answer, as every web dev now knows, is XMLHttpRequest — named for the fact
    that nobody has ever once used it to request XML. Apparently it was invented by
    Microsoft for use with Exchange, then cloned early on by Mozilla, but I’m just
    reading this from [Wikipedia](https://en.wikipedia.org/wiki/XMLHttpRequest) and
    you can do that yourself.
  id: totrans-split-204
  prefs: []
  type: TYPE_NORMAL
  zh: 答案，正如现在每个网页开发者都知道的那样，是 XMLHttpRequest —— 这个名字是因为没有人曾经用它来请求 XML。显然，它是由 Microsoft
    为 Exchange 发明的，早期由 Mozilla 克隆，但我只是从 [Wikipedia](https://en.wikipedia.org/wiki/XMLHttpRequest)
    上读到这些，你也可以自己看看。
- en: The important thing is, it lets you make an HTTP request from JavaScript. You
    could now update only *part* a page with new data, completely in the background,
    without reloading. *Nobody* had heard of this thing before, so when Google dropped
    an entire email client based on it, it was like fucking magic.
  id: totrans-split-205
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，它让你能够从 JavaScript 发起 HTTP 请求。现在，你可以仅仅更新页面的*一部分*，用新数据完全在后台进行，而不需要重新加载。*没人*在此之前听说过这种东西，因此当谷歌基于它推出了一个完整的电子邮件客户端时，简直像是魔法一般。
- en: Arguably the whole thing was a mistake and has led to a hell future where static
    pages load three paragraphs of text in the background using XHR for no goddamn
    reason, but that’s a [different post](https://eev.ee/blog/2016/03/06/maybe-we-could-tone-down-the-javascript/).
  id: totrans-split-206
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说整个事情都是一个错误，导致了一个地狱般的未来，在这个未来中，静态页面仅仅为了没有任何理由使用 XHR 后台加载了三段文字，但这是一篇[不同的文章](https://eev.ee/blog/2016/03/06/maybe-we-could-tone-down-the-javascript/)。
- en: Along similar lines, August 2006 saw the release of [jQuery](https://jquery.com/),
    a similar miracle. Not only did it paper over the differences between IE’s “JScript”
    APIs and the standard approaches taken by everyone else (which had been done before
    by other libraries), but it made it very easy to work with whole *groups* of elements
    at a time, something that had historically been a huge pain in the ass. Now you
    could fairly easily apply CSS all over the place from JavaScript! Which is a bad
    idea! But everything was so bad that we did it anyway!
  id: totrans-split-207
  prefs: []
  type: TYPE_NORMAL
  zh: 2006 年 8 月，类似的情况出现了，[jQuery](https://jquery.com/) 的发布就是一个类似的奇迹。它不仅掩盖了IE的“JScript”API与其他所有人采用的标准方法之间的差异（其他库之前也做过），而且使得一次性处理*整组*元素变得非常容易，而历史上这一直是一个巨大的痛苦。现在，你可以相当容易地从
    JavaScript 中随处应用 CSS！这其实是个坏主意！但是所有事情都那么糟糕，我们还是这么做了！
- en: Hold on, I hear you cry. These things are about JavaScript! Isn’t this a post
    about CSS?
  id: totrans-split-208
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，我听到你在呼喊。这些事情都与 JavaScript 有关！这不是一篇关于 CSS 的文章吗？
- en: 'You’re absolutely right! I mention the rise of JavaScript because I think it
    led directly to the modern state of CSS, thanks to an increase in one big factor:'
  id: totrans-split-209
  prefs: []
  type: TYPE_NORMAL
  zh: 你完全正确！我提到 JavaScript 的崛起，因为我认为它直接导致了 CSS 的现代状态，这要归功于一个重要的因素的增加：
- en: Firefox showed us that we could have browsers that actually, like, *improve*
    — every new improvement on Acid2 was exciting. Gmail showed us that the Web could
    do more than show plain text with snowflakes in front.
  id: totrans-split-210
  prefs: []
  type: TYPE_NORMAL
  zh: Firefox 向我们展示了，我们可以拥有真正能够*改善*的浏览器 —— Acid2 的每一个新改进都是令人兴奋的。Gmail 向我们展示了，Web 不仅仅能够展示前端的纯文本和雪花。
- en: And folks started itching to get *fancy*.
  id: totrans-split-211
  prefs: []
  type: TYPE_NORMAL
  zh: 人们开始渴望变得*时髦*起来。
- en: The problem was, browsers hadn’t really gotten any better yet. Firefox was faster
    in some respects, and it adhered more closely to the CSS spec, but it didn’t fundamentally
    do anything that browsers weren’t supposed to be able to do already. Only the
    *tooling* had improved, and that mostly affected JavaScript. CSS was a static
    language, so you couldn’t write a library to make it better. Generating CSS with
    JavaScript was a possibility, but boy oh boy is that ever a bad idea.
  id: totrans-split-212
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，浏览器并没有真正变得更好。在某些方面，Firefox 更快，它更加贴近 CSS 规范，但它并没有从根本上做任何浏览器本不应该能做到的事情。只有*工具*有所改进，而这主要影响了
    JavaScript。CSS 是一种静态语言，所以你不能写一个库来使它变得更好。用 JavaScript 生成 CSS 是可能的，但这绝对是个坏主意。
- en: Another problem was that CSS 2 was only really good at styling rectangles. That
    was fine in the 90s, when every OS had the aesthetic of rectangles containing
    more rectangles. But now we were in the days of Windows XP and OS X, where everything
    was shiny and glossy and made of curvy plastic. It was a little embarrassing to
    have rounded corners and neatly shaded swooshes in your *file browser* and nowhere
    on the Web.
  id: totrans-split-213
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是，CSS 2 只能很好地处理矩形样式。这在90年代很好，当时每个操作系统都有矩形包含更多矩形的美学。但现在我们已经到了 Windows XP
    和 OS X 的时代，所有东西都是光滑和光亮的，用弯曲的塑料制成。在你的*文件浏览器*中拥有圆角和整齐阴影的图案，但在 Web 上却没有这样的东西，这有点尴尬。
- en: Thus began a new reign of darkness.
  id: totrans-split-214
  prefs: []
  type: TYPE_NORMAL
  zh: 于是，一个新的黑暗时代开始了。
- en: Designers wanted a lot of things that CSS just could not offer.
  id: totrans-split-215
  prefs: []
  type: TYPE_NORMAL
  zh: 设计师们想要的很多东西，CSS 简直不能提供。
- en: 'Round corners were a big one. Square corners had fallen out of vogue, and now
    everyone wanted buttons with round corners, since they were The Future. (Native
    buttons also went out of vogue, for some reason.) Alas, CSS had no way to do this.
    Your options were:'
  id: totrans-split-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 圆角是一个大问题。方形角落已经过时了，现在每个人都想要圆角按钮，因为它们是未来。 （原生按钮也不再流行，出于某种原因。）然而，CSS 没有办法做到这一点。你的选择是
- en: Make a fixed-size background image of a rounded rectangle and put it on a fixed-size
    button. Maybe drop the text altogether and just make the whole thing an image. Eugh.
  id: totrans-split-217
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 制作一个固定大小的圆角矩形背景图，并将其放在一个固定大小的按钮上。也许干脆把文本去掉，直接把整个按钮做成一个图像。 呃。
- en: Make a *generic* background image and scale it to fit. More clever, but the
    corners might end up not round.
  id: totrans-split-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 制作一个*通用*的背景图像并缩放它以适应。更聪明，但是角落可能不会是圆的。
- en: Make the rounded rectangle, cut out the corner and edges, and put them in a
    3×3 table with the button label in the middle. Even better, use JavaScript to
    do this on the fly.
  id: totrans-split-219
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 制作圆角矩形，剪掉角和边缘，然后将它们放在一个 3×3 的表格中，按钮标签放在中间。更好的是，使用 JavaScript 实时生成这些。
- en: Fuck it, make your entire website one big Flash app lol
  id: totrans-split-220
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 算了吧，把你整个网站做成一个大 Flash 应用 哈哈
- en: 'Another problem was that IE 6 didn’t understand PNGs with 8-bit alpha; it could
    only correctly display PNGs with 1-bit alpha, i.e. every pixel is either fully
    opaque or fully transparent, like GIFs. You had to settle for jagged edges, bake
    a solid background color into the image, or apply various fixes that centered
    around this fucking garbage nonsense:'
  id: totrans-split-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个问题是，IE 6 不理解带有 8 位 alpha 通道的 PNG 图像；它只能正确显示带有 1 位 alpha 通道的 PNG，即每个像素要么完全不透明，要么完全透明，就像
    GIF 图像一样。你不得不接受锯齿边缘，把一个纯色背景色嵌入图像，或者应用各种围绕这个该死的垃圾问题的修复方案。
- en: '|  |'
  id: totrans-split-222
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE16]'
  id: totrans-split-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '|'
  id: totrans-split-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'Along similar lines: gradients and drop shadows! You can’t have fancy plastic
    buttons without those. But here you were basically stuck with making images again.'
  id: totrans-split-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似的问题还有：渐变和阴影效果！没有这些，你怎么能做出时髦的塑料按钮呢？但是这时你基本上又陷入了制作图像的困境。
- en: Translucency was a bit of a mess. Most browsers supported the CSS 3 `opacity`
    property since very early on… except IE, which needed another wacky Microsoft-specific
    `filter` thing. And if you wanted *only* the background translucent, you’d need
    a translucent PNG, which… well, you know.
  id: totrans-split-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 半透明度曾经是一团糟。大多数浏览器从很早就支持 CSS 3 的 `opacity` 属性…… 除了 IE，它需要另一种怪异的微软专用 `filter`
    东西。而且如果你只想让背景半透明，你需要一个半透明的 PNG，这个…… 你懂的。
- en: Since the beginning, jQuery shipped with built-in animated effects like `fadeIn`,
    and they started popping up all over the place. It was kind of like the Web equivalent
    of how every Linux user in the mid-00s (and I include myself in this) used that
    fucking [Compiz cube effect](https://youtu.be/4QokOwvPxrE?t=118).
  id: totrans-split-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一开始，jQuery 就内置了诸如 `fadeIn` 等动画效果，它们开始在各处频繁出现。这有点像网络版的那个 Compiz 立方体效果，你懂的，00
    年代中期每个 Linux 用户（包括我自己）都在用的那个该死的 [Compiz cube effect](https://youtu.be/4QokOwvPxrE?t=118)。
- en: Obviously you need JavaScript to trigger an element’s disappearance in most
    interesting cases, but using it to control the actual animation was a bit heavy-handed
    and put a strain on browsers. Tabbed browsing compounded this, since browsers
    were largely single-threaded, and for various reasons, every open page ran in
    the same thread.
  id: totrans-split-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 显然，你需要 JavaScript 在大多数有趣的情况下触发元素的消失，但是使用它来控制实际的动画有点过火，会对浏览器造成压力。选项卡式浏览进一步加剧了这一点，因为浏览器大多是单线程的，出于各种原因，每个打开的页面都运行在同一个线程上。
- en: Oh! Alternating background colors on table rows. This has since gone out of
    style, but I think that’s a shame, because *man* did it make tables easier to
    read. But CSS had no answer for this, so you had to either give every other row
    a class like `<tr class="odd">` (hope the table’s generated with code!) or do
    some jQuery nonsense.
  id: totrans-split-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哦！交替的表格行背景颜色。这已经过时了，但我认为这很遗憾，因为这确实使得表格更容易阅读。但是 CSS 对此没有解决方案，所以你要么为每一行设置一个类似
    `<tr class="odd">` 的类（希望表格是通过代码生成的！），要么用一些 jQuery 的垃圾处理方法。
- en: CSS 2 introduced the `>` child selector, so you could write stuff like `ul.foo
    > li` to style special lists without messing up nested lists, and IE 6! Didn’t!
    Fucking! Support! It!
  id: totrans-split-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS 2 引入了 `>` 子选择器，所以你可以写像 `ul.foo > li` 这样的东西，来为特殊列表设置样式，而不会弄乱嵌套列表，然而 IE 6！竟然！不支持！这个！
- en: All those are merely aesthetic concerns, though. If you were interested in layout,
    well, the rise of Firefox had made your life at once much easier and much harder.
  id: totrans-split-231
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些只是审美上的问题，然而如果你对布局感兴趣，哦，Firefox 的崛起一方面让你的生活变得更容易，另一方面又让它变得更加困难。
- en: 'Remember `inline-block`? Firefox 2 actually supported it! It was buggy and
    hidden behind a vendor prefix, but it more or less worked, which let designers
    start playing with it. And then Firefox 3 supported it more or less fully, which
    felt miraculous. Version 3 of our [thumbnail grid](https://eev.ee/media/2020-02-css/thumbnail-grids.html#inline-block)
    is as simple as a width and `inline-block`:'
  id: totrans-split-232
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得 `inline-block` 吗？实际上，Firefox 2 支持它！虽然它存在 bug，并且被隐藏在供应商前缀之后，但它基本上能用，这让设计师开始尝试使用它。然后
    Firefox 3 支持得更加完整，感觉简直奇迹般。我们[缩略图网格的第三版](https://eev.ee/media/2020-02-css/thumbnail-grids.html#inline-block)就像这样简单，只需要设置一个宽度和
    `inline-block`：
- en: '|  |'
  id: totrans-split-233
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE17]'
  id: totrans-split-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '|'
  id: totrans-split-235
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The general idea of `inline-block` is that the *inside* acts like a block, but
    the block itself is placed in regular flowing text, like an image. Each thumbnail
    is thus contained in a box, but the boxes all lie next to each other, and because
    of their equal widths, they flow into a grid. And since it’s functionally a line
    of text, you don’t have to work around any weird impact on the rest of the page
    like you had to do with floats.
  id: totrans-split-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`inline-block` 的一般思想是，*内部*行为类似于块，但块本身被放置在常规流动文本中，就像图片一样。因此，每个缩略图都被包含在一个框中，但这些框都紧邻在一起，并且由于它们具有相等的宽度，它们流入一个网格中。由于它实际上是一行文本，因此您不必像处理 浮动布局 那样解决页面其他部分的奇怪影响。'
- en: Sure, this had some drawbacks. You couldn’t do anything with the leftover space,
    for example, so there was a risk of a big empty void on the right with pathological
    screen sizes. You still had the problem of breaking the grid with a wide cell.
    But at least it’s not floats.
  id: totrans-split-237
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这种方法也有一些缺点。例如，您无法处理剩余空间，因此在某些特殊的屏幕尺寸下可能会出现右侧的大片空白。您仍然面临着单元格宽度过大而破坏网格的问题。但至少它不是 浮动布局。
- en: 'One teeny problem: IE 6\. It did *technically* support `inline-block`, but
    only on elements that were naturally `inline` — ones like `<b>` and `<i>`, not
    `<li>`. So, not ones you’d actually want (or think) to use `inline-block` on. Sigh.'
  id: totrans-split-238
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个小问题：IE 6。它*技术上*支持`inline-block`，但仅限于自然为`inline`的元素 —— 例如 `<b>` 和 `<i>`，而不是
    `<li>`。所以，你真的不会（或者不应该）认为要在这些元素上使用 `inline-block`。哎。
- en: 'Lucky for us, at some point an absolute genius discovered `hasLayout`, an internal
    optimization in IE that marks whether an element… uh… has… layout. Look, I don’t
    know. Basically it changes the rendering path for an element — making it *differently*
    buggy, like quirks mode on a per-element basis! The upshot is that the above works
    in IE 6 if you add a couple lines:'
  id: totrans-split-239
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，某个绝对天才在某个时候发现了 `hasLayout`，这是IE中的内部优化，用于标记一个元素是否具有…… 呃…… 布局。看，我不知道。基本上它会改变元素的渲染路径
    —— 使其*不同地*存在 bug，就像每个元素都处于怪癖模式一样！总之，在IE 6中，如果添加几行代码，上述问题就会解决：
- en: '|  |'
  id: totrans-split-240
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE18]'
  id: totrans-split-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-split-242
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'The leading asterisks make the property invalid, so browsers should ignore
    the whole line… but for some reason I cannot begin to fathom, IE 6 ignores the
    asterisks and accepts the rest of the rule. (Almost any punctuation worked, including
    a hyphen or — my personal favorite — an underscore.) The `zoom` property is a
    Microsoft extension that scales stuff, with the side effect that it grants the
    mystical property of “layout” to the element as well. And `display: inline` *should*
    make each element spill its contents into one big line of text, but IE treats
    an `inline` element that has “layout” roughly like an `inline-block`.'
  id: totrans-split-243
  prefs: []
  type: TYPE_NORMAL
  zh: '领先的星号使属性无效，因此浏览器应该忽略整行……但由于某些我无法理解的原因，IE 6 却忽略了星号并接受了规则的其余部分。（几乎任何标点符号都有效，包括连字符或
    —— 我个人最喜欢的是下划线。）`zoom` 属性是 Microsoft 的扩展，用于缩放内容，其副作用是为元素授予了“布局”神奇属性。而 `display:
    inline` *应该* 使每个元素的内容溢出成为一行文本，但是IE将具有“布局”的`inline`元素大致视为`inline-block`。'
- en: 'And here we saw the true potential of CSS messes. Browser-specific rules, with
    deliberate bad syntax that one browser would ignore, to replicate an effect that
    *still* isn’t clearly described by what you’re writing. [Entire tutorials](https://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/)
    written to explain how to accomplish something simple, like a *grid*, but have
    it actually work on most people’s browsers. You’d also see `* html`, `html > /**/
    body`, and all kinds of other nonsense. [Here’s a full list!](http://browserhacks.com/)
    And remember that “clearfix” hack from before? The [full version](https://css-tricks.com/snippets/css/clear-fix/),
    compatible with *every* browser, is a bit worse:'
  id: totrans-split-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们看到了 CSS 混乱的真正潜力。特定于浏览器的规则，故意的糟糕语法，只有一个浏览器会忽略，以复制一个 *现在仍然无法清楚描述的效果*。[整个教程](https://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/)写来解释如何实现像
    *网格* 这样简单的东西，但确实在大多数人的浏览器上都能工作。你还会看到 `* html`，`html > /**/ body`，以及各种其他无厘头的东西。之前的
    “clearfix” hack？它的 [完整版本](https://css-tricks.com/snippets/css/clear-fix/)，兼容 *每一个*
    浏览器，稍微有点*更糟*：
- en: '|'
  id: totrans-split-245
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE19]'
  id: totrans-split-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '|'
  id: totrans-split-247
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE20]'
  id: totrans-split-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '|'
  id: totrans-split-249
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Is it any wonder folks started groaning about CSS?
  id: totrans-split-250
  prefs: []
  type: TYPE_NORMAL
  zh: 难怪人们开始抱怨 CSS 了吧？
- en: 'This was an era of blind copy/pasting in the frustrated hopes of making the
    damn thing work. Case in point: someone (I dug the original source up once but
    can’t find it now) had the bone-headed idea of always setting `body { font-size:
    62.5% }` due to a combination of “relative units are good” and wanting to override
    the seemingly massive default browser font size of 16px (which, it turns out,
    [is correct](https://www.smashingmagazine.com/2011/10/16-pixels-body-copy-anything-less-costly-mistake/))
    and dealing with IE bugs. He walked it back a short time later, but the damage
    had been done, and now *thousands* of websites start off that way as a “best practice”.
    Which means if you want to change your browser’s default font size in either direction,
    you’re screwed — scale it down and a bunch of the Web becomes microscopic, scale
    it up and everything will still be much smaller than you’ve asked for, scale it
    up more to compensate and everything that actually respects your decision will
    be ginormous. At least we have better page zoom now, I guess.'
  id: totrans-split-251
  prefs: []
  type: TYPE_NORMAL
  zh: '这是一个盲目复制/粘贴的时代，希望通过这种方式让该死的东西运行起来。以此为例：有人（我曾经找到过原始来源，但现在找不到了）提出了一个愚蠢的想法，总是设置
    `body { font-size: 62.5% }`，因为“相对单位很好”，并希望覆盖看似巨大的默认浏览器字体大小 16px（事实证明，[是正确的](https://www.smashingmagazine.com/2011/10/16-pixels-body-copy-anything-less-costly-mistake/)），以及处理IE的bug。不久后他收回了这个决定，但已经造成了影响，现在**成千上万**的网站都以此为“最佳实践”开始。这意味着，如果你想在浏览器中改变默认字体大小，不管是放大还是缩小，你都很头疼
    —— 缩小它，网页中的一大部分文字就会变得微小，放大它，一切仍然比你要求的要小得多，为了弥补放大，那些真正尊重你决定的内容将变得庞大。至少现在我们有更好的页面缩放功能，我猜是这样。'
- en: 'Oh, and do remember: Stack Overflow didn’t exist yet. This stuff was passed
    around purely by word of mouth. If you were lucky, you knew about some of the
    websites about websites, like [quirks mode](https://www.quirksmode.org/) and [Eric
    Meyer’s website](https://meyerweb.com/).'
  id: totrans-split-252
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，还有一点要记住：当时还没有 Stack Overflow。这些东西完全靠口口相传传播。如果你幸运的话，你可能知道一些关于网站的网站，比如 [quirks
    mode](https://www.quirksmode.org/) 和 [Eric Meyer 的网站](https://meyerweb.com/)。
- en: In fact, check out Meyer’s [css/edge](https://meyerweb.com/eric/css/edge/index.html)
    site for some wild examples of stuff folks were doing, even with just CSS 1, as
    far back as 2002\. I still think [complexspiral](https://meyerweb.com/eric/css/edge/complexspiral/demo.html)
    is pure genius, even though you could do it nowadays with `opacity` and just one
    image. The approach in [raggedfloat](https://meyerweb.com/eric/css/edge/raggedfloat/demo.html)
    wouldn’t get native support in CSS until a few years ago, with [`shape-outside`](https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside)!
    He also brought us [CSS reset](https://meyerweb.com/eric/tools/css/reset/), eliminating
    differences between browsers’ default styles.
  id: totrans-split-253
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，看看 Meyer 的 [css/edge](https://meyerweb.com/eric/css/edge/index.html) 网站，那里展示了一些人们早在
    2002 年甚至只用 CSS 1 就能实现的疯狂示例。我仍然认为 [complexspiral](https://meyerweb.com/eric/css/edge/complexspiral/demo.html)
    是纯粹的天才，尽管现在你可以用 `opacity` 和一个图片就做到。至于 [raggedfloat](https://meyerweb.com/eric/css/edge/raggedfloat/demo.html)
    中的方法，直到几年前才在 CSS 中得到原生支持，通过 [`shape-outside`](https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside)！他还为我们带来了
    [CSS reset](https://meyerweb.com/eric/tools/css/reset/)，消除了浏览器默认样式的差异。
- en: (I cannot understate how much of a CSS *pioneer* Eric Meyer is. When his young
    daughter Rebecca died six years ago, she was uniquely immortalized with her own
    CSS color name, [`rebeccapurple`](https://meyerweb.com/eric/thoughts/2014/06/19/rebeccapurple/).
    That’s how highly the Web community thinks of him. Also I have to go cry a bit
    over that story now.)
  id: totrans-split-254
  prefs: []
  type: TYPE_NORMAL
  zh: （我无法言表Eric Meyer在CSS方面的*pioneer*身份有多么重要。当他年幼的女儿Rebecca在六年前去世时，她以自己的CSS颜色名`rebeccapurple`被独特地永恒化，这就是Web社区对他的高度评价。现在我得去哭一下那个故事了。）
- en: Designers and developers were pushing the bounds of what browsers were capable
    of. Browsers were handling it all somewhat poorly. All the fixes and workarounds
    and libraries were arcane, brittle, error-prone, and/or heavy.
  id: totrans-split-255
  prefs: []
  type: TYPE_NORMAL
  zh: 设计师和开发人员正在推动浏览器的能力极限。浏览器处理这一切的方式有些粗糙。所有的修复和解决方法以及库都很神秘、脆弱、容易出错和/或过于笨重。
- en: Clearly, browsers needed some new functionality. But just slopping something
    in wouldn’t help; Microsoft had done plenty of that, and it had mostly made a mess.
  id: totrans-split-256
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，浏览器需要一些新功能。但是随便搞点东西进去是没有用的；微软做了很多这样的事情，结果大部分都弄得一团糟。
- en: Several struggling attempts began. With the W3C’s head still squarely up its
    own ass — even explicitly rejecting proposed enhancements to HTML, in favor of
    snorting XML — some folks from (active) browser vendors Apple, Mozilla, and Opera
    decided to make their own clubhouse. WHATWG came into existence in June 2004,
    and they began work on HTML5. (It would end up defining error-handling very explicitly,
    which completely obviated the need for XHTML and eliminated a number of security
    concerns when working with arbitrary HTML. Also it gave us some new goodies, like
    native audio, video, and form controls for dates and colors and other stuff that
    had been clumsily handled by JavaScript-powered custom controls. And, um, still
    often are.)
  id: totrans-split-257
  prefs: []
  type: TYPE_NORMAL
  zh: 几个挣扎的尝试开始了。尽管W3C仍然固执己见——甚至明确拒绝了对HTML提出的增强建议，转而支持XML——一些来自（活跃的）浏览器供应商苹果、Mozilla和Opera的人决定自己建立一个俱乐部。WHATWG在2004年6月成立，并开始了HTML5的工作。（它最终非常明确地定义了错误处理，完全取消了需要XHTML的需求，并消除了在处理任意HTML时的一些安全问题。此外，它还带来了一些新好玩的东西，如本地音频、视频和日期、颜色等表单控件，这些东西以前是由JavaScript驱动的自定义控件处理的。而且，呃，现在还经常这样。）
- en: Then there was CSS 3\. I’m not sure when it started to exist. It emerged slowly,
    struggling, like a chick hatching from an egg and taking its damn sweet fucking
    time to actually get implemented anywhere.
  id: totrans-split-258
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是CSS 3。我不确定它是什么时候开始存在的。它慢慢地出现，挣扎着，就像小鸡从蛋中孵化出来，花了一些该死的甜时间才真正被任何地方实现。
- en: I’m having to do a lot of educated guessing here, but I *think* it began with
    `border-radius`. Specifically, with `-moz-border-radius`. I don’t know when it
    was first introduced, but the Mozilla bug tracker has mentions of it as far back
    as 1999.
  id: totrans-split-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里不得不做出很多有根据的猜测，但我*认为*它始于`border-radius`。具体来说，是从`-moz-border-radius`开始的。我不知道它是什么时候首次引入的，但Mozilla的Bug跟踪器中有关它的提及可以追溯到1999年。
- en: See, Firefox’s own UI is rendered *with CSS*. If Mozilla wanted to do something
    that couldn’t be done with CSS, they added a property of their own, prefixed with
    `-moz-` to indicate it was their own invention. And when there’s no real harm
    in doing so, they leave the property accessible to websites as well.
  id: totrans-split-260
  prefs: []
  type: TYPE_NORMAL
  zh: 看吧，Firefox自己的用户界面是通过CSS来渲染的。如果Mozilla想做一些CSS无法完成的事情，他们会添加自己的属性，以`-moz-`为前缀，表明这是他们自己的发明。而当没有真正的伤害时，他们也会将这个属性留给网站使用。
- en: My guess, then, is that the push for CSS 3 really began when Firefox took off
    and designers discovered `-moz-border-radius`. Suddenly, built-in rounded corners
    were available! No more fucking around in Photoshop; you only needed to write
    a single line! Practically overnight, everything everywhere had its corners filed down.
  id: totrans-split-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我的猜想是，推动CSS 3真正开始的时刻是Firefox起飞并且设计师们发现了`-moz-border-radius`。突然之间，内置的圆角就出现了！不再需要在Photoshop里到处摸索；你只需要写一行代码！几乎一夜之间，到处都是圆角。
- en: 'And from there, things snowballed. Common problems were addressed one at a
    time by new CSS features, which were clustered together into a new CSS version:
    CSS 3\. The big ones were solutions to the design problems mentioned before:'
  id: totrans-split-262
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里开始，事情开始迅速发展。新的CSS功能逐个解决常见问题，并被聚集到一个新的CSS版本中：CSS 3。其中的主要问题是解决之前提到的设计问题：
- en: Rounded corners, provided by `border-radius`.
  id: totrans-split-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 圆角，由`border-radius`提供。
- en: Gradients, provided by `linear-gradient()` and friends.
  id: totrans-split-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渐变，由`linear-gradient()`和其它工具提供。
- en: Multiple backgrounds, which weren’t exactly a pressing concern, but which turned
    out to make some other stuff easier.
  id: totrans-split-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多重背景，虽然并非迫在眉睫的问题，但事实证明，它们确实使其他一些事情变得更容易。
- en: Translucency, provided by `opacity` and colors with an alpha channel.
  id: totrans-split-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 透明度，由 `opacity` 和带有 alpha 通道的颜色提供。
- en: Box shadows.
  id: totrans-split-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 盒子阴影。
- en: Text shadows, which had been in CSS 2 but dropped in 2.1 and never implemented anyway.
  id: totrans-split-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本阴影在 CSS 2 中存在，但在 2.1 中被移除，且从未被实现过。
- en: Border images, so you could do even fancier things than mere rounded borders.
  id: totrans-split-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边框图片，因此你可以做比简单圆角边框更花哨的事情。
- en: Transitions and animations, now doable with ease without needing jQuery (or
    any JS at all).
  id: totrans-split-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过渡和动画，现在可以轻松实现，无需 jQuery（或任何 JavaScript）。
- en: '`:nth-child()`, which solved the alternating rows problem with pure CSS.'
  id: totrans-split-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:nth-child()`，用纯 CSS 解决交替行问题。'
- en: Transformations. Wait, what? This kinda leaked in from SVG, which browsers were
    also being expected to implement, and which is built heavily around transforms.
    The code was already there, so, hey, now we can rotate stuff with CSS! Couldn’t
    do *that* before. Cool.
  id: totrans-split-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变换。等等，什么？这种功能从 SVG 中泄露出来，浏览器也被期望实现它，并且它建立在变换操作之上。代码已经存在，所以，嘿，现在我们可以用 CSS 旋转东西了！以前是做不到*的*。酷。
- en: Web fonts, which had been in CSS for some time but only ever implemented in
    IE and only with some goofy DRM-laden font format. Now we weren’t limited to the
    four bad fonts that ship with Windows and that no one else has!
  id: totrans-split-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 字体，虽然在 CSS 中已有一段时间，但只在 IE 中实现，并且只支持一些带有版权保护的糟糕字体格式。现在我们不再受限于 Windows 自带的四种糟糕字体，也不再是其他人没有的字体了！
- en: These were pretty great! They didn’t solve any layout problems, but they *did*
    address aesthetic issues that designers had been clumsily working around by using
    loads of images and/or JavaScript. That meant less stuff to download and more
    text used instead of images, both of which were pretty good for the Web.
  id: totrans-split-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这些阴影非常棒！它们并未解决任何布局问题，但确实解决了设计师们曾经笨拙地通过大量图片和/或 JavaScript 绕过的美学问题。这意味着下载内容更少，而且更多地使用文本代替图片，这两者对于
    Web 都是相当不错的。
- en: The grand irony is that all the stuff you could do with these features went
    out of style almost immediately, and now we’re back to flat rectangles again.
  id: totrans-split-275
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的讽刺是，所有这些功能所能实现的东西几乎立刻就过时了，现在我们又回到了扁平矩形的时代。
- en: Alas! All was still not right with the world.
  id: totrans-split-276
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！世界依然不完美。
- en: Several of these new gizmos were, I believe, initially developed by browser
    vendors and prefixed. Some later ones were designed by the CSS committee but implemented
    by browsers while the design was still in flux, and thus also prefixed.
  id: totrans-split-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信其中几个新式装置最初由浏览器供应商开发并添加了前缀。一些后来的装置由 CSS 委员会设计，但在设计仍在变动时由浏览器实现，也加入了前缀。
- en: So began *prefix hell*, which continues to this day.
  id: totrans-split-278
  prefs: []
  type: TYPE_NORMAL
  zh: 于是开始了*前缀地狱*，至今仍在持续。
- en: 'Mozilla had `-moz-border-radius`, so when Safari implemented it, it was named
    `-webkit-border-radius` (“WebKit” being the name of Apple’s KHTML fork). Then
    the CSS 3 spec standardized it and called it just `border-radius`. That meant
    that if you wanted to use rounded borders, you actually needed to give *three* rules:'
  id: totrans-split-279
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla 有 `-moz-border-radius`，所以当 Safari 实现它时，被命名为 `-webkit-border-radius`（“WebKit”是苹果的
    KHTML 分支的名称）。然后 CSS 3 规范将其标准化，并简称为 `border-radius`。这意味着如果你想使用圆角边框，实际上需要给出*三*个规则：
- en: '|  |'
  id: totrans-split-280
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE21]'
  id: totrans-split-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '|'
  id: totrans-split-282
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'The first two made the effect actually work in current browsers, and the last
    one was future-proofing: when browsers implemented the real rule and dropped the
    prefixed ones, it would take over.'
  id: totrans-split-283
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个使效果在当前浏览器中真正可用，最后一个则是未来的保护措施：当浏览器实现了真正的规则并且放弃了前缀版本时，它将接管过来。
- en: You had to do this *every fucking time*, since CSS isn’t a programming language
    and has no macros or functions or the like. Sometimes Opera and IE would have
    their own implementations with `-o-` and `-ms-` prefixes, bringing the total to
    five copies. It got much worse with gradients; the syntax went through a number
    of major incompatible revisions, so you couldn’t even rely on copy/pasting and
    changing the property name!
  id: totrans-split-284
  prefs: []
  type: TYPE_NORMAL
  zh: 每*一次*都得这样做，因为 CSS 不是编程语言，没有宏或类似函数。有时 Opera 和 IE 会有自己的实现，带有 `-o-` 和 `-ms-` 前缀，这样总共就有五份副本。渐变色情况更加糟糕；语法经历了几次主要的不兼容修订，因此你甚至不能依赖复制/粘贴并更改属性名！
- en: And plenty of folks, well, fucked it up. I can’t blame them too much; I mean,
    this sucks. But enough pages used *only* the prefixed forms, and not the final
    form, that browsers had to keep supporting the prefixed form for longer than they
    would’ve liked to avoid breaking stuff. And if the prefixed form still works and
    it’s what you’re used to writing, then maybe you still won’t bother with the unprefixed one.
  id: totrans-split-285
  prefs: []
  type: TYPE_NORMAL
  zh: 很多人都搞砸了。我不能完全责怪他们；这确实很糟糕。但是足够多的页面仅使用前缀形式，而不是最终形式，以至于浏览器不得不继续支持前缀形式的时间比他们本来想要的更长，以避免破坏一些东西。如果前缀形式仍然有效，并且这是你习惯写的方式，那么也许你还是不会使用未带前缀的那个。
- en: Worse, *some* people would *only* use the form that worked in their pet choice
    of browser. This got especially bad with the rise of mobile web browsers. The
    built-in browsers on iOS and Android are Safari (WebKit) and Chrome (originally
    WebKit, now a fork), so you only “needed” to use the `-webkit-` properties. Which
    made things difficult for Mozilla when it released [Firefox for Android](https://www.mozilla.org/en-US/firefox/mobile/).
  id: totrans-split-286
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，*一些*人只会使用适用于他们钟爱的浏览器的形式。随着移动网络浏览器的兴起，情况变得尤为严重。iOS 和 Android 上的内置浏览器分别是
    Safari（WebKit）和 Chrome（最初是 WebKit，现在是一个分支），因此你只“需要”使用 `-webkit-` 属性。这让 Mozilla
    在发布 [Firefox for Android](https://www.mozilla.org/zh-CN/firefox/mobile/) 时变得更加困难。
- en: Hey, remember that whole debacle with IE 6? Here we are again! It was bad enough
    that Mozilla eventually decided to [implement](https://developer.mozilla.org/en-US/docs/Web/CSS/WebKit_Extensions#Supported_in_Firefox_with_-webkit-_prefix)
    a number of `-webkit-` properties, which remain supported even in desktop Firefox
    to this day. The situation is goofy enough that Firefox now supports some effects
    *only* via these properties, like [`-webkit-text-stroke`](https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-text-stroke),
    which isn’t being standardized.
  id: totrans-split-287
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿，还记得 IE 6 的整个混乱事件吗？我们又回到了这里！Mozilla 最终决定[实现](https://developer.mozilla.org/zh-CN/docs/Web/CSS/WebKit_Extensions#Supported_in_Firefox_with_-webkit-_prefix)一些
    `-webkit-` 属性，即使在桌面版 Firefox 中至今仍然支持这些属性。情况变得荒谬到现在 Firefox 甚至仅通过这些属性支持某些效果，例如
    [`-webkit-text-stroke`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/-webkit-text-stroke)，这种属性并未被标准化。
- en: Even better, Chrome’s current forked engine is called Blink, so *technically*
    it shouldn’t be using `-webkit-` properties either. And yet, here we are. At least
    it’s not as bad as the [user agent string mess](https://webaim.org/blog/user-agent-string-history/).
  id: totrans-split-288
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，Chrome 当前的分支引擎被称为 Blink，所以*技术上*它不应该再使用 `-webkit-` 属性了。然而，我们还在这里。至少不像 [用户代理字符串的混乱](https://webaim.org/blog/user-agent-string-history/)
    那么糟糕。
- en: Browser vendors have pretty much abandoned prefixing, now; instead they hide
    experimental features behind flags (so they’ll only work on the developer’s machine),
    and new features are theoretically designed to be smaller and easier to stabilize.
  id: totrans-split-289
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，浏览器供应商基本上已经放弃了前缀；取而代之的是将实验性功能隐藏在标志（flag）后面（因此它们只在开发者的机器上工作），而新功能理论上被设计得更小更容易稳定。
- en: 'This mess was probably a huge motivating factor for the development of [Sass](https://sass-lang.com/)
    and [LESS](http://lesscss.org/), two languages that produce CSS. Or… two CSS preprocessors,
    maybe. They have very similar goals: both add variables, functions, and some form
    of macros to CSS, allowing you to eliminate a lot of the repetition and browser
    hacks and other nonsense from your stylesheets. Hell, this blog [still uses SCSS](https://github.com/eevee/eev.ee/tree/988fc2b4547ee41388f29c4bad622c492c4c6f77/theme/static/sass),
    though its use has gradually decreased over time.'
  id: totrans-split-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这种混乱可能是开发 [Sass](https://sass-lang.com/) 和 [LESS](http://lesscss.org/) 的一个巨大动机因素，这两种语言都生成
    CSS。或者说… 两个 CSS 预处理器，也许是这样。它们有非常相似的目标：都添加了变量、函数和某种形式的宏到 CSS 中，允许你消除样式表中许多重复和浏览器
    Hack 等无聊的东西。嘿，这个博客[仍然使用 SCSS](https://github.com/eevee/eev.ee/tree/988fc2b4547ee41388f29c4bad622c492c4c6f77/theme/static/sass)，尽管随着时间的推移其使用逐渐减少。
- en: But then, like an angel descending from heaven… [flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout).
  id: totrans-split-291
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，就像天使从天而降一样… [flexbox](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout)。
- en: Flexbox has been around for a *long* time — [allegedly](https://www.caniuse.com/#feat=flexbox)
    it had partial support in Firefox 2, back in 2006! It went through several incompatible
    revisions and took ages to stabilize. Then IE took ages to implement it, and you
    don’t really want to rely on layout tools that only work for half your audience.
    It’s only relatively recently (2015? Later?) that flexbox has had sufficiently
    broad support to use safely. And I could swear I still run into folks whose current
    Safari doesn’t recognize it at all without prefixing, even though Safari supposedly
    dropped the prefixes five years ago…
  id: totrans-split-292
  prefs: []
  type: TYPE_NORMAL
  zh: Flexbox 已经存在了相当长的时间 —— 据称它在 2006 年 Firefox 2 中就开始部分支持了！它经历了几个不兼容的修订版本并花费了很长时间才稳定下来。然后
    IE 也花了很长时间来实现它，你不想依赖于只适用于一半受众的布局工具。直到相对最近的时候（2015 年？之后？），Flexbox 才有了足够广泛的支持可以安全使用。我甚至可以发誓，我现在仍然遇到一些人的当前
    Safari 完全不识别它，尽管据说 Safari 五年前就取消了前缀……
- en: 'Anyway, flexbox is a CSS implementation of a pretty common GUI layout tool:
    you have a parent with some children, and the parent has some amount of space
    available, and it gets divided automatically between the children. You know, it
    *puts things next to each other*.'
  id: totrans-split-293
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，flexbox 是一个相当常见的 GUI 布局工具的 CSS 实现：你有一个父元素和一些子元素，父元素有一定的可用空间，并且它会自动地将可用空间分配给子元素。你知道，它*将东西并排放置*。
- en: 'The general idea is that the browser computes how much space the parent has
    available and the “initial size” of each child, figures out how much extra space
    there is, and distributes it according to the flexibleness of each child. Think
    of a toolbar: you might want each button to have a fixed size (a flex of 0), but
    want to add spacers that share any leftover space equally, so you’d give them
    a flex of 1.'
  id: totrans-split-294
  prefs: []
  type: TYPE_NORMAL
  zh: 总体思路是，浏览器计算父元素的可用空间和每个子元素的“初始大小”，确定额外空间的多少，并根据每个子元素的灵活性分配它。想象一下工具栏：你可能希望每个按钮都有固定的大小（flex
    为 0），但想要添加均匀分配任何剩余空间的间隔器，所以你会给它们一个 flex 为 1。
- en: 'Once that’s done, you have a number of quality-of-life options at your disposal,
    too: you can distribute the extra space *between* the children instead, you can
    tell the children to stretch to the same height or align them in various ways,
    and you can even have them wrap into multiple rows if they won’t all fit!'
  id: totrans-split-295
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些都完成之后，你还可以使用一些提升生活质量的选项：你可以在子元素之间分配额外的空间，让子元素拉伸到相同的高度或者以各种方式对齐它们，甚至可以让它们换行显示，以便能够容纳所有的子元素！
- en: 'With this, we can take yet another crack at that [thumbnail grid](https://eev.ee/media/2020-02-css/thumbnail-grids.html#flexbox):'
  id: totrans-split-296
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们可以再次尝试那个[缩略图网格](https://eev.ee/media/2020-02-css/thumbnail-grids.html#flexbox)：
- en: '|  |'
  id: totrans-split-297
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE22]'
  id: totrans-split-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '|'
  id: totrans-split-299
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: This is miraculous. I forgot all about `inline-block` overnight and mostly salivated
    over this until it was universally supported. It even expresses very clearly what
    I want.
  id: totrans-split-300
  prefs: []
  type: TYPE_NORMAL
  zh: 这真是奇迹般的事情。我一夜之间就忘记了 `inline-block`，并且大多数时间都在盼望它被普遍支持。它甚至非常清楚地表达了我想要的。
- en: …almost. It still has the problem that too-wide cells will break the grid, since
    it’s *still* a horizontal row wrapped onto several independent lines. It’s pretty
    damn cool, though, and solves a number of other layout problems. Surely this is
    good enough. Unless…?
  id: totrans-split-301
  prefs: []
  type: TYPE_NORMAL
  zh: …几乎。它仍然存在一个问题，即太宽的单元格将破坏网格，因为它仍然是一个水平行包装到几个独立的行中。尽管如此，它确实非常酷，并解决了许多其他布局问题。这肯定已经足够好了。除非……？
- en: I’d say mass adoption of flexbox marked the beginning of the modern era of CSS.
    But there was one lingering problem…
  id: totrans-split-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我想说，flexbox 的大规模采用标志着现代 CSS 时代的开始。但是仍然存在一个悬而未决的问题……
- en: IE 6 took a long, long, *long* time to go away. It didn’t drop below 10% market
    share (still a huge chunk) until early 2010 or so.
  id: totrans-split-303
  prefs: []
  type: TYPE_NORMAL
  zh: IE 6 花了很长很长时间才退出舞台。直到 2010 年初左右，它的市场份额才降至不到 10%（仍然是一个相当大的份额）。
- en: Firefox hit 1.0 at the end of 2004\. IE 7 wasn’t released until two years later,
    it offered only modest improvements, it suffered from compatibility problems with
    stuff built for IE 6, and the IE 6 holdouts (many of whom were not Computer People)
    generally saw no reason to upgrade. Vista shipped with IE 7, but Vista was kind
    of a flop — I don’t believe it ever came close to overtaking XP, not in its entire lifetime.
  id: totrans-split-304
  prefs: []
  type: TYPE_NORMAL
  zh: Firefox 在 2004 年底发布了 1.0 版本。而 IE 7 则是两年后才发布，虽然它带来了一些小的改进，但却存在与为 IE 6 构建的内容兼容性问题，并且那些一直使用
    IE 6 的用户（其中许多并非计算机专业人士）通常认为没有升级的必要。Vista 发布时内置了 IE 7，但 Vista 可以说是个失败作品 —— 我不认为它在整个生命周期内能够超越
    XP 的地位。
- en: Other factors included corporate IT policies, which often take the form of “never
    upgrade anything ever” — and often for good reason, as I heard endless tales of
    internal apps that only worked in IE 6 for all manner of horrifying reasons. Then
    there was the *entirety of South Korea*, which was *legally required* to use IE
    6 because they’d enshrined in law some [security requirements](https://www.washingtonpost.com/world/asia_pacific/due-to-security-law-south-korea-is-stuck-with-internet-explorer-for-online-shopping/2013/11/03/ffd2528a-3eff-11e3-b028-de922d7a3f47_story.html)
    that could only be implemented with an IE 6 ActiveX control.
  id: totrans-split-305
  prefs: []
  type: TYPE_NORMAL
  zh: 其他因素包括企业 IT 政策，这些政策通常采取“永远不升级任何东西”的形式 —— 这通常是有充分理由的，因为我听到了无数关于内部应用程序只能在 IE 6
    中运行的可怕故事。然后还有*整个韩国*，因为他们在法律中确立了一些[安全要求](https://www.washingtonpost.com/world/asia_pacific/due-to-security-law-south-korea-is-stuck-with-internet-explorer-for-online-shopping/2013/11/03/ffd2528a-3eff-11e3-b028-de922d7a3f47_story.html)，只能通过
    IE 6 的 ActiveX 控件实施。
- en: So if you maintained a website that was used — or worse, *required* — by people
    who worked for businesses or lived in other countries, you were pretty much stuck
    supporting IE 6\. Folks making little personal tools and websites abandoned IE
    6 compatibility early on and plastered their sites with increasingly obnoxious
    banners taunting anyone who dared show up using it… but if you were someone’s
    boss, why would you tell them it’s okay to drop 20% of your potential audience?
    Just work harder!
  id: totrans-split-306
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在维护一个网站，它被商业人士或居住在其他国家的人们使用 — 或者更糟，*需要*他们使用 — 你几乎必须支持 IE 6\. 制作个人工具和网站的人们早早就放弃了对
    IE 6 的兼容性，并在他们的网站上贴满了越来越令人讨厌的横幅，嘲笑任何敢于使用它的人…… 但如果你是某人的老板，你为什么要告诉他们可以放弃潜在观众的 20%？只能更加努力工作！
- en: The tension grew over the years, as CSS became more capable and IE 6 remained
    an anchor. It still didn’t even understand *PNG alpha* without workarounds, and
    meanwhile we were starting to get more critical features like native video in
    HTML5. The workarounds grew messier, and the list of features you basically just
    couldn’t use grew longer. (I’d show you what my blog looks like in IE 6, but I
    don’t think it can even connect — the TLS stuff it supports is so ancient and
    broken that it’s been disabled on most servers!)
  id: totrans-split-307
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，随着 CSS 变得更加强大，IE 6 仍然是个累赘。它甚至仍然不能理解 PNG alpha，而与此同时我们开始获取更关键的功能，如 HTML5
    中的本地视频。解决方案变得更加混乱，而我们基本上无法使用的功能列表变得更长。 （我可以向你展示我的博客在 IE 6 中的样子，但我认为它甚至不能连接 ——
    它支持的 TLS 版本如此古老和破损，以至于大多数服务器已经将其禁用！）
- en: Shoutouts, by the way, to some folks on the YouTube team, who in July 2009 [added
    a warning banner](https://www.theverge.com/2019/5/4/18529381/google-youtube-internet-explorer-6-kill-plot-engineer)
    imploring IE 6 users to switch to *anything* else — without asking anyone for
    approval. “Within one month… over 10 percent of global IE6 traffic had dropped
    off.” Not all heroes wear capes.
  id: totrans-split-308
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，致敬 YouTube 团队的一些人，他们在 2009 年 7 月[添加了警告横幅](https://www.theverge.com/2019/5/4/18529381/google-youtube-internet-explorer-6-kill-plot-engineer)，恳请
    IE 6 用户切换至*任何*其他浏览器 —— 而不需要任何人的批准。“一个月内…… 全球超过 10% 的 IE6 流量消失了。” 不是所有的英雄都穿斗篷。
- en: I’d mark the beginning of the end as the day YouTube *actually* dropped IE 6
    support — March 13, 2010, almost nine years after its release. I don’t know how
    much of a *direct* impact YouTube has on corporate users or the South Korean government,
    but a massive web company dropping an entire browser sends a pretty strong message.
  id: totrans-split-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为末日的开始是 YouTube *实际上*停止支持 IE 6 的那一天 — 2010 年 3 月 13 日，几乎是其发布后的九年。我不知道 YouTube
    对企业用户或韩国政府有多大*直接*影响，但一个庞大的网络公司放弃整个浏览器确实传递了一个非常强有力的信息。
- en: There were other versions of IE, of course, and many of them were messy headaches
    in their own right. But each subsequent one became less of a pain, and nowadays
    you don’t even have to think too much about testing in IE (now Edge). Just in
    time for Microsoft to scrap their own rendering engine and turn their browser
    into a Chrome clone.
  id: totrans-split-310
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，IE 还有其他版本，许多版本都是自成一派的头痛。但随着每一个后续版本变得更少问题，如今你甚至不用太过考虑在 IE（现在是 Edge）中进行测试了。正好在微软放弃他们自己的渲染引擎，将他们的浏览器变成
    Chrome 的克隆时。
- en: 'CSS is pretty great now. You don’t need weird fucking hacks just to put things
    next to each other. Browser dev tools are built in, now, and are fucking amazing
    — Firefox has started specifically warning you when some CSS properties won’t
    take effect because of the values of others! Obscure implicit side effects like
    “stacking contexts” (whatever those are) can now be set explicitly, with properties
    like `isolation: isolate`.'
  id: totrans-split-311
  prefs: []
  type: TYPE_NORMAL
  zh: '现在的 CSS 真的很棒。您不需要奇怪的破解方法来将东西放在一起。现在浏览器开发工具已经内置，并且非常棒 —— Firefox 已经开始专门警告您，因为某些
    CSS 属性的值可能导致其他属性失效！像“堆叠上下文”（不管那是什么）这样的隐式副作用现在可以显式设置，例如 `isolation: isolate`。'
- en: In fact, let me just list everything that I can think of that you can do in
    CSS now. This isn’t a guide to all possible uses of styling, but if your CSS knowledge
    hasn’t been updated since 2008, I hope this whets your appetite. And this stuff
    is just CSS! So many things that used to be impossible or painful or require clumsy
    plugins are now natively supported — audio, video, custom drawing, 3D rendering…
    not to mention the vast ergonomic improvements to JavaScript.
  id: totrans-split-312
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，让我列出我现在认为您可以在 CSS 中做的所有事情。这不是关于样式所有可能用途的指南，但如果您的 CSS 知识自 2008 年以来没有更新过，我希望这能激起您的兴趣。而这些东西只是
    CSS！现在支持的功能如此之多，曾经不可能或痛苦或需要笨拙插件的事情现在都得到了本地支持 —— 音频、视频、自定义绘图、3D 渲染……更不用说对 JavaScript
    的巨大人体工程学改进了。
- en: A [grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout) container
    can do pretty much anything tables can do, and more, including automatically determining
    how many columns will fit. It’s fucking amazing. More on that below.
  id: totrans-split-313
  prefs: []
  type: TYPE_NORMAL
  zh: '[Grid](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout) 容器几乎可以做任何表格能做的事情，包括自动确定可以容纳多少列。这太神奇了。有关更多信息，请参见下文。'
- en: A [flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout)
    container lays out its children in a row or column, allowing each child to declare
    its “default” size and what proportion of leftover space it wants to consume.
    Flexboxes can wrap, rearrange children without changing source order, and align
    children in a number of ways.
  id: totrans-split-314
  prefs: []
  type: TYPE_NORMAL
  zh: '[Flexbox](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout)
    容器可以将其子元素排列成行或列，允许每个子元素声明其“默认”大小以及希望消耗的剩余空间比例。Flexbox 可以换行，重新排列子元素而不改变源顺序，并以多种方式对齐子元素。'
- en: '[Columns](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Columns) will
    pour text into, well, multiple columns.'
  id: totrans-split-315
  prefs: []
  type: TYPE_NORMAL
  zh: '[Columns](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Columns) 将文本分布到多个列中。'
- en: The [`box-sizing`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing)
    property lets you opt into the IE box model on a per-element basis, for when you
    need an entire element to take up a fixed amount of space and need padding/borders
    to *subtract* from that.
  id: totrans-split-316
  prefs: []
  type: TYPE_NORMAL
  zh: '[`box-sizing`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing)
    属性允许您根据每个元素的需求选择 IE 盒模型，当您需要整个元素占用固定空间并且需要填充/边框*减去*时。'
- en: '[`display: contents`](https://developer.mozilla.org/en-US/docs/Web/CSS/display)
    dumps an element’s contents out into its parent, as if it weren’t there at all.
    `display: flow-root` is basically an automatic clearfix, only a decade too late.'
  id: totrans-split-317
  prefs: []
  type: TYPE_NORMAL
  zh: '[`display: contents`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/display)
    将一个元素的内容“倒出”到其父级中，就好像它根本不存在一样。`display: flow-root` 基本上是自动的 clearfix，只是晚了十年。'
- en: '[`width`](https://developer.mozilla.org/en-US/docs/Web/CSS/width) can now be
    set to `min-content`, `max-content`, or the `fit-content()` function for more
    flexible behavior.'
  id: totrans-split-318
  prefs: []
  type: TYPE_NORMAL
  zh: '[`width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/width) 现在可以设置为 `min-content`,
    `max-content` 或 `fit-content()` 函数，以实现更灵活的行为。'
- en: '[`white-space: pre-wrap`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
    preserves whitespace, but breaks lines where necessary to avoid overflow. Also
    useful is `pre-line`, which collapses sequences of spaces down to a single space,
    but preserves literal newlines.'
  id: totrans-split-319
  prefs: []
  type: TYPE_NORMAL
  zh: '[`white-space: pre-wrap`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/white-space)
    保留空白字符，但在必要时断开行以避免溢出。`pre-line` 也很有用，它将连续的空格折叠成单个空格，但保留字面换行符。'
- en: '[`text-overflow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow)
    cuts off overflowing text with an ellipsis (or custom character) when it would
    overflow, rather than simply truncating it. Also specced is the ability to fade
    out the text, but this is as yet unimplemented.'
  id: totrans-split-320
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text-overflow`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-overflow)
    在溢出文本时使用省略号（或自定义字符）进行截断，而不是简单地截断文本。规范还指定了淡化文本的能力，但这还没有实现。'
- en: '[`shape-outside`](https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside)
    alters the shape used when wrapping text around a float. It can even use the alpha
    channel of an image as the shape.'
  id: totrans-split-321
  prefs: []
  type: TYPE_NORMAL
  zh: '[`shape-outside`](https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside)
    改变在浮动文本周围包裹时使用的形状。它甚至可以使用图像的 alpha 通道作为形状。'
- en: '[`resize`](https://developer.mozilla.org/en-US/docs/Web/CSS/resize) gives an
    arbitrary element a resize handle (as long as it has `overflow`).'
  id: totrans-split-322
  prefs: []
  type: TYPE_NORMAL
  zh: '[`resize`](https://developer.mozilla.org/en-US/docs/Web/CSS/resize) 为任意元素提供一个调整大小的手柄（只要它具有`overflow`）。'
- en: '[`writing-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode)
    sets the direction that text flows. If your design needs to work for multiple
    writing modes, a number of CSS properties that mention left/right/top/bottom have
    alternatives that describe directions in terms of the writing mode: [`inset-block`](https://developer.mozilla.org/en-US/docs/Web/CSS/inset-block)
    and [`inset-inline`](https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline)
    for position, [`block-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/block-size)
    and [`inline-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/inline-size)
    for width/height, [`border-block`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block)
    and [`border-inline`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline)
    for borders, and similar for padding and margins.'
  id: totrans-split-323
  prefs: []
  type: TYPE_NORMAL
  zh: '[`writing-mode`](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode)
    设置文本流动的方向。如果您的设计需要适应多种书写模式，一些 CSS 属性提到左/右/上/下的替代项描述了书写模式的方向：[`inset-block`](https://developer.mozilla.org/en-US/docs/Web/CSS/inset-block)
    和 [`inset-inline`](https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline)
    用于位置，[`block-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/block-size)
    和 [`inline-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/inline-size)
    用于宽度/高度，[`border-block`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-block)
    和 [`border-inline`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline)
    用于边框，以及类似的填充和边距。'
- en: '[Transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions)
    smoothly interpolate a value whenever it changes, whether due to an effect like
    `:hover` or e.g. a class being added from JavaScript. [Animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations)
    are similar, but play a predefined animation automatically. Both can use a number
    of different [easing functions](https://easings.net/en).'
  id: totrans-split-324
  prefs: []
  type: TYPE_NORMAL
  zh: '[过渡效果](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions) 在值变化时平滑地插值，无论是由于像`:hover`这样的效果还是例如从
    JavaScript 添加的类。[动画](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations)
    类似，但会自动播放预定义的动画。两者都可以使用多种不同的[缓动函数](https://easings.net/en)。'
- en: '[`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)
    rounds off the corners of a box. The corners can all be different sizes, and can
    be circular or elliptical. The curve also applies to the border, background, and
    any box shadows.'
  id: totrans-split-325
  prefs: []
  type: TYPE_NORMAL
  zh: '[`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)
    圆角化框的角落。角落可以是不同的尺寸，并且可以是圆形或椭圆形。曲线还适用于边框、背景和任何框阴影。'
- en: '[Box shadows](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow)
    can be used for the obvious effect of casting a drop shadow. You can also use
    multiple shadows and `inset` shadows for a variety of clever effects.'
  id: totrans-split-326
  prefs: []
  type: TYPE_NORMAL
  zh: '[盒子阴影](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow) 可用于投射阴影的显而易见的效果。您还可以使用多个阴影和`inset`阴影来实现各种巧妙的效果。'
- en: '[`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow)
    does what it says on the tin, though you can also stack several of them for a
    rough approximation of a text outline.'
  id: totrans-split-327
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow)
    就像名字所说的那样，尽管您也可以堆叠几个以粗略近似文本轮廓。'
- en: '[`transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) lets
    you apply an arbitrary matrix transformation to an element — that is, you can
    scale, rotate, skew, translate, and/or do perspective transform, all without affecting layout.'
  id: totrans-split-328
  prefs: []
  type: TYPE_NORMAL
  zh: '[`transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) 允许您对元素应用任意矩阵变换
    — 您可以进行缩放、旋转、倾斜、平移和/或透视变换，而不会影响布局。'
- en: '[`filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/filter) (distinct
    from the IE 6 one) offers a handful of specific visual filters you can apply to
    an element. Most of them affect color, but there’s also a `blur()` and a `drop-shadow()`
    (which, unlike `box-shadow`, applies to an element’s appearance rather than its
    containing box).'
  id: totrans-split-329
  prefs: []
  type: TYPE_NORMAL
  zh: '[`filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/filter)（与 IE 6
    不同）提供了几种特定的视觉滤镜，可以应用于元素。大多数影响颜色，但也有`blur()`和`drop-shadow()`（与`box-shadow`不同，它适用于元素的外观而不是其包含框）。'
- en: '[`linear-gradient()`](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient),
    [`radial-gradient()`](https://developer.mozilla.org/en-US/docs/Web/CSS/radial-gradient),
    the new and less-supported [`conic-gradient()`](https://developer.mozilla.org/en-US/docs/Web/CSS/conic-gradient),
    and their `repeating-*` variants all produce gradient images and can be used anywhere
    in CSS that an image is expected, most commonly as a `background-image`.'
  id: totrans-split-330
  prefs: []
  type: TYPE_NORMAL
  zh: '[`linear-gradient()`](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient)、[`radial-gradient()`](https://developer.mozilla.org/en-US/docs/Web/CSS/radial-gradient)，以及新的支持较少的
    [`conic-gradient()`](https://developer.mozilla.org/en-US/docs/Web/CSS/conic-gradient)，以及它们的
    `repeating-*` 变体，都生成渐变图像，可以在 CSS 的任何需要图像的地方使用，最常见的是作为 `background-image`。'
- en: '[`scrollbar-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-color)
    changes the scrollbar color, with the downside of reducing the scrollbar to a
    very simple thumb-and-track in current browsers.'
  id: totrans-split-331
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scrollbar-color`](https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-color)
    可以改变滚动条的颜色，但当前浏览器的一个缺点是将滚动条简化为非常简单的拇指和轨道。'
- en: '[`background-size: cover` and `contain`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size)
    will scale a background image proportionally, either big enough to completely
    cover the element (even if cropped) or small enough to exactly fit inside it (even
    if it doesn’t cover the entire background).'
  id: totrans-split-332
  prefs: []
  type: TYPE_NORMAL
  zh: '[`background-size: cover` 和 `contain`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size)
    将按比例缩放背景图像，要么足够大以完全覆盖元素（即使被裁剪），要么足够小以确切地适合其中（即使不覆盖整个背景）。'
- en: '[`object-fit`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit)
    is a similar idea but for non-background media, like `<img>`s. The related [`object-position`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position)
    is like `background-position`.'
  id: totrans-split-333
  prefs: []
  type: TYPE_NORMAL
  zh: '[`object-fit`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit)
    是一个类似的概念，但适用于非背景媒体，如 `<img>`。相关的 [`object-position`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position)
    类似于 `background-position`。'
- en: Multiple backgrounds are possible, which is especially useful with gradients
    — you can stack multiple gradients, other background images, and a solid color
    on the bottom.
  id: totrans-split-334
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用多个背景，尤其是与渐变一起使用 —— 可以堆叠多个渐变、其他背景图像和底部的纯色。
- en: '[`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)
    is fancier than it used to be; you can now set the color of the line and use several
    different kinds of lines, including dashed, dotted, and wavy.'
  id: totrans-split-335
  prefs: []
  type: TYPE_NORMAL
  zh: '[`text-decoration`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)
    比以前更加精致；你现在可以设置线条的颜色并使用多种不同类型的线条，包括虚线、点线和波浪线。'
- en: '[CSS counters](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Lists_and_Counters/Using_CSS_counters)
    can be used to number arbitrary elements in an arbitrary way, exposing the counting
    ability of `<ol>` to any set of elements you want.'
  id: totrans-split-336
  prefs: []
  type: TYPE_NORMAL
  zh: '[CSS 计数器](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Lists_and_Counters/Using_CSS_counters)
    可以用来以任意方式对任意元素编号，将 `<ol>` 的计数能力暴露给任何你想要的元素集。'
- en: The [`::marker`](https://developer.mozilla.org/en-US/docs/Web/CSS/::marker)
    pseudo-element allows you to style a list item’s marker box, or even replace it
    outright with a custom counter. Browser support is spotty, but improving. Similarly,
    the [`@counter-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style)
    at-rule implements an entirely new counter style (like 1 2 3, i ii iii, A B C,
    etc.) which you can then use anywhere, though only Firefox supports it so far.
  id: totrans-split-337
  prefs: []
  type: TYPE_NORMAL
  zh: '[`::marker`](https://developer.mozilla.org/en-US/docs/Web/CSS/::marker) 伪元素允许你样式化列表项的标记框，甚至可以用自定义计数器完全替换它。浏览器支持不太稳定，但正在改进。类似地，[`@counter-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style)
    at-rule 实现了全新的计数样式（如 1 2 3、i ii iii、A B C 等），然后你可以在任何地方使用它，尽管目前只有 Firefox 支持。'
- en: '[`image-set()`](https://developer.mozilla.org/en-US/docs/Web/CSS/image-set)
    provides a list of candidate images and lets the browser choose the most appropriate
    one based on the pixel density of the user’s screen.'
  id: totrans-split-338
  prefs: []
  type: TYPE_NORMAL
  zh: '[`image-set()`](https://developer.mozilla.org/en-US/docs/Web/CSS/image-set)
    提供了候选图像列表，并根据用户屏幕的像素密度选择最合适的一个。'
- en: '[`@font-face`](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face)
    defines a font that can be downloaded, though you can avoid figuring out how to
    use it correctly by using [Google Fonts](https://developers.google.com/fonts/).'
  id: totrans-split-339
  prefs: []
  type: TYPE_NORMAL
  zh: '[`@font-face`](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face)
    定义了一个可下载的字体，虽然你可以通过使用 [Google Fonts](https://developers.google.com/fonts/) 避免弄清如何正确使用它。'
- en: '[`pointer-events: none`](https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events)
    makes an element ignore the mouse entirely; it can’t be hovered, and clicks will
    go straight through it to the element below.'
  id: totrans-split-340
  prefs: []
  type: TYPE_NORMAL
  zh: '[`pointer-events: none`](https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events)
    使元素完全忽略鼠标；它无法悬停，点击事件会直接穿过它传递到下面的元素。'
- en: '[`image-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering)
    can force an image to be resized nearest-neighbor rather than interpolated, though
    browser support is still spotty and you may need to also include some vendor-specific properties.'
  id: totrans-split-341
  prefs: []
  type: TYPE_NORMAL
  zh: '[`image-rendering`](https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering)
    可以强制图像使用最近邻插值法而不是插值处理，尽管浏览器支持仍不稳定，可能还需要包含一些特定厂商的属性。'
- en: '[`clip-path`](https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path) crops
    an element to an arbitrary shape. There’s also [`mask`](https://developer.mozilla.org/en-US/docs/Web/CSS/mask)
    for arbitrary alpha masking, but browser support is spotty and hoo boy is this
    one complicated.'
  id: totrans-split-342
  prefs: []
  type: TYPE_NORMAL
  zh: '[`clip-path`](https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path) 将元素裁剪为任意形状。还有
    [`mask`](https://developer.mozilla.org/en-US/docs/Web/CSS/mask) 用于任意Alpha蒙版，但浏览器支持参差不齐，而且这个功能非常复杂。'
- en: '[`@supports`](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports) lets
    you explicitly write different CSS depending on what the browser supports, though
    it’s nowhere near as useful nowadays as it would’ve been in 2004.'
  id: totrans-split-343
  prefs: []
  type: TYPE_NORMAL
  zh: '[`@supports`](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports) 允许您根据浏览器的支持情况明确地编写不同的CSS，尽管现在它不如2004年那样有用。'
- en: '`A > B` selects immediate children. `A ~ B` selects siblings. `A + B` selects
    immediate (element) siblings. Square brackets can do a [bunch of stuff](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors)
    to select based on attributes; most obvious is `input[type=checkbox]`, though
    you can also do interesting things with matching parts of `<a href>`.'
  id: totrans-split-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`A > B` 选择直接子元素。 `A ~ B` 选择兄弟元素。 `A + B` 选择直接（元素）兄弟。方括号可以根据属性选择 [许多内容](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors)；最明显的是
    `input[type=checkbox]`，尽管您还可以通过匹配 `<a href>` 的部分进行有趣的操作。'
- en: 'There are a whole bunch of pseudo-classes now. Many of them are for form elements:
    [`:enabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/:enabled) and [`:disabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/:disabled);
    [`:checked`](https://developer.mozilla.org/en-US/docs/Web/CSS/:checked) and [`:indeterminate`](https://developer.mozilla.org/en-US/docs/Web/CSS/:indeterminate)
    (also apply to radio and `<option>`); [`:required`](https://developer.mozilla.org/en-US/docs/Web/CSS/:required)
    and [`:optional`](https://developer.mozilla.org/en-US/docs/Web/CSS/:optional);
    [`:read-write`](https://developer.mozilla.org/en-US/docs/Web/CSS/:read-write)
    and [`:read-only`](https://developer.mozilla.org/en-US/docs/Web/CSS/:read-only);
    [`:in-range`](https://developer.mozilla.org/en-US/docs/Web/CSS/:in-range)/[`:out-of-range`](https://developer.mozilla.org/en-US/docs/Web/CSS/:out-of-range)
    and [`:valid`](https://developer.mozilla.org/en-US/docs/Web/CSS/:valid)/[`:invalid`](https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid)
    (for use with HTML5 client-side form validation); [`:focus`](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus)
    and [`:focus-within`](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-within);
    and [`:default`](https://developer.mozilla.org/en-US/docs/Web/CSS/:default) (which
    selects the default form button and any pre-selected checkboxes, radio buttons,
    and `<option>`s).'
  id: totrans-split-345
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有一大堆伪类。其中许多是针对表单元素的：[`:enabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/:enabled)
    和 [`:disabled`](https://developer.mozilla.org/en-US/docs/Web/CSS/:disabled); [`:checked`](https://developer.mozilla.org/en-US/docs/Web/CSS/:checked)
    和 [`:indeterminate`](https://developer.mozilla.org/en-US/docs/Web/CSS/:indeterminate)（也适用于单选按钮和
    `<option>`）; [`:required`](https://developer.mozilla.org/en-US/docs/Web/CSS/:required)
    和 [`:optional`](https://developer.mozilla.org/en-US/docs/Web/CSS/:optional); [`:read-write`](https://developer.mozilla.org/en-US/docs/Web/CSS/:read-write)
    和 [`:read-only`](https://developer.mozilla.org/en-US/docs/Web/CSS/:read-only);
    [`:in-range`](https://developer.mozilla.org/en-US/docs/Web/CSS/:in-range)/[`:out-of-range`](https://developer.mozilla.org/en-US/docs/Web/CSS/:out-of-range)
    和 [`:valid`](https://developer.mozilla.org/en-US/docs/Web/CSS/:valid)/[`:invalid`](https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid)（用于
    HTML5 客户端表单验证）; [`:focus`](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus)
    和 [`:focus-within`](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-within);
    以及 [`:default`](https://developer.mozilla.org/en-US/docs/Web/CSS/:default)（选择默认表单按钮和任何预选复选框、单选按钮和
    `<option>`）。
- en: 'For targeting specific elements within a set of siblings, we have: [`:first-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/:first-child),
    [`:last-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/:last-child),
    and [`:only-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/:only-child);
    [`:first-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/:first-of-type),
    [`:last-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/:last-of-type),
    and [`:only-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/:only-of-type)
    (where “type” means tag name); and [`:nth-child()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child),
    [`:nth-last-child()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-last-child),
    [`:nth-of-type()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-of-type),
    and [`:nth-last-of-type()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-last-of-type)
    (to select every second, third, etc. element).'
  id: totrans-split-346
  prefs: []
  type: TYPE_NORMAL
  zh: 用于定位兄弟元素中特定元素的选择器有：[`:first-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/:first-child)，[`:last-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/:last-child)，和
    [`:only-child`](https://developer.mozilla.org/en-US/docs/Web/CSS/:only-child);
    [`:first-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/:first-of-type)，[`:last-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/:last-of-type)，和
    [`:only-of-type`](https://developer.mozilla.org/en-US/docs/Web/CSS/:only-of-type)（其中“type”表示标签名）；以及
    [`:nth-child()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child)，[`:nth-last-child()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-last-child)，[`:nth-of-type()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-of-type)，和
    [`:nth-last-of-type()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-last-of-type)（用于选择每第二个、第三个等元素）。
- en: '[`:not()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:not) inverts a
    selector. [`:empty`](https://developer.mozilla.org/en-US/docs/Web/CSS/:empty)
    selects elements with no children and no text. [`:target`](https://developer.mozilla.org/en-US/docs/Web/CSS/:target)
    selects the element jumped to with a URL fragment (e.g. if the address bar shows
    `index.html#foo`, this selects the element whose ID is `foo`).'
  id: totrans-split-347
  prefs: []
  type: TYPE_NORMAL
  zh: '[`:not()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:not) 反转选择器。 [`:empty`](https://developer.mozilla.org/en-US/docs/Web/CSS/:empty)
    选择没有子元素和文本的元素。 [`:target`](https://developer.mozilla.org/en-US/docs/Web/CSS/:target)
    选择通过URL片段跳转到的元素（例如，如果地址栏显示 `index.html#foo`，则选择ID为 `foo` 的元素）。'
- en: '[`::before`](https://developer.mozilla.org/en-US/docs/Web/CSS/::before) and
    [`::after`](https://developer.mozilla.org/en-US/docs/Web/CSS/::after) should have
    two colons now, to indicate that they create pseudo-elements rather than merely
    scoping the selector they’re attached to. [`::selection`](https://developer.mozilla.org/en-US/docs/Web/CSS/::selection)
    customizes how selected text appears; [`::placeholder`](https://developer.mozilla.org/en-US/docs/Web/CSS/::placeholder)
    customizes how placeholder text (in text fields) appears.'
  id: totrans-split-348
  prefs: []
  type: TYPE_NORMAL
  zh: '[`::before`](https://developer.mozilla.org/en-US/docs/Web/CSS/::before) 和 [`::after`](https://developer.mozilla.org/en-US/docs/Web/CSS/::after)
    现在应该使用两个冒号，表示它们创建伪元素，而不仅仅是作用于附加的选择器。 [`::selection`](https://developer.mozilla.org/en-US/docs/Web/CSS/::selection)
    自定义选定文本的外观； [`::placeholder`](https://developer.mozilla.org/en-US/docs/Web/CSS/::placeholder)
    自定义占位文本（在文本字段中）的外观。'
- en: '[Media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/@media) do
    just a whole bunch of stuff so your page can adapt based on how it’s being viewed.
    The [`prefers-color-scheme`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme)
    media query tells you if the user’s system is set to a light or dark theme, so
    you can adjust accordingly without having to ask.'
  id: totrans-split-349
  prefs: []
  type: TYPE_NORMAL
  zh: '[媒体查询](https://developer.mozilla.org/en-US/docs/Web/CSS/@media)可以根据页面的查看方式进行适应，执行各种操作。[`prefers-color-scheme`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme)
    媒体查询会告诉您用户系统是设置为浅色主题还是深色主题，因此您可以相应地调整而无需询问。'
- en: You can write translucent [colors](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)
    as `#rrggbbaa` or `#rgba`, as well as using the `rgba()` and `hsla()` functions.
  id: totrans-split-350
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将半透明的[颜色](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)表示为`#rrggbbaa`或`#rgba`，也可以使用`rgba()`和`hsla()`函数。
- en: '[Angles](https://developer.mozilla.org/en-US/docs/Web/CSS/angle) can be described
    as fractions of a full circle with the `turn` unit. Of course, `deg` and `rad`
    (and `grad`) are also available.'
  id: totrans-split-351
  prefs: []
  type: TYPE_NORMAL
  zh: 角度可以用`turn`单位描述为一个完整圆的分数。当然，也可以使用`deg`和`rad`（以及`grad`）。
- en: '[CSS variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)
    (officially, “custom properties”) let you specify arbitrary named values that
    can be used anywhere a value would appear. You can use this to reduce the amount
    of CSS fiddling needs doing in JavaScript (e.g., recolor a complex part of a page
    by setting a CSS variable instead of manually adjusting a number of properties),
    or have a generic component that reacts to variables set by an ancestor.'
  id: totrans-split-352
  prefs: []
  type: TYPE_NORMAL
  zh: '[CSS 变量](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)（官方称为“自定义属性”）允许你指定任意命名的值，可以在任何需要值的地方使用。你可以使用这个功能在
    JavaScript 中减少 CSS 调整（例如，通过设置 CSS 变量而不是手动调整多个属性来重新着色页面的复杂部分），或者拥有一个通用组件，该组件会根据祖先设置的变量做出反应。'
- en: '[`calc()`](https://developer.mozilla.org/en-US/docs/Web/CSS/calc) computes
    an arbitrary expression and updates automatically (though it’s somewhat obviated
    by `box-sizing`).'
  id: totrans-split-353
  prefs: []
  type: TYPE_NORMAL
  zh: '[`calc()`](https://developer.mozilla.org/en-US/docs/Web/CSS/calc) 计算任意表达式并自动更新（尽管
    `box-sizing` 有点重复它）。'
- en: The [`vw`, `vh`, `vmin`, and `vmax` units](https://developer.mozilla.org/en-US/docs/Web/CSS/length)
    let you specify lengths as a fraction of the viewport’s width or height, or whichever
    of the two is bigger/smaller.
  id: totrans-split-354
  prefs: []
  type: TYPE_NORMAL
  zh: '[`vw`, `vh`, `vmin` 和 `vmax` 单位](https://developer.mozilla.org/en-US/docs/Web/CSS/length)
    允许你将长度指定为视口宽度或高度的一部分，或者两者中较大/较小的那个。'
- en: '* * *'
  id: totrans-split-355
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Phew! I’m sure I’m forgetting plenty and folks will have even longer lists of
    interesting tidbits in the comments. Thanks for saving me some effort! Now I can
    stop browsing MDN and do this final fun part.
  id: totrans-split-356
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，我确定我遗漏了很多内容，大家在评论中可能有更长的有趣小贴士列表。感谢你帮我节省了一些努力！现在我可以停止浏览 MDN，做这最后有趣的部分。
- en: 'At long last, we arrive at the final and objectively correct way to construct
    a thumbnail grid: using [CSS grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout).
    You can tell this is the right thing to use because it has “grid” in the name.
    Modern CSS features are pretty great about letting you say the thing you want
    and having it happen, rather than trying to coax it into happening implicitly
    via voodoo.'
  id: totrans-split-357
  prefs: []
  type: TYPE_NORMAL
  zh: 终于，我们来到构建缩略图网格的最终且客观正确的方式：使用 [CSS 网格](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)。你可以确定这是正确的选择，因为名字里有“grid”。现代
    CSS 功能非常棒，让你说出你想要的事情，然后它就会发生，而不是试图通过巫术来间接发生。
- en: 'And it is oh so simple:'
  id: totrans-split-358
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，这很简单：
- en: '|  |'
  id: totrans-split-359
  prefs: []
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE23]'
  id: totrans-split-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '|'
  id: totrans-split-361
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Done! That [gives you a grid](https://eev.ee/media/2020-02-css/thumbnail-grids.html#grid).
    You have myriad other twiddles to play with, just as with flexbox, but that’s
    the basic idea. You don’t even need to style the elements themselves; most of
    the layout work is done in the container.
  id: totrans-split-362
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！这样就给你一个[网格](https://eev.ee/media/2020-02-css/thumbnail-grids.html#grid)。你有无数其他小技巧可以使用，就像
    flexbox 一样，但基本思想是一样的。你甚至不需要为元素本身设置样式；大部分布局工作都在容器中完成。
- en: 'The [`grid` shorthand property](https://developer.mozilla.org/en-US/docs/Web/CSS/grid)
    looks a little intimidating, but only because it’s so flexible. It’s saying: fill
    the grid one row at a time, generating as many rows as necessary; make as many
    250px columns as will fit, and share any leftover space between them equally.'
  id: totrans-split-363
  prefs: []
  type: TYPE_NORMAL
  zh: '[`grid` 缩写属性](https://developer.mozilla.org/en-US/docs/Web/CSS/grid) 看起来有点吓人，但只是因为它非常灵活。它的意思是：一行一行填充网格，生成所需数量的行；创建尽可能多的
    250px 宽度列，并平均分配剩余的空间。'
- en: CSS grids are also handy for laying out `<dl>`s, something that’s historically
    been a massive pain to make work — a `<dl>` contains any number of `<dt>`s followed
    by any number of `<dd>`s (including zero), and the only way to style this until
    grid was to float the `<dt>`s, which meant they had to have a fixed width. Now
    you can just tell the `<dt>`s to go in the first column and `<dd>`s to go in the
    second, and grid will take care of the rest.
  id: totrans-split-364
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 网格对布局 `<dl>` 非常方便，历史上制作这个东西非常痛苦——一个 `<dl>` 包含任意数量的 `<dt>`，后面跟任意数量的 `<dd>`（包括零个），直到出现网格之前唯一的样式方式是浮动
    `<dt>`，这意味着它们必须有固定的宽度。现在你可以告诉 `<dt>` 放在第一列，`<dd>` 放在第二列，网格会处理其余的部分。
- en: 'And laying out your page? That whole sidebar thing? Check out how easy that is:'
  id: totrans-split-365
  prefs: []
  type: TYPE_NORMAL
  zh: 对页面进行布局？整个侧边栏的事情？看看这是多么简单：
- en: '|'
  id: totrans-split-366
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE24]'
  id: totrans-split-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '|'
  id: totrans-split-368
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE25]'
  id: totrans-split-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '|'
  id: totrans-split-370
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Done. Easy. It doesn’t matter what order the parts appear in the markup, either.
  id: totrans-split-371
  prefs: []
  type: TYPE_NORMAL
  zh: 完成。简单。标记中出现部分的顺序都不重要。
- en: The web is still a *little bit* of a disaster. A lot of folks don’t even know
    that flexbox and grid are supported [almost universally](https://www.caniuse.com/#feat=css-grid)
    now; but given how long it took to get from early spec work to broad implementation,
    I can’t really blame them. I saw a brand new little site just yesterday that consisted
    mostly of a huge list of “thumbnails” of various widths, and it used floats! Not
    even `inline-block`! I don’t know how we managed to teach everyone about all the
    hacks required to make that work, but somehow haven’t gotten the word out about flexbox.
  id: totrans-split-372
  prefs: []
  type: TYPE_NORMAL
  zh: '网页仍然*有点*混乱。很多人甚至不知道flexbox和grid现在已经几乎是[普遍支持的](https://www.caniuse.com/#feat=css-grid)，但考虑到从早期规范工作到广泛实施花了多长时间，我也不能完全责怪他们。昨天我看到一个全新的小网站，主要是一个巨大的各种宽度“缩略图”列表，并且它使用的是浮动布局！甚至不是`inline-block`！我不知道我们是如何设法教导每个人如何使用所有必要的技巧来使其工作的，但却无法普及flexbox的。  '
- en: 'But far worse than that: I still regularly encounter sites that do their entire
    page layout with *JavaScript*. If you use [uMatrix](https://addons.mozilla.org/en-US/firefox/addon/umatrix/),
    your first experience is with a pile of text overlapping a pile of other text.
    Surely this is a step backwards? What are you possibly doing that your header
    and sidebar can only be laid out correctly by executing code? It’s not like the
    page loads with *no* CSS — nothing in plain HTML will overlap by default! You
    have to tell it to do that!'
  id: totrans-split-373
  prefs: []
  type: TYPE_NORMAL
  zh: 但比这更糟糕的是：我仍然经常遇到使用*JavaScript*来完成整个页面布局的网站。如果你使用[uMatrix](https://addons.mozilla.org/en-US/firefox/addon/umatrix/)，你的第一印象是一堆文本重叠在另一堆文本上。这肯定是一种倒退吧？你到底在做什么，让你的页眉和侧边栏只能通过执行代码才能正确布局？这不像页面加载时*没有*CSS
    —— 没有纯HTML中的东西会默认重叠！你必须告诉它去做这些！
- en: And then there’s the mobile web, which despite everyone’s good intentions, has
    kind of turned out to be a failure. The idea was that you could use CSS media
    queries to fit your normal site on a phone screen, but instead, most major sites
    have entirely separate mobile versions. Which means that either the mobile site
    is missing a bunch of important features and I’ll have to awkwardly navigate that
    on my phone anyway, or the desktop site is full of crap that nobody actually needs.
  id: totrans-split-374
  prefs: []
  type: TYPE_NORMAL
  zh: 还有移动网络，尽管每个人的良好意图，但似乎已经失败了。最初的想法是使用CSS媒体查询将正常的网站适应手机屏幕，但大多数主要网站都有完全独立的移动版本。这意味着移动网站要么缺少一些重要功能，我仍然需要在手机上笨拙地导航，要么桌面网站充满了没人真正需要的垃圾。
- en: (Meanwhile, Google’s own Android versions of Docs/Sheets/etc. have, like, 5%
    of the features of the Web versions? Not sure what to make of that.)
  id: totrans-split-375
  prefs: []
  type: TYPE_NORMAL
  zh: （同时，Google自己的Android版本的Docs/Sheets等，像是网页版的功能的5%？不太清楚怎么看这个。）
- en: Hmm. Strongly considering writing something that goes more into detail about
    improvements to CSS since the Firefox 3 era, similar to [the one I wrote for JavaScript](https://eev.ee/blog/2017/10/07/javascript-got-better-while-i-wasnt-looking/).
    But this post is long enough.
  id: totrans-split-376
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯。强烈考虑写点东西，更详细地讲述自Firefox 3时代以来CSS改进的事情，类似于[我为JavaScript写的那篇文章](https://eev.ee/blog/2017/10/07/javascript-got-better-while-i-wasnt-looking/)。但这篇文章已经够长了。
- en: I don’t know what’s coming next in CSS, especially now that flexbox and grid
    have solved all our problems. I’m vaguely aware of some work being done on more
    extensive math support, and possibly some functions for altering colors like in
    Sass. There’s a [painting API](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API)
    that lets you generate backgrounds on the fly with JavaScript using the canvas
    API, which is… quite something. Apparently it’s now in spec that you can use [`attr()`](https://developer.mozilla.org/en-US/docs/Web/CSS/attr)
    (which evaluates to the value of an HTML attribute) as the value for any property,
    which seems cool and might even let you implement HTML tables entirely in CSS,
    but you could do the same thing with variables. I mean, um, custom properties.
    I’m more excited about [`:is()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:is),
    which matches any of a list of selectors, and [subgrid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid),
    which lets you add some nesting to a grid but keep grandchildren still aligned
    to it.
  id: totrans-split-377
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道 CSS 中接下来会发生什么，特别是现在 flexbox 和 grid 已经解决了我们所有的问题。我模糊地意识到一些更深入的数学支持正在进行中，可能还有一些类似
    Sass 中颜色修改的函数。有一个 [painting API](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API)
    允许你使用 canvas API 动态生成背景，这是…相当了不起。显然现在规范中允许你使用 [`attr()`](https://developer.mozilla.org/en-US/docs/Web/CSS/attr)（它计算为
    HTML 属性的值）作为任何属性的值，这看起来很酷，甚至可能让你完全用 CSS 实现 HTML 表格，但你也可以用变量来做同样的事情。我是说，嗯，自定义属性。我对
    [`:is()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:is) 很感兴趣，它匹配任何选择器列表中的一个，以及
    [subgrid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid)，它允许你向网格添加一些嵌套，但保持子元素仍然对齐于它。
- en: Much easier is to list some things that *were* the future, but fizzled out.
  id: totrans-split-378
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出一些本来是未来趋势但却失败了的事情要容易得多。
- en: '[`display: run-in`](https://developer.mozilla.org/en-US/docs/Web/CSS/display)
    has been part of CSS since version 2 (way back in ‘98), but it’s basically unsupported.
    The idea is that a “run-in” box is inserted, inline, into the next block, so this:'
  id: totrans-split-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`display: run-in`](https://developer.mozilla.org/en-US/docs/Web/CSS/display)
    自 CSS 版本 2（早在 ''98 年）就存在，但基本上不被支持。这个想法是一个“run-in”框被插入，内联地，到下一个块中，所以像这样：'
- en: '|  |'
  id: totrans-split-380
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE26]'
  id: totrans-split-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '|'
  id: totrans-split-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'displays like this:'
  id: totrans-split-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 显示如下：
- en: '**Title** Paragraph'
  id: totrans-split-384
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**标题** 段落'
- en: Paragraph
  id: totrans-split-385
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 段落
- en: And, ah, hm, I’m starting to see why it’s unsupported. It *used* to exist in
    WebKit, but was apparently so unworkable as to be removed six years ago.
  id: totrans-split-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 啊，嗯，我开始明白为什么它不被支持了。它*曾经*存在于 WebKit 中，但显然是如此不可行以至于六年前被移除了。
- en: “Alternate stylesheets” were popular in the early 00s, at least on a few of
    my friends’ websites. The idea was that you could list *more than one* stylesheet
    for your site (presumably for different themes), and the browser would give the
    user a list of them. Alas, that list was always squirrelled away in a menu with
    no obvious indication of when it was actually populated, so in the end, everyone
    who wanted multiple themes just implemented an in-page theme switcher themselves.
  id: totrans-split-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “替代样式表” 在 00 年代初非常流行，至少在我几个朋友的网站上是这样。这个想法是你可以为你的网站列出*多个*样式表（大概是为了不同的主题），然后浏览器会给用户一个列表。可惜的是，这个列表总是藏在一个菜单中，没有明显的指示何时实际上被填充，因此最后，所有希望有多个主题的人只好自己实现页面内的主题切换器。
- en: This feature is [still supported](https://developer.mozilla.org/en-US/docs/Web/CSS/Alternative_style_sheets),
    but apparently Chrome never bothered implementing it, so it’s effectively dead.
  id: totrans-split-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个功能 [仍然支持](https://developer.mozilla.org/en-US/docs/Web/CSS/Alternative_style_sheets)，但显然
    Chrome 从未费心去实现它，因此它实际上已经死了。
- en: More generally, the original CSS spec clearly expects users to be able to write
    their own CSS for a website — right in paragraph 2 it says
  id: totrans-split-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更一般地说，原始的 CSS 规范显然期望用户能够为网站编写他们自己的 CSS — 在第二段中明确地说
- en: …the reader may have a personal style sheet to adjust for human or technological handicaps.
  id: totrans-split-390
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: …读者可以有一个个人样式表来调整人类或技术上的障碍。
- en: Hey, that sounds cool. But it never materialized as a browser feature. Firefox
    has [`userContent.css`](http://kb.mozillazine.org/UserContent.css) and some URL
    selectors for writing per-site rules, but that’s relatively obscure.
  id: totrans-split-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 嘿，听起来很酷。但它从未作为浏览器功能实现。Firefox 有 [`userContent.css`](http://kb.mozillazine.org/UserContent.css)
    和一些 URL 选择器用于编写每个站点的规则，但相对较为晦涩。
- en: Still, there’s clearly demand for the concept, as evidenced by the popularity
    of the Stylish extension — which does just this. (Too bad it was [bought by some
    chucklefucks who started using it to suck up browser data to sell to advertisers](https://robertheaton.com/2018/07/02/stylish-browser-extension-steals-your-internet-history/).
    Use [Stylus](https://addons.mozilla.org/en-US/firefox/addon/styl-us/) instead.)
  id: totrans-split-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仍然显然有对这个概念的需求，正如Stylish扩展的流行所证明的那样 —— 它正是这样做的（太糟糕了，它被一些蠢货买走，开始用它来窃取浏览器数据并出售给广告商）。改用[Stylus](https://addons.mozilla.org/en-US/firefox/addon/styl-us/)。
- en: 'A common problem (well, for me) is that of styling the *label* for a checkbox,
    depending on its state. Styling the checkbox itself is easy enough with the `:checked`
    pseudo-selector. But if you arrange a checkbox and its label in the obvious way:'
  id: totrans-split-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对我来说，一个常见的问题是，根据复选框的状态为其*标签*设置样式。使用`:checked`伪选择器很容易为复选框本身添加样式。但如果你按照显而易见的方式布置复选框和其标签：
- en: '|  |'
  id: totrans-split-394
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE27]'
  id: totrans-split-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '|'
  id: totrans-split-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '…then CSS has no way to target either the `<label>` element or the text node.
    jQuery’s (originally custom) selector engine offered a custom `:has()` pseudo-class,
    which could be used to express this:'
  id: totrans-split-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: …然后CSS没有办法同时定位到`<label>`元素或文本节点。jQuery的（最初是自定义的）选择器引擎提供了一个自定义的`:has()`伪类，可以用来表达这一点：
- en: '|  |'
  id: totrans-split-398
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE28]'
  id: totrans-split-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '|'
  id: totrans-split-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'Early CSS 3 selector discussions seemingly wanted to avoid this, I guess for
    performance reasons? The somewhat novel alternative was to write out the entire
    selector, but be able to alter which part of it the rules affected with a “subject”
    indicator. At first this was a pseudo-class:'
  id: totrans-split-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 早期CSS 3选择器讨论显然想避免这种情况，我想是出于性能原因？一种略显新颖的替代方案是完整地写出整个选择器，但可以用“subject”指示符改变规则影响的部分。起初这是一个伪类：
- en: '|  |'
  id: totrans-split-402
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE29]'
  id: totrans-split-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '|'
  id: totrans-split-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'Then later, they introduced a `!` prefix instead:'
  id: totrans-split-405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 后来，他们引入了一个`!`前缀：
- en: '|  |'
  id: totrans-split-406
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '|  |'
- en: '[PRE30]'
  id: totrans-split-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '|'
  id: totrans-split-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: Thankfully, this was decided to be a bad idea, so the current specced way to
    do this is… [`:has()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:has)!
    Unfortunately, it’s only allowed when querying from JavaScript, not in a live
    stylesheet, and nothing implements it anyway. 20 years and I’m still waiting for
    a way to style checkbox labels.
  id: totrans-split-409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 幸运的是，这被认为是一个坏主意，所以当前规范化的方法是……[`:has()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:has)!
    不幸的是，它只允许在JavaScript中查询时使用，并且无论如何都没有实现。20年过去了，我仍在等待一种方法来为复选框的标签设置样式。
- en: '`<style scoped>` was an attribute that would’ve made a `<style>` element’s
    CSS rules only apply to other elements within its immediate parent, meaning you
    could drop in arbitrary (possibly user-written) CSS without any risk of affecting
    the rest of the page. Alas, this was quietly dropped some time ago, with shadow
    DOM suggested as a wildly inappropriate replacement.'
  id: totrans-split-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<style scoped>`是一个属性，本来可以使`<style>`元素的CSS规则只适用于其直接父元素内的其他元素，这意味着您可以插入任意（可能是用户编写的）CSS而不会影响页面的其他部分。唉，这些已经在一段时间前悄悄地被取消了，而shadow
    DOM则被建议作为一个极其不合适的替代品。'
- en: I seem to recall that when I first heard about [Web components](https://developer.mozilla.org/en-US/docs/Web/Web_Components),
    they were templates you could use to reduce duplication in pure HTML? But I can’t
    find any trace of that concept now, and the current implementations require JavaScript
    to define them, so there’s nothing declarative linking a new tag to its implementation.
    Which makes them completely unusable for anything that doesn’t have a compelling
    reason to rely on JS. Alas.
  id: totrans-split-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我记得当我第一次听说[Web components](https://developer.mozilla.org/en-US/docs/Web/Web_Components)时，它们是你可以使用的模板，用于减少纯HTML中的重复？但现在我找不到这个概念的任何踪迹，当前的实现需要JavaScript来定义它们，所以没有什么声明性的东西将一个新标签链接到它的实现。这使得它们对于任何没有充分理由依赖JS的东西来说完全无法使用。唉。
- en: '`<blink>` and `<marquee>`. RIP. Though both can be easily replicated with CSS animations.'
  id: totrans-split-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<blink>`和`<marquee>`。安息吧。虽然两者都可以很容易地用CSS动画复制。'
- en: You’re still here? It’s over. Go home.
  id: totrans-split-413
  prefs: []
  type: TYPE_NORMAL
  zh: 你还在这里？结束了。回家吧。
- en: And maybe push back against Blink monoculture and use [Firefox](https://www.mozilla.org/en-US/firefox/),
    including [on your phone](https://www.mozilla.org/en-US/firefox/mobile/), unless
    for some reason you use an iPhone, which forbids other browser engines, which
    is far worse than anything Microsoft ever did, but we just kinda accept it for
    some reason.
  id: totrans-split-414
  prefs: []
  type: TYPE_NORMAL
  zh: 并且也许抵制Blink单一文化，使用[Firefox](https://www.mozilla.org/en-US/firefox/)，包括[在你的手机上](https://www.mozilla.org/en-US/firefox/mobile/)，除非你使用iPhone，它禁止其他浏览器引擎，这比微软曾经做过的任何事情更糟糕，但我们只是某种原因接受了它。
