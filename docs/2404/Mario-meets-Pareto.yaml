- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 12:53:55'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Mario meets Pareto
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.mayerowitz.io/blog/mario-meets-pareto](https://www.mayerowitz.io/blog/mario-meets-pareto)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We've had a bit of fun here, but don't you see the pattern? We're often faced
    with similar trade-offs. You want a [meal that's both cheap and delicious](https://en.wikipedia.org/wiki/Noodle_soup)?
    A job that's both well-paid, easy, and fulfilling? [A portfolio with low risks
    and high returns](https://en.wikipedia.org/wiki/Modern_portfolio_theory)? A flexible
    and strong material that's also easy to produce? [A fair taxation that remains
    efficient](https://academic.oup.com/restud/article-abstract/38/2/175/1527903)
    ? [A high quality LLM that is also fast and cost-efficient](https://artificialanalysis.ai/#summary).
    In all these cases, you're facing a multi-objective optimization problem, and
    you have to make trade-offs.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, if you already know the exact weights you want to assign to each
    dimension (i.e., you know your utility function), you reduce the problem to a
    single objective optimization. This is because you can combine the dimensions
    with the weights into a single quantity to optimize (often called utility, cost,
    or fitness). In that case, you don't need Pareto at all.
  prefs: []
  type: TYPE_NORMAL
- en: But you're often faced with situations where your utility function is unknown
    or uncertain. In those situations, the Pareto front helps you eliminate objectively
    all the sub-optimal options. It won't reveal the one best option right from the
    outset, but you may now experiment with these efficient options and select the
    one that fits you the best.
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I've made some simplifying assumptions in this article to keep it readable for
    a large audience. In truth, the statistics that I presented are translated into
    derived in-game stats that are not always linear with the base statistics. Additionally,
    there are 4 speed stats and 4 handling stats for all gears (except for the driver),
    but I decided to simply average those. I've also completely hidden the functional
    form of the utility function, which can play a great role. To get access to more
    details behind this article or if you just like my work and want to see more in
    the future, please consider [donating some coins](https://ko-fi.com/antoinemayerowitz).
  prefs: []
  type: TYPE_NORMAL
- en: Credits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Super Mario Wiki [Mario Kart 8 Deluxe in-game statistics](https://www.mariowiki.com/Mario_Kart_8_Deluxe_in-game_statistics)
  prefs: []
  type: TYPE_NORMAL
- en: Henry H. [Mario Kart and the Pareto Frontier](https://hinnefe2.github.io/python/tools/2015/09/21/mario-kart.html),
    2015
  prefs: []
  type: TYPE_NORMAL
