- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:40:13'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:40:13'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Crash-only software: More than meets the eye [LWN.net]'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 崩溃重启软件：超乎寻常的优点 [LWN.net]
- en: 来源：[https://lwn.net/Articles/191059/](https://lwn.net/Articles/191059/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://lwn.net/Articles/191059/](https://lwn.net/Articles/191059/)
- en: '| **This article brought to you by LWN subscribers**Subscribers to LWN.net
    made this article — and everything that surrounds it — possible. If you appreciate
    our content, please [buy a subscription](/subscribe/) and make the next set of
    articles possible. |'
  id: totrans-split-6
  prefs: []
  type: TYPE_TB
  zh: '| **本文由 LWN 订阅者提供**LWN.net 的订阅者们使本文及其周围的一切成为可能。如果您喜欢我们的内容，请[订阅](/subscribe/)并支持下一组文章的编写。
    |'
- en: July 12, 2006
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: July 12, 2006
- en: This article was contributed by Valerie Aurora
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章由 Valerie Aurora 贡献
- en: Next time your Linux laptop crashes, pull out your watch (or your cell phone)
    and time how long it takes to boot up. More than likely, you're running a journaling
    file system, and not only did your system boot up quickly, but it didn't lose
    any data that you cared about. (Maybe you lost the last few bytes of your DHCP
    client's log file, darn.) Now, keep your timekeeping device of choice handy and
    execute a normal shutdown and reboot. More than likely, you will find that it
    took longer to reboot "normally" than it did to crash your system and recover
    it - and for no perceivable benefit.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 下次你的 Linux 笔记本电脑崩溃时，拿出你的手表（或手机）计时，看看它重启需要多长时间。很可能你正在使用日志文件系统，不仅系统启动快速，而且没有丢失你关心的任何数据。（也许你丢失了
    DHCP 客户端日志文件的最后几个字节，真遗憾。）现在，保持你选择的计时设备随身，并执行正常关闭和重启。很可能你会发现，正常“正常”重启所需的时间比崩溃系统并恢复它要长
    - 而且没有可感知的好处。
- en: 'George Candea and Armando Fox noticed that, counter-intuitively, many software
    systems can crash and recover more quickly than they can be shutdown and restarted.
    They reported the following measurements in their paper, [Crash-only Software](http://www.usenix.org/events/hotos03/tech/candea.html)
    (published in [Hot Topics in Operating Systems IX](http://www.usenix.org/events/hotos03/)
    in 2003):'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: George Candea 和 Armando Fox 发现，与直觉相反，许多软件系统可以比关闭和重新启动更快地崩溃和恢复。他们在他们的论文中报告了以下测量数据，[Crash-only
    Software](http://www.usenix.org/events/hotos03/tech/candea.html)（发表于 [操作系统热门话题
    IX](http://www.usenix.org/events/hotos03/)，2003 年）：
- en: '| System | Clean reboot | Crash reboot | Speedup |'
  id: totrans-split-11
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 系统 | 清洁重启 | 崩溃重启 | 加速 |'
- en: '| RedHat 8 (ext3) | 104 sec | 75 sec | 1.4x |'
  id: totrans-split-12
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| RedHat 8（ext3） | 104 秒 | 75 秒 | 1.4x |'
- en: '| JBoss 3.0 app server | 47 sec | 39 sec | 1.2x |'
  id: totrans-split-13
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| JBoss 3.0 应用服务器 | 47 秒 | 39 秒 | 1.2x |'
- en: '| Windows XP | 61 sec | 48 sec | 1.3x |'
  id: totrans-split-14
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| Windows XP | 61 秒 | 48 秒 | 1.3x |'
- en: In their experiments, no important data was lost. This is not surprising as,
    after all, good software is designed to safely handle crashes. Software that loses
    or ruins your data when it crashes isn't very popular in today's computing environment
    - remember how frustrating it was to use word processors without an auto-save
    feature? What is surprising is that most systems have two methods of shutting
    down - cleanly or by crashing - and two methods of starting up - normal start
    up or recovery - and that frequently the crash/recover method is, by all objective
    measures, a better choice. Given this, why support the extra code (and associated
    bugs) to do a clean start up and shutdown? In other words, why should I ever type
    "halt" instead of hitting the power button?
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在他们的实验中，没有丢失重要数据。这并不奇怪，因为好的软件设计能够安全处理崩溃。在今天的计算环境中，当软件崩溃时丢失或破坏数据并不受欢迎 - 还记得没有自动保存功能的文字处理器是多么令人沮丧吗？令人惊讶的是，大多数系统有两种关闭方法
    - 清洁关闭或崩溃关闭 - 和两种启动方法 - 正常启动或恢复启动 - 并且经常情况下，崩溃/恢复方法从所有客观标准来看是更好的选择。鉴于此，为什么要支持额外的代码（及相关的错误）来进行清洁启动和关闭呢？换句话说，为什么我要输入"halt"而不是按下电源按钮呢？
- en: 'The main reason to support explicit shutdown and start-up is simple: performance.
    Often, designers must trade off higher steady state performance (when the application
    is running normally) with performance during a restart - and with acceptable data
    loss. File systems are a good example of this trade-off: ext2 runs very quickly
    while in use but takes a long time to recover and makes no guarantees about when
    data hits disk, while ext3 has somewhat lower performance while in use but is
    very quick to recover and makes explicit guarantees about when data hits disk.
    When overall system availability and acceptable data loss in the event of a crash
    are factored into the performance equation, ext3 or any other journaling file
    system is the winner for many systems, including, more than likely, the laptop
    you are using to read this article.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 支持显式关闭和启动的主要原因很简单：性能。通常，设计者必须在高稳态性能（应用程序正常运行时）和重新启动期间的性能（以及可接受的数据丢失）之间进行权衡。文件系统是这种权衡的一个很好的例子：ext2在使用时运行非常快，但是恢复时间长，并且不能保证数据何时写入磁盘；而ext3在使用时性能略低，但是非常快速恢复，并且明确保证数据何时写入磁盘。当考虑到整个系统的可用性和在崩溃事件中的可接受数据丢失时，对于许多系统，包括您用来阅读本文的笔记本电脑，ext3或任何其他日志文件系统都是更好的选择。
- en: Crash-only software is software that crashes safely and recovers quickly. The
    only way to stop it is to crash it, and the only way to start it is to recover.
    A crash-only system is composed of crash-only components which communicate with
    retryable requests; faults are handled by crashing and restarting the faulty component
    and retrying any requests which have timed out. The resulting system is often
    more robust and reliable because crash recovery is a first-class citizen in the
    development process, rather than an afterthought, and you no longer need the extra
    code (and associated interfaces and bugs) for explicit shutdown. All software
    ought to be able to crash safely and recover quickly, but crash-only software
    must have these qualities, or their lack becomes quickly evident.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: Crash-only software是一种能够安全崩溃并快速恢复的软件。唯一停止它的方式是崩溃，而唯一启动它的方式是恢复。崩溃仅系统由崩溃仅组件组成，这些组件通过可重试请求进行通信；故障通过崩溃和重新启动有故障组件并重试任何已超时的请求来处理。由此产生的系统通常更加健壮和可靠，因为崩溃恢复在开发过程中是一个一流的公民，而不是一个事后的想法，并且你不再需要额外的代码（以及相关接口和错误）来进行显式关闭。所有软件都应该能够安全崩溃并快速恢复，但是崩溃仅软件必须具备这些特质，否则它们的缺失会很快显现出来。
- en: The concept of crash-only software has received quite a lot of attention since
    its publication. Besides several well-received research papers demonstrating useful
    implementations of crash-only software, crash-only software has been covered in
    several popular articles in publications as diverse as Scientific American, Salon.com,
    and CIO Today. It was cited as one of the reasons Armando Fox was named one of
    Scientific American's list of top 50 scientists for 2003 and George Candea as
    one of MIT Technology Review's Top 35 Young Innovators for 2005\. Crash-only software
    has made its mark outside the press room as well; for example, Google's distributed
    file system, GoogleFS, is implemented as crash-only software, all the way through
    to the metadata server. The term "crash-only" is now regularly bandied about in
    design discussions for production software. I myself wrote a [blog entry on crash-only
    software](http://blogs.sun.com/roller/page/val?entry=is_b_your_b_software) back
    in 2004\. Why bother writing about it again? Quite simply, the crash-only software
    meme became so popular that, inevitably, mutations arose and flourished, sometimes
    to the detriment of allegedly crash-only software systems. In this article, we
    will review some of the more common misunderstandings about designing and implementing
    crash-only software.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 自其发布以来，崩溃仅软件的概念引起了相当多的关注。除了几篇受欢迎的研究论文展示了崩溃仅软件的有用实现外，崩溃仅软件还被多个流行出版物如《科学美国人》、Salon.com和CIO
    Today所报道。例如，崩溃仅软件之一的Google分布式文件系统GoogleFS是作为崩溃仅软件实现的，一直到元数据服务器。现在，“崩溃仅”这个术语在生产软件的设计讨论中经常被使用。2004年，我本人就曾在[崩溃仅软件的博客条目](http://blogs.sun.com/roller/page/val?entry=is_b_your_b_software)中写道。为什么还要再次写这篇文章？简而言之，崩溃仅软件这一概念变得如此流行，以至于不可避免地出现了变异，并且有时损害了所谓的崩溃仅软件系统。在本文中，我们将审视一些关于设计和实施崩溃仅软件的更常见的误解。
- en: Misconceptions about crash-only software
  id: totrans-split-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于崩溃-重启软件的误解
- en: 'The first major misunderstanding is that crash-only software is a form of free
    lunch: you can be lazy and not write shutdown code, not handle errors (just crash
    it! whee!), or not save state. Just pull up your favorite application in an editor,
    delete the code for normal start up and shutdown, and voila! instant crash-only
    software. In fact, crash-only software involves greater discipline and more careful
    design, because if your checkpointing and recovery code doesn''t work, you will
    find out right away. Crash-only design helps you produce more robust, reliable
    software, it doesn''t exempt you from writing robust, reliable software in the
    first place.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个主要误解是，崩溃-重启软件是一种免费午餐：你可以懒惰地不编写关闭代码，不处理错误（只需崩溃它！嘿！），或者不保存状态。只需在编辑器中打开你最喜欢的应用程序，删除正常启动和关闭的代码，嘿！瞬间就变成了崩溃-重启软件。事实上，崩溃-重启软件需要更大的纪律和更谨慎的设计，因为如果你的检查点和恢复代码不起作用，你会立即发现问题。崩溃-重启设计帮助你产生更加健壮、可靠的软件，但并不意味着你可以不用首先编写健壮、可靠的软件。
- en: Another mistake is overuse of the crash/restart "hammer." One of the ideas in
    crash-only software is that if a component is behaving strangely or suffering
    some bug, you can just crash it and restart it, and more than likely it will start
    functioning again. This will often be faster than diagnosing and fixing the problem
    by hand, and so a good technique for high-availability services. Some programmers
    overuse the technique by deliberately writing code to crash the program whenever
    something goes wrong, when the correct solution is to handle all the errors you
    can think of correctly, and then rely on crash/restart for unforeseen error conditions.
    Another overuse of crash/restart is that when things go wrong, you should crash
    and restart the whole system. One tenet of crash-only *system* design is the idea
    that crash/restart is cheap - because you are only crashing and recovering small,
    self-contained parts of the system (see the [paper on microreboots)](http://www.usenix.org/events/osdi04/tech/candea.html).
    Try telling your users that your whole web browser crashes and restarts every
    2 minutes because it is crash-only software and see how well that goes over. If
    instead the browser quietly crashes and recovers only the thread that is misbehaving
    you will have much happier users.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个错误是过度使用崩溃/重启的“大锤”。崩溃软件的一个理念是，如果某个组件表现怪异或遇到了某些 bug，你可以直接崩溃并重启它，很可能它会重新正常运行。这通常比手动诊断和修复问题更快，因此是高可用服务的一种好技术。一些程序员过度使用这种技术，故意编写代码在出现问题时崩溃程序，然而正确的解决方案是正确处理你能想到的所有错误，然后依靠崩溃/重启处理无法预见的错误情况。另一种过度使用崩溃/重启的情况是当事情出错时，你应该崩溃并重启整个系统。崩溃-重启系统设计的一个原则是崩溃/重启是廉价的——因为你只是崩溃和恢复系统的小型、自包含的部分（参见[微重启论文](http://www.usenix.org/events/osdi04/tech/candea.html)）。试试看告诉你的用户，你的整个网络浏览器每两分钟就会崩溃和重启，因为它是崩溃-重启软件，看看反响有多好。如果相反，浏览器安静地崩溃并仅恢复失控的线程，你的用户会更加满意。
- en: 'On the face of it, the simplest part of crash-only software would be implementing
    the "crash" part. How hard is it to hit the power button? There is a subtle implementation
    point that is easy to miss, though: the crash mechanism has to be entirely outside
    and independent of the crash-only system - hardware power switch, kill -9, shutting
    down the virtual machine. If it is implemented through internal code, it takes
    away a valuable part of crash-only software: that you have an all-powerful, reliable
    method to take any misbehaving component of the system and crash/restart it into
    a known state.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 表面上看，崩溃-重启软件最简单的部分应该是实现“崩溃”部分。按下电源按钮有多难？然而，有一个微妙的实现点很容易被忽视：崩溃机制必须完全独立于崩溃-重启系统之外——硬件电源开关、kill
    -9、关闭虚拟机。如果通过内部代码实现，它会削弱崩溃-重启软件的一个宝贵部分：你拥有一个全能、可靠的方法来处理系统中任何失控的组件，并将其崩溃/重启至已知状态。
- en: I heard of one "crash-only" system in which the shutdown code was replaced with
    an abort() system call as part of a "crash-only" design. There were two problems
    with this approach. One, it relied on the system to not have any bugs in the code
    path leading to the abort() system call or any deadlocks which would prevent it
    being executed. Two, shutting down the system in this manner only exercised a
    subset of the total possible crash space, since it was only testing what happened
    when the system successfully received and handled a request to shutdown. For example,
    a single-threaded program that handled requests in an event loop would never be
    crashed in the middle of handling another request, and so the recovery code would
    not be tested for this case. One more example of a badly implemented "crash" is
    a database that, when it ran out of disk space for its event logging, could not
    be safely shut down because it wanted to write a log entry before shutting down,
    but it was out of disk space, so...
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我听说过一个“仅崩溃”系统，其中关机代码被替换为abort()系统调用，作为“仅崩溃”设计的一部分。这种方法有两个问题。一是它依赖于系统在导致abort()系统调用的代码路径中没有任何错误或任何死锁，这些错误将阻止它被执行。二是以这种方式关闭系统只能测试总可能崩溃空间的子集，因为它只测试了系统成功接收和处理关闭请求时发生的情况。例如，处理事件循环中请求的单线程程序永远不会在处理另一个请求的过程中崩溃，因此不会测试此情况的恢复代码。另一个糟糕实现的“崩溃”示例是一个数据库，当其事件日志记录的磁盘空间耗尽时，无法安全关闭，因为它想要在关闭之前写入日志条目，但是磁盘空间已经用完了，所以...
- en: Another common pattern is to ignore the trade-offs of performance vs. recovery
    time vs. reliability and take an absolutist approach to optimizing for one quality
    while maintaining superficial allegiance to crash-only design. The major trade-off
    is that checkpointing your application's state improves recovery time and reliability
    but reduces steady state performance. The two extremes are checkpointing or saving
    state far too often and checkpointing not at all; like Goldilocks, you need to
    find the checkpoint frequency that is Just Right for your application.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常见模式是忽略性能与恢复时间与可靠性的权衡，并采取对一个质量进行绝对主义优化的方法，同时保持对仅崩溃设计的表面忠诚。主要的权衡是检查点应用程序状态会提高恢复时间和可靠性，但会降低稳态性能。两个极端是太频繁地检查点或保存状态，以及根本不检查点；像金发女孩一样，您需要找到适合您的应用程序的检查点频率。
- en: What frequency of checkpointing will give you acceptable recovery time, acceptable
    performance, and acceptable data loss? I once used a web browser which only saved
    preferences and browsing history on a clean shutdown of the browser. Saving the
    history every millisecond is clearly overkill, but saving changed items every
    minute would be quite reasonable. The chosen strategy, "save only on shutdown,"
    turned out to be equivalent to "save never" - how often do people close their
    browsers, compared to how often they crash? I ended up solving this problem by
    explicitly starting up the browser for the sole purpose of changing the settings
    and immediately closing it again after the third or fourth time I lost my settings.
    (This is good example of how all software should be written to crash safely but
    does not.) Most implementations of bash I have used take the same approach to
    saving the command history; as a result I now explicitly "exit" out of running
    shells (all 13 or so of them) whenever I shut down my computer so I don't lose
    my command history.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 什么频率的检查点将为您提供可接受的恢复时间、可接受的性能和可接受的数据丢失？我曾经使用过一个网络浏览器，只在浏览器正常关闭时保存偏好设置和浏览历史记录。每毫秒保存一次浏览历史显然是过度的，但每分钟保存一次更改项则相当合理。所选择的策略“仅在关闭时保存”，结果等同于“从不保存”
    - 人们关闭浏览器的频率与它们崩溃的频率相比如何？我解决了这个问题，通过明确启动浏览器，仅仅为了更改设置，然后在第三或第四次丢失设置后立即再次关闭浏览器。
    （这是如何编写所有软件以安全崩溃的一个很好的例子，但实际上并非如此。）我使用过的大多数bash实现采用了相同的方法来保存命令历史记录；因此，现在我在关闭计算机时会明确“退出”运行中的所有shell（大约13个），以免丢失我的命令历史记录。
- en: 'Shutdown code should be viewed as, fundamentally, only of use to optimize the
    next start up sequence and should not be used to do anything required for correctness.
    One way to approach shutdown code is to add a big comment at the top of the code
    saying "WISHFUL THINKING: This code may never be executed. But it sure would be
    nice."'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '关机代码应被视为仅用于优化下次启动序列，而不应用于执行任何必须的正确性操作。处理关机代码的一种方法是在代码顶部添加一大段注释：“WISHFUL THINKING:
    这段代码可能永远不会被执行。但如果能执行那就太好了。”'
- en: Another class of misunderstanding is about what kind of systems are suitable
    for crash-only design. Some people think crash-only software must be stateless,
    since any part of the system might crash and restart, and lose any uncommitted
    state in the process. While this means you must carefully distinguish between
    volatile and non-volatile state, it certainly doesn't mean your system must be
    stateless! Crash-only software only says that any non-volatile state your system
    needs must itself be stored in a crash-only system, such as a database or session
    state store. Usually, it is far easier to use a special purpose system to store
    state, rather than rolling your own. Writing a crash-safe, quick-recovery state
    store is an extremely difficult task and should be left to the experts (and will
    make your system easier to implement).
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另一类误解是关于哪种系统适合于崩溃式设计。有些人认为崩溃式软件必须是无状态的，因为系统的任何部分可能会崩溃并重新启动，并且在此过程中会丢失任何未提交的状态。虽然这意味着你必须仔细区分易失性和非易失性状态，但这绝对不意味着你的系统必须是无状态的！崩溃式软件只是说你的系统所需的任何非易失性状态本身必须存储在崩溃式系统中，例如数据库或会话状态存储。通常情况下，使用专用系统存储状态要容易得多，而不是自行开发。编写一个安全的崩溃恢复状态存储是一个极其困难的任务，应该交给专家来完成（并且将使你的系统更易于实现）。
- en: Crash-only software makes explicit the trade-off between optimizing for steady-state
    performance and optimizing for recovery. Sometimes this is taken to mean that
    you can't use crash-only design for high performance systems. As usual, it depends
    on your system, but many systems suffer bugs and crashes often enough that crash-only
    design is a win when you consider overall up time and performance, rather than
    performance only when the system is up and running. Perhaps your system is robust
    enough that you can optimize for steady state performance and disregard recovery
    time... but it's unlikely.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 崩溃式软件明确表明了在优化稳态性能和优化恢复之间的权衡。有时候人们会认为对于高性能系统不能使用崩溃式设计。通常情况下，这取决于你的系统，但许多系统经常遭遇错误和崩溃，因此在考虑总体上线时间和性能时，崩溃式设计胜出，而不仅仅是在系统正常运行时的性能。也许你的系统足够健壮，可以优化稳态性能并忽略恢复时间……但这不太可能。
- en: Because it must be possible to crash and restart components, some people think
    that a multi-threaded system using locks can't be crash-only - after all, what
    happens if you crash while holding a lock? The answer is that locks can be used
    inside a crash-only component, but all interfaces between components need to allow
    for the unexpected crash of components. Interfaces between components need to
    strongly enforce fault boundaries, put timeouts on all requests, and carefully
    formulate requests so that they don't rely on uncommitted state that could be
    lost. As an example, consider how the recently-merged [robust futex facility](http://lwn.net/Articles/172149/)
    makes crash recovery explicit.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于必须可能崩溃和重新启动组件，有些人认为使用锁的多线程系统不能是崩溃式的 - 毕竟，如果在持有锁的同时崩溃会发生什么？答案是可以在崩溃式组件内部使用锁，但是所有组件之间的接口都需要考虑到组件意外崩溃。组件之间的接口需要严格执行故障边界，对所有请求设置超时，并仔细制定请求，以避免依赖可能会丢失的未提交状态。例如，可以考虑最近合并的[强大的
    futex 设施](http://lwn.net/Articles/172149/)是如何明确崩溃恢复的。
- en: Some people end up with the impression that crash-only software is less reliable
    and unsuitable for important "mission-critical" applications because the design
    explicitly admits that crashes are inevitable. Crash-only software is actually
    more reliable because it takes into account from the beginning an unavoidable
    fact of computing - unexpected crashes.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一些人认为崩溃式软件不可靠，并且不适合重要的“任务关键”应用程序，因为设计明确承认崩溃是不可避免的。实际上，崩溃式软件更可靠，因为它从一开始就考虑到了计算中不可避免的事实
    - 意外崩溃。
- en: A criticism often leveled at systems designed to improve reliability by handling
    errors in some way other than complete system crash is that they will hide or
    encourage software bugs by masking their effects. First, crash-only software in
    many ways exposes previously hidden bugs, by explicitly testing recovery code
    in normal use. Second, explicitly crashing and restarting components as a workaround
    for bugs does not preclude taking a crash dump or otherwise recording data that
    can be used to solve the bug.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于试图通过处理错误而不是完全系统崩溃来提高可靠性的系统，经常批评的是它们将通过掩盖其影响来隐藏或鼓励软件错误。首先，在许多方面，崩溃恢复软件通过在正常使用中显式测试恢复代码来暴露先前隐藏的错误。其次，显式地崩溃和重启组件作为错误的解决方法并不排除获取崩溃转储或以其他方式记录数据以解决错误。
- en: How can we apply crash-only design to operating systems? One example is file
    systems, and the design of chunkfs (discussed in last week's [LWN article on the
    2006 Linux file systems workshop](http://lwn.net/Articles/190222/) and in more
    detail [here](http://www.fenrus.org/chunkfs.txt)). We are trying to improve reliability
    and data availability by separating the on-disk data into individually checkable
    components with strong fault isolation. Each chunk must be able to be individually
    "crashed" - unmounted - and recovered - fsck'd - without bringing down the other
    chunks. The code itself must be designed to allow the failure of individual chunks
    without holding locks or other resources indefinitely, which could cause system-wide
    deadlocks and unavailability. Updates within each chunk must be crash-safe and
    quickly recoverable. Splitting the file system up into smaller, restartable, crash-only
    components creates a more reliable, easier to repair crash-only system.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何将崩溃恢复设计应用于操作系统？一个例子是文件系统，以及chunkfs的设计（上周在[LWN关于2006年Linux文件系统研讨会的文章](http://lwn.net/Articles/190222/)中讨论，并在更多细节上[这里](http://www.fenrus.org/chunkfs.txt)）。我们试图通过将磁盘上的数据分割成具有强隔离故障的单独可检查组件来提高可靠性和数据可用性。每个块必须能够单独“崩溃”（卸载）并进行恢复（fsck'd），而不会影响其他块。代码本身必须设计为允许单个块的失败，而不会无限期地持有锁或其他资源，这可能导致系统范围的死锁和不可用性。每个块内的更新必须是崩溃安全的，并且能够快速恢复。将文件系统分解为更小、可重新启动、仅限于崩溃的组件创建了一个更可靠、更易于修复的崩溃恢复系统。
- en: The conclusion
  id: totrans-split-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: Properly implemented, crash-only software produces higher quality, more reliable
    code; poorly understood it results in lazy programming. Probably the most common
    misconception is the idea that writing crash-only software is that it allows you
    to take shortcuts when writing and designing your code. Wake up, Sleeping Beauty,
    there ain't no such thing as a free lunch. But you can get a more reliable, easier
    to debug system if you rigorously apply the principles of crash-only design.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正确实施的崩溃恢复软件能产生更高质量、更可靠的代码；理解不足则导致懒惰的编程。也许最常见的误解是认为编写崩溃恢复软件允许您在编写和设计代码时可以走捷径。醒醒吧，睡美人，没有免费的午餐。但是，如果严格遵循崩溃恢复设计原则，您可以获得一个更可靠、更易于调试的系统。
- en: '[Thanks to [Brian Warner](http://www.lothar.com/) for inspiring this article,
    [George Candea](http://people.epfl.ch/george.candea) and [Armando Fox](http://swig.stanford.edu/~fox/)
    for comments and for codifying crash-only design in general, and the implementers(s)
    of the Emacs auto-save feature, which has saved my work too many times to count.]'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[感谢[Brian Warner](http://www.lothar.com/)为本文提供灵感，[George Candea](http://people.epfl.ch/george.candea)和[Armando
    Fox](http://swig.stanford.edu/~fox/)为评论和总结崩溃恢复设计，以及Emacs自动保存功能的实施者(s)，该功能已经多次挽救了我的工作。]'
- en: '* * *'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: (
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: '[Log in](https://lwn.net/Login/?target=/Articles/191059/)'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[登录](https://lwn.net/Login/?target=/Articles/191059/)'
- en: to post comments)
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以发布评论)
