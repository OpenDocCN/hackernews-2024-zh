- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:23:14'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:23:14'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Coroutines and effects
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协程和效果
- en: 来源：[https://without.boats/blog/coroutines-and-effects/](https://without.boats/blog/coroutines-and-effects/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://without.boats/blog/coroutines-and-effects/](https://without.boats/blog/coroutines-and-effects/)
- en: For the past few months I’ve been mulling over some things that Russell Johnston
    made me realize about the relationship between effect systems and coroutines.
    You can read more of his thoughts on this subject [here](https://www.abubalay.com/blog/2024/01/14/rust-effect-lowering),
    but he made me realize that effect systems (like that found in Koka) and coroutines
    (like Rust’s async functions or generators) are in some ways isomorphic to one
    another. I’ve been pondering the differences between them, trying to figuring
    out the advantages and disadvantages of each.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几个月里，我一直在思考一些事情，这些都是由Russell Johnston让我意识到的关于效果系统与协程之间关系的。你可以在这里阅读更多他对这个主题的想法：[链接](https://www.abubalay.com/blog/2024/01/14/rust-effect-lowering)，他让我意识到效果系统（例如Koka中的那种）和协程（例如Rust的async函数或生成器）在某些方面是同构的。我一直在思考它们之间的差异，试图理解每种方法的优势和劣势。
- en: 'A few weeks ago, Will Crichton posted something on [Twitter](https://twitter.com/tonofcrates/status/1770560175835058573)
    that helped bring the contrast into sharper focus for me:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 几周前，Will Crichton在[Twitter](https://twitter.com/tonofcrates/status/1770560175835058573)上发布了一些东西，帮助我更清晰地理解了它们之间的对比：
- en: 'The entire field of PL right now: what if it was dynamically scoped&mldr;.
    but statically typed&mldr;&mldr;&mldr;&mldr;..? (effects, capabilities, contexts,
    metavariables&mldr;)'
  id: totrans-split-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: PL领域整体：如果它是动态作用域的&mldr;但是静态类型的&mldr;&mldr;&mldr;&mldr;&mldr;&mldr;（效果，能力，上下文，元变量&mldr;）
- en: I’m just a humble language designer (and not a theorist of anything, especially
    not PL), so my focus is the difference in user experience and affordance. But
    this seems like a cutting insight and this property of effect handlers - static
    typing but dynamic scoping - seems to me to be a good jumping off point for understanding
    the difference between effect handlers and coroutines from a user perspective.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是一个谦逊的语言设计者（尤其不是什么理论家，尤其不是PL的理论家），所以我的重点是用户体验和可负担性的差异。但这似乎是一个尖锐的洞察力，效果处理程序的这种属性
    - 静态类型但动态作用域 - 对我来说似乎是理解效果处理程序和协程之间差异的一个很好的起点。
- en: Background
  id: totrans-split-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: What is a coroutine?
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是协程？
- en: 'A coroutine is a function which can yield control back to its caller before
    finishing. The caller then has a reference to the state of the coroutine when
    it yielded, so it can resume the coroutine again if it so chooses. It’s possible
    to model many meaningful “effects” using coroutines by having the coroutine yield.
    For example:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 协程是一种可以在完成之前将控制权返回给其调用者的函数。然后，调用者具有协程在暂停时的状态的引用，因此如果选择的话，可以再次恢复协程。通过让协程产生值，可以使用协程来模拟许多有意义的“效果”。例如：
- en: A coroutine can perform IO “asynchronously,” by yielding a value like `Pending`
    when IO is being performed.
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协程可以通过产生像`Pending`这样的值来“异步”执行IO时的操作。
- en: A coroutine can be iterable by yielding values as it traverses some collection.
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协程可以通过在遍历某些集合时产生值来实现可迭代。
- en: A coroutine can model exceptions by yielding an exception value (in this case,
    resuming the coroutine would have no effect).
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协程可以通过产生异常值来模拟异常（在这种情况下，恢复协程不会产生效果）。
- en: Rust, for example, models both asynchrony and iteration using coroutines. On
    the other hand, exceptions are not modeled this way; instead they are modeled
    with the `Result` type. Specifically, Rust uses “stackless” coroutines, but this
    distinction is not very important to the concepts in this post.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Rust使用协程模型来同时处理异步和迭代。另一方面，异常不是用这种方式建模的；而是用`Result`类型建模。具体来说，Rust使用“无栈”协程，但这种区别对本文中的概念并不是很重要。
- en: What is an effect handler?
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是效果处理程序？
- en: 'I need to be clear, because terminology has become muddied in the Rust community:
    this post has nothing in particular to do with “effects generics” as conceptualized
    by the Rust project, which is a different set semantic features related to how
    Rust handles effects from “effects systems” as they appear in the literature.
    In this post, I am focused on effect systems as proposed in languages like [Koka](https://koka-lang.github.io/koka/doc/index.html)
    and [Effekt](https://effekt-lang.org). And my understanding of these systems may
    be imperfect or wrong, but this is how they operate as I understand them.'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要澄清一点，因为术语在Rust社区中变得混乱：这篇文章与“效果泛型”（Rust项目中的概念）没有特别的关系，后者是与Rust处理效果相关的一组不同的语义特征。在这篇文章中，我关注的是像[Koka](https://koka-lang.github.io/koka/doc/index.html)和[Effekt](https://effekt-lang.org)等语言中提出的效果系统。我对这些系统的理解可能不完美或错误，但这是我理解它们的方式。
- en: In an effect system, in addition to a type, an expression will have an *effect*.
    An effect is an additional “kind” in the formal, type system sense of the word
    (in the same way that lifetimes are another “kind” in Rust). In general, expressions
    inherit the effects of other expressions they contain. Functions inherit the effects
    of their body.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在效果系统中，除了类型之外，表达式还会有一个*效果*。从形式上讲，效果是另一种“种类”，在类型系统中的意义上（就像生命周期在Rust中是另一种“种类”一样）。通常情况下，表达式会继承其包含的其他表达式的效果。函数会继承其主体的效果。
- en: For example, Koka has a “diverging” effect, which means that an expression may
    diverge (that is to say, it may not finish evaluating). An expression containing
    a diverging expression is also diverging. So you can distinguish in the type system
    between a function that is guaranteed to finish and a function that may not finish
    (this is imperfect, of course, because of the undecidability of the halting problem;
    some functions that do not diverge will be marked diverging).
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Koka有一个“发散”效果，这意味着一个表达式可能发散（即，可能无法完成评估）。包含发散表达式的表达式也是发散的。因此，你可以在类型系统中区分保证完成和可能不会完成的函数（当然，由于停机问题的不可判定性，一些不发散的函数也会被标记为发散）。
- en: However, these languages also have a concept of *effect handlers*, which take
    an expression with an effect and “handle” it, producing an expression without
    that effect. Not all effects can be handled (for example, as far as I understand
    it is not possible to meaningfully handle the diverging effect), but some can.
    The semantics of what it means to handle an effect are where effect systems become
    similar to coroutines.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些语言还有一个*效果处理程序*的概念，它们接受具有效果的表达式并“处理”它，生成一个没有该效果的表达式。并非所有效果都可以处理（例如，据我了解，不能有意义地处理发散效果），但有些可以。处理效果的语义是效果系统变得类似于协程的地方。
- en: 'When a handleable effect occurs, an effectful expression yields control to
    the nearest-most handler of that effect, which may or may not yield control back.
    This can be used to model all of the same sorts of effects as coroutines. For
    example:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生可处理的效果时，具有效果的表达式会将控制权交给该效果的最近处理程序，这可能会或可能不会将控制权归还。这可用于模拟与协程相同类型的所有效果。例如：
- en: An IO effect can yield control to the IO handler, which will yield back to the
    expression when IO is complete.
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IO效果可以将控制权交给IO处理程序，后者在IO完成时将控制权归还给表达式。
- en: An iterable effect can yield control to the loop consumer for each value, which
    yields back to the iterable to continue iteration.
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可迭代效果可以将控制权每个值都交给循环消费者，然后再归还给可迭代对象以继续迭代。
- en: An exception effect can yield control to an exception handler, which will not
    yield control back.
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常效果可以将控制权交给异常处理程序，而后者将不会将控制权归还。
- en: The difference is between static and dynamic scope
  id: totrans-split-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这两者之间的区别在于静态和动态作用域。
- en: The key difference between coroutines and effect handlers is that coroutines
    yield control to their caller, but effectful expressions yield control to their
    handler. The difference of affordance this implies is the materially significant
    advantage of coroutines over effect handlers.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 协程和效果处理程序之间的关键区别在于，协程将控制权归还给其调用者，而具有效果的表达式将控制权归还给其处理程序。这意味着它所承载的功能差异是协程优于效果处理程序的实质性优势。
- en: 'Let’s imagine a programming language in which every function is a coroutine
    which can yield `Pending` or an exception (to model both IO and exceptions) and
    there are multiple kind of call operators that “handle effects” differently:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一种编程语言，在这种语言中，每个函数都是一个可以yield `Pending`或异常（用于模拟IO和异常）的协程，而且还有多种调用操作符会“处理效果”：
- en: There is an ordinary call operator that can only be used on coroutines that
    never yield (these coroutines are effectively pure functions)
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个普通的调用运算符，只能用于从不产生`yield`的协程（这些协程实际上是纯函数）。
- en: There is an asynchronous `().await` call operator that can be called on coroutines
    that yield `Pending`, which yields `Pending` and then calls them again (so it
    can only be called from within another coroutine that yields `Pending`)
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个异步`().await`调用运算符，可以在产生`Pending`的协程上调用，它产生`Pending`然后再次调用它们（因此只能从另一个产生`Pending`的协程中调用）。
- en: There is an exception-throwing `()?` call operator that can be called on coroutines
    that yield an exception, which yields the exception outward.
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个抛出异常的`()?`调用运算符，可以在产生异常的协程上调用，它会将异常向外传递。
- en: There is a combined `().await?` call operator that can be called on coroutines
    that yield `Pending` and exceptions, to forward both effects.
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有一个结合的`().await?`调用运算符，可以在产生`Pending`和异常的协程上调用，以同时处理这两种效果。
- en: 'Let’s suppose you wanted to do an HTTP request in this language (which performs
    IO and can also raise an exception representing some sort of IO error):'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想在这种语言中进行HTTP请求（它执行IO并且还可以引发代表某种IO错误的异常）：
- en: '[PRE0]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let’s contrast this to a similar language which models IO and exceptions
    using effects. In this language, there is no need for special call operators:
    a function which has an IO or exception effect can call functions which also have
    IO or exception effects:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将其与一个类似的语言进行对比，该语言使用效果来模拟IO和异常。在这种语言中，没有特殊的调用运算符的需求：具有IO或异常效果的函数可以调用同样具有IO或异常效果的函数。
- en: '[PRE1]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The difference between these features is that the call to `http::get` must be
    annotated with the `await` and `?` syntax to forward its effects, whereas with
    effect handlers the forwarding of effects by a callee is implicit.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特性之间的区别在于，对`http::get`的调用必须使用`await`和`?`语法进行注释以转发其效果，而使用效果处理程序时，被调用者的效果转发是隐含的。
- en: 'I want to take one more step back and then I promise I will reach a conclusion.
    There are definitions of coroutines other than the one I gave, especially older
    ones. If you were to closely read [Wikipedia](https://en.wikipedia.org/wiki/Coroutine),
    you would find a slightly different definition, and what I’ve called coroutines
    are addressed instead as “generators” or “semicoroutines.” In the older definition,
    a coroutine can specify where it yields control. This is actually based on a model
    of program execution in which there is no program stack: instead, every coroutine
    is a global singleton, and yielding control to it means continuing it wherever
    it last left off. For semicoroutines, in contrast, calling a coroutine produces
    a new stack frame which can only be resumed by code with a reference to that stack
    frame.'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我想再退一步，然后我保证我会得出结论。除了我提供的定义之外，还有其他的协程定义，尤其是旧的定义。如果你仔细阅读[Wikipedia](https://en.wikipedia.org/wiki/Coroutine)，你会发现一个略有不同的定义，我所说的协程被称为“生成器”或“半协程”。在旧的定义中，协程可以指定它何时放弃控制权。这实际上是基于一个程序执行模型，其中没有程序堆栈：相反，每个协程是一个全局单例，将控制权交给它意味着在它上次离开的地方继续执行。相比之下，对于半协程来说，调用协程会产生一个新的堆栈帧，只能通过具有对该堆栈帧的引用的代码来恢复执行。
- en: 'The program stack is such a universal model of program execution today that
    we treat it as inevitable, but like everything else it had to be invented. It
    was invented to support recursive function definition, but it has other advantages
    in the way that it enables local reasoning: from the body of a function, there
    is exactly one dynamic jump point - wherever it returns to. From the point of
    view of the caller, this is now statically known: the function will jump back
    to the point at which it is called.'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 程序堆栈是今天程序执行的通用模型，我们将其视为不可避免的，但像其他任何东西一样，它也必须被发明出来。它是为了支持递归函数定义而发明的，但它在启用局部推理的方式上有其他优势：从函数体中，存在一个动态跳转点
    - 即它返回的地方。从调用者的角度来看，这现在是静态已知的：函数将跳回到被调用的地方。
- en: 'This rule can only be violated when a language introduces new features that
    allow additional dynamic jump points. One that has long been popular is the notion
    of exceptions, which unwind the call stack to the point at which they are being
    handled. There are two kinds of exceptions: unchecked exceptions, which are totally
    untyped, and checked exceptions, which require an annotations on any function
    which could throw them.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当语言引入允许额外动态跳转点的新功能时，才能违反此规则。长期以来流行的一种方式是异常的概念，它会展开调用堆栈直至处理它们的点。有两种类型的异常：未经检查的异常完全没有类型，而检查的异常则需要在可能抛出它们的任何函数上进行注释。
- en: '**Effect handlers are a generalization of checked exceptions**, with all of
    the pros and cons of that feature. They require you to annotate functions that
    have an effect, but they do not require you to annotate *calls* at which the effect
    can occur. Therefore, when examining the body of a function, to understand when
    the effect occurs requires examining the type signature of every function that
    is called. Since this is meaningful control flow, it seems very valuable to be
    able to identify points at which an error occurs without examining the signatures
    of each function call. This is why Rust features `Result` and the `?` operator
    instead of checked exceptions.'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**效果处理器是检查异常的一种泛化形式**，具有该特性的所有优缺点。它们要求你注释具有效果的函数，但不要求你注释*可以发生*该效果的调用。因此，在检查函数体时，要理解效果发生的时机需要检查每个调用函数的类型签名。由于这是有意义的控制流，因此能够在不检查每个函数调用签名的情况下识别出错误发生点似乎非常有价值。这就是为什么Rust使用`Result`和`?`操作符而不是检查异常。'
- en: 'There’s an axis of evaluation here with three points: a language could model
    an effect in a way which is totally unchecked at compile time: both dynamically
    typed and dynamically scoped. Unchecked exceptions (including panics) are an example
    of this; so is blocking IO. And a language could model the effect in the type
    system, but with a dynamic scope. Checked exceptions and effect handlers are both
    examples of this. And a language could model the effect in a way which is both
    statically typed and lexically scoped. This is what Rust does for these effects
    with both `Result` and `async/await`.'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里有一个评估轴线，有三个观点：语言可以以完全在编译时不受检查的方式模拟效果：既动态类型又动态作用域。未经检查的异常（包括panic）就是一个例子；阻塞IO也是如此。语言可以在类型系统中模拟效果，但具有动态作用域。检查的异常和效果处理器都是这方面的例子。语言也可以以静态类型和词法作用域的方式模拟效果。这就是Rust对这些效果使用`Result`和`async/await`的方式。
- en: '(You may notice that there’s a fourth spot in the design space not covered
    here: dynamically typed and lexically scoped. An example in this category would
    be the async/await feature in dynamically typed languages like Python and JavaScript;
    you must annotate asynchronous calls with `await` to get their result, but if
    you fail to do so it is not a compile-time error.)'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: （你可能注意到，设计空间中还有一个未涵盖的第四个位置：动态类型和词法作用域。这一类别的例子包括动态类型语言（如Python和JavaScript）中的async/await特性；你必须用`await`标注异步调用以获取其结果，但如果未这样做则不会导致编译时错误。）
- en: '[PRE2]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'These are not the only language features that can be used to model effects,
    and other features also fall into one of these buckets. For example, monads are
    also statically typed and lexically scoped. However, a major objection to monads
    is that they model effects in a specifically layered way, so that for example
    there is a distinction between an `IO<Result<T, E>>` and a `Result<IO<T>, E>`.
    Coroutines on the other hand are order-independent: all coroutine that yield `Pending`
    and `Exception` have the same type, there is no distinction of order. The same
    is true of effect handlers.'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不是唯一可以用来模拟效果的语言特性，其他特性也属于这些类别之一。例如，单子（monads）也是静态类型和词法作用域的。然而，对单子的一个主要反对意见是它们以特定的分层方式模拟效果，例如`IO<Result<T,
    E>>`和`Result<IO<T>, E>`之间存在区别。而协程则是无序的：所有产生`Pending`和`Exception`的协程类型相同，没有顺序的区别。效果处理器也是如此。
- en: 'This has appeared in Rust for example with the debate about the design of [async
    iterators](/blog/poll-next). Designs based on `async fn next` introduce an arbitrary
    ordering by introducing multiple coroutines, whereas designed based on a single
    coroutine do not make a distinction; the coroutine just yields items as well as
    `Pending`. This was the crux of Russell Johnston’s argument in the post I linked
    earlier: this unlayered property is shared by coroutines and effect handlers,
    and is an advantage of these features.'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在Rust中就出现了关于[异步迭代器设计](/blog/poll-next)的辩论。基于`async fn next`的设计通过引入多个协程引入了任意的顺序，而基于单个协程的设计则没有做出区分；协程只是像`Pending`一样产生项目。这是我之前链接的文章中Russell
    Johnston的论点的关键：这种无分层特性被协程和效果处理器共享，并且是这些特性的优点。
- en: On the other hand, by modeling errors with `Result` instead of some sort of
    coroutine, Rust *does* introduce an ordering. This is mostly fine because of the
    fact that a function which “throws an exception” (by evaluating to an `Err`) is
    not supposed to be resumed, though it introduces some quirks where for example
    there’s no way to distinguish between an iterator of `Result`s (which may continue
    after one is an `Err`) and an iterator which throws an error (which will not continue).
    If instead a generator could “yield an exception,” it would be a different type
    from a generator that yields a sequence of `Result`s. But I don’t find this inadequacy
    to come up in practice that often, so I’m content to leave it as theoretical work
    for a future language to solve.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，通过使用`Result`模拟错误，而不是某种协程，Rust确实引入了一种顺序。这在大多数情况下都是可以接受的，因为“抛出异常”的函数（通过`Err`求值）不应该被恢复，尽管它引入了一些怪癖，例如无法区分`Result`的迭代器（可能在`Err`后继续）和抛出错误的迭代器（不会继续）。如果生成器能够“产生异常”，那么它将与产生`Result`序列的生成器不同。但在实践中，我发现这种不足并不经常出现，所以我愿意把它留给未来语言解决理论问题。
- en: 'Overall, coroutines strike me as the most promising way to handle many kinds
    of effectful functions because they seem to be in the design sweet spot: They
    are statically typed, lexically scoped, and unlayered. This is why my starting
    point for handling effects in any language would be a coroutine feature (though
    if the language were not under Rust’s constraints, I would prefer if it were a
    stackful coroutine feature so they could be recursive).'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，协程让我觉得是处理多种类型效果函数最有前途的方法，因为它们似乎处于设计的甜蜜点：静态类型、词法作用域且无分层。这就是为什么在任何语言中处理效果的起点都应该是协程特性（尽管如果语言不受Rust的限制，我更喜欢它是一个具有堆栈的协程特性，以便可以递归）。
