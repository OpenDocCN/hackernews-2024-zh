- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 12:48:00'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 12:48:00'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Book Review: Tidy First? | Path-Sensitive'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 书评：先整理？ | Path-Sensitive
- en: 来源：[https://www.pathsensitive.com/2024/04/book-review-tidy-first.html](https://www.pathsensitive.com/2024/04/book-review-tidy-first.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.pathsensitive.com/2024/04/book-review-tidy-first.html](https://www.pathsensitive.com/2024/04/book-review-tidy-first.html)
- en: 'Book Review: Tidy First?'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 书评：先整理？
- en: As you’re working day-to-day, every so often it’s nice to take a step back and
    improve things.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在日常工作中，偶尔停下来改善一下是件不错的事情。
- en: 'Some changes require having a strong understanding of how things are done and
    why, but can lead to huge benefits. Think: a chef finding a better way to brine
    poultry to preserve flavor, or finding a baking schedule that lets most customers
    get bread fresh out of the oven.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有些改变需要对事物是如何进行和为何这样做有深刻理解，但可能会带来巨大的好处。想想：厨师找到更好的方法来腌制家禽以保留风味，或找到一个烘焙时间表，让大多数顾客都能吃到刚出炉的面包。
- en: 'Other changes lead to a slightly pleasant environment, but can be knocked off
    without much thought when you walk by. Think: straightening the chairs in the
    dining area, or throwing away the cracked plates.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 其他改变会带来稍微愉悦的环境，但当你经过时可以毫不费力地完成。想想：整理餐厅区的椅子，或者扔掉破碎的盘子。
- en: 'Refactoring a codebase can be intense and scary. Kent Beck’s ”Tidy First?”
    suggests we reduce the barriers by starting small. It offers a catalogue of “tidyings”:
    small, uncontroversial improvements you can knock out right before you code. Sorta
    like the software equivalent of straightening the chairs.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 重构代码库可能会很紧张和可怕。肯特·贝克的“Tidy First?”建议我们从小处着手，减少障碍。它提供了一个“整理”的目录：小的、毫无争议的改进，可以在编码之前立即完成。有点像软件版本的摆放椅子。
- en: And then it builds on that. It talks about whether you should straighten the
    chairs before or after you cook. About whether you should straighten the chairs
    and clean the cupboard in one batch or two. About the theory of why having straightened
    chairs leads to a more pleasant environment and improved business.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它进一步发展。它讨论了在烹饪之前还是之后应该摆放椅子的问题。关于是一次性整理椅子和清理碗橱还是分两批次。关于为什么整理椅子会导致更愉悦的环境和改善业务的理论。
- en: By the end of it, you may have forgotten that deeper improvements even exist.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到最后，你可能已经忘记了更深层次的改进甚至存在。
- en: Shorten first?
  id: totrans-split-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先缩短？
- en: 'This book has one cardinal sin: not understanding when more details are helpful
    vs. superfluous.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书有一个致命的错误：不理解何时详细信息有助于，何时是多余的。
- en: On the side of harmful brevity, there’s Chapter 12 about when and how to extract
    helper methods. I think everything in the chapter is correct and good advice,
    but it’s also vague enough that I can’t see it being useful to anyone who doesn’t
    already understand it. And one of the core tidyings is described by just a few
    lines of text and example code featuring functions foo and foo_body, so that I
    myself had trouble understanding what he’s recommending, especially since it mostly
    applies to just a couple of languages.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在有害的简洁性方面，第12章讨论了何时以及如何提取辅助方法。我认为这一章的内容都是正确的和好的建议，但它也太过模糊，以至于我认为除非已经理解，否则对任何人都没有用。其中一个核心整理只用几行文本和以函数foo和foo_body为特色的示例代码描述，因此我自己在理解他推荐的东西时也感到困难，特别是它主要适用于几种语言。
- en: 'But on the side of verbosity, there are a lot of paragraphs like this:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但在冗长方面，有很多段落都是这样的：
- en: Behavior creates value. Rather than having to calculate a bunch of numbers by
    hand, the computer can calculate millions of them every second. Turns out people
    will pay not to have to calculate numbers by hand. If running the software costs
    $1 in electricity and you can charge folks $10 to run it on their behalf, then
    you have a business.
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 行为创造价值。与其手动计算大量数字，不如让电脑每秒计算数百万个。事实证明，人们愿意为了不用手动计算数字而支付费用。如果运行软件耗电1美元，而你可以向用户收取10美元来代为运行，则你有了一个生意。
- en: (Chapter 23)
  id: totrans-split-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: （第23章）
- en: You know what doesn’t create value? Spending 4 sentences to say that automating
    stuff is worth money.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道什么不创造价值吗？花4句话说自动化事务是有价值的。
- en: This pattern — giving extra detail where it’s obvious, omitting detail where
    it would be helpful — repeats throughout the book. And so, even though “Tidy First?”
    is pretty short at around 100 pages, I feel like it’s constantly trying to fill
    space.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式——在显而易见的地方提供额外细节，而在有帮助的地方省略细节——贯穿整本书。因此，即使《Tidy First?》只有大约100页，我觉得它还在不断地填充空间。
- en: 'Sometimes the space issues go deeper. Like, I’m reminded in parts of a [story](https://web.archive.org/web/20150407223525/http://squid314.livejournal.com/297579.html)
    I read about a “computer skills” class taught in a 3rd-world classroom without
    computers. Think: a lecturer stands in front of a chalkboard, and drones, “When
    you click the Start button, a menu would appear. Then you would mouse over…”'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候空间问题更深远。比如，我想起了一个[故事](https://web.archive.org/web/20150407223525/http://squid314.livejournal.com/297579.html)，讲的是在一个没有电脑的第三世界教室里教授“计算机技能”课程。想象一下：一位讲师站在黑板前，唠叨道，“当你点击‘开始’按钮时，会出现一个菜单。然后你会鼠标悬停在……”
- en: Chapter 17, “Chaining,” is like this. It’s supposed to be a list of examples
    of how doing one tidying might lead to another, like how you might see a new opportunity
    to reorder code after deleting a branch that never runs. But it’s tough to follow
    and impossible to remember if you haven’t tried tidying and seen this play out.
    And if you have, then your own experience will show you far better than this chapter
    could.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第17章，“链接”，就像这样。它应该是一个关于如何通过整理一种可能导致另一种的例子列表，就像你可能在删除一个从未运行的分支后看到重新排序代码的新机会一样。但如果你没有尝试过整理并看到这一情况的发生，要理解这一点是很困难的，如果你已经尝试过，那么你自己的经验将比这一章节更好地展示给你。
- en: The actual list of tidyings is fine. Most are pretty uncontroversial small improvements.
    He says some things about reordering code that I find overly simplistic, and generally
    a smaller improvement than adding [good code sections](https://www.pathsensitive.com/2023/12/should-you-split-that-file.html).
    He repeats the typical line of “Delete code that’s not used instead of commenting
    it out, because you can always recover it from VCS.” (That’s a view that I’ve
    [controversially] started to turn against, for the same reason that “you can recover
    it from backups” is not a compelling reason to delete files currently not in use.)
    He gives some examples of ways that programmers, even after being taught in intro
    classes not to use magic numbers, still litter their code with constants like
    404\. But I wish he’d tell Python programmers to stop designing APIs where you
    write string constants like “r--” and “bs” to denote that your scatterplot should
    use red dashes and blue squares. His catalogue lists the changes of “Add a comment
    that you wish you had when reading the code” and “Remove a comment that just says
    what the code says.” But I’d rather have a deeper discussion that offers a bigger
    toolbox of how to improve comments. (The discussion in [A Philosophy of Software
    Design](https://www.pathsensitive.com/2018/10/book-review-philosophy-of-software.html)
    is my favorite part of that book.)
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的整理清单还不错。大多数都是非常普遍且小幅改进。他对代码重新排序提出了一些我觉得过于简化的观点，一般而言，这比添加[好的代码段](https://www.pathsensitive.com/2023/12/should-you-split-that-file.html)的改进要小。他重复了“删除未使用的代码而不是将其注释掉，因为你随时可以从VCS恢复它”的典型说法。（这是一个我开始有异议的观点，原因和“你可以从备份中恢复它”并不是删除当前未使用文件的令人信服的理由一样。）他举了一些例子，说明程序员们，即使在介绍课程中被告知不要使用魔术数字，仍然会在他们的代码中填充像404这样的常量。但我希望他告诉Python程序员停止设计API，其中你写字符串常量如“r--”和“bs”来表示你的散点图应该使用红色虚线和蓝色正方形。他的目录列出了“在阅读代码时希望有的注释添加”和“删除仅仅描述代码内容的注释”。但我更希望有一场更深入的讨论，提供更多如何改进注释的工具。（《软件设计的哲学》中的讨论是我喜欢那本书的一个重要部分。）
- en: Connect the ideas last?
  id: totrans-split-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后连接这些思想吗？
- en: 'On the whole, Beck seeks to provide a repertoire of easy wins you can earn
    when you drive by some code. I think he succeeds in that goal, although it’s a
    rather impoverished repertoire. (E.g.: they can’t solve any of the [refactoring
    challenges](https://twitter.com/jimmykoppel/status/1742794903216689212) I’ve been
    running lately.) But if you’re someone who lacks a repertoire at all, I can see
    them as great training wheels.'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，贝克试图提供一系列你在驱动代码时可以获得的轻松胜利。我认为他在这个目标上取得了成功，尽管这是一个相当贫乏的库存。例如：它们无法解决我最近运行的[重构挑战](https://twitter.com/jimmykoppel/status/1742794903216689212)中的任何一个。但如果你是完全缺乏库存的人，我可以看到它们作为很好的训练轮来使用。
- en: But then he spends 2/3 of the book talking about how to schedule time for tidying
    and how reducing coupling reduces the cost of change and the benefits of making
    decisions reversible and other stuff that’s not very relevant to deleting useless
    comments and adding blank lines to break up code. It feels a bit like he wrote
    a book on these shallow tidyings, and then also wrote a book on deep refactoring,
    and then accidentally got the chapters mixed up.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但然后他花了书的2/3的篇幅讨论如何安排整理时间，如何减少耦合度以及做出决策可逆的好处，以及其他与删除无用注释和添加空行以分割代码无关的事情。感觉他有点像写了一本关于这些浅显整理的书，然后又写了一本关于深层重构的书，然后不小心把章节搞混了。
- en: 'And then when I asked him about this, he actually said that I’m right but should
    wait for his next book: “I''m giving concepts bottom up--tidyings--and top-down--theory.
    I *will* meet in the middle, I promise.” And he’s pursuing this strategy because:
    “I think having people practice designing consciously for a year is good prep
    for being able to understand the next layer.”'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后当我问他关于这个问题时，他实际上说我是对的，但应该等待他的下一本书：“我从底层向上提供概念——整理——和从顶层向下提供理论。我*会*在中间见面，我保证。”他正在追求这种策略，因为：“我认为让人们有意识地设计一年是准备好理解下一层的好方法。”
- en: Maybe he envisions his readers growing up with the series as it matures from
    microscopic code improvements to aligning a team? Perhaps I have a higher opinion
    of other people than he does, but I don’t understand how he can say that while
    also marketing it to senior engineers.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 也许他设想读者随着系列作品的成熟而成长，从微小的代码改进到团队的协调？也许我对其他人的看法比他高，但我不明白他如何在向高级工程师推广的同时说出这些话。
- en: If you read this book, I recommend just skimming the first part with the list
    of tidyings and figuring out what everything is. He does say some stuff later
    about how to send tidyings for code review and why they provide value, but I’d
    expect most readers will be able to produce the same insights themselves after
    trying them a few times.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你读了这本书，我建议只是浏览第一部分的整理清单，并弄清楚每样东西是什么。他确实稍后说了一些关于如何发送代码审查整理清单以及为什么它们提供价值的内容，但我预计大多数读者在几次尝试后也能自己得出相同的见解。
- en: But really, the interesting contents could be shortened to a list of Tweets.
    And I’ve done so [here](https://twitter.com/jimmykoppel/status/1770028266017239059).
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际上，有趣的内容可以缩短为推文列表。我已经在[这里](https://twitter.com/jimmykoppel/status/1770028266017239059)做了。
- en: Kent Beck is a rather renowned software engineer, having created Test-Driven
    Development, Extreme Programming, and jUnit. His Substack has many pieces I enjoyed
    a lot, such as his posts on [bitemporality](https://tidyfirst.substack.com/p/eventual-business-consistency)
    and [measuring developer productivity](https://tidyfirst.substack.com/p/measuring-developer-productivity).
    In our interactions, he’s been an exemplar of a gentleman, and also writes about
    the insights he’s learned that’s made him so. Overall, he has a lot of interesting
    things to say, both about software engineering and about dealing with people and
    emotions. But you won’t find them in this book.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 肯特·贝克是一位相当著名的软件工程师，他创造了测试驱动开发、极限编程和JUnit。他的Substack有很多我喜欢的作品，比如他关于[bitemporality](https://tidyfirst.substack.com/p/eventual-business-consistency)和[衡量开发者生产力](https://tidyfirst.substack.com/p/measuring-developer-productivity)的文章。在我们的互动中，他一直是绅士的榜样，并且写下了使他如此的见解。总的来说，他有很多有趣的观点，无论是关于软件工程还是处理人与情感的。但你在这本书中找不到它们。
- en: So, if you’re considering buying this book, just purchase a subscription to
    his Substack instead. He’ll earn more and you’ll learn more. The only one who
    loses is the publisher.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你考虑购买这本书，不如直接订阅他的Substack。他会赚更多，你会学到更多。唯一吃亏的是出版商。
- en: '*Thanks to [Hillel Wayne](https://www.hillelwayne.com/) for comments on earlier
    drafts of this post.*'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢[Hillel Wayne](https://www.hillelwayne.com/)在本文早期草稿中的评论。*'
