- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 12:47:58'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 12:47:58'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Hello! — FuryGpu
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello! — FuryGpu
- en: 来源：[https://www.furygpu.com/blog/hello](https://www.furygpu.com/blog/hello)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.furygpu.com/blog/hello](https://www.furygpu.com/blog/hello)
- en: After almost four years of developing a custom full-stack GPU in my spare time,
    I figured it was about time to start putting together some materials to highlight
    the project, its technical details, and its future. This has been my first (and
    only!) FPGA design, and I hope to use this space to share some of what I have
    learned while building this *extremely* complicated piece of hardware.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在业余时间开发定制全栈GPU将近四年之后，我觉得是时候开始整理一些材料来突出这个项目，它的技术细节以及未来计划了。这是我第一次（也是唯一一次！）进行FPGA设计，我希望利用这个空间分享我在构建这个*极其*复杂硬件时学到的一些东西。
- en: Throughout the last fourteen years of my career in the games industry (and for
    nearly a decade before in my spare time!) I’ve been focused on the software side
    of rendering - the techniques necessary to utilize the GPU hardware to render
    3D graphics at real-time framerates. While I was extremely familiar with everything
    involved in this process on the host side, the actual details of how the hardware
    that performed these actions was built was not something I had ever had access
    to. After putting together Ben Eater’s [8-bit breadboard compute](https://eater.net/8bit)r
    and then picking up an [Arty Z7](https://digilent.com/shop/arty-z7-zynq-7000-soc-development-board/)
    development board on a whim, I realized that building a GPU from scratch, while
    a massive and daunting project, was something I certainly could teach myself to
    do. I’d spend a few months making a spinning cube or something, and be done with
    it.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我职业生涯的最后十四年中（以及在此之前的近十年业余时间！），我一直专注于渲染软件端 - 利用GPU硬件以实时帧率渲染3D图形所需的技术。虽然我对这个过程的所有主机端涉及都非常熟悉，但实际执行这些操作的硬件细节却是我从未接触过的。在组装完Ben
    Eater的[8位面包板计算机](https://eater.net/8bit)r并随意购买了[Arty Z7](https://digilent.com/shop/arty-z7-zynq-7000-soc-development-board/)开发板之后，我意识到从零开始构建GPU虽然是一个庞大且令人畏惧的项目，但我确实能够自学。我花了几个月时间制作一个旋转的立方体之类的东西，然后就完成了。
- en: Nearly four years later and the project has turned from a neat little tech demo
    idea into a fully-fledged, real-world, plug-it-into-your-computer GPU. I taught
    myself SystemVerilog, figured out how FPGAs work, and spent countless hours refactoring,
    redesigning, and streamlining the design until I could get Quake to render at
    semi-real-time framerates. During this time, Xilinx released their [Kria SoMs](https://www.amd.com/en/products/system-on-modules/kria.html)
    - insanely cheap Zynq UltraScale+ FPGAs with a ton of DSP units and a (comparatively)
    massive amount of LUTs and FFs, and of particular interest, a hardened PCIe core.
    The next step was clear - this GPU needed to become a *real* GPU. One I could
    plug into my computer and use to play real games.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 将近四年后，这个项目从一个有趣的技术演示想法变成了一个完整的、现实世界中的、可以插入计算机使用的GPU。我自学了SystemVerilog，弄清楚了FPGA的工作原理，并花了无数小时重构、重新设计和优化设计，直到我能够使Quake以半实时帧率渲染。在此期间，Xilinx发布了他们的[Kria
    SoMs](https://www.amd.com/en/products/system-on-modules/kria.html) - 配备大量DSP单元和（相对而言）大量LUT和FF的超便宜Zynq
    UltraScale+ FPGA，尤其值得注意的是，硬件化的PCIe核心。下一步很明确 - 这个GPU需要成为一个*真正*的GPU。一个我可以插入我的计算机并用来玩真正游戏的GPU。
- en: Designing the schematic for and laying out a PCIe graphics card, even with much
    of the FPGA circuitry built into the SOM, was a herculean effort. However, I’d
    already spent several years on the project, so why not? After several months of
    work laying out the board in KiCad and fixing all the issues I’d find as soon
    as JLCPCB delivered each revision, I finally had a board with a powerful FPGA,
    DisplayPort and HDMI output, and a 4-lane PCIe connector that I could plug into
    my test rig and write drivers for.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 设计并布置PCIe图形卡的原理图，即使大部分FPGA电路已集成到SOM中，也是一项艰巨的工作。然而，我已经在这个项目上花了几年时间，为什么不继续呢？经过几个月的在KiCad中布局板子，并在JLCPCB交付每个版本后修复所有问题，我终于有了一个装有强大FPGA、DisplayPort和HDMI输出以及4通道PCIe连接器的板子，我可以将其插入我的测试架并编写驱动程序。
- en: Of all the parts of this project, writing Windows drivers for it have been *the
    most* painful. Eventually, I got everything working. I wrote a custom graphics
    API to communicate with the GPU, wrote Windows kernel drivers for the display
    and audio, and now have a fully-functional piece of graphics hardware that can
    render Quake at a solid 60 frames per second.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目的所有部分中，为它编写Windows驱动程序是*最*痛苦的。最终，我解决了所有问题。我编写了一个自定义的图形API来与GPU通信，为显示和音频编写了Windows内核驱动程序，现在拥有一个可以以稳定的60帧每秒渲染《奇兵》的完全功能的图形硬件。
- en: While I’m writing all of this after the fact, I do hope that some of what I
    eventually detail here will prove useful (or at least, interesting) to the next
    person that decides to embark on such a ridiculous journey.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我是事后写下这一切的，但我希望我最终在这里详细描述的部分对下一个决定踏上这样一个荒谬旅程的人会证明有用（或者至少是有趣的）。
- en: '- Dylan'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: '- Dylan'
