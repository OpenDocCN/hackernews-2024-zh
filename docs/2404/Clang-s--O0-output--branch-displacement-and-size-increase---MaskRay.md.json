["```\n1\n2\n3\n4\n\n```", "```\nja foo    # jump short if above, 77 <rel8>\nja foo    # jump near if above, 0f 87 <rel32>\n.nops 126\nfoo: ret\n\n```", "```\n1\n2\n3\n4\n5\n\n```", "```\nvoid foo(int a) {\n\n if (a) bar();\n}\n\n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n```", "```\nfoo:                                    # @foo\n# %bb.0:                                # %entry\n pushq   %rbp\n movq    %rsp, %rbp\n subq    $16, %rsp\n movl    %edi, -4(%rbp)\n cmpl    $0, -4(%rbp)\n je      .LBB0_2\n# %bb.1:                                # %if.then\n movb    $0, %al\n callq   bar@PLT\n.LBB0_2:                                # %if.end\n addq    $16, %rsp\n popq    %rbp\n retq\n\n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n```", "```\n# -mrelax-all\nMCSection\n MCDataFragment: empty\n MCAlignFragment: alignment=4\n MCDataFragment: instructions including JE (jump near if equal, 6 bytes)\n # -mno-relax-all\nMCSection\n MCDataFragment: empty\n MCAlignFragment: alignment=4\n MCDataFragment: instructions before JE (push; mov; sub; mov; cmp)\n MCRelaxableFragment: JE (jump short if equal, 2 bytes). This JE could be expanded, but not in this case.\n MCDataFragment: instructions after JE (mov; call; add; pop; ret) \n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n```", "```\nblt a1, a2, .Lfoo\nbeqz a1, .Lfoo\n.Lfoo:\n # llvm-mc -filetype=obj -triple=riscv64 -mattr=+relax,+c -mc-relax-all\nblt a1, a2, .Lfoo       # R_RISCV_BRANCH(.Lfoo), range: +-4KiB\nc.beqz a1, .Lfoo        # R_RISCV_BRANCH(.Lfoo)\n.Lfoo:\n# llvm-mc -filetype=obj -triple=riscv64 -mattr=+relax,+c\nbge a1, a2, .+8\njal zero, .Lfoo         # R_RISCV_JAL(.Lfoo), range: +-2MiB\nc.bneq a1, .+8\njal zero, .Lfoo         # R_RISCV_JAL(.Lfoo) \n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n```", "```\n// -mrelax-all\n1: 13919\n2: 1\n // -mno-relax-all\n1: 13103\n2: 793\n3: 23\n4: 1 \n```"]