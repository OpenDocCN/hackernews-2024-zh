- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 12:55:30'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: autoconf makes me think we stopped evolving too soon
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://rachelbythebay.com/w/2024/04/02/autoconf/](https://rachelbythebay.com/w/2024/04/02/autoconf/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: autoconf makes me think we stopped evolving too soon
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I've gotten a few bits of feedback asking for my thoughts and/or reactions to
    the whole "xz backdoor" thing that happened over the past couple of days. Most
    of my thoughts on the matter apply to autoconf and friends, and they aren't great.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: I don't have to cross paths with those tools too often these days, but there
    was a point quite a while back when I was constantly building things from source,
    and a ./configure --with-this --with-that was a given. It was a small joy when
    the thing let me reuse the old configure invocation so I didn't have to dig up
    the specifics again.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: 'I got that the whole reason for autoconf''s derpy little "recipes" is that
    you want to know if the system you''re on supports X, or can do Y, or exactly
    what flavor of Z it has, so you can #ifdef around it or whatever. It''s not quite
    as relevant today, but sure, there was once a time when a great many Unix systems
    existed and they all had their own ways of handling stuff, and no two were the
    same.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: So, okay, fine, at some point it made sense to run programs to empirically determine
    what was supported on a given system. What I don't understand is why we kept running
    those stupid little shell snippets and little bits of C code over and over. It's
    like, okay, we established that this particular system does <library function
    foobar> with two args, not three. So why the hell are we constantly testing for
    it over and over?
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Why didn't we end up with a situation where it was just a standard thing that
    had a small number of possible values, and it would just be set for you somewhere?
    Whoever was responsible for building your system (OS company, distribution packagers,
    whatever) could leave something in /etc that says "X = flavor 1, Y = flavor 2"
    and so on down the line.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: And, okay, fine, I get that there would have been all kinds of "real OS companies"
    that wouldn't have wanted to stoop to the level of the dirty free software hippies.
    Whatever. Those same hippies could have run the tests ONCE per platform/OS combo,
    put the results into /etc themselves, and then been done with it.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: Then instead of testing all of that shit every time we built something from
    source, we'd just drag in the pre-existing results and go from there. It's not
    like the results were going to change on us. They were a reflection of the way
    the kernel, C libraries, APIs and userspace happened to work. Short of that changing,
    the results wouldn't change either.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: But no, we never got to that point, so it's still normal to ship a .tar.gz with
    an absolute crap-ton of dumb little macro files that run all kinds of inscrutable
    tests that give you the same answers that they did the last time they ran on your
    machine or any other machine like yours, and WILL give the same answers going
    forward.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但是不，我们从未达到那一点，因此仍然可以正常地使用一个 .tar.gz，其中包含大量愚蠢的小宏文件，运行各种晦涩难懂的测试，给出的答案与它们上次在您的机器或任何类似您的机器上运行时的答案相同，并且将来也会给出相同的答案。
- en: That means it's totally normal to ship all kinds of really crazy looking stuff,
    and so when someone noticed that and decided to use that as their mechanism for
    extracting some badness from a so-called "test file" that was actually laden with
    their binary code, is it so surprising that it happened? To me, it seems inevitable.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着正常情况下可以发布各种看起来非常疯狂的东西，所以当有人注意到这一点并决定将其作为从一个所谓的“测试文件”中提取一些坏东西的机制时，这样做是否令人惊讶？对我来说，这似乎是不可避免的。
- en: Incidentally, I want to see what happens if people start taking tarballs from
    various projects and diff them against the source code repos for those same projects.
    Any file that "appears" in the tarball that's allegedly due to auto[re]conf being
    run on the project had better match something from the actual trees of autoconf,
    automake, ranlib, gettext, or whatever else goofy meta-build stuff is being used
    these days.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，我想看看如果人们开始从各种项目中获取 tarballs 并将它们与这些项目的源代码存储库进行 diff，会发生什么。任何在 tarball
    中“出现”的文件，据说是由于在项目上运行了 auto[re]conf，最好与实际的 autoconf、automake、ranlib、gettext 或其他现在使用的怪异的元构建工具的树中的某些内容匹配。
- en: '[PRE0]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '... there''s no build-to-host.m4 with that sha1sum out there, *except* for
    the bad one in the xz release. That part was caught... but what about every other
    auto* blob in every other project out there? Who or what is checking those?'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: ……没有与那个 sha1sum 匹配的 build-to-host.m4，*除了*在 xz 发行版中的那个坏的。这一部分被发现了……但其他所有项目中的每个其他
    auto* blob 呢？谁或什么在检查它们？
- en: And finally, yes, I'm definitely biased. My own personal build system has a
    little file that gets installed on a machine based on how the libs and whatnot
    work on it. That means all of the Macs of a particular version of the OS get the
    same file. All of the Debian boxes running the same version get the same file,
    and so on down the line.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是的，我肯定有偏见。我的个人构建系统有一个小文件，根据 libs 和其他工作方式在机器上安装。这意味着所有特定版本操作系统的 Mac 都会得到相同的文件。所有运行相同版本的
    Debian 箱子也会得到相同的文件，依此类推。
- en: I don't keep asking the same questions every time I go to build stuff. That's
    just madness.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会每次构建东西时都问相同的问题。那只是疯狂。
