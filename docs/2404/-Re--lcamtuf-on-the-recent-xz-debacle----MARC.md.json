["```\n[[prev in list](?l=openbsd-misc&m=171227533216409&w=2)] [[next in list](?l=openbsd-misc&m=171228232018853&w=2)] [[prev in thread](?l=openbsd-misc&m=171227533216409&w=2)] [[next in thread](?l=openbsd-misc&m=171228232018853&w=2)] \n List:       [openbsd-misc](?l=openbsd-misc&r=1&w=2)\nSubject:    [Re: lcamtuf on the recent xz debacle](?t=171179462900001&r=1&w=2)\nFrom:       [Christian Weisgerber <naddy () mips ! inka ! de>](?a=95737891800004&r=1&w=2)\nDate:       [2024-04-05 1:07:18](?l=openbsd-misc&r=1&w=2&b=202404)\nMessage-ID: [Zg9Oxp-pPTkvcatH () lorvorc ! mips ! inka ! de](?i=Zg9Oxp-pPTkvcatH%20()%20lorvorc%20!%20mips%20!%20inka%20!%20de)\n[Download RAW [message](?l=openbsd-misc&m=171227941117852&q=mbox) or [body](?l=openbsd-misc&m=171227941117852&q=raw)]\n\nKatherine Mcmillan:\n\n> Just for clarity, does anyone know what \"Unix-like operating systems\"\n> would be affected by this?\n\nNone.  TLDR: The build process of the backdoor explicitly aborts\non platforms other than Linux x86-64.\n\nAs the maintainer of the archivers/xz port, I took a look at the\nbuild stages of the malicious code, because I had already prepared\nan update to 5.6.1 and run the code in question.\n\nTwo ostensible test files were committed to the xz repository\nimmediately before the 5.6.0 release and updated immediately before\n5.6.1: bad-3-corrupt_lzma2.xz, which as the name suggests is a\nmalformed compressed file, and good-large_compressed.lzma, which\nis a valid file and extracts to a mixture of easily compressible\nrepeated characters and uncompressible pseudo-random data.  By\nthemselves those files are completely harmless.\n\nAs is common practice, the xz repository only contains input files\nlike configure.ac and Makefile.am for the GNU autotools.  For the\nrelease tarball, an autotools run generates the actual configure\nscript, Makefile.in, etc., so the result can be built with \"./configure\n&& make\".\n\nFor the 5.6.0 and 5.6.1 release, the build-to-host.m4 macro package\nthat ships as part of GNU gettext was replaced by a modified version\nthat was copied into the release tarball and, importantly, was used\nto generate a modified configure script.  Let's call this stage 0.\n\nWhen you run the configure script, the stage 0 shell snippet is\nexecuted.  The malicious code runs a pipe of commands that reads\nthe bad-3-corrupt_lzma2.xz file, swaps some byte values to turn it\ninto a valid file, extracts the file with xz (which must already\nbe installed), and feeds the content--let's call it stage 1--into\na shell.\n\nIn 5.6.1, the stage 1 script will abort right away if the operating\nsystem doesn't identify as \"Linux\" with uname(1).  The script runs\nanother pipe of commands that decompresses good-large_compressed.lzma,\npicks some chunks of the result, replaces some byte values to turn\nit into a valid LZMA data stream, extracts the content--let's call\nit stage 2--and feeds it into a shell.  The data manipulation in\nstage 1 uses the head(1) command with the \"-c\" command flag, which\nisn't available on OpenBSD.\n\nIn 5.6.1 there is another early attempt in the stage 2 script to\nverify that the operating system is Linux, however the syntax is\nbroken so it doesn't actually do anything.  The stage 2 script runs\nquite a number of tests to ensure that the environment in which it\nexecutes is the one it expects: details of the directory tree,\ndetails of the files generated by configure, that the platform is\nx86-64 Linux, that the compiler is gcc and the linker GNU ld, that\nthe IFUNC feature is available, that is runs as part of a .deb or\n.rpm package build.  If any single one of those tests fails, the\nscript aborts right away.  If everything checks out, stage 2 again\nruns a series of data manipulation commands to extract from\ngood-large_compressed.lzma two object files and injects them into\nthe build to generate a manipulated liblzma.  Various checks that\nstage 2 performs will fail on OpenBSD and again it relies on\n\"head -c\" and now also on the GNU version of sed(1) to perform the\nrequired data manipulations.\n\nFor the actual code inserted into liblzma on Linux x86-64, I have\nto refer to the ongoing reverse engineering performed by the Linux\npeople.  It is my understanding that its code is triggered by an\nIFUNC constructor during dynamic linking that checks that it is in\nthe address space of a /usr/sbin/sshd process and then proceeds to\nredirect an RSA signature verification routine to its own malicious\ncode.  Liblzma ends up dynamically linked to sshd because of a\nsystemd-related extension added by many Linux packagers that pulls\nin liblzma as an unrelated dependency.  The actual backdoor is\ntriggered by an SSH connection that authenticates with a certificate\nthat includes an RSA public key, part of which is a payload that\nis checked against a fingerprint, then verified for a correct Ed448\nsignature with a key only the attacker knows, and then this content\nis directly executed in a shell spawned by sshd for remote code\nexecution.\n\nThe build stage of the backdoor is well hidden.  The stage 0 shell\nsnippet looks at first glance like a plausible part of the poorly\nreadable autoconf/automake tooling.  The test files that hide the\nfurther stages and actual backdoor code are unsuspicious by themselves.\n5.6.1 added further tests to abort early on non-Linux platforms,\npresumably so that nobody examining build problems would stumble\nover anything suspicious.  I think the check for a .deb or .rpm\nbuild is intended to inject the backdoor only during automated\npackage building, so people developing or debugging xz would not\naccidentally discover it in the build directory.\n\nI can identify four commits in the xz Git repository that are related\nto the backdoor.  In chronological order:\n\n2024-02-23 cf44e4b Tests: Add a few test files.\n2024-03-09 82ecc53 liblzma: Fix false Valgrind error report with GCC.\n2024-03-09 8c9b8b2 liblzma: Fix typos in crc32_fast.c and crc64_fast.c.\n2024-03-09 6e63681 Tests: Update two test files.\n\ncf44e4b and 6e63681 directly add and update hidden malicious code.\nAside from its documented change, 82ecc53 introduces an unmotivated\nwhitespace change...\n\n-       return is_arch_extension_supported()   \n+       return  is_arch_extension_supported()\n\n... which is then reverted by 8c9b8b2\\.  The stage 2 script actually\nrelies on matching \"return is_arch_extension_supported\", so 82ecc53\nbreaks the backdoor injection and 8c9b8b2 restores it.  Maybe a\nchange intended for testing by the malware author accidentally\nslipped in.\n\nAnother malicious commit, entirely unrelated to the backdoor, is\n\n2024-02-26 328c52d Build: Fix Linux Landlock feature test in Autotools\nand CMake builds.\n\nThis introduces a syntax error that breaks Landlock detection when\nusing CMake instead of the autotools build framework, so the Linux\nsandboxing is disabled in this case.  The syntax error is a single\nperiod '.' as the first character on an otherwise empty line of C\ncode.  That is designed so it will be easily missed.  It does not\nplausibly pass for a typo because no typical editing glitch will\nleave a '.' character there.\n\nI'm not aware of any clearly malicious commit before 2024-02-23.\n\nI'll conclude this brain dump by pointing out that much of the\nemerging narrative about this backdoor that you can read all over\nthe net is based on idle speculation and selective interpretation\nof facts.\n\n-- \nChristian \"naddy\" Weisgerber                          naddy@mips.inka.de\n\n[[prev in list](?l=openbsd-misc&m=171227533216409&w=2)] [[next in list](?l=openbsd-misc&m=171228232018853&w=2)] [[prev in thread](?l=openbsd-misc&m=171227533216409&w=2)] [[next in thread](?l=openbsd-misc&m=171228232018853&w=2)] \n\n```"]