- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:19:41'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:19:41'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: I hate Rust (programming language) - dorinlazar.ro
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我讨厌 Rust（编程语言）- dorinlazar.ro
- en: 来源：[https://dorinlazar.ro/240228-i-hate-rust-programming-language/](https://dorinlazar.ro/240228-i-hate-rust-programming-language/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://dorinlazar.ro/240228-i-hate-rust-programming-language/](https://dorinlazar.ro/240228-i-hate-rust-programming-language/)
- en: Now, hear me out, it’s the middle of the night here and I’m feeling a bit rusty
    with my English, but we’ll try to be creative with this one. There are many ways
    in which we can say that we have a poisonous community, and I’ll enumerate a few
    in this article. Also, obviously, this is a very subjective article. It’s not
    about technical merits, although it will mention those as well, it’s more about
    the social engineering around [Rust (programming language)](https://en.wikipedia.org/wiki/Rust_%28programming_language%29).
    But I hate it, and I don’t even have to touch Rust code yet (but probably will
    in the future). So join me in this wonderful trip of discovery to see in how many
    ways we can say the same thing, which is that the Rust community sucks.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请听我说，这里已经深夜，我的英语感觉有点生疏，但我们将尝试在这篇文章中发挥创造力。有许多方法可以表达我们对有毒社区的看法，我将在本文中列举几种。显然，这是一篇非常主观的文章。它不是关于技术优点的，尽管也会提到这些，而是更多关于围绕[Rust（编程语言）](https://en.wikipedia.org/wiki/Rust_%28programming_language%29)进行的社会工程。但我讨厌它，甚至还没有接触过
    Rust 代码（但可能将来会）。因此，请和我一起踏上这段奇妙的发现之旅，看看我们能用多少种方式表达同样的观点，即 Rust 社区很差劲。
- en: My personal experience with Rust
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我对 Rust 的个人经历
- en: I tried learning Rust three different times. The first time it was way before
    2020, when the first drops of enthusiasm around the language started to whet people’s
    appetites. Probably 2015, probably prompted by the release of 1.0, and I can tell
    that it looked interesting. I tried to learn it then, but I can’t remember what
    the problem was - I probably didn’t even go through a full write-compile-execute
    cycle for a „Hello World” program, most likely because I was burned out and in
    denial about it. I read a bit about the language, though, took note, said „yeah,
    that sounds interesting” about its „const by default” strategy, and moved on.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我尝试学习 Rust 三次。第一次是在 2020 年之前，当时这门语言初露锋芒开始引起人们的兴趣。可能是在2015年左右，可能是受到1.0版本发布的影响，我可以说它看起来很有趣。那时我试图学习它，但我不记得当时的问题是什么
    - 我可能甚至没有完成一个完整的写-编译-执行循环来运行一个“Hello World”程序，很可能是因为我感到疲惫并对此否认。尽管如此，我还是读了一些关于这门语言的内容，记了笔，说“是的，听起来很有趣”，关于它的“默认为常量”的策略，然后继续前行。
- en: My second time was somewhere right before 2020, in pre-pandemic aka „the good
    old” times. Back then I was already in full burnout mode and I opened a Rust book
    because learning new things made me feel like I was reconnecting with my love
    for computer science in general. For some reason, learning new things was a good
    burnout coping mechanism, but everyone’s burnout is different. So I started reading
    on Rust and the first chapter proved to be a moral lesson about inclusion, and
    I was like&mldr; friend. I’m not here for a diversity lecture, I’m here to learn
    about the language. But there it went, the book talked about being Rustaceans
    (I really hated the term), in love with diversity, and it felt more like a brainwashing
    DEI lecture than a serious conversation about a technical topic. This time, though,
    I tried a bit more of the language, I actually wrote some programs, used some
    libraries to do something relatively small, and it felt deeply unsatisfying -
    mostly because the libraries weren’t there yet. I also disliked `cargo`, as well
    as the way that the book suggested I should set-up Rust, which I see is the current
    way it’s recommended to be installed as well - by downloading and running a script
    off the internet. As a 80s and 90s kid, this felt irresponsible. It still is,
    but we’ll talk about this later.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我第二次接触 Rust 是在 2020 年前的某个时间点，也就是疫情前的“好旧时光”。那时候我已经完全处于燃尽状态，我打开了一本 Rust 的书，因为学习新事物让我感觉重新连接了我对计算机科学的热爱。由于某种原因，学习新东西是一种很好的燃尽缓解机制，但每个人的燃尽感受都不同。所以我开始阅读
    Rust，第一章证明是一个关于包容性的道德课程，我觉得&mldr;朋友。我来这里不是听多样性讲座，我是来学习语言的。但书中却谈到了成为 Rustaceans（我真的讨厌这个术语），热爱多样性，感觉更像是一场洗脑的多样性、公平与包容（DEI）讲座，而不是关于技术话题的严肃对话。不过这一次，我尝试了更多的语言，实际上写了一些程序，使用了一些库完成了一些相对小的任务，但感觉非常不满意
    - 主要是因为库还不够成熟。我也不喜欢 `cargo`，以及书中建议我安装 Rust 的方式，看起来现在推荐的方式仍然是通过从互联网上下载并运行脚本。作为80年代和90年代的孩子，我觉得这很不负责任。现在依然如此，但这个问题我们以后再谈。
- en: My third time is my „I give up on this shit” time. Late 2020, early 2021, deep
    pandemic times, in my sabbatical stay-at-home time, trying to cope with the fallout
    of my burnout. I skipped the chapter on diversity (I somehow took the same book
    to read) and started writing more code. The code did not compile. I was shocked.
    It’s quite an amazing feat, that, to have a recommended learning material that
    can make your very first program not compile. I will not dig through my archives
    but I discussed this at length back then, because it was really funny. The problem
    was, of course, the fact that I didn’t copy-paste right the setup sequence, and
    instead of choosing a certain numbered version of the `random` library (if I remember
    correctly) I let cargo download the latest version which had a completely different
    API. I think that the program was a „guess the number” program, and writing it
    and getting a compile error was absolutely batshit insane. I had a very „get to
    your fucking senses” moment and dropped Rust forever (until I’ll have to pick
    it up again because that’s just my luck).
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我的第三次是我放弃这个狗屁东西的时候。2020年末，2021年初，深深的大流行时期，在我休假的居家时间里，试图应对我燃尽的余烬。我跳过了多样性的章节（我不知何故拿了同一本书来读），开始写更多的代码。代码无法编译。我震惊了。真是太神奇了，一个推荐的学习材料居然能让你的第一个程序无法编译。我不会深究我的存档，但那时我确实详细讨论过这个问题，因为真的太搞笑了。问题当然是，我没有正确地复制粘贴设置序列，而是让Cargo下载了最新版本，其中API完全不同，（如果我没记错的话）我想那个程序是一个“猜数字”程序，写下来后编译出错实在是疯狂极了。我有一个非常“醒醒吧”（get
    to your fucking senses）的时刻，从此放弃了Rust（直到我不得不再次拾起它，因为这就是我的运气）。
- en: Now, listen up, I’m very good at avoiding technologies. I managed to avoid the
    wave of Microsoft bullshit UI technologies for a very long time; I almost managed
    to avoid MFC as well, although I had to implement MFC sync objects in Linux in
    2001, until (just my luck) I had to pick up MFC when nobody used it anymore and
    implement stuff on Windows CE just when everyone was waking up to the fact that
    Microsoft’s monopolistic attitude is not good for business and switched to Linux.
    It was a frustrating time, to see all this flurry around Linux (of which I was
    a relatively early adopter) precisely when I had to use Microsoft technologies,
    but&mldr; heh, that’s my luck. Also, for a long time I managed to avoid Java (although
    I had to learn some Java for a C# interview that turned out to be my next job,
    and C# proved to be a pleasant surprise, said the Stockholm-syndrome sufferer,
    me). I managed for a long time to avoid Javascript as well (and I think that I’m
    still thankful that I can ignore innovations such as leftpad). So ignoring a technological
    artefact as an experience is not new to me, and I thought I will be able to ignore
    Rust hopefully for the rest of my life. That proved to be impossible.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，听好了，我非常擅长避开技术。我成功地避开了微软胡扯的UI技术浪潮很长时间；我几乎也成功地避开了MFC，尽管2001年我不得不在Linux上实现MFC同步对象，直到（真是我运气）没人再用MFC了，我又不得不在Windows
    CE上实现东西，正当大家都意识到微软的垄断态度对业务不利，转向Linux时。那段时间真是令人沮丧，看到Linux（我是比较早采用者）周围如此繁忙，而我却必须使用微软技术，但&mldr;呵呵，这就是我的运气。另外，我很长时间也设法避开了Java（尽管为了一个C#面试不得不学一些Java，结果成了我的下一个工作，而C#被证明是一个令人愉快的惊喜，说话者有斯德哥尔摩综合征的我）。我还设法很长时间避开了Javascript（而且我想我仍然感激我可以忽略像leftpad这样的创新）。因此，忽视一种技术产品作为一种经验对我来说并不新鲜，我曾以为我能够希望一生都能忽视Rust。但事实证明这是不可能的。
- en: Let me tell you about our Lord and Savior Rust
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我来告诉你关于我们的主教和救世主Rust
- en: 'I think I started noticing the Rust proselitizing in 2022, when it started
    being everywhere, even in places you didn’t want it to be. Every C++ conference
    had a talk on Rust, the Rust community was infecting every corner of the internet
    that pertained to C or C++ (and, coincidentally, C#, because sometimes search
    engines ignore that # character). Everyone started talking about the merits of
    The One True Language, which were basically little more than enabling some sanitizers
    in the command line for the C++ compiler, and the borrow-checker which felt like
    compile-time garbage collection made hard. And, to be frank, once everyone started
    talking about Rust it felt like a cacophonous chorus that tried to sing about
    the future of the computing while not contributing with much to it. „We can rewrite
    everything in Rust!” „We can rewrite the Web in Rust!” „Rewrite it in Rust”. Well,
    fuck off, why don’t you rewrite it? Ah, because you’re too busy writing on social
    media platforms about how great Rust is instead of writing the code, heh?'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '我认为我开始注意到 Rust 的传教活动是在 2022 年，当它开始无处不在，甚至在你不希望看到它的地方。每个 C++ 的会议上都有关于 Rust 的讲座，Rust
    社区渗透到了与 C 或 C++ 相关的互联网的每一个角落（巧合的是，有时搜索引擎会忽略掉那个 # 字符的 C#）。每个人都开始谈论“唯一真正的语言”的优点，基本上不过是在
    C++ 编译器的命令行中启用一些检查器，以及那种感觉像是编译时垃圾回收的借用检查器。坦率地说，一旦每个人开始谈论 Rust，就感觉像是一个嘈杂的合唱团，试图唱出计算机未来的曲调，却没有为之贡献太多。“我们可以用
    Rust 重写一切！”“我们可以用 Rust 重写 Web！”“用 Rust 重写它”。哎呀，为什么不去重写呢？啊，因为你们忙着在社交媒体平台上写 Rust
    有多棒，而不是写代码，对吧？'
- en: And I’m not saying that there aren’t a lot of busybodies who actually do the
    thing, not talk about the thing. What I’m saying is that the people who don’t
    are very noisy about adopting Rust and not doing it at the same time. „If only
    we could rewrite this in Rust!” „You old people are gatekeeping with your C code
    and memory unsafe languages!” „You’re horrible people for writing in memory unsafe
    languages!” „It’s a cardinal sin to write code in C and C++ in the year of our
    Lord 10 (or 2022)”. There was not a space for discussion with the Rustaceans -
    despite the inclusion discourse on the book on Rust, the community around the
    language felt awkwardly aggressive and exclusivistic. Especially as their discourse
    was really light on arguments, beside the const by default and the borrow checker.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不是说没有很多真正在做事情的忙碌人，而不是只是谈论事情。我想说的是，那些不这么做的人，对于采用 Rust 却非常喧哗。“要是我们能用 Rust 重写这个！”“你们这些老人用你们的
    C 代码和内存不安全的语言在门户前站岗！”“你们写内存不安全的语言真是太可恶了！”“在我们主的一年（或 2022 年）用 C 和 C++ 写代码是一个致命的罪过”。与
    Rustaceans（Rust 社区成员）没有讨论的空间 - 尽管 Rust 书籍中包含关于 Rust 的社区的讨论，围绕该语言的社区感觉上显得非常具侵略性和排外性。特别是因为他们的讨论除了默认常量和借用检查器之外几乎没有实质性的论点。
- en: So many issues caused by memory unsafe languages
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如此多的问题是由内存不安全语言引起的
- en: Perhaps the most hypocritical thing about Rust is the claim that the world’s
    ails are caused by the fact that in C++ (the primary target of Rust-infested brains)
    you can still write very bad code. There are numbers behind these claims, and
    indeed, there is a lot of bad code out there. I do agree that the software world
    requires a rewrite - I have argued about dropping POSIX altogether since POSIX
    propagates the single worst idea in the history of computing. I also argued that
    there’s not enough research done in the Operating Systems field and definitely
    not enough effort put into replacing Linux, itself becoming the stone tied to
    everyone’s necks right now. Hell, people keep complaining that `systemd` exists,
    although it’s definitely a step in the right direction. But people are creatures
    of habit - and we create avenues to make ourselves feel righteous while continuing
    to do the bad things. And `rust` is one such way to feel righteous while continuing
    old behaviors.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 或许 Rust 最虚伪的一件事情是声称世界的问题是因为在 C++ 中（Rust 的主要目标）你仍然可以写非常糟糕的代码。这些说法后面有数据支持，的确，有很多糟糕的代码存在。我确实同意软件世界需要重写
    - 我曾经辩论过完全放弃 POSIX，因为 POSIX 传播了计算机历史上最糟糕的一个想法。我还争论说，在操作系统领域没有足够的研究，绝对没有足够的努力来替换
    Linux，它本身现在已成为每个人的负担。该死，人们一直在抱怨 `systemd` 的存在，尽管它绝对是朝正确方向迈出的一步。但人们是习惯性动物 - 我们创造出途径让自己感到正义，同时继续做坏事。`rust`
    就是这样一种方式，让人感到正义，同时继续旧的行为。
- en: I call `rust` similar to recycling plastic. We know that recycling plastic is
    not practical, it would be a lot better to not use plastic anymore, but not using
    plastic is very hard for the modern world. So we invent this small loophole in
    which we feel fine about the fact that every aspect of our lives is polluting
    the world - we *RECYCLE* and we feel good about it. This is the same with *rust
    rewrites*. We „rewrite everything in Rust” and we’ll feel good about not changing
    anything fundamental in the way we do things.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我称`rust`为回收塑料的类似物。我们知道回收塑料并不实际，最好的办法是不再使用塑料，但对于现代社会来说，不使用塑料非常困难。因此，我们发明了这个小漏洞，让我们对我们生活的每个方面都在污染世界中感到满意——我们*回收*，而我们对此感到良好。*rust重写*也是如此。我们“用Rust重新编写一切”，我们会因为没有改变我们做事情的基本方式而感到高兴。
- en: By now you’re asking yourself „what is this kid talking about?” and you’re right
    to do so. Well, friends, allow me to educate you. Most of the issues that people
    list as „memory unsafe languages” issues are caused by the syndrome of bad fundamental
    choices, and the origin of most bad fundamental choices is the one issue that
    is perpetuated by the fundamental API that is used by all, including Rust. POSIX,
    as well as Win32, the fundamental operating system interfaces, perpetuate the
    single most costly mistake in the history of computing, which is the **zero-terminated
    string**. No matter what you do, no matter how you do it and how you pack your
    data, in the end you will require communicating to your operating system, and
    you do that by passing a zero-terminated string, in one form or another. Until
    this mistake is completely eliminated from the operating system interfaces as
    well as the fundamental libraries.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在你可能会问自己，“这小子在说什么？”你问得对。那么，朋友们，请允许我来教育你们。人们列出的大多数“内存不安全语言”的问题都是由于糟糕的基本选择综合征引起的，而大多数糟糕的基本选择的起源是所有人，包括Rust在内，使用的基本API。POSIX和Win32作为基本操作系统接口，沿袭了计算历史上最昂贵的错误，即**零终止字符串**。无论你做什么，无论你如何做以及如何打包你的数据，最终你都需要通过某种形式传递零终止字符串与你的操作系统通信。在从操作系统接口以及基本库中完全消除这个错误之前。
- en: Rust doesn’t change this; it merely hides it. But one could argue that C++ also
    can hide this - sure, Rust does a better job at hiding this detail, but C++ is
    no different. This is why I prefer **rewrite it in Pascal** to **rewrite it in
    rust**. Pascal strings were fundamental types and always had the size of the string
    in them. There’s no need for this zero-terminated bullshit if you’re writing everything
    from the grounds up in Pascal. Unfortunately Pascal lost the race to becoming
    the dominant platform in the 80s, it’s a shame, but it is what it is.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: Rust并没有改变这一点；它只是隐藏了它。但有人可能会争辩说C++也可以隐藏这个问题——确实，Rust在隐藏这个细节上做得更好，但C++并没有不同。这就是为什么我更喜欢**重写成Pascal**而不是**重写成rust**。Pascal字符串是基本类型，始终包含字符串的大小。如果你从头开始在Pascal中编写一切，就不需要这个零终止的废话。不幸的是，Pascal在80年代失去了成为主导平台的竞争，这是遗憾，但事实就是这样。
- en: And here’s the kicker, the one thing that you were here for and you paid good
    money to your internet provider to display on your computer screen.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键是，你来到这里并向你的互联网服务提供商支付了一大笔钱来显示在你的计算机屏幕上的一件事。
- en: Rust is **not** a memory-safe language
  id: totrans-split-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rust **不是**一种内存安全的语言
- en: But the borrow checker! But the const by default! NO! You’re lying to me, Mr.
    Lazar, you’re the Bond villain in the story. [How dare you?!](https://knowyourmeme.com/memes/how-dare-you)
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但是借用检查器！但是默认的const！不！你在撒谎，拉扎尔先生，你是故事中的邦德恶棍。[你怎么敢？！](https://knowyourmeme.com/memes/how-dare-you)
- en: 'Now, listen up, as long as you can do stupid stuff in your language, your language
    is not memory safe; and as long as it’s common practice to do stupid stuff in
    your language, your language is not stupid-proof. As a primer on this one, I’ll
    use the current version of the [String class documentation on the official site
    dedicated to Rust documentation](https://doc.rust-lang.org/std/string/struct.String.html).
    One of the first examples looks like this:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请听好，只要你的语言中存在愚蠢的行为，你的语言就不是内存安全的；只要在你的语言中做愚蠢的事情是常规做法，你的语言就不是傻瓜证明的。作为一个入门，我将使用[Rust官方文档站点上String类的文档](https://doc.rust-lang.org/std/string/struct.String.html)的当前版本。其中的一个最初的例子看起来像这样：
- en: '[PRE0]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'I absolutely love the „we know these bytes are valid”, and this looks pretty
    bad. It’s probably safe to do so, but if we go further down the line we see stuff
    like:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常喜欢“我们知道这些字节是有效的”，这看起来相当糟糕。这样做可能是安全的，但是如果我们进一步深入，我们会看到这样的东西：
- en: '[PRE1]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, I’m not saying that this is not nice. It’s nice to mark your `unsafe` code,
    almost as nice as telling what exceptions your function will throw (and yes, this
    is a jab Java). But you get away with doing stupid shit when writing `unsafe`
    in your code, and this basically says „we know that we can’t do it. We can’t write
    safe code”. You have to be very naïve to think that a feature like `unsafe` will
    not be abused. Don’t get me wrong, I get it. You and your friends will definitely
    not use `unsafe` statements needlessly. You’ll only use it in an easy to prove
    manner, you’re writing good code, you’re writing safe code. But somewhere, down
    there, there is some `unsafe` statement that makes you write code that you call
    safe. That’s the plastic that keeps being produced while you’re recycling. This
    is the main point of hypocrisy for this language. Your language, friend, is not
    safe. It’s anything but.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我并不是在说这不好。标记你的`unsafe`代码很好，几乎和告诉你的函数会抛出什么异常一样好（是的，这是对Java的一种挑衅）。但是当你在代码中写`unsafe`时，你就可以逃脱做一些愚蠢的事情，基本上是在说“我们知道我们不能这样做。我们不能写安全的代码”。你必须非常天真才会认为`unsafe`这样的特性不会被滥用。不要误会，我理解。你和你的朋友们肯定不会毫无必要地使用`unsafe`语句。你们只会在容易证明的情况下使用它，你们写的是好代码，安全的代码。但是在某个地方，深藏在下面，有一些`unsafe`语句使你写的代码被称为安全。这就像在你回收时仍在生产的塑料一样。这是这种语言虚伪的主要观点。朋友，你的语言并不安全。它根本不安全。
- en: I will not even talk about the „[Blazingly 🔥 fast 🚀 memory vulnerabilities,
    written in 100% safe Rust. 🦀](https://github.com/Speykious/cve-rs)” (in all honesty,
    I don’t really care enough about Rust to actually check this in detail, but I’m
    sure that going through this project will be an interesting experience for all
    Rustaceans). I want to talk only about the `unsafe` feature thingy, and the false
    sense of security that the `unsafe` statement generates. As long as the truth
    is hidden to you, you can feel safe about it. And allow me to tell you that this
    is no different from writing code in C++ - you can write very safe code in C++,
    and defensive programming was a thing since the mid 90s and maybe before that.
    But your defensiveness can go until the libraries you use, and those libraries
    can mock your defensiveness to hell and back. You cannot tell if your library
    is really safe, or just a big bomb waiting to explode. You’re as safe as your
    system is, and let me tell you, but in your Rust executable there might be a ton
    of unsafety you have no clue about. But you feel safe because you didn’t write
    that `unsafe` label yourself. Someone else did, and someone else **has** to know
    better. Right? Right? Please tell me that it’s true!
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我甚至不想谈论“[以100%安全Rust编写的“火速🔥快🚀内存漏洞”](https://github.com/Speykious/cve-rs)”（说实话，我对Rust并不那么在意，所以我并没有详细检查过这个项目，但我确信浏览这个项目对所有的Rust爱好者来说都会是一次有趣的体验）。我只想讨论`unsafe`特性的事情，以及`unsafe`语句带来的虚假安全感。只要真相对你是隐藏的，你就可以感到安全。请允许我告诉你，这与在C++中编写代码没有什么不同
    - 你可以在C++中编写非常安全的代码，自从90年代中期甚至更早以来，防御性编程就已经存在了。但你的防御性可以延伸到你使用的库，这些库可能会让你的防御性骗了回来。你无法确定你的库是否真的安全，还是只是一个等待爆炸的大炸弹。你的系统有多安全，你就有多安全。但请允许我告诉你，在你的Rust可执行文件中可能有一大堆你不知道的不安全性。但你感觉安全，因为你并没有自己写下那个`unsafe`标签。是别人写的，别人**应该**比你更懂。对吧？对吧？请告诉我这是真的！
- en: Cargo culting
  id: totrans-split-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cargo仪式主义
- en: Perhaps the biggest thing that got everyone in the C++ community wet to the
    bone is `cargo`. OMG, it’s so nice to have `cargo` compile everything and download
    everything and&mldr;
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 或许让C++社区的每个人都热血沸腾的最大原因是`cargo`。天哪，拥有`cargo`编译所有东西并下载所有东西，真是太好了&mldr;
- en: Friends, fuck `cargo`. There’s really nothing good about `cargo` other than
    the enormous speed at which the car you’re driving can hit a wall. I mean, I get
    it. `cargo` is an enormous productivity tool. It’s so amazing, it allows you to
    download code off the internet and be so damn productive, and have&mldr;
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 朋友们，去他的`cargo`。`cargo`真的没有任何好处，除了你开车撞墙时速度之快。我是说，我理解。`cargo`是一个极好的生产工具。它如此惊人，允许你从互联网上下载代码，非常高效，并且&mldr;
- en: Friend. Don’t download code off the internet. Don’t copy/paste code off the
    internet, and don’t trust people from the internet. Why do you trust your fellow
    programmer from 5000 miles away? How is he different from you and how is he more
    competent than you? Why do you trust humanity so much (and how can you trust LLMs
    trained on data generated by humans)? Humans suck at writing code, and you should
    not trust stuff automatically.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '-   朋友。不要从互联网上下载代码。不要复制/粘贴互联网上的代码，也不要相信来自互联网的人。为什么你要信任来自5000英里之外的程序员？他与你有何不同，他比你更有能力吗？为什么你如此信任人类（你怎么能信任由人类生成数据训练的LLM）？人类很擅长写代码，你不应该自动信任这些东西。'
- en: And you can say that, you know, you can configure cargo to not bring stuff at
    random. To freeze dependencies. To freeze versions. But if you freeze versions
    you don’t get security updates. But if you don’t freeze versions you might get
    new dependencies. But, but, but.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: '-   而且你可以说，你知道，你可以配置`cargo`，以避免随机引入东西。冻结依赖项。冻结版本。但如果你冻结版本，你就得不到安全更新。但如果你不冻结版本，你可能会得到新的依赖项。但是，但是，但是。'
- en: This is not a new problem, it is an old problem that just got aggravated with
    delivering a shotgun for every foot in the industry. Also, as explained above
    with the `unsafe` thing, just because a tool can be configured to be used the
    right way it doesn’t mean that it will. Maybe Rajit in Pune will know how to configure
    and use `cargo` safely, but Jack in Mountain View gives no fucks about that and
    decides to ignore Rajit’s instructions. Just because safety rails exist doesn’t
    mean they get used, and just because you advertise certain abuses as a bad thing
    will not stop people from doing bad things. And `cargo` forces you to trust people
    that opened a github account almost automatically.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个新问题，而是一个旧问题，只是随着向行业中每只脚交付一把散弹枪而变得更加严重了。此外，正如上文所述的`unsafe`问题，仅仅因为一个工具可以配置为正确使用并不意味着它会被正确使用。也许普纳的拉吉特知道如何安全配置和使用`cargo`，但是加利福尼亚山景城的杰克对此毫不在意，并决定忽略拉吉特的指导。安全的栏杆存在并不意味着它们会被使用，而且仅仅因为你将某些滥用宣传为不好的事情并不能阻止人们做坏事。而且`cargo`几乎自动迫使你信任那些开了GitHub账户的人。
- en: I’m not saying not having something like `cargo` is better. However, most of
    this world was built on software that was QAed by people that did distributions,
    that offered some guarantees. If you go and buy stuff from RedHat you might get
    some support from them and you can expect that if a certain library is bad they
    will fix it in a few hours, days, or weeks, depending on the gravity of the issue.
    What guarantees does `cargo` offer? Either that you’ll not get your issues fixed
    unless you follow all the CVEs pertaining to all the dependencies that you fetch,
    if you choose to freeze your dependencies, or that you’ll have random people on
    github offering the same guarantees that a distributor used to offer. Is that
    feasible? Some people say it is. I see some real efforts made in this direction.
    Is it safe now? No. Will it be safe soon? No, most likely never. But it will always
    feel safe-ish. Enough for you not to care about this too much.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我不是说没有像`cargo`这样的东西更好。然而，这个世界上大部分软件都是由进行过分发测试并提供某些保证的人构建的。如果你从RedHat购买东西，你可能会得到他们的一些支持，并且你可以期待，如果某个库有问题，他们会在几个小时、几天或几周内修复它，这取决于问题的严重程度。`cargo`提供什么样的保证呢？要么你不遵循所有与你获取的所有依赖相关的CVE（公共漏洞及其利用），你就不能解决你的问题；要么你将有一些来自GitHub的随机人员提供与分发商曾经提供的相同的保证。这可行吗？有些人说可以。我看到在这方面确实有一些真正的努力。现在安全了吗？不。很快会安全吗？不，很可能永远不会。但它总会让你感觉相对安全。足以让你不太在乎这个问题。
- en: Now let’s get back to bad-mouthing the community, because that’s how you don’t
    make friends around here.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回到抨击社区，因为这样你就不会在这里交朋友了。
- en: Being delulu is not the solulu
  id: totrans-split-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 妄想不是解决问题的办法
- en: So by now we learned that Rust is not a safer language, nor does it encourage
    safety practices, what is left? Elitism, smugness, and that unmistakable feeling
    of righteousness that comes with the territory. Most of the issues come from the
    numbers they keep showing „look, so many issues caused by unsafe languages”. Friend,
    your language doesn’t cause issues because 0.001% of the world uses code written
    in your language.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所以到目前为止，我们了解到Rust不是一种更安全的语言，也不鼓励安全实践，还剩下什么？精英主义、自鸣得意和难以置信的正义感，这都是这个领域特有的。大多数问题来自于他们展示的数字，“看，由于不安全的语言造成了这么多问题”。朋友，你的语言之所以不会出问题，是因为全球只有0.001%的人使用你的语言编写的代码。
- en: All communities have been infiltrated by Rust enthusiasts. I can’t see a good
    discussion on the C++ forums without Rust being mentioned as somehow treating
    all ailments of the language. I can’t read on updates to the C standard without
    some idiot clamoring that Rust does it better, and we should all convert to his
    religion. And I wish I could somehow ignore all the things that these idiots keep
    repeating.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所有社区都被Rust爱好者渗透了。在C++论坛上，我看不到一个好的讨论不提到Rust，好像Rust能治愈这门语言的所有病痛一样。我在阅读关于C标准更新的信息时，总会听到有些白痴在叫嚣说Rust做得更好，我们都应该皈依他的宗教。我希望我能够忽视这些白痴一直在重复的事情。
- en: I also hate the unofficial lobbying arm of this community, that published a
    lot of information with effervescence and offer the impression that the reason
    why we have faulty tech is memory safety, defined as „whatever Rust does”. And
    when things like „don’t use C and C++, use Rust” are touted from the White House
    press correspondent this is dangerous, especially since the whole world is built
    on 30% C code, 30% C++ and the rest anything but Rust.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我还讨厌这个社区的非官方游说机构，他们充满热情地发布大量信息，并给人一种错觉，即我们拥有有缺陷的技术的原因是内存安全，即被定义为“Rust所做的任何事情”。当像“不要使用C和C++，使用Rust”这样的话从白宫新闻发言人那里传播出来时，这是危险的，特别是因为整个世界建立在30%的C代码、30%的C++代码和其他不包括Rust的代码基础上。
- en: The Rust people insist that they are the solution, but the truth is out there,
    and the truth says that Rust is just a fad. A very noisy fad, a definitely interesting
    fad, maybe one that will catch on, just like C did when other better languages,
    like FORTRAN and LISP, existed. But for the time being, we could use a little
    less volume until you learn how to play the orchestra, because all we hear is
    a cacophony of voices, and it’s tiresome.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: Rust的人们坚持说他们是解决方案，但事实是，真相在那里，真相说Rust只是一时的风尚。一个非常喧嚣的风尚，无疑是一个有趣的风尚，也许会流行起来，就像C当年在其他更好的语言如FORTRAN和LISP存在时一样。但目前来看，我们需要更少的噪音，直到你学会如何指挥整个交响乐团，因为我们听到的只是一片嘈杂声音，令人疲倦。
- en: Rust definitely has some technical merits, but I can say that it’s not used
    enough to tell if it’s a life-changing programming choice. It’s too early to tell.
    For the time being, it’s hard to collaborate with Rust people, for them it’s Rust
    or nothing else (but neovim and lua). You can’t use a Rust library if you’re writing
    code in Go, C++ or C (or maybe you can, but why would you?). I don’t know of any
    fundamental library written in Rust that is not a somewhat improved version of
    some other library that already exists in C++ or C or python. All I hear is just
    noise from delusional people touting the end of the world because I can write
    bad code in C++.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: Rust确实有一些技术优点，但我可以说它还没有被广泛应用到足以改变生活的程度。现在说来还为时过早。目前，与Rust的人合作很困难，对于他们来说，要么用Rust，要么什么也不用（但可以用neovim和lua）。如果你用Go、C++或C编写代码，你不能使用Rust库（或许你可以，但为什么要呢？）。我不知道有没有基础库是用Rust编写的，而不是某些已经存在于C++、C或Python的库的稍微改进版本。我听到的都是一些妄想的人们嘈杂的声音，他们声称写糟糕的C++代码会导致世界末日。
- en: So, basically, Rust needs to shut the fuck up and stop lying about its capabilities.
    Rust is not a memory safe language, and does not embody safety practices. There’s
    a lot of work to be done, a lot of the world to be fixed, and I could do away
    with the noise they make to mask the lack of work. And that takes me to the final
    point. The people who are actually doing good work in Rust, and probably are too
    busy to start harassing other fundamental technological stacks because they’re
    not Rust. Those people, if they exist, are doing the work quietly, and I’m thankful
    for their effort. Just like I am for the billions of potentially unsafe C and
    C++ lines of code that allow me to post this article on the internet today.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，基本上，Rust需要闭嘴，停止谎称它的能力。Rust并不是一种内存安全的语言，也没有体现安全实践。还有很多工作要做，世界上还有很多问题需要解决，我可以不用噪音来掩盖工作不足。这就引出了最后一点。那些实际在Rust中做出贡献的人们，可能因为太忙而没有时间去骚扰其他基础技术栈，因为他们不是Rust。如果这些人存在的话，他们是默默无闻地工作，我对他们的努力表示感谢。就像我对亿万行潜在不安全的C和C++代码感到感激，这些代码让我能够在今天把这篇文章发布到互联网上。
