- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:21:04'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:21:04
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Setting up PostgreSQL for running integration tests
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 PostgreSQL 以运行集成测试
- en: 来源：[https://gajus.com/blog/setting-up-postgre-sql-for-running-integration-tests](https://gajus.com/blog/setting-up-postgre-sql-for-running-integration-tests)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://gajus.com/blog/setting-up-postgre-sql-for-running-integration-tests](https://gajus.com/blog/setting-up-postgre-sql-for-running-integration-tests)
- en: When it comes to testing, achieving performance and reliability is crucial.
    In this article, I'll explain how to set up [PostgreSQL](https://www.postgresql.org/)
    for tests and discuss some common pitfalls to avoid.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行测试时，实现性能和可靠性至关重要。在本文中，我将解释如何为测试设置 [PostgreSQL](https://www.postgresql.org/)，并讨论一些常见的要避免的问题。
- en: 'Before we dive into the details, let''s define our goals:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入细节之前，让我们定义我们的目标：
- en: '**Isolation** – We want to ensure that each test runs in isolation. At the
    very least, this means that each test should have its own database. This ensures
    that tests don''t interfere with each other and that you can run tests in parallel
    without any issues.'
  id: totrans-split-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离性** – 我们希望确保每个测试都在隔离环境中运行。至少，这意味着每个测试应该有自己的数据库。这确保了测试不会互相干扰，并且可以在并行运行测试时不会出现任何问题。'
- en: '**performance** – We want to ensure that setting up PostgreSQL for tests is
    fast. A slow solution is going to be cost prohibitive for running tests in CI/CD
    pipelines. The solution that we come up with must allow us to execute tests without
    introducing too much overhead.'
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能** – 我们希望确保设置 PostgreSQL 用于测试是快速的。慢速的解决方案将会对在 CI/CD 流水线中运行测试造成经济上的限制。我们提出的解决方案必须允许我们执行测试而不引入过多的开销。'
- en: The rest of this article will focus on what we have tried, what worked, and
    what didn't work.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本文其余部分将专注于我们尝试过的方法，有效的方法以及未成功的方法。
- en: The first approach we tried was to use [transactions](https://www.postgresql.org/docs/current/tutorial-transactions.html).
    We would start a transaction at the beginning of each test and roll it back at
    the end.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尝试的第一种方法是使用 [transactions](https://www.postgresql.org/docs/current/tutorial-transactions.html)。我们将在每个测试开始时启动一个事务，并在结束时回滚。
- en: 'The basic idea is illustrated in the following example:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 基本思想如下示例所示：
- en: '[PRE0]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The transaction approach works well for simple cases (e.g., testing a single
    function), but it quickly becomes a problem when dealing with tests that *test
    integration* between multiple components. Due to connection pooling, nested transactions,
    and other factors, the necessary work to make the transaction approach work would
    have meant that we are not replicating the real-world behavior of our application,
    i.e. it would not provide the confidence we need.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 事务方法对于简单情况（例如测试单个函数）效果很好，但在处理涉及多个组件之间的集成测试时很快变成问题。由于连接池、嵌套事务和其他因素，使事务方法工作所需的工作量意味着我们无法复制应用程序的真实行为，即无法提供我们需要的信心。
- en: For consistency, we also want to avoid mixing testing approaches. Even though
    using transactions would suffice for some tests, we want to have a consistent
    approach across all tests.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持一致性，我们还希望避免混合测试方法。即使使用事务对某些测试来说已经足够，我们也希望在所有测试中保持一致的方法。
- en: Another approach we tried was to use SQLite. SQLite is an in-memory database
    that is fast and easy to set up.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尝试的另一种方法是使用 SQLite。SQLite 是一个内存数据库，快速且易于设置。
- en: Similar to the transaction approach, SQLite works well for simple cases. However,
    it quickly becomes a problem when dealing with code paths that use PostgreSQL-specific
    features. In our case, due to the use of various PostgreSQL extensions, PL/pgSQL
    functions, and other PostgreSQL-specific features, we couldn't use SQLite for
    our tests.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与事务方法类似，SQLite 对于简单情况效果很好。然而，在处理使用 PostgreSQL 特定功能的代码路径时，它很快变成一个问题。在我们的情况下，由于使用了各种
    PostgreSQL 扩展、PL/pgSQL 函数和其他 PostgreSQL 特定功能，我们无法将 SQLite 用于我们的测试。
- en: '[pglite](https://github.com/electric-sql/pglite) provides PostgreSQL packaged
    as a [WASM module](https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Module)
    that can be used in Node.js. This might be a good alternative, though we haven''t
    tried it yet. Regardless, the current lack of support for extensions would have
    been a blocker for us.'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[pglite](https://github.com/electric-sql/pglite) 提供了作为 [WASM 模块](https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Module)
    打包的 PostgreSQL，可以在 Node.js 中使用。这可能是一个很好的替代方案，尽管我们尚未尝试过。但目前不支持扩展将成为我们的障碍。'
- en: Another approach we tried was to use [`pg_tmp`](https://eradman.com/ephemeralpg/).
    `pg_tmp` is a tool that creates a temporary PostgreSQL instance for each test.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尝试的另一种方法是使用[`pg_tmp`](https://eradman.com/ephemeralpg/)。`pg_tmp`是一个为每个测试创建临时PostgreSQL实例的工具。
- en: In theory, `pg_tmp` is a good solution. It allows a complete isolation of tests.
    In practice, is a lot slower than we could tolerate. With `pg_tmp`, it takes a
    few seconds to start and populate the database, and this overhead quickly adds
    up when running thousands of tests.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，`pg_tmp`是一个很好的解决方案。它允许完全隔离测试。实际上，它比我们能够容忍的要慢得多。使用`pg_tmp`，启动和填充数据库需要几秒钟，当运行数千个测试时，这种额外开销会迅速累积。
- en: Let's say you have 1000 tests, and each test takes 1 second to run. If you add
    2 seconds of overhead for creating a new database, you are looking at an additional
    2000 seconds (33 minutes) of overhead.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有1000个测试，每个测试需要1秒钟。如果为创建新数据库增加2秒的开销，那么额外的开销将达到2000秒（33分钟）。
- en: If you like this approach, you could also probably get away with using Docker
    containers. Depending on many factors, Docker containers might be even faster
    than `pg_tmp`.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢这种方法，您也可以考虑使用Docker容器。根据许多因素，Docker容器可能比`pg_tmp`更快。
- en: '[integresql](https://github.com/allaboutapps/integresql) is a project that
    I came across in a [HN thread](https://news.ycombinator.com/item?id=26947964).
    It seems like a good alternative that reduces the overhead of creating a new database
    to about 500ms. It has a pooling mechanism that allows you to reduce the overhead
    even further. We decided against continuing on this path because we were happy
    with the level of isolation that we got from using [template databases](#template-databases).'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[integresql](https://github.com/allaboutapps/integresql)是我在[HN帖子](https://news.ycombinator.com/item?id=26947964)中了解到的一个项目。它似乎是一个很好的替代方案，可以将创建新数据库的开销减少到约500毫秒。它具有一种池化机制，允许进一步减少开销。我们决定不继续这条道路，因为使用[模板数据库](#template-databases)已经满足了我们的隔离需求。'
- en: 'After trying various approaches, we settled on combining two approaches: [*template
    databases*](#template-databases) and [*mounting a memory disk*](#mounting-a-memory-disk).
    This approach allowed us to isolate each test at a database level without introducing
    too much overhead or complexity.'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试了各种方法后，我们决定结合两种方法：[*模板数据库*](#template-databases)和[*挂载内存磁盘*](#mounting-a-memory-disk)。这种方法使我们能够在不引入过多开销或复杂性的情况下，在数据库级别上隔离每个测试。
- en: 'A [template database](https://www.postgresql.org/docs/current/manage-ag-templatedbs.html)
    is a database that serves as a template for creating new databases. When you create
    a new database from a template database, the new database has the same schema
    as the template database. The steps to create a new database from a template database
    are as follows:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[模板数据库](https://www.postgresql.org/docs/current/manage-ag-templatedbs.html)是用作创建新数据库模板的数据库。从模板数据库创建新数据库时，新数据库与模板数据库具有相同的模式。创建新数据库的步骤如下：'
- en: Create a template database (`ALTER DATABASE <database_name> is_template=true;`)
  id: totrans-split-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建模板数据库 (`ALTER DATABASE <database_name> is_template=true;`)
- en: Create a new database from the template database (`CREATE DATABASE <new_database_name>
    TEMPLATE <template_database_name>;`)
  id: totrans-split-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从模板数据库创建新数据库 (`CREATE DATABASE <new_database_name> TEMPLATE <template_database_name>;`)
- en: The key advantage of using template databases is that you do not need to mess
    with managing multiple PostgreSQL instances. You can create copy databases and
    have each test run in isolation.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模板数据库的主要优势在于，您无需处理管理多个PostgreSQL实例的麻烦。您可以创建副本数据库，并使每个测试在隔离环境中运行。
- en: 'However, on its own, template databases are not fast enough for our use case.
    The time it takes to create a new database from a template database is still too
    high for running thousands of tests:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，单独使用模板数据库对于我们的用例来说并不够快。从模板数据库创建新数据库所需的时间仍然对于运行数千个测试来说太高：
- en: '[PRE1]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is where the [memory mounting](#mounting-a-memory-disk) comes in.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是[内存挂载](#mounting-a-memory-disk)的应用场景。
- en: The other limitation of template databases to be aware of is that no other sessions
    can be connected to the source database while it is being copied. `CREATE DATABASE`
    will fail if any other connection exists when it starts; during the copy operation,
    new connections to the source database are prevented. It is an easy enough limitation
    to work around using a [mutex pattern](https://en.wikipedia.org/wiki/Lock_(computer_science)),
    but it is something to be aware of.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到的另一个模板数据库的限制是，在复制过程中不允许有其他会话连接到源数据库。如果在开始时存在任何其他连接，`CREATE DATABASE`将失败；在复制操作期间，新连接到源数据库是被阻止的。使用[互斥模式](https://en.wikipedia.org/wiki/Lock_(computer_science))可以很容易地解决这个限制，但这是需要注意的事项。
- en: The final piece of the puzzle is mounting a memory disk. By mounting a memory
    disk, and creating the template database on the memory disk, we can significantly
    reduce the overhead of creating a new database.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案的最后一部分是挂载内存磁盘。通过挂载内存磁盘，并在内存磁盘上创建模板数据库，我们可以显著减少创建新数据库的开销。
- en: I will talk about how to mount a memory disk in the next section, but first,
    let's see how much of a difference it makes.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在下一节讨论如何挂载内存磁盘，但首先让我们看看它会带来多大的改变。
- en: '[PRE2]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is a significant improvement and makes the approach viable for our use
    case.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个重大的改进，使得这种方法对我们的使用情况可行。
- en: Needless to say, this approach is not without its drawbacks. The data is stored
    in memory, which means that it is not persistent. If the database crashes or the
    server restarts, the data is lost. However, for running tests, this is not a problem.
    The data is recreated from the template database each time a new database is created.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，这种方法并非没有缺点。数据存储在内存中，这意味着它不是持久的。如果数据库崩溃或服务器重新启动，数据将丢失。然而，对于运行测试来说，这并不是问题。每次创建新数据库时，数据都会从模板数据库重新创建。
- en: 'The approach we settled on was to use a Docker container with a memory disk.
    Here is how you can set it up:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择的方法是使用带有内存磁盘的Docker容器。以下是设置步骤：
- en: '[PRE3]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the above command, we are creating a Docker container with a memory disk
    mounted at `/var/lib/pg/data`. We are also setting the `PGDATA` environment variable
    to `/var/lib/pg/data` to ensure that PostgreSQL uses the memory disk for data
    storage. The end result is that the underlying data is stored in memory, which
    significantly reduces the overhead of creating a new database.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，我们正在创建一个Docker容器，并在`/var/lib/pg/data`挂载一个内存磁盘。我们还将`PGDATA`环境变量设置为`/var/lib/pg/data`，以确保PostgreSQL使用内存磁盘进行数据存储。最终的结果是基础数据存储在内存中，显著减少了创建新数据库的开销。
- en: 'The basic idea is to create a template database before running the tests and
    then create a new database from the template database for each test. Here is a
    simplified version of how you can manage test databases:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 基本思想是在运行测试之前创建一个模板数据库，然后为每个测试从模板数据库创建一个新数据库。以下是如何管理测试数据库的简化版本：
- en: '[PRE4]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At this point, you can use `getTestDatabase` to create a new database for each
    test. The `destroy` method can be used to clean up the database after the test
    has run.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到此时，你可以使用`getTestDatabase`来为每个测试创建一个新数据库。`destroy`方法可用于在测试运行后清理数据库。
- en: This setup allows us to run thousands of tests in parallel across multiple shards
    without any issues. The overhead of creating a new database is minimal, and the
    isolation is at a database level. We are happy with the performance and reliability
    that this setup provides.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设置允许我们在多个分片上并行运行成千上万个测试，而无需任何问题。创建新数据库的开销很小，而且隔离是在数据库级别进行的。我们对这种设置提供的性能和可靠性非常满意。
