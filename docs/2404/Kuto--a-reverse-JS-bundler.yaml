- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:02:29'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:02:29'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Kuto, a reverse JS bundler
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kuto，一个反向JS打包工具
- en: 来源：[https://samthor.au/2024/kuto/](https://samthor.au/2024/kuto/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://samthor.au/2024/kuto/](https://samthor.au/2024/kuto/)
- en: Kuto, a reverse JS bundler
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kuto，一个反向JS打包工具
- en: '[Kuto](https://kuto.dev) is a novel approach to shipping code on the web. It
    lets you re-use code a client *already has* for shipping updates.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[Kuto](https://kuto.dev) 是一种在网络上交付代码的新方法。它允许您重复使用客户端已有的代码以进行更新。'
- en: 'For a ''real-world'' site with ~3mb of JS, updating the React dependency resulted
    in:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个拥有约3mb JS的“真实世界”网站，更新React依赖项导致：
- en: 71% smaller download
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载量减少了71%
- en: 28% faster start time (on a ~5yo old phone, a [Pixel 3](https://en.wikipedia.org/wiki/Pixel_3)).
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在~5岁的手机上启动时间快了28%（[Pixel 3](https://en.wikipedia.org/wiki/Pixel_3)）。
- en: …vs a single bundle, or any case where all the code is invalidated.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: …与单个捆绑包或所有代码失效的任何情况相比。
- en: Note that Kuto works really well on the final ESM bundles of real sites or apps,
    but probably *not* libraries themselves, even though Kuto's output will be valid.
    Kuto also works as a predictable 'chunk' generator for large bundles.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Kuto在真实站点或应用程序的最终ESM捆绑包上效果非常好，但可能*不*适用于库本身，尽管Kuto的输出将是有效的。Kuto还作为大捆绑包的可预测“块”生成器运行。
- en: If this is interesting to you—do *you* have too much JavaScript?—then do the
    thing, and [do a Kuto on your code](https://kuto.dev). (Is Kuto a verb? Who knows.
    I'm trying it out.) ✂️
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这对您有兴趣——您是否有太多的JavaScript？——那么就去做吧，并在您的代码上做一个Kuto。（Kuto是一个动词吗？谁知道。我在试验。）✂️
- en: How does it work?
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: Instead of focusing on minifying output or anything idempotent, Kuto takes a
    different route.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不专注于最小化输出或任何幂等操作，Kuto选择了一条不同的路线。
- en: 'On the first build:'
  id: totrans-split-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一次构建时：
- en: Kuto splits source JS into a 'main' part, and a normally larger 'corpus' of
    code which has no side effects.
  id: totrans-split-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kuto将源JS分成“主”部分和通常更大的没有副作用的“代码库”。
- en: This corpus can be cached [forever](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#immutable),
    and a hashed timestamp is included in its output name.
  id: totrans-split-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个代码库可以被永久缓存（[forever](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#immutable)），并且其输出名称中包含了一个散列时间戳。
- en: 'On every further build:'
  id: totrans-split-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每次进一步构建时：
- en: Kuto still splits out the source JS
  id: totrans-split-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kuto仍然将源JS拆分出来
- en: It identifies code from any existing corpus that can be used to 'satisfy' the
    source JS
  id: totrans-split-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以从任何现有的代码库中识别可以用来“满足”源JS的代码。
- en: Each corpus will either stay the same or *shrink* as functions, statements etc
    change
  id: totrans-split-22
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个代码库将会保持不变或*缩小*，如函数、语句等的变化
- en: Any code that cannot be satisfied is put into a brand new corpus, which can
    also be cached forever.
  id: totrans-split-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何无法满足的代码将被放入一个全新的代码库中，这也可以永久缓存。
- en: 'This is a little complicated. Here''s a ~~gif~~ video:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点复杂。这里有一个~~gif~~视频：
- en: <https://storage.googleapis.com/hwhistlr.appspot.com/assets/kuto-demo.mp4>
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: <https://storage.googleapis.com/hwhistlr.appspot.com/assets/kuto-demo.mp4>
- en: Kuto will build an additional corpus when something changes
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当某些内容发生变化时，Kuto将构建一个额外的代码库
- en: After each build, you're likely to generate another corpus with changed code.
    (This will eventually be an issue with fragmentation, more on this later.)
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 每次构建后，您很可能会生成另一个具有更改代码的代码库。 （这最终将成为碎片化的问题，稍后详述。）
- en: Why does it work?
  id: totrans-split-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么它有效？
- en: Each corpus, once fetched by a client, can be cached forever. However, on every
    build, that corpus *may* shrink in size. New clients will get the smaller version.
    (Kuto's corpuses have a hashed timestamp, and you *do* have to set up your webserver
    to send the [right headers](https://web.dev/articles/love-your-cache) here).
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 每个代码库一旦被客户端获取，就可以永久缓存。然而，每次构建时，该代码库*可能*会缩小。新客户端将获得更小的版本。（Kuto的代码库具有散列时间戳，并且您确实需要设置您的Web服务器以发送正确的[标头](https://web.dev/articles/love-your-cache)。）
- en: But…this breaks all we know about caching responses on the web! I've changed
    an immutable file! 🤯
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但是…这打破了我们对Web缓存响应的所有了解！我改变了一个不可变的文件！🤯
- en: The result is that older clients will have bigger files, and newer clients will
    have smaller ones, even for the same filename. But that bigger file simply has
    now-deprecated code. Kuto's primary thesis is that disk I/O to load a slightly
    bigger file than you need is faster than compling anew.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是老客户端将有更大的文件，新客户端将有更小的文件，即使是相同的文件名。但是那个更大的文件现在只是有过时代码。Kuto的主要论点是，加载比您需要的稍大文件的磁盘I/O速度比重新编译要快。
- en: (Note that at least [v8-based browsers](https://v8.dev/blog/code-caching-for-devs)
    cache the bytecode of the source, which provides the speed benefit. If you were
    compiling anew every time, Kuto wouldn't help.)
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: （请注意至少 [基于 v8 的浏览器](https://v8.dev/blog/code-caching-for-devs) 缓存源代码的字节码，从而提供速度优势。
    如果每次重新编译，Kuto 将无法帮助。）
- en: 'Aside the remarkably bonkers way this leverages your browser, Kuto also basically
    performs code-splitting in a completely predictable, useful and automated fashion.
    Other bundlers either require you to:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这种显著疯狂的方式利用您的浏览器外，Kuto 还基本上以完全可预测、有用和自动化的方式执行代码拆分。 其他捆绑器要么要求您：
- en: (not codesplit an output bundle at all)
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （完全不对输出捆绑包进行代码拆分）
- en: explicitly mark dependencies to be put into their own bundle
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 明确标记依赖项以放入自己的捆绑包中。
- en: put code in bundles on (effectively) random boundaries, just trying to restrict
    the size of each 'chunk'.
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在（实际上）随机边界上放置代码捆绑包，试图限制每个“块”的大小。
- en: No really, how does it work?
  id: totrans-split-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不是真的，它是如何工作的？
- en: The above explanation was fairly high-level. At a lower level, Kuto looks for
    code with no side effects to include in its corpuses, and it uses circular dependencies
    to ensure they're safe to call.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的解释相当高级。 在更低的级别上，Kuto 寻找没有副作用的代码，将其包含在其语料库中，并使用循环依赖确保其安全调用。
- en: No Side Effects
  id: totrans-split-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 没有副作用
- en: 'Turns out, defining a function has no side effects. No, really! The *definition*
    of a function does nothing except creates a variable:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，定义函数没有副作用。 不，真的！ 函数的*定义*除了创建一个变量外什么也不做：
- en: '[PRE0]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Since `foo` isn''t *actually called*, and we declare it in a module scope,
    nothing happens. Until we run `foo`, it might as well be:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `foo` *实际上没有被调用*，并且我们在模块范围内声明它，所以什么都不会发生。 直到运行 `foo`，它可能如同：
- en: '[PRE1]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Kuto takes this theory to the extreme, putting classes into the same form, and
    even arbitrary statements. We *hand wave* can hoist statements to be within a
    function.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: Kuto 将这一理论推向极致，将类放入相同的形式中，甚至是任意语句。 我们*手势*可以将语句提升为函数内部。
- en: Circular Dependencies
  id: totrans-split-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 循环依赖
- en: Each corpus contains silo'ed^ functions which reference back to the main file
    in order to work out their dependencies. A good way to see this is to check out
    Kuto itself and run its "./release.sh" script, which builds Kuto itself this way.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 每个语料库都包含独立的^函数，这些函数引用主文件以解析它们的依赖关系。 查看 Kuto 本身并运行其 "./release.sh" 脚本是查看此过程的好方法，这样构建
    Kuto 本身。
- en: 'For a trivial site that appends a custom element to your page, where the custom
    element has changed and been rebuilt, this might look like:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个简单的网站，追加自定义元素到您的页面，其中自定义元素已更改并重新构建，可能看起来像这样：
- en: '[PRE2]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This all looks awkward…and it is, but the output isn't really meant for human
    consumption, but we benefit from ESM's "seen as a bug" feature of circular dependencies.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切看起来都很尴尬……确实是这样，但输出并不是真正为人类消费设计的，而是因为 ESM 的“被视为错误”特性而从中受益，循环依赖。
- en: ^Kuto will in future reference *between* corpuses
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: ^Kuto 将在将来引用 *之间* 的语料库
- en: Should I use this?
  id: totrans-split-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我应该使用这个吗？
- en: Maybe!
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 或许！
- en: 'Kuto is new, and while the science says it works, it''s a bit weird. And as
    I''ve mentioned above, it works really well on:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: Kuto 是新产品，虽然科学说它有效，但有点奇怪。 正如我上面提到的，它在以下方面表现良好：
- en: single bundle output sites
  id: totrans-split-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单一捆绑包输出网站
- en: that have a large JS bundle (maybe >1mb?)
  id: totrans-split-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 那些具有大型 JS 包（也许 >1mb？）的网站。
- en: …which are made up of lots of top-level ESM code, such as functions and classes
  id: totrans-split-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ……这些都由许多顶级 ESM 代码组成，例如函数和类
- en: 'You will need to:'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的是：
- en: use a regular bundler first
  id: totrans-split-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先使用常规的捆绑工具
- en: keep or have access to your old build artifacts—Kuto doesn't know what you *already
    shipped* by magic 🪄
  id: totrans-split-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留或访问您的旧构建工件 —— Kuto 不知道您已经通过魔术🪄*已经发货*什么。
- en: trade off a slightly larger *first load* for a better update experience
  id: totrans-split-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了更好的更新体验，需要在稍大的*首次加载*之间权衡。
- en: The other issue with this is that more and more browsers are moving to a world
    where cache is regularly evicted. If your visitors don't have your site cached,
    then Kuto *is* pointless—every load is slightly more expensive for an update that
    never happens. YMMV.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是，越来越多的浏览器正向缓存定期删除的世界迈进。 如果您的访问者没有缓存您的网站，则 Kuto *毫无意义* ——每次加载对于永远不会发生的更新都稍微昂贵。
    个人经验可能有所不同。
- en: Regardless, the tool emits a few statistics, including how much overhead the
    initial load costing you, and what % of code is able to be identifed as having
    "no side effects" and put into a corpus. And to be clear, running Kuto on tiny
    codebases has no benefit—the 'cost' of parsing a few kb of JS is trivial, even
    for potato phones. 🥔
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，这个工具会输出一些统计数据，包括初始加载给你带来的额外开销，以及能够识别为具有“无副作用”的代码占总代码的百分比。需要明确的是，在小型代码库上运行
    Kuto 没有任何好处——即使在土豆手机上解析几 kb 的 JS 代码成本微乎其微。🥔
- en: So you can experiment and see if it works for you. My view is that Kuto will
    help for enterprise apps (because the JS is bloated, and no-one *really* cares)
    or social media (because power users come *so often*).
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以进行实验，看看它对你是否有效。我认为 Kuto 对企业应用程序会有所帮助（因为 JS 太臃肿，没有人*真正*关心），或者社交媒体（因为电力用户*如此频繁*出现）。
- en: Fragmentation
  id: totrans-split-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分裂
- en: Kuto generates multiple files over time. Right now, it actually only uses the
    top 4 (by size) previous bundles, although this is configurable by flag. This
    is…not very good, and I'm yet to come up with a good automatic metric as to when
    to 'clean up' vs 're-use'.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: Kuto 随时间生成多个文件。现在，它实际上只使用了前 4 个（按大小排序）之前的捆绑包，尽管可以通过标志进行配置。这……不太好，我还没有想出一个好的自动度量标准来决定何时“清理”而不是“重用”。
- en: 'Consider this though: if you just don''t provide Kuto with historic bundles,
    it… obviously can''t use them. So you can decide whether that typo fix generating
    a 100-byte file is worth it for the *next build*.'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 但请考虑这一点：如果你只是不向 Kuto 提供历史捆绑包，那它……显然就无法使用它们了。因此，你可以决定是否为*下一个构建*值得修正一个 100 字节的文件中的拼写错误。
- en: Why Only 28% Faster?
  id: totrans-split-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么只快了 28%？
- en: Ignoring some of the possible downsides, there's a big question for me at play.
    My test case above showed 71% reduction in size, but only 28% increase in speed.
    🤔
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略一些可能的负面影响，我在此面临一个重要问题。我的测试案例显示体积减少了 71%，但速度只增加了 28%。🤔
- en: I have a suspicion that v8's assembly of a bunch of module code *is still quite
    costly*. Yes, it's great that huge chunks of static code can be outsourced and
    cached forever, but in the end, your website still needs to assemble it all together.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我怀疑 v8 对一堆模块代码的汇编*仍然相当昂贵*。是的，将大块静态代码外包并永久缓存是很棒的，但最终，你的网站仍然需要将所有这些组件汇编在一起。
- en: An Ask
  id: totrans-split-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个问题
- en: I would love to hear from you if Kuto makes a material difference to the way
    you bundle and update your code, even in just a theoretical test environment.
    Please feel free to contact me, including filing [a GitHub issue](https://github.com/samthor/kuto/issues/new),
    if you can give me some sweet, sweet numbers.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Kuto 对你的代码捆绑和更新方式产生了实质性影响，即使在理论测试环境中，我也很愿意听到你的想法。如果你能提供一些甜甜的数据，欢迎随时联系我，包括提交
    [GitHub issue](https://github.com/samthor/kuto/issues/new)。
- en: Thanks
  id: totrans-split-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谢谢
- en: Thanks for reading! Kuto has been incredibly interesting to build, yet honestly
    it's only taken me a few days of full-time engineering to make it work. It's been
    an idea I've been noodling on for a few years, and I'm really proud to have it
    come to fruition. 🍇
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢阅读！Kuto 的构建过程非常有趣，但老实说，我只花了几天全职工程的时间就让它运行起来了。这个想法我已经思考了几年，现在看到它得以实现，我感到非常自豪。🍇
