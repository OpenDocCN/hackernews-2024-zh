- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:31:19'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:31:19'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'No Abstractions: an Increase API design principle — Increase'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无抽象：Increase API 设计原则 — Increase
- en: 来源：[https://increase.com/articles/no-abstractions](https://increase.com/articles/no-abstractions)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://increase.com/articles/no-abstractions](https://increase.com/articles/no-abstractions)
- en: API resources
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: API 资源
- en: are the nouns of your API. Deciding how to name and model these nouns is arguably
    the hardest and most important part of designing an API. The resources you expose
    organize your users’ mental model of how your product works and what it can do.
    At Increase, our team has used a principle called “no abstractions” to help. What
    do we mean by this?
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 是您的 API 的名词。决定如何命名和建模这些名词可以说是设计 API 中最困难和最重要的部分。您公开的资源组织了用户对产品工作方式和功能的心理模型。在
    Increase，我们的团队使用了一个叫做“无抽象”的原则来帮助。这是什么意思？
- en: Much of our team came from Stripe, and when designing our API we considered
    the same values that have been successful there. Stripe excels at designing
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们团队的大部分成员来自 Stripe，在设计我们的 API 时，我们考虑了在那里取得成功的相同价值观。Stripe 擅长设计
- en: abstractions
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象
- en: in their API — extracting the essential features of a complex domain into something
    their users can easily understand and work with. In their case this most notably
    means
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在他们的 API 中 — 将复杂领域的基本特征提取为他们的用户可以轻松理解和处理的内容。在他们的案例中，这主要意味着
- en: '[modeling](https://stripe.com/blog/payment-api-design)'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[建模](https://stripe.com/blog/payment-api-design)'
- en: payments across many different networks into an API resource called a
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过许多不同网络的支付合并到一个名为 API 资源的
- en: '[PaymentIntent](https://docs.stripe.com/api/payment_intents)'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[PaymentIntent](https://docs.stripe.com/api/payment_intents)'
- en: . For example, Visa and Mastercard have subtly different reason codes for why
    a chargeback can be initiated, but Stripe combines those codes into a single enum
    so that their users don’t need to consider the two networks separately.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 。例如，Visa 和 Mastercard 对于为何可以发起退款有微妙不同的原因代码，但 Stripe 将这些代码合并为单个枚举，使他们的用户无需分别考虑这两个网络。
- en: This makes sense because many of Stripe’s users are early startups working on
    products totally unrelated to payments. They don't necessarily know, or need to
    know, about the nuances of credit cards. They want to integrate Stripe quickly,
    get back to building their product, and stop thinking about payments.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是有道理的，因为 Stripe 的许多用户是从事与支付无关的产品的初创企业。他们不一定知道或需要了解信用卡的微妙之处。他们想要快速集成 Stripe，回到构建他们的产品，不再思考支付问题。
- en: “For Increase users, trying to hide the underlying complexity of these networks
    would irritate them, not simplify their lives.”
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: “对 Increase 用户来说，试图隐藏这些网络的基本复杂性会激怒他们，而不是简化他们的生活。”
- en: Increase’s users are not like this. They often have deep existing knowledge
    of payment networks, think about financial technology all the time, and come to
    us because of our direct network connections and the depth of integration that
    lets them build. They want to know
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: Increase 的用户并非如此。他们经常对支付网络有深入的现有知识，始终考虑金融技术，并因我们的直接网络连接和允许他们构建的深度集成而来找我们。他们想知道
- en: '[exactly](https://status.increase.com/#ach-submission-timeline)'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[确切](https://status.increase.com/#ach-submission-timeline)'
- en: when the FedACH window closes and when transfers will land. They understand
    that setting a different Standard Entry Class code on an ACH transfer can result
    in different return timing. Trying to hide the underlying complexity of these
    networks (by, for example, modeling ACH transfers and wire transfers with a single
    API resource) would irritate them, not simplify their lives.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当联邦 ACH 窗口关闭和转账何时到账。他们明白在 ACH 转账上设置不同的标准输入类别代码可能导致不同的返回时间。试图隐藏这些网络的基本复杂性（例如，通过一个
    API 资源对 ACH 转账和电汇进行建模）会激怒他们，而不是简化他们的生活。
- en: 'Early conversations with these users helped us articulate what we dubbed the
    “no abstractions” principle as we built the first version of our API. Some examples
    of the way this mindset has subsequently affected its design:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与这些用户的早期对话帮助我们在构建 API 的第一个版本时表达了我们所谓的“无抽象”原则。一些例子说明了这种思维方式后来如何影响了其设计：
- en: Real-world naming
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现实世界的命名
- en: Instead of inventing our own names for API resources and their attributes, we
    tend to use the vocabulary of the underlying networks. For example, the parameters
    we expose when making an ACH transfer via our API are named after fields in the
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会为 API 资源及其属性发明自己的名称，而是倾向于使用底层网络的词汇。例如，通过我们的 API 进行 ACH 转账时，我们公开的参数是根据
- en: '[Nacha specification](https://achdevguide.nacha.org/ach-file-details)'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[Nacha 规范](https://achdevguide.nacha.org/ach-file-details)'
- en: .
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: Immutability
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变性
- en: 'Similar to how we use network nomenclature, we try to model our resources after
    real-world events like an action taken or a message sent. This results in more
    of our API resources being immutable. An approach that’s worked well for our API
    is to take a cluster of these immutable resources (all of the network messages
    that can be sent as part of the ACH transfer lifecycle, for example) and group
    them together under a state machine “lifecycle object”. For example, the `ach_transfer`
    object in our API has a field called `status` that changes over time, and several
    immutable sub-objects that are created as the transfer moves through its lifecycle.
    A newly-minted `ach_transfer` object looks like:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们使用网络命名方式类似，我们尝试模仿真实世界中的事件，如已执行的操作或发送的消息来建模我们的资源。这导致我们的 API 资源中的更多资源是不可变的。对我们的
    API 起作用的一种方法是将这些不可变资源聚合在一起（例如，可以作为 ACH 转账生命周期的一部分发送的所有网络消息）并在状态机“生命周期对象”下进行分组。例如，我们的
    API 中的 `ach_transfer` 对象具有一个随时间变化的 `status` 字段，并且作为转账通过其生命周期创建的几个不可变子对象。一个新铸造的
    `ach_transfer` 对象如下所示：
- en: '[PRE0]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After that same transfer has moved through our pipeline and we’ve submitted
    it to FedACH, it looks like:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一转账经过我们的管道并且我们已将其提交到 FedACH 之后，它看起来像：
- en: '[PRE1]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Separating resources by use case
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过用例分离资源
- en: If, for a given API resource, the set of actions a user can take on different
    instances of the resource varies a lot, we tend to split it into multiple resources.
    For example, the set of actions you can take on an originated ACH transfer is
    different (the complete opposite, really) than the actions you can take on a received
    ACH transfer, so we separate these into `ach_transfer` and `inbound_ach_transfer`
    resources.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对于给定的 API 资源，用户可以对不同实例执行的操作集合差异很大，我们倾向于将其拆分为多个资源。例如，您可以在发起的 ACH 转账上执行的操作集合与您可以在接收的
    ACH 转账上执行的操作截然不同，因此我们将其分开成 `ach_transfer` 和 `inbound_ach_transfer` 资源。
- en: '* * *'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This approach can make our API more verbose and intimidating at first glance
    — there are a lot of resources on the left-hand side of our
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可能会使我们的 API 在第一眼看起来更冗长和令人生畏 - 我们
- en: '[documentation](https://increase.com/documentation/api)'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[文档](https://increase.com/documentation/api)'
- en: page! We think it makes things more predictable over the long-term, though.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 页面！我们认为这会使事情在长期内更加可预测。
- en: Importantly, our engineering team has committed to this approach. When you design
    a complex API over several years, you make small incremental decisions all the
    time. Committing to foundational principles upfront has reduced the cognitive
    load for these decisions. For example, when sending a wire transfer to the Federal
    Reserve, there’s a required field called
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，我们的工程团队已经承诺采取这种方法。在多年设计复杂 API 时，你会一直做出小的渐进式决策。最初承诺基础原则已减少了这些决策的认知负荷。例如，当向联邦储备发送电汇时，有一个必填字段叫做
- en: '[Input Message Accountability Data](https://increase.com/documentation/fedwire#technical-implementation)'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[输入消息责任数据](https://increase.com/documentation/fedwire#technical-implementation)'
- en: which serves as a globally-unique ID for that transfer. When building support
    for wire transfers, an engineer in an abstraction-heavy API might have to deliberate
    how to name this field in a “user-friendly” way -
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作为该转账的全局唯一标识符。在构建支持电汇的时候，一个在抽象层面很重的 API 中的工程师可能需要仔细考虑如何以“用户友好”的方式命名这个字段 -
- en: '`trace_number`'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`trace_number`'
- en: '?'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: ？
- en: '`reference_number`'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`reference_number`'
- en: '?'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: ？
- en: '`id`'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`id`'
- en: '? At Increase that hypothetical engineer names the field'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: ？在 Increase 中，这位假设的工程师给这个字段命名
- en: '`input_message_accountability_data`'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`input_message_accountability_data`'
- en: and moves on. When an Increase user encounters this field for the first time,
    while it might not be the most immediately recognizable name at first, it helps
    them understand immediately how this maps to the underlying system.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 并继续前进。当 Increase 用户第一次遇到这个字段时，虽然它可能不是最容易识别的名称，但它立即帮助他们理解这如何映射到底层系统。
- en: No Abstractions isn’t right for every API, but considering the level of abstraction
    that’s appropriate for the developers integrating against it is a valuable exercise.
    This will depend on their level of experience working with your product domain
    and the amount of energy they’ll be committing to the integration, among other
    things. If you’re building an abstraction-heavy API, be prepared to think hard
    before adding new features. If you’re building an abstraction-light API, commit
    to it and resist the temptation to add abstractions when it comes along.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 不是每个 API 都适合没有抽象化，但考虑对接 API 的开发者适合的抽象层次是一个有价值的练习。这将取决于他们在处理您的产品领域方面的经验水平以及他们将投入到集成中的精力，等等。如果您正在构建一个抽象层次很高的
    API，请在添加新功能之前做好深思熟虑。如果您正在构建一个抽象层次较低的 API，请坚定地维持，并抵制在遇到诱惑时添加抽象化的冲动。
