- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:36:43'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 Genetic Algorithm 2D Car Thingy - Chrome recommended
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://rednuht.org/genetic_cars_2/](https://rednuht.org/genetic_cars_2/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: But what is it?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The program uses a simple genetic algorithm to evolve random two-wheeled shapes
    into cars over generations. Loosely based on [BoxCar2D](http://boxcar2d.com/),
    but written from scratch, only using the same physics engine ([box2d](http://box2d.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: seedrandom.js written by [David Bau](http://davidbau.com/). (thanks!)
  prefs: []
  type: TYPE_NORMAL
- en: Controls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Save Population | Saves current population locally. |'
  prefs: []
  type: TYPE_TB
- en: '| Restore Saved Population | Restore a previously saved population. |'
  prefs: []
  type: TYPE_TB
- en: '| Suprise | Toggles drawing, makes the simulation faster. |'
  prefs: []
  type: TYPE_TB
- en: '| New Population | Keeps the generated track and restarts the whole car population.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Create new world with seed | The same seed always creates the same track,
    so you can agree on a seed with your friends and compete. :) |'
  prefs: []
  type: TYPE_TB
- en: '| Mutation rate | The chance that each gene in each individual will mutate
    to a random value when a new generation is born. |'
  prefs: []
  type: TYPE_TB
- en: '| Mutation size | The range each gene can mutate into. Lower numbers mean the
    gene will have values closer to the original. |'
  prefs: []
  type: TYPE_TB
- en: '| Elite clones | The top n cars that will be copied over to the next generation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| View top replay | Pause the current simulation and show the top performing
    car. Click a second time to resume simulation. |'
  prefs: []
  type: TYPE_TB
- en: Graph
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| Red | Top score in each generation |'
  prefs: []
  type: TYPE_TB
- en: '| Green | Average of the top 10 cars in each generation |'
  prefs: []
  type: TYPE_TB
- en: '| Blue | Average of the entire generation |'
  prefs: []
  type: TYPE_TB
- en: Genome
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The genome consists of:'
  prefs: []
  type: TYPE_NORMAL
- en: Shape (8 genes, 1 per vertex)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wheel size (2 genes, 1 per wheel)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wheel position (2 genes, 1 per wheel)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wheel density (2 genes, 1 per wheel) darker wheels mean denser wheels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chassis density (1 gene) darker body means denser chassis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blurb
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is not as deterministic as it should be, so your best car may not perform
    as well as it once did. The terrain gets more complex with distance.
  prefs: []
  type: TYPE_NORMAL
- en: I'm not in the mood to deal with checking if all scripts have loaded before
    running, so refresh the page if things seem whack.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code is now on a [GitHub repository](https://github.com/red42/HTML5_Genetic_Cars).
    Feel free to contribute!
  prefs: []
  type: TYPE_NORMAL
- en: Originally written by [this guy](http://rednuht.org), now with contributions
    from patient people at GitHub.
  prefs: []
  type: TYPE_NORMAL
