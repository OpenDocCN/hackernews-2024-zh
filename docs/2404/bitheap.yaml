- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 12:59:22'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 12:59:22'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: bitheap
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: bitheap
- en: 来源：[https://bitheap.tech/why-is-software-quality-worse-than-a-decado-ago/](https://bitheap.tech/why-is-software-quality-worse-than-a-decado-ago/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://bitheap.tech/why-is-software-quality-worse-than-a-decado-ago/](https://bitheap.tech/why-is-software-quality-worse-than-a-decado-ago/)
- en: Since the early days of the Internet, the role of software has become increasingly
    important, to the point where our world now heavily relies on it. Software is
    integral in various operations, from launching satellites into orbit to regulating
    vast networks of supply chains. We depend on it in our daily activities, whether
    driving cars, flying in airplanes, or paying for groceries.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 自互联网早期以来，软件的角色变得越来越重要，以至于我们的世界现在严重依赖于它。软件在各种操作中至关重要，从将卫星送入轨道到调控广阔的供应链网络。我们在日常活动中依赖它，无论是驾驶汽车、乘坐飞机还是购买杂货。
- en: As the number of software solutions continues to grow, it’s reasonable to anticipate
    a corresponding rise in incidents caused by software bugs. However, if you work
    at a tech company or depend on software for your daily job, you might notice issues
    with performance and usability on a regular basis.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 随着软件解决方案的数量不断增加，预计由软件bug引起的事件也将相应增加。然而，如果您在科技公司工作或者依赖软件进行日常工作，您可能会经常注意到性能和可用性方面存在的问题。
- en: Why does this happen, though? The complexity of modern software plays a significant
    role, despite the creation of specialized roles like user experience experts and
    quality assurance engineers who strive to minimize the number of bugs in software.
    Even with these efforts, the industry still confronts significant challenges.
    This article aims to explore the underlying reasons for this ongoing quality crisis,
    shedding light on why, despite advancements, software quality remains a critical
    issue.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 软件质量问题的复杂性，尽管有专门角色如用户体验专家和质量保证工程师致力于减少软件中的bug数量，但现代软件的复杂性仍然是一个重要因素。即使有了这些努力，该行业仍然面临重大挑战。本文旨在探讨这一持续存在的质量危机的根本原因，揭示为什么尽管有进展，软件质量仍然是一个关键问题。
- en: If you wish to skip reading and watch a video instead, here’s my YouTube video
    which goes through the points I made in this article.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想阅读，可以观看我在本文中提到的YouTube视频。
- en: '[https://www.youtube.com/embed/RhEaky14msE?feature=oembed](https://www.youtube.com/embed/RhEaky14msE?feature=oembed)'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/embed/RhEaky14msE?feature=oembed](https://www.youtube.com/embed/RhEaky14msE?feature=oembed)'
- en: VIDEO
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: VIDEO
- en: What do I mean by quality?
  id: totrans-split-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我所说的质量是什么意思？
- en: 'There are many definitions for quality, when it comes to software. Personally,
    I would define it having in mind the following dimensions: functionality, reliability,
    usability and security,'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到软件时，对质量有许多不同的定义。就我个人而言，我会考虑以下几个维度：功能性、可靠性、可用性和安全性。
- en: In terms of functionality, does the software provide all the necessary features
    for the users to achieve their goals? Does one need to rely on other pieces of
    software as well? A really bad example for not fulfilling the functional aspect
    when it comes to consumer software is Facebook. You need one app to use the platform
    that serves the news feed, and another one to use the chat function, even though
    the web app offers both functions at the same url. A different example, still
    applied to consumer software, is the video game industry. When I was playing video
    games back in my college years, I’ve never heard a game requiring 20 patches to
    play. Now, game companies launch their product, but it still feels as if it’s
    a beta version. They usually release 2 patches in the first two days after launching
    it to make it playable. The industry seems to be completely broken, and the prices
    are on the rise as well.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在功能性方面，软件是否提供用户实现目标所需的所有必要功能？是否需要依赖其他软件？在消费者软件不满足功能方面的一个非常糟糕的例子是Facebook。您需要一个应用程序来使用提供新闻源的平台，另一个应用程序来使用聊天功能，尽管Web应用程序在同一URL上同时提供这两个功能。还有另一个例子，仍然适用于消费者软件，即视频游戏行业。在我大学时代玩视频游戏时，从未听说过一个游戏需要20个补丁才能玩。现在，游戏公司发布他们的产品，但感觉仍像是一个测试版本。他们通常在发布后的头两天发布两个补丁以使其可玩。该行业似乎完全失控，并且价格也在上涨。
- en: For the reliability aspect, it must be dependable, with minimal downtime or
    errors. This includes the ability to recover from failures and to maintain data
    integrity. There are many reports showing that cloud services, or other critical
    software are not reliable enough. For example, in 2023, Google support forums
    were flooded with reports from users complaining that their data [has disappeared
    from Google drive](https://www.spiceworks.com/tech/data-management/news/google-drive-loses-user-data/).
    I personally considered storing data in the cloud safer than on a portable drive.
    It is definitely not!
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可靠性方面，它必须是可靠的，几乎没有停机时间或错误。这包括从故障中恢复的能力以及保持数据完整性。有很多报告显示，云服务或其他关键软件并不可靠。例如，在2023年，Google的支持论坛上充斥着用户投诉他们的数据从[Google
    Drive消失了](https://www.spiceworks.com/tech/data-management/news/google-drive-loses-user-data/)的报告。我个人认为将数据存储在云中比便携式驱动器更安全。但实际情况绝对不是这样！
- en: From the usability perspective, the software must be user-friendly, not overly-complicated,
    as well as performant. I live in a place where the financial sector dominates
    a large portion of the economy. Banks and investment companies have tremendous
    power and close to unlimited resources here. With all that, their mobile banking
    platforms are a joke! Laggy, complex and unintuitive UI’s, I get frustrated all
    the time when I have to use them. Even their feedback form doesn’t work, throwing
    a 500 whenever I try to submit it.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从可用性的角度来看，软件必须用户友好，不应过于复杂，并且性能优越。我居住的地方金融部门主导了经济的大部分。银行和投资公司在这里拥有极大的权力和几乎无限的资源。然而，他们的移动银行平台简直是笑话！延迟高，界面复杂且不直观，每次使用它们时我都感到沮丧。甚至他们的反馈表单也无法使用，每次我尝试提交时都会抛出500错误。
- en: 'Lastly, one of the most important aspects: security. Software nowadays has
    many dependencies, and we all know how hard it can be to manage them and keep
    them up-to-date. Even with automatic tools like Renovate or Dependabot, the providers
    for various libraries do not even ensure backwards compatibility for their newer
    major versions. This makes the job of the developers much harder, and often they
    are forced to handle these dependency upgrades manually. However, before they
    manage to do it, attackers might already use the vulnerabilities of old dependencies
    to steal user data. Such breaches are not just inconveniences for companies that
    may face legal actions from angry users, they are a danger for the end users as
    well. Thousands of Gigabytes of user data, like emails, passwords or even phone
    numbers, are dumped everyday on dark web forums. This is the main reason [why
    we notice a spike in spam calls](https://www.geekwire.com/2023/as-phone-scams-spike-around-the-world-one-would-be-victim-shares-a-cautionary-tale/) all
    over the world.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，安全性是最重要的方面之一。现今软件有很多依赖关系，我们都知道管理它们并保持其更新是多么困难。即使使用像Renovate或Dependabot这样的自动工具，各种库的提供者甚至不能确保它们的新版本保持向后兼容。这使得开发者的工作变得更加困难，通常他们不得不手动处理这些依赖关系的升级。然而，在他们设法完成之前，攻击者可能已经利用旧依赖关系的漏洞窃取用户数据。这种侵犯不仅对可能面临用户起诉的公司造成不便，也对最终用户构成威胁。每天在暗网论坛上都会有数千GB的用户数据（如电子邮件、密码甚至电话号码）被泄露。这就是[为什么我们注意到全球骚扰电话激增](https://www.geekwire.com/2023/as-phone-scams-spike-around-the-world-one-would-be-victim-shares-a-cautionary-tale/)的主要原因。
- en: What’s broken?
  id: totrans-split-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发生了什么问题？
- en: Now that I have defined what quality is, I am going to give my personal opinion
    on what’s broken with software nowadays. I must warn you that you will see many
    direct references to either people or groups of people in this section. Needless
    to say that I do not intend to blame anyone, any group or profession for the mess
    that we’re in. I just want to provide my view, shaped by more than 10 years of
    experience working in this industry. It’s just a personal opinion based on anecdotes,
    so don’t get defensive or take this personally in any way.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我已经定义了质量是什么，接下来我将给出我对现今软件问题的个人看法。我必须警告你，在这一部分中你会看到很多直接涉及到人或人群的引用。毫无疑问，我并不打算责备任何人、任何群体或任何职业导致我们陷入困境。我只是想提供我基于在这个行业工作超过10年的经验所形成的观点。这只是基于个人经历的个人意见，所以请不要过于防守或将其个人化。
- en: There’s a competency crisis affecting the world right now. People are just too
    distracted due to the immense volume of entertainment we are subjected to every
    day. The attention span for everyone is decreasing to the point where we cannot
    stay concentrated for more than a few minutes.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当前有一个影响全球的能力危机。人们因每天接触到的大量娱乐内容而分心。每个人的注意力都在减少，以至于我们无法集中精力超过几分钟。
- en: In my experience, this problem is really prevalent among the youngest people.
    I had the pleasure to work with brilliant people that are part of the Gen Z bracket,
    but most of the ones I worked with can’t get anything done. It’s not lack of experience,
    it’s because they are constantly defaulting to their phones, watching endless
    videos or even playing games while they are supposed to deliver. It sometimes
    feels like you’re working with an addict. And it’s not just me, there are scientific
    studies showing [the level of addiction to social media among this age group](https://pdfs.semanticscholar.org/60c8/2f53df8b106bf59dc2e5776f5144ef5e92ab.pdf).
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，这个问题在年轻人中非常普遍。我曾有幸与一些属于Z世代的聪明人共事，但大多数我一起工作过的人却不能完成任何事情。这不是因为缺乏经验，而是因为他们经常默认为使用手机，观看无休止的视频，甚至在应该交付工作时玩游戏。有时感觉自己在与一个上瘾者合作。而且不仅仅是我，还有科学研究显示了[这个年龄段社交媒体上瘾的程度](https://pdfs.semanticscholar.org/60c8/2f53df8b106bf59dc2e5776f5144ef5e92ab.pdf)。
- en: People cannot focus hard and long enough to handle complex tasks properly anymore,
    and this translates to more bugs, more usability problems and less dedication
    to their jobs and their mission as software developers.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 人们现在无法集中精力长时间处理复杂任务，这导致了更多的错误、更多的可用性问题，以及对软件开发者工作和使命的较少投入。
- en: One would counteract this point of view saying that effective software teams
    nowadays need to follow the latest best practices to maintain quality. TDD, event-driven
    architecture, hermetic testing, [pushing straight to master](https://medium.com/@mattia.battiston/why-i-love-trunk-based-development-641fcf0b94a0) and
    other esoteric concepts will help your team deliver continuously and maintain
    the quality level at the peak. Let’s take a step back and analyze where these
    suggestions are coming from?
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有人会反驳这一观点，称当今有效的软件团队需要遵循最新的最佳实践来保持质量。TDD、事件驱动架构、隔离测试、[直接推向主分支](https://medium.com/@mattia.battiston/why-i-love-trunk-based-development-641fcf0b94a0)以及其他神秘概念将帮助您的团队持续交付并保持质量水平处于巅峰状态。让我们退后一步，分析这些建议的来源。
- en: One of the thought leaders of software engineering is Martin Fowler. Many engineers
    follow blindly everything that he proposes. I’ve seen this trend in many companies,
    especially in cult-like organizations that brag about their unmatched engineering
    culture. Many such organizations will build microservices even if their software
    domain complexity is not high and the software itself is not projected to scale
    that much. They will do it because their God told them to do it. But how did he,
    and other such leaders become so influential? They must have built world-class
    software themselves, right?
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程思想领袖之一是Martin Fowler。许多工程师盲目地追随他提出的一切。我在许多公司，特别是在吹嘘其无与伦比的工程文化的那些类似教派的组织中看到了这种趋势。许多这样的组织会构建微服务，即使他们的软件领域复杂性不高，软件本身也不打算大规模扩展。他们这样做是因为他们的上帝告诉他们这样做。但是，他和其他类似领袖是如何变得如此有影响力的？他们一定是自己建立了世界级的软件，对吧？
- en: 'I searched for what Martin Fowler built everywhere. There’s no open source,
    or any published closed-source software that is marketed as being built by him.
    So I am asking again: how did he become so famous? Simply, by feeding what mediocre
    engineers crave for: controversy.'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我到处搜寻Martin Fowler建立的东西。没有开源的，也没有任何宣传的闭源软件说是由他建立的。所以我再问一次：他是如何变得如此出名的？简单地说，通过满足平庸工程师渴望的争议。
- en: Building software nowadays is not about engineering anymore. It’s about choosing
    the right design patterns for the job. This comes as a result of the prevalence
    of high-level programming language, where thinking about complex things like memory
    allocation is not necessary anymore. This democratizes the access to a software
    engineering career to almost anyone. It’s not a thing for the truly passionate
    people. The main effect is that the standard lowers to such an extent, that you
    get to have people in your team that don’t even write code everyday, but they
    are highly-appreciated by non-technical managers for their level of implication
    in endless debates about whether one should use TDD or not. The value that these
    people bring is close to zero, and this reflects in the software they deliver.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建软件不再是工程了。它关乎选择适合工作的正确设计模式。这是高级编程语言普及的结果，其中不再需要考虑像内存分配这样的复杂事物。这使得几乎任何人都能接触软件工程职业。这不再是真正热爱的人的事情了。主要的影响是，标准下降到这种程度，你的团队里可能有些人甚至不每天写代码，但他们因为在是否应该使用TDD等无休止辩论中的高度参与度而受到非技术经理的高度赞赏。这些人带来的价值几乎为零，这也体现在他们交付的软件中。
- en: With the emergence of those programming languages, and the abundance of frameworks
    that many companies release, the level of abstraction is on the rise. This gradually
    removes the need for engineers to develop a deep understanding of the technologies
    they’re using. They just don’t need that anymore. Don’t get me wrong, this has
    its own advantages. The fact that you get to be more productive, and everything
    now has a faster learning curve are great achievements. However, increasing the
    dependency on those tools can lead to a risk where engineers may lack a deep understanding
    of underlying principles, which can be crucial in debugging, optimization, and
    understanding the limitations of abstractions.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这些编程语言的出现，以及许多公司发布的框架的丰富，抽象水平正在上升。这逐渐减少了工程师对他们正在使用的技术深入理解的需求。他们不再需要那种理解。别误会，这也有其优点。你能更有效率，现在所有事情学习曲线更快，这都是很大的成就。然而，增加对这些工具的依赖可能会导致工程师缺乏对底层原理的深入理解，而这在调试、优化和理解抽象的限制方面可能是至关重要的。
- en: 'All in all, I believe software is broken due to these main reasons: lack of
    focus, fake engineers, as well as lack of deep understanding of what lies beneath
    the abstraction. I am really curious how AI is going to exacerbate the quality
    crisis we see in software nowadays. My bet is that in few years the situation
    will get worse, and good engineers will be forced out of the industry by their
    mediocre counterparts, as they might be preferred being more vocal and preaching
    what the fake gurus of the industry come up with.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我认为软件由于以下主要原因而出现问题：缺乏专注、假工程师，以及对抽象之下的深刻理解不足。我真的很好奇人工智能将如何加剧我们现在在软件中看到的质量危机。我打赌，在未来几年内，情况会变得更糟，好的工程师可能会被他们平庸的同行逼出行业，因为他们可能更喜欢发声，并且宣扬行业中的伪大师们所提出的观点。
- en: 'Like this:'
  id: totrans-split-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 像这样：
- en: Like Loading...
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 像加载中...
- en: '*Related*'
  id: totrans-split-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*相关的*'
