- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:17:14'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:17:14'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Java 23: The New Features are Officially Announced'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 23：新功能正式宣布
- en: 来源：[https://coderoasis.com/java-23-new-features/](https://coderoasis.com/java-23-new-features/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://coderoasis.com/java-23-new-features/](https://coderoasis.com/java-23-new-features/)
- en: The newest version of the Java Development Kit 23 (JDK) has four new features
    in the newest release. The two major features which are noteworthy so far is the
    Vector API, a second preview of the Stream Gatherers, and a preview of primitive
    types in patterns – such as `instanceof` and `switch`.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: Java Development Kit 23（JDK）的最新版本在最新发布中有四个新功能。到目前为止，两个主要功能值得关注，分别是 Vector API、流收集器的第二个预览，以及在模式中的基本类型预览，例如
    `instanceof` 和 `switch`。
- en: As a friendly reminder, the newest version is due on September 19th.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作为友情提醒，最新版本将于 9 月 19 日发布。
- en: The [Vector API](https://openjdk.org/jeps/469?ref=coderoasis.com) has been incubated
    in previous versions of Java since the release of the Java Development Kit 16
    all the way to the latest version of 22\. This new version will introduce an API
    to help express vector computations that compile at run time. This is to have
    an optimal vector instructions on different supported CPU architectures. Some
    of the goals of this proposal includes providing a standardized API, runtime compilation,
    better performance on the `x64` and `AArch64` CPU architectures, graceful degradation,
    being platform-agnostic, and aligning more with Project Valhalla – which is supposed
    to augment the Java Object Model with Value Objects instead.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Vector API](https://openjdk.org/jeps/469?ref=coderoasis.com) 在 Java Development
    Kit 16 发布以来一直在之前的版本中进行孵化，直到最新的 22 版本。这个新版本将引入一个 API 来帮助表达在运行时编译的向量计算。这旨在在不同支持的
    CPU 架构上编译优化的向量指令。该提议的一些目标包括提供标准化的 API、运行时编译、在 `x64` 和 `AArch64` CPU 架构上提供更好的性能、优雅降级、平台无关性，并与
    Valhalla 项目更加对齐——该项目旨在用值对象增强 Java 对象模型。'
- en: '* * *'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Do you like what you are reading? We do recommend this next article – [**Understanding
    Memory Safety in the Rust Programming Language**](Understanding%20Memory%20Safety%20in%20the%20Rust%20Programming%20Language)
    – to you to continue learning with us.
  id: totrans-split-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '你喜欢正在阅读的内容吗？我们推荐您阅读下一篇文章——[**理解 Rust 编程语言中的内存安全性**](Understanding%20Memory%20Safety%20in%20the%20Rust%20Programming%20Language)，与我们一起继续学习。  '
- en: '[Understanding Memory Safety in the Rust Programming Language'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[理解 Rust 编程语言中的内存安全性](Understanding%20Memory%20Safety%20in%20the%20Rust%20Programming%20Language)'
- en: The last decade has been amazing for the Rust Programming Language to become
    the choice for people has the goal of writing fast, machine native software and
    web applications. The way that the language was made was for strong guarantees
    for memory safety. We are here to try to understand](https://coderoasis.com/rust-lang-memory-safety/)
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 过去十年对于 Rust 编程语言而言是令人惊叹的，它成为了编写快速、机器原生软件和 Web 应用程序的首选。语言设计强调内存安全性的强大保证。我们在这里努力理解](https://coderoasis.com/rust-lang-memory-safety/)
- en: '* * *'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Vector API Code Example
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vector API 代码示例
- en: '[PRE0]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Stream Gatherers & Stream API
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流收集器 & Stream API
- en: If you remember, [Stream Gatherers](https://openjdk.org/jeps/473?ref=coderoasis.com)
    was previewed part of the Java Development Kid 22 release. Now it is going to
    be fully added to JDK 23\. The Stream Gatherers will enhance the [Stream API](https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/stream/package-summary.html?ref=coderoasis.com)
    to support custom operations. They will also allow stream pipelines to help transform
    data in ways that are harder to achieve with the current built-in operations.
    The goals for this is to making the stream pipelines far more flexible and expressive
    – this will also allow for custom operations to manipulate streams of infinite
    sizes.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得，[流收集器](https://openjdk.org/jeps/473?ref=coderoasis.com) 在 Java Development
    Kit 22 发布中预览过。现在它将完全添加到 JDK 23 中。流收集器将增强 [Stream API](https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/stream/package-summary.html?ref=coderoasis.com)，支持自定义操作。它们还允许流管道以一种当前内置操作难以实现的方式转换数据。该目标是使流管道更加灵活和表达力强——这也将允许自定义操作来操作无限大小的流。
- en: With using the [class-file API](https://openjdk.org/jeps/466?ref=coderoasis.com) is
    intended to provide an API for processing class files that tracks the class file
    format defined by the [Java Virtual Machine specification](https://docs.oracle.com/javase/specs/jvms/se21/html/jvms-4.html?ref=coderoasis.com).
    This also means that it would enable JDK components to migrate to the standard
    API and remove the Java Development Kit’s copy of the [ASM library](https://asm.ow2.io/?ref=coderoasis.com).
    The class-file API adds some fine-tuning – including streamlining the `CodeBuilder` class,
    which by default contains factory methods for bytecode instructions, including
    low-level factories, mid-level factories, and high-level builders for basic blocks.
    Right below is some example code of an ASM CodeBuilder than a Java CodeBuilder.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [类文件 API](https://openjdk.org/jeps/466?ref=coderoasis.com) 旨在提供一个处理跟踪 Java
    虚拟机规范定义的类文件格式的 API。这也意味着它将使 JDK 组件能够迁移到标准 API 并移除 Java Development Kit 的 [ASM
    库](https://asm.ow2.io/?ref=coderoasis.com)。类文件 API 添加了一些微调 - 包括简化 `CodeBuilder`
    类，默认包含字节码指令的工厂方法，包括低级工厂、中级工厂和基本块的高级构建器。下面是一个 ASM CodeBuilder 的示例代码，而不是一个 Java
    CodeBuilder。
- en: ASM CodeBuilder Code Example
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASM CodeBuilder 代码示例
- en: '[PRE1]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Java CodeBuilder Example Code
  id: totrans-split-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java CodeBuilder 示例代码
- en: '[PRE2]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the Java Development Kit 23, the Java CodeBuilder removes mid-level methods
    that duplicated low-level methods, or at worse, were infrequently used. While
    you rename the remaining mid-level methods to improve usability. They also refined
    the `ClassSignature` class model. This means that it has been improved to model
    the generic signatures of `superclasses` and `superinterfaces` more accurately.
    According to the OpenJDK proposal behind this feature, the Java platform should
    define and implement a standard class-file API that evolves together with the
    class-file format, which can easily change or evolve about every six months.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java Development Kit 23 中，Java CodeBuilder 删除了重复低级方法或在更糟糕的情况下很少使用的中级方法。同时，您重命名了其余的中级方法以改进可用性。他们还优化了
    `ClassSignature` 类模型。这意味着它已经改进以更准确地模拟 `superclasses` 和 `superinterfaces` 的泛型签名。根据
    OpenJDK 提议这一功能背后的特性，Java 平台应该定义并实现一个与类文件格式一起演进的标准类文件 API，这个格式可以很容易地每六个月左右进行更改或演进。
- en: Primitive Types in Patterns
  id: totrans-split-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式中的原始类型
- en: As previously mentioned to be included with the newest planned features and
    release of the Java Development Kit 23, we gained another preview feature that
    is highly worth noting for Java Developers. The feature is [primitive types in
    patterns, `instanceof`, and `switch`](https://openjdk.org/jeps/455?ref=coderoasis.com).
    This feature will majorly enhance pattern matching by allowing primitive type
    patterns in pattern contexts. Then we extend the `instanceof` and `switch` to
    work with all primitive types. This also includes pattern matching to use primitive
    type patterns in both nested and top-level contexts – providing easy-to-use constructs
    that eliminate the risk of losing information due to unsafe casts
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前提到的，要包括在最新计划的 Java Development Kit 23 版本的特性和发布中，我们获得了另一个预览特性，这对于 Java 开发者来说非常值得注意。该特性是
    [模式中的原始类型、`instanceof` 和 `switch`](https://openjdk.org/jeps/455?ref=coderoasis.com)。该特性将通过允许在模式上下文中使用原始类型模式来显著增强模式匹配。然后我们扩展了
    `instanceof` 和 `switch` 以处理所有原始类型。这还包括模式匹配在嵌套和顶层上下文中使用原始类型模式 - 提供易于使用的构造，消除由于不安全的转换而丢失信息的风险。
- en: Other goals include aligning pattern types with `instanceof`, aligning `instanceof` with
    safe casting, and allowing `switch` to process values of any primitive type.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 其他目标包括将模式类型与 `instanceof` 对齐，将 `instanceof` 与安全转换对齐，并允许 `switch` 处理任何原始类型的值。
- en: Primitive Type Code Example
  id: totrans-split-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始类型代码示例
- en: '[PRE3]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Statements before super(...)
  id: totrans-split-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: super(...) 之前的语句
- en: Other features that were previewed in the Java Development Kit 22 release could
    also make it quite easily into the Java Development Kit 23 release. These include
    statements before `super(…)`, which would give developers greater freedom in expressing
    constructor behavior – meaning string templates. This would make it easy to express
    strings that include values computed at run time – meaning scoped values. This
    would enable sharing of immutable data within and across threads; and implicitly
    declared classes and instance main methods.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: Java 开发工具包 22 版本中预览的其他特性也可能很容易进入 Java 开发工具包 23 版本。这些包括 `super(...)` 前的语句，这将为开发者在表达构造函数行为时提供更大的自由——即字符串模板。这将使得表达包含在运行时计算的值的字符串变得容易——即作用域值。这将支持在线程内外共享不可变数据；以及隐式声明的类和实例主方法。
- en: Super(...) Code Example
  id: totrans-split-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Super(...) 代码示例
- en: '[PRE4]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Overall, these changes will make it easier for beginning programmers to write
    programs without needing to understand the programming language features designed
    for larger or enterprise application development.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这些变化将使初学程序员更容易编写程序，无需了解专为大型或企业级应用程序开发设计的编程语言特性。
- en: Oracle also has revealed [plans for Java in 2024](https://www.youtube.com/watch?v=iL7d-gGrms8&ref=coderoasis.com).
    Oracle outlined improvements that involve  OpenJDK projects ranging from[ Amber](https://openjdk.org/projects/amber/?ref=coderoasis.com),
    for developing smaller, productivity-oriented features, to [Babylon](https://openjdk.org/projects/babylon/?ref=coderoasis.com),
    for extending Java to foreign programming models such as GPUs, to [Valhalla](https://openjdk.org/projects/valhalla/?ref=coderoasis.com),
    for augmenting the Java object model with value objects to eliminate longstanding
    performance bottlenecks.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 还揭示了 [2024 年 Java 的计划](https://www.youtube.com/watch?v=iL7d-gGrms8&ref=coderoasis.com)。Oracle
    概述了涉及 OpenJDK 项目的改进，从 [Amber](https://openjdk.org/projects/amber/?ref=coderoasis.com)
    开始，旨在开发更小、更具生产力的特性，到 [Babylon](https://openjdk.org/projects/babylon/?ref=coderoasis.com)，旨在将
    Java 扩展到如 GPU 这样的外部编程模型，再到 [Valhalla](https://openjdk.org/projects/valhalla/?ref=coderoasis.com)，旨在通过值对象增强
    Java 对象模型，以消除长期存在的性能瓶颈。
- en: '* * *'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Do you like what you''re reading from the CoderOasis Technology Blog? We recommend
    reading our [***Hacktivism: Social Justice by Data Leaks and Defacements***](https://coderoasis.com/hacktivism-social-justice-by-data-leaks-and-defacements/)
    as your next choice.'
  id: totrans-split-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你喜欢阅读 CoderOasis 技术博客的内容吗？我们建议你阅读我们的 [***黑客行动：通过数据泄露和篡改实现社会正义***](https://coderoasis.com/hacktivism-social-justice-by-data-leaks-and-defacements/)
    作为下一个选择。
- en: '[Hacktivism: Social Justice by Data Leaks and Defacements'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[黑客行动：通过数据泄露和篡改实现社会正义'
- en: Around the end of February, a hacktivist that calls himself JaXpArO and My Little
    Anonymous Revival Project breached the far-right social media platform named Gab.
    They managed to gain seventy gigabytes of data from the backend databases. The
    data contained user profiles, private posts, chat messages, and more – a lot](https://coderoasis.com/hacktivism-social-justice-by-data-leaks-and-defacements/)
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 二月末，号称 JaXpArO 和 My Little Anonymous Revival Project 的黑客活动分子攻破了名为 Gab 的极右社交媒体平台。他们成功从后台数据库中获取了七十吉字节的数据。数据包含用户资料、私人帖子、聊天消息等内容——很多](https://coderoasis.com/hacktivism-social-justice-by-data-leaks-and-defacements/)
- en: '* * *'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Did you know we have a [**Community Forums**](https://forums.coderoasis.com/?ref=coderoasis.com)
    and [**Discord Server**](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com)? which
    we invite everyone to join us? Want to discuss this article with other members
    of our community? Want to join a laid back place to chill and discuss topics like
    programming, cybersecurity, web development, and Linux? Consider joining us today!
  id: totrans-split-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你知道我们有 [**社区论坛**](https://forums.coderoasis.com/?ref=coderoasis.com) 和 [**Discord
    服务器**](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com) 吗？我们邀请大家加入我们！想与社区其他成员讨论这篇文章吗？想加入一个轻松的地方，闲聊和讨论编程、安全、Web
    开发和 Linux 等话题吗？今天就考虑加入我们吧！
- en: '[Join the CoderOasis.com Discord Server!'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[加入 CoderOasis.com Discord 服务器！'
- en: CoderOasis offers technology news articles about programming, security, web
    development, Linux, systems admin, and more. | 112 members](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com)  [CoderOasis
    Forums
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: Coder   CoderOasis 提供关于编程、安全、Web 开发、Linux、系统管理员等技术新闻文章。 | 112 名成员](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com)
    [CoderOasis 论坛
- en: CoderOasis Community Forums where our members can have a place to discuss technology
    together and share resources with each other.](https://forums.coderoasis.com/?ref=coderoasis.com)
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: CoderOasis 社区论坛，成员们可以在这里一起讨论技术，共享资源。](https://forums.coderoasis.com/?ref=coderoasis.com)
