- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:16:32'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Supabase Auth now supports Anonymous Sign-ins
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://supabase.com/blog/anonymous-sign-ins](https://supabase.com/blog/anonymous-sign-ins)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Supabase Auth now supports [anonymous sign-ins](/docs/guides/auth/auth-anonymous),
    one of our [most-requested features](https://github.com/supabase/auth/issues/68)
    by the community.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: Anonymous sign-ins can be used to create **temporary users** who haven’t signed
    up for your application yet. This lowers the friction for new users to try out
    your product since they don’t have to provide any signup credentials.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: 'You can [enable anonymous sign-ins](/dashboard/project/_/settings/auth) for
    your project today from the dashboard:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: 'For local development, upgrade your Supabase CLI and add the config to the
    `config.toml` file:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '`_10'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: enable_anonymous_sign_ins = true`
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: You can create an anonymous user through the [Javascript](/docs/reference/javascript/auth-signinanonymously),
    [Flutter](/docs/reference/dart/auth-signinanonymously) or [Swift](/docs/reference/swift/auth-signinanonymously)
    SDKs today. Here’s how you can create an anonymous user using `supabase-js` .
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: '`_10'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: const { data, error } = await supabase`
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: Profiles created with anonymous sign-ins are also `authenticated`!
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you call `.signInAnonymously()` you have moved the user into an authentication
    flow, and we treat them like a signed in user:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Like a permanent user, anonymous users are persisted in the `auth.users` table:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: '| id | role | email | is_anonymous |'
  id: totrans-split-18
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-split-19
  prefs: []
  type: TYPE_TB
- en: '| e053e470-afa1-4625-8963-37adb862fd11 | authenticated | NULL | true |'
  id: totrans-split-20
  prefs: []
  type: TYPE_TB
- en: '| 5563108e-ac81-4063-9288-4f3db068efa1 | authenticated | [[email protected]](/cdn-cgi/l/email-protection#0e627b656b4e7d7a6f7c796f7c7d206d6163)
    | false |'
  id: totrans-split-21
  prefs: []
  type: TYPE_TB
- en: An anonymous user can be identified by the `is_anonymous` claim returned in
    the user’s JWT, which is accessible from your Row Level Security policies (RLS).
    This is helpful if you want to limit access to certain features in your application.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: For example, let’s say that we have an online forum where users can create and
    read posts.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Given this table to store the posts:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: '`_10'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: create table public.posts (
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: _10
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: id serial primary key,`
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: If we only want to allow permanent users to create posts, we can check if the
    user is anonymous by inspecting the JWT `select auth.jwt() ->> 'is_anonymous'`.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this function in an RLS policy:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: '`_10'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: create policy "Only permanent users can create posts"
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: _10
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: 'to authenticated -- Note: user is still authenticated'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: _10
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: (select auth.jwt() ->> 'is_anonymous')::boolean is false`
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: RLS gives us full flexibility to create a variety of rules.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to allow read access for permanent users for all posts and limit
    anonymous users to posts created today:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: '`_12'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: create policy "Limit access to anonymous users"
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: _12
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: 'to authenticated -- Note: user is still authenticated'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: _12
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: when (select (auth.jwt() ->> 'is_anonymous'))::boolean is true
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: _12
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: then (created_at >= current_date)`
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: At some point, an anonymous user may decide they want to create a post. This
    is where we prompt them to sign up for an account which converts them to a permanent
    user.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: An anonymous user is considered a permanent user when they have an identity
    associated to them.
  id: totrans-split-48
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: After they have been converted, the user id remains the same, which means that
    any data associated with the user’s id would be carried over.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Supabase Auth provides 2 ways to achieve this:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: Link an email or phone identity
  id: totrans-split-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Link an OAuth identity
  id: totrans-split-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To link an email or phone identity:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: '`_10'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: const { data, error } = await supabase
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: _10
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: .updateUser({ email })`
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: To link an OAuth identity to an anonymous user, you need to [enable manual linking](/dashboard/project/_/settings/auth)
    for your project. Learn about how [identity linking](/docs/guides/auth/auth-identity-linking)
    works with Supabase Auth.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Once enabled, you can call the `linkIdentity()` method:'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: '`_10'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: const { data, error } = await supabase
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: _10
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: '.linkIdentity({ provider: ''google'' })`'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating RLS policies to differentiate access for an anonymous user, you
    can leverage the [user impersonation feature](/blog/studio-introducing-assistant)
    in the SQL editor to test out your policies:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: Database role settings in the SQL editor. You can impersonate an anonymous user
    by selecting the user from the dropdown.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: The [user management screen](/dashboard/project/_/auth/users) provides an option
    to filter by anonymous users, which can help to know how many anonymous users
    have been created.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: Filtering by anonymous users on the Users page.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
- en: 'Managing anonymous users can be tricky, especially when you have a lot of visitors
    to your site. We’re working on an “automatic clean-up” option to delete anonymous
    users that have been inactive for more than 30 days. In the meantime, since anonymous
    users are stored in the auth schema in your database, you can clean up orphaned
    anonymous users by running the following query:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: '`_10'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
- en: -- deletes anonymous users created more than 30 days ago
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: _10
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
- en: delete from auth.users
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: _10
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
- en: where is_anonymous is true and created_at < now() - interval '30 days';`
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
- en: We are also working on a [linter](https://github.com/supabase/splinter/pull/28)
    to check your RLS policies and highlight those that allow anonymous users access
    - stay tuned for updates later this month!
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
