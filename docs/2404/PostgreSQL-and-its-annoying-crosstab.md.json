["```\nCREATE TABLE my_table\n(\n    string_col text,\n    int_col    int\n);\n-- create 1000 rows with strings '1 2 ... 10' or null for string_col\n-- create 1000 rows with random values between 1 and 100 or null for int_col\nINSERT INTO my_table\nSELECT CASE\n           WHEN RANDOM() < 0.9 THEN (SELECT STRING_AGG(words::text, ' ') FROM GENERATE_SERIES(1, 10) words)\n           ELSE NULL END,\n       CASE WHEN RANDOM() < 0.9 THEN FLOOR(RANDOM() * 100) ELSE NULL END\nFROM GENERATE_SERIES(1, 1000); \n```", "```\nSELECT\n        COUNT(*) total_rows,\n        -- stats for int_col\n        COUNT(int_col) int_col_null_count,\n        COUNT(DISTINCT int_col) int_col_unique_count,\n        MAX(int_col) int_col_max_value,\n        MIN(int_col) int_col_min_value,\n        AVG(int_col) int_col_avg_value,\n        -- stats for string_col\n        COUNT(string_col) string_col_null_count,\n        COUNT(DISTINCT string_col) string_col_unique_count,\n        MAX(LENGTH(string_col)) string_col_max_length,\n        MIN(LENGTH(string_col)) string_col_min_length,\n        AVG(LENGTH(string_col)) string_col_avg_length,\n        MAX(LENGTH(string_col) - LENGTH(REPLACE(string_col, ' ', ''))) string_col_space_count_max,\n        MIN(LENGTH(string_col) - LENGTH(REPLACE(string_col, ' ', ''))) string_col_space_count_min,\n        AVG(LENGTH(string_col) - LENGTH(REPLACE(string_col, ' ', ''))) string_col_space_count_avg\nFROM my_table; \n```", "```\nWITH stats AS (\n    SELECT\n        COUNT(*) total_rows,\n        -- stats for int_col\n        COUNT(int_col) int_col_not_null_count,\n        COUNT(DISTINCT int_col) int_col_unique_count,\n        MAX(int_col) int_col_max_value,\n        MIN(int_col) int_col_min_value,\n        AVG(int_col) int_col_avg_value,\n        -- stats for string_col\n        COUNT(string_col) string_col_not_null_count,\n        COUNT(DISTINCT string_col) string_col_unique_count,\n        MAX(LENGTH(string_col)) string_col_max_length,\n        MIN(LENGTH(string_col)) string_col_min_length,\n        AVG(LENGTH(string_col)) string_col_avg_length,\n        MAX(LENGTH(string_col) - LENGTH(REPLACE(string_col, ' ', ''))) string_col_space_count_max,\n        MIN(LENGTH(string_col) - LENGTH(REPLACE(string_col, ' ', ''))) string_col_space_count_min,\n        AVG(LENGTH(string_col) - LENGTH(REPLACE(string_col, ' ', ''))) string_col_space_count_avg\n    FROM my_table\n)\nSELECT l.* FROM stats\n    CROSS JOIN LATERAL(\n        VALUES\n        -- int_col stats\n        ('int_col', 'total_rows', total_rows::text),\n        ('int_col', 'not_null_count', int_col_not_null_count::text),\n        ('int_col', 'unique_count', int_col_unique_count::text),\n        ('int_col', 'max_value', int_col_max_value::text),\n        ('int_col', 'min_value', int_col_min_value::text),\n        ('int_col', 'avg_value', int_col_avg_value::text),\n        -- string_col stats\n        ('string_col', 'total_rows', total_rows::text),\n        ('string_col', 'not_null_count', string_col_not_null_count::text),\n        ('string_col', 'unique_count', string_col_unique_count::text),\n        ('string_col', 'max_length', string_col_max_length::text),\n        ('string_col', 'min_length', string_col_min_length::text),\n        ('string_col', 'avg_length', string_col_avg_length::text),\n        ('string_col', 'space_count_max', string_col_space_count_max::text),\n        ('string_col', 'space_count_min', string_col_space_count_min::text),\n        ('string_col', 'space_count_avg', string_col_space_count_avg::text)\n    ) AS l(column_name, meta_key, value); \n```", "```\nCREATE EXTENSION IF NOT EXISTS tablefunc; \n```", "```\nSELECT * FROM crosstab('SELECT column_name, meta_key, value FROM ([GIANT SUBQUERY HERE]) t ORDER BY 1, 2') AS ct (\n    column_name text,\n    total_rows text,\n    not_null_count text,\n    unique_count text,\n    max_value text,\n    min_value text,\n    avg_value text,\n    max_length text,\n    min_length text,\n    avg_length text,\n    space_count_max text,\n    space_count_min text,\n    space_count_avg text\n); \n```", "```\nSELECT * FROM crosstab(\n    'SELECT column_name, meta_key, value, row_number() OVER (PARTITION BY column_name ORDER BY meta_key) FROM ([GIANT SUBQUERY HERE]) t ORDER BY 1, 2',\n    -- list of all result columns, sorted by name\n    'VALUES\n        (''avg_length''),\n        (''avg_value''),\n        (''max_length''),\n        (''max_value''),\n        (''min_length''),\n        (''min_value''),\n        (''not_null_count''),\n        (''space_count_avg''),\n        (''space_count_max''),\n        (''space_count_min''),\n        (''total_rows''),\n        (''unique_count'')\n    ') AS ct (\n    -- MUST BE IN SAME ORDER AS THE LIST ABOVE\n    column_name text,\n    avg_length text,\n    avg_value text,\n    max_length text,\n    max_value text,\n    min_length text,\n    min_value text,\n    not_null_count text,\n    space_count_avg text,\n    space_count_max text,\n    space_count_min text,\n    total_rows text,\n    unique_count text\n); \n```", "```\nSELECT $$This is\na long string with 'quotes'$$; \n```"]