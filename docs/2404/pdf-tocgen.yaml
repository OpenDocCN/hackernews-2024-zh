- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:38:59'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: pdf.tocgen
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://krasjet.com/voice/pdf.tocgen/](https://krasjet.com/voice/pdf.tocgen/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <main>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-7
  prefs: []
  type: TYPE_PRE
- en: '[pdf.tocgen](https://sink.krj.st/pdf.tocgen/) is a set of command-line tools
    for automatically extracting and generating the table of contents (ToC) of a PDF
    file. It uses the embedded font attributes and position of headings to deduce
    the basic outline of a PDF file.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: An overview
  id: totrans-split-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For example, for the PDF version of Paul Graham’s book *On Lisp*, available
    for download on [his website](http://www.paulgraham.com/onlisptext.html) but comes
    *without* a table of content, we can use the `pdfxmeta` command to build a recipe
    file,
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: In [1]
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
- en: In [2]
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
- en: In [3]
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
- en: Out [3]
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
- en: saved as `recipe.toml`. Then use `pdftocgen` to automatically generate a table
    of contents for the book, extracted using the recipe.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: In [4]
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
- en: Out [4]
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
- en: We could save the output to a file called `toc`,
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: In [5]
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
- en: and import it to the original PDF file using the `pdftocio` command, saving
    it as `output.pdf`.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: In [6]
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
- en: This is just an overview of the basic workflow. Please read [section 4](#a-worked-example)
    for a detailed explanation and walk-through.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: pdf.tocgen works best for PDF files produces from a  document using `pdftex`
    (and its friends `pdflatex`, `pdfxetex`, etc.), but it’s designed to work with
    any *software-generated* PDF filesThat is, you shouldn’t expect it to work with
    scanned PDFs. Some examples include `troff`/<wbr>`groff`, Adobe InDesign, Microsoft
    Word, and probably more.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: pdf.tocgen is a free software. The source code can be found in the [sink](https://sink.krj.st/pdf.tocgen/)
    or on [GitHub](https://github.com/Krasjet/pdf.tocgen/) and is licensed under the
    GPLv3 license. You are free to tinker with the source code, but any derivatives
    *must* guarantee the [freedom](https://www.gnu.org/philosophy/free-sw.en.html)
    of users. If you want to contribute to this project, send a [patch](https://sink.krj.st)
    or open a pull request on [GitHub](https://github.com/Krasjet/pdf.tocgen/).
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  id: totrans-split-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pdf.tocgen is written in Python 3. It is known to work with Python 3.7 to 3.11
    on Linux, Windows, and macOSOn BSDs, you probably need to build PyMuPDF yourself.
    Use
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: In [7]
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
- en: to install the latest version systemwide. Alternatively, use [`pipx`](https://pipxproject.github.io/pipx/)
    or
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: In [8]
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
- en: to install it for the current user. I would recommend the latter approach to
    avoid messing up the package manager on your system.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using an Arch-based Linux distro, the package is also available
    on [AUR](https://aur.archlinux.org/packages/pdf.tocgen/). It can be installed
    using any AUR helper, for example [`yay`](https://github.com/Jguer/yay):'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: In [9]
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
- en: Note to LaTeX users
  id: totrans-split-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we continue, note that this tool targets *readers*, not *authors*.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: The intended usage is to generate a table of contents for [lecture notes](https://see.stanford.edu/materials/lsoftaee261/book-fall-07.pdf),
    [draft books](https://felleisen.org/matthias/HtDC/htdc.pdf), or possibly the papers
    on [arXiv](https://arxiv.org/) for *easier navigation*. If you are a  user, please
    *do not* use this tool to generate table of contents for your own manuscripts.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: Use the [hyperref](https://ctan.org/pkg/hyperref) package instead,
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: since it understands your document better and provides more customizations.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: A worked example
  id: totrans-split-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The design of pdf.tocgen is influenced by the [Unix philosophy](https://en.wikipedia.org/wiki/Unix_philosophy).
    I intentionally separated pdf.tocgen to 3 separate programs. They work together,
    but each of them is useful on its own.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: 'They represents the 3 steps necessary to add table of contents to a PDF file:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: '`pdfxmeta`: extract the metadata (font attributes, positions) of headings to
    build a recipe file.'
  id: totrans-split-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pdftocgen`: generate a table of contents from the recipe.'
  id: totrans-split-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pdftocio`: import the table of contents to the PDF document.'
  id: totrans-split-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, we will use Paul Graham’s book *On Lisp*, freely available on [his website](http://www.paulgraham.com/onlisptext.html)
    as a PDF but comes without a table of contents embedded, to demonstrate how these
    3 programs work together.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: If you want to follow along, go ahead and download the book and save it as `onlisp.pdf`.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Build a recipe'
  id: totrans-split-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`pdftocgen` extracts the headings using the font attributes and position (bounding
    box) of text embedded in a PDF file. We need to supply it with a recipe, which
    is a [TOML](https://toml.io) file that tells `pdftocgen` what a heading, subheading,
    or subsubheading should look like.'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: 'The recipe for our example, *On Lisp*, which I have already mentioned before,
    looks like this:'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-split-60
  prefs: []
  type: TYPE_PRE
- en: A recipe is a list of filters, each of which specifies the attributes `pdftocgen`
    should look for. For example, in the recipe above, a level 1 heading, which corresponds
    to chapter titles in *On Lisp*, should
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: Have font name matching `"Times-Bold"`
  id: totrans-split-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have font size `19.92530059814453`
  id: totrans-split-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Of course, the font size don’t have to be this precise, you could set a tolerance
    level using the `font.size_tolerance` attributes:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-split-65
  prefs: []
  type: TYPE_PRE
- en: How do we know what attributes a heading should have? This is why we need to
    use `pdfxmeta` to extract the metadata of text in a PDF file.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: Open up the PDF file you just downloaded in your favorite PDF reader. We will
    use [zathura](https://pwmt.org/projects/zathura/) here, but use anything you are
    comfortable with.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
- en: In [10]
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-split-69
  prefs: []
  type: TYPE_PRE
- en: 'Scroll down to page 14, counting from the title page. This is where the first
    chapter’s title “The Extensible Language” is. To look at the metadata associated
    with this title, use the `pdfxmeta` command:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: In [11]
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-split-72
  prefs: []
  type: TYPE_PRE
- en: Out [11]
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-split-74
  prefs: []
  type: TYPE_PRE
- en: The `-p` flag tells `pdfxmeta` that it should only search on page 14. It is
    not required, but I highly recommend specifying it to make the search less ambiguous.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have extracted the metadata for chapter titles, we could make it
    a filter by copy-pasting it, or redirect the output, to a recipe file called `recipe.toml`.
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
- en: In [12]
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-split-78
  prefs: []
  type: TYPE_PRE
- en: Use your favorite editor to open up the recipe file and remove the indentationsIn
    Vim, you could press `<<` in normal mode to dedent a line, and add the `[[heading]]`
    header and the `level` attribute to specify the heading level.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-split-80
  prefs: []
  type: TYPE_PRE
- en: This is already a valid recipe file, but it is too specific. It is very unlikely
    that other chapter titles would match all four bounding box (`bbox`) values, which
    means they would have exactly the same position and width as this chapter’s title.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
- en: If you want to ignore an attribute, simply remove it from the filter. From my
    experience, `font.name` and `font.size` is usually enough.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-split-83
  prefs: []
  type: TYPE_PRE
- en: 'If you are lazy, you can also use the `--auto` or `-a` flag to format the output
    as a heading filter with the default settings. But the output will be slightly
    harder to read:'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
- en: In [13]
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-split-86
  prefs: []
  type: TYPE_PRE
- en: Out [13]
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-split-88
  prefs: []
  type: TYPE_PRE
- en: The argument after the `-a` flag is the heading level of the output heading
    filter, which in this case is `1`. Don’t worry about the `greedy` option right
    now, it is not necessary for this book.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to extract the metadata of level 2 headings:'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
- en: In [14]
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-split-92
  prefs: []
  type: TYPE_PRE
- en: Out [14]
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-split-94
  prefs: []
  type: TYPE_PRE
- en: Note that we could use regular expressions (Python-style) as the pattern. The
    `-i` option can be used to enable case-insensitive search.
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
- en: Use the `-a` flag to dump it to `recipe.toml`
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
- en: In [15]
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-split-98
  prefs: []
  type: TYPE_PRE
- en: 'and pick the attributes we need:'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-split-100
  prefs: []
  type: TYPE_PRE
- en: If you can’t find want you are looking for, leave out the query string to dump
    the entire page,
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
- en: In [16]
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-split-103
  prefs: []
  type: TYPE_PRE
- en: Out [16]
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-split-105
  prefs: []
  type: TYPE_PRE
- en: but it is very likely that `pdftocgen` can’t generate a meaningful table of
    contents for you if you can’t find the heading using `pdfxmeta`. Sorry about that.
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
- en: As a side node, sometimes you would see the `+` symbol in `font.name`, for example
    in the PDF draft of [*How to design Classes*](https://felleisen.org/matthias/HtDC/htdc.pdf)
    by Matthias Felleisen et al.In the latest version, the subset will be automatically
    stripped off, so you might not see this anymore
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
- en: In [17]
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-split-109
  prefs: []
  type: TYPE_PRE
- en: Out [17]
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-split-111
  prefs: []
  type: TYPE_PRE
- en: 'The `UFRVLO+` in `font.size` represent a *subset* in the complete font family
    `Palatino-Bold`. The font in different headings might be distributed into multiple
    subsets, so it is *almost always* a good idea to match against the entire family
    by removing the subset prefix:'
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-split-113
  prefs: []
  type: TYPE_PRE
- en: You could also use the `-a` flag as before to handle this automatically.
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
- en: In [18]
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-split-116
  prefs: []
  type: TYPE_PRE
- en: Out [18]
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-split-118
  prefs: []
  type: TYPE_PRE
- en: 'Also, note that `font.name` can take a regular expression:'
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-split-120
  prefs: []
  type: TYPE_PRE
- en: You might need some experiments to determine the best recipe for the PDF. You
    could find some pre-made recipes [here](https://github.com/Krasjet/pdf.tocgen/tree/master/recipes),
    but in most cases you would need to design your own recipes. You are welcome to
    contribute more recipes by sending patches or pull requests.
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Generate table of contents'
  id: totrans-split-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have crafted a recipe for *On Lisp* in `recipe.toml`,
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-split-124
  prefs: []
  type: TYPE_PRE
- en: we could use the `pdftocgen` command to generate the table of contents for our
    PDF
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
- en: In [19]
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-split-127
  prefs: []
  type: TYPE_PRE
- en: Out [19]
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-split-129
  prefs: []
  type: TYPE_PRE
- en: The output of `pdftocgen` is a dialect of CSV. The main differences are
  id: totrans-split-130
  prefs: []
  type: TYPE_NORMAL
- en: Every *4 spaces* of indent represents a new heading level so a level 3 heading
    is *8 spaces* of indent
  id: totrans-split-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The separator is a single space, not comma
  id: totrans-split-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Titles need to be quoted using double quotes.
  id: totrans-split-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This format is intentionally designed to be easily *edited* (in Vim), since
    the output of `pdftocgen` is *expected to be* inaccurate in many cases and you
    are likely to tweak the table of contents before you import it to the original
    PDF file.
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
- en: If a heading contains the actual double quote character (`"`), use two double
    quotes (`""`) to escape it,
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-split-136
  prefs: []
  type: TYPE_PRE
- en: but the double quotes in most PDFs are usually smart quotes (`“` and `”`), so
    escaping is rarely necessary.
  id: totrans-split-137
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t want to import the table of contents to PDF, you could instead
    use the `-H` flag to print the table of contents in a more readable format,
  id: totrans-split-138
  prefs: []
  type: TYPE_NORMAL
- en: In [20]
  id: totrans-split-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-split-140
  prefs: []
  type: TYPE_PRE
- en: Out [20]
  id: totrans-split-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-split-142
  prefs: []
  type: TYPE_PRE
- en: but this format can’t be read by `pdftocio`.
  id: totrans-split-143
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, we will save the table of contents to a file called `toc`:'
  id: totrans-split-144
  prefs: []
  type: TYPE_NORMAL
- en: In [21]
  id: totrans-split-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-split-146
  prefs: []
  type: TYPE_PRE
- en: 'Step 3: Import the ToC to PDF'
  id: totrans-split-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To import the generated table of contents to the original PDF file, simply redirect
    the `toc` file to `pdftocio`.
  id: totrans-split-148
  prefs: []
  type: TYPE_NORMAL
- en: In [22]
  id: totrans-split-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-split-150
  prefs: []
  type: TYPE_PRE
- en: The output PDF document is named `onlisp_out.pdf`Use the `-o` flag if you want
    a different file name. When you open it up in zathura
  id: totrans-split-151
  prefs: []
  type: TYPE_NORMAL
- en: In [23]
  id: totrans-split-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-split-153
  prefs: []
  type: TYPE_PRE
- en: and press the `TAB` key, you should see the table of contents has been successfully
    imported to the PDF file.
  id: totrans-split-154
  prefs: []
  type: TYPE_NORMAL
- en: In fact, if you don’t want to edit the table of contents, the output of `pdftocgen`
    can be directly piped into `pdftocio`
  id: totrans-split-155
  prefs: []
  type: TYPE_NORMAL
- en: In [24]
  id: totrans-split-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-split-157
  prefs: []
  type: TYPE_PRE
- en: I call this program `pdftocio` because it can also be used to *output* the existing
    table of contents of a PDF document if you don’t supply any external input
  id: totrans-split-158
  prefs: []
  type: TYPE_NORMAL
- en: In [25]
  id: totrans-split-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-split-160
  prefs: []
  type: TYPE_PRE
- en: Out [25]
  id: totrans-split-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-split-162
  prefs: []
  type: TYPE_PRE
- en: or with the `-H` flag to display it in a more readable format.
  id: totrans-split-163
  prefs: []
  type: TYPE_NORMAL
- en: In [26]
  id: totrans-split-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-split-165
  prefs: []
  type: TYPE_PRE
- en: Out [26]
  id: totrans-split-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-split-167
  prefs: []
  type: TYPE_PRE
- en: A summary
  id: totrans-split-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although the example above gets quite long, the essential steps are very simple.
  id: totrans-split-169
  prefs: []
  type: TYPE_NORMAL
- en: First, search for metadata of headings using `pdfxmeta`
  id: totrans-split-170
  prefs: []
  type: TYPE_NORMAL
- en: In [27]
  id: totrans-split-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-split-172
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `recipe.toml` file to pick out the attributes you need, or leave it
    at default if you don’t need any customizations:'
  id: totrans-split-173
  prefs: []
  type: TYPE_NORMAL
- en: In [28]
  id: totrans-split-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-split-175
  prefs: []
  type: TYPE_PRE
- en: Then use the recipe to generate a table of contents and import it to the PDF
    file
  id: totrans-split-176
  prefs: []
  type: TYPE_NORMAL
- en: In [29]
  id: totrans-split-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-split-178
  prefs: []
  type: TYPE_PRE
- en: Or if you want to edit the table of contents before importing it,
  id: totrans-split-179
  prefs: []
  type: TYPE_NORMAL
- en: In [30]
  id: totrans-split-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-split-181
  prefs: []
  type: TYPE_PRE
- en: Each of the three programs has some extra functionalities. Use the `-h` option
    to see all the options you could pass in.
  id: totrans-split-182
  prefs: []
  type: TYPE_NORMAL
- en: 'One more example: Mathematics'
  id: totrans-split-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pdf.tocgen’s recipe format provides some convenient options for handling math
    symbols in headings. They are especially useful for handling lecture notes, textbook,
    or papers in mathematics.
  id: totrans-split-184
  prefs: []
  type: TYPE_NORMAL
- en: Let us look at another example, the [lecture notes](https://see.stanford.edu/materials/lsoftaee261/book-fall-07.pdf)
    for EE261 in Stanford, written by Prof. Brad Osgood. This document also doesn’t
    come with a table of contents, and the headings contains many math symbols such
    as , , , etc.
  id: totrans-split-185
  prefs: []
  type: TYPE_NORMAL
- en: 'These math symbols do not have the same font as the surrounding text, which
    can be a problem if we specify the headings using `font.name`:'
  id: totrans-split-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-split-187
  prefs: []
  type: TYPE_PRE
- en: The recipe above is generated using
  id: totrans-split-188
  prefs: []
  type: TYPE_NORMAL
- en: In [31]
  id: totrans-split-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-split-190
  prefs: []
  type: TYPE_PRE
- en: In [32]
  id: totrans-split-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-split-192
  prefs: []
  type: TYPE_PRE
- en: In [33]
  id: totrans-split-193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-split-194
  prefs: []
  type: TYPE_PRE
- en: with comments cleaned up.
  id: totrans-split-195
  prefs: []
  type: TYPE_NORMAL
- en: If we pass the recipe file `pdftocgen`, you would notice that some of the math
    symbols are missing from the title.
  id: totrans-split-196
  prefs: []
  type: TYPE_NORMAL
- en: In [34]
  id: totrans-split-197
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-split-198
  prefs: []
  type: TYPE_PRE
- en: Out [34]
  id: totrans-split-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-split-200
  prefs: []
  type: TYPE_PRE
- en: Pay attention to the title of section 1.5, 1.12, and 1.17. Comparing it with
    page 3 of the PDF, you should notice that the math symbols are missing from the
    headings.
  id: totrans-split-201
  prefs: []
  type: TYPE_NORMAL
- en: There are several options to deal with this issue.
  id: totrans-split-202
  prefs: []
  type: TYPE_NORMAL
- en: 'Option 1: greedy filter'
  id: totrans-split-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the recommended approach, as you might have noticed. It is the default
    setting for the `-a` option of `pdfxmeta`, because it’s simple and it works the
    best among all the options.
  id: totrans-split-204
  prefs: []
  type: TYPE_NORMAL
- en: A greedy filter will extract any text from the *enclosed* or *surrounding* region
    of the heading, even if some parts don’t match the current filter.
  id: totrans-split-205
  prefs: []
  type: TYPE_NORMAL
- en: This is exactly our case here, since a math symbol in headings is usually surrounded
    by plain text matching the filter, but they are in a different font themselves.
  id: totrans-split-206
  prefs: []
  type: TYPE_NORMAL
- en: If you want to make a heading filter greedy, just add
  id: totrans-split-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-split-208
  prefs: []
  type: TYPE_PRE
- en: to the corresponding heading filter in the recipe file. For example, for the
    recipe above, we have
  id: totrans-split-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-split-210
  prefs: []
  type: TYPE_PRE
- en: Now the recipe should extract the math symbols in the headings automatically.
  id: totrans-split-211
  prefs: []
  type: TYPE_NORMAL
- en: In [35]
  id: totrans-split-212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-split-213
  prefs: []
  type: TYPE_PRE
- en: Out [35]
  id: totrans-split-214
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-split-215
  prefs: []
  type: TYPE_PRE
- en: Of course, it still needs some further clean up, but it should be easy using
    a decent text editor.
  id: totrans-split-216
  prefs: []
  type: TYPE_NORMAL
- en: 'Option 2: Regex'
  id: totrans-split-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Alternatively, since `font.name` takes an regular expression, we could supply
    multiple font name using the `(a|b)` syntax. For example, we could first use GNU
    or BSD `grep` to find the metadata of a math symbol:'
  id: totrans-split-218
  prefs: []
  type: TYPE_NORMAL
- en: In [36]
  id: totrans-split-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-split-220
  prefs: []
  type: TYPE_PRE
- en: Out [36]
  id: totrans-split-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-split-222
  prefs: []
  type: TYPE_PRE
- en: Now that we know the font name of `c` is `CMMIB10`, we could modify the filter
    to include it.
  id: totrans-split-223
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-split-224
  prefs: []
  type: TYPE_PRE
- en: However, since superscripts usually have different font sizes than the surrounding
    text, this approach doesn’t work here.
  id: totrans-split-225
  prefs: []
  type: TYPE_NORMAL
- en: 'Option 3: Multiple filters'
  id: totrans-split-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another option is to use multiple filters for the same heading level. Internally,
    matched text of the same level will be collapsed into one if they are in the same
    block.
  id: totrans-split-227
  prefs: []
  type: TYPE_NORMAL
- en: For the example in the previous section, it is equivalent to write
  id: totrans-split-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-split-229
  prefs: []
  type: TYPE_PRE
- en: but this allows us to specify different font sizes.
  id: totrans-split-230
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the same approach as in previous section, we could find the metadata
    of all the math symbols in the text and create separate heading filters for them,
    which gives us the following recipe:'
  id: totrans-split-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-split-232
  prefs: []
  type: TYPE_PRE
- en: This filter is able to extract all the math symbols,
  id: totrans-split-233
  prefs: []
  type: TYPE_NORMAL
- en: In [37]
  id: totrans-split-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-split-235
  prefs: []
  type: TYPE_PRE
- en: Out [37]
  id: totrans-split-236
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-split-237
  prefs: []
  type: TYPE_PRE
- en: but it is less accurate and introduces many unnecessary symbols, but they should
    be relatively easy to clean up in post processing.
  id: totrans-split-238
  prefs: []
  type: TYPE_NORMAL
- en: When in doubt, just use option 1 and make the filter greedy. Options 2 and 3
    are only the last resort.
  id: totrans-split-239
  prefs: []
  type: TYPE_NORMAL
- en: The recipe file
  id: totrans-split-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Except all the metadata generated by `pdfxmeta`, there are a few other options
    you could specify in the recipe file. Here is a list of all the valid keys for
    each heading filter.
  id: totrans-split-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-split-242
  prefs: []
  type: TYPE_PRE
- en: Again, don’t be too specific about bounding boxes, since headings generally
    have different widths. Use the `-a` option of `pdfxmeta` if you are not sure what
    attributes to pick.
  id: totrans-split-243
  prefs: []
  type: TYPE_NORMAL
- en: Command examples
  id: totrans-split-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because of the modularity of design, each program is useful on its own, despite
    being part of the pipeline. This section will provide some more examples on how
    you could use them. Feel free to come up with more.
  id: totrans-split-245
  prefs: []
  type: TYPE_NORMAL
- en: '`pdftocio`'
  id: totrans-split-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`pdftocio` should best demonstrate this point, this program can do a lot on
    its own.'
  id: totrans-split-247
  prefs: []
  type: TYPE_NORMAL
- en: 'To display existing table of contents in a PDF to `stdout`:'
  id: totrans-split-248
  prefs: []
  type: TYPE_NORMAL
- en: In [38]
  id: totrans-split-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-split-250
  prefs: []
  type: TYPE_PRE
- en: Out [38]
  id: totrans-split-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-split-252
  prefs: []
  type: TYPE_PRE
- en: 'To write existing table of contents in a PDF to a file named `toc`:'
  id: totrans-split-253
  prefs: []
  type: TYPE_NORMAL
- en: In [39]
  id: totrans-split-254
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-split-255
  prefs: []
  type: TYPE_PRE
- en: 'To write a `toc` file back to `doc.pdf`:'
  id: totrans-split-256
  prefs: []
  type: TYPE_NORMAL
- en: In [40]
  id: totrans-split-257
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-split-258
  prefs: []
  type: TYPE_PRE
- en: 'To specify the name of output PDF:'
  id: totrans-split-259
  prefs: []
  type: TYPE_NORMAL
- en: In [41]
  id: totrans-split-260
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-split-261
  prefs: []
  type: TYPE_PRE
- en: 'To copy the table of contents from `doc1.pdf` to `doc2.pdf`:'
  id: totrans-split-262
  prefs: []
  type: TYPE_NORMAL
- en: In [42]
  id: totrans-split-263
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-split-264
  prefs: []
  type: TYPE_PRE
- en: Note that the `-v` flag helps preserve the vertical positions of headings during
    the copy.
  id: totrans-split-265
  prefs: []
  type: TYPE_NORMAL
- en: 'To print the table of contents for reading:'
  id: totrans-split-266
  prefs: []
  type: TYPE_NORMAL
- en: In [43]
  id: totrans-split-267
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-split-268
  prefs: []
  type: TYPE_PRE
- en: Out [43]
  id: totrans-split-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-split-270
  prefs: []
  type: TYPE_PRE
- en: '`pdftocgen`'
  id: totrans-split-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have obtained an existing recipe `rcp.toml` for `doc.pdf`, you could
    apply it and print the outline to `stdout` by
  id: totrans-split-272
  prefs: []
  type: TYPE_NORMAL
- en: In [44]
  id: totrans-split-273
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-split-274
  prefs: []
  type: TYPE_PRE
- en: Out [44]
  id: totrans-split-275
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-split-276
  prefs: []
  type: TYPE_PRE
- en: 'To output the table of contents to a file called `toc`:'
  id: totrans-split-277
  prefs: []
  type: TYPE_NORMAL
- en: In [45]
  id: totrans-split-278
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-split-279
  prefs: []
  type: TYPE_PRE
- en: 'To import the generated table of contents to the PDF file, and output to `doc_out.pdf`:'
  id: totrans-split-280
  prefs: []
  type: TYPE_NORMAL
- en: In [46]
  id: totrans-split-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-split-282
  prefs: []
  type: TYPE_PRE
- en: 'To print the generated table of contents for reading:'
  id: totrans-split-283
  prefs: []
  type: TYPE_NORMAL
- en: In [47]
  id: totrans-split-284
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-split-285
  prefs: []
  type: TYPE_PRE
- en: Out [47]
  id: totrans-split-286
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-split-287
  prefs: []
  type: TYPE_PRE
- en: If you want to include the vertical position in a page for each heading, use
    the `-v` flag
  id: totrans-split-288
  prefs: []
  type: TYPE_NORMAL
- en: In [48]
  id: totrans-split-289
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-split-290
  prefs: []
  type: TYPE_PRE
- en: Out [48]
  id: totrans-split-291
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-split-292
  prefs: []
  type: TYPE_PRE
- en: '`pdftocio` can understand the vertical position in the output to generate table
    of contents entries that link to the exact position of the heading, instead of
    the top of the page.'
  id: totrans-split-293
  prefs: []
  type: TYPE_NORMAL
- en: In [49]
  id: totrans-split-294
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-split-295
  prefs: []
  type: TYPE_PRE
- en: Note that the default output of `pdftocio` here is `doc_out.pdf`.
  id: totrans-split-296
  prefs: []
  type: TYPE_NORMAL
- en: To search for `Anaphoric` in the entire PDF
  id: totrans-split-297
  prefs: []
  type: TYPE_NORMAL
- en: In [50]
  id: totrans-split-298
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-split-299
  prefs: []
  type: TYPE_PRE
- en: Out [50]
  id: totrans-split-300
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-split-301
  prefs: []
  type: TYPE_PRE
- en: To output the result as a heading filter with the automatic settings,
  id: totrans-split-302
  prefs: []
  type: TYPE_NORMAL
- en: In [51]
  id: totrans-split-303
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-split-304
  prefs: []
  type: TYPE_PRE
- en: Out [51]
  id: totrans-split-305
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-split-306
  prefs: []
  type: TYPE_PRE
- en: 'which can be directly write to a recipe file:'
  id: totrans-split-307
  prefs: []
  type: TYPE_NORMAL
- en: In [52]
  id: totrans-split-308
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-split-309
  prefs: []
  type: TYPE_PRE
- en: 'To case-insensitive search for `Anaphoric` in the entire PDF:'
  id: totrans-split-310
  prefs: []
  type: TYPE_NORMAL
- en: In [53]
  id: totrans-split-311
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-split-312
  prefs: []
  type: TYPE_PRE
- en: Out [53]
  id: totrans-split-313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-split-314
  prefs: []
  type: TYPE_PRE
- en: 'Use regular expression to case-insensitive search search for `Anaphoric` in
    the entire PDF:'
  id: totrans-split-315
  prefs: []
  type: TYPE_NORMAL
- en: In [54]
  id: totrans-split-316
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-split-317
  prefs: []
  type: TYPE_PRE
- en: Out [54]
  id: totrans-split-318
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-split-319
  prefs: []
  type: TYPE_PRE
- en: 'To search only on page 203:'
  id: totrans-split-320
  prefs: []
  type: TYPE_NORMAL
- en: In [55]
  id: totrans-split-321
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-split-322
  prefs: []
  type: TYPE_PRE
- en: Out [55]
  id: totrans-split-323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-split-324
  prefs: []
  type: TYPE_PRE
- en: 'To dump the entire page of 203:'
  id: totrans-split-325
  prefs: []
  type: TYPE_NORMAL
- en: In [56]
  id: totrans-split-326
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-split-327
  prefs: []
  type: TYPE_PRE
- en: Out [56]
  id: totrans-split-328
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-split-329
  prefs: []
  type: TYPE_PRE
- en: 'To dump the entire PDF document:'
  id: totrans-split-330
  prefs: []
  type: TYPE_NORMAL
- en: In [57]
  id: totrans-split-331
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-split-332
  prefs: []
  type: TYPE_PRE
- en: Out [57]
  id: totrans-split-333
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-split-334
  prefs: []
  type: TYPE_PRE
- en: Development
  id: totrans-split-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to modify the source code or contribute anything, first install
    [`poetry`](https://python-poetry.org/), which is a dependency and package manager
    for Python used by pdf.tocgen. Then run
  id: totrans-split-336
  prefs: []
  type: TYPE_NORMAL
- en: in the root directory of the repository to set up development dependencies.
  id: totrans-split-337
  prefs: []
  type: TYPE_NORMAL
- en: If you want to test the development version of pdf.tocgen, add
  id: totrans-split-338
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-split-339
  prefs: []
  type: TYPE_PRE
- en: prefix to each commands, for example
  id: totrans-split-340
  prefs: []
  type: TYPE_NORMAL
- en: In [59]
  id: totrans-split-341
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-split-342
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you could also use the
  id: totrans-split-343
  prefs: []
  type: TYPE_NORMAL
- en: 'command to open up a virtual environment and run the development version directly:'
  id: totrans-split-344
  prefs: []
  type: TYPE_NORMAL
- en: In [61]
  id: totrans-split-345
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-split-346
  prefs: []
  type: TYPE_PRE
- en: 'Before you send a patch or pull request, make sure the unit test passes by
    running:'
  id: totrans-split-347
  prefs: []
  type: TYPE_NORMAL
- en: GUI front end
  id: totrans-split-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a Emacs user, you could install Daniel Nicolai’s [toc-mode](https://github.com/dalanicolai/toc-mode)
    package as a GUI front end for pdf.tocgen, though it offers many more functionalities,
    such as extracting (printed) table of contents from a PDF file. Note that it uses
    pdf.tocgen under the hood, so you still need to install pdf.tocgen before using
    toc-mode as a front end for pdf.tocgen.
  id: totrans-split-349
  prefs: []
  type: TYPE_NORMAL
- en: License
  id: totrans-split-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pdf.tocgen itself a is free software. The source code of pdf.tocgen is licensed
    under the GNU GPLv3 license. However, the recipes in the `recipes` directory is
    separately licensed under the [CC BY-NC-SA 4.0 License](https://creativecommons.org/licenses/by-nc-sa/4.0/)
    to prevent any commercial usage, and thus not included in the distribution.
  id: totrans-split-351
  prefs: []
  type: TYPE_NORMAL
- en: pdf.tocgen is based on [PyMuPDF](https://github.com/pymupdf/PyMuPDF), licensed
    under the GNU GPLv3 license, which is again based on MuPDF, licensed under the
    GNU AGPLv3 license. A copy of the AGPLv3 license is included in the repository.
  id: totrans-split-352
  prefs: []
  type: TYPE_NORMAL
- en: If you want to make any derivatives based on this project, please follow the
    terms of the GNU GPLv3 license.
  id: totrans-split-353
  prefs: []
  type: TYPE_NORMAL
- en: </main>
  id: totrans-split-354
  prefs: []
  type: TYPE_NORMAL
