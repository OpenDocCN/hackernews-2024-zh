- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:38:59'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:38:59
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: pdf.tocgen
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pdf.tocgen
- en: 来源：[https://krasjet.com/voice/pdf.tocgen/](https://krasjet.com/voice/pdf.tocgen/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://krasjet.com/voice/pdf.tocgen/](https://krasjet.com/voice/pdf.tocgen/)
- en: <main>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main>
- en: '[PRE0]'
  id: totrans-split-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[pdf.tocgen](https://sink.krj.st/pdf.tocgen/) is a set of command-line tools
    for automatically extracting and generating the table of contents (ToC) of a PDF
    file. It uses the embedded font attributes and position of headings to deduce
    the basic outline of a PDF file.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[pdf.tocgen](https://sink.krj.st/pdf.tocgen/) 是一组命令行工具，用于自动提取和生成 PDF 文件的目录（ToC）。它利用嵌入式字体属性和标题位置来推断
    PDF 文件的基本轮廓。'
- en: An overview
  id: totrans-split-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: For example, for the PDF version of Paul Graham’s book *On Lisp*, available
    for download on [his website](http://www.paulgraham.com/onlisptext.html) but comes
    *without* a table of content, we can use the `pdfxmeta` command to build a recipe
    file,
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于保罗·格雷厄姆的书籍 *On Lisp* 的 PDF 版本，可在 [他的网站](http://www.paulgraham.com/onlisptext.html)
    下载，但缺少目录，我们可以使用 `pdfxmeta` 命令构建一个配方文件，
- en: In [1]
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [1]
- en: '[PRE1]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In [2]
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [2]
- en: '[PRE2]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In [3]
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [3]
- en: '[PRE3]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Out [3]
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [3]
- en: '[PRE4]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: saved as `recipe.toml`. Then use `pdftocgen` to automatically generate a table
    of contents for the book, extracted using the recipe.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 保存为 `recipe.toml`。然后使用 `pdftocgen` 自动为该书生成目录，使用该配方提取。
- en: In [4]
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [4]
- en: '[PRE5]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Out [4]
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [4]
- en: '[PRE6]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We could save the output to a file called `toc`,
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将输出保存到一个名为 `toc` 的文件中，
- en: In [5]
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [5]
- en: '[PRE7]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: and import it to the original PDF file using the `pdftocio` command, saving
    it as `output.pdf`.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 并将其导入到原始 PDF 文件中，使用 `pdftocio` 命令保存为 `output.pdf`。
- en: In [6]
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [6]
- en: '[PRE8]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is just an overview of the basic workflow. Please read [section 4](#a-worked-example)
    for a detailed explanation and walk-through.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是基本工作流程的概述。请阅读 [section 4](#a-worked-example) 以获取详细的解释和步骤指南。
- en: pdf.tocgen works best for PDF files produces from a  document using `pdftex`
    (and its friends `pdflatex`, `pdfxetex`, etc.), but it’s designed to work with
    any *software-generated* PDF filesThat is, you shouldn’t expect it to work with
    scanned PDFs. Some examples include `troff`/<wbr>`groff`, Adobe InDesign, Microsoft
    Word, and probably more.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: pdf.tocgen 最适合使用 `pdftex`（及其伙伴 `pdflatex`、`pdfxetex` 等）生成的 PDF 文件，但它设计用于与任何
    *软件生成* 的 PDF 文件一起工作。也就是说，不应该期望它能够处理扫描的 PDF 文件。一些示例包括 `troff`/<wbr>`groff`、Adobe
    InDesign、Microsoft Word，可能还有其他。
- en: pdf.tocgen is a free software. The source code can be found in the [sink](https://sink.krj.st/pdf.tocgen/)
    or on [GitHub](https://github.com/Krasjet/pdf.tocgen/) and is licensed under the
    GPLv3 license. You are free to tinker with the source code, but any derivatives
    *must* guarantee the [freedom](https://www.gnu.org/philosophy/free-sw.en.html)
    of users. If you want to contribute to this project, send a [patch](https://sink.krj.st)
    or open a pull request on [GitHub](https://github.com/Krasjet/pdf.tocgen/).
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: pdf.tocgen 是一款免费软件。源代码可以在 [这里](https://sink.krj.st/pdf.tocgen/) 或 [GitHub](https://github.com/Krasjet/pdf.tocgen/)
    找到，并且根据 GPLv3 许可发布。您可以自由地修改源代码，但任何衍生作品 *必须* 保证用户的 [自由](https://www.gnu.org/philosophy/free-sw.en.html)。如果您想为该项目做出贡献，请发送一个
    [patch](https://sink.krj.st) 或在 [GitHub](https://github.com/Krasjet/pdf.tocgen/)
    上打开一个拉取请求。
- en: Installation
  id: totrans-split-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: pdf.tocgen is written in Python 3. It is known to work with Python 3.7 to 3.11
    on Linux, Windows, and macOSOn BSDs, you probably need to build PyMuPDF yourself.
    Use
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: pdf.tocgen 使用 Python 3 编写。已知可以在 Linux、Windows 和 macOS 上与 Python 3.7 到 3.11 兼容。在
    BSD 上，您可能需要自行构建 PyMuPDF。使用
- en: In [7]
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [7]
- en: '[PRE9]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: to install the latest version systemwide. Alternatively, use [`pipx`](https://pipxproject.github.io/pipx/)
    or
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 安装最新版本系统范围内。或者，使用 [`pipx`](https://pipxproject.github.io/pipx/) 或
- en: In [8]
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [8]
- en: '[PRE10]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: to install it for the current user. I would recommend the latter approach to
    avoid messing up the package manager on your system.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以供当前用户安装。我建议使用后者以避免破坏您系统上的软件包管理器。
- en: 'If you are using an Arch-based Linux distro, the package is also available
    on [AUR](https://aur.archlinux.org/packages/pdf.tocgen/). It can be installed
    using any AUR helper, for example [`yay`](https://github.com/Jguer/yay):'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用基于 Arch 的 Linux 发行版，则该软件包也可在 [AUR](https://aur.archlinux.org/packages/pdf.tocgen/)
    上找到。可以使用任何 AUR 助手进行安装，例如 [`yay`](https://github.com/Jguer/yay)：
- en: In [9]
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [9]
- en: '[PRE11]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note to LaTeX users
  id: totrans-split-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LaTeX 用户请注意
- en: Before we continue, note that this tool targets *readers*, not *authors*.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，请注意这个工具的目标是 *读者*，而不是 *作者*。
- en: The intended usage is to generate a table of contents for [lecture notes](https://see.stanford.edu/materials/lsoftaee261/book-fall-07.pdf),
    [draft books](https://felleisen.org/matthias/HtDC/htdc.pdf), or possibly the papers
    on [arXiv](https://arxiv.org/) for *easier navigation*. If you are a  user, please
    *do not* use this tool to generate table of contents for your own manuscripts.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的用途是为 [讲座笔记](https://see.stanford.edu/materials/lsoftaee261/book-fall-07.pdf)、[草稿书籍](https://felleisen.org/matthias/HtDC/htdc.pdf)
    或者 [arXiv](https://arxiv.org/) 上的论文生成目录，以便*更容易导航*。如果你是用户，请*不要*使用此工具为你自己的手稿生成目录。
- en: Use the [hyperref](https://ctan.org/pkg/hyperref) package instead,
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [hyperref](https://ctan.org/pkg/hyperref) 包替代，
- en: since it understands your document better and provides more customizations.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它更好地理解你的文档并提供更多定制选项。
- en: A worked example
  id: totrans-split-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个示例
- en: The design of pdf.tocgen is influenced by the [Unix philosophy](https://en.wikipedia.org/wiki/Unix_philosophy).
    I intentionally separated pdf.tocgen to 3 separate programs. They work together,
    but each of them is useful on its own.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: pdf.tocgen 的设计受到 [Unix 哲学](https://en.wikipedia.org/wiki/Unix_philosophy) 的影响。我有意将
    pdf.tocgen 分离为 3 个独立的程序。它们可以协同工作，但每个程序单独使用时也很有用。
- en: 'They represents the 3 steps necessary to add table of contents to a PDF file:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它们代表了为 PDF 文件添加目录所需的 3 个步骤：
- en: '`pdfxmeta`: extract the metadata (font attributes, positions) of headings to
    build a recipe file.'
  id: totrans-split-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pdfxmeta`: 提取标题的元数据（字体属性、位置）以构建一个配方文件。'
- en: '`pdftocgen`: generate a table of contents from the recipe.'
  id: totrans-split-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pdftocgen`: 从配方生成目录。'
- en: '`pdftocio`: import the table of contents to the PDF document.'
  id: totrans-split-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pdftocio`: 将目录导入到 PDF 文档中。'
- en: Again, we will use Paul Graham’s book *On Lisp*, freely available on [his website](http://www.paulgraham.com/onlisptext.html)
    as a PDF but comes without a table of contents embedded, to demonstrate how these
    3 programs work together.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们将使用保罗·格雷厄姆的书 *On Lisp*，在他的网站上免费提供的 [PDF](http://www.paulgraham.com/onlisptext.html)，但未嵌入目录，来演示这
    3 个程序如何协同工作。
- en: If you want to follow along, go ahead and download the book and save it as `onlisp.pdf`.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想跟着做，请下载这本书并保存为 `onlisp.pdf`。
- en: 'Step 1: Build a recipe'
  id: totrans-split-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 1：构建一个配方
- en: '`pdftocgen` extracts the headings using the font attributes and position (bounding
    box) of text embedded in a PDF file. We need to supply it with a recipe, which
    is a [TOML](https://toml.io) file that tells `pdftocgen` what a heading, subheading,
    or subsubheading should look like.'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`pdftocgen` 使用 PDF 文件中嵌入文本的字体属性和位置（边界框）来提取标题。我们需要为其提供一个配方，即一个 [TOML](https://toml.io)
    文件，告诉 `pdftocgen` 如何识别标题、副标题或次级标题。'
- en: 'The recipe for our example, *On Lisp*, which I have already mentioned before,
    looks like this:'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例配方 *On Lisp*，我之前已经提到过，看起来像这样：
- en: '[PRE12]'
  id: totrans-split-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: A recipe is a list of filters, each of which specifies the attributes `pdftocgen`
    should look for. For example, in the recipe above, a level 1 heading, which corresponds
    to chapter titles in *On Lisp*, should
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一个配方是一个过滤器列表，每个过滤器指定 `pdftocgen` 应查找的属性。例如，在上述配方中，一级标题对应于 *On Lisp* 中的章节标题应该
- en: Have font name matching `"Times-Bold"`
  id: totrans-split-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字体名称匹配 `"Times-Bold"`
- en: Have font size `19.92530059814453`
  id: totrans-split-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字体大小为 `19.92530059814453`
- en: 'Of course, the font size don’t have to be this precise, you could set a tolerance
    level using the `font.size_tolerance` attributes:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，字体大小不必如此精确，你可以使用 `font.size_tolerance` 属性设置容差水平：
- en: '[PRE13]'
  id: totrans-split-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How do we know what attributes a heading should have? This is why we need to
    use `pdfxmeta` to extract the metadata of text in a PDF file.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何知道一个标题应该具有哪些属性？这就是为什么我们需要使用 `pdfxmeta` 提取 PDF 文件中文本的元数据。
- en: Open up the PDF file you just downloaded in your favorite PDF reader. We will
    use [zathura](https://pwmt.org/projects/zathura/) here, but use anything you are
    comfortable with.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你刚下载的 PDF 文件，在你喜欢的 PDF 阅读器中查看。我们将在这里使用 [zathura](https://pwmt.org/projects/zathura/)，但你可以使用任何你喜欢的软件。
- en: In [10]
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [10]
- en: '[PRE14]'
  id: totrans-split-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Scroll down to page 14, counting from the title page. This is where the first
    chapter’s title “The Extensible Language” is. To look at the metadata associated
    with this title, use the `pdfxmeta` command:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动到第 14 页，从封面开始计数。第一个章节标题“可扩展语言”在这里。要查看与该标题相关的元数据，请使用 `pdfxmeta` 命令：
- en: In [11]
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [11]
- en: '[PRE15]'
  id: totrans-split-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Out [11]
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [11]
- en: '[PRE16]'
  id: totrans-split-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `-p` flag tells `pdfxmeta` that it should only search on page 14. It is
    not required, but I highly recommend specifying it to make the search less ambiguous.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`-p` 标志告诉 `pdfxmeta` 它应仅在第 14 页上搜索。这不是必需的，但我强烈建议指定它以减少搜索的歧义性。'
- en: Now that we have extracted the metadata for chapter titles, we could make it
    a filter by copy-pasting it, or redirect the output, to a recipe file called `recipe.toml`.
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经提取了章节标题的元数据，我们可以通过复制粘贴它，或者将输出重定向到名为`recipe.toml`的食谱文件。
- en: In [12]
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [12]
- en: '[PRE17]'
  id: totrans-split-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Use your favorite editor to open up the recipe file and remove the indentationsIn
    Vim, you could press `<<` in normal mode to dedent a line, and add the `[[heading]]`
    header and the `level` attribute to specify the heading level.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你喜欢的编辑器打开食谱文件并删除缩进在Vim中，你可以在正常模式下按`<<`来取消行缩进，并添加`[[heading]]`头和`level`属性来指定标题级别。
- en: '[PRE18]'
  id: totrans-split-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is already a valid recipe file, but it is too specific. It is very unlikely
    that other chapter titles would match all four bounding box (`bbox`) values, which
    means they would have exactly the same position and width as this chapter’s title.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经是一个有效的食谱文件，但太具体了。其他章节标题几乎不可能与所有四个边界框（`bbox`）的值匹配，这意味着它们的位置和宽度与本章的标题完全相同。
- en: If you want to ignore an attribute, simply remove it from the filter. From my
    experience, `font.name` and `font.size` is usually enough.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要忽略一个属性，只需从过滤器中删除它。根据我的经验，通常只需要`font.name`和`font.size`。
- en: '[PRE19]'
  id: totrans-split-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you are lazy, you can also use the `--auto` or `-a` flag to format the output
    as a heading filter with the default settings. But the output will be slightly
    harder to read:'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你懒得话，也可以使用`--auto`或`-a`标志将输出格式化为带有默认设置的标题过滤器。但输出会稍微难以阅读：
- en: In [13]
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [13]
- en: '[PRE20]'
  id: totrans-split-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Out [13]
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: Out [13]
- en: '[PRE21]'
  id: totrans-split-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The argument after the `-a` flag is the heading level of the output heading
    filter, which in this case is `1`. Don’t worry about the `greedy` option right
    now, it is not necessary for this book.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`-a`标志后的参数是输出标题过滤器的标题级别，在本例中为`1`。现在不要担心`greedy`选项，对于本书来说并不必要。'
- en: 'Next, we need to extract the metadata of level 2 headings:'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要提取二级标题的元数据：
- en: In [14]
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [14]
- en: '[PRE22]'
  id: totrans-split-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Out [14]
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: Out [14]
- en: '[PRE23]'
  id: totrans-split-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note that we could use regular expressions (Python-style) as the pattern. The
    `-i` option can be used to enable case-insensitive search.
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们可以使用正则表达式（Python风格）作为模式。 `-i`选项可以用于启用大小写不敏感搜索。
- en: Use the `-a` flag to dump it to `recipe.toml`
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-a`标志将其转储到`recipe.toml`
- en: In [15]
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [15]
- en: '[PRE24]'
  id: totrans-split-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'and pick the attributes we need:'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 并选择我们需要的属性：
- en: '[PRE25]'
  id: totrans-split-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If you can’t find want you are looking for, leave out the query string to dump
    the entire page,
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到你想要的内容，可以省略查询字符串来转储整个页面，
- en: In [16]
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [16]
- en: '[PRE26]'
  id: totrans-split-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Out [16]
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: Out [16]
- en: '[PRE27]'
  id: totrans-split-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: but it is very likely that `pdftocgen` can’t generate a meaningful table of
    contents for you if you can’t find the heading using `pdfxmeta`. Sorry about that.
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 但很可能`pdftocgen`无法使用`pdfxmeta`找到标题来为您生成有意义的目录。对此感到抱歉。
- en: As a side node, sometimes you would see the `+` symbol in `font.name`, for example
    in the PDF draft of [*How to design Classes*](https://felleisen.org/matthias/HtDC/htdc.pdf)
    by Matthias Felleisen et al.In the latest version, the subset will be automatically
    stripped off, so you might not see this anymore
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，有时你会在`font.name`中看到`+`符号，例如在Matthias Felleisen等人撰写的[*如何设计类*](https://felleisen.org/matthias/HtDC/htdc.pdf)的PDF草稿中。在最新版本中，子集将自动被去除，所以你可能看不到这个符号了。
- en: In [17]
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [17]
- en: '[PRE28]'
  id: totrans-split-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Out [17]
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: Out [17]
- en: '[PRE29]'
  id: totrans-split-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `UFRVLO+` in `font.size` represent a *subset* in the complete font family
    `Palatino-Bold`. The font in different headings might be distributed into multiple
    subsets, so it is *almost always* a good idea to match against the entire family
    by removing the subset prefix:'
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.size`中的`UFRVLO+`代表`Palatino-Bold`完整字体系列的*子集*。不同标题中的字体可能分布在多个子集中，因此通过删除子集前缀来匹配整个系列几乎总是一个好主意：'
- en: '[PRE30]'
  id: totrans-split-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: You could also use the `-a` flag as before to handle this automatically.
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以像以前一样使用`-a`标志来自动处理这个问题。
- en: In [18]
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [18]
- en: '[PRE31]'
  id: totrans-split-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Out [18]
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: Out [18]
- en: '[PRE32]'
  id: totrans-split-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Also, note that `font.name` can take a regular expression:'
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意`font.name`可以接受正则表达式：
- en: '[PRE33]'
  id: totrans-split-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You might need some experiments to determine the best recipe for the PDF. You
    could find some pre-made recipes [here](https://github.com/Krasjet/pdf.tocgen/tree/master/recipes),
    but in most cases you would need to design your own recipes. You are welcome to
    contribute more recipes by sending patches or pull requests.
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要一些实验来确定PDF的最佳食谱。你可以在这里找到一些预制的食谱[here](https://github.com/Krasjet/pdf.tocgen/tree/master/recipes)，但在大多数情况下，你需要设计自己的食谱。欢迎通过发送补丁或拉取请求贡献更多的食谱。
- en: 'Step 2: Generate table of contents'
  id: totrans-split-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2步：生成目录
- en: Now that we have crafted a recipe for *On Lisp* in `recipe.toml`,
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为*On Lisp*制定了一个名为`recipe.toml`的食谱，
- en: '[PRE34]'
  id: totrans-split-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: we could use the `pdftocgen` command to generate the table of contents for our
    PDF
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`pdftocgen`命令为我们的PDF生成目录。
- en: In [19]
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-split-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Out [19]
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-split-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The output of `pdftocgen` is a dialect of CSV. The main differences are
  id: totrans-split-130
  prefs: []
  type: TYPE_NORMAL
- en: Every *4 spaces* of indent represents a new heading level so a level 3 heading
    is *8 spaces* of indent
  id: totrans-split-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The separator is a single space, not comma
  id: totrans-split-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Titles need to be quoted using double quotes.
  id: totrans-split-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This format is intentionally designed to be easily *edited* (in Vim), since
    the output of `pdftocgen` is *expected to be* inaccurate in many cases and you
    are likely to tweak the table of contents before you import it to the original
    PDF file.
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
- en: If a heading contains the actual double quote character (`"`), use two double
    quotes (`""`) to escape it,
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-split-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: but the double quotes in most PDFs are usually smart quotes (`“` and `”`), so
    escaping is rarely necessary.
  id: totrans-split-137
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t want to import the table of contents to PDF, you could instead
    use the `-H` flag to print the table of contents in a more readable format,
  id: totrans-split-138
  prefs: []
  type: TYPE_NORMAL
- en: In [20]
  id: totrans-split-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-split-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Out [20]
  id: totrans-split-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-split-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: but this format can’t be read by `pdftocio`.
  id: totrans-split-143
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, we will save the table of contents to a file called `toc`:'
  id: totrans-split-144
  prefs: []
  type: TYPE_NORMAL
- en: In [21]
  id: totrans-split-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-split-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Step 3: Import the ToC to PDF'
  id: totrans-split-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To import the generated table of contents to the original PDF file, simply redirect
    the `toc` file to `pdftocio`.
  id: totrans-split-148
  prefs: []
  type: TYPE_NORMAL
- en: In [22]
  id: totrans-split-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-split-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The output PDF document is named `onlisp_out.pdf`Use the `-o` flag if you want
    a different file name. When you open it up in zathura
  id: totrans-split-151
  prefs: []
  type: TYPE_NORMAL
- en: In [23]
  id: totrans-split-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-split-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: and press the `TAB` key, you should see the table of contents has been successfully
    imported to the PDF file.
  id: totrans-split-154
  prefs: []
  type: TYPE_NORMAL
- en: In fact, if you don’t want to edit the table of contents, the output of `pdftocgen`
    can be directly piped into `pdftocio`
  id: totrans-split-155
  prefs: []
  type: TYPE_NORMAL
- en: In [24]
  id: totrans-split-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-split-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: I call this program `pdftocio` because it can also be used to *output* the existing
    table of contents of a PDF document if you don’t supply any external input
  id: totrans-split-158
  prefs: []
  type: TYPE_NORMAL
- en: In [25]
  id: totrans-split-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-split-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Out [25]
  id: totrans-split-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-split-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: or with the `-H` flag to display it in a more readable format.
  id: totrans-split-163
  prefs: []
  type: TYPE_NORMAL
- en: In [26]
  id: totrans-split-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-split-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Out [26]
  id: totrans-split-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-split-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: A summary
  id: totrans-split-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although the example above gets quite long, the essential steps are very simple.
  id: totrans-split-169
  prefs: []
  type: TYPE_NORMAL
- en: First, search for metadata of headings using `pdfxmeta`
  id: totrans-split-170
  prefs: []
  type: TYPE_NORMAL
- en: In [27]
  id: totrans-split-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-split-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Edit the `recipe.toml` file to pick out the attributes you need, or leave it
    at default if you don’t need any customizations:'
  id: totrans-split-173
  prefs: []
  type: TYPE_NORMAL
- en: In [28]
  id: totrans-split-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-split-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Then use the recipe to generate a table of contents and import it to the PDF
    file
  id: totrans-split-176
  prefs: []
  type: TYPE_NORMAL
- en: In [29]
  id: totrans-split-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-split-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Or if you want to edit the table of contents before importing it,
  id: totrans-split-179
  prefs: []
  type: TYPE_NORMAL
- en: In [30]
  id: totrans-split-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-split-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Each of the three programs has some extra functionalities. Use the `-h` option
    to see all the options you could pass in.
  id: totrans-split-182
  prefs: []
  type: TYPE_NORMAL
- en: 'One more example: Mathematics'
  id: totrans-split-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pdf.tocgen’s recipe format provides some convenient options for handling math
    symbols in headings. They are especially useful for handling lecture notes, textbook,
    or papers in mathematics.
  id: totrans-split-184
  prefs: []
  type: TYPE_NORMAL
- en: Let us look at another example, the [lecture notes](https://see.stanford.edu/materials/lsoftaee261/book-fall-07.pdf)
    for EE261 in Stanford, written by Prof. Brad Osgood. This document also doesn’t
    come with a table of contents, and the headings contains many math symbols such
    as , , , etc.
  id: totrans-split-185
  prefs: []
  type: TYPE_NORMAL
- en: 'These math symbols do not have the same font as the surrounding text, which
    can be a problem if we specify the headings using `font.name`:'
  id: totrans-split-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数学符号与周围文本的字体不同，如果我们使用`font.name`指定标题，则可能会出现问题：
- en: '[PRE52]'
  id: totrans-split-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The recipe above is generated using
  id: totrans-split-188
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配方是使用生成的
- en: In [31]
  id: totrans-split-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [31]
- en: '[PRE53]'
  id: totrans-split-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In [32]
  id: totrans-split-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [32]
- en: '[PRE54]'
  id: totrans-split-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: In [33]
  id: totrans-split-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [33]
- en: '[PRE55]'
  id: totrans-split-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: with comments cleaned up.
  id: totrans-split-195
  prefs: []
  type: TYPE_NORMAL
  zh: 并清理掉注释。
- en: If we pass the recipe file `pdftocgen`, you would notice that some of the math
    symbols are missing from the title.
  id: totrans-split-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们传递配方文件给`pdftocgen`，您会注意到标题中缺少一些数学符号。
- en: In [34]
  id: totrans-split-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [34]
- en: '[PRE56]'
  id: totrans-split-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Out [34]
  id: totrans-split-199
  prefs: []
  type: TYPE_NORMAL
  zh: 出 [34]
- en: '[PRE57]'
  id: totrans-split-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Pay attention to the title of section 1.5, 1.12, and 1.17. Comparing it with
    page 3 of the PDF, you should notice that the math symbols are missing from the
    headings.
  id: totrans-split-201
  prefs: []
  type: TYPE_NORMAL
  zh: 注意第1.5、1.12和1.17节的标题。将其与PDF第3页进行比较，您应该注意到标题中缺少数学符号。
- en: There are several options to deal with this issue.
  id: totrans-split-202
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种解决此问题的方法。
- en: 'Option 1: greedy filter'
  id: totrans-split-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项1：贪婪过滤器
- en: This is the recommended approach, as you might have noticed. It is the default
    setting for the `-a` option of `pdfxmeta`, because it’s simple and it works the
    best among all the options.
  id: totrans-split-204
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经注意到的，这是推荐的方法。它是`pdfxmeta`的`-a`选项的默认设置，因为它简单且在所有选项中效果最好。
- en: A greedy filter will extract any text from the *enclosed* or *surrounding* region
    of the heading, even if some parts don’t match the current filter.
  id: totrans-split-205
  prefs: []
  type: TYPE_NORMAL
  zh: 贪婪过滤器将提取标题的*封闭*或*周围*区域的任何文本，即使某些部分与当前过滤器不匹配也可以。
- en: This is exactly our case here, since a math symbol in headings is usually surrounded
    by plain text matching the filter, but they are in a different font themselves.
  id: totrans-split-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这恰好是我们当前的情况，因为标题中的数学符号通常由匹配过滤器的普通文本包围，但它们本身采用不同的字体。
- en: If you want to make a heading filter greedy, just add
  id: totrans-split-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使一个标题过滤器贪婪，只需添加
- en: '[PRE58]'
  id: totrans-split-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: to the corresponding heading filter in the recipe file. For example, for the
    recipe above, we have
  id: totrans-split-209
  prefs: []
  type: TYPE_NORMAL
  zh: 到配方文件中相应的标题过滤器。例如，对于上面的配方，我们有
- en: '[PRE59]'
  id: totrans-split-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Now the recipe should extract the math symbols in the headings automatically.
  id: totrans-split-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在配方应该能够自动提取标题中的数学符号。
- en: In [35]
  id: totrans-split-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [35]
- en: '[PRE60]'
  id: totrans-split-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Out [35]
  id: totrans-split-214
  prefs: []
  type: TYPE_NORMAL
  zh: 出 [35]
- en: '[PRE61]'
  id: totrans-split-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Of course, it still needs some further clean up, but it should be easy using
    a decent text editor.
  id: totrans-split-216
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，它仍然需要进一步清理，但使用一个体面的文本编辑器应该很容易。
- en: 'Option 2: Regex'
  id: totrans-split-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项2：正则表达式
- en: 'Alternatively, since `font.name` takes an regular expression, we could supply
    multiple font name using the `(a|b)` syntax. For example, we could first use GNU
    or BSD `grep` to find the metadata of a math symbol:'
  id: totrans-split-218
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，由于`font.name`接受正则表达式，我们可以使用`(a|b)`语法提供多个字体名称。例如，我们可以先使用GNU或BSD的`grep`来查找数学符号的元数据：
- en: In [36]
  id: totrans-split-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [36]
- en: '[PRE62]'
  id: totrans-split-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Out [36]
  id: totrans-split-221
  prefs: []
  type: TYPE_NORMAL
  zh: 出 [36]
- en: '[PRE63]'
  id: totrans-split-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Now that we know the font name of `c` is `CMMIB10`, we could modify the filter
    to include it.
  id: totrans-split-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道`c`的字体名称是`CMMIB10`，我们可以修改过滤器以包含它。
- en: '[PRE64]'
  id: totrans-split-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: However, since superscripts usually have different font sizes than the surrounding
    text, this approach doesn’t work here.
  id: totrans-split-225
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于上标通常具有与周围文本不同的字体大小，这种方法在这里不适用。
- en: 'Option 3: Multiple filters'
  id: totrans-split-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项3：多个过滤器
- en: Another option is to use multiple filters for the same heading level. Internally,
    matched text of the same level will be collapsed into one if they are in the same
    block.
  id: totrans-split-227
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是为同一级别的标题使用多个过滤器。在内部，如果它们在同一块中，则相同级别的匹配文本将合并成一个。
- en: For the example in the previous section, it is equivalent to write
  id: totrans-split-228
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前一节的示例，写法等同于
- en: '[PRE65]'
  id: totrans-split-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: but this allows us to specify different font sizes.
  id: totrans-split-230
  prefs: []
  type: TYPE_NORMAL
  zh: 但这使我们能够指定不同的字体大小。
- en: 'Using the same approach as in previous section, we could find the metadata
    of all the math symbols in the text and create separate heading filters for them,
    which gives us the following recipe:'
  id: totrans-split-231
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与前一节相同的方法，我们可以找到文本中所有数学符号的元数据，并为它们创建单独的标题过滤器，从而得到以下配方：
- en: '[PRE66]'
  id: totrans-split-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: This filter is able to extract all the math symbols,
  id: totrans-split-233
  prefs: []
  type: TYPE_NORMAL
  zh: 此过滤器能够提取所有数学符号，
- en: In [37]
  id: totrans-split-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [37]
- en: '[PRE67]'
  id: totrans-split-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Out [37]
  id: totrans-split-236
  prefs: []
  type: TYPE_NORMAL
  zh: 出 [37]
- en: '[PRE68]'
  id: totrans-split-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: but it is less accurate and introduces many unnecessary symbols, but they should
    be relatively easy to clean up in post processing.
  id: totrans-split-238
  prefs: []
  type: TYPE_NORMAL
  zh: 但这种方法不够精确，引入了许多不必要的符号，但在后处理中应该相对容易清理。
- en: When in doubt, just use option 1 and make the filter greedy. Options 2 and 3
    are only the last resort.
  id: totrans-split-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有疑问，只需使用选项1并使过滤器贪婪。选项2和选项3只是最后的手段。
- en: The recipe file
  id: totrans-split-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配方文件
- en: Except all the metadata generated by `pdfxmeta`, there are a few other options
    you could specify in the recipe file. Here is a list of all the valid keys for
    each heading filter.
  id: totrans-split-241
  prefs: []
  type: TYPE_NORMAL
  zh: 除了由`pdfxmeta`生成的所有元数据之外，在配方文件中还有几个其他选项可以指定。以下是每个标题过滤器的所有有效键的列表。
- en: '[PRE69]'
  id: totrans-split-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Again, don’t be too specific about bounding boxes, since headings generally
    have different widths. Use the `-a` option of `pdfxmeta` if you are not sure what
    attributes to pick.
  id: totrans-split-243
  prefs: []
  type: TYPE_NORMAL
- en: Command examples
  id: totrans-split-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because of the modularity of design, each program is useful on its own, despite
    being part of the pipeline. This section will provide some more examples on how
    you could use them. Feel free to come up with more.
  id: totrans-split-245
  prefs: []
  type: TYPE_NORMAL
- en: '`pdftocio`'
  id: totrans-split-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`pdftocio` should best demonstrate this point, this program can do a lot on
    its own.'
  id: totrans-split-247
  prefs: []
  type: TYPE_NORMAL
- en: 'To display existing table of contents in a PDF to `stdout`:'
  id: totrans-split-248
  prefs: []
  type: TYPE_NORMAL
- en: In [38]
  id: totrans-split-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-split-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Out [38]
  id: totrans-split-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-split-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'To write existing table of contents in a PDF to a file named `toc`:'
  id: totrans-split-253
  prefs: []
  type: TYPE_NORMAL
- en: In [39]
  id: totrans-split-254
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-split-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'To write a `toc` file back to `doc.pdf`:'
  id: totrans-split-256
  prefs: []
  type: TYPE_NORMAL
- en: In [40]
  id: totrans-split-257
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-split-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'To specify the name of output PDF:'
  id: totrans-split-259
  prefs: []
  type: TYPE_NORMAL
- en: In [41]
  id: totrans-split-260
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-split-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'To copy the table of contents from `doc1.pdf` to `doc2.pdf`:'
  id: totrans-split-262
  prefs: []
  type: TYPE_NORMAL
- en: In [42]
  id: totrans-split-263
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-split-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Note that the `-v` flag helps preserve the vertical positions of headings during
    the copy.
  id: totrans-split-265
  prefs: []
  type: TYPE_NORMAL
- en: 'To print the table of contents for reading:'
  id: totrans-split-266
  prefs: []
  type: TYPE_NORMAL
- en: In [43]
  id: totrans-split-267
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-split-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Out [43]
  id: totrans-split-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-split-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '`pdftocgen`'
  id: totrans-split-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have obtained an existing recipe `rcp.toml` for `doc.pdf`, you could
    apply it and print the outline to `stdout` by
  id: totrans-split-272
  prefs: []
  type: TYPE_NORMAL
- en: In [44]
  id: totrans-split-273
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-split-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Out [44]
  id: totrans-split-275
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-split-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'To output the table of contents to a file called `toc`:'
  id: totrans-split-277
  prefs: []
  type: TYPE_NORMAL
- en: In [45]
  id: totrans-split-278
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-split-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'To import the generated table of contents to the PDF file, and output to `doc_out.pdf`:'
  id: totrans-split-280
  prefs: []
  type: TYPE_NORMAL
- en: In [46]
  id: totrans-split-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-split-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'To print the generated table of contents for reading:'
  id: totrans-split-283
  prefs: []
  type: TYPE_NORMAL
- en: In [47]
  id: totrans-split-284
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-split-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Out [47]
  id: totrans-split-286
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-split-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: If you want to include the vertical position in a page for each heading, use
    the `-v` flag
  id: totrans-split-288
  prefs: []
  type: TYPE_NORMAL
- en: In [48]
  id: totrans-split-289
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-split-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Out [48]
  id: totrans-split-291
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-split-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '`pdftocio` can understand the vertical position in the output to generate table
    of contents entries that link to the exact position of the heading, instead of
    the top of the page.'
  id: totrans-split-293
  prefs: []
  type: TYPE_NORMAL
- en: In [49]
  id: totrans-split-294
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-split-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Note that the default output of `pdftocio` here is `doc_out.pdf`.
  id: totrans-split-296
  prefs: []
  type: TYPE_NORMAL
- en: To search for `Anaphoric` in the entire PDF
  id: totrans-split-297
  prefs: []
  type: TYPE_NORMAL
- en: In [50]
  id: totrans-split-298
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-split-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Out [50]
  id: totrans-split-300
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-split-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: To output the result as a heading filter with the automatic settings,
  id: totrans-split-302
  prefs: []
  type: TYPE_NORMAL
- en: In [51]
  id: totrans-split-303
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-split-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Out [51]
  id: totrans-split-305
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-split-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'which can be directly write to a recipe file:'
  id: totrans-split-307
  prefs: []
  type: TYPE_NORMAL
- en: In [52]
  id: totrans-split-308
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-split-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'To case-insensitive search for `Anaphoric` in the entire PDF:'
  id: totrans-split-310
  prefs: []
  type: TYPE_NORMAL
- en: In [53]
  id: totrans-split-311
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-split-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Out [53]
  id: totrans-split-313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-split-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Use regular expression to case-insensitive search search for `Anaphoric` in
    the entire PDF:'
  id: totrans-split-315
  prefs: []
  type: TYPE_NORMAL
- en: In [54]
  id: totrans-split-316
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-split-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Out [54]
  id: totrans-split-318
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-split-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'To search only on page 203:'
  id: totrans-split-320
  prefs: []
  type: TYPE_NORMAL
- en: In [55]
  id: totrans-split-321
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-split-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Out [55]
  id: totrans-split-323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-split-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'To dump the entire page of 203:'
  id: totrans-split-325
  prefs: []
  type: TYPE_NORMAL
- en: In [56]
  id: totrans-split-326
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-split-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Out [56]
  id: totrans-split-328
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-split-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'To dump the entire PDF document:'
  id: totrans-split-330
  prefs: []
  type: TYPE_NORMAL
- en: In [57]
  id: totrans-split-331
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-split-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Out [57]
  id: totrans-split-333
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-split-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Development
  id: totrans-split-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to modify the source code or contribute anything, first install
    [`poetry`](https://python-poetry.org/), which is a dependency and package manager
    for Python used by pdf.tocgen. Then run
  id: totrans-split-336
  prefs: []
  type: TYPE_NORMAL
- en: in the root directory of the repository to set up development dependencies.
  id: totrans-split-337
  prefs: []
  type: TYPE_NORMAL
- en: If you want to test the development version of pdf.tocgen, add
  id: totrans-split-338
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-split-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: prefix to each commands, for example
  id: totrans-split-340
  prefs: []
  type: TYPE_NORMAL
- en: In [59]
  id: totrans-split-341
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-split-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Alternatively, you could also use the
  id: totrans-split-343
  prefs: []
  type: TYPE_NORMAL
- en: 'command to open up a virtual environment and run the development version directly:'
  id: totrans-split-344
  prefs: []
  type: TYPE_NORMAL
- en: In [61]
  id: totrans-split-345
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-split-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Before you send a patch or pull request, make sure the unit test passes by
    running:'
  id: totrans-split-347
  prefs: []
  type: TYPE_NORMAL
- en: GUI front end
  id: totrans-split-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a Emacs user, you could install Daniel Nicolai’s [toc-mode](https://github.com/dalanicolai/toc-mode)
    package as a GUI front end for pdf.tocgen, though it offers many more functionalities,
    such as extracting (printed) table of contents from a PDF file. Note that it uses
    pdf.tocgen under the hood, so you still need to install pdf.tocgen before using
    toc-mode as a front end for pdf.tocgen.
  id: totrans-split-349
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Emacs，可以安装Daniel Nicolai的[toc-mode](https://github.com/dalanicolai/toc-mode)包作为pdf.tocgen的GUI前端。toc-mode还提供许多其他功能，如从PDF文件中提取（打印的）目录。请注意，它在内部使用pdf.tocgen，因此在使用toc-mode作为pdf.tocgen的前端之前，仍然需要安装pdf.tocgen。
- en: License
  id: totrans-split-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 许可证
- en: pdf.tocgen itself a is free software. The source code of pdf.tocgen is licensed
    under the GNU GPLv3 license. However, the recipes in the `recipes` directory is
    separately licensed under the [CC BY-NC-SA 4.0 License](https://creativecommons.org/licenses/by-nc-sa/4.0/)
    to prevent any commercial usage, and thus not included in the distribution.
  id: totrans-split-351
  prefs: []
  type: TYPE_NORMAL
  zh: pdf.tocgen本身是自由软件。pdf.tocgen的源代码根据GNU GPLv3许可证授权。然而，`recipes`目录中的配方单独授权为[CC
    BY-NC-SA 4.0许可证](https://creativecommons.org/licenses/by-nc-sa/4.0/)，以防止任何商业用途，因此未包含在分发中。
- en: pdf.tocgen is based on [PyMuPDF](https://github.com/pymupdf/PyMuPDF), licensed
    under the GNU GPLv3 license, which is again based on MuPDF, licensed under the
    GNU AGPLv3 license. A copy of the AGPLv3 license is included in the repository.
  id: totrans-split-352
  prefs: []
  type: TYPE_NORMAL
  zh: pdf.tocgen基于[PyMuPDF](https://github.com/pymupdf/PyMuPDF)开发，其许可证为GNU GPLv3，而PyMuPDF又基于MuPDF开发，MuPDF的许可证为GNU
    AGPLv3。AGPLv3许可证的副本已包含在代码库中。
- en: If you want to make any derivatives based on this project, please follow the
    terms of the GNU GPLv3 license.
  id: totrans-split-353
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想基于此项目制作任何衍生作品，请遵循GNU GPLv3许可证的条款。
- en: </main>
  id: totrans-split-354
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
