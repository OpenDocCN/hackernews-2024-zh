- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 13:06:26'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 13:06:26
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Kubernetes is not the point — Betty Junod
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 不是关键点 — Betty Junod
- en: 来源：[https://www.bettyjunod.com/blog/kubernetes-is-not-the-point](https://www.bettyjunod.com/blog/kubernetes-is-not-the-point)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.bettyjunod.com/blog/kubernetes-is-not-the-point](https://www.bettyjunod.com/blog/kubernetes-is-not-the-point)
- en: Today, we have thousands of individual technologies with loads of options within
    each category and I can’t help but wonder if we may have lost sight of what the
    point of all this was. We are all still in search of that platform experience.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们拥有数千种不同的技术选项，每个类别内部都有大量选择，我不禁思考我们是否可能已经迷失了所有这一切的意义。我们仍在寻找那种平台体验。
- en: Completely bespoke and completely complex
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完全定制且极度复杂
- en: So where did we go wrong? Or did we? We got so excited about what a couple of
    new components unlocked that it inspired us to chase every single component in
    the stack. The great innovation that the CNCF brought on was that so much of the
    experimentation and innovation was out in the open. You would see tipping points
    in areas like storage, networking, or security that would drive vendors to create
    a host of new projects and then standards would emerge to agree upon the interfaces.
    The many SIGs and project maturity stages helped to provide a structure for big
    changes and setting expectations for end users.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们到底错在哪里了？还是说我们错了？我们对一些新组件解锁的兴奋让我们追逐每一个堆栈中的组件。CNCF 带来的伟大创新在于，如此多的实验和创新是公开的。你会看到存储、网络或安全等领域的转折点，这些转折点推动了供应商创建大量新项目，然后出现了标准以达成接口协议。众多
    SIG 和项目成熟阶段帮助为重大变革提供了结构，并为最终用户设定了期望。
- en: Even with that the rate of new projects introduced and the sometimes seemingly
    VHS vs. BETA type debates between technology approaches made it difficult for
    end users to decide which technology to choose and bet their enterprise architecture
    on. In addition to weighing an ever growing and evolving list of technology choices,
    the pressure to be truly “engineering-led” or  “innovative” led many an IT organization
    to piece together their own platform from the open source puzzle pieces, support
    it themselves, and engage publicly with the upstream. This alone requires an engineering
    culture that many companies were prepared for.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 即使如此，新项目的推出速度和技术方法之间似乎出现的 VHS vs. BETA 类型的辩论，使最终用户难以决定选择哪种技术，并在企业架构上进行押注。除了权衡日益增长和发展的技术选择清单外，要真正“以工程为导向”或“创新”也给许多
    IT 组织带来了压力，他们需要从开源拼图中组合自己的平台，并自行支持它，并公开与上游互动。这本身就需要一种工程文化，而许多公司并未做好准备。
- en: While interesting from a technology point of view, this led to a complexity
    that often bogged teams down with lifecycle and integration management and maintenance
    of the system more than supporting getting apps built and deployed to production.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管从技术角度看很有趣，但这导致了一种复杂性，通常使团队因生命周期和集成管理以及系统维护而疲于应对，而不是支持应用程序的构建和部署到生产环境。
- en: Our excitement into the ingredients led us to over shop for the latest and greatest
    without planning ahead for the final meal. Too many end user RFPs were seen with
    project names or technology buzzwords sprinkled in without a mention of new or
    different capabilities to be delivered that will improve business initiatives
    and application outcomes.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对这些组件的兴奋使我们在未来的用餐计划中未能提前规划。太多的最终用户 RFP 中充斥着项目名称或技术流行语，而没有提到将提供的新或不同能力，以改进业务计划和应用程序结果。
- en: '***The question is really, does anyone remember what they were building and
    who they were building for? How differentiated is your platform heavy lifting?***'
  id: totrans-split-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***真正的问题是，有人还记得他们在建设什么，为谁在建设吗？你的平台承载能力有多大区别？***'
- en: Coming full circle to the return of PaaS
  id: totrans-split-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回到 PaaS 的回归全景
- en: Don’t call it a comeback and especially don’t call it a PaaS but the idea is
    back and today it goes by Internal Developer Platform or Platform Engineering
    now. Regardless of the name, the spirit remains that the idea we had with PaaS
    was right. We still want that experience.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 不要称其为回归，尤其不要称其为 PaaS，但这个想法回来了，今天称为内部开发者平台或平台工程。无论名称如何，其精神仍然是，我们当初提出的 PaaS 想法是正确的。我们仍然希望那种体验。
