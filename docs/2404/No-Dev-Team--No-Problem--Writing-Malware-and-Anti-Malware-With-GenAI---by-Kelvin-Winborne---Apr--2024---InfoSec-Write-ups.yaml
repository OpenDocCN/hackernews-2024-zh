- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:39:47'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 'No Dev Team? No Problem: Writing Malware and Anti-Malware With GenAI | by Kelvin
    Winborne | Apr, 2024 | InfoSec Write-ups'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://infosecwriteups.com/no-dev-team-no-problem-writing-malware-and-anti-malware-with-genai-cbce13160e13?gi=1ae1a8ad0126](https://infosecwriteups.com/no-dev-team-no-problem-writing-malware-and-anti-malware-with-genai-cbce13160e13?gi=1ae1a8ad0126)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'No Dev Team? No Problem: Writing Malware and Anti-Malware With GenAI'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Human-free security software development for both sides of the fence.
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Source: Image generated by Microsoft Copilot.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Depending on what you read, from where, and from whom, software engineering
    jobs are in jeopardy, have nothing to worry about, or can even be *enhanced* by
    generative AI.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: There are even companies claiming that their AI solution can behave like a [fully
    autonomous software engineer](https://www.cognition-labs.com/introducing-devin).
    Alternatively, there are those who counter claim that [it isn’t true](https://www.youtube.com/watch?v=tNmgmwEtoWE).
    (I’m paraphrasing)
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I just want an easier time developing programs, so I’m willing to
    at least give “normal” generative AI or LLMs a shot. For this blog, I wanted to
    see how well these things can write scripts for a novice and without direct modification
    by the user. I also tried to avoid reading too deeply into the lines of code and
    making any direct suggestions to improve any AI-generated script.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: I first got the idea to try to get AI to develop a basic anti-malware script,
    but the thought of testing it against real world malware wasn’t leaving me feeling
    particularly warm and fuzzy. So then I thought, what better way to be able to
    “trust” malware than if I made it myself?
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: The only problem is that I’m not a malware or exploit developer, though I’ve
    studied it briefly in the past. For some background on my programming ability,
    I can read, write, and edit basic scripts in Python, Rust, and Go. I’m far from
    a seasoned developer. So my natural thought process was, “If I’m using AI to write
    my anti-malware script, then why not the malware itself?”
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: Then as I started building my test VM, I realized I would need help with a general,
    not necessarily security-focused, script to help set up my testing environment.
    Why not have AI make me a third?
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: So ironically, the first program I wanted to get AI to write for me, the anti-malware,
    would have to be created last.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: Goals & Setup
  id: totrans-split-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'My goal was to create several types of fully functional scripts entirely with
    generative AI or large language model solutions. I was aiming for three types:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: General IT automation script — To save time doing a mundane task.
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malware — I chose ransomware because its effects are the most dramatic and noticeable.
    It’s very easy to see if it’s successful or if it failed.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anti-malware — It’s more specifically anti-ransomware, and it has to be behavior-based
    detection. I didn’t want to build a script that was only useful to detect and
    mitigate the specific ransomware executable I created for this blog. Signature-based
    detection is only useful for a particular file. The second a single byte changes,
    the file will have a new hash.
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I specifically wanted to build these scripts without directly and manually modifying
    a *single line of code*. All I wanted to do was copy and paste the code into empty
    *.py files and let them execute.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: Each script used in this writeup was created using one of my Azure OpenAI web
    applications. All scripts were tested on one of my Debian 12 VMs on my personal
    machine. All videos were created using [OBS Studio](https://obsproject.com/),
    which were then cropped using [Adobe Express](https://www.adobe.com/express/feature/video/crop/mp4),
    and then converted to gifs using [CloudConvert](https://cloudconvert.com/) or
    [EZgif](https://ezgif.com/).
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: 'I created three scripts:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: '**cpauto.py** — the general IT automation script'
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rudi_ransom.py** — the ransomware script'
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rrw.py** — the anti-ransomware script'
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now to get to work.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: cpauto.py
  id: totrans-split-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: (copy paste automation)
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: 'First, I created a single junk file to actually encrypt. I originally made
    10 files that I was manually copy pasting, and in the middle of that, I got the
    idea to start automating this. The initial attempt:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: Yes, my primary Debian VM user is named “asdf” because I’m lazy.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon getting errors:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon getting more “this file already exists” errors, I typed another prompt:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Since it was now trying to put the files in a separate directory, which I didn’t
    want, I issued another prompt, but in the completion:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: Got that removed then it was time. Just because I was tired of the back and
    forth, I modified the filename in the `source_file = “/home/asdf/Documents/looks_important_10.txt”`
    line and modified it to be `source_file = “/home/asdf/Documents/looks_important_1.txt”`.
    I deleted one character, technically violating my own rule, because of impatience.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Onto testing! I start with the single file named “looks_important_1.txt,” then
    run my script:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: Boom!
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: It worked like a charm.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: 'The full script:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
- en: 'So there you have it. I now have a drive full of data ready for encryption:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, this is what the data should look like:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: 100% junk.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: So now I have roughly 19GBs of junk data to encrypt, it’s time to get to the
    encryption.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: '**AI vs Human**: 99% AI-generated'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: '**Works as Intended**: Yes'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: rudi_ransom.py
  id: totrans-split-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: (rudimentary ransomware)
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: I won’t lie. This was scary. I made this while I was making lunch.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: I managed to get the initial iteration of this script fully functional and successfully
    tested its capability of encryption within 30 minutes. It only took several prompts.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: For (hopefully) obvious reasons, I won’t provide the specific prompts I used
    to produce this ransomware script nor will I provide the full code. I am, however,
    willing to show a couple of snippets.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: 'I start the attack from the `/` directory:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
- en: 'I append the .locked extension to the encrypted files:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
- en: 'My “ransom note” is created in multiple directories:'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
- en: Also, technically, it’s not ransomware, simply because I didn’t bother to have
    the decryption key stored or recorded anywhere upon execution, making the data
    unrecoverable. This means this “ransomware” is functionally a data wiper. For
    my testing purposes, I just needed a script that was capable of *encryption only*.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: 'To to show that the test encryption script works:'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Within several minutes after encryption was completed, it broke my VM’s desktop
    environment when it attempted an idle screen timeout lock:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: 'So I follow those instructions:'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: Looks like I lost access to my GUI desktop environment!
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: 'So after I list my `/home/asdf/Documents/` directory and `cat` one of my .locked
    files:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: Now I have to figure out a way to stop this. I revert to a snapshot and keep
    testing.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: '**AI vs Human**: 100% AI-generated'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: '**Works as Intended**: Yes (!!!)'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: rrw.py
  id: totrans-split-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: (rudimentary ransomware wrecker)
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: This was honestly the hardest script to get working adequately, which compounds
    upon the scariness of this entire exercise. Again, while I opted for a behavior-based
    detection anti-ransomware script, I didn’t want it to be too granular so it could
    only detect the `rudi_ransom.py` script, but anything that exhibits similar behavior.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
- en: 'I’m just embarrassed at my earliest attempts. In the interest of saving time,
    I’ll start by showing version 4.0 of my latter script:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: 'As with any initial execution of a script written by any generative AI tool,
    I get some errors. So I try to have it address those errors:'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
- en: 'I think it’s ready, so I then execute the ransomware/wiper script again, this
    time while running a system monitor. I’m partial to `bpytop` when I’m running
    Linux. However:'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: Business as usual….
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
- en: Back to the drawing board…
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
- en: 'While my ransomware is running, I take note of the CPU usage:'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: 'So:'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s test the recent changes, and….:'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
- en: Maybe my AI app also gave my ransomware defense evasion?
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
- en: 'I try to get my app to address the problem:'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
- en: This sounds like quitter talk…
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
- en: Always ask nicely. When the AI overlords take over…
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
- en: 'So I test the new script again, and…:'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
- en: asdfasfsdafsdafsadfsdaf
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
- en: Maybe I made my ransomware too well?
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
- en: 'I scrap the last chat, and start a brand new one with a slightly modified initial
    prompt:'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon execution of `rudi_ransom.py`, something interesting happened:'
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, so this is the first time there was any indication that my `rrw.py` script
    was doing something. Back to my AP app:'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
- en: 'I try the new version:'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Welp, at least I know my ransomware works great… (Note: This gif works in mobile
    and desktop browsers. It may not be visible in the mobile Medium app.)'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
- en: It’s fine! I’m fine!
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, time to switch it up again. Instead of anti-malware, let me create something
    more akin to restrictive application whitelisting:'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
- en: 'So when I test it… :'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Progress! (Note: This gif works in mobile and desktop browsers. It may not
    be visible in the mobile Medium app.)'
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
- en: The only problem is that this kills multiple benign processes. Numerous attempts
    to get it to only kill processes that start with the argument of `python3` failed.
    I eventually got to v41 of `rrw.py`, and the only iteration that was able to dynamically
    stop the ransomware script was so restrictive it stopped multiple unrelated scripts
    that were part of the intended functioning of the Linux system. I basically had
    to create a denial-of-service condition on my own system to prevent… *a denial-of-service
    condition* on my system by the ransomware.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
- en: 'KW: After some talk with a colleague/mentor I revisit the “anti-malware” angle,
    and he gave me some tips for detection opportunities.'
  id: totrans-split-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'I’m really glad I had that short talk, because he gave me the idea to not only
    use dynamic analysis (behavioral) but also static analysis. So I take this and
    issue a new prompt:'
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
- en: 'In follow up prompts, I make sure to include language to avoid some errors
    I noticed:'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
- en: 'So I go to test **VERSION 42** of rrw.py, and…:'
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
- en: 'Huzzah! (Note: This gif works in mobile and desktop browsers. It may not be
    visible in the mobile Medium app.)'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
- en: It successfully performed static analysis on the strings contained within the
    file and deleted it based on the content within it. But even still, it also highlighted
    the potential danger of this script, since it accidentally deleted an earlier
    version of `rrw.py` that was sitting in the `/home/asdf/Downloads` directory.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
- en: While the newest iteration of `rrw.py` was already running, I created a new
    version of `rudi_ransom.py` in that same directory and it was able to avoid deletion,
    meaning `rrw.py` only scanned that directory *once* upon initial execution and
    not continuously, as it was intended, on some sort of loop. This can easily be
    adjusted to simply run at regular intervals, such as every 5 milliseconds, as
    long as the script is running.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how it performs dynamically:'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
- en: '…. (Note: This gif works in mobile and desktop browsers. It may not be visible
    in the mobile Medium app.)'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
- en: It still lets `rudi_ransom.py` encrypt without issue. I think it’s time to…
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the script for anyone to rip apart:'
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-106
  prefs: []
  type: TYPE_PRE
- en: It definitely needs refinement.
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
- en: '**AI vs Human**: 100% AI-generated'
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
- en: '**Works as Intended**: RAGE'
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-split-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Again, please remember that I approached this as someone who is a complete novice
    and wouldn’t know what lines required editing. I purposefully didn’t look too
    closely at the code. I wanted this to be an exercise in seeing how easily someone
    could get generative AI and LLMs to write completely functional code using only
    output from error messages and the behavior of the system.
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
- en: As it turns out, generative AI can totally be used to write basic scripts, as
    long as you give them clear requirements. So that’s good. However, in my experience,
    the average chatbot will take quite a lot of back and forth prompting to fix errors
    and hallucinations. So that’s bad.
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
- en: I was giving friends and colleagues play-by-plays as I was testing various iterations
    of the scripts while writing this blog, and the consensus opinion was that what
    I was able to accomplish with a whim was terrifying.
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
- en: I’m not going to lie, I tend to agree. It’s scary that was I was able create
    the ransomware/data wiper script so quickly, but it took many hours, several days,
    42 different versions, and even more minor edits to *fail* to stop said ransomware
    script from executing or kill it after it did. I’m glad the static analysis part
    worked, but that has a high probability of causing accidental deletions from false
    positives.
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
- en: I just want to reiterate that I had my AI app generate my ransomware script
    *while I was making lunch…*
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
