- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 13:39:47'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月27日13:39:47
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'No Dev Team? No Problem: Writing Malware and Anti-Malware With GenAI | by Kelvin
    Winborne | Apr, 2024 | InfoSec Write-ups'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有开发团队？没问题：使用GenAI编写恶意软件和反恶意软件 | 作者：Kelvin Winborne | 2024年4月 | InfoSec Write-ups
- en: 来源：[https://infosecwriteups.com/no-dev-team-no-problem-writing-malware-and-anti-malware-with-genai-cbce13160e13?gi=1ae1a8ad0126](https://infosecwriteups.com/no-dev-team-no-problem-writing-malware-and-anti-malware-with-genai-cbce13160e13?gi=1ae1a8ad0126)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://infosecwriteups.com/no-dev-team-no-problem-writing-malware-and-anti-malware-with-genai-cbce13160e13?gi=1ae1a8ad0126](https://infosecwriteups.com/no-dev-team-no-problem-writing-malware-and-anti-malware-with-genai-cbce13160e13?gi=1ae1a8ad0126)
- en: 'No Dev Team? No Problem: Writing Malware and Anti-Malware With GenAI'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有开发团队？没问题：使用GenAI编写恶意软件和反恶意软件
- en: Human-free security software development for both sides of the fence.
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无人参与的安全软件开发，适用于防御和攻击两端。
- en: 'Source: Image generated by Microsoft Copilot.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：由Microsoft Copilot生成的图像。
- en: Depending on what you read, from where, and from whom, software engineering
    jobs are in jeopardy, have nothing to worry about, or can even be *enhanced* by
    generative AI.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您阅读的内容、来源以及作者，软件工程工作面临威胁，无需担心，甚至可以通过生成AI *增强*。
- en: There are even companies claiming that their AI solution can behave like a [fully
    autonomous software engineer](https://www.cognition-labs.com/introducing-devin).
    Alternatively, there are those who counter claim that [it isn’t true](https://www.youtube.com/watch?v=tNmgmwEtoWE).
    (I’m paraphrasing)
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至有些公司声称，他们的AI解决方案可以像[完全自主的软件工程师](https://www.cognition-labs.com/introducing-devin)一样运作。或者，也有人反驳说[这并不是真的](https://www.youtube.com/watch?v=tNmgmwEtoWE)。（我在这里进行了改述）
- en: Personally, I just want an easier time developing programs, so I’m willing to
    at least give “normal” generative AI or LLMs a shot. For this blog, I wanted to
    see how well these things can write scripts for a novice and without direct modification
    by the user. I also tried to avoid reading too deeply into the lines of code and
    making any direct suggestions to improve any AI-generated script.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 就个人而言，我只是想在开发程序时更轻松些，所以我愿意至少尝试“普通”的生成AI或LLMs。对于这篇博客，我想看看这些工具在初学者编写脚本方面的表现如何，而且不需要用户直接修改。我还试图避免深入阅读代码行并直接建议改进任何由AI生成的脚本。
- en: I first got the idea to try to get AI to develop a basic anti-malware script,
    but the thought of testing it against real world malware wasn’t leaving me feeling
    particularly warm and fuzzy. So then I thought, what better way to be able to
    “trust” malware than if I made it myself?
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我最初想到的是尝试让AI开发一个基本的反恶意软件脚本，但是测试其对真实恶意软件的效果让我感觉并不是很舒服。于是我想，有什么比让我自己制作恶意软件更能“信任”它的呢？
- en: The only problem is that I’m not a malware or exploit developer, though I’ve
    studied it briefly in the past. For some background on my programming ability,
    I can read, write, and edit basic scripts in Python, Rust, and Go. I’m far from
    a seasoned developer. So my natural thought process was, “If I’m using AI to write
    my anti-malware script, then why not the malware itself?”
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的问题是我不是恶意软件或漏洞开发人员，尽管过去曾对此进行过简短研究。关于我的编程能力的一些背景，我可以读、写和编辑Python、Rust和Go的基本脚本。我远非经验丰富的开发人员。所以我的自然思维是，“如果我使用AI来编写我的反恶意软件脚本，那么为什么不用它来编写恶意软件呢？”
- en: Then as I started building my test VM, I realized I would need help with a general,
    not necessarily security-focused, script to help set up my testing environment.
    Why not have AI make me a third?
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后当我开始构建我的测试虚拟机时，我意识到我需要一个通用的脚本，不一定是针对安全的，来帮助设置我的测试环境。为什么不让AI帮我做第三个呢？
- en: So ironically, the first program I wanted to get AI to write for me, the anti-malware,
    would have to be created last.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 讽刺的是，我最想让AI为我编写的第一个程序，反恶意软件，竟然要在最后才能创建。
- en: Goals & Setup
  id: totrans-split-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标和设置
- en: 'My goal was to create several types of fully functional scripts entirely with
    generative AI or large language model solutions. I was aiming for three types:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我的目标是完全使用生成AI或大型语言模型解决方案创建几种类型的功能完整脚本。我目标是三种类型：
- en: General IT automation script — To save time doing a mundane task.
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用的IT自动化脚本 — 为了节省处理乏味任务的时间。
- en: Malware — I chose ransomware because its effects are the most dramatic and noticeable.
    It’s very easy to see if it’s successful or if it failed.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恶意软件 — 我选择勒索软件，因为它的影响最为显著和明显。如果成功或失败都很容易看到。
- en: Anti-malware — It’s more specifically anti-ransomware, and it has to be behavior-based
    detection. I didn’t want to build a script that was only useful to detect and
    mitigate the specific ransomware executable I created for this blog. Signature-based
    detection is only useful for a particular file. The second a single byte changes,
    the file will have a new hash.
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反恶意软件 — 更具体地说是反勒索软件，它必须是基于行为的检测。我不想建立一个只能检测和减轻我为本博客创建的特定勒索软件可执行文件的脚本。基于签名的检测只对特定文件有用。一旦单个字节更改，文件就会有一个新的哈希值。
- en: I specifically wanted to build these scripts without directly and manually modifying
    a *single line of code*. All I wanted to do was copy and paste the code into empty
    *.py files and let them execute.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我特意想要构建这些脚本，而不是直接手动修改*一行代码*。我只想将代码复制粘贴到空的 *.py 文件中并让它们执行。
- en: Each script used in this writeup was created using one of my Azure OpenAI web
    applications. All scripts were tested on one of my Debian 12 VMs on my personal
    machine. All videos were created using [OBS Studio](https://obsproject.com/),
    which were then cropped using [Adobe Express](https://www.adobe.com/express/feature/video/crop/mp4),
    and then converted to gifs using [CloudConvert](https://cloudconvert.com/) or
    [EZgif](https://ezgif.com/).
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此文中使用的每个脚本均使用了我一个 Azure OpenAI Web 应用程序之一创建。所有脚本都在我个人机器上的 Debian 12 VM 上进行了测试。所有视频都是使用
    [OBS Studio](https://obsproject.com/) 创建的，然后使用 [Adobe Express](https://www.adobe.com/express/feature/video/crop/mp4)
    裁剪，并使用 [CloudConvert](https://cloudconvert.com/) 或 [EZgif](https://ezgif.com/)
    转换为 GIF。
- en: 'I created three scripts:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了三个脚本：
- en: '**cpauto.py** — the general IT automation script'
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cpauto.py** — 通用的 IT 自动化脚本'
- en: '**rudi_ransom.py** — the ransomware script'
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**rudi_ransom.py** — 勒索软件脚本'
- en: '**rrw.py** — the anti-ransomware script'
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**rrw.py** — 反勒索软件脚本'
- en: Now to get to work.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在开始工作吧。
- en: cpauto.py
  id: totrans-split-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: cpauto.py
- en: (copy paste automation)
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: （复制粘贴自动化）
- en: 'First, I created a single junk file to actually encrypt. I originally made
    10 files that I was manually copy pasting, and in the middle of that, I got the
    idea to start automating this. The initial attempt:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我创建了一个单独的垃圾文件来进行加密。最初我制作了10个我手动复制粘贴的文件，而在这期间，我想到了开始自动化这个过程。最初的尝试：
- en: Yes, my primary Debian VM user is named “asdf” because I’m lazy.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我的主要 Debian VM 用户名为“asdf”，因为我很懒。
- en: 'Upon getting errors:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在遇到错误时：
- en: 'Upon getting more “this file already exists” errors, I typed another prompt:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在遇到更多“文件已存在”错误后，我输入了另一个提示：
- en: 'Since it was now trying to put the files in a separate directory, which I didn’t
    want, I issued another prompt, but in the completion:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 既然现在它试图把文件放在一个单独的目录中，而我不想要这样做，我发出了另一个提示，但在完成时：
- en: Got that removed then it was time. Just because I was tired of the back and
    forth, I modified the filename in the `source_file = “/home/asdf/Documents/looks_important_10.txt”`
    line and modified it to be `source_file = “/home/asdf/Documents/looks_important_1.txt”`.
    I deleted one character, technically violating my own rule, because of impatience.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 之后删除了，然后就到时间了。因为我厌倦了来回操作，我修改了`source_file = “/home/asdf/Documents/looks_important_10.txt”`这一行中的文件名，并将其修改为`source_file
    = “/home/asdf/Documents/looks_important_1.txt”`。我删除了一个字符，从技术上讲违反了自己的规则，因为我不耐烦。
- en: 'Onto testing! I start with the single file named “looks_important_1.txt,” then
    run my script:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 进行测试！我从名为“looks_important_1.txt”的单个文件开始，然后运行我的脚本：
- en: Boom!
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 砰！
- en: It worked like a charm.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 它的效果像魔法一样。
- en: 'The full script:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的脚本：
- en: '[PRE0]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So there you have it. I now have a drive full of data ready for encryption:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你看到了。现在我有一整个驱动器的数据准备加密：
- en: 'Also, this is what the data should look like:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 还有，数据应该是这样的：
- en: 100% junk.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 100% 垃圾。
- en: So now I have roughly 19GBs of junk data to encrypt, it’s time to get to the
    encryption.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我有大约19GB的垃圾数据准备加密，是时候开始加密了。
- en: '**AI vs Human**: 99% AI-generated'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**AI 对人类的比较**：99% 由 AI 生成'
- en: '**Works as Intended**: Yes'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**按预期工作**：是的'
- en: rudi_ransom.py
  id: totrans-split-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: rudi_ransom.py
- en: (rudimentary ransomware)
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: （初级勒索软件）
- en: I won’t lie. This was scary. I made this while I was making lunch.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会撒谎。这让我很害怕。我是在做午饭的时候做的。
- en: I managed to get the initial iteration of this script fully functional and successfully
    tested its capability of encryption within 30 minutes. It only took several prompts.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我设法在30分钟内完成了这个脚本的初始迭代，并成功测试了其加密能力。只需几个提示。
- en: For (hopefully) obvious reasons, I won’t provide the specific prompts I used
    to produce this ransomware script nor will I provide the full code. I am, however,
    willing to show a couple of snippets.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 希望（希望）显而易见的原因，我不会提供我用来生成此勒索软件脚本的具体提示，也不会提供完整的代码。不过，我愿意展示几个片段。
- en: 'I start the attack from the `/` directory:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我从`/`目录开始攻击：
- en: '[PRE1]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'I append the .locked extension to the encrypted files:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我在加密文件上追加了`.locked`扩展名：
- en: '[PRE2]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'My “ransom note” is created in multiple directories:'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我的“赎金笔记”创建在多个目录中：
- en: '[PRE3]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Also, technically, it’s not ransomware, simply because I didn’t bother to have
    the decryption key stored or recorded anywhere upon execution, making the data
    unrecoverable. This means this “ransomware” is functionally a data wiper. For
    my testing purposes, I just needed a script that was capable of *encryption only*.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，这不是勒索软件，只是因为我没有打算在执行时存储或记录解密密钥，使数据无法恢复。这意味着这种“勒索软件”在功能上只是一个数据擦除器。出于我的测试目的，我只需要一个仅能进行*加密*的脚本。
- en: 'To to show that the test encryption script works:'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示测试加密脚本的有效性：
- en: 'Within several minutes after encryption was completed, it broke my VM’s desktop
    environment when it attempted an idle screen timeout lock:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在几分钟内完成加密后，当它尝试空闲屏幕超时锁定时，它破坏了我的 VM 桌面环境：
- en: 'So I follow those instructions:'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我按照这些说明操作：
- en: Looks like I lost access to my GUI desktop environment!
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我失去了对 GUI 桌面环境的访问！
- en: 'So after I list my `/home/asdf/Documents/` directory and `cat` one of my .locked
    files:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在我列出`/home/asdf/Documents/`目录并`cat`其中一个`.locked`文件之后：
- en: Now I have to figure out a way to stop this. I revert to a snapshot and keep
    testing.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我必须想办法停止这个。我恢复到快照并继续测试。
- en: '**AI vs Human**: 100% AI-generated'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**AI vs Human**：100% 由 AI 生成'
- en: '**Works as Intended**: Yes (!!!)'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**按预期运行**：是的（!!!）'
- en: rrw.py
  id: totrans-split-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: rrw.py
- en: (rudimentary ransomware wrecker)
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: （基本的勒索软件拆除者）
- en: This was honestly the hardest script to get working adequately, which compounds
    upon the scariness of this entire exercise. Again, while I opted for a behavior-based
    detection anti-ransomware script, I didn’t want it to be too granular so it could
    only detect the `rudi_ransom.py` script, but anything that exhibits similar behavior.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是最难让它适当工作的脚本，这增加了整个练习的可怕性。同样地，虽然我选择了基于行为的检测反勒索软件脚本，但我不希望它过于细化，以至于只能检测到`rudi_ransom.py`脚本，而是任何表现出类似行为的东西。
- en: 'I’m just embarrassed at my earliest attempts. In the interest of saving time,
    I’ll start by showing version 4.0 of my latter script:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是对我最早的尝试感到尴尬。为了节省时间，我将从展示我的后续脚本版本 4.0 开始：
- en: 'As with any initial execution of a script written by any generative AI tool,
    I get some errors. So I try to have it address those errors:'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何由生成性 AI 工具编写的脚本的初始执行一样，我遇到了一些错误。因此，我尝试解决这些错误：
- en: 'I think it’s ready, so I then execute the ransomware/wiper script again, this
    time while running a system monitor. I’m partial to `bpytop` when I’m running
    Linux. However:'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得它已经准备好了，所以我再次执行勒索软件/擦除脚本，这次同时运行系统监视器。在运行 Linux 时，我更倾向于使用`bpytop`。然而：
- en: Business as usual….
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一切如常……
- en: Back to the drawing board…
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 回到起点……
- en: 'While my ransomware is running, I take note of the CPU usage:'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当我的勒索软件在运行时，我注意到 CPU 使用情况：
- en: 'So:'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所以：
- en: 'Let’s test the recent changes, and….:'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试最近的更改，然后……：
- en: Maybe my AI app also gave my ransomware defense evasion?
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我的 AI 应用程序还让我的勒索软件逃避了防御？
- en: 'I try to get my app to address the problem:'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我试图让我的应用程序解决问题：
- en: This sounds like quitter talk…
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来像是放弃的话……
- en: Always ask nicely. When the AI overlords take over…
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 总是要礼貌地问。当 AI 统治者接管时……
- en: 'So I test the new script again, and…:'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我再次测试新脚本，然后……：
- en: asdfasfsdafsdafsadfsdaf
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: asdfasfsdafsdafsadfsdafsdaf
- en: Maybe I made my ransomware too well?
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我把我的勒索软件做得太好了？
- en: 'I scrap the last chat, and start a brand new one with a slightly modified initial
    prompt:'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我放弃了最后一次聊天，并开始用略微修改的初始提示重新开始一个全新的聊天：
- en: 'Upon execution of `rudi_ransom.py`, something interesting happened:'
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行`rudi_ransom.py`时，发生了一些有趣的事情：
- en: 'Okay, so this is the first time there was any indication that my `rrw.py` script
    was doing something. Back to my AP app:'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这是我第一次看到我的`rrw.py`脚本有任何操作的迹象。回到我的 AP 应用程序：
- en: 'I try the new version:'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我尝试了新版本：
- en: 'Welp, at least I know my ransomware works great… (Note: This gif works in mobile
    and desktop browsers. It may not be visible in the mobile Medium app.)'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，至少我知道我的勒索软件运行得很好……（注意：此 GIF 在移动和桌面浏览器中有效。在移动 Medium 应用程序中可能看不到。）
- en: It’s fine! I’m fine!
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 没事！我没事！
- en: 'Okay, time to switch it up again. Instead of anti-malware, let me create something
    more akin to restrictive application whitelisting:'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，是时候再次改变策略了。与其反恶意软件，让我创建更类似于限制应用程序白名单的东西：
- en: 'So when I test it… :'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我测试它时……：
- en: 'Progress! (Note: This gif works in mobile and desktop browsers. It may not
    be visible in the mobile Medium app.)'
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 进展！（注意：此 GIF 在移动和桌面浏览器中有效。在移动 Medium 应用程序中可能看不到。）
- en: The only problem is that this kills multiple benign processes. Numerous attempts
    to get it to only kill processes that start with the argument of `python3` failed.
    I eventually got to v41 of `rrw.py`, and the only iteration that was able to dynamically
    stop the ransomware script was so restrictive it stopped multiple unrelated scripts
    that were part of the intended functioning of the Linux system. I basically had
    to create a denial-of-service condition on my own system to prevent… *a denial-of-service
    condition* on my system by the ransomware.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的问题是这会结束多个良性进程。多次尝试仅仅杀死以`python3`为参数启动的进程失败了。最终我到了`rrw.py`的v41版本，唯一能动态阻止勒索软件脚本的迭代是如此严格，它阻止了多个与Linux系统正常运行相关的脚本。我基本上不得不在自己的系统上创建了一个拒绝服务的条件来防止……由勒索软件引发的我的系统的拒绝服务条件。
- en: 'KW: After some talk with a colleague/mentor I revisit the “anti-malware” angle,
    and he gave me some tips for detection opportunities.'
  id: totrans-split-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: KW：与一位同事/导师交谈后，我重新审视了“反恶意软件”角度，并获得了一些检测机会的建议。
- en: 'I’m really glad I had that short talk, because he gave me the idea to not only
    use dynamic analysis (behavioral) but also static analysis. So I take this and
    issue a new prompt:'
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的很高兴我有这次简短的交谈，因为他给了我不仅使用动态分析（行为）还使用静态分析的想法。所以我接受这一点并发布了一个新的提示：
- en: 'In follow up prompts, I make sure to include language to avoid some errors
    I noticed:'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续提示中，我确保包含语言以避免我注意到的一些错误：
- en: 'So I go to test **VERSION 42** of rrw.py, and…:'
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我去测试`rrw.py`的**VERSION 42**，然后……：
- en: 'Huzzah! (Note: This gif works in mobile and desktop browsers. It may not be
    visible in the mobile Medium app.)'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！（注：此GIF适用于手机和桌面浏览器。在手机Medium应用程序中可能看不到。）
- en: It successfully performed static analysis on the strings contained within the
    file and deleted it based on the content within it. But even still, it also highlighted
    the potential danger of this script, since it accidentally deleted an earlier
    version of `rrw.py` that was sitting in the `/home/asdf/Downloads` directory.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 它成功地对文件中包含的字符串进行了静态分析，并基于其中的内容删除了它。但即便如此，它也突显了此脚本的潜在危险，因为它意外删除了位于`/home/asdf/Downloads`目录中的`rrw.py`的早期版本。
- en: While the newest iteration of `rrw.py` was already running, I created a new
    version of `rudi_ransom.py` in that same directory and it was able to avoid deletion,
    meaning `rrw.py` only scanned that directory *once* upon initial execution and
    not continuously, as it was intended, on some sort of loop. This can easily be
    adjusted to simply run at regular intervals, such as every 5 milliseconds, as
    long as the script is running.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`rrw.py`的最新版本已经在运行，我在同一目录中创建了`rudi_ransom.py`的新版本，它能够避免被删除，这意味着`rrw.py`仅在初始执行时扫描该目录*一次*，而不像预期的那样在某种循环中持续执行。只要脚本运行，可以很容易地调整为定期运行，比如每5毫秒运行一次。
- en: 'Let’s see how it performs dynamically:'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它如何动态执行：
- en: '…. (Note: This gif works in mobile and desktop browsers. It may not be visible
    in the mobile Medium app.)'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: …（注：此GIF适用于手机和桌面浏览器。在手机Medium应用程序中可能看不到。）
- en: It still lets `rudi_ransom.py` encrypt without issue. I think it’s time to…
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 它仍然允许`rudi_ransom.py`无问题地加密。我觉得现在是时候……
- en: 'Here’s the script for anyone to rip apart:'
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是供任何人分析的脚本：
- en: '[PRE4]'
  id: totrans-split-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It definitely needs refinement.
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: 它绝对需要进一步改进。
- en: '**AI vs Human**: 100% AI-generated'
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**AI vs Human**：100%由AI生成'
- en: '**Works as Intended**: RAGE'
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**Works as Intended**：RAGE'
- en: Conclusion
  id: totrans-split-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Again, please remember that I approached this as someone who is a complete novice
    and wouldn’t know what lines required editing. I purposefully didn’t look too
    closely at the code. I wanted this to be an exercise in seeing how easily someone
    could get generative AI and LLMs to write completely functional code using only
    output from error messages and the behavior of the system.
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: 再次请记住，我将其视为一个完全不懂如何编辑的新手来处理的。我故意没有仔细查看代码。我希望这是一个锻炼，看看有多容易让生成式AI和LLM仅仅使用错误消息的输出和系统行为来编写完全功能的代码。
- en: As it turns out, generative AI can totally be used to write basic scripts, as
    long as you give them clear requirements. So that’s good. However, in my experience,
    the average chatbot will take quite a lot of back and forth prompting to fix errors
    and hallucinations. So that’s bad.
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，生成式AI完全可以用来编写基本脚本，只要你给他们明确的要求。所以这很好。然而，根据我的经验，普通聊天机器人需要很多来回提示才能修复错误和幻觉。所以这不好。
- en: I was giving friends and colleagues play-by-plays as I was testing various iterations
    of the scripts while writing this blog, and the consensus opinion was that what
    I was able to accomplish with a whim was terrifying.
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我在测试写博客期间，给朋友和同事们播放着各种脚本的不同迭代过程，大家一致认为我凭一时兴起所能做到的事情令人恐惧。
- en: I’m not going to lie, I tend to agree. It’s scary that was I was able create
    the ransomware/data wiper script so quickly, but it took many hours, several days,
    42 different versions, and even more minor edits to *fail* to stop said ransomware
    script from executing or kill it after it did. I’m glad the static analysis part
    worked, but that has a high probability of causing accidental deletions from false
    positives.
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我不想撒谎，我也倾向于同意。我能如此迅速地创建勒索软件/数据擦除脚本确实令人害怕，但花费了多个小时，几天时间，尝试了42个不同版本，并进行了更多次的微小编辑，*失败*于阻止该勒索软件脚本的执行或在执行后将其杀死。我很高兴静态分析部分起作用了，但这有很高的概率会因为误报而导致意外删除。
- en: I just want to reiterate that I had my AI app generate my ransomware script
    *while I was making lunch…*
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我只想重申，我在做午餐的时候，让我的人工智能应用程序生成了我的勒索软件脚本 *...*
