- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 12:53:53'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 12:53:53'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Xr0 – C But Safe
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Xr0 – C But Safe
- en: 来源：[https://xr0.dev/](https://xr0.dev/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://xr0.dev/](https://xr0.dev/)
- en: Xr0 is a verifier for C. It eliminates many stubborn instances of undefined
    behaviour, like use-after-frees, double frees, null pointer dereferences and the
    use of uninitialised memory.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: Xr0 是 C 语言的验证器。它消除了许多顽固的未定义行为实例，如释放后使用、双重释放、空指针解引用和未初始化内存的使用。
- en: 'Xr0 uses C-like annotations to verify code:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Xr0 使用类似 C 的注解来验证代码：
- en: '[PRE0]'
  id: totrans-split-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <details><summary>More about the annotations</summary>
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: <details><summary>关于注解的更多信息</summary>
- en: 'They’re attached to every function that is potentially unsafe and express what
    its callers need to know to use it safely:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 它们被附加到每个可能不安全的函数上，并表达其调用者需要安全使用它所需的内容：
- en: '[PRE1]'
  id: totrans-split-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The really subtle safety bugs creep in through layers of function calls. Xr0
    makes this impossible, because everything needed to secure safety is distributed
    through every function call, so that no subtle mistake can creep in. It “quantum
    entangles” the safety semantics of every part of the program with every other
    part. Think of it like a infinitely rich type system that rises to the demands
    of your program’s structure. You still have to make the code safe; Xr0 just checks
    your work. Thus Xr0 is magical like the wand, not the magician. The real magic
    comes from the programmer.</details>
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 完全微妙的安全性 bug 会潜伏在多层函数调用中。Xr0 使这种情况不可能发生，因为确保安全所需的一切都分布在每个函数调用中，这样任何微妙的错误都无法潜入。它将程序的每个部分的安全语义与其他部分量子纠缠在一起。想象它就像一个无穷丰富的类型系统，能够适应程序结构的需求。你仍然需要使代码安全；Xr0
    只是检查你的工作。因此，Xr0 就像魔杖一样神奇，而不是魔术师。真正的魔法来自程序员。</details>
- en: Xr0 is a work in progress and currently verifies a subset of C89. Its most significant
    limitation is we haven’t yet implemented verification for loops and recursive
    functions, so these are being bridged by axiomatic annotations. Xr0 1.0.0 will
    enable programming in C with no undefined behaviour, but for now it’s useful for
    verifying sections of programs.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: Xr0 目前正在开发中，当前只能验证 C89 的一个子集。它最显著的限制是尚未实现对循环和递归函数的验证，因此这些部分正在通过公理注解进行桥接。Xr0
    1.0.0 将能够在 C 中进行无未定义行为的编程，但目前对于验证程序的部分区域非常有用。
- en: Xr0 is written in pure C and is open source. View it on [GitHub](https://github.com/xr0-org/xr0)
    or [SourceHut](https://git.sr.ht/~lbnz/xr0).
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: Xr0 是用纯 C 语言编写的开源项目。你可以在 [GitHub](https://github.com/xr0-org/xr0) 或者 [SourceHut](https://git.sr.ht/~lbnz/xr0)
    上查看它。
- en: Intrigued?
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你感兴趣吗？
- en: The best way to understand Xr0 is to [try it](/try). If you want to see how
    Xr0 works, be sure to use the debugger, which you can learn about [here](/debug).
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 Xr0 最好的方法是[尝试一下](/try)。如果你想看看 Xr0 的工作原理，请务必使用调试器，你可以在[这里](/debug)了解更多。
- en: Read the [tutorial](/learn) to learn more, and then if you want to go deeper,
    engage with [our theses](/theses), which explain how Xr0 will make C safe, and
    take a look at [our vision and roadmap](/vision-roadmap).
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读 [教程](/learn) 以了解更多信息，然后如果你想深入了解，请参阅[我们的论文](/theses)，这些论文解释了 Xr0 如何使 C 语言变得更安全，并查看[我们的愿景和路线图](/vision-roadmap)。
- en: Come and talk to us on [Discord](https://discord.gg/yfx69tbhxQ), or via email
    [here](mailto:betz@xr0.dev) and [here](mailto:a@xr0.dev).
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎加入我们的 [Discord](https://discord.gg/yfx69tbhxQ)，或通过电子邮件 [这里](mailto:betz@xr0.dev)
    和 [这里](mailto:a@xr0.dev) 与我们联系。
