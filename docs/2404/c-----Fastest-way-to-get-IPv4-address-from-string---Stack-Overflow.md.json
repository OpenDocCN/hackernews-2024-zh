["```\n__m128i shuffleTable[65536];    //can be reduced 256x times, see @IwillnotexistIdonotexist\n\nUINT32 MyGetIP(const char *str) {\n    __m128i input = _mm_lddqu_si128((const __m128i*)str);   //\"192.167.1.3\"\n    input = _mm_sub_epi8(input, _mm_set1_epi8('0'));        //1 9 2 254 1 6 7 254 1 254 3 208 245 0 8 40 \n    __m128i cmp = input;                                    //...X...X.X.XX...  (signs)\n    UINT32 mask = _mm_movemask_epi8(cmp);                   //6792 - magic index\n    __m128i shuf = shuffleTable[mask];                      //10 -1 -1 -1 8 -1 -1 -1 6 5 4 -1 2 1 0 -1 \n    __m128i arr = _mm_shuffle_epi8(input, shuf);            //3 0 0 0 | 1 0 0 0 | 7 6 1 0 | 2 9 1 0 \n    __m128i coeffs = _mm_set_epi8(0, 100, 10, 1, 0, 100, 10, 1, 0, 100, 10, 1, 0, 100, 10, 1);\n    __m128i prod = _mm_maddubs_epi16(coeffs, arr);          //3 0 | 1 0 | 67 100 | 92 100 \n    prod = _mm_hadd_epi16(prod, prod);                      //3 | 1 | 167 | 192 | ? | ? | ? | ?\n    __m128i imm = _mm_set_epi8(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 4, 2, 0);\n    prod = _mm_shuffle_epi8(prod, imm);                     //3 1 167 192 0 0 0 0 0 0 0 0 0 0 0 0\n    return _mm_extract_epi32(prod, 0);\n//  return (UINT32(_mm_extract_epi16(prod, 1)) << 16) + UINT32(_mm_extract_epi16(prod, 0)); //no SSE 4.1\n} \n```", "```\nvoid MyInit() {\n    memset(shuffleTable, -1, sizeof(shuffleTable));\n    int len[4];\n    for (len[0] = 1; len[0] <= 3; len[0]++)\n        for (len[1] = 1; len[1] <= 3; len[1]++)\n            for (len[2] = 1; len[2] <= 3; len[2]++)\n                for (len[3] = 1; len[3] <= 3; len[3]++) {\n                    int slen = len[0] + len[1] + len[2] + len[3] + 4;\n                    int rem = 16 - slen;\n                    for (int rmask = 0; rmask < 1<<rem; rmask++) {\n//                    { int rmask = (1<<rem)-1;    //note: only maximal rmask is possible if strings are zero-padded\n                        int mask = 0;\n                        char shuf[16] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};\n                        int pos = 0;\n                        for (int i = 0; i < 4; i++) {\n                            for (int j = 0; j < len[i]; j++) {\n                                shuf[(3-i) * 4 + (len[i]-1-j)] = pos;\n                                pos++;\n                            }\n                            mask ^= (1<<pos);\n                            pos++;\n                        }\n                        mask ^= (rmask<<slen);\n                        _mm_store_si128(&shuffleTable[mask], _mm_loadu_si128((__m128i*)shuf));\n                    }\n                }\n} \n```", "```\nC0A70103\nTime = 0.406   (1556701184)\nTime = 3.133   (1556701184) \n```", "```\nlddqu   xmm1, XMMWORD PTR [rcx]\npsubb   xmm1, xmm6\npmovmskb ecx, xmm1\nmov ecx, ecx               //useless, see @PeterCordes and @IwillnotexistIdonotexist\nadd rcx, rcx               //can be removed, see @EvgenyKluev\npshufb  xmm1, XMMWORD PTR [r13+rcx*8]\nmovdqa  xmm0, xmm8\npmaddubsw xmm0, xmm1\nphaddw  xmm0, xmm0\npshufb  xmm0, xmm7\npextrd  eax, xmm0, 0 \n```"]