- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 12:50:33'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Write Cloudflare Workers in Python · Cloudflare Workers docs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://developers.cloudflare.com/workers/languages/python/](https://developers.cloudflare.com/workers/languages/python/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Cloudflare Workers provides first-class support for Python, including support
    for:'
  prefs: []
  type: TYPE_NORMAL
- en: The majority of Python’s [Standard library](/workers/languages/python/stdlib/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All [bindings](/workers/runtime-apis/bindings/), including [Workers AI](/workers-ai/),
    [Vectorize](/vectorize), [R2](/r2), [KV](/kv), [D1](/d1), [Queues](/queues/),
    [Durable Objects](/durable-objects/), [Service Bindings](/workers/runtime-apis/bindings/service-bindings/)
    and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Environment Variables](/workers/configuration/environment-variables/), and
    [Secrets](/workers/configuration/secrets/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A robust [foreign function interface (FFI)](/workers/languages/python/ffi) that
    lets you use JavaScript objects and functions directly from Python — including
    all [Runtime APIs](/workers/runtime-apis/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Built-in packages](/workers/languages/python/packages), including [FastAPI<svg
    xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentcolor" stroke-width="1.5"
    stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 16 16" role="img"
    aria-labelledby="title-4744738674102027"><title id="title-4744738674102027">External
    link icon</title></svg> Open external link](https://fastapi.tiangolo.com/) , [Langchain<svg
    xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentcolor" stroke-width="1.5"
    stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 16 16" role="img"
    aria-labelledby="title-4744738674102027"><title id="title-4744738674102027">External
    link icon</title></svg> Open external link](https://pypi.org/project/langchain/)
    , [httpx<svg xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentcolor"
    stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0
    16 16" role="img" aria-labelledby="title-4744738674102027"><title id="title-4744738674102027">External
    link icon</title></svg> Open external link](https://www.python-httpx.org/) and
    more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A Python Worker can be as simple as three lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Similar to Workers written in [JavaScript](/workers/languages/javascript), [TypeScript](/workers/languages/typescript),
    or [Rust](/workers/languages/rust/), the main entry point for a Python worker
    is the [`fetch` handler](/workers/runtime-apis/handlers/fetch). In a Python Worker,
    this handler is named `on_fetch`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run a Python Worker locally, you use [Wrangler](/workers/wrangler/), the
    CLI for Cloudflare Workers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To deploy a Python Worker to Cloudflare, run [`wrangler deploy`](/workers/wrangler/commands/#deploy):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Python workers can be split across multiple files. Let’s create a new Python
    file, called `src/hello.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can modify `src/entry.py` to make use of the new module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Once you edit `src/entry.py`, Wrangler will automatically detect the change
    and reload your Worker.
  prefs: []
  type: TYPE_NORMAL
- en: The `Request` Interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `request` parameter passed to your `fetch` handler is a JavaScript Request
    object, exposed via the foreign function interface, allowing you to access it
    directly from your Python code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try editing the worker to accept a POST request. We know from the [documentation
    for `Request`](/workers/runtime-apis/request) that we can call `await request.json()`
    within an `async` function to parse the request body as JSON. In a Python Worker,
    you would write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Once you edit the `src/entry.py`, Wrangler should automatically restart the
    local development server. Now, if you send a POST request with the appropriate
    body, your Worker should respond with a personalized message.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `env` Parameter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to the `request` parameter, the `env` parameter is also passed to
    the Python `fetch` handler and can be used to access [environment variables](/workers/configuration/environment-variables/),
    [secrets](/workers/configuration/secrets/),and [bindings](/workers/runtime-apis/bindings/).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s try setting and using an environment variable in a Python
    Worker. First, add the environment variable to your Worker’s `wrangler.toml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can access the `API_HOST` environment variable via the `env` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Further Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
