- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 13:35:27'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: karelvo | Self-hosting forms, the sane way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://karelvo.com/blog/selfhosting-forms-the-sane-way](https://karelvo.com/blog/selfhosting-forms-the-sane-way)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'I run a few (very) small websites, nothing serious: they’re not businesses,
    they’re hobbies. There is no risk involved if they would go down, apart from maybe
    disappointing a few hundred people that found a link to it on search engines.
    Because working on them is sometimes a fun challenge, but at the same time I am
    not a developer/sysadmin, there are two rules I follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Try to do as much as you can by yourself, and seek out the challenges.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: …but seek alternatives when it gets too frustrating/scary. It’s a hobby, after
    all - no stress.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some examples of how the combo of those two things translates to my setup:'
  prefs: []
  type: TYPE_NORMAL
- en: I run all my sites by myself on a Linux server, **BUT** I rent the server (opening
    ports on my home network gives me more anxiety than I need).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I don’t use a CMS or “anything with a GUI”, **BUT** I do use static site builders
    (I can’t be bothered with raw-dogging plain HTML, CSS, and JS). My favorite is
    [Astro](https://astro.build).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I host a few services, such as site analytics, myself so that any data passes
    through as few hands as possible, **BUT** I run [Coolify](https://coolify.io/)
    to deploy my sites (and lately, manage my server).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In other words: DIY, unless there’s a great FOSS tool to help me out. The excuse
    I give myself is “this is more *hacky* than 95% of people doing the same thing,
    anyway”.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: DIY vs form services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'On one of my sites, I needed to install a form with file upload capability.
    After some research, I found a few solutions to solve my need:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Embedding a form that you build elsewhere.** Examples are [Tally](https://tally.so/)
    (which is a really inspiring company, by the way), [Typeform](https://www.typeform.com/),
    and [Jotform](https://www.jotform.com/). I don’t like the idea of embedding as
    it doesn’t give me control over what’s on my site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Form backends**, basically databases where you can send your form data to.
    Examples are [Formspree](https://formspree.io/), [FormSubmit](https://formsubmit.co/),
    [getform](https://getform.io/), and [Submit JSON](https://www.submitjson.com/).
    If my use-case was more professional, I’d choose this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DIY-ing it with PHP scripts**, a.k.a. the old school way. Easy but relatively
    insecure and prone to breaking (for someone at my skill level).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I didn’t like what I found: I wanted something'
  prefs: []
  type: TYPE_NORMAL
- en: …where I **didn’t need to pay** for a service (or be crippled in forms/submits/styling
    if I didn’t), meaning options 1 and 2 are off the table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: …that **didn’t let other services process the form data**, so again 1 and 2
    weren’t an option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: …that was **secure** and **wouldn’t give me a headache**, so number 3 was off
    as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'My solution: the middle ground'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the end, I decided to build something myself that adhered to the above points
    as much as possible. In summary, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Most people reading this will understand this chart without much further explanation.
    Before I dive into the details, here are the pros and cons of this setup:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pro - I can do whatever the hell I want with my form: have infinite submissions,
    fields, and style it however I desire. The only bottleneck is the capacity of
    my server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pro - troubleshooting is a breeze; n8n as “central processor” is a gem to work
    with.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pro/con - the data only passes the user’s browser, my server and (unfortunately)
    an email server. If you want to be super strict, you could only send it to a database
    you host yourself - or host the email server yourself, which is notoriously a
    pain in the ass.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Con - your server is a single point of failure. If it goes down, you lose everything
    apart from historical data you’ve received via email. Solution: host n8n on a
    different server, or do continuous offsite backups (which you should do anyway).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s the step by step process. Yes, it’s really this simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Form gets filled
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your website hosts a form that looks like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'User fills it out, presses the “Submit” button and 2 things happen:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The form data is sent to the n8n webhook you declared in your form.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (Optional) The button click event is sent to your website analytics warehouse,
    [Umami](https://umami.is/docs/track-events) and event name `buttonname` in the
    example above.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: n8n processes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[n8n](https://n8n.io/) is a workflow automation tool (like [Zapier](https://zapier.com))
    that [you can host yourself](https://docs.n8n.io/hosting).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: n8n receives the form data via the webhook.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (Optional but recommended) Add a [Respond to Webhook](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.respondtowebhook/)
    step in which you define which page the form should redirect after submitting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (Optional) Add data cleanup steps to format the data you received in whichever
    way you need.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add 2 subsequent, independent steps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: NocoDB collects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[NocoDB](https://nocodb.com/) is a no-code database (like [Airtable](https://www.airtable.com/))
    that [you can host yourself](https://docs.nocodb.com/getting-started/self-hosted/installation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you create a table with columns table correspond to the form fields, you
    can select “Auto-Map Input Data to Columns” in the NocoDB step in n8n. Works like
    a charm! If not, or if you want more extensive data like time, IP address, etc.,
    you can define it for each column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use NocoDB as your warehouse for all forms ever submitted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Email notifies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: I find it crucial to get notified of a form fill, because form fills are relatively
    rare on my sites. If you’re a business that gets multiple form fills a day, just
    syncing it to a CRM that gets checked daily if a more obvious choice, of course.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: n8n has integrations with many services that can notify you (think of proprietary
    services [Discord](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.discord/)
    or [Slack](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.slack/),
    but also things like [Pushbullet](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.pushbullet/)
    or [ntfy.sh](https://github.com/cryingpotat0/n8n-ntfy.sh))). I chose [email](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.sendemail/),
    however.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: My email is hosted via [Fastmail](https://fastmail.com/), which seamlessly and
    securely integrates with third-party applications via its [app passwords](https://www.fastmail.help/hc/en-us/articles/360058752854-App-passwords).
    Sending the email happens via SMTP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I send an email containing the form data to myself via an alias.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And there you have it: one way to host forms yourself, without losing your
    mind.'
  prefs: []
  type: TYPE_NORMAL
