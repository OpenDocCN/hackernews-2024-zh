["```\nint add_two_values(int a, int b)\n{\n    int c = a + b;\n    return c;\n}\n\nvoid sample()\n{\n    int x = add_two_values(31415, 2718);\n}\n\n```", "```\nint a2v_a;\nint a2v_b;\nint a2v_c;\nvoid* a2v_retaddr;\n\nint add_two_values()\n{\n    a2v_c = a2v_a + a2v_b;\n\n    return_value_register = a2v_c;\n    goto a2v_retaddr;\n}\n\nint sample_x;\nvoid sample()\n{\n    a2v_a = 31415;\n    a2v_b = 2718;\n    a2v_retaddr = &resume;\n    goto add_two_values;\nresume:\n    sample_x = return_value_register;\n}\n\n```", "```\nint a2v_a;\nint a2v_b;\nint a2v_c;\nvoid* a2v_retaddr;\n\nint add_two_values()\n{\n    a2v_a = argument_register_1;\n    a2v_b = argument_register_2;\n    a2v_retaddr = link_register;\n\n    a2v_c = a2v_a + a2v_b;\n\n    return_value_register = a2v_c;\n    goto a2v_retaddr;\n}\n\nint sample_x;\nvoid sample()\n{\n    argument_register_1 = 31415;\n    argument_register_2 = 2718;\n    branch_with_link add_two_values;\n    sample_x = return_value_register;\n}\n\n```", "```\nadd_two_values:\n    nop                     ; return address goes here\n    add   r1 = r1, r2       ; actual subroutine begins here\n    jmp   @add_two_values   ; indirect jump to return address\n\nsample:\n    mov   r1 = 31415        ; first parameter\n    mov   r2 = 2718         ; second parameter\n    bsr   add_two_values    ; call subroutine\n    st    sample_x = r1     ; save return value\n\n```"]