- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:22:03'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:22:03'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Programming vs. mathematical curiosity | Demian’s blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程与数学好奇心 | Demian's blog
- en: 来源：[https://demian.ferrei.ro/blog/programmer-vs-mathematician](https://demian.ferrei.ro/blog/programmer-vs-mathematician)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://demian.ferrei.ro/blog/programmer-vs-mathematician](https://demian.ferrei.ro/blog/programmer-vs-mathematician)
- en: Recently i came across a puzzling property of numbers that got me to reflect
    on what “tickles” my mind as a programmer. And how programmers and mathematicians,
    even though they share much in common —a mix of playfulness and rigour, and a
    knack for logic problem solving—, might be motivated by very different things.
    Of course, this is all painting with very broad strokes. Every person is different.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最近我发现了一个关于数字的令人费解的性质，让我反思了作为程序员的心理活动。程序员和数学家虽然有许多共同点——都兼具游戏性和严谨性，以及解决逻辑问题的嗜好——但可能受到非常不同的动机驱使。当然，这只是非常笼统的描述。每个人都是独特的。
- en: 'Consider this simple question: what would happen if we pick a number, arrange
    its digits in descending and ascending order to get two different numbers, and
    then subtract those two?'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个简单的问题：如果我们选一个数字，将其数字按降序和升序排列以获得两个不同的数字，然后相减会发生什么？
- en: For example, let’s pick the number 1988\. Arranging its digits in descending
    and ascending order we get 9881 and 1889, and subtracting those two we get 7992\.
    Riveting, yes. But what would happen if we repeat this process now starting from
    7992, and then keep going?
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们选择数字1988。将其数字按降序和升序排列得到9881和1889，相减得到7992。引人入胜，是吧。但如果我们从7992开始重复这个过程，然后继续呢？
- en: Please take a moment and consider what would happen. Not necessarily to check
    it with pen and paper, but what does your intuition say?
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 请花点时间思考一下会发生什么。不一定要用笔和纸验证，但你的直觉怎么说？
- en: 'Well, let’s see. Starting from 1988 the sequence would go:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，让我们看看。从1988开始，序列会是：
- en: 'Sidenote: if we had started from 2023 —the year i started writing and procrastinating
    this blog post— the sequence would look almost the same. The first step would
    be 3220 − 0223 = 2997, and after that it would continue the same way. This is
    not such a cosmic coincidence as it seems; the numbers on these sequences tend
    to repeat a lot.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 旁注：如果我们从2023开始——我开始写这篇博客并拖延的那一年——序列会看起来几乎相同。第一步将是3220 − 0223 = 2997，之后将继续同样的方式进行。这并不像看上去那么巧合；这些序列中的数字往往会重复。
- en: 1998 → 9881 − 1889 = 7992
  id: totrans-split-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1998 → 9881 − 1889 = 7992
- en: 7992 → 9972 − 2799 = 7173
  id: totrans-split-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 7992 → 9972 − 2799 = 7173
- en: 7173 → 7731 − 1377 = 6354
  id: totrans-split-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 7173 → 7731 − 1377 = 6354
- en: 6354 → 6543 − 3456 = 3087
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 6354 → 6543 − 3456 = 3087
- en: 3087 → 8730 − 0378 = 8352
  id: totrans-split-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 3087 → 8730 − 0378 = 8352
- en: 8352 → 8532 − 2358 = 6174
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 8352 → 8532 − 2358 = 6174
- en: 6174 → 7641 − 1467 = 6174
  id: totrans-split-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 6174 → 7641 − 1467 = 6174
- en: 6174 → 7641 − 1467 = 6174
  id: totrans-split-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 6174 → 7641 − 1467 = 6174
- en: …
  id: totrans-split-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: …
- en: 'Once we hit 6174 the sequence starts repeating, as the result of applying this
    “biggest digit-arrangement minus smallest digit-arrangement” operation to 6174,
    is 6174 itself. Or in maths parlance: 6174 is a [fixed point](https://en.wikipedia.org/wiki/Fixed_point_(mathematics))
    of this operation.'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们达到6174，序列就开始重复，因为将这种“最大数字排列减去最小数字排列”操作应用于6174的结果就是6174本身。或者用数学术语说：6174是这个操作的一个[不动点](https://en.wikipedia.org/wiki/Fixed_point_(mathematics))。
- en: 'Now here’s the kicker: as long as the starting number is not a single repeated
    digit, **we can start from any 4-digit number and the sequence will always reach
    6174**.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的关键是：只要起始数字不是单一重复的数字，**我们可以从任何4位数开始，序列总能达到6174**。
- en: Of course, this is not a new discovery. 6174 is known as [Kaprekar’s constant](https://en.wikipedia.org/wiki/6174_(number)),
    in honor of the mathematician who found this curious property.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这并不是一个新发现。6174以数学家发现这一奇特性而闻名，被称为[Kaprekar常数](https://en.wikipedia.org/wiki/6174_(number))。
- en: I don’t know about you, but this surprised me when i first heard about it. All
    numbers converging to a single one? Instead of maybe converging to different numbers,
    or getting into loops? Who would’ve expected that!?
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道你是怎么想的，但当我第一次听说时，我感到很惊讶。所有数字都收敛到一个数字？而不是可能收敛到不同的数字或陷入循环？谁会预料到这个！？
- en: But i also didn’t have the mathematical tools —or curiosity really— to dig into
    the maths of this to understand it more deeply. Luckily, there aren’t that many
    4-digit numbers, and computers are pretty fast, or so i’ve been told. So instead
    of mathematically proving this the “correct” way, let’s have some fun and write
    a simple Ruby program to check this property for every 4-digit number. We could
    use any language really. I like using Ruby for this kind of explorations because
    it gets out of the way and allows expressing things quite freely.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但我也没有数学工具 —— 或者说实际上也没有好奇心 —— 深入研究这个问题的数学原理。幸运的是，四位数并不多，而计算机速度很快，这是我听说的。因此，与其用数学方式证明这个“正确”的方法，不如让我们玩得开心点，写一个简单的Ruby程序来检查每个四位数的这个性质。实际上我们可以用任何语言。我喜欢用Ruby来进行这种探索，因为它不会阻碍表达事物的自由。
- en: A simple subproblem
  id: totrans-split-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个简单的子问题
- en: 'Let’s do some bottom-up development and start with the simplest bit: checking
    if a number consists of a single repeating digit. These numbers are called [repdigits](https://en.wikipedia.org/wiki/Repdigit)
    in recreational mathematics.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一些自底向上的开发，从最简单的部分开始：检查一个数字是否由单个重复的数字组成。这些数字在娱乐数学中被称为[repdigit](https://en.wikipedia.org/wiki/Repdigit)。
- en: '[PRE0]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There’s quite a bit going on on this line if you’re not used to Ruby, so let’s
    break it apart. The `n.digits` method gives us an array with the number’s base-10
    digits. Then we filter out repeated digits using `uniq`. So we’re basically saying:
    a number is a repdigit if it has only one distinct digit. The code reads almost
    as a condensed version of it’s English explanation.'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不习惯Ruby，这一行确实有点复杂，所以我们来分解一下。`n.digits`方法为我们提供了一个包含数字十进制位的数组。然后我们使用`uniq`来过滤重复的数字。所以我们基本上是在说：如果一个数字只有一个不同的数字，那么它就是一个repdigit。这段代码几乎可以看作是其英文解释的压缩版本。
- en: By the way, if you’re wondering about this `def name(args) = expr` weirdness,
    that is Ruby’s [“endless” method](https://bugs.ruby-lang.org/issues/16746) syntax,
    which debuted on version 3.0\. I’m still on the fence about it to be honest. On
    the one hand, it seems like the kind of unnecessary syntax sugar that tends to
    bloat languages and complicates answering basic questions like “how do i define
    a method?”. But at the same time, it can be useful to distinguish the cases where
    something can be expressed succinctly in a single expression, and the cases where
    multiple statements are needed.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，如果你对这个`def name(args) = expr`的怪异性感到疑惑，那是Ruby的[“无尽”方法](https://bugs.ruby-lang.org/issues/16746)语法，它在3.0版本中首次亮相。老实说，我对此还有些犹豫。一方面，它似乎是那种不必要的语法糖，往往会使语言臃肿并复杂化回答基本问题，比如“我怎么定义一个方法？”。但同时，它可以用来区分一种情况，即某些情况可以用一个表达式简洁表达，而其他情况需要多个语句。
- en: Oh and yes, method names can end with `?`, which is actually the convention
    for boolean predicates in Ruby.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，是的，方法名可以以`?`结尾，这实际上是Ruby中布尔谓词的约定。
- en: Anyway, back to our program! This `repdigit?` definition is correct and works
    for numbers of any length. But we only care about 4-digit numbers. And Kaprekar’s
    property also works for smaller numbers if we extend them with leading zeroes.
    For example, 777 is a repdigit, but if we consider it a 4-digit number and write
    it as 0777 then we can start the sequence with 7770 - 0777 = 6993 and we’d reach
    Kaprekar’s constant in 3 more steps.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，回到我们的程序吧！这个`repdigit?`的定义是正确的，适用于任意长度的数字。但我们只关心四位数。而且如果我们在较小的数字上加上前导零，Kaprekar的性质也适用。例如，777是一个repdigit，但如果我们将其视为四位数并写为0777，那么我们可以从7770 - 0777 = 6993开始这个序列，并在3个步骤后达到Kaprekar的常数。
- en: 'So we only care about repdigits of 4 digits like 1111, 2222, and so on. In
    other words, multiples of 1111:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们只关心四位数的repdigit，如1111，2222等。换句话说，1111的倍数：
- en: '[PRE1]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Kaprekar’s routine
  id: totrans-split-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kaprekar的例程
- en: 'Jumping up a bit in abstraction level, the logic of repeatedly rearranging
    the digits of a number into ascending and descending order, and subtracting those
    two until the result starts to repeat —aka Kaprekar’s routine— can be encoded
    as:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在抽象层次上跳得更高一点，将一个数字的数字重复地重新排列为升序和降序，并减去这两个数字，直到结果开始重复 —— 即Kaprekar的例程 —— 可以编码为：
- en: '[PRE2]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We take the difference of the two rearrangements of the number’s digits (which
    we haven’t defined yet). If that difference is equal to the input number, then
    we have found where the sequence starts repeating and we return that number. And
    if it’s a different number, we recur and do the same thing again this time with
    the difference.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们取该数字的两个重新排列的数字的差（我们尚未定义）。如果该差等于输入数字，则我们已找到序列开始重复的位置，并返回该数字。如果是不同的数字，则我们递归并再次执行相同的操作，这次是使用差。
- en: 'Note that this recursive function only terminates if the operation reaches
    the same number at some point. But we *know* that to be true; that’s the whole
    point of writing this program! We just want to check this programmatically. It
    doesn’t make sense to defend against an infinite recursion that we know won’t
    happen. Even more: [it is known](https://en.wikipedia.org/wiki/Kaprekar%27s_routine#Kaprekar''s_constants_in_base_10)
    that for 4-digit numbers this operation actually converges in 7 or less steps,
    so if we preferred iteration over recursion we could’ve written:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个递归函数仅在操作在某一点达到相同数字时才终止。但是我们*知道*这是真实的；这就是编写这个程序的全部意义！我们只是想通过程序验证这一点。防止我们知道不会发生的无限递归毫无意义。更甚者：[已知](https://en.wikipedia.org/wiki/Kaprekar%27s_routine#Kaprekar's_constants_in_base_10)，对于4位数，该操作实际上在7步或更少的步骤内收敛，因此如果我们更喜欢迭代而不是递归，我们可以这样写：
- en: '[PRE3]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Both versions will work fine for our purposes. If for some reason Kaprekar’s
    property doesn’t hold for some number, the iterative version will give us a wrong
    result, and the recursive version will hang forever or overflow the stack. Which
    of the two? That’s [an interesting question](https://nithinbekal.com/posts/ruby-tco/)!
    Either way, we would know that we have screwed up our “proof” somewhere. *It’s
    fine.*
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，两个版本都将正常工作。如果某些数字因某种原因不符合Kaprekar的特性，则迭代版本将给出错误结果，而递归版本将永远挂起或溢出堆栈。这两者之间？那是一个有趣的问题！无论哪种方式，我们都会知道我们在某处搞砸了我们的“证明”。*没问题*。
- en: Rearranging digits
  id: totrans-split-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重新排列数字
- en: 'Rearranging the digits of a number to be in ascending order is straightforward
    now that we know about the `digits` method:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了按升序重新排列数字的方法，现在我们已经了解了`digits`方法，这是直截了当的：
- en: '[PRE4]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We take the digits of the number, sort them, then `join` them into a string,
    and then convert that string to an integer with `to_i`. Maybe a bit too many unnecessary
    allocations for some tastes, but for a small proof program like this, it’s totally
    fine.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们取该数字的数字，对其进行排序，然后用`join`将它们连接成一个字符串，然后用`to_i`将该字符串转换为整数。对于某些口味来说，这可能会有点过多的不必要分配，但对于这样一个小型的证明程序来说，这完全没问题。
- en: 'We can quickly test this on Ruby’s interactive console, `irb`:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以快速在Ruby的交互式控制台`irb`上进行测试：
- en: REPLs are great for this kind of exploratory programming. Instead of the more
    “classic” approach of writing a program on a source file, running it, tweaking
    it, running it again, etc, a REPL allow for a much tighter, almost immediate,
    feedback loop. Once you have your little bits of program written and tested on
    the console, you can copy them onto a program file.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: REPL非常适合这种探索性编程。与在源文件上编写程序，运行它，调整它，再次运行等等更“经典”的方法不同，REPL允许更紧密，几乎是即时的反馈循环。一旦你在控制台上写好并测试了你的小程序片段，你就可以将它们复制到程序文件中。
- en: '[PRE5]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, for rearranging the digits in *descending* order, a naive solution could
    be to just add a `reverse` call after sorting:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于按*降序*重新排列数字，一个简单的解决方案可能是在排序后添加`reverse`调用：
- en: '[PRE6]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: But this logic hides a sneaky bug. Can you spot it?
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这个逻辑隐藏了一个隐秘的错误。你能发现它吗？
- en: 'We can test `descending_digits` on the console, which seems to work fine and
    even makes `kap(n)` return the Kaprekar constant for the example number we started
    with:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在控制台上测试`descending_digits`，这似乎工作正常，甚至使得`kap(n)`针对我们开始的示例数字返回Kaprekar常数：
- en: '[PRE7]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'But when called with the first number of 4 digits, 1000, we get:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当调用4位数中的第一个数字1000时，我们得到：
- en: '[PRE8]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Which is not right. 1000 is not a repdigit. It should not converge to 0.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是不正确的。1000不是一个重复数字。它不应该收敛到0。
- en: What’s happening here is that, on the first iteration, `ascending_digits(1000)
    == 1` and `descending_digits(1000) == 1000`, which are both correct. Their difference
    is 999 though, and when we try to get its digits’ rearrangements on the second
    iteration we get 999 for both the ascending and descending variants, which of
    course then causes the result of the subtraction to be 0 and then repeat.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的情况是，在第一次迭代中，`ascending_digits(1000) == 1`和`descending_digits(1000) == 1000`，这两者都是正确的。它们的差异是999，当我们尝试在第二次迭代中获取其数字重新排列时，我们得到了升序和降序变体的999，这当然导致减法的结果为0，然后重复。
- en: 'We need to make `descending_digits` consider its inputs as 4-digit numbers,
    so that 999 is seen as 0999, and then its descending order digit rearrangement
    would be 9990 instead of 999\. Here’s one way of doing this:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要让`descending_digits`将其输入视为4位数，以便将999视为0999，然后其降序数字重新排列将是9990而不是999。以下是实现此目的的一种方法：
- en: '[PRE9]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After sorting the digits and joining them into a string, we’re using `ljust(4,
    '0')` to pad the string with zeroes to the right so it is 4 characters long. A
    bit hacky, yes, but it gets the job done. At least it’s quite succinct, and readable
    enough. If you can think of a better alternative, please let me know!
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将数字排序并连接成字符串后，我们使用`ljust(4, '0')`在右侧用零填充字符串，使其长度为4个字符。有点巧妙，是的，但它完成了任务。至少它相当简洁，足够可读。如果你能想到更好的替代方案，请告诉我！
- en: 'With that hotfix in, `kap(n)` now seems to work as intended:'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 加入了这个热修复后，`kap(n)`现在似乎按预期工作：
- en: '[PRE10]'
  id: totrans-split-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The final “proof”
  id: totrans-split-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最终的“证明”
- en: 'Now at the top of this bottom-up process, we can define the main logic of the
    program:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在这个自底向上的过程的顶部，我们可以定义程序的主逻辑：
- en: '[PRE11]'
  id: totrans-split-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Again, notice how Ruby code can read as a condensed version of its English
    translation: for every number from 1 up to 9999, the number is either a repdigit,
    or its Kaprekar sequence converges to 6174\. If neither of these is true, the
    “proof” fails.'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意，Ruby代码如何作为其英文翻译的简化版本阅读：对于从1到9999的每个数字，该数字要么是重复数字，要么其Kaprekar序列收敛到6174。如果这两者都不成立，则“证明”失败。
- en: You may be wondering why i used the wordy `or` boolean operator instead of the
    more common symbolic `||` alternative. Well, it’s a stylistic choice really. First,
    if i had used `||`, the `fail` method call would’ve needed parentheses around
    its argument, which i prefer to avoid since i think of `fail` as control flow
    and i like to visually distinguish control flow methods from other “normal” method
    calls, like `kap(n)` or `repdigit?(n)` in this case. And second, using `and` and
    `or` as control flow operators —as alternatives to `if` and `unless` respectively—
    is [a brilliant idea](https://avdi.codes/using-and-and-or-in-ruby/) and can help
    expressing things in the “natural” way we conceive them. Although, i’ll admit
    this might be a form of Stockholm Syndrome; a rationalization of Ruby’s [multiple
    ways](https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it) of doing
    the same thing. Generally i prefer languages having one obvious way of doing things.
    So i’ll think about my choice here as a rare exception to my usual structuredness
    :)
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道为什么我使用冗长的`or`布尔运算符，而不是更常见的符号`||`替代方案。嗯，这实际上是一种风格选择。首先，如果我使用了`||`，那么`fail`方法调用就需要括号括住它的参数，我宁愿避免这样做，因为我认为`fail`是控制流，我喜欢在视觉上将控制流方法与其他“正常”方法调用区分开来，比如在这种情况下的`kap(n)`或`repdigit?(n)`。其次，使用`and`和`or`作为控制流运算符——作为`if`和`unless`的替代方案——是一个[很棒的主意](https://avdi.codes/using-and-and-or-in-ruby/)，可以帮助用我们构思的“自然”方式表达事物。尽管如此，我承认这可能是一种斯德哥尔摩综合症的表现；对Ruby的[多种方式](https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it)做同一件事的一种合理化。通常情况下，我更喜欢语言有一个明显的做事方式。所以我会认为我的选择在这里是我通常结构化方式的一个罕见例外
    :)
- en: 'Stitching all these snippets together, the complete “proof” program is:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些片段组合起来，完整的“证明”程序是：
- en: '[PRE12]'
  id: totrans-split-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: And running it confirms that, indeed, Kaprekar’s routine converges to 6174 for
    all 4-digit numbers as long as the number is not a single repeated digit.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 运行结果证实，对所有不是单个重复数字的4位数，Kaprekar的例程确实收敛于6174。
- en: Wait, wasn’t this about maths or something?
  id: totrans-split-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 等等，这不是关于数学或其他什么的吗？
- en: Well, yes. And no. The story starts as a maths puzzle, but it’s really about
    the journey after that.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，是的。也不是。这个故事从一个数学谜题开始，但实际上讲述的是之后的旅程。
- en: 'In my case at least, when i learned about Kaprekar’s result, my mind immediately
    jumped from “that cannot be!” to “i *must* write a program to check this for all
    numbers!”. And you can see where my curiosity wandered while writing that program:'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 至少在我个人的情况下，当我了解卡普雷卡的结果时，我的脑海立刻从“那不可能！”跳到“我 *必须* 写一个程序来检查所有数字！”。而你可以看到，在写程序的过程中，我的好奇心漫游到了哪里：
- en: to different ways of expressing the same idea and trying to find one i like
    the best
  id: totrans-split-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对表达同一思想的不同方式以及努力找出我最喜欢的方式
- en: to recursion vs iteration
  id: totrans-split-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对递归与迭代
- en: to programming languages’ questionable syntactic choices
  id: totrans-split-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对编程语言的可疑语法选择
- en: to programming languages’ philosophies
  id: totrans-split-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对编程语言的哲学
- en: to writing software top-down vs bottom-up
  id: totrans-split-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对自顶向下与自底向上编写软件
- en: Of course, these are all things that interest me, and so naturally my mind went
    there. Once i got the program written and running, the little speck of mathematical
    curiosity i initially had was gone.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些都是我感兴趣的事情，因此我的思绪自然而然地走向了这些方向。一旦我编写并运行了程序，我最初的那点数学好奇心就消失了。
- en: I suspect a more maths-oriented person would go through this very differently.
    Maybe they’d try to find an elegant analytical proof, without the aid of a dumb
    number-crunching machine brute-forcing its way through. Or they’d try to generalize
    the problem to different number of digits, or different number bases. I don’t
    really know.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我怀疑一个更数学导向的人会完全不同地处理这个问题。也许他们会试图找到一个优雅的分析证明，而不是依赖一个愚蠢的数值计算机器粗暴地穷举。或者他们会试图将问题推广到不同位数的数字，或者不同进制的数字。我真的不知道。
- en: But i appreciate having played with this. It seems i’m not that into maths as
    i once thought. And that i love programming. Who would have thought?
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 但我很欣赏玩弄这个问题。看来我并不像我曾经想象的那样喜欢数学。而我热爱编程，这倒是出乎意料。
- en: 'And how about you? What was on *your* mind while your eyes read this? Assuming
    they did, in which case: thank you very much for coming along.'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 那么你呢？当你的眼睛读到这些内容时，你的思绪是什么？假设你确实看了，那么：非常感谢你的陪伴。
