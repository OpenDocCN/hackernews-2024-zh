- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 12:55:20'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 12:55:20
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'PHP: The Right Way'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'PHP: The Right Way'
- en: 来源：[https://phptherightway.com/](https://phptherightway.com/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://phptherightway.com/](https://phptherightway.com/)
- en: Welcome
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 欢迎
- en: 'There’s a lot of outdated information on the Web that leads new PHP users astray,
    propagating bad practices and insecure code. *PHP: The Right Way* is an easy-to-read,
    quick reference for PHP popular coding standards, links to authoritative tutorials
    around the Web, and what the contributors consider to be best practices at present.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '网络上有大量过时的信息会误导新的 PHP 用户，传播不良实践和不安全的代码。*PHP: The Right Way* 是一个易于阅读的快速参考，符合
    PHP 流行的编码标准，提供链接到权威教程的内容，并反映了当前被视为最佳实践的贡献者的看法。'
- en: '*There is no canonical way to use PHP*. This website aims to introduce new
    PHP developers to some topics which they may not discover until it is too late,
    and aims to give seasoned pros some fresh ideas on those topics they’ve been doing
    for years without ever reconsidering. This website will also not tell you which
    tools to use, but instead offer suggestions for multiple options, when possible
    explaining the differences in approach and use-case.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*没有一种官方的 PHP 使用方式*。本网站旨在向新的 PHP 开发人员介绍一些可能会在为时已晚之前未发现的主题，并旨在为有经验的专业人士提供一些长期从事但从未重新考虑的新思路。本网站也不会告诉你使用哪些工具，而是在可能时为多种选项提供建议，并解释方法和用例之间的区别。'
- en: This is a living document and will continue to be updated with more helpful
    information and examples as they become available.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一份活跃的文档，将继续更新更多有用的信息和示例。
- en: Translations
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 翻译
- en: '*PHP: The Right Way* is translated into many different languages:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*PHP: The Right Way* 已被翻译成许多不同的语言：'
- en: Book
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 书籍
- en: 'The most recent version of *PHP: The Right Way* is also available in PDF, EPUB
    and MOBI formats. [Go to Leanpub](https://leanpub.com/phptherightway)'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*PHP: The Right Way* 的最新版本也以 PDF、EPUB 和 MOBI 格式提供。 [前往 Leanpub](https://leanpub.com/phptherightway)'
- en: How to Contribute
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何贡献
- en: Help make this website the best resource for new PHP programmers! [Contribute
    on GitHub](https://github.com/codeguy/php-the-right-way/tree/gh-pages)
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助使这个网站成为新 PHP 程序员的最佳资源！ [在 GitHub 上贡献](https://github.com/codeguy/php-the-right-way/tree/gh-pages)
- en: Use the Current Stable Version (8.3)
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用当前稳定版本（8.3）
- en: If you are getting started with PHP, start with the current stable release of
    [PHP 8.3](https://www.php.net/downloads.php). PHP 8.x adds many [new features](#language_highlights)
    over the older 7.x and 5.x versions. The engine has been largely re-written, and
    PHP is now even quicker than older versions. PHP 8 is a major update of the language
    and contains many new features and optimizations.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚开始使用 PHP，请从当前稳定版本 [PHP 8.3](https://www.php.net/downloads.php) 开始。PHP 8.x
    在旧的 7.x 和 5.x 版本之上增加了许多 [新功能](#language_highlights)。引擎已经大规模重写，PHP 现在比旧版本更快。PHP
    8 是语言的一个重大更新，包含许多新功能和优化。
- en: You should try to upgrade to the latest stable version quickly - PHP 7.4 [is
    already End of Life](https://www.php.net/supported-versions.php). Upgrading is
    easy, as there are not many backwards compatibility breaks [PHP 8.0](https://www.php.net/manual/migration80.incompatible.php),
    [PHP 8.1](https://www.php.net/manual/migration81.incompatible.php), [PHP 8.2](https://www.php.net/manual/migration82.incompatible.php),
    [PHP 8.3](https://www.php.net/manual/migration83.incompatible.php). If you are
    not sure which version a function or feature is in, you can check the PHP documentation
    on the [php.net](https://www.php.net/manual/) website.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该尽快升级到最新的稳定版本 - PHP 7.4 [已经终止生命周期](https://www.php.net/supported-versions.php)。升级很容易，因为没有太多向后兼容性断裂
    [PHP 8.0](https://www.php.net/manual/migration80.incompatible.php), [PHP 8.1](https://www.php.net/manual/migration81.incompatible.php),
    [PHP 8.2](https://www.php.net/manual/migration82.incompatible.php), [PHP 8.3](https://www.php.net/manual/migration83.incompatible.php)。如果你不确定一个函数或特性在哪个版本中可用，可以在
    [php.net](https://www.php.net/manual/) 网站上查看 PHP 文档。
- en: Built-in web server
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内置的 web 服务器
- en: 'With PHP 5.4 or newer, you can start learning PHP without installing and configuring
    a full-fledged web server. To start the server, run the following command from
    your terminal in your project’s web root:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PHP 5.4 或更新版本，你可以在不安装和配置完整的 Web 服务器的情况下开始学习 PHP。要启动服务器，请在项目的 Web 根目录中的终端中运行以下命令：
- en: '[PRE0]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: macOS Setup
  id: totrans-split-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: macOS 设置
- en: macOS comes prepackaged with PHP but it is normally a little behind the latest
    stable release. There are multiple ways to install the latest PHP version on macOS.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: macOS 预装了 PHP，但通常会滞后于最新的稳定发布版。在 macOS 上安装最新的 PHP 版本有多种方法。
- en: Install PHP via Homebrew
  id: totrans-split-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 Homebrew 安装 PHP
- en: '[Homebrew](https://brew.sh/) is a package manager for macOS that helps you
    easily install PHP and various extensions. The Homebrew core repository provides
    “formulae” for PHP 7.4, 8.0, 8.1, 8.2 and PHP 8.3\. Install the latest version
    with this command:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[Homebrew](https://brew.sh/)是macOS的软件包管理器，帮助您轻松安装PHP和各种扩展。Homebrew核心存储库为PHP
    7.4、8.0、8.1、8.2和PHP 8.3提供了“配方”。使用此命令安装最新版本：'
- en: You can switch between Homebrew PHP versions by modifying your `PATH` variable.
    Alternatively, you can use [brew-php-switcher](https://github.com/philcook/brew-php-switcher)
    to switch PHP versions automatically.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过修改你的`PATH`变量在Homebrew PHP版本之间切换。或者，你可以使用[brew-php-switcher](https://github.com/philcook/brew-php-switcher)自动切换PHP版本。
- en: 'You can also switch between PHP versions manually by unlinking and linking
    the wanted version:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过取消链接并链接所需版本手动切换PHP版本：
- en: '[PRE1]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Install PHP via Macports
  id: totrans-split-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过Macports安装PHP
- en: The [MacPorts](https://www.macports.org/install.php) Project is an open-source
    community initiative to design an easy-to-use system for compiling, installing,
    and upgrading either command-line, X11 or Aqua based open-source software on the
    macOS operating system.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[MacPorts](https://www.macports.org/install.php)项目是一个开源社区倡议，旨在设计一个易于使用的系统，用于在macOS操作系统上编译、安装和升级基于命令行、X11或Aqua的开源软件。'
- en: MacPorts supports pre-compiled binaries, so you don’t need to recompile every
    dependency from the source tarball files, it saves your life if you don’t have
    any package installed on your system.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: MacPorts支持预编译的二进制文件，因此您无需从源tarball文件重新编译每个依赖项，如果您的系统上没有安装任何软件包，它会挽救您的生命。
- en: 'At this point, you can install `php54`, `php55`, `php56`, `php70`, `php71`,
    `php72`, `php73`, `php74`, `php80`, `php81`, `php82` or `php83` using the `port
    install` command, for example:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时，您可以使用`port install`命令安装`php54`、`php55`、`php56`、`php70`、`php71`、`php72`、`php73`、`php74`、`php80`、`php81`、`php82`或`php83`，例如：
- en: '[PRE3]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And you can run `select` command to switch your active PHP:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 并且你可以运行`select`命令来切换你的活动PHP：
- en: '[PRE4]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Install PHP via phpbrew
  id: totrans-split-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过phpbrew安装PHP
- en: '[phpbrew](https://github.com/phpbrew/phpbrew) is a tool for installing and
    managing multiple PHP versions. This can be really useful if two different applications/projects
    require different versions of PHP, and you are not using virtual machines.'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[phpbrew](https://github.com/phpbrew/phpbrew)是一个用于安装和管理多个PHP版本的工具。如果两个不同的应用程序/项目需要不同版本的PHP，并且您没有使用虚拟机，这将非常有用。'
- en: Install PHP via Liip’s binary installer
  id: totrans-split-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过Liip的二进制安装程序安装PHP
- en: Another popular option is [php-osx.liip.ch](https://web.archive.org/web/20220505163210/https://php-osx.liip.ch/)
    which provides one liner installation methods for versions 5.3 through 7.3. It
    doesn’t overwrite the PHP binaries installed by Apple, but installs everything
    in a separate location (/usr/local/php5).
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个流行的选项是[php-osx.liip.ch](https://web.archive.org/web/20220505163210/https://php-osx.liip.ch/)，它提供了逐行安装方法，适用于5.3到7.3版本。它不会覆盖Apple安装的PHP二进制文件，而是将所有内容安装在单独的位置（/usr/local/php5）。
- en: Compile from Source
  id: totrans-split-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从源代码编译
- en: Another option that gives you control over the version of PHP you install, is
    to [compile it yourself](https://www.php.net/install.macosx.compile). In that
    case be sure to have installed either [Xcode](https://github.com/kennethreitz/osx-gcc-installer)
    or Apple’s substitute [“Command Line Tools for XCode”](https://developer.apple.com/downloads)
    downloadable from Apple’s Developer Center.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是自行[编译安装](https://www.php.net/install.macosx.compile)PHP，这种情况下，请确保已安装[Xcode](https://github.com/kennethreitz/osx-gcc-installer)或苹果的替代品“XCode的命令行工具”，可从苹果的开发者中心下载。
- en: All-in-One Installers
  id: totrans-split-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: All-in-One安装程序
- en: The solutions listed above mainly handle PHP itself, and do not supply things
    like [Apache](https://httpd.apache.org/), [Nginx](https://www.nginx.com/) or a
    SQL server. “All-in-one” solutions such as [MAMP](https://www.mamp.info/en/downloads/)
    and [XAMPP](https://www.apachefriends.org/) will install these other bits of software
    for you and tie them all together, but ease of setup comes with a trade-off of
    flexibility.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上述解决方案主要处理PHP本身，并不提供像[Apache](https://httpd.apache.org/)、[Nginx](https://www.nginx.com/)或SQL服务器等内容。“全合一”解决方案如[MAMP](https://www.mamp.info/en/downloads/)和[XAMPP](https://www.apachefriends.org/)将为您安装这些其他软件并将它们整合在一起，但设置的简便性会伴随着灵活性的牺牲。
- en: Windows Setup
  id: totrans-split-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows设置
- en: You can download the binaries from [windows.php.net/download](https://windows.php.net/download/).
    After the extraction of PHP, it is recommended to set the [PATH](https://www.windows-commandline.com/set-path-command-line/)
    to the root of your PHP folder (where php.exe is located) so you can execute PHP
    from anywhere.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[windows.php.net/download](https://windows.php.net/download/)下载二进制文件。在解压PHP后，建议将[PATH](https://www.windows-commandline.com/set-path-command-line/)设置为PHP文件夹的根目录（即php.exe所在的位置），这样你就可以在任何地方执行PHP了。
- en: For learning and local development, you can use the built in webserver with
    PHP 5.4+ so you don’t need to worry about configuring it. If you would like an
    “all-in-one” which includes a full-blown webserver and MySQL too then tools such
    as the [XAMPP](https://www.apachefriends.org/), [EasyPHP](https://www.easyphp.org/),
    [OpenServer](https://ospanel.io/) and [WAMP](https://www.wampserver.com/en/) will
    help get a Windows development environment up and running fast. That said, these
    tools will be a little different from production so be careful of environment
    differences if you are working on Windows and deploying to Linux.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于学习和本地开发，你可以使用内置的PHP 5.4+ Web服务器，无需担心配置问题。如果你需要一个“一站式”解决方案，包括完整的Web服务器和MySQL，那么像[XAMPP](https://www.apachefriends.org/)、[EasyPHP](https://www.easyphp.org/)、[OpenServer](https://ospanel.io/)和[WAMP](https://www.wampserver.com/en/)这样的工具将帮助你快速搭建Windows开发环境。尽管如此，这些工具与生产环境可能有些不同，如果你在Windows上开发并部署到Linux，务必注意环境差异。
- en: If you need to run your production system on Windows, then IIS7 will give you
    the most stable and best performance. You can use [phpmanager](http://phpmanager.codeplex.com/)
    (a GUI plugin for IIS7) to make configuring and managing PHP simple. IIS7 comes
    with FastCGI built in and ready to go, you just need to configure PHP as a handler.
    For support and additional resources there is a [dedicated area on iis.net](https://php.iis.net/)
    for PHP.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要在Windows上运行生产系统，那么IIS7将为你提供最稳定和最佳的性能。你可以使用[phpmanager](http://phpmanager.codeplex.com/)（一个IIS7的GUI插件）来简化PHP的配置和管理。IIS7自带FastCGI，并已准备就绪，你只需将PHP配置为处理程序。关于PHP的支持和额外资源，请访问[iis.net上的专门区域](https://php.iis.net/)。
- en: Generally running your application on different environment in development and
    production can lead to strange bugs popping up when you go live. If you are developing
    on Windows and deploying to Linux (or anything non-Windows) then you should consider
    using a [Virtual Machine](/#virtualization_title).
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在开发和生产环境中运行应用程序可能会导致一些奇怪的Bug在上线时冒出来。如果你在Windows上开发并部署到Linux（或其他非Windows环境），那么你应该考虑使用[虚拟机](/#virtualization_title)。
- en: Chris Tankersley has a very helpful blog post on what tools he uses to do [PHP
    development using Windows](https://ctankersley.com/2016/11/13/developing-on-windows-2016/).
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: Chris Tankersley在他的博客文章中详细介绍了他使用Windows进行[PHP开发的工具](https://ctankersley.com/2016/11/13/developing-on-windows-2016/)。
- en: Linux Setup
  id: totrans-split-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux设置
- en: Most GNU/Linux distributions come with PHP available from the official repositories,
    but those packages usually are a little behind the current stable version. There
    are multiple ways to get newer PHP versions on such distributions. On Ubuntu and
    Debian-based GNU/Linux distributions, for instance, the best alternatives for
    native packages are provided and maintened by [Ondřej Surý](https://deb.sury.org/),
    through his Personal Package Archive (PPA) on Ubuntu and DPA/bikeshed on Debian.
    Find instructions for each of these below. All that said, you can always use containers,
    compile the PHP Source code, etc.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数GNU/Linux发行版都提供了来自官方仓库的PHP，但这些包通常稍微落后于当前稳定版本。在这些发行版上，获取更新的PHP版本有多种方法。例如，在Ubuntu和基于Debian的GNU/Linux发行版上，最佳选择是由[Ondřej
    Surý](https://deb.sury.org/)提供和维护的个人软件包存档（PPA）在Ubuntu上，以及Debian的DPA/bikeshed。以下是每种方法的详细说明。总之，你始终可以使用容器、编译PHP源代码等方法。
- en: Ubuntu-based distributions
  id: totrans-split-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于Ubuntu的发行版
- en: 'For Ubuntu distributions, the [PPA by Ondřej Surý](https://launchpad.net/~ondrej/+archive/ubuntu/php)
    provides supported PHP versions along with many PECL extensions. To add this PPA
    to your system, perform the following steps in your terminal:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Ubuntu发行版，[Ondřej Surý的PPA](https://launchpad.net/~ondrej/+archive/ubuntu/php)提供了支持的PHP版本以及许多PECL扩展。要将此PPA添加到你的系统中，请在终端中执行以下步骤：
- en: 'First, add the PPA to your system’s software sources using the command:'
  id: totrans-split-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用以下命令将PPA添加到你系统的软件源：
- en: '[PRE5]'
  id: totrans-split-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After adding the PPA, update your system’s package list:'
  id: totrans-split-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加PPA后，更新你系统的软件包列表：
- en: This will ensure that your system can access and install the latest PHP packages
    available in the PPA.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保你的系统可以访问并安装PPA中提供的最新PHP包。
- en: Debian-based distributions
  id: totrans-split-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基于 Debian 的发行版
- en: 'For Debian-based distributions, Ondřej Surý also provides a [bikeshed](https://packages.sury.org/php/)
    (Debian equivalent of a PPA). To add the bikeshed to your system and update it,
    follow these steps:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于 Debian 的发行版，Ondřej Surý 还提供了一个 [bikeshed](https://packages.sury.org/php/)（类似于
    PPA 的 Debian 仓库）。要将 bikeshed 添加到您的系统并更新它，请按照以下步骤进行：
- en: Ensure that you have root access. If not, you might need to use `sudo` for the
    following commands.
  id: totrans-split-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您具有 root 访问权限。如果没有，请在以下命令中使用 `sudo`。
- en: 'Update your system’s package list:'
  id: totrans-split-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新系统的软件包列表：
- en: 'Install `lsb-release`, `ca-certificates`, and `curl`:'
  id: totrans-split-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `lsb-release`、`ca-certificates` 和 `curl`：
- en: '[PRE6]'
  id: totrans-split-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Download the signing key for the repository:'
  id: totrans-split-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载仓库的签名密钥：
- en: '[PRE7]'
  id: totrans-split-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the repository to your system’s software sources:'
  id: totrans-split-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将仓库添加到系统的软件源：
- en: '[PRE8]'
  id: totrans-split-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, update your system’s package list again:'
  id: totrans-split-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，再次更新系统的软件包列表：
- en: With these steps, your system will be able to install the latest PHP packages
    from the bikeshed.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些步骤后，您的系统将能够从 bikeshed 安装最新的 PHP 软件包。
- en: Common Directory structure
  id: totrans-split-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的目录结构
- en: A common question among those starting out with writing programs for the web
    is, “where do I put my stuff?” Over the years, this answer has consistently been
    “where the `DocumentRoot` is.” Although this answer is not complete, it’s a great
    place to start.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写网页程序时，一个常见的问题是：“我把我的东西放哪里？”多年来，这个答案一直是“`DocumentRoot` 所在的地方”。虽然这个答案不完整，但它是一个很好的起点。
- en: For security reasons, configuration files should not be accessible by a site’s
    visitors; therefore, public scripts are kept in a public directory and private
    configurations and data are kept outside of that directory.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全原因，配置文件不应该被站点的访客访问；因此，公共脚本存放在公共目录中，而私有配置和数据则存放在该目录之外。
- en: For each team, CMS, or framework one works in, a standard directory structure
    is used by each of those entities. However, if one is starting a project alone,
    knowing which filesystem structure to use can be daunting.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 每个团队、CMS 或框架都使用标准的目录结构。然而，如果一个人独立开始一个项目，知道要使用哪种文件系统结构可能令人望而生畏。
- en: '[Paul M. Jones](https://paul-m-jones.com/) has done some fantastic research
    into common practices of tens of thousands of github projects in the realm of
    PHP. He has compiled a standard file and directory structure, the [Standard PHP
    Package Skeleton](https://github.com/php-pds/skeleton), based on this research.
    In this directory structure, `DocumentRoot` should point to `public/`, unit tests
    should be in the `tests/` directory, and third party libraries, as installed by
    [composer](/#composer_and_packagist), belong in the `vendor/` directory. For other
    files and directories, abiding by the [Standard PHP Package Skeleton](https://github.com/php-pds/skeleton)
    will make the most sense to contributors of a project.'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[Paul M. Jones](https://paul-m-jones.com/) 对 PHP 领域数万个 GitHub 项目的常见实践进行了一些出色的研究。他基于这些研究编制了一个标准的文件和目录结构，即
    [Standard PHP Package Skeleton](https://github.com/php-pds/skeleton)。在这个目录结构中，`DocumentRoot`
    应指向 `public/`，单元测试应位于 `tests/` 目录中，由 [composer](/#composer_and_packagist) 安装的第三方库应放在
    `vendor/` 目录中。对于其他文件和目录，遵循 [Standard PHP Package Skeleton](https://github.com/php-pds/skeleton)
    对项目贡献者来说是最合理的。'
- en: Code Style Guide
  id: totrans-split-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码风格指南
- en: The PHP community is large and diverse, composed of innumerable libraries, frameworks,
    and components. It is common for PHP developers to choose several of these and
    combine them into a single project. It is important that PHP code adheres (as
    close as possible) to a common code style to make it easy for developers to mix
    and match various libraries for their projects.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 社区庞大多样，由无数库、框架和组件组成。PHP 开发者通常会选择几个这些组件，并将它们结合到一个项目中。重要的是，PHP 代码尽可能遵循共同的代码风格，以便开发者可以轻松地混合和匹配各种库用于他们的项目。
- en: The [Framework Interop Group](https://www.php-fig.org/) has proposed and approved
    a series of style recommendations. Not all of them relate to code-style, but those
    that do are [PSR-1](https://www.php-fig.org/psr/psr-1/), [PSR-12](https://www.php-fig.org/psr/psr-12/),
    [PSR-4](https://www.php-fig.org/psr/psr-4/) and [PER Coding Style](https://www.php-fig.org/per/coding-style/).
    These recommendations are merely a set of rules that many projects like Drupal,
    Zend, Symfony, Laravel, CakePHP, phpBB, AWS SDK, FuelPHP, Lithium, etc. are adopting.
    You can use them for your own projects, or continue to use your own personal style.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[Framework Interop Group](https://www.php-fig.org/)提出并批准了一系列风格建议。并非所有建议都涉及代码风格，但其中涉及的有[PSR-1](https://www.php-fig.org/psr/psr-1/)、[PSR-12](https://www.php-fig.org/psr/psr-12/)、[PSR-4](https://www.php-fig.org/psr/psr-4/)和[PER编码风格](https://www.php-fig.org/per/coding-style/)。这些建议只是一套规则，许多项目（如Drupal、Zend、Symfony、Laravel、CakePHP、phpBB、AWS
    SDK、FuelPHP、Lithium等）正在采纳。您可以为自己的项目使用它们，或者继续使用您自己的个人风格。'
- en: Ideally, you should write PHP code that adheres to a known standard. This could
    be any combination of PSRs, or one of the coding standards made by PEAR or Zend.
    This means other developers can easily read and work with your code, and applications
    that implement the components can have consistency even when working with lots
    of third-party code.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，您应该编写符合已知标准的PHP代码。这可以是任何PSR的组合，或者由PEAR或Zend制定的编码标准之一。这意味着其他开发人员可以轻松阅读和使用您的代码，并且实现这些组件的应用程序即使在处理大量第三方代码时也能保持一致性。
- en: You can use [PHP_CodeSniffer](https://github.com/PHPCSStandards/PHP_CodeSniffer)
    to check code against any one of these recommendations, and plugins for text editors
    like [Sublime Text](https://github.com/benmatselby/sublime-phpcs) to be given
    real-time feedback.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用[PHP_CodeSniffer](https://github.com/PHPCSStandards/PHP_CodeSniffer)来检查代码是否符合这些建议之一，并且像[Sublime
    Text](https://github.com/benmatselby/sublime-phpcs)这样的文本编辑器插件可以提供实时反馈。
- en: 'You can fix the code layout automatically by using one of the following tools:'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下工具之一自动修复代码布局：
- en: 'And you can run phpcs manually from shell:'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以从shell手动运行phpcs：
- en: '[PRE9]'
  id: totrans-split-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It will show errors and describe how to fix them. It can also be helpful to
    include the `phpcs` command in a git pre-commit hook with the `--filter=GitStaged`
    CLI argument. That way, code which contain violations against the chosen standard
    cannot enter the repository until those violations have been fixed.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 它将显示错误并描述如何修复它们。在git的预提交钩子中包含`phpcs`命令与`--filter=GitStaged` CLI参数也可能有帮助。这样，包含违反所选标准的代码将不能进入代码库，直到这些违规被修复。
- en: If you have PHP_CodeSniffer, then you can fix the code layout problems reported
    by it, automatically, with the [PHP Code Beautifier and Fixer](https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Fixing-Errors-Automatically).
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了PHP_CodeSniffer，那么你可以使用[PHP代码美化和修复工具](https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Fixing-Errors-Automatically)自动修复它报告的代码布局问题。
- en: '[PRE10]'
  id: totrans-split-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Another option is to use the [PHP Coding Standards Fixer](https://cs.symfony.com/).
    It will show what kind of errors the code structure had before it fixed them.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是使用[PHP Coding Standards Fixer](https://cs.symfony.com/)。它会显示在修复错误之前代码结构存在什么样的错误。
- en: '[PRE11]'
  id: totrans-split-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: English is preferred for all symbol names and code infrastructure. Comments
    may be written in any language easily readable by all current and future parties
    who may be working on the codebase.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所有符号名称和代码基础都应使用英语。注释可以用任何语言编写，只要所有当前和未来可能在代码库上工作的人都可以轻松阅读。
- en: Finally, a good supplementary resource for writing clean PHP code is [Clean
    Code PHP](https://github.com/jupeter/clean-code-php).
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，编写清洁的PHP代码的一个很好的补充资源是[Clean Code PHP](https://github.com/jupeter/clean-code-php)。
- en: Programming Paradigms
  id: totrans-split-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程范式
- en: PHP is a flexible, dynamic language that supports a variety of programming techniques.
    It has evolved dramatically over the years, notably adding a solid object-oriented
    model in PHP 5.0 (2004), anonymous functions and namespaces in PHP 5.3 (2009),
    and traits in PHP 5.4 (2012).
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: PHP是一种灵活的、动态的语言，支持多种编程技术。多年来它发生了巨大的变化，特别是在PHP 5.0（2004年）中添加了坚实的面向对象模型，PHP 5.3（2009年）中添加了匿名函数和命名空间，以及PHP
    5.4（2012年）中添加了traits。
- en: Object-oriented Programming
  id: totrans-split-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 面向对象编程
- en: PHP has a very complete set of object-oriented programming features including
    support for classes, abstract classes, interfaces, inheritance, constructors,
    cloning, exceptions, and more.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: PHP拥有非常完整的面向对象编程功能，包括支持类、抽象类、接口、继承、构造函数、克隆、异常等。
- en: Functional Programming
  id: totrans-split-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数式编程
- en: PHP supports first-class functions, meaning that a function can be assigned
    to a variable. Both user-defined and built-in functions can be referenced by a
    variable and invoked dynamically. Functions can be passed as arguments to other
    functions (a feature called *Higher-order Functions*) and functions can return
    other functions.
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 支持一级函数，意味着函数可以分配给变量。用户定义的和内置函数都可以由变量引用并动态调用。函数可以作为参数传递给其他函数（称为*高阶函数*的功能），并且函数可以返回其他函数。
- en: Recursion, a feature that allows a function to call itself, is supported by
    the language, but most PHP code is focused on iteration.
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 递归是一种允许函数调用自身的特性，语言本身支持，但大多数 PHP 代码更注重迭代。
- en: New anonymous functions (with support for closures) are present since PHP 5.3
    (2009).
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 5.3（2009年）以来引入了支持闭包的新匿名函数。
- en: PHP 5.4 added the ability to bind closures to an object’s scope and also improved
    support for callables such that they can be used interchangeably with anonymous
    functions in almost all cases.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 5.4 添加了将闭包绑定到对象作用域的能力，并且改进了可调用对象的支持，使它们几乎可以在所有情况下与匿名函数可互换使用。
- en: PHP supports various forms of meta-programming through mechanisms like the Reflection
    API and Magic Methods. There are many Magic Methods available like `__get()`,
    `__set()`, `__clone()`, `__toString()`, `__invoke()`, etc. that allow developers
    to hook into class behavior. Ruby developers often say that PHP is lacking `method_missing`,
    but it is available as `__call()` and `__callStatic()`.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 通过反射 API 和魔术方法等机制支持各种形式的元编程。有许多可用的魔术方法，如 `__get()`、`__set()`、`__clone()`、`__toString()`、`__invoke()`
    等，允许开发者钩入类的行为。Ruby 开发者经常说 PHP 缺少 `method_missing`，但作为 `__call()` 和 `__callStatic()`
    存在。
- en: Namespaces
  id: totrans-split-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名空间
- en: As mentioned above, the PHP community has a lot of developers creating lots
    of code. This means that one library’s PHP code might use the same class name
    as another. When both libraries are used in the same namespace, they collide and
    cause trouble.
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，PHP 社区有许多开发者创建大量代码。这意味着一个库的 PHP 代码可能与另一个库使用相同的类名。当这两个库在同一个命名空间中使用时，它们会发生冲突并引起问题。
- en: '*Namespaces* solve this problem. As described in the PHP reference manual,
    namespaces may be compared to operating system directories that *namespace* files;
    two files with the same name may co-exist in separate directories. Likewise, two
    PHP classes with the same name may co-exist in separate PHP namespaces. It’s as
    simple as that.'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*命名空间* 解决了这个问题。如 PHP 参考手册中所述，命名空间可类比于操作系统目录，它可以*命名空间*文件；两个同名文件可以存在于不同目录中。同样，两个同名的
    PHP 类可以存在于不同的 PHP 命名空间中。就是这么简单。'
- en: It is important for you to namespace your code so that it may be used by other
    developers without fear of colliding with other libraries.
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 编写代码时，为其添加命名空间是非常重要的，这样可以确保其他开发者在使用时不会与其他库发生冲突。
- en: One recommended way to use namespaces is outlined in [PSR-4](https://www.php-fig.org/psr/psr-4/),
    which aims to provide a standard file, class and namespace convention to allow
    plug-and-play code.
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命名空间的推荐方法之一详见 [PSR-4](https://www.php-fig.org/psr/psr-4/)，旨在提供标准的文件、类和命名空间约定，以支持即插即用的代码。
- en: 'In October 2014 the PHP-FIG deprecated the previous autoloading standard: [PSR-0](https://www.php-fig.org/psr/psr-0/).
    Both PSR-0 and PSR-4 are still perfectly usable. The latter requires PHP 5.3,
    so many PHP 5.2-only projects implement PSR-0.'
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年10月，PHP-FIG 弃用了之前的自动加载标准：[PSR-0](https://www.php-fig.org/psr/psr-0/)。PSR-0
    和 PSR-4 都仍然可以完美使用。后者需要 PHP 5.3，因此许多仅支持 PHP 5.2 的项目实现了 PSR-0。
- en: If you’re going to use an autoloader standard for a new application or package,
    look into PSR-4.
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要为新应用程序或软件包使用自动加载器标准，请查看 PSR-4。
- en: Standard PHP Library
  id: totrans-split-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准 PHP 库
- en: The Standard PHP Library (SPL) is packaged with PHP and provides a collection
    of classes and interfaces. It is made up primarily of commonly needed datastructure
    classes (stack, queue, heap, and so on), and iterators which can traverse over
    these datastructures or your own classes which implement SPL interfaces.
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: 标准 PHP 库（SPL）随 PHP 打包提供了一组类和接口。主要由常用的数据结构类（堆栈、队列、堆等）和可以遍历这些数据结构或实现 SPL 接口的自定义类组成。
- en: Command Line Interface
  id: totrans-split-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令行界面
- en: PHP was created to write web applications, but is also useful for scripting
    command line interface (CLI) programs. Command line PHP programs can help automate
    common tasks like testing, deployment, and application administration.
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 最初用于编写 Web 应用程序，但也非常适用于脚本化命令行界面（CLI）程序。命令行 PHP 程序可以帮助自动化诸如测试、部署和应用程序管理等常见任务。
- en: CLI PHP programs are powerful because you can use your app’s code directly without
    having to create and secure a web GUI for it. Just be sure **not** to put your
    CLI PHP scripts in your public web root!
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: CLI PHP程序非常强大，因为您可以直接使用应用程序的代码，而无需为其创建和保护Web GUI。只需确保**不要**将CLI PHP脚本放在公共Web根目录下！
- en: 'Try running PHP from your command line:'
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试从命令行运行PHP：
- en: '[PRE12]'
  id: totrans-split-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `-i` option will print your PHP configuration just like the [`phpinfo()`](https://www.php.net/function.phpinfo)
    function.
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`-i`选项将像[`phpinfo()`](https://www.php.net/function.phpinfo)函数一样打印您的PHP配置。'
- en: The `-a` option provides an interactive shell, similar to ruby’s IRB or python’s
    interactive shell. There are a number of other useful [command line options](https://www.php.net/features.commandline.options),
    too.
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`-a`选项提供一个交互式shell，类似于ruby的IRB或python的交互式shell。还有许多其他有用的[命令行选项](https://www.php.net/features.commandline.options)。'
- en: Let’s write a simple “Hello, $name” CLI program. To try it out, create a file
    named `hello.php`, as below.
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个简单的“Hello, $name”CLI程序。要尝试它，请创建名为`hello.php`的文件，如下所示。
- en: '[PRE13]'
  id: totrans-split-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: PHP sets up two special variables based on the arguments your script is run
    with. [`$argc`](https://www.php.net/reserved.variables.argc) is an integer variable
    containing the argument *count* and [`$argv`](https://www.php.net/reserved.variables.argv)
    is an array variable containing each argument’s *value*. The first argument is
    always the name of your PHP script file, in this case `hello.php`.
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: PHP根据脚本运行的参数设置了两个特殊变量。[`$argc`](https://www.php.net/reserved.variables.argc)是一个整数变量，包含参数*计数*，而[`$argv`](https://www.php.net/reserved.variables.argv)是一个数组变量，包含每个参数的*值*。第一个参数始终是您的PHP脚本文件的名称，在这种情况下是`hello.php`。
- en: The `exit()` expression is used with a non-zero number to let the shell know
    that the command failed. Commonly used exit codes can be found [here](https://www.gsp.com/cgi-bin/man.cgi?section=3&topic=sysexits).
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`exit()`表达式与非零数字一起使用，通知shell命令执行失败。常用的退出代码可以在[这里](https://www.gsp.com/cgi-bin/man.cgi?section=3&topic=sysexits)找到。'
- en: 'To run our script, above, from the command line:'
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令行运行我们的脚本，请参考上述：
- en: '[PRE14]'
  id: totrans-split-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Xdebug
  id: totrans-split-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xdebug
- en: One of the most useful tools in software development is a proper debugger. It
    allows you to trace the execution of your code and monitor the contents of the
    stack. Xdebug, PHP’s debugger, can be utilized by various IDEs to provide Breakpoints
    and stack inspection. It can also allow tools like PHPUnit and KCacheGrind to
    perform code coverage analysis and code profiling.
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中最有用的工具之一是合适的调试器。它允许您跟踪代码的执行并监视堆栈的内容。Xdebug，PHP的调试器，可以通过各种IDE使用提供断点和堆栈检查。它还可以允许像PHPUnit和KCacheGrind这样的工具执行代码覆盖分析和代码分析。
- en: If you find yourself in a bind, willing to resort to `var_dump()`/`print_r()`,
    and you still can’t find the solution - maybe you need to use the debugger.
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现自己陷入困境，愿意使用`var_dump()`/`print_r()`，但仍然找不到解决方案 - 或许您需要使用调试器。
- en: '[Installing Xdebug](https://xdebug.org/docs/install) can be tricky, but one
    of its most important features is “Remote Debugging” - if you develop code locally
    and then test it inside a VM or on another server, Remote Debugging is the feature
    that you will want to enable right away.'
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[安装Xdebug](https://xdebug.org/docs/install)可能有些棘手，但它最重要的特性之一是“远程调试” - 如果您在本地开发代码，然后在虚拟机或另一台服务器上测试它，远程调试是您希望立即启用的功能。'
- en: 'Traditionally, you will modify your Apache VHost or .htaccess file with these
    values:'
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，您将使用这些值修改您的Apache VHost或.htaccess文件：
- en: '[PRE15]'
  id: totrans-split-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The “remote host” and “remote port” will correspond to your local computer
    and the port that you configure your IDE to listen on. Then it’s just a matter
    of putting your IDE into “listen for connections” mode, and loading the URL:'
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
  zh: “远程主机”和“远程端口”将对应于您的本地计算机和您配置IDE侦听的端口。然后只需将IDE设置为“侦听连接”模式，并加载URL：
- en: '[PRE16]'
  id: totrans-split-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Your IDE will now intercept the current state as the script executes, allowing
    you to set breakpoints and probe the values in memory.
  id: totrans-split-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本执行时，您的IDE将拦截当前状态，允许您设置断点并探查内存中的值。
- en: Graphical debuggers make it very easy to step through code, inspect variables,
    and eval code against the live runtime. Many IDEs have built-in or plugin-based
    support for graphical debugging with Xdebug. MacGDBp is a free, open-source, stand-alone
    Xdebug GUI for macOS.
  id: totrans-split-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图形调试器非常容易逐步执行代码，检查变量并对现有运行时执行代码评估。许多IDE都内置或基于插件支持与Xdebug的图形调试。MacGDBp是一个免费的、开源的、独立的Xdebug
    GUI，适用于macOS。
- en: Dependency Management
  id: totrans-split-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖管理
- en: There are a ton of PHP libraries, frameworks, and components to choose from.
    Your project will likely use several of them — these are project dependencies.
    Until recently, PHP did not have a good way to manage these project dependencies.
    Even if you managed them manually, you still had to worry about autoloaders. That
    is no longer an issue.
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有大量的 PHP 库、框架和组件可供选择。你的项目可能会使用其中的几个 —— 这些是项目的依赖项。直到最近，PHP 没有一个很好的方法来管理这些项目依赖项。即使你手动管理它们，你仍然需要担心自动加载器。现在这不再是问题了。
- en: Currently there are two major package management systems for PHP - [Composer](/#composer_and_packagist)
    and [PEAR](/#pear). Composer is currently the most popular package manager for
    PHP, however for a long time PEAR was the primary package manager in use. Knowing
    PEAR’s history is a good idea, since you may still find references to it even
    if you never use it.
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有两个主要的 PHP 包管理系统 - [Composer](/#composer_and_packagist) 和 [PEAR](/#pear)。Composer
    目前是 PHP 中最流行的包管理器，然而在很长一段时间内，PEAR 是主要使用的包管理器。了解 PEAR 的历史是个好主意，因为即使你从未使用过它，你可能仍然会找到与它相关的引用。
- en: Composer and Packagist
  id: totrans-split-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Composer 和 Packagist
- en: Composer is the recommended dependency manager for PHP. List your project’s
    dependencies in a `composer.json` file and, with a few simple commands, Composer
    will automatically download your project’s dependencies and setup autoloading
    for you. Composer is analogous to NPM in the node.js world, or Bundler in the
    Ruby world.
  id: totrans-split-137
  prefs: []
  type: TYPE_NORMAL
  zh: Composer 是 PHP 的推荐依赖管理器。在一个`composer.json`文件中列出你项目的依赖项，并通过几个简单的命令，Composer 将自动下载你项目的依赖项并为你设置自动加载。Composer
    在 node.js 世界中类似于 NPM，或者在 Ruby 世界中类似于 Bundler。
- en: There is a plethora of PHP libraries that are compatible with Composer and ready
    to be used in your project. These “packages” are listed on [Packagist](https://packagist.org/),
    the official repository for Composer-compatible PHP libraries.
  id: totrans-split-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有大量与 Composer 兼容并准备好在你的项目中使用的 PHP 库。这些“包”在[Packagist](https://packagist.org/)上列出，这是
    Composer 兼容的 PHP 库的官方存储库。
- en: How to Install Composer
  id: totrans-split-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何安装 Composer
- en: The safest way to download composer is by [following the official instructions](https://getcomposer.org/download/).
    This will verify the installer is not corrupt or tampered with. The installer
    installs a `composer.phar` binary in your *current working directory*.
  id: totrans-split-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最安全的下载 Composer 的方法是[按照官方说明](https://getcomposer.org/download/)进行。这将验证安装程序未被损坏或篡改。安装程序会在你的*当前工作目录*中安装一个`composer.phar`二进制文件。
- en: 'We recommend installing Composer *globally* (e.g. a single copy in `/usr/local/bin`).
    To do so, run this command next:'
  id: totrans-split-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议*全局*安装 Composer（例如，在`/usr/local/bin`中只安装一份）。要做到这一点，请执行以下命令：
- en: '[PRE17]'
  id: totrans-split-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Note:** If the above fails due to permissions, prefix with `sudo`.'
  id: totrans-split-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 如果由于权限问题导致上述步骤失败，请在命令前加上`sudo`前缀。'
- en: To run a locally installed Composer you’d use `php composer.phar`, globally
    it’s simply `composer`.
  id: totrans-split-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行本地安装的 Composer，你需要使用 `php composer.phar`，全局安装则简单地使用 `composer`。
- en: Installing on Windows
  id: totrans-split-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在 Windows 上安装
- en: For Windows users the easiest way to get up and running is to use the [ComposerSetup](https://getcomposer.org/Composer-Setup.exe)
    installer, which performs a global install and sets up your `$PATH` so that you
    can just call `composer` from any directory in your command line.
  id: totrans-split-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 用户，最简单的方法是使用[ComposerSetup](https://getcomposer.org/Composer-Setup.exe)安装程序，它执行全局安装并设置了你的`$PATH`，这样你可以在命令行的任何目录中直接调用`composer`。
- en: How to Define and Install Dependencies
  id: totrans-split-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何定义和安装依赖项
- en: Composer keeps track of your project’s dependencies in a file called `composer.json`.
    You can manage it by hand if you like, or use Composer itself. The `composer require`
    command adds a project dependency and if you don’t have a `composer.json` file,
    one will be created. Here’s an example that adds [Twig](https://twig.symfony.com/)
    as a dependency of your project.
  id: totrans-split-148
  prefs: []
  type: TYPE_NORMAL
  zh: Composer 在一个名为`composer.json`的文件中跟踪你项目的依赖项。你可以手动管理它，或者使用 Composer 本身。`composer
    require`命令添加一个项目依赖项，如果没有`composer.json`文件，将会创建一个。以下是将[Twig](https://twig.symfony.com/)添加为你项目依赖项的示例。
- en: '[PRE18]'
  id: totrans-split-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Alternatively, the `composer init` command will guide you through creating
    a full `composer.json` file for your project. Either way, once you’ve created
    your `composer.json` file you can tell Composer to download and install your dependencies
    into the `vendor/` directory. This also applies to projects you’ve downloaded
    that already provide a `composer.json` file:'
  id: totrans-split-150
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，`composer init`命令将引导你创建一个完整的`composer.json`文件用于你的项目。无论哪种方式，一旦创建了你的`composer.json`文件，你可以告诉
    Composer 下载并安装你的依赖项到`vendor/`目录中。这也适用于你已经下载并提供`composer.json`文件的项目：
- en: '[PRE19]'
  id: totrans-split-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Next, add this line to your application’s primary PHP file; this will tell PHP
    to use Composer’s autoloader for your project dependencies.
  id: totrans-split-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-split-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now you can use your project dependencies, and they’ll be autoloaded on demand.
  id: totrans-split-154
  prefs: []
  type: TYPE_NORMAL
- en: Updating your dependencies
  id: totrans-split-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Composer creates a file called `composer.lock` which stores the exact version
    of each package it downloaded when you first ran `composer install`. If you share
    your project with others, ensure the `composer.lock` file is included, so that
    when they run `composer install` they’ll get the same versions as you. To update
    your dependencies, run `composer update`. Don’t use `composer update` when deploying,
    only `composer install`, otherwise you may end up with different package versions
    on production.
  id: totrans-split-156
  prefs: []
  type: TYPE_NORMAL
- en: This is most useful when you define your version requirements flexibly. For
    instance, a version requirement of `~1.8` means “anything newer than `1.8.0`,
    but less than `2.0.x-dev`”. You can also use the `*` wildcard as in `1.8.*`. Now
    Composer’s `composer update` command will upgrade all your dependencies to the
    newest version that fits the restrictions you define.
  id: totrans-split-157
  prefs: []
  type: TYPE_NORMAL
- en: Update Notifications
  id: totrans-split-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To receive notifications about new version releases you can sign up for [libraries.io](https://libraries.io/),
    a web service that can monitor dependencies and send you alerts on updates.
  id: totrans-split-159
  prefs: []
  type: TYPE_NORMAL
- en: Checking your dependencies for security issues
  id: totrans-split-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [Local PHP Security Checker](https://github.com/fabpot/local-php-security-checker)
    is a command-line tool, which will examine your `composer.lock` file and tell
    you if you need to update any of your dependencies.
  id: totrans-split-161
  prefs: []
  type: TYPE_NORMAL
- en: Handling global dependencies with Composer
  id: totrans-split-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Composer can also handle global dependencies and their binaries. Usage is straight-forward,
    all you need to do is prefix your command with `global`. If for example you wanted
    to install PHPUnit and have it available globally, you’d run the following command:'
  id: totrans-split-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-split-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This will create a `~/.composer` folder where your global dependencies reside.
    To have the installed packages’ binaries available everywhere, you’d then add
    the `~/.composer/vendor/bin` folder to your `$PATH` variable.
  id: totrans-split-165
  prefs: []
  type: TYPE_NORMAL
- en: PEAR
  id: totrans-split-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A veteran package manager that some PHP developers enjoy is [PEAR](https://pear.php.net/).
    It behaves similarly to Composer, but has some notable differences.
  id: totrans-split-167
  prefs: []
  type: TYPE_NORMAL
- en: PEAR requires each package to have a specific structure, which means that the
    author of the package must prepare it for usage with PEAR. Using a project which
    was not prepared to work with PEAR is not possible.
  id: totrans-split-168
  prefs: []
  type: TYPE_NORMAL
- en: PEAR installs packages globally, which means after installing them once they
    are available to all projects on that server. This can be good if many projects
    rely on the same package with the same version but might lead to problems if version
    conflicts between two projects arise.
  id: totrans-split-169
  prefs: []
  type: TYPE_NORMAL
- en: How to install PEAR
  id: totrans-split-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can install PEAR by downloading the `.phar` installer and executing it.
    The PEAR documentation has detailed [install instructions](https://pear.php.net/manual/installation.getting.php)
    for every operating system.
  id: totrans-split-171
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Linux, you can also have a look at your distribution package
    manager. Debian and Ubuntu, for example, have an apt `php-pear` package.
  id: totrans-split-172
  prefs: []
  type: TYPE_NORMAL
- en: How to install a package
  id: totrans-split-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If the package is listed on the [PEAR packages list](https://pear.php.net/packages.php),
    you can install it by specifying the official name:'
  id: totrans-split-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-split-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If the package is hosted on another channel, you need to `discover` the channel
    first and also specify it when installing. See the [Using channel docs](https://pear.php.net/manual/guide.users.commandline.channels.php)
    for more information on this topic.
  id: totrans-split-176
  prefs: []
  type: TYPE_NORMAL
- en: Handling PEAR dependencies with Composer
  id: totrans-split-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are already using [Composer](/#composer_and_packagist) and you would
    like to install some PEAR code too, you can use Composer to handle your PEAR dependencies.
    PEAR repositories are no longer directly supported by Composer version 2, so you
    must manually add a repository to install PEAR packages:'
  id: totrans-split-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-split-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The first section `"repositories"` will be used to let Composer know it should
    “initialize” (or “discover” in PEAR terminology) the pear repo. Then the `require`
    section will prefix the package name like this:'
  id: totrans-split-180
  prefs: []
  type: TYPE_NORMAL
- en: pear-channel/package
  id: totrans-split-181
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The “pear” prefix is hardcoded to avoid any conflicts, as a pear channel could
    be the same as another packages vendor name for example, then the channel short
    name (or full URL) can be used to reference which channel the package is in.
  id: totrans-split-182
  prefs: []
  type: TYPE_NORMAL
- en: 'When this code is installed it will be available in your vendor directory and
    automatically available through the Composer autoloader:'
  id: totrans-split-183
  prefs: []
  type: TYPE_NORMAL
- en: vendor/pear2/pear2-http-request/pear2/HTTP/Request.php
  id: totrans-split-184
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To use this PEAR package simply reference it like so:'
  id: totrans-split-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-split-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The Basics
  id: totrans-split-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHP is a vast language that allows coders of all levels the ability to produce
    code not only quickly, but efficiently. However, while advancing through the language,
    we often forget the basics that we first learnt (or overlooked) in favor of short
    cuts and/or bad habits. To help combat this common issue, this section is aimed
    at reminding coders of the basic coding practices within PHP.
  id: totrans-split-188
  prefs: []
  type: TYPE_NORMAL
- en: Date and Time
  id: totrans-split-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHP has a class named DateTime to help you when reading, writing, comparing
    or calculating with date and time. There are many date and time related functions
    in PHP besides DateTime, but it provides nice object-oriented interface to most
    common uses. DateTime can handle time zones, but that is outside the scope of
    this short introduction.
  id: totrans-split-190
  prefs: []
  type: TYPE_NORMAL
- en: To start working with DateTime, convert raw date and time string to an object
    with `createFromFormat()` factory method or do `new DateTime` to get the current
    date and time. Use `format()` method to convert DateTime back to a string for
    output.
  id: totrans-split-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-split-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Calculating with DateTime is possible with the DateInterval class. DateTime
    has methods like `add()` and `sub()` that take a DateInterval as an argument.
    Do not write code that expects the same number of seconds in every day. Both daylight
    saving and time zone alterations will break that assumption. Use date intervals
    instead. To calculate date difference use the `diff()` method. It will return
    new DateInterval, which is super easy to display.
  id: totrans-split-193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-split-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can use standard comparisons on DateTime objects:'
  id: totrans-split-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-split-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: One last example to demonstrate the DatePeriod class. It is used to iterate
    over recurring events. It can take two DateTime objects, start and end, and the
    interval for which it will return all events in between.
  id: totrans-split-197
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-split-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: A popular PHP API extension is [Carbon](https://carbon.nesbot.com/). It inherits
    everything in the DateTime class, so involves minimal code alterations, but extra
    features include Localization support, further ways to add, subtract and format
    a DateTime object, plus a means to test your code by simulating a date and time
    of your choosing.
  id: totrans-split-199
  prefs: []
  type: TYPE_NORMAL
- en: Design Patterns
  id: totrans-split-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are building your application it is helpful to use common patterns
    in your code and common patterns for the overall structure of your project. Using
    common patterns is helpful because it makes it much easier to manage your code
    and lets other developers quickly understand how everything fits together.
  id: totrans-split-201
  prefs: []
  type: TYPE_NORMAL
- en: If you use a framework then most of the higher level code and project structure
    will be based on that framework, so a lot of the pattern decisions are made for
    you. But it is still up to you to pick out the best patterns to follow in the
    code you build on top of the framework. If, on the other hand, you are not using
    a framework to build your application then you have to find the patterns that
    best suit the type and size of application that you’re building.
  id: totrans-split-202
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about PHP design patterns and see working examples at:'
  id: totrans-split-203
  prefs: []
  type: TYPE_NORMAL
- en: Working with UTF-8
  id: totrans-split-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*This section was originally written by [Alex Cabal](https://alexcabal.com/)
    over at [PHP Best Practices](https://phpbestpractices.org/#utf-8) and has been
    used as the basis for our own UTF-8 advice*.'
  id: totrans-split-205
  prefs: []
  type: TYPE_NORMAL
- en: There’s no one-liner. Be careful, detailed, and consistent.
  id: totrans-split-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Right now PHP does not support Unicode at a low level. There are ways to ensure
    that UTF-8 strings are processed OK, but it’s not easy, and it requires digging
    in to almost all levels of the web app, from HTML to SQL to PHP. We’ll aim for
    a brief, practical summary.
  id: totrans-split-207
  prefs: []
  type: TYPE_NORMAL
- en: UTF-8 at the PHP level
  id: totrans-split-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The basic string operations, like concatenating two strings and assigning strings
    to variables, don’t need anything special for UTF-8\. However, most string functions,
    like `strpos()` and `strlen()`, do need special consideration. These functions
    often have an `mb_*` counterpart: for example, `mb_strpos()` and `mb_strlen()`.
    These `mb_*` strings are made available to you via the [Multibyte String Extension](https://www.php.net/book.mbstring),
    and are specifically designed to operate on Unicode strings.'
  id: totrans-split-209
  prefs: []
  type: TYPE_NORMAL
- en: You must use the `mb_*` functions whenever you operate on a Unicode string.
    For example, if you use `substr()` on a UTF-8 string, there’s a good chance the
    result will include some garbled half-characters. The correct function to use
    would be the multibyte counterpart, `mb_substr()`.
  id: totrans-split-210
  prefs: []
  type: TYPE_NORMAL
- en: The hard part is remembering to use the `mb_*` functions at all times. If you
    forget even just once, your Unicode string has a chance of being garbled during
    further processing.
  id: totrans-split-211
  prefs: []
  type: TYPE_NORMAL
- en: Not all string functions have an `mb_*` counterpart. If there isn’t one for
    what you want to do, then you might be out of luck.
  id: totrans-split-212
  prefs: []
  type: TYPE_NORMAL
- en: You should use the `mb_internal_encoding()` function at the top of every PHP
    script you write (or at the top of your global include script), and the `mb_http_output()`
    function right after it if your script is outputting to a browser. Explicitly
    defining the encoding of your strings in every script will save you a lot of headaches
    down the road.
  id: totrans-split-213
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, many PHP functions that operate on strings have an optional parameter
    letting you specify the character encoding. You should always explicitly indicate
    UTF-8 when given the option. For example, `htmlentities()` has an option for character
    encoding, and you should always specify UTF-8 if dealing with such strings. Note
    that as of PHP 5.4.0, UTF-8 is the default encoding for `htmlentities()` and `htmlspecialchars()`.
  id: totrans-split-214
  prefs: []
  type: TYPE_NORMAL
- en: Finally, If you are building a distributed application and cannot be certain
    that the `mbstring` extension will be enabled, then consider using the [symfony/polyfill-mbstring](https://packagist.org/packages/symfony/polyfill-mbstring)
    Composer package. This will use `mbstring` if it is available, and fall back to
    non UTF-8 functions if not.
  id: totrans-split-215
  prefs: []
  type: TYPE_NORMAL
- en: UTF-8 at the Database level
  id: totrans-split-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your PHP script accesses MySQL, there’s a chance your strings could be stored
    as non-UTF-8 strings in the database even if you follow all of the precautions
    above.
  id: totrans-split-217
  prefs: []
  type: TYPE_NORMAL
- en: To make sure your strings go from PHP to MySQL as UTF-8, make sure your database
    and tables are all set to the `utf8mb4` character set and collation, and that
    you use the `utf8mb4` character set in the PDO connection string. See example
    code below. This is *critically important*.
  id: totrans-split-218
  prefs: []
  type: TYPE_NORMAL
- en: Note that you must use the `utf8mb4` character set for complete UTF-8 support,
    not the `utf8` character set! See Further Reading for why.
  id: totrans-split-219
  prefs: []
  type: TYPE_NORMAL
- en: UTF-8 at the browser level
  id: totrans-split-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use the `mb_http_output()` function to ensure that your PHP script outputs UTF-8
    strings to your browser.
  id: totrans-split-221
  prefs: []
  type: TYPE_NORMAL
- en: 'The browser will then need to be told by the HTTP response that this page should
    be considered as UTF-8\. Today, it is common to set the character set in the HTTP
    response header like this:'
  id: totrans-split-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-split-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The historic approach to doing that was to include the [charset `<meta>` tag](http://htmlpurifier.org/docs/enduser-utf8.html)
    in your page’s `<head>` tag.
  id: totrans-split-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-split-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Further reading
  id: totrans-split-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Internationalization (i18n) and Localization (l10n)
  id: totrans-split-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Disclaimer for newcomers: i18n and l10n are numeronyms, a kind of abbreviation
    where numbers are used to shorten words - in our case, internationalization becomes
    i18n and localization, l10n.*'
  id: totrans-split-228
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need to define those two similar concepts and other related
    things:'
  id: totrans-split-229
  prefs: []
  type: TYPE_NORMAL
- en: '**Internationalization** is when you organize your code so it can be adapted
    to different languages or regions without refactorings. This action is usually
    done once - preferably, at the beginning of the project, or else you will probably
    need some huge changes in the source!'
  id: totrans-split-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Localization** happens when you adapt the interface (mainly) by translating
    contents, based on the i18n work done before. It usually is done every time a
    new language or region needs support and is updated when new interface pieces
    are added, as they need to be available in all supported languages.'
  id: totrans-split-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pluralization** defines the rules required between distinct languages to
    interoperate strings containing numbers and counters. For instance, in English
    when you have only one item, it is singular, and anything different from that
    is called plural; plural in this language is indicated by adding an S after some
    words, and sometimes changes parts of it. In other languages, such as Russian
    or Serbian, there are two plural forms in addition to the singular - you may even
    find languages with a total of four, five or six forms, such as Slovenian, Irish
    or Arabic.'
  id: totrans-split-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common ways to implement
  id: totrans-split-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to internationalize PHP software is by using array files and
    using those strings in templates, such as `<h1><?=$TRANS['title_about_page']?></h1>`.
    This way is, however, hardly recommended for serious projects, as it poses some
    maintenance issues along the road - some might appear in the very beginning, such
    as pluralization. So, please, don’t try this if your project will contain more
    than a couple of pages.
  id: totrans-split-234
  prefs: []
  type: TYPE_NORMAL
- en: The most classic way and often taken as reference for i18n and l10n is a [Unix
    tool called `gettext`](https://en.wikipedia.org/wiki/Gettext). It dates back to
    1995 and is still a complete implementation for translating software. It is easy
    enough to get running, while still sporting powerful supporting tools. It is about
    Gettext we will be talking here. Also, to help you not get messy over the command-line,
    we will be presenting a great GUI application that can be used to easily update
    your l10n source.
  id: totrans-split-235
  prefs: []
  type: TYPE_NORMAL
- en: 'There are common libraries used that support Gettext and other implementations
    of i18n. Some of them may seem easier to install or sport additional features
    or i18n file formats. In this document, we focus on the tools provided with the
    PHP core, but here we list others for completion:'
  id: totrans-split-236
  prefs: []
  type: TYPE_NORMAL
- en: '[aura/intl](https://github.com/auraphp/Aura.Intl): Provides internationalization
    (I18N) tools, specifically package-oriented per-locale message translation. It
    uses array formats for messages. Does not provide a message extractor, but does
    provide advanced message formatting via the `intl` extension (including pluralized
    messages).'
  id: totrans-split-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[php-gettext/Gettext](https://github.com/php-gettext/Gettext): Gettext support
    with an OO interface; includes improved helper functions, powerful extractors
    for several file formats (some of them not supported natively by the `gettext`
    command), and can also export to other formats besides `.mo/.po` files. Can be
    useful if you need to integrate your translation files into other parts of the
    system, like a JavaScript interface.'
  id: totrans-split-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[symfony/translation](https://symfony.com/components/Translation): supports
    a lot of different formats, but recommends using verbose XLIFF’s. Doesn’t include
    helper functions nor a built-in extractor, but supports placeholders using `strtr()`
    internally.'
  id: totrans-split-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[laminas/laminas-i18n](https://docs.laminas.dev/laminas-i18n/): supports array
    and INI files, or Gettext formats. Implements a caching layer to save you from
    reading the filesystem every time. It also includes view helpers, and locale-aware
    input filters and validators. However, it has no message extractor.'
  id: totrans-split-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other frameworks also include i18n modules, but those are not available outside
    of their codebases:'
  id: totrans-split-241
  prefs: []
  type: TYPE_NORMAL
- en: '[Laravel](https://laravel.com/docs/master/localization) supports basic array
    files, has no automatic extractor but includes a `@lang` helper for template files.'
  id: totrans-split-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Yii](https://www.yiiframework.com/doc/guide/2.0/en/tutorial-i18n) supports
    array, Gettext, and database-based translation, and includes a messages extractor.
    It is backed by the [`Intl`](https://www.php.net/manual/intro.intl.php) extension,
    available since PHP 5.3, and based on the [ICU project](https://icu.unicode.org/);
    this enables Yii to run powerful replacements, like spelling out numbers, formatting
    dates, times, intervals, currency, and ordinals.'
  id: totrans-split-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you decide to go for one of the libraries that provide no extractors, you
    may want to use the gettext formats, so you can use the original gettext toolchain
    (including Poedit) as described in the rest of the chapter.
  id: totrans-split-244
  prefs: []
  type: TYPE_NORMAL
- en: Gettext
  id: totrans-split-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installation
  id: totrans-split-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might need to install Gettext and the related PHP library by using your
    package manager, like `apt-get` or `yum`. After installed, enable it by adding
    `extension=gettext.so` (Linux/Unix) or `extension=php_gettext.dll` (Windows) to
    your `php.ini`.
  id: totrans-split-247
  prefs: []
  type: TYPE_NORMAL
- en: Here we will also be using [Poedit](https://poedit.net) to create translation
    files. You will probably find it in your system’s package manager; it is available
    for Unix, macOS, and Windows, and can be [downloaded for free on their website](https://poedit.net/download)
    as well.
  id: totrans-split-248
  prefs: []
  type: TYPE_NORMAL
- en: Structure
  id: totrans-split-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Types of files
  id: totrans-split-250
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are three files you usually deal with while working with gettext. The
    main ones are PO (Portable Object) and MO (Machine Object) files, the first being
    a list of readable “translated objects” and the second, the corresponding binary
    to be interpreted by gettext when doing localization. There’s also a POT (Template)
    file, which simply contains all existing keys from your source files, and can
    be used as a guide to generate and update all PO files. Those template files are
    not mandatory: depending on the tool you are using to do l10n, you can go just
    fine with only PO/MO files. You will always have one pair of PO/MO files per language
    and region, but only one POT per domain.'
  id: totrans-split-251
  prefs: []
  type: TYPE_NORMAL
- en: Domains
  id: totrans-split-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are some cases, in big projects, where you might need to separate translations
    when the same words convey different meaning given a context. In those cases,
    you split them into different *domains*. They are, basically, named groups of
    POT/PO/MO files, where the filename is the said *translation domain*. Small and
    medium-sized projects usually, for simplicity, use only one domain; its name is
    arbitrary, but we will be using “main” for our code samples. In [Symfony](https://symfony.com/components/Translation)
    projects, for example, domains are used to separate the translation for validation
    messages.
  id: totrans-split-253
  prefs: []
  type: TYPE_NORMAL
- en: Locale code
  id: totrans-split-254
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A locale is simply a code that identifies one version of a language. It is
    defined following the [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
    and [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) specs:
    two lower-case letters for the language, optionally followed by an underline and
    two upper-case letters identifying the country or regional code. For [rare languages](https://www.gnu.org/software/gettext/manual/gettext.html#Rare-Language-Codes),
    three letters are used.'
  id: totrans-split-255
  prefs: []
  type: TYPE_NORMAL
- en: For some speakers, the country part may seem redundant. In fact, some languages
    have dialects in different countries, such as Austrian German (`de_AT`) or Brazilian
    Portuguese (`pt_BR`). The second part is used to distinguish between those dialects
    - when it is not present, it is taken as a “generic” or “hybrid” version of the
    language.
  id: totrans-split-256
  prefs: []
  type: TYPE_NORMAL
- en: Directory structure
  id: totrans-split-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To use Gettext, we will need to adhere to a specific structure of folders.
    First, you will need to select an arbitrary root for your l10n files in your source
    repository. Inside it, you will have a folder for each needed locale, and a fixed
    `LC_MESSAGES` folder that will contain all your PO/MO pairs. Example:'
  id: totrans-split-258
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-split-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Plural forms
  id: totrans-split-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we said in the introduction, different languages might sport different plural
    rules. However, gettext saves us from this trouble once again. When creating a
    new `.po` file, you will have to declare the [plural rules](https://docs.translatehouse.org/projects/localization-guide/en/latest/l10n/pluralforms.html)
    for that language, and translated pieces that are plural-sensitive will have a
    different form for each of those rules. When calling Gettext in code, you will
    have to specify the number related to the sentence, and it will work out the correct
    form to use - even using string substitution if needed.
  id: totrans-split-261
  prefs: []
  type: TYPE_NORMAL
- en: 'Plural rules include the number of plurals available and a boolean test with
    `n` that would define in which rule the given number falls (starting the count
    with 0). For example:'
  id: totrans-split-262
  prefs: []
  type: TYPE_NORMAL
- en: 'Japanese: `nplurals=1; plural=0` - only one rule'
  id: totrans-split-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'English: `nplurals=2; plural=(n != 1);` - two rules, first if N is one, second
    rule otherwise'
  id: totrans-split-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Brazilian Portuguese: `nplurals=2; plural=(n > 1);` - two rules, second if
    N is bigger than one, first otherwise'
  id: totrans-split-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you understood the basis of how plural rules works - and if you didn’t,
    please look at a deeper explanation on the [LingoHub tutorial](https://lingohub.com/blog/2013/07/php-internationalization-with-gettext-tutorial/#Plurals)
    -, you might want to copy the ones you need from a [list](https://docs.translatehouse.org/projects/localization-guide/en/latest/l10n/pluralforms.html)
    instead of writing them by hand.
  id: totrans-split-266
  prefs: []
  type: TYPE_NORMAL
- en: When calling out Gettext to do localization on sentences with counters, you
    will have to provide it the related number as well. Gettext will work out what
    rule should be in effect and use the correct localized version. You will need
    to include in the `.po` file a different sentence for each plural rule defined.
  id: totrans-split-267
  prefs: []
  type: TYPE_NORMAL
- en: Sample implementation
  id: totrans-split-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After all that theory, let’s get a little practical. Here’s an excerpt of a
    `.po` file - don’t mind with its format, but with the overall content instead;
    you will learn how to edit it easily later:'
  id: totrans-split-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-split-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The first section works like a header, having the `msgid` and `msgstr` especially
    empty. It describes the file encoding, plural forms and other things that are
    less relevant. The second section translates a simple string from English to Brazilian
    Portuguese, and the third does the same, but leveraging string replacement from
    [`sprintf`](https://www.php.net/manual/function.sprintf.php) so the translation
    may contain the user name and visit date. The last section is a sample of pluralization
    forms, displaying the singular and plural version as `msgid` in English and their
    corresponding translations as `msgstr` 0 and 1 (following the number given by
    the plural rule). There, string replacement is used as well so the number can
    be seen directly in the sentence, by using `%d`. The plural forms always have
    two `msgid` (singular and plural), so it is advised not to use a complex language
    as the source of translation.
  id: totrans-split-271
  prefs: []
  type: TYPE_NORMAL
- en: Discussion on l10n keys
  id: totrans-split-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you might have noticed, we are using as source ID the actual sentence in
    English. That `msgid` is the same used throughout all your `.po` files, meaning
    other languages will have the same format and the same `msgid` fields but translated
    `msgstr` lines.
  id: totrans-split-273
  prefs: []
  type: TYPE_NORMAL
- en: 'Talking about translation keys, there are two main “schools” here:'
  id: totrans-split-274
  prefs: []
  type: TYPE_NORMAL
- en: '*`msgid` as a real sentence*. The main advantages are:'
  id: totrans-split-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'if there are pieces of the software untranslated in any given language, the
    key displayed will still maintain some meaning. Example: if you happen to translate
    by heart from English to Spanish but need help to translate to French, you might
    publish the new page with missing French sentences, and parts of the website would
    be displayed in English instead;'
  id: totrans-split-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: it is much easier for the translator to understand what’s going on and do a
    proper translation based on the `msgid`;
  id: totrans-split-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: it gives you “free” l10n for one language - the source one;
  id: totrans-split-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The only disadvantage: if you need to change the actual text, you would need
    to replace the same `msgid` across several language files.'
  id: totrans-split-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`msgid` as a unique, structured key*. It would describe the sentence role
    in the application in a structured way, including the template or part where the
    string is located instead of its content.'
  id: totrans-split-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: it is a great way to have the code organized, separating the text content from
    the template logic.
  id: totrans-split-281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'however, that could bring problems to the translator that would miss the context.
    A source language file would be needed as a basis for other translations. Example:
    the developer would ideally have an `en.po` file, that translators would read
    to understand what to write in `fr.po` for instance.'
  id: totrans-split-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: missing translations would display meaningless keys on screen (`top_menu.welcome`
    instead of `Hello there, User!` on the said untranslated French page). That is
    good it as would force translation to be complete before publishing - however,
    bad as translation issues would be remarkably awful in the interface. Some libraries,
    though, include an option to specify a given language as “fallback”, having a
    similar behavior as the other approach.
  id: totrans-split-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The [Gettext manual](https://www.gnu.org/software/gettext/manual/gettext.html)
    favors the first approach as, in general, it is easier for translators and users
    in case of trouble. That is how we will be working here as well. However, the
    [Symfony documentation](https://symfony.com/doc/current/translation.html#using-real-or-keyword-messages)
    favors keyword-based translation, to allow for independent changes of all translations
    without affecting templates as well.
  id: totrans-split-284
  prefs: []
  type: TYPE_NORMAL
- en: Everyday usage
  id: totrans-split-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In a typical application, you would use some Gettext functions while writing
    static text in your pages. Those sentences would then appear in `.po` files, get
    translated, compiled into `.mo` files and then, used by Gettext when rendering
    the actual interface. Given that, let’s tie together what we have discussed so
    far in a step-by-step example:'
  id: totrans-split-286
  prefs: []
  type: TYPE_NORMAL
- en: 1\. A sample template file, including some different gettext calls
  id: totrans-split-287
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-split-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[`gettext()`](https://www.php.net/manual/function.gettext.php) simply translates
    a `msgid` into its corresponding `msgstr` for a given language. There’s also the
    shorthand function `_()` that works the same way;'
  id: totrans-split-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ngettext()`](https://www.php.net/manual/function.ngettext.php) does the same
    but with plural rules;'
  id: totrans-split-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are also [`dgettext()`](https://www.php.net/manual/function.dgettext.php)
    and [`dngettext()`](https://www.php.net/manual/function.dngettext.php), that allow
    you to override the domain for a single call. More on domain configuration in
    the next example.
  id: totrans-split-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2\. A sample setup file (`i18n_setup.php` as used above), selecting the correct
    locale and configuring Gettext
  id: totrans-split-292
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-split-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 3\. Preparing translation for the first run
  id: totrans-split-294
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One of the great advantages Gettext has over custom framework i18n packages
    is its extensive and powerful file format. “Oh man, that’s quite hard to understand
    and edit by hand, a simple array would be easier!” Make no mistake, applications
    like [Poedit](https://poedit.net) are here to help - *a lot*. You can get the
    program from [their website](https://poedit.net/download), it’s free and available
    for all platforms. It’s a pretty easy tool to get used to, and a very powerful
    one at the same time - using all features Gettext has available. This guide is
    based on PoEdit 1.8.
  id: totrans-split-295
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first run, you should select “File > New…” from the menu. You’ll be
    asked straight ahead for the language: here you can select/filter the language
    you want to translate to, or use that format we mentioned before, such as `en_US`
    or `pt_BR`.'
  id: totrans-split-296
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, save the file - using that directory structure we mentioned as well. Then
    you should click “Extract from sources”, and here you’ll configure various settings
    for the extraction and translation tasks. You’ll be able to find all those later
    through “Catalog > Properties”:'
  id: totrans-split-297
  prefs: []
  type: TYPE_NORMAL
- en: 'Source paths: here you must include all folders from the project where `gettext()`
    (and siblings) are called - this is usually your templates/views folder(s). This
    is the only mandatory setting;'
  id: totrans-split-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Translation properties:'
  id: totrans-split-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project name and version, Team and Team’s email address: useful information
    that goes in the .po file header;'
  id: totrans-split-300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Plural forms: here go those rules we mentioned before - there’s a link in there
    with samples as well. You can leave it with the default option most of the time,
    as PoEdit already includes a handy database of plural rules for many languages.'
  id: totrans-split-301
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Charsets: UTF-8, preferably;'
  id: totrans-split-302
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Source code charset: set here the charset used by your codebase - probably
    UTF-8 as well, right?'
  id: totrans-split-303
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Source keywords: The underlying software knows how `gettext()` and similar
    function calls look like in several programming languages, but you might as well
    create your own translation functions. It will be here you’ll add those other
    methods. This will be discussed later in the “Tips” section.'
  id: totrans-split-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After setting those points it will run a scan through your source files to
    find all the localization calls. After every scan PoEdit will display a summary
    of what was found and what was removed from the source files. New entries will
    fed empty into the translation table, and you’ll start typing in the localized
    versions of those strings. Save it and a .mo file will be (re)compiled into the
    same folder and ta-dah: your project is internationalized.'
  id: totrans-split-305
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Translating strings
  id: totrans-split-306
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As you may have noticed before, there are two main types of localized strings:
    simple ones and those with plural forms. The first ones have simply two boxes:
    source and localized string. The source string cannot be modified as Gettext/Poedit
    do not include the powers to alter your source files - you should change the source
    itself and rescan the files. Tip: you may right-click a translation line and it
    will hint you with the source files and lines where that string is being used.
    On the other hand, plural form strings include two boxes to show the two source
    strings, and tabs so you can configure the different final forms.'
  id: totrans-split-307
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever you change your sources and need to update the translations, just
    hit Refresh and Poedit will rescan the code, removing non-existent entries, merging
    the ones that changed and adding new ones. It may also try to guess some translations,
    based on other ones you did. Those guesses and the changed entries will receive
    a “Fuzzy” marker, indicating it needs review, appearing golden in the list. It
    is also useful if you have a translation team and someone tries to write something
    they are not sure about: just mark Fuzzy, and someone else will review later.'
  id: totrans-split-308
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it is advised to leave “View > Untranslated entries first” marked,
    as it will help you *a lot* to not forget any entry. From that menu, you can also
    open parts of the UI that allow you to leave contextual information for translators
    if needed.
  id: totrans-split-309
  prefs: []
  type: TYPE_NORMAL
- en: Tips & Tricks
  id: totrans-split-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Possible caching issues
  id: totrans-split-311
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you are running PHP as a module on Apache (`mod_php`), you might face issues
    with the `.mo` file being cached. It happens the first time it is read, and then,
    to update it, you might need to restart the server. On Nginx and PHP5 it usually
    takes only a couple of page refreshes to refresh the translation cache, and on
    PHP7 it is rarely needed.
  id: totrans-split-312
  prefs: []
  type: TYPE_NORMAL
- en: Additional helper functions
  id: totrans-split-313
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As preferred by many people, it is easier to use `_()` instead of `gettext()`.
    Many custom i18n libraries from frameworks use something similar to `t()` as well,
    to make translated code shorter. However, that is the only function that sports
    a shortcut. You might want to add in your project some others, such as `__()`
    or `_n()` for `ngettext()`, or maybe a fancy `_r()` that would join `gettext()`
    and `sprintf()` calls. Other libraries, such as [php-gettext’s Gettext](https://github.com/php-gettext/Gettext)
    also provide helper functions like these.
  id: totrans-split-314
  prefs: []
  type: TYPE_NORMAL
- en: 'In those cases, you’ll need to instruct the Gettext utility on how to extract
    the strings from those new functions. Don’t be afraid; it is very easy. It is
    just a field in the `.po` file, or a Settings screen on Poedit. In the editor,
    that option is inside “Catalog > Properties > Source keywords”. Remember: Gettext
    already knows the default functions for many languages, so don’t be afraid if
    that list seems empty. You need to include there the specifications of those new
    functions, following [a specific format](https://www.gnu.org/software/gettext/manual/gettext.html#Language-specific-options):'
  id: totrans-split-315
  prefs: []
  type: TYPE_NORMAL
- en: if you create something like `t()` that simply returns the translation for a
    string, you can specify it as `t`. Gettext will know the only function argument
    is the string to be translated;
  id: totrans-split-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'if the function has more than one argument, you can specify in which one the
    first string is - and if needed, the plural form as well. For instance, if we
    call our function like this: `__(''one user'', ''%d users'', $number)`, the specification
    would be `__:1,2`, meaning the first form is the first argument, and the second
    form is the second argument. If your number comes as the first argument instead,
    the spec would be `__:2,3`, indicating the first form is the second argument,
    and so on.'
  id: totrans-split-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After including those new rules in the `.po` file, a new scan will bring in
    your new strings just as easy as before.
  id: totrans-split-318
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-split-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dependency Injection
  id: totrans-split-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From [Wikipedia](https://wikipedia.org/wiki/Dependency_injection):'
  id: totrans-split-321
  prefs: []
  type: TYPE_NORMAL
- en: Dependency injection is a software design pattern that allows the removal of
    hard-coded dependencies and makes it possible to change them, whether at run-time
    or compile-time.
  id: totrans-split-322
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This quote makes the concept sound much more complicated than it actually is.
    Dependency Injection is providing a component with its dependencies either through
    constructor injection, method calls or the setting of properties. It is that simple.
  id: totrans-split-323
  prefs: []
  type: TYPE_NORMAL
- en: Basic Concept
  id: totrans-split-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can demonstrate the concept with a simple, yet naive example.
  id: totrans-split-325
  prefs: []
  type: TYPE_NORMAL
- en: Here we have a `Database` class that requires an adapter to speak to the database.
    We instantiate the adapter in the constructor and create a hard dependency. This
    makes testing difficult and means the `Database` class is very tightly coupled
    to the adapter.
  id: totrans-split-326
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-split-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This code can be refactored to use Dependency Injection and therefore loosen
    the dependency. Here, we inject the dependency in a constructor and use the [constructor
    property promotion](https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion)
    so it is available as a property across the class:'
  id: totrans-split-328
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-split-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now we are giving the `Database` class its dependency rather than creating it
    itself. We could even create a method that would accept an argument of the dependency
    and set it that way, or if the `$adapter` property was `public` we could set it
    directly.
  id: totrans-split-330
  prefs: []
  type: TYPE_NORMAL
- en: Complex Problem
  id: totrans-split-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have ever read about Dependency Injection then you have probably seen
    the terms *“Inversion of Control”* or *“Dependency Inversion Principle”*. These
    are the complex problems that Dependency Injection solves.
  id: totrans-split-332
  prefs: []
  type: TYPE_NORMAL
- en: Inversion of Control
  id: totrans-split-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Inversion of Control is as it says, “inverting the control” of a system by keeping
    organizational control entirely separate from our objects. In terms of Dependency
    Injection, this means loosening our dependencies by controlling and instantiating
    them elsewhere in the system.
  id: totrans-split-334
  prefs: []
  type: TYPE_NORMAL
- en: For years, PHP frameworks have been achieving Inversion of Control, however,
    the question became, which part of control are we inverting, and where to? For
    example, MVC frameworks would generally provide a super object or base controller
    that other controllers must extend to gain access to its dependencies. This **is**
    Inversion of Control, however, instead of loosening dependencies, this method
    simply moved them.
  id: totrans-split-335
  prefs: []
  type: TYPE_NORMAL
- en: Dependency Injection allows us to more elegantly solve this problem by only
    injecting the dependencies we need, when we need them, without the need for any
    hard coded dependencies at all.
  id: totrans-split-336
  prefs: []
  type: TYPE_NORMAL
- en: S.O.L.I.D.
  id: totrans-split-337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Single Responsibility Principle
  id: totrans-split-338
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Single Responsibility Principle is about actors and high-level architecture.
    It states that “A class should have only one reason to change.” This means that
    every class should *only* have responsibility over a single part of the functionality
    provided by the software. The largest benefit of this approach is that it enables
    improved code *reusability*. By designing our class to do just one thing, we can
    use (or re-use) it in any other program without changing it.
  id: totrans-split-339
  prefs: []
  type: TYPE_NORMAL
- en: Open/Closed Principle
  id: totrans-split-340
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Open/Closed Principle is about class design and feature extensions. It states
    that “Software entities (classes, modules, functions, etc.) should be open for
    extension, but closed for modification.” This means that we should design our
    modules, classes and functions in a way that when a new functionality is needed,
    we should not modify our existing code but rather write new code that will be
    used by existing code. Practically speaking, this means that we should write classes
    that implement and adhere to *interfaces*, then type-hint against those interfaces
    instead of specific classes.
  id: totrans-split-341
  prefs: []
  type: TYPE_NORMAL
- en: The largest benefit of this approach is that we can very easily extend our code
    with support for something new without having to modify existing code, meaning
    that we can reduce QA time, and the risk for negative impact to the application
    is substantially reduced. We can deploy new code, faster, and with more confidence.
  id: totrans-split-342
  prefs: []
  type: TYPE_NORMAL
- en: Liskov Substitution Principle
  id: totrans-split-343
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Liskov Substitution Principle is about subtyping and inheritance. It states
    that “Child classes should never break the parent class’ type definitions.” Or,
    in Robert C. Martin’s words, “Subtypes must be substitutable for their base types.”
  id: totrans-split-344
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we have a `FileInterface` interface which defines an `embed()`
    method, and we have `Audio` and `Video` classes which both implement the `FileInterface`
    interface, then we can expect that the usage of the `embed()` method will always
    do the thing that we intend. If we later create a `PDF` class or a `Gist` class
    which implement the `FileInterface` interface, we will already know and understand
    what the `embed()` method will do. The largest benefit of this approach is that
    we have the ability to build flexible and easily-configurable programs, because
    when we change one object of a type (e.g., `FileInterface`) to another we don’t
    need to change anything else in our program.
  id: totrans-split-345
  prefs: []
  type: TYPE_NORMAL
- en: Interface Segregation Principle
  id: totrans-split-346
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Interface Segregation Principle (ISP) is about *business-logic-to-clients*
    communication. It states that “No client should be forced to depend on methods
    it does not use.” This means that instead of having a single monolithic interface
    that all conforming classes need to implement, we should instead provide a set
    of smaller, concept-specific interfaces that a conforming class implements one
    or more of.
  id: totrans-split-347
  prefs: []
  type: TYPE_NORMAL
- en: For example, a `Car` or `Bus` class would be interested in a `steeringWheel()`
    method, but a `Motorcycle` or `Tricycle` class would not. Conversely, a `Motorcycle`
    or `Tricycle` class would be interested in a `handlebars()` method, but a `Car`
    or `Bus` class would not. There is no need to have all of these types of vehicles
    implement support for both `steeringWheel()` as well as `handlebars()`, so we
    should break-apart the source interface.
  id: totrans-split-348
  prefs: []
  type: TYPE_NORMAL
- en: Dependency Inversion Principle
  id: totrans-split-349
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Dependency Inversion Principle is about removing hard-links between discrete
    classes so that new functionality can be leveraged by passing a different class.
    It states that one should *“Depend on Abstractions. Do not depend on concretions.”*.
    Put simply, this means our dependencies should be interfaces/contracts or abstract
    classes rather than concrete implementations. We can easily refactor the above
    example to follow this principle.
  id: totrans-split-350
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-split-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: There are several benefits to the `Database` class now depending on an interface
    rather than a concretion.
  id: totrans-split-352
  prefs: []
  type: TYPE_NORMAL
- en: Consider that we are working in a team and the adapter is being worked on by
    a colleague. In our first example, we would have to wait for said colleague to
    finish the adapter before we could properly mock it for our unit tests. Now that
    the dependency is an interface/contract we can happily mock that interface knowing
    that our colleague will build the adapter based on that contract.
  id: totrans-split-353
  prefs: []
  type: TYPE_NORMAL
- en: An even bigger benefit to this method is that our code is now much more scalable.
    If a year down the line we decide that we want to migrate to a different type
    of database, we can write an adapter that implements the original interface and
    injects that instead, no more refactoring would be required as we can ensure that
    the adapter follows the contract set by the interface.
  id: totrans-split-354
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  id: totrans-split-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing you should understand about Dependency Injection Containers
    is that they are not the same thing as Dependency Injection. A container is a
    convenience utility that helps us implement Dependency Injection, however, they
    can be and often are misused to implement an anti-pattern, Service Location. Injecting
    a DI container as a Service Locator in to your classes arguably creates a harder
    dependency on the container than the dependency you are replacing. It also makes
    your code much less transparent and ultimately harder to test.
  id: totrans-split-356
  prefs: []
  type: TYPE_NORMAL
- en: Most modern frameworks have their own Dependency Injection Container that allows
    you to wire your dependencies together through configuration. What this means
    in practice is that you can write application code that is as clean and de-coupled
    as the framework it is built on.
  id: totrans-split-357
  prefs: []
  type: TYPE_NORMAL
- en: Databases
  id: totrans-split-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many times your PHP code will use a database to persist information. You have
    a few options to connect and interact with your database. The recommended option
    **until PHP 5.1.0** was to use native drivers such as [mysqli](https://www.php.net/mysqli),
    [pgsql](https://www.php.net/pgsql), [mssql](https://www.php.net/mssql), etc.
  id: totrans-split-359
  prefs: []
  type: TYPE_NORMAL
- en: Native drivers are great if you are only using *one* database in your application,
    but if, for example, you are using MySQL and a little bit of MSSQL, or you need
    to connect to an Oracle database, then you will not be able to use the same drivers.
    You’ll need to learn a brand new API for each database — and that can get silly.
  id: totrans-split-360
  prefs: []
  type: TYPE_NORMAL
- en: MySQL Extension
  id: totrans-split-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The [mysql](https://www.php.net/mysqli) extension for PHP is incredibly old
    and has been superseded by two other extensions:'
  id: totrans-split-362
  prefs: []
  type: TYPE_NORMAL
- en: Not only did development stop long ago on [mysql](https://www.php.net/mysqli),
    but it **has been [officially removed in PHP 7.0](https://www.php.net/manual/migration70.removed-exts-sapis.php)**.
  id: totrans-split-363
  prefs: []
  type: TYPE_NORMAL
- en: To save digging into your `php.ini` settings to see which module you are using,
    one option is to search for `mysql_*` in your editor of choice. If any functions
    such as `mysql_connect()` and `mysql_query()` show up, then `mysql` is in use.
  id: totrans-split-364
  prefs: []
  type: TYPE_NORMAL
- en: Even if you are not using PHP 7.x or later yet, failing to consider this upgrade
    as soon as possible will lead to greater hardship when the PHP upgrade does come
    about. The best option is to replace mysql usage with [mysqli](https://www.php.net/mysqli)
    or [PDO](https://www.php.net/pdo) in your applications within your own development
    schedules so you won’t be rushed later on.
  id: totrans-split-365
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are upgrading from [mysql](https://www.php.net/mysqli) to [mysqli](https://www.php.net/mysqli),
    beware lazy upgrade guides that suggest you can simply find and replace `mysql_*`
    with `mysqli_*`. Not only is that a gross oversimplification, it misses out on
    the advantages that mysqli provides, such as parameter binding, which is also
    offered in [PDO](https://www.php.net/pdo).**'
  id: totrans-split-366
  prefs: []
  type: TYPE_NORMAL
- en: PDO Extension
  id: totrans-split-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PDO](https://www.php.net/pdo) is a database connection abstraction library
    — built into PHP since 5.1.0 — that provides a common interface to talk with many
    different databases. For example, you can use basically identical code to interface
    with MySQL or SQLite:'
  id: totrans-split-368
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-split-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: PDO will not translate your SQL queries or emulate missing features; it is purely
    for connecting to multiple types of database with the same API.
  id: totrans-split-370
  prefs: []
  type: TYPE_NORMAL
- en: More importantly, `PDO` allows you to safely inject foreign input (e.g. IDs)
    into your SQL queries without worrying about database SQL injection attacks. This
    is possible using PDO statements and bound parameters.
  id: totrans-split-371
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s assume a PHP script receives a numeric ID as a query parameter. This
    ID should be used to fetch a user record from a database. This is the `wrong`
    way to do this:'
  id: totrans-split-372
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-split-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This is terrible code. You are inserting a raw query parameter into a SQL query.
    This will get you hacked in a heartbeat, using a practice called [SQL Injection](https://web.archive.org/web/20210413233627/http://wiki.hashphp.org/Validation).
    Just imagine if a hacker passes in an inventive `id` parameter by calling a URL
    like `http://domain.com/?id=1%3BDELETE+FROM+users`. This will set the `$_GET['id']`
    variable to `1;DELETE FROM users` which will delete all of your users! Instead,
    you should sanitize the ID input using PDO bound parameters.
  id: totrans-split-374
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-split-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This is correct code. It uses a bound parameter on a PDO statement. This escapes
    the foreign input ID before it is introduced to the database preventing potential
    SQL injection attacks.
  id: totrans-split-376
  prefs: []
  type: TYPE_NORMAL
- en: For writes, such as INSERT or UPDATE, it’s especially critical to still [filter
    your data](#data_filtering) first and sanitize it for other things (removal of
    HTML tags, JavaScript, etc). PDO will only sanitize it for SQL, not for your application.
  id: totrans-split-377
  prefs: []
  type: TYPE_NORMAL
- en: You should also be aware that database connections use up resources and it was
    not unheard-of to have resources exhausted if connections were not implicitly
    closed, however this was more common in other languages. Using PDO you can implicitly
    close the connection by destroying the object by ensuring all remaining references
    to it are deleted, i.e. set to NULL. If you don’t do this explicitly, PHP will
    automatically close the connection when your script ends - unless of course you
    are using persistent connections.
  id: totrans-split-378
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with Databases
  id: totrans-split-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When developers first start to learn PHP, they often end up mixing their database
    interaction up with their presentation logic, using code that might look like
    this:'
  id: totrans-split-380
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-split-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This is bad practice for all sorts of reasons, mainly that it’s hard to debug,
    hard to test, hard to read and it is going to output a lot of fields if you don’t
    put a limit on there.
  id: totrans-split-382
  prefs: []
  type: TYPE_NORMAL
- en: While there are many other solutions to doing this - depending on if you prefer
    [OOP](/#object-oriented-programming) or [functional programming](/#functional-programming)
    - there must be some element of separation.
  id: totrans-split-383
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the most basic step:'
  id: totrans-split-384
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-split-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: That is a good start. Put those two items in two different files and you’ve
    got some clean separation.
  id: totrans-split-386
  prefs: []
  type: TYPE_NORMAL
- en: Create a class to place that method in and you have a “Model”. Create a simple
    `.php` file to put the presentation logic in and you have a “View”, which is very
    nearly [MVC](https://code.tutsplus.com/tutorials/mvc-for-noobs--net-10488) - a
    common OOP architecture for most [frameworks](/#frameworks).
  id: totrans-split-387
  prefs: []
  type: TYPE_NORMAL
- en: '**foo.php**'
  id: totrans-split-388
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-split-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '**models/FooModel.php**'
  id: totrans-split-390
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-split-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '**views/foo-list.php**'
  id: totrans-split-392
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-split-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This is essentially the same as what most modern frameworks are doing, albeit
    a little more manual. You might not need to do all of that every time, but mixing
    together too much presentation logic and database interaction can be a real problem
    if you ever want to [unit-test](/#unit-testing) your application.
  id: totrans-split-394
  prefs: []
  type: TYPE_NORMAL
- en: Abstraction Layers
  id: totrans-split-395
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many frameworks provide their own abstraction layer which may or may not sit
    on top of [PDO](https://www.php.net/book.pdo). These will often emulate features
    for one database system that is missing from another by wrapping your queries
    in PHP methods, giving you actual database abstraction instead of just the connection
    abstraction that PDO provides. This will of course add a little overhead, but
    if you are building a portable application that needs to work with MySQL, PostgreSQL
    and SQLite then a little overhead will be worth it for the sake of code cleanliness.
  id: totrans-split-396
  prefs: []
  type: TYPE_NORMAL
- en: 'Some abstraction layers have been built using the [PSR-0](https://www.php-fig.org/psr/psr-0/)
    or [PSR-4](https://www.php-fig.org/psr/psr-4/) namespace standards so can be installed
    in any application you like:'
  id: totrans-split-397
  prefs: []
  type: TYPE_NORMAL
- en: Templating
  id: totrans-split-398
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Templates provide a convenient way of separating your controller and domain
    logic from your presentation logic. Templates typically contain the HTML of your
    application, but may also be used for other formats, such as XML. Templates are
    often referred to as “views”, which make up **part of** the second component of
    the [model–view–controller](/pages/Design-Patterns.html#model-view-controller)
    (MVC) software architecture pattern.
  id: totrans-split-399
  prefs: []
  type: TYPE_NORMAL
- en: Benefits
  id: totrans-split-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main benefit to using templates is the clear separation they create between
    the presentation logic and the rest of your application. Templates have the sole
    responsibility of displaying formatted content. They are not responsible for data
    lookup, persistence or other more complex tasks. This leads to cleaner, more readable
    code which is especially helpful in a team environment where developers work on
    the server-side code (controllers, models) and designers work on the client-side
    code (markup).
  id: totrans-split-401
  prefs: []
  type: TYPE_NORMAL
- en: Templates also improve the organization of presentation code. Templates are
    typically placed in a “views” folder, each defined within a single file. This
    approach encourages code reuse where larger blocks of code are broken into smaller,
    reusable pieces, often called partials. For example, your site header and footer
    can each be defined as templates, which are then included before and after each
    page template.
  id: totrans-split-402
  prefs: []
  type: TYPE_NORMAL
- en: Finally, depending on the library you use, templates can offer more security
    by automatically escaping user-generated content. Some libraries even offer sand-boxing,
    where template designers are only given access to white-listed variables and functions.
  id: totrans-split-403
  prefs: []
  type: TYPE_NORMAL
- en: Plain PHP Templates
  id: totrans-split-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Plain PHP templates are simply templates that use native PHP code. They are
    a natural choice since PHP is actually a template language itself. That simply
    means that you can combine PHP code within other code, like HTML. This is beneficial
    to PHP developers as there is no new syntax to learn, they know the functions
    available to them, and their code editors already have PHP syntax highlighting
    and auto-completion built-in. Further, plain PHP templates tend to be very fast
    as no compiling stage is required.
  id: totrans-split-405
  prefs: []
  type: TYPE_NORMAL
- en: Every modern PHP framework employs some kind of template system, most of which
    use plain PHP by default. Outside of frameworks, libraries like [Plates](https://platesphp.com/)
    or [Aura.View](https://github.com/auraphp/Aura.View) make working with plain PHP
    templates easier by offering modern template functionality such as inheritance,
    layouts and extensions.
  id: totrans-split-406
  prefs: []
  type: TYPE_NORMAL
- en: Simple example of a plain PHP template
  id: totrans-split-407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the [Plates](https://platesphp.com/) library.
  id: totrans-split-408
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-split-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Example of plain PHP templates using inheritance
  id: totrans-split-410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the [Plates](https://platesphp.com/) library.
  id: totrans-split-411
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-split-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-split-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Compiled Templates
  id: totrans-split-414
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While PHP has evolved into a mature, object oriented language, it [hasn’t improved
    much](http://fabien.potencier.org/templating-engines-in-php.html) as a templating
    language. Compiled templates, like [Twig](https://twig.symfony.com/), [Brainy](https://github.com/box/brainy),
    or [Smarty](https://www.smarty.net/)*, fill this void by offering a new syntax
    that has been geared specifically to templating. From automatic escaping, to inheritance
    and simplified control structures, compiled templates are designed to be easier
    to write, cleaner to read and safer to use. Compiled templates can even be shared
    across different languages, [Mustache](https://mustache.github.io/) being a good
    example of this. Since these templates must be compiled there is a slight performance
    hit, however this is very minimal when proper caching is used.
  id: totrans-split-415
  prefs: []
  type: TYPE_NORMAL
- en: '**While Smarty offers automatic escaping, this feature is NOT enabled by default.*'
  id: totrans-split-416
  prefs: []
  type: TYPE_NORMAL
- en: Simple example of a compiled template
  id: totrans-split-417
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the [Twig](https://twig.symfony.com/) library.
  id: totrans-split-418
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-split-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Example of compiled templates using inheritance
  id: totrans-split-420
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the [Twig](https://twig.symfony.com/) library.
  id: totrans-split-421
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-split-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-split-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Further Reading
  id: totrans-split-424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Articles & Tutorials
  id: totrans-split-425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Libraries
  id: totrans-split-426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Errors
  id: totrans-split-427
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In many “exception-heavy” programming languages, whenever anything goes wrong
    an exception will be thrown. This is certainly a viable way to do things, but
    PHP is an “exception-light” programming language. While it does have exceptions
    and more of the core is starting to use them when working with objects, most of
    PHP itself will try to keep processing regardless of what happens, unless a fatal
    error occurs.
  id: totrans-split-428
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  id: totrans-split-429
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-split-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'This is only a notice error, and PHP will happily carry on. This can be confusing
    for those coming from “exception-heavy” languages, because referencing a missing
    variable in Python for example will throw an exception:'
  id: totrans-split-431
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-split-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The only real difference is that Python will freak out over any small thing,
    so that developers can be super sure any potential issue or edge-case is caught,
    whereas PHP will keep on processing unless something extreme happens, at which
    point it will throw an error and report it.
  id: totrans-split-433
  prefs: []
  type: TYPE_NORMAL
- en: Error Severity
  id: totrans-split-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PHP has several levels of error severity. The three most common types of messages
    are errors, notices and warnings. These have different levels of severity; `E_ERROR`,
    `E_NOTICE`, and `E_WARNING`. Errors are fatal run-time errors and are usually
    caused by faults in your code and need to be fixed as they’ll cause PHP to stop
    executing. Notices are advisory messages caused by code that may or may not cause
    problems during the execution of the script, execution is not halted. Warnings
    are non-fatal errors, execution of the script will not be halted.
  id: totrans-split-435
  prefs: []
  type: TYPE_NORMAL
- en: Another type of error message reported at compile time are `E_STRICT` messages.
    These messages are used to suggest changes to your code to help ensure best interoperability
    and forward compatibility with upcoming versions of PHP.
  id: totrans-split-436
  prefs: []
  type: TYPE_NORMAL
- en: Changing PHP’s Error Reporting Behaviour
  id: totrans-split-437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Error Reporting can be changed by using PHP settings and/or PHP function calls.
    Using the built in PHP function `error_reporting()` you can set the level of errors
    for the duration of the script execution by passing one of the predefined error
    level constants, meaning if you only want to see Errors and Warnings - but not
    Notices - then you can configure that:'
  id: totrans-split-438
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-split-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: You can also control whether or not errors are displayed to the screen (good
    for development) or hidden, and logged (good for production). For more information
    on this check out the [Error Reporting](/#error_reporting) section.
  id: totrans-split-440
  prefs: []
  type: TYPE_NORMAL
- en: Inline Error Suppression
  id: totrans-split-441
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also tell PHP to suppress specific errors with the Error Control Operator
    `@`. You put this operator at the beginning of an expression, and any error that’s
    a direct result of the expression is silenced.
  id: totrans-split-442
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-split-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'This will output `$foo[''bar'']` if it exists, but will simply return a null
    and print nothing if the variable `$foo` or `''bar''` key does not exist. Without
    the error control operator, this expression could create a `PHP Notice: Undefined
    variable: foo` or `PHP Notice: Undefined index: bar` error.'
  id: totrans-split-444
  prefs: []
  type: TYPE_NORMAL
- en: This might seem like a good idea, but there are a few undesirable tradeoffs.
    PHP handles expressions using an `@` in a less performant way than expressions
    without an `@`. Premature optimization may be the root of all programming arguments,
    but if performance is particularly important for your application/library it’s
    important to understand the error control operator’s performance implications.
  id: totrans-split-445
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, the error control operator **completely** swallows the error. The
    error is not displayed, and the error is not sent to the error log. Also, stock/production
    PHP systems have no way to turn off the error control operator. While you may
    be correct that the error you’re seeing is harmless, a different, less harmless
    error will be just as silent.
  id: totrans-split-446
  prefs: []
  type: TYPE_NORMAL
- en: 'If there’s a way to avoid the error suppression operator, you should consider
    it. For example, our code above could be rewritten like this:'
  id: totrans-split-447
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-split-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: One instance where error suppression might make sense is where `fopen()` fails
    to find a file to load. You could check for the existence of the file before you
    try to load it, but if the file is deleted after the check and before the `fopen()`
    (which might sound impossible, but it can happen) then `fopen()` will return false
    *and* throw an error. This is potentially something PHP should resolve, but is
    one case where error suppression might seem like the only valid solution.
  id: totrans-split-449
  prefs: []
  type: TYPE_NORMAL
- en: Earlier we mentioned there’s no way in a stock PHP system to turn off the error
    control operator. However, [Xdebug](https://xdebug.org/docs/basic) has an `xdebug.scream`
    ini setting which will disable the error control operator. You can set this via
    your `php.ini` file with the following.
  id: totrans-split-450
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-split-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: You can also set this value at runtime with the `ini_set` function
  id: totrans-split-452
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-split-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: This is most useful when you’re debugging code and suspect an informative error
    is suppressed. Use scream with care, and as a temporary debugging tool. There’s
    lots of PHP library code that may not work with the error control operator disabled.
  id: totrans-split-454
  prefs: []
  type: TYPE_NORMAL
- en: ErrorException
  id: totrans-split-455
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PHP is perfectly capable of being an “exception-heavy” programming language,
    and only requires a few lines of code to make the switch. Basically you can throw
    your “errors” as “exceptions” using the `ErrorException` class, which extends
    the `Exception` class.
  id: totrans-split-456
  prefs: []
  type: TYPE_NORMAL
- en: This is a common practice implemented by a large number of modern frameworks
    such as Symfony and Laravel. In debug mode *(or dev mode)* both of these frameworks
    will display a nice and clean *stack trace*.
  id: totrans-split-457
  prefs: []
  type: TYPE_NORMAL
- en: There are also some packages available for better error and exception handling
    and reporting. Like [Whoops!](https://filp.github.io/whoops/), which comes with
    the default installation of Laravel and can be used in any framework as well.
  id: totrans-split-458
  prefs: []
  type: TYPE_NORMAL
- en: By throwing errors as exceptions in development you can handle them better than
    the usual result, and if you see an exception during development you can wrap
    it in a catch statement with specific instructions on how to handle the situation.
    Each exception you catch instantly makes your application that little bit more
    robust.
  id: totrans-split-459
  prefs: []
  type: TYPE_NORMAL
- en: More information on this and details on how to use `ErrorException` with error
    handling can be found at [ErrorException Class](https://www.php.net/class.errorexception).
  id: totrans-split-460
  prefs: []
  type: TYPE_NORMAL
- en: Exceptions
  id: totrans-split-461
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Exceptions are a standard part of most popular programming languages, but they
    are often overlooked by PHP programmers. Languages like Ruby are extremely Exception
    heavy, so whenever something goes wrong such as a HTTP request failing, or a DB
    query goes wrong, or even if an image asset could not be found, Ruby (or the gems
    being used) will throw an exception to the screen meaning you instantly know there
    is a mistake.
  id: totrans-split-462
  prefs: []
  type: TYPE_NORMAL
- en: PHP itself is fairly lax with this, and a call to `file_get_contents()` will
    usually just get you a `FALSE` and a warning. Many older PHP frameworks like CodeIgniter
    will just return a false, log a message to their proprietary logs and maybe let
    you use a method like `$this->upload->get_error()` to see what went wrong. The
    problem here is that you have to go looking for a mistake and check the docs to
    see what the error method is for this class, instead of having it made extremely
    obvious.
  id: totrans-split-463
  prefs: []
  type: TYPE_NORMAL
- en: 'Another problem is when classes automatically throw an error to the screen
    and exit the process. When you do this you stop another developer from being able
    to dynamically handle that error. Exceptions should be thrown to make a developer
    aware of an error; they then can choose how to handle this. E.g.:'
  id: totrans-split-464
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-split-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: SPL Exceptions
  id: totrans-split-466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The generic `Exception` class provides very little debugging context for the
    developer; however, to remedy this, it is possible to create a specialized `Exception`
    type by sub-classing the generic `Exception` class:'
  id: totrans-split-467
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-split-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This means you can add multiple catch blocks and handle different Exceptions
    differently. This can lead to the creation of a *lot* of custom Exceptions, some
    of which could have been avoided using the SPL Exceptions provided in the [SPL
    extension](/#standard_php_library).
  id: totrans-split-469
  prefs: []
  type: TYPE_NORMAL
- en: If for example you use the `__call()` Magic Method and an invalid method is
    requested then instead of throwing a standard Exception which is vague, or creating
    a custom Exception just for that, you could just `throw new BadMethodCallException;`.
  id: totrans-split-470
  prefs: []
  type: TYPE_NORMAL
- en: Web Application Security
  id: totrans-split-471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is very important for every PHP developer to learn [the basics of web application
    security](https://paragonie.com/blog/2015/08/gentle-introduction-application-security),
    which can be broken down into a handful of broad topics:'
  id: totrans-split-472
  prefs: []
  type: TYPE_NORMAL
- en: Code-data separation.
  id: totrans-split-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When data is executed as code, you get SQL Injection, Cross-Site Scripting,
    Local/Remote File Inclusion, etc.
  id: totrans-split-474
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When code is printed as data, you get information leaks (source code disclosure
    or, in the case of C programs, enough information to bypass [ASLR](https://www.techtarget.com/searchsecurity/definition/address-space-layout-randomization-ASLR)).
  id: totrans-split-475
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Application logic.
  id: totrans-split-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Missing authentication or authorization controls.
  id: totrans-split-477
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Input validation.
  id: totrans-split-478
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Operating environment.
  id: totrans-split-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP versions.
  id: totrans-split-480
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Third party libraries.
  id: totrans-split-481
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The operating system.
  id: totrans-split-482
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptography weaknesses.
  id: totrans-split-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are bad people ready and willing to exploit your web application. It
    is important that you take necessary precautions to harden your web application’s
    security. Luckily, the fine folks at [The Open Web Application Security Project](https://www.owasp.org/)
    (OWASP) have compiled a comprehensive list of known security issues and methods
    to protect yourself against them. This is a must read for the security-conscious
    developer. [Survive The Deep End: PHP Security](https://phpsecurity.readthedocs.io/en/latest/index.html)
    by Padraic Brady is also another good web application security guide for PHP.'
  id: totrans-split-484
  prefs: []
  type: TYPE_NORMAL
- en: Password Hashing
  id: totrans-split-485
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Eventually everyone builds a PHP application that relies on user login. Usernames
    and passwords are stored in a database and later used to authenticate users upon
    login.
  id: totrans-split-486
  prefs: []
  type: TYPE_NORMAL
- en: It is important that you properly [*hash*](https://wikipedia.org/wiki/Cryptographic_hash_function)
    passwords before storing them. Hashing and encrypting are [two very different
    things](https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded)
    that often get confused.
  id: totrans-split-487
  prefs: []
  type: TYPE_NORMAL
- en: Hashing is an irreversible, one-way function. This produces a fixed-length string
    that cannot be feasibly reversed. This means you can compare a hash against another
    to determine if they both came from the same source string, but you cannot determine
    the original string. If passwords are not hashed and your database is accessed
    by an unauthorized third-party, all user accounts are now compromised.
  id: totrans-split-488
  prefs: []
  type: TYPE_NORMAL
- en: Unlike hashing, encryption is reversible (provided you have the key). Encryption
    is useful in other areas, but is a poor strategy for securely storing passwords.
  id: totrans-split-489
  prefs: []
  type: TYPE_NORMAL
- en: Passwords should also be individually [*salted*](https://wikipedia.org/wiki/Salt_(cryptography))
    by adding a random string to each password before hashing. This prevents dictionary
    attacks and the use of “rainbow tables” (a reverse list of cryptographic hashes
    for common passwords.)
  id: totrans-split-490
  prefs: []
  type: TYPE_NORMAL
- en: Hashing and salting are vital as often users use the same password for multiple
    services and password quality can be poor.
  id: totrans-split-491
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, you should use [a specialized *password hashing* algorithm](https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016)
    rather than fast, general-purpose cryptographic hash function (e.g. SHA256). The
    short list of acceptable password hashing algorithms (as of June 2018) to use
    are:'
  id: totrans-split-492
  prefs: []
  type: TYPE_NORMAL
- en: Argon2 (available in PHP 7.2 and newer)
  id: totrans-split-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scrypt
  id: totrans-split-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bcrypt** (PHP provides this one for you; see below)'
  id: totrans-split-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PBKDF2 with HMAC-SHA256 or HMAC-SHA512
  id: totrans-split-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fortunately, nowadays PHP makes this easy.
  id: totrans-split-497
  prefs: []
  type: TYPE_NORMAL
- en: '**Hashing passwords with `password_hash`**'
  id: totrans-split-498
  prefs: []
  type: TYPE_NORMAL
- en: In PHP 5.5 `password_hash()` was introduced. At this time it is using BCrypt,
    the strongest algorithm currently supported by PHP. It will be updated in the
    future to support more algorithms as needed though. The `password_compat` library
    was created to provide forward compatibility for PHP >= 5.3.7.
  id: totrans-split-499
  prefs: []
  type: TYPE_NORMAL
- en: Below we hash a string, and then check the hash against a new string. Because
    our two source strings are different (‘secret-password’ vs. ‘bad-password’) this
    login will fail.
  id: totrans-split-500
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-split-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '`password_hash()` takes care of password salting for you. The salt is stored,
    along with the algorithm and “cost”, as part of the hash. `password_verify()`
    extracts this to determine how to check the password, so you don’t need a separate
    database field to store your salts.'
  id: totrans-split-502
  prefs: []
  type: TYPE_NORMAL
- en: Data Filtering
  id: totrans-split-503
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Never ever (ever) trust foreign input introduced to your PHP code. Always sanitize
    and validate foreign input before using it in code. The `filter_var()` and `filter_input()`
    functions can sanitize text and validate text formats (e.g. email addresses).
  id: totrans-split-504
  prefs: []
  type: TYPE_NORMAL
- en: 'Foreign input can be anything: `$_GET` and `$_POST` form input data, some values
    in the `$_SERVER` superglobal, and the HTTP request body via `fopen(''php://input'',
    ''r'')`. Remember, foreign input is not limited to form data submitted by the
    user. Uploaded and downloaded files, session values, cookie data, and data from
    third-party web services are foreign input, too.'
  id: totrans-split-505
  prefs: []
  type: TYPE_NORMAL
- en: While foreign data can be stored, combined, and accessed later, it is still
    foreign input. Every time you process, output, concatenate, or include data in
    your code, ask yourself if the data is filtered properly and can it be trusted.
  id: totrans-split-506
  prefs: []
  type: TYPE_NORMAL
- en: Data may be *filtered* differently based on its purpose. For example, when unfiltered
    foreign input is passed into HTML page output, it can execute HTML and JavaScript
    on your site! This is known as Cross-Site Scripting (XSS) and can be a very dangerous
    attack. One way to avoid XSS is to sanitize all user-generated data before outputting
    it to your page by removing HTML tags with the `strip_tags()` function or escaping
    characters with special meaning into their respective HTML entities with the `htmlentities()`
    or `htmlspecialchars()` functions.
  id: totrans-split-507
  prefs: []
  type: TYPE_NORMAL
- en: Another example is passing options to be executed on the command line. This
    can be extremely dangerous (and is usually a bad idea), but you can use the built-in
    `escapeshellarg()` function to sanitize the executed command’s arguments.
  id: totrans-split-508
  prefs: []
  type: TYPE_NORMAL
- en: One last example is accepting foreign input to determine a file to load from
    the filesystem. This can be exploited by changing the filename to a file path.
    You need to remove `"/"`, `"../"`, [null bytes](https://www.php.net/security.filesystem.nullbytes),
    or other characters from the file path so it can’t load hidden, non-public, or
    sensitive files.
  id: totrans-split-509
  prefs: []
  type: TYPE_NORMAL
- en: Sanitization
  id: totrans-split-510
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sanitization removes (or escapes) illegal or unsafe characters from foreign
    input.
  id: totrans-split-511
  prefs: []
  type: TYPE_NORMAL
- en: For example, you should sanitize foreign input before including the input in
    HTML or inserting it into a raw SQL query. When you use bound parameters with
    [PDO](#databases), it will sanitize the input for you.
  id: totrans-split-512
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes it is required to allow some safe HTML tags in the input when including
    it in the HTML page. This is very hard to do and many avoid it by using other
    more restricted formatting like Markdown or BBCode, although whitelisting libraries
    like [HTML Purifier](http://htmlpurifier.org/) exist for this reason.
  id: totrans-split-513
  prefs: []
  type: TYPE_NORMAL
- en: '[See Sanitization Filters](https://www.php.net/filter.filters.sanitize)'
  id: totrans-split-514
  prefs: []
  type: TYPE_NORMAL
- en: Unserialization
  id: totrans-split-515
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is dangerous to `unserialize()` data from users or other untrusted sources.
    Doing so can allow malicious users to instantiate objects (with user-defined properties)
    whose destructors will be executed, **even if the objects themselves aren’t used**.
    You should therefore avoid unserializing untrusted data.
  id: totrans-split-516
  prefs: []
  type: TYPE_NORMAL
- en: Use a safe, standard data interchange format such as JSON (via [`json_decode`](https://www.php.net/manual/function.json-decode.php)
    and [`json_encode`](https://www.php.net/manual/function.json-encode.php)) if you
    need to pass serialized data to the user.
  id: totrans-split-517
  prefs: []
  type: TYPE_NORMAL
- en: Validation
  id: totrans-split-518
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Validation ensures that foreign input is what you expect. For example, you may
    want to validate an email address, a phone number, or age when processing a registration
    submission.
  id: totrans-split-519
  prefs: []
  type: TYPE_NORMAL
- en: '[See Validation Filters](https://www.php.net/filter.filters.validate)'
  id: totrans-split-520
  prefs: []
  type: TYPE_NORMAL
- en: Configuration Files
  id: totrans-split-521
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When creating configuration files for your applications, best practices recommend
    that one of the following methods be followed:'
  id: totrans-split-522
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that you store your configuration information where it cannot
    be accessed directly and pulled in via the file system.
  id: totrans-split-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you must store your configuration files in the document root, name the files
    with a `.php` extension. This ensures that, even if the script is accessed directly,
    it will not be output as plain text.
  id: totrans-split-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information in configuration files should be protected accordingly, either through
    encryption or group/user file system permissions.
  id: totrans-split-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a good idea to ensure that you do not commit configuration files containing
    sensitive information e.g. passwords or API tokens to source control.
  id: totrans-split-526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Register Globals
  id: totrans-split-527
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**NOTE:** As of PHP 5.4.0 the `register_globals` setting has been removed and
    can no longer be used. This is only included as a warning for anyone in the process
    of upgrading a legacy application.'
  id: totrans-split-528
  prefs: []
  type: TYPE_NORMAL
- en: When enabled, the `register_globals` configuration setting makes several types
    of variables (including ones from `$_POST`, `$_GET` and `$_REQUEST`) available
    in the global scope of your application. This can easily lead to security issues
    as your application cannot effectively tell where the data is coming from.
  id: totrans-split-529
  prefs: []
  type: TYPE_NORMAL
- en: 'For example: `$_GET[''foo'']` would be available via `$foo`, which can override
    variables that have been declared.'
  id: totrans-split-530
  prefs: []
  type: TYPE_NORMAL
- en: If you are using PHP < 5.4.0 **make sure** that `register_globals` is **off**.
  id: totrans-split-531
  prefs: []
  type: TYPE_NORMAL
- en: Error Reporting
  id: totrans-split-532
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Error logging can be useful in finding the problem spots in your application,
    but it can also expose information about the structure of your application to
    the outside world. To effectively protect your application from issues that could
    be caused by the output of these messages, you need to configure your server differently
    in development versus production (live).
  id: totrans-split-533
  prefs: []
  type: TYPE_NORMAL
- en: Development
  id: totrans-split-534
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To show every possible error during **development**, configure the following
    settings in your `php.ini`:'
  id: totrans-split-535
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-split-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Passing in the value `-1` will show every possible error, even when new levels
    and constants are added in future PHP versions. The `E_ALL` constant also behaves
    this way as of PHP 5.4\. - [php.net](https://www.php.net/function.error-reporting)
  id: totrans-split-537
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `E_STRICT` error level constant was introduced in 5.3.0 and is not part
    of `E_ALL`, however it became part of `E_ALL` in 5.4.0\. What does this mean?
    In terms of reporting every possible error in version 5.3 it means you must use
    either `-1` or `E_ALL | E_STRICT`.
  id: totrans-split-538
  prefs: []
  type: TYPE_NORMAL
- en: '**Reporting every possible error by PHP version**'
  id: totrans-split-539
  prefs: []
  type: TYPE_NORMAL
- en: < 5.3 `-1` or `E_ALL`
  id: totrans-split-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.3 `-1` or `E_ALL | E_STRICT`
  id: totrans-split-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.3 `-1` or `E_ALL`
  id: totrans-split-542
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: Production
  id: totrans-split-543
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To hide errors on your **production** environment, configure your `php.ini`
    as:'
  id: totrans-split-544
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-split-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'With these settings in production, errors will still be logged to the error
    logs for the web server, but will not be shown to the user. For more information
    on these settings, see the PHP manual:'
  id: totrans-split-546
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  id: totrans-split-547
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing automated tests for your PHP code is considered a best practice and
    can lead to well-built applications. Automated tests are a great tool for making
    sure your application does not break when you are making changes or adding new
    functionality and should not be ignored.
  id: totrans-split-548
  prefs: []
  type: TYPE_NORMAL
- en: There are several different types of testing tools (or frameworks) available
    for PHP, which use different approaches - all of which are trying to avoid manual
    testing and the need for large Quality Assurance teams, just to make sure recent
    changes didn’t break existing functionality.
  id: totrans-split-549
  prefs: []
  type: TYPE_NORMAL
- en: Test Driven Development
  id: totrans-split-550
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From [Wikipedia](https://wikipedia.org/wiki/Test-driven_development):'
  id: totrans-split-551
  prefs: []
  type: TYPE_NORMAL
- en: 'Test-driven development (TDD) is a software development process that relies
    on the repetition of a very short development cycle: first the developer writes
    a failing automated test case that defines a desired improvement or new function,
    then produces code to pass that test and finally refactors the new code to acceptable
    standards. Kent Beck, who is credited with having developed or ‘rediscovered’
    the technique, stated in 2003 that TDD encourages simple designs and inspires
    confidence.'
  id: totrans-split-552
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'There are several different types of testing that you can do for your application:'
  id: totrans-split-553
  prefs: []
  type: TYPE_NORMAL
- en: Unit Testing
  id: totrans-split-554
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unit Testing is a programming approach to ensure functions, classes and methods
    are working as expected, from the point you build them all the way through the
    development cycle. By checking values going in and out of various functions and
    methods, you can make sure the internal logic is working correctly. By using Dependency
    Injection and building “mock” classes and stubs you can verify that dependencies
    are correctly used for even better test coverage.
  id: totrans-split-555
  prefs: []
  type: TYPE_NORMAL
- en: When you create a class or function you should create a unit test for each behavior
    it must have. At a very basic level you should make sure it errors if you send
    it bad arguments and make sure it works if you send it valid arguments. This will
    help ensure that when you make changes to this class or function later on in the
    development cycle that the old functionality continues to work as expected. The
    only alternative to this would be `var_dump()` in a test.php, which is no way
    to build an application - large or small.
  id: totrans-split-556
  prefs: []
  type: TYPE_NORMAL
- en: The other use for unit tests is contributing to open source. If you can write
    a test that shows broken functionality (i.e. fails), then fix it, and show the
    test passing, patches are much more likely to be accepted. If you run a project
    which accepts pull requests then you should suggest this as a requirement.
  id: totrans-split-557
  prefs: []
  type: TYPE_NORMAL
- en: '[PHPUnit](https://phpunit.de/) is the de-facto testing framework for writing
    unit tests for PHP applications, but there are several alternatives:'
  id: totrans-split-558
  prefs: []
  type: TYPE_NORMAL
- en: Integration Testing
  id: totrans-split-559
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'From [Wikipedia](https://wikipedia.org/wiki/Integration_testing):'
  id: totrans-split-560
  prefs: []
  type: TYPE_NORMAL
- en: Integration testing (sometimes called Integration and Testing, abbreviated “I&T”)
    is the phase in software testing in which individual software modules are combined
    and tested as a group. It occurs after unit testing and before validation testing.
    Integration testing takes as its input modules that have been unit tested, groups
    them in larger aggregates, applies tests defined in an integration test plan to
    those aggregates, and delivers as its output the integrated system ready for system
    testing.
  id: totrans-split-561
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Many of the same tools that can be used for unit testing can be used for integration
    testing as many of the same principles are used.
  id: totrans-split-562
  prefs: []
  type: TYPE_NORMAL
- en: Functional Testing
  id: totrans-split-563
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes also known as acceptance testing, functional testing consists of using
    tools to create automated tests that actually use your application instead of
    just verifying that individual units of code are behaving correctly and that individual
    units can speak to each other correctly. These tools typically work using real
    data and simulating actual users of the application.
  id: totrans-split-564
  prefs: []
  type: TYPE_NORMAL
- en: '[Selenium](https://www.selenium.dev/)'
  id: totrans-split-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mink](https://mink.behat.org/)'
  id: totrans-split-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Codeception](https://codeception.com/) is a full-stack testing framework that
    includes acceptance testing tools'
  id: totrans-split-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Storyplayer](https://github.com/MeltwaterArchive/storyplayer) is a full-stack
    testing framework that includes support for creating and destroying test environments
    on demand'
  id: totrans-split-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Behavior Driven Development
  id: totrans-split-569
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two different types of Behavior-Driven Development (BDD): SpecBDD
    and StoryBDD. SpecBDD focuses on technical behavior of code, while StoryBDD focuses
    on business or feature behaviors or interactions. PHP has frameworks for both
    types of BDD.'
  id: totrans-split-570
  prefs: []
  type: TYPE_NORMAL
- en: With StoryBDD, you write human-readable stories that describe the behavior of
    your application. These stories can then be run as actual tests against your application.
    The framework used in PHP applications for StoryBDD is [Behat](https://behat.org/),
    which is inspired by Ruby’s [Cucumber](https://cucumber.io/) project and implements
    the Gherkin DSL for describing feature behavior.
  id: totrans-split-571
  prefs: []
  type: TYPE_NORMAL
- en: With SpecBDD, you write specifications that describe how your actual code should
    behave. Instead of testing a function or method, you are describing how that function
    or method should behave. PHP offers the [PHPSpec](https://www.phpspec.net/) framework
    for this purpose. This framework is inspired by the [RSpec project](https://rspec.info/)
    for Ruby.
  id: totrans-split-572
  prefs: []
  type: TYPE_NORMAL
- en: BDD Links
  id: totrans-split-573
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Behat](https://behat.org/), the StoryBDD framework for PHP, inspired by Ruby’s
    [Cucumber](https://cucumber.io/) project;'
  id: totrans-split-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PHPSpec](https://www.phpspec.net/), the SpecBDD framework for PHP, inspired
    by Ruby’s [RSpec](https://rspec.info/) project;'
  id: totrans-split-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Codeception](https://codeception.com/) is a full-stack testing framework that
    uses BDD principles.'
  id: totrans-split-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Servers and Deployment
  id: totrans-split-577
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PHP applications can be deployed and run on production web servers in a number
    of ways.
  id: totrans-split-578
  prefs: []
  type: TYPE_NORMAL
- en: Platform as a Service (PaaS)
  id: totrans-split-579
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PaaS provides the system and network architecture necessary to run PHP applications
    on the web. This means little to no configuration for launching PHP applications
    or PHP frameworks.
  id: totrans-split-580
  prefs: []
  type: TYPE_NORMAL
- en: Recently PaaS has become a popular method for deploying, hosting, and scaling
    PHP applications of all sizes. You can find a list of [PHP PaaS “Platform as a
    Service” providers](#php_paas_providers) in our [resources section](#resources).
  id: totrans-split-581
  prefs: []
  type: TYPE_NORMAL
- en: Virtual or Dedicated Servers
  id: totrans-split-582
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are comfortable with systems administration, or are interested in learning
    it, virtual or dedicated servers give you complete control of your application’s
    production environment.
  id: totrans-split-583
  prefs: []
  type: TYPE_NORMAL
- en: nginx and PHP-FPM
  id: totrans-split-584
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PHP, via PHP’s built-in FastCGI Process Manager (FPM), pairs really nicely with
    [nginx](https://nginx.org/), which is a lightweight, high-performance web server.
    It uses less memory than Apache and can better handle more concurrent requests.
    This is especially important on virtual servers that don’t have much memory to
    spare.
  id: totrans-split-585
  prefs: []
  type: TYPE_NORMAL
- en: Apache and PHP
  id: totrans-split-586
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PHP and Apache have a long history together. Apache is wildly configurable and
    has many available [modules](https://httpd.apache.org/docs/2.4/mod/) to extend
    functionality. It is a popular choice for shared servers and an easy setup for
    PHP frameworks and open source apps like WordPress. Unfortunately, Apache uses
    more resources than nginx by default and cannot handle as many visitors at the
    same time.
  id: totrans-split-587
  prefs: []
  type: TYPE_NORMAL
- en: Apache has several possible configurations for running PHP. The most common
    and easiest to setup is the [prefork MPM](https://httpd.apache.org/docs/2.4/mod/prefork.html)
    with `mod_php`. While it isn’t the most memory efficient, it is the simplest to
    get working and to use. This is probably the best choice if you don’t want to
    dig too deeply into the server administration aspects. Note that if you use `mod_php`
    you MUST use the prefork MPM.
  id: totrans-split-588
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, if you want to squeeze more performance and stability out of
    Apache then you can take advantage of the same FPM system as nginx and run the
    [worker MPM](https://httpd.apache.org/docs/2.4/mod/worker.html) or [event MPM](https://httpd.apache.org/docs/2.4/mod/event.html)
    with mod_fastcgi or mod_fcgid. This configuration will be significantly more memory
    efficient and much faster but it is more work to set up.
  id: totrans-split-589
  prefs: []
  type: TYPE_NORMAL
- en: If you are running Apache 2.4 or later, you can use [mod_proxy_fcgi](https://httpd.apache.org/docs/current/mod/mod_proxy_fcgi.html)
    to get great performance that is easy to setup.
  id: totrans-split-590
  prefs: []
  type: TYPE_NORMAL
- en: Shared Servers
  id: totrans-split-591
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHP has shared servers to thank for its popularity. It is hard to find a host
    without PHP installed, but be sure it’s the latest version. Shared servers allow
    you and other developers to deploy websites to a single machine. The upside to
    this is that it has become a cheap commodity. The downside is that you never know
    what kind of a ruckus your neighboring tenants are going to create; loading down
    the server or opening up security holes are the main concerns. If your project’s
    budget can afford to avoid shared servers, you should.
  id: totrans-split-592
  prefs: []
  type: TYPE_NORMAL
- en: Make sure your shared servers are offering the latest versions of PHP.
  id: totrans-split-593
  prefs: []
  type: TYPE_NORMAL
- en: Building and Deploying your Application
  id: totrans-split-594
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you find yourself doing manual database schema changes or running your tests
    manually before updating your files (manually), think twice! With every additional
    manual task needed to deploy a new version of your app, the chances for potentially
    fatal mistakes increase. Whether you’re dealing with a simple update, a comprehensive
    build process or even a continuous integration strategy, [build automation](https://wikipedia.org/wiki/Build_automation)
    is your friend.
  id: totrans-split-595
  prefs: []
  type: TYPE_NORMAL
- en: 'Among the tasks you might want to automate are:'
  id: totrans-split-596
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management
  id: totrans-split-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compilation, minification of your assets
  id: totrans-split-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tests
  id: totrans-split-599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creation of documentation
  id: totrans-split-600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging
  id: totrans-split-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment
  id: totrans-split-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment tools can be described as a collection of scripts that handle common
    tasks of software deployment. The deployment tool is not a part of your software,
    it acts on your software from ‘outside’.
  id: totrans-split-603
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many open source tools available to help you with build automation
    and deployment, some are written in PHP others aren’t. This shouldn’t hold you
    back from using them, if they’re better suited for the specific job. Here are
    a few examples:'
  id: totrans-split-604
  prefs: []
  type: TYPE_NORMAL
- en: '[Phing](https://www.phing.info/) can control your packaging, deployment or
    testing process from within a XML build file. Phing (which is based on [Apache
    Ant](https://ant.apache.org/)) provides a rich set of tasks usually needed to
    install or update a web application and can be extended with additional custom
    tasks, written in PHP. It’s a solid and robust tool and has been around for a
    long time, however the tool could be perceived as a bit old fashioned because
    of the way it deals with configuration (XML files).'
  id: totrans-split-605
  prefs: []
  type: TYPE_NORMAL
- en: '[Capistrano](https://capistranorb.com/) is a system for *intermediate-to-advanced
    programmers* to execute commands in a structured, repeatable way on one or more
    remote machines. It is pre-configured for deploying Ruby on Rails applications,
    however you can successfully deploy PHP systems with it. Successful use of Capistrano
    depends on a working knowledge of Ruby and Rake.'
  id: totrans-split-606
  prefs: []
  type: TYPE_NORMAL
- en: '[Ansistrano](https://ansistrano.com) is a couple of Ansible roles to easily
    manage the deployment process (deploy and rollback) for scripting applications
    such as PHP, Python and Ruby. It’s an Ansible port for [Capistrano](https://capistranorb.com/).
    It’s been used by quite a lot of PHP companies already.'
  id: totrans-split-607
  prefs: []
  type: TYPE_NORMAL
- en: '[Deployer](https://deployer.org/) is a deployment tool written in PHP. It’s
    simple and functional. Features include running tasks in parallel, atomic deployment
    and keeping consistency between servers. Recipes of common tasks for Symfony,
    Laravel, Zend Framework and Yii are available. Younes Rafie’s article [Easy Deployment
    of PHP Applications with Deployer](https://www.sitepoint.com/deploying-php-applications-with-deployer/)
    is a great tutorial for deploying your application with the tool.'
  id: totrans-split-608
  prefs: []
  type: TYPE_NORMAL
- en: '[Magallanes](https://www.magephp.com/) is another tool written in PHP with
    simple configuration done in YAML files. It has support for multiple servers and
    environments, atomic deployment, and has some built in tasks that you can leverage
    for common tools and frameworks.'
  id: totrans-split-609
  prefs: []
  type: TYPE_NORMAL
- en: 'Further reading:'
  id: totrans-split-610
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Server Provisioning
  id: totrans-split-611
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Managing and configuring servers can be a daunting task when faced with many
    servers. There are tools for dealing with this so you can automate your infrastructure
    to make sure you have the right servers and that they’re configured properly.
    They often integrate with the larger cloud hosting providers (Amazon Web Services,
    Heroku, DigitalOcean, etc) for managing instances, which makes scaling an application
    a lot easier.
  id: totrans-split-612
  prefs: []
  type: TYPE_NORMAL
- en: '[Ansible](https://www.ansible.com/) is a tool that manages your infrastructure
    through YAML files. It’s simple to get started with and can manage complex and
    large scale applications. There is an API for managing cloud instances and it
    can manage them through a dynamic inventory using certain tools.'
  id: totrans-split-613
  prefs: []
  type: TYPE_NORMAL
- en: '[Puppet](https://puppet.com/) is a tool that has its own language and file
    types for managing servers and configurations. It can be used in a master/client
    setup or it can be used in a “master-less” mode. In the master/client mode the
    clients will poll the central master(s) for new configuration on set intervals
    and update themselves if necessary. In the master-less mode you can push changes
    to your nodes.'
  id: totrans-split-614
  prefs: []
  type: TYPE_NORMAL
- en: '[Chef](https://www.chef.io/) is a powerful Ruby based system integration framework
    that you can build your whole server environment or virtual boxes with. It integrates
    well with Amazon Web Services through their service called OpsWorks.'
  id: totrans-split-615
  prefs: []
  type: TYPE_NORMAL
- en: 'Further reading:'
  id: totrans-split-616
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Continuous Integration
  id: totrans-split-617
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Continuous Integration is a software development practice where members of a
    team integrate their work frequently, usually each person integrates at least
    daily — leading to multiple integrations per day. Many teams find that this approach
    leads to significantly reduced integration problems and allows a team to develop
    cohesive software more rapidly.
  id: totrans-split-618
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*– Martin Fowler*'
  id: totrans-split-619
  prefs: []
  type: TYPE_NORMAL
- en: There are different ways to implement continuous integration for PHP. [Travis
    CI](https://www.travis-ci.com/) has done a great job of making continuous integration
    a reality even for small projects. Travis CI is a hosted continuous integration
    service. It can be integrated with GitHub and offers support for many languages
    including PHP. GitHub has continuous integration workflows with [GitHub Actions](https://docs.github.com/en/actions).
  id: totrans-split-620
  prefs: []
  type: TYPE_NORMAL
- en: 'Further reading:'
  id: totrans-split-621
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Virtualization
  id: totrans-split-622
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running your application on different environments in development and production
    can lead to strange bugs popping up when you go live. It’s also tricky to keep
    different development environments up to date with the same version for all libraries
    used when working with a team of developers.
  id: totrans-split-623
  prefs: []
  type: TYPE_NORMAL
- en: If you are developing on Windows and deploying to Linux (or anything non-Windows)
    or are developing in a team, you should consider using a virtual machine. This
    sounds tricky, but besides the widely known virtualization environments like VMware
    or VirtualBox, there are additional tools that may help you setting up a virtual
    environment in a few easy steps.
  id: totrans-split-624
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant
  id: totrans-split-625
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Vagrant](https://www.vagrantup.com/) helps you build your virtual boxes on
    top of the known virtual environments and will configure these environments based
    on a single configuration file. These boxes can be set up manually, or you can
    use “provisioning” software such as [Puppet](https://puppet.com/) or [Chef](https://www.chef.io/)
    to do this for you. Provisioning the base box is a great way to ensure that multiple
    boxes are set up in an identical fashion and removes the need for you to maintain
    complicated “set up” command lists. You can also “destroy” your base box and recreate
    it without many manual steps, making it easy to create a “fresh” installation.'
  id: totrans-split-626
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant creates folders for sharing your code between your host and your virtual
    machine, which means that you can create and edit your files on your host machine
    and then run the code inside your virtual machine.
  id: totrans-split-627
  prefs: []
  type: TYPE_NORMAL
- en: Docker
  id: totrans-split-628
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Docker](https://www.docker.com/) - a lightweight alternative to a full virtual
    machine - is so called because it’s all about “containers”. A container is a building
    block which, in the simplest case, does one specific job, e.g. running a web server.
    An “image” is the package you use to build the container - Docker has a repository
    full of them.'
  id: totrans-split-629
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical LAMP application might have three containers: a web server, a PHP-FPM
    process and MySQL. As with shared folders in Vagrant, you can leave your application
    files where they are and tell Docker where to find them.'
  id: totrans-split-630
  prefs: []
  type: TYPE_NORMAL
- en: You can generate containers from the command line (see example below) or, for
    ease of maintenance, build a `docker-compose.yml` file for your project specifying
    which to create and how they communicate with one another.
  id: totrans-split-631
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker may help if you’re developing multiple websites and want the separation
    that comes from installing each on its own virtual machine, but don’t have the
    necessary disk space or the time to keep everything up to date. It’s efficient:
    the installation and downloads are quicker, you only need to store one copy of
    each image however often it’s used, containers need less RAM and share the same
    OS kernel, so you can have more servers running simultaneously, and it takes a
    matter of seconds to stop and start them, no need to wait for a full server boot.'
  id: totrans-split-632
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Running your PHP Applications in Docker'
  id: totrans-split-633
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After [installing docker](https://docs.docker.com/get-docker/) on your machine,
    you can start a web server with one command. The following will download a fully
    functional Apache installation with the latest PHP version, map `/path/to/your/php/files`
    to the document root, which you can view at `http://localhost:8080`:'
  id: totrans-split-634
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-split-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: This will initialize and launch your container. `-d` makes it run in the background.
    To stop and start it, simply run `docker stop my-php-webserver` and `docker start
    my-php-webserver` (the other parameters are not needed again).
  id: totrans-split-636
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about Docker
  id: totrans-split-637
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The command above shows a quick way to run a basic server. There’s much more
    you can do (and thousands of pre-built images in the [Docker Hub](https://hub.docker.com/)).
    Take time to learn the terminology and read the [Docker User Guide](https://docs.docker.com/)
    to get the most from it, and don’t run random code you’ve downloaded without checking
    it’s safe – unofficial images may not have the latest security patches. If in
    doubt, stick to the [official repositiories](https://hub.docker.com/explore/).
  id: totrans-split-638
  prefs: []
  type: TYPE_NORMAL
- en: The [PHPDocker.io](https://phpdocker.io/) site will auto-generate all the files
    you need for a fully-featured LAMP/LEMP stack, including your choice of PHP version
    and extensions.
  id: totrans-split-639
  prefs: []
  type: TYPE_NORMAL
- en: Caching
  id: totrans-split-640
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PHP is pretty quick by itself, but bottlenecks can arise when you make remote
    connections, load files, etc. Thankfully, there are various tools available to
    speed up certain parts of your application, or reduce the number of times these
    various time-consuming tasks need to run.
  id: totrans-split-641
  prefs: []
  type: TYPE_NORMAL
- en: Opcode Cache
  id: totrans-split-642
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a PHP file is executed, it must first be compiled into [opcodes](https://php-legacy-docs.zend.com/manual/php4/en/internals2.opcodes)
    (machine language instructions for the CPU). If the source code is unchanged,
    the opcodes will be the same, so this compilation step becomes a waste of CPU
    resources.
  id: totrans-split-643
  prefs: []
  type: TYPE_NORMAL
- en: An opcode cache prevents redundant compilation by storing opcodes in memory
    and reusing them on successive calls. It will typically check signature or modification
    time of the file first, in case there have been any changes.
  id: totrans-split-644
  prefs: []
  type: TYPE_NORMAL
- en: It’s likely an opcode cache will make a significant speed improvement to your
    application. Since PHP 5.5 there is one built in - [Zend OPcache](https://www.php.net/book.opcache).
    Depending on your PHP package/distribution, it’s usually turned on by default
    - check [opcache.enable](https://www.php.net/manual/opcache.configuration.php#ini.opcache.enable)
    and the output of `phpinfo()` to make sure. For earlier versions there’s a PECL
    extension.
  id: totrans-split-645
  prefs: []
  type: TYPE_NORMAL
- en: 'Read more about opcode caches:'
  id: totrans-split-646
  prefs: []
  type: TYPE_NORMAL
- en: Object Caching
  id: totrans-split-647
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are times when it can be beneficial to cache individual objects in your
    code, such as with data that is expensive to get or database calls where the result
    is unlikely to change. You can use object caching software to hold these pieces
    of data in memory for extremely fast access later on. If you save these items
    to a data store after you retrieve them, then pull them directly from the cache
    for following requests, you can gain a significant improvement in performance
    as well as reduce the load on your database servers.
  id: totrans-split-648
  prefs: []
  type: TYPE_NORMAL
- en: Many of the popular bytecode caching solutions let you cache custom data as
    well, so there’s even more reason to take advantage of them. APCu and WinCache
    both provide APIs to save data from your PHP code to their memory cache.
  id: totrans-split-649
  prefs: []
  type: TYPE_NORMAL
- en: The most commonly used memory object caching systems are APCu and memcached.
    APCu is an excellent choice for object caching, it includes a simple API for adding
    your own data to its memory cache and is very easy to setup and use. The one real
    limitation of APCu is that it is tied to the server it’s installed on. Memcached
    on the other hand is installed as a separate service and can be accessed across
    the network, meaning that you can store objects in a hyper-fast data store in
    a central location and many different systems can pull from it.
  id: totrans-split-650
  prefs: []
  type: TYPE_NORMAL
- en: Note that when running PHP as a (Fast-)CGI application inside your webserver,
    every PHP process will have its own cache, i.e. APCu data is not shared between
    your worker processes. In these cases, you might want to consider using memcached
    instead, as it’s not tied to the PHP processes.
  id: totrans-split-651
  prefs: []
  type: TYPE_NORMAL
- en: In a networked configuration APCu will usually outperform memcached in terms
    of access speed, but memcached will be able to scale up faster and further. If
    you do not expect to have multiple servers running your application, or do not
    need the extra features that memcached offers then APCu is probably your best
    choice for object caching.
  id: totrans-split-652
  prefs: []
  type: TYPE_NORMAL
- en: 'Example logic using APCu:'
  id: totrans-split-653
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-split-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Note that prior to PHP 5.5, there was the APC extension which provided both
    an object cache and a bytecode cache. The new APCu is a project to bring APC’s
    object cache to PHP 5.5+, since PHP now has a built-in bytecode cache (OPcache).
  id: totrans-split-655
  prefs: []
  type: TYPE_NORMAL
- en: 'Learn more about popular object caching systems:'
  id: totrans-split-656
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PHPDoc
  id: totrans-split-657
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHPDoc is an informal standard for commenting PHP code. There are a *lot* of
    different [tags](https://docs.phpdoc.org/latest/guide/references/phpdoc/tags/index.html)
    available. The full list of tags and examples can be found at the [PHPDoc manual](https://docs.phpdoc.org/latest/index.html).
  id: totrans-split-658
  prefs: []
  type: TYPE_NORMAL
- en: Below is an example of how you might document a class with a few methods;
  id: totrans-split-659
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-split-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: The documentation for the class as a whole has the [@author](https://docs.phpdoc.org/latest/guide/references/phpdoc/tags/author.html)
    tag and a [@link](https://docs.phpdoc.org/latest/guide/references/phpdoc/tags/link.html)
    tag. The [@author](https://docs.phpdoc.org/latest/guide/references/phpdoc/tags/author.html)
    tag is used to document the author of the code and can be repeated for documenting
    several authors. The [@link](https://docs.phpdoc.org/latest/guide/references/phpdoc/tags/link.html)
    tag is used to link to a website indicating a relationship between the website
    and the code.
  id: totrans-split-661
  prefs: []
  type: TYPE_NORMAL
- en: Inside the class, the first method has a [@param](https://docs.phpdoc.org/latest/guide/references/phpdoc/tags/param.html)
    tag documenting the type, name and description of the parameter being passed to
    the method. Additionally it has the [@return](https://docs.phpdoc.org/latest/guide/references/phpdoc/tags/return.html)
    and [@throws](https://docs.phpdoc.org/latest/guide/references/phpdoc/tags/throws.html)
    tags for documenting the return type, and any exceptions that could be thrown
    respectively.
  id: totrans-split-662
  prefs: []
  type: TYPE_NORMAL
- en: The second and third methods are very similar and have a single [@param](https://docs.phpdoc.org/latest/guide/references/phpdoc/tags/param.html)
    tag as did the first method. The important difference between the second and third
    methods’ doc block is the inclusion/exclusion of the [@return](https://docs.phpdoc.org/latest/guide/references/phpdoc/tags/return.html)
    tag. `@return void` explicitly informs us that there is no return; historically
    omitting the `@return void` statement also results in the same (no return) action.
  id: totrans-split-663
  prefs: []
  type: TYPE_NORMAL
- en: People to Follow
  id: totrans-split-664
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It’s difficult to find interesting and knowledgeable PHP community members
    when you are first starting out. You can find an abbreviated list of PHP community
    members to get you started at:'
  id: totrans-split-665
  prefs: []
  type: TYPE_NORMAL
- en: Frameworks
  id: totrans-split-666
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rather than re-invent the wheel, many PHP developers use frameworks to build
    out web applications. Frameworks abstract away many of the low-level concerns
    and provide helpful, easy-to-use interfaces to complete common tasks.
  id: totrans-split-667
  prefs: []
  type: TYPE_NORMAL
- en: 'You do not need to use a framework for every project. Sometimes plain PHP is
    the right way to go, but if you do need a framework then there are three main
    types available:'
  id: totrans-split-668
  prefs: []
  type: TYPE_NORMAL
- en: Micro Frameworks
  id: totrans-split-669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full-Stack Frameworks
  id: totrans-split-670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component Frameworks
  id: totrans-split-671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Micro-frameworks are essentially a wrapper to route a HTTP request to a callback,
    controller, method, etc as quickly as possible, and sometimes come with a few
    extra libraries to assist development such as basic database wrappers and the
    like. They are prominently used to build remote HTTP services.
  id: totrans-split-672
  prefs: []
  type: TYPE_NORMAL
- en: Many frameworks add a considerable number of features on top of what is available
    in a micro-framework; these are called Full-Stack Frameworks. These often come
    bundled with ORMs, Authentication packages, etc.
  id: totrans-split-673
  prefs: []
  type: TYPE_NORMAL
- en: Component-based frameworks are collections of specialized and single-purpose
    libraries. Disparate component-based frameworks can be used together to make a
    micro- or full-stack framework.
  id: totrans-split-674
  prefs: []
  type: TYPE_NORMAL
- en: Components
  id: totrans-split-675
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned above “Components” are another approach to the common goal of
    creating, distributing and implementing shared code. Various component repositories
    exist, the main two of which are:'
  id: totrans-split-676
  prefs: []
  type: TYPE_NORMAL
- en: Both of these repositories have command line tools associated with them to help
    the installation and upgrade processes, and have been explained in more detail
    in the [Dependency Management](/#dependency_management) section.
  id: totrans-split-677
  prefs: []
  type: TYPE_NORMAL
- en: There are also component-based frameworks and component-vendors that offer no
    framework at all. These projects provide another source of packages which ideally
    have little to no dependencies on other packages, or specific frameworks.
  id: totrans-split-678
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can use the [FuelPHP Validation package](https://github.com/fuelphp/validation),
    without needing to use the FuelPHP framework itself.
  id: totrans-split-679
  prefs: []
  type: TYPE_NORMAL
- en: '*Laravel’s [Illuminate components](https://github.com/illuminate) will become
    better decoupled from the Laravel framework. For now, only the components best
    decoupled from the Laravel framework are listed above.*'
  id: totrans-split-680
  prefs: []
  type: TYPE_NORMAL
- en: Other Useful Resources
  id: totrans-split-681
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cheatsheets
  id: totrans-split-682
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More best practices
  id: totrans-split-683
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: News around the PHP and web development communities
  id: totrans-split-684
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can subscribe to weekly newsletters to keep yourself informed on new libraries,
    latest news, events and general announcements, as well as additional resources
    being published every now and then:'
  id: totrans-split-685
  prefs: []
  type: TYPE_NORMAL
- en: There are also Weeklies on other platforms you might be interested in; here’s
    [a list of some](https://github.com/jondot/awesome-weekly).
  id: totrans-split-686
  prefs: []
  type: TYPE_NORMAL
- en: PHP universe
  id: totrans-split-687
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Video Tutorials
  id: totrans-split-688
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: YouTube Channels
  id: totrans-split-689
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Paid Videos
  id: totrans-split-690
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Books
  id: totrans-split-691
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many PHP books; sadly some are now quite old and no longer accurate.
    In particular, avoid books on “PHP 6”, a version that will now never exist. The
    next major release of PHP after 5.6 was “PHP 7”, [partly because of this](https://wiki.php.net/rfc/php6).
  id: totrans-split-692
  prefs: []
  type: TYPE_NORMAL
- en: This section aims to be a living document for recommended books on PHP development
    in general. If you would like your book to be added, send a PR and it will be
    reviewed for relevancy.
  id: totrans-split-693
  prefs: []
  type: TYPE_NORMAL
- en: Free Books
  id: totrans-split-694
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Paid Books
  id: totrans-split-695
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PHP & MySQL](https://phpandmysql.com/) - PHP book with excellent illustrations
    that covers all the fundamentals of PHP and MySQL with practical examples.'
  id: totrans-split-696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build APIs You Won’t Hate](https://apisyouwonthate.com/) - Everyone and their
    dog wants an API, so you should probably learn how to build them.'
  id: totrans-split-697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Modern PHP](https://www.oreilly.com/library/view/modern-php/9781491905173/)
    - Covers modern PHP features, best practices, testing, tuning, deployment and
    setting up a dev environment.'
  id: totrans-split-698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building Secure PHP Apps](https://leanpub.com/buildingsecurephpapps) - Learn
    the security basics that a senior developer usually acquires over years of experience,
    all condensed down into one quick and easy handbook.'
  id: totrans-split-699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Modernizing Legacy Applications In PHP](https://leanpub.com/mlaphp) - Get
    your code under control in a series of small, specific steps.'
  id: totrans-split-700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Securing PHP: Core Concepts](https://leanpub.com/securingphp-coreconcepts)
    - A guide to some of the most common security terms and provides some examples
    of them in every day PHP.'
  id: totrans-split-701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Scaling PHP](https://www.scalingphpbook.com/) - Stop playing sysadmin and
    get back to coding.'
  id: totrans-split-702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Signaling PHP](https://leanpub.com/signalingphp) - PCNLT signals are a great
    help when writing PHP scripts that run from the command line.'
  id: totrans-split-703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Minimum Viable Tests](https://leanpub.com/minimumviabletests) - Long-time
    PHP testing evangelist Chris Hartjes goes over what he feels is the minimum you
    need to know to get started.'
  id: totrans-split-704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Domain-Driven Design in PHP](https://leanpub.com/ddd-in-php) - See real examples
    written in PHP showcasing Domain-Driven Design Architectural Styles (Hexagonal
    Architecture, CQRS or Event Sourcing), Tactical Design Patterns, and Bounded Context
    Integration.'
  id: totrans-split-705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP User Groups
  id: totrans-split-706
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you live in a larger city, odds are there’s a PHP user group nearby. You
    can easily find your local PUG at [PHP.ug](https://php.ug/). Alternate sources
    might be [Meetup.com](https://www.meetup.com/find/) or a search for `php user
    group near me` using your favorite search engine (i.e. [Google](https://www.google.com/search?q=php+user+group+near+me)).
    If you live in a smaller town, there may not be a local PUG; if that’s the case,
    start one!
  id: totrans-split-707
  prefs: []
  type: TYPE_NORMAL
- en: 'Special mention should be made of two global user groups: [NomadPHP](https://nomadphp.com/)
    and [PHPWomen](https://twitter.com/PHPWomen). [NomadPHP](https://nomadphp.com/)
    offers twice monthly online user group meetings with presentations by some of
    the top speakers in the PHP community. [PHPWomen](https://twitter.com/PHPWomen)
    is a non-exclusive user group originally targeted towards the women in the PHP
    world. Membership is open to everyone who supports a more diverse community. PHPWomen
    provide a network for support, mentorship and education, and generally promote
    the creating of a “female friendly” and professional atmosphere.'
  id: totrans-split-708
  prefs: []
  type: TYPE_NORMAL
- en: '[Read about User Groups on the PHP Wiki](https://wiki.php.net/usergroups)'
  id: totrans-split-709
  prefs: []
  type: TYPE_NORMAL
- en: PHP Conferences
  id: totrans-split-710
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PHP community also hosts larger regional and national conferences in many
    countries around the world. Well-known members of the PHP community usually speak
    at these larger events, so it’s a great opportunity to learn directly from industry
    leaders.
  id: totrans-split-711
  prefs: []
  type: TYPE_NORMAL
- en: '[Find a PHP Conference](https://www.php.net/conferences/index.php)'
  id: totrans-split-712
  prefs: []
  type: TYPE_NORMAL
- en: ElePHPants
  id: totrans-split-713
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[ElePHPant](https://www.php.net/elephpant.php) is that beautiful mascot of
    the PHP project with an elephant in its design. It was originally designed for
    the PHP project in 1998 by [Vincent Pontier](http://www.elroubio.net/) - spiritual
    father of thousands of elePHPants around the world - and ten years later adorable
    plush elephant toys came to birth as well. Now elePHPants are present at many
    PHP conferences and with many PHP developers at their computers for fun and inspiration.'
  id: totrans-split-714
  prefs: []
  type: TYPE_NORMAL
- en: '[Interview with Vincent Pontier](https://7php.com/elephpant/)'
  id: totrans-split-715
  prefs: []
  type: TYPE_NORMAL
