- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:29:40'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:29:40'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'TypeScript: Branded Types 🔧 - Prosopo'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'TypeScript: 品牌化类型 🔧 - Prosopo'
- en: 来源：[https://prosopo.io/articles/typescript-branding/](https://prosopo.io/articles/typescript-branding/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://prosopo.io/articles/typescript-branding/](https://prosopo.io/articles/typescript-branding/)
- en: '**[PART 1: TypeScript Mapped Type Magic](/articles/typescript-mapped-type-magic/)**'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第1部分：TypeScript映射类型魔法](/articles/typescript-mapped-type-magic/)**'
- en: Ahoy there TypeScript warriors! 👋 Today we're extending our work in the [TypeScript
    mapped types article](/articles/typescript-mapped-type-magic/) to provide *branding*.
    The previous article discussed how to use TypeScript mapped types in a nominal
    rather than structural nature.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 战士们，你们好！👋 今天我们在[TypeScript映射类型文章](/articles/typescript-mapped-type-magic/)的基础上扩展了我们的工作，引入*品牌化*。上一篇文章讨论了如何在TypeScript映射类型中以名义方式而不是结构方式使用。
- en: '[PRE0]'
  id: totrans-split-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is a fancy way of saying TypeScript is structural by default, i.e. it will
    see type `A` and `B` as equal when dealing with types. Making type `A` and `B`
    nominal would make TypeScript differentiate them apart, even though their structure
    is the same.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种高级的说法，即TypeScript默认是结构化的，即在处理类型时会将类型`A`和`B`视为相等。使类型`A`和`B`称为名义上的会使TypeScript区分它们，即使它们的结构相同。
- en: In this post, we're building on that work to produce a way to *brand* a type,
    providing an automated and easy-to-use way of making a type nominal. Branding
    focuses on the type system only, rather than introducing runtime fields like in
    the previous post, which is a major benefit over the previous approach.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们基于上述工作提出一种方法来*品牌化*类型，提供一种自动化且易于使用的方式使类型成为名义化。品牌化专注于仅在类型系统中而不是像之前文章中介绍的引入运行时字段，这是与之前方法相比的一个重大优势。
- en: What's the problem?
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题出在哪里？
- en: Branding, also known as opaque types, enable differentiation of types in TypeScript
    which otherwise would be classified as the same type. For example
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 品牌化，也称为不透明类型，在TypeScript中允许区分类型，否则这些类型将被分类为相同类型。例如，
- en: '[PRE1]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`A` and `B` are structurally the same, ergo TypeScript accepts any instance
    of `A` or `B` in place of each other:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`A`和`B`在结构上是完全相同的，因此TypeScript接受`A`或`B`的任何实例来替代彼此：'
- en: '[PRE2]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The function is looking for a value of type `A` as input, whereas we're passing
    it a value of type `B`. TypeScript compares the types structurally, and because
    they have exactly the same structure it deems this operation to be fine.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 函数期望输入类型为`A`的值，而我们传递的是类型为`B`的值。TypeScript通过结构比较这两种类型，因为它们具有完全相同的结构，所以认为这个操作是可以接受的。
- en: But what if we need to tell `A` and `B` apart? What if, conceptually speaking,
    they must be different? What if we're doing something fancy with `A` and `B` which
    TypeScript is unaware of but we require the types to be different? That's exactly
    the situation we found ourselves in lately!
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们需要区分`A`和`B`怎么办？概念上讲，它们必须不同吗？如果我们在`A`和`B`上做一些TypeScript不知道但我们需要这些类型不同的花哨事情，那就是我们最近遇到的情况！
- en: We need branding to do exactly that.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要品牌化来正好做到这一点。
- en: The solution
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Much like in the [TypeScript mapped types article](/articles/typescript-mapped-type-magic/),
    the key lies in creating a field with the name of a symbol to act as our *id*.
    However, with branding we only need this field at a type-level rather than the
    runtime-level. Since types are erased after compilation, we need to add this field
    to a type without altering the runtime data whatsoever. Casting, anyone?
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在[TypeScript映射类型文章](/articles/typescript-mapped-type-magic/)中一样，关键在于创建一个带有符号名称的字段作为我们的*id*。然而，使用品牌化时，我们只需要在类型级别添加这个字段，而不是在运行时级别。由于类型在编译后被抹除，我们需要在不改变运行时数据的情况下向类型添加这个字段。需要类型转换，对吧？
- en: First, lets introduce the `brand` field.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们介绍`brand`字段。
- en: '[PRE3]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here we''re adding the `brand` field to type `A`. The brand field name is a
    symbol, akin to a UUID. We use a symbol to ensure the `brand` field never clashes
    with any other field for `A`, because we''d be overwriting a field otherwise and
    introducing the worse kind of bugs: type bugs 🐛 . We''ve set the brand to `''A''`
    at the moment, though this could be anything you desire. It''s akin to the type
    name. Now let''s compare `A` and `B` again:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在为类型`A`添加`brand`字段。品牌字段名称是一个符号，类似于UUID。我们使用符号来确保`A`的品牌字段永远不会与`A`的任何其他字段冲突，否则我们将覆盖一个字段并引入更糟糕的错误：类型错误
    🐛 。目前我们将品牌设置为`'A'`，但这可以是你想要的任何内容。这类似于类型名称。现在让我们再次比较`A`和`B`：
- en: '[PRE4]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here''s the error:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是错误的所在：
- en: '[PRE5]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: TypeScript won't let us pass an instance of `B` to the function accepting `A`
    because it's missing the `brand` field - brilliant! `A` and `B` are now different
    types. But what about if `B` had its own brand?
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 不允许我们将 `B` 的实例传递给接受 `A` 的函数，因为它缺少 `brand` 字段 - 太棒了！`A` 和 `B` 现在是不同的类型了。但是如果
    `B` 有自己的品牌呢？
- en: '[PRE6]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that we're using the same `brand` variable from before. It's important
    to keep this constant, otherwise we're declaring fields with different names!
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们仍然使用之前的相同 `brand` 变量。保持这个常量非常重要，否则我们将声明具有不同名称的字段！
- en: 'Now lets try the function again:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再试试这个函数：
- en: '[PRE7]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And here's the error
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是错误
- en: '[PRE8]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There we go! The error is saying that though both types have a `brand` field,
    the value for the brand is different for the two types, i.e. `'A' != 'B'`!
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样了！错误表明，尽管两种类型都有一个 `brand` 字段，但这两种类型的品牌值不同，即 `'A' != 'B'`！
- en: 'Let''s see what happens if the `brand` is the same:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如果 `brand` 是相同的会发生什么：
- en: '[PRE9]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: No error! `A` and `B` are seen as interchangeable types because they're structurally
    the same, having the same fields *and* same brand value of `'foobar'`. Excellent!
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 没有错误！`A` 和 `B` 被视为可互换的类型，因为它们在结构上是相同的，具有相同的字段 *和* `'foobar'` 的品牌值。太棒了！
- en: Make it generic!
  id: totrans-split-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让它成为泛型！
- en: 'Awesome, so that works. But it''s a toy example, not fit for production. Let''s
    create a `Brand` type which can brand any type you wish:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了，这样就行了。但这只是一个玩具示例，不适合生产。让我们创建一个可以为任何您希望的类型添加品牌的 `Brand` 类型：
- en: '[PRE10]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This type is very simple, it takes your type `T` and adds a `brand` field with
    `U` being the brand value. Here''s how to use it:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型非常简单，它接受您的类型 `T` 并添加一个带有 `U` 品牌值的 `brand` 字段。这里是如何使用它的：
- en: '[PRE11]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'So now we can brand any type. For completeness, here''s the same kind of thing
    to *remove* the brand and go back to plain ol'' TypeScript types:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以给任何类型添加品牌了。为了完整起见，这里是同样类型的内容，用于 *移除* 品牌并回到普通的 TypeScript 类型：
- en: '[PRE12]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: And this will remove the `brand` field from any branded type. Also note that
    if the type is not branded, it will not be touched!
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从任何带品牌的类型中移除 `brand` 字段。还要注意，如果类型没有品牌，它将不会受到影响！
- en: Real world usage
  id: totrans-split-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现实世界的用法
- en: Let's put this into practice. We've got a class which needs branding to identify
    its type when dealing with [mapped types](/articles/typescript-mapped-type-magic/).
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把这个应用到实践中。我们有一个需要通过[映射类型](/articles/typescript-mapped-type-magic/)来识别其类型的类。
- en: 'For simplicity, lets boil the class down to a `Dog` class:'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，让我们将这个类简化为一个 `Dog` 类：
- en: '[PRE13]'
  id: totrans-split-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: TypeScript won't let us construct a branded dog 😢 . We're going to need to do
    some casting using the constructor to brand the *constructor* rather than the
    *class* itself.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 不允许我们构造一个带有品牌的狗 😢 。我们需要使用构造函数进行一些类型转换，这样可以给 *构造函数* 而不是 *类* 自身添加品牌。
- en: '[PRE14]'
  id: totrans-split-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `addBrand` function takes a constructor of a class and casts it to a branded
    type. This essentially makes an alias for the `Dog` class which can be used in
    exactly the same way as the `Dog` class, e.g. calling `new` on it.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`addBrand` 函数接受一个类的构造函数并将其转换为带有品牌的类型。这本质上是为 `Dog` 类创建一个别名，它可以与 `Dog` 类完全相同的方式使用，例如在其上调用
    `new`。'
- en: 'We can `export` the `DogBranded` type to allow the outer world to use our class
    whilst ensuring it''s always branded:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以 `export` `DogBranded` 类型以允许外部世界使用我们的类，同时确保它始终是带品牌的：
- en: '[PRE15]'
  id: totrans-split-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Likewise, we can do the same for brand removal:'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以对去除品牌的操作做同样的处理：
- en: '[PRE16]'
  id: totrans-split-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This simply removes the brand by casting the type to a type mapped without the
    brand field.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是通过将类型转换为没有 `brand` 字段的类型映射来删除品牌。
- en: 'And there we go: a sure-fire way to brand and un-brand your types in TypeScript
    😃'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们来了：在 TypeScript 中创建和移除类型品牌的绝佳方法 😃
- en: We've published this work as a library which you can access via [NPM](https://www.npmjs.com/package/@prosopo/ts-brand)!
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将此工作发布为一个库，您可以通过[NPM](https://www.npmjs.com/package/@prosopo/ts-brand)访问！
- en: At Prosopo, we're using TypeScript branding to fortify our types and do clever
    type mapping for our soon-to-be-released runtime type validator. Stay tuned for
    updates!
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Prosopo，我们正在使用 TypeScript 的品牌技术来强化我们的类型，并为即将发布的运行时类型验证器进行智能类型映射。敬请期待更新！
- en: '**[PART 1: TypeScript Mapped Type Magic](/articles/typescript-mapped-type-magic/)**'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**[第一部分：TypeScript 映射类型的魔法](/articles/typescript-mapped-type-magic/)**'
- en: '* * *'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
