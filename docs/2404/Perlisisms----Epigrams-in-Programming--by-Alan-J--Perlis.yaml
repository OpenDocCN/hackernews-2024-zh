- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 13:17:16'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 13:17:16'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Perlisisms - "Epigrams in Programming" by Alan J. Perlis
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Perlis 程序设计箴言 - Alan J. Perlis
- en: 来源：[https://www.cs.yale.edu/homes/perlis-alan/quotes.html](https://www.cs.yale.edu/homes/perlis-alan/quotes.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.cs.yale.edu/homes/perlis-alan/quotes.html](https://www.cs.yale.edu/homes/perlis-alan/quotes.html)
- en: '* * *'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: EPIGRAMS IN PROGRAMMING
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序设计箴言
- en: '* * *'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 1\. One man's constant is another man's variable.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 一个人的常数是另一个人的变量。
- en: '2\. Functions delay binding; data structures induce binding. Moral: Structure
    data late in the programming process.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 函数延迟绑定；数据结构引导绑定。寓意：在程序设计的最后阶段才构建数据结构。
- en: 3\. Syntactic sugar causes cancer of the semicolon.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 语法糖导致分号癌。
- en: 4\. Every program is a part of some other program and rarely fits.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 每个程序都是其他程序的一部分，很少完全适合。
- en: 5\. If a program manipulates a large amount of data, it does so in a small number
    of ways.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 如果一个程序操作大量数据，它只会以少量方式进行。
- en: 6\. Symmetry is a complexity-reducing concept (co-routines include subroutines);
    seek it everywhere.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 对称性是一个减少复杂性的概念（协程包括子例程）；到处寻找它。
- en: 7\. It is easier to write an incorrect program than understand a correct one.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 编写一个错误的程序比理解一个正确的程序更容易。
- en: 8\. A programming language is low level when its programs require attention
    to the irrelevant.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 当一个编程语言的程序需要关注无关紧要的事情时，它就是低级的。
- en: 9\. It is better to have 100 functions operate on one data structure than 10
    functions on 10 data structures.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 9\. 与其在10种数据结构上使用10个函数，不如在一个数据结构上使用100个函数更好。
- en: '10\. Get into a rut early: Do the same process the same way. Accumulate idioms.
    Standardize. The only difference(!) between Shakespeare and you was the size of
    his idiom list - not the size of his vocabulary.'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 10\. 早点陷入固定思维：以同样的方式执行同一个过程。积累习语。标准化。你和莎士比亚的唯一差异(!)是他的习语列表的大小 - 而不是他的词汇量大小。
- en: 11\. If you have a procedure with ten parameters, you probably missed some.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 11\. 如果你有一个带有十个参数的过程，你可能错过了一些。
- en: 12\. Recursion is the root of computation since it trades description for time.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 12\. 递归是计算的根本，因为它通过时间来交换描述。
- en: 13\. If two people write exactly the same program, each should be put into microcode
    and then they certainly won't be the same.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 13\. 如果两个人写了完全相同的程序，那么每个程序都应该被置于微码中，这样它们就肯定不会相同。
- en: 14\. In the long run every program becomes rococo - then rubble.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 14\. 从长远来看，每个程序最终都会成为装饰华丽的废墟。
- en: 15\. Everything should be built top-down, except the first time.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 15\. 所有事情都应该自顶向下构建，除了第一次。
- en: '16\. Every program has (at least) two purposes: the one for which it was written,
    and another for which it wasn''t.'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 16\. 每个程序至少有两个目的：一个是为了它写成的原因，另一个是它并不为所写。
- en: 17\. If a listener nods his head when you're explaining your program, wake him
    up.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 17\. 如果一个听众在你解释程序时点头，那么就把他从梦中唤醒。
- en: 18\. A program without a loop and a structured variable isn't worth writing.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 18\. 一个没有循环和结构化变量的程序不值得编写。
- en: 19\. A language that doesn't affect the way you think about programming, is
    not worth knowing.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 19\. 一种不影响你对编程思考的语言，不值得学习。
- en: '20\. Wherever there is modularity there is the potential for misunderstanding:
    Hiding information implies a need to check communication.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 20\. 只要存在模块化，就存在误解的可能性：隐藏信息意味着需要检查通信。
- en: 21\. Optimization hinders evolution.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 21\. 优化阻碍了进化。
- en: 22\. A good system can't have a weak command language.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 22\. 一个好的系统不能有一个弱的命令语言。
- en: 23\. To understand a program you must become both the machine and the program.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 23\. 要理解一个程序，你必须成为机器和程序的一部分。
- en: 24\. Perhaps if we wrote programs from childhood on, as adults we'd be able
    to read them.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 24\. 或许如果我们从小就开始写程序，作为成年人我们能够阅读它们。
- en: 25\. One can only display complex information in the mind. Like seeing, movement
    or flow or alteration of view is more important than the static picture, no matter
    how lovely.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 25\. 只有在头脑中才能展示复杂信息。如同视觉一样，动态或流动的观点变化比静态图像更重要，无论静态图像多么美丽。
- en: 26\. There will always be things we wish to say in our programs that in all
    known languages can only be said poorly.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 26\. 总会有我们希望在程序中表达的东西，在所有已知的语言中只能表达得很差劲。
- en: 27\. Once you understand how to write a program get someone else to write it.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 27\. 一旦你理解了如何编写程序，让别人去写它。
- en: 28\. Around computers it is difficult to find the correct unit of time to measure
    progress. Some cathedrals took a century to complete. Can you imagine the grandeur
    and scope of a program that would take as long?
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 28\. 在计算机周围很难找到正确的时间单位来衡量进展。有些大教堂需要一个世纪才能完成。你能想象需要如此长时间的一个程序的宏伟和范围吗？
- en: 29\. For systems, the analogue of a face-lift is to add to the control graph
    an edge that creates a cycle, not just an additional node.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 29\. 对于系统而言，面部提升的类比是向控制图添加一个创建循环的边，而不仅仅是添加额外的节点。
- en: 30\. In programming, everything we do is a special case of something more general
    -- and often we know it too quickly.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 30.在编程中，我们所做的一切都是更一般情况的特例 —— 而且通常我们知道得太快了。
- en: 31\. Simplicity does not precede complexity, but follows it.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 31\. 简单并不先于复杂，而是在复杂之后。
- en: 32\. Programmers are not to be measured by their ingenuity and their logic but
    by the completeness of their case analysis.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 32.程序员的衡量不在于他们的机智和逻辑，而在于他们案例分析的完整性。
- en: 33\. The eleventh commandment was "Thou Shalt Compute" or "Thou Shalt Not Compute"
    - I forget which.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 33.第十一诫命是“你应计算”还是“你不应计算” —— 我忘了。
- en: 34\. The string is a stark data structure and everywhere it is passed there
    is much duplication of process. It is a perfect vehicle for hiding information.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 34.字符串是一种严格的数据结构，它到处传递时存在大量的过程重复。它是隐藏信息的完美载体。
- en: '35\. Everyone can be taught to sculpt: Michelangelo would have had to be taught
    not to. So it is with great programmers.'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 35.每个人都可以学会雕刻：米开朗基罗必须被教导不要雕刻。伟大的程序员也是如此。
- en: 36\. The use of a program to prove the 4-color theorem will not change mathematics
    - it merely demonstrates that the theorem, a challenge for a century, is probably
    not important to mathematics.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 36.使用程序证明四色定理不会改变数学 —— 它仅仅证明了这个已经挑战了一个世纪的定理可能对数学并不重要。
- en: 37\. The most important computer is the one that rages in our skulls and ever
    seeks that satisfactory external emulator. The standarization of real computers
    would be a disaster - and so it probably won't happen.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 37\. 最重要的计算机是我们脑中的那一台，它始终寻求令人满意的外部仿真器。现实计算机的标准化将是一场灾难 —— 所以这可能不会发生。
- en: 38\. Structured Programming supports the law of the excluded middle.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 38\. 结构化编程支持排中律。
- en: '39\. Re graphics: A picture is worth 10K words - but only those to describe
    the picture. Hardly any sets of 10K words can be adequately described with pictures.'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 39\. 图形方面：一幅图值得一万字，但只有用来描述这幅图的那些字。几乎没有一组一万字可以充分描述出图画。
- en: 40\. There are two ways to write error-free programs; only the third one works.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 40\. 编写无错误程序有两种方法；只有第三种方法有效。
- en: 41\. Some programming languages manage to absorb change, but withstand progress.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 41.有些编程语言设法吸收变化，但抵制进步。
- en: 42\. You can measure a programmer's perspective by noting his attitude on the
    continuing vitality of FORTRAN.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 42\. 程序员的视角可以通过他对FORTRAN持续活力的态度来衡量。
- en: 43\. In software systems, it is often the early bird that makes the worm.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 43\. 在软件系统中，常常是早起的鸟儿捉到虫子。
- en: 44.Sometimes I think the only universal in the computing field is the fetch-execute
    cycle.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 44.在计算领域，有时我认为唯一的普遍性是取指-执行周期。
- en: 45\. The goal of computation is the emulation of our synthetic abilities, not
    the understanding of our analytic ones.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 45.计算的目标是仿真我们的综合能力，而不是理解我们的分析能力。
- en: 46\. Like punning, programming is a play on words.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 46.像双关语一样，编程是对词语的游戏。
- en: 47\. As Will Rogers would have said, "There is no such thing as a free variable."
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 47\. 正如威尔·罗杰斯可能会说的那样，“没有自由变量”。
- en: 48\. The best book on programming for the layman is "Alice in Wonderland"; but
    that's because it's the best book on anything for the layman.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 48\. 面向外行的最佳编程书籍是《爱丽丝梦游仙境》；但这是因为对外行来说，它是关于任何事情的最佳书籍。
- en: '49\. Giving up on assembly language was the apple in our Garden of Eden: Languages
    whose use squanders machine cycles are sinful. The LISP machine now permits LISP
    programmers to abandon bra and fig-leaf.'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 49.放弃汇编语言是我们伊甸园中的苹果：那些浪费机器周期的语言是罪恶的。现在的LISP机器允许LISP程序员放弃胸罩和无花果叶。
- en: 50\. When we understand knowledge-based systems, it will be as before -- except
    our fingertips will have been singed.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 50\. 当我们理解基于知识的系统时，一切将如过去一样 —— 除了我们的指尖可能已经被烧焦。
- en: 51\. Bringing computers into the home won't change either one, but may revitalize
    the corner saloon.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 51.把计算机带入家庭不会改变其中的任何一个，但可能会振兴街角的酒吧。
- en: 52\. Systems have sub-systems and sub-systems have sub- systems and so on ad
    infinitum - which is why we're always starting over.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 52.系统有子系统，子系统有子系统，如此无穷无尽 - 这就是为什么我们总是重新开始。
- en: 53\. So many good ideas are never heard from again once they embark in a voyage
    on the semantic gulf.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 53\. 许多好主意一旦涉足语义鸿沟的航程，很少再有人听说过。
- en: 54\. Beware of the Turing tar-pit in which everything is possible but nothing
    of interest is easy.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 54\. 要当心图灵沥青坑，那里一切皆有可能，但没有任何有趣的东西是容易的。
- en: 55\. A LISP programmer knows the value of everything, but the cost of nothing.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 55\. LISP程序员知道一切的价值，但不知道成本。
- en: 56\. Software is under a constant tension. Being symbolic it is arbitrarily
    perfectible; but also it is arbitrarily changeable.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 56\. 软件处于不断的张力中。作为符号化的东西，它是任意可完善的；但同时它也是任意可变的。
- en: 57\. It is easier to change the specification to fit the program than vice versa.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 57\. 更改规范以适应程序比反过来更容易。
- en: 58\. Fools ignore complexity. Pragmatists suffer it. Some can avoid it. Geniuses
    remove it.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 58\. 愚人忽略复杂性。实用主义者忍受它。有些人能够避免它。天才们消除它。
- en: 59\. In English every word can be verbed. Would that it were so in our programming
    languages.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 59\. 在英语中，每个词都可以动词化。但愿我们的编程语言也能如此。
- en: 60\. In seeking the unattainable, simplicity only gets in the way.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 60\. 在寻求不可达到的目标时，简单只会妨碍前进。
- en: 61\. In programming, as in everything else, to be in error is to be reborn.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 61\. 在编程中，就像在其他一切中一样，犯错误意味着重生。
- en: 62\. In computing, invariants are ephemeral.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 62\. 在计算中，不变量是短暂的。
- en: 63\. When we write programs that "learn", it turns out that we do and they don't.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 63\. 当我们编写“学习”程序时，我们发现我们确实在学习，而它们并没有。
- en: '64\. Often it is the means that justify the ends: Goals advance technique and
    technique survives even when goal structures crumble.'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 64\. 往往是手段证明了目的：目标推动技术，而技术即使在目标结构崩溃时也能生存下来。
- en: '65\. Make no mistake about it: Computers process numbers - not symbols. We
    measure our understanding (and control) by the extent to which we can arithmetize
    an activity.'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 65\. 不要弄错了：计算机处理数字 - 而不是符号。我们通过能够对活动进行算术化的程度来衡量我们的理解（和控制）。
- en: 66\. Making something variable is easy. Controlling duration of constancy is
    the trick.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 66\. 使某物变量很容易。控制持续恒定的时间才是诀窍。
- en: 67\. Think of all the psychic energy expended in seeking a fundamental distinction
    between "algorithm" and "program".
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 67\. 想想为寻找“算法”和“程序”之间的基本区别所消耗的所有心理能量。
- en: 68\. If we believe in data structures, we must believe in independent (hence
    simultaneous) processing. For why else would we collect items within a structure?
    Why do we tolerate languages that give us the one without the other?
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 68\. 如果我们相信数据结构，我们必须相信独立（因此同时）处理。否则我们为什么要在结构内部收集项目？为什么我们容忍那些只有一个而没有另一个的语言呢？
- en: 69\. In a 5 year period we get one superb programming language. Only we can't
    control when the 5 year period will be.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 69\. 在5年的时间里，我们可以得到一个出色的编程语言。唯一不能控制的是这5年的时间将是何时。
- en: 70\. Over the centuries the Indians developed sign language for communicating
    phenomena of interest. Programmers from different tribes (FORTRAN, LISP, ALGOL,
    SNOBOL, etc.) could use one that doesn't require them to carry a blackboard on
    their ponies.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 70\. 几个世纪以来，印度人为交流感兴趣的现象发展出手语。来自不同部落的程序员（FORTRAN、LISP、ALGOL、SNOBOL等）可以使用一种不需要他们在小马上携带黑板的语言。
- en: '71\. Documentation is like term insurance: It satisfies because almost no one
    who subscribes to it depends on its benefits.'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 71\. 文档就像终身保险：它满足了因为几乎没有人依赖其利益而订阅它。
- en: 72\. An adequate bootstrap is a contradiction in terms.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 72\. 充足的自举是个矛盾说法。
- en: '73\. It is not a language''s weakness but its strengths that control the gradient
    of its change: Alas, a language never escapes its embryonic sac.'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 73\. 控制语言变化梯度的不是它的弱点而是它的优势：哎，一种语言永远无法逃脱其胎儿囊。
- en: '74\. Is it possible that software is not like anything else, that it is meant
    to be discarded: that the whole point is to see it as a soap bubble?'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 74\. 有可能软件不像任何其他东西那样，它是打算被丢弃的：整个重点是将其视为肥皂泡。
- en: '75\. Because of its vitality, the computing field is always in desperate need
    of new cliches: Banality soothes our nerves.'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 75\. 由于其活力，计算领域总是急需新的陈词滥调：平凡之物安抚了我们的神经。
- en: 76\. It is the user who should parameterize procedures, not their creators.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 76\. 应该是用户参数化过程，而不是它们的创造者。
- en: '77\. The cybernetic exchange between man, computer and algorithm is like a
    game of musical chairs: The frantic search for balance always leaves one of the
    three standing ill at ease.'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 77\. 人与计算机和算法之间的控制论交换就像一场音乐椅游戏：疯狂的平衡搜索总会让其中一方感到不适。
- en: 78\. If your computer speaks English, it was probably made in Japan.
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 78\. 如果你的计算机说英语，它可能是在日本制造的。
- en: 79\. A year spent in artificial intelligence is enough to make one believe in
    God.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 79\. 在人工智能领域度过一年足以使一个人相信上帝的存在。
- en: 80\. Prolonged contact with the computer turns mathematicians into clerks and
    vice versa.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 80\. 长时间接触计算机会把数学家变成文员，反之亦然。
- en: 81\. In computing, turning the obvious into the useful is a living definition
    of the word "frustration".
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 81\. 在计算中，将显而易见的事物转化为有用的东西是对“挫折”一词的生动定义。
- en: '82\. We are on the verge: Today our program proved Fermat''s next-to-last theorem.'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 82\. 我们正处于边缘：今天我们的程序证明了费马的倒数第二定理。
- en: 83\. What is the difference between a Turing machine and the modern computer?
    It's the same as that between Hillary's ascent of Everest and the establishment
    of a Hilton hotel on its peak.
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 83\. 图灵机与现代计算机之间有什么区别？这就像希拉里登上珠穆朗玛峰和其顶峰上建立希尔顿酒店之间的区别。
- en: '84\. Motto for a research laboratory: What we work on today, others will first
    think of tomorrow.'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 84\. 一个研究实验室的座右铭：我们今天研究的东西，别人明天会首先想到。
- en: 85\. Though the Chinese should adore APL, it's FORTRAN they put their money
    on.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 85\. 虽然中国人应该崇拜APL，但他们把钱花在FORTRAN上。
- en: 86\. We kid ourselves if we think that the ratio of procedure to data in an
    active data-base system can be made arbitrarily small or even kept small.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 86\. 如果我们认为在活动数据库系统中过程与数据的比例可以变得任意小甚至保持很小，那我们在自欺欺人。
- en: 87\. We have the mini and the micro computer. In what semantic niche would the
    pico computer fall?
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 87\. 我们有迷你计算机和微型计算机。微型计算机将会落入哪个语义空间？
- en: 88\. It is not the computer's fault that Maxwell's equations are not adequate
    to design the electric motor.
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 88\. 麦克斯韦方程式不足以设计电动机，并非计算机的错。
- en: 89\. One does not learn computing by using a hand calculator, but one can forget
    arithmetic.
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 89\. 一个人不会通过使用手持计算器来学习计算机，但可以忘记算术。
- en: 90\. Computation has made the tree flower.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 90\. 计算使得树木开花。
- en: 91\. The computer reminds one of Lon Chaney -- it is the machine of a thousand
    faces.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 91\. 计算机让人想起朗·钱尼——它是一个千面人的机器。
- en: '92\. The computer is the ultimate polluter: its feces are indistinguish- able
    from the food it produces.'
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 92\. 计算机是最终的污染者：其排泄物与其生产的食物无法区分。
- en: 93\. When someone says "I want a programming language in which I need only say
    what I wish done," give him a lollipop.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 93\. 当有人说“我想要一种编程语言，我只需说明我想做什么”，就给他一根棒棒糖吧。
- en: '94\. Interfaces keep things tidy, but don''t accelerate growth: Functions do.'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 94\. 接口保持整洁，但并不能加速增长：功能可以。
- en: 95\. Don't have good ideas if you aren't willing to be responsible for them.
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: 95\. 如果你不愿为自己的好点子负责，那就别提出来。
- en: 96\. Computers don't introduce order anywhere as much as they expose opportunities.
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 96\. 计算机不会在任何地方引入秩序，而更多地是暴露机会。
- en: 97\. When a professor insists computer science is X but not Y, have compassion
    for his graduate students.
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 97\. 当一位教授坚持认为计算机科学是X而不是Y时，请对他的研究生怀有同情心。
- en: 98\. In computing, the mean time to failure keeps getting shorter.
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 98\. 在计算领域，故障的平均时间越来越短。
- en: '99\. In man-machine symbiosis, it is man who must adjust: The machines can''t.'
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: 99\. 在人机共生中，必须是人去适应：机器无法做到。
- en: 100\. We will never run out of things to program as long as there is a single
    program around.
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: 100\. 只要还有一个程序在运行，我们就永远不会停止编程。
- en: '101\. Dealing with failure is easy: Work hard to improve. Success is also easy
    to handle: You''ve solved the wrong problem. Work hard to improve.'
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: 101\. 处理失败很容易：努力改进。成功也容易处理：你解决了错误的问题。努力改进吧。
- en: 102\. One can't proceed from the informal to the formal by formal means.
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: 102\. 不能通过正式手段从非正式推进到正式。
- en: 103\. Purely applicative languages are poorly applicable.
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: 103\. 纯应用语言应用性差。
- en: 104\. The proof of a system's value is its existence.
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: 104\. 一个系统存在的证明就是其价值。
- en: 105\. You can't communicate complexity, only an awareness of it.
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
  zh: 105\. 你无法传达复杂性，只能传达对其的意识。
- en: 106\. It's difficult to extract sense from strings, but they're the only communication
    coin we can count on.
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: 106\. 从字符串中提取意义很难，但它们是我们能够依赖的唯一通信货币。
- en: '107\. The debate rages on: is PL/I Bachtrian or Dromedary?'
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 107\. 辩论仍在进行：PL/I是双峰还是单峰的？
- en: 108\. Whenever two programmers meet to criticize their programs, both are silent.
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: 108\. 每当两个程序员会面批评彼此的程序时，两人都会保持沉默。
- en: 109\. Think of it! With VLSI we can pack 100 ENIACS in 1 sq. cm.
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: 109\. 想象一下！有了VLSI技术，我们可以将100台ENIAC电脑装进1平方厘米的空间里。
- en: 110\. Editing is a rewording activity.
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 110\. 编辑是一种改述活动。
- en: 111\. Why did the Roman Empire collapse? What is Latin for office automation?
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: 111\. 罗马帝国为什么崩溃？办公自动化的拉丁文是什么？
- en: 112\. Computer Science is embarrassed by the computer.
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: 112\. 计算机科学为计算机感到尴尬。
- en: 113\. The only constructive theory connecting neuroscience and psychology will
    arise from the study of software.
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: 113\. 唯一将神经科学和心理学连接起来的建设性理论将从软件研究中产生。
- en: 114\. Within a computer natural language is unnatural.
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
  zh: 114\. 在计算机内部，自然语言是不自然的。
- en: 115\. Most people find the concept of programming obvious, but the doing impossible.
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
  zh: 115\. 大多数人认为编程的概念很明显，但实际操作起来却是不可能的。
- en: 116\. You think you know when you can learn, are more sure when you can write,
    even more when you can teach, but certain when you can program.
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
  zh: 116\. 你认为你能学会的时候可以学习，当你可以写作时更加确信，甚至当你可以教授时更加确定，但当你可以编程时则完全肯定。
- en: 117\. It goes against the grain of modern education to teach children to program.
    What fun is there in making plans, acquiring discipline in organizing thoughts,
    devoting attention to detail and learning to be self-critical?
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
  zh: 117\. 教授孩子们编程违背了现代教育的潮流。在制定计划、培养组织思维纪律、专注细节和学会自我批评中，哪里有乐趣呢？
- en: 118\. If you can imagine a society in which the computer- robot is the only
    menial, you can imagine anything.
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
  zh: 118\. 如果你能想象一个社会，计算机机器人是唯一的低级工，那么你可以想象任何事情。
- en: 119\. Programming is an unnatural act.
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
  zh: 119\. 编程是一种不自然的行为。
- en: 120\. Adapting old programs to fit new machines usually means adapting new machines
    to behave like old ones.
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
  zh: 120\. 将旧程序调整以适应新机器通常意味着让新机器像旧机器一样运行。
