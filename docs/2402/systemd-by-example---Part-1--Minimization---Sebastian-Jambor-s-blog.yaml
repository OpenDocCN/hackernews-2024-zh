- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:54:21'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 'systemd by example - Part 1: Minimization - Sebastian Jambor''s blog'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://seb.jambor.dev/posts/systemd-by-example-part-1-minimization/](https://seb.jambor.dev/posts/systemd-by-example-part-1-minimization/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: November 23, 2021
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: systemd by example
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Part 1: Minimization'
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Series overview
  id: totrans-split-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This article is part of the series *systemd by example*. The following articles
    are available.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-split-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the first article in a series where I try to understand systemd by creating
    small containerized examples.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: 'systemd always has been a bit of a mystery to me. I knew that it is used for
    system initialization and for service management, but I didn’t really understand
    how it worked. Every time I tried to dig deeper, for example by looking at the
    setup of my machine or reading the docs, I was quickly overwhelmed. There are
    over 300 systemd units active on my system, and it’s not easy to know which ones
    are important and what they are used for. The man pages are comprehensive, but
    it is easy to get lost in details. Similarly for the resources online: there are
    a lot of them, but none of them really made it click for me. (Although the original
    announcement of systemd, [Rethinking PID 1](http://0pointer.de/blog/projects/systemd.html),
    cleared up quite a few things.)'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: 'What usually helps me in situations like this is to start with a minimal example
    which only contains the essentials and try to understand how this works; then
    incrementally extend it: add new features, explore things described in the documentation,
    try different settings; and finally iterate. With systemd, this seems hard to
    do at first. After all, I don’t really want to mess around with my system configuration
    if I don’t know what I’m doing. Furthermore, experimentation inevitably means
    breaking things, which I definitely don’t want to do with my live system.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: I then found this article on [how to run systemd in a container](https://developers.redhat.com/blog/2019/04/24/how-to-run-systemd-in-a-container).
    This allows me to do exactly what I want! It gives a testbed for examples and
    allows quick iteration on experiments. It’s ok to break things since it is confined
    to the container. And it’s easy to keep track of different examples by using different
    directories and version control.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: So let’s start by creating a minimal systemd example!
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '*Note*: It should be clear by now that I’m not a systemd expert, so take everything
    I write with a grain of salt. Instead of authoritative information, I hope that
    you take this article as an invitation to do your own systemd experiments.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: systemd units
  id: totrans-split-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The basic building block of systemd is a unit. Most of them are defined in
    unit files which live in `/lib/systemd/system` and `/etc/systemd/system` (the
    former is supposed to contain unit files installed by the distribution, and the
    latter unit files created by the system administrator). Every unit has a type,
    which is encoded in the file extension. There are currently eleven different unit
    types, but in this article we will only consider three of them: targets, services,
    and sockets.'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: systemd的基本构建块是一个单元。它们大多数在单元文件中定义，这些文件位于`/lib/systemd/system`和`/etc/systemd/system`（前者应包含发行版安装的单元文件，后者包含系统管理员创建的单元文件）。每个单元都有一个类型，编码在文件扩展名中。目前有十一个不同的单元类型，但在本文中我们只考虑其中的三种：目标、服务和套接字。
- en: '*Targets* are the simplest of them. systemd activates certain targets based
    on the system state. For example, there is the `bluetooth.target` which is activated
    as soon as a Bluetooth controller becomes available; the `sleep.target` which
    is activated when the system goes to sleep; and the `default.target` which is
    the unit that systemd activates at bootup.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*目标*是它们中最简单的。systemd根据系统状态激活特定的目标。例如，有`bluetooth.target`，当蓝牙控制器可用时激活；有`sleep.target`，当系统进入睡眠状态时激活；还有`default.target`，这是systemd在启动时激活的单元。'
- en: A target by itself it is pretty useless. It only becomes useful through its
    *dependencies*, which can be any other units. That’s where *services* come into
    play, which are processes that are controlled by systemd. They can be services
    in the usual sense, like an http server or an ssh daemon, which are started when
    the system boots up (by adding them as dependencies of the `default.target`).
    But a systemd service can also be any other program; for example, you could start
    a screen lock when your system goes to sleep by adding a service as a dependency
    to `sleep.target`. Then when the system wakes up again, the screen lock will still
    be running and require a password to use the system. So by adding a service unit
    as a dependency of a target, the program will be executed when the target becomes
    active. Roughly speaking, by defining a service we tell systemd *what* to do,
    and by adding it as a dependency of a target we tell systemd *when* to do it.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个目标本身是相当无用的。只有通过它的*依赖*才变得有用，它可以是任何其他单元。这就是*服务*发挥作用的地方，这些服务是由systemd控制的进程。它们可以是通常意义上的服务，比如一个http服务器或者ssh守护进程，它们在系统启动时启动（通过将它们添加为`default.target`的依赖项）。但是一个systemd服务也可以是任何其他程序；例如，你可以通过将一个服务作为`sleep.target`的依赖项，在系统进入睡眠时启动一个屏幕锁定。然后当系统再次唤醒时，屏幕锁定仍然在运行并需要输入密码才能使用系统。因此，通过将服务单元作为目标的依赖项，当目标变为活动时程序将被执行。粗略地说，通过定义一个服务，我们告诉systemd*要做什么*，通过将其作为目标的依赖项，我们告诉systemd*什么时候*去做。
- en: The final unit type we will need for our minimal example is the socket; we will
    get back to that later.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最小示例中最终需要的单元类型是套接字；稍后我们会回到这一点。
- en: Starting with a clean slate
  id: totrans-split-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从一个干净的板开始
- en: We want to create a minimal systemd example, and that means as few units as
    possible. On a real system, there are a lot of unit files, for example, there
    are 355 entries in `/lib/systemd/system` on my machine. We will get rid of all
    of this and start with nothing.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要创建一个最小的systemd示例，这意味着尽可能少的单元。在一个真实的系统上，有很多单元文件，例如，在我的机器上`/lib/systemd/system`中有355个条目。我们将摆脱所有这些，并从零开始。
- en: We’ll use a Ubuntu base image and install systemd on it, and then remove all
    unit files.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Ubuntu基础镜像，在其上安装systemd，然后删除所有单元文件。
- en: '[PRE0]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Dockerfile
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile
- en: Let’s build the image with
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用以下命令构建镜像
- en: '[PRE1]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: and then run the container with
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后用以下命令运行容器
- en: '[PRE2]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We use `--name systemd` so that we can address the container more easily later;
    `--rm` so that the container is automatically removed when we stop it, which allows
    us to iterate on our examples more easily; and `--tty` to see the output of the
    container (thanks Даниил Леонтьев for notifying me that the last parameter was
    missing in an earlier version). Note that we are using `podman` instead of `docker`
    as container runtime, since it has built-in support to run systemd; see the article
    I linked above for more details.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`--name systemd`，这样我们稍后可以更轻松地访问容器；`--rm`，这样当我们停止容器时它会自动删除，这使我们更轻松地进行示例迭代；以及`--tty`以查看容器的输出（感谢Даниил
    Леонтьев指出早期版本中缺少的最后一个参数）。请注意，我们使用`podman`而不是`docker`作为容器运行时，因为它内置支持运行systemd；更多详情请参阅我上面链接的文章。
- en: Running the container fails with the following output.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 运行容器失败，并显示以下输出。
- en: '[PRE3]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So we went a little over board and removed too much. But systemd also tells
    us what’s missing. As I mentioned above, `default.target` is the target that is
    activated when the system boots up. So let’s add it to our system.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有点过分了，移除了太多东西。但是 systemd 也告诉了我们缺少什么。如我之前所述，`default.target` 是系统启动时激活的目标。所以让我们将它添加到我们的系统中。
- en: Making the system start
  id: totrans-split-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使系统启动
- en: On a real system, `default.target` is usually a symlink to a different target
    unit. For example, on my system it points to `graphical.target`. This target has
    a dependency on a service that starts the Gnome Display Manager, so when my system
    boots up, I’m greeted with a graphical login. It has other dependencies as well.
    A lot of them. We can see them with `systemctl`, using
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实的系统中，`default.target` 通常是一个符号链接到另一个目标单元。例如，在我的系统上，它指向 `graphical.target`。该目标依赖于一个启动
    Gnome 显示管理器的服务，因此当我的系统启动时，我会看到图形化登录界面。它还有其他依赖项。非常多。我们可以使用 `systemctl` 查看它们，命令如下
- en: '[PRE4]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: On my machine, this lists 180 dependencies. They are not all direct dependencies;
    most of them are dependencies of dependencies, or dependencies of those, etc.
    As I mentioned, a real system can be overwhelming.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的机器上，这列出了 180 个依赖项。它们并非全部是直接依赖项；大多数是依赖项的依赖项，或者那些依赖项的依赖项，依此类推。正如我之前提到的，真实的系统可能会令人不知所措。
- en: For our example, let’s start with zero dependencies. We will also use a plain
    file for `default.target` instead of a symlink. Here is the simplest target I
    can think of.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，让我们从零依赖项开始。我们还将使用一个简单的文件来作为 `default.target`，而不是一个符号链接。这是我能想到的最简单的目标。
- en: '[PRE5]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: default.target
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`default.target`'
- en: Unit files are all structured like this. They contain sections (like `[Unit]`)
    and key-value pairs, called *directives*. You can learn more about which directives
    exist for each unit type in the man pages (for example, `man systemd.service`
    for services, or `man systemd.unit` for directives available for all units; use
    `man systemd.directives` if you have a directive and want to know in which man
    page it is defined).
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 单元文件都是按照这种结构的。它们包含节（例如 `[Unit]`）和键值对，称为*指令*。您可以在手册页中了解每种单元类型的存在哪些指令（例如，`man
    systemd.service` 查看服务的指令，或者 `man systemd.unit` 查看所有单元都可用的指令；如果您有指令并想知道它在哪个手册页中定义，请使用
    `man systemd.directives`）。
- en: Add the target to the image by adding a line
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加一行将目标添加到镜像中
- en: '[PRE6]'
  id: totrans-split-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: to the Dockerfile, build and start up the container, and voilà! A container
    running systemd successfully.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 到 Dockerfile 中，构建并启动容器，完成！一个成功运行 systemd 的容器。
- en: '[PRE7]'
  id: totrans-split-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Making the system stop
  id: totrans-split-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使系统停止
- en: So starting systemd works now. But stopping … not so much. Running
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 systemd 启动起来了。但是停止…… 情况就不一样了。运行
- en: 'throws an error in the container:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器中引发错误：
- en: '[PRE8]'
  id: totrans-split-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It also doesn’t exit the process. It does nothing for ten seconds, after which
    `podman` sends a `SIGKILL` to the process.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 它也不会退出进程。它在十秒钟后什么都不做，然后 `podman` 向进程发送一个 `SIGKILL`。
- en: Let’s try to fix this. First, we follow the hint that systemd has given us and
    add a `halt.target` file, again keeping it as simple as possible.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试着解决这个问题。首先，我们遵循 systemd 给出的提示，再次添加一个 `halt.target` 文件，保持尽可能简单。
- en: '[PRE9]'
  id: totrans-split-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: halt.target
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`halt.target`'
- en: (Remember to add it to the Dockerfile so that it gets copied to the image).
    If we run this container and stop it again, the error message about the missing
    `halt.target` is gone (progress!), but it still takes ten seconds for the process
    to terminate. What’s happening here? As I said before, the target itself is pretty
    useless, we need to add a service as a dependency which does the actual work.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: （记得将它添加到 Dockerfile 中，这样它就会被复制到镜像中）。如果我们运行这个容器并再次停止它，关于缺少 `halt.target` 的错误消息就消失了（进展！），但是进程仍然需要十秒钟才能终止。这里发生了什么？如我之前所说，目标本身几乎没用，我们需要将一个服务作为依赖项，该服务执行实际的工作。
- en: So let’s create our first service. The command to shut down systemd is `systemctl
    --force halt`, and we can encode it in our service unit as follows.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们创建我们的第一个服务。关闭 systemd 的命令是 `systemctl --force halt`，我们可以将它编码到我们的服务单元中，如下所示。
- en: '[PRE10]'
  id: totrans-split-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: halt.service
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`halt.service`'
- en: This unit contains a service section with the `ExecStart=` directive which tells
    systemd the command to execute when the service starts (there’s also `ExecStop=`
    to execute a command when the service stops, and `ExecReload=` for when the service
    is reloaded). The `DefaultDependencies=` directive is also new, we’ll get to that
    in a bit.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单元包含一个服务节，其中 `ExecStart=` 指令告诉 systemd 当服务启动时要执行的命令（还有 `ExecStop=` 用于当服务停止时执行命令，以及
    `ExecReload=` 用于重新加载服务时执行的命令）。`DefaultDependencies=` 指令也是新的，我们稍后会详细讨论。
- en: Now we need to tell systemd to execute `halt.service` when it reaches `halt.target`.
    We do that by adding `halt.service` as a dependency of `halt.target`, by adding
    a `Requires=` directive to the target unit file. (We will get into more details
    about defining dependencies in a later article.)
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要告诉 systemd 在达到 halt.target 时执行 `halt.service`。我们通过在目标单元文件中添加 `Requires=`
    指令将 `halt.service` 添加为 `halt.target` 的依赖项来完成这一点。（我们将在后续文章中详细介绍定义依赖关系的更多细节。）
- en: '[PRE11]'
  id: totrans-split-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: halt.target
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: halt.target
- en: 'And indeed, when we run this container and then try to stop it, this time the
    process exits immediately. It also emits a warning before exiting:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，当我们运行此容器并尝试停止它时，这次进程立即退出。在退出之前还会发出警告：
- en: '[PRE12]'
  id: totrans-split-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We will address this in the next section. But first, let’s get back to the `DefaultDependencies=no`
    line. We want a minimal example, so what happens when we remove it? If we do and
    then go through the flow of building, starting, and stopping the container, we
    get the message
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中讨论这个问题。但首先，让我们回到 `DefaultDependencies=no` 行。我们希望一个最小的示例，那么当我们移除它时会发生什么？如果我们这样做，并且通过构建、启动和停止容器的流程，我们会得到消息
- en: '[PRE13]'
  id: totrans-split-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: and the process keeps running. The reason is that services can also have dependencies
    (in fact, every systemd unit can have a dependency on any other unit), and systemd
    adds some dependencies for each service by default. One of those default dependencies
    is a requirement on `sysinit.target`. On a real system, this target ensures that
    the system is properly set up (by in turn having dependencies on units that do
    the actual set up). In our system the target doesn’t exist, so the service fails
    since the requirement cannot be met. Adding `DefaultDependencies=no` tells systemd
    not to add those default dependencies.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 并且进程继续运行。原因是服务也可以有依赖关系（实际上，每个 systemd 单元都可以依赖于任何其他单元），并且 systemd 默认为每个服务添加一些依赖关系。其中一个默认依赖关系是对
    `sysinit.target` 的要求。在真实系统上，此目标确保系统已正确设置（通过依赖于执行实际设置的单元）。在我们的系统中，此目标不存在，因此服务失败，因为无法满足要求。添加
    `DefaultDependencies=no` 告诉 systemd 不要添加这些默认依赖关系。
- en: Adding a logging system
  id: totrans-split-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个日志系统
- en: 'systemd complained about a missing journal socket above. This socket is part
    of journald, systemd’s logging framework. It receives log messages from different
    sources, like kernel logs and system logs. It also receives everything written
    to stdout and stderr of a systemd service: systemd connects those two to the journal
    by default. Once log messages are stored in journald, we can query them with `journalctl`:
    we can show all log messages stored in the journal, or we can refine our query,
    showing only logs in a certain time frame, or belonging to a certain service.
    This is really useful, especially if something is going wrong and we want to find
    out why.'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: systemd 在上面抱怨缺少日志套接字。这个套接字是 journald 的一部分，是 systemd 的日志框架。它接收来自不同来源的日志消息，如内核日志和系统日志。它还接收系统服务的标准输出(stdout)和标准错误(stderr)的所有内容：systemd
    默认将这两者连接到日志中。一旦日志消息存储在 journald 中，我们可以使用 `journalctl` 查询它们：我们可以显示存储在日志中的所有日志消息，或者我们可以细化我们的查询，仅显示某个时间段内的日志或属于某个服务的日志。这非常有用，特别是当出现问题并且我们想找出原因时。
- en: 'To start journald we need a service. This is similar to the halt service above:
    we supply the command that should be executed and then add the service as a dependency
    of a target; this time it’s the default target, since we want journald to be started
    once the container “boots”. But in addition to the service we need something else:
    a socket unit.'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动 journald，我们需要一个服务。这类似于上面的 halt 服务：我们提供应该执行的命令，然后将服务作为目标的依赖项添加进去；这次是默认的目标，因为我们希望
    journald 在容器“启动”后启动。但除了服务之外，我们还需要其他东西：一个套接字单元。
- en: In a “classical” service, for example a PostgreSQL server, a socket is set up
    in the service itself. It may be configurable by a command line setting or through
    a config file, but the actual setup is done by the service. For example, I can
    execute
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在“经典”的服务中，例如 PostgreSQL 服务器，套接字是在服务本身中设置的。可以通过命令行设置或配置文件进行配置，但实际设置是由服务完成的。例如，我可以执行
- en: '[PRE14]'
  id: totrans-split-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: and it will create PostgreSQL server listening on TCP port 2345.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 并且它将创建一个监听 TCP 端口 2345 的 PostgreSQL 服务器。
- en: systemd unties sockets from services. It makes a socket a first class concept
    that can live outside of a service. This enables for example to open a socket
    without running a service, and only start the service once there is traffic on
    the socket (we will see this in action in a later article). In a socket unit file
    we can specify different socket types to listen on, like file system sockets or
    IPv4 or IPv6 sockets. For journald, we create a socket unit with two file sockets,
    one streaming socket and one datagram socket. The filename for those are defined
    by systemd; we cannot change them, otherwise services trying to log to journald
    would fail.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: systemd将套接字与服务解绑。它将套接字作为一个可以独立存在的概念，这使得例如在没有运行服务的情况下打开套接字成为可能，只有在套接字上有流量时才启动服务（我们将在后续文章中看到这一点）。在套接字单元文件中，我们可以指定不同的套接字类型进行监听，如文件系统套接字或IPv4或IPv6套接字。对于journald，我们创建一个带有两个文件套接字的套接字单元，一个流套接字和一个数据报套接字。这些的文件名由systemd定义；我们无法更改它们，否则尝试向journald记录日志的服务将失败。
- en: '[PRE15]'
  id: totrans-split-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: systemd-journald.socket
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemd-journald.socket`'
- en: Then we create a service unit, specifying the socket unit which should be passed
    in.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个服务单元，指定应传递的套接字单元。
- en: '[PRE16]'
  id: totrans-split-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: systemd-journald.service
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemd-journald.service`'
- en: And finally we add the service as a dependency to our default target.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将服务作为默认目标的依赖项添加。
- en: '[PRE17]'
  id: totrans-split-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: default.target
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`default.target`'
- en: With this, when we run the container, journald is started automatically.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，当我们运行容器时，journald会自动启动。
- en: '[PRE18]'
  id: totrans-split-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can execute `journalctl` on the container to see what has been logged:'
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在容器上执行`journalctl`以查看已记录的内容：
- en: '[PRE19]'
  id: totrans-split-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-split-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It’s not much, just two log statements from journald itself and one from systemd.
    But if we had other services, their output would show up here as well.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这不多，只是来自journald本身的两个日志声明和一个来自systemd的日志声明。但如果我们有其他服务，它们的输出也会显示在这里。
- en: And finally, when we shut down the container, it does so immediately and without
    warnings.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在关闭容器时，它会立即关闭而没有警告。
- en: Future proofing
  id: totrans-split-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 未来的保障
- en: As a final touch, we will add a sysinit target. This is not strictly required,
    but it’s useful if we want to add further services later. All services have a
    default dependency on this target, so if it is missing, the service will fail
    to start; we saw this above for `halt.service`.
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将添加一个`sysinit`目标。这并非严格必需，但如果我们想稍后添加更多服务，它会很有用。所有服务都默认依赖于此目标，因此如果缺少它，服务将无法启动；我们在`halt.service`中已经看到了这一点。
- en: On a real system, `sysinit.target` is activated during bootup, and it has a
    lot of direct and indirect dependencies which are responsible for setting up the
    system. For us, no setup is needed, so we keep it as simple as possible.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实系统中，`sysinit.target`在引导过程中被激活，并且有很多直接和间接的依赖关系负责设置系统。对我们来说，不需要任何设置，所以我们保持尽可能简单。
- en: '[PRE21]'
  id: totrans-split-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: sysinit.target
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`sysinit.target`'
- en: Then we add it as a dependency of default.target. (On a real system, it is not
    a direct dependency, but instead a dependency of a dependency of a dependency
    etc.)
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将其添加为`default.target`的依赖项。（在实际系统中，它不是直接的依赖项，而是依赖于依赖于依赖等等的依赖项。）
- en: '[PRE22]'
  id: totrans-split-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: default.target
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`default.target`'
- en: And that’s it! A functioning, minimal systemd setup.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！一个功能完备的、最小化的systemd设置。
- en: Conclusion
  id: totrans-split-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: Let’s review what we have created. We have a `default.target` which is activated
    when the container starts. This target pulls in `systemd-journald.service` which
    sets up journald (with the help of `systemd-journald.socket`), so that services
    have something to log to. It also pulls in `sysinit.target` which will allow us
    to easily add service units later. On the other end, we have `halt.target` which
    is activated when the system is supposed to shut down, and which pulls in `halt.service`
    to do the actual shutdown.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们所创建的内容。我们有一个`default.target`，在容器启动时被激活。这个目标引入了`systemd-journald.service`，设置了journald（借助于`systemd-journald.socket`），以便服务有东西可以记录。它还引入了`sysinit.target`，这将使我们能够轻松地添加服务单元。另一方面，我们有`halt.target`，在系统准备关闭时被激活，并引入了`halt.service`来执行实际的关闭操作。
- en: Combined, the files have less than 30 lines; here are they again in their entirety
    (you can also find them on [GitHub](https://github.com/sgrj/systemd-by-example/tree/main/minimization)).
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件总共不到30行；以下是它们的完整内容（您也可以在[GitHub](https://github.com/sgrj/systemd-by-example/tree/main/minimization)上找到它们）。
- en: '[PRE23]'
  id: totrans-split-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: default.target
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`default.target`'
- en: '[PRE24]'
  id: totrans-split-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: systemd-journald.service
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemd-journald.service`'
- en: '[PRE25]'
  id: totrans-split-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: systemd-journald.socket
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`systemd-journald.socket`'
- en: '[PRE26]'
  id: totrans-split-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: sysinit.target
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`sysinit.target`'
- en: '[PRE27]'
  id: totrans-split-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: halt.target
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`halt.target`'
- en: '[PRE28]'
  id: totrans-split-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: halt.service
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`halt.service`'
- en: These six units are enough to make systemd run, if only barely. Of course, this
    setup is nothing what you would run in production, because it is lacking a lot
    of what makes up a real system and what makes it reliable. It is purposefully
    designed for minimalism, which I find helpful to understand new concepts.
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这六个单元足以使systemd运行，尽管勉强如此。当然，这种设置远非用于生产环境，因为它缺少组成真正系统和使其可靠所需的许多部分。它被有意设计为最小主义，这对理解新概念很有帮助。
- en: From here, we can now go in several directions. One direction is to investigate
    our minimal system further, for example with the `systemctl` utility. If you execute
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们现在可以朝多个方向前进。一个方向是进一步使用`systemctl`工具调查我们的最小系统。如果你执行
- en: '[PRE29]'
  id: totrans-split-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: you’ll see that systemd has more units than the six that we defined; you can
    then try to find out what they are used for. Or if you execute
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到systemd拥有的单元多于我们定义的六个时，你可以尝试找出它们的用途。或者，如果你执行
- en: '[PRE30]'
  id: totrans-split-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: you’ll see all dependencies of `default.target`, including all transitive dependencies.
    Again, there are more than we explicitly defined, so you could follow that path.
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到`default.target`的所有依赖项，包括所有传递依赖关系。同样，它们比我们明确定义的要多，因此你可以沿着这条路径继续探索。
- en: Another direction is to add more units to the system to understand different
    aspects of systemd. That’s what I’ll do in future articles, so stay tuned.
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个方向是向系统添加更多单元，以了解systemd的不同方面。这是我将在未来的文章中做的事情，敬请关注。
- en: —Written by Sebastian Jambor. Follow me on Mastodon [@crepels@mastodon.social](https://mastodon.social/@crepels)
    for updates on new blog posts.
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
  zh: —由Sebastian Jambor撰写。关注我的Mastodon账号[@crepels@mastodon.social](https://mastodon.social/@crepels)，获取新博文的更新信息。
