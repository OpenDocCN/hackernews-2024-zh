- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:31:18'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:31:18
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: A Plea for more Mikado - Software Engineering and Stuff
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对于更多的 Mikado 的请求 - 软件工程和其他东西
- en: 来源：[https://dmathieu.com/articles/opinions/mikado/](https://dmathieu.com/articles/opinions/mikado/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://dmathieu.com/articles/opinions/mikado/](https://dmathieu.com/articles/opinions/mikado/)
- en: One of the books that impacted the most my career is probably [The Mikado Method](https://mikadomethod.info/).
    I read it almost 10 years ago, and I don’t practice it explicitly. But I think
    of the method almost every day, and it has been impacting how I work ever since.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 影响我职业生涯最大的一本书之一可能是 [The Mikado Method](https://mikadomethod.info/)。我差不多10年前就读过了，虽然我没有明确地实践它。但我几乎每天都会想到这种方法，自那以后它一直影响着我的工作方式。
- en: And yet, it has remained something quite obscure. Whenever folks suggest must-read
    computer science books, it’s never there. So let’s try to explain it a bit more,
    and how it can be used every day in the life of a programmer.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它仍然是一件相当隐晦的事情。每当有人建议必读的计算机科学书籍时，它从来没有出现过。所以让我们试着更详细地解释一下，以及它如何在程序员的日常生活中每天都可以使用。
- en: What is the Mikado Method?
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 Mikado 方法？
- en: If you ever worked on a large refactoring project, library switch or upgrade,
    you may have ended up working in a branch for weeks (or months).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经在一个大型重构项目、库切换或升级上工作过，你可能最终会在一个分支上工作数周（或数月）。
- en: You need to regularly rebase against the main branch (or have everybody working
    on the same branch), and may end up spending more time fixing conflicts than actually
    working on the change.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要定期地与主分支重新基础（或者让所有人都在同一个分支上工作），可能最终会花更多的时间来解决冲突，而不是真正地处理变化。
- en: 'But somehow you move forward, and one day you are ready to ship that huge change.
    The biggest bet still lays ahead of you though: will there be performance changes?
    Did we miss something? Were there unknown bugs?'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你以某种方式前进了，有一天你准备好推出那个巨大的变化。但最大的赌注仍然摆在你面前：性能会有变化吗？我们有没有遗漏什么？是否存在未知的错误？
- en: In my experience, every big bang change always ends up in at least one cycle
    of reverting and going back to the PR, and a non-trivial number of them were not
    shipped at all.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，每一次大规模的变化最终都会至少经历一轮的回滚和返回到 PR，而其中一部分是根本没有被部署的。
- en: The Mikado Method is a framework to make that kind of refactoring manageable.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Mikado 方法是一个框架，用于管理这种重构。
- en: The idea is to split things into atomic changes. Each of these changes will
    be shipped right away, on its own.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 思想是将事情分解为原子级的变化。每个这样的变化都将立即被推出。
- en: Let’s say you’re working on a Ruby on Rails application which hasn’t been upgraded
    in several years. So you need to go from Rails 4 to Rails 7 (wow!).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，你正在开发一个 Ruby on Rails 应用程序，这个应用程序已经多年没有升级了。所以你需要从 Rails 4 升级到 Rails 7（哇！）。
- en: Let’s do it with some mikado!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一些 Mikado 方法来做吧！
- en: The first step will be to locally upgrade the rails dependency in your `Gemfile`
    to the final version you want to run on.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步将是在你的 `Gemfile` 中本地升级 Rails 依赖项到你想要运行的最终版本。
- en: On a paper, draw a rectangle (or a circle, anything) and write down a couple
    words about the task you’ve just down, such as `upgrade rails in Gemfile`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在一张纸上，画一个矩形（或一个圆形，任何东西），然后写下你刚刚完成的任务的几个词，比如 `在 Gemfile 中升级 rails`。
- en: Now, run your unit test suite. Obviously, there will be lots of failures.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行你的单元测试套件。显然，会有很多失败。
- en: Go through each failure, and for each of them write a new rectangle on the paper,
    with a (very) short description of what you would have to do to fix that issue.
    If the cause is unknown at that point, you can also write down the failure itself,
    to be investigated.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 逐个解决每个失败，并针对每个失败在纸上写一个新的矩形，简要描述你需要做什么来解决这个问题。如果在那时原因不明，你也可以写下失败本身，以便进行调查。
- en: Link each rectangle to the parent one, as can be seen in the example image below.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个矩形链接到父级，就像下面的示例图片中所示。
- en: Then, **revert your changes**. Delete everything!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，**撤销你的更改**。删除一切！
- en: And I really mean revert, not move to a new branch or squash. If you feel this
    change took you too long to just be deleted, it means it wasn’t atomic enough
    and you need to split it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的是指回滚，而不是移到一个新的分支或压缩。如果你觉得这个变化花了你太长时间才能被删除，那意味着它不够原子化，你需要把它拆分开来。
- en: Now, pick one of the failures you wrote down, any of them and try to fix it
    in the current codebase, without the original upgrade.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，选择你写下的失败中的一个，任何一个，试着在当前代码库中修复它，而不是原始的升级。
- en: Doing so may require some refactoring or more changes. In that case, **don’t
    do them**. Write them on your paper, delete everything and start implementing
    them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做可能需要一些重构或更多的变化。在这种情况下，**不要去做**。将它们写在纸上，删除所有内容，然后开始实现它们。
- en: Similarly, if after fixing the problem, there are still failures, write them
    down, link them to the issue you were just trying to fix and delete everything.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，如果修复了问题后，仍然存在失败，请写下它们，将它们链接到你刚刚试图修复的问题，并删除所有内容。
- en: And iterate from there against every failure, refactoring or change you need.
    If you discover a new issue, write it down and delete everything.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里开始迭代处理每一个失败，重构或者你需要的任何变化。如果你发现了一个新的问题，写下它并删除一切。
- en: At some point, you will get a fix which actually works and for which all your
    tests pass. **Ship that change**!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时候，你会得到一个真正有效的修复，所有的测试都通过了。**推出这个变化**！
- en: And move on to the next failure.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 并继续进行下一个失败的处理。
- en: Over time, you will get more and more actual fixes, and less and less reverts.
    Until all there is left to do is to make the change where you actually change
    the content of your Gemfile to upgrade the dependency version.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，你会得到越来越多的实际修复，而回滚的次数会越来越少。直到你只需要做的是更改你的 Gemfile 中的内容以升级依赖版本。
- en: At that point, your application supports both versions, making that change very
    small and trivial to ship. Do it of course!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在那一点上，你的应用程序支持两个版本，使得这个变化非常小，而且很容易推出。当然要做！
- en: Obviously, the Mikado Method cannot work if you don’t have a good and highly
    reliable automated test suite.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，如果你没有一个好的、高度可靠的自动化测试套件，Mikado 方法是无法工作的。
- en: Wow dude, this is too much
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哇，伙计，这太多了。
- en: It absolutely is. And I haven’t heard of anyone following this process to the
    letter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对是这样的。我从来没有听说过有人完全按照这个流程操作过。
- en: But processes aren’t meant to be followed to the letter. They are meant to provide
    a frame. Once that process is fully understood, getting out of it can be beneficial,
    to adapt it to your own needs, while retaining the core ideas and goals of that
    process.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，流程并不是要完全照着做。它们的目的是提供一个框架。一旦这个流程被完全理解，摆脱它可能是有益的，以适应你自己的需求，同时保留这个流程的核心思想和目标。
- en: In the case of the Mikado method, I think the biggest takeaways are to ship
    atomic changes, and not be afraid to drop things if they derail.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mikado 方法的情况下，我认为最重要的收获是要提交原子更改，并且不要害怕放弃偏离主题的东西。
- en: Atomic Everything
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原子化一切
- en: There’s nothing worst (well &mldr;) than seeing a Pull Request describing something,
    but where other unrelated (yet relevant) changes crept in.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 没有比看到一个描述某事的 Pull Request 更糟糕的事情（当然还有&mldr;） ，但其中渗入了其他无关（但相关）的更改。
- en: Whenever I am working on something, and I notice something else in the same
    bit of the codebase which should be changed or refactored, I take a note of it,
    and come back to it once my original change is ready for review.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我在做一些事情时，我注意到代码库的同一个部分中有其他需要更改或重构的地方，我会记下来，等到我的原始更改准备好进行审查时再回来处理它们。
- en: I see this as a lighter way of doing Mikado. And yet, everything in a PR is
    related to the same thing, making its review much easier.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这是一种更轻松的做法，类似于 Mikado 方法。然而，PR 中的每一项都与同一件事情相关联，这使得审查变得更加容易。
- en: One way to cheat about this would be to name the PR “do this and that”. Well,
    don’t!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一种欺骗的方法是将 PR 命名为“做这个和那个”。嗯，不要这样做！
- en: If your PR includes an `and`, there should be two of them (the same goes for
    issues).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 PR 包含一个`and`，那么应该有两个（同样适用于问题）。
- en: 'The gist of it is: split everything you do into the smallest bit possible,
    and ship all those bits independently.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 其核心是：将你做的每一件事情分解为尽可能小的部分，并独立地提交所有这些部分。
- en: A failure of an example
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个失败的例子
- en: Here is an example why thinking about everything atomically is safer. At $PREVIOUS_EMPLOYER,
    we wanted to migrate from Opentracing to OpenTelemetry.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关于以原子方式思考为何更安全的例子。在$PREVIOUS_EMPLOYER，我们希望从 Opentracing 迁移到 OpenTelemetry。
- en: Both libraries are quite similar, but we had some heavy internal things that
    couldn’t work exactly the same between both of them, so we wanted to ensure there
    were no performance regression with the change.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个库非常相似，但我们之间有一些重要的内部差异，这些差异使得两者之间无法完全相同，因此我们希望确保更改不会导致性能下降。
- en: Hence we decided to do a big bang PR to be able to run performance tests.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们决定进行一次大规模的 PR，以便进行性能测试。
- en: I worked for over a month just making the appropriate changes, the PR was huge,
    and then I worked for another month just on the benchmarks.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我花了一个多月的时间进行适当的更改，PR 很庞大，然后我又花了一个月的时间只是在基准测试上进行工作。
- en: Until we were ready to ship the change.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 直到我们准备好进行更改。
- en: Due to errors unseen before and uncaught by unit tests, Wwe shipped and reverted
    3 times before deciding to drop a quarter of work and restart from scratch with
    small PRs we could ship daily.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于以前未曾见过的错误，并且没有被单元测试捕获，我们在决定放弃四分之一的工作并重新开始使用我们每天都可以提交的小型 PR 之前，已经发货并撤销了 3 次。
- en: To be fair, this quarter wasn’t entirely lost, since it brought us benchmarks
    we wouldn’t have had this soon were it not for a big bang change. But the frustration
    was there anyway. And I am sure that if we had decided to keep on trying to ship
    that big bang PR, we would have ended up reverting more than 10 times.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话，这个季度并没有完全白费，因为它为我们带来了我们不会这么快拥有的基准测试。但是，挫折还是存在的。我相信，如果我们决定继续尝试提交那个大规模的 PR，我们最终会撤销超过
    10 次。
- en: Delete your WIP code
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除你的 WIP 代码
- en: I am sometimes stuck into a fix that seems daunting. The more I fix things,
    the more there are to fix, and it seems like I’m never going to get over it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候我会陷入一个看似艰巨的困境。我越是修复东西，需要修复的东西就越多，而且似乎我永远无法解决。
- en: Well, this is exactly the kind of moment where deleting everything and starting
    from scratch again is highly beneficial.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这正是删除一切并从头开始的时刻。高度有益。
- en: Once again, I do mean **delete**. Not squash or branch off of. There is a real
    psychological value in deleting a change where you’re stuck to start fresh.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 再说一次，我是指**删除**。不是压缩或从分支中分离出来。在删除你被卡住的变更并重新开始时，确实存在着真正的心理价值。
- en: However, when you do that, you should start working on the new fix right away.
    Don’t wait for a couple days.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当你这样做时，你应该立即开始着手新的修复工作。不要等几天再开始。
- en: You don’t have the code available, but your mind is still there. That’s what’s
    going to allow you to go back there much more quicker and better than you did
    the first time.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你没有代码，但你的思维仍然在那里。这将使你比第一次更快更好地回到那里。
- en: Said like this, it may seem the need to delete WIP code like this is pretty
    exceptional. I’ve personally grown to make it quite standard.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这样说起来，删除类似于这样的 WIP 代码的需要似乎相当特殊。我个人已经养成了将其视为相当标准的习惯。
- en: Whenever I spend more than 15-20 minutes stuck on something, I’m usually going
    to delete it and start fresh.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我在某件事上卡了 15-20 分钟以上，我通常会删除它并重新开始。
- en: This can only work because I am a bit extreme about making everything atomic.
    So I also very often have something that works and I can commit.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这只能起作用，因为我对使一切都变得原子化有点极端。所以我很经常有一些可以工作并且可以提交的东西。
- en: When that happens, I only delete whatever’s not been committed yet. Not all
    the unpushed commits I made earlier. Every of those atomic commits must have a
    green local test run of course.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生这种情况时，我只删除还没有提交的内容。并不是我之前制作的所有未推送的提交。当然，这些原子提交中的每一个都必须经过本地测试的验证。
- en: Conclusion
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Mikado is much like the agile method. It’s something everybody should apply
    to some degree, but not follow to the letter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Mikado 非常像敏捷方法。每个人都应该在某种程度上应用它，但不需要完全照着做。
- en: But working with it in mind provides a very good base to ship code (whether
    it be a small bugfix, or a very large refactoring) in a safe and reliable way.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，牢记这一点在安全可靠的方式下发布代码（无论是一个小的错误修复，还是一个非常大的重构）提供了一个很好的基础。
- en: It’s probably not something everybody should do as described in the book (though
    if you do try it for a large enough project, I’d be happy to hear about it). But
    I am convinced that having some experience of it will make anyone a better developer!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能不是每个人都应该按照书中描述的方式去做的（尽管如果你尝试用于一个足够大的项目，我会很乐意听到你的经验）。但我确信，对此有一些经验将使任何人成为更好的开发者！
