- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:34:27'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: perl version cheat sheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://sheet.shiar.nl/perl/](https://sheet.shiar.nl/perl/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Perl release summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most significant features introduced for recent versions of the Perl scripting
    language.
  prefs: []
  type: TYPE_NORMAL
- en: Core security support is provided for 3 years, so typical users should run at
    least [5.36](#v5036). Stable distributions such as Debian 10 maintain [5.28](#v5028)+.
    Enterprise platforms retain versions up to [5.10](#v5010).
  prefs: []
  type: TYPE_NORMAL
- en: '5.38 2023-07-02: latest stable release'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`use feature "module_true"`'
  prefs: []
  type: TYPE_NORMAL
- en: default in use 5.37 and up, also `no feature "bareword_filehandles"`
  prefs: []
  type: TYPE_NORMAL
- en: '`sub ($var ||=` default`)`'
  prefs: []
  type: TYPE_NORMAL
- en: assign values when false (or undefined on `//=`) instead of omitted
  prefs: []
  type: TYPE_NORMAL
- en: '`/(*{ … })/`'
  prefs: []
  type: TYPE_NORMAL
- en: 'optimistic eval: `(?{ … })` with regex optimisations enabled'
  prefs: []
  type: TYPE_NORMAL
- en: '`class`'
  prefs: []
  type: TYPE_NORMAL
- en: 'define object classes: packages with `field` variables and `method` subroutines
    *(feature, experimental)*'
  prefs: []
  type: TYPE_NORMAL
- en: '`${^LAST_<wbr>SUCCESSFUL_<wbr>PATTERN}`'
  prefs: []
  type: TYPE_NORMAL
- en: explicit variable to access the previous match as in `s//…/`
  prefs: []
  type: TYPE_NORMAL
- en: '`%{^HOOK}`'
  prefs: []
  type: TYPE_NORMAL
- en: perform tasks `require__before` and `require__after` when calling `require`
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v15.0
  prefs: []
  type: TYPE_NORMAL
- en: '5.36 2022-05-28: active core support'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`use v5.36`'
  prefs: []
  type: TYPE_NORMAL
- en: use `warnings`; use feature qw'`signatures isa`'; no feature qw'`indirect multidimensional
    switch`'
  prefs: []
  type: TYPE_NORMAL
- en: '`use builtin`'
  prefs: []
  type: TYPE_NORMAL
- en: namespace for interpreter functions, such as `weaken` and `blessed` from `Scalar::Util`,
    `ceil`/`floor` from `POSIX`, and `trim` like `String::Util` *(experimental)*
  prefs: []
  type: TYPE_NORMAL
- en: '`is_bool(!0)`'
  prefs: []
  type: TYPE_NORMAL
- en: distinguish scalar variable types (by `builtin` functions) for data interoperability
  prefs: []
  type: TYPE_NORMAL
- en: '`for my ($k, $v) (%hash)`'
  prefs: []
  type: TYPE_NORMAL
- en: iterate over multiple values at a time (including `builtin::indexed` for arrays)
    *(feature, experimental)*
  prefs: []
  type: TYPE_NORMAL
- en: '`defer {}`'
  prefs: []
  type: TYPE_NORMAL
- en: queue code to be executed when going out of scope *(feature, experimental)*
  prefs: []
  type: TYPE_NORMAL
- en: '`try {} finally {}`'
  prefs: []
  type: TYPE_NORMAL
- en: run code at the end of a `[try](#try)` construct regardless of failure *(feature,
    experimental)*
  prefs: []
  type: TYPE_NORMAL
- en: unicode delimiters for quoting operators *(experimental)*
  prefs: []
  type: TYPE_NORMAL
- en: '`sub ($var) {!~~pop~~}`'
  prefs: []
  type: TYPE_NORMAL
- en: '[signature](#signatures)d subs are stable, but mixing with the arguments array
    `@_` remains experimental *(feature, experimental)*'
  prefs: []
  type: TYPE_NORMAL
- en: '`$SIG{FPE}`'
  prefs: []
  type: TYPE_NORMAL
- en: floating-point exceptions no longer deferred but delivered immediately like
    other signals
  prefs: []
  type: TYPE_NORMAL
- en: perl `-g`
  prefs: []
  type: TYPE_NORMAL
- en: disable input record separator (slurp mode), alias for `-0777`
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v14.0
  prefs: []
  type: TYPE_NORMAL
- en: 5.34 2021-05-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`try {} catch`'
  prefs: []
  type: TYPE_NORMAL
- en: exception handling similar to eval blocks *(feature, experimental)*
  prefs: []
  type: TYPE_NORMAL
- en: '`/{,*n*}/`'
  prefs: []
  type: TYPE_NORMAL
- en: empty lower bound quantifier is accepted as shorthand for 0
  prefs: []
  type: TYPE_NORMAL
- en: '`\x{ … }`'
  prefs: []
  type: TYPE_NORMAL
- en: insignificant space within curly braces, also for `\b{}`, `\g{}`, `\k{}`, `\N{}`,
    `\o{}` as well as `/{m,n}/` quantifiers
  prefs: []
  type: TYPE_NORMAL
- en: '`0o0`'
  prefs: []
  type: TYPE_NORMAL
- en: octal prefix `0o` alternative to `0…` and `oct`
  prefs: []
  type: TYPE_NORMAL
- en: '`re::optimization(qr//)`'
  prefs: []
  type: TYPE_NORMAL
- en: debug regular expression optimization information discovered at compile time
  prefs: []
  type: TYPE_NORMAL
- en: '`no feature …`'
  prefs: []
  type: TYPE_NORMAL
- en: disable discouraged practices of `bareword_filehandles` and `multidimensional`
    array emulation
  prefs: []
  type: TYPE_NORMAL
- en: 5.32 2020-06-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`isa`'
  prefs: []
  type: TYPE_NORMAL
- en: infix operator to check class instance *(feature, experimental until 5.36)*
  prefs: []
  type: TYPE_NORMAL
- en: '`$min < $_ <= $max`'
  prefs: []
  type: TYPE_NORMAL
- en: chained comparison repeats inner part as `$min < $_ and $_ <= $max`
  prefs: []
  type: TYPE_NORMAL
- en: '`/\p{Name=$var}/`'
  prefs: []
  type: TYPE_NORMAL
- en: match Unicode Name property like `\N{}` but with interpolation and subpatterns
  prefs: []
  type: TYPE_NORMAL
- en: '`open F, ''+>>'', undef`'
  prefs: []
  type: TYPE_NORMAL
- en: respect append mode on temporary files with mixed access
  prefs: []
  type: TYPE_NORMAL
- en: '`no feature ''indirect''`'
  prefs: []
  type: TYPE_NORMAL
- en: disable indirect object notation such as `new Class` instead of `Class->new`
  prefs: []
  type: TYPE_NORMAL
- en: streamzip
  prefs: []
  type: TYPE_NORMAL
- en: program distributed with core IO::Compress::Base to compress stdin into a zip
    container
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v13.0
  prefs: []
  type: TYPE_NORMAL
- en: 5.30 2019-05-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`/(?<=var+)`'
  prefs: []
  type: TYPE_NORMAL
- en: variable length lookbehind assertions *(experimental until 5.36)*
  prefs: []
  type: TYPE_NORMAL
- en: '`m(\p{nv=/.*/})`'
  prefs: []
  type: TYPE_NORMAL
- en: match unicode properties by regular expressions *(experimental)*
  prefs: []
  type: TYPE_NORMAL
- en: '`~~my $state if 0~~`'
  prefs: []
  type: TYPE_NORMAL
- en: workaround for `[state](#state)` (deprecated since v5.10!) is now prohibited
  prefs: []
  type: TYPE_NORMAL
- en: '`qr''\N''`'
  prefs: []
  type: TYPE_NORMAL
- en: Delimiters must be graphemes; unescaped `{` illegal; `\N` in single quotes
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v12.1
  prefs: []
  type: TYPE_NORMAL
- en: '5.28 2018-06-22: still maintained by common vendors'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`delete %hash{…}`'
  prefs: []
  type: TYPE_NORMAL
- en: hash slices can be deleted with key+value pairs
  prefs: []
  type: TYPE_NORMAL
- en: '`/(*…)/`'
  prefs: []
  type: TYPE_NORMAL
- en: alphabetic synonyms for assertions, e.g. `(*atomic:…)` for `(?>…)` and `(*nlb:…)`
    for `(?<!…)` *(experimental until 5.31.6)*
  prefs: []
  type: TYPE_NORMAL
- en: '`/(*script_run:)/`'
  prefs: []
  type: TYPE_NORMAL
- en: enforces all characters to be from the same script *(experimental until 5.31.6)*
  prefs: []
  type: TYPE_NORMAL
- en: '`state @a`'
  prefs: []
  type: TYPE_NORMAL
- en: persistent lexical array or hash variables (in addition to [scalars](#state))
  prefs: []
  type: TYPE_NORMAL
- en: perl `-i -pe die`
  prefs: []
  type: TYPE_NORMAL
- en: 'safe in-place editing: files are replaced only after successful completion'
  prefs: []
  type: TYPE_NORMAL
- en: '`${^SAFE_LOCALES}`'
  prefs: []
  type: TYPE_NORMAL
- en: locales are thread-safe on supported systems, indicated by this variable
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v10.0
  prefs: []
  type: TYPE_NORMAL
- en: 5.26 2017-05-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`<<~EOT`'
  prefs: []
  type: TYPE_NORMAL
- en: indented here-docs, strips same whitespace before delimiter in each line
  prefs: []
  type: TYPE_NORMAL
- en: '`@{^CAPTURE}`'
  prefs: []
  type: TYPE_NORMAL
- en: array of last match's captures, so `${^CAPTURE}[0]` is `$1`
  prefs: []
  type: TYPE_NORMAL
- en: '`//xx`'
  prefs: []
  type: TYPE_NORMAL
- en: extended modifier to also ignore whitespace in bracketed character classes
  prefs: []
  type: TYPE_NORMAL
- en: '`use Test2::V0`'
  prefs: []
  type: TYPE_NORMAL
- en: generic testing framework to replace `Test::*` and `TAP::*`
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v9.0
  prefs: []
  type: TYPE_NORMAL
- en: 5.24 2016-05-09
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`printf ''%.*2$x''`'
  prefs: []
  type: TYPE_NORMAL
- en: reordered precision arguments
  prefs: []
  type: TYPE_NORMAL
- en: '`/\b{lb}/`'
  prefs: []
  type: TYPE_NORMAL
- en: line break boundary type (position suitable for hyphenation)
  prefs: []
  type: TYPE_NORMAL
- en: '`/faster/`'
  prefs: []
  type: TYPE_NORMAL
- en: various significant speedups, notably matching fixed substrings, `/i` on caseless
    languages, 64-bit arithmetic, scope overhead
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v8.0
  prefs: []
  type: TYPE_NORMAL
- en: 5.22 2015-06-01
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`\$alias =`'
  prefs: []
  type: TYPE_NORMAL
- en: aliasing via reference (scoped as of v5.25.3) *(experimental)*
  prefs: []
  type: TYPE_NORMAL
- en: '`<<>>`'
  prefs: []
  type: TYPE_NORMAL
- en: safe `readline` ignoring open flags in arguments
  prefs: []
  type: TYPE_NORMAL
- en: '`/()/n`'
  prefs: []
  type: TYPE_NORMAL
- en: flag to disable numbered capturing, turning `()` into `(?:)`
  prefs: []
  type: TYPE_NORMAL
- en: '`/\b{}/`'
  prefs: []
  type: TYPE_NORMAL
- en: 'boundary types: *gcb* (grapheme cluster), *sb* (sentence), *wb* (word)'
  prefs: []
  type: TYPE_NORMAL
- en: '`&.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`& | ^ ~` consistently numeric, dotted operators for strings *(feature, experimental
    until 5.28)*'
  prefs: []
  type: TYPE_NORMAL
- en: '`use re ''strict''`'
  prefs: []
  type: TYPE_NORMAL
- en: apply stricter syntax rules to regular expression patterns *(experimental)*
  prefs: []
  type: TYPE_NORMAL
- en: '`0x.beep+0`'
  prefs: []
  type: TYPE_NORMAL
- en: hexadecimal floating point notation with binary power; `printf '%a'` to display
  prefs: []
  type: TYPE_NORMAL
- en: '`~~??~~`'
  prefs: []
  type: TYPE_NORMAL
- en: single match shorthand (deprecated since v5.14) requires the operator `*m*?PATTERN?`
  prefs: []
  type: TYPE_NORMAL
- en: '`~~use CGI~~`'
  prefs: []
  type: TYPE_NORMAL
- en: deprecated interface for serving http requests removed from core, see [CGI::Alternatives](https://metacpan.org/pod/CGI::Alternatives)
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v7.0
  prefs: []
  type: TYPE_NORMAL
- en: '5.20 2014-05-27: extended vendor support 202X'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`sub ($var)`'
  prefs: []
  type: TYPE_NORMAL
- en: subroutine signatures *(feature, experimental until 5.36)*
  prefs: []
  type: TYPE_NORMAL
- en: '`%hash{…}`'
  prefs: []
  type: TYPE_NORMAL
- en: hash slices return key+value pairs
  prefs: []
  type: TYPE_NORMAL
- en: '`[]->@*`'
  prefs: []
  type: TYPE_NORMAL
- en: postfix dereferencing (also e.g. `$scalar->$*` for `$$scalar`) *(feature, experimental
    until 5.23.1)*
  prefs: []
  type: TYPE_NORMAL
- en: '`use warnings ''once''; $a`'
  prefs: []
  type: TYPE_NORMAL
- en: variables $a and $b are exempt from *used once* warnings
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v6.3
  prefs: []
  type: TYPE_NORMAL
- en: 5.18 2013-05-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`${^LAST_FH}`'
  prefs: []
  type: TYPE_NORMAL
- en: last read filehandle (used by `$.`)
  prefs: []
  type: TYPE_NORMAL
- en: '`/(?[ a + b ])/`'
  prefs: []
  type: TYPE_NORMAL
- en: regex set operations (character subtraction `-`, union `+`, intersection `&`,
    xor `^`) *(experimental until 5.36)*
  prefs: []
  type: TYPE_NORMAL
- en: '`my sub`'
  prefs: []
  type: TYPE_NORMAL
- en: lexical subroutines (also `state`, `our`); buggy before v5.22 *(experimental
    until 5.26)*
  prefs: []
  type: TYPE_NORMAL
- en: '`next $expression`'
  prefs: []
  type: TYPE_NORMAL
- en: loop controls allow runtime expressions
  prefs: []
  type: TYPE_NORMAL
- en: '`no warnings ''experimental::…''`'
  prefs: []
  type: TYPE_NORMAL
- en: mechanism for experimental features, as of now required for *smartmatch*
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v6.2
  prefs: []
  type: TYPE_NORMAL
- en: 5.16 2012-05-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`__SUB__`'
  prefs: []
  type: TYPE_NORMAL
- en: current subroutine reference *(feature)*
  prefs: []
  type: TYPE_NORMAL
- en: '`fc, "\F"`'
  prefs: []
  type: TYPE_NORMAL
- en: unicode foldcase to compare case-insensitively *(feature)*
  prefs: []
  type: TYPE_NORMAL
- en: '`"\N{}"`'
  prefs: []
  type: TYPE_NORMAL
- en: automatic `use charnames qw( :full :short )`
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v6.1
  prefs: []
  type: TYPE_NORMAL
- en: 5.14 2011-05-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`s///r`'
  prefs: []
  type: TYPE_NORMAL
- en: non-destructive substitution
  prefs: []
  type: TYPE_NORMAL
- en: '`/(?{ m() })/`'
  prefs: []
  type: TYPE_NORMAL
- en: regular expressions can be nested in `/(?{})/` and `/(??{})/` *(experimental
    until 5.20)*
  prefs: []
  type: TYPE_NORMAL
- en: '`/dalu`'
  prefs: []
  type: TYPE_NORMAL
- en: 'regexp modifiers to restrict character classes: either **d**efault, **a**scii,
    **l**ocale, or **u**nicode semantics.'
  prefs: []
  type: TYPE_NORMAL
- en: '`use re ''/flags''`'
  prefs: []
  type: TYPE_NORMAL
- en: customise default modifiers
  prefs: []
  type: TYPE_NORMAL
- en: '`/(?^)/`'
  prefs: []
  type: TYPE_NORMAL
- en: construct to reset to default modifiers
  prefs: []
  type: TYPE_NORMAL
- en: '`FH->method`'
  prefs: []
  type: TYPE_NORMAL
- en: filehandle method calls load IO::File on demand (eg. `STDOUT->flush`)
  prefs: []
  type: TYPE_NORMAL
- en: '`\o{}`'
  prefs: []
  type: TYPE_NORMAL
- en: escape sequence for octal values beyond \777
  prefs: []
  type: TYPE_NORMAL
- en: '`use JSON`'
  prefs: []
  type: TYPE_NORMAL
- en: interface with data in JavaScript Object Notation {`decode_json <>`}
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v6.0+#8
  prefs: []
  type: TYPE_NORMAL
- en: 5.12 2010-04-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`package` version'
  prefs: []
  type: TYPE_NORMAL
- en: '`package` NAME VERSION shorthand for `our $VERSION`'
  prefs: []
  type: TYPE_NORMAL
- en: '`...`'
  prefs: []
  type: TYPE_NORMAL
- en: 'yada-yada operator: code placeholder'
  prefs: []
  type: TYPE_NORMAL
- en: '`use 5.012`'
  prefs: []
  type: TYPE_NORMAL
- en: implicit `strict` if use VERSION >= v5.12
  prefs: []
  type: TYPE_NORMAL
- en: '`… when`'
  prefs: []
  type: TYPE_NORMAL
- en: '`when` is now allowed to be used as a statement modifier'
  prefs: []
  type: TYPE_NORMAL
- en: '`use overload ''qr''`'
  prefs: []
  type: TYPE_NORMAL
- en: customisable conversion to regular expressions
  prefs: []
  type: TYPE_NORMAL
- en: '`/\N/`'
  prefs: []
  type: TYPE_NORMAL
- en: inverse \n to match any character except newline regardless of `/s` *(experimental
    until 5.18)*
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v5.2
  prefs: []
  type: TYPE_NORMAL
- en: '5.10 2007-12-18: supported commercially until 2024'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`//`'
  prefs: []
  type: TYPE_NORMAL
- en: defined-or operator
  prefs: []
  type: TYPE_NORMAL
- en: '`~~`'
  prefs: []
  type: TYPE_NORMAL
- en: smart-match operator to compare different data types (updated in v5.10.1) *(experimental)*
  prefs: []
  type: TYPE_NORMAL
- en: '`say`'
  prefs: []
  type: TYPE_NORMAL
- en: print with newline, equivalent to `print @_, "\n"` *(feature)*
  prefs: []
  type: TYPE_NORMAL
- en: '`given`'
  prefs: []
  type: TYPE_NORMAL
- en: switch statement to smart-match with `when`/`default` *(feature, experimental)*
  prefs: []
  type: TYPE_NORMAL
- en: '`/(?<name>)/`'
  prefs: []
  type: TYPE_NORMAL
- en: named capture buffers into `%+`
  prefs: []
  type: TYPE_NORMAL
- en: '`/(?1)/`'
  prefs: []
  type: TYPE_NORMAL
- en: recursive regular expression patterns
  prefs: []
  type: TYPE_NORMAL
- en: '`/(?|)/`'
  prefs: []
  type: TYPE_NORMAL
- en: resets capture numbering for each contained branch
  prefs: []
  type: TYPE_NORMAL
- en: '`/.++/`'
  prefs: []
  type: TYPE_NORMAL
- en: possessive quantifiers `?+`, `*+`, `++` to match greedily
  prefs: []
  type: TYPE_NORMAL
- en: '`s/keep\K//`'
  prefs: []
  type: TYPE_NORMAL
- en: floating positive lookbehind, efficient alternative for `s/(keep)/$1/`
  prefs: []
  type: TYPE_NORMAL
- en: '`/p`'
  prefs: []
  type: TYPE_NORMAL
- en: optionally preserve `${^MATCH}` variables (avoiding `$&` penalty until COW in
    v5.20)
  prefs: []
  type: TYPE_NORMAL
- en: '`/\v/, /\h/`'
  prefs: []
  type: TYPE_NORMAL
- en: vertical and horizontal whitespace escapes (`\V` `\H` to invert); also `/\R/`
    for newlines
  prefs: []
  type: TYPE_NORMAL
- en: '`state`'
  prefs: []
  type: TYPE_NORMAL
- en: persistent `my` variables (scalars only until [5.28](#state_ext)) *(feature)*
  prefs: []
  type: TYPE_NORMAL
- en: '`use autodie`'
  prefs: []
  type: TYPE_NORMAL
- en: replace builtin functions to throw exceptions instead of returning failure {`eval
    {open ...} or $@->matches("open") || die`}
  prefs: []
  type: TYPE_NORMAL
- en: '`use IO::Compress::Zip`'
  prefs: []
  type: TYPE_NORMAL
- en: various file compression standards {`zip IO::Uncompress::Gunzip->new("test.gz")`<wbr>
    `=> "recompressed.zip"`}
  prefs: []
  type: TYPE_NORMAL
- en: '`use Time::Piece`'
  prefs: []
  type: TYPE_NORMAL
- en: timestamps as objects {`localtime->year > 1900`}
  prefs: []
  type: TYPE_NORMAL
- en: '`use File::Fetch`'
  prefs: []
  type: TYPE_NORMAL
- en: generic data retrieval/download {`File::Fetch->new(uri => "http://localhost/")`<wbr>`->fetch(to
    => \$slurp)`}
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v5.0.0
  prefs: []
  type: TYPE_NORMAL
- en: '5.8 2002-07-18: stable minimum during 20[01]\d'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`no utf8`'
  prefs: []
  type: TYPE_NORMAL
- en: full unicode support, `utf8` pragma only for script encoding
  prefs: []
  type: TYPE_NORMAL
- en: '`use open`'
  prefs: []
  type: TYPE_NORMAL
- en: file handle behaviour altered by PerlIO layers {`binmode $fh, ":bytes"`}
  prefs: []
  type: TYPE_NORMAL
- en: '`open $fh, ''-|'', @cmd`'
  prefs: []
  type: TYPE_NORMAL
- en: open list to fork a command without spawning a shell
  prefs: []
  type: TYPE_NORMAL
- en: '`open $fh, ''>'', \$var`'
  prefs: []
  type: TYPE_NORMAL
- en: perl scalars as virtual files
  prefs: []
  type: TYPE_NORMAL
- en: '`printf ''%1$s'', @args`'
  prefs: []
  type: TYPE_NORMAL
- en: syntax to use parameters out of order
  prefs: []
  type: TYPE_NORMAL
- en: '`1_2_3 == 123`'
  prefs: []
  type: TYPE_NORMAL
- en: underscores between digits allowed in numeric constants
  prefs: []
  type: TYPE_NORMAL
- en: '`use bignum`'
  prefs: []
  type: TYPE_NORMAL
- en: transparent big number support {`length 1e100 == 101`}
  prefs: []
  type: TYPE_NORMAL
- en: '`use if`'
  prefs: []
  type: TYPE_NORMAL
- en: conditional module inclusion {`no if $] >= 5.022, "warnings", "redundant"`}
  prefs: []
  type: TYPE_NORMAL
- en: '`use Digest`'
  prefs: []
  type: TYPE_NORMAL
- en: calculate various message digests (data hashes) {`$hash = sha256_hex($data)`}
  prefs: []
  type: TYPE_NORMAL
- en: '`use Encode`'
  prefs: []
  type: TYPE_NORMAL
- en: character set conversion {`encode("utf8", decode("iso-8859-1", $octets))`}
  prefs: []
  type: TYPE_NORMAL
- en: '`use File::Temp`'
  prefs: []
  type: TYPE_NORMAL
- en: create a temporary file or directory safely {`$fh = tempfile();`}
  prefs: []
  type: TYPE_NORMAL
- en: '`use List::Util`'
  prefs: []
  type: TYPE_NORMAL
- en: general-utility list subroutines {`@cards = shuffle 0..51`}
  prefs: []
  type: TYPE_NORMAL
- en: '`use Locale::Maketext`'
  prefs: []
  type: TYPE_NORMAL
- en: various localization and internationalization in `Locale::*` and `L18N::*`
  prefs: []
  type: TYPE_NORMAL
- en: '`use Memoize`'
  prefs: []
  type: TYPE_NORMAL
- en: remember function results, trading space for time {`memoize "stat"`}
  prefs: []
  type: TYPE_NORMAL
- en: '`use MIME::Base64`'
  prefs: []
  type: TYPE_NORMAL
- en: base64 encoded strings as in email attachments
  prefs: []
  type: TYPE_NORMAL
- en: '`use Test::More`'
  prefs: []
  type: TYPE_NORMAL
- en: modern framework for unit testing {`is $got, $expected`}
  prefs: []
  type: TYPE_NORMAL
- en: '`use Time::HiRes`'
  prefs: []
  type: TYPE_NORMAL
- en: high resolution timers {`$μs = [gettimeofday]; sleep .1;`<wbr> `$elapsed = tv_interval
    $μs`}
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v3.2.0
  prefs: []
  type: TYPE_NORMAL
- en: '5.6 2000-03-23: start of modern compatibility'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`use warnings`'
  prefs: []
  type: TYPE_NORMAL
- en: pragma to enable warnings in lexical scope
  prefs: []
  type: TYPE_NORMAL
- en: '`use utf8`'
  prefs: []
  type: TYPE_NORMAL
- en: experimental unicode semantics (completed in [v5.8](#utf8_data)) *(experimental
    until 5.8)*
  prefs: []
  type: TYPE_NORMAL
- en: '`use charnames`'
  prefs: []
  type: TYPE_NORMAL
- en: string escape `\N{}` to insert named character
  prefs: []
  type: TYPE_NORMAL
- en: '`our`'
  prefs: []
  type: TYPE_NORMAL
- en: declare global variables
  prefs: []
  type: TYPE_NORMAL
- en: '`v1.2.3`'
  prefs: []
  type: TYPE_NORMAL
- en: represent strings as vector of ordinals, useful in version numbers (`printf
    '%vd'` to display)
  prefs: []
  type: TYPE_NORMAL
- en: '`0b0`'
  prefs: []
  type: TYPE_NORMAL
- en: binary numbers in literals, `printf '%b'`, and `oct`
  prefs: []
  type: TYPE_NORMAL
- en: '`sub :lvalue`'
  prefs: []
  type: TYPE_NORMAL
- en: subroutine attribute to return a modifiable value *(experimental until 5.20)*
  prefs: []
  type: TYPE_NORMAL
- en: '`open my $fh, $mode, $expr`'
  prefs: []
  type: TYPE_NORMAL
- en: file handles in scoped scalars, third argument for unambiguous file name
  prefs: []
  type: TYPE_NORMAL
- en: '`pack ''q''`'
  prefs: []
  type: TYPE_NORMAL
- en: 64-bit integer support (also large files >2GiB) *(experimental until 5.8.1)*
  prefs: []
  type: TYPE_NORMAL
- en: '`sort $coderef ()`'
  prefs: []
  type: TYPE_NORMAL
- en: comparison function can be a subroutine reference; prototype `($$)` to pass
    elements as normal `@_`
  prefs: []
  type: TYPE_NORMAL
- en: '`CHECK {}`'
  prefs: []
  type: TYPE_NORMAL
- en: special block called at end of compilation
  prefs: []
  type: TYPE_NORMAL
- en: '`/[[:…:]]/`'
  prefs: []
  type: TYPE_NORMAL
- en: POSIX character class syntax such as `/[[:alpha:]]/`
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs: []
  type: TYPE_NORMAL
- en: v3.0.1
  prefs: []
  type: TYPE_NORMAL
