- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 13:24:18'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Let's Ban SMS 2FA // Loren's blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://lorendb.dev/posts/lets-ban-sms-2fa/](https://lorendb.dev/posts/lets-ban-sms-2fa/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There, I said it.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: Now that I’ve got that out of the way, let’s talk a bit about why we should
    actually ban SMS 2FA.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: 'A quick note: I’ve rewritten this post to present a more balanced view of the
    topic. You can find the old version on the Internet Archive.'
  id: totrans-split-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The problems
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SMS 2FA is something of a paradox in and of itself. Two-factor authentication
    is generally positioned as a way to increase your security; however, [SMS messaging](https://en.wikipedia.org/wiki/SMS)
    is inherently insecure, since it is unencrypted and SMS messages are publicly
    broadcast wirelessly. This means that bad actors who are physically near to you
    can trivially snoop on 2FA codes that are texted to you.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: However, unencrypted message broadcasting is not the only concern here. [SIM-swapping](https://en.wikipedia.org/wiki/SIM_swap_scam)
    is another method that can allow an attacker to gain access to your SMS messages;
    in this sort of attack, the attacker calls your phone company, claims that they
    are you, and asks to swap your phone number over to their SIM card. While the
    FCC is [taking action to fight SIM-swapping](https://www.theverge.com/2023/7/11/23791183/fcc-sim-swapping-port-out-phone-hijacking-security-protection),
    it is still very much a relevant attack; in fact, last month (January 2024) the
    U.S. Securities and Exchange Commission had its Twitter (yes, I’m still calling
    it Twitter) account [hacked](https://www.techradar.com/pro/sec-reveals-how-its-twitter-account-was-hacked-and-its-rather-embarrassing)
    in a SIM swap attack.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: To be fair, SIM swapping is not a trivial attack. It generally requires social
    engineering to complete, which makes it less useful for drive-by attackers. However,
    [eSIM swapping](https://www.bleepingcomputer.com/news/security/sim-swappers-hijacking-phone-numbers-in-esim-attacks/)
    is starting to gain popularity. This attack is less complex to complete, as it
    doesn’t require social engineering the phone company. You just need to get the
    victim’s login credentials, log into their phone provider account, and swap the
    eSIM.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: Companies don’t care
  id: totrans-split-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might be wondering why this is such a big problem. Sure, SMS is offered
    as a 2FA method on many sites, but you don’t need to enable it, right? Well, it
    turns out that platforms like PayPal and Amazon don’t care that SMS 2FA is insecure.
    If you want to set up any form of 2FA for your account, you are forced to set
    up SMS as a fallback option. This makes their 2FA support little more than a farce,
    given that anybody attacking your Amazon or PayPal account can theoretically override
    your 2FA by intercepting your SMS. The reasoning for this? “If you lose your 2FA
    device, we’ll text you a code to recover access to your account.”
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '(A bit more on the account recovery: given a valid email address, PayPal will
    happily send you a text to verify a password reset, and Amazon lets you reset
    your password *with just a phone number*. This means that as long as you know
    that somebody has an Amazon account that may be linked to their phone number,
    intercepting their SMS could give you full access to their Amazon account.)'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: Even for the services that aren’t forcing SMS 2FA down your throat, SMS is still
    presented as an option on many sites. Its ease of use undoubtedly has led many
    people to say “Oh, I’ll just use SMS since it’s easier”, which leaves those people
    more vulnerable to attack.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: Having said this, I must offer a commendation to Twitter. In 2023, they [disabled](https://blog.twitter.com/en_us/topics/product/2023/an-update-on-two-factor-authentication-using-sms-on-twitter)
    SMS 2FA for anyone not subscribed to Twitter Blue, citing its insecurity as the
    reason. I’d prefer if Twitter had disabled SMS 2FA across the board, but even
    if they left it as an incentive for people to pay for Twitter, it’s still a welcome
    change.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: It isn’t that hard to fix
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, some people might start complaining that changing their SMS 2FA deployment
    will be a huge technical problem. No, it won’t. Companies have several options
    here:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: Use [TOTP](https://en.wikipedia.org/wiki/Time-based_one-time_password); adding
    TOTP support is going to be fairly trivial, since it only requires an algorithm
    to calculate a code based on the original secret value (you’ll probably also want
    to throw in a QR code generator, but that’s technically optional). And it’s not
    like you’ll have to roll your own implemention; GitHub is full of [TOTP libraries
    (and apps)](https://github.com/topics/totp-generator). This does require the user
    to install a TOTP app, but there are many trusted TOTP apps available, so that
    shouldn’t be a big problem.
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use [passkeys](https://www.passkeys.com), the latest and greatest in 2FA security.
    Passkeys are (as far as I can tell) sort of a software-defined WebAuthn key that
    operates like a [hardware security key](https://www.yubico.com/product/security-key-series/security-key-c-nfc-by-yubico-black/)
    (as an aside, apparently Yubico stopped making these in blue). They are supported
    by modern browsers and phone operating systems, not to mention password managers
    like Bitwarden, and are generally designed to be extremely simple to use. Users
    generally shouldn’t need to install any extra apps to use passkeys.
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your 2FA flow is hardcoded in such a way that you *have* to use an SMS-like
    flow where you send the user a message containing a one-time code which the user
    must repeat back to you, you can at least swap SMS for a different service. Some
    platforms support email, but you could also use something like end-to-end encrypted
    [Matrix](https://matrix.org) chats, or you could even bake a 2FA sending service
    into your app the way [GitHub does](https://github.blog/2022-01-25-secure-your-github-account-github-mobile-2fa/).
    If you *really* can’t drop SMS, at least try to upgrade messages to [RCS](https://en.wikipedia.org/wiki/Rich_Communication_Services)
    whenever possible. (If you are using Twilio Verify, you are already being automatically
    [upgraded to RCS](https://www.twilio.com/docs/verify/rcs).)
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we can do about it
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How can we combat SMS 2FA? It turns out that there’s a surprising amount of
    things you can do.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: Disable SMS 2FA for any account that will let you turn it off. Obviously, you’ll
    have to keep SMS 2FA on for Amazon and PayPal, but at least reduce your usage
    of SMS 2FA as much as possible.
  id: totrans-split-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write to companies that force SMS 2FA and ask them to remove it.
  id: totrans-split-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tell others about the risks of SMS 2FA. The more people know about this risk,
    the less the chance that one of them will fall victim to a SIM swap.
  id: totrans-split-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you work at a company that has SMS 2FA deployed, ask them to remove it from
    your product. This is especially true if you work at PayPal, Amazon, or anywhere
    else that could be a likely target for attackers. This includes banks (yes, my
    bank forces SMS 2FA, and no, I’m not happy about it).
  id: totrans-split-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you live in the US, write to your congressman to urge him to introduce legislation
    banning the use of unencrypted message-based 2FA (and mention the SEC Twitter
    hack to show that the government is susceptible to this attack). If you don’t
    live in the US, write to whoever represents you in your government (e.g. EU residents
    can write their MEP). While this may seem like a bit of a long shot, it’s possible
    that your message could result in an actual law. EU residents are especially likely
    to succeed, given the EU’s historical stance on legislating sane tech laws (i.e.
    the [GDPR](https://en.wikipedia.org/wiki/General_Data_Protection_Regulation) and
    the [DMA](https://en.wikipedia.org/wiki/Digital_Markets_Act)).
  id: totrans-split-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Share this post, or if you have your own blog, write your own post on this subject!
    The more publicity this issue gets, the better.
  id: totrans-split-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The part where I backtrack a bit
  id: totrans-split-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having said all of this, is SMS 2FA completely evil? The answer is actually
    complex. First, while SMS 2FA is insecure, it is better than no 2FA at all, since
    it can function as a deterrent to a casual hacker. Second, it is user-friendly.
    TOTP, passkeys, and physical security keys all tend to be more effort to learn
    to use than a simple SMS verification scheme. To successfully remove SMS 2FA,
    we’ll have to educate the general public on how to use the alternatives or create
    a truly simple-to-use alternative. I do think that passkeys could become a good
    solution, however, as device and browser makers have put a lot of effort into
    making them a seamless option.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-split-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I hope you enjoyed reading this little rant here. Hopefully, you were inspired
    to take action in some way to help remedy the SMS 2FA problem. If you sent a letter
    to your government representative or started a discussion at your company to try
    to remove SMS 2FA, please leave a comment below! If this post gathers enough attention
    and people start logging their actions below, I’ll create a page tracking all
    our SMS 2FA shenanigans to help keep tabs on the situation.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  id: totrans-split-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: powered by [Cactus Comments](https://cactus.chat)
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
