- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 13:21:15'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Robust generic functions on slices - The Go Programming Language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://go.dev/blog/generic-slice-functions](https://go.dev/blog/generic-slice-functions)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Robust generic functions on slices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Valentin Deleplace
  prefs: []
  type: TYPE_NORMAL
- en: 22 February 2024
  prefs: []
  type: TYPE_NORMAL
- en: The [slices](/pkg/slices) package provides functions that work for slices of
    any type. In this blog post we’ll discuss how you can use these functions more
    effectively by understanding how slices are represented in memory and how that
    affects the garbage collector, and we’ll cover how we recently adjusted these
    functions to make them less surprising.
  prefs: []
  type: TYPE_NORMAL
- en: 'With [Type parameters](/blog/deconstructing-type-parameters) we can write functions
    like [slices.Index](/pkg/slices#Index) once for all types of slices of comparable
    elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It is no longer necessary to implement `Index` again for each different type
    of element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [slices](/pkg/slices) package contains many such helpers to perform common
    operations on slices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Several new functions (`Insert`, `Replace`, `Delete`, etc.) modify the slice.
    To understand how they work, and how to properly use them, we need to examine
    the underlying structure of slices.
  prefs: []
  type: TYPE_NORMAL
- en: A slice is a view of a portion of an array. [Internally](/blog/slices-intro),
    a slice contains a pointer, a length, and a capacity. Two slices can have the
    same underlying array, and can view overlapping portions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, this slice `s` is a view on 4 elements of an array of size 6:'
  prefs: []
  type: TYPE_NORMAL
- en: If a function changes the length of a slice passed as a parameter, then it needs
    to return a new slice to the caller. The underlying array may remain the same
    if it doesn’t have to grow. This explains why [append](/blog/slices) and `slices.Compact`
    return a value, but `slices.Sort`, which merely reorders the elements, does not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the task of deleting a portion of a slice. Prior to generics, the
    standard way to delete the portion `s[2:5]` from the slice `s` was to call the
    [append](/ref/spec#Appending_and_copying_slices) function to copy the end portion
    over the middle portion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax was complex and error-prone, involving subslices and a variadic
    parameter. We added [slice.Delete](/pkg/slices#Delete) to make it easier to delete
    elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The one-line function `Delete` more clearly expresses the programmer’s intent.
    Let’s consider a slice `s` of length 6 and capacity 8, containing pointers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This call deletes the elements at `s[2]`, `s[3]`, `s[4]` from the slice `s`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The gap at the indices 2, 3, 4 is filled by shifting the element `s[5]` to the
    left, and setting the new length to `3`.
  prefs: []
  type: TYPE_NORMAL
- en: '`Delete` need not allocate a new array, as it shifts the elements in place.
    Like `append`, it returns a new slice. Many other functions in the `slices` package
    follow this pattern, including `Compact`, `CompactFunc`, `DeleteFunc`, `Grow`,
    `Insert`, and `Replace`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When calling these functions we must consider the original slice invalid, because
    the underlying array has been modified. It would be a mistake to call the function
    but ignore the return value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A problem of unwanted liveness
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before Go 1.22, `slices.Delete` didn’t modify the elements between the new and
    original lengths of the slice. While the returned slice wouldn’t include these
    elements, the “gap” created at the end of the original, now-invalidated slice
    continued to hold onto them. These elements could contain pointers to large objects
    (a 20MB image), and the garbage collector would not release the memory associated
    with these objects. This resulted in a memory leak that could lead to significant
    performance issues.
  prefs: []
  type: TYPE_NORMAL
- en: In this above example, we’re successfully deleting the pointers `p2`, `p3`,
    `p4` from `s[2:5]`, by shifting one element to the left. But `p3` and `p4` are
    still present in the underlying array, beyond the new length of `s`. The garbage
    collector won’t reclaim them. Less obviously, `p5` is not one of the deleted elements,
    but its memory may still leak because of the `p5` pointer kept in the gray part
    of the array.
  prefs: []
  type: TYPE_NORMAL
- en: This could be confusing for developers, if they were not aware that “invisible”
    elements were still using memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we had two options:'
  prefs: []
  type: TYPE_NORMAL
- en: Either keep the efficient implementation of `Delete`. Let users set obsolete
    pointers to `nil` themselves, if they want to make sure the values pointed to
    can be freed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Or change `Delete` to always set the obsolete elements to zero. This is extra
    work, making `Delete` slightly less efficient. Zeroing pointers (setting them
    to `nil`) enables the garbage collection of the objects, when they become otherwise
    unreachable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was not obvious which option was best. The first one provided performance
    by default, and the second one provided memory frugality by default.
  prefs: []
  type: TYPE_NORMAL
- en: The fix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A key observation is that “setting the obsolete pointers to `nil`” is not as
    easy as it seems. In fact, this task is so error-prone that we should not put
    the burden on the user to write it. Out of pragmatism, we chose to modify the
    implementation of the five functions `Compact`, `CompactFunc`, `Delete`, `DeleteFunc`,
    `Replace` to “clear the tail”. As a nice side effect, the cognitive load is reduced
    and users now don’t need to worry about these memory leaks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Go 1.22, this is what the memory looks like after calling Delete:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code changed in the five functions uses the new built-in function [clear](/pkg/builtin#clear)
    (Go 1.21) to set the obsolete elements to the zero value of the element type of
    `s`:'
  prefs: []
  type: TYPE_NORMAL
- en: The zero value of `E` is `nil` when `E` is a type of pointer, slice, map, chan,
    or interface.
  prefs: []
  type: TYPE_NORMAL
- en: Tests failing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This change has led to some tests that passed in Go 1.21 now failing in Go 1.22,
    when the slices functions are used incorrectly. This is good news. When you have
    a bug, tests should let you know.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you ignore the return value of `Delete`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: then you may incorrectly assume that `s` does not contain any nil pointer. [Example
    in the Go Playground](/play/p/NDHuO8vINHv).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you ignore the return value of `Compact`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: then you may incorrectly assume that `s` is properly sorted and compacted. [Example](/play/p/eFQIekiwlnu).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you assign the return value of `Delete` to another variable, and keep using
    the original slice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: then you may incorrectly assume that `s` does not contain any nil pointer. [Example](/play/p/rDxWmJpLOVO).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you accidentally shadow the slice variable, and keep using the original
    slice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: then you may incorrectly assume that `s` does not contain any nil pointer. [Example](/play/p/KSpVpkX8sOi).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The API of the `slices` package is a net improvement over the traditional pre-generics
    syntax to delete or insert elements.
  prefs: []
  type: TYPE_NORMAL
- en: We encourage developers to use the new functions, while avoiding the “gotchas”
    listed above.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to the recent changes in the implementation, a class of memory leaks
    is automatically avoided, without any change to the API, and with no extra work
    for the developers.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The signature of the functions in the `slices` package is heavily influenced
    by the specifics of the representation of slices in memory. We recommend reading
  prefs: []
  type: TYPE_NORMAL
- en: The [original proposal](/issue/63393) about zeroing obsolete elements contains
    many details and comments.
  prefs: []
  type: TYPE_NORMAL
