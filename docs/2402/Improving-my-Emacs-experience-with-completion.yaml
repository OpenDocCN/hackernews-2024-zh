- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:37:11'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:37:11'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Improving my Emacs experience with completion
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过完成功能改善我的Emacs体验
- en: 来源：[https://martinfowler.com/articles/2024-emacs-completion.html](https://martinfowler.com/articles/2024-emacs-completion.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://martinfowler.com/articles/2024-emacs-completion.html](https://martinfowler.com/articles/2024-emacs-completion.html)
- en: I’ve been using Emacs for many years, using it for any writing for my website,
    writing my books, and most of my programming. (Exceptions have been IntellJ IDEA
    for Java and RStudio for R.) As such I’ve been happy to see a lot of activity
    in the last few years to improve Emacs’s capabilities, making it feel rather less
    than a evolutionary dead end. One of the biggest improvements to my Emacs experience
    is using regexs for completion lists.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经使用Emacs很多年了，用它来写网站上的任何文章，写我的书，以及大部分编程工作。（在Java和R方面的例外情况是IntellJ IDEA和RStudio。）因此，我很高兴看到近几年来Emacs改进了许多功能，使其感觉不再是一条进化的死胡同。对我Emacs体验最大的改进之一是使用正则表达式来完成列表。
- en: Many Emacs commands generate lists of things to pick from. I want to visit (open)
    a file I type the key combination to find a file, and Emacs pops up a list of
    candidate files in the minibuffer (a special area for to interact with commands).
    These file lists can be quite long, particularly should I ask for a list of all
    files in my current project.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Emacs命令生成可供选择的事物列表。当我想访问（打开）一个文件时，我键入组合键来查找文件，Emacs弹出一个候选文件列表在迷你缓冲区（一个特殊区域与命令进行交互）。这些文件列表可能会相当长，特别是如果我要求列出当前项目中的所有文件。
- en: To specify the file I want, I can type some text to filter the list, so if I
    want to open the file `articles/simple/2024-emacs-completion.md` I might type
    `emacs`. I don’t have to get only that one file, just filtering to a small enough
    list is often enough.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定我想要的文件，我可以输入一些文本来过滤列表，所以如果我想打开文件`articles/simple/2024-emacs-completion.md`，我可能会输入`emacs`。我不必只获取那一个文件，只要过滤到一个足够小的列表通常就足够了。
- en: There’s a particular style of regex builder that I find the most helpful, one
    that separates regexs by spaces. This would allow me to type `articles emacs`
    to get a list of any file paths that contain “articles” and “emacs” in their file
    path. It essentially turns the string “articles emacs” into the regex `\\(articles\\).*\\(emacs\\)`.
    Better yet, such a matcher allows me to type the regexs in any order, so that
    “emacs articles” would also match. This way once the first regex pops up a filtered
    list, I can use a second regex to pick the one I want, even if the distinguishing
    regex is earlier than my initial search.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种特定的正则表达式构建器我发现最有帮助，这种构建器通过空格分隔正则表达式。这样我可以输入`articles emacs`来获取包含文件路径中“articles”和“emacs”的任何文件路径列表。实际上，它将字符串“articles
    emacs”转换为正则表达式`\\(articles\\).*\\(emacs\\)`。更好的是，这样的匹配器允许我以任何顺序输入正则表达式，因此“emacs
    articles”也将匹配。这样一来，一旦第一个正则表达式弹出一个过滤列表，我可以使用第二个正则表达式选择我想要的文件，即使区分性正则表达式早于我的初始搜索。
- en: Installing such a completion matcher has had a remarkable effect on my use of
    Emacs, since it makes it a breeze to filter large lists when interacting with
    commands. One of the most significant of these is how it changes my use of `M-x`,
    the key combo that brings up a list of all interactive Emacs functions. With a
    regex matcher to filter the list, it allows me to invoke an Emacs command using
    its name, with just a few keystrokes. That way I don’t have to remember the keyboard
    shortcut. With this, I invoke commands that I use less frequently through `M-x`.
    I don’t list all open buffers very often, so rather than try to remember the key
    combination for it, I just type `M-x ib` and `ibuffer` quickly pops up. This is
    helped that the command I use for `M-x` (`counsel-M-x`) inserts a “`^`” as the
    first character in the regex, which anchors the first regex to the beginning of
    the line. Since I prefix all my self-written functions with `mf-`, I can easily
    find my own functions, even if they have a long name. I wrote a command to remove
    the domain from a URL, I call it `mf-url-remove-domain` and can invoke it with
    `M-x mf url`.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 安装这样一个完成匹配器对我使用 Emacs 有了显著的影响，因为在与命令交互时，它使得在大列表中筛选变得轻而易举。其中最重要的之一是它如何改变了我使用
    `M-x` 的方式，这个组合键会显示所有交互式 Emacs 函数的列表。通过正则表达式匹配器来筛选列表，它允许我仅通过几个按键来调用一个 Emacs 命令，而不必记住键盘快捷键。这样，我不经常列出所有打开的缓冲区，所以我不需要记住它的快捷键组合。我只需快速输入
    `M-x ib`，然后 `ibuffer` 就会迅速弹出。这得益于我用于 `M-x` 的命令 (`counsel-M-x`) 在正则表达式中插入了一个“`^`”作为第一个字符，这将第一个正则表达式锚定在行的开头。由于我所有的自写函数都以
    `mf-` 开头，我可以轻松地找到自己的函数，即使它们的名称很长。我写了一个命令来移除 URL 中的域名，我称之为 `mf-url-remove-domain`，可以通过
    `M-x mf url` 调用它。
- en: There are quite a few packages in Emacs that do this kind of matching, enough
    to be rather confusing. The one I’m using these days is [Ivy](https://oremacs.com/swiper/).
    By default it uses a space-separated regex matcher, but one that doesn’t support
    any order. To configure it the way I like it I use
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: Emacs 中有相当多的包可以做这种匹配，足以让人感到相当困惑。我最近在使用的一个是[Ivy](https://oremacs.com/swiper/)。默认情况下，它使用空格分隔的正则表达式匹配器，但不支持任何顺序。为了按照我喜欢的方式配置它，我使用
- en: '[PRE0]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Ivy is part of a package called `counsel` that includes various commands that
    enhance these kind of selections.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: Ivy 是一个名为`counsel`的包的一部分，包含各种增强此类选择的命令。
- en: 'Ivy isn’t the only tool that does this kind of thing. Indeed the world of completion
    tools in Emacs is one I find very confusing: lots of tools with overlaps and interactions
    that I don’t really understand. The tools in this territory include [Helm](https://emacs-helm.github.io/helm/),
    [company](https://company-mode.github.io/), [Vertico](https://github.com/minad/vertico),
    and [Consult](https://github.com/minad/consult). Mastering Emacs has an article
    on [Understanding Minibuffer Completion](https://www.masteringemacs.org/article/understanding-minibuffer-completion),
    but it doesn’t explain how the mechanisms it talks about fit in with what Ivy
    does, and I haven’t spent the time to figure it all out.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: Ivy 并不是唯一做这种事情的工具。事实上，Emacs 中的补全工具世界让我感到非常困惑：有许多工具有重叠和交互，我并不真正理解。这些领域中的工具包括[Helm](https://emacs-helm.github.io/helm/)、[company](https://company-mode.github.io/)、[Vertico](https://github.com/minad/vertico)和[Consult](https://github.com/minad/consult)。《Mastering
    Emacs》有一篇关于[理解迷你缓冲区完成](https://www.masteringemacs.org/article/understanding-minibuffer-completion)的文章，但它没有解释它所讨论的机制如何与
    Ivy 的功能结合，我也没有花时间去弄清楚这一切。
- en: And as a general note, I strongly recommend the book [Mastering Emacs](https://www.masteringemacs.org/)
    to learn how to use this incredible tool. Emacs has so many capabilities, that
    even a decades-old user like me found that book led to “I didn’t know it could
    do that” moments.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我强烈推荐书籍[《Mastering Emacs》](https://www.masteringemacs.org/)，来学习如何使用这个令人难以置信的工具。Emacs
    有如此多的功能，即使是像我这样使用几十年的用户，也发现这本书引导我“我原来不知道它还能这样”。
- en: For those that are curious, here’s the relevant bits of my Emacs config
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些好奇的人，这里是我的 Emacs 配置的相关部分
- en: '[PRE1]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
