["```\nconst languages = new Set([\"JavaScript\", \"TypeScript\", \"HTML\", \"JavaScript\"]);\n```", "```\nlanguages.size;\n\n// => 3\n```", "```\nlanguages.add(\"JavaScript\");\n\nlanguages.add(\"CSS\");\n\nlanguages.size;\n\n// => 4\n```", "```\nlanguages.delete(\"TypeScript\");\n\nlanguages.size;\n\n// => 3\n```", "```\nlanguages.has(\"JavaScript\");\n\n// => true\n\nlanguages.has(\"TypeScript\");\n\n// => false\n```", "```\nlanguages.forEach(element => console.log(element));\n\n// \"JavaScript\"\n\n// \"HTML\"\n\n// \"CSS\"\n```", "```\nlanguages.clear();\n\nlanguages.size;\n\n// => 0\n```", "```\nconst frontEndLanguages = new Set([\"JavaScript\", \"HTML\", \"CSS\"]);\n\nconst backEndLanguages = new Set([\"Python\", \"Java\", \"JavaScript\"]);\n\nconst allLanguages = frontEndLanguages.union(backEndLanguages);\n\n// => Set {\"JavaScript\", \"HTML\", \"CSS\", \"Python\", \"Java\"}\n```", "```\nconst frontEndLanguages = new Set([\"JavaScript\", \"HTML\", \"CSS\"]);\n\nconst backEndLanguages = new Set([\"Python\", \"Java\", \"JavaScript\"]);\n\nconst frontAndBackEnd = frontEndLanguages.intersection(backEndLanguages);\n\n// => Set {\"JavaScript\"} \n```", "```\nconst frontEndLanguages = new Set([\"JavaScript\", \"HTML\", \"CSS\"]);\n\nconst backEndLanguages = new Set([\"Python\", \"Java\", \"JavaScript\"]);\n\nconst onlyFrontEnd = frontEndLanguages.difference(backEndLanguages);\n\n// => Set {\"HTML\", \"CSS\"} \n\nconst onlyBackEnd = backEndLanguages.difference(frontEndLanguages);\n\n// => Set {\"Python\", \"Java\"}\n```", "```\nconst frontEndLanguages = new Set([\"JavaScript\", \"HTML\", \"CSS\"]);\n\nconst backEndLanguages = new Set([\"Python\", \"Java\", \"JavaScript\"]);\n\nconst onlyFrontEnd = frontEndLanguages.symmetricDifference(backEndLanguages);\n\n// => Set {\"HTML\", \"CSS\", \"Python\", \"Java\"} \n\nconst onlyBackEnd = backEndLanguages.symmetricDifference(frontEndLanguages);\n\n// => Set {\"Python\", \"Java\", \"HTML\", \"CSS\"}\n```", "```\nconst frontEndLanguages = new Set([\"JavaScript\", \"HTML\", \"CSS\"]);\n\nconst declarativeLanguages = new Set([\"HTML\", \"CSS\"]);\n\ndeclarativeLanguages.isSubsetOf(frontEndLanguages);\n\n// => true\n\nfrontEndLanguages.isSubsetOf(declarativeLanguages);\n\n// => false\n```", "```\nfrontEndLanguages.isSubsetOf(frontEndLanguages);\n\n// => true\n```", "```\nconst frontEndLanguages = new Set([\"JavaScript\", \"HTML\", \"CSS\"]);\n\nconst declarativeLanguages = new Set([\"HTML\", \"CSS\"]);\n\ndeclarativeLanguages.isSupersetOf(frontEndLanguages);\n\n// => false\n\nfrontEndLanguages.isSupersetOf(declarativeLanguages);\n\n// => true\n```", "```\nfrontEndLanguages.isSupersetOf(frontEndLanguages);\n\n// => true\n```", "```\nconst frontEndLanguages = new Set([\"JavaScript\", \"HTML\", \"CSS\"]);\n\nconst interpretedLanguages = new Set([\"JavaScript\", \"Ruby\", \"Python\"]);\n\nconst compiledLanguages = new Set([\"Java\", \"C++\", \"TypeScript\"]);\n\ninterpretedLanguages.isDisjointFrom(compiledLanguages);\n\n// => true\n\nfrontEndLanguages.isDisjointFrom(interpretedLanguages);\n\n// => false\n```"]