["```\ncmake_minimum_required(VERSION 3.27)\nproject(minisha256sum)\n\nfind_package(OpenSSL REQUIRED)\nfind_package(Boost REQUIRED COMPONENTS chrono)\n\nadd_executable(minisha256sum src/main.cpp)\ntarget_link_libraries(minisha256sum Boost::chrono OpenSSL::SSL)\nset_property(TARGET minisha256sum PROPERTY CXX_STANDARD 20)\n\ninstall(TARGETS minisha256sum DESTINATION bin)\n```", "```\n$ mkdir build\n$ cd build\n$ cmake ..\n$ cmake --build .\n```", "```\n$ ./minisha256sum < src/main.cpp\ncb8829956b86a05cd4bf374e95f4ae3928644f4b79cef82ef89529c2ef65f004 0 milliseconds\n$ sha256sum < src/main.cpp\ncb8829956b86a05cd4bf374e95f4ae3928644f4b79cef82ef89529c2ef65f004  -\n```", "```\n# file: package.nix\n{ stdenv, lib, cmake, boost, openssl }:\n\nstdenv.mkDerivation {\n name = \"minisha256sum\";\n\n src = lib.fileset.toSource {\n root = ./.;\n fileset = lib.fileset.unions [\n ./src\n ./CMakeLists.txt\n ];\n };\n\n nativeBuildInputs = [ cmake ];\n buildInputs = [ boost openssl ];\n}\n```", "```\nminisha256sum = pkgs.callPackage ./package.nix { }\n```", "```\n$ nix build github:tfc/cpp-cross-compilation-example\n$ file result/bin/minisha256sum\nresult/bin/minisha256sum:\nELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), dynamically linked,\ninterpreter /nix/store/7jiqcrg061xi5clniy7z5pvkc4jiaqav-glibc-2.38-27/lib/ld-linux-x86-64.so.2,\nfor GNU/Linux 3.10.0, not stripped\n\n# Run directly over via `nix run` without building it first:\n\n$ result/bin/minisha256sym < ~/some-file.zip\nf7cb5ade7906f364a0d4d11478a4b9f25c86d0b3381a5b3907e2c49b31a00fee 3 milliseconds\n\n$ nix run github:tfc/cpp-cross-compilation-example < ~/some-file.zip\nf7cb5ade7906f364a0d4d11478a4b9f25c86d0b3381a5b3907e2c49b31a00fee 3 milliseconds\n```", "```\nstatic = pkgs.pkgsStatic.callPackage ./package.nix { };\naarch64 = pkgs.pkgsCross.aarch64-multiplatform.callPackage ./package.nix { };\naarch64-static = pkgs.pkgsCross.aarch64-multiplatform.pkgsStatic.callPackage ./package.nix { };\n```"]