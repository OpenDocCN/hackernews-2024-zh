- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:49:28'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月27日14时49分28秒
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Implement tcl in tcl
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Tcl中实现Tcl
- en: 来源：[https://wiki.tcl-lang.org/page/Implement+tcl+in+tcl](https://wiki.tcl-lang.org/page/Implement+tcl+in+tcl)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://wiki.tcl-lang.org/page/Implement+tcl+in+tcl](https://wiki.tcl-lang.org/page/Implement+tcl+in+tcl)
- en: Maybe someone has already done this. But the question in my mind is how much
    of Tcl can be implimented in Tcl itself. Obviously you can't implement system
    calls in Tcl, but you could implement just about everthing else. What commands/parts
    of Tcl would be in the minimal set? [Earl Johnson](/page/Earl+Johnson)
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 也许有人已经做到了这一点。但是我心中的问题是Tcl中有多少可以用Tcl本身实现的内容。显然，你不能在Tcl中实现系统调用，但你可以实现几乎所有其他东西。最小的命令/
    Tcl的哪些部分将包含在其中？
- en: '"set" both scalar and array modes.'
  id: totrans-split-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"set"，标量和数组模式。'
- en: '"eval" command'
  id: totrans-split-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"eval" 命令'
- en: '"unknown"'
  id: totrans-split-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"unknown"'
- en: '"string index" command'
  id: totrans-split-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"string index" 命令'
- en: '"string length" command'
  id: totrans-split-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"string length" 命令'
- en: '"lindex" command'
  id: totrans-split-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"lindex" 命令'
- en: '"llength" command'
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"llength" 命令'
- en: '"list" command'
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '"list" 命令'
- en: what else???
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有其他吗？
- en: Things that could be simulated in Tcl (theoretically)
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Tcl中可以模拟的功能（从理论上讲）
- en: interpreters (design?).
  id: totrans-split-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释器（设计？）。
- en: namespaces (design?).
  id: totrans-split-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名空间（设计？）。
- en: expr (design?).
  id: totrans-split-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表达式（设计？）。
- en: callstack (design?) .
  id: totrans-split-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用栈（设计？）。
- en: proc (design?) .
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过程（设计？）。
- en: if/while/switch/for/foreach.
  id: totrans-split-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: if/while/switch/for/foreach
- en: regexp (sounds hard) .
  id: totrans-split-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正则表达式（听起来很难）。
- en: package system (design?) .
  id: totrans-split-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件包系统（设计？）。
- en: traces (design?).
  id: totrans-split-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跟踪（设计？）。
- en: event loop (design?).
  id: totrans-split-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件循环（设计？）。
- en: glob (design?).
  id: totrans-split-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 全局（设计？）。
- en: expr
  id: totrans-split-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表达式
- en: 'regexp *([Lars H](/page/Lars+H): You get a bit of the way with [grammar_fa](/page/grammar%5Ffa).)*'
  id: totrans-split-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正则表达式 *([Lars H](/page/Lars+H)：您可以用[grammar_fa](/ page / grammar%5Ffa)做到一点)*
- en: What I don't expect to be done
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我不希望完成的事情
- en: C API
  id: totrans-split-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C API
- en: Things that need system calls
  id: totrans-split-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要系统调用的功能
- en: Other languages are self hosting like this
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他语言的自托管方式就像这样
- en: C => c compiler
  id: totrans-split-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C => c 编译器
- en: Python => PyPy
  id: totrans-split-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python => PyPy
- en: Smalltalk
  id: totrans-split-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Smalltalk
- en: Others??
  id: totrans-split-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其他？
- en: Of course I expect that this TclTcl would be very slow, but interesting, and
    very easy to port to embedded systems.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我预计这个TclTcl会非常慢，但是很有趣，并且非常容易移植到嵌入式系统。
- en: '[SS](/page/SS) 12Oct2004: One day for fun I implemented a subset of Tcl in
    Tcl, with some more work may run non trivial programs. Consider this program BSD-licensed.'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[SS](/page/SS) 2004年10月12日：有一天，我为了好玩而在Tcl中实现了Tcl的一个子集，再加点工作就能运行一些非平凡的程序。考虑将此程序授权许可为BSD许可证。'
- en: '[PRE0]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '* * *'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'I have got problems testing it (error: invalid command name "::macro::parser").'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我测试它时遇到了问题（错误：无效的命令名称“::macro::parser”）。
- en: This is because the call to ::macro::parser doesn't reference any known function.
    When I changed the call to LctParser, everything worked for me. I have taken the
    liberty of making the change in the code above. -RL
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为对::macro::parser的调用没有涉及到任何已知的函数。当我将调用更改为LctParser时，一切都对我起作用。我已经擅自在上面的代码中做出了更改。-
    RL
- en: 'I suppose also that the parser would have problems with some special ugly code
    as follow, which is accepted by the original tcl parser:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我还觉得解析器会对一些特殊的丑陋代码产生问题，如下所示，它是原始Tcl解析器所接受的：
- en: '[PRE1]'
  id: totrans-split-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Anyway programming tcl in tcl is very interesting idea if one wants to test
    experimental tcl interpreters or build in new functions which are not supported
    by original interpreter
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，在Tcl中编程Tcl是一个非常有趣的想法，如果有人想测试实验性的Tcl解释器或者构建原始解释器不支持的新功能。
- en: '[Lars H](/page/Lars+H): I think several of those would actually be handled
    OK, but'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[Lars H](/page/Lars+H)：我认为其中几个实际上会被很好地处理, 但'
- en: '[PRE2]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'is not (the only extra rule in command substitution nesting is that '']'' terminates
    a command in places where '';'' would, so brackets need not nest properly as LctSubstCmd
    assumes). Backslash substitution is missing entirely. Also the following isn''t
    handled correctly:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令替换嵌套中的唯一额外规则不该是“]”在“;”的位置终止一个命令，并且方括号不需要正确嵌套，如LctSubstCmd所假定的。反斜杠替换完全消失。还没有正确处理以下内容：
- en: '[PRE3]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The left brace only has special powers if it is the first character in a word.
    What worries me most about the above parser is however:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果左花括号是单词的第一个字符，它才有特别的功能。然而，上述解析器最让我担心的是：
- en: its use of a variable $inside (that is too simple to keep track of the state
    of a correct Tcl parser), and
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的使用变量$inside（过于简单不能保持正确的Tcl解析器的状态），以及
- en: the one big loop over characters in the input (hard to analyse, because there
    are so many cases to consider, and thus likely to buggy).
  id: totrans-split-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入中的字符大循环（分析起来很困难，因为有这么多情况要考虑，因此可能会有错误）。
- en: For a more complete Tcl parser, available here on this Wiki, see [parsetcl](/page/parsetcl).
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更完整的Tcl解析器，请参见[Wiki](/page/parsetcl)上的[parsetcl]。
- en: '* * *'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[Category Application](/page/Category+Application) - [Category Tcl Implementations](/page/Category+Tcl+Implementations)'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[应用类别](/page/Category+Application) - [Tcl 实现类别](/page/Category+Tcl+Implementations)'
