["```\nSamples: 1M of event 'cycles', 4000 Hz, Event count (approx.): 756969039682 lost: 0/0 drop: 0/17041\nOverhead  Shared Object                   Symbol\n  39.00%  clickhouse                      [.] DB::deserializeBinarySSE2<1>\n  15.12%  clickhouse                      [.] DB::PODArrayBase<1ul, 4096ul, Allocator<false, false>, 63ul, 64ul>::resize<>\n  13.57%  clickhouse                      [.] DB::PODArrayDetails::byte_size\n   9.36%  clickhouse                      [.] LZ4::(anonymous namespace)::decompressImpl<16ul, true>\n   4.36%  [kernel]                        [k] copy_user_generic_string\n   2.60%  clickhouse                      [.] DB::FunctionStringOrArrayToT<DB::LengthImpl, DB::NameLength, unsigned long, false>::executeImpl\n   2.55%  clickhouse                      [.] CityHash_v1_0_2::CityHash128WithSeed\n   2.31%  clickhouse                      [.] LZ4::(anonymous namespace)::decompressImpl<16ul, false>\n   1.40%  clickhouse                      [.] memcpy\n   1.15%  clickhouse                      [.] DB::findExtremeImplAVX2<unsigned long, DB::MaxComparator<unsigned long>, true, false>\n   0.52%  [kernel]                        [k] filemap_get_read_batch\n   0.52%  clickhouse                      [.] LZ4::(anonymous namespace)::decompressImpl<8ul, true>\n   0.40%  clickhouse                      [.] LZ4::(anonymous namespace)::decompressImpl<32ul, false>\n\n```", "```\n  ...\n\n  0.32 │    │  inc    %r13\n  1.25 │    │  mov    %r13,(%rax)\n  5.19 │    │  add    $0x8,%rax\n  0.02 │    │  mov    %rax,0x8(%rbp)\n  0.23 │    │  mov    0x30(%rsp),%r12\n  0.36 │    │  mov    %r12,%rdi\n  0.14 │    │  mov    %r13,%rsi\n  2.67 │    │→ callq  DB::PODArrayBase<1ul, 4096ul, Allocator<false, false>, 63ul, 64ul>::resize<>\n  2.95 │    │  mov    0x28(%rsp),%rdx\n  1.70 │    │  test   %rdx,%rdx\n  1.51 │    │↑ je     51\n  0.00 │    │  lea    0x11(%r15),%rax\n\n  ...\n\n```", "```\n  ...\n\n  0.10 │104:   mov   $0x1,%esi\n  0.71 │       mov   %r14,%rdi\n  5.92 │     → callq DB::PODArrayDetails::byte_size\n  5.63 │       add   %r12,%rax\n  0.10 │       mov   %rax,0x8(%rbx)\n 30.30 │       pop   %rbx\n  0.76 │       pop   %r12\n  1.96 │       pop   %r13\n  4.42 │       pop   %r14\n  2.89 │       pop   %r15\n 11.24 │     ← retq\n\n  ...\n\n```", "```\ntemplate <int UNROLL_TIMES>\nstatic NO_INLINE void deserializeBinarySSE2(ColumnString::Chars & data,\n    ColumnString::Offsets & offsets,\n    ReadBuffer & istr,\n    size_t limit)\n{\n    size_t offset = data.size();\n    for (size_t i = 0; i < limit; ++i)\n    {\n        if (istr.eof())\n            break;\n\n        UInt64 size;\n        readVarUInt(size, istr);\n\n        ...\n\n        data.resize(offset);\n\n        if (size)\n        {\n\n#ifdef __SSE2__\n            /// An optimistic branch in which more efficient copying is possible.\n            if (offset + 16 * UNROLL_TIMES <= data.capacity() &&\n                istr.position() + size + 16 * UNROLL_TIMES <= istr.buffer().end())\n            {\n                ...\n            }\n            else\n#endif\n            {\n                istr.readStrict(reinterpret_cast<char*>(&data[offset - size - 1]), size);\n            }\n        }\n\n        data[offset - 1] = 0;\n    }\n}\n\n```", "```\ndata.resize(offset);\n\n```", "```\nif (unlikely(offset > data.size()))\n    data.resize_exact(roundUpToPowerOfTwoOrZero(std::max(offset, data.size() * 2)));\n\n```", "```\nSELECT max(length(value)) FROM test_table FORMAT Null\n\n0 rows in set. Elapsed: 0.855 sec. Processed 1.50 billion rows, 19.89 GB (1.75 billion rows/s., 23.27 GB/s.)\nPeak memory usage: 1.24 MiB.\n\n```", "```\nSELECT max(length(value)) FROM test_table FORMAT Null\n\n0 rows in set. Elapsed: 0.691 sec. Processed 1.50 billion rows, 19.89 GB (2.17 billion rows/s., 28.79 GB/s.)\nPeak memory usage: 1.17 MiB.\n\n```"]