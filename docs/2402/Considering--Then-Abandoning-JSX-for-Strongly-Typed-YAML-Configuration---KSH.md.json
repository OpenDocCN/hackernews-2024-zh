["```\n# valid\nNamed1:\n - Has another\n - and another\n\n# The lack of following : is a syntax error\nNamed2\n  - Has another\n  - and another \n```", "```\nA list:\n\n # this is an structured item with two sub items\n - Named1:\n   - Has another\n   - and another\n\n # this is a single item as a literal string\n # \"Named2 - Has another - and another\"\n - Named2\n  - Has another\n  - and another \n```", "```\nlanguage: node_js\nbefore_install:\n- npm i -g npm@6.8\ncache: npm\nnode_js:\n- '10' \n```", "```\n# dashboards.yml\nDashboards:\n{% for board in dashboards %}\n  - name: {{ board.name }}\n    metric: {{ board.metric }}\n    unit: {% if board.unit %} {{ board.unit }} {% else %}ms{% endif %}\n    query: SELECT {{ board.metric }} as m1 FROM data.time_series WHERE timestamp > {{ page.timestamp }}\n{% endfor %} \n```", "```\ntemplate: dashboards.yml\nDashboards: \n- name: Response Times\n  metric: response_time_ms\n- name: Request Rates\n  metric: request_rate_ms \n```", "```\n// dashboard-template.tsx in a library called \"shared-templates\"\n\ntype ReactResult<C> = React.ReactElement<\n  Parameters<typeof C>[0],\n  typeof C\n>;\n\nexport Dashboards(props: { children: ReactResult<Dashboard>[] }) {\n  return <>{ props.children }</>;\n}\n\ntype DashProps = {\n  name: string;\n  metric: 'response_time_ms' | 'request_rate_ms';\n  unit?: 'ms';\n  timestamp: number;\n}\n\nexport function Dashboard({ name, metric, unit = 'ms', timestamp }: DashProps) {\n  const query = `SELECT ${metric} as m1 FROM data.time_series WHERE m1.timestamp > ${timestamp}`;\n  // Pretend these JSX YAML \"elements\" exist already, just for now.\n  return <YamlMap>\n    <YamlKeyVal key=\"name\" value={name} />\n    <YamlKeyVal key=\"metric\" value={metric} />\n    <YamlKeyVal key=\"unit\" value={unit} />\n    <YamlKeyVal key=\"query\" value={query} />\n  </YamlMap>\n} \n```", "```\nimport { Page, Dashboard, Dashboards } from 'shared-templates';\n\n// Convention would be that the default export is the primary entrypoint\n// so the \"renderer\" doesn't need to know the name of this root component.\n// \"Page\" would come from whatever system is rendering this thing.\nexport default function (props: Page) {\n  return (\n    <Dashboards>\n      <Dashboard\n        name=\"Response Times\"\n        metric=\"response_time_ms\"\n        timestamp={props.page.timestamp}\n      />\n      <Dashboard\n        name=\"Request Rates\"\n        metric=\"request_rates_ms\"\n        timestamp={props.page.timestamp}\n      />\n    </Dashboards>\n  )\n} \n```", "```\n<Dashboards>\n  <Dashboard name=\"Response Times\"/>\n  <Dashboard name=\"Request Rates\" />\n  {/* This \"div\" should be an error but will be allowed! */}\n  <div />\n</Dashboards> \n```", "```\nconst React = {\n  createElement: (\n    cmp: string | (() => any),\n    props: {} | null,\n    ...children: any[]\n  ) => {\n    const element = {\n      cmp,\n      props: props ? { ...props, children } : { children }\n    };\n    console.log(element);\n    return element;\n  }\n};\n\nfunction D() {\n  return (\n    <div>\n      <p>Hello</p>\n    </div>\n  );\n}\n\nD(); \n```", "```\nfunction D() {\n  return React.createElement(\"div\", null,\n    React.createElement(\"p\", null, \"Hello\"));\n} \n```", "```\n{ \"cmp\": \"p\", \"props\": { \"children\": [ \"Hello\" ] } } \n{ \"cmp\": \"div\", \"props\": { \"children\": [ { \"cmp\": \"p\", \"props\": { \"children\": [ \"Hello\" ] } } ] } } \n```", "```\n<Dashboards>\n  <Dashboard name=\"Response Times\"/>\n  <Dashboard name=\"Request Rates\" />\n</Dashboards> \n```", "```\nDashboards(\n  null, // props...\n  // \"children\" become varargs\n  Dashboard({ name: 'Response Times' }),\n  Dashboard({ name: 'Request Rates' }),\n) \n```", "```\nDashboards({\n  children: [\n    Dashboard({ name: 'Response Times' }),\n    Dashboard({ name: 'Request Rates' }),\n  ]\n}) \n```", "```\n[Dashboards,\n  null,\n  [Dashboard, { name: 'Response Times' }],\n  [Dashboard, { name: 'Request Rates' }],\n] \n```", "```\nbench:\n  - name: Squirtle\n    level: 27\n    moves:\n      - name: Bubble Beam\n        power: 45\n      - name: Water Gun\n        power: 40\n  - name: Charizard\n    level: 54\n    moves:\n      - name: Flamethrower\n        power: 90\n      - name: Ember\n        power: 40 \n```", "```\nfunction Bench(props: {\n  pokemon: [\n    ReturnType<typeof Pokemon>,\n    ReturnType<typeof Pokemon>?,\n    ReturnType<typeof Pokemon>?,\n    ReturnType<typeof Pokemon>?,\n    ReturnType<typeof Pokemon>?,\n    ReturnType<typeof Pokemon>?\n  ];\n}) {\n  return {\n    bench: props.pokemon\n  };\n} \n```", "```\nexport default function render() {\n  return Bench({\n    pokemon: [\n      Pokemon({\n        name: \"Squirtle\",\n        level: 45,\n        moves: [\n          Move({ name: \"Bubble Beam\" }),\n        ]\n      })\n    ]\n  });\n} \n```", "```\nfunction Move(props: {\n  name: \"Bubble Beam\" | \"Water Gun\" | \"Flamethrower\" | \"Ember\";\n}) {\n  switch (props.name) {\n    case \"Bubble Beam\": {\n      return { ...props, power: 45 };\n    }\n\n    case \"Ember\": {\n      return { ...props, power: 40 };\n    }\n\n    case \"Flamethrower\": {\n      return { ...props, power: 90 };\n    }\n\n    case \"Water Gun\": {\n      return { ...props, power: 40 };\n    }\n\n    default: {\n      const _n: never = props.name;\n      _n;\n    }\n  }\n} \n```", "```\nexport default function render() {\n  return Bench({\n    pokemon: [\n      Pokemon({\n        name: \"Squirtle\",\n        level: 45,\n        moves: [\n          Move({ name: \"Bubble Beam\" }),\n          // Type '\"Charizard\"' is not assignable to type\n          // '\"Bubble Beam\" | \"Water Gun\" | \"Flamethrower\" | \"Ember\"'.ts(2322)\n          Pokemon({\n            name: \"Charizard\",\n            level: 55,\n            moves: [Move({ name: \"Flamethrower\" })]\n          })\n        ]\n      })\n    ]\n  });\n} \n```", "```\nexport default function render() {\n  return Bench({\n    pokemon: [\n      Pokemon({\n        name: \"Squirtle\",\n        level: 27,\n        moves: [\n          Move({ name: \"Bubble Beam\" }),\n          Move({ name: \"Water Gun\" }),\n        ]\n      }),\n      Pokemon({\n        name: \"Charizard\",\n        level: 54,\n        moves: [\n          Move({ name: \"Flamethrower\" }),\n          Move({ name: \"Ember\" }),\n        ]\n      })\n    ]\n  });\n}\n\nimport yaml from 'js-yaml';\nconst rendered = yaml.safeDump(render())\nconst expected = '' +\n`bench:\n  - name: Squirtle\n    level: 27\n    moves:\n      - name: Bubble Beam\n        power: 45\n      - name: Water Gun\n        power: 40\n  - name: Charizard\n    level: 54\n    moves:\n      - name: Flamethrower\n        power: 90\n      - name: Ember\n        power: 40\n`\n\nconsole.log(rendered === expected); // true!\nconsole.log(rendered)\nconsole.log(expected) \n```", "```\nfunction Dashboards(props: { dashboards: ReturnType<typeof Dashboard>[] }) {\n  return { Dashboards: props.dashboards };\n}\n\nfunction Dashboard(props: {\n  name: string;\n  metric: \"response_time_ms\" | \"request_rate_ms\";\n  timestamp: number;\n  unit?: string;\n}) {\n  const unit = props.unit || \"ms\";\n  return {\n    ...props,\n    unit,\n    query: `SELECT ${props.metric} as m1 FROM data.time_series WHERE timestamp > ${props.timestamp}`\n  };\n}\n\nfunction render({ timestamp }: { timestamp: number }) {\n  return Dashboards({\n    dashboards: [\n      Dashboard({\n        name: \"Response Times\",\n        metric: \"response_time_ms\",\n        timestamp\n      }),\n      Dashboard({ name: \"Request Rates\", metric: \"request_rate_ms\", timestamp })\n    ]\n  });\n}\n\nimport yaml from \"js-yaml\";\nconst rendered = yaml.safeDump(render({ timestamp: Date.now() }));\n\nconsole.log(rendered); \n```", "```\nDashboards:\n  - name: Response Times\n    metric: response_time_ms\n    timestamp: 1584927255103\n    unit: ms\n    query: >-\n      SELECT response_time_ms as m1 FROM data.time_series WHERE timestamp >\n      1584927255103\n  - name: Request Rates\n    metric: request_rate_ms\n    timestamp: 1584927255103\n    unit: ms\n    query: >-\n      SELECT request_rate_ms as m1 FROM data.time_series WHERE timestamp >\n      1584927255103 \n```"]