- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 13:23:03'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Shell, Awk, and Make Should Be Combined
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.oilshell.org/blog/2016/11/13.html](https://www.oilshell.org/blog/2016/11/13.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| [blog](/blog/) | [oilshell.org](/)'
  prefs: []
  type: TYPE_NORMAL
- en: Shell, Awk, and Make Should Be Combined
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '2016-11-13'
  prefs: []
  type: TYPE_NORMAL
- en: '[The shell](/cross-ref.html?tag=shell#shell) has been a part of Unix since
    its first release in 1971, while [Awk](/cross-ref.html?tag=awk#awk) and [Make](/cross-ref.html?tag=make#make)
    were additions to Unix, both released in 1977 and developed at Bell Labs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These three tools were conceived as domain-specific languages with **distinct
    roles**:'
  prefs: []
  type: TYPE_NORMAL
- en: Shell is about sequential and parallel *composition of processes*, including
    pipelines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Awk is about *streaming computation* over rows of data. It has regular expressions
    and associative arrays, which presaged Perl, Python, Ruby, JavaScript, and the
    like.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make is about *data-driven, incremental, and parallel computation*, also using
    Unix processes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Not only do they survive four decades later, they''re as popular as ever:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A major new feature of Windows 10 is that [it can run a 27-year-old program:
    bash](https://blogs.windows.com/buildingapps/2016/03/30/run-bash-on-ubuntu-on-windows/#o8Hjme8wQwqvj80U.97).
    This is apparently an improvement on the dev environment of an OS that has itself
    been around for three decades.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Despite scores of "Make replacements" that exist, it's the most common build
    tool you'll encounter in a Unix environment. Makefile tutorials are still being
    written in 2016\. An excellent [book on GNU Make](https://www.amazon.com/GNU-Make-Book-Graham-Cumming/dp/1593276494)
    was published in 2015.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Awk is less popular due to the adoption of its successors, but it's still deeply
    embedded in the build processes of [Linux, FreeBSD](http://lists.landley.net/pipermail/toybox-landley.net/2016-July/008499.html),
    and other foundational software.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The success of these tools has led to an common anti-pattern: they grew into
    [ALGOL-like languages](/cross-ref.html?tag=algol-like#algol-like) with a **quirky
    syntax** constrained by backward compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tomorrow, I''ll show this with example code in three languages. For now, let
    me support this argument with some observations:'
  prefs: []
  type: TYPE_NORMAL
- en: It's common to see all three languages in the **same source tree** (e.g. Linux,
    FreeBSD), which is a tax on holistic understanding.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not only are they in the same tree, but they're often **embedded** within each
    other. When you see `awk` in a `Makefile`, you're seeing **three** intertwined
    languages, because `make` is a **macro language** that passes command strings
    literally to `/bin/sh`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Quoting is difficult when composing two languages, let alone three. Here''s
    a sample from my `~/src` dir:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Make and shell have unfortunate **syntactic conflicts**. For example: `$@`
    means the *output file* of a rule in Make, but it means the *arguments array*
    in shell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eighty percent of lines in a typical `Makefile` are **literally shell**, or
    variable assignments that are easily expressed in shell. It's easy to imagine
    extensions to shell syntax to support Make's semantics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make and shell both [simulate arrays with delimited strings](06.html), leading
    to quoting problems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As far as awk:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bash` and `zsh` add **associative arrays** and **regex support** to shell,
    which makes them semantically close to `awk`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Awk only has floating point **arithmetic**, and bash only has integer arithmetic.
    It's easy to imagine a language with both.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Awk and shell are similar in an interesting way: they lack **garbage collection**.
    This leads to arrays that can neither be nested nor returned from functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What all three languages have in common:'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Despite their origins, the three languages are now more similar than different
    — at least semantically. We'll see tomorrow that their syntaxes are wildly and
    needlessly different.
  prefs: []
  type: TYPE_NORMAL
- en: And while I'm wary of discussing plans without code, I should say that I want
    `oil` to subsume `awk` and `make` as well. I expect that this theme will consume
    many more blog posts.
  prefs: []
  type: TYPE_NORMAL
