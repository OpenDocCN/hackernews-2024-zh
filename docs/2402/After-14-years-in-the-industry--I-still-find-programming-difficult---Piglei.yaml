- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 13:19:17'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 13:19:17'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: After 14 years in the industry, I still find programming difficult | Piglei
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在这个行业工作了14年后，我仍然觉得编程很难 | Piglei
- en: 来源：[https://www.piglei.com/articles/en-programming-is-still-hard-after-14-years/](https://www.piglei.com/articles/en-programming-is-still-hard-after-14-years/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.piglei.com/articles/en-programming-is-still-hard-after-14-years/](https://www.piglei.com/articles/en-programming-is-still-hard-after-14-years/)
- en: Many years ago, as a senior computer science student, I spent my days browsing
    through various job postings online, hoping to find a suitable internship position
    as a programmer.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 许多年前，作为一名高级计算机科学学生，我整天浏览各种在线职位招聘，希望找到一份合适的编程实习岗位。
- en: 'In addition to intern positions, I would occasionally click on the ads for
    "senior engineer" positions. Looking back on those ads now, what struck me most,
    besides the dazzling technical jargon, was the often first-line requirement for
    years of experience: "This position requires **5+ years of experience**".'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 除了实习岗位，我偶尔也会点击“高级工程师”职位的广告。现在回想起那些广告，除了令人眼花缭乱的技术术语外，最让我印象深刻的是通常的第一条要求：需要**5+年的工作经验**。
- en: As a complete novice who had never worked a day in the field, these experience
    requirements seemed excessive. But while I was feeling a bit discouraged, I couldn't
    help but fantasize, "A programmer with five years of experience must be really
    impressive, right? Is writing code as easy as eating cookies for them?"
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个完全的新手，从未在这个领域工作过的人，这些经验要求似乎有些过分了。但当我感到有些泄气时，我忍不住幻想，“一个有五年经验的程序员一定很厉害，对吧？对他们来说写代码就像吃饼干一样容易吗？”
- en: 'Time flies, more than a decade has passed in the blink of an eye. Looking back
    now, I find myself a proud programmer with 14 years of experience. After years
    of fighting through the trenches of the software development industry, I''ve come
    to realize that many aspects are quite different from what I imagined during my
    senior year of college, for example:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 光阴似箭，转眼间已经过去了十多年。现在回首往事，我发现自己是一个拥有14年经验的自豪程序员。经过多年在软件开发行业的奋斗，我意识到许多方面与我在大学高年级时所想象的相当不同，例如：
- en: Programming doesn't get much easier with experience, the idea that it's "as
    easy as eating cookies" only happens in dreams.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着经验的增加，编程并不会变得更容易，认为它“像吃饼干一样容易”的想法只会出现在梦中。
- en: Writing code for many "big projects" is not only uninteresting, it's dangerous,
    much less fun than solving an algorithmic problem on LeetCode.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为许多“大项目”编写代码不仅令人无聊，而且危险，远不如在LeetCode上解决算法问题有趣。
- en: Thinking only from a technical perspective doesn't make you a good programmer,
    some things are much more important than technology.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只从技术角度思考并不会让你成为一个优秀的程序员，有些东西比技术更重要。
- en: Upon reflection, there are many more such insights about programming. I've summarized
    eight of them in this article. If any of them resonate with you, I would be very
    pleased.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 经过反思，关于编程还有许多类似的见解。我在这篇文章中总结了其中的八条。如果其中有任何一条与你 resonates，我会感到非常高兴。
- en: 1\. Writing code is easy, but writing good code is hard
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1\. 编写代码很容易，但写好代码很难
- en: Programming used to be a highly specialized skill with a high barrier to entry.
    In the past, if an average person wanted to learn programming, the most common
    approach was to read books and documentation. However, most programming books
    were quite abstruse and unfriendly to beginners, causing many to give up before
    they could ever enjoy the fun of programming.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 编程曾经是一项高度专业化的技能，门槛很高。过去，如果一个普通人想学习编程，最常见的方法是阅读书籍和文档。然而，大多数编程书籍相当晦涩，对初学者不友好，导致许多人在能够享受编程乐趣之前就放弃了。
- en: But now, learning to code is becoming more accessible. Learning no longer means
    plowing through textbooks, instead, there are many new ways to learn. Watching
    tutorial videos, taking interactive courses on [Codecademy](https://www.codecademy.com/),
    or even playing coding games on [CodeCombat](https://codecombat.com/) - everyone
    can find a learning method that suits them.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在，学习编程变得更加容易。学习不再意味着啃书本，相反，有许多新的学习方法。观看教程视频，在[Codecademy](https://www.codecademy.com/)上参加交互式课程，甚至在[CodeCombat](https://codecombat.com/)上玩编程游戏——每个人都能找到适合自己的学习方法。
- en: '"Mom, I''m not just playing games, I''m learning to code! Look at the right
    side of the screen!"'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '"妈妈，我不只是在玩游戏，我在学习编程！看屏幕右侧！"'
- en: Programming languages are also becoming more user-friendly. Classic languages
    like C and Java are no longer the first choice for most beginners, and many simpler,
    more accessible dynamic languages are now popular. The IDEs and other tools have
    also improved. Together, these factors lower the learning curve for programming.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言也变得更加用户友好。像C和Java这样的经典语言不再是大多数初学者的首选，现在许多更简单、更易于接触的动态语言变得流行。IDE和其他工具也得到了改进。所有这些因素共同降低了编程的学习曲线。
- en: In short, programming has shed its mystical aura, transforming from an arcane
    skill mastered by a select few to a craft that anyone can learn.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，编程已经摆脱了神秘的光环，从少数人掌握的神秘技能转变为任何人都可以学习的工艺。
- en: 'But a lower barrier to entry and friendlier programming languages don''t mean
    that anyone can write good code. If you have been involved in any "enterprise"
    software projects, let me ask you a question: "What is the quality of the code
    in the projects you work on every day? Is there more good code or more bad code?"'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，降低了进入门槛和更友好的编程语言并不意味着任何人都能写出优秀的代码。如果你参与过任何“企业”软件项目，让我问你一个问题：“你每天工作的项目中代码的质量如何？好的代码多还是坏的代码多？”
- en: I'm not sure what your answer is, but let me share mine.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定你的答案是什么，但让我分享一下我的。
- en: Good code is still rare
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 好的代码仍然很少见
- en: In 2010, I changed jobs to work for a large Internet company.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 2010年，我换了一份工作，去了一家大型互联网公司。
- en: Before joining this company, I had only worked in start-ups with about ten people,
    so I had high expectations from my new employer, especially in terms of software
    quality. I thought to myself, "Considering this is a 'big' project supporting
    products used by millions of users, the code quality has to be much better than
    what I've seen before!"
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在加
- en: It took me only a week at the new company to realize how far off the mark I
    was. The code quality of the so-called "big" project was far from what I had expected.
    When I opened the IDE, functions consisted of hundreds of lines of code and mysterious
    numeric literals were everywhere, making the development of even the smallest
    feature seem Herculean.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在新公司工作了一周后，我意识到我错得有多远。所谓的"大"项目的代码质量远非我所期望的那样。当我打开 IDE 时，函数由数百行代码组成，到处都是神秘的数字文字，使得即使是最小的功能开发也显得艰巨。
- en: 'After that, as I worked in more companies and saw more software projects, I
    came to understand a truth: **No matter how big the company or how impressive
    the project, encountering good code in practice is still a rare event.**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此后，当我在更多的公司工作并看到更多的软件项目时，我逐渐明白了一个真理：**无论公司有多大，项目有多么令人印象深刻，实际中遇到好的代码仍然是一件罕见的事情。**
- en: What is good code?
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 什么是好代码？
- en: 'Let''s go back to the question of what exactly defines good code. A quote from
    Martin Fowler is often cited in this context:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到什么才定义好的代码的问题。在这方面，马丁·福勒的一句话经常被引用：
- en: '"Any fool can write code that a computer can understand. Good programmers write
    code that humans can understand."'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"任何傻瓜都可以编写计算机能理解的代码。优秀的程序员编写的是人类能理解的代码。"'
- en: 'I believe this statement can serve as a starting point for evaluating good
    code: it must be readable, understandable, and clear. The first principle of writing
    good code is to put the human reader first.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信这个声明可以作为评估好代码的起点：它必须可读、易懂和清晰。编写好代码的第一原则是把人类读者放在第一位。
- en: 'Beyond readability, there are many other dimensions to consider when evaluating
    code quality:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了可读性之外，在评估代码质量时还有许多其他方面需要考虑：
- en: '**Adherence to the programming language**: Does it use the recommended practices
    of the current programming language? Are language features and syntactic sugars
    used appropriately?'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**遵循编程语言规范**：是否使用了当前编程语言的推荐实践？语言特性和语法糖是否得到了恰当使用？'
- en: '**Ease of Modification**: Does the code design account for future changes,
    and is it easy to modify when those changes occur?'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于修改**：代码设计是否考虑了未来的变化，并且在这些变化发生时是否容易修改？'
- en: '**Reasonable API Design**: Is the API design reasonable and easy to use? A
    good API is convenient for simple scenarios and can be extended as needed for
    advanced use cases.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合理的 API 设计**：API 设计是否合理且易于使用？优秀的 API 对简单场景很方便，并且可以根据需要进行扩展以适应高级用例。'
- en: '**Adequate Performance**: Does the code performance meet current business needs,
    with room for improvement in the future?'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**足够的性能**：代码性能是否满足当前业务需求，并且未来是否有改进的空间？'
- en: '**Avoidance of Overdesign**: Does the code suffer from overdesign or premature
    optimization?'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免过度设计**：代码是否遭受过度设计或过早优化？'
- en: '...'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '...'
- en: In short, for programmers at any level, good code doesn't come easy. Writing
    good code requires a delicate balance across multiple dimensions, meticulous design,
    and continuous refinement.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，对于任何水平的程序员来说，写好的代码并不容易。编写优秀的代码需要在多个维度上取得微妙的平衡，需要仔细的设计和持续的完善。
- en: Given this, is there a shortcut to mastering the craft of coding?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于此，是否有掌握编码技艺的捷径？
- en: The shortcut to writing good code
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 写好代码的捷径
- en: In many ways, I think programming is a lot like writing. Both involve using
    text and symbols to convey ideas, albeit in slightly different ways.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，我认为编程很像写作。两者都涉及使用文本和符号来传达思想，尽管方式略有不同。
- en: 'When it comes to writing, I like to ask a question about writers: "Have you
    ever heard of a writer who doesn''t read? Have you ever heard of a writer who
    claims to read only his own work and not the work of others?" My guess is that
    the answer is probably NO.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到写作时，我喜欢问一个关于作家的问题："你听说过一个不读书的作家吗？你听说过一个声称只读自己作品而不读别人作品的作家吗？"我猜答案可能是否定的。
- en: if you do some research, you'll find that many professional writers spend their
    days in a constant cycle of reading and writing. They spend a significant amount
    of time each day reading a variety of texts and then writing.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你做一些研究，你会发现许多专业作家整天都在不断地阅读和写作。他们每天花费大量时间阅读各种文本，然后写作。
- en: As "wordsmiths," programmers often neglect reading. However, reading is an essential
    part of quickly improving your programming skills. In addition to the projects
    we encounter in our daily work, we should read more classic software projects
    to learn about API design, module architecture, and code-writing techniques.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 作为"文字匠"，程序员经常忽视阅读。然而，阅读是快速提高编程技能的重要组成部分。除了我们在日常工作中遇到的项目之外，我们应该阅读更多经典的软件项目，以了解
    API 设计、模块架构和编码技术。
- en: Not only code and technical documents, it's also beneficial to read programming
    books regularly to maintain the habit of reading. In this regard, I believe Jeff
    Atwood's article, ["Programmers Don't Read Books -- But You Should"](https://blog.codinghorror.com/programmers-dont-read-books-but-you-should/),
    written 15 years ago, is still relevant today.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅仅是代码和技术文档，定期阅读编程书籍也有益于保持阅读习惯。在这方面，我相信杰夫·阿特伍德 15 年前撰写的文章，《程序员不读书 —— 但你应该读》，至今仍然相关。
- en: The shortcut to improving programming skills is hidden in the endless cycle
    of `"Reading <-> Programming"`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 提高编程技能的捷径隐藏在无尽的循环中`"阅读 <-> 编程"`中。
- en: '"What should a good programmer do?"'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '"一个好的程序员应该做什么？"'
- en: 2\. The essence of programming is "creating"
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. 编程的本质是"创造"
- en: In the daily work of a programmer, many things can fill you with a sense of
    accomplishment and even make you involuntarily exclaim, *"Programming is the best
    thing in the world!"* For example, fixing an extremely difficult bug, or doubling
    code performance with a new algorithm. But of all these accomplishments, none
    can compare to the act of **creating** something with your own hands.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序员的日常工作中，许多事情都能让你充满成就感，甚至会让你不由自主地感叹：“编程是世界上最好的事情！”例如，修复一个极其困难的错误，或者用新算法将代码性能提升一倍。但在所有这些成就中，没有一项能与用自己的双手**创造**某物相比。
- en: When you're programming, opportunities to create new things are everywhere.
    Because creating isn't just about releasing a new piece of software. Writing a
    reusable utility function or designing a clear data model all fall under the category
    of creating.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在编程时，创造新事物的机会无处不在。因为创造不仅仅是发布一款新软件。编写一个可重用的实用函数或设计一个清晰的数据模型都属于创造的范畴。
- en: 'For programmers, maintaining a passion for "creating" is crucial because it
    can help us to:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对程序员来说，保持对“创造”的热情至关重要，因为它可以帮助我们：
- en: '**Learn more efficiently**: The most effective way to learn a new technology
    is to build a real project with it. Learning through the process of creation yields
    the best results.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更高效地学习**：学习新技术的最有效方式是用它来构建一个真实的项目。通过创造的过程来学习会产生最好的结果。'
- en: '**Encounter extraordinary things**: Many world-changing open source software
    projects were originally started by their authors out of pure interest, such as
    Linus Torvalds with Linux and Guido van Rossum with Python.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**遭遇非凡的事物**：许多改变世界的开源软件项目最初是由其作者出于纯粹的兴趣开始的，比如 Linus Torvalds 的 Linux 和 Guido
    van Rossum 的 Python。'
- en: During the Christmas holiday of 1989, the Dutchman Guido van Rossum typed the
    first few lines of code for the Python language. Initially expected to be a successor
    to the ABC language, it is eventually "eating" the whole world.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1989 年的圣诞节，荷兰人 Guido van Rossum 输入了 Python 语言的前几行代码。最初预期它会成为 ABC 语言的继任者，但最终它“吞噬”了整个世界。
- en: While there are many benefits to "creating", and programmers have plenty of
    opportunities to engage in it, many often lack the awareness of being a "creator."
    This is similar to the widely told story about a philosopher who asked bricklayers
    what they were doing. Some were clearly aware they were building a cathedral,
    while others thought they were merely laying bricks. Many programmers are like
    the latter, seeing only the bricks, not the cathedral.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管“创造”有许多好处，程序员们有很多机会参与其中，但许多人往往缺乏作为“创造者”的意识。这就像一个广为传颂的故事，一个哲学家问砌砖工他们在做什么。有些人明确意识到他们正在建造一座大教堂，而另一些人认为他们只是在铺砖。许多程序员就像后者，只看到了砖头，而不是大教堂。
- en: 'Once you start seeing yourself as a creator, your perspective on things can
    change drastically. For example, when adding error messages to an API, creators
    can escape the mental trap of "just getting the job done" and ask themselves more
    important questions: "What kind of product experience do I want to **create**
    for the user? What error messages will best help me achieve that goal?"'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你开始把自己看作是一个创造者，你对事物的看法就会发生巨大改变。例如，在为 API 添加错误消息时，创造者可以摆脱“只是完成任务”的心理陷阱，问自己更重要的问题：“我想为用户创造什么样的产品体验？什么样的错误消息会最好地帮助我实现这个目标？”
- en: 'Like any useful programming pattern, the "creator mindset" can become an important
    driving force in your career. So now ask yourself: "What will my next creation
    be?'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 像任何有用的编程模式一样，“创作者心态”可以成为你职业生涯中的重要驱动力。所以现在问问自己：“我的下一个创作会是什么？
- en: 3\. Creating an efficient trial-and-error environment is crucial
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3\. 创建一个高效的试错环境至关重要
- en: I was once involved in the development of an Internet product that was beautifully
    designed, feature-rich, and used by a massive number of users every day.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾参与开发过一个设计精美、功能丰富、每天被大量用户使用的互联网产品。
- en: But despite its market success, the quality of the engineering was terrible.
    If you were to dive into its backend repository and check every directory, you
    wouldn't find a single line of unit test code, not to mention that other automated
    testing processes were out of the question. The business logic was extremely complex,
    resulting in a tangle of unexpected code dependencies. Developing a new feature
    often risked breaking existing functionalities.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但尽管市场上取得了成功，工程质量却很糟糕。如果你深入研究其后端仓库并检查每个目录，你不会找到一行单元测试代码，更不用说其他自动化测试流程了。业务逻辑极为复杂，导致了一团意想不到的代码依赖关系。开发一个新功能往往冒着破坏现有功能的风险。
- en: '"What are you working on?"'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: “你在做什么？”
- en: As a result, both the developers and the product team had to be on high alert
    every time the project was released, creating a tense atmosphere. The release
    process was thrilling, and emergency rollbacks were common. Working in such an
    environment, one might not necessarily grow technically, but their psychological
    resilience would surely be tested.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于如此，开发人员和产品团队每次项目发布时都必须保持高度警惕，营造出一种紧张的氛围。发布过程令人兴奋，紧急回滚很常见。在这样的环境中工作，一个人可能不一定在技术上成长，但他们的心理韧性肯定会受到考验。
- en: Programming is supposed to be fun, but coding for such a project, the joy was
    nowhere to be found. What exactly takes the fun out of programming?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 编程应该是有趣的，但是为这样的项目编码，乐趣却无处寻找。到底是什么让编程失去了乐趣？
- en: The ideal programming experience ≈ "solving LeetCode problems"
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 理想的编程体验≈“解决 LeetCode 问题”
- en: '[LeetCode](https://leetcode.cn/) is a well-known programming learning website
    that offers a lot of programming problems covering various levels of difficulty,
    most of which are algorithm-related. Users can select an interesting problem and
    code directly in the browser (supporting multiple programming languages) and execute
    it. If all test cases are passed, the solution is considered successful.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[LeetCode](https://leetcode.cn/) 是一个知名的编程学习网站，提供许多涵盖各种难度级别的编程问题，其中大多数与算法相关。用户可以选择一个有趣的问题，在浏览器中直接编写代码（支持多种编程语言）并执行它。如果所有测试用例都通过，则解决方案被视为成功。'
- en: Solving problems on LeetCode
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 LeetCode 上解决问题
- en: 'Solving problems on LeetCode is similar to playing a game—challenging and fun.
    The entire process perfectly exemplifies an idealized programming experience:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 LeetCode 上解决问题类似于玩游戏——具有挑战性和乐趣。整个过程完美地展示了一种理想化的编程体验：
- en: '**Separation of concerns**: Each problem is an independent entity, allowing
    developers to immerse themselves in one problem at a time.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关注点分离**：每个问题都是一个独立的实体，允许开发者一次只专注于一个问题。'
- en: '**Fast and accurate feedback**: After each code adjustment, developers can
    quickly get feedback from automated tests.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速准确的反馈**：每次代码调整后，开发者都可以从自动化测试中快速获得反馈。'
- en: '**Zero-cost trial and error**: There are no negative consequences if the code
    has syntax errors or logical flaws, reducing mental load.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**零成本试错**：如果代码存在语法错误或逻辑缺陷，都没有负面后果，减少了心理负担。'
- en: However, you in front of the screen might think I'm stating the obvious.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你们屏幕前的人可能会认为我在陈述显而易见的事实。
- en: '*"So what? Isn''t that how you solve LeetCode problems and write scripts? What''s
    so special about that?"* You might add, *"Do you know how complex our company''s
    projects are? They''re huge in scale, with countless modules. Do you understand
    what I''m saying? Serving millions of users every day, with several databases
    and three types of message queues, of course, development is a bit more troublesome!"*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*"那又怎样？难道你解决 LeetCode 问题和编写脚本的方式不是这样吗？有什么特别之处吗？"* 你可能会补充道，*"你知道我们公司的项目有多复杂吗？它们在规模上很大，有无数的模块。你理解我在说什么吗？每天为数百万用户提供服务，有几个数据库和三种类型的消息队列，当然，开发会麻烦一些！"*'
- en: Indeed, software development varies greatly and can't always be as straightforward
    and pleasant as solving problems on LeetCode. But that doesn't mean we shouldn't
    strive to improve the programming environment we're in, even if only a little
    bit.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，软件开发差异很大，不总是像解决 LeetCode 问题那样直截了当和愉快。但这并不意味着我们不应该努力改善我们所处的编程环境，即使只是一点点。
- en: 'To improve the programming experience by improving the environment, the concepts
    and tools available include:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过改善环境来改善编程体验的概念和工具包括：
- en: '**Modular thinking**: Properly designing each module in the project to reduce
    coupling and increase orthogonality.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化思维**：适当设计项目中的每个模块，以减少耦合并增加正交性。'
- en: '**Design principles**: At the micro level, apply classic design principles
    and patterns such as the "SOLID" principles.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计原则**：在微观层面上应用经典的设计原则和模式，如“SOLID”原则。'
- en: '**Automated testing**: Write good unit tests, use mocking techniques when appropriate,
    and cover critical business paths with automated testing.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化测试**：编写良好的单元测试，适当时使用模拟技术，并使用自动化测试覆盖关键业务路径。'
- en: '**Shorten feedback loops**: Switch to faster compiling tools, optimize unit
    test performance, and do everything possible to reduce the "code change to feedback"
    wait time.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩短反馈循环**：切换到更快的编译工具，优化单元测试性能，尽一切可能缩短“代码修改到反馈”等待时间。'
- en: '**Microservice architecture**: When necessary, break down a large monolith
    into multiple microservices with distinct responsibilities to disperse complexity.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务架构**：在必要时，将大型单体架构拆分为多个具有明确职责的微服务，以分散复杂性。'
- en: '...'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: …
- en: Focusing on the programming environment and deliberately creating a "coding
    paradise" that allows for efficient trial and error can make work as enjoyable
    as solving LeetCode problems. It's one of the best contributions that experienced
    programmers can make to their teams.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 关注编程环境，刻意创建一个允许高效试错的“编程天堂”可以使工作像解决 LeetCode 问题一样愉快。这是经验丰富的程序员可以为团队做出的最好贡献之一。
- en: 4\. Avoid the trap of coding perfectionism
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免编码完美主义的陷阱
- en: Striving for excellence in code quality is commendable, but be careful not to
    fall into the trap of perfectionism. Coding is not an art form that encourages
    the endless pursuit of perfection. While a writer may spend years perfecting a
    timeless masterpiece, programmers who fixate on code to an extreme extent are
    problematic.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 追求代码质量的卓越是值得称赞的，但要小心不要陷入完美主义的陷阱。编码不是一种鼓励不断追求完美的艺术形式。虽然作家可能花费数年完善一部永恒的杰作，但过度追求代码的程序员是有问题的。
- en: No code is perfect. Most of the time, as long as your code meets current needs
    and leaves room for future expansion, it's good enough. A few times I have seen
    candidates label themselves as "clean code advocate " on their resumes. While
    I can feel their commitment to code quality through the screen, deep down I hope
    that they have already left the trap of perfectionism far behind.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 没有完美的代码。大多数情况下，只要您的代码满足当前需求并为将来的扩展留出空间，那就足够了。我有几次见过候选人在简历上将自己标榜为“优秀代码倡导者”。虽然我能感受到他们通过屏幕对代码质量的承诺，但在内心深处，我希望他们早已远离了完美主义的陷阱。
- en: 5\. Technology is important, but people may be more important
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 技术很重要，但人可能更重要
- en: 'In software development, the Single Responsibility Principle (SRP) is a well-known
    design principle. Its definition is simple and can be summed up in one sentence:
    "Every software module should have only one reason to change."'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，单一责任原则（SRP）是一个众所周知的设计原则。它的定义很简单，可以用一句话概括：“每个软件模块应该只有一个改变的理由。”
- en: Single Responsibility Principle
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 单一责任原则
- en: To master the SRP, the key is to understand what defines a "reason to change".
    Clearly, programs are lifeless; they cannot and do not need to change on their
    own. Any reason to modify a program comes from the people associated with it –
    they are the true instigators of change.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要精通SRP，关键在于理解什么定义了“变更原因”。显然，程序是无生命的；它们不能也不需要自行改变。修改程序的任何原因都来自与之相关联的人——他们是变更的真正发起者。
- en: Let's consider a simple example. Look at the two classes below, which one violates
    the SRP principle?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个简单的例子。看一下下面的两个类，哪一个违反了SRP原则？
- en: 'A dictionary data class that supports two types of operations: storing data
    and retrieving data;'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个支持两种类型操作的字典数据类：存储数据和检索数据；
- en: 'An employee profile class that supports two types of operations: updating personal
    information and rendering a user profile card image.'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个员工资料类，支持两种类型的操作：更新个人信息和渲染用户资料卡图片。
- en: 'To most people, the first example seems fine, but the second one clearly violates
    the SRP principle. This conclusion can be reached almost intuitively, without
    any rigorous analysis or proof. However, if we analyze it properly, the issue
    with the second example becomes apparent when we find two different reasons for
    modification:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对大多数人来说，第一个例子看起来还不错，但第二个例子明显违反了SRP原则。这个结论几乎可以凭直觉得出，无需进行严格的分析或证明。然而，如果我们进行适当的分析，就会发现第二个例子的问题显而易见，因为我们找到了两个不同的修改原因：
- en: Management believes that the "personal phone" field in the profile cannot contain
    illegal numbers and requires the addition of simple validation logic.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理认为个人资料中的“个人电话”字段不能包含非法号码，并需要添加简单的验证逻辑。
- en: An employee feels that the "name" section on the profile card image is too small
    and wants to increase the font size.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一位员工觉得个人资料卡上的“姓名”部分太小，想要增大字体大小。
- en: '"It is people who request changes. And you don’t want to confuse those people,
    or yourself, by mixing together the code that many different people care about
    for different reasons." — "The Single Responsibility Principle"'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “请求更改的是人。而你不希望混淆那些人，或者混淆你自己，混合那么多不同人基于不同原因关心的代码。”——“单一责任原则”
- en: The key to understanding the SRP principle is to first understand people and
    the roles they play in software development.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 理解SRP原则的关键是首先要了解人和他们在软件开发中扮演的角色。
- en: Here's another example. Microservices architecture has been a hot topic in recent
    years. However, many discussions about it tend to focus only on the technology
    itself, overlooking the relationship between microservices architecture and people.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个例子。近年来，微服务架构一直是热门话题。然而，对它的许多讨论往往只关注技术本身，而忽略了微服务架构与人的关系。
- en: The essence of what differentiates microservices architecture from other concepts
    lies in the clearer boundaries between different modules after a large monolith
    is broken down into independent microservices. Compared to a large team of hundreds
    maintaining a monolithic system, many small organizations each maintaining their
    own microservices can operate much more efficiently.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构与其他概念的本质区别在于将庞大的单体应用拆分为独立的微服务后，不同模块之间的边界变得更加清晰。与维护大型单体系统的数百人团队相比，许多小型组织各自维护其自己的微服务，可以运行得更加高效。
- en: Talking about the various technical benefits and the fancy features of microservices
    without the context of a specific organizational size (i.e., "people") is putting
    the cart before the horse.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 谈论各种技术优势和微服务的花哨功能，却没有特定组织规模（即“人”）的背景是本末倒置的。
- en: Technology is undoubtedly important. As technical professionals, beautiful architectural
    diagrams and creative code naturally grab our attention. But, also make sure not
    to overlook "people," another critical factor in software development. When necessary,
    shift your perspective from "technology" to "people"; it can be significantly
    beneficial for you.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 技术无疑很重要。作为技术专业人员，美丽的架构图和创造性的代码自然会吸引我们的注意。但同时，也要确保不要忽视“人”，这是软件开发的另一个关键因素。在必要时，将你的视角从“技术”转移到“人”，这对你可能会有显著的益处。
- en: 6\. Studying is good, but learning method matters
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6\. 学习是好的，但学习方法很重要
- en: Today, everyone is talking about "lifelong learning," and programmers are a
    profession that especially requires this continuous pursuit of knowledge. Computer
    technology evolves rapidly, and a framework or programming language that was popular
    three years ago may very well be outdated just a month ago.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，每个人都在谈论“终身学习”，而程序员是一种特别需要这种持续追求知识的职业。计算机技术发展迅速，三年前流行的框架或编程语言可能在一个月前就已过时了。
- en: What happens in one minute?
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一分钟内会发生什么？
- en: 'To excel at their jobs, programmers need to learn a huge collection of topics
    spanning various areas. Taking the backend field, which I am more familiar with,
    as an example, a competent backend engineer should be proficient in at least the
    following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要在工作中表现出色，程序员需要学习涵盖各个领域的大量主题。以我更熟悉的后端领域为例，一位称职的后端工程师至少应精通以下内容：
- en: One or more backend programming languages / Relational databases like MySQL
    / Common storage components like Redis / Design patterns / User experience / Software
    engineering / Operating systems / Networking basics / Distributed systems / …
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个或多个后端编程语言 / 关系型数据库，如 MySQL / 常见存储组件，如 Redis / 设计模式 / 用户体验 / 软件工程 / 操作系统 /
    网络基础知识 / 分布式系统 / …
- en: Though there's a lot to learn, from my observations, most programmers actually
    love learning (or at least do not resist it), so mindset is not the issue. However,
    sometimes, just having an "eagerness to learn" isn't enough; when learning, we
    need to pay particular attention to the "cost-effectiveness" of our study.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有很多东西要学，但根据我的观察，大多数程序员实际上喜欢学习（或至少不抗拒），所以心态不是问题。然而，有时候，只是“渴望学习”还不够；在学习时，我们需要特别注意我们学习的“成本效益”。
- en: Focusing on the cost-effectiveness of learning
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关注学习的成本效益
- en: The following chart shows the relationship between learning outcomes and the
    effort invested.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了学习成果与投入的关系。
- en: Learning outcomes versus investment graph, with learning efforts on the x-axis
    and performance on the y-axis
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 学习成果与投入的图表，学习努力在x轴上，绩效在y轴上
- en: The graph indicates that in the initial stages of learning, returns on relatively
    small investments grow rapidly. However, once outcomes exceed a certain threshold,
    the investment required to continue improving grows exponentially.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图表表明，在学习的初期阶段，相对较小的投资回报增长迅速。然而，一旦结果超过一定阈值，继续改善所需的投资就会呈指数级增长。
- en: 'For this reason, I suggest that whenever you start learning something new,
    first clarify this question in your mind: *“At what point on the graph should
    I stop?"* rather than studying relentlessly.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我建议每当你开始学习新东西时，首先在心中澄清这个问题：*“在图表的哪个点上我应该停止？”*而不是不懈地学习。
- en: The ocean of knowledge is limitless. Some things require years of continuous
    study and refinement, while others require only a touch-and-go to gain sufficient
    understanding. Accurately assessing and allocating your limited learning energy
    is sometimes even more important than the act of studying hard itself.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 知识的海洋是无限的。有些事情需要连续几年的学习和完善，而另一些只需要轻轻一碰就能获得足够的理解。准确评估和分配你有限的学习精力有时甚至比努力学习本身更重要。
- en: Choosing appropriate learning materials
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 选择合适的学习材料
- en: Once you have set your learning goals, the next step is to find the right learning
    materials. I would like to share my own failure in this regard.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了学习目标，下一步就是找到合适的学习材料。我想分享一下我在这方面的失败。
- en: 'At one point, I developed a strong interest in product interaction design and
    felt that I needed to learn more about it. So, I carefully selected a classic
    book in the field, [“About Face 4: The Essentials of Interaction Design”](https://www.goodreads.com/book/show/48495224-about-face-4-the-essence-of-interaction-design),
    and brought it home, confident that my interaction design skills would quickly
    improve.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '曾经，我对产品交互设计产生了浓厚的兴趣，并觉得需要更多地了解它。因此，我精心挑选了这个领域的一本经典书籍，[“About Face 4: The Essentials
    of Interaction Design”](https://www.goodreads.com/book/show/48495224-about-face-4-the-essence-of-interaction-design)，并带回家，相信我的交互设计技能会迅速提高。'
- en: However, things didn't go as planned. When I opened that classic, I found that
    I couldn't even get through the first chapter—there's truth in the saying, “Don't
    bite off more than you can chew”.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，事情并没有按计划进行。当我打开那本经典著作时，我发现我甚至无法读完第一章——谚语“贪多嚼不烂”中有道理。
- en: From this failure, I gleaned a piece of advice. When learning something new,
    it's best to choose materials that are more accessible and suitable for beginners,
    rather than just aiming for the most classic and authoritative ones.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 从这次失败中，我得到了一个建议。当学习新东西时，最好选择更容易接触并适合初学者的材料，而不是只追求最经典和权威的。
- en: 'Reflecting on past experiences, I believe the following books are very suitable
    for beginners and offer great value for money:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 反思过去的经历，我认为以下书籍非常适合初学者，并且物有所值：
- en: Perhaps everyone wants to be knowledgeable, to know everything. But the time
    and energy we can allocate are always limited; we can't and don't need to be experts
    in everything.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 或许每个人都想要博学，无所不知。但是我们能够分配的时间和精力总是有限的；我们无法也无需成为所有领域的专家。
- en: 7\. The sooner you start writing unit tests, the better.
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7\. 你开始编写单元测试的越早，越好。
- en: I really, really like unit testing. I think that writing unit tests has had
    a profound impact on my programming career. To put it in a nutshell, if I use
    “starting to write unit tests” as a milestone, the latter part of my career is
    much more exciting than the former.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的非常喜欢单元测试。我认为编写单元测试对我的编程职业产生了深远的影响。简而言之，如果我以“开始编写单元测试”作为一个里程碑，那么我的职业后半段比前半段更加精彩。
- en: There are many benefits to writing unit tests, such as driving improvements
    in code design, serving as documentation for the code, and so on. Moreover, comprehensive
    unit testing is key to creating the **“efficient trial-and-error environment”**
    mentioned earlier.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 编写单元测试有许多好处，比如推动代码设计的改进，为代码提供文档等。此外，全面的单元测试是创建前文提到的**“有效的试错环境”**的关键。
- en: 'I have written several articles about unit testing, so I won''t repeat them
    here. Just one piece of advice: **if you have never tried to write unit tests,
    or have never taken testing seriously, I suggest you start tomorrow.**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我写了几篇关于单元测试的文章，所以我在这里不再重复了。只有一个建议：**如果你从未尝试过编写单元测试，或者从未认真对待过测试，我建议你明天开始。**
- en: I don't always test my code
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我不总是测试我的代码
- en: 8\. What is the biggest enemy of programmers?
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8\. 程序员最大的敌人是什么？
- en: In most programmer jokes, product managers often appear as the villain. They
    constantly change project requirements, come up with new ideas every day, and
    leave the programmers in the lurch.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数程序员笑话中，产品经理经常被描绘成反派。他们不断更改项目需求，每天提出新想法，让程序员束手无策。
- en: The client kept changing the requirements
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 客户不断变更需求。
- en: Fueled by these jokes, the image of the ever-changing product manager seems
    to have become the nemesis of programmers. It's as though if only the product
    requirements stopped changing, the work environment would instantly transform
    into a utopia.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些笑话的推动下，变化多端的产品经理形象似乎已经成为程序员的克星。仿佛只要产品需求停止变化，工作环境就会立即变成乌托邦。
- en: 'While it''s fun to occasionally gripe about product managers, I want to set
    the record straight: product managers are not the enemy.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然偶尔抱怨产品经理很有趣，但我想澄清一点：产品经理不是敌人。
- en: From a certain perspective, software is inherently designed to be modified (why
    else would it be called "software"?). This makes developing software fundamentally
    different from building houses. After all, nobody would say after constructing
    a building, "Let's knock it down and rebuild it! The same structure but with 30%
    less steel and concrete!"
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种角度来看，软件天生就设计用于修改（否则它为什么被称为“软件”呢？）。这使得软件开发在根本上不同于建造房屋。毕竟，没有人会在建造完一座建筑物后说：“让我们把它拆掉然后重新建造！结构相同但是钢筋混凝土少30%！”
- en: Therefore, product managers and unstable requirements are not the enemies of
    programmers. Moreover, the ability to write code that is easily modified and adapts
    to change is one of the key indicators of a great programmer versus a good one.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，产品经理和不稳定的需求并不是程序员的敌人。此外，编写易于修改并适应变化的代码的能力是区分优秀程序员和普通程序员的关键指标之一。
- en: So what is the biggest enemy of programmers?
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 那么程序员的最大敌人是什么？
- en: Complexity is the biggest enemy
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 复杂性是最大的敌人
- en: As stated in "Code Complete", the essence of software development is complexity
    management. Uncontrolled complexity is a programmer's worst enemy.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 正如《代码大全》中所述，软件开发的本质是复杂性管理。无序的复杂性是程序员的最大敌人。
- en: 'Let''s look at the factors that lead to ever-increasing project complexity:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看导致项目复杂性不断增加的因素：
- en: '**Constantly adding new features:** More features means more code, and more
    code usually means more complexity.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不断添加新功能：** 更多功能意味着更多的代码，而更多的代码通常意味着更多的复杂性。'
- en: '**Demand for high availability:** To achieve high availability, additional
    technical components(like message queues) and code are introduced.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对高可用性的需求：** 为了实现高可用性，引入了额外的技术组件（如消息队列）和代码。'
- en: '**Demand for high performance:** To improve performance, caching and related
    module code are added, and some modules are split and rewritten in faster languages.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对高性能的需求：** 为了提高性能，添加了缓存和相关模块代码，并且一些模块被拆分并用更快的语言重写。'
- en: '**Repeatedly postponed refactoring:** Due to tight project schedules, urgent
    refactoring is continuously postponed, accumulating a growing technical debt.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反复推迟的重构：** 由于项目进度紧张，紧急的重构被持续推迟，积累了越来越多的技术债务。'
- en: '**Neglect of automated testing:** No one writes unit tests or cares about testing.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**忽视自动化测试：** 没有人编写单元测试或关心测试。'
- en: …
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: …
- en: Eventually, as the project's complexity reaches a certain level, a loud crash
    echoes through the air. "Boom!" A massive "pitfall" that no one wants to tackle
    or dares to touch magically appears in everyone's IDE.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，当项目的复杂性达到一定水平时，一声巨响在空气中回荡。“轰隆！”一个没有人愿意解决或敢触摸的巨大“陷阱”神奇地出现在每个人的集成开发环境中。
- en: Guess who dug this hole?
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 猜猜是谁挖了这个坑？
- en: Software projects are more likely to succeed
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 软件项目更有可能成功
- en: The process of slowing complexity growth
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 减缓复杂性增长的过程
- en: 'While complexity will inevitably continue to grow, there are many practices
    that can slow this process. If everyone could do the following, complexity could
    be kept within reasonable limits over the long term:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管复杂性将不可避免地继续增长，但有许多实践可以减缓这一过程。如果每个人都能做到以下几点，那么复杂性在长期内就可以保持在合理的限制内：
- en: Master the current programming language and tools, write clean code
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 掌握当前的编程语言和工具，编写清晰的代码
- en: Use appropriate design patterns and programming paradigms
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用适当的设计模式和编程范式
- en: Have zero tolerance for duplicate code, abstract libraries, and frameworks
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对重复代码、抽象库和框架要零容忍
- en: Apply the principles of Clean Architecture and Domain-Driven Design properly
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确应用《清晰架构》和《领域驱动设计》的原则
- en: Write good documentation and comments
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写良好的文档和注释
- en: Develop high quality and effective unit tests
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发高质量和有效的单元测试
- en: Separate what changes from what doesn't
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分离变化与不变的部分
- en: '...'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '...'
- en: 'The list seems long, but in summary, the core message is: **write better code**.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 列表看起来很长，但总的来说，核心信息是：**编写更好的代码**。
- en: In closing
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结一下
- en: In 2020, I gave a presentation to my team called "10 Insights After a Decade
    of Programming". After I shared the slides on the company intranet, a colleague
    saw them and commented that just reading the slides wasn't satisfying enough;
    she was hoping I could expand it into an article. I replied that I would. Now,
    3 years have passed, and I've finally kept my promise.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年，我向我的团队做了一个题为“十年编程之后的十大见解”的演讲。在我在公司内部网上分享了幻灯片之后，一位同事看到了并评论说仅仅阅读幻灯片并不令人满意；她希望我能将其扩展成一篇文章。我回答说我会的。现在，三年过去了，我终于兑现了承诺。
- en: 'When I was preparing the presentation, I had finished all the slides and had
    no idea what to put on the last page. Then, inspired, I went with a plain white
    background and typed in bold, big letters in the middle: **"A decade is too short
    to master programming."** Now, as I approach the midpoint of my second decade,
    I still find programming hard sometimes - I still have a lot to learn, I''ve got
    to keep going.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当我准备演讲时，我已经完成了所有的幻灯片，不知道最后一页该写什么。然后，我受启发，选择了纯白色的背景，在中间用粗体、大字写着：“**十年时间太短，无法精通编程**”。现在，当我接近第二个十年的中点时，有时我仍然觉得编程很难
    - 我仍然有很多东西要学，我必须继续前进。
- en: This post was originally written in Chinese [link](https://www.piglei.com/articles/programming-is-still-hard-after-14-years/).
    I translated it to English with the help of GPT4\. If you find any errors, please
    feel free to let me know.
  id: totrans-159
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这篇文章最初是用中文写的[链接](https://www.piglei.com/articles/programming-is-still-hard-after-14-years/)。我借助
    GPT4 的帮助将其翻译成了英文。如果您发现任何错误，请随时告诉我。
