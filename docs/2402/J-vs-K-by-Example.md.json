["```\nNB. J BY EXAMPLE\nNB.             J is product of JSoftware Inc.  http://jsoftware.com\nNB. v3 07/04/2005 (C) Oleg Kobchenko  http://olegykj.sourceforge.net\n```", "```\n/K by EXAMPLE \n/  K is product of Kx Inc.  http://kx.com\n/  2005.06.29\\. Attila Vrabecz (VrAbi) http://vrabi.web.elte.hu/k\n/based on J by EXAMPLE by\n/  06/11/2005 (C) Oleg Kobchenko     http://olegykj.sourceforge.net\n```", "```\nNB. simple arithmetic ===============================================\n\n   2 + 2         NB. comment is 'NB.'\n4\n   2 - 3         NB. negative numbers use '_'\n_1\n   2 * 3 + 4     NB. no precedence, right to left\n14\n   (2 * 3) + 4   NB. parentheses changes order\n10\n   3 % 4         NB. division represented by '%'\n0.75\n   *: 4          NB. square\n16\n   %: 4          NB. square root\n2\n   % 4           NB. 1/x\n0.25\n```", "```\n/simple arithmetic ===============================================\n\n  2+2           /comment is ' /': left of /: whitespace or nothing\n4\n  2-3           /negative numbers\n-1\n  2*3+4         /no precedence, right to left\n14\n  (2*3) + 4     /parentheses changes order\n10\n  3%4           /division represented by '%'\n0.75\n  _sqr 4        /square\n16.0\n  _sqrt 4       /square root\n2.0\n  %4            /1/x\n0.25\n```", "```\nNB. operations using lists ==========================================\n\n   2 * 1 2 3     NB. numeric list with space separators\n2 4 6\n   1 2 3 % 2 4 6 NB. list to list operations, same size\n0.5 0.5 0.5\n   #1 2 3        NB. size of vector\n3\n   3$1           NB. generate sequence of same numbers\n1 1 1\n   5$1 2         NB. or from a list of given elements\n1 2 1 2 1\n```", "```\n/operations using lists ==========================================\n\n  2*1 2 3       /numeric list with space separators\n2 4 6\n  1 2 3%2 4 6   /list to list operations, same size\n0.5 0.5 0.5\n  #1 2 3        /size of vector\n3\n  3#1           /generate sequence of same numbers\n1 1 1\n  5#1 2         /or from a list of given elements\n1 2 1 2 1\n```", "```\nNB. list elements ===================================================\n\n   {.1 2 3       NB. first element\n1\n   {:1 2 3       NB. last element\n3\n   }.1 2 3       NB. rest without first element\n2 3\n   }:1 2 3       NB. rest without last element\n1 2\n   &#124;.1 2 3       NB. reverse\n3 2 1\n```", "```\n/ list elements ===================================================\n\n  *1 2 3        /first element\n1\n  *&#124;1 2 3       /last element\n3\n  1_1 2 3       /rest without first element\n2 3\n  -1_1 2 3      /rest without last element\n1 2\n  &#124;1 2 3        /reverse\n3 2 1\n```", "```\nNB. indexing and sorting ============================================\n\n   1{1 2 3       NB. indexing is zero-based\n2\n   1 0{1 2 3     NB. index can be vector too\n2 1\n   i.3           NB. generate zero-based sequence\n0 1 2\n   2 4 6 i. 4    NB. index of given element(s)\n1\n   /:2 1 6       NB. indices of sorted order\n1 0 2\n   /:~2 1 6      NB. sort vector\n1 2 6            NB. F~y <=> y F y\n```", "```\n/ indexing and sorting ============================================\n\n  1 2 3@1       /indexing is zero-based\n2\n  1 2 3@1 0     /index can be vector too\n2 1\n  !3            /generate zero-based sequence\n0 1 2\n  2 4 6?4       /index of given element(s)\n1\n  <2 1 6        /indices of sorted order\n1 0 2\n  {x@<x}2 1 6   /sort vector\n1 2 6\n```", "```\nNB. list aggregation ================================================\n\n   1 2 3,10 20          NB. join vectors\n1 2 3 10 20\n   1 + 2 + 3            NB. sum of elements\n6\n   +/1 2 3              NB. insert '+' between elements\n6\n   +/\\1 2 3             NB. running sum of elements\n1 3 6\n   1,(1+2),(1+2+3)      NB. same as this\n1 3 6\n   2+/\\1 2 3 4 5        NB. sum or running pairs\n3 5 7 9\n   _2+/\\1 2 3 4 5       NB. non-intersecting pairs\n3 7 5\n   (<1 2),3 4 6;7 6     NB. < is boxing, ; is box and join\n+---+-----+---+\n&#124;1 2&#124;3 4 6&#124;7 6&#124;\n+---+-----+---+\n   >{. 3 4 6;7 6        NB. > is unboxing\n3 4 6\n\n```", "```\n/ list aggregation ================================================\n\n  1 2 3,10 20     /join vectors\n1 2 3 10 20\n  1 + 2 + 3       /sum of elements\n6\n  +/1 2 3         /insert '+' between elements\n6\n  +\\1 2 3         /running sum of elements\n1 3 6\n  1,(1+2),(1+2+3) /same as this\n1 3 6\n  +':1 2 3 4 5    /sum running pairs\n3 5 7 9\n  +/'{(2*!-_-.5*#x)_ x}1 2 3 4 5 /non-intersecting pairs\n3 7 5\n  (1 2;3 4 6;7 6) /list \n(1 2\n 3 4 6\n 7 6)\n  *(3 4 6;7 6)    /first item in the list\n3 4 6\n```", "```\nNB. function combinations ===========================================\n\n   (+ *:) 4             NB. hook (F G) y <=> y F (G y)\n20                      NB.    a + a^2\n   (%: , *:) 4          NB. fork (F G H) y <=> (F y) G (H y)\n2 16                    NB.    [sqrt(a), a^2]\n   *:@(+/) 2 3          NB. composition (F o G) y <=> F G y\n25                      NB.    (a + b)^2\n   2 +&*: 3             NB. x F & G y <=> (G x) F (G y)\n13                      NB.    a^2 + b^2\n   2 (+&*: + 2: * *) 3  NB. (a + b)^2 = a^2 + b^2 + 2ab\n25                      NB.    0: 1: 2: ... are const functions\n   3 +&.*: 4            NB. F&.G y <=> (G^:_1) F G y\n5                       NB.    sqrt(a^2 + b^2)\n```", "```\n/ function combinations ===========================================\n\n  {x+_sqr x}4           /a + a^2\n20.0\n  (_sqrt;_sqr)@\\:4      /[sqrt(a), a^2]\n2 16.0\n  _sqr+/2 3             /(a +b)^2\n25.0\n  +/_sqr 2 3            /a^2 + b^2\n13.0\n  {+/(_sqr x),2*/x}2 3  /(a + b)^2 = a^2 + b^2 + 2ab \n25.0\n   _sqrt+/_sqr 3 4      /sqrt(a^2 + b^2)   \n5.0\n```", "```\nNB. user defined functions and arguments ============================\n\n   m1=: -                    NB. ambivalent tacit\n   m2=: 3 : '-y.'            NB. monadic explicit\n   m3=: 4 : 'x.-y.'          NB. dyadic explcit\n\n     (m1 ,  m2    , 0&m3) 4  NB. monadic use, 0& is bonding\n_4 _4 _4\n   3 (m1 , (+ m2) ,   m3) 4  NB. dyadic use, hook for dyadization\n_1 _1 _1\n     (m1 , m3) / 3 4         NB. distribute arguments: dyadization\n_1 _1\n   3 (m1 , m4) @ , 4         NB. collect arguments: monadization\n_3 _4 _3 _4\n```", "```\n/ user defined functions and arguments ============================\n\n  d1:-          /dyadic projection\n  d2:{x-y}      /explicit dyad\n  m1:-:         /monadic projection     \n  m2:0-         /monadic projection\n  m3:{-x}       /explicit monad\n\n  (m1;m2;m3)@\\:4     / monads\n-4 -4 -4\n  (d1;d2).\\:3 4      / dyads\n-1 -1\n```", "```\nNB. exponent and logarithm ==========================================\n\n   1x1 2x1 1x2          NB. e, 2e, e squared\n2.71828 5.43656 7.38906\n   ^2                   NB. exponent, e^2\n7.38906\n   2^16                 NB. exponent base 2, 2^16\n65536\n   ^. 1x2               NB. logarithm, ln e^2\n2\n   2^.65536             NB. logarithm base 2, log2 65536\n16\n```", "```\n/ exponent and logarithm ==========================================\n\n  (e;2*e;_sqr e:_exp 1) /e, 2e, e squared\n2.718282 5.436564 7.389056\n  _exp 2                /exponent, e^2\n7.389056\n  2^16                  /exponent base 2, 2^16\n65536.0\n  _log _exp 2           /logarithm, ln e^2\n2.0\n  _log[65536]%_log[2]   /logarithm base 2, log2 65536\n16.0\n```", "```\nNB. trigonometry ====================================================\n\n   1p1 2p1 1p2              NB. pi, 2 pi, pi squared\n3.14159 6.28319 9.8696\n   load'trig'               NB. load trigonometry library\n   cos 1p1                  NB. cosine of pi\n_1\n   (*:cos 1p1) + *:sin 1p1  NB. theorem of trigonometry\n1\n   (cos +&*: sin) 1 2p1 1p2 NB. same using fork and &\n1 1 1\n\n```", "```\n/ trigonometry ====================================================\n\n  :a:(pi;2*pi;_sqr pi:_acos-1) /pi, 2 pi, pi squared\n3.141593 6.283185 9.869604\n  _cos pi                      /cosine of pi\n-1.0\n  (t:+/_sqr(_cos;_sin)@\\:)pi   /theorem of trigonometry \n1.0\n  t a                          /test theorem at angles\n1 1 1.0\n```", "```\nNB. matrices ========================================================\n\n   1 2 3 */ 1 2 3  NB. outer product: multiplication table\n1 2 3              NB. same as */~ 1 2 3\n2 4 6\n3 6 9\n   =/~i.3          NB. identity matrix, also =@i. (self-classify)\n1 0 0              NB. F~y <=> y F y\n0 1 0\n0 0 1\n   ]M=. i.2 3       NB. generate matrix\n0 1 2\n3 4 5\n   2 2$0 1 1 1     NB. reshape given vector to matrix\n0 1\n1 1\n\n```", "```\n/ matrices ========================================================\n\n  1 2 3*/:1 2 3 /outer product: multiplication table\n(1 2 3\n 2 4 6\n 3 6 9)\n  {x=/:x}@!3    /identity matrix\n(1 0 0\n 0 1 0\n 0 0 1)\n  2 3#!6        /generate matrix\n(0 1 2\n 3 4 5)\n  2 2#0 1 1 1   /reshape given vector to matrix\n(0 1\n 1 1)\n```", "```\nNB. structural transforms ===========================================\n\n   ,N=: i.2 2 3               NB. ravel: list of atoms\n0 1 2 3 4 5 6 7 8 9 10 11\n   ,\"2 N                      NB. ravel each sub-matrix\n0 1 2 3  4  5\n6 7 8 9 10 11\n\n (]; &#124;:; &#124;.;&#124;.\"1;1&&#124;.) M=. 3 3$'ABC123!@#' NB. character matrix\n+---+---+---+---+---+       NB.  ]    returns argument    \n&#124;ABC&#124;A1!&#124;!@#&#124;CBA&#124;123&#124;       NB.  &#124;:   transposes          \n&#124;123&#124;B2@&#124;123&#124;321&#124;!@#&#124;       NB.  &#124;.   reverses outer list\n&#124;!@#&#124;C3#&#124;ABC&#124;#@!&#124;ABC&#124;       NB.  &#124;.\"1 reverses inner list\n+---+---+---+---+---+       NB. 1&#124;.   rotates outer list\n\n   ;:^:_1 </.M              NB. oblique: secondary diagonals\nA B1 C2! 3@ #               NB.   same as (</.~&, +\"0/~@i.@#) M\n                            NB. ;:^:_1 is inverse of boxing tokens\n\n  i.@# } M                  NB. main diagonal\nA2#\n```", "```\n/ structural transforms ===========================================\n\n  ,//N:2 2 3#!12             /ravel: list of atoms\n0 1 2 3 4 5 6 7 8 9 10 11\n  ,/'N                       /ravel each sub-matrix\n(0 1 2 3 4 5\n6 7 8 9 10 11)\n  M:3 3#\"ABC123!@#\" /character matrix\n  (:: ;+: ;&#124;: ;&#124;:'; 1!)@\\:M     \n((\"ABC\"         / ::  returns argument\n  \"123\"\n  \"!@#\")\n (\"A1!\"         / +:  transposes    \n  \"B2@\"\n  \"C3#\")\n (\"!@#\"         / &#124;:  reverses items\n  \"123\"\n  \"ABC\")\n (\"CBA\"         / &#124;:' reverses each items\n  \"321\"\n  \"#@!\")\n (\"123\"         / 1!  rotates items\n  \"!@#\"\n  \"ABC\"))\n  M ./:/:f@=+/'f:,/n,/:\\:n:!3  /secondary diagonals  \n(,\"A\"\n \"B1\"\n \"C2!\"\n \"3@\"\n ,\"#\")\n  M ./:a,'a:!#M /main diagonal\n\"A2#\"\n```", "```\nNB. selection ======================================================\n\n   1{1{1{N                  NB. repetitive selection of items From list\n10\n   1{^:3 N                  NB. apply select 3 times\n10\n   (<1 1 1){N               NB. scatter select\n10\n   1 1 1 ({~ <)~ N          NB. using unboxed list\n10\n```", "```\n/ selection ======================================================\n\n   ((N 1) 1) 1 /repetitive selection of items From list\n10            \n   3@[;1]/N    /apply select 3 times\n10\n   N[1;1;1]    /scatter select\n10\n   N . 1 1 1   /scatter select too\n10\n```", "```\nNB. factorial and binomial ==========================================\n\n   ! 1+i.5          NB. factorial\n1 2 6 24 120\n   */\\ 1+i.5        NB. running product\n1 2 6 24 120\n   !/~ i.5          NB. binomial coefficients\n1 1 1 1 1\n0 1 2 3 4\n0 0 1 3 6\n0 0 0 1 4\n0 0 0 0 1\n   +/@(! &#124;.)\\i. 15  NB. fibonacci: sum of second diagonal of binomial matrix\n1 1 2 3 5 8 13 21 34 55 89 144 233 377 610\n```", "```\n/ factorial and binomial ==========================================\n\n  (f:{:[x<0;0;*/1.+!x]})'1+!5 /factorial\n1 2 6 24 120.0\n  *\\1+!5                      /running product\n1 2 6 24 120\n  (b:{(!x){:[x<y;0;_ f[x]%f[y]*f x-y]}\\:/:!x})5 /binomial coeff.\n(1 1 1 1 1\n 0 1 2 3 4\n 0 0 1 3 6\n 0 0 0 1 4\n 0 0 0 0 1)\n 1_{+/b[x]./:+(!x;&#124;!x)}'!16 /fibonacci: sum of second diagonal of \n                             /binomial matrix\n1 1 2 3 5 8 13 21 34 55 89 144 233 377 610\n```", "```\nNB. dot product =====================================================\n\n   1 2 3(+/ . *)1 2 3      NB. dot product\n14\n   M=: 2 2$0 1 1 1         NB. assignment\n   dot=: +/ . *            NB. expression given a name\n   dot~ M                  NB. matrix squared\n1 1\n1 2\n   dot^:(15)~ M            NB. matrix to the power of 15, also fibonacci\n610  987\n987 1597\n   {:@{.\"2 dot^:(<15)~  M  NB. F^:n is apply F n times accumulatively\n1 1 2 3 5 8 13 21 34 55 89 144 233 377 610\n\n```", "```\n/ dot product =====================================================\n\n  1 2 3_dot 1 2 3       /dot product _dot=+/* (optimized)\n14\n  :M:(0 1;1 1)          /assignment\n  :M:(0 1\n1 1)                    /equivalent to this\n  M _mul M              /matrix squared _mul=_dot\\: (optimized)\n(1 1\n 1 2)\n  15_mul[M]/M          /matrix to the power of 15, also fibonacci\n(610  987\n 987 1597)\n  (14_mul[M]\\M)[;0;1]  \n1 1 2 3 5 8 13 21 34 55 89 144 233 377 610\n```", "```\nNB. randomness and probability ======================================\n\n   ]A=: 5 ?@$ 0          NB. 5 random floats from 0..1\n0.57708 0.542732 0.488337 0.26004 0.0101683\n   ]B=: 10 ?@$ 2         NB. coin toss\n1 1 1 0 0 1 1 0 1 0\n   ]C=: 3 ? 3            NB. deal 3 out of 3 cards in certain order\n1 2 0\n   (<./ , >./) A         NB. min and max over the list\n0.0101683 0.57708\n   B i. 0                NB. first zero\n3\n   (+/ % #) C-:\"1 (?~\"0) 10000#3   NB. method monte carlo\n0.1637                   NB.    -: is list equality, F\"n is rank modifier\n   %!3                   NB. exact probability of 3 cards in given order\n0.166667\n```", "```\n/ randomness and probability ======================================\n\n  :A:5_draw 0          /5 random floats from 0..1\n0.03505812 0.7834427 0.7999031 0.9046515 0.2232866\n  :B:10_draw 2         /coin toss\n1 1 1 0 1 0 1 1 0 0\n  :C:3_draw-3          /deal 3 out of 3 cards in certain order\n1 0 2\n  (&/;&#124;/)@\\:A          /min and max over the list\n0.03505812 0.9046515\n  B?0                  /first zero\n3\n  {(+/x)%#x}C~/:10000{3_draw-3}\\_n  / method monte carlo\n0.1643836               \n  %f 3                 /exact probability of 3 cards in given order\n0.1666667\n```", "```\nNB. unique elements =================================================\n\n   ]D=.~. S=. 'mississippi'  NB. distinct (nub)\nmisp\n   ]K=. D i. S               NB. key (index)\n0 1 2 2 1 2 2 1 3 3 1\n   K </. S                   NB. group by key\n+-+----+----+--+\n&#124;m&#124;iiii&#124;ssss&#124;pp&#124;\n+-+----+----+--+\n   K #/. S                   NB. frequencies\n1 4 4 2\n\n   ]I=. ~: S                 NB. sieve of nub\n1 1 1 0 0 0 0 0 1 0 0        NB. where D is in S\n\n   I # S        NB. filter by sieve to get D\nmisp\n   +/\"1 =S      NB. = is classify, bool matrix of S vs D\n1 4 4 2         NB. where items of D are in S\n```", "```\n/ unique elements =================================================\n\n  :D:?S:\"mississippi\" /?: is unique\n\"misp\"\n  :K:D?/:S            /find (?) indexes\n0 1 2 2 1 2 2 1 3 3 1\n  S@=K                /= is group, group by key\n(,\"m\"\n \"iiii\"\n \"ssss\"\n \"pp\")\n  #:'=S               /frequencies\n1 4 4 2               \n  :I:(!#S)_lin*:'=S   /sieve of nub\n1 1 1 0 0 0 0 0 1 0 0 /where D is in S\n  S@&I                /filter by sieve to get D\n\"misp\"\n  +/D=/:S             /where items of D are in S\n1 4 4 2         \n```"]