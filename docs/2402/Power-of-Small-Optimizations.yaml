- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:45:26'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:45:26'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Power of Small Optimizations
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小优化的力量
- en: 来源：[https://maksimkita.com/blog/power-of-small-optimizations.html](https://maksimkita.com/blog/power-of-small-optimizations.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://maksimkita.com/blog/power-of-small-optimizations.html](https://maksimkita.com/blog/power-of-small-optimizations.html)
- en: Overview
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概览
- en: In this post, I will talk about the importance of small optimizations that can
    provide a lot of performance improvements.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将讨论一些能够提供大量性能改进的小优化的重要性。
- en: 'Generally, when I think about different optimizations, I place them in a hierarchy
    of different levels:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，当我考虑不同的优化时，我会将它们放在不同层次的层次结构中：
- en: Architecture level optimizations.
  id: totrans-split-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 架构级别的优化。
- en: Algorithms and data structures level optimizations.
  id: totrans-split-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 算法和数据结构级别的优化。
- en: Source code level optimizations.
  id: totrans-split-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源代码级别的优化。
- en: Typically, optimizations from higher levels of this hierarchy have more impact
    on your application than those from lower levels. It does not make a lot of sense
    to spend time on lower-level optimizations if, on the architecture level, your
    application is designed in a suboptimal way or the algorithms and data structures
    choices are wrong.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，来自层次结构较高的优化对应用程序的影响比来自较低层次的优化更大。如果在架构层面上，你的应用程序设计不够优化，或者算法和数据结构的选择是错误的，那么花费时间在低级别的优化上就没有多大意义。
- en: For lower-level optimizations, sometimes people think that those optimizations
    always require the usage of some hardcore algorithms or writing code in inline
    assembly, but a lot of them are fairly simple. In fact, from my practice, clear
    and simple code is generally fast, and optimizations do not always make code extremely
    hard to read or think about. It is also great if your application components are
    well isolated so you can change the internal implementation of some components
    without affecting other components or the rest of the application.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于低级别的优化，有时人们认为这些优化总是需要使用一些复杂的算法或者在内联汇编中编写代码，但其中许多都相当简单。事实上，根据我的实践，清晰简洁的代码通常也是快速的，并且优化并不总是会使代码变得极其难以阅读或思考。如果你的应用程序组件良好隔离，这也很好，这样你可以在不影响其他组件或应用程序其余部分的情况下更改某些组件的内部实现。
- en: When I talk about “small” optimizations, they are most likely placed on a lower
    level of optimizations hierarchy, more often source code level optimizations,
    and if we measure them in lines of code, they are relatively small. It does not
    mean that such optimizations are easy because sometimes writing a “right” couple
    lines of code can be extremely hard and take a lot of time.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我谈论“小”优化时，它们很可能位于优化层次结构的较低层次上，更多是源代码级别的优化，如果我们以代码行数来衡量，它们相对较少。这并不意味着这些优化很容易，因为有时编写“正确”的几行代码可能非常困难，耗时很长。
- en: How to find places for optimizations
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何找到优化的位置
- en: Generally, you need to have good introspection for your application and always
    profile your application, both in production and during development. You also
    need to be curious to explore every possible performance optimization opportunity.
    Even highly optimized places in your application can be optimized even further.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你需要对应用程序进行良好的自省，并始终在生产和开发过程中对其进行性能分析。你还需要保持好奇心，探索每一个可能的性能优化机会。即使在你的应用程序中高度优化的地方，也可以进一步进行优化。
- en: 'Examples of some optimizations for algorithms and data structures choice:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一些算法和数据结构选择的优化示例：
- en: Use hybrid algorithms. Some algorithms or data structures can work well when
    the amount of data is small, but when the amount of data grows, the underlying
    algorithm or data structure needs to be changed.
  id: totrans-split-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用混合算法。某些算法或数据结构在数据量较小时可能效果良好，但当数据量增大时，底层算法或数据结构需要进行更改。
- en: Use statistics for run-time optimizations. All algorithm’s performance is affected
    by data distribution. For example, if you know the cardinality of your data in
    advance, it is possible to choose a faster algorithm or data structure.
  id: totrans-split-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用统计数据进行运行时优化。所有算法的性能都受数据分布的影响。例如，如果你事先知道你的数据的基数，就可以选择更快的算法或数据结构。
- en: Use specializations. You can specialize your algorithms and data structures
    for specific data types. For example, if you know that you need to sort integers,
    it makes sense to use radix sort instead of general comparison-based sort algorithms
    like pdqsort. Another example is if you need to sort integers, but they are always
    sorted or almost sorted, radix sort will be much slower than pdqsort.
  id: totrans-split-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用特化。你可以为特定的数据类型专门设计算法和数据结构。例如，如果你知道你需要对整数进行排序，那么使用基数排序而不是通用的基于比较的排序算法如pdqsort是有意义的。另一个例子是，如果你需要对整数进行排序，但它们总是或几乎总是有序的，那么基数排序要比pdqsort慢得多。
- en: There is no silver bullet or best algorithm for any task. You need to choose
    the fastest possible algorithm for your specific task.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 没有一种万能的解决方案或最佳算法适用于所有任务。你需要为你特定的任务选择最快的可能算法。
- en: 'Examples of some source code level optimizations:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一些源代码级别优化的示例：
- en: Avoid memory copying.
  id: totrans-split-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 避免内存复制。
- en: Avoid unnecessary allocations.
  id: totrans-split-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 避免不必要的分配。
- en: Change data layout to reduce memory usage and improve cache locality.
  id: totrans-split-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 改变数据布局以减少内存使用和改善缓存局部性。
- en: Use manual SIMD instructions or manual loop unrolling.
  id: totrans-split-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用手动SIMD指令或手动循环展开。
- en: It is also important to have performance tests as part of your CI/CD pipeline
    that can help you verify your optimization results or find regressions. Performance
    tests can also be very helpful in [finding places that you can optimize](cpu-dispatch-in-clickhouse.html#cpu-dispatch-optimization-places).
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的CI/CD流水线中，拥有性能测试是非常重要的一部分，它可以帮助你验证优化结果或发现回归。性能测试也可以在[寻找可以优化的地方](cpu-dispatch-in-clickhouse.html#cpu-dispatch-optimization-places)时非常有帮助。
- en: You need to constantly think about “How the performance of your application
    can be improved” and always check all available introspection for potential places
    that can be improved. For example, you can always check all hot functions in `perf-top`
    during development to understand if anything can be improved. It is also great
    to check the [flame graphs](https://www.brendangregg.com/flamegraphs.html) and
    try to understand the big picture of how your application works and where it spends
    time.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要不断思考“如何提高你的应用程序的性能”，并始终检查所有可用的内省，寻找潜在的可以改进的地方。例如，在开发过程中，你可以始终检查`perf-top`中的所有热函数，以了解是否可以进行改进。查看[火焰图](https://www.brendangregg.com/flamegraphs.html)并尝试理解你的应用程序的整体运行情况以及它在哪里花费了时间，也是非常好的。
- en: You always need to start optimization with places that take most of the time
    during application execution. But usually, after you optimize every such place,
    it is hard to understand which places to optimize next. For example, when you
    investigate some potential place, and you already know that this place takes 3-5%
    of the whole application execution time, it is important to still improve this
    place, even if you can improve this place’s performance only by a small amount.
    If you optimize many such places, the compound result of such optimizations will
    be visible for the whole application.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 优化始终需要从应用程序执行中占用大部分时间的地方开始。但通常，在优化了每个这样的地方之后，很难理解接下来应该优化哪些地方。例如，当你调查某个潜在的地方时，如果你已经知道这个地方占整个应用程序执行时间的3-5%，那么仍然改善这个地方非常重要，即使你只能通过少量的性能提升来优化这个地方。如果你优化了许多这样的地方，这些优化的综合结果将对整个应用程序产生影响。
- en: For multithreaded applications, it is also important to understand in which
    places your application processes data in a single thread. Such single-thread
    execution stage is common for many algorithms like sorting and aggregation. You
    sort/aggregate data by multiple threads, but the final merge stage is single-threaded.
    This also applies to the distributed execution of such algorithms. Even a small
    improvement in that single-thread merge stage is a big win because those places
    do not scale with an increased amount of threads or servers.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多线程应用程序，了解你的应用程序在哪些地方以单线程处理数据也很重要。这种单线程执行阶段对于许多算法如排序和聚合都很常见。你可以通过多线程对数据进行排序/聚合，但最终的合并阶段是单线程的。这也适用于这些算法的分布式执行。即使在单线程合并阶段进行了轻微的改进，这也是一个巨大的胜利，因为这些地方不会随着线程或服务器数量的增加而扩展。
- en: Example
  id: totrans-split-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: I will provide an example of one of such optimizations, where [small source
    code level change](https://github.com/ClickHouse/ClickHouse/pull/57717) lead to
    great performance improvement.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我将提供一个这类优化的例子，其中[小的源代码级别改变](https://github.com/ClickHouse/ClickHouse/pull/57717)导致了性能显著提升。
- en: In December 2023, during the development of some ClickHouse features, when I
    ran some queries that read a lot of String columns, I noticed in the `perf-top`
    and flame graphs that we can spend around 20-40% of query execution time on strings
    deserialization. I knew that string deserialization place was already heavily
    optimized in ClickHouse, but I decided to dig deeper.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2023 年 12 月，在开发某些 ClickHouse 特性期间，当我运行一些读取大量字符串列的查询时，我注意到在 `perf-top` 和火焰图中，我们可以花费大约
    20-40% 的查询执行时间在字符串反序列化上。我知道字符串反序列化位置在 ClickHouse 中已经被大幅优化，但我决定深入挖掘。
- en: 'In `perf-top`, I saw something like this:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在`perf-top`中，我看到了这样的内容：
- en: '[PRE0]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Most of the time is spent in `DB::deserializeBinarySSE2`, and it is expected.
    What is not expected that we see `DB::PODArrayBase<1ul, 4096ul, Allocator<false,
    false>, 63ul, 64ul>::resize<>` and `DB::PODArrayDetails::byte_size` methods. If
    you check the `DB::deserializeBinarySSE2` assembly, you can notice that the PODArray
    `resize` function is called from it, and that function call is not inlined.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分时间都花在了`DB::deserializeBinarySSE2`上，这是可以预期的。令人意外的是，我们看到了 `DB::PODArrayBase<1ul,
    4096ul, Allocator<false, false>, 63ul, 64ul>::resize<>` 和 `DB::PODArrayDetails::byte_size`
    方法。如果你检查 `DB::deserializeBinarySSE2` 的汇编代码，你会注意到 `PODArray` 的 `resize` 函数从中调用，并且该函数调用没有被内联。
- en: '[PRE1]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, if we check the `DB::PODArrayBase<1ul, 4096ul, Allocator<false, false>,
    63ul, 64ul>::resize<>` assembly, we will notice it calls `DB::PODArrayDetails::byte_size`
    function and we can also see that PODArray `resize` function call overhead is
    high.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们检查 `DB::PODArrayBase<1ul, 4096ul, Allocator<false, false>, 63ul, 64ul>::resize<>`
    的汇编代码，我们会注意到它调用了 `DB::PODArrayDetails::byte_size` 函数，我们还可以看到 `PODArray` 的 `resize`
    函数调用开销很大。
- en: '[PRE2]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In C++ code `deserializeBinarySSE2` function looked like this:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C++ 代码中，`deserializeBinarySSE2` 函数看起来像这样：
- en: '[PRE3]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The solution was simple: in this specific deserialization place, we work with
    `PODArray` as just a characters buffer, and we can manually control the resize
    process and resize buffer with some constant resize factor, for example, 2\. We
    also use the `resize_exact` function to reduce memory allocation size. So inside
    the loop, we replace:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案很简单：在这个特定的反序列化位置，我们将 `PODArray` 作为一个字符缓冲区处理，并且我们可以手动控制调整过程，并使用某个常数调整因子，例如
    2。我们还使用 `resize_exact` 函数来减少内存分配大小。因此，在循环内部，我们替换为：
- en: '[PRE4]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'with:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '[PRE5]'
  id: totrans-split-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As a result, we have such performance improvement for a query that I used for
    the optimization test:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，在优化测试中使用的查询性能有了显著改善：
- en: 'Before:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 之前：
- en: '[PRE6]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 后来：
- en: '[PRE7]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Results of performance tests from ClickHouse CI:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 ClickHouse CI 的性能测试结果：
- en: '| Query | Old (s) | New (s) | Ratio of speedup(-) or slowdown(+) | Relative
    difference (new - old) / old |'
  id: totrans-split-52
  prefs: []
  type: TYPE_TB
  zh: '| 查询 | 旧 (s) | 新 (s) | 加速比(-)或减速比(+) | 相对差异 (新 - 旧) / 旧 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-split-53
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| SELECT count() FROM empty_strings WHERE NOT ignore(s) | 0.449 | 0.27 | -1.662x
    | -0.399 |'
  id: totrans-split-54
  prefs: []
  type: TYPE_TB
  zh: '| 从 empty_strings 中选择 count() WHERE NOT ignore(s) | 0.449 | 0.27 | -1.662x
    | -0.399 |'
- en: '| select anyHeavy(OpenstatSourceID) from hits_100m_single where OpenstatSourceID
    != '''' group by intHash32(UserID) % 1000000 FORMAT Null | 0.088 | 0.066 | -1.328x
    | -0.247 |'
  id: totrans-split-55
  prefs: []
  type: TYPE_TB
  zh: '| 从 hits_100m_single 中选择 anyHeavy(OpenstatSourceID) WHERE OpenstatSourceID
    != '''' GROUP BY intHash32(UserID) % 1000000 格式 Null | 0.088 | 0.066 | -1.328x
    | -0.247 |'
- en: '| select anyHeavy(OpenstatCampaignID) from hits_100m_single where OpenstatCampaignID
    != '''' group by intHash32(UserID) % 1000000 FORMAT Null | 0.088 | 0.066 | -1.32x
    | -0.243 |'
  id: totrans-split-56
  prefs: []
  type: TYPE_TB
  zh: '| 从 hits_100m_single 中选择 anyHeavy(OpenstatCampaignID) WHERE OpenstatCampaignID
    != '''' GROUP BY intHash32(UserID) % 1000000 格式 Null | 0.088 | 0.066 | -1.32x
    | -0.243 |'
- en: '| SELECT count() FROM hits_100m_single WHERE NOT ignore(format(''{}Hello{}'',
    MobilePhoneModel, PageCharset)) | 0.321 | 0.28 | -1.147x | -0.129 |'
  id: totrans-split-57
  prefs: []
  type: TYPE_TB
  zh: '| 从 hits_100m_single 中选择 count() WHERE NOT ignore(format(''{}Hello{}'', MobilePhoneModel,
    PageCharset)) | 0.321 | 0.28 | -1.147x | -0.129 |'
- en: '| SELECT count() FROM hits_100m_single WHERE NOT ignore(concat(MobilePhoneModel,
    SearchPhrase)) | 0.337 | 0.298 | -1.131x | -0.117 |'
  id: totrans-split-58
  prefs: []
  type: TYPE_TB
  zh: '| 从 hits_100m_single 中选择 count() WHERE NOT ignore(concat(MobilePhoneModel,
    SearchPhrase)) | 0.337 | 0.298 | -1.131x | -0.117 |'
- en: '| SELECT str FROM test_full_10 FORMAT Null | 0.074 | 0.058 | -1.282x | -0.22
    |'
  id: totrans-split-59
  prefs: []
  type: TYPE_TB
  zh: '| 从 test_full_10 中选择 str 格式 Null | 0.074 | 0.058 | -1.282x | -0.22 |'
- en: '| SELECT count() FROM hits_100m_single WHERE NOT ignore(substring(PageCharset,
    1, 2)) | 0.135 | 0.116 | -1.16x | -0.138 |'
  id: totrans-split-60
  prefs: []
  type: TYPE_TB
  zh: '| 从 hits_100m_single 中选择 count() WHERE NOT ignore(substring(PageCharset, 1,
    2)) | 0.135 | 0.116 | -1.16x | -0.138 |'
- en: As a result, this optimization improved performance for queries that spend a
    lot of execution time on string deserialization by 10-20% on average. For some
    queries, even for 60%.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于优化，这种优化平均提高了那些在字符串反序列化上花费大量执行时间的查询的性能，平均提高了10-20%。对于某些查询，甚至达到60%。
- en: Conclusion
  id: totrans-split-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Sometimes, you can achieve significant performance improvement not only by using
    some high-level complex optimizations but also by using better algorithms and
    data structures for your specific tasks or by small source code level optimizations.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可以通过使用一些高级复杂的优化手段，不仅仅是通过使用更好的算法和数据结构来完成你特定任务，或者是通过小的源代码层次优化，来实现显著的性能提升。
