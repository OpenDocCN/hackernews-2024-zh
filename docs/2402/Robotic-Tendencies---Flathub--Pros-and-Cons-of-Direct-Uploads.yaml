- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:41:12'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:41:12'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Robotic Tendencies » Flathub: Pros and Cons of Direct Uploads'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Robotic Tendencies » Flathub：直接上传的利与弊
- en: 来源：[https://ramcq.net/2024/02/06/flathub-pros-and-cons-of-direct-uploads/](https://ramcq.net/2024/02/06/flathub-pros-and-cons-of-direct-uploads/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ramcq.net/2024/02/06/flathub-pros-and-cons-of-direct-uploads/](https://ramcq.net/2024/02/06/flathub-pros-and-cons-of-direct-uploads/)
- en: I attended FOSDEM last weekend and had the pleasure to participate in the [Flathub
    / Flatpak BOF](https://fosdem.org/2024/schedule/event/fosdem-2024-3715-flathub-flatpak-bof/)
    on Saturday. A lot of the session was used up by an extensive discussion about
    the merits (or not) of allowing direct uploads versus building everything centrally
    on Flathub’s infrastructure, and related concerns such as automated security/dependency
    scanning.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我上周末参加了 FOSDEM 并有幸参加了周六的[Flathub / Flatpak BOF](https://fosdem.org/2024/schedule/event/fosdem-2024-3715-flathub-flatpak-bof/)。很大一部分时间用于讨论是否允许直接上传与在
    Flathub 基础设施上集中构建之间的优缺点，以及自动化安全/依赖项扫描等相关问题。
- en: My original motivation behind the idea was essentially two things. The first
    was to offer a simpler way forward for applications that use language-specific
    build tools that resolve and retrieve their own dependencies from the internet.
    Flathub doesn’t allow network access during builds, and so a lot of manual work
    and additional tooling is currently needed (see [Python](https://docs.flatpak.org/en/latest/python.html)
    and [Electron](https://docs.flatpak.org/en/latest/electron.html) Flatpak guides).
    And the second was to offer a maybe more familiar flow to developers from other
    platforms who would just build something and then run another command to upload
    it to the store, without having to learn the syntax of a new build tool. There
    were many valid concerns raised in the room, and I think on reflection that this
    is still worth doing, but might not be as valuable a way forward for Flathub as
    I had initially hoped.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我最初考虑这个想法的动机基本上有两点。第一点是为使用语言特定构建工具、通过互联网解析和检索其自身依赖项的应用程序提供一种更简单的前进方式。Flathub
    在构建过程中不允许网络访问，因此目前需要大量手动工作和额外的工具支持（参见[Python](https://docs.flatpak.org/en/latest/python.html)
    和 [Electron](https://docs.flatpak.org/en/latest/electron.html) Flatpak 指南）。第二点是为其他平台的开发人员提供一种可能更为熟悉的流程，他们只需构建应用程序，然后运行另一个命令将其上传到商店，而无需学习新的构建工具的语法。会议室里提出了许多合理的担忧，我认为仔细思考后，这仍然值得做，但可能并不像我最初希望的那样是
    Flathub 的有价值前进方式。
- en: Of course, for a proprietary application where Flathub never sees the source
    or where it’s built, whether that binary is uploaded to us or downloaded by us
    doesn’t change much. But for an FLOSS application, a direct upload driven by the
    developer causes a regression on a number of fronts. We’re not getting too hung
    up on the “malicious developer inserts evil code in the binary” case because Flathub
    already works on the model of verifying the developer and the user makes a decision
    to trust that app – we don’t review the source after all. But we do lose other
    things such as our infrastructure building on multiple architectures, and visibility
    on whether the build environment or upload credentials have been compromised unbeknownst
    to the developer.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，对于一个专有应用程序，在 Flathub 从未见过源代码或构建过的情况下，无论二进制文件是由我们上传还是由我们下载，这并没有太大变化。但对于自由开源软件应用程序，由开发者驱动的直接上传在多个方面会导致退步。我们不会过分纠结于“恶意开发者在二进制文件中插入恶意代码”的情况，因为
    Flathub 已经在验证开发者的模型上运行，用户在决定信任该应用程序时已做出决定 - 毕竟我们不审查源代码。但我们确实会失去其他一些东西，比如我们的基础设施在多种架构上构建的能力，以及构建环境或上传凭据是否未经开发者知晓而被破坏的可见性。
- en: There is now a manual review process for when apps change their metadata such
    as name, icon, license and permissions – which would apply to any direct uploads
    as well. It was suggested that if only heavily sandboxed apps (eg no direct filesystem
    access without proper use of portals) were permitted to make direct uploads, the
    impact of such concerns might be somewhat mitigated by the sandboxing.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在对于应用程序更改其元数据（如名称、图标、许可和权限）的手动审查过程，也适用于任何直接上传。有人建议，如果只允许高度沙箱化的应用程序（例如没有适当使用门户的直接文件系统访问）进行直接上传，这些担忧的影响可能会在一定程度上得到缓解。
- en: However, it was also pointed out that my go-to example of “Electron app developers
    can upload to Flathub with one command” was also a bit of a fiction. At present,
    none of them would pass that stricter sandboxing requirement. Almost all Electron
    apps run old versions of Chromium with less complete portal support, needing sandbox
    escapes to function correctly, and Electron (and Chromium’s) sandboxing still
    needs additional tooling/downstream patching to run inside a Flatpak. Buh-boh.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: I think for established projects who already ship their own binaries from their
    own centralised/trusted infrastructure, and for developers who have understandable
    sensitivities about binary integrity such such as encryption, password or financial
    tools, it’s a definite improvement that we’re able to set up direct uploads with
    such projects with less manual work. There are already quite a few applications
    – including verified ones – where the build recipe simply fetches a binary built
    elsewhere and unpacks it, and if this already done centrally by the developer,
    repeating the exercise on Flathub’s server adds little value.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: However for the individual developer experience, I think we need to zoom out
    a bit and think about how to improve this from a tools and infrastructure perspective
    as we grow Flathub, and as we seek to raise funds for different sources for these
    improvements. I took notes for everything that was mentioned as a tooling limitation
    during the BOF, along with a few ideas about how we could improve things, and
    hope to share these soon as part of an RFP/RFI (Request For Proposals/Request
    for Information) process. We don’t have funding yet but if we have some prospective
    collaborators to help refine the scope and estimate the cost/effort, we can use
    this to go and pursue funding opportunities.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
