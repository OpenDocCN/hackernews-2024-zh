- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 13:20:49'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 13:20:49'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: How To Not Die By A Thousand Cuts. Or, How To Think About Software Quality.
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何避免千刀万剐？或者说，如何思考软件质量问题。
- en: 来源：[https://www.evalapply.org/posts/how-to-not-die-by-a-thousand-cuts/index.html](https://www.evalapply.org/posts/how-to-not-die-by-a-thousand-cuts/index.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.evalapply.org/posts/how-to-not-die-by-a-thousand-cuts/index.html](https://www.evalapply.org/posts/how-to-not-die-by-a-thousand-cuts/index.html)
- en: '* * *'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: First off, what even is Quality?
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，质量究竟是什么？
- en: All things emerge, change, and die. I think *Quality* is the experience of the
    process. The idea of *Good Quality* essentially boils down to performing the process
    with grace, and leaving the place better than we found it.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一切事物都会出现、变化和消亡。我认为*质量*是过程的体验。*优质*的理念基本上归结为以优雅的方式执行过程，并且比我们发现时更好地留下它。
- en: Further, the process of emergence and change—i.e. living—is also the process
    of dying. It follows that to think clearly about the Quality of the former one
    must think clearly about the Quality of the latter. The saddest way it can unfold
    is a slow painful degradation without healing succour meaning or hope. The proverbial
    death by a thousand cuts. I hope you never witness such a passing, even from afar.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，出现和变化的过程——即生活——也是死亡的过程。由此可见，要清晰地思考前者的质量，必须清晰地思考后者的质量。它可能以一种缓慢而痛苦的衰败方式展开，没有愈合的安慰、意义或希望。俗称的千刀万剐。我希望你永远不要远观如此逝去。
- en: Ok, that got dark fast, and if we're not careful, we will produce a 300 page
    Zen dialogue on Motorcycle Maintenance. So we will distract ourselves with the
    much smaller, lighter—and I'd argue, even pleasant—task of contemplating Quality
    of software products.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这变得很黑暗，如果我们不小心，我们将产生一本关于摩托车维护的300页禅宗对话。因此，我们将用思考软件产品质量这个更小、更轻松—我认为甚至更愉悦—的任务来分散注意力。
- en: None of what follows is novel, but I feel the message *and* its surrounding
    context bears repeating, because if it is not obvious already, software fails
    us all the time. Far too often with terrible consequences.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容并不新颖，但我觉得*及*其周围的背景值得重复，因为如果不明显的话，软件会一次又一次地让我们失望。很多时候后果非常严重。
- en: What is the nature of software products?
  id: totrans-split-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件产品的本质是什么？
- en: See? This is already easier than asking "What is the nature of life?".
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 看到了吧？这已经比问“生活的本质是什么？”容易多了。
- en: Like any other machine, a software product is wrought of the labour of many
    minds and hands, and it requires maintenance and upkeep throughout its life.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 和任何其他机器一样，软件产品由许多思想和手的劳动构成，在其整个生命周期内需要维护和保养。
- en: Unlike *all* other machines, it is pure concept, and as such it is infinitely
    malleable and mutable. And mutate it does, all the time.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不同于*所有*其他机器，它是纯粹的概念，因此它是无限可塑和可变的。它确实一直在变异。
- en: Sometimes, "finished" software emerges, only needing minor fixes and patches,
    but remaining the same in purpose, interface, and behaviour. Many Unix tools fall
    in this category. Some projects like ZeroMQ make it their explicit goal. Many
    Clojure programmers value such "finished-ness". Such scattered examples exist.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，“完成”的软件会出现，只需要进行小修补和补丁，但在目的、界面和行为上保持不变。许多Unix工具属于这一类。像ZeroMQ这样的一些项目明确设定了这样的目标。很多Clojure程序员都重视这种“完成性”。这样的例子比比皆是。
- en: Most software does not have this luxury. Most software must change indefinitely
    because the world it must serve changes indefinitely. The Emacs editor is a software
    product that has evolved non-stop for *nearly half a century* since it emerged
    in 1976, and it continues to thrive. This post was written in Emacs.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数软件无法享有这种奢侈。大多数软件必须无限期地进行变更，因为它必须服务的世界也在无限期地变化。Emacs编辑器是一个自1976年问世以来不断发展的软件产品，已经*将近半个世纪*，并且它仍然兴旺发展。这篇文章是在Emacs中编写的。
- en: There is a strong reinforcing feedback loop too. Software changes the world
    fast, forcing software to change faster. The current reincarnation of Machine
    Learning and AI can be viewed as an expression of this process. We're basically
    saying it's all accelerating so much that it is getting humanly *impossible* to
    write and revise software fast enough, to out-OODA the pace of change. So we must
    instead find algorithms that sense the world and then dynamically generate or
    revise other algorithms to achieve system objectives (viz. alter the world further
    in our favour).
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个强大的反馈循环。软件快速改变世界，迫使软件更快地改变。机器学习和人工智能的当前重生可以被视为这一过程的表达。我们基本上在说，事情加速得如此之快，以至于人类*几乎*无法以足够快的速度编写和修订软件，以赶超变化的步伐。因此，我们必须找到算法来感知世界，然后动态生成或修订其他算法以实现系统目标（即改变世界以利己）。
- en: We have to wonder, how do we make sure our product continues to thrive and succeed
    under such unrelenting pressure of constant and sometimes violent change? And
    who's neck should be on the line for it?
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须要想一想，如何确保我们的产品在如此持续且有时剧烈变化的压力下继续蓬勃发展和成功？谁应该为此负责？
- en: Whom to hold responsible for Software Quality Assurance?
  id: totrans-split-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谁来对软件质量保证负责？
- en: The Usual Suspects?
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**通常嫌疑人**？'
- en: Those "Quality Assurance" boffins? Developers? UX people? DevOps?
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 那些“质量保证”专家？开发者？用户体验专家？DevOps？
- en: The Less Usual Suspects?
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**不太常见的嫌疑人**？'
- en: Consider the scenarios below. All of them directly impact customers, making
    them think "bad quality". Consider who is responsible for the underlying problem
    (or more likely, problems)?
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑下面的情景。所有这些都直接影响到顾客，让他们觉得“质量差”。考虑到谁应该为根本问题（或更可能是问题）负责？
- en: Your app framework is extremely performant and glitch-free. Your app bombs.
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的应用框架极为高效且无故障。但你的应用却失败了。
- en: A feature does exactly what it promises, but people fail to use it right.
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个功能确实做到了它所承诺的事情，但人们却没有正确使用它。
- en: Your company committed half of itself to ship a second product in record time,
    but customers never really wanted it.
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的公司将自己的一半投入到了以创纪录的速度推出第二款产品，但顾客从未真正需要它。
- en: A huge update was pushed out on a do-or-die basis. Naturally it misbehaves,
    can't be rolled back, costs 5x as much to get right as it took to ship, and the
    rework effectively adds months to your plan of world domination.
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个巨大的更新被迫推出。自然而然，它表现不佳，无法回滚，修复成本比推出成本高出5倍，重新工作有效地延长了你的世界统治计划数月。
- en: Your service fails to scale. You discover there were no benchmarks.
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的服务无法扩展。你发现没有进行基准测试。
- en: A deployment breaks production. You discover a bad configuration.
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署中断了生产。你发现了一个糟糕的配置。
- en: A feature leaks data to unintended users and breaks SLAs / regulations. Your
    CEO releases a statement blaming a DevOps engineer.
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个功能泄漏数据给意外的用户，并违反SLA/法规。你的CEO发表声明，指责一个DevOps工程师。
- en: A several-hour glitch goes un-monitored, causing serious widespread data corruption.
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几小时的故障未被监控，导致严重的广泛数据损坏。
- en: Your production noticeably degrades often. A large sea mammal is your mascot.
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的生产明显经常降级。一只大海洋哺乳动物是你的吉祥物。
- en: Your production seldom degrades, but when it does, it takes down half the known
    Internet along with it.
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的生产很少降级，但当它降级时，它会连同一半已知的互联网一起崩溃。
- en: and on and on…
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等等……
- en: In a quiet moment of honest self-reflection, you may confess to the mirror that
    the thousand cuts metaphor applies. That any of the above scenarios were likely
    the product of corner-cuts, often near-invisible to the naked eye in the moment.
    Corner-cuts that added up—nay, *compounded*—over time; slowly as band-aids, then
    as stitches and casts, and then suddenly as gangrene. And maybe the whole thing
    died of those cuts, or continued as a barely alive entity until someone had the
    heart to pull the plug (or offer a bail out).
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个诚实的自我反思的安静时刻，你可能会向镜子承认，千刀万剐的比喻确实适用。以上任何情况很可能是削减成本的产物，这些削减在当时对肉眼几乎是看不见的。这些小削减加起来——不，*复合*——随着时间慢慢积累，开始时像创可贴，然后是缝线和石膏，突然间就像是坏疽。也许整个事情因为这些削减而死亡，或者作为一个勉强存活的实体继续下去，直到有人下定决心拔管（或提供救助）。
- en: You may even confess that maybe, just *maybe*, the job of assuring the goodness
    of a product belongs to *every function involved in the product's life*.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可能承认，也许，只 *也许*，确保产品质量的工作属于*参与产品生命周期的每个功能*。
- en: Why?
  id: totrans-split-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么？
- en: Suppose we model a traditional software production workflow, i.e. Analysis ->
    Product requirements -> UX/Design -> Development -> "QA" -> Production.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们模拟传统的软件生产工作流程，即分析 -> 产品需求 -> 用户体验/设计 -> 开发 -> “QA” -> 生产。
- en: Such a strictly linear model is common in the software industry at large. This
    is what it translates to in terms of time, complexity, costs, and risks.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如此严格的线性模型在整个软件行业中很常见。这在时间、复杂性、成本和风险方面都有所体现。
- en: '[PRE0]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Visualising a linear workflow this way suggests some things:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式将线性工作流可视化暗示了一些事情：
- en: All the risk is actually front-loaded at the Analysis stage. If that is wrong,
    then everything is wrong.
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有风险实际上都集中在分析阶段。如果那错了，那么一切都错了。
- en: The workflow looks linear, but has a compounding growth debt/risk profile.
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作流看起来是线性的，但有一个复利增长债务/风险配置文件。
- en: By tasking a single group with "assuring" product quality, we maximize our odds
    of being too wrong too late, as well as of entirely failing to spot bad news.
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将一个单一团队负责“保证”产品质量，我们最大化了我们被迟误的几率，以及完全未能发现坏消息的几率。
- en: What's not obvious from the picture is that the risk is rooted in *feedback
    delays*. Weak signals die when the deliver pressure is high.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从图片上不明显的是，风险植根于*反馈延迟*。当交付压力很大时，弱信号会消失。
- en: Our death-by-cuts risk profile will look the same, if the workflow is strictly
    linear as depicted above. It doesn't matter if we do it slowly in big batches
    over months, or faster as smaller batches over days. Small linearised batches
    may even worsen the aggregate risk profile, such as when market feedback loops
    are delayed or discontinuous. The smaller the batch, the more likely it is that
    feedback about several batches ago gets to us now. Such delayed feedback tends
    to severely disrupt strictly linear flows.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们因削减而导致的风险配置文件看起来是一样的，如果工作流程严格按上述描述。无论是在几个月内以大批量缓慢进行，还是在几天内以小批量更快进行，都无关紧要。小规模的线性化批次甚至可能加剧总体风险配置文件，例如当市场反馈环路延迟或不连续时。批次越小，越有可能是我们现在才得到的几批反馈。这种延迟反馈往往会严重干扰严格线性的流程。
- en: The above picture is also incomplete. For the full story, we need to talk deeply
    about systems (a longer conversation, for another day). We can make a small start
    by doing scenarios. Consider points on a product spectrum, ways to destroy/create
    quality, and what might help us go from worse to better?
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图片也是不完整的。要全面了解，我们需要深入讨论系统（这是另一天的长谈）。我们可以通过场景做一个小小的开始。考虑产品光谱上的点，破坏/创造质量的方式，以及什么可能帮助我们从更差到更好？
- en: Is it different for different kinds of products?
  id: totrans-split-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对于不同类型的产品，情况会有所不同吗？
- en: Suppose we contrast two typical ends of the product spectrum defined by primary
    customer. Which one risks death by a thousand cuts?
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们对比由主要客户定义的产品光谱的两个典型极端。哪一个会面临千刀万剐的死亡风险？
- en: '| Key growth metric | Revenue Growth | User Growth |'
  id: totrans-split-51
  prefs: []
  type: TYPE_TB
  zh: '| 关键增长指标 | 收入增长 | 用户增长 |'
- en: '| Key sales driver | Referrals + executive credibility | Referrals + Friends-and-family
    experiences |'
  id: totrans-split-52
  prefs: []
  type: TYPE_TB
  zh: '| 主要销售驱动因素 | 推荐 + 执行可信度 | 推荐 + 朋友和家人的体验 |'
- en: '| Customer risk | High risk/reward per account | Tiny unit economics per account
    |'
  id: totrans-split-53
  prefs: []
  type: TYPE_TB
  zh: '| 客户风险 | 每个账户的高风险/回报 | 每个账户的微观经济学 |'
- en: '| Contract risk | SLAs with crippling penalties | 1 EULA / ToS that users don''t
    read |'
  id: totrans-split-54
  prefs: []
  type: TYPE_TB
  zh: '| 合同风险 | 带有严重惩罚的服务级别协议 | 用户不会读的1个EULA / ToS |'
- en: '| etc … | … | … |'
  id: totrans-split-55
  prefs: []
  type: TYPE_TB
  zh: '| 等等... | ... | ... |'
- en: Well, here's the thing. Not only does all software mutate, we *also* end up
    performing all kinds of deep surgery on the *organisation* that produces it. The
    whole thing—product and org—is *simultaneously* flexed, reconfigured, and even
    totally redesigned in-place with rapidity that is very uncommon in other industries.
    Why? Because software fundamentally is peoples' thoughts being played on repeat.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这件事。不仅所有软件会突变，我们也最终在*生产它的组织*上进行了各种深度手术。整个事物——产品和组织——*同时*被灵活地重新配置，甚至完全在原地重新设计，这在其他行业中是非常不常见的。为什么？因为软件基本上是人们的思想在不断重复播放。
- en: So however we break it down, the common theme is this. Every hotfix is a cut.
    Every complaint is a cut. Every app crash is a cut. Every service outage is a
    cut. And so on. Each cut heals slowly and destroys Quality and value(ation).
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所以无论我们如何分解它，共同的主题是这样的。每一个热修复都是一个切割。每一个投诉都是一个切割。每一个应用程序崩溃都是一个切割。每一个服务中断都是一个切割。等等。每一个切割都会缓慢愈合并破坏质量和价值评估。
- en: How to destroy Quality?
  id: totrans-split-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何破坏质量？
- en: It's useful to come up with ways to destroy quality, so that we may contrast
    those with ways to generate quality. I've seen and heard all of the following
    in work life so far (hopefully without actively perpetrating them, but memory
    is a fickle beast).
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 提出破坏质量的方法很有用，这样我们可以与生成质量的方法进行对比。到目前为止，在工作生活中我见过并听到了以下所有情况（希望没有积极地实施它们，但记忆是一个善变的东西）。
- en: Misconstrue and mislabel Software Testing as Quality Assurance. Testing is *not*
    "Quality Assurance".
  id: totrans-split-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将软件测试误解和错误标记为质量保证。测试*不是*“质量保证”。
- en: Ostensibly make all teams responsible for their "QA", which really means make
    the least experienced people do it day-to-day.
  id: totrans-split-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表面上让所有团队对他们的“QA”负责，实际上意味着让经验最少的人日常操作它。
- en: 'Create a culture where it''s normal to say things like this):'
  id: totrans-split-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个文化，让像这样说话的事情很正常）：
- en: '"Hey I''m adding this to the sprint. It''s a small thing, so let''s not slip
    our deadline."'
  id: totrans-split-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “嘿，我要把这个添加到冲刺中。这只是一个小事情，所以我们不要推迟我们的最后期限。”
- en: '"Testing is boring."'
  id: totrans-split-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"测试很无聊。"'
- en: '"We''ll fix it if customers complain."'
  id: totrans-split-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"如果顾客抱怨，我们会修复它。"'
- en: '"Who the f*#$ wrote this code?"'
  id: totrans-split-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “谁他妈写了这段代码？”
- en: '"Ah yes, those are known flaky tests. Just re-trigger the build."'
  id: totrans-split-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “啊，是的，这些是已知的不稳定测试。只需重新触发构建。”
- en: '"You don''t know your job. Ship this." (This one stung. I''ll tell you over
    beer/coffee :).'
  id: totrans-split-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"你不了解你的工作。上线吧。"（这一句让我很伤心。喝杯啤酒/咖啡时我会告诉你的：）。'
- en: Ensure designers, developers, and testers work on tasks and priorities set by
    others.
  id: totrans-split-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保设计师、开发者和测试人员按照他人设定的任务和优先级工作。
- en: Ensure someone catches the blame for mistakes.
  id: totrans-split-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保有人因错误受到责备。
- en: Set up incentives to make departments compete with each other.
  id: totrans-split-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设立激励措施，使各部门相互竞争。
- en: Hire a Vogon or a Darth Vader CEO.
  id: totrans-split-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 雇佣一位沃冈或达斯·维达CEO。
- en: Further [normalise all kinds of deviance](https://danluu.com/wat/).
  id: totrans-split-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进一步[规范所有种类的反常行为](https://danluu.com/wat/)。
- en: 'This was just a shortlist of things I recalled while writing this post. Think
    up as many ways as you can. #protip for inspiration: read CIA''s now-declassified
    [Simple Sabotage Field Manual](https://www.gutenberg.org/files/26184/page-images/26184-images.pdf).
    Pay special attention to part 11: *General Interference with Organisations and
    Production*.'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是我写这篇文章时回忆起来的一些要点清单。尽可能多地想出方法。灵感的#专家建议：阅读CIA现已解密的[简易破坏领域手册](https://www.gutenberg.org/files/26184/page-images/26184-images.pdf)。特别注意第11部分：*总体干扰组织和生产*。
- en: How to create Quality?
  id: totrans-split-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何创造质量？
- en: One clue is to *not* do quality-destroying things. Another is to do the *inverse*
    of quality-destroying things (e.g. share know-how instead of hoarding it.) A third
    is to notice whether high-quality product producing organisations have any common
    traits (they do). Most important, perhaps, is to understand that there is no formula
    for how to acquire those traits.
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一个线索是*不*做破坏质量的事情。另一个是做质量破坏事情的*反向*（例如，分享知识而不是囤积它）。第三个是注意高质量产品生产组织是否有共同的特征（他们确实有）。也许最重要的是理解，没有公式可以获得这些特征的方法。
- en: To design and build high quality software products, it is imperative to design
    and build high quality organisation-wide systems and culture. We have many tools,
    frameworks, fundamental ideas at our disposal. But no "best practices" process
    or methodology or "one weird trick" style intervention can fix broken systems
    and broken people.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要设计和构建高质量的软件产品，必须设计和构建高质量的全组织系统和文化。我们有许多工具、框架、基本理念可供选择。但是，没有“最佳实践”流程或方法论，也没有像“一个奇怪的窍门”那样的干预能修复破碎的系统和破碎的人。
- en: 'The "way" has to be co-evolved:'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: “道路”必须共同演进：
- en: by collaborative stakeholders,
  id: totrans-split-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由协作利益相关者，
- en: spread across the org,
  id: totrans-split-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传播到整个组织，
- en: appropriate to the org's unique context,
  id: totrans-split-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适合组织独特的背景，
- en: along with customers, partners, and the immediate ecosystem.
  id: totrans-split-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与顾客、合作伙伴和直接生态系统一起。
- en: This is universally a very difficult process, with challenges surprisingly similar
    to what it takes to recover fitness after a year of slacking off. It requires
    mindset, leadership, and persistent holistic intelligent *eval/apply* behaviour.
    And all of that derives from *perspective*.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个普遍非常困难的过程，挑战与一年偷懒后恢复健康非常相似。它需要心态、领导力和持久的整体智能*eval/apply*行为。所有这些都源自*视角*。
- en: '"*Perspective is worth 80 IQ points.*"'
  id: totrans-split-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"*视角价值80个智商点。*"'
- en: — Alan Kay
  id: totrans-split-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — Alan Kay
- en: So, if we are to chart a course from Worse Quality to Better Quality, then it
    must be our first duty to purposely get really uncomfortable by seeking out new-to-us,
    diverse, status-quo-challenging perspective. And …
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们要从质量更差到质量更好的路线图，我们的第一责任必须是故意通过寻找对我们来说新的、多样化的、挑战现状的视角而感到非常不舒服。并且...
- en: The first skill is to learn to suffer constructively.
  id: totrans-split-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一个技能是学会有建设性地承受痛苦。
- en: We suffer, you and I.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在受苦，你和我。
- en: It is inevitable. Yet, it is also why life flourishes. *"Why are we suffering?"*
    is a great discussion to have, because constructive suffering yields quality outcomes.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是不可避免的。然而，这也是生命蓬勃发展的原因。*"为什么我们要受苦？"*是一个很好的讨论话题，因为建设性的苦难会带来高质量的成果。
- en: OK, back to the real world…
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，回到现实世界……
- en: The path to recovering a *previous* fitness peak after a year of slacking off
    is filled with sore muscles, cursing at the alarm clock, far too many days of
    being a generally irritable snappy person, and a constant mental battle against
    mainlining deliciously easy instant gratification. It gets harder before it gets
    easier. Then we reach the top of the previous S-curve. And we must begin the cycle
    again, to climb the next one.
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在一年的松懈后，重新恢复到 *先前的* 峰值状态的路径充满了酸痛的肌肉、对闹钟的咒骂、许多日子里变得脾气暴躁、对主流化的快速满足感的不断心理斗争。这一过程越来越艰难，然后才会变得更容易。接着我们到达了先前S形曲线的顶峰。然后我们必须再次开始这个循环，去攀登下一个曲线。
- en: We are very fortunate.
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们非常幸运。
- en: Fellow sufferers have been fostering quality-generative conversation and change
    all around us. We have access to a growing body of top-notch industry research
    *and* experience reports. Without exaggerating, very many of these lessons have
    been paid for in tears, blood, lives. Let's augment our intuitions with these
    power tools. Those hard-won *80 extra IQ points* are ours for the taking.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的遭遇者一直在促进品质生成性的对话和变革。我们可以接触到日益增长的顶尖行业研究 *和* 经验报告。毫不夸张地说，这些教训中很多都是以眼泪、鲜血和生命为代价的。让我们用这些强大的工具来增强我们的直觉。那些艰难获得的
    *额外80个智商点* 就是我们的。
- en: Some selected resources.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一些精选资源。
- en: Many inputs have shaped my thinking about Quality (well, all the things, because
    everything is connected); people, events, books, lectures etc. If you're wondering
    where to go. These are not prescriptions, but a sort of sampling platter. Triggers
    for your own searches. Please send me more!
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 许多因素塑造了我对质量（其实，所有事物，因为一切都相互联系）的思考方式；人们、事件、书籍、讲座等。如果你想知道应该去哪里，这些不是处方，而是一种样品拼盘。它们是你自己搜索的触发器。请给我更多建议！
- en: 'Systems:'
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 系统：
- en: 'Software complexity:'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 软件复杂性：
- en: 'Failure:'
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 失败：
- en: 'Doing Together:'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 共同完成：
- en: 'Oneself (heavily biased, because I identify as a software programmer):'
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 自我（因为我认同自己是软件程序员，所以有重大偏见）：
- en: '"Practical philosophy", for lack of better words:'
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: “实践哲学”，用不着更好的词汇：
- en: I recently discovered Gene Kim's podcast, [The Idealcast](https://itrevolution.com/the-idealcast-podcast/).
    Gene is gathering fantastic people and resources in one place. Definitely have
    a look-see.
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近发现了吉恩·金（Gene Kim）的播客，[The Idealcast](https://itrevolution.com/the-idealcast-podcast/)。吉恩在这里集合了许多优秀的人和资源。一定要去看一看。
- en: Caveats, mea culpa, etc.
  id: totrans-split-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注意事项、我的错，等等。
- en: I am very much a work-in-progress, and this post is my current intuition.
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然在不断进步，这篇文章是我当前的直觉。
- en: The post is heavily coloured by many witting and uwitting eval/apply loops comprised
    of personal failures, ignorant mistakes, and occasional wins, over the last about
    20 years of professional life. And well, life life. It is also informed by the
    good fortune of having learned by working with people who understand the world
    far better than I do. And obviously a lot of reading, thinking, talking, frequently
    "in anger" after having hit walls and obstacles.
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章深受个人职业生涯近20年中许多明智和不明智的评估/应用循环的影响，其中包括个人失败、无知的错误和偶尔的胜利。还有生活本身。这些经历也受到了与理解世界远比我理解更深的人们共事的幸运影响。当然还有大量阅读、思考、交流，经常在遇到壁垒和障碍后“怒火中烧”。
- en: So please take what is useful, and discard the rest.
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，请取其精华，弃其糟粕。
- en: May the source be with you _\\//
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: 愿原力与你同在 _\\//
