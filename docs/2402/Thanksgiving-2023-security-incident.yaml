- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:28:47'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Thanksgiving 2023 security incident
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://blog.cloudflare.com/thanksgiving-2023-security-incident](https://blog.cloudflare.com/thanksgiving-2023-security-incident)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This post is also available in [简体中文](https://blog.cloudflare.com/zh-cn/thanksgiving-2023-security-incident-zh-cn/),
    [繁體中文](https://blog.cloudflare.com/zh-tw/thanksgiving-2023-security-incident-zh-tw/),
    [日本語](https://blog.cloudflare.com/ja-jp/thanksgiving-2023-security-incident-ja-jp/),
    [한국어](https://blog.cloudflare.com/ko-kr/thanksgiving-2023-security-incident-ko-kr/),
    [Español](https://blog.cloudflare.com/es-es/thanksgiving-2023-security-incident-es-es/),
    [Português](https://blog.cloudflare.com/pt-br/thanksgiving-2023-security-incident-pt-br/),
    [Français](https://blog.cloudflare.com/fr-fr/thanksgiving-2023-security-incident-fr-fr/),
    [Deutsch](https://blog.cloudflare.com/de-de/thanksgiving-2023-security-incident-de-de/)
    and [Polski](https://blog.cloudflare.com/pl-pl/thanksgiving-2023-security-incident-pl-pl/).
  prefs: []
  type: TYPE_NORMAL
- en: On Thanksgiving Day, November 23, 2023, Cloudflare detected a threat actor on
    our self-hosted Atlassian server. Our security team immediately began an investigation,
    cut off the threat actor’s access, and on Sunday, November 26, we brought in CrowdStrike’s
    Forensic team to perform their own independent analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Yesterday, CrowdStrike completed its investigation, and we are publishing this
    blog post to talk about the details of this security incident.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to emphasize to our customers that no Cloudflare customer data or systems
    were impacted by this event. Because of our access controls, firewall rules, and
    use of hard security keys enforced using our own Zero Trust tools, the threat
    actor’s ability to move laterally was limited. No services were implicated, and
    no changes were made to our global network systems or configuration. This is the
    promise of a Zero Trust architecture: it’s like bulkheads in a ship where a compromise
    in one system is limited from compromising the whole organization.'
  prefs: []
  type: TYPE_NORMAL
- en: From November 14 to 17, a threat actor did reconnaissance and then accessed
    our internal wiki (which uses Atlassian Confluence) and our bug database (Atlassian
    Jira). On November 20 and 21, we saw additional access indicating they may have
    come back to test access to ensure they had connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: They then returned on November 22 and established persistent access to our Atlassian
    server using ScriptRunner for Jira, gained access to our source code management
    system (which uses Atlassian Bitbucket), and tried, unsuccessfully, to access
    a console server that had access to the data center that Cloudflare had not yet
    put into production in São Paulo, Brazil.
  prefs: []
  type: TYPE_NORMAL
- en: They did this by using one access token and three service account credentials
    that had been taken, and that we failed to rotate, after the [Okta compromise
    of October 2023](https://blog.cloudflare.com/how-cloudflare-mitigated-yet-another-okta-compromise).
    All threat actor access and connections were terminated on November 24 and CrowdStrike
    has confirmed that the last evidence of threat activity was on November 24 at
    10:44.
  prefs: []
  type: TYPE_NORMAL
- en: '*(Throughout this blog post all dates and times are UTC.)*'
  prefs: []
  type: TYPE_NORMAL
- en: Even though we understand the operational impact of the incident to be extremely
    limited, we took this incident very seriously because a threat actor had used
    stolen credentials to get access to our Atlassian server and accessed some documentation
    and a limited amount of source code. Based on our collaboration with colleagues
    in the industry and government, we believe that this attack was performed by a
    nation state attacker with the goal of obtaining persistent and widespread access
    to Cloudflare’s global network.
  prefs: []
  type: TYPE_NORMAL
- en: On November 24, after the threat actor was removed from our environment, our
    security team pulled in all the people they needed across the company to investigate
    the intrusion and ensure that the threat actor had been completely denied access
    to our systems, and to ensure we understood the full extent of what they accessed
    or tried to access.
  prefs: []
  type: TYPE_NORMAL
- en: Then, from November 27, we redirected the efforts of a large part of the Cloudflare
    technical staff (inside and outside the security team) to work on a single project
    dubbed “Code Red”. The focus was strengthening, validating, and remediating any
    control in our environment to ensure we are secure against future intrusion and
    to validate that the threat actor could not gain access to our environment. Additionally,
    we continued to investigate every system, account and log to make sure the threat
    actor did not have persistent access and that we fully understood what systems
    they had touched and which they had attempted to access.
  prefs: []
  type: TYPE_NORMAL
- en: CrowdStrike performed an independent assessment of the scope and extent of the
    threat actor’s activity, including a search for any evidence that they still persisted
    in our systems. CrowdStrike’s investigation provided helpful corroboration and
    support for our investigation, but did not bring to light any activities that
    we had missed. This blog post outlines in detail everything we and CrowdStrike
    uncovered about the activity of the threat actor.
  prefs: []
  type: TYPE_NORMAL
- en: The only production systems the threat actor could access using the stolen credentials
    was our Atlassian environment. Analyzing the wiki pages they accessed, bug database
    issues, and source code repositories, it appears they were looking for information
    about the architecture, security, and management of our global network; no doubt
    with an eye on gaining a deeper foothold. Because of that, we decided a huge effort
    was needed to further harden our security protocols to prevent the threat actor
    from being able to get that foothold had we overlooked something from our log
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Our aim was to prevent the attacker from using the technical information about
    the operations of our network as a way to get back in. Even though we believed,
    and later confirmed, the attacker had limited access, we undertook a comprehensive
    effort to rotate every production credential (more than 5,000 individual credentials),
    physically segment test and staging systems, performed forensic triages on 4,893
    systems, reimaged and rebooted every machine in our global network including all
    the systems the threat actor accessed and all Atlassian products (Jira, Confluence,
    and Bitbucket).
  prefs: []
  type: TYPE_NORMAL
- en: The threat actor also attempted to access a console server in our new, and not
    yet in production, data center in São Paulo. All attempts to gain access were
    unsuccessful. To ensure these systems are 100% secure, equipment in the Brazil
    data center was returned to the manufacturers. The manufacturers’ forensic teams
    examined all of our systems to ensure that no access or persistence was gained.
    Nothing was found, but we replaced the hardware anyway.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked for software packages that hadn’t been updated, user accounts
    that might have been created, and unused active employee accounts; we went searching
    for secrets that might have been left in Jira tickets or source code, examined
    and deleted all HAR files uploaded to the wiki in case they contained tokens of
    any sort. Whenever in doubt, we assumed the worst and made changes to ensure anything
    the threat actor was able to access would no longer be in use and therefore no
    longer be valuable to them.
  prefs: []
  type: TYPE_NORMAL
- en: Every member of the team was encouraged to point out areas the threat actor
    might have touched, so we could examine log files and determine the extent of
    the threat actor’s access. By including such a large number of people across the
    company, we aimed to leave no stone unturned looking for evidence of access or
    changes that needed to be made to improve security.
  prefs: []
  type: TYPE_NORMAL
- en: The immediate “Code Red” effort ended on January 5, but work continues across
    the company around credential management, software hardening, vulnerability management,
    additional alerting, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Attack timeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The attack started in October with the compromise of Okta, but the threat actor
    only began targeting our systems using those credentials from the Okta compromise
    in mid-November.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following timeline shows the major events:'
  prefs: []
  type: TYPE_NORMAL
- en: October 18 - Okta compromise
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ve [written about this before](https://blog.cloudflare.com/how-cloudflare-mitigated-yet-another-okta-compromise)
    but, in summary, we were (for the second time) the victim of a compromise of Okta’s
    systems which resulted in a threat actor gaining access to a set of credentials.
    These credentials were meant to all be rotated.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, we failed to rotate one service token and three service accounts
    (out of thousands) of credentials that were leaked during the Okta compromise.
  prefs: []
  type: TYPE_NORMAL
- en: One was a Moveworks service token that granted remote access into our Atlassian
    system. The second credential was a service account used by the SaaS-based Smartsheet
    application that had administrative access to our Atlassian Jira instance, the
    third account was a Bitbucket service account which was used to access our source
    code management system, and the fourth was an AWS environment that had no access
    to the global network and no customer or sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: The one service token and three accounts were not rotated because mistakenly
    it was believed they were unused. This was incorrect and was how the threat actor
    first got into our systems and gained persistence to our Atlassian products. Note
    that this was in no way an error on the part of Atlassian, AWS, Moveworks or Smartsheet.
    These were merely credentials which we failed to rotate.
  prefs: []
  type: TYPE_NORMAL
- en: November 14 09:22:49 - threat actor starts probing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our logs show that the threat actor started probing and performing reconnaissance
    of our systems beginning on November 14, looking for a way to use the credentials
    and what systems were accessible. They attempted to log into our Okta instance
    and were denied access. They attempted access to the Cloudflare Dashboard and
    were denied access.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the threat actor accessed an AWS environment that is used to power
    the Cloudflare Apps marketplace. This environment was segmented with no access
    to global network or customer data. The service account to access this environment
    was revoked, and we validated the integrity of the environment.
  prefs: []
  type: TYPE_NORMAL
- en: November 15 16:28:38 - threat actor gains access to Atlassian services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The threat actor successfully accessed Atlassian Jira and Confluence on November
    15 using the Moveworks service token to authenticate through our gateway, and
    then they used the Smartsheet service account to gain access to the Atlassian
    suite. The next day they began looking for information about the configuration
    and management of our global network, and accessed various Jira tickets.
  prefs: []
  type: TYPE_NORMAL
- en: The threat actor searched the wiki for things like remote access, secret, client-secret,
    openconnect, cloudflared, and token. They accessed 36 Jira tickets (out of a total
    of 2,059,357 tickets) and 202 wiki pages (out of a total of 194,100 pages).
  prefs: []
  type: TYPE_NORMAL
- en: The threat actor accessed Jira tickets about vulnerability management, secret
    rotation, MFA bypass, network access, and even our response to the Okta incident
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The wiki searches and pages accessed suggest the threat actor was very interested
    in all aspects of access to our systems: password resets, remote access, configuration,
    our use of Salt, but they did not target customer data or customer configurations.'
  prefs: []
  type: TYPE_NORMAL
- en: November 16 14:36:37 - threat actor creates an Atlassian user account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The threat actor used the Smartsheet credential to create an Atlassian account
    that looked like a normal Cloudflare user. They added this user to a number of
    groups within Atlassian so that they’d have persistent access to the Atlassian
    environment should the Smartsheet service account be removed.
  prefs: []
  type: TYPE_NORMAL
- en: November 17 14:33:52 to November 20 09:26:53 - threat actor takes a break from
    accessing Cloudflare systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During this period, the attacker took a break from accessing our systems (apart
    from apparently briefly testing that they still had access) and returned just
    before Thanksgiving.
  prefs: []
  type: TYPE_NORMAL
- en: November 22 14:18:22 - threat actor gains persistence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since the Smartsheet service account had administrative access to Atlassian
    Jira, the threat actor was able to install the Sliver Adversary Emulation Framework,
    which is a widely used tool and framework that red teams and attackers use to
    enable “C2” (command and control), connectivity gaining persistent and stealthy
    access to a computer on which it is installed. Sliver was installed using the
    ScriptRunner for Jira plugin.
  prefs: []
  type: TYPE_NORMAL
- en: This allowed them continuous access to the Atlassian server, and they used this
    to attempt lateral movement. With this access the Threat Actor attempted to gain
    access to a non-production console server in our São Paulo, Brazil data center
    due to a non-enforced ACL. The access was denied, and they were not able to access
    any of the global network.
  prefs: []
  type: TYPE_NORMAL
- en: Over the next day, the threat actor viewed 120 code repositories (out of a total
    of 11,904 repositories). Of the 120, the threat actor used the Atlassian Bitbucket
    git archive feature on 76 repositories to download them to the Atlassian server,
    and even though we were not able to confirm whether or not they had been exfiltrated,
    we decided to treat them as having been exfiltrated.
  prefs: []
  type: TYPE_NORMAL
- en: The 76 source code repositories were almost all related to how backups work,
    how the global network is configured and managed, how identity works at Cloudflare,
    remote access, and our use of Terraform and Kubernetes. A small number of the
    repositories contained encrypted secrets which were rotated immediately even though
    they were strongly encrypted themselves.
  prefs: []
  type: TYPE_NORMAL
- en: We focused particularly on these 76 source code repositories to look for embedded
    secrets, (secrets stored in the code were rotated), vulnerabilities and ways in
    which an attacker could use them to mount a subsequent attack. This work was done
    as a priority by engineering teams across the company as part of “Code Red”.
  prefs: []
  type: TYPE_NORMAL
- en: As a SaaS company, we’ve long believed that our source code itself is not as
    precious as the source code of software companies that distribute software to
    end users. In fact, we’ve open sourced a large amount of our source code and speak
    openly through our blog about algorithms and techniques we use. So our focus was
    not on someone having access to the source code, but whether that source code
    contained embedded secrets (such as a key or token) and vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: November 23 - Discovery and threat actor access termination begins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our security team was alerted to the threat actor’s presence at 16:00 and deactivated
    the Smartsheet service account 35 minutes later. 48 minutes later the user account
    created by the threat actor was found and deactivated. Here’s the detailed timeline
    for the major actions taken to block the threat actor once the first alert was
    raised.
  prefs: []
  type: TYPE_NORMAL
- en: 15:58 - The threat actor adds the Smartsheet service account to an administrator
    group.
  prefs: []
  type: TYPE_NORMAL
- en: 16:00 - Automated alert about the change at 15:58 to our security team.
  prefs: []
  type: TYPE_NORMAL
- en: 16:12 - Cloudflare SOC starts investigating the alert.
  prefs: []
  type: TYPE_NORMAL
- en: 16:35 - Smartsheet service account deactivated by Cloudflare SOC.
  prefs: []
  type: TYPE_NORMAL
- en: 17:23 - The threat actor-created Atlassian user account is found and deactivated.
  prefs: []
  type: TYPE_NORMAL
- en: 17:43 - Internal Cloudflare incident declared.
  prefs: []
  type: TYPE_NORMAL
- en: 21:31 - Firewall rules put in place to block the threat actor’s known IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: November 24 - Sliver removed; all threat actor access terminated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 10:44 - Last known threat actor activity.
  prefs: []
  type: TYPE_NORMAL
- en: 11:59 - Sliver removed.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this timeline, the threat actor tried to access a myriad of other
    systems at Cloudflare but failed because of our access controls, firewall rules,
    and use of hard security keys enforced using our own Zero Trust tools.
  prefs: []
  type: TYPE_NORMAL
- en: To be clear, we saw no evidence whatsoever that the threat actor got access
    to our global network, data centers, SSL keys, customer databases or configuration
    information, Cloudflare Workers deployed by us or customers, AI models, network
    infrastructure, or any of our datastores like Workers KV, R2 or Quicksilver. Their
    access was limited to the Atlassian suite and the server on which our Atlassian
    runs.
  prefs: []
  type: TYPE_NORMAL
- en: A large part of our “Code Red” effort was understanding what the threat actor
    got access to and what they tried to access. By looking at logging across systems
    we were able to track attempted access to our internal metrics, network configuration,
    build system, alerting systems, and release management system. Based on our review,
    none of their attempts to access these systems were successful. Independently,
    CrowdStrike performed an assessment of the scope and extent of the threat actor’s
    activity, which did not bring to light activities that we had missed and concluded
    that the last evidence of threat activity was on November 24 at 10:44.
  prefs: []
  type: TYPE_NORMAL
- en: We are confident that between our investigation and CrowdStrike’s, we fully
    understand the threat actor’s actions and that they were limited to the systems
    on which we saw their activity.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This was a security incident involving a sophisticated actor, likely a nation-state,
    who operated in a thoughtful and methodical manner. The efforts we have taken
    ensure that the ongoing impact of the incident was limited and that we are well-prepared
    to fend off any sophisticated attacks in the future. This required the efforts
    of a significant number of Cloudflare’s engineering staff, and, for over a month,
    this was the highest priority at Cloudflare. The entire Cloudflare team worked
    to ensure that our systems were secure, the threat actor’s access was understood,
    to remediate immediate priorities (such as mass credential rotation), and to build
    a plan of long-running work to improve our overall security based on areas for
    improvement discovered during this process.
  prefs: []
  type: TYPE_NORMAL
- en: We are incredibly grateful to everyone at Cloudflare who responded quickly over
    the Thanksgiving holiday to conduct an initial analysis and lock out the threat
    actor, and all those who contributed to this effort. It would be impossible to
    name everyone involved, but their long hours and dedicated work made it possible
    to undertake an essential review and change of Cloudflare’s security while keeping
    our global network running and our customers’ service running.
  prefs: []
  type: TYPE_NORMAL
- en: We are grateful to CrowdStrike for having been available immediately to conduct
    an independent assessment. Now that their final report is complete, we are confident
    in our internal analysis and remediation of the intrusion and are making this
    blog post available.
  prefs: []
  type: TYPE_NORMAL
- en: '**IOCs**'
  prefs: []
  type: TYPE_NORMAL
- en: Below are the Indications of Compromise (IOCs) that we saw from this threat
    actor. We are publishing them so that other organizations, and especially those
    that may have been impacted by the Okta breach, can search their logs to confirm
    the same threat actor did not access their systems.
  prefs: []
  type: TYPE_NORMAL
- en: '| Indicator | Indicator Type | SHA256 | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 193.142.58[.]126 | IPv4 | N/A | Primary threat actor Infrastructure, owned
    by'
  prefs: []
  type: TYPE_NORMAL
- en: M247 Europe SRL (Bucharest,
  prefs: []
  type: TYPE_NORMAL
- en: Romania) |
  prefs: []
  type: TYPE_NORMAL
- en: '| 198.244.174[.]214 | IPv4 | N/A | Sliver C2 server, owned by OVH SAS (London,
    England) |'
  prefs: []
  type: TYPE_TB
- en: '| idowall[.]com | Domain | N/A | Infrastructure serving Sliver payload |'
  prefs: []
  type: TYPE_TB
- en: '| jvm-agent | Filename | bdd1a085d651082ad567b03e5186d1d4 6d822bb7794157ab8cce95d850a3caaf
    | Sliver payload |'
  prefs: []
  type: TYPE_TB
