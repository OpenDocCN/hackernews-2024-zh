["```\nlet  i  =  7\n\ndef  mod(a:  int,  base:  int)  ->  int  {\n  return  ((a  %  base)  +  base)  %  base\n}\n\n// Uniform call syntax\nassert  i.mod(3)  ==  1\n\nimport  strings\ntype  Person  =  struct  {\n  name:  Str\n  age:  uint\n}\n\n// Define to_string to be able to print Person\nexport  def  to_string(person:  &Person)  ->  String  {\n  return  person.name  +  \": \"  +  person.age\n}\n\nlet  person  =  [  name  =  \"Bob\",  age  =  42  ]  !Person\nprint(person,  \"\\n\")\n\n// Compile time parameter type T\ndef  my_size_of(type  T)  ->  size_t  {\n  // Full reflection support\n  return  T.size\n}\n\nassert  my_size_of(Person)  ==  32 \n```"]