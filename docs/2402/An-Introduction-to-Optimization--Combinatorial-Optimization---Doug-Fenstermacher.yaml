- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:04:55'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年05月27日 15:04:55
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'An Introduction to Optimization: Combinatorial Optimization | Doug Fenstermacher'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化简介：组合优化 | Doug Fenstermacher
- en: 来源：[https://dougfenstermacher.com/blog/combinatorial-optimization](https://dougfenstermacher.com/blog/combinatorial-optimization)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://dougfenstermacher.com/blog/combinatorial-optimization](https://dougfenstermacher.com/blog/combinatorial-optimization)
- en: '[Home](/) *[Blog](/blog/)*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[主页](/) *[博客](/blog/)*'
- en: '*## Overview[🔗](#overview)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*## 概览[🔗](#overview)'
- en: During my time working in fundraising, I worked on the web development side,
    building and maintaining websites and tools for public and internal use. Many
    of the problems that kept coming up in my department were optimization problems,
    many of which were directly related to business operations. Producing print collateral
    at optimal pricing, optimizing table layouts for events, scheduling/assigning
    work, minimizing travel costs, etc. Here I learned that while rule-based programming
    was useful automating known processes, optimization problems tend to make the
    biggest difference and time commitment for the majority of business decisions.
    These decisions ranged from simple (minimizing paper costs for print invitations),
    to complex (prioritizing content based on audience demographics/giving potential).
    Since moving on to other opportunities, I still dwell on the value of solving
    optimization problems in business scenarios.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的筹款工作期间，我从事网站开发方面的工作，建立和维护供公众和内部使用的网站和工具。我的部门经常遇到的问题之一是优化问题，其中许多直接与业务运营相关。例如，以最佳价格生产印刷品、优化活动的桌面布局、安排/分配工作、最小化旅行成本等等。在这里，我了解到，虽然基于规则的编程对于自动化已知流程很有用，但优化问题往往在大多数业务决策中起到最大的差异和时间投入。这些决策范围从简单的（最小化印刷请柬的纸张成本）到复杂的（根据受众人群/捐赠潜力优先考虑内容）。自我转变为其他机会以来，我仍在思考在业务场景中解决优化问题的价值。
- en: Machine learning is a very prominent field right now. It is enabling companies
    to use data to resolve issues and gains insights that were unfeasible to find
    or even tackle using other methods. But not all problems can be resolved using
    machine learning, and historical data does not provide insights for all problems.
    For example, there is no amount of seating data for past weddings that will enable
    a machine learning model to learn to create a wedding seating chart for minimizing
    conflicts (that is, unless there are previous weddings where the exact same group
    attends, which would unusual). Or for finding the optimal travel route s for FedEx
    delivery trucks. These are the problems that are slower to find answers to, but
    crucial for business (or wedding) operations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习目前是一个非常突出的领域。它使公司能够利用数据解决问题并获得以往使用其他方法无法找到或甚至解决的洞见。但并非所有问题都可以使用机器学习解决，历史数据也不会为所有问题提供洞见。例如，过去婚礼的座位数据量并不能让机器学习模型学会创建最小冲突的婚礼座位表（除非之前有完全相同的人群参加的婚礼，这种情况相对罕见）。或者找到
    FedEx 送货卡车的最佳行驶路线。这些问题寻找答案的速度较慢，但对于业务（或婚礼）运营至关重要。
- en: 'Solving optimization problems efficiently in a computer program is ultimately
    using mathematical optimization techniques to solve a given problem. Wikipedia
    defines **Mathematical Optimization** as:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机程序中高效解决优化问题，最终是利用数学优化技术来解决给定问题。维基百科对**数学优化**的定义如下：
- en: the selection of a best element (with regard to some criterion) from some set
    of available alternatives.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从某个可用选择集中（与某些标准相关）选择最佳元素。
- en: which is a good simple explanation of optimization. There is no correct solution,
    only varying degrees of better and worse solutions. For example if a store wants
    to set the price for a product to maximize theirs profits, they should not sell
    a product for less than they purchased it for, and should not sell the product
    for more than customers will buy it for. If the store sells the product at a minimal
    value, their profit will be lower, but if they sell it at a price greater than
    what customers will pay, then they will get fewer sales. There is no right or
    wrong answer, just answers that lead to more/less profit. Those prices that lead
    to less profit can be considered sub-optimal solutions to the profit maximization
    problem. There are many possible prices that can be set for a given problem, optimization
    algorithms are used to reduce the computations needed to arrive at an optimal
    solution.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对优化的一个很好的简单解释。没有正确的解决方案，只有更好和更差的解决方案。例如，如果一家商店想要设置产品的价格以最大化利润，它不应该以低于购买价格的价格出售产品，并且不应该以高于顾客愿意购买价格的价格出售产品。如果商店以最小价值销售产品，那么他们的利润会较低，但如果他们以高于顾客购买价格的价格出售产品，那么他们的销量会较低。没有对或错的答案，只有导致更多/更少利润的答案。导致利润较少的价格可以被视为最大化利润问题的次优解。对于给定问题可以设置许多可能的价格，优化算法用于减少到达最佳解决方案所需的计算量。
- en: Combinatorial optimization is a subset of mathematical optimization for identifying
    how to optimize their finite set of resources to optimize production or profits.
    While less commonly used than linear programming, combinatorial optimization is
    an essential skill for finding optimal solutions for business problems.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 组合优化是数学优化的子集，用于确定如何优化其有限资源以优化生产或利润。尽管比线性规划更少使用，但组合优化是寻找业务问题最佳解决方案的基本技能。
- en: Subset Sums[🔗](#subset-sums)
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子集求和[🔗](#subset-sums)
- en: 'Combinatorial optimization problems are a very common type of problem, writing
    programs that determine a solution quickly can be difficult, and in some cases,
    impossible. For many combinatorial optimization problems, there are currently
    no efficient methods to solve them at scale. But, there are many optimization
    problems that do have efficient solutions, which we will cover. To start off,
    we will go through the most common situations for optimizations. To get started,
    we will work through the [subset-sum problem](https://en.wikipedia.org/wiki/Subset_sum_problem):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: given a set (or multiset) of integers, is there a non-empty subset whose sum
    is zero?
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this problem, we are attempting to efficiently determine the set of items
    with the largest sum without exceeding a given number. This is useful for determining
    how to efficiently load a shipping truck, without exceeding its maximum weight:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '1'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '2'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '3'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '4'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '5'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '6'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '7'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '8'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '9'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '10'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '11'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '12'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '13'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '14'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '15'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '16'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '17'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '18'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '19'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '20'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '21'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '22'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '23'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '24'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'def subset_sum(input_data, limit, labels=None):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'if not labels:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: labels = input_data
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'elif labels and len(input_data) != len(labels):'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: raise ValueError('input_data(%r) and labels(%r) must be of equal length' % (input_data,  labels))
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if not limit or limit < 0:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: raise ValueError('limit(%s) must be a positive number' % limit)
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: cache = [None for _ in range(limit+1)]
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cache[0] = []
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cache_labels = [None for _ in range(limit+1)]
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cache_labels[0] = []
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for label, new_value in zip(labels, input_data):'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for i in range(limit - new_value, -1, -1):'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if cache[i] is not None:'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: cache[i + new_value] = cache[i] + [new_value]
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: cache_labels[i + new_value] = cache_labels[i] + [label]
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'return max(zip(cache_labels, cache), key=lambda v: sum(v[1]))'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: data = [13, -3, -25, 20, -3, -16, 0, 18, 20, -7, 12, -5, 12, -5, -22, 15, -4,
    7]
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'correct answer: max subset: [20, -3, -16, 0, 18, 20, -7, 12, -5, 12], sum:
    51 print ''Maximum Subarray: %r, Max: %r'' % max_subarray(data)'
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The subset-sum problem can be used to identify how to fill a container with
    the most items without exceeding a given capacity. This could be how to effectively
    fill a filing cabinet, how to fill a shipping container with the most weight,
    or how to fill a hard drive with the most files, while leaving minimal unused
    space
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Knapsacks[🔗](#knapsacks)
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The subset-sum problem, is actually a special case of the [knapsack problem](https://en.wikipedia.org/wiki/Knapsack_problem),:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Given a set of items, each with a weight and a value, determine the number of
    each item to include in a collection so that the total weight is less than or
    equal to a given limit and the total value is as large as possible.
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So this is similar to the subset-sum problem, except we are trying to maximize
    our `value` as well. This problem involves maximizing the value of the chosen
    items, while not exceeding the value of our “knapsack”.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '1'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '2'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '3'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '4'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '5'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '6'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '7'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '8'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '9'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '10'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '11'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '12'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '13'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '14'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '15'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '16'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '17'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '18'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '19'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '20'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'def knapsack(weights, values, capacity):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: item_count = len(weights)
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cache = [[0 for _ in range(capacity + 1)] for _ in range(item_count + 1)]
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for i in range(item_count + 1):'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for j in range(capacity + 1):'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: old_value = cache[i-1][j]
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if i == 0 or j == 0:'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: cache[i][j] = 0
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'elif weights[i-1] <= j:'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: new_value = values[i-1] + cache[i-1][j-weights[i-1]]
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: cache[i][j] = max(old_value, new_value)
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: cache[i][j] = old_value
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return cache[-1][-1]
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: values = [60, 100, 120]
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: weights = [10, 20, 30]
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: capacity = 50
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'max_value = knapsack(weights, values, capacity)  # 220'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To get the index of items that were included in the knapsack, we can update
    the knapsack function to use the following code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '1'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '2'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '3'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '4'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '5'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '6'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '7'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '8'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '9'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '10'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '11'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '12'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '13'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '14'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '15'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '16'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '17'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '18'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '19'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '20'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '21'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '22'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '23'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '24'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '25'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '26'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '27'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '28'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '29'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '30'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '31'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '32'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '33'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '34'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '35'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'def knapsack_items(weights, values, capacity):'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: item_count = len(weights)
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cache = [[0 for _ in range(capacity + 1)] for _ in range(item_count + 1)]
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: find max value
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: 'for i in range(item_count + 1):'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for j in range(capacity + 1):'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: old_value = cache[i-1][j]
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if i == 0 or j == 0:'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: cache[i][j] = 0
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'elif weights[i-1] <= j:'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: new_value = values[i-1] + cache[i-1][j-weights[i-1]]
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: cache[i][j] = max(old_value, new_value)
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: cache[i][j] = max(old_value, new_value)
- en: 'else:'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 否则：
- en: cache[i][j] = old_value
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: cache[i][j] = old_value
- en: fetch list of items in knapsack
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取背包中的项目列表
- en: max_value = cache[item_count][capacity]
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: max_value = cache[item_count][capacity]
- en: indices = set()
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: indices = set（）
- en: 'for i in range(item_count, 0, -1):'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for i in range(item_count, 0, -1):'
- en: 'if max_value <= 0:'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果max_value <= 0：
- en: break
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 中断
- en: 'if max_value == cache[i - 1][j]:'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果max_value == cache[i - 1][j]：
- en: continue
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续
- en: 'else:'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 否则：
- en: indices.add(i - 1)
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: indices.add(i - 1)
- en: max_value = max_value - values[i - 1]
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: max_value = max_value - values[i - 1]
- en: j = j - weights[i - 1]
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: j = j - weights[i - 1]
- en: return cache[item_count][capacity], indices
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回缓存[item_count] [容量]，指标
- en: values = [60, 100, 120]
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: values = [60，100，120]
- en: weights = [10, 20, 30]
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: weights = [10, 20, 30]
- en: capacity = 50
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 容量 = 50
- en: max_value, item_indices = knapsack(weights, values, capacity)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: max_value, item_indices = knapsack(weights, values, capacity)
- en: 'print(max_value, item_indices) # 220, {1, 2}'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: print（max_value，item_indices）＃220，{1，2}
- en: '[PRE8]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**NOTE**: in cases where an two items have the same weight and value, they
    can be considered as iterchangeable items, as doing so would not affect the weight
    or value of the optimal knapsack.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：在两个物品具有相同的重量和价值的情况下，它们可以被视为可互换的物品，因为这样做不会影响最佳背包的重量或价值。'
- en: If you examine this code closely, you may notice that the code is very inefficient,
    by checking every capacity between 0 and the specified `capacity`. In cases like
    above, where the weights are all multiples of 10, we can know that most capacities
    will not require changes. We can transform our `weights` and `capacity` values
    to minimize the number of iterations over the capacity by calculating the greatest
    common divisor (GCD) of the `weights` and `capacity` values and dividing the values
    by the GCD. Here is an example below, which results in the same solution as the
    original problem as above
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细检查此代码，您可能会注意到代码非常低效，因为它检查了0到指定的`capacity`之间的每个容量。 在像上面那样的情况下，其中重量都是10的倍数，我们可以知道大多数容量都不需要更改。
    我们可以通过计算`weights`和`capacity`值的最大公约数（GCD）并将值除以GCD来转换我们的`weights`和`capacity`值，以最小化对容量的迭代次数。
    下面是一个示例，它产生与上面原始问题相同的解决方案
- en: '[PRE9]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '1'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '2'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '3'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '4'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '5'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '[PRE10]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: knapsack_gcd = gcd(capacity, *weights)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: knapsack_gcd = gcd（capacity，* weights）
- en: minified_weights = [int(value / knapsack_gcd) for value in weights]
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: minified_weights = [int（value / knapsack_gcd）for value in weights]
- en: minified_capacity = int(capacity / knapsack_gcd)
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: minified_capacity = int（容量/ knapsack_gcd）
- en: max_value, item_indices = knapsack_items(minified_weights, values, minified_capacity)
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: max_value，item_indices = knapsack_items（minified_weights，values，minified_capacity）
- en: print(max_value, item_indices)
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: print（max_value，item_indices）
- en: '[PRE11]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Another variation of the knapsack problem is the [Continuous knapsack problem](https://en.wikipedia.org/wiki/Continuous_knapsack_problem),
    which allows fractions of items to be put in the knapsack.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个背包问题的变种是[连续背包问题]（https://en.wikipedia.org/wiki/Continuous_knapsack_problem），它允许将物品的分数放入背包中。
- en: '[PRE12]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '1'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '2'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '3'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '4'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '5'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '6'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: '7'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: '8'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '8'
- en: '9'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '9'
- en: '10'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '10'
- en: '11'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '11'
- en: '12'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '12'
- en: '13'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '13'
- en: '14'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '14'
- en: '15'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '15'
- en: '16'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '16'
- en: '17'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '17'
- en: '18'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '18'
- en: '19'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '19'
- en: '20'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '20'
- en: '21'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '21'
- en: '22'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '22'
- en: '23'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '23'
- en: '24'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '24'
- en: '25'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '25'
- en: '26'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '26'
- en: '27'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '27'
- en: '28'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '28'
- en: '29'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '29'
- en: '30'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '30'
- en: '31'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '31'
- en: '32'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '32'
- en: '33'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '33'
- en: '34'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '34'
- en: '35'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '35'
- en: '36'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '36'
- en: '37'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '37'
- en: '38'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '38'
- en: '39'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '39'
- en: '40'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '40'
- en: '41'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '41'
- en: '42'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '42'
- en: '43'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '43'
- en: '44'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '44'
- en: '45'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '45'
- en: '46'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '46'
- en: '47'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '47'
- en: '48'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '48'
- en: '49'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '49'
- en: '[PRE13]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'def continuous_knapsack(capacity, values, weights):'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 定义连续背包问题（capacity，values，weights）：
- en: '"""'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"""'
- en: fill a container (the "knapsack") with fractional amounts of different
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 填充容器（“背包”）以不同的分数放置分数
- en: materials chosen to maximize the value of the selected materials.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择的材料以最大化所选材料的价值。
- en: 'Parameters:'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数：
- en: 'capacity (int&#124;float): Total weight capacity of the knapsack'
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: capacity（int | float）：背包的总重量容量
- en: 'values (list&#124;tuple): Values of weights that can be placed in the knapsack'
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: values（list | tuple）：可以放置在背包中的重量的值
- en: 'weights (list&#124;tuple): Weights of items that can be placed in the knapsack'
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: weights（list | tuple）：可以放置在背包中的物品的重量
- en: 'Returns:'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回：
- en: 'total_value (float):  Total value that can be stored in the knapsack'
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: total_value（float）：可以存储在背包中的总价值
- en: 'selected_indices (list):  List of indices of items stored in the knapsack'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: selected_indices（list）：存储在背包中的物品的索引列表
- en: 'selected_fractions (list):  List of fractions of items stored in the knapsack'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: selected_fractions（list）：存储在背包中的物品的分数列表
- en: '"""'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"""'
- en: costs = []
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: costs = []
- en: values = [float(value) for value in values]
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: values = [float（value）for value in values]
- en: weights = [float(weight) for weight in weights]
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: weights = [float（weight）for weight in weights]
- en: indices = range(len(weights))
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: indices = range(len(weights))
- en: 'for i in range(len(weights)):'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: for i in range（len（weights））：
- en: costs.append(values[i] / weights[i])
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: costs.append（values [i] / weights [i]）
- en: selected_indices = []
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: selected_indices = []
- en: selected_fractions = []
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: selected_fractions = []
- en: sorting items by value
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按价值对项目进行排序
- en: 'items = sorted(zip(indices, values, weights, costs), key=lambda item: item[3],
    reverse=True)'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: items = sorted（zip（indices，values，weights，costs），key = lambda item：item [3]，reverse
    = True）
- en: total_value = 0
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: total_value = 0
- en: 'for index, value, weight, cost in items:'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: for index，value，weight，cost in items：
- en: selected_indices.append(index)
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: selected_indices.append（index）
- en: 'if capacity - weight >= 0:'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果容量-重量> = 0：
- en: capacity -= weight
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: capacity - = weight
- en: total_value += value
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: total_value + = value
- en: selected_fractions.append(1.0)
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: selected_fractions.append（1.0）
- en: 'else:'
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 否则：
- en: fraction = capacity / weight
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 分数=容量/重量
- en: total_value += value * fraction
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: total_value + = value * fraction
- en: capacity = capacity - (weight * fraction)
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: capacity = capacity - (weight * fraction)
- en: 'if fraction > 0:'
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果分数大于0：
- en: selected_fractions.append(fraction)
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: selected_fractions.append（分数）
- en: break
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 中断
- en: return total_value, selected_indices, selected_fractions
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回total_value，selected_indices，selected_fractions
- en: weights = [10, 40, 20, 30]
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: weights = [10, 40, 20, 30]
- en: values = [60, 40, 100, 120]
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: values = [60，40，100，120]
- en: capacity = 50
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 容量 = 50
- en: 'max_value, selected_indices, selected_fractions = continuous_knapsack(capacity,
    values, weights)  # (240.0, [0, 2, 3], [1.0, 1.0, 0.6666666666666666])'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: max_value，selected_indices，selected_fractions = continuous_knapsack（capacity，values，weights
- en: '[PRE14]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Activity Selection[🔗](#activity-selection)
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动选择[🔗]（#activity-selection）
- en: 'Our next problem we will tackle is the [activity selection problem](https://en.wikipedia.org/wiki/Activity_selection_problem):'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要解决的问题是[活动选择问题]（https://en.wikipedia.org/wiki/Activity_selection_problem）：
- en: The problem is to select the maximum number of activities that can be performed
    by a single person or machine, assuming that a person can only work on a single
    activity at a time.
  id: totrans-293
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 问题是选择可以由单个人或机器执行的最大数量的活动，假设一个人一次只能做一项活动。
- en: 'This problem can be generalized to this: maximize the number of intervals that
    can be sequenced without overlapping.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题可以推广到这个问题：最大化能够连续排列而不重叠的区间数量。
- en: '[PRE15]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '1'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '2'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '3'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '4'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '5'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '6'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: '7'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: '8'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '8'
- en: '9'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '9'
- en: '10'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '10'
- en: '11'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '11'
- en: '12'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '12'
- en: '13'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '13'
- en: '14'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '14'
- en: '15'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '15'
- en: '16'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '16'
- en: '[PRE16]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: import heapq
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: import heapq
- en: 'def activity_selection(names, start_times, finish_times):'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 'def activity_selection(names, start_times, finish_times):'
- en: assert len(names) == len(start_times) == len(finish_times)
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: assert len(names) == len(start_times) == len(finish_times)
- en: heap = zip(finish_times, start_times, names)
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: heap = zip(finish_times, start_times, names)
- en: heapq.heapify(heap)
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: heapq.heapify(heap)
- en: previous_selection = heapq.heappop(heap)
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: previous_selection = heapq.heappop(heap)
- en: selections = [previous_selection]
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: selections = [previous_selection]
- en: 'while heap:'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'while heap:'
- en: selection = heapq.heappop(heap)
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: selection = heapq.heappop(heap)
- en: 'if selection[1] >= previous_selection[0]:'
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if selection[1] >= previous_selection[0]:'
- en: selections.append(selection)
  id: totrans-323
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: selections.append(selection)
- en: previous_selection = selection
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: previous_selection = selection
- en: return selections
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return selections
- en: '[PRE17]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: But what about the case where we some intervals are more important than others?
    We want to make sure that we maximize the weights of our set of chosen events.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果有些区间比其他区间更重要怎么办？我们希望确保我们选择的事件集合的权重最大化。
- en: '[PRE18]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '1'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '2'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '3'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '4'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '5'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '6'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: '7'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: '8'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '8'
- en: '9'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '9'
- en: '10'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '10'
- en: '11'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '11'
- en: '12'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '12'
- en: '13'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '13'
- en: '14'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '14'
- en: '15'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '15'
- en: '16'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '16'
- en: '17'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '17'
- en: '18'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '18'
- en: '19'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '19'
- en: '20'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '20'
- en: '21'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '21'
- en: '22'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '22'
- en: '23'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '23'
- en: '24'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '24'
- en: '25'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '25'
- en: '26'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '26'
- en: '27'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '27'
- en: '28'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '28'
- en: '29'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '29'
- en: '30'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '30'
- en: '31'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '31'
- en: '32'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '32'
- en: '33'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '33'
- en: '34'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '34'
- en: '[PRE19]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: import heapq
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: import heapq
- en: 'def activity_selection_weighted(names, start_times, finish_times, weights):'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 'def activity_selection_weighted(names, start_times, finish_times, weights):'
- en: assert len(names) == len(start_times) == len(finish_times) == len(weights)
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: assert len(names) == len(start_times) == len(finish_times) == len(weights)
- en: heap = zip(finish_times, start_times, names, weights)
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: heap = zip(finish_times, start_times, names, weights)
- en: heapq.heapify(heap)
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: heapq.heapify(heap)
- en: item_count = len(heap)
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: item_count = len(heap)
- en: weight_cache = [0] * item_count
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: weight_cache = [0] * item_count
- en: selections = []
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: selections = []
- en: previous_selection = heapq.heappop(heap)
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: previous_selection = heapq.heappop(heap)
- en: selections = [previous_selection]
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: selections = [previous_selection]
- en: maxi = -float('inf')
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: maxi = -float('inf')
- en: 'for i, item in enumerate(heapq.nsmallest(item_count, heap)):'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for i, item in enumerate(heapq.nsmallest(item_count, heap)):'
- en: 'for j, other_item in enumerate(heapq.nsmallest(i, heap)):'
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for j, other_item in enumerate(heapq.nsmallest(i, heap)):'
- en: 'if other_item[0] <= item[1]:'
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if other_item[0] <= item[1]:'
- en: weight_cache[i] = max(weight_cache[i], weight_cache[j] + item[3])
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: weight_cache[i] = max(weight_cache[i], weight_cache[j] + item[3])
- en: maxi = max(weight_cache[i], maxi)
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: maxi = max(weight_cache[i], maxi)
- en: 'for i, item in reversed(list(enumerate(heapq.nsmallest(item_count, heap)))):'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for i, item in reversed(list(enumerate(heapq.nsmallest(item_count, heap)))):'
- en: 'if weight_cache[i] == maxi:'
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if weight_cache[i] == maxi:'
- en: maxi -= item[3]
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: maxi -= item[3]
- en: selections.append(item)
  id: totrans-383
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: selections.append(item)
- en: return list(reversed(selections))
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return list(reversed(selections))
- en: activities = 'abcde'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: activities = 'abcde'
- en: start_times = [10, 12, 12, 13, 15]
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: start_times = [10, 12, 12, 13, 15]
- en: finish_times = [11, 13, 12.5, 15, 17]
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: finish_times = [11, 13, 12.5, 15, 17]
- en: weights = [1, 3, 2, 5, 1]
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: weights = [1, 3, 2, 5, 1]
- en: 'print ''Selected Activities (unweighted): %r'' % activity_selection(activities,
    start_times, finish_times)'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 'print ''Selected Activities (unweighted): %r'' % activity_selection(activities,
    start_times, finish_times)'
- en: 'print ''Selected Activities (weighted): %r'' % activity_selection_weighted(activities,
    start_times, finish_times, weights)'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 'print ''Selected Activities (weighted): %r'' % activity_selection_weighted(activities,
    start_times, finish_times, weights)'
- en: '[PRE20]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Activity selection has applications for scheduling events. The activity selection
    problem has applications in scheduling meets, conference scheduling, and in recommending
    schedules to attendees of events. This solution to the problem would have been
    particularly useful for providing a recommended attendance scheduling for alumni.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 活动选择在安排事件方面有应用。 活动选择问题在安排会议、会议安排以及向活动参与者推荐日程方面具有应用价值。 对于为校友提供推荐的出席日程安排，这个问题的解决方案尤其有用。
- en: Task Assignment[🔗](#task-assignment)
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务分配[🔗](#task-assignment)
- en: 'The last combinatorial problem we will cover is the [assignment problem](https://en.wikipedia.org/wiki/Assignment_problem):'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论的最后一个组合问题是[分配问题](https://en.wikipedia.org/wiki/Assignment_problem)：
- en: The problem instance has a number of agents and a number of tasks. Any agent
    can be assigned to perform any task, incurring some cost that may vary depending
    on the agent-task assignment. It is required to perform all tasks by assigning
    exactly one agent to each task and exactly one task to each agent in such a way
    that the total cost of the assignment is minimized.
  id: totrans-395
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 该问题实例有一些代理和一些任务。 任何代理都可以被指派执行任何任务，这会产生一些可能取决于代理任务分配的成本的成本。 要求通过将确切一个代理分配给每个任务和确切一个任务分配给每个代理的方式来执行所有任务，从而使分配的总成本最小化。
- en: This problem requires us to calculate a cost matrix, made of m rows of workers,
    and n columns of tasks to be completed. My example is for tasking workers on a
    flower farm to maximize profit for the farm, based on their wages and rate at
    which they pick flowers.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题要求我们计算一个成本矩阵，由m行工作者和n列任务组成，以便完成任务。 我的例子是为了在花园里给工人分配任务，以最大化花园的利润，基于他们的工资和采摘花朵的速率。
- en: '[PRE21]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '1'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '2'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '3'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '4'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '5'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '6'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: '7'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: '8'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '8'
- en: '9'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '9'
- en: '10'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '10'
- en: '[PRE22]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'def build_cost_matrix(workers, tasks, cost_func):'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 'def build_cost_matrix(workers, tasks, cost_func):'
- en: return [[cost_func(worker, task) for task in tasks] for worker in workers]
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return [[cost_func(worker, task) for task in tasks] for worker in workers]
- en: 'def profit(worker, task):'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 'def profit(worker, task):'
- en: return (worker['rate'] * task) - worker['pay']
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return (worker['rate'] * task) - worker['pay']
- en: 'workers = [{''pay'': 20, ''rate'': 300}, {''pay'': 10.5, ''rate'': 200}, {''pay'':
    15, ''rate'': 150}, {''pay'': 6.5, ''rate'': 100}, {''pay'': 17.5, ''rate'': 200}]'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 'workers = [{''pay'': 20, ''rate'': 300}, {''pay'': 10.5, ''rate'': 200}, {''pay'':
    15, ''rate'': 150}, {''pay'': 6.5, ''rate'': 100}, {''pay'': 17.5, ''rate'': 200}]'
- en: flowers =dict(orchid=10, daisy=2.25, daffodil=1.70, dandelion=0.001, grass=0.0001)
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: flowers =dict(orchid=10, daisy=2.25, daffodil=1.70, dandelion=0.001, grass=0.0001)
- en: flower_labels = flowers.keys()
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: flower_labels = flowers.keys()
- en: flower_assignments = flowers.values()
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: flower_assignments = flowers.values()
- en: '[PRE23]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We could normally could iterate through every possible combination of workers
    and flowers and find the maximum profit, especially since we only have 5 workers
    and 5 assignments, but that would not scale well if we had a large flower-growing
    business with hundred of workers and hundreds of types of flowers. We will need
    to use a more scaleable method. If we did not have a library, we would implement
    a [Hungarian algorithm](https://en.wikipedia.org/wiki/Hungarian_algorithm), however
    it is a rather complicated algorithm which is a topic for another day. Fortunately,
    scipy has an [implementation](https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.optimize.linear_sum_assignment.html)
    that we can use:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常可以遍历每一个可能的工人和花卉组合，并找到最大的利润，尤其是由于我们只有5个工人和5个任务，但如果我们有一个大型的种花业务，有数百名工人和数百种花卉，这种方法将不会很好地扩展。我们需要使用一种更可扩展的方法。如果我们没有库，我们将实现一个[匈牙利算法](https://en.wikipedia.org/wiki/Hungarian_algorithm)，然而它是一个相当复杂的算法，是另一个话题。幸运的是，scipy有一个[实现](https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.optimize.linear_sum_assignment.html)我们可以使用：
- en: '[PRE24]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '1'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '2'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '3'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '4'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '5'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '6'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: '7'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: '8'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '8'
- en: '9'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '9'
- en: '10'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '10'
- en: '11'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '11'
- en: '12'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '12'
- en: '13'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '13'
- en: '14'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '14'
- en: '15'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '15'
- en: '16'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '16'
- en: '17'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '17'
- en: '18'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '18'
- en: '19'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '19'
- en: '20'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '20'
- en: '21'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '21'
- en: '22'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '22'
- en: '23'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '23'
- en: '24'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '24'
- en: '25'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '25'
- en: '26'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '26'
- en: '[PRE25]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: from scipy.optimize import linear_sum_assignment
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: from scipy.optimize import linear_sum_assignment
- en: 'def flower_picker_cost(worker, task):'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 'def flower_picker_cost(worker, task):'
- en: return 0 - abs(profit(worker, task))
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return 0 - abs(profit(worker, task))
- en: cost_matrix = build_cost_matrix(workers, flower_assignments, flower_picker_cost)
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: cost_matrix = build_cost_matrix(workers, flower_assignments, flower_picker_cost)
- en: worker_indexes, assignment_indexes = linear_sum_assignment(cost_matrix)
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: worker_indexes, assignment_indexes = linear_sum_assignment(cost_matrix)
- en: 'for worker_index, assignment_index in zip(worker_indexes, assignment_indexes):'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 'for worker_index, assignment_index in zip(worker_indexes, assignment_indexes):'
- en: worker = workers[worker_index]
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: worker = workers[worker_index]
- en: flower = flower_labels[assignment_index]
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flower = flower_labels[assignment_index]
- en: print 'Worker=%r, flower=%s, profitability=$%s' %  (worker, flower, profit(worker,
    flowers[flower]))
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print 'Worker=%r, flower=%s, profitability=$%s' %  (worker, flower, profit(worker,
    flowers[flower]))
- en: import numpy as np
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: import numpy as np
- en: minimum_cost =  np.array(cost_matrix)[worker_indexes, assignment_indexes].sum()
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: minimum_cost =  np.array(cost_matrix)[worker_indexes, assignment_indexes].sum()
- en: 'print ''Maximum profit: $%s'' % abs(minimum_cost)'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 'print ''Maximum profit: $%s'' % abs(minimum_cost)'
- en: '"""'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: 'Worker={''pay'': 20, ''rate'': 300}, flower=orchid, profitability=$2980/hour'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 'Worker={''pay'': 20, ''rate'': 300}, flower=orchid, profitability=$2980/hour'
- en: 'Worker={''pay'': 10.5, ''rate'': 200}, flower=daisy, profitability=$439.5/hour'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 'Worker={''pay'': 10.5, ''rate'': 200}, flower=daisy, profitability=$439.5/hour'
- en: 'Worker={''pay'': 15, ''rate'': 150}, flower=dandelion, profitability=$-14.85/hour'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 'Worker={''pay'': 15, ''rate'': 150}, flower=dandelion, profitability=$-14.85/hour'
- en: 'Worker={''pay'': 6.5, ''rate'': 100}, flower=grass, profitability=$-6.49/hour'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 'Worker={''pay'': 6.5, ''rate'': 100}, flower=grass, profitability=$-6.49/hour'
- en: 'Worker={''pay'': 17.5, ''rate'': 200}, flower=daffodil, profitability=$322.5/hour'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 'Worker={''pay'': 17.5, ''rate'': 200}, flower=daffodil, profitability=$322.5/hour'
- en: 'Maximum Profit: $3720.6600000000003/hour'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 最大利润：$3720.6600000000003/小时
- en: '"""'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: '[PRE26]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Notice that we made our `flower_picker_cost` function return `0 - profit(worker,
    task)`. `scipy.optimize.linear_sum_assignment` implementation is used to minimize
    a cost function. Since our measure of success is profitability, we ensure that
    the cost our most profitable worker-flower assignments return the lowest cost.
    We could have used the formula `1 / - profit(worker, task)`, but I wanted to make
    the cost function simple and easy to interpret for users. Let’s try the same code
    on a large number of tasks and workers
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们使我们的`flower_picker_cost`函数返回`0 - profit(worker, task)`。`scipy.optimize.linear_sum_assignment`实现用于最小化成本函数。由于我们的成功衡量标准是盈利能力，我们确保最有利可图的工人-花卉分配的成本最低。我们本可以使用公式`1
    / - profit(worker, task)`，但我想让成本函数简单易懂，方便用户解释。让我们尝试在大量任务和工人上运行相同的代码
- en: '[PRE27]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '1'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '2'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '3'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '4'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '5'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '6'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: '7'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: '8'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '8'
- en: '9'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '9'
- en: '10'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '10'
- en: '11'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '11'
- en: '12'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '12'
- en: '13'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '13'
- en: '14'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '14'
- en: '[PRE28]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: workers = [dict(pay=random.random(), rate=random.random()) for i in range(150)]
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: workers = [dict(pay=random.random(), rate=random.random()) for i in range(150)]
- en: flowers = dict((flower, random.random() * 2) for flower in ["african corn lily",
    "ixia", "african lily, agapanthus", "alpine thistle, eryngium", "amaryllis, hippeastrum",
    "amazon lily, eucharis", "arum, zantedeschia", "baby’s breath, gypsophila", "balloon
    flower, platycodon", "barberton daisy, gerbera", "bee balm, monarda", "bell flower,
    campanula", "bells of Ireland, moluccella", "bergamot, monarda", "bird of paradise,
    strelizia", "bloom, chrysanthemum", "blue throatwort, trachelium", "bottlebrush,
    banksia", "brodiaea, triteleia (syn)", "broom, genista", "calla lily, zantedeschia",
    "canterbury bells, campanula", "carnation, dianthus", "china aster, callistephus",
    "chincerinchee, ornithogalum", "chinese bellflower, platycodon", "christmas rose,
    hellebore", "cockscomb, celosia", "columbine, aquilegia", "coneflower, rudbeckia/echinacea",
    "cornflower, centaurea", "corsage orchid, cattleya", "cosmos, cosmea (syn)", "cuban
    lily, scilla", "daffodil, narcissus", "dill, anethum", "drumstick, craspedia",
    "eustoma, lisianthus (syn)", "evening primrose, oenothera", "false goat’s beard,
    false spirea/astilbe", "feverfew, tanacetum parthenium", "flame lily, gloriosa",
    "flame tip, leucadendron", "flamingo flower, anthurium", "florist’s nighmare,
    ornithogalum", "floss flower, ageratum", "flowering cherry, prunus", "flowering
    onion, allium", "forget-me-not, myosotis", "foxglove, digitalis", "foxtail lily,
    eremurus", "gay feather, liatris", "gentian, gentiana", "gillyflower, matthiola",
    "ginger, alpinia", "globe amarath, gomphrena", "globe artichoke, cynara", "globe
    flower, trollius", "globe thistle, echinops", "glory lily, gloriosa", "golden
    rod, solidago", "golden shower orchid, oncidium", "goosefoot, chenpodium", "grape
    hyacinth, muscari", "guelder rose, viburnum opulus", "guernsey lily, nerine",
    "hyacinth, hyacinthus", "jersey lily, alstroemeria", "kangaroo paw, anigozanthos",
    "kansas feather, liatris", "lady’s mantle, alchemilla", "lady’s slipper orchid,
    paphiopedilum", "larkspur, delphinium consolida", "lavender, lavandula", "lilac,
    syringa", "lily, lilium", "lily of the valley, convallaria", "lisianthus, eustoma",
    "lobster claw, heliconia", "loose strife, lysimachia", "love lies bleeding, amaranthus",
    "love-in-a-mist, nigella", "lupin, lupinus", "marguerite, chrysanthemum frutescens",
    "marigold, calendula", "masterwort, astrantia", "michaelmas daisy, aster", "mimosa,
    acacia", "monkshood, aconitum", "montbretia, crocosmia", "moth orchid, phalenopsis",
    "mum, chrysanthemum", "obedient plant, physostegia", "ox-eye daisy, leucanthemum
    vulgare aka chrysanthemum leucanthemum", "painter’s palette, anthurium", "peony,
    paeonia", "peruvian lily, alstroemeria", "pincushion protea, leucospermum", "plumed
    thistle, cirsium", "prairie gentian, lisianthus", "prince of Wales feather, amaranthus",
    "queen Anne’s lace, ammi", "queen Fabiola lily, triteleia (syn brodiaea)", "red-hot
    poker, kniphofia", "rose, rosa", "safari sunset, leucadendron", "safflower, carthamus",
    "scabious, scabiosa", "scarlet plume, euphorbia fulgens", "scorpion orchid, aranthera",
    "sea holly, eryngium", "sea lavender, limonium", "september flower, aster", "singapore
    orchid, dendrobium", "slipper orchid, paphiopedilum", "snake head, chelone", "snapdragon,
    antirrhinum", "sneezeweed, helenium", "snow berry, symphoricarpos", "snow on the
    mountain, eurphorbia marginata", "speedwell, veronica", "spider orchid, arachnis",
    "spray carnation, dianthus", "spurge, euphorbia", "st john’s wort, hypericum",
    "star of bethlehem, ornithogalum", "statice, limonium", "stock, matthiola", "stonecrop,
    sedum", "sugarbush, protea", "sunflower, helianthus", "sweet pea, lathyrus", "sweet
    sultan, centaurea", "sweet William, dianthus barbatus", "sword lily, gladiolus",
    "tansy, tanacetum", "tazetta, narcissus", "thistle, eryngium", "tjenkenrientjee,
    ornithogalum", "transvaal daisy, gerbera", "tuberose, polianthes tuberosa", "tulip,
    tulipa", "turban buttercup/French buttercup/Persian buttercup, ranunculus", "turtle
    head, chelone", "ulster mary, alstroemeria", "waxflower, chamaelaucium", "windflower,
    anemone", "wormwood, artemesia", "yarrow", "achillea"])
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 花卉 = dict((flower, random.random() * 2) for flower in ["非洲玉米百合", "非洲鸢尾", "非洲百合，百子莲",
    "高山蓟，蓟", "孤挺花，海花", "亚马逊百合，莞草百合", "芋，马蹄莲", "婴儿气息，满天星", "气球花，泡罩", "巴伯顿雏菊，非洲菊", "蜜蜂蒲公英，玛诺多",
    "铃兰，风铃草", "爱尔兰铃铛，莫鲁塞拉", "佛手柑，玛诺多", "天堂鸟，乌鸦", "绽放，菊花", "蓝喉草，虫实草", "刷子树，银树", "美丽顶冠，食火鸡",
    "网球百合，马蹄莲", "坎特伯雷钟花，风铃草", "康乃馨，康乃馨", "中国菊，波斯菊", "中国鸢尾，鸢尾", "圣诞玫瑰，铁青", "鸡冠花，鸡冠花",
    "洋紫菀，耧斛", "金樱子，果树", "地丁花，洋葱", "勿忘我，勿忘我", "毛地黄，毛地黄", "狐尾百合，沙漏", "罗伞花，芦荟", "龙舌兰，葱",
    "晚樱草，月见草", "假绣线菊，假绣线菊", "烈焰百合，绣球花", "火焰尖，葛藤", "火鸟花，鹤望兰", "花艺师的梦魇，百子莲", "绒球花，艾格拉苏姆",
    "樱花，樱花", "洋葱花，洋葱", "勿忘我，勿忘我", "毛地黄，毛地黄", "狐尾莲，旱金莲", "假鸢尾，鸢尾", "龙眼花，女贞", "木槿，木槿",
    "百合，百合", "铃铛花，铃铛花", "绒球花，艾格拉苏姆", "石竹，石竹", "爱情挂在心上，苋菜", "爱迪生植物，金缕梅", "牛年花，菊花",
    "牵牛花，忍冬", "林丁花，兰花", "春大将军，繁缕", "狗舌草，狗舌草", "深山风铃花，鸢尾花", "娇兰，绒球花", "米歇尔的菊花，菊花",
    "含笑花，含笑花", "含羞草，欧石竹", "脐叶植物，泽兰", "雪莲，雪莲", "车前草，婆婆纳", "马鞭草，马鞭草", "伯利恒之星，百子莲", "海波斯花，紫锥花",
    "虫草兰，虫草兰", "喷泉康乃馨，康乃馨", "大戟，大戟", "圣约翰草，圣约翰草", "金星之花，百子莲", "百日菊，豌豆", "大麦菊，菊花")
- en: flower_labels = flowers.keys()
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: flower_labels = flowers.keys()
- en: flower_assignments = flowers.values()
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: flower_assignments = flowers.values()
- en: cost_matrix = build_cost_matrix(workers, flower_assignments, flower_picker_cost)
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: cost_matrix = build_cost_matrix(workers, flower_assignments, flower_picker_cost)
- en: worker_indexes, assignment_indexes = linear_sum_assignment(cost_matrix)
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: worker_indexes, assignment_indexes = linear_sum_assignment(cost_matrix)
- en: 'for worker_index, assignment_index in zip(worker_indexes, assignment_indexes):'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 'for worker_index, assignment_index in zip(worker_indexes, assignment_indexes):'
- en: worker = workers[worker_index]
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: worker = workers[worker_index]
- en: flower = flower_labels[assignment_index]
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flower = flower_labels[assignment_index]
- en: print 'Worker=%r, flower=%s, profitability=$%s/hour' %  (worker, flower, profit(worker,
    flowers[flower]))
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print 'Worker=%r, flower=%s, profitability=$%s/hour' %  (worker, flower, profit(worker,
    flowers[flower]))
- en: '[PRE29]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The assignment problem comes up often in everyday life, such as optimally determining
    which athletic trainer to assign to each athlete in a queue, determining how to
    assign technicians to support tickets based on their skillset and location, or
    determining the optimal way to assign salesperson to potential companies.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 分配问题经常在日常生活中出现，比如最优确定排队中每个运动员分配给哪个运动训练师，根据他们的技能和位置确定如何分配技术人员支持票据，或者确定分配销售人员给潜在公司的最佳方式。
- en: Minimum Set Cover[🔗](#minimum-set-cover)
  id: totrans-497
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小集合覆盖[🔗](#minimum-set-cover)
- en: 'One such approximation algorithm is that of the [Minimum Set Cover problem](https://en.wikipedia.org/wiki/Set_cover_problem):'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种近似算法是[最小集合覆盖问题](https://en.wikipedia.org/wiki/Set_cover_problem)：
- en: Given a set of elements {1,2,...,n} (called the universe) and a collection S
    of m sets whose union equals the universe, the set cover problem is to identify
    the smallest sub-collection of S whose union equals the universe
  id: totrans-499
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 给定一组元素{1,2,...,n}（称为宇宙）和一个集合 S，其并集等于宇宙，集合覆盖问题是识别 S 的最小子集合，其并集等于宇宙
- en: '[PRE30]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '1'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '2'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '3'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '4'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '5'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '6'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: '7'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: '8'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '8'
- en: '9'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '9'
- en: '10'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '10'
- en: '11'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '11'
- en: '12'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '12'
- en: '13'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '13'
- en: '14'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '14'
- en: '15'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '15'
- en: '16'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '16'
- en: '17'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '17'
- en: '18'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '18'
- en: '19'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '19'
- en: '20'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '20'
- en: '21'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '21'
- en: '22'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '22'
- en: '23'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '23'
- en: '24'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '24'
- en: '25'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '25'
- en: '26'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '26'
- en: '27'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '27'
- en: '28'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '28'
- en: '29'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '29'
- en: '30'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '30'
- en: '31'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '31'
- en: '32'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '32'
- en: '33'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '33'
- en: '34'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '34'
- en: '35'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '35'
- en: '36'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '36'
- en: '37'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '37'
- en: '38'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '38'
- en: '39'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '39'
- en: '40'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '40'
- en: '[PRE31]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'def set_cover(target_set, all_sets, selection_func=None, max_iterations=1000,
    min_max=max):'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 'def set_cover(target_set, all_sets, selection_func=None, max_iterations=1000,
    min_max=max):'
- en: '"""'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"""'
- en: Finds a list of sets from all_sets that covers all (or the most) items in covering_set.
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 all_sets 中找到一个列表，该列表覆盖 covering_set 中的所有（或最多）项目。
- en: If not able to cover all the items in the covering set in max_iterations, will
    return the best result found
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在 max_iterations 中无法覆盖 covering set 中的所有项目，则返回找到的最佳结果
- en: '"""'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"""'
- en: 'if selection_func and not hasattr(selection_func, ''__call__''):'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if selection_func and not hasattr(selection_func, ''__call__''):'
- en: raise ValueError('scoring_func(%r) is not callable' % selection_func)
  id: totrans-548
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: raise ValueError('scoring_func(%r) is not callable' % selection_func)
- en: remaining_items = target_set
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: remaining_items = target_set
- en: best_solution = []
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: best_solution = []
- en: 'if not selection_func:'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if not selection_func:'
- en: 'selection_func = lambda item: len(set(item) & set(remaining_items))'
  id: totrans-552
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'selection_func = lambda item: len(set(item) & set(remaining_items))'
- en: iterations = 0
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: iterations = 0
- en: old_remaining_items = remaining_items
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: old_remaining_items = remaining_items
- en: 'while len(remaining_items) and iterations < max_iterations:'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'while len(remaining_items) and iterations < max_iterations:'
- en: iterations += 1
  id: totrans-556
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: iterations += 1
- en: 'if not selection_func:'
  id: totrans-557
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if not selection_func:'
- en: selected_set = min_max(all_sets, key=selection_func)
  id: totrans-558
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: selected_set = min_max(all_sets, key=selection_func)
- en: 'else:'
  id: totrans-559
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: selected_set = selection_func(remaining_items)
  id: totrans-560
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: selected_set = selection_func(remaining_items)
- en: all_sets.remove(selected_set)
  id: totrans-561
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: all_sets.remove(selected_set)
- en: remaining_items = set(remaining_items) - set(selected_set)
  id: totrans-562
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: remaining_items = set(remaining_items) - set(selected_set)
- en: 'if len(old_remaining_items) == len(remaining_items):'
  id: totrans-563
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if len(old_remaining_items) == len(remaining_items):'
- en: 'if min_max == min:'
  id: totrans-564
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if min_max == min:'
- en: continue
  id: totrans-565
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续
- en: 'elif min_max == max:'
  id: totrans-566
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'elif min_max == max:'
- en: break
  id: totrans-567
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: break
- en: best_solution.append(selected_set)
  id: totrans-568
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: best_solution.append(selected_set)
- en: old_remaining_items = remaining_items
  id: totrans-569
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: old_remaining_items = remaining_items
- en: return best_solution
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return best_solution
- en: import itertools
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: import itertools
- en: import random
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: import random
- en: import string
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: import string
- en: alphabet_list = [letter for letter in string.lowercase]
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: alphabet_list = [letter for letter in string.lowercase]
- en: combinations = [list(combo) for combo in itertools.combinations(alphabet_list,
    4)]
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: combinations = [list(combo) for combo in itertools.combinations(alphabet_list,
    4)]
- en: set_to_cover = random.sample(alphabet_list, 9) + ['!']
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: set_to_cover = random.sample(alphabet_list, 9) + ['!']
- en: 'print ''Set to Cover: %r'' % set_to_cover'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 'print ''Set to Cover: %r'' % set_to_cover'
- en: 'print ''Minimum Set Cover: %r, Uncovered Items %r'' % set_cover(set_to_cover,
    combinations)'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 'print ''Minimum Set Cover: %r, Uncovered Items %r'' % set_cover(set_to_cover,
    combinations)'
- en: '[PRE32]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Set coverings can be used to create solutions for purchasing inventory, creating
    work schedules for shift hours a training room, creating the minimal team that
    has the required skillset for a project, or finding the minimal number of officials
    required to host a meet based on the division requirements.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 集合覆盖可用于创建采购库存的解决方案，为班次小时的工作时间创建工作时间表，为项目创建具有所需技能的最小团队，或者根据分区要求找到主持比赛所需的最少官员。
- en: In our examples, the algorithms solved our problems almost instantaneously.
    In a production setting with larger datasets, we would likely rewrite these algorithms
    as a separate library in Cython to solv larger instances of the problems without
    performance issues.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，算法几乎瞬间解决了我们的问题。在具有更大数据集的生产环境中，我们可能会将这些算法重写为 Cython 中的单独库，以解决问题的更大实例而无需出现性能问题。
- en: Larger problems[🔗](#larger-problems)
  id: totrans-582
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更大的问题[🔗](#larger-problems)
- en: The problems we have examined so far are fairly simple problems. In a business
    settings, many problems that need to be resolved have more potential solutions,
    more constraints, and more dimensions. Computer scientists and operations research
    specialists have spent decades building and optimizing specialized libraries for
    solving these types of problems. The most time-efficient way for us to use would
    be to use their optimized libraries to solve our optimization problems. Their
    libraries will allow us to focus on solving our business-related issues using
    the best methods available.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 我们迄今为止检查的问题相当简单。在商业环境中，许多需要解决的问题具有更多的潜在解决方案、更多的约束和更多的维度。计算机科学家和运营研究专家花费了几十年的时间构建和优化用于解决这些类型问题的专业库。对我们而言最省时的方法是使用他们优化过的库来解决我们的优化问题。他们的库将使我们能够专注于使用现有的最佳方法解决我们的与业务相关的问题。
- en: The above all are very reputable and optimized libraries for solving optimization
    problems. For Python, I would recommend using Google’s [ORTools](https://developers.google.com/optimization/).
    Google ORTools provides a Python interface to many of the above tools, allowing
    Python developers to leverage the above libraries without needing to know how
    each of them work.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 上述都是解决优化问题的非常有声望且经过优化的库。对于Python，我建议使用Google的[ORTools](https://developers.google.com/optimization/)。
    Google ORTools为许多以上工具提供了Python接口，使得Python开发人员可以利用以上库而不需要知道它们的工作原理。
- en: 'Here is a real-life scenario: Let’s say we want to invest in our online advertising
    and we want to get the most conversions we can using our limited budget, but we
    have a set of business constraints that we have to meet. Using only conversion
    rates across mediums, and our customer reach/dollar, we can find the optimal allocation
    of funds in less than a quarter of a second.'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个真实的场景：假设我们想要投资于在线广告，我们想要在有限的预算内获得尽可能多的转化，但我们必须满足一系列业务约束。仅使用各媒介的转化率和我们的客户达到/每美元，我们可以在不到一秒钟的时间内找到资金的最优分配。
- en: '[PRE33]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '1'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '2'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '3'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '4'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '5'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '6'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: '7'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: '8'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '8'
- en: '9'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '9'
- en: '10'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '10'
- en: '11'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '11'
- en: '12'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '12'
- en: '13'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '13'
- en: '14'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: '14'
- en: '15'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '15'
- en: '16'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '16'
- en: '17'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '17'
- en: '18'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '18'
- en: '19'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '19'
- en: '20'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '20'
- en: '21'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '21'
- en: '22'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '22'
- en: '23'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '23'
- en: '24'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '24'
- en: '25'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '25'
- en: '26'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '26'
- en: '27'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '27'
- en: '28'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '28'
- en: '29'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '29'
- en: '30'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '30'
- en: '31'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: '31'
- en: '32'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '32'
- en: '33'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '33'
- en: '34'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: '34'
- en: '35'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '35'
- en: '36'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '36'
- en: '37'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '37'
- en: '38'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '38'
- en: '39'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '39'
- en: '40'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: '40'
- en: '41'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '41'
- en: '42'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '42'
- en: '43'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '43'
- en: '44'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '44'
- en: '45'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '45'
- en: '46'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '46'
- en: '47'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '47'
- en: '48'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '48'
- en: '49'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '49'
- en: '50'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: '50'
- en: '51'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '51'
- en: '52'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '52'
- en: '53'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '53'
- en: '54'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '54'
- en: '55'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '55'
- en: '[PRE34]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: from ortools.linear_solver import pywraplp
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: from ortools.linear_solver import pywraplp
- en: 'if __name__ == ''__main__'':'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 'if __name__ == ''__main__'':'
- en: channels = ['Social Media', 'Referral', 'Organic Search', 'Email', 'Direct']
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渠道 = ['社交媒体', '推荐', '有机搜索', '电子邮件', '直接']
- en: probabilities of conversion from each of the above channels
  id: totrans-646
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上述各渠道的转化概率
- en: conversion_probabilities = [0.0675, 0.128, 0.0577, 0.1723, 0.7387]
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: conversion_probabilities = [0.0675, 0.128, 0.0577, 0.1723, 0.7387]
- en: customer_reach = [2, 0.3, 1.8, 0.9, 2]
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: customer_reach = [2, 0.3, 1.8, 0.9, 2]
- en: constraint_table = {
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 约束表 = {
- en: '''Overall Budget'': dict(max=5000, min=0, coefficients=[1, 1, 1, 1, 1]),'
  id: totrans-650
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''总预算'': dict(max=5000, min=0, coefficients=[1, 1, 1, 1, 1]),'
- en: '''Direct Budget < 25% of Budget'': dict()'
  id: totrans-651
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''直接预算 < 25%的预算'': dict()'
- en: '}'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: solver = pywraplp.Solver('ROI', pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: solver = pywraplp.Solver('ROI', pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)
- en: budgets = dict()
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: budgets = dict()
- en: objective = solver.Objective()
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目标 = solver.Objective()
- en: create variables for the budget of each channel
  id: totrans-656
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为每个渠道的预算创建变量
- en: 'for channel, probability in zip(channels, conversion_probabilities):'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for 渠道, 概率 in zip(渠道, 转化概率):'
- en: budget cannot be negative
  id: totrans-658
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预算不能为负
- en: budget_variable = solver.NumVar(0.0, solver.infinity(), channel)
  id: totrans-659
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预算变量 = solver.NumVar(0.0, solver.infinity(), 渠道)
- en: for each channel allocate funds based on conversion rates for each channel
  id: totrans-660
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对每个渠道根据每个渠道的转化率分配资金
- en: objective.SetCoefficient(budget_variable, probability)
  id: totrans-661
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: objective.SetCoefficient(预算变量, 概率)
- en: budgets[channel] = budget_variable
  id: totrans-662
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: budgets[渠道] = 预算变量
- en: maximize the number of conversions (ROI)
  id: totrans-663
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最大化转化数量（ROI）
- en: objective.SetMaximization()
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: objective.SetMaximization()
- en: total budget
  id: totrans-665
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总预算
- en: total_budget = solver.Sum(budgets.values())
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: total_budget = solver.Sum(budgets.values())
- en: total budget <= $5000
  id: totrans-667
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总预算 <= $5000
- en: solver.Add(total_budget <= 5000)
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: solver.Add(total_budget <= 5000)
- en: Social Media < $50
  id: totrans-669
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 社交媒体 < $50
- en: solver.Add(budgets['Social Media'] <= 50)
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: solver.Add(budgets['社交媒体'] <= 50)
- en: Direct is < 25% of Total budget
  id: totrans-671
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接 < 25%的总预算
- en: solver.Add(budgets['Direct'] <= .25 * total_budget)
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: solver.Add(budgets['直接'] <= .25 * total_budget)
- en: E-mail budget is at least $200
  id: totrans-673
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电子邮件预算至少为$200
- en: solver.Add(budgets['Email'] >= 200)
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: solver.Add(budgets['电子邮件'] >= 200)
- en: Email budget < 3 x Social Media
  id: totrans-675
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电子邮件预算 < 3 x 社交媒体
- en: solver.Add(budgets['Email'] <= 3 * budgets['Social Media'])
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: solver.Add(budgets['电子邮件'] <= 3 * budgets['社交媒体'])
- en: Referral budget >= 12% of total budget
  id: totrans-677
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐预算 >= 总预算的12%
- en: solver.Add(budgets['Referral'] >= .12 * total_budget)
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: solver.Add(budgets['推荐'] >= .12 * total_budget)
- en: Reach 30,000 or more users
  id: totrans-679
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 达到 30,000 或更多用户
- en: total_reach = sum([budgets[channel] * reach for channel, reach in zip(channels,
    customer_reach)])
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: total_reach = sum([budgets[渠道] * reach for 渠道, reach in zip(渠道, customer_reach)])
- en: solver.Add(total_reach >= 30000)
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: solver.Add(total_reach >= 30000)
- en: status = solver.Solve()
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: status = solver.Solve()
- en: 'if status == solver.OPTIMAL:'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if status == solver.OPTIMAL:'
- en: 'for channel, value in budgets.items():'
  id: totrans-684
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for 渠道, 值 in budgets.items():'
- en: 'print ''%s: $%r'' % (channel, value.solution_value())'
  id: totrans-685
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'print ''%s: $%r'' % (渠道, 值.solution_value())'
- en: 'print ''Optimal budget: $%r, reaching %s users'' % (total_budget.solution_value(),
    total_reach.solution_value())'
  id: totrans-686
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: print '最优预算：$%r，达到%s用户' % (total_budget.solution_value(), total_reach.solution_value())
- en: 'elif status == solver.FEASIBLE:'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'elif status == solver.FEASIBLE:'
- en: print 'A potentially suboptimal solution was found.'
  id: totrans-688
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: print '发现潜在的次优解。'
- en: 'else:'
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 否则：
- en: print 'The solver could not solve the problem.'
  id: totrans-690
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: print '求解器无法解决问题。'
- en: '[PRE35]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: A significant benefit of ORTools is its ability to solve linear, integer and
    mixed-integer problems and to define the problem at runtime. Many specialized
    optimization tools have their own language syntax for creating optimization programs,
    which makes building the problem at runtime more painful for developers.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: ORTools 的一个重要优势是其能够解决线性、整数和混合整数问题，并在运行时定义问题。许多专业的优化工具都有自己的语言语法用于创建优化程序，这使得为开发人员构建运行时问题更加痛苦。
- en: Seating Assignment[🔗](#seating-assignment)
  id: totrans-693
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 座位分配[🔗](#seating-assignment)
- en: 'One of the biggest pains of brides (so I hear), is to organize the seating
    charts for wedding receptions. In a perfect world this wouldn’t be a problem because
    all relatives/friends would love each other’s company. But that’s not going to
    happen. So brides have to find a way to group the guests so that everyone can
    enjoy the company of fellow guests, and not be seated with company they don’t
    enjoy (and potentially cause wedding drama). Fortunately, operations researchers
    identified this type of issue as one worth solving. In our seating assignment
    problem, our objective is simple: maximize the number of people sitting together
    who like each other. We can create a data representation to use to maximize our
    objective by creating a matrix representation of all sentiments/relationships
    between all attendees of the wedding. an edge’s weight reflects the sentiment/relationship
    that one guest has for another. If the relationship is non-existent or a person
    feels ambivalent towards the other, the weight should be ~0. We will have a number
    of constraints that we will need to account for:'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
- en: A table cannot be assigned more guests than it has seats for
  id: totrans-695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A guest cannot have more than 1 assigned seat
  id: totrans-696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A guests must have know more at least a given number of guests at their table.
    some guests may require more/less known guests than others
  id: totrans-697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tables may have varying capacities due to different types of tables, or different
    numbers of available chairs
  id: totrans-698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have our objectives and constraints we can write our actual model:'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '1'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
- en: '2'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: '3'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
- en: '4'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: '5'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
- en: '6'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: '7'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: '8'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: '9'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: '10'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: '11'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: '12'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
- en: '13'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: '14'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
- en: '15'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
- en: '16'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
- en: '17'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
- en: '18'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
- en: '19'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: '20'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
- en: '21'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: '22'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
- en: '23'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
- en: '24'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
- en: '25'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
- en: '26'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
- en: '27'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
- en: '28'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: '29'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
- en: '30'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
- en: '31'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: '32'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
- en: '33'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
- en: '34'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
- en: '35'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
- en: '36'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
- en: '37'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
- en: '38'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
- en: '39'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
- en: '40'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: '41'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
- en: '42'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
- en: '43'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
- en: '44'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
- en: '45'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
- en: '46'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
- en: '47'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
- en: '48'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
- en: '49'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: '50'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: '51'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
- en: '52'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: '53'
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
- en: '54'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
- en: '55'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
- en: '56'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
- en: '57'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
- en: '58'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
- en: '59'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
- en: '60'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
- en: '61'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
- en: '62'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
- en: '63'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
- en: '64'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
- en: '65'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
- en: '66'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
- en: '67'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
- en: '68'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
- en: '69'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
- en: '70'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
- en: '71'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
- en: '72'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
- en: '73'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
- en: '74'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
- en: '75'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
- en: '76'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
- en: '77'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
- en: '78'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
- en: '79'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
- en: '80'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: '81'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: '82'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
- en: '83'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
- en: '84'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
- en: '85'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
- en: '86'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
- en: '87'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
- en: '88'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
- en: '89'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
- en: '90'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
- en: '91'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: '92'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
- en: '93'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
- en: '94'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
- en: '95'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
- en: '96'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: '97'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
- en: '98'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
- en: '99'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
- en: '100'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
- en: '101'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
- en: '102'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
- en: '103'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
- en: '104'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
- en: '105'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
- en: '106'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
- en: '107'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
- en: '108'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
- en: '109'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
- en: '110'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
- en: '111'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
- en: '112'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
- en: '113'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
- en: '114'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
- en: '115'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
- en: '116'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
- en: '117'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
- en: '118'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
- en: '119'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
- en: '120'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
- en: '121'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
- en: '122'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
- en: '123'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
- en: '124'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
- en: '125'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
- en: '126'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
- en: '127'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
- en: '128'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: '129'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
- en: '130'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
- en: '131'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
- en: '132'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
- en: '133'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
- en: '134'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
- en: '135'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
- en: '136'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
- en: '137'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
- en: '138'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
- en: '139'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
- en: '140'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
- en: '141'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
- en: '142'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
- en: '143'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
- en: '144'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
- en: '145'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: from __future__ import print_function
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
- en: from ortools.sat.python import cp_model
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
- en: 'def seat_assignment(all_tables, table_capacities, min_known_neighbors, relationships,
    names):'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
- en: num_guests = len(relationships)
  id: totrans-850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: all_guests = range(num_guests)
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if isinstance(table_capacities, int):'
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: table_capacities = [table_capacities] * len(all_tables)
  id: totrans-853
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if isinstance(min_known_neighbors, int):'
  id: totrans-854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: min_known_neighbors = [min_known_neighbors] * len(all_tables)
  id: totrans-855
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the cp model.
  id: totrans-856
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: model = cp_model.CpModel()
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#'
  id: totrans-858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Decision variables
  id: totrans-859
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: '#'
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: seats = {}
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for table in all_tables:'
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for guest in all_guests:'
  id: totrans-863
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: seats[(table, guest)] = model.NewBoolVar("guest %i seats on table %i" % (guest,
    table))
  id: totrans-864
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: colocated = {}
  id: totrans-865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for g1 in range(num_guests - 1):'
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for g2 in range(g1 + 1, num_guests):'
  id: totrans-867
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: colocated[(g1, g2)] = model.NewBoolVar("guest %i seats with guest %i" % (g1,
    g2))
  id: totrans-868
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: same_table = {}
  id: totrans-869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for g1 in range(num_guests - 1):'
  id: totrans-870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for g2 in range(g1 + 1, num_guests):'
  id: totrans-871
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for table in all_tables:'
  id: totrans-872
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: same_table[(g1, g2, table)] = model.NewBoolVar("guest %i seats with guest %i
    on table %i" % (g1, g2, table))
  id: totrans-873
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Objective
  id: totrans-874
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: total_score = sum(relationships[g1][g2] * colocated[g1, g2] for g1 in range(num_guests
    - 1) for g2 in range(g1 + 1, num_guests) if relationships[g1][g2] > 0)
  id: totrans-875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: model.Maximize(total_score)
  id: totrans-876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#'
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Constraints
  id: totrans-878
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: ''
  id: totrans-879
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: Everybody seats at one table.
  id: totrans-880
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: 'for guest in all_guests:'
  id: totrans-881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: seats_per_guest = sum(seats[(table, guest)] for table in all_tables)
  id: totrans-882
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: model.Add(seats_per_guest == 1)
  id: totrans-883
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Tables have a max capacity.
  id: totrans-884
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: 'for table, table_capacity in zip(all_tables, table_capacities):'
  id: totrans-885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: assigned_seats_per_table = sum(seats[(table, guest)] for guest in all_guests)
  id: totrans-886
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: model.Add(assigned_seats_per_table <= table_capacity)
  id: totrans-887
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Link colocated with seats
  id: totrans-888
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: 'for g1 in range(num_guests - 1):'
  id: totrans-889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for g2 in range(g1 + 1, num_guests):'
  id: totrans-890
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for table in all_tables:'
  id: totrans-891
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Link same_table and seats.  Keeps variables in sync
  id: totrans-892
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: guest_table_1 = seats[(table, g1)]
  id: totrans-893
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: guest_table_2 = seats[(table, g2)]
  id: totrans-894
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: same_table_pairing = same_table[(g1, g2, table)]
  id: totrans-895
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: model.AddBoolOr([guest_table_1.Not(), guest_table_2.Not(), same_table_pairing])
  id: totrans-896
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: if same_table_pairing is True, then guest_table_1/2 must be True
  id: totrans-897
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: model.AddImplication(same_table_pairing, guest_table_1)
  id: totrans-898
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: model.AddImplication(same_table_pairing, guest_table_2)
  id: totrans-899
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Link colocated and same_table.
  id: totrans-900
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: guests_sit_together = sum(same_table[(g1, g2, table)] for table in all_tables)
  id: totrans-901
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: model.Add(guests_sit_together == colocated[(g1, g2)])
  id: totrans-902
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Min known neighbors rule.
  id: totrans-903
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: 'for t, min_neighbors in zip(all_tables, min_known_neighbors):'
  id: totrans-904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: known_neighbors = sum(same_table[(g1, g2, t)] for g1 in range(num_guests - 1)
    for g2 in range(g1 + 1, num_guests) for t in all_tables if relationships[g1][g2]
    > 0)
  id: totrans-905
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: model.Add(known_neighbors >= min_neighbors)
  id: totrans-906
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Symmetry breaking. First guest seats on the first table.
  id: totrans-907
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: model.Add(seats[(0, 0)] == 1)
  id: totrans-908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Solve model.
  id: totrans-909
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: solver = cp_model.CpSolver()
  id: totrans-910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: status = solver.Solve(model)
  id: totrans-911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("conflicts    : %i" % solver.NumConflicts())'
  id: totrans-912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print(" branches     : %i" % solver.NumBranches())'
  id: totrans-913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("wall time    : %f ms" % solver.WallTime())'
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: output = dict()
  id: totrans-915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for (table, guest), seat_variable in seats.items():'
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: is_seated_at_table = solver.Value(seat_variable)
  id: totrans-917
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if is_seated_at_table:'
  id: totrans-918
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: guest_name = names[guest]
  id: totrans-919
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: output[guest_name] = table
  id: totrans-920
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return output, solver.Value(total_score)
  id: totrans-921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: solve_with_discrete_model()
  id: totrans-922
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'if __name__ == ''__main__'':'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
- en: import random
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Connection matrix: who knows who, and how strong'
  id: totrans-925
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: is the relation
  id: totrans-926
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: relations = [
  id: totrans-927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[1, 50, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],'
  id: totrans-928
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[50, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],'
  id: totrans-929
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[1, 1, 1, 50, 1, 1, 1, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0],'
  id: totrans-930
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[1, 1, 50, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],'
  id: totrans-931
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[1, 1, 1, 1, 1, 50, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],'
  id: totrans-932
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[1, 1, 1, 1, 50, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],'
  id: totrans-933
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[1, 1, 1, 1, 1, 1, 1, 50, 1, 0, 0, 0, 0, 0, 0, 0, 0],'
  id: totrans-934
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[1, 1, 1, 1, 1, 1, 50, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],'
  id: totrans-935
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[1, 1, 10, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],'
  id: totrans-936
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50, 1, 1, 1, 1, 1, 1],'
  id: totrans-937
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 1, 1, 1, 1, 1, 1, 1],'
  id: totrans-938
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],'
  id: totrans-939
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],'
  id: totrans-940
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],'
  id: totrans-941
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],'
  id: totrans-942
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],'
  id: totrans-943
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1]'
  id: totrans-944
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  id: totrans-945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Names of the guests. B: Bride side, G: Groom side'
  id: totrans-946
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: names = [
  id: totrans-947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"John (G)", "Mike (B)", "Kathy (G)", "Cory (B)", "Carmela (G)",'
  id: totrans-948
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Jeff (B)", "Matt (B)", "Brad (B)", "Abby (B)", "Ann (B)",'
  id: totrans-949
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Lee (G)", "Mary (B)", "Bob (B)", "Will (G)", "Scott (B)",'
  id: totrans-950
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Diane (G)", "Laura (B)"'
  id: totrans-951
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  id: totrans-952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: table_count = 4
  id: totrans-953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: all_tables = range(table_count)
  id: totrans-954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: table_capacities = 5
  id: totrans-955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: table_capacities = [random.randint(4,6) for table in all_tables]
  id: totrans-956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: min_known_neighbors = 3
  id: totrans-957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: min_known_neighbors = [random.randint(0,3) for table in all_tables]
  id: totrans-958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print(''total guests: %i'' % len(relations))'
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if isinstance(table_capacities, (list, tuple)):'
  id: totrans-960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: total_seats = sum(table_capacities)
  id: totrans-961
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: total_seats = len(all_tables) * table_capacities
  id: totrans-963
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print(''total seats: %i'' % total_seats)'
  id: totrans-964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: results, score = seat_assignment(all_tables, table_capacities, min_known_neighbors,
    relations, names)
  id: totrans-965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print('Seating assignments:')
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for guest, table in results.items():'
  id: totrans-967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print(''Guest: %r, Table: %r'' % (guest, table))'
  id: totrans-968
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print('Optimal Score:', score)
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Using ortools, we were able to create a flexible model that meets all our constraints.
    We even allow developers to specify table_capacity and min_known_neighbor constraints
    as an integer or as a list. Let’s check our output:'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-972
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This model can be expanded to include even more constraints, so our model still
    has room to grow as more more constraints arise. This same model can also be applied
    to other scenarios such as conference seating charts, assigning project teams,
    etc.
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-974
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '1'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
- en: '2'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
- en: '3'
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
- en: '4'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
- en: '5'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
- en: '6'
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
- en: '7'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
- en: '8'
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
- en: '9'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
- en: '10'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
- en: '11'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
- en: '12'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
- en: '13'
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
- en: '14'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
- en: '15'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
- en: '16'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
- en: '17'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
- en: '18'
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
- en: '19'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
- en: '20'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
- en: '21'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
- en: '22'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
- en: '23'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
- en: '24'
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
- en: '25'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
- en: '26'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
- en: '27'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
- en: '28'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
- en: '29'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
- en: '30'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
- en: '31'
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
- en: '32'
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
- en: '33'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
- en: '34'
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
- en: '35'
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
- en: '36'
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
- en: '37'
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
- en: '38'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
- en: '39'
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
- en: '40'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
- en: '41'
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
- en: '42'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
- en: '43'
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
- en: '44'
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-1019
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: from networkx import Graph
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
- en: from networkx.algorithms import matching
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
- en: 'def lane_matching(athletes, lanes, **kwargs):'
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
- en: athlete_count = len(athletes)
  id: totrans-1023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: athlete_count = len(athletes)
- en: G = Graph()
  id: totrans-1024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: G = Graph()
- en: G.add_nodes_from([athlete['name'] for athlete in athletes])
  id: totrans-1025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: G.add_nodes_from([athlete['name'] for athlete in athletes])
- en: average_height = sum([athlete['height'] for athlete in athletes]) / athlete_count
  id: totrans-1026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: average_height = sum([athlete['height'] for athlete in athletes]) / athlete_count
- en: 'for lane in range(1, lane_count+1):'
  id: totrans-1027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for lane in range(1, lane_count+1):'
- en: G.add_node(lane)
  id: totrans-1028
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: G.add_node(lane)
- en: 'for athlete in athletes:'
  id: totrans-1029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for athlete in athletes:'
- en: athlete_name = athlete['name']
  id: totrans-1030
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: athlete_name = athlete['name']
- en: preferred_lane = athlete['preferred_lane']
  id: totrans-1031
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: preferred_lane = athlete['preferred_lane']
- en: athlete_height = athlete['height']
  id: totrans-1032
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: athlete_height = athlete['height']
- en: 'for lane in range(1, lane_count+1):'
  id: totrans-1033
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for lane in range(1, lane_count+1):'
- en: score = lane_count
  id: totrans-1034
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: score = lane_count
- en: 'if lane < kwargs.get(''furthest_inner_lane'', 3):'
  id: totrans-1035
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if lane < kwargs.get(''furthest_inner_lane'', 3):'
- en: score -= (1.0 / lane * (athlete_height - average_height))
  id: totrans-1036
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: score -= (1.0 / lane * (athlete_height - average_height))
- en: score -= abs(preferred_lane - lane)
  id: totrans-1037
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: score -= abs(preferred_lane - lane)
- en: G.add_edge(athlete_name, lane, weight=score)
  id: totrans-1038
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: G.add_edge(athlete_name, lane, weight=score)
- en: start_time = time.time()
  id: totrans-1039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: start_time = time.time()
- en: matches = matching.max_weight_matching(G, maxcardinality=True)
  id: totrans-1040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: matches = matching.max_weight_matching(G, maxcardinality=True)
- en: total_time = (time.time() - start_time) * 1000
  id: totrans-1041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: total_time = (time.time() - start_time) * 1000
- en: 'print ''match time: %sms'' % total_time'
  id: totrans-1042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'print ''match time: %sms'' % total_time'
- en: return matches
  id: totrans-1043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return matches
- en: 'if __name__ == ''__main__'':'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: 'if __name__ == ''__main__'':'
- en: import time
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: import time
- en: athletes = [
  id: totrans-1046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: athletes = [
- en: dict(name='Sanya Richards-Ross', height=68.0, preferred_lane=4),
  id: totrans-1047
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: dict(name='Sanya Richards-Ross', height=68.0, preferred_lane=4),
- en: dict(name='Carmelita Jeter', height=64.0, preferred_lane=5),
  id: totrans-1048
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: dict(name='Carmelita Jeter', height=64.0, preferred_lane=5),
- en: dict(name='Wyomia Tyus', height=68.0, preferred_lane=6),
  id: totrans-1049
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: dict(name='Wyomia Tyus', height=68.0, preferred_lane=6),
- en: dict(name='Veronica Campbell-Brown', height=65.0, preferred_lane=6),
  id: totrans-1050
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: dict(name='Veronica Campbell-Brown', height=65.0, preferred_lane=6),
- en: dict(name='Florence Griffith-Joyner', height=67.0, preferred_lane=5),
  id: totrans-1051
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: dict(name='Florence Griffith-Joyner', height=67.0, preferred_lane=5),
- en: dict(name='Wilma Rudolph', height=71.0, preferred_lane=6),
  id: totrans-1052
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: dict(name='Wilma Rudolph', height=71.0, preferred_lane=6),
- en: dict(name='Allyson Felix', height=66.0, preferred_lane=4),
  id: totrans-1053
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: dict(name='Allyson Felix', height=66.0, preferred_lane=4),
- en: dict(name='Gail Devers', height=63.0, preferred_lane=4)
  id: totrans-1054
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: dict(name='Gail Devers', height=63.0, preferred_lane=4)
- en: ']'
  id: totrans-1055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ']'
- en: lane_count = 8
  id: totrans-1056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: lane_count = 8
- en: lanes = range(1, lane_count + 1)
  id: totrans-1057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: lanes = range(1, lane_count + 1)
- en: lane_matches = lane_matching(athletes, lanes)
  id: totrans-1058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: lane_matches = lane_matching(athletes, lanes)
- en: print lane_matches
  id: totrans-1059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print lane_matches
- en: '[PRE42]'
  id: totrans-1060
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This code for creating the heats for the
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: This code for creating the heats for the
- en: '[PRE43]'
  id: totrans-1062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '1'
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '2'
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: '3'
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: '3'
- en: '4'
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: '4'
- en: '5'
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: '5'
- en: '6'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: '6'
- en: '7'
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: '7'
- en: '8'
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: '8'
- en: '9'
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: '9'
- en: '10'
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: '10'
- en: '11'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: '11'
- en: '12'
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: '12'
- en: '13'
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: '13'
- en: '14'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: '14'
- en: '15'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: '15'
- en: '16'
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: '16'
- en: '17'
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: '17'
- en: '18'
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: '18'
- en: '19'
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: '19'
- en: '20'
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: '20'
- en: '21'
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: '21'
- en: '22'
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: '22'
- en: '23'
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: '23'
- en: '24'
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: '24'
- en: '25'
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: '25'
- en: '26'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: '26'
- en: '27'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: '27'
- en: '28'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: '28'
- en: '29'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: '29'
- en: '30'
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: '30'
- en: '31'
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: '31'
- en: '32'
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: '32'
- en: '33'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: '33'
- en: '34'
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: '34'
- en: '35'
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: '35'
- en: '36'
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: '36'
- en: '37'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: '37'
- en: '38'
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: '38'
- en: '39'
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: '39'
- en: '40'
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: '40'
- en: '41'
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: '41'
- en: '42'
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: '42'
- en: '43'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: '43'
- en: '44'
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: '44'
- en: '45'
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: '45'
- en: '46'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: '46'
- en: '47'
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: '47'
- en: '48'
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: '48'
- en: '49'
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: '49'
- en: '50'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: '50'
- en: '51'
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: '51'
- en: '52'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: '52'
- en: '53'
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: '53'
- en: '54'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: '54'
- en: '55'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: '55'
- en: '56'
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: '56'
- en: '57'
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: '57'
- en: '58'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: '58'
- en: '59'
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: '59'
- en: '60'
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: '60'
- en: '61'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: '61'
- en: '62'
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: '62'
- en: '63'
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: '63'
- en: '64'
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: '64'
- en: '65'
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: '65'
- en: '66'
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: '66'
- en: '67'
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: '67'
- en: '68'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: '68'
- en: '69'
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: '69'
- en: '70'
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: '70'
- en: '71'
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: '71'
- en: '72'
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: '72'
- en: '73'
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: '73'
- en: '74'
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: '74'
- en: '75'
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: '75'
- en: '76'
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: '76'
- en: '77'
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: '77'
- en: '78'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: '78'
- en: '79'
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: '79'
- en: '80'
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: '80'
- en: '81'
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: '81'
- en: '82'
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: '82'
- en: '83'
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: '83'
- en: '84'
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: '84'
- en: '85'
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: '85'
- en: '86'
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: '86'
- en: '87'
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: '87'
- en: '[PRE44]'
  id: totrans-1150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: import math
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: import math
- en: 'def exponential_moving_average(iterable, **kwargs):'
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: 'def exponential_moving_average(iterable, **kwargs):'
- en: iterable_size = len(iterable)
  id: totrans-1153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: iterable_size = len(iterable)
- en: alpha = kwargs.get('alpha', 2.0 / (iterable_size + 1))
  id: totrans-1154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: alpha = kwargs.get('alpha', 2.0 / (iterable_size + 1))
- en: numerator = 0
  id: totrans-1155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: numerator = 0
- en: denominator = 0
  id: totrans-1156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: denominator = 0
- en: base_factor = 1 - alpha
  id: totrans-1157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: base_factor = 1 - alpha
- en: 'for i in range(iterable_size):'
  id: totrans-1158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for i in range(iterable_size):'
- en: 'if not i:'
  id: totrans-1159
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if not i:'
- en: numerator = iterable[i]
  id: totrans-1160
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: numerator = iterable[i]
- en: denominator = 1.0
  id: totrans-1161
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: denominator = 1.0
- en: continue
  id: totrans-1162
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: continue
- en: factor = math.pow(base_factor, i)
  id: totrans-1163
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: factor = math.pow(base_factor, i)
- en: numerator += factor * iterable[i]
  id: totrans-1164
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: numerator += factor * iterable[i]
- en: denominator += factor
  id: totrans-1165
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: denominator += factor
- en: return numerator / denominator
  id: totrans-1166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return numerator / denominator
- en: 'def time_series_exponential_moving_average(iterable, **kwargs):'
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: 'def time_series_exponential_moving_average(iterable, **kwargs):'
- en: iterable_size = len(iterable)
  id: totrans-1168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: iterable_size = len(iterable)
- en: alpha = kwargs.get('alpha', 2.0 / (iterable_size + 1))
  id: totrans-1169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: alpha = kwargs.get('alpha', 2.0 / (iterable_size + 1))
- en: numerator = 0
  id: totrans-1170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: numerator = 0
- en: denominator = 0
  id: totrans-1171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: denominator = 0
- en: base_factor = 1.0 - alpha
  id: totrans-1172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: base_factor = 1.0 - alpha
- en: 'for i in range(iterable_size):'
  id: totrans-1173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for i in range(iterable_size):'
- en: date, value = iterable[i]
  id: totrans-1174
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: date, value = iterable[i]
- en: 'if not i:'
  id: totrans-1175
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if not i:'
- en: numerator = value
  id: totrans-1176
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: numerator = value
- en: denominator = 1.0
  id: totrans-1177
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: denominator = 1.0
- en: previous_date = date
  id: totrans-1178
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: previous_date = date
- en: time_difference = 0.0
  id: totrans-1179
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: time_difference = 0.0
- en: continue
  id: totrans-1180
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: continue
- en: time_difference = time_difference + (previous_date - date).days
  id: totrans-1181
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: time_difference = time_difference + (previous_date - date).days
- en: 'if not time_difference:'
  id: totrans-1182
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if not time_difference:'
- en: time_difference = 1.0
  id: totrans-1183
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: time_difference = 1.0
- en: factor = math.pow(base_factor, time_difference)
  id: totrans-1184
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: factor = math.pow(base_factor, time_difference)
- en: numerator += factor * value
  id: totrans-1185
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: numerator += factor * value
- en: denominator += factor
  id: totrans-1186
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: denominator += factor
- en: previous_date = date
  id: totrans-1187
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: previous_date = date
- en: return numerator / denominator
  id: totrans-1188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return numerator / denominator
- en: 'if __name__ == ''__main__'':'
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: 'if __name__ == ''__main__'':'
- en: import time
  id: totrans-1190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: import time
- en: import csv
  id: totrans-1191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: import csv
- en: import datetime
  id: totrans-1192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: import datetime
- en: file_name = 'performances.csv'
  id: totrans-1193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: file_name = 'performances.csv'
- en: 'with open(file_name, ''rb'') as input_file:'
  id: totrans-1194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'with open(file_name, ''rb'') as input_file:'
- en: data = list(csv.DictReader(input_file))
  id: totrans-1195
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: data = list(csv.DictReader(input_file))
- en: athlete_lookup = dict()
  id: totrans-1196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: athlete_lookup = dict()
- en: 'for performance in data:'
  id: totrans-1197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for performance in data:'
- en: entity_id = performance['entity_id']
  id: totrans-1198
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: entity_id = performance['entity_id']
- en: performance['date'] = datetime.datetime.strptime(performance['date'], '%Y-%m-%d')
  id: totrans-1199
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: performance['date'] = datetime.datetime.strptime(performance['date'], '%Y-%m-%d')
- en: performance['value'] = float(performance['value'])
  id: totrans-1200
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: performance['value'] = float(performance['value'])
- en: 'if entity_id not in athlete_lookup:'
  id: totrans-1201
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if entity_id not in athlete_lookup:'
- en: athlete_lookup[entity_id] = dict(entity_id=entity_id, performances=[])
  id: totrans-1202
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: athlete_lookup[entity_id] = dict(entity_id=entity_id, performances=[])
- en: 'if performance[''value'']:'
  id: totrans-1203
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if performance[''value'']:'
- en: athlete_lookup[entity_id]['performances'].append(performance)
  id: totrans-1204
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: athlete_lookup[entity_id]['performances'].append(performance)
- en: athletes = []
  id: totrans-1205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: athletes = []
- en: 'for athlete, performance_data in athlete_lookup.items():'
  id: totrans-1206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for athlete, performance_data in athlete_lookup.items():'
- en: dated_performances = [(performance['date'], performance['value']) for performance
    in performance_data['performances'][::-1]]
  id: totrans-1207
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: dated_performances = [(performance['date'], performance['value']) for performance
    in performance_data['performances'][::-1]]
- en: raw_performances = [performance['value'] for performance in performance_data['performances'][::-1]]
  id: totrans-1208
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: raw_performances = [performance['value'] for performance in performance_data['performances'][::-1]]
- en: performance_count = len(raw_performances)
  id: totrans-1209
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: performance_count = len(raw_performances)
- en: 'if performance_count:'
  id: totrans-1210
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if performance_count:'
- en: average = sum(raw_performances) / performance_count
  id: totrans-1211
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: average = sum(raw_performances) / performance_count
- en: ema = exponential_moving_average(raw_performances, alpha=0.7)
  id: totrans-1212
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ema = exponential_moving_average(raw_performances, alpha=0.7)
- en: tsema = time_series_exponential_moving_average(dated_performances, alpha=0.7)
  id: totrans-1213
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: tsema = time_series_exponential_moving_average(dated_performances, alpha=0.7)
- en: 'else:'
  id: totrans-1214
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: average = ema = tsema = 0
  id: totrans-1215
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: average = ema = tsema = 0
- en: performance_data['average'] = average
  id: totrans-1216
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: performance_data['average'] = average
- en: performance_data['ema'] = ema
  id: totrans-1217
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: performance_data['ema'] = ema
- en: performance_data['tsema'] = tsema
  id: totrans-1218
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: performance_data['tsema'] = tsema
- en: athletes.append(performance_data)
  id: totrans-1219
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: athletes.append(performance_data)
- en: heat_size = 10
  id: totrans-1220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: heat_size = 10
- en: heats = []
  id: totrans-1221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: heats = []
- en: 'athletes = sorted(athletes, key=lambda athlete: athlete[''tsema''])'
  id: totrans-1222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'athletes = sorted(athletes, key=lambda athlete: athlete[''tsema''])'
- en: heat = []
  id: totrans-1223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: heat = []
- en: 'for athlete in athletes:'
  id: totrans-1224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for athlete in athletes:'
- en: heat.append(athlete)
  id: totrans-1225
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: heat.append(athlete)
- en: 'if len(heat) == heat_size or athlete == athletes[-1]:'
  id: totrans-1226
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if len(heat) == heat_size or athlete == athletes[-1]:'
- en: heats.append(heat)
  id: totrans-1227
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: heats.append(heat)
- en: heat = []
  id: totrans-1228
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: heat = []
- en: print heats
  id: totrans-1229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print heats
- en: '[PRE45]*'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE45]*'
