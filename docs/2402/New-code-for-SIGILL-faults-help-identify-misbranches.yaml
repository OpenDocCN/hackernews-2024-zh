- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:04:50'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: New code for SIGILL faults help identify misbranches
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.undeadly.org/cgi?action=article;sid=20240222183703](https://www.undeadly.org/cgi?action=article;sid=20240222183703)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Contributed by [Janne Johansson](http://www.inet6.se) on 2024-02-22 from the
    don't pee on the electric fence dept.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: If you run recent OpenBSD on certain amd64 or aarch64 platforms, indirect branching
    to an "unexpected" location will crash your program, in order to prevent ROP attacks
    and similar ways to have your program execute code where it shouldn't.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: The OpenBSD compiler will insert an extra instruction in all the places where
    a branch is supposed to land, and if it lands anywhere else, a CPU fault is raised
    and your program gets an "Illegal Instruction".
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Previously, crashes of this kind have looked more or less like any other kind
    of fault where code is executing random data or from random locations, but since
    the kernel knows when this has happened, we can make it explicit that the fault
    is due to missing branch target instructions, which will help a lot when debugging.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Link to the commit [here](https://marc.info/?l=openbsd-cvs&m=170853069811439&w=2).
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
