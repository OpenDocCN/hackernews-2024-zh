["```\npublic  void  removeDatabase(String databaseName) {\n try {\n Statement stmt = conn.createStatement();\n stmt.execute(\"DROP DATABASE \"  + databaseName);\n } catch (SQLException  ex) {\n ...\n }\n}\n```", "```\nprivate  void  removeDatabase(String databaseName) {\n try {\n Statement stmt = conn.createStatement();\n stmt.execute(\"DROP DATABASE \"  + databaseName);\n } catch (SQLException  ex) {\n ...\n }\n}\n```", "```\npub  fn  remove_database(conn:  &Connection, database_name:  &str) ->  Result<()> {\n let  mut stmt = conn.prepare(&format!(\"DROP DATABASE {}\", database_name))?;\n stmt.execute([])?;\n Ok(())\n}\n```", "```\npub  fn  remove_database(conn:  &Connection, database_name:  &str) ->  Result<()> {\n...\n}\n```", "```\npublic  class  ConfluenceActionSupport  extends  ActionSupport  implements  LocaleProvider, WebInterface, MessageHolderAware {\n // ...snip...\n public  BootstrapStatusProvider  getBootstrapStatusProvider() {\n if (this.bootstrapStatusProvider ==  null)\n this.bootstrapStatusProvider = BootstrapStatusProviderImpl.getInstance();\n return  this.bootstrapStatusProvider;\n }\n // ...snip...\n}\n```", "```\npublic  class  BootstrapStatusProviderImpl  implements  BootstrapStatusProvider, BootstrapManagerInternal {\n // ...snip...\n public  ApplicationConfiguration  getApplicationConfig() {\n return  this.delegate.getApplicationConfig();\n }\n // ...snip...\n}\n```", "```\npublic  class  ApplicationConfig  implements  ApplicationConfiguration {\n public  synchronized  void  setSetupComplete(boolean  setupComplete) {\n this.setupComplete = setupComplete;\n }\n }\n```"]