- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 13:05:06'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 13:05:06'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: OpenZFS open encryption bugs (public RO) - Google ドライブ
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenZFS开放加密漏洞（公共RO）- Google ドライブ
- en: 来源：[https://docs.google.com/spreadsheets/d/1OfRSXibZ2nIE9DGK6swwBZXgXwdCPKgp4SbPZwTexCg/htmlview](https://docs.google.com/spreadsheets/d/1OfRSXibZ2nIE9DGK6swwBZXgXwdCPKgp4SbPZwTexCg/htmlview)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://docs.google.com/spreadsheets/d/1OfRSXibZ2nIE9DGK6swwBZXgXwdCPKgp4SbPZwTexCg/htmlview](https://docs.google.com/spreadsheets/d/1OfRSXibZ2nIE9DGK6swwBZXgXwdCPKgp4SbPZwTexCg/htmlview)
- en: 'Quick note: this was just a rapid pass over every open bug that looked like
    encryption was involved. It is not intended to be taken as authoritative or completely
    well informed, just a first pass'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 'Quick note: this was just a rapid pass over every open bug that looked like
    encryption was involved. It is not intended to be taken as authoritative or completely
    well informed, just a first pass'
- en: 'Bug #StatusTitleBrief summarySeverityDifficulty'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 'Bug #StatusTitleBrief summarySeverityDifficulty'
- en: Data loss/corruption?
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: Data loss/corruption?
- en: 'Dupe CountDomains touchedFirst ReportedComments[11679](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11679&sa=D&source=editors&ust=1716962701643370&usg=AOvVaw044Ra-17I0VznV4qjeC4PY)OpenZFS
    on Linux null pointer dereferenceThe one I understand best. '
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 'Dupe CountDomains touchedFirst ReportedComments[11679](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11679&sa=D&source=editors&ust=1716962701643370&usg=AOvVaw044Ra-17I0VznV4qjeC4PY)OpenZFS
    on Linux null pointer dereferenceThe one I understand best. '
- en: 'It seems like there''s a refcount bug with dnodes when encrypted buffers are
    around, such that in some unusual case (I suspect it''s at least triggerable with
    some memory fragmentation edge case, based on seeing that happen under heavy mem
    frag on non-x86 platforms), we wind up with a buffer in a header that thinks it
    has refcount 0 but it''s still referenced somewhere, it gets freed and reallocated,
    and then eventually either it gets destroyed by one of the references dropping
    it and then the other tries accessing it and a panic or corruption ensues.5Quite
    hardSometimes6ARC, send|recv0.8.0-rc[mumble][10523](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10523&sa=D&source=editors&ust=1716962701643919&usg=AOvVaw2HOwyi8gnmS1UwWfG025-F)ClosedRaw
    send on encrypted datasets does not work when copying snapshots backsend -w from
    src to dst; '
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 'It seems like there''s a refcount bug with dnodes when encrypted buffers are
    around, such that in some unusual case (I suspect it''s at least triggerable with
    some memory fragmentation edge case, based on seeing that happen under heavy mem
    frag on non-x86 platforms), we wind up with a buffer in a header that thinks it
    has refcount 0 but it''s still referenced somewhere, it gets freed and reallocated,
    and then eventually either it gets destroyed by one of the references dropping
    it and then the other tries accessing it and a panic or corruption ensues.5Quite
    hardSometimes6ARC, send|recv0.8.0-rc[mumble][10523](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10523&sa=D&source=editors&ust=1716962701643919&usg=AOvVaw2HOwyi8gnmS1UwWfG025-F)ClosedRaw
    send on encrypted datasets does not work when copying snapshots backsend -w from
    src to dst; '
- en: 'make changes and new snaps on dst; '
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: make changes and new snaps on dst;
- en: 'try to incrementally recv on src again, src dataset is now unmountable until
    rolled back3?Yes4send|recv???Someone tried patching it once, but found that the
    fix did not account for encryption setups that were never in stable releases,
    so it was backed out.[8758](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/8758&sa=D&source=editors&ust=1716962701644428&usg=AOvVaw2xdAev2akI9Yu5hfygmyT5)Opencannot
    send raw incremental send after creation of snapshot at remote endsend -w src@snap1
    | recv dst;snap dst@newsnap breaks send -w -i src@snap1 src@snap2 until dst@newsnap
    is destroyed2?No1send|recv0.8.0-rc5[11433](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11433&sa=D&source=editors&ust=1716962701644932&usg=AOvVaw1FpHIRCZ_iuJUBtYCzor-A)Openassertion
    failure: '
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: '尝试在源上再增量接收，现在源数据集不可卸载直到回滚3？Yes4send|recv???有人曾试图修补过一次，但发现修补未考虑到从未在稳定版本中发布的加密设置，因此被撤销。[8758](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/8758&sa=D&source=editors&ust=1716962701644428&usg=AOvVaw2xdAev2akI9Yu5hfygmyT5)Opencannot
    send raw incremental send after creation of snapshot at remote endsend -w src@snap1
    | recv dst;snap dst@newsnap breaks send -w -i src@snap1 src@snap2 until dst@newsnap
    is destroyed2?No1send|recv0.8.0-rc5[11433](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11433&sa=D&source=editors&ust=1716962701644932&usg=AOvVaw1FpHIRCZ_iuJUBtYCzor-A)Openassertion
    failure:'
- en: 'bad sa_magic in zpl_get_file_info()Looks like somehow some bad metadata winds
    up in memory or on disk from userobj_accounting - the reporters so far have all
    also been using encryption, unclear if related2????1userobj_accounting2.0.0[8722](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/8722&sa=D&source=editors&ust=1716962701645445&usg=AOvVaw0xPx-N4Xx1GVDYXpdPmCF_)OpenNULL
    dereference receiving (non-raw) to encrypted datasetNULL in zio_crypt_copy_dnode_bonus
    on recv - suspect it''s earliest reported instance of #11679dupeSee [#11679](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11679&sa=D&source=editors&ust=1716962701645701&usg=AOvVaw0G1mWVCwUyxnS--5FiTpIG)dupe0ARC,send|recv0.8.0-rc4[10275](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10275&sa=D&source=editors&ust=1716962701646052&usg=AOvVaw0r2SoibSK3IaD5ns7ZF-i9)OpenCannot
    zfs recv raw incremental encrypted stream after snapshot on destinationDupe of
    #8758dupeSee [#8758](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/8758&sa=D&source=editors&ust=1716962701646298&usg=AOvVaw0PJAml-vTbOn7PIAixrMkY)dupe0send|recv0.8.3[10603](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10603&sa=D&source=editors&ust=1716962701646613&usg=AOvVaw3eD83bigNV1fXOkwH-yxW8)Openudev
    not creating device file for cloned zvolSeems simple. '
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 'zpl_get_file_info() 中的坏 sa_magic。看起来是由于用户对象 accounting 中的一些坏元数据导致的，目前为止报告的报告者都在使用加密，不清楚是否相关2????1userobj_accounting2.0.0[8722](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/8722&sa=D&source=editors&ust=1716962701645445&usg=AOvVaw0xPx-N4Xx1GVDYXpdPmCF_)OpenNULL
    dereference receiving (non-raw) to encrypted datasetNULL in zio_crypt_copy_dnode_bonus
    on recv - suspect it''s earliest reported instance of #11679dupeSee [#11679](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11679&sa=D&source=editors&ust=1716962701645701&usg=AOvVaw0G1mWVCwUyxnS--5FiTpIG)dupe0ARC,send|recv0.8.0-rc4[10275](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10275&sa=D&source=editors&ust=1716962701646052&usg=AOvVaw0r2SoibSK3IaD5ns7ZF-i9)OpenCannot
    zfs recv raw incremental encrypted stream after snapshot on destinationDupe of
    #8758dupeSee [#8758](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/8758&sa=D&source=editors&ust=1716962701646298&usg=AOvVaw0PJAml-vTbOn7PIAixrMkY)dupe0send|recv0.8.3[10603](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10603&sa=D&source=editors&ust=1716962701646613&usg=AOvVaw3eD83bigNV1fXOkwH-yxW8)Openudev
    not creating device file for cloned zvolSeems simple.'
- en: 'May be fixed by #12271 already?2?No0clones0.8.4[10787](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10787&sa=D&source=editors&ust=1716962701647034&usg=AOvVaw27HzoBFZ00W79n21HadkqO)OpenOn
    zfs recv: '
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '可能已经通过 #12271 修复？2？No0clones0.8.4[10787](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10787&sa=D&source=editors&ust=1716962701647034&usg=AOvVaw27HzoBFZ00W79n21HadkqO)OpenOn
    zfs recv：'
- en: 'ASSERT at libzfs_sendrecv.c:2798:recv_fix_encryption_hierarchy()Seems like
    a flaw in send/recv with (non-encrypted datasets, using -w, using -h)? '
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: ASSERT at libzfs_sendrecv.c:2798:recv_fix_encryption_hierarchy()看起来是在使用 -w、-h
    进行 send/recv 时出现的问题？
- en: May no longer be relevant?1Probably lowNo0send|recv (userland)0.8.4[11294](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11294&sa=D&source=editors&ust=1716962701647574&usg=AOvVaw1TJiB1AEDyVIY2n_JyWYa1)ClosedHEAD
    issues mounting encrypted datasets/corrupting metadataThe reason a patch got reverted
    - encrypted dataset with odd combination of configuration never present in a shipped
    release broke a bugfix, so it got reverted and not yet fixed again.?
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可能不再相关了？1Probably lowNo0send|recv (userland)0.8.4[11294](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11294&sa=D&source=editors&ust=1716962701647574&usg=AOvVaw1TJiB1AEDyVIY2n_JyWYa1)ClosedHEAD
    issues mounting encrypted datasets/corrupting metadata因补丁被还原而原因 - 加密数据集与未发行的配置的奇怪组合破坏了错误修复，因此被还原，尚未修复？
- en: Difficult, apparently.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 难度较大，显然。
- en: 'Inaccessible, not lost0git d1d47691c[11405](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11405&sa=D&source=editors&ust=1716962701648091&usg=AOvVaw21GfNV0Pe510DacT6_57Ps)OpenPANIC
    when sending encrypted dataset with the raw flagLike it says on the tin. '
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不可访问，未丢失0git d1d47691c[11405](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11405&sa=D&source=editors&ust=1716962701648091&usg=AOvVaw21GfNV0Pe510DacT6_57Ps)Open发送加密数据集时
    PANIC。
- en: 'Appears to be TrueNAS-specific patch caused0???No02.0.0*Another TrueNAS SCALE
    report.[11490](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11490&sa=D&source=editors&ust=1716962701648587&usg=AOvVaw03lqFxN7deG42kDieGi7AQ)OpenVERIFY(zfs_refcount_count(&dck->dck_holds)
    == 0) failed PANIC at dsl_crypt.c:503:dsl_crypto_key_free()Maybe a missing lock
    that got stepped on during recv? '
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来是 TrueNAS 特定的补丁引起的问题0???No02.0.0*另一个 TrueNAS SCALE 报告。[11490](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11490&sa=D&source=editors&ust=1716962701648587&usg=AOvVaw03lqFxN7deG42kDieGi7AQ)OpenVERIFY(zfs_refcount_count(&dck->dck_holds)
    == 0) 失败，在 dsl_crypt.c:503:dsl_crypto_key_free() 处 PANIC。也许是在接收过程中错过了某个锁？
- en: 'I don''t know this portion of the code.3????0send|recv2.0.0*It''s also on TrueNAS
    SCALE, may or may not be relevant to upstream?[11688](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11688&sa=D&source=editors&ust=1716962701649107&usg=AOvVaw0RktCTcu2IuS8XfkqGrJE7)Openpermanent
    errors (ereport.fs.zfs.authentication) reported after syncoid snapshot/send workload#11679
    with [witticism], I suspect - random corruption in encrypted snapshots sure fits
    the bill, though I can''t be certain until it''s fixed and we see if it still
    happens...dupeSee [#11679](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11679&sa=D&source=editors&ust=1716962701649374&usg=AOvVaw1DTn3Y_DOxHmrkg5KIMlDu)dupe0send|recv2.0.3aerusso
    may have a different opinion than me, but I''d probably suspect many instances
    of mysterious corruption on-disk when encryption (esp. '
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: I don't know this portion of the code.3????0send|recv2.0.0*It's also on TrueNAS
    SCALE, may or may not be relevant to upstream?[11688](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11688&sa=D&source=editors&ust=1716962701649107&usg=AOvVaw0RktCTcu2IuS8XfkqGrJE7)Openpermanent
    errors (ereport.fs.zfs.authentication) reported after syncoid snapshot/send workload#11679
    with [witticism], I suspect - random corruption in encrypted snapshots sure fits
    the bill, though I can't be certain until it's fixed and we see if it still happens...dupeSee
    [#11679](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11679&sa=D&source=editors&ust=1716962701649374&usg=AOvVaw1DTn3Y_DOxHmrkg5KIMlDu)dupe0send|recv2.0.3aerusso
    may have a different opinion than me, but I'd probably suspect many instances
    of mysterious corruption on-disk when encryption (esp.
- en: 'encrypted send/recv) is involved of being #11679 until proven otherwise[11983](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11983&sa=D&source=editors&ust=1716962701649690&usg=AOvVaw3ukUheqU3SpmqQMeaiPzxM)ClosedInput/Output
    Error when sending an encrypted incremental dataset back to it''s source#10523
    with metal paint and a chip on its shoulderdupesee [#10523](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10523&sa=D&source=editors&ust=1716962701649926&usg=AOvVaw3uAh9Nc6EbC3RxYTtb78nE)dupe0send|recv2.0.4[12000](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12000&sa=D&source=editors&ust=1716962701650208&usg=AOvVaw0_RAzeA_kFuFDqtjLTO12I)OpenRepair
    encryption hierarchy of ''send -Rw | recv -d'' datasets that do not bring their
    encryption rootSeems like #10523 in a dollar store wig, possibly; '
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 'encrypted send/recv) 涉及到#11679号问题，除非另有证据，否则[11983](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11983&sa=D&source=editors&ust=1716962701649690&usg=AOvVaw3ukUheqU3SpmqQMeaiPzxM)已关闭的输入/输出错误，当发送加密增量数据集回到它的源#10523使用金属漆和肩膀上的芯片dupesee
    [#10523](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10523&sa=D&source=editors&ust=1716962701649926&usg=AOvVaw3uAh9Nc6EbC3RxYTtb78nE)dupe0send|recv2.0.4[12000](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12000&sa=D&source=editors&ust=1716962701650208&usg=AOvVaw0_RAzeA_kFuFDqtjLTO12I)OpenRepair
    encryption hierarchy of ''send -Rw | recv -d'' datasets that do not bring their
    encryption rootSeems like #10523 in a dollar store wig, possibly; '
- en: 'comes with a reproducer!dupesee [#10523](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10523&sa=D&source=editors&ust=1716962701650403&usg=AOvVaw3Y9aV1S9VMTDTJ2QCkupk_)dupe0send|recv0.8.3[12001](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12001&sa=D&source=editors&ust=1716962701650701&usg=AOvVaw1-ZJug-CBJB7DWOOnNCIEO)OpenZFS
    hangs on kernel error: '
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 'comes with a reproducer!dupesee [#10523](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10523&sa=D&source=editors&ust=1716962701650403&usg=AOvVaw3Y9aV1S9VMTDTJ2QCkupk_)dupe0send|recv0.8.3[12001](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12001&sa=D&source=editors&ust=1716962701650701&usg=AOvVaw1-ZJug-CBJB7DWOOnNCIEO)OpenZFS
    hangs on kernel error: '
- en: 'VERIFY3(0 == dmu_bonus_hold_by_dnodeSame as #12732, probably just #11679dupeSee
    [#11679](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11679&sa=D&source=editors&ust=1716962701650902&usg=AOvVaw0hfWQIMBsPpvLO8_Kb6mLQ)dupe0send|recv2.0.3[12014](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12014&sa=D&source=editors&ust=1716962701651175&usg=AOvVaw1IVDyG-MXXcXn_jJin-ZHb)OpenZFS
    corruption related to snapshots post-2.0.x upgrade#11679 with a bad wigdupeSee
    [#11679](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11679&sa=D&source=editors&ust=1716962701651377&usg=AOvVaw1_WNYkIrzuH4-bd7cf5un-)dupe02.0.3[12123](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12123&sa=D&source=editors&ust=1716962701651725&usg=AOvVaw20SYNPOeLJKzesujI2iOo5)OpenAfter
    replicating the encrypted dataset and perform key inheritance on the target dataset
    (change-key -i), next incremental snapshot will break the dataset \ volume.As
    the name says - changing child key after raw recving a tree of encrypted datasets
    breaks mounting in some conditions - probably the same flavor as 10523 et al5see
    [#10523](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10523&sa=D&source=editors&ust=1716962701652009&usg=AOvVaw3GugpUWXsUaXU8i1OdSjca)Sometimes0send|recv,
    key management2.0.4Higher rating because in this case you may explicitly no longer
    have the older snapshots anywhere any more, while 10523 is explicitly sending
    from the active to a redundant copy[12270](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12270&sa=D&source=editors&ust=1716962701652350&usg=AOvVaw1o0xnrf5YCFzIIBxIODyFg)OpenSPL
    Panic during ZFS ReceiveSame as #12732 which I think are both just #11679 in a
    trenchcoat when you lose the race in a different point in the codedupeSee [#11679](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11679&sa=D&source=editors&ust=1716962701652590&usg=AOvVaw00_t4-QXd0Qz8c1M66qt80)dupe0ARC,
    send|recv2.0.4[12418](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12418&sa=D&source=editors&ust=1716962701652947&usg=AOvVaw3nd0mKZ0RqfeCJjxuQ2jBV)Openzfs
    mount fails silently on encrypted datasetSeems similar in concept to #12614 -
    change-key on a child seems to break mounting parent and child, though at least
    the child can be manually triggered to mount later4???Sometimes0key managementgit
    1b50749ce9 (July 2021)Unclear if the original wrapping key is obliterated or what. '
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: VERIFY3(0 == dmu_bonus_hold_by_dnode与＃12732相同，可能只是＃11679dupe参见＃11679（https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11679&sa=D&source=editors&ust=1716962701650902&usg=AOvVaw0hfWQIMBsPpvLO8_Kb6mLQ）dupe0send|recv2.0.3[12014](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12014&sa=D&source=editors&ust=1716962701651175&usg=AOvVaw1IVDyG-MXXcXn_jJin-ZHb)与快照升级后的
    OpenZFS 损坏相关#11679，带有错误的假发dupe请参阅＃11679（https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11679&sa=D&source=editors&ust=1716962701651377&usg=AOvVaw1_WNYkIrzuH4-bd7cf5un-）dupe02.0.3[12123](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12123&sa=D&source=editors&ust=1716962701651725&usg=AOvVaw20SYNPOeLJKzesujI2iOo5)在复制加密数据集并在目标数据集上执行密钥继承（更改密钥
    -i）之后，下一个增量快照将破坏数据集/卷。顾名思义 - 在原始接收加密数据集的树之后更改子密钥会在某些情况下破坏挂载 - 可能与 10523 等情况相同等＃10523（https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10523&sa=D&source=editors&ust=1716962701652009&usg=AOvVaw3GugpUWXsUaXU8i1OdSjca）有时0send|recv，密钥管理2.0.4更高评级，因为在这种情况下，您可能明确不再具有旧的快照，而
    10523 明确是从活动到冗余副本发送[12270](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12270&sa=D&source=editors&ust=1716962701652350&usg=AOvVaw1o0xnrf5YCFzIIBxIODyFg)在
    ZFS 接收期间发生 SPL 恐慌与＃12732相同，我认为这两者都只是在不同点处于被编码dupe时失败＃11679请参阅＃11679（https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11679&sa=D&source=editors&ust=1716962701652590&usg=AOvVaw00_t4-QXd0Qz8c1M66qt80）dupe0ARC，send|recv2.0.4[12418](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12418&sa=D&source=editors&ust=1716962701652947&usg=AOvVaw3nd0mKZ0RqfeCJjxuQ2jBV)在加密数据集上默默失败的
    ZFS 挂载似乎与＃12614 的概念类似 - 在子级上更改密钥似乎会破坏父级和子级的挂载，尽管至少可以稍后手动触发子级挂载4???有时0密钥管理git 1b50749ce9（2021
    年 7 月）不清楚原始包装密钥是否被消除或其他。
- en: 'Presumably if the wrapping keys involved are =prompt you could just regenerate
    them after writing tools to hackily bypass checks and just rewrite the metadata.[12439](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12439&sa=D&source=editors&ust=1716962701653452&usg=AOvVaw3lnQzY9ltRCvRmxjpGuuul)OpenPANIC
    at dsl_crypt.c:2441:dsl_crypto_populate_key_nvlist()Giving send -w a whole filesystem
    not just a snapshot can make it panic for some datasets, but not always? '
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 假设包装密钥涉及=提示，您可以编写工具绕过检查并重新生成它们，然后重新写入元数据。[12439](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12439&sa=D&source=editors&ust=1716962701653452&usg=AOvVaw3lnQzY9ltRCvRmxjpGuuul)在
    dsl_crypt.c 的 OpenPANIC：2441：dsl_crypto_populate_key_nvlist()在一些数据集上，为整个文件系统发送
    -w，而不仅仅是一个快照，可能会导致崩溃，但并非总是如此？
- en: 'Sample pool which reproduces is enclosed.1???No0send|recv2.0.3Rated 1 because
    it basically only happens if you do something dumb; '
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 包含可以复制的示例池。1???No0send|recv2.0.3Rated 1 because it basically only happens if
    you do something dumb;
- en: 'if someone has a real use case that''s not user error where it does this, I''d
    bump it up.[12594](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12594&sa=D&source=editors&ust=1716962701654010&usg=AOvVaw12EfZ5fV76M39G9HuTt9cO)ClosedSometimes
    raw send on encrypted datasets does not work when copying snapshots back#10523
    with a fake mustache; '
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '如果有真实的使用情况不是用户错误而会出现这种情况，我会将其提升。[12594](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12594&sa=D&source=editors&ust=1716962701654010&usg=AOvVaw12EfZ5fV76M39G9HuTt9cO)ClosedSometimes
    raw send on encrypted datasets does not work when copying snapshots back#10523
    with a fake mustache; '
- en: 'has a reproducer script!dupesee [#10523](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10523&sa=D&source=editors&ust=1716962701654256&usg=AOvVaw1B5YDXAz49L5frbLHbuokJ)dupe0send|recv2.1.1[12614](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12614&sa=D&source=editors&ust=1716962701654582&usg=AOvVaw10SfAOQVcRfmDbUKNiA0HA)OpenReplicating
    encrypted child dataset + change-key + incremental receive overwrites master key
    of replica, causes permission denied on remountzfs send -Rw src/encrypted@1 |
    zfs recv dst/encrypted; '
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: '有一个复制脚本！dupesee [#10523](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/10523&sa=D&source=editors&ust=1716962701654256&usg=AOvVaw1B5YDXAz49L5frbLHbuokJ)dupe0send|recv2.1.1[12614](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12614&sa=D&source=editors&ust=1716962701654582&usg=AOvVaw10SfAOQVcRfmDbUKNiA0HA)OpenReplicating
    encrypted child dataset + change-key + incremental receive overwrites master key
    of replica, causes permission denied on remountzfs send -Rw src/encrypted@1 |
    zfs recv dst/encrypted; '
- en: 'zfs change-key dst/encrypted;zfs send -iw src/encrypted/a@{1,2} | zfs recv
    dst/encrypted/a; '
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 'zfs change-key dst/encrypted;zfs send -iw src/encrypted/a@{1,2} | zfs recv
    dst/encrypted/a; '
- en: 'will overwrite the new wrapping key on disk with the old one, and away goes
    your data next time you unmount and the key is no longer loaded5???Sometimes0send|recv,
    key management2.0.5Attila remarked that he thought you''d need to just block recvs
    in that case, rather than handling it better/just ignoring the received wrapping
    key if it''s been change-key''d in the interim. '
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: '会覆盖磁盘上的新包装密钥，并且下次卸载时，如果密钥未加载5???Sometimes0send|recv，密钥管理2.0.5Attila提到他认为在这种情况下你只需要阻塞接收，而不是更好地处理/如果在中间更改了接收包装密钥，则忽略接收的包装密钥。 '
- en: 'Unclear if that''s a hard restriction for reasons not obvious to me. '
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: '对我来说不明确是否有硬性限制不明显的原因。 '
- en: Unclear to me why encrypted incrementals need to send that at all, ever, much
    less every time...or why the receiver can't just ignore it or handle it by actually
    doing a proper change-key.[12659](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12659&sa=D&source=editors&ust=1716962701655286&usg=AOvVaw1sfa4-bFMjzDjiDed8gjzn)OpenKernel
    panic VERIFY3(sa.sa_magic == SA_MAGIC) faileddupe of 11433dupesee [#11433](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11433&sa=D&source=editors&ust=1716962701655552&usg=AOvVaw0wem6xj6y45KDcwW9SwAyN)dupe0
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说不明确为什么加密的增量需要每次发送，或者为什么接收方不能简单地忽略它或通过实际执行适当的change-key处理它。[12659](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12659&sa=D&source=editors&ust=1716962701655286&usg=AOvVaw1sfa4-bFMjzDjiDed8gjzn)OpenKernel
    panic VERIFY3(sa.sa_magic == SA_MAGIC) faileddupe of 11433dupesee [#11433](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11433&sa=D&source=editors&ust=1716962701655552&usg=AOvVaw0wem6xj6y45KDcwW9SwAyN)dupe0
- en: userobj_accounting, send|recv
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: userobj_accounting, send|recv
- en: '2.0.6[12659](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12659&sa=D&source=editors&ust=1716962701655840&usg=AOvVaw32kiKPkFvXiB-jDy9eLSp2)OpenUnable
    to receive encrypted raw sendreceiver erroring with "must upgrade kernel modules",
    but both sides are 2.0.6, so ???3???No0send|recv2.0.6[12732](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12732&sa=D&source=editors&ust=1716962701656291&usg=AOvVaw2lXrpfZ4pfKDF8Kc2iqNaC)OpenPANIC
    at dmu_recv.c on receiving snapshot to encrypted file system#11679 again, I believedupeSee
    [#11679](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11679&sa=D&source=editors&ust=1716962701656523&usg=AOvVaw3FTP4Xm4KGM0GZmr6T7Ajw)dupe0send|recv2.0.6[12785](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/12785&sa=D&source=editors&ust=1716962701656850&usg=AOvVaw2lCa00J8oWLA_2tpivkmSi)OpenKernel
    panic on incremental send/recv between two encrypted datasets on the same pool,
    dest is using zstd-19#12001 which I suspect may just be #11679dupeSee [#11679](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/11679&sa=D&source=editors&ust=1716962701657172&usg=AOvVaw1Fe8fMLHjQSHhCW9N0QwaM)dupe0send|recv2.0.313067ClosedRaw
    sending to a pool with larger ashift results in unmountable filesystemFamily of
    12762?PR openI think so0send|recv, ashift2.1.2[13038](https://www.google.com/url?q=https://github.com/openzfs/zfs/issues/13038&sa=D&source=editors&ust=1716962701657894&usg=AOvVaw0BKyyF84xqbS8qh5_TSb86)ClosedFreeBSD:
    zfskeys_enable: encryption key not loaded for a file system within a pool that
    imports automatically at startup1???no0git ???13033ClosedCannot zfs receive unencrypted
    dataset as a child of encrypted dataset (''cannot receive new filesystem stream:
    inherited key must be loaded'')1???no012869Openztest fails in l2arc_apply_transforms
    comparing calculated MAC1??????0ztestgit ???9046Closedpanic in abd_verify while
    running zpool_create_crypt_combos testOnce again, it''s just 11679, poor and unfixed.dupeSee
    #11679???013445OpenZFS Receive of encrypted incremental data stream causes a PANICRelative
    of 13067? Unclear if a problem on 2.1.4+1??????0send|recv2.1.213477OpenPANIC at
    zfs_znode.c zfs_znode_sa_init() - Regression in closed issue #10971? Relative
    of 11679, or another SA-related panic????2.1.413491OpenPanic while receiving and
    encrypting datasetYeah no that stack trace is 100% 11679dupeSee #116790send|recv2.1.213521OpenFilesystem
    can not be mounted: Input/output errorMaybe just the change-key bug, maybe #13709,
    who knows30send|recv0.8.3-ubuntumumble13859OpenPermanent errors have been detected
    in the following files with clean scrub and no other errors'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: 'dupesee #13709013709OpenI/O error on mounting encrypt fs after upgradingoh
    it''s just #11294 againdupesee #112942send|recv2.1.314083OpenCannot Decrypt Dataset(s)
    Under v2.1.6 Created Using v2.1.0Appears to have been a macOS-specific bug that
    just resembled 1370910send|recv2.1.613926Openkernel: PANIC <pool> blkptr at <address>
    has invalid CHECKSUM 013922Open[sparc64] Encrypted datasets erroring with "Unable
    to handle kernel NULL pointer dereference errors"13699Openper dataset large_block
    feature detection not reliable when sending raw encrypted large block ds13634OpenCannot
    read, write or delete corrupted directory13561Openzpool_import_errata4 PANICs
    slow sparc64 machine14330OpenAnother encryption bug: "unencrypted block in encrypted
    object set"Seems you can wind up with an embedded_data record on an encrypted
    DS.1'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 'dupesee #13709013709Open升级后挂载加密文件系统时出现I/O错误哦，这只是再次出现了#11294dupesee #112942send|recv2.1.314083Open无法解密使用v2.1.0创建的数据集在v2.1.6下看起来像是一个macOS特定的错误，只是类似于1370910send|recv2.1.613926Openkernel:
    PANIC <pool> blkptr at <address> has invalid CHECKSUM 013922Open[sparc64] 加密数据集出现"无法处理内核空指针解引用错误"13699Open每个数据集的大块功能检测在发送原始加密大块数据集时不可靠13634Open无法读取、写入或删除损坏的目录13561Openzpool_import_errata4
    PANICs slow sparc64 machine14330Open另一个加密bug："在加密对象集中出现未加密块"看起来你可能会在加密数据集上出现一个embedded_data记录。'
- en: ??? Haven't been able to reproduce it...
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: ??? 没能复现它...
- en: no0send|recv2.1.4Easy to reproduce if you patch some conditionals out of the
    code, haven't found a reproducer that doesn't involve that...14245OpenReceiving
    incremental stream causes process to hang
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: no0send|recv2.1.4易于在代码中删除一些条件后重现，没有找到不涉及此条件的重现方法...14245Open增量接收流导致进程挂起
