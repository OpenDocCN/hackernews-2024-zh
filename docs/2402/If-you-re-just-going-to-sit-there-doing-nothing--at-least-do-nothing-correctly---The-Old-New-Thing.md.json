["```\nHRESULT CreateWidget(_Out_ HWIDGET* widget)\n{\n    *widget = nullptr;\n    return S_OK;\n}\n\n// Every widget is documented to have at least one alias,\n// so we have to produce one dummy alias (empty string).\nHRESULT GetWidgetAliases(\n    _Out_writes_to_(capacity, *actual) PWSTR* aliases,\n    UINT capacity,\n    _Out_ UINT* actual)\n{\n    *actual = 0;\n\n    RETURN_HR_IF(\n        HRESULT_FROM_WIN32(ERROR_MORE_DATA),\n        capacity < 1);\n\n    aliases[0] = make_cotaskmem_string_nothrow(L\"\").release();\n    RETURN_IF_NULL_ALLOC(aliases[0]);\n\n    *actual = 1;\n    return S_OK;\n}\n\n// Inert widgets cannot be enabled or disabled.\nHRESULT EnableWidget(HWIDGET widget, BOOL value)\n{\n    return E_HANDLE;\n}\n\nHRESULT Close(HWIDGET widget)\n{\n    RETURN_HR_IF(E_INVALIDARG, widget != nullptr);\n    return S_OK;\n}\n\n```", "```\nHRESULT CreateWidget(_Out_ HWIDGET* widget)\n{\n    *widget = nullptr;\n    return HRESULT_FROM_WIN32(ERROR_CANCELLED);\n}\n\nHRESULT GetWidgetAliases(\n    _Out_writes_to_(capacity, *actual) PWSTR* aliases,\n    UINT capacity,\n    _Out_ UINT* actual)\n{\n    *actual = 0;\n    return E_HANDLE;\n}\n\nHRESULT EnableWidget(HWIDGET widget, BOOL value)\n{\n    return E_HANDLE;\n}\n\nHRESULT Close(HWIDGET widget)\n{\n    return E_HANDLE;\n}\n\n```"]