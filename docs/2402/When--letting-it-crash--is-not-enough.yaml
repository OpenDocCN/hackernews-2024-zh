- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:42:40'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:42:40
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: When "letting it crash" is not enough
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当“让它崩溃”不再足够
- en: 来源：[https://flawless.dev/essays/when-letting-it-crash-is-not-enough/](https://flawless.dev/essays/when-letting-it-crash-is-not-enough/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://flawless.dev/essays/when-letting-it-crash-is-not-enough/](https://flawless.dev/essays/when-letting-it-crash-is-not-enough/)
- en: When "letting it crash" is not enough
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当“让它崩溃”不再足够
- en: When it comes to computer systems, The [Erlang/OTP](https://www.erlang.org)
    programming platform has an interesting approach to failure handling. It's also
    widely known under the name "let it crash". The core idea behind it has to do
    with the fact that modern applications have a huge number of states that they
    can find themselves in. The more complex your application is, the more variables
    you need to keep track of everything. Eventually it becomes impossible for developers
    to predict all combinations of state that these variables will form. Once your
    app gets into an undesirable state, the best thing you can do is to reset it and
    start from a fresh, well known and correct state.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论计算机系统时，[Erlang/OTP](https://www.erlang.org)编程平台对于处理故障有着独特的方法。它也以“让它崩溃”闻名。这背后的核心思想与现代应用程序的多状态有关。你的应用程序越复杂，你需要跟踪的变量就越多。最终，开发者无法预测这些变量组合出现的所有状态。一旦你的应用程序陷入不良状态，最好的做法是重置它，并从一个已知且正确的状态重新开始。
- en: This works amazingly well together with Erlang's property that each process
    has a separate memory space. Allowing us to selectively reset only parts of our
    application, while keeping the system as a whole running. Then we can divide the
    application into a tree-like structure and keep restarting parts of it until we
    reach the root and are forced to restart the whole thing. This concept is also
    known as [supervision trees](https://www.erlang.org/doc/design_principles/des_princ).
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这与Erlang的特性非常契合，即每个进程都有单独的内存空间。这使得我们可以有选择地重置应用程序的部分，同时保持整个系统运行。然后我们可以将应用程序分成类似树状结构，并不断重启其部分，直到达到根部并被迫重启整个系统。这个概念也被称为[监督树](https://www.erlang.org/doc/design_principles/des_princ)。
- en: If you take a closer look at Erlang's approach, this is exactly what a human
    would do. If your phone gets stuck playing a video, you will try restarting the
    app, and if this doesn't fix it, you might end up restarting your phone. Or even
    the router of your home internet connection. You intuitively know that propagating
    the failure through your home will eventually bring all devices into a state that
    resembles the one when you first set everything up and everything was working.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细研究Erlang的方法，这正是人类会做的事情。如果你的手机在播放视频时卡住，你会尝试重启应用程序；如果这行不通，你可能会重启手机，甚至是家里的路由器。你本能地知道，通过你的家庭传播故障最终会将所有设备带入一个类似于你初始设置时一切正常的状态。
- en: Even sometimes Erlang's claims around resilience and fault tolerance are a bit
    **[overblown](https://stackoverflow.com/a/26447543)**, I still think that it's
    a very powerful way to deal with failure. If my web app breaks, the first thing
    I do is to restart the server. In the majority of cases this immediately fixes
    the issue, while I dive deeper into the logs trying to figure out what went wrong.
    Having this automatic restarting capability at every level of abstraction in your
    app, will definitely help you sleep better.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有时Erlang关于弹性和容错性的说法有些**[言过其实](https://stackoverflow.com/a/26447543)**，我仍然认为这是处理故障的一种非常有效的方式。如果我的Web应用程序崩溃，我首先会重启服务器。在大多数情况下，这会立即解决问题，而我会深入日志文件以找出问题的根源。在应用程序的每个抽象层面都具有这种自动重启能力，无疑会让你睡得更安心。
- en: However, resetting the state is almost never enough. In the phone example, once
    the phone starts up again, you still need to get back into the state where you
    stopped. This usually means finding the video again and jumping back to the right
    point on the timeline. We are partially reconstructing the state where we stopped,
    but ignoring all the other state where things might have gone wrong, like our
    home internet connection being broken.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仅仅重置状态几乎从来都不够。以手机为例，一旦手机重新启动，你仍然需要回到停止时的状态。这通常意味着重新找到视频并跳回正确的时间点。我们部分地重建了停止时的状态，但忽略了其他可能出错的所有状态，比如我们家里的互联网连接断开了。
- en: For humans, it's easy to approximately remember where we stopped watching a
    video, but for an application it's impossible to reconstruct the state without
    the developer explicitly keeping track of it. How to snapshot your state, where
    to store it and how often to do it, are very difficult questions. Even with very
    frequent snapshots, with my luck, it would probably fail in between snapshots
    and result in data loss. The only way of having total confidence in such a system
    is if **every** state change is captured.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于人类来说，大致记住我们停止观看视频的位置很容易，但对于应用程序来说，如果没有开发者显式跟踪，重新构建状态是不可能的。如何快照您的状态，存储在哪里以及多频繁执行这些操作，都是非常困难的问题。即使进行非常频繁的快照，也可能在两次快照之间发生故障，导致数据丢失。在这样的系统中完全自信的唯一方式是捕获每个状态变化。
- en: Durable Execution
  id: totrans-split-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持久执行
- en: This brings me to a recent discovery I made, another approach to dealing with
    failure that completely blew my mind 🤯. It's commonly known under the name durable
    execution, and it's an elegant solution to the "keeping track of state changes"
    problem, and perfectly complements Erlang's approach.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我想到了我最近的一个发现，一种完全颠覆了我认知的处理失败的方法 🤯。它通常被称为持久执行，是处理“跟踪状态变化”问题的一个优雅解决方案，并且与 Erlang
    的方法完美结合。
- en: The simplest way of thinking of it is as a database for compute progression.
    It stores the minimal amount of data to be able to reconstruct your application's
    sate at any time. It makes your local variables indestructible, and for many scenarios
    you will not even require a traditional database anymore.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的思考方式是将其视为计算进程的数据库。它存储最小量的数据，以便随时重构应用程序的状态。它使您的局部变量不可毁灭，并且对于许多场景，您甚至不再需要传统的数据库。
- en: Imagine if you could just start an arbitrary computation and the system guarantees
    that it will run until completion and all the operations will be performed **exactly
    once**. Even if your app needs to be restarted in the middle. Or even if you need
    to stop the computation, move it to a different machine and continue. Your running
    code suddenly becomes this tangible thing, that you can look at, move and play
    with.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，如果您可以开始任意计算，并且系统保证它将运行直到完成，并且所有操作将被**精确执行一次**。即使您的应用程序需要在中途重新启动。或者即使您需要停止计算，将其移动到另一台机器并继续。您正在运行的代码突然变成了一种可触及的东西，您可以查看、移动和操作。
- en: Durable execution is more of a general purpose technology that can be used for
    different use cases, like transactions across distributed services, or very long-running
    jobs (months), but the underlying guarantees also make it the ultimate tool to
    create snapshots for picking up where you stopped in case you need to partially
    restart your system.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 持久执行是一种更通用的技术，可以用于不同的用例，比如跨分布式服务的事务，或者非常长时间运行的作业（几个月）。但是底层的保证也使它成为创建快照的终极工具，以便在需要部分重启系统时可以继续之前的进度。
- en: I have been working on my own engine for durable execution called **[flawless](https://flawless.dev)**.
    It implicitly keeps a log of side effects, so that you always can reconstruct
    the latest state and pick up where you left off. It's still in private alpha,
    but I hope to soon open it up and share with everyone.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直在开发名为 **[flawless](https://flawless.dev)** 的持久执行引擎。它隐式地记录副作用的日志，因此您始终可以重构最新状态并继续上次中断的工作。它目前仍处于私人阶段，但我希望很快能向大家开放并分享。
- en: ~ [Bernard](https://twitter.com/bkolobara)
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: ~ [伯纳德](https://twitter.com/bkolobara)
