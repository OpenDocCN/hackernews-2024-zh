["```\n(let ((thread1 (make-thread))  (thread2 (make-thread)) (filename \"file.txt\") result1 result2) ;; Send commands to the threads (thread-send thread1 #'setup-function) (setq result1 (thread-send thread1 #'my-function)) ;; closure captures a copy of the variable (setq result2 (thread-send thread2 (lambda () (delete-file filename)))) ;; run some other code while threads are working (my-other-function) ;; wait for the results to populate (thread-wait result1 result2) ;; return the results in list (list result1 result2)) \n```", "```\n(defvar local nil) (defvar global nil) (make-variable-buffer-local 'local) (setq local '(1 2 3)) (setq global local) \n```", "```\n;; Delete 3 files concurrently (let ((files '(\"file1.txt\" \"file2.txt\" \"file3.txt\")))  (dolist (file files) (go (delete-file file))))   ;; loop through all buffers and insert \"a\" for some reason... (let* ((c (chan)))  (go (loop-chan chan buffer (with-current-buffer buffer (insert \"a\")))) (dolist (buffer (buffer-list)) (chan-put c buffer)))   ;; run a buffer search on another thread and yield the output (let ((queries (chan))  (results (chan))) (go (let* ((message (channel-take queries)) (buffer (car message)) (string (cdr message))) (chan-put results (with-current-buffer buffer (save-excursion (re-search-forward string) (buffer-substring (point) (+ 5 (point)))))))) (chan-put queries (cons other-buffer \"foo\")) (do-something-else) ;; wait till the routine returns (setq my-string (chan-take results))) \n```"]