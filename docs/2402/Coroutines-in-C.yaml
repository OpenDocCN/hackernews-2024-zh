- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: '分类: 未分类'
- en: 'date: 2024-05-29 13:21:59'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-05-29 13:21:59'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Coroutines in C
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C语言中的协程
- en: 来源：[https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html](https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html](https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html)
- en: Coroutines in C
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C语言中的协程
- en: '*by [Simon Tatham](http://pobox.com/~anakin/)*'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*by [Simon Tatham](http://pobox.com/~anakin/)*'
- en: '[Coroutines trilogy: **C preprocessor** | [C++20 native](https://www.chiark.greenend.org.uk/~sgtatham/quasiblog/coroutines-c++20/)
    | [general philosophy](https://www.chiark.greenend.org.uk/~sgtatham/quasiblog/coroutines-philosophy/)
    ]'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[协程三部曲：**C预处理器** | [C++20原生](https://www.chiark.greenend.org.uk/~sgtatham/quasiblog/coroutines-c++20/)
    | [一般哲学](https://www.chiark.greenend.org.uk/~sgtatham/quasiblog/coroutines-philosophy/)
    ]'
- en: '## Introduction'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '## 介绍'
- en: 'Structuring a large program is always a difficult job. One of the particular
    problems that often comes up is this: if you have a piece of code producing data,
    and another piece of code consuming it, which should be the caller and which should
    be the callee?'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个大型程序总是一项困难的工作。经常出现的特定问题之一是：如果你有一段生成数据的代码，和另一段消耗数据的代码，哪一个应该是调用者，哪一个应该是被调用者？
- en: 'Here is a very simple piece of run-length decompression code, and an equally
    simple piece of parser code:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个非常简单的行长解压缩代码片段，以及一个同样简单的解析器代码片段：
- en: '|'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE0]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE1]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Each of these code fragments is very simple, and easy to read and understand.
    One produces a character at a time by calling `emit()`; the other consumes a character
    at a time by calling `getchar()`. If only the calls to `emit()` and the calls
    to `getchar()` could be made to feed data to each other, it would be simple to
    connect the two fragments together so that the output from the decompressor went
    straight to the parser.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码片段都非常简单，易于阅读和理解。一个通过调用 `emit()` 逐个生成字符；另一个通过调用 `getchar()` 逐个消耗字符。如果能让 `emit()`
    的调用和 `getchar()` 的调用相互传递数据，那么连接这两个片段使得解压缩器的输出直接进入解析器就会很简单了。
- en: In many modern operating systems, you could do this using pipes between two
    processes or two threads. `emit()` in the decompressor writes to a pipe, and `getchar()`
    in the parser reads from the other end of the same pipe. Simple and robust, but
    also heavyweight and not portable. Typically you don't want to have to divide
    your program into threads for a task this simple.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多现代操作系统中，你可以使用两个进程或两个线程之间的管道来实现这一点。解压缩器中的 `emit()` 写入一个管道，而解析器中的 `getchar()`
    从同一管道的另一端读取。简单而稳健，但也笨重且不可移植。通常情况下，你不希望为了这么简单的任务而将程序分成线程。
- en: In this article I offer a creative solution to this sort of structure problem.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我提出了一种解决这种结构问题的创造性解决方案。
- en: '## Rewriting'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '## 重写'
- en: The conventional answer is to rewrite one of the ends of the communication channel
    so that it's a function that can be called. Here's an example of what that might
    mean for each of the example fragments.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的答案是重写通信通道的一端，使其成为可以调用的函数。以下是每个示例片段可能意味着什么的示例。
- en: '|'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE2]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE3]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Of course you don't have to rewrite both of them; just one will do. If you rewrite
    the decompressor in the form shown, so that it returns one character every time
    it's called, then the original parser code can replace calls to `getchar()` with
    calls to `decompressor()`, and the program will be happy. Conversely, if you rewrite
    the parser in the form shown, so that it is called once for every input character,
    then the original decompression code can call `parser()` instead of `emit()` with
    no problems. You would only want to rewrite *both* functions as callees if you
    were a glutton for punishment.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当然你不需要重写它们两个都；只需一个即可。如果你按照所示的形式重写解压缩器，使其每次调用时返回一个字符，那么原始的解析器代码可以用调用 `decompressor()`
    代替 `getchar()`，程序就会很顺利。反之，如果按照所示的形式重写解析器，使其每次对每个输入字符调用一次，那么原始的解压缩代码可以毫无问题地调用 `parser()`
    而不是 `emit()`。只有当你喜欢自找苦吃时，你才会想要同时重写 *这两个* 函数作为被调用者。
- en: And that's the point, really. Both these rewritten functions are thoroughly
    ugly compared to their originals. Both of the processes taking place here are
    easier to read when written as a caller, not as a callee. Try to deduce the grammar
    recognised by the parser, or the compressed data format understood by the decompressor,
    just by reading the code, and you will find that both the originals are clear
    and both the rewritten forms are less clear. It would be much nicer if we didn't
    have to turn either piece of code inside out.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 而这确实是重点。这两个重写的函数都与它们的原始版本相比非常丑陋。在这里进行的两个过程在作为调用者而不是被调用者写入时更容易阅读。试图通过阅读代码推断由解析器识别的语法，或者由解压程序理解的压缩数据格式，你会发现原始版本都很清晰，而重写的形式都不太清晰。如果我们不必把任一段代码搞得乱七八糟，那就更好了。
- en: Knuth's coroutines
  id: totrans-split-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克努斯的协程
- en: In The Art of Computer Programming, Donald Knuth presents a solution to this
    sort of problem. His answer is to throw away the stack concept completely. Stop
    thinking of one process as the caller and the other as the callee, and start thinking
    of them as cooperating equals.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在《计算机程序设计艺术》中，唐纳德·克努斯提出了解决这类问题的方法。他的答案是完全放弃堆栈的概念。不要再把一个进程看作是调用者，另一个是被调用者，而是把它们视为协作的平等体。
- en: 'In practical terms: replace the traditional "call" primitive with a slightly
    different one. The new "call" will save the return value somewhere other than
    on the stack, and will then jump to a location specified in another saved return
    value. So each time the decompressor emits another character, it saves its program
    counter and jumps to the last known location within the parser - and each time
    the parser *needs* another character, it saves its own program counter and jumps
    to the location saved by the decompressor. Control shuttles back and forth between
    the two routines exactly as often as necessary.'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际操作中：用一个稍微不同的传统“调用”原语替换传统的“调用”原语。新的“调用”将返回值保存在堆栈之外的某个位置，并且会跳转到另一个保存的返回值指定的位置。因此，每当解压程序发出另一个字符时，它会保存其程序计数器并跳转到解析器内部的最后已知位置
    - 每当解析器需要另一个字符时，它会保存自己的程序计数器并跳转到解压程序保存的位置。控制在这两个例程之间来回穿梭，正好在必要时。
- en: This is very nice in theory, but in practice you can only do it in assembly
    language, because no commonly used high level language supports the coroutine
    call primitive. Languages like C depend utterly on their stack-based structure,
    so whenever control passes from any function to any other, one must be the caller
    and the other must be the callee. So if you want to write portable code, this
    technique is at least as impractical as the Unix pipe solution.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上很好，但实际上你只能在汇编语言中做到这一点，因为没有常用的高级语言支持协程调用原语。像C这样的语言完全依赖于它们基于堆栈的结构，因此当控制从任何函数传递到任何其他函数时，一个必须是调用者，另一个必须是被调用者。所以，如果你想编写可移植的代码，这种技术至少和Unix管道解决方案一样不切实际。
- en: Stack-based coroutines
  id: totrans-split-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于堆栈的协程
- en: So what we would *really* like is the ability to mimic Knuth's coroutine call
    primitive in C. We must accept that in reality, at the C level, one function will
    be caller and the other will be callee. In the caller, we have no problem; we
    code the original algorithm, pretty much exactly as written, and whenever it has
    (or needs) a character it calls the other function.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们*真正*想要的是在C语言中模仿克努斯的协程调用原语的能力。我们必须接受，在C级别上，一个函数将是调用者，另一个函数将是被调用者。在调用者中，我们没有问题；我们编写原始算法，几乎完全按照原样，并且每当它有（或需要）一个字符时，它调用另一个函数。
- en: 'The callee has all the problems. For our callee, we want a function which has
    a "return and continue" operation: return from the function, and next time it
    is called, resume control from just after the *return* statement. For example,
    we would like to be able to write a function that says'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 被调用者面临的所有问题。对于我们的被调用者，我们希望有一个具有“返回并继续”操作的函数：从函数中返回，并在下次调用时从*return*语句后面的位置恢复控制。例如，我们希望能够编写一个这样的函数
- en: '[PRE4]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: and have ten successive calls to the function return the numbers 0 through 9.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 并且有十个连续的调用来返回0到9这些数字。
- en: 'How can we implement this? Well, we can transfer control to an arbitrary point
    in the function using a `goto` statement. So if we use a state variable, we could
    do this:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何实现这个呢？嗯，我们可以使用`goto`语句将控制转移到函数中的任意点。所以，如果我们使用一个状态变量，我们可以这样做：
- en: '[PRE5]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This method works. We have a set of labels at the points where we might need
    to resume control: one at the start, and one just after each `return` statement.
    We have a state variable, preserved between calls to the function, which tells
    us which label we need to resume control at next. Before any return, we update
    the state variable to point at the right label; after any call, we do a `switch`
    on the value of the variable to find out where to jump to.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有效。我们在可能需要恢复控制的点上有一组标签：一个在开始时，另一个在每个 `return` 语句之后。我们有一个状态变量，在函数调用之间保持，告诉我们下一步需要恢复控制的标签。在任何返回之前，我们更新状态变量以指向正确的标签；在任何调用之后，我们根据变量的值进行
    `switch`，以找出要跳转到哪里。
- en: It's still ugly, though. The worst part of it is that the set of labels must
    be maintained manually, and must be consistent between the function body and the
    initial `switch` statement. Every time we add a new return statement, we must
    invent a new label name and add it to the list in the `switch`; every time we
    remove a return statement, we must remove its corresponding label. We've just
    increased our maintenance workload by a factor of two.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管仍然很丑陋。最糟糕的部分是必须手动维护标签集，并且必须在函数体和初始 `switch` 语句之间保持一致。每次添加新的返回语句时，我们必须发明一个新的标签名称并将其添加到
    `switch` 中的列表中；每次删除返回语句时，我们必须删除其对应的标签。我们刚刚将我们的维护工作量增加了两倍。
- en: Duff's device
  id: totrans-split-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 达夫设备
- en: 'The famous "Duff''s device" in C makes use of the fact that a `case` statement
    is still legal within a sub-block of its matching `switch` statement. Tom Duff
    used this for an optimised output loop:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: C 语言中著名的“达夫设备”利用了 `case` 语句仍然可以在其匹配 `switch` 语句的子块中合法的事实。汤姆·达夫将其用于优化的输出循环：
- en: '[PRE6]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can put it to a slightly different use in the coroutine trick. Instead of
    using a `switch` statement to decide which `goto` statement to execute, we can
    use the `switch` statement to perform the jump itself:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在协程技巧中稍作修改。我们可以使用 `switch` 语句执行跳转本身，而不是使用 `switch` 语句决定执行哪个 `goto` 语句：
- en: '[PRE7]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now this is looking promising. All we have to do now is construct a few well
    chosen macros, and we can hide the gory details in something plausible-looking:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来很有希望了。现在我们所要做的就是构建几个精心选择的宏，然后我们可以将令人讨厌的细节隐藏在一个看起来合理的东西中：
- en: '[PRE8]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: (note the use of `do ... while(0)` to ensure that `crReturn` does not need braces
    around it when it comes directly between `if` and `else`)
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: （请注意使用 `do ... while(0)` 来确保 `crReturn` 直接放置在 `if` 和 `else` 之间时不需要加大括号）
- en: This is almost exactly what we wanted. We can use `crReturn` to return from
    the function in such a way that control at the next call resumes just after the
    return. Of course we must obey some ground rules (surround the function body with
    `crBegin` and `crFinish`; declare all local variables `static` if they need to
    be preserved across a `crReturn`; *never* put a `crReturn` within an explicit
    `switch` statement); but those do not limit us very much.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎就是我们想要的。我们可以使用 `crReturn` 以一种方式从函数中返回，以便在下一次调用时控制恢复到返回之后的位置。当然，我们必须遵守一些基本规则（将函数体用
    `crBegin` 和 `crFinish` 包围起来；如果需要跨 `crReturn` 保留所有局部变量，则将它们声明为 `static`；*永远不要*在显式的
    `switch` 语句中放置 `crReturn` ）；但这些并不限制我们太多。
- en: The only snag remaining is the first parameter to `crReturn`. Just as when we
    invented a new label in the previous section we had to avoid it colliding with
    existing label names, now we must ensure all our state parameters to `crReturn`
    are different. The consequences will be fairly benign - the compiler will catch
    it and not let it do horrible things at run time - but we still need to avoid
    doing it.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`crReturn` 的唯一问题是其第一个参数。正如我们在前一节中为新标签命名时要避免与现有标签名称冲突一样，现在我们必须确保所有传递给 `crReturn`
    的状态参数都是不同的。后果将相当温和 - 编译器将捕获并在运行时防止其做出可怕的事情 - 但我们仍然需要避免这样做。'
- en: Even this can be solved. ANSI C provides the special macro name `__LINE__`,
    which expands to the current source line number. So we can rewrite `crReturn`
    as
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 即使这个问题也可以解决。ANSI C 提供了特殊的宏名 `__LINE__`，它展开为当前源代码行号。因此，我们可以将 `crReturn` 重写为
- en: '[PRE9]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: and then we no longer have to worry about those state parameters at all, provided
    we obey a fourth ground rule (never put two `crReturn` statements on the same
    line).
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们再也不必担心那些状态参数了，只要我们遵守第四个基本规则（永远不要在同一行上放置两个 `crReturn` 语句）。
- en: Evaluation
  id: totrans-split-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估
- en: So now we have this monstrosity, let's rewrite our original code fragments using
    it.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了这个怪物，让我们使用它来重新编写我们最初的代码片段。
- en: '|'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE10]'
  id: totrans-split-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE11]'
  id: totrans-split-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'We have rewritten both decompressor and parser as callees, with no need at
    all for the massive restructuring we had to do last time we did this. The structure
    of each function exactly mirrors the structure of its original form. A reader
    can deduce the grammar recognised by the parser, or the compressed data format
    used by the decompressor, far more easily than by reading the obscure state-machine
    code. The control flow is intuitive once you have wrapped your mind around the
    new format: when the decompressor has a character, it passes it back to the caller
    with `crReturn` and waits to be called again when another character is required.
    When the parser needs another character, it returns using `crReturn`, and waits
    to be called again with the new character in the parameter `c`.'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将解压器和解析器都重写为被调用者，这次不需要像上次那样进行大规模的重构。每个函数的结构完全反映了其原始形式的结构。读者可以更轻松地推断出解析器所识别的语法，或解压器使用的压缩数据格式，而不是阅读晦涩的状态机代码。控制流一旦您理解了新格式，就会变得直观：当解压器有一个字符时，它通过`crReturn`将其返回给调用者，并在需要另一个字符时等待再次调用。当解析器需要另一个字符时，它使用`crReturn`返回，并在参数`c`中等待用新字符再次调用。
- en: 'There has been one small structural alteration to the code: `parser()` now
    has its `getchar()` (well, the corresponding `crReturn`) at the end of the loop
    instead of the start, because the first character is already in `c` when the function
    is entered. We could accept this small change in structure, or if we really felt
    strongly about it we could specify that `parser()` required an "initialisation"
    call before you could start feeding it characters.'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 代码结构上有一个小的结构性变化：`parser()`现在在循环结束时有它的`getchar()`（实际上是相应的`crReturn`），因为当进入函数时第一个字符已经在`c`中了。我们可以接受这种结构上的小变化，或者如果我们确实感觉很强烈，我们可以指定`parser()`在开始传递字符之前需要一个“初始化”调用。
- en: As before, of course, we don't have to rewrite both routines using the coroutine
    macros. One will suffice; the other can be its caller.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，和以前一样，我们不必使用协程宏重写两个例程。一个足矣；另一个可以作为其调用者。
- en: 'We have achieved what we set out to achieve: a portable ANSI C means of passing
    data between a producer and a consumer without the need to rewrite one as an explicit
    state machine. We have done this by combining the C preprocessor with a little-used
    feature of the `switch` statement to create an *implicit* state machine.'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经实现了我们的目标：在生产者和消费者之间传递数据的便携式 ANSI C 方法，而不需要将其重写为显式状态机。我们通过将 C 预处理器与 `switch`
    语句的一个不常用特性结合起来创建了一个*隐式*状态机。
- en: Coding Standards
  id: totrans-split-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码标准
- en: Of course, this trick violates every coding standard in the book. Try doing
    this in your company's code and you will probably be subject to a stern telling
    off if not disciplinary action! You have embedded unmatched braces in macros,
    used `case` within sub-blocks, and as for the `crReturn` macro with its terrifyingly
    disruptive contents . . . It's a wonder you haven't been fired on the spot for
    such irresponsible coding practice. You should be ashamed of yourself.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这种技巧违反了书中的所有编码标准。试图在公司的代码中这样做，您可能会受到严厉的警告，甚至是纪律处分！您在宏中嵌入了不匹配的大括号，使用了`case`在子块中，至于具有极具破坏性内容的`crReturn`宏……真是令人惊讶，您居然没有因为如此不负责任的编码实践而当场被解雇。您应该为自己感到羞愧。
- en: I would claim that the coding standards are at fault here. The examples I've
    shown in this article are not very long, not very complicated, and still just
    about comprehensible when rewritten as state machines. But as the functions get
    longer, the degree of rewriting required becomes greater and the loss of clarity
    becomes much, much worse.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我要声明编码标准在这里有问题。我在本文中展示的例子并不长，也不复杂，即便重写为状态机，仍然可以理解。但是随着函数变得越来越长，需要重写的程度变得更大，清晰度的损失也变得更为严重。
- en: Consider. A function built of small blocks of the form
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑。由小块形式构建的函数
- en: '[PRE12]'
  id: totrans-split-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: is not very different, to a reader, from a function built of small blocks of
    the form
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对读者来说，与由小块形式构建的函数并没有太大的不同
- en: '[PRE13]'
  id: totrans-split-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: One is caller and the other is callee, true, but the visual structure of the
    functions are the same, and the insights they provide into their underlying algorithms
    are exactly as small as each other. The same people who would fire you for using
    my coroutine macros would fire you just as loudly for building a function out
    of small blocks connected by `goto` statements! And this time they would be right,
    because laying out a function like that obscures the structure of the algorithm
    horribly.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一个是调用者，另一个是被调用者，没错，但是函数的视觉结构是相同的，它们对底层算法的洞察力也是一样的微小。那些因为使用我的协程宏而解雇你的人，也同样会因为用
    `goto` 语句连接的小块构建函数而解雇你！这一次他们是对的，因为这样布置函数会严重模糊算法的结构。
- en: Coding standards aim for clarity. By hiding vital things like `switch`, `return`
    and `case` statements inside "obfuscating" macros, the coding standards would
    claim you have obscured the syntactic structure of the program, and violated the
    requirement for clarity. But you have done so in the cause of revealing the *algorithmic*
    structure of the program, which is far more likely to be what the reader wants
    to know!
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 编程规范旨在提高代码的清晰度。通过将关键的 `switch`、`return` 和 `case` 语句隐藏在“混淆”的宏定义中，编程规范会认为你已经模糊了程序的语法结构，并且违反了清晰度的要求。但实际上，你这样做是为了揭示程序的
    *算法* 结构，这才是读者真正想要了解的内容！
- en: Any coding standard which insists on syntactic clarity at the expense of algorithmic
    clarity should be rewritten. If your employer fires you for using this trick,
    tell them that repeatedly as the security staff drag you out of the building.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 任何强调语法清晰而损害算法清晰的编码标准都应该重新编写。如果你的雇主因为你使用这一技巧而解雇你，告诉他们，当保安把你拖出大楼时，你可以重复这样说。
- en: Refinements and Code
  id: totrans-split-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修正和代码
- en: In a serious application, this toy coroutine implementation is unlikely to be
    useful, because it relies on `static` variables and so it fails to be re-entrant
    or multi-threadable. Ideally, in a real application, you would want to be able
    to call the same function in several different contexts, and at each call in a
    given context, have control resume just after the last return in the same context.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，这种玩具般的协程实现可能不会很有用，因为它依赖于 `static` 变量，所以不能实现可重入性或多线程性。理想情况下，在真实应用中，你希望能够在几个不同的上下文中调用同一个函数，并且在每个上下文的每次调用中，控制都能从上次返回的地方继续执行。
- en: This is easily enough done. We arrange an extra function parameter, which is
    a pointer to a context structure; we declare all our local state, and our coroutine
    state variable, as elements of that structure.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这很容易实现。我们增加一个额外的函数参数，即指向上下文结构的指针；我们将所有局部状态和协程状态变量声明为该结构的元素。
- en: It's a little bit ugly, because suddenly you have to use `ctx->i` as a loop
    counter where you would previously just have used `i`; virtually all your serious
    variables become elements of the coroutine context structure. But it removes the
    problems with re-entrancy, and still hasn't impacted the *structure* of the routine.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点丑陋，因为突然间你必须使用 `ctx->i` 作为循环计数器，而以前你只需使用 `i`；几乎所有重要的变量都成为协程上下文结构的一部分。但这消除了可重入性的问题，并且仍然没有影响到例程的
    *结构*。
- en: (Of course, if C only had Pascal's `with` statement, we could arrange for the
    macros to make this layer of indirection truly transparent as well. A pity. Still,
    at least C++ users can manage this by having their coroutine be a class member,
    and keeping all its local variables in the class so that the scoping is implicit.)
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: （当然，如果 C 语言有 Pascal 的 `with` 语句，我们可以安排宏使得这层间接性真正透明化。遗憾。不过，至少 C++ 用户可以通过将协程作为类成员来管理所有局部变量，从而使得作用域隐式化。）
- en: Included here is a C header file that implements this coroutine trick as a set
    of pre-defined macros. There are two sets of macros defined in the file, prefixed
    `scr` and `ccr`. The `scr` macros are the simple form of the technique, for when
    you can get away with using `static` variables; the `ccr` macros provide the advanced
    re-entrant form. Full documentation is given in a comment in the header file itself.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此处包含一个实现此协程技巧的 C 头文件，其中定义了两组预定义宏，分别以 `scr` 和 `ccr` 为前缀。`scr` 宏是该技巧的简单形式，适用于可以使用
    `static` 变量的情况；`ccr` 宏则提供高级的可重入形式。完整的文档记录在头文件的注释中。
- en: Note that Visual C++ version 6 doesn't like this coroutine trick, because its
    default debug state (Program Database for Edit and Continue) does something strange
    to the `__LINE__` macro. To compile a coroutine-using program with VC++ 6, you
    must turn off Edit and Continue. (In the project settings, go to the "C/C++" tab,
    category "General", setting "Debug info". Select any option *other* than "Program
    Database for Edit and Continue".)
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Visual C++版本6不喜欢这个协程技巧，因为它的默认调试状态（用于编辑和继续的程序数据库）对`__LINE__`宏做了一些奇怪的事情。要在VC++
    6中编译使用协程的程序，您必须关闭编辑和继续功能。（在项目设置中，转到“C/C++”选项卡，类别“常规”，设置“调试信息”。选择除“程序数据库用于编辑和继续”之外的任何选项。）
- en: (The header file is MIT-licensed, so you can use it in anything you like without
    restriction. If you do find something the MIT licence doesn't permit you to do,
    [mail me](mailto:anakin@pobox.com), and I'll probably give you explicit permission
    to do it anyway.)
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: （头文件采用MIT许可，因此您可以在任何您喜欢的地方使用它，没有限制。如果您发现MIT许可不允许您做某些事情，[给我发邮件](mailto:anakin@pobox.com)，我可能会给您明确的许可。）
- en: '[Follow this link](coroutine.h) for `coroutine.h`.'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 点击此链接获取`coroutine.h`。
- en: Thanks for reading. Share and enjoy!
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢阅读。分享和享受！
- en: References
  id: totrans-split-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '* * *'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*$Id$*'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*$Id$*'
- en: Copyright © 2000 Simon Tatham.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 版权所有 © 2000 Simon Tatham.
- en: This document is [OpenContent](https://www.opencontent.org/).
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 本文为[开放内容](https://www.opencontent.org/)。
- en: You may copy and use the text under the terms of the [OpenContent Licence](https://www.opencontent.org/openpub/).
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照[开放内容许可](https://www.opencontent.org/openpub/)的条款复制和使用这段文字。
- en: Please send comments and criticism to [anakin@pobox.com](mailto:anakin@pobox.com).
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请将评论和批评发送至[anakin@pobox.com](mailto:anakin@pobox.com)。
