- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:58:50'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: wddbfs – Mount a sqlite database as a filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://adamobeng.com/wddbfs-mount-a-sqlite-database-as-a-filesystem/](https://adamobeng.com/wddbfs-mount-a-sqlite-database-as-a-filesystem/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: wddbfs – Mount a sqlite database as a filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '17 Feb 2024 | Categories: hacks'
  prefs: []
  type: TYPE_NORMAL
- en: 'Often when I’m prototyping a project, I hesitate to use a sqlite database despite
    their [many adavantages](https://sqlite.org/appfileformat.html). It seems much
    easier to just dump a bunch of files in a directory and to rely on the universal
    support for the filesystem API to read/delete/update records. Part of this is
    avoiding the overhead of figuring out a relational schema, but an equal amount
    of friction comes from the fact that .sqlite files are just slightly more difficult
    to inspect: the SQL syntax for selecting a few records is much more verbose than
    `head -n` or `tail -n`, there are special commands (which don’t work in some environments/versions)
    for listing tables, and neither my text editor nor my shell has autocompletion
    for database queries.'
  prefs: []
  type: TYPE_NORMAL
- en: To try to get the best of both worlds, I have put together a little utility
    called *wddbfs*, which exposes a sqlite database as a (WebDAV^() filesystem, accessible
    to anything which can work with a filesystem, including terminals, file managers,
    and text editors.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how it works. If you install it with:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install git+https://github.com/adamobeng/wddbfs`'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can mount a database with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Which will be available at localhost:8080 with no username or password required.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve [mounted](https://support.apple.com/guide/mac-help/connect-disconnect-a-webdav-server-mac-mchlp1546/mac)
    this WebDAV filesystem at, for example `/Volumes/127.0.0.1/`, you can see all
    the databases you specified with `--db-path`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By default, all the tables can be read as CSV, TSV, json and line-delimited
    json (“.jsonl”)
  prefs: []
  type: TYPE_NORMAL
- en: 'These files can be manipulated with tools that work with a standard filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Although for now, the whole table gets read into memory for every read so this
    won’t work well for very large database files. There’s also no write support…
    yet.
  prefs: []
  type: TYPE_NORMAL
