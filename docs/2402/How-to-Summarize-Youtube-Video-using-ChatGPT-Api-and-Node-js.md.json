["```\nmkdir youtube-summarizer\ncd youtube-summarizer\nnpm init -y \n```", "```\n`{\n  \"name\": \"youtube-summarizer\",\n  \"version\": \"1.0.0\",` **\"type\": \"module\",** `\"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}`\n```", "```\nyarn add axios\nyarn add he\nyarn add striptags\nyarn add p-queue\nyarn add yargs\n```", "```\ntouch getSubtitleFromVideo.js\n```", "```\nconst getHTML = async (video_id) => {\n  const {data: html} = await axios.get(`https://youtube.com/watch?v=${video_id}`);\n\n  return html\n}\n```", "```\nconst getSubtitle = async (html) => {\n  if (!html.includes('captionTracks')) {\n    throw new Error(`Could not find captions for video`);\n  }\n\n  const regex = /https:\\/\\/www\\.youtube\\.com\\/api\\/timedtext[^\"]+/;\n\n  const [url] = html.match(regex);\n  if (!url) throw new Error(`Could not find captions`);\n\n  const obj = *JSON*.parse(`{\"url\": \"${url}\"}`)\n\n  const subtitle_url = obj.url\n\n  const transcriptResponse = await axios.get(subtitle_url);\n  const transcript = transcriptResponse.data;\n\n  const lines = transcript\n    .replace('<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript>', '')\n    .replace('</transcript>', '')\n    .split('</text>')\n    .filter(line => line && line.trim())\n    .map(line => {\n      const startRegex = /start=\"([\\d.]+)\"/;\n      const durRegex = /dur=\"([\\d.]+)\"/;\n\n      const startMatch = startRegex.exec(line);\n      const durMatch = durRegex.exec(line);\n\n      const start = startMatch[1];\n      const dur = durMatch[1];\n\n      const htmlText = line.replace(/<text.+>/, '').replace(/&amp;/gi, '&').replace(/<\\/?[^>]+(>|$)/g, '');\n      const decodedText = *he*.decode(htmlText);\n      const text = striptags(decodedText);\n\n      return { start, dur, text };\n    });\n\n  return lines;\n}\n```", "```\nimport *axios* from 'axios';\nimport *he* from \"he\";\nimport striptags from \"striptags\";\n\nexport const getSubtitleFromVideo = async (video) => {\n  const video_id = await getVideoId(video)\n  const html = await getHTML(video_id)\n  const subtitle = await getSubtitle(html)\n  return subtitle;\n}\n\nconst getVideoId = async (video) => {\n  // video can be an ID or a link like https://www.youtube.com/watch?v=fOBN8OR8YZA&t=10s\n\n  let video_id;\n  if (video.startsWith('http')) {\n    const url = new *URL*(video);\n    // https://www.youtube.com/watch?v=0chZFIZLR_0\n    // https://youtu.be/0chZFIZLR_0?si=-Gp9e_RKG3g1SdVG\n    video_id = url.searchParams.get('v') || url.pathname.slice(1);\n  } else {\n    video_id = resource;\n  }\n\n  return video_id\n}\n\nconst getHTML = async (video_id) => {\n  const {data: html} = await axios.get(`https://youtube.com/watch?v=${video_id}`);\n\n  return html\n}\n\nconst getSubtitle = async (html) => {\n  if (!html.includes('captionTracks')) {\n    throw new Error(`Could not find captions for video`);\n  }\n\n  const regex = /https:\\/\\/www\\.youtube\\.com\\/api\\/timedtext[^\"]+/;\n\n  const [url] = html.match(regex);\n  if (!url) throw new Error(`Could not find captions`);\n\n  const obj = *JSON*.parse(`{\"url\": \"${url}\"}`)\n\n  const subtitle_url = obj.url\n\n  const transcriptResponse = await axios.get(subtitle_url);\n  const transcript = transcriptResponse.data;\n\n  const lines = transcript\n    .replace('<?xml version=\"1.0\" encoding=\"utf-8\" ?><transcript>', '')\n    .replace('</transcript>', '')\n    .split('</text>')\n    .filter(line => line && line.trim())\n    .map(line => {\n      const startRegex = /start=\"([\\d.]+)\"/;\n      const durRegex = /dur=\"([\\d.]+)\"/;\n\n      const startMatch = startRegex.exec(line);\n      const durMatch = durRegex.exec(line);\n\n      const start = startMatch[1];\n      const dur = durMatch[1];\n\n      const htmlText = line.replace(/<text.+>/, '').replace(/&amp;/gi, '&').replace(/<\\/?[^>]+(>|$)/g, '');\n      const decodedText = *he*.decode(htmlText);\n      const text = striptags(decodedText);\n\n      return { start, dur, text };\n    });\n\n  return lines;\n}\n```", "```\ntouch splitInChunks.js\n```", "```\nconst CHUNK_SIZE = 4000\n\nexport const splitInChunks = (subtitles) => {\n  const chunks = []\n\n  let chunk = ''\n  for (const subtitle of subtitles) {\n    if (chunk.length + subtitle.text.length + 1 <= CHUNK_SIZE) { // +1 for the space\n      chunk += subtitle.text + ' '\n    } else {\n      chunks.push(chunk)\n      chunk = ''\n    }\n  }\n  if (chunk) chunks.push(chunk)\n\n  return chunks\n}\n```", "```\n`touch summarizeChunks.js`\n```", "```\nconst OPEN_AI_API_KEY = ''\nassert(OPEN_AI_API_KEY, 'Please define OPEN_AI_API_KEY, you can create it from https://openai.com/blog/openai-api');\n\nconst _computeSummaryByAI = async ({text, language}) => {\n    const body = {\n      model: \"gpt-3.5-turbo\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a brilliant assistant, and your task is to summarize the provided text in less than 200 words\n            in the language ${*LANGUAGE_CODE_TO_LANGUAGE*[language]}.\n            Ensure that the sentences are connected to form a continuous discourse.`\n        },\n        {\n          role: \"user\",\n          content: text\n        }\n      ],\n      temperature: 1,\n      top_p: 1,\n      frequency_penalty: 0,\n      presence_penalty: 0\n    };\n\n    try {\n      const {data} = await axios.post('https://api.openai.com/v1/chat/completions', body, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${OPEN_AI_API_KEY}`\n        },\n      });\n\n      const summary = data.choices[0].message.content\n      return summary\n    } catch (error) { *console*.error('_computeSummaryByAI', error)\n      throw error\n    }\n  }\n```", "```\nimport PQueue from 'p-queue';\nconst pq = new PQueue({concurrency: 5});\n\nconst computeSummaryByAI = async ({text, language}) => {\n  const summary = await pq.add(() => _computeSummaryByAI({text, language}));\n\n  return summary;\n}\n```", "```\nexport const summarizeChunks = async ({chunks, language}) => {\n  // summarizes the subtitles by making sense of them\n  chunks = await *Promise*.all(chunks.map((chunk) => computeSummaryByAI({text: chunk, language})))\n\n  let summary\n\n  if (chunks.length > 1) {\n    summary = await recursiveSummaryByChunks({chunks, language})\n  } else {\n    summary = chunks[0]\n  }\n\n  return summary\n}\n```", "```\nconst recursiveSummaryByChunks = async ({chunks, language}) => {\n  if (chunks.length <= 5) {\n    return computeSummaryByAI({text: chunks.join(' '), language});\n  }\n\n  const groups_chunks = chunkArray(chunks, 5)\n  const groups_chunks_summary = await *Promise*.all(groups_chunks.map((group_chunk) => computeSummaryByAI({\n    text: group_chunk.join(' '),\n    language\n  })))\n\n  const result = await recursiveSummaryByChunks({chunks: groups_chunks_summary, language});\n\n  return result;\n}\n\nconst chunkArray = (array, size) => {\n  const chunks = []\n  for (let i = 0; i < array.length; i += size) {\n    const chunk = array.slice(i, i + size);\n    chunks.push(chunk)\n  }\n\n  return chunks\n}\n```", "```\nyarn cli --video=\"https://www.youtube.com/watch?v=3l2wh5K_WLI\" --language en\n```", "```\nyarn install\n```"]