- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:49:40'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:49:40
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The ever-growing problem of ever-growing codebases • The Register
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不断增长的代码库问题 • The Register
- en: 来源：[https://www.theregister.com/2024/02/12/drowning_in_code/](https://www.theregister.com/2024/02/12/drowning_in_code/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.theregister.com/2024/02/12/drowning_in_code/](https://www.theregister.com/2024/02/12/drowning_in_code/)
- en: FOSDEM 2024 The computer industry faces a number of serious problems, some imposed
    by physics, some by legacy technology, and some by inertia. There may be solutions
    to some of these, but they're going to hurt.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: FOSDEM 2024 计算机行业面临着一系列严重问题，一些由物理学所强加，一些由传统技术，一些由惯性造成。可能会有解决方案，但它们将会痛苦。
- en: In a previous role, the *Reg* FOSS desk gave three talks at the FOSDEM open
    source conference in Brussels. In 2023, I proposed one for FOSDEM 2024 under the
    banner of the *Reg*, so some of the points hearken back to earlier articles.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的职务中，*Reg* 自由开源软件办公桌在布鲁塞尔的 FOSDEM 开源大会上发表了三次演讲。2023年，我为 FOSDEM 2024 提议了一个，以
    *Reg* 的名义，因此部分观点与早期文章相关。
- en: Unfortunately, since submitting the proposal in October something sad happened,
    even if it was inevitable. A giant of twentieth century software design, [Niklaus
    Wirth died](https://www.theregister.com/2024/01/04/niklaus_wirth_obituary/). As
    a small tribute, I decided to change the way I introduced my [FOSDEM 2024 talk](https://fosdem.org/2024/schedule/event/fosdem-2024-3095-one-way-forward-finding-a-path-to-what-comes-after-unix/),
    which I gave at the start of this month.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，自从十月份提交提案以来，发生了一些令人悲伤的事情，即使这是不可避免的。二十世纪软件设计巨匠，[尼古劳斯·维尔斯去世了](https://www.theregister.com/2024/01/04/niklaus_wirth_obituary/)。作为一个小小的致敬，我决定改变我介绍我在本月初的
    [FOSDEM 2024 演讲](https://fosdem.org/2024/schedule/event/fosdem-2024-3095-one-way-forward-finding-a-path-to-what-comes-after-unix/)
    的方式。
- en: 'Wirth is famous for one thing, but arguably, it wasn''t the biggest aspect
    of his career. To pick a superficially small but pervasive example: the computers
    Unix was written on used teletypes as their terminals. These were, very roughly,
    printers with a typewriter keyboard on them. Teletypes are why Linux console device
    files are called `tty`.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 维尔斯因某件事而著名，但可以说，这并不是他职业生涯中最重要的方面。以一个表面上小而普遍的例子来说：Unix 计算机上使用电传打字机作为终端。这些粗略地说是带有打字机键盘的打印机。电传打字机是为什么
    Linux 控制台设备文件被称为 `tty` 的原因。
- en: 'Typewriters have a shift key, and often not much else. But computer keyboards
    have lots of modifier keys: *Control* and *Alternate* (or "Option" or "Meta")
    and *Super* (or "Command" or "Windows"). The bits in memory which represent if
    one of these are pressed down are called *Bucky bits*… Because Niklaus Wirth studied
    in, and taught in, and loved, California, and his nickname there was "Bucky".'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 打字机只有一个换挡键，通常没有其他。但是计算机键盘有很多修改键：*Control* 和 *Alternate*（或 "Option" 或 "Meta"）和
    *Super*（或 "Command" 或 "Windows"）。内存中表示这些键是否被按下的位被称为 *Bucky bits*… 因为尼古劳斯·维尔斯在加利福尼亚州学习、教学和热爱，他在那里的绰号是
    "Bucky"。
- en: 'Bucky Wirth didn''t just invent Pascal. Pascal grew out of a proposal to improve
    Algol. The Algol committee turned it down and picked someone else''s, more complicated,
    idea instead. That became Algol 68 and killed the language forever. As a result,
    we got other languages that were the indirect offspring of Algol: which took Algol''s
    ideas and changed them. Languages such as BCPL, which was turned into B, which
    became C – and C++ and everything built from them.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: Bucky Wirth 不仅仅发明了 Pascal。Pascal 是为改进 Algol 提出的一个提案。Algol 委员会拒绝了它，选择了另一个更复杂的想法。这就成为了
    Algol 68，并永远地毁掉了那门语言。因此，我们得到了其他语言，它们间接地继承了 Algol 的思想：如 BCPL，它演变成了 B，然后成为了 C –
    以及从它们衍生出的一切。
- en: 'All because the Algol guys didn''t like Bucky Wirth''s simple, clean, proposal.
    Wirth went on to create Pascal. This was a big hit. A large part of the Apple
    Lisa operating system was implemented in Pascal, and that went on to [profoundly
    influence the Mac](https://www.theregister.com/2024/01/29/mac_at_40_real_significance/).
    A Unix was implemented in a Pascal dialect, too. It was called [TUNIS: the Toronto
    University System](https://archive.org/details/concurrenteuclid00holt), and it
    was written in a Pascal derivative called Concurrent Euclid.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 仅因为 Algol 的人不喜欢 Bucky Wirth 的简洁提案。维尔斯继续创造了 Pascal。这是一个巨大的成功。Apple Lisa 操作系统的大部分是用
    Pascal 实现的，这对 [Mac 产生了深远影响](https://www.theregister.com/2024/01/29/mac_at_40_real_significance/)。Unix
    也用 Pascal 方言实现了，称为 [TUNIS：多伦多大学系统](https://archive.org/details/concurrenteuclid00holt)，它是用一种叫做
    Concurrent Euclid 的 Pascal 衍生语言编写的。
- en: Pascal became Turbo Pascal which became [Borland Delphi](https://www.theregister.com/2020/02/14/25_years_delphi_programming/)
    and drove the success of Microsoft Windows 3\. Delphi was, for a while, huge.
    But Wirth ignored all that and went on to write a successor, called Modula. Then
    he threw that away and wrote a successor with built-in concurrency called Modula-2.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: Pascal变成了Turbo Pascal，然后变成了 [Borland Delphi](https://www.theregister.com/2020/02/14/25_years_delphi_programming/)，推动了微软Windows
    3的成功。Delphi曾经一度很受欢迎。但维尔斯忽视了这一切，继续写了个继任者，叫做Modula。然后他放弃了那个，又写了一个带有内置并发性的后继者，叫Modula-2。
- en: Late in Wirth's career, he became a passionate advocate of small software. He
    wrote a wonderful short article about this. It's called [A Plea For Lean Software](https://cr.yp.to/bib/1995/wirth.pdf)
    [PDF], and it's only a few pages long. Read it. It's worth it. It won't take long.
    As a proof of concept of the validity of the concept, Wirth moved on from Modula-2
    and wrote his masterpiece, [Project Oberon](http://www.projectoberon.net/). Oberon
    is a tiny Pascal-like language, with concurrency primitives. But it's also a compiler
    for the language, and an IDE for it. That IDE is also a tiling-window based OS
    in its own right. For the obituary I wrote for Prof. Wirth, I downloaded the source
    code of the core of Project Oberon and ran a line count. It comes out a bit over
    4000 lines. Specifically, some 4,623 lines of code, in 262kB of text.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: Wirth的职业晚期，他成了小型软件的热情拥护者。他写了一篇精彩的短文。它叫做[A Plea For Lean Software](https://cr.yp.to/bib/1995/wirth.pdf)
    [PDF]，只有几页长。读一读。它绝对值得。不会花费很长时间。作为概念有效性的证明，Wirth离开了Modula-2，写了他的杰作，[Project Oberon](http://www.projectoberon.net/)。Oberon是一种微型的类Pascal语言，带有并发原语。但它也是该语言的编译器，以及该语言的IDE。该IDE本身也是一种瓦片窗口操作系统。为了我给维尔斯教授写的讣告，我下载了Project
    Oberon核心的源代码并计算了行数。总共有4000多行代码。具体来说，有4623行代码，占用262kB的文本。
- en: That's a self-hosting bare-metal OS. It is *unbelievably* tiny.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个自举裸机操作系统。*难以置信*的微小。
- en: Debian 12, for comparison, is 1,341,564,204 lines of code. That's the [project's
    own estimate](https://micronews.debian.org/2023/1686455026.html). One and a third
    *billion*, that is, one and a third *thousand million* lines of code. For comparison,
    Google Chrome is about 40 million lines, which is in the same ballpark as the
    Linux kernel these days.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，Debian 12有1,341,564,204行代码。这是[项目自己的估计](https://micronews.debian.org/2023/1686455026.html)。十三亿四千万行代码。与之相比，Google
    Chrome大约有4000万行代码，这与如今的Linux内核大致相同。
- en: '*Nobody* can read the source code of Chrome. Not alone, not as a team. Humans
    don''t live long enough. Any group that claims to have gone through the code and
    de-Googlized it is lying: all that''s possible to do is some searches, and try
    to measure what traffic it emits. A thousand people working for a decade couldn''t
    read the entire thing.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*没有人*能阅读Chrome的源代码。单独也不行，团队也不行。人类活不到那么久。任何声称已经读过该代码并且去Google化了的团体都在说谎：所有可能做的就是一些搜索，然后尝试测量其发出的流量。一千人工作了十年也读不完整个代码。'
- en: This is the sort of size of codebase that we are building the internet from
    these days.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们建立互联网的代码库规模。现在。
- en: These projects are so incomprehensibly vast that no human mind can comprehend
    even one small isolated subset of the entire thing.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些项目如此庞大，以至于没有人类心智可以理解其整体的一个小而孤立的子集。
- en: We consider this normal. Everything is like that. It's just how it is. Computers
    are big, storage is cheap, interconnects are fast, and it works and it scales
    and it is all pretty amazing compared to the systems I started working with.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为这很正常。一切都是这样的。就是这样。计算机很大，存储便宜，互连快速，一切都很运行和扩展，与我开始工作的系统相比，这些都相当惊人。
- en: A hobby of mine is trying to clearly define some of what I call the Big Lies
    in computing. In 2022 I wrote that [you can't buy software](https://www.theregister.com/2022/10/04/you_cannot_buy_software/).
    That means *you*, the reader, can't. Cash-rich multinational corporations absolutely
    can buy software, and they often do. But mere users can't. All *we* get are licenses
    that say we own the right to use one copy, or if you own a business, so many copies…
    and anyway, you don't get the source code, or any kind of guarantee.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我的一个爱好是试图清晰地定义我所说的计算中的大谎言之一。在2022年，我写道 [你不能买软件](https://www.theregister.com/2022/10/04/you_cannot_buy_software/)。这意味着*你*，读者，不能买。富裕的跨国公司绝对可以购买软件，他们经常这样做。但普通用户不能。我们得到的只是声明，说我们拥有使用一份副本的权利，或者如果你拥有一家企业，那么有多少份副本……反正，你得不到源代码，也得不到任何形式的担保。
- en: That, of course, is why Free Software has done so well. If only big companies
    really own software then the only remaining choice is software that nobody owns
    and nobody controls and that's built and maintained by its community of users.
    That's why FOSDEM exists.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这就是为什么自由软件如此成功的原因。如果只有大公司真正拥有软件，那么剩下的选择只有没有人拥有、没有人控制、由其用户社区构建和维护的软件。这就是为什么有FOSDEM的存在。
- en: 'So, let''s move on to another big lie:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们转向另一个大谎言：
- en: Computers aren't much faster now than they were a decade ago, and they will
    probably never again return to the rate of performance improvement they had for
    60 years up to the mid-noughties.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机现在比十年前快得不多，它们可能再也不会像在上世纪六十年间那样以惊人的速度提升性能了。
- en: Moore's Law is over, [replaced by Koomey's law](https://www.theregister.com/2023/01/11/software_versus_hardware/).
    Now, computers use less electricity, emit less heat, and they continue to get
    smaller and cheaper… but they're not getting massively faster the way that they
    did in the 20th century. Many *Reg* readers will remember the Pentium 4, Intel's
    space-heater chip launched in 2000, and which the company planned to ramp up to
    10 gigaHertz by 2005.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 摩尔定律已经结束，[由库米定律取代](https://www.theregister.com/2023/01/11/software_versus_hardware/)。现在，计算机消耗的电力更少，散热更少，它们继续变得更小更便宜……但它们不再像20世纪那样大幅提速。许多*Reg*读者还记得2000年推出的英特尔空间加热芯片Pentium
    4，该公司计划到2005年将其提升到10千兆赫。
- en: It didn't happen. We got the smaller, cooler-running Pentium M instead, which
    evolved into the Core, Core 2 and then Core i-thingy ranges today. And thanks
    to AMD, they are 64-bit now. What we got instead of much faster processor cores
    are *more* processor cores.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这并没有发生。我们得到了更小、运行更凉快的Pentium M，它逐渐演变成了今天的Core、Core 2和Core i系列。多亏了AMD，它们现在是64位的了。我们得到的不是更快的处理器核心，而是*更多*的处理器核心。
- en: The thing is, that doesn't scale very well. On the desktop we have four-core
    machines and now we're moving to eight-plus cores, but a single person can't use
    that very helpfully, so instead, we're getting computers with a mixture of high-performance
    but hot, power-hungry cores, and lower-performance, cooler, but more electrically-efficient
    cores.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，这种扩展并不很好。在桌面上，我们有四核机器，现在我们正在向八核及以上转变，但一个人无法很有用地使用那些核心，所以我们现在得到的是一些具有高性能但发热大、耗电多的核心，以及性能较低但更省电的核心。
- en: As Sophie Wilson, [co-creator of the Arm chip](https://www.theregister.com/2012/05/02/unsung_heroes_of_tech_arm_creators_sophie_wilson_and_steve_furber/),
    observed, the silicon chip industry is very good at finding ways of selling more
    and more products to us that we can't use because they *must* spend ever-increasing
    amounts of time turned off and not doing anything – or the device will incinerate
    itself.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[Arm芯片的共同创始人Sophie Wilson](https://www.theregister.com/2012/05/02/unsung_heroes_of_tech_arm_creators_sophie_wilson_and_steve_furber/)所观察的，硅芯片行业非常擅长找到卖给我们更多产品的方法，但我们又用不上，因为它们*必须*花费越来越多的时间处于关闭状态，不能做任何事情，否则设备就会自焚。
- en: 'Server chips have lots more cores, of course, because servers can use that
    better, but that has a ceiling too. Look it up: [it''s called Amdahl''s law](https://en.wikipedia.org/wiki/Amdahl%27s_law),
    after the [late great Gene Amdahl](https://www.theregister.com/2015/11/13/gene_amdahl_obit/),
    and it''s quite scary. Even if a program can be made 95 per cent parallel, the
    maximum speedup you can get is about 20 times, **no matter how many processor
    cores you throw at it.**'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，服务器芯片有更多的核心，因为服务器可以更好地利用它，但这也有个上限。查一下：[这就是阿姆达尔定律](https://zh.wikipedia.org/wiki/%E9%98%BF%E5%A7%86%E8%BE%BE%E5%B0%94%E5%AE%9A%E5%BE%8B)，以故去的[大师级人物吉恩·阿姆达尔](https://www.theregister.com/2015/11/13/gene_amdahl_obit/)命名，它相当可怕。即使一个程序可以达到95%的并行化，你能得到的最大加速也只能达到大约20倍，**不管你用多少处理器核心来运行它**。
- en: Once we started to get multi-core processors, Moore's Law meant that the transistor
    budget was spent on getting wider, not faster. Now we are getting built-in dedicated
    silicon for rendering 3D graphics, often disabled in favour of more powerful off-chip
    rendering silicon. Silicon for matrix arithmetic. Hardware dedicated to accelerating
    certain cryptography algorithms. Silicon for modelling neural networks for so-called
    "AI" features. ("AI" is another big lie, but one I won't go into here.)
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们开始使用多核处理器，摩尔定律意味着晶体管预算用于加宽，而不是加快速度。现在我们正在获得用于渲染3D图形的内置专用硅片，通常为了更强大的离片渲染硅而被禁用。用于矩阵运算的硅片。专用于加速某些密码算法的硅片。用于建模所谓“AI”功能的神经网络的硅片。（“AI”是另一个大谎言，但我不会在这里深入讨论。）
- en: 'These CPU components aren''t the only bits that are getting faster: computers''
    other subsystems are improving, too. Memory is getting faster. Solid state storage
    is getting faster, although [as I wrote last year](https://www.theregister.com/2022/08/01/optane_intel_cancellation/),
    the most exciting kind of non-volatile memory – a bold attempt to bypass a whole
    pile of legacy bottlenecks and move non-volatile storage right onto the CPU memory
    bus – flopped. It was killed by legacy software designs.'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些CPU组件并不是唯一变得更快的部分：计算机的其他子系统也在改进。内存速度越来越快。固态存储速度也在提升，尽管[正如我去年所写的](https://www.theregister.com/2022/08/01/optane_intel_cancellation/)，最激动人心的非易失性存储——试图绕过一大堆遗留瓶颈，将非易失性存储直接移到CPU内存总线上的大胆尝试——失败了。它被传统软件设计所淘汰。
- en: All this stuff helps certain specific functions, but it doesn't make your general
    programs go faster.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些东西有助于特定的特定功能，但并不能使您的一般程序运行得更快。
- en: In the mid-1990s, for one of the UK's leading computer magazines, I ported their
    in-house benchmark suite from 16-bit Windows to 32-bit Windows. I do know a *little*
    about benchmarking. Benchmark vendors now include tasks like video compression
    in their tests, even though most computer users never do that, just because the
    benchmark-sellers need some way to test the performance of multi-core chips. Multicore
    processors *do* manage to execute some stuff faster, and benchmarks need to show
    that.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在1990年代中期，我为英国一家主要的计算机杂志之一，将他们内部的基准测试套件从16位Windows移植到32位Windows。我对基准测试有所了解。现在的基准测试供应商甚至在其测试中包括视频压缩等任务，尽管大多数计算机用户从不这样做，只是因为基准测试销售商需要一种方式来测试多核芯片的性能。多核处理器确实可以更快地执行某些任务，而基准测试需要展示这一点。
- en: These performance numbers aren't lies, exactly… but they are no longer relevant
    to ordinary desktop or laptop computing. Nor, mostly, are they relevant to server
    computing either.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些性能数字并不完全是谎言……但它们对于普通台式机或笔记本计算并不再相关。大多数情况下，它们也不适用于服务器计算。
- en: So, yes, computers are still getting a little bit quicker every year and a half…
    but the thing is that up until about twenty years ago, they doubled in speed that
    often. Now it's a mere ten or 15 per cent. Unfortunately, our worldwide computing
    industry evolved to fit a market where microprocessors just kept getting faster,
    which they did, consistently, for about thirty years.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，是的，计算机每一年半确实还在变得稍微快一点……但问题在于，直到大约二十年前，它们的速度翻倍频繁发生。现在只增长了区区十到15%。不幸的是，我们全球的计算机行业已经演变成适应微处理器一直在变快的市场，它们确实如此，在大约三十年时间里一直如此。
- en: This industry is, by nature, unable to adapt to a world where that no longer
    happens – and never will again. The result is spiralling software bloat. [Even
    the IEEE says so](https://spectrum.ieee.org/lean-software-development). The industry
    is profitable because most of this software is in unsafe programming languages,
    or marginally safer ones that are *implemented* in unsafe languages… resulting
    in a teetering stack of dozens of layers of flakey unreliable code, which in turn
    needs thousands and millions of people constantly patching the holes in it, and
    needs customers to pay to get those fixes fast, and keep paying for them for years
    to come.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个行业的本质决定了它无法适应不再发生这种情况的世界——而且永远也不会再发生。其结果是软件的膨胀。[甚至IEEE也这么说](https://spectrum.ieee.org/lean-software-development)。该行业之所以盈利，是因为大多数软件使用的是不安全的编程语言，或者在边缘安全的语言中*实现*了不安全的语言……导致一个不稳定、不可靠的代码层叠，需要成千上万的人不断填补漏洞，并需要客户迅速支付和多年持续付费以获取这些修复。
- en: The world runs on software, produced and consumed on an industrial scale, always
    getting bigger and more complicated.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个世界依赖于软件，以工业规模生产和消费，且越来越庞大和复杂。
- en: Nobody understands it any more. Nobody can. It's too big. But it's the only
    model of making and selling software we have, so we are trapped in it.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 没有人再能理解它。没有人可以。它太大了。但这是我们制造和销售软件的唯一模式，所以我们被困在其中。
- en: And, because computers aren't getting much quicker, as it gets bigger, software
    is getting slower. That's why we're not seeing big exciting new features, new
    capabilities and tools.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，因为计算机的速度并没有显著提升，随着硬件变得更大，软件变得更慢。这就是为什么我们没有看到令人振奋的新功能、新能力和新工具。
- en: Thanks to Koomey's Law, as we reach a quarter of the way through the 21st century,
    even pocket devices can throw around high-definition video streams. Thanks to
    vast server farms, they can understand speech and natural language… kinda sorta.
    But they can struggle to recognize our faces, and cannot read expressions or tone
    of voice. We can't mix speech with other UIs, and it's been so long since we standardized
    UI design that [we've forgotten how to do it](https://www.theregister.com/2024/01/24/rise_and_fall_of_cua/).
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于库米定律的作用，在21世纪初的四分之一，即使是口袋设备也能处理高清视频流。多亏了庞大的服务器农场，它们能理解语音和自然语言……勉强可以。但它们可能难以识别我们的面孔，也无法读懂表情或语调。我们无法将语音与其他用户界面混合，而且自从我们标准化用户界面设计以来已经很久了，[我们已经忘记了如何做到](https://www.theregister.com/2024/01/24/rise_and_fall_of_cua/)。
- en: As a result, we have some big problems in this industry, and we are not confronting
    them. Software is vast, and vastly complicated, and nobody can adequately understand
    it all.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在这个行业中面临一些重大问题，但我们并没有面对它们。软件是庞大的，极其复杂的，没有人能充分理解它。
- en: It is too big to usefully change, or optimise. All we can do is nibble around
    the edges, removing bits here, making other bits a bit faster. It's almost fractal,
    so there are a near infinite number of edges to nibble at… but it's still getting
    bigger, so the problems are getting harder all the time.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它太大了，无法有效地更改或优化。我们所能做的只是在边缘咬一口，这里去掉一点，那里加快一点。它几乎是分形的，所以有无数条边缘可以咬……但它还在变大，所以问题一直在变得更加困难。
- en: This also means we can't *check* the whole thing. It's too big. All we can do
    is have a lot of people watching it for when it goes wrong, try to trace what
    happened, and fix that symptom.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着我们无法*检查*整个东西。它太大了。我们所能做的就是让很多人关注它何时出错，尝试追踪发生了什么，并修复这个症状。
- en: Computers are getting more parallel. But, as far as anyone knows, it is simply
    impossible to automatically take algorithms and parallelise them. Only a human
    mind can do that, and yes, usually, it is *a* mind, in the singular.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机正在变得更加并行。但据所有人所知，自动将算法并行化几乎是不可能的。只有人类的头脑能做到这一点，而且通常情况下，是*一个*头脑，单数。
- en: That means that only chunks that can fit into one mind can be refactored like
    this.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着只有适合一个头脑的那些块才能像这样重构。
- en: This level of bloat is a crisis that Wirth foresaw when it was one per cent
    of today, when Windows 95 [fit onto 13 floppies](https://devblogs.microsoft.com/oldnewthing/20050819-10/?p=34513),
    and what he pleaded with the industry to consider and address.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当今的这种膨胀程度正是维尔特在今天的一倍时所预见到的危机，当时 Windows 95 [仅用了 13 张软盘](https://devblogs.microsoft.com/oldnewthing/20050819-10/?p=34513)，他恳请整个行业考虑和解决这个问题。
- en: There is an urgent need for smaller, simpler software. When something is too
    big to understand, then you can't take it apart and make something smaller out
    of it.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当今软件行业迫切需要更小、更简单的软件。当某物体太大以至于无法理解时，你无法将其拆分并制作出更小的东西。
- en: You can trim it a bit, but to make profound changes, you have to go back to
    the planning stage, reconsider what you need, throw away what you don't, and try
    to make some minimum viable product that does the essentials and nothing else.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以稍微修剪一下，但要进行深刻的改变，你必须回到规划阶段，重新考虑你需要什么，扔掉你不需要的东西，并尝试做出一些最小可行产品，只做必要的事情，什么都不多做。
- en: This is the existential crisis facing the software industry today, and it has
    no good answers. But there may be some out there, which is what we will look at
    next.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是当今软件行业面临的存在危机，却没有一个良好的答案。但可能还有一些解决方案存在，这是我们将要探讨的内容。
- en: Bootnote
  id: totrans-split-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引子
- en: 'This article is extracted from part of the author''s talk at FOSDEM 2024 in
    Brussels, which was titled [One way forward: finding a path to what comes after
    Unix](https://fosdem.org/2024/schedule/event/fosdem-2024-3095-one-way-forward-finding-a-path-to-what-comes-after-unix/).
    The other parts will follow soon, and will be [collected here](https://www.theregister.com/Tag/One%20Way%20Forward).
    ®'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章摘自作者在布鲁塞尔 FOSDEM 2024 的演讲中的一部分，主题是[一种前进方式：寻找Unix之后的路径](https://fosdem.org/2024/schedule/event/fosdem-2024-3095-one-way-forward-finding-a-path-to-what-comes-after-unix/)。其他部分即将推出，并将在[这里收集](https://www.theregister.com/Tag/One%20Way%20Forward)。®
