- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 13:26:13'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Announcing bpftop: Streamlining eBPF performance optimization | by Netflix
    Technology Blog | Netflix TechBlog'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://netflixtechblog.com/announcing-bpftop-streamlining-ebpf-performance-optimization-6a727c1ae2e5?gi=223d75ac1771](https://netflixtechblog.com/announcing-bpftop-streamlining-ebpf-performance-optimization-6a727c1ae2e5?gi=223d75ac1771)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Announcing bpftop: Streamlining eBPF performance optimization'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*By* [*Jose Fernandez*](https://www.linkedin.com/in/josefernandezmn/)'
  prefs: []
  type: TYPE_NORMAL
- en: Today, we are thrilled to announce the release of [bpftop](https://github.com/Netflix/bpftop),
    a command-line tool designed to streamline the performance optimization and monitoring
    of eBPF programs. As Netflix increasingly adopts eBPF [[1](/extending-vector-with-ebpf-to-inspect-host-and-container-performance-5da3af4c584b),
    [2](/how-netflix-uses-ebpf-flow-logs-at-scale-for-network-insight-e3ea997dca96)],
    applying the same rigor to these applications as we do to other managed services
    is imperative. Striking a balance between eBPF’s benefits and system load is crucial,
    ensuring it enhances rather than hinders our operational efficiency. This tool
    enables Netflix to embrace eBPF’s potential.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing bpftop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: bpftop provides a dynamic real-time view of running eBPF programs. It displays
    the average execution runtime, events per second, and estimated total CPU % for
    each program. This tool minimizes overhead by enabling performance statistics
    only while it is active.
  prefs: []
  type: TYPE_NORMAL
- en: bpftop simplifies the performance optimization process for eBPF programs by
    enabling an efficient cycle of benchmarking, code refinement, and immediate feedback.
    Without bpftop, optimization efforts would require manual calculations, adding
    unnecessary complexity to the process. With bpftop, users can quickly establish
    a baseline, implement improvements, and verify enhancements, streamlining the
    process.
  prefs: []
  type: TYPE_NORMAL
- en: A standout feature of this tool is its ability to display the statistics in
    time series graphs. This approach can uncover patterns and trends that could be
    missed otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: bpftop uses the [BPF_ENABLE_STATS](https://elixir.bootlin.com/linux/v6.6.16/source/include/uapi/linux/bpf.h#L792)
    syscall command to enable global eBPF runtime statistics gathering, which is disabled
    by default to reduce performance overhead. It collects these statistics every
    second, calculating the average runtime, events per second, and estimated CPU
    utilization for each eBPF program within that sample period. This information
    is displayed in a top-like tabular format or a time series graph over a 10s moving
    window. Once bpftop terminates, it turns off the statistics-gathering function.
    The tool is written in Rust, leveraging the [libbpf-rs](https://github.com/libbpf/libbpf-rs)
    and [ratatui](https://github.com/ratatui-org/ratatui) crates.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visit the project’s [GitHub page](https://github.com/Netflix/bpftop) to learn
    more about using the tool. We’ve open-sourced bpftop under the Apache 2 license
    and look forward to contributions from the community.
  prefs: []
  type: TYPE_NORMAL
