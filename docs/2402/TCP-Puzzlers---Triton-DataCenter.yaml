- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:04:14'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:04:14
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: TCP Puzzlers | Triton DataCenter
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TCP 谜题 | Triton DataCenter
- en: 来源：[https://www.tritondatacenter.com/blog/tcp-puzzlers](https://www.tritondatacenter.com/blog/tcp-puzzlers)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.tritondatacenter.com/blog/tcp-puzzlers](https://www.tritondatacenter.com/blog/tcp-puzzlers)
- en: It's been said that we don't really understand a system until we understand
    how it fails. Despite having written a (toy) TCP implementation in college and
    then working for several years in industry, I'm continuing to learn more deeply
    how TCP works — and how it fails. What's been most surprising is how basic some
    of these failures are. They're not at all obscure. I'm presenting them here as
    puzzlers, in the fashion of [Car Talk](http://www.cartalk.com/content/puzzlers)
    and the [old Java puzzlers](https://www.youtube.com/watch?v=wbp-3BJWsU8). Like
    the best of those puzzlers, these are questions that are very simple to articulate,
    but the solutions are often surprising. And rather than focusing on arcane details,
    they hopefully elucidate some deep principles about how TCP works.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经有人说过，我们真正理解一个系统是在理解它如何失败时。尽管在大学时编写了一个（玩具级的）TCP 实现，并在行业中工作了几年，我仍在深入学习 TCP 如何工作
    —— 以及它如何失败。最令人惊讶的是，一些这些故障是多么基础。我将它们呈现为谜题，以 [Car Talk](http://www.cartalk.com/content/puzzlers)
    和旧的 [Java 谜题](https://www.youtube.com/watch?v=wbp-3BJWsU8) 的风格。像这些谜题中最好的一样，这些问题非常简单明了，但解决方案往往令人惊讶。与其专注于神秘的细节，它们希望能阐明
    TCP 如何运作的一些深刻原则。
- en: Prerequisites
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'These puzzlers assume some basic knowledge about working with TCP on Unix-like
    systems, but you don''t have to have mastered any of this before diving in. As
    a refresher:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些谜题假设您对在类 Unix 系统上使用 TCP 有一些基本的了解，但您在深入学习之前无需掌握这些知识。作为复习：
- en: TCP states, the three-way handshake used to establish a connection, and the
    way connections are terminated are described pretty concisely on the [TCP Wikipedia
    page](https://en.wikipedia.org/wiki/Transmission_Control_Protocol#Protocol_operation).
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP 状态、用于建立连接的三次握手，以及连接终止的方式在 [TCP 维基百科页面](https://zh.wikipedia.org/wiki/%E6%94%B6%E9%9B%86%E5%9C%A8%E5%82%B3%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE%E4%B8%8A%E7%9A%84%E7%8A%B6%E6%80%81)
    上有相当简洁的描述。
- en: Programs typically interact with sockets using `read`, `write`, `connect`, `bind`,
    `listen`, and `accept`. There's also `send` and `recv`, but for our purposes,
    these work the same way as `read` and `write`.
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序通常使用 `read`、`write`、`connect`、`bind`、`listen` 和 `accept` 与套接字交互。还有 `send`
    和 `recv`，但对于我们的目的，它们与 `read` 和 `write` 的工作方式相同。
- en: 'I''ll be talking about programs that use `poll`. Although most systems use
    something more efficient like `kqueue`, event ports, or `epoll`, these are all
    equivalent for our purposes. As for applications that use blocking operations
    instead of any of these mechanisms: once you understand how TCP failure modes
    affect poll, it''s pretty easy to understand how it affects blocking operations
    as well.'
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我将讨论使用 `poll` 的程序。虽然大多数系统使用像 `kqueue`、事件端口或 `epoll` 这样更高效的东西，但在我们的目的上，它们是等效的。至于使用阻塞操作而不是任何这些机制的应用程序：一旦您了解了
    TCP 失败模式如何影响 `poll`，理解它如何影响阻塞操作也是非常容易的。
- en: You can try all of these examples yourself. I used two virtual machines running
    under VMware Fusion. The results match my experiences in our production systems.
    I'm testing using the `nc(1)` tool on SmartOS, and I don't believe any of the
    behavior shown here is OS-specific. I'm using the illumos-specific [truss(1)](http://illumos.org/man/truss)
    tool to trace system calls and to get some coarse timing information. You may
    be able to get similar information using [dtruss(1m)](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/dtruss.1m.html)
    on OS X or [strace(1)](http://linux.die.net/man/1/strace) on GNU/Linux.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以自行尝试所有这些示例。我使用了两台在 VMware Fusion 下运行的虚拟机。结果与我们生产系统中的经验相符。我在 SmartOS 上使用 `nc(1)`
    工具进行测试，并且我认为这里展示的行为不依赖于操作系统。我正在使用 illumos 特有的 [truss(1)](http://illumos.org/man/truss)
    工具来跟踪系统调用并获取一些粗略的时间信息。您可以尝试在 OS X 上使用 [dtruss(1m)](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/dtruss.1m.html)，或者在
    GNU/Linux 上使用 [strace(1)](http://linux.die.net/man/1/strace) 来获取类似的信息。
- en: '`nc(1)` is a pretty simple tool. We''ll use it in two modes:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`nc(1)` 是一个相当简单的工具。我们将以两种模式使用它：'
- en: As a server. In this mode, `nc` will set up a listening socket, call `accept`,
    and block until a connection is received.
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为服务器。在这种模式下，`nc` 将设置一个监听套接字，调用 `accept`，并阻塞直到接收到一个连接。
- en: As a client. In this mode, `nc` will create a socket and establish a connection
    to a remote server.
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为客户端。在这种模式下，`nc` 将创建一个套接字并与远程服务器建立连接。
- en: In both modes, once connected, each side uses `poll` to wait for either stdin
    or the connected socket to have data ready to be read. Incoming data is printed
    to the terminal. Data you type into the terminal is sent over the socket. Upon
    CTRL-C, the socket is closed and the process exits.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在两种模式下，一旦连接，每一方都使用 `poll` 等待 stdin 或已连接的套接字准备好读取数据。接收的数据打印到终端。您在终端输入的数据发送到套接字。按下
    CTRL-C，关闭套接字并退出进程。
- en: In these examples, my client is called `kang` and my server is called `kodos`.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，我的客户端称为 `kang`，服务器称为 `kodos`。
- en: 'Warmup: Normal TCP teardown'
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 热身：正常的 TCP 断开连接
- en: 'This one demonstrates a very basic case just to get the ball rolling. Suppose
    we set up a server on `kodos`:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例演示了一个非常基本的情况，只是为了开个头。假设我们在 `kodos` 上设置了一个服务器：
- en: Server
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器
- en: '[PRE0]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: (Remember, in these examples, I'm using `truss` to print out the system calls
    that `nc` makes. The `-d` flag prints a relative timestamp and the `-t` flag selects
    which system calls we want to see.)
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: （请记住，在这些示例中，我使用 `truss` 打印出 `nc` 进行的系统调用。`-d` 标志打印相对时间戳，`-t` 标志选择我们想要看到的系统调用。）
- en: 'Now on `kang`, I establish a connection:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 `kang` 上，我建立一个连接：
- en: Client
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE1]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Over on kodos, we see:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 kodos 上，我们看到：
- en: Server
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器
- en: '[PRE2]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'At this point, the TCP connections are in state ESTABLISHED and both processes
    are in `poll`. We can see this using the `netstat` tool on each system:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，TCP 连接处于 ESTABLISHED 状态，并且两个进程都在 `poll`。我们可以使用每个系统上的 `netstat` 工具查看：
- en: Server
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器
- en: '[PRE3]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Client
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE4]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The question is, **when we shut down one of these processes, what happens in
    the other process?** Does it find out? How? Try to predict the specific syscall
    behavior and explain why each system call does what it does.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，**当我们关闭其中一个进程时，另一个进程会发生什么？** 它会发现吗？如何发现？尝试预测特定的系统调用行为，并解释每个系统调用为什么会这样做。
- en: 'Let''s try it. I''ll CTRL-C the server on kodos:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试。我将 CTRL-C 服务器在 kodos 上：
- en: Server
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器
- en: '[PRE5]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here''s what we see on `kang`:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在 `kang` 上看到的内容：
- en: Client
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE6]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'What happened here? Let''s be specific:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？让我们具体说明：
- en: We sent SIGINT to the server, causing the process to exit. Upon exit, file descriptors
    are closed.
  id: totrans-split-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们向服务器发送了 SIGINT 信号，导致进程退出。退出时关闭文件描述符。
- en: When the last file descriptor for an `ESTABLISHED` socket is closed, the TCP
    stack on kodos sends a FIN over the connection and enters the `FIN_WAIT_1` state.
  id: totrans-split-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当关闭一个 `ESTABLISHED` 套接字的最后一个文件描述符时，kodos 上的 TCP 栈通过连接发送 FIN，并进入 `FIN_WAIT_1`
    状态。
- en: The TCP stack on kang receives the FIN packet, transitions its own connection
    to `CLOSE_WAIT`, and sends an ACK back. Since the `nc` client is blocked on this
    socket being ready to read, the kernel wakes this thread with the event `POLLIN`.
  id: totrans-split-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: kang 上的 TCP 栈接收到 FIN 数据包，将自己的连接转换为 `CLOSE_WAIT`，并发送 ACK 回去。由于 `nc` 客户端在准备读取此套接字时被阻塞，内核使用
    `POLLIN` 事件唤醒此线程。
- en: The `nc` client sees `POLLIN` for the socket and calls `read`, which returns
    0 immediately. This indicates end-of-stream. `nc` presumes that we're done with
    this socket and closes it.
  id: totrans-split-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`nc` 客户端在套接字上看到 `POLLIN`，调用 `read`，立即返回 0。这表示流结束。`nc` 假定我们已完成对该套接字的使用并关闭它。'
- en: Meanwhile, the TCP stack on kodos receives the ACK and enters `FIN_WAIT_2`.
  id: totrans-split-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与此同时，kodos 上的 TCP 栈接收到 ACK 并进入 `FIN_WAIT_2` 状态。
- en: Since the `nc` client on kang closed its socket, the TCP stack on kang sent
    a FIN to `kodos`. The connection on kang enters `LAST_ACK`.
  id: totrans-split-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于 kang 上的 `nc` 客户端关闭了它的套接字，kang 上的 TCP 栈发送 FIN 到 kodos。连接在 kang 上进入 `LAST_ACK`
    状态。
- en: The TCP stack on kodos receives the FIN, the connection enters `TIME_WAIT`,
    and the stack on kodos acknowledges the FIN.
  id: totrans-split-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: kodos 上的 TCP 栈接收到 FIN，连接进入 `TIME_WAIT` 状态，并且 kodos 上的栈确认了 FIN。
- en: The TCP stack on kang receives the ACK for the FIN and removes the connection
    entirely.
  id: totrans-split-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: kang 上的 TCP 栈接收到 FIN 的 ACK，并完全移除该连接。
- en: Two minutes later, the TCP connection on kodos is closed and the stack removes
    the connection entirely.
  id: totrans-split-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两分钟后，kodos 上的 TCP 连接关闭，栈完全移除该连接。
- en: (It's possible for steps to be slightly reordered and for kang to transition
    through `CLOSING` instead of `FIN_WAIT_2`.)
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: （步骤可能会稍微重新排序，并且 kang 可能会通过 `CLOSING` 而不是 `FIN_WAIT_2` 进行转换。）
- en: 'Here''s the final state according to netstat:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 netstat，这是最终的状态：
- en: Server
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器
- en: '[PRE7]'
  id: totrans-split-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There's no output for this connection at all on kang.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 kang 上对于此连接根本没有输出。
- en: The intermediate states transition very quickly, but you could see them using
    the [DTrace TCP provider](http://dtracebook.com/index.php/Network_Lower_Level_Protocols:tcpstate.d).
    You can see the packet flow using [snoop(1m)](http://illumos.org/man/snoop) or
    [tcpdump(1)](http://www.tcpdump.org/tcpdump_man.html).
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 中间状态转换非常快，但您可以使用[DTrace TCP提供程序](http://dtracebook.com/index.php/Network_Lower_Level_Protocols:tcpstate.d)来查看它们。您可以使用[snoop(1m)](http://illumos.org/man/snoop)或[tcpdump(1)](http://www.tcpdump.org/tcpdump_man.html)来查看数据包流量。
- en: '**Conclusions:** We''ve seen the normal path of system calls for connection
    establishment and teardown. Note that kang immediately found out when kodos''s
    connection was closed — it was woken up out of `poll` and `read` returned 0 to
    indicate end-of-stream. At that point, kang *elected* to close its socket, which
    cleaned up the connection state on kodos. We''ll revisit this later to see how
    the results can differ if kang doesn''t close its socket here.'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**结论：** 我们已经看到了连接建立和关闭的系统调用的正常路径。请注意，当kodos的连接关闭时，kang立即发现了这一点——它从`poll`中醒来，并且`read`返回0表示流的结束。此时，kang
    *选择* 关闭它的套接字，从而清理了kodos上的连接状态。稍后我们会重新讨论这个问题，看看如果kang在这里不关闭它的套接字，结果会如何不同。'
- en: 'Puzzler 1: Power cycling'
  id: totrans-split-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谜题1：电源循环
- en: '**What happens to an established, idle TCP connection if one system is power
    cycled?**'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果一个系统被电源循环，已建立但空闲的TCP连接会发生什么？**'
- en: Since most processes go through normal exit as part of a graceful reboot (e.g.,
    if you use the "reboot" command), you get basically the same result if you type
    "reboot" on kodos instead of killing the server with CTRL-C. But what would happen
    if we'd power-cycled kodos in the previous example? Surely kang will eventually
    find out, right?
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数进程在优雅重启时都会通过正常退出（例如，如果使用"reboot"命令），因此如果您在kodos上键入"reboot"而不是用CTRL-C杀死服务器，您基本上会得到相同的结果。但是，如果我们在前面的例子中对kodos进行了电源循环，会发生什么？毫无疑问，kang最终会发现，对吧？
- en: 'Let''s try it. Set up the connection:'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试。建立连接：
- en: Server
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器
- en: '[PRE8]'
  id: totrans-split-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Client
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE9]'
  id: totrans-split-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now I'll use VMware's "reboot" function to power-cycle the system. It's important
    that this be an actual power cycle (or OS panic) — anything that causes a graceful
    shut down will look more like the first case above.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我将使用VMware的"reboot"功能来对系统进行电源循环。重要的是这必须是一个真正的电源循环（或者操作系统崩溃）——任何导致优雅关闭的操作看起来更像上面的第一种情况。
- en: '20 minutes later, kang is still sitting in the same place:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 20分钟后，kang仍然坐在原地：
- en: Client
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE10]'
  id: totrans-split-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We tend to believe that TCP''s job is to maintain a consistent abstraction
    (namely, the TCP connection) across multiple systems, so it''s surprising to discover
    cases where the abstraction is broken like this. And lest you think this is some
    nc(1) issue, it''s not. "netstat" on kodos shows no connection to kang, but kang
    shows a perfectly healthy connection to kodos:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们倾向于认为TCP的工作是在多个系统之间维护一致的抽象（即TCP连接），所以发现这种抽象被打破的情况让人感到惊讶。而且，如果你认为这是nc(1)的问题，那就错了。在kodos上的"netstat"显示没有连接到kang，但kang显示与kodos之间有一个完全健康的连接：
- en: Client
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE11]'
  id: totrans-split-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We can leave this forever without touching it and kang will *never* figure out
    that kodos rebooted.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以永远不碰它，kang *永远* 不会发现kodos已经重启。
- en: '**Now, suppose at this point, kang tries to send data to kodos. What happens?**'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**现在，假设此时kang试图向kodos发送数据。会发生什么？**'
- en: 'Let''s try it:'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试：
- en: Client
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE12]'
  id: totrans-split-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When I type the message and hit enter, kodos gets woken up, reads the message
    from stdin, and sends it over the socket. *The `write` call completes successfully!*
    `nc` goes back to poll to wait for another event, eventually finds out that the
    socket can be read without blocking, and then calls `read`. This time, `read`
    fails with `ECONNRESET`. What does this mean? [POSIX''s definition of read(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/read.html)
    says that this means:'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我键入消息并按回车键时，kodos被唤醒，从标准输入读取消息，并通过套接字发送它。*`write`调用成功完成!* `nc`回到`poll`等待另一个事件，最终发现可以无阻塞地读取套接字，然后调用`read`。这次，`read`失败，返回`ECONNRESET`。这意味着什么？[POSIX关于read(2)的定义](http://pubs.opengroup.org/onlinepubs/009695399/functions/read.html)说这意味着：
- en: '[PRE13]'
  id: totrans-split-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The [illumos read(2) man page](http://illumos.org/man/read.2) provides a little
    more context:'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[illumos read(2) man page](http://illumos.org/man/read.2)提供了更多的上下文：'
- en: '[PRE14]'
  id: totrans-split-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This error doesn't mean that something specific to the `read` call went wrong,
    but rather that the socket itself is disconnected. Most other socket operations
    would fail the same way at that point.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误不是指`read`调用本身出错，而是套接字本身已经断开。此时大多数其他套接字操作也会以同样的方式失败。
- en: So what happened here? At the point when the `nc` on kang tried to send data,
    the TCP stack still didn't know the connection was dead. kang sent a data packet
    over to kodos, which responded with an RST because it didn't know anything about
    the connection. kang saw the RST and tore down its connection. It cannot close
    the socket file descriptor — that's not how file descriptors work — but subsequent
    operations fail with ECONNRESET until nc does close the fd.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这里发生了什么？在 kang 上的 `nc` 尝试发送数据时，TCP 栈仍然不知道连接已中断。kang 发送了一个数据包到 kodos，后者因为对连接一无所知而回应了
    RST。kang 看到了这个 RST 并关闭了它的连接。它不能关闭套接字文件描述符 —— 因为文件描述符不是这样工作的 —— 但是在 `nc` 关闭文件描述符之前，后续操作会因
    ECONNRESET 而失败。
- en: '**Conclusions:**'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**结论：**'
- en: A hard power-cycle is very different than a graceful shutdown. When testing
    distributed systems, this case needs to be specifically tested. You can't just
    kill a process and expect it to test the same thing.
  id: totrans-split-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 强制断电和优雅关闭非常不同。在测试分布式系统时，这种情况需要专门测试。不能简单地终止一个进程并期望它测试相同的事情。
- en: '**There are situations when one side believes a TCP connection is established,
    but the other side does not, and where this situation will never be automatically
    resolved.** It''s possible to manage this problem using TCP or application-level
    keep-alive.'
  id: totrans-split-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**存在一些情况，其中一方认为 TCP 连接已建立，但另一方并未这样认为，并且这种情况永远不会自动解决。** 可以通过 TCP 或应用级别的保活来解决这个问题。'
- en: 'The only reason that kang eventually found out that the remote side had disappeared
    was that it took action: it sent data and received a response indicating the connection
    was gone.'
  id: totrans-split-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: kang 最终发现远程端消失的唯一原因是它采取了行动：发送数据并接收到响应，指示连接已断开。
- en: 'That raises the question: what if kodos had not responded to the data message
    for some reason?'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这引发了一个问题：如果 kodos 由于某种原因没有响应数据消息会发生什么？
- en: 'Puzzler 2: Power off'
  id: totrans-split-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谜题 2：关闭电源
- en: '**What happens if one endpoint of a TCP connection is powered off for a while?**
    Does the other endpoint ever discover this? If so, how? And when?'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果 TCP 连接的一个端点长时间关闭电源会发生什么？** 另一个端点是否会发现？如果会，如何发现？何时发现？'
- en: 'Once again, I''ll set up the connection with `nc`:'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我会用 `nc` 建立连接：
- en: Server
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器
- en: '[PRE15]'
  id: totrans-split-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Client
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE16]'
  id: totrans-split-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, I''ll cut power to kodos abruptly and attempt to send data from kang:'
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我会突然切断 kodos 的电源，并尝试从 kang 发送数据：
- en: Client
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE17]'
  id: totrans-split-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `write` completes normally, and I don''t see anything for quite a while.
    Just over 5 minutes later, I see this:'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`write` 操作正常完成，但有一段时间没有看到任何内容。稍后超过 5 分钟，我看到了这个：'
- en: Client
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE18]'
  id: totrans-split-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This looks similar to the case where the system was power-cycled instead of
    powered off, except for two things: it took 5 minutes for the system to notice,
    and the error reported was ETIMEDOUT. Note that again, it''s not that the `read`
    timed out per se. We would have seen the same error from other socket operations,
    and subsequent socket operations would likely fail immediately with the same ETIMEDOUT
    error. That''s because it''s the *socket* that has entered a state where the underlying
    connection has timed out. The specific reason for this is that the remote side
    failed to acknowledge a data packet for too long — 5 minutes, as configured on
    this system.'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来与系统重新启动而非关机的情况相似，除了两点：系统注意到需要花费 5 分钟，而且报告的错误是 ETIMEDOUT。请注意，这并不是说 `read`
    函数超时了。我们在其他套接字操作中也会看到同样的错误，并且随后的套接字操作可能会立即失败，并显示相同的 ETIMEDOUT 错误。这是因为*套接字*进入了一个状态，其中底层连接已超时。具体原因是远程端太长时间未确认数据包
    —— 在这个系统上配置为 5 分钟。
- en: '**Conclusions:**'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**结论：**'
- en: When the remote system is powered off instead of power cycled, again, the first
    system only finds out if it's trying to send data. If it doesn't send packets,
    it will never find out about the terminated connections.
  id: totrans-split-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当远程系统关机而不是重新启动时，首个系统只有在尝试发送数据时才会发现。如果不发送数据包，则永远无法发现已终止的连接。
- en: When the system has been attempting to send data for long enough without receiving
    acknowledgments from the remote side, the TCP connection will be terminated and
    a socket operation on them will fail with ETIMEDOUT.
  id: totrans-split-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当系统试图发送数据足够长时间而没有从远程端收到确认时，TCP 连接将被终止，并且在它们上的套接字操作将因 ETIMEDOUT 而失败。
- en: 'Puzzler 3: Broken connection with no failure'
  id: totrans-split-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谜题 3：没有失败的断开连接
- en: 'This time, instead of giving you a specific case and asking what happens, I''ll
    flip it around: here''s an observation, and see if you can figure out how it could
    happen. We''ve discussed several cases where kang can believe it has a connection
    to kodos, but kodos doesn''t know about it. **Is it possible for kang to have
    a connection to kodos without kodos knowing about it — indefinitely (i.e., where
    this will not resolve itself) and even if there''s been no power off, no power
    cycle, and no other failure of the operating system on kodos and no failure of
    networking equipment?**'
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，与其给你一个具体案例并询问发生了什么，我来反过来：这里有一个观察，看看你能否弄清楚它如何发生。我们讨论过几种情况，其中 kang 可能认为自己与
    kodos 建立了连接，但 kodos 并不知情。**kang 是否可能与 kodos 建立连接，而 kodos 却毫不知情，可以持续无限期（即，这不会自行解决），即使在
    kodos 没有断电、电源循环或操作系统的其他故障以及网络设备故障的情况下？**
- en: 'Here''s a hint: consider the case above where a connection is stuck in `ESTABLISHED`.
    In that case, it''s fair to say that the application has the responsibility to
    deal with the problem, since by definition it still has the socket open and could
    find out by sending data, at which point the connection will eventually be terminated.
    But what if the application didn''t have the socket open any more?'
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有个提示：考虑上面一个连接卡在 `ESTABLISHED` 的情况。在这种情况下，可以说应用程序有责任处理问题，因为按定义它仍然保持套接字打开，并且可以通过发送数据发现这一点，此时连接最终将被终止。但是如果应用程序不再拥有套接字呢？
- en: In the Warmup, we looked at the case where kodos's `nc` closed its socket, and
    we said that kang's `nc` read 0 (indicating end-of-stream) and then closed its
    socket. What if it didn't close the socket, but kept it open? Obviously, it couldn't
    read from it. But there's nothing about TCP that says you can't send more data
    to the other side that has sent you a FIN. **FIN only means end-of-data-stream
    in the direction that the FIN was sent.**
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在热身阶段，我们看了 kodos 的 `nc` 关闭了其套接字的情况，并且我们说 kang 的 `nc` 读取了 0（指示流的结束），然后关闭了其套接字。如果它没有关闭套接字，而是保持打开状态呢？显然，它不能从中读取数据。但
    TCP 没有任何规定说你不能向已发送 FIN 的另一端发送更多数据。**FIN 只表示数据流在发送 FIN 的方向上结束。**
- en: In order to demonstrate this, we can't use `nc` on kang because it automatically
    closes its socket when it reads 0\. So I've written a demo version of `nc` called
    [dnc](https://github.com/davepacheco/experiment-dnc), which simply skips this
    behavior. It also prints out explicitly which system calls it's making. This will
    give us a chance to observe the TCP states.
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明这一点，我们不能在 kang 上使用 `nc`，因为当它读取 0 时会自动关闭其套接字。因此，我编写了一个名为 [dnc](https://github.com/davepacheco/experiment-dnc)
    的 `nc` 的演示版本，它简单地跳过了这种行为。它还明确打印出它正在进行的系统调用。这将让我们有机会观察 TCP 的状态。
- en: 'First, we''ll set up the connections as usual:'
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将像往常一样建立连接：
- en: Server
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器
- en: '[PRE19]'
  id: totrans-split-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Client
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE20]'
  id: totrans-split-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now let''s verify the connections are in the `ESTABLISHED` state we expect
    on both sides:'
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们验证预期的连接状态 `ESTABLISHED` 在双方都正常：
- en: Server
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器
- en: '[PRE21]'
  id: totrans-split-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Client
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE22]'
  id: totrans-split-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, let''s CTRL-C the `nc` process on kodos:'
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在 kodos 上 CTRL-C 终止 `nc` 进程：
- en: Server
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器
- en: '[PRE23]'
  id: totrans-split-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We immediately see this on kang:'
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们立即在 kang 上看到了这个：
- en: Client
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE24]'
  id: totrans-split-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now let''s look at the TCP connection states:'
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看 TCP 连接状态：
- en: Server
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器
- en: '[PRE25]'
  id: totrans-split-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Client
  id: totrans-split-130
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE26]'
  id: totrans-split-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This makes sense: kodos sent a FIN to kang. `FIN_WAIT_2` indicates that kodos
    received an ACK from kang for the FIN that it sent, and `CLOSE_WAIT` indicates
    that kang received the FIN *but has not sent a FIN back*. **This is a perfectly
    valid state for a TCP connection for an indefinite period of time.** Imagine kodos
    had sent a request to kang and was not planning to send any more requests; kang
    could happily send data in response for hours, and this would work. Only in our
    case, kodos *has* actually closed the socket.'
  id: totrans-split-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这是有道理的：kodos 发送了一个 FIN 给 kang。`FIN_WAIT_2` 表示 kodos 收到了 kang 对其发送的 FIN 的 ACK，而
    `CLOSE_WAIT` 表示 kang 收到了 FIN *但尚未发送 FIN 回来*。**对于 TCP 连接而言，这是一个完全有效的状态，可以持续无限期。**
    想象一下，kodos 向 kang 发送了一个请求，不再计划发送任何其他请求；kang 可以愉快地在数小时内响应数据，这是可行的。只是在我们的情况下，kodos
    *确实*已经关闭了套接字。
- en: 'Let''s wait a minute and check the TCP connection states again. A minute later,
    the connection is completely missing from kodos, but it''s still present on kang:'
  id: totrans-split-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们等一分钟，然后再次检查 TCP 连接状态。一分钟后，在 kodos 上连接完全消失，但在 kang 上仍然存在：
- en: Client
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE27]'
  id: totrans-split-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'What happened here? We hit a lesser-known special case in the TCP stack: when
    an application has closed a socket, the TCP stack has sent a FIN, and the remote
    TCP stack has acknowledged the FIN, the local TCP stack waits a fixed period of
    time *and then closes the connection*. The reason? In case the remote side has
    rebooted. This case is actually an analog to the case above where one side had
    an `ESTABLISHED` connection and the other doesn''t know about it. The difference
    is that in this specific case, the application has closed the socket, so there''s
    no other component that could deal with the problem. As a result, the TCP stack
    waits a fixed period of time and then tears down the connection (without sending
    anything to the other side).'
  id: totrans-split-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？我们遇到了 TCP 栈中一个不太为人知的特殊情况：当应用程序关闭了一个套接字后，TCP 栈发送了一个 FIN，远程 TCP 栈确认了 FIN，本地
    TCP 栈等待了一个固定的时间，然后 *关闭连接*。为什么要这样做呢？以防远程端重新启动。这种情况实际上类似于上面一个情况，其中一方有一个 `ESTABLISHED`
    连接，而另一方却不知道。不同之处在于，在这种特定情况下，应用程序已经关闭了套接字，因此没有其他组件可以处理这个问题。结果是，TCP 栈等待了一段固定的时间，然后关闭连接（而不向另一端发送任何内容）。
- en: 'Follow-up question: **what happens if kang sends data to kodos at this point?**
    Remember, kang still thinks the connection is open, but it''s been torn down on
    kodos.'
  id: totrans-split-137
  prefs: []
  type: TYPE_NORMAL
  zh: 跟进问题：**如果 kang 在这一点向 kodos 发送数据会发生什么？**请记住，kang 仍然认为连接是打开的，但在 kodos 上已经被拆除。
- en: Client
  id: totrans-split-138
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端
- en: '[PRE28]'
  id: totrans-split-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This is the same as we saw in case Puzzler 1: the `write()` actually succeeds,
    since the TCP stack doesn''t know that the connection is closed yet. But it does
    get a RST, which wakes up the thread in `poll()`, and the subsequent `read()`
    returns ECONNRESET.'
  id: totrans-split-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们在谜题1中看到的情况相同：`write()` 实际上成功了，因为 TCP 栈还不知道连接已经关闭。但它确实收到了一个 RST，这会唤醒 `poll()`
    中的线程，随后的 `read()` 返回 ECONNRESET。
- en: '**Conclusions:**'
  id: totrans-split-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**结论：**'
- en: It's possible for two sides to disagree about the state of the connection *even
    when there's been no OS, network, or hardware failure at all*.
  id: totrans-split-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 甚至在没有任何操作系统、网络或硬件故障的情况下，两个方面对于连接的状态可能会产生分歧。
- en: In a case like the one above, it's not possible for kang to distinguish between
    the case where kodos is attentively waiting to receive data or kodos has closed
    the socket and isn't listening (at least, not without sending a packet). For this
    reason, maybe it's not a great idea to design a system that uses sockets in these
    half-open states for an extended period of time under normal operation.
  id: totrans-split-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在像上面那种情况下，kang 不可能区分 kodos 是在专心等待接收数据，还是 kodos 已经关闭了套接字而不再监听（至少，没有发送数据包的情况下）。因此，也许设计一个在正常操作期间使用这些半开放状态的套接字的系统并不是一个好主意。
- en: Conclusions
  id: totrans-split-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: 'TCP is typically presented as a protocol for maintaining a consistent abstraction
    — the "TCP connection" — across two systems. We know that in the face of certain
    types of network and software problems, connections will fail, but it''s not always
    obvious that there are cases where the *abstraction* fails, in that the two systems
    disagree about the state of the connection. Specifically:'
  id: totrans-split-145
  prefs: []
  type: TYPE_NORMAL
  zh: TCP 通常被描述为在两个系统之间维护一致的抽象——"TCP 连接"——的协议。我们知道，在面对某些类型的网络和软件问题时，连接会失败，但并不总是明显地看到抽象失败的情况，即两个系统在连接状态上有分歧。具体而言：
- en: It's possible for one system to think it has a working, established TCP connection
    to a remote system, while the remote system knows nothing about that connection.
  id: totrans-split-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有可能一个系统认为它与远程系统有一个正常工作的已建立的 TCP 连接，而远程系统对这个连接一无所知。
- en: This is possible even when there has been no failure of the network, hardware,
    or operating system.
  id: totrans-split-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使在没有网络、硬件或操作系统故障的情况下，这种情况也是可能的。
- en: These behaviors do not reflect deficiencies in TCP. Quite the contrary, in all
    of these cases, the TCP implementation appears to behave as reasonably as it could
    given the situation. If we were tempted to implement our own communication mechanism
    instead of using TCP, the presence of these cases might well remind us how complex
    the underlying problems are. These are intrinsic problems with distributed systems,
    and a TCP connection is fundamentally a distributed system.
  id: totrans-split-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行为并不反映 TCP 的缺陷。恰恰相反，在所有这些情况中，TCP 的实现似乎都表现得尽可能合理。如果我们试图实现自己的通信机制而不使用 TCP，这些情况的存在可能会提醒我们底层问题的复杂性。这些都是分布式系统的固有问题，而
    TCP 连接本质上就是一个分布式系统。
- en: That said, the single most important lesson in all of this is that **the notion
    of a TCP connection that spans multiple systems is a convenient fiction.** When
    it goes wrong, it's critical to think about it as two separate state machines
    that operate simultaneously to try to maintain a consistent view of the connection.
    It's the responsibility of the application to handle the cases where these differ
    (often using a keep-alive mechanism).
  id: totrans-split-149
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，所有这些中最重要的一课是**跨多个系统的TCP连接这一概念是一个方便的虚构**。当出现问题时，关键是将其视为两个独立的状态机，它们同时操作以尝试维护连接的一致视图。应用程序有责任处理这些不同之处（通常使用保持活动机制）。
- en: Furthermore, there's a disconnect between the application's file descriptor
    and the underlying TCP connection. TCP connections exist (in various states related
    to closing) even after an application has closed the file descriptor, and a file
    descriptor can be open when the underlying TCP connection has been closed as a
    result of a failure.
  id: totrans-split-150
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，应用程序的文件描述符与底层的TCP连接之间存在断开。即使应用程序关闭了文件描述符，TCP连接（与关闭相关的各种状态）仍然存在，并且由于故障，当底层TCP连接关闭时文件描述符可以打开。
- en: 'Other lessons to keep in mind:'
  id: totrans-split-151
  prefs: []
  type: TYPE_NORMAL
  zh: 其他需要牢记的教训包括：
- en: Ungraceful reboot of a system (as happens when the OS crashes) is not the same
    as a userland process exiting or closing its socket. It's important to test this
    case specifically. Reboot, when the remote system comes back online before the
    connection times out, is also different than power-off.
  id: totrans-split-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统的非优雅重新启动（当操作系统崩溃时会发生）与用户进程退出或关闭其套接字不同。特别是要测试这种情况。在远程系统在连接超时之前重新上线时重启，与关机也是不同的。
- en: There's no proactive notification from the kernel when a TCP socket is torn
    down. You only find this out when you call `read()`, `write()`, or some other
    socket operation on the socket file descriptor. If your program doesn't do this
    for some reason, you'll never find out about the connection failure.
  id: totrans-split-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当TCP套接字关闭时，内核没有主动通知。你只有在对套接字文件描述符调用 `read()`、`write()` 或其他套接字操作时才能发现这一点。如果由于某种原因你的程序没有这样做，你将永远不会发现连接失败。
- en: 'Some related notes that I''ve found aren''t so commonly known:'
  id: totrans-split-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一些相关的笔记，我发现并不那么常见：
- en: '`ECONNRESET` is a socket error you can see from `read()`, `write()`, and other
    operations that indicates that the remote peer has sent a RST.'
  id: totrans-split-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ECONNRESET` 是一个套接字错误，你可以在 `read()`、`write()` 和其他操作中看到，表明远程对等方已发送RST。'
- en: '`ETIMEDOUT` is a socket error you can see from `read()`, `write()`, and other
    operations that indicates that some timeout associated with the connection has
    elapsed. The cases I''ve seen most are when the remote side did not acknowledge
    some packet for too long. These are usually either data packets, a FIN packet,
    or a KeepAlive probe.'
  id: totrans-split-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ETIMEDOUT` 是一个套接字错误，你可以在 `read()`、`write()` 和其他操作中看到，表明连接相关的某个超时已经过去。我见过的情况大多数是远程端太长时间没有确认某个数据包。这些通常是数据包、FIN包或者KeepAlive探测。'
- en: Importantly, neither of these errors means that there was anything wrong with
    the read or write operation that you tried to do — just that the socket itself
    is closed.
  id: totrans-split-157
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，这些错误都不意味着你尝试做的读取或写入操作有任何问题 — 只是套接字本身已关闭。
- en: If you made it this far, and this sort of problem sounds interesting to you,
    [we're hiring](https://www.joyent.com/about/careers)!
  id: totrans-split-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经阅读到这里，并且这类问题听起来对你有趣，[我们正在招聘](https://www.joyent.com/about/careers)!
- en: '*Post written by Dave Pacheco*'
  id: totrans-split-159
  prefs: []
  type: TYPE_NORMAL
  zh: '*Dave Pacheco 撰写*'
