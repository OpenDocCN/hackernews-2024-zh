- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:04:14'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: TCP Puzzlers | Triton DataCenter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.tritondatacenter.com/blog/tcp-puzzlers](https://www.tritondatacenter.com/blog/tcp-puzzlers)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It's been said that we don't really understand a system until we understand
    how it fails. Despite having written a (toy) TCP implementation in college and
    then working for several years in industry, I'm continuing to learn more deeply
    how TCP works — and how it fails. What's been most surprising is how basic some
    of these failures are. They're not at all obscure. I'm presenting them here as
    puzzlers, in the fashion of [Car Talk](http://www.cartalk.com/content/puzzlers)
    and the [old Java puzzlers](https://www.youtube.com/watch?v=wbp-3BJWsU8). Like
    the best of those puzzlers, these are questions that are very simple to articulate,
    but the solutions are often surprising. And rather than focusing on arcane details,
    they hopefully elucidate some deep principles about how TCP works.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These puzzlers assume some basic knowledge about working with TCP on Unix-like
    systems, but you don''t have to have mastered any of this before diving in. As
    a refresher:'
  prefs: []
  type: TYPE_NORMAL
- en: TCP states, the three-way handshake used to establish a connection, and the
    way connections are terminated are described pretty concisely on the [TCP Wikipedia
    page](https://en.wikipedia.org/wiki/Transmission_Control_Protocol#Protocol_operation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programs typically interact with sockets using `read`, `write`, `connect`, `bind`,
    `listen`, and `accept`. There's also `send` and `recv`, but for our purposes,
    these work the same way as `read` and `write`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I''ll be talking about programs that use `poll`. Although most systems use
    something more efficient like `kqueue`, event ports, or `epoll`, these are all
    equivalent for our purposes. As for applications that use blocking operations
    instead of any of these mechanisms: once you understand how TCP failure modes
    affect poll, it''s pretty easy to understand how it affects blocking operations
    as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can try all of these examples yourself. I used two virtual machines running
    under VMware Fusion. The results match my experiences in our production systems.
    I'm testing using the `nc(1)` tool on SmartOS, and I don't believe any of the
    behavior shown here is OS-specific. I'm using the illumos-specific [truss(1)](http://illumos.org/man/truss)
    tool to trace system calls and to get some coarse timing information. You may
    be able to get similar information using [dtruss(1m)](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/dtruss.1m.html)
    on OS X or [strace(1)](http://linux.die.net/man/1/strace) on GNU/Linux.
  prefs: []
  type: TYPE_NORMAL
- en: '`nc(1)` is a pretty simple tool. We''ll use it in two modes:'
  prefs: []
  type: TYPE_NORMAL
- en: As a server. In this mode, `nc` will set up a listening socket, call `accept`,
    and block until a connection is received.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a client. In this mode, `nc` will create a socket and establish a connection
    to a remote server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In both modes, once connected, each side uses `poll` to wait for either stdin
    or the connected socket to have data ready to be read. Incoming data is printed
    to the terminal. Data you type into the terminal is sent over the socket. Upon
    CTRL-C, the socket is closed and the process exits.
  prefs: []
  type: TYPE_NORMAL
- en: In these examples, my client is called `kang` and my server is called `kodos`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Warmup: Normal TCP teardown'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This one demonstrates a very basic case just to get the ball rolling. Suppose
    we set up a server on `kodos`:'
  prefs: []
  type: TYPE_NORMAL
- en: Server
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: (Remember, in these examples, I'm using `truss` to print out the system calls
    that `nc` makes. The `-d` flag prints a relative timestamp and the `-t` flag selects
    which system calls we want to see.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now on `kang`, I establish a connection:'
  prefs: []
  type: TYPE_NORMAL
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Over on kodos, we see:'
  prefs: []
  type: TYPE_NORMAL
- en: Server
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, the TCP connections are in state ESTABLISHED and both processes
    are in `poll`. We can see this using the `netstat` tool on each system:'
  prefs: []
  type: TYPE_NORMAL
- en: Server
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The question is, **when we shut down one of these processes, what happens in
    the other process?** Does it find out? How? Try to predict the specific syscall
    behavior and explain why each system call does what it does.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try it. I''ll CTRL-C the server on kodos:'
  prefs: []
  type: TYPE_NORMAL
- en: Server
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what we see on `kang`:'
  prefs: []
  type: TYPE_NORMAL
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'What happened here? Let''s be specific:'
  prefs: []
  type: TYPE_NORMAL
- en: We sent SIGINT to the server, causing the process to exit. Upon exit, file descriptors
    are closed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the last file descriptor for an `ESTABLISHED` socket is closed, the TCP
    stack on kodos sends a FIN over the connection and enters the `FIN_WAIT_1` state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The TCP stack on kang receives the FIN packet, transitions its own connection
    to `CLOSE_WAIT`, and sends an ACK back. Since the `nc` client is blocked on this
    socket being ready to read, the kernel wakes this thread with the event `POLLIN`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `nc` client sees `POLLIN` for the socket and calls `read`, which returns
    0 immediately. This indicates end-of-stream. `nc` presumes that we're done with
    this socket and closes it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Meanwhile, the TCP stack on kodos receives the ACK and enters `FIN_WAIT_2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since the `nc` client on kang closed its socket, the TCP stack on kang sent
    a FIN to `kodos`. The connection on kang enters `LAST_ACK`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The TCP stack on kodos receives the FIN, the connection enters `TIME_WAIT`,
    and the stack on kodos acknowledges the FIN.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The TCP stack on kang receives the ACK for the FIN and removes the connection
    entirely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Two minutes later, the TCP connection on kodos is closed and the stack removes
    the connection entirely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (It's possible for steps to be slightly reordered and for kang to transition
    through `CLOSING` instead of `FIN_WAIT_2`.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the final state according to netstat:'
  prefs: []
  type: TYPE_NORMAL
- en: Server
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: There's no output for this connection at all on kang.
  prefs: []
  type: TYPE_NORMAL
- en: The intermediate states transition very quickly, but you could see them using
    the [DTrace TCP provider](http://dtracebook.com/index.php/Network_Lower_Level_Protocols:tcpstate.d).
    You can see the packet flow using [snoop(1m)](http://illumos.org/man/snoop) or
    [tcpdump(1)](http://www.tcpdump.org/tcpdump_man.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusions:** We''ve seen the normal path of system calls for connection
    establishment and teardown. Note that kang immediately found out when kodos''s
    connection was closed — it was woken up out of `poll` and `read` returned 0 to
    indicate end-of-stream. At that point, kang *elected* to close its socket, which
    cleaned up the connection state on kodos. We''ll revisit this later to see how
    the results can differ if kang doesn''t close its socket here.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Puzzler 1: Power cycling'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**What happens to an established, idle TCP connection if one system is power
    cycled?**'
  prefs: []
  type: TYPE_NORMAL
- en: Since most processes go through normal exit as part of a graceful reboot (e.g.,
    if you use the "reboot" command), you get basically the same result if you type
    "reboot" on kodos instead of killing the server with CTRL-C. But what would happen
    if we'd power-cycled kodos in the previous example? Surely kang will eventually
    find out, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try it. Set up the connection:'
  prefs: []
  type: TYPE_NORMAL
- en: Server
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now I'll use VMware's "reboot" function to power-cycle the system. It's important
    that this be an actual power cycle (or OS panic) — anything that causes a graceful
    shut down will look more like the first case above.
  prefs: []
  type: TYPE_NORMAL
- en: '20 minutes later, kang is still sitting in the same place:'
  prefs: []
  type: TYPE_NORMAL
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We tend to believe that TCP''s job is to maintain a consistent abstraction
    (namely, the TCP connection) across multiple systems, so it''s surprising to discover
    cases where the abstraction is broken like this. And lest you think this is some
    nc(1) issue, it''s not. "netstat" on kodos shows no connection to kang, but kang
    shows a perfectly healthy connection to kodos:'
  prefs: []
  type: TYPE_NORMAL
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We can leave this forever without touching it and kang will *never* figure out
    that kodos rebooted.
  prefs: []
  type: TYPE_NORMAL
- en: '**Now, suppose at this point, kang tries to send data to kodos. What happens?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try it:'
  prefs: []
  type: TYPE_NORMAL
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When I type the message and hit enter, kodos gets woken up, reads the message
    from stdin, and sends it over the socket. *The `write` call completes successfully!*
    `nc` goes back to poll to wait for another event, eventually finds out that the
    socket can be read without blocking, and then calls `read`. This time, `read`
    fails with `ECONNRESET`. What does this mean? [POSIX''s definition of read(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/read.html)
    says that this means:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The [illumos read(2) man page](http://illumos.org/man/read.2) provides a little
    more context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This error doesn't mean that something specific to the `read` call went wrong,
    but rather that the socket itself is disconnected. Most other socket operations
    would fail the same way at that point.
  prefs: []
  type: TYPE_NORMAL
- en: So what happened here? At the point when the `nc` on kang tried to send data,
    the TCP stack still didn't know the connection was dead. kang sent a data packet
    over to kodos, which responded with an RST because it didn't know anything about
    the connection. kang saw the RST and tore down its connection. It cannot close
    the socket file descriptor — that's not how file descriptors work — but subsequent
    operations fail with ECONNRESET until nc does close the fd.
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusions:**'
  prefs: []
  type: TYPE_NORMAL
- en: A hard power-cycle is very different than a graceful shutdown. When testing
    distributed systems, this case needs to be specifically tested. You can't just
    kill a process and expect it to test the same thing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**There are situations when one side believes a TCP connection is established,
    but the other side does not, and where this situation will never be automatically
    resolved.** It''s possible to manage this problem using TCP or application-level
    keep-alive.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The only reason that kang eventually found out that the remote side had disappeared
    was that it took action: it sent data and received a response indicating the connection
    was gone.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That raises the question: what if kodos had not responded to the data message
    for some reason?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Puzzler 2: Power off'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**What happens if one endpoint of a TCP connection is powered off for a while?**
    Does the other endpoint ever discover this? If so, how? And when?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, I''ll set up the connection with `nc`:'
  prefs: []
  type: TYPE_NORMAL
- en: Server
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, I''ll cut power to kodos abruptly and attempt to send data from kang:'
  prefs: []
  type: TYPE_NORMAL
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `write` completes normally, and I don''t see anything for quite a while.
    Just over 5 minutes later, I see this:'
  prefs: []
  type: TYPE_NORMAL
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This looks similar to the case where the system was power-cycled instead of
    powered off, except for two things: it took 5 minutes for the system to notice,
    and the error reported was ETIMEDOUT. Note that again, it''s not that the `read`
    timed out per se. We would have seen the same error from other socket operations,
    and subsequent socket operations would likely fail immediately with the same ETIMEDOUT
    error. That''s because it''s the *socket* that has entered a state where the underlying
    connection has timed out. The specific reason for this is that the remote side
    failed to acknowledge a data packet for too long — 5 minutes, as configured on
    this system.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusions:**'
  prefs: []
  type: TYPE_NORMAL
- en: When the remote system is powered off instead of power cycled, again, the first
    system only finds out if it's trying to send data. If it doesn't send packets,
    it will never find out about the terminated connections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the system has been attempting to send data for long enough without receiving
    acknowledgments from the remote side, the TCP connection will be terminated and
    a socket operation on them will fail with ETIMEDOUT.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Puzzler 3: Broken connection with no failure'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This time, instead of giving you a specific case and asking what happens, I''ll
    flip it around: here''s an observation, and see if you can figure out how it could
    happen. We''ve discussed several cases where kang can believe it has a connection
    to kodos, but kodos doesn''t know about it. **Is it possible for kang to have
    a connection to kodos without kodos knowing about it — indefinitely (i.e., where
    this will not resolve itself) and even if there''s been no power off, no power
    cycle, and no other failure of the operating system on kodos and no failure of
    networking equipment?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a hint: consider the case above where a connection is stuck in `ESTABLISHED`.
    In that case, it''s fair to say that the application has the responsibility to
    deal with the problem, since by definition it still has the socket open and could
    find out by sending data, at which point the connection will eventually be terminated.
    But what if the application didn''t have the socket open any more?'
  prefs: []
  type: TYPE_NORMAL
- en: In the Warmup, we looked at the case where kodos's `nc` closed its socket, and
    we said that kang's `nc` read 0 (indicating end-of-stream) and then closed its
    socket. What if it didn't close the socket, but kept it open? Obviously, it couldn't
    read from it. But there's nothing about TCP that says you can't send more data
    to the other side that has sent you a FIN. **FIN only means end-of-data-stream
    in the direction that the FIN was sent.**
  prefs: []
  type: TYPE_NORMAL
- en: In order to demonstrate this, we can't use `nc` on kang because it automatically
    closes its socket when it reads 0\. So I've written a demo version of `nc` called
    [dnc](https://github.com/davepacheco/experiment-dnc), which simply skips this
    behavior. It also prints out explicitly which system calls it's making. This will
    give us a chance to observe the TCP states.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll set up the connections as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: Server
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s verify the connections are in the `ESTABLISHED` state we expect
    on both sides:'
  prefs: []
  type: TYPE_NORMAL
- en: Server
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s CTRL-C the `nc` process on kodos:'
  prefs: []
  type: TYPE_NORMAL
- en: Server
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We immediately see this on kang:'
  prefs: []
  type: TYPE_NORMAL
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s look at the TCP connection states:'
  prefs: []
  type: TYPE_NORMAL
- en: Server
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This makes sense: kodos sent a FIN to kang. `FIN_WAIT_2` indicates that kodos
    received an ACK from kang for the FIN that it sent, and `CLOSE_WAIT` indicates
    that kang received the FIN *but has not sent a FIN back*. **This is a perfectly
    valid state for a TCP connection for an indefinite period of time.** Imagine kodos
    had sent a request to kang and was not planning to send any more requests; kang
    could happily send data in response for hours, and this would work. Only in our
    case, kodos *has* actually closed the socket.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s wait a minute and check the TCP connection states again. A minute later,
    the connection is completely missing from kodos, but it''s still present on kang:'
  prefs: []
  type: TYPE_NORMAL
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'What happened here? We hit a lesser-known special case in the TCP stack: when
    an application has closed a socket, the TCP stack has sent a FIN, and the remote
    TCP stack has acknowledged the FIN, the local TCP stack waits a fixed period of
    time *and then closes the connection*. The reason? In case the remote side has
    rebooted. This case is actually an analog to the case above where one side had
    an `ESTABLISHED` connection and the other doesn''t know about it. The difference
    is that in this specific case, the application has closed the socket, so there''s
    no other component that could deal with the problem. As a result, the TCP stack
    waits a fixed period of time and then tears down the connection (without sending
    anything to the other side).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow-up question: **what happens if kang sends data to kodos at this point?**
    Remember, kang still thinks the connection is open, but it''s been torn down on
    kodos.'
  prefs: []
  type: TYPE_NORMAL
- en: Client
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the same as we saw in case Puzzler 1: the `write()` actually succeeds,
    since the TCP stack doesn''t know that the connection is closed yet. But it does
    get a RST, which wakes up the thread in `poll()`, and the subsequent `read()`
    returns ECONNRESET.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusions:**'
  prefs: []
  type: TYPE_NORMAL
- en: It's possible for two sides to disagree about the state of the connection *even
    when there's been no OS, network, or hardware failure at all*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a case like the one above, it's not possible for kang to distinguish between
    the case where kodos is attentively waiting to receive data or kodos has closed
    the socket and isn't listening (at least, not without sending a packet). For this
    reason, maybe it's not a great idea to design a system that uses sockets in these
    half-open states for an extended period of time under normal operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'TCP is typically presented as a protocol for maintaining a consistent abstraction
    — the "TCP connection" — across two systems. We know that in the face of certain
    types of network and software problems, connections will fail, but it''s not always
    obvious that there are cases where the *abstraction* fails, in that the two systems
    disagree about the state of the connection. Specifically:'
  prefs: []
  type: TYPE_NORMAL
- en: It's possible for one system to think it has a working, established TCP connection
    to a remote system, while the remote system knows nothing about that connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is possible even when there has been no failure of the network, hardware,
    or operating system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These behaviors do not reflect deficiencies in TCP. Quite the contrary, in all
    of these cases, the TCP implementation appears to behave as reasonably as it could
    given the situation. If we were tempted to implement our own communication mechanism
    instead of using TCP, the presence of these cases might well remind us how complex
    the underlying problems are. These are intrinsic problems with distributed systems,
    and a TCP connection is fundamentally a distributed system.
  prefs: []
  type: TYPE_NORMAL
- en: That said, the single most important lesson in all of this is that **the notion
    of a TCP connection that spans multiple systems is a convenient fiction.** When
    it goes wrong, it's critical to think about it as two separate state machines
    that operate simultaneously to try to maintain a consistent view of the connection.
    It's the responsibility of the application to handle the cases where these differ
    (often using a keep-alive mechanism).
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, there's a disconnect between the application's file descriptor
    and the underlying TCP connection. TCP connections exist (in various states related
    to closing) even after an application has closed the file descriptor, and a file
    descriptor can be open when the underlying TCP connection has been closed as a
    result of a failure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other lessons to keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Ungraceful reboot of a system (as happens when the OS crashes) is not the same
    as a userland process exiting or closing its socket. It's important to test this
    case specifically. Reboot, when the remote system comes back online before the
    connection times out, is also different than power-off.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's no proactive notification from the kernel when a TCP socket is torn
    down. You only find this out when you call `read()`, `write()`, or some other
    socket operation on the socket file descriptor. If your program doesn't do this
    for some reason, you'll never find out about the connection failure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some related notes that I''ve found aren''t so commonly known:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ECONNRESET` is a socket error you can see from `read()`, `write()`, and other
    operations that indicates that the remote peer has sent a RST.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ETIMEDOUT` is a socket error you can see from `read()`, `write()`, and other
    operations that indicates that some timeout associated with the connection has
    elapsed. The cases I''ve seen most are when the remote side did not acknowledge
    some packet for too long. These are usually either data packets, a FIN packet,
    or a KeepAlive probe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importantly, neither of these errors means that there was anything wrong with
    the read or write operation that you tried to do — just that the socket itself
    is closed.
  prefs: []
  type: TYPE_NORMAL
- en: If you made it this far, and this sort of problem sounds interesting to you,
    [we're hiring](https://www.joyent.com/about/careers)!
  prefs: []
  type: TYPE_NORMAL
- en: '*Post written by Dave Pacheco*'
  prefs: []
  type: TYPE_NORMAL
