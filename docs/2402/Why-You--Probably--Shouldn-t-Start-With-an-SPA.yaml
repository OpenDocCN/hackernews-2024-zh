- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:32:36'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:32:36
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Why You (Probably) Shouldn't Start With an SPA
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你（很可能）不应该从一个SPA开始
- en: 来源：[https://simonhamp.me/blog/you-shouldnt-start-with-an-spa/](https://simonhamp.me/blog/you-shouldnt-start-with-an-spa/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://simonhamp.me/blog/you-shouldnt-start-with-an-spa/](https://simonhamp.me/blog/you-shouldnt-start-with-an-spa/)
- en: Why You (Probably) Shouldn't Start With an SPA
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你（很可能）不应该从一个SPA开始
- en: 1st Feb '24 • 11 of your Earth minutes
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 24年2月1日 • 你们地球的11分钟
- en: I came across [this interesting article](https://www.gregnavis.com/articles/the-architecture-no-one-needs.html)
    by [@gregnavis](https://twitter.com/gregnavis) the other day. I guess it's from
    a few years ago now, judging by some of the other posts on his blog. But it still
    holds up. It's maybe even *more* relevant now.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近看到了[这篇有趣的文章](https://www.gregnavis.com/articles/the-architecture-no-one-needs.html)，作者是[@gregnavis](https://twitter.com/gregnavis)，几年前的一篇文章。从他博客上的其他帖子来看，这篇文章可能更加*相关*。
- en: The article is entitled *The Architecture No One Needs* and it makes a simple
    and clear case, arguing that SPA's are more expensive than a standard multi-page
    app (which may or may not be a monolith).
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章的标题是*没有人需要的架构*，它提出了一个简单明了的论点，认为SPA比标准的多页面应用（可能是单体应用）更昂贵。
- en: I'm going to use SPA throughout this post to mean the whole umbrella of ways
    you might be building a front-end application that is not server-side rendered.
  id: totrans-split-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在本文中，我会使用SPA来指代你可能正在构建的前端应用程序的整个方式，而不是服务器端渲染。
- en: I think this is in line with Greg's intent too.
  id: totrans-split-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我认为这与格雷格的意图是一致的。
- en: I don't want to split hairs over whether a particular framework *can* be used
    to build front-end apps that aren't strictly SPAs.
  id: totrans-split-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我不想在是否某个框架*可以*用于构建不严格SPA的前端应用程序上纠缠不清。
- en: Since I read it, I haven't stopped thinking about this article.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 自从我读了这篇文章以来，我就没有停止过思考。
- en: I found myself agreeing with all of Greg's stated points and it made me realise
    I actually have a strong opinion about this topic.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现自己同意格雷格所说的所有观点，这让我意识到我实际上对这个话题有强烈的看法。
- en: I believe Greg is right, and as time rolls on I think I'm becoming more bullish
    in my stance on SPAs too.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信格雷格是对的，随着时间的推移，我觉得我在SPA方面的立场越来越强硬。
- en: '[¶](#content-some-history-some-context "Permalink")Some history, some context'
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[¶](#content-some-history-some-context "永久链接")一些历史，一些背景'
- en: My foray into the dirty, hubbub streets of front-end frameworks came about because
    of Laravel Nova and Statamic. They both use Vue, so I learned Vue.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我对前端框架的深入了解，是因为Laravel Nova和Statamic。它们都使用Vue，所以我学习了Vue。
- en: Of course, I looked around. But React made me retch. Angular almost made me
    want to buy a *katana* just to perform *seppuku*. (Of course I'm being hyperbolic.)
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我四处看看。但React让我感到恶心。Angular几乎让我想要买把*武士刀*来实施*切腹*。（当然我夸张了。）
- en: I hear things about all of these and more thanks to Twitter. I can say some
    of it is good, but most of it continues to push me away.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我听说了关于这些事情以及更多的东西，多亏了Twitter。我可以说其中一些是好的，但大多数情况下都让我不愿接近。
- en: I stuck with Vue. I actually like Vue a lot, even if v3 has caused a bit of
    headache—it's actually better for it in my opinion and yes I do like the composition
    API.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我坚持使用Vue。我实际上非常喜欢Vue，即使v3给我带来了一些头痛——在我看来，这对它来说实际上更好了，是的，我确实喜欢组合API。
- en: Overall though, I'm definitely heading more towards preferring *not* to have
    to build my front-end using node/deno/bun or whatever tool becomes popular today.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我明显更倾向于*不*必须使用node/deno/bun或者无论今天哪种工具变得流行来构建我的前端。
- en: That said, you just *try* and pry Tailwind from my frigid, rigid fingers!
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，你也*试试*把Tailwind从我的冰冷、僵硬的手指中抢走！
- en: I'm quite firmly in the [Livewire](https://livewire.laravel.com) camp now. In
    another life, I may even like HTMX?
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在非常坚定地站在[Livewire](https://livewire.laravel.com)阵营。在另一个生活中，我甚至可能喜欢HTMX？
- en: I've built a few SPAs, but I can probably count them on one hand. But not only
    will I probably not build another one, I think you shouldn't either. I'm strongly
    encouraging my clients not to.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我构建了几个SPA，但我可能只能用一只手数过来。但不仅如此，我可能不会再建立另一个，我认为你也不应该这样做。我强烈建议我的客户也不要这样做。
- en: I do think SPAs have a place, but it is **almost certainly not in your project**.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为SPA确实有存在的空间，但**几乎肯定不是在你的项目中**。
- en: Yes, I know this argument has been made before and probably far more eloquently
    than I'm going to, but you know I just felt like I needed to get this out of my
    head in my own way.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我知道这个论点以前已经提出过，而且可能比我现在要说的更为雄辩，但你知道我觉得我需要以我自己的方式将这些想法表达出来。
- en: '[¶](#content-when-does-an-spa-make-sense "Permalink")When does an SPA make
    sense?'
  id: totrans-split-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[¶](#content-when-does-an-spa-make-sense "永久链接")什么时候使用单页面应用（SPA）是有意义的？'
- en: Let's get this out of the way first before I dunk on SPAs some more.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我对单页面应用（SPA）进行更多批评之前先把这个问题解决掉。
- en: 'They *do* have a place:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 它们确实有其存在的价值：
- en: '**I believe that the main advantage of an SPA is/was/has always been the decoupling
    of the front-end from the back-end.**'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**我认为单页面应用的主要优势是/曾经是/一直是将前端与后端解耦。**'
- en: As time goes on and engineers specialise in areas that interest them the most,
    roles become more well-defined. This is why we have 'front-end' and 'back-end'
    and 'full stack' engineers.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间推移，工程师专注于最感兴趣的领域，角色变得更加明确。这就是为什么我们有了‘前端’、‘后端’和‘全栈’工程师。
- en: Although there is principally a lot of overlap (this is all programming at the
    end of the day and many concepts are similar), the domain—the environment that
    the engineer is most familiar with—is what determines their preference.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在原则上有很多重叠（毕竟这都是编程，很多概念是相似的），但工程师最熟悉的领域——他们的环境，决定了他们的偏好。
- en: Some engineers will prefer back-end because they don't want to think about or
    deal with a certain class of bugs or issues that arise from the rapidly-evolving
    world of front-end development.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有些工程师会更喜欢后端，因为他们不想考虑或处理由快速发展的前端开发世界带来的某类错误或问题。
- en: They may be uncomfortable using 3 or 4 different languages at the same time
    to get their work done, or they groan as soon as there's another major version
    of some framework which is going to require a load of refactoring that doesn't
    add immediate value to your product.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 他们可能不喜欢同时使用三四种不同的语言来完成工作，或者一旦某个框架有了另一个主要版本，他们就会抱怨需要大量重构，而这并没有立即为你的产品增加价值。
- en: 'Consider: every user of your app could be using a different version of a particular
    browser, which uses one kind of rendering engine, and a specific level of conformity
    to various web standards e.g. ECMAScript (the official standard that underpins
    what most of us think of as JavaScript) or CSS. **Keeping on top of these variations
    and differences across desktop and mobile is enough to make anyone''s head spin.**'
  id: totrans-split-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 考虑一下：您应用的每个用户可能使用不同版本的特定浏览器，该浏览器使用某种渲染引擎，并且在各种Web标准（例如ECMAScript，即大多数人所说的JavaScript的官方标准）或CSS的符合度方面有特定水平的一致性。**掌握这些不同的变化和差异跨桌面和移动端足以让任何人头痛。**
- en: And other engineers will prefer the front-end for its stateful nature, or because
    they're more comfortable with JavaScript/TypeScript, they grok CSS, and they love
    the intersection of code and design.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他工程师会因为前端的状态性质或者因为他们更熟悉JavaScript/TypeScript，理解CSS，并且热衷于代码和设计的交集而更喜欢前端。
- en: Or maybe they just dislike dealing with databases, concurrency, queues, messaging
    and APIs a lot more than they dislike wild browser evolution.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 或许他们只是更不喜欢处理数据库、并发、队列、消息传递和API，比起对浏览器的快速演化更讨厌。
- en: In any case, whatever size your team is, there will be these preferences. For
    example, I consider myself a full-stack developer, but honestly I like to avoid
    front-end work as much as possible, so will generally take the easy route there.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您的团队规模如何，都会存在这些偏好。例如，我认为自己是全栈开发人员，但老实说，我尽量避免前端工作，通常会选择更简单的路径。
- en: Developing an SPA could allow you/your business to split the work of front-end
    and back-end into separate teams, which *may* help each team focus so they can
    do what they do best and be the happiest they can be.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 开发单页面应用（SPA）可以让你/你的业务将前端和后端的工作分成不同的团队，这*可能*有助于每个团队专注于他们擅长的事情，并尽可能快乐。
- en: '**Which is the most important metric that will make an appreciable difference
    to your bottom-line long term.**'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**哪个是对你的长期利润最重要的指标？**'
- en: Being intentional about this will see you hit Conway's Law head-on and potentially
    tackle that beast in the best way, as long as you build up the necessary lines
    of communication.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面要有意识地处理将会直面康威定律，并可能以最佳方式解决这个问题，只要您建立必要的沟通线路。
- en: It also allows you to scale the two parts of the system separately—both in terms
    of team scaling and resource scaling—which, if you ever need that flexibility,
    could end up saving you from a certain group of headaches.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它还允许您分别扩展系统的两个部分——团队和资源的扩展——如果您需要这种灵活性，可能会帮助您避免某些头痛问题。
- en: And I'm gonna be honest, building distributed systems like this is a cool problem
    to solve and will be a point of growth for many of your engineers.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，说实话，构建这样的分布式系统是一个很酷的问题需要解决，并且会成为你的许多工程师成长的一个点。
- en: '[¶](#content-so-why-are-spas-bad-again "Permalink")So, why are SPAs bad again?'
  id: totrans-split-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[¶](#content-so-why-are-spas-bad-again "永久链接")那么，为什么单页面应用（SPA）又不好？'
- en: Yeh, so far this all sounds great, right? Well, just letting ol' Conway right
    into your living room isn't exactly the best idea.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，到目前为止，这一切听起来都很棒，对吧？但是，让老康威直接进入你的客厅并不是最好的主意。
- en: Aside of all the points that Greg makes in his article (if you haven't read
    it yet, go read it), I want to present three *extra* reasons why I think an SPA
    is a bad idea.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 除了格雷格在他的文章中提到的所有观点（如果你还没有读过，去读一读），我想提出三个*额外*的理由，解释为什么我认为单页面应用是个坏主意。
- en: '[¶](#content-your-front-end-and-back-end-get-decoupled "Permalink")Your front-end
    and back-end get decoupled!'
  id: totrans-split-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[¶](#content-your-front-end-and-back-end-get-decoupled "永久链接")你的前端和后端被解耦！'
- en: '**Your back-end and front-end are *always* coupled.** So trying to split them
    in anything but the most extreme circumstances is an exercise in futility.'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**你的后端和前端*永远*是紧密结合的。** 因此，除了在极端情况下进行分离外，试图将它们分开是徒劳的。'
- en: I think this is probably the worst part of this whole story.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这可能是整个故事中最糟糕的部分。
- en: If your back-end team want to move in one direction, they've got to align with
    the front-end team. If timings and priorities don't work out, it's going to force
    someone to either put a hold on some work that really needs sorting out or do
    some grunt work just to patch over a hole that's about to appear.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的后端团队希望朝一个方向发展，他们必须与前端团队保持一致。如果时间和优先级无法协调，将会迫使某人要么暂停一些真正需要解决的工作，要么只是为了填补即将出现的漏洞而做一些苦力活。
- en: '**This is communication overhead.** It adds risk. It adds complexity. It adds
    meetings into engineers'' calendars. It adds friction, and stress, and distraction.'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是沟通的额外开销。** 它增加了风险。它增加了复杂性。它增加了工程师日程表中的会议。它增加了摩擦、压力和分心。'
- en: '**It flies in the face of that number one principle: let your teams focus and
    be happy.**'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**这违背了第一原则：让你的团队专注并保持快乐。**'
- en: This literally costs you money one way or another, cost that you could avoid.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上会让你在某种程度上花费金钱，这是你可以避免的费用。
- en: Deployments get unavoidably riskier in ways that are [super difficult to test](https://github.com/asatarin/testing-distributed-systems)
    because testing distributed systems is really hard.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试分布式系统的过程中，测试分布式系统确实非常困难，这使得部署不可避免地变得更加冒险。
- en: Again, this might all be fine, *in the most extreme cases*, where you *need*
    the decoupling. Then this extra expense, and complexity, and churn-causing evil,
    is just a *necessary* evil that you have to learn to swallow and live with.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这可能在*极端情况下*都是可以接受的，当你*需要*解耦时。那么这些额外的费用、复杂性和导致变动的邪恶，只是一个你必须学会接受和应对的*必要*邪恶。
- en: '*But I''ve got `x` engineers, `y1` are front-end, `y2` are back-end. What do
    I do?*'
  id: totrans-split-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*但我有`x`个工程师，其中`y1`个是前端，`y2`个是后端。我该怎么办？*'
- en: I would strongly recommend that one of your engineering groups need to roll
    up their sleeves and get on learning the other group's code, tooling and responsibilities.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议你的一个工程团队需要卷起袖子，开始学习另一个团队的代码、工具和责任。
- en: 'This will have multiple benefits: career progression and learning opportunities,
    [increased bus factor](https://en.wikipedia.org/wiki/Bus_factor), fewer meetings
    and more collaboration.'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带来多重好处：职业发展和学习机会，[增加的公交因子](https://zh.wikipedia.org/wiki/%E5%85%AC%E4%BA%A4%E5%9B%A0%E5%AD%90)，减少会议并增加合作。
- en: Sure there will be challenges too, but they won't be as big or as painful as
    the other challenges you'd face with an SPA.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这也会带来挑战，但它们不会像使用单页面应用时面临的其他挑战那样大或痛苦。
- en: '[¶](#content-it-may-hurt-customisability "Permalink")It may hurt customisability'
  id: totrans-split-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[¶](#content-it-may-hurt-customisability "永久链接")这可能会影响可定制性'
- en: As I mentioned earlier, the reason I got into Vue at all was because other tech
    I was using required me to. In both Statamic and Laravel Nova, the choice of Vue—well,
    not specifically Vue, but rather a reactive front-end framework—made sense because
    *at the time* it really was the best way to build flexible, reactive front-ends.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，我之所以接触到Vue，是因为我使用的其他技术需要它。在Statamic和Laravel Nova中，选择Vue——嗯，并不是特别是Vue，而是一种响应式前端框架——在当时是构建灵活、响应式前端的最佳方式。
- en: And both of those tools needed that power and have become fantastic tools because
    of it.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个工具都需要那种力量，因此它们已经因此成为了出色的工具。
- en: 'But there is one pain point that it''s created that''s quite hard to escape:
    **the customisation story for each of these is harder because of it**.'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这也导致了一个相当难以避免的痛点：**每个工具的定制故事都更难了**。
- en: How so?
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么呢？
- en: Basically, because each tool needs to build the assets to ship their product.
    And once they're built it's hard for third-parties to build on what's already
    there.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，因为每个工具都需要构建资产来发布他们的产品。一旦构建完成，第三方就很难在已有的基础上进行构建。
- en: How is it harder? Let's say I'm creating a Statamic add-on that allows CMS owners
    to post to social media from their control panel. As Statamic uses Vue and already
    has a bunch of components I can leverage, I am going to use some of them.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会更难呢？假设我正在创建一个 Statamic 的插件，允许 CMS 拥有者从他们的控制面板发布到社交媒体。由于 Statamic 使用 Vue
    并且已经有一堆组件可以利用，我打算使用其中一些。
- en: But I'm also going to add some of my own functionality that doesn't already
    exist within Statamic. Now what happens? Well I build the Javascript... but wait.
    I can't change the bundled JS that's part of Statamic core.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 但我还要添加一些在 Statamic 核心中不存在的功能。现在会发生什么？好吧，我构建了 Javascript……但等等。我不能改变作为 Statamic
    核心一部分的捆绑 JS。
- en: I have to build my own JS and load it at the right time, something I'm not in
    control of. Thankfully the Statamic team (building on tooling from the Vue & JS
    community) have worked hard to [make this relatively easy](https://statamic.dev/extending/addons#assets),
    but my tool choice is now limited by what they support - if they're using Vue
    2, I have to use Vue 2; if I don't like Vite or Webpack, tough luck.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须构建自己的 JS 并在适当的时候加载它，这是我无法控制的。幸运的是，Statamic 团队（借助 Vue 和 JS 社区的工具）已经努力工作来[使这相对容易](https://statamic.dev/extending/addons#assets)，但我的工具选择现在受到他们支持的限制
    - 如果他们使用 Vue 2，我就必须使用 Vue 2；如果我不喜欢 Vite 或 Webpack，那就太糟糕了。
- en: And on top of that, the builds have to happen *at the client's end*, which means
    we're now offloading some of the responsibility of making this whole thing work
    to people who don't need or want to know anything about this stuff. They just
    want to install your thing and get on with their jobs and lives.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，构建现在必须发生在*客户端*，这意味着我们现在正在将使整个系统正常运行的责任部分转移给那些不需要或不想了解这些东西的人们。他们只是想安装你的东西，然后继续他们的工作和生活。
- en: '*Why* is this such a pain though? It used to be (in other platforms) that I
    could just load some extra JS file into the admin interface and do what I want.'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*为什么*这么麻烦呢？在其他平台上，我只需将一些额外的 JS 文件加载到管理界面中并做我想做的事情就可以了。'
- en: Honestly, we probably should never have been doing that either. Hands up, how
    many of you have seen a WordPress installation that tries to load 2 or more different
    versions of jQuery? 🙋🏼‍♂️
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 老实说，我们可能本不应该那样做。举手，你们中有多少人看到过 WordPress 安装尝试加载 2 个或更多不同版本的 jQuery？ 🙋🏼‍♂️
- en: So these build tools go some way to alleviating *some* problems, but in the
    process have introduced so many layers of protection and abstraction that it presents
    a brain-melting, Japanese puzzle box to unlock.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这些构建工具在缓解*一些*问题方面走了一段路，但在此过程中引入了如此多的保护层和抽象层，以至于它形成了一个令人脑洞大开、难以理解的日本益智游戏。
- en: And all this JavaScript flying around is really unsafe, because JavaScript is
    completely malleable on the client side.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些飞来飞去的 JavaScript 真是不安全，因为客户端的 JavaScript 是完全可塑的。
- en: That's meant library creators have had to go to some unusual lengths to protect
    the state of the application and encapsulate the code in attempts to make it safer
    and more portable.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 那意味着图书馆创建者不得不采取一些不寻常的措施来保护应用程序的状态，并尝试封装代码，以使其更安全和更易移植。
- en: I won't pretend to understand all of the requirements, pre-requisites and implications
    for why built JavaScript assets are packaged up in a complex soup of function
    calls and obfuscated code, but suffice to say this makes building on top of pre-existing
    code that much harder.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会假装理解为什么构建的 JavaScript 资产被打包成一堆函数调用和混淆的代码的所有要求、先决条件和影响，但可以说这使得在现有代码基础上进行构建变得更加困难。
- en: 'The web standards track is working to make this easier: we have [Web Components](https://developer.mozilla.org/en-US/docs/Web/API/Web_components)
    and [module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)
    starting to come through which should alleviate some of this.'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: Web 标准正在努力使这一切变得更容易：我们有[Web 组件](https://developer.mozilla.org/en-US/docs/Web/API/Web_components)和[模块](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules)开始出现，这应该能减轻一些问题。
- en: But if you're not building with those standard in play—I understand, it might
    not be possible because of browser support etc—and you want to expose your user's
    to third-party plugins/add-ons, then *you've* got to figure out how to make it
    easy for other developers.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你不按照这些标准构建——我理解，可能由于浏览器支持等原因而不可能——而你想让用户接触到第三方插件/附加组件，那么*你*必须想办法让其他开发者能够轻松使用。
- en: Some of that's going to require the specific implementation, the other part
    is going to be documentation. No matter how you cut it, it's going to be harder
    to get right than if you had server-side rendered views that you allow your third-party
    developers to load at runtime.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一部分需要特定的实现，另一部分是文档。不管怎样，要比你在服务器端渲染视图然后允许第三方开发者在运行时加载要困难得多。
- en: '[¶](#content-performance-will-suffer "Permalink")Performance will suffer'
  id: totrans-split-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[¶](#content-performance-will-suffer "永久链接")性能会受到影响'
- en: This isn't really an *extra* reason as Greg did touch on this a little already,
    but I wanted to go harder on performance.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是一个*额外*的理由，因为Greg已经稍微提到了，但我想更深入地讨论性能问题。
- en: '**You should never choose to build an SPA because of some supposed performance
    benefit.**'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**你绝不应该因为某种所谓的性能好处而选择构建SPA。**'
- en: That is the wrong hill to try and defend for many reasons, but primarily because
    you've got the whole of the web stack—on horses, with bazookas—nipping at your
    heels.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 出于许多原因，那是错误的立场要去捍卫，但主要是因为你的整个网络堆栈——骑在马上，手持火箭筒——正紧追在你的后面。
- en: Sure, it may take a little while for web standards to get ratified and then
    rolled out, but the reality is that it's *only* a matter of time.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，要等待一段时间以使网页标准得到批准和推广，但现实情况是这只是个*时间*问题。
- en: We now have wide browser support for [QUIC / HTTP/3](https://en.wikipedia.org/wiki/HTTP/3)
    (which brings faster downloads and reduced server load) and things like [`103
    Early Hints`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/103) response
    headers (which let us tell browsers what they should prioritise pre-loading),
    making the standard, non-SPA web even more performant. (And yes, some of this
    benefits SPAs too!)
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经广泛支持[QUIC / HTTP/3](https://zh.wikipedia.org/wiki/HTTP/3)（带来更快的下载和减少服务器负载）以及像[`103
    Early Hints`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/103)这样的响应头（让我们告诉浏览器应该优先预加载什么），使得标准的非SPA网页性能更上一层楼。（当然，这些好处也有利于SPA！）
- en: Sure, you can argue some of this advancement may have been *driven* by SPAs
    and their apparent benefits. But there's some inevitability to all of this (both
    the appearance of SPAs and the advancement of HTTP) which makes the whole argument
    moot in my opinion.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以争辩说部分这种进步可能是由于SPA及其明显的好处所推动的。但在我看来，这些都是不可避免的（SPA的出现和HTTP的进步），这使得整个论点都变得毫无意义。
- en: As adoption and overall performance of the web platform increases, SPAs will
    even start to feel slow in comparison. Some feel slow already!
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 随着网络平台的采用和整体性能的提升，即使对比起来，SPA也会开始感到慢。有些已经感觉慢了！
- en: That's because so much of the heavy lifting is left to the userland threads
    of the in-browser JavaScript engine instead of the lower-level compiled languages,
    the ones used to build the core browser engine itself (C++, Rust, Swift etc).
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为在浏览器内JavaScript引擎的用户空间线程中留下了大部分繁重的工作，而不是像用于构建核心浏览器引擎本身的低级编译语言（C++、Rust、Swift等）。
- en: That translates to a poorer experience in your app, and a penalty for your users.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致你的应用体验变差，对用户来说也是一种惩罚。
- en: While it's not impossible for JavaScript to be as fast or faster than the actual
    browser it's running in, it's just such a long way for it to get there **it's
    a no-brainer at this stage to let the browser do what the browser does best**
    instead of trying to replicate all of that in JS.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管JavaScript要比它运行的实际浏览器更快或更快不是不可能，但它还有很长的路要走，**在这个阶段让浏览器做它擅长的事情，显然是明智的选择**，而不是试图在JS中复制所有这些。
- en: 'So don''t! Use JavaScript the way it was intended: as a sugar-coating to enhance
    the pages, not to build entire pages.'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此不要这么做！要按照JavaScript的本意来使用它：作为增强页面的糖衣，而不是构建整个页面。
- en: I mean, you wouldn't eat a donut made entirely out of sugar, would you?
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，你不会吃一整个由糖制成的甜甜圈，对吧？
- en: Again, in the *extreme cases*, maybe you would. Maybe for this donut-sized/-shaped
    sugar torus, you have an appropriately-sized dough-only counterpart, both of which
    you consume in close proximity...
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，在*极端情况*下，也许你会。也许对于这种甜甜圈大小/形状的糖果环，你有一个适当大小的仅面团的对应物，两者都在近距离内消耗...
- en: I donut-know where this analogy is going.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道这个比喻要表达什么。
- en: '[¶](#content-so-whats-the-alternative "Permalink")So what''s the alternative?'
  id: totrans-split-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[¶](#content-so-whats-the-alternative "永久链接")那么，还有什么选择呢？'
- en: '**You, dear reader, are not in the most extreme case.** Probably not even close!
    **And you may never be.**'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**亲爱的读者，你不是最极端的案例。** 可能甚至远远不是！ **你可能永远不会是。**'
- en: So, if you haven't started building an SPA, don't!
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你还没有开始构建单页应用，别这么做！
- en: Keep your code together in a single application where the front-end is rendered
    by the back-end, and then you can test and deploy it as a single unit. And yes,
    you can even do that without Docker 😱
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 把你的代码整合到一个单一的应用程序中，由后端渲染前端，然后你可以将其作为一个单一单元进行测试和部署。是的，甚至可以不用 Docker 😱
- en: Create it as a fully server-rendered, multi-page application with page reloads
    and everything. Go on! I double dare you.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 把它创建为一个完全由服务器渲染的多页应用，包括页面重新加载和所有功能。来吧！我双倍挑战你。
- en: If you really want/need the reactivity, try something like Livewire, [Hotwire](https://hotwired.dev/)
    or [HTMX](https://htmx.org/).
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的想要/需要响应性，可以尝试类似Livewire、[Hotwire](https://hotwired.dev/)或者[HTMX](https://htmx.org/)这样的东西。
- en: You can do this all the way up to many millions of users per day and it will
    be fine, which you are a long way from.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以一直做到每天有数百万用户使用，并且一切都会很好，你还远远没有达到那个水平。
- en: Trust me, your front-end will never meaningfully need to move faster than your
    back-end, and vice-versa.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 相信我，你的前端永远不会有比后端更快的必要，反之亦然。
- en: If you're already running an SPA and are contemplating bringing the two parts
    of the donut back together, do it! Bite your lip, close your eyes, and just do
    it.
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在运行单页应用，并且正在考虑把这个圆形的两部分重新结合在一起，那就去做吧！咬紧牙关，闭上眼睛，直接去做。
- en: '[Relevant](https://x.com/dhh/status/1753078515694784821?s=46)'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[相关链接](https://x.com/dhh/status/1753078515694784821?s=46)'
