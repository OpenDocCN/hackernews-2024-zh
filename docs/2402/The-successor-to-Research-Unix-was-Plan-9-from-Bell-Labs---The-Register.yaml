- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:05:58'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: The successor to Research Unix was Plan 9 from Bell Labs • The Register
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.theregister.com/2024/02/21/successor_to_unix_plan_9/](https://www.theregister.com/2024/02/21/successor_to_unix_plan_9/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: FOSDEM 2024 To move forwards, you have to let go of the past. In the 1990s that
    meant incompatibility, but it no longer has to.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: This article is the third based on *The Reg* FOSS desk's [talk at FOSDEM 2024](https://fosdem.org/2024/schedule/event/fosdem-2024-3095-one-way-forward-finding-a-path-to-what-comes-after-unix/).
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: The first part of [this short series](https://www.theregister.com/Tag/One%20Way%20Forward)
    talked about the [problem of software bloat](https://www.theregister.com/2024/02/12/drowning_in_code/).
    The second talked about the [history of UNIX](https://www.theregister.com/2024/02/16/what_is_unix/),
    and how its development continued at Bell Labs after commercial vendors picked
    up earlier versions and took them to market.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: One of the results of this pattern of development was that Eighth Edition Unix
    didn't have much industry impact, and little if anything drew significantly upon
    the Ninth and Tenth Editions. Despite this, work continued, but what followed
    the Tenth Edition wasn't called "Unix" at all. Instead it was dubbed "Plan 9 from
    Bell Labs." This time, we want to look at why Plan 9 wasn't called Unix in the
    first place, and what can be done about that using features of 21st century hardware
    and software.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '*The Reg* FOSS desk has [looked at Plan 9](https://www.theregister.com/Print/2013/11/01/25_alternative_pc_operating_systems/)
    a few times, including a more recent [look at the most active fork, 9Front](https://www.theregister.com/2022/11/02/plan_9_fork_9front/).
    Last year, we [discussed the significance of 9Front](https://www.theregister.com/2023/12/01/9front_humanbiologics/),
    especially comparing its size with that of modern Linux.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Plan 9 took the concepts that led to Unix, and rethought them for the 1990s.
    This, like any big change, had consequences, and not all of them were positive.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: The good bits
  id: totrans-split-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Plan 9 was in some way a second implementation of the core concepts of Unix
    and C, but reconsidered for a world of networked graphical workstations. It took
    many of the trendy ideas of late-1980s computing, both of academic theories and
    of the computer industry of the time, and it reinterpreted them through the jaded
    eyes of two great gurus, [Kenneth Thompson](https://www.theregister.com/2023/03/17/ken_thompson_is_a_maccie/)
    and [Dennis Ritchie](https://www.theregister.com/2011/10/13/dennis_ritchie_obituary/)
    ([and their students](https://www.theregister.com/2011/05/05/google_go/?page=2))
    – arguably, design geniuses who saw their previous good ideas misunderstood and
    misinterpreted.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: In Plan 9, networking is front and center. There are good reasons why this wasn't
    the case with Unix – it was being designed and built at the same time as [local
    area networking](https://www.cisco.com/c/en/us/products/switches/what-is-a-lan-local-area-network.html)
    was being invented. [UNIX Fourth Edition](https://gunkies.org/wiki/UNIX_Fourth_Edition),
    the first version written in C, was released in 1973 – the same year [as the first
    version of Ethernet](https://www.theregister.com/2023/06/30/ethernet_50th_birthday/).
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: Plan 9 puts networking right into the heart of the design. While Unix was later
    used as the most common OS for standalone workstations, Plan 9 was designed for
    clusters of computers, some being graphical desktops and some shared servers.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: Plan 9 takes the idea of "everything is a file" and it makes it real. In Unix,
    it's really just an empty marketing slogan. Lots of things, such as trees of process
    IDs, aren't part of the file system. In some versions, they can be seen via bolted-on
    extras, such as the [`/proc`](https://eschrock.dtrace.org/2004/06/25/a-brief-history-of-proc/)
    in-memory [pseudo file system](https://superuser.com/questions/1198292/what-is-a-pseudo-file-system-in-linux)
    – but you won't find a `/proc` in macOS, for instance.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: Under [Rio](https://wiki.xxiivv.com/site/rio.html), the current Plan 9 window
    system (which replaced the [older 8½ system](http://doc.cat-v.org/plan_9/4th_edition/papers/812/)),
    on-screen windows are represented as directories in the file system, and their
    contents are files. Other Plan 9 machines on the network are visible in your file
    system – subject to access permissions, of course – and you can see some of their
    file system right inside yours.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Because everything really is a file, displaying a window on another machine
    can be as simple as making a directory and populating it with some files. You
    can start programs on other computers, but display the results on yours – all
    without any need for X11 or any visible networking at all.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: This means all the Unixy stuff about `telnet` and `rsh` and `ssh` and [X forwarding](https://goteleport.com/blog/x11-forwarding/)
    and so on just… goes away. It makes X11 look very overcomplicated, and it makes
    Wayland look like it was invented by Microsoft.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: As everything goes through the file system, it eliminates much of one of the
    biggest complex problems of microkernel designs – inter-process communications.
    Plan 9 is [not a microkernel](https://groups.google.com/g/comp.os.plan9/c/OZkgCN8jdAs/m/La-KQMbuhP0J)
    as such; it's more that in some ways, it makes the defining features of microkernels
    somewhat irrelevant.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: Plan 9 is not just a replacement kernel, or the layers above that. It's also
    a clustering system, and a network filesystem, and a container management system.
    In terms of functional blocks, we are talking about replacing Linux, and Ceph
    or Gluster or whatever, and all hypervisors, and all container systems, and Kubernetes
    and all that.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: As it was conceived as one tool for all this, it is much, much simpler than
    the gigabytes of complexity layered on top of Linux that makes Linux able to do
    this stuff.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: Even so, Plan 9 is tiny. I talked to a couple of people from the 9front community
    when I wrote about it in November, and one chap gave me some numbers.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: (That's including all the apps, demos and games, including Doom.)
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: 'As for complexity: the Plan 9 kernel has *38* system calls.'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: I've not been able to find a firm number for Linux, but I have some estimates.
    As of 2016, kernel 4.7 had about 335\. By 2017 that was up to 341\. I've tried
    to estimate the number for kernel 6.8 and I think there are 520 across all architectures.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: For comparison, Kubernetes alone is about two million lines of code. This is
    the price of bolting on a cluster management layer, instead of embedding it into
    your design.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: A brief aside about file systems
  id: totrans-split-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case this all sounds a bit too theoretical, one of the problems if everything
    is in the file system is, of course, deciding where everything is located.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: Back in 2011, I [wrote about containers](https://www.theregister.com//Print/2011/07/18/brief_history_of_virtualisation_part_3)
    and called them a sysadmin's dream come true. That was about the same time that
    Docker launched.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: Containers are a sort of `chroot` on steroids. All the file paths in a given
    process start at a new root directory, and since in Unix almost everything is
    relative to the root directory, changing that isolates that process (and any children)
    from the rest of the OS.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays there are several forms of containerization on Linux, but [some of
    them](https://www.theregister.com/2016/07/05/containers_state_of_the_art/) use
    the Linux kernel's [`cgroups` feature](https://www.theregister.com/2014/05/23/google_containerization_two_billion/),
    which came out of Google. This separates the processes inside containers from
    one another by putting them inside different namespaces.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that Unix, and therefore Linux, doesn't just have one global
    namespace because when it was designed these ideas were a bit new and undeveloped.
    Unix concepts that aren't part of a single namespace include user IDs, and group
    IDs, and process IDs, and all sorts of things that aren't represented in or expressed
    through that single global file system.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: This is why [cgroups namespaces](https://man7.org/linux/man-pages/man7/cgroup_namespaces.7.html)
    exist – to split those namespaces up as well for more complete isolation. The
    problem is that it's a later, bolted-on feature so just as anything that works
    with `/proc` won't work on macOS – [or on OpenBSD](https://stackoverflow.com/questions/20465780/process-information-in-openbsd)
    – then anything that uses cgroups namespaces won't work on FreeBSD.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: Back to the Plan
  id: totrans-split-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Namespaces are a [core part](http://doc.cat-v.org/plan_9/4th_edition/papers/names)
    of the Plan 9 design, and every individual process under Plan 9 has its own namespace.
    Because far more of the communications between parts of the OS is done via the
    file system. Thus, every process has its own view of the file system.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: So, in effect, every process is in a container… Note, in a project [announced
    in 1990](https://dl.acm.org/doi/10.1145/155848.155861), a full decade before the
    first release of [FreeBSD jails](https://wiki.freebsd.org/Jails) in [FreeBSD 4.0](https://lists.freebsd.org/pipermail/freebsd-announce/2000-March/000529.html).
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: 'The bad part: it flopped'
  id: totrans-split-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If Plan 9 is so gosh-durned clever, why aren't we all using it? Well, some reasons
    are easy to enumerate.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, just as Unix itself at the beginning, it was an experimental OS. In
    their early years, they weren't intended for production use, and Plan 9 was a
    tool for research into operating system concepts. It was only licensed for commercial
    use with the Second Edition [in 1995](https://web.archive.org/web/20080706034735/http://9fans.net/archive/1995/07/16)
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, back in the 20th century, Plan 9 wasn't open source. But in 2000,
    the Third Edition [was released as FOSS](https://www.theregister.com/2000/06/09/plan_9_goes_open_source/)
    under its own custom licence agreement, and then in 2014 it was [re-licensed under
    the GPL](https://www.theregister.com/2014/02/14/plan_9_moves_to_gnu_space/).
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: Thirdly, Plan 9's very clean, minimalist conceptual design brings penalties.
    Since there is no "real" underlying view of the "true" file system, that means
    that there are quite a lot of things Plan 9 simply does not do. There are no links,
    either symbolic or hard.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: Originally, its `mv` command simply [copied files then deleted the originals](https://groups.google.com/g/comp.os.plan9/c/1ghzz_q1NlE).
    This is the price of having the kernel talk to the local file system the same
    way that it talks to the file systems on other machines – via the [9P protocol](http://9p.cat-v.org/documentation/).
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: (Yes, this can be slow, and sounds extremely limiting, but this vulture was
    some five years into his career when the first Microsoft OS with hard links, Windows
    NT 3.1, was launched. Until MS-DOS 5 in 1991, DOS didn't have a `MOVE` command,
    and no Microsoft OS had anything like symbolic links prior Windows 95's "shortcuts.")
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: Plan 9 is unfriendly, unforgiving, and hard to use. I am not some frothing Plan
    9 advocate. I do not routinely use it myself, although I keep a copy of 9front
    around in a VM. Over the years, I occasionally get a fresh version and play around
    with it.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: '[9front](http://9front.org/) has come quite a long way from the AT&T version.
    A non-guru such as myself can install it and try it, which is more than I could
    with the original version. But, as the [FQA page says](http://fqa.9front.org/fqa0.html):'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: Plan 9 has a GUI, but it's very strange. But then it's a very strange OS.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: The thing is, though, that when I started playing with Linux – roughly around
    [Slackware 3.0 in 1995](https://www.linux.co.cr/distributions/review/1995/0930.html),
    with kernel 1.0 – Linux was extremely basic, very unfriendly, and not very much
    actual use for anything. Linux has come an extraordinarily long way since then,
    even if it [still has little desktop penetration](https://www.theregister.com/2023/07/18/linux_desktop_debate/).
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: The killer is that Plan 9 is different enough from Unix – any Unix – that it's
    incompatible with Unix. Its creators did not call it Unix Eleventh Edition for
    good reasons. It changes fundamental parts of the design in ways that mean that
    bringing existing source code across and recompiling it won't work.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: To pick a trivial example, Plan 9's version of C [prohibits nested `#include`
    directives](http://doc.cat-v.org/plan_9/4th_edition/papers/comp). Most non-trivial
    C programs contain lots of files, and those files all contain lots of `#include`
    statements. In Plan 9 C, only the top-level C file in a program can `#include`
    other files, and header files are not allowed `#include` at all. This means a
    bit more work for the programmer, but [it makes compilation much faster](https://go.dev/talks/2012/splash.article).
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: It was good, but it wasn't good enough
  id: totrans-split-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to displace an existing, well-established and deeply entrenched product
    – in this case, conventional Unix – a new successor product has to be significantly
    better than its forerunner to make it worth the cost of switching, even if that
    cost is just in time and effort, not money. We don't know of a snappy term for
    this rule, but there may be one, perhaps akin to Clayton Christensen's [revolutionary
    innovation](https://en.wikipedia.org/wiki/Disruptive_innovation). To paraphrase
    an old OS/2 marketing slogan, Plan 9 was "a better Unix than Unix" – but it wasn't
    better enough.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: As another small side-note, Plan 9 wasn't the end of the original Unix line.
    There were ten editions of Research Unix, then a successor that was so different
    it wasn't Unix any more. That's Plan 9, and in a way, it is "UNIX 2.0."
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: There is also a very different successor to Plan 9 itself. It is called [Inferno](https://www.vitanuova.com/inferno/),
    and it is, in a manner of speaking, "UNIX 3.0." I'm not going to go into any detail
    about it here today, as this article is already long enough, but it's interesting
    and well worth investigation.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: 9front is clever and impressive. It's also weird and inscrutable, but so was
    Linux around the time of Plan 9's first commercial release … and now look at it.
    Linux powers ChromeOS and Android, which means that aside from countless invisible
    servers, several billion people use Linux every day, even though they've never
    even heard of it.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: Even most "Linux distributions" software for the tiny number of people who know
    what an "operating system" is and care which one they use, are pretty easy now.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: But Plan 9 is not Unix, and it can't run Unix programs. You couldn't simply
    port Firefox or LibreOffice to Plan 9, as has been done to Windows and macOS and
    all the BSDs.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: There are tools to help with stuff like this, but they are a little rudimentary
    because the sort of people who value Plan 9 either don't want such things, or
    do things like that on other computers.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: For example, there is a Plan 9 Linux emulator, comparable to [the FreeBSD linuxulator](https://wiki.freebsd.org/Linuxulator).
    Plan 9's is called [Linuxemu](https://web.archive.org/web/20231119190241/http://9p.io/wiki/plan9/Linux_emulation/index.html)).
    It's old enough that it's 32-bit only, but until a few years ago so were [Solaris
    LX zones](https://docs.oracle.com/cd/E19455-01/817-1592/gepea/index.html) – then
    Joyent modernized them for the [SmartOS implementation](https://wiki.smartos.org/lx-branded-zones/).
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: There is a Linux compatibility layer for porting source code [called APE](http://doc.cat-v.org/plan_9/4th_edition/papers/ape).
    There's an X11 server, [Equis](https://web.archive.org/web/20230927210129/https://9p.io/wiki/plan9/X11_installation/index.html).
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: More importantly, 9front has a hypervisor [called VMX](http://man.9front.org/1/vmx),
    which uses the built-in virtualization of Intel and AMD chips. There's even a
    [guide](https://wiki.9front.org/vmx) to installing Void Linux in it. A VM can
    have just one core, but it is there and it does work, although, as the documentation
    says, VMX can and will crash your kernel.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: So here is my idea.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: It's 2024\. We all have 64-bit machines now, and x86-32 is fading fast. Most
    distros no longer support it; even one of the last holdouts, Debian, is [planning
    to drop support](https://www.theregister.com/2023/12/19/debian_to_drop_x86_32/)
    in the next release.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: Modern PCs have lots of memory and lots of storage. These days, in Linux land,
    there are a number of "microVMs" such as [Amazon's Firecracker](https://www.theregister.com/2018/11/27/aws_sets_firecracker/).
    Recently that [gained support for FreeBSD guests](https://www.theregister.com/2023/08/29/freebsd_boots_in_25ms/)
    too. There are others, such as [Intel Clear Containers](https://www.theregister.com/2015/05/21/intel_wants_containers_to_be_alone_together_naturally/),
    which merged into [Kata Containers](https://www.theregister.com/2018/05/23/vmcontainer_chimera_kata_containers_emerges_from_lab/),
    and so on.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: MicroVMs can start a guest in milliseconds, and they are used for ["serverless"](https://www.theregister.com/Tag/Serverless/)
    cloud computing. Another lie, but let's not get into that.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: The idea is tiny VMs that are as quick and as ephemeral as containers. You start
    them, typically to run just one program, and when that completes, the VM exits.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: If it were possible to run a microVM on 9front, you could, in principle, start
    a Linux app, use it, and quit it again, and on a modern computer not notice the
    delay from starting the VM.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
- en: That also reduces the need for a Linux emulator. This is a complex task, and
    one that needs constant maintenance to track the moving target of the current
    Linux kernel. So let it go.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: There's an X server. If that were running already, or a dependency, new microVMs
    could connect to it, and thus run seamlessly inside Rio. I suspect that Equis
    needs some love and maintenance, and this would be very flaky at first, but the
    component parts of this tech are already out there.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
- en: There's already a model for this. [Qubes](https://www.qubes-os.org/) has been
    around for [over a decade](https://www.theregister.com/2012/09/05/qubes_secure_os_released/)
    and it is [in active development](https://www.theregister.com/2022/02/09/qubes_vm_upgrade/).
    All user programs run inside dedicated VMs. In the case of Qubes, this is for
    additional security. Qubes is based on Fedora and the Xen hypervisor, but it's
    the concept rather than the implementation that is important here.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: This need not be focused on graphical apps. So long as the app in a microVM
    gets its input from the file system and writes its output to the file system as
    well, this could enable Linux apps to offer some degree of interoperability with
    native Plan 9 ones, without bloating Plan 9 with all of the complexity of a modern
    Linux system. The messy stuff is kept neatly boxed up.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
- en: 'There is potential here for incrementally bringing some tools across from Unix
    to Plan 9 in a way that was impossible when Plan 9 was built. Stage one: isolating
    apps in VMs. Stage two: bring the most useful smaller, simpler apps across to
    APE or something like it. Stage three: potentially rewrite the essentials as native
    Plan 9 apps. (For console apps, a native version of something like [ncurses](https://tldp.org/HOWTO/NCURSES-Programming-HOWTO/intro.html)
    would make life a great deal easier.)'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Over time, a move like this would inevitably mean that Plan 9 itself gradually
    got bigger and more complex … but then there already is a successor to Plan 9
    in the form of the [Inferno OS](https://github.com/inferno-os/inferno-os). As
    [others have observed before](https://yotam.net/posts/linux-namespaces-are-a-poor-mans-plan9-namespaces/):'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
- en: This is just one option of many. But it's a potential path forward to a cleaner,
    less bloated future. There is a postscript to this coming soon, as well – the
    final part of the original FOSDEM talk looked at stripping down Linux into a dedicated
    VM operating system, with all the bare-metal functionality removed. ®
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
