["```\n63 62 61 60 ... 48 47 46 45 ... 3 2 1 0 \n```", "```\n 6 13 20 27 34 41 48   55 62     Additional row\n+---------------------+ \n| 5 12 19 26 33 40 47 | 54 61     top row\n| 4 11 18 25 32 39 46 | 53 60\n| 3 10 17 24 31 38 45 | 52 59\n| 2  9 16 23 30 37 44 | 51 58\n| 1  8 15 22 29 36 43 | 50 57\n| 0  7 14 21 28 35 42 | 49 56 63  bottom row\n+---------------------+ \n```", "```\n. . . . . . .\n. . . . . . .\n. . . . . . .\n. . . O . . .\n. . . X X . .\n. . O X O . .\n-------------\n0 1 2 3 4 5 6  colum (counting starts with 0 from left to right) \n```", "```\n 0 0 0 0 0 0 0  0 0 0 0 0 0 0   6 13 20 27 34 41 48\n. . . . . . .  0 0 0 0 0 0 0  0 0 0 0 0 0 0   5 12 19 26 33 40 47\n. . . . . . .  0 0 0 0 0 0 0  0 0 0 0 0 0 0   4 11 18 25 32 39 46\n. . . . . . .  0 0 0 0 0 0 0  0 0 0 0 0 0 0   3 10 17 24 31 38 45\n. . . O . . .  0 0 0 0 0 0 0  0 0 0 1 0 0 0   2  9 16 23 30 37 44\n. . . X X . .  0 0 0 1 1 0 0  0 0 0 0 0 0 0   1  8 15 22 29 36 43\n. . O X O . .  0 0 0 1 0 0 0  0 0 1 0 1 0 0   0  7 14 21 28 35 42\n-------------\n0 1 2 3 4 5 6 \n```", "```\n... 0000000 0000000 0000010 0000011 0000000 0000000 0000000 // encoding Xs\n... 0000000 0000000 0000001 0000100 0000001 0000000 0000000 // encoding Os\n      col 6   col 5   col 4   col 3   col 2   col 1   col 0 \n```", "```\n 10101110\n^ 10011111\n----------\n  00110001 \n```", "```\n 10101110\n& 10011111\n----------\n  10001110 \n```", "```\n 6 13 20 27 34 41 48\n. . . . . . .   5 12 19 26 33 40 47\n. . . . . . .   4 11 18 25 32 39 46\n. . . . . . .   3 10 17 24 31 38 45\n. . . O . . .   2  9 16 23 30 37 44\n. . . X X . .   1  8 15 22 29 36 43\n. . O X O . .   0  7 14 21 28 35 42\n-------------\n0 1 2 3 4 5 6 \n```", "```\n{0, 7, 15, 24, 30, 35, 42} \n```", "```\nvoid makeMove(int col) {\n    long move = 1L << height[col]++; // (1)\n    bitboard[counter & 1] ^= move;  // (2)\n    moves[counter++] = col;         // (3)\n} \n```", "```\nvoid undoMove() {\n    int col = moves[--counter];     // reverses (3)\n    long move = 1L << --height[col]; // reverses (1)\n    bitboard[counter & 1] ^= move;  // reverses (2)\n} \n```", "```\n 6 13 20 27 34 41 48   55 62     Additional row\n+---------------------+ \n| 5 12 19 26 33 40 47 | 54 61     top row\n| 4 11 18 25 32 39 46 | 53 60\n| 3 10 17 24 31 38 45 | 52 59\n| 2  9 16 23 30 37 44 | 51 58\n| 1  8 15 22 29 36 43 | 50 57\n| 0  7 14 21 28 35 42 | 49 56 63  bottom row\n+---------------------+ \n```", "```\nboolean isWin(long bitboard) {\n  if (bitboard & (bitboard >> 6) & (bitboard >> 12) & (bitboard >> 18) != 0) return true; // diagonal \\\n  if (bitboard & (bitboard >> 8) & (bitboard >> 16) & (bitboard >> 24) != 0) return true; // diagonal /\n  if (bitboard & (bitboard >> 7) & (bitboard >> 14) & (bitboard >> 21) != 0) return true; // horizontal\n  if (bitboard & (bitboard >> 1) & (bitboard >>  2) & (bitboard >>  3) != 0) return true; // vertical\n  return false;\n} \n```", "```\nboolean isWin(long bitboard) {\n    int[] directions = {1, 7, 6, 8};\n    for(int direction : directions)\n        if (bitboard & (bitboard >> direction) &\n           (bitboard >> (2 * direction)) & (bitboard >> (3 * direction)) != 0)\n           return true;\n    return false;\n} \n```", "```\nboolean isWin(long bitboard) {\n    int[] directions = {1, 7, 6, 8};\n    long bb;\n    for(int direction : directions) {\n        bb = bitboard & (bitboard >> direction);\n        if ((bb & (bb >> (2 * direction))) != 0) return true;\n    }\n    return false;\n} \n```", "```\nint[] listMoves() {\n    int[] moves;\n    long TOP = 0b1000000_1000000_1000000_1000000_1000000_1000000_1000000L;\n    for(int col = 0; col <= 6; col++) {\n        if ((TOP & (1L << height[col])) == 0) moves.push(col);\n    }\n    return moves;\n} \n```"]