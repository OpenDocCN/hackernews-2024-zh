- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:49:50'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Cool URIs can be ugly - Markus Unterwaditzer
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://unterwaditzer.net/2023/cool-uris.html](https://unterwaditzer.net/2023/cool-uris.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <main>
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Cool URIs can be ugly
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '2023-02-05'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Around last year this blog, a simple static site, was running on GitHub pages,
    together with Cloudflare in front of it due to (perceived) unreliability with
    GitHub’s SSL provisioning for custom domains. In order to simplify my stack, I
    tried running it on [Cloudflare Pages](https://pages.cloudflare.com/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: The setup process was extremely smooth. Connecting to the GitHub repository
    where my blog lives worked just as expected, setting up their CI was painless,
    and since Cloudflare was already managing my domain’s DNS, switching over DNS
    records to point to the new static site was literally just a button click.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: This worked fine for a week or so until I found some pretty surprising behavior
    in Cloudflare’s static site hosting that made me stop using their services immediately.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'My blogposts have the following URL format:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I inherited this decision from the static site generator I started with, [liquidluck](https://github.com/lepture/liquidluck),
    and have since then put a lot of care into ensuring this format never changes
    as I moved away from it, even though the format could perhaps be a little bit
    cleaner.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: The corresponding file on the filesystem is `/<year>/<slug>.html`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Yet as soon as I moved to Cloudflare Pages, I found that suddenly all blogposts
    were served under the following format:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In fact, all URLs with `.html` now redirect with `301 Permanent Redirect` to
    the “cleaned up” version! That’s why navigating my blog was still working fine,
    as literally every click on the page was being redirected to the “cleaned up”
    URL.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Now this is probably closer to the URL format I would start out with today if
    I had to start a new blog. But Cloudflare’s redirect is permanent and has been
    public for a few weeks, therefore all Google search results were pointing to the
    cleaned up URLs. If I wanted to move to a different static site host, I would
    have to install additional redirects so that none of those links break, just to
    clean up a mess I didn’t cause.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我不得不开始一个新的博客，这可能更接近我今天会选择的 URL 格式。但 Cloudflare 的重定向是永久性的，已经公开了几周，因此所有 Google
    搜索结果都指向清理过的 URL。如果我想要切换到另一个静态站点主机，我将不得不安装额外的重定向，以确保这些链接不会断裂，只是为了清理我没有造成的混乱。
- en: 'It turns out, however, that GitHub Pages does something similar, just in a
    slightly more conservative way: If you request `/<year>/<slug>`, it will serve
    up `/<year>/<slug>.html` just as if you requested it directly. However, GitHub
    does not issue any permanent redirects, so it does not lock me into anything at
    all.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，事实证明 GitHub 页面也做了类似的事情，只是稍微保守一些：如果您请求 `/<year>/<slug>`，它会像您直接请求一样提供 `/<year>/<slug>.html`。但是，GitHub
    不发出任何永久重定向，因此根本不会束缚我做任何事情。
- en: This made it a rather easy decision for me to switch back to GitHub pages. Together
    with adding `<link rel="canonical" ...>` to all my subpages, no links are broken
    and the Google search results should eventually self-correct.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我很容易决定重新切换回 GitHub 页面。与将`<link rel="canonical" ...>`添加到所有子页面一起，没有链接会断裂，Google
    搜索结果最终应该会自行纠正。
- en: I can only assume that the way that Cloudflare justifies this sort of URL rewriting
    is through arguments similar to the ones found in [Cool URIs don’t change](https://www.w3.org/Provider/Style/URI).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我只能假设，Cloudflare 这种 URL 重写的理由类似于在[不要改变酷 URI](https://www.w3.org/Provider/Style/URI)中找到的那些论点。
- en: However I think it would be a gross misinterpretation of that article if your
    takeaway is to plainly remove `.html` from all URLs and issue permanent redirects.
    If your URL prettification happens in a way that can easily break when moving
    between static site hosts, you have not made URLs more stable, you just made them
    prettier. In fact, Cloudflare Pages now made my URLs more brittle and less cool,
    because they now not only depend on the choices made by my static site generator,
    but also on my choice of static site host.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你的理解是简单地从所有 URL 中移除 `.html` 并发出永久重定向，那么这可能是对那篇文章的严重误解。如果您的 URL 美化在切换静态站点主机时容易断裂，那么您并没有使
    URL 更稳定，只是使它们更漂亮而已。事实上，Cloudflare Pages 现在使我的 URL 更加脆弱，不那么酷，因为它们现在不仅取决于我静态站点生成器的选择，还取决于我选择的静态站点主机。
- en: This blog will continue to serve cool-but-ugly URLs. If I ever attempt to make
    them prettier, I will do so with intent, and not by accident. And probably as
    part of static site generation, not in the routing layer of a random cloud service.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个博客将继续提供酷但丑陋的 URL。如果我试图让它们更漂亮，我会有所打算，而不是偶然发生。也许作为静态站点生成的一部分，而不是一个随机云服务的路由层。
- en: </main>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
