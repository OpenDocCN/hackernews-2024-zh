- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:03:12'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:03:12
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Algebraic Effects, Ownership, and Borrowing
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代数效应、所有权和借用
- en: 来源：[https://antelang.org/blog/effects_ownership_and_borrowing/](https://antelang.org/blog/effects_ownership_and_borrowing/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://antelang.org/blog/effects_ownership_and_borrowing/](https://antelang.org/blog/effects_ownership_and_borrowing/)
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '[Algebraic Effects](/docs/language/#algebraic-effects) are a useful abstraction
    for reasoning about effectful programs by letting us leave the interpretation
    of these effects to callers. However, most existing literature discusses these
    in the context of a pure functional language with pervasive sharing of values.
    What restrictions would we need to introduce algebraic effects into a language
    with ownership and borrowing - particularly Ante?'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[代数效应](/docs/language/#algebraic-effects)是一种有用的抽象，可以通过让我们将这些效果的解释留给调用者来推理有副作用的程序。然而，大多数现有文献都是在纯函数语言的背景下讨论这些内容，其中值的共享是普遍存在的。如果我们想要将代数效应引入一种具有所有权和借用的语言
    - 尤其是 Ante，我们需要引入什么限制呢？'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Ownership
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所有权
- en: 'Consider the following program:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下程序：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This seems like it’d pass type checking at first glance, but we can easily
    construct a program that tries to use the same moved value twice:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎乍一看会通过类型检查，但我们可以很容易地构造一个尝试两次使用相同移动值的程序：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Since a handler’s body may be called multiple times, it may not move any value
    in its environment. This restriction is similar to moving values in a loop:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于处理程序的主体可能会被多次调用，因此它可能不会移动其环境中的任何值。这个限制类似于在循环中移动值：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '* * *'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Borrowing
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 借用
- en: Things get more complicated when we consider borrowing. Although Ante’s references
    [do not have explicit lifetime variables](/docs/language/#borrowing), we still
    need to ensure their lifetime is sound.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们考虑借用时，情况就变得更加复杂了。尽管 Ante 的引用[没有显式生命周期变量](/docs/language/#borrowing)，我们仍然需要确保它们的生命周期是合法的。
- en: Returning Owning References
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回拥有引用
- en: 'Consider the following program:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下程序：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This breaks the aliasing restriction on `&own mut` in a way the compiler cannot
    verify with existing rules on tracking lifetimes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这打破了编译器在跟踪生命周期的现有规则上无法验证的 `&own mut` 上的别名限制。
- en: 'The solution to this is that each function using the same `Read (&own mut Box
    String)` effect is considered to borrow from the same effect handler. Attempting
    to retrieve two owned, mutable references from the same handler then would be
    a lifetime error:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 解决此问题的方法是，每个使用相同 `Read (&own mut Box String)` 效果的函数被视为从相同的效果处理程序借用。然后，尝试从同一个处理程序中检索两个拥有的可变引用将会是一个生命周期错误：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Similarly, trying to obfuscate this by calling a function which indirectly
    returns another reference should also fail:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，试图通过调用一个间接返回另一个引用的函数来模糊这一点也应该失败：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Owned Reference Parameters
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拥有引用参数
- en: 'Now let’s consider how we can break programs which pass references to effects.
    For this we’re going to use the `Yield a` effect which is used for creating generators
    or streams:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑一下如何破坏将引用传递给效果的程序。为此，我们将使用 `Yield a` 效果，该效果用于创建生成器或流：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To prevent this we need to tie `y` to the variable that owns it - which is `resume`.
    This way we can still yield owned references if needed, but we cannot call `resume`
    until they are dropped.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这种情况发生，我们需要将 `y` 与拥有它的变量 - 即 `resume` - 相关联。这样我们仍然可以在需要时生成拥有的引用，但在它们被丢弃之前我们无法调用
    `resume`。
- en: 'Conceptually, we can think of a handle expression as receiving a single `resume`
    object which is then unpacked:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，我们可以将句柄表达式视为接收一个单一的 `resume` 对象，然后解包：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '* * *'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Resume
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恢复
- en: One core aspect of effects that we’ve glossed over so far is the `resume` function
    which resumes an effectful computation from the handler. Since `resume` refers
    to an in-progress computation, we need a way to safely encode this environment,
    yet we need to do so when defining the effect before the environment is known.
    What type should be given to `resume`?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们忽略的效果的一个核心方面是 `resume` 函数，它从处理程序恢复有副作用的计算。由于 `resume` 引用的是正在进行的计算，我们需要一种安全地编码这个环境的方法，但我们需要在定义效果时这样做，而在环境被知道之前。给
    `resume` 应该给什么类型？
- en: 'Consider the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After resuming from the `fork` the second time, we enter the false branch. When
    doing so, `message` has already been moved, so we’d be reading from an already-dropped
    value.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从第二次从 `fork` 恢复后，我们进入了错误的分支。在这样做时，`message` 已经被移动，因此我们将从一个已经丢弃的值中读取。
- en: This is the problem the different closure types already solve. We just need
    some way to determine if `resume` should be a `Fn`, `FnMut`, or `FnOnce` since
    we cannot know this within the handler itself.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是不同闭包类型已经解决的问题。我们只需要某种方式来确定 `resume` 应该是 `Fn`、`FnMut` 还是 `FnOnce`，因为我们无法在处理程序内部知道这一点。
- en: 'One possibility is to require this in the definition of `Fork`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能性是要求在定义 `Fork` 时需要这个：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that `fork` is still callable without restrictions. It is only `resume`
    that will be a `FnMut` when it is introduced.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`fork` 仍然可以无限制地调用。只有在引入时 `resume` 才会是 `FnMut`。
- en: 'Anyways, now we’d get an error when writing `foo`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，现在当编写 `foo` 时会出错：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Since this error would otherwise be much more common, `resume` is by default
    a `FnOnce` unless otherwise specified. This means when defining an effect we will
    need to think about what kinds of effect handlers we want to permit.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于否则这种错误会更为常见，默认情况下 `resume` 是一个 `FnOnce`，除非另有说明。这意味着在定义一个效果时，我们需要考虑允许哪些种类的效果处理程序。
- en: Also note that after removing `drop`, `message` will not be dropped at the end
    of `foo`. Instead, it is part of `resume`’s environment and will be dropped after
    the last use of `resume` in the effect handler.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，在移除 `drop` 后，`message` 将不会在 `foo` 结束时被丢弃。相反，它是 `resume` 的环境的一部分，并将在效果处理程序中对
    `resume` 的最后一次使用之后被丢弃。
- en: Environment Type Quantification
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境类型量化
- en: 'Most effects which give an explicit type for `resume` will either omit the
    environment type, or specify it as a type variable quantified over the function:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数显式指定 `resume` 类型的效果将省略环境类型，或将其指定为函数的类型变量：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is generally desired since it allows the `resume` closure to be unboxed
    most of the time. However, what would happen if the user wrote the trait as the
    following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是期望的，因为它允许大部分时间内解开 `resume` 闭包的封箱。但是，如果用户将特质编写为以下形式会发生什么：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Since each generic instance of a trait would be separate (e.g. `Read I32` versus
    `Read String`), each use of this effect with a different environment would be
    a separate effect:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个特质的泛型实例都是分开的（例如 `Read I32` 对比 `Read String`），每次使用具有不同环境的此效果都将是一个单独的效果：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Above, `forced_example` would be inferred to have the effects `Foo Env1` and
    `Foo Env2` where `Env1` and `Env2` are both opaque types representing the environments.
    Since each of these would need to be handled by separate effect handlers, this
    technique could be used to limit an effect to being called at most once per handler.
    It remains to be seen how useful this would be however.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，`forced_example` 将被推断为具有效果 `Foo Env1` 和 `Foo Env2`，其中 `Env1` 和 `Env2` 都是表示环境的不透明类型。由于每个这些都需要由单独的效果处理程序处理，因此此技术可以用于将效果限制为每个处理程序最多调用一次。然而，这样做有多有用还有待观察。
- en: Restricting the environment type
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制环境类型
- en: 'If any capabilities are required on the `resume` closure, a `given` clause
    can be added. Since most traits on closures are defined as long as they’re defined
    on the closure environment, it is usually sufficient to require the trait on the
    closure environment alone:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `resume` 闭包需要任何功能，可以添加 `given` 子句。由于大多数对闭包的特质是定义在闭包环境上的，因此通常仅要求在闭包环境上的特质就足够了：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Note that since `resume` is a continuation, this environment type includes
    any captured variables across other function calls as well. So the `Clone` constraint
    above would also apply to the `vec` variable below:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于 `resume` 是一个续体，此环境类型还包括其他函数调用中捕获的任何变量。因此，上面的 `Clone` 约束也将适用于下面的 `vec`
    变量：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Since environment types can grow quite large, it is generally recommended to
    avoid cloning `resume`. A more useful trait constraint on `resume` is covered
    in the next section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于环境类型可能会变得非常庞大，通常建议避免克隆 `resume`。对 `resume` 的更有用的特质约束在下一节中介绍。
- en: '* * *'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Multithreading
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多线程
- en: Going back to the `Fork` example, what would happen if we tried to run each
    resumption in its own thread?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 `Fork` 示例，如果我们尝试在各自的线程中运行每个续体会发生什么？
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In order to spawn a new thread to call `resume` we’d need to require a reference
    to the closure environment is `Send`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成一个新线程来调用 `resume`，我们需要要求对闭包环境的引用是 `Send` 的：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '* * *'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Polymorphic Effects
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多态效果
- en: 'Ante also enables functions to be polymorphic over their effects. For example,
    the `map` function has the type:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Ante 还使函数能够在其效果上是多态的。例如，`map` 函数的类型是：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, recalling the `FooCloneEnv` example from earlier:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回顾前面的 `FooCloneEnv` 示例：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This works fine, but how could we pass a function such as `outer_fn` to `map`?
    The effect variable `e` would be instantiated to `FooCloneEnv` but now we’d also
    need to know if the environment of `map` when it calls the passed-in function
    is clone-able. In the most general case, we’d need to be able to verify any trait
    from `map` and whether it can allow the function used to resume multiple times
    or not.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做没问题，但是我们如何将诸如 `outer_fn` 的函数传递给 `map` 呢？效果变量 `e` 将实例化为 `FooCloneEnv`，但现在我们还需要知道当调用传入函数的
    `map` 的环境是否可克隆。在最一般的情况下，我们需要能够验证 `map` 中的任何特质以及它是否可以允许多次恢复使用的函数。
- en: 'We’d have to add these constraints to the effect variables directly:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须直接将这些约束添加到效果变量中：
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This is a big hit to the usability of effects in this scheme since these constraints
    would have to be manually specified on `map` for its contents to be checked. If
    not specified, a new version of `map` would have to be written with a `Send`able
    environment or similar. This will inevitably lead to some duplication when using
    effects that algebraic effect handlers are usually meant to remove.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于此方案中效果的可用性来说是一个很大的打击，因为这些约束必须在 `map` 上手动指定其内容才能被检查。如果没有指定，就必须编写一个带有 `Send`able
    环境或类似环境的新版本的 `map`。这将不可避免地导致在使用通常用于消除代数效果处理程序的效果时出现一些重复。
- en: In a later article, we’ll focus on ways to simplify the usability of this scheme
    by providing sane defaults where possible.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在以后的文章中，我们将重点介绍通过尽可能提供合理的默认值来简化此方案的可用性的方法。
- en: '* * *'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Implementation Details and Boxing
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现细节和封箱
- en: So far, each of the rules covered above should apply to any language with effects,
    ownership, and borrowing. Different implementations of effects can have wildly
    different runtime costs however.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，上述所有规则都应适用于具有效果、所有权和借用的任何语言。然而，不同效果的实现可能具有非常不同的运行时成本。
- en: For example, most languages implementing the full spectrum of algebraic effects
    will keep track of the stack of effect handlers at runtime. When an effect call
    is made, a lookup needs to be performed then the code needs to jump to the relevant
    handler and back. This may be done by jumping up the call stack and copying stack
    frames or by converting effectful functions to continuation passing style (CPS)
    - like Ante does.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，实现完整代数效果谱的大多数语言将在运行时跟踪效果处理程序的堆栈。当进行效果调用时，需要执行查找，然后代码需要跳转到相关处理程序然后返回。这可以通过跳转到调用堆栈并复制堆栈帧或通过将具有效果的函数转换为续体传递样式（CPS）来完成
    - 就像 Ante 所做的那样。
- en: Languages without algebraic effects aren’t completely free from the costs of
    effects either though. Even if we restrict ourselves to just the `async` effect,
    we can see plenty of languages which include it - each with its own unique implementation
    and performance characteristics.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 没有代数效果的语言也并非完全摆脱效果的成本。即使我们将自己限制在仅有 `async` 效果的情况下，我们仍然可以看到许多包括它的语言 - 每种语言都有其自己独特的实现和性能特征。
- en: 'Consider Rust’s `async` effect which is implemented by compiling async functions
    to state machines. In this scheme, the following code is rejected:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑 Rust 的 `async` 效果，它是通过将异步函数编译成状态机来实现的。在这种方案中，以下代码被拒绝：
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Because the resulting state machine would have infinite size:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因为生成的状态机会有无限大小：
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To get around this, users need to box recursive functions:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，用户需要对递归函数进行装箱：
- en: '[PRE23]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If we try to implement a similar example in future-Ante^:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试在未来的Ante中实现类似的示例^：
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The result would look quite different:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 结果会看起来非常不同：
- en: '[PRE25]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'So theoretically no boxing is needed for recursion alone. The performance characteristics
    here look quite different - but that is because in Ante they’re largely determined
    by the handler that is used rather than the call site of the effect. If we use
    a different handler which does not resume in a tail position, boxing will be required.
    For example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 因此从理论上讲，仅仅递归是不需要装箱的。 这里的性能特征看起来非常不同-但这是因为在Ante中，它们在很大程度上取决于所使用的处理程序，而不是效果的调用站点。
    如果我们使用不在尾部位置恢复的不同处理程序，将需要进行装箱。 例如：
- en: '[PRE26]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Compiles to^:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 编译结果为^：
- en: '[PRE27]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here we can see the inner continuation captures the outer continuation `k`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到内部续编捕获了外部续编`k`。
- en: 'To give `k` a valid type, we’d need to box it to ensure it always has the same
    size for each recursive call. This is similar to what we’d need to do in the Rust
    example, but there are some unique problems with requiring users manually box
    these continuations in Ante:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要给`k`一个有效的类型，我们需要对它进行装箱，以确保对每个递归调用，它始终具有相同的大小。 这与Rust示例中我们需要做的事情类似，但是要求用户手动装箱这些续编在Ante中存在一些独特的问题：
- en: The continuation is added by the compiler, so it isn’t clear to the user where
    they should add the boxing.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 续编由编译器添加，因此用户不清楚他们应该在哪里添加装箱。
- en: Whether boxing is required is dependent on the structure of the handler. We
    don’t want to always add boxing since tail-resume is the more common case.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否需要装箱取决于处理程序的结构。 我们不希望总是添加装箱，因为尾部恢复是更常见的情况。
- en: We could try to get around this by marking whether a given effect must have
    a tail-resumptive handler or not, and requiring recursive functions using non-tail-resumptive
    handlers to box their continuations somehow. This would make effects much more
    cumbersome to use however, and one of Ante’s goals is to be a slightly *higher*
    level language than Rust. If effects are not simple to use then users will avoid
    them.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试绕过这一点，标记给定效果是否必须有尾部恢复处理程序，并且要求使用非尾部恢复处理程序的递归函数以某种方式装箱它们的续编。 然而，这将使效果的使用变得更加麻烦，并且安特的一个目标是比Rust略微更*高级*的语言。
    如果效果不容易使用，用户就会避免它们。
- en: For these reasons, the current plan is for the compiler to automatically insert
    boxing of closures where appropriate and infer their lifetimes via [lifetime inference](/docs/ideas/#lifetime-inference).
    Lifetime inference is a very interesting topic to me - it was one of Ante’s original
    goals to experiment with it. When it works well it can be great since it can stack-allocate
    potentially even to prior stack frames. The downside is that the inferred lifetimes
    can be imprecise. Although, in this case, if lifetimes cannot be accurately inferred,
    we would still know their longest possible lifetime is that of the effect handler.
    ^(This is a topic that deserves much more detail though so I’ll leave it to a
    future blog post. If you’re still curious, there are some papers on it reachable
    from the documentation link above.)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些原因，目前的计划是让编译器在合适的地方自动插入闭包的装箱，并通过[寿命推断](/docs/ideas/#lifetime-inference)推断它们的生命周期。
    寿命推断对我来说是一个非常有趣的话题-最初的目标之一就是与安特一起对其进行实验。 当它工作良好时，它非常出色，因为它甚至可以对先前的栈帧进行堆叠分配。 缺点是推断出的生命周期可能不准确。
    虽然在这种情况下，如果无法准确推断寿命，我们仍然会知道它们的最长可能寿命是效果处理程序的寿命。 ^(这个话题值得更详细地讨论，所以我会留到将来的博客文章中。如果你还感兴趣，可以从上面的文档链接中找到一些相关论文。)
