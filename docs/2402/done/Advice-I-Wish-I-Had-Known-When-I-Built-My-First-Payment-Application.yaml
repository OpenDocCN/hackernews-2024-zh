- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:03:44'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:03:44'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Advice I Wish I Had Known When I Built My First Payment Application
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当我建立我的第一个支付应用程序时，我希望我知道的建议
- en: 来源：[https://news.alvaroduran.com/p/advice-i-wish-i-had-known-when-i](https://news.alvaroduran.com/p/advice-i-wish-i-had-known-when-i)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://news.alvaroduran.com/p/advice-i-wish-i-had-known-when-i](https://news.alvaroduran.com/p/advice-i-wish-i-had-known-when-i)
- en: If the world were static, our confidence about what we believe would only grow.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果世界是静态的，我们对自己所信的东西的信心只会增长。
- en: If the world were static, our beliefs would be exposed to a wider and wider
    arrange of experiences. In time, we would be able to tell if those beliefs were
    false, because only those likely to be true would survive.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果世界是静态的，我们的信念将暴露于更广泛的经验范围。随着时间的推移，我们将能够判断这些信念是否错误，因为只有那些有可能是真实的才能存活下来。
- en: But we don’t live in a static world.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们并不生活在一个静态的世界。
- en: 'That’s fantastic news if you’re building a startup. If the world were static,
    startups don’t have a chance. The world is dynamic: technology comes and goes,
    and companies rise and fall.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果世界是静态的，那太好了。创业公司别无选择。世界是动态的：技术来了又走，公司兴衰。
- en: Yet, most people tend to believe that the world is static, at least when it
    comes to their opinions. And they’ve got a point! Opinions about human nature,
    for example, belong in a static world, because **human nature never changes**.
    But you can’t trust your opinions about things that change. That includes pretty
    much everything else.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，大多数人倾向于相信世界是静态的，至少在涉及到他们的观点时是如此。他们有一点道理！例如，关于人性的观点属于静态世界，因为**人性永远不会改变**。但你不能相信那些变化的东西。这包括几乎所有其他事情。
- en: When experts are wrong, it’s often because they’re experts on an earlier version
    of the world.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当专家们错了时，往往是因为他们是对早期世界的专家。
- en: ''
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — Paul Graham, [How to Be an Expert in a Changing World](https://paulgraham.com/ecw.html)
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — 保罗·格雷厄姆，[如何成为一个变革时代的专家](https://paulgraham.com/ecw.html)
- en: A changing world is an interesting thing. A startup, though, is a changing company
    in a changing world. And that’s more interesting. **When a startup changes in
    a good way, we say that it scales**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个变化中的世界是一件有趣的事情。但是，一个创业公司是一个在变化中的世界中不断变化的公司。而且那更有趣。**当一个创业公司以良好的方式变化时，我们说它在扩展**。
- en: Early on, startups grow by [doing things that don’t scale](https://paulgraham.com/ds.html?ref=creatorscience.com).
    Startups feed on opportunities that incumbents can’t see, because incumbents [don’t
    know how to count that low](https://www.lesswrong.com/posts/koGbEwgbfst2wCbzG/i-don-t-know-how-to-count-that-low).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 早期，创业公司通过[做一些不可扩展的事情](https://paulgraham.com/ds.html?ref=creatorscience.com)来增长。创业公司以前所看不到的机会为食，因为老牌企业
    [不知道怎么去看那么低](https://www.lesswrong.com/posts/koGbEwgbfst2wCbzG/i-don-t-know-how-to-count-that-low)。
- en: But over time, startups must grow. Scalability is about setting up the conditions
    for business success.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但随着时间的推移，创业公司必须成长。可扩展性是为业务成功设置条件的关键。
- en: All startups start small, but only successful startups scale.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的创业公司都是从小开始的，但只有成功的创业公司才会扩展。
- en: '* * *'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*Welcome to Money In Transit, the newsletter bridging the gap between payments
    strategy and execution. I’m [Alvaro Duran](https://www.linkedin.com/in/alvaroduranbarata/).*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*欢迎来到《金钱在途中》（Money In Transit），这是一份架起支付战略与执行之间桥梁的通讯。我是 [Alvaro Duran](https://www.linkedin.com/in/alvaroduranbarata/)。*'
- en: '*Recently, we’ve looked at [the limitations of building money software on top
    of relational databases](https://news.alvaroduran.com/p/classic-databases-arent-paying-off),
    [why choosing a programming language is about business requirements](https://news.alvaroduran.com/p/nobody-gets-fired-for-choosing-java),
    and [a primer on the domain of payment applications](https://news.alvaroduran.com/p/pizza-place-payments),
    among others. They’re all free to read.*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*最近，我们看了一下[在关系数据库之上构建金钱软件的局限性](https://news.alvaroduran.com/p/classic-databases-arent-paying-off)，[为什么选择一种编程语言涉及到业务需求](https://news.alvaroduran.com/p/nobody-gets-fired-for-choosing-java)，以及[关于支付应用程序领域的入门知识](https://news.alvaroduran.com/p/pizza-place-payments)，等等。它们都是免费阅读的。*'
- en: '*Want to be notified when there’s a new post? Click on the magic button below.*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*想在有新文章发布时收到通知吗？点击下面的魔法按钮吧。*'
- en: '* * *'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: When it comes to software, a belief that used to be right, but now isn’t, is
    that CPU power is a huge constraint. When you can replicate your system on many
    machines, how much can a single machine sustain is no longer relevant.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到软件时，曾经正确的信念，但现在不再正确的是，CPU 功率是一个巨大的约束。当你可以在许多机器上复制你的系统时，单个机器能够维持多少已经不再相关了。
- en: Engineers can scale their systems with redundant copies of their data. But if
    they do that, they lose access to a single source of truth. Data, not CPU, becomes
    the biggest constraint.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 工程师们可以通过数据的冗余副本来扩展他们的系统。但是，如果他们这样做，就会失去对一个单一真相源的访问。数据，而不是 CPU，成为最大的约束。
- en: We now live in the age of the cloud. **The best indicator of software scalability
    is the capacity to mix and match the tools for storing data.**
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在生活在云计算时代。**软件可扩展性的最好指标是能够混合和匹配存储数据的工具**。
- en: At [EuroPython last year](https://www.youtube.com/watch?v=nLQoxqENbgg), I gave
    a talk on why tools like Django and Ruby on Rails are great for building simple
    projects, but terrible to scale. The problem is that they help engineers build
    a system fast, but put huge obstacles to changing the way to store data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在[去年的 EuroPython 大会上](https://www.youtube.com/watch?v=nLQoxqENbgg)，我发表了一篇关于为什么像
    Django 和 Ruby on Rails 这样的工具非常适合构建简单项目，但在扩展方面却很糟糕的演讲。问题在于，它们帮助工程师快速构建系统，但在改变存储数据方式上设下了巨大的障碍。
- en: Why is that a problem? Because engineers are oblivious to the design decisions
    that are baked into these tools. They think “Instagram was started on Django,
    and Github on Ruby on Rails, so it’s good for my purposes”.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这是个问题？因为工程师们对这些工具中的设计决策视而不见。他们认为“Instagram 是基于 Django 开发的，Github 是基于 Ruby
    on Rails 开发的，所以对我的目的很好”。
- en: Yes, these companies were early on based on these tools. However, both Instagram
    and Github figured out ways to move beyond them. Their current designs look nothing
    like their humble beginnings. **When Meta engineers built Threads**, **they**
    [](https://engineering.fb.com/2023/09/07/culture/threads-inside-story-metas-newest-social-app/)
    **[piggy-backed on Instagram’s backend](https://engineering.fb.com/2023/09/07/culture/threads-inside-story-metas-newest-social-app/).**
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这些公司早期都是基于这些工具的。然而，Instagram 和 Github 都想出了超越它们的方法。他们现在的设计与他们的起步毫无相似之处。**当
    Meta 的工程师构建 Threads 时**，**他们** [依附在 Instagram 的后端上](https://engineering.fb.com/2023/09/07/culture/threads-inside-story-metas-newest-social-app/)。
- en: They knew better.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 他们知道得更清楚。
- en: Let me make the problem more concrete. In [Timelines at Scale](https://www.infoq.com/presentations/Twitter-Timeline-Scalability/),
    Raffi Krikorian, former VP of Platform Engineering at Twitter, showed how **Twitter’s
    scalability problems came**, not from an increasing amount of new tweets, but
    **from serving the home page to an increasing amount of people**.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我把问题更具体化。在[规模化时间线](https://www.infoq.com/presentations/Twitter-Timeline-Scalability/)中，Twitter
    平台工程前副总裁 Raffi Krikorian 展示了**Twitter 的可扩展性问题来自**的不是越来越多的新推文，而是**向越来越多的人提供主页**。
- en: A Data problem. Not a CPU problem.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一个数据问题。不是 CPU 问题。
- en: Yet, if you look for videos on how to build a social media app online, **there
    is nobody warning you about this**. Youtube is plagued with videos showing you
    how to build a social media app that cannot, and will not scale.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你在网上搜索如何构建社交媒体应用程序的视频，**没有人会警告你**。Youtube 充斥着教你如何构建一个不能、也不会扩展的社交媒体应用程序的视频。
- en: Sure, those are pet projects, and the goal is to learn the tool, not to build
    a product. But if I’m trying to build, not to learn, the only resources I have
    access to **will prevent me from building scalable software systems**.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，那些都是个人项目，目标是学习工具，而不是构建产品。但是如果我试图构建，而不是学习，我唯一可以访问的资源**会阻止我构建可扩展的软件系统**。
- en: Startups always face fearful odds. But **if they’re given incorrect advice,
    they’re doomed**.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 初创公司总是面临可怕的机会。但是**如果他们获得了错误的建议，他们注定会失败**。
- en: 'How do you design scalable payment applications? I tried to give a partial
    answer to that question on [What Makes Payments System Different?](https://news.alvaroduran.com/p/what-makes-payment-systems-different):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您如何设计可扩展的支付应用程序？我试图在[支付系统有何不同？](https://news.alvaroduran.com/p/what-makes-payment-systems-different)中部分回答了这个问题：
- en: Payment applications are one of those pieces of software that appear easy on
    the surface—who hasn’t paid with a credit card?—but that is deceiving. For that
    reason, when confronting such systems for the first time, software engineers [...]
    make false assumptions that end up causing a lot of harm, and losing a lot of
    money.
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 支付应用程序是那些表面上看起来很简单的软件之一——谁没用过信用卡支付呢？——但这是具有欺骗性的。因此，当首次面对这样的系统时，软件工程师[...]会做出错误的假设，最终造成很多损失，并且损失了很多钱。
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — [What Makes Payments Systems Different?](https://news.alvaroduran.com/p/what-makes-payment-systems-different)
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — [支付系统有何不同？](https://news.alvaroduran.com/p/what-makes-payment-systems-different)
- en: Building software is an iterative process. But making a terrible architecture
    decision can put your startup years behind its competitors, diminishing your chances
    of user growth.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 软件构建是一个迭代的过程。但是做出糟糕的架构决策可能会使您的初创公司落后于竞争对手数年，降低您的用户增长机会。
- en: '[Michelle Bu](https://www.linkedin.com/in/michellebu?miniProfileUrn=urn%3Ali%3Afs_miniProfile%3AACoAAAdYEJwBWvGF311EleaArWHmpw3AqPOkj_g&lipi=urn%3Ali%3Apage%3Ad_flagship3_search_srp_all%3BvXyTaednRdCVL64FuZziUA%3D%3D)
    echoed this sentiment. When Stripe was building their Payments API, she experienced
    the same problem. Namely, how to redesign away from a card-centered architecture.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[Michelle Bu](https://www.linkedin.com/in/michellebu?miniProfileUrn=urn%3Ali%3Afs_miniProfile%3AACoAAAdYEJwBWvGF311EleaArWHmpw3AqPOkj_g&lipi=urn%3Ali%3Apage%3Ad_flagship3_search_srp_all%3BvXyTaednRdCVL64FuZziUA%3D%3D)
    强调了这种观点。当 Stripe 构建他们的支付 API 时，她遇到了同样的问题。即，如何从以卡为中心的架构重新设计。'
- en: 'We built support for new payment methods on top of a set of abstractions that
    were designed for the simplest payment method of them all: cards. Naturally, abstractions
    designed for cards were not going to be great at representing these more complex
    payment flows.'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们在一套设计用于最简单支付方法的抽象之上构建了对新支付方法的支持：卡。自然地，为卡设计的抽象不会很好地表示这些更复杂的支付流程。
- en: ''
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Introducing additional states and expanding on the definition of resources
    that were created for a specific, narrow use case resulted in a confusing integration
    and an overloaded set of API abstractions. It’s as if we were trying to build
    a spaceship by adding parts to a car until it had the functionality of a spaceship:
    a difficult *and* likely doomed proposition.'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 引入额外的状态并扩展为一个特定、狭窄用例而创建的资源的定义导致了一个令人困惑的集成和一个过载的 API 抽象集。这就好像我们试图通过向汽车添加部件来构建飞船，直到它具有飞船的功能：这是一个困难的*且*可能注定失败的命题。
- en: ''
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '— Michelle Bu, [Stripe’s payments APIs: The first 10 years](https://stripe.com/blog/payment-api-design)'
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — Michelle Bu，[Stripe 支付 API：前 10 年](https://stripe.com/blog/payment-api-design)
- en: 'In Youtube, [every](https://www.youtube.com/watch?v=C6rNeMnSi2o&list=PLd1Ex3znuJZvgxTPbgCy6c0CCa-Kub6XD&index=3&t=95s&pp=gAQBiAQB)
    [single](https://www.youtube.com/watch?v=olfaBgJrUBI&list=PLd1Ex3znuJZvgxTPbgCy6c0CCa-Kub6XD&index=4&t=663s&pp=gAQBiAQB)
    [video](https://www.youtube.com/watch?v=zsD4R_aQctw&list=PLd1Ex3znuJZvgxTPbgCy6c0CCa-Kub6XD&index=5&pp=gAQBiAQB)
    [I’ve](https://www.youtube.com/watch?v=NxjGFIgFCbg&list=PLd1Ex3znuJZvgxTPbgCy6c0CCa-Kub6XD&index=7&pp=gAQBiAQB)
    [found](https://www.youtube.com/watch?v=shipSEFMzHs&list=PLd1Ex3znuJZvgxTPbgCy6c0CCa-Kub6XD&index=8&t=224s&pp=gAQBiAQB)
    on how to design a payment system ends up supporting only credit cards. Even [System
    Design Interview Volume 2](https://www.amazon.com/System-Design-Interview-Insiders-Guide/dp/1736049119),
    which includes a chapter on designing a Payment System, says the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在Youtube上，[每一个](https://www.youtube.com/watch?v=C6rNeMnSi2o&list=PLd1Ex3znuJZvgxTPbgCy6c0CCa-Kub6XD&index=3&t=95s&pp=gAQBiAQB)
    [单个](https://www.youtube.com/watch?v=olfaBgJrUBI&list=PLd1Ex3znuJZvgxTPbgCy6c0CCa-Kub6XD&index=4&t=663s&pp=gAQBiAQB)
    [视频](https://www.youtube.com/watch?v=zsD4R_aQctw&list=PLd1Ex3znuJZvgxTPbgCy6c0CCa-Kub6XD&index=5&pp=gAQBiAQB)
    [我](https://www.youtube.com/watch?v=NxjGFIgFCbg&list=PLd1Ex3znuJZvgxTPbgCy6c0CCa-Kub6XD&index=7&pp=gAQBiAQB)
    [找到的](https://www.youtube.com/watch?v=shipSEFMzHs&list=PLd1Ex3znuJZvgxTPbgCy6c0CCa-Kub6XD&index=8&t=224s&pp=gAQBiAQB)
    如何设计支付系统的视频最终只支持信用卡。甚至[《系统设计面试 第2卷》](https://www.amazon.com/System-Design-Interview-Insiders-Guide/dp/1736049119)，其中包括了一个关于设计支付系统的章节，也如此说明：
- en: Again, I know that these are “for educational purposes only”. But who else is
    bridging the gap between ["we need to build our own payment application in-house"](https://news.alvaroduran.com/p/must-there-be-a-payment-platform)
    and actually showing engineers how to design payment applications for scale?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这些仅仅是“供教育目的使用”。但是，除了[“我们需要自己内部构建支付应用程序”](https://news.alvaroduran.com/p/must-there-be-a-payment-platform)之外，还有谁在填补“真正向工程师展示如何设计可扩展的支付应用程序”的差距呢？
- en: Well, I am. And if you want to learn how to do it, how to *really* do it, I
    suggest that you click subscribe.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我在做。如果你想学习如何做到这一点，如何*真正*做到这一点，我建议你点击订阅。
