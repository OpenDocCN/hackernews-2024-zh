- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 13:21:41'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 13:21:41
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Abusing Conda's YAML comments that are actually Python expressions
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滥用 Conda 的 YAML 注释，这些注释实际上是 Python 表达式
- en: 来源：[https://astrid.tech/2024/02/24/0/conda-recipe-selector-abuse/](https://astrid.tech/2024/02/24/0/conda-recipe-selector-abuse/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://astrid.tech/2024/02/24/0/conda-recipe-selector-abuse/](https://astrid.tech/2024/02/24/0/conda-recipe-selector-abuse/)
- en: Abusing Conda's YAML comments that are actually Python expressions
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滥用 Conda 的 YAML 注释，这些注释实际上是 Python 表达式
- en: my favorite build system, jinja-preprocessed-eval-preprocessed YAML
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我最喜欢的构建系统，jinja 预处理后的 YAML
- en: 2024-02-24 01:25*
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2024-02-24 01:25*
- en: '[python](/t/python) [Anaconda](/t/anaconda) [cybersecurity](/t/cybersecurity)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[python](/t/python) [Anaconda](/t/anaconda) [cybersecurity](/t/cybersecurity)'
- en: 'I was trying to submit a Conda package to [Conda Forge](https://conda-forge.org/),
    and I needed a way to mark it as Linux and MacOS only. As it turns out, you are
    supposed to define something like this in your `meta.yaml` build configuration
    file:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我试图将一个 Conda 软件包提交到 [Conda Forge](https://conda-forge.org/)，我需要一种方法来标记它仅适用于
    Linux 和 MacOS。事实证明，在你的 `meta.yaml` 构建配置文件中应该定义类似这样的内容：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What this seems to mean is, “skip the build if we are in windows.” Why is it
    a comment? I don’t know, but that’s what it is.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎意味着，“如果我们在 Windows 中，则跳过构建”。为什么是注释？我不知道，但就是这样。
- en: This package also is a Python 3.9 and above thing – we don’t support 3.8 or
    under. So, how do I add that constraint?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个软件包也是 Python 3.9 及以上的东西 - 我们不支持 3.8 或更低版本。那么，我该如何添加这个约束？
- en: Well, turns out this strange construct is called a “selector,” and there’s a
    section about what you can do with it in the [Conda docs](https://docs.conda.io/projects/conda-build/en/stable/resources/define-metadata.html#preprocessing-selectors)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，结果发现这种奇怪的结构被称为“选择器”，并且有关如何使用它的部分在 [Conda 文档](https://docs.conda.io/projects/conda-build/en/stable/resources/define-metadata.html#preprocessing-selectors)
    中有介绍
- en: You can add selectors to any line, which are used as part of a preprocessing
    stage. Before the `meta.yaml` file is read, each selector is evaluated and if
    it is `False`, the line that it is on is removed. A selector has the form `# [<selector>]`
    at the end of a line.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 您可以将选择器添加到任何一行中，它们将作为预处理阶段的一部分使用。在读取 `meta.yaml` 文件之前，每个选择器都会被评估，如果它是 `False`，则会删除它所在的行。选择器的形式是在行末添加
    `# [<selector>]`。
- en: ''
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Oh, that makes sense. Cursed, because YAML *shouldn’t* look like this with multiple
    keys in one object, but it makes sense.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，这有道理。诅咒，因为 YAML *不应该* 看起来像这样，一个对象中有多个键，但这是有道理的。
- en: A selector is a valid Python statement that is executed.
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 选择器是一个有效的 Python 语句，将被执行。
- en: Wait… what?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 等等… 什么？
- en: 'Because the selector is any valid Python expression, complicated logic is possible:'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因为选择器是任何有效的 Python 表达式，所以复杂的逻辑是可能的：
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Wait, *WHAT*?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，*什么*？
- en: So… what it’s saying is… this is what I want?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所以… 它的意思是… 这就是我想要的？
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: I put that into my `meta.yaml` and… turns out it made it work!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我把它放到了我的 `meta.yaml` 中，结果……它起作用了！
- en: But then, I got wondering, what *other* kinds of “complicated logic” is allowed
    in this selector?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我开始想，这个选择器中还允许哪些 *其他* 类型的“复杂逻辑”？
- en: Trying to accomplish arbitrary code execution
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试图实现任意代码执行
- en: I borrowed the following `meta.yaml` file from [conda-forge’s example](https://github.com/conda-forge/staged-recipes/blob/main/recipes/example/meta.yaml),
    but stripped it down a lot.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我从 [conda-forge 的示例](https://github.com/conda-forge/staged-recipes/blob/main/recipes/example/meta.yaml)
    中借鉴了以下 `meta.yaml` 文件，但大大简化了它。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then, I inserted the following string to see if it would work.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我插入了以下字符串以查看它是否起作用。
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'I ran `conda build`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我运行了 `conda build`：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It spits out a lot of output. We don’t need to go over all of it. It seemed
    to have immediately quit.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 它输出了大量内容。我们不需要全部查看。它似乎立即退出了。
- en: But, checking `/tmp/foo`…
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，检查 `/tmp/foo`……
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It fucking worked!!!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 真他妈的管用！！！
- en: Where can the selector be placed?
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择器可以放在哪里？
- en: I thought it might be smart to do something like this so that I don’t accidentally
    spit out a falsy value and make conda actually build the project, instead of only
    doing whatever shenanigans I was trying to accomplish.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得做这样的事情可能是明智的，这样我就不会意外地吐出一个虚假值，让 conda 实际上构建项目，而不仅仅是完成我尝试实现的任何花招。
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Why didn’t it work? Maybe it’s because the selector code is searching specifically
    for a comment with stuff in front of it. I don’t know. Either way, I can live
    with putting it on one of the attributes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么它不起作用？也许是因为选择器代码在专门搜索具有前缀的注释。我不知道。不管怎样，我可以将其放在其中一个属性上。
- en: Making it run a shell command
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让它运行一个 shell 命令
- en: Let’s try to have it run a shell. This can’t be too hard, right?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试着让它运行一个 shell。这应该不难，对吧？
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Seems like it didn’t like that. Probably because it specifically accepts an
    expression, not a series of statements.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来它不喜欢那样。可能是因为它特别接受一个表达式，而不是一系列语句。
- en: After a bit of digging around, turns out the answer was `exec()` (plus a `or
    True` to make it not build).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一番搜索，结果发现答案是 `exec()`（再加上一个 `or True` 使其不构建）。
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]conda build purge[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE13]conda build purge[PRE14]'
- en: Making it talk to other computers
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让它与其他计算机通信
- en: 'At this point, you can kinda just run whatever. Installing `netcat`, I used
    this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你几乎可以随意运行任何命令。安装 `netcat` 后，我使用了这个：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In a separate shell, I opened a server:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个 shell 中，我打开了一个服务器：
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Performing a build…
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 执行构建...
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: … conda froze! But in the other tab, I got the message.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: … conda 冻结了！但在另一个标签中，我收到了消息。
- en: '[PRE18]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: I typed `asdfasdf` into the server tab, and got data back in the builder.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我在服务器选项卡中输入了 `asdfasdf`，并在构建器中得到了数据返回。
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Making it spawn a reverse shell
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让它生成一个反向 shell
- en: This is, of course, the logical final step. In fact, this selector doesn’t even
    need netcat.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这是逻辑上的最后一步。事实上，这个选择器甚至不需要 netcat。
- en: '[PRE20]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Exploitability?
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 漏洞利用？
- en: Honestly, I don’t think that there’s much that’s exploitable about this that
    isn’t already exploitable. As far as I know, `conda build` doesn’t do containerization
    or other security measures like that, so any amount of exploitation I can do here
    is probably already exploitable by the build script.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 老实说，我认为这里没有太多是可利用的，这些都已经是可以利用的。据我所知，`conda build` 没有进行容器化或其他安全措施，因此我在这里可以做的任何利用都可能已经可以通过构建脚本利用了。
- en: I mean, I guess I *could* see a potential case where `conda build` has a command
    that spits out the `meta.yaml` after it has done its jinja and selector postprocessing,
    but without executing any scripts, and the user would expect that no arbitrary
    code execution is happening. In practice, I don’t think that’s really common –
    most people probably just run `conda build`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，我猜我*可能*可以看到一种情况，在`conda build`有一个命令，在进行了它的jinja和选择器后处理后，将`meta.yaml`输出，但没有执行任何脚本，并且用户会期望没有任意代码执行。实际上，我不认为这是很常见的——大多数人可能只是运行`conda
    build`。
- en: However, this is great for recipe developers – this mechanism lets you make
    your build logic be non-deterministic, and have arbitrarily-complicated logic
    and I/O! You can do all sorts of things, like don’t build if the user’s name starts
    with an “a,” combine this with curl and an HTTP server to act as a killswitch
    for builds, make the metadata evaluation step “borrow” peoples’ SSH keys, and
    more!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于食谱开发者来说，这很棒——这种机制使您的构建逻辑变得不确定，并且具有任意复杂的逻辑和I/O！您可以做各种各样的事情，比如如果用户的名字以“a”开头，则不构建，将其与curl和HTTP服务器结合起来充当构建的紧急停止开关，使元数据评估步骤“借用”人们的SSH密钥等等！
- en: What’s the code that actually calls eval?
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 到底是哪段代码调用了eval？
- en: The great thing about open source is that you can actually answer this question!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 开源的伟大之处在于你实际上可以回答这个问题！
- en: In the [conda-build repository](https://github.com/conda/conda-build), I searched
    for `eval`, and [this was the function](https://github.com/conda/conda-build/blob/cc7bb532eff61451853a8195f39688a2101a9548/conda_build/metadata.py#L255-L257)
    that seems to do it.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在[conda-build存储库](https://github.com/conda/conda-build)中，我搜索了`eval`，[这个函数](https://github.com/conda/conda-build/blob/cc7bb532eff61451853a8195f39688a2101a9548/conda_build/metadata.py#L255-L257)似乎做到了这一点。
- en: '[PRE21]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This code was last touched… [2017, in PR #1753](https://github.com/conda/conda-build/pull/1753).
    And that wasn’t the thing that actually introduced the `eval()`, that commit just
    moved it to a different place. [Here’s what it used to look like before that commit](https://github.com/conda/conda-build/blob/761b3dc00e85ab3f8e7443417cd1d3888d2cce04/conda_build/metadata.py#L109-L112):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '这段代码上一次修改是在……[2017年，在PR #1753](https://github.com/conda/conda-build/pull/1753)。而那并不是真正引入`eval()`的事情，那次提交只是将其移动到了另一个地方。[在那次提交之前它是这样的样子](https://github.com/conda/conda-build/blob/761b3dc00e85ab3f8e7443417cd1d3888d2cce04/conda_build/metadata.py#L109-L112)：'
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The comment came [in this 2016 commit](https://github.com/conda/conda-build/commit/d52852da9722e4b9b19664f7d0614b5ee5dfebdf#diff-a3f5613bda9366e31149c65731327047d4e29204c9e0508fd55416115b39a6bdR110-R111)
    from either [a group called Quantified Code](https://github.com/quantifiedcode)
    (whose website, [www.quantifiedcode.com](http://www.quantifiedcode.com/), appears
    to no longer work), or some automated tool they appear to have written. The `eval()`,
    on the other hand, came from [this 2,532-line commit in 2014 with the very informative
    title of “add new files”](https://github.com/conda/conda-build/commit/fe7f773010f4c8c200298c83a4164ca404626d52#diff-a3f5613bda9366e31149c65731327047d4e29204c9e0508fd55416115b39a6bdR52-R53).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个注释来自于[这个2016年的提交](https://github.com/conda/conda-build/commit/d52852da9722e4b9b19664f7d0614b5ee5dfebdf#diff-a3f5613bda9366e31149c65731327047d4e29204c9e0508fd55416115b39a6bdR110-R111)，可能来自于[一个叫做Quantified
    Code的组织](https://github.com/quantifiedcode)（他们的网站，[www.quantifiedcode.com](http://www.quantifiedcode.com/)，似乎已经不再工作），或者一些他们似乎已经编写的自动化工具。而`eval()`则来自于[这个2014年的2,532行提交，标题非常有意思，叫做“添加新文件”](https://github.com/conda/conda-build/commit/fe7f773010f4c8c200298c83a4164ca404626d52#diff-a3f5613bda9366e31149c65731327047d4e29204c9e0508fd55416115b39a6bdR52-R53)。
- en: I tried searching the issues to see if anyone has complained about how silly
    this `eval()` is, but I didn’t find anything. Perhaps people don’t mind at all.
    Perhaps there are even other people out there who are including shell scripts
    in their selectors!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我尝试搜索问题，看看是否有人抱怨这个`eval()`有多么愚蠢，但我什么也没找到。也许人们一点都不介意。也许甚至有其他人在他们的选择器中包含shell脚本！
- en: Conclusion
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Honestly, I don’t know how to conclude this. It’s a really silly thing that
    you can do, but it’s not even particularly exploitable. What I probably would
    have done if I wanted to implement something like this was cut the selector/jinja/YAML
    crap and just let the user write a Python script to generate this if you want
    your damn “flexibility.”
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 老实说，我不知道该怎么结束这个话题。这是一个你可以做的很愚蠢的事情，但它甚至都不是特别容易被利用。如果我真的想实现这样的东西，我可能会剪切选择器/jinja/YAML的东西，只让用户编写一个Python脚本来生成这个，如果你想要你那该死的“灵活性”的话。
- en: Okay, fine, maybe people really like their selector/jinja/YAML configs, and
    I really just had to deal with that fact. In that case, I would just was write
    a 100-200 line parser and interpreter for selector booleans. But my guess is that
    they probably rushed this and didn’t really fix it either.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，也许人们真的很喜欢他们的选择器/jinja/YAML配置，我真的必须接受这个事实。在这种情况下，我只会编写一个100-200行的选择器布尔解析器和解释器。但我猜他们可能匆忙而且也没有真正解决这个问题。
- en: Honestly, maybe I’m just being really negative. I’ll leave the final word to
    ChatGPT, who I have asked to help us be more optimistic about arbitrarily-executable
    YAML comments.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 老实说，也许我只是非常消极。我会把最后的话留给ChatGPT，我已经请他帮助我们更加乐观地看待任意可执行的YAML注释。
- en: Arbitrary code execution within configuration file comments epitomizes the flexibility
    and agility central to modern DevOps practices, providing developers with unparalleled
    customization, dynamic configuration management, self-documentation, automation,
    and advanced configuration options. By harnessing executable code snippets within
    comments, teams can swiftly adapt to changing requirements, seamlessly integrating
    infrastructure as code (IaC) principles into agile deployment pipelines and continuous
    integration/continuous deployment (CI/CD) workflows. This capability fosters a
    culture of innovation, enabling rapid iteration, experimentation, and optimization,
    while ensuring infrastructure scalability and reliability.
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 配置文件注释中的任意代码执行体现了现代 DevOps 实践的灵活性和敏捷性，为开发人员提供了无与伦比的定制化、动态配置管理、自我文档化、自动化和高级配置选项。通过在注释中利用可执行代码片段，团队可以迅速适应不断变化的需求，将基础设施即代码（IaC）原则无缝集成到敏捷部署流水线和持续集成/持续部署（CI/CD）工作流程中。这种能力促进了创新文化的形成，实现了快速迭代、实验和优化，同时确保了基础设施的可扩展性和可靠性。
- en: 'EDIT 2024-04-18: make title more informative'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 'EDIT 2024-04-18: 使标题更具信息性'
