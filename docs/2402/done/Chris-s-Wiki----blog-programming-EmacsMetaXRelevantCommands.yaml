- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 13:29:26'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 13:29:26'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '''relevant'' 在这里是什么意思？引用文档字符串：'
- en: 'Chris''s Wiki :: blog/programming/EmacsMetaXRelevantCommands'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Chris''s Wiki :: 博客/编程/EmacsMetaXRelevantCommands'
- en: 来源：[https://utcc.utoronto.ca/~cks/space/blog/programming/EmacsMetaXRelevantCommands](https://utcc.utoronto.ca/~cks/space/blog/programming/EmacsMetaXRelevantCommands)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在现代 Emacs 中，答案是这是 '`(interactive ...)`' 的扩展部分，这是您用于将您的 Lisp 函数标记为命令（将在 M-x 中提供并可以交互运行的内容）。如在
    Emacs Lisp 手册中的部分 [使用 `interactive`](https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Interactive.html)
    中所述， '`interactive`' 接受附加参数来标记您的命令专为哪些模式设计；更多讨论在 [为命令指定模式](https://www.gnu.org/software/emacs/manual/html_node/elisp/Command-Modes.html)
    中。基本用法是，比如 '`(interactive "P"
- en: 'Today I learned about [the M-X command (well, key binding)](https://svbck.org/blog/2024-02-24-emacs-find-of-the-day-m-x.html)
    ([via](https://fosstodon.org/@svbck/111987384357353958)), which "[queries the]
    user for a command relevant to the current mode, and then execute it". In other
    words it''s like M-x but it restricts what commands it offers to relevant ones.
    What is ''relevant'' here? To quote the docstring:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我了解了[M-X 命令（好吧，键绑定）](https://svbck.org/blog/2024-02-24-emacs-find-of-the-day-m-x.html)（[通过](https://fosstodon.org/@svbck/111987384357353958)），它
    "[查询]用户当前模式下的命令，并执行它"。换句话说，它就像 M-x，但它限制了提供的命令。
- en: '[...] This includes commands that have been marked as being specially designed
    for the current major mode (and enabled minor modes), as well as commands bound
    in the active local key maps.'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[...] 这包括已标记为专门为当前主要模式（和已启用的次要模式）设计的命令，以及绑定在活动本地键映射中的命令。'
- en: If you're someone like me who has written some Lisp commands to customize your
    experience in a major mode like [MH-E](https://www.gnu.org/software/emacs/manual/html_node/mh-e/index.html),
    you might wonder how you mark your personal Lisp commands as 'specially designed'
    for the relevant major mode.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果您的命令在主要模式中有键绑定，您就不需要这样做，因为 M-X（execute-extended-command-for-buffer）已经提供了任何具有键绑定的命令。其次，[我的各种包](/~cks/space/blog/programming/EmacsPackages-2023-11)已经为我提供了相当多的选择权，在普通
    M-x 中缩小了可能命令的范围，前提是我已经合理地命名了它们。 [vertico](https://github.com/minad/vertico)、[marginalia](https://github.com/minad/marginalia)
    和 [orderless](https://github.com/oantolin/orderless) 的组合让我可以通过子字符串搜索命令，轻松看到我的选项之一，并且还可以看到部分描述。所以，如果我知道我想做一些与
    MH 转发有关的事情，我可以键入 'M-x mh forw'，然后，除其他外，还会得到我的函数，用于[以“纯文本”格式转发](/~cks/space/blog/sysadmin/EmailThreeForwardingFormats)。
- en: In modern Emacs, the answer is that this is an extended part of '`(interactive
    ...)`', the normal Lisp form you use to mark your Lisp functions as commands (things
    which will be offered in M-x and can be run interactively). As mentioned in the
    Emacs Lisp manual section [Using `interactive`](https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Interactive.html),
    '`interactive`' takes additional arguments to label what modes your command is
    'specially designed' for; more discussion is in [Specifying Modes For Commands](https://www.gnu.org/software/emacs/manual/html_node/elisp/Command-Modes.html).
    The basic usage is, say, '`(interactive "P" mh-folder-mode)`'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您像我一样编写了一些 Lisp 命令来自定义主要模式（比如[MH-E](https://www.gnu.org/software/emacs/manual/html_node/mh-e/index.html)）的体验，您可能会想知道如何将您的个人
    Lisp 命令标记为 '特别设计'，以适应相关主要模式。
- en: If your commands already take arguments, life is simple and you can just put
    the modes on the end. But not all commands do (especially for quick little things
    you do for yourself). If you have just '`(interactive)`', the correct change is
    to make it '`(interactive nil mh-folder-mode)`'; a nil first argument is how you
    tell `interactive` that there is no argument.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的命令已经带有参数，那么很简单，您只需将模式放在末尾即可。但并不是所有命令都这样做（特别是对于您自己做的一些小事情）。如果您只有 '`(interactive)`'，那么正确的更改是将其更改为
    '`(interactive nil mh-folder-mode)`'；一个 nil 的第一个参数是告诉 `interactive` 没有参数的方式。
- en: (Don't make my initial mistake and assume that '`(interactive "" mh-folder-mode)`'
    will work. That produced a variety of undesirable results.)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: （不要像我一开始那样假设 '`(interactive "" mh-folder-mode)`' 会起作用。这会产生各种不良结果。）
- en: Is it useful to do this, assuming you have personal commands that are truly
    specific to a given mode (as I do for commands that operate on MH messages and
    the MH folder display)? My views so far are a decided maybe in my environment.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有真正针对特定模式的个人命令（就像我对操作 MH 消息和 MH 文件夹显示的命令一样），那么这样做有用吗？到目前为止，我在我的环境中的观点是一个明确的或许。
- en: First, you don't need to do this if your commands have keybindings in your major
    mode, because M-X (execute-extended-command-for-buffer) will already offer any
    commands that have keybindings. Second, [my assortment of packages](/~cks/space/blog/programming/EmacsPackages-2023-11)
    already gives me quite a lot of selection power to narrow in on likely commands
    in plain M-x, provided that I've named them sensibly. The combination of [vertico](https://github.com/minad/vertico),
    [marginalia](https://github.com/minad/marginalia), and [orderless](https://github.com/oantolin/orderless)
    let me search for commands by substrings, easily see a number of my options, and
    also see part of their descriptions. So if I know I want something to do with
    MH forwarding I can type 'M-x mh forw' and get, among other things, my function
    for [forwarding in 'literal plaintext' format](/~cks/space/blog/sysadmin/EmailThreeForwardingFormats).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: With that said, adding the mode to '(interactive)' isn't much work and it does
    sort of add some documentation about your intentions that your future self may
    find useful. And if you want a more minimal [minibuffer completion](/~cks/space/blog/programming/EmacsUnderstandingCompletion)
    experience, it may be more useful to have a good way to winnow down the selection.
    If you use M-X frequently and you have commands you want to be able to select
    in it in applicable modes without having them bound to keys, you really have no
    choice.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然如此，将模式添加到 '(interactive)' 并不是很费力，而且它确实在一定程度上为你的未来自己提供了一些关于你意图的文档，这可能会很有用。
    如果你想要更简约的[minibuffer完成](/~cks/space/blog/programming/EmacsUnderstandingCompletion)体验，也许有一个很好的方法来精简选择会更有用。
    如果你经常使用 M-X，并且你有想要在适用模式中能够选择的命令而又不想将它们绑定到键上，你确实别无选择。
