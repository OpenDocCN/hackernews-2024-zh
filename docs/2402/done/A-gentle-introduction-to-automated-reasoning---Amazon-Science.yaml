- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:51:23'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:51:23'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: A gentle introduction to automated reasoning - Amazon Science
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动推理的简明介绍 - 亚马逊科学
- en: 来源：[https://www.amazon.science/blog/a-gentle-introduction-to-automated-reasoning](https://www.amazon.science/blog/a-gentle-introduction-to-automated-reasoning)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.amazon.science/blog/a-gentle-introduction-to-automated-reasoning](https://www.amazon.science/blog/a-gentle-introduction-to-automated-reasoning)
- en: This week, Amazon Science added [automated reasoning](https://www.amazon.science/research-areas/automated-reasoning)
    to its list of research areas. We made this change because of the impact that
    automated reasoning is having here at Amazon. For example, Amazon Web Services’
    customers now have direct access to automated-reasoning-based features such as
    [IAM Access Analyzer](https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html),
    [S3 Block Public Access](https://aws.amazon.com/blogs/aws/amazon-s3-block-public-access-another-layer-of-protection-for-your-accounts-and-buckets/),
    or [VPC Reachability Analyzer](https://docs.aws.amazon.com/vpc/latest/reachability/what-is-reachability-analyzer.html).
    We also see Amazon development teams [integrating automated-reasoning tools](https://www.amazon.science/blog/how-automated-reasoning-improves-the-prime-video-experience)
    into their development processes, raising the bar on the [security](https://www.amazon.science/latest-news/how-awss-automated-reasoning-group-helps-make-aws-and-other-amazon-products-more-secure),
    [durability](https://www.amazon.science/blog/aws-team-wins-best-paper-award-for-work-on-automated-reasoning),
    availability, and quality of our products.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本周，亚马逊科学将[自动推理](https://www.amazon.science/research-areas/automated-reasoning)列入其研究领域之一。我们之所以做出这一改变，是因为自动推理在亚马逊的影响。例如，亚马逊网络服务的客户现在可以直接访问基于自动推理的功能，例如[IAM访问分析器](https://docs.aws
- en: The goal of this article is to provide a gentle introduction to automated reasoning
    for the industry professional who knows nothing about the area but is curious
    to learn more. All you will need to make sense of this article is to be able to
    read a few small C and Python code fragments. I will refer to a few specialist
    concepts along the way, but only with the goal of introducing them in an informal
    manner. I close with links to some of our favorite publicly available tools, videos,
    books, and articles for those looking to go more in-depth.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的目标是为对该领域一无所知但对自动推理感兴趣的行业专业人士提供一个简明的介绍。您所需要理解本文的全部内容只是能够阅读几行简短的C和Python代码片段。我会一路上提到一些专业概念，但目标只是以非正式的方式介绍它们。最后，我会附上一些我们喜欢的公开工具、视频、书籍和文章的链接，供那些希望深入了解的人参考。
- en: 'Let’s start with a simple example. Consider the following C function:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简单的例子开始。考虑以下C函数：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Take a few moments to answer the question *“Could *f* ever return false?”*
    This is not a trick question: I’ve purposefully used a simple example to make
    a point.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 花点时间回答问题*“*f*能否返回false？”*这不是一个刁钻的问题：我故意使用了一个简单的例子来说明一个观点。
- en: 'To check the answer with exhaustive testing, we could try executing the following
    doubly nested test loop, which calls *f* on all possible pairs of values of the
    type unsigned int:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过详尽的测试检查答案，我们可以尝试执行以下双重嵌套的测试循环，它调用*f*来处理unsigned int类型的所有可能值对：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Unfortunately, even on modern hardware, this doubly nested loop will run for
    a *very long* time. I compiled it and ran it on a 2.6 GHz Intel processor for
    over 48 hours before giving up.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 很不幸，即使在现代硬件上，这个双重嵌套循环也会运行*很长*时间。我在一台2.6 GHz的英特尔处理器上编译并运行了48小时以上，然后放弃了。
- en: Why does testing take so long? Because UINT_MAX is typically 4,294,967,295,
    there are 18,446,744,065,119,617,025 separate *f* calls to consider. On my 2.6
    GHz machine, the compiled test loop called *f* approximately 430 million times
    a second. But to test all 18 quintillion cases at this performance, we would need
    over 1,360 years.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么测试时间如此之长？因为UINT_MAX通常为4,294,967,295，有18,446,744,065,119,617,025个单独的*f*调用需要考虑。在我的2.6
    GHz机器上，编译后的测试循环每秒大约调用*f*约430百万次。但要以这种性能测试所有18 quintillion个案例，我们需要超过1,360年。
- en: When we show the above code to industry professionals, they almost immediately
    work out that *f* can't return false as long as the underlying compiler/interpreter
    and hardware are correct. How do they do that? They *reason* about it. They remember
    from their school days that *x + y* can be rewritten as *y + x* and conclude that
    *f* always returns true.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向行业专业人士展示上述代码时，他们几乎立即就能推断出只要底层编译器/解释器和硬件正确，*f*就不可能返回false。他们是如何做到的呢？他们*推理*。他们记得从学校时代起，*x
    + y*可以被重写为*y + x*，并且得出结论*f*总是返回true。
- en: Re:Invent 2021 keynote address by Peter DeSantis, senior vice president for
    utility computing at Amazon Web Services
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由亚马逊网络服务公用事业计算高级副总裁彼得·德桑蒂斯（Peter DeSantis）主持的Re:Invent 2021主题演讲
- en: Skip to
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 跳转至
- en: '[15:49](https://youtu.be/9NEQbFLtDmg?t=949)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[15:49](https://youtu.be/9NEQbFLtDmg?t=949)'
- en: for a discussion of Amazon Web Services' work on automated reasoning.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论亚马逊网络服务在自动推理方面的工作。
- en: 'An *automated* reasoning tool does this work for us: it attemptsto answer questions
    about a program (or a logic formula) by using known techniques from mathematics.
    In this case, the tool would use algebra to deduce that *x + y == y + x* can be
    replaced with the simple expression true.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*自动*推理工具为我们完成了这项工作：它尝试使用来自数学的已知技术来回答关于程序（或逻辑公式）的问题。在这种情况下，工具将使用代数推导出*x + y
    == y + x*可以被简单地替换为true这一简单表达式。
- en: Automated-reasoning tools can be incredibly fast, even when the domains are
    infinite (e.g., unbounded mathematical integers rather than finite C ints). Unfortunately,
    the tools may answer *“Don’t know” *in some instances. We'll see a famous example
    of that below.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在域是无限的情况下（例如，不受限制的数学整数而不是有限的C整数），自动推理工具也可能非常快速。 不幸的是，在某些情况下，工具可能会回答*“不知道”*。
    我们将在下面看到一个著名的例子。
- en: 'The *science* of automated reasoning is essentially focused on driving the
    frequency of these *“Don’t know”* answers down as far as possible: the less often
    the tools report *"Don''t know"* (or time out while trying), the more useful they
    are.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 自动推理的*科学*本质上集中在尽可能降低这些*“不知道”*答案的频率上：工具报告*“不知道”*（或者在尝试时超时）的次数越少，它们就越有用。
- en: Today’s tools are able to give answers for programs and queries where yesterday’s
    tools could not. Tomorrow’s tools will be even more powerful. We are seeing rapid
    progress in this field, which is why at Amazon, we are increasingly getting so
    much value from it. In fact, we see automated reasoning forming its own Amazon-style
    virtuous cycle, where more input problems to our tools drive improvements to the
    tools, which encourages more use of the tools.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的工具能够为昨天的工具无法解决的程序和查询提供答案。 明天的工具将更加强大。 我们看到这个
- en: A slightly more complex example. Now that we know the rough outlines of what
    automated reasoning is, the next small example gives a slightly more realistic
    taste of the sort of complexity that the tools are managing for us.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个稍微复杂一点的例子。 现在我们知道了自动推理的大致轮廓，下一个小例子给出了一种略微更现实的感觉，展示了工具为我们管理的复杂性的一些例子。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Or, alternatively, consider a similar Python program over unbounded integers:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，考虑一个类似的Python程序，其中涉及无界整数：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Try to answer this question: *“Does *g* always eventually return control back
    to its caller?”*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试回答这个问题：*“*g*是否始终最终将控制返回给其调用者？”*
- en: When we show this program to industry professionals, they usually figure out
    the right answer quickly. A few, especially those who are aware of results in
    theoretical computer science, sometimes mistakenly think that we can't answer
    this question, with the rationale *“This is an example of the *[*halting problem*](https://en.wikipedia.org/wiki/Halting_problem)*,
    which has been proved insoluble”. *In fact, we *can *reason about the halting
    behavior for *specific* programs, including this one. We’ll talk more about that
    later.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向行业专业人士展示此程序时，他们通常会迅速找到正确答案。 一些人，尤其是那些了解理论计算机科学结果的人，有时会错误地认为我们无法回答这个问题，理由是*“这是*[*停机问题*](https://en.wikipedia.org/wiki/Halting_problem)*的一个例子，已经被证明是不可解的”。*事实上，我们*可以*推理出特定程序的停机行为，包括这个程序。
    我们稍后会详细讨论这一点。
- en: 'Here’s the reasoning that most industry professionals use when looking at this
    problem:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数行业专业人士在解决这个问题时通常使用的推理如下：
- en: In the case where *y* is not positive, execution jumps to the end of the function *g*.
    That’s the easy case.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*y*不为正的情况下，执行跳转到函数*g*的末尾。 那是容易的情况。
- en: If, in every iteration of the loop, the value of the variable *x* decreases,
    then eventually, the loop condition *x* > *y* will fail, and the end of *g* will
    be reached.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在循环的每次迭代中，变量*x*的值都减小，那么最终，循环条件*x* > *y*将失败，并且将到达*g*的末尾。
- en: The value of *x* always decreases only if *y* is always positive, because only
    then does the update to x (i.e., *x* = *x* - *y*) decrease *x*. But *y*’s positivity
    is established by the conditional expression, so *x* always decreases.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当且仅当*y*始终为正时，*x*的值才会下降，因为只有这样，对*x*的更新（即*x* = *x* - *y*）才会减小*x*。但*y*的正性是由条件表达式确定的，因此*x*始终减小。
- en: The experienced programmer will usually worry about underflow in the *x* = *x*
    - *y* command of the C program but will then notice that *x* > *y* before the
    update to *x* and thus cannot underflow.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有经验的程序员通常会担心C程序中*x* = *x* - *y*命令的下溢，但然后会注意到在对*x*进行更新之前*x* > *y*，因此不能下溢。
- en: If you carried out the three steps above yourself, you now have a very intuitive
    view of the type of thinking an automated-reasoning tool is performing on our
    behalf when reasoning about a computer program. There are many nitty-gritty details
    that the tools have to face (e.g., heaps, stacks, strings, pointer arithmetic,
    recursion, concurrency, callbacks, etc.), but there’s also decades of research
    papers on techniques for handling these and other topics, along with various practical
    tools that put these ideas to work.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你自己执行了上述三个步骤，那么现在你对于自动推理工具在我们的计算机程序中执行的思维方式有了非常直观的理解。 工具必须面对许多琐碎的细节（例如堆、栈、字符串、指针算术、递归、并发、回调等），但也有几十年的关于处理这些和其他主题的技术研究论文，以及将这些想法付诸实践的各种实用工具。
- en: Automated reasoning can be applied to both policies *(top)* and code *(bottom)*.
    In both cases, an essential step is reasoning about what's *always* true.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 自动推理可以应用于政策（*顶部*）和代码（*底部*）。 在这两种情况下，一个重要的步骤是推理关于什么是*始终*真实的。
- en: 'The main takeaway is that automated-reasoning tools are usually working through
    the three steps above on our behalf: Item 1 is reasoning about the program’s *control
    structure*. Item 2 is reasoning about what is *eventually* true within the program.
    Item 3 is reasoning about what is *always* true in the program.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 主要要点是，自动推理工具通常是在我们的代表性之上执行上述三个步骤的：项目1是推理程序的*控制结构*。项目2是推理程序中*最终*为真的事情。项目3是推理程序中*始终*为真的事情。
- en: Note that configuration artifacts such as AWS resource policies, VPC network
    descriptions, or even makefiles can be thought of as code. This viewpoint allows
    us to use the same techniques we use to reason about C or Python code to answer
    questions about the *interpretation* of configurations. It’s this insight that
    gives us tools like IAM Access Analyzer or VPC Reachability Analyzer.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，配置工件（例如 AWS 资源策略、VPC 网络描述，甚至是 makefiles）可以被视为代码。这种观点使我们能够使用我们用于推理 C 或 Python
    代码的相同技术来回答关于*配置解释*的问题。正是这一见解给了我们像 IAM 访问分析器或 VPC 可达性分析器这样的工具。
- en: ''
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An end to testing?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的终结？
- en: As we saw above when looking at *f* and *g*, automated reasoning can be dramatically
    faster than exhaustive testing. With tools available today, we can show properties
    of *f* or *g* in milliseconds, rather than waiting lifetimes with exhaustive testing.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上面看到的那样，当我们查看*f*和*g*时，自动推理可能比穷举测试快得多。借助当今可用的工具，我们可以在毫秒内显示*f*或*g*的属性，而不是等待穷举测试终生。
- en: 'Can we throw away our testing tools now and just move to automated reasoning?
    Not quite. Yes, we can dramatically reduce our dependency on testing, but we will
    not be completely eliminating it any time soon, if ever. Consider our first example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以放弃我们的测试工具，只转移到自动推理吗？还不完全。是的，我们可以大大减少对测试的依赖，但我们不会很快完全消除它，如果有的话。考虑我们的第一个例子：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Recall the worry that a buggy compiler or microprocessor could in fact cause
    an executable program constructed from this source code to return false. We might
    also need to worry about the language runtime. For example, the C math library
    or the Python garbage collector might have bugs that cause a program to misbehave.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 记得担心一个有错的编译器或微处理器实际上可能导致从这个源代码构建的可执行程序返回假。我们可能还需要担心语言运行时。例如，C 数学库或 Python 垃圾收集器可能存在导致程序表现异常的错误。
- en: What’s interesting about testing, and something we often forget, is that it’s
    doing much more than just telling us about the C or Python source code. It’s also
    testing the compiler, the runtime, the interpreter, the microprocessor, etc. A
    test failure could be rooted in any of those tools in the stack.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 关于测试有趣的地方，我们经常忽略的是，它不仅仅告诉我们关于 C 或 Python 源代码的情况。它还测试编译器、运行时、解释器、微处理器等。测试失败可能源于栈中任何一个工具。
- en: Automated reasoning, in contrast, is usually applied to just one layer of that
    stack — the source code itself, or sometimes the compiler or the microprocessor.
    What we find so valuable about reasoning is it allows us to clearly define both
    what we *do* know and what we *do not* know about the layer under inspection.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，自动推理通常仅应用于栈的一个层次——源代码本身，有时是编译器或微处理器。我们发现推理有价值的地方在于它允许我们清楚地定义我们对所检查层的*已知*和*未知*。
- en: Furthermore, the models of the surrounding environment (e.g., the compiler or
    the procedure calling our procedure) used by the automated-reasoning tool make
    our assumptions *very* precise. Separating the layers of the computational stack
    helps make better use of our time, energy, and money and the capabilities of the
    tools today and tomorrow.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，自动推理工具使用的周围环境模型（例如，编译器或调用我们过程的过程）使我们的假设*非常*精确。分离计算栈的层有助于更好地利用我们的时间、精力和金钱以及今天和明天的工具功能。
- en: Unfortunately, we will almost always need to make assumptions about *something *when
    usingautomated reasoning — for example, the principles of physics that govern
    our silicon chips. Thus, testing will never be fully replaced. We will want to
    perform end-to-end testing to try and validate our assumptions as best we can.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，当使用自动推理时，我们几乎总是需要对*某些事情*做出假设——例如，控制我们硅片的物理原理。因此，测试永远不会被完全取代。我们将希望执行端到端测试，尽可能验证我们的假设。
- en: ''
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An impossible program
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不可能的程序
- en: I previously mentioned that automated-reasoning tools sometimes return *“Don’t
    know”* rather than *“yes”* or *“no”*. They also sometimes run forever (or time
    out), thus never returning an answer. Let’s look at the famous "halting problem"
    program, in which we know tools *cannot* return *“yes”* or *“no”*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前提到，自动推理工具有时会返回*“不知道”*而不是*“是”*或*“否”*。它们有时也会永远
- en: Imagine that we have an automated-reasoning API, called *terminates*, that returns
    *“yes” *if a C function always terminates or *“no” *when the function could execute
    forever. As an example, we could build such an API using the tool described [here](https://vimeo.com/81641895)
    (shameless self-promotion of author’s previous work). To get the idea of what
    a termination tool can do for us, consider two basic C functions, *g* (from above),
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下我们有一个自动推理 API，称为*terminates*，如果一个 C 函数总是终止，则返回*“是”*，当函数可能永远执行时返回*“否”*。例如，我们可以使用[这里](https://vimeo.com/81641895)描述的工具构建这样的
    API（作者之前的工作的无耻自荐）。为了了解终止工具可以为我们做什么，考虑两个基本的 C 函数，*g*（来自上文），
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'and g2:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 和 g2：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For the reasons we have already discussed, the function *g* always returns control
    back to its caller, so *terminates(g)* should return true. Meanwhile, *terminates(g2)*
    should return false because, for example, *g2(5, 0)* will never terminate.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 出于我们已经讨论过的原因，函数*g*总是将控制返回给其调用者，因此*terminates(g)*应返回 true。同时，*terminates(g2)*应返回
    false，因为，例如，*g2(5, 0)*永远不会终止。
- en: 'Now comes the difficult function. Consider *h*:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来谈谈困难的函数。考虑*h*：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice that it's recursive. What’s the right answer for *terminates(h)*? The
    answer cannot be "yes". It also cannot be "no". Why?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到这是递归的。*terminates(h)* 的正确答案是什么？答案既不能是“是”，也不能是“否”。为什么？
- en: Imagine that *terminates(h)* were to return "yes". If you read the code of *h*,
    you’ll see that in this case, the function does not terminate because of the conditional
    statement in the code of *h* that will execute the infinite loop *while(1){}*.
    Thus, in this case, the *terminates(h)* answer would be wrong, because *h* is
    defined recursively, calling terminates on itself.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下*terminates(h)*返回“是”的情况。如果你阅读*h*的代码，你会看到，因为*h*代码中的条件语句会执行无限循环*while(1){}*，所以这个函数在这种情况下不会终止。因此，在这种情况下，*terminates(h)*的答案是错误的，因为*h*被递归定义，调用自身。
- en: Similarly, if *terminates(h)* were to return "no", then *h* would in fact terminate
    and return control to its caller, because the *if* case of the conditional statement
    is not met, and there is no else branch. Again, the answer would be wrong. This
    is why the *“Don’t know”* answer is actually unavoidable in this case.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果*terminates(h)*返回“否”，那么*h*实际上会终止并返回控制给它的调用者，因为条件语句的*if*分支不满足，并且没有else分支。再次，答案是错误的。这就是为什么在这种情况下*“不知道”*的答案实际上是不可避免的。
- en: The program *h* is a variation of examples given in Turing’s [famous 1936 paper](https://www.cs.virginia.edu/~robins/Turing_Paper_1936.pdf)
    on decidability and [Gödel’s incompleteness theorems](https://en.wikipedia.org/wiki/G%C3%B6del%27s_incompleteness_theorems)
    from 1931\. These papers tell us that problems like the halting problem cannot
    be “solved”, if by*“*solved*” *we mean that the solution procedure itself always
    terminates and answers either *“yes”* or *“no”* but never *“Don’t know”*. But
    that is not the definition of “solved” that many of us have in mind. For many
    of us, a tool that sometimes times out or occasionally returns *“Don’t know”*
    but, when it gives an answer, always gives the right answer is good enough.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 程序*h*是图灵的 [1936 年著名论文](https://www.cs.virginia.edu/~robins/Turing_Paper_1936.pdf)
    上和 [哥德尔不完备定理](https://en.wikipedia.org/wiki/G%C3%B6del%27s_incompleteness_theorems)
    上的例子的一个变体。这些论文告诉我们，像停机问题这样的问题是不能被“解决”的，如果我们所说的“解决”是指解决过程本身总是终止并且始终给出*“是”*或*“否”*的答案，但从来不是*“不知道”*。但这并不是我们心目中“解决”的定义。对于我们许多人来说，一个工具，有时会超时或偶尔返回*“不知道”*，但当它给出一个答案时，总是给出正确答案，这是足够好的。
- en: 'This problem is analogous to airline travel: we know it’s not 100% safe, because
    crashes have happened in the past, and we are sure that they will happen in the
    future. But when you land safely, you *know* it worked that time. The goal of
    the airline industry is to reduce failure as much as possible, even though it’s
    in principle unavoidable.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题类似于航空旅行：我们知道它并不百分之百安全，因为过去发生过事故，而且我们确定将来也会发生。但当你安全降落时，你*知道*那次是成功的。航空工业的目标是尽可能地减少失败，即使从原理上讲是不可避免的。
- en: 'To put that in the context of automated reasoning: for some programs, like
    *h*, we can never improve the tool enough to replace the *"Don''t know"* answer.
    But there are many other cases where today''s tools answer *"Don''t know"*, but
    future tools may be able to answer *"yes"* or *"no"*. The modern scientific challenge
    for automated-reasoning subject-matter experts is to get the practical tools to
    return *“yes”* or *“no” *as often as possible. As an example of current work,
    check out CMU professor and [Amazon scholar](https://www.amazon.science/scholars)
    [Marijn Heule](https://www.cs.cmu.edu/~mheule/) and his [quest to solve the Collatz
    termination problem](https://www.quantamagazine.org/computer-scientists-attempt-to-corner-the-collatz-conjecture-20200826/).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个放在自动推理的背景下：对于一些程序，例如*h*，我们永远无法改进工具以取代“不知道”的答案。但有许多其他情况，今天的工具会回答“不知道”，但未来的工具可能能够更多地回答“是”或“否”。自动推理专业人员的现代科学挑战是尽可能频繁地使实际工具返回“是”或“否”。作为当前工作的一个例子，请查看
    CMU 教授和 [亚马逊学者](https://www.amazon.science/scholars) [Marijn Heule](https://www.cs.cmu.edu/~mheule/)
    及其 [解决柯拉茨终止问题](https://www.quantamagazine.org/computer-scientists-attempt-to-corner-the-collatz-conjecture-20200826/)
    的努力。
- en: 'Another thing to keep in mind is that automated-reasoning tools are regularly
    trying to solve “intractable” problems, e.g.*,* problems in the [NP](https://news.mit.edu/2009/explainer-pnp)
    complexity class. Here, the same thinking applies that we saw in the case of the
    halting problem: automated-reasoning tools have powerful heuristics that often
    work around the intractability problem for specific cases, but those heuristics
    can (and sometimes do) fail, resulting in *“Don’t know”* answers or impractically
    long execution time. The science is to improve the heuristics to minimize that
    problem.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要记住的事情是，自动推理工具经常在尝试解决“棘手”的问题，例如 [NP](https://news.mit.edu/2009/explainer-pnp)
    复杂性类中的问题。在这里，我们看到了与停机问题类似的思维方式：自动推理工具具有强大的启发式方法，通常可以解决特定情况下的难题，但这些启发式方法有时会失败，导致“不知道”的答案或不切实际的长时间执行。科学就是改进这些启发式方法以尽量减少这个问题。
- en: ''
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nomenclature
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 术语
- en: 'A host of names are used in the scientific literature to describe interrelated
    topics, of which automated reasoning is just one. Here’s a quick glossary:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 科学文献中使用了许多名词来描述相关主题，其中自动推理只是其中之一。以下是一个快速词汇表：
- en: A *logic* is a formal and mechanical system for defining what is true and untrue.
    Examples: [propositional logic](https://en.wikipedia.org/wiki/Propositional_calculus) or [first-order
    logic](https://en.wikipedia.org/wiki/First-order_logic).
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*逻辑*是一个形式化和机械化的系统，用于定义什么是真和什么是假。例如：[命题逻辑](https://en.wikipedia.org/wiki/Propositional_calculus)或[一阶逻辑](https://en.wikipedia.org/wiki/First-order_logic)。'
- en: 'A *theorem* is a true statement in logic. Example: the [four-color theorem](https://en.wikipedia.org/wiki/Four_color_theorem).'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*定理*是逻辑上的真实陈述。例如：[四色定理](https://en.wikipedia.org/wiki/Four_color_theorem)。'
- en: 'A *proof* is a valid argument in logic of a theorem. Example: Gonthier''s [proof
    of the four-color theorem](http://www.ams.org/notices/200811/tx081101382p.pdf).'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*证明*是一个定理的逻辑上有效的论证。例如：Gonthier的[四色定理证明](http://www.ams.org/notices/200811/tx081101382p.pdf)。'
- en: A *mechanical theorem prover* is a semi-automated-reasoning tool that checks
    a machine-readable expression of a proof often written down by a human. These
    tools often require human guidance. Example: [HOL-light](https://github.com/jrh13/hol-light/),
    from Amazon researcher [John Harrison](https://www.cl.cam.ac.uk/~jrh13/).
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*机械定理证明器*是半自动推理工具，它检查机器可读的证明表达式，通常由人类编写。这些工具通常需要人类指导。示例：[HOL-light](https://github.com/jrh13/hol-light/)，来自亚马逊研究员[约翰·哈里森](https://www.cl.cam.ac.uk/~jrh13/)。'
- en: '*Formal verification* is the use of theorem proving when applied to models
    of computer systems to prove desired properties of the systems. Example: the [CompCert
    verified C compiler](https://compcert.org/doc/).'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*形式验证*是将定理证明应用于计算机系统模型以证明系统所需属性的使用。示例：[CompCert 验证的 C 编译器](https://compcert.org/doc/)。'
- en: '*Formal methods* is the broadest term, meaning simply the use of logic to reason
    formally about models of systems.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*形式方法*是最广泛的术语，简单地指的是使用逻辑对系统模型进行形式推理。'
- en: '*Automated reasoning* focuses on the automation of formal methods.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自动推理*侧重于形式方法的自动化。'
- en: A *semi-automated-reasoning* tool is one that requires hints from the user but
    still finds valid proofs in logic.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*半自动推理*工具需要用户提供提示，但仍然能在逻辑中找到有效的证明。'
- en: As you can see, we have a choice of monikers when working in this space. At
    Amazon, we’ve chosen to use automated reasoning, as we think it best captures
    our ambition for automation and scale. In practice, some of our internal teams
    use both automated and *semi-*automated reasoning tools, because the scientists
    we've hired can often get semi-automated reasoning tools to succeed where the
    heuristics in fully automated reasoning might fail. For our externally facing
    customer features, we currently use only fully automated approaches.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们在这个领域有多种选择。在亚马逊，我们选择使用自动推理，因为我们认为它最能体现我们对自动化和规模化的雄心。实际上，我们的一些内部团队同时使用自动和*半*自动推理工具，因为我们聘请的科学家通常能够使半自动推理工具成功，而在完全自动推理中的启发式算法可能会失败。对于我们外部客户面向的功能，我们目前仅使用完全自动化方法。
- en: ''
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next steps
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步
- en: In this essay, I’ve introduced the idea of automated reasoning, with the smallest
    of toy programs. I haven’t described how to handle realistic programs, with heap
    or concurrency. In fact, there are a wide variety of automated-reasoning tools
    and techniques, solving problems in all kinds of different domains, some of them
    quite narrow. To describe them all and the many branches and sub-disciplines of
    the field (e.g. “SMT solving”, “higher-order logic theorem proving”, “separation
    logic”) would take thousands of blogs posts and books.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我介绍了自动推理的概念，使用了最简单的玩具程序。我没有描述如何处理具有堆或并发性的现实程序。事实上，有各种各样的自动推理工具和技术，解决着各种不同领域的问题，其中一些问题非常狭窄。要描述它们以及该领域的许多分支和子学科（例如“SMT求解”、“高阶逻辑定理证明”、“分离逻辑”）将需要成千上万篇博客文章和书籍。
- en: Automated reasoning goes back to the early inventors of computers. And logic
    itself (which automated reasoning attempts to solve) is thousands of years old.
    In order to keep this post brief, I’ll stop here and suggest further reading.
    Note that it’s very easy to get lost in the weeds reading depth-first into this
    area, and you could emerge more confused than when you started. I encourage you
    to use a bounded depth-first search approach, looking sequentially at a wide variety
    of tools and techniques in only some detail and then moving on, rather than learning
    only one aspect deeply.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 自动推理可以追溯到计算机的早期发明者。而逻辑本身（自动推理试图解决的问题）已经存在数千年了。为了使本文简洁，我将在此停止并建议进一步阅读。请注意，要深入探索这个领域，很容易陷入困境，可能比开始时更加困惑。我鼓励您使用有界的深度优先搜索方法，顺序地查看各种工具和技术，只略微了解一些细节，然后继续前进，而不是仅仅深入学习一个方面。
- en: ''
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Suggested books:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐书籍：
- en: ''
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'International conferences/workshops:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 国际会议/研讨会：
- en: ''
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Tool competitions:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 工具比赛：
- en: ''
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some tools:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一些工具：
- en: ''
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Interviews of Amazon staff about their use of automated reasoning:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊员工关于他们使用自动推理的采访：
- en: ''
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'AWS Lectures aimed at customers and industry:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 针对客户和行业的 AWS 讲座：
- en: ''
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'AWS talks aimed at the automated-reasoning science community:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 面向自动推理科学界的 AWS 讲座：
- en: '[Debugging Network Reachability with Blocked Paths](https://ucl-pplv.github.io/CAV21/poster_P_215/),
    CAV''21'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用阻塞路径调试网络可达性](https://ucl-pplv.github.io/CAV21/poster_P_215/)，CAV''21'
- en: '[Embedded World 2021: Formally Verifying the FreeRTOS IPC Mechanism](https://www.youtube.com/watch?v=Y_DeKKhbNUs),
    Embedded World ''21'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Embedded World 2021: 对 FreeRTOS IPC 机制进行形式化验证](https://www.youtube.com/watch?v=Y_DeKKhbNUs)，嵌入式世界''21'
- en: '[Formal reasoning about the security of Amazon Web Services](https://youtu.be/JfjLKBO27nw),
    FLoC 2018 plenary lecture'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Amazon Web Services 安全性的形式推理](https://youtu.be/JfjLKBO27nw)，FLoC 2018 大会主题演讲'
- en: '[Formal reasoning about the security of Amazon Web Services](https://www.youtube.com/watch?v=9lPR0d2uijo),
    OOPSLA/SPLASH 2018 keynote lecture'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Amazon Web Services 安全性的形式推理](https://www.youtube.com/watch?v=9lPR0d2uijo)，OOPSLA/SPLASH
    2018 主题演讲'
- en: '[How I learned to stop worrying and start applying automated reasoning](https://ucl-pplv.github.io/CAV21/poster_facc_10/),
    FACC''21 (other relevant talks at [FACC website](https://ucl-pplv.github.io/CAV21/workshop_facc/))'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[我是如何学会不再担心并开始应用自动推理的](https://ucl-pplv.github.io/CAV21/poster_facc_10/)，FACC''21（在[FACC
    网站](https://ucl-pplv.github.io/CAV21/workshop_facc/)上还有其他相关讲座）'
- en: '[On automated reasoning for compliance certification](https://ucl-pplv.github.io/CAV21/poster_facc_10/),
    CAV workshop on Formal Approaches to Certifying Compliance (FACC)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[关于合规认证的自动推理](https://ucl-pplv.github.io/CAV21/poster_facc_10/)，CAV 工作坊上的形式认证方法（FACC）'
- en: '[Pre-Deployment Security Assessment for Cloud Services through Semantic Reasoning](https://ucl-pplv.github.io/CAV21/poster_P_315/),
    CAV''21'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[云服务的语义推理预部署安全评估](https://ucl-pplv.github.io/CAV21/poster_P_315/)，CAV''21'
- en: '[Provable Security at AWS](https://www.youtube.com/watch?v=bO-vfLpFI3I), USENIX
    Enigma 2019'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[AWS 可证明安全性](https://www.youtube.com/watch?v=bO-vfLpFI3I)，USENIX Enigma 2019'
- en: '[Skip to 30mins in]: [SideTrail: Verifying Time-Balancing of Cryptosystems](https://www.facebook.com/ze.jaloto/videos/10157040968367975/)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[跳到30分钟处]: [SideTrail: 验证加密系统的时间平衡](https://www.facebook.com/ze.jaloto/videos/10157040968367975/)'
- en: '[Stratified abstraction of access control policies](https://www.youtube.com/watch?v=TjSQ1P3tM2I),
    CAV''20'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[分层抽象的访问控制策略](https://www.youtube.com/watch?v=TjSQ1P3tM2I)，CAV''20'
- en: '[Verified Cryptographic Code for Everybody](https://ucl-pplv.github.io/CAV21/poster_P_46/),
    CAV''21'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《Verified Cryptographic Code for Everybody》](https://ucl-pplv.github.io/CAV21/poster_P_46/)，CAV''21'
- en: '[What is automated reasoning? How Is it Used at AWS?](https://www.youtube.com/watch?v=sS-x_NQ-CsI)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[什么是自动推理？在AWS中如何使用？](https://www.youtube.com/watch?v=sS-x_NQ-CsI)'
- en: ''
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'AWS blog posts and informational videos:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: AWS博客文章和信息视频：
- en: ''
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some course notes by Amazon Scholars who are also university professors:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊学者兼大学教授的一些课程笔记：
- en: ''
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A fun deep track:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的深度内容：
- en: Some algorithms found in the automated theorem provers we use today date as
    far back as 1959, when [Hao Wang used automated reasoning to prove the theorems
    from](https://dl.acm.org/doi/abs/10.1147/rd.41.0002) [*Principia Mathematica*](https://dl.acm.org/doi/abs/10.1147/rd.41.0002).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们使用的自动定理证明器中发现的一些算法可以追溯到1959年，当时[Hao Wang用自动推理证明了](https://dl.acm.org/doi/abs/10.1147/rd.41.0002)[*Principia
    Mathematica*](https://dl.acm.org/doi/abs/10.1147/rd.41.0002)中的定理。
