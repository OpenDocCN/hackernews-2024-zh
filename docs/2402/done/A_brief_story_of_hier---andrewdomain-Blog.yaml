- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '分类: 未分类'
- en: 'date: 2024-05-27 14:41:32'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024 年 5 月 27 日 14:41:32
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: A_brief_story_of_hier - andrewdomain Blog
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A_brief_story_of_hier - andrewdomain 博客
- en: 来源：[https://andrewdomain.com/posts/a_brief_story_of_hier/](https://andrewdomain.com/posts/a_brief_story_of_hier/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://andrewdomain.com/posts/a_brief_story_of_hier/](https://andrewdomain.com/posts/a_brief_story_of_hier/)
- en: Recently Fedora opened [this curious Change proposal](https://fedoraproject.org/wiki/Changes/Unify_bin_and_sbin)
    about the unification of the **/bin** and **/sbin** paths.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最近 Fedora 提出了[这个有趣的更改提案](https://fedoraproject.org/wiki/Changes/Unify_bin_and_sbin)，关于统一**/bin**和**/sbin**路径。
- en: The news was welcomed by the community with short oneline sentences, that didn’t
    help me understand the connotations of that proposal so I thought about using
    the occasion to do some little research to make light on this matter…
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这一消息受到社区用简短的一句话欢迎，这并没有帮助我理解该提案的涵义，所以我想利用这个机会进行一些小调查，以澄清这个问题...
- en: What I found out is that Fedora was not the first distro to implement this choice,
    but was one of the first ones to start this 10+ years old discussion about reforming
    the filesystem hierarchy under Linux, which now is reaching a more advanced state.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现 Fedora 并不是第一个实现这一选择的发行版，但是它是第一个开始进行这项持续了十年以上的关于在Linux下改革文件系统层次结构的讨论之一。
- en: For several reasons and necessities, the structure of the filesystems that host
    the binaries and libraries had changed on all the major GNU/Linux distributions,
    after long and painful internal work, to provide a much cleaner structure and
    easier administration, with the possible side effect of leaving behind the needs
    of some users, that will probably migrate towards other systems.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因为出于多种原因和需求，托管二进制文件和库的文件系统的结构在所有主要 GNU/Linux 发行版上都发生了变化，经过长期而痛苦的内部工作，提供了一个更简洁的结构和更容易管理的结构，可能会留下一些用户的需求，他们可能会迁移到其他系统。
- en: 'NOTE for the reader:'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 读者注意：
- en: When I’m talking about “the directories”, or “those directories”, or.. you got
    it. I’m probably referring to **bin**, **sbin**, and **lib**, no matter if placed
    under **/** or under **/usr**.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当我谈论"这些目录"的时候，或者"那些目录"，你们明白的。我可能是指**bin**、**sbin**和**lib**，不管它们是在**/**还是在**/usr**下。
- en: compliance
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 符合性
- en: I think I should start by making it very clear that a Linux-based system is
    an animal of its own kind. Linux distributions are not conventional UNIX(SUS-compliant)
    or POSIX or whatever kind of systems. **They’re just Linux systems**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为应该首先澄清一点，Linux-based系统是一种独特的动物。Linux 发行版并不是传统的UNIX（SUS 兼容）或 POSIX 或任何其他类型的系统。**它们只是Linux系统**。
- en: Linux systems pick only the best/most fitted aspects of each specification and
    incorporate it, while not being 100% compliant with the whole.. maybe sometimes
    compliance is optionally added etc… But as a general rule, each Linux distro could
    very easily be very different from the others.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 系统只选取每个规范中最好/最适合的部分并将其合并，虽然并非完全符合所有规范.. 有时可选地加入符合性等等… 但通常情况下，每个Linux发行版可能会非常不同于其他发行版。
- en: The whole ecosystem of Linux distros is kept together thanks to **some conventions**,
    that can be more or less technically enforced, which become standards. So that
    in the meantime there is plenty of room for each one to express their own idea
    on how the system should work.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 发行版的整个生态系统是因为**一些约定**而保持在一起的，这些约定或多或少在技术上是强制执行的，会成为标准。因此，在此期间，每个人都有充足的空间来表达他们关于系统运作方式的想法。
- en: man 7 hier
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: man 7 hier
- en: One example of an almost-standardized aspect of Linux distros that kinda survived
    over the years, is the **FHS (Filesystem Hierarchy Standard)** that is maintained
    by the Linux Foundation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 发行版中一个几乎标准化的方面的示例，经过多年的幸存，是由Linux基金会维护的**FHS（文件系统层次结构标准）**。
- en: The FHS describes the purpose of each path in your filesystem, that your distro’s
    maintainers have probably followed, and that won’t probably hurt the responsible
    sysadmin to read.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: FHS 描述了文件系统中每个路径的目的，这些路径可能是您的发行版维护者可能遵循的，并且不会对负责管理系统的系统管理员造成伤害。
- en: '**man 7 hier** is your local, system-specific (major version, …) reference
    for the version of the FHS specification that your system supports. Check out
    the **STANDARDS** section of the manpage to see exactly which version your system
    is supporting (on this day on Gentoo it’s the 3.0 from March 2015), and while
    you’re at it, check also the **BUGS** section to remind yourself that yes.. it
    is just a convention that is not really technically enforced.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**man 7 hier** 是您本地、系统特定（主要版本，...）的参考，用于支持您的系统的 FHS 规范的版本。查看 manpage 的 **STANDARDS**
    部分，以查看您的系统支持的确切版本（在 Gentoo 上是 2015 年 3 月的 3.0 版本），同时，还可以查看 **BUGS** 部分，以提醒自己，是的..
    这只是一个不是真正被技术上强制执行的约定。'
- en: Because theoretically, you could put your binaries in /etc, mount /home as a
    tmpfs, or cause whatever degree of mayhem that you wish.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，您可以将二进制文件放在 /etc 中，将 /home 挂载为 tmpfs，或者引起您希望的任何程度的混乱。
- en: We’re still (mainly) under GNU/Linux after all, where historically there has
    been an effort to guarantee to the user the maximum possible degree of freedom.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们仍然主要使用 GNU/Linux，在这个历史上一直努力保证用户最大可能的自由。
- en: /usr
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: /usr
- en: For the rest of this article, we will see some vicissitudes around the bin,
    sbin, and lib* directories over the years.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文的其余部分，我们将看到多年来围绕 bin、sbin 和 lib* 目录的一些波折。
- en: To do so, I will start from this chunky first table with descriptions that I’ve
    copy/pasted from the (**rather traditional**) hier manpage itself, with the purpose
    of showing how those definitions change later on..
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我将从这个庞大的第一个表格开始，这些描述是我从（**相当传统的**）hier manpage 中复制/粘贴的，目的是展示这些定义后来如何变化..
- en: '| PATH | descr |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 路径 | 描述 |'
- en: '| --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| /bin | This directory contains executable programs which are needed in single
    user mode and to bring the system up or repair it. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| /bin | 这个目录包含需要在单用户模式下和将系统启动或修复的可执行程序。|'
- en: '| /sbin | Like /bin, this directory holds commands needed to boot the system,
    but which are usually not executed by normal users. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| /sbin | 这个目录像/bin一样，它包含了引导系统所需的命令，但通常不会被正常用户执行。'
- en: '| /lib* | This directories should hold those shared libraries that are necessary
    to boot the system and to run the commands in the root filesystem. (EDIT: In this
    description we’re gonna also include the architecture-specific variants of /lib
    (/lib32, /lib64, …) that serve the same purpose) |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| /lib* | 这些目录应该包含那些对于引导系统和运行根目录下的命令是必需的共享库。（编辑：在这个描述中，我们还将包括在/lib（/lib32、/lib64）下的与体系结构相关的变体，它们有着同样的目的）'
- en: '| /usr | This directory is usually mounted from a separate partition. It should
    hold only shareable, read-only data, so that it can be mounted by various machines
    running Linux. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| /usr | 这个目录通常从一个单独的分区挂载。它应该只包含可共享的、只读的数据，这样它可以被运行Linux的各种机器挂载。'
- en: '| /usr/bin | This is the primary directory for executable programs. Most programs
    executed by normal users which are not needed for booting or for repairing the
    system and which are not installed locally should be placed in this directory.
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| /usr/bin | 这是可执行程序的主目录。大多数由正常用户执行的程序，既不需要用于引导系统，也不需要用于修复系统，也不是本地安装的，应该放在这个目录下。'
- en: '| /usr/sbin | This directory contains program binaries for system administration
    which are not essential for the boot process, for mounting /usr, or for system
    repair. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| /usr/sbin | 这个目录包含了系统管理中不是引导过程、挂载/usr、或者对系统维护必需的程序二进制文件。'
- en: '| /usr/lib* | Object libraries, including dynamic libraries, plus some executables
    which usually are not invoked directly. More complicated programs may have whole
    subdirectories there. (EDIT: same as before for the architecture-dependant.) |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| /usr/lib* | 包括动态库和通常不直接调用的一些可执行文件的对象库。更复杂的程序可能在那里有整个子目录。（编辑：与体系结构相关的部分也是。）'
- en: 'The natural question here I think is: “Why do we even have this distinction
    between those directories”. At first glance, it seems like unnecessary overcomplication,
    after all, we’re talking about the same entities.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这里的自然问题是：“为什么我们需要这些目录之间的区别”。乍一看，这似乎是不必要的过度复杂化，毕竟，我们讨论的是同一实体。
- en: 'And also: “Why is this filesystem **usually mounted from a separate partition**??”.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 还有： “为什么这个文件系统**通常从单独的分区挂载**？？”。
- en: Let’s start by understanding better the purpose of the /usr filesystem, and
    equally importantly, where it even comes from.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先更好地理解/usr文件系统的目的，同样重要的是，它从何而来。
- en: split-usr
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: split-usr
- en: There is a very interesting mail that people close to where the changes are
    made keep quoting as a reference to this phenomenon, which provides historical
    context.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有一封非常有趣的邮件，那些紧密参与改变的人一直引用它作为这种现象的参考，这提供了历史背景。
- en: I’m talking about [this mail](http://lists.busybox.net/pipermail/busybox/2010-December/074114.html)
    from the busybox ml.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我在谈论的是来自busybox ml的[这封邮件](http://lists.busybox.net/pipermail/busybox/2010-December/074114.html)。
- en: 'The argument is pretty clear: there were technical reasons that made this distinction
    necessary in the first place.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 论据很清楚：一开始有技术原因使得这种区别是必要的。
- en: '[PRE0]'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The same reasons that made us split the /usr (or split the /, depending on where
    you see it from), and adopt /bin and /sbin, with their relative dependencies located
    under /lib*, with the sole purpose of ensuring the mount of the partition where
    /usr was, at boot time, i.e. **to bring the system from single-user mode, to multi-user
    mode** (also check this [sysvinit to systemd translation](https://fedoraproject.org/wiki/SysVinit_to_Systemd_Cheatsheet#Runlevels/targets))
    .
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们分割/usr（或者根据你所看到的，分割了/），并采用/bin和/sbin以及它们在/lib*下的相关依赖的相同原因是确保在引导时挂载/usr所在的分区，即**将系统从单用户模式带入多用户模式**（还检查一下这个
    [sysvinit to systemd translation](https://fedoraproject.org/wiki/SysVinit_to_Systemd_Cheatsheet#Runlevels/targets)）。
- en: '[PRE1]'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You see that here is referred to as **the /bin vs /usr/bin split**, which we
    may call by the name of **split-usr**, but it would not be entirely correct.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这里所说的**/bin vs /usr/bin分离**，我们可以称之为**split-usr**，但这并不完全正确。
- en: The term **split-usr** as used today, has a different meaning than the one used
    in this article and it probably has to do with the necessity of providing more
    distinction in the possible structure of a system in regard to its use of /usr
    (check [glossary](#glossary)). It has to be said that this mail also comes from
    more than 10 years ago, while the pains of the upgrade, reorganizations, implementations,…
    are much more recent.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 今天所说的**split-usr**这个术语的含义与本文中使用的含义不同，这可能与在系统结构的可能用途方面对/usr的使用需要更多区分有关（查看[glossary](#glossary)）。必须指出，这封邮件也是来自10年前以上，而升级、重新组织、实施等疼点则是近年来的事。
- en: ==**Why not physically place everything under /, instead of /usr**==
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ==**为什么不把所有内容物理地放在/**，而不是在/usr下==
- en: Other distributions that detached from a standard filesystem specification like
    [GoboLinux](https://gobolinux.org/at_a_glance.html) and others, do not have a
    /usr partition that contains the “os” and seem to not miss it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 像[GoboLinux](https://gobolinux.org/at_a_glance.html)和其他脱离标准文件系统规范的其他发行版，没有包含“os”的/usr分区，似乎也不缺少它。
- en: By following the /usr pattern, as most Linuxes have historically done, we’ve
    taken the same road as other UNIXes had, like SunOS that in 4.0.3 started adopting
    a readonly /usr filesystem, and Oracle Solaris, that from version 11 started symlinking
    for compatibility purposes, the relative directories under / to their counterparts
    in /usr, where the actual system is.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循像大多数Linux历史上一样，/usr模式，我们走上了像其他UNIX那样的道路，比如 SunOS 在4.0.3开始采用一个只读的/usr文件系统，还有
    Oracle Solaris，从11版本开始为了兼容性目的而在相对目录下/usr建立链接到实际系统所在的/usr目录。
- en: 'The fact that we have “the operating system”, i.e. the static part of it composed
    of all the binaries and libraries, that shouldn’t vary between hosts with the
    same version, under a certain filesystem different from root, opens the doors
    to interesting scenarios like:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拥有“操作系统”，即它的静态部分，由所有的二进制文件和库组成，不应该在具有相同版本的主机之间的特定文件系统中发生变化，这为有趣的场景打开了大门，比如：
- en: a simple readonly mount of /usr for security reasons.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了安全起见，对/usr进行简单的只读挂载。
- en: the easier backup of /usr before upgrades.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在升级前更容易备份/usr。
- en: the share of /usr between hosts (e.g. using a network share).
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多台主机之间共享/usr（例如使用网络共享）。
- en: centralized update of this static part, by sharing it.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集中更新这个静态部分，通过共享它。
- en: Following those logics, We could host some tiny Linux boxes that require very
    few resources, by having a rw / with all the (this is a recurring expression)
    **site specific** files and configurations and sharing a common /usr between all
    of them.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这些逻辑，我们可以搭建一些占用极少资源的小型Linux盒子，通过将所有（这是一个经常出现的表达）**站点特定**的文件和配置放在一个读写的/中，并在它们之间共享一个共同的/usr，简化整个系统的维护和管理。
- en: ==**do we need a split-usr configuration to accomplish this?**==
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: ==**我们需要一个split-usr配置来实现这个吗？**==
- en: 'Good question, from the article above the answer is pretty clear. The message
    of it is that we clearly maintained unnecessary complexity for decades, only because
    “if it works, don’t touch it!”. For most scenarios, this mechanism is completely
    unnecessary and for many people working on Linux, this possibility is also unknown.
    From my personal experience, you can easily see huge virtualization-based infrastructures,
    where Linux boxes have a really simple filesystem separation: /var/log separated
    is a good practice that not everybody follows, but not go as far as mounting /usr
    ro.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 好问题，从上面的文章中答案非常明确。文章的观点是，我们清楚地保持了几十年的不必要复杂性，只因为“如果它起作用，就不要碰它！”对于大多数情况来说，这种机制是完全不必要的，对于很多从事Linux工作的人来说，这种可能性也是未知的。根据我的个人经验，你可以轻易地看到庞大的基于虚拟化的基础设施，那里的Linux服务器有一个非常简单的文件系统分离：/var/log分离是一个大多数人都不遵循，但不像挂载/usr
    ro那么远。
- en: This is often not enough to make a change of that magnitude, the condition of
    “if it works, don’t touch it!” must fail, and it kinda of does.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常还不足以做出如此重大的改变，“如果它起作用，就不要碰它！”的条件必须失败，而它确实有点失败了。
- en: The article that goes by the title [Booting without /usr is broken](https://www.freedesktop.org/wiki/Software/systemd/separate-usr-is-broken/)
    does a good job of explaining one of the reasons why the **split-usr mechanism**
    is mostly defective on modern distros.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 名为[没有/usr启动是有问题的](https://www.freedesktop.org/wiki/Software/systemd/separate-usr-is-broken/)的文章很好地解释了为什么**split-usr机制**在现代发行版上通常是有缺陷的一个原因。
- en: '[PRE2]'
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Another very important reason that is recurrently mentioned in the mlists, and
    briefly outlined in this other article on freedesktop.org, which goes by the title
    of [The case for the /usr merge](https://www.freedesktop.org/wiki/Software/systemd/TheCaseForTheUsrMerge/),
    is that software nowadays is too complex.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在很多邮件列表中经常提到的另一个非常重要的原因，并且在freedesktop.org上的另一篇名为[为/usr合并的理由](https://www.freedesktop.org/wiki/Software/systemd/TheCaseForTheUsrMerge/)的文章中概述得很简洁，是因为现在的软件太复杂。
- en: If software A is mainly built with feature A in mind and depends on library
    A, based on the consensus of the community, gets packaged with support for feature
    X, with the relative dependency on library X, then it is the maintainer’s burden
    (if aware of the distinction) to engage with the rest of the community to find
    a way to put library X, that was previously situated on /usr/lib, into /lib, as
    a vital dependency of software A, that could be used to bring up /usr during the
    early boot stages (Check dependencies for the software on your machine with `ldd
    $(which <BINARY_NAME>)` to have a clearer idea about this).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果软件A主要是针对功能A构建的，并依赖于库A，基于社区的共识，携带对功能X的支持，以及相对库X的依赖，那么如果维护者知道这种区别，就需要与其他社区成员合作，找到一种将先前位于/usr/lib中的库X，作为软件A的重要依赖，放置到/lib中的方法，这可以在早期引导阶段带起/usr（使用`ldd
    $(which <BINARY_NAME>)`命令检查机器上软件的依赖关系，来更清楚地了解这一点）。
- en: Moreover, the developer of the upstream software (which is not related to your
    distro’s organization), is not aware of the Linux-specific /usr-split mechanism,
    and for that matter, the maintainer’s job (the one who is aware of the /usr-split)
    gets more complicated; it has also been said on various mailing lists, that testing
    such mechanism (/usr-split) is rather complicated.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，上游软件的开发人员（与你所使用的发行版组织无关），并不知道Linux特有的/usr-split机制，因此维护者的工作（知晓/usr-split机制的人）会变得更加复杂。各种邮件列表中也提到，测试这种机制（/usr-split）相当复杂。
- en: In conclusion of this topic, those mentioned above have proven to be fairly
    common issues in all distros, and with all init systems ([ref](https://www.mail-archive.com/debian-devel@lists.debian.org/msg337190.html)),
    we could say that the **split-usr mechanism** has not been well maintained throughout
    the decades.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 总结这个话题，上述提到的问题在所有发行版和所有初始化系统中都普遍存在，可以说**split-usr机制**在几十年间一直没有得到很好的维护。([ref](https://www.mail-archive.com/debian-devel@lists.debian.org/msg337190.html))
- en: It could be the case to look for a better solution.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要寻找更好的解决方案。
- en: 'The dilemma is: either we choose to repackage most distros in the classic early-days-UNIX
    way to repair split-usr, or we accept the current state of things:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 困境是：要么我们选择以经典早期UNIX方式重打包大多数发行版来修复split-usr，要么我们接受当前事物的状态：
- en: binaries are too complex
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制文件过于复杂
- en: boot-time service startup dependencies issues
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引导时间服务启动依赖问题
- en: upstream probably doesn’t care about our concerns
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上游可能不关心我们的担忧
- en: and from now on we unanimously treat distributions in the same way most users
    have been treating them before, effectively making the whole system much easier
    to maintain and administer.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我们一致地以大多数用户之前对待发行版的方式来对待发行版，从本质上让整个系统更容易维护和管理。
- en: merged-usr
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合并的usr
- en: The conversation starting from [this reply](https://lwn.net/Articles/477541/)
    for the **“The case for the /usr merge”** article on lwn.net, shows some very
    interesting points about why the initrd can be used as a more reliable, easier
    to maintain, and generally modern solution, as opposed to the split-usr mechanism
    to bring the system up.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [this reply](https://lwn.net/Articles/477541/)开始的讨论**“为 /usr 合并的情况”**一文中指出了一些关于为什么
    initrd 可以被用作一种更可靠、更易维护、更现代的解决方案，与**分离的 /usr 机制**相比，使系统运行起来更为简单的有趣观点。
- en: At this point, one could also think that if we decide to use the initrd for
    this purpose, maintaining the **split-usr mechanism** itself is a duplication
    of effort.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，人们也可以想象一下，如果我们决定使用 initrd 来达到这个目的，维护**分离的 /usr 机制**本身就是重复劳动。
- en: 'So the proposed direction is clear: to move **everything**, i.e. “the directories”
    that leaked out of /usr (see note at the top), inside /usr again, effectively
    having **“the whole os”** on that filesystem. The difference here, with the previous
    split setup, is that **if** /usr is not on the same partition as /, the mount
    has to be taken care of by the initrd, instead of by the directories in /.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，提出的方向很明确：将**所有**，“泄露到 /usr 外的目录”（参见顶部的注释），再次放在 /usr 中，有效地将**“完整的操作系统”**放在该文件系统上。这里与之前的分离设置的不同之处在于，**如果**
    /usr 不在与 / 相同的分区上，挂载必须由 initrd 负责，而不是由 / 中的目录负责。
- en: As freedesktop.org’s articles and some other posts pointed out, the adoption
    of an operating system **entirely** placed under /usr, arguably favors the easier
    maintenance of those use case shown above, like the shareable /usr. The only difference
    is that the mount process has to happen inside the initramfs and be transparent
    for the system during the boot phase, to avoid falling into those chicken-and-egg
    and dependency issues.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如 freedesktop.org 的文章和其他一些帖子所指出的，整个操作系统都放在 /usr 下，可以更容易地维护上述的使用案例，比如可共享的 /usr。唯一的区别是挂载过程必须发生在
    initramfs 内，并且在引导阶段对系统透明，避免陷入鸡生蛋和依赖问题。
- en: '**FROM** : mounting the operating system during boot using the tools found
    in /bin and /sbin, i.e. relying on the split-usr mechanism (and how well it has
    been maintained).'
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**FROM**：在启动期间使用 /bin 和 /sbin 中的工具挂载操作系统，即依赖于**分离的 /usr 机制**（以及它是否维护良好）。'
- en: ''
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**TO** : mounting the operating system before the actual boot, relying on the
    initrd and the content it has been packaged with.'
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**TO**：在实际引导之前挂载操作系统，依赖于 initrd 和它所打包的内容。'
- en: ''
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When I say boot, I mean the boot phase as seen by the init (..whatever init),
    which is different than the expression “the boot process”. The boot process is
    complex, and from the point at which the bootloader loads the kernel and the initrd,
    after some kernel work, the initrd takes control (there is a /sbin/init or /usr/sbin/init
    or whatever, inside the initrd that gets executed) and tries to accomplish its
    tasks. Only after the initrd decides so, control is given to the actual init daemon
    and to the final system, and **it is this phase** that has issues to work with
    the split-usr mechanism (check [glossary](#glossary) again) for the issues discussed
    above.
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当我说引导时，我指的是由 init（..不管是哪一个 init）监视的引导阶段，这不同于“引导过程”这个表达。引导过程非常复杂，从引导加载内核和 initrd，经过一些内核工作之后，initrd
    接管控制（initrd 中有一个 /sbin/init 或 /usr/sbin/init 或其他东西，被执行），并试图完成它的任务。只有在 initrd 决定后，才将控制权交给实际的
    init 守护进程和最终的系统，**就是这个阶段**与**分离的 /usr 机制**计讨论的问题。
- en: So systems can still have /usr on a separate partition, the only difference
    is that **in that case**, the initrd is **the only supported way of bringing it
    up** (check [this](https://forums.gentoo.org/viewtopic-p-8591784.html?sid=6b728f7132cbd104e809c348de60b9c1#8591784)
    explanation).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，系统仍然可以将 /usr 放在一个单独的分区上，唯一的区别是**在这种情况下**，initrd 是**唯一支持的方式进行引导**（参考[这里](https://forums.gentoo.org/viewtopic-p-8591784.html?sid=6b728f7132cbd104e809c348de60b9c1#8591784)的解释）。
- en: 'The initrd solution is however not perfect and 100% victimless. There have
    been complaints about those use cases that have to do with resource-contstrained
    environments. I’m talking about the embedded world ([ref](https://lwn.net/Articles/670306/)):
    where not having to maintain an initrd is a huge benefit.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，initrd 解决方案并非完美且没有任何影响。有关于那些资源受限环境有关的使用案例的抱怨。我说的是嵌入式世界 ([ref](https://lwn.net/Articles/670306/))：在那里，不再需要维护
    initrd 是一个巨大的好处。
- en: '[PRE3]'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The possible first wave of users leaving the community.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 用户第一次离开社区。
- en: Also, [this here](https://lwn.net/Articles/670324/) is a very well-written collection
    of concerns about the change to merge-usr in Debian, being it a non-subscription-based
    supported distribution of GNU/Linux.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，[这里](https://lwn.net/Articles/670324/)有关于在 Debian 中合并 /usr 的改变的一系列关于担忧的精彩文章，它是一个非订阅支持的
    GNU/Linux 发行版。
- en: '[PRE4]'
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Other possible losses for the community.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 社区可能面临的其他潜在损失。
- en: That I think is a valid point for those scenarios where we’re updating/upgrading
    our operating systems in-place, instead of migrating the services deployed on
    them.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为，这对于我们在现场更新/升级我们的操作系统的情况来说是一个有效的观点，而不是迁移其上部署的服务。
- en: During the years, many poor-quality scripts could have been built by colleagues
    that maybe are not even part of the company anymore, not to talk about the upgrade
    process itself, where a lot of things could go wrong, depending on the degree
    of care that has been taken of that os, by the different people that have worked
    on it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，同事可能制作了许多质量不高的脚本，也许现在甚至不再是公司的一部分，更不用说升级过程本身了，取决于不同的参与者对操作系统的关心程度，很多问题可能会出现。
- en: That is a scenario where a handful of administrators can easily not be able
    to face an important number of systems in such a situation.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个场景，少数管理员轻易无法面对这样的情况。
- en: …
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: The /usr-merge has already happened in probably all the major distros, with
    the relative distro-maintenance-pain and sysadmin-upgrade-pain. From this point
    on, so as not to leave things unfinished, it would be much easier to introduce
    new changes in order to apply further simplifications.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: /usr-merge 已经在所有主要的发行版中实现，伴随着相对的发行版维护困难和系统管理员升级困难。从这一点出发，为了不留下未完成的工作，引入新的改变以应用进一步简化将会更容易。
- en: bin & sbin
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: bin 和 sbin
- en: During the same years of the first discussions about the /usr-merge, there were
    also [discussions](https://lists.fedoraproject.org/pipermail/devel/2011-October/158845.html)
    about the purpose of the bin and sbin directories and their current state.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在关于 /usr-merge 的第一次讨论期间，也有关于 bin 和 sbin 目录及其当前状态的 [讨论](https://lists.fedoraproject.org/pipermail/devel/2011-October/158845.html)。
- en: 'In the ml post linked above, a couple of very interesting and enlightening
    points have been made, some similar to the ones for the /usr-merge:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面链接的邮件中，提出了一些非常有趣和启发性的观点，有些与 /usr-merge 的观点相似：
- en: '[PRE5]'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Those above are the recurring “binaries getting too complex”, or “we’ve been
    using it like this as a majority, for a lot of time” as before. But for this specific
    matter, there is also more.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 上述提到的“二进制文件过于复杂”，或“我们作为大多数人一直这样使用了很长时间”就像过去一样。但是对于这个特定问题，还有更多内容。
- en: The “bin vs. sbin separation” is another mechanism that has probably not been
    maintained well throughout the decades. In modern distributions, you can easily
    find `PATH=/bin:/sbin:/usr/sbin:/usr/local/bin:/opt/bin:/everything` for all the
    users, which is not exactly a good practice as per the intended bin/sbin distinction..
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: “bin vs. sbin 分离”是另一个可能在几十年间没有很好维护的机制。在现代发行版中，你可以轻松找到 `PATH=/bin:/sbin:/usr/sbin:/usr/local/bin:/opt/bin:/everything`，供所有用户使用，这不是根据
    bin/sbin 区分的最佳做法。
- en: 'As claimed by Fedora’s [Changes/Unify bin and sbin](https://fedoraproject.org/wiki/Changes/Unify_bin_and_sbin),
    there are many mechanisms for a normal user to gain privileges without them even
    knowing, and then its PATH already contains all the sbin variants for reasons
    like systemd’s behavior of setting a PATH for all users and services that has
    both bins and sbins. This specific mechanism of systemd is quite intricate and
    rather than trying to find its functioning in systemd itself, it could be better
    looked at in an application-specific way. The `man 5 environment.d` on your system
    (or also [here](https://www.freedesktop.org/software/systemd/man/latest/environment.d.html))
    in the **APPLICABILITY** section, outlines the inner workings of this mechanism:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 正如 Fedora 的 [Changes/Unify bin and sbin](https://fedoraproject.org/wiki/Changes/Unify_bin_and_sbin)
    所说，有许多机制允许普通用户获得特权，而他们甚至不知情，因此其 PATH 已经包含了所有 sbin 的变体，原因可能是像 systemd 设置了一个包含 bins
    和 sbins 的 PATH，用于所有用户和服务。systemd 的这种特定机制相当复杂，与其试图在 systemd 自身中找到其工作原理，不如从应用程序特定的角度来看待。在你的系统上的
    `man 5 environment.d`（或者也可以在 [这里](https://www.freedesktop.org/software/systemd/man/latest/environment.d.html)）**APPLICABILITY**
    部分，概述了这一机制的内部工作原理：
- en: '[PRE6]'
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In my case for example, I do have a PATH variable defined inside /etc/environment.d/10-gentoo-env.conf
    (that has been put there by gentoo’s env-update) which looks similar to `echo
    PATH=$PATH`. But then I also have it in /etc/profile.env, and also distros like
    fedora and derivates (rocky Linux, …) seem to have this logic entirely contained
    in /etc/profile.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我的情况下，我有一个定义在 /etc/environment.d/10-gentoo-env.conf 中的 PATH 变量（通过 gentoo
    的 env-update 放在那里）看起来类似于 `echo PATH=$PATH`。然而我还在 /etc/profile.env 中以及像 fedora
    等衍生发行版（rocky Linux, ...）中发现了这种逻辑完全包含在 /etc/profile 中。
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ==**why having PATH=everything is bad?**==
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: ==**为什么将 PATH=everything 视为不好？**==
- en: 'Knowing the bin and sbin distinction, this can be seen as a bad practice. The
    community of [#gentoo-chat](https://www.gentoo.org/get-involved/irc-channels/)
    has explained it like this to me (not the exact words):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 了解 bin 和 sbin 区分，可以看作是一个不好的做法。[#gentoo-chat 社区](https://www.gentoo.org/get-involved/irc-channels/)向我解释了这样的情况（并非原话）：
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So ideally there should be a neat distinction between all the binaries that
    only root can execute, and those that are executable by all the users, but can
    we even do that given nowadays software?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，应该清楚地区分只有 root 可以执行的所有二进制文件，以及所有用户都可以执行但是现在软件是否还能做到这一点？
- en: The categories of executables these days go beyond the split of “thing a user
    can run” and “thing the admin can run”. [ref](https://pagure.io/fesco/issue/3135#comment-890527)
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如今，可执行文件的类别已经超出了“用户可以运行的东西”和“管理员可以运行的东西”的分割。[参考](https://pagure.io/fesco/issue/3135#comment-890527)
- en: Personally, I’d like to think more that [this proposal](https://discussion.fedoraproject.org/t/f40-change-proposal-unify-usr-bin-and-usr-sbin-system-wide/99853/16)
    is the way to go; that is a more romantic way of seeing Linux. But then [the reply
    to that](https://discussion.fedoraproject.org/t/f40-change-proposal-unify-usr-bin-and-usr-sbin-system-wide/99853/18),
    is an amazingly well-painted portrait, of the world we’re living in. I’ll probably
    take this post as a future reference when I’ll have to explain “things that are
    happening in Linux”.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 个人而言，我更倾向于认为 [这个建议](https://discussion.fedoraproject.org/t/f40-change-proposal-unify-usr-bin-and-usr-sbin-system-wide/99853/16)
    是正确的选择；这是对 Linux 更浪漫的看法。但是，[针对此建议的回复](https://discussion.fedoraproject.org/t/f40-change-proposal-unify-usr-bin-and-usr-sbin-system-wide/99853/18)，则是对我们所生活的世界进行了惊人的描绘。我可能会把这篇文章作为以后解释“Linux
    中发生的事情”的参考。
- en: '[PRE9]'
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The second paragraph is also a reference that one should come back to when their
    software is not behaving the way they thought it would.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 第二段也是一个应该回头查看的参考资料，当软件的表现与预期不符时。
- en: I could argue no more about the unification.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经无法再就统一性争论了。
- en: my personal view about this
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我个人对此的看法
- en: For how small those changes seem from the outside, they proved to be big, and
    their reasons and implications are numerous.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 从外表看，这些变化似乎很小，但实际上它们是巨大的，原因和影响很多。
- en: With the initrd solution to the split-usr issue, an attempt has been made to
    modernize a workflow that is generally less and less seen in the wild, to not
    lose the creative part of the community, while maintaining the bigger part happy.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过initrd解决方案来解决分离的usr问题，尝试现代化一个通常在实际中越来越少见的工作流程，以不丢失社区的创造性部分，同时让大多数人满意。
- en: Replicating and maintaining artistic configurations such as shared ro /usr via
    NFS over an entire Linux infrastructure, requires inventiveness, effort in testing
    and maintenance, biting your tongue when the manager buys from a bad vendor,…
    and generally, time, which is an extremely pricy asset. One thing that I couldn’t
    stop thinking is that by “playing” with your os that way, you are treating your
    Linux as something that barely exists anymore in the majority of cases.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 复制和维护艺术配置，如整个Linux基础架构上通过NFS共享只读的/usr目录，需要创造力、测试和维护工作中的努力，
- en: Nowadays, especially in the enterprise community, you are much more used to
    virtual machines than baremetal, and more and more used to containers than virtual
    machines, and generally more used to treating a Linux system as something **atomic**,
    and as **disposable** as possible.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，特别是在企业社区，你更多地使用虚拟机而不是裸金属，更多地使用容器而不是虚拟机，通常更多地把Linux系统视为**原子**，并尽可能**可丢弃**。
- en: What happened is that today we don’t really have technical constraints like
    disk size; on the contrary, today GBs of disk are quite cheap, compared to the
    cost in time related to the maintenance of an infrastructure as complex as the
    ones described above.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 发生的是，如今我们并没有像磁盘容量这样的技术约束；相反，如今与上述基础架构维护相关的时间成本相比，磁盘的几GB是相当廉价的。
- en: You usually don’t want to maintain, because that is where the effort comes (and
    the man-months go).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常不想去维护，因为维护需要付出努力（以及工时）。
- en: What you **usually** want to do instead, is maintain only the least possible,
    vital, information on a git server, and deploy your stuff from there using some
    kind of automation.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，**通常**你想要去维护的是，在git服务器上只保存最少量、最重要的信息，并使用某种自动化工具从那里部署你的东西。
- en: '**When it breaks, you usually toss it, you don’t try to repair it**.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**当它损坏时，通常会被抛弃，不会尝试修复**。'
- en: To do that, it is required to deal with many different technologies, a task
    that is much easier to accomplish if you are part of a team with a lot of people,
    each with its own specialization. In that scenario, at the end of the day, you
    will find yourself with a lot more machines in your infrastructure, that have
    a cost in resources, but are a lot easier to administer.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，需要处理许多不同的技术，如果你是一个拥有许多不同专业知识的团队的一部分，这项任务会容易得多。在这种情况下，一天结束时，你会发现自己的基础架构上有更多的机器，这些机器会占用资源，但会更容易管理。
- en: That is a very DevOps way of seeing it I think, which apparently is not exactly
    aligned to the UNIX way.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这是一种非常DevOps的看法，显然与UNIX的方式并不完全一致。
- en: end
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: end
- en: In the end, if you’ve been thrown into a world where everything works differently
    than the way you’re used to seeing them work, and you’re expertise is abandoning
    you, I think it can be advantageous to be aware of freedesktop’s [efforts](https://www.freedesktop.org/wiki/Specifications/)
    to maintain compatibility between systems.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你被扔进一个一切都比你习惯的工作方式不同的世界，你的专业知识正在离你而去，我认为了解freedesktop的[努力](https://www.freedesktop.org/wiki/Specifications/)来保持系统之间的兼容性是有利的。
- en: Speaking of filesystem hierarchy specifically, I think it can help to give an
    occasional look when needed, to [this manpage](https://www.freedesktop.org/software/systemd/man/file-hierarchy.html),
    that you may find in your distro as **man 7 file-hierarchy**.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到文件系统层次结构，我认为在需要时不妨偶尔去查看一下[这篇手册](https://www.freedesktop.org/software/systemd/man/file-hierarchy.html)，你可能会在你的发行版中找到，名称可能是**man
    7 file-hierarchy**。
- en: 'This is the systemd-specific vision of the filesystem hierarchy under Linux,
    which is the defacto standard on systemd-based Linux distros and effectively changes
    the first table at the top of this article like so:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Linux下文件系统层次的systemd特定视角，它是基于systemd的Linux发行版上的事实标准，并有效地修改了本文顶部的第一个表格，现在是这样的：
- en: '| PATH | descr |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| PATH | 描述 |'
- en: '| --- | --- |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| /usr | Vendor-supplied operating system resources. Usually read-only, but
    this is not required. Possibly shared between multiple hosts. This directory should
    not be modified by the administrator, except when installing or removing vendor-supplied
    packages. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| /usr | 供应商提供的操作系统资源。通常是只读的，但不是必须的。可能在多个主机之间共享。除了安装或删除供应商提供的软件包时，管理员不应修改此目录。
    |'
- en: '| /usr/bin | Binaries and executables for user commands that shall appear in
    the $PATH search path. It is recommended not to place binaries in this directory
    that are not useful for invocation from a shell (such as daemon binaries); these
    should be placed in a subdirectory of /usr/lib/ instead. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| /usr/bin | 用户命令的二进制文件和可执行文件，应该出现在$PATH搜索路径中。建议不要在此目录中放置不适合从shell调用的二进制文件（如守护程序二进制文件）；这些应该放在/usr/lib的子目录中。
    |'
- en: '| /usr/lib | Static, private vendor data that is compatible with all architectures
    (though not necessarily architecture-independent). Note that this includes internal
    executables or other binaries that are not regularly invoked from a shell. Such
    binaries may be for any architecture supported by the system. Do not place public
    libraries in this directory, use $libdir (see below), instead. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| /usr/lib | 与所有架构兼容的静态、私有供应商数据（虽然未必是架构无关的）。注意，这包括不经常从shell调用的内部可执行文件或其他二进制文件。这样的二进制文件可以是系统支持的任何架构。不要在此目录中放置公共库，应该使用$libdir（见下文）。
    |'
- en: '| /usr/lib/arch-id | Location for placing dynamic libraries into, also called
    $libdir. Legacy locations of $libdir are /usr/lib/, /usr/lib64/. This directory
    should not be used for package-specific data, unless this data is architecture-dependent,
    too. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| /usr/lib/arch-id | 用于放置动态库的位置，也称为 $libdir。 $libdir 的传统位置是 /usr/lib/、/usr/lib64/。
    除非这些数据也与架构相关，否则不应将此目录用于特定于软件包的数据。 |'
- en: '| /usr/sbin | A compatibility symlink pointing to /usr/bin/, ensuring that
    scripts and binaries referencing these legacy paths correctly find their binaries.
    |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| /usr/sbin | 指向 /usr/bin/ 的兼容性符号链接，确保脚本和引用这些传统路径的二进制文件能够正确找到它们的二进制文件。 |'
- en: '| /bin | A compatibility symlink pointing to /usr/bin/, ensuring that scripts
    and binaries referencing these legacy paths correctly find their binaries. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| /bin | 指向 /usr/bin/ 的兼容性符号链接，确保脚本和引用这些传统路径的二进制文件能够正确找到它们的二进制文件。 |'
- en: '| /sbin | A compatibility symlink pointing to /usr/bin/, ensuring that scripts
    and binaries referencing these legacy paths correctly find their binaries. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| /sbin | 指向 /usr/bin/ 的兼容性符号链接，确保脚本和引用这些传统路径的二进制文件能够正确找到它们的二进制文件。 |'
- en: '| /lib | A compatibility symlink pointing to /usr/lib/, ensuring that scripts
    and binaries referencing these legacy paths correctly find their binaries. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| /lib | 指向 /usr/lib/ 的兼容性符号链接，确保脚本和引用这些传统路径的二进制文件能够正确找到它们的二进制文件。 |'
- en: '| /lib64 | On some architecture ABIs, this compatibility symlink points to
    $libdir, ensuring that binaries referencing this legacy path correctly find their
    dynamic loader. This symlink only exists on architectures whose ABI places the
    dynamic loader in this path. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| /lib64 | 在某些架构的 ABI 上，此兼容性符号链接指向 $libdir，确保引用此传统路径的二进制文件正确找到其动态加载器。 此符号链接仅存在于其
    ABI 将动态加载器放置在此路径的架构上。 |'
- en: Glossary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 词汇表
- en: '**unmerged-usr** (sometimes also referred to as **split-usr**, see ref 3 below)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**unmerged-usr**（有时也称为**split-usr**，请参见下面的参考文献 3）'
- en: A system with bin, sbin, lib* directories, that exist under the / and under
    the /usr filesystem in parallel, and with distinct content.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一个具有 bin、sbin、lib* 目录的系统，在 / 和 /usr 文件系统下并行存在，并具有不同的内容。
- en: The intended use for this is the use of the bin,sbin,lib* directories under
    /, to mount the rest of the filesystem, including /usr where most of the binaries/services
    are (a.k.a. most of the os).
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 意图使用 bin、sbin、lib* 目录位于 / 下，以挂载其余的文件系统，包括大多数二进制文件/服务所在的 /usr（也称为大多数操作系统）。
- en: i.e. / can be used in single-user mode, to bring the system to multi-user mode.
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 也就是说，/ 可以在单用户模式下使用，将系统切换到多用户模式。
- en: '**merged-usr**'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**merged-usr**'
- en: The bin, sbin, and lib* directories are physically located under the /usr filesystem.
    They have correspondents under /, which are symlinks provided for compatibility.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: bin、sbin 和 lib* 目录物理上位于 /usr 文件系统下。 它们在 / 下有对应的符号链接，供兼容性使用。
- en: '**split-usr**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**split-usr**'
- en: A system whose /usr directory is still unpopulated or needs to be mounted during
    the boot phase. This could also mean a merged-usr system, whose /usr partition
    was not mounted before init kicks in and the processes start.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一个系统的 /usr 目录仍未填充或需要在引导阶段挂载。 这也可能意味着一个合并的 /usr 系统，在 init 开始和进程启动之前没有挂载其 /usr
    分区。
- en: The /usr filesystem does not have to be on the same partition as /,
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: /usr 文件系统不必与 / 在同一分区上，
- en: but **it will have** to be mounted during early boot by the initramfs,
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 但**它将不得不**在早期引导时由 initramfs 挂载，
- en: so that when the actual init starts, /usr is ready. ([check](https://lwn.net/Articles/670139/))
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 以便当实际的 init 开始时，/usr 是准备就绪的。 ([检查](https://lwn.net/Articles/670139/))
- en: 'REFERENCES:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料：
- en: '[1] [https://lists.freedesktop.org/archives/systemd-devel/2022-April/047673.html](https://lists.freedesktop.org/archives/systemd-devel/2022-April/047673.html)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] [https://lists.freedesktop.org/archives/systemd-devel/2022-April/047673.html](https://lists.freedesktop.org/archives/systemd-devel/2022-April/047673.html)'
- en: '[2] [https://lists.freedesktop.org/archives/systemd-devel/2023-February/048831.html](https://lists.freedesktop.org/archives/systemd-devel/2023-February/048831.html)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] [https://lists.freedesktop.org/archives/systemd-devel/2023-February/048831.html](https://lists.freedesktop.org/archives/systemd-devel/2023-February/048831.html)'
- en: '[3] [http://lists.busybox.net/pipermail/busybox/2010-December/074114.html](http://lists.busybox.net/pipermail/busybox/2010-December/074114.html)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] [http://lists.busybox.net/pipermail/busybox/2010-December/074114.html](http://lists.busybox.net/pipermail/busybox/2010-December/074114.html)'
- en: FAQ - Can I boot a systemd-based Linux distribution without an initrd?
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FAQ - 我可以在没有 initrd 的情况下启动基于 systemd 的 Linux 发行版吗？
- en: This one is actually a real thing that I heard :) (not in question form tho).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事情我确实听说过 :)（尽管不是以问题形式）。
- en: As stated by different articles and posts, the changes about the /usr filesystem
    are orthogonal to systemd.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 根据不同的文章和帖子所述，关于 /usr 文件系统的变化与 systemd 无关。
- en: Look for harald in [this post](https://lists.fedoraproject.org/pipermail/devel/2011-October/158594.html).
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在[此帖子](https://lists.fedoraproject.org/pipermail/devel/2011-October/158594.html)中找到
    harald。
- en: '[tl;dr](https://lists.fedoraproject.org/pipermail/devel/2011-October/158818.html)'
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[简而言之](https://lists.fedoraproject.org/pipermail/devel/2011-October/158818.html)'
- en: 'The answer: There is no need to have an initramfs if you don’t use a separate
    /usr, i.e. if you don’t need to mount /usr at boot time.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 答案：如果您不使用单独的 /usr，即如果您不需要在引导时挂载 /usr，则无需 initramfs。
- en: References
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: Maybe there are things that I wasn’t able to catch, or I didn’t immediately
    see the implications. Also, interesting points have been made in those resources,
    that are unrelated to the main topic of this article.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 也许有些事情我没有能够抓住，或者我没有立即看到其中的影响。 此外，这些资源中提出了与本文主题无关但有趣的观点。
- en: Anyway, here is a list of very interesting material to dig into.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，以下是一个非常有趣的材料列表，可以深入研究。
- en: '**Blogs,forums,mls**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**博客，论坛，邮件列表**'
