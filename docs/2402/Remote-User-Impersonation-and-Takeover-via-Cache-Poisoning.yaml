- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:52:21'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:52:21
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Remote User Impersonation and Takeover via Cache Poisoning
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过缓存投毒进行的远程用户冒充和接管
- en: 来源：[https://arcanican.is/excerpts/cve-2024-23832/discovery.htm](https://arcanican.is/excerpts/cve-2024-23832/discovery.htm)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://arcanican.is/excerpts/cve-2024-23832/discovery.htm](https://arcanican.is/excerpts/cve-2024-23832/discovery.htm)
- en: The original report (and initial emails sent) submitted can be viewed [here](/excerpts/cve-2024-23832/).
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 可查看原始报告（和最初发送的电子邮件）[在这里](/excerpts/cve-2024-23832/)
- en: The scheduled, now-public details by the Mastodon team is available [here](https://github.com/mastodon/mastodon/security/advisories/GHSA-3fjr-858r-92rw)
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Mastodon团队现在公开的详细信息可在[此处](https://github.com/mastodon/mastodon/security/advisories/GHSA-3fjr-858r-92rw)找到
- en: 'I wanted to write sections on:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我想写一些关于：
- en: The state of the broader ecosystem
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更广泛生态系统的现状
- en: Even more vulnerable/shortsighted code that I found (in a library) of a different
    type
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我发现了更多脆弱/短视的代码，来自另一种类型的库
- en: Strong opinions on the ridiculously hypocritical implementation of HTTP Signatures
    and associated user keypairs ([where users aren't even allowed to export their
    private key](https://github.com/mastodon/mastodon/discussions/22315#discussioncomment-4423581),
    for risk of the *network*, previously)
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于HTTP签名及其关联用户密钥对的可笑虚伪实施的强烈看法（[用户甚至不能导出他们的私钥](https://github.com/mastodon/mastodon/discussions/22315#discussioncomment-4423581)，因为*网络*的风险，以前）
- en: Some practical solutions that could have minimized this in several ways, of
    things that can be started as a [working prototype written in a night](https://arcanican.is/tools/proof.php).
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些实际的解决方案可以在多种方式上最小化这一问题，这些都可以作为一个[在一夜之间编写的工作原型](https://arcanican.is/tools/proof.php)开始。
- en: ..but I ran out of time, I'll maybe work on some of those later tomorrow (or
    technically 'today').
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: ..但是我没时间了，也许明天（或者技术上的“今天”）再处理其中一些。
- en: 'Nonetheless: this is not meant to be a "the fediverse sucks, it''s all just
    inherently broken", instead it''s more of an issue of:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此：这不是要说“联合宇宙糟糕，它完全有缺陷”，而更多是一个问题：
- en: people overcrowding to one software, despite the plethora of choice they have
    available (or creating better/more),
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管有大量可选择的选项（或者创建更好/更多的选项），人们仍然涌向一个软件。
- en: 'the nature of an ecosystem when one software can steamroll in whatever direction
    it wants to unimpeded (because again: marketshare) and how this cripples the advancement
    of careful protocol development when much of it''s "behind closed doors" of one
    vendor (at least to my understanding), outside of actual standards bodies and
    community-organized efforts'
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个软件可以无障碍地朝着任何方向推进时（因为市场份额），这就是一个生态系统的本质，当其“在一个供应商的封闭门后”（至少据我了解如此），远离实际标准机构和社区组织的努力时，这将如何阻碍谨慎协议开发的进展
- en: how people seem to only care for the 'gratis' of free software, and seldom the
    'libre', and millions of users leaning on the work of primarily a couple developers,
    assuming they have the attentiveness to catch every mistake themselves alone
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人们似乎只关心免费软件的“gratis”部分，很少关心“libre”，数百万用户主要依赖几个开发者的工作，假设他们有足够的专注力来自己发现每一个错误
- en: 'Lastly: this is written from my perspective and understanding of things; there
    could be errors and other sides to the situation, and if so, I''d be glad to make
    corrections as requested.'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后：这是根据我的视角和对事物的理解编写的；可能存在错误和其他观点，如果有的话，我很乐意按要求进行更正。
- en: Discovery
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发现
- en: '*Warning: Most of the content of this is written to having some understanding
    of the protocol and it''s terminology. For code examples, check the [original
    submitted report](/excerpts/cve-2024-23832/).*'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*警告：这篇大部分内容都是针对协议及其术语有一定理解的人写的。有关代码示例，请查看[原始提交的报告](/excerpts/cve-2024-23832/)。*'
- en: On a very late night (Jan 26) rolling into morning of the next day (~5am), while
    working on my own fediverse server implementation, I have a few passing idle thoughts
    on theoretical attacks against my project. Usually, I write down notes in a separate
    document, or write them as an inline comment the code, to come back to later (for
    more thorough testing/analysis). Nonetheless, it crossed my mind about whether
    implementations actually validate against manually-pulled posts, since conceptually
    it skips HTTP Signatures, etc.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个非常晚的夜晚（1月26日）进入第二天的早晨（约5点），当我在自己的联合宇宙服务器实现上工作时，我对攻击我的项目的理论攻击有了一些过境的想法。通常情况下，我会在另一份文档中记录笔记，或者将它们作为代码的内联注释写下来，以便稍后回来进行更彻底的测试和分析。尽管如此，我想到的是实现是否确实对手动拉取的帖子进行验证，概念上跳过了HTTP签名等。
- en: I mocked a simple Note object, set it to a resolvable actor of a different domain,
    made sure the hostnames matched up too, saved it as a text file, and made sure
    it was served up with the right media type. My implementation already acts like
    a combo of active software and a static site generator, so it's a matter of just
    dumping the text file into the 'posts' directory.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我模拟了一个简单的Note对象，将其设置为一个不同域的可解析的actor，确保主机名也匹配，保存为文本文件，并确保它以正确的媒体类型提供。我的实现已经像一个活跃软件和静态站点生成器的组合一样运行，所以只需把文本文件倒入“posts”目录中。
- en: Then I try querying the URL in Mastodon, just for the sheer sake of stupid curiosity,
    doubting anything will happen at all. The most I expected was that maybe---at
    most---it would just show the wrong username, or swap the avatar, if ever at all.
    But it worked. And way too well. In fact, it worked so well, that the post even
    seemed to permanently stick in the database, and would show up under the impersonated
    user's post history.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我尝试在Mastodon中查询URL，纯粹出于愚蠢的好奇心，怀疑根本不会发生任何事情。我最多期望的是，也许——最多——它只会显示错误的用户名，或者交换头像，如果有的话。但它奏效了。而且效果太好了。事实上，它运行得如此之好，以至于帖子甚至似乎永久地存储在数据库中，并会显示在被冒名顶替的用户的帖子历史中。
- en: But surely this can't be right, surely this must just be my development environment---my
    closed local lab of several fediverse applications, under it's own private local
    TLD and custom certificate authority, etc. Maybe some logic is thrown off because
    it was from a 192.168.x.x subnet, or something in development that made it more
    permissive (even though it was running in a production profile).
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但这肯定不可能是正确的，这肯定只是我的开发环境——我自己的封闭本地实验室，其中安装了几个fediverse应用程序，使用自己的私有本地TLD和自定义证书颁发机构等。也许是某种逻辑因为从192.168.x.x子网而被抛弃，或者在运行生产配置的情况下更加宽松。
- en: 'So, since I don''t have an account on any public Mastodon instance myself,
    whereas the only account on fedi I have is on the Rebased instance that I administer:
    I ask a friend to double-check this phenomena with a Mastodon instance they''re
    on. I prop up the simple payload on my personal website, give them the link, and
    right away: same result. It works just *too* well.'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我自己没有任何公共Mastodon实例上的账户，而我在fedi上唯一的账户是我管理的Rebased实例上的账户：我请朋友用他们所在的Mastodon实例再次检查这种现象。我在个人网站上创建了简单的载荷，给他们链接，结果立即一样。效果太好了。
- en: So I write out a brief email to the security reporting email address listed
    for Mastodon. I write the behavior I found, that it's possible to inject posts
    of remote users, the simple way it's pulled off, and a screenshot of it working.
    At this point, my eyes are mainly glued to my inbox, expecting something to *maybe*
    come in after 10-30 minutes or so. It's 7:06am locally (US Central) at this point,
    which equates to 2:06pm in European Central time, so surely the average core Mastodon
    dev is going to see this email.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我给Mastodon列出的安全报告电子邮件地址写了一封简短的电子邮件。我描述了我发现的行为，即可以注入远程用户的帖子，实现方法简单，并附上了它奏效的截图。此时，我的眼睛主要盯着我的收件箱，期待大约10-30分钟后可能会收到什么。此时是本地时间早上7:06（美国中部时间），相当于欧洲中部时间下午2:06，所以平均核心Mastodon开发人员肯定会看到这封电子邮件。
- en: 'But instead of permanently staring down my inbox, I continue to fidget with
    this vulnerability inbetween. I test it against my instance: no effect; I test
    it against Misskey: no effect. But then I continue down my list, with other software
    installed in my lab and find another implementation that''s similarly vulnerable.
    Jolly...'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但我并没有永久地盯着我的收件箱，而是不断在中间摆弄这个漏洞。我对我的实例进行了测试：没有效果；我对Misskey进行了测试：没有效果。但后来我继续检查我的列表，发现实验室安装的其他软件也存在类似的漏洞。真是个大问题…
- en: I fire off a Direct Message (over fedi) to the respective developer, warning
    that I've found a vulnerability in their software, but that I need a secure medium
    to transit the info, and asking what their preference is. Meanwhile, for Mastodon,
    I try querying a developer or two on mastodon.social, but for whatever reason
    I still can't load any profile updates or posts from mastodon.social for whatever
    reason, just as it's been for some months now [[footnote 1]](#footnote-1). Given
    the unrelenting crowd stupidity and cancel culture surrounding fediblock, and
    people just blindly recirculating blocklists, it wouldn't be too far of a leap
    if my instance was just blocked by mastodon.social and others entirely, especially
    when it's commonly confused as a single-user instance (which usually get silently/hidden
    blocked without notice instead).
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我向相关开发者发送了一条直接消息（通过fedi），警告他们我发现了他们软件中的一个漏洞，但我需要一个安全的媒介来传输信息，并询问他们的偏好。与此同时，对于Mastodon，我尝试在mastodon.social上查询一两个开发者，但出于某种原因，我仍然无法加载来自mastodon.social的任何个人资料更新或帖子，就像几个月来一直如此[[脚注1]](#footnote-1)。鉴于环绕fediblock的不懈的众愚和取消文化，以及人们盲目地重新循环使用封锁列表，如果我的实例被mastodon.social和其他实例完全封锁，这一点也不奇怪，尤其是当它通常被误认为是单用户实例时（通常会在不通知的情况下悄悄封锁或隐藏）。
- en: 'So in my private fedi lab, I keep poking with the vulnerability further, and
    find out it also applies to actors (users/profiles) too, as I first try tweaking
    the bio description to easy success. Then I try budging other fields, and a few
    things end up getting rejected. I also try swapping the inbox and sharedInbox
    endpoints of the actor, and it seems to take those changes just fine. For context,
    it''s a black box: I only know if it accepts the payload, if a visible detail
    changed, as I change the profile/bio/etc in each payload. So to test if my theory
    is correct, I write a quick dummy inbox script in my fedi server implementation,
    tie it to the request debugger to catch the response, and make sure it''s coded
    to always return an 202 Accepted response code.'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的私人fedi实验室中，我进一步探索这个漏洞，并发现它也适用于角色（用户/个人资料），正如我首次尝试调整个人简介描述以轻松成功一样。然后我尝试调整其他字段，但有几个事情被拒绝了。我还尝试交换角色的收件箱和共享收件箱终点，这些变更似乎都能很好地接受。在此背景下，这是一个黑盒子：我只知道它是否接受了负载，如果可见细节发生了变化，因为我在每个负载中更改个人资料/简介等。为了测试我的理论是否正确，我在我的fedi服务器实现中写了一个快速的虚拟收件箱脚本，将其绑定到请求调试器以捕获响应，并确保它编码为始终返回202
    Accepted响应代码。
- en: From the dev Mastodon instance in my private fedi lab, I fire off a Direct Message
    destined to the remote victim user (that should theoretically have their inbox
    address overwritten from earlier) and... there it is. Captured right in the *[attacker-controlled]*
    dummy inbox without any issue, with the contents of the Direct Message as predicted.
    This is just unfathomable at this point. This is plain horrifying---that for a
    software allegedly serving anywhere from 2 to 8mil users, that something like
    this just fumbles into my lap, where all this started just because a passing thought
    crossed my mind, and I wanted to scratch an itch.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从我的私人fedi实验室中的开发Mastodon实例，我向远程受害用户发送了一条直接消息（理论上应该已经从之前覆盖了他们的收件箱地址），然后...在*[攻击者控制的]*虚拟收件箱中毫无问题地捕获到了它，内容如预期地是直接消息的内容。这在这一点上简直令人难以置信。这太可怕了---对于一个据称服务于200到800万用户的软件，像这样的事情竟然就这样掉进了我的手里，这一切仅仅因为一个刹那间的想法闯入了我的脑海，我想要解决一个问题。
- en: Alright, so---can this get even worse? We have control the injection of public
    content inbound, we can control where traffic goes outbound, but can we make it
    easier, and maybe replace that pesky public key we don't have the private key
    for?
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这能变得更糟吗？我们控制了入站公共内容的注入，我们可以控制流量的出站位置，但我们能否更轻松地完成，并且可能替换掉我们没有私钥的那个令人讨厌的公钥？
- en: Well, all I've understood is that you can only have one public key per actor,
    and thus there's been proposed extensions of other ways to represent keys (especially
    more than one), but maybe there's something else I can try. Can I just have the
    value be a list of keys instead of directly one object? So I wrap the publicKey
    object with square brackets, and it seems to take it. Then I try adding another
    publicKey object into that list. It takes it (as evidenced by the routine of updating
    profile fields alongside these tests), but did it actually save the 2nd key?
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我理解的是每个角色只能有一个公钥，因此已经提出了其他表示密钥方式的扩展（特别是多个密钥），但也许还有其他我可以尝试的东西。我能否只将值作为密钥列表而不是直接一个对象？于是我用方括号包装了publicKey对象，它似乎接受了。然后我尝试在该列表中添加另一个publicKey对象。它接受了（正如这些测试过程中更新个人资料字段的例程所示），但它是否真的保存了第二个键？
- en: In my software project, I create a script that uses my existing HTTP Signature
    signing implementation, feed it the private key that corresponds with the public
    key I'm trying to inject, and try seeing if I can forge S2S traffic using the
    key I'm trying to inject, to see if it was accepted. But the crafted signed request
    gets rejected.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的软件项目中，我创建了一个脚本，使用我的现有HTTP签名签名实现，输入对应于我尝试注入的公钥的私钥，然后尝试看看是否可以伪造使用我试图注入的密钥的S2S流量，以查看是否被接受。但是，制作的签名请求被拒绝了。
- en: 'Well, since I remember that only one public key is stored per actor in Mastodon,
    maybe it''s only storing the first key? But also: it still needs the old key apparently,
    otherwise it rejects the change, so maybe that can just be listed as the 2nd key?
    So I swap the order of the public keys: it accepts it. In fact, I try ommitting
    the old key in the 2nd try, and it accepts that as well. Wait---all it needed
    was the *presence* of the old key to imply a key rotation, no actual signed endorsement?
    Well, I don''t know, it could just be anomalous.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，由于我记得在Mastodon中每个角色只存储一个公钥，也许它只存储第一个键？但也有可能：显然它仍然需要旧的键，否则它会拒绝更改，所以也许可以将其列为第二个键？于是我交换了公钥的顺序：它接受了。事实上，我在第二次尝试中尝试省略旧的键，它也接受了。等等---它需要的只是旧键的*存在*来暗示密钥轮换，而不需要实际签名认可？嗯，我不知道，这可能只是个例外。
- en: Nonetheless, I try prodding it again with the script I wrote earlier, to try
    forging S2S traffic under the attacker-controlled key...
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我还是用之前写的脚本再次尝试刺探它，试图使用攻击者控制的密钥伪造S2S流量…
- en: '...And that also worked...'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '...而且那也行得通…'
- en: '...?'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '...？'
- en: How?
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 怎么做？
- en: 'This sequence of findings just doesn''t add up. I don''t constantly engage
    in pentesting, auditing, security research, etc. I''m just an average self-taught
    web developer that just knows the basics of what I''m supposed to do: validate/sanitize
    untrusted input, validate/sanitize queried content, use prepared SQL statements,
    use CSRF tokens in forms, use password hashing algorithms for storing passwords,
    etc). I don''t hold any degrees, just a high school diploma.'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这一系列的发现看起来根本不能成立。我并不经常进行渗透测试、审计、安全研究等工作。我只是一个普通的自学网页开发者，只知道我应该做的基本事情：验证/清理不受信任的输入，验证/清理查询的内容，使用预编译的SQL语句，使用CSRF令牌在表单中，使用密码哈希算法来存储密码等等。我没有任何学位，只有高中文凭。
- en: But yet, Mozilla **paid** for a formal security audit of the Mastodon codebase,
    missed this, and yet this just tumbles into my lap. Great, I just resent the typical
    nature of the 'security consultancy' industry even more, as if everything's just
    a routine of running around with fuzzers and scanners, and calling it a day if
    nothing snags. Not people actually bothering to pick apart and experiment with
    the protocol, toying with theoretical attacks, or anything; just treating it as
    another generic enterprise software project.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Mozilla为Mastodon代码库支付了正式的安全审计费用，却错过了这一点，而这正好落到我手上。太好了，我更加厌恶“安全咨询”行业的典型性质，仿佛一切只是围绕着模糊器和扫描器四处奔波，如果没有什么问题就算了。根本不是人们真正费心分析和实验协议，玩弄理论攻击之类的事情；只是将其视为另一个通用企业软件项目。
- en: 'I mean, fuck: there''s one mega Mastodon instance of over 60,000 registered
    users (and >15k MAU) that virtues itself as a community for security researchers
    (or rather, ''security-minded''), running on Mastodon, and none of these people
    could be bothered to try deeply experimenting with the codebase that part of their
    online social media presence and identity relies on? A vulnerability that quite
    possibly existed for many years even? Does nobody find it worrying to be running
    a platform that''s an install size of 1.5GB, and presumably hundreds (possibly
    cascading into thousands) of dependencies across Ruby, gems, npm, etc? Something
    that now has: 3 vulns >9.8 severity, 3 vulns at 7.5 severity, and 4 others, within
    one year?'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，该死的：有一个超过60,000注册用户（和超过15,000月活跃用户）的大型Mastodon实例，它自己标榜为一个安全研究人员社区（或者更确切地说是“关注安全”的社区），运行在Mastodon上，但这些人中没有一个愿意深入尝试他们在线社交媒体存在和身份的一部分依赖的代码库？一个漏洞，甚至可能已经存在多年？难道没有人发现运行一个1.5GB安装大小的平台，以及预计跨Ruby、gems、npm等数百（可能会扩展到数千）的依赖项是令人担忧的吗？现在有：一年内3个严重性>9.8的漏洞，7.5的3个漏洞，以及其他4个漏洞。
- en: Should we really be in this monoculture where 1 vulnerability can wreak havoc
    on >72% of the network, because everyone wants to just crowd around the thing
    that "everybody's using right now"? Despite all the expansive variety of featureful
    options available that are very competitive in functionality and performance?
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真的应该处于这种单一文化中吗？在这种文化中，1个漏洞就可能对超过72%的网络造成严重破坏，因为每个人都想聚集在“现在所有人都在使用的东西”周围？尽管有各种功能丰富且在功能和性能上都非常竞争的选择可供选择？
- en: 'Remember: Pleroma and Misskey were not affected in any way that I found, and
    Mastodon is, and this is just a simple concept, not some lengthy strategic chain
    of exploitation. Even the private message leak vulnerability in Lemmy at least
    took some fragment of wit (making a report on a private message that''s not destined
    to you), while this just doesn''t.'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 记住：Pleroma和Misskey在我发现的情况下没有受到任何影响，而Mastodon受到了影响，这只是一个简单的概念，并非一些漫长的战略性的利用链。即使在Lemmy中私信泄漏漏洞至少需要一些智慧（对不属于您的私信进行报告），而这并不需要。
- en: 'To reiterate, I find out that:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 重申一下，我发现：
- en: You can inject a post that is attributed to any remote user
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以注入一篇帖子，归因于任何远程用户。
- en: You can overwrite the server's copy of any remote user
  id: totrans-split-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以覆盖服务器上任何远程用户的副本。
- en: You can rekey the server's copy of any remote user, by just listing another
    key
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过列出另一个密钥重新设定服务器上任何远程用户的副本。
- en: 'And the big detail here is: if the authentic user''s key isn''t trusted anymore
    (and in my lab, I confirmed this), then that means any genuine traffic from that
    remote user is going to be rejected too, while the attacker retains control of
    sending S2S traffic themself, with a keypair they control. And it''s not just
    with other Mastodon servers, it''s ANY remote user on the network, from perspective
    of a vulnerable Mastodon instance. This is what bumps it up from 9.1 severity
    to 9.8\. Confidentiality (of future traffic) is compromised, Integrity is impacted,
    and Availability is crippled.'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的细节在于：如果认证用户的密钥不再被信任（在我的实验室中，我已经确认了这一点），那么远程用户的任何真实流量也将被拒绝，而攻击者则保留控制发送S2S流量，使用他们控制的密钥对。而且这不仅仅限于与其他Mastodon服务器的通信，而是来自网络上任何远程用户的视角，对于一个易受攻击的Mastodon实例而言。这就是将其从9.1严重性提升到9.8的原因。未来流量的机密性受到了损害，完整性受到了影响，可用性被削弱。
- en: So beyond the mix of delving into this deeper, watching my inbox and nothing
    arriving, I had ended up finally falling asleep at like 9am or so (which is exceptionally
    atypical), at some midpoint of the aforementioned findings.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所以除了深入研究这一混合体，看着我的收件箱却什么也没有收到之外，最终我在早上9点左右终于睡着了（这是非常不寻常的），在前述发现的某个中间点。
- en: On the next day cycle, I've already got a reply from the dev of the other identified
    software (within a few hours of sending the DM even, as they replied 9:12am actually),
    and followed up with the details. Meanwhile, still no response from any Mastodon
    dev, even after 3 emails, and even after I've checked through everything on deliverability,
    DKIM, DMARC, etc. So because of the issues of trying to reaching anyone on mastodon.social,
    I try to Direct Message a different Mastodon dev account on another server, of
    presumably the flagship instance of a common fork. Pretty much at the end of this
    [remainder of the] day, I've reached all my findings, and growing more impatient.
    I poke others to see if they can reach out on my behalf, or reach out to any closer
    connections they might have, but don't hear anything actionable back.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的日循环中，我已经收到了另一个已识别软件的开发人员的回复（事实上，几小时内就收到了他们在9:12am时回复的DM），并跟进了细节。与此同时，依然没有任何
    Mastodon 的开发人员回复，即使发送了3封电子邮件，即使我已经检查了交付能力、DKIM、DMARC 等所有内容。因此，由于在 mastodon.social
    上联系任何人的问题，我尝试在另一个服务器上的不同 Mastodon 开发人员账户上直接发送私信。这一天的最后，我总结了所有的发现，而且越来越不耐烦。我询问其他人是否可以代表我联系，或者是否可以接触到他们更近的联系人，但没有听到任何有用的回复。
- en: Two more day cycles pass (technically 2 days total; just a nuked sleep schedule
    now), and still nothing. So at this point I write out a more detailed post of
    my findings (even though the initial ones were enough, I didn't want to spill
    the rest over email, given how much this ramped up, and given they weren't replying
    anyway), of everything I've found, with simple concepts and screenshots and submit
    the Github security report. Again, my eyes are mostly glued to the screen to see
    any movement on this, while I juggle other things, and *try* to do something productive
    of my day while holding this hot potato.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 两个日循环过去（技术上总共2天；现在只是被炸了的睡眠时间表），但仍然没有任何进展。因此，这时我详细记录了我的发现（尽管最初的发现已经足够，但考虑到这件事情的升级程度，以及他们根本不回复，我不想在电子邮件中泄露剩余部分），列出了我发现的一切，用简单的概念和截图提交了
    Github 安全报告。再次，我的眼睛大部分时间都紧盯着屏幕，希望看到任何动静，同时我还在应付其他事情，*试图*在处理这个烫手山芋的同时做一些有生产力的事情。
- en: Then ***finally***, late on January 29th (at 2:34am) I get a response that the
    report was accepted, they were able to reproduce it, and working on it further,
    CVE number requested, and to maintain confidentiality because of the significant
    severity of it, and I acknowledged. I mentioned there was another project I found
    with a similar vulnerability that I was also in communication with, and they were
    fine with it, as long as everyone can keep quiet on any details before a patch
    is pushed out.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，***终于***，在1月29日深夜（凌晨2:34），我收到了回复，报告被接受，他们能够重现问题，并且正在进一步处理，请求CVE编号，并要求保密，因为问题的严重性。我表示同意。我提到我发现了另一个具有类似漏洞的项目，我也在与他们进行沟通，他们同意，只要大家在补丁发布之前保持沉默。
- en: The wording for the to-be-published security report had to be minimized, because
    of how severe it is, and how simple it was to accomplish, thus it had to be reduced
    to more vague details, otherwise people may have been able to rediscover any part
    of it on their own. Timeline was established for when it would be released, public
    announcement made, and fixes were privately tested.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于问题的严重性以及实现的简易性，即将发布的安全报告的措辞必须被最小化，因此必须将其减少到更模糊的细节，否则人们可能会自己重新发现其中的任何部分。已经确定了发布时间表，发布了公告，并且私下进行了修复测试。
- en: Meanwhile, I poked another developer of another project, wanted to double-check
    if their project wasn't also affected, but kept vague on the details. Dug on some
    specifics, and per a brief source code review, it seemed their project could have
    been affected, only for injecting posts, and they ended up lining up a patch for
    their project as well. So at this point there was theoretically 3 affected products,
    but the worst case with Mastodon.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，我还联系了另一个项目的开发人员，想要确认一下他们的项目是否也受到影响，但在细节上保持了模糊。对一些具体情况进行了挖掘，经过简短的源代码审查，看起来他们的项目可能也受到影响，仅限于注入帖子，最终他们也为他们的项目准备了一个补丁。因此，从理论上讲，现在有3个受影响的产品，但与
    Mastodon 相关的情况最糟糕。
- en: The day came for the Mastodon patch to be released, and a sizable amount of
    the network had upgraded within a day or two; while I had poked any other adjacent
    instance admins that hadn't updated yet. The security annoncement was published
    adjacent to the patches, noting that the deeper details of the vulnerability would
    be revealed later on February 15th, to avoid making it easier for attackers, so
    I kept secrecy on the details yet myself. I kept continuing to test through other
    fedi software in the meantime, and found a 4th affected product, notified the
    developer, and got it sorted out there as well.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 修复猛犸象补丁的日子来了，网络中相当一部分在一两天内升级了；而我还戳了那些尚未更新的相邻实例管理员。安全公告随着补丁发布，指出漏洞的深层细节将于2月15日后逐步揭示，以避免使攻击者更容易入侵，所以我保持了对细节的保密。与此同时，我继续测试其他联邦软件，发现了第四个受影响的产品，并通知了开发者，在那里也解决了问题。
- en: At this point it was getting close to this whole thing being done with, and
    I wanted to double-check for the exact time when the responsible disclosure period
    agreeably ends, and if there's any reporting bounty at all, and if so--on what
    platform. But instead I get a response that there's "insuffient resources" to
    have any system of paying bounties. Well. Alright. I guess I'll just write-off
    my past 1-2 weeks of being sidetracked with this finding, and helping other smaller
    projects as well, as entirely a charity endeavor then. Not that I'm against helping
    people, as I already tend to burn a hole in my pocket regularly with trying to
    help others.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，这一切即将结束，我想要再次核实负责披露期的确切时间结束，并且是否有任何报告奖励，如果有的话——在哪个平台上。但是，我得到的回复是没有足够的资源来支付赏金制度。好吧。好吧。我想我只能把过去一两周被这个发现搁置，以及帮助其他较小项目，完全视为一次慈善行动了。并不是我反对帮助他人，因为我经常试图用助人为乐的方式耗费我的钱包。
- en: '* * *'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*(Hopefully I''ll get more written today/tomorrow)*'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*(希望我今天/明天能写更多)*'
