- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 13:20:45'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Weird Ruby: Nil Conversions | Meta Redux'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://metaredux.com/posts/2024/02/23/weird-ruby-nil-conversions.html](https://metaredux.com/posts/2024/02/23/weird-ruby-nil-conversions.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Most Rubyists probably know that `nil` in Ruby is an instance of the singleton
    class [NilClass](https://ruby-doc.org/3.3.0/NilClass.html). Because `nil` is a
    object like any other, we can actually invoke methods on it, and it turns out
    that `NilClass` provides a few - mostly conversion methods to other Ruby types.
    Let’s see some of those in action:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-7
  prefs: []
  type: TYPE_PRE
- en: 'With those methods you can literally create something (e.g. an empty hash)
    out of nothing! Whether you should actually be doing this is a totally different
    matter, though. According to the class docs:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: The converter methods are carrying the concept of nullity to other classes.
  id: totrans-split-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I’m not sure how this “concept of nullity” is defined, but I’ve always found
    it weird that you can equate the absence of value with some anchor value (e.g.
    an empty collection or 0). I know there are contexts in which this may be useful,
    but I’m fairly certain you’d be able to get similar results without resorting
    to such conversions.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind that you can do similar conversions in a different way:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
- en: Notice how the “safe” number conversion methods `Integer` and `Float` operate
    differently and raise an exception when passed `nil`. That’s part of the reason
    why it’s often suggested to avoid the use of `to_i` and `to_f` to avoid converting
    unexpected values.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: 'The [Zen of Python](https://peps.python.org/pep-0020/) famously says:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: Explicit is better than implicit.
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Errors should never pass silently.
  id: totrans-split-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the face of ambiguity, refuse the temptation to guess.
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: But in the land of Ruby it seems we like to live dangerously!
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: That’s all I have for you today. Keep Ruby weird!
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
