- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:49:07'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:49:07'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Introducing SafeTest: A Novel Approach to Front End Testing | by Netflix Technology
    Blog | Netflix TechBlog'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 SafeTest：一种新颖的前端测试方法 | Netflix 技术博客 | Netflix TechBlog
- en: 来源：[https://netflixtechblog.com/introducing-safetest-a-novel-approach-to-front-end-testing-37f9f88c152d](https://netflixtechblog.com/introducing-safetest-a-novel-approach-to-front-end-testing-37f9f88c152d)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://netflixtechblog.com/introducing-safetest-a-novel-approach-to-front-end-testing-37f9f88c152d](https://netflixtechblog.com/introducing-safetest-a-novel-approach-to-front-end-testing-37f9f88c152d)
- en: 'Introducing SafeTest: A Novel Approach to Front End Testing'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 SafeTest：一种新颖的前端测试方法
- en: by [Moshe Kolodny](https://medium.com/u/a155da075195?source=post_page-----37f9f88c152d--------------------------------)
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：[莫什·科洛德尼](https://medium.com/u/a155da075195?source=post_page-----37f9f88c152d--------------------------------)
- en: In this post, we’re excited to introduce SafeTest, a revolutionary library that
    offers a fresh perspective on End-To-End (E2E) tests for web-based User Interface
    (UI) applications.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们很高兴介绍 SafeTest，这是一个为基于 Web 的用户界面（UI）应用程序提供全新端到端（E2E）测试视角的革命性库。
- en: The Challenges of Traditional UI Testing
  id: totrans-split-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统 UI 测试的挑战
- en: 'Traditionally, UI tests have been conducted through either unit testing or
    integration testing (also referred to as End-To-End (E2E) testing). However, each
    of these methods presents a unique trade-off: you have to choose between controlling
    the test fixture and setup, or controlling the test driver.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，UI 测试通常通过单元测试或集成测试（也称为端到端（E2E）测试）来进行。然而，每种方法都有其独特的权衡：您必须在控制测试夹具和设置之间做出选择，或者在控制测试驱动程序之间做出选择。
- en: 'For instance, when using [react-testing-library](https://testing-library.com/docs/react-testing-library/intro/),
    a unit testing solution, you maintain complete control over what to render and
    how the underlying services and imports should behave. However, you lose the ability
    to interact with an actual page, which can lead to a myriad of pain points:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当使用 [react-testing-library](https://testing-library.com/docs/react-testing-library/intro/)
    这样的单元测试解决方案时，您可以完全控制要渲染的内容以及底层服务和导入的行为。然而，您失去了与实际页面交互的能力，这可能导致许多痛点：
- en: Difficulty in interacting with complex UI elements like <Dropdown /> components.
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 难以与复杂 UI 元素交互，例如 <Dropdown /> 组件。
- en: Inability to test CORS setup or GraphQL calls.
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法测试 CORS 设置或 GraphQL 调用。
- en: Lack of visibility into z-index issues affecting click-ability of buttons.
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏对影响按钮可点击性的 z-index 问题的可见性。
- en: Complex and unintuitive authoring and debugging of tests.
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂和不直观的测试编写和调试。
- en: 'Conversely, using integration testing tools like Cypress or Playwright provides
    control over the page, but sacrifices the ability to instrument the bootstrapping
    code for the app. These tools operate by remotely controlling a browser to visit
    a URL and interact with the page. This approach has its own set of challenges:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，使用像 Cypress 或 Playwright 这样的集成测试工具可以控制页面，但会牺牲对应用程序引导代码进行仪表化的能力。这些工具通过远程控制浏览器访问
    URL 并与页面交互来操作。这种方法有其自身的一系列挑战：
- en: Difficulty in making calls to an alternative API endpoint without implementing
    custom network layer API rewrite rules.
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不实现自定义网络层 API 重写规则的情况下难以调用替代 API 端点。
- en: Inability to make assertions on spies/mocks or execute code within the app.
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法对间谍/模拟对象进行断言或在应用程序内执行代码。
- en: Testing something like dark mode entails clicking the theme switcher or knowing
    the localStorage mechanism to override.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试诸如暗模式之类的内容需要点击主题切换器或了解覆盖 localStorage 机制。
- en: Inability to test segments of the app, for example if a component is only visible
    after clicking a button and waiting for a 60 second timer to countdown, the test
    will need to run those actions and will be at least a minute long.
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法测试应用程序的部分内容，例如如果一个组件只在点击按钮并等待 60 秒倒计时后才可见，则测试将需要执行这些操作，至少需要一分钟的时间。
- en: Recognizing these challenges, solutions like E2E Component Testing have emerged,
    with offerings from [Cypress](https://docs.cypress.io/guides/component-testing/overview)
    and [Playwright](https://playwright.dev/docs/test-components). While these tools
    attempt to rectify the shortcomings of traditional integration testing methods,
    they have other limitations due to their architecture. They start a dev server
    with bootstrapping code to load the component and/or setup code you want, which
    limits their ability to handle complex enterprise applications that might have
    OAuth or a complex build pipeline. Moreover, updating TypeScript usage could break
    your tests until the Cypress/Playwright team updates their runner.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 识别这些挑战后，像E2E组件测试这样的解决方案应运而生，Cypress和[Playwright](https://playwright.dev/docs/test-components)提供了这些解决方案。虽然这些工具试图纠正传统集成测试方法的缺点，但由于它们的架构，它们也存在其他限制。它们启动一个带有引导代码的开发服务器来加载组件和/或设置您希望的代码，这限制了它们处理可能具有OAuth或复杂构建流水线的复杂企业应用程序的能力。此外，更新TypeScript使用可能会导致您的测试失败，直到Cypress/Playwright团队更新其运行器。
- en: Welcome to SafeTest
  id: totrans-split-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 欢迎使用SafeTest
- en: SafeTest aims to address these issues with a novel approach to UI testing. The
    main idea is to have a [snippet of code in our application bootstrapping stage
    that injects hooks to run our tests](https://www.npmjs.com/package/safetest#bootstrapping-your-application)
    (see the [How Safetest Works](https://www.npmjs.com/package/safetest#how-safetest-works)
    sections for more info on what this is doing). **Note that how this works has
    no measurable impact on the regular usage of your app since SafeTest leverages
    lazy loading to dynamically load the tests only when running the tests (in the
    README example, the tests aren’t in the production bundle at all).** Once that’s
    in place, we can use Playwright to run regular tests, thereby achieving the ideal
    browser control we want for our tests.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: SafeTest旨在通过一种新颖的UI测试方法来解决这些问题。其主要思想是在我们应用程序的引导阶段[插入代码片段以注入运行我们的测试的钩子](https://www.npmjs.com/package/safetest#bootstrapping-your-application)（有关此操作的更多信息，请参见[SafeTest工作原理](https://www.npmjs.com/package/safetest#how-safetest-works)部分）。**请注意，这种方式对您应用程序的常规使用没有任何可测量的影响，因为SafeTest利用延迟加载仅在运行测试时动态加载测试（在README示例中，测试根本不包含在生产捆绑包中）。**设置完成后，我们可以使用Playwright来运行常规测试，从而实现我们想要的理想浏览器控制。
- en: 'This approach also unlocks some exciting features:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法还解锁了一些令人兴奋的功能：
- en: Deep linking to a specific test without needing to run a node test server.
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深层链接到特定测试，而无需运行节点测试服务器。
- en: Two-way communication between the browser and test (node) context.
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器和测试（节点）上下文之间的双向通信。
- en: Access to all the DX features that come with Playwright (excluding the ones
    that come with @playwright/test).
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问所有随Playwright一起提供的DX功能（不包括@playwright/test提供的功能）。
- en: Video recording of tests, trace viewing, and pause page functionality for trying
    out different page selectors/actions.
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试录像，跟踪查看和暂停页面功能以尝试不同的页面选择器/操作。
- en: Ability to make assertions on spies in the browser in node, matching snapshot
    of the call within the browser.
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够对浏览器中的间谍进行断言，在节点中匹配调用的快照。
- en: Test Examples with SafeTest
  id: totrans-split-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SafeTest的测试示例
- en: 'SafeTest is designed to feel familiar to anyone who has conducted UI tests
    before, as it leverages the best parts of existing solutions. Here’s an example
    of how to test an entire application:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: SafeTest旨在让以前进行过UI测试的任何人都感到熟悉，因为它利用现有解决方案的最佳部分。以下是如何测试整个应用程序的示例：
- en: '[PRE0]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can just as easily test a specific component
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松测试特定组件
- en: '[PRE1]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Leveraging Overrides
  id: totrans-split-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用覆盖功能
- en: 'SafeTest utilizes React Context to allow for value overrides during tests.
    For an example of how this works, let’s assume we have a fetchPeople function
    used in a component:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: SafeTest利用React Context允许在测试期间进行值覆盖。例如，假设我们在组件中使用fetchPeople函数的示例：
- en: '[PRE2]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can modify the People component to use an Override:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以修改People组件以使用覆盖：
- en: '[PRE3]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, in our test, we can override the response for this call:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们的测试中，我们可以覆盖此调用的响应：
- en: '[PRE4]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The render function also accepts a function that will be passed the initial
    app component, allowing for the injection of any desired elements anywhere in
    the app:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染函数还接受一个函数，该函数将传递初始应用程序组件，允许在应用程序的任何位置注入任何所需的元素：
- en: '[PRE5]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With overrides, we can write complex test cases such as ensuring a service method
    which combines API requests from `/foo`, `/bar`, and `/baz`, has the correct retry
    mechanism for just the failed API requests and still maps the return value correctly.
    So if `/bar` takes 3 attempts to resolve the method will make a total of 5 API
    calls.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过覆盖重写，我们可以编写复杂的测试案例，例如确保一个服务方法，该方法结合来自 `/foo`、`/bar` 和 `/baz` 的 API 请求，并对仅失败的
    API 请求进行正确的重试机制，并且仍然正确映射返回值。因此，如果 `/bar` 需要尝试 3 次才能解析，则该方法将总共进行 5 次 API 调用。
- en: 'Overrides aren’t limited to just API calls (since we can use also use `[page.route](https://playwright.dev/docs/api/class-page#page-route)`),
    we can also override specific app level values like feature flags or changing
    some static value:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖重写不仅限于 API 调用（因为我们也可以使用 `[page.route](https://playwright.dev/docs/api/class-page#page-route)`），我们还可以覆盖特定的应用级值，例如功能标志或更改某些静态值：
- en: '[PRE6]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Overrides are a powerful feature of SafeTest and the examples here only scratch
    the surface. For more information and examples, refer to the [Overrides section](https://www.npmjs.com/package/safetest#overrides)
    on the [README](https://github.com/kolodny/safetest/blob/main/README.md).
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖重写是 SafeTest 的一个强大功能，这里的示例只是冰山一角。更多信息和示例，请参阅 [README](https://github.com/kolodny/safetest/blob/main/README.md)
    上的[覆盖重写部分](https://www.npmjs.com/package/safetest#overrides)。
- en: Reporting
  id: totrans-split-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告
- en: SafeTest comes out of the box with powerful reporting capabilities, such as
    automatic linking of video replays, Playwright trace viewer, and even [deep link
    directly to the mounted tested component](https://safetest-two.vercel.app/vite-react-ts/?test_path=.%2FAnother.safetest&test_name=Main2+can+do+many+interactions+fast).
    The SafeTest repo [README](https://github.com/kolodny/safetest/blob/main/README.md)
    links to all the [example apps](https://safetest-two.vercel.app/) as well as the
    [reports](https://safetest-two.vercel.app/report.html#results=vite-react-ts/artifacts/results.json&url=vite-react-ts/)
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: SafeTest 自带强大的报告功能，例如自动链接视频回放，Playwright 追踪查看器，甚至可以[直接深入到已挂载的测试组件](https://safetest-two.vercel.app/vite-react-ts/?test_path=.%2FAnother.safetest&test_name=Main2+can+do+many+interactions+fast)。SafeTest
    仓库的 [README](https://github.com/kolodny/safetest/blob/main/README.md) 链接到所有[示例应用](https://safetest-two.vercel.app/)以及[报告](https://safetest-two.vercel.app/report.html#results=vite-react-ts/artifacts/results.json&url=vite-react-ts/)。
- en: SafeTest in Corporate Environments
  id: totrans-split-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SafeTest 在企业环境中
- en: Many large corporations need a form of authentication to use the app. Typically,
    navigating to localhost:3000 just results in a perpetually loading page. You need
    to go to a different port, like localhost:8000, which has a proxy server to check
    and/or inject auth credentials into underlying service calls. This limitation
    is one of the main reasons that Cypress/Playwright Component Tests aren’t suitable
    for use at Netflix.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 许多大型公司需要一种认证形式来使用应用程序。通常，导航到 localhost:3000 只会导致页面永久加载。您需要转到另一个端口，如 localhost:8000，它有一个代理服务器来检查和/或将认证凭据注入到底层服务调用中。这种限制是
    Cypress/Playwright 组件测试在 Netflix 不适合使用的主要原因之一。
- en: 'However, there’s usually a service that can generate test users whose credentials
    we can use to log in and interact with the application. This facilitates creating
    a light wrapper around SafeTest to automatically generate and assume that test
    user. For instance, here’s basically how we do it at Netflix:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通常有一种服务可以生成测试用户的凭证，我们可以用来登录并与应用程序进行交互。这有助于创建一个轻量级的包装器，自动生成并假定该测试用户。例如，在 Netflix
    的基本做法如下：
- en: '[PRE7]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After setting this up, we simply import the above package in place of where
    we would have used safetest/setup.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成后，我们只需在原本使用 safetest/setup 的地方导入上述包即可。
- en: Beyond React
  id: totrans-split-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超越 React
- en: While this post focused on how SafeTest works with React, it’s not limited to
    just React. SafeTest also works with Vue, Svelte, Angular, and even can run on
    NextJS or Gatsby. It also runs using either Jest or Vitest based on which test
    runner your scaffolding started you off with. The [examples folder](https://github.com/kolodny/safetest/tree/main/examples)
    demonstrates how to use SafeTest with different tooling combinations, and we encourage
    contributions to add more cases.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这篇文章侧重于 SafeTest 如何与 React 协作，但它并不仅限于 React。SafeTest 也适用于 Vue、Svelte、Angular，甚至可以在
    NextJS 或 Gatsby 上运行。它还可以使用 Jest 或 Vitest，具体取决于你的脚手架使用的测试运行器。[示例文件夹](https://github.com/kolodny/safetest/tree/main/examples)展示了如何在不同的工具组合中使用
    SafeTest，我们鼓励添加更多案例。
- en: At its core, SafeTest is an intelligent glue for a test runner, a UI library,
    and a browser runner. Though the most common usage at Netflix employs Jest/React/Playwright,
    it’s easy to add more adapters for other options.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，SafeTest 是一个智能的测试运行器粘合剂，一个 UI 库和一个浏览器运行器。尽管 Netflix 最常见的使用方式是 Jest/React/Playwright，但很容易为其他选项添加更多的适配器。
- en: Conclusion
  id: totrans-split-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: SafeTest is a powerful testing framework that’s being adopted within Netflix.
    It allows for easy authoring of tests and provides comprehensive reports when
    and how any failures occurred, complete with links to view a playback video or
    manually run the test steps to see what broke. We’re excited to see how it will
    revolutionize UI testing and look forward to your feedback and contributions.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: SafeTest 是一个强大的测试框架，在 Netflix 内部得到了广泛应用。它支持轻松编写测试，并提供全面的报告，详细说明任何失败发生的时间和方式，包括链接以查看回放视频或手动运行测试步骤以了解出了什么问题。我们对它将如何革新
    UI 测试感到兴奋，并期待您的反馈和贡献。
