- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 13:25:47'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 13:25:47'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'React Labs: What We''ve Been Working On – February 2024 – React'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'React Labs: What We''ve Been Working On – February 2024 – React'
- en: 来源：[https://react.dev/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024](https://react.dev/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://react.dev/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024](https://react.dev/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024)
- en: February 15, 2024 by [Joseph Savona](https://twitter.com/en_JS), [Ricky Hanlon](https://twitter.com/rickhanlonii),
    [Andrew Clark](https://twitter.com/acdlite), [Matt Carroll](https://twitter.com/mattcarrollcode),
    and [Dan Abramov](https://twitter.com/dan_abramov).
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 2024 年 2 月 15 日，由[Joseph Savona](https://twitter.com/en_JS)、[Ricky Hanlon](https://twitter.com/rickhanlonii)、[Andrew
    Clark](https://twitter.com/acdlite)、[Matt Carroll](https://twitter.com/mattcarrollcode)
    和[Dan Abramov](https://twitter.com/dan_abramov)撰写。
- en: '* * *'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In React Labs posts, we write about projects in active research and development.
    We’ve made significant progress since our [last update](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023),
    and we’d like to share our progress.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React Labs 帖子中，我们介绍了正在积极研究和开发的项目。自我们[上次更新](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023)以来，我们取得了显著进展，现在我们想分享我们的进展情况。
- en: Note
  id: totrans-split-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: React Conf 2024 is scheduled for May 15–16 in Henderson, Nevada! If you’re interested
    in attending React Conf in person, you can [sign up for the ticket lottery](https://forms.reform.app/bLaLeE/react-conf-2024-ticket-lottery/1aRQLK)
    until February 28th.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: React Conf 2024 将于 5 月 15 日至 16 日在内华达州亨德森举行！如果你有兴趣亲临参加 React Conf，请在 2 月 28
    日前[注册抽奖领取门票](https://forms.reform.app/bLaLeE/react-conf-2024-ticket-lottery/1aRQLK)。
- en: For more info on tickets, free streaming, sponsoring, and more, see [the React
    Conf website](https://conf.react.dev).
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 关于门票、免费直播、赞助等更多信息，请参阅[React Conf 网站](https://conf.react.dev)。
- en: '* * *'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: React Compiler
  id: totrans-split-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React Compiler
- en: 'React Compiler is no longer a research project: the compiler now powers instagram.com
    in production, and we are working to ship the compiler across additional surfaces
    at Meta and to prepare the first open source release.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: React 编译器不再是一个研究项目：该编译器现在已经在生产中为 instagram.com 提供支持，我们正在努力将其推广到 Meta 的其他平台，并准备发布第一个开源版本。
- en: As discussed in our [previous post](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023#react-optimizing-compiler),
    React can *sometimes* re-render too much when state changes. Since the early days
    of React our solution for such cases has been manual memoization. In our current
    APIs, this means applying the [`useMemo`](/reference/react/useMemo), [`useCallback`](/reference/react/useCallback),
    and [`memo`](/reference/react/memo) APIs to manually tune how much React re-renders
    on state changes. But manual memoization is a compromise. It clutters up our code,
    is easy to get wrong, and requires extra work to keep up to date.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[之前的帖子](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023#react-optimizing-compiler)中讨论的，当状态变化时，React
    有时会重新渲染得太频繁。自 React 早期以来，我们的解决方案是手动记忆化。在我们当前的 API 中，这意味着通过[`useMemo`](/reference/react/useMemo)、[`useCallback`](/reference/react/useCallback)和[`memo`](/reference/react/memo)
    API 手动调整 React 在状态更改时重新渲染的频率。但手动记忆化是一种妥协。它使我们的代码变得混乱，容易出错，并且需要额外的工作来保持更新。
- en: Manual memoization is a reasonable compromise, but we weren’t satisfied. Our
    vision is for React to *automatically* re-render just the right parts of the UI
    when state changes, *without compromising on React’s core mental model*. We believe
    that React’s approach — UI as a simple function of state, with standard JavaScript
    values and idioms — is a key part of why React has been approachable for so many
    developers. That’s why we’ve invested in building an optimizing compiler for React.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 手动记忆化是一种合理的妥协，但我们并不满意。我们的愿景是，当状态变化时，React 能够*自动*重新渲染 UI 的恰当部分，*而不会影响到 React
    的核心思维模型*。我们认为 React 的方法——将 UI 视为状态的简单函数，使用标准的 JavaScript 值和习惯用法——正是为什么 React 能够让如此多的开发者易于接近的关键部分。因此，我们投入精力构建了一个用于优化的
    React 编译器。
- en: JavaScript is a notoriously challenging language to optimize, thanks to its
    loose rules and dynamic nature. React Compiler is able to compile code safely
    by modeling both the rules of JavaScript *and* the “rules of React”. For example,
    React components must be idempotent — returning the same value given the same
    inputs — and can’t mutate props or state values. These rules limit what developers
    can do and help to carve out a safe space for the compiler to optimize.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 因其松散的规则和动态的特性而被公认为一门极具挑战性的语言。React 编译器通过同时模拟 JavaScript 的规则和“React
    的规则”，能够安全地编译代码。例如，React 组件必须是幂等的——在相同输入条件下返回相同的值——且不能改变 props 或 state 的值。这些规则限制了开发者的行为，帮助确立编译器优化的安全空间。
- en: Of course, we understand that developers sometimes bend the rules a bit, and
    our goal is to make React Compiler work out of the box on as much code as possible.
    The compiler attempts to detect when code doesn’t strictly follow React’s rules
    and will either compile the code where safe or skip compilation if it isn’t safe.
    We’re testing against Meta’s large and varied codebase in order to help validate
    this approach.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们理解开发者有时会在一定程度上打破规则，我们的目标是使 React 编译器能够在尽可能多的代码上开箱即用。编译器试图检测代码是否严格遵循 React
    的规则，并会在安全时编译代码，否则将跳过编译。我们正在针对 Meta 的大规模和多样化的代码库进行测试，以验证这一方法的有效性。
- en: For developers who are curious about making sure their code follows React’s
    rules, we recommend [enabling Strict Mode](/reference/react/StrictMode) and [configuring
    React’s ESLint plugin](/learn/editor-setup#linting). These tools can help to catch
    subtle bugs in your React code, improving the quality of your applications today,
    and future-proofs your applications for upcoming features such as React Compiler.
    We are also working on consolidated documentation of the rules of React and updates
    to our ESLint plugin to help teams understand and apply these rules to create
    more robust apps.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于希望确保其代码遵循 React 规则的开发者，我们建议[启用严格模式](/reference/react/StrictMode)和[配置 React
    的 ESLint 插件](/learn/editor-setup#linting)。这些工具有助于捕捉 React 代码中的微妙错误，提升应用程序的质量，并未即将推出的功能（如
    React 编译器）未来保护您的应用。
- en: To see the compiler in action, you can check out our [talk from last fall](https://www.youtube.com/watch?v=qOQClO3g8-Y).
    At the time of the talk, we had early experimental data from trying React Compiler
    on one page of instagram.com. Since then, we shipped the compiler to production
    across instagram.com. We’ve also expanded our team to accelerate the rollout to
    additional surfaces at Meta and to open source. We’re excited about the path ahead
    and will have more to share in the coming months.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 欲亲眼目睹编译器的运作，请查看我们去年秋季的[演讲](https://www.youtube.com/watch?v=qOQClO3g8-Y)。在演讲时，我们展示了将
    React 编译器尝试应用在 Instagram.com 的一个页面上的初步实验数据。此后，我们已将编译器在 Instagram.com 上投入生产。我们还扩展了团队规模，以加速在
    Meta 的其他平台上和开源项目中的推广。展望未来，我们对此充满期待，并将在接下来的几个月内分享更多进展。
- en: Actions
  id: totrans-split-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动作
- en: We [previously shared](/blog/2023/03/22/react-labs-what-we-have-been-working-on-march-2023#react-server-components)
    that we were exploring solutions for sending data from the client to the server
    with Server Actions, so that you can execute database mutations and implement
    forms. During development of Server Actions, we extended these APIs to support
    data handling in client-only applications as well.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前分享过，我们正在探索通过服务器操作将数据从客户端发送到服务器的解决方案，以便您可以执行数据库变更和实现表单。在服务器操作的开发过程中，我们扩展了这些
    API，以支持仅客户端应用程序中的数据处理。
- en: 'We refer to this broader collection of features as simply “Actions”. Actions
    allow you to pass a function to DOM elements such as [`<form/>`](/reference/react-dom/components/form):'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些更广泛的功能集合简称为“动作”。动作允许您将函数传递给 DOM 元素，例如[`<form/>`](/reference/react-dom/components/form)：
- en: '[PRE0]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `action` function can operate synchronously or asynchronously. You can define
    them on the client side using standard JavaScript or on the server with the [`'use
    server'`](/reference/rsc/use-server) directive. When using an action, React will
    manage the life cycle of the data submission for you, providing hooks like [`useFormStatus`](/reference/react-dom/hooks/useFormStatus),
    and [`useActionState`](/reference/react/useActionState) to access the current
    state and response of the form action.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`action`函数可以同步或异步操作。您可以使用标准JavaScript在客户端定义它们，或者在服务器上使用[`''use server''`](/reference/rsc/use-server)指令。在使用操作时，React将为您管理数据提交的生命周期，提供像[`useFormStatus`](/reference/react-dom/hooks/useFormStatus)和[`useActionState`](/reference/react/useActionState)这样的钩子，以访问表单操作的当前状态和响应。'
- en: By default, Actions are submitted within a [transition](/reference/react/useTransition),
    keeping the current page interactive while the action is processing. Since Actions
    support async functions, we’ve also added the ability to use `async/await` in
    transitions. This allows you to show pending UI with the `isPending` state of
    a transition when an async request like `fetch` starts, and show the pending UI
    all the way through the update being applied.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Actions在[transition](/reference/react/useTransition)中提交，使当前页面在处理操作时保持交互。由于Actions支持异步函数，我们还添加了在转换中使用`async/await`的功能。这允许您在像`fetch`开始的异步请求期间，通过转换的`isPending`状态显示挂起UI，并在整个更新过程中显示挂起UI。
- en: Alongside Actions, we’re introducing a feature named [`useOptimistic`](/reference/react/useOptimistic)
    for managing optimistic state updates. With this hook, you can apply temporary
    updates that are automatically reverted once the final state commits. For Actions,
    this allows you to optimistically set the final state of the data on the client,
    assuming the submission is successful, and revert to the value for data received
    from the server. It works using regular `async`/`await`, so it works the same
    whether you’re using `fetch` on the client, or a Server Action from the server.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Actions之外，我们还引入了一个名为[`useOptimistic`](/reference/react/useOptimistic)的功能，用于管理乐观状态更新。通过这个钩子，您可以应用临时更新，一旦最终状态提交，这些更新就会自动回滚。对于Actions，这使您可以在客户端乐观地设置数据的最终状态，假设提交成功，然后恢复为从服务器接收到的数据值。它使用常规的`async`/`await`工作，因此无论您是在客户端使用`fetch`，还是在服务器上使用Server
    Action，它都能正常工作。
- en: Library authors can implement custom `action={fn}` props in their own components
    with `useTransition`. Our intent is for libraries to adopt the Actions pattern
    when designing their component APIs, to provide a consistent experience for React
    developers. For example, if your library provides a `<Calendar onSelect={eventHandler}>`
    component, consider also exposing a `<Calendar selectAction={action}>` API, too.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 库作者可以在他们自己的组件中使用`useTransition`实现自定义的`action={fn}`属性。我们的意图是，当设计他们的组件API时，库应采用Actions模式，为React开发人员提供一致的体验。例如，如果您的库提供了一个`<Calendar
    onSelect={eventHandler}>`组件，还考虑公开一个`<Calendar selectAction={action}>`API。
- en: While we initially focused on Server Actions for client-server data transfer,
    our philosophy for React is to provide the same programming model across all platforms
    and environments. When possible, if we introduce a feature on the client, we aim
    to make it also work on the server, and vice versa. This philosophy allows us
    to create a single set of APIs that work no matter where your app runs, making
    it easier to upgrade to different environments later.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然最初我们专注于用于客户端-服务器数据传输的Server Actions，但我们对React的理念是在所有平台和环境中提供相同的编程模型。在可能的情况下，如果我们在客户端引入一个功能，我们的目标是使其在服务器上也能工作，反之亦然。这一理念使我们能够创建一套适用于应用程序在任何地方运行的API，从而使将来升级到不同环境变得更容易。
- en: Actions are now available in the Canary channel and will ship in the next release
    of React.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以在金丝雀通道中使用**Actions**，并将在下一个React版本中发布。
- en: New Features in React Canary
  id: totrans-split-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React金丝雀中的新功能
- en: We introduced [React Canaries](/blog/2023/05/03/react-canaries) as an option
    to adopt individual new stable features as soon as their design is close to final,
    before they’re released in a stable semver version.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引入了[React Canaries](/blog/2023/05/03/react-canaries)作为选择，以在设计接近最终状态时，立即采纳各个新的稳定特性，而不是在稳定的semver版本中发布之前。
- en: Canaries are a change to the way we develop React. Previously, features would
    be researched and built privately inside of Meta, so users would only see the
    final polished product when released to Stable. With Canaries, we’re building
    in public with the help of the community to finalize features we share in the
    React Labs blog series. This means you hear about new features sooner, as they’re
    being finalized instead of after they’re complete.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 变更为React开发带来了一个新的阶段。以前，功能会在Meta内部进行研究和私下构建，所以用户只能在稳定版发布时看到最终成品。现在有了Canaries，我们在公共场合与社区的帮助下构建，以完成我们在React实验室博客系列中分享的功能。这意味着您能更早地了解新功能，因为它们在完成后而不是完全完成时即已听到。
- en: 'React Server Components, Asset Loading, Document Metadata, and Actions have
    all landed in the React Canary, and we’ve added docs for these features on react.dev:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: React服务器组件、资源加载、文档元数据和Actions已经都进入了React Canary，并且我们在react.dev上为这些功能添加了文档。
- en: '**Directives**: [`"use client"`](/reference/rsc/use-client) and [`"use server"`](/reference/rsc/use-server)
    are bundler features designed for full-stack React frameworks. They mark the “split
    points” between the two environments: `"use client"` instructs the bundler to
    generate a `<script>` tag (like [Astro Islands](https://docs.astro.build/en/concepts/islands/#creating-an-island)),
    while `"use server"` tells the bundler to generate a POST endpoint (like [tRPC
    Mutations](https://trpc.io/docs/concepts)). Together, they let you write reusable
    components that compose client-side interactivity with the related server-side
    logic.'
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指令**: [`"use client"`](/reference/rsc/use-client) 和 [`"use server"`](/reference/rsc/use-server)
    是为全栈React框架设计的打包器功能。它们标记了两个环境之间的“分割点”： `"use client"` 指示打包器生成 `<script>` 标签（如[Astro
    Islands](https://docs.astro.build/en/concepts/islands/#creating-an-island)）；而
    `"use server"` 则告诉打包器生成一个POST端点（如[tRPC Mutations](https://trpc.io/docs/concepts)）。它们让您编写可重用组件，将客户端交互与相关的服务器端逻辑组合在一起。'
- en: '**Document Metadata**: we added built-in support for rendering [`<title>`](/reference/react-dom/components/title),
    [`<meta>`](/reference/react-dom/components/meta), and metadata [`<link>`](/reference/react-dom/components/link)
    tags anywhere in your component tree. These work the same way in all environments,
    including fully client-side code, SSR, and RSC. This provides built-in support
    for features pioneered by libraries like [React Helmet](https://github.com/nfl/react-helmet).'
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档元数据**: 我们增加了对在组件树中任何位置渲染的内置支持[`<title>`](/reference/react-dom/components/title)，[`<meta>`](/reference/react-dom/components/meta)，以及元数据[`<link>`](/reference/react-dom/components/link)标签。这些在所有环境中都以相同方式工作，包括完全客户端代码、SSR和RSC。这提供了对像[React
    Helmet](https://github.com/nfl/react-helmet)等库开发先进特性的内置支持。'
- en: '**Asset Loading**: we integrated Suspense with the loading lifecycle of resources
    such as stylesheets, fonts, and scripts so that React takes them into account
    to determine whether the content in elements like [`<style>`](/reference/react-dom/components/style),
    [`<link>`](/reference/react-dom/components/link), and [`<script>`](/reference/react-dom/components/script)
    are ready to be displayed. We’ve also added new [Resource Loading APIs](/reference/react-dom#resource-preloading-apis)
    like `preload` and `preinit` to provide greater control for when a resource should
    load and initialize.'
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源加载**: 我们将Suspense与样式表、字体和脚本等资源的加载生命周期集成在一起，以便React考虑它们来确定是否准备好显示像[`<style>`](/reference/react-dom/components/style)，[`<link>`](/reference/react-dom/components/link)和[`<script>`](/reference/react-dom/components/script)中的内容。我们还添加了新的[资源加载APIs](/reference/react-dom#resource-preloading-apis)，如`preload`和`preinit`，以提供更大的控制权，以便在何时加载和初始化资源。'
- en: '**Actions**: As shared above, we’ve added Actions to manage sending data from
    the client to the server. You can add `action` to elements like [`<form/>`](/reference/react-dom/components/form),
    access the status with [`useFormStatus`](/reference/react-dom/hooks/useFormStatus),
    handle the result with [`useActionState`](/reference/react/useActionState), and
    optimistically update the UI with [`useOptimistic`](/reference/react/useOptimistic).'
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Actions**: 如上所述，我们添加了Actions以管理从客户端向服务器发送数据。您可以为[`<form/>`](/reference/react-dom/components/form)等元素添加`action`，使用[`useFormStatus`](/reference/react-dom/hooks/useFormStatus)访问状态，使用[`useActionState`](/reference/react/useActionState)处理结果，并使用[`useOptimistic`](/reference/react/useOptimistic)进行乐观更新UI。'
- en: Since all of these features work together, it’s difficult to release them in
    the Stable channel individually. Releasing Actions without the complementary hooks
    for accessing form states would limit the practical usability of Actions. Introducing
    React Server Components without integrating Server Actions would complicate modifying
    data on the server.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有这些功能是协同工作的，单独在稳定通道中发布它们是困难的。发布Actions而没有用于访问表单状态的补充钩子将限制Actions的实际可用性。引入React
    Server Components而没有集成Server Actions将复杂化对服务器上数据的修改。
- en: Before we can release a set of features to the Stable channel, we need to ensure
    they work cohesively and developers have everything they need to use them in production.
    React Canaries allow us to develop these features individually, and release the
    stable APIs incrementally until the entire feature set is complete.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将一组功能发布到稳定通道之前，我们需要确保它们能够协同工作，并且开发人员拥有一切必需的东西来在生产环境中使用它们。React Canaries允许我们单独开发这些功能，并逐步发布稳定的API，直到整个功能集完成。
- en: The current set of features in React Canary are complete and ready to release.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: React Canary中的当前功能集已经完整且准备好发布。
- en: The Next Major Version of React
  id: totrans-split-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React的下一个主要版本
- en: 'After a couple of years of iteration, `react@canary` is now ready to ship to
    `react@latest`. The new features mentioned above are compatible with any environment
    your app runs in, providing everything needed for production use. Since Asset
    Loading and Document Metadata may be a breaking change for some apps, the next
    version of React will be a major version: **React 19**.'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 经过几年的迭代，`react@canary`现在已经准备好发布到`react@latest`。上述新功能兼容您的应用程序运行的任何环境，提供了生产使用所需的一切。由于资源加载和文档元数据可能对某些应用程序造成破坏性影响，React的下一个版本将是一个主要版本：**React
    19**。
- en: There’s still more to be done to prepare for release. In React 19, we’re also
    adding long-requested improvements which require breaking changes like support
    for Web Components. Our focus now is to land these changes, prepare for release,
    finalize docs for new features, and publish announcements for what’s included.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多工作要做以准备发布。在React 19中，我们还在添加长期请求的改进，这些改进需要支持Web组件等破坏性变更。我们现在的重点是实施这些变更，准备发布，完成新功能的文档，以及发布包含内容的公告。
- en: We’ll share more information about everything React 19 includes, how to adopt
    the new client features, and how to build support for React Server Components
    in the coming months.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个月中，我们将分享有关React 19包含的所有内容、如何采用新客户端功能以及如何为React Server Components构建支持的更多信息。
- en: Offscreen (renamed to Activity).
  id: totrans-split-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动（从Offscreen改名为Activity）。
- en: Since our last update, we’ve renamed a capability we’re researching from “Offscreen”
    to “Activity”. The name “Offscreen” implied that it only applied to parts of the
    app that were not visible, but while researching the feature we realized that
    it’s possible for parts of the app to be visible and inactive, such as content
    behind a modal. The new name more closely reflects the behavior of marking certain
    parts of the app “active” or “inactive”.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 自我们上次更新以来，我们已经将我们正在研究的一个能力从“Offscreen”改名为“Activity”。名称“Offscreen”暗示它仅适用于应用程序中不可见的部分，但在研究该功能时，我们意识到应用程序的某些部分可能是可见但不活动的，例如模态框后面的内容。新名称更贴近标记应用程序某些部分为“活动”或“非活动”的行为。
- en: Activity is still under research and our remaining work is to finalize the primitives
    that are exposed to library developers. We’ve deprioritized this area while we
    focus on shipping features that are more complete.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: Activity仍在研究中，我们剩下的工作是最终确定暴露给库开发人员的基本元素。在我们专注于发布更完整功能时，我们已经降低了这一领域的优先级。
- en: '* * *'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In addition to this update, our team has presented at conferences and made appearances
    on podcasts to speak more on our work and answer questions.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这次更新之外，我们的团队还在会议上做了演讲，并在播客上露面，更详细地讲述了我们的工作并回答了问题。
- en: Thanks [Lauren Tan](https://twitter.com/potetotes), [Sophie Alpert](https://twitter.com/sophiebits),
    [Jason Bonta](https://threads.net/someextent), [Eli White](https://twitter.com/Eli_White),
    and [Sathya Gunasekaran](https://twitter.com/_gsathya) for reviewing this post.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢[Lauren Tan](https://twitter.com/potetotes)、[Sophie Alpert](https://twitter.com/sophiebits)、[Jason
    Bonta](https://threads.net/someextent)、[Eli White](https://twitter.com/Eli_White)和[Sathya
    Gunasekaran](https://twitter.com/_gsathya)审阅本篇文章。
- en: Thanks for reading, and [see you at React Conf](https://conf.react.dev/)!
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您的阅读，并[期待React Conf见面](https://conf.react.dev/)！
