- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:54:45'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:54:45'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: If you're just going to sit there doing nothing, at least do nothing correctly
    - The Old New Thing
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果你只是坐在那里什么也不做，至少要以正确的方式什么也不做 - 《The Old New Thing》
- en: 来源：[https://devblogs.microsoft.com/oldnewthing/20240216-00/?p=109409](https://devblogs.microsoft.com/oldnewthing/20240216-00/?p=109409)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://devblogs.microsoft.com/oldnewthing/20240216-00/?p=109409](https://devblogs.microsoft.com/oldnewthing/20240216-00/?p=109409)
- en: If you’re just going to sit there doing nothing, at least do nothing correctly
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果你只是坐在那里什么也不做，至少要以正确的方式什么也不做
- en: There may be times where you need to make an API do nothing. It’s important
    to have it do nothing in the correct way.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你可能需要让一个 API 什么也不做。重要的是以正确的方式使其什么也不做。
- en: For example, Windows has an extensive printing infrastructure. But that infrastructure
    does not exist on Xbox. What should happen if an app tries to print on an Xbox?
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Windows 拥有庞大的打印基础设施。但这种基础设施在 Xbox 上不存在。如果一个应用程序试图在 Xbox 上打印会发生什么？
- en: Well, the wrong thing to do is to have the printing functions throw a `Not­Supported­Exception`.
    The app that the user installed on the Xbox was probably tested primarily, if
    not exclusively, on a PC, where printing is always available. When run on an Xbox,
    the exception will probably go unhandled, and the app will crash. Even if the
    app tried to catch the exception, it would probably display a message like “Oops.
    That went badly. Call support and provide this incident code.”
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 做的错误的事情是让打印函数抛出 `Not­Supported­Exception` 异常。用户在 Xbox 上安装的应用程序可能主要（如果不是唯一地）在
    PC 上进行测试，而在 PC 上打印总是可用的。当在 Xbox 上运行时，异常可能不会被处理，应用程序会崩溃。即使应用程序试图捕获异常，它可能会显示像“哎呀。出了些问题。请联系支持并提供此事件代码。”这样的消息。
- en: A better design for “supporting” printing on Xbox is to have the printing functions
    succeed, but report that there are no printers installed. With this behavior,
    when the app tries to print, it will ask the user to select a printer, and show
    an empty list. The user realizes, “Oh, there are no printers,” and cancels the
    printing request.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xbox 上“支持”打印的更好设计是使打印功能成功，但报告没有安装打印机。使用此行为，当应用程序尝试打印时，它将要求用户选择打印机，并显示一个空列表。用户意识到，“哦，没有打印机”，然后取消打印请求。
- en: To deal with apps that get fancy and say “Oh, you have no printers installed,
    let me help you install one,” the function for installing a printer can return
    immediately with a result code that means “The user cancelled the operation.”
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理那些变得复杂并说“哦，你没有安装打印机，让我帮你安装一个”的应用程序，安装打印机的函数可以立即返回一个结果代码，“用户取消了操作”。
- en: The idea here is to have the printing functions all behave in a manner perfectly
    consistent with printing being fully supported, yet mysteriously there is never
    a printer to print to.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的想法是所有打印函数都表现出与完全支持打印一致的方式，但神秘地从来没有打印机可以打印。
- en: 'Now, you probably also want to add a function to check whether printing even
    works at all. Apps can use this function to hide the Print button from their UI
    if they are running on a system that doesn’t support printing at all. But naïve
    apps that assume that printing works will still behave in a reasonable manner:
    You’re just on a system that doesn’t have any printers and all attempts to install
    a printer are ineffective.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可能还希望添加一个功能来检查打印是否有效。如果应用程序在不支持打印的系统上运行，可以使用此功能从其用户界面隐藏“打印”按钮。但是，天真的应用程序假设打印功能正常运行，仍将表现出合理的行为：您只是在一个没有打印机的系统上，所有安装打印机的尝试都无效。
- en: The name we use to describe this “do nothing” behavior is “inert”.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用来描述这种“什么也不做”的行为的名称是“惰性”。
- en: The API surface still exists and functions according to its specification, but
    it also does nothing. The important thing is that it does nothing in a way that
    is consistent with its documentation and is least likely to create problems with
    existing code.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: API 表面仍然存在并根据其规范运行，但它也什么也不做。重要的是，它以与其文档一致且最不可能与现有代码创建问题的方式什么也不做。
- en: 'Another example is the retirement of an API that has a variety of functions
    for creating widget handles, other functions that accept widget handles, and a
    function for closing widget handles. The team that was doing the retirement originally
    proposed making the API inert as follows:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是退休的 API，该 API 具有用于创建小部件句柄的各种功能，接受小部件句柄的其他功能以及关闭小部件句柄的功能。最初建议将进行退休的 API
    使其变得惰性如下：
- en: '[PRE0]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I pointed out that having `Create­Widget` succeed but return a null pointer
    is going to confuse apps. “The call succeeded, but I didn’t get a valid handle
    back?” I even found some of their own test code that checked whether the handle
    was null to determine whether the call succeeded, rather than checking the return
    value.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我指出，使`Create­Widget`成功但返回空指针会使应用程序混淆。“调用成功了，但我没有得到一个有效的句柄？”我甚至找到了他们自己的一些测试代码，检查句柄是否为空来确定调用是否成功，而不是检查返回值。
- en: I also pointed out that having `Enable­Widget` return “invalid handle” is also
    going to create confusion. An app calls `Create­Widget`, and it succeeds, and
    it takes that handle (which is presumably valid) and tries to use it to enable
    a widget, and it’s told “That handle isn’t valid.” How can that be? “I asked for
    a widget, and you gave me one, and then when I showed it to you, you said, ‘That’s
    not a widget.’ This API is [gaslighting](https://en.wikipedia.org/wiki/Gaslighting)
    me!”
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我还指出，使`Enable­Widget`返回“无效句柄”也会造成混淆。一个应用程序调用`Create­Widget`，它成功了，并且拿到了那个句柄（应该是有效的），然后尝试使用它来启用一个小部件，却被告知“那个句柄无效”。这怎么可能？“我要求一个小部件，你给了我一个，然后当我给你看它时，你说，‘那不是一个小部件。’这个API在[气灯]我！”
- en: 'I looked through the existing documentation for their API and found that a
    documented return value is `ERROR_<wbr>CANCELLED` to mean that the user cancelled
    the creation of the widget. Therefore, apps are already dealing with the possibility
    of widgets not being created due to conditions outside their control, so we can
    take advantage of that: Any time the app tries to create a widget, just say “Nope,
    the, uh, user cancelled, yeah, that’s what happened.”'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我查看了他们API的现有文档，发现一个记录的返回值是`ERROR_<wbr>CANCELLED`，表示用户取消了小部件的创建。因此，应用程序已经处理了由于其控制范围之外的条件而无法创建小部件的可能性，因此我们可以利用这一点：每次应用程序尝试创建一个小部件，只需说“不，嗯，用户取消了，是的，就是这样。”
- en: '[PRE1]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we have a proper inert API surface.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个合适的惰性API表面。
- en: If you try to create a widget, we tell you that we couldn’t because the user
    cancelled. Since all attempts to create a widget fail, there is no such thing
    as a valid widget handle, and any time you try to use one, we tell you that the
    handle is invalid.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您试图创建一个小部件，我们会告诉您由于用户取消了，我们无法创建。由于所有创建小部件的尝试都失败了，因此不存在有效的小部件句柄，每次您尝试使用一个句柄时，我们会告诉您该句柄无效。
- en: This also avoids the problem of having to produce dummy aliases for widgets.
    Since there *are no widgets*, there is no legitimate case where an app could ask
    a widget for its aliases.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这还避免了为小部件产生虚拟别名的问题。因为*没有小部件*，不存在合法的情况，应用程序可以要求一个小部件的别名。
- en: '**Bonus chatter**: To clear up some confusion: The idea here is that the printing
    API has always existed on desktop, where printing is supported, and the “get me
    the list of printers” function is documented not to throw an exception. If you
    want to port the printing API to Xbox, how do you do it in a way that allows existing
    desktop apps to continue to run on Xbox? The inert behavior is completely truthful:
    There are no printers on an Xbox. Nobody expects the answer to the question, “How
    many printers are there?” to be “How dare you ask me such a thing!”'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**额外的废话**: 为了消除一些混淆：这里的想法是打印API始终存在于支持打印的桌面上，而“获取打印机列表”的函数文件中没有抛出异常。如果您想要将打印API移植到Xbox上，该如何做到以便现有的桌面应用程序继续在Xbox上运行？惰性行为完全真实：Xbox上没有打印机。没有人期望问题的答案是，“有多少台打印机？”是“你竟敢问我这样的问题！”'
- en: Another scenario where you need to create an inert API surface is if you want
    to retire an existing API. How do you make the behavior of the API consistent
    with its contract while still doing nothing useful?
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种需要创建惰性API表面的场景是，如果您希望淘汰现有的API。在保持API行为与其契约一致的同时，如何确保仍然没有产生实际作用？
