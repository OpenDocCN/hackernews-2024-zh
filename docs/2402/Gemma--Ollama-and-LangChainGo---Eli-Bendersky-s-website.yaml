- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 13:22:23'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Gemma, Ollama and LangChainGo - Eli Bendersky's website
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://eli.thegreenplace.net/2024/gemma-ollama-and-langchaingo/](https://eli.thegreenplace.net/2024/gemma-ollama-and-langchaingo/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Yesterday Google released Gemma - an open LLM that folks can run locally on
    their machines (similarly to `llama2`). I was wondering how easy it would be to
    run Gemma on my computer, chat with it and interact with it from a Go program.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: 'Turns it - thanks to [Ollama](https://ollama.com/download) - it''s extremely
    easy! Gemma was already [added to Ollama](https://ollama.com/library/gemma), so
    all one has to do is run:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: And wait for a few minutes while the model downloads. From this point on, my
    previous post about [using Ollama locally in Go](https://eli.thegreenplace.net/2023/using-ollama-with-langchaingo/)
    applies with pretty much no changes. Gemma becomes available through a REST API
    locally, and can be accessed from ollama-aware libraries like [LangChainGo](https://github.com/tmc/langchaingo).
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: 'I went ahead and added a `--model` flag to all my [code samples from that post](https://github.com/eliben/code-for-blog/tree/main/2023/ollama-go-langchain),
    and they can all run with `--model gemma` now. It all just works, due to the magic
    of standard interfaces:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Gemma is packaged in a standard interface for inclusion in Ollama
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ollama then presents a standardized REST API for this model, just like it does
    for other compatible models
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LangChainGo has an Ollama provider that lets us write code to interact with
    any model running through Ollama
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So we can write code like:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
- en: 'And then run it as follows:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
- en: Gemma seems relatively fast for a model running on a CPU. I find that the default
    7B model, while much more capable than the default 7B llama2 based on published
    benchmarks - also runs about 30% faster on my machine.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Without LangChainGo
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While LangChainGo offers a conveneint API that''s standardized across LLM providers,
    its use is by no means required for this sample. Ollama itself has a [Go API](https://pkg.go.dev/github.com/jmorganca/ollama/api)
    as part of its structure and it can be used externally as well. Here''s an equivalent
    sample that doesn''t require LangChainGo:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
