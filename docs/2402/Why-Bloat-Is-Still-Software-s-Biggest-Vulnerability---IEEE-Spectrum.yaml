- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:43:17'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:43:17'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Why Bloat Is Still Software’s Biggest Vulnerability - IEEE Spectrum
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为何臃肿仍然是软件最大的漏洞 - IEEE Spectrum
- en: 来源：[https://spectrum.ieee.org/lean-software-development](https://spectrum.ieee.org/lean-software-development)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://spectrum.ieee.org/lean-software-development](https://spectrum.ieee.org/lean-software-development)
- en: '*This post is dedicated to the memory of* [*Niklaus Wirth*](https://ethz.ch/en/news-and-events/eth-news/news/2024/01/computer-pioneer-niklaus-wirth-has-died.html)*,
    a computing pioneer who passed away 1 January 2024\. In 1995 he wrote an influential
    article called “*[*A Plea for Lean Software*](https://cr.yp.to/bib/1995/wirth.pdf)*,”*
    *published in* [Computer](https://ieeexplore.ieee.org/document/348001)*, the magazine
    for members of the IEEE Computer Society, which I read early in my career as an
    entrepreneur and software developer. In what follows, I try to make the same case
    nearly 30 years later, updated for today’s computing horrors. A version of this
    post was* [*originally published*](https://berthub.eu/articles/posts/a-2024-plea-for-lean-software/)
    *on my personal blog, [Berthub.eu](http://berthub.eu).*'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*这篇文章是* [*尼古劳斯·维尔特*](https://ethz.ch/en/news-and-events/eth-news/news/2024/01/computer-pioneer-niklaus-wirth-has-died.html)*的纪念*，一位计算机先驱，于2024年1月1日去世。1995年，他写了一篇有影响力的文章《[*呼吁精简软件*](https://cr.yp.to/bib/1995/wirth.pdf)*》，发表在[Computer](https://ieeexplore.ieee.org/document/348001)*，这是IEEE计算机学会会员的杂志，我在创业和软件开发初期阅读过。接下来的内容中，我尝试以近30年后的视角重新提出同样的论点，针对当今的计算恐怖。这篇文章的一个版本最初发表在我个人博客的[*这里*](https://berthub.eu/articles/posts/a-2024-plea-for-lean-software/)，[Berthub.eu](http://berthub.eu)。'
- en: 'Some years ago I did a talk at a local university on cybersecurity, titled
    “[Cyber and Information Security: Have We All Gone Mad?](https://berthub.eu/cyber-mad/Cyber%20and%20information%20security.pdf)”
    It is still worth reading today since we *have* gone quite mad collectively.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，我在一所当地大学做了一个关于网络安全的演讲，题为“[网络与信息安全：我们都疯了吗？](https://berthub.eu/cyber-mad/Cyber%20and%20information%20security.pdf)”今天依然值得一读，因为我们确实在某种程度上都有些疯狂。
- en: The way we build and ship software these days is mostly ridiculous, leading
    to apps using millions of lines of code to open a garage door, and other simple
    programs importing [1,600 external code libraries](https://github.com/SashenJayathilaka/Photo-Sharing-Application)—dependencies—of
    unknown provenance. Software security is dire, which is a function both of the
    quality of the code and the sheer amount of it. Many of us programmers know the
    current situation is untenable. Many programmers (and their management) sadly
    haven’t ever experienced anything else. And for the rest of us, we rarely get
    the time to do a better job.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当今我们构建和发布软件的方式大多荒谬可笑，导致一些应用程序需要使用数百万行代码来开启车库门，而其他一些简单的程序则导入了[1,600个外部代码库](https://github.com/SashenJayathilaka/Photo-Sharing-Application)—这些依赖库—来源不明。软件安全性堪忧，这既与代码质量有关，也与其数量庞大有关。我们许多程序员都知道当前的情况是难以持续的。遗憾的是，许多程序员（及其管理层）从未体验过其他方式。而对于我们其余的人来说，很少有时间来做得更好。
- en: 'It is not just you; we are not merely suffering from nostalgia: Software really
    is very weird today.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅仅是在怀旧；软件现在确实很奇怪。
- en: Let me briefly go over the terrible state of software security, and then spend
    some time on why it is so bad. I also mention some regulatory and legislative
    things going on that we might use to make software quality a priority again. Finally,
    I talk about [an actual useful piece of software I wrote](https://berthub.eu/articles/trifecta)
    as a proof of concept that one can still make [minimal and simple yet modern software](https://berthub.eu/articles/posts/trifecta-technology).
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我简要地回顾一下软件安全的可怕状态，然后花些时间分析为什么情况如此糟糕。我还提到了一些正在进行中的监管和立法措施，我们可以利用这些措施再次把软件质量作为优先事项。最后，我谈论了我写的[一个实际有用的软件](https://berthub.eu/articles/trifecta)作为一个概念验证，证明我们仍然可以开发出[简洁而现代的软件](https://berthub.eu/articles/posts/trifecta-technology)。
- en: 'I hope that this post provides some mental and moral support for suffering
    programmers and technologists who want to improve things. It is not just you;
    We are not merely suffering from nostalgia: Software really is very weird today.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇文章能为那些希望改善情况的程序员和技术人员提供一些精神和道德支持。我们不仅仅是在怀旧；软件现在确实很奇怪。
- en: The terrible state of software security
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件安全的可怕状态
- en: Without going all [“Old man (48) yells at cloud](https://knowyourmeme.com/memes/old-man-yells-at-cloud),”
    let me restate some obvious things. The state of software security is *dire*.
    If we only look at the past year, if you ran industry-standard software like [Ivanti](https://www.ncsc.gov.uk/news/exploitation-ivanti-vulnerabilities),
    [MOVEit](https://en.wikipedia.org/wiki/2023_MOVEit_data_breach), [Outlook](https://www.bleepingcomputer.com/news/microsoft/russian-hackers-exploiting-outlook-bug-to-hijack-exchange-accounts/),
    [Confluence](https://confluence.atlassian.com/security/cve-2023-22518-improper-authorization-vulnerability-in-confluence-data-center-and-server-1311473907.html),
    [Barracuda Email Security Gateway](https://www.mandiant.com/resources/blog/barracuda-esg-exploited-globally),
    [Citrix NetScaler ADC, and NetScaler Gateway](https://www.mandiant.com/resources/blog/remediation-netscaler-adc-gateway-cve-2023-4966),
    chances are you got hacked. Even companies with near-infinite resources (like
    Apple and [Google](https://spectrum.ieee.org/tag/google)) made [trivial “worst
    practice” security mistakes](https://www.schneier.com/blog/archives/2023/09/critical-vulnerability-in-libwebp-library.html)
    that put [their customers in danger](https://www.bleepingcomputer.com/news/security/apple-zero-click-imessage-exploit-used-to-infect-iphones-with-spyware/).
    Yet we continue to rely on all these products.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 不要把所有的[“老人（48岁）对着云喊叫”](https://knowyourmeme.com/memes/old-man-yells-at-cloud)都带入，让我重申一些显而易见的事情。软件安全的状态*十分糟糕*。如果仅仅看过去一年，如果你在运行像[Ivanti](https://www.ncsc.gov.uk/news/exploitation-ivanti-vulnerabilities)、[MOVEit](https://en.wikipedia.org/wiki/2023_MOVEit_data_breach)、[Outlook](https://www.bleepingcomputer.com/news/microsoft/russian-hackers-exploiting-outlook-bug-to-hijack-exchange-accounts/)、[Confluence](https://confluence.atlassian.com/security/cve-2023-22518-improper-authorization-vulnerability-in-confluence-data-center-and-server-1311473907.html)、[Barracuda
    Email Security Gateway](https://www.mandiant.com/resources/blog/barracuda-esg-exploited-globally)、[Citrix
    NetScaler ADC和NetScaler Gateway](https://www.mandiant.com/resources/blog/remediation-netscaler-adc-gateway-cve-2023-4966)，你的机会被黑客攻击了。即使是像Apple和[Google](https://spectrum.ieee.org/tag/google)这样拥有近乎无限资源的公司，也犯了[微不足道的“最差实践”安全错误](https://www.schneier.com/blog/archives/2023/09/critical-vulnerability-in-libwebp-library.html)，将[他们的客户置于危险之中](https://www.bleepingcomputer.com/news/security/apple-zero-click-imessage-exploit-used-to-infect-iphones-with-spyware/)。然而，我们继续依赖所有这些产品。
- en: Software is now (rightfully) considered so dangerous that we tell everyone not
    to run it themselves.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在软件被（理所当然地）认为是如此危险，以至于我们告诉每个人不要自行运行它。
- en: '*Software is now (rightfully) considered so dangerous that we tell everyone
    not to run it themselves. Instead, you are supposed to leave that to an “*X* as
    a service” provider, or perhaps just to “the cloud.” Compare this to a hypothetical
    situation where cars are so likely to catch fire that the advice is not to drive
    a car yourself, but to leave that to professionals who are always accompanied
    by professional firefighters.*'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*现在软件被（理所当然地）认为是如此危险，以至于我们告诉每个人不要自行运行它。相反，你应该把这个工作交给一个“*X*即服务”的提供商，或者可能只是“云”的提供者。将这与一个假设情况进行比较，即汽车很可能自燃，因此建议不要自己驾驶汽车，而是交给总是有专业消防员陪同的专业人士来进行驾驶。*'
- en: '*The assumption is then that the cloud is somehow able to make insecure software
    trustworthy. Yet in the past year, we’ve learned that Microsoft’s [email platform
    was thoroughly hacked](https://thehackernews.com/2023/09/outlook-breach-microsoft-reveals-how.html),
    including classified government email. ([Twice!](https://metacurity.substack.com/p/russian-hacking-group-midnight-blizzard))
    There are also [well-founded worries about the security of the Azure cloud](https://www.lastweekinaws.com/blog/azures-terrible-security-posture-comes-home-to-roost/).
    Meanwhile, industry darling Okta, which provides cloud-based software that enables
    user log-in to various applications, [got comprehensively owned](https://www.reuters.com/technology/cybersecurity/okta-says-hackers-stole-data-all-customer-support-users-cyber-breach-2023-11-29/).
    This was their second breach within two years. Also, there was a suspicious spate
    of Okta users subsequently getting hacked.*'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*然后假设云能够使不安全的软件变得可信任。然而，在过去的一年中，我们了解到Microsoft的[电子邮件平台彻底被黑客攻击](https://thehackernews.com/2023/09/outlook-breach-microsoft-reveals-how.html)，包括机密政府电子邮件。([两次！](https://metacurity.substack.com/p/russian-hacking-group-midnight-blizzard))
    同时，对Azure云的安全性也存在[深思疑虑](https://www.lastweekinaws.com/blog/azures-terrible-security-posture-comes-home-to-roost/)。与此同时，行业宠儿Okta提供基于云的软件，可以使用户登录各种应用程序，也[遭到了全面的攻击](https://www.reuters.com/technology/cybersecurity/okta-says-hackers-stole-data-all-customer-support-users-cyber-breach-2023-11-29/)。这是他们两年内的第二次数据泄露事件。此后，有可疑的Okta用户接连被黑客攻击。'
- en: '*Clearly, we need better software.*'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*显然，我们需要更好的软件。*'
- en: '*The European Union has launched three pieces of legislation to this effect:
    [NIS2 for important services](https://digital-strategy.ec.europa.eu/en/policies/nis2-directive);
    the [Cyber Resilience Act](https://digital-strategy.ec.europa.eu/en/policies/cyber-resilience-act)
    for almost all commercial software and electronic devices; and a revamped [Product
    Liability Directive](https://www.euractiv.com/section/digital/news/eu-updates-product-liability-regime-to-include-software-artificial-intelligence/)
    that also extends to software. Legislation is always hard, and it remains to be
    seen [if they got it right](https://berthub.eu/articles/posts/eu-cra-what-does-it-mean-for-open-source/).
    But that software security is terrible enough these days to warrant legislation
    seems obvious.*'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 欧盟推出了三项立法措施：为重要服务制定的[NIS2指令](https://digital-strategy.ec.europa.eu/en/policies/nis2-directive)；几乎所有商业软件和电子设备的[网络韧性法案](https://digital-strategy.ec.europa.eu/en/policies/cyber-resilience-act)；以及修订后的[产品责任指令](https://www.euractiv.com/section/digital/news/eu-updates-product-liability-regime-to-include-software-artificial-intelligence/)，它也包括了软件。立法总是困难的，还有待观察[他们是否做对了](https://berthub.eu/articles/posts/eu-cra-what-does-it-mean-for-open-source/)。但是，软件安全性如此糟糕，以至于需要立法似乎是显而易见的。
- en: '*Why software security is so bad*'
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么软件安全性如此糟糕
- en: '*I want to touch on incentives. The situation today is clearly working well
    for commercial operators. Making more secure software takes time and is a lot
    of work, and the current security incidents don’t appear to be impacting the bottom
    line or stock prices. You can [speed up time to market by cutting corners](https://www.microsoft.com/en-us/research/publication/software-components-only-the-giants-survive/).
    So from an economic standpoint, what we see is entirely predictable. Legislation
    could be very important in changing this equation.*'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我想说说激励措施。当前情况显然对商业运营商非常有利。开发更安全的软件需要时间和大量工作，而目前的安全事故似乎并没有影响到公司的利润或股价。你可以通过[削减角度来加快上市时间](https://www.microsoft.com/en-us/research/publication/software-components-only-the-giants-survive/)。因此，从经济的角度来看，我们所看到的情况完全是可以预料的。立法对改变这种局面可能非常重要。
- en: '*The security of software depends on two factors—the *density* of security
    issues in the source code and the sheer *amount of code* accessible by hackers.
    As the U.S. defense community loved to point out in the 1980s, [quantity has a
    quality all of its own](https://www.quora.com/Who-said-Quantity-has-a-quality-all-its-own).
    The reverse applies to software—the more you have of it, the more risks you run.*'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 软件安全性取决于两个因素：源代码中的安全问题的*密度*和黑客可访问的文件的*数量*。正如美国国防界在20世纪80年代喜欢指出的那样，[数量本身就蕴含着一种质量](https://www.quora.com/Who-said-Quantity-has-a-quality-all-its-own)。反之亦然应用于软件领域——你拥有的越多，你面临的风险就越大。
- en: '*As a case in point, Apple iPhone users got repeatedly hacked over many years
    because of the huge attack surface exposed by iMessage. It is possible to send
    an unsolicited iMessage to an Apple user. The phone will then immediately process
    that message so it can preview it. The problem is that Apple in its wisdom decided
    that such unsolicited messages needed to support a vast array of image formats,
    accidentally [including PDFs with weird embedded compressed fonts](https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html)
    using an ancient format that effectively included a programming language. So someone
    could send an unsolicited message to your iPhone that could probe for weaknesses
    in the rest of the phone.*'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个例子，多年来，苹果iPhone用户因iMessage所暴露的巨大攻击面而多次被黑客攻击。可能向苹果用户发送未经请求的iMessage。然后手机立即处理该消息以便预览它。问题在于，苹果在其智慧决定，认为此类未经请求的消息需要支持各种各样的图像格式，不小心地[包括了使用古老格式的奇怪嵌入式压缩字体的PDF](https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html)，实际上包括了一种编程语言。因此，有人可以向你的iPhone发送未经请求的消息，以便寻找手机其他部分的弱点。
- en: '*In this way, attackers were able to benefit from security bugs in the phone’s
    millions of lines of code. You don’t need a high bug density to find [an exploitable
    hole](https://www.europarl.europa.eu/meetdocs/2014_2019/plmrep/COMMITTEES/PEGA/DV/2023/05-08/REPORTcompromises_EN.pdf)
    in millions of lines of code.*'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一来，攻击者可以从手机数百万行代码中的安全漏洞中获益。你不需要高密度的错误来发现[一个可以利用的漏洞](https://www.europarl.europa.eu/meetdocs/2014_2019/plmrep/COMMITTEES/PEGA/DV/2023/05-08/REPORTcompromises_EN.pdf)在数百万行代码中。
- en: '*Wiping out all the bugs in your code won’t save you from the decision to implement
    a feature to automatically execute code embedded in documents.*'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 擦去代码中的所有错误并不能让你摆脱决定在文档中自动执行嵌入代码的功能。
- en: '*Apple could have prevented this situation by restricting previews to a far
    smaller range of image formats, or even a single “known good” image format. Apple
    could have saved themselves an enormous amount of pain simply by [exposing fewer
    lines of their code](https://github.com/berthubert/sbox#sbox) to attackers. Incidentally,
    the E.U.’s Cyber Resilience Act [explicitly tells vendors to minimize the attack
    surface](https://berthub.eu/articles/posts/eu-cra-secure-coding-solution/).*'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*苹果本可以通过将预览限制在更小范围的图片格式，甚至是一个“已知良好”的图片格式，来避免这种情况。苹果本可以通过将[暴露给攻击者的代码行数减少](https://github.com/berthubert/sbox#sbox)来避免自己遭受巨大的痛苦。顺便说一句，欧盟的网络安全弹性法案[明确告诉供应商要最小化攻击面](https://berthub.eu/articles/posts/eu-cra-secure-coding-solution/)。*'
- en: '*Apple is (by far) not the worst offender in this field. But it is a widely
    respected and well-resourced company that usually thinks through what they do.
    And even they got it wrong by needlessly shipping and exposing too much code.*'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*苹果（迄今为止）在这个领域并不是最糟糕的行为者。但它是一家广受尊敬且资源充足的公司，通常会深思熟虑他们的行为。即使是他们也因为不必要地发布和暴露了太多代码而出现了错误。*'
- en: '*Could we not write better code?*'
  id: totrans-split-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*难道我们不能写出更好的代码吗？*'
- en: '*There are those who think the biggest problem is the quality of the code,
    expressed in terms of the density of bugs in it. There are many interesting things
    happening on this front, like the use of [memory safe languages](https://www.nsa.gov/Press-Room/Press-Releases-Statements/Press-Release-View/Article/3608324/us-and-international-partners-issue-recommendations-to-secure-software-products/)
    like [Rust](https://www.rust-lang.org/). Other languages are [also upping their
    security game](https://github.com/google/sanitizers/wiki/AddressSanitizer). [Fuzzers](https://en.wikipedia.org/wiki/Fuzzing)—test
    tools that automatically modify inputs to computer programs to find weaknesses
    and bugs—are also getting ever more advanced.*'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*有人认为最大的问题是代码的质量，以代码中的错误密度来表达。在这方面正在发生许多有趣的事情，比如使用[内存安全语言](https://www.nsa.gov/Press-Room/Press-Releases-Statements/Press-Release-View/Article/3608324/us-and-international-partners-issue-recommendations-to-secure-software-products/)如[Rust](https://www.rust-lang.org/)。其他语言也在[提升它们的安全性](https://github.com/google/sanitizers/wiki/AddressSanitizer)。[Fuzzer](https://en.wikipedia.org/wiki/Fuzzing)—自动修改计算机程序输入以查找弱点和错误的测试工具—也变得越来越先进。*'
- en: '*But many security problems are in the logic underlying the code. For example,
    the Barracuda email exploit originated in a third-party library that would actually
    [execute code](https://www.cvedetails.com/cve/CVE-2023-7101/) in Excel spreadsheets
    when they were scanned for viruses. Wiping out all the bugs in your code won’t
    save you from the decision to implement a feature to automatically execute code
    embedded in documents.*'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*但许多安全问题是在代码逻辑下的逻辑问题。例如，巴拉库达电子邮件漏洞起源于一个第三方库，在扫描病毒时实际上会在Excel电子表格中[执行代码](https://www.cvedetails.com/cve/CVE-2023-7101/)。消灭代码中所有的漏洞不会拯救你免受决定实现在文档中嵌入的代码自动执行功能的影响。'
- en: '*The state of shipping software*'
  id: totrans-split-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*软件发布的状态*'
- en: '*Another problem is that we often don’t know what code we are actually shipping.
    Software has gotten *huge*. In 1995 [Niklaus Wirth](https://en.wikipedia.org/wiki/Niklaus_Wirth)
    lamented that software had grown to megabytes in size. In his article “A Plea
    for Lean Software,” he went on to describe his [Oberon operating system](https://en.wikipedia.org/wiki/Oberon_(operating_system)),
    which was only 200 kilobytes, including an editor and a compiler. There are now
    projects that have more than 200 KB for their configuration files alone.*'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*另一个问题是，我们经常不知道我们实际上正在发布什么代码。软件已经变得*巨大*。1995年，[尼克劳斯·维尔特](https://en.wikipedia.org/wiki/Niklaus_Wirth)对软件已经增长到几兆字节感到痛心。在他的文章“呼吁精简软件”中，他描述了他的[欧柏隆操作系统](https://en.wikipedia.org/wiki/Oberon_(operating_system))，这个操作系统仅有200千字节，包括一个编辑器和一个编译器。现在有些项目仅在配置文件中就有超过200千字节。*'
- en: '*A typical app today is built on [Electron JS](https://www.electronjs.org/),
    a framework that incorporates both Chromium (“Chrome”) and Node.JS, which provides
    access to tens of thousands of software packages for JavaScript. I estimate just
    using Electron JS entails at least 50 million lines of code if you include dependencies.
    Perhaps more. The app meanwhile likely pulls in hundreds or thousands of helper
    packages. Many packages used will also, by default, snitch on your users to advertisers
    and other data brokers. Dependencies pull in further dependencies, and exactly
    what gets included in the build can change on a daily basis, and no one really
    knows.*'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*如今的典型应用程序基于[Electron JS](https://www.electronjs.org/)，这是一个框架，集成了Chromium（“Chrome”）和Node.JS，为JavaScript提供了数以万计的软件包。我估计，仅仅使用Electron
    JS，如果包括依赖关系，就意味着至少有 5000 万行代码。可能更多。与此同时，该应用程序可能还会引入数百或数千个辅助软件包。许多使用的软件包默认会向广告商和其他数据经纪人告密用户。依赖关系又会引入更多的依赖关系，到底哪些内容会被包含在构建中，每天都可能会有所变化，真正了解的人其实并不多。*'
- en: '*If this app controls anything in your house, it will also connect to a software
    stack over at [Amazon](https://spectrum.ieee.org/tag/amazon), probably also powered
    by Node.js, also pulling in many dependencies.*'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果此应用程序控制您家中的任何设备，它还将连接到一个软件堆栈，可能也是由[亚马逊](https://spectrum.ieee.org/tag/amazon)提供支持，可能也是由Node.js驱动，同时还会引入许多依赖项。*'
- en: '*We are likely looking at over 50 million active lines of code to open a garage
    door….*'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们可能需要超过 5000 万行活动代码来打开一个车库门……*'
- en: '*But wait, there’s more. We used to ship software as the output of a compiler,
    or perhaps as a bunch of files to be interpreted. Such software then had to be
    *installed* and *configured* to work right. Getting your code packaged to ship
    like this is a lot of work. But it was good work since it forced people to think
    about what was in their “package.” This software package would then integrate
    with an operating system and with local services, based on the configuration.*'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*但是，请等一下，还有更多。我们曾经将软件作为编译器的输出或者可能是一堆文件进行解释。这样的软件然后必须进行*安装*和*配置*才能正常工作。将您的代码打包以像这样进行部署，是一项繁重的工作。但这是一项好工作，因为它迫使人们思考他们“包裹”中包含了什么。然后这个软件包会根据配置与操作系统和本地服务集成。*'
- en: '*Since the software ran on a different computer than the one it was developed
    on, people really had to know what they shipped and think it through. And sometimes
    it didn’t work, leading to the joke where a developer tells the operations people,
    “Well, it works on my system,” and the retort “Then back up your email, we’re
    taking your laptop into production!”*'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*由于软件在不同的计算机上运行，而不是在开发时的计算机上运行，人们确实需要知道他们打包了什么并进行深思熟虑。有时它确实不起作用，这就引出了一个笑话，开发人员告诉运维人员，“在我的系统上可以运行”，然后回应道：“那就备份你的电子邮件，我们要把你的笔记本电脑放到生产环境中！”*'
- en: '*This used to be a joke, but these days we often ship software as containers,
    shipping not only the software itself but also including operating system files
    to make sure the software runs in a well-known environment. This frequently entails
    effectively shipping a complete computer disk image. This again vastly expands
    the amount of code being deployed. Note that you can do good things with containers
    like Docker (see below), but there are a lot of images over 350 MB on the [Docker
    Hub](https://hub.docker.com/explore).*'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*这曾经是个笑话，但如今我们经常将软件打包为容器进行部署，不仅包括软件本身，还包括操作系统文件，以确保软件在已知环境中运行。这通常意味着实际上要打包一个完整的计算机磁盘镜像。这再次大大扩展了部署的代码量。请注意，你可以利用像
    Docker（见下文）这样的容器做一些好事情，但[Docker Hub](https://hub.docker.com/explore)上有很多超过 350
    MB 的镜像。*'
- en: '*Add it all up and we are likely looking at over 50 million active lines of
    code to open a garage door, running several operating-system images on multiple
    servers.*'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*把这些加起来，我们可能需要超过 5000 万行活动代码来打开一个车库门，这些代码在多个服务器上运行多个操作系统映像。*'
- en: '*Now, even if all the included dependencies are golden, are we sure that their
    security updates are making it to your garage door opener app? I wonder how many
    Electron apps are still shipping with the [image processing bug](https://www.schneier.com/blog/archives/2023/09/critical-vulnerability-in-libwebp-library.html)
    that had Google and Apple scramble to put out updates last year. We don’t even
    know.*'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*现在，即使所有包含的依赖项都是黄金标准，我们是否确定它们的安全更新已经到达你的车库门控应用程序？我想知道有多少Electron应用程序仍然在使用去年使Google和Apple赶紧发布更新的[图像处理漏洞](https://www.schneier.com/blog/archives/2023/09/critical-vulnerability-in-libwebp-library.html)。我们甚至不知道。*'
- en: '*But even worse, it is a known fact that all these dependencies are *not* golden.
    The Node.js ecosystem has a [comical history](https://thehackernews.com/2023/02/researchers-hijack-popular-npm-package.html)
    of package repositories [being taken over](https://snyk.io/blog/npm-security-preventing-supply-chain-attacks/),
    hijacked, or resurrected under the same name by someone else, someone with nefarious
    [plans for your security](https://www.theregister.com/2023/06/19/npm_s3_buckets_malware/).
    [PyPI](https://www.theregister.com/2023/06/02/novel_pypi_attack_reversinglabs/)
    (a Python counterpart of Node.js) has suffered from [similar problems](https://www.theregister.com/2023/01/04/pypi_pytorch_dependency_attack/).
    Dependencies always need scrutiny, but no one can reasonably be expected to [check
    thousands of them frequently](https://medium.com/graph-commons/analyzing-the-npm-dependency-network-e2cf318c1d0d).
    But we prefer not to think about this. (Note that you should also not overshoot
    and needlessly reimplement everything yourself to prevent dependencies. There
    are very good modules that [likely are more secure](https://sqlite.org/) than
    what you could type in on your own.)*'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: '*The world is shipping far too much code where we don’t even know what we ship
    and we aren’t looking hard enough (or at all) at what we *do* know we ship.*'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: '*You *can* write lean code today*'
  id: totrans-split-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Writing has been called the process by which you find out you don’t [know
    what you are talking about](https://fs.blog/writing-to-think/). Actually doing
    stuff, meanwhile, is the process by which you find out you also did not know what
    you were writing about.*'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: '*In a small reenactment of Wirth’s Oberon Project, I too wrote some code to
    prove a point, and to reassure myself I still know what I am talking and writing
    about. Can you still make useful and modern software the old way? I decided to
    try to create a minimalistic but full-featured image-sharing solution that I could
    trust.*'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: '*Trifecta is the result. It is [actual stand-alone software](https://berthub.eu/articles/trifecta/)
    that lets you use a browser to drag and drop images for easy sharing. It has pained
    me for years that I had to use [imgur](https://imgur.com/) for this purpose. Not
    only does imgur install lots of cookies and trackers in my browser, I also force
    these trackers onto the people who view the images that I share. If you want to
    self-host a Web service like this, you also don’t want to get hacked. Most image-sharing
    solutions I found that you could run yourself are based on huge frameworks that
    I don’t trust too much for the reasons outlined above.*'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: '*So, also to make a point, I decided to create a minimalistic but also useful
    image-sharing solution that I could trust. And more important, that other people
    could trust as well, because you can check out all Trifecta’s code within a few
    hours. It consists of [1,600 lines of new source code](https://berthub.eu/articles/posts/trifecta-technology),
    plus around five important dependencies.*'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: '*You end up with a grand total of 3 megabytes of code.*'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: '*To contrast, [one other image-sharing solution](https://github.com/CaramelFur/Picsur/pkgs/container/picsur)
    ships as a 288-MB Docker image, although admittedly it looks better and has some
    more features. But not 285 MB worth of them. Another comparison is [this Node-based
    picture-sharing solution](https://github.com/SashenJayathilaka/Photo-Sharing-Application),
    which clocks in at 1,600 dependencies, apparently totaling over 4 million lines
    of JavaScript.*'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: '*The world ships too much code, most of it by third parties, sometimes unintended,
    most of it uninspected.*'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: '**Note that Trifecta is not intended as a public site where random people can
    share images, as that does not tend to end well. It is however very suitable for
    company or personal use. You can read more about the project [here](https://berthub.eu/articles/trifecta),
    and there is also [a page](https://berthub.eu/articles/posts/trifecta-technology)
    about the technology used to deliver such a tiny self-contained solution.**'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: '**Response to Trifecta**'
  id: totrans-split-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**This has been rather interesting. The most common response to Trifecta so
    far has been that I should use a whole bag of Amazon Web Services to deploy it.
    This is an exceedingly odd response to a project with the clearly stated goal
    of providing stand-alone software that does not rely on external services. I’m
    not sure what is going on here.**'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: '**Another reaction has been that I treat Docker unfairly, and that you could
    definitely use containers for good. And I agree wholeheartedly. But I also look
    at what people are actually doing (also with other forms of containers or virtual
    machines), and it’s not so great.**'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: '**I want to end this post with some observations from [Niklaus Wirth’s 1995
    paper](https://cr.yp.to/bib/1995/wirth.pdf):**'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: '**“To some, complexity equals power. (…) Increasingly, *people seem to misinterpret
    complexity as sophistication*, which is baffling—the incomprehensible should cause
    suspicion rather than admiration.”**'
  id: totrans-split-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**I’ve similarly observed that some people prefer complicated systems. As [Tony
    Hoare](https://en.wikipedia.org/wiki/Tony_Hoare) noted long ago, “[T]here are
    two methods in software design. [One is to make the program so simple, there are
    obviously no errors](https://dl.acm.org/doi/pdf/10.1145/1283920.1283936). The
    other is to make it so complicated, there are no obvious errors.” If you can’t
    do the first variant, the second way starts looking awfully attractive perhaps.**'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: '**Back to Wirth:**'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: '**“Time pressure is probably the foremost reason behind the emergence of bulky
    software. The time pressure that designers endure discourages careful planning.
    It also discourages improving acceptable solutions; instead, it encourages quickly
    conceived software additions and corrections. Time pressure gradually corrupts
    an engineer’s standard of quality and perfection. It has a detrimental effect
    on people as well as products.”**'
  id: totrans-split-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Why spend weeks paring down your software when you can also ship a whole
    pre-installed operating-system image that just works?**'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: '**“The plague of software explosion is not a ‘law of nature.’ It is avoidable,
    and it is the software engineer’s task to curtail it.”**'
  id: totrans-split-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**If this is indeed on the shoulders of software people, we should perhaps
    demand more time for it.**'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: '**The world ships too much code, most of it by third parties, sometimes unintended,
    most of it uninspected. Because of this, there is a huge *attack surface* full
    of mediocre code. Efforts are ongoing to improve the quality of code itself, but
    many exploits are due to logic fails, and less progress has been made scanning
    for those. Meanwhile, great strides could be made by paring down just how much
    code we expose to the world. This will increase time to market for products, but
    legislation is around the corner that should force vendors to take security more
    seriously.**'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: '**Trifecta is, like Wirth’s Oberon Project mentioned above, meant as a proof
    that you can deliver a lot of functionality even with a limited amount of code
    and dependencies. With effort and legislation, maybe the future could again bring
    sub-50-million-line garage-door openers. Let’s try to make it happen.**'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: '**From Your Site Articles**'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: '**Related Articles Around the Web**'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
