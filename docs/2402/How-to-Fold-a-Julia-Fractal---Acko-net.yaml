- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:02:42'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:02:42
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: How to Fold a Julia Fractal — Acko.net
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何折叠朱利亚分形 — Acko.net
- en: 来源：[https://acko.net/blog/how-to-fold-a-julia-fractal/](https://acko.net/blog/how-to-fold-a-julia-fractal/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://acko.net/blog/how-to-fold-a-julia-fractal/](https://acko.net/blog/how-to-fold-a-julia-fractal/)
- en: We'll start with the classic real number line, marked at the integer positions,
    and poke around.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从经典的实数线开始，标记整数位置，并探索一番。
- en: We imagine the line continues to the left and right indefinitely.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想象线条无限延伸到左右两侧。
- en: 'But there''s a problem with this visualization: by picturing numbers as points,'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但这种可视化方法存在一个问题：通过将数字视为点来描绘，
- en: it's not clear how they act upon each other.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 它们如何相互作用并不清楚。
- en: For example, the two adjacent numbers $ \class{blue}{2} + \class{green}{3} $
    sum to $ \class{red}{5} $ …
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，两个相邻的数 $ \class{blue}{2} + \class{green}{3} $ 的和为 $ \class{red}{5} $ …
- en: … but the similarly adjacent pair $ \class{blue}{-2} + \class{green}{-1} = \class{red}{-3}
    $.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: … 但是类似的相邻对 $ \class{blue}{-2} + \class{green}{-1} = \class{red}{-3} $。
- en: We can't easily spot where the red point is going to be based on the blue and
    green.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能轻易地根据蓝色和绿色箭头推测红色点的位置。
- en: A better solution is to represent our numbers using arrows instead, or *vectors*.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的解决方案是使用箭头而不是点来表示我们的数字，或者*向量*。
- en: Each arrow represents a number through its length, pointing right/left for positive/negative.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每个箭头代表一个数，通过其长度表示，向右/向左指向正数/负数。
- en: The nice thing about arrows is that you can move them around without changing
    them.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头的好处是你可以随意移动它们而不改变它们。
- en: To add two arrows, just lay them end to end. You can easily spot why $ \class{blue}{-2}
    + \class{green}{-1} = \class{red}{-3} $ …
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加两个箭头，只需将它们端对端放置。你可以轻松地看出为什么 $ \class{blue}{-2} + \class{green}{-1} = \class{red}{-3}
    $ …
- en: … and why $ \class{blue}{2} + \class{green}{3} = \class{red}{5} $, similarly.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: … 以及为什么 $ \class{blue}{2} + \class{green}{3} = \class{red}{5} $，类似的情况。
- en: As long as we apply positives and negatives correctly, everything still works.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 只要我们正确应用正数和负数，一切仍然有效。
- en: Now let's examine multiplication. We're going to start with $ \class{blue}{1}
    $ and then we'll multiply it by $ \class{green}{1.5} $ repeatedly.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看乘法。我们将从 $ \class{blue}{1} $ 开始，然后反复乘以 $ \class{green}{1.5} $。
- en: With every multiplication, the vector gets longer by 50 percent.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每次乘法后，向量的长度增加了50%。
- en: These vectors represent the numbers $ \class{red}{1}, \class{red}{1.5}, \class{red}{2.25},
    \class{red}{3.375} $, $ \class{red}{5.0625} $, a nice exponential sequence.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些向量代表的数字是 $ \class{red}{1}, \class{red}{1.5}, \class{red}{2.25}, \class{red}{3.375},
    \class{red}{5.0625} $，一个不错的指数序列。
- en: Now we're going to do the same, but multiplying by the negative, $ \class{green}{-1.5}
    $, repeatedly.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要做同样的事情，但是乘以负数，$ \class{green}{-1.5} $，重复进行。
- en: The vectors still grow by 50%, but they also flip around, alternating between
    positive and negative.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些向量仍然增长了50%，但它们也会翻转，交替正负。
- en: These vectors represent the sequence $ \class{red}{1}, \class{red}{-1.5}, \class{red}{2.25},
    \class{red}{-3.375}, \class{red}{5.0625} $.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些向量代表的序列是 $ \class{red}{1}, \class{red}{-1.5}, \class{red}{2.25}, \class{red}{-3.375},
    \class{red}{5.0625} $。
- en: But there's another way of looking at this. What if instead of flipping from
    positive to negative, passing through zero, we went around instead, by rotating
    the vector as we're growing it?
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但还有另一种看待这个问题的方式。如果我们不是从正数到负数再经过零点翻转，而是在增长的同时旋转向量呢？
- en: 'We''d get the same numbers, but we''ve discovered something remarkable: a way
    to enter and pass through the netherworld around the number line. The question
    is, is this mathematically sound, or plain non-sense?'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了相同的数字，但是我们发现了一些非常奇妙的东西：一种进入并通过数轴周围的方式。问题是，这在数学上是合理的，还是纯粹是无意义的？
- en: The challenge is to come up with a consistent rule for applying these rotations.
    We start with normal arithmetic. Multiplying by a positive didn't flip the sign,
    so we say we rotated by $ 0^\circ $. Multiplying by a negative flips the sign,
    so we rotated by $ \class{green}{180^\circ} $. The lengths are multiplied normally
    in both cases.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 挑战在于找到一致的规则来应用这些旋转。我们从正常的算术开始。乘以正数不会翻转符号，所以我们说我们旋转了 $ 0^\circ $。乘以负数会翻转符号，所以我们旋转了
    $ \class{green}{180^\circ} $。在两种情况下，长度都会正常相乘。
- en: Now suppose we pick one of the in-between nether-numbers, say the vector of
    length $ 1.5 $, at a $ 90^\circ $ angle. What does that mean? That's what we're
    trying to find out! We'll write that as $ \class{green}{1.5 \angle 90^\circ} $
    (*1.5 at 90 degrees*). It could make sense to say that multiplying by this number
    should rotate by $ \class{green}{90^\circ} $ while again growing the length by
    50%.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: 'This creates the spiral of points: $ \class{red}{1 \angle 0^\circ} $, $ \class{red}{1.5
    \angle 90^\circ} $, $ \class{red}{2.25 \angle 180^\circ} $, $ \class{red}{3.375
    \angle 270^\circ} $, $ \class{red}{5.0625 \angle 360^\circ} $. Three of those
    are normal numbers: $ +1 $, $ -2.25 $ and $ +5.0625 $, lying neatly on the real
    number line. The other two are new numbers conjured up from the void.'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: Let's examine this rotation more. We can pick $ 1 $ at a $ \class{green}{45^\circ}
    $ angle. Multiplying by a $ 1 $ probably shouldn't change a vector's length, which
    means we'd get a pure rotation effect.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: By multiplying by $ \class{green}{1 \angle 45^\circ} $, we can rotate in increments
    of $ 45^\circ $.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: It takes 4 multiplications to go from $ +1 $, around the circle of ones, and
    back to the real number $ -1 $.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: And that's actually a remarkable thing, because it means our invented rule has
    created a square root of $ -1 $.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: It's the number $ \class{green}{1 \angle 90^\circ} $.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: If we multiply it by itself, we end up at angle $ \class{green}{90} + \class{green}{90}
    = \class{blue}{180^\circ} $, which is $ \class{blue}{-1} $ on the real line.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: But actually, the same goes for $ \class{green}{1 \angle 270^\circ} $.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: When we multiply it by itself, we end up at angle $ \class{green}{270} + \class{green}{270}
    = \class{blue}{540^\circ} $. But because we went around the circle once, that's
    the same as rotating by $ \class{blue}{180^\circ} $. So that's also equal to $
    \class{blue}{-1} $.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Or we could think of $ +270^\circ $ as $ -90^\circ $, and rotate the other
    way. It works out just the same. This is quite remarkable: our rule is consistent
    no matter how many times we''ve looped around the circle.'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: Either way, $ \class{blue}{-1} $ has two square roots, separated by $ 180^\circ
    $, namely $ \class{green}{1 \angle 90^\circ} $ and $ \class{green}{1 \angle 270^\circ}
    $.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: This is analogous to how both $ 2 $ and $ -2 $ are square roots of $ 4 $.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: 'Complex multiplication can then be summarized as: *angles add up, lengths multiply*,
    taking care to preserve clockwise and counterwise angles. Above, we multiply two
    random complex numbers a and b to get c.'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: When we start changing the vectors, c turns along, being tugged by both a and
    b's angles. It wraps around the circle, while its length changes. Hence, complex
    numbers like to turn, and it's this rule that separates them from ordinary vectors.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: We can then picture the complex plane as a grid of concentric circles. There's
    a circle of ones, a circle of twos, a circle of one-and-a-halfs, etc. Each number
    comes in many different versions or flavors, one positive, one negative, and infinitely
    many others in between, at arbitrary angles on both sides of the circle.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Which brings us to our reluctant and elusive friend, $ \class{blue}{i} $. This
    is the proper name for $ \class{blue}{1 \angle 90^\circ} $, and the way complex
    numbers are normally introduced: $ i^2 = -1 $. The magic is that we can put a
    complex number anywhere a real number goes, and the math still works out, oddly
    enough. We get complex answers about complex inputs.'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Complex numbers are then usually written as the sum of their (real) X coordinate,
    and their (imaginary) Y coordinate, much like ordinary 2D vectors. But this is
    misleading: the ugly number $ \class{red}{\frac{\sqrt{3}}{2} + \frac{1}{2}i }
    $ is actually just $ \class{green}{1 \angle 30^\circ} $ in disguise, and it acts
    more like a $ 1 $ than a $ \frac{1}{2} $ or $ \frac{\sqrt{3}}{2} $. While knowing
    how to convert between the two is required for any real calculations, you can
    cheat by doing it visually.'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: But looking at individual vectors only gets us so far. We study functions of
    real numbers by looking at a graph that shows us every output for every input.
    To do the same for complex numbers, we need to understand how these numbers-that-like-to-turn,
    this field of vectors, change as a whole.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: '*Note: from now on, I''ll put $ +1 $, i.e. $ 0^\circ $ at the 12 o''clock position
    for simplicity.*'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: When we apply a square root, each vector shifts. But really, it's the entire
    fabric of the complex plane that's warping. Each circle has been squeezed into
    a half-circle, because all the angles have been halved—the opposite of squaring,
    i.e. doubling the angle. The lengths have had a normal square root applied to
    them, compressing the grid at the edges and bulging it in the middle.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: But remember how every number had two opposite square roots? This comes from
    the circular nature of complex math. If we take a vector and rotate it $ 360 ^\circ
    $, we end up in the same place, and the two vectors are equal. But after dividing
    the angles in half, those two vectors are now separated by only $ 180 ^\circ $
    and lie on opposite ends of the circle. In complex math, they can both emerge.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: Complex operations are then like folding or unfolding a piece of paper, only
    it's weird and stretchy and circular. This can be hard to grasp, but is easier
    to see in motion. To help see what's going on, I've cut the disc and separated
    the positive from the negative angles in 3D.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: When we square our numbers to undo the square root, the angles double, folding
    the plane in on itself. The lengths are also squared, restoring the grid spacing
    to normal.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: After squaring, each square root has now ended up on top of its identical twin,
    and we can merge everything back down to a flat plane. Everything matches up perfectly.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: Thus the square root actually looks like this. New numbers flow in from the
    'far side' as we try and shear the disc apart. The complex plane is stubborn and
    wants to stay connected, and will fold and unfold to ensure this is always the
    case. This is one of its most remarkable properties.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此平方根实际上看起来像这样。新的数字从“远方”流入，当我们试图将圆盘分开时。复数平面很顽固，希望保持连接，并将折叠和展开确保这一点始终成立。这是它最显著的特性之一。
- en: There's no limit to this folding or unfolding. If we take every number to the
    fourth power, angles are multiplied by four, while lengths are taken to the fourth
    power. This results in 4 copies of the plane being folded into one.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这种折叠或展开没有限制。如果我们将每个数取四次方，角度乘以四，长度取四次方。这导致平面的四个副本被折叠成一个。
- en: However, things are not always so neat. What happens if we were to take everything
    to an irrational power, say $ \frac{1}{\sqrt{2}} $? Angles get multiplied by $
    0.707106... $, which means a rotation of $ 360^\circ $ now becomes $ \sim 254.56^\circ
    $.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，情况并非总是如此整洁。如果我们把所有东西都提升到一个无理数幂，比如 $ \frac{1}{\sqrt{2}} $，角度将乘以 $ 0.707106...
    $，这意味着 $ 360^\circ $ 的旋转现在变成大约 $ \sim 254.56^\circ $。
- en: Because no multiple of $ 360 $ is divisible by $ \frac{1}{\sqrt{2}} $, the circular
    grid never matches up with itself again no matter how far we extend it. Hence,
    this operation splits a single unique complex number into an infinite amount of
    distinct copies.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 $ 360 $ 的任意倍数都不能被 $ \frac{1}{\sqrt{2}} $ 整除，无论我们如何扩展，圆形网格永远不会再次完全重合。因此，这个操作将一个独特的复数分割成无限多个不同的副本。
- en: 'For any irrational power $ p $, there are an infinite number of solutions to
    $ z^p = c $, all lying on a circle. For a hint as to why this is so, we can look
    at Taylor series: an arbitrary function $ f(z) $ can be written as an infinite
    sum $ a + bz + cz^2 + dz^3 + ... \,$ When z is complex, such a sum doesn''t just
    represent a finite amount of folds, but a mindboggling infinite origami of complex
    space.'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任意的无理数幂 $ p $，方程 $ z^p = c $ 有无穷多个解，全部位于一个圆上。为了解释这种现象，我们可以看看泰勒级数：任意函数 $ f(z)
    $ 可以写成无限和 $ a + bz + cz^2 + dz^3 + ... \,$ 当 $ z $ 是复数时，这样的和不仅仅代表有限次的叠加，而是复杂空间的无限折叠。
