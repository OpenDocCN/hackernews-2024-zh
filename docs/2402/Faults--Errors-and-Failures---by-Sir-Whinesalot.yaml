- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:56:47'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Faults, Errors and Failures - by Sir Whinesalot
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://btmc.substack.com/p/you-cant-handle-errors](https://btmc.substack.com/p/you-cant-handle-errors)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Having somewhat recently become a father (one of the reasons my writing has
    slowed down to a crawl), I’ve had to deal with a very particular kind of error
    output: *crying*.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: 'From a computational perspective, it’s about equivalent to the following:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: Loud and unspecific. Well, at least with a baby there’s a limited set of reasons
    for crying, so fixing the issue amounts to tackling each possible cause until
    something works. Good luck debugging the error message above though.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: That got me thinking, how does one end up with a useless error message like
    the above? What facilities should programming languages provide to make it easy
    for developers to handle errors properly and conveniently?
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Originally this post was going to be a survey on error handling approaches,
    similar to my post on memory management approaches, but I decided against it in
    the end because I think looking at this problem from “outside the box” is important.
    Maybe someone can come up with a better way to “handle errors”.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Lets starts from the beginning. What do we mean by *error*? Unfortunately the
    term “error” is not used consistently in the literature, but we can use 3 related,
    commonly used terms from the study of fault tolerance to distinguish different
    meanings for the word error**:**
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: A **fault** (known colloquially as a *bug*), is static defect in software, meaning
    there’s some line (or lines) of code that are incorrect and will likely result
    in…
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **error**, which is an *unobserved*, incorrect internal state that will likely
    result in…
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **failure**, which is *observed*, incorrect behavior with respect to the software’s
    expected behavior.
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, consider the following piece of C# code:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There’s a *fault* in the loop stop condition (it should be `i < 5`), which will
    result in an *error* state of `i = 5`, which will trigger a *failure* when used
    to index the vector (throwing an IndexOutOfRange exception).
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: '**The error is not the exception (failure) nor is it the incorrect loop condition
    (fault).**'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: It is critical to understand this distinction for the rest of the article to
    make sense. Before tackling error *handling*, I’ll need to talk about error *prevention*,
    as the two often get mixed up, and it’ll help clarify what I mean.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: Testing, static type systems, model checking, sanitizers, fuzzers, and even
    certain language features like `foreach` loops (which would trivially avoid the
    problem above) are ways to indirectly *prevent* errors by either detecting or
    preventing *faults*.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: I’m 100% pro all of the above, they’re all great. If you’re not using them and
    you could, then you should. Your users will thank you. Your colleagues will thank
    you. Your future self will thank you.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: Errors are almost always the result of faults. Barring cosmic rays, hardware
    issues or really unusual race conditions between the application and the operating
    system, if an error occurs it is because *the programmer screwed up* and introduced
    a bug.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 错误几乎总是由于故障导致的。除了宇宙射线、硬件问题或应用程序与操作系统之间的非常不寻常的竞态条件之外，如果出现错误，则是*程序员搞砸了*，引入了一个错误。
- en: Some languages like Rust and Haskell have a reputation that “if the code compiles,
    it works”. They get this reputation because they excel at preventing common faults
    through a combination of a powerful static type system plus a culture of modeling
    function domains and codomains as accurately as possible.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: Rust和Haskell等某些语言以“如果代码编译通过，则代码运行正常”而闻名。它们之所以享有此声誉，是因为通过强大的静态类型系统和尽可能精确地建模函数域和值域的文化，它们擅长防止常见的错误。
- en: 'Consider the following function declaration (in Rust syntax):'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下函数声明（使用Rust语法）：
- en: '[PRE1]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The head function takes as input a vector of signed 64-bit integers and returns
    the first integer in that vector.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 头函数以带符号64位整数向量作为输入，并返回该向量中的第一个整数。
- en: This function’s domain is the set of all vectors of signed 64-bit integers and
    its codomain is the set of signed 64-bit integers. But this function declaration
    is “lying”, either about its domain, or about its codomain, depending on the point
    of view.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的域是所有带符号64位整数向量的集合，其值域是带符号64位整数的集合。但这个函数声明是“虚假的”，根据观点不同，要么关于其域，要么关于其值域。
- en: There is a hidden pre-condition that `v` is not empty. If `v` is empty, the
    function will panic.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个隐藏的前提条件，即`v`不为空。如果`v`为空，则该函数会发生恐慌。
- en: 'A “truthful” head function would have a different domain or codomain:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: “真实的”头函数会有不同的域或者值域：
- en: '[PRE2]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the first case, we tighten the domain, in the second case we loosen the codomain.
    Either way, we’ve made the function less likely to result in faults — by reminding
    the programmer of special cases they must take into account — at the cost of making
    it more annoying to use.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，我们限制了域，在第二种情况下我们放宽了值域。无论哪种方式，都使得函数更不容易出现错误——通过提醒程序员考虑他们必须考虑的特殊情况——但代价是使其更难使用。
- en: In the first case the caller must prove they have a NonEmptyVec by calling some
    explicit conversion function, while in the latter case the caller must always
    handle the “None” case even if they know for a fact that the vector is not empty.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，调用者必须通过调用某些显式转换函数来证明他们拥有一个非空向量，而在后一种情况下，即使他们确切知道向量不为空，调用者也必须始终处理“None”情况。
- en: If multiple properties are desired at the same time (e.g., expecting a non-empty
    even-length vector) the “truthful domain” approach quickly collapses without access
    to much more powerful type system features like [dependent types](https://en.wikipedia.org/wiki/Dependent_type)
    or [refinement types](https://en.wikipedia.org/wiki/Refinement_type), which in
    turn add a massive amount of complexity to the language and are, IMO, not worth
    it.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同时需要多个属性（例如，期望一个非空的偶数长度向量），则“真实的域”方法在没有更强大的类型系统特性支持（如[依赖类型](https://en.wikipedia.org/wiki/Dependent_type)或[精化类型](https://en.wikipedia.org/wiki/Refinement_type)）的情况下迅速崩溃，而这些特性又会给语言增加大量复杂性，而我认为这并不值得。
- en: 'The codomain can always be loosened with a single additional “invalid input”
    case, and various language facilities can be added to conveniently deal with this
    extra case, making it the better solution most of the time. For example, in C#
    nullable types have a great deal of features to make them as convenient to use
    as possible:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 值域总是可以通过单个额外的“无效输入”案例放宽，并且可以添加各种语言设施以便捷处理此额外案例，这在大多数情况下是更好的解决方案。例如，在C#中，可空类型具有大量功能，使其尽可能方便使用：
- en: flow typing, which propagates the result of null checks (i.e. an `int?` variable
    becomes `int` for as long as the result of the check is valid)
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流类型化，其传播空检查的结果（即`int?`变量在检查结果有效的时间内变为`int`）
- en: null-coalescing (`??` and `??=`) operators that make it convenient to replace
    a null value with an alternative value from the non-nullable type.
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空合并（`??` 和 `??=`）运算符使得用非空类型的替代值替换空值变得更加方便。
- en: null-conditional (`?.` and `?[]`) operators that allow “[flat-mapping](https://en.wikipedia.org/wiki/Monad_(functional_programming)#Definition)”
    operations from the non-nullable type into the nullable type.
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空条件（`?.` 和 `?[]`）运算符允许从非空类型到可空类型的“扁平映射”操作。
- en: The idea is to keep the advantage of truthful codomains (reminding the programmer
    to handle special cases) while mitigating the disadvantages (inconvenience).
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 思想是保持真实代码域的优势（提醒程序员处理特殊情况），同时减少不便之处。
- en: Even with as many fault prevention measures in place as possible, errors will
    always happen. Fault prevention amounts to ensuring known pre-and-post-conditions
    are properly handled, it can’t help with unexpected logic errors or lacking requirements.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 即使尽可能地采取了所有的故障预防措施，错误仍然会发生。故障预防是确保已知的前置和后置条件被正确处理，它无法处理意外的逻辑错误或缺失的需求。
- en: Unfortunately once an error occurs, it can’t be handled directly. Remember,
    an error is an *unobserved* incorrect state. The moment you *observe* an error,
    it has already turned into a *failure*.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，一旦错误发生，它无法直接处理。记住，错误是*未观察到*的不正确状态。一旦你*观察到*一个错误，它已经变成了一个*故障*。
- en: Consider for example a set of additions and subtractions applied to a variable
    where intermediate computations result in overflow but the final result does not.
    The intermediate overflowed values are *errors*, but there is no resulting *failure*.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 比如考虑对一个变量进行一系列加法和减法操作，在中间计算中会出现溢出，但最终结果没有。中间溢出的值是*错误*，但没有*故障*产生。
- en: If you actually checked for overflow each operation, you’d detect the error,
    triggering a *failure* and causing a panic or equivalent. And if, instead, you
    checked all the inputs to make sure they wouldn’t ever overflow, you’d be preventing
    a *fault*. Conflating faults and failures, I believe, has led to some really shitty
    language features that cause more faults and failures than they solve (e.g., **exceptions**,
    more on those in a bit)
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确实在每次操作后检查溢出，你将检测到错误，触发一个*故障*并引发恐慌或类似情况。而如果，相反地，你检查所有输入以确保它们永远不会溢出，你将预防一个*故障*。混淆故障和故障，我相信，已经导致了一些真的很糟糕的语言特性，比解决的故障和故障还要多（例如，**异常**，稍后再详细说明）。
- en: So errors cannot be handled, only failures can, and a failure is an observed
    incorrect behavior of the program. If the program is behaving incorrectly, what
    can you do about it?
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，错误不能被处理，只有故障可以，而故障是程序的观察到的不正确行为。如果程序的行为不正确，你能做什么呢？
- en: First, how does the program know it is behaving incorrectly? If the program
    can know it is behaving incorrectly, couldn’t the fault be prevented in the first
    place? ***Yes***. But for various reasons the cost of doing so may be too high.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，程序如何知道它的行为不正确？如果程序可以知道它的行为不正确，为什么不在第一次预防出现故障呢？***是的***。但因为各种原因，这样做的成本可能太高。
- en: An example would be needing to check after every arithmetic operation for overflow.
    I don’t mean the compiler inserting checks and triggering a failure, I mean the
    programmer explicitly checking for overflow after every arithmetic operation and
    handling that “special case” each and every time. Extremely annoying.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子就是需要在每次算术运算后检查是否溢出。我不是说编译器插入检查并触发一个故障，我是说程序员在每次算术运算后明确检查溢出并处理每一种“特殊情况”。非常令人恼火。
- en: Alternatively, the overflow-related faults could be prevented by using [arbitrary-precision
    arithmetic](https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic), which
    would instead have a computational cost and may result in a different kind of
    failure (out-of-memory).
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以通过使用[任意精度算术](https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic)来防止与溢出相关的故障，这将带来计算成本，并可能导致不同类型的故障（内存不足）。
- en: Compiler (or programmer) inserted checks are a means of computationally observing
    failures caused by unlikely (but otherwise expected) errors, in turn caused by
    faults that would be excessively costly to prevent. The most common example is
    array bounds checking.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器（或者程序员）插入的检查是一种计算方式，用来观察由于不太可能的（但本应预期的）错误导致的故障，这些错误本质上是因为防止其发生的成本过高。最常见的例子是数组边界检查。
- en: Note that these checks are **not** failure handling, they are a necessary step
    to detect the failure but actually handling it comes afterwards.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这些检查并不是故障处理，它们是检测故障的必要步骤，实际的处理是在其后进行。
- en: The most common response to observing a failure is to throw an exception. Exceptions
    unwind the stack until they hit a programmer-specified handler (i.e., a `try/catch`
    block) or a default handler that crashes the program and usually prints out a
    [stack trace](https://en.wikipedia.org/wiki/Stack_trace) to help debug the problem.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 观察到故障的最常见反应是抛出异常。异常会解开堆栈，直到它们遇到程序员指定的处理程序（即`try/catch`块）或默认处理程序使程序崩溃，并通常打印出[堆栈跟踪](https://en.wikipedia.org/wiki/Stack_trace)来帮助调试问题。
- en: The second most common approach is to abort the program, by sending it a signal
    that more often than not is caught by a default signal-handler, which will terminate
    the program and output a “useful” message like [Segmentation Fault](https://en.wikipedia.org/wiki/Segmentation_fault)
    (which is really a type of failure as defined above, don’t you hate inconsistent
    naming conventions?)
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种最常见的方法是通过向程序发送信号来中止程序，这种信号通常被默认信号处理程序捕获，该处理程序将终止程序并输出一个“有用”的消息，比如[分段错误](https://en.wikipedia.org/wiki/Segmentation_fault)（正如上述定义的一种失败，你是否讨厌不一致的命名约定？）
- en: Rust panics can be set to use an exception-like mechanism, to terminate the
    current thread, or to abort the program (sending it a signal as above).
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: Rust的panic可以设置为使用类似异常的机制，终止当前线程，或者中止程序（如上所述发送信号）。
- en: 'You’ll notice that all of the possibilities just crash the program by default.
    Before I discuss why, I need to point out that the following is *not* failure
    handling:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的可能性都默认使程序崩溃。在我讨论原因之前，我需要指出以下内容*并非*故障处理：
- en: '[PRE3]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In my opinion this is just a weird looking conditional for one particular “output
    value” of the File constructor. The “truthful” codomain of the File constructor
    includes additional cases that are “returned” as exceptions.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，这只是一个看起来奇怪的条件，针对文件构造函数的一个特定“输出值”。文件构造函数的“真实”值域包括作为异常“返回”的其他情况。
- en: Would you ever write code like the above to handle an array out of bounds situation?
    Right after you tried to index an array? What about division by zero? No, right?
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你会写类似上面的代码来处理数组越界的情况吗？就在你尝试索引数组之后？除以零呢？不会吧？
- en: Forgetting to handle a missing file is a fault, and catching that “output” is
    *not having that fault*. Using exceptions instead of properly modeling the function’s
    codomain has increased the likelihood of a fault and its corresponding failure
    by not reminding the programmer to handle a common failure case.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 忘记处理丢失的文件是一个错误，并且捕捉“输出”*不是没有那个错误*。使用异常而不是正确建模函数的值域，增加了故障发生的可能性及其相应的失败，因为没有提醒程序员处理常见的故障情况。
- en: I really dislike exceptions for mixing up these unrelated concerns.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的不喜欢异常，因为它们混淆了这些无关的问题。
- en: If you allow encoding different “error types” into your failure handling feature
    you’ve probably already screwed up. Let me explain.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你允许在故障处理功能中编码不同的“错误类型”，那你可能已经搞砸了。让我解释一下。
- en: 'Let me put it nice and clear:'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我说得明白点：
- en: Handling a failure means returning the program to a known, correct state.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 处理失败意味着将程序恢复到已知的正确状态。
- en: 'Remember the pipeline: Fault → Error → Failure. A fault is a bug in the program’s
    source code which causes the program to enter an incorrect unobserved state, which
    can then lead to a failure, which is observed incorrect behavior.'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 记住管道：故障 → 错误 → 失败。故障是程序源代码中的错误，导致程序进入不正确的未观察状态，然后可能导致失败，这是观察到的不正确行为。
- en: The job of a failure handler is to *get rid of the error*. Note that it’s not
    handling the error, what is being handled is the failure, the error that caused
    it is unknown. But the goal is, nonetheless, to get rid of the error, somehow.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 故障处理程序的任务是*消除错误*。请注意，它并非处理错误，而是处理失败，造成失败的错误是未知的。但目标无论如何都是消除错误。
- en: Consider an IndexOutOfBounds exception. If one happens, it’s because there is
    a bug in the program that resulted in some variable being set to an incorrect
    value, which then resulted in the observed incorrect behavior of trying to index
    an array out of bounds. What should the failure handler do?
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个数组越界异常。如果发生了这种情况，那是因为程序中存在一个错误，导致某个变量设置为错误值，进而导致尝试越界访问数组的不正确行为。故障处理程序应该做什么？
- en: First, a true failure handler won’t be anywhere near the actual index out of
    bounds situation, because if it was, you were just handling one of the possible
    “return values” of the indexing operation (preventing a fault), not actually handling
    a failure.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，一个真正的故障处理程序不会在实际的索引越界情况附近，因为如果是这样，你只是处理索引操作的可能“返回值”之一（防止故障），而不是真正处理故障。
- en: In a language with [algebraic effect handlers](https://en.wikipedia.org/wiki/Effect_system),
    the handler for the index out of bounds situation could “fix” the failure by resuming
    the program with a made up value for that index. Terrible idea, essentially replacing
    a failure with a new error. With exceptions you can’t even do that.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有[代数效果处理程序](https://en.wikipedia.org/wiki/Effect_system)的语言中，索引越界情况的处理程序可以通过使用虚构的值恢复程序来“修复”故障。这是个糟糕的主意，本质上是用新错误替换故障。使用异常你甚至不能做到这一点。
- en: No, a true failure handler is a piece of code that a programmer hopes never
    actually has to run! It’s the last line of defense. All that the failure handler
    knows is that some variable (no idea which) got set to a wrong value at some point
    (no idea where) that was then used to wrongly index an array (knows where, but
    can’t do anything about it).
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 不，一个真正的故障处理程序是程序员希望永远不会真正运行的一段代码！它是最后的防线。故障处理程序只知道某个变量（不知道哪个）在某个时刻（不知道在哪里）被设置为错误值，然后用于错误地索引数组（知道在哪里，但无法做任何处理）。
- en: Given the above, IndexOutOfBounds might as well have been PoopExplosion9000
    as far as the failure handler is concerned. The information is useful for the
    programmer, as is the stack trace, but it could just as well have been a text
    string in the assertion error message. The actual type of the exception is utterly
    useless for the purpose of failure handling (not for ghetto codomains, but you
    shouldn’t use exceptions for that in the first place).
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于上述情况，对于故障处理程序而言，IndexOutOfBounds就好像是PoopExplosion9000一样。这些信息对程序员有用，堆栈跟踪也有用，但它本可以作为断言错误消息中的文本字符串。异常的实际类型对于故障处理的目的是完全无用的（对于“贫民区”的情况不适用，但你不应该在第一时间使用异常）。
- en: While you can only handle failures (because only the failure is observed) getting
    rid of the failure by itself doesn’t do much good, there’s still the unobserved
    invalid state that led to it in the first place. But you can’t do anything about
    that invalid state directly, since you have no idea what it is or where it originated
    from.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你只能处理故障（因为只有故障是可观察到的），但仅仅通过消除故障本身并不能有多大帮助，仍然存在导致它的不可观察的无效状态，而且你不能直接处理该无效状态，因为你不知道它是什么或者它来自哪里。
- en: This is why the default handler for any sort of panic mechanism (exceptions,
    signals, etc.) is a full-on crash that spits out as much information as it can
    for the programmer to debug with. There’s nothing else it can do.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么任何一种恐慌机制（异常、信号等）的默认处理程序都是全面崩溃，尽可能多地为程序员提供调试所需的信息。它无法做其他事情。
- en: The only thing you can do is turn it off and on again.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你唯一能做的就是把它关掉然后再打开。
- en: Every failure handler that’s any better than the default is ultimately just
    decreasing the scope of what’s getting restarted or improving the usefulness of
    the info-dump.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个比默认值更好的故障处理程序最终都只是减少了重新启动的范围或者提高了信息转储的有用性。
- en: The choice of panic mechanism (exceptions, signals, terminating threads) essentially
    dictates the scope of what can be restarted. If restarting wasn’t the goal, then
    there would be no need for any mechanism beyond terminating the program outright.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 恐慌机制的选择（异常、信号、终止线程）基本上决定了可以重新启动的范围。如果重新启动不是目标，那么除了彻底终止程序之外就不需要任何机制了。
- en: Exceptions let you restart at an arbitrary point in a function. This is less
    useful than it sounds because the error state may have occurred outside the handler’s
    restart point. You can only safely restart pure functions or those that work like
    [transactions](https://en.wikipedia.org/wiki/Transaction_processing).
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 异常允许你在函数的任意点重新启动。这听起来没那么有用，因为错误状态可能发生在处理程序的重新启动点之外。你只能安全地重新启动纯函数或那些像[事务](https://en.wikipedia.org/wiki/Transaction_processing)一样工作的函数。
- en: Restarting threads (particularly worker threads) is one of the best approaches
    if the threads don’t share mutable state. Erlang (and by extension Elixir) is
    built entirely around this idea, using [supervision trees](https://erlang.org/documentation/doc-4.9.1/doc/design_principles/sup_princ.html).
    Because Erlang was designed with failure handling in mind, it is an excellent
    fit for high-reliability systems.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 重启线程（特别是工作线程）是最佳方法之一，如果线程不共享可变状态。Erlang（及其衍生的 Elixir）完全围绕这一思想构建，使用[监督树](https://erlang.org/documentation/doc-4.9.1/doc/design_principles/sup_princ.html)。由于
    Erlang 设计时考虑了故障处理，因此非常适合高可靠性系统。
- en: The last case, sending a signal to a program, may sound like it doesn’t leave
    much room for “restarting” but that depends heavily on how the software works.
    If the program backs-up the users work every second to disk, then you can go back
    to a “known, correct state” by restarting the whole program and instructing it
    to load the user’s backed up work. You can also use this approach in a multi-process
    architecture.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一种情况，向程序发送信号，听起来似乎没有多少“重启”的余地，但这在很大程度上取决于软件的工作方式。如果程序每秒将用户工作备份到磁盘，那么你可以通过重启整个程序并指示其加载用户备份的工作来返回到“已知的正确状态”。你也可以在多进程架构中使用这种方法。
- en: Another software architecture that works well for restarting is the [Elm Architecture](https://guide.elm-lang.org/architecture/),
    since each “update” step can be cancelled. Alas, Elm itself lacks a nice failure
    handling mechanism to take advantage of this. Trying to avoid failures at all
    costs results in [this sort of nonsense](https://github.com/elm/core/issues/1072).
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个适合重启的软件架构是[Elm 架构](https://guide.elm-lang.org/architecture/)，因为每个“更新”步骤都可以被取消。可惜的是，Elm
    本身缺乏良好的故障处理机制来利用这一点。试图以任何代价避免故障会导致[这种胡言乱语](https://github.com/elm/core/issues/1072)。
- en: In all cases the hope is that the triggering of the fault is an uncommon occurrence,
    otherwise the program will end up in a pointless restart loop.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，希望触发故障是不常见的事件，否则程序将陷入无意义的重启循环。
- en: Unfortunately errors due to logic bugs may not result in a computationally observable
    failure. Think glitched out physics simulations for example. Just gotta wait for
    the user complaints to show up.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，由于逻辑错误，错误可能不会导致计算上可观察的失败。例如，想想那些故障的物理模拟。只能等待用户的投诉出现。
- en: Faults are bugs in the source code that lead to errors (unobserved invalid states)
    that wreck havoc until they trigger a failure (observed invalid behavior).
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 故障是源代码中导致错误（未观察到的无效状态），直到触发失败（观察到的无效行为）的错误。
- en: Many faults are easily preventable mistakes while others are too costly or annoying
    to prevent. Languages and tools that avoid or detect such mistakes are good.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 许多故障是容易预防的错误，而其他一些则太昂贵或令人讨厌以至于无法预防。能够避免或检测到这些错误的语言和工具都是好的。
- en: You can’t handle errors directly, you can only handle their corresponding failures.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能直接处理错误，只能处理它们对应的失败。
- en: Handling a failure always means restarting (part of) the program to get rid
    of the error, otherwise it’s not really handling a failure, it’s just working
    with an extra known “return value” of a function.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 处理失败总是意味着重启（部分）程序以消除错误，否则这实际上并不是处理失败，而是在函数的额外已知“返回值”上工作。
- en: You should architect your software in a way that allows for proper failure handling.
    Some languages (like Erlang) have excellent support for this. Others like Elm
    think it isn’t necessary (I disagree).
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该以允许适当故障处理的方式设计软件。一些语言（如 Erlang）对此有很好的支持。而像 Elm 这样的语言则认为这是不必要的（我不同意）。
- en: Exceptions are used as both a way to model extra “return values” of functions
    and as a failure handling mechanism, leading them to be lousy at both. Exceptions
    suck.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 异常被用作函数的额外“返回值”建模的一种方式，同时也是一种故障处理机制，这使得它们既不擅长前者也不擅长后者。异常糟透了。
- en: '* * *'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Side-Note:** I didn’t mention it within the text because it’s already too
    big and an incoherent mess, but there’s another nice approach to preventing faults
    than expanding a codomain with a “must handle invalid result” case to remind the
    programmer of the potential fault.'
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**旁注：** 我在文本中没有提到它，因为文本已经太大而且混乱不堪，但有另一种很好的方法来预防故障，而不是通过扩展定义域来“必须处理无效结果”以提醒程序员可能存在的故障。'
- en: You can also expand the codomain with an extra “harmless” result. A terrible
    idea for a library since it can’t possible know what such a harmless result would
    look like for the caller, but a perfectly valid approach for an application.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过额外的“无害”结果扩展函数域。对于库来说是一个可怕的想法，因为它不可能知道对于调用者来说这样一个无害的结果会是什么样子，但对于应用程序来说是一个完全有效的方法。
- en: For example, lets say your program loads up a bunch of textures at the start.
    Instead of the texture loading function returning an `Option<Texture>` that you
    then need to deal with everywhere, it could return just `Texture`, but use a special
    “Missing Texture” for textures that failed to load.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您的程序在开始时加载了一堆纹理。而不是纹理加载函数返回一个 `Option<Texture>`，然后您需要在各个地方处理它，它可以仅返回 `Texture`，但对于加载失败的纹理使用特殊的“缺失纹理”。
- en: The function would log somewhere which textures were missing, and just let the
    program proceed as normal, still letting the user do some work (if they didn’t
    need those textures). The program can check that errors were logged at some point
    and display them to the user in a separate codepath, while fixing the missing
    textures can be done by the user some other time. Check [this post by Ryan Fleury](https://www.rfleury.com/p/the-easiest-way-to-handle-errors)
    on the subject.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 函数应该记录某处缺少的纹理，并且允许程序继续正常运行，仍然让用户完成一些工作（如果他们不需要这些纹理的话）。程序可以检查是否在某个时刻记录了错误，并在一个单独的代码路径中向用户显示这些错误，与此同时，用户可以在其他时间修复缺失的纹理。查看关于此主题的[瑞安·弗卢里的这篇文章](https://www.rfleury.com/p/the-easiest-way-to-handle-errors)。
