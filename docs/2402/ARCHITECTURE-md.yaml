- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 13:20:20'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 13:20:20
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: ARCHITECTURE.md
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ARCHITECTURE.md
- en: 来源：[https://matklad.github.io/2021/02/06/ARCHITECTURE.md.html](https://matklad.github.io/2021/02/06/ARCHITECTURE.md.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://matklad.github.io/2021/02/06/ARCHITECTURE.md.html](https://matklad.github.io/2021/02/06/ARCHITECTURE.md.html)
- en: ARCHITECTURE.md Feb 6, 2021
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ARCHITECTURE.md Feb 6, 2021
- en: If you maintain an open-source project in the range of 10k-200k lines of code,
    I strongly encourage you to add an `ARCHITECTURE` document next to `README` and
    `CONTRIBUTING`. Before going into the details of why and how, I want to emphasize
    that this is not another “docs are good, write more docs” advice. I am pretty
    sloppy about documentation, and, e.g., I often use just “simplify” as a commit
    message. Nonetheless, I feel strongly about the issue, even to the point of pestering
    you :-)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你维护一个在10k-200k行代码范围内的开源项目，我强烈建议你在`README`和`CONTRIBUTING`旁边添加一个`ARCHITECTURE`文档。在详细说明原因和如何之前，我想强调这不是又一个“文档很好，写更多文档”的建议。我对文档问题非常马虎，例如，我经常只使用“简化”作为提交消息。尽管如此，我对这个问题感觉非常强烈，甚至可能烦扰到你
    :-)
- en: I have experience with both contributing to and maintaining open-source projects.
    One of the lessons I’ve learned is that the biggest difference between an occasional
    contributor and a core developer lies in the knowledge about the physical architecture
    of the project. Roughly, it takes 2x more time to write a patch if you are unfamiliar
    with the project, but it takes 10x more time to figure out *where* you should
    change the code. This difference might be hard to perceive if you’ve been working
    with the project for a while. If I am new to a code base, I read each file as
    a sequence of logical chunks specified in some pseudo-random order. If I’ve made
    significant contributions before, the perception is quite different. I have a
    mental map of the code in my head, so I no longer read sequentially. Instead,
    I just jump to where the thing should be, and, if it is not there, I move it.
    One’s mental map is the source of truth.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我有参与和维护开源项目的经验。我学到的经验之一是，偶尔贡献者和核心开发者之间最大的区别在于对项目物理架构的了解。大致上，如果你对项目不熟悉，编写一个补丁会花费2倍的时间，但要弄清楚*在哪里*修改代码则需要花费10倍的时间。如果你一直在项目上工作，这种差异可能很难感知到。如果我对一个代码库不熟悉，我会把每个文件都当作按照某种伪随机顺序指定的逻辑块的序列来阅读。如果我之前做出过重大贡献，感觉会大不一样。我脑海中有代码的地图，所以我不再按顺序阅读。相反，我只是跳到东西应该在的地方，如果不在那里，我就会移动它。一个人的心理地图是真相的来源。
- en: 'I find the `ARCHITECTURE` file to be a low-effort high-leverage way to bridge
    this gap. As the name suggests, this file should describe the high-level architecture
    of the project. Keep it short: every recurring contributor will have to read it.
    Additionally, the shorter it is, the less likely it will be invalidated by some
    future change. This is the main rule of thumb for `ARCHITECTURE`  — only specify
    things that are unlikely to frequently change. Don’t try to keep it synchronized
    with code. Instead, revisit it a couple of times a year.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现`ARCHITECTURE`文件是一个低成本高效益的方法来弥合这个差距。正如其名称所示，这个文件应该描述项目的高级架构。保持简洁：每个经常贡献者都将不得不阅读它。此外，它越短，就越不可能被未来的某些变化所废弃。这是`ARCHITECTURE`的主要经验法则
    —— 只指定那些不太可能经常变化的事物。不要试图让它与代码保持同步。相反，每年重新审视一两次。
- en: Start with a bird’s eye overview of the problem being solved. Then, specify
    a more-or-less detailed *codemap*. Describe coarse-grained modules and how they
    relate to each other. The codemap should answer “where’s the thing that does X?”.
    It should also answer “what does the thing that I am looking at do?”. Avoid going
    into details of *how* each module works, pull this into separate documents or
    (better) inline documentation. A codemap is a map of a country, not an atlas of
    maps of its states. Use this as a chance to reflect on the project structure.
    Are the things you want to put near each other in the codemap adjacent when you
    run `tree .`?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从宏观的角度概述要解决的问题。然后，指定一个更为详细的*代码图*。描述粗粒度模块以及它们之间的关系。代码图应该回答“做 X 的东西在哪里？”。它还应该回答“我正在查看的东西是做什么的？”。避免深入讨论每个模块的工作原理，将其提取到单独的文档中或（更好的是）内联文档中。代码图是一个国家的地图，而不是其各州地图的地图集。利用这个机会来反思项目结构。当您运行
    `tree .` 时，您想放在一起的东西在代码图中是否是相邻的？
- en: '*Do* name important files, modules, and types. Do *not* directly link them
    (links go stale). Instead, encourage the reader to use symbol search to find the
    mentioned entities by name. This doesn’t require maintenance and will help to
    discover related, similarly named things.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*要*命名重要的文件、模块和类型。不要直接链接它们（链接会失效）。相反，鼓励读者使用符号搜索按名称查找提及的实体。这不需要维护，并将有助于发现相关的、同名的事物。'
- en: 'Explicitly call-out architectural invariants. Often, important invariants are
    expressed as an *absence* of something, and it’s pretty hard to divine that from
    reading the code. Think about a common example from web development: nothing in
    the model layer specifically doesn’t depend on the views.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 明确指出架构不变性。通常，重要的不变性被表达为某种东西的*缺失*，从代码中很难推断出来。想想 Web 开发中的一个常见例子：模型层中没有特定于视图的依赖。
- en: Point out boundaries between layers and systems as well. A boundary implicitly
    contains information about the implementation of the system behind it. It even
    constrains all *possible* implementations. But finding a boundary by just randomly
    looking at the code is hard — good boundaries have measure zero.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 同样指出层次和系统之间的边界。边界隐含地包含了系统背后的实现信息。它甚至限制了所有*可能*的实现。但是通过随机查看代码来找到边界是困难的 —— 好的边界的测度为零。
- en: After finishing the codemap, add a separate section on cross-cutting concerns.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成代码图后，添加一个关于交叉关注点的单独部分。
- en: 'A good example of `ARCHITECTURE` document is this one from rust-analyzer: [architecture.md](https://github.com/rust-analyzer/rust-analyzer/blob/d7c99931d05e3723d878bea5dc26766791fa4e69/docs/dev/architecture.md).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个优秀的`架构`文档的好例子来自 rust-analyzer：[architecture.md](https://github.com/rust-analyzer/rust-analyzer/blob/d7c99931d05e3723d878bea5dc26766791fa4e69/docs/dev/architecture.md)。
