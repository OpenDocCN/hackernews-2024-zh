- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:03:05'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:03:05'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Useful Uses of cat
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有用的cat用法
- en: 来源：[https://two-wrongs.com/useful-uses-of-cat](https://two-wrongs.com/useful-uses-of-cat)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://two-wrongs.com/useful-uses-of-cat](https://two-wrongs.com/useful-uses-of-cat)
- en: When I write shell one-liners that transform the contents of some file, they
    often look something like
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我编写转换某些文件内容的Shell单行命令时，它们经常看起来像这样
- en: '[PRE0]'
  id: totrans-split-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is what a lot of people reflexively call a *useless use of cat*¹ And more
    thoughtful people will call a useless use of `grep` and `head` too because the
    Perl script can of course do both of those things. because `head` can take the
    file name as an argument and we don’t need the extra pipe and `cat` command. In
    fact, almost all commands can take the file name directly² For the ones that don’t,
    we can use input redirection and say e.g. `< access.log command`. and we only
    really need `cat` when we want to concatenate the contents of files.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是很多人本能地称之为*无用的cat用法*¹，而更深思熟虑的人会称之为对`grep`和`head`的无用用法，因为Perl脚本当然可以做这两件事。因为`head`可以接受文件名作为参数，我们不需要额外的管道和`cat`命令。实际上，几乎所有命令都可以直接接受文件名²。对于那些不能的命令，我们可以使用输入重定向，例如`< access.log command`。只有当我们想要连接文件内容时，我们才真正需要`cat`。
- en: But there’s a reason I do it anyway.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但我仍然有个理由这样做。
- en: 'I’m currently re-reading one of David Parnas’ classic papers on modularity³
    *Designing Software for Ease of Extension and Contraction*; Parnas; ieee Transactions
    on Software Engineering; 1979.. Every software engineer should read that stuff
    – it’s brilliant. For this article we’ll focus on one thing: we all know code
    changes should be isolated. For example, we should be able to add new functionality
    by just adding code, and not going in and changing existing code. Parnas phrases
    this in an interesting way.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我目前正在重读David Parnas的经典论文之一，关于模块化的《为了易于扩展和收缩而设计软件》³；Parnas；ieee软件工程交易；1979年。每个软件工程师都应该阅读这些东西
    - 它很精彩。对于本文，我们将专注于一件事：我们都知道代码更改应该是隔离的。例如，我们应该能够通过仅添加代码来添加新功能，而不是进入并更改现有代码。Parnas用一个有趣的方式表达了这一点。
- en: We must recognise that […] it is always possible to remove code from a program
    and have a runnable result, [and] any software system can be extended. The problem
    is that these subsets and extensions are not the programs that we would have designed
    if we had set out to design just that product. Further, the amount of work needed
    to obtain the product seems all out of proportion to the nature of the change.
  id: totrans-split-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们必须认识到[…]总是可以从程序中删除代码并得到可运行的结果，[而且]任何软件系统都可以扩展。问题在于这些子集和扩展不是我们如果从一开始就着手设计那个产品会设计出来的程序。此外，为了获得产品所需的工作量似乎与变更的性质不成比例。
- en: His idea of the ideal design is one where we can add or remove code and it still
    looks like the program was designed for the thing it’s doing now; i.e. you can’t
    tell that something else was added or removed later on, it all looks like part
    of the original design.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 他对理想设计的理念是，我们可以添加或删除代码，而看起来程序仍然像是为当前正在执行的任务设计的；即，你无法辨别后来添加或删除的东西，一切看起来都像是原始设计的一部分。
- en: Parnas lists four classes of problems we often encounter when trying to make
    changes. For this discussion, the second class is the relevant one.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: Parnas列出了我们在尝试进行更改时经常遇到的四类问题。对于本讨论，第二类问题是相关的。
- en: Many programs are structured as a chain of components, each receiving data from
    the previous component, processing it (and changing the format), before sending
    the data to the next program in the chain. If one component in this chain is not
    needed, that code is often hard to remove because the output of its predecessor
    is not compatible with the input requirements of its successor. A program that
    does nothing but change the format must be substituted.
  id: totrans-split-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 许多程序被构建为组件链，每个组件从前一个组件接收数据，处理数据（并更改格式），然后将数据发送到链中的下一个程序。如果这条链中的一个组件不需要，那么很难删除该代码，因为其前一个组件的输出与其后继组件的输入要求不兼容。必须替换一个仅仅改变格式的程序。
- en: One illustration would be a payroll program that assumed unsorted input. One
    of the components of the system accepts the unsorted input and produces output
    that is sorted by some key. If the firm adopts an office procedure that results
    in sorted input, this phase of the processing is unnecessary. To eliminate that
    program, one may have to add a program that transfers data from a file in the
    input format to a file in the format appropriate for the next phase.
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个例子将是一个假设未排序输入的工资程序。系统的一个组件接受未排序的输入并产生按某些键排序的输出。如果公司采用导致排序输入的办公程序，这个处理阶段是不必要的。为了消除该程序，可能需要添加一个程序，将输入格式文件中的数据转移到适合下一阶段的文件格式中。
- en: If we go back to our example of the shell one-liner and squint a little, then
    the string `access.log` is one input format (describing the file with the relevant
    contents) and the contents of the access log is a different input format. These
    are two representations of essentially the same thing.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回到我们的 shell 单行命令的例子并稍微眯起眼睛，那么字符串 `access.log` 是一个输入格式（描述具有相关内容的文件），而访问日志的内容是一个不同的输入格式。这些是基本上相同事物的两种表示。
- en: If we then eliminate the useless use of cat and write instead
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们然后消除无用的 `cat` 使用并改为写入
- en: '[PRE1]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'we find that `head` performs two responsibilities:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现 `head` 执行了两个职责：
- en: Converting the string `access.log` into the contents of the file; and
  id: totrans-split-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将字符串 `access.log` 转换为文件的内容；和
- en: Extracting the first 500 records of that content.
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取前 500 条记录的内容。
- en: When we’re satisfied with our Perl script, it’s not unreasonable to think that
    we might want to run it across the entire access log rather than just the first
    500 records. If we then delete only the `head` processing step we’re left without
    a step that transforms the string `access.log` into the contents of the access
    log. We can move that responsibility into the `grep` call, but this would mean
    we had to change some existing component in order to remove another – no good!
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们对我们的 Perl 脚本感到满意时，认为我们可能希望运行它跨整个访问日志，而不仅仅是前 500 条记录并不是不合理的。如果我们只删除 `head`
    处理步骤，我们将没有一个将字符串 `access.log` 转换为访问日志内容的步骤。我们可以将这个责任移到 `grep` 调用中，但这意味着我们必须改变一些现有的组件以删除另一个
    - 这样不行！
- en: The natural solution is a useless use of `cat`. With a separate processing step
    that converts the filename into the file contents, we can delete any intermediary
    processing steps and still be left with a functioning pipeline.⁴ We can also change
    the source data to e.g. a `zcat` or `curl` command. I frequently experiment with
    `cat canned_response.json` and then switch to `curl` once I’m satisfied with the
    one-liner. The process-to-process pipe is, in other words, the more flexible and
    decoupling interface compared to input redirection which implies a particular
    type of data source. People can complain all they want about it, but I will continue
    writing modular code. Even when it’s just shell one-liners.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 自然的解决方案是无用的 `cat`。通过单独的处理步骤，将文件名转换为文件内容，我们可以删除任何中间处理步骤，并且仍然保留一个有效的流水线。⁴ 我们也可以将源数据更改为例如
    `zcat` 或 `curl` 命令。我经常尝试使用 `cat canned_response.json`，然后一旦对这个单行命令感到满意，就切换到 `curl`。换句话说，过程到过程的管道与输入重定向相比更灵活和解耦，后者意味着特定类型的数据源。人们可以抱怨它，但我将继续编写模块化的代码。即使只是
    shell 的一行命令。
