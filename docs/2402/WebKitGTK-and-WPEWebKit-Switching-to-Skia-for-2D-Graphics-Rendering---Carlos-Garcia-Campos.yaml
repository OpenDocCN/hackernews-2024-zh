- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:02:29'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: WebKitGTK and WPEWebKit Switching to Skia for 2D Graphics Rendering | Carlos
    Garcia Campos
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://blogs.igalia.com/carlosgc/2024/02/19/webkit-switching-to-skia-for-2d-graphics-rendering/](https://blogs.igalia.com/carlosgc/2024/02/19/webkit-switching-to-skia-for-2d-graphics-rendering/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In recent years we have had an ongoing effort to improve graphics performance
    of the WebKit GTK and WPE ports. As a result of this we shipped features like
    threaded rendering, the DMA-BUF renderer, or proper vertical retrace synchronization
    (VSync). While these improvements have helped keep WebKit competitive, and even
    perform better than other engines in some scenarios, it has been clear for a while
    that we were reaching the limits of what can be achieved with a CPU based 2D renderer.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: There was an attempt at making Cairo support GPU rendering, which did not work
    particularly well due to the library being designed around stateful operation
    based upon the PostScript model—resulting in a convenient and familiar API, great
    output quality, but hard to retarget and with some particularly slow corner cases.
    Meanwhile, other web engines have moved more work to the GPU, including 2D rendering,
    where many operations are considerably faster.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: We checked all the available 2D rendering libraries we could find, but none
    of them met all our requirements, so we decided to try writing our own library.
    At the beginning it worked really well, with impressive results in performance
    even compared to other GPU based alternatives. However, it proved challenging
    to find the right balance between performance and rendering quality, so we decided
    to try other alternatives before continuing with its development. Our next option
    had always been Skia. The main reason why we didn’t choose Skia from the beginning
    was that it didn’t provide a public library with API stability that distros can
    package and we can use like most of our dependencies. It still wasn’t what we
    wanted, but now we have more experience in WebKit maintaining third party dependencies
    inside the source tree like ANGLE and libwebrtc, so it was no longer a blocker
    either.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: In December 2023 we made the decision of giving Skia a try internally and see
    if it would be worth the effort of maintaining the project as a third party module
    inside WebKit. In just one month we had implemented enough features to be able
    to run all MotionMark tests. The results in the desktop were quite impressive,
    getting double the score of MotionMark global result. We still had to do more
    tests in embedded devices which are the actual target of WPE, but it was clear
    that, at least in the desktop, with this very initial implementation that was
    not even optimized (we kept our current architecture that is optimized for CPU
    rendering) we got much better results. We decided that Skia was the option, so
    we continued working on it and doing more tests in embedded devices. In the boards
    that we tried we also got better results than CPU rendering, but the difference
    was not so big, which means that with less powerful GPUs and with our current
    architecture designed for CPU rendering we were not that far from CPU rendering.
    That’s the reason why we managed to keep WPE competitive in embeeded devices,
    but Skia will not only bring performance improvements, it will also simplify the
    code and will allow us to implement new features . So, we had enough data already
    to make the final decision of going with Skia.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: In February 2024 we reached a point in which our Skia internal branch was in
    an “upstreamable” state, so there was no reason to continue working privately.
    We met with several teams from Google, Sony, Apple and Red Hat to discuss with
    them about our intention to switch from Cairo to Skia, upstreaming what we had
    as soon as possible. We got really positive feedback from all of them, so we sent
    an email to the WebKit developers mailing list to make it public. And again we
    only got positive feedback, so we started to prepare the patches to import Skia
    into WebKit, add the CMake integration and the initial Skia implementation for
    the WPE port that already landed in main.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: We will continue working on the Skia implementation in upstream WebKit, and
    we also have plans to change our architecture to better support the GPU rendering
    case in a more efficient way. We don’t have a deadline, it will be ready when
    we have implemented everything currently supported by Cairo, we don’t plan to
    switch with regressions. We are focused on the WPE port for now, but at some point
    we will start working on GTK too and other ports using cairo will eventually start
    getting Skia support as well.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
