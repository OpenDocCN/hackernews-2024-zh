- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:03:30'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:03:30'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Remix Vite is Now Stable | Remix
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Remix Vite 现已稳定 | Remix
- en: 来源：[https://remix.run/blog/remix-vite-stable](https://remix.run/blog/remix-vite-stable)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://remix.run/blog/remix-vite-stable](https://remix.run/blog/remix-vite-stable)
- en: Today we’re excited to announce that support for [Vite](https://vitejs.dev)
    is now stable in Remix v2.7.0! After the [initial unstable release of Remix Vite](./remix-heart-vite),
    we’ve been hard at work refining and extending it over the past few months with
    help from all of our early adopters and community contributors.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们很高兴地宣布，在 Remix v2.7.0 中，[Vite](https://vitejs.dev) 的支持现在已经稳定！在[Remix Vite
    最初的不稳定发布](./remix-heart-vite)之后，我们在过去几个月中，通过所有早期采纳者和社区贡献者的帮助，不断改进和扩展了它。
- en: 'Here’s what we’ve been up to:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的工作成果：
- en: Let’s break down the most significant changes since our initial release.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析自我们最初发布以来的最重要变化。
- en: '[](#spa-mode)SPA mode'
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#spa-mode)SPA 模式'
- en: The most significant change we’ve made is so important that we’ll reserve discussing
    its impact on the React ecosystem for a later post.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的最重大的变化是如此重要，以至于我们将保留在后续文章中讨论它对 React 生态系统的影响。
- en: The short version is that Remix now supports building purely static sites that
    don’t require a JavaScript server in production, all while keeping the benefits
    of Remix’s file based route conventions, automatic code splitting, route module
    prefetching, head tag management and more.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 简短来说，Remix 现在支持构建纯静态站点，不需要在生产中使用 JavaScript 服务器，同时保持 Remix 的基于文件的路由约定、自动代码拆分、路由模块预取、头部标签管理等优点。
- en: This unlocks an entirely new migration path for [React Router](https://reactrouter.com)
    consumers to move to Remix without having to switch to a server-rendered architecture
    — which for many people isn’t even an option. And for anyone that wants to introduce
    a server to their Remix app in the future, the migration path is now much more
    straightforward.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这为[React Router](https://reactrouter.com)的消费者开辟了一条全新的迁移路径，可以在不切换到服务器渲染架构的情况下转移到
    Remix — 对许多人来说，这甚至不是一个选项。 而对于任何想要将服务器引入其 Remix 应用程序的人来说，现在的迁移路径变得更加简单直接。
- en: For more information, check out the [SPA mode documentation](https://remix.run/docs/future/spa-mode).
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请查阅[SPA 模式文档](https://remix.run/docs/future/spa-mode)。
- en: '[](#basename-support)Basename support'
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#basename-support)基础路径支持'
- en: '[React Router supports setting a basename for your app](https://reactrouter.com/en/main/router-components/router),
    allowing you to nest your entire application within a subpath — but this feature
    was [notably absent in Remix](https://github.com/remix-run/remix/discussions/2891).
    While it was possible to work around this by manually prefixing routes and links,
    it obviously wasn’t as convenient as setting a single config value.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[React Router 支持为您的应用设置基础路径](https://reactrouter.com/en/main/router-components/router)，允许您在子路径中嵌套整个应用程序
    — 但这个功能在[Remix 中显然是缺失的](https://github.com/remix-run/remix/discussions/2891)。虽然可以通过手动添加路由和链接来解决这个问题，但显然不如设置一个单一的配置值方便。'
- en: With the move to Vite, the lack of basename support became more apparent since
    [Vite exposes its own “base” option](https://vitejs.dev/config/shared-options.html#base).
    Many consumers mistakenly assumed that this would work with Remix, but this option
    is really the same as [Remix’s “publicPath” option](https://remix.run/docs/en/main/file-conventions/remix-config#publicpath).
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 随着转向 Vite，缺乏基础路径支持变得更加明显，因为[Vite 暴露了自己的“base”选项](https://vitejs.dev/config/shared-options.html#base)。
    许多消费者错误地认为这将与 Remix 一起工作，但这个选项实际上与[Remix 的“publicPath”选项](https://remix.run/docs/en/main/file-conventions/remix-config#publicpath)相同。
- en: In order to avoid this confusion, there is no longer a `publicPath` option (you
    should use Vite’s `base` option instead), and the Remix Vite plugin now has a
    brand new `basename` option.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种混淆，不再提供`publicPath`选项（您应该使用 Vite 的`base`选项替代），而 Remix Vite 插件现在有了全新的`basename`选项。
- en: As a result, it’s never been easier to nest your Remix application within a
    subpath of your site, without having to touch your application code.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在可以更轻松地将 Remix 应用程序嵌套在您站点的子路径中，而无需触及您的应用程序代码。
- en: '[PRE0]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[](#cloudflare-pages-support)Cloudflare Pages support'
  id: totrans-split-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#cloudflare-pages-support)Cloudflare Pages 支持'
- en: With our initial unstable release of Remix Vite, [Cloudflare Pages](https://pages.cloudflare.com)
    support wasn’t quite ready yet. Cloudflare’s `workerd` runtime is completely separate
    from Vite’s Node environment so we needed to figure out the best way to bridge
    this gap.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们最初不稳定的 Remix Vite 发布中，[Cloudflare Pages](https://pages.cloudflare.com) 的支持尚未完全准备好。
    Cloudflare 的`workerd`运行时与 Vite 的 Node 环境完全分离，因此我们需要找到一个最佳的方法来弥合这个差距。
- en: With Remix Vite going stable, we now provide a built-in Vite plugin for integrating
    Cloudflare’s tooling with Remix during local development.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Remix Vite 稳定推出，我们现在提供了一个内置的 Vite 插件，用于在本地开发中集成 Cloudflare 的工具。
- en: 'To simulate the Cloudflare environment in Vite, [Wrangler](https://developers.cloudflare.com/workers/wrangler)
    provides [Node proxies to local `workerd` bindings](https://developers.cloudflare.com/workers/wrangler/api/#getplatformproxy).
    Remix’s `cloudflareDevProxyVitePlugin` sets up these proxies for you:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Vite 中模拟 Cloudflare 环境，[Wrangler](https://developers.cloudflare.com/workers/wrangler)
    提供了 [Node 代理到本地 `workerd` 绑定](https://developers.cloudflare.com/workers/wrangler/api/#getplatformproxy)。Remix
    的 `cloudflareDevProxyVitePlugin` 为你设置了这些代理：
- en: '[PRE1]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The proxies are then available within `context.cloudflare` in your `loader`
    or `action` functions:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以在你的 `loader` 或 `action` 函数中通过 `context.cloudflare` 使用这些代理：
- en: '[PRE2]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We’re still actively working with the Cloudflare team to ensure the best possible
    experience for Remix users. In the future the integration is likely to be even
    more seamless by leveraging Vite’s new (still experimental) [Runtime API](https://vitejs.dev/guide/api-vite-runtime#vite-runtime-api),
    so stay tuned for further updates.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍在积极与 Cloudflare 团队合作，以确保 Remix 用户获得最佳体验。未来，通过利用 Vite 的新（仍处于试验阶段的）[Runtime
    API](https://vitejs.dev/guide/api-vite-runtime#vite-runtime-api)，集成可能会更加无缝，因此请继续关注进一步的更新。
- en: For more information on this feature, check out the [Remix Vite + Cloudflare
    documentation](https://remix.run/docs/future/vite#cloudflare).
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请查阅 [Remix Vite + Cloudflare 文档](https://remix.run/docs/future/vite#cloudflare)。
- en: '[](#server-bundles)Server bundles'
  id: totrans-split-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#server-bundles)服务器捆绑'
- en: For those of you who have been running [Remix on Vercel](https://vercel.com/docs/frameworks/remix),
    you may have noticed that Vercel allows you to split your server build into multiple
    bundles with different routes targeting [serverless](https://vercel.com/docs/frameworks/remix#serverless-functions)
    and [edge functions](https://vercel.com/docs/frameworks/remix#edge-functions).
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些已经在 [Vercel 上运行 Remix](https://vercel.com/docs/frameworks/remix) 的人来说，你可能已经注意到
    Vercel 允许你将服务器构建分成多个捆绑，不同的路由针对 [无服务器函数](https://vercel.com/docs/frameworks/remix#serverless-functions)
    和 [边缘函数](https://vercel.com/docs/frameworks/remix#edge-functions)。
- en: What you may not have realized is that this feature is actually achieved via
    a [fork of Remix](https://www.npmjs.com/package/@vercel/remix-run-dev) that Vercel
    uses in its [Remix builder](https://github.com/vercel/vercel/blob/main/packages/remix/src/build.ts).
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 或许你没有意识到的是，这个功能实际上是通过 [Remix 的分支](https://www.npmjs.com/package/@vercel/remix-run-dev)（Vercel
    在其 [Remix 构建器](https://github.com/vercel/vercel/blob/main/packages/remix/src/build.ts)
    中使用）来实现的。
- en: With the move to Vite, we wanted to ensure that another fork of our build system
    wasn’t necessary, so we’ve been working with the Vercel team to bring this feature
    to Remix Vite. Now *anyone* — not just Vercel consumers — can split their server
    build into multiple bundles however they like.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在迁移到 Vite 后，我们希望确保不需要我们的构建系统的另一个分支，因此我们一直与 Vercel 团队合作，将此功能引入 Remix Vite。现在
    *任何人* — 不仅仅是 Vercel 消费者 — 都可以根据他们的喜好将他们的服务器构建分成多个捆绑。
- en: Huge thanks to Vercel, and most notably [Nathan Rajlich](https://n8.io), for
    helping out with this work. For more information on this feature, check out the
    [server bundles documentation](https://remix.run/docs/future/server-bundles).
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 特别感谢 Vercel，尤其是 [Nathan Rajlich](https://n8.io)，为这项工作提供帮助。有关此功能的更多信息，请查阅 [服务器捆绑文档](https://remix.run/docs/future/server-bundles)。
- en: '[](#presets)Presets'
  id: totrans-split-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#presets)预设'
- en: When investigating Vercel support for Remix Vite, it became clear that we needed
    a way for other tools and hosting providers to customize the behavior of the Vite
    plugin without reaching into internals or running their own forks. To support
    this, we’ve introduced the concept of “presets”.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在调查 Vercel 对 Remix Vite 的支持时，明确了我们需要一种方法让其他工具和托管提供商能够定制 Vite 插件的行为，而不是深入内部或运行自己的分支。为支持这一点，我们引入了“预设”概念。
- en: 'Presets can only do two things:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 预设只能做两件事：
- en: Configure the Remix Vite plugin on your behalf.
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Remix Vite 插件代表你进行。
- en: Validate the resolved config.
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证已解析的配置。
- en: Presets are designed to be published to npm and used within your Vite config.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 预设旨在发布到 npm 并在你的 Vite 配置中使用。
- en: The Vercel preset is coming soon, and we’re excited to see what other presets
    the community comes up with — especially since presets have access to all Remix
    Vite plugin options and are therefore not strictly limited to hosting provider
    support.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: Vercel 预设即将推出，我们非常期待看到社区会推出哪些其他预设 — 特别是预设可以访问所有 Remix Vite 插件选项，因此不仅仅限于托管提供商支持。
- en: For more information on this feature, including guidance on how to create your
    own presets, check out the [presets documentation](https://remix.run/docs/future/presets).
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此功能的更多信息，包括如何创建您自己的预设，请查阅 [预设文档](https://remix.run/docs/future/presets)。
- en: '[](#better-server-and-client-separation)Better server and client separation'
  id: totrans-split-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#better-server-and-client-separation)更好的服务器和客户端分离'
- en: Remix allows you to name files with a `.server.ts` extension to ensure they
    never accidentally end up on the client. However, it turned out that our previous
    implementation wasn’t compatible with Vite’s ESM model, so we were forced to revisit
    our approach.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: Remix 允许您使用 `.server.ts` 扩展名命名文件，以确保它们永远不会意外地出现在客户端。然而，我们发现我们之前的实现与 Vite 的 ESM
    模型不兼容，因此我们不得不重新审视我们的方法。
- en: Instead, what if we made it a compile-time error whenever `.server.ts` files
    are imported in a client code path?
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 反之，如果我们将 `.server.ts` 文件在客户端代码路径中导入，那会怎样呢？将其编译为错误会更好吗？
- en: Our previous approach resulted in runtime errors that could easily slip through
    to production. Raising these errors during the build prevents them from impacting
    real users, while providing faster, more comprehensive feedback to developers.
    We quickly realized this is *much* better.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前的方法导致运行时错误很容易溜到生产环境中。在构建过程中引发这些错误可以避免影响真正的用户，同时为开发人员提供更快速、更全面的反馈。我们很快意识到这种方法要好得多。
- en: As a bonus, since we were already working in this area, we decided to add support
    for `.server` *directories*, not just files, making it easy to mark entire portions
    of your project as server-only.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 作为奖励，由于我们已经在这个领域工作过，我们决定添加对 `.server` *目录* 的支持，而不仅仅是文件，这样可以轻松地标记项目的整个部分为仅限服务器。
- en: If you’d like to dive deeper into the rationale behind this change, check out
    our [decision document on splitting up client and server code in Vite](https://github.com/remix-run/remix/blob/main/decisions/0010-splitting-up-client-and-server-code-in-vite.md).
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望深入了解此更改背后的原因，请查看我们关于在 Vite 中分离客户端和服务器代码的 [决策文档](https://github.com/remix-run/remix/blob/main/decisions/0010-splitting-up-client-and-server-code-in-vite.md)。
- en: '[](#vite-env-only)vite-env-only'
  id: totrans-split-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#vite-env-only)vite-env-only'
- en: In the interest of speed, Vite lazily compiles each file in isolation. Out of
    the box, Vite assumes any file referenced by client code is fully client-safe.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 出于速度的考虑，Vite 惰性编译每个文件。默认情况下，Vite 假设由客户端代码引用的任何文件都是完全安全的。
- en: Remix automatically handles the removal of `loader`, `action` and `headers`
    exports from route files, ensuring they are always safe for the browser. But what
    about non-Remix exports? How do we know which of these to remove from the browser
    build — and not just from routes, but from any module in your project?
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: Remix 自动处理路由文件中 `loader`、`action` 和 `headers` 导出的移除，确保它们对浏览器始终安全。但是，非 Remix
    导出的情况如何处理呢？我们如何知道哪些应该从浏览器构建中删除？这不仅仅是路由文件的问题，而是项目中的任何模块都会受到影响。
- en: For example, what if you wanted to write something like this?
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想写类似这样的东西会怎么样？
- en: '[PRE3]'
  id: totrans-split-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this file’s current state, Remix would throw a compile-time error due to
    the use of a `.server` module on the client. This is a good thing! You definitely
    don’t want to leak server-only code to the client. You could fix this by splitting
    server-only code into its own file, but it’d be nice if you didn’t have to restructure
    your code if you didn’t want to — especially if you’re migrating an existing project!
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前文件的状态下，由于在客户端上使用了 `.server` 模块，Remix 将抛出编译时错误。这是件好事！您绝对不希望将仅限服务器的代码泄露给客户端。您可以通过将仅限服务器的代码拆分到自己的文件中来解决此问题，但如果不想重新构造代码，这将会很不方便，特别是当您正在迁移现有项目时！
- en: This problem isn’t specific to Remix. It actually affects any full-stack Vite
    project, so we wrote a standalone Vite plugin called [vite-env-only](https://github.com/pcattori/vite-env-only)
    to solve it. This plugin lets you mark individual *expressions* as server-only
    or client-only.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题并不特定于 Remix。实际上，它影响到任何全栈 Vite 项目，因此我们编写了一个独立的 Vite 插件称为 [vite-env-only](https://github.com/pcattori/vite-env-only)
    来解决它。该插件允许您将单个 *表达式* 标记为仅限服务器或仅限客户端。
- en: 'For example, when using the `serverOnly$` macro:'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当使用 `serverOnly$` 宏时：
- en: '[PRE4]'
  id: totrans-split-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'On the client, this becomes:'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，这变成了：
- en: '[PRE5]'
  id: totrans-split-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**It’s worth reiterating that this is a separate Vite plugin and not a feature
    of Remix.** It’s completely up to you whether you prefer to use `vite-env-only`,
    split your server-only code into separate files, or even bring your own Vite plugin.'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**值得重申的是，这是一个独立的 Vite 插件，而不是 Remix 的功能。** 完全由您决定是否喜欢使用 `vite-env-only`，将服务器专用代码拆分为单独的文件，甚至带上自己的
    Vite 插件。'
- en: For more information, check out our [documentation on splitting up client and
    server code](https://remix.run/docs/future/vite#splitting-up-client-and-server-code).
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 欲知更多信息，请查阅我们关于[拆分客户端和服务器代码的文档](https://remix.run/docs/future/vite#splitting-up-client-and-server-code)。
- en: '[](#cssurl-imports)`.css?url` imports'
  id: totrans-split-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#cssurl-imports)`.css?url` 导入'
- en: 'From the very beginning, Remix has provided an [alternative model for managing
    CSS imports](https://remix.run/docs/styling/css). When importing a CSS file, its
    URL is provided as a string for rendering in a `link` tag:'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始，Remix 就提供了一种[管理 CSS 导入的替代模型](https://remix.run/docs/styling/css)。当导入 CSS
    文件时，其 URL 被提供为一个字符串，用于在 `link` 标签中渲染：
- en: '[PRE6]'
  id: totrans-split-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: While Vite has supported [importing static assets as URLs](https://vitejs.dev/guide/assets#importing-asset-as-url)
    for a long time now, this did not work for CSS files if they required any processing
    such as [PostCSS](https://vitejs.dev/guide/features#postcss) (including [Tailwind](https://tailwindcss.com)),
    [CSS Modules](https://vitejs.dev/guide/features#css-modules), [CSS preprocessors](https://vitejs.dev/guide/features#css-pre-processors)
    etc.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Vite 长期以来支持[将静态资源导入为 URL](https://vitejs.dev/guide/assets#importing-asset-as-url)，但如果
    CSS 文件需要像[PostCSS](https://vitejs.dev/guide/features#postcss)（包括[Tailwind](https://tailwindcss.com)）、[CSS
    模块](https://vitejs.dev/guide/features#css-modules)、[CSS 预处理器](https://vitejs.dev/guide/features#css-pre-processors)等进行任何处理，这种方式是行不通的。
- en: 'With the recent release of [Vite v5.1.0](https://vitejs.dev/blog/announcing-vite5-1),
    full CSS support is now possible via the `.css?url` import syntax:'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 随着最新版本 [Vite v5.1.0](https://vitejs.dev/blog/announcing-vite5-1) 的发布，通过 `.css?url`
    导入语法现在可以完全支持 CSS 了：
- en: '[PRE7]'
  id: totrans-split-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[](#cleaner-build-output)Cleaner build output'
  id: totrans-split-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#cleaner-build-output)更清晰的构建输出'
- en: The old Remix compiler built the client and server into separate directories
    that could be configured independently. By default, the output directories were
    `public/build` for client assets and `build` for the server. It turned out that
    this structure conflicted with [Vite’s public directory](https://vitejs.dev/guide/assets.html#the-public-directory).
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 旧版 Remix 编译器将客户端和服务器构建到独立的目录中，可以独立配置。默认情况下，输出目录为客户端资产的 `public/build` 和服务器的
    `build`。结果发现这种结构与 [Vite 的公共目录](https://vitejs.dev/guide/assets.html#the-public-directory)存在冲突。
- en: Since Vite copies files from `public` into the client build directory, and Remix’s
    client build directory was nested within the public directory, some consumers
    found their public directory being recursively copied into itself 🫠
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Vite 将文件从 `public` 目录复制到客户端构建目录中，并且 Remix 的客户端构建目录嵌套在 public 目录中，因此一些用户发现他们的
    public 目录被递归地复制到了自身 🫠
- en: To fix this, we had to rearrange our build output a bit. Remix Vite now has
    a single top-level `buildDirectory` option that defaults to `"build"`, resulting
    in `build/client` and `build/server` directories.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们不得不稍微重新调整我们的构建输出。Remix Vite 现在有一个顶层的 `buildDirectory` 选项，默认为 `"build"`，导致了
    `build/client` 和 `build/server` 目录的生成。
- en: The funny thing is that even though we only implemented this change to fix a
    bug, we actually much prefer this structure. And based on the feedback we received,
    so did our early adopters!
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，尽管我们只是实现了这个变更来修复一个 bug，但我们实际上更喜欢这种结构。根据我们收到的反馈，我们的早期采用者也是如此！
- en: '[](#more-than-just-a-vite-plugin)More than just a Vite plugin'
  id: totrans-split-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#more-than-just-a-vite-plugin)不仅仅是一个 Vite 插件'
- en: Our earliest adopters ran the Vite CLI directly — `vite dev` for local development
    and `vite build && vite build --ssr` to build for production. Due to the lack
    of a custom wrapper around Vite, our initial unstable release post mentioned that
    Remix was now “just a Vite plugin”.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最早的采用者直接运行 Vite CLI —— 用于本地开发的 `vite dev` 和用于生产构建的 `vite build && vite build
    --ssr`。由于缺少对 Vite 的自定义包装器，我们最初的不稳定发布中提到 Remix 现在只是一个 Vite 插件。
- en: However, with the introduction of server bundles, we were unable to hang onto
    this approach. When using the `serverBundles` option there would now be a dynamic
    number of server builds. We had assumed that we’d be able to define multiple inputs
    and outputs to Vite’s `ssr` build but this turned out not to be the case, so Remix
    needed a way to orchestrate the entire build process. The Vite plugin also now
    provides a new `buildEnd` hook so you can run your own custom logic once the Remix
    build has finished.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着服务器包的引入，我们无法继续沿用这种方式。当使用 `serverBundles` 选项时，会生成动态数量的服务器构建。我们曾假设能够定义多个输入和输出到
    Vite 的 `ssr` 构建，但事实并非如此，因此 Remix 需要一种方式来编排整个构建过程。Vite 插件现在还提供了一个新的 `buildEnd`
    钩子，因此您可以在 Remix 构建完成后运行自定义逻辑。
- en: We’ve kept as much of our old architecture as possible by maximizing the amount
    of code in our Vite plugin (and we’re glad we did!), and added `remix vite:dev`
    and `remix vite:build` commands to the Remix CLI. In Remix v3, these commands
    will become the default `dev` and `build` commands.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尽可能地保留了我们旧架构中的代码，通过最大化在我们的Vite插件中的代码量（我们很高兴这样做！），并为Remix CLI添加了`remix vite:dev`和`remix
    vite:build`命令。在Remix v3中，这些命令将成为默认的`dev`和`build`命令。
- en: So while we’re no longer “just a Vite plugin”, it’s fair to say that we’re still
    *mostly* just a Vite plugin 🙂
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，虽然我们不再“只是一个Vite插件”，但可以说我们仍然*大部分*只是一个Vite插件 🙂
- en: '[](#next-steps)Next steps'
  id: totrans-split-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#next-steps)下一步'
- en: Now that Remix Vite is stable, you’ll start to see our documentation and templates
    moving over to Vite by default.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Remix Vite已经稳定，您将开始看到我们的文档和模板默认迁移到Vite上。
- en: Just like with our initial unstable release, we have a [migration guide](https://remix.run/docs/future/vite#migrating)
    for those of you looking to move your existing Remix projects over to Vite.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们最初的不稳定版本一样，我们为那些希望将现有的Remix项目迁移到Vite上的用户提供了一个[迁移指南](https://remix.run/docs/future/vite#migrating)。
- en: Rest assured that the old Remix compiler will continue to work in Remix v2.
    However, from now on all new features and improvements that require compiler integrations
    will only be targeting Vite. In the future Vite will be the only official way
    to build Remix apps, so we encourage you to start migrating as soon as possible.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请放心，旧的Remix编译器将继续在Remix v2中工作。然而，从现在开始，所有需要编译器集成的新功能和改进都将只针对Vite。
- en: If you have any feedback for us along the way, please reach out. We’d love to
    hear from you!
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在此过程中有任何反馈，请随时联系我们。我们很乐意听取您的意见！
- en: '[](#thank-you)Thank you'
  id: totrans-split-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#thank-you)谢谢'
- en: Thank you to all of our early adopters in the Remix community for providing
    feedback, raising issues and submitting pull requests. We couldn’t have come this
    far without you.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢所有Remix社区的早期采纳者提供的反馈，发起的问题和提交的拉取请求。没有您，我们不可能走到今天。
- en: We’d also like to extend an extra special thank you to [Hiroshi Ogawa](https://github.com/hi-ogawa),
    an outside contributor who landed an astounding [25 pull requests](https://github.com/remix-run/remix/pulls?q=is%3Apr+is%3Amerged+label%3Avite+closed%3A%3C2024-02-21+author%3Ahi-ogawa)
    into Remix Vite 🔥
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还要特别感谢外部贡献者[Hiroshi Ogawa](https://github.com/hi-ogawa)，他在Remix Vite中提交了令人惊讶的[25个拉取请求](https://github.com/remix-run/remix/pulls?q=is%3Apr+is%3Amerged+label%3Avite+closed%3A%3C2024-02-21+author%3Ahi-ogawa)
    🔥
- en: And as always, thank you to the Vite team for providing such an amazing tool
    for us to build on top of. We’re excited to see where we can take it together.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，感谢Vite团队为我们提供如此出色的工具。我们很期待共同发展的未来。
- en: 💿⚡️🚀
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 💿⚡️🚀
