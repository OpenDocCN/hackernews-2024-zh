["```\nfn main() {\n    std::process::exit(42)\n} \n```", "```\n$ cargo build --release\n   Compiling smallrs v0.1.0 (/home/graham/src/smallrs)\n    Finished release [optimized] target(s) in 0.35s\n\n$ ./target/release/smallrs\n$ echo $?\n42\n\n$ ls -alh target/release/smallrs\n-rwxr-xr-x 2 graham graham 3.6M Jul  1 09:10 target/release/smallrs \n```", "```\n$ ls -alh target/release/smallrs\n-rwxr-xr-x 2 graham graham 3.6M Jul  1 09:10 target/release/smallrs\n\n$ strip target/release/smallrs\n\n$ ls -alh target/release/smallrs\n-rwxr-xr-x 2 graham graham 303K Jul  1 09:50 target/release/smallrs \n```", "```\n[profile.release]\nstrip = true \n```", "```\nopt-level = \"z\"\ncodegen-units = 1 \n```", "```\npanic = \"abort\"\nlto = true \n```", "```\npub fn exit(code: i32) -> ! {\n    unsafe { libc::exit(code as c_int) }\n} \n```", "```\n[dependencies]\nlibc = { version = \"0.2\", default-features = false } \n```", "```\n#![no_std]\n#![no_main]\n\nextern crate libc;\n\n#[no_mangle]\npub extern \"C\" fn main(_argc: i32, _argv: *const *const u8) -> i32 {\n\t// Similar to previous version, but unneccessary:\n\t// unsafe { libc::exit(42) }\n\n    42\n}\n\n#[panic_handler]\nfn my_panic(_info: &core::panic::PanicInfo) -> ! {\n    loop {}\n} \n```", "```\n$ cargo build --release\n   Compiling libc v0.2.126\n   Compiling smallrs v0.1.0 (/home/graham/src/smallrs)\n    Finished release [optimized] target(s) in 0.91s\n$ ls -alh target/release/smallrs\n-rwxr-xr-x 2 graham graham 16K Jul  1 10:47 target/release/smallrs \n```", "```\nsection .text\nglobal _start\n_start:\n        mov edi, 42  ; return code 42\n        mov eax, 60  ; `_exit` syscall\n        syscall \n```", "```\n$ nasm -f elf64 exit.s\n$ ld -n -N --strip-all -o exit exit.o \n```", "```\n$ ls -alh exit\n-rwxr-xr-x 1 graham graham 352 Jul  1 10:59 exit \n```", "```\n$ ld -n -N -o exit exit.o \n```", "```\n$ readelf -h exit | grep 'Entry point'\n  Entry point address:               0x400080 \n```", "```\n$ nm exit | grep 400080\n0000000000400080 T _start \n```", "```\n#![no_std]\n#![no_main]\n\nuse core::arch::asm;\n\n#[no_mangle]\npub extern \"C\" fn _start() -> ! {\n    unsafe {\n        asm!(\n            \"mov edi, 42\",\n            \"mov eax, 60\",\n            \"syscall\",\n            options(nostack, noreturn)\n        )\n        // nostack prevents `asm!` from push/pop rax\n        // noreturn prevents it putting a 'ret' at the end\n        //  but it does put a ud2 (undefined instruction) instead\n    }\n}\n\n#[panic_handler]\nfn my_panic(_info: &core::panic::PanicInfo) -> ! {\n    loop {}\n} \n```", "```\nRUSTFLAGS=\"-Ctarget-cpu=native -Clink-args=-nostartfiles\" cargo build --release \n```", "```\n$ ls -alh ./target/release/smallrs\n-rwxr-xr-x 2 graham graham 13K Jul  1 11:52 ./target/release/smallrs \n```", "```\n$ RUSTFLAGS=\"-Ctarget-cpu=native -Clink-args=-nostartfiles -Clink-args=-Wl,-n,-N,--no-dynamic-linker\" cargo build --release\n  Compiling smallrs v0.1.0 (/home/graham/src/smallrs)\n   Finished release [optimized] target(s) in 0.24s\n$ ls -alh target/release/smallrs\n-rwxr-xr-x 2 graham graham 1.3K Jul  1 12:12 target/release/smallrs \n```", "```\n$ file target/release/smallrs\ntarget/release/smallrs: ELF 64-bit LSB executable, x86-64, version 1 (SYSV),\nstatic-pie linked, BuildID[sha1]=a7be8902583c68d08b22bff637461720db80a1cd, stripped\n\n$ file ../asm-test/exit\n../asm-test/exit: ELF 64-bit LSB executable, x86-64, version 1 (SYSV),\nstatically linked, not stripped \n```", "```\n$ RUSTFLAGS=\"-Ctarget-cpu=native -Clink-args=-nostartfiles -Clink-args=-Wl,-n,-N,--no-dynamic-linker,--no-pie,--build-id=none\" cargo build --release\n   Compiling smallrs v0.1.0 (/home/graham/src/smallrs)\n    Finished release [optimized] target(s) in 0.24s\n\n$ ls -alh target/release/smallrs\n-rwxr-xr-x 2 graham graham 400 Jul  1 12:31 target/release/smallrs \n```", "```\n$ readelf -W -S target/release/seed\nThere are 9 section headers, starting at offset 0xa50:\n\nSection Headers:\n  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al\n  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0\n  [ 1] .text             PROGBITS        00000000004000e8 0000e8 00050c 00 WAX  0   0  4\n  [ 2] .rodata           PROGBITS        0000000000400600 000600 0001f4 00   A  0   0 16\n  [ 3] .eh_frame_hdr     PROGBITS        00000000004007f4 0007f4 00001c 00   A  0   0  4\n  [ 4] .eh_frame         X86_64_UNWIND   0000000000400810 000810 0000b0 00   A  0   0  8\n  [ 5] .data.rel.ro      PROGBITS        00000000004008c0 0008c0 000120 00  WA  0   0  8\n  [ 6] .got              PROGBITS        00000000004009e0 0009e0 000008 00  WA  0   0  8\n  [ 7] .got.plt          PROGBITS        00000000004009e8 0009e8 000018 08  WA  0   0  8\n  [ 8] .shstrtab         STRTAB          0000000000000000 000a00 00004c 00      0   0  1 \n```", "```\nexport RUSTFLAGS=\"-Ctarget-cpu=native -Clink-args=-nostartfiles -Crelocation-model=static -Clink-args=-Wl,-n,-N,--no-dynamic-linker,--no-pie,--build-id=none,--no-eh-frame-hdr\" \n```", "```\nobjcopy -R .eh_frame -R .got.plt target/release/my_bin my_final_bin \n```"]