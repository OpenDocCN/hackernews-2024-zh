- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:46:43'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:46:43
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: A Deep Dive Into RSpec Tests in Ruby on Rails | AppSignal Blog
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ruby on Rails 中 RSpec 测试的深入探讨 | AppSignal 博客
- en: 来源：[https://blog.appsignal.com/2024/02/07/a-deep-dive-into-rspec-tests-in-ruby-on-rails.html](https://blog.appsignal.com/2024/02/07/a-deep-dive-into-rspec-tests-in-ruby-on-rails.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.appsignal.com/2024/02/07/a-deep-dive-into-rspec-tests-in-ruby-on-rails.html](https://blog.appsignal.com/2024/02/07/a-deep-dive-into-rspec-tests-in-ruby-on-rails.html)
- en: In our last post, we looked at the basics of RSpec and explored how well it
    works with Behavior Driven Development in Ruby.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们上一篇文章中，我们了解了 RSpec 的基础知识，并探讨了它如何与 Ruby 中的行为驱动开发很好地配合。
- en: Now, we will look at specific types of RSpec tests for different parts of a
    Ruby on Rails application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将专门研究 Ruby on Rails 应用程序的不同部分的 RSpec 测试类型。
- en: Let's dive straight in!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直奔主题！
- en: Unit, Controller, and Integration Tests in Ruby on Rails
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ruby on Rails 中的单元测试、控制器测试和集成测试
- en: A Ruby on Rails application is composed of several layers. As the framework
    is built around Models, Views, and Controllers, we might think of those three
    as the only layers of an application. Yet, often, that's barely enough to describe
    a Ruby on Rails application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Ruby on Rails 应用由多个层组成。由于框架是围绕模型、视图和控制器构建的，我们可能认为这三个是应用的唯一层。然而，通常情况下，这几乎不足以描述一个
    Ruby on Rails 应用程序。
- en: Mailers, Jobs, and Helpers are secondary layers we don't want to miss. When
    it comes to testing, it's important to remember that these components are largely
    impacted by how our code has been designed. Using [SOLID principles](https://en.wikipedia.org/wiki/SOLID)
    — particularly Single Responsibility — helps keep our code straightforward and
    more testable.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 邮件、作业和助手是我们不想错过的次要层。当涉及测试时，重要的是记住我们的代码设计如何影响这些组件。使用[SOLID 原则](https://en.wikipedia.org/wiki/SOLID)——尤其是单一职责——有助于保持我们的代码简单直接，更易于测试。
- en: 'So, we usually aim to keep things simple in views, controllers, models, jobs,
    and mailers: we want to assemble and use the bricks of code we have designed and
    tested separately already. Once we enter the realm of views and controllers, testing
    becomes much more complex, and slower too.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们通常希望在视图、控制器、模型、作业和邮件中保持简单：我们希望组装并使用我们已经单独设计和测试的代码组件。一旦涉及到视图和控制器，测试就变得更加复杂，而且速度也更慢。
- en: Categories of Ruby Tests
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ruby 测试的分类
- en: 'Usually, we split tests into these categories:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们将测试分为以下几个类别：
- en: '**Unit tests** (models and other plain old Ruby objects — POROs): Ensure class
    methods are working as expected.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**（模型和其他纯粹的 Ruby 对象- PORO）：确保类方法按预期工作。'
- en: '**Controller tests:** Test the expected outcome of controller actions (rendering
    the right template, redirections, and flash messages).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器测试：** 测试控制器动作的预期结果（渲染正确的模板、重定向和闪存消息）。'
- en: '**View tests:** (Used rarely) to test specific elements or content in views.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图测试：**（很少使用）用于测试视图中的特定元素或内容。'
- en: '**Helper tests:** For when you use a complex helper method.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**助手测试：** 当你使用一个复杂的辅助方法时。'
- en: '**Feature or system tests:** Simulate user interactions in the browser — this
    is where Capybara will help.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能或系统测试：** 在浏览器中模拟用户交互- 这是 Capybara 将会帮助的地方。'
- en: '**Request tests:** Test an application''s response to various HTTP verbs without
    browser overhead. This is faster than feature tests.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求测试：** 测试应用程序对各种 HTTP 动词的响应，而无需浏览器的开销。这比功能测试更快。'
- en: '**Mailer and jobs tests:** Specific tests are needed for this secondary layer
    to ensure emails are sent properly with the right content and jobs trigger the
    appropriate work.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**邮件和作业测试：** 针对这个次要层需要特定的测试，以确保邮件以正确的内容发送，并且作业触发适当的工作。'
- en: '**Routing tests:** Complex routing is a code smell. Testing routes will help
    you avoid trouble when you have too many routes or routes that are too complex.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由测试：** 复杂的路由是一种代码味道。测试路由将帮助您在拥有太多路由或路由太复杂时避免麻烦。'
- en: What Kinds of Tests Should We Write?
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们应该编写什么样的测试？
- en: 'Do we need to write all of these tests? It depends on your culture and team,
    but these might be good starting points:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编写所有这些测试吗？这取决于您的文化和团队，但这些可能是一个很好的起点：
- en: '**Unit tests:** Write focused and (as much as possible) database-dependent
    tests for your models'' public methods and other POROs you craft into your application;
    they should run fast.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试：** 为模型的公共方法和应用程序中创建的其他 PORO编写专注的（尽可能）依赖数据库的测试；它们应该运行得很快。'
- en: '**Controller tests:** Write tests that help ensure controller actions are routable
    and respond as expected for each context they could be in. These should not aim
    to test the whole response or complex scenarios made of multiple requests.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器测试：** 编写测试以确保控制器动作对于可能出现的每种环境都是可路由的，并且按预期做出响应。这些测试不应该旨在测试整个响应或由多次请求组成的复杂情景。'
- en: '**Request tests:** Test request scenarios from a machine client (think API
    controllers), typically: "for a given HTTP request context (HTTP verb, path, and
    parameters), what HTTP response should we get?"'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求测试：** 从机器客户端测试请求场景（考虑 API 控制器），通常为：“在给定的 HTTP 请求上下文（HTTP 动词、路径和参数）下，我们应该得到什么样的
    HTTP 响应？”'
- en: '**System tests:** Test scenarios of human user requests. Typically, this is
    where we want to test complex scenarios with multiple clicks.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统测试：** 测试人类用户请求的情景。通常，这是我们想要测试多次点击的复杂情景的地方。'
- en: '**Mailer and job tests:** These should only test that a mailer and job are
    doing the specific "mailer" and "job" work properly. In particular, for jobs,
    most of the "work" should be done through classes and methods tested separately.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**邮件和作业测试：** 这些测试应该只测试邮件和作业是否正确执行了特定的“邮件”和“作业”工作。特别是对于作业，大部分“工作”应该通过分别进行类和方法测试来完成。'
- en: 'Controller tests are often replaced by a good layer of request and system tests,
    as they ultimately serve the same purpose. Too many tests will cause fatigue in
    your team or slow down your whole test suite for little benefit. It''s up to you.
    The point is to test your controller layer: figure out which way is best in your
    case.'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 控制器测试经常被良好的请求和系统测试层所取代，因为它们最终都有相同的目的。过多的测试会导致团队疲劳，或者对整个测试套件的速度造成小小的好处。这取决于你。重点是测试你的控制器层：找出在你的情况下哪种方式最好。
- en: Let's see how unit, controller, and integration (both request and system) tests
    look.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看单元测试，控制器测试和集成（请求和系统）测试的样子。
- en: Using RSpec and Ruby on Rails for Testing
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用RSpec和Ruby on Rails进行测试
- en: As pointed out in [our previous post](https://blog.appsignal.com/2024/01/24/behaviour-driven-development-in-ruby-with-rspec.html),
    we can use the `rspec-rails` gem to integrate RSpec into a Ruby on Rails application's
    code base.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[之前的文章](https://blog.appsignal.com/2024/01/24/behaviour-driven-development-in-ruby-with-rspec.html)中指出的，我们可以使用`rspec-rails`
    gem将RSpec集成到Ruby on Rails应用程序的代码库中。
- en: Unit Tests
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试
- en: Unit tests are at the base of the [testing pyramid](https://www.headspin.io/blog/the-testing-pyramid-simplified-for-one-and-all),
    so there will be numerous unit tests in a codebase. They need to be fast.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是[测试金字塔](https://www.headspin.io/blog/the-testing-pyramid-simplified-for-one-and-all)的基础，因此在代码库中会有大量的单元测试。它们需要快速执行。
- en: 'Remember: tests (with RSpec) are focused on testing code behavior, not implementation.
    That should help to write fast tests. In the case of Ruby on Rails projects, models
    are a big source of unit tests. As models are related to database access (either
    read or write access), those tests can have a performance impact. So be careful
    about reading and writing to the database for those tests. In some cases, you
    won''t be able to avoid calling `create`, `save`, `update`, or `find`, but you
    can in most. You should be able to rely on `new` instead of `create`, for example.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 记住：测试（使用RSpec）专注于测试代码行为，而不是实现。这应该有助于编写快速测试。在Ruby on Rails项目中，模型是单元测试的主要来源。由于模型与数据库访问相关（无论是读取还是写入访问），这些测试可能会对性能产生影响。因此，在这些测试中谨慎读取和写入数据库。在某些情况下，你可能无法避免调用`create`，`save`，`update`或`find`，但你可以在大多数情况下依赖于`new`而不是`create`。
- en: 'Here is what an RSpec unit test for a Ruby on Rails model looks like:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于Ruby on Rails模型的RSpec单元测试的示例：
- en: While those two examples are written a bit differently, they basically do the
    same thing. One has no description and reads pretty nicely still; the other one
    has a description but carries a bit of a duplication, don't you think?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这两个示例写法有些不同，但它们基本上是做同样的事情。一个没有描述，但读起来仍然很不错；另一个有描述，但有点重复，你觉得呢？
- en: Note that we use `User.new` to instantiate a user. This call doesn't require
    a read or write to the database. Since our `valid_email?` method only works with
    the instance's attributes, it won't slow the test down either.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们使用`User.new`来实例化一个用户。这个调用不需要读取或写入数据库。由于我们的`valid_email?`方法仅与实例的属性一起工作，它也不会使测试变慢。
- en: 'Those two are good unit tests: simple, focused, and fast.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个都是很好的单元测试：简单，专注，快速。
- en: 'Unit tests are not just for Ruby on Rails models. They are also good for any
    classes you build around models and the rest of an application''s architecture.
    We have specified the test `type` in the first line (`RSpec.describe User, type:
    :model`), but we can totally avoid that if we write tests for a plain Ruby class.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '单元测试不仅适用于Ruby on Rails模型。它们也适用于您围绕模型和应用程序架构的任何类。我们在第一行指定了测试的`type`（`RSpec.describe
    User, type: :model`），但如果我们为一个普通的Ruby类编写测试，完全可以避免这样做。'
- en: Controller and Request Specs
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器和请求规范
- en: Up until recently, controller tests were the main way to test controllers. Nowadays,
    we tend to rely on request specs instead. Similarly to controller tests, they
    are designed to test an application from a *machine client*. They allow us to
    test one, or multiple, controller action/s. They are tests, so we need to define
    a context, then our expectation. As they are functional tests, we have to define
    a context composed of a given HTTP verb (get, post, put, ...), a path (`/`, `/users`,
    ...), parameters, and (potentially) a body. The expectation is then focused on
    the response (HTTP status code, response/s header/s, and body).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，控制器测试是测试控制器的主要方式。如今，我们倾向于使用请求规范。与控制器测试类似，它们旨在从*机器客户端*的角度测试应用程序。它们允许我们测试一个或多个控制器操作。它们是测试，所以我们需要定义一个上下文，然后是我们的期望。由于它们是功能测试，所以我们必须定义一个由给定的HTTP动词（get、post、put等）、路径（`/`、`/users`等）、参数和（可能的）主体组成的上下文。然后，期望集中在响应上（HTTP状态码、响应头和主体）。
- en: With request specs, it's not a matter of UI or Javascript.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用请求规范，这不是UI或Javascript的问题。
- en: A simple request spec will look like this.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的请求规范看起来像这样。
- en: 'It''s simple, but you can see the context in the part doing the request: `get
    "/users/new"`. In turn, the expectation itself is centered on the response. We
    see a new matcher here, allowing us to test if a specific template is rendered.
    Another one (`redirect_to`) allows us to test that we are properly redirected.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，但你可以在处理请求的部分看到上下文：`get "/users/new"`。反过来，期望本身集中在响应上。我们在这里看到了一个新的匹配器，允许我们测试特定模板是否被渲染。另一个（`redirect_to`）允许我们测试是否被正确重定向。
- en: Request specs can also be used to test more complex scenarios.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请求规范也可以用于测试更复杂的场景。
- en: However, request specs are better adapted to test behavior from a machine client's
    perspective. So, request specs are best used to test an API backend's controller
    parts.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请求规范更适合从机器客户端的角度测试行为。因此，请求规范最适合用于测试API后端的控制器部分。
- en: While we haven't included any in this example, we can also express different
    contexts to test behaviors. The RSpec vocabulary and grammar still applies fully
    in that kind of spec. We merely use a bit more to handle the parts specific to
    making an HTTP request and its response.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们在这个示例中没有包含任何内容，但我们也可以表达不同的上下文以测试行为。RSpec词汇和语法仍然完全适用于那种类型的规范。我们只是稍微多用了一点来处理特定于发出HTTP请求及其响应的部分。
- en: System Specs
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统规范
- en: System specs are more complete integration tests than request ones. They are
    used to test an application in a real or headless browser, and require a driver
    for the browser (the default is Selenium; this can be changed).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 系统规范比请求规范更完整的集成测试。它们用于在真实或无头浏览器中测试应用程序，并需要浏览器的驱动程序（默认为Selenium；这可以更改）。
- en: System specs are similar to request specs in concept, but with improved grammar
    to focus on a user's actions in the browser rather than the requests being made.
    Here is an example.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 系统规范在概念上类似于请求规范，但是语法更改以便专注于浏览器中用户的操作，而不是正在进行的请求。以下是一个示例。
- en: 'Notice that here, the context (verb, path, parameters) is defined underneath
    but still there: we *visit* a page, fill out a form (which sets parameters), and
    then click a button (trigger a POST request). Finally, the expectation is defined
    as the content of the page rendered. Indirectly, it''s still about testing the
    response''s content, although the browser interprets that.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里定义了上下文（动词，路径，参数），但仍然存在：我们*访问*一个页面，填写一个表单（设置参数），然后点击一个按钮（触发POST请求）。最后，期望被定义为页面呈现的内容。间接地，这仍然是关于测试响应的内容，尽管浏览器解释了这一点。
- en: Because system specs use and drive the complete stack, they are a lot slower
    than other specs. As such, they should be limited in number and potentially run
    at particular times within the CI pipeline.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因为系统规范使用并驱动完整的堆栈，所以它们比其他规范慢得多。因此，它们的数量应该有限，并且可能在CI管道中的特定时间运行。
- en: Complimentary Test Types in Ruby
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ruby中的补充测试类型
- en: 'As mentioned, Ruby on Rails applications are composed of a few more components
    with specific roles: mailers, jobs, serializers, and decorators. Those require
    tests as well — ones closer to unit than integration tests. It can be useful to
    test out specifics regarding mailers and jobs.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Ruby on Rails应用程序由一些具有特定角色的组件组成：邮件发送程序，作业，序列化程序和装饰器。这些也需要测试 - 更接近单元测试而不是集成测试。测试邮件发送程序和作业的特定内容可能会有所帮助。
- en: Mailer Specs
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作业规范
- en: 'Thanks to [ActiveMailer](https://github.com/expectedbehavior/active_mailer),
    Ruby on Rails has a simple way to abstract interactions with a third party that
    sends emails. Thus, instead of testing email sends, you can focus on testing what
    matters: behavior. In the case of emails, what matters is the subject, from and
    to addresses, and the body of the response.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[ActiveMailer](https://github.com/expectedbehavior/active_mailer)，Ruby on
    Rails有一种简单的方式来抽象与发送电子邮件的第三方的交互。因此，您可以专注于测试重要的内容，而不是测试电子邮件发送。在电子邮件的情况下，重要的是主题，发件人和收件人地址以及响应的正文。
- en: Job Specs
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作业规范
- en: 'Similarly, job specs allow you to test specific behavior around jobs: if they
    have been enqueued, performed, etc. This includes testing arguments using [Delayed
    Job](https://github.com/collectiveidea/delayed_job).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，工作规范允许您测试特定于工作的特定行为：它们是否已经排队，执行等。这包括使用[Delayed Job](https://github.com/collectiveidea/delayed_job)来测试参数。
- en: We can be tempted to test ActiveJob's behavior. We do know that calling `perform`
    and `perform_later` bill queues a job; what we want to know is if, and when, that
    happens.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会试图测试ActiveJob的行为。我们知道调用`perform`和`perform_later`会将作业排队；我们想知道的是是否以及何时发生这种情况。
- en: So, you should test if a job is queued in contexts requiring it. Then, test
    that a job properly calls upon code that has its own unit tests.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您应该在需要时测试作业是否排队。然后，测试作业是否正确调用具有自己单元测试的代码。
- en: This expresses and tests a job's enqueued behavior with certain parameters when
    a specific method is called.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用特定方法时，此表达式和测试会表达和测试作业的排队行为以及某些参数。
- en: A Note on Concerns in Ruby on Rails
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ruby on Rails中关于Concern的注意事项
- en: Ruby on Rails has a way to factorize code used in multiple models or controllers
    through a [disguised Ruby module called a concern](https://blog.appsignal.com/2020/09/16/rails-concers-to-concern-or-not-to-concern.html).
    Concerns are a great way to avoid duplication of code. Make sure you test the
    content of concerns. Proper unit tests should also cover models. In the case of
    controllers, those are tested through request and system tests.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby on Rails通过[伪装的Ruby模块称为Concern](https://blog.appsignal.com/2020/09/16/rails-concers-to-concern-or-not-to-concern.html)来因式分解在多个模型或控制器中使用的代码的方式。Concerns是避免代码重复的好方法。确保测试关注的内容。适当的单元测试也应该涵盖模型。在控制器的情况下，通过请求和系统测试进行测试。
- en: Some Thoughts on Testing with RSpec for Ruby
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于使用RSpec进行Ruby测试的一些想法
- en: It's worth reiterating that your first layer of testing should be unit tests.
    Tests for models and other POROs should represent the vast majority of your tests
    in a code base.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 值得重申的是，您的第一层测试应该是单元测试。模型和其他PORO的测试应该在代码库中占据绝大部分。
- en: Tests should run fast and avoid database and external services access as much
    as possible. To test the controller layer, request and system specs are best,
    respectively, for machine or human-driven activity on controller actions. They
    are slower than unit tests due to their inherent complexity, so there should be
    less of them than unit tests.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应该快速运行，并尽可能避免数据库和外部服务的访问。要测试控制器层，最好使用请求和系统规范，分别用于控制器操作的机器或人工驱动活动。由于它们的内在复杂性，它们比单元测试要慢，因此应该比单元测试少。
- en: Finally, components like mailers and jobs should be used wisely and in their
    specific context, not to test the behavior of the lower library (like ActiveMailer
    and ActiveJob).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，应明智地使用邮件发送程序和作业，并在其特定环境中使用，而不是测试较低库的行为（如ActiveMailer和ActiveJob）。
- en: Wrapping Up
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'As we saw in part one of this series, we can factorize a lot of code and avoid
    duplication by making use of RSpec''s basics: `before` and `after` hooks, `let`,
    and a proper structure built with `describe` and `context`.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本系列的第一部分中看到的那样，我们可以通过利用RSpec的基础知识：`before`和`after`钩子，`let`以及由`describe`和`context`构建的适当结构来因式分解大量代码并避免重复。
- en: In this part, we took a deep dive into testing with RSpec for Ruby, focusing
    on unit, controller, and integration tests.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分中，我们深入探讨了使用RSpec进行Ruby测试，重点是单元测试，控制器测试和集成测试。
- en: We have explored how it's usually easy to keep unit tests small, while minimizing
    request and system tests is more difficult. So, after you have written (and made
    green) system and request specs, don't hesitate to spend some time slimming them
    down. This will keep them readable and easier to maintain.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了如何通常可以轻松保持单元测试的规模较小，而尽量减少请求和系统测试则更为困难。因此，在编写（并通过）系统和请求规范之后，不要犹豫花一些时间将它们精简。这样可以保持它们的可读性，并更容易维护。
- en: Happy testing!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 测试愉快！
- en: '**P.S. If you''d like to read Ruby Magic posts as soon as they get off the
    press, [subscribe to our Ruby Magic newsletter and never miss a single post](https://blog.appsignal.com/ruby-magic)!**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**附：如果您想在文章发布后第一时间阅读 Ruby Magic 文章，[订阅我们的 Ruby Magic 通讯，永远不会错过任何一篇文章](https://blog.appsignal.com/ruby-magic)!**'
