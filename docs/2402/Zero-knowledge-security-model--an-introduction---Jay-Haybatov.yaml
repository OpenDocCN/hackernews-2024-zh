- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:39:16'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Zero-knowledge security model: an introduction - Jay Haybatov'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://haybatov.com/blog/zksm-intro/](https://haybatov.com/blog/zksm-intro/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Zero-knowledge security model: an introduction'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Posted on February 6, 2024  •  5 minutes  • 939 words
  id: totrans-split-7
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: News about ransom demands from cyber-criminals often features 7- and 8-digit
    numbers. Massive amounts of personal data and sensitive information from data
    leaks get sold or openly published on the internet. All of these can be stopped.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: 'The zero-knowledge security model (ZKSM) is designed to guard sensitive and
    protected data even in cases of full access to the network infrastructure and/or
    cloud services. The ZKSM employs multiple techniques to prevent data theft by
    unauthorised parties:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Not keeping data in online systems
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypting sensitive data at rest, in transit, and in use (at work)
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uninterrupted security
  id: totrans-split-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Data must be stored and operated on network infrastructure and servers in encrypted
    form at all times.
  id: totrans-split-13
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: No data decryption must be possible on servers or network infrastructure.
  id: totrans-split-14
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Data ownership
  id: totrans-split-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keys for decrypting data must belong to the data owner.
  id: totrans-split-16
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Only data owners and users authorised by the owners can decrypt data, and only
    in secure environments (e.g., secured end-user devices, secure enclaves)
  id: totrans-split-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Data independence
  id: totrans-split-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each separate entity (e.g., file, document, data stream, videocall) must use
    its own unique encryption key.
  id: totrans-split-19
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Every user and service account must have their own keys.
  id: totrans-split-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing keys and data securely
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nothing open
  id: totrans-split-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All data and all encryption keys must be shared in encrypted form (e.g., no
    links with keys).
  id: totrans-split-23
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Nothing trusted
  id: totrans-split-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keys and digital signatures must be correctly validated (e.g., to prevent replay
    attacks or encrypted data manipulation).
  id: totrans-split-25
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Nothing permanent
  id: totrans-split-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing must be revokable and renewable (e.g., when one or more parties must
    lose access to a document or a new version of the document).
  id: totrans-split-27
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ZKSM guarantees the following properties for data:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: Integrity
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confidentiality
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticity
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-repudiation
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In realistic scenarios, the requirements beyond the ZKSM include:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: Fully traceable audit trail of sharing and downloading sensitive data.
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication of users before any access to sensitive data.
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplicity and visibility of sharing to prevent human mistakes.
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Availability of data to prevent downtimes.
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data sovereignty for critical infrastructure and national security.
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fully homomorphic encryption (FHE) – a technique that allows performing mathematical
    operations directly on encrypted data – can be optionally used for data processing.
    Modern performant FHE systems rely on approximate operations (e.g., get close
    but not exact results of multiplication), which limits their universal adoption.
    Despite this, 4^th^ generation FHE has many useful applications in secure data
    processing.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: 'Often, companies advertise their end-to-end encrypted products as having ‘zero-knowledge’
    properties. While end-to-end encryption satisfies some requirements of the ZKSM,
    it is only a part of the requirements. For example, all E2EE file sharing platforms,
    with a notable exception, use links for data sharing. This approach violates several
    ZKSM principles:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: Keys are not shared in a secure manner (often, they are just appended to a link
    to the file).
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unauthorised users can get access to data (e.g., when a link is shared via email
    or other means).
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revoking access or the access keys is impossible without deleting the shared
    file – hardly a practical solution.
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before delving into the details of the ZKSM, the designer of a ZKSM system
    has a few considerations to make:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: Define sensitive data.
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not all data is sensitive and thus need the same level of protection.
  id: totrans-split-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the ZKSM is not free and should not be applied as a blanket rule.
  id: totrans-split-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Know your data processes.
  id: totrans-split-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ZKSM severely limits access to data on the server side. Your processes need
    to map to the new ways of searching, processing, and updating data.
  id: totrans-split-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ZKSM must be applied to the entire system at the architectural stage and cannot
    be an optional add-on. At the same time, the most sensitive data pipelines (for
    PII and protected/secret records, etc.) can adopt the ZKSM quickly first; the
    rest of the system can follow in the new secure design.
  id: totrans-split-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a solid understanding of modern cryptography.
  id: totrans-split-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use mature cryptography approved by relevant security bodies.
  id: totrans-split-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You don’t need to know the details of each algorithm used, but you need to know
    how to apply them correctly.
  id: totrans-split-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep things simple.
  id: totrans-split-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are writing software, assess your solutions from the attackers’ point
    of view. Simple solutions are easier to reason about.
  id: totrans-split-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are implementing an existing solution, think what will happen if the
    solution has been compromised. Do not rely on complex conditional controls in
    your security assessment as a mitigation mechanism. Most attacks succeed because
    such controls fail.
  id: totrans-split-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**About the name**'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: The zero-knowledge security model shares a part of its name with the zero-knowledge
    proof in cybersecurity. While these concepts are not directly related, they share
    the approach of proving that users have access to certain data without exposing
    any keys or passwords to the other party (server or cloud systems, in case of
    the ZKSM)
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: An application with end-to-end encryption alone does not qualify to be called
    a ‘zero-knowledge’ system as it lacks ways of proving users’ ownership of data/keys.
    For example, a few videoconferencing solutions advertise their end-to-end encryption
    capabilities despite ignoring the identity of parties joining the calls.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: The zero-knowledge property must apply to the entire world – except the owner
    of data and her trusted parties. A system that advertises that it does not have
    access to data fulfils only a small fraction of ZKSM requirements. ‘Zero knowledge’
    means that data is unreadable by anyone at storing, transmitting, sharing, and
    processing stages – unless authorised by the data owner.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: to be continued…
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
