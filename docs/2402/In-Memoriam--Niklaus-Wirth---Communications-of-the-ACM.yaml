- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 13:23:28'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 13:23:28'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'In Memoriam: Niklaus Wirth – Communications of the ACM'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '-   尼克劳斯·维尔特追忆：计算机协会通讯录'
- en: 来源：[https://cacm.acm.org/magazines/2024/3/280075-in-memoriam-niklaus-wirth/fulltext](https://cacm.acm.org/magazines/2024/3/280075-in-memoriam-niklaus-wirth/fulltext)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://cacm.acm.org/magazines/2024/3/280075-in-memoriam-niklaus-wirth/fulltext](https://cacm.acm.org/magazines/2024/3/280075-in-memoriam-niklaus-wirth/fulltext)
- en: Computing pioneer Niklaus Wirth died on January 1, 2024, just 45 days short
    of his 90th birthday.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机先驱尼克劳斯·维尔特（Niklaus Wirth）于2024 年 1 月 1 日去世，离他的 90 岁生日仅剩 45 天。
- en: Wirth was born in Switzerland in 1934\. He received his B.S. from ETH (Swiss
    Federal Institute of Technology) in Zurich in 1959, and his M.Sc. degree from
    Université Laval in Quebec City, Canada in 1960\. He then attended the University
    of California at Berkeley, where he obtained his Ph.D. in EECS in 1963\. Wirth
    then joined the faculty at Stanford University, but left in 1968 to join the faculty
    of ETH in Zurich.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 维尔特于 1934 年出生在瑞士。他于 1959 年从苏黎世联邦理工学院（ETH）获得学士学位，并于 1960 年在加拿大魁北克市拉瓦尔大学获得硕士学位。随后，他在加利福尼亚大学伯克利分校获得了电子工程与计算机科学博士学位（1963
    年）。维尔特随后加入了斯坦福大学教职，但在 1968 年离开加入苏黎世的ETH大学教职。
- en: Wirth was a member of the international team that developed ALGOL 60—the first
    widespread computer language to introduce structured programming with independent
    blocks, local variables, lexical scoping, and recursive functions. Reflecting
    on the experience in a 2018 oral interview, he thought ALGOL was “a big mess”
    and that “it would be a worthwhile project for a Ph.D. thesis.”
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 维尔特是国际团队开发的 ALGOL 60 的成员，这是第一个广泛采用的计算机语言，引入了独立块、局部变量、词法作用域和递归函数的结构化编程概念。回顾这一经历时，他在
    2018 年的口述采访中认为 ALGOL “一团糟”，并认为“这将是一项值得做博士论文的项目”。
- en: He later applied his design philosophies for simplicity, creating ALGOL W (1966),
    a cleaned-up version of ALGOL 60, but resigned from the IFIP standards committee
    when they would not incorporate his recommendations into the official version
    of the language.^a He also developed the Euler language (1965), Modula (1975),
    Modula-2 (1978), and several versions of Oberon (1987 et seq.).
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 他后来应用了他的简化设计哲学，创造了 ALGOL W（1966 年），这是 ALGOL 60 的简化版本，但在国际信息处理联合会（IFIP）标准委员会拒绝将他的建议纳入语言官方版本后辞去了委员会职务。他还开发了欧拉语言（1965
    年）、Modula（1975 年）、Modula-2（1978 年）和几个版本的 Oberon（1987 年及以后）。
- en: Nevertheless, it was Pascal (1970), a language explicitly designed to teach
    block-structured programming, that was perhaps Wirth’s most notable creation.
    His idea was to keep the language simple for students, unlike “commercial languages”
    that he opined were so large and complex that “nobody can understand them in their
    entirety.”
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，1970 年的帕斯卡尔（Pascal）可能是维尔特最显著的创造之一，这是一种专门设计用来教授块结构化编程的语言。他的想法是保持语言对学生简单，不像他认为的“商业语言”那样庞大复杂，“没有人能完全理解它们”。
- en: Because of its simplicity, the Pascal compiler was easy to implement. Using
    an approach to software design and development he called “stepwise refinement,”^b
    Wirth and his students steadily improved the quality of the machine code the compiler
    generated until it rivaled that of the day’s commercial FORTRAN compilers.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其简单性，帕斯卡尔编译器易于实现。利用他称之为“逐步细化”的软件设计和开发方法，维尔特和他的学生不断改进编译器生成的机器代码质量，直到它与当时的商业
    FORTRAN 编译器相媲美。
- en: At the time, many different computer architectures were used in education, so
    Wirth and his students designed the  compiler to emit an intermediate portable
    code they called *P-Code*, that could be run on a simple virtual machine. The
    virtual machine could be readily ported to different architectures, contributing
    to Pascal’s early popularity. The idea was also an inspiration for the Java virtual
    machine two decades later.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当时，教育中使用了许多不同的计算机体系结构，因此维尔特和他的学生设计了一个发出称为*P-Code*的中间可移植代码的编译器，可以在简单的虚拟机上运行。这种虚拟机可以轻松移植到不同的体系结构上，促成了帕斯卡尔的早期流行。这个想法也成为二十年后
    Java 虚拟机的灵感来源。
- en: 'At the University of California, San Diego, Ken Bowles and his students extended
    Wirth’s Pascal into a complete operating system called the UCSD p-system. An editor,
    the compiler, and runtime could all fit in less than 64KB of memory: it became
    the basis of Apple Pascal, released for the Apple II computer in August 1979,
    and Borland’s Turbo Pascal. At least a generation of students, possibly numbering
    in the millions, learned to program with these systems.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在加州大学圣迭戈分校，肯·鲍尔斯及其学生们将维尔特的Pascal扩展为一个完整的操作系统，称为UCSD p系统。编辑器、编译器和运行时都可以在不到64KB的内存中完成：这成为了Apple
    Pascal的基础，于1979年8月发布，以及Borland的Turbo Pascal。至少有一代学生，可能达到数百万人，是通过这些系统学习编程的。
- en: 'During his career at ETH where he was a professor of Informatics, Wirth spent
    two sabbaticals at Xerox PARC, where his collaborations influenced the development
    of the Modula-3 language and the Alto workstation. At ETH, he directed the development
    of an operating system with a full suite of tools and applications for the locally
    built Lillith (and later, Ceres) workstations with bitmapped displays and mice
    well before such items were commercially available. These systems were used by
    everyone in his laboratory for all their research. Martin Odersky recollects:
    “Now you might think that there would have been an army of developers doing these
    things. But no, it was Niklaus Wirth with six doctoral students, as well as some
    researchers in the associated groups of Jürg Gutknecht and Peter Mössenböck.”'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在他担任苏黎世联邦理工学院信息学教授期间，维尔特（Niklaus Wirth）在那里度过了两次学术休假，在施乐帕克（Xerox PARC）合作期间影响了Modula-3语言和Alto工作站的发展。在苏黎世联邦理工学院，他主导了一套操作系统及工具应用程序的开发，用于当地制造的Lillith（后来是Ceres）工作站，配备了位图显示和鼠标，这些在商业上可用之前就已经存在。这些系统被他实验室的所有人用于他们的所有研究工作。马丁·奥德斯基回忆道：“你可能会认为会有一群开发人员在做这些事情。但事实并非如此，这是尼克劳斯·维尔特和他的六名博士生，以及与尤尔格·古特克内赫特（Jürg
    Gutknecht）和彼得·默森伯克（Peter Mössenböck）的相关小组中的一些研究人员。”
- en: 'In addition to being the first to formally describe the top-down, stepwise
    refinement of software, Wirth also is known for Wirth’s Law: “Software is getting
    slower more rapidly than hardware is becoming faster.”'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 除了首次正式描述软件自顶向下逐步细化外，维尔特还因维尔特定律而闻名：“软件的速度下降比硬件变快更快。”
- en: Wirth’s overriding philosophy was that systems should be simple, efficient,
    and “elegant.” He forcefully (some colleagues have said “ruthlessly”) advocated
    for the reduction of both features and overhead in systems, often frustrating
    his colleagues and students when this removed functionality they wanted.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 维尔特的主要理念是系统应该简单、高效和“优雅”。他强烈（有些同事称“无情”）主张在系统中减少功能和开销，这经常会让他的同事和学生感到沮丧，特别是当这些措施删除了他们想要的功能时。
- en: Among his many honors, Wirth was an ACM Fellow, the recipient of the 1984 A.M.
    Turing Award, and a foreign associate of the U.S. National Academy of Engineering.
    He was also a recipient of both the IEEE Emanuel R. Piore and IEEE Pioneer awards.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在众多荣誉中，维尔特是ACM院士，1984年图灵奖获得者，并且是美国国家工程院的外籍成员。他还获得了IEEE Emanuel R. Piore奖和IEEE先锋奖。
- en: Additional Resources
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 其他资源
- en: Oral History; https://amturing.acm.org/pdf/WirthTuringTranscript.pdf
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 口述历史：https://amturing.acm.org/pdf/WirthTuringTranscript.pdf
- en: CHM; https://computerhistory.org/profile/niklaus-wirth/
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机历史博物馆（CHM）：https://computerhistory.org/profile/niklaus-wirth/
- en: 'Video interview: https://bit.ly/3Sj04MO'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 视频访谈：https://bit.ly/3Sj04MO
