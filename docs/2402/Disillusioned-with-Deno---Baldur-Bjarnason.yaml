- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 13:24:13'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月29日13:24:13
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Disillusioned with Deno – Baldur Bjarnason
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[Denno的幻想破灭](https://www.baldurbjarnason.com/2024/disillusioned-with-deno/)
    – Baldur Bjarnason'
- en: 来源：[https://www.baldurbjarnason.com/2024/disillusioned-with-deno/](https://www.baldurbjarnason.com/2024/disillusioned-with-deno/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.baldurbjarnason.com/2024/disillusioned-with-deno/](https://www.baldurbjarnason.com/2024/disillusioned-with-deno/)
- en: This is a part of a series where I review the work I’ve done over the past couple
    of years.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我回顾我在过去几年做的工作系列的一部分。
- en: '[*Two-year review: to plan a strategy you must first have a theory of how the
    hell things work*](/2024/2022-23-strategy-review-part-one/)'
  id: totrans-split-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[*两年回顾：要制定战略首先必须有一个关于事情原委的理论*](/2024/2022-23-strategy-review-part-one/)'
- en: '[*Out of the Software Crisis: two year project review*](/2024/out-of-the-software-crisis-two-year-review/)'
  id: totrans-split-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[*摆脱软件危机：两年项目回顾*](/2024/out-of-the-software-crisis-two-year-review/)'
- en: '[*Sunk Cost Fallacy: chasing a half-baked idea for much too long*](/2024/sunk-cost-fallacy-research-project/)'
  id: totrans-split-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[*沉没成本谬误：为了一个半成品想法而纠缠太久*](/2024/sunk-cost-fallacy-research-project/)'
- en: '[*The Intelligence Illusion: stepping into a pile of ‘AI’*](/2024/the-intelligence-illusion-stepping-into-a-pile-of-ai/)'
  id: totrans-split-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[*智能幻觉：踏入“人工智能”的一堆*](/2024/the-intelligence-illusion-stepping-into-a-pile-of-ai/)'
- en: '[*A print project retrospective: the biggest problem with selling print books
    is the software*](/2024/the-problem-with-print-is-software/)'
  id: totrans-split-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[*印刷项目回顾：卖印刷书籍的最大问题是软件*](/2024/the-problem-with-print-is-software/)'
- en: '[*Thinking about print*](/2024/thinking-about-print/)'
  id: totrans-split-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[*思考印刷品*](/2024/thinking-about-print/)'
- en: '[*Disillusioned with Deno*](/2024/disillusioned-with-deno/) (this page)'
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[*对Deno的幻想破灭*](/2024/disillusioned-with-deno/) (本页)'
- en: '[*An Uncluttered retrospective: Teachable is a mess and I need to pick a lane*](/2024/uncluttered-retrospective/)'
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[*一个不那么混乱的回顾：可教的是一团糟，我需要选一条道*](/2024/uncluttered-retrospective/)'
- en: '* * *'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: It’s inevitable that once you decide to review your own business and media strategy,
    you start to rethink and review other decisions you’ve made in the past.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你决定审查自己的业务和媒体策略，你开始重新思考和审查过去做过的其他决定是不可避免的。
- en: One of those decisions is [Deno](https://deno.com/), which I’ve used to most
    of my personal projects and experiments over the past couple of years. Most of
    these projects have been on the simpler side – command-line scripts or small websites.
    I made the [softwarecrisis.dev](https://softwarecrisis.dev/) newsletter landing
    page using [Lume and Deno](https://lume.land/), for example. I used Deno to make
    most of the prototypes for the research project that followed [Colophon Cards](https://www.colophon.cards/).
    It’s very useful.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个决定是[Deno](https://deno.com/)，我在过去几年的大部分个人项目和实验中都在使用它。其中大部分项目都比较简单 - 命令行脚本或小型网站。例如，我使用[Lume和Deno](https://lume.land/)制作了[softwarecrisis.dev](https://softwarecrisis.dev/)的通讯简讯页面。我也用Deno制作了[Colophon
    Cards](https://www.colophon.cards/)之后研究项目的大部分原型。 它非常有用。
- en: There’s a lot to like.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多赞赏的地方。
- en: 'Deno has:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: Deno具有：
- en: Overall much better support for standard browser APIs than node.
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整体上对标准浏览器API的支持要比node好得多。
- en: APIs that aren’t based on standards hew a lot closer to browser conventions,
    making switching between the front and back end a lot less jarring.
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不基于标准的API更靠近浏览器的约定，使得前端和后端之间的切换不那么突兀。
- en: An excellent standard library.
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个优秀的标准库。
- en: Much simpler installation. It comes in a single binary, making installation
    and deployment much simpler.
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装简单得多。它只有一个二进制文件，使得安装和部署简单得多。
- en: 'Most of the tooling you need: linter, test runner, benchmarking, code formatting,
    type checker, and documentation generation.'
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大部分你需要的工具：语法检查、测试运行器、基准测试、代码格式化、类型检查器和文档生成。
- en: A sensible security model for running code.
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个明智的运行代码安全模式。
- en: If you have a task that only requires the standard library or the standard tooling,
    using Deno is a dream – simplicity itself.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个只需要标准库或标准工具的任务，使用Deno就像做梦一样简单。
- en: If that task requires something *more* than that, you quickly find yourself
    in trouble.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果那个任务需要比这更多的东西，你很快就会陷入麻烦中。
- en: 'The company behind Deno has tried to conquer this problem with a two-pronged
    attack:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: Deno背后的公司试图通过两管攻势征服这个问题：
- en: Build Deno-specific versions of most of the common tools and projects that web
    projects might need.
  id: totrans-split-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建大部分网络项目可能需要的常见工具和项目的Deno特定版本。
- en: Hastily roll out node and npm compatibility for their runtime.
  id: totrans-split-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 匆忙地为他们的运行时推出了node和npm的兼容性。
- en: This has meant that a single startup has taken on the responsibility of building
    their own [scalable hosting](https://deno.com/deploy), [persistent storage product](https://deno.com/kv),
    [persistent execution queue](https://docs.deno.com/kv/manual/queue_overview),
    [realtime notification](https://docs.deno.com/kv/manual/#watching-for-updates-in-deno-kv),
    [scheduled execution](https://docs.deno.com/kv/manual/cron), [front-end React
    framework](https://fresh.deno.dev/), and no doubt a few more by the time you read
    this post.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着一个创业公司承担了建立他们自己的[可扩展托管](https://deno.com/deploy)，[持久存储产品](https://deno.com/kv)，[持久执行队列](https://docs.deno.com/kv/manual/queue_overview)，[实时通知](https://docs.deno.com/kv/manual/#watching-for-updates-in-deno-kv)，[定时执行](https://docs.deno.com/kv/manual/cron)，[前端React框架](https://fresh.deno.dev/)，当你阅读本文时，无疑还有更多项目的责任。
- en: They’re even planning to build their own full-featured package registry for
    [Deno 2.0.](https://www.reddit.com/r/Deno/comments/15nv8yv/deno_20_previewed_at_seattlejs_conf/)
    (Also, it’s quite annoying how much information out there on the future of Deno
    is only available in video.)
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 他们甚至计划为[Deno 2.0](https://www.reddit.com/r/Deno/comments/15nv8yv/deno_20_previewed_at_seattlejs_conf/)建立一个自己的功能齐全的包注册表。（另外，很让人恼火的是关于Deno未来的大部分信息只能通过视频获取。）
- en: Add to that the attempt to implement full node and npm compatibility for their
    runtime.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 再加上尝试为他们的运行时实现完整的节点和npm兼容性。
- en: 'Basically:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上：
- en: Your business model is hosting.
  id: totrans-split-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的商业模型是托管。
- en: But none of the tools and projects people commonly use are available for your
    new runtime and hosting environment, so you need to implement your own to fill
    in the gaps.
  id: totrans-split-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是，人们通常使用的工具和项目在你的新运行时和托管环境中都不可用，因此你需要自己实现来填补这些空白。
- en: Then you discover that the biggest demand for hosting is from clients with legacy
    code and legacy dependencies, so you kind of have to give them a way to bring
    them over. Compatibility it is.
  id: totrans-split-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后你发现，托管的最大需求来自具有传统代码和传统依赖的客户，所以你必须给他们提供一种方法将它们迁移过来。兼容性问题就此产生。
- en: Turns out many of the annoying features of the “legacy” system existed for a
    reason, so you have to implement them yourself, but you obviously do so in newer,
    modern, more sensible (and less backwards-compatible) ways.
  id: totrans-split-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果发现，“传统”系统中许多令人讨厌的特性存在是有原因的，所以你必须自己实现它们，但显然以更新、现代、更明智（而不那么向后兼容）的方式。
- en: This would be fine – great even – if it weren’t for the fact that you now have
    to maintain ***two*** versions of large parts of your runtime, either as a translation
    layer from the “legacy” system to your new one, or as two completely independent
    features that require maintenance.
  id: totrans-split-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不是因为现在你必须维护**两个**大部分运行时的版本，要么作为从“传统”系统到新系统的翻译层，要么作为需要维护的两个完全独立的功能，那这将是不错的，甚至是很好的。
- en: 'We’ve seen this strategy before. It’s basically [Cloudflare’s](https://www.cloudflare.com/),
    give or take a few details. Most of the differences in execution are because Cloudflare
    started on the opposite end of this particular chain of sausages: cloud hosting
    first, then [the open source runtime](https://blog.cloudflare.com/workers-open-source-announcement/),
    not the other way around as Deno did.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经见过这种策略。这基本上是[Cloudflare的](https://www.cloudflare.com/)实现，可能有些细节不同。执行中的大部分差异是因为Cloudflare从特定的一条香肠链的相反端开始：首先是云托管，然后是[开源运行时](https://blog.cloudflare.com/workers-open-source-announcement/)，而不是像Deno那样反过来。
- en: I find Deno’s tooling to be better, and their runtime much, much easier to use,
    but the overall strategy for the two companies is the same.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现Deno的工具更好，他们的运行时也更易于使用，但两家公司的总体策略是相同的。
- en: '[Bun](https://bun.sh/) has the same playbook, with their only innovation being
    that, since they began later, they understood the need for node and npm compatibility
    from the very beginning.'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[Bun](https://bun.sh/)采用了同样的策略，他们唯一的创新是，由于他们开始较晚，他们从一开始就理解了节点和npm的兼容性需求。'
- en: I don’t think this approach is going to work out that well for any of them.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我不认为这种方法对他们任何人都会特别有效。
- en: The “legacy” compatibility effectively removes any incentive to make packages
    for Deno (or Cloudflare, or Bun). Why use [`dnt`](https://github.com/denoland/dnt)
    to create packages that are compatible with both Deno and Node when you can just
    make a Node package? ***It’s still going to be compatible with both Deno and Node.***
    Deno themselves have seen to that. You’re going to get cross-runtime compatibility
    either way.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: “传统”兼容性实际上消除了为Deno（或Cloudflare或Bun）创建软件包的任何动力。为什么要使用[`dnt`](https://github.com/denoland/dnt)创建同时兼容Deno和Node的软件包，当你可以只创建一个Node软件包呢？***它仍然可以同时与Deno和Node兼容。***这一点Deno已经确保了。你无论如何都会获得跨运行时的兼容性。
- en: The risk is that Deno will effectively become a platform for running code and
    projects from the npm ecosystem. Except it will never be as good at “node” as
    node itself.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 风险在于Deno将有效地成为运行npm生态系统中代码和项目的平台。但它永远不会像Node本身那样“node”。
- en: There are always going to be gaps in the node and npm compatibility layer because
    *node is a moving target*. It’s a living project that’s still changing.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: Node和npm兼容性层始终会存在差距，因为*Node是一个不断变化的移动目标*。它是一个仍在变化的活跃项目。
- en: '* * *'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: If Deno were maintained by a foundation or open source community, I’d be less
    worried. It’d inevitably be smaller in scope, but that would be fine. You don’t
    need world domination to be a successful community-driven software project. It
    could find its niche, with time.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Deno由一个基金会或开源社区维护，我会少些担忧。它的范围不可避免地会更小，但那也没关系。你不需要世界统治来成为一个成功的社区驱动软件项目。它可以找到自己的利基，随着时间的推移。
- en: But you do need to conquer a big chunk of the world to be a successful VC-funded
    startup.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 但是要成为一家成功的VC资助的初创公司，你确实需要征服世界的一大块。
- en: There is already a disconnect in the Deno ecosystem. Many of the third party
    modules seem to be stagnant and haven’t been updated in a while. The projects
    that do seem vibrant tend to be the ones that target browser-compatible platforms
    in general and so get Deno, Cloudflare, and Bun support almost for free through
    little specific effort of their own.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: Deno生态系统中已经存在断裂。许多第三方模块似乎停滞不前，有一段时间没有更新。看起来充满活力的项目往往是那些一般面向浏览器兼容平台的项目，因此它们通过自身的努力几乎不费吹灰之力地获得了Deno、Cloudflare和Bun的支持。
- en: Node hasn’t been standing still either. They’re adding support for many of the
    features that made Deno special, such as built-in tooling, a [test runner with
    coverage](https://nodejs.org/docs/latest/api/test.html), and [HTTP imports](https://nodejs.org/docs/latest/api/esm.html#https-and-http-imports).
    Even [import maps](https://github.com/nodejs/loaders#milestone-3-usability-improvements)
    are on their roadmap.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: Node也没有停滞不前。它们正在添加支持许多使Deno特殊的功能，例如内置工具、具有覆盖率的[测试运行器](https://nodejs.org/docs/latest/api/test.html)和[HTTP导入](https://nodejs.org/docs/latest/api/esm.html#https-and-http-imports)。甚至[导入映射](https://github.com/nodejs/loaders#milestone-3-usability-improvements)也在他们的路线图上。
- en: The fate of Node also doesn’t depend on the fate of a single startup or tech
    company.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: Node的命运也不依赖于一个单一初创公司或技术公司的命运。
- en: The npm ecosystem remains a strategic liability, but adding support for import
    maps and HTTP imports will go some way to mitigate that and in the meantime you
    can install node packages [directly from git](https://medium.com/pravin-lolage/how-to-use-your-own-package-from-git-repository-as-a-node-module-8b543c13957e)
    or use an npm-compatible third party repository. [Any git remote URL should work
    with `npm install`](https://docs.npmjs.com/cli/v10/commands/npm-install#:~:text=npm%20install%20%3Cgit%20remote%20url%3E)
    – no GitHub required.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: npm生态系统仍然是一个战略性的负担，但支持导入映射和HTTP导入将在某种程度上缓解这一问题，同时你可以直接从git安装Node软件包，或使用兼容npm的第三方存储库。[任何git远程URL都可以与`npm
    install`一起使用](https://docs.npmjs.com/cli/v10/commands/npm-install#:~:text=npm%20install%20%3Cgit%20remote%20url%3E)%20%E2%80%93%20无需GitHub。
- en: Seeing money and talent drain out of the software ecosystem, companies switch
    en masse to inherently conservative LLMs for development, and a growing frustration
    among software developers in general, it’s hard to envision a future where Deno
    or Bun win out in a direct competition with Node.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 观察到资金和人才从软件生态系统中流失，公司们集体转向固有保守的LLMs进行开发，以及一般软件开发人员日益增长的挫败感，很难想象在直接与Node竞争中，Deno或Bun能取得胜利的未来。
- en: I’m not convinced I want to be using either of them once their VC-backed startups
    become desperate.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不确定在它们的VC支持的初创公司变得绝望后，我是否还想使用它们中的任何一个。
- en: For those of us who *do* like to work in JavaScript, this means that Node is
    our best bet for the back end in the long term.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们这些喜欢使用 JavaScript 工作的人来说，这意味着 Node 在长期内是我们在后端的最佳选择。
- en: It’s probably time to try to recreate in node what has made Deno such a joy
    to work with.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在或许是时候尝试在 Node 中重新创建使 Deno 如此愉快的工作方式了。
- en: But Node’s improvements aren’t the only issue facing Deno.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 但是 Node 的改进并非 Deno 面临的唯一问题。
- en: The big one is that the logical alternatives to Node – the “no Node” work environments
    developers are likely to reach for *aren’t going to be based on JavaScript*. Import
    maps mean that browsers effectively have an API surface that non-JS projects can
    use to build a dependency management system. Much of the tooling surrounding JavaScript
    is now implemented in *Rust*, not JS – much of it driven by Deno itself – and
    that makes it more easily accessible outside both the Node and Deno ecosystems.
    [The WASM component model](https://component-model.bytecodealliance.org/) additionally
    promises to make many dependencies runtime-independent, with the Rust-based tooling
    around JS being logical initial targets.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的问题是，与 Node 的逻辑替代方案——开发者可能会寻求的“无 Node”工作环境——*不会基于 JavaScript*。导入映射意味着浏览器实际上拥有非
    JS 项目可以使用的 API 表面，用于构建依赖管理系统。现在，围绕 JavaScript 的许多工具是用 *Rust* 实现的，而不是 JS —— 其中许多工具是由
    Deno 本身驱动的 —— 这使得它更容易在 Node 和 Deno 生态系统之外使用。此外，[WASM 组件模型](https://component-model.bytecodealliance.org/)
    还承诺使许多依赖项与运行时无关，Rust-based 工具围绕 JS 是逻辑的初始目标。
- en: The “no Node” alternative for many won’t be another JavaScript runtime, but
    instead *something completely different.*
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多人来说，“无 Node”的替代方案可能不是另一个 JavaScript 运行时，而是 *完全不同的东西*。
