- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:41:56'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:41:56'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: libyaml-safer
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: libyaml-safer
- en: 来源：[https://simonask.github.io/libyaml-safer/](https://simonask.github.io/libyaml-safer/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://simonask.github.io/libyaml-safer/](https://simonask.github.io/libyaml-safer/)
- en: <main>Simon Ask Ulsnes, 2024-02-08
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main>Simon Ask Ulsnes, 2024-02-08
- en: '* * *'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Porting libyaml to Safe Rust: Some Thoughts'
  id: totrans-split-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 libyaml 移植到安全的 Rust 中：一些想法
- en: The following is a loose collection of thoughts that came up while porting [unsafe-libyaml](https://github.com/dtolnay/unsafe-libyaml)
    to safe, idiomatic Rust, which may be useful to someone else who is considering
    "rewriting it in Rust", as the ancient journeyman prayer goes.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是在将 [unsafe-libyaml](https://github.com/dtolnay/unsafe-libyaml) 移植为安全、符合 Rust
    语法的过程中，我想到的一些松散的想法，这些想法可能对考虑“用 Rust 重写它”的其他人有用，正如古老的行业守旧者祈祷的方式。
- en: '*Some context:* [YAML](https://yaml.org/) is a commonly used markup language,
    similar to JSON, and the primary way that Rust programmers interact with it is
    through [serde_yaml](https://crates.io/crates/serde_yaml), a serializer/deserializer
    implementation targeting YAML through the very popular Serde framework, which
    is backed by an almost verbatim machine translation of the C [libyaml](https://pyyaml.org/wiki/LibYAML)
    library into unsafe Rust, called [unsafe-libyaml](https://github.com/dtolnay/unsafe-libyaml).
    The translation is made with [c2rust](https://c2rust.com/), with only minor fixes
    applied manually.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*背景信息：* [YAML](https://yaml.org/) 是一种常用的标记语言，类似于 JSON，Rust 程序员主要通过 [serde_yaml](https://crates.io/crates/serde_yaml)
    与之交互，这是一个针对 YAML 的序列化/反序列化实现，基于广受欢迎的 Serde 框架，其背后几乎是对 C [libyaml](https://pyyaml.org/wiki/LibYAML)
    库的逐字机器翻译，翻译成了 Rust 中的不安全代码，称为 [unsafe-libyaml](https://github.com/dtolnay/unsafe-libyaml)。这一翻译是通过
    [c2rust](https://c2rust.com/) 实现的，仅手动应用了少量修正。'
- en: In my case, I was in a situation where I needed to interact with YAML in a way
    where [serde_yaml](https://crates.io/crates/serde_yaml) came up short. Specifically
    I needed input location markers outside of error messages to support diagnostics
    and debugging in the context of a game, where the AI behavior trees are defined
    in YAML files.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，我面临的情况是需要以一种 [serde_yaml](https://crates.io/crates/serde_yaml) 无法满足的方式与
    YAML 交互。具体来说，我需要在游戏的上下文中支持诊断和调试，除了错误消息外还需要输入位置标记，因为在该游戏中，AI 行为树是用 YAML 文件定义的。
- en: But the unsafe libyaml API is actually pretty unwieldy to use from Rust, even
    when translated to Rust code, because it behaves exactly like the C code, so it
    is no different than calling out to an actual C library with FFI. So I - perhaps
    foolishly, in a flash of manic youthful optimism - decided to embark on the journey
    of porting [unsafe-libyaml](https://github.com/dtolnay/unsafe-libyaml) to safe
    Rust, function by function, line by line. It took a little over a week.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际上，即使将不安全的 libyaml API 翻译成 Rust 代码后，它在 Rust 中的使用起来仍然非常笨拙，因为它的行为与 C 代码完全一样，所以与直接调用实际的
    C 库并无二致。因此，我——或许是年轻时充满狂热乐观的一时冲动——决定逐个函数、逐行将 [unsafe-libyaml](https://github.com/dtolnay/unsafe-libyaml)
    移植为安全的 Rust。整个过程花了一周多一点的时间。
- en: The [result is available on GitHub](https://github.com/simonask/libyaml-safer).
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[GitHub 上的结果可用](https://github.com/simonask/libyaml-safer)。'
- en: '**Update 2024-02-09:** libyaml-safer has now been [published to crates.io](https://crates.io/crates/libyaml-safer)
    as well.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新 2024-02-09：** 现在已经将 libyaml-safer [发布到 crates.io](https://crates.io/crates/libyaml-safer)。'
- en: What are we dealing with?
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们正在处理什么？
- en: 'libyaml consists of two main components:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: libyaml 主要由两个组件组成：
- en: YAML parser, which consumes a stream of bytes and produces "events" representing
    the structure of the document.
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YAML 解析器负责消耗字节流并产生表示文档结构的“事件”。
- en: YAML emitter, which consumes a stream of events and produces a stream of bytes.
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YAML 发射器负责消耗事件流并产生字节流。
- en: The byte streams, both input and output, can be in different encodings, one
    of UTF-8, UTF-16 little-endian, or UTF-16 big-endian. Most, but not all, Unicode
    code points are supported - notably, control characters are not supported.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 字节流（包括输入和输出）可以采用不同的编码方式，其中包括 UTF-8、UTF-16 小端和 UTF-16 大端。大多数 Unicode 代码点都被支持，但并非全部，特别是不支持控制字符。
- en: Events in libyaml are a linear representation of the logical structure of a
    document, so higher level than parser tokens, but lower level than mappings, sequences,
    and scalar values. Events are things like "begin mapping", "begin mapping key",
    "scalar", etc.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: libyaml 中的事件是文档逻辑结构的线性表示，比解析器标记高级但比映射、序列和标量值低级。事件包括“开始映射”，“开始映射键”，“标量”等。
- en: Libyaml also contains a high-level abstraction, `yaml_document_t`, which can
    represent any YAML document. The parser can load a stream of events into a document,
    and the emitter can produce a stream of events from a document.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: Libyaml 还包含一个高级抽象，`yaml_document_t`，它可以表示任何 YAML 文档。解析器可以将事件流加载到文档中，而发射器可以从文档中生成事件流。
- en: Eldritch Horrors, or just C
  id: totrans-split-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 厄尔德里奇恐怖，或者只是 C
- en: '[libyaml](https://pyyaml.org/wiki/LibYAML) is squarely a C library, and reading
    it from the point of view of a Rust programmer, there is a beautiful insanity
    to it all. It hails from a simpler time, where concepts like ownership, mutability,
    and the fabric of reality were up for debate.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[libyaml](https://pyyaml.org/wiki/LibYAML) 明确是一个 C 库，从 Rust 程序员的角度来看，阅读它时会觉得这一切都非常美妙而疯狂。它来自一个更简单的时代，像所有权、可变性和现实的本质这样的概念都在争论之中。'
- en: It isn't "wrong", just different. Unnecessarily difficult in many ways, but
    in other ways refreshingly straightforward, so long as you can keep the cosmic
    horror only just barely out of sight.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 它并不是“错误”的，只是不同。在许多方面不必要地困难，但在其他方面，只要你能够将宇宙恐怖尽量地藏起来，它就是令人耳目一新的直接方式。
- en: String Theory
  id: totrans-split-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弦理论
- en: YAML is a human-readable format, and any parser for it must deal with a *lot*
    of strings. Thankfully, libyaml does the sane thing and defines its own string
    type - which almost every single C library in existence does, and even many larger
    C++ libraries - and sometimes they don't even contain very many bugs. I swear
    the history of the world would have looked very, very different if our venerable
    forebears had extended their otherwise infinite benevolence to the inclusion of
    a sane string type with the standard C library, but again I digress.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 是一种人类可读的格式，任何解析器都必须处理大量的字符串。幸运的是，libyaml 做了理智的选择，并定义了自己的字符串类型 - 几乎每一个现存的
    C 库都这么做了，甚至许多更大的 C++ 库也是如此 - 有时它们甚至并不包含很多错误。我发誓，如果我们尊敬的祖先在标准 C 库中包含了一个理智的字符串类型，世界历史可能会看起来非常不同，但我又岔开了话题。
- en: 'This is the string abstraction in [libyaml](https://pyyaml.org/wiki/LibYAML):'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在 [libyaml](https://pyyaml.org/wiki/LibYAML) 中的字符串抽象：
- en: '[PRE0]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `start` and `end` fields seem straightforward: A pointer to the beginning
    of the string and a pointer to one-past-the-end of the string. So far so good.
    But what about `pointer`? Some places in the code it is used as the actual end
    of the string (so `end` is actually the end of the allocated capacity of the string),
    and in others it is used as the actual start of the string, so `start` is the
    beginning of the underlying allocation, and `pointer` is used to iterate over
    bytes or substrings of the string.'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`start` 和 `end` 字段似乎很直接：一个指向字符串开头的指针，一个指向字符串结束后的一个位置。到目前为止一切顺利。但是`pointer`呢？在代码中的某些地方，它被用作字符串的实际结束（因此`end`实际上是字符串分配容量的末尾），在其他地方，它被用作字符串的实际开始，因此`start`是底层分配的开始，而`pointer`用于迭代字符串的字节或子字符串。'
- en: What's going on here?
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里到底发生了什么？
- en: 'It turns out that this data structure serves multiple different purposes simultaneously:
    It is both `&str`, `String`, and `std::slice::Iter`, all in one. Sometimes it
    is even the `std::str::Chars` iterator, which is used to iterate over full UTF-8
    codepoints within the string. The only way to determine which abstraction it is
    currently emulating is to look at the context.'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，这种数据结构同时服务于多个不同的目的：它既是`&str`、`String`，也是`std::slice::Iter`，通通包含其中。有时甚至是`std::str::Chars`迭代器，用于在字符串中迭代完整的
    UTF-8 代码点。唯一确定它当前模拟的抽象的方法是查看上下文。
- en: Thankfully - libyaml being a well-structured C project - there are plenty of
    context clues. When the `STRING_DEL()` macro is being used, the caller assumes
    ownership. When the `STRING_ASSIGN()` macro is being used, the string is being
    borrowed and/or used as an iterator.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是 - libyaml 是一个结构良好的 C 项目 - 有大量的上下文线索。当使用 `STRING_DEL()` 宏时，调用者假设拥有所有权。当使用
    `STRING_ASSIGN()` 宏时，字符串被借用和/或用作迭代器。
- en: 'The interesting takeaway is this: For all of the different roles that `yaml_string_t`
    takes on, it turns out there is an abstraction in the Rust standard library that
    matches each use case precisely. At all points in the libyaml source code where
    strings are used, the use case maps directly to one of the *several* many ways
    of dealing with strings in Rust. Phew!'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的结论是：对于 `yaml_string_t` 承担的所有不同角色，事实证明 Rust 标准库中有一个精确匹配每个用例的抽象。在 libyaml 源代码中使用字符串的所有点上，用例直接映射到
    Rust 中处理字符串的*几种*方法之一。咻！
- en: '*Joyful aside:* There is a similar type in libyaml, called `yaml_buffer_t`.
    It is slightly more complicated than strings, because it acts essentially as a
    ring buffer, and it turned out to be almost very close to a `VecDeque` from the
    standard library. Hooray!'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*快乐的旁白：* 在 libyaml 中有一个类似的类型，称为`yaml_buffer_t`。它比字符串稍微复杂一些，因为它本质上充当环形缓冲区，它几乎非常接近标准库中的`VecDeque`。万岁！'
- en: Self-referential types - Oh my!
  id: totrans-split-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自引用类型 - 哦！
- en: YAML syntax can represent the same thing in multiple ways. For example, sequences
    and mappings can be represented in both "flow style" and "block style", and strings
    can be single-quoted, double-quoted, unquoted, block-quoted, etc.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 语法可以用多种方式表示相同的内容。例如，序列和映射可以用“流式样式”和“块样式”表示，字符串可以是单引号、双引号、无引号、块引号等。
- en: '[PRE1]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The libyaml emitter wants to choose both nice and correct formatting for the
    output. Not just for the aesthetic, but also because some things actually require
    specific styles - for example, escape sequences are only supported in double-quoted
    strings, and some Unicode characters need to be represented as escape sequences.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: libyaml 发射器希望为输出选择既好看又正确的格式。这不仅仅是为了美观，还因为某些东西确实需要特定的样式 - 例如，转义序列仅支持双引号字符串，而某些
    Unicode 字符需要表示为转义序列。
- en: The emitter works by pushing "events" to a queue. Events are things like "begin
    mapping", "begin mapping key", "begin mapping value", "end mapping", and so on,
    and the emitter writes to the output when it has enough information to determine
    the appropriate style.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 发射器通过将“事件”推送到队列来工作。事件包括诸如“开始映射”、“开始映射键”、“开始映射值”、“结束映射”等，发射器在具备足够信息以确定适当样式时写入输出。
- en: This is implemented in libyaml as an "analysis" step that happens for each event
    before the corresponding YAML is written to the output.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这在 libyaml 中实现为每个事件在写入到输出之前进行的“分析”步骤。
- en: '[PRE2]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The analysis step populates the `emitter->anchor_data`, `emitter->tag_data`,
    and `emitter->scalar_data` fields depending on the event type. Those fields that
    can be `NULL` are C strings, and they refer to the strings contained within the
    `event`. But the `event` comes from a queue owned by `yaml_emitter_t`. This is
    great design in the C library, because it makes the analysis step extremely cheap
    - no strings are duplicated, only "borrowed".
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 分析步骤根据事件类型填充`emitter->anchor_data`、`emitter->tag_data`和`emitter->scalar_data`字段。那些可以为`NULL`的字段是
    C 字符串，并且它们引用事件中包含的字符串。但是事件来自由`yaml_emitter_t`拥有的队列。这是 C 库中的很好的设计，因为它使得分析步骤非常廉价
    - 没有字符串被复制，只是“借用”。
- en: So how do we express the analysis fields in safe Rust? Blindly porting the C
    approach to Rust would result in `yaml_emitter_t` becoming self-referential, since
    the analysis pointers would either point into the event queue or into an event
    that was just popped from the queue, making it impossible to represent that lifetime
    on `yaml_emitter_t` itself.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何在安全的 Rust 中表示分析字段呢？盲目地将 C 的方法移植到 Rust 中将导致`yaml_emitter_t`变得自引用，因为分析指针将指向事件队列或刚从队列中弹出的事件，这使得在`yaml_emitter_t`本身上表示那个生命周期是不可能的。
- en: '**Key Insight:** Every time `yaml_emitter_analyze_event()` is called, it resets
    any previous analysis results. It is called exactly once per event. Aha! What
    if the results of the analysis was a return value from `yaml_emitter_analyze_event()`,
    instead of modifying fields on the emitter?'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**关键洞见：** 每次调用`yaml_emitter_analyze_event()`时，它都会重置任何先前的分析结果。每个事件只调用一次。啊哈！如果分析的结果是从`yaml_emitter_analyze_event()`的返回值，而不是修改发射器上的字段呢？'
- en: '[PRE3]'
  id: totrans-split-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Wonderful! Now the `Analysis<'a>` struct just needs to be passed into any emitter
    function that needs the analysis as an extra parameter. Thankfully no public API
    function on the emitter relies on analysis having happened previously, so threading
    that argument through the emitter code is fairly trivial, and guaranteed bug-free
    due to lifetime annotations, in the sense that it is not possible for any part
    of the emitter to use the analysis of one event during the emission of another
    event.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 精彩！现在只需将`Analysis<'a>`结构体传递给任何需要额外参数作为分析的发射器函数即可。值得庆幸的是，发射器上没有公共 API 函数依赖于先前已进行的分析，因此通过发射器代码传递该参数是相当简单的，并且由于生命周期注解的缘故，保证没有
    bug，即使在发射另一个事件期间使用一个事件的分析也是不可能的。
- en: On the one hand, this change is something that we're forced to do by Rust, because
    it would not be possible to make the borrow checker happy without it. On the other
    hand, the Rust compiler actually nudges us to choose a better design than the
    original.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，这种变化是我们受Rust强制执行的，因为没有这样做borrow checker是无法高兴的。另一方面，Rust编译器实际上鼓励我们选择比原始设计更好的设计。
- en: Why is this beneficial? Why do we accept such blatant tyranny by the cruel and
    cold-hearted borrow checker?
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这有什么好处呢？为什么我们要接受如此明显的暴政，由残忍无情的借用检查器所施加的？
- en: Well, see, reading the original source code for libyaml was hard. Upon seeing
    the `anchor_data`, `tag_data`, and `scalar_data` fields of `yaml_emitter_t`, the
    first thing any reader or maintainer has to do is figure out how those pointers
    are used and when they are valid. This required a whole bunch of forensics, which
    would have to happen again and again every time someone new looked at the code,
    and "someone new" also includes "future you".
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，你看，阅读`libyaml`的原始源代码是很困难的。当看到`yaml_emitter_t`的`anchor_data`、`tag_data`和`scalar_data`字段时，任何阅读者或维护者都必须弄清楚这些指针如何使用以及它们何时有效。这需要进行大量的取证工作，而且每当有新的人看代码时都需要再次进行这些操作，而“新的人”也包括“未来的你”。
- en: The original design from the C code could have been ported verbatim to Rust.
    But it would require a lot of unsafe code, which would have made it very obvious
    that some cognitive overhead was being incurred. By choosing a design that works
    in safe Rust, that cognitive overhead has been moved to a statically verified
    invariant that is plainly visible in the source code. The new signature of `yaml_emitter_analyze_event`
    plainly documents that `Analysis<'a>` contains references that are coming from
    a `yaml_event_t` with lifetime `'a`.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: C代码的原始设计可以逐字移植到Rust中。但这将需要大量的不安全代码，这将使人明显感受到认知负担。通过选择在安全的Rust中运行的设计，这种认知负担已经被转移到静态验证的不变量上，这在源代码中是显而易见的。`yaml_emitter_analyze_event`的新签名清楚地说明`Analysis<'a>`包含从`yaml_event_t`中引用的生命周期为`'a`的内容。
- en: Error handling
  id: totrans-split-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误处理
- en: One of my goals with libyaml-safer was to provide near perfect error fidelity
    compared with libyaml.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我在libyaml-safer中的一个目标是与libyaml相比提供接近完美的错误保真度。
- en: Mercifully, C does not have exceptions. They are easily among the top 20 of
    humanity's mistakes, and don't even come for me because I will die on this hill.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，C语言没有异常处理。它们毫无疑问位列人类历史上前20大错误之中，千万别跟我辩，因为我会一死到底。
- en: Instead, C code usually reports errors by returning an error code, and this
    is already a primitive version of what Rust does. The flow around error handling
    is surprisingly similar between well-structured C code and idiomatic Rust code.
    Rust has the "try" operator `?` to make things easier, and one of the important
    affordances of [unsafe-libyaml](https://github.com/dtolnay/unsafe-libyaml) (Rust)
    over [libyaml](https://pyyaml.org/wiki/LibYAML) (C) is that integer return codes
    are replaced with a bespoke `Success` struct. Replacing this with [`Result`](https://doc.rust-lang.org/stable/std/result/enum.Result.html)
    turned out to be [pretty trivial](https://github.com/simonask/libyaml-safer/commit/dc639b92b5754f58e8e8f7979449ba6aca54c3a6).
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，C代码通常通过返回错误码来报告错误，这已经是Rust所做的功能的一个原始版本。在良好结构化的C代码和惯用Rust代码之间的错误处理流程中，有些惊人的相似之处。Rust使用“尝试”运算符`?`来简化事务，而[unsafe-libyaml](https://github.com/dtolnay/unsafe-libyaml)（Rust）相对于[libyaml](https://pyyaml.org/wiki/LibYAML)（C）的一个重要改进是，整数返回码被替换为定制的`Success`结构。将其替换为[`Result`](https://doc.rust-lang.org/stable/std/result/enum.Result.html)事实上是相当简单的。
- en: But wait a minute... We can't just use the `?` straight away. It checks if an
    error occurred and returns early from the function if it did, but C does not have
    RAII, so resources need to be released as well before returning. This is the one
    remaining valid use case of `goto` in the C language, and it is often actually
    the most sustainable way to deal with errors. More civilized languages (such as
    Rust) don't even have this misfeature.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 但等等……我们不能直接使用`?`。它检查是否发生了错误，并在函数中早期返回，但C语言没有RAII，因此在返回之前还需要释放资源。这是C语言中`goto`的唯一剩下的有效用例，而且通常实际上是处理错误的最可持续的方式。更文明的语言（如Rust）甚至没有这种误用特性。
- en: '[PRE4]'
  id: totrans-split-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Thus, in order to start leveraging the error handling features of Rust, all
    things that own memory must first be converted to RAII objects, such as `String`,
    `Vec`, `VecDeque`, etc.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了开始利用Rust的错误处理功能，所有拥有内存的事物必须首先转换为RAII对象，如`String`、`Vec`、`VecDeque`等。
- en: After that, there is the problem of actually reporting the error.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 之后还存在实际上报告错误的问题。
- en: 'Rust `Result`s are rich: They can contain an error value of your choice, so
    you can provide the best possible message for the users, giving them all the context
    they need. C does not have this option built in, and most libraries opt for simply
    returning an error code, and then sometimes allowing the programmer to obtain
    more information about the error after the fact.'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: Rust的`Result`很丰富：它们可以包含您选择的错误值，因此可以为用户提供最佳可能的消息，为他们提供所有所需的上下文。C没有内置此选项，大多数库选择简单返回错误代码，然后有时允许程序员在事后获取有关错误的更多信息。
- en: 'In libyaml, this looks like so:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在libyaml中，看起来是这样的：
- en: '[PRE5]'
  id: totrans-split-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When an error occurs, the relevant function (such as `yaml_parser_parse()`)
    sets the error fields (`yaml_set_parser_error()`), and returns an integer indicating
    that an error occurred. The user is then expected to access these fields to determine
    what the error was and where in the input it occurred.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生错误时，相关函数（例如`yaml_parser_parse()`）设置错误字段（`yaml_set_parser_error()`），并返回指示发生错误的整数。然后期望用户访问这些字段以确定错误及其发生位置。
- en: In Rust, we don't want a special "error" state for the parser. Ideally, we want
    to be able to return a self-contained error instead, which can then have all the
    usual niceties, like an implementation of `std::fmt::Display`.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在Rust中，我们不希望解析器有一个特殊的"错误"状态。理想情况下，我们希望能够返回一个自包含的错误，然后可以具备所有通常的美好之处，例如`std::fmt::Display`的实现。
- en: 'Note also that the reported error is not necessarily a "parse error". Lots
    of errors can occur that aren''t typically considered syntax errors: I/O read
    errors, invalid Unicode, tokenization errors, etc.'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意报告的错误不一定是"解析错误"。可能发生许多通常不被视为语法错误的错误：I/O读取错误，无效的Unicode，标记化错误等等。
- en: 'Let''s try with some enums:'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些枚举：
- en: '[PRE6]'
  id: totrans-split-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So nice, perfect fidelity and high-quality error reporting. Except... On a
    64-bit architecture, the size of the top-level `ParserError` enum is 88 bytes,
    mostly due to the `Mark` type, which indicates a location in the input, and which
    looks like this:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，完美的保真度和高质量的错误报告。除了...在64位架构上，顶级`ParserError`枚举的大小为88字节，主要是由于`Mark`类型，它表示输入中的位置，看起来像这样：
- en: '[PRE7]'
  id: totrans-split-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 24 bytes, and each error typically needs 2 marks.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 24字节，每个错误通常需要2个标记。
- en: Why is the size a problem?
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么大小会成为问题？
- en: Even the minimal `Result<(), ParserError>` can never be returned in a register.
  id: totrans-split-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 即使是最小的`Result<(), ParserError>`也永远无法在寄存器中返回。
- en: Every function that encounters a `Result<T, ParserError>` and wants to return
    `Result<U, ParserError>` needs to re-wrap the return value, no matter if an error
    occurred or not, leading to a lot of copying of large structs in stack memory.
  id: totrans-split-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个遇到`Result<T, ParserError>`且想返回`Result<U, ParserError>`的函数都需要重新包装返回值，无论是否发生错误，导致在栈内存中复制大型结构体的大量操作。
- en: While LLVM will [inline calls to `memcpy()` below 128 bytes](https://github.com/rust-lang/rust/pull/64302#issuecomment-529840404),
    instructions to copy these values are still generated.
  id: totrans-split-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然LLVM在128字节以下会内联调用`memcpy()`（https://github.com/rust-lang/rust/pull/64302#issuecomment-529840404），但仍会生成复制这些值的指令。
- en: The parser makes a huge number of tiny calls, and each of them can fail. Every
    time it needs a new token, it might also need a new character, meaning it might
    also need another byte from the input buffer, meaning it might also need to perform
    a `read()` operation from the input, which can fail with `std::io::Error`, or
    with a Unicode decoding error, or with a tokenization error, and finally a parser
    error.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 解析器产生大量微小调用，每个调用都可能失败。每次它需要一个新的标记时，可能也需要一个新的字符，这意味着可能还需要从输入缓冲区中获得另一个字节，这可能会导致从输入执行`read()`操作失败，或者出现Unicode解码错误，或者标记化错误，最终是解析器错误。
- en: All in all, a very large error type like this is... not great.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，像这样一个非常大的错误类型...并不好。
- en: 'There are a couple of options for moving forward:'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种前进的选择：
- en: Mimic the libyaml style of errors, and set error codes on the parser object
    itself. This gives a much less ergonomic API, or would introduce a lifetime parameter
    on all return values that isn't very nice.
  id: totrans-split-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模仿libyaml风格的错误，并在解析器对象本身上设置错误代码。这会导致API不太符合人体工程学，或者需要在所有返回值上引入一个不太好的生命周期参数。
- en: Codegolfing the above enums to reduce the size. Not much can be won without
    losing fidelity, but it could probably get down to about 64 bytes.
  id: totrans-split-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对上述枚举进行Codegolf以减小大小。没有太多可以赢得的地方而不失真，但可能可以减少到大约64字节左右。
- en: Wrap the error in a `Box`, reducing the size to only 8 bytes on 64-bit platforms.
    The heap allocation isn't great, but it would only happen in error scenarios,
    so it's trading some efficiency in the error path for a faster "happy" path.
  id: totrans-split-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将错误包装在一个`Box`中，在64位平台上仅占用8字节。堆分配不是最佳选择，但仅在错误场景下发生，因此在错误路径上牺牲了一些效率，以换取更快的“正常”路径。
- en: Accept that this is our life now and move on.
  id: totrans-split-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受这就是我们现在的生活，继续前进。
- en: All compromises, either in usability or performance.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的妥协，无论是在可用性还是性能上。
- en: I benchmarked options (3) and (4) against each other in the happy path, and
    there wasn't much difference. But it still *feels wrong*, and committing to an
    "inefficient" public API where the user can see the inner workings of the error
    enums is a semver hazard, so for now I've chosen an API that supports both implementations,
    and boxed (3) under the hood.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我在“正常”路径上将选项（3）和（4）进行了基准测试，它们之间没有太大的区别。但这仍然*感觉不对*，承诺向用户公开API内部工作原理的“低效”公共API是一个semver的风险，因此目前我选择了一个支持两种实现的API，并在底层使用了装箱（3）。
- en: Zooming out, it's worth noting that [`serde_yaml::Error`](https://docs.rs/serde_yaml/latest/src/serde_yaml/error.rs.html#12)
    has actually chosen (3), a boxed error, which is an indication that I am not the
    only person in the world in considering this an acceptable tradeoff.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 放大来看，值得注意的是，[`serde_yaml::Error`](https://docs.rs/serde_yaml/latest/src/serde_yaml/error.rs.html#12)实际上选择了（3），一个装箱错误，这表明我并不是唯一一个认为这是可以接受的折衷方案的人。
- en: Freebies
  id: totrans-split-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 免费赠品
- en: Rust, being a younger language, has a much richer standard library. This means
    that several things that are implemented manually in libyaml can be replaced with
    standard facilities.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: Rust作为一种年轻的语言，拥有更丰富的标准库。这意味着在libyaml中手动实现的几件事情可以用标准设施来替代。
- en: UTF-8 and UTF-16 encoding/decoding. These aren't particularly complicated, but
    the Rust standard library is likely to be better optimized (for example, using
    SIMD when available).
  id: totrans-split-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UTF-8和UTF-16编码/解码。这些并不特别复杂，但Rust标准库可能会更好地优化（例如，在可用时使用SIMD）。
- en: Rather than user-provided unsafe callbacks, input and output can be handled
    by the `std::io::Read` and `std::io::Write` traits. This gives users the ability
    to plug anything in there, such as tty streams, network streams, etc., with no
    extra effort.
  id: totrans-split-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 而不是用户提供的不安全回调，输入和输出可以由`std::io::Read`和`std::io::Write`特性处理。这使用户能够在其中插入任何内容，例如tty流、网络流等，而无需额外的努力。
- en: The parser requires some input buffering to perform correct decoding, but libyaml
    is practically forced to do this by itself, even when the input is already buffered
    by the user. By using the `std::io::BufRead` trait, an entire intermediate buffer
    was eliminated from the parser, meaning that if the data is already coming from
    an in-memory buffer, the unnecessary copy is elided.
  id: totrans-split-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析器需要一些输入缓冲区来执行正确的解码，但是libyaml几乎被迫自己执行这一操作，即使输入已经被用户缓冲。通过使用`std::io::BufRead`特性，解析器的整个中间缓冲区被消除，这意味着如果数据已经来自内存缓冲区，则可以避免不必要的复制。
- en: Testing
  id: totrans-split-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: '`unsafe-libyaml` is automatically tested against [the official YAML test suite](https://github.com/yaml/yaml-test-suite).
    Having this comprehensive test suite was an absolute necessity when porting to
    safe Rust, and I would not have dared to embark on this endeavor without it.'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`unsafe-libyaml`自动针对[官方YAML测试套件](https://github.com/yaml/yaml-test-suite)进行测试。在转换为安全的Rust时，拥有这个全面的测试套件是绝对必要的，没有它我不敢着手进行这项工作。'
- en: For every change to the code, I was able to run the full test suite and verify
    that everything was as it should be. And even though the code was ported with
    a true dedication to matching the original semantics, and even the general "shape"
    of the API, many things could go wrong - particularly around flow control and
    errors. See, the use of `goto`s is emulated by c2rust using complicated loop/match/break
    constructs, all of which went away completely, replaced by Rust's "try" operator,
    `?`. Even trivial changes are an opportunity for bugs to sneak in, and even moreso
    when there are hundreds.
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于代码的每一次更改，我都能运行完整的测试套件，并验证一切是否如预期那样。尽管代码是专注于匹配原始语义甚至API的“形状”，许多事情可能会出错 - 特别是在流控制和错误处理方面。看，使用复杂的循环/匹配/中断结构，c2rust模拟了`goto`的使用情况，所有这些结构都完全消失了，被Rust的“try”运算符`?`所替代。即使是微小的更改也可能会导致错误的机会，特别是当更改数量很多时。
- en: Even though it is much easier to write correct code in safe Rust than in C,
    logic bugs are obviously just as possible, particularly when performing very large
    scale refactoring.
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在安全的Rust中编写正确的代码比在C中要容易得多，但逻辑错误显然同样可能发生，特别是在进行非常大规模的重构时。
- en: Performance
  id: totrans-split-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能
- en: In order to compare the performance of unsafe-libyaml and the safe Rust port,
    I found a relatively large YAML document (~700 KiB) and built a very simple benchmark
    using [Criterion](https://docs.rs/criterion/latest/criterion/).
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了比较unsafe-libyaml和安全的Rust移植版的性能，我找了一个相对大的YAML文档（~700 KiB），并使用[Criterion](https://docs.rs/criterion/latest/criterion/)构建了一个非常简单的基准测试。
- en: 'In short:'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之：
- en: '|  | unsafe-libyaml | libyaml-safer |'
  id: totrans-split-96
  prefs: []
  type: TYPE_TB
  zh: '|  | unsafe-libyaml | libyaml-safer |'
- en: '| --- | --- | --- |'
  id: totrans-split-97
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Parse 700 KiB document | 38.258 ms | 37.447 ms |'
  id: totrans-split-98
  prefs: []
  type: TYPE_TB
  zh: '| 解析700 KiB文档 | 38.258 毫秒 | 37.447 毫秒 |'
- en: '| Emit 700 KiB document | 18.491 ms | 17.549 ms |'
  id: totrans-split-99
  prefs: []
  type: TYPE_TB
  zh: '| 发出700 KiB文档 | 18.491 毫秒 | 17.549 毫秒 |'
- en: '*Hold for applause.*'
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*鼓掌停顿*'
- en: These benchmarks were run on an AMD Ryzen 9 3950X 16-Core CPU (3.5 GHz) running
    Windows 11.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这些基准测试是在运行Windows 11的AMD Ryzen 9 3950X 16核CPU（3.5 GHz）上运行的。
- en: Analysis
  id: totrans-split-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分析
- en: '**Important:** While I do consistently get slightly faster times for libyaml-safer,
    I don''t consider this benchmark to be conclusive in any way.'
  id: totrans-split-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重要提示：** 虽然我始终得到稍微更快的libyaml-safer时间，但我并不认为这个基准测试具有任何决定性意义。'
- en: What these numbers *do* indicate is that the port to safe, idiomatic Rust does
    not produce meaningfully slower code.
  id: totrans-split-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些数字*确实*表明，向安全、符合惯例的Rust移植并不会产生含义上较慢的代码。
- en: The justification for "unsafe" C and C++ libraries is often that some performance
    is left on the table with safe Rust, primarily due to bounds checking. On modern
    hardware this justification has always seemed a bit suspicious to me, and I think
    this is another piece of (circumstantial) evidence that it often just doesn't
    matter in practice.
  id: totrans-split-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于“不安全”的C和C++库的辩护通常是，与安全的Rust相比，一些性能被搁置了，主要是由于边界检查。在现代硬件上，这种辩护总是让我觉得有些可疑，我认为这又是（间接的）证据，实际上往往并不重要。
- en: It's certainly possible to build things where bounds checking makes a difference.
    This just isn't that.
  id: totrans-split-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当然可以构建一些边界检查起作用的东西。但这不是那种情况。
- en: '*If* libyaml-safer is consistently faster for all workloads, here are some
    possible explanations:'
  id: totrans-split-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如果* libyaml-safer对所有工作负载始终更快，这里有一些可能的解释：'
- en: C libyaml needs to assert on a couple of invariants (such as pointers not being
    NULL), and unsafe-libyaml performs these assertions even in release mode. Some
    of these invariants are statically checked in safe Rust, where `&T` can never
    be "NULL".
  id: totrans-split-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: C libyaml需要对一些不变量（如指针不为NULL）进行断言，即使在发布模式下，unsafe-libyaml也会执行这些断言。在安全的Rust中，这些不变量是静态检查的，其中`&T`永远不会是“NULL”。
- en: Due to the use of `std::io::BufRead` in the parser, the parser performs fewer
    in-memory copies.
  id: totrans-split-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于在解析器中使用了`std::io::BufRead`，所以解析器执行更少的内存拷贝。
- en: '*Even if* this benchmark is completely bogus, the performance of libyaml-safer
    is still well within tolerance for what is acceptable, considering the massive
    increase in maintainability and safety'
  id: totrans-split-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*即使*这个基准测试完全是假的，libyaml-safer的性能仍然在可接受范围内，考虑到维护性和安全性的显著提高。'
- en: Zero effort was made to optimize things, other than just not choosing obviously
    slower safe alternatives.
  id: totrans-split-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了不选择显然更慢的安全替代方案之外，没有做任何优化工作。
- en: One optimization that might make sense is to implement more efficient lookahead
    in the parser. Currently, there are many places where the scanner and parser perform
    many redundant bounds checks on the input buffer.
  id: totrans-split-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可能有意义的优化是在解析器中实现更有效的前瞻性。当前，在输入缓冲区上，扫描器和解析器执行许多多余的边界检查。
- en: Conclusion
  id: totrans-split-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: This was a lot of fun.
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的很有趣。
- en: I think, to me, and to a lot of software engineers who came from a C++ background,
    using Rust is not just about nebulous promises of safety and correctness.
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，对于很多来自C++背景的软件工程师，使用Rust不仅仅是关于安全和正确性的模糊承诺。
- en: It's about bringing the joy back into programming.
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了让编程重新变得有乐趣。
- en: We all like to design pretty, user-friendly APIs, we all like to produce things
    that just feel high quality. Many of us don't get to do that, because the realities
    of our industry often do not permit it. And so, does it spark joy?
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都喜欢设计漂亮、用户友好的API，我们都喜欢制作那些感觉高质量的东西。我们很多人做不到这一点，因为我们行业的现实通常不允许。所以，这能带来快乐吗？
- en: Coding in Rust feels like having your cake and eating it too. When people are
    productive in Rust, it is because it makes many things that used to be hard -
    things that cause tears, blood, and burnout - are no longer as hard. The result
    is not just safer and easier, it is also just as performant. So please - join
    us.
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Rust编程就像是拿着蛋糕吃一样。当人们在Rust中变得高效时，这是因为它使许多曾经困难的事情——那些导致眼泪、血液和倦怠的事情——变得不再那么困难了。结果不仅更安全、更容易，而且同样高效。所以请——加入我们吧。
- en: In this post I have preserved type names and function names from `unsafe-libyaml`,
    but as part of porting to *idiomatic* Rust, I also did rename all types and enums
    following idiomatic Rust conventions.
  id: totrans-split-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这篇文章中，我保留了来自`unsafe-libyaml`的类型名称和函数名称，但作为迁移到Rust惯用写法的一部分，我也按照Rust惯用的命名惯例重新命名了所有类型和枚举。
- en: </main>
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
