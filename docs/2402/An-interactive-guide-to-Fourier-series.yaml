- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 13:23:57'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024 年 05 月 29 日 13:23:57
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: An interactive guide to Fourier series
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 傅里叶级数的交互式指南
- en: 来源：[https://injuly.in/blog/fourier-series/index.html](https://injuly.in/blog/fourier-series/index.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://injuly.in/blog/fourier-series/index.html](https://injuly.in/blog/fourier-series/index.html)
- en: An interactive guide to Fourier series
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 傅里叶级数的交互式指南
- en: Oct 08
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 十月 08
- en: '*See discussion on [HackerNews](https://news.ycombinator.com/item?id=39509414).*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*参见[HackerNews](https://news.ycombinator.com/item?id=39509414)上的讨论。*'
- en: 'Try drawing something on the first canvas, and watch two sets of mechanical
    alien arms retrace your sketch (no touch screen support yet):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在第一个画布上画些东西，并观察两组机械外星人手臂重绘你的草图（目前不支持触摸屏）：
- en: <canvas id="draw-canvas">
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <canvas id="draw-canvas">
- en: <canvas id="redraw-canvas"></canvas>
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <canvas id="redraw-canvas"></canvas>
- en: </canvas>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: </canvas>
- en: Once you're done with this introduction to Fourier analysis, you'll be capable
    of making this (and a lot more) yourself.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了对傅里叶分析的介绍，你就能够自己做出这个（以及更多）。
- en: The satisfying animation is made possible by the subject of this post - an infinite
    sum called [the Fourier series](https://en.wikipedia.org/wiki/Fourier_series).
    The formula is short, and with some effort, you can memorize it. However, I implore
    you to understand where the series comes from, and build deeper intuition for
    it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 令人满意的动画得以实现，这要归功于本文的主题——一种称为[傅里叶级数](https://en.wikipedia.org/wiki/Fourier_series)的无限和。公式很简洁，只要努力，你就可以记住它。但我恳请你理解这个级数的来源，并对它建立更深的直觉。
- en: To keep you from clicking off this page, I'll defer the proof and origin of
    this equation to the second half, and thread some interactive animations through
    the body of this write-up.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你不会离开这个页面，我将证明和这个方程的起源推迟到第二部分，并在本文中穿插一些交互式动画。
- en: Before we get to tracing sketches however, let's brush up some basic math.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始追踪草图之前，让我们温习一些基本数学。
- en: Adding functions
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加函数
- en: Surely, you're familiar with the addition of numbers, vectors and matrices.
    Adding functions is not so different. The addition of two functions \(f\) and
    \(g\) at input \(x\) is simply \(f(x) + g(x)\).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，你熟悉数字、向量和矩阵的加法。添加函数并没有那么不同。两个函数\(f\)和\(g\)在输入\(x\)处的加法就是简单的\(f(x) + g(x)\)。
- en: Put more formally - \((f + g)(x) = f(x) + g(x)\).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 更正式地表达 - \((f + g)(x) = f(x) + g(x)\)。
- en: Let's visualize this by taking an example. Assume `f` is \(2sin(x)\) and `g`
    is \(cos(2x)\).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来将此可视化。假设`f`是\(2sin(x)\)，而`g`是\(cos(2x)\)。
- en: 'Their sum then, can be given by a function: \(h(x) = 2sin(x) + cos(2x)\).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，它们的总和可以用一个函数来表示：\(h(x) = 2sin(x) + cos(2x)\)。
- en: The graph below plots \(f\) and \(g\) in shades of gray, and their sum, \(h\),
    in red.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下图绘制了灰度中的\(f\)和\(g\)，以及它们的和\(h\)的红色。
- en: <canvas id="fun-sum"></canvas>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <canvas id="fun-sum"></canvas>
- en: Note how in some places, the values of \(f\) and \(g\) are both positive, and
    their sum is therefore a larger positive number, while in other places, \(f\)
    and \(g\) have opposite signs and their values cancel out to a smaller number.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在一些地方，\(f\) 和 \(g\) 的值都是正数，因此它们的和是一个更大的正数，而在其他地方，\(f\) 和 \(g\) 的符号相反，它们的值相互抵消，结果是一个较小的数。
- en: Through the lens of physics, you could look at the two functions as electromagnetic
    waves, or visible light rays oscillating in the domain of time. When two such
    waves overlap with each other in space, they're said to be in [superposition](https://www.britannica.com/science/principle-of-superposition-wave-motion).
    The superposition of two waves results in their sum.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从物理学的角度来看，你可以将这两个函数看作是电磁波，或者在时间域内振荡的可见光线。当两个这样的波在空间中重叠时，它们被称为[叠加](https://www.britannica.com/science/principle-of-superposition-wave-motion)。两个波的叠加结果是它们的和。
- en: When two points in a wave supplement each other to result in a higher amplitude
    (the y-value), their interaction is termed "constructive interference". When they
    cancel each other out, it's called "destructive interference".
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当波中的两个点互相补充以产生更高的振幅（y值）时，它们的相互作用被称为“构造性干涉”。当它们相互抵消时，这被称为“破坏性干涉”。
- en: Go through the last two paragraphs again, and try to digest this idea. Now,
    imagine if we had to work our way backwards. Say we are given a list containing
    the (x, y) coordinates of all points along the curve of \(h\), where \(x\) is
    time and \(y\) is the corresponding output of \(h\) at that point in time. We
    have to come up with two simpler periodic functions that sum up to \(h\).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 再次仔细阅读最后两段，并尝试消化这个想法。现在，想象一下，如果我们不得不逆向思考。假设我们有一份包含\(h\)曲线上所有点（x，y）坐标的列表，其中\(x\)是时间，\(y\)是该时间点上\(h\)的相应输出。我们必须想出两个更简单的周期函数，它们的总和为\(h\)。
- en: This is exactly what the Fourier series does.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是傅里叶级数所做的。
- en: There are several ways to interpret interference in the real world. If \(f\)
    and \(g\) were sound waves, their constructive interference would make loud noise,
    while the destructive interference would produce a quieter sound. If they were
    light waves instead, their constructive interference would reveal bright spots
    on a reflective surface, and destructive would look like dim patches.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，有几种解释干涉现象的方式。如果 \(f\) 和 \(g\) 是声波，它们的构造干涉会产生响亮的噪音，而破坏性干涉会产生较安静的声音。如果它们是光波，它们的构造性干涉会在反射表面上显示出明亮的斑点，而破坏性干涉则会看起来像暗淡的斑块。
- en: Applications of the Fourier series spill into almost every domain - signal processing,
    image compression, shape recognition, analog transmission, noise cancellation,
    studying thermodynamic systems and fitting equations to datasets.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 傅里叶级数的应用几乎渗透到每一个领域——信号处理、图像压缩、形状识别、模拟传输、噪声抑制、研究热力学系统和将方程拟合到数据集中。
- en: From this wide array of applications, we show our interest in the science of
    tracing ugly sketches.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从各种各样的应用中，我们表现出对追踪丑陋草图科学的兴趣。
- en: Decomposing periodic functions.
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分解周期函数。
- en: Imagine you had a machine that could scan any food item and display its recipe.
    Fourier series does exactly that, except for mathematical functions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你有一台能够扫描任何食物并显示其配方的机器。傅里叶级数正是这样做的，只是对数学函数而言。
- en: 'The Fourier series of any periodic function \(f(x)\) with a frequency of \(\omega_0\)
    is described as:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 具有频率 \(\omega_0\) 的任何周期函数 \(f(x)\) 的傅立叶级数描述如下：
- en: $$ f(x) = a_0/2 + \sum_{n=1}^{\infty}b_n sin(n\omega_0x) + \sum_{n=1}^{\infty}a_n
    cos(n\omega_0x) $$
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: $$ f(x) = a_0/2 + \sum_{n=1}^{\infty}b_n sin(n\omega_0x) + \sum_{n=1}^{\infty}a_n
    cos(n\omega_0x) $$
- en: 'Meaning that for every periodic function \(f\), there exists a set of coefficients
    \(a\) and \(b\), such that \(f(x)\) can be expressed as an infinite sum of sine
    and cosine terms of increasing frequencies where the \(nth\) sine term has a coefficient
    of \(b_n\) and the \(nth\) cosine term has a coefficient of \(a_n\). The values
    of these coefficients are given by the following formulae:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着对于每个周期函数 \(f\)，都存在一组系数 \(a\) 和 \(b\)，使得 \(f(x)\) 可以被表示为正弦和余弦项的无限和，其频率不断增加，其中第
    \(n\) 个正弦项的系数为 \(b_n\)，第 \(n\) 个余弦项的系数为 \(a_n\)。这些系数的值由以下公式给出：
- en: $$ a_n = \int_0^T{f(x)cos(nw_0x)} $$
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: $$ a_n = \int_0^T{f(x)cos(nw_0x)} $$
- en: $$ b_n = \int_0^T{f(x)sin(nw_0x)} $$
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: $$ b_n = \int_0^T{f(x)sin(nw_0x)} $$
- en: 'The interval of integration, \(T\), is the fundamental period of the function.
    \(T\) and \(\omega_0\) are related by this equation:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 积分区间 \(T\) 是函数的基本周期。\(T\) 和 \(\omega_0\) 由以下方程相关联：
- en: $$ \omega_0 = 2\pi/T $$
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: $$ \omega_0 = 2\pi/T $$
- en: If that was too wordy and made little sense to you, that's okay. We'll prove
    this equation later in the post. Until then, an example will help understand this
    better.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这段话太啰嗦，让你一头雾水，没关系。我们稍后会在本文中证明这个方程。在那之前，举个例子会更有助于理解。
- en: 'Consider the square wave - a periodic signal that alternates between 1 and
    -1 depending on its input. Formally, it is described like so:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑方波 - 一种根据其输入在 1 和 -1 之间交替的周期信号。正式地，它描述如下：
- en: $$ f(t) = 4 \lfloor{t}\rfloor - 2\lfloor2t\rfloor + 1 $$
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: $$ f(t) = 4 \lfloor{t}\rfloor - 2\lfloor2t\rfloor + 1 $$
- en: 'Here''s how it looks when graphed out:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是图形表示：
- en: <canvas id="square-wave-graph"></canvas>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <canvas id="square-wave-graph"></canvas>
- en: If we use the first few terms from \(f\)'s Fourier series, we can closely approximate
    the behavior of this function. In the following graph, the gray curve represents
    the the square wave and the red curve represents our approximation of it. You
    can play with the slider to alter the number of terms we take from the series
    and see how that changes our approximation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用 \(f\) 的傅立叶级数的前几项，我们可以很好地逼近这个函数的行为。在下图中，灰色曲线表示方波，红色曲线表示我们对它的近似。您可以使用滑块来改变我们从级数中取的项数，并查看这如何改变我们的近似。
- en: Clearly, our approximation improves as we take more terms from the series. The
    Fourier series can be proven to [converge](https://en.wikipedia.org/wiki/Convergent_series).
    This means that if we take an infinite number of terms from the series, we can
    get the *exact* value of \(f(x)\) for any \(x\).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，随着我们从级数中取得更多项，我们的近似会改善。傅立叶级数可以被证明 [收敛](https://en.wikipedia.org/wiki/Convergent_series)。这意味着如果我们从级数中取无限多项，我们可以得到任何
    \(x\) 的*精确*值。
- en: Of course, it is not possible to add up infinite terms in computers. Instead,
    we decide upon a fixed number of terms that approximate our function well enough
    for most practical purposes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，计算机不可能计算出无限的项。相反，我们决定一个固定数量的项，足以在大多数实际情况下很好地逼近我们的函数。
- en: Whenever I say "Fourier series of a function", I mean a series of simple periodic
    functions that can be added at any given input to approximate the output of the
    original function at the same input. For the remainder of this post our goal with
    Fourier series is to **approximate periodic functions with sums of simpler sine/cosine
    functions**.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我说“函数的傅立叶级数”时，我指的是一系列简单周期函数，可以添加到任何给定的输入上，以逼近原始函数在相同输入处的输出。在本文的其余部分，我们使用傅立叶级数的目标是**用简单的正弦/余弦函数的总和逼近周期函数**。
- en: Drawing with the Fourier series
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用傅立叶级数绘图
- en: If you wish to understand how the Fourier series works before seeing it in action,
    you can skip this section and read ahead to [the proof](#proof), then come back
    here.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在看到它的实际效果之前了解傅立叶级数是如何工作的，可以跳过本节，直接阅读 [证明](#proof)，然后再回到这里。
- en: So, How do we go from decomposing time domain functions to recreating sketches?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何从分解时域函数重建草图呢？
- en: Imagine you're drawing a sketch on a square sheet of paper. You are to draw
    your sketch, start to finish, without lifting the nib of your pen from the paper's
    surface. In other words, your sketch must be *continuous* with no "breaks" in
    between.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 想象你正在一张正方形纸上画草图。你要一口气画完整个草图，而不要把笔尖从纸的表面抬起。换句话说，你的草图必须是*连续的*，中间不能有“断点”。
- en: Assume also that the bottom-left corner of the sheet is its origin. Once you
    start drawing, I can delineate the position of the pen's tip using a pair of coordinates
    \((x, y)\) at any given point in time.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 假设纸张的左下角是原点。一旦你开始绘画，我可以用一对坐标 \((x, y)\) 表示笔尖在任意时间点的位置。
- en: 'Much like a cartesian plane, the \(x\) coordinate represents the horizontal
    distance from the origin, and \(y\) the vertical. Both the x and y coordinates
    change as the pen moves on the sheet''s surface. Meaning, the position of the
    x-coordinate of your pen''s tip can be written as a function of time. Say you
    draw this figure:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 就像笛卡尔坐标系一样，\(x\) 坐标表示距离原点的水平距离，\(y\) 表示垂直距离。随着笔在纸张表面移动，x 和 y 坐标都会改变。也就是说，你笔尖的
    x 坐标位置可以写成时间的函数。假设你画了这个图形：
- en: <canvas id="rabbit-canvas"></canvas>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <canvas id="rabbit-canvas"></canvas>
- en: 'If we plot the x and y-coordinates independently as functions of time, they''ll
    form curves that look like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将 x 和 y 坐标作为时间的函数独立绘制，它们将形成如下图所示的曲线：
- en: <canvas id="rabbit-plot-canvas"></canvas>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <canvas id="rabbit-plot-canvas"></canvas>
- en: The blue curve represents the values of x-coordinates of your sketch. The vertical
    axis represents the x-value, and the horizontal axis represents time. Similarly,
    the red curve plots the y-coordinates.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝色曲线表示你的草图的 x 坐标值。垂直轴表示 x 值，水平轴表示时间。同样，红色曲线绘制了 y 坐标。
- en: Both these curves can be viewed as functions of time. The blue curve represents
    a function \(x(t)\) that returns the x-position of the pen's tip at time \(t\),
    Similarly, the red curve is a function \(y(t)\) which the same for its y-position.
    For each of these functions, we can find a Fourier series that approximates it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这两条曲线都可以视为时间的函数。蓝色曲线表示一个在时间 \(t\) 时返回笔尖 x 位置的函数 \(x(t)\)，同样，红色曲线是一个返回其 y 位置的函数
    \(y(t)\)。对于这些函数的每一个，我们都可以找到一个近似它的傅立叶级数。
- en: 'Let \(f_x(t)\) and \(f_y(t)\) be the Fourier approximations for \(x(t)\) and
    \(y(t)\) respectively. Then recreating the sketch requires computing the values
    returned by `f_t` and `y_t` over a range of values of t. then pairing them into
    `(x, y)` coordinates and connecting the coordinates with lines. Here is some pseudo-typescript
    code that mimics this logic:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 设 \(f_x(t)\) 和 \(f_y(t)\) 分别是 \(x(t)\) 和 \(y(t)\) 的傅立叶近似。然后，重新创建草图需要计算 `f_t`
    和 `y_t` 在 t 的一系列值上返回的值，然后将它们配对成 `(x, y)` 坐标并用线连接起来。这是一些伪 TypeScript 代码，模仿了这种逻辑：
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The approximation generated by this method is shown below. Just as before, you
    can play with the slider to adjust the number of terms used in approximation of
    the sketch.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此方法生成的近似结果如下所示。与以前一样，你可以使用滑块来调整近似草图中使用的项数。
- en: Keep in mind that `f_x` and `f_y` are really just sums of simpler sine/cosine
    functions, calculated using Fourier's formulae.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`f_x` 和 `f_y` 实际上只是更简单的正弦/余弦函数的总和，使用傅立叶的公式计算得到。
- en: You may be wondering - the functions \(x(t)\) and \(y(t)\) aren't periodic,
    how come we can still decompose them into sine/cosine sums? One trick is to set
    the period to infinity, and compute the series at this limit.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想 - 函数 \(x(t)\) 和 \(y(t)\) 并不是周期性的，我们怎么能将它们分解成正弦/余弦求和呢？一个技巧是将周期设置为无穷大，并在这个极限下计算级数。
- en: In my code, I just set the period to 1 time unit, and assume that the pen just
    retraces the drawing again and again. Meaning that \(x(t + 1) = x(0)\). This makes
    the math a lot easier, and certainly doesn't make a difference in the outcome.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的代码中，我将周期设置为 1 个时间单位，并假设笔一直在重复绘制图形。这意味着 \(x(t + 1) = x(0)\)。这使得数学运算变得更加简单，并且在结果上并没有任何区别。
- en: To be more clear, when the sketch starts, the time is assumed to be 0, and when
    it ends, the time is assumed to be 1 second. Every time point in between is scaled
    accordingly. This is not necessary of course, you could set the time period to
    however long it took to draw the first sketch, if that makes things simpler for
    you.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 更清晰地说，当草图开始时，时间被假设为 0，当结束时，时间被假设为 1 秒。中间的每个时间点都相应地进行了缩放。这当然不是必需的，你可以将时间段设置为绘制第一个草图所需的时间，如果这对你来说更简单的话。
- en: Epicycles
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内轮线
- en: The final caveat are the epicycles. It is easy to just plot the values returned
    by \(f_x\) and \(f_y\) on the cartesian plane. But how do we animate this using
    revolving circles?
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个注意事项是内轮线。将 \(f_x\) 和 \(f_y\) 返回的值简单地绘制在笛卡尔平面上很容易。但我们如何使用旋转的圆圈来使这个过程动画化呢？
- en: If you've followed the contents of this article so far, you already know how
    to recreate sketches. To animate them, you need to understand [The polar coordinate
    system](https://en.wikipedia.org/wiki/Polar_coordinate_system).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你迄今为止都按照本文的内容进行了解，你已经知道如何重新创建草图。要使其动画化，你需要了解[极坐标系](https://en.wikipedia.org/wiki/Polar_coordinate_system)。
- en: You can read the wikipedia article, or [this article](https://www.mathsisfun.com/polar-cartesian-coordinates.html)
    to build some intuition for conversion between cartesian and polar coordinates.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以阅读维基百科文章，或者[这篇文章](https://www.mathsisfun.com/polar-cartesian-coordinates.html)来建立一些关于笛卡尔坐标和极坐标之间转换的直觉。
- en: 'In the polar coordinate system, a periodic function with period \(T\) is a
    vector that rotates around the origin, and completes one full rotation around
    itself every \(T\) time units. Look at the graph of \(sin(t)\) in Polar form,
    for example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在极坐标系中，周期为 \(T\) 的周期函数是一个绕原点旋转的矢量，并在 \(T\) 个时间单位内完成一次完整的自旋。例如，看一下极坐标中 \(sin(t)\)
    的图形：
- en: <canvas id="polar-sine"></canvas>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <canvas id="polar-sine"></canvas>
- en: 'Note how the y-coordinates of the vector''s tip traces out a regular sine wave.
    You can just as easily plot any periodic function in the polar coordinate system.
    To add two periodic functions together, take one rotating vector and center it
    on the tip of the another rotating vector. The end result is shown below. The
    following animation shows 3 rotating vectors added together, each representing
    a periodic function:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意矢量尖端的 y 坐标是如何跟踪出一个正常的正弦波的。你可以轻松地在极坐标系中绘制任何周期函数。要将两个周期函数相加，只需取一个旋转矢量并将其中心放在另一个旋转矢量的尖端。最终结果如下所示。以下动画显示了三个旋转矢量相加，每个矢量代表一个周期函数：
- en: <canvas id="two-rotating-vectors"></canvas>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <canvas id="two-rotating-vectors"></canvas>
- en: To convert a sketch to an epicycle animation then, all we need is to convert
    a term in the Fourier series from cartesian to polar coordinates. Once we have
    that, we can add up the terms like in the animation above, and figure out the
    x and y-coordinates using two sets of epicycles, each representing the Fourier
    approximation for \(x(t)\) or \(y(t)\).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要将草图转换为内轮线动画，我们只需要将傅立叶级数中的一个项从笛卡尔坐标转换为极坐标。一旦我们做到了这一点，我们就可以像上面的动画一样将项相加，并使用两组内轮线来计算
    x 和 y 坐标，每组内轮线代表 \(x(t)\) 或 \(y(t)\) 的傅立叶近似。
- en: 'To do this conversion, we can use the [polar form of the Fourier series](https://en.wikipedia.org/wiki/Fourier_series#Amplitude-phase_form).
    Precisely, these are the steps you need to follow:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行这种转换，我们可以使用[傅立叶级数的极坐标形式](https://en.wikipedia.org/wiki/Fourier_series#Amplitude-phase_form)。具体来说，以下是你需要遵循的步骤：
- en: Represent the sketch as a list of points drawn over a period of time.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将草图表示为一系列随时间变化的点。
- en: Convert the list of points into a two separate lists, one containing the x-coordinates
    of the sketch, and other the y.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将点列表转换为两个单独的列表，一个包含草图的 x 坐标，另一个包含 y 坐标。
- en: Convert each list into a function (I use [this simple helper](https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/math/util.ts#L58)).
    Now, you have the \(x(t)\) and \(y(t)\).
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个列表转换为一个函数（我使用[这个简单的辅助工具](https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/math/util.ts#L58)）。现在，你有了
    \(x(t)\) 和 \(y(t)\)。
- en: For each function, find its Fourier series coefficients. [Here](https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/math/fourier.ts#L16)
    is how I do it.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个函数，找到它的傅立叶级数系数。[这里](https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/math/fourier.ts#L16)是我如何做到的。
- en: For each function, [convert the Fourier series coefficients into a set of polar
    functions](https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/math/util.ts#L93).
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个函数，[将傅立叶级数系数转换为一组极坐标函数](https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/math/util.ts#L93)。
- en: Using a time step of `dt`, find the final x and y positions of our approximation,
    and [draw them on a canvas](https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/components/RedrawCanvas.tsx#L21).
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用时间步长为`dt`，找到我们近似的最终 x 和 y 位置，并[在画布上绘制它们](https://github.com/srijan-paul/fourier-sketch/blob/eb2be0f646f3097c6725ab621461ba59bfba4b6b/src/components/RedrawCanvas.tsx#L21)。
- en: 'If you do everything correctly, you should get something like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你做得正确，你应该得到类似这样的结果：
- en: <canvas id="rabbit-epicycle"></canvas>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <canvas id="rabbit-epicycle"></canvas>
- en: There is a more novel approach to retracing sketches that involves using only
    one set of epicycles. It uses [the complex Fourier Series](https://en.wikipedia.org/wiki/Fourier_series#Complex-valued_functions),
    and is also fewer lines of code. When you're new to this concept however, it may
    throw you off balance, especially if you're not familiar with imaginary numbers
    and the Argand plane.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种更新颖的重迹轨迹方法，它只使用一个集合的外旋圆。它使用[复傅立叶级数](https://en.wikipedia.org/wiki/Fourier_series#Complex-valued_functions)，并且代码行数也更少。但是，当你刚接触这个概念时，可能会让你失去平衡，特别是如果你不熟悉虚数和阿格朗平面。
- en: Proof
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 证明
- en: When I set out to find an "intuitive" proof for the Fourier series, all I saw
    were proofs that begin by stating the equation, and then proving it by finding
    the coefficients \(a_n\) and \(b_n\) using integrals. But where did the equation
    come from?
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始寻找一个“直观”的傅立叶级数证明时，我看到的都是从陈述方程开始，然后通过找到系数 \(a_n\) 和 \(b_n\) 的积分来证明它。但方程从何而来呢？
- en: Did God whisper it to Joseph Fourier in his dreams?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 上帝是不是在约瑟夫·傅立叶的梦中向他低语？
- en: Did he just happen to run into it by chance?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 他是不是碰巧碰上了呢？
- en: Surprisingly, the answer is "yes". Of course, he had an unparalleled instinct
    for math that he whetted with years of practice and research. There has to be
    a certain train of thought that he boarded to arrive at this revelation, that
    any periodic signal can be represented as a sum of simpler harmonics. But that
    line of thinking was never publicized, and as you'll see in the next section,
    there have been people who've thought of this even before Fourier himself did!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，答案是“是”。当然，他对数学有着无与伦比的直觉，这是他多年的实践和研究所磨练出来的。他肯定有一定的思维方式，他才得以获得这一启示，即任何周期信号都可以表示为较简单的谐波的和。但是这种思维方式从未被公开，正如你将在下一节看到的，甚至在傅立叶之前，已经有人想到了这一点！
- en: 'The important part is that Fourier asked a question that was mocked as stupid
    and bizarre until he presented a proof. And that proof does in fact begin by stating
    the following hypothesis:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，傅立叶提出了一个被嘲笑为愚蠢和奇怪的问题，直到他提出了一个证明。而且事实上，这个证明是以以下假设开始的：
- en: $$ f_o(t) = \sum_{n = 0}^\infty{b_nsin(n\omega_0t)} $$
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: $$ f_o(t) = \sum_{n = 0}^\infty{b_nsin(n\omega_0t)} $$
- en: Here, \(f_o\) is an odd function with a fundamental period of \(w_0\). If we
    can derive a value for \(b_n\) from this equation, we can be convinced that **any
    odd function can be represented as a sum of sinusoids**.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，\(f_o\) 是一个奇函数，其基本周期为 \(w_0\)。如果我们可以从这个方程中推导出 \(b_n\) 的值，我们就可以相信**任何奇函数都可以表示为正弦波的和**。
- en: 'Now, consider an even function \(f_e\) with a period of \(w_0\):'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑一个周期为 \(w_0\) 的偶函数 \(f_e\)：
- en: $$ f_e(t) = \sum_{n=0}^{\infty}a_n cos(n w_0 t) $$
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: $$ f_e(t) = \sum_{n=0}^{\infty}a_n cos(n w_0 t) $$
- en: If we can derive a value for \(a_n\) from this equation, we can be convinced
    that **any even function can be represented as a sum of co-sinusoids**.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们可以从这个方程中推导出 \(a_n\) 的值，我们就可以相信**任何偶函数都可以表示为余弦波的和**。
- en: 'When you combine these two equations with the idea that [any periodic function
    can be represented as a sum of odd and an even function](https://en.wikipedia.org/wiki/Even_and_odd_functions#Even%E2%80%93odd_decomposition),
    you get:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将这两个方程与[任何周期函数都可以表示为奇函数和偶函数的和](https://en.wikipedia.org/wiki/Even_and_odd_functions#Even%E2%80%93odd_decomposition)的思想相结合时，你会得到：
- en: $$ f_o(t) + f_e(t) = \sum_{n = 0}^\infty{b_nsin(n\omega_0t)} + \sum_{n=0}^{\infty}a_n
    cos(n w_0 t) $$
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: $$ f_o(t) + f_e(t) = \sum_{n = 0}^\infty{b_nsin(n\omega_0t)} + \sum_{n=0}^{\infty}a_n
    cos(n w_0 t) $$
- en: We can turn the order of this proof, and first say that given any function \(f(t)\),
    we can find its odd and even parts using the odd-even decomposition rule. Then,
    we can represent the odd part as a sum of sinusoids, and the even part as a sum
    of co-sinusoids.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以调换这个证明的顺序，首先说给定任何函数 \(f(t)\)，我们可以使用奇偶分解规则找到其奇数和偶数部分。然后，我们可以将奇数部分表示为正弦波的和，将偶数部分表示为余弦波的和。
- en: Now, all that's left is to derive the values for \(a_n\) and \(b_n\) using the
    two equations stated above. This is where I save myself the trouble of writing
    more LaTeX, and defer you to [this excellent proof](http://lpsa.swarthmore.edu/Fourier/Series/DerFS.html)
    by professors from Swarthmore college. I know I said I'd walk you through the
    proof, but I can't do a better job of it than the electronics professors at Swarthmore
    did already. I'd hate to repeat their work and not give credit. If you follow
    the page I linked, you'll realize that the proof only uses basic calculus and
    trigonometric identities taught in high school.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，唯一剩下的就是利用上述两个方程式推导出 \(a_n\) 和 \(b_n\) 的值。这就是我省去写更多 LaTeX 的麻烦，并转向斯沃斯莫尔学院教授的[这个优秀证明](http://lpsa.swarthmore.edu/Fourier/Series/DerFS.html)。我知道我说过要带你走过证明，但我做不比斯沃斯莫尔的电子学教授做得更好。我不愿意重复他们的工作而不给予认可。如果你关注我链接的页面，你会意识到证明只使用了高中教授的基本微积分和三角恒等式。
- en: Origins
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 起源
- en: You'll be surprised to learn that the idea behind the series predates Fourier
    himself.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你会惊讶地发现，这个级数的背后的想法早在傅立叶之前就存在了。
- en: '[Carl Friedrich Gauss](https://en.wikipedia.org/wiki/Carl_Friedrich_Gauss)
    was one of the many applied mathematicians who wanted to predict the position
    of Ceres in the night sky. To attain this goal, he created several algorithms
    to aid his study of astronomy. One of them was the [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform)
    - a function that is very closely related with the Fourier Series. However, he
    never published his work because he believed his method to be an unimportant detail
    in the overall process.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[卡尔·弗里德里希·高斯](https://en.wikipedia.org/wiki/Carl_Friedrich_Gauss)是许多应用数学家之一，他想预测谷神星在夜空中的位置。为了实现这个目标，他创建了几种算法来帮助他研究天文学。其中之一就是[快速傅立叶变换](https://en.wikipedia.org/wiki/Fast_Fourier_transform)——与傅立叶级数密切相关的函数。然而，他从未公开他的工作，因为他认为他的方法在整个过程中并不重要。'
- en: In the 1700s, Euler had found applications for decomposing periodic functions
    with Fourier Series.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 18 世纪，欧拉找到了使用傅立叶级数分解周期函数的应用。
- en: Half a century before Fourier, [Bernoulli](https://en.wikipedia.org/wiki/Daniel_Bernoulli)
    was studying the motion of a string. He proposed the idea that periodic functions
    can be represented as sums of harmonics. Nobody at the time believed this to be
    a general method, and his ideas were left unexplored.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在傅立叶之前半个世纪，[伯努利](https://en.wikipedia.org/wiki/Daniel_Bernoulli)正在研究弦的运动。他提出了周期函数可以表示为谐波和的和的想法。当时没有人相信这是一种普遍的方法，他的想法被搁置了。
- en: 'Things changed in 1807, when a French math wizard named Joseph Fourier found
    himself studying the heat equation in a metal plate. In his search for a solution,
    he sought to ask a seemingly absurd question:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 1807 年，一位名叫约瑟夫·傅立叶的法国数学奇才发现自己在研究金属板上的热传导方程。在寻求解决方案时，他提出了一个看似荒谬的问题：
- en: '*Can we represent any periodic function as a sum of simple sine and cosine
    functions?*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们能用简单的正弦和余弦函数的和来表示任何周期函数吗？*'
- en: 'Precisely, he sought to represent any periodic function \(f(x)\) with a frequency
    of \(\omega_0\) , in the following form:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 准确地说，他试图用频率为 \(\omega_0\) 的周期函数 \(f(x)\) 来表示，形式如下：
- en: $$ f(x) = (a_0 + a_1 cos(\omega_0 t) + a_2 cos(2\omega_0 t) + ... + a_n cos(n\omega_0t))
    + (b_1 sin(\omega_0 t) + b_1 sin(2\omega_0 t) + ... + b_n sin(n\omega_0t) $$
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: $$ f(x) = (a_0 + a_1 cos(\omega_0 t) + a_2 cos(2\omega_0 t) + ... + a_n cos(n\omega_0t))
    + (b_1 sin(\omega_0 t) + b_1 sin(2\omega_0 t) + ... + b_n sin(n\omega_0t) $$
- en: 'Revered mathematicians of the time, including Langrange and Laplace, rejected
    this idea as informal and hand-wavy. The panel evaluating his findings said:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当时备受尊敬的数学家，包括朗格朗日和拉普拉斯，拒绝了这个想法，认为它不够正式，不够严谨。评估他的发现的小组说：
- en: '*"The manner in which the author arrives at these equations is not exempt of
    difficulties and...his analysis to integrate them still leaves something to be
    desired on the score of generality and even rigour."* Perhaps this was because
    of a lack of reasoning as to *why* one should even begin to think of periodic
    functions this way.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*"作者得出这些方程的方式并不是没有困难的，...他对于集成它们的分析在一般性和甚至严密性方面仍然有待改进。"* 或许这是因为缺乏关于为什么要以这种方式考虑周期函数的推理。'
- en: It's not unheard of mathematical ideas to sprout into existence out of seemingly
    ridiculous places. Ramanujan attributed some of his major findings to God, and
    dipped at the age of 32.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 数学思想从看似荒谬的地方出现并不罕见。拉马努金把他的一些重要发现归功于上帝，并在 32 岁时离世。
- en: After the Fourier Series was accepted by the scientific populace, it spawned
    a new field of research, called Fourier analysis. Developments in this field found
    everyday use in almost every science.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 傅立叶级数被科学界接受后，催生了一个新的研究领域，称为傅立叶分析。这一领域的发展在几乎每一个科学领域都有日常应用。
- en: Applications
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用
- en: By this point, you know enough about Fourier analysis to delve deeper into it
    yourself. It would be a shame to blunt the edge of theory by not applying it in
    practice.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个时候，你已经对傅立叶分析有足够的了解，可以自己深入研究。如果不将理论应用于实践中，会让理论变得迟钝，这是一种遗憾。
- en: 'Here a few things you could do:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你可以做的一些事情：
- en: Implement noise reduction in sounds.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现声音的降噪。
- en: Sharpen images with denoising.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用去噪来锐化图像。
- en: Write a [JPEG](https://en.wikipedia.org/wiki/JPEG) encoder/decoder.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写一个[JPEG](https://en.wikipedia.org/wiki/JPEG) 编码器/解码器。
- en: '[Fit an elephant](https://www.johndcook.com/blog/2011/06/21/how-to-fit-an-elephant/)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[拟合一只大象](https://www.johndcook.com/blog/2011/06/21/how-to-fit-an-elephant/)'
- en: Write basic shape recognizers.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写基本的形状识别器。
- en: Resources and further reading
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源和进一步阅读
