- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:44:08'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:44:08'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: How QUIC Is Displacing TCP for Speed and Security
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何 QUIC 通过速度和安全性取代 TCP
- en: 来源：[https://engineeringatscale.substack.com/p/how-quic-is-displacing-tcp-for-speed](https://engineeringatscale.substack.com/p/how-quic-is-displacing-tcp-for-speed)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://engineeringatscale.substack.com/p/how-quic-is-displacing-tcp-for-speed](https://engineeringatscale.substack.com/p/how-quic-is-displacing-tcp-for-speed)
- en: Over the past three decades, **HTTP** (Hyper Text Transfer Protocol) has been
    the backbone of the internet. We are able to browse the web, download files, stream
    movies, etc due to HTTP. The protocol has evolved over the years and witnessed
    major enhancements.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的三十年中，**HTTP（Hyper Text Transfer Protocol）** 一直是互联网的支柱。由于 HTTP，我们能够浏览网页，下载文件，流媒体视频等。该协议经过多年的演变并见证了重大的增强。
- en: The HTTP protocol is an application protocol and works on top of **TCP (**Transmission
    Control Protocol**)**. The TCP protocol has several limitations and results in
    less responsive web applications.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 协议是一种应用层协议，它运行在 **TCP（Transmission Control Protocol）** 的上面。TCP 协议有几个限制，导致
    Web 应用响应速度较慢。
- en: Google developed a game changing transport protocol called QUIC to overcome
    TCP’s downsides. **QUIC** was standardised and added to **IETF** (Internet Engineering
    Task Force) few years ago.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌开发了一种改变游戏规则的传输协议叫做 QUIC，以克服 TCP 的不足。**QUIC** 几年前被标准化并添加到 **IETF**（互联网工程任务组）中。
- en: The adoption of QUIC has grown exponentially in the last few years. Majority
    of the tech companies such as Google, Facebook, Pinterest, etc have started adopting
    HTTP/3.0 which uses QUIC at the transport level. These companies have seen significant
    improvements in the performance of their websites with HTTP/3.0 & QUIC.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 过去几年中，QUIC 的采用已经呈指数级增长。大多数技术公司如 Google、Facebook、Pinterest 等开始采用使用 QUIC 的 HTTP/3.0
    协议。这些公司在其网站的性能上通过 HTTP/3.0 & QUIC 看到了显著的改进。
- en: Let’s embark on our journey to understand how QUIC will displace TCP. We will
    first go through few fundamental networking concepts of TCP & UDP. Later, we will
    look at the evolution of HTTP and how each version overcame the limitations of
    the previous release. We will then see what QUIC is and how it works. We will
    explore why QUIC is highly performant as compared to TCP.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始我们的旅程，了解 QUIC 将如何取代 TCP。我们首先将介绍 TCP 和 UDP 的一些基本网络概念。稍后，我们将看看 HTTP 的演变以及每个版本如何克服先前版本的限制。然后，我们将探讨
    QUIC 是什么以及它如何工作。我们将探索为什么 QUIC 相比于 TCP 具有高性能。
- en: TCP (**Transmission Control Protocol**) and UDP (**User Datagram Protocol**)
    are transport level protocols. These protocols manage the flow of internet packets
    to and from any electronic device. Let’s understand in detail how both the protocols
    work.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: TCP（**Transmission Control Protocol**）和 UDP（**User Datagram Protocol**）是传输层协议。这些协议管理互联网数据包在任何电子设备之间的流动。让我们详细了解这两种协议的工作方式。
- en: '**TCP** is a connection based protocol. The client establishes a connection
    with the server and then sends the data. TCP connection is established through
    a mechanism known as Three-Way Handshake. The below diagram illustrates the Three-Way
    Handshake process :-'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**TCP** 是一种基于连接的协议。客户端与服务器建立连接，然后发送数据。TCP 连接是通过称为三次握手的机制建立的。下面的图示展示了三次握手的过程：-'
- en: '**TCP 3-Way Handshake Process**'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**TCP 三次握手过程**'
- en: The process consists of three steps :-
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程包括三个步骤：-
- en: SYN - The client sends a **SYN** packet to the server.
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SYN - 客户端向服务器发送 **SYN** 数据包。
- en: ACK - On receiving the **SYN**, the server sends an acknowledgement back to
    the client through the **ACK** packet.
  id: totrans-split-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ACK - 在接收到 **SYN** 后，服务器通过 **ACK** 数据包向客户端发送确认。
- en: SYN-ACK - After receiving the **ACK** packet from the server, the client finally
    sends the acknowledgement via **SYN-ACK** to the server.
  id: totrans-split-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SYN-ACK - 在从服务器收到 **ACK** 数据包后，客户端最终通过 **SYN-ACK** 向服务器发送确认。
- en: TCP is a stateful and a reliable protocol. It guarantees delivery of all the
    packets from one device to another. Additionally, it allows both client and the
    server to use the same connection for communication.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: TCP 是一种有状态且可靠的协议。它确保从一个设备到另一个设备的所有数据包的传输。此外，它允许客户端和服务器在通信中使用同一连接。
- en: '**UDP** is a connectionless protocol. Unlike TCP, there is no Three-Way Handshake
    between the client and the server. The client sends the packets to the server
    and doesn’t wait for server’s acknowledgement.'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**UDP** 是一种无连接的协议。与 TCP 不同，客户端和服务器之间没有三次握手。客户端将数据包发送到服务器，而不等待服务器的确认。'
- en: UDP doesn’t guarantee 100% delivery of packets. Packets can get lost and may
    not reach the other device. UDP isn’t reliable like TCP.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: UDP 不能保证数据包的 100% 传递。数据包可能会丢失，不会到达另一台设备。UDP 不像 TCP 那样可靠。
- en: Since there is no initial handshake, UDP is much faster than TCP. For performance
    reasons, UDP is mostly used in streaming data applications such as music/video.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有初始握手，UDP 比 TCP 快得多。出于性能考虑，UDP 主要用于流数据应用，如音乐/视频。
- en: Here is a popular internet meme that takes a dig on TCP/UDP :-
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个流行的互联网迷因，对 TCP/UDP 进行了调侃：
- en: Till now, we have understood how TCP and UDP protocols work. Let’s now explore
    the HTTP protocol which is an application level protocol.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了 TCP 和 UDP 协议的工作原理。现在让我们探讨应用层协议 HTTP。
- en: The first version of HTTP was developed by [Tim Berners-Lee](https://en.wikipedia.org/wiki/Tim_Berners-Lee)
    at [CERN](https://en.wikipedia.org/wiki/CERN) in 1989\. There have been multiple
    optimisations and performance improvements in the protocol since then. Most of
    the modern devices use ***HTTP 1.1***/***HTTP 2.0*** and ***HTTP 3.0***. Let’s
    walkthrough the history of HTTP and understand major changes that the protocol
    underwent.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 的第一个版本是由 [Tim Berners-Lee](https://en.wikipedia.org/wiki/Tim_Berners-Lee)
    在 [CERN](https://en.wikipedia.org/wiki/CERN) 于 1989 年开发的。自那时以来，协议已进行了多次优化和性能改进。大多数现代设备使用
    ***HTTP 1.1*** / ***HTTP 2.0*** 和 ***HTTP 3.0***。让我们回顾 HTTP 的历史，了解协议经历的重大变化。
- en: After the initial HTTP/0.9 version, HTTP/1.0 started supporting headers, request
    body, txt files, etc. The clients had to create a TCP connection every time they
    fetched data from the server using HTTP. This resulted in significant wastage
    of resources for establishing the connection.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始的 HTTP/0.9 版本之后，HTTP/1.0 开始支持头部、请求体、文本文件等。客户端每次使用 HTTP 从服务器获取数据时都必须创建 TCP
    连接。这导致资源在建立连接时的显著浪费。
- en: This protocol added support for reusing the existing TCP connection between
    the client and the server for fetching new data. This was implemented with the
    help of the HTTP header `keep-alive`.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这种协议增加了对客户端和服务器之间现有 TCP 连接重用的支持，以获取新数据。这是通过 HTTP 头部 `keep-alive` 实现的。
- en: If the client wanted to fetch 10 Javascript files, then it would establish one
    connection with the server. Then, it would reuse the same connection and fetch
    the 10 files instead of creating a new connection for each file.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户端想要获取 10 个 JavaScript 文件，则它会与服务器建立一个连接。然后，它将重用相同的连接并获取这 10 个文件，而不是为每个文件创建新的连接。
- en: This results in reduced resource wastage and performance improvements, as it
    avoids creating redundant connections. However, a major downside was a problem
    known as *Head of the line blocking*.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致减少资源浪费和性能改进，因为它避免了创建多余的连接。然而，一个主要的缺点是被称为*队头阻塞*的问题。
- en: The following diagram illustrates the *Head of the line blocking* problem.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示说明了*队头阻塞*问题。
- en: '**Head of the Line Blocking**'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**队头阻塞**'
- en: Let’s understand this concept with an example. As shown in the above diagram,
    you have three files - image, text and video. The video file has a larger size
    and would take more time to transmit. Since the video file takes more time, it
    would block the image and text file from being sent.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来理解这个概念。如上图所示，您有三个文件 - 图像、文本和视频。视频文件的大小较大，传输时间较长。由于视频文件花费更多时间，它会阻塞图像和文本文件的发送。
- en: The **HTTP 2.0** solved the *Head of the line blocking* problem by multiplexing.
    With the help of multiplexing, multiple files could be sent over the same TCP
    connection.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP 2.0** 通过多路复用解决了*队头阻塞*问题。借助多路复用，可以通过同一 TCP 连接发送多个文件。'
- en: This resulted in performance gains and solved the Head of line blocking problem
    at the application level. However, at the TCP layer, in case there was a packet
    loss, it had to wait for packet retransmission.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致性能提升，并在应用层解决了队头阻塞问题。然而，在 TCP 层面，如果有数据包丢失，它必须等待数据包重传。
- en: The multiplexing solution didn’t work as expected in case of packet losses.
    In fact, HTTP 1.1 performed better than HTTP 2.0 if the packet loss was more than
    5%. The *Head of the line blocking* problem transitioned from the application
    layer to the transport layer.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 多路复用解决方案在数据包丢失时表现不如预期。事实上，如果数据包丢失率超过 5%，HTTP 1.1 的性能优于 HTTP 2.0。*队头阻塞* 问题从应用层过渡到传输层。
- en: The below diagram illustrates how a single packet loss resulted in multiple
    streams getting delayed :-
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下图说明了单个数据包丢失如何导致多个流的延迟：
- en: '**Packet loss in HTTP/2.0 results in retransmission & stream delays**'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTP/2.0中的数据包丢失导致重传和流延迟**'
- en: When a single packet gets lost, TCP stores the subsequent packets in it’s buffer
    until it receives the lost packet. TCP then uses retransmission to get the lost
    packet. HTTP doesn’t have visibility into TCP retransmission. As a result, different
    streams see a delivery delay in such cases.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '当单个数据包丢失时，TCP将后续数据包存储在其缓冲区中，直到接收到丢失的数据包。然后，TCP使用重传来获取丢失的数据包。在这种情况下，HTTP无法看到TCP的重传。因此，不同的流在这些情况下看到交付延迟。  '
- en: In the past few sections, we saw that TCP has certain inherent limitations such
    as Three-way handshake & Head of the line blocking. These limitations can be solved
    by either enhancing TCP or replacing TCP with a new protocol.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: '在过去的几节中，我们看到TCP具有某些固有限制，例如三次握手和头阻塞。可以通过增强TCP或使用新协议来解决这些限制。  '
- en: Although, it’s simple to enhance TCP but TCP is present in the lowest layer
    of tightly coupled with the Operating system. In simple words, the code for TCP
    exists in the kernel layer and not in the user space. Considering the vast number
    of devices, implementing changes in the kernel space would require a significant
    amount of time to reach all users.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '尽管增强TCP很简单，但TCP存在于与操作系统紧密耦合的最低层。简单来说，TCP的代码存在于内核层而不是用户空间。考虑到大量设备，实施内核空间的更改需要大量时间才能达到所有用户。  '
- en: Hence, Google came up with a new protocol **QUIC**, which served as a replacement
    for TCP. Just like TCP, QUIC is also a transport level protocol. However, it resides
    in the user space instead of the kernel space. This makes it easy to change and
    enhance unlike TCP.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: '因此，Google推出了一种新协议**QUIC**，它作为TCP的替代品。就像TCP一样，QUIC也是一种传输层协议。然而，它位于用户空间而不是内核空间。这使得它易于更改和增强，不像TCP那样。  '
- en: QUIC works on top of UDP. It overcomes the limitations of TCP by using UDP.
    It’s just a layer or wrapper on top of UDP. The wrapper adds features of TCP such
    as congestion control, packet retransmission, multiplexing etc. It internally
    uses UDP and adds best features from TCP on top of it.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 'QUIC运行在UDP之上。它通过使用UDP克服了TCP的限制。它只是UDP的一层或包装器。这个包装器添加了TCP的拥塞控制、数据包重传、多路复用等功能。它内部使用UDP，并在其上添加了TCP的最佳特性。  '
- en: The below image shows how QUIC fits in the networking stack :-
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '下图显示了QUIC如何适配网络堆栈：  '
- en: '**Networking stack with QUIC**'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**具有QUIC的网络堆栈**  '
- en: Since we now understand the basics of QUIC, let’s dive into the working of this
    protocol.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: '既然我们现在了解了QUIC的基础知识，让我们深入了解这种协议的工作原理。  '
- en: QUIC works on UDP & it doesn’t have to go through the Three-way handshake process.
    The Three-way handshake process adds an extra overhead and adds to the latency.
    As a result, QUIC improves the performance by reducing the connection latency.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 'QUIC在UDP上运行，不需要进行三次握手过程。三次握手过程增加了额外的开销并增加了延迟。因此，QUIC通过减少连接延迟来提高性能。  '
- en: In case of TCP, there is an additional handshake used for TLS which adds to
    the latency. QUIC combines the TLS handshake and QUIC handshake in a single call.
    It thereby optimizes the handshake process and improves the performance.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: '在TCP的情况下，用于TLS的额外握手会增加延迟。QUIC将TLS握手和QUIC握手结合在单个调用中。它因此优化了握手过程并提高了性能。  '
- en: You might wonder “*Do packets get lost since QUIC works on UDP ?*”. The answer
    is No. QUIC adds reliability on top of the UDP stack. It implements packet retransmission
    in case it doesn’t receive the necessary packets. For eg:- If the server doesn’t
    receive packet no 5 from the client, the protocol will detect it and server will
    ask the client to resend the same packet.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '你可能会想“*因为QUIC在UDP上工作，数据包会丢失吗？*”。答案是否定的。QUIC在UDP堆栈上增加了可靠性。如果没有接收到必要的数据包，它会实现数据包重传。例如：如果服务器没有从客户端接收到第5个数据包，协议会检测到并要求客户端重新发送相同的数据包。  '
- en: Similar to TCP, QUIC also implements multiplexing. Clients can transfer multiple
    files at the same time using a single channel. QUIC creates an UUID for each stream
    (file that gets transferred). It uses the UUID to identify the stream. Multiple
    streams are then sent over a single channel.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: '与TCP类似，QUIC也实现了多路复用。客户端可以使用单一通道同时传输多个文件。QUIC为每个流（传输的文件）创建UUID。它使用UUID来标识流。多个流然后通过单一通道发送。  '
- en: The below diagram illustrates how multiplexing works in QUIC :-
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: '下图说明了QUIC中多路复用的工作原理：  '
- en: QUIC also solves the Head of Line blocking problem faced by TCP through it’s
    multiplexing. In case a stream suffers packet loss, only that stream would be
    impacted. The streams in QUIC are independent & don’t impact the working of each
    other.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: QUIC还通过其多路复用解决了TCP面临的线头阻塞问题。如果一个流遭受数据包丢失，只有该流会受到影响。QUIC中的流是独立的，彼此之间不会影响工作。
- en: Moreover, QUIC also supports TLS 1.3 (Transport level security). This guarantees
    the security and confidentiality of the data. TLS encrypts large parts of the
    QUIC protocol such as packet numbers and connection close signals.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，QUIC还支持TLS 1.3（传输层安全性）。这保证了数据的安全性和保密性。TLS加密了QUIC协议的大部分内容，如数据包编号和连接关闭信号。
- en: '**Reduced latency** - QUIC minimizes the latency by combining the TLS handshake
    with the connection setup. This is also known as **0-RTT** (Zero Round Trip Time).
    It results in faster connection establishment and improves performance of web
    applications.'
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低延迟** - QUIC通过将TLS握手与连接建立结合来最小化延迟。这也被称为**0-RTT**（零往返时间）。它导致更快的连接建立，提高了Web应用的性能。'
- en: '**Multiplexing** - With multiplexing, QUIC can send multiple streams of data
    over a single channel. It greatly helps client applications which download multiple
    files i.e images, Javascript, CSS, etc.'
  id: totrans-split-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多路复用** - 通过多路复用，QUIC可以在单个通道上发送多个数据流。这极大地帮助了客户端应用程序，如下载多个文件（如图像、JavaScript、CSS等）。'
- en: '**Connection migration** - Using QUIC, you can switch from one network interface
    to another (wifi to mobile data) without any glitch. This is important for mobile
    devices and improves the user experience.'
  id: totrans-split-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接迁移** - 使用QUIC，您可以在不影响的情况下从一个网络接口切换到另一个（例如从WiFi切换到移动数据）。这对移动设备非常重要，可以改善用户体验。'
- en: '**Improved Security** - QUIC works on TLS 1.3, which offers better security.
    Additionally, it also encrypts large parts of the protocol unlike TCP with TLS,
    which encrypts only the HTTP payload. It is more resilient to security attacks
    as compared to TCP.'
  id: totrans-split-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提升的安全性** - QUIC采用TLS 1.3，提供更好的安全性。此外，与仅加密HTTP负载的TCP相比，它还加密了协议的大部分内容。相比TCP，它对安全攻击更具韧性。'
- en: '**Wide support** - It has seen a rise in adoption right since it’s inception.
    This has further strengthened it’s effectiveness.'
  id: totrans-split-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**广泛支持** - 自其推出以来，QUIC的采用率不断上升。这进一步增强了其有效性。'
- en: HTTP/3 is the latest version of Hypertext Transfer Protocol (HTTP). It internally
    uses QUIC instead of TCP. It's designed to provide a more efficient and secure
    foundation for the modern web. It has all the benefits that QUIC provides.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP/3是超文本传输协议（HTTP）的最新版本。它内部使用QUIC代替TCP。它旨在为现代Web提供更高效和安全的基础。它拥有QUIC提供的所有优势。
- en: HTTP/3 is standardised by IETF. A large portion of the internet traffic relies
    on HTTP/3 today. Here is the graph that shows the adoption rate for HTTP/3 :-
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP/3由IETF标准化。今天，大部分互联网流量依赖于HTTP/3。以下是显示HTTP/3采用率的图表：
- en: As seen from the above graph, the adoption has spiked to 30% and is gradually
    overtaking **HTTP/1.1**. With the given growth rate, **HTTP/3.0** will gradually
    overtake **HTTP/2.0** in the coming few years.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，采用率已经飙升至30%，并逐渐超过**HTTP/1.1**。按照给定的增长率，**HTTP/3.0**将在未来几年逐步超过**HTTP/2.0**。
- en: The internet has come a long way since the inception of HTTP three decades ago.
    The evolution of HTTP has made the online experience more efficient and responsive.
    With the growing demands of modern applications, we realised inherent limitations
    of underlying protocols such as TCP.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 自HTTP诞生三十年以来，互联网已经发展了很长一段路。HTTP的演进使在线体验更加高效和响应迅速。随着现代应用需求的增长，我们意识到底层协议如TCP的固有限制。
- en: Google developed the game changing protocol, QUIC. It leveraged UDP and addressed
    all the shortcomings of TCP. Reduced latency, multiplexing, enhanced security,
    & connection migration are some of the striking features of QUIC. The innovations
    bought by QUIC have addressed problems like head of the line blocking.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌开发了变革性协议**QUIC**。它利用UDP协议，并解决了TCP的所有缺点。降低延迟、多路复用、增强安全性和连接迁移是QUIC的一些显著特点。QUIC带来的创新解决了诸如线头阻塞等问题。
- en: Big Tech companies like Google and Facebook have seen drastic improvements in
    performance by adopting QUIC in HTTP/3\. With the rising adoption and growing
    support, HTTP/3 will become a standard for internet communication. In the coming
    years, the internet will evolve and transition to HTTP/3 for efficiency, reliability
    and performance.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 大型科技公司如谷歌和Facebook通过在HTTP/3中采用QUIC显著提升了性能。随着越来越多的采用和支持，HTTP/3将成为互联网通信的标准。未来几年，互联网将转向HTTP/3以提高效率、可靠性和性能。
- en: 'Thanks for reading the article! Before you go:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您阅读本文！在您离开之前：
- en: Thank you for reading Engineering At Scale. This post is public so feel free
    to share it.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您阅读《规模工程》。此文章为公开文章，欢迎分享。
- en: '[Share](https://engineeringatscale.substack.com/p/how-quic-is-displacing-tcp-for-speed?utm_source=substack&utm_medium=email&utm_content=share&action=share)'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[分享](https://engineeringatscale.substack.com/p/how-quic-is-displacing-tcp-for-speed?utm_source=substack&utm_medium=email&utm_content=share&action=share)'
- en: '[TCP VS UDP meme](https://www.obiikriationz.com/tcp-vs-udp-meme-version.xhtml)'
  id: totrans-split-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[TCP VS UDP meme](https://www.obiikriationz.com/tcp-vs-udp-meme-version.xhtml)'
- en: '[Why HTTP/3.0 is eating the world ?](https://blog.apnic.net/2023/09/25/why-http-3-is-eating-the-world/)'
  id: totrans-split-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[为什么 HTTP/3.0 正在改变世界？](https://blog.apnic.net/2023/09/25/why-http-3-is-eating-the-world/)'
- en: '[Pinterest is now on HTTP/3.0](https://medium.com/pinterest-engineering/pinterest-is-now-on-http-3-608fb5581094)'
  id: totrans-split-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[Pinterest 现在采用 HTTP/3.0](https://medium.com/pinterest-engineering/pinterest-is-now-on-http-3-608fb5581094)'
- en: '[Peering with Google - QUIC](https://peering.google.com/#/learn-more/quic)'
  id: totrans-split-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[与谷歌的对等连接 - QUIC](https://peering.google.com/#/learn-more/quic)'
