- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:54:44'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Learning about debuggers | Andy Hippo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://werat.dev/blog/learning-about-debuggers/](https://werat.dev/blog/learning-about-debuggers/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learning about debuggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: January 8, 2024
  prefs: []
  type: TYPE_NORMAL
- en: 'Today‚Äôs article is a collection of materials to learn more about debuggers:
    how they work, which technologies are under the hood, what kind of problems exist
    in this area. There is of course a big overlap with related components like compilers
    and linkers, so get ready to learn lots of new things üòÉ.'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the list is not exhaustive by any means. These are just the links
    I‚Äôve accumulated over the years and found useful for myself. If you‚Äôd like to
    add anything to the list, let me know!
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: many of the links here are blog posts ‚Äì be sure to check out other articles
    in those blogs! They‚Äôre often worth reading even if not directly related to the
    topic.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: How debuggers work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All debuggers share the same basic principles: they need to attach to a process,
    parse the binary and debug information, handle breakpoints, etc. The implementations
    may vary significantly between the operating systems, but after you understand
    one of them, others will look very familiar.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Writing a Linux Debugger**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/](https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A 10-part journey of writing a Linux debugger from scratch. You‚Äôll learn the
    basics of `ptrace`, how breakpoints work, how to map source code to machine code
    and how to unwind the stack. Highly recommend starting with this one, if you wanna
    learn the fundamentals.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Writing a Debugger From Scratch**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**How Does a C Debugger Work? (GDB Ptrace/x86 example)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debugging with the natives**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Engineering Record And Replay For Deployability** (aka ‚Äúhow does `rr` work?‚Äù)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implementation of Live Reverse Debugging in LLDB**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://arxiv.org/abs/2105.12819](https://arxiv.org/abs/2105.12819)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Great detailed paper about the implementation of the reverse debugging in LLDB.
    Gives a good overview of various options and their trade-offs and explains in
    details the approach chosed for LLDB.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**How does gdb call functions?**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stack unwinding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Producing a call stack is one of the most basic debugger features, yet it‚Äôs
    far from trivial. In order to understand how it works, you‚Äôll need to learn about
    frame pointers, call frame information (CFI), DWARF expressions and many other
    things. Here are some article that explore this topic in great detail.
  prefs: []
  type: TYPE_NORMAL
- en: '**Unwinding the stack the hard way**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stack unwinding**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Apple Compact Unwinding Format: Documented and Explained**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unwinding a Stack by Hand with Frame Pointers and ORC**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DWARF-based Stack Walking Using eBPF**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Random debugger trivia
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I already gave up with the categorization, so dumping the rest under ‚Äúrandom
    trivia‚Äù.
  prefs: []
  type: TYPE_NORMAL
- en: '**Where Did My Variable Go? Poking Holes in Incomplete Debug Information**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Separating debug symbols from executables**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debugger Lies: Stack Corruption**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Everything Is Broken: Shipping rust-minidump at Mozilla**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fuzzing rust-minidump for Embarrassment and Crashes**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Crash reporting in Rust**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**So you want to live-reload Rust**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General useful knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Linkers**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Design and implementation of mold**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Definitive Guide to Linux System Calls**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System calls in the Linux kernel**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Discuss this article:'
  prefs: []
  type: TYPE_NORMAL
