- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:40:39'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:40:39'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Lessons Learned From Payments Startups - Paul Gross’s Blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支付初创公司的经验教训 - 保罗·格罗斯的博客
- en: 来源：[https://www.pgrs.net/2024/01/26/lessons-learned-from-payemnts-startups/](https://www.pgrs.net/2024/01/26/lessons-learned-from-payemnts-startups/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.pgrs.net/2024/01/26/lessons-learned-from-payemnts-startups/](https://www.pgrs.net/2024/01/26/lessons-learned-from-payemnts-startups/)
- en: Over my career so far, I’ve worked in a number of payments companies, including
    several startups. At the last startup, I was involved in building out a payments
    platform from scratch (from first line of code). This post is a collection of
    thoughts and lessons learned. Hopefully, at least some of this is useful to others.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我迄今为止的职业生涯中，我参与了许多支付公司，包括几家初创公司。在最后一家初创公司，我参与了从头开始构建支付平台（从第一行代码开始）。本文是我的思考和经验教训的集合。希望这些内容对其他人也有所帮助。
- en: 'The sections are relatively independent, so here are some quick links:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 各个部分相对独立，因此这里是一些快速链接：
- en: Every new tool, language, database, etc adds an enormous amount of complexity.
    You have to set it up and manage it (even managed offerings still require work),
    integrate with it, learn the ins and outs (often only after it’s failed in some
    way), and you will find out things you didn’t even know to think about.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每个新工具、语言、数据库等都会增加大量复杂性。您需要设置和管理它（即使是托管的服务仍然需要工作），与其集成，了解其内部（通常是在某种方式失败之后），并且您会发现一些您甚至不知道需要考虑的事情。
- en: So before I reach for something new, I try to use what we have, even if it’s
    not the optimal thing. For example, my projects have often used [PostgreSQL](https://www.postgresql.org/)
    as the database. PostgreSQL is quite full featured, so I try to use it for as
    much as possible. This includes job queues, search, and even simple caching (e.g.
    table that stores temporary values which get cleared out over time). It’s not
    necessarily the ideal platform for these, but it’s so much easier to just manage
    the one database than a whole suite of data systems. And at some point, the app
    will outgrow PostgreSQL’s capability for one or more of these, but even deferring
    that decision and work is hugely valuable.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我寻找新东西之前，我会尽量使用我们已经拥有的，即使这不是最优的选择。例如，我的项目经常使用 [PostgreSQL](https://www.postgresql.org/)
    作为数据库。PostgreSQL 功能非常全面，因此我尽量在尽可能多的地方使用它。这包括作业队列、搜索，甚至简单的缓存（例如存储临时值并随时间清除的表）。这些可能并不是最理想的平台，但管理一个数据库比整套数据系统要容易得多。即使在某些时候，应用程序会超出
    PostgreSQL 在某些方面的能力，但推迟做出这些决定和工作也是非常有价值的。
- en: The same goes for introducing new languages and frameworks. When possible, I
    like to use what we have and only introduce something new once we’ve pushed the
    existing stuff to the breaking point.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 引入新语言和框架也是如此。在可能的情况下，我喜欢使用我们已经有的东西，只有在把现有的东西推到极限之后才会引入新的东西。
- en: Another advantage is that over time, a lot of software becomes deprecated, but
    not removed. Some product or feature is no longer maintained, but since it’s in
    active use, it’s not fully shut down or deleted. It’s bad enough to leave deprecated
    code and services running, but it’s even worse if this means you now have extra
    databases or other platform systems that still have to be maintained, but don’t
    provide any current value. Even deprecated systems still need security upgrades,
    migrations to new servers, and more.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个优势是随着时间的推移，许多软件变得过时，但并未被移除。某些产品或功能不再维护，但由于仍在使用中，因此并未完全关闭或删除。留下过时的代码和服务已经很糟糕，但更糟糕的是，现在可能会有额外的数据库或其他平台系统仍然需要维护，但却没有提供任何当前价值。即使是过时的系统，仍然需要安全升级、迁移到新服务器等操作。
- en: Optimize For Change
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化变更
- en: It is especially true with startups, but really change is a part of any software
    project. Requirements change, our understanding of the problems change, technology
    changes, and even the focus of a company can change. So it’s important to ensure
    that the software can change as well. Sometimes this is subjective (which architecture
    is the most amenable to change) and other times it’s concrete.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这在初创公司尤为真实，但实际上，变更是任何软件项目的一部分。需求变化，我们对问题的理解变化，技术变化，甚至公司的重心都可能变化。因此，确保软件能够随之变化非常重要。有时这是主观的（哪种架构最容易变更），而有时则是具体的。
- en: For example, I worked on one system which had both an customer installed on-premise
    system and a cloud hosted system. The on-premise system was extremely hard to
    change as it required customers to do their own upgrades (often on their own schedules).
    In contrast, the cloud hosted system was fully under our control. So optimizing
    for change meant putting as much into the cloud hosted system as possible and
    keeping the on-premise portion thin. That way, we needed fewer changes to the
    hard to change parts, and we could roll out as many changes as we needed to the
    cloud piece on our own schedule.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我曾参与开发过一个系统，其中既有客户安装的本地系统，也有云托管的系统。本地系统因为要求客户自行升级（通常按照他们自己的时间表），所以极其难以更改。相比之下，云托管系统完全受我们控制。因此，优化变化意味着尽可能多地将事物放入云托管系统，并保持本地部分精简。这样，我们需要更少地更改难以更改的部分，并且可以按照我们自己的时间表推出尽可能多的更改。
- en: Optimizing for change can also help with architecture discussions and decisions.
    When deciding between alternatives, picking the one that is easiest to change
    later can be helpful. It’s easier to try new things when the cost of undoing that
    change isn’t as high. If the new framework or tool doesn’t work out, you can switch
    back or switch to something else that’s new.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 优化变化还可以帮助架构讨论和决策。在选择不同方案时，选择后期易于变更的方案可能会有所帮助。当撤销这种变更的成本不那么高时，尝试新事物会更容易。如果新的框架或工具不起作用，你可以切换回来或者转向其他新事物。
- en: In my opinion, one of the best ways to optimize for change is to keep things
    as simple as possible. Sometimes, folks will over-engineer current systems to
    try to predict how they will evolve in the future and to try to future-proof them
    now. One example of this is making things generic when there is only one type
    today. I think this is a mistake. Our guesses for how things will change are often
    incorrect, and it’s easier to change a simple system than a complex one. It’s
    also easier to maintain a simpler system today than carry the over-engineered
    baggage around with us.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，为了优化变化，保持事物尽可能简单是最好的方法之一。有时候，人们会过度设计当前系统，试图预测它们未来的演变，并在现在就试图未雨绸缪。一个例子就是在今天只有一种类型时就将事物设计得过于通用。我认为这是一个错误。我们对事物变化的猜测通常是错误的，而改变简单系统要比复杂系统容易得多。今天维护一个简单的系统也比带着过度设计的包袱容易得多。
- en: Focus on Iteration
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专注于迭代
- en: It’s super important to be able to break down work into small, deliverable pieces.
    I’ve seen too many projects go months without showing any value. Sometimes they
    do finally deliver, but other times, they will get canceled or significantly altered
    instead. It’s far better to release piecemeal, even if it’s not fully featured.
    Feature flags and other ways to partially roll out features are great here. It
    allows you to get production feedback from a subset of customers, or even just
    internal folks. And it allows visible progress throughout a long project.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 能够将工作分解成小的、可交付的部分非常重要。我见过太多项目数月未展示任何价值。有时候最终确实会交付，但也可能会被取消或者大幅修改。逐步发布要好得多，即使它还没有完全成型。特性标志和其他部分发布特性的方式在这里非常好用。它能让你从一部分客户或者内部人士那里得到生产反馈。它还能让长期项目中的进展可见。
- en: I find that a lot of frustration over software estimates and delivery time frames
    go away if folks can see visible progress over time, rather than a nebulous future
    delivery date.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现，如果人们能够随着时间看到可见的进展，而不是模糊的未来交付日期，那么对软件估算和交付时间表的许多挫败感会消失。
- en: One thing I wish I had a better solution for was making the stability of features
    more obvious. For example, I want to ship quickly to get feedback, but then I
    want to still be able to change that feature or API. However, once customers start
    using something, they often implicitly assume that it won’t change.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望有一个更好的解决方案来使特性的稳定性更加明显。例如，我希望快速发布以获得反馈，但随后仍然能够更改该特性或API。然而，一旦客户开始使用某些功能，他们通常会默认认为它不会改变。
- en: It would be great to find a way to mark features or APIs as alpha, beta, stable,
    etc and set clear expectations and time frames for those features. For example,
    encouraging customers to try out an alpha API, but knowing that it will change
    and they will have to update their integration periodically. Personally, I haven’t
    seen this done super well yet.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 希望能找到一种方法来标记特性或API为alpha、beta、stable等，并设定清晰的特性期望和时间框架。例如，鼓励客户试用alpha API，但知道它将会变化，他们需要定期更新集成。就我个人而言，我还没有看到这方面的超级好的做法。
- en: Testing
  id: totrans-split-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: 'Testing code is super valuable, and there are many different approaches with
    different trade-offs. A lot can be said on this topic, but I’ll just mention one
    aspect that I’ve been thinking about a lot: balancing speed and quality of tests.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 测试代码非常有价值，有许多不同的方法，各有不同的权衡。这个话题可以说很多，但我只想提到我一直在思考的一个方面：在测试速度和质量之间保持平衡。
- en: In general, having a lot of tests lets you make changes with confidence. If
    a large, thorough suite of tests pass, you can be reasonably sure you haven’t
    broken something. It can even let you upgrade core components with confidence,
    such as the application framework or language version.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，拥有大量的测试能让你有信心进行更改。如果一个大而全面的测试套件通过了，你可以相当确信你没有破坏任何东西。它甚至可以让你有信心升级核心组件，如应用框架或语言版本。
- en: However, the more tests you have the slower they will take to run. What starts
    as a suite of just a few seconds can easily take minutes or longer if you aren’t
    careful. One way this is addressed is by trying to isolate tests from other systems,
    often with mocking. For example, testing the core of the business logic without
    the database, or testing the API without actually opening connections and making
    API calls, or mocking out responses from 3rd party systems.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，测试越多，运行速度就会越慢。从最初几秒钟的套件开始，如果不小心的话很容易变成几分钟甚至更长时间。解决这个问题的一种方法是尝试将测试与其他系统隔离开来，通常使用模拟。例如，在没有数据库的情况下测试业务逻辑的核心，或者在没有实际打开连接并进行API调用的情况下测试API，或者模拟第三方系统的响应。
- en: But the trade-off here is that as you isolate tests to make them faster, you
    may also make them less realistic and less able to catch problems. The mock based
    tests are fast, but perhaps the mock doesn’t work the same way as the real component
    in certain edge cases.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但这里的权衡是，当你为了加快测试速度而孤立测试时，你可能也会使它们不太现实，也不太能够捕捉问题。基于模拟的测试速度快，但也许模拟在某些边缘情况下不会像真实组件那样工作。
- en: Or you want to change something about the interaction between components, and
    now you have to update hundreds of cases where you set up mocks for testing.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你想要改变组件之间的交互方式，现在你必须更新数百个设置了测试模拟的情况。
- en: I don’t have a great answer for this one. I try to isolate code from external
    dependencies when I can (e.g. by writing business logic as simple functions that
    take their data as input). And for the rest at the edges or when testing interactions,
    I just try to be thoughtful about the trade-offs we make for speed vs accuracy
    with testing. I also tend to prefer fakes over mocks, where you have a mostly
    stable stand-in that is used across many tests instead of setting up mock expectations
    per test.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个问题，我没有一个很好的答案。我尽量在可能的情况下将代码与外部依赖隔离开来（例如，通过将业务逻辑编写为简单函数，以其数据作为输入）。至于在边缘或测试交互时的其余部分，我只是尽量考虑我们在测试速度与准确性之间做的权衡。我也倾向于使用伪造物而不是模拟物，其中你有一个在许多测试中使用的基本稳定的替身，而不是为每个测试设置模拟期望。
- en: Modular Monolith
  id: totrans-split-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块化单体
- en: A lot has been said on modular monoliths elsewhere, so I’ll just add that I
    really like this approach. It’s really hard to know what the eventual seams of
    a software system will be, and it’s hard for a small team to work on many separate
    services (including hosting, deployment, monitoring, upgrades, etc).
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 其他地方已经对模块化单体架构说了很多，所以我只想补充说我真的喜欢这种方法。软件系统的最终接缝很难预测，而且小团队要同时处理许多独立服务（包括托管、部署、监控、升级等）也很难。
- en: In the recent cases where we used a monolith, I think it worked out really well.
    It will always be work to pull a service out of the monolith eventually, but we
    can try to be thoughtful about the code separation within the monolith to help
    make it easier (and to crystallize our thinking on what is a separate domain area).
    And we’re deferring these decisions until later, so we can focus on building more
    quickly now (which is especially important in a startup).
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近我们使用单体架构的案例中，我认为效果非常好。将来从单体中拆分服务总是需要付出一定的努力，但我们可以尝试在单体内部进行代码分离，以帮助使其更容易（并且明确我们对什么是独立领域的思考）。我们将这些决策推迟到以后，这样我们现在可以更快地专注于构建（这对初创公司尤为重要）。
- en: Put Everything in the Database
  id: totrans-split-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 把一切都放在数据库里
- en: I’m a big fan of storing almost everything in the database. I find that it makes
    things so much easier to understand and debug if you can query all of the relevant
    data together. Often, I will prefer the database to logging, since you can’t easily
    correlate logs with stored data (e.g. [Storing External Requests](/2023/12/14/storing-external-requests/)).
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常喜欢将几乎所有东西存储在数据库中。我发现，如果能够查询所有相关数据，这样做会使理解和调试变得更加容易。通常，我会更喜欢数据库而不是日志记录，因为你不能轻易地将日志与存储的数据进行关联（例如[存储外部请求](/2023/12/14/storing-external-requests/)）。
- en: For example, in payment systems, payments often move through many different
    states. It’s really helpful to have entries in the database that represent what
    changed and when, even if only the final state is important. Then, when trying
    to debug why a payment is in a weird state, we can see all of the relevant data
    in all of the tables in one place (e.g. in an events or audits table).
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在支付系统中，支付通常会通过许多不同的状态。在数据库中有条目代表发生了什么变化以及何时发生变化非常有帮助，即使只有最终状态是重要的。然后，在尝试调试为什么支付处于奇怪状态时，我们可以在一个地方查看所有相关数据的所有表中的数据（例如在事件或审计表中）。
- en: Adding a unique request identifier makes it even more useful. Then, you can
    associate a failed API requests with all of its database records.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个唯一的请求标识符会使其更加有用。然后，您可以将失败的API请求与其所有数据库记录关联起来。
- en: There are practical considerations, however, as data sizes really start to grow.
    One strategy I’ve used is to store some of this data with a shorter lifespan.
    For example, log style data may only be useful for a few weeks, so it can be deleted
    after that. Or exported to files and archived separately.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着数据量的真正增长，存在实际考虑因素。我使用过的一种策略是将部分数据存储时间缩短。例如，类似日志的数据可能只有几周有用，因此在那之后可以删除它。或者将其导出到文件并单独存档。
- en: Another issue is with Personally Identifiable Information (PII). There are often
    legal and ethical requirements for this type of data, so it needs to be considered
    on a case by case basis. Sometimes, it can still be stored, but only for a short
    time. Other times, it should be scrubbed or excluded from the database.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是个人身份信息（PII）。通常存在这类数据的法律和道德要求，因此需要具体情况具体分析。有时，仍然可以存储它，但仅有短暂时间。其他时候，应该清除或从数据库中排除。
- en: Make It Easy To Query The Database
  id: totrans-split-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使数据库查询变得简单
- en: Once you get everything into the database, I find it super helpful to give folks
    an easy way to query it. Recently, I used [Metabase](https://github.com/metabase/metabase)
    and really enjoyed how it allowed easy, web based querying and graphing of our
    data. We set it up with a read-only connection to a read replica, so there was
    little concern of impacting production or accidentally changing data. We found
    that both developers and non-technical folks used it extensively.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将所有内容存入数据库，我发现让人们轻松查询是非常有帮助的。最近，我使用了[Metabase](https://github.com/metabase/metabase)，并且真的很喜欢它如何允许轻松地基于Web进行查询和图形化我们的数据。我们将其设置为与只读连接到读副本，因此几乎没有影响生产或意外更改数据的担忧。我们发现开发人员和非技术人员都广泛使用它。
- en: For example, we made dashboards where you could enter an `orderId` and see all
    of the data from all of the tables that stored associated data. This was hugely
    valuable for debugging and for our support folks.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们创建了仪表板，您可以输入`orderId`，并查看存储关联数据的所有表中的所有数据。这对于调试和支持人员非常有价值。
- en: Again, there are considerations of who can see the data, and how much of it.
    But in general, giving folks the ability to answer their own data questions is
    super powerful, and it takes load off developers. And building shared dashboards
    and graphs so everyone can watch the same metrics was very powerful.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，有考虑谁可以看到数据以及看到多少的问题。但总的来说，让人们能够自己回答他们的数据问题非常强大，并且减轻了开发者的负担。构建共享仪表板和图表，以便每个人都可以观看相同的指标，非常有力量。
- en: Job Drain Pattern
  id: totrans-split-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作业排水模式
- en: Once a system outgrows a single database, data consistency issues start to pop
    up. Even introducing a background job system or a search tool can start to show
    issues. For example, the main database was written, but the process that copied
    to the search tool failed. Or the background job was queued before the main database
    was committed.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦系统发展超出单一数据库，数据一致性问题就会开始出现。即使引入后台作业系统或搜索工具也会显示问题。例如，主数据库已写入，但复制到搜索工具的过程失败了。或者后台作业在主数据库提交之前排队了。
- en: There are various ways to solve this problem, and in particular, I like the
    job drain pattern, written up well at [Transactionally Staged Job Drains in Postgres](https://brandur.org/job-drain)
    . I’ve used this pattern on several different projects successfully.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种方法可以解决这个问题，特别是我喜欢工作排水模式，详细介绍在[Postgres中的事务式工作排水](https://brandur.org/job-drain)。我在几个不同的项目上成功使用过这种模式。
- en: Check in Generated Files
  id: totrans-split-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查生成的文件
- en: Similar to put everything in the database is put everything into git. For me,
    this includes generated files when possible. I know a lot of ecosystems prefer
    generating only at build time into temporary directories, but I really like having
    them in git. I find it really useful to be able to diff these files when making
    changes, such as upgrading the generation library or code. Otherwise, it can be
    hard to tell if anything meaningful has changed, or if more has changed than you
    expected.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将一切放入数据库的做法与将一切放入git类似。对我来说，这包括尽可能包括生成的文件。我知道很多生态系统更喜欢仅在构建时生成到临时目录，但我真的喜欢将它们放入git中。在进行更改时，比如升级生成库或代码时，我发现能够对比这些文件非常有用。否则，很难确定是否有任何重要的更改，或者更改是否超出预期。
- en: When working with [Gradle](https://gradle.org), I also like to check in the
    generated [lockfiles](https://docs.gradle.org/current/userguide/dependency_locking.html)
    that specify the exact version of every transitive dependency. Then, when [Dependabot](https://docs.github.com/en/code-security/dependabot)/[Renovate](https://github.com/renovatebot/renovate)/etc
    perform automated upgrades, it’s easy to see which transitive dependencies have
    also changed.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[Gradle](https://gradle.org)时，我还喜欢提交生成的[锁定文件](https://docs.gradle.org/current/userguide/dependency_locking.html)，这些文件指定了每个传递依赖的确切版本。然后，当[Dependabot](https://docs.github.com/en/code-security/dependabot)/[Renovate](https://github.com/renovatebot/renovate)/等执行自动升级时，很容易看到哪些传递依赖项也发生了变化。
- en: Decision Logs
  id: totrans-split-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 决策日志
- en: I think in general, a lot of internal documentation is wasted effort. People
    spend countless hours writing up product plans or docs that are never looked at
    again.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，我认为很多内部文档都是浪费的努力。人们花费无数小时起草产品计划或文档，然后再也不看它们。
- en: 'However, I do think some documentation is often valuable. In particular, I
    like Decision Logs. The idea is that whenever the team needs to make a decision,
    that decision is captured in some light documentation. I think it serves two purposes:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我认为有些文档通常是有价值的。特别是我喜欢决策日志。其思想是每当团队需要做出决策时，就要在一些简短的文档中记录下来。我认为它有两个目的：
- en: Writing up the options along with the advantages and disadvantages of each helps
    clarify thinking, and helps make better decisions. It shows what you’ve considered,
    and allows others to note gaps or misunderstandings. It’s also often helpful to
    clarify what you are *not* trying to address with the decision, i.e. what’s out
    of scope.
  id: totrans-split-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将选项及其各自的优缺点写出来有助于澄清思路，帮助做出更好的决策。它展示了你考虑过什么，并允许其他人注意到空白或误解。还经常有助于澄清决策时你*不*打算解决的问题，即什么是超出范围的。
- en: Months or even years later, looking back at the Decision Log can be useful to
    understand why the system is designed a certain way. For example, someone new
    is hired and doesn’t understand why you chose Database X over Database Y. They
    can go read the entry. Or when someone proposes something new that’s already been
    considered, you can go back and see why it wasn’t chosen previously and if anything
    in the situation has changed (e.g. with the company or the capabilities of the
    tool). The Decision Log helps to remove “institutional knowledge” where only a
    handful of old-timers know the reasons for anything.
  id: totrans-split-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几个月甚至几年后，回顾决策日志可能对理解系统为何以某种方式设计很有帮助。例如，新雇员不理解为什么选择数据库X而不是数据库Y，可以查看日志条目。或者当有人提出已经考虑过的新建议时，可以回头看看为什么之前没有选择它，以及当前情况是否有变化（例如公司或工具的能力）。决策日志有助于消除只有少数老员工知道任何事情原因的“机构知识”。
- en: I do think that these Decision Logs (and other documentation) should be kept
    relatively light, however. Folks should not spend days writing them up.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我认为这些决策日志（以及其他文档）应该保持相对简洁。大家不应该花费几天时间起草它们。
- en: Continuous Deployment
  id: totrans-split-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续部署
- en: 'I’m a big fan of continuous deployment. This can look different on different
    projects, but ideally, every commit to the main branch will deploy to both test
    and production environments. I see a number of benefits:'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常喜欢持续部署。这在不同的项目中可能有所不同，但理想情况下，每次对主分支的提交都会部署到测试和生产环境。我看到了许多好处：
- en: It means the time between commit and production is small, so completed work
    gets into the hands of users quickly. You also don’t have to worry about when
    code will be released, and when other code that depends on it can also be released.
    You can merge a change, let it deploy, and then merge another change.
  id: totrans-split-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这意味着提交到生产之间的时间很短，因此完成的工作可以迅速地交到用户手中。你也不必担心代码何时发布，以及依赖于它的其他代码何时也可以发布。你可以合并一个更改，让它部署，然后再合并另一个更改。
- en: It requires the deploys to be fully automated, which both makes them repeatable
    and also generally discoverable. Anyone can see what steps are run for every deployment
    and they are always the same (no hidden steps). Furthermore, if there’s ever a
    need for a manual deployment, someone can go look at the scripts and run the same
    commands.
  id: totrans-split-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这要求部署必须完全自动化，这样既可以重复执行，也可以通常被发现。任何人都可以看到每次部署运行的步骤，它们始终相同（没有隐藏的步骤）。此外，如果需要手动部署，某人可以查看脚本并运行相同的命令。
- en: It removes an often time consuming developer chore. Now, deploys just happen
    and you don’t have to spend time coordinating or performing them.
  id: totrans-split-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它消除了通常耗时的开发者繁琐工作。现在，部署就像自动发生的，你不必花时间协调或执行它们。
- en: 'For beta features, or features that aren’t ready to be visible to everyone,
    I think feature flags work well. There are lots of libraries and products in this
    space, but it’s possible to start simple with what is built into GitLab: [https://docs.gitlab.com/ee/operations/feature_flags.html](https://docs.gitlab.com/ee/operations/feature_flags.html)'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于尚未准备向所有人展示的测试功能（beta features），我认为功能标志（feature flags）非常有效。在这个领域有很多库和产品，但可以从内置于GitLab中的功能简单开始：[https://docs.gitlab.com/ee/operations/feature_flags.html](https://docs.gitlab.com/ee/operations/feature_flags.html)
