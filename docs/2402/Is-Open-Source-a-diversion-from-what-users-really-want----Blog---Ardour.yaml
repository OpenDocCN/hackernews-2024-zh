- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:35:02'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Is Open Source a diversion from what users really want? - Blog - Ardour
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://discourse.ardour.org/t/is-open-source-a-diversion-from-what-users-really-want/102665](https://discourse.ardour.org/t/is-open-source-a-diversion-from-what-users-really-want/102665)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When I [started working on Ardour](https://discourse.ardour.org/t/ardour-20th-birthday/102333),
    it never occured to me to do anything other than use the GNU Public License (GPL),
    the most well-known way to release “open source” software. At that time, it was
    a choice driven by a combination of:'
  prefs: []
  type: TYPE_NORMAL
- en: my passionate belief in what is more appropriately called "free/libre software"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an awareness that I'd probably need help developing Ardour. The open source
    model seemedto me the best way to make it possible for others to contribute (no
    matter what their motivations might have been).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the desirability of being able to use dozens of software libraries released
    under GPL-related licenses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, developing software with complexity on the level of Ardour’s is never
    going to be easy, and finding other people willing and able to contribute to such
    a project is always going to be hard, whether you’re an open source project or
    a proprietary company.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, underlying both of those reasons why I wanted to use the GPL was a
    conviction the access to the source code was critical to both:'
  prefs: []
  type: TYPE_NORMAL
- en: giving users the freedom they deserved
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: attracting developers (or even just "power users") to contribute to the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I remain convinced that access to source code is a fundamental part of the ["four
    freedoms"](https://www.gnu.org/philosophy/free-sw.en.html) that Richard Stallman
    has outlined as the basis of the concept of "free/libre software". But as [described
    at great length and exhaustive detail](https://louigiverona.com/?page=projects&s=writings&t=philosophy&a=philosophy_freedoms)
    by Berlin-based electronic musician and developer Louigi Verona, it's not quite
    that simple.
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, how could anyone really contribute to the project in any substantive
    way without source code access? If they were going to add functionality, or extend
    it or in some other way modify it, source code access seems like a basic and absolute
    requirement.
  prefs: []
  type: TYPE_NORMAL
- en: A [recent thread on our forums](https://discourse.ardour.org/t/lua-scripting-gui-library/102423)
    has made me revisit these assumptions, and this has led me to have some doubts
    about what "open source" really means for a project like Ardour.
  prefs: []
  type: TYPE_NORMAL
- en: Forum member Musocity wants to be able to extend Ardour without having to build
    the program from source. If you read the thread, you'll see both myself and co-developer
    Robin Gareus pushing back on this concept several times. Nevertheless, Musocity
    continues to use Reaper as a counter-example in which much greater levels of user-driven
    "extensions" are possible without any access to the source code and without any
    requirement to rebuild the program.
  prefs: []
  type: TYPE_NORMAL
- en: My gut reaction continues to be something along the lines of
  prefs: []
  type: TYPE_NORMAL
- en: Are you kidding me? We give you full access to *everything* in Ardour, not just
    some pre-selected functionality exposed via a scripting language. You can build
    it on almost any platform, add/remove/enhance almost anything you can imagine
    ... and you keep pushing for a 2nd-rate scripting interface just so that you can
    do stuff without dealing with the build process?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'But this forum thread has made me keep returning to two points I mentioned
    above. Specifically in the form of follow up questions:'
  prefs: []
  type: TYPE_NORMAL
- en: are users truly being given freedom by confronting them with a technological
    infrastructure that almost none of them can comprehend?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: does the requirement to rebuild the program, or from a different perspective,
    to write C++ code, attract or deter developers to/from the project?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These are not easy questions to answer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by pointing out what Ardour already offers: a very sustantial
    Lua API providing access to the majority of the program, and with it the ability
    to write both DSP code and higher-level functionality, all without rebuilding
    Ardour or dealing with C++. This has all been Robin Gareus'' effort, and he has
    done an amazing job (aided by just how suitable Lua is for this sort of thing
    - partly why Reaper uses it too, no doubt). What is missing is the ability to
    construct arbitrary graphic user interface components from Lua. This puts distinct
    limits on what can be done with scripting in Ardour, even given how much is already
    possible.'
  prefs: []
  type: TYPE_NORMAL
- en: Reaper stands as an existence proof of what can be done when the scripting capabilities
    are essentially all-encompassing. Ableton Live, with both Max4Live and other "scripting
    systems" offers slightly less extensive capabilities, but still somewhat more
    than Ardour in terms of GUI integration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nevertheless, it remains the case that nobody except for Reaper''s (or Live''s)
    developers can modify fundamental aspects of the program. The work that we have
    been doing on Ardour 6.0 would never have been possible to do via Lua, and that
    would be true in the context of Reaper or Live as well. So the first thing that
    we need to note is:'
  prefs: []
  type: TYPE_NORMAL
- en: the scripting interface for a DAW can vary in terms of what it makes possible
    to accomplish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: this is particularly true in terms of integration into the "main body" of DAW's
    own GUI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: no matter what the scripting interface offers, it does not allow anyone to do
    fundamental work on the internals of the DAW. A DAW that cannot do cue monitoring
    will never become one that can because of a script extension. The same goes for
    full latency compensation, misdesigned region/clip lists and an almost inexhaustible
    list of other features that cannot be implemented via script extension system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Musocity, it appears, doesn''t really care about any of this: they''ve seen
    what you can do with Reaper''s scripting interface, and it seems entirely reasonable
    to them that the same ought to be true in Ardour *whether or not the entire program''s
    source code is available*.'
  prefs: []
  type: TYPE_NORMAL
- en: Which brings us to the second aspect of why this is complicated. Even 20 years
    ago there were full time web developers. There were also so-called "application
    developers" who typically worked entirely inside database-connected development
    tools to create ways to view and edit data. In the two decades since Ardour started,
    we've seen an entire generation of people whose job description includes "programming"
    but who have never (or almost never) compiled a piece of software in their life.
    The web development infrastructure that has grown up over the last two decades
    has seen huge numbers of people creating software in ways that never require them
    to take "source code" and transform it into "a program". They write "scripts"
    (be it in Javascript, Java, Python, Ruby or whatever they prefer) and the necessary
    magic happens to ensure that what they've written actually executes, somehow.
    Even for the most sophisticated web development stacks, where there's some notion
    of "build systems" and "deployment", these only have a superficial resemblance
    to the workflow involved with a desktop application written in a compiled language.
  prefs: []
  type: TYPE_NORMAL
- en: In my limited experience interacting with people who develop on a web stack,
    the build process for a program like Ardour is frequently a massive stumbling
    block to any participation they might have considered. They may not mind dealing
    with poorly documented (or undocumented) APIs, complex data structures and mind-boggling
    program control flow. But tell them that after they make a change, they have to
    "build" the program and that in some circumstances this will take several minutes
    to complete ... enthusiasm starts dying rapidly. And now consider what happens
    when these developers are on platforms (primarily Windows and macOS) where they
    cannot issue a single command (e.g. `apt-get build-dep ardour`) to set up their
    build environment, but must painstakingly build/install 2GB of source code-provided
    3rd party libraries, *before they can even build Ardour for the first time*.
  prefs: []
  type: TYPE_NORMAL
- en: It's not entirely surprising that a project like this doesn't have many active
    developers at any given point in time!
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, there are other factors too: really getting into Ardour development
    means being comfortable with (in no particular order): real time programming,
    parallel/thread programming, cross-platform development, C++ idioms, model-view-controller
    design, the GTK+ toolkit, some level of DSP knowledge, a non-trivial understanding
    of audio and MIDI hardware, the MIDI protocol, and lots more. Even if Ardour was
    paying more developers, it would be extremely hard to find people with the right
    background and outlook.'
  prefs: []
  type: TYPE_NORMAL
- en: When I released Ardour under the GPL, my vision was that by virtue of it being
    an open source project (technically orthogonal to its status as "free/libre software"),
    it would be possible, even encouraged, for other developers to participate and
    get involved in extending its capabilities. Musocity's forum thread, and their
    insistence that "all this should be possible by scripting" has made me wonder
    if this belief was ever true, and in particular if it is still true.
  prefs: []
  type: TYPE_NORMAL
- en: Why isn't the Reaper model better? Technically-inclined users can do insane
    things with a script, and in so doing can easily address most of the things that
    particular users want the program to do. Almost no Reaper user cares that they
    cannot build Reaper from source, cannot modify the fundamentals of the program,
    cannot redistribute a modified Reaper to their colleagues/friends. It matters
    much more to them that someone outside of the Reaper team can cook up a script
    that can do "just about anything". That's what freedom looks like to Reaper users
    (or so it appears), and giving them the source to Reaper would barely change that,
    if at all.
  prefs: []
  type: TYPE_NORMAL
- en: Verona touches on so many aspects of this in his piece. The demographics/background
    of computer users in 2020 is so very, very different from the way things were
    when Stallman began the concept of "free/libre software". Back then, "freedom
    to tinker" really did mean the freedom to read and edit source code, and to rebuild
    programs from source. Today, even though this is still a foundational aspect of
    the concept of "free/libre software", the freedom that many users want doesn't
    come from source code access at all. It comes from applications that enable their
    users to easily customize things to "about the level that most users care about".
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, the concept of free/libre software is still vitally important
    to me and millions of other people. As mentioned above, even the best script extension
    system (or any form of program customizability) cannot replace source code (and
    build system) access in terms of providing the kind of freedom to tinker (and
    thus freedom to learn) that Stallman (and many others) envisaged.
  prefs: []
  type: TYPE_NORMAL
- en: But perhaps for applications like Ardour, ones that do not yet exist, there
    ought to be a different development pathway. I remember once wondering if we should
    have implemented the entire GUI in PyGTK (i.e. Python). We didn't, and most of
    my curiosity was about whether it would have helped or hindered our development
    process. However, had we done so, one of the consequences would have been that
    many changes to the program would have been made simpler, easier to access and
    would require no "rebuild".
  prefs: []
  type: TYPE_NORMAL
- en: 'I wonder if going forward, large-scale apps like Ardour ought to (as Reaper
    did relatively early in its life) consider the "script extension system" to be
    a vital and critical part of the application infrastructure. This would mean,
    for example, writing large parts of "core functionality" using this system, rather
    than dropping back into C++ to get things done. There are precedents for this:
    GNU Emacs, for example, is at some level written in C, but almost everything about
    the program is actually constructed in Emacs Lisp, its own "scripting extension".
    The C core of Emacs is so small and so irrelevant that it almost doesn''t matter
    that it is there: if you want to modify or extend Emacs, you (almost always) write
    Lisp, not C.'
  prefs: []
  type: TYPE_NORMAL
- en: Forcing the "core" developers to, as the saying goes, "eat the same shit" as
    regular users forces them to focus their attention on the quality of said "shit".
    Removing the need to rebuild the application after most changes opens the application
    to contributions from people who cannot deal with (1) the idea of compilation
    and/or (2) the reality of compilation.
  prefs: []
  type: TYPE_NORMAL
- en: Would we have attracted more developers over the years if Ardour had been more
    accessible to programmers with skills in Python, Javascript or Ruby? It's hard
    to know. I have no idea how many people (absolute or as a fraction of the user
    base) have written notable extensions for Reaper (or Live). It's possible that
    it would make no difference whatsoever, and would merely divert developer time
    away from one level (C++) where we can function efficiently and happily and divert
    it to another ("scripting extension") that doesn't actually enable much at all.
  prefs: []
  type: TYPE_NORMAL
- en: I don't know that answers to any of the questions I've mentioned above. I do
    know that Robin did an amazing job bringing an incredible level of scripting with
    Lua into Ardour, and that the things you can't do with it are very much a result
    of our joint intention - the intention that people who want to modify or extend
    Ardour should plan on working on the (open) source code for the program, not by
    convincing us to expand to scope of our scripting support.
  prefs: []
  type: TYPE_NORMAL
- en: But perhaps that's wrong. What do you think?
  prefs: []
  type: TYPE_NORMAL
