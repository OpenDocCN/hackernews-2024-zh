- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:33:27'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:33:27'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Microdot: a web framework for microcontrollers [LWN.net]'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Microdot：微控制器的Web框架 [LWN.net]
- en: 来源：[https://lwn.net//Articles/959067/](https://lwn.net//Articles/959067/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://lwn.net//Articles/959067/](https://lwn.net//Articles/959067/)
- en: '| **Please consider subscribing to LWN**Subscriptions are the lifeblood of
    LWN.net. If you appreciate this content and would like to see more of it, your
    subscription will help to ensure that LWN continues to thrive. Please visit [this
    page](/subscribe/) to join up and keep LWN on the net. |'
  id: totrans-split-6
  prefs: []
  type: TYPE_TB
  zh: '| **请考虑订阅LWN**订阅是LWN.net的生命线。如果您喜欢这些内容并希望看到更多类似内容，请订阅支持，这将有助于LWN继续繁荣发展。请访问[此页面](/subscribe/)注册并保持LWN在网上的存在。
    |'
- en: By **Jake Edge**
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由**Jake Edge**撰写
- en: January 23, 2024
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年1月23日
- en: There are many different Python [web frameworks](https://wiki.python.org/moin/WebFrameworks),
    from nano-frameworks all the way up to the full-stack variety. One that recently
    caught my eye is [Microdot](https://github.com/miguelgrinberg/microdot), the "<q>impossibly
    small web framework for Python and MicroPython</q>"; since it targets [MicroPython](https://micropython.org/),
    it is plausible for running the user interface of an "internet of things" (IoT)
    device, for example. Beyond that, it is [Flask](https://flask.palletsprojects.com/en/3.0.x/)-inspired,
    which should make it reasonably familiar to many potential web developers.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的Python [Web框架](https://wiki.python.org/moin/WebFrameworks)，从微型框架到全栈框架。最近引起我注意的是[Microdot](https://github.com/miguelgrinberg/microdot)，这是一个“极小型Python和MicroPython的Web框架”；因为它针对[MicroPython](https://micropython.org/)，所以可以运行“物联网”（IoT）设备的用户界面，例如。此外，它受到[Flask](https://flask.palletsprojects.com/en/3.0.x/)的启发，这使它对许多潜在的Web开发者来说应该是相当熟悉的。
- en: Microdot was created by Miguel Grinberg, who also created the well-known [Flask
    Mega-Tutorial](https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world)
    that has served as the introduction to the Flask web framework for many people.
    While Flask is considered to be a microframework, it still requires a full CPython
    environment to run; another Python microframework described alongside Flask in
    a [2019 LWN article](/Articles/792882/), [Bottle](https://bottlepy.org/docs/dev/),
    has similar needs. Microdot came about because Grinberg [wanted a framework for
    MicroPython](https://blog.miguelgrinberg.com/post/microdot-yet-another-python-web-framework)
    and did not find anything usable back in 2019.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: Microdot由Miguel Grinberg创建，他还创建了著名的[Flask Mega-Tutorial](https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world)，这对许多人来说是介绍Flask
    Web框架的入门。尽管Flask被认为是一个微框架，但它仍然需要完整的CPython环境来运行；另一个Python微框架在2019年的LWN文章中与Flask并列，名为[Bottle](https://bottlepy.org/docs/dev/)，有类似的需求。Microdot诞生是因为Grinberg在2019年希望找到一个适用于MicroPython的框架，但没有找到合适的东西。
- en: MicroPython is a cut-down version of Python that is suitable for microcontrollers;
    LWN [looked at version 1.20](/Articles/931051/) in May 2023\. There is a [lengthy
    list of differences](https://docs.micropython.org/en/latest/genrst/index.html)
    between MicroPython and CPython, but there is enough overlap that Python—and web—programmers
    will feel right at home with Microdot. Code can be moved back and forth, because
    Microdot can also run under CPython, though, of course, MicroPython runs on regular
    CPUs as well.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: MicroPython是Python的精简版，适用于微控制器；LWN [在2023年5月看了版本 1.20](/Articles/931051/)。MicroPython与CPython之间存在[许多差异](https://docs.micropython.org/en/latest/genrst/index.html)，但它们有足够的重叠，使得Python和Web程序员在使用Microdot时感到宾至如归。因为Microdot也可以在CPython下运行，所以代码可以来回移植，尽管MicroPython当然也可以在常规CPU上运行。
- en: 'As shown in Grinberg''s announcement blog post, a canonical "hello world" web
    application looks fairly straightforward:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Grinberg在他的宣布博客文章中所示，“Hello World” Web应用看起来非常简单：
- en: '[PRE0]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `@app.get()` decorator describes the URL to match and the `index()` function
    returns data that is used as the response. In this case, returning a dictionary
    causes Microdot to format the response as JSON; a status code or custom headers
    can be returned as the second and third elements of a multi-value return.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`@app.get()`装饰器描述了匹配的URL，`index()`函数返回作为响应使用的数据。在这种情况下，返回字典会导致Microdot将响应格式化为JSON；状态码或自定义标头可以作为多值返回的第二和第三个元素。'
- en: One thing that does stand out in the example is the "`async def`" in the definition
    of `index()`. While Microdot 1.0, which was released in August 2022, had a synchronous
    base with an [`asyncio`](https://docs.python.org/3/library/asyncio.html) extension,
    Microdot 2.0, which was released in December, is designed to be fully asynchronous.
    Regular `def` can still be used with Microdot 2.0, but web-server responsiveness
    will suffer on microcontrollers, which generally lack threading support. Instead,
    inside a handler defined with `async def`, processing that requires I/O should
    be handled using `await`, rather than synchronously waiting for the operation
    to return control. Grinberg gave a [talk on asynchronous Python](/Articles/726600/)
    at PyCon 2017 that may be of interest to readers who are not familiar with the
    topic.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中突出显示的一件事是`index()`的定义中的"`async def`"。虽然Microdot 1.0在2022年8月发布时具有同步基础和[`asyncio`](https://docs.python.org/3/library/asyncio.html)扩展，但在2022年12月发布的Microdot 2.0则设计为完全异步。在Microdot 2.0中仍然可以使用普通的`def`，但在通常不支持线程的微控制器上，Web服务器的响应性能会受到影响。因此，在使用`async def`定义的处理程序内部，需要使用`await`来处理需要I/O的处理，而不是同步等待操作返回控制。Grinberg在PyCon 2017上做了一场关于[异步Python的讲座](/Articles/726600/)，对不熟悉这个主题的读者可能会感兴趣。
- en: 'While Microdot is inspired by Flask, it is not beholden to it. In particular,
    Grinberg said that he liked the Flask [Blueprints](https://flask.palletsprojects.com/en/3.0.x/blueprints/)
    for modularizing web applications, but thought the Flask mechanism was too complicated.
    So Microdot has the concept of ["mounting" sub-applications](https://microdot.readthedocs.io/en/stable/intro.html#mounting-a-sub-application)
    at different points in the URL hierarchy. As the documentation shows, a `customer_app`
    and an `orders_app` can be created in two separate files, which get imported into
    the main application source file in order to create the full application with
    something like:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Microdot受到Flask的启发，但并不受其束缚。特别是，Grinberg表示他喜欢Flask的[蓝图](https://flask.palletsprojects.com/en/3.0.x/blueprints/)用于模块化Web应用程序，但认为Flask的机制过于复杂。因此，Microdot引入了在URL层次结构中的不同点上["挂载"子应用程序](https://microdot.readthedocs.io/en/stable/intro.html#mounting-a-sub-application)的概念。正如文档所示，可以在两个单独的文件中创建`customer_app`和`orders_app`，然后将它们导入到主应用程序源文件中，以便通过类似方式创建完整的应用程序：
- en: '[PRE1]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: That allows the functionality for customers and orders to be written as if they
    are at the top-level of the hierarchy, then they can be mounted where they should
    actually appear; any reorganization would not require changes to the sub-applications,
    just a different mount point, as long as relative URLs are used within the sub-application
    code.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许顾客和订单的功能被写成它们在层次结构的顶层，然后它们可以被安装到它们实际应出现的位置；任何重新组织都不需要更改子应用程序，只需使用子应用程序代码内部的相对URL进行不同的挂载点。
- en: For rendering its pages, Microdot [supports](https://microdot.readthedocs.io/en/stable/extensions.html#rendering-templates)
    the familiar [Jinja templating engine](https://jinja.palletsprojects.com/en/3.1.x/),
    but only for CPython. For MicroPython, [`utemplate`](https://github.com/pfalcon/utemplate)
    can be used and it will work on CPython too; it implements a simplified version
    of the Jinja syntax. Other [extensions](https://microdot.readthedocs.io/en/stable/extensions.html)
    provide WebSocket, secure user session, server-sent event (SSE), and other functionality.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其页面的渲染，Microdot [支持](https://microdot.readthedocs.io/en/stable/extensions.html#rendering-templates)
    熟悉的[Jinja模板引擎](https://jinja.palletsprojects.com/en/3.1.x/)，但仅适用于CPython。对于MicroPython，可以使用[`utemplate`](https://github.com/pfalcon/utemplate)，它也可以在CPython上工作；它实现了Jinja语法的简化版本。其他[扩展](https://microdot.readthedocs.io/en/stable/extensions.html)
    提供了WebSocket、安全用户会话、服务器发送事件（SSE）和其他功能。
- en: 'In its most minimal configuration, Microdot clocks in at a little over 700
    lines of code (plus comments and blank lines) in a single file; the full configuration
    is a bit over double that in 11 files. Grinberg contrasts that with Flask and
    [FastAPI](https://fastapi.tiangolo.com/), which both come in around ten times
    the number of lines of code when including their main dependencies ([Werkzeug](https://werkzeug.palletsprojects.com/en/3.0.x/)
    and [Starlette](https://www.starlette.io/), respectively). Meanwhile, the third-party
    dependencies for Microdot are minimal, as one might guess:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在其最简配置中，Microdot 的代码量略多于 700 行（加上注释和空行）在一个单文件中；完整配置稍多于 11 个文件。格林伯格将其与 Flask
    和 [FastAPI](https://fastapi.tiangolo.com/) 进行了对比，后者在包括其主要依赖项（[Werkzeug](https://werkzeug.palletsprojects.com/en/3.0.x/)
    和 [Starlette](https://www.starlette.io/)）时代码量约为其十倍。同时，Microdot 的第三方依赖性很少，正如人们可能猜测的那样：
- en: The single-file minimal version does not require any dependencies at all, and
    it even includes its own web server. Some of the optional features do require
    third-party dependencies, and this is comparable to the larger frameworks. Like
    Flask, you will need to add a templating library (Jinja or uTemplate) to use templates.
    For user sessions, Microdot relies on PyJWT, while Flask uses its own Itsdangerous
    package.
  id: totrans-split-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个单文件的极简版本完全不需要任何依赖，并且甚至包含自己的 Web 服务器。一些可选功能确实需要第三方依赖，这与更大的框架类似。像 Flask 一样，你需要添加一个模板库（Jinja
    或 uTemplate）来使用模板。对于用户会话，Microdot 依赖于 PyJWT，而 Flask 则使用其自己的 Itsdangerous 包。
- en: '[Deploying a web application](https://microdot.readthedocs.io/en/stable/extensions.html#deploying-on-a-production-web-server)
    on MicroPython uses the built-in web server, but CPython can use [Asynchronous
    Server Gateway Interface](https://asgi.readthedocs.io/en/latest/) (ASGI) servers
    or those that support its predecessor of sorts: [Web Server Gateway Interface](https://wsgi.readthedocs.io/en/latest/what.html)
    (WSGI). TLS is also [supported](https://microdot.readthedocs.io/en/stable/intro.html#web-server-configuration)
    so serving can be done over HTTPS. There are several example programs using each
    server type, and both template engines, linked from the documentation. While WSGI
    is a synchronous protocol, Microdot itself runs in an `asyncio` event loop, so
    `async def` and `await` [should still be used](https://microdot.readthedocs.io/en/stable/intro.html#concurrency).'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[部署 Web 应用程序](https://microdot.readthedocs.io/en/stable/extensions.html#deploying-on-a-production-web-server)
    在 MicroPython 上使用内置的 Web 服务器，但 CPython 可以使用 [Asynchronous Server Gateway Interface](https://asgi.readthedocs.io/en/latest/)
    (ASGI) 服务器或支持其类似前身的 [Web 服务器网关接口](https://wsgi.readthedocs.io/en/latest/what.html)
    (WSGI)。TLS 也 [受支持](https://microdot.readthedocs.io/en/stable/intro.html#web-server-configuration)，因此可以通过
    HTTPS 进行服务。文档中链接了每种服务器类型和两种模板引擎的几个示例程序。虽然 WSGI 是同步协议，但 Microdot 本身在 `asyncio`
    事件循环中运行，因此应仍然使用 `async def` 和 `await` [进行编写](https://microdot.readthedocs.io/en/stable/intro.html#concurrency)。'
- en: Overall, Microdot looks like a nice option for new projects for microcontrollers.
    Grinberg specifically does not recommend that people drop their current CPython
    framework in favor of Microdot, unless they are unhappy with it or need to really
    eke out the memory savings that Microdot can provide. There are now multiple MicroPython
    web frameworks and tools [listed](https://awesome-micropython.com/#web) on the
    [Awesome MicroPython web site](https://awesome-micropython.com/), so there are
    lots more options than what Grinberg found five years ago. A simple web application
    makes for an almost ideal interface to a headless, network-connected device, so
    finding ways to make them easier to develop is welcome. From that perspective,
    Microdot is worth a look.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来看，Microdot 看起来是微控制器新项目的一个不错选择。格林伯格特别不建议人们放弃他们当前的 CPython 框架来支持 Microdot，除非他们对当前框架不满意或确实需要
    Microdot 可提供的内存节省。现在有多个 MicroPython Web 框架和工具列在 [Awesome MicroPython 网站](https://awesome-micropython.com/#web)上，所以比格林伯格五年前发现的选项要多得多。一个简单的
    Web 应用程序几乎是与无头、网络连接设备的理想接口，因此寻找使其开发更加轻松的方法是受欢迎的。从这个角度来看，Microdot 值得一试。
- en: '* * *'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: (
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: '[Log in](https://lwn.net/Login/?target=/Articles/959067/)'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[登录](https://lwn.net/Login/?target=/Articles/959067/)'
- en: to post comments)
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 发表评论)
