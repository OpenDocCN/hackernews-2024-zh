- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:00:03'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:00:03'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Union, intersection, difference, and more are coming to JavaScript Sets | Sonar
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Union、intersection、difference 等功能即将到来到 JavaScript Set | Sonar
- en: 来源：[https://www.sonarsource.com/blog/union-intersection-difference-javascript-sets/](https://www.sonarsource.com/blog/union-intersection-difference-javascript-sets/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.sonarsource.com/blog/union-intersection-difference-javascript-sets/](https://www.sonarsource.com/blog/union-intersection-difference-javascript-sets/)
- en: The [JavaScript `Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set
    "JavaScript Set") was introduced to the language in the ES2015 spec, but it has
    always seemed incomplete. That's about to change.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[JavaScript `Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set
    "JavaScript Set") 在 ES2015 规范中引入了语言，但似乎始终不完整。这即将改变。'
- en: Sets are collections of values where each value may only appear once. In the
    ES2015 version of the `Set`, the available functionality revolved around creating,
    adding to, removing from, and checking the membership of a `Set`. If you wanted
    to operate on or compare more than one set, you had to write your own functions.
    Thankfully, [TC39](https://tc39.es/ "TC39")—the committee established to work
    on the ECMAScript spec—and the browsers have been working on this. We are now
    seeing functions like `union`, `intersection` and `difference` in JavaScript implementations.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 集合是一组值的集合，其中每个值只能出现一次。在 ES2015 版本的 `Set` 中，可用的功能围绕着创建、添加、删除和检查 `Set` 的成员身份展开。如果你想要操作或比较多个集合，你必须编写自己的函数。幸运的是，[TC39](https://tc39.es/
    "TC39") — 负责制定 ECMAScript 规范的委员会 — 和浏览器一直在努力解决这个问题。我们现在在 JavaScript 实现中看到了像 `union`、`intersection`
    和 `difference` 这样的函数。
- en: Before we look at the new functionality, let's recap what JavaScript Sets can
    do now and then we'll jump into the [new Set functions](https://www.sonarsource.com/blog/union-intersection-difference-javascript-sets/#what-are-the-new-set-functions
    "new Set functions") and the [JavaScript engines that support them](https://www.sonarsource.com/blog/union-intersection-difference-javascript-sets/#support
    "JavaScript engines that support them") below.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们看新功能之前，让我们回顾一下 JavaScript Set 现在能做什么，然后我们会介绍下面的 [新的 Set 函数](https://www.sonarsource.com/blog/union-intersection-difference-javascript-sets/#what-are-the-new-set-functions
    "new Set functions") 和 [支持它们的 JavaScript 引擎](https://www.sonarsource.com/blog/union-intersection-difference-javascript-sets/#support
    "JavaScript engines that support them")。
- en: What do ES2015 JavaScript Sets do?[](/blog/union-intersection-difference-javascript-sets/#what-do-es2015-javascript-sets-do
    "What do ES2015 JavaScript Sets do?")
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ES2015 JavaScript Set 做了什么？[](/blog/union-intersection-difference-javascript-sets/#what-do-es2015-javascript-sets-do
    "What do ES2015 JavaScript Sets do?")
- en: Let's take a look at what the ES2015 version of the JavaScript `Set` can do.
    It's easiest to do so with some examples.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 JavaScript `Set` 的 ES2015 版本能做什么。最好通过一些示例来说明。
- en: You can [construct a `Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set
    "construct a Set") without any arguments, which gives you an empty `Set`. Or,
    you can provide an iterable, like an array, to initialise the `Set`.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在不提供任何参数的情况下 [构造一个 `Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set
    "construct a Set")，这将给你一个空的 `Set`。或者，你可以提供一个可迭代对象，如数组，来初始化 `Set`。
- en: '[PRE0]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`Set`s can only contain unique values, so the `Set` above has three members.
    You can check this with the [`size` property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size
    "size property").'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`Set` 只能包含唯一值，因此上面的 `Set` 有三个成员。你可以用 [`size` 属性](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size
    "size property") 来检查这一点。'
- en: '[PRE1]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can add more elements to the `Set` with the [`add` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add
    "add function"). Adding an element that is already in the `Set` doesn't do anything.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 [`add` 函数](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add
    "add function") 向 `Set` 中添加更多元素。添加已经存在于 `Set` 中的元素不会产生任何效果。
- en: '[PRE2]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can remove elements from the `Set` with [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete
    "delete").
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用 [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete
    "delete") 从 `Set` 中删除元素。
- en: '[PRE3]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can check if an element is a member of the `Set` with the [`has` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has
    "has function"). One of the benefits of a `Set` is that this check can be done
    in constant time (**O(1)**), whereas the time to check if an element is in an
    `Array` varies by the length of the `Array` (**O(n)**). Using `Set`s for tasks
    like this is a [clean way to write intentional efficient code](https://www.sonarsource.com/blog/what-is-clean-code/#example-4
    "clean way to write intentional efficient code").
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用[`has`函数](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has
    "has function")来检查一个元素是否是`Set`的成员。`Set`的一个好处是这种检查可以在常数时间内完成（**O(1)**），而检查一个元素是否在`Array`中的时间则因`Array`的长度而异（**O(n)**）。对于这样的任务使用`Set`是[编写意图明确且高效的代码的一种清晰方式](https://www.sonarsource.com/blog/what-is-clean-code/#example-4
    "clean way to write intentional efficient code")。
- en: '[PRE4]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can [loop through a `Set`'s elements using `forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach
    "loop through a Set's elements using forEach") or a `for...of` loop. Elements
    are sorted in the order they were added to the `Set`.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用[`forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach
    "loop through a Set's elements using forEach")函数或`for...of`循环来遍历`Set`的元素。元素按照它们被添加到`Set`中的顺序排序。
- en: '[PRE5]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can also get an iterator from the `Set` using the [`keys`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys
    "keys") and [`values`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values
    "values") functions ([which are actually equivalent](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys#using_keys
    "which are actually equivalent")) as well as the [`entries`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries
    "entries") function.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用[`keys`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys
    "keys")和[`values`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values
    "values")函数（[它们实际上是等效的](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys#using_keys
    "which are actually equivalent")）以及[`entries`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries
    "entries")函数从`Set`中获取迭代器。
- en: Finally, you can empty a Set with the [`clear`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear
    "clear") function.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以使用[`clear`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear
    "clear")函数清空一个`Set`。
- en: '[PRE6]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'That''s a good reminder of what you can do with the ES2015 spec version of
    a `Set`:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关于ES2015规范版本的`Set`可以做什么的很好的提醒：
- en: '`Set`s provide methods to deal with a collection of unique values'
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Set`提供了处理唯一值集合的方法。'
- en: It is efficient to add elements to a `Set` and to test for their presence in
    the `Set`
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向`Set`中添加元素和测试其是否存在于`Set`中是高效的。
- en: Converting an `Array` or other iterable to a `Set` is an easy way to filter
    out duplicates
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`Array`或其他可迭代对象转换为`Set`是过滤重复项的简单方法。
- en: This implementation misses out on operations between `Set`s, though. You might
    want to create a `Set` that contains all the items from two other `Set`s (a union
    of two `Set`s), find out what two `Set`s have in common (intersection), or find
    out what isn't present in one Set that is in another (difference). Until recently,
    you would have had to provide your own functions.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这种实现忽略了`Set`之间的操作。你可能想要创建一个包含来自两个其他`Set`的所有项目的`Set`（两个`Set`的并集），找出两个`Set`共有的项目（交集），或找出一个`Set`中不存在但在另一个`Set`中存在的项目（差集）。直到最近，你可能需要提供自己的函数。
- en: What are the new Set functions?[](/blog/union-intersection-difference-javascript-sets/#what-are-the-new-set-functions
    "What are the new Set functions?")
  id: totrans-split-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新的`Set`函数是什么？[](/blog/union-intersection-difference-javascript-sets/#what-are-the-new-set-functions
    "What are the new Set functions?")
- en: 'The `Set` methods proposal adds the following methods to `Set` instances: `union`,
    `intersection`, `difference`, `symmetricDifference`, `isSubsetOf`, `isSupersetOf`,
    and `isDisjointFrom`.'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`Set`方法提案为`Set`实例添加了以下方法：`union`，`intersection`，`difference`，`symmetricDifference`，`isSubsetOf`，`isSupersetOf`和`isDisjointFrom`。'
- en: Some of these methods are akin to some SQL joins, which we will use to illustrate
    the results alongside the code. Let's see some examples of what each function
    does.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法中有些类似于某些SQL连接，我们将用它们来说明结果与代码并行。让我们看看每个函数做了什么的一些例子。
- en: You can try out any of the code examples below in Chrome 122+ or Safari 17+.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Chrome 122+或Safari 17+中尝试下面的任何代码示例。
- en: Set.prototype.union(other)[](/blog/union-intersection-difference-javascript-sets/#setprototypeunionother
    "Set.prototype.union(other)")
  id: totrans-split-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Set.prototype.union(other)`[](/blog/union-intersection-difference-javascript-sets/#setprototypeunionother
    "Set.prototype.union(other)")'
- en: A union of sets is a set that contains all the elements present in either set.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 集合的并是一个包含两个集合中所有元素的集合。
- en: '[PRE7]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, all the languages from the first two sets are in the third
    set. As with other methods that add elements to the `Set`, duplicates are removed.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，前两个集合的所有语言都在第三个集合中。与其他添加元素到`Set`的方法一样，重复的元素会被移除。
- en: This is the equivalent of a SQL `FULL OUTER JOIN` between two tables.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于两个表之间的 SQL `FULL OUTER JOIN`。
- en: Set.prototype.intersection(other)[](/blog/union-intersection-difference-javascript-sets/#setprototypeintersectionother
    "Set.prototype.intersection(other)")
  id: totrans-split-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Set.prototype.intersection(other)`[](/blog/union-intersection-difference-javascript-sets/#setprototypeintersectionother
    "Set.prototype.intersection(other)")'
- en: An intersection is a set that contains all the elements that are present within
    both sets.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 交集是包含两个集合中都存在的所有元素的集合。
- en: '[PRE8]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '"JavaScript" is the only element present in both the sets here.'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: '"JavaScript" 是这两个集合中唯一同时存在的元素。'
- en: An intersection is like an `INNER JOIN`.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 交集类似于`INNER JOIN`。
- en: Set.prototype.difference(other)[](/blog/union-intersection-difference-javascript-sets/#setprototypedifferenceother
    "Set.prototype.difference(other)")
  id: totrans-split-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Set.prototype.difference(other)`[](/blog/union-intersection-difference-javascript-sets/#setprototypedifferenceother
    "Set.prototype.difference(other)")'
- en: The difference between the set you are working with and another set is all the
    elements present in the first set and not present in the second set.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你正在操作的集合与另一个集合之间的差异是第一个集合中存在但第二个集合中不存在的所有元素。
- en: '[PRE9]'
  id: totrans-split-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In finding the difference between sets, it matters which set you call the function
    on and which is the argument. In the example above, removing the back-end languages
    from the front-end languages results in "JavaScript" being removed and returning
    "HTML" and "CSS" in the resultant set. Whereas removing the front-end languages
    from the back-end languages still results in "JavaScript" being removed, and returns
    "Python" and "Java".
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在找到集合之间的差异时，调用函数的集合和参数的集合很重要。在上面的例子中，从前端语言中移除后端语言会导致"JavaScript"被移除，并在结果集中返回"HTML"和"CSS"。而从后端语言中移除前端语言仍然导致"JavaScript"被移除，并返回"Python"和"Java"。
- en: A difference is like performing a `LEFT JOIN`.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 差异类似于执行`LEFT JOIN`。
- en: Set.prototype.symmetricDifference(other)[](/blog/union-intersection-difference-javascript-sets/#setprototypesymmetricdifferenceother
    "Set.prototype.symmetricDifference(other)")
  id: totrans-split-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Set.prototype.symmetricDifference(other)`[](/blog/union-intersection-difference-javascript-sets/#setprototypesymmetricdifferenceother
    "Set.prototype.symmetricDifference(other)")'
- en: The symmetric difference between two sets is a set that contains all the elements
    that are in one of the two sets, but not both.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 两个集合之间的对称差集是一个包含两个集合中某一个但不同时出现的所有元素的集合。
- en: '[PRE10]'
  id: totrans-split-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this case, the elements in the resultant sets are the same, but note that
    the order is different. Set order is determined by the order the elements are
    added to the set and the set on which the function is performed will have its
    elements added first.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，结果集中的元素是相同的，但请注意顺序不同。集合的顺序由添加到集合中的元素的顺序决定，并且函数执行的集合将首先添加其元素。
- en: A symmetric difference is like a FULL OUTER JOIN excluding any elements that
    are in both tables.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对称差集类似于`FULL OUTER JOIN`，不包括两个表中都存在的任何元素。
- en: Set.prototype.isSubsetOf(other)[](/blog/union-intersection-difference-javascript-sets/#setprototypeissubsetofother
    "Set.prototype.isSubsetOf(other)")
  id: totrans-split-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Set.prototype.isSubsetOf(other)`[](/blog/union-intersection-difference-javascript-sets/#setprototypeissubsetofother
    "Set.prototype.isSubsetOf(other)")'
- en: A set is a subset of another set if all the elements in the first set appear
    in the second set.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第一个集合中的所有元素都出现在第二个集合中，则第一个集合是第二个集合的子集。
- en: '[PRE11]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: A set is also a subset of itself.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一个集合也是其自身的子集。
- en: '[PRE12]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Set.prototype.isSupersetOf(other)[](/blog/union-intersection-difference-javascript-sets/#setprototypeissupersetofother
    "Set.prototype.isSupersetOf(other)")
  id: totrans-split-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Set.prototype.isSupersetOf(other)`[](/blog/union-intersection-difference-javascript-sets/#setprototypeissupersetofother
    "Set.prototype.isSupersetOf(other)")'
- en: A set is a superset of another set if all the elements in the second set appear
    in the first set. It is the opposite relationship of being a subset.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第二个集合中的所有元素都出现在第一个集合中，则第一个集合是第二个集合的超集。这是子集的相反关系。
- en: '[PRE13]'
  id: totrans-split-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A set is also a superset of itself.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一个集合也是其自身的超集。
- en: '[PRE14]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Set.prototype.isDisjointFrom(other)[](/blog/union-intersection-difference-javascript-sets/#setprototypeisdisjointfromother
    "Set.prototype.isDisjointFrom(other)")
  id: totrans-split-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Set.prototype.isDisjointFrom(other)[](/blog/union-intersection-difference-javascript-sets/#setprototypeisdisjointfromother
    "Set.prototype.isDisjointFrom(other)")
- en: Finally, a set is disjoint from another set if they have no elements in common.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果两个集合没有共同元素，则一个集合与另一个集合是不相交的。
- en: '[PRE15]'
  id: totrans-split-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The interpreted languages and compiled languages in these sets do not overlap,
    so the sets are disjoint. The front-end languages and the interpreted languages
    do overlap with the element "JavaScript", so they are not disjoint.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这些集合中的解释语言和编译语言没有重叠，因此这些集合是不相交的。前端语言和解释语言与元素"JavaScript"重叠，因此它们不是不相交的。
- en: Support[](/blog/union-intersection-difference-javascript-sets/#support "Support")
  id: totrans-split-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持[](/blog/union-intersection-difference-javascript-sets/#support "支持")
- en: As of writing this, [the proposal](https://github.com/tc39/proposal-set-methods
    "the proposal") stands at stage 3 in [TC39's process](https://tc39.es/process-document/
    "TC39's process") and Safari 17 (released in September 2023) and Chrome 122 (February
    2024) have shipped implementations of these methods. Edge follows Chrome closely
    and Firefox Nightly has support behind a flag, I would expect both of these browsers
    to ship support soon too.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，[提案](https://github.com/tc39/proposal-set-methods "提案")在[TC39的流程](https://tc39.es/process-document/
    "TC39的流程")中处于第3阶段，并且Safari 17（于2023年9月发布）和Chrome 122（于2024年2月发布）已经实现了这些方法。Edge紧随Chrome，Firefox
    Nightly在标志后也支持，预计这两个浏览器也很快会支持。
- en: '[Bun](https://bun.sh/ "Bun") also uses Safari''s [JavaScriptCore engine](https://docs.webkit.org/Deep%20Dive/JSC/JavaScriptCore.html
    "JavaScriptCore engine") and thus already supports these new functions. Support
    in Chrome means that it has been added to the [V8 JavaScript engine](https://v8.dev/
    "V8 JavaScript engine") and will be adopted by [Node.js](https://nodejs.org/ "Node.js")
    soon.'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[Bun](https://bun.sh/ "Bun")还使用Safari的[JavaScriptCore引擎](https://docs.webkit.org/Deep%20Dive/JSC/JavaScriptCore.html
    "JavaScriptCore引擎")，因此已经支持这些新功能。Chrome的支持意味着它已添加到[V8 JavaScript引擎](https://v8.dev/
    "V8 JavaScript引擎")中，并将很快被[Node.js](https://nodejs.org/ "Node.js")采纳。'
- en: Hopefully, this means the proposal will graduate to stage 4 of the process,
    perhaps even in time to join the ES2024 spec before it is finalised.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这意味着该提案将在流程中毕业到第4阶段，或许在ES2024规范最终确定之前就加入其中。
- en: Polyfills[](/blog/union-intersection-difference-javascript-sets/#polyfills "Polyfills")
  id: totrans-split-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Polyfills[](/blog/union-intersection-difference-javascript-sets/#polyfills "Polyfills")
- en: While you need older JavaScript engine support, there are polyfills you can
    use to upgrade to spec-compliant implementations of these functions. They are
    available in [core-js](https://github.com/zloirock/core-js#new-set-methods "core-js")
    or as individual packages per function in the [es-shims project](https://github.com/es-shims
    "es-shims project") (for example, the [set.prototype.union package](https://www.npmjs.com/package/set.prototype.union
    "set.prototype.union package") can be used for union functionality).
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您需要旧版JavaScript引擎的支持，但您可以使用polyfill来升级到符合规范的这些函数的实现。它们在[core-js](https://github.com/zloirock/core-js#new-set-methods
    "core-js")中可用，或作为[es-shims项目](https://github.com/es-shims "es-shims项目")中每个功能的单独包（例如，可以使用[set.prototype.union包](https://www.npmjs.com/package/set.prototype.union
    "set.prototype.union包")进行联合功能）。
- en: If you've written your own implementation of any of these functions, I would
    recommend first upgrading to the polyfills, before phasing them out as the support
    becomes more widespread.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已编写了这些函数的自己的实现，我建议您首先升级到polyfill，然后随着支持变得更加广泛逐步淘汰它们。
- en: Sets no longer feel incomplete[](/blog/union-intersection-difference-javascript-sets/#sets-no-longer-feel-incomplete
    "Sets no longer feel incomplete")
  id: totrans-split-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[集合不再感觉不完整](/blog/union-intersection-difference-javascript-sets/#sets-no-longer-feel-incomplete
    "集合不再感觉不完整")'
- en: The JavaScript `Set` has long been incomplete but these 7 new functions round
    out the implementation nicely. Building functionality like this into the language
    means we have to rely less on dependencies or our own implementations and can
    [focus](https://www.sonarsource.com/blog/what-is-clean-code/#intentional "focus")
    on the problems we are trying to solve.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的`Set`长期以来并不完整，但这7个新功能使其实现更加完善。将这样的功能内置到语言中意味着我们可以更少依赖依赖项或我们自己的实现，并且可以[专注](https://www.sonarsource.com/blog/what-is-clean-code/#intentional
    "专注")于我们正在解决的问题。
- en: This is just one of a [full pipeline of stage 3 proposals](https://github.com/tc39/proposals?tab=readme-ov-file
    "full pipeline of stage 3 proposals") before TC39 right now. Check out the list
    to see what else might be coming to JavaScript next. I've got my eye on [Temporal](https://github.com/tc39/proposal-temporal
    "Temporal") and [Decorators](https://github.com/tc39/proposal-decorators "Decorators"),
    both of which could change the way we write major parts of our JavaScript.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在TC39之前有一个[完整的第三阶段提案流程](https://github.com/tc39/proposals?tab=readme-ov-file
    "完整的第三阶段提案流程")。查看列表以了解接下来可能加入JavaScript的其他内容。我特别关注[Temporal](https://github.com/tc39/proposal-temporal
    "Temporal")和[Decorators](https://github.com/tc39/proposal-decorators "Decorators")，这两者都有可能改变我们编写JavaScript的主要部分的方式。
