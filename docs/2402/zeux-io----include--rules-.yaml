- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:35:41'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 'zeux.io - #include'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://zeux.io/2010/11/15/include-rules/](https://zeux.io/2010/11/15/include-rules/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#include <rules>'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 15 Nov 2010
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: We’re stuck with C++, at least for another console generation. C++ has many
    quirks that I wish were not there, but there is no real alternative as of today.
    While modern languages tend to adopt the bulk compilation and/or smart linkers
    and so can have a proper module system and eat the cake too, C++ is stuck with
    header files (on the other hand, C++ builds are incremental and almost embarrassingly
    parallel). While the strategy of dealing with header files and staying sane seems
    more or less obvious, I’m amazed as to how many people still get this wrong. I
    hope that this post helps to clear the mud somewhat. The post applies to C as
    well, but is useless for people who are blessed to work with other languages.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: The problem with include files is that the preprocessor is usually quite dumb
    - you tell it to include the file, it includes the entire contents of the file,
    recursively. If you don’t tell it to include the file but try to use the symbol
    from that file - you get a compilation error. If you tell it to include too many
    files, it includes all of them, and the compilation time suffers.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, the more a header is included in other files (including transitive
    inclusion, i.e. A includes B includes C means that A indirectly includes C), the
    more files you’ll need to recompile once the header changes. Iteration time is
    very important - which is a topic for another time - so we’d like to minimize
    the amount of header inclusion. This brings us to the first important rule: **Each
    file should include the minimum amount of files**. The rule helps ensure that
    your code builds fast.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s suppose that the header file contains a class declaration. By the
    nature of C++, a class declaration won’t compile without some other declarations
    - for example if a class A inherits from a class B and contains a field of type
    C, then you have to give the compiler declarations of both B and C in the same
    translation unit (i.e. in the cpp file that you’re compiling - after preprocessor
    has done its work) - before A’s declaration. Now, there are two options here -
    you can either include the relevant header files in the header with A’s declaration,
    or force the user to always include B and C headers manually before A. The problem
    is that sometimes the user does not know about these dependencies (i.e. the field
    of type B can be private), sometimes the dependencies change, so every time you’re
    adding some declaration dependencies to your types you’re breaking user’s code,
    and, since declaration dependencies are transitive, often to include a single
    header you’ll need a dozen or more seemingly unrelated ones. For this reasons,
    it’s important for all headers to be self-contained - anybody should be able to
    include any header in any cpp file without compilation errors. Which brings us
    to the second important rule - **each file should include all dependent headers**,
    i.e. for each declaration that’s required by the compiler there should be a corresponding
    include. This rule helps ensure that the programmers stay sane.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: 'These two rules together define the algorithm for proper header file authoring:
    for each required declaration, include a corresponding header in your header file;
    don’t include more headers than that. In order to guarantee that you did not forget
    the necessary headers, **make sure that your header file is the first #include
    in the corresponding source file**, except the common header, if your codebase
    has one.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: Do not include a header for a dependency declaration where a forward declaration
    will suffice; **use forward declarations when possible** (if you’re not familiar
    with forward declarations, google it). Sometimes it pays off to go to extra lengths
    to remove header dependencies, using techniques like pimpl - this depends on the
    exact situation, but **avoid including heavy platform files, like windows.h or
    d3d9.h, to popular headers** (I’ve written about a way to make a slim version
    of d3d9.h in a [blog post](/2009/03/22/miscellanea/), scroll down to the last
    section).
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: 'With the rules above, there is only one thing left - since we can include a
    header twice accidentally (i.e. A depends on B and C, and B depends on C, so C
    is included twice into A), we’ll need some protection against that. So each file
    should include the guards against multiple inclusion. There are two methods for
    this - either use #pragma once or use header guards. #pragma once is a non-standard
    technique, that tells the preprocessor explicitly “don’t include this file more
    than once in a single translation unit”. Header guards can emulate the behavior
    using preprocessor defines:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述规则后，只剩下一件事情 - 因为我们可能会意外包含两次头文件（即 A 依赖于 B 和 C，而 B 又依赖于 C，因此 C 被重复包含到 A 中），我们需要一些保护措施来防止这种情况发生。因此，每个文件都应包含防止多次包含的守卫。有两种方法可以做到这一点
    - 要么使用 `#pragma once`，要么使用头文件守卫。`#pragma once` 是一种非标准技术，明确告诉预处理器：“不要在单个翻译单元中多次包含此文件”。头文件守卫可以使用预处理器定义来模拟此行为：
- en: '[PRE0]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Many people don’t know this, but #pragma once is widely supported in modern
    compilers. It’s superior to header guards in two ways: it can be faster than header
    guards (i.e. MSVC does not read the file with #pragma once more than once, but
    does read the file with header guards several times), and it’s foolproof - you
    don’t have to invent the identifier for a header so you can’t screw it. So **use
    #pragma once if you can, use header guards if you must**. If some compilers that
    you use don’t support #pragma once and you can’t convince the vendors to add the
    feature, **make sure that the header guards are unique using a deterministic generation
    algorithm**. For example, you can use something like “take the list consisting
    of the name of the project, and all components of the relative file path; convert
    all elements to upper case and join with underscore”, resulting with identifiers
    like THEGAME_RENDER_LIGHTING_POINTLIGHT_H. Do **not** use short file names alone,
    they are **not** unique! (unless your coding standard requires that). Oh, and
    if you don’t use an autogenerating macro, don’t put a comment after the #endif
    (i.e. #endif // THEGAME_RENDER_LIGHTING_POINTLIGHT_H) - such comments are only
    useful as a copy-paste history.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人不知道，但是`#pragma once` 在现代编译器中得到了广泛支持。它比头文件守卫有两个优势：它可能比头文件守卫更快（例如，MSVC 不会多次读取带有
    `#pragma once` 的文件，但会多次读取带有头文件守卫的文件），并且它是绝对可靠的 - 你不必为头文件发明标识符，因此不会出错。所以**如果可以，请使用
    `#pragma once`，如果必须使用头文件守卫**。如果您使用的某些编译器不支持 `#pragma once`，并且无法说服供应商添加此功能，请**确保使用确定性生成算法使头文件守卫唯一**。例如，您可以使用“采用项目名称列表和相对文件路径的所有组件；将所有元素转换为大写并用下划线连接”的方法生成标识符，例如
    `THEGAME_RENDER_LIGHTING_POINTLIGHT_H`。不要仅使用短文件名，它们**不**是唯一的！（除非您的编码标准要求如此）。噢，如果不使用自动生成的宏，请不要在
    `#endif` 后面放置注释（例如 `#endif // THEGAME_RENDER_LIGHTING_POINTLIGHT_H`） - 这样的注释只有作为复制粘贴历史时才有用。
- en: 'While using header guards allows you to have the same file included several
    times in a single translation unit, it also allows you to test whether the file
    was already included, i.e. #ifdef THEGAME_RENDER_LIGHTING_POINTLIGHT_H. **You
    should never conditionally exclude a section of a header file based on whether
    some file was included!** Doing this introduces the inclusion order dependency
    which is unnatural, and hard to debug without a preprocessor output. If you’re
    thinking about something like “oh, if the renderer interface was included, I should
    probably provide a light renderer class, but otherwise it would just add unnecessary
    clutter”, you should split your header file in two parts, and the second part
    should explicitly include the renderer interface, since it depends on it.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用头文件守卫可以让你在单个翻译单元中多次包含同一文件，还可以测试文件是否已经包含，例如 `#ifdef THEGAME_RENDER_LIGHTING_POINTLIGHT_H`。**永远不要基于某个文件是否已包含而有条件地排除头文件的某一部分！**
    这样做会引入不自然的包含顺序依赖关系，并且在没有预处理器输出的情况下很难调试。如果你在考虑像“噢，如果包含了渲染器接口，我可能应该提供一个光照渲染器类，但如果没有，那只会增加不必要的混乱”，那么你应该将头文件分成两部分，第二部分应明确包含渲染器接口，因为它依赖于它。
- en: At least in game development, the language is frequently extended with some
    generally useful primitives that are used throughout the whole codebase. The most
    used one is probably an assertion macro (since the standard one sucks, you should
    have your own), but there are other examples - logging facilities, fixed-size
    types, min/max functions, various platform/configuration defines (“are we on a
    big-endian platform?”), memory management-related macros. It’s common practice
    to put all of those in a single common header file; you should control the size
    of this file (where by ‘size’ I mean the cumulative size of all headers it includes,
    of course), and you should **make sure that each source file includes the common
    header before everything else** - otherwise you’ll get into trouble (sometimes
    you’ll spend several hours looking for the reasons - i.e. if you include a header
    that checks platforms endianness before the common file, you’re in the world of
    hurt).
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 至少在游戏开发中，语言经常通过一些在整个代码库中使用的一般有用的基元扩展。最常用的可能是一个断言宏（因为标准的不好用，你应该有自己的），但还有其他例子
    - 日志工具，固定大小类型，最小/最大函数，各种平台/配置定义（“我们在大端平台上吗？”），内存管理相关的宏。把所有这些放在一个单独的公共头文件中是常见做法；你应该控制这个文件的大小（我说的大小是它包含的所有头文件的累积大小，当然），并**确保每个源文件在任何其他东西之前都包含了公共头文件**
    - 否则你会陷入麻烦（有时你会花几个小时查找原因 - 比如如果你在包含检查平台字节顺序的头文件之前，你会陷入困境）。
- en: 'Well, I think that’s all about header files; there are also the include paths
    though. In order to include the file, you have to specify the path to it - either
    a “relative to the current file” path, or “relative to one of the include directories”
    path. There are two important goals here:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我觉得这就是关于头文件的全部内容；当然还有包含路径。为了包含这个文件，你必须指定路径 - 要么是“相对于当前文件”的路径，要么是“相对于其中一个包含目录”的路径。这里有两个重要的目标：
- en: '**If you’re writing a library** - a relatively small one, i.e. not a platform
    like Unreal Engine - the header files should require minimal configuration, so
    ideally the user does not have to add include directories to compile or use your
    library. For such projects, **consider making all include paths current file-relative**.'
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果你在写一个库** - 一个相对较小的库，比如不像虚幻引擎这样的平台 - 头文件应该需要最小的配置，所以理想情况下用户不需要添加包含目录来编译或使用你的库。对于这样的项目，**考虑使所有的包含路径都是相对于当前文件的**。'
- en: Otherwise, include paths should be easily greppable - the path to the same file
    should ideally be the same in all other files. So **make all include paths include
    directory-relative**; moreover, try to make sure that **include paths are unambiguous**
    - i.e. that you don’t have two different representations for the same file path,
    like and inside render project.
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，包含路径应该容易被 grep 到 - 相同文件的路径在所有其他文件中理想情况下应该是一致的。所以**确保所有的包含路径都是相对于目录的**；此外，尽量确保**包含路径是明确的**
    - 即你不会有同一个文件路径的两种不同表示，比如在渲染项目内外。
- en: Whatever rule you use, try to **make sure it’s consistent between different
    projects**, as much as necessary. Ideally even the include directories should
    be the same, i.e. include directories for the engine project should be a strict
    subset of include directories for the game project.
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论你使用哪种规则，都要尽可能地**确保在不同项目之间保持一致**。理想情况下，甚至包含目录也应该相同，即引擎项目的包含目录应该是游戏项目包含目录的严格子集。
- en: And as a final advice - learn to use the preprocessor output (cl /E, gcc -E),
    learn to use the include output (cl /showIncludes, gcc -M), gather the codebase
    statistics (average size after preprocessing, most included header files, header
    files with largest payload, etc.) and optimize your codebase by eliminating dependencies
    and spreading the word. Nothing beats a sub-second iteration time.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的建议是 - 学会使用预处理器的输出（cl /E, gcc -E），学会使用包含输出（cl /showIncludes, gcc -M），收集代码库统计信息（预处理后的平均大小，最常包含的头文件，具有最大负载的头文件等），并通过消除依赖项和传播信息来优化你的代码库。没有什么比次秒级的迭代时间更好的了。
- en: Oh, did I mention that good header dependencies decrease the linking time?
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，我提到了好的头文件依赖可以减少链接时间吗？
