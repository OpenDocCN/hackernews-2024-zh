- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:57:46'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Hyrum's Law
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.hyrumslaw.com](https://www.hyrumslaw.com)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hyrum's Law
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*An observation on Software Engineering*'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: 'Put succinctly, the observation is this:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: With a sufficient number of users of an API,
  id: totrans-split-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'it does not matter what you promise in the contract:'
  id: totrans-split-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: all observable behaviors of your system
  id: totrans-split-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: will be depended on by somebody.
  id: totrans-split-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Over the past couple years of doing low-level infrastructure migrations in one
    of the most complex software systems on the planet, I’ve made some observations
    about the differences between an interface and its implementations. We typically
    think of the interface as an abstraction for interacting with a system (like the
    steering wheel and pedals in a car), and the implementation as the way the system
    does its work (wheels and an engine). This is useful for a number of reasons,
    foremost among them that most useful systems rapidly become too complex for a
    single individual or group to completely understand, and abstractions are essential
    to managing that complexity.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: Defining the correct level of abstraction is a completely separate discussion
    (see Mythical Man-Month), but we like to think that once an abstraction is defined,
    it is concrete. In other words, an interface should theoretically provide a clear
    separation between consumers of a system and its implementers. In practice, this
    theory breaks down as the use of a system grows and its users start to rely upon
    implementation details intentionally exposed through the interface, or which they
    divine through regular use. Spolsky’s “Law of Leaky Abstractions” embodies consumers’
    reliance upon internal implementation details.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Taken to its logical extreme, this leads to the following observation, colloquially
    referred to as “The Law of Implicit Interfaces”: Given enough use, there is no
    such thing as a private implementation. That is, if an interface has enough consumers,
    they will collectively depend on every aspect of the implementation, intentionally
    or not. This effect serves to constrain changes to the implementation, which must
    now conform to both the explicitly documented interface, as well as the implicit
    interface captured by usage. We often refer to this phenomenon as "bug-for-bug
    compatibility."'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: The creation of the implicit interface usually happens gradually, and interface
    consumers generally aren’t aware as it’s happening. For example, an interface
    may make no guarantees about performance, yet consumers often come to expect a
    certain level of performance from its implementation. Those expectations become
    part of the implicit interface to a system, and changes to the system must maintain
    these performance characteristics to continue functioning for its consumers.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Not all consumers depend upon the same implicit interface, but given enough
    consumers, the implicit interface will eventually exactly match the implementation.
    At this point, the interface has evaporated: the implementation has become the
    interface, and any changes to it will violate consumer expectations. With a bit
    of luck, widespread, comprehensive, and automated testing can detect these new
    expectations but not ameliorate them.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的消费者都依赖相同的隐式接口，但是随着消费者的增多，隐式接口最终会精确地匹配实现。在这一点上，接口已经消失：实现已成为接口，对其任何更改都将违反消费者的期望。有些运气的话，广泛的、全面的、自动化的测试可以检测到这些新的期望，但不能减轻它们。
- en: Implicit interfaces result from the organic growth of large systems, and while
    we may wish the problem did not exist, designers and engineers would be wise to
    consider it when building and maintaining complex systems. So be aware of how
    the implicit interface constrains your system design and evolution, and know that
    for any reasonably popular system, the interface reaches much deeper than you
    think.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 隐式接口是大型系统有机发展的结果，虽然我们希望这个问题不存在，但设计师和工程师在构建和维护复杂系统时应该考虑到它。因此，请注意隐式接口如何限制您的系统设计和演进，并了解对于任何相当流行的系统来说，接口影响的深度远远超出您的想象。
- en: Who's Hyrum?
  id: totrans-split-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 海伦姆是谁？
- en: I'm a Software Engineer at Google, working on large-scale code change tooling
    and infrastructure. Prior to that, I spent five years improving Google's core
    C++ libraries. The above observation grew out of experiences when even the simplest
    library change caused failures in some far off system.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我是谷歌的软件工程师，负责大规模代码变更工具和基础设施。在此之前，我花了五年时间改进谷歌的核心C++库。上述观察源于当时即使是最简单的库变更也会导致某些远程系统的失败经验。
- en: While I may have made the observation, credit goes to Titus Winters for actually
    naming it as "Hyrum's Law" and popularizing the concept more broadly.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可能是我做出了这一观察，但功劳应归于Titus Winters，他将其正式命名为“海伦姆定律”并广泛普及了这一概念。
- en: History
  id: totrans-split-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 历史
- en: 'Obligatory XKCD: [https://xkcd.com/1172/](https://xkcd.com/1172/)'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 必看的XKCD漫画：[https://xkcd.com/1172/](https://xkcd.com/1172/)
