["```\n---- MODULE lamport_clock ----\n\nCONSTANT Processes, ProcessCanFail, MaxTimestamp\nASSUME IsFiniteSet(Processes)\nASSUME Cardinality(Processes) > 1\nASSUME \\A p \\in Processes : p \\in Nat\nASSUME MaxTimestamp \\in Nat\nASSUME ProcessCanFail \\in BOOLEAN \n```", "```\n(* --fair algorithm mutual_exclusion {\n\n    variables resource_owner = {},\n              mailbox = [p \\in Processes |-> EmptyMailbox]; \n\n    define {\n        CanSendMessage(myself) == \\A p \\in Processes : mailbox[p] = EmptyMailbox\n\t\t\t\tSortFunction(seq1, seq2) ==\n            IF seq1.ts > seq2.ts\n            THEN FALSE\n            ELSE IF seq1.ts < seq2.ts\n            THEN TRUE\n            ELSE IF seq1.proc > seq2.proc\n            THEN FALSE\n            ELSE IF seq1.proc < seq2.proc\n            THEN TRUE\n            ELSE FALSE\n        \\* SAFETY: Only one process is allowed in the critical section\n        Inv == Cardinality(resource_owner) <= 1 \n```", "```\nfair process (p \\in Processes)\n    variables local_timestamp = 0,\n              ack_request_resource = {},\n              requests_queue = {}; \n```", "```\nwhile (TRUE) {\n        either { \n            (*********************\n                1\\. To request the resource, process Pi sends the message <<RequestsResource, Pi, Tm>> \n                    to every other process, and puts that message on its own request queue, where Tm is the timestamp of the message.\n            **********************)\n            await /\\ CanSendMessage(self) \n                  /\\ Cardinality(ack_request_resource) = 0;\n            BumpTimestamp();\n            requests_queue := requests_queue \\union {[ msg |-> RequestResource, proc |-> self, ts |-> local_timestamp]};\n            mailbox := [p \\in Processes |-> IF p = self THEN EmptyMailbox ELSE [ msg |-> RequestResource, proc |-> self, ts |-> local_timestamp]];\n            ack_request_resource := {[ msg |-> AckRequestResource, proc |-> self, ts |-> local_timestamp]}; \n```", "```\n(*********************\n2\\. When process Pj receives the message <<RequestsResource, Pi, Tm>> requests resource, \n    (i) it places it on its request queue and \n    (ii) sends a (timestamped) acknowledgment message to Pi.\n**********************)\nawait mailbox[self].msg = RequestResource;\nrequests_queue := requests_queue \\union {mailbox[self]};\nBumpTimestampO(mailbox[self].ts);\n\n\\* Respond with an Ack\nawait mailbox[mailbox[self].proc] = EmptyMailbox; \nmailbox[mailbox[self].proc] := IF ProcessCanFail /\\ \\A proc \\in Processes \\ {self}: proc > self \\* if process can fail and this is the smallest pid\n                                THEN EmptyMailbox\n                                ELSE [ msg |-> AckRequestResource, proc |-> self, ts |-> local_timestamp];\nEMPTY_MAILBOX:\nmailbox[self] := EmptyMailbox;\nBumpTimestamp(); \n```", "```\n(*********************\n    5\\. When process Pj receives a Pi ReleasesResource message, it removes any <<RequestsResource, Pi, Tm>> \n       requests resource message from its request queue.\n**********************)\nawait self \\in resource_owner  /\\ CanSendMessage(self);\nrequests_queue := SeqToSet(Tail(SetToSortSeq(requests_queue, SortFunction))); \nBumpTimestamp();\nmailbox := [p \\in Processes |-> IF p = self THEN EmptyMailbox ELSE <<ReleaseResource, self, local_timestamp>>];\nresource_owner :=  resource_owner \\ {self};\nack_request_resource := {}; \n```", "```\n(*********************\n6\\. Process Pi is granted the resource when the following two conditions are satisfied: \n    (i) There is a <<RequestsResource, Pi, Tm>> in its request queue which is ordered before any other \n        request in its queue by the relation ⇒. (To define the relation \" ⇒ \" for messages, we identify a message\n        with the event of sending it.).\n    (ii) Pi has received a message from every other process timestamped later than Tm.\n**********************)\nawait /\\ Cardinality(requests_queue) > 0 \n      /\\ Head(SetToSortSeq(requests_queue, SortFunction)).proc = self\n      /\\ Cardinality(ack_request_resource) = Cardinality(Processes)\n      /\\ self \\notin resource_owner;\n\nresource_owner := resource_owner \\union {self}; \n```", "```\nMaxtimestampConstraint == \\A proc \\in Processes: local_timestamp[proc] < MaxTimestamp \n```", "```\nCONSTRAINTS \n    MaxtimestampConstraint \n```", "```\n\\* LIVENESS: either we eventually get ownership, or we're at the edge of the timestamp boundary.\nResourceAcquisition == \\A proc \\in Processes : Cardinality(ack_request_resource[proc]) > 0 ~> \\/ proc \\in resource_owner \n                                                                                              \\/ local_timestamp[proc] = MaxTimestamp \n```"]