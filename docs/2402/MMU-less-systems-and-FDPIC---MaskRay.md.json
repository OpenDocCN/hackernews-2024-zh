["```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n```", "```\n__attribute__((visibility(\"hidden\"))) void hidden_fun();\nvoid fun();\n__attribute__((visibility(\"hidden\"))) extern int hidden_var;\nextern int var;\n__attribute__((visibility(\"hidden\"))) const int ro_hidden_var = 42;\n void *addr_hidden_fun() { return hidden_fun; }\nvoid *addr_fun() { return fun; }\nvoid *addr_hidden_var() { return &hidden_var; }\nvoid *addr_var() { return &var; }\nconst int *addr_ro_hidden_var() { return &ro_hidden_var; }\nint read_hidden_var() { return hidden_var; }\nint read_var() { return var; } \n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n```", "```\n// arm-linux-gnueabihf-gcc -c -fpic -mfdpic -Wa,--fdpic\naddr_hidden_fun: // non-preemptible function\n ldr     r0, .L3            // r0 = &.got[n] - FDPIC\n add     r0, r0, r9         // r0 = &.got[n]; the address of the canonical function descriptor\n ...\n.L3:\n// Linker resolves this to &.got[n] - FDPIC. .got[n], relocated by R_ARM_FUNCDESC_VALUE, is the canonical function descriptor.\n .word   hidden_fun(GOTOFFFUNCDESC) // R_ARM_GOTOFFFUNCDESC(hidden_fun)\n addr_fun: // preemptible function\n ldr     r3, .L6            // r3 = &.got[n] - FDPIC\n ldr     r0, [r9, r3]       // r0 = &.got[n]; the address of the canonical function descriptor\n ...\n.L6:\n// Linker resolves this to &.got[n] - FDPIC. .got[n], relocated by R_ARM_FUNCDESC, will contain the address of the canonical function descriptor.\n .word   fun(GOTFUNCDESC)   // R_ARM_GOTFUNCDESC(fun) \n```", "```\n1\n2\n3\n4\n\n```", "```\n% arm-linux-gnueabihf-gcc -fpic -mfdpic -O2 -Wa,--fdpic q.c -shared\n/tmp/ccxpnij8.o: in function `addr_hidden_fun':\nq.c:(.text+0x10): dangerous relocation: no dynamic index information available\ncollect2: error: ld returned 1 exit status\n\n```", "```\n1\n2\n3\n\n```", "```\nstruct A { virtual void foo(); };\nvoid call(A *a) { a->foo(); }\nauto *var_call = call;\n\n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n```", "```\n// arm-linux-gnueabihf-g++ -c -fpic -mfdpic -Wa,--fdpic\n ldr     r3, [r0]           // load vtable\n...\n ldr     r3, [r3]           // load vtable entry `.word _ZN1A3fooEv(FUNCDESC)`\n ldr     r9, [r3, #4]       // load FDPIC register value\n ldr     r3, [r3]           // load foo's entry point\n blx     r3\n .section        .data.rel,\"aw\"\nvar_call:\n// Function descriptor address, relocated by R_ARM_FUNCDESC dynamic relocation\n .word   _Z4callP1A(FUNCDESC) // R_ARM_FUNCDESC\n .section        .data.rel.ro,\"aw\"\n_ZTV1A:\n .word   0\n .word   _ZTI1A\n// Function descriptor address, relocated by R_ARM_FUNCDESC dynamic relocation\n .word   _ZN1A3fooEv(FUNCDESC) // R_ARM_FUNCDESC \n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n```", "```\naddr_hidden_var: // non-preemptible data with potential data segment placement\n ldr     r3, .L9             // r3 = &.got[n] - FDPIC\n ldr     r0, [r9, r3]\n ...\n.L9:\n// Linker resolves this to &.got[n] - FDPIC. .got[n], relocated by R_ARM_RELATIVE, will contain the address of hidden_var.\n .word   hidden_var(GOT)    // R_ARM_GOT_BREL\n addr_var: // preemptible data\n ldr     r3, .L12\n ldr     r0, [r9, r3]\n ...\n.L12:\n// Linker resolves this to &.got[n] - FDPIC. .got[n], relocated by R_ARM_GLOB_DAT, will contain the address of var.\n .word   var(GOT)           // R_ARM_GOT_BREL \n```", "```\n1\n2\n3\n\n```", "```\nconst int ro_array[] = {1, 2, 3, 4}; \n int read_ro_array_elem(int i) { return ro_array[i]; } \n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n```", "```\n// sh4-linux-gnu-gcc -S -fpic -mfdpic -O2 q.c\naddr_hidden_var: // non-preemptible data\n mov.l   .L12,r0\n rts\n add     r12,r0\n.L13:\n .align 2\n.L12:\n .long   hidden_var@GOTOFF\n addr_ro_hidden_var: // non-preemptible data\n mov.l   .L18,r0\n rts\n mov.l   @(r0,r12),r0\n.L19:\n .align 2\n.L18:\n .long   ro_hidden_var@GOT \n```", "```\n1\n2\n3\n4\n5\n6\n\n```", "```\nfoo@plt:\nldr r12, .L1\nadd r12, r12, r9\nldr r9, [r12, #4]\nldr pc, [r12]\n.L1: .word foo(GOTOFFFUNCDESC)\n\n```", "```\n1\n2\n3\n4\n\n```", "```\nvoid f0(void);\nvoid f1(void);\nvoid f2(void);\nvoid g() { f0(); f1(); f2(); }\n\n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n```", "```\ng:\n push    {r4, lr}\n mov     r4, r9\n bl      f(PLT)\n mov     r9, r4\n bl      f(PLT)\n mov     r9, r4\n pop     {r4, lr}\n b       f(PLT)\n\n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n```", "```\ng:\n push    {r4, lr}\n mov     r4, r9\n // call f0\n ldr     r12, .L0\n add     r12, r12, r4\n ldr     r9, [r12, #4]\n ldr     pc, [r12]\n // call f1\n ldr     r12, .L1\n add     r12, r12, r4\n ldr     r9, [r12, #4]\n ldr     pc, [r12]\n // tail call f2\n ldr     r12, .L2\n add     r12, r12, r4\n ldr     r9, [r12, #4]\n pop     {r4, lr}\n ldr     pc, [r12]\n .L0: .word f0(GOTOFFFUNCDESC)\n.L1: .word f1(GOTOFFFUNCDESC)\n.L2: .word f2(GOTOFFFUNCDESC) \n```", "```\n1\n2\n3\n4\n5\n\n```", "```\nstatic void *laddr(const struct dso *p, size_t v) {\n size_t j=0;\n for (; v-p->loadmap->segs[j].p_vaddr >= p->loadmap->segs[j].p_memsz; j++);\n return (void *)(v - p->loadmap->segs[j].p_vaddr + p->loadmap->segs[j].addr);\n}\n\n```", "```\n1\n2\n3\n4\n5\n6\n7\n\n```", "```\n.globl fun; fun: bx lr\n.section .rodata,\"a\"\n.globl var; var: .long 0\n .section .data.rel.ro,\"aw\"\n.long fun(FUNCDESC)          // R_ARM_FUNCDESC_VALUE or two .rofixup entries\n.long var                    // R_ARM_RELATIVE or one .rofixup entry \n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n\n```", "```\n% ~/Dev/binutils-gdb/out/arm-fdpic/ld/ld-new -V\nGNU ld (GNU Binutils) 2.42.50.20240222\n Supported emulations:\n armelf_linux_eabi\n armelfb_linux_eabi\n armelf_linux_fdpiceabi\n armelfb_linux_fdpiceabi\n% ~/Dev/binutils-gdb/out/arm-fdpic/ld/ld-new -m armelf_linux_fdpiceabi -shared a.o -o a.so\n\n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n```", "```\n% cat a.c\n__attribute__((visibility(\"hidden\"))) void fun_hidden();\nvoid *fun_hidden_addr() { return fun_hidden; }\n% ./bin/ld-new -m armelf_linux_fdpiceabi a.o\n[1]    3819239 segmentation fault  ./bin/ld-new a.o\n% ./bin/ld-new -m armelf_linux_fdpiceabi -shared a.o\n./bin/ld-new: BFD (GNU Binutils) 2.42.50.20240224 internal error, aborting at ../../../bfd/elf32-arm.c:16466 in allocate_dynrelocs_for_symbol\n ./bin/ld-new: Please report this bug. \n```", "```\n1\n2\n3\n4\n\n```", "```\n.L0:\nlui rX, %gotgprel_hi20(sym)  # R_RISCV_?(sym); R_RISCV_RELAX\nc.add rX, gp                 # R_RISCV_?(.L0)\nld rY, %gotgprel_lo12(sym)   # R_RISCV_?(.L0); rY = address\n\n```", "```\n1\n2\n3\n4\n\n```", "```\n# Indirect GP-relative to direct GP-relative\nlui rX, <gprel_hi20>\nc.add rX, gp\naddi rY, rX, <gprel_lo12>\n\n```", "```\n1\n2\n3\n4\n\n```", "```\n# Indirect GP-relative to PC-relative\nauipc rX, %pcrel_hi20(sym)\nc.nop                               # deletable\naddi rY, rX, %pcrel_lo12(sym)\n\n```", "```\n1\n2\n3\n4\n\n```", "```\n# Indirect GP-relative to absolute\nlui rX, %hi20(sym)\nc.nop                               # deletable\naddi rY, rX, %lo12(sym)\n\n```", "```\n1\n2\n3\n4\n5\n6\n\n```", "```\nlabel:\nlui rX, %tlsdesc_gprel_hi(sym)      # R_RISCV_TLSDESC_GPREL_HI(sym); R_RISCV_RELAX\nc.add a0, gp                        # R_RISCV_PIC_ADD(label)\nld rY, rX, %tlsdesc_load_lo(label)  # R_RISCV_TLSDESC_LOAD_LO12(label)\naddi a0, rX, %tlsdesc_add_lo(label) # R_RISCV_TLSDESC_ADD_LO12(label)\njalr t0, rY, %tlsdesc_call(label)   # R_RISCV_TLSDESC_CALL(label)\n\n```", "```\n1\n2\n3\n4\n5\n6\n7\n8\n\n```", "```\n# TLSDESC to initial-exec optimization\nlui a0, <gottpoff_gprel_hi20>\nc.add a0, gp\nld a0, <gottpoff_gprel_lo12>(a0)\n # TLSDESC to local-exec optimization\nlui a0, <tpoff_hi20>\naddi a0, a0, <tpoff_lo12> \n```", "```\n1\n2\n3\n\n```", "```\nlui rX, 0                    # R_RISCV_TLS_GOTGPREL_HI20(sym)\nc.add rX, gp                 # R_RISCV_PIC_ADD(label)\nld rX, 0(rX)                 # R_RISCV_PIC_LO12_I(label)\n\n```", "```\n1\n2\n3\n4\n5\n\n```", "```\nlui rX, 0\nc.add rX, gp\nld gp, 8(rX)\nld rX, 0(rX)\nc.jr rX\n\n```"]