- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 13:20:52'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'C++ Package Managers: The Ultimate Roundup | Modern C++ DevOps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://moderncppdevops.com/pkg-mngr-roundup/](https://moderncppdevops.com/pkg-mngr-roundup/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: C++'s journey with dependency management has seen numerous transformations.
    Early years were marked by manual library integration and complex build scripts,
    presenting significant challenges. However, the landscape has since evolved, offering
    an array of sophisticated package managers designed to streamline workflows but
    most of all reduce the burden on developers.
  prefs: []
  type: TYPE_NORMAL
- en: Join in and delve into the strengths and weaknesses of these diverse solutions,
    empowering you to make informed choices and conquer the challenge of dependency
    management in your C++ endeavors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Comprehensive List of C++ Package Managers: Strengths and Weaknesses[​](#comprehensive-list-of-c-package-managers-strengths-and-weaknesses
    "Direct link to Comprehensive List of C++ Package Managers: Strengths and Weaknesses")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To help you navigate this diverse landscape, let's explore a *consolidated overview*
    of popular tools used as C++ package managers, highlighting their strengths and
    weaknesses along the way. This list is in **relevance** order, based on factors
    like how well it works as a package manager and how prominent is it in the ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: This list provides a snapshot of the evolving C++ package management landscape,
    but the journey doesn't end here! More feedback is needed. Have you tried any
    of these solutions? Are there hidden gems missing? Feel like the order is wrong?
    Share your experiences and recommendations in the comments on social media.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. vcpkg[​](#1-vcpkg "Direct link to 1\. vcpkg")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Vcpkg is a cross-platform package manager for C and C++ libraries, simplifying
    dependency acquisition and management on Windows, Linux, and macOS. Developed
    by Microsoft, it offers a comprehensive catalog of libraries which can be built
    locally, seamless integration with popular development environments, and straightforward
    command-line usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tutorial Video: [link](https://youtu.be/Ae9EePOIouU?si=fbiY7aOiAag0MCRk)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Large and growing repository of libraries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to use
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrates well with [Visual Studio](https://devblogs.microsoft.com/cppblog/vcpkg-is-now-included-with-visual-studio/)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Good support for Windows development
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Primarily focused on open-source libraries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Limited support for custom build configurations
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires rebuild all dependencies are every machine
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 2\. Conan[​](#2-conan "Direct link to 2\. Conan")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Conan is a powerful and flexible C and C++ package manager designed to simplify
    dependency management across different platforms and build systems. With Conan,
    developers can easily declare, install, and manage dependencies for their projects,
    ensuring seamless integration of third-party libraries without the hassle of manual
    configuration. Offering support for both public and private package repositories,
    Conan facilitates efficient dependency resolution, versioning, and package reuse,
    empowering developers to streamline their C and C++ development workflows with
    ease.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tutorial Video: [link](https://youtu.be/T-5t9de1XyI?si=mRsi_Y-tnuPIsLUM)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Large and growing repository of libraries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexible and powerful [enterprise features](https://blog.conan.io/2023/11/28/Conan-new-features-2-0-14.html)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports both binary and source-based packages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can manage custom build configurations
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steeper learning curve than others for medium sized projects
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires more explicit package information
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 3\. Xrepo[​](#3-xrepo "Direct link to 3\. Xrepo")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Xmake/Xrepo, is a modern and cross-platform build system designed for efficiently
    compiling and managing C, C++, and other programming language projects. With a
    focus on simplicity, flexibility, and speed, xmake simplifies the build process
    by providing an intuitive Lua-based configuration file that allows developers
    to describe their project's build requirements and dependencies concisely.
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designed for cross-platform development
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports add-ons for more build systems
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can manage [build configurations](https://xmake.io/#/manual/custom_toolchain)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relatively new and less mature than some other options
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Smaller community and ecosystem
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 4\. Spack[​](#4-spack "Direct link to 4\. Spack")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spack is a package manager for scientific computing and HPC environments, enabling
    software installation and management across various architectures and compilers,
    enabling reproducibility and efficient collaboration in research and computational
    workflows.
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Excellent for scientific computing and high-performance computing (HPC)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports a wide range of compilers and [build systems](https://spack.readthedocs.io/en/latest/build_systems.html)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can manage complex dependencies
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be challenging to set up and use
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Not as well-suited for general-purpose development
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 5\. Hunter[​](#5-hunter "Direct link to 5\. Hunter")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hunter is a CMake-driven package manager for C and C++ projects, providing a
    simplified way to manage dependencies and integrate them into the build process,
    facilitating efficient development and collaboration in C++ projects.
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple and easy to use
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Good for finding and installing specific libraries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrates well with CMake
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires heavily [modifying build scripts](https://hunter.readthedocs.io/en/latest/quick-start/simple.html)
    to add support
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Smaller repository of libraries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Not as flexible for managing complex dependencies
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 6\. CPM[​](#6-cpm "Direct link to 6\. CPM")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CPM (CMake Package Manager) is a lightweight package manager integrated withing
    your project's `CMakeLists.txt`, enabling simplified dependency management and
    seamless integration of external libraries into C++ projects.
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designed for simplicity and ease of use
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Good for managing dependencies in small to medium-sized projects
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrates well with CMake
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smaller repository of libraries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires [heavily modifying build scripts](https://github.com/cpm-cmake/CPM.cmake/wiki/More-Snippets#rang)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Not as flexible as Conan for managing complex dependencies
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Very little active or development taking place
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Build Systems and Environment Managers[​](#build-systems-and-environment-managers
    "Direct link to Build Systems and Environment Managers")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These tools are doing double duty.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Meson[​](#7-meson "Direct link to 7\. Meson")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Meson is a fast and user-friendly build system designed for efficiently compiling
    and managing C, C++, and other programming language projects, offering simplicity,
    speed, and cross-platform support for streamlined development workflows.
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not primarily a package manager, but rather a build system
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires more configuration than some other options
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 8\. Bazel[​](#8-bazel "Direct link to 8\. Bazel")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bazel can be a powerful and scalable build system developed by Google, supporting
    multiple programming languages including C++ and providing correctness, reproducibility,
    and speed for large-scale software projects.
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very powerful and flexible
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can manage large and complex projects
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Good for distributed builds
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9\. NixOS[​](#9-nixos "Direct link to 9\. NixOS")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Nix package manager is a powerful and purely functional package manager
    used in NixOS and other Linux distributions. It enables users to manage software
    packages and configurations in a reproducible and isolated manner, facilitating
    atomic upgrades and rollbacks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Purely functional package management with atomic upgrades.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reproducible builds across environments.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative system configuration and package management.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Security focus with isolated package environments.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steep learning curve due to functional paradigm.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Less platform with smaller community.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Package selection might be less concentrated than dedicated managers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 10\. Build2[​](#10-build2 "Direct link to 10\. Build2")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Build2 is a modern and efficient build system designed for C and C++ projects,
    offering simplicity, scalability, and reliability for managing dependencies and
    building software.
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Covers the entire project lifecycle: creation, development, testing, and delivery.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Aims to rebuild the C++ ecosystem with modern build principles.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Uniform and consistent interface across platforms and compilers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relatively [new feature for dependency management](https://cppget.org/)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Smaller community and ecosystem compared to established tools.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Might require more configuration and scripting knowledge to fully utilize.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 11\. SCons[​](#11-scons "Direct link to 11\. SCons")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SCons is a software construction tool written in Python, providing a flexible
    and customizable build system for C and C++ projects, emphasizing simplicity and
    ease of use for managing project builds effectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Good for managing build systems
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be used with other package managers like Conan
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not primarily a package manager, but rather a build system
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires more configuration than some other options
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency management is an add-on wrapper
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 12\. Tipi.Build[​](#12-tipibuild "Direct link to 12\. Tipi.Build")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tipi.build is a versatile and customizable build system for C++ projects, designed
    with simplicity and flexibility in mind, offering efficient cloud based workflows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tutorial Video: [link](https://youtu.be/cxNDmugjlFk?si=fUnr7I73CTHWVZeJ)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud based build distribution with caching
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Aims to rebuild the C++ ecosystem with modern build principles.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports re-using pre compiled binaries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relatively new and less mature compared to some options.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Smaller community and ecosystem compared to established tools.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Might require more configuration and scripting knowledge to fully utilize.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 13\. SoupBuild[​](#13-soupbuild "Direct link to 13\. SoupBuild")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SoupBuild is a distributed build system with an almost no compatibility definition.
    This is similar to Bazel land Vcpkg respectively - both combined into a cargo
    inspired build tool chain.
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defines to ABI compatibility
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Rebuilds from source and distributes builds
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limit support for different toolchains
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Very opinionated
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Only in Alpha preview
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 14\. Pixi (prefix-dev)[​](#14-pixi-prefix-dev "Direct link to 14\. Pixi (prefix-dev)")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplified experience with a Cargo-like CLI.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-language support within projects.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Project-specific environments and automatic lockfiles.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Built on conda's package ecosystem.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Newer and less mature with a smaller community and ecosystem.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Limited C++ package selection compared to dedicated managers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Potential complexity due to multi-language management.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 15\. Mamba[​](#15-mamba "Direct link to 15\. Mamba")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reimplementation of conda optimized for speed
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-on existing dependency resolver implementation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightweight client with a core subset of features for ease-of-use
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Built on conda's package ecosystem
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Newer and less mature with a smaller community and ecosystem
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Limited C++ package selection compared to dedicated managers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Might introduce challenges with standard C++ build systems and tools
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 16\. Gradle[​](#16-gradle "Direct link to 16\. Gradle")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Gradle](https://gradle.org/) is a build automation tool known for its flexibility
    and scalability, primarily used for Java projects but also supporting other languages
    like C++ through plugins. It handles dependency management, compilation, testing,
    and packaging of software.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proven at managing complex build systems with a variety of dependencies, including
    C++.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Designed for cross-platform development
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration with Java and other ecosystems
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not primarily a C++ package manager
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Limited package repository limited. While plugins like Gradle CppPlugin and
    CMakePlugin exist, the C++ package repository is not as extensive as dedicated
    managers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Steeper learning curve compared to some C++-specific tools.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance overhead for simple C++ projects
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 17\. Conda[​](#17-conda "Direct link to 17\. Conda")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Conda](https://docs.conda.io/en/latest/) is a versatile package manager and
    environment management system primarily used for Python, but it also supports
    other languages like C++ and R. It simplifies dependency management and enables
    easy creation, sharing, and reproduction of software environments across different
    platforms.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mature and established with a vast package ecosystem across various languages.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-platform compatibility.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexible environment management for projects or systems.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Powerful dependency management for complex scenarios.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steeper learning curve compared to simpler tools like Hunter or CPM.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Not primarily designed for C++ development, requiring additional setup for C++
    packages.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: C++ package selection might be smaller than dedicated C++ package managers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 18\. BitBake[​](#18-bitbake "Direct link to 18\. BitBake")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Yocto project's [BitBake](https://docs.yoctoproject.org/bitbake/dev/index.html)
    is a complete embedded Linux system creation environment. BitBake is the build
    tool used within Yocto to manage the entire build process, including compiling
    source code, packaging software, and creating a final operating system image for
    your target device.
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streamlined workflow within Yocto Project, managing dependencies from source
    to final image.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensures consistent builds by meticulously controlling package versions within
    Yocto configuration.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Primarily designed for Yocto Project and embedded development, less suitable
    for general C/C++ projects.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Relies heavily on building dependencies from source, potentially time-consuming.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing dependencies within Yocto recipes can be complex for beginners.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Version constraints compared to some package managers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 19\. CMake's FetchContent[​](#19-cmakes-fetchcontent "Direct link to 19\. CMake's
    FetchContent")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seamless integration avoids external tools and complexity.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports various download methods (git, archives, etc.) and allows customization.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables consuming content (like headers) during configuration step.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Primarily for downloading, not advanced dependency management.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripting knowledge needed for complex setups.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lacks features like a repository and versioning.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This is a bonus shout out. You should not be considering these but they deserve
    credit.
  prefs: []
  type: TYPE_NORMAL
- en: 20\. Buckaroo[​](#20-buckaroo "Direct link to 20\. Buckaroo")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Buckaroo is a package manager designed for C++ developers using the Buck build
    system, streamlining dependency management and integration into projects for efficient
    development workflows.
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designed for large-scale projects with many dependencies
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can manage complex build systems
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrates well with other Buckaroo tools
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 21\. Biicode[​](#21-biicode "Direct link to 21\. Biicode")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to use with a focus on dependency management
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 22\. CGet[​](#22-cget "Direct link to 22\. CGet")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[CGet](https://cget.readthedocs.io/en/latest/) is a package manager designed
    to work with CMake and non-CMake packages. It provides a flexible way to install
    packages from a directory, file URL, or Github repository.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CGet can manage both CMake and non-CMake packages, making it a versatile tool
    for various project needs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It can install packages from various sources, including directories, file URLs,
    and Git repositories. Even has the concept of [recipes](https://github.com/pfultz2/cget-recipes).
    Supports using a `requirements.txt`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: integrates seamlessly with CMake, allowing for easy package management within
    your project's build system.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No longer Maintained.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: While it can handle non-CMake packages, CGet's core functionality revolves around
    CMake, potentially making it less suitable for projects without a CMake dependency.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 23\. Teaport[​](#23-teaport "Direct link to 23\. Teaport")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Teaport](https://bitbucket.org/benman/teaport/src/master/) is a dependency
    manager designed specifically for C++ projects, inspired by the simplicity and
    flexibility of CocoaPods. It prioritizes leveraging existing tools and focuses
    on providing a separation between dependency management and build systems.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexibility in dependency sources, supporting Git repositories, directories,
    and ZIP archives. This caters to diverse project structures and simplifies dependency
    acquisition.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizes a version lock file (`project.teaspec.lock`) to guarantee reproducible
    builds by locking down exact dependency versions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports multiple dependency variants, enabling selection based on specific
    requirements (e.g., different architectures or library versions).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No longer Maintained.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Relies on basic file copy for distributing sources like `scp`, `ssh`, and `rsync`
    for downloading dependencies. Difficult to scale compared to HTTP with a load
    balancer or CDN.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 24\. C++ Archive Network[​](#24-c-archive-network "Direct link to 24\. C++ Archive
    Network")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Strengths:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports the [Waf](https://waf.io/) build system
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weaknesses:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not primarily designed for C++ development anymore
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing the Right Package Manager[​](#choosing-the-right-package-manager "Direct
    link to Choosing the Right Package Manager")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The best C++ package manager for you will depend on your specific needs and
    preferences. Consider factors such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The size and scope of your project:** For small projects, a simple manager
    like CPM or Hunter may be sufficient. For larger projects, a more powerful manager
    like Conan may be necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The types of libraries you need:** If you need mostly open-source libraries,
    vcpkg is a good option. If you need more specialized or industry specific, Spack
    may be a better choice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Your experience level:** If you are new to C++ package managers, vcpkg or
    Conan are excellent choices which can very quickly get you up and running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ultimately, the best way to choose a C++ package manager is to try out a few
    different options and see which one you like best.
  prefs: []
  type: TYPE_NORMAL
- en: '2024-02-13: Added Mamba suggested by u/mjklaim'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2024-02-20: Added SoupBuild suggested by u/mwasplund'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2024-04-07:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moved NixOS up the list because package selection vs the platform limitations
    and it's ability to make dedicated environments.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Moved Buckaroo to honorable mentions because it's not been updated in three
    years.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added BitBake
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '2024-04-11: Added CGet and Teaport from [cppreference](https://en.cppreference.com/w/cpp/links/libs#Package_managers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
