["```\n` `, $?, STDIN, STDOUT, STDERR, ${}, ARGV, $$        ...  # shell-isms\n%Q, %q, %x, -e, -F, -wnlp, / /, $VAR, @VAR, HEREDOC  ...  # perl-awk-isms\n```", "```\n# .make sure we don't loose the original '==' method \n#  giving it an alias, a synonim \nclass Float \n  alias origEq == \nend \n\n# . define \"small\" with the global variable $epsilon\n$epsilon = 0.0001\n\n# . change the behaviour of 'A == B' in the case where \n#   A and B are FLOAT and B = 0.0\\. \nclass Float \n  def ==(other)\n    if (other.origEq(0.0)) then \n      return (self.abs < $epsilon)\n    else\n      return (self.origEq(other))\n    end\n  end\nend\n\n# EXERCISE. if you write == 0 instead of 0.0 it won't work, why?\n0.1 == 0.0       # false \n0.001 == 0.0     # false \n0.000001 == 0.0  # => true !\n```", "```\n# . Adding a method to the String builtin class\nclass String \n   # . check if the string looks like an IPv4 address, spaces\n   #   at the beginning and end of the string are ignored. \n   def ipv4? \n     self.strip.match? /^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}$/\n   end\nend\n\n\"foo\".ipv4?            # => false \n\"781.123.12.4\".ipv4?   # => false \n\"187.123.12.4\".ipv4?   # => true\n```", "```\n\" Sopra la panca la capra campa \".strip.downcase.\n                                  split(/\\s+/).include?(\"capra\")\n```"]