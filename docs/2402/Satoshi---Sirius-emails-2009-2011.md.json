["```\nmmalmi@cc.hut.fi wrote:\n> All right, I can do the website and the FAQ. I'll start writing the FAQ \n> now with the questions that I can think of.\n\nThat would be great!  I added you (dmp1ce) as a dev to the sourceforge \nproject and gave you access to edit the web space and everything.\n\n> I have a feature suggestion for the program: a UI tool for creating \n> password protected private keys and saving them into a custom location. \n> Backups of the key will be needed to be safe from losing the control of \n> your coins, and for using the coins on more than one computers. Password \n> protection would be needed to make using your money more difficult for \n> someone who happens to find your key file.\n\nDefinitely.  This will be an absolutely essential feature once things \nget going, making it so you can lock your wealth up with strong \nencryption and back it up more securely than any physical safe.  So far \nI've been putting it off in favour of other features because it's not \ncrucial yet until bitcoins start to have value.\n\nI plan to work on the escrow feature next, which is needed to make \nactual trades for physical stuff safer and before backing the currency \nwith fiat money can begin.\n\n> I'm running a bitcoin node always when my PC is powered on, which means \n> about 24/7\\. Bitcoin is a great project, and it's really cool to \n> participate!\n\nThanks!  Right now there are a lot of people on the network who can't \nreceive incoming connections, so every node that can really helps. \nHaving more helps keep down the \"(not accepted)\" issue for now until I \nreduce the chances of that happening in v0.1.6.\n\nI guess one answer for the FAQ should be how to set up your firewall to \nforward port 8333 so you can receive incoming connections.  The question \ncould be something like \"what if I have 0 connections\" and that could be \nthe answer that it might be because the nodes you can connect with is \nlimited if you don't set that up.\n\nHere's a compilation of questions I've answered in forums and e-mail \nthat should help you see what questions are frequently asked and some \nanswers I've used.  It's not intended to use all or most of the material \nhere, just pick and choose.  This is just a dump of everything I've \nanswered.\n\nSome issues that we don't have easy answers for are best not to bring \nup.  Casual users seems content to assume that the system works as \nstated (which it does), and getting into the design details just opens a \ncan of worms that can't be answered without a deep understanding of the \nsystem.  The advanced questions I've received have mostly been unique \nper person and best answered individually.\n\n**** QUESTION AND ANSWER DUMP ****\n\nAny questions used for the FAQ should probably be rephrased.\n\nquestions:\n\n > The bottom of the UI shows:\n >\n > Generating        4 connections     4024 blocks     164 transactions\n >\n > I understand \"generating\"; I assume I am connected to 4 other nodes; and\n > I know I have recorded 164 transactions (including failed generation\n > attempts).  I'm not clear what the \"blocks\" figure describes.  It's much\n > smaller than the total of all the blocks shown against all my \ntransactions.\n >\n\nIt's the total number of blocks in the block chain, meaning the \nnetwork's block chain, which everyone has a copy of.  Every Bitcoin node \ndisplays the same number and it goes up about every 10 minutes whenever \nsomeone generates a block.  When you haven't had it running for a while, \nonce you're connected it spins up rapidly as it downloads what was \ngenerated while you were gone to catch up.  I'm not sure exactly how to \ndescribe it (that would fit on the status bar in 1 word, maybe 2 words \nmax), any ideas?\n\nThe blocks number in the status column next to your transactions is the \nnumber of blocks that have come after that transaction.  Your \ntransaction is essentially \"in\" that many blocks.\n\nSatoshi\n\n > My best guess - it\n > is the length of the global chain, and the rapid advance at the start\n > is as the software downloads and verifies the preceding blocks in the\n > chain as being valid.\n\nRight.  I'm trying to think of more clear wording for that, maybe \"%d \nnetwork blocks\" or \"%d block chain\".\n\n > I'm having an unusual run of (block not-accepted) failures, and \nthought I'd let you know in\n > case this was of any significance.\n\nWhat rate of not-accepted did you see?  I didn't see anything unusual on \nmy end.  If you had more than, say, 4 in a row, that would be abnormal \nand probably a loss of network communication.  If it's scattered and \nless than 25%, just random bad luck.  It's normal and harmless to \nrandomly get some per cent of not-accepted, and of course randomness can \nsometimes bunch up and look like a pattern.\n\nThe idea of an option to View/Hide unaccepted blocks is a good one, as \nwell as View/Hide all generated blocks so you can more easily see \nincoming transactions.  Seeing the unaccepted blocks is just annoying \nand frustrating.  Everyone faces the same rate of unaccepted, it's just \na part of the process.  It would probably be best to default to hide \nunaccepted blocks, so as not to show giving and taking away something \nthat never was, and not show new generated blocks at all until they have \nat least one confirmation.  It would only mean finding out you have a \ngenerated block 15 minutes later than normal, and then you still have \n119 blocks to go before it matures anyway.  This is on the to-do list \nfor v0.1.6.\n\nSatoshi\n\n[note: I have some improvements in 0.1.6 to reduce this problem somewhat,\nand it'll also improve when the network is larger]\n\n > For some reason your transfer to me shows up as \"From: unknown\" even\n > though I added you to my address book.\n >\n > I have a \"Generated (not accepted)\" line in my transaction list, it\n > seems like an attempt to generate a coin went wrong somehow. Not sure\n > what happened here - presumably my node successfully solved a block\n > but then I went offline before it was sent to the network?\n\nTransactions sent to a bitcoin address will always say \"from: unknown\". \n  The transaction only tells who it's to.  Sending by bitcoin address \nhas a number of problems, but it's so nice having the fallback option to \nbe able to send to anyone whether they're online or not.  There are a \nnumber of ideas to try to improve things later.  For now, if things work \nout like the real world where the vast majority of transactions are with \nmerchants, they'll pretty much always make sure to set up to receive by \nIP.  The P2P file sharing networks seem fairly successful at getting a \nlarge percentage of their users to set up their firewalls to forward a port.\n\nI badly wanted to find some way to include a comment with indirect\ntransfers, but there just wasn't a way to do it.  Bitcoin uses EC-DSA, which\nwas essential for making the block chain compact enough to be practical with\ntoday's technology because its signatures are an order of magnitude smaller\nthan RSA.  But EC-DSA can't encrypt messages like RSA, it can only be used\nto verify signatures.\n\nThe \"Generated (not accepted)\" normally happens if two nodes find a \nblock at close to the same time, one of them will not be accepted.  It's \nnormal and unavoidable.  I plan in v0.1.6 to hide those, since they're \njust confusing and annoying and there's no reason for users to have to \nsee them.  While the network is still small like it is now, if you can't \nreceive incoming connections you're at more of a disadvantage because \nyou can't receive block announcements as directly.\n\n > ...So far it has two \"Generated\" messages, however the\n > \"Credit\" field for those is 0.00 and the balance hasn't changed.  Is\n > this due to the age/maturity requirement for a coin to be valid?\n\nRight, the credit field stays 0.00 until it matures, then it'll be\n50.00\\.  BTW, you can doubleclick on a line for details.\n\n > ...understand correctly, there is only one (or maybe a few) global\n > chain[s] into which all transactions are hashed. If there is only one\n > chain recording \"the story of the economy\" so to speak, how does this\n > scale? In an imaginary planet-wide deployment there would be millions\n > of even billions of transactions per hour being hashed into the chain...\n\n > ...I found the section on incentives hard to follow. In particular, I'm\n > not clear on what triggers the transition from minting new coins as a\n > reason to run a node, to charging transaction fees (isn't the point of\n > BitCoin largely to zero transaction costs anyway?). Presumably there's\n > some human in charge of the system...\n\n > ...How did you decide on the inflation schedule for v1? Where did 21\n > million coins come from? What denominations are these coins? You\n > mention a way to combine and split value but I'm not clear on how this\n > works. For instance are bitcoins always denominated by an integer or\n > can you have fractional bitcoins?...\n\n > ...it's rare that I encounter truly\n > revolutionary ideas. The last time I was this excited about a new\n > monetary scheme was when I discovered Ripple. If you have any thoughts\n > on Ripple, I'd also love to hear them.\n\nThere is only one global chain.\n\nThe existing Visa credit card network processes about 15 million \nInternet purchases per day worldwide.  Bitcoin can already scale much \nlarger than that with existing hardware for a fraction of the cost.  It \nnever really hits a scale ceiling.  If you're interested, I can go over \nthe ways it would cope with extreme size.\n\nBy Moore's Law, we can expect hardware speed to be 10 times faster in 5 \nyears and 100 times faster in 10\\.  Even if Bitcoin grows at crazy \nadoption rates, I think computer speeds will stay ahead of the number of \ntransactions.\n\nI don't anticipate that fees will be needed anytime soon, but if it \nbecomes too burdensome to run a node, it is possible to run a node that \nonly processes transactions that include a transaction fee.  The owner \nof the node would decide the minimum fee they'll accept.  Right now, \nsuch a node would get nothing, because nobody includes a fee, but if \nenough nodes did that, then users would get faster acceptance if they \ninclude a fee, or slower if they don't.  The fee the market would settle \non should be minimal.  If a node requires a higher fee, that node would \nbe passing up all transactions with lower fees.  It could do more volume \nand probably make more money by processing as many paying transactions \nas it can.  The transition is not controlled by some human in charge of \nthe system though, just individuals reacting on their own to market forces.\n\nA key aspect of Bitcoin is that the security of the network grows as the \nsize of the network and the amount of value that needs to be protected \ngrows.  The down side is that it's vulnerable at the beginning when it's \nsmall, although the value that could be stolen should always be smaller \nthan the amount of effort required to steal it.  If someone has other \nmotives to prove a point, they'll just be proving a point I already concede.\n\nMy choice for the number of coins and distribution schedule was an \neducated guess.  It was a difficult choice, because once the network is \ngoing it's locked in and we're stuck with it.  I wanted to pick \nsomething that would make prices similar to existing currencies, but \nwithout knowing the future, that's very hard.  I ended up picking \nsomething in the middle.  If Bitcoin remains a small niche, it'll be \nworth less per unit than existing currencies.  If you imagine it being \nused for some fraction of world commerce, then there's only going to be \n21 million coins for the whole world, so it would be worth much more per \nunit.  Values are 64-bit integers with 8 decimal places, so 1 coin is \nrepresented internally as 100000000\\.  There's plenty of granularity if \ntypical prices become small.  For example, if 0.001 is worth 1 Euro, \nthen it might be easier to change where the decimal point is displayed, \nso if you had 1 Bitcoin it's now displayed as 1000, and 0.001 is \ndisplayed as 1.\n\nRipple is interesting in that it's the only other system that does \nsomething with trust besides concentrate it into a central server.\n\nSatoshi\n\n > If we assume that 0.1% is a good risk rate, then z=5 thus\n > any transaction must wait a bit less than an hour before being\n > solidified in the chain. As micropayments for things like web content\n > or virtual goods are by definition something that requires low\n > overhead, waiting an hour seems like quite a significant hurdle.\n\nFor the actual risk, multiply the 0.1% by the probability that the buyer \nis an attacker with a huge network of computers.\n\nFor micropayments, you can safely accept the payment immediately.  The \nsize of the payment is too small for the effort to steal it. \nMicropayments are almost always for intellectual property, where there's \nno physical loss to the merchant.  Anyone trying to steal a micropayment \nwould probably not be a paying customer anyway, and if they want to \nsteal intellectual property they can use the file sharing networks.\n\nCurrently, businesses accept a certain chargeoff rate.  I believe the \nrisk with 1 or even 0 confirming blocks will be much less than the rate \nof chargebacks on verified credit card transactions.\n\nThe usual scam against a merchant that doesn't wait for confirming \nblocks would be to send a payment to a merchant, then quickly try to \npropagate a double-spend to the network before the merchant's copy. What \nthe merchant can do is broadcast his transaction and then monitor the \nnetwork for any double-spend copies.  The thief would not be able to \nbroadcast during the monitoring period or else the merchant's node would \nreceive a copy.  The merchant would only have to monitor for a minute or \ntwo until most of the network nodes have his version and it's too late \nfor the thief's version to catch up and reach many nodes.  With just a \nminute or two delay, the chance of getting away without paying could be \nmade much too low to scam.  A thief usually needs a high probability of \ngetting an item for free to make it worthwhile.  Using a lot of CPU \npower to do the brute force attack discussed in the paper in addition to \nthe above scam would not increase the thief's chances very much.\n\nAnything that grants access to something, like something that takes a \nwhile to download, access to a website, web hosting, a subscription or \nservice, can be cancelled a few minutes later if the transaction is \nrejected.\n\n > How is the required difficulty of each block communicated through the\n > network and agreed upon?\n\nIt's not communicated.  The formula is hardcoded in the program and \nevery node does the same calculation to know what difficulty is required \nfor the next block.  If someone diverged from the formula, their block \nwould not be accepted by the majority.\n\n > Is the code free/open source or just open source?\n\nIt's free open source.  It's the MIT license, which just requires some \ndisclaimer text be kept with the source code, other than that you can do \njust about anything you want with it.  The source is included in the \nmain download.\n\nSatoshi\n\n > Is there a way to be told of new versions? Does the app auto update\n > itself?  Some kind of mailing list would be excellent.\n\nThe list is:\nbitcoin-list@lists.sourceforge.net\nSubscribe/unsubscribe page:\nhttp://lists.sourceforge.net/mailman/listinfo/bitcoin-list\nArchives:\nhttp://sourceforge.net/mailarchive/forum.php?forum_name=bitcoin-list\n\nI'll always announce new versions there.  Automatic update, or at least \nnotification of new versions, is definitely on the list.\n\n[this inflation discussion was before the transaction fee mechanism and \nfixed plan of 21 million coins was posted, so it may not be as \napplicable anymore]\n\n > Since they can be created for free (or at the cost\n > of computer power people have anyway for other reasons),\n > monetizing them means simply giving away money.\n\nYou're still thinking as if the difficulty level will be so easy that \npeople will be able to generate all the bitcoins they want.\n\nImagine you have to run your computer 24/7 for a month to generate 1 \ncent.  After a year, you could generate 12 cents.  That's not going to \nmake it so people can just generate all the bitcoin they want for spending.\n\nThe value of bitcoins would be relative to the electricity consumed to \nproduce them.  All modern CPUs save power when they're idle.  If you run \na computational task 24/7, not letting it idle, it uses significantly \nmore power, and you'll notice it generates more heat.  The extra wattage \nconsumed goes straight to your power bill, and the value of the bitcoins \nyou produce would be something less than that.\n\n > Why would they, when they make money by generating\n > new ones\n\nNo, they can't make money that way.  It would cost them more in \nelectricity than they'd be selling the bitcoins for.\n\nHistorically, people have taken up scarce commodities as money, if \nnecessary taking up whatever is at hand, such as shells or stones.  Each \nhas a kernel of usefulness that helped bootstrap the process, but the \nmonetary value ends up being much more than the functional value alone. \n  Most of the value comes from the value that others place in it.  Gold, \nfor instance, is pretty, non-corrosive and easily malleable, but most of \nits value is clearly not from that.  Brass is shiny and similar in \ncolour.  The vast majority of gold sits unused in vaults, owned by \ngovernments that could care less about its prettiness.\n\nUntil now, no scarce commodity that can be traded over a communications \nchannel without a trusted third party has been available.  If there is a \ndesire to take up a form of money that can be traded over the Internet \nwithout a TTP, then now that is possible.\n\nSatoshi\n\n > As more capable\n > computer hardware comes out, the natural supply per user\n > doubles at every cycle of Moore's law.\n\nActually, that is handled.  There's a moving average that compensates \nfor the total effort being expended so that the total production is a \nconstant.  As computers get more powerful, the difficulty increases to \ncompensate.\n\n > I do not recall any economic history of a commodity subject\n > to natural inflation ever being used as money\n\nThere's gold for one.  The supply of gold increases by about 2%-3% per \nyear.  Any fiat currency typically averages more inflation than that.\n\n > Won't there be massive inflation as computers get faster and are able \nto solve the proof-of-work problem faster?\n\nThe difficulty is controlled by a moving average that compensates for \nthe total effort being expended to keep the total production constant. \nAs computers get more powerful, the difficulty increases to compensate.\n\n > If someone double spends, then the transaction record\n > can be unblinded revealing the identity of the cheater?\n\nIdentities are not used, and there's no reliance on recourse.  It's all \nprevention.\n\n > ...You're saying\n > there's no effort to identify and exclude nodes that don't\n > cooperate? I suspect this will lead to trouble and possible DOS\n > attacks.\n\nThere is no reliance on identifying anyone.  As you've said, it's\nfutile and can be trivially defeated with sock puppets.\n\nThe credential that establishes someone as real is the ability to\nsupply CPU power.\n\n > But in the absence of identity, there's no downside to them\n > if spends become invalid, if they've already received the\n > goods they double-spent for (access to website, download,\n > whatever). The merchants are left holding the bag with\n > \"invalid\" coins, unless they wait that magical \"few blocks\"\n > (and how can they know how many?) before treating the spender\n > as having paid.\n >\n > The consumers won't do this if they spend their coin and it takes\n > an hour to clear before they can do what they spent their coin on.\n > The merchants won't do it if there's no way to charge back a\n > customer when they find the that their coin is invalid because\n > the customer has doublespent.\n\nThis is a version 2 problem that I believe can be solved fairly\nsatisfactorily for most applications.\n\nThe race is to spread your transaction on the network first.  Think 6\ndegrees of freedom -- it spreads exponentially.  It would only take\nsomething like 2 minutes for a transaction to spread widely enough\nthat a competitor starting late would have little chance of grabbing\nvery many nodes before the first one is overtaking the whole network.\nDuring those 2 minutes, the merchant's nodes can be watching for a\ndouble-spent transaction.  The double-spender would not be able to\nblast his alternate transaction out to the world without the merchant\ngetting it, so he has to wait before starting.\n\nIf the real transaction reaches 90% and the double-spent tx reaches\n10%, the double-spender only gets a 10% chance of not paying, and 90%\nchance his money gets spent.  For almost any type of goods, that's\nnot going to be worth it for the scammer.\n\nInformation based goods like access to website or downloads are\nnon-fencible.  Nobody is going to be able to make a living off\nstealing access to websites or downloads.  They can go to the file\nsharing networks to steal that.  Most instant-access products aren't\ngoing to have a huge incentive to steal.\n\nIf a merchant actually has a problem with theft, they can make the\ncustomer wait 2 minutes, or wait for something in e-mail, which many\nalready do.  If they really want to optimize, and it's a large\ndownload, they could cancel the download in the middle if the\ntransaction comes back double-spent.  If it's website access,\ntypically it wouldn't be a big deal to let the customer have access\nfor 5 minutes and then cut off access if it's rejected.  Many such\nsites have a free trial anyway.\n\nSatoshi\n\n[in response to a question about scale]\n\n100,000 block generating nodes is a good ballpark large-scale size\nto think about.  Propagating a transaction across the whole network\ntwice would consume a total of US$ 0.02 of bandwidth at today's\nprices.  In practice, many would be burning off excess allocated\nbandwidth or unlimited plans with one of the cheaper backbones.\nThere could be millions of SPV clients.  They only matter in how\nmany transactions they generate.  If they pay 1 or 2 cents\ntransaction fees, they pay for themselves.  I've coded it so you\ncan pay any optional amount of transaction fees you want.  When the\nincentive subsidy eventually tapers off, it may be necessary to put\na market-determined transaction fee on your transactions to make\nsure nodes process them promptly.\n\nTo think about what a really huge transaction load would look like,\nI look at the existing credit card network.  I found some more\nestimates about how many transactions are online purchases.  It's\nabout 15 million tx per day for the entire e-commerce load of the\nInternet worldwide.  At 1KB per transaction, that would be 15GB of\nbandwidth for each block generating node per day, or about two DVD\nmovies worth.  Seems do-able even with today's technology.\n\nImportant to remember, even if Bitcoin caught on at dot-com rates\nof growth, it would still take years to become any substantial\nfraction of all transactions.  I believe hardware has already\nrecently become strong enough to handle large scale, but if there's\nany doubt about that, bandwidth speeds, prices, disk space and\ncomputing power will be much greater by the time it's needed.\n\nSatoshi\n\n > One other question I had... What prevents the single node with the most\n > CPU power from generating and retaining the majority of the BitCoins?\n > If every node is working independently of all others, if one is\n > significantly more powerful than the others, isn't it probable that this\n > node will reach the proper conclusion before other nodes? An\n > underpowered node may get lucky once in a while, but if they are at a\n > significant horsepower advantage I would expect the majority of BitCoins\n > to be generated by the most powerful node.\n\nIt's not like a race where if one car is twice as fast, it'll always\nwin.  It's an SHA-256 that takes less than a microsecond, and each guess\nhas an independent chance of success.  Each computer's chance of finding\na hash collision is linearly proportional to it's CPU power.  A computer\nthat's half as fast would get half as many coins.\n\n[question about what to backup]\n\nThe files are in \"%appdata%\\Bitcoin\", that's the directory to\nbackup.\n\n%appdata% is per-user access privilege.  Most new programs like\nFirefox store their settings files there, despite the headwind of\nMicrosoft changing the directory name with every Windows release\nand being full of spaces and so long it runs off the screen.\n\n[question about what to backup]\n\nThe directory is \"%appdata%\\Bitcoin\"\nIt has spaces in it so you need the quotes\ncd \"%appdata%\\bitcoin\"\n\nOn XP it would typically be:\nC:\\Documents and Settings\\[username]\\Application Data\\Bitcoin\n\nBackup that whole directory.  All data files are in that\ndirectory.  There are no temporary files.\n\n[question about what to backup]\n\nThe crucial file to backup is wallet.dat.  If bitcoin is running\nthen you have to backup the whole %appdata%\\bitcoin directory\nincluding the database subdirectory, but even if it's not running\nit certainly feels safer to always backup the whole directory.\n\nThe database unfortunately names its files \"log.0000000001\".  To\nthe rest of the world, \"log\" means delete-at-will, but to database\npeople it means delete-and-lose-everything-in-your-other-files.  I\ntried to put them out of harm's way by putting them in the\ndatabase subdirectory.  Later I'll write code to flush the logs\nafter every wallet change so wallet.dat will be standalone safe\nalmost all the time.\n\n > > You know, I think there were a lot more people interested in the 90's,\n > > but after more than a decade of failed Trusted Third Party based \nsystems\n > > (Digicash, etc), they see it as a lost cause. I hope they can make the\n > > distinction that this is the first time I know of that we're trying a\n > > non-trust-based system.\n >\n > Yea, that was the primary feature that caught my eye. The real trick\n > will be to get people to actually value the Bitcoins so that they become\n > currency.\n\nHal sort of alluded to the possibility that it could be seen as a\nlong-odds investment.  I would be surprised if 10 years from now\nwe're not using electronic currency in some way, now that we know\na way to do it that won't inevitably get dumbed down when the\ntrusted third party gets cold feet.\n\nOnce it gets bootstrapped, there are so many applications if you\ncould effortlessly pay a few cents to a website as easily as dropping\ncoins in a vending machine.\n\n[this next bit turned out to be very controversial.  there is extreme\nprejudice against spam solutions, especially proof-of-work.]\n\nIt can already be used for pay-to-send e-mail.  The send dialog is\nresizeable and you can enter as long of a message as you like.\nIt's sent directly when it connects.  The recipient doubleclicks\non the transaction to see the full message.  If someone famous is\ngetting more e-mail than they can read, but would still like to\nhave a way for fans to contact them, they could set up Bitcoin and\ngive out the IP address on their website.  \"Send X bitcoins to my\npriority hotline at this IP and I'll read the message personally.\"\n\nSubscription sites that need some extra proof-of-work for their\nfree trial so it doesn't cannibalize subscriptions could charge\nbitcoins for the trial.\n\n[again, I don't know why I'm including this, as it's best to stay\naway from claims about spam.  people automatically react violently\nagainst any suggestion of a spam solution.]\n\n > Spammer botnets could burn through pay-per-send email filters\n > trivially (as usual, the costs would fall on people other than the\n > botnet herders & spammers).\n\nThen you could earn a nice profit by setting up pay-per-send\ne-mail addresses and collecting all the spam money.  You could\nsell it back to spammers who don't have big enough botnets to\ngenerate their own, helping bootstrap the currency's value.  As\nmore people catch on, they'll set up more and more phony addresses\nto harvest it.  By the time the book \"How I got rich exploiting\nspammers and you can too\" is coming out, there'll be too many fake\naddresses and the spammers will have to give up.\n\n > > * Spammer botnets could burn through pay-per-send email filters\n > >   trivially\n > If POW tokens do become useful, and especially if they become money,\n > machines will no longer sit idle. Users will expect their computers to\n > be earning them money (assuming the reward is greater than the cost to\n > operate). A computer whose earnings are being stolen by a botnet will\n > be more noticeable to its owner than is the case today, hence we might\n > expect that in that world, users will work harder to maintain their\n > computers and clean them of botnet infestations.\n\nOne more factor that would mitigate spam if POW tokens have value:\nthere would be a profit motive for people to set up massive\nquantities of fake e-mail accounts to harvest POW tokens from\nspam.  They'd essentially be reverse-spamming the spammers with\nautomated mailboxes that collect their POW and don't read the\nmessage.  The ratio of fake mailboxes to real people could become\ntoo high for spam to be cost effective.\n\nThe process has the potential to establish the POW token's value\nin the first place, since spammers that don't have a botnet could\nbuy tokens from harvesters.  While the buying back would\ntemporarily let more spam through, it would only hasten the\nself-defeating cycle leading to too many harvesters exploiting the\nspammers.\n\nInterestingly, one of the e-gold systems already has a form of\nspam called \"dusting\".  Spammers send a tiny amount of gold dust\nin order to put a spam message in the transaction's comment field.\n  If the system let users configure the minimum payment they're\nwilling to receive, or at least the minimum that can have a\nmessage with it, users could set how much they're willing to get\npaid to receive spam.\n\n > The last thing we need is to deploy a system designed to burn all\n > available cycles, consuming electricity and generating carbon dioxide,\n > all over the Internet, in order to produce small amounts of bitbux to\n > get emails or spams through.\n >\n > Can't we just convert actual money in a bank account into bitbux --\n > cheaply and without a carbon tax?  Please?\n\nIronic if we end up having to choose between economic liberty and\nconservation.\n\nUnfortunately, proof of work is the only solution I've found to\nmake p2p e-cash work without a trusted third party.  Even if I\nwasn't using it secondarily as a way to allocate the initial\ndistribution of currency, PoW is fundamental to coordinating the\nnetwork and preventing double-spending.\n\nIf it did grow to consume significant energy, I think it would\nstill be less wasteful than the labour and resource intensive\nconventional banking activity it would replace.  The cost would be\nan order of magnitude less than the billions in banking fees that\npay for all those brick and mortar buildings, skyscrapers and junk\nmail credit card offers.\n\nSatoshi\n\n > BTW I don't remember if we talked about this, but the other day some\n > people were mentioning secure timestamping. You want to be able to\n > prove that a certain document existed at a certain time in the past.\n > Seems to me that bitcoin's stack of blocks would be perfect for this.\n\nIndeed, Bitcoin is a distributed secure timestamp server for\ntransactions.  A few lines of code could create a transaction with\nan extra hash in it of anything that needs to be timestamped.\nI should add a command to timestamp a file that way.\n\n From a thread on p2presearch which starts with my rant about trust \nbeing the root weakness of all conventional financial systems.\nhttp://listcultures.org/pipermail/p2presearch_listcultures.org/2009-February/thread.html\n\nI've developed a new open source P2P e-cash system called Bitcoin.  It's\ncompletely decentralized, with no central server or trusted parties,\nbecause everything is based on crypto proof instead of trust.  Give it a\ntry, or take a look at the screenshots and design paper:\n\nDownload Bitcoin v0.1 at http://www.bitcoin.org\n\nThe root problem with conventional currency is all the trust that's\nrequired to make it work.  The central bank must be trusted not to\ndebase the currency, but the history of fiat currencies is full of\nbreaches of that trust.  Banks must be trusted to hold our money and\ntransfer it electronically, but they lend it out in waves of credit\nbubbles with barely a fraction in reserve.  We have to trust them with\nour privacy, trust them not to let identity thieves drain our accounts.\nTheir massive overhead costs make micropayments impossible.\n\nA generation ago, multi-user time-sharing computer systems had a similar\nproblem.  Before strong encryption, users had to rely on password\nprotection to secure their files, placing trust in the system\nadministrator to keep their information private.  Privacy could always\nbe overridden by the admin based on his judgment call weighing the\nprinciple of privacy against other concerns, or at the behest of his\nsuperiors.  Then strong encryption became available to the masses, and\ntrust was no longer required.  Data could be secured in a way that was\nphysically impossible for others to access, no matter for what reason,\nno matter how good the excuse, no matter what.\n\nIt's time we had the same thing for money.  With e-currency based on\ncryptographic proof, without the need to trust a third party middleman,\nmoney can be secure and transactions effortless.\n\nOne of the fundamental building blocks for such a system is digital\nsignatures.  A digital coin contains the public key of its owner.  To\ntransfer it, the owner signs the coin together with the public key of\nthe next owner.  Anyone can check the signatures to verify the chain of\nownership.  It works well to secure ownership, but leaves one big\nproblem unsolved: double-spending.  Any owner could try to re-spend an\nalready spent coin by signing it again to another owner.  The usual\nsolution is for a trusted company with a central database to check for\ndouble-spending, but that just gets back to the trust model.  In its\ncentral position, the company can override the users, and the fees\nneeded to support the company make micropayments impractical.\n\nBitcoin's solution is to use a peer-to-peer network to check for\ndouble-spending.  In a nutshell, the network works like a distributed\ntimestamp server, stamping the first transaction to spend a coin.  It\ntakes advantage of the nature of information being easy to spread but\nhard to stifle.  For details on how it works, see the design paper at\nhttp://www.bitcoin.org/bitcoin.pdf\n\nThe result is a distributed system with no single point of failure.\nUsers hold the crypto keys to their own money and transact directly with\neach other, with the help of the P2P network to check for double-spending.\n\nSatoshi Nakamoto\nhttp://www.bitcoin.org\n\nMartien van Steenbergen Martien at AardRock.COM\nThu Feb 12 08:40:53 CET 2009\n\nVery interesting. Is this akin to David Chaum's anonymous digital\nmoney? His concept makes sure money is anonymous unless it is\ncompromised, i.e. the same money spent more than once. As soon as it's\ncompromised, the ‘counterfeiter’ is immediately publicly exposed.\n\nAlso, in bitcoin, is there a limited supply of money (that must be\nmanaged)? Or is money created exaclty at the moment of transaction?\n\nSucces en plezier,\n\nMartien.\n\nMartien van Steenbergen wrote:\n > Very interesting. Is this akin to David Chaum's anonymous digital money?\n > His concept makes sure money is anonymous unless it is compromised, i.e.\n > the same money spent more than once. As soon as it's compromised, the\n > ‘counterfeiter’ is immediately publicly exposed.\n\nIt's similar in that it uses digital signatures for coins, but different\nin the approach to privacy and preventing double-spending.  The\nrecipient of a Bitcoin payment is able to check whether it is the first\nspend or not, and second-spends are not accepted.  There isn't an\noff-line mode where double-spenders are caught and shamed after the\nfact, because that would require participants to have identities.\n\nTo protect privacy, key pairs are used only once, with a new one for\nevery transaction.  The owner of a coin is just whoever has its private key.\n\nOf course, the biggest difference is the lack of a central server.  That\nwas the Achilles heel of Chaumian systems; when the central company shut\ndown, so did the currency.\n\n > Also, in bitcoin, is there a limited supply of money (that must be\n > managed)? Or is money created exaclty at the moment of transaction?\n\nThere is a limited supply of money.  Circulation will be 21,000,000\ncoins.  Transactions only transfer ownership.\n\nThank you for your questions,\n\nSatoshi\n\nMartien van Steenbergen wrote:\n > Reminds me of:\n >\n >     * AardRock » Wizard Rabbit Treasurer\n >       <http://wiki.aardrock.com/Wizard_Rabbit_Treasurer>; and\n >     * AardRock » Pekunio <http://wiki.aardrock.com/Pekunio>\n\nIndeed, it is much like Pekunio in the concept of spraying redundant\ncopies of every transaction to a number of peers on the network, but the\nimplementation is not a reputation network like Wizard Rabbit Treasurer.\n   In fact, Bitcoin does not use reputation at all.  It sees the network\nas just a big crowd and doesn't much care who it talks to or who tells\nit something, as long as at least one of them relays the information\nbeing broadcast around the network.  It doesn't care because there's no\nway to lie to it.  Either you tell it crypto proof of something, or it\nignores you.\n\n > Are you familiar with Ripple?\n\nAs trust systems go, Ripple is unique in spreading trust around rather\nthan concentrating it.\n\n[I've been asked at least 4 other times \"have you heard of Ripple?\"]\n\nMichel Bauwens wrote:\n > how operational is your project? how soon do you think people will be\n > able to use it in real life?\n\nIt's fully operational and the network is growing.  If you try the\nsoftware, e-mail me your Bitcoin address and I'll send you a few coins.\n\nWe just need to spread the word and keep getting more people interested.\n\nHere's a link to the original introduction of the paper on the \nCryptography mailing list.  (Inflation issues were superseded by changes \nI made later to support transaction fees and the limited circulation \nplan.  This link is a moving target, this archive page is just a certain \nnumber of days back and the discussion will keep scrolling off to the \nnext page.)\nhttp://www.mail-archive.com/cryptography@metzdowd.com/mail3.html\n\nA little follow up when the software was released.\nhttp://www.mail-archive.com/cryptography@metzdowd.com/mail2.html\n\nMy description of how Bitcoin solves the Byzantine Generals' problem:\nhttp://www.bitcoin.org/byzantine.html\n\n```"]