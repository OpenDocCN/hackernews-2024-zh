- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:37:05'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://anaseto.codeberg.page/goal/chap-intro.html](https://anaseto.codeberg.page/goal/chap-intro.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Home](/). Work-in-progress documentation for [Goal](https://codeberg.org/anaseto/goal).
    *Last update: 2024-05-25*.'
  prefs: []
  type: TYPE_NORMAL
- en: 1 Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Goal is an embeddable [array programming language](https://en.wikipedia.org/wiki/Array_programming)
    with a bytecode interpreter, written in Go. The command line interpreter can execute
    scripts or run in interactive mode. For installation, see the `README.md` file
    in the [project’s repository](https://codeberg.org/anaseto/goal). You can also
    [try Goal on the browser](https://anaseto.codeberg.page/try-goal/). An EPUB version
    of the present documentation is available [here](https://anaseto.codeberg.page/misc/goal/goal-docs-gen.epub)
  prefs: []
  type: TYPE_NORMAL
- en: Like in most array programming languages, Goal’s builtins vectorize operations
    on immutable arrays and encourage a functional style for control and data transformations,
    supported by a simple dynamic type system with little abstraction, and mutable
    variables (but no mutable values).
  prefs: []
  type: TYPE_NORMAL
- en: You can read about Goal’s origins and influences in the [Origins section](chap-FAQ.html#origins)
    of the FAQ. If you already know about the K language, you might want to read the
    [Differences from K](chap-from-k.html) chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Goal’s main distinctive features among array languages can be summarized as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Dictionaries and table functionality (similar to most K dialects)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Atomic strings: `"ab" "bc"="bc" → 0 1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unicode-aware string primitives: `_"AB" "Π" → "ab" "π"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Perl-like quoting constructs and string interpolation: `qq/$var\n or ${var}/`
    and `rq#raw strings#`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Format strings: `"%.2g"$1 4%3 → "0.33" "1.3"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dedicated regular expression syntax: `rx/\s+/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embeddable and extensible in Go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Goal also has support for standard features like I/O, CSV, and time handling.
  prefs: []
  type: TYPE_NORMAL
- en: Goal shines the most in common scripting tasks, like handling columnar data
    or text processing. Goal is also suitable for exploratory programming.
  prefs: []
  type: TYPE_NORMAL
- en: The [next chapter](chap-tutorial.html) gives a tour of Goal’s features and showcases
    the language in a couple of practical examples.
  prefs: []
  type: TYPE_NORMAL
