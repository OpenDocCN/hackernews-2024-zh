- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:59:44'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: New Python Operators!. The new “walrus operator” in Python 3.8… | by Peter Norvig
    | Better Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://betterprogramming.pub/new-python-operators-9f31b56ddcc7?gi=7918b2c3ccf0](https://betterprogramming.pub/new-python-operators-9f31b56ddcc7?gi=7918b2c3ccf0)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Walrus Operator `:=`
  prefs: []
  type: TYPE_NORMAL
- en: The new “walrus operator” in Python 3.8 is written as `:=` and has been the
    topic of much [discussion](https://docs.python.org/3/whatsnew/3.8.html). This
    post describes a few of Python’s other whimsically-named but less-well-known multi-character
    operators.
  prefs: []
  type: TYPE_NORMAL
- en: These operators are announced today, April 1, 2023, but, much like Dorothy with
    her ruby slippers, you always had the power to use them, you just had to learn
    it for yourself!
  prefs: []
  type: TYPE_NORMAL
- en: Ski Hat Operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The “ski hat” operator is written as `*=0` and can be used to empty out a variable,
    be it a list, string, tuple, or numeric value.
  prefs: []
  type: TYPE_NORMAL
- en: For example, after executing the following code, `skiers` is an empty list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Ski Hat Operator `*=0`
  prefs: []
  type: TYPE_NORMAL
- en: Dumbbell Operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The “dumbbell operator” is written as `[:]=[]` and can also be used to empty
    a list, but is not as versatile as the ski hat operator, as it doesn’t work for
    most other types.
  prefs: []
  type: TYPE_NORMAL
- en: 'After executing the following code, `reps` will be an empty list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Dumbbell Operator `[:]=[]`
  prefs: []
  type: TYPE_NORMAL
- en: Lapping Cat Operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The “lapping cat” operator is written as `,=` and picks out the first element
    of an iterable. Like a finicky cat, it complains if there are other bothersome
    elements in the iterable.
  prefs: []
  type: TYPE_NORMAL
- en: After executing the following code, `water` is `'HHO'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Lapping Cat Operator `,=`
  prefs: []
  type: TYPE_NORMAL
- en: Starship Operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The “starship” operator is written as `, *_=` and depicts a dual-nacelle starship
    (such as the Enterprise) alongside a photon torpedo. It has a similar effect to
    the lapping cat operator in picking out the first element of an iterable, but
    it allows the iterable to have more than one element.
  prefs: []
  type: TYPE_NORMAL
- en: 'After executing the following code, `NCC` is `1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Starship operator , *_=
  prefs: []
  type: TYPE_NORMAL
- en: Flying Saucer Operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The “flying saucer” operator is written as `--0--` and “beams up” an integer
    division, making it round up rather than round down. (I learned about it from
    [Mark Dickinson](https://www.enthought.com/team/mark-dickinson-2/).)
  prefs: []
  type: TYPE_NORMAL
- en: 'The following expression evaluates to 5, not 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Flying Saucer Operator `— 0 —`
  prefs: []
  type: TYPE_NORMAL
- en: Emphasis Operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The “emphasis operator” is written by surrounding an integer-valued expression
    with asterisks and is used to emphasize the following sequence by repeating it.
    For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: evaluates to `['oh', 'good', 'grief', '!', '!', '!']`.
  prefs: []
  type: TYPE_NORMAL
- en: The emphasis operator *sigh*
  prefs: []
  type: TYPE_NORMAL
- en: Factorial Operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Math fans will be pleased to learn that the factorial operator `n!` has been
    partially incorporated into Python.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the implementation is incomplete. But these unit tests all pass,
    so that’s good enough, right?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Abstract keyword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python also allows you to use the keyword `abstract` to indicate that a method
    of an abstract class must be implemented in a subclass for any instantiated object.
  prefs: []
  type: TYPE_NORMAL
- en: In the following code, the method `name` is defined as `abstract`, so a call
    to an object of the class results in an error message pointing out that the method
    is not defined.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: More
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The astute reader will recognize that these new operators rely on the placement
    of spaces in a way that violates [PEP 8](https://peps.python.org/pep-0008/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To that I say: but my way is more fun! Especially today, April 1\. For more
    operators, including implementations of the `++` and `<<` operators from C++,
    see my [old pos](https://norvig.com/python-iaq.html)t.'
  prefs: []
  type: TYPE_NORMAL
- en: 'PS: Everything in this post is true, except for “that’s good enough, right?”'
  prefs: []
  type: TYPE_NORMAL
