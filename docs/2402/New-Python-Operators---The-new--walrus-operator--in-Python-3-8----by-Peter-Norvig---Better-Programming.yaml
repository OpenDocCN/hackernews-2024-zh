- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:59:44'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: New Python Operators!. The new “walrus operator” in Python 3.8… | by Peter Norvig
    | Better Programming
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://betterprogramming.pub/new-python-operators-9f31b56ddcc7?gi=7918b2c3ccf0](https://betterprogramming.pub/new-python-operators-9f31b56ddcc7?gi=7918b2c3ccf0)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Walrus Operator `:=`
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: The new “walrus operator” in Python 3.8 is written as `:=` and has been the
    topic of much [discussion](https://docs.python.org/3/whatsnew/3.8.html). This
    post describes a few of Python’s other whimsically-named but less-well-known multi-character
    operators.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: These operators are announced today, April 1, 2023, but, much like Dorothy with
    her ruby slippers, you always had the power to use them, you just had to learn
    it for yourself!
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Ski Hat Operator
  id: totrans-split-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The “ski hat” operator is written as `*=0` and can be used to empty out a variable,
    be it a list, string, tuple, or numeric value.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: For example, after executing the following code, `skiers` is an empty list.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Ski Hat Operator `*=0`
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: Dumbbell Operator
  id: totrans-split-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The “dumbbell operator” is written as `[:]=[]` and can also be used to empty
    a list, but is not as versatile as the ski hat operator, as it doesn’t work for
    most other types.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: 'After executing the following code, `reps` will be an empty list:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Dumbbell Operator `[:]=[]`
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: Lapping Cat Operator
  id: totrans-split-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The “lapping cat” operator is written as `,=` and picks out the first element
    of an iterable. Like a finicky cat, it complains if there are other bothersome
    elements in the iterable.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: After executing the following code, `water` is `'HHO'`.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Lapping Cat Operator `,=`
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: Starship Operator
  id: totrans-split-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The “starship” operator is written as `, *_=` and depicts a dual-nacelle starship
    (such as the Enterprise) alongside a photon torpedo. It has a similar effect to
    the lapping cat operator in picking out the first element of an iterable, but
    it allows the iterable to have more than one element.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: 'After executing the following code, `NCC` is `1`:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Starship operator , *_=
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: Flying Saucer Operator
  id: totrans-split-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The “flying saucer” operator is written as `--0--` and “beams up” an integer
    division, making it round up rather than round down. (I learned about it from
    [Mark Dickinson](https://www.enthought.com/team/mark-dickinson-2/).)
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: 'The following expression evaluates to 5, not 4:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Flying Saucer Operator `— 0 —`
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: Emphasis Operator
  id: totrans-split-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The “emphasis operator” is written by surrounding an integer-valued expression
    with asterisks and is used to emphasize the following sequence by repeating it.
    For example,
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: evaluates to `['oh', 'good', 'grief', '!', '!', '!']`.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: The emphasis operator *sigh*
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: Factorial Operator
  id: totrans-split-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Math fans will be pleased to learn that the factorial operator `n!` has been
    partially incorporated into Python.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the implementation is incomplete. But these unit tests all pass,
    so that’s good enough, right?
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Abstract keyword
  id: totrans-split-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python also allows you to use the keyword `abstract` to indicate that a method
    of an abstract class must be implemented in a subclass for any instantiated object.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: Python 还允许您使用关键字 `abstract` 来指示抽象类的方法必须在子类中实现以便对任何实例化对象进行调用。
- en: In the following code, the method `name` is defined as `abstract`, so a call
    to an object of the class results in an error message pointing out that the method
    is not defined.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，方法 `name` 被定义为 `abstract`，因此对该类的对象调用将导致错误消息指出该方法未定义。
- en: '[PRE7]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: More
  id: totrans-split-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多
- en: The astute reader will recognize that these new operators rely on the placement
    of spaces in a way that violates [PEP 8](https://peps.python.org/pep-0008/).
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 机智的读者会意识到，这些新运算符依赖于空格的放置方式，这违反了 [PEP 8](https://peps.python.org/pep-0008/) 的规定。
- en: 'To that I say: but my way is more fun! Especially today, April 1\. For more
    operators, including implementations of the `++` and `<<` operators from C++,
    see my [old pos](https://norvig.com/python-iaq.html)t.'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 于此我说：但是我的方式更有趣！特别是今天，4月1日。有关更多运算符，包括来自C++的 `++` 和 `<<` 运算符的实现，请参阅我的 [old pos](https://norvig.com/python-iaq.html)t。
- en: 'PS: Everything in this post is true, except for “that’s good enough, right?”'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 'PS: 本文所有内容属实，除了“那就够了，对吧？”'
