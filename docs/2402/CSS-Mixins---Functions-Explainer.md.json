["```\n@function --negative (--value) {\n  result: calc(-1 * var(--value));\n}\n\nhtml { padding: --negative(var(--gap)); }\n```", "```\n@mixin --button (--face, --text, --radius) {\n  --background: var(--face, teal);\n  --color: color-mix(in lch, var(--text, white) 85%, var(--background));\n  --border-color: color-mix(in lch, var(--text, white) 80%, var(--background));\n\n  @result {\n    background: var(--background);\n    border: medium double var(--border-color);\n    border-radius: var(--radius, 3px);\n    color: var(--color);\n    padding: 0.25lh 2ch;\n  }\n}\n\nbutton[type='submit'] { @apply --button(rebeccaPurple); }\nbutton.danger { @apply --button(maroon); }\n```", "```\n@function --my-function(--param-a, --another-param) { … }\n```", "```\n@function --my-function(\n  --param-a: 1em,\n  --another-param: 'this is a string'\n) { … }\n```", "```\n@function --my-function(\n  --param-a type(string),\n  --another-param type(length): 1em\n) { … }\n```", "```\n@function <function-name> [( <parameter-list> )]? {\n  <function-rules>\n\n  result: <result>;\n} \n```", "```\n@function <function-name> [( <parameter-list> )]? [returns type(<syntax>)]? {\n  <function-rules>\n\n  result: <result>;\n} \n```", "```\n@function --sizes(\n  --s type(length),\n  --m type(length),\n  --l type(length),\n) returns type(length) {\n  --min: 16px;\n\n  @media (inline-size < 20em) {\n    result: max(var(--min), var(--s, 1em));\n  }\n  @media (20em < inline-size < 50em) {\n    result: max(var(--min), var(--m, 1em + 0.5vw));\n  }\n  @media (50em < inline-size) {\n    result: max(var(--min), var(--l, 1.2em + 1vw));\n  }\n}\n```", "```\n@function --my-function (--arg1, --arg2) using (--var1, --var2) {\n\n}\n```", "```\nbutton {\n  background: --contrast(pink, 0.7);\n}\n```", "```\nbutton {\n  background: --contrast(--color: pink; --ratio: 0.7);\n}\n```", "```\nbutton {\n  background: --contrast(pink; --ratio: 0.7;);\n}\n```", "```\n@function --fluid-ratio(\n  --min-width type(length),\n  --max-width type(length),\n) returns type(percentage) {\n  --min: var(--min-width, 300px);\n  --max: var(--max-width, 2000px)l\n  --scale: calc(var(--max) - var(--min));\n  --position: calc(100vw - var(--min));\n  --fraction: calc(var(--position) / var(--scale));\n\n  @return clamp(\n    0%,\n    100% * var(--fraction),\n    100%\n  );\n}\n\np {\n  font-size: calc-mix(--fluid-ratio(375px; 1920px), 1rem, 1.25rem);\n  padding: calc-mix(--fluid-ratio(375px; 700px), 1rem, 2rem);\n}\n```", "```\n@function --fluid-mix(\n  --min-value type(length),\n  --max-value type(length),\n  --from-width type(length),\n  --to-width type(length)\n) returns type(length) {\n  --from: var(--from-width, var(--fluid-min, 375px));\n  --to: var(--to-width, var(--fluid-max, 1920px));\n  --scale: calc(var(--to) - var(--from));\n  --position: calc(100vw - var(--from));\n  --fraction: calc(var(--position) / var(--scale));\n  --progress: clamp(0%, 100% * var(--fraction), 100%);\n\n  @return calc-mix(var(--progress), var(--min-value), var(--max-value));\n}\n\np {\n  font-size: --fluid-mix(1rem, 1.25rem);\n  padding: --fluid-mix(1rem, 2rem, 375px, 700px);\n}\n```", "```\n@mixin <mixin-name> [( <parameter-list> )]? {\n  <mixin-rules>\n} \n```", "```\n@mixin --center-content {\n  display: grid;\n  place-content: center;\n}\n\n.page {\n  @apply --center-content;\n\n}\n```", "```\n@mixin --clearfix {\n  &::after {\n    display: block;\n    content: \"\";\n    clear: both;\n  }\n\n  @supports (display: flow-root) {\n    display: flow-root;\n\n    &::after { display: none; }\n  }\n}\n\n.float-container {\n  @apply --clearfix;\n\n}\n```", "```\n@apply <mixin-name> [(<argument-list>)]?\n```", "```\n .float-container {\n  @apply --clearfix;\n}\n\n.float-container {\n  &::after {\n    display: block;\n    content: \"\";\n    clear: both;\n  }\n\n  @supports (display: flow-root) {\n    display: flow-root;\n\n    &::after { display: none; }\n  }\n}\n```", "```\n@apply --center-content;\n```", "```\n@mixin --gradient-text(\n  --from-color type(color),\n  --to-color type(color),\n  --at-angle type(angle),\n) {\n  --to: var(--to-color, teal);\n  --from: var(--from-color, mediumvioletred);\n  --angle: var(--at-angle, to bottom right);\n  color: var(--from, var(--to));\n\n  @supports (background-clip: text) or (-webkit-background-clip: text) {\n    --gradient: linear-gradient(var(--angle), var(--from), var(--to));\n    background: var(--gradient, var(--from));\n    color: transparent;\n    -webkit-background-clip: text;\n    background-clip: text;\n  }\n}\n\nh1 {\n  @apply --gradient-text(pink, powderblue);\n}\n```", "```\n.dark-mode {\n  --background: black;\n  --text: white;\n\n}\n\n@media (prefers-color-scheme: dark) {\n  html:not(.light-mode) {\n    --background: black;\n    --text: white;\n\n  }\n}\n```", "```\n@mixin dark-mode {\n  --background: black;\n  --text: white;\n\n}\n\n.dark-mode {\n  @include dark-mode;\n}\n\n@media (prefers-color-scheme: dark) {\n  html:not(.light-mode) {\n    @include dark-mode;\n  }\n}\n```", "```\n.dark-mode {\n  --mode: dark;\n}\n\n@media (prefers-color-scheme: dark) {\n  html:not(.light-mode) {\n    --mode: dark;\n  }\n}\n\n@container style(--mode: dark) {\n\n  body {\n    --background: black;\n    --text: white;\n\n  }\n}\n```", "```\n@mixin gradient-text {\n  color: teal;\n\n  @supports (background-clip: text) or (-webkit-background-clip: text;) {\n    background: linear-gradient(to bottom right, teal, mediumvioletred);\n    -webkit-text-fill-color: transparent;\n    -webkit-background-clip: text;\n    background-clip: text;\n  }\n}\n```", "```\n@mixin gradient-text {\n  --gradient-text-start: var(--color-primary, teal);\n  --gradient-text-end: var(--color-complement, mediumvioletred);\n  color: var(--gradient-text-start);\n\n  @supports (background-clip: text) or (-webkit-background-clip: text;) {\n    background: linear-gradient(\n      to bottom right,\n      var(--gradient-text-start),\n      var(--gradient-text-end)\n    );\n    -webkit-text-fill-color: transparent;\n    -webkit-background-clip: text;\n    background-clip: text;\n  }\n}\n```", "```\n@mixin button(--style: outline, --shape: pill) {\n  @when arg(--style: outline) {\n    border: medium solid;\n    color: teal;\n  } @else {\n    background: teal;\n    color: white;\n  }\n\n  @when arg(--shape: pill) {\n    border-radius: 50%;\n  }\n}\n```", "```\n@use 'sass:color';\n@use 'sass:math';\n\n@mixin tint-shade($color, $name, $steps: 2) {\n  --#{$name}: #{$color};\n\n  $step: math.div(100%, ($steps + 1));\n\n  @for $i from 1 through $steps {\n    $amount: $step * $i;\n    --#{$name}-t#{$i}: #{color.mix(white, $color, $amount)};\n    --#{$name}-s#{$i}: #{color.mix(black, $color, $amount)};\n  }\n}\n\n@mixin theme($color, $type: 'complement') {\n\n  @include tint-shade($color, 'primary');\n\n  @if $type == 'complement' {\n    $complement: color.adjust($color, $hue: 180deg);\n    @include tint-shade($complement, 'complement');\n  } @else if $type == 'triad' {\n\n  }\n\n}\n\nhtml {\n  @include theme(blue);\n}\n```", "```\nhtml {\n\n  --primary: blue;\n  --primary-t1: #5555ff;\n  --primary-s1: #0000aa;\n  --primary-t2: #aaaaff;\n  --primary-s2: #000055;\n  --complement: yellow;\n  --complement-t1: #ffff55;\n  --complement-s1: #aaaa00;\n  --complement-t2: #ffffaa;\n  --complement-s2: #555500;\n\n}\n```", "```\n@mixin --media-medium {\n  @media screen and (env(--small) < inline-size < env(--large)) {\n    @nested;\n  }\n}\n\n.grid {\n  @apply --media-medium {\n    padding: var(--padding-medium, 1em);\n  }\n}\n```", "```\n.grid {\n  @media screen and (env(--small) < inline-size < env(--large)) {\n    padding: var(--padding-medium, 1em);\n  }\n}\n```", "```\nbutton {\n  background: fallback(--contrast(pink; 0.7), black);\n}\n```", "```\n@function --media(\n  --breakpoint: length,\n  --below: length,\n  --above: length\n) {\n  @media screen and (width < var(--breakpoint)) {\n    result: var(--below);\n  }\n  @media screen and (width >= var(--breakpoint)) {\n    result: var(--above);\n  }\n}\n```", "```\n@function --media(\n  --breakpoint: length,\n  --below: length,\n  --above: length\n) {\n  @media screen and (width < arg(--breakpoint)) {\n    result: var(--below);\n  }\n  @media screen and (width >= arg(--breakpoint)) {\n    result: var(--above);\n  }\n}\n\nhtml {\n\n  padding: --media(40em, 0, var(--padding, 1em));\n\n  margin: --media(var(--break, 40em), 0, 1em);\n}\n```", "```\n@function --link(\n  --theme: *;\n) {\n  @when (arg(--theme): light) {\n    result: env(--link-light);\n  } @else {\n    result: env(--link-dark);\n  }\n}\n```", "```\n.item {\n  width: min(100% - 1em, 30em);\n}\n```", "```\nhtml {\n  --l: 100% - 50%;\n  background: hsl(0deg 100% calc(var(--l)));\n}\n```", "```\n .error {\n  border: thin solid maroon;\n\n  &:hover {\n    background-color: #fee;\n  }\n}\n\n.error--serious {\n  @extend .error;\n  border-width: thick;\n}\n\n@mixin error {\n  border: thin solid maroon;\n\n  &:hover {\n    background-color: #fee;\n  }\n}\n\n.error--serious {\n  @include error;\n  border-width: thick;\n}\n```", "```\n@keyframes typography {\n  from {\n    font-size: 1.2em;\n    line-height: 1.4;\n  }\n  to {\n    font-size: 3em;\n    line-height: 1.2;\n  }\n}\n\nh2 {\n\n  interpolate: typography --container-size ease-in;\n\n  font-size: ;\n  line-height: ;\n}\n```", "```\nh2 {\n\n  @apply typography(--container-size; ease-in);\n\n  font-size: ;\n  line-height: ;\n}\n```", "```\nh2 {\n\n  @apply keyframes(typography; --container-size; ease-in);\n\n  font-size: ;\n  line-height: ;\n}\n```", "```\n@mixin hover {\n  &:not([disabled]):hover {\n    @content;\n  }\n}\n\n.button {\n  border: 1px solid black;\n  @include hover {\n    border-width: 2px;\n  }\n}\n```", "```\n@custom-function --fluid-ratio(\n  --min-width,\n  --max-width\n) {\n  result: clamp(\n    0%,\n    100% * (100vw - var(--min-width)) / (var(--max-width) - var(--min-width)),\n    100%\n  );\n}\n\np {\n  font-size: mix(--fluid-ratio(375px, 1920px), 1rem, 1.25rem);\n  padding: mix(--fluid-ratio(375px, 700px), 1rem, 2rem);\n}\n```", "```\n@custom-function --checkerboard(--size) {\n   result: linear-gradient(\n        45deg,\n        silver 25%,\n        transparent 25%,\n        transparent 75%,\n        silver 75%\n      )\n      0px 0px / var(--size) var(--size),\n    linear-gradient(\n        45deg,\n        silver 25%,\n        transparent 25%,\n        transparent 75%,\n        silver 75%\n      )\n      calc(var(--size) / 2) calc(var(--size) / 2) / var(--size) var(--size);\n}\n\n.used {\n  background: --checkerboard(32px);\n}\n```"]