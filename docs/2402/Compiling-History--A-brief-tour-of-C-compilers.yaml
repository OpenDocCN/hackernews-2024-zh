- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:48:37'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:48:37
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Compiling History: A brief tour of C compilers'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译历史：C编译器简要介绍
- en: 来源：[https://www.deusinmachina.net/p/compiling-history-a-brief-tour-of](https://www.deusinmachina.net/p/compiling-history-a-brief-tour-of)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.deusinmachina.net/p/compiling-history-a-brief-tour-of](https://www.deusinmachina.net/p/compiling-history-a-brief-tour-of)
- en: 'As the story of C’s birth goes hand in hand with the creation of Unix, the
    first C compiler can be traced back to the early 1970’s. I''ve detailed the history
    of C in my previous article [Tracing the Lines: From the Telephone to Unix](https://www.deusinmachina.net/p/history-of-unix),
    which includes a brief summary of this history.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 随着C诞生的故事与Unix的创建密切相关，第一个C编译器可以追溯到20世纪70年代初。我在我的上一篇文章[追踪线路：从电话到Unix](https://www.deusinmachina.net/p/history-of-unix)中详细介绍了C的历史，其中包括对这段历史的简要总结。
- en: Around 1971, Ken decided that Unix needed to be ported to a higher level language.
    Dennis Ritchie took on the task, evolving Ken’s B language into something more
    feature rich. It was first called New B (NB), but each time Ken tried to rewrite
    the kernel in New B he would run into a roadblock. He would then ask Dennis to
    add more features. Eventually after structures were invented, there were enough
    features that Ken could rewrite version 4 of the whole Unix kernel in it. After
    a new compiler was written for this new language, it was renamed to C, and the
    rest is history. This was a significant breakthrough, as, until then, kernels
    were written in Assembly. For perspective, as late as 1983, Microsoft was still
    programming [MS-DOS v2.0](https://github.com/microsoft/MS-DOS/tree/master/v2.0/source)
    in Assembly. Unix was truly ahead of its time.
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大约在1971年，Ken决定将Unix移植到更高级的语言。Dennis Ritchie承担了这项任务，将Ken的B语言演变成更具特色的东西。它最初被称为New
    B（NB），但每次Ken试图用New B重写内核时，他都会遇到障碍。然后他会要求Dennis添加更多功能。最终，结构被发明后，有足够的功能，Ken可以用它重写整个Unix内核的版本4。在为这种新语言编写了新编译器后，它被重新命名为C，其余的就是历史。这是一个重大突破，因为直到那时，内核都是用汇编语言编写的。为了理解，1983年，微软仍在用汇编语言编写[MS-DOS
    v2.0](https://github.com/microsoft/MS-DOS/tree/master/v2.0/source)。Unix真正领先于其时代。
- en: Since Unix was created on a PDP-10/11, it makes sense that the first compiler
    for C was created for the PDP-11\. This is usually just referred to as the PDP
    C Compiler. The earliest known version of this compiler’s source code can still
    [be viewed here](https://github.com/mortdeus/legacy-cc), and is an interesting
    time capsule of computing history.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Unix是在PDP-10/11上创建的，因此第一个C编译器为PDP-11创建。这通常被称为PDP C编译器。这个编译器源代码的最早版本仍然可以[在这里查看](https://github.com/mortdeus/legacy-cc)，它是计算历史的一个有趣的时光胶囊。
- en: 'This was succeeded by the Portable C Compiler, developed by Stephen C. Johnson
    of Bell Labs, and one of the first compilers that was capable of generating machine
    independent C code. In Section 2.1 of Bjarne Stroustrup’s article titled [Sibling
    Rivalry: C and C++](https://stroustrup.com/sibling_rivalry.pdf), he details key
    aspects of this compiler and why it was so important'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Portable C Compiler的后继者是贝尔实验室的Stephen C. Johnson开发的，它是最早能够生成与机器无关的C代码的编译器之一。在Bjarne
    Stroustrup的文章[兄弟竞争：C和C++](https://stroustrup.com/sibling_rivalry.pdf)的第2.1节中，他详细介绍了这个编译器的关键方面以及它为什么如此重要。
- en: 'Pre-ANSI C is often referred to as K&R C. However, that is slightly incorrect.
    The C described in [Kernighan,1978] lacks three features of the language used
    by almost all C programmers before the emergenceof C89: void, enumerations, and
    structure assignment. These three features were added in PCC, the Portable C Compiler,
    developed by Steve Johnson and distributed as the C compiler by Bell Labs (with
    the ‘‘blessing’’ of Dennis Ritchie).'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Pre-ANSI C通常被称为K＆R C。然而，这有点不准确。 [Kernighan,1978]中描述的C语言缺少几个几乎所有C程序员在C89出现之前使用的语言的特性：void、枚举和结构赋值。这三个特性是由Steve
    Johnson开发的便携式C编译器PCC（Portable C Compiler）添加的，并由贝尔实验室分发为C编译器（得到了Dennis Ritchie的“祝福”）。
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Adding void (used as a possible return type for functions only) allows a programmer
    to directly express that a function doesn’t return a value, and allows the compiler
    to check that. Similarly, adding enumerations allows a programmer to directly
    express that a group of values in some way belong together. It also supports the
    notion of manifest constants in a way that does not rely on macros.
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 添加void（仅用作函数的可能返回类型）允许程序员直接表示函数不返回值，并允许编译器检查。类似地，添加枚举允许程序员直接表示一组值在某种程度上归属于一起。它还支持一种不依赖于宏的常量表示法。
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Adding structure assignment (and also structure copy initialization, argument
    passing, and function return) makes struct values first-class citizens of C.
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 添加结构赋值（以及结构复制初始化、参数传递和函数返回）使结构值成为C的一等公民。
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thus, two of the three last additions to Classic C add to the expressive power
    of the type system without actually allowing a programmer to express any new computations.
    The third makes user-defined types, as then existing, equal to built-in types.
    In addition, one of the additions provides an alternative to the use of macros.
    These are all themes that recur in the design of C++.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因此，经典C的最后三个补充中的两个增加了类型系统的表现力，而实际上并没有允许程序员表达任何新的计算。第三个使用户定义的类型，如当时存在的，等同于内置类型。此外，其中一个补充提供了一种替代宏的方法。这些都是C++设计中反复出现的主题。
- en: The Portable C Compiler was distributed with version 7 of Unix, the last version
    of Unix released before it was commercialized. Due to its early mover advantage,
    and the fact that it could be adapted to produce assembly for different architectures,
    meant that it enjoyed much success in the nascent years of C.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 便携式C编译器随Unix的第7版一起发布，这是Unix在商业化之前发布的最后一个版本。由于它的先行者优势，以及它可以适应为不同体系结构生成汇编代码，意味着它在C的初期年份取得了很大的成功。
- en: But it was not the only compiler to pop up during that time. The 1970s also
    saw the Small-C compiler created by Ron Cain. It was a minimalist subset of C
    that could run on 8-bit microcomputers. It’s hard to believe now a days that computers
    at one point struggled to compile C code, let alone a subset of it, but that was
    indeed the case. The PDP-11 that C was developed on was a 16-bit broom closet
    sized computer, which was still considerably more powerful than the 8-bit home
    computers of the day. This is often why programs from that era were written in
    Assembly, Basic, and Pascal instead of C.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但它并不是那个时代唯一出现的编译器。20 世纪 70 年代还见证了 Ron Cain 创造的 Small-C 编译器。它是 C 的一个极简子集，可以在
    8 位微型计算机上运行。难以置信的是，如今计算机曾经在编译 C 代码方面也遇到困难，更不用说其子集了，但事实确实如此。C 开发的 PDP-11 是一台 16
    位的小型计算机，尽管比当时的 8 位家用计算机强大得多，但仍然远不及今天的计算机。这也是为什么那个时代的程序经常是用汇编、Basic 和 Pascal 编写，而不是用
    C 编写的原因。
- en: Another commercial compiler to come out during this time was the Lattice C compiler,
    one of the first C compilers written for the IBM Personal Computer. It was created
    by [Lifeboat Associates](https://en.wikipedia.org/wiki/Lifeboat_Associates) and
    retailed for $500 ($1,628 in today’s money), and it ran on PC-DOS and MS-DOS.
    Microsoft used this as the basis for their Microsoft C Compiler (MSC). During
    this time many compilers were produced including, the Mark Williams Compiler,
    the Green Hills compiler, the Aztec C compiler and many others.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在此期间推出的另一款商业编译器是 Lattice C 编译器，它是为 IBM 个人计算机编写的第一批 C 编译器之一。它是由[Lifeboat Associates](https://en.wikipedia.org/wiki/Lifeboat_Associates)创建的，售价为
    500 美元（按今天的价值为 1,628 美元），可在 PC-DOS 和 MS-DOS 上运行。微软将其用作其 Microsoft C 编译器（MSC）的基础。在此期间，生产了许多编译器，包括
    Mark Williams 编译器、Green Hills 编译器、Aztec C 编译器等。
- en: These developments however, navigated a landscape devoid of an official C standard,
    leading to varied interpretations and implementations. They were based on "The
    C Programming Language" book by Brian Kernighan and Dennis M. Ritchie published
    on February 22, 1978\. The eventual release of the standard, known as C89 or C90,
    brought much needed uniformity and clarity to the language. The preface in the
    2nd edition of the book, published in April of 1988, highlights the importance.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些发展是在没有官方 C 标准的情况下进行的，导致了各种不同的解释和实现。它们基于 Brian Kernighan 和 Dennis M. Ritchie
    在 1978 年 2 月 22 日出版的《C 程序设计语言》一书。最终的标准版本，即 C89 或 C90，为该语言带来了急需的一致性和清晰度。该书第二版的前言，于
    1988 年 4 月出版，强调了其重要性。
- en: The standard formalizes constructions that were hinted but not described in
    the first edition, particularly structure assignment and enumerations. It provides
    a new form of function declaration that permits cross-checking of definition with
    use. It specifies a standard library, with an extensive set of functions for performing
    input and output, memory management, string manipulation, and similar tasks. It
    makes precise the behavior of features that were not spelled out in the original
    definition, and at the same time states explicitly which aspects of the language
    remain machine-dependent.
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此标准规范了第一版中暗示但未描述的构造，特别是结构赋值和枚举。它提供了一种新形式的函数声明，允许对定义与使用进行交叉检查。它指定了一个标准库，其中包含了大量用于执行输入和输出、内存管理、字符串操作等任务的函数。它明确了原始定义中未详细说明的功能行为，并同时明确说明了语言的哪些方面仍然是机器相关的。
- en: With the publishing of the standard, C became a much more consistent language
    to program across environments.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 随着标准的发布，C 成为了跨平台编程的一种更为一致的语言。
- en: Fast forward to the present, the GNU Compiler Collection (GCC) stands as a testament
    to the evolution of compilers, supporting not just multiple platforms, but also
    multiple languages.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 快进到现在，GNU 编译器集（GCC）是编译器发展演变的一个见证，不仅支持多个平台，还支持多种编程语言。
- en: One of my favorite things about computer lore is that many of the most instrumental
    people are still alive today, and we still have records of when they made history.
    This is no different for GCC, and we actual have the text [Richard Stallman sent](https://gcc.gnu.org/wiki/History),
    introducing the GCC beta back in 87\.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我对计算机传说的其中一件喜欢的事情是，许多最具影响力的人至今仍然健在，我们仍然记录着他们创造历史的时刻。对于 GCC 来说也不例外，我们实际上还有记录[理查德·斯托曼发送的文本](https://gcc.gnu.org/wiki/History)，介绍了
    87 年的 GCC beta 版。
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This feels like computer archeology to me.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我感觉像是进行计算机考古。
- en: 'Today, GCC is more than just a C compiler. It’s a Compiler Collection, and
    it supports these programming languages: C, C++, Objective-C, Objective-C++, Fortran,
    Ada, D, and Go. It has support for the most platforms, and the most CPU architectures
    out of all compilers today, and is still being actively developed.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，GCC 不仅仅是一个 C 编译器。它是一个编译器集合，支持这些编程语言：C、C++、Objective-C、Objective-C++、Fortran、Ada、D
    和 Go。它支持最多的平台和最多的 CPU 架构，是当今所有编译器中仍在积极开发的。
- en: But GCC isn’t the only cross platform industrial grade compiler on the block.
    LLVM provides a great experience as well, and benefits from decades of hindsight
    in compiler construction. It was created by Vikram Adve and his PhD student Chris
    Lattner at the [University of Illinois at Urbana–Champaign](https://en.wikipedia.org/wiki/University_of_Illinois_at_Urbana%E2%80%93Champaign)
    in 2000\. It started as a research project in December while Chris was on winter
    break. Over the course of the next year, Chris and Vikram continued to work on
    the compiler before publishing their first paper on it titled, [Automatic Pool
    Allocation for Disjoint Data Structures](https://llvm.org/pubs/2002-06-AutomaticPoolAllocation.pdf).
    Though they didn’t know it at the time, they were making history. A lot had happened
    in the field of compilers by the early 2000s, and this allowed LLVM to enjoy many
    benefits.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但 GCC 并不是唯一的跨平台工业级编译器。LLVM 也提供了很好的体验，并受益于编译器构建几十年的经验。它是由 Vikram Adve 和他的博士生
    Chris Lattner 在 2000 年在[伊利诺伊大学厄巴纳-香槟分校](https://en.wikipedia.org/wiki/University_of_Illinois_at_Urbana%E2%80%93Champaign)创建的。它是在
    Chris 放寒假的 12 月开始的研究项目。在接下来的一年里，Chris 和 Vikram 继续致力于该编译器的开发，然后发表了他们的第一篇关于它的论文，标题为
    [Automatic Pool Allocation for Disjoint Data Structures](https://llvm.org/pubs/2002-06-AutomaticPoolAllocation.pdf)。尽管当时他们不知道，但他们正在创造历史。到了
    2000 年代初期，编译器领域发生了很多变化，这使得 LLVM 能够享受到许多好处。
- en: '**LLVM IR**'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**LLVM IR**'
- en: Front-end developers only need to understand LLVM IR, its workings, and invariants,
    making it easy to create new front ends for LLVM. Unlike other compilers like
    GCC, LLVM IR is self-contained, eliminating the need to manipulate complex data
    structures and global variables from other parts of the compiler
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端开发人员只需理解 LLVM IR，其工作原理和不变性，就可以轻松创建新的 LLVM 前端。与其他编译器（如 GCC）不同，LLVM IR 是自包含的，无需从编译器的其他部分操作复杂的数据结构和全局变量
- en: '**Modular Library-Based Design**'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**模块化基于库的设计**'
- en: The LLVM infrastructure consists of loosely coupled libraries instead of a monolith,
    including the optimizer, allowing developers to choose and order optimization
    passes for their specific needs. Only the necessary optimization passes are linked
    into the final application, optimizing compile times and avoiding unnecessary
    bloat
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: LLVM 基础架构由松散耦合的库组成，而不是单块，包括优化器，允许开发人员为其特定需求选择和排序优化传递。只有必要的优化传递才会链接到最终应用程序中，优化编译时间并避免不必要的膨胀
- en: '**Retargetable Code Generator**'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可重新定位的代码生成器**'
- en: The LLVM code generator transforms LLVM IR into target specific machine code.
    It employs a modular approach with individual passes for instruction selection,
    register allocation, scheduling, code layout optimization, and assembly emission.
    This flexibility enables target-specific optimizations, such as register pressure
    reduction for x86 and latency optimization for PowerPC, without requiring a complete
    code generator rewrite
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: LLVM 代码生成器将 LLVM IR 转换为特定目标的机器代码。它采用模块化方法，为指令选择、寄存器分配、调度、代码布局优化和汇编发射提供单独的传递。这种灵活性使得可以针对特定目标进行优化，例如为
    x86 减少寄存器压力和为 PowerPC 优化延迟，而无需完全重写代码生成器
- en: And lastly it’s 13 years younger than GCC, and benefits from not having to support
    as many architectures. This means that this, along with LLVM’s modular natures,
    allows LLVM’s code base to be about 3.5 times smaller than GCC (5million vs 1.6
    million lines of code). While these numbers might seem staggering, it pales in
    comparison to the mighty Ford F150 which has 150 million lines of code much of
    which is compiled with LLVM and GCC I’m sure.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，它比 GCC 年轻 13 年，并且受益于不必支持太多架构。这意味着这个，以及 LLVM 的模块化特性，使得 LLVM 的代码库约为 GCC 的 3.5
    倍小（500 万 vs 160 万行代码）。尽管这些数字看起来令人震惊，但与拥有 1.5 亿行代码的强大的 Ford F150 相比，它显得微不足道，其中很多代码都是使用
    LLVM 和 GCC 编译的，我相信。
- en: But while LLVM might be newer, it still faces stiff competition from GCC. Both
    GCC and LLVM support many modern C and C++ standards, and they both have a large
    suite of tools for working with their output. In the great article by Jeremy Bennett
    titled [How Much Does a Compiler Cost?](https://www.embecosm.com/2018/02/26/how-much-does-a-compiler-cost/)
    We see the many tools that these compilers bring, as well as the hundreds of thousands
    of lines of code it takes to create the supporting software suite.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 但尽管 LLVM 可能较新，但仍然面临来自 GCC 的激烈竞争。GCC 和 LLVM 都支持许多现代 C 和 C++ 标准，并且它们都有大量的工具套件用于处理它们的输出。在
    Jeremy Bennett 撰写的一篇名为 [一个编译器成本多少钱？](https://www.embecosm.com/2018/02/26/how-much-does-a-compiler-cost/)
    的精彩文章中，我们看到了这些编译器带来的许多工具，以及创建支持软件套件所需的数十万行代码。
- en: '**Debugger:** Either GDB (800k lines) or LLDB (600k lines)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试器：** 可选 GDB（800k 行）或 LLDB（600k 行）'
- en: '**Linker:** GNU ld (160k lines), gold (140k lines) or lld (60k lines)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链接器：** GNU ld（160k 行），gold（140k 行）或 lld（60k 行）'
- en: '**Assembler/disassembler:** GNU gas (850k lines) or the built in LLVM assembler'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**汇编器/反汇编器：** GNU gas（850k 行）或内置 LLVM 汇编器'
- en: '**Binary utilities:** GNU (90k lines) and/or LLVM (included in main LLVM source)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**二进制实用程序：** GNU（90k 行）和/或 LLVM（包含在主 LLVM 源代码中）'
- en: '**Emulation library:** libgcc (included in GCC source) or CompilerRT (340k
    lines)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟库：** libgcc（包含在 GCC 源代码中）或 CompilerRT（340k 行）'
- en: '**Standard C library:** newlib (850k lines), glibc (1.2M lines), musl (82k
    lines) or uClibC-ng (251k lines)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准 C 库：** newlib（850k 行），glibc（1.2M 行），musl（82k 行）或 uClibC-ng（251k 行）'
- en: In Matt Godbolt’s CppCon talk titled *What Has My Compiler Done for Me Lately?
    Unbolting the Compiler's Lid*, we see how many of the clever optimization tricks
    we used to need to do in code, can be done at the compiler level. This allows
    us to have simpler and easier to maintain code, without making tradeoffs on performance
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Matt Godbolt 的 CppCon 演讲中，标题为 *我的编译器最近为我做了什么？解开编译器的盖子*，我们看到我们曾经需要在代码中执行的许多巧妙优化技巧可以在编译器级别完成。这使我们能够拥有更简单、更易于维护的代码，而不会在性能上做出妥协
- en: I’m grateful for all the work compilers maintainers have put in optimizing our
    programs. We’ve come a long way to get here, and have built upon decades of hard
    won programming experience to come up with the robust solutions we have today.
    As our programming languages continue to evolve, our compilers will be right their
    with us, tirelessly optimizing our code and catching bugs, so we can get the best
    performance we can
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我很感激编译器维护者为优化我们的程序所付出的所有工作。我们已经走过了很长的路程，并且在几十年的艰苦编程经验基础上建立了我们今天拥有的强大解决方案。随着我们的编程语言不断发展，我们的编译器也将与我们一起，不知疲倦地优化我们的代码并捕捉错误，以便我们能够获得最佳性能。
- en: Hi 👋 my name is Diego Crespo and I like to talk about technology, niche programming
    languages, and AI. I have a [Twitter](https://twitter.com/deusinmach) and a [Mastodon](https://mastodon.social/deck/@DiegoCrespo),
    if you’d like to follow me on other social media platforms. If you liked the article,
    consider liking and subscribing. And if you haven’t why not check out another
    article of mine listed below! Thank you for reading and giving me a little of
    your valuable time. A.M.D.G
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨 👋 我的名字是迭戈·克雷斯波，我喜欢谈论技术、小众编程语言和人工智能。我有一个[Twitter](https://twitter.com/deusinmach)和一个[Mastodon](https://mastodon.social/deck/@DiegoCrespo)，如果你想在其他社交媒体平台上关注我。如果你喜欢这篇文章，请考虑点赞和订阅。如果你还没有，为什么不看看我下面列出的另一篇文章呢！谢谢你花时间阅读并给予我宝贵的时间。A.M.D.G
- en: '[Share](https://www.deusinmachina.net/p/compiling-history-a-brief-tour-of?utm_source=substack&utm_medium=email&utm_content=share&action=share)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[分享](https://www.deusinmachina.net/p/compiling-history-a-brief-tour-of?utm_source=substack&utm_medium=email&utm_content=share&action=share)'
- en: '[Share Deus In Machina](https://www.deusinmachina.net/?utm_source=substack&utm_medium=email&utm_content=share&action=share)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[分享 Deus In Machina](https://www.deusinmachina.net/?utm_source=substack&utm_medium=email&utm_content=share&action=share)'
