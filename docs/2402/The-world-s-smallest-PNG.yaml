- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:34:10'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:34:10
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The world's smallest PNG
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 世界上最小的 PNG
- en: 来源：[https://evanhahn.com/worlds-smallest-png/](https://evanhahn.com/worlds-smallest-png/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://evanhahn.com/worlds-smallest-png/](https://evanhahn.com/worlds-smallest-png/)
- en: <main class="content-page">
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main class="content-page">
- en: The world's smallest PNG
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 世界上最小的 PNG
- en: by [Evan Hahn](/)
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由 [Evan Hahn](/) 编写
- en: ', updated'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: ，更新
- en: Jan 21, 2024
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 2024 年 1 月 21 日
- en: (originally posted
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: （原始发布
- en: Jan 4, 2024
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 2024 年 1 月 4 日
- en: )
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: 'The smallest PNG file is 67 bytes. It’s a single black pixel. Here’s what it
    looks like, zoomed in 200×:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最小的 PNG 文件是 67 字节。它是一个单独的黑色像素。这是它在放大 200× 后的样子：
- en: '![A single black pixel.](img/d5beb8f4f56c3c6b2f3420d6d28cd29f.png)'
  id: totrans-split-15
  prefs: []
  type: TYPE_IMG
  zh: '![一个单独的黑色像素。](img/d5beb8f4f56c3c6b2f3420d6d28cd29f.png)'
- en: Wow, what a beauty.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，多么漂亮。
- en: 'This file has four sections:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件共有四个部分：
- en: 'The PNG signature, the same for every PNG: 8 bytes'
  id: totrans-split-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PNG 签名，每个 PNG 都一样：8 字节
- en: 'The image’s metadata, which includes its dimensions: 25 bytes'
  id: totrans-split-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图像的元数据，包括其尺寸：25 字节
- en: 'The image’s pixel data: 22 bytes'
  id: totrans-split-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图像的图元数据：22 字节
- en: 'An “end of image” marker: 12 bytes'
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “图像结束”标记：12 字节
- en: The rest of this post describes this file in more detail and tries to explain
    how PNGs work along the way.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此后的内容将更详细地描述这个文件，并试图解释 PNG 的工作原理。
- en: There’s a big twist at the end, if that excites you. But I hope you’re just
    excited to learn about PNGs.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 结尾有一个大的转折，如果你感兴趣的话。但我希望你只是对学习 PNG 感兴趣。
- en: 'Part 1: the PNG signature'
  id: totrans-split-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一部分：PNG 签名
- en: 'Every single PNG, including this one, starts with the same 8 bytes. Encoded
    in hex, those bytes are:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每个单独的 PNG，包括这个，都以相同的 8 字节开始。以十六进制编码，这些字节是：
- en: '[PRE0]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is called the [**PNG signature**](https://www.w3.org/TR/2022/WD-png-3-20221025/#5PNG-file-signature).
    Try doing a hex dump on any PNG and you’ll see that it starts with these bytes.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为 [**PNG 签名**](https://www.w3.org/TR/2022/WD-png-3-20221025/#5PNG-file-signature)。尝试对任何
    PNG 进行十六进制转储，你会看到它以这些字节开头。
- en: PNG decoders use the signature to ensure that they’re reading a PNG image. Typically,
    they reject the file if it doesn’t start with the signature. Data can get corrupted
    in various ways (ever had a file with the wrong extension?) and this helps address
    that.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: PNG 解码器使用签名来确保它们正在读取 PNG 图像。通常，如果文件不以此签名开头，它们会拒绝该文件。数据可能以各种方式损坏（曾经遇到文件扩展名错误吗？），这有助于解决这个问题。
- en: 'Fun fact: if you decode these bytes as ASCII, you’ll see the letters “PNG”
    in there:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的事实：如果你将这些字节解码为 ASCII，你会在里面看到字母“PNG”：
- en: '[PRE1]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So that’s the first 8 bytes. One part done! Here’s our “checklist”:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了第一部分！这是我们的“检查清单”：
- en: ~~PNG signature~~
  id: totrans-split-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ~~PNG 签名~~
- en: Image metadata chunk
  id: totrans-split-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图像元数据块
- en: Pixel data chunk
  id: totrans-split-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图元数据块
- en: “End of image” chunk
  id: totrans-split-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “图像结束”块
- en: What about the rest?
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 其余部分呢？
- en: The next part of the PNG is the image metadata, which is one of several **chunks**.
    What’s a chunk?
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: PNG 的下一部分是图像元数据，它是几个**块**之一。什么是块？
- en: Quick intro to chunks
  id: totrans-split-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 快速介绍块
- en: Other than the PNG signature at the start, PNGs are made up of chunks.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 除了开始的 PNG 签名外，PNG 由块组成。
- en: 'Chunks have two logical pieces: a **type** and some **data bytes**. Types are
    things like “image header” or “text metadata”. The data depends on the type—the
    text metadata chunk is encoded differently from the image header chunk.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 块有两个逻辑部分：一个**类型**和一些**数据字节**。类型可以是“图像头”或“文本元数据”之类的内容。数据取决于类型 —— 文本元数据块与图像头块的编码方式不同。
- en: 'These logical pieces are encoded with [four fields](https://www.w3.org/TR/2022/WD-png-3-20221025/#5Chunk-layout).
    These fields are always in the same order for every chunk. They are:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些逻辑部分用 [四个字段](https://www.w3.org/TR/2022/WD-png-3-20221025/#5Chunk-layout)
    编码。这些字段在每个块中始终以相同顺序出现。它们是：
- en: '**Length**: the number of bytes in the chunk’s data field (field #3 below).
    Encoded as a 4-byte integer.'
  id: totrans-split-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**长度**：块数据字段中的字节数（下面的第 3 个字段）。编码为 4 字节整数。'
- en: '**Chunk type**: the type of chunk this is. There are lots of different chunk
    types. Encoded as a 4-byte ASCII string, such as “IHDR” for “image header” or
    “tEXt” for “text metadata”.'
  id: totrans-split-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**块类型**：这是块的类型。有许多不同的块类型。编码为 4 字节 ASCII 字符串，例如“IHDR”代表“图像头”或“tEXt”代表“文本元数据”。'
- en: '**Data**: the data for the chunk. See the “length” field for how many bytes
    there will be. Varies based on the chunk type. For example, the IHDR chunk encodes
    the image’s dimensions. May be empty, but usually isn’t.'
  id: totrans-split-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据**：块的数据。查看“长度”字段以了解将有多少字节。根据块类型的不同而变化。可能为空，但通常不会。'
- en: '**Checksum**: a checksum for the rest of the chunk, to make sure no data was
    corrupted. 4 bytes.'
  id: totrans-split-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**校验和**：对其余块数据进行校验，确保数据没有损坏。4 字节。'
- en: As you can see, each chunk is a minimum of 12 bytes long (4 for the length,
    4 for the type, and 4 for the checksum).
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，每个块至少需要12字节长（4字节长度，4字节类型和4字节校验和）。
- en: Note that the “length” field is the size of the “data” field, *not* the entire
    chunk. If you want to know the whole size of the chunk, just add 12—4 bytes for
    the length, 4 bytes for the type, and 4 bytes for the checksum.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意“长度”字段是“数据”字段的大小，*而不是*整个数据块。如果想知道整个数据块的大小，只需加上12——4字节长度，4字节类型和4字节校验和。
- en: You have some wiggle room but chunks have a specific order. For example, the
    image metadata chunk has to appear before the pixel data chunk. Once you reach
    the “image is done” chunk, the PNG is done.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您有一些余地，但数据块有特定的顺序。例如，图像元数据块必须出现在像素数据块之前。一旦达到“图像完成”块，PNG就完成了。
- en: Our tiny PNG will have just three of these chunks.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的小型PNG将只有三个这些数据块。
- en: The first chunk of every PNG, including ours, is of type **IHDR**, short for
    [“image header”](https://www.w3.org/TR/2022/WD-png-3-20221025/#11IHDR).
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 每个PNG的第一个数据块，包括我们的，类型为**IHDR**，简称为[“图像头”](https://www.w3.org/TR/2022/WD-png-3-20221025/#11IHDR)。
- en: Each chunk starts with the **length** of the data in that chunk.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数据块以数据的**长度**开头。
- en: 'The IHDR chunk always has 13 bytes of associated data, as we’ll see in a moment.
    13 is `0D` in hex, which gets encoded like this:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: IHDR数据块总是有13字节的相关数据，我们稍后会看到。13在十六进制中为`0D`，编码如下：
- en: '[PRE2]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The **chunk type** is next. This is another four bytes. “IHDR” is encoded as:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是**数据块类型**。这是另外四个字节。"IHDR"被编码为：
- en: '[PRE3]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is just ASCII encoding. Chunk types are made up of ASCII letters. [The
    capitalization of each letter is significant.](https://www.w3.org/TR/2022/WD-png-3-20221025/#5Chunk-naming-conventions)
    For example, the first letter is capitalized which means it’s a required chunk.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是ASCII编码。数据块类型由ASCII字母组成。[每个字母的大写都很重要。](https://www.w3.org/TR/2022/WD-png-3-20221025/#5Chunk-naming-conventions)例如，第一个字母大写意味着它是一个必需的数据块。
- en: 'Next, the chunk’s **data**. IHDR’s data happens to be 13 total bytes, arranged
    as follows:'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是数据块的**数据**。IHDR的数据恰好是13个字节，排列如下：
- en: The first eight bytes encode the image’s width and height. Because this is a
    1×1 image, that’s encoded as `00 00 00 01 00 00 00 01`.
  id: totrans-split-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前八字节编码图像的宽度和高度。因为这是1×1图像，编码为`00 00 00 01 00 00 00 01`。
- en: The next two bytes are the [bit depth](https://www.w3.org/TR/2022/WD-png-3-20221025/#3bitDepth)
    and [color type](https://www.w3.org/TR/2022/WD-png-3-20221025/#6Colour-values).
  id: totrans-split-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来的两个字节是[位深度](https://www.w3.org/TR/2022/WD-png-3-20221025/#3bitDepth)和[颜色类型](https://www.w3.org/TR/2022/WD-png-3-20221025/#6Colour-values)。
- en: These values are probably the most confusing part of this PNG.
  id: totrans-split-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些值可能是这个PNG中最令人困惑的部分。
- en: There are five possible color types. Our image is black-and-white so we use
    the “greyscale” color type (encoded as `00`). If our image had color, we might
    use the “truecolor” type (encoded with `02`). There are three other color types
    which we don’t need today, but you can [read more about them in the PNG specification](https://www.w3.org/TR/2022/WD-png-3-20221025/#4Concepts.PNGImage).
  id: totrans-split-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有五种可能的颜色类型。我们的图像是黑白的，所以使用“灰度”颜色类型（编码为`00`）。如果我们的图像有颜色，可能会使用“真彩色”类型（使用`02`编码）。还有三种其他颜色类型，今天我们用不到，但您可以[在PNG规范中了解更多信息](https://www.w3.org/TR/2022/WD-png-3-20221025/#4Concepts.PNGImage)。
- en: Once you’ve picked a color type, you need to pick a bit depth. The bit depth
    depends on the color type, but usually means the number of bits per color channel
    in an image. For example, hex colors like `#FE9802` have a bit depth of eight—eight
    bits for red, eight bits for green, and eight bits for blue. Our all-black image
    doesn’t need all that&mldr;we only need *one* bit! The pixel is either completely
    black (`0`) or completely white (`1`)—in our case, it’s completely black.
  id: totrans-split-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦选择了颜色类型，就需要选择位深度。位深度取决于颜色类型，但通常表示图像中每个颜色通道的位数。例如，像`#FE9802`这样的十六进制颜色有8位深度——红色8位，绿色8位，蓝色8位。我们的全黑图像不需要所有这些……我们只需要*一*位！像素要么完全黑（`0`），要么完全白（`1`）——在我们的情况下，完全黑。
- en: If we picked a more “expressive” color type and bit depth, we could make the
    same 1×1 image visually, but the file could be bigger because there could be more
    bits per pixel that we don’t actually need. For example, if we used the “truecolor”
    type and 16 bits per channel, each pixel would require 48 bits instead of just
    one—not necessary to encode “completely black”.
  id: totrans-split-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们选择了更“表现力”的颜色类型和位深度，我们可以在视觉上制作相同的1×1图像，但文件可能会更大，因为每个像素可能需要更多的位数，但实际上我们并不需要。例如，如果我们使用“真彩色”类型和每通道16位，每个像素将需要48位，而不是只需一个编码“完全黑色”的像素。
- en: With bit depth of 1 and a color type of 0, we encode these two values with `00
    01`.
  id: totrans-split-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用 1 位深度和颜色类型 0 编码这两个值，使用 `00 01`。
- en: The next byte is the [compression method](https://www.w3.org/TR/2022/WD-png-3-20221025/#10CompressionCM0).
    All PNGs set this to `00` for now. This is here just in case they want to add
    another compression method later. As far as I know, nobody has.
  id: totrans-split-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来的字节是 [压缩方法](https://www.w3.org/TR/2022/WD-png-3-20221025/#10CompressionCM0)。目前所有的
    PNG 都将其设置为 `00`。这里只是以防万一他们想要添加另一种压缩方法。据我所知，目前还没有人这么做。
- en: Same story for the [filter method](https://www.w3.org/TR/2022/WD-png-3-20221025/#3filter).
    It’s always `00`.
  id: totrans-split-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 [过滤方法](https://www.w3.org/TR/2022/WD-png-3-20221025/#3filter) 也是同样的情况，始终为
    `00`。
- en: The last part of the chunk’s data is the [interlace method](https://www.w3.org/TR/2022/WD-png-3-20221025/#8InterlaceMethods).
    PNGs support progressive decoding which allows images to be partly rendered as
    they download. We aren’t going to use that feature so we set this to `00`.
  id: totrans-split-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 块数据的最后一部分是 [交错方法](https://www.w3.org/TR/2022/WD-png-3-20221025/#8InterlaceMethods)。PNG
    支持渐进解码，允许在下载过程中部分渲染图像。我们不打算使用此功能，因此将其设置为 `00`。
- en: 'Finally, every chunk ends with a four-byte **checksum**. It uses [a common
    checksum function](https://www.w3.org/TR/2022/WD-png-3-20221025/#5CRC-algorithm)
    called CRC32, and uses the rest of the chunk as an input. Computing that checksum
    gives us the following bytes:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，每个块都以四字节的 **校验和** 结束。它使用 [常见的校验和函数](https://www.w3.org/TR/2022/WD-png-3-20221025/#5CRC-algorithm)
    CRC32，并以块的其余部分作为输入。计算该校验和得到以下字节：
- en: '[PRE4]'
  id: totrans-split-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'All together, here’s the whole IHDR chunk:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，这就是整个 IHDR 块：
- en: '| Bytes | What? |'
  id: totrans-split-71
  prefs: []
  type: TYPE_TB
  zh: '| 字节 | 什么？ |'
- en: '| --- | --- |'
  id: totrans-split-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `00 00 00 0D` | data length of 13 bytes |'
  id: totrans-split-73
  prefs: []
  type: TYPE_TB
  zh: '| `00 00 00 0D` | 数据长度为 13 字节 |'
- en: '| `49 48 44 52` | “IHDR” as ASCII |'
  id: totrans-split-74
  prefs: []
  type: TYPE_TB
  zh: '| `49 48 44 52` | “IHDR” 的 ASCII 码 |'
- en: '| `00 00 00 01` | width |'
  id: totrans-split-75
  prefs: []
  type: TYPE_TB
  zh: '| `00 00 00 01` | 宽度 |'
- en: '| `00 00 00 01` | height |'
  id: totrans-split-76
  prefs: []
  type: TYPE_TB
  zh: '| `00 00 00 01` | 高度 |'
- en: '| `01` | bit depth |'
  id: totrans-split-77
  prefs: []
  type: TYPE_TB
  zh: '| `01` | 位深度 |'
- en: '| `00` | color type |'
  id: totrans-split-78
  prefs: []
  type: TYPE_TB
  zh: '| `00` | 颜色类型 |'
- en: '| `00` | compression method |'
  id: totrans-split-79
  prefs: []
  type: TYPE_TB
  zh: '| `00` | 压缩方法 |'
- en: '| `00` | filter method |'
  id: totrans-split-80
  prefs: []
  type: TYPE_TB
  zh: '| `00` | 过滤器方法 |'
- en: '| `00` | interlace method |'
  id: totrans-split-81
  prefs: []
  type: TYPE_TB
  zh: '| `00` | 交错方法 |'
- en: '| `37 6E F9 24` | checksum |'
  id: totrans-split-82
  prefs: []
  type: TYPE_TB
  zh: '| `37 6E F9 24` | 校验和 |'
- en: 'So that’s our first chunk! Let’s take another look at our checklist:'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的第一个块！让我们再次检查我们的清单：
- en: ~~PNG signature~~
  id: totrans-split-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ~~PNG 签名~~
- en: ~~Image metadata chunk~~
  id: totrans-split-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ~~图像元数据块~~
- en: Pixel data chunk
  id: totrans-split-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像素数据块
- en: “End of image” chunk
  id: totrans-split-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “图像结束”块
- en: Two more chunks to go—pixel data is next.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 还有两个块要处理 —— 接下来是像素数据。
- en: 'Part 3: pixel data chunk'
  id: totrans-split-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三部分：像素数据块
- en: Our next chunk is **IDAT**, short for [“image data”](https://www.w3.org/TR/2022/WD-png-3-20221025/#11IDAT).
    This is where the actual pixels are encoded&mldr;or just one pixel, in our case.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个块是 **IDAT**，简称为 [“图像数据”](https://www.w3.org/TR/2022/WD-png-3-20221025/#11IDAT)。这里是实际像素编码的地方&mldr;或者在我们的情况下，仅有一个像素。
- en: 'Remember that each chunk has four parts: the data’s *length*, the *chunk type*,
    the *data*, and a *checksum*.'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，每个块有四个部分：数据的 *长度*，*块类型*，*数据* 和 *校验和*。
- en: 'This chunk will have 10 bytes of data. We’ll talk about *what* that data is
    shortly, but I promise it’s 10 bytes. Let’s encode that length:'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 该块将包含 10 个字节的数据。我们很快会讨论这些数据的*内容*，但我保证它是 10 个字节。让我们编码这个长度：
- en: '[PRE5]'
  id: totrans-split-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, let’s encode “IDAT” for the chunk type:'
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们为块类型编码“IDAT”：
- en: '[PRE6]'
  id: totrans-split-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Again, this is just ASCII, and I’m showing the hex-encoded values.
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这只是 ASCII 码，我展示的是十六进制编码的值。
- en: 'Now for the interesting part: the image data.'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是有趣的部分：图像数据。
- en: 'First step: uncompressed pixels'
  id: totrans-split-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一步：未压缩像素
- en: Image data is encoded in a series of [“scanlines”](https://www.w3.org/TR/2022/WD-png-3-20221025/#3scanline),
    and then compressed.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图像数据以一系列称为 [“扫描线”](https://www.w3.org/TR/2022/WD-png-3-20221025/#3scanline)
    的形式编码，然后进行压缩。
- en: A scanline represents a horizontal line of pixels. For example, a 123×456 image
    has 456 scanlines. In our case, we have just one scanline, because our image is
    just one pixel tall.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一个扫描线代表一条水平像素线。例如，一个 123×456 的图像有 456 条扫描线。在我们的例子中，由于我们的图像只有一个像素高，所以只有一条扫描线。
- en: Scanlines start with something called a [filter type](https://www.w3.org/TR/2022/WD-png-3-20221025/#9Filter-types)
    which can improve compression, depending on your image. Our image is so small
    that this is irrelevant, so we use filter type 0, or “None”.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描线以一种称为 [过滤器类型](https://www.w3.org/TR/2022/WD-png-3-20221025/#9Filter-types)
    开始，这可以根据您的图像改善压缩。我们的图像如此之小，以至于这个过程无关紧要，因此我们使用过滤器类型 0，或“无”。
- en: After the filter type, each pixel is encoded with one or more bits, depending
    on the bit depth. In our case, we just need one bit per pixel—recall that we have
    a bit depth of 1; all black or all white.
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在过滤器类型之后，每个像素根据其位深度编码为一个或多个位。在我们的情况下，每个像素只需一位 —— 记得我们的位深度是 1；全黑或全白。
- en: If your pixel data doesn’t line up with a byte boundary—in other words, if it’s
    not a multiple of 8 bits—you pad the end of your scanline with zeroes. That’s
    true in our case, so we add seven padding bits to fill out a byte.
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的像素数据与字节边界不对齐——换句话说，它不是 8 位的倍数——你需要在扫描线的末尾填充零。在我们的情况下是这样，所以我们添加了七个填充位来填充一个字节。
- en: 'Putting that together (a zero byte to start the scanline, the single zero bit,
    and seven zero padding bits), our single scanline is:'
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 把这些放在一起（以一个零字节开始扫描线，一个单零位和七个零填充位），我们的单个扫描线是：
- en: '[PRE7]'
  id: totrans-split-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now it’s time to “compress” the data.
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是“压缩”数据的时候了。
- en: 'Second step: “compression”'
  id: totrans-split-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二步： “压缩”
- en: Next, we compress the scanline data&mldr;well, not quite.
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们压缩扫描线数据&mldr;嗯，不完全是。
- en: More accurately, we run it through a compression algorithm. Most of the time,
    compression algorithms produce smaller outputs—that’s the whole point! But sometimes,
    “compressing” tiny inputs actually produces *bigger* outputs because of some small
    overhead. Unfortunately for us, that’s what happens here. But the PNG file format
    makes us do it.
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: 更准确地说，我们通过压缩算法运行它。大多数情况下，压缩算法会生成较小的输出，这就是它的全部目的！但有时，“压缩”微小的输入实际上会产生*更大*的输出，因为有些小的开销。不幸的是，对我们来说，这里就是这种情况。但
    PNG 文件格式要求我们这么做。
- en: PNG image data is encoded in [the zlib format](https://www.rfc-editor.org/rfc/rfc1950)
    using the [DEFLATE compression algorithm](https://zlib.net/feldspar.html). DEFLATE
    is also used with [gzip](https://en.wikipedia.org/wiki/Gzip) and [ZIP](https://en.wikipedia.org/wiki/ZIP_(file_format)),
    two very popular compression formats.
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: PNG 图像数据使用 [zlib 格式](https://www.rfc-editor.org/rfc/rfc1950) 进行编码，采用 [DEFLATE
    压缩算法](https://zlib.net/feldspar.html)。DEFLATE 也被应用于 [gzip](https://en.wikipedia.org/wiki/Gzip)
    和 [ZIP](https://en.wikipedia.org/wiki/ZIP_(file_format))，这两种非常流行的压缩格式。
- en: I won’t go in depth on DEFLATE here (in part because I am not an expert^(),
    but here’s what our chunk’s data contains:)
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里不会深入讲解 DEFLATE（部分因为我不是专家^()，但这是我们块数据包含的内容：
- en: 'The zlib header: 2 bytes'
  id: totrans-split-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: zlib 头部：2 bytes
- en: 'One compressed DEFLATE block that encodes two literal zeroes^(: 4 bytes)'
  id: totrans-split-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '一个压缩的 DEFLATE 块编码了两个字面上的零^(: 4 bytes)'
- en: 'The zlib checksum (this is separate from the PNG chunk checksum!): 4 bytes'
  id: totrans-split-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: zlib 校验和（这是与 PNG 块校验和分开的！）：4 bytes
- en: For more on how DEFLATE works, check out [“An Explanation of the DEFLATE Algorithm”](https://zlib.net/feldspar.html).
    I also recommend [infgen](https://github.com/madler/infgen/), a useful tool for
    inspecting DEFLATE streams.
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多 DEFLATE 的工作原理，请参阅 [“DEFLATE 算法解释”](https://zlib.net/feldspar.html)。我还推荐
    [infgen](https://github.com/madler/infgen/)，这是一个检查 DEFLATE 流的有用工具。
- en: 'All together, here are the ten data bytes:'
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这里有十个数据字节：
- en: '[PRE8]'
  id: totrans-split-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Again, unfortunate that we had to run our two-byte scanline through an algorithm
    that made it *five times bigger*, but PNG makes us do it!
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 再次不幸的是，我们不得不通过一个算法运行我们的两字节扫描线，使其*增加五倍*，但 PNG 强制我们这么做！
- en: With that, we can compute the PNG’s checksum field and finish off the chunk.
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们可以计算 PNG 的校验字段并完成块。
- en: '| Bytes | What? |'
  id: totrans-split-120
  prefs: []
  type: TYPE_TB
  zh: '| Bytes | What? |'
- en: '| --- | --- |'
  id: totrans-split-121
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `00 00 00 0A` | data length of 10 bytes |'
  id: totrans-split-122
  prefs: []
  type: TYPE_TB
  zh: '| `00 00 00 0A` | 数据长度为 10 字节 |'
- en: '| `49 44 41 54` | “IDAT” as ASCII |'
  id: totrans-split-123
  prefs: []
  type: TYPE_TB
  zh: '| `49 44 41 54` | ASCII 中的 “IDAT” |'
- en: '| `78 01` | zlib header |'
  id: totrans-split-124
  prefs: []
  type: TYPE_TB
  zh: '| `78 01` | zlib 头部 |'
- en: '| `63 60 00 00` | “compressed” DEFLATE block |'
  id: totrans-split-125
  prefs: []
  type: TYPE_TB
  zh: '| `63 60 00 00` | “压缩” DEFLATE 块 |'
- en: '| `00 02 00 01` | zlib checksum |'
  id: totrans-split-126
  prefs: []
  type: TYPE_TB
  zh: '| `00 02 00 01` | zlib 校验和 |'
- en: '| `73 75 01 18` | chunk checksum |'
  id: totrans-split-127
  prefs: []
  type: TYPE_TB
  zh: '| `73 75 01 18` | 块校验和 |'
- en: 'Just one more chunk to go! Taking a final look at our checklist before everything
    is crossed off:'
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
  zh: 再来最后一个块！在所有事项都完成前，我们再检查一遍清单：
- en: ~~PNG signature~~
  id: totrans-split-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ~~PNG 签名~~
- en: ~~Image metadata chunk~~
  id: totrans-split-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ~~图像元数据块~~
- en: ~~Pixel data chunk~~
  id: totrans-split-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ~~像素数据块~~
- en: “End of image” chunk
  id: totrans-split-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “图像结束”块
- en: Let’s finish this up.
  id: totrans-split-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们结束这个。
- en: 'Part 4: the end'
  id: totrans-split-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第四部分：结束
- en: 'Poetically, PNGs end like they begin: with a small number of constant bytes.'
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
  zh: 诗意地说，PNG 结束时和开始时一样：都有少量的常量字节。
- en: '**IEND** is the final chunk, short for [“image trailer”](https://www.w3.org/TR/2022/WD-png-3-20221025/#11IEND).'
  id: totrans-split-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**IEND** 是最终块，简称为 [“图像尾部”](https://www.w3.org/TR/2022/WD-png-3-20221025/#11IEND)。'
- en: 'The zero length is encoded with 4 zeroes:'
  id: totrans-split-137
  prefs: []
  type: TYPE_NORMAL
  zh: 零长度用四个零来编码：
- en: '[PRE9]'
  id: totrans-split-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '“IEND” is then encoded:'
  id: totrans-split-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后编码了 “IEND”：
- en: '[PRE10]'
  id: totrans-split-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There’s no data in IEND chunks, so we just move onto the checksum. Because
    everything else in the chunk is constant, this checksum is always the same:'
  id: totrans-split-141
  prefs: []
  type: TYPE_NORMAL
  zh: IEND 块中没有数据，所以我们直接转到校验和。因为块中的其他内容都是固定的，所以这个校验和总是相同的：
- en: '[PRE11]'
  id: totrans-split-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here’s the whole trailer chunk:'
  id: totrans-split-143
  prefs: []
  type: TYPE_NORMAL
  zh: 整个尾部块如下：
- en: '| Bytes | What? |'
  id: totrans-split-144
  prefs: []
  type: TYPE_TB
  zh: '| Bytes | What? |'
- en: '| --- | --- |'
  id: totrans-split-145
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `00 00 00 00` | data length of 0 |'
  id: totrans-split-146
  prefs: []
  type: TYPE_TB
  zh: '| `00 00 00 00` | 数据长度为 0 |'
- en: '| `49 45 4E 44` | “IEND” as ASCII |'
  id: totrans-split-147
  prefs: []
  type: TYPE_TB
  zh: '| `49 45 4E 44` | ASCII 中的 “IEND” |'
- en: '| `AE 42 60 82` | checksum |'
  id: totrans-split-148
  prefs: []
  type: TYPE_TB
  zh: '| `AE 42 60 82` | 校验和 |'
- en: And our PNG is done!
  id: totrans-split-149
  prefs: []
  type: TYPE_NORMAL
  zh: PNG 完成了！
- en: Admiring our work
  id: totrans-split-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 欣赏我们的工作
- en: 'Here it is one more time, scaled up 200×:'
  id: totrans-split-151
  prefs: []
  type: TYPE_NORMAL
  zh: 再次展示，放大至200×：
- en: '![A single black pixel.](img/d5beb8f4f56c3c6b2f3420d6d28cd29f.png)'
  id: totrans-split-152
  prefs: []
  type: TYPE_IMG
  zh: '![一个单一的黑色像素。](img/d5beb8f4f56c3c6b2f3420d6d28cd29f.png)'
- en: Beautiful. It starts with the classic PNG signature, follows up with a bit of
    metadata, “compresses” the pixel data, and signs off with an empty chunk.
  id: totrans-split-153
  prefs: []
  type: TYPE_NORMAL
  zh: 美丽。 它以经典的PNG签名开头，接着是一些元数据，“压缩”像素数据，最后以空块签名结束。
- en: And that’s the world’s smallest PNG!
  id: totrans-split-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是世界上最小的PNG图像了！
- en: '&mldr;or is it?'
  id: totrans-split-155
  prefs: []
  type: TYPE_NORMAL
  zh: '&mldr;还是吗？'
- en: 'The twist: there are lots of champions'
  id: totrans-split-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转折点：有很多冠军
- en: 'Throughout this post, I’ve said that this is the world’s smallest PNG. But
    that’s not quite true: it’s *tied* for first. There are several “world’s smallest
    PNGs”!'
  id: totrans-split-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我说这是世界上最小的PNG。 但事实并非完全如此：它与第一名并列。 有几个“世界上最小的PNG”！
- en: '*As long as we encode all pixel data in a single byte, we can tie for the world’s
    smallest PNG.*'
  id: totrans-split-158
  prefs: []
  type: TYPE_NORMAL
  zh: '*只要我们将所有像素数据编码在一个字节中，我们就可以并列世界上最小的PNG。*'
- en: 'For example, you could encode this 8×1 black image, which is also 67 bytes:'
  id: totrans-split-159
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以编码这个8×1的黑色图像，它也是67字节：
- en: '![A black rectangle, 8 pixels wide and 1 pixel tall.](img/b95743e9e2abd57ea0ef739103e429ff.png)'
  id: totrans-split-160
  prefs: []
  type: TYPE_IMG
  zh: '![一个8像素宽和1像素高的黑色矩形。](img/b95743e9e2abd57ea0ef739103e429ff.png)'
- en: This works because we use all eight bits are used to encode pixel data.
  id: totrans-split-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这有效，因为我们使用了所有八个位来编码像素数据。
- en: 'With our 1×1 image, recall that seven bits were effectively “wasted” on padding.
    Here’s basically what happened:'
  id: totrans-split-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的1×1图像中，回想一下七个位被有效地“浪费”在填充上。基本上发生了以下情况：
- en: '| Bits | What? |'
  id: totrans-split-163
  prefs: []
  type: TYPE_TB
  zh: '| 位 | 什么？ |'
- en: '| --- | --- |'
  id: totrans-split-164
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `0` | a black pixel |'
  id: totrans-split-165
  prefs: []
  type: TYPE_TB
  zh: '| `0` | 一个黑色像素 |'
- en: '| `0000000` | padding |'
  id: totrans-split-166
  prefs: []
  type: TYPE_TB
  zh: '| `0000000` | 填充 |'
- en: 'An 8×1 image can encode eight black pixels like so:'
  id: totrans-split-167
  prefs: []
  type: TYPE_NORMAL
  zh: 8×1图像可以像这样编码八个黑色像素：
- en: '| Bits | What? |'
  id: totrans-split-168
  prefs: []
  type: TYPE_TB
  zh: '| 位 | 什么？ |'
- en: '| --- | --- |'
  id: totrans-split-169
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `00000000` | eight black pixels |'
  id: totrans-split-170
  prefs: []
  type: TYPE_TB
  zh: '| `00000000` | 八个黑色像素 |'
- en: 'Instead of adding more pixels, you could also add more color resolution. Many
    grey colors can be encoded in a single byte, letting us tie for first. For example,
    this 1×1 grey pixel is also 67 bytes:'
  id: totrans-split-171
  prefs: []
  type: TYPE_NORMAL
  zh: 不是增加更多像素，而是增加更高的色彩分辨率。 许多灰色可以编码成单个字节，让我们并列第一。例如，这个1×1的灰色像素也是67字节：
- en: '![A single grey pixel.](img/ce106dba64972531222763ae1a52ed9a.png)'
  id: totrans-split-172
  prefs: []
  type: TYPE_IMG
  zh: '![一个单一的灰色像素。](img/ce106dba64972531222763ae1a52ed9a.png)'
- en: Again, this “uses up” the whole byte we have available, unlike our 1×1 image.
  id: totrans-split-173
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，“用完”我们有的整个字节，不像我们的1×1图像。
- en: 'For more on this, my former coworker Jordan Rose published [“The Biggest Smallest
    PNG”](https://belkadan.com/blog/2024/01/The-Biggest-Smallest-PNG/) in response
    to this post. It shows the biggest 67-byte PNG: a 1×2064 black line.'
  id: totrans-split-174
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，我的前同事乔丹·罗斯发表了[“最大的最小PNG”](https://belkadan.com/blog/2024/01/The-Biggest-Smallest-PNG/)
    作为对此文章的回应。它展示了最大的67字节PNG图像：一个1×2064的黑线。
- en: Summary
  id: totrans-split-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: PNGs start with a “signature”. The rest of the file is made up of chunks. Each
    chunk has a length, type, data, and checksum. Some chunks are always required,
    like the image header (IHDR) chunk.
  id: totrans-split-176
  prefs: []
  type: TYPE_NORMAL
  zh: PNG以“签名”开头。 文件的其余部分由块组成。 每个块都有长度、类型、数据和校验和。 像图像头（IHDR）块一样，一些块总是需要的。
- en: The smallest PNGs use the minimum number of chunks and the smallest possible
    data.
  id: totrans-split-177
  prefs: []
  type: TYPE_NORMAL
  zh: 最小的PNG使用最少的块和最小可能的数据。
- en: 'Our PNGs are made up of four parts:'
  id: totrans-split-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的PNG由四个部分组成：
- en: The constant PNG signature (8 bytes)
  id: totrans-split-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 固定的PNG签名（8字节）
- en: The IHDR chunk, containing metadata (25 bytes)
  id: totrans-split-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含元数据的IHDR块（25字节）
- en: The IDAT chunk, image pixel data (22 bytes)
  id: totrans-split-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IDAT块，图像像素数据（22字节）
- en: The IEND chunk, an image trailer (12 bytes)
  id: totrans-split-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IEND块，图像尾部（12字节）
- en: If you’re interested in learning more about PNGs interactively, I built [PNG
    Chunk Explorer](https://evanhahn.gitlab.io/png-explorer/), which lets you analyze
    PNGs. Try uploading your own images to see what they’re made of! (It doesn’t work
    well on mobile, apologies.)
  id: totrans-split-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣以互动方式了解更多有关PNG的信息，我制作了[PNG块浏览器](https://evanhahn.gitlab.io/png-explorer/)，它可以让您分析PNG图像。尝试上传您自己的图像，看看它们由什么组成！（对于移动设备的支持不是很好，抱歉。）
- en: I also built [Single Color Image](https://singlecolorimage.com/), which generates
    monochromatic PNGs of arbitrary sizes. For example, you could generate a 12×34
    purple rectangle. The images should be small but I haven’t yet implemented the
    most sophisticated compression, so you might need to run its results through a
    PNG compressor to achieve the smallest sizes.
  id: totrans-split-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我还制作了[单色图像](https://singlecolorimage.com/)，它生成任意尺寸的单色PNG图像。例如，您可以生成一个12×34的紫色矩形。这些图像应该很小，但我还没有实现最复杂的压缩，因此您可能需要通过PNG压缩器来实现最小尺寸。
- en: Finally, I also wrote about the [*largest* possible PNG](/largest-possible-png/).
    There’s no theoretical file size limit, but there is a maximum number of pixels,
    and many decoders impose various limits.
  id: totrans-split-185
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我还写了关于[*最大可能的PNG*](/largest-possible-png/)。理论上没有文件大小限制，但有像素数量的最大限制，许多解码器还设有各种限制。
- en: I hope this long post has given you a good understanding of the PNG file format.
    If you read this far and have anything to say, [let me know](/contact/)!
  id: totrans-split-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇长篇文章让你对PNG文件格式有了深入的理解。如果你读到这里有什么想说的，[请告诉我](/contact/)！
- en: </main>
  id: totrans-split-187
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
