- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:02:25'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Rust and C filesystem APIs [LWN.net]
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://lwn.net/Articles/958072/](https://lwn.net/Articles/958072/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| **This article brought to you by LWN subscribers**Subscribers to LWN.net
    made this article — and everything that surrounds it — possible. If you appreciate
    our content, please [buy a subscription](/subscribe/) and make the next set of
    articles possible. |'
  id: totrans-split-6
  prefs: []
  type: TYPE_TB
- en: By **Jonathan Corbet**
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: January 15, 2024
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: As the
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '[Rust-for-Linux project](https://rust-for-linux.com/)'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: advances, the kernel is gradually accumulating abstraction layers that enable
    Rust code to interface with the existing C code. As the discussion around the
    set of
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: '[filesystem abstractions](/ml/linux-fsdevel/20231018122518.128049-1-wedsonaf@gmail.com/)'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: posted by Wedson Almeida Filho in December shows, though, there is some tension
    between two approaches to the design of those abstractions. The approach favored
    by most of the kernel's C programmers looks set to win out, but this is a discussion
    that is likely to return as the use of Rust in the kernel grows.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: 'If a Rust developer wants to implement a filesystem using the posted abstractions,
    their job will be to put together an implementation that looks like this example
    taken from the cover letter:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The functions defined here perform the tasks that the kernel might ask of a
    filesystem implementation: `read_dir()` to read directory contents, for example,
    or `lookup()` to look up a file name within a directory. All of these operations
    are defined as part of a single trait called `FileSystem`.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: This organization differs from how the API is defined for C code, where file
    and filesystem-related operations are spread out across a wide range of object
    types. A filesystem as a whole is defined by [`struct super_block`](https://elixir.bootlin.com/linux/v6.7/source/include/linux/fs.h#L1192),
    which has a set of associated operations in [`struct super_operations`](https://elixir.bootlin.com/linux/v6.7/source/include/linux/fs.h#L2059).
    But filesystems implement a number of other object types and related operations,
    including inodes ([`inode`](https://elixir.bootlin.com/linux/v6.7/source/include/linux/fs.h#L639),
    [`inode_operations`](https://elixir.bootlin.com/linux/v6.7/source/include/linux/fs.h#L1968)),
    directory entries ([`dentry`](https://elixir.bootlin.com/linux/v6.7/source/include/linux/dcache.h#L82),
    [`dentry_operations`](https://elixir.bootlin.com/linux/v6.7/source/include/linux/dcache.h#L128)),
    files ([`file`](https://elixir.bootlin.com/linux/v6.7/source/include/linux/fs.h#L992),
    [`file_operations`](https://elixir.bootlin.com/linux/v6.7/source/include/linux/fs.h#L1916)),
    and address spaces ([`address_space`](https://elixir.bootlin.com/linux/v6.7/source/include/linux/fs.h#L448),
    [`address_space_operations`](https://elixir.bootlin.com/linux/v6.7/source/include/linux/fs.h#L404)).
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: As an example of how the object model works on the C side, consider that `lookup()`
    is an inode operation, `iterate_shared()` (used to implement the `read_dir()`
    function defined in the Rust trait) is a file operation, and `read_folio()` is
    an address-space operation.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 C 侧对象模型运作方式的示例，考虑 `lookup()` 是一个 inode 操作，`iterate_shared()`（用于实现 Rust 特性中定义的
    `read_dir()` 函数）是一个文件操作，而 `read_folio()` 是一个地址空间操作。
- en: Matthew Wilcox [had a couple of questions](/ml/linux-fsdevel/ZT7BPUAxsHQ%2FH%2FHm@casper.infradead.org/)
    about the proposed abstractions, starting with the `inode` parameter to a number
    of the operations. In the kernel's C code, those functions take a `struct inode`
    pointer, which is quickly converted into a filesystem-specific structure pointer.
    There is little in the way of type safety here; a function cannot know that it
    was actually passed a pointer to the right sort of inode. In Rust, it seems, it
    should be possible to do better.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: Matthew Wilcox [有几个问题](/ml/linux-fsdevel/ZT7BPUAxsHQ%2FH%2FHm@casper.infradead.org/)
    关于所提出的抽象，首先是涉及到一些操作的 `inode` 参数。在内核的 C 代码中，这些函数接受一个 `struct inode` 指针，快速转换为特定于文件系统的结构体指针。这里缺乏类型安全性；函数无法知道实际上是否传递了正确类型的
    inode 指针。在 Rust 中，似乎应该可以做得更好。
- en: Almeida [answered](/ml/linux-fsdevel/CANeycqrm1KCH=hOf2WyCg8BVZkX3DnPpaA3srrajgRfz0x=PiQ@mail.gmail.com/)
    that this interface does, indeed, do better. The type of the `inode` parameter
    is `&INode<Self>`, which ties the actual type of that parameter to the filesystem
    type; it is not possible to pass the wrong type of inode to those functions without
    running into compilation errors.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: Almeida [回应道](/ml/linux-fsdevel/CANeycqrm1KCH=hOf2WyCg8BVZkX3DnPpaA3srrajgRfz0x=PiQ@mail.gmail.com/)
    这个接口确实做得更好。`inode` 参数的类型是 `&INode<Self>`，将该参数的实际类型与文件系统类型绑定在一起；在不遇到编译错误的情况下，无法向这些函数传递错误类型的
    inode。
- en: 'Wilcox''s other question proved harder to answer, though. The file operation
    used (in C code) to read a directory is:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，Wilcox 的另一个问题证明更难回答。在 C 代码中用于读取目录的文件操作是：
- en: '[PRE1]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The equivalent in the Rust code (`read_dir()`, above) takes an inode reference
    as a parameter rather than a `struct file` pointer. Wilcox pointed out that, while
    "<q>toy filesystems</q>" get away with just the information stored in the inode,
    others need the information in the `file` structure. Not keeping that structure
    in the interface thus seems a bit strange. Almeida answered that the filesystems
    that have been implemented in Rust, to date, do not need anything from `struct
    file`; he added: "<q>Passing a `file` to `read_dir` would require us to introduce
    an unnecessary abstraction that no one uses, which we''ve been told not to do</q>".
    But, he said, the interface could be changed if and when it becomes necessary.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 代码中的等效部分（上述的 `read_dir()`）将一个 inode 引用作为参数，而不是 `struct file` 指针。Wilcox
    指出，虽然 "<q>玩具文件系统</q>" 只需 inode 中存储的信息，其他文件系统需要 `file` 结构中的信息。因此，在接口中不保留该结构似乎有些奇怪。Almeida
    回答道，迄今在 Rust 中实现的文件系统不需要从 `struct file` 中获取任何内容；他补充说：“<q>将 `file` 传递给 `read_dir`
    将要求我们引入一个无人使用的不必要抽象，我们已被告知不要这样做</q>”。但他说，接口可以在必要时进行更改。
- en: 'Wilcox [responded](/ml/linux-fsdevel/ZZWhQGkl0xPiBD5%2F@casper.infradead.org/)
    in fairly strong terms:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: Wilcox [做出了强烈回应](/ml/linux-fsdevel/ZZWhQGkl0xPiBD5%2F@casper.infradead.org/)：
- en: Then we shouldn't merge any of this, or even send it out for review again until
    there is at least one non-toy filesystems implemented. Either stick to the object
    orientation we've already defined (ie separate aops, iops, fops, ... with substantially
    similar arguments) or propose changes to the ones we have in C. Dealing only with
    toy filesystems is leading you to bad architecture.
  id: totrans-split-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因此，在至少有一个非玩具文件系统实现之前，我们不应合并任何内容，甚至不应再次提交进行审查。要么坚持我们已经定义的对象导向（即分离的 aops、iops、fops
    等，具有基本相似的参数），要么提出对我们在 C 中已有的更改。只处理玩具文件系统会导致不良架构。
- en: 'Almeida [was not pleased](/ml/linux-fsdevel/CANeycqo1v8MYFdmyHfLfiuPAHFWEw80pL7WmEfgXweqKfofp4Q@mail.gmail.com/)
    by this message; he asked: "<q>Are [you] saying that Rust cannot have different
    APIs with the same performance characteristics as C''s, unless we also fix the
    C apis?</q>" Wilcox [replied](/ml/linux-fsdevel/ZZYOkCyujEaR7TdX@casper.infradead.org/)
    that the kernel''s object model exists for a reason, and that the Rust side should
    not change that model without a strong justification. Al Viro [added](/ml/linux-fsdevel/20240103195358.GK1674809@ZenIV/)
    that the existing set of objects and operations needed to be treated "<q>as externally
    given</q>"; they can be changed with good reason, he said, but no such reason
    exists here.'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: Almeida 对这条消息感到不满；他问道：“<q>你是不是在说，Rust 不能像 C 一样拥有性能特征相同但 API 不同的库，除非我们也修复 C 的
    API？</q>” Wilcox 回答道，内核的对象模型存在是有其原因的，Rust 方面不应在没有充分理由的情况下改变这一模型。Al Viro 补充说，现有的对象集合和操作应当被视为“<q>外部给定</q>”；他表示可以出于充分理由而进行更改，但在这里并没有这样的理由。
- en: Kent Overstreet, instead, [argued](/ml/linux-fsdevel/ulideurkqeiqztorsuvhynsrx2np7ohbmnx5nrddzl7zze7qpu@cg27bqalj7i5/)
    that the Rust abstractions are a way to design a cleaner interface, and that this
    interface should not need to match the C API. Cleaning up the latter is "<q>a
    giant hassle</q>" due to the need to change all existing filesystems at the same
    time, while creating something better in Rust is relatively easy.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，Kent Overstreet 认为，Rust 的抽象是设计更清晰接口的一种方式，这个接口不应需要与 C API 匹配。清理后者是“<q>一项巨大的麻烦</q>”，因为需要同时更改所有现有的文件系统，而在
    Rust 中创建更好的东西相对容易。
- en: So instead, it would seem easier to me to do the cleaner version on the Rust
    side, and then once we know what that looks like, maybe we update the C version
    to match - or maybe we light it all on fire and continue with rewriting everything
    in Rust.
  id: totrans-split-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因此，对我来说，似乎更容易在 Rust 端实现更干净的版本，一旦我们知道它的样子，也许我们再更新 C 版本以匹配——或者也许我们会点燃所有东西，继续用
    Rust 重写一切。
- en: Meanwhile, Almeida [complained](/ml/linux-fsdevel/CANeycqrazDc_KKffx3c4C1yKCuSHU14v+L+2wq-pJq+frRf2wg@mail.gmail.com/)
    that passing a `file` structure into `read_dir()` when nothing uses it is just
    the sort of thing the Rust developers have been advised to avoid. Those developers
    have long been contending with the problem of merging abstractions so that they
    can be used without being able to merge the users at the same time. Wilcox [answered](/ml/linux-fsdevel/ZZ2dsiK77Se65wFY@casper.infradead.org/)
    that the advice had been misunderstood; the Rust developers have been asked not
    to merge abstractions for which there are no users, not to change the interfaces
    for the abstractions they *are* merging. Greg Kroah-Hartman [concurred](/ml/linux-fsdevel/2024010935-tycoon-baggage-a85b@gregkh/),
    saying that the abstractions should be suitable for all filesystems, not just
    those that have been implemented now. Dave Chinner [said](/ml/linux-fsdevel/ZZ3GeehAw%2F78gZJk@dread.disaster.area/)
    that this problem is exactly why he has been suggesting that the Rust developers
    reimplement ext2, since that filesystem, while being relatively simple, uses most
    of the core filesystem API.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，Almeida 抱怨说，当没有东西使用它时将 `file` 结构传递给 `read_dir()` 的做法正是 Rust 开发者被建议避免的事情。这些开发者长期以来一直在努力解决将抽象合并以便可以在没有能够合并用户的情况下使用它们的问题。Wilcox
    回答说，建议被误解了；Rust 开发者被要求不要合并没有用户的抽象，而不是改变他们正在合并的抽象的接口。Greg Kroah-Hartman 表示同意，称这些抽象应该适用于所有文件系统，而不仅仅是当前已实现的那些。Dave
    Chinner 说，这个问题正是为什么他一直建议 Rust 开发者重新实现 ext2 的原因，因为虽然这个文件系统相对简单，但使用了大部分核心文件系统 API。
- en: Eventually, Almeida [gave in](/ml/linux-fsdevel/CANeycqrubugocT0ZEhcUY4H+kytzhm-E4-PoWtvNobYr32auDA@mail.gmail.com/),
    and said that he would make a new version of the abstractions with separate file,
    inode, and address-space traits; `read_dir()` will be updated to take a `File<T>`
    reference instead. Wilcox [agreed](/ml/linux-fsdevel/ZZ6T6aBjOf+vA9sB@casper.infradead.org/)
    that this approach seemed like the right way forward.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，Almeida [屈服了](/ml/linux-fsdevel/CANeycqrubugocT0ZEhcUY4H+kytzhm-E4-PoWtvNobYr32auDA@mail.gmail.com/)，并表示他将用独立文件、inode
    和地址空间特性制作新版本的抽象；`read_dir()` 将更新为使用 `File<T>` 引用。Wilcox [同意](/ml/linux-fsdevel/ZZ6T6aBjOf+vA9sB@casper.infradead.org/)
    这种方法似乎是正确的前进方向。
- en: So this particular discussion appears to have come to a resolution. But implementing
    kernel functionality in Rust is sure to provide innumerable opportunities to create
    new interfaces that are cleaner and safer than those that have evolved over decades
    in the kernel's C code. Sometimes those APIs will demonstrate misunderstandings
    about why the C code evolved the way it did; sometimes they will truly be better.
    But, either way, a Rust API that differs significantly from the C API will make
    maintenance and future development harder, so there will continue to be strong
    resistance to the idea of creating APIs on the Rust side that differ from what
    is done on the C side.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这次具体的讨论似乎已经有了结论。但是在 Rust 中实现内核功能肯定会提供无数机会，创建比内核 C 代码数十年来演变的更干净、更安全的新接口。有时这些
    API 将展示对 C 代码演变原因的误解；有时它们确实会更好。但无论如何，与 C API 显著不同的 Rust API 将使维护和未来开发更加困难，因此在
    Rust 端创建与 C 端不同的 API 想法仍将面临强烈的抵制。
- en: One answer, as was also [discussed](/Articles/952029/) at the 2023 Maintainers
    Summit, is to evolve the C code to match the better interfaces being developed
    for Rust. The idea makes some sense, but it is also asking Rust developers to
    do large amounts of work — in C, which is just the thing they are trying to get
    away from. Changing core kernel APIs, updating all users of those APIs, and obtaining
    acceptance for the changes will not be a task for the faint of heart. Such a policy
    would undoubtedly impede the development of better interfaces on the Rust side;
    the result would be more maintainability, but that comes at a real cost.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如同在 2023 年维护者峰会上[讨论的](/Articles/952029/)一样，一个答案是使 C 代码演变成与 Rust 开发的更好接口相匹配。这个想法有些合理，但也要求
    Rust 开发者在 C 中做大量工作，而他们正试图摆脱这件事。改变核心内核 API、更新所有这些 API 的用户并获得这些变化的接受将不是一件简单的任务。这样的政策无疑会阻碍
    Rust 端开发更好接口；结果将是更好的可维护性，但这是有真实成本的。
- en: 'What seems likely to happen at some point was alluded to by Overstreet above:
    "<q>light it all on fire and continue with rewriting everything in Rust</q>".
    There is no problem with API divergence if the API used by everybody is in the
    Rust code. Your editor''s predictive powers are severely limited, but a couple
    of things seem likely to happen: there will be proposals to replace some core
    code with Rust implementations at some point, and the resistance to doing so will
    be fierce. Even in this discussion, David Howells [made it clear](/ml/linux-fsdevel/1080086.1704413050@warthog.procyon.org.uk/)
    that he didn''t want to see Rust anywhere near the core kernel.'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: Overstreet 提到可能在某个时候会发生的事情：“<q>点火烧掉一切，并继续用 Rust 重写所有内容</q>”。如果每个人使用的 API 都在
    Rust 代码中，API 分歧就不是问题了。你的编辑器的预测能力非常有限，但有几件事情似乎很可能会发生：有提议在某个时候用 Rust 实现替换一些核心代码，而抵制这样做的力量将是强大的。在这次讨论中，David
    Howells 明确表示他不希望 Rust 出现在核心内核中。
- en: That, though, is a discussion for a future time; Rust will have to prove itself
    at the edges of the kernel first. But once the camel's nose (or the crab's) is
    in the tent, the rest seems likely to want to follow. Stay tuned, it is going
    to be interesting.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这是未来的讨论内容；Rust 首先必须在内核边缘证明自己。但一旦骆驼的鼻子（或螃蟹的鼻子）进了帐篷，其余的事情似乎都有可能跟随。敬请关注，这将会很有趣。
- en: '* * *'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: (
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: '[Log in](https://lwn.net/Login/?target=/Articles/958072/)'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[登录](https://lwn.net/Login/?target=/Articles/958072/)'
- en: to post comments)
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 发表评论)
