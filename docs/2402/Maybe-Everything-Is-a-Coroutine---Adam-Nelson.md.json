["```\nfib(n: Int) -> Int \n```", "```\nfib() -> Int() \n```", "```\nfactors(n: Int) -> Int() | Void \n```", "```\ndoor() ->\n  | :open(:close)\n  | :closed(:open | :lock)\n  | :locked(:unlock) \n```", "```\nfor (door()) {\n  | :locked ->\n    continue(:unlock)\n  | :closed ->\n    continue(:open)\n  | :open ->\n    break\n} \n```", "```\ndef someNumbers() -> Int() | Void {\n  yield 1\n  yield 2\n  yield 3\n}\n\nvar total\nfor (someNumbers()) { n ->\n  total += n\n} \n```", "```\ndivide(divisor: Int, dividend: Int) -> DivideByZeroError | Int \n```", "```\nreadFile(filename: String) ->\n  | IOFileStat(FileError | FileInfo)\n  | IOFileRead(FileError | Bytes)\n  | FileError\n  | Bytes \n```", "```\nreadConfigJson(filename: String) ->\n  | IOFileStat(FileError | FileInfo)\n  | IOFileRead(FileError | Bytes)\n  | FileError\n  | JsonParseError\n  | JsonFormatError\n  | ConfigFile\n{\n  for (readFile(filename)) {\n    | IOFileStat a -> continue(yield a)\n    | IOFileRead a -> continue(yield a)\n    | FileError e -> yield e\n    | Bytes data ->\n      // borrowing some Scala syntax\n      parseJson(data) match {\n        | JsonParseError e -> yield e\n        | JsonValue json -> yield parseConfigFile(json)\n      }\n  }\n} \n```", "```\nreadConfigJson(filename: String) ->\n  | IOFileStat(FileError | FileInfo)\n  | IOFileRead(FileError | Bytes)\n  | FileError\n  | JsonParseError\n  | JsonFormatError\n  | ConfigFile\n{\n  val data = ^readFile(filename)\n  val json = ^parseJson(data)\n  yield parseConfigFile(json)\n} \n```", "```\nreadConfigJson(filename: String) -> ^infer IOFile(*) | ^infer Error | ConfigFile {\n  val data = ^readFile(filename)\n  val json = ^parseJson(data)\n  yield parseConfigFile(json)\n} \n```"]