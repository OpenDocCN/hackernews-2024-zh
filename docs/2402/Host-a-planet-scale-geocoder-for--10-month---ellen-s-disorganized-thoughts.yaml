- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:57:37'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Host a planet-scale geocoder for $10/month — ellen's disorganized thoughts
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://blog.ellenhp.me/host-a-planet-scale-geocoder-for-10-month](https://blog.ellenhp.me/host-a-planet-scale-geocoder-for-10-month)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Host a planet-scale geocoder for $10/month
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: February 16, 2024
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: About a month ago I began work a [new geocoder](https://github.com/ellenhp/airmail)
    ([demo](https://airmail.rs/#demo-section)), or search engine for places and addresses.
    I wanted to make something very inexpensive to run. A big barrier to entry for
    hosting a planet-scale [headway instance](https://github.com/headwaymaps/headway)
    is the geocoder. Right now we’re using Pelias which is great at what it does,
    but runs on ElasticSearch which doesn’t do well on <8GB of RAM. I’ve been poking
    at this problem off and on for years, and didn’t expect to get anything working,
    but much to my surprise things shaped up pretty quickly.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: I was able to cobble together a mediocre address parser based on [nom](https://crates.io/crates/nom),
    drawing an immense amount of inspiration from the [Pelias parser](https://github.com/pelias/parser/).
    Armed with an okay address parser, I turned to [tantivy](https://github.com/quickwit-oss/tantivy)
    as a search engine, thinking I’d take advantage of its ability to memory map the
    search index. After a bit of digging, I found [tantivy-wasm](https://github.com/phiresky/tantivy-wasm)
    which runs in the browser and issues range queries to fetch bits of the index
    as needed. When I saw that the gears really started turning in my head. I didn’t
    want to fork a search engine library, so I implemented my own backing store for
    mainline tantivy using [anonymous memory maps](https://en.wikipedia.org/wiki/Mmap)
    and [userfaultfd](https://docs.kernel.org/admin-guide/mm/userfaultfd.html) to
    fetch chunks of the index from object storage on-demand via range queries. It
    worked, and after a bit of tuning the latency is getting into pretty acceptable
    ranges, around 1-3 seconds generally, and I’ve seen it as fast as 2ms for a simple
    query if the cache is hot.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '[Fly.io](https://fly.io/) charges me about $3/mo for the machine it runs on,
    and just under $7/mo for the 320ish gigabytes of data in object storage, so this
    has been a very affordable project. I’m pretty happy with the results for the
    price. I’m planning on extending it handle more locales and use-cases over the
    coming months. I made a [demo site where you can play with it](https://airmail.rs/#demo-section),
    but don’t expect miracles. You get what you pay for, and I haven’t indexed OpenAddresses
    for the demo site so if something isn’t in OpenStreetMap I definitely do not have
    it in the index. The code is [all open-source](https://github.com/ellenhp/airmail/).'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Cheers ✨✨
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
