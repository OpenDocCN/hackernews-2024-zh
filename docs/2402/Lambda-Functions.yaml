- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:53:41'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:53:41'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Lambda Functions
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda 函数
- en: 来源：[https://www.lambdafunctions.com/articles/elixir-and-rust](https://www.lambdafunctions.com/articles/elixir-and-rust)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.lambdafunctions.com/articles/elixir-and-rust](https://www.lambdafunctions.com/articles/elixir-and-rust)
- en: Managing mutable data in Elixir with Rust
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Elixir中管理可变数据与Rust
- en: One of Elixir’s core benefits, and the secret to its robustness and scalability,
    is its foundation on immutable data. Sometimes, though, immutability is just not
    a great fit for a particular task—but that task is only one part of a large project.
    Is it possible to enjoy the benefits of Elixir’s data model everywhere else, but
    carve out a little mutable exception for one area?
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Elixir的核心优势之一，也是其健壮性和可伸缩性的秘密，是其建立在不可变数据基础上。不过，有时不可变性并不适合某个特定任务——但该任务仅是大项目的一部分。在其他所有地方都享受Elixir数据模型的好处，但为一个区域创造一个小小的可变例外，是否可能呢？
- en: Yes!
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！
- en: A long-running Elixir project I’m involved in has just this problem. The project
    is delivered over the web, so moving away from Elixir as a whole is not on the
    cards because [Phoenix](https://www.phoenixframework.org/) is quite simply a cheat
    code for web development. We *could* hive off the mutable section into a microservice,
    but that would require significant architectural and management overhead. All
    we really need is a little escape hatch for a limited chunk of code, while still
    being within the same VM and able to interact normally with the rest of the service.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我参与的一个长期运行的Elixir项目正面临这个问题。该项目通过网络交付，因此完全放弃Elixir并不在考虑之中，因为[Phoenix](https://www.phoenixframework.org/)简直就是Web开发的秘密武器。我们*可以*将可变部分分离成微服务，但这将需要显著的架构和管理开销。我们真正需要的只是一个小小的逃逸口，用于有限的代码块，同时仍然在同一个VM中，并能够正常地与服务的其余部分进行交互。
- en: This is just what [Rustler](https://github.com/rusterlium/rustler) offers.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是[Rustler](https://github.com/rusterlium/rustler)提供的功能。
- en: Rustler is “a library for writing Erlang NIFs in safe Rust code”—in other words,
    you can write code that looks like standard Elixir functions, but behind the scenes
    is actually implemented in Rust.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: Rustler是“用安全的Rust代码编写Erlang NIFs的库”——换句话说，你可以编写看起来像标准Elixir函数的代码，但实际上是在Rust中实现的。
- en: '[NIFs](https://www.erlang.org/docs/17/tutorial/nif) have been a feature of
    the Erlang VM since long before either Elixir or Rust arrived on the scene. What
    Rust and Rustler add is:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[NIFs](https://www.erlang.org/docs/17/tutorial/nif)是Erlang虚拟机的特性，在Elixir或Rust出现之前就已存在。Rust和Rustler增加的是：'
- en: safety—this is critical since a crash in a NIF will bring down the whole VM
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: safety—this is critical since a crash in a NIF will bring down the whole VM
- en: a lot of polish and interface glue that makes it feasible to write more ambitious
    integrations that you might be inclined to attempt with C and Erlang’s standard
    NIF support
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多额外的磨练和接口粘合使得可以编写更加雄心勃勃的集成，这种集成可能比你想尝试的C和Erlang标准NIF支持更有可能。
- en: access to all of Rust’s libraries
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以访问所有Rust的库
- en: Unfortunately, most of the Rustler examples on the web focus on the speed benefits
    and show the implementation of a trivial `add` function and then stop there. While
    that’s fine for demonstrating the bare minimum integration required, for me the
    interesting part of Rustler is the chance to escape in a controlled way from the
    immutable world—I want to explore how to manage a little mutable chunk of memory
    in a safe way. Although Rustler is certainly capable of this, there’s very little
    available in the way of tutorials or examples.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，网络上大多数Rustler示例都集中在速度优势上，并展示了一个简单的`add`函数的实现，然后就此打住了。虽然这对于演示最低集成要求足够了，但对我来说，Rustler的有趣之处在于以一种受控的方式逃离不可变世界——我想探索如何以安全的方式管理少量可变内存块。尽管Rustler当然能够做到这一点，但在教程或示例方面可用的资源非常有限。
- en: Hopefully this article will help.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 希望本文能有所帮助。
- en: Goal
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标
- en: As mentioned above, I want to explore memory management. More specifically,
    I want to be able to hold a chunk of data in the Rust world that persists between
    multiple calls to different “Elixir” (Rustler) functions. These functions should
    allow the Elixir world to pass data into the Rust world, mutate the data held
    there, and then retrieve results.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，我希望探索内存管理。更具体地说，我希望能够在Rust世界中保持一块数据，这些数据可以在不同的“Elixir”（Rustler）函数调用之间保持持久。这些函数应该允许Elixir世界将数据传递到Rust世界中，改变那里保存的数据，然后检索结果。
- en: To give us something substantial to play with and avoid having to implement
    our own data store for this demo, I’ll use Oxigraph.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供一个实质性的示例，并避免为此演示实现自己的数据存储，我将使用Oxigraph。
- en: '[Oxigraph](https://github.com/oxigraph) is a Rust graph database library implementing
    the SPARQL standard. Let’s suppose that we want to wrap it, so that we can have
    access to a fast graph database from within Elixir. We’ll call our wrapper `FeGraph`.'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[Oxigraph](https://github.com/oxigraph)是一个实现SPARQL标准的Rust图数据库库。假设我们想要封装它，这样我们就可以从Elixir内部访问一个快速的图数据库。我们将称之为`FeGraph`。'
- en: 'We want to be able to:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要能够：
- en: Make a new in-memory database
  id: totrans-split-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的内存数据库
- en: '[PRE0]'
  id: totrans-split-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Add data to it
  id: totrans-split-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向其中添加数据
- en: '[PRE1]'
  id: totrans-split-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Export the database as a [Turtle](https://en.wikipedia.org/wiki/Turtle_(syntax))
    string:'
  id: totrans-split-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据库导出为[Turtle](https://en.wikipedia.org/wiki/Turtle_(syntax))字符串：
- en: '[PRE2]'
  id: totrans-split-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To keep this to a reasonable length, we’re not going to implement everything
    that would be required to expose all the capabilities of Oxigraph; just enough
    to demonstrate holding data on the Rust side and acting on it from Elixir.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让这个长度合理，我们不打算实现需要暴露Oxigraph所有功能所需的一切；只需要足够来展示在Rust中保存数据并从Elixir中进行操作。
- en: Implementation
  id: totrans-split-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现
- en: (If you want to follow along, I recommend working through one of the many Rustler
    `add` tutorials I mentioned before getting into the code, so that you have a basic
    project up and running and have worked through how Rust and Elixir functions link
    together. Everything below here assumes you’re already at that point.)
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: （如果你想跟着做，我建议你在进入代码之前，先按照我之前提到的许多Rustler `add` 教程之一，这样你就可以运行一个基本的项目，并且了解了Rust和Elixir函数如何联系在一起。后面的一切都假设你已经到了那一点。）
- en: The key to this whole approach is the ability to pass a [Resource](https://erlang.org/doc/man/erl_nif.html#resource_objects)
    between the two worlds. This acts as a handle to a piece of memory; it can be
    returned from a NIF and then passed back into another call. Exactly what we need.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 整个方法的关键在于能够在两个世界之间传递一个[Resource](https://erlang.org/doc/man/erl_nif.html#resource_objects)。这充当了一块内存的句柄；它可以从NIF返回，然后再传递回另一个调用。正是我们所需要的。
- en: A BEAM `Resource` is represented in Rustler by a `rustler::resource::ResourceArc<T>`
    struct. To get started with our implementation, let’s define a new type that we
    can use as a handle to represent the state of our graph store.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一个BEAM `Resource`在Rustler中由一个`rustler::resource::ResourceArc<T>`结构表示。让我们从我们的实现开始，定义一个我们可以用作表示图存储状态的句柄的新类型。
- en: In a production scenario we’re likely to want to manage more state than this,
    but for now it will suffice to define a `MyGraph` struct that just contains (via
    a mutex) the Oxigraph data store; this represents the mutable data we want to
    manage outside Elixir. In the future, more fields could be added to `MyGraph`
    as necessary.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，我们可能想管理更多的状态，但现在只需定义一个`MyGraph`结构，它只包含（通过互斥锁）Oxigraph数据存储；这代表了我们想要在Elixir外部管理的可变数据。将来，根据需要，可以向`MyGraph`添加更多的字段。
- en: To turn this into something that can be passed back and forth between Elixir
    and Rust, we need to wrap it in a `ResourceArc`. In order to make our function
    signatures a bit more readable we’ll define a new type of `GraphArc` to represent
    a `MyGraph` struct in a `ResourceArc`.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将其转换为可以在Elixir和Rust之间传递的东西，我们需要将其包装在`ResourceArc`中。为了使我们的函数签名更加可读，我们将定义一个新类型的`GraphArc`，表示在`ResourceArc`中的`MyGraph`结构。
- en: 'In `lib.rs`:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`lib.rs`中：
- en: '[PRE3]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A bit of additional plumbing is required to tell Rustler that a `MyGraph` is
    something that can be used as a `Resource`:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一点额外的管道工作告诉Rustler，`MyGraph`是可以用作`Resource`的东西：
- en: '[PRE4]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With these definitions in place, we can write a `new` function that allocates
    a new data store and returns a handle to it:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些定义，我们可以编写一个`new`函数，该函数分配一个新的数据存储并返回一个句柄：
- en: '[PRE5]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And on the Elixir side, in `fe_graph.ex`:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在Elixir端，在`fe_graph.ex`中：
- en: '[PRE6]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'At this point we can test in `iex`, and see that the Elixir stub above has
    been replaced by the Rust NIF we defined, which we can run and which gives us
    back a reference:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们可以在`iex`中进行测试，看到上面的Elixir存根已被我们定义的Rust NIF替换，我们可以运行它，并得到一个引用：
- en: '[PRE7]'
  id: totrans-split-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Granted we can’t yet *do* anything with it, but we’re already defining a data
    store in Rust and seeing evidence of it in Elixir; and behind the scenes the BEAM
    and Rustler are taking care of all of the heavy lifting for us.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们还无法*做*任何操作，但我们已经在Rust中定义了一个数据存储，并在Elixir中看到了它的迹象；在幕后，BEAM和Rustler正在为我们处理所有繁重的工作。
- en: How about a simple function to add some data to our new store? In a way that
    will feel very familiar to Elixir code, it will need to both take and return a
    `GraphArc` handle. We’ll also have it accept a single string to use for all three
    parts of the triple to store (normally of course we’d take different strings for
    the subject, predicate, and object parts of the triple, but our focus here isn’t
    on SPARQL—we just want some data to store.)
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来写一个简单的函数向我们的新存储中添加一些数据怎么样？以一种对Elixir代码非常熟悉的方式，它将需要接受并返回一个`GraphArc`句柄。我们还将接受一个字符串以用于三个三元组部分的存储（当然，通常我们会为主语、谓语和宾语部分使用不同的字符串，但我们此处的重点不是SPARQL——我们只想存储一些数据。）
- en: '[PRE8]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Within the function we can use our `GraphArc` state argument to get a hold of
    the Oxigraph store that we created back in the `new` function. Once we’ve got
    it we can add some test data to the graph as normal, then return the unchanged
    `state`.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数内部，我们可以使用我们的`GraphArc`状态参数来获取我们在`new`函数中创建的Oxigraph存储的句柄。一旦获取到，我们可以像往常一样向图中添加一些测试数据，然后返回未更改的`state`。
- en: The final piece of the puzzle is to retrieve some data from our store. Rather
    than running a query (which would require getting into more SPARQL) we’ll just
    dump the whole database and return it as a string. As before, our new function
    will need to accept a `GraphArc`, but this time we’ll return an `OwnedBinary`,
    which allows us to send a binary back to the BEAM and then wash our hands of it.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是从我们的存储中检索一些数据。与其运行一个查询（这将需要更多SPARQL的介入），我们只需倾倒整个数据库并将其作为字符串返回。与以往一样，我们的新函数将需要接受一个`GraphArc`，但这次我们将返回一个`OwnedBinary`，这使我们能够将二进制数据发送回BEAM，然后摆脱它。
- en: '[PRE9]'
  id: totrans-split-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The majority of this function turns out to be messing around getting the data
    out of Oxigraph into a buffer, and then from the buffer into the `OwnedBinary`;
    the Rustler wrapper has become mostly invisible which is what I was originally
    hoping for.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的大部分内容实际上是将数据从Oxigraph中获取并存入缓冲区，然后从缓冲区转换为`OwnedBinary`；Rustler包装器已经变得几乎无需关注，这正是我最初所希望的。
- en: 'With this in place we can now demonstrate allocating some memory in Rust, returning
    a handle to that memory, then using it to store data outside the BEAM memory model
    and finally fetch the data back into the Elixir world:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个功能，我们现在可以演示在Rust中分配一些内存，返回该内存的句柄，然后使用它在BEAM内存模型之外存储数据，并最终将数据取回到Elixir世界中：
- en: '[PRE10]'
  id: totrans-split-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note the important part; the reference is the same both times despite the data
    changing and we are *not* storing it after the `set` call; normally we’d need
    to do something like `db = FeGraph.set(db, "http://foo.com")` instead. The only
    reason `set` returns the reference is for convenient use with the pipe operator
    or similar.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意重要部分；尽管数据更改后引用相同，我们在`set`调用后并*不*存储它；通常我们需要像`db = FeGraph.set(db, "http://foo.com")`这样做。`set`返回引用仅为了便于与管道运算符或类似操作的使用。
- en: Conclusion
  id: totrans-split-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: While the code shown above does skip past most of the error handling, hopefully
    it’s clear just how accessible Rustler makes it to link Rust code into Elixir
    projects in a way that allows you to combine the strengths of both.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管上述代码跳过了大部分错误处理，但希望很明显Rustler使得将Rust代码链接到Elixir项目变得非常容易，从而允许您充分发挥两者的优势。
- en: Rustler is a tremendous addition to the Elixir ecosystem, and it opens up far
    more opportunities than just calculating things more quickly. Being able to opt
    out of the standard BEAM memory model for specific sections of code can open the
    doors to custom data stores and other features that would not generally be a good
    fit for Elixir, while still allowing you to use the power of Phoenix for the majority
    of your application… all with virtually seamless integration.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: Rustler对Elixir生态系统是一项重大增强，它不仅可以更快地计算，还可以打开更多的机会。能够选择退出标准BEAM内存模型以用于代码特定部分，可以为自定义数据存储和其他通常不适合Elixir的功能打开大门，同时仍然可以利用Phoenix强大的功能来构建应用程序的大部分部分……几乎无缝集成。
