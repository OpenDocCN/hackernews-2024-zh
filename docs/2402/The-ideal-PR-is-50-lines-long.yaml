- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:40:35'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:40:35
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The ideal PR is 50 lines long
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理想的PR长度为50行
- en: 来源：[https://graphite.dev/blog/the-ideal-pr-is-50-lines-long](https://graphite.dev/blog/the-ideal-pr-is-50-lines-long)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://graphite.dev/blog/the-ideal-pr-is-50-lines-long](https://graphite.dev/blog/the-ideal-pr-is-50-lines-long)
- en: Most engineers intuitively know that smaller code changes are better than big
    ones. The logical arguments flow easy - small pull requests are easier to review,
    less likely to have bugs, and are faster from inception to deploy. There are a
    few papers around this that I love - see the references section at the end of
    this post for further reading.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数工程师本能地知道，较小的代码变更比大的更好。逻辑论证很容易 - 小的拉取请求更容易审查，不太可能有错误，并且从开始到部署的速度更快。我喜欢周围有几篇关于这个的论文
    - 请参阅本文末尾的参考文献部分。
- en: But how small is small? Can PRs be *too* small? And if a PR is better than a
    big PR, *how much* better?
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但是什么才是小？PR能太小吗？如果一个PR比大PR好，到底好在哪里？
- en: '**Note**'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: Greg spends full workdays writing weekly deep dives on engineering practices
    and dev-tools. This is made possible because these articles help get the word
    out about Graphite. If you like this post, try [Graphite](https://graphite.dev?utm_source=blog-note)
    today, and start shipping 30% faster!
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: Greg全职工作日花费在撰写关于工程实践和开发工具的每周深度探讨文章上。这是因为这些文章帮助宣传Graphite。如果你喜欢这篇文章，请今天尝试[Graphite](https://graphite.dev?utm_source=blog-note)，并开始30%更快地发布！
- en: 'The claim: the ideal PR is 50 lines long[](/blog/the-ideal-pr-is-50-lines-long#the-claim-the-ideal-pr-is-50-lines-long)'
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主张：理想的PR长度为50行[](/blog/the-ideal-pr-is-50-lines-long#the-claim-the-ideal-pr-is-50-lines-long)
- en: After pulling the numbers, the ideal code change is 50 lines long.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在收集了这些数据之后，理想的代码变更长度为50行。
- en: 50-line code changes are reviewed and merged ~40% faster than 250-line changes.
    They’re 15% less likely to be reverted than 250-line changes and have 40% more
    review comments per line changed. If your median PR is 50 lines long, you’re probably
    shipping 40% more total code than your teammate writing 200+ line PRs.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 50行的代码变更比250行的变更审核和合并速度快约40%。它们比250行的变更少15%被回滚的可能性，并且每行变更有40%更多的审查评论。如果你的中位数PR为50行，那么你可能比你的队友写200+行PR的人多出40%的总编码量。
- en: '50 lines is a sweet spot across speed, review comments, revert rate, and total
    coding volume. If you’re willing to accept a range, I can recommend 25-100 lines
    per PR. According to the data, we see that time-to-review, time-to-merge, and
    review comments per line all get better the smaller you make your PRs. There is
    a limit though: under 25 lines, and you start suffering a higher revert rate,
    as well as a lower total code shipped.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 50行是在速度、审查评论、回滚率和总编码量之间的一个甜蜜点。如果你愿意接受一个范围，我可以推荐每个PR为25-100行。根据数据显示，时间到审查、时间到合并和每行审查评论都会随着PR变小而变得更好。但是有一个限制：少于25行，你开始遭受更高的回滚率，以及更低的总编码量。
- en: Let’s talk about why and back this claim with some data.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下为什么以及如何支持这个主张的数据。
- en: Our sample set[](/blog/the-ideal-pr-is-50-lines-long#our-sample-set)
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的样本集[](/blog/the-ideal-pr-is-50-lines-long#our-sample-set)
- en: 'All of the data-based statements in this piece are made using private and public
    PRs and repos that have been synced with Graphite. To figure out the ideal PR
    size, I took a look at four main metrics and how they correlated with PR size:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中所有基于数据的陈述都是使用与Graphite同步的私有和公共PR和仓库制作的。为了找出理想的PR大小，我看了四个主要指标及其与PR大小的相关性：
- en: Caveats[](/blog/the-ideal-pr-is-50-lines-long#caveats)
  id: totrans-split-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意[](/blog/the-ideal-pr-is-50-lines-long#caveats)
- en: 'As with all collected data, there are some caveats to be aware of when extrapolating
    meaning from the numbers:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 就像所有收集到的数据一样，在从数字中推断意义时需要注意一些注意事项：
- en: I used inconsistent, non-linear bucket sizes corresponding to intuitive PR size
    ranges. Linear buckets would be too granular, and exponential bucket sizes lose
    too much nuance.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我使用了不一致的、非线性的桶大小对应直观的PR大小范围。线性桶将会太精细，而指数桶大小会失去太多细微之处。
- en: I used median PR size rather than average PR size to avoid outlier refactors
    from skewing the data.
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我使用中位数PR大小而不是平均PR大小，以避免异常重构使数据失真。
- en: Reverts were defined as PRs with the word “Revert” in the title. This felt like
    a safe assumption because generated GitHub reverts automatically have the word
    prepended to the title.
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回滚被定义为标题中带有“Revert”一词的PR。这感觉像一个安全的假设，因为生成的GitHub回滚会自动在标题前加上这个词。
- en: We find that Graphite users tend to create smaller PRs in general, since many
    organizations use a trunk-based development style (which encourages smaller PRs)
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们发现，Graphite 用户通常会创建较小的 PR，因为许多组织使用基于主干的开发风格（这鼓励较小的 PR）。
- en: Time-to-review and time-to-merge[](/blog/the-ideal-pr-is-50-lines-long#time-to-review-and-time-to-merge)
  id: totrans-split-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审查时间和合并时间[](/blog/the-ideal-pr-is-50-lines-long#time-to-review-and-time-to-merge)
- en: Let’s dig into the data. Starting with time-to-review and time-to-merge, we
    see that the smallest PRs are almost five times faster than 2-5k line PRs. Intuitively
    this makes sense - smaller PRs mean less lines of code, and less code means a
    lower chance of having destructive or meticulous changes which in turn leads to
    a faster review.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入数据吧。从审查时间和合并时间开始，我们可以看到最小的 PR 比 2-5k 行的 PR 快近五倍。直观上这是有道理的 - 更小的 PR 意味着代码行数更少，代码越少意味着出现破坏性或细致入微的更改的几率降低，从而导致更快的审查。
- en: What’s fascinating to see play out is that post-5k lines, PRs start getting
    faster again. I can only assume this is a combination of blind stamps, assumed-safe
    refactors, package additions or generated changes; perhaps both authors and reviewers
    start shrugging when they can’t even scroll to the bottom of the change.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，超过 5k 行后，PR 的速度又开始加快。我只能假设这是盲目的提交、假设安全的重构、包添加或生成的更改的组合；也许是作者和审阅者在无法滚动到更改底部时开始不关心。
- en: Note, we assume that we care about the time per PR more than we do the time
    per line. If we care about landing a PR as fast as possible, the data tells us
    to make it as small as possible. But if we want to land as high volume of code
    as fast as possible, a 2000-line PR merges at a rate of about 12 lines per hour,
    whereas a 10-line PR merges at about 0.25-2 lines per hour.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们假设我们关心的是每个 PR 的时间而不是每行的时间。如果我们关心尽快完成 PR，数据告诉我们要尽可能将其缩小。但如果我们希望尽快地完成大量代码的提交，2000
    行的 PR 的合并速度约为每小时 12 行，而 10 行的 PR 的合并速度约为每小时 0.25-2 行。
- en: Revert rate by PR size[](/blog/the-ideal-pr-is-50-lines-long#revert-rate-by-pr-size)
  id: totrans-split-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PR 大小按回滚率排序[](/blog/the-ideal-pr-is-50-lines-long#revert-rate-by-pr-size)
- en: 'The revert rate demonstrates the same high-level conclusion: smaller PRs are
    reverted less than large PRs, the least reverted PRs being those that fall between
    25-50 lines of code. But once again, the edges of the graph are interesting. Sub-10
    line PRs are reverted noticeably more than 10-100 line PRs. If I had to guess,
    I’d say that sub-10 line PRs get into the realm of dangerous config changes, but
    I’d be curious if this finding held true after normalizing for language.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 重新提交率显示了同样的高级结论：小 PR 比大 PR 更少被回滚，回滚最少的是 25-50 行代码之间的 PR。但再次看到图表的边缘是有趣的。少于 10
    行的 PR 比 10-100 行的 PR 明显被回滚更多。如果我必须猜测，我会说少于 10 行的 PR 进入了危险配置更改的领域，但我很好奇如果这个发现在语言归一化后是否成立。
- en: Once PRs start to exceed 10k lines of code, they seem to become slightly “safer.”
    I suspect this is because the extreme end of PR sizes includes refactors, which
    maybe start including less functionality change and therefore have a slightly
    lower chance of breaking. Alternatively, engineers may become progressively more
    reluctant to revert PRs after 10k lines because of emotional anchoring and merge
    conflicts.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 PR 超过 10k 行代码，它们似乎变得略微“更安全”。我怀疑这是因为极端大小的 PR 包括重构，这可能开始包括较少的功能更改，因此其破坏性更低。另外，工程师可能在超过
    10k 行后更加不愿意回滚 PR，这可能与情感锚定和合并冲突有关。
- en: Average number of inline comments by PR size[](/blog/the-ideal-pr-is-50-lines-long#average-number-of-inline-comments-by-pr-size)
  id: totrans-split-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PR 大小按行内注释的平均数[](/blog/the-ideal-pr-is-50-lines-long#average-number-of-inline-comments-by-pr-size)
- en: Depending on what you’re optimizing for (a fast merge or an in-depth code review),
    you can choose whether or not you want to split your PR into smaller changesets.
    If you want to get the most feedback on a single PR, write a length 1-2k diff.
    If you want the highest chance of a blind stamp, keep it under 10 lines. This
    information is useful to know when all you care about is getting a single specific
    change out the door with as little debate as possible.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你要优化的目标（快速合并还是深入代码审查），你可以选择是否将你的 PR 拆分成较小的变更集。如果你希望在单个 PR 中获得最多的反馈，请编写长度为
    1-2k 的差异。如果你希望有最高的盲目提交机会，请保持在 10 行以下。当你只关心尽可能快地完成一个特定变更时，这些信息是有用的。
- en: Here we also see that massive PRs start getting progressively less engagement.
    There’s a practical limit to how much code your reviewer is willing to read -
    I suspect that 2k lines is the point at which “reading” a PR becomes “skimming”
    a PR.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里也看到大型PR开始逐渐减少交互。你的审阅者愿意阅读的代码量存在实际上的限制——我认为2000行是审阅PR变为浏览PR的临界点。
- en: If what you care about is maximizing the amount of engagement and feedback on
    your code over the long run, you’re best off writing as small of PRs as possible.
    They’re more digestible, and you can approach a max rate of one comment on every
    39 lines of code you write. Alternatively, if you hate written feedback, make
    your PRs larger than 10k lines, and you’ll start receiving stray comments on only
    every 6000+ lines of code you change - take this with a grain of salt though,
    since people rarely put up PRs for the sole purpose of getting feedback/engagement.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你关心的是长期内最大化代码交互和反馈量，最好尽可能地写小的PR。它们更易消化，你可以期望每39行代码能得到一次评论的最大速率。另一方面，如果你不喜欢书面反馈，那么将PR扩展到超过10,000行，你将只在每6000+行改动时收到零星评论——尽管这点需持谨慎态度，因为人们很少只为了获取反馈或交互而提交PR。
- en: Total code output[](/blog/the-ideal-pr-is-50-lines-long#total-code-output)
  id: totrans-split-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总代码输出[](/blog/the-ideal-pr-is-50-lines-long#total-code-output)
- en: Some folks might wonder if writing small PRs leads to less code output in total.
    We all want to be high velocity, but there are times when you need to be high
    volume. Consistently writing sub-20 line PRs will have a significant impact on
    your net coding ability - but interestingly, so will writing PRs greater than
    100+ lines. The highest volume coders and repositories have a median change size
    of only 40-80 lines. I suspect this is because the volume of code is change-size
    * speed of changes. Too small of changes, and the faster merge time doesn't make
    up for it. Too large, and you start getting weighted down by slower review and
    merge cycles.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人可能会想知道，提交小型PR是否会导致总代码输出减少。我们都希望提高开发速度，但有时你需要提高产量。持续提交少于20行的PR会显著影响你的编码能力——但有趣的是，提交超过100行的PR也会产生同样的效果。最高产的程序员和代码库的中位变更大小仅为40-80行。我认为这是因为代码量是变更大小乘以变更速度的结果。变更太小，快速合并时间无法弥补。变更太大，你会被更慢的审查和合并周期拖累。
- en: Conclusion[](/blog/the-ideal-pr-is-50-lines-long#conclusion)
  id: totrans-split-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论[](/blog/the-ideal-pr-is-50-lines-long#conclusion)
- en: The average developer coding with a team at a tech company should aim for a
    median PR size of 50 lines - it's generally the size of PR we stick to here at
    Graphite. Obviously this comes with some edge cases that were discussed above
    and specific changes may require you to flex up and down in size, but know that
    doing so may come at a noticeable cost with respect to review quality, speed,
    and the chance that changes may need to be reverted.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在科技公司与团队协作的平均开发者应该以50行作为中位数PR大小的目标——这通常是我们在Graphite坚持的PR大小。显然，这其中也存在一些特例情况，如前述讨论过的特定变更可能需要你在大小上进行伸缩，但要知道这样做可能会对审查质量、速度以及变更可能需要回滚的机会产生显著的影响。
- en: Further reading[](/blog/the-ideal-pr-is-50-lines-long#further-reading)
  id: totrans-split-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读[](/blog/the-ideal-pr-is-50-lines-long#further-reading)
