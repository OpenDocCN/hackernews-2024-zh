- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:33:24'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:33:24
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: '.NET on Linux: What a Contrast'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET 在 Linux 上：形成鲜明对比
- en: 来源：[https://two-wrongs.com/dotnet-on-linux-update.html](https://two-wrongs.com/dotnet-on-linux-update.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://two-wrongs.com/dotnet-on-linux-update.html](https://two-wrongs.com/dotnet-on-linux-update.html)
- en: Almost five years ago I wrote [a brief history about .net on non-Windows platforms](dotnet-on-non-windows-platforms-brief-historic-summary.html).
    I stumbled over that article now and it resurfaced traumatic memories of navigating
    .net development on Linux and MacOS.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大约五年前，我写了[关于 .net 在非 Windows 平台上的简要历史](dotnet-on-non-windows-platforms-brief-historic-summary.html)。我现在偶然发现了那篇文章，它让我重新回忆起了在
    Linux 和 MacOS 上开发 .net 时的创伤性经历。
- en: Even back in 2019, it was mostly fine to *run* .net code on Linux (in production)
    but the documentation and tooling for development was not there at all.¹ I got
    into .net development when my then-new employer was in the middle of transitioning
    from .net Framework to .net Core, so my non-Windows work computer ended up being
    a lab rat for all sorts of unexpected compatibility problems. I still don’t fully
    understand why I thought it was a good idea to try to port applications I wasn’t
    even able to *compile* – much less run – to the new framework, but it worked out
    fine in the end. (It was not just that these applications used the fcl, they also
    integrated with Windows functionality.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在 2019 年，*在* Linux 上（生产环境中）运行 .net 代码基本上没问题，但是开发的文档和工具根本不成体系。¹ 我开始接触 .net
    开发时，当时的新雇主正在从 .net Framework 迁移到 .net Core，所以我的非 Windows 工作电脑成为了各种意想不到的兼容性问题的实验田。我仍然不完全明白为什么我认为把我甚至连
    *编译* 都无法完成的应用程序迁移到新的框架是个好主意，但最后一切都很顺利。（不仅是这些应用程序使用了 fcl，它们还与 Windows 功能集成。）
- en: That experience was, and the article was written, when .net Core 2.1 was the
    latest production-friendly release. In some sense, it was just yesterday, but
    in another, it’s a world away. Even just two or three years later, the tooling
    and documentation had improved to levels I didn’t anticipate. Today, I still write
    .net code (for a different employer) and I can barely tell whether I’m on Windows
    or Linux.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 那个经历和文章是在 .net Core 2.1 是最新的生产版本时写的。在某种意义上，那似乎就是昨天的事，但在另一个意义上，它却是另一个世界。甚至只是两三年后，工具和文档的改进已经到了我没预料到的水平。今天，我仍然写
    .net 代码（为另一家雇主），几乎分不清我是在 Windows 还是 Linux 上。
- en: It speaks to how much an organisation with a big wallet and willingness to invest
    can shift things in a brief amount of time – but also, I think, how other companies
    (I’m looking at you, JetBrains) can set a standard for cross-platform tooling
    that the original company is forced to live up to in order not to lose too much
    market share.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这反映了一个拥有庞大资金和愿意投资的组织在短时间内可以推动事情发生多大的变化 - 但同时，我认为，这也反映了其他公司（我指的是你，JetBrains）如何为跨平台工具树立标准，以迫使原始公司不至于失去太多市场份额。
