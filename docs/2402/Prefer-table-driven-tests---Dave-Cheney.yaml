- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:31:24'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:31:24
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Prefer table driven tests | Dave Cheney
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐使用表驱动测试 | Dave Cheney
- en: 来源：[https://dave.cheney.net/2019/05/07/prefer-table-driven-tests](https://dave.cheney.net/2019/05/07/prefer-table-driven-tests)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://dave.cheney.net/2019/05/07/prefer-table-driven-tests](https://dave.cheney.net/2019/05/07/prefer-table-driven-tests)
- en: I’m a big fan of testing, specifically [unit testing](https://dave.cheney.net/2019/04/03/absolute-unit-test)
    and TDD ([done correctly](https://www.youtube.com/watch?v=EZ05e7EMOLM), of course).
    A practice that has grown around Go projects is the idea of a table driven test.
    This post explores the how and why of writing a table driven test.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常喜欢测试，特别是[unit testing](https://dave.cheney.net/2019/04/03/absolute-unit-test)和正确进行的TDD（[当然](https://www.youtube.com/watch?v=EZ05e7EMOLM)）。围绕
    Go 项目发展起来的一种实践是表驱动测试的概念。本文探讨了编写表驱动测试的如何和为什么。
- en: 'Let’s say we have a function that splits strings:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个拆分字符串的函数：
- en: '[PRE0]'
  id: totrans-split-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In Go, unit tests are just regular Go functions (with a few rules) so we write
    a unit test for this function starting with a file in the same directory, with
    the same package name, `strings`.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Go 中，单元测试只是常规的 Go 函数（带有一些规则），因此我们为这个函数编写一个单元测试，从同一目录中的一个文件开始，具有相同的包名称，`strings`。
- en: '[PRE1]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Tests are just regular Go functions with a few rules:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 测试只是带有几个规则的常规 Go 函数：
- en: The name of the test function must start with `Test`.
  id: totrans-split-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试函数的名称必须以`Test`开头。
- en: The test function must take one argument of type `*testing.T`. A `*testing.T` is
    a type injected by the testing package itself, to provide ways to print, skip,
    and fail the test.
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试函数必须接受一个类型为`*testing.T`的参数。`*testing.T`是由测试包本身注入的类型，用于提供打印、跳过和失败测试的方法。
- en: In our test we call `Split` with some inputs, then compare it to the result
    we expected.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的测试中，我们使用一些输入调用`Split`，然后将其与我们预期的结果进行比较。
- en: Code coverage
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码覆盖率
- en: 'The next question is, what is the coverage of this package? Luckily the go
    tool has a built in branch coverage. We can invoke it like this:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个问题是，这个包的覆盖率是多少？幸运的是，Go 工具有一个内置的分支覆盖率。我们可以像这样调用它：
- en: '[PRE2]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Which tells us we have 100% branch coverage, which isn’t really surprising,
    there’s only one branch in this code.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们，我们有100%的分支覆盖率，这并不奇怪，因为这段代码只有一个分支。
- en: 'If we want to dig in to the coverage report the go tool has several options
    to print the coverage report. We can use `go tool cover -func` to break down the
    coverage per function:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想深入了解覆盖率报告，go 工具有几个选项可以打印覆盖率报告。我们可以使用`go tool cover -func`来按函数分解覆盖率：
- en: '[PRE3]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Which isn’t that exciting as we only have one function in this package, but
    I’m sure you’ll find more exciting packages to test.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包里只有一个函数，所以可能不那么令人兴奋，但我确信你会找到更刺激的包进行测试。
- en: Spray some .bashrc on that
  id: totrans-split-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在那上面喷一些 .bashrc
- en: 'This pair of commands is so useful for me I have a shell alias which runs the
    test coverage and the report in one command:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，这对命令非常有用，我有一个shell别名，可以在一个命令中运行测试覆盖率和报告：
- en: '[PRE4]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Going beyond 100% coverage
  id: totrans-split-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超过100%的覆盖率
- en: So, we wrote one test case, got 100% coverage, but this isn’t really the end
    of the story. We have good branch coverage but we probably need to test some of
    the boundary conditions. For example, what happens if we try to split it on comma?
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们编写了一个测试案例，获得了100%的覆盖率，但这并不是故事的终结。我们有了良好的分支覆盖率，但可能需要测试一些边界条件。例如，如果我们尝试在逗号上进行拆分会发生什么？
- en: '[PRE5]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Or, what happens if there are no separators in the source string?
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果源字符串中没有分隔符会发生什么？
- en: '[PRE6]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We’re starting build a set of test cases that exercise boundary conditions.
    This is good.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在构建一组测试案例，以测试边界条件。这是很好的。
- en: Introducing table driven tests
  id: totrans-split-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入基于表驱动的测试
- en: However the there is a lot of duplication in our tests. For each test case only
    the input, the expected output, and name of the test case change. Everything else
    is boilerplate. What we’d like to to set up all the inputs and expected outputs
    and feel them to a single test harness. This is a great time to introduce table
    driven testing.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们的测试中存在大量重复。对于每个测试用例，只有输入、预期输出和测试用例名称会发生变化。其他所有内容都是样板文件。我们希望设置所有输入和预期输出并将它们填充到单个测试框架中。这是引入表驱动测试的绝佳时机。
- en: '[PRE7]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We declare a structure to hold our test inputs and expected outputs. This is
    our table. The `tests` structure is usually a local declaration because we want
    to reuse this name for other tests in this package.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明了一个结构来保存我们的测试输入和预期输出。这就是我们的表。`tests`结构通常是本地声明，因为我们希望在此包中的其他测试中重用这个名称。
- en: 'In fact, we don’t even need to give the type a name, we can use an anonymous
    struct literal to reduce the boilerplate like this:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, adding a new test is a straight forward matter; simply add another line
    the `tests` structure. For example, what will happen if our input string has a
    trailing separator?
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: But, when we run `go test`, we get
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Putting aside the test failure, there are a few problems to talk about.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: The first is by rewriting each test from a function to a row in a table we’ve
    lost the name of the failing test. We added a comment in the test file to call
    out this case, but we don’t have access to that comment in the `go test` output.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: There are a few ways to resolve this. You’ll see a mix of styles in use in Go
    code bases because the table testing idiom is evolving as people continue to experiment
    with the form.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating test cases
  id: totrans-split-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As tests are stored in a slice we can print out the index of the test case
    in the failure message:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now when we run `go test` we get this
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Which is a little better. Now we know that the fourth test is failing, although
    we have to do a little bit of fudging because slice indexing—​and range iteration—​is
    zero based. This requires consistency across your test cases; if some use zero
    base reporting and others use one based, it’s going to be confusing. And, if the
    list of test cases is long, it could be difficult to count braces to figure out
    exactly which fixture constitutes test case number four.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: Give your test cases names
  id: totrans-split-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another common pattern is to include a name field in the test fixture.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-split-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now when the test fails we have a descriptive name for what the test was doing.
    We no longer have to try to figure it out from the output—​also, now have a string
    we can search on.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-split-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can dry this up even more using a map literal syntax:'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-split-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Using a map literal syntax we define our test cases not as a slice of structs,
    but as map of test names to test fixtures. There’s also a side benefit of using
    a map that is going to potentially improve the utility of our tests.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: Map iteration order is *undefined* This means each time we run `go test`, our
    tests are going to be potentially run in a different order.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: This is super useful for spotting conditions where test pass when run in statement
    order, but not otherwise. If you find that happens you probably have some global
    state that is being mutated by one test with subsequent tests depending on that
    modification.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: Introducing sub tests
  id: totrans-split-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we fix the failing test there are a few other issues to address in our
    table driven test harness.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: The first is we’re calling `t.Fatalf` when one of the test cases fails. This
    means after the first failing test case we stop testing the other cases. Because
    test cases are run in an undefined order, if there is a test failure, it would
    be nice to know if it was the only failure or just the first.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: The testing package would do this for us if we go to the effort to write out
    each test case as its own function, but that’s quite verbose. The good news is
    since Go 1.7 a new feature was added that lets us do this easily for table driven
    tests. They’re called [sub tests](https://blog.golang.org/subtests).
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们费力地编写每个测试用例作为其自己的函数，测试包会为我们完成这项工作，但这样做相当冗长。好消息是，自从Go 1.7以来，已经添加了一个新功能，使我们可以轻松地为表驱动测试做到这一点。它们被称为[sub
    tests](https://blog.golang.org/subtests)。
- en: '[PRE16]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As each sub test now has a name we get that name automatically printed out in
    any test runs.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每个子测试都有一个名称，所以在任何测试运行中，该名称都会自动打印出来。
- en: '[PRE17]'
  id: totrans-split-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Each subtest is its own anonymous function, therefore we can use `t.Fatalf`, `t.Skipf`,
    and all the other `testing.T`helpers, while retaining the compactness of a table
    driven test.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 每个子测试都是其自己的匿名函数，因此我们可以使用`t.Fatalf`、`t.Skipf`以及所有其他`testing.T`助手，同时保持表驱动测试的紧凑性。
- en: Individual sub test cases can be executed directly
  id: totrans-split-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可以直接执行各个单独的子测试用例。
- en: Because sub tests have a name, you can run a selection of sub tests by name
    using the `go test -run` flag.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因为子测试有一个名称，所以可以使用`go test -run`标志按名称运行选择的子测试。
- en: '[PRE18]'
  id: totrans-split-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Comparing what we got with what we wanted
  id: totrans-split-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较我们得到的与我们想要的结果：
- en: Now we’re ready to fix the test case. Let’s look at the error.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备修复测试用例。让我们看看错误信息。
- en: '[PRE19]'
  id: totrans-split-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Can you spot the problem? Clearly the slices are different, that’s what `reflect.DeepEqual` is
    upset about. But spotting the actual difference isn’t easy, you have to spot that
    extra space after `c`. This might look simple in this simple example, but it is
    any thing but when you’re comparing two complicated deeply nested gRPC structures.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你能发现问题吗？显然切片是不同的，这是`reflect.DeepEqual`感到困惑的原因。但是找到实际的差异并不容易，你必须注意到在`c`后面有额外的空格。在这个简单的例子中，这看起来很简单，但当你比较两个复杂的深度嵌套的gRPC结构时，情况却并非如此。
- en: 'We can improve the output if we switch to the `%#v` syntax to view the value
    as a Go(ish) declaration:'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们转而使用`%#v`语法查看该值作为Go（ish）声明，我们可以改善输出：
- en: '[PRE20]'
  id: totrans-split-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now when we run our test it’s clear that the problem is there is an extra blank
    element in the slice.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们运行我们的测试时，很明显问题在于切片中多了一个空白元素。
- en: '[PRE21]'
  id: totrans-split-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: But before we go to fix our test failure I want to talk a little bit more about
    choosing the right way to present test failures. Our `Split` function is simple,
    it takes a primitive string and returns a slice of strings, but what if it worked
    with structs, or worse, pointers to structs?
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们修复测试失败之前，我想更详细地讨论选择正确的方式来呈现测试失败。我们的`Split`函数很简单，它接受一个基本字符串并返回一个字符串切片，但如果它与结构体一起工作，或者更糟，与结构体的指针一起工作会怎么样？
- en: 'Here is an example where `%#v` does not work as well:'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个`%#v`效果不佳的例子：
- en: '[PRE22]'
  id: totrans-split-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The first `fmt.Printf`prints the unhelpful, but expected slice of addresses;
    `[0xc000096000 0xc000096008 0xc000096010] [0xc000096018 0xc000096020 0xc000096028]`.
    However our `%#v` version doesn’t fare any better, printing a slice of addresses
    cast to `*main.T`;`[]*main.T{(*main.T)(0xc000096000), (*main.T)(0xc000096008),
    (*main.T)(0xc000096010)} []*main.T{(*main.T)(0xc000096018), (*main.T)(0xc000096020),
    (*main.T)(0xc000096028)}`
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`fmt.Printf`打印了令人无助但是预期的地址切片; `[0xc000096000 0xc000096008 0xc000096010] [0xc000096018
    0xc000096020 0xc000096028]`。然而我们的`%#v`版本并没有更好，打印了一个将地址切片转换为`*main.T`的切片; `[]*main.T{(*main.T)(0xc000096000),
    (*main.T)(0xc000096008), (*main.T)(0xc000096010)} []*main.T{(*main.T)(0xc000096018),
    (*main.T)(0xc000096020), (*main.T)(0xc000096028)}`
- en: Because of the limitations in using any `fmt.Printf` verb, I want to introduce
    the [go-cmp](https://github.com/google/go-cmp) library from Google.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于使用任何`fmt.Printf`动词的限制，我想介绍来自Google的[go-cmp](https://github.com/google/go-cmp)库。
- en: 'The goal of the cmp library is it is specifically to compare two values. This
    is similar to `reflect.DeepEqual`, but it has more capabilities. Using the cmp
    pacakge you can, of course, write:'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: cmp库的目标是专门用于比较两个值。这类似于`reflect.DeepEqual`，但它具有更多的功能。当然，使用cmp包，你可以编写：
- en: '[PRE23]'
  id: totrans-split-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: But far more useful for us with our test function is the `cmp.Diff` function
    which will produce a textual description of what is different between the two
    values, recursively.
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 但是对于我们的测试函数来说，更有用的是`cmp.Diff`函数，它将递归地生成描述两个值之间差异的文本描述。
- en: '[PRE24]'
  id: totrans-split-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Which instead produces:'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 而实际上产生了：
- en: '[PRE25]'
  id: totrans-split-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Telling us that at element 2 of the slice of `T`s the `I`field was expected
    to be 3, but was actually 4.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉我们在`T`结构体切片的第2个元素处，`I`字段预期值为3，但实际上是4。
- en: Putting this all together we have our table driven go-cmp test
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 把所有这些都放在一起，我们有了我们的表驱动的go-cmp测试。
- en: '[PRE26]'
  id: totrans-split-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Running this we get
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 运行后我们得到：
- en: '[PRE27]'
  id: totrans-split-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Using `cmp.Diff` our test harness isn’t just telling us that what we got and
    what we wanted were different. Our test is telling us that the strings are different
    lengths, the third index in the fixture shouldn’t exist, but the actual output
    we got an empty string, “”. From here fixing the test failure is straight forward.
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `cmp.Diff` 我们的测试工具不仅仅告诉我们得到的和我们想要的不同。我们的测试表明字符串的长度不同，夹具中的第三个索引不应存在，但实际输出为空字符串，即“”。从这里开始修复测试失败是直截了当的。
