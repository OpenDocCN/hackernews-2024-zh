- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:42:28'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:42:28'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Billion file filesystem
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 十亿文件的文件系统
- en: 来源：[https://blog.liw.fi/posts/2024/billion/](https://blog.liw.fi/posts/2024/billion/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.liw.fi/posts/2024/billion/](https://blog.liw.fi/posts/2024/billion/)
- en: 'For a lark I made an `ext4` file system with a billion empty files. [https://gitlab.com/larswirzenius/create-empty-files](https://gitlab.com/larswirzenius/create-empty-files)
    has the program I wrote for this. I’ve done this [before](/posts/2020/10/01/a_billion_files/),
    but this time I made it a little simpler for me to do it again: everything in
    one Rust program rather than clunky scripts.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了好玩，我创建了一个包含十亿个空文件的`ext4`文件系统。[https://gitlab.com/larswirzenius/create-empty-files](https://gitlab.com/larswirzenius/create-empty-files)包含了我编写的程序。我以前也做过这个[事情](/posts/2020/10/01/a_billion_files/)，但这一次我让它更简单一些，这样我就可以再做一次了：所有的东西都在一个
    Rust 程序中，而不是笨重的脚本。
- en: The disk image starts out as a terabyte-size sparse file, taking no space, and
    a file system is put in that. Thus, the image is all zeroes except for what actually
    gets written to it by the file system. With a billion empty files, the image uses
    276 GiB disk space. On my desktop machine it took about 26 hours to create.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘镜像开始时是一个大小为一 TB 的稀疏文件，不占用空间，并在其中放置了一个文件系统。因此，图像除了由文件系统实际写入的内容外，都是零。有十亿个空文件，图像使用了
    276 GiB 的磁盘空间。在我的台式机上，创建这个图像大约需要 26 小时。
- en: 'Compressing makes it smaller:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 压缩后更小：
- en: '| `gzip -1` | 20 | 20546385531 |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `gzip -1` | 20 | 20546385531 |'
- en: '| `gzip -9` | 15 | 15948883594 |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `gzip -9` | 15 | 15948883594 |'
- en: '| `xz -T0 -1` | 11 | 11389236780 |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `xz -T0 -1` | 11 | 11389236780 |'
- en: '| `xz -T0 -M 60GiB -9` | 10 | 10465717256 |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `xz -T0 -M 60GiB -9` | 10 | 10465717256 |'
- en: (I did not measure compression times, sorry. If that interests you, you’ll have
    to do the work yourself.)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: （我没有测量压缩时间，抱歉。如果你对此感兴趣，你将不得不自己做这项工作。）
- en: If you have a use for such a filesystem, please get in touch. However, if you
    can spend a day, you can easily create one yourself and save me a bit of bandwidth.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有这样的文件系统的用途，请与我联系。但是，如果你能花一天的时间，你很容易自己创建一个，并为我节省一些带宽。
- en: If you’d like a different filesystem, it should be easy enough to adjust the
    program I wrote to use another filesystem type.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要一个不同的文件系统，调整我编写的程序来使用另一种文件系统类型应该很容易。
- en: Of what use is a filesystem with many empty files? You could use it to benchmark
    things that do things to all the files in a directory tree. For example, what
    is the fastest way to list all those files? Delete them? Back them up? Create
    an archive file with all of them? (These might be an interesting project for someone
    in university or college, maybe?)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有许多空文件的文件系统有什么用？你可以用它来测试对目录树中的所有文件执行操作的东西的性能。例如，列出所有这些文件的最快方法是什么？删除它们？备份它们？创建包含所有文件的存档文件？（这些对于大学里的某个人来说可能是一个有趣的项目，也许？）
