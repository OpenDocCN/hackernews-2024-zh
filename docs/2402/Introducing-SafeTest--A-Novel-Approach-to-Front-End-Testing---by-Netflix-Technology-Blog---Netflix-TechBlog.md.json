["```\nimport { describe, it, expect } from 'safetest/jest';\nimport { render } from 'safetest/react';\n\ndescribe('my app', () => {\n  it('loads the main page', async () => {\n    const { page } = await render();\n\n    await expect(page.getByText('Welcome to the app')).toBeVisible();\n    expect(await page.screenshot()).toMatchImageSnapshot();\n  });\n});\n```", "```\nimport { describe, it, expect, browserMock } from 'safetest/jest';\nimport { render } from 'safetest/react';\n\ndescribe('Header component', () => {\n  it('has a normal mode', async () => {\n    const { page } = await render(<Header />);\n\n    await expect(page.getByText('Admin')).not.toBeVisible();\n   });\n\n  it('has an admin mode', async () => {\n    const { page } = await render(<Header admin={true} />);\n\n    await expect(page.getByText('Admin')).toBeVisible();\n  });\n\n  it('calls the logout handler when signing out', async () => {\n    const spy = browserMock.fn();\n    const { page } = await render(<Header handleLogout={spy} />);\n\n    await page.getByText('logout').click();\n    expect(await spy).toHaveBeenCalledWith();\n  });\n});\n```", "```\nimport { useAsync } from 'react-use';\nimport { fetchPerson } from './api/person';\n\nexport const People: React.FC = () => {\n  const { data: people, loading, error } = useAsync(fetchPeople);\n\n  if (loading) return <Loader />;\n  if (error) return <ErrorPage error={error} />;\n  return <Table data={data} rows=[...] />;\n}\n```", "```\n import { fetchPerson } from './api/person';\n+import { createOverride } from 'safetest/react';\n\n+const FetchPerson = createOverride(fetchPerson);\n\n export const People: React.FC = () => {\n+  const fetchPeople = FetchPerson.useValue();\n   const { data: people, loading, error } = useAsync(fetchPeople);\n\n   if (loading) return <Loader />;\n   if (error) return <ErrorPage error={error} />;\n   return <Table data={data} rows=[...] />;\n }\n```", "```\nconst pending = new Promise(r => { /* Do nothing */ });\nconst resolved = [{name: 'Foo', age: 23], {name: 'Bar', age: 32]}];\nconst error = new Error('Whoops');\n\ndescribe('People', () => {\n  it('has a loading state', async () => {\n    const { page } = await render(\n      <FetchPerson.Override with={() => () => pending}>\n        <People />\n      </FetchPerson.Override>\n    );\n\n    await expect(page.getByText('Loading')).toBeVisible();\n  });\n\n  it('has a loaded state', async () => {\n    const { page } = await render(\n      <FetchPerson.Override with={() => async () => resolved}>\n        <People />\n      </FetchPerson.Override>\n    );\n\n    await expect(page.getByText('User: Foo, name: 23')).toBeVisible();\n  });\n\n  it('has an error state', async () => {\n    const { page } = await render(\n      <FetchPerson.Override with={() => async () => { throw error }}>\n        <People />\n      </FetchPerson.Override>\n    );\n\n    await expect(page.getByText('Error getting users: \"Whoops\"')).toBeVisible();\n  });\n});\n```", "```\nit('has a people loaded state', async () => {\n  const { page } = await render(app =>\n    <FetchPerson.Override with={() => async () => resolved}>\n      {app}\n    </FetchPerson.Override>\n  );\n   await expect(page.getByText('User: Foo, name: 23')).toBeVisible();\n});\n```", "```\n+const UseFlags = createOverride(useFlags);\n export const Admin = () => {\n+  const useFlags = UseFlags.useValue();\n   const { isAdmin } = useFlags();\n   if (!isAdmin) return <div>Permission error</div>;\n   // ...\n }\n\n+const Language = createOverride(navigator.language);\n export const LanguageChanger = () => {\n-  const language = navigator.language;\n+  const language = Language.useValue();\n   return <div>Current language is { language } </div>;\n }\n\n describe('Admin', () => {\n   it('works with admin flag', async () => {\n     const { page } = await render(\n       <UseIsAdmin.Override with={oldHook => {\n         const oldFlags = oldHook();\n         return { ...oldFlags, isAdmin: true };\n       }}>\n         <MyComponent />\n       </UseIsAdmin.Override>\n     );\n\n     await expect(page.getByText('Permission error')).not.toBeVisible();\n   });\n });\n\n describe('Language', () => {\n   it('displays', async () => {\n     const { page } = await render(\n       <Language.Override with={old => 'abc'}>\n         <MyComponent />\n       </Language.Override>\n     );\n\n     await expect(page.getByText('Current language is abc')).toBeVisible();\n   });\n });\n```", "```\nimport { setup } from 'safetest/setup';\nimport { createTestUser, addCookies } from 'netflix-test-helper';\n\ntype Setup = Parameters<typeof setup>[0] & {\n  extraUserOptions?: UserOptions;\n};\n\nexport const setupNetflix = (options: Setup) => {\n  setup({\n    ...options,\n    hooks: { beforeNavigate: [async page => addCookies(page)] },\n  });\n\n  beforeAll(async () => {\n    createTestUser(options.extraUserOptions)\n  });\n};\n```"]