- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:02:53'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:02:53
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Announcing Linkerd 2.15: Support for VM workloads, native sidecars, SPIFFE,
    and a new way to get stable releases'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 宣布 Linkerd 2.15：支持 VM 工作负载、本地 sidecar、SPIFFE，以及一种新的稳定版本获取方式
- en: 来源：[https://buoyant.io/blog/announcing-linkerd-2-15-vm-workloads-spiffe-identities](https://buoyant.io/blog/announcing-linkerd-2-15-vm-workloads-spiffe-identities)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://buoyant.io/blog/announcing-linkerd-2-15-vm-workloads-spiffe-identities](https://buoyant.io/blog/announcing-linkerd-2-15-vm-workloads-spiffe-identities)
- en: '*Note: this is* [*an expanded version of the post on linkerd.io*](https://linkerd.io/2024/02/21/announcing-linkerd-2.15/)
    *with additional context and clarification, and an FAQ at the bottom.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：这是*[*链接到 linkerd.io 上的文章的扩展版本*](https://linkerd.io/2024/02/21/announcing-linkerd-2.15/)
    *，增加了额外的背景和澄清，以及底部的 FAQ。*'
- en: 'Note 2: Please see [our followup post with some clarifications](https://buoyant.io/blog/clarifications-on-linkerd-2-15-stable-announcement/).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 2：请参阅[我们的后续文章以获取一些澄清信息](https://buoyant.io/blog/clarifications-on-linkerd-2-15-stable-announcement/)。
- en: Today we're happy to announce the release of Linkerd 2.15, which adds support
    for **mesh expansion**, **native sidecars**, and **SPIFFE identities**, and introduces
    **a new model for stable releases**.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们很高兴地宣布 Linkerd 2.15 版本的发布，该版本增加了对**网格扩展**、**本地 sidecar** 和 **SPIFFE 身份**的支持，并引入了**稳定版本的新模式**。
- en: The new "mesh expansion" feature in Linkerd 2.15 allows users to bring applications
    running on VMs, physical machines, and other non-Kubernetes locations into the
    mesh, delivering Linkerd's uniform layer of secure, reliable, and observable connectivity
    across both Kubernetes and non-Kubernetes workload alike. The 2.15 release also
    introduces support for SPIFFE, a standard for workload identity which allows Linkerd
    to provide a consistent layer of uniform layer of cryptographic identity and authentication
    to off-cluster workloads, and for native sidecar containers, a new Kubernetes
    feature that eases some of the long-standing annoyances of the sidecar model in
    Kubernetes, especially with Job workloads.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 2.15 中的新“网格扩展”功能允许用户将运行在 VM、物理机器和其他非 Kubernetes 位置上的应用程序引入网格，为 Kubernetes
    和非 Kubernetes 工作负载提供 Linkerd 统一的安全、可靠和可观察的连接。2.15 版本还引入了对 SPIFFE 的支持，这是一种工作负载身份的标准，允许
    Linkerd 为离集群工作负载提供一致的统一的加密身份和认证层，并且支持本地 sidecar 容器，这是 Kubernetes 的一个新特性，可简化 Kubernetes
    中 sidecar 模型的长期困扰，尤其是对于 Job 工作负载。
- en: 'Finally, this release introduces some important changes in the way that we''re
    publishing Linkerd: as of 2.15, we will no longer be producing open source stable
    releases. If you''re running Linkerd in production today, please see the section
    *A new model for stable releases* below.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这个版本在发布 Linkerd 的方式上引入了一些重要的变化：从 2.15 开始，我们将不再发布开源的稳定版本。如果您今天在生产中运行 Linkerd，请参阅下面的
    *稳定版本的新模式* 部分。
- en: As usual, the 2.15 release includes a massive list of bugfixes and improvements.
    Read on for details!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，2.15 版本包含了一长串的错误修复和改进。详情请阅读！
- en: Mesh expansion
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网格扩展
- en: 'As [we promised last November](https://linkerd.io/2023/11/07/linkerd-mesh-expansion/),
    Linkerd 2.15 introduces *mesh expansion*: the ability to deploy Linkerd''s ultralight
    Rust microproxies anywhere outside of Kubernetes and connect them to a Linkerd
    control plane running on a Kubernetes cluster. This allows Linkerd to handle non-Kubernetes
    workloads, upleveling all TCP communication to and from these workloads secure,
    reliable, and observable. Non-Kubernetes applications get the full set of Linkerd
    features, including mutual TLS, retries, timeouts, circuit breaking, latency-aware
    load balancing, dynamic per-request routing, zero trust authorization policies,
    and much more.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[我们去年十一月承诺的](https://linkerd.io/2023/11/07/linkerd-mesh-expansion/)，Linkerd
    2.15 引入了*网格扩展*：将 Linkerd 的超轻量级 Rust 微代理部署在 Kubernetes 集群上运行的 Linkerd 控制平面之外的任何地方，并将它们连接到一个
    Linkerd 控制平面。这使得 Linkerd 能够处理非 Kubernetes 工作负载，将所有与这些工作负载之间的 TCP 通信升级到安全、可靠和可观察的水平。非
    Kubernetes 应用程序可以获得全部的 Linkerd 功能，包括双向 TLS、重试、超时、断路器、基于延迟的负载均衡、动态的每请求路由、零信任授权策略等等。
- en: Mesh expansion is an important part of achieving our goal of making Linkerd
    the *universal networking layer for cloud native organizations.* While we love
    Kubernetes, we recognize that even the most sophisticated organizations often
    still have significant investments in applications that don't run outside of it.
    With Linkerd 2.15, regardless of whether your workloads are running on resource-constrained
    ARM64 edge devices, legacy "big iron" VMs, or physical machines in your server
    closet, Linkerd's uniform layer of security, reliability, and observability is
    at your disposal.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 网格扩展是实现我们的目标，将 Linkerd 打造成*云原生组织的通用网络层*的重要组成部分。虽然我们热爱 Kubernetes，但我们意识到，即使是最复杂的组织通常仍然对在其之外无法运行的应用程序有重大投资。有了
    Linkerd 2.15，无论您的工作负载是在资源受限的 ARM64 边缘设备上运行、遗留的“大铁”虚拟机上，还是在服务器壁橱中的物理机器上运行，Linkerd
    的统一安全、可靠和可观察性层都可以随时为您提供支持。
- en: This move was made significantly easier by Linkerd's core design of ultralight
    microproxies written in the Rust programming language. The use of Rust, which
    has the "[ability to prevent memory-related bugs, manage concurrency, and generate
    small, efficient binaries](https://github.blog/2023-08-30-why-rust-is-the-most-admired-language-among-developers/#:~:text=Rust's%20minimal%20runtime%20and%20control,%2Dtime%2C%20and%20efficiency%20needs.)"
    allows Linkerd not just to avoid the memory vulnerabilities that are endemic to
    languages like C and C++, but to provide minimal resource footprint and—most importantly—a
    minimal operational burden to the user. Linkerd's Rust microproxies are key to
    its simplicity-first approach, and our ability to deliver small, static binaries
    which can be compiled for a wide variety of architectures and platforms was key
    to unlocking Linkerd's new mesh expansion capabilities.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这一举措在很大程度上得益于 Linkerd 的核心设计，即用 Rust 编写的超轻型微代理。Rust 的使用使得 Linkerd 不仅可以避免像 C 和
    C++ 这样的语言普遍存在的内存漏洞，而且可以提供最小的资源占用和——最重要的是——最小的操作负担给用户。Linkerd 的 Rust 微代理是其首要简单原则的关键，我们能够提供小巧、静态的二进制文件，可以为各种架构和平台编译，这对于解锁
    Linkerd 的新网格扩展能力至关重要。
- en: SPIFFE support
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SPIFFE 支持
- en: One major challenge in mesh expansion is how to generate *workload identities*
    for non-Kubernetes workloads*.* To solve this, we introduced support for [SPIFFE](https://spiffe.io/),
    a CNCF graduated project that addresses exactly that concern.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 网格扩展中的一个主要挑战是如何为非 Kubernetes 工作负载生成*工作负载身份*。为了解决这个问题，我们引入了对 [SPIFFE](https://spiffe.io/)
    的支持，它是一个 CNCF 毕业项目，正好解决了这个问题。
- en: 'Workload identity is central to Linkerd''s approach to communication security.
    Rather than relying on easily-spoofed IP addresses to identify clients and servers,
    Linkerd *doesn''t trust the network*: it secures communication with mutual TLS,
    which not only encrypts the communication and prevents tampering, but also but
    cryptographically authenticates the identities of client and server based on unique
    workload identities. Mutual TLS is a stricter variation of the same well-established
    protocol (TLS) that powers the majority of the Internet today.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 工作负载身份是 Linkerd 通信安全方法的核心。Linkerd *不信任网络*，而不是依赖于容易伪造的 IP 地址来识别客户端和服务器：它使用相互
    TLS 来安全通信，这不仅加密了通信并防止篡改，而且根据唯一的工作负载身份对客户端和服务器的身份进行了加密验证。相互 TLS 是同一已被广泛使用的协议（TLS）的一种更严格的变体，它是当前互联网大部分内容的动力源。
- en: Prior to Linkerd 2.15, Linkerd could simply use the workload's Kubernetes ServiceAccount
    to automatically generate a workload identity. Using this pre-existing identity
    was central to our "zero config zero trust" approach that makes dropping mTLS
    into an existing Kubernetes application trivial, and we continue to support it
    in Linkerd 2.15.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linkerd 2.15 之前，Linkerd 可以简单地使用工作负载的 Kubernetes ServiceAccount 来自动生成工作负载身份。使用这个预先存在的身份是我们“零配置零信任”方法的核心，使得将
    mTLS 放入现有的 Kubernetes 应用程序变得微不足道，我们在 Linkerd 2.15 中继续支持它。
- en: 'For workloads running outside of Kubernetes, however, there are no ServiceAccounts
    to rely on: only applications running on machines. To solve this, we turned to
    SPIFFE, a standard hosted by the CNCF, and its reference implementation, SPIRE.
    These two projects solve the problem of generating secure workload identity for
    arbitrary processes on arbitrary machines. Linkerd 2.15 generates SPIFFE ids for
    non-Kubernetes workloads using SPIRE, and these ids can be used alongside Linkerd''s
    existing ServiceAccount-based ids  as the basis for Linkerd''s zero-trust authorization
    policies.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于在 Kubernetes 之外运行的工作负载，没有 ServiceAccounts 可以依赖：只有在机器上运行的应用程序。为了解决这个问题，我们转向了由
    CNCF 主持的标准 SPIFFE 及其参考实现 SPIRE。这两个项目解决了在任意机器上生成安全工作负载身份的问题。Linkerd 2.15 使用 SPIRE
    为非 Kubernetes 工作负载生成 SPIFFE id，这些 id 可以与 Linkerd 现有的基于 ServiceAccount 的 id 一起用作
    Linkerd 零信任授权策略的基础。
- en: With Linkerd 2.15 you can now encrypt all traffic to your VM workloads by default,
    and add zero-trust controls over all access right down to the level of individual
    HTTP routes and gRPC methods for specific clients.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Linkerd 2.15，您现在可以默认加密所有与您的 VM 工作负载的流量，并为特定客户端的个别 HTTP 路由和 gRPC 方法添加零信任控制。
- en: Native sidecar support
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本地边车支持
- en: Linkerd 2.15 adds support for native sidecar containers, a new Kubernetes feature
    that was introduced in 1.28 and is enabled by default in Kubernetes 1.29\. Deploying
    Linkerd with native sidecars [fixes some of the long-standing annoyances of using
    sidecar containers in Kubernetes](https://buoyant.io/blog/kubernetes-1-28-revenge-of-the-sidecars),
    especially around support for Jobs and race conditions around container startup.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 2.15 添加了对本地边车容器的支持，这是 Kubernetes 1.28 中引入的一个新特性，在 Kubernetes 1.29 中默认启用。使用本地边车部署
    Linkerd [修复了在 Kubernetes 中使用边车容器长期存在的一些恼人问题](https://buoyant.io/blog/kubernetes-1-28-revenge-of-the-sidecars)，尤其是在支持
    Jobs 和关于容器启动的竞争条件方面。
- en: A new model for stable releases
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 稳定发布的新模型
- en: In Linkerd 2.15 we're making some significant changes to the way that Linkerd
    is delivered.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linkerd 2.15 中，我们对 Linkerd 的交付方式进行了一些重大变更。
- en: While Linkerd is and will always be open source, we are shifting our stable
    release efforts entirely to delivering [Buoyant Enterprise for Linkerd (BEL),
    our production-grade Linkerd distribution](/enterprise-linkerd/). BEL is Linkerd
    plus a set of additional tools, features, and testing designed for sustained,
    large-scale production use. *BEL is the distribution of Linkerd that we run ourselves*
    and this is what we recommend for serious use.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Linkerd 是开源的，且将始终开源，但我们正在全面转移稳定发布工作，以交付 [Buoyant Enterprise for Linkerd（BEL），我们的生产级
    Linkerd 分发](/enterprise-linkerd/)。BEL 是 Linkerd 加上一组额外的工具、功能和测试，旨在持续、大规模地用于生产。*BEL
    是我们自己运行的 Linkerd 发行版*，这是我们建议严肃使用的。
- en: Linkerd 2.15.0 and all future stable releases will be delivered as BEL releases—complete
    with extra tools, features, and testing. We're really excited about this change
    because BEL is amazing. To support it, *we're making BEL free for non-production
    use, and always free for production use at organizations with fewer than 50 employees.*
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 2.15.0 和所有未来的稳定版本都将作为 BEL 版本发布，其中包含额外的工具、功能和测试。我们对这一变化感到非常兴奋，因为 BEL
    是了不起的。为了支持它，*我们将使 BEL 在非生产环境中免费使用，并且在员工少于 50 人的组织中始终免费使用*。
- en: Moving to BEL from an existing Linkerd 2.14 installation is as easy as updating
    your Helm repo. This is a big, change and we want to make it simple and predictable
    for everyone with plenty of breathing room. We ourselves are Linkerd operators,
    devops engineers, and platform owners who operate production systems with Linkerd,
    and we'd never want anything to get in the way of your core job of delivering
    the secure, highly-available platform your own businesses rely on. To make it
    easier on your, *BEL use is completely unrestricted for 90 days, until May 21st,
    2024*, and *organizations that sign up in the next 30 days are also eligible for
    a substantial discount on pricing.* We're also happy to accommodate non-profits,
    high-volume use cases, and other organizations with unique needs. Please see the
    FAQ below for more details.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从现有的 Linkerd 2.14 安装迁移到 BEL 只需更新您的 Helm 仓库。这是一个重大的变化，我们希望能够为每个人提供简单、可预测的方式。我们自己是
    Linkerd 运营商、devops 工程师和平台所有者，在使用 Linkerd 运行生产系统，我们绝不希望任何事情妨碍您核心工作，即提供您自己的企业所依赖的安全、高可用性的平台。为了让您更容易上手，*BEL 在
    90 天内完全不受限制，直到 2024 年 5 月 21 日*，*在接下来的 30 天内注册的组织也有资格获得价格大幅优惠*。我们也乐意为非营利组织、高容量使用案例和其他有特殊需求的组织提供帮助。更多详情请参见下面的常见问题解答。
- en: This change is absolutely necessary for us to fund the incredible set of features
    we're busy adding to Linkerd. We're tackling significant new work like adding
    ingress traffic, egress control, IPv6, Windows, eBPF, ambient approaches, and
    more to Linkerd, and we're determined to to deliver them with the same ultralight,
    ultrafast, "just works" approach that makes Linkerd so uniquely today in a space
    that's notorious for complexity. Linkerd 2.15 is just a  step in a long journey
    of compounding value.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这一变化对我们来说是绝对必要的，以资助我们正在忙于添加到 Linkerd 的令人难以置信的一系列功能。我们正在着手处理像添加入口流量、出口控制、IPv6、Windows、eBPF、环境方法等重要的新工作，并且我们决心以使
    Linkerd 在一个以复杂性而著称的领域中如此独特的“超轻量、超快、只需运行”方式来交付它们。Linkerd 2.15 只是一段漫长旅程中的一步，不断增长的价值。
- en: But to accomplish these lofty goals, *we need the companies that are building
    their businesses on top of Linkerd to do their part to fund the project*. This
    change ensures that they can do that, while giving the thriving ecosystem of startups,
    developers, and students the ability to use Linkerd without restriction.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但要实现这些宏伟目标，*我们需要建立业务基于 Linkerd 的公司为项目提供资金支持*。这一变化确保他们能够这样做，同时给予蓬勃发展的初创公司、开发人员和学生使用
    Linkerd 而不受限制的能力。
- en: We'll continue publishing edge releases to the GitHub repo as usual. These have
    always served as a valuable mechanism for early testing and vetting by the community,
    and we hope to see more of this under this new framework.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续像往常一样向 GitHub 仓库发布最新版本。这些版本一直是社区早期测试和审查的宝贵机制，我们希望在这个新框架下能看到更多这样的情况。
- en: 'And to be clear: Linkerd continues to be, and always will be, open source.
    This change is about the release artifacts, not about code, governance, community,
    or anything else. We''ve been open source users, contributors, and advocates since
    long before we created Linkerd, and our commitment to a healthy, inclusive, collaborative,
    and ever-growing open source Linkerd remains as strong as ever.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 并且明确一点：Linkerd 仍然是，并且将永远是，开源的。这一变化关乎发布的构建产物，而不是代码、治理、社区或其他任何方面。在我们创建 Linkerd
    之前，我们就一直是开源用户、贡献者和倡导者，我们对一个健康、包容、协作和不断发展的开源 Linkerd 的承诺仍然坚定不移。
- en: What's next for Linkerd?
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linkerd 的下一步是什么？
- en: You might've noticed that the pace of iteration for Linkerd has increased substantially.
    Over the past 6 months alone we've shipped 12 stable releases, 16 edge releases,
    and merged hundreds and hundreds of branches, while keeping our quality bar as
    high as ever—if not higher. Momentum compounds, and we're excited to tackle the
    next set of challenges.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，Linkerd 的迭代速度显著加快。仅在过去的 6 个月中，我们发布了 12 个稳定版本、16 个边缘版本，并合并了数百个分支，同时保持着高质量的标准，甚至比以往更高。动力是积累的，我们很高兴应对接下来的一系列挑战。
- en: First, there are a couple important features that didn't quite make it into
    2.15.0 that we're going to address as part of subsequent point releases. This
    starts with **extending our support for mesh expansion to include private networks**,
    so that customers who don't have a shared flat network spanning Kubernetes and
    non-Kubernetes applications can make full use of the new mesh expansion capabilities.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，有几个重要特性没有完全包含在 2.15.0 版本中，我们将在随后的点版本中解决这些问题。首先是**扩展我们对网格扩展的支持，以包括私有网络**，这样那些没有跨越
    Kubernetes 和非 Kubernetes 应用程序的共享扁平网络的客户就可以充分利用新的网格扩展功能。
- en: We're also going to **bring our Gateway API and non-Gateway API interfaces up
    to parity** in an upcoming 2.15 point release. Today we have a non-unified set
    of APIs across our Gateway API-based configs and our earlier pre-Gateway API configs,
    and that causes unnecessary friction for users. While we believe that the Gateway
    API is the future, we recognize it's not the present for many users. We're committed
    to supporting our users who are using ServiceProfiles and other pre-Gateway API
    configuration mechanisms, and bringing these two interfaces into parity is vital
    to achieving that goal.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在即将推出的 2.15 点版本中**使我们的网关 API 和非网关 API 接口达到一致**。今天，我们在基于网关 API 的配置和我们早期的非网关
    API 配置之间拥有一组不统一的 API，这给用户带来了不必要的摩擦。虽然我们相信网关 API 是未来，但我们意识到对许多用户来说它还不是现在。我们致力于支持使用
    ServiceProfiles 和其他早期非网关 API 配置机制的用户，并且将这两个接口调整为一致对于实现这一目标至关重要。
- en: '**Support for IPv6** is another short-term priority for Linkerd and we expect
    to have some news regarding that in the near future. We''ve seen increasing demands
    for this from our customers and the required changes are reasonably well-scoped.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**IPv6 支持**是 Linkerd 的另一个短期优先事项，我们预计在不久的将来将有一些消息。我们已经看到客户对此的需求越来越多，所需的更改已经相当明确。'
- en: 'Beyond those smaller features, we''re very excited to work on two big ones
    in the short term: **handling ingress traffic** and **adding control over egress
    traffic**. These are very common requests from customers who want to extend Linkerd''s
    comprehensive yet *simple* layer of traffic control, security, and visibility
    to handle traffic in and out of the cluster, and we have some very exciting ideas
    for how to deliver this.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些较小的功能外，我们非常高兴地在短期内致力于处理**入口流量**和**控制出口流量**这两个重大问题。这些是客户经常提出的要求，他们希望扩展 Linkerd
    的全面而*简单*的流量控制、安全性和可见性层，以处理进出集群的流量，我们对如何实现这一点有一些非常激动人心的想法。
- en: Finally, we continue to investigate other ways of delivering Linkerd, including
    "ambient" and other approaches. While Linkerd's unique Rust microproxy approach
    means it doesn't suffer from the same downsides as Envoy-based service meshes,
    we're not religious about our decisions, and continually evaluate the tradeoffs
    at hand in the interest of operational simplicity for our customers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们继续研究交付 Linkerd 的其他方式，包括“环境”和其他方法。虽然 Linkerd 独特的 Rust 微代理方法意味着它不会遭受与基于 Envoy
    的服务网格相同的缺点，但我们并不固执己见，而是不断评估手头的权衡，以符合我们客户的运维简单性利益。
- en: Getting started with Linkerd 2.15
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用 Linkerd 2.15
- en: You can try Linkerd 2.15.0 via CLI or Helm install. Check out the [getting started
    guide](https://docs.buoyant.io/buoyant-enterprise-linkerd/latest/overview/) and
    happy meshing!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过 CLI 或 Helm 安装尝试 Linkerd 2.15.0。查看[入门指南](https://docs.buoyant.io/buoyant-enterprise-linkerd/latest/overview/)并享受网格！
- en: FAQ
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题解答
- en: So how do I get Linkerd now?
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 那么现在我该如何获得 Linkerd？
- en: You have three options. First, stable releases are now available in the BEL
    Linkerd distribution. These are installable via CLI and Helm charts and look,
    feel, and act just like the stable releases of the past. To get started, follow
    the [instructions here](https://docs.buoyant.io/buoyant-enterprise-linkerd/latest/overview/).
    Note that companies with 50 or more employees must pay to use these stable releases
    in production after May 21st, 2024, but non-production use is unrestricted—so
    feel free to test away.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您有三个选择。首先，稳定版本现在可在 BEL Linkerd 发行版中使用。这些可以通过 CLI 和 Helm 图表进行安装，并且看起来、感觉起来和以前的稳定版本一样。要开始使用，请按照[此处的说明](https://docs.buoyant.io/buoyant-enterprise-linkerd/latest/overview/)操作。请注意，从2024年5月21日起，拥有50名或更多员工的公司必须支付才能在生产环境中使用这些稳定版本，但非生产使用是无限制的，所以可以放心测试。
- en: We also produce edge releases, typically on a weekly basis. These are available
    in the open source repo. See the [Linkerd edge release instructions here](https://linkerd.io/releases/).
    See the notes below on what an edge release is.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还定期发布边缘版本，通常每周一次。这些可以在开源仓库中找到。请参阅[此处的 Linkerd 边缘版本说明](https://linkerd.io/releases/)。有关边缘版本的说明，请参阅下面的注释。
- en: Finally, the source code to Linkerd is available on GitHub, and this is where
    development happens. This code is licensed under the Apache v2 license and is
    freely available to anyone in the world.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Linkerd 的源代码可在 GitHub 上获得，这也是开发的地方。此代码根据 Apache v2 许可证授权，并且向全球任何人免费提供。
- en: What's the difference between edge releases and stable releases?
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 边缘版本和稳定版本有什么区别？
- en: 'All Linkerd development happens "on main": all changes, whether in support
    of upcoming new features, refactors, bug fixes, or something else, land on the
    *main* branch where they are merged together.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Linkerd 开发都发生在“main”上：所有更改，无论是支持即将推出的新功能、重构、错误修复还是其他内容，都会落到*main*分支上，然后合并在一起。
- en: Edge releases contain the latest code in from the main branch at the point in
    time when they were cut. This means they have the latest features and fixes, but
    it also means they don't have stability guarantees. Upgrading between edge releases
    may involve breaking changes, and may involve partial features that are later
    modified or backed out.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘版本包含从主分支剪切时的最新代码。这意味着它们具有最新的功能和修复，但也意味着它们没有稳定性保证。在边缘版本之间升级可能涉及到破坏性更改，可能涉及后续修改或取消的部分功能。
- en: Stable releases are designed to introduce minimal change to an existing system
    and come with documented stability guarantees. In stable releases, we take the
    specific bug fix changes (or, occasionally, feature additions) and "back port"
    these changes against the code in the previous stable version. This minimizes
    the overall delta between releases. We also do any additional work required to
    ensure that upgrades and rollbacks between stable releases are seamless and contain
    no breaking changes.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 稳定版本旨在对现有系统引入最小变更，并附带记录的稳定性保证。在稳定版本中，我们将具体的错误修复更改（或偶尔的功能添加）“向后移植”这些更改到前一个稳定版本的代码中。这最小化了版本之间的整体差异。我们还会做任何额外的工作，以确保稳定版本之间的升级和回滚是无缝的，并且不包含任何破坏性更改。
- en: 'In short: edge releases optimize for being on the bleeding edge; stable releases
    optimize for stability and minimal change.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之：边缘版本优化于处于最前沿；稳定版本优化于稳定性和最小变更。
- en: What is Buoyant Enterprise for Linkerd?
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Buoyant Enterprise for Linkerd 是什么？
- en: BEL is our production-ready distribution of Linkerd, from the same team that
    builds Linkerd itself. It is a distribution of Linkerd plus a set of additional
    tools, features, and testing designed for sustained, production use.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: BEL 是我们 Linkerd 的生产就绪发行版，由构建 Linkerd 本身的同一团队构建。这是 Linkerd 的发行版加上一套额外的工具、功能和测试，专为持续的生产使用而设计。
- en: Despite its name, BEL can be used by anyone, enterprise or not, to build secure,
    reliable, and observable Kubernetes platforms.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管其名称为 BEL，但任何人都可以使用它来构建安全、可靠和可观察的 Kubernetes 平台，无论是企业还是非企业用户。
- en: BEL does feature a set of additional tools and features, including a dynamic
    zone-aware load balancer which can dramatically cut cloud spend without the reliability
    sacrifices of Topology-Aware Hints; a Kubernetes operator that automates Linkerd
    installs and upgrades; tools for managing Linkerd's comprehensive L7 authorization
    policies; and much more. See the [BEL docs for more](https://docs.buoyant.io/buoyant-enterprise-linkerd/latest/overview/).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: BEL 包含一套额外的工具和功能，包括动态区域感知负载均衡器，可以显著降低云端支出，而无需牺牲拓扑感知提示的可靠性；一个自动化 Linkerd 安装和升级的
    Kubernetes 运算符；用于管理 Linkerd 全面的 L7 授权策略的工具；以及更多内容。有关更多信息，请参阅[BEL 文档](https://docs.buoyant.io/buoyant-enterprise-linkerd/latest/overview/)。
- en: Why are you making this change?
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么要做出这个变更？
- en: This is necessary for us to continue delivering this incredible project that
    so many thriving businesses are built on.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这对我们继续提供这个许多蓬勃发展的企业所依赖的令人难以置信的项目至关重要。
- en: The Linkerd maintainers are some of the world's best engineers who tackle some
    of computing's most difficult problems. We're a small but mighty team of software
    engineers, network programmers, and distributed systems experts. We love our jobs,
    but this is also some of the hardest work in the cloud native ecosystem. And the
    quality bar for Linkerd is astronomical! Linkerd is used to power 911 call centers,
    to handle sensitive medical and financial data, and to protect Kubernetes clusters
    around the world.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 维护人员是世界上最优秀的工程师之一，他们解决了一些计算中最困难的问题。我们是一支由软件工程师、网络程序员和分布式系统专家组成的小而强大的团队。我们热爱我们的工作，但这也是云原生生态系统中一些最艰难的工作。而且，Linkerd
    的质量标准是极高的！Linkerd 用于驱动 911 呼叫中心，处理敏感的医疗和金融数据，并保护全球范围内的 Kubernetes 集群。
- en: We have SO MUCH exciting and impactful work ahead of us—as we said above, Linkerd
    2.15 is just the next step in a long journey of compounding value.  We also have
    an obligation to make sure every Linkerd adopter is getting reliable, secure software
    that they can deploy with complete confidence, and we take that responsibility
    seriously.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有非常多令人兴奋和有影响力的工作要做——正如我们上面所说的，Linkerd 2.15 只是一个长期增值旅程的下一个步骤。我们还有责任确保每个 Linkerd
    采用者都获得可靠、安全的软件，他们可以完全信任地部署。我们非常认真对待这一责任。
- en: 'But for us to do that work and maintain that quality, there''s only one sustainable
    path: we need the many, many companies around the world that are building their
    businesses on top of Linkerd to do their part to fund the project. Continuing
    to deliver this incredible project for free while some of the world''s largest
    businesses use it without supporting it is not a long-term viable path for Linkerd.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了做好这项工作并保持那种质量，只有一条可持续的道路：我们需要世界各地正在以 Linkerd 为基础构建业务的众多公司尽力为项目提供资金支持。在一些世界上最大的公司无偿使用
    Linkerd 的情况下继续免费提供这个令人难以置信的项目并不是 Linkerd 的长期可行路径。
- en: What about future Linkerd 2.14 point releases?
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 未来 Linkerd 2.14 点版本怎么办？
- en: Linkerd 2.14.10 was the last stable release we shipped to open source. Upcoming
    Linkerd 2.14 point releases, including 2.14.11 and beyond, will only be available
    as BEL releases.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Linkerd 2.14.10 是我们向开源发布的最后一个稳定版本。即将推出的 Linkerd 2.14 点版本，包括 2.14.11 及更高版本，将仅作为
    BEL 版本提供。
- en: Who has to pay for BEL?
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 谁需要为 BEL 支付费用？
- en: Anyone can download and deploy BEL in non-production situations. Companies with
    fewer than 50 employees do not need to pay to use BEL in production.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 任何人都可以在非生产环境中下载并部署 BEL。拥有少于 50 名员工的公司无需支付使用 BEL 的生产费用。
- en: After May 21st, 2024, companies with 50 or more employees must pay to use BEL
    in production. See [our pricing page](https://buoyant.io/pricing/) for details.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2024 年 5 月 21 日之后，拥有 50 名或以上员工的公司必须支付 BEL 的生产费用。有关详细信息，请查看[我们的定价页面](https://buoyant.io/pricing/)。
- en: How much does BEL cost?
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: BEL 的费用是多少？
- en: See [our pricing page](https://buoyant.io/pricing/) for details.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看[我们的定价页面](https://buoyant.io/pricing/)获取详细信息。
- en: It's important to us to accommodate non-profits, high-volume use cases, and
    other organizations with unique needs. If you're in one of these categories, please
    [contact us to start a conversation](https://buoyant.io/contact).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们来说，能够照顾非营利组织、高流量使用案例以及其他具有独特需求的组织非常重要。如果您属于这些类别之一，请[与我们联系开始对话](https://buoyant.io/contact)。
- en: How do we pay for BEL?
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何支付 BEL 的费用？
- en: BEL is purchasable on an annual basis. [Contact us](https://buoyant.io/contact)
    to get the process started.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: BEL 可以按年购买。[联系我们](https://buoyant.io/contact)开始流程。
- en: I love Linkerd but I'm just an engineer. I don't know how to ask my company
    to pay for something. What should I do?
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我喜欢 Linkerd，但我只是一名工程师。我不知道如何要求公司为某物支付费用。我该怎么做？
- en: Don't worry, we handle this all the time. We'll help you get sorted out. [Contact
    us](https://buoyant.io/contact) to get the process started. We're friendly, we
    promise!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 别担心，我们经常处理这种情况。我们会帮助您解决问题。[联系我们](https://buoyant.io/contact)以开始流程。我们很友好，保证！
- en: I hate this. Who can I yell at?
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我讨厌这一点。我可以向谁发火？
- en: Hi there, this is William Morgan, Buoyant's CEO. You can email me at william@buoyant.io
    or you can come find me in person at Kubecon EU in Paris next month. I'm the one
    who made this decision. (I'm also, perhaps not coincidentally, the person who
    pays the Linkerd maintainers.) Come talk to me and I'm happy to explain exactly
    why I did it and all the alternatives and options we considered.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你好，我是 Buoyant 的首席执行官威廉·摩根。您可以通过电子邮件联系我 william@buoyant.io，也可以在下个月的巴黎 Kubecon
    EU 大会上亲自找到我。我是做出这个决定的人。（也许并非巧合，我也是支付 Linkerd 维护人员工资的人之一。）欢迎与我交流，我很乐意解释为何做出这个决定以及我们考虑的所有备选方案和选项。
- en: ‍
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ‍
- en: ‍
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ‍
