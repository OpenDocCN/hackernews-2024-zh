["```\nwith true <- is_email_address?(email),\n true <- EmailAddresses.is_available(email) do\n ...\nelse\n false ->\n # Return either '{:error, :bad_request} or '{:error, :conflict}'\nend\n```", "```\nwith {:is_email, true} <- {:is_email, is_email_address?(email)},\n {:is_available, true} <- {:is_available, EmailAddresses.is_available(email)} do\n ...\nelse\n {:is_email, false} ->\n {:error, :bad_request}\n\n {:is_available, false} ->\n {:error, :conflict}\nend\n```", "```\nis_email_address(email).map_err(bad_request)?;\nis_available(email).map_err(conflict)?;\n```", "```\nlet db = Db.open(\"...\")?;\ndb.query(\"stuff\");\ndb.insert(\"other stuff\");\nstash_into_mutable_global(db);\n\n// in some other function\nlet local_db_reference = get_db_from_mutable_global()\nlocal_db_reference.query(\"...\")\n// local_db goes out of scope\n```", "```\nDB.open(\"...\")\nDB.query(\"stuff\")\nDB.insert(\"other stuff\")\n\n// in some other function\nDB.query(\"...\")\n```", "```\ndefmodule LinkrotWeb.Components.Navbar do\n  use Phoenix.Component\n  ...\n\n  attr :page_title, :string, required: false, default: \"\"\n  defp navitem(%{title: _, path: _, name: _} = assigns) do: ...\n  defp rnavitem(%{title: _, path: _, name: _, label: _, first: _} = assigns) do: ...\n\n  def navbar(assigns) do\n    links = ...\n    assigns = assign(assigns, :links, links)\n    ~H\"\"\"\n    <ul class=\"navbar\">\n      <%= for {name, path} <- @links do %>\n        <.navitem title={@title} name={name} path={path}/>\n      <% end %>\n\n      <.rnavitem title={@title} path={~p\"/users/register\"} name=\"Register\" label=\"Register\" first={true} />\n      <.rnavitem title={@title} path={~p\"/users/log_in\"} name=\"Log in\" label=\"Log in\" first={false} />\n    </ul>\n    \"\"\"\n  end\nend\n```", "```\nwarning: undefined attribute \"name\" for component LinkrotWeb.Components.Navbar.navitem/1\n  lib/linkrot_web/components/navbar.ex:61: (file)\n\nwarning: undefined attribute \"path\" for component LinkrotWeb.Components.Navbar.navitem/1\n  lib/linkrot_web/components/navbar.ex:61: (file)\n\nwarning: undefined attribute \"title\" for component LinkrotWeb.Components.Navbar.navitem/1\n  lib/linkrot_web/components/navbar.ex:61: (file)\n```", "```\n def navbar(assigns) do\n    attr(assigns, [\n      [:page_title, :string, required: false, default: \"\"],\n      [:current_user, :string, required: false, default: nil],\n    ])\n    links = ...\n```"]