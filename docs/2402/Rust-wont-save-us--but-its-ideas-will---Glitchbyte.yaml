- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:44:11'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Rust wont save us, but its ideas will • Glitchbyte
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://glitchbyte.io/posts/rust-wont-save-us/](https://glitchbyte.io/posts/rust-wont-save-us/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**UPDATE 2/10/2024**: After receiving some constructive feedback, the example
    errors were fixed.'
  prefs: []
  type: TYPE_NORMAL
- en: What are we saving?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Recently, I came across this article titled ”[Rust Won’t Save Us: An Analysis
    of 2023’s Known Exploited Vulnerabilities](https://www.horizon3.ai/analysis-of-2023s-known-exploited-vulnerabilities/)“.'
  prefs: []
  type: TYPE_NORMAL
- en: Being the clickbait it is, I clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quick background on me: I’ve worked in cybersecurity for almost 10 years. I
    know cybersecurity way more than I know development.'
  prefs: []
  type: TYPE_NORMAL
- en: My day job is securing infrastructure and code.
  prefs: []
  type: TYPE_NORMAL
- en: An article like this piques my interest.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve been writing programs in Rust for a few years now.
  prefs: []
  type: TYPE_NORMAL
- en: I started writing Rust because of its claim to memory safety, and it became
    my favorite language to use. I’ve even managed to ship Rust to prod in one of
    the coolest projects I’ve had the honor of being apart of.
  prefs: []
  type: TYPE_NORMAL
- en: So what is this article talking about?
  prefs: []
  type: TYPE_NORMAL
- en: 'TL;DR: Rust was made to solve memory-related vulnerabilities and issues, but
    that only makes up 19.5% of the most exploited vulnerabilities in 2023\. Routing
    and Path abuse exploits tied for second place with memory vulns, followed by Default
    Secrets (4.9%), Request Smuggling(4.9%), and Weak Encryption (2.4%). The most
    abused exploit? Insecure Exposed Functions (IEF), at 48.8%.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The article goes onto making the most generic recommendations any cybersec
    professional would know:'
  prefs: []
  type: TYPE_NORMAL
- en: Vendors 1\. Develop the depth of knowledge of your engineers in the frameworks
    they use 2\. Harden, standardize, and audit the use of those frameworks across
    products 3\. Enable and expose verbose logging for your products
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Developers 1\. Assume all code you write is reachable from an unauthenticated
    context 2\. Practice defense-in-depth programming and don’t make it easy for an
    attacker to shell out
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Defenders 1\. Reduce any attack surface exposed to the internet if its not needed
    there 2\. Proactively enable logging, and remote logging if possible, for all
    products that touch the internet
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Researchers 1\. Look for bugs in the places frameworks come together
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Therefore, Rust won’t save us.
  prefs: []
  type: TYPE_NORMAL
- en: There is some truth to that, and the advice given by the article is also correct.
  prefs: []
  type: TYPE_NORMAL
- en: But it doesn’t dig into why Rust was made in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: It doesn’t ask the question “Can we reduce/eliminate IEF abuse similar to how
    we reduced memory vulnerabilities?”
  prefs: []
  type: TYPE_NORMAL
- en: Looking at IEF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What are Insecure Exposed Functions, exactly?
  prefs: []
  type: TYPE_NORMAL
- en: 'Lets take a look at the [MITRE](https://cwe.mitre.org/data/definitions/749.html)
    definition:'
  prefs: []
  type: TYPE_NORMAL
- en: The product provides an Applications Programming Interface (API) or similar
    interface for interaction with external actors, but the interface includes a dangerous
    method or function that is not properly restricted.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This weakness can lead to a wide variety of resultant weaknesses, depending
    on the behavior of the exposed method. It can apply to any number of technologies
    and approaches, such as ActiveX controls, Java functions, IOCTLs, and so on.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The exposure can occur in a few different ways
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The function/method was never intended to be exposed to outside actors.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: The function/method was only intended to be accessible to a limited set of actors,
    such as Internet-based access from a single web site.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: IEF is access to functions the outside world should never have had access to
    in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Private by default
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Lets look at an example from the MITRE page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have a Java method `removeDatabase` that will delete a database
    with the name specified in the parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The problem is this method should never have been public. By declaring it public,
    the rest of the application has access to this method, even though it should be
    restricted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Java has a few keywords for deciding the level of access the rest of the codebase
    should have:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`protected`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*no modifier*, where you don’t specify an access level; package-private default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now lets take that same example and see what it would look like in Rust.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Rust only has `pub` as a keyword for determining whether an item has a public
    or private scope.
  prefs: []
  type: TYPE_NORMAL
- en: By default, all of Rust code is inherently private.
  prefs: []
  type: TYPE_NORMAL
- en: In Java, if no modifier is added, Java assumes is has package-private access,
    which is package-level rather than item-level.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, visibility control in Rust is explicit and controlled through
    the `pub` modifier; Java’s visibility control is implicit if no modifier is specified,
    allowing access control based on their location within the codebase. If a modifier
    is specified, then it is explicit.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for the Rust function to be public, we would have to declare it public:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This example is a simple scoping error, or laziness.
  prefs: []
  type: TYPE_NORMAL
- en: It’s easy to miss, but Rust is less likely to let you make this mistake.
  prefs: []
  type: TYPE_NORMAL
- en: “Okay, so it’s private by default, big deal. Theres other ways of improperly
    accessing functions and abusing them.”
  prefs: []
  type: TYPE_NORMAL
- en: IEF in the Wild
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’re going to look at [CVE-2023-22515: Atlassian Confluence](https://attackerkb.com/topics/Q5f0ItSzw5/cve-2023-22515/rapid7-analysis)
    vulnerability and how we can potentially solve it.'
  prefs: []
  type: TYPE_NORMAL
- en: What was the problem?
  prefs: []
  type: TYPE_NORMAL
- en: The application insecurely exposed an endpoint, `/server-info.action?bootstrapStatusProvider.applicationConfig.setupComplete=false`,
    that allows modification to the server’s configuration state. Setting this state
    to false allows an attacker to re-enter application setup and add an administrative
    user.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We must note that the class `com.atlassian.confluence.core.actions.ServerInfoAction`
    extends the class `com.atlassian.confluence.core.ConfluenceActionSupport`. This
    will be important during exploitation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Rust doesn’t have inheritance, which makes it less likely to accidentally inherit
    unintended behavior from a parent class.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, Rust offers other mechanisms for code reuse and polymorphism.
  prefs: []
  type: TYPE_NORMAL
- en: 'The decision to omit inheritance from Rust by its designers:'
  prefs: []
  type: TYPE_NORMAL
- en: simplifies the language, reducing the potential for inheritance-related issues
    such as the “diamond problem” or “fragile base class” problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: encourages composition over inheritance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: provides trait-based polymorphism as an alternative, allowing you to define
    a behavior that types can implement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inheritance can be useful in certain contexts, but Rust’s design philosophy
    prioritizes simplicity, safety, and expressiveness, leaning in favor of composition,
    traits, and other language features.
  prefs: []
  type: TYPE_NORMAL
- en: We know we can leverage the XWorks2 feature of supplying HTTP parameters to
    call setter methods on objects. We need to identify an unauthenticated endpoint
    whose Action object also exposes a suitable get method that will allow us to access
    the application configuration.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Remembering the class `com.atlassian.confluence.core.actions.ServerInfoAction`,
    seen during diffing, we explore the base class it inherits from, `com.atlassian.confluence.core.ConfluenceActionSupport`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can see this class has a getter method `getBootstrapStatusProvider` which
    returns the `BootstrapStatusProviderImpl` instance we are looking for.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`BootstrapStatusProviderImpl`, in turn, has a getter method `getApplicationConfig`
    to return the application’s configuration.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we can see the class `com.atlassian.config.ApplicationConfig` implements
    the setter method `setSetupComplete`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Rust’s approach to mutability would have helped here.
  prefs: []
  type: TYPE_NORMAL
- en: If you want setters to be mutable, then you’d need to make that explicit.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at Routing Abuse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Routing abuse tied for second with memory corruption issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [example Horizon3 provided](https://www.horizon3.ai/moveit-transfer-cve-2023-34362-deep-dive-and-indicators-of-compromise/)
    involves a security advisory by Progress for their MOVEit Transfer application:'
  prefs: []
  type: TYPE_NORMAL
- en: Progress released a [security advisory](https://community.progress.com/s/article/MOVEit-Transfer-Critical-Vulnerability-31May2023)
    for their MOVEit Transfer application which detailed a SQL injection leading to
    remote code execution and urged customers to update to the latest version. The
    vulnerability, CVE-2023-34362, at the time of release was believed to have been
    exploited in-the-wild as a 0-day dating back at least 30 days.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The function that extracts the `X-siLock-Transaction` header to compare its
    value to `folder_add_by_path` has a bug. **It will incorrectly extract headers**
    that end in `X-siLock-Transaction`, so an attacker can trick the function to passing
    the request onto the machine2.aspx by providing a header such as `xX-siLock-Transaction=folder_add_by_path`
    and additionally providing the correctly formatted header with our own arbitrary
    transaction to be executed by the machine2.aspx endpoint.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Using Rust’s [http::header::HeaderName](https://docs.rs/http/1.0.0/http/header/struct.HeaderName.html)
    would have caught this error since the headers passed would not have been treated
    as a string, but to known typed headers.
  prefs: []
  type: TYPE_NORMAL
- en: This http lib is used in almost every Rust web framework for header parsing.
  prefs: []
  type: TYPE_NORMAL
- en: The right way to do header parsing, in Rust, requires creating a `HeaderName`
    and using that to get the header, rather than treating header names as strings.
  prefs: []
  type: TYPE_NORMAL
- en: This is one advantage of Rust’s type system.
  prefs: []
  type: TYPE_NORMAL
- en: It’s designed to be expressive, allowing developers to express complex ideas
    and patterns into a concise and readable manner.
  prefs: []
  type: TYPE_NORMAL
- en: Rusts Memory Safety
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It worth noting Rust eliminates most memory corruption issues, which would take
    care of ~20% of vulnerabilities exploited in 2023.
  prefs: []
  type: TYPE_NORMAL
- en: This is pretty huge when you think about the reports [Microsoft](https://www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/)
    and [Google Chrome](https://www.zdnet.com/article/chrome-70-of-all-security-bugs-are-memory-safety-issues/)
    have dropped, stating 70% of their vulnerabilities were memory-safety related.
  prefs: []
  type: TYPE_NORMAL
- en: Rust doesn’t even have `NULL`, which [Tony Hoare called his “One Billion Dollar
    Mistake”](https://www.youtube.com/watch?v=ybrQvs4x0Ps).
  prefs: []
  type: TYPE_NORMAL
- en: We wont be having NULL-pointer exceptions issues in Rust anytime soon (sorry
    Java).
  prefs: []
  type: TYPE_NORMAL
- en: The hero we need
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The average developer is more concerned with shipping the product now and worry
    about fixing bugs later than how security can be designed from the start.
  prefs: []
  type: TYPE_NORMAL
- en: Security is an afterthought in many processes, something that gets bolted on.
  prefs: []
  type: TYPE_NORMAL
- en: For security to work, it has to be there from the start.
  prefs: []
  type: TYPE_NORMAL
- en: You can’t add the egg onto your cake once you’ve baked it; you need to add it
    to the mixture.
  prefs: []
  type: TYPE_NORMAL
- en: Security is a process of layering many defensive techniques on top of each other
    in an effort to thwart attackers.
  prefs: []
  type: TYPE_NORMAL
- en: Its a constant cat and mouse game.
  prefs: []
  type: TYPE_NORMAL
- en: The hero we need isn’t Rust.
  prefs: []
  type: TYPE_NORMAL
- en: Rust wont address all vulnerabilities and magically fix them.
  prefs: []
  type: TYPE_NORMAL
- en: However, Rust has inherent qualities from its design philosophy that make it
    safer to use than the average language.
  prefs: []
  type: TYPE_NORMAL
- en: That is our hero.
  prefs: []
  type: TYPE_NORMAL
- en: Rust may not save us, but the ideas it embodies will.
  prefs: []
  type: TYPE_NORMAL
- en: Private by default
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Immutable by default
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type-safety checked at compile time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Borrow checker and ownership model reducing memory corruption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safe abstractions and idiomatic patterns that prevent common security vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rust’s design philosophy is a step in the right direction.
  prefs: []
  type: TYPE_NORMAL
- en: Rust doesn’t rely on the developer to put in place all the details. It lifts
    responsibility from the developer so they can worry more on developing and less
    on safety/correctness.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine using a language that prevents all these kind of vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Why do we talk about around programming languages as if there isn’t a way to
    improve their inherent security by design as well?
  prefs: []
  type: TYPE_NORMAL
- en: Besides all the recommendations Horizon made, programming languages should also
    be among them.
  prefs: []
  type: TYPE_NORMAL
- en: We should expect all our languages to be safer.
  prefs: []
  type: TYPE_NORMAL
