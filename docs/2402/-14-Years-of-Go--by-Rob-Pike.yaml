- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 13:25:05'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 13:25:05
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: '"14 Years of Go" by Rob Pike'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '"14 年的 Go" 由 Rob Pike'
- en: 来源：[https://www.codereliant.io/14-years-of-go/](https://www.codereliant.io/14-years-of-go/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.codereliant.io/14-years-of-go/](https://www.codereliant.io/14-years-of-go/)
- en: At the closing talk of GopherConAU 2023, [Rob Pike](https://en.wikipedia.org/wiki/Rob_Pike?ref=codereliant.io),
    one of the original creators of Go, shared a retrospective on the 14-year journey
    of the Go programming language. Celebrating the anniversary of Go's launch as
    an open-source project, Pike offered a personal, rather than an official Google
    or Go team perspective. Check it out! But if you are short on time check our notes
    below.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GopherConAU 2023 的闭幕演讲中，[Rob Pike](https://en.wikipedia.org/wiki/Rob_Pike?ref=codereliant.io)，Go
    的创始人之一，分享了对 Go 编程语言 14 年历程的回顾。作为一个庆祝 Go 开源项目发布周年的活动，Pike 提供了个人而不是官方 Google 或 Go
    团队的观点。快去看看吧！但如果你时间紧张，可以查看我们下面的笔记。
- en: '**Upd**: a stranger from hackernews pointed out that Pike also posted a detailed
    text version of this talk [here](https://commandcenter.blogspot.com/2024/01/what-we-got-right-what-we-got-wrong.html?ref=codereliant.io).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**Upd**：一位来自 HackerNews 的陌生人指出，Pike 还发布了这次演讲的详细文本版本 [here](https://commandcenter.blogspot.com/2024/01/what-we-got-right-what-we-got-wrong.html?ref=codereliant.io)。'
- en: '[https://www.youtube.com/embed/yE5Tpp2BSGw?feature=oembed](https://www.youtube.com/embed/yE5Tpp2BSGw?feature=oembed)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/embed/yE5Tpp2BSGw?feature=oembed](https://www.youtube.com/embed/yE5Tpp2BSGw?feature=oembed)'
- en: VIDEO
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 视频
- en: Beyond a Programming Language
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 超越编程语言
- en: Pike told the audience that Go's inception was driven not by a desire to create
    a new programming language but to address the complexities of modern server software
    development. Highlighting goals like improved build times, effective dependency
    management, and efficient multicore CPU utilization, he argued that Go's real
    triumphs extend into tooling, deployment, and community engagement rather than
    just language design.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Pike 告诉观众，Go 的发端并不是出于创建新的编程语言的愿望，而是为了解决现代服务器软件开发的复杂性。他强调了改进构建时间、有效的依赖管理和高效的多核
    CPU 利用等目标，他认为 Go 的真正成功之处在于工具、部署和社区参与，而不仅仅是语言设计。
- en: Successes Celebrated
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 庆功大会
- en: 'Pike emphasized several aspects where Go notably succeeded:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Pike 强调了 Go 显著成功的几个方面：
- en: '**Specification and Multiple Implementations**: Go''s formal specification
    from the outset allowed for multiple compatible compiler implementations, providing
    a diverse ecosystem.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规范和多重实现**：Go 从一开始就有正式的规范，允许多个兼容的编译器实现，提供了一个多样化的生态系统。'
- en: '**Portability:** Go was designed to support easy cross-compilation, allowing
    developers to write code on any platform and compile it for any other.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可移植性**：Go 被设计支持轻松的交叉编译，允许开发人员在任何平台上编写代码，并将其编译为任何其他平台上的代码。'
- en: '**Compatibility:** Go team has been committed to a compatibility promise, ensuring
    that code written for earlier versions continues to compile and run correctly
    with newer versions. This commitment has been crucial for developers relying on
    Go for long-term projects, providing them with confidence that their codebase
    will remain stable over time.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**兼容性**：Go 团队一直致力于兼容性承诺，确保为早期版本编写的代码在新版本中继续编译和运行正确。这一承诺对于依赖 Go 进行长期项目开发的开发人员至关重要，让他们对代码库会随时间保持稳定感到自信。'
- en: '**Concurrency Model**: Go''s approach to concurrency, leveraging goroutines
    and channels, was highlighted as a significant advancement, making concurrent
    programming more accessible and safer.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并发模型**：Go 的并发方式，利用 goroutines 和 channels，被强调为一个重大进步，使并发编程更加易于使用和安全。'
- en: '**Standard Library**: The comprehensive standard library was praised for providing
    a solid foundation for developing modern server software, unifying the community
    and preventing many libraries from rising at early stages.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准库**：全面的标准库因提供了现代服务器软件开发的坚实基础而受到赞扬，统一了社区，防止了许多库在早期阶段的崛起。'
- en: '**Interfaces**: Pike emphasized that the way interfaces integrate into Go,
    enabling polymorphism through composition, is one of the most distinctive and
    successful aspects of the language. The interface mechanism aligns well with Go''s
    focus on simplicity, readability, and organic code design.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接口**：Pike 强调了接口在 Go 中的整合方式，通过组合实现了多态性，是语言中最独特和成功的方面之一。接口机制与 Go 的简单性、可读性和有机代码设计密切相关。'
- en: '**Tooling**: The reliability, speed, and ease of use of the Go toolchain, including
    the compiler, linker, and package manager, were highlighted as key factors in
    Go''s adoption. Tools like `go fmt` and `go vet` ensure code consistency and quality,
    aiding in the maintenance and collaboration of large codebases.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具：** 强调了Go工具链的可靠性、速度和易用性，包括编译器、链接器和包管理器，这些是Go语言被广泛采用的关键因素。像`go fmt`和`go
    vet`这样的工具确保了代码的一致性和质量，有助于维护和合作大型代码库。'
- en: '**Community and Documentation:** The vibrant and supportive Go community was
    acknowledged for its contributions to enriching the Go ecosystem with libraries,
    tutorials, and blog posts. Pike also commended the extensive and clear documentation
    that has significantly facilitated the onboarding of new developers.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区和文档：** 被认可的活跃而支持性的Go社区为丰富Go生态系统做出了贡献，提供了库、教程和博客文章。Pike还赞扬了广泛而清晰的文档，大大促进了新开发人员的入职。'
- en: Addressing Criticisms
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 解决批评
- en: While acknowledging Go's widespread adoption and success in various industries,
    Pike did areas of contention, such as error handling, the initial absence of generics,
    and the limitations in reflection capabilities and performance. He expressed personal
    regrets and areas for improvement, including the standard library and safety measures
    in the compiler.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管承认Go在各个行业被广泛采用并取得成功，Pike也提到了一些争议，如错误处理、最初缺乏泛型以及反射能力和性能上的限制。他表达了个人的遗憾和改进方向，包括标准库和编译器中的安全措施。
- en: Looking Forward
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 展望未来
- en: Pike's talk also looked to the future, suggesting areas where Go could continue
    to evolve, such as improving compile-time safety checks and exploring memory management
    strategies like arenas for specific use cases. He underscored the importance of
    balancing innovation with Go's core principles of simplicity and efficiency.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Pike的演讲也展望了未来，提出了Go语言可以继续发展的领域，例如改进编译时的安全检查，探索像特定用例的内存管理策略（如arena）等。他强调了在创新与Go的核心原则——简单性和效率之间取得平衡的重要性。
- en: As Go continues to mature, its journey offers lessons in language design, community
    building, and the iterative process of software development.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Go语言的不断成熟，其发展历程为语言设计、社区建设以及软件开发的迭代过程提供了经验教训。
- en: Join our weekly Newsletter for more insights!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的每周简报获取更多见解！
