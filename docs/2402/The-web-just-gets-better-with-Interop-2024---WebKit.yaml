- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:29:34'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: The web just gets better with Interop 2024 | WebKit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://webkit.org/blog/14955/the-web-just-gets-better-with-interop/](https://webkit.org/blog/14955/the-web-just-gets-better-with-interop/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The web is amazing. It makes collaborating, learning, and connecting easy for
    billions of people, because it’s intentionally designed to run on radically different
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: It’s your job as a web developer to ensure your project works in every browser
    and for every user — and that can be hard to do. It’s a far easier undertaking
    when browsers have identical implementations of the web technology you use.
  prefs: []
  type: TYPE_NORMAL
- en: Identical implementations are accomplished through the web standards process,
    where people collaborate together to write extremely detailed technical documents
    that define each new web technology — right down to how website bugs should work.
  prefs: []
  type: TYPE_NORMAL
- en: One way to check and see if browsers follow the web standards is through automated
    testing. There are several shared repositories of such tests, including [Web Platform
    Tests](https://web-platform-tests.org/). WPT contains over 1.8 million tests,
    of which over 95% pass in all of the major browsers.
  prefs: []
  type: TYPE_NORMAL
- en: The Interop Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Interop project aims to improve interoperability by encouraging browser
    engine teams to look deeper into specific focus areas. Now, for a third year,
    Apple, [Bocoup](https://bocoup.com/blog/interop-2024), [Google](https://web.dev/blog/interop-2024),
    [Igalia](https://www.igalia.com/2024/interop-2024-launches.html), [Microsoft](https://blogs.windows.com/msedgedev/2024/02/01/microsoft-edge-and-interop-2024/),
    and [Mozilla](https://hacks.mozilla.org/2024/02/announcing-interop-2024/) pooled
    our collective expertise and selected a specific subset of automated tests for
    2024.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the technologies chosen have been around for a long time. Other areas
    are brand new. By selecting some of the highest priority features that developers
    have avoided for years because of their bugs, we can get them to a place where
    they can finally be relied on. And by selecting exciting new technology, we can
    ensure it’s interoperable from the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: To better understand where interoperability is going in the future, let’s first
    take a look at the impact of Interop 2023.
  prefs: []
  type: TYPE_NORMAL
- en: Interop 2023
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Interop 2023](https://webkit.org/blog/13706/interop-2023/) was even more of
    an overwhelming success than [Interop 2022](https://webkit.org/blog/12288/working-together-on-interop-2022/).
    In January 2023, 48% of the chosen tests passed in all three of the major browser
    engines (in those shipped to users: Chrome and Firefox for desktop Linux, and
    Safari on macOS Monterey). A year later, that pass rate rose to 95% (in Chrome
    Dev and Firefox Nightly for desktop Linux, and Safari Technology Preview on macOS
    Ventura).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of the graph of results from January to December 2023, available
    at https://wpt.fyi/interop-2023](img/f0700a3c3be54f2a2fa3e674306015de.png)'
  prefs: []
  type: TYPE_IMG
- en: The success of Interop 2023, seen on the [“Experimental” dashboard](https://wpt.fyi/interop-2023).
    The “Interop” line, in dark green, shows the percentage of tests that passed in
    all three — Chrome Dev, Firefox Nightly, and Safari Technology Preview.
  prefs: []
  type: TYPE_NORMAL
- en: What did Interop 2023 accomplish?
  prefs: []
  type: TYPE_NORMAL
- en: It ensured that all browsers have full support for P3 color, seven years after
    it started shipping.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form controls now support vertical writing modes, for the first time in the
    web’s history.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS `border-image` now works as originally intended.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subgrid, Container Queries, `:has()`, Motion Path, CSS Math Functions, `inert`
    and `@property` are now supported in every modern browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved Web APIs include Offscreen Canvas, Modules in Web Workers, Import Maps,
    Import Assertions, and JavaScript Modules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The entire Media Queries 4 specification is now supported everywhere, with easier
    to use syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Components got a boost with `adoptedStyleSheets`, `ElementInternals`, Form-Associated
    Custom Elements, and the basic behavior of Shadow DOM and Custom Elements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful CSS pseudo-classes can now be relied on, with consistent cross-browser
    support for `:nth-child()`, `:nth-last-child()`, `:modal`, `:user-valid`, and
    `:user-invalid`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feature queries now have new support for detecting font features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Font Palettes provide robust support for color fonts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Significant progress made improving CSS Masking, HTML Forms, Pointer and Mouse
    Events, Scrolling, Transforms, URL, WebCodecs, and a bucket of bugs causing web
    compat issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[And more](https://webkit.org/blog/13706/interop-2023/#focus-areas).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We hope this work gives you a renewed sense of confidence to use these technologies.
    If you found any of them hard-to-use in the past, give them another try.
  prefs: []
  type: TYPE_NORMAL
- en: Interop 2023 had twenty-six focus areas, twenty of which are being retired as
    a success. Work will continue on Custom Properties, Pointer and Mouse Events,
    URL, and a new grouping called “Layout” — consisting of Flexbox, Grid, and Subgrid.
  prefs: []
  type: TYPE_NORMAL
- en: Interop 2024
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we are doing it all again for 2024\. Ninety-six focus area proposals were
    submitted for consideration. Ultimately, sixteen were chosen. Grouping some of
    the new proposals together, and continuing some of the work from 2023, gives Interop
    2024 a total of seventeen focus areas.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Interop 2024 dashboard](img/1d51a67791bd3b85055affa1e9ce5362.png)'
  prefs: []
  type: TYPE_IMG
- en: The Interop 2024 dashboard, looking at the “stable” browsers (those currently
    in the hands of everyday people). Coincidentally, the overall Interop score is
    once again starting at 48%.
  prefs: []
  type: TYPE_NORMAL
- en: New this year, Microsoft Edge now has its own column on the [Interop dashboard](https://wpt.fyi/interop-2024?stable).
    This currently represents Edge and Edge Dev running on Windows 10.
  prefs: []
  type: TYPE_NORMAL
- en: The 2024 Focus Areas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Accessibility
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Interop 2023 included an Accessibility Investigation project. Led by Apple’s
    accessibility team, the group worked diligently to create new accessibility testing
    infrastructure for WPT, and write over [1300 new accessibility tests](https://wpt.fyi/results/?label=master&label=experimental&aligned&q=label%3Aaccessibility).
    These tests have now been included in Interop 2024 as a focus area, encouraging
    browsers to increase their support.
  prefs: []
  type: TYPE_NORMAL
- en: The majority of new accessibility tests cover [WAI-ARIA](https://w3c.github.io/aria/),
    in particular, [the Roles Model](https://w3c.github.io/aria/#roles) and the [Accessible
    Name and Description Computation](https://w3c.github.io/accname/) (AccName). Together,
    these provide a consistent mechanism for conveying the purpose or intent of an
    element so assistive technology users understand what it is and what they can
    do with it.
  prefs: []
  type: TYPE_NORMAL
- en: Other new accessibility tests cover how those technologies are incorporated
    into host languages. For example, the [HTML Accessibility API Mappings specification
    (HTML-AAM)](https://w3c.github.io/html-aam/) defines the default accessibility
    semantics of HTML elements, along with related rules for how browsers work with
    features like the `<label>` element and image `alt` text. (See the [html-aam/roles
    WPT tests](https://wpt.fyi/results/html-aam/roles.html?label=master&label=experimental&aligned&q=label%3Aaccessibility)
    as an example.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Another new set of tests cover the accessibility of `display: contents`. This
    display mode in CSS provides a useful mechanism for removing the box around content
    — helpful when wanting to adjust the parent/child/grandchild relationships of
    content for the purposes of Flexbox or Grid. But it was off limits for use for
    years, because of the [lack of accessibility in early implementations](https://caniuse.com/css-display-contents).
    Removing the box on an item completely removed all the contents of that box from
    the accessibility tree. Sighted users could still see the child content, but many
    users of assistive technology experienced it completely disappearing. Most of
    these problems have been fixed in browsers, but not all, not for every situation.
    These new tests are the next step toward full accessibility and interoperability.'
  prefs: []
  type: TYPE_NORMAL
- en: By including these new Accessibility tests in Interop 2024, the hope is to fix
    every issue in all browsers. We want it to be easier for developers to create
    accessible sites and make the web better for everyone, including people with disabilities.
  prefs: []
  type: TYPE_NORMAL
- en: CSS Nesting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[CSS Nesting](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_nesting/Using_CSS_nesting)
    is a focus area for Interop 2024 to ensure any differences are ironed out, and
    to provide you with the confidence to use it. The ability to nest CSS [shipped
    in all four major browsers](https://caniuse.com/css-nesting) in 2023 — first in
    Chrome, Edge, and Safari in April/May. And then in Firefox in August.'
  prefs: []
  type: TYPE_NORMAL
- en: The web standard changed slightly between May and August, relaxing the original
    requirement that every nested selector start with a symbol. Developers can now
    simply write `article`, rather than needing to use `& article`.
  prefs: []
  type: TYPE_NORMAL
- en: All of the implementations have since been updated, but there are still small
    bits that could benefit from attention to interoperability, especially as the
    final complex details of how Nesting works are settled in the CSS Working Group.
    Most of Safari’s test failures, for example, are about how nested CSS [interacts](https://github.com/w3c/csswg-drafts/issues/9509)
    with the Shadow DOM via [`:host`](https://developer.mozilla.org/en-US/docs/Web/CSS/:host).
  prefs: []
  type: TYPE_NORMAL
- en: Custom Properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `@property` at-rule started [shipping in browsers](https://caniuse.com/mdn-css_at-rules_property)
    over the last few years. As part of Interop 2023, the Custom Properties focus
    area rose from 4% of tests passing in all stable browsers to 7.6% passing — with
    90.7% passing in all of the preview browsers. Firefox is the last browser to add
    support, which is currently in progress in Firefox Nightly. Since this work isn’t
    done yet, the focus area is being continued in 2024.
  prefs: []
  type: TYPE_NORMAL
- en: With [`@property`](https://developer.mozilla.org/en-US/docs/Web/CSS/@property),
    developers can declare CSS custom properties in a fashion similar to how browser
    engines define CSS properties — specifying its syntax, inheritance behavior, and
    initial value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This allows you to do things in CSS that were impossible before, like animating
    gradients or certain parts of transforms.
  prefs: []
  type: TYPE_NORMAL
- en: Declarative Shadow DOM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Declarative Shadow DOM](https://webkit.org/blog/13851/declarative-shadow-dom/)
    is a declarative API that lets you create reusable widgets and components by using
    only HTML — no JavaScript is necessary. It’s been [supported](https://caniuse.com/?search=Declarative%20Shadow%20DOM)
    in Safari 16.4 since March 2023, and in Chrome 90 since April 2021\. Firefox has
    an implementation in Firefox Nightly.'
  prefs: []
  type: TYPE_NORMAL
- en: Declarative Shadow DOM was one of the often-asked-for features in the [State
    of HTML 2023](https://stateofhtml.com/en-US) survey, so it was chosen to be part
    of Interop 2024 to ensure it becomes interoperable across all browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Font size adjust
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `font-size-adjust` property is a great example of the usefulness of placing
    attention on older technology. Firefox first [implemented](https://caniuse.com/?search=font-size-adjust)
    font size adjust in 2008, but it was rarely used or even discussed by web designers
    and developers. The early spec evolved over time, adding support for more languages
    through the two-value syntax, and becoming easier to use with the `from-font`
    value.
  prefs: []
  type: TYPE_NORMAL
- en: The WebKit team implemented the basic version in Safari 16.4 and added the updates
    in September’s Safari 17.0\. Mozilla updated their implementation in Firefox 118,
    also in September 2023\. Both Safari and Firefox now pass 100% of all tests. Chrome
    began an experimental implementation in 2015, but has yet to ship it. Now with
    Interop 2024, it’s likely every browser will gain complete support.
  prefs: []
  type: TYPE_NORMAL
- en: '[Font size adjust](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size-adjust)
    provides a simple way to conform all the fonts used in a string of text to be
    the same visual size — so every character in `1.4rem`-sized text, for example,
    has the same x-height — or cap height, `ch` width, `ic` width, or `ic` height.
    The two value syntax allows you to choose which measurement to conform.'
  prefs: []
  type: TYPE_NORMAL
- en: This property is especially useful when you are mixing code with regular text,
    or mixing multiple languages together, and the different fonts within the same
    sentence have different sizes. With font size adjust you can avoid weirdly-big
    letters. No more fussing with font metrics to find a magic number that makes them
    all look the same size.
  prefs: []
  type: TYPE_NORMAL
- en: '![a code demo showing the visual consistency of the inked x-height of multiple
    font families](img/0c467148af7b4cf2054d0dd08331f9ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The CSS `font-size-adjust: from font` makes the Courier font adjust its size
    to match its x-height with that from Iowan Old Style, instead of typesetting the
    code to be visually larger. The size uniformity holds even when fallback fonts
    are used instead.'
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about `font-size-adjust` by watching *[What’s new in CSS](https://developer.apple.com/videos/play/wwdc2023/10121/?time=1338)*
    from WWDC23.
  prefs: []
  type: TYPE_NORMAL
- en: HTTPS URLs for WebSocket
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A quirky aspect of the WebSocket API is that you need to use non-HTTP(S) schemes:
    `ws:` (insecure) and `wss:`. As the URLs function otherwise identically to HTTP(S)
    URLs, this makes the API a bit frustrating to deal with. Based on web developer
    feedback the WebKit team decided to address this last year by making the API support
    HTTP(S) URLs as well. We shipped support in Safari 17.0.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that instead of writing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now write the much more ergonomic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: By bringing this to Interop 2024, we hope other browsers will adopt it as well,
    making it universally available for web developers.
  prefs: []
  type: TYPE_NORMAL
- en: IndexedDB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API)
    is an API that provides powerful ways to store data client-side, in an object-oriented
    database. It started shipping in browsers in 2011, and over the years the web
    standard has kept evolving. Both version 2 and [version 3](https://www.w3.org/TR/IndexedDB/)
    are supported by all major browsers. Version 2 is fully interoperable, but version
    3 needs a bit of attention to bring up the quality of implementations. Being part
    of Interop 2024 will help ensure implementations are completed and aligned.'
  prefs: []
  type: TYPE_NORMAL
- en: Layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CSS [Grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout)
    and [Flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox)
    were both included in the original Interop project in 2021\. [Subgrid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Subgrid)
    was added in Interop 2023\. While all three layout methods are now in great shape,
    they still aren’t quite perfect. The tests for these three areas are now being
    combined into one Focus Area called Layout. Work will continue to ensure complex
    edge cases are more interoperable. Meanwhile, developers should absolutely feel
    confident using these three technologies, since all browsers have solid support
    for [Flexbox](https://caniuse.com/flexbox), [Grid](https://caniuse.com/css-grid),
    and now [Subgrid](https://caniuse.com/css-subgrid).
  prefs: []
  type: TYPE_NORMAL
- en: Pointer and Mouse Events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Pointer events](https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events)
    are DOM events that are fired for a pointing device. They create a single DOM
    event model to handle pointing input devices such as a mouse, pen/stylus, or touch
    with one or more fingers. This API first started [shipping](https://caniuse.com/pointer)
    in browsers in 2012, and landed everywhere by 2019, but still had rocky interoperability.'
  prefs: []
  type: TYPE_NORMAL
- en: In 2022, the Interop team launched an Investigation Project to look deeper into
    the current state of Pointer and Mouse Events, in an effort to clarify consensus
    and write tests that captured the state of that consensus. For Interop 2023, those
    tests enabled Pointer and Mouse Events to be a Focus Area, where the test pass
    rate was part of the Interop 2023 dashboard and score. Over the year, Pointer
    and Mouse Events rose from a test pass rate of 34% to 81% — the most significant
    progress of any area.
  prefs: []
  type: TYPE_NORMAL
- en: While passing 81% of tests is a significant improvement, there is more work
    to do, therefore Pointer and Mouse Events will continue to be a Focus Area for
    2024.
  prefs: []
  type: TYPE_NORMAL
- en: Popover
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new [`popover`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover)
    attribute in HTML provides a built-into-the-browser way to have an element pop
    into view on the top layer of a page. If you are creating an overlay over the
    entire web page, the [`dialog`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog)
    element is the best option. But when you want to turn any other element into a
    popup message, user interface, or other kind of content that appears and disappears,
    the `popover` element provides a framework to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Support for `popover` shipped in Chrome 114 and Safari 17.0 in 2023\. Firefox
    currently has support in progress in Firefox Nightly. Being part of Interop 2024
    will ensure this highly desired feature has a fantastic start.
  prefs: []
  type: TYPE_NORMAL
- en: Relative Color Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Relative Color Syntax is a new way to define colors in CSS that allows you do
    so while referring to another color. You can, for instance, lighten or darken
    an existing color by a certain amount. You can take a color variable, adjust the
    saturation, and assign the new color to a second variable. Relative Color Syntax
    can be especially powerful when creating a design system.
  prefs: []
  type: TYPE_NORMAL
- en: '![a still from the WWDC session teach how relative color syntax works](img/bb7b6328dfb8e9ab3eeb7c0512272d37.png)'
  prefs: []
  type: TYPE_IMG
- en: Learn more about Relative Color Syntax by watching *[What’s new in CSS](https://developer.apple.com/videos/play/wwdc2023/10121/?time=623)*
    from WWDC23\.
  prefs: []
  type: TYPE_NORMAL
- en: Safari 16.4 was the first browser to ship support, in March 2023\. Chrome 119
    and Edge 119 shipped support in Oct and Nov 2023\. Currently, none of the implementations
    have support for using `currentcolor` with Relative Color Syntax.
  prefs: []
  type: TYPE_NORMAL
- en: The Relative Color Syntax focus area for Interop 2024 doesn’t test overall support
    of Relative Color Syntax. It’s narrowly focused on whether or not `currentcolor`
    is supported, and includes tests of out-of-gamut behavior — checking to see what
    happens on displays that don’t have support for P3 color. Inclusion in Interop
    2024 will help these final bits get done.
  prefs: []
  type: TYPE_NORMAL
- en: requestVideoFrameCallback
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `<video>` element provides powerful functionality for putting video on the
    web. But often, developers want and need to do more. The [`HTMLVideoElement`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement)
    interface provides special properties and methods for manipulating video objects
    in JavaScript. And one of those methods is `requestVideoFrameCallback()`. It lets
    you perform per-video-frame operations on video in an efficient manner — operations
    like video processing or analysis, painting to canvas, and synchronization with
    audio sources.
  prefs: []
  type: TYPE_NORMAL
- en: '[Supported](https://caniuse.com/mdn-api_htmlvideoelement_requestvideoframecallback)
    since Chrome 83 and Safari 15.4, inclusion in Interop 2024 will help browsers
    complete and polish our implementations.'
  prefs: []
  type: TYPE_NORMAL
- en: Scrollbar styling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The scrollbar styling focus area includes two CSS properties that can be used
    to style scrollbars. The [`scrollbar-width`](https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-width)
    property provides three values: `auto`, `thin`, and `none`. The `auto` value is
    the default width; `thin` provides a thinner scrollbar; and `none` hides the scrollbar
    while still allowing content to scroll. Firefox 64 [implemented](https://caniuse.com/mdn-css_properties_scrollbar-width)
    support in December 2018, and it just shipped in Chrome 121 and Edge 121.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`scrollbar-gutter`](https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-gutter)
    property lets you reserve space for the scrollbar, so the layout is the same whether
    or not a scrollbar is present. The `scrollbar-gutter: stable` rule lets you tell
    the browser to reserve space for a scrollbar, even when a scrollbar isn’t there.
    This can prevent layout shifts from happening between states where scrollbars
    are needed or not needed. It [shipped](https://caniuse.com/mdn-css_properties_scrollbar-gutter)
    in Chrome 94, Edge 94 and Firefox 97, in 2021–22.'
  prefs: []
  type: TYPE_NORMAL
- en: Safari has the most work to do to complete this Focus Area. Chrome and Firefox
    already pass 100% of the tests. Ironically, it was [Safari who first provided](https://webkit.org/blog/363/styling-scrollbars/)
    the ability to style scrollbars with nine pseudo-elements, `::-webkit-scrollbar-*`,
    [back in 2009](https://caniuse.com/?search=%3A%3A-webkit-scrollbar). However that
    approach to styling scrollbars never became an official CSS web standard. The
    CSS Working Group instead [opted](https://drafts.csswg.org/css-scrollbars/#out-of-scope)
    for a far simpler approach.
  prefs: []
  type: TYPE_NORMAL
- en: '@starting-style and transition-behavior'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This Focus Area brings attention to two new features for controlling animation.
    [Both](https://caniuse.com/mdn-css_at-rules_starting-style) [shipped](https://caniuse.com/mdn-css_properties_transition-behavior)
    in Chrome 117 and Edge 177 in Sept 2023.
  prefs: []
  type: TYPE_NORMAL
- en: The [`@starting-style`](https://developer.mozilla.org/en-US/docs/Web/CSS/@starting-style)
    rule in CSS lets you define starting values for a particular element. This is
    needed when the element is about to go through a transition. It also provides
    a way for transitioning in or out of `display:none`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, the `background-color` will transition from transparent
    to green when the element is appended to the document.
  prefs: []
  type: TYPE_NORMAL
- en: Previously, only animations could animate [discretely-animatable](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties#discrete)
    properties. The [`transition-behavior`](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-behavior)
    property in CSS expands that capability to CSS transitions, paving the way for
    transitioning the `display` property when showing or hiding elements.
  prefs: []
  type: TYPE_NORMAL
- en: Text Directionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The direction in which text flows is a vital aspect of typesetting on the web.
    Some languages flow from left-to-right, while others flow from [right-to-left](https://www.w3.org/International/questions/qa-scripts).
    One of the many bits of technology supporting [text direction](https://www.w3.org/International/articlelist#direction)
    is the [`dir` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir).
    It lets you specifically mark any HTML element with the direction: `left`, `right`,
    or `auto` — where `auto` asks the browser to guess from the first letter. The
    interaction of directionality and shadow trees was not well-defined until recently.
    Now that it’s been addressed at a standards level, adding it to Interop 2024 helps
    us ensure implementations align as well.'
  prefs: []
  type: TYPE_NORMAL
- en: 'text-wrap: balance'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Web designers have long wished for a way to prevent very short or one-word lines
    of text — often known as widows or orphans. Since the advent of responsive web
    design and the lack of control over the width of columns, this desire has gotten
    even more challenging. The [`text-wrap`](https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap)
    property provides you with multiple options for telling the browser how to wrap
    text with different methods for calculating line breaks for specific use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `text-wrap: balance` rule is a great solution for headlines. It balances
    a few lines of text so that each line has about the same amount of text as the
    others. It [shipped](https://caniuse.com/css-text-wrap-balance) in Chrome 114
    and Firefox 121, and is implemented in Safari Technology Preview.'
  prefs: []
  type: TYPE_NORMAL
- en: Interop 2024 also includes tests of how `text-wrap-mode`, `text-wrap-style`,
    and [`white-space-collapse`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space-collapse)
    behave. The CSS Working Group recently changed to how these longhands interact
    with each other, so support is currently uneven between browsers. Interop 2024
    will help ensure all browser engines update to the latest web standards.
  prefs: []
  type: TYPE_NORMAL
- en: URL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: URLs are one of the most fundamental parts of the web. Without them, the web
    would not exist. But like many things invented very early in the history of the
    web, support has yet to be fully interoperable. To improve this, the WHATWG wrote
    the [URL Living Standard](https://url.spec.whatwg.org/) packed with details on
    exactly how URLs should work. The tests supporting this web standard were a focus
    area for Interop 2023, improving the pass rate from 77% to 85%. To ensure interoperability,
    the work in this area will continue in 2024.
  prefs: []
  type: TYPE_NORMAL
- en: Safari is proud to lead the pack, passing 99.7% of the tests. Improvements in
    other browsers will help ensure websites work correctly everywhere.
  prefs: []
  type: TYPE_NORMAL
- en: The 2024 Investigation projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Interop 2024 also includes three investigation areas. These are “homework projects”
    for the Interop team to work on. All three this year are about writing and making
    it possible to run more tests — Accessibility Testing, Mobile Testing, and WebAssembly
    Testing. The Mobile Testing investigation project aims to complete the infrastructure
    needed at WPT to be able to test browsers on mobile operating systems, potentially
    to include those scores on the Interop project dashboard in the future.
  prefs: []
  type: TYPE_NORMAL
- en: While two of the three investigations are projects continuing from last year,
    they all are starting 2024 at zero percent done. Each team involved will set new
    goals for this year, and the dashboard will report progress on those goals.
  prefs: []
  type: TYPE_NORMAL
- en: Track the progress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Keep up with the progress of Interop 2024 throughout the year, on the [Interop
    2024 dashboard](https://wpt.fyi/interop-2024).
  prefs: []
  type: TYPE_NORMAL
- en: Our Commitment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We continue to believe that interoperability is one of the fundamental pillars
    that makes the web such a success. Our efforts in Interop 2022 and 2023 demonstrate
    how deeply we care about the web. We are excited to again collaborate with our
    colleagues in seizing this opportunity help the web work better for everyone.
  prefs: []
  type: TYPE_NORMAL
