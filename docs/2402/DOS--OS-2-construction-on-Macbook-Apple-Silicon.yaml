- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:48:08'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: DOS, OS/2 construction on Macbook Apple Silicon
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://retrocoding.net/building-for-dos-os2-and-dos-on-a-macbook-apple-silicon](https://retrocoding.net/building-for-dos-os2-and-dos-on-a-macbook-apple-silicon)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I've previously written about [OpenWatcom as a gateway to the ancient world](https://retrocoding.net/openwatcom-gateway-to-ancient-world-of-x86).
    However, at that time, I focused on installing it using Docker, as OpenWatcom
    1.9 only works on Windows and Linux. I'm not a full-time Windows or Linux user,
    so when I discovered that OpenWatcom's 2.0 series can be compiled and run on macOS,
    **and** it can run on ARM macOS, I was thrilled.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s not mentioned on their website, and only in less prominent places like
    GitHub Issues. However, after testing it out, I believe it''s worth sharing with
    others who share my hobby: writing old Windows (and DOS) applications but still
    wants to use their newest, shiniest MacBook to do so.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: Preparation
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some preparations you need to do before building OpenWatcom source
    code on an Apple Silicon.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '**First, the compiler and platform SDK**. To build anything on macOS, you need
    their official compiler and IDE. Xcode. Recently, they tried to slim everything
    down, so it''ll be 2 GB-ish download from [developer.apple.com](http://developer.apple.com).'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: '**Second, homebrew**. This is optional if you know what you''re doing. However,
    to smoothly compile OpenWatcom, you''d need DOSBOX command line and I feel the
    easiest way to obtain DosBox is using homebrew. Instal it from [brew.sh](https://brew.sh).'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: Getting Dependencies
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get the dependencies, first we install DosBox. In Terminal, use this command
    to install dosbox.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
- en: That's the only dependencies you need.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: Compilation
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Compilation is actually straightforward. You'd only to obtain the source code
    for "latest" OpenWatcom v2.0 series. I'm using the February 2024 archive. Go to
    the release page and dowload the source (.tar.gz). Extract it
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
- en: 'Before we do everything, now open the file `setenv.h` and search for line with
    `export OWTOOLS` and change it to:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
- en: This will change the compilation to clang, the compiler built into Xcode and
    then search for the line with `export OWDOSBOX`, uncomment and change it to.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
- en: From this point forward you're ready. The last step is just run this
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
- en: And, wait. This will compile the OpenWatcom compiler using your `clang` compiler
    on your ARM64 platform. If everything is finished, you can put the compiled product
    by using this command.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
- en: This will copy the resulting compilers, supporting headers for all supported
    platforms, as well as the libraries into `rel` directory.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: I'm usually using watcom on a directory that I put on paths. For me it's on
    `/opt/watcom`. So if you haven't made it yet, you can run this to create a directory
    for your watcom installation and copy everything into that place.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
- en: To use the binary, you need to add the toolchain to `PATH`. The toolchain for
    Apple Silicon mac is in `armo64` subdirectory. You need to also setup the `WATCOM`
    environment variable. That will point to our installation directory.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
- en: For each platform (16-bit Windows, 32-bit Windows, DOS, OS2) you need to set
    different environment variables for `INCLUDE` and `LIBS`. Here's for 32-bit Windows
    platform.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
- en: Please refer to the OpenWatcom/Watcom manual on where the headers and the libs
    are. You can basically guess from `/h` directory and `/libxxx` directory.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: After that you can run `wcl386` to see whether it works or not.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
- en: This means that your watcom compilers are ready to be used to target old platforms.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
