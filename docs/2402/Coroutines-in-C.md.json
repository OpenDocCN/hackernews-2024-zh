["```\n /* Decompression code */\n    while (1) {\n        c = getchar();\n        if (c == EOF)\n            break;\n        if (c == 0xFF) {\n            len = getchar();\n            c = getchar();\n            while (len--)\n                emit(c);\n        } else\n            emit(c);\n    }\n    emit(EOF);\n```", "```\n /* Parser code */\n    while (1) {\n        c = getchar();\n        if (c == EOF)\n            break;\n        if (isalpha(c)) {\n            do {\n                add_to_token(c);\n                c = getchar();\n            } while (isalpha(c));\n            got_token(WORD);\n        }\n        add_to_token(c);\n        got_token(PUNCT);\n    }\n```", "```\nint decompressor(void) {\n    static int repchar;\n    static int replen;\n    if (replen &gt 0) {\n        replen--;\n        return repchar;\n    }\n    c = getchar();\n    if (c == EOF)\n        return EOF;\n    if (c == 0xFF) {\n        replen = getchar();\n        repchar = getchar();\n        replen--;\n        return repchar;\n    } else\n        return c;\n}\n```", "```\nvoid parser(int c) {\n    static enum {\n        START, IN_WORD\n    } state;\n    switch (state) {\n        case IN_WORD:\n        if (isalpha(c)) {\n            add_to_token(c);\n            return;\n        }\n        got_token(WORD);\n        state = START;\n        /* fall through */\n\n        case START:\n        add_to_token(c);\n        if (isalpha(c))\n            state = IN_WORD;\n        else\n            got_token(PUNCT);\n        break;\n    }\n}\n```", "```\nint function(void) {\n    int i;\n    for (i = 0; i &lt 10; i++)\n        return i;   /* won't work, but wouldn't it be nice */\n}\n```", "```\nint function(void) {\n    static int i, state = 0;\n    switch (state) {\n        case 0: goto LABEL0;\n        case 1: goto LABEL1;\n    }\n    LABEL0: /* start of function */\n    for (i = 0; i &lt 10; i++) {\n        state = 1; /* so we will come back to LABEL1 */\n        return i;\n        LABEL1:; /* resume control straight after the return */\n    }\n}\n```", "```\n switch (count % 8) {\n        case 0:        do {  *to = *from++;\n        case 7:              *to = *from++;\n        case 6:              *to = *from++;\n        case 5:              *to = *from++;\n        case 4:              *to = *from++;\n        case 3:              *to = *from++;\n        case 2:              *to = *from++;\n        case 1:              *to = *from++;\n                       } while ((count -= 8) &gt 0);\n    }\n```", "```\nint function(void) {\n    static int i, state = 0;\n    switch (state) {\n        case 0: /* start of function */\n        for (i = 0; i &lt 10; i++) {\n            state = 1; /* so we will come back to \"case 1\" */\n            return i;\n            case 1:; /* resume control straight after the return */\n        }\n    }\n}\n```", "```\n#define crBegin static int state=0; switch(state) { case 0:\n#define crReturn(i,x) do { state=i; return x; case i:; } while (0)\n#define crFinish }\nint function(void) {\n    static int i;\n    crBegin;\n    for (i = 0; i &lt 10; i++)\n        crReturn(1, i);\n    crFinish;\n}\n```", "```\n#define crReturn(x) do { state=__LINE__; return x; \\\n                         case __LINE__:; } while (0)\n```", "```\nint decompressor(void) {\n    static int c, len;\n    crBegin;\n    while (1) {\n        c = getchar();\n        if (c == EOF)\n            break;\n        if (c == 0xFF) {\n            len = getchar();\n            c = getchar();\n            while (len--)\n\t        crReturn(c);\n        } else\n\t    crReturn(c);\n    }\n    crReturn(EOF);\n    crFinish;\n}\n```", "```\nvoid parser(int c) {\n    crBegin;\n    while (1) {\n        /* first char already in c */\n        if (c == EOF)\n            break;\n        if (isalpha(c)) {\n            do {\n                add_to_token(c);\n\t\tcrReturn( );\n            } while (isalpha(c));\n            got_token(WORD);\n        }\n        add_to_token(c);\n        got_token(PUNCT);\n\tcrReturn( );\n    }\n    crFinish;\n}\n```", "```\n case STATE1:\n    /* perform some activity */\n    if (condition) state = STATE2; else state = STATE3;\n```", "```\n LABEL1:\n    /* perform some activity */\n    if (condition) goto LABEL2; else goto LABEL3;\n```"]