["```\npublic struct CardModifier: ViewModifier {\n  func body(content: Content) -> some View {\n    content\n      .frame(maxWidth: .infinity, alignment: .leading)\n      .fixedSize(horizontal: false, vertical: true)\n      .padding(8)\n      .background(Color.background)\n      .mask(RoundedRectangle(cornerRadius: 8, style: .continuous))\n  }\n} \n```", "```\nText(\"Hello World\")\n  .modifier(CardModifier()) \n```", "```\nextension View {\n  func displayAsCard() -> some View {\n    modifier(CardModifier())\n  }  \n} \n```", "```\nstruct Card<Content: View>: View {\n  let configuration: CardViewConfiguration\n  let content: Content\n\n  init(configuration: CardViewConfiguration = .default, @ViewBuilder content: () -> Content) {\n    self.configuration = configuration\n    self.content = content()\n  }\n\n  var body: some View {\n    content\n      .frame(maxWidth: .infinity, alignment: .leading)\n      .fixedSize(horizontal: false, vertical: true)\n      .padding(configuration.padding)\n      .background(configuration.backgroundColor)\n      .mask(\n        RoundedRectangle(\n          cornerRadius: configuration.cornerRadius,\n          style: .continuous\n        )\n      )\n  }\n}\n\nstruct CardConfiguration {\n\n  public let backgroundColor: Color\n  public let cornerRadius: CGFloat\n  public let padding: CGFloat\n\n  public init(backgroundColor: Color, cornerRadius: CGFloat, padding: CGFloat) {\n    self.backgroundColor = backgroundColor\n    self.cornerRadius = cornerRadius\n    self.padding = padding\n  }\n\n} \n```", "```\nCard {\n  Text(\"Hello World\")\n} \n```"]