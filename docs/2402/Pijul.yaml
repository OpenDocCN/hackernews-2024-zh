- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:03:54'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:03:54'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Pijul
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pijul
- en: 来源：[https://pijul.org/](https://pijul.org/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://pijul.org/](https://pijul.org/)
- en: Pijul is a free and open source (GPL2) **distributed version control system**.
    Its distinctive feature is to be based on a **theory of patches**, while still
    being fast and scalable. This makes it easy to learn and use, without any compromise
    on power or features.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: Pijul 是一个自由开源（GPL2）**分布式版本控制系统**。其独特之处在于基于**补丁理论**，同时速度快且可扩展。这使得它易于学习和使用，同时又不妥协于功能或能力。
- en: Why?
  id: totrans-split-7
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为什么？
- en: Commutation
  id: totrans-split-8
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Commutation
- en: In Pijul, independent changes can be applied in any order without changing the
    result or the version's identifier. This makes Pijul significantly simpler than
    workflows using `git rebase` or `hg transplant`. Pijul has a branch-like feature
    called "channels", but these are not as important as in other systems. For example,
    so-called *feature branches* are often just changes in Pijul. Keeping your history
    clean is the default.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pijul 中，独立的更改可以以任何顺序应用，而不会改变结果或版本标识符。这使得 Pijul 比使用 `git rebase` 或 `hg transplant`
    的工作流程显著简化。Pijul 具有称为“通道”的分支特性，但在其他系统中并不像那么重要。例如，在 Pijul 中，所谓的*功能分支*通常只是更改。保持你的历史干净是默认行为。
- en: Merge correctness
  id: totrans-split-10
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 合并正确性
- en: Pijul guarantees a number of strong properties on merges. The most important
    one is that the **order** between lines is always preserved. This is unlike 3-way
    merge, which may sometimes shuffle lines around. When the order is unknown (for
    example in the case of concurrent edits), this is a *conflict*, which contrasts
    with systems with "automatic" or "no conflicts" merges.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: Pijul 保证在合并操作中具有多个强属性。其中最重要的是**行的顺序**始终保持不变。这与三路合并不同，后者有时可能会重新排列行。当顺序不明确时（例如在并发编辑的情况下），这会导致*冲突*，这与具有“自动”或“无冲突”合并的系统形成对比。
- en: First-class conflicts
  id: totrans-split-12
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 一流冲突
- en: In Pijul, conflicts are not modelled as a "failure to merge", but rather as
    the standard case. Specifically, conflicts happen between two changes, and are
    solved by one change. The resolution change solves the conflict between the same
    two changes, no matter if other changes have been made concurrently. Once solved,
    conflicts never come back.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pijul 中，冲突并不被建模为“合并失败”，而是作为标准情况。具体而言，冲突发生在两个更改之间，并且由一个更改来解决。解决更改解决了同一两个更改之间的冲突，不论同时是否已进行其他更改。一旦解决，冲突就不会再次出现。
- en: Partial clones
  id: totrans-split-14
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 部分克隆
- en: 'Commutation makes it possible to clone only a small subset of a repository:
    indeed, one can only apply the changes related to that subset. Working on a partial
    clone produces changes that can readily be sent to the large repository.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: Commutation 允许只克隆仓库的一小部分：事实上，可以只应用与该部分相关的更改。在部分克隆上工作会产生可以轻松发送到大型仓库的更改。
- en: Where to find it?
  id: totrans-split-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在哪里找到它？
