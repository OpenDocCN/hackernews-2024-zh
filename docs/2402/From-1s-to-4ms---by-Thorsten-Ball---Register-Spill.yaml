- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:58:35'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:58:35
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: From 1s to 4ms - by Thorsten Ball - Register Spill
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从1秒变成4毫秒 - Thorsten Ball - Register Spill
- en: 来源：[https://registerspill.thorstenball.com/p/from-1s-to-4ms](https://registerspill.thorstenball.com/p/from-1s-to-4ms)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://registerspill.thorstenball.com/p/from-1s-to-4ms](https://registerspill.thorstenball.com/p/from-1s-to-4ms)
- en: When Zed was open-sourced, someone on HackerNews [commented](https://news.ycombinator.com/item?id=39122280)
    that Sublime Text is faster when searching for all occurrences of the current
    word in a buffer. Zed takes 1s and Sublime somewhere around 200ms.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当Zed开源时，HackerNews上有人[评论](https://news.ycombinator.com/item?id=39122280)说，Sublime
    Text在搜索当前缓冲区中所有出现的当前单词时更快。Zed花费1秒钟，而Sublime大约在200ms左右。
- en: 'Searching all occurrences means: you position your cursor over a word, you
    hit `cmd-shift-l` and all occurrences of that word in the current buffer are selected
    and you get a cursor at each occurrence, ready to play some multi-cursor rock’n’roll.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索所有出现意味着：你将光标放在一个单词上，按下`cmd-shift-l`，当前缓冲区中该单词的所有出现都被选择，并在每个出现的地方都有一个光标，随时可以进行多光标操作。
- en: 'Here, watch this:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，看看这个：
- en: So, Sublime does this in 200ms and Zed takes 1s? Huh.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，Sublime在200ms内完成，而Zed则需要1秒钟？哦。
- en: '[Antonio](https://twitter.com/as__cii), one of Zed’s co-founders, immediately
    and confidently said “we can make this faster.” My not-yet-too-familiar-with-the-codebase
    mind silently asked “can we?” before we dove in. Little did my mind know.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[安东尼奥](https://twitter.com/as__cii)，Zed的联合创始人之一，立即自信地说：“我们可以让它更快。”我的还不太熟悉这段代码库的思维在悄悄地问：“我们可以吗？”在我们深入研究之前，我的思维还不知道。'
- en: 'We looked at [the code in question](https://github.com/zed-industries/zed/blob/8cc7a023906a283b91b84bd790106500497779aa/crates/editor/src/editor.rs#L6065-L6087).
    Here it is, in its original, takes-1s form:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看了[相关代码](https://github.com/zed-industries/zed/blob/8cc7a023906a283b91b84bd790106500497779aa/crates/editor/src/editor.rs#L6065-L6087)。这里是它的原始形式，需要1秒钟才能完成：
- en: '[PRE0]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Ignore the details. What’s important is that keyword right in the middle: `loop`.
    The code is probably what many people would naturally do to implement a `select_all_matches`
    method: use the `select_next_match` in a loop until there’s no more matches to
    select. Voilà, all matches selected.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略细节。重要的是中间的关键词：`loop`。这段代码可能是许多人自然而然地实现`select_all_matches`方法所做的事情：在没有更多匹配项可选择之前，使用`select_next_match`在循环中进行选择。完成，所有匹配项都被选择了。
- en: 'When looking at it with Antonio, I knew this code as well as you do right now,
    but he knew what’s going on under the hood. His idea: optimize it by inlining
    what `select_next_match_internal` does and then do it in batches.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当与安东尼奥一起查看时，我对这段代码的了解与你现在一样深，但他知道底层发生了什么。他的想法是：通过内联`select_next_match_internal`的方式进行优化，然后批量处理。
- en: 'It’s similar to how you’d optimize an N+1 query in a web application. Instead
    of doing something like this in your request path:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于你在Web应用程序中优化N+1查询的方式。而不是在请求路径中执行类似这样的操作：
- en: '[PRE1]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'you would do this:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你会这样做：
- en: '[PRE2]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Or something like that. You get the idea.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 或类似的操作。你明白我的意思。
- en: 'And that’s what we did with that piece of code from above. I’m going to show
    you what [we ended up with](https://github.com/zed-industries/zed/pull/6700),
    but before you look at the code, keep in mind the following: don’t worry about
    the details! Just read the code like you’d read instructions for a new toothbrush:
    confident you don’t need know the line-by-line, but curious nonetheless (because,
    hey, maybe you’ve done it wrong all your life):'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们用上面的那段代码做的事情。我将向你展示我们最终的成果，但在看代码之前，请记住以下事项：不要担心细节！只需像阅读新牙刷说明一样自信地阅读代码，但同时保持好奇心（因为，嘿，也许你一直都搞错了）：
- en: '[PRE3]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '70 lines of code on an empty stomach without syntax highlighting — I’m sorry.
    But even if you’ve never seen code that’s similar to this bit here, I’m pretty
    sure you understood what’s happening:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在空腹的情况下，70行代码而且没有语法高亮 — 抱歉。但即使你以前没有见过类似的代码片段，我相信你也理解正在发生的事情：
- en: Check whether we even have a next selection, return if not.
  id: totrans-split-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查是否有下一个选择，如果没有则返回。
- en: Get all current selections in the buffer (`let mut new_selections = …`)
  id: totrans-split-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取缓冲区中的所有当前选择（`let mut new_selections = …`）
- en: Find all matches in the current buffer (`select_next_state.query.stream_find_iter`)
  id: totrans-split-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在当前缓冲区中查找所有匹配项（`select_next_state.query.stream_find_iter`）
- en: 'For each match: add it to `new_selections`, modulo some word-boundary checks.'
  id: totrans-split-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个匹配项：将其添加到`new_selections`中，除非有一些单词边界检查。
- en: Sort the selections and remove overlapping ones.
  id: totrans-split-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对选择进行排序并移除重叠部分。
- en: Unfold code that contains selections.
  id: totrans-split-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开包含选择的代码。
- en: Change the selections in the editor to the ones we just constructed (`self.change_selections`),
    which causes them to be rendered.
  id: totrans-split-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 把编辑器中的选择更改为我们刚刚构建的选择(`self.change_selections`)，这将导致它们被渲染。
- en: Except for that `while`-loop in the middle that does some wicked `plus-1`-ing
    (that I surely would’ve messed up but Antonio didn’t) — it’s pretty high-level,
    right?
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了中间那个做一些邪恶的`plus-1`的`while`循环（我肯定会搞砸的，但安东尼没有），这代码真的很高级，对吧？
- en: 'It doesn’t even look optimized. There’s none of the scars that optimized code
    usually wears: no secondary data structures to save another loop, no falling-down
    to raw pointers carnage, no SIMD, no fancy data structures introduced. None of
    that.'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 它甚至看起来都没有经过优化。没有优化代码通常穿戴的那些伤痕：没有用来保存另一个循环的辅助数据结构，没有掉入到裸指针的混战，没有SIMD，没有引入花哨的数据结构。一个都没有。
- en: Here’s the thing, though. Here’s why I’m showing you this and why I’ve thought
    about this code for the last three weeks.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，问题在于这里。这就是我向你展示这个并且为什么我思考了这段代码三个星期的原因。
- en: When we ran the optimized code for the first time the runtime went from 1s *down
    to 4ms*. 4 milliseconds!
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们第一次运行优化后的代码时，运行时间从1秒*降到了4ms*。4毫秒！
- en: I couldn’t believe it. 4ms! With code that’s still this high-level! With the
    `unfold_ranges` call, with finding all the matches, with checking word boundaries,
    with extending and sorting and possibly dropping and rendering selections — 4ms!
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我简直不敢相信。4ms！用这么高级的代码！用`unfold_ranges`调用，找到所有匹配项，检查单词边界，扩展和排序，可能还要删除和渲染选择 — 4ms！
- en: If you’re reading this and shrugging it off with “so what, 4ms is an eternity
    for computers” then yes, you’re right, 4ms *is* an eternity for computers, yes,
    I agree, *but* based on that reaction I bet that you didn’t grew up like I did
    as a programmer. See, I grew up building websites, web applications, backends,
    that kind of stuff and in that world basically *nothing* takes 4ms. If it takes
    me 10ms to ping the closest data center in Frankfurt, how can I deliver something
    to you over the wire in less than that?
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在读这段并且对“那又怎样，对计算机来说4ms是一段漫长的时间”的反应是耸耸肩，那么是的，你是对的，4ms *对计算机来说* 是一段漫长的时间，是的，我同意，*但是*
    根据那种反应，我敢打赌你不像我一样是作为一个程序员长大的。你看，我在建设网站、Web应用程序、后端等方面长大，在那个世界里基本上*没有*什么是需要4ms的。如果我在10ms内ping到法兰克福最近的数据中心，那么我怎么能在不到这个时间的情况下将东西传递给你呢？
- en: 'So there I was, staring at the 4ms and wondering: is this what the Rust enthusiasts
    mean when they say zero-cost abstractions? Yes, we’ve all heard that claim before
    (and yes: maybe too many times) and I’ve also written Rust for years now, so the
    idea that Rust is fast wasn’t new to me.'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我就站在那里，盯着这个4ms，想着：这就是Rust爱好者所说的零成本抽象吗？是的，我们以前都听过这种说法（是的，可能太多次了），我现在已经写了几年的Rust了，所以Rust快这个想法对我来说并不新鲜。
- en: But seeing high-level code like this find [2351 occurrences of](https://github.com/zed-industries/zed/issues/6440)
    `<span` [in a 5184 lines XML file that contains the collected poetry of Edgar
    Allan Poe](https://github.com/zed-industries/zed/issues/6440)  *in 4ms*?
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但看到像这样的高级代码在[5184行埃德加·爱伦·坡诗集的XML文件](https://github.com/zed-industries/zed/issues/6440)中找到了[2351次出现的](https://github.com/zed-industries/zed/issues/6440)
    `<span` ，*4ms*？
- en: I don’t know, man. I think it might have changed me.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道，伙计。我觉得这可能改变了我。
