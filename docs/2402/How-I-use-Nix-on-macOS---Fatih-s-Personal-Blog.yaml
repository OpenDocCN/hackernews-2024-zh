- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 13:23:17'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: How I use Nix on macOS | Fatih's Personal Blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://blog.6nok.org/how-i-use-nix-on-macos/](https://blog.6nok.org/how-i-use-nix-on-macos/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](#my-personal-history-with-package-managers)My personal history with package
    managers'
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ve been using GNU/Linux ^(as my main operating system since as early as 2005\.
    I like a lot of things about it, but one thing I didn’t like was the lack of polish.
    After years of tinkering and crashing, I was looking for something more stable.
    This is why I was excited to switch to Mac when I changed jobs and the company
    ^(could afford a Macbook.))
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: However, I was missing some things from my previous Linux system, chief among
    them being package management. Those familiar with Linux will recognize that most
    distributions come with a central repository of pre-configured packages. macOS
    has the App Store, but it’s limited to graphical user interfaces. Coming from
    Linux I’m accustomed to command-line tools and find them indispensable for my
    work.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: I quickly found that there’s an unofficial package manager and its accompanying
    package repository for macOS, collectively called [Homebrew](https://brew.sh).
    I used that for a while and it worked okay. My coworkers, on the other hand, were
    using [NixOS](https://nixos.org), and seeing their workflow changed what I expect
    from a package manager fundamentally. Luckily for me, Nix is cross-platform and
    it works well on macOS. Naturally, I gave it a try.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '[](#whats-nix)What’s Nix'
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ll keep this short so as not to be intimidating, but there are a few things
    that Nix may be referring to.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: '[Nix](https://zero-to-nix.com/concepts/nix-language), the purely functional
    programming language'
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Nix](https://zero-to-nix.com/concepts/package-management), the package manager'
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Nixpkgs](https://zero-to-nix.com/concepts/nixpkgs), the package repository,
    where package definitions are written in the Nix language'
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NixOS](https://zero-to-nix.com/concepts/nixos), the Linux distribution powered
    by all of the above'
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In my case, I started using the Nix package manager with the Nixpkgs repository
    to install stuff on my Mac. I had no intention to replace my operating system
    and didn’t need to write Nix expressions just yet.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '[](#package-management-with-nix)Package management with Nix'
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are some basic package management commands, you can use this as a cheat
    sheet.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for a package (alternatively, you can use [the web interface](https://search.nixos.org/packages)):'
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install a package:'
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'List installed packages:'
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Upgrade a package:'
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Delete a package:'
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Update the registry (your local package index) to the latest version
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And some advanced commands, showing the true power of Nix.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: This is useful if you can find the specific version of a package in the [Nixpkgs
    GitHub repository](https://github.com/NixOS/nixpkgs), you can copy the commit
    hash and set the registry to that point in time.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: If you want to undo an operation that affects your profile, you can undo your
    latest change, or roll back to a known good version. Nix packages are immutable,
    so upgrades or uninstalls aren’t destructive.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: This is a game-changer, you don’t have to pollute your system to run a one-off
    command, or you can try a package out before committing to installing it. Since
    Nix packages are deterministic, they are built only the first time they are run,
    afterwards, they are brought back from the cache and installs are instantaneous.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: This is another game-changer. You can open a shell with all the tools you need,
    without installing them. One project may have Node 18 while the other has Node
    20\. No more version managers. You can take this even further with tools like
    [devenv](https://devenv.sh).
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Clean up your Nix store:'
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-split-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can periodically run this to clean up packages not depended on by anything,
    freeing up disk space. It has a nice feeling.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: '[](#what-you-may-miss-from-homebrew)What you may miss from Homebrew'
  id: totrans-split-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only thing that comes to mind is [Homebrew Cask](https://formulae.brew.sh/cask/).
    There’s no good way to install prepackaged GUI applications with Nix that I could
    find. I’m using the App Store and disk images for that purpose.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: '[](#how-to-install-nix-on-macos)How to install Nix on macOS'
  id: totrans-split-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I can highly recommend the [Determinate Nix Installer](https://github.com/DeterminateSystems/nix-installer).
    You can even use [the graphical installer](https://determinate.systems/posts/graphical-nix-installer/).
    The [official installer](https://nixos.org/download#nix-install-macos) is fine
    too, but it doesn’t survive OS upgrades and it doesn’t generate an installation
    receipt, which makes it harder to uninstall if you need to uninstall it for whatever
    reason. I also find it comforting to have a receipt in general.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: '[](#where-to-go-from-there)Where to go from there'
  id: totrans-split-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’re more than welcome to stop here and use the newfound powers Nix bestowed
    upon you. But if you want to go further, you may check out [nix-darwin](https://github.com/LnL7/nix-darwin)
    and [home-manager](https://github.com/nix-community/home-manager), which some
    use to manage their system more declaratively. I find it a bit too complicated
    for my tastes. You can also use Nix to manage dependencies of your projects; I
    find [devenv](https://devenv.sh) useful for that purpose and hope to write more
    about it in the future.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: 'I hope I made a strong case for the benefits of using Nix as a package manager
    for a macOS system. This is only my workflow and others are using Nix for their
    convenience in unique and creative ways. Here are some posts praising Nix that
    I read and can recommend:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: I hope you’ll find Nix as charming and empowering as I do. Let me know if you
    run into any troubles or just want to share how much you love it!
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks to [Aycan](https://twitter.com/aycanirican) and [Taylan](https://twitter.com/taylan_dgn)
    for reviewing a draft of this post.*'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
