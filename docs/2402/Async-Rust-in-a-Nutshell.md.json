["```\nlet mut socket = net::TcpStream::connect((host, port)).unwrap(); \n```", "```\npub trait Future {\n    type Output;\n\n    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n} \n```", "```\npub enum Poll<T> {\n    Ready(T),\n    Pending,\n} \n```", "```\nfn read_to_string(&mut self, buf: &mut String) -> Result<usize>; \n```", "```\nfn read_to_string(&mut self, buf: &mut String) -> impl Future<Output = Result<usize>>; \n```", "```\nasync fn read_to_string(&mut self, buf: &mut String) -> Result<usize>; \n```", "```\nlet result = fileread_to_string(&mut buf).await; \n```", "```\npub trait ChatSink {\n  type Item: Clone;\n  async fn send_msg(&mut self, msg: Self::Item) -> Result<(), ChatCommErr>;\n} \n```", "```\npub trait ChatSink {\n  type Item: Clone;\n  fn send_msg(&mut self, msg: Self::Item) -> impl Future<Output = Result<(), ChatCommErr>>;\n} \n```", "```\npub trait ChatSink {\n  type Item: Clone;\n  type $: Future<Output = Result<(), ChatCommErr>>;\n  fn send_msg(&mut self, msg: Self::Item) -> Self::$;\n} \n```", "```\npub trait ChatSink {\n  type Item: Clone;\n  type $<'m>: Future<Output = Result<(), ChatCommErr>> + 'm;\n  fn send_msg(&mut self, msg: Self::Item) -> Self::$<'_>;\n} \n```"]