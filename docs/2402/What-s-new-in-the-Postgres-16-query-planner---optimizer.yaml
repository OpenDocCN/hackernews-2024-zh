- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:44:18'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:44:18'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: What’s new in the Postgres 16 query planner / optimizer
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Postgres 16 查询规划器 / 优化器的新特性
- en: 来源：[https://www.citusdata.com/blog/2024/02/08/whats-new-in-postgres-16-query-planner-optimizer/](https://www.citusdata.com/blog/2024/02/08/whats-new-in-postgres-16-query-planner-optimizer/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.citusdata.com/blog/2024/02/08/whats-new-in-postgres-16-query-planner-optimizer/](https://www.citusdata.com/blog/2024/02/08/whats-new-in-postgres-16-query-planner-optimizer/)
- en: PostgreSQL 16 introduces quite a few improvements to the query planner and makes
    many SQL queries run faster than they did on previous versions of PostgreSQL.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 16 引入了多项查询规划器改进，使得许多 SQL 查询比在之前的 PostgreSQL 版本中运行得更快。
- en: If you look at the [PG16 release notes](https://www.postgresql.org/docs/16/release-16.html),
    you’ll see some of these planner improvements. But with the volume of changes
    made in each PostgreSQL release, it’s not possible to provide enough detail about
    each and every change. So maybe you might need a bit more detail to know what
    the change is about—before you understand if it’s relevant to you.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看 [PG16 发布说明](https://www.postgresql.org/docs/16/release-16.html)，您将看到一些这些规划器改进。但是由于每个
    PostgreSQL 版本的变更量很大，无法为每个变更提供足够详细的信息。因此，您可能需要更多详细信息，以了解每项变更的具体内容 —— 从而确定其是否与您相关。
- en: In this blog post, assuming you’ve already got a handle on the [basics of EXPLAIN](https://www.postgresql.org/docs/16/using-explain.html#USING-EXPLAIN-BASICS),
    you’ll get a deep dive into the 10 improvements made in the PostgreSQL 16 query
    planner. For each of the improvements to the PG16 planner (the planner is often
    called an optimizer in other relational databases), you’ll also get comparisons
    between PG15 and PG16 planner output—plus examples of what changed, in the form
    of a self-contained test you can try for yourself.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本博客文章中，假设您已经掌握了 [EXPLAIN 的基础知识](https://www.postgresql.org/docs/16/using-explain.html#USING-EXPLAIN-BASICS)，您将深入了解
    PostgreSQL 16 查询规划器中的 10 项改进。对于 PG16 规划器的每个改进（在其他关系数据库中通常称为优化器），您还将看到 PG15 和 PG16
    规划器输出的比较 —— 以及自包含测试的示例，您可以自行尝试。
- en: 'Let’s dive into these 10 improvements to the PostgreSQL planner in PG16:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解 PostgreSQL 16 查询规划器中的这 10 项改进：
- en: '[Incremental sorts for DISTINCT queries](#distinct-queries)'
  id: totrans-split-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[增量排序用于 DISTINCT 查询](#distinct-queries)'
- en: '[Faster ORDER BY / DISTINCT aggregates](#faster-orderby-distinct)'
  id: totrans-split-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[更快的 ORDER BY / DISTINCT 聚合](#faster-orderby-distinct)'
- en: '[Memoize for UNION ALL queries](#union-all)'
  id: totrans-split-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[UNION ALL 查询的记忆化](#union-all)'
- en: '[Support Right Anti Join](#right-anti-join)'
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[支持右反连接](#right-anti-join)'
- en: '[Parallel Hash Full and Right Joins](#parallel-hashfull-rightjoin)'
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[并行 Hash 全连接和右连接](#parallel-hashfull-rightjoin)'
- en: '[Optimize window function frame clauses](#frame-clauses)'
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[优化窗口函数框架子句](#frame-clauses)'
- en: '[Optimize various window functions](#window-functions)'
  id: totrans-split-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[优化各种窗口函数](#window-functions)'
- en: '[JOIN removals for partitioned tables](#join-removals)'
  id: totrans-split-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[为分区表优化 JOIN 移除](#join-removals)'
- en: '[Short circuit trivial DISTINCT queries](#short-circuit)'
  id: totrans-split-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[短路基本的 DISTINCT 查询](#short-circuit)'
- en: '[Incremental Sort after Merge Join, in more cases](#merge-joins)'
  id: totrans-split-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[合并连接后的增量排序，在更多情况下](#merge-joins)'
- en: '[Incremental sorts](https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=d2d8a229bc58a2014dce1c7a4fcdb6c5ab9fb8da)
    were first added in PostgreSQL 13\. These incremental sorts reduce the effort
    required to get sorted results. How? By exploiting the knowledge that some given
    result set is already sorted by 1 or more leading columns—and only performing
    a sort on the remaining columns.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[增量排序](https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=d2d8a229bc58a2014dce1c7a4fcdb6c5ab9fb8da)
    首次在 PostgreSQL 13 中添加。这些增量排序减少了获取排序结果所需的工作量。如何实现？通过利用某些给定结果集已按一个或多个前导列排序的知识，仅对剩余列进行排序。'
- en: For example, if there’s a btree index on column `a` and we need the rows ordered
    by `a`,`b`, then we can use the btree index (which provides presorted results
    on column `a`) and sort the rows seen so far only when the value of `a` changes.
    With the quicksort algorithm used by PostgreSQL, sorting many smaller groups is
    more efficient than sorting one large group.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果在列 `a` 上有 btree 索引，并且我们需要按 `a`, `b` 排序行，则可以使用 btree 索引（提供列 `a` 上的预排序结果），并且仅在
    `a` 的值更改时才对到目前为止看到的行进行排序。使用 PostgreSQL 的快速排序算法，对许多较小的组进行排序比对一个大组进行排序更有效率。
- en: The PostgreSQL 16 query planner now considers performing incremental sorts for
    `SELECT DISTINCT` queries. Prior to PG16, when the sorting method was chosen for
    `SELECT DISTINCT` queries, the planner only considered performing a full sort
    (which is more expensive than an incremental sort.)
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 16 查询规划器现在考虑为 `SELECT DISTINCT` 查询执行增量排序。在 PG16 之前，选择排序方法用于 `SELECT
    DISTINCT` 查询时，规划器只考虑执行完整排序（比增量排序更昂贵）。
- en: '[PRE0]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: PG15 EXPLAIN output
  id: totrans-split-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG15 EXPLAIN 输出
- en: '[PRE1]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: PG16 EXPLAIN output
  id: totrans-split-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG16 EXPLAIN 输出
- en: '[PRE2]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the PostgreSQL 16 `EXPLAIN` output above, you can see the planner chose
    to use the `distinct_test_a_idx` index on the `a` column and then performed an
    `Incremental Sort` to sort all of the equal values of `a` by `b`. The `Presorted
    Key: a` indicates this. Because the `INSERT` statements above only added a single
    value of `b` for each value of `a`, each batch of tuples sorted by incremental
    sort only contains a single row.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: '在上述 PostgreSQL 16 的 `EXPLAIN` 输出中，您可以看到规划器选择使用 `a` 列上的 `distinct_test_a_idx`
    索引，然后执行 `Incremental Sort` 来按 `b` 的所有相等值对 `a` 进行排序。`Presorted Key: a` 表示这一点。因为上面的
    `INSERT` 语句仅为每个 `a` 值添加了单个 `b` 值，所以每个增量排序排序的元组批次仅包含单行。'
- en: The `EXPLAIN` output for PostgreSQL 16 above shows that the `Peak Memory` for
    the `Incremental Sort` was just 26 kilobytes, whereas the hashing method used
    by PostgreSQL 15 needed much memory, so much so that it needed to spill about
    30 megabytes of data to disk. **The query executed 63% faster on PostgreSQL 16**.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 PostgreSQL 16 的 `EXPLAIN` 输出显示，`Incremental Sort` 的 `Peak Memory` 仅为 26 千字节，而
    PostgreSQL 15 使用的哈希方法需要更多内存，以至于需要将约 30 兆字节的数据溢出到磁盘。**在 PostgreSQL 16 上执行的查询速度提高了
    63%**。
- en: In PostgreSQL 15 and earlier, aggregate functions containing an `ORDER BY` or
    `DISTINCT` clause would result in the executor always performing a sort inside
    the `Aggregate` node of the plan. Because the sort was always performed, the planner
    would never try to form a plan to provide presorted input to aggregate the rows
    in order.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 15 及更早版本中，包含 `ORDER BY` 或 `DISTINCT` 子句的聚合函数会导致执行器始终在计划的 `Aggregate`
    节点内部执行排序。由于总是执行排序，规划器从不尝试形成一个计划，以提供按顺序预排序的输入来对行进行聚合。
- en: The PostgreSQL 16 query planner now tries to form a plan which feeds the rows
    to the plan’s `Aggregate` node in the correct order. And the executor is now smart
    enough to recognize this and forego performing the sort itself when the rows are
    already pre-sorted in the correct order.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 16 查询规划器现在试图形成一个计划，以正确顺序将行提供给计划的 `Aggregate` 节点。执行器现在足够聪明，能够识别这一点，并在行已经按正确顺序预排序时放弃执行排序本身。
- en: '[PRE3]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: PG15 EXPLAIN output
  id: totrans-split-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG15 EXPLAIN 输出
- en: '[PRE4]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: PG16 EXPLAIN output
  id: totrans-split-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG16 EXPLAIN 输出
- en: '[PRE5]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Aside from PostgreSQL 16 executing the query over twice as fast as in PG15,
    the only indication of this change in the `EXPLAIN ANALYZE` output above is from
    the `temp read=4540 written=4560` that’s not present in the PostgreSQL 16 output.
    In PG15, this is caused by the implicit sort spilling to disk.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在 PostgreSQL 16 中执行的查询速度比 PG15 快两倍之外，在上述的 `EXPLAIN ANALYZE` 输出中，这种变化的唯一指示是在
    PostgreSQL 16 输出中不存在的 `temp read=4540 written=4560`。在 PG15 中，这是隐式排序溢出到磁盘引起的。
- en: '`Memoize` plan nodes were first introduced in PostgreSQL 14\. The `Memoize`
    plan node acts as a cache layer between a parameterized `Nested Loop` and the
    Nested Loop’s inner side. When the same value needs to be looked up several times,
    Memoize can give a nice performance boost as it can skip executing its subnode
    when the required rows have been queried already and are cached.'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`Memoize` 计划节点首次在 PostgreSQL 14 中引入。`Memoize` 计划节点充当参数化 `Nested Loop` 和 Nested
    Loop 内部之间的缓存层。当多次查找相同值时，Memoize 可以显著提高性能，因为当所需的行已经被查询并缓存时，它可以跳过执行其子节点。'
- en: The PostgreSQL 16 query planner will now consider using `Memoize` when a `UNION
    ALL` query appears on the inner side of a parameterized `Nested Loop`.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 16 查询规划器现在会考虑在参数化的 `Nested Loop` 的内部出现 `UNION ALL` 查询时使用 `Memoize`。
- en: '[PRE6]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: PG15 EXPLAIN output
  id: totrans-split-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG15 EXPLAIN 输出
- en: '[PRE7]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: PG16 EXPLAIN output
  id: totrans-split-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG16 EXPLAIN 输出
- en: '[PRE8]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the PostgreSQL 16 EXPLAIN output above, you can see the `Memoize` node is
    put atop of the `Append` node—which caused a reduction in the number of `loops`
    in the `Append` from 1 million in PG15 down to 10 in PG16\. Each time the `Memoize`
    node has a cache hit, there’s no need to execute the `Append` to fetch records.
    This results in the **query running around 6 times faster on PostgreSQL 16**.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的 PostgreSQL 16 EXPLAIN 输出中，可以看到 `Memoize` 节点置于 `Append` 节点之上，导致 `Append`
    中的 `循环次数` 从 PG15 的 100 万次减少到 PG16 的 10 次。每当 `Memoize` 节点命中缓存时，就无需执行 `Append` 来获取记录。这导致
    **在 PostgreSQL 16 上查询运行速度大约快了 6 倍**。
- en: When performing a `Hash Join` for an `INNER JOIN`, PostgreSQL prefers to build
    the hash table on the smaller of the two tables. Smaller hash tables are better
    as it’s less work to build them. Smaller tables are also better as they’re more
    cache-friendly for the CPU, and it’s less likely that the CPU will stall while
    waiting for data to arrive from main memory.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行 `INNER JOIN` 的 `Hash Join` 时，PostgreSQL 更倾向于在两个表中较小的那个上构建哈希表。较小的哈希表更好，因为构建它们的工作量更小。较小的表也更适合
    CPU 的缓存，CPU 等待主内存中的数据到达的可能性更小。
- en: In PostgreSQL versions before 16, an `Anti Join`—as you might see if you use
    `NOT EXISTS` in your queries—would always put the table mentioned in the `NOT
    EXISTS` part on the inner side of the join. This meant there was no flexibility
    to hash the smaller of the two tables, resulting in possibly having to build a
    hash table on the larger table.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 16 之前的版本中，如果在查询中使用 `NOT EXISTS`，`Anti Join` 会始终将 `NOT EXISTS` 部分提到连接的内侧。这意味着无法灵活地对两个表中较小的那个进行哈希，可能需要在较大的表上构建哈希表。
- en: The PostgreSQL 16 query planner can now choose to hash the smaller of the two
    tables. This can now be done because PostgreSQL 16 supports `Right Anti Join`.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 16 查询规划器现在可以选择对较小的两个表进行哈希。这可以在 PostgreSQL 16 支持 `Right Anti Join`
    的情况下完成。
- en: '[PRE9]'
  id: totrans-split-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: PG15 EXPLAIN output
  id: totrans-split-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG15 解释输出
- en: '[PRE10]'
  id: totrans-split-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: PG16 EXPLAIN output
  id: totrans-split-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG16 解释输出
- en: '[PRE11]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can see from the `EXPLAIN ANALYZE` output above that due to PG16’s planner
    opting to use a `Hash Right Anti Join`, the `Memory Usage` in PostgreSQL 16 was
    much less than in PostgreSQL 15 and the `Execution Time` was almost halved.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的 `EXPLAIN ANALYZE` 输出可以看出，由于 PG16 的规划器选择使用 `Hash Right Anti Join`，PostgreSQL
    16 的 `内存使用量` 明显少于 PostgreSQL 15，并且 `执行时间` 几乎减半。
- en: PostgreSQL 11 saw the introduction of `Parallel Hash Join`. This allows multiple
    parallel workers in a parallel query to assist in the building of a single hash
    table. In versions prior to 11, each worker would have built its own identical
    hash table, resulting in additional memory overheads.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 11 引入了 `并行哈希连接`。这允许并行查询中的多个并行工作者协助构建单个哈希表。在 11 版本之前，每个工作者都将构建自己的相同哈希表，导致额外的内存开销。
- en: In PostgreSQL 16, `Parallel Hash Join` has been improved and now supports `FULL`
    and `RIGHT` join types. This allows queries that have a `FULL OUTER JOIN` to be
    executed in parallel and also allows `Right Joins` plans to execute in parallel.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 16 中，`Parallel Hash Join` 已经改进，现在支持 `FULL` 和 `RIGHT` 连接类型。这允许并行执行具有
    `FULL OUTER JOIN` 的查询，并且还允许执行 `Right Joins` 计划并行化。
- en: '[PRE12]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: PG15 EXPLAIN output
  id: totrans-split-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG15 解释输出
- en: '[PRE13]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: PG16 EXPLAIN output
  id: totrans-split-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG16 解释输出
- en: '[PRE14]'
  id: totrans-split-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `EXPLAIN` output shows that PostgreSQL 16 was able to perform the join in
    parallel and this resulted in a significant reduction in the query’s `Execution
    Time`.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`EXPLAIN` 输出显示，PostgreSQL 16 能够并行执行连接操作，这显著减少了查询的 `执行时间`。'
- en: When a query contains a window function such as `row_number()`, `rank()`, `dense_rank()`,
    `percent_rank()`, `cume_dist()` and `ntile()`, if the [window clause](https://www.postgresql.org/docs/16/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS)
    did not specify the `ROWS`option, then PostgreSQL would always use the default
    `RANGE` option. The `RANGE` option causes the executor to look ahead until it
    finds the first “non-peer” row. A peer row is a row in the window frame which
    compares equally according to the window clause’s `ORDER BY` clause. When there
    is no `ORDER BY` clause, all rows within the window frame are peers. When processing
    records which have many rows which sort equally according to the window clause’s
    `ORDER BY` clause, the additional processing to identify these peer rows could
    be costly.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当查询包含诸如 `row_number()`、`rank()`、`dense_rank()`、`percent_rank()`、`cume_dist()`
    和 `ntile()` 等窗口函数时，如果窗口子句没有指定 `ROWS` 选项，则 PostgreSQL 会始终使用默认的 `RANGE` 选项。`RANGE`
    选项导致执行器向前查找，直到找到第一个“非对等”行。对等行是根据窗口子句的 `ORDER BY` 子句相等的窗口帧中的行。当没有 `ORDER BY` 子句时，窗口帧中的所有行都是对等行。在处理具有按窗口子句的
    `ORDER BY` 子句等方式排序的许多行的记录时，用于识别这些对等行的额外处理可能会很昂贵。
- en: The window functions mentioned above don’t behave any differently whether `ROWS`
    or `RANGE` is specified in the query’s window clause. However, the executor in
    PostgreSQL versions prior to 16 didn’t know that, and because **some** window
    functions do care about the `ROWS`/`RANGE` option, the executor had to perform
    checks for peer rows in all cases.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述提到的窗口函数在查询的窗口子句中指定 `ROWS` 或 `RANGE` 时不会有任何不同的行为。然而，在 PostgreSQL 16 之前的版本中，执行器并不知道这一点，因为**一些**窗口函数确实关心
    `ROWS`/`RANGE` 选项，所以执行器必须在所有情况下执行对等行的检查。
- en: The PostgreSQL 16 query planner knows which window functions care about the
    `ROWS`/`RANGE` option and it passes this information along to the executor so
    that it can skip the needless additional processing.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 16 查询规划器知道哪些窗口函数关心 `ROWS`/`RANGE` 选项，并将此信息传递给执行器，以便它可以跳过不必要的额外处理。
- en: This optimization works particularly well when `row_number()` is being used
    to limit the number of results in the query as shown in the example below.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此优化在查询中使用 `row_number()` 来限制结果数量时特别有效，如下面的示例所示。
- en: '[PRE15]'
  id: totrans-split-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: PG15 EXPLAIN output
  id: totrans-split-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG15 的 EXPLAIN 输出
- en: '[PRE16]'
  id: totrans-split-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: PG16 EXPLAIN output
  id: totrans-split-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG16 的 EXPLAIN 输出
- en: '[PRE17]'
  id: totrans-split-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `Index Scan` node in the `EXPLAIN` output for PG15 above shows that 50410
    rows had to be read from the `scores_score_idx` index before execution stopped.
    While in PostgreSQL 16, only 11 rows were read as the executor realized that once
    the row_number got to 11, there’d be no more rows matching the `<= 10` condition.
    Both this and the executor using the `ROWS` window clause option led to this query
    running over 500 times faster on PostgreSQL 16.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: PG15 的 EXPLAIN 输出中的 `Index Scan` 节点显示，在执行之前需要从 `scores_score_idx` 索引中读取 50410
    行。而在 PostgreSQL 16 中，只需读取 11 行，因为执行器意识到一旦 `row_number` 达到 11，就不会再有符合 `<= 10` 条件的行了。这和执行器使用
    `ROWS` 窗口子句选项导致该查询在 PostgreSQL 16 上运行速度提高了 500 多倍。
- en: This change expands on work done in PostgreSQL 15\. In PG15 the query planner
    was modified to allow the executor to stop processing `WindowAgg` executor nodes
    early. This can be done when an item in the `WHERE` clause filters a window function
    in a way that once the condition becomes false, it will never be true again.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这一变更是对 PostgreSQL 15 中的工作的扩展。在 PG15 中，查询规划器被修改，允许执行器在窗口函数在 `WHERE` 子句中过滤的条件一旦变为
    false 时，可以提前停止处理 `WindowAgg` 执行节点。
- en: '`row_number()` is an example of a function which can offer such guarantees
    as it’s a monotonically increasing function, i.e. subsequent rows in the same
    partition will never have a row_number lower than the previous row.'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`row_number()` 是一个函数的例子，它可以提供这样的保证，因为它是一个单调递增的函数，即同一分区中的后续行的 `row_number` 永远不会低于前一行。'
- en: The PostgreSQL 16 query planner expands the coverage of this optimization to
    also cover `ntile()`, `cume_dist()` and `percent_rank()`. In PostgreSQL 15, this
    only worked for `row_number()`, `rank()`, `dense_rank()`, `count()` and `count(*)`.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 16 查询规划器扩展了此优化的覆盖范围，还涵盖了 `ntile()`、`cume_dist()` 和 `percent_rank()`。在
    PostgreSQL 15 中，这仅对 `row_number()`、`rank()`、`dense_rank()`、`count()` 和 `count(*)`
    有效。
- en: '[PRE18]'
  id: totrans-split-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: PG15 EXPLAIN output
  id: totrans-split-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG15 的 EXPLAIN 输出
- en: '[PRE19]'
  id: totrans-split-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: PG16 EXPLAIN output
  id: totrans-split-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG16 的 EXPLAIN 输出
- en: '[PRE20]'
  id: totrans-split-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: From the PostgreSQL 16 `EXPLAIN` output above, you can see that the planner
    was able to use the `pr <= 0.01` condition as a `Run Condition`, whereas, with
    PostgreSQL 15 this clause appeared as a `Filter` on the subquery. In PG16, the
    run condition was used to abort the execution of the `WindowAgg` node early. This
    resulted in the `Execution Time` in PG16 being more than 4 times faster than in
    PG15.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上面的 PostgreSQL 16 EXPLAIN 输出，您可以看到规划器能够将 `pr <= 0.01` 条件作为 `Run Condition`
    使用，而在 PostgreSQL 15 中，此子查询中的条件作为 `Filter` 出现。在 PG16 中，运行条件用于提前中止 `WindowAgg` 节点的执行。这导致
    PG16 的执行时间比 PG15 快了超过 4 倍。
- en: For a long time now, PostgreSQL has been able to remove a `LEFT JOIN` where
    no column from the left joined table was required in the query and the join could
    not possibly duplicate any rows.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 长期以来，PostgreSQL 已能够移除 `LEFT JOIN`，其中左连接表的任何列都不在查询中需要，并且连接不可能复制任何行。
- en: However, in versions prior to PostgreSQL 16, there was no support for left join
    removals on partitioned tables. Why? Because the proofs that the planner uses
    to determine if there’s any possibility any inner-side row could duplicate any
    outer-side row were not present for partitioned tables.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在 PostgreSQL 16 之前的版本中，对分区表的左连接移除没有支持。为什么？因为规划器用于确定是否存在任何可能使内侧行重复任何外侧行的证据在分区表中不存在。
- en: The PostgreSQL 16 query planner now allows the `LEFT JOIN` removal optimization
    with partitioned tables.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 16 查询规划器现在允许对分区表进行 `LEFT JOIN` 移除优化。
- en: This join elimination optimization is more likely to help with views, as it’s
    common that not all columns that exist in a view will always be queried.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此连接消除优化更有可能帮助视图，因为视图中存在的所有列并不总是会被查询。
- en: '[PRE21]'
  id: totrans-split-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: PG15 EXPLAIN output
  id: totrans-split-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG15 的 EXPLAIN 输出
- en: '[PRE22]'
  id: totrans-split-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: PG16 EXPLAIN output
  id: totrans-split-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG16 的 EXPLAIN 输出
- en: '[PRE23]'
  id: totrans-split-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The important thing to notice here is that the PostgreSQL 16 plan does not include
    a join to `part_tab` meaning all there is to do is scan `normal_table`.
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的重要一点是，PostgreSQL 16 计划不包括与 `part_tab` 的连接，这意味着只需扫描 `normal_table`。
- en: The PostgreSQL query planner is able to avoid including plan nodes to de-duplicate
    the results when it can detect that all rows contain the same value. Detecting
    this is trivial and when the optimization can be applied it can result in huge
    performance gains.
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 查询规划器能够在能够检测到所有行包含相同值时避免包含计划节点以去重结果。检测这一点很简单，当优化可以应用时，可以获得巨大的性能提升。
- en: '[PRE24]'
  id: totrans-split-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: PG15 EXPLAIN output
  id: totrans-split-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG15 的 EXPLAIN 输出
- en: '[PRE25]'
  id: totrans-split-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: PG16 EXPLAIN output
  id: totrans-split-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG16 的 EXPLAIN 输出
- en: '[PRE26]'
  id: totrans-split-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If you look carefully at the SQL query, you’ll notice that each column in the
    `DISTINCT` clause also has an equality condition in the `WHERE` clause. This means
    that all the output rows in the query will have the same values in each column.
    The PostgreSQL 16 query planner is able to take advantage of this knowledge and
    simply `LIMIT` the query results to 1 row. PostgreSQL 15 produced the same query
    result by reading the entire results and using the `Unique` operator to reduce
    all the rows down to a single row. The `Execution Time` for PostgreSQL 16 was
    more than 1200 times faster than PostgreSQL 15.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仔细查看 SQL 查询，您会注意到 `DISTINCT` 子句中的每列在 `WHERE` 子句中也具有等式条件。这意味着查询中的所有输出行在每列中都具有相同的值。PostgreSQL
    16 查询规划器能够利用这一知识简单地将查询结果限制为 1 行。PostgreSQL 15 通过读取整个结果并使用 `Unique` 运算符将所有行减少到单行来产生相同的查询结果。PostgreSQL
    16 的执行时间比 PostgreSQL 15 快了超过 1200 倍。
- en: Before PostgreSQL 16, when the query planner considered performing a `Merge
    Join`, it would check if the sort order of the merge would suit any upper-level
    plan operation (such as `DISTINCT`, `GROUP BY` or `ORDER BY`) and only use that
    order if it matched the requirements for the upper-level exactly. This choice
    was a little outdated as `Incremental Sorts` can be used for these upper-level
    operations and incremental sorts can take advantage of results that are presorted
    by only some of the leading columns that the results need to be sorted by.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 16 之前，当查询规划器考虑执行 `Merge Join` 时，它会检查合并的排序顺序是否适合任何上层计划操作（如 `DISTINCT`、`GROUP
    BY` 或 `ORDER BY`），并且仅在它与上层要求完全匹配时才使用该顺序。这种选择有点过时，因为对于这些上层操作，可以使用增量排序，并且增量排序可以利用仅对一些前导列进行排序的结果。
- en: The PostgreSQL 16 query planner adjusted the rule used when considering `Merge
    Join` orders from “the order of the rows must match exactly” to “there must be
    at least 1 leading column correctly ordered”. This allows the planner to use `Incremental
    Sorts` to get the rows into the correct order for the upper-level operation. We
    know from earlier in this blog that incremental sorts, when they’re possible,
    require less work than a complete sort as incremental sorts are able to exploit
    partially sorted inputs and perform sorts in smaller batches, resulting in less
    memory consumption and fewer sort comparisons overall.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 16查询规划器调整了在考虑`Merge Join`顺序时使用的规则，从“行的顺序必须完全匹配”调整为“必须至少有1个前导列正确排序”。这使得规划器可以使用`Incremental
    Sorts`将行按正确顺序准备到上层操作。我们从本博客的早期部分知道，当可能时，增量排序比完全排序需要更少的工作，因为增量排序能够利用部分排序的输入并以较小的批次执行排序，从而导致更少的内存消耗和更少的排序比较。
- en: '[PRE27]'
  id: totrans-split-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: PG15 EXPLAIN output
  id: totrans-split-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG15 EXPLAIN输出
- en: '[PRE28]'
  id: totrans-split-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: PG16 EXPLAIN output
  id: totrans-split-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PG16 EXPLAIN输出
- en: '[PRE29]'
  id: totrans-split-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the PG16 EXPLAIN output above, you can see that an `Incremental Sort` was
    used (compared to PG15 which instead used a `Sort`) and that resulted in a small
    reduction of the query’s `Execution Time` in PG16 and a large reduction in the
    memory used to perform the sort.
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述的PG16 EXPLAIN输出中，您可以看到使用了`Incremental Sort`（与PG15使用的`Sort`相比），这导致了PG16中查询的`Execution
    Time`略微减少以及执行排序所使用的内存大幅减少。
- en: Conclusion
  id: totrans-split-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: A lot of engineering work was done in PostgreSQL 16 to improve the query planner
    by many engineers from all around the world. I’d like to thank all the people
    who helped by reviewing the pieces that I worked on and all the people who gave
    feedback on the changes.
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 16进行了大量工程工作，以改进来自世界各地的许多工程师的查询规划器。我要感谢所有帮助审查我工作部分的人，以及对更改提供反馈的所有人。
- en: Each of the 10 improvements to the PostgreSQL 16 planner above are enabled by
    default—and are either applied in all cases where the optimization is possible,
    or are selectively applied by the query planner when it thinks the optimization
    will help.
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: 上述对PostgreSQL 16规划器的10个改进都是默认启用的，并且在可能的情况下，会应用于所有优化，或者由查询规划器在认为优化有助于时进行选择性应用。
- en: If you’re running an older version of PostgreSQL, I encourage you to try your
    workload on PostgreSQL 16 to see which of your queries are faster. And as always,
    feedback about real-world usage of PostgreSQL in the wild is welcome on the [pgsql-general@postgresql.org](mailto:pgsql-general@postgresql.org?subject=PG16%20query%20planner%20feedback)
    mailing list—you don’t have to just file issues, you can always share the positive
    experiences too. So please drop us a line about your experience with the PostgreSQL
    16 planner.
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行较旧版本的PostgreSQL，我鼓励您尝试在PostgreSQL 16上运行您的工作负载，看看哪些查询更快。如往常一样，欢迎在[pgsql-general@postgresql.org](mailto:pgsql-general@postgresql.org?subject=PG16%20query%20planner%20feedback)邮件列表上分享有关PostgreSQL在真实世界中使用的反馈，您不仅可以提交问题，还可以分享积极的使用经验。所以，请告诉我们您使用PostgreSQL
    16规划器的体验。
- en: Enjoy what you’re reading?
  id: totrans-split-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 喜欢您正在阅读的内容吗？
- en: If you want to read more posts from our Citus database and Postgres teams, sign
    up for our monthly newsletter and get the latest content delivered straight to
    your inbox.
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想阅读更多我们Citus数据库和Postgres团队的文章，请订阅我们的月度通讯，获取最新内容直接送到您的收件箱。
