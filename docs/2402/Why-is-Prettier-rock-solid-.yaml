- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:02:36'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Why is Prettier rock solid?
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://mrmr.io/til/prettier/](https://mrmr.io/til/prettier/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Why is Prettier rock solid?
  id: totrans-split-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I've always wondered why Prettier is so good. Yes, it learnt from `gofmt` what
    to do (note that `gofmt` doesn't indent, which is the hard part). Yes, it was
    announced in a real life conference, which helped get the initial momentum behind
    it.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: All that is fine, but what was a bit inexplicable to me is its quality.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: You might disagree with the defaults (I like them. The only one I disagree with
    is tabWidth, it should not have been 2 but 4),
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Or you might find that it is too slow,
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But in terms of functionality, it is **solid**. So far, it has never broken
    my JS / TS code. Such high quality is rare in the wild west of JavaScript libraries.
    Indeed, later additions to Prettier itself, like the MDX formatter for Prettier,
    have huge bugs that make them unreasonably risky for anything non-trivial. So
    how come Prettier's core formatters - HTML / CSS / JS / TS - are all rock solid?
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: 'Today, I got the answer. This is Prettier''s original author writing [about
    it](https://archive.jlongster.com/How-I-Became-Better-Programmer):'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: Prettier is a perfect example of this. I knew what I wanted but I had no idea
    how to implement it. After a little research I found *this paper* and after a
    few days I knew exactly what I needed to do. I had something basic working in
    a week. If I ignored previous research it would have taken a lot longer.
  id: totrans-split-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You know which paper it links to?
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '[A prettier printer, by Philip Wadler](http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf)!'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Joyce Kilmer and most computer scientists agree: there is no poem as lovely
    as a tree.'
  id: totrans-split-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Haskellers would recognize both the paper, and the author. Of course, this is
    not to take away from the authors of Prettier and the years of work that has subsequently
    gone into it – I'm just chirping about how Haskell continues to enrich my life
    even when I'm not using it.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
