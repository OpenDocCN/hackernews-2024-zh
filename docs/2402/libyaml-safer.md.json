["```\nstruct yaml_string_t {\n  char* start;  char* end;  char* pointer; // <-- ??? }; \n```", "```\nflow_style_mapping: { a: \"Hello\", b: \"World\" }, block_style_mapping:\n  a: Hello\n  b: World flow_style_sequence: [1, 2, 3] block_style_sequence: - 1 - 2 - 3 \n```", "```\n | 1700 | static int  |\n| 1701 | yaml_emitter_analyze_event(yaml_emitter_t *emitter,  |\n| 1702 |  yaml_event_t *event)  |\n| 1703 | {  |\n| 1704 |  emitter->anchor_data.anchor = NULL;  |\n| 1705 |  emitter->anchor_data.anchor_length = 0;  |\n| 1706 |  emitter->tag_data.handle = NULL;  |\n| 1707 |  emitter->tag_data.handle_length = 0;  |\n| 1708 |  emitter->tag_data.suffix = NULL;  |\n| 1709 |  emitter->tag_data.suffix_length = 0;  |\n| 1710 |  emitter->scalar_data.value = NULL;  |\n| 1711 |  emitter->scalar_data.length = 0;  |\n| 1712 |    |\n| 1713 |   switch (event->type)  |\n| 1714 |  {  |\n| 1715 |   // ...  |\n| 1716 |  }  |\n| 1717 |   // ...  |\n| 1718 | }  | \n```", "```\n#[derive(Default)] struct Analysis<'a> {\n  pub anchor: Option<AnchorAnalysis<'a>>,\n  pub tag: Option<TagAnalysis<'a>>,\n  pub scalar: Option<ScalarAnalysis<'a>>, }   struct AnchorAnalysis<'a> {\n  pub anchor: &'a str,\n  pub alias: bool, }   struct TagAnalysis<'a> {\n  pub handle: &'a str,\n  pub suffix: &'a str, }   struct ScalarAnalysis<'a> {\n  /// The scalar value.\n  pub value: &'a str,\n  /// Does the scalar contain line breaks?\n  pub multiline: bool,\n  /// Can the scalar be expessed in the flow plain style?\n  pub flow_plain_allowed: bool,\n  /// Can the scalar be expressed in the block plain style?\n  pub block_plain_allowed: bool,\n  /// Can the scalar be expressed in the single quoted style?\n  pub single_quoted_allowed: bool,\n  /// Can the scalar be expressed in the literal or folded styles?\n  pub block_allowed: bool,\n  /// The output style.\n  pub style: ScalarStyle, }   fn yaml_emitter_analyze_event<'a>(\n  emitter: &yaml_emitter_t,\n  event: &'a yaml_event_t, ) -> Analysis<'a> {\n  match event.type_ {  // ...\n } } \n```", "```\nvoid* stupid_c() {\n  void* some_memory = malloc(1024);\n  if (some_function(some_memory) != ERROR) {  // ...\n } else {\n  goto cleanup; }    if (some_other_function(some_memory) != ERROR) {  return some_memory; }   cleanup:\n  // We're returning an error, so we need to free what we allocated.\n  free(some_memory);\n  return NULL; } \n```", "```\nstruct yaml_parser_t {\n yaml_error_type_t error;  const char* problem; yaml_mark_t problem_mark;  const char* context; yaml_mark_t context_mark;  // ... } \n```", "```\nenum ParserError {\n Problem { problem: &'static str,\n problem_mark: Mark, context: &'static str,\n context_mark: Mark, } Scanner(ScannerError), }   enum ScannerError {\n Problem { problem: &'static str,\n problem_mark: Mark, context: &'static str,\n context_mark: Mark, }, Reader(ReaderError), }   enum ReaderError {\n Problem { problem: &'static str,\n offset: usize,\n value: i32,\n }, Io(std::io::Error), } \n```", "```\nstruct Mark {\n  pub line: u64,\n  pub column: u64,\n  pub index: u64, } \n```"]