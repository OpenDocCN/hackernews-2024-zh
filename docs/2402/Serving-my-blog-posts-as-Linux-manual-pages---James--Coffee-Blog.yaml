- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 13:28:43'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Serving my blog posts as Linux manual pages | James' Coffee Blog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://jamesg.blog/2024/02/29/linux-manual-pages/](https://jamesg.blog/2024/02/29/linux-manual-pages/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Intended audience: You are likely to enjoy this post the most if you are interested
    in Linux and/or Linux manual pages, or if you enjoy reading about esoteric programming
    projects.*'
  prefs: []
  type: TYPE_NORMAL
- en: Linux computers come with pre-installed manual pages that describe how to use
    specific commands. These pages are readable by typing `man <command>` into your
    terminal. For example, you can get the manual for the `tac` command, which prints
    out a file in from bottom-to-top by using the command `man tac`. Some command
    line software you install adds manual pages, too.
  prefs: []
  type: TYPE_NORMAL
- en: Linux manual pages are formatted using the `roff` syntax, which you can use
    to mark up documents. `roff` was the first typesetting command line software for
    Unix, developed at Bell Labs. Earlier this week, with a spark for building but
    no particular idea in mind, I started to think about the Linux manual page. Could
    I serve my blog posts as Linux manual pages? Herein lay an adventure.
  prefs: []
  type: TYPE_NORMAL
- en: 'TL;DR: You can request a Linux manual page version of a blog post with the
    following HTTP request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Devising the system: Content negotiation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I had an idea for how I wanted this to work in mind. I wanted a user to be
    able to request a `roff` version of a blog post using content negotiation, part
    of HTTP that lets you specify ixn what format you want a file. For example, you
    could request an image with an `Accept: image/png`. This tells a server that,
    if possible, it should send a PNG file. There are lots of intricacies to content
    negotiation. You can provide a list of types of content you can accept, and the
    order in which a server should try to return them'
  prefs: []
  type: TYPE_NORMAL
- en: But! That's a rabbit hole for another day. What's important here is that an
    application can ask a server for content in a specific format using a HTTP header.
  prefs: []
  type: TYPE_NORMAL
- en: With content negotiation, I can route requests if a user sends an `Accept` header.
    If a user asks for an `text/roff` document, I could return a manual page that
    can be opened with the `man` command.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the manual pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Manual pages use the `roff` syntax, so I would need to have versions of my
    blog posts in that format. To do this, I updated my site to generate `man` pages
    for each blog post. The template I used to generate the manual page was as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, I set a header with my domain name and create five sections: title, author,
    published date, the post content, and the URL of the post. The raw content is
    markdown. This doesn''t always turn out well in a manual as spacing can sometimes
    be off. But, markdown was more readable than HTML and resulted in less information
    loss (i.e. titles having no distinction to paragraphs other than being on their
    own line) than using plain text.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I now had:'
  prefs: []
  type: TYPE_NORMAL
- en: Properly formatted manual pages, and;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The knowledge that content negotiation could allow someone to request a manual
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now came the final piece of the puzzle: using content negotiation to facilitate
    the request for manual pages.'
  prefs: []
  type: TYPE_NORMAL
- en: Requesting a manual page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the following command to request the `roff` format of blog posts
    on this website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then open the result as a Linux manual page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Let's talk about how this works!
  prefs: []
  type: TYPE_NORMAL
- en: When a browser makes a request to `{{ site.root_url }}/2024/02/19/personal-website-ideas/`,
    it asks for the HTML version of the page. In the `curl` command above, the command
    asks for the `text/roff` version. I added a few lines of text in my NGINX configuration
    to change how the server responds when `text/roff` is requested for a blog post.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, I declared a few variables in my `/etc/nginx/nginx.conf` file that let
    me raise a flag when a specific content type was identified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can add multiple different redirect locations, but I only need two: the
    default, and my custom `text/roff` rule.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In my site NGINX configuration (the file in the `/etc/nginx/sites-enabled`
    folder), I used the following code to handle requests differently if a `roff`
    page is requested:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, I say: take a URL, and add `.man` to the end, removing the trailing slash,
    as long as the `Accept: text/roff` header is set. This tells NGINX to read from
    the `.man` file instead of the `index.html` file associated with each post on
    my site.'
  prefs: []
  type: TYPE_NORMAL
- en: That is to say you can now read blog posts on this website as a Linux manual
    page. This was a fun investigation into using content negotiation in NGINX and
    a reminder of how far we have come with typesetting technology from the command
    line interfaces to modern-day typesetting software and HTML.
  prefs: []
  type: TYPE_NORMAL
- en: '*Thank you to [Todd](https://toddpresta.com/) for providing guidance on setting
    up my NGINX configuration. Todd''s help was sincerely appreciated!*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Share this post on Hacker News](https://news.ycombinator.com/submitlink?u=/https://jamesg.blog/2024/02/29/linux-manual-pages/&t=Serving%20my%20blog%20posts%20as%20Linux%20manual%20pages).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Share this post on Lobste.rs](https://lobste.rs/stories/new?url=/https://jamesg.blog/2024/02/29/linux-manual-pages/&title=Serving%20my%20blog%20posts%20as%20Linux%20manual%20pages).'
  prefs: []
  type: TYPE_NORMAL
