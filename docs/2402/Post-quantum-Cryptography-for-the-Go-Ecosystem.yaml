- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:31:05'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:31:05'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Post-quantum Cryptography for the Go Ecosystem
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于 Go 生态系统的后量子密码学
- en: 来源：[https://words.filippo.io/dispatches/mlkem768/](https://words.filippo.io/dispatches/mlkem768/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://words.filippo.io/dispatches/mlkem768/](https://words.filippo.io/dispatches/mlkem768/)
- en: '[filippo.io/mlkem768](https://pkg.go.dev/filippo.io/mlkem768?ref=words.filippo.io)
    is a pure-Go implementation of ML-KEM-768 optimized for correctness and readability.
    ML-KEM (formerly known as Kyber, renamed because we can’t have nice things) is
    a [post-quantum](https://en.wikipedia.org/wiki/Post-quantum_cryptography?ref=words.filippo.io)
    key exchange mechanism in the process of being standardized by NIST and adopted
    by most of the industry.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[filippo.io/mlkem768](https://pkg.go.dev/filippo.io/mlkem768?ref=words.filippo.io)
    是一款经过优化以确保正确性和可读性的纯 Go 实现的 ML-KEM-768。ML-KEM（前身为 Kyber，因为我们不能拥有好东西而改名）是一个正在由 NIST
    标准化并被大多数行业采用的 [后量子](https://en.wikipedia.org/wiki/Post-quantum_cryptography?ref=words.filippo.io)
    密钥交换机制。'
- en: The package amounts to [~500 lines of code](https://github.com/FiloSottile/mlkem768/blob/main/mlkem768.go?ref=words.filippo.io),
    plus 200 lines of comments, and 650 lines of tests. It has no dependencies except
    for golang.org/x/crypto/sha3\. It’s meant for [upstreaming](https://go.dev/cl/550215?ref=words.filippo.io)
    into the Go standard library (initially as an internal-only package used in an
    opt-in crypto/tls experiment) and was designed to provide high security assurance
    through ease of review, simplicity, and thorough testing.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 该软件包总共有约 [~500 行代码](https://github.com/FiloSottile/mlkem768/blob/main/mlkem768.go?ref=words.filippo.io)，加上
    200 行注释和 650 行测试代码。除了 golang.org/x/crypto/sha3 外，它没有任何依赖项。它旨在 [上游合并](https://go.dev/cl/550215?ref=words.filippo.io)
    到 Go 标准库（最初作为一个仅内部使用的包，用于一个可选的 crypto/tls 实验），并且通过简洁性、易审查性和彻底测试来提供高安全性保证设计。
- en: I livecoded part of its development [on Twitch](https://twitch.tv/filosottile?ref=words.filippo.io),
    and you can watch [the replay on YouTube](https://www.youtube.com/watch?v=MyB7A93C-V0&ref=words.filippo.io).
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 [Twitch](https://twitch.tv/filosottile?ref=words.filippo.io) 上直播了它的部分开发过程，你可以在
    [YouTube 上观看回放](https://www.youtube.com/watch?v=MyB7A93C-V0&ref=words.filippo.io)。
- en: Unlike most other implementations, this code was not ported from the reference
    pq-crystals library, but written from scratch not having ever closely read other
    codebases. This was an intentional exercise in spec validation, to show it is
    possible to produce an interoperable implementation from the specification alone.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数其他实现不同，此代码并非从参考 pq-crystals 库移植，而是从头开始编写，从未密切阅读其他代码库。这是一种有意的规范验证练习，以展示仅凭规范就可以生成可互操作的实现。
- en: 'The [FIPS 203 document](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.203.ipd.pdf?ref=words.filippo.io)
    turned out to be an excellent implementation guide, with detailed pseudo-code,
    exhaustive definitions, and consistent type information. (This is something I
    would like to ask of any large specification document: define your types and use
    them and denote them!) To make the code both easier to review and better as a
    learning resource, function and variable names, and even operation ordering, are
    carefully picked to mirror the FIPS specification.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[FIPS 203 文档](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.203.ipd.pdf?ref=words.filippo.io)
    原来是一份优秀的实现指南，包含详细的伪代码、详尽的定义以及一致的类型信息。（这是我希望所有大型规范文档都能做到的事情：定义你的类型并使用它们并标记它们！）为了使代码更容易审查和作为学习资源更好，函数和变量名称，甚至操作顺序都精心选择以反映
    FIPS 规范。'
- en: The specification actually requires fairly limited math background, but to facilitate
    the work of implementers, I wrote up [Enough Polynomials and Linear Algebra to
    Implement Kyber](https://words.filippo.io/dispatches/kyber-math/).
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，规范要求的数学背景相当有限，但为了简化实施者的工作，我撰写了《足够的多项式和线性代数来实现 Kyber》[Enough Polynomials
    and Linear Algebra to Implement Kyber](https://words.filippo.io/dispatches/kyber-math/)。
- en: Beyond that, the only parts left as an exercise to the reader were
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，留给读者作为练习的部分有
- en: implementing arithmetic modulo the prime 3329;
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现模数为素数 3329 的算术；
- en: concretely implementing the compress and decompress functions mapping values
    [0, 3329) to and from [0, 2ᵈ); and
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具体实现将压缩和解压功能映射值从 [0, 3329) 到 [0, 2ᵈ)；并且
- en: ensuring constant time operations.
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保操作的时间保持恒定。
- en: Modulo arithmetic was reasonably easy, as we all collectively learned a lot
    about finite field arithmetic through years of RSA and elliptic curve implementations.
    The small prime actually makes the task feel unnaturally simple.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于模数算术来说相当容易，因为多年来我们通过 RSA 和椭圆曲线实现学到了有限域算术的很多知识。这个小素数使得任务感觉异常简单。
- en: '[Compression and decompression](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.203.ipd.pdf?ref=words.filippo.io#equation.4.5)
    turned out to be the most difficult part of the project. The specification defines
    them in abstract terms as fractions and rounding rules—“just” compute (2ᵈ/q)·x
    or (q/2ᵈ)·y and round to the closest integer—but in practice we need to implement
    them with constant time arithmetic and bitwise operations! In my [public comments](https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/n8dsN_aMsa8/m/NHO2lNyWAAAJ?ref=words.filippo.io)
    I pointed out that having each implementation figure out a strategy is risky and
    redundant. I was more correct than I thought: it turned out that [the reference
    implementation and ~every implementation ported from it used a division](https://github.com/pq-crystals/kyber/commit/dda29cc63af721981ee2c831cf00822e69be3220?ref=words.filippo.io)
    which depending on compiler optimizations and platform might result in a DIV instruction,
    which is variable-time even when the divisor is fixed. This package was unaffected,
    because it used [Barrett reduction](https://www.nayuki.io/page/barrett-reduction-algorithm?ref=words.filippo.io)
    from the start, like BoringSSL.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[压缩和解压缩](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.203.ipd.pdf?ref=words.filippo.io#equation.4.5)证明是项目中最困难的部分。规范将它们定义为抽象术语，如分数和舍入规则
    —— “只需”计算 (2ᵈ/q)·x 或 (q/2ᵈ)·y 并四舍五入到最接近的整数 —— 但实际上我们需要用常量时间算术和位操作来实现它们！在我的[公开评论](https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/n8dsN_aMsa8/m/NHO2lNyWAAAJ?ref=words.filippo.io)中，我指出让每个实现自行制定策略是冒险且多余。结果证明我比想象中更正确：[参考实现和几乎每个从它移植的实现](https://github.com/pq-crystals/kyber/commit/dda29cc63af721981ee2c831cf00822e69be3220?ref=words.filippo.io)都使用了依赖于编译器优化和平台的
    DIV 指令，即使除数固定也是变时的。本软件包未受影响，因为从一开始就使用了[巴雷特约简](https://www.nayuki.io/page/barrett-reduction-algorithm?ref=words.filippo.io)，就像
    BoringSSL 一样。'
- en: You can read [the rest of my formal public comments](https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/n8dsN_aMsa8/m/NHO2lNyWAAAJ?ref=words.filippo.io)
    on the pqc-forum mailing list.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[pqc-forum邮件列表上阅读我的其余正式公开评论](https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/n8dsN_aMsa8/m/NHO2lNyWAAAJ?ref=words.filippo.io)。
- en: 'Readability was a major goal of the implementation, and it was pursued ~~even~~
    especially for complex functions like compression and decompression. A readable
    implementation has two purposes: first, it allows effective review, both during
    the code review process and later by interested researchers, improving security;
    second, it serves as an educational resource for the next generation of maintainers
    and cryptography engineers (or curious nerds). Reading the Go cryptography standard
    library is how I got started on the path that led me here, so it is especially
    important to me to preserve and improve it as a learning resource. It’s obviously
    subjective, but I believe this to be the most understandable public ML-KEM/Kyber
    implementation. Compare for example [our compression/decompression functions](https://github.com/FiloSottile/mlkem768/blob/344d5ee2c575ca84613bbb119c1d8b1ef6699ea5/mlkem768.go?ref=words.filippo.io#L394-L442)
    with [the reference implementation](https://github.com/pq-crystals/kyber/blob/11d00ff1f20cfca1f72d819e5a45165c1e0a2816/ref/poly.c?ref=words.filippo.io#L9-L112).'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 可读性是实现的一个主要目标，特别是对于像压缩和解压缩这样的复杂函数。可读性的实现有两个目的：首先，它允许在代码审查过程中和之后由感兴趣的研究人员进行有效的审查，从而提高安全性；其次，它作为下一代维护者和密码工程师（或者好奇的极客）的教育资源。阅读
    Go 加密标准库是我开始走向这里之路的起点，因此对我来说，保护和改进它作为学习资源尤为重要。这显然是主观的，但我相信这是最易理解的公共 ML-KEM/Kyber
    实现。例如，比较[我们的压缩/解压缩函数](https://github.com/FiloSottile/mlkem768/blob/344d5ee2c575ca84613bbb119c1d8b1ef6699ea5/mlkem768.go?ref=words.filippo.io#L394-L442)与[参考实现](https://github.com/pq-crystals/kyber/blob/11d00ff1f20cfca1f72d819e5a45165c1e0a2816/ref/poly.c?ref=words.filippo.io#L9-L112)。
- en: 'Sometimes improving readability and reviewability means making code longer
    and less reusable: for example for ML-KEM-768 we need to serialize 1-, 4-, 10-,
    and 12-bit integers in a packed format. A universal 1-to-12 bit encoder and decoder
    is a pretty gnarly piece of code to write correctly, but each of those four sizes
    are actually pretty easy to write a dedicated encoder/decoder for. This is why
    we have `ringCompressAndEncode1/4/10` etc. instead of a single universal function.
    This also made it easy to work some special required checks into the 12-bit decoder.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有时为了改进可读性和可审查性，会使代码变得更长并且不太可重用：例如对于ML-KEM-768，我们需要以紧凑格式序列化1位、4位、10位和12位整数。编写一个通用的1到12位编码器和解码器确实是一件相当复杂的工作，但是每种大小的专用编码器/解码器实际上都很容易编写。这就是为什么我们有`ringCompressAndEncode1/4/10`等，而不是一个单一的通用函数。这也使得我们能够将一些特殊的必要检查轻松地整合到12位解码器中。
- en: 'This, by the way, was only possible because we targeted ML-KEM-768 specifically,
    or we’d have had to implement 5- and 11-bit encodings, as well. ML-KEM is specified
    at three security levels (-512, -768, and -1024). However, the Kyber team recommends
    using -768 over -512 for a more conservative security margin against novel cryptanalysis,
    while -1024 exists only for the same reasons 256-bit security levels exist: compliance
    and blind [strength matching](https://www.imperialviolet.org/2014/05/25/strengthmatching.html?ref=words.filippo.io).
    Most protocols being tested or standardized coalesced around ML-KEM-768, so targeting
    only that improves not only readability, but also security (because there are
    fewer moving parts), and performance (because we can optimize allocation sizes,
    iteration counts, and encoding algorithms) at little to no cost.'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，这仅仅因为我们专注于ML-KEM-768，否则我们必须实现5位和11位编码。ML-KEM在三个安全级别（-512，-768和-1024）上进行了规定。然而，Kyber团队建议选择-768而不是-512以获得更保守的安全边界，而-1024之所以存在仅仅是因为256位安全级别的规定和盲目的[强度匹配](https://www.imperialviolet.org/2014/05/25/strengthmatching.html?ref=words.filippo.io)。大多数正在测试或标准化的协议都集中在ML-KEM-768上，因此仅专注于它不仅提高了可读性，还提高了安全性（因为移动部分更少）和性能（因为我们可以优化分配大小、迭代次数和编码算法），而几乎没有额外成本。
- en: After readability, testing is the main component in this package’s high security
    assurance strategy. Besides checking that key generation, encapsulation, and decapsulation
    round-trip correctly, and maintaining a test coverage of 95%+, we
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在可读性之后，测试是该软件包高安全保障策略的主要组成部分。除了检查密钥生成、封装和解封装的正确轮回，并保持95%以上的测试覆盖率外，我们
- en: ensure interoperability with [test vectors obtained from NIST and other implementations](https://github.com/FiloSottile/mlkem768/blob/344d5ee2c575ca84613bbb119c1d8b1ef6699ea5/testdata/vectors.json?ref=words.filippo.io);
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保与[NIST和其他实现获取的测试向量](https://github.com/FiloSottile/mlkem768/blob/344d5ee2c575ca84613bbb119c1d8b1ef6699ea5/testdata/vectors.json?ref=words.filippo.io)的互操作性；
- en: exhaustively test every input combination for base field arithmetic operations
    (addition, subtraction, and multiplication modulo 3329) against expected values
    computed trivially with variable-time operations;
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对基域算术运算（加法、减法和乘法模3329）的每种输入组合进行详尽测试，以确保结果值与使用变量时间操作轻易计算的预期值一致；
- en: exhaustively test compression and decompression against math/big.Rat (contributed
    by David Buchanan);
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对比math/big.Rat对压缩和解压缩进行详尽测试（由David Buchanan贡献）。
- en: test that pre-computed constants match their definition;
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试预先计算的常数是否与其定义匹配；
- en: check that incorrect lengths (both long and short) cause the appropriate error
    for every input of every function;
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查所有函数的每个输入，确保不正确的长度（无论长短）都会导致适当的错误；
- en: run an extensive set of reusable test vectors we developed (see below);
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行我们开发的广泛可重用的测试向量集（见下文）；
- en: run test vectors [provided by Sophie Schmieg](https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/aCAX-2QrUFw/m/hy5gwcESAAAJ?ref=words.filippo.io)
    which will be eventually included in [Wycheproof](https://github.com/google/wycheproof?ref=words.filippo.io).
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行由[Sophie Schmieg提供的测试向量](https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/aCAX-2QrUFw/m/hy5gwcESAAAJ?ref=words.filippo.io)，这些测试向量最终将包含在[Wycheproof](https://github.com/google/wycheproof?ref=words.filippo.io)中；
- en: Our test vectors are designed to be reusable by other implementations, and [are
    published as part of the CCTV project](https://c2sp.org/CCTV/ML-KEM?ref=words.filippo.io)
    along with detailed [intermediate values](https://github.com/C2SP/CCTV/blob/main/ML-KEM/README.md?ref=words.filippo.io#intermediate-values)
    for testing and debugging each intermediate step and partial algorithm, which
    we used during development. There are different sets of tests vectors, each designed
    to reach different edge cases.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试向量设计为其他实现可重复使用，并作为[CCTV项目的一部分发布](https://c2sp.org/CCTV/ML-KEM?ref=words.filippo.io)，包括用于测试和调试每个中间步骤和部分算法的详细[中间值](https://github.com/C2SP/CCTV/blob/main/ML-KEM/README.md?ref=words.filippo.io#intermediate-values)。在开发过程中，我们使用了不同的测试向量集，每个都设计为涵盖不同的边缘情况。
- en: '[Negative test vectors](https://github.com/C2SP/CCTV/blob/main/ML-KEM/README.md?ref=words.filippo.io#bad-encapsulation-keys)
    provide invalid encapsulation keys, where the coefficients are higher than 3329\.
    These were often requested, since all the test vectors from the Kyber and NIST
    teams are for regular, correct inputs. These vectors individually test every value
    from 3329 to 2¹²-1 and every coefficient location, sharing the remaining coefficients
    so they compress from 1–3 MiB down to 12–28 KiB.'
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[负测试向量](https://github.com/C2SP/CCTV/blob/main/ML-KEM/README.md?ref=words.filippo.io#bad-encapsulation-keys)提供无效的封装密钥，其中系数高于3329。这些向量经常被请求，因为Kyber团队和NIST团队的所有测试向量都是针对正常的、正确的输入。这些向量分别测试从3329到2¹²-1的每个值和每个系数位置，剩余系数共享，使其从1–3
    MiB压缩到12–28 KiB。'
- en: '[“Unlucky” vectors](https://github.com/C2SP/CCTV/blob/main/ML-KEM/README.md?ref=words.filippo.io#unlucky-ntt-sampling-vector)
    require an unusually large number of XOF reads. Kyber samples a matrix from a
    portion of public keys with *rejection sampling*: it gets a random value between
    0 and 2 ¹²-1 and checks if it’s less than 3329, if not, it tries again. The amount
    of bytes needed to sample a matrix depends on how lucky you get with the sampling,
    and that’s a random function of the public key component. These vectors are regular
    public keys and require reading more than 575 bytes from the SHAKE-128 XOF in
    SampleNTT, which would ordinarily happen with probability 2⁻³⁸. Sophie’s vectors
    were bruteforced further, and require up to 591 bytes.'
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“不幸”向量](https://github.com/C2SP/CCTV/blob/main/ML-KEM/README.md?ref=words.filippo.io#unlucky-ntt-sampling-vector)需要异常大量的XOF读取。Kyber使用*拒绝采样*从公钥的一部分中采样矩阵：它获取一个介于0和2¹²-1之间的随机值，并检查是否小于3329，如果不是，则再次尝试。采样矩阵所需的字节数取决于采样的幸运程度，这是公钥组件随机函数的结果。这些向量是常规公钥，需要从SampleNTT中的SHAKE-128
    XOF读取超过575字节，通常的概率为2⁻³⁸。Sophie的向量经过更多的暴力破解，需要多达591字节。'
- en: At this point I would like to thank our detection and response team for not
    killing my job(s) hashing vast amounts of random seeds and looking for zeroes
    in the output. — Sophie Schmieg
  id: totrans-split-33
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此时我想感谢我们的检测和响应团队，他们没有让我因为大量随机种子的哈希和输出中的零而失去工作。 — Sophie Schmieg
- en: Special vectors [fail if strcmp is used](https://github.com/C2SP/CCTV/blob/main/ML-KEM/README.md?ref=words.filippo.io#strcmp-vectors)
    in ML-KEM.Decaps. In ML-KEM.Decaps the ciphertext is compared with the output
    of K-PKE.Encrypt for implicit rejection. If an implementation were to use `strcmp()`
    for that comparison it would fail to reject some ciphertexts if a zero byte terminates
    the comparison early. This one I hope is going to sit as a silent trap for years—who
    would use `strcmp()` in cryptographic code—and then ruthlessly kill a vulnerability,
    because of course someone will.
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特殊向量在ML-KEM.Decaps中使用`strcmp()`时[会失败](https://github.com/C2SP/CCTV/blob/main/ML-KEM/README.md?ref=words.filippo.io#strcmp-vectors)。在ML-KEM.Decaps中，密文与K-PKE.Encrypt的输出进行了隐式拒绝比较。如果实现使用`strcmp()`进行比较，则会在比较早期终止的情况下未能拒绝某些密文。我希望这个问题会悄悄成为一个陷阱多年——谁会在加密代码中使用`strcmp()`呢——然后无情地消除一个漏洞，因为当然会有人这样做。
- en: '[Accumulated vectors](https://github.com/C2SP/CCTV/blob/main/ML-KEM/README.md?ref=words.filippo.io#accumulated-pq-crystals-vectors)
    (derived from the reference pq-crystals implementation) allow testing randomly
    reachable edge cases without checking in large amounts of data. The reference
    implementation of Kyber includes a `test_vectors.c` program that generates 300MB
    of random vectors. I had no intention of checking in the output or compiling C,
    but since they are just randomly generated vectors, we can regenerate them in
    our tests from the deterministic RNG (SHAKE-128 with an empty input) and check
    they hash to an expected value. We can even take it further, and produce hashes
    for a million random tests, beyond the 10k they generate.'
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[累积向量](https://github.com/C2SP/CCTV/blob/main/ML-KEM/README.md?ref=words.filippo.io#accumulated-pq-crystals-vectors)（源自参考
    pq-crystals 实现）允许测试随机可达的边缘情况，而无需检查大量数据。Kyber 的参考实现包括一个 `test_vectors.c` 程序，用于生成
    300MB 的随机向量。我并没有打算检查输出或编译 C 代码，但由于它们只是随机生成的向量，我们可以在测试中使用确定性 RNG（空输入的 SHAKE-128）重新生成它们，并检查它们哈希到预期值。我们甚至可以进一步，为一百万次随机测试生成哈希，超过它们生成的
    10k 次。'
- en: I am happy to report that none of the tests, many introduced after completion
    of the implementation, identified any issues in filippo.io/mlkem768\. There is
    [at least one reported instance](https://github.com/C2SP/CCTV/issues/7?ref=words.filippo.io)
    of the negative vectors identifying a defect in a major implementation, though.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我很高兴地报告，在 filippo.io/mlkem768 完成后引入的许多测试中，没有发现任何问题。然而，有[至少一个报告的实例](https://github.com/C2SP/CCTV/issues/7?ref=words.filippo.io)显示了负向量在主要实现中识别出的一个缺陷。
- en: Performance is not a primary goal (neither of this package nor of [the Go cryptography
    packages](https://go.dev/design/cryptography-principles?ref=words.filippo.io))
    but the package needs to be fast enough to be useful. Thankfully, ML-KEM is pretty
    fast, to the point that this simple implementation is competitive with our assembly-optimized
    P-256 and X25519 implementations.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 性能并非主要目标（无论是该软件包还是[Go 加密软件包](https://go.dev/design/cryptography-principles?ref=words.filippo.io)），但该软件包需要足够快以便有用。幸运的是，ML-KEM
    很快，以至于这个简单的实现与我们的汇编优化的 P-256 和 X25519 实现相竞争。
- en: 'To compare apples to apples, note that we need to compare the whole operation
    that each side needs to perform for key establishment: for ECDH, two scalar multiplications
    (one of them by the fixed base point); for KEMs, key generation and decapsulation
    on one side, and encapsulation on the other. ECDH is symmetrical, ML-KEM key establishment
    is not.'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行公平比较，需要注意每一方需要执行的完整操作：对于 ECDH，需要两次标量乘法（其中一次是固定基点的乘法）；对于 KEMs，一方是密钥生成和解封装，另一方是封装。ECDH
    是对称的，而 ML-KEM 密钥建立则不是。
- en: 'The ECDH benchmarks below already include the two scalar multiplications, while
    the mlkem768 benchmarks are split as key generation and decapsulation under “Alice”
    and encapsulation under “Bob”. Since decapsulation includes a full encryption
    (to check the resulting ciphertext matches the input), Alice takes a lot longer
    than Bob: the latter does an encryption, while the former does an encryption,
    a decryption, and a key generation.'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 ECDH 基准已经包括了两次标量乘法，而 mlkem768 基准被分成了“Alice” 下的密钥生成和解封装以及“Bob” 下的封装。因为解封装包括完整的加密（用于检查结果密文是否与输入匹配），Alice
    的时间比 Bob 长得多：后者只做了一次加密，而前者则进行了一次加密、一次解密和一次密钥生成。
- en: All in all, “Bob” is as fast as our X25519 or P-256, while “Alice” takes less
    than twice. Compared to some of the fastest ML-KEM implementations out there (BoringSSL
    and libcrux), this package takes approximately double the time. For such a simple
    and unoptimized implementation, this is more than satisfactory.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，“Bob” 的速度与我们的 X25519 或 P-256 相当，而“Alice”的速度不到两倍。与一些最快的 ML-KEM 实现（如 BoringSSL
    和 libcrux）相比，此软件包的时间大约是它们的两倍。对于这样一个简单且未经优化的实现，这已经完全令人满意了。
- en: '[PRE0]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The performance wasn’t entirely free. In general, I followed high-performance
    Go programming patterns, trying for example to minimize heap allocations. Next,
    I [reworked the x/crypto/sha3 package](https://go.dev/cl/544817/2?ref=words.filippo.io)
    so it could be used without any heap allocation thanks to [the mid-stack inlining
    trick](https://words.filippo.io/efficient-go-apis-with-the-inliner/). However,
    I haven’t merged those changes yet and they are not included in the benchmarks
    above, because they have a negative effect on Apple M2 processors. No idea why
    yet.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 性能并不完全免费。总的来说，我遵循了高性能Go编程模式，例如尝试最小化堆分配。接下来，我[重新设计了x/crypto/sha3包](https://go.dev/cl/544817/2?ref=words.filippo.io)，这样可以在没有任何堆分配的情况下使用，这要归功于[中间堆栈内联技巧](https://words.filippo.io/efficient-go-apis-with-the-inliner/)。然而，我尚未合并这些更改，它们也不包含在上述基准测试中，因为它们对Apple
    M2处理器产生负面影响。目前还不清楚原因。
- en: '[PRE1]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The one successful optimization was complaining about the confusing result above
    on the Gophers Slack `#performance` channel, which sniped Josh Bleecher Snyder
    into contributing [a couple changes](https://github.com/FiloSottile/mlkem768/pulls?q=is%3Apr+author%3Ajosharian&ref=words.filippo.io)
    :)
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一成功的优化是在Gophers Slack的`#performance`频道上抱怨上述令人困惑的结果，这导致Josh Bleecher Snyder贡献了[一些变更](https://github.com/FiloSottile/mlkem768/pulls?q=is%3Apr+author%3Ajosharian&ref=words.filippo.io)
    :)
- en: 'There is some low hanging fruit still: key generation and decapsulation both
    sample a matrix from the same value, and since the two are usually done sequentially
    on the Alice side, the matrix could be stored saving around 10% time. There might
    be an opportunity to save a copy in the sha3 read path, too. After that, it’s
    a matter of optimizing the field implementation.'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些低悬的水果：密钥生成和解包都从相同的值中取样一个矩阵，由于这两者通常在Alice端顺序执行，所以可以存储该矩阵节约大约10%的时间。在sha3读取路径中，也许有保存副本的机会。之后，这就是优化字段实现的问题。
- en: If you got this far, you might want to follow me on Bluesky at [@filippo.abyssdomain.expert](https://bsky.app/profile/filippo.abyssdomain.expert?ref=words.filippo.io)
    or on Mastodon at [@filippo@abyssdomain.expert](https://abyssdomain.expert/@filippo?ref=words.filippo.io).
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你到达这一步，你可能想在Bluesky上关注我[@filippo.abyssdomain.expert](https://bsky.app/profile/filippo.abyssdomain.expert?ref=words.filippo.io)或者在Mastodon上[@filippo@abyssdomain.expert](https://abyssdomain.expert/@filippo?ref=words.filippo.io)。
- en: 'Bonus track: using a ML-KEM implementation as Kyber v3'
  id: totrans-split-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附加曲目：使用ML-KEM实现作为Kyber v3
- en: NIST made a few small changes to the Round 3 submission of Kyber. They are summarized
    in Section 1.3 of the FIPS draft.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: NIST对Kyber的第3轮提交做了一些小的更改。这些更改总结在FIPS草案的1.3节中。
- en: However, there are a few experimental protocols defined in terms of Kyber v3
    (or “draft00”), including the main deployed PQ TLS key exchange. Do we have to
    make a separate package to support them?
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有几个实验性协议是以Kyber v3（或“draft00”）的术语定义的，包括主要部署的PQ TLS密钥交换。我们是否需要制作一个单独的包来支持它们？
- en: Luckily, no we don’t.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们不。
- en: One change adds some validation for an edge case (non-canonical coefficient
    encodings in public keys) that was undefined in Kyber. Honest implementations
    will not produce such keys, so we can reject them as specified in the FIPS draft.
    It will make it possible to fingerprint our implementation as Kyber-on-ML-KEM
    but will be otherwise harmless.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个变化为边缘情况添加了一些验证（公钥中非规范系数的编码），在Kyber中未定义。诚实的实现不会生成这样的密钥，因此我们可以根据FIPS草案的规定拒绝它们。这将使我们的实现可以被指纹识别为Kyber-on-ML-KEM，但其他情况下无害。
- en: One change removed a hashing step applied to CSPRNG input. Since those bytes
    are random, it’s impossible for any party to tell the difference.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个变化取消了应用于CSPRNG输入的哈希步骤。由于这些字节是随机的，任何一方都无法分辨出区别。
- en: The final change is the major one, and the trickiest. The ciphertext used to
    be hashed into the shared secret. This difference would prevent interoperability.
    However, the mixing happens as an additional key derivation, which was entirely
    removed in ML-KEM, which instead returns the value K as-is. This means we can
    run ML-KEM to generate the shared secret K and then apply
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的变化是最重要的，也是最棘手的。密文曾经被哈希为共享密钥。这个区别将阻碍互操作性。然而，混合发生作为额外的密钥派生，完全在ML-KEM中移除，而是将值K直接返回。这意味着我们可以运行ML-KEM生成共享密钥K，然后应用
- en: '[PRE2]'
  id: totrans-split-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: to generate the Kyber shared secret. No need to break the ML-KEM abstraction.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 生成Kyber共享密钥的Kyber共享密钥共享密码。不需要打破ML-KEM抽象。
- en: 'There’s one wrinkle: both Kyber and ML-KEM perform implicit rejection in Decapsulate
    by hashing a secret with the ciphertext and returning that as the shared secret.
    If we do the key derivation above on top of ML-KEM, we’ll hash the ciphertext
    twice for implicit rejections. That’s ok, because the output of implicit rejection
    is unpredictable by design, not an interoperation target.'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个小问题：Kyber和ML-KEM在解密时通过将密文与密钥哈希并返回作为共享密钥来隐式拒绝。如果我们在ML-KEM上进行上述密钥派生，将会对隐式拒绝的密文进行两次哈希。这没关系，因为隐式拒绝的输出是设计上不可预测的，不是相互操作的目标。
- en: The picture
  id: totrans-split-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图片
- en: In Berlin there's an old closed airport, [Tempelhof](https://en.wikipedia.org/wiki/Berlin_Tempelhof_Airport?ref=words.filippo.io),
    which is now a public park. Walking down the taxiways (pictured) or along the
    centrelines of the 09L/27R and 09R/27L crossed-out runways is kinda unsettling,
    at least for me. ("Should I be speaking with Ground or Tower? Can I enter this
    runway?") Fun fact, in 2010 a single-engine plane forgot to switch fuel tank and
    did an emergency landing on 27L. Closed runways are the best bad places to land,
    after all.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在柏林有一个旧的关闭的机场，[泰普尔霍夫](https://en.wikipedia.org/wiki/Berlin_Tempelhof_Airport?ref=words.filippo.io)，现在是一个公园。沿着出租车道（如图所示）或者09L/27R和09R/27L交叉跑道的中心线走有点令人不安，至少对我来说是这样。（“我应该与地面或塔台联系吗？我可以进入这条跑道吗？”）有趣的是，在2010年，一架单发飞机忘记切换燃油箱，紧急降落在27L跑道上。关闭的跑道毕竟是最好的坏着陆场。
- en: '![A cement taxiway pictured at sunset, from the middle of the yellow centreline.
    The airport terminal is visible on the horizon, and a patch of grass on the left.](img/0154902025ef34d014567ae278a1e7e9.png)'
  id: totrans-split-59
  prefs: []
  type: TYPE_IMG
  zh: '![一条水泥跑道在日落时分拍摄的照片，从黄色中心线的中间看。机场航站楼在地平线上可见，左侧有一块草地。](img/0154902025ef34d014567ae278a1e7e9.png)'
- en: This work was funded by a Google [Open Source Security Subsidy](https://bughunters.google.com/about/rules/5891381450768384/open-source-security-subsidies-rules?ref=words.filippo.io)
    and by my awesome clients—[Sigsum](https://www.sigsum.org/?ref=words.filippo.io),
    [Latacora](https://www.latacora.com/?ref=words.filippo.io), [Interchain](https://interchain.io/?ref=words.filippo.io),
    [Smallstep](https://smallstep.com/?ref=words.filippo.io), [Ava Labs](https://www.avalabs.org/?ref=words.filippo.io),
    [Teleport](https://goteleport.com/?ref=words.filippo.io), and [Tailscale](https://tailscale.com/?ref=words.filippo.io)—who,
    through our retainer contracts, get face time and unlimited access to advice on
    Go and cryptography.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这项工作由Google [开源安全补贴](https://bughunters.google.com/about/rules/5891381450768384/open-source-security-subsidies-rules?ref=words.filippo.io)
    和我的出色客户资助——[Sigsum](https://www.sigsum.org/?ref=words.filippo.io)，[Latacora](https://www.latacora.com/?ref=words.filippo.io)，[Interchain](https://interchain.io/?ref=words.filippo.io)，[Smallstep](https://smallstep.com/?ref=words.filippo.io)，[Ava
    Labs](https://www.avalabs.org/?ref=words.filippo.io)，[Teleport](https://goteleport.com/?ref=words.filippo.io)
    和 [Tailscale](https://tailscale.com/?ref=words.filippo.io)——通过我们的保持协议获得了面对面时间和无限访问Go和密码学的建议。
- en: Here are a few words from some of them!
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是他们中一些人的话！
- en: Latacora — [We wrote about password hashing with delegation](https://www.latacora.com/blog/2023/12/22/case-for-password-hashing/?ref=words.filippo.io),
    a somewhat less known password hashing primitive. It's a PBKDF with a special
    property, that allows offloading hashing computation to a potentially untrusted
    server. In this blog post, we describe this primitive and discuss its applicability
    in the context of End-to-End Encrypted (E2EE) backup systems.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: Latacora — [我们写了关于委托密码哈希的文章](https://www.latacora.com/blog/2023/12/22/case-for-password-hashing/?ref=words.filippo.io)，这是一种较少为人知的密码哈希原语。这是一个带有特殊属性的PBKDF，允许将哈希计算外包给潜在不受信任的服务器。在这篇博文中，我们描述了这种原语并讨论了它在端到端加密（E2EE）备份系统中的适用性。
- en: Teleport — For the past five years, attacks and compromises have been shifting
    from traditional malware and security breaches to identifying and compromising
    valid user accounts and credentials with social engineering, credential theft,
    or phishing. [Teleport Identity Governance & Security](https://goteleport.com/identity-governance-security/?utm=filippo&ref=words.filippo.io)
    is designed to eliminate weak access patterns through access monitoring, minimize
    attack surface with access requests, and purge unused permissions via mandatory
    access reviews.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: Teleport — 过去五年来，攻击和妥协已从传统恶意软件和安全漏洞转向通过社会工程、凭证盗窃或网络钓鱼识别和妥协有效用户账户和凭证。[Teleport身份治理与安全](https://goteleport.com/identity-governance-security/?utm=filippo&ref=words.filippo.io)旨在通过访问监控消除弱访问模式，通过访问请求最小化攻击面，并通过强制访问审查清理未使用的权限。
- en: Ava Labs — We at [Ava Labs](https://www.avalabs.org/?ref=words.filippo.io),
    maintainer of [AvalancheGo](https://github.com/ava-labs/avalanchego?ref=words.filippo.io)
    (the most widely used client for interacting with the [Avalanche Network](https://www.avax.network/?ref=words.filippo.io)),
    believe the sustainable maintenance and development of open source cryptographic
    protocols is critical to the broad adoption of blockchain technology. We are proud
    to support this necessary and impactful work through our ongoing sponsorship of
    Filippo and his team.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[Ava Labs](https://www.avalabs.org/?ref=words.filippo.io) — 我们在[Ava Labs](https://www.avalabs.org/?ref=words.filippo.io)（Ava
    Labs的维护者），负责维护[AvalancheGo](https://github.com/ava-labs/avalanchego?ref=words.filippo.io)（与[Avalanche
    Network](https://www.avax.network/?ref=words.filippo.io)交互的最广泛使用的客户端）认为，持续维护和开发开源加密协议对于区块链技术的广泛采用至关重要。我们自豪地通过对Filippo及其团队的持续赞助来支持这一必要且有影响力的工作。'
