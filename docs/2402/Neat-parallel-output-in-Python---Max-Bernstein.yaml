- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 13:22:36'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Neat parallel output in Python | Max Bernstein
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://bernsteinbear.com/blog/python-parallel-output/](https://bernsteinbear.com/blog/python-parallel-output/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Say you have a program that does some processing of a list (loosely based on
    a work-in-progress project):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is fine. It works. It’s a little noisy, but it works. But then you discover
    something great: your problem is data parallel. That is, you can process as many
    repos as your system allows in parallel. Hoorah! You rewrite using `multiprocessing`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Unfortunately, the output is a little unwieldy. While each line is still nicely
    attributed to a repo, it’s spewing lines left and right and the lines are intermingled.
    Don’t you miss all the beautiful parallel output from tools such as Buck and Bazel
    and Cargo?
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, StackOverflow user [Leedehai](https://stackoverflow.com/questions/6840420/rewrite-multiple-lines-in-the-console/59147732#59147732)
    is a terminal pro user and knows how to rewrite multiple lines at a time in the
    console. We can adapt that answer for our needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will print each item’s status, one line at a time, to the terminal. It
    will print in the order that the item is added to `last_output_per_process`, but
    you can change that by (for example), sorting alphanumerically: `sorted(last_output_per_process.items())`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that we have to lock both the data structure and the terminal output to
    avoid things getting mangled; they are shared (pickled, via `Manager`) between
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: I’m not sure what this does if the log output is multiple lines long or if someone
    else is mucking with `stdout`/`stderr` (a stray `print`, perhaps). Please write
    in if you find out or have neat solutions.
  prefs: []
  type: TYPE_NORMAL
- en: This technique is probably fairly portable to any programming language that
    has threads and locks. The key difference is those implementations should use
    threads instead of processes; I did processes because it’s Python.
  prefs: []
  type: TYPE_NORMAL
- en: Check out the expanded version [in this Gist](https://gist.github.com/tekknolagi/4bee494a6e4483e4d849559ba53d067b).
  prefs: []
  type: TYPE_NORMAL
- en: A demo for you
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since you read this far, here is a demo of the program:'
  prefs: []
  type: TYPE_NORMAL
- en: Enjoy your newfound fun output!
  prefs: []
  type: TYPE_NORMAL
