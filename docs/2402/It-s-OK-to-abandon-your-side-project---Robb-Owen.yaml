- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 13:24:18'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 13:24:18'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: It's OK to abandon your side-project - Robb Owen
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 放弃你的副业项目是可以接受的 - Robb Owen
- en: 来源：[https://robbowen.digital/wrote-about/abandoned-side-projects/](https://robbowen.digital/wrote-about/abandoned-side-projects/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://robbowen.digital/wrote-about/abandoned-side-projects/](https://robbowen.digital/wrote-about/abandoned-side-projects/)
- en: The web industry is full to the brim with tales of side-projects that grew into
    successful businesses and, like many of us, I'll often find myself tinkering away
    on an idea or three after I've finished with my day-job. Whilst it's definitely
    an enticing prospect, working on a side-project is not always sunshine and Lambos
    though – sometimes they just don't work out. If you're reading this, there's a
    chance that you might have recently abandoned (or are considering abandoning)
    a side-project. Many of us have been there. Hell, the neglected side-project has
    become something of a developer-meme at this point.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: Web 行业充满了那些从副业发展成为成功企业的故事，就像我们许多人一样，下班后我经常会对一两个想法进行尝试。虽然这绝对是一个诱人的前景，但从事副业并不总是一帆风顺，有时它们就是不成功。如果你在读这篇文章，那么有可能你最近放弃了（或正在考虑放弃）一个副业项目。我们中许多人都有过这样的经历。该死的，被忽略的副业项目已经成为开发者梗的一部分了。
- en: That said, I often get emails from beginner developers looking for advice and
    one of the growing themes I've noticed recently is concern that they they aren't
    shipping their side-projects as quickly or numerously as they would like. That
    anxiousness is totally understandable. When the prevailing wisdom of developer
    hustle-culture is "always be shipping" and tech-interviewers will routinely measure
    candidates by the output of their extra-curricular coding, those abandoned side-projects
    might not feel so funny anymore. That doesn't sit right with me. We hear about
    all the side-project success stories, but what if we talked more openly about
    the ones that tanked? Many of us do retrospectives at work, but personal projects
    don't get the same treatment. Instead, why don't we shine a light on all the time
    we spent on projects that didn't go anywhere? The seemed-like-a-good-idea-at-the-time
    abandonware; the graveyard of `node_modules` folders still haunting our development
    environments.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我经常收到初学者开发者来信寻求建议，最近我注意到一个越来越多的主题是，他们担心自己的副业项目没有以他们想要的速度或数量发布。这种焦虑是完全可以理解的。当开发者努力文化的主流智慧是“始终如一地发布”，技术面试官常常会通过候选人的额外编码输出来评估他们，那些被放弃的副业项目可能就不再那么有趣了。我对此感到不舒服。我们听说过所有成功的副业项目故事，但如果我们更开放地讨论那些失败的呢？我们在工作中进行回顾，但个人项目却没有同样的待遇。为什么不让我们关注一下我们在那些未达成的项目上花费的所有时间呢？当时觉得是个好主意的弃置项目；`node_modules`
    文件夹仍在困扰我们的开发环境的墓地。
- en: I'd like to talk about a side-project I worked on a while ago; one that I abandoned
    the same day it was deployed.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我想谈谈我一段时间前参与的一个副业项目；这个项目在部署当天就被我放弃了。
- en: 'My partner is Latvian and, a few years back, I set out to learn her language.
    Being from a small country, detailed learning resources for the Latvian language
    are a bit sparse but I made decent progress regardless. That was, until I discovered
    that Latvian has [grammatical cases](https://en.wikipedia.org/wiki/Grammatical_case).
    If you''ve never encountered a "case" before, here''s a little primer:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我的伴侣是拉脱维亚人，几年前，我开始学习她的语言。由于来自一个小国家，拉脱维亚语的详细学习资源有些稀少，但我还是取得了不错的进展。直到我发现拉脱维亚语有[语法格](https://en.wikipedia.org/wiki/Grammatical_case)之前。如果你以前从未遇到过“格”，这里有个简要介绍：
- en: A language like English uses word order and prepositions such as "for", "to"
    or "in" to add meaning to each word in a sentence. If the order is wrong, or you
    miss a preposition, the sentence might no longer makes sense. For example, "Tom
    gives the book to Anna" sounds natural whereas, "Tom the book to Anna gives" doesn't.
    Cases change this up a bit. Instead of relying on word order and helper words,
    the end of each word itself changes to show what it is doing within the sentence.
    To return to the same example sentences in Latvian, "Tom**s** dod grāmat**u**
    Anna**i**" (emphasis added to highlight the functional endings). Literally translated
    back to English, this sentence would be something like "Tom-**subject** gives
    book-**object** Anna-**towards**".
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 像英语这样的语言利用词序和介词（如“for”、“to”或“in”）来为句子中的每个词增加意义。如果顺序错了，或者缺少了一个介词，句子可能就不通顺了。例如，“Tom
    gives the book to Anna”听起来很自然，而“Tom the book to Anna gives”则不是。语言学上，情况有所变化。与依赖词序和助动词不同，每个词的词尾变化来展示它在句子中的作用。回到同一个例子，用拉脱维亚语来说，“Tom**s**
    dod grāmat**u** Anna**i**”（强调添加以突显功能性结尾）。直译回英语，这个句子会类似于“Tom-**主语** gives book-**宾语**
    Anna-**间接宾语**”。
- en: Linguistically, cases are a pretty cool system because you no longer need to
    care about word order. As a learner though, this is a problem because you *do*
    need to care about all of the various endings for each word you learn. Latvian
    has seven cases in total, two grammatical genders (each with three separate conjugation
    patterns), and nouns can be singular and plural. The TL;DR is that's something
    like 84 possible endings to memorize.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 语言学上，情况是一个相当酷的系统，因为你不再需要关心词序。但作为学习者，这是一个问题，因为你确实需要记住每个单词的各种结尾。拉脱维亚语总共有七种情况，两种语法性别（每种有三种单独的词形变化模式），名词可以是单数和复数。简而言之，大约有84种可能的结尾需要记忆。
- en: So, cases can be a lot for a first-language English speaker. Thankfully though,
    I'm also a developer and therefore I'm hardwired to think that I can solve everything
    with code. What if I could build a quiz app to help me learn noun endings? This
    smelled like a side-project 🚀
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于一个以英语为母语的人来说，情况可能会有些棘手。不过幸运的是，我也是一名开发人员，因此我天生认为可以用代码解决所有问题。如果我能构建一个测验应用程序来帮助我学习名词的词尾，那会怎么样？这听起来像是一个副项目
    🚀
- en: I wanted to keep my app simple. Whilst I had a lot of other grammar to learn,
    I was only focusing on noun conjugations and that would help me whittle the initial
    concept down to an MVP. The quiz mechanism would present a series of Latvian nouns
    and the user would be required to conjugate the noun to the appropriate ending.
    To keep things interesting, the quiz would allow the user to make three mistakes
    before ending and I'd throw in a simple high-score system to keep track of how
    I'd performed in past quizzes.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我想保持我的应用程序简单。虽然我还有很多其他语法要学习，但我只专注于名词的词形变化，这将帮助我将最初的概念简化为MVP。测验机制将呈现一系列拉脱维亚名词，用户需要将名词变化到适当的结尾。为了保持趣味性，测验允许用户在结束之前犯三个错误，并且我还会增加一个简单的高分系统来跟踪我在过去测验中的表现。
- en: The tech stack would be simple too. At the time of planning, Svelte 3.0 was
    the new shiny so I decided to use it for my UI. I knew that I wanted to host everything
    on Netlify, so for the backend I'd write a couple serverless functions to present
    the questions and check the answers. The main list of nouns could be served from
    a static JSON file and, as I'd be the only user, I could safely persist previous
    quiz results and a high-score to local storage. I wouldn't need a database right
    now.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 技术栈也很简单。在规划时，Svelte 3.0是新宠，因此我决定将其用于我的用户界面。我知道我想要在Netlify上托管所有内容，因此对于后端，我将编写几个无服务器函数来呈现问题并检查答案。主要的名词列表可以从静态JSON文件中提供，并且作为唯一的用户，我可以安全地将以前的测验结果和高分存储到本地存储中。我现在不需要数据库。
- en: As for how I would actually check answers, that would take a bit of research.
    After extensively reading about the conjugation patterns and how the various types
    of nouns are classified, I decided that my simplest option would be to build a
    system that leaned heavily on Regex to strip noun stems and append the appropriate
    suffixes.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如何实际检查答案，需要进行一些研究。在广泛阅读了关于词形变化模式及各类名词分类的内容后，我决定最简单的选择是建立一个系统，大量依赖正则表达式来剥离名词词干并附加适当的后缀。
- en: With a decent plan in place, I started to code.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有了一个相当好的计划，我开始编码。
- en: After a full week of evenings working on the project, I put the finishing touches
    to the MVP. I deployed everything to Netlify and started my initial testing.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在整整一个星期的晚上工作在这个项目上之后，我为MVP添加了最后的修饰。我将所有内容部署到Netlify并开始进行初始测试。
- en: The UI was simple but passable and worked well on mobile devices. Quiz questions
    progressed smoothly and the session would end after three wrong answers, as designed.
    In between quizzes, the dashboard was correctly displaying stats for hits and
    misses on each word and the overall high-score was persisting between sessions.
    Happy that everything was working as planned, I cracked a beer and started training
    word endings.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面简单但还算过得去，在移动设备上工作良好。测验问题顺利进展，会话在三次错误答案后结束，如设计所需。在测验之间，仪表板正确显示了每个单词的击中和失误统计数据，并且整体最高分在会话之间保持不变。看到一切按计划运行，我开了瓶啤酒，开始训练单词的结束。
- en: It quickly became clear that my app had a really big problem that I hadn't anticipated.
    The quiz was far too easy. Worse still, if I didn't make 3 mistakes, the quiz
    would keep going indefinitely. It just wasn't fun to use.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 很快就清楚我的应用存在一个我没有预料到的大问题。测验太容易了。更糟糕的是，如果我不犯三个错误，测验将无限进行下去。这根本就不好玩。
- en: 'I racked my brain for possible ways to make the quiz more fun but, eventually,
    the penny dropped: The issue couldn''t actually be solved in code. It turns out
    that, in devising and coding all of the logic needed to test the various noun
    endings, I had passively learned the rules needed to form them.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我费尽心思地想出让测验更有趣的可能方法，但最终我恍然大悟：这个问题实际上无法用代码解决。事实证明，在设计和编码所有测试各种名词结尾所需的逻辑过程中，我无意中学会了形成它们的规则。
- en: Over the last week I had worked long evenings to research and build an app –
    with a target audience of one person – and I didn't really need to use it anymore.
    Oops.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的一个星期里，我长时间工作来研究和构建一个应用程序——目标受众只有一个人——而且我实际上不再需要使用它了。糟糕。
- en: Maybe the real treasure is the code we wrote along the way. [permalink](#maybe-the-real-treasure-is-the-code-we-wrote-along-the-way)
  id: totrans-split-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 或许真正的宝藏是我们在路上写下的代码。[永久链接](#maybe-the-real-treasure-is-the-code-we-wrote-along-the-way)
- en: 'Out of all of my abandoned side-projects, this was the one that made me think
    differently. Even if I would never actually use the end ''deliverable'', working
    on the project still indirectly achieved what I''d set out to do. That led me
    to an important realisation: we talk a lot about abandoned side-projects as "failed",
    but their success is really a matter of perspective.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我所有被放弃的副业项目中，这个项目让我有了不同的想法。即使我实际上永远也不会使用最终的“可交付成果”，但在项目上的工作仍然间接实现了我最初的目标。这让我有了一个重要的认识：我们常常把被放弃的副业项目称为“失败”，但它们的成功真的是一个视角的问题。
- en: Despite what some tech recruiters might have you believe, the success of a side-project
    doesn't need to be defined by a beautiful, shipped product. We work in a practical
    medium and any build experience, good, bad or abandoned, is still valid experience.
    If you are able to remove the pressure to ship and instead approach them like
    throwaway prototypes, side-projects become a great scratch pad for experimentation.
    As I found when building my Latvian app, even the act of writing code itself can
    be a successful tool for solving problems.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管一些技术招聘者可能让你相信，一个副业项目的成功不需要以一个漂亮的、发布的产品来定义。我们在一个实际的媒介中工作，无论是好是坏或者被放弃的建设经验，都是有效的经验。如果你能够消除交付的压力，而是把它们作为一次性原型来对待，副业项目就成为了一个非常好的实验田。当我建立我的拉脱维亚语应用程序时，我发现，即使是编写代码本身也可以成为解决问题的有效工具。
- en: This is not all to say that we should dismiss the reasons these projects get
    abandoned – introspection is still important – but I find that focusing on the
    progress made can feel more constructive in the long-term. After abandoning my
    Latvian project, I dipped back into some of the other stalled side-projects languishing
    on my laptop. Where I'd previously grumbled over a string of failures and wasted
    time, I could now refocus on what had gone well. On one project, I could see where
    I'd first learned how to make an API in Go. Elsewhere I was impressed at how I
    had figured out how to work with GIS map data in Postgres. In another derelict
    directory, I saw not much more than a broken animation - one that I would later
    revisit and evolve into this website.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说我们应该忽视这些项目被放弃的原因 - 自省仍然很重要 - 但我发现长期关注所取得的进展感觉更加有建设性。在放弃了我的拉脱维亚项目之后，我又回头看了一些其他搁置在笔记本电脑上的停滞侧项目。在此之前，我曾对一连串的失败和浪费时间感到不满，但现在我可以重新关注那些进展顺利的地方。在一个项目中，我看到自己是如何首次学会在Go中制作API的。在别处，我对自己如何学会在Postgres中处理GIS地图数据感到印象深刻。在另一个被遗弃的目录中，我看到的不过是一个破碎的动画
    - 这个动画后来演变成了这个网站。
- en: I still regularly work on side-projects but my perspective and motivations are
    different now. My advice to a beginner dev struggling with their side-projects
    would be to always make sure that you're doing them for yourself, and for the
    right reasons. Instead of approaching your first project purely as a means to
    make it big or to impress recruiters, see it firstly as a means to learn and explore
    what's possible. Once you've built up enough experience (i.e. abandoned a few
    projects) the rest usually follows. Side-projects should be creative and fun.
    If you find that shipping your project is starting to cause you stress or, worse
    yet, leaving you feeling burned out, then don't hesitate to cut it loose. Chances
    are that, if you look close enough, it has already brought you plenty of value.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然定期致力于侧项目，但现在我的视角和动机不同了。我对于一名初学者开发者在处理他们的侧项目时的建议是，确保你做这些项目是为了自己，并且出于正确的理由。与其将你的第一个项目纯粹视为一种取得巨大成功或者给招聘人员留下深刻印象的手段，不如首先将其视为一种学习和探索可能性的方式。一旦你积累了足够的经验（即放弃了一些项目），剩下的通常会跟随而来。侧项目应该是有创意和有趣的。如果你发现把项目推向完成开始让你感到压力，甚至更糟糕的是让你感到疲惫不堪，那就毫不犹豫地放手吧。很可能，如果你仔细观察，它已经为你带来了大量的价值。
