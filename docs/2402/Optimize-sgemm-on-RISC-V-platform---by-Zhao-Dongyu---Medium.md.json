["```\n$ cd sgemm/step0/\n$ make\n$ adb push test_bl_sgemm_step0.x ./.\n$ adb shell './test_bl_sgemm_step0.x'\n```", "```\nfor ( i = 0; i < m; i ++ ) {              // Start 2-th loop\n    for ( j = 0; j < n; j ++ ) {          // Start 1-nd loop\n        for ( p = 0; p < k; p ++ ) {      // Start 0-st loop\n            C( i, j ) += A( i, p ) * B( p, j );\n        }                                 // End   0-th loop\n    }                                     // End   1-st loop\n}                                         // End   2-nd loop\n```", "```\nfor ( i = 0; i < m; i ++ ) {              // Start 2-th loop\n    for ( p = 0; p < k; p ++ ) {          // Start 1-st loop\n        for ( j = 0; j < n; j ++ ) {      // Start 0-nd loop\n            C( i, j ) += A( i, p ) * B( p, j );\n        }                                 // End   0-th loop\n    }                                     // End   1-st loop\n}                                         // End   2-nd loop\n```", "```\nfor ( i = 0; i < m; i += DGEMM_MR ) {          // Start 2-nd loop\n    for ( j = 0; j < n; j += DGEMM_NR ) {      // Start 1-st loop\n        AddDot_4x4_opt( k, &A( i, 0 ), lda, &B( 0, j ), ldb, &C( i, j ), ldc );\n    }                                          // End   1-st loop\n}                                              // End   2-nd loop\n```", "```\nfor ( i = 0; i < m; i += DGEMM_MR ) {       // Start 2-nd loop\n    int mb = DGEMM_MR;\n    if((m - i) < DGEMM_MR) mb = m - i; \n    for ( j = 0; j < n; j += DGEMM_NR ) {   // Start 1-st loop\n        int nb = DGEMM_NR;\n        if((n - j) < DGEMM_NR) nb = n - j; \n        RvvSgemm4x16(   nb,                 // nr <= 16, a0\n                        mb,                 // mr <= 4,  a1\n                        k,                  // astride = k*sizeof(float), a2\n                        &A[i * k],          // mr * k,   a3\n                        &packB[j * k],      // k * 16,   a4\n                        &C( i, j ),         // mr * nr,  a5\n                        n * sizeof(float),  // Len(N) * sizeof(float), a6\n                        bias\n                    );\n    }                                       // End   1-st loop\n}                                           // End   2-nd loop\n```", "```\nfor ( j = 0; j < n; j += DGEMM_NR ) {       // Start 2-st loop\n    int nb = DGEMM_NR;\n    if((n - j) < DGEMM_NR) nb = n - j; \n    for ( i = 0; i < m; i += DGEMM_MR ) {   // Start 1-nd loop\n        int mb = DGEMM_MR;\n        if((m - i) < DGEMM_MR) mb = m - i; \n        RvvSgemm4x16(   nb,                 // nr <= 16, a0\n                        mb,                 // mr <= 4,  a1\n                        k,                  // astride = k*sizeof(float), a2\n                        &A[i * k],          // mr * k,   a3\n                        &packB[j * k],      // k * 16,   a4\n                        &C( i, j ),         // mr * nr,  a5\n                        n * sizeof(float),  // Len(N) * sizeof(float), a6\n                        bias\n                    );\n    }                                       // End   1-st loop\n}                                           // End   2-nd loop\n```", "```\nvfmacc.vf v16,  ft0, v0\nvlw.v v4, (bp0)         # b0'->v4\nflw fs4, 384(bp0)       # pre-load B\naddi bp0,bp0,64\nvfmacc.vf v20,  ft1, v0\n```"]