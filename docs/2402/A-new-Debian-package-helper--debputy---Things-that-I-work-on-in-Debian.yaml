- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:34:18'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:34:18'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'A new Debian package helper: debputy - Things that I work on in Debian'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个新的Debian包助手：debputy - 我在Debian上的工作
- en: 来源：[https://people.debian.org/~nthykier/blog/2023/a-new-debian-package-helper-debputy.html](https://people.debian.org/~nthykier/blog/2023/a-new-debian-package-helper-debputy.html)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://people.debian.org/~nthykier/blog/2023/a-new-debian-package-helper-debputy.html](https://people.debian.org/~nthykier/blog/2023/a-new-debian-package-helper-debputy.html)
- en: I have made a new helper for producing Debian packages called **debputy**. Today,
    I uploaded it to Debian unstable for the first time. This enables others to migrate
    their package build using **dh** +**debputy** rather than the "classic" **dh**.
    Eventually, I hope to remove **dh** entirely from this equation, so you only need
    **debputy**. But for now, **debputy** still leverages **dh** support for managing
    upstream build systems.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我做了一个新的辅助工具来生成Debian软件包，名为**debputy**。今天，我第一次将其上传到Debian的不稳定版本。这使得其他人可以使用**dh**
    +**debputy**迁移其软件包构建，而不是“经典的”**dh**。最终，我希望从这个方程式中彻底删除**dh**，因此您只需**debputy**。但是目前，**debputy**仍然利用**dh**支持来管理上游构建系统。
- en: The **debputy** tool takes a radically different approach to packaging compared
    to our existing packaging methods by using a single highlevel manifest instead
    of all the debian/install (etc.) and no "hook targets" in **debian/rules**.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**debputy**工具采用了与我们现有打包方法截然不同的方法，使用单个高级清单而不是所有debian/install（等等）以及**debian/rules**中没有“钩子目标”。'
- en: 'Here are some of the things that **debputy** can do or does:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是**debputy**可以做或正在做的一些事情：
- en: '**debputy** can perform installation similar to **dh_install**, **dh_installdocs**
    (etc.) plus a bit of the **dh-exec** support. Notably, **debputy** supports "*install
    /usr/bin/foo into foo"* and "*install everything else in /usr/bin into foo-utils*"
    without you having to resort to weird tricks. With debhelper, this would require
    **dh-exec**''s `=> /usr/bin/foo` operator.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**debputy**可以执行类似于**dh_install**、**dh_installdocs**（等等）以及一点**dh-exec**支持的安装。值得注意的是，**debputy**支持“*将/usr/bin/foo安装到foo中*”和“*将/usr/bin中的所有其他内容安装到foo-utils中*”，而无需您诉诸于奇怪的技巧。使用debhelper，这将需要**dh-exec**的`=>
    /usr/bin/foo`操作符。'
- en: '**debputy** can assign mode to files without needing hooks and static file
    ownership can be assigned without resorting to **fakeroot**. If you request **Rules-Requires-Root:
    no**, **debputy** will assemble the deb without using **fakeroot**. The fragileness
    of **fakeroot** may some day just be a horror story we tell our unruly children
    that they do not really believe is true.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**debputy**可以为文件分配模式，而无需使用钩子，并且可以为静态文件所有权分配权限，而无需诉诸于**fakeroot**。如果您请求**Rules-Requires-Root:
    no**，**debputy**将在不使用**fakeroot**的情况下组装deb。**fakeroot**的脆弱性可能终有一天只是我们告诉我们不听话的孩子的一则可怕故事，他们并不真正相信是真的。'
- en: '**debputy** defaults to all scripts with a "**#! /bin/tool**" or "**#! /usr/bin/tool**"
    to have mode 0755 (a+x) unless they are placed in directories known not to have
    executable files (such as the perl module dirs). As an example, scripts in the
    examples directory may now get an automatic executable bit if they have a proper
    #!-line for **/usr/bin** or **/bin**.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**debputy**默认将所有具有“**#! /bin/tool**”或“**#! /usr/bin/tool**”的脚本设置为0755模式（a+x），除非它们放置在已知不包含可执行文件的目录中（例如perl模块目录）。例如，如果示例目录中的脚本具有适用于**/usr/bin**或**/bin**的正确的#!行，那么它们现在可能会自动获得可执行位。'
- en: '**debputy** supports the default flow of 48 debhelper tools. If you are using
    pure **dh $@** with no sequence add-ons and no hook targets in **debian/rules**
    (or only hook targets for the upstream side), odds are that **debputy** got your
    needs covered.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**debputy**支持48个debhelper工具的默认流程。如果您仅使用纯**dh $@**，没有序列附加组件，也没有**debian/rules**中的钩子目标（或仅有上游侧的钩子目标），那么**debputy**很可能已经满足了您的需求。'
- en: 'There are also some features that **debputy** does not support at the moment:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 目前**debputy**还不支持的一些功能有：
- en: Almost any **debhelper** sequence add-on. The **debputy** tool comes with a
    migration tool that will auto-detect any unsupported **dh** add-on from **Build-Depends**
    and will flag them as potential problematic. The migration tool works from an
    list of approved add-ons. Note that manually activated add-ons via **dh $@ --with
    ...** are not detected.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几乎任何**debhelper**序列的附加组件。**debputy**工具带有一个迁移工具，可以自动检测任何不受支持的**dh**附加组件，并将它们标记为潜在的问题。迁移工具从一个批准的附加组件列表中工作。请注意，通过**dh
    $@ --with ...**手动激活的附加组件不会被检测到。
- en: Anything that installs or recently installed into **/lib** or another /usr-merged
    location. My life is too short to be directly involved in the /usr-merge transition.
    This means no **udev** and no **systemd** unit support at the moment (note **tmpfiles**
    and **sysusers** *is* supported). For the **systemd** side, I am also contemplating
    a different model for how to deal with services. Even without the /usr-merge transition,
    these would not have been supported. The migration tool will detect problematic
    file in the **debian** directory immediately and **debputy** will detect upstream
    provided **systemd** unit files at build time.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何安装或最近安装到**/lib**或另一个/usr-合并位置的东西。我的生命太短暂，无法直接参与/usr-合并过渡。这意味着目前不支持**udev**和**systemd**单元支持（注意**tmpfiles**和**sysusers**是支持的）。对于**systemd**方面，我也在考虑如何处理服务的不同模型。即使没有/usr-合并转换，这些也不会得到支持。迁移工具将立即检测到**debian**目录中的有问题文件，**debputy**将在构建时检测到上游提供的**systemd**单元文件。
- en: There is also no support for packager provided maintscript files at this time.
    If you have your own maintscripts, then you will not be able to migrate. The migration
    tool detects the **debhelper** based path and warns you (such as **debian/postinst**).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前还不支持打包人提供的维护脚本文件。如果您有自己的维护脚本，那么您将无法迁移。迁移工具检测到基于**debhelper**的路径，并警告您（例如**debian/postinst**）。
- en: Additionally, if you need special cases in tools (such as **perl-base** dependency
    with **dh_perl**) or rely on **dh_strip-nondeterminsm** for reproducibility, then
    you cannot or is advised not to migrate at this time.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，如果您需要工具中的特殊情况（例如**dh_perl**的**perl-base**依赖项）或依赖于**dh_strip-nondeterminsm**以实现可重现性，那么您现在不能迁移，或建议不要迁移。
- en: There are all limitations of the current work in progress. I hope to resolve
    them all in due time.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这都是当前进展中的工作的限制。我希望能够及时解决它们。
- en: Trying debputy
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试 debputy
- en: 'With the limitations aside, lets talk about how you would go about migrating
    a package:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些限制，让我们谈谈如何迁移一个软件包：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is of course a specific example that works out of the box. If you were
    to try this on **debianutils** (from git), the output would look something like
    this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这是一个开箱即用的具体示例。如果您尝试对**debianutils**（来自 git）进行此操作，输出将如下所示：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And indeed, **debianutils** requires at least 4 **debhelper** features beyond
    what **debputy** can support at the moment (all related to maintscripts and triggers).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，**debianutils** 目前至少需要 4 个**debhelper**功能，超出了**debputy**目前支持的范围（均与维护脚本和触发器相关）。
- en: Rapid feedback
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速反馈
- en: Rapid feedback cycles are important for keeping developers engaged in their
    work. The **debputy** tool provides the following features to enable rapid feedback.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 快速反馈循环对保持开发人员参与其中的工作非常重要。**debputy**工具提供以下功能以实现快速反馈。
- en: 'Idempotence: Clean re-runs of **dh_debputy** without clean/rebuild'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 同样干净的重新运行 **dh_debputy**，而无需清理/重建
- en: 'If you read the "fine print" of many **debhelper** commands, you may see the
    following note their manpage:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您阅读了许多**debhelper**命令的“细则”，您可能会在其手册中看到以下注释：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What this usually means, is that if you run the command twice, you will get
    its maintscript change (etc.) twice in the final deb. This fits into our "single-use
    clean throw-away chroot builds" on the buildds and CI as well as **dpkg-buildpackage**'s
    "no-clean" (**-nc**) option. Single-use throw-away chroots are not very helpful
    for debugging though, so I rarely use them when doing the majority of my packaging
    work as I do not want to wait for the chroot initialization (including installing
    of build-depends).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，这意味着如果您运行命令两次，您将在最终的 deb 中两次得到其维护脚本更改（等等）。这符合我们在 buildds 和 CI 上的“单次使用的干净丢弃式
    chroot 构建”以及**dpkg-buildpackage**的“无清理”（**-nc**）选项。然而，单次使用的丢弃式 chroots 在调试时并不是很有帮助，所以在做大部分打包工作时我很少使用它们，因为我不想等待
    chroot 初始化（包括安装 build-depends）。
- en: 'But even then, I have found that **dpkg-buildpackage -nc** has been useless
    for me in many cases as I am stuck between two options:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 但即使如此，我发现在许多情况下**dpkg-buildpackage -nc**对我毫无用处，因为我陷入了两个选择之间：
- en: With **-nc**, you often still interact with the upstream build system. As an
    example, **debhelper** will do a **dh_prep** followed by **dh_auto_install**,
    so now we are waiting for upstream's install target to run again. What should
    have taken seconds now easily take 0.5-1 minute extra per attempt.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**-nc**时，您通常仍然会与上游构建系统进行交互。例如，**debhelper**将执行**dh_prep**，然后是**dh_auto_install**，所以现在我们正在等待上游的安装目标再次运行。本应只需几秒钟的事情现在每次尝试都会额外花费
    0.5-1 分钟。
- en: If you want to by-pass this, you have to manually call the helpers needed (in
    correct order) and every run accumulates cruft from previous runs to the point
    that cruft drowns out the actual change you want to see. Also, I am rarely in
    the mood to play *human dh*, when I am debugging an issue that I failed to fix
    in my first, second and third try.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想绕过此问题，您必须手动调用所需的帮助程序（按正确的顺序），并且每次运行都会累积来自之前运行的不必要的东西，以至于这些杂质淹没了您想要看到的实际更改。当我在调试我第一次、第二次和第三次尝试未能解决的问题时，我很少会有心情玩
    *human dh*。
- en: As you can probably tell, neither option has worked that well for me. But with
    **dh_debputy**, I have made it a goal that it will not "self-taint" the final
    output. If **dh_debputy** fails, you should be able to tweak the manifest and
    re-run **dh_debputy** with the same arguments.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经注意到的那样，两种选择对我来说都效果不佳。但是通过 **dh_debputy**，我设定了一个目标，那就是它不会“自我污染”最终输出。如果**dh_debputy**失败，您应该能够调整清单并以相同的参数重新运行**dh_debputy**。
- en: No waiting for **dpkg-buildpackage -nc** nor anything implied by that.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需等待**dpkg-buildpackage -nc**或任何由此暗示的东西。
- en: No "self-tainting" of the final deb. The result you get, is the result you would
    have gotten if the previous **dh_debputy** run never happened.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不会对最终 deb 进行“自污染”。您获得的结果就是如果之前的 **dh_debputy** 运行从未发生过一样。
- en: Because **dh_debputy** produces the final result, I do not have to run multiple
    tools in "the right" order.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于**dh_debputy**生成了最终结果，因此我不必按“正确”的顺序运行多个工具。
- en: Obviously, this is currently a lot easier, because **debputy** is not involved
    in the upstream build system at all. If this feature is useful to you, please
    do let me know and I will try to preserve it as **debputy** progresses in features.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，目前这要容易得多，因为**debputy**根本不涉及上游构建系统。如果此功能对您有用，请告诉我，我将尽量在**debputy**的功能进展中保留它。
- en: Packager provided files
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打包者提供的文件
- en: On a different topic, have you ever wondered what kind of files you can place
    into the **debian** directory that **debhelper** automatically picks up or reacts
    too? I do not have an answer to that beyond it is over 80 files and that as the
    maintainer of **debhelper**, I am not willing to manually maintain such a list
    manually.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个话题上，您是否曾想过您可以将什么类型的文件放入**debian**目录中，以便**debhelper**自动检测或响应？我对此没有答案，除了超过
    80 个文件，作为**debhelper**的维护者，我不愿意手动维护这样一个列表。
- en: 'However, I do know what the answer is in **debputy**, because I can just ask
    **debputy**:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但我知道**debputy**中的答案是什么，因为我可以直接询问**debputy**：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will list all file types (**Stem** column) that **debputy** knows about
    and it accounts for any plugin that **debputy** can find. Note to be deterministic,
    **debputy** will not auto-load plugins that have not been explicitly requested
    during package builds. So this list could list files that are available but not
    active for your current package.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出所有**debputy**已知的文件类型（**Stem** 列）并考虑到任何**debputy**可以找到的插件。请注意，为了确定性，**debputy**不会自动加载未在包构建期间显式请求的插件。因此，此列表可能列出了可用但对当前软件包无效的文件。
- en: Note the output is not intended to be machine readable. That may come in later
    version. Feel free to chime in if you have a concrete use-case.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，输出不打算供机器阅读。这可能在以后的版本中出现。如果您有具体的用例，请随时提出意见。
- en: Take it for a spin
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试用一下
- en: As I started this blog post with, **debputy** is now available in unstable.
    I hope you will take it for a spin on some of your simpler packages and provide
    feedback on it. :)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在这篇博客文章开头提到的，**debputy**现在已经在不稳定版中可用了。我希望你能在一些简单的软件包上试用一下，并提供反馈意见。 :)
- en: 'For documentation, please have a look at:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如需文档，请查看：
- en: Thanks for considering
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您的考虑。
- en: 'PS: My deepest respect to the **fakeroot** maintainers. That game of whack-a-mole
    is not something I would have been willing to maintain. I think **fakeroot** is
    like the Python GIL in the sense that it has been important in getting Debian
    to where it is today. But at the same time, I feel it is time to let go of the
    "crutch" and find a proper solution.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: PS：对**fakeroot**的维护者们表示最崇高的敬意。那场捉迷藏游戏不是我愿意维护的东西。我认为**fakeroot**就像 Python 的 GIL
    一样，它对 Debian 达到今天的地步起到了重要作用。但与此同时，我觉得是时候放下这个“拐杖”，找到一个合适的解决方案了。
