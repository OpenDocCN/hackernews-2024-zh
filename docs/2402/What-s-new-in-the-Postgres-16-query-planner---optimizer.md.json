["```\n-- Setup\nCREATE TABLE distinct_test (a INT, b INT);\nINSERT INTO distinct_test\nSELECT x,1 FROM generate_series(1,1000000)x;\nCREATE INDEX on distinct_test(a);\nVACUUM ANALYZE distinct_test;\n\nEXPLAIN (ANALYZE, COSTS OFF, TIMING OFF)\nSELECT DISTINCT a,b FROM distinct_test; \n```", "```\n QUERY PLAN\n---------------------------------------------------------------\n HashAggregate (actual rows=1000000 loops=1)\n   Group Key: a, b\n   Batches: 81  Memory Usage: 11153kB  Disk Usage: 31288kB\n   ->  Seq Scan on distinct_test (actual rows=1000000 loops=1)\n Planning Time: 0.065 ms\n Execution Time: 414.226 ms\n(6 rows) \n```", "```\n QUERY PLAN\n------------------------------------------------------------------\n Unique (actual rows=1000000 loops=1)\n   ->  Incremental Sort (actual rows=1000000 loops=1)\n         Sort Key: a, b\n         Presorted Key: a\n         Full-sort Groups: 31250  Sort Method: quicksort  Average Memory: 26kB  Peak Memory: 26kB\n         ->  Index Scan using distinct_test_a_idx on distinct_test (actual rows=1000000 loops=1)\n Planning Time: 0.108 ms\n Execution Time: 263.167 ms\n(8 rows) \n```", "```\n-- Setup\nCREATE TABLE aggtest (a INT, b text);\nINSERT INTO aggtest SELECT a,md5((b%100)::text) FROM generate_series(1,10) a, generate_series(1,100000)b;\nCREATE INDEX ON aggtest(a,b);\nVACUUM FREEZE ANALYZE aggtest;\n\nEXPLAIN (ANALYZE, COSTS OFF, TIMING OFF, BUFFERS)\nSELECT a,COUNT(DISTINCT b) FROM aggtest GROUP BY a; \n```", "```\n QUERY PLAN\n---------------------------------------------------------------\n GroupAggregate (actual rows=10 loops=1)\n   Group Key: a\n   Buffers: shared hit=892, temp read=4540 written=4560\n   ->  Index Only Scan using aggtest_a_b_idx on aggtest (actual rows=1000000 loops=1)\n         Heap Fetches: 0\n         Buffers: shared hit=892\n Planning Time: 0.122 ms\n Execution Time: 302.693 ms\n(8 rows) \n```", "```\n QUERY PLAN\n---------------------------------------------------------------\n GroupAggregate (actual rows=10 loops=1)\n   Group Key: a\n   Buffers: shared hit=892\n   ->  Index Only Scan using aggtest_a_b_idx on aggtest (actual rows=1000000 loops=1)\n         Heap Fetches: 0\n         Buffers: shared hit=892\n Planning Time: 0.061 ms\n Execution Time: 115.534 ms\n(8 rows) \n```", "```\n-- Setup\nCREATE TABLE t1 (a INT PRIMARY KEY);\nCREATE TABLE t2 (a INT PRIMARY KEY);\nCREATE TABLE lookup (a INT);\n\nINSERT INTO t1 SELECT x FROM generate_Series(1,10000) x;\nINSERT INTO t2 SELECT x FROM generate_Series(1,10000) x;\nINSERT INTO lookup SELECT x%10+1 FROM generate_Series(1,1000000)x;\n\nANALYZE t1,t2,lookup;\n\nEXPLAIN (ANALYZE, COSTS OFF, TIMING OFF)\nSELECT * FROM (SELECT * FROM t1 UNION ALL SELECT * FROM t2) t\nINNER JOIN lookup l ON l.a = t.a; \n```", "```\n QUERY PLAN\n-------------------------------------------------------------------------------\n Nested Loop (actual rows=2000000 loops=1)\n   ->  Seq Scan on lookup l (actual rows=1000000 loops=1)\n   ->  Append (actual rows=2 loops=1000000)\n         ->  Index Only Scan using t1_pkey on t1 (actual rows=1 loops=1000000)\n               Index Cond: (a = l.a)\n               Heap Fetches: 1000000\n         ->  Index Only Scan using t2_pkey on t2 (actual rows=1 loops=1000000)\n               Index Cond: (a = l.a)\n               Heap Fetches: 1000000\n Planning Time: 0.223 ms\n Execution Time: 1926.151 ms\n(11 rows) \n```", "```\n QUERY PLAN\n---------------------------------------------------------------------------------\n Nested Loop (actual rows=2000000 loops=1)\n   ->  Seq Scan on lookup l (actual rows=1000000 loops=1)\n   ->  Memoize (actual rows=2 loops=1000000)\n         Cache Key: l.a\n         Cache Mode: logical\n         Hits: 999990  Misses: 10  Evictions: 0  Overflows: 0  Memory Usage: 2kB\n         ->  Append (actual rows=2 loops=10)\n               ->  Index Only Scan using t1_pkey on t1 (actual rows=1 loops=10)\n                     Index Cond: (a = l.a)\n                     Heap Fetches: 10\n               ->  Index Only Scan using t2_pkey on t2 (actual rows=1 loops=10)\n                     Index Cond: (a = l.a)\n                     Heap Fetches: 10\n Planning Time: 0.229 ms\n Execution Time: 282.120 ms\n(15 rows) \n```", "```\n-- Setup\nCREATE TABLE small(a int);\nCREATE TABLE large(a int);\nINSERT INTO small\nSELECT a FROM generate_series(1,100) a;\nINSERT INTO large\nSELECT a FROM generate_series(1,1000000) a;\nVACUUM ANALYZE small,large;\n\nEXPLAIN (ANALYZE, COSTS OFF, TIMING OFF)\nSELECT * FROM small s\nWHERE NOT EXISTS(SELECT 1 FROM large l WHERE s.a = l.a); \n```", "```\n QUERY PLAN\n---------------------------------------------------------------\n Hash Anti Join (actual rows=0 loops=1)\n   Hash Cond: (s.a = l.a)\n   ->  Seq Scan on small s (actual rows=100 loops=1)\n   ->  Hash (actual rows=1000000 loops=1)\n         Buckets: 262144  Batches: 8  Memory Usage: 6446kB\n         ->  Seq Scan on large l (actual rows=1000000 loops=1)\n Planning Time: 0.103 ms\n Execution Time: 139.023 ms\n(8 rows) \n```", "```\n QUERY PLAN\n-----------------------------------------------------------\n Hash Right Anti Join (actual rows=0 loops=1)\n   Hash Cond: (l.a = s.a)\n   ->  Seq Scan on large l (actual rows=1000000 loops=1)\n   ->  Hash (actual rows=100 loops=1)\n         Buckets: 1024  Batches: 1  Memory Usage: 12kB\n         ->  Seq Scan on small s (actual rows=100 loops=1)\n Planning Time: 0.094 ms\n Execution Time: 77.076 ms\n(8 rows) \n```", "```\n-- Setup\nCREATE TABLE odd (a INT);\nCREATE TABLE even (a INT);\nINSERT INTO odd\nSELECT a FROM generate_series(1,1000000,2) a;\nINSERT INTO even\nSELECT a FROM generate_series(2,1000000,2) a;\nVACUUM ANALYZE odd, even;\n\nEXPLAIN (ANALYZE, COSTS OFF, TIMING OFF)\nSELECT COUNT(o.a),COUNT(e.a) FROM odd o FULL JOIN even e ON o.a = e.a; \n```", "```\n QUERY PLAN\n-------------------------------------------------------------------\n Aggregate (actual rows=1 loops=1)\n   ->  Hash Full Join (actual rows=1000000 loops=1)\n         Hash Cond: (o.a = e.a)\n         ->  Seq Scan on odd o (actual rows=500000 loops=1)\n         ->  Hash (actual rows=500000 loops=1)\n               Buckets: 262144  Batches: 4  Memory Usage: 6439kB\n               ->  Seq Scan on even e (actual rows=500000 loops=1)\n Planning Time: 0.079 ms\n Execution Time: 220.677 ms\n(9 rows) \n```", "```\n QUERY PLAN\n--------------------------------------------------------------------------------\n Finalize Aggregate (actual rows=1 loops=1)\n   ->  Gather (actual rows=2 loops=1)\n         Workers Planned: 1\n         Workers Launched: 1\n         ->  Partial Aggregate (actual rows=1 loops=2)\n               ->  Parallel Hash Full Join (actual rows=500000 loops=2)\n                     Hash Cond: (o.a = e.a)\n                     ->  Parallel Seq Scan on odd o (actual rows=250000 loops=2)\n                     ->  Parallel Hash (actual rows=250000 loops=2)\n                           Buckets: 262144  Batches: 4  Memory Usage: 6976kB\n                           ->  Parallel Seq Scan on even e (actual rows=250000 loops=2)\n Planning Time: 0.161 ms\n Execution Time: 129.769 ms\n(13 rows) \n```", "```\n-- Setup\nCREATE TABLE scores (id INT PRIMARY KEY, score INT);\nINSERT INTO scores SELECT s,random()*10 FROM generate_series(1,1000000)s;\nCREATE INDEX ON scores(score);\nVACUUM ANALYZE scores;\n\nEXPLAIN (ANALYZE, COSTS OFF, TIMING OFF)\nSELECT * FROM (\n    SELECT id,ROW_NUMBER() OVER (ORDER BY score) rn,score\n    FROM scores\n) m WHERE rn <= 10; \n```", "```\n QUERY PLAN\n-------------------------------------------------------------------------------\n WindowAgg (actual rows=10 loops=1)\n   Run Condition: (row_number() OVER (?) <= 10)\n   ->  Index Scan using scores_score_idx on scores (actual rows=50410 loops=1)\n Planning Time: 0.096 ms\n Execution Time: 29.775 ms\n(5 rows) \n```", "```\n QUERY PLAN\n----------------------------------------------------------------------------\n WindowAgg (actual rows=10 loops=1)\n   Run Condition: (row_number() OVER (?) <= 10)\n   ->  Index Scan using scores_score_idx on scores (actual rows=11 loops=1)\n Planning Time: 0.191 ms\n Execution Time: 0.058 ms\n(5 rows) \n```", "```\n-- Setup\nCREATE TABLE marathon (id INT PRIMARY KEY, time INTERVAL NOT NULL);\nINSERT INTO marathon\nSELECT id,'03:00:00'::interval + (CAST(RANDOM() * 3600 AS INT) || 'secs')::INTERVAL - (CAST(RANDOM() * 3600 AS INT) || ' secs')::INTERVAL\nFROM generate_series(1,50000) id;\nCREATE INDEX ON marathon (time);\nVACUUM ANALYZE marathon;\n\nEXPLAIN (ANALYZE, COSTS OFF, TIMING OFF)\nSELECT * FROM (SELECT *,percent_rank() OVER (ORDER BY time) pr\nFROM marathon) m WHERE pr <= 0.01; \n```", "```\n QUERY PLAN\n-----------------------------------------------------------------------\n Subquery Scan on m (actual rows=500 loops=1)\n   Filter: (m.pr <= '0.01'::double precision)\n   Rows Removed by Filter: 49500\n   ->  WindowAgg (actual rows=50000 loops=1)\n         ->  Index Scan using marathon_time_idx on marathon (actual rows=50000 loops=1)\n Planning Time: 0.108 ms\n Execution Time: 84.358 ms\n(7 rows) \n```", "```\n QUERY PLAN\n-----------------------------------------------------------------------\n WindowAgg (actual rows=500 loops=1)\n   Run Condition: (percent_rank() OVER (?) <= '0.01'::double precision)\n   ->  Index Scan using marathon_time_idx on marathon (actual rows=50000 loops=1)\n Planning Time: 0.180 ms\n Execution Time: 19.454 ms\n(5 rows) \n```", "```\n-- Setup\nCREATE TABLE part_tab (id BIGINT PRIMARY KEY, payload TEXT) PARTITION BY HASH(id);\nCREATE TABLE part_tab_p0 PARTITION OF part_tab FOR VALUES WITH (modulus 2, remainder 0);\nCREATE TABLE part_tab_p1 PARTITION OF part_tab FOR VALUES WITH (modulus 2, remainder 1);\nCREATE TABLE normal_table (id INT, part_tab_id BIGINT);\n\nEXPLAIN (ANALYZE, COSTS OFF, TIMING OFF)\nSELECT nt.* FROM normal_table nt LEFT JOIN part_tab pt ON nt.part_tab_id = pt.id; \n```", "```\n QUERY PLAN\n-------------------------------------------------------------------\n Merge Right Join (actual rows=0 loops=1)\n   Merge Cond: (pt.id = nt.part_tab_id)\n   ->  Merge Append (actual rows=0 loops=1)\n         Sort Key: pt.id\n         ->  Index Only Scan using part_tab_p0_pkey on part_tab_p0 pt_1 (actual rows=0 loops=1)\n               Heap Fetches: 0\n         ->  Index Only Scan using part_tab_p1_pkey on part_tab_p1 pt_2 (actual rows=0 loops=1)\n               Heap Fetches: 0\n   ->  Sort (actual rows=0 loops=1)\n         Sort Key: nt.part_tab_id\n         Sort Method: quicksort  Memory: 25kB\n         ->  Seq Scan on normal_table nt (actual rows=0 loops=1)\n Planning Time: 0.325 ms\n Execution Time: 0.037 ms\n(14 rows) \n```", "```\n QUERY PLAN\n-----------------------------------------------------\n Seq Scan on normal_table nt (actual rows=0 loops=1)\n Planning Time: 0.244 ms\n Execution Time: 0.015 ms\n(3 rows) \n```", "```\n-- Setup\nCREATE TABLE abc (a int, b int, c int);\nINSERT INTO abc SELECT a%10,a%10,a%10 FROM generate_series(1,1000000)a;\nVACUUM ANALYZE abc;\n\nEXPLAIN (ANALYZE, COSTS OFF, TIMING OFF)\nSELECT DISTINCT a,b,c FROM abc WHERE a = 5 AND b = 5 AND c = 5; \n```", "```\n QUERY PLAN\n------------------------------------------------------------------------\n Unique (actual rows=1 loops=1)\n   ->  Gather (actual rows=3 loops=1)\n         Workers Planned: 2\n         Workers Launched: 2\n         ->  Unique (actual rows=1 loops=3)\n               ->  Parallel Seq Scan on abc (actual rows=33333 loops=3)\n                     Filter: ((a = 5) AND (b = 5) AND (c = 5))\n                     Rows Removed by Filter: 300000\n Planning Time: 0.114 ms\n Execution Time: 30.381 ms\n(10 rows) \n```", "```\n QUERY PLAN\n---------------------------------------------------\n Limit (actual rows=1 loops=1)\n   ->  Seq Scan on abc (actual rows=1 loops=1)\n         Filter: ((a = 5) AND (b = 5) AND (c = 5))\n         Rows Removed by Filter: 4\n Planning Time: 0.109 ms\n Execution Time: 0.025 ms\n(6 rows) \n```", "```\n-- Setup\n\nCREATE TABLE a (a INT, b INT);\nCREATE TABLE b (x INT, y INT);\nINSERT INTO a SELECT a,a FROM generate_series(1,1000000) a;\nINSERT INTO b SELECT a,a FROM generate_series(1,1000000) a;\nVACUUM ANALYZE a, b;\n\nSET enable_hashjoin=0;\nSET max_parallel_workers_per_gather=0;\nEXPLAIN (ANALYZE, COSTS OFF, TIMING OFF)\nSELECT a,b,count(*) FROM a INNER JOIN b ON a.a = b.x GROUP BY a,b ORDER BY a DESC, b; \n```", "```\n QUERY PLAN\n---------------------------------------------------------------------------\n GroupAggregate (actual rows=1000000 loops=1)\n   Group Key: a.a, a.b\n   ->  Sort (actual rows=1000000 loops=1)\n         Sort Key: a.a DESC, a.b\n         Sort Method: external merge  Disk: 17664kB\n         ->  Merge Join (actual rows=1000000 loops=1)\n               Merge Cond: (a.a = b.x)\n               ->  Sort (actual rows=1000000 loops=1)\n                     Sort Key: a.a\n                     Sort Method: external merge  Disk: 17664kB\n                     ->  Seq Scan on a (actual rows=1000000 loops=1)\n               ->  Materialize (actual rows=1000000 loops=1)\n                     ->  Sort (actual rows=1000000 loops=1)\n                           Sort Key: b.x\n                           Sort Method: external merge  Disk: 11768kB\n                           ->  Seq Scan on b (actual rows=1000000 loops=1)\n Planning Time: 0.175 ms\n Execution Time: 1010.738 ms\n(18 rows) \n```", "```\n QUERY PLAN\n---------------------------------------------------------------------------\n GroupAggregate (actual rows=1000000 loops=1)\n   Group Key: a.a, a.b\n   ->  Incremental Sort (actual rows=1000000 loops=1)\n         Sort Key: a.a DESC, a.b\n         Presorted Key: a.a\n         Full-sort Groups: 31250  Sort Method: quicksort  Average Memory: 26kB  Peak Memory: 26kB\n         ->  Merge Join (actual rows=1000000 loops=1)\n               Merge Cond: (a.a = b.x)\n               ->  Sort (actual rows=1000000 loops=1)\n                     Sort Key: a.a DESC\n                     Sort Method: external merge  Disk: 17672kB\n                     ->  Seq Scan on a (actual rows=1000000 loops=1)\n               ->  Materialize (actual rows=1000000 loops=1)\n                     ->  Sort (actual rows=1000000 loops=1)\n                           Sort Key: b.x DESC\n                           Sort Method: external merge  Disk: 11768kB\n                           ->  Seq Scan on b (actual rows=1000000 loops=1)\n Planning Time: 0.140 ms\n Execution Time: 915.589 ms\n(19 rows) \n```"]