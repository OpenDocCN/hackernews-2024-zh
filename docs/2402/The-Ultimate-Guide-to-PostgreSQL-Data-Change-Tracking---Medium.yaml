- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 13:21:12'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 13:21:12'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The Ultimate Guide to PostgreSQL Data Change Tracking | Medium
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PostgreSQL 数据变更跟踪的终极指南 | Medium
- en: 来源：[https://exaspark.medium.com/the-ultimate-guide-to-postgresql-data-change-tracking-c3fa88779572](https://exaspark.medium.com/the-ultimate-guide-to-postgresql-data-change-tracking-c3fa88779572)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://exaspark.medium.com/the-ultimate-guide-to-postgresql-data-change-tracking-c3fa88779572](https://exaspark.medium.com/the-ultimate-guide-to-postgresql-data-change-tracking-c3fa88779572)
- en: '**The Ultimate Guide to PostgreSQL Data Change Tracking**'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**PostgreSQL 数据变更跟踪的终极指南**'
- en: PostgreSQL, one of the most popular databases, was named DBMS of the Year 2023
    by [DB-Engines Ranking](https://db-engines.com/en/blog_post/106) and is used more
    than any other database among startups according to [HN Hiring Trends](https://www.hntrends.com/2024/january.html?compare=SQL+Server).
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL，作为最受欢迎的数据库之一，根据 [DB-Engines Ranking](https://db-engines.com/en/blog_post/106)
    被评为2023年的 DBMS 之一，并根据 [HN Hiring Trends](https://www.hntrends.com/2024/january.html?compare=SQL+Server)
    在初创公司中使用比其他任何数据库都多。
- en: PostgreSQL is the most popular database among startups
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 是初创公司中最受欢迎的数据库
- en: The SQL standard has included features related to [temporal databases](https://en.wikipedia.org/wiki/Temporal_database)
    since 2011, which allow storing data changes over time rather than just the current
    data state. However, relational databases don’t completely follow the standards.
    In the case of PostgreSQL, it doesn’t support these features, even though there
    has been a submitted [patch](https://www.postgresql.org/message-id/flat/CALAY4q-cXCD0r4OybD%3Dw7Hr7F026ZUY6%3DLMsVPUe6yw_PJpTKQ%40mail.gmail.com)
    with some discussions.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 自2011年起，SQL 标准已包含与 [时间数据库](https://en.wikipedia.org/wiki/Temporal_database)
    相关的特性，允许存储随时间变化的数据，而不仅仅是当前数据状态。然而，关系数据库并未完全遵循这些标准。在 PostgreSQL 的情况下，尽管已提交了一些讨论和补丁，但它并不支持这些特性。
- en: There are PostgreSQL extensions like [periods](https://github.com/xocolatl/periods)
    and [temporal_tables](https://github.com/arkhipov/temporal_tables) that add support
    for temporal tables. Unfortunately, cloud providers such as AWS, Azure, and GCP
    don’t allow running custom C extensions with managed databases.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 有诸如 [periods](https://github.com/xocolatl/periods) 和 [temporal_tables](https://github.com/arkhipov/temporal_tables)
    的扩展，支持时间表。不幸的是，像 AWS、Azure 和 GCP 这样的云提供商不允许在托管数据库中运行自定义 C 扩展。
- en: Let’s explore five alternative methods of data change tracking in PostgreSQL
    available to us in 2024.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索在2024年对我们可用的 PostgreSQL 数据变更跟踪的五种替代方法。
- en: Triggers and Audit Table
  id: totrans-split-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发器和审计表
- en: A PostgreSQL trigger with an audit table
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 创建带有审计表的 PostgreSQL 触发器
- en: PostgreSQL allows adding triggers with custom procedural SQL code performed
    on row changes with `INSERT`, `UPDATE`, and `DELETE` queries. The official PostgreSQL
    wiki describes a generic [audit trigger function](https://wiki.postgresql.org/wiki/Audit_trigger).
    Let’s have a quick look at a simplified example.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 允许添加触发器，使用自定义的过程化 SQL 代码执行对行更改的`INSERT`、`UPDATE`和`DELETE`查询。官方的 PostgreSQL
    wiki 描述了一个通用的 [审计触发器函数](https://wiki.postgresql.org/wiki/Audit_trigger)。让我们快速看一个简化的例子。
- en: 'First, create a table called `logged_actions` in a separate schema called `audit`:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在名为`audit`的独立模式中创建一个名为`logged_actions`的表：
- en: '[PRE0]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, create a function to insert audit records and establish a trigger on
    a table you wish to track, such as `my_table`:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个函数来插入审计记录，并在希望跟踪的表上建立触发器，例如`my_table`：
- en: '[PRE1]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once it’s done, row changes made in `my_table` will create records in `audit.logged_actions`:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，对于`my_table`中的行更改将在`audit.logged_actions`中创建记录：
- en: '[PRE2]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you want to further improve this solution by using JSONB columns instead
    of TEXT, ignoring changes in certain columns, pausing auditing a table, and so
    on, check out the SQL example in this [audit-trigger](https://github.com/2ndQuadrant/audit-trigger)
    repo and its forks.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想通过使用 JSONB 列而不是 TEXT 进一步改进此解决方案，忽略某些列的更改，暂停对表的审计等，请查看此 [audit-trigger](https://github.com/2ndQuadrant/audit-trigger)
    仓库及其分支中的 SQL 示例。
- en: Another alternative is the [temporal_tables](https://github.com/nearform/temporal_tables)
    implementation written by using triggers. The main difference is that it stores
    records in a separate table with a time range during which a version was valid,
    not just an initial timestamp when a change was recorded. This makes it easier
    to perform time travel queries by selecting records that were valid at a specific
    point in time.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是使用触发器编写的 [temporal_tables](https://github.com/nearform/temporal_tables)
    实现。其主要区别在于它在一个记录有效的时间范围内存储记录，而不仅仅是在记录更改时存储一个初始时间戳。这样可以通过选择在特定时间点有效的记录来执行时间旅行查询更加容易。
- en: Downsides
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: Performance. Triggers add performance overhead by inserting additional records
    synchronously on every `INSERT`, `UPDATE`, and `DELETE` operation.
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能。触发器通过在每次`INSERT`、`UPDATE`和`DELETE`操作上同步插入额外的记录增加了性能开销。
- en: Security. Anyone with superuser access can modify the triggers and make unnoticed
    data changes. It is also recommended to make sure that records in the audit table
    cannot be modified or removed.
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性。任何具有超级用户访问权限的人都可以修改触发器并进行不被注意的数据更改。还建议确保审核表中的记录不能被修改或删除。
- en: Maintenance. Managing complex triggers across many constantly changing tables
    can become cumbersome. Making a small mistake in an SQL script can break queries
    or data change tracking functionality.
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护。管理跨多个不断变化的表的复杂触发器可能会变得繁琐。在 SQL 脚本中犯一个小错误可能会破坏查询或数据变更跟踪功能。
- en: Triggers and Notify/Listen
  id: totrans-split-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发器和 Notify/Listen
- en: A PostgreSQL trigger with Notify
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 具有 PostgreSQL 触发器的 Notify
- en: 'This approach is similar to the previous one but instead of writing data changes
    in the audit table directly, we pass them through a pub/sub mechanism through
    a trigger to another system dedicated to reading and storing these data changes:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法类似于前一个方法，但不是直接将数据更改写入审核表，而是通过触发器将它们通过发布/订阅机制传递到另一个专门用于读取和存储这些数据更改的系统中：
- en: '[PRE3]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now it’s possible to run a separate process running as a worker that listens
    to messages containing data changes and stores them separately:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以运行一个作为工作者的单独进程，监听包含数据更改的消息并将其单独存储：
- en: '[PRE4]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Downsides
  id: totrans-split-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: “At most once” delivery**.** Listen/notify notifications are not persisted meaning
    if a listener disconnects, it may miss updates that happened before it reconnected
    again.
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “至多一次”传递**。** `listen/notify` 通知没有持久化，这意味着如果监听器断开连接，则可能会错过在其重新连接之前发生的更新。
- en: Payload size limit. Listen/notify messages have a maximum payload size of 8000
    bytes by default. For larger payloads, it is recommended to store them in the
    DB audit table and send only references of the records.
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载大小限制。`listen/notify` 消息默认具有最大 8000 字节的负载大小限制。对于更大的负载，建议将它们存储在数据库审核表中，并仅发送记录的引用。
- en: Debugging. Troubleshooting issues related to triggers and listen/notify in a
    production environment can be challenging due to their asynchronous and distributed
    nature.
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产环境中调试与触发器以及`listen/notify`相关的故障排除问题可能会很具有挑战性，因为它们具有异步和分布式的特性。
- en: Application-Level Tracking
  id: totrans-split-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序级跟踪
- en: Application-level tracking with a PostgreSQL audit table
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PostgreSQL 审核表进行应用程序级跟踪
- en: 'If you have control over the codebase that connects and makes data changes
    in a PostgreSQL database, then one of the following options is also available
    to you:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以控制连接并在 PostgreSQL 数据库中进行数据变更的代码库，则还可以选择以下选项之一：
- en: Manually record all data changes when issuing `INSERT`, `UPDATE`, and `DELETE`
    queries
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在发出`INSERT`、`UPDATE`和`DELETE`查询时手动记录所有数据变更
- en: Use existing open-source libraries that integrate with popular ORMs
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用现有的开源库，这些库与流行的 ORM 集成
- en: 'For example, there is [paper_trail](https://github.com/paper-trail-gem/paper_trail)
    for Ruby on Rails with ActiveRecord and [django-simple-history](https://github.com/jazzband/django-simple-history)
    for Django. At a high level, they use callbacks or middlewares to insert additional
    records into an audit table. Here is a simplified example written in Ruby:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Ruby 中有 [paper_trail](https://github.com/paper-trail-gem/paper_trail) 与 ActiveRecord
    配合使用，Django 中有 [django-simple-history](https://github.com/jazzband/django-simple-history)。它们在高级别上使用回调或中间件向审核表中插入额外的记录。以下是一个在
    Ruby 中简化的示例：
- en: '[PRE5]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: On the application level, [Event Sourcing](https://martinfowler.com/eaaDev/EventSourcing.html)
    can also be implemented with an append-only log as the source of truth. But it’s
    a separate, big, and exciting topic that deserves a separate blog post.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序级别，还可以实现 [事件溯源](https://martinfowler.com/eaaDev/EventSourcing.html)，将追加日志作为真相的来源。但这是一个单独的、大型和令人兴奋的主题，值得撰写一篇独立的博客文章。
- en: Downsides
  id: totrans-split-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: Reliability. Application-level data change tracking is not as accurate as database-level
    change tracking. For example, data changes made outside an app will not be tracked,
    developers may accidentally skip callbacks, or there could be data inconsistencies
    if a query changing the data has succeeded but a query inserting an audit record
    failed.
  id: totrans-split-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可靠性。应用程序级别的数据更改跟踪不如数据库级别的更改跟踪准确。例如，应用程序外部进行的数据更改不会被跟踪，开发人员可能会意外地跳过回调，或者如果更改数据的查询成功但插入审核记录的查询失败，则可能存在数据不一致性。
- en: Performance. Manually capturing changes and inserting them in the database via
    callbacks leads to both runtime application and database overhead.
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能。通过回调手动捕获更改并将其插入数据库会导致运行时应用程序和数据库的开销。
- en: Scalability. These audit tables are usually stored in the same database and
    can quickly become unmanageable, which can require separating the storage, implementing
    declarative partitioning, and continuous archiving.
  id: totrans-split-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性。这些审计表通常存储在同一个数据库中，并且可能会很快变得难以管理，这可能需要分离存储、实施声明性分区和持续归档。
- en: Change Data Capture
  id: totrans-split-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变更数据捕获
- en: '[Change Data Capture](https://en.wikipedia.org/wiki/Change_data_capture) (CDC)
    is a pattern of identifying and capturing changes made to data in a database and
    sending those changes to a downstream system. Most often it is used for [ETL](https://en.wikipedia.org/wiki/Extract,_transform,_load)
    to send data to a data warehouse for analytical purposes.'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[变更数据捕获](https://zh.wikipedia.org/wiki/%E5%8F%98%E6%9B%B4%E6%95%B0%E6%8D%95%E8%8E%B7)（CDC）是一种识别和捕获数据库中数据更改的模式，并将这些更改发送到下游系统。最常用于[ETL](https://zh.wikipedia.org/wiki/%E6%8F%90%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BD%AC%E6%8D%A2%E5%8A%A0%E8%BD%BD)，将数据发送到数据仓库进行分析。'
- en: There are multiple approaches to implementing CDC. One of them, which doesn’t
    intersect with what we have already discussed, is a log-based CDC. With PostgreSQL,
    it is possible to connect to the [Write-Ahead Log](https://www.postgresql.org/docs/current/wal-intro.html)
    (WAL) that is used for data durability, recovery, and replication to other instances.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 实施CDC有多种方法。其中一种与我们已经讨论过的不重叠的方法是基于日志的CDC。使用PostgreSQL，可以连接到用于数据耐用性、恢复和复制到其他实例的[Write-Ahead
    Log](https://www.postgresql.org/docs/current/wal-intro.html)（WAL）。
- en: CDC with PostgreSQL logical replication
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PostgreSQL逻辑复制实现基于日志的CDC
- en: 'PostgreSQL supports two types of replications: physical replication and logical
    replication. The latter allows decoding WAL changes on a row level and filtering
    them out, for example, by table name. This is exactly what we need to implement
    data change tracking with CDC.'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL支持两种类型的复制：物理复制和逻辑复制。后者允许在行级别解码WAL更改并过滤它们，例如通过表名。这正是我们需要使用CDC实现数据更改跟踪的内容。
- en: 'Here are the basic steps necessary for retrieving data changes by using logical
    replication:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用逻辑复制检索数据更改所需的基本步骤：
- en: 1\. Set `wal_level` to `logical` in `postgresql.conf` and restart the database.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 在`postgresql.conf`中将`wal_level`设置为`logical`，然后重新启动数据库。
- en: '2\. Create a publication like a “pub/sub channel” for receiving data changes:'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 创建一个类似于“发布/订阅通道”的发布物，用于接收数据更改：
- en: '[PRE6]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '3\. Create a logical replication slot like a “cursor position” in the WAL:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 创建一个逻辑复制插槽，类似于WAL中的“游标位置”：
- en: '[PRE7]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '4\. Fetch the latest unread changes:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 获取最新的未读更改：
- en: '[PRE8]'
  id: totrans-split-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To implement log-based CDC with PostgreSQL, I would recommend using the existing
    open-source solutions. The most popular one is [Debezium](https://github.com/debezium/debezium).
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要在PostgreSQL中实现基于日志的CDC，我建议使用现有的开源解决方案。最流行的一个是[Debezium](https://github.com/debezium/debezium)。
- en: Downsides
  id: totrans-split-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: Limited context. PostgreSQL WAL contains only low-level information about row
    changes and doesn’t include information about an SQL query that triggered the
    change, information about a user, or any application-specific context.
  id: totrans-split-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有限的上下文。PostgreSQL WAL仅包含有关行更改的低级信息，不包括触发更改的SQL查询信息、用户信息或任何特定于应用程序的上下文信息。
- en: Complexity. Implementing CDC adds a lot of system complexity. This involves
    running a server that connects to PostgreSQL as a replica, consumes data changes,
    and stores them somewhere.
  id: totrans-split-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂性。实施CDC会增加大量系统复杂性。这涉及运行一个连接到PostgreSQL作为副本的服务器，消耗数据更改并将其存储在某个地方。
- en: Tuning. Running it in a production environment may require a deeper understanding
    of PostgreSQL internals and properly configuring the system. For example, periodically
    flushing the position for a replication slot to reclaim WAL disk space.
  id: totrans-split-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整。在生产环境中运行可能需要更深入地了解PostgreSQL内部，并正确配置系统。例如，定期刷新复制槽的位置以回收WAL磁盘空间。
- en: Integrated Change Data Capture
  id: totrans-split-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成变更数据捕获
- en: Integrated CDC with application context
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 集成CDC与应用程序上下文
- en: To overcome the challenge of limited information about data changes stored in
    the WAL, we can use a clever approach of passing additional context to the WAL
    directly.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决WAL中存储的数据变更有限信息的挑战，我们可以使用通过直接传递附加上下文到WAL的巧妙方法。
- en: 'Here is a simple example of passing additional context on row changes:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是在行更改时传递附加上下文的简单示例：
- en: '[PRE9]'
  id: totrans-split-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice the `pg_logical_emit_message` function that was added to PostgreSQL as
    an internal function for plugins. It allows namespacing and emitting messages
    that will be stored in the WAL. Reading these messages became possible with the
    standard logical decoding plugin `pgoutput` since PostgreSQL v14.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`pg_logical_emit_message`函数已添加到PostgreSQL作为插件的内部函数。它允许命名空间和发出消息，这些消息将存储在WAL中。自PostgreSQL
    v14以来，可以使用标准的逻辑解码插件`pgoutput`来读取这些消息。
- en: There is an open-source project called [Bemi](https://github.com/BemiHQ/bemi)
    which allows tracking not only low-level data changes but also reading any custom
    context with CDC and stitching everything together. Full disclaimer, I’m one of
    the core contributors.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为[Bemi](https://github.com/BemiHQ/bemi)的开源项目，它不仅允许跟踪低级别的数据变更，还可以读取任何自定义上下文与CDC并将所有内容粘合在一起。完整的声明，我是核心贡献者之一。
- en: 'For example, it can integrate with popular ORMs and adapters to pass application-specific
    context with all data changes:'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，它可以与流行的ORM和适配器集成，以传递特定于应用程序的上下文和所有数据更改：
- en: '[PRE10]'
  id: totrans-split-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Downsides
  id: totrans-split-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: Complexity and tuning related to implementing CDC.
  id: totrans-split-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与实施CDC相关的复杂性和调整。
- en: If you need a ready-to-use cloud solution that can be integrated and connected
    to PostgreSQL in a few minutes, check out [bemi.io](https://bemi.io/).
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要一个即用型的云解决方案，可以在几分钟内集成并连接到PostgreSQL，请查看[bemi.io](https://bemi.io/)。
- en: Conclusion
  id: totrans-split-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: PostgreSQL data change tracking approach comparison
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL数据变更跟踪方法比较
- en: If you need basic data change tracking, **triggers with an audit table** are
    a great initial solution.
  id: totrans-split-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您需要基本的数据变更跟踪，**带有审计表的触发器**是一个很好的初始解决方案。
- en: '**Triggers with listen/notify** are a good option for simple testing in a development
    environment.'
  id: totrans-split-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**带有监听/通知的触发器**是在开发环境中进行简单测试的一个不错选择。'
- en: If you value application-specific context (information about a user, API endpoint,
    etc.) over reliability, you can use **application-level tracking**.
  id: totrans-split-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您更重视特定于应用程序的上下文（关于用户信息、API端点等）而不是可靠性，可以使用**应用程序级跟踪**。
- en: '**Change Data Capture** is a good option if you prioritize reliability and
    scalability as a unified solution that can be reused, for example, across many
    databases.'
  id: totrans-split-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**变更数据捕获（Change Data Capture）**是一个不错的选择，如果您优先考虑作为统一解决方案的可靠性和可扩展性，例如，可以在许多数据库中重复使用。'
- en: Finally, **integrated Change Data Capture** is your best bet if you need a robust
    data change tracking system that can also be integrated into your application.
    Go with [bemi.io](https://bemi.io/) if you need a cloud-managed solution.
  id: totrans-split-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，**集成变更数据捕获（Integrated Change Data Capture）**是您需要的最佳选择，如果您需要一个强大的数据变更跟踪系统，还可以集成到您的应用程序中。如果您需要云管理解决方案，请选择[bemi.io](https://bemi.io/)。
