- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:03:02'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: How the open source Caddy server uses Grafana Cloud for full-stack observability
    | Grafana Labs
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://grafana.com/blog/2024/02/21/how-the-open-source-caddy-server-uses-grafana-cloud-for-full-stack-observability/](https://grafana.com/blog/2024/02/21/how-the-open-source-caddy-server-uses-grafana-cloud-for-full-stack-observability/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Mohammed Al Sahaf serves as Technical Product Manager at Samsung Electronics
    Saudi Arabia. Outside his day job, he serves with the Caddy team to tackle the
    web of problems facing web servers in the third millennium. Mohammed is the author
    of Kadeessh, formerly caddy-ssh, and the maintainer of numerous Caddy modules.
    When he isn’t programming, he is trying to catch up on life and sleep with the
    help of coffee. You can find his caffeinated wonders at [caffeinatedwonders.com](http://caffeinatedwonders.com).*'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: 'As maintainers of the OSS project [Caddy server](https://caddyserver.com/),
    we know the value of end-to-end observability, in terms of accelerating root cause
    analysis and reducing MTTR. But rather than do all the undifferentiated heavy-lifting
    to manage an observability stack, my team wants to dedicate as much time as possible
    to our core mission: developing and optimizing our open source project.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: These were some of the biggest reasons behind our recent migration to [Grafana
    Cloud](/docs/grafana-cloud/?pg=blog&plcmt=body-txt).
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: In this blog post, I’ll take a closer look at why the Caddy team chose Grafana
    Cloud as an observability solution, and how it’ll help us advance the Caddy project,
    moving forward.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Get a free Grafana Cloud Pro account for your OSS project
  id: totrans-split-10
  prefs:
  - PREF_BQ
  - PREF_H3
  type: TYPE_NORMAL
- en: Full-stack observability is essential for any OSS project to progress and thrive.
    That’s why Grafana Labs — a company with open source software in its DNA — offers
    a free Grafana Cloud Pro account to maintainers of OSS projects like Caddy. Interested
    in receiving your Cloud Pro account? You can reach us at [community@grafana.com](mailto:community@grafana.com).
  id: totrans-split-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Our path to Grafana Cloud
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Caddy](https://caddyserver.com/), an extensible web server written in Go,
    is known as the first generally available HTTP/2 server. Caddy’s flagship features
    include [automatic HTTPS/TLS procurement and management](https://caddyserver.com/features#automatic-https)
    through the [ACME protocol](https://caddyserver.com/features#automatic-https-acme),
    as well as robust [OCSP](https://caddyserver.com/#gold-standard) stapling.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: When Caddy launched in 2015, users could create a one-of-a-kind, on-demand Caddy
    build, using a custom set of plugins through the [download page](https://caddyserver.com/download).
    This custom builder withstood the test of time, as demand for Caddy grew. The
    “buildworker,” as the Caddy dev team calls it, was rewritten shortly after the
    GA of Caddy v2 in 2020\. The rewrite was to accommodate a new module structure
    and build flow using [xcaddy](https://github.com/caddyserver/xcaddy), a convenient
    library and tool to generate custom Caddy builds, under the hood. The new version
    had been functioning with minimal complaints — until early 2023.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we started to hear about unresponsive download requests and the
    download page failing to build the requested custom Caddy build. We were relying
    on our cloud provider’s dashboard to monitor server health, and would manually
    comb through [journald](https://www.freedesktop.org/software/systemd/man/latest/systemd-journald.service.html)
    to identify and troubleshoot issues, as needed. The cloud provider’s dashboard
    provided a high-level view of server resource utilization, but didn’t offer deep
    insights into the applications running on the server.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: 'The absence of a unified and user-friendly interface for log inspection also
    made it cumbersome to troubleshoot when away from the keyboard, to share interesting
    log lines with team members, and to trace problematic requests across service
    boundaries. To make matters worse, this was reactive: end users needed to tell
    us, so we couldn’t act on or resolve issues proactively, due to a lack of alerting.
    Recognizing these growing pains, we knew we needed a more mature observability
    solution for our infrastructure.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: So in March 2023, we connected with Grafana Labs, and learned they have a program
    through which they offer a free Grafana Cloud Pro account to OSS project maintainers
    (a special shout-out here to Dave Henderson, a fellow member of the Caddy project
    and a senior software engineer at Grafana Labs, who helped us discover this program).
    This Grafana Cloud Pro account enabled several Caddy project maintainers to monitor
    our infrastructure and, after experimenting with the dashboards provided by [the
    Linux Server integration](/docs/grafana-cloud/monitor-infrastructure/integrations/integration-reference/integration-linux-node/?pg=blog&plcmt=body-txt),
    we found value almost immediately.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Faster root cause analysis with Grafana Cloud
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with Grafana Cloud, we followed the integration onboarding steps
    to install and configure [Grafana Agent](/docs/agent/latest/) on all our servers.
    Knowing our buildworker was the bottleneck, we customized a dashboard to inspect
    various angles of the buildworker node. The `node_exporter` was vital to understand
    how our workload affected the instance it’s running on.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: 'We quickly learned we had a [goroutine](https://go.dev/tour/concurrency/1)
    leak due to long-running builds that included some of our heavier modules. We
    observed in a time series chart the number of goroutines growing over long periods,
    but never touching the zero line:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Long-running builds had not been a problem until recently, which we knew may
    be a symptom. Timeouts were set on build requests, so we knew at least one trigger
    for the struggling server. Treating this symptom ensured jobs that were stuck
    didn’t run indefinitely or consume resources. When we fixed the goroutine leak
    on the buildworker, we saw that there may be spikes, but the chart line was not
    always stepping up:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: 'Although we addressed the goroutine leak, we still needed to find and resolve
    the root cause of our server performance issue. The question remained: why were
    those builds slow? Compilation demands RAM, CPU, and I/O, depending on the stage.
    We observed reports of unresponsiveness that never correlated with excessive RAM
    utilization, but CPU utilization had always been high — to the point of failing
    to accept SSH logins within reasonable time. This was a key realization for us
    to discover that our process is CPU-bound, not memory-bound. It provided us with
    a new action plan: the buildworker server upgrade should optimize for CPU.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: What’s next for Caddy and Grafana Cloud
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While our plan was a success, we are far from finished. SRE is a process of
    continual improvement.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: Looking ahead, the observability tools in Grafana Cloud will allow us to efficiently
    diagnose and treat issues as they arise. Log aggregation allows us to correlate
    various events across different application and system boundaries; continuous
    monitoring lets us alert on sudden drops in activity and the events surrounding
    the drops; profiling indicates where resources utilization is subpar; and synthetic
    monitoring provides an external perspective to observe our system as a black box,
    using periodic PING and/or TRACEROUTE. We look forward to advancing our observability
    strategy — and the Caddy OSS project — with Grafana Cloud.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: '*To learn more about a Grafana Cloud Pro account for your OSS project, reach
    out at [community@grafana.com](mailto:community@grafana.com).*'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
