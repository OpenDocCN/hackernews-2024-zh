- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:54:46'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Popular git config options
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://jvns.ca/blog/2024/02/16/popular-git-config-options/](https://jvns.ca/blog/2024/02/16/popular-git-config-options/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Hello! I always wish that command line tools came with data about how popular
    their various options are, like:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: “basically nobody uses this one”
  id: totrans-split-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “80% of people use this, probably take a look”
  id: totrans-split-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “this one has 6 possible values but people only really use these 2 in practice”
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So I [asked about people’s favourite git config options on Mastodon](https://social.jvns.ca/@b0rk/111885363143321068):'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: what are your favourite git config options to set? Right now I only really have
    `git config push.autosetupremote true` and `git config init.defaultBranch main`
    set in my `~/.gitconfig`, curious about what other people set
  id: totrans-split-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As usual I got a TON of great answers and learned about a bunch of very popular
    git config options that I’d never heard of.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: 'I’m going to list the options, starting with (very roughly) the most popular
    ones. Here’s a table of contents:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: All of the options are documented in `man git-config`, or [this page](https://git-scm.com/docs/git-config).
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '`pull.ff only` or `pull.rebase true`'
  id: totrans-split-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These two were the most popular. These both have similar goals: to avoid accidentally
    creating a merge commit when you run `git pull` on a branch where the upstream
    branch has diverged.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '`pull.rebase true` is the equivalent of running `git pull --rebase` every time
    you `git pull`'
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pull.ff only` is the equivalent of running `git pull --ff-only` every time
    you `git pull`'
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’m pretty sure it doesn’t make sense to set both of them at once, since `--ff-only`
    overrides `--rebase`.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: Personally I don’t use either of these since I prefer to decide how to handle
    that situation every time, and now git’s default behaviour when your branch has
    diverged from the upstream is to just throw an error and ask you what to do (very
    similar to what `git pull --ff-only` does).
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: '`merge.conflictstyle zdiff3`'
  id: totrans-split-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next: making merge conflicts more readable! `merge.conflictstyle zdiff3` and
    `merge.conflictstyle diff3` were both super popular (“totally indispensable”).'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: The main idea is The consensus seemed to be “diff3 is great, and zdiff3 (which
    is newer) is even better!”.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: 'So what’s the deal with `diff3`. Well, by default in git, merge conflicts look
    like this:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I’m supposed to decide whether `input.split("\n")` or `text.split("\n\n")` is
    better. But how? What if I don’t remember whether `\n` or `\n\n` is right? Enter
    diff3!
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the same merge conflict look like with `merge.conflictstyle diff3`
    set:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This has **extra information**: now the original version of the code is in
    the middle! So we can see that:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: one side changed `\n\n` to `\n`
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the other side renamed `input` to `text`
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So presumably the correct merge conflict resolution is `return text.split("\n")`,
    since that combines the changes from both sides.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: I haven’t used zdiff3, but a lot of people seem to think it’s better. The blog
    post [Better Git Conflicts with zdiff3](https://ductile.systems/zdiff3/) talks
    more about it.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我没用过zdiff3，但很多人似乎认为它更好。这篇博文[使用 zdiff3 改进 Git 冲突](https://ductile.systems/zdiff3/)详细讲解了它。
- en: '`rebase.autosquash true`'
  id: totrans-split-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`rebase.autosquash true`'
- en: Autosquash was also a new feature to me. The goal is to make it easier to modify
    old commits.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我来说，Autosquash也是一个新功能。它的目标是更容易地修改旧的提交。
- en: 'Here’s how it works:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作原理如下：
- en: You have a commit that you would like to be combined with some commit that’s
    3 commits ago, say `add parsing code`
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有一个提交，想要与之前3次提交中的某个提交（比如`add parsing code`）合并。
- en: You commit it with `git commit --fixup OLD_COMMIT_ID`, which gives the new commit
    the commit message `fixup! add parsing code`
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以用`git commit --fixup OLD_COMMIT_ID`提交它，这样新的提交会得到`fixup! add parsing code`的提交消息。
- en: Now, when you run `git rebase --autosquash main`, it will automatically combine
    all the `fixup!` commits with their targets
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，当你运行`git rebase --autosquash main`时，它将自动将所有`fixup!`提交与它们的目标合并。
- en: '`rebase.autosquash true` means that `--autosquash` always gets passed automatically
    to `git rebase`.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`rebase.autosquash true`意味着`--autosquash`将始终自动传递给`git rebase`。'
- en: '`rebase.autostash true`'
  id: totrans-split-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`rebase.autostash true`'
- en: This automatically runs `git stash` before a git rebase and `git stash pop`
    after. It basically passes `--autostash` to `git rebase`.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在 git rebase 前自动运行`git stash`，在后面自动运行`git stash pop`。它基本上给`git rebase`传递了`--autostash`参数。
- en: Personally I’m a little scared of this since it potentially can result in merge
    conflicts after the rebase, but I guess that doesn’t come up very often for people
    since it seems like a really popular configuration option.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我有点担心这一点，因为它可能导致重播后出现合并冲突，但我猜对于大多数人来说，这种情况并不经常发生，因为这似乎是一个非常受欢迎的配置选项。
- en: '`push.default simple`, `push.default current`, `push.autoSetupRemote true`'
  id: totrans-split-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`push.default simple`，`push.default current`，`push.autoSetupRemote true`'
- en: These [`push`](https://git-scm.com/docs/git-config#Documentation/git-config.txt-pushdefault)
    options tell `git push` to automatically push the current branch to a remote branch
    with the same name.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些[`push`](https://git-scm.com/docs/git-config#Documentation/git-config.txt-pushdefault)选项告诉`git
    push`自动将当前分支推送到同名的远程分支。
- en: '`push.default simple` is the default in Git. It only works if your branch is
    already tracking a remote branch'
  id: totrans-split-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`push.default simple`是 Git 的默认设置。只有当你的分支已经跟踪一个远程分支时才有效。'
- en: '`push.default current` is similar, but it’ll always push the local branch to
    a remote branch with the same name.'
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`push.default current`类似，但它将始终将本地分支推送到同名的远程分支。'
- en: '`push.autoSetupRemote true` is a little different – this one makes it so when
    you first push a branch, it’ll automatically set up tracking for it'
  id: totrans-split-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`push.autoSetupRemote true`有点不同 - 当你第一次推送分支时，它会自动设置跟踪。'
- en: I think I prefer `push.autoSetupRemote true` to `push.default current` because
    `push.autoSetupRemote true` also lets you **pull** from the matching remote branch
    (though you do need to push first to set up tracking). `push.default current`
    only lets you push.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为我更喜欢`push.autoSetupRemote true`而不是`push.default current`，因为`push.autoSetupRemote
    true`还允许你从匹配的远程分支**拉取**（尽管你需要先推送才能设置跟踪）。`push.default current`只允许你推送。
- en: I believe the only thing to be careful of with `push.autoSetupRemote true` and
    `push.default current` is that you need to be confident that you’re never going
    to accidentally make a local branch with the same name as an unrelated remote
    branch. Lots of people have branch naming conventions (like `julia/my-change`)
    that make this kind of conflict very unlikely, or just have few enough collaborators
    that branch name conflicts probably won’t happen.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为要小心的唯一事情是，当`push.autoSetupRemote true`和`push.default current`时，你需要确信你永远不会意外地创建一个与无关的远程分支同名的本地分支。很多人有分支命名约定（比如`julia/my-change`），使这种冲突几乎不可能发生，或者只有少数协作者，分支名称冲突可能性很低。
- en: '`init.defaultBranch main`'
  id: totrans-split-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`init.defaultBranch main`'
- en: Create a `main` branch instead of a `master` branch when creating a new repo.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的仓库时，请使用`main`分支而不是`master`分支。
- en: '`commit.verbose true`'
  id: totrans-split-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`commit.verbose true`'
- en: This adds the whole commit diff in the text editor where you’re writing your
    commit message, to help you remember what you were doing.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这在你写提交消息时，会将整个提交差异添加到文本编辑器中，以帮助你记住你在做什么。
- en: '`rerere.enabled true`'
  id: totrans-split-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`rerere.enabled true`'
- en: This enables [rerere](https://git-scm.com/book/en/v2/Git-Tools-Rerere) (”**re**use
    **re**covered **re**solution”), which remembers how you resolved merge conflicts
    during a `git rebase` and automatically resolves conflicts for you when it can.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: '`help.autocorrect 10`'
  id: totrans-split-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default git’s autocorrect try to check for typos (like `git ocmmit`), but
    won’t actually run the corrected command.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: If you want it to run the suggestion automatically, you can set [`help.autocorrect`](https://git-scm.com/docs/git-config#Documentation/git-config.txt-helpautoCorrect)
    to `1` (run after 0.1 seconds), `10` (run after 1 second), `immediate` (run immediately),
    or `prompt` (run after prompting)
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: 'The “pager” is what git uses to display the output of `git diff`, `git log`,
    `git show`, etc. People set it to:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: '[`delta`](https://github.com/dandavison/delta) (a fancy diff viewing tool with
    syntax highlighting)'
  id: totrans-split-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`less -x5,9` (sets tabstops, which I guess helps if you have a lot of files
    with tabs in them?)'
  id: totrans-split-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`less -F -X` (not sure about this one, `-F` seems to disable the pager if everything
    fits on one screen if but my git seems to do that already anyway)'
  id: totrans-split-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cat` (to disable paging altogether)'
  id: totrans-split-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I used to use `delta` but turned it off because somehow I messed up the colour
    scheme in my terminal and couldn’t figure out how to fix it. I think it’s a great
    tool though.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: I believe delta also suggests that you set up `interactive.diffFilter delta
    --color-only` to syntax highlight code when you run `git add -p`.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: '`diff.algorithm histogram`'
  id: totrans-split-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Git’s default diff algorithm often handles functions being reordered badly.
    For example look at this diff:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'I find it pretty confusing. But with `diff.algorithm histogram`, the diff looks
    like this instead, which I find much clearer:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Some folks also use `patience`, but `histogram` seems to be more popular. [When
    to Use Each of the Git Diff Algorithms](https://luppeng.wordpress.com/2020/10/10/when-to-use-each-of-the-git-diff-algorithms/)
    has more on this.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: '`core.excludesfile`: a global .gitignore'
  id: totrans-split-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`core.excludeFiles = ~/.gitignore` lets you set a global gitignore file that
    applies to all repositories, for things like `.idea` or `.DS_Store` that you never
    want to commit to any repo. It defaults to `~/.config/git/ignore`.'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
- en: '`includeIf`: separate git configs for personal and work'
  id: totrans-split-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Lots of people said they use this to configure different email addresses for
    personal and work repositories. You can set it up something like this:'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'I often accidentally clone the HTTP version of a repository instead of the
    SSH version and then have to manually go into `~/.git/config` and edit the remote
    URL. This seems like a nice workaround: it’ll replace `https://github.com` in
    remotes with `git@github.com:`.'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what it looks like in `~/.gitconfig` since it’s kind of a mouthful:'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: One person said they use `pushInsteadOf` instead to only do the replacement
    for `git push` because they don’t want to have to unlock their SSH key when pulling
    a public repo.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
- en: A couple of other people mentioned setting `insteadOf = "gh:"` so they can `git
    remote add gh:jvns/mysite` to add a remote with less typing.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 还有几个人提到设置`insteadOf = "gh:"`，这样他们可以`git remote add gh:jvns/mysite`来添加一个少打字的远程仓库。
- en: '`fsckobjects`: avoid data corruption'
  id: totrans-split-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`fsckobjects`：避免数据损坏'
- en: A couple of people mentioned this one. Someone explained it as “detect data
    corruption eagerly. Rarely matters but has saved my entire team a couple times”.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 几个人提到了这一点。有人解释说“及早检测数据损坏。很少有影响，但有几次拯救了我们整个团队”。
- en: '[PRE6]'
  id: totrans-split-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: submodule stuff
  id: totrans-split-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 子模块相关
- en: 'I’ve never understood anything about submodules but a couple of person said
    they like to set:'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我从来没有理解过子模块的任何东西，但有几个人说他们喜欢设置：
- en: '`status.submoduleSummary true`'
  id: totrans-split-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`status.submoduleSummary true`'
- en: '`diff.submodule log`'
  id: totrans-split-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`diff.submodule log`'
- en: '`submodule.recurse true`'
  id: totrans-split-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`submodule.recurse true`'
- en: I won’t attempt to explain those but there’s [an explanation on Mastodon by
    @unlambda here](https://hachyderm.io/@unlambda/111942468084436716#.).
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我不打算解释这些，但[Mastodon上@unlambda的解释在这里](https://hachyderm.io/@unlambda/111942468084436716#)
- en: and more
  id: totrans-split-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 和更多内容
- en: 'Here’s everything else that was suggested by at least 2 people:'
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是其他至少有两人建议的所有内容：
- en: '`blame.ignoreRevsFile .git-blame-ignore-revs` lets you specify a file with
    commits to ignore during `git blame`, so that giant renames don’t mess up your
    blames'
  id: totrans-split-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`blame.ignoreRevsFile .git-blame-ignore-revs`允许您指定在`git blame`期间忽略的提交文件，以免巨大的重命名破坏您的责备'
- en: '`branch.sort -committerdate`, makes `git branch` sort by most recently used
    branches instead of alphabetical, to make it easier to find branches. `tag.sort
    taggerdate` is similar for tags.'
  id: totrans-split-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`branch.sort -committerdate`，使`git branch`按最近使用的分支排序而不是按字母顺序，以便更容易找到分支。`tag.sort
    taggerdate`对标签类似。'
- en: '`color.ui false`: to turn off colour'
  id: totrans-split-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color.ui false`：关闭颜色显示'
- en: '`commit.cleanup scissors`: so that you can write `#include` in a commit message
    without the `#` being treated as a comment and removed'
  id: totrans-split-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`commit.cleanup scissors`: 可以在提交消息中写入`#include`，而不会将`#`视为注释并删除'
- en: '`core.autocrlf false`: on Windows, to work well with folks using Unix'
  id: totrans-split-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core.autocrlf false`：在Windows上与使用Unix的人员良好兼容'
- en: '`core.editor emacs`: to use emacs (or another editor) to edit commit messages'
  id: totrans-split-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core.editor emacs`：使用emacs（或其他编辑器）编辑提交消息'
- en: '`credential.helper osxkeychain`: use the Mac keychain for managing'
  id: totrans-split-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`credential.helper osxkeychain`：使用Mac钥匙链进行管理'
- en: '`diff.tool difftastic`: use [difftastic](https://difftastic.wilfred.me.uk/)
    (or `meld` or `nvimdiffs`) to display diffs'
  id: totrans-split-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`diff.tool difftastic`：使用[difftastic](https://difftastic.wilfred.me.uk/)（或`meld`或`nvimdiffs`）显示差异'
- en: '`diff.colorMoved default`: uses different colours to highlight lines in diffs
    that have been “moved”'
  id: totrans-split-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`diff.colorMoved default`：使用不同的颜色突出显示差异中已“移动”的行'
- en: '`diff.colorMovedWS allow-indentation-change`: with `diff.colorMoved` set, also
    ignores indentation changes'
  id: totrans-split-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`diff.colorMovedWS allow-indentation-change`：在设置了`diff.colorMoved`的情况下，还会忽略缩进更改'
- en: '`diff.context 10`: include more context in diffs'
  id: totrans-split-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`diff.context 10`：在差异中包含更多上下文'
- en: '`fetch.prune true` and `fetch.prunetags` - automatically delete remote tracking
    branches that have been deleted'
  id: totrans-split-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fetch.prune true`和`fetch.prunetags` - 自动删除已删除的远程跟踪分支'
- en: '`gpg.format ssh`: allow you to sign commits with SSH keys'
  id: totrans-split-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gpg.format ssh`：允许您使用SSH密钥签署提交'
- en: '`log.date iso`: display dates as `2023-05-25 13:54:51` instead of `Thu May
    25 13:54:51 2023`'
  id: totrans-split-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log.date iso`：将日期显示为`2023-05-25 13:54:51`而不是`Thu May 25 13:54:51 2023`'
- en: '`merge.keepbackup false`, to get rid of the `.orig` files git creates during
    a merge conflict'
  id: totrans-split-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`merge.keepbackup false`，以消除Git在合并冲突期间创建的`.orig`文件'
- en: '`merge.tool meld` (or `nvim`, or `nvimdiff`) so that you can use `git mergetool`
    to help resolve merge conflicts'
  id: totrans-split-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`merge.tool meld`（或`nvim`或`nvimdiff`），以便您可以使用`git mergetool`来帮助解决合并冲突'
- en: '`push.followtags true`: push new tags along with commits being pushed'
  id: totrans-split-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`push.followtags true`：与推送的提交一起推送新标签'
- en: '`rebase.missingCommitsCheck error`: don’t allow deleting commits during a rebase'
  id: totrans-split-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rebase.missingCommitsCheck error`：在变基期间不允许删除提交'
- en: '`rebase.updateRefs true`: makes it much easier to rebase multiple stacked branches
    at a time. [Here’s a blog post about it](https://andrewlock.net/working-with-stacked-branches-in-git-is-easier-with-update-refs/).'
  id: totrans-split-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rebase.updateRefs true`：可以轻松地一次性变基多个堆叠的分支。[这篇博文介绍了它](https://andrewlock.net/working-with-stacked-branches-in-git-is-easier-with-update-refs/)'
- en: how to set these
  id: totrans-split-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何设置这些选项
- en: I generally set git config options with `git config --global NAME VALUE`, for
    example `git config --global diff.algorithm histogram`. I usually set all of my
    options globally because it stresses me out to have different git behaviour in
    different repositories.
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常使用`git config --global NAME VALUE`来设置git配置选项，例如`git config --global diff.algorithm
    histogram`。我通常将所有选项设置为全局，因为在不同的存储库中具有不同的git行为会让我感到很紧张。
- en: 'If I want to delete an option I’ll edit `~/.gitconfig` manually, where they
    look like this:'
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-split-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: config changes I’ve made after writing this post
  id: totrans-split-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'My git config is pretty minimal, I already had:'
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
- en: '`init.defaultBranch main`'
  id: totrans-split-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push.autoSetupRemote true`'
  id: totrans-split-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`merge.tool meld`'
  id: totrans-split-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`diff.colorMoved default` (which actually doesn’t even work for me for some
    reason but I haven’t found the time to debug)'
  id: totrans-split-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'and I added these 3 after writing this blog post:'
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
- en: '`diff.algorithm histogram`'
  id: totrans-split-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`branch.sort -committerdate`'
  id: totrans-split-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`merge.conflictstyle zdiff3`'
  id: totrans-split-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’d probably also set `rebase.autosquash` if making carefully crafted pull requests
    with multiple commits were a bigger part of my life right now.
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
- en: I’ve learned to be cautious about setting new config options – it takes me a
    long time to get used to the new behaviour and if I change too many things at
    once I just get confused. `branch.sort -committerdate` is something I was already
    using anyway (through an alias), and I’m pretty sold that `diff.algorithm histogram`
    will make my diffs easier to read when I reorder functions.
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
- en: that’s all!
  id: totrans-split-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I’m always amazed by how useful to just ask a lot of people what stuff they
    like and then list the most commonly mentioned ones, like with this [list of new-ish
    command line tools](https://jvns.ca/blog/2022/04/12/a-list-of-new-ish--command-line-tools/)
    I put together a couple of years ago. Having a list of 20 or 30 options to consider
    feels so much more efficient than combing through a list of [all 600 or so git
    config options](https://jvns.ca/data/all-git-options.txt)
  id: totrans-split-130
  prefs: []
  type: TYPE_NORMAL
- en: It was a little confusing to summarize these because git’s default options have
    actually changed a lot of the years, so people occasionally have options set that
    were important 8 years ago but today are the default. Also a couple of the experimental
    options people were using have been removed and replaced with a different version.
  id: totrans-split-131
  prefs: []
  type: TYPE_NORMAL
- en: I did my best to explain things accurately as of how git works right now in
    2024 but I’ve definitely made mistakes in here somewhere, especially because I
    don’t use most of these options myself. Let me know on Mastodon if you see a mistake
    and I’ll try to fix it.
  id: totrans-split-132
  prefs: []
  type: TYPE_NORMAL
- en: I might also ask people about aliases later, there were a bunch of great ones
    that I left out because this was already getting long.
  id: totrans-split-133
  prefs: []
  type: TYPE_NORMAL
