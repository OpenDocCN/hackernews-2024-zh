- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:54:46'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Popular git config options
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://jvns.ca/blog/2024/02/16/popular-git-config-options/](https://jvns.ca/blog/2024/02/16/popular-git-config-options/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Hello! I always wish that command line tools came with data about how popular
    their various options are, like:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: “basically nobody uses this one”
  id: totrans-split-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “80% of people use this, probably take a look”
  id: totrans-split-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “this one has 6 possible values but people only really use these 2 in practice”
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So I [asked about people’s favourite git config options on Mastodon](https://social.jvns.ca/@b0rk/111885363143321068):'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: what are your favourite git config options to set? Right now I only really have
    `git config push.autosetupremote true` and `git config init.defaultBranch main`
    set in my `~/.gitconfig`, curious about what other people set
  id: totrans-split-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As usual I got a TON of great answers and learned about a bunch of very popular
    git config options that I’d never heard of.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: 'I’m going to list the options, starting with (very roughly) the most popular
    ones. Here’s a table of contents:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: All of the options are documented in `man git-config`, or [this page](https://git-scm.com/docs/git-config).
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '`pull.ff only` or `pull.rebase true`'
  id: totrans-split-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These two were the most popular. These both have similar goals: to avoid accidentally
    creating a merge commit when you run `git pull` on a branch where the upstream
    branch has diverged.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '`pull.rebase true` is the equivalent of running `git pull --rebase` every time
    you `git pull`'
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pull.ff only` is the equivalent of running `git pull --ff-only` every time
    you `git pull`'
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’m pretty sure it doesn’t make sense to set both of them at once, since `--ff-only`
    overrides `--rebase`.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: Personally I don’t use either of these since I prefer to decide how to handle
    that situation every time, and now git’s default behaviour when your branch has
    diverged from the upstream is to just throw an error and ask you what to do (very
    similar to what `git pull --ff-only` does).
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: '`merge.conflictstyle zdiff3`'
  id: totrans-split-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next: making merge conflicts more readable! `merge.conflictstyle zdiff3` and
    `merge.conflictstyle diff3` were both super popular (“totally indispensable”).'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: The main idea is The consensus seemed to be “diff3 is great, and zdiff3 (which
    is newer) is even better!”.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: 'So what’s the deal with `diff3`. Well, by default in git, merge conflicts look
    like this:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
- en: I’m supposed to decide whether `input.split("\n")` or `text.split("\n\n")` is
    better. But how? What if I don’t remember whether `\n` or `\n\n` is right? Enter
    diff3!
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the same merge conflict look like with `merge.conflictstyle diff3`
    set:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
- en: 'This has **extra information**: now the original version of the code is in
    the middle! So we can see that:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: one side changed `\n\n` to `\n`
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the other side renamed `input` to `text`
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So presumably the correct merge conflict resolution is `return text.split("\n")`,
    since that combines the changes from both sides.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: I haven’t used zdiff3, but a lot of people seem to think it’s better. The blog
    post [Better Git Conflicts with zdiff3](https://ductile.systems/zdiff3/) talks
    more about it.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: '`rebase.autosquash true`'
  id: totrans-split-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Autosquash was also a new feature to me. The goal is to make it easier to modify
    old commits.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how it works:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: You have a commit that you would like to be combined with some commit that’s
    3 commits ago, say `add parsing code`
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You commit it with `git commit --fixup OLD_COMMIT_ID`, which gives the new commit
    the commit message `fixup! add parsing code`
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, when you run `git rebase --autosquash main`, it will automatically combine
    all the `fixup!` commits with their targets
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rebase.autosquash true` means that `--autosquash` always gets passed automatically
    to `git rebase`.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: '`rebase.autostash true`'
  id: totrans-split-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This automatically runs `git stash` before a git rebase and `git stash pop`
    after. It basically passes `--autostash` to `git rebase`.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: Personally I’m a little scared of this since it potentially can result in merge
    conflicts after the rebase, but I guess that doesn’t come up very often for people
    since it seems like a really popular configuration option.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: '`push.default simple`, `push.default current`, `push.autoSetupRemote true`'
  id: totrans-split-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These [`push`](https://git-scm.com/docs/git-config#Documentation/git-config.txt-pushdefault)
    options tell `git push` to automatically push the current branch to a remote branch
    with the same name.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: '`push.default simple` is the default in Git. It only works if your branch is
    already tracking a remote branch'
  id: totrans-split-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push.default current` is similar, but it’ll always push the local branch to
    a remote branch with the same name.'
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push.autoSetupRemote true` is a little different – this one makes it so when
    you first push a branch, it’ll automatically set up tracking for it'
  id: totrans-split-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I think I prefer `push.autoSetupRemote true` to `push.default current` because
    `push.autoSetupRemote true` also lets you **pull** from the matching remote branch
    (though you do need to push first to set up tracking). `push.default current`
    only lets you push.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: I believe the only thing to be careful of with `push.autoSetupRemote true` and
    `push.default current` is that you need to be confident that you’re never going
    to accidentally make a local branch with the same name as an unrelated remote
    branch. Lots of people have branch naming conventions (like `julia/my-change`)
    that make this kind of conflict very unlikely, or just have few enough collaborators
    that branch name conflicts probably won’t happen.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: '`init.defaultBranch main`'
  id: totrans-split-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a `main` branch instead of a `master` branch when creating a new repo.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: '`commit.verbose true`'
  id: totrans-split-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This adds the whole commit diff in the text editor where you’re writing your
    commit message, to help you remember what you were doing.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: '`rerere.enabled true`'
  id: totrans-split-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This enables [rerere](https://git-scm.com/book/en/v2/Git-Tools-Rerere) (”**re**use
    **re**covered **re**solution”), which remembers how you resolved merge conflicts
    during a `git rebase` and automatically resolves conflicts for you when it can.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: '`help.autocorrect 10`'
  id: totrans-split-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default git’s autocorrect try to check for typos (like `git ocmmit`), but
    won’t actually run the corrected command.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: If you want it to run the suggestion automatically, you can set [`help.autocorrect`](https://git-scm.com/docs/git-config#Documentation/git-config.txt-helpautoCorrect)
    to `1` (run after 0.1 seconds), `10` (run after 1 second), `immediate` (run immediately),
    or `prompt` (run after prompting)
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: 'The “pager” is what git uses to display the output of `git diff`, `git log`,
    `git show`, etc. People set it to:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: '[`delta`](https://github.com/dandavison/delta) (a fancy diff viewing tool with
    syntax highlighting)'
  id: totrans-split-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`less -x5,9` (sets tabstops, which I guess helps if you have a lot of files
    with tabs in them?)'
  id: totrans-split-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`less -F -X` (not sure about this one, `-F` seems to disable the pager if everything
    fits on one screen if but my git seems to do that already anyway)'
  id: totrans-split-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cat` (to disable paging altogether)'
  id: totrans-split-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I used to use `delta` but turned it off because somehow I messed up the colour
    scheme in my terminal and couldn’t figure out how to fix it. I think it’s a great
    tool though.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: I believe delta also suggests that you set up `interactive.diffFilter delta
    --color-only` to syntax highlight code when you run `git add -p`.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: '`diff.algorithm histogram`'
  id: totrans-split-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Git’s default diff algorithm often handles functions being reordered badly.
    For example look at this diff:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-69
  prefs: []
  type: TYPE_PRE
- en: 'I find it pretty confusing. But with `diff.algorithm histogram`, the diff looks
    like this instead, which I find much clearer:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-71
  prefs: []
  type: TYPE_PRE
- en: Some folks also use `patience`, but `histogram` seems to be more popular. [When
    to Use Each of the Git Diff Algorithms](https://luppeng.wordpress.com/2020/10/10/when-to-use-each-of-the-git-diff-algorithms/)
    has more on this.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: '`core.excludesfile`: a global .gitignore'
  id: totrans-split-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`core.excludeFiles = ~/.gitignore` lets you set a global gitignore file that
    applies to all repositories, for things like `.idea` or `.DS_Store` that you never
    want to commit to any repo. It defaults to `~/.config/git/ignore`.'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
- en: '`includeIf`: separate git configs for personal and work'
  id: totrans-split-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Lots of people said they use this to configure different email addresses for
    personal and work repositories. You can set it up something like this:'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-77
  prefs: []
  type: TYPE_PRE
- en: 'I often accidentally clone the HTTP version of a repository instead of the
    SSH version and then have to manually go into `~/.git/config` and edit the remote
    URL. This seems like a nice workaround: it’ll replace `https://github.com` in
    remotes with `git@github.com:`.'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what it looks like in `~/.gitconfig` since it’s kind of a mouthful:'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-80
  prefs: []
  type: TYPE_PRE
- en: One person said they use `pushInsteadOf` instead to only do the replacement
    for `git push` because they don’t want to have to unlock their SSH key when pulling
    a public repo.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
- en: A couple of other people mentioned setting `insteadOf = "gh:"` so they can `git
    remote add gh:jvns/mysite` to add a remote with less typing.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
- en: '`fsckobjects`: avoid data corruption'
  id: totrans-split-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A couple of people mentioned this one. Someone explained it as “detect data
    corruption eagerly. Rarely matters but has saved my entire team a couple times”.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-split-85
  prefs: []
  type: TYPE_PRE
- en: submodule stuff
  id: totrans-split-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'I’ve never understood anything about submodules but a couple of person said
    they like to set:'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
- en: '`status.submoduleSummary true`'
  id: totrans-split-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`diff.submodule log`'
  id: totrans-split-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`submodule.recurse true`'
  id: totrans-split-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I won’t attempt to explain those but there’s [an explanation on Mastodon by
    @unlambda here](https://hachyderm.io/@unlambda/111942468084436716#.).
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
- en: and more
  id: totrans-split-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here’s everything else that was suggested by at least 2 people:'
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
- en: '`blame.ignoreRevsFile .git-blame-ignore-revs` lets you specify a file with
    commits to ignore during `git blame`, so that giant renames don’t mess up your
    blames'
  id: totrans-split-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`branch.sort -committerdate`, makes `git branch` sort by most recently used
    branches instead of alphabetical, to make it easier to find branches. `tag.sort
    taggerdate` is similar for tags.'
  id: totrans-split-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.ui false`: to turn off colour'
  id: totrans-split-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit.cleanup scissors`: so that you can write `#include` in a commit message
    without the `#` being treated as a comment and removed'
  id: totrans-split-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`core.autocrlf false`: on Windows, to work well with folks using Unix'
  id: totrans-split-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`core.editor emacs`: to use emacs (or another editor) to edit commit messages'
  id: totrans-split-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`credential.helper osxkeychain`: use the Mac keychain for managing'
  id: totrans-split-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`diff.tool difftastic`: use [difftastic](https://difftastic.wilfred.me.uk/)
    (or `meld` or `nvimdiffs`) to display diffs'
  id: totrans-split-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`diff.colorMoved default`: uses different colours to highlight lines in diffs
    that have been “moved”'
  id: totrans-split-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`diff.colorMovedWS allow-indentation-change`: with `diff.colorMoved` set, also
    ignores indentation changes'
  id: totrans-split-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`diff.context 10`: include more context in diffs'
  id: totrans-split-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fetch.prune true` and `fetch.prunetags` - automatically delete remote tracking
    branches that have been deleted'
  id: totrans-split-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gpg.format ssh`: allow you to sign commits with SSH keys'
  id: totrans-split-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log.date iso`: display dates as `2023-05-25 13:54:51` instead of `Thu May
    25 13:54:51 2023`'
  id: totrans-split-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`merge.keepbackup false`, to get rid of the `.orig` files git creates during
    a merge conflict'
  id: totrans-split-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`merge.tool meld` (or `nvim`, or `nvimdiff`) so that you can use `git mergetool`
    to help resolve merge conflicts'
  id: totrans-split-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push.followtags true`: push new tags along with commits being pushed'
  id: totrans-split-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rebase.missingCommitsCheck error`: don’t allow deleting commits during a rebase'
  id: totrans-split-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rebase.updateRefs true`: makes it much easier to rebase multiple stacked branches
    at a time. [Here’s a blog post about it](https://andrewlock.net/working-with-stacked-branches-in-git-is-easier-with-update-refs/).'
  id: totrans-split-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: how to set these
  id: totrans-split-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I generally set git config options with `git config --global NAME VALUE`, for
    example `git config --global diff.algorithm histogram`. I usually set all of my
    options globally because it stresses me out to have different git behaviour in
    different repositories.
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
- en: 'If I want to delete an option I’ll edit `~/.gitconfig` manually, where they
    look like this:'
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-split-116
  prefs: []
  type: TYPE_PRE
- en: config changes I’ve made after writing this post
  id: totrans-split-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'My git config is pretty minimal, I already had:'
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
- en: '`init.defaultBranch main`'
  id: totrans-split-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push.autoSetupRemote true`'
  id: totrans-split-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`merge.tool meld`'
  id: totrans-split-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`diff.colorMoved default` (which actually doesn’t even work for me for some
    reason but I haven’t found the time to debug)'
  id: totrans-split-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'and I added these 3 after writing this blog post:'
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
- en: '`diff.algorithm histogram`'
  id: totrans-split-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`branch.sort -committerdate`'
  id: totrans-split-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`merge.conflictstyle zdiff3`'
  id: totrans-split-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’d probably also set `rebase.autosquash` if making carefully crafted pull requests
    with multiple commits were a bigger part of my life right now.
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
- en: I’ve learned to be cautious about setting new config options – it takes me a
    long time to get used to the new behaviour and if I change too many things at
    once I just get confused. `branch.sort -committerdate` is something I was already
    using anyway (through an alias), and I’m pretty sold that `diff.algorithm histogram`
    will make my diffs easier to read when I reorder functions.
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
- en: that’s all!
  id: totrans-split-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I’m always amazed by how useful to just ask a lot of people what stuff they
    like and then list the most commonly mentioned ones, like with this [list of new-ish
    command line tools](https://jvns.ca/blog/2022/04/12/a-list-of-new-ish--command-line-tools/)
    I put together a couple of years ago. Having a list of 20 or 30 options to consider
    feels so much more efficient than combing through a list of [all 600 or so git
    config options](https://jvns.ca/data/all-git-options.txt)
  id: totrans-split-130
  prefs: []
  type: TYPE_NORMAL
- en: It was a little confusing to summarize these because git’s default options have
    actually changed a lot of the years, so people occasionally have options set that
    were important 8 years ago but today are the default. Also a couple of the experimental
    options people were using have been removed and replaced with a different version.
  id: totrans-split-131
  prefs: []
  type: TYPE_NORMAL
- en: I did my best to explain things accurately as of how git works right now in
    2024 but I’ve definitely made mistakes in here somewhere, especially because I
    don’t use most of these options myself. Let me know on Mastodon if you see a mistake
    and I’ll try to fix it.
  id: totrans-split-132
  prefs: []
  type: TYPE_NORMAL
- en: I might also ask people about aliases later, there were a bunch of great ones
    that I left out because this was already getting long.
  id: totrans-split-133
  prefs: []
  type: TYPE_NORMAL
