["```\ncase class Person(age: String) \n```", "```\nval person = Person(\"Jeff\") \n```", "```\ndef isOldEnoughToSmoke(person: Person): Boolean = {\n  Try(person.age.toInt) match {\n    case Failure(_) => throw new Exception(s\"cannot parse age '${person.age}' as numeric\")\n    case Success(value) => value >= 18\n  }\n}\n\ndef isOldEnoughToDrink(person: Person): Boolean = {\n  Try(person.age.toInt) match {\n    case Failure(_) => throw new Exception(s\"cannot parse age '${person.age}' as numeric\")\n    case Success(value) => value >= 21\n  }\n} \n```", "```\ndef parseAge(age: String): Int = {\n  Try(age.toInt) match {\n    case Failure(_) => throw new Exception(s\"cannot parse age '$age' as numeric\")\n    case Success(value) => value\n  }\n}\n\ndef isOldEnoughToSmoke(person: Person): Boolean =\n  parseAge(person.age) >= 18\n\ndef isOldEnoughToDrink(person: Person): Boolean =\n  parseAge(person.age) >= 21 \n```", "```\ncase class Person(age: Int) \n```", "```\ndef isOldEnoughToSmoke(person: Person): Boolean =\n  person.age >= 18\n\ndef isOldEnoughToDrink(person: Person): Boolean =\n  person.age >= 21 \n```", "```\nval person = Person(-1) \n```", "```\nval person = Person(90210) \n```", "```\ncase class Person(age: Int) {\n  assert(age >= 0 && age < 150)\n} \n```", "```\nval person = Person(-1) \n```", "```\nval person = Person(90210) \n```", "```\ncase class Person(age: Int Refined GreaterEqual[0] And Less[150]) \n```", "```\nString => Int => Int with constraints \n```", "```\ncase class Person(age: Int, weight: Int) {\n  assert(age >= 0 && age < 150)\n  assert(weight >= 0 && weight < 500)\n} \n```", "```\nval me = Person(81, 33) \n```", "```\ncase class Age(years: Int) {\n  assert(years >= 0 && years < 150)\n}\n\ncase class Weight(kgs: Int) {\n  assert(kgs >= 0 && kgs < 500)\n}\n\ncase class Person(age: Age, weight: Weight) \n```", "```\nval age = Age(33)\nval weight = Weight(81)\n\nval me = Person(weight, age) \n```", "```\ntrait AgeTag\ntype Age = Int with AgeTag\n\nobject Age {\n  def apply(years: Int): Age = {\n    assert(years >= 0 && years < 150)\n    years.asInstanceOf[Age]\n  }\n}\n\ntrait WeightTag\ntype Weight = Int with WeightTag\n\nobject Weight {\n  def apply(kgs: Int): Weight = {\n    assert(kgs >= 0 && kgs < 500)\n    kgs.asInstanceOf[Weight]\n  }\n}\n\ncase class Person(age: Age, weight: Weight)\n\nval p0 = Person(42, 42) \nval p1 = Person(Age(42), 42) \nval p2 = Person(Age(42), Weight(42)) \nval p3 = Person(Weight(42), Weight(42)) \n```", "```\n trait AgeTag\ntype Age = Int with AgeTag\n\nobject Age {\n  def apply(years: Int): Age = {\n    assert(years >= 0 && years < 150)\n    years.asInstanceOf[Age]\n  }\n}\n\ncase class Weight(kgs: Int) {\n  assert(kgs >= 0 && kgs < 500)\n}\n\nassert(40 == Age(10) + Age(30))\n\nWeight(10) + Weight(30) \n\nWeight(10).kgs + Weight(30).kgs \n```", "```\nimplicit def weightAsInt(weight: Weight): Int = weight.kgs\n\nWeight(10) + Weight(30) \n```", "```\ncase class Date(year: Year, month: Month, day: Day)\n\ncase class Year(value: Int, currentYear: Int) {\n  assert(value >= 1900 && value <= currentYear)\n}\n\ncase class Month(value: Int) {\n  assert(value >= 1 && value <= 12)\n}\n\ncase class Day(value: Int) {\n  assert(value >= 1 && value <= 31)\n}\n\ncase class Person(dateOfBirth: Date, weight: Weight) {\n  def age(currentDate: Date): Age = {\n    ??? \n  }\n} \n```", "```\ncase class Year(value: Int, currentYear: Int) {\n  assert(value >= 1900 && value <= currentYear)\n}\n\nsealed trait Month\n\ncase object January extends Month\ncase object February extends Month\ncase object March extends Month\ncase object April extends Month\ncase object May extends Month\ncase object June extends Month\ncase object July extends Month\ncase object August extends Month\ncase object September extends Month\ncase object October extends Month\ncase object November extends Month\ncase object December extends Month\n\ncase class Day(value: Int, month: Month) {\n  month match {\n    case February => assert(value >= 1 && value <= 28)\n    case April | June | September | November => assert(value >= 1 && value <= 30)\n    case _ => assert(value >= 1 && value <= 31)\n  }\n}\n\ncase class Date(year: Year, month: Month, day: Day) \n```"]