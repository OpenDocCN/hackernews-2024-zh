- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:29:04'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Large sequence models for software development activities
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://blog.research.google/2023/05/large-sequence-models-for-software.html](https://blog.research.google/2023/05/large-sequence-models-for-software.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Posted by Petros Maniatis and Daniel Tarlow, Research Scientists, Google ![](img/a1ca82879abe550f982f8bd11e5aeb54.png)
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: Software isn’t created in one dramatic step. It improves bit by bit, one little
    step at a time — editing, running unit tests, fixing build errors, addressing
    code reviews, editing some more, appeasing [linters](https://en.wikipedia.org/wiki/Lint_(software)),
    and fixing more errors — until finally it becomes good enough to merge into a
    code repository. Software engineering isn’t an isolated process, but a dialogue
    among human developers, code reviewers, bug reporters, software architects and
    tools, such as compilers, unit tests, linters and static analyzers.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: 'Today we describe DIDACT (​​Dynamic Integrated Developer ACTivity), which is
    a methodology for training large machine learning (ML) models for software development.
    The novelty of DIDACT is that it uses *the process of software development* as
    the source of training data for the model, rather than just *the polished end
    state* of that process, the finished code. By exposing the model to the contexts
    that developers see as they work, paired with the actions they take in response,
    the model learns about the dynamics of software development and is more aligned
    with how developers spend their time. We leverage instrumentation of Google''s
    software development to scale up the quantity and diversity of developer-activity
    data beyond previous works. Results are extremely promising along two dimensions:
    usefulness to professional software developers, and as a potential basis for imbuing
    ML models with general software development skills.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: '| [![](img/560cdad8757928c28828ba961f532690.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiJD9kDvfSCOudyA3cXrYr3eYIKzuqNfndwpoZVHsENIIFUTARGBFoqn_IE627Zk2iGuQg3NFOGcPw2pCA8fBSYv-iBzYNEw4yoOGghZrNvo1AJY1K0o9IvzMCqKjKPEKupP7NL8yQqBs3BUzoizgePEBgZN5vN9Ni7B0a2_eCs4GzFEJYDUR2xF4TIYg/s1475/image2.png)
    |'
  id: totrans-split-9
  prefs: []
  type: TYPE_TB
- en: '| DIDACT is a multi-task model trained on development activities that include
    editing, debugging, repair, and code review. |'
  id: totrans-split-10
  prefs: []
  type: TYPE_TB
- en: 'We built and deployed internally three DIDACT tools, [Comment Resolution](https://ai.googleblog.com/2023/05/resolving-code-review-comments-with-ml.html)
    (which we recently announced), Build Repair, and Tip Prediction, each integrated
    at different stages of the development workflow. All three of these tools received
    enthusiastic feedback from thousands of internal developers. We see this as the
    ultimate test of usefulness: do professional developers, who are often experts
    on the code base and who have carefully honed workflows, leverage the tools to
    improve their productivity?'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps most excitingly, we demonstrate how DIDACT is a first step towards a
    general-purpose developer-assistance agent. We show that the trained model can
    be used in a variety of surprising ways, via prompting with prefixes of developer
    activities, and by chaining together multiple predictions to roll out longer activity
    trajectories. We believe DIDACT paves a promising path towards developing agents
    that can generally assist across the software development process.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: A treasure trove of data about the software engineering process
  id: totrans-split-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google’s software engineering toolchains store every operation related to code
    as a log of interactions among tools and developers, and have done so for decades.
    In principle, one could use this record to replay in detail the key episodes in
    the “software engineering video” of how Google’s codebase came to be, step-by-step
    — one code edit, compilation, comment, variable rename, etc., at a time.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: Google code lives in a [monorepo](https://en.wikipedia.org/wiki/Monorepo), a
    single repository of code for all tools and systems. A software developer typically
    experiments with code changes in a local [copy-on-write](https://en.wikipedia.org/wiki/Copy-on-write)
    workspace managed by a system called [Clients in the Cloud](https://cacm.acm.org/magazines/2016/7/204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository/fulltext)
    (CitC). When the developer is ready to package a set of code changes together
    for a specific purpose (e.g., fixing a bug), they create a changelist (CL) in
    [Critique](https://abseil.io/resources/swe-book/html/ch19.html), Google’s code-review
    system. As with other types of code-review systems, the developer engages in a
    dialog with a peer reviewer about functionality and style. The developer edits
    their CL to address reviewer comments as the dialog progresses. Eventually, the
    reviewer declares “LGTM!” (“looks good to me”), and the CL is merged into the
    code repository.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: Of course, in addition to a dialog with the code reviewer, the developer also
    maintains a “dialog” of sorts with a plethora of other software engineering tools,
    such as the compiler, the testing framework, linters, static analyzers, fuzzers,
    etc.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '| [![](img/7b8d0e0dd6ee4742cfdaaf05b613843d.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjhdDAeePURbX0syZUQcLifMLS9uMw-ufpwg8jUXQoQMyHa0UNstR_vA7mqan_fjqzlXLuSlwVZItU-dqZne3Bk4Adsb2DLTi__wX0vmfk_JnEjRC_tmE72e7woRNCsZO6znn3OCQsZLZvZrlU55byBsm3oi5ubHBvDizqvz3N83je01r7XtZ6cuvEZZA/s1877/image4.gif)
    |'
  id: totrans-split-17
  prefs: []
  type: TYPE_TB
- en: '| An illustration of the intricate web of activities involved in developing
    software: small actions by the developer, interactions with a code reviewer, and
    invocations of tools such as compilers. |'
  id: totrans-split-18
  prefs: []
  type: TYPE_TB
- en: A multi-task model for software engineering
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'DIDACT utilizes interactions among engineers and tools to power ML models that
    assist Google developers, by suggesting or enhancing actions developers take —
    in context — while pursuing their software-engineering tasks. To do that, we have
    defined a number of tasks about individual developer activities: repairing a broken
    build, predicting a code-review comment, addressing a code-review comment, renaming
    a variable, editing a file, etc. We use a common formalism for each activity:
    it takes some *State* (a code file), some *Intent* (annotations specific to the
    activity, such as code-review comments or compiler errors), and produces an *Action*
    (the operation taken to address the task). This Action is like a mini programming
    language, and can be extended for newly added activities. It covers things like
    editing, adding comments, renaming variables, marking up code with errors, etc.
    We call this language *DevScript*.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: DIDACT 利用工程师和工具之间的交互来驱动机器学习模型，协助谷歌开发者建议或增强他们在追求软件工程任务时的上下文中采取的行动。为此，我们定义了一些关于个别开发者活动的任务：修复损坏的构建、预测代码审查评论、解决代码审查评论、重命名变量、编辑文件等。对于每个活动，我们使用一个通用的形式主义：它需要一些
    *State*（代码文件）、一些 *Intent*（特定于活动的注释，例如代码审查评论或编译器错误），并生成一个 *Action*（执行的操作以解决任务）。这个动作类似于一个迷你编程语言，并且可以扩展到新添加的活动。它涵盖编辑、添加注释、重命名变量、标记带有错误的代码等。我们称这种语言为
    *DevScript*。
- en: '| [![](img/e501ce4e695031908597de318fc17d3c.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgsd4dFYSNVxcg20eqgJqdr3u9S2hHsBlqOelnix5XZd5zIhrZIemDLaF3CcaMk09Y_9kyDkhAuAq2-STjKDOP1Tb9ShsE91FpNgnLRqOxIzCKrTj2_WaAJUlRxikaLmQK2iv7YfpnQtQeaUeIXNCRE9efYju6KxGBEu4zwDA0vQ6qla6dNvpResnch2w/s1200/DIDACT.gif)
    |'
  id: totrans-split-21
  prefs: []
  type: TYPE_TB
  zh: '| [![](img/e501ce4e695031908597de318fc17d3c.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgsd4dFYSNVxcg20eqgJqdr3u9S2hHsBlqOelnix5XZd5zIhrZIemDLaF3CcaMk09Y_9kyDkhAuAq2-STjKDOP1Tb9ShsE91FpNgnLRqOxIzCKrTj2_WaAJUlRxikaLmQK2iv7YfpnQtQeaUeIXNCRE9efYju6KxGBEu4zwDA0vQ6qla6dNvpResnch2w/s1200/DIDACT.gif)
    |'
- en: '| The DIDACT model is prompted with a task, code snippets, and annotations
    related to that task, and produces development actions, e.g., edits or comments.
    |'
  id: totrans-split-22
  prefs: []
  type: TYPE_TB
  zh: '| DIDACT 模型根据任务、代码片段和相关注释进行触发，并生成开发动作，例如编辑或评论。 |'
- en: This state-intent-action formalism enables us to capture many different tasks
    in a general way. What’s more, DevScript is a concise way to express complex actions,
    without the need to output the whole state (the original code) as it would be
    after the action takes place; this makes the model more efficient and more interpretable.
    For example, a rename might touch a file in dozens of places, but a model can
    predict a single rename action.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这种状态-意图-动作的形式主义使我们能够以一种通用的方式捕捉许多不同的任务。此外，DevScript 是表达复杂操作的简洁方式，无需输出整个状态（即操作后的原始代码）；这使得模型更高效、更易解释。例如，重命名可能涉及到文件中的数十个位置，但模型可以预测单个重命名动作。
- en: An ML peer programmer
  id: totrans-split-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个机器学习的同行程序员
- en: DIDACT does a good job on individual assistive tasks. For example, below we
    show DIDACT doing code clean-up after functionality is mostly done. It looks at
    the code along with some final comments by the code reviewer (marked with “human”
    in the animation), and predicts edits to address those comments (rendered as a
    *diff*).
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: DIDACT 在个别辅助任务上表现出色。例如，在功能基本完成后，我们展示了 DIDACT 进行代码清理。它查看代码以及代码审查人员的一些最终评论（在动画中标有“human”），并预测编辑以解决这些评论（显示为
    *diff*）。
- en: '| [![](img/0958309b8514560c095f51ab8b05fa55.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgNMPCHlZwRpo4EKM-HZt7qVII342P6kFgSK18H2sYqftvqmrEC-SZp9FsmgvpZtafgCid3WF905_ooJrA8vEFNs7M4B9Ox5pObqzvCltaAUXouIkiVpLWKRs-VEY0Dhpg11RbH7iJfhdinkNegpK0rOhTPR7rdzleQJzpIErVIZBkPi3WjisexB0Uklw/s897/DIDACT2.gif)
    |'
  id: totrans-split-26
  prefs: []
  type: TYPE_TB
  zh: '| [![](img/0958309b8514560c095f51ab8b05fa55.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgNMPCHlZwRpo4EKM-HZt7qVII342P6kFgSK18H2sYqftvqmrEC-SZp9FsmgvpZtafgCid3WF905_ooJrA8vEFNs7M4B9Ox5pObqzvCltaAUXouIkiVpLWKRs-VEY0Dhpg11RbH7iJfhdinkNegpK0rOhTPR7rdzleQJzpIErVIZBkPi3WjisexB0Uklw/s897/DIDACT2.gif)
    |'
- en: '| Given an initial snippet of code and the comments that a code reviewer attached
    to that snippet, the Pre-Submit Cleanup task of DIDACT produces edits (insertions
    and deletions of text) that address those comments. |'
  id: totrans-split-27
  prefs: []
  type: TYPE_TB
  zh: '| 给定一个初始代码片段和代码审查员附加到该片段的评论，DIDACT 的 Pre-Submit Cleanup 任务会生成编辑（插入和删除文本），以解决这些评论。
    |'
- en: The multimodal nature of DIDACT also gives rise to some surprising capabilities,
    reminiscent of [behaviors emerging with scale](https://ai.googleblog.com/2022/11/characterizing-emergent-phenomena-in.html).
    One such capability is *history augmentation*, which can be enabled via prompting.
    Knowing what the developer did recently enables the model to make a better guess
    about what the developer should do next.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: DIDACT 的多模态性质也带来了一些令人惊讶的能力，让人联想到[随着规模扩展而出现的行为](https://ai.googleblog.com/2022/11/characterizing-emergent-phenomena-in.html)。其中之一是*历史增强*，可以通过提示启用。了解开发者最近做了什么可以使模型更好地猜测开发者接下来应该做什么。
- en: '| [![](img/de9f20eedef70be1d4b92b012ac76253.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjgwd-Dvh_esu_26f2rO6DKwMpGyDF0wKHzasGuD3RhXNJiJR5cM613KLSuabNp5hvKV9dF2vzHd7XkUOKD4d7l1cOyV2ovYwxWLECmudUKDk5bmVNOg5eImsqUJbkUkPWk7yOiCogafub7eHb9B3cytjGInIICcMoWFrTlsgqfN3B9IvHFPbWbwfIkZQ/s1044/CitCMonster.gif)
    |'
  id: totrans-split-29
  prefs: []
  type: TYPE_TB
  zh: '| [![](img/de9f20eedef70be1d4b92b012ac76253.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjgwd-Dvh_esu_26f2rO6DKwMpGyDF0wKHzasGuD3RhXNJiJR5cM613KLSuabNp5hvKV9dF2vzHd7XkUOKD4d7l1cOyV2ovYwxWLECmudUKDk5bmVNOg5eImsqUJbkUkPWk7yOiCogafub7eHb9B3cytjGInIICcMoWFrTlsgqfN3B9IvHFPbWbwfIkZQ/s1044/CitCMonster.gif)
    |'
- en: '| An illustration of history-augmented code completion in action. |'
  id: totrans-split-30
  prefs: []
  type: TYPE_TB
  zh: '| 展示历史增强代码完成的示例。 |'
- en: A powerful such task exemplifying this capability is *history-augmented code
    completion*. In the figure below, the developer adds a new function parameter
    (1), and moves the cursor into the documentation (2). Conditioned on the history
    of developer edits and the cursor position, the model completes the line (3) by
    correctly predicting the docstring entry for the new parameter.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 展示这一能力的强大任务是*历史增强代码完成*。在下图中，开发者添加了一个新的函数参数（1），并将光标移动到文档中（2）。基于开发者编辑历史和光标位置，模型通过正确预测新参数的文档字符串条目（3）来完成这一行。
- en: '| [![](img/f6baad53225c42e13ec7a315c6d00110.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj_ao8R6Rv9t0sz_O27BPC0Wy3dpbllP101ovPL1yklPN4SqJu8B94EZyhKumBZLsbmuiLdNVlA92wmOgnBQ-nglk2FcNRc4B2J2hFsR3x0Zy2XWcDGylowaxI2hDJH2cAyIzAEcZqCeg8PsLWCNkKzhr-jnMPr4_aGjjZguCogRalV2582jqshece5bA/s1048/DIDACT4.gif)
    |'
  id: totrans-split-32
  prefs: []
  type: TYPE_TB
  zh: '| [![](img/f6baad53225c42e13ec7a315c6d00110.png)](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj_ao8R6Rv9t0sz_O27BPC0Wy3dpbllP101ovPL1yklPN4SqJu8B94EZyhKumBZLsbmuiLdNVlA92wmOgnBQ-nglk2FcNRc4B2J2hFsR3x0Zy2XWcDGylowaxI2hDJH2cAyIzAEcZqCeg8PsLWCNkKzhr-jnMPr4_aGjjZguCogRalV2582jqshece5bA/s1048/DIDACT4.gif)
    |'
- en: '| An illustration of edit prediction, over multiple chained iterations. |'
  id: totrans-split-33
  prefs: []
  type: TYPE_TB
  zh: 在多个链式迭代中进行编辑预测的示例插图。
- en: In an even more powerful history-augmented task, *edit prediction*, the model
    can choose where to edit next in a fashion that is historically consistent**.**
    If the developer deletes a function parameter (1), the model can use history to
    correctly predict an update to the docstring (2) that removes the deleted parameter
    (without the human developer manually placing the cursor there) and to update
    a statement in the function (3) in a syntactically (and — arguably — semantically)
    correct way. With history, the model can unambiguously decide how to continue
    the “editing video” correctly. Without history, the model wouldn’t know whether
    the missing function parameter is intentional (because the developer is in the
    process of a longer edit to remove it) or accidental (in which case the model
    should re-add it to fix the problem).
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在更为强大的历史增强任务中，*编辑预测*，模型可以选择下一个编辑位置，这种方式在历史上是一致的**。** 如果开发者删除了一个函数参数（1），模型可以使用历史记录正确预测更新文档字符串（2），以去除已删除的参数（而无需开发者手动将光标放置在那里），并以语法（以及
    —— 可能 —— 语义上）正确的方式更新函数语句（3）。有了历史记录，模型可以明确地决定如何正确地继续“编辑视频”。没有历史记录，模型无法确定缺失的函数参数是故意的（因为开发者正在长时间编辑过程中去除它）还是偶然的（在这种情况下，模型应该重新添加它以修复问题）。
- en: 'The model can go even further. For example, we started with a blank file and
    asked the model to successively predict what edits would come next until it had
    written a full code file. The astonishing part is that the model developed code
    in a step-by-step way that would seem naturalto a developer: It started by first
    creating a fully working skeleton with imports, flags, and a basic main function.
    It then incrementally added new functionality, like reading from a file and writing
    results, and added functionality to filter out some lines based on a user-provided
    regular expression, which required changes across the file, like adding new flags.'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型还可以进一步发展。例如，我们从一个空白文件开始，要求模型连续预测接下来的编辑，直到它写出完整的代码文件为止。令人惊讶的是，模型以一种对开发者来说自然的逐步方式开发代码：首先创建一个包含导入、标志和基本主函数的完全工作骨架。然后逐步添加新功能，如从文件中读取并写入结果，并添加根据用户提供的正则表达式过滤某些行的功能，这需要在整个文件中进行更改，如添加新标志。
- en: Conclusion
  id: totrans-split-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: DIDACT turns Google's software development process into training demonstrations
    for ML developer assistants, and uses those demonstrations to train models that
    construct code in a step-by-step fashion, interactively with tools and code reviewers.
    These innovations are already powering tools enjoyed by Google developers every
    day. The DIDACT approach complements the great strides taken by large language
    models at Google and elsewhere, towards technologies that ease toil, improve productivity,
    and enhance the quality of work of software engineers.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: DIDACT将Google的软件开发过程转化为ML开发助手的训练演示，并利用这些演示来训练模型，以逐步交互地构建代码，与工具和代码审查人员互动。这些创新已经支持着Google开发人员每天使用的工具。DIDACT方法与Google及其他地方大型语言模型取得的重大进展相辅相成，朝着减少重复劳动、提高生产力和增强软件工程师工作质量的技术发展。
- en: Acknowledgements
  id: totrans-split-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 致谢
- en: '*This work is the result of a multi-year collaboration among Google Research,
    Google Core Systems and Experiences, and DeepMind. We would like to acknowledge
    our colleagues Jacob Austin, Pascal Lamblin, Pierre-Antoine Manzagol, and Daniel
    Zheng, who join us as the key drivers of this project. This work could not have
    happened without the significant and sustained contributions of our partners at
    Alphabet (Peter Choy, Henryk Michalewski, Subhodeep Moitra, Malgorzata Salawa,
    Vaibhav Tulsyan, and Manushree Vijayvergiya), as well as the many people who collected
    data, identified tasks, built products, strategized, evangelized, and helped us
    execute on the many facets of this agenda (Ankur Agarwal, Paige Bailey, Marc Brockschmidt,
    Rodrigo Damazio Bovendorp, Satish Chandra, Savinee Dancs, **Denis Davydenko, **Matt
    Frazier, Alexander Frömmgen, Nimesh Ghelani, Chris Gorgolewski, Chenjie Gu, Vincent
    Hellendoorn, Franjo Ivančić, Marko Ivanković, Emily Johnston, Luka Kalinovcic,
    Lera Kharatyan, Jessica Ko, Markus Kusano, Kathy Nix, Christian Perez, Sara Qu,
    Marc Rasi, Marcus Revaj, Ballie Sandhu, Michael Sloan, Tom Small, Gabriela Surita,
    Maxim Tabachnyk, **Stephanie Tang, **David Tattersall, Sara Toth, Kevin Villela,
    Sara Wiltberger, and Donald Duo Zhao) and our extremely supportive leadership
    (Martín Abadi, Joelle Barral, Jeff Dean, Madhura Dudhgaonkar, Douglas Eck, Zoubin
    Ghahramani, Hugo Larochelle, Chandu Thekkath, and Niranjan Tulpule). Thank you!*'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*这项工作是Google研究部门、Google核心系统与体验部门以及DeepMind多年合作的结果。我们要感谢我们的同事Jacob Austin、Pascal
    Lamblin、Pierre-Antoine Manzagol和Daniel Zheng，他们作为这个项目的主要推动者。没有Alphabet合作伙伴（Peter
    Choy、Henryk Michalewski、Subhodeep Moitra、Malgorzata Salawa、Vaibhav Tulsyan和Manushree
    Vijayvergiya）以及收集数据、识别任务、构建产品、制定战略、推广和帮助我们执行此议程的许多人（Ankur Agarwal、Paige Bailey、Marc
    Brockschmidt、Rodrigo Damazio Bovendorp、Satish Chandra、Savinee Dancs、**Denis Davydenko、**Matt
    Frazier、Alexander Frömmgen、Nimesh Ghelani、Chris Gorgolewski、Chenjie Gu、Vincent
    Hellendoorn、Franjo Ivančić、Marko Ivanković、Emily Johnston、Luka Kalinovcic、Lera
    Kharatyan、Jessica Ko、Markus Kusano、Kathy Nix、Christian Perez、Sara Qu、Marc Rasi、Marcus
    Revaj、Ballie Sandhu、Michael Sloan、Tom Small、Gabriela Surita、Maxim Tabachnyk、**Stephanie
    Tang、**David Tattersall、Sara Toth、Kevin Villela、Sara Wiltberger和Donald Duo Zhao）以及我们极具支持性的领导（Martín
    Abadi、Joelle Barral、Jeff Dean、Madhura Dudhgaonkar、Douglas Eck、Zoubin Ghahramani、Hugo
    Larochelle、Chandu Thekkath和Niranjan Tulpule）。谢谢你们！*'
