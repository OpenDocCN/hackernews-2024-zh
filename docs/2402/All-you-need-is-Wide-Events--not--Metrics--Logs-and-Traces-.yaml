- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 13:24:41'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 13:24:41'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: All you need is Wide Events, not “Metrics, Logs and Traces”
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你所需要的只是 Wide Events，而不是“指标、日志和追踪”
- en: 来源：[https://isburmistrov.substack.com/p/all-you-need-is-wide-events-not-metrics](https://isburmistrov.substack.com/p/all-you-need-is-wide-events-not-metrics)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://isburmistrov.substack.com/p/all-you-need-is-wide-events-not-metrics](https://isburmistrov.substack.com/p/all-you-need-is-wide-events-not-metrics)
- en: This quote from Charity Majors is probably the best summary of the current state
    of observability in the tech industry - a total, mass confusion. Everyone is confused.
    What is a trace? What is a span? Is log line a span? Do I need traces if I have
    logs? Why I need traces if I have great metrics? The list of questions like these
    goes on. Charity - together with other great folks from observability system called
    [Honeycomb](https://www.honeycomb.io/) - have been doing a great job shedding
    light on these questions. Yet, per my own experience it’s still extremely hard
    to explain what does Charity meant by “logs are thrash”, let alone the fact that
    logs and traces are essentially the same things. Why is everyone so confused?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Charity Majors 的这句话可能是当前科技行业可观察性状况的最佳摘要 - 完全是一片混乱。每个人都感到困惑。什么是追踪？什么是跨度？日志行是跨度吗？如果我有日志，我还需要追踪吗？如果我有很好的指标，为什么我还需要追踪？类似这样的问题清单不胜枚举。Charity
    - 与来自名为 [Honeycomb](https://www.honeycomb.io/) 的可观察性系统的其他优秀人士一起 - 一直在努力解答这些问题。然而，根据我的经验，解释
    Charity 所说的“日志是垃圾”意味着仍然非常困难，更不用说日志和追踪本质上是相同的事物。为什么每个人都如此困惑呢？
- en: With the risk of being spicy a little, I’m going to blame Open Telemetry. Yes,
    it’s powering the modern observability stack and yet I blame it for the mass confusion.
    Not because it’s a bad solution - it’s great! But the presentation and the whole
    approach of explaining what Open Telemetry is and what it does makes the observability
    look tricky and complex.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 冒着有点辛辣的风险，我要责怪 Open Telemetry。是的，它正在为现代可观察性堆栈提供动力，但我要责怪它造成了一片混乱。不是因为它是一个糟糕的解决方案
    - 它很棒！但是对于解释 Open Telemetry 是什么以及它的作用的整个方法使得可观察性看起来很棘手和复杂。
- en: 'First, Open Telemetry from the very beginning makes a clear distinctions between
    traces, metrics and logs:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Open Telemetry 从一开始就明确区分了追踪、指标和日志：
- en: OpenTelemetry is a collection of APIs, SDKs, and tools. Use it to instrument,
    generate, collect, and export telemetry data (metrics, logs, and traces) to help
    you analyze your software’s performance and behavior.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: OpenTelemetry 是一组 API、SDK 和工具。使用它来为软件的性能和行为分析提供遥测数据（指标、日志和追踪）。
- en: Then it goes deeper in explaining each of these 3.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它更深入地解释了这三个。
- en: This is screenshot from the part of open telemetry website introducing traces.
    Based on my experience talking to people who work with OpenTelemetry, this presentation
    has indeed become one of the main pictures being associated with observability.
    For some, this IS the observability. And it also sets traces apart from anything
    else. This is clear not a log, is it? This also doesn’t look like a metric, right?
    It’s something *special,* probably a bit *sacred,* and requiring learning investment.
    Per my experience, once people learned about traces, they only think about them
    in the context of this picture and the whole set of terms like spans, root spans,
    nested spans and the rest. OpenTelemetry site has a [glossary](https://opentelemetry.io/docs/concepts/glossary/)
    page with more than 60 terms! This all is insanely complex!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从 open telemetry 网站介绍追踪部分的截图。根据我与使用 OpenTelemetry 的人交谈的经验，这个介绍确实已经成为人们所关联的可观察性的主要图像之一。对一些人来说，这就是可观察性。它还将追踪与其他任何东西区分开来。这显然不是日志，是吗？这也不像指标，对吧？这是
    *特别的，*可能有点 *神圣的，*并需要学习投入。根据我的经验，一旦人们了解了追踪，他们只会在这个图片和一整套诸如 spans、root spans、nested
    spans 等术语的背景下考虑它们。OpenTelemetry 网站有一个[术语表](https://opentelemetry.io/docs/concepts/glossary/)页面，列出了
    60 多个术语！这一切都非常复杂！
- en: But what’s more important - does this focus on “logs, metrics and traces” represent
    the true power of observability? It does cover some scenarios that’s true, but
    when it comes to the distributed systems at scale what’s more important is an
    ability to “dig” into data - “slice and dice” it, build and analyse various views,
    correlate, search for anomalies… And systems that offer all of this do exist.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但更重要的是 - 这个“日志、指标和追踪”的焦点是否代表了可观察性的真正力量？这确实涵盖了一些情景，但当涉及到大规模的分布式系统时，更重要的是能够“挖掘”数据
    - “切片和切块”它，构建和分析各种视图，相关性，搜索异常……而提供所有这些功能的系统确实存在。
- en: When I was working at Meta, I wasn’t aware that I was privileged to be using
    the best observability system ever. This system is called Scuba and it’s the top
    1 thing by a large margin that people miss when they leave Meta.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在 Meta 工作时，我并没有意识到我有幸使用的是最好的可观察性系统。这个系统叫做 Scuba，是离开 Meta 后人们最怀念的头等大事。
- en: 'The basic idea of Scuba is extremely simple and doesn’t require a glossary
    page for people to grasp. It operates with Wide Events. Wide Event is just a collection
    of fields with names and values, pretty much like a json document. If you need
    to record some information - whether it’s the current state of the system, or
    an event caused by an API call, background job or whatever - you can just write
    some Wide Event to Scuba. For instance, if a system serves ads, the natural desire
    would be to record Ad Impressions - the facts that a certain ad has been seen
    by a user. The corresponding Wide Event might be looking like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Scuba 的基本思想非常简单，不需要一个术语表页面供人们理解。它使用 Wide Events 运作。 Wide Event 就像一个 json 文档一样，是一系列带有名称和值的字段集合。如果你需要记录一些信息
    - 无论是系统的当前状态，还是由 API 调用、后台作业或其他原因引起的事件 - 你只需向 Scuba 写入一些 Wide Event。例如，如果一个系统提供广告服务，自然希望记录广告展示
    - 某个广告被用户看到的事实。相应的 Wide Event 可能如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Such events called wide, because it’s encouraged to dump to them all the information
    one can think of. Anything that might be relevant in the context of a certain
    data - just put it there, it might be useful later. This approach is laying the
    groundwork for dealing with *unknown unknowns* - something you can’t think of
    now that may be revealed later during an incident investigation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这类事件被称为宽泛，因为鼓励将所有可能考虑到的信息都倒入其中。在某个特定数据环境中可能相关的任何内容 - 只需将其放在那里，以后可能会有用。这种方法为处理*未知未知*打下了基础
    - 一些你现在无法想到的东西，在事故调查过程中可能会在以后被揭示。
- en: 'Dealing with unknown unknowns can be better demonstrated on an example. Scuba
    has a nice intuitive interface which is easy to explore and play with. It has
    a section where one can pick a metric to look at, as well as sections for filters
    and groupings - and Scuba would draw a nice time series chart. Firs look for Ad
    Impressions dataset would simply draw a chart with impressions count:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 处理未知未知因素可以通过一个例子更好地进行演示。Scuba 有一个很好的直观界面，很容易探索和玩耍。它有一个部分，可以选择要查看的度量标准，以及用于过滤和分组的部分
    - Scuba 会绘制一个漂亮的时间序列图表。对于广告展示数据集的第一个看法只会简单地绘制一个展示计数图表：
- en: If we express what’s exactly is selected here in terms of SQL, then this is
    something like
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们用 SQL 来表达这里确切选择的内容，那么这就像是
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Well, it’s actually not exactly like that. Scuba also has a concept of *native
    sampling.* When a certain event is written to Scuba, it also must write a field
    called **samplingRate** - the rate this particular event is being sampled with.
    Scuba uses this information to properly “upscale” results shown on the charts,
    so there is no need to do this upscaling in the head. This is a really great concept
    because it allows a dynamic sampling - e.g. some type of impressions may be sampled
    more than another, while preserving the “real” values in the UI. So, the actual
    query under the hood is
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，事实上并不完全是这样。Scuba 还有一个*本地抽样*的概念。当某个事件被写入 Scuba 时，它还必须写入一个称为**samplingRate**的字段
    - 表示此特定事件的采样率。Scuba 使用此信息来正确“升级”图表上显示的结果，因此无需在头脑中进行此升级。这是一个非常好的概念，因为它允许动态抽样 -
    例如，某些类型的展示可能比另一些类型的展示更多地进行抽样，同时在 UI 中保留“真实”值。因此，实际查询在幕后是这样的
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that this whole “upscaling” is done transparently by the UI and users don’t
    think about it during querying.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，整个“升级”过程是由 UI 透明地完成的，用户在查询过程中不会考虑到它。
- en: 'And so assume some alert happened and indicated that our precious Ad Impression
    chart is looking weird:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以假设发生了一些警报，表明我们珍贵的广告展示图表看起来很奇怪：
- en: 'The first instinct of everyone who’re using Scuba for investigation is to “slice
    and dice”, i.e. filter or group by, to see if we can learn *something*. We don’t
    know what we’re looking for, but we believe that we’ll find it. So we would group
    by say impression type, or user country, or the placement, until we would find
    something suspicious. Let’s assume it’s CampaignType grouping:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每个使用 Scuba 进行调查的人的第一直觉是“切片和切块”，即按过滤或分组，看看我们是否能学到*什么*。我们不知道我们在找什么，但我们相信我们会找到它。所以我们会按展示类型、用户国家或位置分组，直到我们找到一些可疑的东西。假设是
    CampaignType 分组：
- en: We see that some campaign type called **in_app_purchases** (just in case want
    to note that this type name is completely made-up by me)seems to look differently
    than others. We don’t really know that does it mean - we don’t need to! - to continue
    our digging. Okay, now we can filter these campaigns only, and continue grouping
    by something else we can think of. For instance, User OS makes sense.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到一些被称为**in_app_purchases**的活动类型（只是为了说明这个类型名是我完全编造的）似乎与其他活动类型不同。我们并不真正知道这意味着什么
    - 我们也不需要知道！ - 继续我们的挖掘。好了，现在我们可以仅筛选这些活动，并继续按我们可以想到的其他方式进行分组。例如，用户操作系统是有意义的。
- en: Hmmm, Android seems to be in trouble. iOS is OK, which suggests that the problem
    is on the client side - a broken app version maybe?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，Android 似乎遇到了麻烦。iOS 没问题，这表明问题出在客户端 - 可能是一个损坏的应用程序版本？
- en: Weird. Some are suffering, some others don’t. Check OS Version maybe?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 奇怪。有些遭受了，其他一些没事。检查操作系统版本也许？
- en: Ha! It’s the newest version of the OS, and looks like some of the app versions
    are not doing well on this OS version for this type of campaign. The dedicated
    teams may look deeper now, given this information.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 哈！这是最新版本的操作系统，看起来一些应用程序版本在这个操作系统版本上对这种类型的活动效果不佳。鉴于这些信息，专门的团队现在可以更深入地进行调查。
- en: What happened? Without any knowledge of the system we’ve narrowed down the scope
    of the issue, and identified the teams to take a lead for further investigation.
    Could we know in advance that this weird combination of OS, OS Version, Campaign
    Type and App Version might lead to some issue, to have a dedicated metric prepared?
    Of course no. This is an example of dealing with *unknown unknowns*. We’ve just
    dropped all the relevant context into Wide Events, and used it later when needed.
    Scuba made it simple to do the exploration because it’s fast and has a really
    nice easy-to-use UI. Also note that we have never mentioned anything about cardinality.
    Because it doesn’t matter - any field can be of any cardinality. Scuba works with
    raw events and doesn’t pre-aggregate anything, and so cardinality is not an issue.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？在不知道系统的任何知识的情况下，我们已经缩小了问题的范围，并确定了负责进一步调查的团队。我们能否预先知道这种奇怪的 OS、OS 版本、活动类型和应用版本的组合可能会导致一些问题，以准备好一个专门的指标？当然不能。这是处理*未知未知*的一个例子。我们刚刚将所有相关的上下文都放入了
    Wide Events 中，并在需要时使用了它们。Scuba 使探索变得简单，因为它快速而且具有非常好的易于使用的用户界面。还要注意，我们从未提及过基数的任何内容。因为这不重要
    - 任何字段都可以是任何基数。Scuba 使用原始事件工作，不预先聚合任何内容，因此基数不是问题。
- en: Sometimes UI / Visualisation aspect doesn’t get enough attention, and observability
    systems offer some query language - either a proprietary (bad-bad-bad), or SQL
    (slightly better, but still bad). Such an interface makes it close to impossible
    to conduct similar investigations. One important aspect of Scuba that all the
    fields - function, filter, grouping, etc. - are *explorable.* Meaning that there
    is an easy way to see what kind of values we can pick. When the owners of a certain
    field are not lazy, they even included a detailed description for the given field
    with relevant links etc. This is huge. I have successfully investigated a lot
    of incidents myself, without full understanding of either the whole system, or
    the data available in this dataset. And boy I did learn a lot about the system
    during these investigations, simply via playing around with Scuba! This was amazing.
    This was observability paradise.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Now imagine my level of confusion and disbelief when I left Meta and got to
    know the state of observability systems outside.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Logs? Traces? Metrics? What the hell? Wide Events, anyone? Can I please not
    learn that 60 terms from the Glossary and just … explore stuff?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'It took me quite a while to map my Scuba-based mental model to Open Telemetry
    mental model. I realised that Open Telemetry’s Span is, in fact, the Wide Event.
    Actually, I’m still not quite sure I got it right:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take AdImpression example, this impression is not really an operation,
    it’s just some fact we want to record… To be fair, there is some notion of Event
    in Open Telemetry:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: But if we follow the links to dig deeper, we again find out that Event is in
    fact one of Traces, Metrics or Logs 🤷
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'But anyway, Span is the closest concept to Wide Event. The thing is - it’s
    extremely hard to advocate for this mental model when the one suggested by Open
    Telemetry is already learned. Which is really upsetting, because Traces, Metrics
    and Logs are all just special cases of Wide Events really:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '**Traces and Spans:** These are just wide events having **SpanId, TraceId and
    ParentSpanId** fields. So we can filter all spans with a given TraceId, topologically
    sort them using SpanId → ParentSpanId relation, and draw that distributed tracing
    view everyone loves.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logs:** Honestly, I’m really confused what Open Telemetry means by Logs.
    Looks like [a lot of things](https://opentelemetry.io/docs/specs/otel/glossary/#logs),
    and one of them is Structured Log which is pretty much the Wide Event. Great!
    The problem, however, that “a log” is quite a defined concept, and usually people
    mean by it is what is produced by those `logger.info(…)` calls. Anyway, whatever
    is meant, logs can be easily mapped to wide events, of course. In the simplest
    case we can just get the log message, put it to the “log_message” field, add a
    bunch of metadata, and be happy. In a more complex case, we can try to automatically
    extract a template from a log message via removing tokens that looks like IDs,
    and get a hash of this template. This can allow to quickly get the most frequent
    error, for instance, via grouping by this hash. Meta has such a system, and it’s
    pretty cool.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metrics:** Metrics can be easily mapped, too. We just need to emit a Wide
    Event once per some interval containing the state of the system (system metrics
    like cpu, various counters,…). Prometheus, by the way, does exactly that with
    the scraping approach - takes a snapshot of the system once in a while. Unlike
    with prometheus, however, with Wide Events approach we don’t need to worry about
    cardinality.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But Wide Events can offer much much more than these “3 pillars”. The aforementioned
    debugging session is already a case which is not really covered by Traces, Logs
    and Metrics - not naturally, at least. There could be other use cases, too - for
    instance, continuous profiling data can be easily represented as a Wide Event,
    and queried to build a [Flame Graph](https://www.brendangregg.com/flamegraphs.html).
    No need to have a separate system for this - a single system working with Wide
    Events can do it all. Imagine the possibilities for cross-correlation & root cause
    analysis when everything in one place, stored together. Especially now, in the
    era of raise of AI-based tools that are pretty good in finding correlations in
    data.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但是 Wide Events 可以提供比这些“三大支柱”多得多的功能。前述的调试会话已经是一个实际上并不真正由 Traces、Logs 和 Metrics
    所覆盖的案例 - 至少不是自然地。还可能有其他用例 - 例如，连续的性能分析数据可以轻松地表示为 Wide Event，并查询以构建[火焰图](https://www.brendangregg.com/flamegraphs.html)。不需要单独的系统来完成这项工作
    - 一个处理 Wide Events 的单一系统就可以做到。想象一下当所有东西都在一个地方存储在一起时，进行交叉相关和根本原因分析的可能性。特别是在现在，AI
    工具兴起的时代，这些工具在找到数据相关性方面非常出色。
- en: I don’t know… I just wanted to express my frustration with the level of confusion
    and this focus on “3 pillars”.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道... 我只是想表达我对混乱程度以及对“三大支柱”关注的失望。
- en: I just wish that observability vendors took a stand against confusion, and offered
    a simple and natural way to interact with the system. [Honeycomb](https://www.honeycomb.io/)
    seems is [doing that](https://x.com/mipsytipsy/status/1738048200630792245?s=20),
    as well as some other systems like [Axiom](https://axiom.co/). This is great!
    And hope the others will follow.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我只希望可观性供应商能够对混乱采取一种立场，并提供一种简单自然的与系统交互的方式。[Honeycomb](https://www.honeycomb.io/)似乎正在[这样做](https://x.com/mipsytipsy/status/1738048200630792245?s=20)，还有一些其他系统像[Axiom](https://axiom.co/)。这太棒了！希望其他人也会效仿。
