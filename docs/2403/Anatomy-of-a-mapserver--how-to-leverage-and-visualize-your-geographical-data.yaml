- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:04:05'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Anatomy of a mapserver: how to leverage and visualize your geographical data'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://www.go-inicio.com/blog/anatomy-of-a-mapserver-how-to-leverage-and-visualize-your-geographical-data](https://www.go-inicio.com/blog/anatomy-of-a-mapserver-how-to-leverage-and-visualize-your-geographical-data)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Anatomy of a mapserver: how to leverage and visualize your geographical data**'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At Inicio we built Eywa, an algorithm that can find the best solar power plant
    location, using billions of geographical data points. Sometimes, it can be hard
    to make sense of all this data: forests, wet areas, cadastral parcels, etc.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: To help our teams get a sense of what this data actually **looks** like, we
    set up a tool to allow visualization in multiple clients. It‚Äôs a server that builds
    maps, it is built on a library called MapServer.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we use this server everywhere: from QA to visualize that our algorithm
    does what it‚Äôs supposed to, with the right data, to the business development teams
    who use it to select from the best location that the algorithm has found.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: This blog post will guide you through the things I wish I had known when I started
    setting up this piece of software at Inicio.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: 'The types of soil in Brittany, each color represents a type of soil: Minerals,
    Limestone, Wet, etc.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: '**Why do you need a MapServer?**'
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Visualize**: Geographical data is inherently visual. We all have some affinity
    with reading maps and visualizing data in space. You can do as many transformations
    as you want on your spatial data, it will be hard to extract useful insights if
    you can never visualize it.'
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Showcase**: Publish and showcase your insights to the world.'
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Share**: Integrate your data to many GIS tools and web map visualizations.
    You have created an awesome data visualization and want to share it to the world?'
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be enough to setup an interactive map visualization on your website.**‚Äç**
  id: totrans-split-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Build:¬†**Create a robust and always-up source to fit your business needs.'
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What does it do?**'
  id: totrans-split-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A mapping server connect to various geographical data sources. It can perform
    transformations, filtering, combinations, and styling. Then, it makes the data
    available through a server.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: This may sound relatively simple, but geographical data is challenging. You
    need to take care of projections, indexing, and serving very complex geometries
    efficiently.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: '**Why MapServer vs. Geoserver**'
  id: totrans-split-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the world of mapping servers there are two main alternatives: MapServer
    and Geoserver.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: At Inicio, we quickly realized we would need an extensible, flexible and fast
    mapping server to serve our large and ever growing amount of geographical data
    that we both ingest and produce.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: 'MapServer is fast: it is built in C and makes heavy use of both the most established
    and fastest libraries for geometrical data manipulation: GDAL and PROJ.'
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MapServer is lightweight
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MapServer is configurable and scriptable
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MapServer is open-source, and has been actively maintained by a large community
    for almost 30 years, and funded by large organizations such as NASA! (And when
    I say actively, I mean it: the latest release to date is from April 2023)'
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Anatomy of a Mapserver**'
  id: totrans-split-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The components of a MapServer are:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: '**What is a mapfile exactly?**'
  id: totrans-split-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A mapfile is simply a config file written in MapServer‚Äôs configuration language.
    It defines everything the server needs to know to draw your map. Objects are defined
    with an opening tag, and .
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: Here is a minimal example of a mapfile. The indents are optional, but useful
    to keep the whole structure clear.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Here‚Äôs an example file with comments:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: üí° Choosing to make a custom config language for the MapServer configuration
    files is an surprising choice.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: It probably made sense when this library was created, but it doesn‚Äôt seem to
    add any advantage over something like JSON or TOML, which are well supported nowadays
    and come with a lot of tooling.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: At Inicio, we actually use [Pydantic](https://docs.pydantic.dev/latest/) models
    that mirror the structure of these config files, and serialized them to the mapfile
    format! This allows us to generate and manipulate these config files as Python
    object, without worrying about the uncommon syntax. ‚ÄúConfiguration-as-code‚Äù
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: ‚Äç**‚Äç**
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: '**What kind of data sources can I use?**'
  id: totrans-split-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can serve a lot of different type of geographical data from MapServer. These
    data sources are the backbone of your server.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: Data can be read from a file in one of the many supported formats (e.g. Shapefile,
    GML, GeoJSON, KML, [and many more](https://mapserver.org/input/vector/index.html#vector)).
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: Another option that we use a lot at Inicio is the ability to read data directly
    from a database. We run a Postgis-enabled database to store most of our geographical
    data, and our MapServer directly fetches what it needs from it.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Running a query against a database in a mapfile looks something like this:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: The required fields are one unique `id` and a `geometry` (or postigs `geography`).
    Here we export extra fields that will be used to display information within the
    layer, such as coloring the area depending on the type of vegetal.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: When serving a lot of data, using spatial indexes is crucial, and the server
    knows how to take advantage of them when displaying data within a bounding box.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: '**What is a layer? How can I make one?**'
  id: totrans-split-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Layers are the underlying structure of the data you will make available with
    the server.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: The layer below is an example of serving forest data directly from the database
    to a WMS endpoint.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: At Inicio, we use standard protocols for serving our data, such as WMS. It is
    supported by most GIS software and libraries, and allows serving a lot of data
    efficiently.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: ‚Äç
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: üí° **What is** [**WMS**](https://en.wikipedia.org/wiki/Web_Map_Service)**?**
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: The Web Map Service is a standard for serving geographical data. It is based
    on XML, and usually serves data in the form of images (PNG, JPEG, etc.).
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: This format makes it simple to display complex spatial data in a visual way.
    It can serve vector and raster data within a bounding box by rendering said data
    to an image and sending it back.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Let‚Äôs go step by step, decoding the layer definition above:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: '**What metadata should I add for a WMS server layer?**'
  id: totrans-split-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first part contains a bunch of metadata for your layer. There are a some
    required metadata for serving data through WMS such as `"wms_include_items"` which
    specifies if all the input data should be included in the layer.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: '**Definition**'
  id: totrans-split-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This part defines the source of the data, how to access it, if it should be
    displayed, the extent it covers and the projection it should be available in.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: '**How do you specifiy the style?**'
  id: totrans-split-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The last part is about styling the layer. This means defining the color, width
    opacity and all the other details of the layer‚Äôs object.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: The neat part here is that the color can be returned as part of the SQL query.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: '**How can I run it? With a CGI-capable server**'
  id: totrans-split-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We now talk about the front-side of our server.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: This is maybe another marker of MapServer‚Äôs respectable age, but the recommended
    way of running it is through a CGI-capable server, which usually means an Apache
    HTTP server (which is getting close to 30 years old!).
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: This is a battle tested server software, that is currently running incredibly
    many servers in small and large structures. It is also super customizable, making
    it an overall reliable and powerful software. However, this comes at the cost
    of simplicity, and it is easy to get lost in the customization options which basically
    let you do anything (including dangerous stuff ‚ò†Ô∏è).
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: For our production server, we chose to get an Apache server running with a good
    config inside a well protected part of our infra. Then, another front-facing reverse-proxy
    handles all the heavy-lifting of HTTPS, authentication, serving other services
    as well as some static files.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: '**Where to go next?**'
  id: totrans-split-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have a MapServer serving WMS up and running, and you are getting some
    usage, you might want to consider caching the tiles served to make access quicker
    (at the cost of storage and complexity). At Inicio, we use [mapproxy](https://mapproxy.org/)
    to cache our WMS tiles. [MapCache](https://mapserver.org/mapcache/index.html),
    from the same developers as MapServer, could also be worth a try.
  id: totrans-split-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripting the creation of layers. Once you start serving several data sources,
    writing Mapfiles may start to feel repetitive, and it gets very tempting to script
    their generation. You could cook up your own solution like we did, or use an external
    library such as [MapScript](https://mapserver.org/mapscript/index.html).
  id: totrans-split-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a lot of potential optimizations and tuning to be done on a MapServer,
    depending on your use case. The [MapServer doc](https://mapserver.org/optimization/index.html)
    has some great tips to get you started.
  id: totrans-split-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‚Äç
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
