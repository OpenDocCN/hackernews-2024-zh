- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 12:46:35'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 12:46:35
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: A capable PWA • charlesrocket
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一款强大的PWA • charlesrocket
- en: 来源：[https://failsafe.monster/posts/capable-pwa/](https://failsafe.monster/posts/capable-pwa/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://failsafe.monster/posts/capable-pwa/](https://failsafe.monster/posts/capable-pwa/)
- en: 28 Mar 2024
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年3月28日
- en: Converting to a Progressive Web App
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换为渐进式Web应用程序
- en: 6 minutes reading time
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读时间6分钟
- en: Updated 02 Apr 2024
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 更新于 2024年4月2日
- en: '[#](#Problems)Problems'
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[#](#问题)问题'
- en: I am not a fan of **JavaScript**. But I already started with some [Service Worker](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers)
    examples from **Mozilla** some time ago, and [PWA](https://wikipedia.org/wiki/Progressive_web_app)s
    have proven to be very effective. So, let's go.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我不是**JavaScript**的粉丝。但是我之前已经开始使用**Mozilla**提供的一些[服务工作线程](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers)示例，而[PWA](https://wikipedia.org/wiki/Progressive_web_app)已被证明非常有效。所以，让我们开始吧。
- en: '[#](#Static_deployments)Static deployments'
  id: totrans-split-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[#](#静态部署)静态部署'
- en: My first implementation was pulling cache lists from a dedicated page generated
    by the [Zola](https://github.com/getzola/zola) template using a macro that pulls
    assets from taxonomies, pages, etc. But besides the need for filtering and discarding
    a lot of data, having a dedicated page for this is just ugly. That was the only
    way to make it work with `fetch()`. And I had to add an extra `zola build` as
    well.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我的第一个实现是从由[Zola](https://github.com/getzola/zola)模板生成的专用页面中提取缓存列表，该模板使用宏从分类、页面等中提取资产。但是除了需要过滤和丢弃大量数据之外，专门为此设置一个页面只是丑陋的。这是使用`fetch()`使其工作的唯一方式。而且我还得额外添加一个`zola
    build`。
- en: '**Zola** does not yet have the capability to populate non-HTML files, and I
    could not justify adding extra steps with **NPM**/etc. just for a single service
    worker event to function. So a new approach was needed.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Zola**目前尚无法填充非HTML文件，并且我无法为了单个服务工作线程事件添加额外步骤而辩解添加**NPM**/等等。因此，需要一种新的方法。'
- en: '[#](#External_libraries)External libraries'
  id: totrans-split-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[#](#外部库)外部库'
- en: '[Workbox](https://developer.chrome.com/docs/workbox) or [sw-tools](https://github.com/veiss-com/sw-tools)
    libraries would resolve probably everything, but it''s too easy. Since I would
    have to maintain **JavaScript** anyway, let''s get on with it.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[Workbox](https://developer.chrome.com/docs/workbox)或[sw-tools](https://github.com/veiss-com/sw-tools)库可能会解决所有问题，但这太简单了。既然我无论如何都必须维护**JavaScript**，那就开始吧。'
- en: '[#](#Portability)Portability'
  id: totrans-split-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[#](#可移植性)可移植性'
- en: '*Huh*'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*哎呀*'
- en: '[#](#Service_Worker)Service Worker'
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[#](#服务工作线程)服务工作线程'
- en: The solution is a **cache-first** service worker strategy with a fallback to
    offline mode. This feels like the most efficient approach. And it requires no
    external dependencies or *extra steps*. I could play with network requests, but
    `timeout` sounds too slow already, so maybe next time.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是**缓存优先**的服务工作线程策略，并回退到离线模式。这感觉是最有效的方法。它不需要外部依赖或*额外步骤*。我可以尝试处理网络请求，但`timeout`听起来已经太慢了，也许下次吧。
- en: '[#](#Strategy)Strategy'
  id: totrans-split-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[#](#策略)策略'
- en: I decided to remove the hardcoded/dynamic cache list and install a fallback
    page instead.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定移除硬编码/动态缓存列表，并安装一个备用页面。
- en: '[PRE0]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The rest is cached "as you go"—the service worker filters useful requests and
    writes them into the cache. This way, I save critical resources during the first
    page navigation, and there is no funny business. If the requests fail (no network),
    an **offline** page is served.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 其余内容是“按需缓存”——服务工作线程过滤有用的请求并将其写入缓存。这样，在第一次页面导航期间保存关键资源，不会出现奇怪的情况。如果请求失败（无网络），将提供一个**离线**页面。
- en: '[PRE1]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The site's static assets are hashed by my **Zola** [theme](https://github.com/charlesrocket/halve-z),
    so the strategy fits perfectly.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 站点的静态资产由我的**Zola** [主题](https://github.com/charlesrocket/halve-z)进行哈希处理，因此这种策略非常合适。
- en: '[#](#Cache)Cache'
  id: totrans-split-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[#](#缓存)缓存'
- en: Housekeeping is done via `cacheName` - all previous (old) cache records are
    purged during the service worker's activation, maintaining a clean browser environment.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`cacheName`进行清理 - 所有先前（旧）的缓存记录在服务工作线程激活期间被清除，保持浏览器环境的清洁。
- en: '[PRE2]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Although, I want to find a nice way to "expire" cache records, relying on a
    hardcoded cache name only might be an issue.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我希望找到一个好方法来“过期”缓存记录，仅依赖硬编码的缓存名称可能会成为一个问题。
- en: '[#](#Revalidation)Revalidation'
  id: totrans-split-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[#](#重新验证)重新验证'
- en: 'To handle "expired" resources, I switched the `fetch` event to the **stale-while-revalidate**
    strategy:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为处理“过期”资源，我将`fetch`事件切换到**陈旧但仍重新验证**策略：
- en: '[PRE3]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[#](#Precache)Precache'
  id: totrans-split-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[#](#预缓存)预缓存'
- en: After settling on the cache event, I wanted to properly support the **offline
    mode**. The standard approach for this is to use the background sync API. A quick
    examination suggests this is a picky solution, and support is very limited. That
    alone is enough to look for a workaround. I started from the ground.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定缓存事件后，我想要正确支持**离线模式**。这种标准方法是使用后台同步API。快速检查表明，这是一个挑剔的解决方案，并且支持非常有限。光是这一点就足以寻找解决方法了。我从头开始。
- en: First, I needed to generate the cache list, so I took my macro and applied its
    logic directly in the HTML `&LThead>` to use the output with a `data-cache` tag
    attribute while linking the service worker's loader script.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我需要生成缓存列表，因此我直接在HTML `&LThead>`中应用了我的宏并直接应用其逻辑，以便在链接服务工作者的加载器脚本时使用具有`data-cache`标签属性的输出。
- en: 'Second, I needed a way to get the cache list to "sync" with the service worker.
    The search got me the `postMessage()` service worker [method](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/postMessage)
    that "sends a message to the worker". Bingo. To catch the message on the other
    side, one needs to implement the `message` event:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，我需要一种方法来让缓存列表与服务工作者“同步”。搜索给我带来了`postMessage()`服务工作者[方法](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/postMessage)，它“向工作者发送消息”。太棒了。为了在另一侧捕获消息，需要实现`message`事件：
- en: '[PRE4]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, what stops me from repeating what I have been doing during the service
    worker installation? I sent a message after the service worker's activation, checked
    the request type, and started to fill the cache using URLs from the **message**.
    Worked.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，什么阻止我在服务工作者安装期间重复我一直在做的事情？我在服务工作者激活后发送了一条消息，检查了请求类型，并开始使用**消息**中的URL填充缓存。奏效了。
- en: '[PRE5]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The cache is full, all assets are included, and I had no issues mixing absolute/relative
    links (though maybe it''s not a good "feature" after all). The hardcoded cache
    list with critical assets got reintroduced, along with the offline page, all to
    be cached during the installation. I also started requesting the precache only
    after the installation, to avoid redundant fetches:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存已满，所有资源都包括在内，我在绝对/相对链接之间没有问题（尽管这可能并非一个好的“特性”）。硬编码的缓存列表与关键资产重新引入，以及离线页面，所有这些在安装期间被缓存。我还开始在安装后仅请求预缓存，以避免冗余获取：
- en: '[PRE6]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This setup delivers a fully offline-ready site. The service worker deploys critical
    files during the installation, then precaches everything else.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个设置提供了一个完全支持离线的网站。服务工作者在安装过程中部署关键文件，然后预缓存其他所有内容。
- en: '[#](#Conclusion)Conclusion'
  id: totrans-split-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[#](#Conclusion)结论'
- en: It looks like I'll do anything just to avoid touching CSS in **Halve-Z**. It
    was a nice exercise, though. I built a simple and capable **PWA** without jeopardizing
    the workflow or user experience. All code is available in theme's pull requests
    [#22](https://github.com/charlesrocket/halve-z/pull/22), [#23](https://github.com/charlesrocket/halve-z/pull/23),
    and [#24](https://github.com/charlesrocket/halve-z/pull/24).
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我只是为了避免接触**Halve-Z**中的CSS才去做任何事情。尽管如此，这是一个很好的练习。我建立了一个简单而功能强大的**PWA**，而不会危及工作流程或用户体验。所有代码都可以在主题的拉取请求[#22](https://github.com/charlesrocket/halve-z/pull/22)、[#23](https://github.com/charlesrocket/halve-z/pull/23)和[#24](https://github.com/charlesrocket/halve-z/pull/24)中找到。
