- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:46:35'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: A capable PWA • charlesrocket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://failsafe.monster/posts/capable-pwa/](https://failsafe.monster/posts/capable-pwa/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 28 Mar 2024
  prefs: []
  type: TYPE_NORMAL
- en: Converting to a Progressive Web App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 6 minutes reading time
  prefs: []
  type: TYPE_NORMAL
- en: Updated 02 Apr 2024
  prefs: []
  type: TYPE_NORMAL
- en: '[#](#Problems)Problems'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I am not a fan of **JavaScript**. But I already started with some [Service Worker](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers)
    examples from **Mozilla** some time ago, and [PWA](https://wikipedia.org/wiki/Progressive_web_app)s
    have proven to be very effective. So, let's go.
  prefs: []
  type: TYPE_NORMAL
- en: '[#](#Static_deployments)Static deployments'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: My first implementation was pulling cache lists from a dedicated page generated
    by the [Zola](https://github.com/getzola/zola) template using a macro that pulls
    assets from taxonomies, pages, etc. But besides the need for filtering and discarding
    a lot of data, having a dedicated page for this is just ugly. That was the only
    way to make it work with `fetch()`. And I had to add an extra `zola build` as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: '**Zola** does not yet have the capability to populate non-HTML files, and I
    could not justify adding extra steps with **NPM**/etc. just for a single service
    worker event to function. So a new approach was needed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[#](#External_libraries)External libraries'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Workbox](https://developer.chrome.com/docs/workbox) or [sw-tools](https://github.com/veiss-com/sw-tools)
    libraries would resolve probably everything, but it''s too easy. Since I would
    have to maintain **JavaScript** anyway, let''s get on with it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[#](#Portability)Portability'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Huh*'
  prefs: []
  type: TYPE_NORMAL
- en: '[#](#Service_Worker)Service Worker'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The solution is a **cache-first** service worker strategy with a fallback to
    offline mode. This feels like the most efficient approach. And it requires no
    external dependencies or *extra steps*. I could play with network requests, but
    `timeout` sounds too slow already, so maybe next time.
  prefs: []
  type: TYPE_NORMAL
- en: '[#](#Strategy)Strategy'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I decided to remove the hardcoded/dynamic cache list and install a fallback
    page instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The rest is cached "as you go"—the service worker filters useful requests and
    writes them into the cache. This way, I save critical resources during the first
    page navigation, and there is no funny business. If the requests fail (no network),
    an **offline** page is served.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The site's static assets are hashed by my **Zola** [theme](https://github.com/charlesrocket/halve-z),
    so the strategy fits perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: '[#](#Cache)Cache'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Housekeeping is done via `cacheName` - all previous (old) cache records are
    purged during the service worker's activation, maintaining a clean browser environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Although, I want to find a nice way to "expire" cache records, relying on a
    hardcoded cache name only might be an issue.
  prefs: []
  type: TYPE_NORMAL
- en: '[#](#Revalidation)Revalidation'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To handle "expired" resources, I switched the `fetch` event to the **stale-while-revalidate**
    strategy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[#](#Precache)Precache'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After settling on the cache event, I wanted to properly support the **offline
    mode**. The standard approach for this is to use the background sync API. A quick
    examination suggests this is a picky solution, and support is very limited. That
    alone is enough to look for a workaround. I started from the ground.
  prefs: []
  type: TYPE_NORMAL
- en: First, I needed to generate the cache list, so I took my macro and applied its
    logic directly in the HTML `&LThead>` to use the output with a `data-cache` tag
    attribute while linking the service worker's loader script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, I needed a way to get the cache list to "sync" with the service worker.
    The search got me the `postMessage()` service worker [method](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/postMessage)
    that "sends a message to the worker". Bingo. To catch the message on the other
    side, one needs to implement the `message` event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, what stops me from repeating what I have been doing during the service
    worker installation? I sent a message after the service worker's activation, checked
    the request type, and started to fill the cache using URLs from the **message**.
    Worked.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The cache is full, all assets are included, and I had no issues mixing absolute/relative
    links (though maybe it''s not a good "feature" after all). The hardcoded cache
    list with critical assets got reintroduced, along with the offline page, all to
    be cached during the installation. I also started requesting the precache only
    after the installation, to avoid redundant fetches:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This setup delivers a fully offline-ready site. The service worker deploys critical
    files during the installation, then precaches everything else.
  prefs: []
  type: TYPE_NORMAL
- en: '[#](#Conclusion)Conclusion'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It looks like I'll do anything just to avoid touching CSS in **Halve-Z**. It
    was a nice exercise, though. I built a simple and capable **PWA** without jeopardizing
    the workflow or user experience. All code is available in theme's pull requests
    [#22](https://github.com/charlesrocket/halve-z/pull/22), [#23](https://github.com/charlesrocket/halve-z/pull/23),
    and [#24](https://github.com/charlesrocket/halve-z/pull/24).
  prefs: []
  type: TYPE_NORMAL
