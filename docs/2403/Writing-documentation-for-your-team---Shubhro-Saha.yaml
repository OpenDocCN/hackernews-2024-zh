- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:51:11'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Writing documentation for your team | Shubhro Saha
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.shubhro.com/2020/01/06/writing-documentation-team/](https://www.shubhro.com/2020/01/06/writing-documentation-team/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Writing documentation for your team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most teams reach an inflection point where good documentation is essential to
    its productivity. Still, it’s hard to write documentation that is relevant, accessible,
    and ages well over time.
  prefs: []
  type: TYPE_NORMAL
- en: Having seen several teams struggle or succeed with writing documentation, here
    are a few behaviors that I found make a difference.
  prefs: []
  type: TYPE_NORMAL
- en: Document the right things
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be selective about what you document and what you don’t.
  prefs: []
  type: TYPE_NORMAL
- en: When teams get in the spirit of writing documentation, it’s tempting to document
    *everything*. Doing so, however, leads to noise that is a burden to maintain over
    time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some litmus tests for whether something is worth documenting:'
  prefs: []
  type: TYPE_NORMAL
- en: What common questions do you spend a lot of your time answering?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What information is poorly understood by your team?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What information is necessary for people to make informed decisions?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be picky. Be explicit about why something is worth documenting. Documentation
    isn’t free; you bear a one-time cost for writing it and a recurring cost for maintaining
    it forever.
  prefs: []
  type: TYPE_NORMAL
- en: Understand the audience
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Understand the reader you are writing documentation for.
  prefs: []
  type: TYPE_NORMAL
- en: What does the reader bring to the table? What context do they have that equips
    them to understand the content?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why is the reader reading your documentation? What problems are they trying
    to solve?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify the target audience at the beginning of your documentation so readers
    can confirm reading it is worth their time. Call out what knowledge the documentation
    assumes the reader has and share links to introductory resources.
  prefs: []
  type: TYPE_NORMAL
- en: When introducing new terms, emphasize them in bold so it’s easy to find their
    definitions. A glossary is a good complement to this.
  prefs: []
  type: TYPE_NORMAL
- en: Bias towards simple over clever. No one understands the information like you
    do. When writing the documentation, you should feel like you’re “dumbing it down”.
  prefs: []
  type: TYPE_NORMAL
- en: Layer your communication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Structure your documentation to accomodate the different levels of investment
    with which readers will approach it.
  prefs: []
  type: TYPE_NORMAL
- en: A few readers will read your documentation from beginning to end. Most readers
    will skim the headings and dive deeper into only the sections that interest them.
  prefs: []
  type: TYPE_NORMAL
- en: To accomodate this range, use headings and subheadings liberally. Add a table
    of contents to orient the reader. Hyperlink sections of the document to each other
    whenever possible. Keep paragraphs short; avoid “walls of text”.
  prefs: []
  type: TYPE_NORMAL
- en: Layering communication enables readers to start shallow and go deep into parts
    when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the future
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Implement practices that help your documentation age well over time.
  prefs: []
  type: TYPE_NORMAL
- en: Code, systems, and processes change quickly. Maintenance of documentation is
    essential to keep it fresh, and there are things you can do as the original author
    to grease the wheels for future maintainers.
  prefs: []
  type: TYPE_NORMAL
- en: Be concise. Don’t repeat yourself. Maintainers should have to update the same
    information in as few places as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Explain *why* things are the way they are. This will help future readers decide
    for themselves what is still true instead of trusting your bygone context.
  prefs: []
  type: TYPE_NORMAL
- en: Link to “sources of truth” liberally. When quoting a metric, link to the query
    that generated it. When presenting an org chart, link to the original illustration
    so that maintainers can update the documentation after a re-org.
  prefs: []
  type: TYPE_NORMAL
- en: Signpost your documentation with time markers. Use phrases like “As of April
    2018” to caveat information you anticipate going out-of-date. If something is
    subject to change, call it out.
  prefs: []
  type: TYPE_NORMAL
- en: Encourage a culture of collective ownership over all documentation on the team.
    This way, the burden of maintenance is distributed over more people.
  prefs: []
  type: TYPE_NORMAL
- en: Host “documentation sprints” to dedicate time for your team to write and maintain
    documentation. This has the second-order effect of making the team feel like they
    own the quality of it.
  prefs: []
  type: TYPE_NORMAL
- en: Recognize documentation contributions whenever possible, especially during performance
    reviews. Good documentation contributes to project impact when it levels up the
    productivity of the team.
  prefs: []
  type: TYPE_NORMAL
- en: Encourage readers to leave the documentation better than how they found it.
  prefs: []
  type: TYPE_NORMAL
- en: January 2020
  prefs: []
  type: TYPE_NORMAL
