["```\nlet s1 = String::from(\"hello\");\nlet s2 = s1;\n\nprintln!(\"{}, world!\", s1); \n```", "```\nvoid\nfoo()\n{\n        int *p = malloc(1);\n        free(p);\n        free(p);\n} \n```", "```\nvoid\nbar(int *p);\n\nvoid\nfoo()\n{\n        int *p = malloc(1);\n        bar(p);\n        free(p);\n} \n```", "```\nvoid\nbaz(int *p);\n\nvoid\nbar(int *p)\n{\n        baz(p);\n} \n```", "```\nvoid\nbar(int *p);\n\nvoid\nfoo()\n{\n        int *p = malloc(1);\n        bar(p);\n        free(p);\n} \n```", "```\nvoid\nbar(int *p) ~ [ free(p); ] /* i.e., bar has the side effect of freeing p */ \n```", "```\nvoid\nfoo()\n{\n        void *p = malloc(1);\n        free(p);\n} \n```", "```\nvoid *\nfoo() ~ [ return malloc(1); ] /* i.e. returns memory that must be freed */\n{\n        void *p = malloc(1);\n        return p;\n} \n```", "```\nvoid\nfoo()\n{\n        void *p = malloc(1);\n        /* leak */\n} \n```", "```\nvoid *\nfoo() ~ [ return malloc(1); ] /* annotation is inconsistent with the body */\n{\n        void *p = malloc(1);\n        free(p);\n        return p;\n} \n```", "```\nvoid *\nfoo() ~ [ return malloc(1); ]\n{\n        return malloc(1);\n}\n\nvoid\nbar()\n{\n        foo(); /* leak because foo calls malloc */\n}\n\nvoid\nbaz()\n{\n        free(foo()); /* ok */\n}\n\nvoid *\nqux() ~ [ return foo(); ] /* i.e. returns what foo returns */\n{\n        return foo();\n}\n\nvoid *\nquux() ~ [ return malloc(1); ] /* transitivity: calls foo, which calls malloc */\n{\n        return foo();\n}\n\nvoid *\ncorge() ~ [ return foo(); ] /* transitivity: calls malloc, which foo calls */\n{\n        return malloc(1);\n} \n```", "```\nvoid\nfoo()\n{\n        int i;\n        printf(\"%d\", i);\n} \n```", "```\nvoid\nfoo()\n{\n        int i = 0;\n        printf(\"%d\", i);\n}\n\nvoid\nbar()\n{\n        int i;\n        int *p = &i;\n        *p = 5;\n        printf(\"%d\", i);\n} \n```", "```\nvoid\ninit(int *p, int val) ~ [ *p = val; ] /* i.e. this assignment is a side effect */\n{\n        *p = val;\n}\n\nvoid\nfoo()\n{\n        int i;\n        init(&i, 20);\n        printf(\"%d\", i);\n} \n```", "```\nvoid\nrealinit(int *p, int val) ~ [ *p = val; ]\n{\n        *p = val;\n}\n\nvoid\ninit(int *p, int val) ~ [ *p = val; ]\n{\n        realinit(p, val);\n}\n\nvoid\nfoo()\n{\n        int i;\n        init(&i, 20);\n        printf(\"%d\", i);\n} \n```", "```\nvoid\ninit(int *p, int val) ~ [\n        setup: p = .clump(sizeof(int));\n        *p = val; \n]{\n        *p = val;\n} \n```", "```\nvoid\nfoo()\n{\n        init(NULL, 10);\n}\n\nvoid\nbar()\n{\n        int *p;\n        init(p, 20);\n}\n\nvoid\nbaz()\n{\n        int *p;\n\n        p = malloc(1);\n        free(p);\n        init(p);\n} \n```"]