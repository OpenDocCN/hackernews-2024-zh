- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:53:30'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:53:30
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'The Myers diff algorithm: part 1 – The If Works'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Myers 差异算法：第一部分 – The If Works
- en: 来源：[https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/](https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/](https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/)
- en: 'If you enjoy this article, I have published a book explaining the internals
    of Git through implementation: [Building Git](https://shop.jcoglan.com/building-git/).'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢本文，我还出版了一本书，通过实现解释Git的内部：[Building Git](https://shop.jcoglan.com/building-git/)。
- en: —
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: —
- en: As a programmer, you probably use a version control system such as [Git](https://git-scm.com/),
    and spend an awful lot of your time looking at diffs. You use them to check over
    your uncommitted work in progress, to look at what changed in a single commit,
    to compare two branches before performing a merge, and so on. Diffs are the language
    through which you understand how things have changed in your software.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，您可能使用像[Git](https://git-scm.com/)这样的版本控制系统，并且大部分时间都在查看差异。您用它们来检查未提交的工作进展，查看单个提交中发生了什么变化，比较两个分支在执行合并之前的情况，等等。差异是您理解软件中事物如何变化的语言。
- en: But as well as being read by people, diffs are used by your version control
    system to automate changes. You can email a diff to someone and they can use the
    `patch` or `git apply` commands to merge it into their working copy. `git merge`
    has to reconcile and merge two or more change histories to produce a single tree,
    often reconciling changes within the same file. `git add --patch` lets you select
    individual changes from a working copy file rather than adding the whole file
    to the index, and that involves both you the user reading the diffs, and git selectively
    applying them to the indexed version of a file. And some version control systems
    use the differences between versions as their primary way to store the project
    history, rather than storing a snapshot of all the code for each commit.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但除了供人阅读外，差异还被您的版本控制系统用于自动化更改。您可以将差异通过电子邮件发送给某人，他们可以使用`patch`或`git apply`命令将其合并到其工作副本中。`git
    merge`必须协调和合并两个或多个更改历史记录，以生成单个树，通常在同一文件中协调更改。`git add --patch`允许您从工作副本文件中选择单个更改，而不是将整个文件添加到索引中，这既涉及到您阅读差异，也涉及git选择性地将它们应用到文件的索引版本中。某些版本控制系统使用版本之间的差异作为存储项目历史记录的主要方式，而不是存储每次提交的所有代码的快照。
- en: So diffs are central to version control, but you might not have thought much
    about how they’re generated. Often when you read a diff, it seems obvious to you
    which things should be marked as changes. You have an intuitive mental model of
    what it means to insert a new function into a file, or to delete a redundant one,
    or to rewrite a section. However, there’s an awful lot more to diffing than meets
    the eye, and there are many ways to do it that produce different results.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，差异对于版本控制至关重要，但您可能没有考虑它们是如何生成的。通常在阅读差异时，您显然知道应该标记哪些内容为更改。您对将新功能插入文件，删除多余功能或重写部分的直觉心理模型可能已经形成。然而，差异比肉眼看到的要复杂得多，有许多不同的方法可以产生不同的结果。
- en: Think for a moment about how you’d calculate a diff, and how you’d write a function
    to do it. You might have noticed that diff programs only show you what has changed,
    not what has stayed the same. How would you determine which parts of a file have
    not changed? Once you’ve found a difference between them, how would you find the
    next line in each version where the text matches up again? It’s more complicated
    than it looks!
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 想一想如何计算差异，以及如何编写一个函数来执行此操作。您可能已经注意到，差异程序只会显示已更改的内容，而不会显示未更改的内容。如何确定文件的哪些部分未发生变化？一旦找到它们之间的差异，如何找到每个版本中下一行文本再次匹配的位置？它比表面看起来的要复杂得多！
- en: In this series of articles, I’d like to walk you through the default diff algorithm
    used by Git. It was developed by Eugene W. Myers, and the [original paper](http://www.xmailserver.org/diff2.pdf)
    is available online. While the paper is quite short, it is quite mathematically
    dense and is focussed on proving that it works. The explanations here will be
    less rigorous, but will hopefully be more intuitive, giving a detailed walk-through
    of what the algorithm actually does and how it works.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一系列文章中，我想带你走过Git使用的默认差异算法。它是由Eugene W. Myers开发的，并且[原始论文](http://www.xmailserver.org/diff2.pdf)可以在线获取。尽管论文很短，但数学上非常密集，其重点在于证明其有效性。这里的解释可能没有那么严格，但希望更直观，详细地演示算法实际上做了什么以及它是如何工作的。
- en: In this first article, we’ll lay out the basic model of what the algorithm is
    trying to achieve and go through an example of how it works out the simplest set
    of edits to get from one version to another.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文的第一篇文章中，我们将阐述算法试图实现的基本模型，并通过一个示例演示如何计算从一个版本到另一个版本的最简编辑集。
- en: 'To use the example from the paper, say we want to calculate the difference
    between two strings:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 举个论文中的例子，假设我们想计算两个字符串之间的差异：
- en: 'By “difference”, we mean a sequence of edits that will convert string *a* into
    string *b*. One possible such sequence is to simply delete each character in *a*,
    and then insert each character in *b*, or to use common diff notation:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过“差异”，我们指的是一系列编辑操作，这些操作将字符串*a*转换为字符串*b*。其中一种可能的序列是简单地删除*a*中的每个字符，然后插入*b*中的每个字符，或使用常见的差异表示法：
- en: '[PRE0]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: However, we wouldn’t consider this a good-quality diff since it doesn’t tell
    us very much. Changes to source code typically leave much of a file unmodified
    and we really want to see *sections* of code that were inserted or deleted. A
    diff that shows the entire file being removed and replaced with the new version
    isn’t much use to us.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们不认为这是一个质量很高的差异，因为它并没有告诉我们很多。对源代码的更改通常会使文件的大部分保持不变，我们确实希望看到*插入或删除*的代码段。一个显示整个文件被删除并替换为新版本的差异对我们没有什么用处。
- en: 'A better diff of these two strings would be:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个字符串的更好差异应该是：
- en: '[PRE1]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This makes the smallest possible number of changes to *a* in order to produce
    *b*, so it’s a better visualisation of what really changed. It’s not the only
    possible solution, for example these are also valid:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就能以尽可能小的改动次数来将*a*变成*b*，因此更好地可视化了真正的变化。这并不是唯一可能的解决方案，例如以下也是有效的：
- en: '[PRE2]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, they are all *minimal*: they make the smallest number of edits possible,
    which in this case is five. What’s interesting about them is they differ in which
    sections they consider to be the same between the strings, and which order they
    perform edits in. From looking at diffs, you probably have an intuitive idea that
    diffs only show the things that changed, but these examples show that there are
    many possible interpretations of the difference between two files.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它们都是*最小*的：它们使得可能的编辑次数最小，本例中为五次。它们之所以有趣，是因为它们在考虑字符串之间相同部分和执行编辑顺序方面存在差异。通过查看差异，你可能有一个直观的想法，即差异只显示发生变化的内容，但这些例子表明，在两个文件之间的差异有许多可能的解释。
- en: So, the purpose of diff algorithms is to provide a strategy for generating diffs,
    where the diffs have certain desirable properties. We usually want diffs to be
    as small as possible, but there are other considerations. For example, when you
    change something, you’re probably used to seeing deletions followed by insertions,
    not the other way round. That is, you’d rather see solution 2 than solution 3
    above. And, when you change a whole block of code, you’d like to see the whole
    chunk being deleted followed by the new code being inserted, rather than many
    deletions and insertions interleaved with each other.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，差异算法的目的是提供一种生成差异的策略，使得差异具有某些理想特性。我们通常希望差异尽可能小，但还有其他考虑因素。例如，当你进行更改时，你可能习惯看到删除后跟随插入，而不是反过来。也就是说，你更愿意看到上面的解决方案2而不是解决方案3。当你更改整个代码块时，你希望看到整个块被删除，然后插入新代码，而不是许多删除和插入相互交错。
- en: '[PRE3]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You also probably want to see deleted or inserted code that aligns with your
    idea of the code’s structure, for example if you insert a method, you’d like that
    method’s `end` to be considered new, rather than the `end` of the preceding method:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还希望看到删除或插入的代码与你对代码结构的想法相一致，例如如果你插入一个方法，你希望该方法的`end`被视为新的，而不是前一个方法的`end`：
- en: '[PRE4]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Myers’ algorithm is just one such strategy, but it’s fast and it produces diffs
    that tend to be of good quality most of the time. It does this by being *greedy*,
    that is trying to consume as many lines that are the same before making a change
    (therefore avoiding the “wrong `end`” problem), and also by preferring deletions
    over insertions when given a choice, so that deletions appear first.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: Myers’ 算法是一种这样的策略之一，但它速度快，大多数时候产生的差异质量较好。它通过*贪心*方法实现这一点，即在进行更改之前尝试消耗尽可能多相同的行（因此避免了“错误的`end`”问题），并且在选择时更倾向于删除而不是插入，因此删除优先出现。
- en: The Myers paper is based on the idea that finding the *shortest edit script*
    (SES) can be modelled as a graph search. Let’s take our two strings, *a* = `ABCABBA`
    and *b* = `CBABAC`, and build a graph of all the ways we can get from *a* to *b*.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: Myers 的论文基于这样一个思想，即寻找*最短编辑脚本*（SES）可以被建模为图搜索。让我们取两个字符串，*a* = `ABCABBA` 和 *b*
    = `CBABAC`，并构建一个图，展示我们可以从*a*到*b*的所有方法。
- en: The (*x*, *y*) co-ordinates in the grid shown below correspond to steps in the
    editing process; at (0,0) we have string *a*, that is, we have not started editing.
    Moving rightward (increasing *x*) corresponds to deleting a character from *a*,
    for example moving to (1,0) means we’ve deleted the first `A` from *a*. Moving
    downward (increasing *y*) corresponds to inserting a character from *b*, for example
    if we now move from (1,0) down to (1,1), we insert the first `C` from *b*, and
    our edited string is thus `CBCABBA`. At position (4,3), we have converted `ABCA`
    into `CBA`, but we still need to convert `BBA` into `BAC`. The bottom-right position
    (7,6) corresponds to converting string *a* fully into string *b*.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面显示的网格中，(*x*, *y*) 坐标对应于编辑过程中的步骤；在(0,0)处有字符串*a*，也就是说，我们还没有开始编辑。向右移动（增加*x*）对应于从*a*中删除一个字符，例如移动到(1,0)意味着我们从*a*中删除了第一个`A`。向下移动（增加*y*）对应于从*b*中插入一个字符，例如如果我们现在从(1,0)向下移动到(1,1)，我们从*b*中插入第一个`C`，因此我们的编辑后字符串为`CBCABBA`。在位置(4,3)，我们已经将`ABCA`转换为`CBA`，但我们仍然需要将`BBA`转换为`BAC`。右下角位置(7,6)对应于将字符串*a*完全转换为字符串*b*。
- en: As well as moving rightward and downward, in some positions we can also move
    diagonally. This occurs when the two strings have the same character at the position’s
    indexes, for example the third character in *a* and the first character in *b*
    are both `C`, and so position (2,0) has a diagonal leading to (3,1). This corresponds
    to consuming an equal character from both strings, neither deleting nor inserting
    anything.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了向右和向下移动外，在某些位置上我们还可以对角移动。当两个字符串在位置的索引处具有相同字符时，例如*a*中的第三个字符和*b*中的第一个字符都是`C`，因此位置(2,0)有一个导致(3,1)的对角线。这对应于消耗两个字符串中相同字符的情况，既不删除也不插入任何内容。
- en: '[PRE5]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The idea behind the Myers algorithm is quite simple: we want to get from (0,0)
    to (7,6) (the bottom-right) in as few moves as possible. A “move” is a single
    step rightward (a deletion from *a*) or downward (an insertion from *b*). The
    most number of moves we could take to get from *a* to *b* is 13: the combined
    length of the two strings.'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: Myers算法背后的思想非常简单：我们希望尽可能少地从(0,0)到达(7,6)（右下角）。一个“移动”是向右移动（从*a*中删除）或向下移动（从*b*中插入）的单个步骤。我们从*a*到*b*可能采取的最大步数是13：两个字符串的长度之和。
- en: However, walking diagonal paths is free since they don’t correspond to making
    *changes*, thus we want to maximise the number of diagonal steps we take and minimise
    the number of rightward/downward moves. The examples above show that we can actually
    get from *a* to *b* making only five edits, and Myers provides a strategy for
    finding that pathway.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，走对角路径是免费的，因为它们不对应于进行*更改*，因此我们希望最大化我们采取的对角步数，并尽量减少向右/向下移动的次数。上面的例子表明，我们实际上可以只进行五次编辑从*a*到*b*，而Myers提供了一种找到这条路径的策略。
- en: To develop an intuition for how the algorithm works, let’s start exploring the
    graph. To try to find the shortest path to the bottom-right position, we’ll explore
    every possible path from (0,0) in tandem until we find a path that reaches the
    end. I recommend keeping the above grid handy while you follow this.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对算法的工作方式有所直观理解，让我们开始探索这个图。为了尝试找到到达右下角位置的最短路径，我们将同时探索从(0,0)开始的每条可能路径，直到找到达到末尾的路径。我建议你在跟随时保持上面的网格。
- en: Let’s start by recording our initial position at (0,0).
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从记录我们的初始位置开始，在(0,0)处。
- en: 'We have two options from this position: we can move downward and reach (0,1)
    or move rightward and reach (1,0).'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个位置，我们有两个选择：我们可以向下移动并达到(0,1)，或者向右移动并达到(1,0)。
- en: Now let’s consider (0,1). If we move downward from here we reach (0,2), but
    there is a diagonal from there to (1,3), and from (1,3) to (2,4), and since diagonal
    moves are free we can say that moving downward from (0,1) gets us to (2,4) at
    the cost of only one move. Therefore we’ll mark the move from (0,1) to (2,4) as
    a single step in our walk.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑（0,1）。如果我们从这里向下移动，我们将到达（0,2），但从那里到（1,3）有一条对角线，从（1,3）到（2,4），由于对角线移动是免费的，我们可以说从（0,1）向下移动只需一个步骤就能到达（2,4）。因此，我们将（0,1）到（2,4）的移动标记为我们路径中的单步。
- en: Moving rightward from (0,1) takes us to (1,1) and again there is a diagonal
    from there to (2,2). Let’s mark both these moves on our walk.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从（0,1）向右移动将我们带到（1,1），然后从那里到（2,2）有一条对角线。让我们在我们的步行中标记这两个移动。
- en: '[PRE6]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now let’s consider the other branch we took from (0,0), moving rightward to
    (1,0). Moving downward from (1,0) takes us to (1,1), which as we just found out
    gets us to (2,2). Moving rightward from (1,0) takes us to (2,0), which has a diagonal
    to (3,1). Again, we’ll record both these steps.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑从（0,0）开始的另一条分支，向右移动到（1,0）。从（1,0）向下移动将我们带到（1,1），正如我们刚刚发现的那样，这将使我们到达（2,2）。从（1,0）向右移动将我们带到（2,0），这里有一个对角线到（3,1）。我们将记录这两个步骤。
- en: I’m recording (2,2) as being visited via (1,0) rather than (0,1) for reasons
    that will become clear a little later. For intuition, consider that making a rightward
    move first means performing a deletion first, and we generally want deletions
    to appear before insertions.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我将（2,2）记录为通过（1,0）访问，而不是（0,1），稍后的原因会变得清楚。直觉上，考虑到先右移动意味着先进行删除操作，我们通常希望在插入操作之前出现删除操作。
- en: '[PRE7]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We’ve now fully explored the graph to two moves deep and we can begin on our
    third move. Moving downward from (2,4) gets us to (2,5), and from there is a diagonal
    to (3,6). Moving rightward from (2,4) takes us to (3,4), where again a diagonal
    takes us to (4,5).
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完全探索了图的深度为2的部分，可以开始第三步了。从（2,4）向下移动将我们带到（2,5），然后对角线到（3,6）。从（2,4）向右移动将我们带到（3,4），再次对角线移动到（4,5）。
- en: '[PRE8]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we consider (2,2). Moving rightward from there is as we’ve seen before:
    we move to (3,2), and follow the diagonals from there to (5,4). Moving downward
    introduces a new situation, however: this move gets us to (2,3) and there is no
    diagonal from there. Now, if we were doing a general-purpose graph search, we’d
    want to record both the result of moving rightward from (2,4) and the result of
    moving downward from (2,2), that is:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们考虑（2,2）。从那里向右移动如前所述：我们移动到（3,2），然后沿着对角线到（5,4）。然而，向下移动引入了一个新的情况：这一移动将我们带到（2,3），而那里没有对角线。现在，如果我们进行通用图搜索，我们会记录从（2,4）向右移动的结果和从（2,2）向下移动的结果，即：
- en: '[PRE9]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: However, the structure of the particular graphs we’re examining means that it’s
    sufficient to just store the *best* position you can reach after a certain set
    of edits. The above record shows us that making two insertions then a deletion
    (down twice, and then right) gets us to (4,5), whereas making the deletion first,
    and then the two insertions, gets us to (2,3). So, we’ll just keep the (4,5) result
    and throw the (2,3) away, indicating (4,5) is the best position reachable after
    one deletion and two insertions *in any order*.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们正在检查的特定图形结构意味着只需存储在一定编辑步骤后能达到的*最佳*位置就足够了。上面的记录告诉我们，先插入两次然后删除（向下两次，然后向右）可以使我们到达（4,5），而先删除然后插入两次可以使我们到达（2,3）。因此，我们将保留（4,5）的结果，放弃（2,3），表示（4,5）是在任意顺序下进行一次删除和两次插入后能到达的最佳位置。
- en: '[PRE10]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Finally in our depth-2 scan, we visit (3,1). Moving downward from there goes
    to (3,2), which leads diagonally to (5,4), and so we’ll again record this as a
    move downward from (3,1) rather than rightward from (2,2). Moving rightward from
    (3,1) gives (4,1), which has a diagonal to (5,2).
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们的深度2扫描中，我们访问了（3,1）。从那里向下移动到（3,2），然后对角线移动到（5,4），因此我们将这个记录为从（3,1）向下移动而不是从（2,2）向右移动。从（3,1）向右移动到（4,1），然后对角线到（5,2）。
- en: 'Here’s the completed record after three moves:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是经过三次移动后的完整记录：
- en: '[PRE11]'
  id: totrans-split-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You’re probably getting the hang of this by now so let’s rattle through the
    remaining moves. We can’t move downward from (3,6), and moving rightward from
    there gives (4,6), which is also reachable downward from (4,5), so we’ll mark
    it as such. Rightward of (4,5) is (5,5).
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能已经掌握了这个过程，所以让我们快速浏览剩下的移动。我们无法从（3,6）向下移动，而从那里向右移动到（4,6），也可以从（4,5）向下到达，所以我们将其标记为这样。在（4,5）的右侧是（5,5）。
- en: '[PRE12]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: (5,5) is also downward of (5,4) so we’ll mark that, and moving rightward from
    (5,4) gives (6,4), with a diagonal leading to (7,5).
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: （5,5）也是（5,4）的下方，因此我们将其标记，从（5,4）向右移动得到（6,4），带有对角线导向（7,5）。
- en: '[PRE13]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Downward from (5,2) also leads to (7,5), and moving rightward from (5,2) leads
    to (7,3), thus completing the fourth row of the scan.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从（5,2）向下也导致（7,5），从（5,2）向右移动导致（7,3），从而完成扫描的第四行。
- en: '[PRE14]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now we begin the fifth row. Since we know there are diffs from *a* to *b* requiring
    only five edits, we expect this row of the scan to find the bottom-right position,
    (7,6).
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们开始第五行。由于我们知道从 *a* 到 *b* 需要仅五次编辑，我们期望此扫描的这一行找到右下角位置，（7,6）。
- en: There is nothing downward from (4,6), and rightward of that is (5,6), which
    is also downward from (5,5). Rightward of (5,5) is (6,5).
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: （4,6）下方没有东西，右边是（5,6），也是从（5,5）向下。（5,5）的右边是（6,5）。
- en: '[PRE15]'
  id: totrans-split-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Finally, moving downward from (7,5) gives (7,6) – the final position! This is
    certainly better than (6,5), which we reached by going right, right, down, down,
    right, and so we replace it in our trace of the moves.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，从（7,5）向下移动得到（7,6）——最终位置！这肯定比我们通过右、右、下、下、右到达的（6,5）更好，因此我们在移动的轨迹中替换它。
- en: '[PRE16]'
  id: totrans-split-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'So that’s the basic idea the algorithm is based on: given two strings, find
    the shortest path through a graph that represents the edit space between the two.
    We explore every possible route through the graph breadth-first, and stop as soon
    as we reach the final position.'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 所以算法的基本思想是：给定两个字符串，在表示两者之间编辑空间的图中找到最短路径。我们通过图的广度优先探索每条可能的路线，并在达到最终位置时立即停止。
- en: In the next article, we’ll look at how Myers actually represents this process,
    and start to look at implementing it in code.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一篇文章中，我们将看看Myers实际上是如何表示这个过程的，并开始考虑在代码中实现它。
