- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:29:32'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:29:32'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Go Enums Suck
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 枚举糟糕透了
- en: 来源：[https://www.zarl.dev/articles/enums](https://www.zarl.dev/articles/enums)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.zarl.dev/articles/enums](https://www.zarl.dev/articles/enums)
- en: Go Enums Suck
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 枚举糟糕透了
- en: 'Go doesn’t technially have Enums and it is a missing feature in my book but
    there is a Go idiomatic way to achieve roughly the same thing. Go does have however
    the `iota` keyword. This is basically a self incrementing integer - so you end
    up writing Enums something like this:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Go 在技术上没有枚举，在我看来这是一个缺失的特性，但是 Go 有一种符合习惯的方法来实现大致相同的功能。不过，Go 确实有 `iota` 关键字。这基本上是一个自增的整数
    - 因此，你最终会写出像这样的枚举：
- en: '[PRE0]'
  id: totrans-split-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is fine however it is nothing but an integer under the covers this means
    what we actually have is:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这没问题，但它在底层只是一个整数，这意味着实际上我们拥有的是：
- en: '[PRE1]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This also means any function that uses these or a struct that contains these
    can also just take an `int` value. For this reason its best to make sure our default
    case is correctly handled. So for this we either decide which will be the default
    case or what I usually do is specify an `Unknown` case and use this as a validation
    check. So now we have :'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着使用这些或包含这些的结构体的任何函数也可以接受一个 `int` 值。因此，最好确保我们的默认情况得到正确处理。因此，我们要么决定默认情况是什么，要么像我通常做的那样指定一个
    `Unknown` 情况并将其用作验证检查。所以现在我们有：
- en: '[PRE2]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'But what you notice here is we have no string representation of these Enums
    so we have to build that out next, for this I just use a `map[Operation]string`
    and instantiate this with the defined string constants. We also now need to handle
    in inverse scenario of a `string` to an `Operation` for example if we are reading
    the value off the wire via JSON for example. Adding the string maps:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你在这里注意到的是我们没有这些枚举的字符串表示，因此我们接下来必须构建它，为此我只使用一个 `map[Operation]string` 并用定义的字符串常量进行实例化。我们现在还需要处理一个从
    `string` 到 `Operation` 的反向场景，例如，如果我们通过 JSON 读取值。添加字符串映射：
- en: '[PRE3]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that we have these maps set up we should really put them to use, for this
    I usually make 1 method and 1 function, the `String()` method on the Enum type
    and a package level function Parse which takes the `any` type and can return an
    Operation type. This looks like:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们设置了这些映射，我们真的应该将它们投入使用，为此，我通常会创建一个方法和一个函数，即枚举类型上的 `String()` 方法和一个接受任意类型并返回
    `Operation` 类型的包级别函数 Parse。具体如下：
- en: '[PRE4]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This lets us use the Enum in JSON for example, it can be represented as an `int`
    or a `string` it’s up to you, but I almost always go for the `string` representation
    in JSON. And of course it’s the 2 most used interfaces in the world. The JSON
    Marshall and Unmarshall interfaces.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们可以在 JSON 中使用枚举，例如，它可以表示为 `int` 或 `string`，这取决于你，但我几乎总是选择在 JSON 中使用 `string`
    表示。当然，这是世界上最常用的两个接口。JSON 的编组和解组接口。
- en: '[PRE5]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'OK so now that we have all the individual Enums defined I like to group them
    up in a struct and give it the feel of an Enum more akin to a Java/Kotlin Enum
    when referencing it. Start with making a container wrapper with a `Operation`
    for each case then define a public variable of the container type with all the
    correct mappings. This ends up looking like:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: OK，现在我们已经定义了所有单独的枚举类型，我喜欢将它们分组到一个结构体中，并使其在引用时更像是 Java/Kotlin 的枚举。首先创建一个带有每种情况的
    `Operation` 的容器包装，然后定义一个公共变量，类型为容器类型，带有所有正确的映射。最终看起来是这样的：
- en: '[PRE6]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This allows us to use these Enums like below if for example we are importing
    from the `cmd` pkg.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得我们可以像下面这样使用这些枚举，例如，如果我们从 `cmd` 包导入。
- en: '[PRE7]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this container we can also extend the functionality to return all Enums
    as a slice for iteration over all the values if required excluding the `Unknown`
    value.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个容器，我们还可以扩展功能，以便返回所有枚举作为一个切片，以便在需要时遍历所有值，不包括 `Unknown` 值。
- en: '[PRE8]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Job Done. Or is it….
  id: totrans-split-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成了。或者说，完成了吗……
- en: After all this we now have a much nicer more fully featured Enum but the biggest
    problem remains; Anywhere that accepts an `Operation` Enum type will just as happily
    accept an `int`. This is a real pain as it almost completely negates the work
    we have done here. There is also the fact that we have our container but the original
    definitions are also public and can be accessed from outside the package so we
    have two things that are functionally the same.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 经过所有这些步骤，我们现在有了一个更好、更全面的枚举，但最大的问题仍然存在；任何接受 `Operation` 枚举类型的地方都可以轻松地接受一个 `int`。这真是个大麻烦，因为这几乎完全抵消了我们在这里所做的工作。还有一点是，虽然我们有了我们的容器，但原始定义也是公开的，并且可以从包外访问，因此我们有两个功能上相同的东西。
- en: '[PRE9]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To limit this the first thing I did was to make the operation Enum type private
    so `Operation` became `operation` and made all instances of the operation type
    private also. I then defined a new public struct called `Operation` which contains
    this private `operation` Enum.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了限制这一点，我做的第一件事是将operation Enum类型私有化，所以`Operation`变成了`operation`，并且还使所有operation类型的实例都是私有的。然后我定义了一个名为`Operation`的新公共结构体，其中包含了这个私有的`operation`
    Enum。
- en: '[PRE10]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This now makes it impossible to just pass an `int` to any function or struct
    that uses the `Operation` type as they cannot instantiate a new one with a valid
    private `operation` as it cannot be used outside the package. This also means
    even if someone for example uses this as an empty struct `empty := cmd.Operation{}`
    it will be Invalid and will report as `Unknown`. So now that this has been done
    we need to change our public container to accommodate our new `Operation` struct
    but as you can see the container does not need to change but the assignment does.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这样做使得不可能只是将`int`传递给使用`Operation`类型的任何函数或结构体，因为它们无法实例化一个带有有效私有`operation`的新对象，因为它不能在包外使用。这也意味着，即使有人例如使用这个空结构体`empty
    := cmd.Operation{}`，它将是无效的，并报告为`Unknown`。所以现在这件事情已经完成，我们需要改变我们的公共容器来适应我们的新`Operation`结构，但是如你所见，容器不需要改变，但是赋值需要改变。
- en: '[PRE11]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We also now need to change our Parse function to handle the wrapped `operation`
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在也需要更改我们的解析函数来处理包装的`operation`。
- en: '[PRE12]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With this new structure we still have the same nice syntax for accessing the
    Enum outside the package but the individual Enums are not public so this encourages
    the use of the singleton Enum container for getting the appropriate value and
    it also makes Intellisense in the IDE better as there is less public variables
    exposed meaning the drop down is cleaner.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种新结构，我们仍然可以在包外部访问Enum时拥有相同的漂亮语法，但个别的Enums不是公开的，因此这鼓励使用单例Enum容器来获取适当的值，而且它还使IDE中的智能感知更好，因为公开的变量更少，这意味着下拉菜单更干净。
- en: Now I know - this is a metric ton of work just to get nice Enums, but to be
    honest I think it really makes a nicer developer experience when using them and
    is better than the `iota` approach from a type safety perspective. However I too
    agree that this is way to much work and it’s repetitive work at that, which can
    easily require rework with the adding of Enums or the changing of Enums means
    making sure everything has been done correctly for all the string maps etc.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我知道 - 这是大量工作，只是为了获得漂亮的枚举，但老实说，我认为这确实在使用它们时使开发者体验更好，并且从类型安全性的角度来看，比`iota`方法更好。然而，我也同意这是太多的工作，而且是重复的工作，这很容易需要在添加枚举或更改枚举时进行重新工作，这意味着必须确保所有字符串映射等都已经正确完成。
- en: So ………..
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: So ………..
- en: goenums
  id: totrans-split-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: goenums
- en: This is a a little tool I wrote to accompany this post - its an Enum generator
    that generates Enums in the same style as I have laid out above. It’s a simple
    `text/template` based tool that can turn some simple JSON configuration into a
    formatted go file.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我为了配合本文编写的一个小工具 - 它是一个枚举生成器，以与我上面所述的相同风格生成Enums。它是一个基于简单`text/template`的工具，可以将一些简单的JSON配置转换为格式化的go文件。
- en: 'It turns this:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它变成了这样：
- en: '[PRE13]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Into this:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 转到这里：
- en: '[PRE14]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that the config is a JSON array this allows specifying many different Enums
    and have them all get generated in one shot. More about goenums can be found on
    the github at [https://www.github.com/zarldev/goenums](https://www.github.com/zarldev/goenums)
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，配置是一个JSON数组，这允许指定许多不同的Enums，并在一次生成中生成它们。有关goenums的更多信息，请访问github上的[https://www.github.com/zarldev/goenums](https://www.github.com/zarldev/goenums)。
- en: '[](https://www.zarl.dev/articles/enums-take-two)'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://www.zarl.dev/articles/enums-take-two)'
- en: '[I have done a follow-up to this, it better reflects the current goenums code.](https://www.zarl.dev/articles/enums-take-two)'
  id: totrans-split-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[我对此进行了后续，这更好地反映了当前的goenums代码。](https://www.zarl.dev/articles/enums-take-two)'
