- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:33:59'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Paul Butler – The hater’s guide to Kubernetes
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://paulbutler.org/2024/the-haters-guide-to-kubernetes/](https://paulbutler.org/2024/the-haters-guide-to-kubernetes/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Among a certain tech set, Kubernetes has earned a reputation as an unnecessarily
    complicated time-sink that startups should avoid. Using Kubernetes with a small
    team is seen as a sign of over-engineering.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: I’m guilty of taking [pithy jabs](https://twitter.com/paulgb/status/1568257167882436608)
    myself.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: Despite my snark, “great piece of technology” truly is sincere; at the time
    of that post I had [recently written](https://driftingin.space/posts/complexity-kubernetes)
    about how much of Kubernetes’ complexity is necessary for what it does.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: We’ve been running Kubernetes in production for a few years now at [Jamsocket](https://jamsocket.com/),
    and I’ve found a good flow with it. Kubernetes serenity has been achieved internally.
    A big key to this has been [carving out a small chunk](https://twitter.com/paulgb/status/1743361919535260053)
    of Kubernetes’ features and pretending the rest don’t exist.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: This post started as an internal guide to the way we use Kubernetes, so it’s
    not meant to apply prescriptively to every startup; nonetheless I think it’s a
    good starting place for avoiding many of the sandbars in the vast seas of Kubernetes.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: '**Why use Kubernetes at all?**'
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As I see it, Kubernetes is the best-travelled path if you want all three of
    these things:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: To run multiple processes/servers/scheduled jobs.
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To run them redundantly and load balance across them.
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To configure them, and the relationships between them, as code.
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At its most basic, Kubernetes is just a layer of abstraction that lets you think
    about a pool of computers if it were one (headless) computer. If that’s your use
    case, and you can avoid the other parts of it, you can get pretty far.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Some people have told me that #2 is overkill, startups shouldn’t focus on zero-downtime
    deploys or high availability. But we often do multiple deploys per day, and when
    our products break, our customer’s products break for *their* users. Even a minute
    of downtime is noticed by someone. Rolling deploys give us the confidence to deploy
    unceremoniously and often.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: How we use Kubernetes
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For background, [Jamsocket](https://jamsocket.com) is a service for dynamically
    spinning up processes that a web app can talk to. Kind of like AWS Lambda, but
    where the process lifetime is bound to a WebSocket connection instead of a single
    request/response.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: We use Kubernetes to run the long-running processes that are needed to support
    that. The API server, container registry, controller, log collector, some DNS
    services, metrics collection, etc.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: 'A few things we *don’t* use Kubernetes for:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: The ephemeral processes themselves. We did for a hot minute very early on, but
    we quickly found it limiting (more on that later.)
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static/marketing sites. We use [Vercel](https://vercel.com/) for those. It’s
    more expensive, but so is the opportunity cost of an hour of engineering time
    at a small startup, and Vercel saves us more of that than it costs.
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anything that directly stores data we would be sad to lose. We do use some persistent
    volumes for caching or derived data, but otherwise we use a managed Postgres DB
    outside of the cluster and blob storage.
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s also worth noting that we don’t administer Kubernetes ourselves — the main
    advantage of using Kubernetes is that we can outsource the infrastructure-level
    operation of it! We have been happy with Google Kubernetes Engine, and while the
    [Google Domains fiasco](https://blog.pragmaticengineer.com/google-domains-to-shut-down/)
    has shaken my faith in Google Cloud, I at least sleep soundly knowing that migrating
    to Amazon EKS would be relatively straightforward.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: Things we readily use
  id: totrans-split-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few types of k8s resources we use without hesitation. I’m only listing
    resources here that we create explicitly; most of these resources implicitly create
    other resources (like Pods) that I will not mention but which we of course (indirectly)
    use.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: '**[Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)**:
    Most of our pods are created through deployments. Every deployment critical to
    our service functioning has multiple replicas and rolling updates.'
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Services](https://kubernetes.io/docs/concepts/services-networking/service/)**:
    specifically, `ClusterIP` for internal services and `LoadBalancer` for external
    ones. We have avoided `NodePort` and `ExternalName` services, preferring for our
    DNS configuration to live outside of Kubernetes.'
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**CronJobs**](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/):
    for cleanup scripts and that sort of thing.'
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ConfigMaps** and **Secrets**: for passing data to the above resources.'
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Things we cautiously use
  id: totrans-split-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**StatefulSet** and **PersistentVolumeClaim**: we have used some StatefulSets.
    The configuration is a bit more convoluted than Deployments, but they can have
    a persistent volume across restarts. We prefer to persist important data in managed
    services outside of k8s. We don’t have a hard rule against volumes because sometimes
    it’s nice to persist e.g. a cache across a service restart, but I avoid them when
    possible because they can interact badly (deadlock) with rolling deploys.'
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RBAC**: we have used this in a few places, e.g. to give a service permission
    to refresh a secret. It adds enough complexity to our small cluster that I mostly
    avoid it.'
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Things we actively avoid
  id: totrans-split-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Hand-writing YAML**. YAML has [enough foot-guns](https://noyaml.com/) that
    I avoid it as much as possible. Instead, our Kubernetes resource definitions are
    created from TypeScript with [Pulumi](https://www.pulumi.com/).'
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-built-in resources and operators**. I’ve [written before](https://driftingin.space/posts/complexity-kubernetes)
    about how the [control loop](https://kubernetes.io/docs/concepts/architecture/controller/)
    pattern is a double-edged sword: it’s the core idea that makes K8s robust, but
    it’s also a source of indirection and complexity. The [operator pattern](https://kubernetes.io/docs/concepts/extend-kubernetes/operator/)
    and [custom resources](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/)
    allow third-party software to use Kubernetes’ robust infrastructure for its own
    control loops, which is a great idea in theory that I’ve found to be clunky in
    practice. Rather than [cert-manager](https://cert-manager.io/), we use [Caddy’s](https://caddyserver.com/)
    certificate automation.'
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Helm**. Helm is a no-go because of the operators and no YAML rules, but I
    also just think that using unstructured string templating to generate something
    machine-parsable means introducing fragility for no gain. [`nindent`](https://v2.helm.sh/docs/charts_tips_and_tricks/#using-the-include-function)
    is like nails-on-a-chalkboard to me, I’m sorry.'
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Anything with “mesh” in the name.** I guess they’re useful to somebody, but
    not me, and not [this guy](https://matduggan.com/k8s-service-meshes/) either.'
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ingress resources**. I don’t have any battle scars from these, and I know
    some people use them productively, but a theme of our successful use of Kubernetes
    is avoiding adding unnecessary layers of indirection. Configuring Caddy works
    for us, so we just do that.'
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trying to replicate the entire k8s stack locally**. Instead of using things
    like k3s or kind to replicate production exactly, we just use Docker Compose or
    our own scripts that start the subset of the system we actually care about in
    the moment.'
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A human should never wait for a pod
  id: totrans-split-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Above I alluded to the fact that we briefly ran ephemeral, interactive, session-lived
    processes on Kubernetes. We quickly realized that Kubernetes is designed for robustness
    and modularity over container start times. As a general rule, my take is that
    Kubernetes is good for when you want to redundantly run some long-running processes,
    but if a human is ever waiting for a pod to start, [Kubernetes is the wrong choice](https://twitter.com/paulgb/status/1684718880353042432).
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ll confess that I’m talking my book here, but at least it’s an open-source
    book: we use an MIT-licensed Rust orchestrator called [Plane](https://plane.dev/)
    that we designed specifically for quickly scheduling and running processes for
    interactive workloads (i.e. ones with a human waiting on them).'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: Higher-level abstractions
  id: totrans-split-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For completeness, I should also mention that some of the Kubernetes alternatives
    that have popped up are quite good. Particularly if you don’t want or need requirement
    #3 from my initial list (the ability to specify infrastructure as code.) For [one
    of our products](https://y-sweet.cloud/), we opted to use [Railway](https://railway.app/)
    rather than our k8s cluster, mainly for the preview environments. Some friends
    I respect highly swear by [Render](https://render.com/) (I’ve dabbled but personally
    find Railway’s environment model cleaner.) I’m also partial to [Flight Control’s](https://www.flightcontrol.dev/)
    bring-your-own-cloud approach.'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: For a lot of SaaS type apps, you’ll probably get pretty far on those. But if
    you meet the three needs listed at the beginning of this article and you take
    a disciplined approach to it, don’t let anybody tell you that you’re too early
    for Kubernetes.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
