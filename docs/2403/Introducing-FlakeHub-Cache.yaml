- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:53:58'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Introducing FlakeHub Cache
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://determinate.systems/posts/flakehub-cache-beta/](https://determinate.systems/posts/flakehub-cache-beta/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Binary caching](https://zero-to-nix.com/concepts/caching) is truly one of
    the most wonderful core features of [Nix](https://zero-to-nix.com). It enables
    you to fetch the build results of [derivations](https://zero-to-nix.com/concepts/derivations)
    rather than building them locally, which makes just about everything you do with
    Nix—[development environments](https://zero-to-nix.com/concepts/dev-env), [package
    builds](https://zero-to-nix.com/concepts/packages), continuous integrations runs—so
    much faster that Nix without caching is essentially a different, lesser tool.
    But despite our love for Nix caching, we’ve believed that existing caching solutions
    are not suitable for secure, production use cases. And so we’ve opted to build
    something better.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: 'Today, we’re excited to announce **FlakeHub Cache**, a powerful new caching
    concept from us at [Determinate Systems](/) that offers [robust per-flake access
    control](#access-control). FlakeHub Cache is currently in *private beta* and we’re
    actively iterating on the implementation and seeking design partners to try it
    out. You can sign up for the beta right here and we’ll let you know next steps
    very soon:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: Register for the FlakeHub Cache private beta
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Nix’s official binary cache server, [`nix-serve`](https://nixos.org/manual/nix/stable/package-management/binary-cache-substituter),
    has some major gaps that make it unsuitable for secure, production use cases.
    Most importantly, `nix-serve` serves up a [Nix store](https://zero-to-nix.com/concepts/nix-store)
    as a single monolithic cache, and *everything* in the cache is available to anyone
    with a public key. This is an unacceptably fast-and-loose access model for most
    organizations.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: With FlakeHub Cache’s access control model, however, you can grant or deny read
    and write access at the [flake](https://zero-to-nix.com/concepts/flakes) level,
    which affords you substantially more control. So what does this look like?
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with read access to pull from a flake’s cache. If your org has a
    flake called `security-mega-important`, for example, you can provide read access
    only to a small set of trusted users—or automated agents—in your org. If, on the
    other hand, you have a flake called `shared` that’s meant to be used by everyone,
    you can provide read access to everyone in your org.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: In terms of write access to push to a flake’s cache, we’ve opted for a model
    centered around controlled, authenticated build environments. FlakeHub Cache currently
    allows pushing to the cache [solely](#model) as part of [GitHub Actions](https://docs.github.com/en/actions)
    runs (with [GitLab](https://gitlab.com) support on the way). This means that there
    is *no ad-hoc push access whatsoever*, so you can’t accidentally push to a cache
    in a shell script or CLI command.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: The granular and controlled nature of this model is far more suited for organizations
    with demanding security and other requirements, and a significant leap beyond
    existing solutions.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: In order to grant or deny access, of course, FlakeHub Cache needs to figure
    out who—or what—is making a request. Authentication for FlakeHub Cache is based
    on [JSON Web Tokens](https://jwt.io) (JWTs). We currently use [GitHub](https://github.com)
    as our JWT authentication provider but will be adding [GitLab](https://gitlab.com)
    support very soon. In the future, this flexible model will enable us to support
    a wide variety of authentication solutions, including [SAML](https://en.wikipedia.org/wiki/SAML_2.0)
    and various [Single Sign-on](https://en.wikipedia.org/wiki/Single_sign-on) (SSO)
    providers.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: Static tokens are great for some use cases—and FlakeHub enables you to create
    such tokens in the UI—but we’re opting to go beyond this model.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: FlakeHub Cache is able to provide [granular access control](#access-control)
    because of instead of serving an entire [Nix store](https://zero-to-nix.com/concepts/nix-store)
    as “the cache,” FlakeHub Cache applies a **slice** abstraction, where a slice
    is some subset of all store paths. With FlakeHub Cache enabled, each flake you
    publish on [FlakeHub](https://flakehub.com) gets its own slice and read and write
    access is applied at this level.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: 'When a user has [authenticated](#auth) with FlakeHub Cache, it determines which
    slices you’re allowed to access and combines those slices into a single **view**
    of the cache. With this view abstraction, FlakeHub Cache can make decisions like
    these:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: User `devops_aficionado_123` from the `WidgetsDotCom` org *may* pull from the
    cache for the `WidgetsDotCom/devops` flake.
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User `AnaBooper` from the `WidgetsDotCom` org *may not* pull from `WidgetsDotCom/super-secure`
    flake.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Although these users are in the same organization, WidgetsDotCom can make access
    decisions on a per-flake basis and thus choose whichever access patterns and collaboration
    models they wish. This model is certainly more robust from a security standpoint
    but it also:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: '**Is much simpler**. When using Nix, you only need to configure FlakeHub Cache;
    there’s no need to distribute public keys for a multitude of them.'
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Offers better performance**. Using only one platform for caching means fewer
    network round trips and fewer authentication handshakes. In addition, we run FlakeHub
    Cache in a variety of regions with CDN-backed storage. This results in a clear
    speed-up in your Nix builds.'
  id: totrans-split-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In addition to access control, things like garbage collection are also configurable
    at the flake level.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Two core aspects of using FlakeHub Cache make it a significant departure from
    other available cache systems:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: '**No public caches**. That’s right: FlakeHub Cache doesn’t allow you to expose
    public caches like [cache.nixos.org](http://cache.nixos.org). You can pull from
    the cache for a specific flake only if you’re (a) authenticated and (b) have [permission](#access-control).
    That means that you can’t even *accidentally* make caches for specific flakes
    truly public. We’re open to exploring public caches in the future but would only
    do so with due care.'
  id: totrans-split-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Push only from CI**. At the moment, when you create FlakeHub Cache authentication
    tokens, those only apply to *pulling* from the cache. You can’t *push* to the
    cache in an ad hoc way using a CLI or other tool; you can only push from [GitHub
    Actions](https://docs.github.com/en/actions), particularly the [Magic Nix Cache
    Action](https://github.com/DeterminateSystems/magic-nix-cache-action) (with [GitLab
    support coming soon](https://gitlab.com)). If you enroll in the beta, you can
    enable pushing with this one-liner in your Actions configuration:'
  id: totrans-split-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that in place, anything that you `nix build` is automatically pushed to
    the cache—if authorized to!—without any need for separate push commands.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: We firmly believe that FlakeHub Cache is the first enterprise-ready cache in
    the Nix ecosystem. Public caches and caches without granular access control are
    simply not suited for a broad range of use cases and even whole industries, particularly
    those subject to exacting compliance standards, regulatory regimes, and security
    requirements. If you’re compelled by the power of Nix but have concerns about
    existing solutions, this might be precisely the sea change you’ve been waiting
    for.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: On top of that, Determinate Systems is the only [SOC2](https://www.imperva.com/learn/data-security/soc-2-compliance/)-compliant
    vendor in the Nix ecosystem, which should make otherwise-difficult discussions
    with the higher-ups go much more smoothly.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: You can try out FlakeHub Cache for yourself very soon. Sign up below, configure
    one of your GitHub Actions runs to use the Magic Nix Cache Action, make a small
    update to your Nix configuration, and you’ll experience this sea change first
    hand.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: Register for the FlakeHub Cache private beta
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
