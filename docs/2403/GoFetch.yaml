- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:33:07'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: GoFetch
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://gofetch.fail](https://gofetch.fail)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Constant-time programming is a paradigm that aims to harden code against side-channel
    attacks by ensuring that all operations take the same amount of time, regardless
    of their operands. In particular, constant-time code cannot contain secret-dependent
    branches, loops, or other control structures. Moreover, as the CPU caches different
    addresses with attacker-observable latency, constant-time code cannot mix data
    and addresses in any way and prohibits the use of secret-dependent memory accesses
    or array indices.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: We show that even if a victim correctly separates data from addresses by following
    the constant-time paradigm, the DMP will generate secret-dependent memory access
    on the victim's behalf, resulting in variable-time code susceptible to our key-extraction
    attacks.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
