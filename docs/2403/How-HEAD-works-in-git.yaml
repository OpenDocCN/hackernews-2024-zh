- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:47:17'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:47:17'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: How HEAD works in git
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`HEAD`在git中的工作原理'
- en: 来源：[https://jvns.ca/blog/2024/03/08/how-head-works-in-git/](https://jvns.ca/blog/2024/03/08/how-head-works-in-git/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://jvns.ca/blog/2024/03/08/how-head-works-in-git/](https://jvns.ca/blog/2024/03/08/how-head-works-in-git/)
- en: 'Hello! The other day I ran a Mastodon poll asking people how confident they
    were that they understood how HEAD works in Git. The results (out of 1700 votes)
    were a little surprising to me:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你好！前几天我在Mastodon上发布了一项调查，询问人们对于理解Git中`HEAD`的工作方式有多自信。结果（共1700票）对我来说有些令人惊讶：
- en: 10% “100%”
  id: totrans-split-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10% “100%”
- en: 36% “pretty confident”
  id: totrans-split-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 36% “相当自信”
- en: 39% “somewhat confident?”
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 39% “有点自信？”
- en: 15% “literally no idea”
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 15% “完全没有概念”
- en: I was surprised that people were so unconfident about their understanding –
    I’d been thinking of `HEAD` as a pretty straightforward topic.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我对人们对其理解如此缺乏信心感到惊讶 - 我一直认为`HEAD`是一个相当简单的主题。
- en: Usually when people say that a topic is confusing when I think it’s not, the
    reason is that there’s actually some hidden complexity that I wasn’t considering.
    And after some follow up conversations, it turned out that `HEAD` actually *was*
    a bit more complicated than I’d appreciated!
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通常当人们说某个主题令人困惑时，而我认为并不是时，原因是实际上存在一些隐藏的复杂性，我并未考虑到。经过一些后续对话，我发现`HEAD`实际上比我所认为的更复杂一些！
- en: 'Here’s a quick table of contents:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是快速目录：
- en: HEAD is actually a few different things
  id: totrans-split-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HEAD实际上是几个不同的东西
- en: 'After talking to a bunch of different people about `HEAD`, I realized that
    `HEAD` actually has a few different closely related meanings:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到`HEAD`时，我意识到它实际上有几个紧密相关的含义：
- en: The file `.git/HEAD`
  id: totrans-split-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件`.git/HEAD`
- en: '`HEAD` as in `git show HEAD` (git calls this a “revision parameter”)'
  id: totrans-split-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`HEAD`，如在`git show HEAD`中所示（git称其为“修订参数”）'
- en: All of the ways git uses `HEAD` in the output of various commands (`<<<<<<<<<<HEAD`,
    `(HEAD -> main)`, `detached HEAD state`, `On branch main`, etc)
  id: totrans-split-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在各种命令的输出中，git使用`HEAD`的所有方式（`<<<<<<<<<<HEAD`，`(HEAD -> main)`，`分离HEAD状态`，`在分支main上`等）
- en: These are extremely closely related to each other, but I don’t think the relationship
    is totally obvious to folks who are starting out with git.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些内容彼此之间非常密切相关，但我认为对于刚接触git的人来说，这种关系可能并不明显。
- en: the file `.git/HEAD`
  id: totrans-split-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件`.git/HEAD`
- en: 'Git has a very important file called `.git/HEAD`. The way this file works is
    that it contains either:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: Git有一个非常重要的文件叫做`.git/HEAD`。这个文件的工作方式是它包含以下内容之一：
- en: 'The name of a **branch** (like `ref: refs/heads/main`)'
  id: totrans-split-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**分支**的名称（例如`ref: refs/heads/main`）'
- en: A **commit ID** (like `96fa6899ea34697257e84865fefc56beb42d6390`)
  id: totrans-split-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**提交ID**（例如`96fa6899ea34697257e84865fefc56beb42d6390`）'
- en: 'This file is what determines what your “current branch” is in Git. For example,
    when you run `git status` and see this:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件决定了在Git中你的“当前分支”是什么。例如，当你运行`git status`时，会看到这个：
- en: '[PRE0]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'it means that the file `.git/HEAD` contains `ref: refs/heads/main`.'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '这意味着文件`.git/HEAD`包含`ref: refs/heads/main`。'
- en: If `.git/HEAD` contains a commit ID instead of a branch, git calls that “detached
    HEAD state”. We’ll get to that later.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`.git/HEAD`包含提交ID而不是分支，git称之为“分离HEAD状态”。我们稍后会讨论这个问题。
- en: (People will sometimes say that HEAD contains a name of a **reference** or a
    commit ID, but I’m pretty sure that that the reference has to be a **branch**.
    You *can* technically make `.git/HEAD` contain the name of a reference that isn’t
    a branch by manually editing `.git/HEAD`, but I don’t think you can do it with
    a regular git command. I’d be interested to know if there is a regular-git-command
    way to make .git/HEAD a non-branch reference though, and if so why you might want
    to do that!)
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: （有时人们会说HEAD包含**引用**或提交ID的名称，但我相当确定引用必须是**分支**。您*可以*在手动编辑`.git/HEAD`时将其包含为不是分支的引用的名称，但我不认为您可以通过常规git命令来执行此操作。如果有一种常规git命令的方法可以使.git/HEAD成为非分支引用，我很想知道，如果确实如此，您可能为什么要这样做！）
- en: '`HEAD` as in `git show HEAD`'
  id: totrans-split-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`HEAD`，如在`git show HEAD`中所示'
- en: 'It’s very common to use `HEAD` in git commands to refer to a commit ID, like:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在git命令中，非常常见地使用`HEAD`来引用提交ID，例如：
- en: '`git diff HEAD`'
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git diff HEAD`'
- en: '`git rebase -i HEAD^^^^`'
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git rebase -i HEAD^^^^`'
- en: '`git diff main..HEAD`'
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git diff main..HEAD`'
- en: '`git reset --hard HEAD@{2}`'
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git reset --hard HEAD@{2}`'
- en: All of these things (`HEAD`, `HEAD^^^`, `HEAD@{2}`) are called “revision parameters”.
    They’re documented in [man gitrevisions](https://git-scm.com/docs/gitrevisions),
    and Git will try to resolve them to a commit ID.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些（`HEAD`，`HEAD^^^`，`HEAD@{2}`）被称为“修订参数”。它们在[man gitrevisions](https://git-scm.com/docs/gitrevisions)中有文档记录，并且Git将尝试将它们解析为提交ID。
- en: (I’ve honestly never actually heard the term “revision parameter” before, but
    that’s the term that’ll get you to the documentation for this concept)
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: （老实说，我以前从未听说过“修订参数”这个术语，但这是可以让你查阅此概念文档的术语）
- en: 'HEAD in `git show HEAD` has a pretty simple meaning: it resolves to the **current
    commit** you have checked out! Git resolves `HEAD` in one of two ways:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`git show HEAD` 中的 HEAD 具有一个非常简单的含义：它解析为你当前检出的**当前提交**！ Git 通过以下两种方式之一解析 `HEAD`：'
- en: if `.git/HEAD` contains a branch name, it’ll be the latest commit on that branch
    (for example by reading it from `.git/refs/heads/main`)
  id: totrans-split-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `.git/HEAD` 包含一个分支名称，它将是该分支上的最新提交（例如从 `.git/refs/heads/main` 中读取）
- en: if `.git/HEAD` contains a commit ID, it’ll be that commit ID
  id: totrans-split-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `.git/HEAD` 包含一个提交 ID，那么它将是该提交 ID
- en: 'next: all the output formats'
  id: totrans-split-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接下来：所有的输出格式
- en: Now we’ve talked about the file `.git/HEAD`, and the “revision parameter” `HEAD`,
    like in `git show HEAD`. We’re left with all of the various ways git uses `HEAD`
    in its output.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了文件 `.git/HEAD` 和“修订参数” `HEAD`，比如在 `git show HEAD` 中。我们留下了 git 在输出中使用
    `HEAD` 的各种方式。
- en: '`git status`: “on branch main” or “HEAD detached”'
  id: totrans-split-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`git status`: “在分支 main 上”或“HEAD 分离”'
- en: 'When you run `git status`, the first line will always look like one of these
    two:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 `git status` 时，第一行将总是看起来像以下两种之一：
- en: '`on branch main`. This means that `.git/HEAD` contains a branch.'
  id: totrans-split-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`在分支 main 上`。这意味着 `.git/HEAD` 包含一个分支。'
- en: '`HEAD detached at 90c81c72`. This means that `.git/HEAD` contains a commit
    ID.'
  id: totrans-split-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`HEAD 分离于 90c81c72`。这意味着 `.git/HEAD` 包含一个提交 ID。'
- en: I promised earlier I’d explain what “HEAD detached” means, so let’s do that
    now.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前承诺过要解释什么是“HEAD 分离”，现在让我们来做吧。
- en: detached HEAD state
  id: totrans-split-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分离 HEAD 状态
- en: “HEAD is detached” or “detached HEAD state” mean that you have no current branch.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: “HEAD 分离”或“分离 HEAD 状态”意味着你没有当前分支。
- en: 'Having no current branch is a little dangerous because if you make new commits,
    those commits won’t be attached to any branch – they’ll be orphaned! Orphaned
    commits are a problem for 2 reasons:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 没有当前分支有点危险，因为如果你创建新的提交，这些提交将不会附加到任何分支 - 它们将是孤立的！ 孤立的提交有两个问题：
- en: the commits are more difficult to find (you can’t run `git log somebranch` to
    find them)
  id: totrans-split-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些提交更难找到（你不能运行 `git log somebranch` 来找到它们）
- en: orphaned commits will eventually be deleted by git’s garbage collection
  id: totrans-split-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 孤立的提交最终将被 git 的垃圾收集删除
- en: 'Personally I’m very careful about avoiding creating commits in detached HEAD
    state, though some people [prefer to work that way](https://github.com/arxanas/git-branchless).
    Getting out of detached HEAD state is pretty easy though, you can either:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 就个人而言，我非常注意避免在分离 HEAD 状态下创建提交，尽管有些人[更喜欢以这种方式工作](https://github.com/arxanas/git-branchless)。不过，退出分离
    HEAD 状态非常简单，你可以：
- en: Go back to a branch (`git checkout main`)
  id: totrans-split-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到分支（`git checkout main`）
- en: Create a new branch at that commit (`git checkout -b newbranch`)
  id: totrans-split-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该提交处创建一个新的分支（`git checkout -b newbranch`）
- en: If you’re in detached HEAD state because you’re in the middle of a rebase, finish
    or abort the rebase (`git rebase --abort`)
  id: totrans-split-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你因为在重新基础的过程中而处于分离 HEAD 状态，请完成或中止重新基础（`git rebase --abort`）
- en: Okay, back to other git commands which have `HEAD` in their output!
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，回到其他具有 `HEAD` 的 git 命令！
- en: '`git log`: `(HEAD -> main)`'
  id: totrans-split-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`git log`: `(HEAD -> main)`'
- en: 'When you run `git log` and look at the first line, you might see one of the
    following 3 things:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 `git log` 并查看第一行时，可能会看到以下三种情况之一：
- en: '`commit 96fa6899ea (HEAD -> main)`'
  id: totrans-split-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`commit 96fa6899ea (HEAD -> main)`'
- en: '`commit 96fa6899ea (HEAD, main)`'
  id: totrans-split-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`commit 96fa6899ea (HEAD, main)`'
- en: '`commit 96fa6899ea (HEAD)`'
  id: totrans-split-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`commit 96fa6899ea (HEAD)`'
- en: 'It’s not totally obvious how to interpret these, so here’s the deal:'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如何解释这些并不完全明显，所以这里的解释如下：
- en: inside the `(...)`, git lists every reference that points at that commit, for
    example `(HEAD -> main, origin/main, origin/HEAD)` means `HEAD`, `main`, `origin/main`,
    and `origin/HEAD` all point at that commit (either directly or indirectly)
  id: totrans-split-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `(...)` 中，git 列出了指向该提交的每个引用，例如 `(HEAD -> main, origin/main, origin/HEAD)`
    意味着 `HEAD`、`main`、`origin/main` 和 `origin/HEAD` 都指向该提交（直接或间接）。
- en: '`HEAD -> main` means that your current branch is `main`'
  id: totrans-split-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HEAD -> main` 意味着你当前的分支是 `main`'
- en: If that line says `HEAD,` instead of `HEAD ->`, it means you’re in detached
    HEAD state (you have no current branch)
  id: totrans-split-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果该行显示为 `HEAD,` 而不是 `HEAD ->`，这意味着你处于分离 HEAD 状态（没有当前分支）
- en: 'if we use these rules to explain the 3 examples above: the result is:'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用这些规则来解释上述三个示例：结果如下：
- en: '`commit 96fa6899ea (HEAD -> main)` means:'
  id: totrans-split-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`commit 96fa6899ea (HEAD -> main)` 意味着：'
- en: '`.git/HEAD` contains `ref: refs/heads/main`'
  id: totrans-split-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.git/HEAD` 包含 `ref: refs/heads/main`'
- en: '`.git/refs/heads/main` contains `96fa6899ea`'
  id: totrans-split-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.git/refs/heads/main` 包含 `96fa6899ea`'
- en: '`commit 96fa6899ea (HEAD, main)` means:'
  id: totrans-split-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`commit 96fa6899ea (HEAD, main)`的意思是：'
- en: '`.git/HEAD` contains `96fa6899ea` (HEAD is “detached”)'
  id: totrans-split-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.git/HEAD`包含`96fa6899ea`（HEAD处于“分离”状态）'
- en: '`.git/refs/heads/main` also contains `96fa6899ea`'
  id: totrans-split-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.git/refs/heads/main`还包含`96fa6899ea`'
- en: '`commit 96fa6899ea (HEAD)` means:'
  id: totrans-split-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`commit 96fa6899ea (HEAD)`的意思是：'
- en: '`.git/HEAD` contains `96fa6899ea` (HEAD is “detached”)'
  id: totrans-split-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.git/HEAD`包含`96fa6899ea`（HEAD处于“分离”状态）'
- en: '`.git/refs/heads/main` either contains a different commit ID or doesn’t exist'
  id: totrans-split-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.git/refs/heads/main`要么包含不同的提交 ID，要么不存在'
- en: 'merge conflicts: `<<<<<<< HEAD` is just confusing'
  id: totrans-split-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合并冲突：`<<<<<<< HEAD`只是令人困惑
- en: 'When you’re resolving a merge conflict, you might see something like this:'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当您解决合并冲突时，您可能会看到类似这样的内容：
- en: '[PRE1]'
  id: totrans-split-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I find `HEAD` in this context extremely confusing and I basically just ignore
    it. Here’s why.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现在这种情况下的`HEAD`极其令人困惑，基本上我只是忽略它。原因如下。
- en: When you do a **merge**, `HEAD` in the merge conflict is the same as what `HEAD`
    was when you ran `git merge`. Simple.
  id: totrans-split-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行**合并**操作时，冲突中的`HEAD`与运行`git merge`时的`HEAD`相同。简单来说。
- en: 'When you do a **rebase**, `HEAD` in the merge conflict is something totally
    different: it’s the **other commit** that you’re rebasing on top of. So it’s totally
    different from what `HEAD` was when you ran `git rebase`. It’s like this because
    rebase works by first checking out the other commit and then repeatedly cherry-picking
    commits on top of it.'
  id: totrans-split-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行**变基**操作时，冲突中的`HEAD`则完全不同：它是您要变基的**其他提交**。因此，它与运行`git rebase`时的`HEAD`完全不同。这是因为变基首先检出其他提交，然后重复地在其上挑选提交。
- en: Similarly, the meaning of “ours” and “theirs” are flipped in a merge and rebase.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，“ours”和“theirs”在合并和变基中是颠倒的。
- en: The fact that the meaning of `HEAD` changes depending on whether I’m doing a
    rebase or merge is really just too confusing for me and I find it much simpler
    to just ignore `HEAD` entirely and use another method to figure out which part
    of the code is which.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我进行rebase或merge时，`HEAD`的含义变化太令我困惑了，我觉得完全忽略`HEAD`并使用另一种方法来弄清代码的哪一部分更简单。
- en: some thoughts on consistent terminology
  id: totrans-split-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一些关于一致术语的想法
- en: I think HEAD would be more intuitive if git’s terminology around HEAD were a
    little more internally consistent.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为如果 Git 在`HEAD`周围的术语稍微更内部一致，那么`HEAD`会更直观。
- en: For example, git talks about “detached HEAD state”, but never about “attached
    HEAD state” – git’s documentation never uses the term “attached” at all to refer
    to `HEAD`. And git talks about being “on” a branch, but never “not on” a branch.
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Git 谈论“分离的 HEAD 状态”，但从不谈论“附加的 HEAD 状态” - Git 的文档从不使用“附加”一词来指代`HEAD`。Git 谈论“在”一个分支上，但从不谈论“不在”一个分支上。
- en: So it’s very hard to guess that `on branch main` is actually the opposite of
    `HEAD detached`. How is the user supposed to guess that `HEAD detached` has anything
    to do with branches at all, or that “on branch main” has anything to do with `HEAD`?
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 因此很难猜测“在分支main上”实际上与“HEAD分离”相反。用户如何猜测“HEAD分离”与分支有任何关系，或者“在分支main上”与`HEAD`有任何关系？
- en: that’s all!
  id: totrans-split-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 就这些！
- en: If I think of other ways `HEAD` is used in Git (especially ways HEAD appears
    in Git’s output), I might add them to this post later.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我能想到 `HEAD` 在 Git 中的其他用法（特别是在 Git 的输出中出现的方式），我可能会在以后的帖子中补充它们。
- en: If you find HEAD confusing, I hope this helps a bit!
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得HEAD很困惑，希望这有点帮助！
