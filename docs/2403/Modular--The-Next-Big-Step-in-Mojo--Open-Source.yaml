- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:44:30'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Modular: The Next Big Step in Mojoüî• Open Source'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://www.modular.com/blog/the-next-big-step-in-mojo-open-source](https://www.modular.com/blog/the-next-big-step-in-mojo-open-source)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: At Modular, open source is ingrained in our DNA. We firmly believe for Mojo
    to reach its full potential, it must be open source. We have been progressively
    open-sourcing more of Mojo and parts of the MAX platform, and today we‚Äôre thrilled
    to **announce the release of the core modules from the Mojo standard library under
    the Apache 2 license!**
  prefs: []
  type: TYPE_NORMAL
- en: '[We have always believed](https://docs.modular.com/mojo/faq#open-source) that
    building Mojo in the open will lead to a better result, because it allows its
    design to be shaped by the feedback from the broader community. We released Mojo
    very early and have been driving steady improvements since May of 2023 (see [the
    changelog](https://docs.modular.com/mojo/changelog)). Building a language and
    its infrastructure is hard work and takes time, and we‚Äôre excited to move from
    sharing our work to collaborating with Mojo developers worldwide.'
  prefs: []
  type: TYPE_NORMAL
- en: Contribute to Mojoüî• open source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many ways to open source code - some projects make source code available
    but do not accept contributions. Some provide opaque contribution processes without
    visibility into goals and roadmaps. Some open source and then don‚Äôt actively maintain
    it.
  prefs: []
  type: TYPE_NORMAL
- en: At Modular, our team has either built, contributed to, or driven incredible
    open source projects like LLVM, Swift, TensorFlow and PyTorch, and we want to
    make sure we do things right. This means not just ‚Äúmaking source code available‚Äù,
    but truly fostering and cultivating a vibrant and engaged **open development community**
    around Mojoüî•.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond just providing source code, we are also **opening up revision history**
    for the standard library, releasing **nightly builds** of the Mojo compiler, providing
    **public CI**, and allowing **external contributions through GitHub pull requests**.
    This is expensive and non-trivial to set up, but in our experience, it's critically
    important to allow the community to scale.
  prefs: []
  type: TYPE_NORMAL
- en: 'License: Apache 2 with LLVM exceptions'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We chose to use [Apache Licence, version 2.0](https://opensource.org/license/apache-2-0).
    It contains a **patent grant provision** which provides legal protection to users
    and contributors of the software. The Apache 2 license is a widely used and proven
    license, and is familiar to many individuals and companies across the industry.
  prefs: []
  type: TYPE_NORMAL
- en: The Apache 2 license is a great start, but our experience with licensing in
    the LLVM project taught us that there are two small issues with it. Some people
    are concerned that the Apache 2 license may not mix well with GPL2 code (e.g.
    the Linux Kernel) and the Apache 2 license requires that you acknowledge use of
    the code in derived projects. We want you to be able to use Mojo **without requiring
    you** to acknowledge Modular or Mojo (though of course, you are welcome to do
    so!) and make it clear that it is fine to mix with GPL2 code. As such, we‚Äôre including
    the [LLVM exceptions](https://spdx.org/licenses/LLVM-exception.html) which were
    specifically designed to address these concerns.
  prefs: []
  type: TYPE_NORMAL
- en: We believe this represents the state of the art in open source licensing for
    language and tool projects, and recommend other Mojo open source projects to follow
    the same approach. We have been using this approach for our existing open source
    code, and will continue to release more code with the same approach.
  prefs: []
  type: TYPE_NORMAL
- en: Early stages of our open source journey
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Mojo standard library is under heavy development and changing rapidly, so
    we've started by open sourcing its core modules. As such, we consider this to
    be an **important starting point**, not an end to our open source journey. We‚Äôll
    similarly evolve and iterate our development and contribution processes as we
    learn together with the community. We'll be opening up a lot more code over time,
    including more of Mojo and parts of the broader MAX platform.
  prefs: []
  type: TYPE_NORMAL
- en: Contribution guides
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So how can you become a contributor to Mojo? There are a lot of areas in the
    standard library that can be improved, so make sure to check out the [README.md](https://github.com/modularml/mojo/blob/nightly/README.md)
    in the [Mojo GitHub repository on the nightly branch](https://github.com/modularml/mojo/tree/nightly)
    if you''re planning to raise pull requests. It contains links to important docs,
    all of which are worth reading:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll also be giving away swag and other benefits to Mojicians with significant
    contributions to the standard library!
  prefs: []
  type: TYPE_NORMAL
- en: Nightly builds for fast iteration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nightly builds of the Mojo compiler are also now available! This allows you
    to test your contributions to the standard library against the latest version
    of the Mojo compiler that corresponds to the library source. This is a massive
    step towards opening development of the Mojo compiler, and allows Mojicians to
    live on the bleeding edge of development if they choose and test against the current
    tree. Over time, we will expand this nightly build to include the entire MAX platform.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to check out the [standard library development guide](https://github.com/modularml/mojo/blob/nightly/stdlib/docs/development.md)
    for details on how to get a nightly build, either to be on the bleeding edge of
    our development, or to test your contributions.
  prefs: []
  type: TYPE_NORMAL
- en: Version control history
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're releasing not only the code, but also our commit history for the standard
    library. We are committed to transparency, and enabling you to see how features
    have evolved over time, which provides additional context on how to develop standard
    library features.
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs build the future together!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are very excited about the future of Mojo and all of the applications that
    people are [already using it for](https://github.com/mojicians/awesome-mojo).
    We think this is a big step forward in openness and transparency, though we still
    have a long way to go. If you‚Äôre interested in making contributions, please check
    out the [README in mojo/stdlib](https://github.com/modularml/mojo/blob/nightly/stdlib/README.md)
    for everything you need to get started, and feedback is always welcome on [Discord](http://modul.ar/discord)
    and [GitHub](https://github.com/modularml/mojo/discussions).
  prefs: []
  type: TYPE_NORMAL
