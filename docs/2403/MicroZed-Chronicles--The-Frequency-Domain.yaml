- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:42:03'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:42:03
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'MicroZed Chronicles: The Frequency Domain'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MicroZed编年史：频率域
- en: 来源：[https://www.adiuvoengineering.com/post/microzed-chronicles-the-frequency-domain](https://www.adiuvoengineering.com/post/microzed-chronicles-the-frequency-domain)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.adiuvoengineering.com/post/microzed-chronicles-the-frequency-domain](https://www.adiuvoengineering.com/post/microzed-chronicles-the-frequency-domain)
- en: Recently, I have posted a few blogs and projects which looked at signal processing
    or filters. I thought it would be a good idea to go into more detail about one
    of the commonly used elements of these blogs and projects which is the Fourier
    Transform.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我发布了一些关于信号处理或滤波器的博客和项目。我认为深入了解这些博客和项目中常用的元素之一——傅里叶变换，会是一个不错的主意。
- en: We should be comfortable working in both the time and frequency domains, so
    hopefully this blog provides a good starting point for those who might not be.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该能够在时间和频率域内自如地工作，因此希望这篇博客能为那些可能不熟悉的人提供一个良好的起点。
- en: '**Time or Frequency Domain**'
  id: totrans-split-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**时间域或频率域**'
- en: As engineers, we can analyze and manipulate signals in either time or frequency
    domains and knowing when to do either one is a core reason an engineer is required
    on a project.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为工程师，我们可以在时间域或频率域内分析和操作信号，知道何时选择其中之一是项目中需要工程师的核心原因。
- en: The time domain enables engineers to analyze how a signal changes over time.
    Typically, in electronic systems, the signal in question is either a changing
    voltage, current, or frequency which has been output by a sensor or generated
    by another part of the system. Within this domain, we can measure a signal’s amplitude,
    frequency, and period in addition to more interesting parameters such as the rise
    and fall times of the signal. If we wish to observe a time domain signal in a
    laboratory environment, it’s common to use an oscilloscope or logic analyzer.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 时间域使工程师能够分析信号随时间的变化。通常，在电子系统中，所讨论的信号是由传感器输出或系统的另一部分生成的变化电压、电流或频率。在这个领域内，我们可以测量信号的振幅、频率和周期，以及信号的上升和下降时间等更有趣的参数。如果我们希望在实验室环境中观察时间域信号，通常会使用示波器或逻辑分析仪。
- en: However, there are signal parameters that require analysis within the frequency
    domain to access the information contained within. These parameters are present
    within the frequency domain where we can identify the frequency components of
    the signal, their amplitudes, and the phase of each frequency. Working within
    the frequency domain also makes it much simpler to manipulate signals due to the
    ease with which convolution can be performed in the frequency domain. Similar
    to the time domain analysis, we must use a spectrum analyzer if we wish to observe
    a frequency domain signal within the laboratory environment.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有些信号参数需要在频率域内分析，以获取其中包含的信息。这些参数存在于频率域中，我们可以在那里识别信号的频率成分、它们的振幅以及每个频率的相位。在频率域内工作还使信号操作变得更简单，因为在该域内可以轻松执行卷积。类似于时间域分析，如果我们希望在实验室环境中观察频率域信号，必须使用频谱分析仪。
- en: For some applications, we will wish to work within the time domain like systems
    that monitor voltage or temperature, for example. While noise may be an issue,
    taking an average number of samples will be sufficient in many cases. For other
    applications, however, it is preferable to work within the frequency domain. For
    example, this could include signal processing applications which requires the
    filtering of one signal from another or to separate it from a noise source.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些应用程序，我们希望在时间域内工作，比如监测电压或温度等系统。虽然噪声可能是一个问题，但平均取样数在许多情况下就足够了。然而，对于其他应用程序，最好在频率域内工作。例如，这可能包括需要从一个信号中滤波或从噪声源中分离信号的信号处理应用。
- en: Of course, working within the time domain requires less processing on the quantized
    digital signal. Working within the frequency domain, on the other hand, first
    requires the application of a transform to the quantized data to convert from
    the time domain. Similarly, we need to perform the inverse transform again back
    to the time domain to output the post processed data from the frequency domain.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，仅在时间域内工作需要对量化数字信号进行较少的处理。另一方面，在频率域内工作首先需要对量化数据应用变换以从时间域转换。类似地，我们需要再次执行逆变换将频率域中的后处理数据输出回时间域。
- en: '**From the Time to Frequency Domain**'
  id: totrans-split-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从时间域到频率域**'
- en: Depending upon the type of signal (i.e., repetitive or non-repetitive, discrete
    or non-discrete), there are a number of methods that can be used to covert between
    time and frequency domains such as Fourier series, Fourier Transforms or Z Transforms.
    Within electronic signal processing and FPGA applications in particular, the most
    often used method is the Discrete Fourier Transform (DFT) which is a subset of
    the Fourier Transform. The DFT is used to analyze signals that are periodic and
    discrete meaning they consist of a number of N bit samples evenly spaced at a
    sampling frequency which, in many applications, are supplied by an ADC within
    the system.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 根据信号类型（即重复或非重复，离散或非离散），有多种方法可用于在时间和频率域之间转换，例如傅里叶级数、傅里叶变换或Z变换。在电子信号处理和特别是FPGA应用中，最常用的方法是离散傅里叶变换（DFT），它是傅里叶变换的子集。DFT用于分析周期性和离散的信号，这意味着它们由一个采样频率下均匀间隔的N位样本组成，在许多应用中由系统中的ADC提供。
- en: Simply put, the DFT decomposes the input signal into two output signals which
    represent the sine and cosine components of that signal. Thus, for a time domain
    sequence of N samples, the DFT will return two groups of N/2+1 cosine and sine
    wave samples respectively referred to as the real and imaginary components as
    shown in figure one below. The real and imaginary sample width will also be N/2
    for an input signal width of n bits.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，DFT将输入信号分解为两个输出信号，表示该信号的正弦和余弦分量。因此，对于N个样本的时间域序列，DFT将返回两组N/2+1个余弦和正弦波样本，分别称为实部和虚部，如下图一所示。对于n位输入信号宽度，实部和虚部样本宽度也将为N/2。
- en: The algorithm to calculate the DFT is pretty straight forward and we can use
    the equation shown below.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 计算DFT的算法非常直接，我们可以使用下面显示的方程。
- en: Where **x[i]** is the time domain signal, i ranges from 0 to N-1 and k ranges
    from 0 to N/2\. The algorithm above is called the correlation method and it multiplies
    the input signal with the sine or cosine wave for that iteration to determine
    its amplitude.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 其中**x[i]**是时间域信号，i的范围从0到N-1，k的范围从0到N/2。上述算法称为相关方法，它将输入信号与该迭代的正弦或余弦波形相乘以确定其幅度。
- en: At some point in our application, we’ll wish to transform back from the frequency
    domain into the time domain. To do this, we can use the synthesis equation which
    combines the real and imaginary waveforms to recreate a time domain signal.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中的某个时刻，我们将希望从频率域转换回时间域。为此，我们可以使用合成方程，该方程结合了实部和虚部波形以重新创建时间域信号。
- en: '**ReX ̅** and **ImX ̅** are, however, scaled versions of the cosine and sine
    waves so we need to scale them. **ImX[k]** or **ReX[k]** is divided by N/2 to
    determine the values for **ReX ̅** and **ImX ̅** in all cases except when **ReX[0]**
    and **ReX[N/2]**, in this case, they are divided by N.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**ReX ̅**和**ImX ̅**是余弦和正弦波的缩放版本，因此我们需要对它们进行缩放。在所有情况下，**ImX[k]**或**ReX[k]**除以N/2以确定**ReX
    ̅**和**ImX ̅**的值，除非在**ReX[0]**和**ReX[N/2]**的情况下，此时它们除以N。'
- en: For obvious reasons this is called the Inverse Discrete Fourier Transform or
    IDFT for short.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 出于明显的原因，这被称为逆离散傅里叶变换或简称IDFT。
- en: We can use tools such as Python, MATLAB and even Excel to perform DFT calculations
    on captured data and many lab tools like oscilloscopes are capable of performing
    DFT on request.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Python、MATLAB甚至Excel等工具对捕获的数据执行DFT计算，许多实验室工具如示波器可以根据请求执行DFT。
- en: Before we get any further, it’s worth pointing out that both the DFT and IDFT
    above are referred to as real DFT and real IDFT. This means that the input is
    a real number and not complex. It will soon become apparent why we need to know
    this.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，值得指出上述的DFT和IDFT都被称为实DFT和实IDFT。这意味着输入是实数而不是复数。很快就会明白为什么我们需要知道这一点。
- en: We can demonstrate the DFT algorithm using Python in JupyterLab using the following
    code. We can also generate the plots below showing the real element using a signal
    of 10 MHz and sampling rate of 100 Msps.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Python在JupyterLab中演示DFT算法，使用以下代码。我们还可以生成下面显示10 MHz信号和采样率为100 Msps的实部元素的图形。
- en: '[PRE0]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**FPGA based Implementation**'
  id: totrans-split-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**基于FPGA的实现**'
- en: The implementation of the DFT and IDFT as described above is often implemented
    as a nested loop, each performing N calculations as shown in the Python example.
    As such, the time taken to implement the DFT calculation is as follows.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述描述的DFT和IDFT的实现通常作为嵌套循环实现，每个循环执行N次计算，如Python示例所示。因此，实现DFT计算所需的时间如下。
- en: Where Kdft is the processing time for each iteration to be performed, this can
    become quite time consuming to implement. It will be pretty fast on a high-performance
    desktop but much slower on a processor intended for the edge.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 Kdft 是要执行的每次迭代的处理时间，这可能会变得相当耗时。在高性能桌面上运行速度会非常快，但在边缘处理器上则会慢得多。
- en: As a result, DFTs within FPGAs are normally implemented using an algorithm called
    the Fast Fourier Transform (FFT) to calculate the DFT. This algorithm has often
    been called the “the most important algorithm of our lifetime” because of its
    enabling impact on many industries. The FFT differs slightly from the DFT algorithms
    explained previously in that it calculates the complex DFT. This means that it
    expects real and imaginary time domain signals and produces results in the frequency
    domain which are n bits wide as opposed to n/2\. To clarify further, when we wish
    to calculate a real DFT, we must first set the imaginary part to zero and move
    the time domain signal into the real part. We have two options if we wish to implement
    a FFT within our AMD FPGA. We can either write one from scratch using the HDL
    of our choice or use the FFT IP provided within the Vivado IP catalogue. Unless
    there are pressing reasons not to use the IP, I suggest using the IP core to allow
    for reduced development time.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在 FPGA 中实现 DFT 通常使用称为快速傅里叶变换（FFT）的算法来计算 DFT。由于其对多个行业的影响，这种算法经常被称为“我们生活中最重要的算法”。FFT
    与之前解释的 DFT 算法略有不同，它计算复杂的 DFT。这意味着它期望实部和虚部的时域信号，并在频域中生成结果，宽度为 n 位，而不是 n/2。更进一步解释，当我们希望计算实数
    DFT 时，必须先将虚部设为零，并将时域信号移入实部。如果我们希望在 AMD FPGA 中实现 FFT，有两种选择：一种是使用我们选择的 HDL 从头编写
    FFT，另一种是使用 Vivado IP 目录中提供的 FFT IP。除非有无法使用 IP 的紧急原因，我建议使用 IP 核以减少开发时间。
- en: The basic approach of the FFT is that it decomposes the time domain signal into
    a number of single point time domain signals. This is often called bit reversal
    because the samples are reordered. If a bit reversal algorithm is not used as
    a short cut, the number of stages that it takes to create these single point time
    domain signals is calculated by Log2 N where N is the number of bits.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: FFT 的基本方法是将时域信号分解成多个单点时域信号。这通常被称为比特反转，因为样本被重新排序。如果不使用比特反转算法作为捷径，创建这些单点时域信号所需的阶段数由
    Log2 N 计算，其中 N 是比特数。
- en: These single point time domain signals are then used to calculate the frequency
    spectra for each point. This is pretty straight forward since the frequency spectra
    is equal to the single point time domain.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这些单点时域信号用于计算每个点的频谱。这非常直接，因为频谱等于单点时域。
- en: It’s in the recombination of these single frequency points that the FFT algorithm
    gets complicated and we must recombine these spectra points one stage at a time.
    This is the opposite of the time domain decomposition and will again take Log2
    N stages to recreate the spectra. This is where the famous FFT butterfly comes
    into play.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: FFT 算法在重新组合这些单频点时变得复杂，我们必须逐个阶段重新组合这些频谱点。这与时域分解相反，再次需要 Log2 N 个阶段来重建频谱。这就是著名的
    FFT 蝴蝶效应发挥作用的地方。
- en: When compared with the DFT execution time, the FFT takes
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与 DFT 执行时间相比，FFT 花费
- en: This results in significant improvements in execution time to calculate a DFT.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这大大提高了计算 DFT 的执行时间。
- en: When implementing an FFT within our FPGA, we must also take into account the
    size of the FFT because this will determine the noise floor below which we can’t
    see signals of potential interest. The FFT size will also determine the spacing
    of the frequency bins. The equation below is used for this.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 FPGA 中实现 FFT 时，我们还必须考虑 FFT 的大小，因为这将决定噪声底线，低于这个底线我们无法看到潜在感兴趣的信号。FFT 的大小还将决定频率箱的间距。下面的公式用于计算这一点。
- en: '**FFTNoise Floor (dB)=6.02n+1.77+10log10(FFTsize/2)**'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**FFT噪声底线（dB）=6.02n+1.77+10log10（FFT大小/2）**'
- en: Where n is the number of quantized bits within the time domain and FFT size
    is the FFT size. For FPGA-based implementations, this is normally a power of 2
    (e.g., 256, 512, 1024 etc.). The frequency bins will be evenly spaced at
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 n 是时域内量化位数，FFT 大小是 FFT 大小。对于基于 FPGA 的实现，这通常是 2 的幂次方（例如，256、512、1024 等）。频率箱将均匀间隔。
- en: To illustrate a very simple example, a FS of 100 MHz with a FFT size of 128
    would have a frequency resolution of 0.39 Hz. This means frequencies with 0.39
    Hz of each other cannot be distinguished.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要举一个非常简单的例子，具有 100 MHz 的 FS 和 FFT 大小为 128 的信号会有 0.39 Hz 的频率分辨率。这意味着相隔 0.39 Hz
    的频率是无法区分的。
- en: Again, we can look at the FFT in JupyterLabs and observe the output for the
    same configuration as for the DFT.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们可以在 JupyterLabs 中查看 FFT，并观察与 DFT 相同配置的输出。
- en: '[PRE1]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Of course, now that we understand a little more about FFTs and DFT we might
    want to implement them in our FPGA. If you have a PYNQ board, you can find detailed
    step-by-step instructions on how to do so for MPSoC or Zynq 7000 boards below.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，既然我们现在对 FFT 和 DFT 有了更多的理解，我们可能希望在我们的 FPGA 中实现它们。如果您有 PYNQ 板，您可以找到关于如何为 MPSoC
    或 Zynq 7000 板执行详细的逐步说明书。
- en: This should help you understand how to go about implementing an FFT in a FPGA
    and give you  good starting point to working with them further.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该帮助您了解如何在 FPGA 中实现 FFT，并为进一步使用它们提供一个良好的起点。
- en: If you enjoyed the blog why not take a look at the free webinars, workshops
    and training courses we have created over the years. Highlights include
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢这篇博客，不妨看看我们多年来创建的免费网络研讨会、工作坊和培训课程。重点包括
- en: Do you want to know more about designing embedded systems from scratch? Check
    out our book on creating embedded systems. This book will walk you through all
    the stages of requirements, architecture, component selection, schematics, layout,
    and FPGA / software design. We designed and manufactured the board at the heart
    of the book! The schematics and layout are available in Altium [here](https://www.e3designers.com/altium-365)Learn
    more about the board (see previous blogs on [Bring up](https://www.adiuvoengineering.com/post/microzed-chronicles-configuring-zynq-on-a-custom-board),
    [DDR validation,](https://www.adiuvoengineering.com/post/microzed-chronicles-validating-your-custom-zynq-board-memory)
    [USB](https://www.adiuvoengineering.com/post/microzed-chronicles-smart-sensor-iot-board-getting-usb-up-and-running),
    [Sensors](https://www.adiuvoengineering.com/post/microzed-chronicles-petalinux-i2c-in-the-ps-and-axi-iic))
    and view the schematics [here](https://www.adiuvoengineering.com/post/sensorsthink-board-schematic).
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于从零开始设计嵌入式系统的内容吗？查看我们的关于创建嵌入式系统的书籍。本书将引导您完成所有需求、架构、组件选择、原理图、布局以及 FPGA
    / 软件设计的各个阶段。书中的核心板我们进行了设计和制造！原理图和布局可在 Altium 中查看 [此处](https://www.e3designers.com/altium-365)，了解有关板卡的更多信息（参见之前关于
    [引导](https://www.adiuvoengineering.com/post/microzed-chronicles-configuring-zynq-on-a-custom-board)、[DDR
    验证](https://www.adiuvoengineering.com/post/microzed-chronicles-validating-your-custom-zynq-board-memory)、[USB](https://www.adiuvoengineering.com/post/microzed-chronicles-smart-sensor-iot-board-getting-usb-up-and-running)、[传感器](https://www.adiuvoengineering.com/post/microzed-chronicles-petalinux-i2c-in-the-ps-and-axi-iic))，并在
    [此处](https://www.adiuvoengineering.com/post/sensorsthink-board-schematic) 查看原理图。
