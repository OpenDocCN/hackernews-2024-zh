["```\noninstall = (event) => {  event.waitUntil( (async () => { const cache = await caches.open(cacheName); await cache.add(\"/offline/\"); console.log(\"Service worker added offline page\"); })(), ); }; \n```", "```\nonfetch = (event) => {  console.log(\"Service worker fetching\", event.request.url); event.respondWith( caches.open(cacheName).then((cache) => { return cache .match(event.request) .then((response) => { if (response) { console.log(\"Service worker found response in cache:\", response); return response; }   console.log( \"No response for %s found in service worker cache. Fetching \" + \"from network\", event.request.url, );   return fetch(event.request.clone()).then((response) => { console.log( \"Service worker got response for %s from network: %O\", event.request.url, response, );   if (response.status < 400) { console.log(\"Caching the response to\", event.request.url); cache.put(event.request, response.clone()); } else { console.log(\"Service worker not caching the response to\", event.request.url); }   return response; }).catch(() => caches.match(\"/offline/\")); }) .catch((error) => { console.error(\"Error in service worker fetch handler:\", error); throw error; }); }), ); }; \n```", "```\nonactivate = (event) =>  {  event.waitUntil( (async () => { const keys = await caches.keys(); return keys.map(async (cache) => { if(cache !== cacheName) { console.log('Removing old service worker cache '+cache); return await caches.delete(cache); } }) })() ) }; \n```", "```\nonfetch = (event) => {  console.log(\"Service worker fetching\", event.request.url); event.respondWith(caches.open(cacheName).then((cache) => { return cache.match(event.request).then((cachedResponse) => { const fetchedResponse = fetch(event.request).then((networkResponse) => { if (networkResponse.status < 400) { console.log(\"Caching the response to\", event.request.url); cache.put(event.request, networkResponse.clone()); } else { console.log(\"Service worker not caching the response to\", event.request.url); }   return networkResponse; }).catch(() => caches.match(\"/offline/\"));   return cachedResponse || fetchedResponse; }); })); }; \n```", "```\nonmessage = (event) => {  console.log(\"I am the service worker\"); }; \n```", "```\nonmessage = (event) => {  if (event.data.type === \"PRECACHE\") { const data = event.data.payload; console.log(\"Service worker started precache\", data); event.waitUntil( (async () => { const cache = await caches.open(cacheName); await cache.addAll(data) .catch((error) => console.log(\"Service worker failed precache\", error)); })(), ); } }; \n```", "```\nconst data = new String(document.currentScript.getAttribute('data-cache')); const precacheList = data.split(\" \"); const registerServiceWorker = async () => {  if (\"serviceWorker\" in navigator) { try { const registration = await navigator.serviceWorker.register(\"/sw.js\", { scope: \"/\", });   if (registration.installing) { console.log(\"Service worker installing\"); navigator.serviceWorker.ready.then((registration) => { console.log(\"Service worker requesting precache\"); registration.active.postMessage({ payload: precacheList, type: \"PRECACHE\", }); });   } else if (registration.waiting) { console.log(\"Service worker installed\"); } else if (registration.active) { console.log(\"Service worker active\"); }   } catch (error) { console.error(\"Service worker registration failed\", error); } } };   registerServiceWorker(); \n```"]