- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:00:00'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:00:00'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Not so quickly extending QUIC [LWN.net]
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QUIC的扩展并非一蹴而就 [LWN.net]
- en: 来源：[https://lwn.net/Articles/964377/](https://lwn.net/Articles/964377/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://lwn.net/Articles/964377/](https://lwn.net/Articles/964377/)
- en: '| **Benefits for LWN subscribers**The primary benefit from [subscribing to
    LWN](/subscribe/) is helping to keep us publishing, but, beyond that, subscribers
    get immediate access to all site content and access to a number of extra site
    features. Please sign up today! |'
  id: totrans-split-6
  prefs: []
  type: TYPE_TB
  zh: '| **LWN订阅者的好处**[订阅LWN](/subscribe/)的主要好处是帮助我们继续出版，此外，订阅者可以立即访问所有站点内容并使用许多额外的站点功能。请立即注册！
    |'
- en: By **Daroc Alden**
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：**Daroc Alden**
- en: March 6, 2024
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年3月6日
- en: '[QUIC](https://en.wikipedia.org/wiki/QUIC) is a UDP-based transport protocol
    that forms the foundation of [HTTP/3](/Articles/814522). It was initially developed
    at Google in 2012, and became an [IETF](https://www.ietf.org/) standard in 2021\.
    Work on the protocol did not stop with its standardization, however. The [QUIC
    Working Group](https://quicwg.org/) published several follow-up standards. Now,
    it is working on four more extensions to QUIC intended to patch over various shortcomings
    in the current protocol — although progress has not been quick.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[QUIC](https://zh.wikipedia.org/wiki/QUIC)是基于UDP的传输协议，是[HTTP/3](/Articles/814522)的基础。它最初在2012年由Google开发，并于2021年成为[IETF](https://www.ietf.org/)标准。然而，该协议的标准化并未停止工作。[QUIC工作组](https://quicwg.org/)发布了几个后续标准。现在，他们正在致力于QUIC的四个扩展，旨在修补当前协议的各种缺陷
    — 虽然进展并不迅速。'
- en: QUIC serves as a replacement for TCP and TLS with several interesting benefits.
    Combining the handshakes involved in establishing a connection and encrypting
    it allows QUIC to reduce the number of round trips required before applications
    can send data — to zero, in some cases. Combining encryption with the transport
    layer also allows QUIC to hide details of connections from intermediate routers
    ("middleboxes"). QUIC also supports sending multiple independent streams over
    the same underlying connection. This ability is useful for applications like web
    servers that want to transfer related resources over the same connection without
    a dropped packet in one stream delaying the rest — a problem with TCP known as
    [head-of-line blocking](https://en.wikipedia.org/wiki/Head-of-line_blocking).
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: QUIC作为TCP和TLS的替代方案，具有多个有趣的优点。通过结合建立连接和加密的握手过程，QUIC可以减少应用程序在发送数据前需要的往返次数 — 在某些情况下甚至可以减少到零。将加密与传输层结合还允许QUIC隐藏中间路由器（“中间盒”）的连接细节。QUIC还支持在相同底层连接上发送多个独立的流。这种能力对于像Web服务器这样的应用程序非常有用，它们希望在不同流中传输相关资源，而不会因为一个流中的丢包而延迟其他流
    — 这是TCP中已知的[线头阻塞](https://zh.wikipedia.org/wiki/%E5%85%B3%E5%8D%A1%E9%98%BB%E6%96%AD)问题。
- en: Load balancing
  id: totrans-split-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 负载平衡
- en: 'One interesting feature of QUIC is [connection migration](https://www.rfc-editor.org/rfc/rfc9000.html#name-connection-migration),
    which allows computers to seamlessly change IP addresses while maintaining a connection.
    QUIC packets all contain a connection identifier, which can be used to determine
    which connection the packet is part of, even if it comes from an unexpected source
    address. This poses a challenge for load balancers, which usually determine how
    to forward packets based on the IP addresses and port numbers of the source and
    destination. The connection ID is one of the few unencrypted parts of a packet
    — to allow servers to tell what encryption key should be used with a packet —
    so a QUIC-aware load balancer can use the connection identifier instead, but this
    interacts poorly with another aspect of QUIC: [connection ID rotation](https://www.rfc-editor.org/rfc/rfc9000.html#name-privacy-implications-of-con).'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: QUIC的一个有趣特性是[连接迁移](https://www.rfc-editor.org/rfc/rfc9000.html#name-connection-migration)，允许计算机在保持连接的同时无缝更改IP地址。QUIC数据包都包含连接标识符，可用于确定数据包所属的连接，即使其来源地址与预期不同。这对于负载均衡器构成挑战，因为它们通常根据源地址和目标地址的IP地址和端口号确定如何转发数据包。连接标识符是数据包中为数不多的未加密部分之一，以允许服务器确定应使用哪个加密密钥
    — 因此，QUIC感知负载均衡器可以使用连接标识符替代，但这与QUIC的另一个方面[连接标识符轮换](https://www.rfc-editor.org/rfc/rfc9000.html#name-privacy-implications-of-con)相互作用不佳。
- en: QUIC permits a server to supply a client with a pool of connection IDs for a
    given connection, in order to reduce "<q>linkability</q>". If a QUIC connection
    remains open for a long time — for example because it is being used to place an
    ongoing phone call — an attacker could use the connection ID of the packets to
    track the user as they move between different networks. To mitigate this, a client
    that knows it is about to change networks (for example, because it is about to
    switch from a cellular connection to WiFi) can start using a new connection ID
    from the pool when it switches. The server, which knows what connection IDs it
    provided to the client, can continue serving the connection with no interruption.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: QUIC允许服务器为特定连接向客户端提供一组连接ID池，以减少"<q>可链接性</q>"。如果一个QUIC连接长时间保持开放 —— 比如因为正在进行一个持续的电话呼叫
    —— 攻击者可以利用数据包的连接ID跟踪用户在不同网络间的移动。为了缓解这一问题，客户端如果知道即将切换网络（比如因为即将从蜂窝连接切换到WiFi），可以在切换时开始使用来自池中的新连接ID。而服务器则知道它为客户端提供了哪些连接ID，可以继续服务连接而无需中断。
- en: Any non-participant in the connection sees the source IP address, port number,
    and connection ID change simultaneously, making it difficult to recognize the
    new flow of packets as being part of the same connection. Unfortunately, this
    includes any load balancers sitting in front of the server, which have no way
    to recognize that the packets involved ought to be routed to the same server that
    handled the initial request.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 任何未参与连接的实体看到的是源IP地址、端口号和连接ID同时变化，这使得识别新数据流作为同一连接的一部分变得困难。不幸的是，这包括位于服务器前端的任何负载均衡器，它们无法识别应将数据包路由到处理初始请求的同一服务器。
- en: The QUIC Working Group is trying to enhance load balancing with [a new standard](https://quicwg.org/load-balancers/draft-ietf-quic-load-balancers.html)
    for securely encoding load balancing information in the connection ID. Servers
    using this new standard create connection IDs by combining a server ID and a [cryptographic
    nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce), and then encrypt the
    resulting string using a key shared with the load balancer to produce a connection
    ID. This key needs to be provided to the server and the load balancer by whoever
    is configuring the system. When the load balancer receives a packet, it attempts
    to decrypt the connection ID and then forward the packet to the relevant server.
    The standard also includes provisions for handling version updates or key migration.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: QUIC工作组正试图通过[a new standard](https://quicwg.org/load-balancers/draft-ietf-quic-load-balancers.html)来增强负载均衡，安全地在连接ID中编码负载均衡信息。使用这一新标准的服务器通过结合服务器ID和[cryptographic
    nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce)来创建连接ID，然后使用与负载均衡器共享的密钥对生成的字符串进行加密。这个密钥需要由配置系统的人员提供给服务器和负载均衡器。当负载均衡器接收到数据包时，它会尝试解密连接ID，然后将数据包转发给相关的服务器。该标准还包括处理版本更新或密钥迁移的规定。
- en: 'In June 2023, Martin Duke, one of the authors of the new standard, [said](https://mailarchive.ietf.org/arch/msg/quic/QBT4XU9NWVWRhmJA7ys61doCFHk/)
    that the draft "<q>is mostly ready, but we''ve put it on ice until it gets deployed
    somewhere</q>". There have been several small changes since that time, but it
    is not clear when the draft will be ready to take the next step toward being an
    IETF standard: being proposed to the Internet Engineering Steering Group (IESG)
    for consideration.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 2023年6月，新标准的一位作者之一Martin Duke [表示](https://mailarchive.ietf.org/arch/msg/quic/QBT4XU9NWVWRhmJA7ys61doCFHk/)，草案"<q>基本已经准备好了，但我们暂时搁置它，直到它在某处得到部署</q>"。自那时以来进行了几处小修改，但目前尚不清楚草案何时准备好迈向IETF标准的下一步：即被提议给互联网工程指导组（IESG）进行审议。
- en: Multipath
  id: totrans-split-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多路径
- en: There are several areas where TCP still has an advantage over QUIC. One of those
    is [multipath support](/Articles/544399). Multipath TCP connections can send data
    on different network paths simultaneously — for example, sending via both WiFi
    and cellular data — to provide better throughput than either path permits individually.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在几个方面，TCP仍然比QUIC具有优势。其中之一是[multipath support](/Articles/544399)。Multipath TCP连接可以同时通过不同的网络路径发送数据
    —— 例如，通过WiFi和蜂窝数据 —— 以提供比单独任何一条路径更好的吞吐量。
- en: The [in-progress QUIC multipath extension](https://quicwg.org/multipath/draft-ietf-quic-multipath.html)
    would adapt QUIC's connection-migration mechanism to allow multiple paths to be
    in use simultaneously. Currently, when a computer starts sending packets for an
    existing connection on a new path, that's taken as a sign that the previous path
    ought to be abandoned. If the connection is set up with the `enable_multipath`
    option, sending packets on a new path would instead add that path to the connection
    and permit both to be used simultaneously.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[正在进行中的QUIC多路径扩展](https://quicwg.org/multipath/draft-ietf-quic-multipath.html)将调整QUIC的连接迁移机制，允许同时使用多条路径。目前，当计算机开始在新路径上发送现有连接的数据包时，这被视为应该放弃之前的路径的信号。如果使用了`enable_multipath`选项建立连接，则在新路径上发送数据包会将该路径添加到连接中，并允许同时使用两条路径。'
- en: One complication is with network address translation (NAT) rebinding. QUIC identifies
    paths by the IP addresses and ports of the source and destination. Unfortunately,
    these parameters are not always stable for a given path. Some routers perform
    NAT, allowing multiple computers to share a single IP address. When a TCP connection
    passes through such routers, the router can watch the TCP session establishment,
    and keep the same external port mapped to the same internal IP address for the
    duration of the connection.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个复杂性在于网络地址转换（NAT）重新绑定。QUIC通过源和目标的IP地址和端口来识别路径。不幸的是，对于给定的路径，这些参数并不总是稳定的。一些路由器执行NAT，允许多台计算机共享单个IP地址。当TCP连接通过这样的路由器时，路由器可以观察TCP会话建立，并保持将同一外部端口映射到相同的内部IP地址，直到连接结束。
- en: 'This approach doesn''t work with QUIC for two reasons. Firstly, QUIC is a relatively
    new protocol, and many existing routers do not have code to handle it. Secondly,
    QUIC encrypts many details about the connection in order to avoid interference
    and reduce linkability. This means that NATs need to fall back to the same non-connection-aware
    approach used for other UDP protocols: establishing a mapping when they see an
    outbound packet, and then expiring that mapping after a timeout. An overloaded
    computer, lost packet, or misconfigured NAT can cause that timeout to expire even
    though there is an active QUIC connection. In turn, this causes the NAT to select
    a different outgoing port for the next packet, making the path appear to change.'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法在QUIC中不起作用有两个原因。首先，QUIC是一个相对较新的协议，许多现有的路由器没有处理它的代码。其次，QUIC加密了连接的许多细节，以避免干扰和减少可链接性。这意味着NAT需要回退到用于其他UDP协议的非连接感知方法：在看到出站数据包时建立映射，然后在超时后清除该映射。一个负载过重的计算机、丢失的数据包或错误配置的NAT可能会导致超时到期，尽管有活跃的QUIC连接。这反过来导致NAT选择为下一个数据包选择不同的出口端口，使路径看起来发生了变化。
- en: In existing QUIC, the server would consider this to be a connection migration,
    and continue without problems. With the multipath extension, the server would
    instead add the new path to the connection, but still send some data on the old
    path, which would be dropped by the NAT. To overcome this, multipath QUIC *requires*
    that clients changing to a new path use a new connection ID, as described above.
    Therefore, if the server sees a path change with the same connection ID, it can
    identify the change as a NAT rebinding event and stop sending packets to the old
    address.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在现有的QUIC中，服务器会将其视为连接迁移，并继续工作正常。使用多路径扩展后，服务器会将新路径添加到连接中，但仍会在旧路径上发送一些数据，这些数据将被NAT丢弃。为了克服这一问题，多路径QUIC
    *要求*客户端在切换到新路径时使用新的连接ID，如上所述。因此，如果服务器看到使用相同连接ID的路径更改，它可以将更改视为NAT重新绑定事件，并停止向旧地址发送数据包。
- en: Another concern is packet numbering and encryption. QUIC uses the packet number
    of each packet in a connection as a cryptographic nonce when encrypting the contents
    of the packet. But with multiple simultaneous paths in use, packet numbering becomes
    more complicated. Using a single sequence of packet numbers for all the paths
    in a connection makes it difficult to tell when a packet has been dropped, or
    when the packet has simply been sent via another path, making calculating the
    reliability and congestion of different paths difficult. The authors of the multipath
    extension chose to simplify implementations by using a separate set of packet
    numbers for each path in a connection. This in turn requires changes to how packets
    are encrypted, in order to prevent any nonces from being used multiple times.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是数据包编号和加密。当加密数据包内容时，QUIC 使用连接中每个数据包的数据包编号作为加密的密码。但是在使用多个同时路径时，数据包编号变得更加复杂。为了简化实现，多路径扩展的作者选择对连接中每个路径使用单独的数据包编号集。这反过来又需要对数据包的加密方式进行更改，以防止任何
    nonce 被多次使用。
- en: There are several other considerations that have needed hammering out in order
    to ensure that multipath QUIC is viable. The draft has gone through many rounds
    of revision, and is still under development by the working group. There is [a
    session](https://datatracker.ietf.org/meeting/119/agenda.txt) planned to discuss
    it in more detail at the upcoming IETF meeting in March.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他几个需要解决的考虑因素，以确保多路径 QUIC 的可行性。草案已经经历了多轮修订，并且仍然在工作组的开发中。计划在即将到来的三月 IETF 会议上更详细地讨论此问题的
    [会话](https://datatracker.ietf.org/meeting/119/agenda.txt)。
- en: Acknowledgment frequency
  id: totrans-split-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 确认频率
- en: Since QUIC is designed as an alternative to TCP, it needs to take care of data
    integrity and congestion control itself. To ensure that all sent data is received,
    both ends of a QUIC connection send acknowledgment messages. Right now, these
    messages are sent for every second packet. This is a compromise between sending
    acknowledgments too quickly (wasting resources) and too slowly (preventing the
    congestion control algorithms from responding promptly to changes in the network).
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 QUIC 被设计为 TCP 的替代品，它需要自行处理数据完整性和拥塞控制。为了确保所有发送的数据都能接收到，QUIC 连接的两端都会发送确认消息。目前，这些消息每发送两个数据包发送一次。这是在发送确认过快（浪费资源）和发送过慢（阻碍拥塞控制算法及时响应网络变化）之间的一种妥协。
- en: Unfortunately, not every QUIC connection has equivalent needs. Some asymmetric
    internet connections have reduced receiving bandwidth when packets are being sent,
    making acknowledgments more costly. Some devices have constraints on battery power
    or transmission frequency. Some devices are connected via reliable paths that
    don't have noticeable jitter or loss. Devices in all of these situations would
    benefit from sending fewer acknowledgments.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，并非每个 QUIC 连接都有相同的需求。一些不对称的互联网连接在发送数据包时降低了接收带宽，使得确认变得更加昂贵。一些设备有电池功耗或传输频率的限制。一些设备通过可靠的路径连接，这些路径没有明显的抖动或丢包。处于这些情况下的设备将从发送更少的确认中受益。
- en: Unfortunately, sending fewer acknowledgments cannot be done unilaterally, because
    the computer on the other end of the connection will interpret this to mean that
    the data ought to be retransmitted, or at least that the round-trip time of the
    path is much worse than it is. Omitting acknowledgments can still work if the
    other participant in the connection is expecting it, however.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，发送更少的确认不能单方面实现，因为连接另一端的计算机会解释这意味着数据应该被重新传输，或者至少路径的往返时间比实际情况要差得多。但是，如果连接中的另一方预期会省略确认，那么省略确认仍然可以起作用。
- en: The draft [acknowledgment frequency](https://quicwg.org/ack-frequency/draft-ietf-quic-ack-frequency.html)
    extension allows the participants in a connection to request changes in the acknowledgment
    mechanism. Systems using the extension can set the maximum number of packets or
    amount of time that can occur before an acknowledgment is sent.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 草案 [确认频率](https://quicwg.org/ack-frequency/draft-ietf-quic-ack-frequency.html)
    扩展允许连接中的参与者请求更改确认机制。使用该扩展的系统可以设置在发送确认之前可以发生的最大数据包数量或时间量。
- en: The extension also adds an `IMMEDIATE_ACK` message, to explicitly request that
    the other side of the connection send an acknowledgment upon receipt. A large
    section of the document is dedicated to detailing when implementations may want
    to use `IMMEDIATE_ACK` messages to ensure that delayed acknowledgments don't cause
    unnecessary slowdowns.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 该扩展还添加了一个`IMMEDIATE_ACK`消息，显式请求连接的另一端在接收到消息后发送确认。文档的大部分内容用于详细说明在何时实现可能希望使用`IMMEDIATE_ACK`消息，以确保延迟确认不会引起不必要的减速。
- en: The extension is theoretically ready to move on to the next step of standardization,
    because its last call for comments ended in October 2023 without prompting another
    revision. The authors of the extension have not moved forward with the next step
    in the IETF's standardization process, however, [prompting](https://mailarchive.ietf.org/arch/msg/quic/Z5fBhljh2BL9X8C3AFInR3c3GBA/)
    Gorry Fairhurst — one of the working group members — to ask on the mailing list
    in mid-February "<q>Is this document finished or is it waiting for action based
    on issues?</q>", but there has been no response.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展理论上已准备好进入标准化的下一步，因为其最后的评论征求在2023年10月结束，没有引发另一次修订。然而，扩展的作者们并没有继续进行IETF标准化过程的下一步，[导致](https://mailarchive.ietf.org/arch/msg/quic/Z5fBhljh2BL9X8C3AFInR3c3GBA/)工作组成员之一Gorry
    Fairhurst在二月中旬的邮件列表上提问：“这篇文档是已经完成了还是在等待基于问题的行动？”但是并未收到任何回应。
- en: Partial delivery
  id: totrans-split-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 部分交付
- en: QUIC allows separate streams multiplexed over the same connection to fail independently
    — an eventuality that might occur in, for example, a video conference where one
    participant has problems while others do not. When only one stream experiences
    a problem, the server can send a `RESET_STREAM` message to signal to the client
    that a particular stream was affected. When this happens, QUIC says that the client
    should discard any data received for that stream so far, and the server should
    not respond to retransmit requests for the data.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: QUIC允许在同一连接上复用分开的流，可以独立失败 — 例如，在视频会议中，一个参与者有问题而其他人没有。当只有一个流遇到问题时，服务器可以发送`RESET_STREAM`消息，向客户端信号表明特定流受到影响。当这种情况发生时，QUIC规定客户端应丢弃到目前为止接收到的该流的任何数据，并且服务器不应对数据的重传请求做出响应。
- en: This is a problem for protocols like the [draft WebTransport standard](https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3-08),
    which send some initial data that must be received reliably on a stream, but that
    still wish to have streams be resettable. The QUIC Working Group is addressing
    this use case with [a draft QUIC extension](https://quicwg.org/reliable-stream-reset/draft-ietf-quic-reliable-stream-reset.html)
    that defines a `RESET_STREAM_AT` message. This would allow a server to reset a
    stream, while specifying that data before a particular offset should still be
    retained or rerequested if it is lost in transmission.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像[draft WebTransport标准](https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3-08)这样的协议来说，发送一些必须在流上可靠接收的初始数据，但仍希望流可以重置，这是一个问题。QUIC工作组正在通过[draft
    QUIC扩展](https://quicwg.org/reliable-stream-reset/draft-ietf-quic-reliable-stream-reset.html)来处理这种用例，该扩展定义了一个`RESET_STREAM_AT`消息。这将允许服务器重置一个流，同时指定在特定偏移之前的数据应保留或在传输中丢失时重新请求。
- en: The draft is [nearly ready](https://datatracker.ietf.org/doc/draft-ietf-quic-reliable-stream-reset/)
    to be made a published standard, with the last call for comments ending on February
    8\. The IETF mandates some additional process before the standard is presented
    to the IESG for potential publication, so it still may be some time before it
    is adopted.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这份草案 [几乎已经准备好](https://datatracker.ietf.org/doc/draft-ietf-quic-reliable-stream-reset/)
    成为一个已发布的标准，最后的评论征求在2月8日结束。在标准提交到IESG进行可能的发布之前，IETF规定了一些额外的流程，所以可能还需要一些时间才能被采纳。
- en: Conclusion
  id: totrans-split-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 结论
- en: 'These potential improvements to QUIC promise to make the protocol more useful
    and performant, especially for devices with asymmetric or intermittently available
    links. Unfortunately, progress on these improvements has not exactly been quick.
    Christian Huitema, a long-time contributor to QUIC, [expressed frustration](https://www.privateoctopus.com/2024/02/28/long-slow-path-to-quic-multipath.html)
    with the working group''s progress:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些对QUIC的潜在改进有望使协议更加实用和高效，尤其是对于具有非对称或间歇性可用链路的设备。不幸的是，这些改进的进展并不算快。长期贡献者Christian
    Huitema对工作组的进展[表达了不满](https://www.privateoctopus.com/2024/02/28/long-slow-path-to-quic-multipath.html)：
- en: In the old days, the IETF was prone to find a solution that was good enough,
    ship it, gather experience, and then revise the standard later to fill in the
    gaps. If we had followed that process, we could probably have published a QUIC
    Multipath RFC last year, or maybe the year before — the draft 6 was definitely
    good enough, and the previous draft was probably OK as well. But we have decided
    instead to discuss all details before approving the draft. The result will probably
    be better, although gathering experience sooner would also have helped improve
    quality. In any case, the process is not quick.
  id: totrans-split-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在过去，IETF倾向于找到一个足够好的解决方案，发布它，积累经验，然后在以后修订标准以填补空白。如果我们按照那个流程，可能去年或者前年就已经发布了QUIC多路径RFC，草案6肯定足够好，之前的草案可能也还行。但我们决定在批准草案之前讨论所有细节。结果可能会更好，尽管更早积累经验也有助于提高质量。无论如何，这个过程并不快速。
- en: It's uncertain how long it will take the IETF to finalize the new standards.
    In the meantime, QUIC adoption is [growing](https://pulse.internetsociety.org/technologies),
    with support available in one form or another in [every major browser](https://caniuse.com/http3).
    One of the key concerns of QUIC's designers was avoiding [protocol ossification](/Articles/745590),
    but QUIC's anti-ossification design choices will be of little use if further improvements
    to the protocol are stymied by the slow-moving nature of the standardization process.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 目前还不确定IETF完成新标准的时间。与此同时，QUIC的采用率正在[增长](https://pulse.internetsociety.org/technologies)，各大主流浏览器都以某种形式支持[QUIC](https://caniuse.com/http3)。QUIC设计者的一个关键考虑是避免[协议僵化](/Articles/745590)，但如果标准化进程的缓慢性妨碍了协议的进一步改进，那么QUIC的抗僵化设计选择可能无济于事。
- en: '* * *'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: (
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: '[Log in](https://lwn.net/Login/?target=/Articles/964377/)'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[登录](https://lwn.net/Login/?target=/Articles/964377/)'
- en: to post comments)
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 发表评论)
