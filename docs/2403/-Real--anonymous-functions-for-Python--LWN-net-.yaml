- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:49:42'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:49:42'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: '"Real" anonymous functions for Python [LWN.net]'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '"真正"的匿名函数用于 Python [LWN.net]'
- en: 来源：[https://lwn.net/Articles/964839/](https://lwn.net/Articles/964839/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://lwn.net/Articles/964839/](https://lwn.net/Articles/964839/)
- en: '| **Did you know...?**LWN.net is a subscriber-supported publication; we rely
    on subscribers to keep the entire operation going. Please help out by [buying
    a subscription](/subscribe/) and keeping LWN on the net. |'
  id: totrans-split-6
  prefs: []
  type: TYPE_TB
  zh: '| **你知道吗...?**LWN.net 是一份由订阅者支持的出版物；我们依赖订阅者来维持整个运营。请通过[购买订阅](/subscribe/)支持我们，让
    LWN.net 继续在线上运营。 |'
- en: By **Jake Edge**
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由**Jake Edge**撰写
- en: March 19, 2024
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年3月19日
- en: There are a number of different language-enhancement ideas that crop up with
    some regularity in the Python community; many of them have been debated and shot
    down multiple times over the years. When one inevitably arises anew, it can sometimes
    be difficult to tamp it down, even if it is unlikely that the idea will go any
    further than the last N times it cropped up. A recent discussion about "real"
    anonymous functions follows a somewhat predictable path, but there are still reasons
    to participate in vetting these "new" ideas, despite the tiresome, repetitive
    nature of the exercise—examples of recurring feature ideas that were eventually
    adopted [definitely exist](/Articles/808836/).
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 社区中经常出现一些不同的语言增强想法；多年来，许多这些想法已经被讨论和否决多次。即使一个新的想法不太可能进一步发展，它有时仍然很难被压制。最近关于“真正”匿名函数的讨论遵循了一种可以预见的路径，但仍然有理由参与审核这些“新”想法，尽管这种练习的重复性和单调性——确实存在已被采纳的重复功能想法的例子[定义在这里](/Articles/808836/)。
- en: At the end of January, Dan D'Avella [asked](https://discuss.python.org/t/why-not-real-anonymous-functions/44513)
    why Python did not have "<q>*real* anonymous functions a la JavaScript or Rust</q>".
    While Python functions are regular objects that can be assigned to a variable
    or passed to another function, that is not reflected in the syntax for the language,
    in his opinion. There is, of course, [`lambda`](https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions),
    "<q>but its usefulness is quite limited and its syntax is frankly a bit cumbersome</q>".
    He wondered if more flexible, full-on anonymous functions had been proposed before,
    saying that he had not found any PEPs of that nature.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一月底，Dan D'Avella [问](https://discuss.python.org/t/why-not-real-anonymous-functions/44513)
    为什么 Python 没有类似 JavaScript 或 Rust 的“*真正*匿名函数”。虽然 Python 函数是常规对象，可以分配给变量或传递给另一个函数，但在他看来，这并未反映在语言的语法中。当然，有
    [`lambda`](https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions)，“*但它的用处相当有限，其语法实际上有些笨重*”。他想知道是否曾经提出过更灵活、完全匿名函数的建议，并表示他没有找到任何类似的
    PEP。
- en: 'Python has two ways to define functions, [`def`](https://docs.python.org/3/reference/compound_stmts.html#function-definitions)
    for named functions and `lambda` for anonymous functions. While named functions
    can contain multiple statements, `lambda` is an expression that [cannot contain
    any statements](https://docs.python.org/3/faq/design.html#why-can-t-lambda-expressions-contain-statements);
    it returns a function object that evaluates an expression with the parameters
    given:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python 有两种定义函数的方式，[`def`](https://docs.python.org/3/reference/compound_stmts.html#function-definitions)
    用于命名函数，`lambda` 用于匿名函数。虽然命名函数可以包含多个语句，`lambda` 是一个不能包含任何语句的表达式；它返回一个函数对象，该对象使用给定的参数计算表达式：
- en: '[PRE0]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'That creates an anonymous function and calls it with a parameter of six, but
    that is not a particularly idiomatic use of `lambda`. As described in an [LWN
    article](/Articles/847960/) on proposals for alternative syntax for `lambda`,
    a common use of the facility is to provide a way for some library functions to
    extract the actual arguments they should use, as with:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它创建了一个匿名函数，并使用参数六调用它，但这不是 `lambda` 的特别习惯用法。如[LWN 文章](/Articles/847960/)中所述，关于
    `lambda` 的替代语法提案，该功能的常见用途是为某些库函数提供提取它们应使用的实际参数的方法，如：
- en: '[PRE1]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: That uses a lambda expression to extract the second element of each tuple, which
    is used as the sort key.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用 lambda 表达式来提取每个元组的第二个元素作为排序键。
- en: In a response to D'Avella, David Lord [wondered](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/3)
    if he was asking for "multi-line lambdas", which is an idea that has come up many
    times over the years. While a lambda expression can actually span more than one
    physical line, using the `\` line-continuation character, the restriction to a
    single expression greatly limits what lambdas can do. For more complex computation,
    named functions, which can be limited to the local scope to avoid any name-collision
    problems, are the way to go, as a [2006 blog post](https://www.artima.com/weblogs/viewpost.jsp?thread=147358)
    from Guido van Rossum stated. In his opinion, there is no Pythonic way to embed
    a multi-statement construct in the middle of an expression.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在对D'Avella的回应中，David Lord [想知道](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/3)是否他在询问“多行lambda”，这个想法多年来已经出现过多次。虽然lambda表达式实际上可以跨越多个物理行，使用`\`作为行继续字符，但限制为单个表达式极大地限制了lambda的功能。对于更复杂的计算，最好使用命名函数，在本地作用域内可以避免任何名称冲突问题，正如Guido
    van Rossum在[2006年的博客文章](https://www.artima.com/weblogs/viewpost.jsp?thread=147358)中所述。在他看来，没有一种Pythonic的方法可以在表达式中嵌入多语句结构。
- en: Lord pointed out that "<q>there are years if not *decades* of previous iterations</q>"
    of discussions about multi-statement lambdas; he linked to Van Rossum's post to
    show some of that history and why it is believed that there are unsolvable problems
    in providing the feature. The problem, in a nutshell, is that Python blocks are
    delineated using white space, not braces or keywords like `begin` and `end`, so
    any expression used to create a function with multiple statements would need a
    way to incorporate white space—or it will not look like Python at all. Van Rossum,
    though, said that even if acceptable syntax could be found, he still objected
    to the idea of adding lots of complexity to `lambda` in order to avoid something
    that is "<q>only a minor flaw</q>".
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: Lord指出，“<q>关于多语句lambda的讨论已经有了数年甚至*数十年*的前期迭代</q>”，他链接到Van Rossum的帖子展示了部分历史及为何认为提供这一功能存在无法解决的问题。简言之，问题在于Python块使用空白来界定，而不是大括号或关键字像`begin`和`end`，因此任何用于创建具有多语句的函数的表达式都需要一种方法来包含空白，否则它看起来将一点也不像Python。即使可以找到可接受的语法，Van
    Rossum也表示反对通过增加大量复杂性来避免“<q>只是一个小缺陷</q>”。
- en: D'Avella [said](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/4)
    that Van Rossum's opinion may have been justified 18 years ago, but may no longer
    be so, "<q>especially in light of developments in other languages</q>". Beyond
    that, Python itself has changed quite a bit over that time; "<q>Try to imagine
    using `match` in Python</q>" back when that post was written. While it is true
    that there have been plenty of changes in the intervening years, D'Avella did
    not specify how those changes provided reasons to modify the longstanding decision
    to maintain the restrictions on `lambda`, as several in the thread noted.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: D'Avella [说过](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/4)，Van
    Rossum的观点在18年前可能是有道理的，“<q>特别是考虑到其他语言的发展</q>”。此外，Python本身在这段时间内也发生了相当大的变化；“<q>试想一下在当时写这篇文章时在Python中使用`match`</q>”。虽然确实有许多变化，但D'Avella并未具体说明这些变化如何提供理由修改长期保持的对`lambda`限制的决定，正如讨论串中几位成员所指出的那样。
- en: 'Terry Jan Reedy [said](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/8)
    that one of the hallmarks of Python is its readability and that adding more complicated
    `lambda` expressions runs counter to that. Both for debugging and testing purposes,
    named functions are superior, except for the simplest expressions: "<q>Lambda
    expressions work best when obvious enough to not need testing and when unlikely
    to be a direct cause of an exception.</q>" In practice, the current lambdas are
    generally expressive enough, Reedy said.'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: Terry Jan Reedy [说过](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/8)，Python
    的显著特点之一是其可读性，而添加更复杂的`lambda`表达式则与此背道而驰。无论是调试还是测试，命名函数都更胜一筹，除非是最简单的表达式：“<q>当`lambda`表达式足够明显以不需要测试，并且不太可能直接导致异常时，它们的效果最佳。</q>”在实践中，目前的lambda通常表达力已经足够，Reedy表示。
- en: 'D''Avella [dismissed](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/11)
    that as a "<q>perfectly valid</q>" opinion, but one that he disagreed with; based
    on his experience with other languages, he believes that "<q>anonymous function
    literals are an elegant and useful construct</q>". The problem, though, as Paul
    Moore [pointed out](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/13),
    is that there is a process that needs to be followed so that the core developers
    will reconsider a longstanding decision of this nature; someone needs to explain
    why the objections raised before are no longer valid:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: D'Avella [否定](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/11)
    这个看法为“<q>完全有效</q>”，但他不同意这个观点；基于他对其他语言的经验，他认为“<q>匿名函数文字是一种优雅且有用的构造</q>”。然而，正如Paul
    Moore [指出的](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/13)，问题在于有一个需要遵循的过程，以便核心开发人员重新考虑这类长期性质的决定；有人需要解释为什么之前提出的反对意见现在不再有效：
- en: Maybe if you picked one or two of those, and explained precisely why they don't
    apply any more, that might be a better argument than simply "everything changes,
    so let's propose something that's been rejected before, one more time".
  id: totrans-split-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 或许如果你选择其中一两个，并且详细解释为什么它们不再适用，这可能比仅仅“一切都在变化，所以让我们再次提出曾经被拒绝过的东西”更有说服力。
- en: There may be perfectly good reasons why Python should now support anonymous
    functions. But if no-one ever puts together a proposal that actually *addresses*
    the reasons why this idea has failed so many times before, we'll never know.
  id: totrans-split-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 也许现在Python应该支持匿名函数有完全正当的理由。但是如果没有人真正提出一个能够*解决*为什么这个想法之前失败了那么多次的提案，我们永远不会知道。
- en: Part of the problem is that it is difficult to track down the previous discussions
    of the feature, D'Avella [said](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/24).
    He had expected to find a rejected PEP, but did not; his searches for other discussions
    [were not particularly successful](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/21)
    either. Reedy [pointed to](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/36)
    a number of different sources for discussions, which are scattered over several
    mailing lists and, more recently, the [Ideas category](https://discuss.python.org/c/ideas/6)
    on the Python forum. Part of the disconnect may be that D'Avella is wondering
    about "anonymous functions", but the discussions in Python circles generally revolve
    around `lambda`, since that is the existing mechanism in the language. One suspects
    he would have had more success searching using the term "lambda" since a multi-statement
    `lambda` is a real anonymous function, as he [agreed](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/27).
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 问题的一部分在于很难追踪以前关于这个特性的讨论，D'Avella [说](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/24)。他原本希望找到一个被拒绝的PEP，但没有找到；他对其他讨论的搜索[并不特别成功](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/21)。Reedy
    [指出](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/36)了一些不同讨论的来源，这些讨论分散在几个邮件列表和最近的Python论坛的[Ideas分类](https://discuss.python.org/c/ideas/6)中。这种脱节的部分可能是因为D'Avella在考虑“匿名函数”，而Python圈子的讨论通常围绕着`lambda`，因为这是语言中现有的机制。人们怀疑他使用术语“lambda”进行搜索会更成功，因为多语句的`lambda`是一个真正的匿名函数，正如他[同意的](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/27)。
- en: 'More links to previous discussions can be found in a [post](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/38)
    from Mike Miller. A [thread](https://mail.python.org/archives/list/python-ideas@python.org/thread/KTRI2NOWA2YGFHOHQ2DFVD2O4UBU5ADY/#XS6P33QMBPRZ2C563OPTWG7NJRZ2K7VZ)
    he pointed to leads to a [2009 post](https://mail.python.org/archives/list/python-ideas@python.org/message/GJ7Z73UVWTVUJDILWWAIMH3VMMTH424O/)
    from Alyssa Coghlan that "<q>sums up the major problem</q>" with any proposal,
    [according to Eric V. Smith](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/39).
    Coghlan said:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于先前讨论的链接可以在Mike Miller的[帖子](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/38)中找到。他指出的一个[线程](https://mail.python.org/archives/list/python-ideas@python.org/thread/KTRI2NOWA2YGFHOHQ2DFVD2O4UBU5ADY/#XS6P33QMBPRZ2C563OPTWG7NJRZ2K7VZ)导向了Alyssa
    Coghlan的[2009年的帖子](https://mail.python.org/archives/list/python-ideas@python.org/message/GJ7Z73UVWTVUJDILWWAIMH3VMMTH424O/)，Eric
    V. Smith认为这篇文章“<q>总结了这个提案的主要问题</q>”。Coghlan说：
- en: However, for Python, the idea of having anonymous blocks runs headlong into
    the use of indentation for block delineation. You have to either come up with
    a non-indentation based syntax for the statements inside the anonymous blocks,
    essentially inventing a whole new language, or you have to embed significant whitespace
    inside an expression rather than only having it between statements.
  id: totrans-split-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Nobody has come up with a solution to that mismatch which is superior to just
    naming the block and using a normal def statement to create it.
  id: totrans-split-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For Smith, there is no point in looking further until that is resolved:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: I know people will disagree, but for me, if the syntax problem were resolved,
    then I'd welcome "expressions that produce functions consisting of multiple statements",
    commonly called multi-line lambdas.
  id: totrans-split-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: But without a solution to the syntax issue, the whole argument is not worth
    having.
  id: totrans-split-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'D''Avella [took a stab](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/45)
    at some possible syntax for the feature, which, naturally, relied on delimiters
    around the anonymous block. He used `do` and `end`, but others have tried parentheses
    or brackets, all of which run aground because they do not look "Pythonic", at
    least to some. Meanwhile, Clint Hepner [argued](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/52)
    that some seem to simply want anonymous functions for Python because they are
    used frequently—and liked, at least by some—in JavaScript. D''Avella, playing
    the devil''s advocate, [wondered](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/53)
    what the problem was with that line of thinking; multiple different Python features
    have come from elsewhere after all. But Brendan Barnwell [said](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/60)
    that those features came to Python, not simply because they existed elsewhere,
    but because they were useful in the language:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: They were added because another language provided some inspiration for a feature
    to add *to Python* that might be helpful when writing code *in Python*. It's totally
    great to have interchange of ideas between different languages, but each language
    will choose the features that mesh well with its existing constructs.
  id: totrans-split-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In order to try to head off future proposals of this sort, Neil Girdhar [suggested](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/62)
    adding a page to the [Python wiki](https://wiki.python.org/moin/FrontPage) that
    would simply [describe the proposed change](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/65),
    its pros and cons, and have links to earlier discussions. Despite some skepticism
    that a page of that nature would actually help, he created a [page for commonly
    suggested features](https://wiki.python.org/moin/CommonIdeas) and linked a [new
    page for multi-line lambdas](https://wiki.python.org/moin/MultiLineLambda) to
    it. Meanwhile, D'Avella's [attempt](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/80)
    to attract a core developer to sponsor a PEP that he would write ("<q>with the
    expectation that it will be rejected</q>") seems to have gone nowhere.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了试图阻止此类未来提案，Neil Girdhar [建议](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/62)在[Python维基](https://wiki.python.org/moin/FrontPage)中添加一个页面，简单描述[提议的更改](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/65)，其利弊，并链接到先前的讨论。尽管有人怀疑这样的页面是否真的会有所帮助，他创建了[一个常见建议功能页面](https://wiki.python.org/moin/CommonIdeas)，并将[一个新的多行lambda页面](https://wiki.python.org/moin/MultiLineLambda)链接到了其中。与此同时，D'Avella的[尝试](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/80)吸引核心开发人员赞助他将要写的PEP
    ("<q>带着它会被拒绝的预期</q>") 似乎毫无进展。
- en: 'There were some examples of possible use cases for the feature, including [one
    from Chris Angelico](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/59)
    and [another from "Voidstar"](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/98),
    but Cornelius Krupp [pointed out](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/100)
    that, once again, it is not use cases that are lacking. The use cases need to
    be compelling enough to overcome the other, syntactic, objections. While D''Avella
    [agreed](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/104)
    with that, he noted that there were questions about the justification for the
    feature in the thread. Krupp [said](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/105)
    that the syntax was just the first hurdle: "<q>Even if people find a good syntax
    there is still quite a bit of work to do in [convincing] the python community
    and the core devs that it is actually a good idea.</q>"'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些关于该功能可能用例的示例，包括来自[Chris Angelico](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/59)和[另一个来自"Voidstar"](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/98)，但Cornelius
    Krupp [指出](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/100)，再次强调，不是缺少用例。用例需要足够引人注目，以克服其他语法上的异议。而D'Avella
    [同意](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/104)，但他注意到在该线程中关于这个功能的正当性存在疑问。Krupp
    [说道](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/105)，语法只是第一个障碍：“<q>即使人们找到一个好的语法，说服Python社区和核心开发人员认为这实际上是一个好主意还有相当多的工作要做。</q>”
- en: 'Python famously uses white space, rather than delimiters, to structure its
    code and it is hard to imagine that changing—ever. Python itself will happily
    agree:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: Python以使用空白符而不是分隔符来结构化其代码而闻名，难以想象这会改变——永远。Python本身将乐意同意：
- en: '[PRE2]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Meanwhile, the cost of a name, quite possibly in a local scope, is pretty low;
    the readability of the resulting code is likely to be better as well. There would
    certainly be value in having a rejected PEP to point to when the topic inevitably
    rears its head again, though it may be hard to motivate people to work on a "doomed"
    proposal. The topic will undoubtedly be raised again, though; as Krupp [pointed
    out](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/79),
    it has come up at least three other times in the last few years.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，一个名称的成本，在本地范围内，很可能非常低；生成的代码的可读性可能也会更好。当然，在“注定失败”的提案上工作可能会有一定的价值。尽管可能很难激励人们去工作。该主题无疑会再次被提起，正如Krupp
    [指出的](https://discuss.python.org/t/why-not-real-anonymous-functions/44513/79)，在过去几年中至少已经提出了三次。
- en: It is, however, a persistent problem in the Python world; people show up with
    new ideas, or one that has been discussed time and time again, without really
    wanting to put in the work to see it to completion. Sometimes that work is in
    finding the earlier discussions and showing why the objections raised then are
    no longer valid—using examples of where existing code, perhaps from the Python
    standard library, could be improved. But as we have [seen before](/Articles/888945/),
    more than [just once](/Articles/891398/), people are often so enamored with their
    idea that they are surprised that it does not simply sweep all objections aside
    because of its clear superiority. In a long-established language or other project,
    however, ideas take a lot of work before they bear fruit; proponents would be
    well-advised to keep that in mind.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: (
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: '[Log in](https://lwn.net/Login/?target=/Articles/964839/)'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: to post comments)
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
