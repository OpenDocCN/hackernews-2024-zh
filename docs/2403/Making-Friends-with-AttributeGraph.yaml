- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:43:14'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:43:14'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Making Friends with AttributeGraph
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 AttributeGraph 交朋友
- en: 来源：[https://saagarjha.com/blog/2024/02/27/making-friends-with-attributegraph/](https://saagarjha.com/blog/2024/02/27/making-friends-with-attributegraph/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'Source: [https://saagarjha.com/blog/2024/02/27/making-friends-with-attributegraph/](https://saagarjha.com/blog/2024/02/27/making-friends-with-attributegraph/)'
- en: 'If you’ve used [SwiftUI](https://developer.apple.com/xcode/swiftui/) for long
    enough, you’ve probably noticed that the public Swift APIs it provides are really
    only half the story. Normally inconspicuous unless something goes *exceedingly*
    wrong, the private framework called AttributeGraph tracks almost every single
    aspect of your app from behind the scenes to make decisions on when things need
    to be updated. It would not be much of an exaggeration to suggest that this C++
    library is actually what runs the show, with SwiftUI just being a thin veneer
    on top to draw some platform-appropriate controls and provide a stable interface
    to program against. True to its name, AttributeGraph provides the foundation of
    what a declarative UI framework needs: a graph of attributes that tracks data
    dependencies.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 [SwiftUI](https://developer.apple.com/xcode/swiftui/) 已经有一段时间了，你可能已经注意到它提供的公共
    Swift API 实际上只是故事的一半。通常情况下，除非出现 *非常* 大的问题，否则不显眼的私有框架 AttributeGraph 会从幕后跟踪你应用程序的几乎每个方面，以便在需要更新时做出决策。可以毫不夸张地说，这个
    C++ 库实际上是控制一切的核心，SwiftUI 只是在上面加了一层薄薄的外壳，用于绘制一些适合平台的控件，并提供一个稳定的编程接口。与其名字相符，AttributeGraph
    为声明式 UI 框架提供了必要的基础：跟踪数据依赖关系的属性图。
- en: Mastering how these dependencies work is crucial to writing advanced SwiftUI
    code. Unfortunately, being a private implementation detail of a closed-source
    framework means that searching for AttributeGraph online usually only yields results
    from people desperate for help with their crashes. (Being deeply unpleasant to
    reverse-engineer definitely doesn’t help things, though [some](https://www.fivestars.blog/articles/lets-build-state/)
    [have](https://medium.com/@kateinoigakukun/inside-swiftui-how-state-implemented-92a51c0cb5f6)
    [tried](https://kyleye.top/posts/demystify-attributegraph-1/).) Apple [has](https://developer.apple.com/videos/play/wwdc2020/10040)
    [several](https://developer.apple.com/videos/play/wwdc2021/10022) [videos](https://developer.apple.com/videos/play/wwdc2023/10160/)
    that go over the high-level design, but unsurprisingly they shy away from mentioning
    the existence of AttributeGraph itself. Other developers do, but [only fleetingly](https://chris.eidhof.nl/presentations/day-in-the-life/).
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 精通这些依赖关系是编写高级 SwiftUI 代码的关键。不幸的是，由于它是闭源框架的私有实现细节，因此在线搜索 AttributeGraph 通常只能找到那些在应对崩溃时急需帮助的人的结果。（尽管逆向工程相当令人不快，但是
    [一些人](https://www.fivestars.blog/articles/lets-build-state/) [试过](https://medium.com/@kateinoigakukun/inside-swiftui-how-state-implemented-92a51c0cb5f6)
    [试图](https://kyleye.top/posts/demystify-attributegraph-1/).）Apple [提供了](https://developer.apple.com/videos/play/wwdc2020/10040)
    [几个](https://developer.apple.com/videos/play/wwdc2021/10022) [视频](https://developer.apple.com/videos/play/wwdc2023/10160/)，介绍了高层设计，但并不意外地回避了提及
    AttributeGraph 的存在。其他开发人员确实提到过，但 [只是一笔带过](https://chris.eidhof.nl/presentations/day-in-the-life/)。
- en: This puts us in a real bind! We can `Self._printChanges()` all day and still
    not understand what is going on, especially if problems we have relate to *missing*
    updates rather than too many of them. To be honest, figuring out what AttributeGraph
    is doing internally is not all that useful unless it is not working correctly.
    We aren’t going to be calling those private APIs anyways, at least not easily,
    so there’s not much point exploring them. What’s more important is understanding
    what SwiftUI does and how the dependencies need to be set up to support that.
    We can take a leaf out of the generative AI playbook and go with the approach
    of just making guesses as how things are implemented. Unlike AI, we can also test
    our theories. We won’t know whether our speculation is right, but we can definitely
    check to make sure we’re not wrong!
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们陷入了真正的困境！我们可以整天调用 `Self._printChanges()`，但仍然无法理解到底发生了什么，特别是如果我们的问题与 *丢失*
    更新有关而不是更新过多的话。老实说，除非 AttributeGraph 工作不正常，否则了解它内部的运行机制并没有多大用处。我们不会轻易调用那些私有 API，所以探索它们没有太多意义。更重要的是理解
    SwiftUI 的作用以及设置依赖关系以支持它的需要。我们可以借鉴生成式 AI 的方法，尝试猜测事物的实现方式。与 AI 不同的是，我们还可以测试我们的理论。我们不会知道我们的猜测是否正确，但我们肯定可以检查以确保我们没有错！
- en: Introducing `Setting`
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入 `Setting`
- en: 'As we explore how SwiftUI propagates changes, it will be very helpful to have
    an real example to work with. Say hello to `Setting`, a simple `UserDefaults`
    wrapper similar to [`AppStorage`](https://developer.apple.com/documentation/swiftui/appstorage):'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们探索 SwiftUI 如何传播更改时，拥有一个真实的例子将非常有帮助。请欢迎使用 `Setting`，一个类似于 [`AppStorage`](https://developer.apple.com/documentation/swiftui/appstorage)
    的简单的 `UserDefaults` 包装器：
- en: '[PRE0]'
  id: totrans-split-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We haven’t implemented it yet, but it should be fairly straightforward to see
    how you might use this:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有实现它，但是看起来很容易看到你可能如何使用它：
- en: '[PRE1]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Our API is slightly more explicit about how unset values should work, but it
    is otherwise almost identical to Apple’s: we even expose a `Binding` as the `projectedValue`
    so `Setting` can be used directly with SwiftUI controls. Here’s what a preliminary
    implementation might look like. None of it should be particularly surprising:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 API 更加明确地定义了未设置值应该如何工作，但除此之外几乎与苹果的一致：我们甚至将 `Binding` 暴露为 `projectedValue`，以便
    `Setting` 可以直接与 SwiftUI 控件一起使用。下面是初步实现的样子。其中任何内容都不应该特别令人惊讶：
- en: '[PRE2]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This *almost* works. However, we have a compiler error in our implementation
    for `projectedValue`–it captures `self`, and when the `Binding` updates it tries
    to call `wrappedValue`’s setter. But since `self` is immutable, the compiler will
    not let us modify `wrappedValue`. Or will it?
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这 *几乎* 可以工作。然而，在我们的实现中有一个编译器错误，针对 `projectedValue` —— 它捕获了 `self`，当 `Binding`
    更新时，它试图调用 `wrappedValue` 的设置器。但由于 `self` 是不可变的，编译器不会允许我们修改 `wrappedValue`。或者说，它会？
- en: 'We’re not really modifying `self` here: the setter just writes to user defaults.
    In particular, it doesn’t touch any members of the struct at all, so `self` doesn’t
    change. Swift has a special way to accommodate this: a `nonmutating` setter. This
    is actually what `State` uses itself to let you assign to it, even in contexts
    where the view that owns it is not mutable: it stores its state outside of itself,
    just like we do. Let’s update our implementation of `wrappedValue` to use this.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里并没有真正修改 `self`：设置器只是写入用户默认设置。特别是，它根本不触及结构体的任何成员，因此 `self` 不会改变。Swift 有一种特殊的方法来适应这种情况：一个
    `nonmutating` 的设置器。这实际上是 `State` 自己使用的方式，让你在它所属的视图不可变的情况下也能对其进行赋值：它将其状态存储在外部，就像我们所做的一样。让我们更新我们的
    `wrappedValue` 实现来使用这个。
- en: '[PRE3]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With that, the code compiles, so let’s take it for a spin:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，代码编译通过了，让我们试试：
- en: '[PRE4]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Handling updates
  id: totrans-split-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理更新
- en: If you copied the code above into a test project of your own, you might have
    noticed that it doesn’t exactly seem to work as we’d hope. You can toggle the
    switch all you want, but the UI doesn’t update. What’s going on? We made a `Binding`
    and everything!
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将上面的代码复制到你自己的测试项目中，你可能已经注意到它并没有像我们希望的那样工作。你可以随意切换开关，但 UI 并不会更新。怎么回事？我们已经创建了一个
    `Binding` 啊！
- en: With a debugger, it’s easy to verify that the `Toggle` *is* actually invoking
    the `Binding` callback as it should. When we flip the switch, it calls through
    the set implementation, and from there to our `wrappedValue` setter, which writes
    to user defaults. In fact if we relaunch the app the UI will read the correct
    state that has been being saved in user defaults all this time, so the problem
    is in how SwiftUI updates the view rather than the backing store for the value.
    Since we have a debugger attached, we can see that the getter does get called
    a few times, which must be how the framework sets the initial state of the view.
    After that, though, the UI does not update, even though the getter returns the
    new value. Notably, `ContentView`’s body is not evaluated again, even though it
    should because of the new state.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用调试器，很容易验证 `Toggle` *确实* 像应该的那样调用 `Binding` 回调。当我们切换开关时，它调用了设置实现，然后到我们的 `wrappedValue`
    设置器，它写入到用户默认设置。事实上，如果重新启动应用程序，UI 将读取在用户默认设置中保存的正确状态，因此问题在于 SwiftUI 如何更新视图而不是值的后备存储。由于我们附加了调试器，我们可以看到
    getter 被调用了几次，这必须是框架设置视图初始状态的方式。不过，在此之后，UI 不会更新，即使 getter 返回了新值。值得注意的是，即使应该因为新状态而重新评估
    `ContentView` 的 body，它也没有被重新评估。
- en: Examining `State`
  id: totrans-split-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查 `State`
- en: 'If we replace `Setting` in our sample code with `State`, things work as expected.
    This is entirely unsurprising, because this is how we’re *supposed* to do things.
    Somehow SwiftUI knows when `State`s change and triggers a view update in response.
    To do this, it must somehow be instrumenting stores to the underlying value…wait,
    this is exactly what property wrappers are for! When you call the setter you get
    a chance to run your own code, and `State` must use it to tell SwiftUI about the
    change. Putting aside our earlier conversation about `nonmutating`, `State` probably
    looks something like this:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在示例代码中用`State`替换`Setting`，一切都按预期工作。这完全不足为奇，因为这是我们*应该*做的事情。不知何故，SwiftUI知道何时`State`发生变化并触发视图更新。为了做到这一点，它必须以某种方式监视基础值的存储……等等，这正是属性包装器的作用！当您调用setter时，您有机会运行自己的代码，而`State`必须使用它告诉SwiftUI有关变化的情况。撇开我们之前关于`nonmutating`的对话，`State`可能看起来像这样：
- en: '[PRE5]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Even though this explains why our code doesn’t work, this is still a problem
    for us, because *we* can’t call this method ourselves. It’s internal to SwiftUI,
    and only `State` (and the other built-in types) know how to do it. However, we
    don’t have to. The framework provides an affordance to let solve our issue: composing
    property wrappers.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这解释了为什么我们的代码不起作用，但对我们来说仍然是一个问题，因为*我们*不能自己调用这个方法。这是SwiftUI的内部事务，只有`State`（和其他内置类型）知道如何做。但是，我们不必这样做。该框架提供了一个允许解决我们问题的工具：组合属性包装器。
- en: Composition with `DynamicProperty`
  id: totrans-split-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`DynamicProperty`进行组合
- en: 'Since only built-in types know how to update the UI, SwiftUI allows us to extend
    this system with *composition*. If a property wrapper contains a `State` inside
    of itself, then mutating it can initiate a refresh. Let’s make a few changes to
    the property wrapper (and skip the parts that remain unmodified):'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于只有内置类型知道如何更新UI，SwiftUI允许我们通过*组合*扩展这个系统。如果一个属性包装器内部包含一个`State`，那么对其进行变异可以启动刷新。让我们对属性包装器进行一些更改（并跳过保持不变的部分）：
- en: '[PRE6]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note the addition of `value`, the new `State<T>` variable that we return instead.
    In the `wrappedValue` setter, we write to user defaults as before, but we also
    update `value`, which (as a `State`) can go and trigger a view refresh. Or, it
    would, but we’re not quite done yet. SwiftUI doesn’t know about the `State` we
    put inside our property wrapper yet: to let it peer inside and hook things up
    we need to conform `Setting` to the `DynamicProperty` protocol. We’ll look into
    why this needs to be the case a little later, but with the change this code finally
    works. Toggling the switch updates the UI and it also writes to defaults, and
    this value persists across launches. Success!'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意增加的`value`，我们返回的新`State<T>`变量。在`wrappedValue`的setter中，我们像以前一样写入用户默认设置，但我们还更新`value`，作为`State`，它可以触发视图刷新。或者说，本来可以的，但我们还没有完全完成。SwiftUI不知道我们放在属性包装器中的`State`：为了让它窥视并连接事物，我们需要将`Setting`符合`DynamicProperty`协议。稍后我们会详细探讨为什么需要这样做，但随着这些变化，此代码最终可行。切换开关会更新UI，并将其写入默认值，这个值跨启动保持不变。成功！
- en: Abusing dependencies
  id: totrans-split-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 滥用依赖关系
- en: 'Even though our design works, it’s a little…unpleasant? The “source of truth”
    is in two places: in the `State` variable `value`, and in user defaults. `UserDefaults`
    is plenty fast and doesn’t need us to cache values on its behalf. The old design
    we had, where defaults was the backing store and we talked to it directly, was
    definitely cleaner. If the `State` setter’s side effects are all we need, can
    we clean the code up a little bit? What if we did this?'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们的设计可行，但有点…不太愉快？“真理的源泉”存在于两个地方：在`State`变量`value`和用户默认设置中。`UserDefaults`非常快速，不需要我们代其缓存值。我们以前的设计更清晰，其中默认设置是备份存储，并且我们直接与其通信。如果`State`的setter副作用是我们所需的全部，我们能不能稍微整理一下代码？如果我们这样做呢？
- en: '[PRE7]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Even though we store things in `value` to trigger updates, we don’t use it as
    the source of truth anymore. Instead, we just return whatever user defaults has
    in it. In the last version we were careful to have it match `value` at all times,
    so this should produce the same value.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们将东西存储在`value`中以触发更新，但我们不再将其作为真理的源泉。相反，我们只返回用户默认设置中的内容。在上一个版本中，我们非常注意确保它始终与`value`匹配，因此这应该产生相同的值。
- en: 'If you try out this version, you’ll find that it doesn’t work anymore! The
    reason for this is actually quite subtle. If you’ve been following along so far
    and want a quick puzzle, see if you can debug what is going on before moving on
    to the next section. Hint: try printing `value` in `wrappedValue`’s getter.'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试这个版本，你会发现它不再工作了！这背后的原因实际上相当微妙。如果你迄今为止一直在跟进并且想快速解决一个谜题，看看你能否在进入下一节之前调试出发生了什么。提示：尝试在`wrappedValue`的getter中打印`value`。
- en: '* * *'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The hint I gave was slightly misleading. Yes, printing `value` in `wrappedValue`’s
    getter does tell you that its value matches what is in user defaults (well, except
    until it is set for the first time, but you can add that code back in and check
    that it doesn’t matter). But more importantly, **adding the print statement makes
    it work again!** If you remove the print statement, it stops working, and if you
    add it back, it works again.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我给出的提示有点误导。是的，在`wrappedValue`的getter中打印`value`确实告诉你，它的值与用户默认设置中的值匹配（嗯，直到第一次设置它之前，但你可以把那段代码加回去并检查一下，这并不重要）。但更重要的是，**添加打印语句使其再次工作了！**如果你删除打印语句，它就不再工作了；如果你重新添加它，它又会重新工作。
- en: 'If you test a little bit more, you’ll see that it’s not the print statement
    that’s important, but the access of `value` itself. Even this code works:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你再测试一下，你会发现重要的不是打印语句，而是`value`本身的访问。即使这段代码也可以工作：
- en: '[PRE8]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is not a fluke of the optimizer. `State.wrappedValue`’s getter actually
    does something special: it returns the value, but it also notes to SwiftUI that
    the value has been “read”. This is actually how SwiftUI optimizes view updates
    to only change parts of the UI that matter. When invoking a view’s body, it must
    keep a list of all the state that is read during the pass. If any of the state
    changes in the future, it knows which views to update based on which ones access
    that state, and it will skip redrawing views that are unrelated. For us, this
    means that we cannot just set `value` in our setter: we also have to access it
    in the getter, to indicate to SwiftUI that we depend on it.'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是优化器的偶然现象。`State.wrappedValue`的getter实际上有些特殊：它返回值，但它还告诉SwiftUI这个值已经“被读取”。这实际上是SwiftUI如何优化视图更新，只更改UI的部分内容。在调用视图的主体时，它必须保留在此过程中读取的所有状态的列表。如果将来状态发生任何更改，它根据访问该状态的视图来决定哪些视图需要更新，并且会跳过重绘与之无关的视图。对我们来说，这意味着我们不能只在setter中设置`value`：我们还必须在getter中访问它，以向SwiftUI指示我们依赖于它。
- en: 'It’s important to note at this point that this mechanism, while clever, is
    also somewhat crude. SwiftUI has no idea *what* we are doing with the value, only
    that we have accessed it. It cannot, because we can perform arbitrary computation
    with it to generate all of our “derived” properties. In fact the type of the `State`
    we update does not have to match the eventual dependent value (you can imagine
    a legitimate case where the `wrappedValue` was, say, the `description` of the
    `State`’s value). And we don’t even have to do anything with the value we access.
    It’s an access for the side effects of the access, and an update for the side
    effects of the update. This, you could argue, is a lot worse than our proper `State`-based
    solution, but it’s far more flexible. Here’s what it looks like (again, skipping
    redundant parts):'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点很重要，需要注意的是，尽管这种机制很聪明，但也有些粗糙。SwiftUI 并不知道我们对这个值做了什么，只知道我们已经访问过它。它不能知道我们可以对它进行任意计算来生成所有的“派生”属性。事实上，我们更新的`State`类型并不一定要与最终的依赖值匹配（你可以想象一个合理的情况，即`wrappedValue`可能是`State`值的`description`）。而且，我们甚至不必对我们访问的值做任何事情。这是访问的副作用和更新的副作用。你可以认为这比我们正确的基于`State`的解决方案要糟糕得多，但它更加灵活。看起来是这样的（再次跳过冗余部分）：
- en: '[PRE9]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`State` lifecycle'
  id: totrans-split-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`State` 生命周期'
- en: 'Our `Setting` is pretty neat, but it’s missing an important feature: user defaults
    can be updated externally, not just from the changes we make in the app. `UserDefaults`
    is [KVO compliant](https://developer.apple.com/documentation/foundation/userdefaults#2926902)
    to allow us to respond to these changes. Since we know how to set up dependencies
    ourselves, updating our code to handle this isn’t too hard:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Setting`相当不错，但它缺少一个重要的功能：用户默认设置可以从外部更新，不仅仅是从我们在应用程序中所做的更改。`UserDefaults`是[KVO兼容的](https://developer.apple.com/documentation/foundation/userdefaults#2926902)，以允许我们响应这些更改。因为我们知道如何自己设置依赖关系，更新我们的代码以处理这一点并不难：
- en: '[PRE10]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Unfortunately, we can’t use Swift’s type-safe `KeyPath`-based callback API because
    `key` is a string, so we need a bit more boilerplate involving a `NSObject` subclass.
    We can pass it the `State` that we’re using to manage updates and it can inform
    SwiftUI using that when the value changes. Otherwise, everything else can stay
    the same.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们不能使用 Swift 的类型安全的 `KeyPath` 回调 API，因为 `key` 是一个字符串，所以我们需要更多涉及 `NSObject`
    子类的样板代码。我们可以传递它我们用于管理更新的 `State`，它可以在值更改时通知 SwiftUI。否则，其他所有东西都可以保持不变。
- en: 'As you’ve probably guessed by now, this doesn’t work. At least it doesn’t break
    in-app behavior this time: it just doesn’t update when changes happen externally.
    While the KVO callback does get invoked, poking `_update` from inside it does
    not have any visible effects.'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你现在可能已经猜到的那样，这并不起作用。至少这次不会破坏应用内的行为：它只是在外部发生更改时不会更新。虽然 KVO 回调确实被调用，但从内部调用 `_update`
    却没有任何可见效果。
- en: Reflection introspection
  id: totrans-split-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 反射自省
- en: 'Even though `State` looks opaque to us, it must maintain some private data
    inside of itself. At the very least, it must have some sort of identity: even
    though it’s a struct, it manages data that has a lifetime longer than any particular
    `State` instance. This state (pun unintended) is not accessible to us, but holds
    the key to the behavior we are seeing. Even though we are trying to update the
    “same” `State` in our code, something must be different about the two for one
    change to go through and another to get dropped.'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管对我们来说 `State` 看起来是不透明的，但它必须在内部维护一些私有数据。至少，它必须有某种身份：即使它是一个结构体，它管理的数据的生命周期比任何特定的
    `State` 实例更长。这种状态（双关语未打算）对我们不可见，但它掌握了我们所看到的行为的关键。尽管我们试图在我们的代码中更新“相同”的 `State`，但对于一个更改通过而另一个被丢弃，必须有某些不同之处。
- en: 'Fortunately, Swift binaries typically contain fairly rich metadata that can
    help expose these internals for us. `Mirror` uses this to back its reflection
    APIs, but the debugger also knows how to read it, allowing us to poke around at
    the innards of types we don’t own. Let’s try that by printing `__update` (note
    the extra leading underscore to refer to the property wrapper itself) in `wrappedValue`,
    where we know it is ready to publish our changes:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Swift 二进制文件通常包含非常丰富的元数据，可以帮助我们暴露这些内部信息。`Mirror` 使用此元数据支持其反射 API，但调试器也知道如何读取它，从而允许我们深入挖掘我们不拥有的类型的内部。让我们尝试在
    `wrappedValue` 中打印 `__update`（注意额外的前导下划线来引用属性包装器本身），我们知道它已准备好发布我们的更改：
- en: '[PRE11]'
  id: totrans-split-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As expected, `State` is a composite of several properties. `_value` is fairly
    self-explanatory, and we guessed its existence earlier. However, the other property,
    `_location`, is a little more enigmatic. We can drill down into it further using
    LLDB (for example, we can see that there is a flag called `_wasRead`, as well
    as a connection to AttributeGraph), but before dive too deeply let’s do the same
    dump in `Observer.observeValue(forKeyPath:of:change:context:)`:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期，`State` 是由几个属性组成的复合体。`_value` 相当不言自明，我们之前猜测它的存在。然而，另一个属性 `_location` 则有些神秘。我们可以使用
    LLDB 进一步深入挖掘它（例如，我们可以看到有一个名为 `_wasRead` 的标志，以及与 AttributeGraph 的连接），但在深入之前，让我们在
    `Observer.observeValue(forKeyPath:of:change:context:)` 中做同样的转储：
- en: '[PRE12]'
  id: totrans-split-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Aha! This time, `_location` is `nil`. This `_location` must (among other things)
    contain the connection back to SwiftUI used when notifying it of changes. Since
    it’s not set at this point, there’s nobody there to listen to our updates.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 啊哈！这次，`_location` 是 `nil`。这个 `_location` 必须（除其他事项外）包含回到 SwiftUI 的连接，用于在通知时使用。因为在这一点上它还没有设置，所以没有人在那里监听我们的更新。
- en: It’s worth thinking about how this might happen. Even though both `Setting`
    and `Observer` are using the “same” `State`, they actually don’t get a coherent
    view of `_update`. `State`s are structs as mentioned earlier, so the `Observer`
    gets a *copy* of the state when it is initialized, which is when `Setting` is
    initialized. If we put a breakpoint in that initializer, we can see that `_location`
    *is* `nil` at that point. `Observer`’s own local copy is made then, and never
    sees any changes. On the other hand, `Setting`’s `_update` also has a `nil` `_location`
    at this point, but sometime in the future this changes to something valid. Who
    is doing it? When, and how?
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 值得考虑一下这种情况是如何发生的。尽管 `Setting` 和 `Observer` 都使用了“相同”的 `State`，但它们实际上并没有得到 `_update`
    的一致视图。正如前面提到的，`State` 是结构体，所以当 `Observer` 初始化时，它会得到状态的 *拷贝*，这是在 `Setting` 初始化时。如果我们在该初始化程序中设置断点，我们可以看到此时
    `_location` 是 `nil`。`Observer` 的本地副本是在那时创建的，并且从未看到任何更改。另一方面，`Setting` 的 `_update`
    在此时也有一个 `nil` 的 `_location`，但在未来的某个时刻，这将变为有效值。是谁在做这件事？何时以及如何做的？
- en: 'The answer, of course, is that SwiftUI does it for us. Shortly before a view’s
    body is computed, it goes through and sets the `_location` on all relevant `State`
    variables, so that they are ready for dependency tracking. Typically, a property
    wrapper does not have the ability to grab context from outside of itself (for
    example, by looking up who owns it). SwiftUI can use reflection much like we did
    to discover `State` members that it needs to install `_location` on, sidestepping
    this issue. To discover `State` in nested types, it needs a little bit of help:
    this is why we had to add a `DynamicProperty` conformance earlier. In that case,
    it uses reflection to look for `DynamicProperty` members instead and then does
    a search for `State` inside of those.'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，答案是 SwiftUI 为我们做了这些。在计算视图主体之前不久，它会遍历并在所有相关的`State`变量上设置`_location`，以便进行依赖跟踪时准备就绪。通常，属性包装器没有能力从自身外部获取上下文（例如，通过查找谁拥有它）。SwiftUI
    可以像我们一样使用反射来发现需要在上面安装`_location`的`State`成员，从而避开此问题。为了发现嵌套类型中的`State`，它需要一点帮助：这就是为什么我们之前必须添加`DynamicProperty`一致性的原因。在这种情况下，它使用反射来查找`DynamicProperty`成员，然后在其中查找`State`。
- en: 'SwiftUI does the same inside of our `Setting` property wrapper when the view
    that owns it goes for an update. This means that we need `Observer._update` to
    be set then, rather than in the initializer. Fortunately, the framework calls
    [`DynamicProperty.update()`](https://developer.apple.com/documentation/swiftui/dynamicproperty/update()-29hjo)
    at exactly the right point in time to let us do this. Let’s update `Setting` to
    use it:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: SwiftUI 在我们的`Setting`属性包装器内部执行相同的操作，当拥有它的视图进行更新时。这意味着我们需要在这时设置`Observer._update`，而不是在初始化器中。幸运的是，框架在恰到好处的时机调用[`DynamicProperty.update()`](https://developer.apple.com/documentation/swiftui/dynamicproperty/update()-29hjo)，让我们能够做到这一点。让我们更新`Setting`以使用它：
- en: '[PRE13]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With that, external updates (e.g. using `defaults write`) update the view as
    well. With that, our `Setting` is functional and ready to use with SwiftUI. Here’s
    the final version that we created, for reference:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，外部更新（例如使用`defaults write`）也会更新视图。有了这个，我们的`Setting`功能完善且可以在 SwiftUI 中使用。这是我们为参考创建的最终版本：
- en: While it is probably not worth using this code directly in your app (note the
    disclaimer above!), understanding how and why it works the way it does might be
    helpful in debugging your own SwiftUI projects.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然直接在您的应用中使用这段代码可能不值得（请注意上面的免责声明！），但理解它的工作原理和原因可能有助于调试您自己的 SwiftUI 项目。
