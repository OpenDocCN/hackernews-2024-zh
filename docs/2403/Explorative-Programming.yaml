- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:43:48'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:43:48'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Explorative Programming
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索性编程
- en: 来源：[https://blog.dziban.net/essays/explorative-programming/](https://blog.dziban.net/essays/explorative-programming/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.dziban.net/essays/explorative-programming/](https://blog.dziban.net/essays/explorative-programming/)
- en: <main class="page-content" aria-label="Content">
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main class="page-content" aria-label="Content">
- en: I am very bad at planning and visualizing what a program should look before
    I start writing it. I'm sure a lot of other developers are in that boat as well.
    I'd even venture to say that (almost?) all developers have a hard time doing that
    even if they think they understand the problem. Well, that's probably actually
    the root of the issue. Without writing or tackling them, it's hard to understand
    problems. You can only reach so far by thinking very hard in isolation.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常不擅长在开始编写程序之前规划和可视化程序的外观。我确信许多其他开发者也有同感。我甚至敢说，即使他们认为理解了问题，大多数开发者也很难做到这一点。嗯，这实际上可能是问题的根源。如果没有写作或解决问题，那就很难理解问题。在孤立地艰苦思考中，你只能走得这么远。
- en: In my case the only real way I can tackle a problem is to start writing code
    and playing with the problem and its data. I can talk about how I approach the
    process at another time, but I need to explore the problem space to find its limits,
    its edge cases, what areas are well lit and which are in shadows. I cannot think
    of this in the abstract.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，我能够真正解决问题的唯一途径就是开始编写代码并玩弄问题及其数据。我可以在另一个时间谈论我如何处理这个过程，但我需要探索问题空间以找到其极限、边缘情况、哪些区域被照亮，哪些在阴影中。我无法抽象地思考这个问题。
- en: '*I think I''m not alone in this. Hopefully?*'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*我想我在这方面并不孤单。希望是吧？*'
- en: The problem is that most development environments are not designed to help with
    the exploratory nature of this way of mapping a problem space. They seem to be
    designed around what the end-program needs to look like. Well-structured files
    in clean hierarchies and packaged within cleanly delimited interfaces and modules.
    Who can write those from the start? My guess is no-one.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于大多数开发环境并不设计用于帮助探索性问题映射的方式。它们似乎是围绕着最终程序应该是什么样来设计的。在整洁的层次结构和清晰的接口及模块中打包的良好结构文件。谁能从一开始就写好这些？我猜没有人。
- en: There is a *rigidness* in our current development environments that makes this
    important first step a lot harder than it should be. This rigidness actively works
    against us, and prevents us from understanding problems.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的开发环境存在一种*僵化性*，使得这一重要的第一步比本应该更加困难。这种僵化性实际上是对我们不利的，阻止我们理解问题。
- en: Rigidness
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rigidness
- en: What are the sources of this rigidness? I believe there are several and this
    is not a exhaustive list, just the ones that I find most annoying and the ones
    I've been looking for solutions for.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这种僵化性的根源是什么？我相信有几个原因，这并不是一个详尽的列表，只是我发现最令人讨厌的和我一直在寻找解决方案的原因。
- en: '**Long feedback cycles**, caused mainly by two things:'
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**长反馈周期**，主要由两个原因造成：'
- en: '**Build steps**, if you need to recompile or rebuild the system, it incurs
    a cost everytime you try something new.'
  id: totrans-split-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建步骤**，如果你需要重新编译或重建系统，每次尝试新功能都会产生成本。'
- en: '**Loss of program state**, even if your language doesn''t need a build step,
    most languages are not designed to keep your program state evolving as you evolve
    the code and their data structures. This is a huge source of friction, and it''s
    a huge cost to pay every time you wanna try something new.'
  id: totrans-split-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**程序状态丢失**，即使你的语言不需要构建步骤，大多数语言也没有设计好，以使你的程序状态随着代码和数据结构的演变而演变。这是一个巨大的摩擦源，并且每次想尝试新事物时都需要付出巨大的代价。'
- en: '**File based organization**, right from the start you need to start deciding
    what goes where. Of course I think most of us start with a single file, full of
    random functions and tests. But at some point this file becomes unbearable, impossible
    to find what you are looking for. At that point you have to make decisions and
    start splitting the file at logical points. Deal with what is private and what
    is not. It may not seem like much, but it''s very annoying.'
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于文件的组织**，从一开始就需要开始决定每个文件放什么。当然，我认为大多数人都是从一个单一文件开始，充斥着各种随机函数和测试。但是在某个时候，这个文件变得难以忍受，找不到你想要的东西。在那时，你必须做出决策，并从逻辑上开始分割文件。处理私有和非私有的内容。这可能看起来不是什么大不了的事，但却非常令人烦恼。'
- en: '**Bad system introspection**, most languages require you to implement text-based
    outputs for your internal data so you can actually inspect what is going on.'
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统自省不足**，大多数语言要求你为内部数据实现基于文本的输出，以便你实际检查正在发生的事情。'
- en: '**Bad solutions for tree-based exploration**, there are usually several directions
    that look good when tackling a problem and once you decide on one of them it''s
    very costly to try the rest. The version control systems we have are not designed
    for this kind of work, they require the user to create snapshots when the user
    wants. If they have forgotten to do it at some point, that snapshot is lost. And
    I can just speak for my experience here, but while I''m doing this exploratory
    work I never know what I wanna save and what not and what avenue will be worth
    exploring. I don''t wanna be thinking about any of that either.'
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于树形探索的不良解决方案**，当处理问题时通常有几个看起来不错的方向，一旦决定其中一个，尝试其余方向的代价很高。我们现有的版本控制系统并不是为这种工作而设计的，它们要求用户在需要时创建快照。如果用户在某个时刻忘记了这样做，那个快照就丢失了。我只能说说我的经验，但在进行这种探索性工作时，我从来不知道哪些内容值得保存，哪些不值得，以及哪些方向值得探索。我也不想考虑这些事情。'
- en: '**Bad Collaboration Story**, the same systems I talk about in the last point
    are also the way we do collaboration in software development right now, tools
    like `git` or `mercurial`. If they are a failure for tree-based exploration, then
    they cannot work to collaborate on exploration. They are already lacking the needed
    info for collaborating.'
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**糟糕的协作故事**，我在上一点谈到的同样适用于我们当前在软件开发中进行协作的方式，像是 `git` 或 `mercurial` 这样的工具。如果它们在基于树形探索方面是失败的，那么它们就无法用于协作探索。它们已经缺乏进行协作所需的信息。'
- en: This rigidness is creatin so much friction when it comes to tackling new and
    complex problems, both alone and in small teams. It requires so much upfront investment
    that I think we are missing out on a lot of new and interesting ideas because
    it's costly to do so.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这种刚性在面对新的和复杂的问题时造成了很大的摩擦，无论是独自工作还是小团队合作。它需要很多前期投入，我认为因此我们错过了很多新奇有趣的想法。
- en: '**If we had better exploratory programming tooling we could tackle more complex
    problems with less people**'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果我们有更好的探索性编程工具，我们可以用更少的人解决更复杂的问题**'
- en: There you go, that's my thesis. We need to have better, interactive, exploratory
    and *playful* development environments.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样，这就是我的论点。我们需要更好、更互动、更探索性和*富有乐趣*的开发环境。
- en: A step in this direction
  id: totrans-split-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在这个方向上迈出了一步
- en: Recently I've been spending more and more time writing Common Lisp after years
    of writing Python, Rust, C and Javascript/Typescript. And it's not only because
    of things like macros and definitely not because of the ecosystem. It's because
    it's the environment that more closely matches my development process. The feedback
    cycle is immediate, it allows very good introspection of every object in the system,
    and it makes a lot of effort to keep your program state after changing anything.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我花了越来越多的时间写 Common Lisp，这是我在多年写 Python、Rust、C 和 Javascript/Typescript 后的转变。这不仅仅是因为像宏之类的东西，绝对不是因为生态系统。而是因为它更接近于我的开发过程。反馈周期是即时的，它允许对系统中的每个对象进行很好的内省，并且在改变任何东西后保持程序状态的努力非常大。
- en: The amazing thing about Common Lisp as a development environment is that it
    covers the whole range, from exploring to production. It covers the high level,
    live reloading, macro writing, interactive side and the performance-oriented,
    debugging, fast, robust side that you want in order to deploy your systems.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: Common Lisp 作为开发环境的惊人之处在于，它涵盖了从探索到生产的整个范围。它涵盖了高级别、实时重载、宏编写、交互式侧面以及性能导向、调试、快速、健壮的侧面，这些你在部署系统时所需要的。
- en: It still requires you to use files, working in the REPL-only brings its own
    set of problems. REPL and files are hard to keep in sync. That's another thing
    that what I'm development helps with, if you remove the files, there's nothing
    to keep in sync.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 它仍然要求你使用文件，仅在 REPL 中工作会带来自己的一套问题。REPL 和文件很难保持同步。这就是我在开发中希望解决的另一个问题，如果你去掉文件，就没有东西需要保持同步了。
- en: And it offers no help for the last two points I made above.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 它对我上面提到的最后两点毫无帮助。
- en: An idea for what comes next
  id: totrans-split-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下一步的想法
- en: I've started work on an alternative system. It's not currently in a usable state
    but it's in a working state and I'm fairly close to dogfooding it.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经开始着手于一个替代系统。目前它还不能使用，但已经处于工作状态，我离自己使用它已经很接近了。
- en: I've decided to use Common Lisp as a base language for this development environment.
    I didn't want to have to create a whole language from scratch to test out these
    ideas, I tend to get into useless rabbitholes that detract from what I'm trying
    to do, not this time. Common Lisp as I said already has what I consider to be
    the local maxima for my workflow and has the tools to extend the language in the
    direction I want. It's the perfect testing grounds.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定以Common Lisp作为这个开发环境的基础语言。我不想从头开始创建一个完整的语言来测试这些想法，我倾向于进入无用的兔子洞，这会让我偏离我要做的事情，但这次不会。正如我所说，Common
    Lisp已经具备了我认为是我的工作流程的局部极大值，并且具备了扩展语言的工具。这是完美的测试场所。
- en: 'There are two features I''m starting with in this system:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '我在这个系统中要开始的两个特性是:'
- en: '**Non-linear editing of the source** Getting away from file based organization,
    you have a database of symbols and you can bring them and hide them as you please.
    There is a concept of a workspace, where you can see only the definitions for
    the symbols you need and nothing else. These workspaces can be saved and restored.
    That way you can have different "Notebooks", depending on the problem you are
    solving, with only the definitions you need at any given time. This solves the
    code organization problem and reduces the friction of starting something.'
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源码的非线性编辑**，摆脱基于文件的组织，您有一个符号数据库，可以根据需要显示或隐藏它们。还有一个工作区的概念，您只能看到您需要的符号定义，而不是其他任何内容。这些工作区可以保存和恢复。这样，您可以根据解决的问题，拥有只包含您需要的定义的不同“笔记本”。这解决了代码组织问题，并减少了启动过程中的摩擦。'
- en: '**Per-symbol history**, we keep the history of every single version of functions,
    `defvar`, `defparameter`, `defclass`, `defmacro`, etc you have created and sent
    to the REPL. You can navigate the tree, inspect the history, go back in time.
    This tree is built automatically as you re-define any symbol. You can diff between
    different states and even merge versions. This works at per-symbol granularity.
    This attempts to solve point number 4\. You can recurse into design sub-trees
    and go back in time without needing to manage history manually.'
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每符号历史**，我们保留了您创建并发送到REPL的每个函数、`defvar`、`defparameter`、`defclass`、`defmacro`等版本的历史记录。您可以导航树结构，检查历史记录，回溯时间。这棵树会随着您重新定义任何符号而自动构建。您可以在不同状态之间进行差异比较，甚至合并版本。这是以每个符号的粒度来解决第四点的尝试。您可以递归进入设计子树，无需手动管理历史记录即可回溯时间。'
- en: Currently all of this is implemented by having all symbols in an SQLite database
    and with a custom Emacs mode. You have a tree of definitions and we have mappings
    of `(package, symbol) -> definition`.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，所有这些功能都是通过在SQLite数据库中保存所有符号和使用自定义的Emacs模式来实现的。您拥有一棵定义的树，我们有`(package, symbol)
    -> definition`的映射。
- en: Common Lisp makes this extremely easy, packages are nothing more than a bag
    of symbols, some public, some private and there are objects assigned to symbols.
    So we are working on the same package abstraction that common lisp is already
    based on. Backed by a DB instead of in-memory in the Lisp listener. We don't even
    lose performance since Common Lisp exposes the `compile` function to compile lambda
    forms.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: Common Lisp使得这变得非常容易，包只是一组符号，其中一些是公共的，一些是私有的，并且符号被分配给对象。因此，我们正在与Common Lisp基于的相同包抽象进行工作。与Lisp监听器中的内存中相反，我们使用了数据库支持。我们甚至不会因为Common
    Lisp暴露了`compile`函数来编译lambda表单而失去性能。
- en: Collaborative Explorative Programming
  id: totrans-split-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 协作式探索编程
- en: 'Expanding this idea a bit more, and to tackle point #5 we could replace the
    SQLite with a shared database. Instead of having one set of mappings you could
    have one per user while having a shared history.'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步扩展这个想法，并解决第五点，我们可以将SQLite替换为共享数据库。不再使用单一映射集，而是每个用户一个，同时拥有共享历史记录。
- en: In order to do this having ways to delete, merge and search the history database
    would become needed since the amount of code could get unwieldy pretty fast. One
    interesting thing we could do to search for valid history entries is to be able
    to create tests for a symbol, locally but shareable and to be able to run those
    tests on all/some history entries. You could then see which ones match your specification
    or for which tests it fails. It could help narrow down what parts of the tree
    were valid and which not. With this you could even dynamically query the history
    tree by creating ad-hoc predicates over inputs and outputs of the functions.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，需要有删除、合并和搜索历史数据库的方法，因为代码量可能会非常庞大。我们可以做的一个有趣的事情是搜索有效的历史条目，可以为一个符号创建测试，本地可共享，并能在所有/部分历史条目上运行这些测试。然后你可以看到哪些符合你的规范，或者哪些测试失败。这有助于缩小树的哪些部分是有效的，哪些不是。通过创建对函数的输入和输出的临时谓词，甚至可以动态查询历史树。
- en: Other interesting ways of developing in groups withh this could be to allow
    you to live-track the dev env of another user. Following the same set of symbol
    mappings, you could even limit it to certain functions or function trees (if we
    kept track of which functions depend on which functions). That way your friend
    could be working on function A while your work on function B and you both have
    constantly updated versions of each others functions while you work on yours.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式开发的其他有趣方式，可以允许您跟踪另一个用户的开发环境。按照相同的符号映射集，甚至可以限制到某些函数或函数树（如果我们跟踪了哪些函数依赖于哪些函数）。这样，你的朋友可以在处理函数A时，你可以处理函数B，并且在你们各自工作时，你们两个的函数版本都会不断更新。
- en: This is not implemented for now, but it would be a natural extension to the
    system.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 目前还没有实现这一点，但这将是系统的自然扩展。
- en: Live deploy
  id: totrans-split-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实时部署
- en: Another interesting thing that we could develop is the ability to deploy code
    on a live instance in a way that automatically rolls back if too many errors happen.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以开发的另一个有趣的事情是，在实时实例上部署代码的能力，在太多错误发生时自动回滚。
- en: This maybe is too crazy, since there is a reason why we've converged into deploying
    dumb stateless services in docker images. We don't wanna deal with a changing
    environment. But, is it really that different?
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这也许太疯狂了，因为我们已经汇聚到在Docker镜像中部署愚蠢的无状态服务的原因。我们不想处理一个变化的环境。但是，它真的有很大不同吗？
- en: Imagine a service that never stops, you diff the existing functions with the
    new functions, only updating what needs to be updated. If there is a change in
    the rate of errors then you automatically rollback the deployed functions. A smarter
    system could even track which functions changed their error rate and only rollback
    any function that is related in that execution tree that changed in the last deploy.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个永不停止的服务，你可以将现有的函数与新函数进行差异化，只更新需要更新的部分。如果错误率发生变化，你会自动回滚部署的函数。一个更智能的系统甚至可以跟踪哪些函数在上次部署中的执行树中发生了变化，并且只回滚与那些变化相关的任何函数。
- en: It gets harder to track, but maybe it's possible.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪起来会更困难，但也许可能。
- en: Concerns and worries
  id: totrans-split-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关注和担忧
- en: 'I have two main worries and areas of the system that I''m unsure how I''ll
    tackle:'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我有两个主要的担忧和系统中我不确定如何解决的领域：
- en: How to interact/merge this methodology in existing systems that are file based
    in a way that doesn't add a lot of friction back.
  id: totrans-split-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将这种方法论与现有基于文件的系统融合在一起，而不会增加太多摩擦。
- en: At the top-level of any common lisp program there may be expressions not associated
    with a symbol. I'm very unsure how to tackle that if at all. I tend to always
    wrap everything in functions anyway, but I don't want to impose a particular way
    of programming if you wanna use the tool. I need to give this more thought.
  id: totrans-split-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任何Common Lisp程序的顶层，可能存在与符号无关的表达式。如果有的话，我对如何处理这个问题非常不确定，或者干脆不处理。不管怎样，我通常总是将所有内容包装在函数中，但如果你想使用这个工具，我不想强加一种特定的编程方式。我需要更多时间来考虑这个问题。
- en: 'And the final worry, which I think a lot of us have when tackling a new design
    space:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 还有最后一个担忧，我认为我们在处理新的设计空间时都会有：
- en: Why hasn't been done yet before? Is it a bad idea? Does it have hidden complexities
    that make it impractical? Do people not develop like this? Will the idea not be
    as useful as I expect?
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么以前还没有做过？这是一个不好的主意吗？它有隐藏的复杂性使其不切实际吗？人们不像这样开发吗？这个想法不会像我预期的那样有用吗？
- en: I guess there is only one way to know :)
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我猜只有一种方法可以知道 :)
- en: Conclusion
  id: totrans-split-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: This is a topic very dear to my heart, it has taken me many years to come to
    understand how I best develop software. I'm not a very introspective person in
    general and it has been a long journey.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个我非常关心的话题，我花了很多年时间才明白我如何最好地开发软件。总体上，我并不是一个非常自省的人，这是一段漫长的旅程。
- en: Hopefuly some of it was interesting and I look forward to learn more about if
    these ideas resonate with you and what the problems may be.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这些内容中的一些对你有趣，我期待了解更多关于这些想法是否与你共鸣，以及可能存在的问题。
- en: I will write another post at some point to show how all this works from within.
    It is actually surprisingly small because of the amount of tools that CL gives
    the user, but there are some interesting challenges nontheless.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在某个时候写另一篇文章，展示这一切是如何从内部工作的。实际上，由于 CL 给用户提供了大量工具，这实际上是令人惊讶的小，但仍然存在一些有趣的挑战。
- en: </main>
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
