["```\n<body>\n<script>\nlet mfrac = document.createElement(\"mfrac\");\nmfrac.appendChild(document.createElement(\"th\"));\ndocument.body.appendChild(mfrac);\n</script>\n```", "```\n**LibWeb/HTML/HTMLTableCellElement.cpp:55:36: runtime error: member call on null pointer of type 'Web::DOM::Node'** #0 0x7e9bfa1610dd in table_containing_cell LibWeb/HTML/HTMLTableCellElement.cpp:55:36\n#1 0x7e9bfa1610dd in Web::HTML::HTMLTableCellElement::apply_presentational_hints(Web::CSS::StyleProperties&) const LibWeb/HTML/HTMLTableCellElement.cpp:101:33\n#2 0x7e9bf97c22d1 in Web::CSS::StyleComputer::compute_cascaded_values(Web::CSS::StyleProperties&, Web::DOM::Element&, AK::Optional<Web::CSS::Selector::PseudoElement::Type>, bool&, Web::CSS::StyleComputer::ComputeStyleMode) const LibWeb/CSS/StyleComputer.cpp:1448:17\n#3 0x7e9bf97e5899 in Web::CSS::StyleComputer::compute_style_impl(Web::DOM::Element&, AK::Optional<Web::CSS::Selector::PseudoElement::Type>, Web::CSS::StyleComputer::ComputeStyleMode) const LibWeb/CSS/StyleComputer.cpp:2231:5\n#4 0x7e9bf97e447e in Web::CSS::StyleComputer::compute_style(Web::DOM::Element&, AK::Optional<Web::CSS::Selector::PseudoElement::Type>) const LibWeb/CSS/StyleComputer.cpp:2202:12\n#5 0x7e9bf9a7e60c in Web::DOM::Element::recompute_style() LibWeb/DOM/Element.cpp:575:64\n```", "```\nHTMLTableElement const& table_containing_cell(HTMLTableCellElement const& node)\n{\n    auto parent_node = node.parent();\n    while (!is<HTML::HTMLTableElement>(parent_node))\n        parent_node = parent_node->parent();\n    return static_cast<HTML::HTMLTableElement const&>(*parent_node);\n}\n```", "```\nauto const& table_element = table_containing_cell(*this);\n```", "```\nauto const table_element = first_ancestor_of_type<HTMLTableElement>();\nif (!table_element)\n    return;\n```", "```\n<script>\n    var parser = new DOMParser();\n    var doc = parser.parseFromString(\"\", \"text/html\");\n    var body = doc.createElement(\"body\");\n    body.onblur = null;\n</script>\n```", "```\nVERIFICATION FAILED: m_ptr at LibJS/Heap/GCPtr.h:174\n#1  JS::GCPtr<Web::HTML::Window>::operator* at LibJS/Heap/GCPtr.h:174\n#2  Web::DOM::Document::window at LibWeb/DOM/Document.h:320\n#3  Web::HTML::HTMLBodyElement::global_event_handlers_to_event_target at LibWeb/HTML/HTMLBodyElement.cpp:104\n#4  Web::HTML::GlobalEventHandlers::set_onblur at LibWeb/HTML/GlobalEventHandlers.cpp:24\n#5  Web::Bindings::HTMLElementPrototype::onblur_setter at LibWeb/Bindings/HTMLElementPrototype.cpp:1153\n```", "```\n<svg>\n    <linearGradient id=\"oops\" href=\"#oops\"/>\n    <rect fill=\"url(#oops)\" />\n</svg>\n```", "```\n<svg>\n    <linearGradient id=\"lol\" href=\"#lmao\"/>\n    <linearGradient id=\"lmao\" href=\"#even\"/>\n    <linearGradient id=\"even\" href=\"#lol\"/>\n    <rect fill=\"url(#lol)\" />\n</svg>\n```", "```\n<iframe></iframe>\n<script>\n    window.onload = function() {\n        let iframe = document.querySelector(\"iframe\")\n        let iframeWindow = iframe.contentWindow;\n        iframe.remove();\n        iframeWindow.getSelection();\n    }\n</script>\n```", "```\n**LibWeb/HTML/WindowProxy.cpp:161:136: runtime error: reference binding to null pointer of type 'const BrowsingContext'** #0 0x77367675cadf in Web::HTML::WindowProxy::internal_get(JS::PropertyKey const&, JS::Value, JS::CacheablePropertyMetadata*) const LibWeb/HTML/WindowProxy.cpp:161:5\n#1 0x773670c4fcca in JS::Bytecode::get_by_id(JS::VM&, AK::DeprecatedFlyString const&, JS::Value, JS::Value, JS::Bytecode::PropertyLookupCache&) LibJS/Bytecode/CommonImplementations.h:105:18\n#2 0x773670c182d5 in JS::Bytecode::Op::GetById::execute_impl(JS::Bytecode::Interpreter&) const LibJS/Bytecode/Interpreter.cpp:1088:28\n#3 0x773670bc8e1f in execute LibJS/Bytecode/Op.h:1898:9\n#4 0x773670bc8e1f in JS::Bytecode::Interpreter::run_bytecode() LibJS/Bytecode/Interpreter.cpp:409:38\n```", "```\n<div id=\"one\"></div><div id=\"two\"></div>\n<script>\n    two.before(one);\n</script>\n```", "```\nwhile (auto previous_sibling = node->previous_sibling()) {\n    // check if previous_sibling is one of the arguments\n}\n```", "```\nfor (auto sibling = node->previous_sibling(); sibling; sibling = sibling->previous_sibling()) {\n\n    // check if previous_sibling is one of the arguments\n\n}\n```"]