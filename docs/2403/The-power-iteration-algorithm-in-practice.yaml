- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:40:29'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:40:29'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The power iteration algorithm in practice
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践中的 Power Iteration 算法
- en: 来源：[https://scicoding.com/the-power-iteration-algorithm-in-practice/](https://scicoding.com/the-power-iteration-algorithm-in-practice/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://scicoding.com/the-power-iteration-algorithm-in-practice/](https://scicoding.com/the-power-iteration-algorithm-in-practice/)
- en: The Power Iteration Algorithm In Practice
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 实践中的 Power Iteration 算法
- en: The Power Iteration algorithm, also known as the Von Mises iteration, is a simple
    yet powerful tool in linear algebra. It is used to compute the dominant eigenvector
    of a matrix and its corresponding eigenvalue. The algorithm has a wide range of
    applications from physics and engineering to computer science, including image
    analysis, spectral graph theory, and Google's PageRank algorithm.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Power Iteration 算法，也被称为 Von Mises 迭代，是线性代数中一种简单而强大的工具。它用于计算矩阵的主特征向量及其对应的特征值。该算法在物理学、工程学、计算机科学等领域有广泛的应用，包括图像分析、谱图理论和谷歌的
    PageRank 算法。
- en: Introduction to Eigenvalues and Eigenvectors
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特征值与特征向量简介
- en: 'Before delving into the Power Iteration algorithm, let''s briefly review what
    eigenvalues and eigenvectors are. Given a square matrix \(\mathbf{A}\), a non-zero
    vector \(\mathbf{v}\) is an eigenvector of \(\mathbf{A}\) if it satisfies the
    following equation:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨 Power Iteration 算法之前，让我们简要回顾一下什么是特征值和特征向量。给定一个方阵 \(\mathbf{A}\)，如果一个非零向量
    \(\mathbf{v}\) 满足以下方程，则称其为 \(\mathbf{A}\) 的特征向量：
- en: \[\mathbf{A}\mathbf{v} = \lambda \mathbf{v}\]
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: \[\mathbf{A}\mathbf{v} = \lambda \mathbf{v}\]
- en: Here, \(\lambda\) is a scalar known as the eigenvalue corresponding to the eigenvector
    \(\mathbf{v}\). The intuition is that multiplication by \(\mathbf{A}\) only changes
    the magnitude (by a factor of \(\lambda\)) and possibly the direction of the vector
    \(\mathbf{v}\) but does not change the space in which \(\mathbf{v}\) lies.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，\(\lambda\) 是一个称为特征值的标量，对应于特征向量 \(\mathbf{v}\)。直觉是，乘以 \(\mathbf{A}\) 只会改变向量
    \(\mathbf{v}\) 的大小（乘以 \(\lambda\) 的因子），可能改变向量 \(\mathbf{v}\) 的方向，但不会改变 \(\mathbf{v}\)
    所处的空间。
- en: The Power Iteration Algorithm
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Power Iteration 算法
- en: 'Now that we''ve covered what eigenvectors and eigenvalues are, let''s explore
    the Power Iteration method. The algorithm is based on a simple, yet profound,
    idea: if you start with a random vector, multiply it by the matrix repeatedly,
    and normalize it at each step, the vector will converge to the dominant eigenvector
    of the matrix.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了特征向量和特征值是什么，让我们来探讨一下 Power Iteration 方法。该算法基于一个简单而深刻的思想：如果从一个随机向量开始，反复地将其与矩阵相乘，并在每一步进行归一化，那么该向量将收敛于矩阵的主特征向量。
- en: 'In more formal terms, given a matrix \(\mathbf{A}\), the algorithm begins with
    a random vector \(\mathbf{b}_0\), and iteratively applies the following steps
    until convergence:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 更正式地说，给定一个矩阵 \(\mathbf{A}\)，该算法从一个随机向量 \(\mathbf{b}_0\) 开始，并迭代应用以下步骤，直至收敛：
- en: Compute \(\mathbf{y} = \mathbf{A}\mathbf{b}_k\)
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算 \(\mathbf{y} = \mathbf{A}\mathbf{b}_k\)
- en: Set \(\mathbf{b}_{k+1} = \frac{\mathbf{y}}{|\mathbf{y}|}\)
  id: totrans-split-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设定 \(\mathbf{b}_{k+1} = \frac{\mathbf{y}}{|\mathbf{y}|}\)
- en: Here, \(|\mathbf{y}|\) denotes the norm (or length) of the vector \(\mathbf{y}\).
    Normalizing the vector at each step ensures that the algorithm doesn't diverge.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，\( |\mathbf{y}| \) 表示向量 \(\mathbf{y}\) 的范数（或长度）。在每一步归一化向量可以确保算法不会发散。
- en: Once the algorithm converges, the corresponding eigenvalue can be calculated
    by rearranging the equation \(\mathbf{A}\mathbf{v} = \lambda \mathbf{v}\) to yield
    \(\lambda = \frac{\mathbf{v}^H\mathbf{A}\mathbf{v} }{\mathbf{v}^H \mathbf{v}}\).
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦算法收敛，可以通过重新排列方程 \(\mathbf{A}\mathbf{v} = \lambda \mathbf{v}\) 来计算相应的特征值 \(\lambda
    = \frac{\mathbf{v}^H\mathbf{A}\mathbf{v} }{\mathbf{v}^H \mathbf{v}}\)。
- en: The power iteration method is easy to implement and can be remarkably effective,
    especially for large, sparse matrices. However, it does have some limitations.
    It can only find the largest (in absolute value) eigenvalue, and it can be slow
    to converge for certain matrices.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: Power Iteration 方法易于实现，并且对于大型稀疏矩阵特别有效。然而，它也有一些局限性。它只能找到（绝对值最大的）最大特征值，并且对于某些矩阵收敛速度可能较慢。
- en: Python Implementation
  id: totrans-split-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 实现
- en: 'Let''s see how to implement the power iteration algorithm in Python using the
    NumPy library:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 NumPy 库在 Python 中实现 Power Iteration 算法：
- en: '[PRE0]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This function takes as input a matrix `A` and the number of simulations `num_iterations`
    to be performed. It initializes a random vector `b_k`, then enters a loop where
    it multiplies `A` by `b_k` to create `y`, then normalizes `y` to
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数以矩阵`A`和要执行的模拟次数`num_iterations`作为输入。它初始化一个随机向量`b_k`，然后进入一个循环，在循环中将`A`乘以`b_k`以创建`y`，然后将`y`归一化为
- en: form `b_k1`. It checks for convergence by examining the norm of the difference
    between `b_k1` and `b_k`. If the difference is less than a small tolerance (in
    this case, `1e-6`), it breaks out of the loop, signaling that convergence has
    been achieved. Finally, it computes the corresponding eigenvalue `lambda_k` and
    returns the dominant eigenvector `b_k1` and its corresponding eigenvalue.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 形成`b_k1`。通过检查`b_k1`和`b_k`之间的差异的范数来检查收敛性。如果差异小于一个小的容差（在本例中为`1e-6`），它跳出循环，表明已经达到收敛。最后，它计算相应的特征值`lambda_k`并返回主特征向量`b_k1`及其相应的特征值。
- en: Power iteration convergence
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 幂迭代收敛性
- en: Step-by-step breakdown of the function
  id: totrans-split-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数的逐步分解
- en: 'Let''s break down the Power Iteration algorithm into smaller steps:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Power Iteration 算法分解为更小的步骤：
- en: '**1\. Import necessary library:** We start by importing the NumPy library,
    which provides functions for working with arrays and matrices.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**1\. 导入必要的库：** 我们首先导入NumPy库，它提供了处理数组和矩阵的函数。'
- en: '[PRE1]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**2\. Define the function:** The function `power_iteration` is defined to take
    in two arguments: a matrix `A` and the number of iterations `num_iterations`.'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 定义函数：** 函数`power_iteration`被定义为接受两个参数：一个矩阵`A`和迭代次数`num_iterations`。'
- en: '[PRE2]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**3\. Initialize a random vector:** We create a random vector `b_k` using the
    `np.random.rand()` function. The size of the vector is the same as the number
    of columns in matrix `A`.'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 初始化随机向量：** 我们使用`np.random.rand()`函数创建一个随机向量`b_k`。向量的大小与矩阵`A`的列数相同。'
- en: '[PRE3]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**4\. Iteration Loop:** The function then enters a loop that runs for the number
    of simulations specified.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**4\. 迭代循环：** 然后函数进入一个根据指定的模拟次数运行的循环。'
- en: '[PRE4]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**5\. Multiply the matrix and the vector:** Inside the loop, we first calculate
    the dot product of matrix `A` and vector `b_k` to get a new vector `y`.'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**5\. 矩阵与向量相乘：** 在循环内部，我们首先计算矩阵`A`和向量`b_k`的点积，得到新向量`y`。'
- en: '[PRE5]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**6\. Normalize the vector:** The vector `y` is then normalized (i.e., its
    length is made to be 1) by dividing it by its norm. This gives us a new vector
    `b_k1`.'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**6\. 归一化向量：** 然后归一化向量`y`（即，使其长度为1），通过将其除以其范数。这给我们一个新向量`b_k1`。'
- en: '[PRE6]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**7\. Check for convergence:** We check for convergence by comparing the norm
    (length) of the difference between `b_k1` and `b_k` to a small number (here, `1e-6`).
    If the difference is smaller than this number, we consider the algorithm to have
    converged and break out of the loop.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**7\. 检查收敛性：** 我们通过比较`b_k1`和`b_k`之间差异的范数（长度）与一个小数（这里是`1e-6`）来检查收敛性。如果差异小于此数值，我们认为算法已经收敛并跳出循环。'
- en: '[PRE7]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**8\. Update the vector:** If the algorithm has not converged, we update `b_k`
    to be the newly calculated `b_k1` and continue to the next iteration.'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**8\. 更新向量：** 如果算法尚未收敛，我们将更新`b_k`为新计算的`b_k1`并继续下一次迭代。'
- en: '[PRE8]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**9\. Compute the corresponding eigenvalue:** After the loop has ended, the
    corresponding eigenvalue is computed using the dot product of `b_k1` and the product
    of `A` and `b_k1`, divided by the dot product of `b_k1` with itself. This value
    is stored in `lambda_k`.'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**9\. 计算相应的特征值：** 循环结束后，使用`b_k1`与`A`与`b_k1`的点积除以`b_k1`与自身的点积计算相应的特征值`lambda_k`。'
- en: '[PRE9]'
  id: totrans-split-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**10\. Return the dominant eigenvector and its corresponding eigenvalue:**
    Finally, the function returns the dominant eigenvector `b_k1` and its corresponding
    eigenvalue `lambda_k`.'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**10\. 返回主特征向量及其相应的特征值：** 最后，函数返回主特征向量`b_k1`及其相应的特征值`lambda_k`。'
- en: '[PRE10]'
  id: totrans-split-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In summary, the power iteration function works by initializing a random vector
    and then repeatedly multiplying it by the given matrix, normalizing the result,
    and checking for convergence. Once convergence is achieved, it calculates the
    corresponding eigenvalue and returns both the dominant eigenvector and its eigenvalue.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，幂迭代函数通过初始化一个随机向量然后重复将其与给定矩阵相乘，归一化结果，并检查收敛性来工作。一旦达到收敛，它计算相应的特征值并返回主特征向量及其特征值。
- en: Use Cases and Applications
  id: totrans-split-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用案例和应用
- en: 'As mentioned, the Power Iteration algorithm has a multitude of applications
    across several domains:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，幂迭代算法在多个领域中有多种应用：
- en: '**Physics and Engineering:** The Power Iteration algorithm is commonly used
    to solve problems involving dynamics and vibrations. It can also be used in structural
    engineering to understand how a structure might react to certain forces, particularly
    when dealing with the structure''s natural modes and frequencies.'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**物理与工程：** 幂法算法常用于解决涉及动力学和振动的问题。在结构工程中，它也可以用于理解结构对特定力量的反应，特别是处理结构的自然模式和频率时。'
- en: '**Google''s PageRank Algorithm:** PageRank is a link analysis algorithm used
    by Google that assigns a weight to each element of a hyperlinked set of documents.
    The Power Iteration method is used to calculate this weight.'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**Google的PageRank算法：** PageRank是Google使用的一种链接分析算法，用于为超链接文档集合中的每个元素分配权重。幂法算法用于计算这些权重。'
- en: '**Spectral Clustering:** In spectral clustering, data points are viewed as
    nodes of a graph, and the problem of clustering reduces to partitioning the graph
    into subgraphs. The Fiedler vector, which is the eigenvector corresponding to
    the second smallest eigenvalue of the Laplacian matrix of the graph, can be computed
    using Power Iteration and is used to partition the graph.'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**谱聚类：** 在谱聚类中，数据点被视为图的节点，聚类问题转化为将图分割成子图的问题。费德勒向量，即图拉普拉斯矩阵第二小特征值对应的特征向量，可以使用幂法计算，并用于分割图。'
- en: '**Principal Component Analysis (PCA):** In PCA, one computes the eigenvectors
    of the covariance matrix of the data to find the directions (i.e., principal components)
    along which the variation in the data is maximized. The Power Iteration method
    can be used to compute these eigenvectors.'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**主成分分析（PCA）：** 在PCA中，通过计算数据的协方差矩阵的特征向量来确定数据变化最大的方向（即主成分）。可以使用幂法来计算这些特征向量。'
- en: Conclusion
  id: totrans-split-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: The Power Iteration algorithm is a simple yet powerful tool for finding the
    dominant eigenvector and its corresponding eigenvalue. Although it has its limitations,
    such as only being able to find the largest eigenvalue and potentially being slow
    to converge, its ease of implementation and use in a wide variety of fields makes
    it a versatile and valuable algorithm. This article has explored its theory, implementation,
    and applications, providing a comprehensive overview of this fascinating algorithm.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 幂法算法是一种简单而强大的工具，用于找到主特征向量及其对应的特征值。虽然它有其局限性，例如只能找到最大的特征值并且可能收敛速度较慢，但其易于实现并在广泛的领域中使用使其成为一种多才多艺且宝贵的算法。本文探讨了其理论、实现和应用，提供了这一迷人算法的全面概述。
- en: Further reading
  id: totrans-split-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**"[Linear Algebra Done Right](https://amzn.to/45q6GO1?ref=localhost)" by Sheldon
    Axler**'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**"[线性代数的正确方式](https://amzn.to/45q6GO1?ref=localhost)" 作者：Sheldon Axler**'
- en: This book offers a clear and concise take on linear algebra, emphasizing the
    understanding of vector spaces over determinants. The book covers eigenvalues
    and eigenvectors in-depth.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本书对线性代数提供了清晰简明的阐述，强调对向量空间的理解而非行列式。该书深入讨论了特征值和特征向量。
- en: '**"[Introduction to Linear Algebra](https://amzn.to/436YjoW?ref=localhost)"
    by Gilbert Strang**'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**"[线性代数导论](https://amzn.to/436YjoW?ref=localhost)" 作者：Gilbert Strang**'
- en: Gilbert Strang's textbook provides an introductory and application-oriented
    approach to linear algebra with a focus on understanding. It includes excellent
    sections on eigenvalues and eigenvectors.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: Gilbert Strang的教科书以介绍和应用为重点，着重于理解线性代数。其中对特征值和特征向量有出色的章节。
- en: '**"[Matrix Computations](https://amzn.to/3OF8Ral?ref=localhost)" by Gene H.
    Golub and Charles F. Van Loan**'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**"[矩阵计算](https://amzn.to/3OF8Ral?ref=localhost)" 作者：Gene H. Golub 和 Charles
    F. Van Loan**'
- en: This book is a comprehensive resource on numerical linear algebra, including
    eigenvalue and singular value algorithms like the Power Iteration method. It's
    more focused on computations and algorithms.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是关于数值线性代数的全面资源，包括特征值和奇异值算法如幂法。它更侧重于计算和算法。
- en: '**"[Numerical Linear Algebra](https://amzn.to/43lPY0R?ref=localhost)" by Lloyd
    N. Trefethen and David Bau III**'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**"[数值线性代数](https://amzn.to/43lPY0R?ref=localhost)" 作者：Lloyd N. Trefethen 和
    David Bau III**'
- en: A more advanced book, this work dives into the numerical side of linear algebra,
    including practical algorithms like Power Iteration.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 更进一步的书籍，深入探讨了线性代数的数值方面，包括实用算法如幂法。
- en: '**"[PageRank: Beyond the Science of Search](https://amzn.to/3IFw2gX?ref=localhost)"
    by Amy N. Langville and Carl D. Meyer**'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**"[PageRank：超越搜索科学](https://amzn.to/3IFw2gX?ref=localhost)" 作者：Amy N. Langville
    和 Carl D. Meyer**'
- en: This book discusses the mathematics of Google's PageRank algorithm, which uses
    Power Iteration to rank web pages. The book delves into the underlying linear
    algebra and the Power Iteration method in the context of this application.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书讨论了谷歌的PageRank算法的数学原理，该算法使用Power Iteration对网页进行排名。该书深入探讨了在这一应用背景下的线性代数基础和Power
    Iteration方法。
