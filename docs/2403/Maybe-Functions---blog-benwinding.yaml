- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:50:40'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:50:40'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Maybe Functions | blog.benwinding
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maybe Functions | blog.benwinding
- en: 来源：[https://blog.benwinding.com/maybe-functions/](https://blog.benwinding.com/maybe-functions/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.benwinding.com/maybe-functions/](https://blog.benwinding.com/maybe-functions/)
- en: The maybe function is a subtle monster that spreads it’s tentacles across the
    code-base. It’s alternating functionality of “*does/doesn’t do something*” makes
    code hard to understand, maintain and debug.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: Maybe函数是一个微妙的怪物，它的触手在代码库中扩散。它交替的“*做/不做某事*”功能使得代码难以理解、维护和调试。
- en: Example
  id: totrans-split-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: Here’s a specific example, it’s a “maybe” function as it only returns the friends
    of a user, if the user is logged in. Basically it introduces a possible `return
    null`.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个具体的例子，它是一个“maybe”函数，因为它只返回用户的朋友，如果用户已登录。基本上它引入了可能的`return null`。
- en: '|'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE0]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '*Notes:*'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*注：*'
- en: This is highly related to the “Null Object Pattern”, but I thought I would explain
    it from the perspective of functions.
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这与“Null Object Pattern”密切相关，但我想从函数的角度来解释它。
- en: It’s also important to note here, that in the wild “maybe functions” might not
    be conveniently prefixed with “maybe”…
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里也很重要的一点是，在实际使用中，“maybe functions”可能不会方便地以“maybe”前缀开头…
- en: So what are the trade-off’s when using “maybe functions”?
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用“maybe functions”时的权衡是什么？
- en: Advantages
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优点
- en: Validation logic coupled with implementation
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证逻辑与实现耦合
- en: Easy for the caller, can be called in many places
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对调用者很容易，在许多地方都可以调用
- en: Disadvantages
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: Caller has less control, they depend on validation hidden in “maybe function”
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用者控制较少，它们依赖于隐藏在“maybe function”中的验证。
- en: Hides complexity but doesn’t actually remove it
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏复杂性但实际上并未消除它
- en: Things that depend on the output now need to handle the maybeness case
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在依赖于输出的东西现在需要处理maybeness的情况
- en: 'When a “maybe function” is implemented, it makes it far more likely that **more**
    “maybe functions” will be introduced to deal with all the `null` values. Here’s
    some pseudo code to show the basic problem:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当实现一个“maybe function”时，更有可能引入更多的“maybe functions”来处理所有的`null`值。以下是一些伪代码，展示了基本问题：
- en: '|'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE1]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: You can see how this pattern *maybe* getting out of control… it does look clean
    in the consumer, with no control logic. However the `null` handling spreads to
    all new functions, and obscures what functions are actually doing… which is usually
    “nothing”, so why even call it?
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到这种模式*可能*已经失控了… 在消费者端看起来很干净，没有控制逻辑。然而，`null`处理扩展到所有新函数，并且模糊了函数实际上在做什么… 通常是“什么也没做”，那么为什么还要调用它？
- en: How can we improve this?
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如何改进这个？
- en: Solution 1 - Lift the maybeness up
  id: totrans-split-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案1 - 提升“maybeness”
- en: The easiest way to remove the “maybeness” from functions is to lift up the “maybe”
    logic into the consumer, this removes the possible `null` aspects of the function,
    which allows other functions to remove theirs too!
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从函数中移除“maybeness”的最简单方法是将“maybe”逻辑提升到消费者，这消除了函数可能的`null`部分，允许其他函数也去除它们！
- en: '|'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE2]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: This is much easier to understand, as each function does what it says and there’s
    much less “maybeness” to account for.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这样更容易理解，因为每个函数都按照其名称执行，并且需要考虑的“maybeness”更少。
- en: Solution 2 - Monads
  id: totrans-split-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案2 - Monads
- en: It’s also possible to generalize and isolate the “maybeness” by using monads.
    In the below example, all `null` checks go through “runSafely”, which removes
    a lot of “maybeness” in remaining functions.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用单子（monads）也可以概括和隔离“maybeness”。在下面的示例中，所有的`null`检查都通过“runSafely”进行，这消除了其余函数中的大部分“maybeness”。
- en: '|'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE3]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: This might be appropriate for a lot of situations, but I believe the 1st solution
    should definitely be reached for first, as it doesn’t rely on another level of
    abstraction.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多情况来说这可能是合适的，但我认为第一种解决方案绝对应该首先被采纳，因为它不依赖于另一个抽象层级。
- en: Conclusion
  id: totrans-split-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Maybe functions have always annoyed me personally and they can found in many
    codebases across any language that allows `null`. They seem to be trivial to add,
    but difficult to remove. But hopefully this illustrates the concern and ways to
    fix it.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对我个人来说，maybe函数一直很让我烦恼，它们可以在任何允许`null`的语言的许多代码库中找到。它们似乎很容易添加，但很难移除。但希望这能说明问题并提出解决方法。
- en: “Functions should do something, not *maybe* do something…”
  id: totrans-split-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “函数应该做某事，而不是*或许*做某事…”
