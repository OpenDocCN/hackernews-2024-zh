- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:59:26'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:59:26'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Introducing Sunlight, a CT implementation built for scalability, ease of operation,
    and reduced cost - Let's Encrypt
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推出Sunlight，这是一个为了可伸缩性、操作简易性和降低成本而构建的CT实现 - Let's Encrypt
- en: 来源：[https://letsencrypt.org/2024/03/14/introducing-sunlight.html](https://letsencrypt.org/2024/03/14/introducing-sunlight.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://letsencrypt.org/2024/03/14/introducing-sunlight.html](https://letsencrypt.org/2024/03/14/introducing-sunlight.html)
- en: Let’s Encrypt is proud to introduce Sunlight, a new implementation of a Certificate
    Transparency log that we built from the ground up with modern Web PKI opportunities
    and constraints in mind. In partnership with [Filippo Valsorda](https://filippo.io/),
    who led the design and implementation, we incorporated feedback from the broader
    transparency logging community, including the Chrome and TrustFabric teams at
    Google, the Sigsum project, and other CT log and monitor operators. Their insights
    have been instrumental in shaping the project’s direction.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: Let's Encrypt自豪地推出Sunlight，这是一个新的证书透明度日志实现，我们从头开始构建，考虑了现代Web PKI的机会和约束条件。与[Filippo
    Valsorda](https://filippo.io/)合作，他领导了设计和实现，我们结合了来自更广泛的透明度日志社区的反馈，包括Google的Chrome和TrustFabric团队、Sigsum项目以及其他CT日志和监控运营者。他们的见解对于塑造项目的方向至关重要。
- en: CT plays an important role in the Web PKI, enhancing the ability to monitor
    and research certificate issuance. The operation of a CT log, however, faces growing
    challenges with the increasing volume of certificates. For instance, Let’s Encrypt
    issues over four million certificates daily, each of which must be logged in two
    separate CT logs. Our well-established “Oak” log currently holds over 700 million
    entries, reflecting the significant scale of these challenges.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: CT在Web PKI中扮演着重要角色，增强了监视和研究证书签发的能力。然而，CT日志的运作面临着随着证书数量增加而增加的挑战。例如，Let's Encrypt每天签发超过400万个证书，每个证书必须在两个独立的CT日志中记录。我们旗下的“Oak”日志目前已经有超过7亿条条目，反映了这些挑战的重大规模。
- en: In this post, we’ll explore the motivation behind Sunlight and how its design
    aims to improve the robustness and diversity of the CT ecosystem, while also improving
    the reliability and performance of Let’s Encrypt’s logs.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将探讨Sunlight背后的动机以及其设计如何旨在提高CT生态系统的稳健性和多样性，同时改善Let's Encrypt日志的可靠性和性能。
- en: Bottlenecks from the Database
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库的瓶颈
- en: Let’s Encrypt has been [running public CT logs](https://letsencrypt.org/docs/ct-logs/)
    since 2019, and we’ve gotten a lot of operational experience with running them,
    but it hasn’t been trouble-free. The biggest challenge in the architecture we’ve
    deployed for our “Oak” log is that the data is stored in a relational database.
    We’ve [scaled that up](https://letsencrypt.org/2022/05/19/nurturing-ct-log-growth)
    by splitting each year’s worth of data into a “shard” with its own database, and
    then later shrinking the shards to cover six months instead of a full year.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: Let's Encrypt自2019年以来一直在[运行公共CT日志](https://letsencrypt.org/docs/ct-logs/)，我们已经积累了大量运维经验，但并非一帆风顺。我们在“Oak”日志的架构中面临的最大挑战是数据存储在关系型数据库中。我们通过将每年的数据拆分为具有自己数据库的“分片”，然后稍后将这些分片缩小到覆盖半年而不是整整一年的方式，[扩展了它](https://letsencrypt.org/2022/05/19/nurturing-ct-log-growth)。
- en: 'The approach of splitting into more and more databases is not something we
    want to continue doing forever, as the operational burden and costs increase.
    The current storage size of a CT log shard is between 5 and 10 terabytes. That’s
    big enough to be concerning for a single database: We previously had a test log
    fail when we ran into a [16TiB limit](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.KnownIssuesAndLimitations.html#MySQL.Concepts.Limits.FileSize)
    in MySQL.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据库进一步分割并不是我们希望永远继续进行的事情，因为操作负担和成本会增加。当前每个CT日志分片的存储大小在5到10 TB之间。这对于单个数据库来说已经足够令人担忧：我们之前在MySQL中遇到[16TiB的限制](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.KnownIssuesAndLimitations.html#MySQL.Concepts.Limits.FileSize)，导致一个测试日志失败。
- en: Scaling read capacity up requires large database instances with fast disks and
    lots of RAM, which are not cheap. We’ve had numerous instances of CT logs becoming
    overloaded by clients attempting to read all the data in the log, overloading
    the database in the process. When rate limits are imposed to prevent overloading,
    clients are forced to slowly crawl the API, diminishing CT’s efficiency as a fast
    mechanism for detecting mis-issued certificates.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展读取能力需要大型数据库实例，具有快速磁盘和大量RAM，这些都不便宜。我们曾多次遇到CT日志因客户尝试读取日志中所有数据而过载，从而使数据库过载。当施加速率限制以防止过载时，客户被迫缓慢爬取API，这降低了CT作为检测误颁发证书的快速机制的效率。
- en: Serving Tiles
  id: totrans-split-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供瓷砖
- en: Initially, Let’s Encrypt only planned on building a new CT log implementation.
    However, our discussions with Filippo made us realize that other transparency
    systems had improved on the original Certificate Transparency design, and we could
    make our logs even more robust and scalable by changing the read path APIs. In
    particular, the [Go Checksum Database](https://golang.org/design/25530-sumdb)
    is inspired by Certificate Transparency, but uses a more efficient format for
    publishing its data as a series of easily stored and cached tiles.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，Let’s Encrypt 只计划构建一个新的CT日志实现。然而，我们与Filippo的讨论使我们意识到其他透明系统已经改进了原始的证书透明设计，通过改变读取路径API，我们可以使我们的日志更加健壮和可扩展。特别是[Go
    Checksum Database](https://golang.org/design/25530-sumdb)受证书透明的启发，但使用更高效的格式发布其数据，作为一系列易于存储和缓存的瓷砖。
- en: 'Certificate Transparency logs are a binary tree, with every node containing
    a hash of its two children. The “leaf” level contains the actual entries of the
    log: the certificates, appended to the right side of the tree. The top of the
    tree is digitally signed. This forms a cryptographically verifiable structure
    called a Merkle Tree, which can be used to check if a certificate is in the tree,
    and that the tree is append-only.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 证书透明日志是一个二叉树，每个节点包含其两个子节点的哈希。“叶”级别包含日志的实际条目：证书，附加在树的右侧。树的顶部被数字签名。这形成了一个称为默克尔树的密码学可验证结构，可用于检查证书是否在树中，以及树是否仅追加。
- en: Sunlight tiles are files containing 256 elements each, either hashes at a certain
    tree “height” or certificates (or pre-certificates) at the leaf level. Russ Cox
    has a great explanation [of how tiles work on his blog](https://research.swtch.com/tlog#tiling_a_log),
    or you can read [the relevant section of the Sunlight specification](https://c2sp.org/sunlight#merkle-tree).
    Even Trillian, the current implementation of CT we run, [uses a subtree system](https://github.com/google/trillian/blob/master/docs/storage/storage.md)
    similar to these tiles as its internal storage.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 日光瓷砖是每个包含256个元素的文件，每个元素都是树“高度”处的哈希值或者是叶级别的证书（或预证书）。Russ Cox 在他的博客上很好地解释了[瓷砖如何工作](https://research.swtch.com/tlog#tiling_a_log)，或者你可以阅读[日光规范的相关部分](https://c2sp.org/sunlight#merkle-tree)。甚至我们目前运行的CT实现
    Trillian，也[使用类似这些瓷砖的子树系统](https://github.com/google/trillian/blob/master/docs/storage/storage.md)作为其内部存储。
- en: Unlike the dynamic endpoints in previous CT APIs, serving a tree as tiles doesn’t
    require any dynamic computation or request processing, so we can eliminate the
    need for API servers. Because the tiles are static, they’re efficiently cached,
    in contrast with CT APIs like get-proof-by-hash which have a different response
    for every certificate, so there’s no shared cache. The leaf tiles can also be
    stored compressed, saving even more storage!
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前的CT API中的动态端点不同，将树作为瓷砖提供不需要任何动态计算或请求处理，因此我们可以消除API服务器的需求。因为瓷砖是静态的，它们可以高效地被缓存，与像按哈希获取证明这样的CT
    API不同，后者对每个证书都有不同的响应，因此没有共享缓存。叶瓷砖还可以压缩存储，进一步节省存储空间！
- en: The idea of exposing the log as a series of static tiles is motivated by our
    desire to scale out the read path horizontally and relatively inexpensively. We
    can directly expose tiles in cloud object storage like S3, use a caching CDN,
    or use a webserver and a filesystem.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 将日志公开为一系列静态瓷砖的想法是由我们希望通过横向和相对廉价地扩展读取路径而驱动的。我们可以直接在云对象存储（如S3）中公开瓷砖，使用缓存CDN，或使用Web服务器和文件系统。
- en: Object or file storage is readily available, can scale up easily, and costs
    significantly less than databases from cloud providers. It seemed like the obvious
    path forward. In fact, we already have an S3-backed cache in front of our existing
    CT logs, which means we are currently storing our data twice.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对象或文件存储易于获取，可以轻松扩展，并且成本显著低于云提供商的数据库。这似乎是显而易见的前进道路。事实上，我们已经在现有的CT日志前面有一个S3后备缓存，这意味着我们当前的数据存储了两次。
- en: Running More Logs
  id: totrans-split-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行更多的日志
- en: The tiles API improves the read path, but we also wanted to simplify our architecture
    on the write path. With Trillian, we run a collection of nodes along with etcd
    for leader election to choose which will handle writing. This is somewhat complex,
    and we believe the CT ecosystem allows a different tradeoff.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 瓦片API改进了读取路径，但我们也希望简化写入路径的架构。使用Trillian，我们运行一组节点以及etcd进行领导选举，选择将处理写入的节点。这有些复杂，我们认为CT生态系统允许不同的权衡。
- en: The key realization is that Certificate Transparency is already a distributed
    system, with clients submitting certificates to multiple logs, and gracefully
    failing over from any unavailable ones to the others. Each individual log’s write
    path doesn’t require a highly available leader election system. A simple single-node
    writer can meet the 99% Service Level Objective of a CT log.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关键的认识是，证书透明性已经是一个分布式系统，客户端将证书提交到多个日志中，并从任何不可用的日志优雅地切换到其他日志。每个单独日志的写入路径不需要高度可用的领导选举系统。一个简单的单节点写入器可以满足CT日志的99%服务水平目标。
- en: The single-node Sunlight architecture lets us run multiple independent logs
    with the same amount of computing power. This increases the system’s overall robustness,
    even if each individual log has lower potential uptime. No more leader election
    needed. We use a simple compare-and-swap mechanism to store checkpoints and prevent
    accidentally running two instances at once, which could result in a forked tree,
    but that has much less overhead than leader election.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 单节点Sunlight架构允许我们使用相同的计算能力运行多个独立的日志。即使每个单独的日志具有较低的潜在正常运行时间，这也增加了系统的整体稳健性。不再需要领导选举。我们使用简单的比较和交换机制来存储检查点，并防止意外同时运行两个实例，这可能导致分叉树，但这比领导选举的开销要小得多。
- en: No More Merge Delay
  id: totrans-split-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不再有合并延迟
- en: One of the goals of CT was to have limited latency for submission to the logs.
    A design feature called Merge Delay was added to support that. When submitting
    a certificate to a log, the log can return a Signed Certificate Timestamp (SCT)
    immediately, with a promise to include it in the log within the log’s Maximum
    Merge Delay, conventionally 24 hours. While this seems like a good tradeoff to
    not slow down issuance, there have been multiple incidents and near-misses where
    a log stops operating with unmerged certificates, missing its maximum merge delay,
    and breaking that promise.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: CT的目标之一是将提交到日志的延迟限制在很小范围内。添加了一个名为合并延迟的设计特性来支持这一点。当向日志提交证书时，日志可以立即返回一个签名的证书时间戳（SCT），承诺在日志的最大合并延迟内（通常为24小时）包含它。虽然这看起来是一个不减缓发布速度的良好权衡，但已经发生过多次事件和接近事件，其中一个日志停止操作未合并的证书，错过了其最大合并延迟，并破坏了承诺。
- en: Sunlight takes a different approach, holding submissions while it batches and
    integrates certificates in the log, eliminating the merge delay. While this leads
    to a small latency increase, we think it’s worthwhile to avoid one of the more
    common CT log failure cases.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: Sunlight采用了一种不同的方法，它在批处理和集成证书到日志时保持提交，从而消除了合并延迟。尽管这会导致轻微的延迟增加，但我们认为避免一些常见的CT日志故障案例是值得的。
- en: It also lets us embed the final leaf index in an extension of our SCTs, bringing
    CT a step closer to direct client verification of Merkle tree proofs. The extension
    also makes it possible for clients to fetch the proof of log inclusion from the
    new static tile-based APIs, without requiring server-side lookup tables or databases.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 它还允许我们在我们的SCTs的扩展中嵌入最终的叶子索引，将CT更接近直接客户端验证Merkle树证明。该扩展还使客户能够从新的基于静态瓦片的API中获取日志包含证明，而无需服务器端查找表或数据库。
- en: A Sunny Future
  id: totrans-split-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个阳光明媚的未来
- en: Today’s announcement of Sunlight is just the beginning. We’ve released [software](https://github.com/FiloSottile/sunlight)
    and a [specification](https://c2sp.org/sunlight) for Sunlight, and have Sunlight
    CT logs running. Head to [sunlight.dev](https://sunlight.dev) to find resources
    to get started. We encourage CAs to start test submitting to [Let’s Encrypt’s
    new Sunlight CT logs](https://letsencrypt.org/docs/ct-logs/#Sunlight), for CT
    Monitors and Auditors to add support for consuming Sunlight logs, and for the
    CT programs to consider trusting logs running on this new architecture. We hope
    Sunlight logs will be made usable for SCTs by the CT programs run by the browsers
    in the future, allowing CAs to rely on them to meet the browser CT logging requirements.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的 Sunlight 发布只是个开始。我们已经发布了[软件](https://github.com/FiloSottile/sunlight)和[规范](https://c2sp.org/sunlight)，并运行了
    Sunlight CT 日志。访问[sunlight.dev](https://sunlight.dev)获取相关资源。我们鼓励 CA 开始向[Let’s
    Encrypt 的新 Sunlight CT 日志](https://letsencrypt.org/docs/ct-logs/#Sunlight)提交测试，以便
    CT 监控者和审计员支持消费 Sunlight 日志，并请 CT 程序考虑信任在这种新架构上运行的日志，希望 Sunlight 日志在未来能被浏览器运行的
    CT 程序用于生成 SCTs，从而使 CA 能够依赖它们来满足浏览器的 CT 日志要求。
- en: We’ve gotten positive feedback so far, with comments such as “Google’s TrustFabric
    team, maintainers of Trillian, are supportive of this direction and the Sunlight
    spec. We have been working towards the same goal of cacheable tile-based logs
    for other ecosystems with [serverless tooling](https://github.com/transparency-dev/serverless-log),
    and will be folding this into Trillian and ctfe, along with adding support for
    the Sunlight API.”
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们收到了积极的反馈，例如“Google 的 TrustFabric 团队，Trillian 的维护者，支持这个方向和 Sunlight 规范。我们一直在为其他生态系统提供可缓存的基于瓦片的日志，使用[无服务器工具](https://github.com/transparency-dev/serverless-log)，并将其与
    Trillian 和 ctfe 整合，同时支持 Sunlight API。”
- en: If you have feedback on the design, please join in the conversation on the [ct-policy
    mailing list](https://groups.google.com/a/chromium.org/g/ct-policy), or in the
    [#sunlight](https://transparency-dev.slack.com/archives/C06PCS2P75Y) channel on
    the transparency-dev Slack ([invitation](https://join.slack.com/t/transparency-dev/shared_invite/zt-27pkqo21d-okUFhur7YZ0rFoJVIOPznQ)
    to join).
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对设计有任何反馈意见，请加入[ct-policy 邮件列表](https://groups.google.com/a/chromium.org/g/ct-policy)，或在
    transparency-dev Slack 的 [#sunlight](https://transparency-dev.slack.com/archives/C06PCS2P75Y)
    频道中参与讨论（[邀请链接](https://join.slack.com/t/transparency-dev/shared_invite/zt-27pkqo21d-okUFhur7YZ0rFoJVIOPznQ)）。
- en: 'We’d like to thank Chrome for supporting the development of Sunlight, and Amazon
    Web Services for their ongoing support for our CT log operation. If your organization
    monitors or values CT, please consider a financial gift of support. Learn more
    at [https://www.abetterinternet.org/sponsor/](https://www.abetterinternet.org/sponsor/)
    or contact us at: [sponsor@abetterinternet.org](mailto:sponsor@abetterinternet.org).'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要感谢 Chrome 对 Sunlight 开发的支持，以及亚马逊网络服务（AWS）对我们 CT 日志运营的持续支持。如果您的组织监控或重视 CT，请考虑提供财政支持。了解更多信息，请访问[https://www.abetterinternet.org/sponsor/](https://www.abetterinternet.org/sponsor/)或通过电子邮件联系我们：[sponsor@abetterinternet.org](mailto:sponsor@abetterinternet.org)。
