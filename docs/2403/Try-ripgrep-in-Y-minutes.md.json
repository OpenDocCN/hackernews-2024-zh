["```\ncd /opt curl -OL https://github.com/rednafi/httpurr/archive/refs/tags/v0.1.2.tar.gz tar xvzf v0.1.2.tar.gz mv httpurr-0.1.2 httpurr cd httpurr \n```", "```\n3:    <strong><i> >> HTTP status codes on speed dial << </i></strong>\n30:* List the HTTP status codes:\n54:* Filter the status codes by categories:\n124:\t\t  Print HTTP status codes by category with --list;\n131:\t\t  Print HTTP status codes \n```", "```\n81:* Display the description of a status code:\n127:\t\t  Print the description of an HTTP status code \n```", "```\nrg --word-regexp code README.md \n```", "```\n81:* Display the description of a status code:\n84:\thttpurr --code 410\n94:\tThe HyperText Transfer Protocol (HTTP) 410 Gone client error response code\n99:\tcode should be used instead.\n126:\t  -c, --code [status code]\n127:\t\t  Print the description of an HTTP status code \n```", "```\n94:\tThe HyperText Transfer Protocol (HTTP) 410 Gone client error response code\n95:\tindicates that access to the target resource is no longer available at the\n152:of the rest. \n```", "```\n152:of the rest. \n```", "```\nrg '\\d\\d\\d' README.md | head \n```", "```\n45:\t100    Continue\n46:\t101    Switching Protocols\n47:\t102    Processing\n48:\t103    Early Hints\n69:\t200    OK\n70:\t201    Created\n71:\t202    Accepted\n72:\t203    Non-Authoritative Information\n73:\t204    No Content\n74:\t205    Reset Content \n```", "```\nrg 'code.' src/data.go | head \n```", "```\n8:The HTTP 100 Continue informational status response code indicates that\n14:status code in response before sending the body.\n31:The HTTP 101 Switching Protocols response code indicates a protocol to which the\n53:Deprecated: This status code is deprecated. When used, clients may still accept\n56:The HTTP 102 Processing informational status response code indicates to client\n59:This status code is only sent if the server expects the request to take\n112:The HTTP 200 OK success status response code indicates that the request has\n141:The HTTP 201 Created success status response code indicates that the request has\n149:The common use case of this status code is as the result of a POST request.\n165:The HTTP 202 Accepted response status code indicates that the request has been \n```", "```\nrg --fixed-strings 'code.' src/data.go \n```", "```\n197:to responses with any status code.\n283:Browsers accessing web pages will never encounter this status code.\n695:to an error code.\n1027:erroneous cases it happens, they will handle it as a generic 400 status code.\n1051:Regular web servers will normally not return this status code. But some other\n1418:then the server responds with the 510 status code. \n```", "```\nrg -e 'make' -e 'run' README.md \n```", "```\n139:* Go to the root directory and run:\n141:\tmake init\n145:\tmake lint\n149:\tmake test \n```", "```\necho 'install' > /tmp/patterns.txt echo 'make' >> /tmp/patterns.txt echo 'run' >> /tmp/patterns.txt   rg --file=/tmp/patterns.txt README.md \n```", "```\n13:* On MacOS, brew install:\n17:\t    && brew install httpurr\n20:* Or elsewhere, go install:\n23:\tgo install github.com/rednafi/httpurr/cmd/httpurr\n139:* Go to the root directory and run:\n141:\tmake init\n145:\tmake lint\n149:\tmake test \n```", "```\n./cmd/httpurr/main.go:12:func main() {\n./src/cli.go:16:func formatStatusText(text string) string {\n./src/cli.go:21:func printHeader(w *tabwriter.Writer) {\n./src/cli.go:35:func printStatusCodes(w *tabwriter.Writer, category string) error {\n./src/cli.go:105:func printStatusText(w *tabwriter.Writer, code string) error { \n```", "```\ncmd/httpurr/main.go:12:func main() { \n```", "```\nrg 'func [a-z]\\w+' cmd src \n```", "```\ncmd/httpurr/main.go:12:func main() {\nsrc/cli.go:16:func formatStatusText(text string) string {\nsrc/cli.go:21:func printHeader(w *tabwriter.Writer) {\nsrc/cli.go:35:func printStatusCodes(w *tabwriter.Writer, category string) error {\nsrc/cli.go:105:func printStatusText(w *tabwriter.Writer, code string) error { \n```", "```\nexit status 1 \n```", "```\n./.github/workflows/automerge.yml:8:jobs:\n./.github/workflows/lint.yml:11:jobs:\n./.github/workflows/release.yml:10:jobs:\n./.github/workflows/test.yml:11:jobs: \n```", "```\nrg --max-count=5 httpurr . \n```", "```\n./README.md:2:    <h1>ᗢ httpurr</h1>\n./README.md:16:\tbrew tap rednafi/httpurr https://github.com/rednafi/httpurr \\\n./README.md:17:\t    && brew install httpurr\n./README.md:23:\tgo install github.com/rednafi/httpurr/cmd/httpurr\n./README.md:33:\thttpurr --list\n./cmd/httpurr/main.go:4:\t\"github.com/rednafi/httpurr/src\"\n./go.mod:1:module github.com/rednafi/httpurr\n./httpurr.rb:7:  homepage \"https://github.com/rednafi/httpurr\"\n./httpurr.rb:12:      url \"https://github.com/rednafi/httpurr/releases/download/v0.1.1/httpurr_Darwin_x86_64.tar.gz\"\n./httpurr.rb:16:        bin.install \"httpurr\"\n./httpurr.rb:20:      url \"https://github.com/rednafi/httpurr/releases/download/v0.1.1/httpurr_Darwin_arm64.tar.gz\"\n./httpurr.rb:24:        bin.install \"httpurr\"\n./src/cli.go:24:\tfmt.Fprintf(w, \"\\nᗢ httpurr\\n\")\n./src/cli_test.go:64:\twant := \"\\nᗢ httpurr\\n==========\\n\\n\" \n```", "```\n./cmd/httpurr/main.go:4:\t\"github.com/rednafi/httpurr/src\"\n./src/cli.go:24:\tfmt.Fprintf(w, \"\\nᗢ httpurr\\n\")\n./src/cli_test.go:64:\twant := \"\\nᗢ httpurr\\n==========\\n\\n\" \n```", "```\n./httpurr.rb:7:  homepage \"https://github.com/rednafi/httpurr\"\n./httpurr.rb:12:      url \"https://github.com/rednafi/httpurr/releases/download/v0.1.1/httpurr_Darwin_x86_64.tar.gz\"\n./httpurr.rb:16:        bin.install \"httpurr\"\n./httpurr.rb:20:      url \"https://github.com/rednafi/httpurr/releases/download/v0.1.1/httpurr_Darwin_arm64.tar.gz\"\n./httpurr.rb:24:        bin.install \"httpurr\"\n./httpurr.rb:31:      url \"https://github.com/rednafi/httpurr/releases/download/v0.1.1/httpurr_Linux_arm64.tar.gz\"\n./httpurr.rb:35:        bin.install \"httpurr\"\n./httpurr.rb:39:      url \"https://github.com/rednafi/httpurr/releases/download/v0.1.1/httpurr_Linux_x86_64.tar.gz\"\n./httpurr.rb:43:        bin.install \"httpurr\" \n```", "```\nrg -g '!*.{go,md,rb}' httpurr . \n```", "```\n./go.mod:1:module github.com/rednafi/httpurr \n```", "```\nrg -g '*.go' -g '!*_test.go' 'func ' . \n```", "```\n./cmd/httpurr/main.go:12:func main() {\n./src/cli.go:16:func formatStatusText(text string) string {\n./src/cli.go:21:func printHeader(w *tabwriter.Writer) {\n./src/cli.go:35:func printStatusCodes(w *tabwriter.Writer, category string) error {\n./src/cli.go:105:func printStatusText(w *tabwriter.Writer, code string) error {\n./src/cli.go:123:func Cli(w *tabwriter.Writer, version string, exitFunc func(int)) { \n```", "```\n./cmd/httpurr/main.go:4:\t\"github.com/rednafi/httpurr/src\"\n./src/cli.go:24:\tfmt.Fprintf(w, \"\\nᗢ httpurr\\n\")\n./src/cli_test.go:64:\twant := \"\\nᗢ httpurr\\n==========\\n\\n\" \n```", "```\nrg -T go -T md -T ruby httpurr . \n```", "```\n./go.mod:1:module github.com/rednafi/httpurr \n```", "```\n3:    <strong><i> >> HTTP status codes on speed dial << </i></strong>\n30:* List the HTTP status codes:\n54:* Filter the status codes by categories:\n124:\t\t  Print HTTP status codes by category with --list;\n131:\t\t  Print HTTP status codes \n```", "```\nrg --ignore-case codes README.md \n```", "```\n3:    <strong><i> >> HTTP status codes on speed dial << </i></strong>\n30:* List the HTTP status codes:\n40:\tStatus Codes\n54:* Filter the status codes by categories:\n64:\tStatus Codes\n124:\t\t  Print HTTP status codes by category with --list;\n131:\t\t  Print HTTP status codes \n```", "```\nrg --smart-case HTTP README.md \n```", "```\n3:    <strong><i> >> HTTP status codes on speed dial << </i></strong>\n30:* List the HTTP status codes:\n94:\tThe HyperText Transfer Protocol (HTTP) 410 Gone client error response code\n109:\thttps://developer.mozilla.org/en-US/docs/Web/HTTP/Status/410\n124:\t\t  Print HTTP status codes by category with --list;\n127:\t\t  Print the description of an HTTP status code\n131:\t\t  Print HTTP status codes \n```", "```\nrg --invert-match -e '@' -e '^/codapi-snippet> Makefile \n```", "```\n1:.PHONY: lint\n2:lint:\n8:.PHONY: lint-check\n9:lint-check:\n14:.PHONY: test\n15:test:\n20:.PHONY: clean\n21:clean:\n27:.PHONY: init\n28:init: \n```", "```\nrg --count -t go 'func ' . \n```", "```\n./cmd/httpurr/main.go:1\n./src/cli.go:5\n./src/cli_test.go:10\n./src/data_test.go:2 \n```", "```\nrg -w --count 'string' src/cli.go \n```", "```\n5 \n```", "```\nrg -w --count-matches 'string' src/cli.go \n```", "```\n6 \n```", "```\nrg --only-matching -t go 'func print\\w+' . \n```", "```\n./src/cli.go:21:func printHeader\n./src/cli.go:35:func printStatusCodes\n./src/cli.go:105:func printStatusText \n```", "```\nrg --files-with-matches 'httpurr' . \n```", "```\n./README.md\n./cmd/httpurr/main.go\n./go.mod\n./httpurr.rb\n./src/cli.go\n./src/cli_test.go \n```", "```\nrg 'jobs:' .github/workflows \n```", "```\n.github/workflows/automerge.yml:8:jobs:\n.github/workflows/lint.yml:11:jobs:\n.github/workflows/release.yml:10:jobs:\n.github/workflows/test.yml:11:jobs: \n```", "```\nrg --context=1 'jobs:' .github/workflows \n```", "```\n.github/workflows/automerge.yml-7-\n.github/workflows/automerge.yml:8:jobs:\n.github/workflows/automerge.yml-9-  dependabot:\n--\n.github/workflows/lint.yml-10-\n.github/workflows/lint.yml:11:jobs:\n.github/workflows/lint.yml-12-  golangci:\n--\n.github/workflows/release.yml-9-\n.github/workflows/release.yml:10:jobs:\n.github/workflows/release.yml-11-  goreleaser:\n--\n.github/workflows/test.yml-10-\n.github/workflows/test.yml:11:jobs:\n.github/workflows/test.yml-12-  test: \n```", "```\nrg --after-context=1 'jobs:' .github/workflows \n```", "```\n.github/workflows/automerge.yml:8:jobs:\n.github/workflows/automerge.yml-9-  dependabot:\n--\n.github/workflows/lint.yml:11:jobs:\n.github/workflows/lint.yml-12-  golangci:\n--\n.github/workflows/release.yml:10:jobs:\n.github/workflows/release.yml-11-  goreleaser:\n--\n.github/workflows/test.yml:11:jobs:\n.github/workflows/test.yml-12-  test: \n```", "```\nrg --multiline 'jobs:\\n\\s+\\w+' .github/workflows \n```", "```\n.github/workflows/automerge.yml:8:jobs:\n.github/workflows/automerge.yml:9:  dependabot:\n.github/workflows/lint.yml:11:jobs:\n.github/workflows/lint.yml:12:  golangci:\n.github/workflows/release.yml:10:jobs:\n.github/workflows/release.yml:11:  goreleaser:\n.github/workflows/test.yml:11:jobs:\n.github/workflows/test.yml:12:  test: \n```", "```\n3:    <strong><i> >> HTTP status codes on speed dial << </i></strong>\n30:* List the HTTP status codes:\n54:* Filter the status codes by categories:\n124:\t\t  Print HTTP status codes by category with --list;\n131:\t\t  Print HTTP status codes \n```", "```\nrg codes -r ids README.md \n```", "```\n3:    <strong><i> >> HTTP status ids on speed dial << </i></strong>\n30:* List the HTTP status ids:\n54:* Filter the status ids by categories:\n124:\t\t  Print HTTP status ids by category with --list;\n131:\t\t  Print HTTP status ids \n```", "```\nrg '^.*codes.*/codapi-snippet> -r 'REDACTED' README.md \n```", "```\n3:REDACTED\n30:REDACTED\n54:REDACTED\n124:REDACTED\n131:REDACTED \n```", "```\nrg codes -or 'REDACTED' README.md \n```", "```\n3:REDACTED\n30:REDACTED\n54:REDACTED\n124:REDACTED\n131:REDACTED \n```", "```\nrg 'status\\s+(\\w+)' -r 'status-$1' README.md \n```", "```\n3:    <strong><i> >> HTTP status-codes on speed dial << </i></strong>\n30:* List the HTTP status-codes:\n54:* Filter the status-codes by categories:\n81:* Display the description of a status-code:\n124:\t\t  Print HTTP status-codes by category with --list;\n126:\t  -c, --code [status-code]\n127:\t\t  Print the description of an HTTP status-code\n131:\t\t  Print HTTP status-codes \n```", "```\n# Trim really long lines and show a preview\n--max-columns=40\n--max-columns-preview\n\n# Search hidden files / directories (e.g. dotfiles)\n--hidden\n\n# Do not search git files\n--glob\n!.git/*\n\n# Ignore case unless all caps\n--smart-case \n```", "```\nexport RIPGREP_CONFIG_PATH=/tmp/.ripgreprc rg httpurr . | head \n```", "```\n./.goreleaser.yml:14:    main: ./cmd/httpurr\n./.goreleaser.yml:45:  - name: httpurr\n./.goreleaser.yml:46:    homepage: \"https://github.com/rednaf [... omitted end of long line]\n./.goreleaser.yml:50:      name: httpurr\n./README.md:2:    <h1>ᗢ httpurr</h1>\n./README.md:16:\tbrew tap rednafi/httpurr https://github [... omitted end of long line]\n./README.md:17:\t    && brew install httpurr\n./README.md:23:\tgo install github.com/rednafi/httpurr/c [... omitted end of long line]\n./README.md:33:\thttpurr --list\n./README.md:37:\tᗢ httpurr \n```"]