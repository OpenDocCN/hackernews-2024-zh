- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:01:22'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Redefining Observability | Hazel Weakly
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://hazelweakly.me/blog/redefining-observability/](https://hazelweakly.me/blog/redefining-observability/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Observability is a bit of a hot topic, and while it’s increasingly been playing
    a larger role in engineering strategy, I think the way it’s presented can often
    cause a lot of leaders to miss the value or to over-index on the wrong things.
    I’m going to present the current definitions of observability that are widely
    used in engineering and other disciplines, and then introduce my definition; I’ll
    also be going over what motivated me to develop my definition, and the deficiencies
    I encounter in the other definitions, especially when it comes to the failure
    modes of understanding.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: 'For leaders who are pressed for time, I’m going to try something new with this
    blog post: I’m going to have pulled out sections labeled “leadership insight”
    so that you can skim this and pull out the key points. Let me know if that’s useful
    for you!'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: “Observability”, or o11y as it’s often called by aficionados, has two main definitions
    that people tend to use when talking about it. The first comes from control theory
    and the second comes from cognitive systems engineering.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the first definition:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Observability is a measure of how well internal states of a system can be inferred
    from knowledge of its external outputs.
  id: totrans-split-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: – Rudolf E. Kálmán
  id: totrans-split-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This was a definition that came out of studying linear dynamical systems and
    rose to prominence in software engineering largely through the efforts of thought
    leaders in the space bringing the concept over and applying it in a new domain;
    in particular, Charity Majors is often attributed as being one of the major (hah)
    voices in bringing this definition into the mainstream attention of software engineering.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: Whenever an engineer talks about observability, the odds are very high that
    this is the definition they have in mind.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the second definition:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: Observability is *feedback that provides insight into a process* and refers
    to the work needed to extract meaning from available data.
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '– David D. Woods’ and Eric Hollnagel’s Joint Cognitive Systems: Patterns in
    Cognitive Systems Engineering, (Taylor & Francis, 2006), p. 121.'
  id: totrans-split-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This definition is one that was brought to my attention by the lovely [Fred
    Hebert](https://ferd.ca/). If you’re talking with someone who’s in the cognitive
    systems engineering space, resilience engineering space, or system safety engineering
    space, this is the definition they most likely have in mind.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, here’s *my* definition:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: Observability is the process through which one develops the ability to ask meaningful
    questions, get useful answers, and act effectively on what you learn.
  id: totrans-split-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: – Hazel Weakly
  id: totrans-split-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Naturally, I am not biased in the slightest; it’s merely a natural consequence
    of me being awesome that this is the best definition out there (just kidding).
    That said, you might be sitting here and wondering what exactly makes these particular
    definitions different. Let’s go over that.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: To me, the point of having a good definition of a concept is that when you have
    one, that definition should be usable both as a way to center understanding of
    a concept, but also to influence the direction in which you explore said concept,
    and guide you towards grasping all of the *implications* of said exploration.
    As an example, one of the problems I have with the control theory definition of
    observability is that it gives you absolutely zero idea of where to start, where
    you are, or how to get there. If your system is fully observable, and you *know*
    that it’s observable… Cool, awesome, that’s neat. The rest of us have no idea
    what the fuck is going on and would like a map of how to get there.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: Another problem I have with the control theory definition of observability is
    that it completely removes the people from the equation; it doesn’t *literally*
    remove them, but you probably aren’t going to think about humans at all when you
    read that definition. Be real, did you read that definition and go “ah yes this
    sounds like a people problem”? Probably not, and that’s an issue.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: '**Leadership Insight:** Most implementations of “observability” fail because
    it’s treated as a tooling problem rather than a strategic capability. Investment
    in observability is much more similar to Business Intelligence and Market Research
    than it is to Infrastructure and IT.'
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The fact that observability is often sold as a tool to infrastructure teams
    is throwing out the entire point of the idea by burying it in the implementation.
    Nobody buys PowerBI because they need to invest in “super fancy ass spreadsheet
    generation capabilities” or some shit like that, and likewise you shouldn’t be
    buying an observability vendor because you need a way to store system diagnostic
    information, it literally doesn’t make sense–observability is not a data problem.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: So, the control theory definition makes it really hard to think about the people,
    and it doesn’t give you a starting point, ending point, or a strategy of how to
    get there. Well, that’s not great, so how about the cognitive systems engineering
    one?
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Honestly, I like that one a lot more, and I wish we had popularized that one
    over the control theory one–while the control theory one helps guide the idea
    of the *implementation* of what an effective component of observability looks
    like, it doesn’t actually help the practitioner understand what’s going on. That
    doesn’t mean it’s perfect though: one really glaring thing that is missing from
    it (and the control theory definition) is the point behind why you care about
    this in the first place. You have “provide insight into a process” and “the work
    needed to extract meaning from that insight” and, honestly, why do you care? In
    addition, there’s still the problem of not really knowing where you are, where
    you need to go, and how to know that you got there.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: '**Leadership Insight:** A glaring deficiency in existing definitions of observability,
    to me, is the inability to know how many resources to invest in developing observability
    as a capability as well as how to invest those resources effectively.'
  id: totrans-split-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Which leads me to why I like my definition the most:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: I like definitions of concepts that capture the motivation in addition to the
    essence
  id: totrans-split-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Motivating definitions, to me, also contain an implicit sense of direction
  id: totrans-split-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we’re defining a capability, it should be defined as an infinite and incremental
    process
  id: totrans-split-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Learning, without action, isn’t learning, and a definition about evolution that
    doesn’t include the action step isn’t complete
  id: totrans-split-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is probably my biggest gripe with the current direction of observability.
    Engineering has always been a bit of a silo from the rest of the business; it’s
    understandable, of course, you have a very specialized field filled to the brim
    with a very rapidly evolving internally focused set of concerns–no wonder it’s
    going to look completely alien to others. Much of the medical field is the same
    way, and so is the legal field, to give two other examples. However, Engineering
    had the golden chance of a century: Here we are with complex sociotechnical systems
    encompassing essentially “every fucking thing a business does to business business”
    and we have this awesome concept of “we need to understand what we’re doing” and
    what did we do?'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: We completely and utterly fucked it up by defining observability to mean “gigachad-scale
    JSON logs parser with a fancy search engine.” Really? *Really?* That’s the “we
    solve Real Serious Business Problems™” strategy we went with?
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: It just feels so tragic; what a waste of potential for building avenues of cross-functional
    understanding and communication.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: 'So okay, fuck it, let’s throw away the current concept of observability and
    think seriously for a moment: What does it mean to *ask meaningful questions*?'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what that means to me. A meaningful question requires a few different
    components:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: Anyone in the company should be able to ask a question
  id: totrans-split-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That question should be meaningful to *them*
  id: totrans-split-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '“Meaningful” is not a concept that has any restraints or limitations or domains:
    if it’s meaningful, you should be able to ask it'
  id: totrans-split-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I’m going to expand on that “meaningful” part because I think it’s particularly
    necessary and that most people have far too limited of an idea of what should
    be possible here. Imagine you have a group of people collaborating together on
    understanding a problem; you’re going to have a context of understanding that
    spans more than one person, and you can roughly understand that context to be
    a composite of multiple parts. Let’s break up components of “meaning” into things
    you can combine together to get a composite scope for your question:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: The “vertical” context, in the sense of stream aligned teams
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “horizontal” context, in the sense of functional areas.
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The size of the subgroup in question: the individual, the team, the vertical,
    the organization, the enterprise, the market, and so on.'
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The time period in question: past, present, future, in six months, monthly,
    “every time we have a board meeting”, “if/when our competitor has an IPO”, etc'
  id: totrans-split-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The audience in question: a service, a team, an organization, a customer segment,
    an industry, a group of services, a cluster, a computer, …'
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s a lot more you could add, depending on what you care about, but you
    get the idea
  id: totrans-split-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s take the question “are we healthy” and blend that with various composite
    scopes in order to get a few examples of meaningful questions to illustrate this
    more concretely.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: I am an Engineer on Team A that is working on service A1\. Is service A1’s `/health`
    endpoint returning a successful response 99.9% of the time over a 5 minute interval?
  id: totrans-split-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I am an Engineering Manager of Team A that works on services A1, A2, and A3;
    is our team within our stated SLAs with our customers for the quarter?
  id: totrans-split-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are the Senior Engineering Manager and Senior Product Manager overseeing
    teams A, B, and C. Are we communicating effectively with each other, are we understanding
    each other, and are we building things that are in alignment with both our vertical’s
    OKRs as well as the rest of the organization?
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I am an Engineering Director of Org ABC, are we making the right trade-offs
    between feature work and reliability work so that we can maximize value delivery
    while not compromising on engineering health, employee attrition, customer satisfaction,
    and fiscal concerns?
  id: totrans-split-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I am a Product Manager, of these 50 features, which ones have the most synergy
    with what our GTM research is indicating we need to develop, and which ones can
    be designed in a way that our engineers have room to bake in reliability work
    *into* the product implementation so we can maximize roadmap velocity?
  id: totrans-split-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I am a Director of Customer Success that oversees customer support for the services
    of Org ABC, are we building the right internal tools to maximally enable our CSE
    function while also gaining the ability to understand what classes of customer
    support to automate or proactively mitigate?
  id: totrans-split-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I am the VP of Engineering, are we designing our engineering culture and engineering
    process in a way that maximizes productivity and ensures alignment of development
    work with the company north star?
  id: totrans-split-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I am the CTO, are we preparing our architecture to strategically position ourselves
    against the market today as well as ensuring that we build capabilities that allow
    us to rapidly innovate five years in the future?
  id: totrans-split-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I am the CISO, what is our business continuity profile, how does our risk profile
    look, and are we working effectively with other functions to ensure that appropriate
    trade-offs are being made to keep us in the clear in a cost-effective manner?
  id: totrans-split-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I could write hundreds of these, but the point is more that “are we healthy”
    is meaningful in so many ways that it’s going to be a different question, not
    only for every person who asks it, but *every time a person asks that question*.
    Asking the same question twice is not something that should be happening, because
    you won’t be the same company that you were when you asked the question last.
    Even if you asked the question yesterday, or an hour ago, you’re a different company
    now, with different context, different aims, different information, different
    everything.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: '**Leadership Insight:** You will never ask the same question twice. That’s
    why observability is a *process* of *capability development*.'
  id: totrans-split-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If we have a better understanding of what a meaningful question is, that’s cool,
    but that isn’t super useful for the business if we don’t have an idea of what
    a useful answer is.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: 'For me, useful answers also have a few different components:'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: The answer should be useful by way of concretely moving them closer to achieving
    *stated or unstated business goals.* Answers that are theoretically useful or
    maybe useful or “huh that’s neat” or “I might use that someday I guess” don’t
    count.
  id: totrans-split-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The answer’s utility should not require the answer to be “correct” or “factual”
    in any way.
  id: totrans-split-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While questions only need to be meaningful to someone, answers should try to
    be useful to everyone.
  id: totrans-split-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That’s… A lot harder than it looks. But luckily we have a saving grace: throw
    away your desire to have truthful, factual, or correct answers to meaningful questions.'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: 'Seriously, I mean it. I don’t mean it in a “we live in a post truth world”
    bullshit way, I mean it in the understanding of reality that comes when you realize
    that because everyone’s context and understanding and interpretation of the world
    is different, there is no way to ever arrive at a definition of “correctness”
    or “truth” or “fact” that is also useful for a situation that is not absolute
    and objective. This might terrify you, but lean into it and let it liberate you.
    Answers are useful if they let you move forward with concrete action: that’s it.'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
- en: '**Leadership Insight**: If you’re asking a meaningful question, it’s not going
    to have an objective answer; it’s subjective by definition because the meaning
    itself is subjective.'
  id: totrans-split-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You know that phrase that everyone loves to quote? “Disagree and commit”? I
    hate it. I think it’s a phrase that causes a lot more harm than good because it’s
    quoted so often out of context and used frequently as a cudgel by leadership to
    force top down consensus when it was originally intended to be a reminder to leaders
    to trust the people you hired.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
- en: 'That said, if you take the concept of trusting those you work with, and you
    throw away the oppositional and aggressive framing its buried in, you get something
    really cool: trust the questions people ask and utilize the answers they learn.'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: Get rid of “disagree and commit” and lean into “ask meaningful questions, get
    useful answers, and act on what you learn.” As a leader, it’s your job to help
    enable as many answers as possible to be meaningful to the business.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
- en: I want to tackle the other part of my definition now, which is that we have
    this process and it’s a process through which one develops an ability. What does
    that mean? It means you start out *being fucking terrible at it* and that is a
    Feature, Not a Bug™.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Think back to the first time you tried to do anything in engineering, or marketing,
    or sales, or any other part of your professional career. Not only was it natural
    for you to be bad at something, it was actually a good thing; getting things wrong
    is a necessary and integral part of the learning process itself. It’s through
    correction, evolution, enhancement, and iteration that you develop so many vital
    skills and hone your intuition. If you didn’t have that, and you just made the
    right choices, you’re not smart, you’re just lucky. Leaders don’t like being lucky
    for a reason: it doesn’t scale, and it’s terrible luck to be lucky.'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
- en: What that means to me for observability is that at the beginning, you’re going
    to be severely limited in the breadth, depth, scope, and nuance of your questions.
    But that’s okay! The simple questions are still meaningful questions to ask. This
    is something I see people trip up on a lot, so I want to hammer it home here.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
- en: In an ongoing process of iterative development, the progress itself *is* the
    output. You can’t ask a sophisticated question without having first asked a simple
    one; that just not how it works. Imagine going into a fiscal planning meeting
    and asking “hey what’s the Discount Cash Flow analysis broken out for our various
    business units” and everyone’s still busy clarifying what each business unit needs
    to declare as CapEx vs OpEx. Not only are you talking completely past everyone
    and derailing the entire meeting, but *you are going to get the wrong answer*
    and you will set yourself up for failure in the future by trying to ask a question
    like that before you have the basics down.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: '**Leadership Insight:** Asking the basics is not a sign of incompetence, it’s
    a sign of trusting the process and developing your observability “muscle.”'
  id: totrans-split-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For computer systems, your basics are probably going to look something like
    this (in order of increasing sophistication):'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
- en: “Is our service reachable internally”
  id: totrans-split-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: “Is our service reachable externally”
  id: totrans-split-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ok, cool cool cool, uptime is a lie, whatever: what is our uptime anyway?'
  id: totrans-split-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is our service reasonably performant?
  id: totrans-split-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is our service reasonably cost effective?
  id: totrans-split-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is where “traditional” monitoring usually stops
  id: totrans-split-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat all of the above but for each sub-service
  id: totrans-split-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat all of the above but for each endpoint
  id: totrans-split-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is where “modern observability” starts to really differentiate itself
  id: totrans-split-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat all of the above, but from the perspective of an individual end user
  id: totrans-split-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is where SLOs start to really become necessary as a tool for asking questions
  id: totrans-split-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: From the perspective of an individual end user, what’s the performance of an
    end-to-end request, segmented by every point in the chain?
  id: totrans-split-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This requires distributed tracing
  id: totrans-split-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Which of these various tuning options has the best performance characteristic?
  id: totrans-split-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A/B testing and other variation functionality becomes invaluable here
  id: totrans-split-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How does our system behave in various situations that we might not have accounted
    for?
  id: totrans-split-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is where chaos testing, fault injection, and other experimentation strategies
    start
  id: totrans-split-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Where are the most effective points in the system to leverage humans for adaptive
    capacity
  id: totrans-split-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (your next $1 billion startup goes here)
  id: totrans-split-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: So looking at this, and then looking at your company, you’ll notice that a *lot*
    of companies are only realistically at somewhere between 1-3\. That’s okay! It’s
    completely fine to not go further as long as the questions you can ask that are
    *meaningful* to the business aren’t captured by anything more sophisticated. Because
    after all, if you have no need to ask more nuanced questions, why would you need
    to develop further sophistication in your observability strategy?
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
- en: Some companies deeply need to be able to ask very nuanced questions around how
    humans and technology interoperate in a variety of unanticipated areas with a
    lot of unknown unknowns under very tight operating constraints. Some only really
    need to know “code go in, money get made.” That’s not a failure of the business;
    the only failure here is investing disproportionately to your need.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
- en: '**Leadership Insight:** That said, while the only failure of observability
    is investing disproportionately to your need, most companies are either investing
    too much or too little into observability.'
  id: totrans-split-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In my experience, I see most companies investing too much money into observability
    with very little meaningful return on investment because they keep treating it
    as a tech and tooling problem rather than a research capability.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
- en: 'We had the Control Theory definition of observability, and the Cognitive Systems
    Engineering definition of observability, and then I presented my definition of
    observability:'
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
- en: Observability is the process through which one develops the ability to ask meaningful
    questions, get useful answers, and act effectively on what you learn.
  id: totrans-split-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We also went over what the “meaningful questions” and “useful answers” bit means,
    and we went over the process of developing an ability. When we combine those two,
    we get something that actually really reminds me of the five levels of expertise
    in the dreyfus model of skill acquisition (novice, advanced beginner, competent,
    proficient, expert).
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Which, honestly, I love that; you absolutely should be thinking of observability
    as developing an organizational wide capability of asking meaningful questions
    and getting useful answers. Of course, once you have a useful answer, you have
    the final part: acting on it.'
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
- en: Learning, without action, isn’t learning; it’s fundamentally a process. And
    processes? Processes are messy, they require action, they require movement, they
    require *doing*, they require re-evaluating the process, they require evolving
    the process, they require wrangling with the human condition itself.
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
- en: Just like observability.
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
- en: To put simply, observability is organizational learning.
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
