- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:41:02'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:41:02'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Swift.org - Swift 5.10 Released
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swift.org - Swift 5.10发布
- en: 来源：[https://www.swift.org/blog/swift-5.10-released/](https://www.swift.org/blog/swift-5.10-released/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.swift.org/blog/swift-5.10-released/](https://www.swift.org/blog/swift-5.10-released/)
- en: Swift 5.10 Released
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swift 5.10发布
- en: March 5, 2024
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年3月5日
- en: Swift was designed to be safe by default, preventing entire categories of programming
    mistakes at compile time. Sources of undefined behavior in C-based languages,
    such as using variables before they’re initialized or a use-after-free, are defined
    away in Swift.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: Swift的设计默认安全，可以在编译时防止整类编程错误。在基于C的语言中，如在变量初始化之前使用或使用后释放的情况，这些未定义行为在Swift中都被定义清楚。
- en: An increasingly important source of undefined behavior is concurrent code that
    inadvertently accesses memory from one thread at the same time that another thread
    is writing to the same memory. This kind of unsafety is called a *data race*,
    and data races make concurrent programs exceptionally difficult to write correctly.
    Swift solves this problem through *data isolation* provided by actors and tasks,
    which guarantees mutually exclusive access to shared mutable state. Data isolation
    enforcement has been under active development since 2020 when the [Swift concurrency
    roadmap](https://forums.swift.org/t/swift-concurrency-roadmap/41611) was posted.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 并发代码中越来越重要的未定义行为来源之一是一个线程在写入内存的同时，另一个线程无意中访问同一内存。这种不安全性被称为*数据竞争*，而数据竞争使得并发程序异常难以正确编写。Swift通过演员（actors）和任务（tasks）提供的*数据隔离*来解决这个问题，保证对共享可变状态的互斥访问。数据隔离的执行自2020年发布[Swift并发路线图](https://forums.swift.org/t/swift-concurrency-roadmap/41611)以来一直在积极开发中。
- en: '**Swift 5.10 accomplishes full data isolation in the concurrency language model.**
    This important milestone has taken years of active development over many releases.
    The concurrency model was introduced in Swift 5.5 including `async`/`await`, actors,
    and structured concurrency. Swift 5.7 introduced `Sendable` as the fundamental
    concept for thread-safe types whose values can be shared across arbitrary concurrent
    contexts without introducing a risk of data races. And now, in Swift 5.10, full
    data isolation is enforced at compile time in all areas of the language when the
    complete concurrency checking option is enabled.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Swift 5.10在并发语言模型中实现了完全的数据隔离**。这一重要的里程碑经过多个版本的积极开发数年才实现。并发模型在Swift 5.5中引入了`async`/`await`、演员和结构化并发。Swift
    5.7引入了`Sendable`作为可以在任意并发上下文中共享其值而不引入数据竞争风险的线程安全类型的基本概念。现在，在Swift 5.10中，当启用完整并发检查选项时，编译时会在语言的所有领域强制执行完全的数据隔离。'
- en: Full data isolation in Swift 5.10 sets the stage for the next major release,
    Swift 6\. The Swift 6.0 compiler will offer a new, opt-in Swift 6 language mode
    that will enforce full data isolation by default, and we will embark upon the
    transition to eliminate data races across all software written in Swift.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 5.10中的完全数据隔离为下一个主要版本Swift 6铺平了道路。Swift 6.0编译器将提供一个新的可选Swift 6语言模式，默认情况下强制执行完全的数据隔离，我们将开始过渡以消除Swift编写的所有软件中的数据竞争。
- en: Swift 5.10 will produce data-race warnings in some circumstances where the code
    could be proven safe with additional compiler analysis. A major focus of language
    development for the Swift 6 release is improving the usability of strict concurrency
    checking by mitigating false positive concurrency errors in common code patterns
    that are proven to be safe.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，Swift 5.10将在代码能够通过额外的编译器分析被证明安全时生成数据竞争警告。Swift 6版本的主要开发重点是通过减少常见代码模式中被证明安全的假阳性并改善严格并发检查的可用性，以提升语言发展。
- en: Read on to learn about full data isolation in Swift 5.10, new unsafe opt-outs
    for actor isolation checking, and the remaining concurrency evolution ahead of
    Swift 6.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 继续阅读了解Swift 5.10中的完全数据隔离、用于演员隔离检查的新不安全选择，以及Swift 6之前剩余的并发演进。
- en: Swift 5.10 rounds out the data-race safety semantics in all corners of the language,
    and fixes numerous bugs in `Sendable` and actor isolation checking to strengthen
    the guarantees of complete concurrency checking. When building code with the compiler
    flag `-strict-concurrency=complete`, Swift 5.10 will diagnose the potential for
    data races at compile time except where an explicit unsafe opt-out, such as `nonisolated(unsafe)`
    or `@unchecked Sendable`, is used.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 5.10 在语言的所有角落完善了数据竞争安全语义，并修复了`Sendable`和演员隔离检查中的许多错误，以加强完整并发检查的保证。使用编译器标志`-strict-concurrency=complete`构建代码时，Swift
    5.10 将在编译时诊断出潜在的数据竞争，除非使用显式的不安全退出，例如`nonisolated(unsafe)`或`@unchecked Sendable`。
- en: 'For example, in Swift 5.9, the following code fails an isolation assertion
    at runtime due to a `@MainActor`-isolated initializer being evaluated outside
    the actor, but it was not diagnosed under `-strict-concurrency=complete`:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 Swift 5.9 中，由于在演员之外评估了`@MainActor`隔离的初始化器，以下代码在运行时失败了隔离断言，但在`-strict-concurrency=complete`下未被诊断：
- en: '[PRE0]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The above code admits data races. `MyModel.shared` is a `@MainActor`-isolated
    static variable, which evaluates a `@MainActor`-isolated initial value upon first
    access. `MyModel.shared` is accessed synchronously from a `nonisolated` context
    inside the `useShared()` function, so the initial value is computed off the main
    actor. In Swift 5.10, compiling the code with `-strict-concurrency=complete` produces
    a warning that the access must be done asynchronously:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码允许数据竞争。`MyModel.shared`是一个`@MainActor`隔离的静态变量，在首次访问时评估了一个`@MainActor`隔离的初始值。`MyModel.shared`从`nonisolated`上下文中同步访问，因此初始值在主演员之外计算。在Swift
    5.10中，使用`-strict-concurrency=complete`编译代码会产生一个警告，要求异步执行访问：
- en: '[PRE1]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The possible fixes for resolving the data race are 1) access `MyModel.shared`
    asynchronously using `await`, 2) make `MyModel.init` and `MyModel.shared` both
    `nonisolated` and move the code that requires the main actor into a separate isolated
    method, or 3) isolate `useShared()` to `@MainActor`.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 解决数据竞争的可能修复方法包括 1) 使用`await`异步访问`MyModel.shared`，2) 使`MyModel.init`和`MyModel.shared`都是`nonisolated`并将需要主演员的代码移到单独的隔离方法中，或者
    3) 将`useShared()`隔离到`@MainActor`。
- en: You can find more details about the changes and additions to the full data isolation
    programming model in the [Swift 5.10 release notes](https://github.com/apple/swift/blob/release/5.10/CHANGELOG.md).
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[Swift 5.10 发布说明](https://github.com/apple/swift/blob/release/5.10/CHANGELOG.md)中找到有关完整数据隔离编程模型的更多详细信息。
- en: Unsafe opt-outs, such as `@unchecked Sendable` conformances, are important for
    communicating that code is safe from data-races when it cannot be proven automatically
    by the compiler. These tools are necessary in cases where synchronization is implemented
    in a way that the compiler cannot reason about, such as through OS-specific primitives
    or when working with thread-safe types implemented in C/C++/Objective-C. However,
    `@unchecked Sendable` conformances are difficult to use correctly, because they
    opt the entire type out of data-race safety checking. In many cases, only one
    specific property in a type needs the opt-out, while the rest of the implementation
    adheres to static concurrency safety.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`@unchecked Sendable`符合要求对于表明代码在不能被编译器自动证明安全免于数据竞争的情况下是重要的。这些工具在同步通过操作系统特定原语实现或在与
    C/C++/Objective-C 实现的线程安全类型一起工作时，编译器无法推理的情况下是必要的。然而，`@unchecked Sendable`的符合要求很难正确使用，因为它将整个类型从数据竞争安全检查中排除。在许多情况下，类型中只有一个特定的属性需要排除，而其余的实现符合静态并发安全。
- en: Swift 5.10 introduces a new `nonisolated(unsafe)` keyword to opt out of actor
    isolation checking for stored properties and variables. `nonisolated(unsafe)`
    can be used on any form of storage, including stored properties, local variables,
    and global/static variables.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 5.10 引入了一个新的`nonisolated(unsafe)`关键字，用于取消对存储属性和变量的演员隔离检查。`nonisolated(unsafe)`可以用于任何形式的存储，包括存储属性、局部变量和全局/静态变量。
- en: 'For example, global and static variables can be accessed from anywhere in your
    code, so they are required to either be immutable and `Sendable`, or isolated
    to a global actor:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，全局和静态变量可以从代码的任何位置访问，因此它们要么是不可变的且`Sendable`，要么是隔离到全局演员中：
- en: '[PRE2]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When building the above code with `-strict-concurrency=complete`, the compiler
    emits a warning:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-strict-concurrency=complete`构建上述代码时，编译器会发出警告：
- en: '[PRE3]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'All uses of `globalCache` are guarded by `cacheQueue.async { ... }`, so this
    code is free of data races in practice. In this case, `nonisolated(unsafe)` can
    be applied to the static variable to silence the concurrency warning:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所有对`globalCache`的使用都受到`cacheQueue.async { ... }`的保护，因此该代码在实践中不会发生数据竞争。在这种情况下，可以将`nonisolated(unsafe)`应用于静态变量以消除并发警告：
- en: '[PRE4]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`nonisolated(unsafe)` also eliminates the need for `@unchecked Sendable` wrapper
    types that are used only to pass specific instances of non-`Sendable` values across
    isolation boundaries when there is no potential for concurrent access:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`nonisolated(unsafe)` 还消除了只用于在没有并发访问可能性时跨隔离边界传递特定实例的非`Sendable`值的`@unchecked
    Sendable`包装类型的需要：'
- en: '[PRE5]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that without correct implementation of a synchronization mechanism to achieve
    data isolation, dynamic analysis from exclusivity enforcement or tools such as
    the Thread Sanitizer may still identify failures.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果没有正确实现同步机制来实现数据隔离，来自排他性强制执行或诸如线程检测器之类的工具的动态分析仍可能识别失败。
- en: '**The next release of Swift will be Swift 6.** The complete concurrency model
    in Swift 5.10 is overly restrictive, and several Swift Evolution proposals are
    in active development to improve the usability of full data isolation by removing
    false postive data-race errors. This work includes [lifting limitations on passing
    non-`Sendable` values across isolation boundaries](https://github.com/apple/swift-evolution/blob/main/proposals/0414-region-based-isolation.md)
    when the compiler determines there is no potential for concurrent access, [more
    effective `Sendable` inference for functions and key-paths](https://github.com/apple/swift-evolution/blob/main/proposals/0418-inferring-sendable-for-methods.md),
    and more. You can find the set of proposals that will round out Swift 6 at [Swift.org/swift-evolution](https://www.swift.org/swift-evolution/#?version=6.0).'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**Swift 的下一个版本将是 Swift 6。** Swift 5.10 中的完整并发模型过于严格，并且有几个 Swift Evolution 提案正在积极开发中，以改进通过消除假阳性数据竞争错误来改进完整数据隔离的可用性。这项工作包括[在编译器确定不存在并发访问可能性时，解除跨隔离边界传递非`Sendable`值的限制](https://github.com/apple/swift-evolution/blob/main/proposals/0414-region-based-isolation.md)，[函数和关键路径的更有效`Sendable`推断](https://github.com/apple/swift-evolution/blob/main/proposals/0418-inferring-sendable-for-methods.md)，等等。您可以在[Swift.org/swift-evolution](https://www.swift.org/swift-evolution/#?version=6.0)找到将完善
    Swift 6 的一系列提案。'
- en: You can help shape the transition to the Swift 6 language mode by [trying out
    complete concurrency checking](/documentation/concurrency/) in your project and
    providing feedback on your experience.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在项目中[尝试完整的并发检查](/documentation/concurrency/)来帮助塑造向 Swift 6 语言模式的过渡，并提供您的体验反馈。
- en: If you find any remaining compiler bugs where complete concurrency checking
    does not diagnose a data race at compile time, please [report an issue](https://github.com/apple/swift/issues/new/choose).
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现任何编译器仍未在编译时诊断数据竞争的完整并发检查错误，请[报告问题](https://github.com/apple/swift/issues/new/choose)。
- en: You can also provide feedback that helps improve the concurrency documentation,
    compiler error messages, and the upcoming Swift 6 migration guide. If you encounter
    a case where the compiler diagnoses a data-race warning that you don’t understand
    or you’re not sure how to resolve a given data-race warning, please start a [discussion
    thread on the Swift forums](https://forums.swift.org/tags/c/swift-users/15/concurrency)
    using the `concurrency` tag.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以提供反馈，帮助改进并发文档、编译器错误消息以及即将推出的 Swift 6 迁移指南。如果您遇到编译器诊断您不理解的数据竞争警告，或者不确定如何解决给定的数据竞争警告，请在[Swift
    论坛上的讨论线程](https://forums.swift.org/tags/c/swift-users/15/concurrency)上使用`concurrency`标签开启讨论。
- en: Official binaries for Swift 5.10 are [available for download](https://swift.org/download/)
    from [Swift.org](http://swift.org/) for macOS, Windows, and Linux.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 官方提供的 Swift 5.10 二进制文件可以从[Swift.org](https://swift.org/download/)下载，适用于 macOS、Windows
    和 Linux。
- en: 'The following language proposals were accepted through the [Swift Evolution](https://github.com/apple/swift-evolution)
    process and [implemented in Swift 5.10](https://www.swift.org/swift-evolution/#?version=5.10):'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语言提案通过[Swift Evolution](https://github.com/apple/swift-evolution)流程得到接受，并且已经在[Swift
    5.10](https://www.swift.org/swift-evolution/#?version=5.10)中实现：
