- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:44:58'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:44:58'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: What are React Server Components?
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是React服务器组件？
- en: 来源：[https://www.builder.io/blog/why-react-server-components](https://www.builder.io/blog/why-react-server-components)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.builder.io/blog/why-react-server-components](https://www.builder.io/blog/why-react-server-components)
- en: Server Components represent a new type of React component specifically designed
    to operate exclusively on the server. And unlike client components, their code
    stays on the server and is never downloaded to the client. This design choice
    offers multiple benefits to React apps. Let's take a closer look at these benefits.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器组件代表一种专门设计用于在服务器上独占运行的React组件类型。与客户端组件不同，它们的代码保留在服务器上，永远不会下载到客户端。这种设计选择为React应用程序带来了多重好处。让我们更详细地了解这些好处。
- en: '**Zero-bundle sizes**'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**零捆绑大小**'
- en: First, in terms of bundle sizes, Server Components do not send code to the client,
    allowing large dependencies to remain server-side. This benefits users with slower
    internet connections or less capable devices by eliminating the need to download,
    parse, and execute JavaScript for these components. Additionally, it removes the
    hydration step, speeding up app loading and interaction.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在捆绑大小方面，服务器组件不会向客户端发送代码，允许大型依赖项保持在服务器端。这有利于那些网络连接较慢或设备性能较差的用户，因为对于这些组件，无需下载、解析和执行JavaScript。此外，它还去除了水合步骤，加快了应用程序的加载和交互速度。
- en: '**Direct access to server-side resources**'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**直接访问服务器端资源**'
- en: Second, by having direct backend access to server-side resources like databases
    or file systems, Server Components enable efficient data fetching and rendering
    without needing additional client-side processing. Leveraging the server's computational
    power and proximity to data sources, they manage compute-intensive rendering tasks
    and send only interactive pieces of code to the client.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，通过直接访问服务器端资源（如数据库或文件系统），服务器组件使得数据获取和渲染更加高效，无需额外的客户端处理。利用服务器的计算能力和数据源的接近性，它们管理计算密集型渲染任务，并仅向客户端发送交互式代码片段。
- en: '**Enhanced security**'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**增强的安全性**'
- en: Third, Server Components' exclusive server-side execution enhances security
    by keeping sensitive data and logic, including tokens and API keys, away from
    the client-side.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，服务器组件的独占服务器端执行增强了安全性，通过将敏感数据和逻辑（包括令牌和API密钥）远离客户端。
- en: '**Improved data fetching**'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**改进的数据获取**'
- en: Fourth, Server Components enhance data fetching efficiency. Typically, when
    fetching data on the client-side using `useEffect`, a child component cannot begin
    loading its data until the parent component has finished loading its own. This
    sequential fetching of data often leads to poor performance.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第四，服务器组件提升了数据获取效率。通常情况下，使用`useEffect`在客户端获取数据时，子组件只有在父组件完成加载数据后才能开始加载自己的数据。这种顺序获取数据常常导致性能不佳。
- en: The main issue is not the round trips themselves, but that these round trips
    are made from the client to the server. Server Components enable applications
    to shift these sequential round trips to the server side. By moving this logic
    to the server, request latency is reduced, and overall performance is improved,
    eliminating client-server waterfalls.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 主要问题不在于往返旅行本身，而在于这些往返旅行是从客户端到服务器端进行的。服务器组件使应用程序能够将这些顺序往返旅行移到服务器端。通过将此逻辑移到服务器端，减少了请求延迟，并提高了整体性能，消除了客户端服务器瀑布现象。
- en: '**Caching**'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**缓存**'
- en: Fifth, rendering on the server enables caching of the results, which can be
    reused in subsequent requests and across different users. This approach can significantly
    improve performance and reduce costs by minimizing the amount of rendering and
    data fetching required for each request.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第五，服务器端渲染使结果可以缓存，可以在后续请求和不同用户之间重复使用。这种方法可以显著提高性能，并通过最小化每个请求所需的渲染和数据获取来降低成本。
- en: '**Faster initial page load and First Contentful Paint**'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**更快的初始页面加载和首次内容绘制**'
- en: Sixth, Initial Page Load and First Contentful Paint (FCP) are significantly
    improved with Server Components. By generating HTML on the server, pages render
    immediately without the delay of downloading, parsing, and executing JavaScript.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第六，通过服务器组件，初始页面加载和首次内容绘制（FCP）显著改善。通过在服务器上生成HTML，页面立即渲染，无需下载、解析和执行JavaScript而导致的延迟。
- en: '**Improved SEO**'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**改进的SEO**'
- en: Seventh, regarding Search Engine Optimization (SEO), the server-rendered HTML
    is fully accessible to search engine bots, enhancing the indexability of your
    pages.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第七，关于搜索引擎优化（SEO），服务器渲染的HTML对搜索引擎爬虫完全可访问，增强了页面的可索引性。
- en: '**Efficient streaming**'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**高效的流式传输**'
- en: Lastly, there's streaming. Server Components allows the rendering process to
    be divided into manageable chunks, which are then streamed to the client as soon
    as they are ready. This approach allows users to start seeing parts of the page
    earlier, eliminating the need to wait for the entire page to finish rendering
    on the server.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后是流式传输。服务器组件允许将渲染过程分成可管理的块，然后在准备好时将其流式传输到客户端。这种方法使用户可以更早地看到页面的部分内容，消除了在服务器上等待整个页面渲染完成的必要性。
- en: 'Here’s an example of a `ProductList` page server component:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个`ProductList`页面服务器组件的示例：
