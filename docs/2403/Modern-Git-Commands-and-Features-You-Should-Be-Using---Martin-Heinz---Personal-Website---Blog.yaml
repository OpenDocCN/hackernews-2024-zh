- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:49:11'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:49:11'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Modern Git Commands and Features You Should Be Using | Martin Heinz | Personal
    Website & Blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代Git命令和功能你应该知道 | Martin Heinz | 个人网站和博客
- en: 来源：[https://martinheinz.dev/blog/109](https://martinheinz.dev/blog/109)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://martinheinz.dev/blog/109](https://martinheinz.dev/blog/109)
- en: All of us - software engineers - use `git` every day, however most people only
    ever touch the most basic of commands, such as `add`, `commit`, `push` or `pull`,
    like it's still 2005\.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有人 - 软件工程师 - 每天都在使用`git`，然而大多数人只接触最基本的命令，比如`add`、`commit`、`push`或`pull`，就好像还是2005年一样。
- en: Git however, introduced many features since then, and using them can make your
    life so much easier, so let's explore some of the recently added, modern `git`
    commands, that you should know about.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Git自那时起引入了许多功能，使用它们可以让您的生活变得更加轻松，让我们探索一些最近新增的现代`git`命令。
- en: Switch
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Switch
- en: 'New since 2019, or more precisely, introduced Git version 2.23, is `git switch`
    which we can use to switch branches:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 自2019年以来，或更准确地说，引入了Git版本2.23的新功能`git switch`，我们可以用它来切换分支：
- en: '[PRE0]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Well that's cool, but we've been switching branches in Git since ever using
    `git checkout`, why the need for a separate command? `git checkout` is a very
    versatile command - it can (among other things) check out or restore specific
    files or even specific commits, while the new `git switch` *only* switches the
    branch. Additionally, `switch` performs extra sanity checks that `checkout` doesn't,
    for example switch would abort operation if it would lead to loss of local changes.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，这很酷，但我们一直以来都在使用`git checkout`来切换分支，为什么需要一个单独的命令呢？`git checkout`是一个非常多功能的命令
    - 它可以（除其他功能外）检出或恢复特定文件甚至特定提交，而新的`git switch`*只*切换分支。另外，`switch`执行额外的健全性检查，`checkout`则不会，例如如果切换导致本地更改丢失，`switch`会中止操作。
- en: Restore
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Restore
- en: 'Another new subcommand/feature added in Git version 2.23 is `git restore`,
    which we can use to restore a file to last committed version:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个在Git版本2.23中新增的子命令/功能是`git restore`，我们可以使用它将文件恢复到上次提交的版本：
- en: '[PRE1]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The comments in the above snippet explain the workings of various `git restore`.
    Generally speaking `git restore` replaces and simplifies some of the use cases
    of `git reset` and `git checkout` which are already overloaded features. See also
    [this docs section](https://git-scm.com/docs/git#_reset_restore_and_revert) for
    comparison of `revert`, `restore` and `reset`.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上述片段中的注释解释了各种`git restore`的工作原理。总体而言，`git restore`替代并简化了一些已经负载过重的`git reset`和`git
    checkout`的使用情况。另请参阅[这部分文档](https://git-scm.com/docs/git#_reset_restore_and_revert)来比较`revert`、`restore`和`reset`。
- en: Sparse Checkout
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sparse Checkout
- en: Next one is `git sparse-checkout`, a little more obscure feature that was added
    in Git 2.25, which was released on January 13, 2020\.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个是`git sparse-checkout`，这是一个比较隐晦的功能，添加于Git 2.25，发布于2020年1月13日。
- en: 'Let''s say you have a large monorepo, with microservices separated into individual
    directories, and commands such as `checkout` or `status` are super slow because
    of the repository size, but maybe you really just need to work with single subtree/directory.
    Well, `git sparse-checkout` to the rescue:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个庞大的单体库，将微服务分隔到各个单独的目录中，由于仓库的大小，像`checkout`或`status`这样的命令非常慢，但也许您真的只需要处理单个子树/目录。好吧，`git
    sparse-checkout`来拯救您：
- en: '[PRE2]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above example we first clone the repo without actually checking out all
    the files. We then use `git sparse-checkout init --cone` to configure `git` to
    only match files in the root of the repository. So, after running checkout we
    only have 3 files rather than whole tree. To then download/checkout particular
    directory, we use `git sparse-checkout set ...`.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们首先克隆了仓库，而不实际检出所有文件。然后我们使用`git sparse-checkout init --cone`来配置`git`只匹配仓库根目录中的文件。因此，在运行检出后，我们只有3个文件而不是整个树。然后，要下载/检出特定目录，我们使用`git
    sparse-checkout set ...`。
- en: As already mentioned, this can be very handy when working locally with huge
    repos, but it's equally useful in CI/CD for improving performance of a pipeline,
    when you only want to build/deploy part of the monorepo and there's no need to
    check out everything.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当在本地使用大型仓库时，这种方法非常方便，但在CI/CD中同样有用，可以提高流水线的性能，当您只想构建/部署单个单体库的一部分时，不需要检出所有内容。
- en: For detailed write-up about `sparse-checkout` see [this article](https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/).
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 想要详细了解`sparse-checkout`的文章，请参阅[这篇文章](https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/)。
- en: Worktree
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Worktree
- en: It's not uncommon, that one might have to work on multiple features in single
    application (repository) at the same time, or maybe a critical bug comes in while
    you're in the middle of working some feature request.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不少人可能需要同时在单个应用（仓库）中工作多个特性，或者可能在处理某个特性请求时出现了一个关键bug。
- en: 'In those situations, you either have to have multiple versions/branches of
    the repository cloned, or you need to stash/discard whatever you''ve been working
    on at the time. The answer to these situations is `git worktree`, released on
    September 24, 2018:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，你可能需要克隆仓库的多个版本/分支，或者需要在当时存储/丢弃你正在处理的内容。这些情况的答案是`git worktree`，发布于2018年9月24日：
- en: '[PRE3]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command allows us to have multiple branches of the same repository checked
    out at the same time. In the example above, we have 2 branches `dev` and `master`.
    Let's say we're working on feature in the `dev` branch, but we're told to make
    urgent bug fix. Rather than stashing the changes and resetting the branch, we
    create a new worktree in the `./hotfix` subdirectory from the `master` branch.
    We can then move to that directory, do our changes, push them and return to the
    original worktree.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令允许我们同时在同一个仓库中检出多个分支。在上面的例子中，我们有2个分支`dev`和`master`。假设我们正在`dev`分支上开发一个特性，但被告知要进行紧急bug修复。我们可以在`master`分支的`./hotfix`子目录中创建一个新的工作树。然后我们可以切换到那个目录，进行我们的更改，推送它们，然后返回到原始的工作树。
- en: For a more detailed write-up see [this article](https://opensource.com/article/21/4/git-worktree).
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更详细的内容，请参阅[这篇文章](https://opensource.com/article/21/4/git-worktree)。
- en: Bisect
  id: totrans-split-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二分查找
- en: Last but not least, `git bisect`, which isn't so new (Git 1.7.14, released on
    May 13, 2012), but most people are using only `git` features from around 2005,
    so I think it's worth showing anyway.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但并非最不重要的，`git bisect`，虽然并不是很新（Git 1.7.14，2012年5月13日发布），但大多数人只使用了大约2005年左右的`git`功能，所以我认为还是值得展示的。
- en: 'As the [docs page](https://git-scm.com/docs/git-bisect) describes it: *`git-bisect`
    - Use binary search to find the commit that introduced a bug*:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如[文档页面](https://git-scm.com/docs/git-bisect)所描述的：*`git-bisect` - 使用二分查找来找出引入bug的提交*：
- en: '[PRE4]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We start by explicitly starting the bisection session with `git bisect start`,
    after which we provide the commit that doesn't work (most likely the `HEAD`) and
    the last known working commit or tag. With that information, `git` will check
    out a commit halfway between the *"bad"* and *"good"* commit. At which point we
    need to test whether that version has the bug or not, we then use `git bisect
    good` to tell `git` that it works or `git bisect bad` that it doesn't. We keep
    repeating the process until no commits are left and `git` will tell us which commit
    is the one that introduced the issue.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要显式地使用`git bisect start`开始二分查找会话，之后我们提供不工作的提交（最可能是`HEAD`）和最后一个已知的工作提交或标签。有了这些信息，`git`将检出介于*"bad"*和*"good"*提交之间的提交。在这一点上，我们需要测试该版本是否有bug，然后使用`git
    bisect good`告诉`git`它工作正常或者`git bisect bad`告诉`git`它不工作。我们不断重复这个过程，直到没有提交剩余，`git`会告诉我们引入问题的是哪个提交。
- en: I recommend checking out the [docs page](https://git-scm.com/docs/git-bisect)
    that shows couple more options for `git bisect` including visualizing, replaying
    or skipping commits.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议查看[文档页面](https://git-scm.com/docs/git-bisect)，其中展示了几个`git bisect`的更多选项，包括可视化、重播或跳过提交。
- en: Conclusion
  id: totrans-split-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: If you search for some problem relating to `git`, you will most likely end up
    on *StackOverflow* question with answer that has couple thousand upvotes. While
    this answer will be mostly likely still valid, it very well might be outdated,
    because it was written 10 years ago. Therefore, there might be a better, simpler,
    easier way to do it. So, when faced with some `git` issue, I would recommend to
    check [git docs](https://git-scm.com/) for more recent commands, all of which
    have a lot of great examples, or to explore `man` pages for lots of flags and
    options that were added to the good old commands over the years.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你搜索与`git`相关的问题，很可能会最终看到*StackOverflow*上的一个答案，其点赞数可能达到几千。尽管这个答案可能仍然有效，但它很可能已经过时，因为它是10年前编写的。因此，可能有更好、更简单、更容易的方法来处理。因此，当面对某个`git`问题时，我建议查看[git文档](https://git-scm.com/)获取更新的命令，这些命令都有很多优秀的示例，或者探索`man`页面，查看多年来添加到这些经典命令中的许多标志和选项。
