- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-27 14:52:19'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:52:19
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Go, Python, Rust, and production AI applications – Sameer Ajmani
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[Go, Python, Rust, and production AI applications – Sameer Ajmani](https://ajmani.net/2024/03/11/go-python-rust-and-production-ai-applications/)是由**Sameer
    Ajmani**所著。'
- en: 来源：[https://ajmani.net/2024/03/11/go-python-rust-and-production-ai-applications/](https://ajmani.net/2024/03/11/go-python-rust-and-production-ai-applications/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ajmani.net/2024/03/11/go-python-rust-and-production-ai-applications/](https://ajmani.net/2024/03/11/go-python-rust-and-production-ai-applications/)
- en: In this article, I’ll talk about Go, Python, and Rust, and each language’s role
    in building AI-powered applications.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将讨论Go、Python和Rust在构建基于AI的应用程序中的角色。
- en: '**Python was the first programming language I ever loved, and Go was the second**.
    But let’s start at the beginning …'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python是我最喜欢的第一种编程语言，Go是第二种**。但让我们从头开始……'
- en: I discovered the power of programming in my high school linear algebra class.
    We were learning the Simplex method for linear programming and were expected to
    memorize the algorithm for an exam. The steps were entirely mechanical but tedious
    and error prone. I had noticed that our TI-81 calculators supported programming,
    so I asked the teacher whether I could use it for the algorithm. She agreed. It
    took me hours to write the program on the calculator, but with it I completed
    the 45-minute exam in 5 minutes and walked out like a boss.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我在高中线性代数课上发现了编程的力量。我们正在学习线性规划的单纯形法，并期望为考试记住算法。这些步骤完全是机械的，但很繁琐且容易出错。我注意到我们的TI-81计算器支持编程，所以我问老师是否可以用它来实现算法。她同意了。我花了几个小时在计算器上编写程序，但借助它，我在5分钟内完成了原本需要45分钟的考试，并且非常轻松地走出考场。
- en: Pascal was the first language I learned formally, then Scheme, C, and C++. As
    a grad student, I learned Java and became enamored with its safety, memory management,
    and ability to dynamically load bytecode. As a teaching assistant for 6.170, MIT’s
    software engineering course, I used Java’s dynamic class loading to automatically
    test and grade students’ programming assignments.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: Pascal是我正式学习的第一门语言，然后是Scheme、C和C++。作为研究生，我学习了Java，并迷恋上了它的安全性、内存管理以及动态加载字节码的能力。作为MIT软件工程课程6.170的助教，我使用Java的动态类加载自动测试和评分学生的编程作业。
- en: Then I found Python, and it was something truly special. **Python was so simple,
    so light on the page, so readable—it felt like programming in natural language**.
    I started using Python everywhere I could. I even used Python to answer programming
    questions during my Google interviews, so much so that the interviewers asked
    that I write a header file for a double-ended queue to prove that I actually knew
    C++.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我发现了Python，它真的很特别。**Python如此简单，页面上如此轻巧，如此可读——感觉就像用自然语言编程**。我开始无论何时都使用Python。甚至在谷歌面试时，我使用Python回答编程问题，以至于面试官要求我写一个双端队列的头文件，以证明我确实了解C++。
- en: 'Once I joined Google in 2004, I was back to writing C++ most of the time. It
    was fine, but not *joyful*. I missed the simplicity and lightness of Python, but
    I understood the need for efficiency demanded by “Google scale”. But then, [in
    2010, I found Go](https://www.linkedin.com/pulse/gos-early-growth-2012-2016-sameer-ajmani-oxtjc/),
    and I felt like someone had finally given me the best of both worlds: a simple,
    light, joyful language that also provided great performance, reliability, and
    scale. I was thrilled.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我在2004年加入Google，我又开始大部分时间写C++。这也还好，但并不是*愉悦的*。我错过了Python的简洁和轻松，但我理解在“Google规模”所需的效率。但是，[2010年，我发现了Go](https://www.linkedin.com/pulse/gos-early-growth-2012-2016-sameer-ajmani-oxtjc/)，感觉就像有人终于给了我最好的两个世界：一个简单、轻松、愉悦的语言，同时还提供了出色的性能、可靠性和规模化。我非常激动。
- en: I was not alone. While Go had been designed as an alternative to C++ for building
    networked services, much of Go’s early adoption came from dynamic language users,
    particularly from Python and Ruby. [Jeremy Manson’s post](https://www.linkedin.com/pulse/language-policy-google-lets-go-jeremy-manson-ffmac/)
    describes the challenges Google had running Python in production and how Go provided
    a way forward. The same thing happened outside Google, with many Python and Ruby
    developers adopting Go to achieve greater reliability and efficiency while retaining
    a fast inner loop.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不孤单。虽然Go被设计为构建网络服务的C++替代品，但其早期采用主要来自动态语言用户，特别是来自Python和Ruby的用户。[Jeremy Manson的文章](https://www.linkedin.com/pulse/language-policy-google-lets-go-jeremy-manson-ffmac/)描述了Google在生产中运行Python时遇到的挑战以及Go如何提供了一种前进的方式。在Google之外也发生了同样的事情，许多Python和Ruby开发者采用Go以实现更高的可靠性和效率，同时保留快速的内部循环。
- en: 'Meanwhile, Python was going through a renaissance. While Python’s use for web
    backends was declining, its use for data science was *booming*. Scientists had
    discovered what I did: a light, simple language that made it easy to iterate and
    ran efficiently enough, especially when Python could delegate heavy numerical
    computations to C libraries. After scientific computing and “big data” came ML
    development, and now we have LLM application development. Python is the default
    language for all of these, and its ecosystem is rich and enormous.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，Python正在经历一场复兴。尽管Python在Web后端的使用正在下降，但在数据科学领域的使用却在*蓬勃发展*。科学家们发现了我发现的东西：一种轻便简洁的语言，易于迭代，在Python能够将繁重的数值计算委托给C库时运行效率足够高。科学计算和“大数据”之后是ML开发，现在是LLM应用程序开发。Python是所有这些领域的默认语言，其生态系统丰富而庞大。
- en: But there’s a problem. Python is amazing for working with data, developing models,
    and prototyping applications, but it doesn’t scale well. The features of static
    languages—type checking, compilation to machine code, and more—are what enable
    **scaling to large programs, large development teams, and large systems**. And
    production systems require their own ecosystem of libraries and tools to enable
    developers and operators to work effectively at scale.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但是存在一个问题。Python非常适合处理数据、开发模型和原型应用程序，但不擅长扩展。静态语言的特性——类型检查、编译到机器码等——是实现**大型程序、大型开发团队和大型系统扩展**的关键。而生产系统需要自己的库和工具生态系统，以使开发人员和操作员能够有效地在规模化环境下工作。
- en: 'We’ve been talking with people who are running AI-powered applications in production,
    and we keep hearing the same thing: these applications are written in Python,
    but these organizations don’t want to support Python in production. While Python
    may become better in production over time, the AI revolution is happening right
    now, and people want an alternative. I believe that alternative is Go. **LLM-powered
    applications are primarily about orchestration**: calling into one or more models,
    in sequence or in parallel, and synthesizing the results—and doing this at scale,
    with strong support for production operators. Go excels at this.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在与正在运行AI驱动应用程序的人们交谈，听到的一直是同样的事情：这些应用程序是用Python编写的，但这些组织不想在生产环境中支持Python。虽然Python可能随着时间的推移在生产环境中变得更好，但AI革命正在此刻发生，人们希望有一种替代方案。我认为这个替代方案就是Go。**LLM驱动的应用程序主要是关于编排**：调用一个或多个模型，顺序或并行地进行，并合成结果——并且在规模化时，对生产操作员提供强大的支持。Go在这方面表现出色。
- en: 'There are several other languages that might make a claim to suitability here,
    but I’d like to focus on one: Rust. **Rust is an** ***amazing*** **language**.
    I won’t say I *love* it (yet), but I *respect* it. Rust provides uncompromising
    safety and uncompromising speed, even in the context of concurrency. The cost
    is up front programmer effort: Rust demands the programmer provide enough information
    for the compiler to understand object lifetimes and sharing, whereas “managed
    languages” like Go figure this out for you. Go and Rust team members explored
    this trade-off together in the 2021 article “[Rust vs. Go: Why They’re Better
    Together](https://thenewstack.io/rust-vs-go-why-theyre-better-together/)”.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: '这里还有几种其他语言可能声称适用，但我想重点介绍一种：Rust。**Rust是一门** ***令人惊叹的*** **语言**。我不会说我*喜欢*它（至少现在不会），但我*尊重*它。Rust提供了毫不妥协的安全性和速度，在并发环境中也是如此。代价是前期程序员的努力：Rust要求程序员提供足够的信息，以便编译器理解对象的生命周期和共享情况，而“管理语言”如Go则为您解决这些问题。Go和Rust团队成员在2021年的文章“[Rust
    vs. Go: Why They’re Better Together](https://thenewstack.io/rust-vs-go-why-theyre-better-together/)”中探讨了这种权衡。'
- en: 'Imagine Python, Go, and Rust on a spectrum of languages: as we move from Python
    to Go then Rust, we get increasing safety and efficiency. As we move in the opposite
    direction—from Rust to Go then Python—we get increasing ease and accessibility.
    Furthermore, each language has rich but *different* ecosystems of libraries and
    tools that make them suitable for different kinds of applications.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下Python、Go和Rust在语言光谱上的位置：从Python到Go再到Rust，我们得到了越来越高的安全性和效率。反过来，从Rust到Go再到Python，我们得到了越来越大的便利性和可访问性。此外，每种语言都有丰富但*不同*的库和工具生态系统，使它们适用于不同类型的应用程序。
- en: Python, Go, and Rust each have their strengths, and **each language has a role
    to play in building AI-powered systems**. Python is fantastic for the iterative,
    exploratory process of developing AI models and prototyping applications. Go is
    great for bringing these applications to production at scale. Rust is superb when
    speed is paramount, such as in serving AI models.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: Python、Go 和 Rust 都有各自的优势，**每种语言在构建以人工智能为驱动的系统中都有其作用**。Python 在开发 AI 模型和原型应用的迭代探索过程中表现出色。Go
    在大规模生产这些应用时非常出色。Rust 在速度至关重要时（例如提供 AI 模型服务时）表现极佳。
- en: You’ll notice I didn’t say anything about which language is the most “productive”.
    That’s because **your productivity with a language or tool is a function of the
    tool’s suitability to task**. You’ll be more “productive” driving a screw with
    a screwdriver than a hammer. Pick the right tool for the job.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以注意到，我并没有谈论哪种语言最“高效”。那是因为**你对一种语言或工具的效率取决于工具适合的任务**。用螺丝刀拧螺丝比用锤子更“高效”。选择合适的工具来完成任务。
- en: 'So if we believe in “prototype in Python, productionize in Go”, how do we make
    this easy? We are actively researching this area. The #1 thing users tell us is
    that they need **Go equivalents to the Python libraries used to build AI applications**.
    Python has an *enormous* ecosystem (pandas, numpy, Pytorch, tensorflow, JAX, notebook
    integrations, and much more)—but we don’t need to provide *all* of this in Go.
    We are focused on the subset of libraries that are needed for building *production*
    AI applications, starting with [LangChainGo](https://github.com/tmc/langchaingo).
    We’re eager to hear from the community what else you need.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们相信“在 Python 中原型设计，在 Go 中投入生产”，我们如何使这一切变得简单？我们正在积极研究这个领域。用户告诉我们的头等大事是，他们需要**Go
    中相当于用于构建 AI 应用程序的 Python 库**。Python 有一个*庞大*的生态系统（pandas、numpy、Pytorch、tensorflow、JAX、notebook
    集成等等）—但我们不需要在 Go 中提供*全部*。我们专注于构建生产 AI 应用所需的库子集，首先从[LangChainGo](https://github.com/tmc/langchaingo)开始。我们急切期待社区的反馈，看看您还需要什么。
- en: Our goal is for Go to *complement* Python to the benefit of *both* communities.
    **Let’s build bridges between our ecosystems and communities to make Go and Python
    “better together”**. Together, we will enable developers to create a new generation
    of production-grade AI-powered applications.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是让 Go *与* Python *互补*，造福*双方*社区。**让我们搭建起生态系统和社区之间的桥梁，让 Go 和 Python “更好地协作”**。我们将共同推动开发人员创建新一代的生产级
    AI 驱动应用程序。
