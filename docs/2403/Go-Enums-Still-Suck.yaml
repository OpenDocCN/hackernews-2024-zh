- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 12:45:16'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 12:45:16
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Go Enums Still Suck
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go枚举仍然不好用
- en: 来源：[https://www.zarl.dev/articles/enums-take-two](https://www.zarl.dev/articles/enums-take-two)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.zarl.dev/articles/enums-take-two](https://www.zarl.dev/articles/enums-take-two)
- en: Go Enums Still Suck
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go枚举仍然不好用
- en: So my [original post](https://www.zarl.dev/articles/enums) got more eyeballs
    than expected and I saw it on social media mainly hacker news, and lobste.rs to
    my surprise. With varying levels of support for my ideas and some less than constructive
    comments such as and I paraphrase… ***‘learn to code’***, ***‘why do you hate
    Go?’***, ***‘THIS ISN’T JAVA’***. I love online discourse.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我的[原始帖子](https://www.zarl.dev/articles/enums)获得了比预期更多的关注，我在社交媒体上主要看到了黑客新闻和lobste.rs，令我惊讶。对于我的想法有不同程度的支持，也有一些不太建设性的评论，例如，我引用一下…
    ***'学会编程吧'***，***'为什么你讨厌Go?'***，***'这不是Java'***。我喜欢在线讨论。
- en: I will also say there was good discussion and support for what I was trying
    to achieve. Sometimes the Go userbase is less than receptive to critiques of the
    language ~~re:Generics Before Generics~~, but I still find Go my most productive
    language to just *get shit done*.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我也会说，有些讨论和支持我尝试实现的东西。有时，Go用户群体对语言的批评反应不那么积极，尤其是在泛型之前泛型的问题上，但我仍然发现Go是我最有效率的语言，仅仅是为了*把事情做完*。
- en: 'So some of the main critiques where:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一些主要的批评点包括：
- en: Use `stringer`
  id: totrans-split-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `stringer`
- en: The first critique is well placed and I really should have started at that point,
    in fact I could have forked the project and used it as the basis for my own as
    it even uses the AST **(abstract syntax tree)** approach to parsing the GO code
    and building up from there. The tool is even mentioned on the official go blog
    post when `go generate` was introduced after all.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个批评是很合理的，事实上我真的应该从那一点开始，实际上我本可以分叉该项目并将其用作我自己的基础，因为它甚至使用AST（抽象语法树）方法来解析Go代码并从那里构建。这个工具甚至在`go
    generate`引入之后被提到在官方的go博客帖子中。
- en: I didn’t do this; In hindsight I’m an idiot for not doing this from the start,
    but parsing a JSON file to a struct was just so simple and I admit I was lazy.
    At least it proved out my idea, so I rebuilt it correctly *(i hope)* this second
    time around.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有这样做；事后看来我是个白痴，因为从一开始解析JSON文件到一个结构体只是那么简单，我承认我有点懒。至少它证明了我的想法，所以第二次重建它时，我希望这次做得正确（*我希望*）。
- en: I re-wrote my generator from scratch to use the [ast](https://pkg.go.dev/go/ast)
    package like the `stringer` command tool. However I built out the data required
    in a struct format that worked for me plus it was my first time really playing
    with the `ast` package so that was fun in and of itself. I also used the open
    source code for the `stringer` command so I could implement the same `String`
    method and also the compile-time check when new enums have been added.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我重新从头开始重写了我的生成器，使用了[ast](https://pkg.go.dev/go/ast)包，就像`stringer`命令工具一样。但是，我构建了对我有用的结构化数据，并且这是我第一次真正玩AST包，所以本身就很有趣。我还使用了`stringer`命令的开源代码，因此我可以实现相同的`String`方法，以及在添加新枚举时的编译时检查。
- en: Unnecessary JSON Config
  id: totrans-split-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不必要的JSON配置
- en: Yes - it was completely unnecessary! So, again, moving to the `ast` library
    means I can build up all information needed by parsing the Go code rather than
    rely on a configuration file.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 是的 - 这完全是不必要的！因此，再次转向`ast`库意味着我可以通过解析Go代码来构建所需的所有信息，而不是依赖配置文件。
- en: Extendable Enums
  id: totrans-split-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可扩展的枚举
- en: 'This was the most extensive of the critiques, and rightly pointed out; enums
    gain much more value when there is corresponding properties that relate to the
    enum. In the example below, I chose the planets example where there is a myriad
    of other properties we would want to have associated with the enum more than just
    uniqueness. I initially wanted to leverage Go’s struct tags, but guess what; the
    clue is in the name, they can not be used on anything but structs. So I just decided
    on a comment of a comma separated list of `Name[Type]` pairs defined on the type
    used in the iota definitions. For the planets example, it looks like this:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是批评中最广泛的一种，也是完全正确的；当枚举具有与枚举相关的相应属性时，它们的价值会更大。在下面的例子中，我选择了行星的例子，其中我们希望将许多其他属性与枚举关联，而不仅仅是唯一性。最初，我想利用Go的结构标签，但是猜猜看，关键在于名字，它们只能用在结构体上。所以我决定在iota定义中使用的类型上定义一个以逗号分隔的`Name[Type]`对的注释。对于行星的例子，它看起来像这样：
- en: '[PRE0]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This allows us to define a list of properties and their types that will be
    generated for the wrapper struct. We then just add the properties to the comments
    on the iota definitions. Again, for the planets example, it looks like this:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我们定义一个属性列表及其类型，将生成用于包装结构体的 iota 定义。然后我们只需将这些属性添加到注释中的 iota 定义中。再次以行星示例为例，看起来是这样的：
- en: '[PRE1]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This uses the corresponding values to build out the wrapper so they end up
    like this:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用相应的值来构建包装器，所以它们最终看起来是这样的：
- en: '[PRE2]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This allows easily extending the wrapper with more properties. You should also
    note that the first property is not even defined in at the type definition. This
    is a unique case where this will be the string representation for the enum. So
    with the wrappers all generated. I decided to also generate the following `ExtensivePlanets`
    function to enumerate through all the valid values.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许轻松地通过添加更多的属性来扩展包装器。您还应注意，第一个属性甚至未在类型定义中定义。这是一个特殊情况，它将是枚举的字符串表示。因此，所有包装器都生成后，我决定生成以下
    `ExtensivePlanets` 函数来枚举所有有效值。
- en: '[PRE3]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can now write something like the following :'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以写出以下内容：
- en: '[PRE4]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This allows us to calculate our weight on all the different planets as they
    are exhaustively checked through all valid values. To mark invalid values, all
    you need to do is add a comment to the appropriate iota definition with invalid.
    This can be seen in the unknown value in the planets iota definitions.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够在经过详尽检查的所有有效值中计算我们在所有不同行星上的重量。要标记无效值，您只需在行星 iota 定义的适当位置添加注释即可。这可以在行星
    iota 定义的未知值中看到。
- en: Conclusion
  id: totrans-split-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: The feedback I got has been worth while and has allowed me to approach the problem
    from a different perspective and to also re-evaluate the choices I made on the
    first implementation.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我收到的反馈是值得的，让我能够从不同的角度来解决问题，并重新评估我在第一次实现中所做的选择。
- en: '[Here](https://github.com/zarldev/goenums) is the github repository for goenums'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[这里](https://github.com/zarldev/goenums)是 goenums 的 github 仓库。'
