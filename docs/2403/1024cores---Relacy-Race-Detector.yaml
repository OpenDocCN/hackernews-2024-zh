- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:36:59'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:36:59'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 1024cores - Relacy Race Detector
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1024cores - Relacy Race Detector
- en: 来源：[https://www.1024cores.net/home/relacy-race-detector](https://www.1024cores.net/home/relacy-race-detector)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.1024cores.net/home/relacy-race-detector](https://www.1024cores.net/home/relacy-race-detector)
- en: Relacy Race Detector is a tool for efficient execution of unit-tests for synchronization
    algorithms written in C++0x.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: Relacy Race Detector 是一个用于 C++0x 编写的同步算法单元测试的工具。
- en: Every user thread is represented as a fiber (ucontext). Every time only one
    fiber is running, and special scheduler controls interleaving between fibers.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户线程都表示为一个纤程（ucontext）。每次只有一个纤程在运行，特殊调度程序控制纤程之间的交错。
- en: With random scheduler it just executes numerous amount of various interleavings
    between threads. With full search scheduler or context-bound scheduler it systematically
    executes all possible interleavings between threads. While executing particular
    interleaving it makes exhaustive verification of various aspects of execution
    (races, accesses to freed memory etc).
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用随机调度程序，它只执行线程之间大量不同的交错。使用全搜索调度程序或上下文绑定调度程序时，它系统地执行线程之间的所有可能交错。在执行特定的交错时，它对执行的各个方面（竞争、访问释放内存等）进行彻底验证。
- en: If no errors found then verification terminates when particular number of interleavings
    are verified (for random scheduler), or when all possible interleavings are verified
    (for full search scheduler). If error is found then tool outputs execution history
    which leads to error and terminates.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未发现错误，则在验证特定数量的交错（对于随机调度程序）或验证所有可能的交错（对于全搜索调度程序）后终止验证。如果发现错误，则工具输出导致错误的执行历史并终止。
- en: Physically Relacy Race Detector is a header-only library for C++98.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 物理上，Relacy Race Detector 是一个头文件库，适用于 C++98。
- en: Relaxed ISO C++0x Memory Model. Relaxed/acquire/release/acq_rel/seq_cst memory
    operations. The only non-supported feature is memory_order_consume, it's simulated
    with memory_order_acquire.
  id: totrans-split-11
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放松的 ISO C++0x 内存模型。Relaxed/acquire/release/acq_rel/seq_cst 内存操作。唯一不支持的功能是 memory_order_consume，它通过
    memory_order_acquire 进行模拟。
- en: Exhaustive automatic error checking (including ABA detection).
  id: totrans-split-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 彻底的自动错误检查（包括 ABA 检测）。
- en: Full-fledged atomics library (with spurious failures in compare_exchange()).
  id: totrans-split-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的原子库（包括比较交换中的虚假失败）。
- en: Memory fences.
  id: totrans-split-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存栅栏。
- en: Arbitrary number of threads.
  id: totrans-split-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任意数量的线程。
- en: Detailed execution history for failed tests.
  id: totrans-split-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败测试的详细执行历史。
- en: No false positives.
  id: totrans-split-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无误报。
- en: Before/after/invariant functions for test suites.
  id: totrans-split-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试套件的 before/after/invariant 函数。
- en: MSVC 7/8/9, Windows 2000 and above, 32-bit
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MSVC 7/8/9，Windows 2000 及以上，32 位
- en: GCC 3.4 and above, Linux, 32-bit
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GCC 3.4 及以上版本，Linux，32 位
- en: 1\. Add
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 添加
- en: '#include <relacy/relacy_std.hpp>'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <relacy/relacy_std.hpp>'
- en: '2\. For atomic variables use type std::atomic<T>:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 对于原子变量使用类型 std::atomic<T>：
- en: std::atomic<void*> head;
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: std::atomic<void*> head;
- en: '3\. For usual non-atomic variables use type rl::var<T>:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 对于通常的非原子变量使用类型 rl::var<T>：
- en: rl::var<int> data;
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: rl::var<int> data;
- en: Such vars will be checked for races and included into trace.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变量将被检查是否存在竞争，并包含在跟踪中。
- en: '4\. All accesses to std::atomic<T> and rl::var<T> variables postfix with ''($)'':'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 所有对 std::atomic<T> 和 rl::var<T> 变量的访问都要加上 '($)' 后缀：
- en: std::atomic<void*> head;
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: std::atomic<void*> head;
- en: rl::var<int> data;
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: rl::var<int> data;
- en: head($).store(0);
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: head($).store(0);
- en: data($) = head($).load();
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: data($) = head($).load();
- en: '5\. Strictly thread-private variables use can leave as-is:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 严格的线程私有变量可以保留为原样：
- en: for (int i = 0; i != 10; ++i)
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: for (int i = 0; i != 10; ++i)
- en: Such vars will be NOT checked for races NOR included into trace. But they will
    accelerate verification.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变量不会被检查是否存在竞争，也不会被包含在跟踪中。但它们将加速验证过程。
- en: '6\. Describe test-suite: number of threads, thread function, before/after/invariant
    functions. See example below.'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 描述测试套件：线程数，线程函数，before/after/invariant 函数。参见下面的示例。
- en: '7\. Place asserts:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 放置断言：
- en: int x = g($).load();
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: int x = g($).load();
- en: RL_ASSERT(x > 0);
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: RL_ASSERT(x > 0);
- en: '8\. Start verification:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 开始验证：
- en: rl::simulate<test_suite_t>();
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: rl::simulate<test_suite_t>();
- en: '#include <relacy/relacy_std.hpp>'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <relacy/relacy_std.hpp>'
- en: // template parameter '2' is number of threads
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: // 模板参数 '2' 是线程数
- en: 'struct race_test : rl::test_suite<race_test, 2>'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'struct race_test : rl::test_suite<race_test, 2>'
- en: '{'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: std::atomic<int> a;
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: std::atomic<int> a;
- en: rl::var<int> x;
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: rl::var<int> x;
- en: // executed in single thread before main thread function
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: // 主线程函数前在单线程中执行
- en: void before()
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: void before()
- en: '{'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: a($) = 0;
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: a($) = 0;
- en: x($) = 0;
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: x($) = 0;
- en: '}'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // main thread function
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: // 主线程函数
- en: void thread(unsigned thread_index)
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: void thread(unsigned thread_index)
- en: '{'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if (0 == thread_index)
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: if (0 == thread_index)
- en: '{'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: x($) = 1;
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: x($) = 1;
- en: a($).store(1, rl::memory_order_relaxed);
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: a($).store(1, rl::memory_order_relaxed);
- en: '}'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: '{'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if (1 == a($).load(rl::memory_order_relaxed))
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 (1 == a($).load(rl::memory_order_relaxed))
- en: x($) = 2;
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: x($) = 2;
- en: '}'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // executed in single thread after main thread function
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: // 执行完主线程函数后在单线程中执行
- en: void after()
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: void 后()
- en: '{'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '}'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // executed in single thread after every 'visible' action in main threads
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: // 执行完主线程中每个“可见”操作后在单线程中执行
- en: // disallowed to modify any state
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: // 禁止修改任何状态
- en: void invariant()
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: void 不变()
- en: '{'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '}'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '};'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: int main()
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`int main()`'
- en: '{'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: rl::simulate<race_test>();
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: rl::simulate<race_test>();
- en: '}'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: struct race_test
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 结构 race_test
- en: DATA RACE
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 数据竞争
- en: 'iteration: 8'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代：8
- en: 'execution history:'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 执行历史：
- en: '[0] 0: <00366538> atomic store, value=0, (prev value=0), order=seq_cst, in
    race_test::before, test.cpp(14)'
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[0] 0: <00366538> 原子存储，值=0，(之前的值=0)，顺序=seq_cst，在race_test::before，test.cpp(14)'
- en: '[1] 0: <0036655C> store, value=0, in race_test::before, test.cpp(15)'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 0: <0036655C> 存储，值=0，在race_test::before，test.cpp(15)'
- en: '[2] 0: <0036655C> store, value=1, in race_test::thread, test.cpp(23)'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] 0: <0036655C> 存储，值=1，在race_test::thread，test.cpp(23)'
- en: '[3] 0: <00366538> atomic store, value=1, (prev value=0), order=relaxed, in
    race_test::thread, test.cpp(24)'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] 0: <00366538> 原子存储，值=1，(之前的值=0)，顺序=relaxed，在race_test::thread，test.cpp(24)'
- en: '[4] 1: <00366538> atomic load, value=1, order=relaxed, in race_test::thread,
    test.cpp(28)'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] 1: <00366538> 原子加载，值=1，顺序=relaxed，在race_test::thread，test.cpp(28)'
- en: '[5] 1: <0036655C> store, value=0, in race_test::thread, test.cpp(29)'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[5] 1: <0036655C> 存储，值=0，在race_test::thread，test.cpp(29)'
- en: '[6] 1: data race detected, in race_test::thread, test.cpp(29)'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[6] 1: 检测到数据竞争，在race_test::thread，test.cpp(29)'
- en: 'thread 0:'
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 线程 0：
- en: '[0] 0: <00366538> atomic store, value=0, (prev value=0), order=seq_cst, in
    race_test::before, test.cpp(14)'
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[0] 0: <00366538> 原子存储，值=0，(之前的值=0)，顺序=seq_cst，在race_test::before，test.cpp(14)'
- en: '[1] 0: <0036655C> store, value=0, in race_test::before, test.cpp(15)'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 0: <0036655C> 存储，值=0，在race_test::before，test.cpp(15)'
- en: '[2] 0: <0036655C> store, value=1, in race_test::thread, test.cpp(23)'
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] 0: <0036655C> 存储，值=1，在race_test::thread，test.cpp(23)'
- en: '[3] 0: <00366538> atomic store, value=1, (prev value=0), order=relaxed, in
    race_test::thread, test.cpp(24)'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] 0: <00366538> 原子存储，值=1，(之前的值=0)，顺序=relaxed，在race_test::thread，test.cpp(24)'
- en: 'thread 1:'
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 线程 1：
- en: '[4] 1: <00366538> atomic load, value=1, order=relaxed, in race_test::thread,
    test.cpp(28)'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] 1: <00366538> 原子加载，值=1，顺序=relaxed，在race_test::thread，test.cpp(28)'
- en: '[5] 1: <0036655C> store, value=0, in race_test::thread, test.cpp(29)'
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[5] 1: <0036655C> 存储，值=0，在race_test::thread，test.cpp(29)'
- en: '[6] 1: data race detected, in race_test::thread, test.cpp(29)'
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[6] 1: 检测到数据竞争，在race_test::thread，test.cpp(29)'
- en: 'You can download the library here: http://sites.google.com/site/1024cores/home/downloads/relacy_2_4.zip'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里下载该库：http://sites.google.com/site/1024cores/home/downloads/relacy_2_4.zip
- en: 'The old deprecated site for the tool: [http://groups.google.com/group/relacy](http://groups.google.com/group/relacy)'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: 工具的旧弃用站点：[http://groups.google.com/group/relacy](http://groups.google.com/group/relacy)
