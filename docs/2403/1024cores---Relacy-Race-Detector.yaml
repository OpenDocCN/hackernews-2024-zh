- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:36:59'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 1024cores - Relacy Race Detector
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.1024cores.net/home/relacy-race-detector](https://www.1024cores.net/home/relacy-race-detector)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Relacy Race Detector is a tool for efficient execution of unit-tests for synchronization
    algorithms written in C++0x.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: Every user thread is represented as a fiber (ucontext). Every time only one
    fiber is running, and special scheduler controls interleaving between fibers.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: With random scheduler it just executes numerous amount of various interleavings
    between threads. With full search scheduler or context-bound scheduler it systematically
    executes all possible interleavings between threads. While executing particular
    interleaving it makes exhaustive verification of various aspects of execution
    (races, accesses to freed memory etc).
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: If no errors found then verification terminates when particular number of interleavings
    are verified (for random scheduler), or when all possible interleavings are verified
    (for full search scheduler). If error is found then tool outputs execution history
    which leads to error and terminates.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Physically Relacy Race Detector is a header-only library for C++98.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Relaxed ISO C++0x Memory Model. Relaxed/acquire/release/acq_rel/seq_cst memory
    operations. The only non-supported feature is memory_order_consume, it's simulated
    with memory_order_acquire.
  id: totrans-split-11
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Exhaustive automatic error checking (including ABA detection).
  id: totrans-split-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Full-fledged atomics library (with spurious failures in compare_exchange()).
  id: totrans-split-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory fences.
  id: totrans-split-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Arbitrary number of threads.
  id: totrans-split-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Detailed execution history for failed tests.
  id: totrans-split-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: No false positives.
  id: totrans-split-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Before/after/invariant functions for test suites.
  id: totrans-split-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: MSVC 7/8/9, Windows 2000 and above, 32-bit
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GCC 3.4 and above, Linux, 32-bit
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1\. Add
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: '#include <relacy/relacy_std.hpp>'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: '2\. For atomic variables use type std::atomic<T>:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: std::atomic<void*> head;
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: '3\. For usual non-atomic variables use type rl::var<T>:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: rl::var<int> data;
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: Such vars will be checked for races and included into trace.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: '4\. All accesses to std::atomic<T> and rl::var<T> variables postfix with ''($)'':'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: std::atomic<void*> head;
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: rl::var<int> data;
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: head($).store(0);
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: data($) = head($).load();
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: '5\. Strictly thread-private variables use can leave as-is:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: for (int i = 0; i != 10; ++i)
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: Such vars will be NOT checked for races NOR included into trace. But they will
    accelerate verification.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: '6\. Describe test-suite: number of threads, thread function, before/after/invariant
    functions. See example below.'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: '7\. Place asserts:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: int x = g($).load();
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: RL_ASSERT(x > 0);
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: '8\. Start verification:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: rl::simulate<test_suite_t>();
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: '#include <relacy/relacy_std.hpp>'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: // template parameter '2' is number of threads
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: 'struct race_test : rl::test_suite<race_test, 2>'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: std::atomic<int> a;
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: rl::var<int> x;
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: // executed in single thread before main thread function
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: void before()
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: a($) = 0;
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: x($) = 0;
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: // main thread function
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: void thread(unsigned thread_index)
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: if (0 == thread_index)
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: x($) = 1;
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: a($).store(1, rl::memory_order_relaxed);
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: else
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: if (1 == a($).load(rl::memory_order_relaxed))
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: x($) = 2;
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
- en: // executed in single thread after main thread function
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: void after()
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
- en: // executed in single thread after every 'visible' action in main threads
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: // disallowed to modify any state
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
- en: void invariant()
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
- en: int main()
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
- en: rl::simulate<race_test>();
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
- en: struct race_test
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
- en: DATA RACE
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
- en: 'iteration: 8'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
- en: 'execution history:'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
- en: '[0] 0: <00366538> atomic store, value=0, (prev value=0), order=seq_cst, in
    race_test::before, test.cpp(14)'
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
- en: '[1] 0: <0036655C> store, value=0, in race_test::before, test.cpp(15)'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
- en: '[2] 0: <0036655C> store, value=1, in race_test::thread, test.cpp(23)'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
- en: '[3] 0: <00366538> atomic store, value=1, (prev value=0), order=relaxed, in
    race_test::thread, test.cpp(24)'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
- en: '[4] 1: <00366538> atomic load, value=1, order=relaxed, in race_test::thread,
    test.cpp(28)'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
- en: '[5] 1: <0036655C> store, value=0, in race_test::thread, test.cpp(29)'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
- en: '[6] 1: data race detected, in race_test::thread, test.cpp(29)'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
- en: 'thread 0:'
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
- en: '[0] 0: <00366538> atomic store, value=0, (prev value=0), order=seq_cst, in
    race_test::before, test.cpp(14)'
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
- en: '[1] 0: <0036655C> store, value=0, in race_test::before, test.cpp(15)'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
- en: '[2] 0: <0036655C> store, value=1, in race_test::thread, test.cpp(23)'
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
- en: '[3] 0: <00366538> atomic store, value=1, (prev value=0), order=relaxed, in
    race_test::thread, test.cpp(24)'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
- en: 'thread 1:'
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
- en: '[4] 1: <00366538> atomic load, value=1, order=relaxed, in race_test::thread,
    test.cpp(28)'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
- en: '[5] 1: <0036655C> store, value=0, in race_test::thread, test.cpp(29)'
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
- en: '[6] 1: data race detected, in race_test::thread, test.cpp(29)'
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the library here: http://sites.google.com/site/1024cores/home/downloads/relacy_2_4.zip'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
- en: 'The old deprecated site for the tool: [http://groups.google.com/group/relacy](http://groups.google.com/group/relacy)'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
