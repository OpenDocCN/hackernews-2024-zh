- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:53:05'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Using my new Raspberry Pi to run an existing GitHub Action
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://blog.frankel.ch/raspberry-pi-github-action/](https://blog.frankel.ch/raspberry-pi-github-action/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'GitHub Actions depend on Docker being installed on the runner. Because of this,
    I thought jobs ran in a dedicated image: it’s plain wrong. Whatever you script
    in your job happens on the running system. Case in point, the initial script installed
    Python and Poetry.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-7
  prefs: []
  type: TYPE_PRE
- en: In the context of a temporary container created during each run, it makes sense;
    in the context of a stable, long-running system, it doesn’t.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Raspbian, the Raspberry default operating system, already has Python 3.11 installed.
    Hence, I had to downgrade the version configured in Poetry. It’s no big deal because
    I don’t use any specific Python 3.12 feature.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: pyproject.toml
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-11
  prefs: []
  type: TYPE_PRE
- en: 'Raspbian forbids the installation of any Python dependency in the primary environment,
    which is a very sane default. To install Poetry, I used the regular APT package
    manager:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
- en: 'The next was to handle secrets. On GitHub, you set the secrets on the GUI and
    reference them in your scripts via environment variables:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
- en: It allows segregating individual steps so that a step has access to only the
    environmental variables it needs. For self-hosted runners, you set environment
    variables in an existing `.env` file inside the folder.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
- en: If you want more secure setups, you’re on your own.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the architecture is a pull-based model. The runner constantly checks
    if a job is scheduled. To make the runner a service, we need to use out-of-the-box
    scripts inside the runner folder:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
- en: The script uses `systemd` underneath.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
