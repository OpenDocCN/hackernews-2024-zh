- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:44:30'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 'How to Structure C Projects: These Best Practices Worked for Me | Luca Cavallin'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.lucavall.in/blog/how-to-structure-c-projects-my-experience-best-practices](https://www.lucavall.in/blog/how-to-structure-c-projects-my-experience-best-practices)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I recently worked on two different C projects, and I wanted to structure them
    in a way that would make them easy to maintain and understand. I also wanted to
    make sure that the projects were easy to build and test. In this post, I will
    share my experience and the best practices I found for structuring C projects.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the source code for the projects I worked on in the following
    repositories:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: Because of my limited experience with C - I hadn't written any in 10 years -
    I had to do a lot of research to find out what the current consensus is when it
    comes to directory layout. I found a lot of useful information on GitHub, Reddit,
    and Stack Overflow. I also looked at the source code of some popular open-source
    C projects to see how they were structured. I found that most of the projects
    I looked at followed a similar layout, and I decided to use that as a starting
    point.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: '[](#what-the-internet-people-say)What The Internet People Say'
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you Google for "c project structure best practices" you''ll get about 583.000.000
    results - no need to worry about doing your own research - I read all of those
    pages, twice. While opinions vary, there are some common themes that come up again
    and again. Two approaches are particularly popular:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: '**The "modular" approach**: This is the most common approach for large projects.
    The idea is to split the project into multiple directories, each containing a
    different module of the project. Each module has its own header files, source
    files, and tests. This approach makes it easy to find the code you''re looking
    for and makes it easy to test individual modules in isolation. This is the way
    the [Linux kernel](https://github.com/torvalds/linux) is structured, for example.'
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The "flat" approach**: This approach is more common for small projects and
    it focuses on keeping the project as simple as possible and yet well-organized.'
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the projects I worked on were relatively small, I decided to use the "flat"
    approach, which I am going to describe next.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: '[](#my-approach-to-structuring-c-projects)My Approach to Structuring C Projects'
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After going through all the 583.000.000 results twice, I settled on the following
    directory layout for my projects:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's dive deeper into this layout. We can ignore `.devcontainer`, `.github`,
    `.vscode` and `scripts` for now, as they are specific to my development environment
    and not relevant to the project structure. The files `.clang-format` and `.clang-tidy`
    are configuration files for the [Clang](https://clang.llvm.org/) formatter and
    linter, respectively. The `compile_commands.json` file is a compilation database
    for Clang tools. These files are not strictly necessary, but they can be useful
    if you want to use Clang tools in your project. `LICENSE` and `README.md` are
    self-explanatory, and `Makefile` needs no introduction either, although you can
    read more about how I wrote mine in [Crafting a Clean, Maintainable, and Understandable
    Makefile for a C Project](/blog/crafting-clean-maintainable-understandable-makefile-for-c-project).
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解这种布局。我们现在可以忽略 `.devcontainer`、`.github`、`.vscode` 和 `scripts`，因为它们特定于我的开发环境，与项目结构无关。`.clang-format`
    和 `.clang-tidy` 是 [Clang](https://clang.llvm.org/) 格式化和静态分析工具的配置文件。这些文件并不是严格必需的，但如果你想在项目中使用
    Clang 工具，它们可能会有用。`LICENSE` 和 `README.md` 是不言自明的，`Makefile` 也无需介绍，尽管你可以在 [为 C 项目编写一个干净、可维护和易于理解的
    Makefile](/blog/crafting-clean-maintainable-understandable-makefile-for-c-project)
    中了解更多关于我如何编写的信息。
- en: 'Before we get into the more important details, let''s get a few more directories
    out-of-the-way:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论更重要的细节之前，让我们先了解几个其他目录：
- en: The `bin` directory contains the executable that is created when you run `make`.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin` 目录包含运行 `make` 时创建的可执行文件。'
- en: The `build` directory contains the intermediate build files, such as `.o` files.
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build` 目录包含中间构建文件，如 `.o` 文件。'
- en: The `docs` directory contains the documentation for the project.
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docs` 目录包含项目的文档。'
- en: Let's spend some time on the `src`, `include`, `lib`, and `tests` directories.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花一些时间了解 `src`、`include`、`lib` 和 `tests` 目录。
- en: '[](#the-src-directory)The `src` Directory'
  id: totrans-split-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#the-src-directory)`src` 目录'
- en: 'The `src` directory contains the C source files for the project, and you will
    spend most of your time here. I decided to keep it simple using a flat layout.
    Besides the `main.c` file which works as the entry file of the program, I split
    the rest of the code based on "concerns" and data-structures. For example, in
    the `gnaro` project:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`src` 目录包含项目的 C 源文件，你会在这里花费大部分时间。我决定保持简单，使用平面布局。除了作为程序入口文件的 `main.c` 文件外，我根据"关注点"和数据结构分割了其余的代码。例如，在
    `gnaro` 项目中：'
- en: '`btree.c`: contains the implementation of a B-tree data structure.'
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`btree.c`：包含 B 树数据结构的实现。'
- en: '`cursor.c`: contains the implementation of a cursor for reading and writing
    to the database.'
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cursor.c`：包含用于读写数据库的游标的实现。'
- en: '`database.c`: contains the implementation of the database.'
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`database.c`：包含数据库的实现。'
- en: '`pager.c`: contains the implementation of the pager.'
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pager.c`：包含分页器的实现。'
- en: '`row.c`: contains the implementation of a row in the database.'
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`row.c`：包含数据库中行的实现。'
- en: '`input.c`, `meta.c` and `statement.c`: contain logic needed to parse and prepare
    user input.'
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input.c`，`meta.c` 和 `statement.c`：包含解析和准备用户输入所需的逻辑。'
- en: I found this simple layout to be easy to understand and navigate. It also makes
    it easy to find the code you're looking for, as long as you make an active effort
    to keep the files small and focused. The downside of this approach is that you
    will need to keep the `Makefile` updated with the new files you add to the project
    so that they are compiled and linked correctly. Given the small size of the projects
    I worked on, I didn't find this to be a problem, but it could be a problem for
    others.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现这种简单的布局易于理解和导航。只要你积极努力保持文件的小和专注，就很容易找到你正在寻找的代码。这种方法的缺点是，你需要确保 `Makefile`
    更新了你添加到项目中的新文件，以便正确编译和链接它们。鉴于我工作的项目规模较小，我并没有发现这是一个问题，但对其他人可能会是一个问题。
- en: '[](#the-include-directory)The `include` Directory'
  id: totrans-split-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#the-include-directory)`include` 目录'
- en: The `include` directory contains the header files for the project. Most if not
    all of the `.c` files in the `src` directory will have a corresponding `.h` file
    in the `include` directory. The header files should contain the public API for
    the module, and the source files should contain the implementation. This makes
    it easy to see what the module does without having to look at the implementation.
    It also makes it easy to test the module in isolation, as you can just include
    the header file in your test file.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, using the `gnaro` project as an example:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: '`btree.h`: included in `src/btree.c`, defines the public API for the B-tree
    data structure.'
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cursor.h`: included in `src/cursor.c`, defines the public API for the cursor
    used to read and write from and to the database.'
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`database.h`: included in `src/database.c`, defines the public API for the
    database implementation.'
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pager.h`: included in `src/pager.c`, defines the public API for the paging
    logic.'
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`row.h`: included in `src/row.c`, defines the public API for the database''s
    row structure.'
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`input.h`, `meta.h` and `statement.h`: included in `src/input.c` and in `src/meta.c`
    and in `src/statement.c`, defines the public API for handling user input.'
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Just like the `src` directory, the downside of this layout is that header files
    should be referenced in the `Makefile` so that they are included in the compilation
    process.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: '[](#the-lib-directory)The `lib` Directory'
  id: totrans-split-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `lib` directory contains third-party libraries that the project depends
    on. For example, [lucavallin/gnaro](https://github.com/lucavallin/gnaro) makes
    use of the [argtable](https://www.argtable.org) and [log.c](https://github.com/rxi/log.c)
    libraries for parsing CLI arguments and logging, respectively.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: There is not much to say about this directory. It's just a place to put your
    dependencies. Again, don't forget to include these in the `Makefile` as well,
    by the way.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: '[](#the-tests-directory)The `tests` Directory'
  id: totrans-split-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `tests` directory contains the tests for the project. I used the [CUnit](https://cunit.sourceforge.net)
    library for testing, and I found it to be a good fit for my needs. The `tests`
    directory contains a test file for each module in the `src` directory. For example,
    in the `gnaro` project, the `tests` directory cointains `gnaro_test.c` file which
    is meant to test whatever logic defined in `src/gnaro.c`.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: At this time, in pratice, the file only contains the code needed to setup the
    tests as recommended by the [CUnit](https://cunit.sourceforge.net) documentation.
    While the tests run, I actually never followed-up on writing useful checks for
    `gnaro` and `barco` since they're just side-, hobby-projects.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: '[](#conclusion)Conclusion'
  id: totrans-split-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thanks for reading this far! I hope you found this article useful. I know that
    the project layout I've described is not the only way to organize a C project,
    but it's the way that I've found to be the most effective for me. The `bin`, `build`,
    `docs`, `script`, and ".something" directories are helpful for development purposes,
    but it is in the `src`, `include`, `lib`, and `tests` directories where the real
    work happens.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您阅读至此！希望您觉得这篇文章有用。我知道我描述的项目布局并不是组织C项目的唯一方式，但这是我发现对我最有效的方式。`bin`、`build`、`docs`、`script`
    和 ".something" 目录对开发非常有帮助，但真正工作发生在 `src`、`include`、`lib` 和 `tests` 目录中。
- en: '`src`: contains the C source files for the project.'
  id: totrans-split-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`：包含项目的C源文件。'
- en: '`include`: contains the header files for the project, included by `.c` files
    in `src`.'
  id: totrans-split-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include`：包含项目的头文件，被 `src` 中的 `.c` 文件包含。'
- en: '`lib`: contains third-party libraries that the project depends on.'
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib`：包含项目依赖的第三方库。'
- en: '`tests`: contains the tests for the project.'
  id: totrans-split-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests`：包含项目的测试。'
- en: The `Makefile` is the glue that holds everything together and it must be updated
    to include new files and dependencies. While more modern build systems like CMake
    and Meson are available, I found that a simple `Makefile` was sufficient for my
    needs.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`Makefile` 是将所有内容粘合在一起的关键，必须更新以包含新文件和依赖关系。虽然现代化的构建系统如 CMake 和 Meson 已经出现，但我发现一个简单的
    `Makefile` 对我的需求已经足够。'
- en: I hope that you can take some of the ideas I've presented here and apply them
    to your own projects. If you have any questions or comments, feel free to reach
    out!
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您能从我在这里提出的一些想法中获益，并应用到您自己的项目中。如果您有任何问题或意见，请随时联系我！
