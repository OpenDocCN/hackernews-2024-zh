- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:50:54'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: How the DevTeam conquered the iPhone
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://fabiensanglard.net/iSummer/](https://fabiensanglard.net/iSummer/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: January 31, 2024
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: How the DevTeam conquered the iPhone
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: The summer of 2007 was an eventful one if you were into cell phones. It all
    started on June 29 when Apple announced the release of the iPhone. If you have
    never taken the time to watch the full keynote, I highly recommend it.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: <MacWorld%20keynot%202007.webm>
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Your browser does not support the video tag.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: Reactions to the announcement were mixed. While some dismissed the device, others
    were eager to try it.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: I belonged to the second category. However I lived in Canada where there was
    no release date in sight. Indeed, the iPhone was never released in the Great White
    North?[^([1])](#footnote_1). Apple only came to an agreement with Rogers a year
    later with the 3G on July 11, 2008[^([2])](#footnote_2).
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: iPhone Dev Team
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: For forgotten countries there was hope. A group had assembled with the goal
    of enabling the device to run with any carrier, using software only[^([3])](#footnote_3).
    They called themselves the "iPhone Dev Team".
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: Committed to openness via a blog on **iphone.fiveforty.net**. They reported
    their progress on a regular basis. On rich days, updates happened hourly (July
    3d came with eight updates from 12AM to 9PM[^([4])](#footnote_4)).
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Needless to say that during that summer 2007, my web browser was riveted to
    their website. However I did not have the skills to understand fully what they
    were doing. Participants were highly skilled, a lot of lingo was being thrown
    around, and I never dared asking questions.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: It always bugged me to not grasp the technological details of such an historic
    moment. Today I decided to go back in time thanks to the Wayback Machine and get
    it done. Maybe you will enjoy tagging along with me.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: iphone.fiveforty.net status bar
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: To help follow progress, **iphone.fiveforty.net** had a status bar on its homepage.
    It featured all the milestones the DevTeam had identified to reach their goal.
    There were three levels of accomplishment going from red to green.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: I don't remember ever seeing it fully red and I am unsure it ever was. The earliest
    date crawled by the Wayback machine is [Jul 6th, 2007](https://web.archive.org/web/20070706064445/http://iphone.fiveforty.net/wiki/index.php?title=Main_Page)
    when two out of six milestones had been reached.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: '| Break DMG Password | Bypass Activation | Get Write Access | Get Working Toolchain
    | Unlock Phone | Enable Third-party Applications |'
  id: totrans-split-24
  prefs: []
  type: TYPE_TB
- en: The journey was completed on September 12th, however the Wayback machine "only"
    crawled thirteen days later on [September 25th 2007](https://web.archive.org/web/20070925035357/http://iphone.fiveforty.net:80/wiki/index.php?title=Main_Page).
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: '| Decrypt Firmware | Bypass Activation | Get Write Access | Get Working Toolchain
    | Enable Third-party Applications | Unlock Phone |'
  id: totrans-split-26
  prefs: []
  type: TYPE_TB
- en: We are going to study each stage in order.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: The intended way
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的方式
- en: '* * *'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Before diving into each milestone, let's remind ourselves how the iPhone was
    supposed to be used.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入每个里程碑之前，让我们提醒自己iPhone预计如何使用。
- en: A device could be purchased from an Apple Store at the cost of $499 (with 4GB
    storage) and $599 (for the 8 GB version)[^([5])](#footnote_5).
  id: totrans-split-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以从苹果商店购买设备，价格为$499（4GB存储版本）和$599（8GB版本）[^([5])](#footnote_5)。
- en: Unboxing unveiled an [unusable](activate.jpeg) iPhone showing a [Connect to
    iTunes](itunes.jpg) screen.
  id: totrans-split-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解封揭示了一个[无法使用的](activate.jpeg) iPhone 展示了一个[连接到iTunes](itunes.jpg)的屏幕。
- en: The customer had to open iTunes and subscribe ([video](https://www.youtube.com/watch?v=SAhRFE4D6W0),
    [article](https://archive.is/UjS8d)) to an AT&T [membership](activationtips.pdf).
  id: totrans-split-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户不得不打开iTunes并订阅（[视频](https://www.youtube.com/watch?v=SAhRFE4D6W0)，[文章](https://archive.is/UjS8d)）AT&T的[会员服务](activationtips.pdf)。
- en: After that the phone became activated. It remained tied down (locked) to AT&T
    but the customer was good to go.
  id: totrans-split-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之后，手机激活。它仍然绑定（锁定）在AT&T网络，但客户可以正常使用。
- en: Milestones
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 里程碑
- en: '* * *'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The six milestones defined early one by the DevTeam followed a logical path
    to turn an inert piece of electronics back into a smartphone.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 早期由DevTeam定义的六个里程碑沿着一个逻辑路径，将一个惰性的电子设备变回智能手机。
- en: Get read access to understand the system -> **Break DMG Password**.
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获得读取权限以理解系统 -> **破解DMG密码**。
- en: Get the device out of its lethargy -> **Bypass Activation**.
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使设备摆脱其惰性 -> **绕过激活**。
- en: Get write access to modify the system -> **Get Write Access**.
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获得写入权限以修改系统 -> **获得写入权限**。
- en: Modify the system with custom executables -> **Get a Working toolchain**.
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改系统以使用自定义可执行文件 -> **获取工作工具链**。
- en: Do something to allow the baseband to connect to any carrier -> **Unlock**.
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 做一些事情让基带连接到任何运营商 -> **解锁**。
- en: Create an app to automate the whole process -> **Enable Third-Party applications**
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个应用程序来自动化整个过程 -> **启用第三方应用程序**
- en: Decrypt Milestone
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 解密里程碑
- en: '* * *'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: To restore a device to its factory state, iTunes downloaded an **IP**hone **S**oft**W**are
    archive (extension `.ipsw`). The goal of this step was to understand every file
    in it. Conveniently, the archive is still available on ipsw.me[^([6])](#footnote_6)
    and it uses the zip format so we can look at it.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将设备恢复到出厂状态，iTunes下载了一个**iPhone软件**（扩展名`.ipsw`）存档。这一步的目标是理解其中的每一个文件。方便地，存档仍然可以在ipsw.me[^([6])](#footnote_6)找到，并且它使用zip格式，因此我们可以查看它。
- en: '[PRE0]'
  id: totrans-split-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There are many files in there whose purpose were identified[^([7])](#footnote_7)[^([8])](#footnote_8)
    fairly early on[^([9])](#footnote_9). Among then we find `img2` images displayed
    on the screen during recovery, the `Firmware` folder which contains everything
    for the baseband, and iOS kernel (`kernelcache`).
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 那里有许多文件，它们的目的在很早之前就被确定了[^([7])](#footnote_7)[^([8])](#footnote_8)[^([9])](#footnote_9)。其中我们发现在恢复过程中显示在屏幕上的`img2`图像、包含基带的所有内容的`Firmware`文件夹以及iOS内核(`kernelcache`)。
- en: More importantly, we see two huge `dmg` archives. The first one, `694-5259-38.dmg`,
    (called ramdisk[^([10])](#footnote_10)) was only used when iTunes restored the
    phone. Surprisingly, it was not encrypted. A simple `dd` allowed to mount it.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，我们看到两个巨大的`dmg`存档。第一个`694-5259-38.dmg`（称为ramdisk[^([10])](#footnote_10)）只有在iTunes恢复手机时使用。令人惊讶的是，它并没有加密。通过简单的`dd`命令可以挂载它。
- en: '[PRE1]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is not the iOS filesystem (barely [100 entries](ramdisk.txt)) but it allowed
    the DevTeam to poke into `/private/etc/master.passwd` and find the password for
    the user `mobile` (running the apps), and user `root` (running all other processes).
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是iOS文件系统（仅有[100条目](ramdisk.txt)），但它允许DevTeam探查`/private/etc/master.passwd`，找到用户`mobile`（运行应用程序）和用户`root`（运行所有其他进程）的密码。
- en: More importantly, the content of the ramdisk enabled access to the second dmg
    file, `694-5262-39.dmg`, which contains the iOS filesystem used during normal
    operation. The archive was encrypted but a key for it was found by looking into
    `/usr/sbin/asr` from the ramdisk.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，ramdisk的内容使得访问第二个dmg文件`694-5262-39.dmg`变得可能，该文件包含正常操作期间使用的iOS文件系统。尽管存档被加密，但通过查看ramdisk中的`/usr/sbin/asr`找到了其密钥。
- en: Note that they found a key, not the passphrase. They could not use `hdiutil`
    and had to write their own decrypter `vfdecrypt.c`[^([11])](#footnote_11). Once
    decrypted, this img could be mounted and they gained read access to the full runtime
    filesystem (list of files [here](https://web.archive.org/web/20071005010951/http://iphone.fiveforty.net/wiki/index.php/SystemFileAndDirectoryList#System.2FLibrary.2FExtensions.2F_Source_Files)).
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，他们找到了一个密钥，而不是密码。他们无法使用 `hdiutil`，必须编写自己的解密器 `vfdecrypt.c`[^([11])](#footnote_11)。解密后，此映像可以被挂载，他们获得了对完整运行时文件系统的读访问权限（文件列表[在此](https://web.archive.org/web/20071005010951/http://iphone.fiveforty.net/wiki/index.php/SystemFileAndDirectoryList#System.2FLibrary.2FExtensions.2F_Source_Files)）。
- en: '| Break DMG Password | Bypass Activation | Get Write Access | Get Working Toolchain
    | Unlock Phone | Enable Third-party Applications |'
  id: totrans-split-54
  prefs: []
  type: TYPE_TB
  zh: '| 突破 DMG 密码 | 绕过激活 | 获取写入访问权限 | 获取工作工具链 | 解锁手机 | 启用第三方应用程序 |'
- en: Activation Milestone
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 激活里程碑
- en: '* * *'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: An iPhone out of the box was a brick. It was not activated. After a user subscribed
    to AT&T, the following happened[^([12])](#footnote_12).
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 开箱即用的 iPhone 是一块砖。它尚未激活。用户订阅 AT&T 后，发生了以下事件[^([12])](#footnote_12)。
- en: iTunes would collect the devices's DeviceID, IMEI, and ICCID.
  id: totrans-split-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: iTunes 将收集设备的设备 ID、IMEI 和 ICCID。
- en: These three fields would be concatenated into a token.
  id: totrans-split-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这三个字段将被连接成一个令牌。
- en: The token would be sent to Apple server (`albert.apple.com`) where it would
    be signed with Apple's private key.
  id: totrans-split-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 令牌将被发送到 Apple 服务器（`albert.apple.com`），在那里将使用 Apple 的私钥进行签名。
- en: The signed token would then be sent back to the device.
  id: totrans-split-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 签名的令牌随后将被发送回设备。
- en: A daemon [`lockdownd`](https://iphonedev.wiki/Lockdownd), listening over USB
    verified the token using Apple's public key.
  id: totrans-split-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个名为 [`lockdownd`](https://iphonedev.wiki/Lockdownd) 的守护程序通过 USB 监听并使用 Apple
    的公钥验证令牌。
- en: With the proof that the token came from Apple, and matching DeviceID, IMEI,
    and ICCID, `lockdownd` updated the device state to "Activated".
  id: totrans-split-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随着证明令牌来自于 Apple，并匹配设备 ID、IMEI 和 ICCID，`lockdownd` 将设备状态更新为“已激活”。
- en: The user then had access to the iPhone [homescreen](Apple-iPhone.webp) and the
    apps.
  id: totrans-split-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户随后可以访问 iPhone [主屏幕](Apple-iPhone.webp) 和应用程序。
- en: '[PRE2]'
  id: totrans-split-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first breakthrough toward activation came from notorious developer dvdjon
    when he released PhoneActivationServer[^([13])](#footnote_13).
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 至于激活的第一次突破来自臭名昭著的开发者 dvdjon，当他发布了 PhoneActivationServer[^([13])](#footnote_13)。
- en: dvdjon created an activation method by patching iTunes to use HTTP instead of
    HTTPS for the activation server, and redirected activation requests to the PhoneActivationServer.
  id: totrans-split-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: dvdjon 通过修改 iTunes，使其使用 HTTP 而不是 HTTPS 连接激活服务器，并重定向激活请求到 PhoneActivationServer，创造了一个激活方法。
- en: The PhoneActivationServer would then send a valid Account Token to the iPhone.
    However, the Account Token was for a different IMEI, ICCID, and DeviceID. This
    method left the phone in the MismatchedICCID state, but allowed access to the
    user interface.
  id: totrans-split-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: PhoneActivationServer 随后会向 iPhone 发送一个有效的账户令牌。然而，账户令牌对应的却是不同的 IMEI、ICCID 和设备
    ID。这种方法导致手机处于不匹配 ICCID 的状态，但允许访问用户界面。
- en: '- iPhone Elite Dev Team'
  id: totrans-split-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- iPhone Elite Dev Team'
- en: '[^([14])](#footnote_14)'
  id: totrans-split-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[^([14])](#footnote_14)'
- en: The key part of the explanation is "valid Token". How do you generate one without
    the private key? It turned out you didn't need to. PhoneActivationServer always
    returned the same signed token captured from a successful activation (dvdjon's
    own phone?), regardless of the input token. That was a simple replay trick.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 解释的关键部分是“有效令牌”。如果没有私钥，您如何生成一个呢？事实证明您根本不需要。PhoneActivationServer 总是返回相同的已签名令牌，该令牌来自成功激活（dvdjon
    的手机？），无论输入的令牌是什么。这是一个简单的重播技巧。
- en: This was further oulined in George Hotz's presentation "Hacking the iPhone".
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: George Hotz 的演示“Hacking the iPhone”进一步概述了这一点。
- en: resending activation record to another phone
  id: totrans-split-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将激活记录重新发送到另一部手机
- en: lockdownd didn't check that (iD, IMEI, ICCID) in response actually matched anything
  id: totrans-split-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: lockdownd 在响应中并未检查（iD、IMEI、ICCID）是否实际匹配任何内容。
- en: The DevTeam wrote a cli named `tools`[^([16])](#footnote_16) which loaded a
    hard-coded signed token from a plist file, and sent it to any iPhone by tapping
    into iTunesMobileDevice.dll function (later improved with a standalone `iPhoneInterface`
    not requiring iTunes). The tool came with [source code](https://att.newsmth.net/nForum/#!article/Apple/178321)
    if you want to take a look yourself.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: DevTeam 编写了一个名为 `tools`[^([16])](#footnote_16) 的命令行工具，从 plist 文件加载硬编码的已签名令牌，并通过
    iTunesMobileDevice.dll 函数将其发送到任何 iPhone（后来通过独立的 `iPhoneInterface` 工具改进，无需 iTunes）。如果您想自己查看，该工具附带了
    [源代码](https://att.newsmth.net/nForum/#!article/Apple/178321)。
- en: '| Break DMG Password | Bypass Activation | Get Write Access | Get Working Toolchain
    | Unlock Phone | Enable Third-party Applications |'
  id: totrans-split-76
  prefs: []
  type: TYPE_TB
  zh: '| 打破 DMG 密码 | 绕过激活 | 获得写入权限 | 获取工作工具链 | 解锁手机 | 启用第三方应用程序 |'
- en: Write access Milestone
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 写入权限里程碑
- en: '* * *'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: An activated phone would appear in iTunes GUI and an user could upload files
    such as musics and photos. So there was "some" write access. But the process taking
    care of the file upload (`acfd`) was `chroot` jailed to `/root/Media`[^([17])](#footnote_17).
    Moreover only the user partition was mounted "rw". The system partition was mounted
    "r" only. The double goal was hence to break out of `chroot` jail (that's where
    the term "jaibreaking" come from btw) AND somehow be able to write in the system
    partition.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 激活的手机将出现在 iTunes GUI 中，用户可以上传文件，如音乐和照片。因此存在“某些”写入权限。但处理文件上传的进程（`acfd`）被 `chroot`
    禁闭在 `/root/Media`[^([17])](#footnote_17)。此外，只有用户分区被挂载为“rw”。系统分区仅挂载为“r”。因此，双重目标是打破
    `chroot` 禁锢（这就是“越狱”一词的由来）并在系统分区中某种方式写入。
- en: '[PRE3]'
  id: totrans-split-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The team seems to have found a solution around July 8th 2007[^([18])](#footnote_18)
    and described a process involving the ramdisk[^([19])](#footnote_19).
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 该团队似乎在2007年7月8日左右找到了一个解决方案[^([18])](#footnote_18)，并描述了一个涉及 ramdisk[^([19])](#footnote_19)
    的过程。
- en: To understand how it works, we need to know the two ways an iPhone boots. The
    first instructions to run when the phone boots come from the BootROM. From there
    a chain of loader bootstrap more and more complex stages. Note that before launching
    a new stage, its signature is checked so only Apple signed stuff can run. This
    process establishes a chain of trust all the way to Darwin kernel running the
    apps.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解它的工作原理，我们需要了解 iPhone 启动的两种方式。手机启动时运行的第一条指令来自 BootROM。从那里开始，加载程序引导更复杂的阶段。请注意，在启动新阶段之前，会检查其签名，因此只有苹果签名的内容才能运行。这个过程建立了一条从
    Darwin 内核到运行应用程序的信任链。
- en: '[PRE4]'
  id: totrans-split-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There is a second boot mode allowing iTunes to restore a phone from a bad state
    to a good state. When the phone boots in Recovery Mode, it stops at the iBoot
    stage[^([20])](#footnote_20). From there the phone expects the next stage to be
    loaded from ram (so now we understand the dmg archive named "ramdisk", it is a
    disk meant to be uploaded to ram).
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有第二种启动模式，允许 iTunes 将手机从糟糕的状态恢复到良好状态。当手机进入恢复模式时，它会停留在 iBoot 阶段[^([20])](#footnote_20)。从那里开始，手机期望从内存中加载下一个阶段（现在我们理解了名为“ramdisk”的
    dmg 存档，它是一个用于上传到内存的磁盘）。
- en: '[PRE5]'
  id: totrans-split-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The DevTeam looked inside `iTunesMobile.dll` to find out how iTunes was writing
    to the filesystem to perform a restore. They found commands such as `mount`, `umount`
    and `ditto` (to copy files) and wrote a CLI tool called [iPHUC](https://github.com/svn2github/iphuc),
    able to talk to the device in Restore Mode via `iTunesMobile.dll` private methods[^([21])](#footnote_21).
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: DevTeam 查看了 `iTunesMobile.dll` 内部以了解 iTunes 如何写入文件系统以执行恢复。他们发现了诸如 `mount`、`umount`
    和 `ditto`（用于复制文件）等命令，并编写了一个名为 [iPHUC](https://github.com/svn2github/iphuc)，能够通过
    `iTunesMobile.dll` 的私有方法与恢复模式下的设备进行通信[^([21])](#footnote_21)。
- en: The source code of `iPHUC` was later published and we can look at how it works.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`iPHUC` 的源代码后来被公开，我们可以看看它的工作原理。'
- en: User puts the phone in Recovery mode.
  id: totrans-split-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户将手机置于恢复模式。
- en: '[Send ramdisk to the phone (grestore command)](https://github.com/svn2github/iphuc/blob/master/RecoveryInterface.cpp#L77C8-L77C24)[^([22])](#footnote_22)[^([23])](#footnote_23).'
  id: totrans-split-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[发送 ramdisk 到手机（grestore 命令）](https://github.com/svn2github/iphuc/blob/master/RecoveryInterface.cpp#L77C8-L77C24)[^([22])](#footnote_22)[^([23])](#footnote_23)。'
- en: '[Load ramdisk in the phone RAM.](https://github.com/svn2github/iphuc/blob/df564835edd8a65f6c9e08fc5e837815bd546775/RecoveryInterface.cpp#L87)'
  id: totrans-split-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[将 ramdisk 加载到手机 RAM 中。](https://github.com/svn2github/iphuc/blob/df564835edd8a65f6c9e08fc5e837815bd546775/RecoveryInterface.cpp#L87)'
- en: '[Send the kernelcache.](https://github.com/svn2github/iphuc/blob/df564835edd8a65f6c9e08fc5e837815bd546775/RecoveryInterface.cpp#L100C5-L100C25)'
  id: totrans-split-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[发送 kernelcache。](https://github.com/svn2github/iphuc/blob/df564835edd8a65f6c9e08fc5e837815bd546775/RecoveryInterface.cpp#L100C5-L100C25)'
- en: '[Boot kernel pointing at ramdisk.](https://github.com/svn2github/iphuc/blob/df564835edd8a65f6c9e08fc5e837815bd546775/RecoveryInterface.cpp#L115)'
  id: totrans-split-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[引导内核指向 ramdisk。](https://github.com/svn2github/iphuc/blob/df564835edd8a65f6c9e08fc5e837815bd546775/RecoveryInterface.cpp#L115)'
- en: Now phone is in Restore mode.
  id: totrans-split-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在手机处于恢复模式。
- en: iBoot in Recovery Mode had an interesting property. It does not check the signature
    of the kernel before loading it. This is irrelevant to the topic but would later
    allow the DevTeam to load a patched kernel permitting `execl` of unsigned executables.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复模式中的 iBoot 有一个有趣的属性。在加载内核之前，它不会检查其签名。虽然这与主题无关，但后来允许 DevTeam 加载一个修补的内核，允许执行未签名可执行文件的
    `execl`。
- en: Now we have all the knowledge to understand the jailbreak steps detailed [here](https://web.archive.org/web/20071005150518/http://iphone.fiveforty.net/wiki/index.php/How_to_Escape_Jail).
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们掌握了所有的知识，可以理解详细的越狱步骤，详见 [这里](https://web.archive.org/web/20071005150518/http://iphone.fiveforty.net/wiki/index.php/How_to_Escape_Jail)。
- en: Put phone in Restore Mode
  id: totrans-split-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将手机放入恢复模式
- en: Use restore mode `mount` to mount both system and user partition.
  id: totrans-split-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用恢复模式 `mount` 挂载系统和用户分区。
- en: Use `ditto` to copy both `/etc/fstab` and `/System/Library/Lockdown/Services.plist`
    to `/root/Media`.
  id: totrans-split-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `ditto` 将 `/etc/fstab` 和 `/System/Library/Lockdown/Services.plist` 复制到 `/root/Media`。
- en: Use iTunes to copy these files to the workstation.
  id: totrans-split-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 iTunes 将这些文件复制到工作站。
- en: Use workstation text editor to modify these files as follows.
  id: totrans-split-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用工作站文本编辑器修改这些文件如下。
- en: '[Make fstab mount](https://www.theiphonewiki.com/wiki//private/etc/fstab) the
    system partition in "rw" mode instead of "r".'
  id: totrans-split-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[修改 fstab](https://www.theiphonewiki.com/wiki//private/etc/fstab) 以在系统分区中使用“rw”模式而不是“r”模式。'
- en: '[Create a second afcd service](https://web.archive.org/web/20071005150518/http://iphone.fiveforty.net/wiki/index.php/How_to_Escape_Jail#:~:text=string%3E%2Dd%3C/string%3E-,%3Cstring%3E/%3C/string%3E,-%3C/array%3E%0A%09%3C/dict%3E)
    in `Services.plist` based not in `/root/Media` but `/`.'
  id: totrans-split-102
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[创建第二个 afcd 服务](https://web.archive.org/web/20071005150518/http://iphone.fiveforty.net/wiki/index.php/How_to_Escape_Jail#:~:text=string%3E%2Dd%3C/string%3E-,%3Cstring%3E/%3C/string%3E,-%3C/array%3E%0A%09%3C/dict%3E)
    在 `Services.plist` 中，不是在 `/root/Media` 而是在 `/`。'
- en: Push back these files to `/root/Media` with iTunes.
  id: totrans-split-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 iTunes 将这些文件推送回 `/root/Media`。
- en: '`ditto` modified files to their original location in system partition.'
  id: totrans-split-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ditto` 将修改后的文件复制回系统分区的原始位置。'
- en: Reboot
  id: totrans-split-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动
- en: Upon reboot, iTunes sees the whole filesystem thanks to `acfd2`. Since both
    system and user partitions are mounted "rw", the DevTeam had achieved full read/write
    access to the system.
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动后，iTunes 由于 `acfd2` 可以看到整个文件系统。由于系统和用户分区都以“读写”方式挂载，“DevTeam” 已经实现了对系统的完全读写访问。
- en: '[PRE6]'
  id: totrans-split-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '| Decrypt Firmware | Bypass Activation | Get Write Access | Get Working Toolchain
    | Unlock Phone | Enable Third-party Applications |'
  id: totrans-split-108
  prefs: []
  type: TYPE_TB
  zh: '| 解密固件 | 绕过激活 | 获得写入权限 | 获得工作工具链 | 解锁手机 | 启用第三方应用程序 |'
- en: Later on both Activation and Write Access were automated into a Desktop MacOS
    X application named "INdependence".
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，激活和写入权限都自动化到了名为“INdependence”的桌面 MacOS X 应用程序中。
- en: Toolchain / Enable Third-Party Milestones
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: 工具链 / 启用第三方里程碑
- en: '* * *'
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Not much is known about how this was accomplished, except that at least twelve
    people worked on it[^([24])](#footnote_24). By July 19, 2007 a `binutils` toolchain
    able to target ARM [was completed](https://web.archive.org/web/20070904020127/http://iphone.fiveforty.net:80/wiki/index.php/Past_Progress_Reports#:~:text=After%20many%2C%20many%20hours,%2D%20the%20dev%20team).
    This gave the DevTeam the ability to run programs they authored on the device.
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何实现这一点的具体信息不多，只知道至少有十二人参与其中[^([24])](#footnote_24)。到 2007 年 7 月 19 日，完成了能够针对
    ARM 的 `binutils` 工具链，详见 [这里](https://web.archive.org/web/20070904020127/http://iphone.fiveforty.net:80/wiki/index.php/Past_Progress_Reports#:~:text=After%20many%2C%20many%20hours,%2D%20the%20dev%20team)。这使得
    DevTeam 能够在设备上运行他们编写的程序。
- en: After many, many hours of intense work from "Nightwatch", the first independent
    "Hello World"* application has been compiled and launched on the iPhone. This
    was made possible using the "ARM/Mach-O Toolchain", Nightwatch's "special project",
    that he has been working on so carefully over the past few weeks. Certain parts
    of the toolchain (such as the assembler) are being refined and tested and these
    will be released as soon as possible.
  id: totrans-split-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 经过多个小时的紧张工作，夜巡完成了第一个独立的“Hello World”* 应用程序，成功在 iPhone 上编译并启动。这得益于“ARM/Mach-O
    工具链”，夜巡过去几周认真开发的“特别项目”。工具链的某些部分（如汇编器）正在进行优化和测试，尽快发布。
- en: It should be noted that Nightwatch has been instrumental in creating these tools,
    working in near isolation to get them finished. Nightwatch was also responsible
    for the "jail exploit" that he developed from information he and other members
    of the the dev team discovered.
  id: totrans-split-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 值得注意的是，夜巡在创建这些工具方面发挥了重要作用，几乎是独自工作，确保项目完成。夜巡还负责开发了“越狱漏洞”，从他和团队其他成员发现的信息中开发出来。
- en: Please join us to thank Nightwatch, Tmiw, Darkten and Daeken for making this
    happen.
  id: totrans-split-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请加入我们一起感谢 Nightwatch、Tmiw、Darkten 和 Daeken 让这一切成为可能。
- en: '- iPhoneDevTeam Wiki/div>'
  id: totrans-split-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- iPhoneDevTeam Wiki/div>'
- en: 'mach-o and ARM: never done before outside apple; we needed to write it ourselves
    (aka watch in awe as nightwatch did it)'
  id: totrans-split-117
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: mach-o 和 ARM：此前从未在苹果之外完成；我们需要自己编写（也就是惊叹地看着夜巡干的事）
- en: '- Geohotz<'
  id: totrans-split-118
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- Geohotz<'
- en: '[^([25])](#footnote_25)'
  id: totrans-split-119
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[^([25])](#footnote_25)'
- en: /div>
  id: totrans-split-120
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: /div>
- en: Another goal of the toolchain was to rebuild a header (MobileTerminal.h) able
    to expose private functions from `iTunesMobile.so` and communicate with `afc`
    without the need to have iTunes running.
  id: totrans-split-121
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 工具链的另一个目标是重建一个头文件（MobileTerminal.h），可以从`iTunesMobile.so`中公开私有函数，并与`afc`通信，而无需运行
    iTunes。
- en: Several presentations mention the kernel checking the signature of an executable
    before allowing an `execl`. The first iPhone did not do that, it was likely something
    introduced in v1.1.1.
  id: totrans-split-122
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 几次演示提到内核在允许`execl`前检查可执行文件的签名。第一代 iPhone 并没有做这件事，这可能是在 v1.1.1 中引入的。
- en: Unlock Milestone
  id: totrans-split-123
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 解锁里程碑
- en: '* * *'
  id: totrans-split-124
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* * *'
- en: Finally, we reach the last item and the goal of the whole effort. The DevTeam
    got there around [Aug 14, 2007](https://web.archive.org/web/20070814011425/http://iphone.fiveforty.net/wiki/index.php/Main_Page).
    Note that the color is orange, not red. It seem they knew an unlock was imminent.
  id: totrans-split-125
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最后，我们达到了最后一项和整个努力的目标。DevTeam 大约在 [2007年8月14日](https://web.archive.org/web/20070814011425/http://iphone.fiveforty.net/wiki/index.php/Main_Page)
    达到了这个目标。请注意，颜色是橙色，而不是红色。看来他们知道解锁即将发生。
- en: '| Decrypt Firmware | Bypass Activation | Get Write Access | Get Working Toolchain
    | Enable Third-party Applications | Unlock Phone |'
  id: totrans-split-126
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
  zh: '| 解密固件 | 绕过激活 | 获取写入访问权限 | 获取工作工具链 | 启用第三方应用 | 解锁手机 |'
- en: 'Before we continue, just a few words about the structure of the iPhone. The
    smartphone is actually made of two parts. The smart, which is iOS and the phone/modem
    (with its firmware called "baseband"). These are two distinct systems, with their
    own RAM, own CPU, own storage, own firmware, even their own oscillators. They
    communicate together over an UART line (mounted on `/dev/tty.baseband`) using
    AT commands (e.g.: [Send an SMS with AT Commands](https://www.smssolutions.net/tutorials/gsm/sendsmsat/)).'
  id: totrans-split-127
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在继续之前，简要介绍一下 iPhone 的结构。智能手机实际上由两部分组成。智能部分是 iOS 和手机/调制解调器（其固件称为“基带”）。这是两个不同的系统，有各自的RAM、CPU、存储、固件甚至自己的振荡器。它们通过
    UART 线（安装在`/dev/tty.baseband`上）使用 AT 命令（例如：[使用 AT 命令发送短信](https://www.smssolutions.net/tutorials/gsm/sendsmsat/)）进行通信。
- en: '[PRE7]'
  id: totrans-split-128
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How the unlock process worked was [well known](https://web.archive.org/web/20070904020127/http://iphone.fiveforty.net:80/wiki/index.php/Past_Progress_Reports#:~:text=We%20even%20know,to%20AT%26T.)
    from almost day one (gory details [here](https://www.theiphonewiki.com/wiki/Unlock#:~:text=At%20%2B0x400%20in%20the%20seczone%2C%20a%20token%20is%20stored%20encrypted%20with%20(NCK%20%2B%20NORID%20%2B%20HWID))).
  id: totrans-split-129
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 解锁过程的工作原理几乎从第一天起就是[众所周知的](https://web.archive.org/web/20070904020127/http://iphone.fiveforty.net:80/wiki/index.php/Past_Progress_Reports#:~:text=We%20even%20know,to%20AT%26T.)（详细内容[在这里](https://www.theiphonewiki.com/wiki/Unlock#:~:text=At%20%2B0x400%20in%20the%20seczone%2C%20a%20token%20is%20stored%20encrypted%20with%20(NCK%20%2B%20NORID%20%2B%20HWID)）。
- en: We even know the AT command to do the unlock. It's 'AT+CLCK="PN",0,"xxxxxxxx"'.
  id: totrans-split-130
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们甚至知道解锁的 AT 命令。它是 'AT+CLCK="PN",0,"xxxxxxxx"'。
- en: But good luck finding those x's. They are called the NCK, or Network Control
    Key, and are believed to be unique in everyones phone. Forget brute force (time
    impractical) and the obvious entries. If you still think bruteforce is a good
    idea, [read this](https://web.archive.org/web/20070825072344/http://lpahome.com/iPhone/youarestupid.txt).
  id: totrans-split-131
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 但是祝你好运找到那些 x。它们被称为 NCK，即网络控制密钥，据信每个人的手机都是唯一的。忘记暴力破解（时间不实用）和显而易见的条目。如果你仍然认为暴力破解是个好主意，[阅读这篇文章](https://web.archive.org/web/20070825072344/http://lpahome.com/iPhone/youarestupid.txt)。
- en: Further, there is a limit of 3-10 unlock attempts per phone, after which the
    firmware will "hard-lock" itself to AT&T.
  id: totrans-split-132
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此外，每部手机解锁尝试的上限为 3-10 次，在此之后固件将“硬锁”到 AT&T。
- en: '- iPhoneDevTeam wiki'
  id: totrans-split-133
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- iPhoneDevTeam wiki'
- en: The baseband also has a BootROM, and a chain of loaders establishing a chain
    of trust so everything ends up being verified against a signature. The keys are
    of course only available at runtime, and can't be extracted. Furthermore, working
    with the baseband was difficult.
  id: totrans-split-134
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 基带也有一个 BootROM，以及一系列的加载程序建立了一条信任链，所以一切最终都要根据签名进行验证。这些密钥当然只在运行时可用，无法提取。此外，与基带的工作也很困难。
- en: Now the big thing about the baseband, and the most irritating thing, is that
    there is no DFU/Recovery Mode, and I've always been jealous of planetbeing and
    wizdaz and pumpkin and all these guys because they always had a failsafe to basically
    give them a free pass to do everything you think of to the phone.
  id: totrans-split-135
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在关于基带的重要事情，也是最令人恼火的事情，是没有 DFU/恢复模式，我一直对 planetbeing、wizdaz 和 pumpkin 等人很羡慕，因为他们总是有一个故障安全模式，基本上可以让他们为手机做的一切事情无所顾忌。
- en: Some of us at several points have completely erased the NOR, and completely
    invalidated the LLB and things like that. And, what happens if you have an invalid
    LLB in there, which is sort of that second stage, is your phone basically just
    rapidly flashes away in black with like these horrible looking sere (?) marks
    going down the screen, and it's very scary to watch, and you think it's completely
    gone and we nicknamed it "Christmas Tree Mode".
  id: totrans-split-136
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们中的一些人在几个时间点完全擦除了 NOR，完全使 LLB 失效之类的事情。如果你的设备中有无效的 LLB，这是第二阶段，你的手机基本上会在黑屏中快速闪烁，并且屏幕上会出现可怕的伤痕，非常可怕，让你觉得它完全报废了，我们将其昵称为“圣诞树模式”。
- en: But, as bad as it looked at the time, as long as you were good with your timing
    of your fingers, you can always enter DFU Mode and recover from that. There is
    nothing like that in the baseband; there are things you can do the the baseband
    and to the NOR, or the images in the NOR, that can permanently brick your phone.
  id: totrans-split-137
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 但是，虽然当时看起来很糟糕，只要你掌握了好的时间控制，你总是可以进入 DFU 模式并从中恢复。在基带中没有这样的事情；有些操作可能会永久性地使你的手机变砖。
- en: By [July 2007](https://gizmodo.com/iphone-reverse-engineering-opens-new-door-to-total-unlo-284614)
    that DevTeam had reverse engineered the baseband from the ipsw archive. Furthermore
    they had studied the executable in charge of updating the baseband, `/usr/local/bin/bbupdater`
    found in the ramdisk. They knew all the commands to upload a new one.
  id: totrans-split-138
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 到了[2007年7月](https://gizmodo.com/iphone-reverse-engineering-opens-new-door-to-total-unlo-284614)，DevTeam
    已从 ipsw 存档中逆向工程出基带。此外，他们还研究了负责更新基带的可执行文件 `/usr/local/bin/bbupdater`，该文件位于 ramdisk
    中。他们知道了所有上传新基带的命令。
- en: This lead to a first command-line [`iUnlock`](https://web.archive.org/web/20111121110900/http://gizmodo.com/assets/resources/2007/09/iunlock_src.zip)
    which involved having many files (such as a dumped firmware "nor", and secpack
    file "ICE03.12.06_G.fls"). Soon after, they released a simpler `anySIM` app which
    could be uploaded to the phone and ran with a simple button.
  id: totrans-split-139
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这导致了第一个命令行 [`iUnlock`](https://web.archive.org/web/20111121110900/http://gizmodo.com/assets/resources/2007/09/iunlock_src.zip)，其中包括许多文件（例如转储的固件
    "nor" 和 secpack 文件 "ICE03.12.06_G.fls"）。不久后，他们发布了一个更简单的 `anySIM` 应用程序，只需点击一个按钮即可上传并运行到手机上。
- en: Since the [source code](https://code.google.com/archive/p/devteam-anysim/source/default/source)
    was also published, we can look inside and follow how it works.
  id: totrans-split-140
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由于[源代码](https://code.google.com/archive/p/devteam-anysim/source/default/source)也已发布，我们可以查看内部并了解其工作原理。
- en: 'Open `/dev/tty.baseband` and setup modem parameters (e.g.: baud).'
  id: totrans-split-141
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `/dev/tty.baseband` 并设置调制解调器参数（例如：波特率）。
- en: '[PRE8]'
  id: totrans-split-142
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Dump baseband (a.k.a NOR, size = 4MiB) to /tmp.
  id: totrans-split-143
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转储基带（即 NOR，大小为 4MiB）到 /tmp。
- en: Load baseband to RAM.
  id: totrans-split-144
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将基带加载到 RAM 中。
- en: LoadSecpack (a file from the ramdisk named ICE03.12.06_G.fls)
  id: totrans-split-145
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载 Secpack（来自 ramdisk 中名为 ICE03.12.06_G.fls 的文件）。
- en: Patch baseband instruction in RAM (make any NCK allow an unlock).
  id: totrans-split-146
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 RAM 中修补基带指令（使任何 NCK 允许解锁）。
- en: '[PRE9]'
  id: totrans-split-147
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Push back baseband.
  id: totrans-split-148
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推回基带。
- en: '[PRE10]'
  id: totrans-split-149
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Unlock.
  id: totrans-split-150
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解锁。
- en: '[PRE11]'
  id: totrans-split-151
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In summary, what `anySIM` does is dump the baseband firmware (while the phone
    is running, pretty cool), patch it [^([27])](#footnote_27) (with raw bytes writing,
    also pretty cool!), and upload it back. Except this should not work since the
    firmware signature is checked upon upload and the firmware is patched. The firmware
    upload should fail the signature check.
  id: totrans-split-152
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 总结一下，`anySIM`的工作原理是在手机运行时候，转储基带固件（相当酷），然后进行修补 [^([27])](#footnote_27)（使用原始字节写入，同样相当酷！），最后上传回去。但这实际上不应该奏效，因为上传时会检查固件签名，而固件已经被修改过。固件上传应该会因为签名检查失败而失败。
- en: It seems the magic trick lies with the [minus 0x400](https://www.theiphonewiki.com/wiki/Minus_0x400)
    offset. Why it works is less than clear, even with GeoHotz explanation.
  id: totrans-split-153
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 看起来魔法似乎在于 [minus 0x400](https://www.theiphonewiki.com/wiki/Minus_0x400) 的偏移量。为什么有效并不是很清楚，即使
    GeoHotz 解释过。
- en: The first 0x400 bytes aren't written until the signature verifies. So start
    writing 0x400 bytes earlier :-)
  id: totrans-split-154
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在签名验证之前，前 0x400 字节不会被写入。所以，开始写入前 0x400 字节 :-)
- en: '- Geohotz'
  id: totrans-split-155
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- Geohotz'
- en: After the publication of this article, the kind people of Hackernews chipped
    in to explain[^([28])](#footnote_28) how `-0x400` works. It goes as follows.
  id: totrans-split-156
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在本文发布后，Hackernews 的善良之人们加入了解释 [^([28])](#footnote_28) `-0x400` 的过程。具体如下。
- en: The baseband receives the new firmware in chunks of up to `0x800` bytes. It
    cannot store the whole 4MiB in RAM, then checksum, and finally write to flash.
    Instead, bytes are written to flash as they are received, except for the first
    `0x400` bytes which are buffered in RAM. When the firmware is fully uploaded,
    the baseband does the checksum. If the test fails, the buffered bytes are discarded
    without being written to flash (the baseband has a corrupted firmware and will
    fail to start). If the firmware passes the test, the `0x400` bytes are written
    at the beginning of the firmware.
  id: totrans-split-157
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 基带以最多`0x800`字节的块接收新固件。它无法将整个4MiB存储在RAM中，然后进行校验和最后写入闪存。相反，字节在接收时即写入闪存，除了前`0x400`字节以外，这些字节在RAM中缓冲。当固件完全上传时，基带执行校验和。如果测试失败，则缓冲的字节将被丢弃，而不会写入闪存（基带固件损坏，将无法启动）。如果固件通过测试，则`0x400`字节将写入固件开头。
- en: The `-0x400` trick works by first writing garbage 0x400 bytes at offset minus
    `0x400` bytes from where the firmware should be written. Then the 4miB firmware
    is sent (the offset matches exactly where the firmware should be). When the cheksum
    test inevitably fails the garbage bytes are discarded. But the entire new firmware
    was properly flashed!
  id: totrans-split-158
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`-0x400`技巧的原理是首先在应写入固件的位置前写入垃圾0x400字节。然后发送4MiB固件（偏移量与应写入固件的确切位置匹配）。当校验和测试不可避免地失败时，垃圾字节将被丢弃。但整个新固件已经正确地刷新了！'
- en: '| Decrypt Firmware | Bypass Activation | Get Write Access | Get Working Toolchain
    | Enable Third-party Applications | Unlock Phone |'
  id: totrans-split-159
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
  zh: '| 解密固件 | 绕过激活 | 获取写入权限 | 获取工作工具链 | 启用第三方应用程序 | 解锁手机 |'
- en: Putting it all together
  id: totrans-split-160
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 把所有东西放在一起
- en: '* * *'
  id: totrans-split-161
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* * *'
- en: The complete list of [instructions to unlock](https://web.archive.org/web/20071011194202/http://iphone.fiveforty.net/wiki/index.php/Software_Unlock)
    was published on [September 12, 2007](https://gizmodo.com/the-complete-iphone-unlock-star-wars-timeline-304310).
    Along them were published per-continent testimonies [^([29])](#footnote_29) and
    most interestingly Canada[^([30])](#footnote_30).
  id: totrans-split-162
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[解锁说明](https://web.archive.org/web/20071011194202/http://iphone.fiveforty.net/wiki/index.php/Software_Unlock)的完整列表于[2007年9月12日](https://gizmodo.com/the-complete-iphone-unlock-star-wars-timeline-304310)发布。其中包括按大洲划分的证言[^([29])](#footnote_29)，特别是加拿大[^([30])](#footnote_30)的证言。'
- en: Epilogue
  id: totrans-split-163
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 结语
- en: '* * *'
  id: totrans-split-164
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* * *'
- en: Apple lost no time in releasing iPhone firmware V1.1.1 on 27th Sept 2007\. The
    progress bar was reset[^([31])](#footnote_31) and the cat and mouse game started.
    It has been ongoing ever since.
  id: totrans-split-165
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2007年9月27日，苹果迅速发布了iPhone固件V1.1.1。进度条被重置[^([31])](#footnote_31)，猫鼠游戏由此开始，至今仍在进行。
- en: '| Decrypt 1.1.1 | Get Write Access 1.1.1 | Activate 1.1.1 | Unlock 1.1.1 |
    Enable Third-party Applications 1.1.1 |'
  id: totrans-split-166
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_TB
  zh: '| 解密 1.1.1 | 获取写入权限 1.1.1 | 激活 1.1.1 | 解锁 1.1.1 | 启用第三方应用程序 1.1.1 |'
- en: Going deeper
  id: totrans-split-167
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 深入了解
- en: '* * *'
  id: totrans-split-168
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* * *'
- en: If you are interested in further archeology about the 2007 unlock, here is a
    list of links to checkout.
  id: totrans-split-169
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你对2007年解锁的更多考古学感兴趣，这里是一些链接供参考。
- en: One More Thing
  id: totrans-split-170
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一更事情
- en: '* * *'
  id: totrans-split-171
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* * *'
- en: This article was made possible by the awesomeness of the Internet Archive and
    its WayBack machine. Take a minute to [donate](https://archive.org/donate).
  id: totrans-split-172
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本文得以实现，感谢互联网档案馆及其WayBack机器的卓越性能。请花一分钟[捐赠](https://archive.org/donate)。
- en: References
  id: totrans-split-173
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 参考资料
- en: '* * *'
  id: totrans-split-174
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* * *'
- en: '* * *'
  id: totrans-split-175
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*'
  id: totrans-split-176
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*'
