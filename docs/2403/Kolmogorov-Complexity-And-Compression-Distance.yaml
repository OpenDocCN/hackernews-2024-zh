- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 12:47:51'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:47:51'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Kolmogorov Complexity And Compression Distance
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 科尔莫戈罗夫复杂性和压缩距离
- en: 来源：[https://smunshi.net/kolmogorov-complexity-and-compression-distance.html](https://smunshi.net/kolmogorov-complexity-and-compression-distance.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://smunshi.net/kolmogorov-complexity-and-compression-distance.html](https://smunshi.net/kolmogorov-complexity-and-compression-distance.html)
- en: '2023-09-26'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '2023-09-26'
- en: Kolmogorov Complexity And Compression Distance
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 科尔莫戈罗夫复杂性和压缩距离
- en: Alice and Bob play a game of who gets the most number of tales in 20 coin tosses
    each.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: Alice 和 Bob 在 20 次抛硬币的游戏中竞争谁能得到更多的反面。
- en: 'Alice gets the sequence: `HHHTHTHTTHTHHTHTTTTH`, whereas, Bob gets the sequence:
    `TTTTTTTTTTTTTTTTTTTT`. Alice is perplexed at Bob’s result. She senses foul-play
    and confronts Bob about it. Bob uses the following argument to defend himself:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: Alice 得到序列：`HHHTHTHTTHTHHTHTTTTH`，而 Bob 得到序列：`TTTTTTTTTTTTTTTTTTTT`。Alice 对
    Bob 的结果感到困惑。她察觉到了不正当操作，并质问了 Bob。Bob 用以下论点为自己辩护：
- en: 'Total number of 20 coin tosses sequences possible: \(2^{20}\)'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 总共 20 次抛硬币的可能序列数量：\(2^{20}\)
- en: 'Probability of getting a sequence at random from the \(2^{20}\) sequences:
    \(2^{-20}\)'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从 \(2^{20}\) 个序列中随机获取序列的概率：\(2^{-20}\)
- en: Bob claims that since the probability of getting both his and Alice’s sequence
    is the same (\(2^{-20}\)), it proves that there was no foul-play involved. Bob
    credits his excellent luck. Alice is smart and cannot be easily convinced. She
    get’s back at Bob by claiming that probability cannot be used in this context
    as it reveals no information regarding the randomness of the obtained sequences.
    One can take a quick glance at the obtained sequences and easily point out that
    Alice’s sequence is more random than Bob’s sequence. Alice needs a way to describe
    how “hard to describe” or random a string/sequence is. However, this argument
    lacks mathematical rigor. In this post, we’ll help out Alice using a mathematical
    tool known as Kolmogorov Complexity.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: Bob 声称，由于得到他和 Alice 的序列的概率相同（\(2^{-20}\)），这证明没有不正当操作。Bob 归功于他的运气极好。Alice 聪明，不容易被说服。她通过声称概率在此情境中无法使用来反击
    Bob，因为它不揭示获得序列的随机性信息。人们可以快速浏览获得的序列，并轻易指出 Alice 的序列比 Bob 的序列更随机。Alice 需要一种方法来描述字符串/序列的“难以描述”或随机程度。然而，这个论点缺乏数学严谨性。在本文中，我们将用一个称为科尔莫戈罗夫复杂性的数学工具来帮助
    Alice。
- en: Let’s start with describing Bob’s sequence in Python,
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从描述 Bob 在 Python 中的序列开始，
- en: '[PRE0]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The length of this description in Python comes out to be 6 (as shown below)
    which is less than the length of the sequence itself.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Python 描述的长度为 6（如下所示），少于序列本身的长度。
- en: '[PRE1]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we were to describe Alice’s sequence in Python, it would be quite complex
    (or literal) and the description would probably be equal to or longer than 20
    characters. Another thing to keep in mind is that the description language matters
    too. If we were to replicate the Python description for Bob’s sequence in Javascript,
    we would get the following description:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要用 Python 描述 Alice 的序列，那会非常复杂（或者文字），描述可能会等于或更长于 20 个字符。还要记住描述语言也很重要。如果我们用
    Javascript 复制 Bob 序列的 Python 描述，我们会得到以下描述：
- en: '[PRE2]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice how changing the description language increased the size of the description
    from 6 to 14\. This tells us that a string’s complexity does not only depend on
    the string but also on the description language.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到改变描述语言会将描述长度从 6 增加到 14。这告诉我们，一个字符串的复杂性不仅取决于字符串本身，还取决于描述语言。
- en: 'Considering the information we have on hand, we can mathematically define Kolmogorov
    complexity as follows:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑我们手头的信息，我们可以如下数学地定义科尔莫戈罗夫复杂性：
- en: '\[KC(x) = \min \{|d| : L(d) = x\}\]'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: '\[KC(x) = \min \{|d| : L(d) = x\}\]'
- en: 'where, \(L\) is the language that accepts the program \(d\) that delivers the
    same output as the string, \(x\). I’m gonna go ahead and butcher math for the
    sake of clarity. The above-mentioned mathematical representation would encompass
    our Python and Javascript examples in the following way:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: where，\(L\) 是接受程序 \(d\) 的语言，该程序输出与字符串 \(x\) 相同。我要为了清晰起见而简化数学内容。上述数学表达式将以以下方式包括我们的
    Python 和 Javascript 示例：
- en: '\[KC(\text{''TTTTTTTTTTTTTTTTTTTT''}) = \\ \min \{|d| : \text{Python}(d) =
    \text{''TTTTTTTTTTTTTTTTTTTT''}\} = 6 \\ where, d \in \{\text{''T''*20}, \text{''TTTTTTTTTTTTTTTTTTTT''},
    \text{...}\}\\\] \[KC(\text{''TTTTTTTTTTTTTTTTTTTT''}) = \\ \min \{|d| : \text{Javascript}(d)
    = \text{''TTTTTTTTTTTTTTTTTTTT''}\} = 14 \\ where, d \in \{\text{''T''.repeat(20)},
    \text{''TTTTTTTTTTTTTTTTTTTT''}, \text{...}\}\]'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '\[KC(\text{''TTTTTTTTTTTTTTTTTTTT''}) = \\ \min \{|d| : \text{Python}(d) =
    \text{''TTTTTTTTTTTTTTTTTTTT''}\} = 6 \\ 其中，d \in \{\text{''T''*20}, \text{''TTTTTTTTTTTTTTTTTTTT''},
    \text{...}\}\\\] \[KC(\text{''TTTTTTTTTTTTTTTTTTTT''}) = \\ \min \{|d| : \text{Javascript}(d)
    = \text{''TTTTTTTTTTTTTTTTTTTT''}\} = 14 \\ 其中，d \in \{\text{''T''.repeat(20)},
    \text{''TTTTTTTTTTTTTTTTTTTT''}, \text{...}\}\]'
- en: '* * *'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This defines the Kolmogorov complexity of a string as the length of the shortest
    program outputting that string. The idea is that Kolmogorov complexity gives us
    a way to describe the randomness of a string. A string with its Kolmogorov complexity
    equal to the length of the string will be more random than the string with its
    Kolmogorov complexity less than the length of the string. Moreover, a string cannot
    be compressed if its $$KC(x) \geq |x|$$ Another thing to note is that Kolmogorov
    complexity of a string cannot be computed. There cannot exist a computer that
    will always guarantee the Kolmogorov complexity for all the strings. It is not
    a computational problem but rather a fundamentally theoretical one. To better
    understand that, take a look at the
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了字符串的 Kolmogorov 复杂性为输出该字符串的最短程序长度。这个想法是，Kolmogorov 复杂性为我们提供了描述字符串随机性的一种方式。如果一个字符串的
    Kolmogorov 复杂性等于其长度，那么它比其 Kolmogorov 复杂性小的字符串更随机。此外，如果 $$KC(x) \geq |x|$$ ，则字符串不能被压缩。另外需要注意的是，字符串的
    Kolmogorov 复杂性无法计算。不存在一台计算机能够保证所有字符串的 Kolmogorov 复杂性。这不是一个计算问题，而是一个根本上的理论问题。要更好地理解这一点，请看
- en: '[interesting number paradox](https://en.wikipedia.org/wiki/Interesting_number_paradox)'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[有趣的数字悖论](https://en.wikipedia.org/wiki/Interesting_number_paradox)'
- en: .
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: The interesting number paradox revolves around the claim that all natural numbers
    are interesting. 1 is the first number, so that is interesting. 2 is the first
    even number. 3 is the first odd prime number. 4 is interesting because 4=2×2 and
    4=2+2\. We can continue in this fashion and find interesting properties for many
    numbers. At some point we might come to some number that does not seem to have
    an interesting property. We can call that number the first uninteresting number.
    But that, in itself, is an interesting property. In conclusion, the uninteresting
    number is, in fact, interesting! [[source](https://nautil.us/kolmogorov-complexity-and-our-search-for-meaning-237158/)]
  id: totrans-split-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有趣的数字悖论围绕这样一个主张：所有自然数都是有趣的。1是第一个数，因此它很有趣。2是第一个偶数。3是第一个奇素数。4之所以有趣，是因为4=2×2和4=2+2。我们可以继续这样做，找到许多数字的有趣属性。在某一点上，我们可能会遇到一些看起来没有有趣属性的数字。我们可以称这个数字为第一个无趣的数字。但这本身就是一个有趣的属性。总之，无趣的数字实际上是有趣的！[[来源](https://nautil.us/kolmogorov-complexity-and-our-search-for-meaning-237158/)]
- en: To summarize, we can never prove that the shortest program we’ve obtained is
    indeed the shortest program.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，我们永远不能证明我们得到的最短程序确实是最短程序。
- en: Eliminating Language Dependency
  id: totrans-split-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消除语言依赖性
- en: Currently, we have a strong dependency on the type of language being used to
    describe the string and that doesn’t attest this mathematical representation with
    consistency. In other words, we need to define complexity such that the definition
    does not change based on the \(L\) we pick and depends only on the string. Changing
    from Python to Javascript in the example above changed our values. So, how do
    we generalize this and make it language-agnostic? To alleviate this issue, let’s
    assume that there exists a universal language \(U\) such that it always gives
    us the shortest description length for all strings. This would imply,
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们对描述字符串的语言类型有很强的依赖性，并且这并不保证数学表达的一致性。换句话说，我们需要定义一个复杂性，这个定义不会因我们选择的 \(L\)
    而改变，只取决于字符串本身。在上述示例中，从Python到Javascript的转换改变了我们的值。那么，我们如何推广这一点，使其与语言无关呢？为了解决这个问题，让我们假设存在一种通用语言
    \(U\)，它总是为我们提供所有字符串的最短描述长度。这将意味着，
- en: \[KC_{U}(x) \leq KC_{L}(x) + C\]
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: \[KC_{U}(x) \leq KC_{L}(x) + C\]
- en: 'In other words, the complexity of describing a string \(x\) using \(U\) versus
    using an arbitrary language \(L\) differs by at most a constant factor, \(C\).
    However, let’s bring back the paradox we discussed above. According to that paradox,
    \(U\) cannot exist or \(U\) cannot provide shorter descriptions than every arbitrary
    \(L\). To address this issue, we place constraints on the set of valid description
    languages, allowing for the emergence of a single universal description method
    \(U\). Enter Turing Machine (\(TM\)), which is a fundamental theoretical concept/computer/model
    utilized to analyze properties of algorithms and determine which computational
    problems can or cannot be feasibly solved. Couple of pointers to consider here:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，使用\(U\)相对于使用任意语言\(L\)描述字符串\(x\)的复杂性最多相差一个常数因子，\(C\)。然而，让我们回顾上面讨论的悖论。根据那个悖论，\(U\)无法存在或者\(U\)无法提供比任意\(L\)更短的描述。为了解决这个问题，我们对有效描述语言集合施加限制，允许出现单一的通用描述方法\(U\)。输入图灵机（\(TM\)），这是用于分析算法属性以及确定哪些计算问题可以或不能够可行解决的基本理论概念/计算机/模型。这里需要考虑的几个要点：
- en: Halting problem (on a Turing Machine model) is a well-known problem of determining
    from a description of an arbitrary computer program and an input, whether the
    program will finish running, or continue to run forever *[[wikipedia](https://en.wikipedia.org/wiki/Halting_problem)]*.
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图灵机模型的停机问题是一种著名的问题，用于确定任意计算机程序的描述和输入，程序是否会停止运行，或者会永远运行 *[[维基百科](https://en.wikipedia.org/wiki/Halting_problem)]*。
- en: 'Mathematically, the halting problem is defined as the set of all pairs \((TM,
    w)\) such that \(w\) is an element of \(H(TM)\), where \(H(TM)\) represents the
    set of inputs on which the Turing machine \(TM\) halts (OR) \(\{(TM, w) : w \in
    H(TM)\}\) .'
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '数学上，停机问题被定义为所有二元组\((TM, w)\)，使得\(w\)是\(TM\)停机的输入之一，其中\(H(TM)\)表示图灵机\(TM\)停机的输入的集合（或者\(\{(TM,
    w) : w \in H(TM)\}\)）。'
- en: The above representation implies that, for a Turing Machine, there are certain
    inputs it halts on and certain other inputs we dont know if it does.
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上述表示意味着，对于图灵机，存在某些输入它会停机，而其他一些输入我们不知道它是否会停机。
- en: Therefore, if we model our universal language \(U\) as a Turing Machine that
    we know halts on certain inputs; we can avoid the paradox explained above!
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，如果我们将通用语言\(U\)建模为一台我们知道在某些输入上会停机的图灵机，我们可以避免上述解释的悖论！
- en: 'Restating our observations, we can say that for the Kolmogorov Complexity to
    be language-agnostic; there needs to be a universal language \(U\) that simulates
    a Turing Machine \(TM\) that on every input \(w\), halts with \(U(w) = x\) as
    the output. That gives us the true language-agnostic definition of Kolmogorov
    Complexity as follows:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 重申我们的观察，我们可以说对于科尔莫戈洛夫复杂性来说，要实现语言无关性，需要有一个可以模拟图灵机\(TM\)且在每个输入\(w\)上停机并输出\(x\)的通用语言\(U\)。这为我们提供了如下的真正的语言无关定义：
- en: '\[KC_{U}(x) = \min \{|(TM, w)| : \text{TM halts on input w and outputs x} \}\]'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '\[KC_{U}(x) = \min \{|(TM, w)| : \text{TM halts on input w and outputs x} \}\]'
- en: Normalized Distances
  id: totrans-split-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 归一化距离
- en: 'Having defined Kolmogorov Complexity, we can further use it to estimate how
    similar two strings/objects are. **Normalized Information Distance** between two
    strings can be defined as:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了科尔莫戈洛夫复杂性后，我们可以进一步使用它来估计两个字符串/对象的相似性。**标准化信息距离（Normalized Information Distance）**可以定义为：
- en: \[NID(x, y) = \frac{KC(x, y) - \min (KC(x), KC(y))}{\max(KC(x), KC(y))}\]
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: \[NID(x, y) = \frac{KC(x, y) - \min (KC(x), KC(y))}{\max(KC(x), KC(y))}\]
- en: where \(KC(x, y)\) is the Kolmogorov complexity after concatenating \(x\) and
    \(y\).
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 其中\(KC(x, y)\)是连接\(x\)和\(y\)后的科尔莫戈洛夫复杂性。
- en: 'Whereasm **Normalized Compression Distance** can be defined as:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，**归一化压缩距离（Normalized Compression Distance）**可以定义为：
- en: \[NCD(x, y) = \frac{C(x, y) - \min (C(x), C(y))}{\max(C(x), C(y))}\]
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: \[NCD(x, y) = \frac{C(x, y) - \min (C(x), C(y))}{\max(C(x), C(y))}\]
- en: where \(C(x, y)\) is the compression length after concatenating \(x\) and \(y\).
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 其中\(C(x, y)\)表示连接\(x\)和\(y\)后的压缩长度。
- en: '*It has been demonstrated that \(KC(x)\), can be reasonably estimated by the
    number of bits required to encode \(x\) using a compressor \(C\) (such as gzip)*'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*已经证明\(KC(x)\)，可以通过使用压缩器\(C\)（如gzip）编码\(x\)所需的比特数来合理估计*'
- en: '* * *'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Aaand Alice was finally able to outwit Bob with her newfound knowledge. ✌️
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 艾丽斯最终能够凭借她新学到的知识智胜鲍勃。✌️
