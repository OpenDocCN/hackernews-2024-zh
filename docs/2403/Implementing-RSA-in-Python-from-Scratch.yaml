- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:32:39'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:32:39'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Implementing RSA in Python from Scratch
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Python中从零开始实现RSA
- en: 来源：[https://coderoasis.com/implementing-rsa-from-scratch-in-python/](https://coderoasis.com/implementing-rsa-from-scratch-in-python/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://coderoasis.com/implementing-rsa-from-scratch-in-python/](https://coderoasis.com/implementing-rsa-from-scratch-in-python/)
- en: Please note that it is essential for me to emphasize that the code and techniques
    presented here are intended solely for educational purposes and should never be
    employed in real-world applications without careful consideration and expert guidance.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我必须强调这里介绍的代码和技术仅供教育目的，不应在现实世界的应用中使用，除非经过慎重考虑和专家指导。
- en: At the same time, understanding the principles of RSA cryptography and exploring
    various implementations is valuable for educational purposes and understanding
    how to code encryption methods, building secure encryption systems for practical
    use requires adherence to industry standards, best practices, and thorough security
    assessments. An inadequate implementation or improper usage of cryptographic techniques
    can lead to severe vulnerabilities, jeopardizing the confidentiality and integrity
    of sensitive data.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，理解RSA加密的原理，并探索各种实现方式，对于教育目的和理解如何编写加密方法，构建安全加密系统非常有价值，实际使用需要遵循行业标准、最佳实践和彻底的安全评估。不恰当的实现或不正确的加密技术使用可能导致严重的漏洞，危及敏感数据的保密性和完整性。
- en: '* * *'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: I'm sure many programmers, particularly web developers have heard of the RSA
    cryptography system. RSA is an asymmetric cryptography system, meaning that one
    key is used for encryption and the other for decryption. I've seen a lot of articles
    explaining the general principles of asymmetric cryptography, but I have not seen
    any that give easy-to-understand explanations of the mathematical background behind
    these algorithms, so I decided to write this article.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信许多程序员，特别是网页开发人员都听说过RSA加密系统。RSA是一种非对称加密系统，意味着一个密钥用于加密，另一个用于解密。我看过很多解释非对称加密一般原理的文章，但没有看到能够简单易懂地解释这些算法背后数学原理的文章，因此我决定写这篇文章。
- en: '**The Math Behind RSA**'
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**RSA背后的数学**'
- en: 'For start, as I''ve mentioned in the paragraph above, to transmit an RSA-encrypted
    message, you need 2 keys. One that can only encrypt and one that can decrypt.
    Let encryption key be denoted as `e`, the decryption key will be denoted as `d`
    and the message will be denoted as `m`. The key principle behind RSA is that in
    the following notion:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，正如我在上面的段落中提到的，要传输一个RSA加密的消息，你需要两个密钥。一个只能加密，一个只能解密。让加密密钥表示为`e`，解密密钥将表示为`d`，消息将表示为`m`。RSA背后的关键原理是：
- en: '[PRE0]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The difficulty of finding `d`, knowing `e` and `n` can be very hard if these
    numbers are chosen properly (as will be demonstrated below).
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些数被适当地选择（如下文所示），那么根据已知的`e`和`n`找到`d`的困难可能非常大。
- en: But first, we need to introduce some new concepts in number theory.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，我们需要介绍一些数论中的新概念。
- en: '`a ≡ b (mod n)` means that there is an integer `x` such that `a + nx = b`.
    A more intuitive explanation is that the reminder of `a / n` equals the reminder
    of `b / n`.'
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a ≡ b (mod n)`意味着存在整数`x`使得`a + nx = b`。更直观的解释是`a / n`的余数等于`b / n`的余数。'
- en: '`gcd(a, b)` is the greatest number that divides both `a` and `b`.'
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gcd(a, b)`是同时除以`a`和`b`的最大数。'
- en: '`lcm(a, b)` is the smallest number that is a multiple of both `a` and `b`.'
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lcm(a, b)`是既是`a`又是`b`的倍数的最小数。'
- en: '`λ(n)` is a number such that `x^λ(n) ≡ 1 (mod n)` for any `x` such that `gcd(x,
    n) = 1`. From this you can conclude that `x^a ≡ x^b (mod n) if a ≡ b (mod λ(n))`'
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`λ(n)`是这样一个数，对于任何使`gcd(x, n) = 1`的`x`，都有`x^λ(n) ≡ 1 (mod n)`。由此可推出，如果`a ≡ b
    (mod λ(n))`，则`x^a ≡ x^b (mod n)`'
- en: Generating keys
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成密钥
- en: Let's make `n = pq` where `p` and `q` are 2 prime numbers. Since `λ(p) = p -
    1` and `λ(q) = q - 1` (lookup Fermat's little theorem proof for why), `λ(n) =
    (p - 1) * (q - 1)`.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们令`n = pq`，其中`p`和`q`是两个素数。由于`λ(p) = p - 1`和`λ(q) = q - 1`（查阅费马小定理的证明），所以`λ(n)
    = (p - 1) * (q - 1)`。
- en: Now we have to solve `ed ≡ 1 (mod λ(n))`. `e` can be some prime number (usually
    65537) and d can be calculated using extended Euclidian's algorithm (will be written
    and explained in the code section) from the equation `ed + xλ(n) = gcd(e, λ(n))`
    (`d` and `x` are coefficients to be calculated).
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须解决`ed ≡ 1 (mod λ(n))`的问题。`e`可以是某个素数（通常是65537），`d`可以使用扩展欧几里得算法计算（将在代码部分中编写和解释）从方程`ed
    + xλ(n) = gcd(e, λ(n))`中得到（`d`和`x`是要计算的系数）。
- en: '`pair (e, n)` is used for encryption (`(m^e) % n`) and `pair (d, n)` is used
    for decryption (`(m^d) % n`)'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`对（e，n）`用于加密（`(m^e) % n`），而`对（d，n）`用于解密（`(m^d) % n`）'
- en: After computing the keys, p and q can be thrown away. Notice that without `p`
    and `q`, finding `λ(n)` would mean factorizing `n`, which is not an easy problem
    to solve for values of n up to 2^2048, which are regularly used.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 计算完密钥后，可以丢弃p和q。请注意，没有p和q，找到`λ(n)`将意味着分解n，这对于通常使用的值高达2^2048的n来说并不是易事。
- en: '**Implementing RSA in Python**'
  id: totrans-split-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**在Python中实现RSA**'
- en: 'First to list procedures and their steps:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先列出过程及其步骤：
- en: 'keys generation:'
  id: totrans-split-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 密钥生成：
- en: find 2 random prime numbers, `p` and `q`
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到两个随机素数，`p`和`q`
- en: compute `n = p * q` and `λ(n) = (p - 1) * (q - 1)`
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算`n = p * q`和`λ(n) = (p - 1) * (q - 1)`
- en: make `e` equal some prime number, e.g. `e = 35537`
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使`e`等于某个质数，例如`e = 35537`
- en: compute `d` from equation `ed + λ(n)x = gcd(e, λ(n)) = 1` using Extended Euclidian
    Algorithm (from this point on we will call it `eucalg`)
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用扩展欧几里得算法从方程`ed + λ(n)x = gcd(e，λ(n)) = 1`计算`d`（从这一点开始我们将其称为`eucalg`）
- en: 'Encryption:'
  id: totrans-split-31
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 加密：
- en: divide the message into sections (of 256 bits if n is 2048-bit)
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将消息分成部分（如果n为2048位，则为256位）
- en: each section (denoted as `m`) is encrypted as `(m^e) % n`
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个部分（表示为`m`）加密为`(m^e) % n`
- en: 'Decryption:'
  id: totrans-split-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 解密：
- en: divide the message into sections, same as above
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将消息分成几部分，如上所述
- en: each section (denoted as `m`) is decrypted as `(m^d) % n`
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个部分（表示为`m`）解密为`(m^d) % n`
- en: Extended Euclidian Algorithm
  id: totrans-split-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展欧几里得算法
- en: 'This algorithm relies on the fact that if `x` divides both `a` and `b`, there
    will be a pair of coefficients `(k, l)` such that:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法依赖于以下事实：如果`x`同时除以`a`和`b`，那么将会有一对系数`(k，l)`，满足
- en: '`a * k + b * l = x`'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`a * k + b * l = x`'
- en: The algorithm finds these coefficients (and `x`) by repeatedly subtracting the
    lesser argument from the bigger one, until the lesser one becomes 0\. Instead
    of repeatedly subtracting, you can calculate how many times `b` can be subtracted
    from `a` (`k = a // b`) and then subtract `b*k`. This optimization makes the algorithm
    run in O(log max(a, b)) which is a lot quicker.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法通过重复从较大的参数中减去较小的参数，直到较小的参数变为0来找到这些系数（和`x`）。与重复减法不同，您可以计算`b`可以从`a`中减去多少次（`k
    = a // b`），然后减去`b*k`。这种优化使得算法的运行时间为O(log max(a, b))，这比以前要快得多。
- en: 'Below is an implementation of the algorithm in Python:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是Python中算法的实现：
- en: '[PRE1]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that the function above can produce negative numbers for coefficients,
    so in case that happens, all that we need to do is set `d` to `λ(n) - d`.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，上述函数可以为系数产生负数，因此如果发生这种情况，我们只需将`d`设置为`λ(n) - d`。
- en: Fast Exponentiation with Modulo
  id: totrans-split-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速指数运算与模
- en: Some might suggest to just use `(b ** e) % n`, but this approach is not very
    good time and memory -wise because `b ** e` can be very big despite only the last
    2000 bits or so being needed. The solution is to reimplement exponentiation with
    calculating modulo after every division.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人可能建议只使用`(b ** e) % n`，但这种方法在时间和内存上并不是很好，因为`b ** e`可能非常大，尽管只需要最后的大约2000位。解决方案是在每次除法后重新实现带模指数运算。
- en: Exponentiation implementation below has logarithmic time complexity. Instead
    of iterating from 1 to `e` and multiplying `r` (result) by `b`, it iterates from
    the most significant bit of `e` to the least significant bit of `e`, and at each
    bit it does `r = r*r + bit`. This works because if `r` equals `b^x` and you're
    appending a bit to the end of x, new x will be `x * 2 + bit`.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的指数实现具有对数时间复杂度。它不是从1到`e`迭代，并通过`r`（结果）乘以`b`，而是从`e`的最高有效位到最低有效位迭代，并在每位上进行`r
    = r*r + bit`。这是因为如果`r`等于`b^x`，并且您正在向x的末尾附加一个位，则新的x将是`x * 2 + bit`。
- en: '[PRE2]'
  id: totrans-split-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Generation/Encryption/Decryption
  id: totrans-split-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成/加密/解密
- en: Keys generation, encryption and decryption have all been explained in the math
    section and the code below is simply implementation of that.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥生成、加密和解密都已在数学部分解释过，下面的代码只是该过程的实现。
- en: '[PRE3]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Code Testing
  id: totrans-split-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码测试
- en: 'I stored the code into a file named rsa.py and run the following in Python
    shell:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我将代码存储在名为rsa.py的文件中，并在Python shell中运行以下代码：
- en: '[PRE4]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**The Conclusion**'
  id: totrans-split-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**结论**'
- en: In the end of writing this article I realized that implementation of a usable
    Python RSA program is more complicated than I initially speculated. Because of
    that, I decided to split the topic up in multiple articles. With the code presented
    in this article you have all core parts of RSA written. But you still need a random
    prime generator and plaintext encryption (`numencrypt` and `numdecrypt` are suitable
    only for numbers `m` smaller in size than `n`). All these will be included in
    the next article that will be published shortly.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 写完这篇文章后，我意识到实现一个可用的Python RSA程序比我最初推测的要复杂得多。因此，我决定将这个主题分成多篇文章。在本文中提供的代码中，您已经编写了RSA的所有核心部分。但是，您仍然需要一个随机素数生成器和明文加密（`numencrypt`和`numdecrypt`仅适用于小于`n`的数字`m`）。所有这些内容将包含在即将发布的下一篇文章中。
- en: '* * *'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: If you want to continue reading, we also have a Part 2 and even a Part 3 to
    this article for those who are interested in Implementing RSA in Python from Scratch.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python从零开始实现RSA（第4部分）](https://coderoasis.com/implementing-rsa-from-scratch-in-python-part-4/)，如果您想继续阅读，我们还有第2部分甚至第3部分供那些对从零开始实现Python中的RSA感兴趣的人阅读。'
- en: '[Implementing RSA in Python from Scratch (Part 2)'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python从零开始实现RSA（第2部分）'
- en: Implementing RSA in Python from ScratchI’m sure many programmers, particularly
    web developers have heard of the RSA cryptography system. RSA is an asymmetric
    cryptography system, meaning that one key is used for encryption and the other
    for decryption. I’ve seen a lot of articles explaining the general principles](https://coderoasis.com/implementing-rsa-from-scratch-in-python-part-2/)  [Implementing
    RSA in Python from Scratch (Part 3)
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python从零开始实现RSA](https://coderoasis.com/implementing-rsa-from-scratch-in-python-part-2/)，我相信许多程序员，特别是Web开发人员，都听说过RSA加密系统。RSA是一种非对称加密系统，意味着一个密钥用于加密，另一个用于解密。我看过很多解释一般原理的文章'
- en: Side-channel attacks The first 2 articles focused mainly on the idea and implementation
    of RSA. As such they left out a relevant topic in modern encryption. Side-channel
    attacks take advantage of data we’d usually brush off as gibberish, such as hardware
    sounds, electromagnetic waves and timing. Timing attacks are most](https://coderoasis.com/implementing-rsa-in-python-from-scratch-part-3/)  [Implementing
    RSA from Scratch in Python (Part 4)
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 两篇文章主要关注RSA的思想和实现。因此，它们忽略了现代加密中的一个相关主题。侧信道攻击利用我们通常忽略的数据，例如硬件声音、电磁波和时间。时序攻击是最
- en: Please note that it is essential for me to emphasize that the code and techniques
    presented here are intended solely for educational purposes and should never be
    employed in real-world applications without careful consideration and expert guidance.
    At the same time, understanding the principles of RSA cryptography and exploring
    various](https://coderoasis.com/implementing-rsa-from-scratch-in-python-part-4/)
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我要强调的是，这里提供的代码和技术仅用于教育目的，并且在没有仔细考虑和专家指导的情况下，不应用于现实世界的应用程序。同时，理解RSA加密原理并探索各种
- en: '* * *'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Do you like what you''re reading from the CoderOasis Technology Blog? We recommend
    reading our [***Hacktivism: Social Justice by Data Leaks and Defacements***](https://coderoasis.com/hacktivism-social-justice-by-data-leaks-and-defacements/) as
    your next choice.'
  id: totrans-split-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '您是否喜欢从CoderOasis科技博客上阅读的内容？我们建议阅读我们的下一篇选择[***Hacktivism: Social Justice by
    Data Leaks and Defacements***](https://coderoasis.com/hacktivism-social-justice-by-data-leaks-and-defacements/)。'
- en: '[Hacktivism: Social Justice by Data Leaks and Defacements'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[Hacktivism: Social Justice by Data Leaks and Defacements'
- en: Around the end of February, a hacktivist that calls himself JaXpArO and My Little
    Anonymous Revival Project breached the far-right social media platform named Gab.
    They managed to gain seventy gigabytes of data from the backend databases. The
    data contained user profiles, private posts, chat messages, and more – a lot](https://coderoasis.com/hacktivism-social-justice-by-data-leaks-and-defacements/)
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在二月底，自称为JaXpArO和My Little Anonymous Revival Project的黑客活动分子侵入了名为Gab的极右社交媒体平台。他们成功地从后端数据库获取了70GB的数据。数据包含用户配置文件、私人帖子、聊天消息等等
    - 很多
- en: '* * *'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Did you know we have a [**Community Forums**](https://forums.coderoasis.com/?ref=coderoasis.com) and [**Discord
    Server**](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com)? which we invite everyone
    to join us? Want to discuss this article with other members of our community?
    Want to join a laid back place to chill and discuss topics like programming, cybersecurity,
    web development, and Linux? Consider joining us today!
  id: totrans-split-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们有一个名为[**社区论坛**](https://forums.coderoasis.com/?ref=coderoasis.com)和[**Discord
    服务器**](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com)的地方，我们邀请每个人加入我们。想要与我们社区的其他成员讨论本文吗？想要加入一个轻松的地方，讨论编程、网络安全、网页开发和Linux等主题吗？考虑今天加入我们！
- en: '[Join the CoderOasis.com Discord Server!'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[加入 CoderOasis.com 的 Discord 服务器！'
- en: CoderOasis offers technology news articles about programming, security, web
    development, Linux, systems admin, and more. | 112 members](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com)  [CoderOasis
    Forums
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: CoderOasis提供关于编程、安全、网页开发、Linux、系统管理等技术新闻文章。 | 112 名成员](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com)  [CoderOasis
    论坛
- en: CoderOasis Community Forums where our members can have a place to discuss technology
    together and share resources with each other.](https://forums.coderoasis.com/?ref=coderoasis.com)
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: CoderOasis 社区论坛，我们的成员可以在此讨论技术并共享资源。](https://forums.coderoasis.com/?ref=coderoasis.com)
