- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:55:52'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月27日 14:55:52
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: More powerful Go execution traces - The Go Programming Language
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更强大的Go执行追踪 - Go编程语言
- en: 来源：[https://go.dev/blog/execution-traces-2024](https://go.dev/blog/execution-traces-2024)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://go.dev/blog/execution-traces-2024](https://go.dev/blog/execution-traces-2024)
- en: More powerful Go execution traces
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更强大的Go执行追踪
- en: Michael Knyszek
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Michael Knyszek
- en: 14 March 2024
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年3月14日
- en: The [runtime/trace](/pkg/runtime/trace) package contains a powerful tool for
    understanding and troubleshooting Go programs. The functionality within allows
    one to produce a trace of each goroutine’s execution over some time period. With
    the [`go tool trace` command](/pkg/cmd/trace) (or the excellent open source [gotraceui
    tool](https://gotraceui.dev/)), one may then visualize and explore the data within
    these traces.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[runtime/trace](/pkg/runtime/trace)包含了一个强大的工具，用于理解和排查Go程序。其功能允许产生每个goroutine在一段时间内执行的追踪。通过[`go
    tool trace`命令](/pkg/cmd/trace)（或优秀的开源[gotraceui工具](https://gotraceui.dev/)），可以可视化和探索这些追踪数据。'
- en: The magic of a trace is that it can easily reveal things about a program that
    are hard to see in other ways. For example, a concurrency bottleneck where lots
    of goroutines block on the same channel might be quite difficult to see in a CPU
    profile, because there’s no execution to sample. But in an execution trace, the
    *lack* of execution will show up with amazing clarity, and the stack traces of
    blocked goroutines will quickly point at the culprit.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 追踪的魔力在于它可以轻松地揭示程序中难以以其他方式看到的事物。例如，一个并发瓶颈，在这个瓶颈中许多goroutine都在同一个通道上阻塞，可能在CPU分析中很难看到，因为没有执行可供抽样。但在执行追踪中，*缺少*执行将非常清晰地显示出来，而被阻塞goroutine的堆栈跟踪将迅速指出罪魁祸首。
- en: Go developers are even able to instrument their own programs with [tasks](/pkg/runtime/trace#Task),
    [regions](/pkg/runtime/trace#WithRegion), and [logs](/pkg/runtime/trace#Log) that
    they can use to correlate their higher-level concerns with lower-level execution
    details.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: Go开发者甚至能够使用[任务](/pkg/runtime/trace#Task)、[区域](/pkg/runtime/trace#WithRegion)和[日志](/pkg/runtime/trace#Log)来为其自己的程序进行仪器化，这些可以用来将高层次关注点与低层次执行细节相关联。
- en: Issues
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: Unfortunately, the wealth of information in execution traces can often be out
    of reach. Four big issues with traces have historically gotten in the way.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，执行追踪中的丰富信息往往难以触及。追踪历史上的四大问题经常妨碍其使用。
- en: Traces had high overheads.
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 追踪有很高的开销。
- en: Traces didn’t scale well, and could become too big to analyze.
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 追踪并没有很好地扩展，可能变得过于庞大以至于难以分析。
- en: It was often unclear when to start tracing to capture a specific bad behavior.
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常不清楚何时开始追踪以捕获特定的不良行为。
- en: Only the most adventurous gophers could programmatically analyze traces, given
    the lack of a public package for parsing and interpreting execution traces.
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅有最有冒险精神的gopher才能在缺乏用于解析和解释执行追踪的公共包的情况下进行程序化分析。
- en: If you’ve used traces in the last few years, you’ve likely been frustrated by
    one or more of these problems. But we’re excited to share that over the last two
    Go releases we’ve made big progress in all four of these areas.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在过去几年中使用过追踪功能，你可能已经对其中一个或多个问题感到沮丧。但是我们很高兴地宣布，在过去两个Go版本中，我们在所有这四个领域都取得了重大进展。
- en: Low-overhead tracing
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 低开销追踪
- en: Prior to Go 1.21, the run-time overhead of tracing was somewhere between 10–20%
    CPU for many applications, which limits tracing to situational usage, rather than
    continuous usage like CPU profiling. It turned out that much of the cost of tracing
    came down to tracebacks. Many events produced by the runtime have stack traces
    attached, which are invaluable to actually identifying what goroutines were doing
    at key moments in their execution.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go 1.21之前，对于许多应用程序而言，追踪的运行时开销大约在10-20%的CPU之间，这限制了追踪的使用，而不像CPU分析那样可以持续使用。事实证明，追踪的大部分成本归结于回溯。运行时产生的许多事件都附带有堆栈跟踪，这对于实际上识别关键时刻goroutine的执行情况非常宝贵。
- en: Thanks to work by Felix Geisendörfer and Nick Ripley on optimizing the efficiency
    of tracebacks, the run-time CPU overhead of execution traces has been cut dramatically,
    down to 1–2% for many applications. You can read more about the work done here
    in [Felix’s great blog post](https://blog.felixge.de/reducing-gos-execution-tracer-overhead-with-frame-pointer-unwinding/)
    on the topic.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Felix Geisendörfer和Nick Ripley在优化回溯效率方面的工作，执行追踪的运行时CPU开销大幅减少，对于许多应用程序而言仅为1-2%。关于这项工作的更多信息可以在[Felix的博客文章](https://blog.felixge.de/reducing-gos-execution-tracer-overhead-with-frame-pointer-unwinding/)中找到。
- en: Scalable traces
  id: totrans-split-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可扩展的追踪
- en: The trace format and its events were designed around relatively efficient emission,
    but required tooling to parse and keep around the state of the entirety of a trace.
    A few hundred MiB trace could require several GiB of RAM to analyze!
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪格式及其事件的设计围绕着相对高效的发射，但需要工具来解析并保留跟踪的整体状态。几百兆字节的跟踪可能需要几个吉字节的内存来进行分析！
- en: This issue is unfortunately fundamental to how traces are generated. To keep
    run-time overheads low, all events are written to the equivalent of thread-local
    buffers. But this means events appear out of their true order, and the burden
    is placed on the trace tooling to figure out what really happened.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这个问题与跟踪生成的方式密切相关。为了保持运行时开销低，所有事件都被写入等效于线程本地缓冲区。但这意味着事件以不正确的顺序出现，跟踪工具必须弄清楚真正发生的事情。
- en: The key insight to making traces scale while keeping overheads low was to occasionally
    split the trace being generated. Each split point would behave a bit like simultaneously
    disabling and reenabling tracing in one go. All the trace data so far would represent
    a complete and self-contained trace, while the new trace data would seamlessly
    pick up from where it left off.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使跟踪数据规模化并保持开销低的关键见解是偶尔分割正在生成的跟踪。每个分割点会像同时禁用和重新启用跟踪一样运行。到目前为止的所有跟踪数据都代表了一个完整且独立的跟踪，而新的跟踪数据会无缝地从上次中断的地方继续。
- en: As you might imagine, fixing this required [rethinking and rewriting a lot of
    the foundation of the trace implementation](/issue/60773) in the runtime. We’re
    happy to say that the work landed in Go 1.22 and is now generally available. [A
    lot of nice improvements](/doc/go1.22#runtime/trace) came with the rewrite, including
    some improvements to the [`go tool trace` command](/doc/go1.22#trace) as well.
    The gritty details are all in the [design document](https://github.com/golang/proposal/blob/master/design/60773-execution-tracer-overhaul.md),
    if you’re curious.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 修复这个问题需要[重新思考和重写跟踪实现的许多基础部分](/issue/60773)。我们很高兴地宣布，这项工作已经在 Go 1.22 中完成，并且现在已经普遍可用。重写带来了[许多不错的改进](/doc/go1.22#runtime/trace)，包括对[`go
    tool trace`命令](/doc/go1.22#trace)的一些改进。如果你感兴趣，所有细节都在[设计文档](https://github.com/golang/proposal/blob/master/design/60773-execution-tracer-overhaul.md)中。
- en: '(Note: `go tool trace` still loads the full trace into memory, but [removing
    this limitation](/issue/65315) for traces produced by Go 1.22+ programs is now
    feasible.)'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: （注意：`go tool trace`仍会将完整的跟踪加载到内存中，但对于由 Go 1.22+ 程序生成的跟踪，[移除此限制](/issue/65315)现在是可行的。）
- en: Flight recording
  id: totrans-split-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 飞行记录
- en: Suppose you work on a web service and an RPC took a very long time. You couldn’t
    start tracing at the point you knew the RPC was already taking a while, because
    the root cause of the slow request already happened and wasn’t recorded.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在开发一个网络服务，某个 RPC 花了很长时间。由于慢请求的根本原因已经发生且未记录，你无法在知道 RPC 已经花费了很长时间的点开始跟踪。
- en: There’s a technique that can help with this called flight recording, which you
    may already be familiar with from other programming environments. The insight
    with flight recording is to have tracing on continuously and always keep the most
    recent trace data around, just in case. Then, once something interesting happens,
    the program can just write out whatever it has!
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种技术可以帮助解决这个问题，这就是飞行记录，你可能已经在其他编程环境中熟悉了。飞行记录的见解是持续进行跟踪，并始终保留最近的跟踪数据，以备不时之需。然后，一旦发生有趣的事情，程序就可以写出它所拥有的任何内容！
- en: Before traces could be split, this was pretty much a non-starter. But because
    continuous tracing is now viable thanks to low overheads, and the fact that the
    runtime can now split traces any time it needs, it turns out it was straightforward
    to implement flight recording.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在能够分割跟踪之前，这几乎是行不通的。但由于低开销使连续跟踪现在成为可能，而且运行时现在可以在任何时候分割跟踪，因此实施飞行记录实际上是非常简单的。
- en: As a result, we’re happy to announce a flight recorder experiment, available
    in the [golang.org/x/exp/trace package](/pkg/golang.org/x/exp/trace#FlightRecorder).
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们很高兴地宣布飞行记录器实验，现在在[golang.org/x/exp/trace 包](/pkg/golang.org/x/exp/trace#FlightRecorder)中可用。
- en: Please try it out! Below is an example that sets up flight recording to capture
    a long HTTP request to get you started.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请尝试使用它！下面是一个示例，设置飞行记录以捕获长时间的 HTTP 请求，帮助你入门。
- en: '[PRE0]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you have any feedback, positive or negative, please share it to the [proposal
    issue](/issue/63185)!
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有任何反馈，无论是正面的还是负面的，请分享到[提案问题](/issue/63185)！
- en: Trace reader API
  id: totrans-split-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跟踪读取器 API
- en: Along with the trace implementation rewrite came an effort to clean up the other
    trace internals, like `go tool trace`. This spawned an attempt to create a trace
    reader API that was good enough to share and that could make traces more accessible.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 伴随着追踪实现的重写，还进行了清理其他追踪内部结构的努力，比如`go tool trace`。这引发了一个尝试创建足够好且可以共享的追踪读取器API，可以使追踪更加可访问。
- en: Just like the flight recorder, we’re happy to announce that we also have an
    experimental trace reader API that we’d like to share. It’s available in the [same
    package as the flight recorder, golang.org/x/exp/trace](/pkg/golang.org/x/exp/trace#Reader).
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 就像飞行记录仪一样，我们很高兴地宣布，我们还有一个实验性的追踪读取器API，我们希望能分享给大家。它可以在[与飞行记录仪相同的包中找到，golang.org/x/exp/trace](/pkg/golang.org/x/exp/trace#Reader)。
- en: We think it’s good enough to start building things on top of, so please try
    it out! Below is an example that measures the proportion of goroutine block events
    that blocked to wait on the network.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为它已经足够好，可以开始在其上构建东西了，请尝试一下！以下是一个示例，用于测量等待网络的goroutine阻塞事件的比例。
- en: '[PRE1]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And just like the flight recorder, there’s a [proposal issue](/issue/62627)
    that would be a great place to leave feedback!
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 就像飞行记录仪一样，有一个[提议问题](/issue/62627)可以让您留下反馈！
- en: We’d like to quickly call out Dominik Honnef as someone who tried it out early,
    provided great feedback, and has contributed support for older trace versions
    to the API.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要快速提到Dominik Honnef，他在早期尝试了这个工具，提供了很好的反馈，并为API提供了对旧版追踪的支持。
- en: Thank you!
  id: totrans-split-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谢谢！
- en: This work was completed, in no small part, thanks to the help of the those in
    the [diagnostics working group](/issue/57175), started over a year ago as a collaboration
    between stakeholders from across the Go community, and open to the public.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这项工作的完成，在很大程度上要感谢[诊断工作组](/issue/57175)中的那些人，这个工作组是一年多前由来自Go社区各方利益相关者共同开展的合作项目，并向公众开放。
- en: 'We’d like to take a moment to thank those community members who have attended
    the diagnostic meetings regularly over the last year: Felix Geisendörfer, Nick
    Ripley, Rhys Hiltner, Dominik Honnef, Bryan Boreham, thepudds.'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要花一点时间感谢过去一年中定期参加诊断会议的社区成员：Felix Geisendörfer、Nick Ripley、Rhys Hiltner、Dominik
    Honnef、Bryan Boreham、thepudds。
- en: The discussions, feedback, and work you all put in have been instrumental to
    getting us to where we are today. Thank you!
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 大家所做的讨论、反馈和工作对我们今天所处的位置至关重要。谢谢！
