- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:51:32'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:51:32'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 40 years of programming
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 40 年的编程经验
- en: 来源：[https://liw.fi/40/](https://liw.fi/40/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://liw.fi/40/](https://liw.fi/40/)
- en: Introduction
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '[PRE0]'
  id: totrans-split-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In April, 1984, my father bought a computer for his home office, a [Luxor ABC-802](https://en.wikipedia.org/wiki/ABC_800#ABC_802),
    with a Z80 CPU, 64 kilobytes of RAM, a yellow-on-black screen with 80 by 25 text
    mode, or about 160 by 75 pixels in graphics mode, and two floppy drives. It had
    BASIC in its ROM, and came with absolutely no games. If I wanted to play with
    it, I had to learn how to program, and write my own games. I learned BASIC, and
    over the next few years would learn Pascal, C, and more. I had found my passion.
    I was 14 years old and I knew what I wanted to do when I grew up.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 1984 年 4 月，我父亲为家庭办公室购买了一台[Luxor ABC-802](https://en.wikipedia.org/wiki/ABC_800#ABC_802)电脑，配备了
    Z80 CPU、64 千字节的 RAM、80×25 文本模式下的黄底黑字显示屏，或者大约 160×75 像素的图形模式，还有两个软盘驱动器。它的 ROM 中预装了
    BASIC，但完全没有游戏可玩。如果我想玩它，就必须学会如何编程，并编写自己的游戏。我学会了 BASIC，并在接下来的几年里学会了 Pascal、C 等。我找到了我的激情。那时我
    14 岁，我知道长大后想做什么了。
- en: When I was learning how to program, I thought it was important to really understand
    how computers work, how programming languages work, and how various tools like
    text editors work. I wanted to hone my craft and produce the finest code humanly
    possible. I was wrong.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习编程时，我认为真正理解计算机如何工作、编程语言如何工作以及文本编辑器等各种工具的工作原理非常重要。我想要磨练我的技艺，编写尽可能好的代码。但我错了。
- en: 'This essay is a condensation of what I wish I had been told after I had learned
    the basics of how to code. Instead, I was told, in person and in magazine articles,
    that by the time I would be twenty five years old, I''d be too old to work as
    a programmer. It was critical that I learn as many algorithms, data structures,
    and languages as quickly as possible. Programming was, after all, a young man''s
    game, and required being able to stay up all night, every night, to crank out
    more code than anyone else. That was the only way to succeed. It turns out that
    none of that was true: not the part about youth, nor the part of missing sleep,
    and especially not the part about gender.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章是我希望在我学会如何编写代码的基础知识之后告诉自己的内容的浓缩。相反，我被告知，无论是亲自还是在杂志文章中，当我二十五岁时，我都已经太老无法作为程序员工作了。我尽可能快地学习尽可能多的算法、数据结构和语言是至关重要的。毕竟，编程是年轻人的游戏，需要每天晚上都能熬夜，比其他任何人都多写更多的代码。但事实证明，这一切都不是真的：青春的一部分，缺乏睡眠的一部分，尤其是性别的一部分。
- en: As I write this essay, it will soon be forty years to the day since I first
    wrote computer code. I've managed to support myself by developing software, and
    I still write code every day. There is nothing else I would rather do for a living.
    I can't point at enormous successes and impressive feats, but I hope that surviving
    for decades in the industry gives me sufficient credentials to speak about software
    development.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当我写这篇文章时，离我第一次编写计算机代码已经快四十年了。我通过开发软件维持生计，每天都在编写代码。没有比这更想做的事情了。虽然我不能指出巨大的成功和令人印象深刻的壮举，但我希望在这个行业生存了几十年给了我足够的资格来谈论软件开发。
- en: This essay discusses some of the things I've learned about how to successfully
    build software. These are things I've learned from my own experience; I'm not
    a researcher, and there are few references to sources, and this is largely not
    supported by evidence. I'm basing this essay on my own experience, and if you
    disagree, that's fine.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章讨论了我在成功构建软件方面所学到的一些东西。这些都是我从自己的经验中学到的；我不是研究员，文中几乎没有引用参考来源，也没有大量证据支持。我基于自己的经验写这篇文章，如果你有不同意见，那也没关系。
- en: My goal in this essay is to get the reader to think, to research, to learn,
    to ponder. My goal is not to tell the reader how to think, what to think, how
    things are, or to give the answer to every question about every aspect of the
    process of building software.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这篇文章中的目标是让读者思考、研究、学习和思考。我的目标不是告诉读者如何思考，如何思考，事物如何，或者给出有关软件构建过程的每个问题的答案。
- en: The core skills
  id: totrans-split-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心技能
- en: Interesting and significant software is beyond the capacity of any one person
    to build alone in a reasonable time frame. This means that the fundamental, crucial,
    core skills in building software are communication and collaboration.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣且有意义的软件超出了任何一个人在合理时间内独自构建的能力。这意味着构建软件的基本、关键、核心技能是沟通和合作。
- en: It's not enough to know how computers work, how to use programming languages,
    to know algorithms and data structures, or how to use the varied tools involved
    in software construction. You also need to know how to talk with other people
    to learn what software to build, what it must do, how much effort is acceptable,
    how to manage the work, and many more things. You have know how to work with others
    to build something together that's bigger than any of you. If you and your team
    can do it well, it'll be bigger than the sum of you. Team work can be a force
    multiplier.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 光知道计算机如何工作、如何使用编程语言、知道算法和数据结构，或者如何使用涉及软件构建的各种工具是不够的。你还需要知道如何与他人交流，以了解要构建什么软件，它必须做什么，可以接受多少努力，如何管理工作，以及其他许多事情。你必须知道如何与他人合作，共同构建比你们中任何一个人都更大的东西。如果你和你的团队能做得好，这将比你们的总和更大。团队合作可以起到倍增力量的作用。
- en: These are difficult skills to learn. I've found them much more difficult than
    any technical part of building software.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是难以学习的技能。我发现它们比软件构建中的任何技术部分都更难。
- en: 'Even in the projects where I''m the only person, there are at least three people
    involved: past me, present me, and future me.'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在我是唯一参与者的项目中，至少有三个人参与其中：过去的我，现在的我和未来的我。
- en: Past me is a lazy and careless slob who always leaves a mess.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过去的我是一个懒惰和粗心的懒汉，总是留下一团糟。
- en: Present me does superb work, but has to cope with all the stupid stuff done
    by past me, and needs to placate future me.
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在的我做出了出色的工作，但必须应对过去的我做的所有愚蠢之事，并且需要安抚未来的我。
- en: Future me is an egotistic and opinionated snob for whom nothing is ever good
    enough.
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未来的我是一个自大和固执的势利小人，对他来说，任何事情都永远不够好。
- en: Getting these three people to get along well enough to get anything done is
    a constant struggle for me. I use my journal to cope. I write there what I do,
    why, and what the result is. I try to write so that I'll understand it, even if
    I'm tired, or have just experienced a short term neuralizer mind wipe a la Men
    in Black. I also plan explicit iterations, with specific tasks, and I use the
    GTD system to track things that still need to done.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让这三个人能够良好相处以完成任何事情对我来说是一个不断的挑战。我使用我的日志来应对。我在那里记录我做了什么，为什么这样做，以及结果是什么。我尝试写得清楚，即使我感到疲倦或者刚经历了类似《黑衣人》中短期记忆擦除的事情。我还计划明确的迭代，有具体的任务，并使用GTD系统跟踪仍需完成的事项。
- en: On productivity
  id: totrans-split-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于生产力
- en: 'What productivity means is not well defined for software development: time
    is easy to measure, but the output is not. Most people have at least a vague idea
    what productivity means to them. However, there are known factors that impact
    productivity---these are customarily ignored.'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于软件开发来说，生产力的定义并不明确：时间容易衡量，但输出并不是。大多数人至少对他们的生产力有一个模糊的概念。然而，有已知的影响生产力的因素——这些通常被忽视。
- en: To do good work you need to take care of yourself. You have to sleep well. You
    have to eat well. If you're tired, or have too much stress, you'll make mistakes
    and bad decisions. These result in you doing bad work. That's not a moral problem,
    but you may have to fix your own mistakes. You'll enjoy life, and work, more if
    you do good work.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要做好工作，你需要照顾好自己。你必须睡得好，吃得好。如果你感到疲倦或者压力过大，你会犯错并做出不良决策。这些会导致你做出糟糕的工作。这不是道德问题，但你可能需要自己修复错误。如果你能做好工作，你会更享受生活和工作。
- en: 'Hillel Wayne has talked about sleep and has sources. Recommended reading:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: Hillel Wayne谈到了睡眠并提供了相关资源。推荐阅读：
- en: 'You also need to have an environment that helps you do good work. Is it quiet?
    Are there interruptions? Is the furniture comfortable, and unlikely to hurt you
    in the long run? Do you have access to necessities, such as a toilet and tea?
    Can you take a break from your work area? Can you go for a walk: walking helps
    thinking. This is an incomplete list.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要一个有助于你做好工作的环境。它是安静的吗？有没有干扰？家具舒适，长期使用不会伤害你吗？你是否有访问厕所和茶水等必需品的途径？你能在工作区休息吗？你可以散步吗？散步有助于思考。这只是一个不完整的列表。
- en: Further, you need to manage yourself and your work in ways that suit you. The
    best way to do this depends on who you are, your preferences and experiences,
    and the kind of work you do. There is no single solution that works for everyone
    all the time.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你需要以适合自己的方式管理自己和工作。如何做到这一点最好取决于你的身份、偏好和经验，以及你所从事的工作类型。没有一种解决方案能够一直适合所有人。
- en: For myself, I've found applying the David Allen [Getting Things Done](https://gtdfh.liw.fi/)
    system has worked well, but whatever you do, you need to know what you need to
    achieve, today and in the near future, and you need to arrange things so that
    you can concentrate on one thing at a time. Note, however, that I use the GTD
    system partly to know that I can slack off; I do not aim to be as productive as
    possible at all times.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对我自己而言，我发现应用戴维·艾伦的[完成事项清单](https://gtdfh.liw.fi/)系统效果很好，但无论你做什么，你都需要知道你今天和近期需要达成什么，而且你需要安排事情以便你能一次专注于一件事情。然而，请注意，我部分使用GTD系统是为了知道我可以放松；我并不打算始终保持尽可能高的生产力。
- en: It may be worth tracking what you've done. Reflecting on that can give you a
    sense of achievement, and lets you see the progress you make. This can be a motivation
    and morale booster.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 可能值得追踪你所做的事情。反思可以给你一种成就感，并让你看到你所取得的进步。这可以是一种动力和士气提升。
- en: Multi-tasking is fine for a computer, but your brain can only think about one
    thing at a time and has really miserable context switching.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于计算机来说，多任务处理很好，但你的大脑一次只能思考一件事情，而且上下文切换非常困难。
- en: On governance
  id: totrans-split-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于治理
- en: 'When a group collaborates, one of the things they need to establish early on
    is governance: basically, how does the group make decisions, and how do they change
    them? The decisions range from the fundamental to the mundane: Who is in the group?
    Is it a democracy, or hierarchy, or some other structure? Who gets to have a say?
    What beverages does the group get? What font should the website use?'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个团体合作时，他们需要早期建立的一件事情是治理：基本上，团体如何做出决策，以及如何改变它们？这些决策涵盖从基本到日常的范围：谁在团体中？是民主、等级制还是其他结构？谁有发言权？团体会喝什么饮料？网站应该使用什么字体？
- en: Governance is difficult, but it's easier when it's explicit. Uncertainty about
    responsibility and power results in confusion and quarrel, and these can tear
    a group apart.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 治理是困难的，但明确治理时会更容易。对责任和权力的不确定性会导致混乱和争吵，这些可能会撕裂一个团体。
- en: All groups eventually have conflicts. Managing this and resolving differences
    is nominally the job of management, but really it falls on everyone. This requires
    skills that seem to be rarely taught to programmers, which is a shame.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所有团体最终都会有冲突。管理和解决分歧通常是管理者的工作，但实际上这是每个人的责任。这需要一些似乎很少教给程序员的技能，这是一种耻辱。
- en: 'Recommended reading:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐阅读：
- en: On politics and ethics
  id: totrans-split-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于政治和伦理
- en: 'Software development is always a political and ethical act. Whenever you''re
    building software, you have to make a myriad of decisions:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发始终是一种政治和伦理行为。每当你开发软件时，你必须做出许多决策：
- en: what shall the software do?
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件应该做什么？
- en: what resources will using it require?
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用它需要什么资源？
- en: how shall it be used?
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将如何使用？
- en: what abilities shall using it require?
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用它需要什么能力？
- en: what things will be easy to do?
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么事情会容易做？
- en: what things will be hard to do?
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么事情会难以做？
- en: will the software empower its users, or force them to do things for someone
    else's benefit?
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件是否会增强其用户的能力，还是迫使他们为了他人的利益而行动？
- en: All these decisions have consequences, which will favor some people over other
    people. Hence, they have political and ethical aspects, which need to be considered.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些决策都有后果，会偏袒某些人而不是其他人。因此，它们具有政治和伦理方面的影响，需要考虑。
- en: As an example, if you make something that can be used with a cheap phone, you
    enable most people in the world to use it. If you make it so that it requires
    expensive hardware, you exclude many people, especially poor people. Sometimes
    that is inevitable, and inherent in the problem you're building software to solve,
    but it's still a choice.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你制造了一些可以用廉价手机使用的东西，你就能让世界上大多数人都能使用它。如果你使其需要昂贵的硬件，你会排斥许多人，尤其是贫困人口。有时这是不可避免的，并且是你要解决软件问题中固有的问题，但这仍然是一个选择。
- en: There may not be a right or wrong choice for a particular decision, but there
    are always consequences. You have to consider them, and decide if they're acceptable,
    and for whom.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于特定决策可能没有对与错的选择，但总会有后果。你必须考虑它们，并决定它们是否可接受，以及为了谁可接受。
- en: In general, the software you build will reflect some values. Make sure you know
    you agree with them.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，你建立的软件将反映一些价值观。确保你知道你同意它们。
- en: 'Recommended reading:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐阅读：
- en: On ethics and software freedom
  id: totrans-split-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于伦理和软件自由
- en: Free and open source software is the ethical kind of software. Software freedom
    is essential for the well-being of people whose lives are affected by the use
    of computers, whether they are using computers directly or someone else is using
    computers to do things that matter to other people.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 自由开源软件是一种道德上正确的软件。软件自由对于那些生活受到计算机使用影响的人们至关重要，无论他们是直接使用计算机，还是其他人使用计算机做对其他人重要的事情。
- en: 'I have been writing free software since 1986, when I first read the [GNU Manifesto](https://www.gnu.org/gnu/manifesto.html)
    on a BBS. (The term "open source" is a synonym: I do not care to debate the differences
    between the two.)'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 自1986年以来，我一直在编写自由软件，当时我在BBS上首次阅读了[GNU宣言](https://www.gnu.org/gnu/manifesto.html)。（术语“开源”是其同义词：我不愿意就两者之间的差异进行辩论。）
- en: Much of my career has involved building open source software. My preference
    for free and open source over non-free software is clear, and well documented.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我的职业生涯很大一部分时间都是在构建开源软件上度过的。我明确偏爱自由开源软件而不是非自由软件，并且有详细的记录。
- en: Entire libraries' worth of text has been produced over the past three decades
    about the ethics of free and open source software versus other kinds, and specifics
    of licenses. I'm not going to make a summary of arguments here, or even point
    at recommended reading.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的三十年里，关于自由开源软件与其他类型软件的伦理以及许可证的具体内容，已经产生了整个图书馆的文本。我不打算在这里总结论点，甚至指出推荐阅读。
- en: I wanted to make my position clear, in case it matters to the reader. However,
    very little of this essay, including the topic of ethics, is related to software
    freedom and applies equally to the development non-free software.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要明确我的立场，以防读者关心。然而，这篇文章中非常少涉及软件自由的话题，同样适用于非自由软件的发展。
- en: On diversity and quality
  id: totrans-split-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于多样性和质量
- en: Human rights are fundamentally important. Treating other people well is the
    right thing to do. All of this is of paramount priority, whatever you do. If you
    don't agree with this, I have no hope for you.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 人权是根本重要的。善待他人是正确的事情。无论你做什么，这些都是首要任务。如果你不同意这一点，我对你已经失去了希望。
- en: In a software development context, I've found that the most crucial thing for
    building high quality software is to have diversity of thought among the people
    contributing to it. The more different kinds of thinking is brought into the project,
    the more likely the decisions will work for more circumstances, for more people,
    and deal with more things going wrong.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发的背景下，我发现构建高质量软件最关键的事情是在贡献者中具有思维的多样性。项目中引入更多种类的思维，决策更有可能适用于更多情况、更多人，并处理更多出现的问题。
- en: Diversity of thought comes from different kinds of people coming from different
    backgrounds and having lived different kinds of lives. Sometimes differences are
    visible externally, sometimes not.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 思维的多样性来自于来自不同背景、过不同生活的不同类型的人们。有时差异在外部是可见的，有时不是。
- en: When in doubt, choose different. If you exclude people based on them being unlike
    you, you will likely be choosing poorly.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当你犹豫不决时，选择不同。如果你基于不同于你的人而排斥他们，你可能会做出错误的选择。
- en: Diversity doesn't guarantee success. Nothing guarantees success. However, uniformity
    guarantees you get one-sided answers. Sometimes that's enough, but often it's
    not.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 多样性并不保证成功。没有什么可以保证成功。然而，单一性确保你得到片面的答案。有时这足够了，但通常不是。
- en: Collaboration and communication can certainly be more challenging in a diverse
    setting. Do not fear this. Treat challenges as an opportunity to learn, to become
    better at what you do.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在多样化的环境中，合作和沟通确实可能更具挑战性。不要害怕这一点。把挑战看作是学习的机会，让自己在所做的事情上变得更好。
- en: People will make mistakes, and you too will make them. It's a good policy to
    be benign and kind when others make mistakes, and expect that from others in return.
    Punishing others for mistakes will leave you alone.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 人们会犯错，你也会犯错。当别人犯错时，以宽容和善良的态度对待是一个好的策略，并期待别人也是如此。惩罚别人的错误只会让你孤单一人。
- en: On maintenance
  id: totrans-split-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于维护
- en: It is widely considered, in the software industry, that most of the cost of
    software production comes after the initial release, in the so called maintenance
    phase. The initial development might take a year or two, maintenance will take
    decades.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件行业普遍认为，软件生产的大部分成本发生在初始发布后的所谓维护阶段。初始开发可能需要一两年，而维护将持续几十年。
- en: One would think that this would lead to development practices, and architectural
    decision, and everything else to be optimized for lower maintenance costs. Unfortunately,
    the economic and other incentives favor the opposite. In most companies, the event
    horizon tends to be a quarter year, or a full year at most. It's not considered
    acceptable to spend a lot more effort now to save most of the effort in the long
    term.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 人们可能会认为这会导致开发实践、架构决策以及其他一切都被优化以降低维护成本。不幸的是，经济和其他激励因素倾向于相反。在大多数公司中，事件视界往往是一个季度，或者最多一整年。现在为了长远节约大量的工作是不可接受的。
- en: 'Even for personal hobby projects, there is often a strong urge to get something
    working as soon as possible rather than taking one''s time to do things well,
    but at least that''s an internal urge, not external pressure. Even so, the end
    result is the same: software that''s harder to change later on, when bugs are
    found, requirements change, or the software needs to be adapted to changes in
    the surrounding system or ecosystem.'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是个人爱好项目，通常也会有一种强烈的冲动尽快让某些东西运作起来，而不是花时间做事情做得好，但至少这是内在的冲动，而不是外部压力。即便如此，最终结果也是一样的：当发现错误、需求变化或软件需要适应周围系统或生态系统变化时，软件更难以后期修改。
- en: I am not alone in seeing the problem. I don't think it can be solved, unless
    the economic incentives are radically changed. It's on individual developers to
    try to reduce maintenance costs surreptitiously, when they can, as a kind of preemptive
    guerrilla maintenance.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我不是唯一一个看到问题的人。我认为除非经济激励发生根本性变化，否则问题无法解决。这取决于个别开发人员试图在可以的时候秘密地降低维护成本，作为一种先发制人的游击维护。
- en: Big questions for projects
  id: totrans-split-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大型项目的重要问题
- en: 'I find that it''s important, but also helpful, to answer a few questions at
    the beginning of every new project. The answers don''t have to be final, and it''s
    OK to change them at any time: if you don''t adjust your thinking when you learn
    new things, you''re not good at what you do. The answers can even be inane, as
    long as they''re honest. The point to is to get you thinking about the questions
    at all.'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现每个新项目开始时回答一些问题很重要，也很有帮助。答案不必是最终的，随时可以改变：如果你在学到新东西时不调整你的思维，那你就不擅长自己的工作。答案甚至可以是愚蠢的，只要它们是诚实的。关键是让你开始思考这些问题。
- en: For whom are you building the software? Whose opinions about it matter?
  id: totrans-split-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你为谁构建这个软件？谁的意见很重要？
- en: This tells you some of the stakeholders in the project. There will likely be
    more stakeholders later on, but it's a start. Knowing who the stakeholders are
    lets you concentrate on their needs. This helps make the project a success.
  id: totrans-split-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这告诉你项目中的一些利益相关者。以后可能会有更多的利益相关者，但这是一个开始。知道利益相关者是谁让你能专注于他们的需求。这有助于使项目成功。
- en: The stakeholders might be the end users, or might be the CEO. If you think it's
    the end users, but it's actually the CEO, you will make decisions that make the
    CEO unhappy, and the project will fail, and you won't understand why. And vice
    versa.
  id: totrans-split-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 利益相关者可能是最终用户，也可能是CEO。如果你认为是最终用户，但实际上是CEO，你会做出让CEO不满意的决定，项目将会失败，你也不会理解原因。反之亦然。
- en: Why are you building the software?
  id: totrans-split-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你为什么要构建这个软件？
- en: '"It''s my job" might be a very practical answer. It''s an answer that means
    that you need to re-evaluate everything if the chance of getting money is reduced.
    A different answer might be more about passion, or mission, and this means your
    reaction to changing circumstances is going to be different. There''s no wrong
    answer here, but be sure to be honest, at least to yourself.'
  id: totrans-split-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"这是我的工作"可能是一个非常实际的答案。这意味着如果获得金钱的机会减少，你需要重新评估一切。不同的答案可能更多关于激情或使命，这意味着你对变化环境的反应会不同。这里没有错误的答案，但至少对自己要诚实。'
- en: What should the software do, in broad strokes? Also, what should it not do?
  id: totrans-split-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件应该在宏观上做什么？同时，又不应该做什么？
- en: This is about knowing if you're building a word processor or a spreadsheet.
    It's not about detailed requirements or acceptance criteria.
  id: totrans-split-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是关于知道你是否在构建一个文字处理器或电子表格。这不是关于详细的需求或验收标准。
- en: How should the software work, in broad strokes?
  id: totrans-split-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件应该以什么样的方式工作，从宏观上来看？
- en: Again, big picture view. Are you making a command line tool, a web service,
    an operating system, a mobile app, or something else? What type and size of hardware?
  id: totrans-split-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 再次，从宏观视角来看。你是在制作一个命令行工具、一个网络服务、一个操作系统、一个移动应用程序还是其他什么？硬件的类型和尺寸是什么？
- en: What's important and what is just nice to have?
  id: totrans-split-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是重要的，什么只是好有的？
- en: This gets into requirements and acceptance criteria. You need to know them to
    build something good. Write them down. Also write down how you verify you meet
    them.
  id: totrans-split-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这涉及到需求和验收标准。你需要了解它们才能构建出好的东西。把它们写下来。还要写下如何验证你是否满足这些标准。
- en: Planning and estimating
  id: totrans-split-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划和估算
- en: Detailed planning beyond the very near future is difficult and usually fails.
    This includes estimating how long the work will take. I avoid doing this.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 超出非常近期未来的详细规划很困难，通常会失败。这包括估算工作需要多长时间。我避免做这样的事情。
- en: Planning and estimation are far from useless and should not be neglected. I
    plan and I estimate, but within the limits of what I've learned to be realistic.
    Specifically, I find it nearly impossible to make detailed plans beyond a one
    or two week iteration. By detailed plans I mean figuring out tasks at a granularity
    of what can be done in one sitting.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 规划和估算远非无用，不应忽视。我会规划，也会估算，但在我认为现实可行的范围内。具体来说，我几乎无法制定超过一两周迭代的详细计划。详细计划指的是在能在一个坐位完成的粒度上规划任务。
- en: Something surprising usually happens that ruins the plans beyond a couple of
    weeks. It might be management changing priorities, or the client changing their
    mind, or the company going bankrupt, or being bought. It might be something else,
    but usually something happens. If an iteration is short, you don't lose too much
    if all your planning has to be thrown away.
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通常会发生一些令人惊讶的事情，使得超过几周的计划泡汤。可能是管理层改变了优先事项，或者客户改变了主意，或者公司破产或被收购。可能是其他事情，但通常会发生某些事情。如果迭代时间较短，如果所有计划都需要被抛弃，你也不会损失太多。
- en: You can also react more easily if you need to change course.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要改变方向，你也可以更容易地做出反应。
- en: I stress that I'm talking about detailed planning here. It's fine to make plans
    for what to do next month or next quarter, as long as everyone involved knows
    that these plans are likely to have to change, and the plans are kept suitably
    high level.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我强调，这里讨论的是详细规划。制定下个月或下个季度的计划是可以的，只要所有参与者知道这些计划可能需要更改，并且计划保持在适当的高层次。
- en: 'An analogy: if you''re planning a road trip across the country, you will probably
    want to plan what cities to drive through. You probably don''t want plan every
    stop to fill up on fuel or to eat. You want to leave enough flexibility that you
    can change route if there''s an accident, or weather, or something else that may
    come as a surprise on the way.'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一个比喻：如果你计划穿越整个国家的公路旅行，你可能希望计划经过哪些城市。你可能不想为每次加油或进餐停留做详细计划。你希望保留足够的灵活性，以便在途中遇到意外事故、天气变化或其他突发事件时能够改变路线。
- en: Iteration works. Nothing else seems to work for large software projects. At
    least I've never seen any other approach work.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代有效。对于大型软件项目来说，似乎没有其他方法有效。至少我从未见过其他方法奏效。
- en: For me, iterations work better if they're focused. Having an explicit, clear
    goal helps cut down on scope creep. It concentrates work to aim at the iteration
    goal, rather than on what seems like a good idea in the moment.
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，如果迭代目标明确和清晰，迭代效果会更好。这有助于减少范围扩展。它集中工作以达到迭代目标，而不是仅仅追随当前看起来像个好主意的东西。
- en: 'When I plan for an iteration, I break things into small tasks that can be finished
    in one sitting. My estimates for tasks fall into four buckets: up to a quarter
    hour, full hour, four hours, or too long. I prefer the shorter tasks: they''re
    easier to estimate, and easier to do, and usually break fewer things. Anything
    that''s too long needs to be broken down further.'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当我计划一个迭代时，我会将事情分解为可以在一个坐位完成的小任务。我对任务的估计分为四个桶：不到15分钟，整整一个小时，四小时或者太长。我更喜欢较短的任务：它们更容易估计，也更容易完成，而且通常会减少问题。任何太长的任务都需要进一步分解。
- en: Some tasks are impossible to estimate. Debugging is a typical example. How long
    will it take you to realize the Ethernet cable is broken, or an operating system
    update broke things, or find the cause of some other unforeseen problem? Debugging
    happens, and you had best leave enough slack in your planning to cope with some
    troubleshooting.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有些任务很难估计。调试就是一个典型例子。你要多长时间才能意识到以太网线断了，或者操作系统更新出了问题，或者找到其他意外问题的原因？调试总会发生，最好在规划中留出足够的余地来处理一些故障排除工作。
- en: Interruptions also happen. Sometimes you have no option but to react and respond
    to them immediately. Leave room for that.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 中断也经常发生。有时你别无选择，只能立即做出反应和应对。留出空间来处理这些情况。
- en: Express yourself in writing
  id: totrans-split-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用文字表达自己
- en: Your memory is fleeting and fallible. You will forget details. You will forget
    important stuff. You will remember things wrongly. When you collaborate, you and
    others will disagree on what was said, agreed upon, and decided.
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您的记忆是短暂和不可靠的。您会忘记细节。您会忘记重要的事情。您会错误地记住事情。当您合作时，您和其他人将会对说过的、达成的和决定的事情有不同看法。
- en: 'I was once in a meeting, with four people, plus the CTO. The CTO forbade us
    to take notes: it seems the fad of the week was that note taking is what makes
    meetings a waste of time. The meeting took two hours. Afterwards, the four of
    us had about eight different opinions of what had been decided. No follow-up actions
    were ever taken.'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经在一个会议上，有四个人，加上首席技术官。首席技术官禁止我们记笔记：似乎这周的时髦是记笔记会让会议变得浪费时间。会议持续了两个小时。事后，我们四个人对会议所做决定有大约八种不同的看法。之后从未采取任何后续行动。
- en: Write things down. It seems like a stupid chore, tedious, boring, and archaic,
    but it's the way organizations remember. Writing things down is a super power
    that is easily overlooked.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 写下来。这似乎是一项愚蠢的琐事，乏味且古老，但这是组织记忆的方式。书写是一种经常被忽视的超能力。
- en: Your team should keep meeting minutes, covering at least the important decisions,
    and what actions everyone should do after the meeting. Keep them short enough
    that they're easy write, and to read. Archive them somewhere everyone can look
    at them at any time. This helps people who weren't there, perhaps because they
    were on vacation, or only join a year later.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您的团队应该记录会议记录，至少涵盖重要决策以及会后每个人应该做的事情。使它们足够简短，易于写作和阅读。将其存档在每个人随时可以查看的地方。这有助于那些不在场的人，例如因为他们在度假，或者一年后才加入的人。
- en: Apropos meetings, learn how to have good meetings. What works for me is an agenda
    set well ahead of time, with supporting materials. Prepare for the meeting so
    that you don't waste everyone's time. Have a chair who keeps discussion on track,
    and time boxed. Your process for a good meeting might be different, but you should
    find one.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 关于会议，学习如何开展有效的会议。对我有效的是提前设定议程，并提供支持材料。为会议做好准备，以免浪费每个人的时间。有一个主持人来保持讨论的方向，并设定时间框架。您的有效会议流程可能有所不同，但您应该找到适合自己的方式。
- en: On doing work
  id: totrans-split-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在工作时
- en: When making a change, make only one change at a time. If you can, split the
    change you're making into smaller partial changes. Small changes are easier to
    understand and less likely to be catastrophic.
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 进行更改时，一次只进行一个更改。如果可以的话，将要做的更改分成更小的部分更改。小的更改更容易理解，也不太可能造成灾难性后果。
- en: 'Automate away friction: running tests, making a release, packaging, delivery,
    deployment, etc. Do this from as early on as feasible. Set up a pipeline where
    you can make a change and make sure the software still works and willing users
    can start using the changed software. The smoother you can make this pipeline,
    the easier it will be to build the software.'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化消除摩擦：运行测试、发布、打包、交付、部署等。尽早进行。建立一个流水线，您可以进行更改并确保软件仍然运行，并且愿意使用更改后的软件的用户可以开始使用。您能使这个流水线越顺畅，构建软件就越容易。
- en: Use version control for every project. Practice continuous integration by merging
    changes to the main line of development often.
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对每个项目使用版本控制。通过经常将更改合并到主要开发线路中来实践持续集成。
- en: 'Develop an automated test suite that you trust: if tests pass, you can make
    a release, or deploy to production. This usually means starting the test suite
    early on in the project. Make sure the automated tests cover all aspects you care
    about: the goal is to make sure that what you give to others works they way it''s
    intended. Update production code and test code together.'
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 开发一个您信任的自动化测试套件：如果测试通过，您可以发布或部署到生产环境。通常这意味着在项目早期启动测试套件。确保自动化测试覆盖您关心的所有方面：目标是确保您交付给他人的东西按照预期工作。同时更新生产代码和测试代码。
- en: Run the test suite many times in a row to identify flaky tests. Do not suffer
    flaky tests.
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 多次运行测试套件以识别不稳定的测试。不要容忍不稳定的测试。
- en: Do stress or load testing, even if you only do it in simple ways. You don't
    know your software and system can handle 10,000 concurrent users until you've
    done so. Mine didn't.
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: 进行压力测试或负载测试，即使只是以简单的方式进行。在进行此类测试之前，您不知道您的软件和系统能否处理1万个并发用户。我的系统做不到。
- en: 'In one job, we had a system that had worked fine in production for a while.
    We deployed it to a customer who had a lot more traffic. Our software failed.
    The problem turned out that we ran out of TCP port numbers: we made an HTTP request
    for each incoming message, but we didn''t re-use the underlying TCP connection.
    There was so much traffic that all possible port numbers were used, and then everything
    stalled. The fix was to re-use the TCP connection, a change that took about one
    line, and then everything worked fine. We would have found this ourselves had
    we done even the simplest load testing.'
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在一份工作中，我们有一个系统在生产中运行良好。我们将其部署到一个流量更大的客户那里。我们的软件失败了。问题在于我们用完了TCP端口号：每个传入消息我们都发出一个HTTP请求，但我们没有重用底层的TCP连接。由于流量很大，所有可能的端口号都被占用，然后一切都停滞了。解决方法是重用TCP连接，只需一行代码的更改，然后一切都运行正常了。如果我们甚至做了最简单的负载测试，我们本可以自己发现这个问题。
- en: If possible, use the software yourself. You'll understand your users better.
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能，自己使用软件。这样你会更好地理解你的用户。
- en: 'Watch other people use the software. You''ll understand your software''s sharp
    corners better. True story: it''s hard for people who''ve not been involved in
    the development of software to use the software, if it has three different names
    for the same thing. Seeing someone struggle with this makes it painfully obvious.'
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: 观察其他人如何使用软件。你将更好地理解软件的尖锐之处。真实故事：对于没有参与软件开发的人来说，如果软件对同一事物有三个不同的名称，使用起来会非常困难。看到有人因此而苦苦挣扎，这一点显而易见。
- en: Treat testers as friends who help you find when you've made a mistake. They're
    not out to humiliate you. Nobody is so perfect that they never make mistakes or
    overlook details or forget entire features. Don't ask me how I know.
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将测试人员视为帮助你发现错误的朋友。他们并非想要羞辱你。没有人是完美的，他们永远不会犯错，或者忽视细节或遗忘整个功能。不要问我怎么知道的。
- en: Advice on coding
  id: totrans-split-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编码建议
- en: Simple, obvious code is easier to write, easier to get to work, easier to understand,
    and easier to change without breaking it. Simplify things as much as you can,
    but no more than that. Sacrifice simplicity at the altar of performance only when
    you have proven the performance gains are worth it.
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
  zh: 简单明了的代码更易于编写，更易于使其工作，更易于理解，也更易于在不破坏的情况下进行更改。尽可能简化事物，但不要过度简化。只有在证明性能提升值得时，才在性能的祭坛上牺牲简单性。
- en: Complexity is the enemy you think is a friend.
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂性是你以为是朋友的敌人。
- en: Coupling and cohesion are still important concepts.
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 耦合和内聚仍然是重要的概念。
- en: In every project, conceptual clarity is important. Also, keep your terminology
    consistent. Confusion lurks where clarity hides. With great confusion comes great
    annoyance and the certainty of bugs.
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个项目中，概念上的清晰非常重要。同时，保持术语的一致性。混淆隐藏在清晰之处。混乱带来极大的烦恼，以及错误的必然性。
- en: Speed is a feature to users, but not always for development, as too much haste
    leaves too little time to think. Functionality can be a misfeature.
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户来说，速度是一个特性，但对于开发来说并非总是如此，因为匆忙过多会导致思考的时间不足。功能可能是一个误特性。
- en: 'Recommended reading:'
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐阅读：
- en: Developing a career
  id: totrans-split-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 职业发展
- en: You can choose to be a deep expert on something very specific, or to be a generalist,
    or some mix. Choose wisely. There may not be any wrong choice, but every choice
    has consequences.
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择成为某个非常具体领域的深度专家，或者成为一个通才，或者两者兼顾。选择明智。也许没有错误的选择，但每个选择都有后果。
- en: Be humble. [Be Nanny, not Granny](https://en.wikipedia.org/wiki/Witches_(Discworld)).
    People may respect the powerful witch more, but they like the kind one better.
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要谦虚。[做奶奶，不做祖母](https://en.wikipedia.org/wiki/Witches_(Discworld))。人们可能更尊重那位强大的女巫，但他们更喜欢那位善良的女巫。
- en: Be open and honest. Treat others fairly. You don't have to believe in karma
    for it to work, so make it work for you, not against you.
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要坦诚和公正。公平对待他人。你不必相信因果报应，但它也能起作用，所以让它为你服务，而不是反过来。
- en: Help and lift up others. But at the same time, don't allow others to abuse or
    take advantage of you. You don't need to accept bullshit. Set your boundaries.
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助和支持他人。但同时，不要让他人滥用或利用你。你不需要接受废话。设定你的界限。
- en: Ask for help when you need it, or when you get stuck. Accept help when offered.
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要帮助或陷入困境时，请寻求帮助。接受提供的帮助。
- en: I am not the right person to talk about developing a career, but when I've done
    the above, things have usually ended up going well.
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我不是谈论职业发展的合适人选，但当我做到以上这些时，事情通常会顺利进行。
- en: Takeaway
  id: totrans-split-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要点
- en: Take care of yourself. Sleep. Eat. Exercise. Rest. Relax. Take care of other
    people, as best you can. People are important. Software is just fun.
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
  zh: 好好照顾自己。睡眠。饮食。锻炼。休息。放松。尽力照顾其他人。人是重要的。软件只是娱乐。
- en: Acknowledgments
  id: totrans-split-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: Thank you to Brennen Bearnes, Richard Braakman, Tyler Cipriani, Greg Grossmeier,
    Hackhörnchen, Soile Mottisenkangas, Daniel Silverstone, and Enrico Zini, and for
    reviewing drafts of this essay. Any errors are mine.
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢 Brennen Bearnes、Richard Braakman、Tyler Cipriani、Greg Grossmeier、Hackhörnchen、Soile
    Mottisenkangas、Daniel Silverstone 和 Enrico Zini，对本文草稿的审阅。任何错误均属于本人。
