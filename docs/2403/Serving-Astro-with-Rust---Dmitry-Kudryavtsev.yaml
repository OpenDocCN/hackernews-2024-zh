- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:47:40'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:47:40
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Serving Astro with Rust - Dmitry Kudryavtsev
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Rust 为 Astro 提供服务 - Dmitry Kudryavtsev
- en: 来源：[https://www.yieldcode.blog/post/serving-astro-with-rust/](https://www.yieldcode.blog/post/serving-astro-with-rust/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.yieldcode.blog/post/serving-astro-with-rust/](https://www.yieldcode.blog/post/serving-astro-with-rust/)
- en: 'As some of you might know, for the past few months, my free time is spent on
    [JustFax](https://justfax.online). I also published few blog posts about this
    project: [here](/post/building-a-webapp-in-rust/), [here](/post/webapp-localization-in-rust/),
    and [here](/post/rendering-emails-with-svelte/). Let’s try to milk this project
    some more, this time with Rust and Astro.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你们中的一些人可能知道的那样，过去几个月，我空闲时间都在 [JustFax](https://justfax.online) 上。我还发布了一些关于这个项目的博客文章：[这里](/post/building-a-webapp-in-rust/)，[这里](/post/webapp-localization-in-rust/)，以及
    [这里](/post/rendering-emails-with-svelte/)。让我们再尝试用 Rust 和 Astro 增加这个项目的价值。
- en: The entire website for JustFax ~~is~~ was fully server rendered. Like in the
    old times. You would hit a URL, and the server would respond with an HTML. Interactivity
    was handled by [htmx](https://htmx.org/) and a bunch of vanilla JavaScript.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 整个 JustFax 网站 ~~是~~ 曾完全采用服务器端渲染。就像古早时代一样。你输入一个 URL，服务器就会返回一个 HTML。交互性由 [htmx](https://htmx.org/)
    和一堆原生 JavaScript 处理。
- en: The problems with server side rendering
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器端渲染的问题
- en: Templates are hard to maintain
  id: totrans-split-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 维护模板很困难
- en: Firstly, let’s not confuse Server Side Rendering (SSR) and Server Side Generation
    (SSG). The former renders the HTML on demand per request, while the latter generates
    HTML files beforehand to be served by a server.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们不要混淆服务器端渲染（SSR）和服务器端生成（SSG）。前者根据请求即时渲染 HTML，而后者预先生成 HTML 文件以供服务器提供。
- en: I was using the [tera](https://docs.rs/tera/latest/tera/) templating engine.
    Tera works with a format similar to Jinja. Overall, the syntax is nice, and tera
    is great. I was even able to implement hot reloading of templates, so I could
    run the rust server and edit the HTML, without the need to restart the server.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了 [tera](https://docs.rs/tera/latest/tera/) 模板引擎。Tera 使用类似 Jinja 的格式。总体而言，语法很好，tera
    也很出色。我甚至能够实现模板的热重载，这样我可以运行 Rust 服务器并编辑 HTML，而无需重新启动服务器。
- en: 'However, as the project grew bigger, it became harder to maintain the HTML
    templates and, more importantly, the context I would pass to the templates. Templates
    need variables. Variables are passed from Rust to the tera engine by means of
    serialization (if I’m not mistaken via `serde_json`). In reality, they are completely
    detached from each other. And this brings me to the first issue of server side
    rendering: errors in rendering the templates are **run time**.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着项目规模的扩大，维护 HTML 模板和传递给模板的上下文变得越来越困难。模板需要变量。变量通过序列化（如果我没记错是通过 `serde_json`）从
    Rust 传递给 tera 引擎。实际上，它们完全脱离了彼此。这就带来了服务器端渲染的第一个问题：模板渲染中的运行时错误。
- en: This means that if I misspelled a variable, the template would fail to render.
    Refactoring code, and renaming variables—became a nightmare. I needed to check
    each page manually before committing to deploying a new version. I was considering
    switching to [askama](https://github.com/djc/askama), which is a type-safe, Jinja-like,
    compiled template engine. But eventually decided to generate all the HTML beforehand.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，如果我拼错了一个变量，模板将无法渲染。重构代码和重命名变量——变成了一场噩梦。在部署新版本之前，我需要手动检查每一页。我曾考虑过切换到 [askama](https://github.com/djc/askama)，这是一种类型安全、类似
    Jinja 的编译模板引擎。但最终决定预先生成所有的 HTML。
- en: 'In addition to that, Jinja, or at least the way it’s implemented in tera, is
    very limiting. I would end up defining variables that are used purely for HTML
    purposes, in Rust, because I wasn’t able to achieve the same inside a template.
    Examples include scenarios like: converting a vector of structs into JSON; and
    various translation shenanigans. This is in no way a criticism towards tera; tera
    is a great templating engine, and I would definitely use it again in the future
    (if askama won’t prove to be better). I never worked with Jinja or Django, so
    I assume these might be limitations of the templating language itself, rather
    than the tool.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Jinja，或者至少它在 tera 中的实现方式，非常有限。我最终会定义纯粹用于 HTML 目的的变量，因为在 Rust 中我无法在模板内部实现相同的功能。例如，将结构体的向量转换为
    JSON，以及各种翻译上的技巧。这绝不是对 tera 的批评；tera 是一个很棒的模板引擎，我未来肯定会再次使用它（如果 askama 证明不是更好的话）。我从未使用过
    Jinja 或 Django，因此我认为这些可能是模板语言本身的限制，而不是工具的限制。
- en: 'Oh, and one last annoyance. Jinja is poorly supported in vim. So I had to fight
    the editor with stupid errors. One great example is from this piece of code:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，还有一个让人讨厌的地方。在 vim 中，对 Jinja 的支持很差。所以我不得不与编辑器对抗愚蠢的错误。这段代码就是一个很好的例子：
- en: '[PRE0]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The LSP would yell at me for trying to re-declare `INITIAL_COUNTRY`.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: LSP 会因我试图重新声明 `INITIAL_COUNTRY` 而对我大声抱怨。
- en: Everything is a run-time problem
  id: totrans-split-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一切都是运行时问题
- en: With server side templates, everything becomes a run-time problem. Forgot to
    declare a variable? Run time errors. Extending a base template that does not exist?
    Run time errors.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用服务器端模板，一切都成了运行时问题。忘记声明一个变量？运行时错误。扩展一个不存在的基础模板？运行时错误。
- en: On a small website with 2–3 pages, it’s easy to check each page manually. But
    at some point it becomes too complicated, and I wish I could outsource this to
    some build step. Maybe compiled templates like askama would help here, but I haven’t
    tried them.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个有 2–3 页的小网站上，手动检查每一页很容易。但在某些时候，这变得太复杂了，我希望可以将这一步外包给某些构建步骤。也许像 askama 这样的编译模板会在这里有所帮助，但我还没有尝试过。
- en: In addition to that, maintaining SSR requires a lot of tools. Rust is amazing
    in run-time, but not that in compile-time. Removing tera and other crates that
    I used that helps with template rendering—improved the compile time of the project.
    Previously, it would take about 4 minutes to compile the rust code in CI. After
    removing tera, markdown related crates, and other crates used for formatting (for
    example phone number formatting)—I was able to reduce the compilation time to
    3 minutes, which might not sound like a lot, but this is a great improvement.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，维护 SSR 需要很多工具。Rust 在运行时很棒，但在编译时不太好。删除我使用的 tera 和其他用于模板渲染的 crate——提高了项目的编译时间。以前，在
    CI 中编译 Rust 代码大约需要 4 分钟。删除 tera、与 Markdown 相关的 crates 和其他用于格式化（例如电话号码格式化）的 crates
    后，我成功将编译时间减少到 3 分钟，听起来可能不算多，但这是一个很大的改进。
- en: In the end, if I look at it, the HTML was completely static. There was no need
    to re-render it for each request, and the dynamic parts were small enough to be
    able to generate them in the browser without incurring any performance penalty.
    I also learned the hard way that Rust is way behind JavaScript in terms of l10n
    and i18n. While it has great support for translations (I personally like [project
    fluent](https://projectfluent.org/) by Mozilla)—it has no crates to format dates/numbers/currencies.
    There are crates like [icu](https://crates.io/crates/icu) that are in development,
    that essentially tap into the Common Locale Data Repository ([I wrote about CLDR
    back in 2015](/post/a-different-approach-for-localizing-react-js-app/)). This
    would allow Rust to have the same capabilities as JavaScript has through the `Intl`
    API, but currently it’s still a work-in-progress.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，如果我仔细看，HTML 完全是静态的。无需为每个请求重新渲染它，动态部分足够小，可以在浏览器中生成而不会造成任何性能损失。我也深知 Rust
    在 l10n 和 i18n 方面远远落后于 JavaScript。虽然它对翻译有很好的支持（我个人喜欢 Mozilla 的 [project fluent](https://projectfluent.org/)）——但它没有用于格式化日期/数字/货币的
    crates。有一些像 [icu](https://crates.io/crates/icu) 这样的 crates 正在开发中，它们本质上是利用了通用区域数据存储库（我在
    2015 年写过关于 CLDR 的文章）[/post/a-different-approach-for-localizing-react-js-app/]。这将使
    Rust 可以通过 `Intl` API 具有与 JavaScript 相同的功能，但目前仍在进行中。
- en: And so, I decided to turn to my second favorite tool.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我决定转向我第二喜欢的工具。
- en: Hello Astro-naut
  id: totrans-split-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你好，宇航员
- en: I’m a big fan of Astro, and in fact this blog is powered by Astro. Astro, unlike
    other frameworks, does not force you to use a particular frontend framework, you
    can use vanilla JavaScript or TypeScript, or you can mix them all together. It’s
    fast enough to generate hundreds of pages. It comes with a lot of tools for websites
    like automatic sitemap generation, assets optimization and bundling, etc.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我是 Astro 的忠实粉丝，事实上，这个博客就是由 Astro 提供支持的。与其他框架不同，Astro 不强制你使用特定的前端框架，你可以使用原生 JavaScript
    或 TypeScript，或者混合使用它们。它足够快，可以生成数百个页面。它提供了许多网站工具，如自动生成站点地图、资源优化和打包等。
- en: Most of the issues I described above are also solved by Astro. Template data
    and representation, are connected, especially if you opt for TypeScript. It will
    be impossible to generate a page that includes a non-existing Astro component,
    for example. Astro comes with superb support for Markdown content collection,
    which makes it super easy to generate content. When I was using Rust, I had to
    sort-of reimplement what Astro does. It didn’t work well.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数我上面描述的问题也可以通过 Astro 解决。模板数据和表示形式是相互关联的，特别是如果您选择 TypeScript。例如，无法生成包含不存在的
    Astro 组件的页面。Astro 对 Markdown 内容收集提供了出色的支持，这使得生成内容非常容易。当我使用 Rust 时，我不得不重新实现 Astro
    的功能，但效果并不好。
- en: L10n and i18n are also solved with Astro. You can pick any translation library
    you want, including project fluent from Mozilla. And you have access to `Intl`
    for formatting numbers, dates, and currencies.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: L10n 和 i18n 也可以通过 Astro 解决。您可以选择任何您想要的翻译库，包括 Mozilla 的项目 fluent。而且，您可以使用 `Intl`
    格式化数字、日期和货币。
- en: The only problem with Astro is that it’s a static site generator. **Wait? What?!**
    Yes, I know I said that I wanted to switch to SSG from SSR, how come it’s a downside?
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: Astro 的唯一问题是它是一个静态站点生成器。**等等？什么？！** 是的，我知道我说过我想从 SSR 切换到 SSG，为什么这是一个缺点？
- en: Well, as I described in this blog post—[Web app localization in Rust](/post/webapp-localization-in-rust/)—I
    need a server in order to do locale negotiation. Before rendering the initial
    HTML, I need to query cookies and the `Accept-Language` header, and determine
    the preferred language of the visitor. This can be done with JavaScript, for example
    by using the `window.navigator.languages` property (which [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages)
    claims to be the same values as `Accept-Language` header). However, this would
    harm usability, as Google won’t be able to index the website correctly.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，正如我在这篇博文中描述的那样—[在 Rust 中的 Web 应用本地化](/post/webapp-localization-in-rust/)—我需要一个服务器来进行区域设置协商。在渲染初始
    HTML 之前，我需要查询 cookie 和 `Accept-Language` 头，并确定访问者的首选语言。例如，可以使用 JavaScript，比如使用
    `window.navigator.languages` 属性（[MDN](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages)
    中指出与 `Accept-Language` 头相同的值）。然而，这会影响可用性，因为 Google 将无法正确索引网站。
- en: Astro, does, however take care of this as well. If you decide to opt for `hybrid`
    or `server` output for your Astro website, you will gain access to `Astro.preferredLocale`
    and `Astro.preferredLocaleList` properties (as describe in the [Internalization
    article](https://docs.astro.build/en/guides/internationalization/#browser-language-detection)
    from Astro Docs). But opting in for `hybrid` or `server` outputs creates a problem.
    You are now locked into either using Netlify or Vercel edge functions (which has
    official Astro adapters), or go back to Node. Neither of them I wanted to do.
    I have my locale negotiation code in Rust, I want it to stay in Rust. In addition
    to that, the locale negotiation by Astro does not take into account the cookie
    that I set in order to avoid sending an English speaking German person to the
    German version of the website, even though he insisted for English interface,
    unlike Google is doing.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，Astro 也考虑到了这一点。如果您决定为您的 Astro 网站选择 `hybrid` 或 `server` 输出，您将可以访问 `Astro.preferredLocale`
    和 `Astro.preferredLocaleList` 属性（如 Astro 文档中的[国际化文章](https://docs.astro.build/en/guides/internationalization/#browser-language-detection)所述）。但选择
    `hybrid` 或 `server` 输出会带来问题。您现在必须选择使用 Netlify 或 Vercel 边缘函数（这些平台有官方的 Astro 适配器），或者回到
    Node。我都不想这样做。我有我的区域设置协商代码在 Rust 中，我希望它保持在 Rust 中。此外，Astro 的区域设置协商并不考虑我设置的 cookie，以避免将一个希望使用英文界面的德国人发送到网站的德语版本，尽管他坚持要英文界面，这与
    Google 的做法不同。
- en: And so, I was left with the only option, serve Astro website with Rust.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我只剩下一个选择，用 Rust 为 Astro 网站提供服务。
- en: Serving Astro website with Rust
  id: totrans-split-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用 Rust 为 Astro 网站提供服务
- en: Astro generates, by default, your entire website structure in the `dist` folder.
    HTML pages as well as additional resources will be there. All is left, is just
    to expose this folder to the web.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Astro 在 `dist` 文件夹中生成整个网站结构。HTML 页面以及其他资源都会在那里。现在只需要将这个文件夹暴露到网络即可。
- en: One approach I wanted to use, is to serve the website by [Caddy](https://caddyserver.com/).
    I already use Caddy as reverse-proxy for the Rust server, and Caddy is capable
    of serving folders. However, figuring out the correct handlers order for Caddy—made
    my cabesa hurt. You see, theoretically I could point `/` to `/` on Rust server;
    `/api` to `/api` on Rust server; `/en` to `/dist/en`; `/de` to `/dist/de`; etc.
    But what do I do with static resources like JavaScript, sitemap, robots.txt, etc?
    You see, it makes my head hurt. So this option was out of the window.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我想使用的一种方法是通过[Caddy](https://caddyserver.com/)来提供网站服务。我已经将Caddy作为Rust服务器的反向代理，并且Caddy能够服务文件夹。然而，弄清楚Caddy的正确处理程序顺序让我很头疼。理论上，我可以将`/`指向Rust服务器上的`/`；将`/api`指向Rust服务器上的`/api`；将`/en`指向`/dist/en`；将`/de`指向`/dist/de`；等等。但是像JavaScript、sitemap、robots.txt等静态资源怎么办呢？你看，这让我很头疼。所以这个选项被搁置了。
- en: Let’s now talk about Rust. I use [axum](https://github.com/tokio-rs/axum) as
    my web framework. Axum is capable of serving directories using the `ServeDir`
    service. You give it a path to a directory, and it will serve the files from there.
    So I have a regular axum route that handles the `/` url; route that handle `/api`
    url(s); and everything else is fallen back to `ServeDir`. This covers 99% of the
    files. The last 1% are 404 files. Astro will allow you to define `404.astro` for
    a custom 404 page, and services like Netlify or Vercel will be able to route to
    it, but not axum.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们谈谈Rust。我使用[axum](https://github.com/tokio-rs/axum)作为我的Web框架。Axum能够使用`ServeDir`服务来提供目录。你给它一个目录的路径，它就会从那里提供文件。因此，我有一个常规的axum路由处理`/`网址；一个处理`/api`网址的路由；而其他所有东西都会回退到`ServeDir`。这覆盖了99%的文件。最后的1%是404文件。Astro允许你为自定义404页面定义`404.astro`，并且像Netlify或Vercel这样的服务可以路由到它，但是axum不能。
- en: If axum fails to find a matching route for the request, nor it finds a static
    file inside the provided `ServeDir` path, you are able to implement a custom 404
    handler.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果axum无法找到匹配请求的路由，也找不到在提供的`ServeDir`路径中的静态文件，你可以实现一个自定义的404处理程序。
- en: '[PRE1]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Inside `handle_404` you can do all kinds of things. I do locale negotiation
    to decide which version of the 404 page to serve, but eventually it boils down
    to
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在`handle_404`中，你可以做各种事情。我做了本地化协商来决定要提供哪个版本的404页面，但最终归根结底是
- en: '[PRE2]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: While `path` is the path to `[en|de]/404/index.html`.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 而`path`是到`[en|de]/404/index.html`的路径。
- en: Another thing with Astro, is that it has a great asset management pipeline.
    Each static resource will be processed by Astro and a hashed name file will be
    put it `_astro` directory. Since the hash of the file represents the hashed content,
    if the file did not change, it means that it will have the same hash. And this
    means that `_astro` is a great directory to cache aggressively.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，关于Astro的另一点是它有一个很好的资产管理流水线。每个静态资源将通过Astro处理，并且将一个带哈希名的文件放在`_astro`目录下。因为文件的哈希表示了文件的内容，如果文件没有改变，那么它将拥有相同的哈希。这意味着`_astro`是一个很好的可以积极缓存的目录。
- en: I had to fight a bit with axum in order to understand how to send headers alongside
    `ServeDir` file, but eventually I was able to figure it out.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我不得不在axum中进行一些努力，以理解如何在`ServeDir`文件旁边发送头部，但最终我能够弄清楚它。
- en: '[PRE3]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This essentially uses the `ServeDir` service through the `oneshot` request,
    and based on the request `uri` it sets the cache headers for `_astro` folder.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是通过`oneshot`请求使用`ServeDir`服务，并根据请求的`uri`设置`_astro`文件夹的缓存头。
- en: That’s it. That’s the blog post.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。这就是这篇博客文章。
