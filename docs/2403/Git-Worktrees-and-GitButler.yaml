- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:35:09'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:35:09'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Git Worktrees and GitButler
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git工作树和GitButler
- en: 来源：[https://blog.gitbutler.com/git-worktrees/](https://blog.gitbutler.com/git-worktrees/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.gitbutler.com/git-worktrees/](https://blog.gitbutler.com/git-worktrees/)
- en: Last week, I gave a talk at DevWorld with more "[So You Think You Know Git](https://blog.gitbutler.com/git-tips-and-tricks/)"
    style tips. One of the things I covered in this new talk was `git worktree` and
    since I've heard it mentioned a lot lately, I thought it was time to do a little
    writeup explaining it.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 上周，我在DevWorld上做了一个演讲，涉及更多类似"[你以为你了解Git](https://blog.gitbutler.com/git-tips-and-tricks/)"风格的技巧。在这个新演讲中，我涵盖了`git
    worktree`的内容，因为最近听到它被提到很多次，我想是时候写一篇小文章来解释一下了。
- en: The "[worktree](https://git-scm.com/docs/git-worktree?ref=blog.gitbutler.com)"
    tool in Git helps you work on multiple branches at the same time.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '"[工作树](https://git-scm.com/docs/git-worktree?ref=blog.gitbutler.com)"工具在Git中帮助你同时处理多个分支。'
- en: Since GitButler solves the same basic problem, I'll take a minute to explain
    what `git worktree` does for those who haven't heard of it, and then also to compare
    it to how GitButler solves the same core issue.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于GitButler解决了相同的基本问题，我将花一分钟解释`git worktree`对于那些没有听说过它的人意味着什么，然后还要比较一下GitButler如何解决相同的核心问题。
- en: Simultaneous Branches
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 同时处理分支
- en: So, what is the core issue here? Basically, it's trying to do work on two topics
    in your code at the same time.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这里的核心问题是什么？基本上，就是试图同时处理代码中的两个主题。
- en: Let's take an example. Let's say you are working on a feature. Your boss interrupts
    you (🙄, bosses, right?) and says "we need this bug fixed". Or maybe you just notice
    the bug as you're working. Whatever it is, you need to switch contexts while in
    the middle of something.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举个例子。比如说你正在开发一个功能。你的老板打断你（🙄，老板，对吧？）并说“我们需要修复这个bug”。或者可能是在工作时注意到了bug。无论如何，你需要在进行某事的过程中切换上下文。
- en: Now you have a few options.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有几个选择。
- en: You can fix the bug and commit it into your feature branch and try to get them
    both deployed together.
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以修复bug并将其提交到你的功能分支，然后尝试一起部署它们。
- en: You can stash everything, create a new branch, switch to it, fix the bug, commit
    and push it, then switch back to what you were working on.
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以把所有内容藏起来，创建一个新分支，切换到它，修复bug，提交并推送，然后切换回你之前正在工作的内容。
- en: You *could* locally clone the repository to a new directory and work on the
    other branch there, then push it back into the main one and then push *from there*
    back upstream. 🙄
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你*可以*在本地克隆仓库到一个新目录中，在那里处理另一个分支，然后将其推送回主分支，再从*那里*向上游推送。 🙄
- en: Surely there's a better way!
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 肯定有更好的方法！
- en: Worktrees
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Worktrees
- en: This is the basic use case for `git worktree`. Worktrees allow you to have a
    separate working directory (and staging area) for each branch you're actively
    working on.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`git worktree`的基本用例。工作树允许你为每个正在积极工作的分支拥有单独的工作目录（和暂存区）。
- en: Let's say we're working on our project in the `my-project` directory and we
    decide that we want to work on a new branch called `bugfix-123`. We can run the
    `git worktree add` command and give it a directory to create and checkout that
    branch into.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在`my-project`目录中进行项目工作，并决定要创建一个名为`bugfix-123`的新分支。我们可以运行`git worktree add`命令，并提供一个目录来创建并检出该分支。
- en: '[PRE0]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now we have two directories that are linked. When we edit files in the `my-project-branches/bugfix-123`
    directory, it's on the `bugfix-123` branch.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两个链接的目录。当我们在`my-project-branches/bugfix-123`目录中编辑文件时，它位于`bugfix-123`分支上。
- en: Now, the cool thing is that both checkouts share the same core Git database.
    So if we commit in either of them, those commits on those branches are visible
    by *all* of them.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，很酷的一点是，这两个检出都共享同一个核心Git数据库。因此，如果我们在其中任何一个中提交，这些分支上的提交对*所有*都可见。
- en: '[PRE1]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This can work for lots of branches, and `git worktree` remembers where they
    all are for your project and what branches they''re all currently on:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这对许多分支都适用，而`git worktree`会记住你项目中它们的所有位置及其当前所在的分支：
- en: '[PRE2]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can remove ones you're not using anymore with `git worktree remove` or you
    can also just delete the directory and run `git worktree prune` to remove it from
    the list.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`git worktree remove`删除你不再使用的工作树，或者你也可以只删除目录并运行`git worktree prune`来将其从列表中删除。
- en: '[PRE3]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, there are some downsides to this approach too.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这种方法也有一些缺点。
- en: If you're using an editor like VS Code, you need a new window for each directory/branch.
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用像VS Code这样的编辑器，你需要为每个目录/分支打开一个新窗口。
- en: If you have any ignored files like build artifacts, you have to rebuild them
    for each worktree. This is less of an issue when you're just stashing or switching
    branches in one directory.
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您有任何被忽略的文件，如构建产物，您必须为每个工作树重新构建它们。当您仅在一个目录中进行存储或切换分支时，这就不是问题。
- en: The worktrees are separate, so you can easily create merge conflicts between
    them without knowing.
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作树是分开的，因此您可以在它们之间轻松地创建合并冲突，而无需知道具体情况。
- en: However, in some cases, worktrees can be a nice way to give yourself a new place
    to work in a new context without messing up the context you're currently in.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在某些情况下，工作树可能是一种不错的方式，让您在不混淆当前上下文的情况下在新上下文中工作。
- en: GitButler vs Worktrees
  id: totrans-split-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitButler vs Worktrees
- en: So how is this different from GitButler's virtual branches? They also provide
    a way for you to work on multiple branches at the same time, right?
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这与 GitButler 的虚拟分支有什么不同？它们也提供了一种同时在多个分支上工作的方式，对吧？
- en: Well, the big difference is that virtual branches use a *single* working directory
    for *all* the branches.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，主要的区别在于虚拟分支使用*单一*工作目录来处理*所有*分支。
- en: Let's take a very simple example. Let's say we want to add translations of our
    README into Spanish and French and we want to open a Pull Request for each one
    to be reviewed by different people at possibly different times.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个非常简单的例子。假设我们要为我们的 README 添加西班牙语和法语的翻译，并且我们希望为每一种语言打开一个 PR，以便由不同的人在可能不同的时间进行审查。
- en: How to do this in Worktrees
  id: totrans-split-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何在 Worktrees 中操作
- en: With worktrees, we could open a new worktree for each one, commit in each and
    push up.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用工作树，我们可以为每个新建一个工作树，然后在每个工作树中进行提交并推送。
- en: First, we create the two new worktrees.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建两个新的工作树。
- en: '[PRE4]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, we go into each directory, make the changes and commit them.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们进入每个目录，进行更改并提交它们。
- en: '[PRE5]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now if we go back to our main directory, we can see both branches there and
    can create PRs from them.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们回到主目录，我们可以看到那里有两个分支，并且可以从中创建 PR。
- en: '[PRE6]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How to do this in GitButler
  id: totrans-split-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何在 GitButler 中进行操作
- en: In GitButler, it's much simpler. You can simply edit both files, then drag them
    into separate branch lanes, commit and push them at the same time.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitButler 中，这简单得多。您可以简单地编辑两个文件，然后将它们拖放到不同的分支通道中，同时提交和推送它们。
- en: 'Let''s say we just edit the files:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们只是编辑这些文件：
- en: '[PRE7]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then we go to our GitButler UI and we see that an anonymous virtual branch has
    been automatically created, because it saw new changes. We can just drag one of
    the files into a new virtual branch lane, then commit and push both at the same
    time.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们转到 GitButler UI，看到已自动创建一个匿名虚拟分支，因为它检测到了新的更改。我们可以将其中一个文件拖放到一个新的虚拟分支通道中，然后同时提交和推送两个文件。
- en: Notice how much less friction this is. You don't have to create new branches
    or switch directories. It's a much faster and smoother way to handle this type
    of change management.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意看这里的摩擦力要少得多。您不必创建新分支或切换目录。这是处理这种类型变更管理的一种更快更顺畅的方式。
- en: How does this work, exactly?
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这究竟是如何工作的？
- en: In essence, we do a `git diff` to see everything that has been changed and then
    have our own mapping of which changes are owned by which branch. Then when you
    hit the "commit" button, we run a sort of `git apply` of those changes to what
    you started with.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，我们执行 `git diff` 查看所有已更改的内容，然后我们有自己的映射来确定哪些更改属于哪个分支。然后当您点击“提交”按钮时，我们对您开始的内容运行一种
    `git apply` 类型的应用。
- en: It's *sort of* like what `git add -p` does, except that we can keep doing it
    over and over and keep things separate.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点像 `git add -p` 所做的，不过我们可以一遍又一遍地做，保持事物分开。
- en: For instance, with the normal Git tooling, we could just add one of the READMEs
    here and commit and push that, but then doing the same for the second file would
    require us to reset and then add the other and then change the active branch and
    commit, etc. It's not simple.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用正常的 Git 工具，我们可以在这里添加一个 README 并提交和推送，但是为了第二个文件，我们需要重置然后添加另一个，然后更改活动分支并提交等等。这并不简单。
- en: One Working Directory to Rule them All
  id: totrans-split-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个工作目录统治它们所有
- en: So, there are advantages and disadvantages to both approaches, depending on
    what you want to do.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，根据您想要做什么，这两种方法各有优缺点。
- en: Since GitButler only has a single working directory, you *cannot* have two branches
    applied that have conflicting work. You can't have conflicts if you have one copy
    of each file.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 GitButler 只有一个单一的工作目录，您*无法*应用具有冲突工作的两个分支。如果每个文件只有一份副本，您就不会有冲突。
- en: This could be seen as an advantage or a limitation, but we find that it's quite
    nice. Essentially you're starting with the merged product and then extracting
    branches out of it.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能被视为优势或局限，但我们发现它相当不错。基本上，你从合并后的产品开始，然后从中提取分支。
- en: For instance, lets say that both the `french` and the `spanish` branches are
    eventually merged. It doesn't matter what order they're merged in, we know they
    will not only merge cleanly, but we know that when they do both get merged, what
    we'll end up with is the state of the working directory *when we started*.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设`french`和`spanish`分支最终被合并。合并的顺序无关紧要，我们知道它们不仅会干净地合并，而且知道它们合并后，我们最终得到的是开始时工作目录的状态。
- en: So, that's how worktrees and virtual branches approach the same basic problem
    in rather different ways. Hope this has been helpful!
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这就是工作树和虚拟分支以相当不同方式解决同一基本问题的方法。希望这对你有帮助！
