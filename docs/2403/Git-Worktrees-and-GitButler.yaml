- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:35:09'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Git Worktrees and GitButler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://blog.gitbutler.com/git-worktrees/](https://blog.gitbutler.com/git-worktrees/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Last week, I gave a talk at DevWorld with more "[So You Think You Know Git](https://blog.gitbutler.com/git-tips-and-tricks/)"
    style tips. One of the things I covered in this new talk was `git worktree` and
    since I've heard it mentioned a lot lately, I thought it was time to do a little
    writeup explaining it.
  prefs: []
  type: TYPE_NORMAL
- en: The "[worktree](https://git-scm.com/docs/git-worktree?ref=blog.gitbutler.com)"
    tool in Git helps you work on multiple branches at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Since GitButler solves the same basic problem, I'll take a minute to explain
    what `git worktree` does for those who haven't heard of it, and then also to compare
    it to how GitButler solves the same core issue.
  prefs: []
  type: TYPE_NORMAL
- en: Simultaneous Branches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, what is the core issue here? Basically, it's trying to do work on two topics
    in your code at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take an example. Let's say you are working on a feature. Your boss interrupts
    you (üôÑ, bosses, right?) and says "we need this bug fixed". Or maybe you just notice
    the bug as you're working. Whatever it is, you need to switch contexts while in
    the middle of something.
  prefs: []
  type: TYPE_NORMAL
- en: Now you have a few options.
  prefs: []
  type: TYPE_NORMAL
- en: You can fix the bug and commit it into your feature branch and try to get them
    both deployed together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can stash everything, create a new branch, switch to it, fix the bug, commit
    and push it, then switch back to what you were working on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You *could* locally clone the repository to a new directory and work on the
    other branch there, then push it back into the main one and then push *from there*
    back upstream. üôÑ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Surely there's a better way!
  prefs: []
  type: TYPE_NORMAL
- en: Worktrees
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the basic use case for `git worktree`. Worktrees allow you to have a
    separate working directory (and staging area) for each branch you're actively
    working on.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say we're working on our project in the `my-project` directory and we
    decide that we want to work on a new branch called `bugfix-123`. We can run the
    `git worktree add` command and give it a directory to create and checkout that
    branch into.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now we have two directories that are linked. When we edit files in the `my-project-branches/bugfix-123`
    directory, it's on the `bugfix-123` branch.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the cool thing is that both checkouts share the same core Git database.
    So if we commit in either of them, those commits on those branches are visible
    by *all* of them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This can work for lots of branches, and `git worktree` remembers where they
    all are for your project and what branches they''re all currently on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can remove ones you're not using anymore with `git worktree remove` or you
    can also just delete the directory and run `git worktree prune` to remove it from
    the list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, there are some downsides to this approach too.
  prefs: []
  type: TYPE_NORMAL
- en: If you're using an editor like VS Code, you need a new window for each directory/branch.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have any ignored files like build artifacts, you have to rebuild them
    for each worktree. This is less of an issue when you're just stashing or switching
    branches in one directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The worktrees are separate, so you can easily create merge conflicts between
    them without knowing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, in some cases, worktrees can be a nice way to give yourself a new place
    to work in a new context without messing up the context you're currently in.
  prefs: []
  type: TYPE_NORMAL
- en: GitButler vs Worktrees
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So how is this different from GitButler's virtual branches? They also provide
    a way for you to work on multiple branches at the same time, right?
  prefs: []
  type: TYPE_NORMAL
- en: Well, the big difference is that virtual branches use a *single* working directory
    for *all* the branches.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a very simple example. Let's say we want to add translations of our
    README into Spanish and French and we want to open a Pull Request for each one
    to be reviewed by different people at possibly different times.
  prefs: []
  type: TYPE_NORMAL
- en: How to do this in Worktrees
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With worktrees, we could open a new worktree for each one, commit in each and
    push up.
  prefs: []
  type: TYPE_NORMAL
- en: First, we create the two new worktrees.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, we go into each directory, make the changes and commit them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now if we go back to our main directory, we can see both branches there and
    can create PRs from them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How to do this in GitButler
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In GitButler, it's much simpler. You can simply edit both files, then drag them
    into separate branch lanes, commit and push them at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we just edit the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Then we go to our GitButler UI and we see that an anonymous virtual branch has
    been automatically created, because it saw new changes. We can just drag one of
    the files into a new virtual branch lane, then commit and push both at the same
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Notice how much less friction this is. You don't have to create new branches
    or switch directories. It's a much faster and smoother way to handle this type
    of change management.
  prefs: []
  type: TYPE_NORMAL
- en: How does this work, exactly?
  prefs: []
  type: TYPE_NORMAL
- en: In essence, we do a `git diff` to see everything that has been changed and then
    have our own mapping of which changes are owned by which branch. Then when you
    hit the "commit" button, we run a sort of `git apply` of those changes to what
    you started with.
  prefs: []
  type: TYPE_NORMAL
- en: It's *sort of* like what `git add -p` does, except that we can keep doing it
    over and over and keep things separate.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, with the normal Git tooling, we could just add one of the READMEs
    here and commit and push that, but then doing the same for the second file would
    require us to reset and then add the other and then change the active branch and
    commit, etc. It's not simple.
  prefs: []
  type: TYPE_NORMAL
- en: One Working Directory to Rule them All
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, there are advantages and disadvantages to both approaches, depending on
    what you want to do.
  prefs: []
  type: TYPE_NORMAL
- en: Since GitButler only has a single working directory, you *cannot* have two branches
    applied that have conflicting work. You can't have conflicts if you have one copy
    of each file.
  prefs: []
  type: TYPE_NORMAL
- en: This could be seen as an advantage or a limitation, but we find that it's quite
    nice. Essentially you're starting with the merged product and then extracting
    branches out of it.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, lets say that both the `french` and the `spanish` branches are
    eventually merged. It doesn't matter what order they're merged in, we know they
    will not only merge cleanly, but we know that when they do both get merged, what
    we'll end up with is the state of the working directory *when we started*.
  prefs: []
  type: TYPE_NORMAL
- en: So, that's how worktrees and virtual branches approach the same basic problem
    in rather different ways. Hope this has been helpful!
  prefs: []
  type: TYPE_NORMAL
