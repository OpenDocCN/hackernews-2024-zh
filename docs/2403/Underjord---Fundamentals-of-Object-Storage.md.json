["```\n defp deps do\n    [\n      {:ex_aws, \"~> 2.5\"},\n      {:ex_aws_s3, \"~> 2.5\"},\n      {:hackney, \"~> 1.9\"},\n      {:sweet_xml, \"~> 0.7\"},\n      {:jason, \"~> 1.4\"}\n    ]\n  end\n```", "```\nimport Config\n\nconfig :ex_aws, :s3,\n  scheme: \"https://\",\n  host: \"fly.storage.tigris.dev\",\n  port: 443\n```", "```\ndefmodule Tigris do\n  alias ExAws.S3\n\n  defp bucket!, do: System.fetch_env!(\"BUCKET_NAME\")\nend\n```", "```\n#..\n  def list!(prefix \\\\ \"\") do\n    bucket!()\n    |> S3.list_objects(prefix: prefix)\n    |> ExAws.request!()\n    |> then(fn %{body: %{contents: contents}} ->\n      contents\n    end)\n  end\n#..\n```", "```\niex(1)> Tigris.list!()\n[]\n```", "```\n# ..\n  def put!(key, data) do\n    bucket!()\n    |> S3.put_object(key, data)\n    |> ExAws.request!()\n\n    :ok\n  end\n\n  def get(key) do\n    result =\n      bucket!()\n      |> S3.get_object(key)\n      |> ExAws.request()\n\n    case result do\n      {:ok, %{body: body}} -> body\n      {:error, {:http_error, 404, _}} -> nil\n      {:error, error} -> {:error, error}\n    end\n  end\n# ..\n```", "```\n# ..\n  def put_tons!(kv) do\n    kv\n    |> Task.async_stream(fn {key, value} ->\n      IO.puts(key)\n      put!(key, value)\n    end)\n    |> Stream.run()\n  end\n# ..\n```", "```\niex(1)> kv = for d <- 1..100, f <- 1..100, into: %{}, do: {\"dir-#{d}/file-#{f}.txt\", \"#{d}  #{f}\"}\n# snip\niex(2)> Tigris.put_tons!(kv)\n```", "```\n# ..\n  def exterminate! do\n    stream =\n      bucket!()\n      |> S3.list_objects()\n      |> ExAws.stream!()\n      |> Stream.map(& &1.key)\n\n    S3.delete_all_objects(bucket!(), stream) |> ExAws.request()\n\n    :exterminated\n  end\n# ..\n```", "```\n# ..\n  def presign_get(key) do\n    :s3\n    |> ExAws.Config.new([])\n    |> S3.presigned_url(:get, bucket!(), key, [])\n  end\n# ..\n```", "```\n# ..\n  def put_file!(key, from_filepath) do\n    from_filepath\n    |> S3.Upload.stream_file()\n    |> Stream.map(fn chunk ->\n      IO.puts(\"uploading...\")\n      chunk\n    end)\n    |> S3.upload(bucket!(), key)\n    |> ExAws.request!()\n  end\n# ..\n```", "```\n# ..\n  def get(key, range \\\\ nil) do\n    opts =\n      if range do\n        [range: \"bytes=#{range}\"]\n      else\n        []\n      end\n\n    result =\n      bucket!()\n      |> S3.get_object(key, opts)\n      |> ExAws.request()\n\n    case result do\n      {:ok, %{body: body}} -> body\n      {:error, {:http_error, 404, _}} -> nil\n      {:error, error} -> {:error, error}\n    end\n  end\n# ..\n```"]