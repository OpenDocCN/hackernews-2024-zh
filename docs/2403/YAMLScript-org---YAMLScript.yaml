- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:00:12'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: YAMLScript.org | YAMLScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://yamlscript.org/](https://yamlscript.org/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: YAMLScript — Program in YAML
  prefs: []
  type: TYPE_NORMAL
- en: '**YAMLScript is a new YAML Loader** that can add "Super Powers" to your plain
    old YAML config files.'
  prefs: []
  type: TYPE_NORMAL
- en: YAMLScript intends to provide a loader library for every programming language
    that uses YAML. Currently we have working libraries for [Clojure](https://clojars.org/org.yamlscript/clj-yamlscript),
    [Java](https://clojars.org/org.yamlscript/yamlscript), [NodeJS](https://www.npmjs.com/package/@yaml/yamlscript),
    [Perl](https://metacpan.org/dist/YAMLScript/view/lib/YAMLScript.pod), [Python](https://pypi.org/project/yamlscript/),
    [Raku](https://raku.land/zef:ingy/YAMLScript), [Ruby](https://rubygems.org/search?query=yamlscript)
    and [Rust](https://crates.io/crates/yamlscript).
  prefs: []
  type: TYPE_NORMAL
- en: By using YAMLScript as your YAML loader, You can dynamically include data from
    other data files (YAML, JSON, XML, CSV, etc), pull data in from the web or even
    from a database. You can filter, map, merge, reduce, generate, concatenate, interpolate
    and manipulate your data to your heart's content.
  prefs: []
  type: TYPE_NORMAL
- en: If you've ever wanted more from your YAML files, YAMLScript has you covered.
    You can easily mix logic into your data files at any point.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, if you just want a rock solid YAML 1.2 loader (without any
    code evaluation magic) that works the same in any programming language, you should
    also give YAMLScript a try.
  prefs: []
  type: TYPE_NORMAL
- en: All valid [YAML 1.2 Core Schema](https://yaml.org/spec/1.2.2/#103-core-schema)
    files are also valid YAMLScript files! That's pretty much any YAML config file
    you already have.
  prefs: []
  type: TYPE_NORMAL
- en: Without the special `!yamlscript/v0` tag at the top, your YAMLScript loader
    will load any existing YAML (or JSON) just as one would expect a normal YAML loader
    to do.
  prefs: []
  type: TYPE_NORMAL
- en: Later you can add the special tag and take your YAML capabilities to a whole
    new level!
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of using YAMLScript in a YAML file called `file.yaml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And these other files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'From the command line, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'By default YAMLScript outputs JSON, but it can also output YAML by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get the same result from a programming language like Python by using
    its YAMLScript loader library. Here''s a CLI one liner to do the same thing in
    Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**YAMLScript is also a new**, complete, full featured, general purpose, functional
    and dynamic **programming language** whose syntax is encoded in YAML. YAMLScript
    can be used for writing new software applications and libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of a YAMLScript program called `99-bottles.ys`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can run this program from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'YAMLScript can compile programs to native binary executables. It''s as simple
    as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: That's pretty fast!
  prefs: []
  type: TYPE_NORMAL
- en: 'The YAMLScript language has all the things you expect from a modern programming
    language including:'
  prefs: []
  type: TYPE_NORMAL
- en: Using builtin and third party libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining your own namespaces and functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the standard data types and structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard libraries with hundreds of battle tested functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reasonable performance on par with common dynamic languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing `ys` - The YAMLScript Command Line Tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ys` command line tool is the easiest way to get started with YAMLScript.
    It's currently available on Linux and macOS for both Intel and ARM.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can try `ys` out temporarily (for the duration of your shell session) by
    running this command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will install `ys` in a temporary directory and add it to the `PATH` environment
    variable of your current shell session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Or you can install the [latest release](https://github.com/yaml/yamlscript/releases)
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that `~/.local/bin` is in your `PATH` environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install elsewhere or install a specific version, set the `PREFIX` and/or
    `VERSION` environment variables to the desired values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'NOTE: The default `PREFIX` is `~/.local` (or `/usr/local` if you run the command
    as `root`).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You can also install `ys` from source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'NOTE: The pre-built binaries currently fail on some older kernels. If you have
    trouble with the pre-built binaries, try building from source.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The install process has the very minimal dependencies of `git`, `make`, `curl`,
    and `bash`. (The `libz-dev` package is also required on Linux.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Test your new `ys` installation by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Installing a YAMLScript Library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: YAMLScript can be installed as a YAML loader library (module) in several programming
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far there are libraries in these languages: [Clojure](https://clojars.org/org.yamlscript/clj-yamlscript),
    [Java](https://clojars.org/org.yamlscript/yamlscript), [NodeJS](https://www.npmjs.com/package/@yaml/yamlscript),
    [Perl](https://metacpan.org/dist/YAMLScript/view/lib/YAMLScript.pod), [Python](https://pypi.org/project/yamlscript/),
    [Raku](https://raku.land/zef:ingy/YAMLScript), [Ruby](https://rubygems.org/search?query=yamlscript)
    and [Rust](https://crates.io/crates/yamlscript).'
  prefs: []
  type: TYPE_NORMAL
- en: Several more are in the works, and the goal is to get it to every language where
    YAML is used.
  prefs: []
  type: TYPE_NORMAL
- en: Currently to install a YAMLScript library you need to install both the language
    library and the matching version of `libyamlscript.so`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Python you would do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: For some other language, use that language's library installer. Just make sure
    the versions match for the library and libyamlscript.
  prefs: []
  type: TYPE_NORMAL
- en: YAMLScript Language Design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: YAMLScript code compiles to Clojure code and then is evaluated by a Clojure
    runtime native binary engine. This means that YAMLScript is a very complete language
    from the get-go.
  prefs: []
  type: TYPE_NORMAL
- en: 'NOTE: To see the generated Clojure code for any YAMLScript code just use the
    `-c` (`--compile`) flag for `ys`:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: Clojure is a Lisp dialect that runs on the JVM, however YAMLScript is not run
    on the JVM. No Java or JVM installation is used to run (or build) YAMLScript programs.
  prefs: []
  type: TYPE_NORMAL
- en: The YAMLScript compiler and runtime interpreter is written in Clojure and then
    compiled to a native machine code binary using [GraalVM](https://www.graalvm.org/)'s
    [native-image](https://www.graalvm.org/22.0/reference-manual/native-image/) compiler.
    It is standalone and quite fast.
  prefs: []
  type: TYPE_NORMAL
- en: It is also compiled into a native shared library that can be embedded into almost
    any programming language. YAMLScript intends to ship language bindings for (at
    least) 42 popular programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: YAMLScript syntax uses a combination of YAML structure and Clojure Lisp code
    syntaxes combined together. The code parts have syntax variants that make it feel
    more like Python or Ruby than a Lisp.
  prefs: []
  type: TYPE_NORMAL
- en: How a YAMLScript program is syntactically styled is very much up to the programmer.
    She can go **Full Lisp** or **Full YAML**, but most likely using a combination
    of the two will end up reading the best.
  prefs: []
  type: TYPE_NORMAL
- en: Status
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: YAMLScript is already a working programming language but it does not yet have
    a stable `v0` API release version. In other words, you can use it now but some
    things *might* change.
  prefs: []
  type: TYPE_NORMAL
- en: A stable release of YAMLScript `v0` is expected in Q2 of 2024.
  prefs: []
  type: TYPE_NORMAL
- en: Once `v0` is announced stable, its API will remain backwards compatible for
    its lifetime. That is to say, any files containing `!yamlscript/v0` will always
    continue to work the same.
  prefs: []
  type: TYPE_NORMAL
- en: YAMLScript Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
