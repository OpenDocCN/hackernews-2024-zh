- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:46:03'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:46:03'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: How to Lose Control of your Shell - by Thorsten Ball
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何失去对你的 shell 控制权 - 作者：Thorsten Ball
- en: 来源：[https://registerspill.thorstenball.com/p/how-to-lose-control-of-your-shell](https://registerspill.thorstenball.com/p/how-to-lose-control-of-your-shell)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://registerspill.thorstenball.com/p/how-to-lose-control-of-your-shell](https://registerspill.thorstenball.com/p/how-to-lose-control-of-your-shell)
- en: A few weeks ago I was hacking on language server support in Zed, trying to get
    Zed to detect when a given language server binary, such as `gopls`, is already
    present in `$PATH`. If so, it should use that instead of downloading a new binary.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 几周前，我正在 Zed 中开发语言服务器支持，试图让 Zed 能够检测给定语言服务器二进制文件（如 `gopls`）是否已经存在于 `$PATH` 中。如果是，它应该使用该二进制文件，而不是下载一个新的二进制文件。
- en: 'The challenge: `$PATH` is often dynamically modified by tools such as `direnv`,
    `asdf`, `mise` and others, which allow you to set a specific `$PATH` in a given
    folder. (Why do these tools do that? Because it gives you the ability to, say,
    prepend `./my_custom_binaries` to `$PATH` when you’re in `my-cool-project`.) So
    we can’t just use the `$PATH` associated with the Zed process, we need the `$PATH`
    as it is when you `cd` into your project directory.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 挑战：`$PATH` 经常被工具如 `direnv`、`asdf`、`mise` 等动态修改，这些工具允许你在特定文件夹中设置特定的 `$PATH`。（为什么这些工具这么做呢？因为它让你有能力在你进入
    `my-cool-project` 时，比如说在 `$PATH` 前面加上 `./my_custom_binaries`。）所以我们不能仅仅使用 Zed 进程关联的
    `$PATH`，我们需要在你 `cd` 到项目目录时的 `$PATH`。
- en: Easy, I thought. Just launch a `$SHELL`, `cd` into the project to trigger `direnv`
    and whathaveyou, run `env`, store the environment, pick out `$PATH`, find binaries
    in there.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 简单，我想。只需启动一个 `$SHELL`，`cd` 到项目目录以触发 `direnv` 和其他操作，运行 `env`，保存环境变量，提取出 `$PATH`，在其中找到二进制文件。
- en: 'And easy it was. Here’s some of the code, the part that launches `$SHELL`,
    `cd`s and gets the `env`:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么简单。这里是部分代码，启动 `$SHELL`，`cd` 并获取 `env` 的部分：
- en: '[PRE0]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Except for one thing: after starting a Zed instance in my terminal that executed
    this function, I could no longer kill Zed by hitting `Ctrl-C`.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了一件事：在我的终端中启动一个执行此函数的 Zed 实例后，我再也无法通过按 `Ctrl-C` 来终止 Zed 了。
- en: What?
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 什么？
- en: I could spam the terminal with `^C` and nothing happened. Lines and lines of
    desperate `^C`s that never hear their own echo.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以用 `^C` 塞满终端，却什么也没有发生。绝望的 `^C` 行和行，从未听到它们自己的回声。
- en: How? Why? … What?
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如何？为什么？…… 什么？
- en: After saying “What?” 20 times and hitting `Ctrl-c` even more, I asked [Piotr](https://zed.dev/team#piotr-osiewicz)
    for help, because I wasn’t 100% confident in how Rust spawns processes and he’s
    a Rust wizard. What I did know was that there would have to be `fork` and `exec`
    syscalls somewhere inside `std::process::Command` but I wasn’t sure whether Rust
    doesn’t do something clever with the signal handlers or has default signal handlers
    setup that mess with `Ctrl-c`. Because `Ctrl-c`  *should* result in an [interrupt
    signal being sent](https://en.wikipedia.org/wiki/Signal_(IPC)#Sending_signals)
    to the processes which should cause it to terminate, but clearly that stopped
    working.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 说了“什么？” 20 次，按了 `Ctrl-C` 更多次后，我向 [Piotr](https://zed.dev/team#piotr-osiewicz)
    寻求帮助，因为我对 Rust 如何生成进程不是百分之百的信心，而他是 Rust 的高手。我知道的是，在 `std::process::Command` 内必然存在
    `fork` 和 `exec` 系统调用，但我不确定 Rust 是否会在信号处理程序上做些聪明的事情，或者是否设置了默认的信号处理程序来干扰 `Ctrl-C`。因为
    `Ctrl-C` *应该* 导致发送中断信号到进程，从而导致其终止，但显然这种方式停止工作了。
- en: We started to poke at all kinds of things to test all kinds of hypotheses, as
    outlandish as they might be.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始探讨各种事情，测试各种可能的假设，尽管它们可能有些不可思议。
- en: Are we *sure* that the shell is not running anymore? Yes, we are, because `.output()`
    up there only returns once the command has finished running.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确定了吗，shell 真的不再运行了吗？是的，因为上面的 `.output()` 仅在命令运行完成后才返回。
- en: Is this about `cd`? Do `direnv` or `asdf` or other tools fire some hooks that
    take control of the terminal? No, turns out when we just run `/usr/bin/env -0;`
    without `cd` it also takes control over the shell.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这和 `cd` 有关吗？ `direnv` 或 `asdf` 或其他工具是否触发了一些控制终端的钩子？不，结果表明，即使我们只运行 `/usr/bin/env
    -0;` 而没有 `cd`，它也会控制住终端。
- en: 'So is it the `-0` that we pass to `env`? It shouldn’t be, clearly, because
    that’s just formatting. But: desperate times breed desparate debugging attempts.
    So we tried it and it wasn’t `-0` either.'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所以是我们传递给 `env` 的 `-0` 引起了这个问题吗？不应该，显然不是，因为那只是格式化。但：绝望的时候会引发绝望的调试尝试。所以我们尝试了一下，结果不是
    `-0` 的问题。
- en: Wait, is it `env`? Does it do something weird with my terminal? Huh.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，是 `env` 吗？它是否对我的终端做了一些奇怪的事情？哼。
- en: So we changed the `command` from
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们把 `command` 从
- en: '[PRE1]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: to
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: to
- en: '[PRE2]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: … and guess what? `Ctrl-c` worked again.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '... 猜猜看？`Ctrl-c`又恢复工作了。'
- en: What?
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 什么？
- en: Okay, another attempt. What if we do *both*?
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，再试一次。如果我们*两者*都做呢？
- en: '[PRE3]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That *also* worked. WHAT!
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 那个*也*奏效了。什么！
- en: Okay, wait a second… my gut is telling me something. `/usr/bin/env` isn’t a
    shell built-in, is it? But `echo` is. Is that a clue?
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，等一下... 我的直觉告诉我点什么。`/usr/bin/env`不是一个内置的shell命令，对吧？但`echo`是。这是一个线索吗？
- en: 'Let’s try this one:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试这个：
- en: '[PRE4]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Good old `ls`. Probably the command I’ve ran the most in my life. It’s always
    there when I need it and on every machine I gain access to I immediately run `ls`
    just to see that it works. I’d trust `ls` with my life.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 那个老牌的`ls`。可能是我一生中运行得最多的命令。每当我需要它的时候，无论我访问哪台机器，我都会立即运行`ls`来确认它能正常工作。我可以用我的生命来信赖`ls`。
- en: 'And yet: after running `ls` in that subshell, `Ctrl-c` stopped working. Et
    tu, `ls`?'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而：在那个子shell中运行`ls`后，`Ctrl-c`停止工作了。连你也，`ls`吗？
- en: 'Next hypothesis: is it something in Zed? Do we setup some signal handlers?
    Let’s find out. We copied the function to a new, bare-bones Rust project, ran
    it and… it reproduced. `Ctrl-c` stopped working in that project too.'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个假设：是Zed里面的问题吗？我们需要设置一些信号处理程序吗？让我们找出来。我们把这个函数复制到一个新的、最简单的Rust项目中运行，结果... 它也复现了。在那个项目中`Ctrl-c`也停止工作了。
- en: Okay, is it Rust then? I rewrote the function to Go and in Go too `Ctrl-c` lost
    control.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，难道是Rust的问题吗？我用Go重写了这个函数，在Go中`Ctrl-c`也失去了控制。
- en: 'At this point we had spent nearly 2 hours on this and couldn’t figure it out.
    But we did have a workaround:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一步，我们已经花了将近2个小时，还是解决不了。但我们确实找到了一个解决方法：
- en: '[PRE5]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`exit` is a built-in in all the different shells, so it’s safe to run and it
    fixes the problem. Okay, fair enough. We slapped one hell of a comment above that
    line to let the next person to come along know that the `exit 0` is now load-bearing
    and moved on.'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`exit`在所有不同的shell中都是内置命令，所以可以安全地运行并且修复了问题。好的，公平。我们在那行上方加了一行非常重要的注释，让下一个遇到这个问题的人知道`exit
    0`现在是有负载的，然后继续。'
- en: But this puzzle got to me. I asked [fellow shell-nerds](https://twitter.com/thorstenball/status/1760693619164393907)
    whether they know what’s happening but no one had an answer ready. So in my mornings
    I started to investigate.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但这个难题困扰着我。我问了一些[shell爱好者](https://twitter.com/thorstenball/status/1760693619164393907)，是否知道发生了什么，但没有人有准备好的答案。所以在早晨，我开始调查。
- en: 'I setup a [repository](https://github.com/mrnugget/strange-subshell) in which
    a small Rust program reproduced the problem: it spawns a shell process, waits
    for it to exit, then idles for 5 seconds so I can test whether `Ctrl-c` still
    works. The hunt was on.'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我在一个[存储库](https://github.com/mrnugget/strange-subshell)中设置了一个小的Rust程序，重现了这个问题：它生成一个shell进程，等待它退出，然后空闲5秒，这样我就可以测试`Ctrl-c`是否仍然起作用。这是一场追踪之旅。
- en: 'The first big light bulb moment came when I realized that I don’t have to send
    a signal via `Ctrl-c`: I can use the `kill` command. And, alas, it’s *not* the
    signal handling that’s borked! When I used `kill -INT` the signal arrived and
    the process stopped. It’s not that my process doesn’t react to signals anymore,
    but rather that `Ctrl-c` doesn’t deliver the right signals after launching the
    shell process.'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个重大的灵光乍现时刻是当我意识到我不必通过`Ctrl-c`发送信号：我可以使用`kill`命令。然后，啊，问题并不在于信号处理出了问题！当我使用`kill
    -INT`时，信号传递并且进程停止了。问题并不是我的进程不再响应信号，而是在启动shell进程后，`Ctrl-c`没有传递正确的信号。
- en: 'Next attempt: is the terminal stated borked after launching the shell? Okay,
    so something about the terminal state. [Someone in the tweet replies](https://twitter.com/hugelgupf/status/1760704715111944347)
    did point me to `stty`, which lets you set options on your terminal device, such
    as the baud rate (yes) and other things. I modified my program to run `stty -a`
    before and after the shell process. No luck: no changes in the output.'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 下一次尝试：启动shell后，终端状态是否出错？嗯，应该是终端状态的问题。[推特回复中的某人](https://twitter.com/hugelgupf/status/1760704715111944347)指向了`stty`，它可以让你设置终端设备的选项，如波特率（是的）和其他选项。我修改了我的程序，在shell进程之前和之后运行了`stty
    -a`。没用：输出没有变化。
- en: Desperate, I also used [Ghostty’s terminal inspector](https://mitchellh.com/writing/ghostty-devlog-005)
    to see whether some state changes in the terminal that results in `Ctl-c` going
    up in smoke. But no luck there either.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 绝望之际，我还使用了[Ghostty的终端检查工具](https://mitchellh.com/writing/ghostty-devlog-005)来查看终端中是否有某些状态改变导致`Ctrl-c`失效。但也没有运气。
- en: 'After days of going back and forth on this with ChatGPT (which I [wrote about
    the last time](https://registerspill.thorstenball.com/p/how-i-use-ai)) it finally
    gave me a clue:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 经过与ChatGPT反复讨论数天后（我[上次写到过](https://registerspill.thorstenball.com/p/how-i-use-ai)），它终于给了我一个线索：
- en: The spawned shell inherits the terminal (TTY) control, and since it’s an interactive
    shell (-i flag), it sets itself as the foreground process group leader for the
    terminal. This changes how signals, especially SIGINT generated by Ctrl-C, are
    handled.
  id: totrans-split-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 生成的 shell 继承了终端（TTY）控制权，并且因为是交互式 shell（-i 标志），它将自己设定为终端的前台进程组组长。这改变了信号的处理方式，特别是由
    Ctrl-C 生成的 SIGINT 信号的处理。
- en: 'Huh. Foreground process group leader. Interesting. Hmmm. Here’s what [Advanced
    Programming in the Unix Environment (APUE)](https://en.wikipedia.org/wiki/Advanced_Programming_in_the_Unix_Environment),
    which I pulled out today while writing this, says on process groups:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 哦。前台进程组组长。有意思。嗯。这里是《Unix 环境高级编程》（APUE），我在写这篇文章时找出来的，关于进程组的内容：
- en: 'A process group is a collection of one or more processes, usually associated
    with the same job (job control is discussed in Section 9.8), that can receive
    signals from the same terminal. Each process group has a unique process group
    ID. Process group IDs are similar to process IDs: they are positive integers and
    can be stored in a `pid_t` data type. The function `getpgrp` returns the process
    group ID of the calling process.'
  id: totrans-split-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 进程组是一个或多个进程的集合，通常与同一作业相关联（作业控制在第 9.8 节中讨论），它们可以从同一终端接收信号。每个进程组都有一个唯一的进程组 ID。进程组
    ID 类似于进程 ID：它们是正整数，并且可以存储在 `pid_t` 数据类型中。函数 `getpgrp` 返回调用进程的进程组 ID。
- en: 'The important part: “that can receive signals from the same terminal.”'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的部分是：“它们可以从同一终端接收信号。”
- en: 'It’s been a while since I last looked up something in a physical book. Pictured:
    Advanced Programming in the Unix Environment. A fantastic book.'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有一段时间没有在实体书中查找信息了。图片：《Unix 环境高级编程》。一本绝佳的书。
- en: 'APUE has more clues:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: APUE 给出了更多线索：
- en: It is possible for a process group leader to create a process group, create
    processes in the group, and then terminate.
  id: totrans-split-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 进程组领导者可以创建一个进程组，创建组内的进程，然后终止。
- en: So is that what happens? The shell spawns, claims it’s the process group leader
    when it doesn’t run a built-in command, exits, and then doesn’t restore the previous
    process group leader?
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 那么就是这样发生的吗？shell 生成，声称它是进程组领导者，当它不运行内建命令时退出，然后不恢复之前的进程组领导者吗？
- en: 'It felt like I was getting closer. So I kept asking ChatGPT how to confirm
    this and it led me to `tcgetprg`:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得我离真相越来越近了。所以我继续询问 ChatGPT 如何确认这一点，并它引导我到了 `tcgetprg`：
- en: The function `tcgetpgrp()` returns the process group ID of the foreground process
    group on the terminal associated to `fd`, which must be the controlling terminal
    of the calling process.
  id: totrans-split-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 函数 `tcgetpgrp()` 返回与调用进程的控制终端（fd 必须是调用进程的控制终端）关联的前台进程组的进程组 ID。
- en: 'Okay, now we’re talking, this sounds like it could lead us somewhere. I asked
    ChatGPT to generate me some Rust code for that `tcgetpgrp` call:'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们开始谈论，这听起来可能会给我们带来一些线索。我让 ChatGPT 为我生成了一些 Rust 代码来调用 `tcgetpgrp`：
- en: '[PRE6]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'I plugged that into my program so it would print the process group ID associated
    with STDIN (file descriptor `0`) before and after the `$SHELL` process has run.
    This is what it printed:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我将它插入到我的程序中，以便在 `$SHELL` 进程运行之前和之后打印与 STDIN（文件描述符 `0`）关联的进程组 ID。这是它打印出来的内容：
- en: '[PRE7]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Well, hello there! This certainly looks like the murder weapon. How can I confirm
    that it *is* what kills my `Ctrl-c` though? Is there some way I could stop the
    shell from taking over as process group leader? ChatGPT said that I could use
    the `pre_exec` hook on `std::process::Command` to put the shell process in a new,
    separate process session, which will put it in a new process group, which in turn
    means it won’t be able to become the process group leader of the group associated
    with STDIN. Like this:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，你好！这看起来确实像是凶器。但我怎样确认它 *确实* 是导致我的 `Ctrl-c` 失效的东西？有没有办法我可以阻止 shell 接管进程组领导者的角色？ChatGPT
    说我可以在 `std::process::Command` 的 `pre_exec` 钩子上使用，将 shell 进程置于一个新的、独立的进程会话中，这将把它置于一个新的进程组，进而意味着它无法成为与
    STDIN 关联的进程组的进程组领导者。就像这样：
- en: '[PRE8]'
  id: totrans-split-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Right there, in the middle: `setsid`. That’s called right after we create a
    new process with `fork` but before that process is turned into `$SHELL`.'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 就在这里，在中间：`setsid`。这是在我们用 `fork` 创建新进程后但在将该进程转换为 `$SHELL` 之前调用的。
- en: 'APUE on what happens when a process calls `setsid`:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: APUE 讨论进程调用 `setsid` 时发生的情况：
- en: The process becomes the session leader of this new session. […]
  id: totrans-split-64
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个进程成为了新会话的会话领导者。[…]
- en: The process becomes the process group leader of a new process group. […]
  id: totrans-split-65
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进程成为了一个新进程组的进程组领导者。[…]
- en: The process has no controlling terminal. […] If the process had a controlling
    terminal before calling `setsid`, that association is broken.`
  id: totrans-split-66
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进程没有控制终端。[…] 如果进程在调用 `setsid` 前有一个控制终端，那么这种关联会被断开。
- en: That makes sense. By calling `setsid` it would break any association the newly-spawned
    shell process has with the terminal and that could help me confirm whether the
    shell mucking with the process groups leader is the problem.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有道理。通过调用 `setsid`，可以打破新生成的 shell 进程与终端的任何关联，这有助于我确认 shell 操纵进程组领导者是否是问题所在。
- en: 'And — boom! fireworks! loud noises! a small child saying: “ta-da!” — with the
    `pre_exec` hook this is what the program printed:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 — 砰！烟花！大声的噪音！一个小孩说：“ta-da！” — 通过 `pre_exec` 钩子，程序打印了这个：
- en: '[PRE9]'
  id: totrans-split-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: And `Ctrl-C` still worked!
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 并且 `Ctrl-C` 仍然有效！
- en: 'The foreground process group ID *is* the murder weapon. At this point it was
    clear *what* happens: the shell that’s spawned takes control of the terminal,
    by setting the foreground process group ID, which means the signal resulting from
    `Ctrl-C` is sent to the shell process. But if the shell runs a non-built-in command
    as its last command, it doesn’t clean up after itself and its process ID stays
    associated with the terminal, leading to all of our `Ctrl-C`s ending up in the
    void.'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 前台进程组 ID *就是* 凶器。这时候，*发生了什么* 清楚了：生成的 shell 接管了终端，通过设置前台进程组 ID，这意味着由 `Ctrl-C`
    导致的信号被发送到 shell 进程。但是，如果 shell 作为其最后一个命令运行非内建命令，它不会自我清理，其进程 ID 保持与终端关联，导致所有我们的
    `Ctrl-C` 都消失无踪。
- en: 'With that *What?* the next question is: why?'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有了 *什么？* 接下来的问题是：为什么？
- en: Why does ZSH (the shell with which this happened for me) not reset the foreground
    process group leader when it runs a non-built in command?
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么 ZSH（这是发生在我身上的 shell）在运行非内建命令时不重置前台进程组领导者？
- en: 'On my Linux machine I ran `strace -f` to see which syscalls my process and,
    more importantly, its child processes (including the spawned shell) were making.
    What I could figure out was this:'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的 Linux 机器上，我运行了 `strace -f` 来查看我的进程以及其子进程（包括生成的 shell）都在进行哪些系统调用。我能弄清楚的是：
- en: 'When `zsh` is run with `-c` and the last command in that passed command is
    a non-built-in, such as `ls` or `env`, then ZSH `execve`s into that last process.
    Meaning: it doesn’t create a child process to run `ls`. No, instead it turns itself
    into that command. That means at the point in time when `ls` is run in `zsh -c
    ''echo lol; ls''` the `zsh` process is gone and turned into `ls` and there’s no
    one left to reset the foreground process group leader.'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当以 `-c` 运行 `zsh` 并且传递的命令中最后一个命令是非内建命令，比如 `ls` 或 `env`，那么 ZSH 就会 `execve` 进入到该最后的进程中。这意味着：它不会创建一个子进程来运行
    `ls`。不，它会将自己变成那个命令。这意味着在 `zsh -c 'echo lol; ls'` 中运行 `ls` 时，`zsh` 进程已经消失并变成了 `ls`，没有人留下来重新设置前台进程组领导者。
- en: 'But when you run `zsh -c ''/usr/bin/env; echo lol''`, i.e.: first non-built-in,
    then built-in, then ZSH doesn’t disappear. It `forks` and `execs`  `/usr/bin/env`
    and then executes the `echo lol` and, somewhere in there, cleans up the foreground
    process group leader.'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当你运行 `zsh -c '/usr/bin/env; echo lol'`，即：先是非内建，然后是内建命令，那么 ZSH 不会消失。它会 `fork`
    和 `exec` `/usr/bin/env`，然后执行 `echo lol`，在某个地方，清理前台进程组领导者。
- en: Now, listen. I wish I could continue here and end with “… and *this* is why
    ZSH does it that way!” and someone would finally PayPal me $100 with the message
    “thanks for your newsletter”, but I have to disappoint you.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请听我说。我希望我能继续并以 “… 这就是为什么 ZSH 那样做！” 结束，然后有人终于通过 PayPal 给我 100 美元并留言 “感谢你的通讯”，但我必须让你失望了。
- en: I don’t know how and why exactly ZSH does what it does. I cloned the repo, I
    compiled it, I tried to run it from source, but somehow failed and man `cmake`
    is a lot and also the folders have names like `Src` and `Doc` and who the hell
    capitalizes the first letter in a folder name and there’s also a `./configure`
    you have to run and then you need to make sure it doesn’t use your system library
    and… You see this shell investigation stuff isn’t easy and I gave up, sorry.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道 `ZSH` 为什么以及如何做这些事情。我克隆了仓库，编译了它，试图从源码运行它，但不知何故失败了，而且 `cmake` 真是个大问题，还有文件夹的名字像
    `Src` 和 `Doc`，谁会大写文件夹名字的第一个字母，还有一个 `./configure` 你必须运行，然后确保它不使用你的系统库… 你看，这些 shell
    调查的事情并不容易，我放弃了，抱歉。
- en: What I *did*  [find though](https://sourcegraph.com/github.com/zsh-users/zsh@fa9b3ad5977ede0a4635cd86276dd0f0c2f6f03e/-/blob/Src/jobs.c?L3151-3169)
    is that ZSH does actively set the process group id for job control. And it also
    [remembers the original one and resets it](https://sourcegraph.com/github.com/zsh-users/zsh@fa9b3ad5977ede0a4635cd86276dd0f0c2f6f03e/-/blob/Src/jobs.c?L3213-3227).
    But I gave up when I saw [this part here](https://sourcegraph.com/github.com/zsh-users/zsh@fa9b3ad5977ede0a4635cd86276dd0f0c2f6f03e/-/blob/Src/exec.c?L1114-1153)
    that does job control stuff in ZSH and realized that I’m not getting paid for
    this.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我*确实* [找到了](https://sourcegraph.com/github.com/zsh-users/zsh@fa9b3ad5977ede0a4635cd86276dd0f0c2f6f03e/-/blob/Src/jobs.c?L3151-3169)，ZSH确实主动设置作业控制的进程组ID。而且它也[记住并重置了原始ID](https://sourcegraph.com/github.com/zsh-users/zsh@fa9b3ad5977ede0a4635cd86276dd0f0c2f6f03e/-/blob/Src/jobs.c?L3213-3227)。但是当我看到[ZSH中这部分内容](https://sourcegraph.com/github.com/zsh-users/zsh@fa9b3ad5977ede0a4635cd86276dd0f0c2f6f03e/-/blob/Src/exec.c?L1114-1153)处理作业控制的时候，意识到我做这些工作是不会得到报酬的。
- en: I await your letters with the explanation.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我期待着您解释的来信。
