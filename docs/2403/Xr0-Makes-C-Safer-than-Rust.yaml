- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:44:10'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Xr0 Makes C Safer than Rust
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://xr0.dev/safer](https://xr0.dev/safer)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Xr0 Makes C Safer than Rust
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a practical way to guarantee the safety of C programs at compile time,
    in the sense of no use-after-frees, no double frees, no buffer out-of-bounds reads/writes,
    no null pointer dereferences, no uses of uninitialised memory, no arithmetic overflows/underflows
    and, more generally, no undefined behaviour. The latest version of [Xr0](/) is
    an empirical demonstration of the validity of this method. Though very rough around
    the edges, Xr0 can already eliminate use-after-frees, double-frees, null pointer
    dereferences, the use of uninitialised memory and memory leaks for a limited subset
    of C89.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: 'The method is that of formalising and verifying the interfaces between functions.
    We shall argue that interface informality is the root of all unsafety. The remarkable
    safety guarantees that Rust provides are consequent to something much deeper than
    its ownership rules: Rust empowers programmers to formalise and verify the semantics
    of pointer usage at the interface boundary between functions. If interface formality
    is the fundamental determinant of safety, systems language design should focus
    directly on it rather than on any other criterion, including ownership. Xr0 shows
    how this can be done.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: 0\. C is the world’s most important language.
  id: totrans-split-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is simple but expressive, practical but admitting of elegance (think of
    some of the pointer arithmetic in K&R); it is small, fast, and portable; it is
    the *lingua franca* of programming and the language of languages: C is the programmer’s
    working model for the computer. Good C programmers are, by definition, good programmers.
    The dominance of the C programming language is no accident and will continue for
    at least another [fifty years](https://www.paulgraham.com/hundred.html).'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: 1\. C’s safety issues are a big deal.
  id: totrans-split-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This can be seen from the figures helpfully compiled by Alex Gaynor [here](https://alexgaynor.net/2020/may/27/science-on-memory-unsafety-and-security/).
    Something on the order of 65%–70% of safety-critical bugs in large C programs
    are a result of memory safety issues, especially use-after-frees and out-of-bounds
    reads/writes. This jaw-dropping number has been reproduced across Android and
    iOS, MacOS and Windows and Linux (in Ubuntu’s contributions to the kernel over
    a six-month period), and Chromium and Firefox.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: This why most attempts to improve on C fail. C is simple and gives the programmer
    control, and this is why C programmers love and use it. But it is this simplicity
    and control that makes it easy for programmers to introduce safety vulnerabilities.
    C, like the computer, does what you say, not what you mean. Attempts to fix C
    typically reduce the programmer’s control and abandon simplicity, making them
    non-starters for C programmers.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: C++ undermines simplicity and still has C’s safety issues.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: Java (and C#) undermine both simplicity and programmer control.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: Go preserves simplicity (the hardest thing to preserve) but reduces control
    by introducing garbage-collection (GC).
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Rust is an amazing advance for systems programming.
  id: totrans-split-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rust is the first language that seriously addresses C’s safety issues without
    undermining programmer control. It shows how safety can in many respects be secured
    at compile time without GC. This is incredible. It may be the first systems language
    that makes C programmers hunger for more, even though they may be unsatisfied
    with Rust’s idiosyncrasies and complexity.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Rust is complex and limiting, so it will struggle to dislodge C.
  id: totrans-split-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Although it is worthy of praise for opening our eyes to what is possible at
    compile time – indeed Rust may be thought of as the first mainstream triumph of
    formal methods – it has two weaknesses that make it unsuitable as an upgrade on
    C. First, Rust is complicated; at the very least, it is much more complicated
    than C. This isn’t our assessment: [listen here](https://youtu.be/A3AdN7U24iU?t=1624)
    to Carol Nichols, who sits on Rust’s [leadership council](https://www.rust-lang.org/governance/teams/leadership-council):'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: The big downside is Rust is more complex [than C], and we are trying, all the
    time, to lessen the learning curve through books and video courses and various
    learning materials…But we’re trying to express complex ideas such that the compiler
    can understand them and that does take more syntax and more complexity…
  id: totrans-split-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'G.H. Hardy said well that “Beauty is the first test: there is no permanent
    place in the world for ugly mathematics”. For [humble programmers](https://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html)
    simplicity is the first test. Are we to accept that there is no simple solution
    to C’s problems?'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Secondly, no matter how effective it is, Rust forces the programmer to operate
    within a strict ownership model. To the extent that there are other ways to secure
    safety, this model cannot but feel Procrustean. Consider this example from [Rust’s
    documentation](https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html):'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
- en: 'The borrow checker rejects the use of `s1` in the print command because ownership
    of the string is transferred from `s1` to `s2` in the second assignment statement.
    Let us ask the question: Is there anything inherently unsafe about multiple (even
    mutable) references to an object? Has it been shown by some rock-solid argument
    that such stringent ownership semantics are the only way to guarantee compile-time
    safety? To believe that Rust is the conclusive answer to the safety problem one
    has to accept either that the above code is *inherently* unsafe, or that the conclusive
    answer to the problem involves forcing programmers to adopt patterns that do not
    reflect what is inherently safe and unsafe. Unless stringent ownership rules are
    the *sine qua non* of static safety, they cannot be the final answer to the safety
    problem.'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: This raises the question of what constitutes the inherently safe and unsafe.
    Can we characterise safety in a way that is more useful and flexible than that
    given by strict ownership semantics?
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Interface informality is the root cause of unsafety (The Xr0 Thesis).
  id: totrans-split-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Trivial safety bugs are those that are recognisable from within a function:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
- en: 'The double-free above is obvious, and it is easy to write automated tools that
    catch such obvious bugs. The real challenge comes in when we compose functions:
    is there a double-free beneath?'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
- en: The answer is “it depends on `bar`’s body”. But what if `bar` is defined like
    this,
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
- en: and `baz` in turn is defined in terms of `qux`?
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: With informal interfaces between functions we have to examine the entire chain
    of calls that begin at any given function in our code to know if the function
    is safe. If this function is `main`, we have to examine all the functions in the
    program, which means we have no other way of assuring ourselves of the safety
    of the program than by examining every part of it manually.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: We submit, then, that code like
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
- en: exhibits, much more strongly than the Rust example in the previous section,
    the nature of what is inherently unsafe. The only way to know whether `foo` is
    safe is to look inside `bar`’s body, because the interface at the boundary between
    `foo` and `bar` is informal. Granted, the prototype tells us that `bar` has no
    return value and that it takes a single `int`-pointer as its argument, but that
    is not enough for us to judge whether `foo` is safe. The prototype is informal
    with respect to the safety concern that we have, namely, whether or not `bar`
    frees its argument. And it is this interface informality that means we cannot
    know that `foo` is safe by looking at it alone, and more generally, that when
    we look at `main` we will not be able to know if it is safe by analysing it alone.
    In other words, this informality it means we cannot know that the program is safe.
    This is the heart of the safety problem in C.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: Ownership rules are one way to make such code safe. For example, if `bar` only
    takes an immutable reference to `p`, then there can be no double-free here.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: But note that another way to do so is to require that side-effects be annotated.
    Every function that frees a pointer (directly or indirectly) must then be annotated.
    Then if `bar` is written as
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
- en: we can detect the double-free in `foo` easily. If, on the other hand, `bar`
    has no such annotation, then `foo` cannot be wrong in freeing `p`.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: Even more importantly, note that to enforce ownership rules we would still need
    to annotate the interface boundary. In Rust the distinctions between a function
    that takes ownership, one that takes an immutable reference and one that takes
    a mutable reference are still expressed formally and syntactically in the function
    signatures. So though at first glance it may seem that Rust’s safety guarantees
    come from its ownership rules, the truth is they come from interface formality
    with respect to pointers.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Xr0 enables formalising and verifying of function interfaces.
  id: totrans-split-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Focusing on interface formality directly gives us a more flexible criterion
    for safety and one that may be reconcilable with C’s design ethos of simplicity
    and programmer control. This what Xr0 does.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: The above annotation to `bar`, though simplified, is not mere theory. ^(Xr0
    empowers you to annotate functions with their *safety semantics* and to verify
    that their bodies satisfy these annotations. All the nontrivial safety vulnerabilities
    in C programs are a result of the failure to propagate through the function interface
    the safety assumptions and implications on either side.)
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: Recognising that this is the real problem, that safety semantics need to be
    propagated formally through the interfaces between functions, we become very hopeful.
    Because it turns out that building tools that enable the expression and propagation
    of these semantics is technically feasible. It’s a well-defined engineering problem,
    not an open-ended scientific question. It’s hard, but not like science. It’s hard
    for amateur compiler engineers like ourselves, and it requires time and determination,
    but it is by no means impossible.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at a few examples.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: Memory leaks
  id: totrans-split-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These are easy. Whenever a call to `malloc` occurs within a function, we insist
    that either the function free the memory or that the function return the allocated
    memory and be annotated accordingly.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: Thus we permit
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-split-52
  prefs: []
  type: TYPE_PRE
- en: and
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-split-54
  prefs: []
  type: TYPE_PRE
- en: but forbid
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-split-56
  prefs: []
  type: TYPE_PRE
- en: 'We also have to forbid deceptive annotations like this:'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-split-58
  prefs: []
  type: TYPE_PRE
- en: 'In order for this to apply generally, we also have to treat indirect calls
    to `malloc` like allocations in their own right:'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-split-60
  prefs: []
  type: TYPE_PRE
- en: Above the only problematic function is `bar`, which doesn’t account for `foo`’s
    side effect, as `baz` does. The remaining functions are all correct, as explained
    in their annotations.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: Initialisation of memory
  id: totrans-split-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The basic principle here is we track a variable from the moment of its declaration
    and forbid it being used before a value is assigned to it. So
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
- en: 'is easily caught as a violation of this rule, whereas both of the below functions
    are permitted:'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-split-66
  prefs: []
  type: TYPE_PRE
- en: If we want to use a function to initialise a value, we must annotate ^(it accordingly:)
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-split-68
  prefs: []
  type: TYPE_PRE
- en: So the programmer’s power to declare uninitialised variables is in no sense
    curtailed. All Xr0 does is guarantee that when a variable is used it has already
    been given a value.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
- en: What is most noteworthy in each of these cases is to see what interface formality
    is buying us. Now even if we have several layers of function calls, as in
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-split-71
  prefs: []
  type: TYPE_PRE
- en: we can think about the safety of the functions separately. We can see that `realinit`’s
    annotation is correct because it reconciles with the assignment statement in its
    body. `init`’s is correct because the call in its body has the same side effect
    as `realinit`. And in `foo` we can see that `i` has a value when the `printf`
    statement is executed, by virtue of `init`’s annotation alone, without considering
    its body or its connection to `realinit`.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: Use-after-frees; double frees; null pointer dereferences
  id: totrans-split-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Though these errors have slightly different semantics, the common malady is
    invalid usage of a pointer. Use-after-frees occur when we attempt to read from
    or write to a freed region of memory and double frees when we attempt to free
    a freed region. Null pointer dereferences occur when we attempt to dereference
    a pointer whose value is `NULL`.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
- en: Thus Xr0 prevents these errors by tracking what is semantically possible for
    a given pointer and insisting that this information be propagated through function
    interfaces. So it tracks if a pointer can be freed (which is only true when it
    is returned from an allocation, directly or indirectly), whether it can be written
    to (i.e. whether it can be dereferenced as an lvalue), and whether it can be read
    from (i.e. whether it can be dereferenced as an rvalue).
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: 'The above annotation for `init` was actually partially incorrect, because we
    didn’t express that `init` assumes its first parameter is a valid pointer, pointing
    at writeable memory. The full annotation is as follows:'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-split-77
  prefs: []
  type: TYPE_PRE
- en: 'The details are not important for now. The point is that `init` has a precondition
    which allows Xr0 to reject any callers that don’t pass in pointers that can be
    dereferenced as lvalues, like the following ones:'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-split-79
  prefs: []
  type: TYPE_PRE
- en: We act in much the same way when a function reads the value of a pointer, or
    intends to free it. This information must simply be propagated in annotations.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
- en: 'Buffer overflows/underflows (NB: not implemented yet)'
  id: totrans-split-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The same principles demonstrated above can be used to eliminate all buffer out-of-bounds
    errors at compile time also. There’s no reason why we can’t track buffer sizes
    and propagate that information through annotations. But we’ve decided to refrain
    from showing our draft designs for such a feature in this post, because they haven’t
    been implemented yet.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Xr0 can go a long way, but it certainly has a long way to go.
  id: totrans-split-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Indeed, there is quite a bit that we haven’t yet implemented. For example, Xr0
    can’t presently verify loops and recursive functions, so these are being bridged
    with axiomatic statements. See the list of [limitations](/learn#limitations) to
    get a clear picture of the status of the project. Xr0 is promising, but it has
    a long way to go. We hope this post explains our confidence and the basic thrust
    of the approach we’re taking.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
- en: Although our focus is on C, we hope these ideas will prove stimulating to language
    designers more generally. There’s no reason why these ideas couldn’t be used to
    prevent, for example, null pointer dereferencing in a language like Go, or buffer
    out-of-bounds errors in Rust.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
- en: Do check out [the tutorial](/learn). You can try out Xr0 now from [the playground](/try).
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
- en: If you’re intrigued by Xr0 and would like to try it out on a real program, you
    should know that we’re forming a cohort for the first few users of Xr0. Participation
    in the cohort would come with support and prioritisation (within reason) of features
    in our [roadmap](/vision-roadmap) as we work towards making Xr0 useful for everyone.
    And best of all, it’ll be completely free. The only thing is there’s two of us,
    so we’ll have to keep the cohort fairly small. Reach out via email to [Claude](mailto:betz@xr0.dev)
    or [Amisi](mailto:a@xr0.dev) or DM us on the [Xr0 Zulip](https://xr0.zulipchat.com/)
    if you’re interested in this.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
