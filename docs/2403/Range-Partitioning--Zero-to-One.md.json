["```\ntype Database struct {\n\tRanges  []*Range\n\tmaxRangeSize int\n}\n```", "```\ntype Range struct {\n\tLow  string\n\tHigh string\n\n\tKV map[string]string // optimally a btree\n}\n```", "```\nfunc (d *Database) Get(key string) *string {\n\t// range range range... lol\n\tfor _, rng := range d.Ranges {\n\t\tif rng.OwnsKey(key) {\n\t\t\treturn rng.Get(key)\n\t\t}\n\t}\n\treturn nil\n}\n\n// Range functions\n\nfunc (r *Range) OwnsKey(key string) bool {\n\treturn key >= r.Low && key < r.High\n}\n\nfunc (r *Range) Get(key string) *string {\n\tval, exists := r.KV[key]\n\tif !exists {\n\t\treturn nil\n\t}\n\treturn &val\n}\n```", "```\nfunc (d *Database) Delete(key string) {\n\tfor _, rng := range d.Ranges {\n\t\tif rng.OwnsKey(key) {\n\t\t\trng.Delete(key)\n\t\t\treturn\n\t\t}\n\t}\n}\n\n// Range function\n\nfunc (r *Range) Delete(key string) {\n\tdelete(r.KV, key)\n}\n```", "```\nfunc (r *Range) Set(key, value string) {\n\tr.KV[key] = value\n}\n```", "```\nfunc (d *Database) Set(key, value string) {\n\tfor _, rng := range d.Ranges {\n\t\tif rng.OwnsKey(key) {\n\t\t\t// Insert the value\n\t\t\trng.Set(key, value)\n\n\t\t\t// Check if the range is too large\n\t\t\tif len(rng.KV) > d.maxRangeSize {\n\t\t\t\tfmt.Println(\"\\n### Range too large, splitting! ###\\n\")\n\t\t\t\td.SplitRange(rng)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (d *Database) SplitRange(rng *Range) {\n\t// Let's just split it ~half-way... rip performance\n\tvar keys []string\n\tfor k, _ := range rng.KV {\n\t\tkeys = append(keys, k)\n\t}\n\n\t// sort that boi (rip performance)\n\tsort.Strings(keys)\n\n\t// We only need to make one new range, and delete from the old range\n\tnewRangeKeys := keys[:d.maxRangeSize/2]\n\tnewRangeKV := map[string]string{}\n\tfor _, k := range newRangeKeys {\n\t\tnewRangeKV[k] = *rng.Get(k)\n\t\trng.Delete(k)\n\t}\n\n\tnewRange := Range{\n\t\tLow: rng.Low,\n\n\t\tHigh: newRangeKeys[(d.maxRangeSize/2)-1],\n\t\tKV:   newRangeKV,\n\t}\n\n\t// Update the old range low\n\trng.Low = newRangeKeys[(d.maxRangeSize/2)-1]\n\n\t// Add the new range to our DB\n\td.Ranges = append(d.Ranges, &newRange)\n}\n```", "```\n// First let's insert 500 records and see the DB\n\ndb := database.NewDB(600) // 600 record limit per range\nfor i := 1; i <= 500; i++ {\n    v := fmt.Sprintf(\"%05d\", i)\n    // Just set itself in\n    db.Set(v, v)\n}\n\n// Debug it\nfmt.Printf(\"Current DB:\\n%s\\n\", db.DebugRanges())\n\n// Current DB:\n// \tRange:\n// \tLow: ''\n// \tHigh: 'Inf'\n// \tSize: 500\n```", "```\n// Now, let's insert again to exceed the range\nfor i := 501; i <= 700; i++ {\n    v := fmt.Sprintf(\"%05d\", i)\n    // Just set itself in\n    db.Set(v, v)\n}\n\n// Debug it\nfmt.Printf(\"Current DB:\\n%s\\n\", db.DebugRanges())\n\n// ### Range too large, splitting! ###\n//\n// Current DB:\n// \tRange:\n// \tLow: '00300'\n// \tHigh: 'Inf'\n// \tSize: 400\n// \tRange:\n// \tLow: ''\n// \tHigh: '00300'\n// \tSize: 300\n```", "```\n// Insert a ton to cause lots of range splits all over\nfor i := 700; i < 2000; i++ {\n    v := fmt.Sprintf(\"%05d\", i)\n    db.Set(v, v)\n}\n\n// Debug it\nfmt.Printf(\"Current DB:\\n%s\\n\", db.DebugRanges())\n\n// Current DB:\n// \tRange:\n// \tLow: '01500'\n// \tHigh: 'Inf'\n// \tSize: 499\n\n// \tRange:\n// \tLow: ''\n// \tHigh: '00300'\n// \tSize: 300\n\n// \tRange:\n// \tLow: '00300'\n// \tHigh: '00600'\n// \tSize: 300\n\n// \tRange:\n// \tLow: '00600'\n// \tHigh: '00900'\n// \tSize: 300\n\n// \tRange:\n// \tLow: '00900'\n// \tHigh: '01200'\n// \tSize: 300\n\n// \tRange:\n// \tLow: '01200'\n// \tHigh: '01500'\n// \tSize: 300\n```", "```\nmangleDB := database.NewDB(10_000) // o7 godspeed memory\nfor i := 0; i < 50_000; i++ {\n    mangleDB.Set(fmt.Sprintf(\"%d\", i), \"e\")\n}\nfmt.Println(mangleDB.DebugRanges())\nfmt.Println(*mangleDB.Get(\"42000\"))\nfmt.Println(*mangleDB.Get(\"20000\"))\n\n// Range:\n// Low: '5497'\n// High: 'Inf'\n// Size: 5001\n// Range:\n//\n// Low: '41497'\n// High: '5497'\n// Size: 9999\n// Range:\n//\n// Low: ''\n// High: '14497'\n// Size: 5000\n// Range:\n//\n// Low: '14497'\n// High: '18998'\n// Size: 5000\n// Range:\n//\n// Low: '18998'\n// High: '23497'\n// Size: 5000\n// Range:\n//\n// Low: '23497'\n// High: '27998'\n// Size: 5000\n// Range:\n//\n// Low: '27998'\n// High: '32497'\n// Size: 5000\n// Range:\n//\n// Low: '32497'\n// High: '36998'\n// Size: 5000\n// Range:\n//\n// Low: '36998'\n// High: '41497'\n// Size: 5000\n\n// Getting key 42000 from range with low 41497\n// e\n// Getting key 20000 from range with low 18998\n// e\n```"]