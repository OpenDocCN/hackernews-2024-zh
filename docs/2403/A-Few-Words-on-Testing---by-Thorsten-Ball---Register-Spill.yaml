- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:00:32'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:00:32'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: A Few Words on Testing - by Thorsten Ball - Register Spill
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些关于测试的话 - Thorsten Ball - Register Spill
- en: 来源：[https://registerspill.thorstenball.com/p/a-few-words-on-testing](https://registerspill.thorstenball.com/p/a-few-words-on-testing)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://registerspill.thorstenball.com/p/a-few-words-on-testing](https://registerspill.thorstenball.com/p/a-few-words-on-testing)
- en: First, my credentials. More than half of all the code I wrote in my life is
    test code. My name is attached to [hundreds](https://interpreterbook.com/) of
    [pages](https://compilerbook.com/) of TDD. In my first internship as a software
    developer I wrote tests and did TDD while pair programming in my first week. I’ve
    written unit tests, integration tests, tests for exploration, tests to stop problems
    from reappearing, tests to leave a message, tests using testing frameworks and
    BDD and no framework at all, tests in Ruby, JavaScript, C, Go, Rust, Scheme, Bash.
    After two drinks, I’m willing to say that I know more about testing than many
    others. Right now — no drinks — I’m willing to say that I love testing and that
    writing tests has brought me a lot of joy.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我的证书。我一生编写的代码中超过一半是测试代码。我的名字附在[hundreds](https://interpreterbook.com/) of
    [pages](https://compilerbook.com/) of TDD上。在我作为软件开发实习生的第一周，我在配对编程中编写了测试并进行了TDD。我写过单元测试，集成测试，探索测试，防止问题再次出现的测试，留言的测试，使用测试框架和BDD的测试，以及完全没有框架的测试，使用Ruby，JavaScript，C，Go，Rust，Scheme，Bash进行测试。喝两杯酒后，我愿意说我对测试了解比许多人多。现在
    — 没有酒 — 我愿意说我热爱测试，编写测试给我带来了很多快乐。
- en: 'Yet I can no longer say that I’m free of doubt. To stick with the theme: I’m
    much more sober about testing today than I was ten years ago. Recently, in the
    past few months, the doubts have grown.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我不能再说我对测试毫无疑虑。坚持主题：今天我对测试比十年前更加清醒。最近，过去几个月，怀疑感加剧了。
- en: Too many flaky tests. Too much time spent getting the tests to pass after making
    a tiny change that I knew was correct but the tests didn’t. Too many integration
    tests that made people wait 20, 30, 40 minutes until they could merge their change,
    only to reveal — months later — that they never tested anything. Too many times
    have I fixed a bug and *knew* it was fixed because I tested it manually, thoroughly,
    and was 100% sure that I know how the code works and that this can’t happen again,
    but then spent hours — 10 times longer than it took me to fix the bug — to write
    a test only to prove what I knew all along, that the bug is fixed.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 太多不可靠的测试。在做了一个我知道是正确的微小更改后，花费太多时间使测试通过。太多集成测试让人等待20、30、40分钟才能合并他们的更改，只是在几个月后才发现他们从未测试过任何内容。太多次我修复了一个bug，并且*确信*它已经修复，因为我进行了彻底的手动测试，百分之百确定我知道代码如何工作，这种情况不会再次发生，但后来花费了几个小时
    — 比修复bug花的时间长10倍 — 编写一个测试来证明我一直知道的事情，即bug已经修复。
- en: It’s not that I was ever a capital-b Believer in tests. I never believed in
    testing coverage as a metric, never really cared whether someone wrote their tests
    first or last (although I think too few people have seriously tried TDD), came
    to think that most discussions around functional vs. intergration vs. whathaveyou
    tests are a big misunderstanding and that people who say you should never hit
    the database in tests should get real and probably haven’t written enough tests
    yet.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我从未真正相信测试覆盖率作为衡量标准，也从未真正关心过某人是先写测试还是最后写测试（尽管我认为尝试TDD的人太少），逐渐认为大多数关于功能测试与集成测试等讨论都是误解，并且认为那些说在测试中永远不应该访问数据库的人应该现实一点，可能还没有写足够的测试。
- en: Still, I’ve always thought of tests as good and untested code as bad. Whenever
    I merged something that didn’t have a test I felt guilty, even when deep down
    I knew that the test might not be worth it. Tests, I thought, are a sign of quality
    and the better tested something is, the higher the quality of the product.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我始终认为测试是好的，未经测试的代码是不好的。每当我合并一些没有测试的东西时，我会感到内疚，即使在内心深处我知道这个测试可能并不值得。我认为，测试是质量的标志，而产品经过越好的测试，质量就越高。
- en: Enter [Ghostty](https://mitchellh.com/ghostty) and [Zed](https://zed.dev/).
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 输入[Ghostty](https://mitchellh.com/ghostty)和[Zed](https://zed.dev/)。
- en: Both are among the highest-quality software I have ever used and hacked on.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都是我曾经使用和破解过的最高质量的软件之一。
- en: Both have less tests than I expected.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 两者的测试量都比我预期的要少。
- en: 'Both do have tests, of course. Ghostty has extensive tests for its core: the
    terminal state, the font rendering, the parser of escape and control sequences,
    and so on. Zed also a lot of tests for its foundational data structures — the
    rope, the SumTree, the editor, and so on — and tests for big features, and [very
    smart, very cool property tests for async code](https://www.youtube.com/watch?v=ms8zKpS_dZE).'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，两者都进行了测试。Ghostty 对其核心有广泛的测试：终端状态、字体渲染、转义和控制序列的解析器等等。Zed 也对其基础数据结构进行了大量测试
    — 如绳子、SumTree、编辑器等 — 还对大功能进行了测试，以及 [非常聪明、非常酷的异步代码属性测试](https://www.youtube.com/watch?v=ms8zKpS_dZE)。
- en: But neither codebase has tests, for example, that take a long-ass time to run.
    No tests that click through the UI and screenshot and compare and hit the network.
    Zed’s complete testsuite takes 136 seconds to run 1052 tests in CI. Ghostty’s
    takes 38 seconds, including compilation. Many tests, but less than I thought.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，例如，没有一个代码库有那种需要长时间运行的测试。没有测试通过 UI 点击、截图和比较、访问网络。Zed 在 CI 中运行完整测试套件需要 136
    秒，共进行了 1052 次测试。Ghostty 则需要 38 秒，包括编译时间。有很多测试，但比我想象的少。
- en: In both codebases I’ve merged PRs without any tests and frequently see others
    do the same. And the world didn’t end and no one shed any tears and the products
    are still some of best I’ve ever used and the codebases contain some of the most
    elegant code I’ve ever read.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个代码库中，我已经合并了没有任何测试的 PR，并经常看到其他人也这样做。世界并没有因此而终结，也没有人流泪，产品仍然是我用过的最好的产品之一，代码库包含了我读过的一些最优雅的代码。
- en: So now I’m writing this and it feels like a confession to say that I’m beginning
    to think that maybe there’s no correlation between software quality and tests.
    Maybe the tests are only a symptom. A symptom of something else that causes the
    quality.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我在写这篇文章，感觉像是在坦白，我开始觉得也许软件质量和测试之间没有相关性。也许测试只是一种症状。是导致质量的其他某种东西的症状。
- en: 'Maybe the wisest thing about testing that’s ever been said and maybe the only
    thing that you need to know about testing — forget about the testing pyramids,
    and the mocks vs. stubs debates, and the dependency injectors, and the coverage
    numbers — is what Kent Beck said [16 years ago in an answer on Stack Exchange](https://stackoverflow.com/a/153565):'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 也许有关测试的最明智的事情，也许是关于测试的唯一需要知道的事情 — 忘掉测试金字塔，以及模拟 vs. 存根的辩论，依赖注入器，以及覆盖率数值 — 是 Kent
    Beck 在 [16 年前在 Stack Exchange 的一个答案中说的](https://stackoverflow.com/a/153565)：
- en: I get paid for code that works, not for tests, so my philosophy is to test as
    little as possible to reach a given level of confidence […]. If I don’t typically
    make a kind of mistake (like setting the wrong variables in a constructor), I
    don’t test for it.
  id: totrans-split-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我的工作是编写能工作的代码，不是写测试，所以我的理念是为了达到一定的信心水平尽可能少地进行测试 […]. 如果我不典型地犯某种错误（比如在构造函数中设置错误的变量），我就不测试它。
- en: Maybe that’s all you need. That and people who give a damn.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 也许这就是你需要的一切。还有那些真心关注的人。
