- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:53:40'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'EFF to Ninth Circuit: There’s No Software Exception to Traditional Copyright
    Limits | Electronic Frontier Foundation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.eff.org/deeplinks/2024/03/eff-ninth-circuit-theres-no-software-exception-traditional-copyright-limits](https://www.eff.org/deeplinks/2024/03/eff-ninth-circuit-theres-no-software-exception-traditional-copyright-limits)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Copyright’s reach is already far too broad, and courts have no business expanding
    it any further, particularly where that reframing will undermine adversarial interoperability.
    Unfortunately, a federal district court did just that in the latest iteration
    of *Oracle v. Rimini*, concluding that software Rimini developed was a “derivative
    work” because it was intended to interoperate with Oracle's software, even though
    the update didn’t use any of Oracle’s copyrightable code.
  prefs: []
  type: TYPE_NORMAL
- en: That’s a dangerous precedent. If a work is derivative, it may infringe the copyright
    in the preexisting work from which it, well, derives. For decades, software developers
    have relied, correctly, on the settled view that a work is not derivative under
    copyright law unless it is “substantially similar” to a preexisting work in both
    ideas and expression. Thanks to that rule, software developers can build innovative
    new tools that interact with preexisting works, including tools that improve privacy
    and security, without fear that the companies that hold rights in those preexisting
    works would have an automatic copyright claim to those innovations.
  prefs: []
  type: TYPE_NORMAL
- en: That’s why EFF, along with a diverse group of stakeholders representing consumers,
    small businesses, software developers, security researchers, and the independent
    repair community, filed an [amicus brief](https://www.eff.org/document/eff-rimini-amicus-brief)
    in the Ninth Circuit Court of Appeals explaining that the district court ruling
    is not just bad policy, it’s also bad law.  Court after court has confronted the
    challenging problem of applying copyright to functional software, and until now
    none have found that the copyright monopoly extends to interoperable software
    absent substantial similarity. In other words, there is no “software exception”
    to the definition of derivative works, and the Ninth Circuit should reject any
    effort to create one.
  prefs: []
  type: TYPE_NORMAL
- en: The district court’s holding relied heavily on an erroneous interpretation of
    a 1998 case, *Micro Star v. FormGen*. In that case, the plaintiff, FormGen, published
    a video game following the adventures of action hero Duke Nukem. The game included
    a software tool that allowed players themselves to build new levels to the game
    and share them with others. Micro Star downloaded hundreds of those user-created
    files and sold them as a collection. When FormGen sued for copyright infringement,
    Micro Star argued that because the user files didn’t contain art or code from
    the FormGen game, they were not derivative works.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Ninth Circuit Court of Appeals ruled against Micro Star, explaining that:'
  prefs: []
  type: TYPE_NORMAL
- en: '*[t]he work that Micro Star infringes is the [Duke Nukem] story itself—a beefy
    commando type named Duke who wanders around post-Apocalypse Los Angeles, shooting
    Pig Cops with a gun, lobbing hand grenades, searching for medkits and steroids,
    using a jetpack to leap over obstacles, blowing up gas tanks, avoiding radioactive
    slime. A copyright owner holds the right to create sequels and the stories told
    in the [user files] are surely sequels, telling new (though somewhat repetitive)
    tales of Duke’s fabulous adventures.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Thus, the user files were “substantially similar” because they *functioned as
    sequels* to the video game itself—specifically the story and principal character
    of the game. If the user files had told a different story, with different characters,
    they would not be derivative works. For example, a company offering a Lord of
    the Rings game might include tools allowing a user to create their own character
    from scratch. If the user used the tool to create a hobbit, that character might
    be considered a derivative work. A unique character that was simply a 21^(st)
    century human in jeans and a t-shirt, not so much.
  prefs: []
  type: TYPE_NORMAL
- en: Still, even confined to its facts, *Micro Star* stretched the definition of
    derivative work. By misapplying *Micro Star* to purely functional works that do
    not incorporate *any* protectable expression, however, the district court rewrote
    the definition altogether. If the court’s analysis were correct, rightsholders
    would suddenly have a new default veto right in all kinds of works that are intended
    to “interact and be useable with” their software. Unfortunately, they are all
    too likely to use that right to threaten add-on innovation, security, and repair.
  prefs: []
  type: TYPE_NORMAL
- en: Defenders of the district court’s approach might argue that interoperable software
    will often be protected by fair use. As copyrightable software is found in everything
    from phones to refrigerators, fair use is an essential safeguard for the development
    of interoperable tools, where those tools might indeed qualify as derivative works.
    But many developers cannot afford to litigate the question, and they should not
    have to just because one federal court misread a decades-old case.
  prefs: []
  type: TYPE_NORMAL
