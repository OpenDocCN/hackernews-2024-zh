- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:59:35'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: I figured out how DMARC works, and it almost broke me | Simon Andrews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://simonandrews.ca/articles/how-to-set-up-spf-dkim-dmarc](https://simonandrews.ca/articles/how-to-set-up-spf-dkim-dmarc)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I figured out how DMARC works, and it almost broke me
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How to prevent email spoofing on your domain, using an unholy combination of
    silly standards.
  prefs: []
  type: TYPE_NORMAL
- en: Recently, I encountered a problem. My domain didn't correctly implement SPF,
    DKIM, or DMARC.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, I encountered a second problem: I had no idea what those were, and seemingly
    *nobody* has written about SPF, DKIM, or DMARC in a way that a human can understand,
    not to mention implement. Every article I found was either highly technical, trying
    to game SEO to sell me something, or too high level to be useful.'
  prefs: []
  type: TYPE_NORMAL
- en: As a result, I've had to do a lot of hard work and research to understand this
    problem. Hopefully, because I had to do this, you won't.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s two main sections here: a human explanation of what these things are,
    followed by a reasonably straightforward way to implement them.'
  prefs: []
  type: TYPE_NORMAL
- en: This might not be easy, but if you've landed here, it's probably not optional.
    I hope this helps.
  prefs: []
  type: TYPE_NORMAL
- en: '*I''m keeping this article up-to-date as I learn more, so it''ll change and
    grow. If you want to keep track of what''s changed since the last time you were
    here, [check the diffs on GitHub](https://github.com/simon360/simonandrews.ca/commits/main/pages/articles/how-to-set-up-spf-dkim-dmarc.mdx).*'
  prefs: []
  type: TYPE_NORMAL
- en: Table of contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What are these weird acronyms?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SPF, DKIM, and DMARC are complementary systems. SPF and DKIM are used by email
    servers as indicators of whether or not an email is spam. DMARC then does two
    things: it tells email servers how *important* SPF and DKIM are, *and* what to
    do when an email fails to pass their tests.'
  prefs: []
  type: TYPE_NORMAL
- en: This probably doesn't make much sense yet - that's fine. Let's dig a little
    deeper.
  prefs: []
  type: TYPE_NORMAL
- en: SPF
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`SPF` is a way to declare who''s allowed to send emails from your domain. It
    stands for the "sender policy framework," but you don''t need to know that. Just
    call it SPF, or "spoof." It''s meant to make it harder to send spoof emails.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, it's a way to say "emails from mycompany.com can only be sent from
    Google and Postmark." Declaring SPF makes it harder for me to send emails from
    your domain in an attempt to phish.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how it works, for a *valid, non-phishing* email:'
  prefs: []
  type: TYPE_NORMAL
- en: I send an email to you from `hello@sadl.io`, using my Fastmail SMTP server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gmail (your email service) receives the email.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The email is from someone at `sadl.io`, so Gmail grabs the DNS records for `sadl.io`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sadl.io` has a DNS record that declares its SPF policy. It says that emails
    can be sent from Fastmail.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This email was sent from Fastmail, so it passes the SPF test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The email lands in your inbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's all great! `SPF` hasn't stopped me from sending a real email to you.
    But it seems pretty simple. So... what *would* it stop?
  prefs: []
  type: TYPE_NORMAL
- en: 'Emails are notoriously easy to spoof. To me, even though I haven''t written
    PHP in years, *nothing* demonstrates this more simply than this PHP script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This script sends an email to `employee@example.com`, which looks like it comes
    from `payroll@example.com`, and asks the employee to enter their banking details.
    It's a pretty compelling email, and could probably get a few people to, at least,
    click the link - or worse.
  prefs: []
  type: TYPE_NORMAL
- en: You could run this script *right now*, and if `example.com` hasn't set up SPF,
    an email might actually reach the inbox of `employee@example.com`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Seriously, it''s that simple. We''ve all learned this at one time or another:
    emails are easy to spoof. It''s always been just a cost of doing business. "You
    can''t stop spoofers! Email is too complicated to fix!" are probably things you''ve
    heard, or said. We shove it to the back of our minds. We know emails are insecure,
    but we use them anyway. Turns out that''s not entirely true. SPF can actually
    start to help cut down on spoofing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If SPF were set up, here''s what would happen when that script runs:'
  prefs: []
  type: TYPE_NORMAL
- en: An email gets sent to `employee@example.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This email gets received by Google, who run the mail server for `example.com`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since it's an email from `example.com`, Google gets the DNS records for `example.com`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`example.com` has an SPF policy declared, which states that emails can only
    be sent from Google.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This email wasn't sent from Google; it was sent from a local mail server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since the sending domain doesn't match a domain that's allowed by `example.com`,
    the email is marked as spam. *Maybe*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Wait... *maybe*? Yeah. SPF sounds great in principle. But it often has no effect
    without DMARC. We''ll get to that, but suffice to say: if you''ve just set up
    SPF, it''s mostly informational. Some email servers *might* use it, but they might
    not treat it with much importance. DMARC lets you increase its importance.'
  prefs: []
  type: TYPE_NORMAL
- en: On envelopes vs. letters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This section gets even weirder, but bear with me. You might want to skim this
    now, read the rest of the article, and come back to it again after. It makes a
    lot more sense once you understand DMARC alignment, but we're not there yet. Alright.
    Here goes.
  prefs: []
  type: TYPE_NORMAL
- en: 'First off: shout out to Liam, who correctly pointed out an inaccuracy with
    this description of SPF. SPF *actually* checks the validity of the "envelope from",
    not "from".'
  prefs: []
  type: TYPE_NORMAL
- en: 'Liam pointed me to an article that explains the difference between two things:
    an email (think of it as a letter), and the SMTP interactions that transport that
    letter (an envelope). It''s from XEAMS, and you can (and should!) [read it here](https://www.xeams.com/difference-envelope-header.htm).
    But I''ll paraphrase it:'
  prefs: []
  type: TYPE_NORMAL
- en: The **email** is what you see in your client. It includes the message body,
    and a whole bunch of headers. Those headers include the `From` header, which we
    spoofed in that PHP script, as well as the email subject, DKIM headers (we'll
    get to those in a moment!) and a whole bunch of other headers. Most email headers
    are soft-hidden from users by their email clients, but you can always view them
    - in your email client, whether it's an app or a website, you'll probably be able
    to find a menu item called "View original" or "View raw message". That'll show
    you what an email *really* is. But it doesn't show you the envelope.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **envelope** is what happens at the SMTP level. I''ll defer to the XEAMS
    article on what SMTP looks like, but in effect: the *envelope* can contain a *completely*
    different `MAIL FROM` email address than the email''s `From` header.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll hear a few different terms thrown around to describe the SMTP `MAIL
    FROM` command: envelope from, return to, bounce address. They''re all the same
    thing. I like "envelope from" colloquially, because the analogy is clever, but
    I think it''s useful to know that it comes from the SMTP protocol command used
    to deliver your email.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Which brings us to this: SPF *doesn''t actually care about the From header
    in your email*. It only cares about the `MAIL FROM` value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Later on, we''ll talk about DMARC alignment. But here''s a spoiler: with DMARC
    alignment, DKIM notwithstanding, you''re saying "in order for an email to be valid,
    the FROM address has to pass SPF, and the domain in the From *header* has to be
    the same as the domain in the FROM address." In effect, it makes that PHP spoofing
    example run *roughly* the way you''d expect, but it takes a bit of a circuitous
    route to get there.'
  prefs: []
  type: TYPE_NORMAL
- en: I've left this inaccuracy in the above section. Why? Well... explaining the
    difference between envelope from and the From header has taken up as much space
    on this page as the explanation of SPF itself. If I explained this *first*, you'd
    be too far in the weeds by the time we get to the real example. Sorry for misleading
    you - but if it helps, I wrote the first version of this article not knowing the
    difference, and I still *essentially* got a decent understanding of SPF out of
    it.
  prefs: []
  type: TYPE_NORMAL
- en: DKIM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`DKIM` is a way to declare signing keys for emails from your domain. It stands
    for DomainKeys Identified Mail. Again... that doesn''t matter. It''s Dee-Kim.
    You can think of it as SPF''s cryptographic cousin.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It means that an email server that receives an email can check if that email
    was sent by a server that knows a secret. Since it''s public-key cryptography,
    there''s two keys: a private one, held by your email sending server (SMTP) and
    known by no one else, and a public one, set in your DNS, which can be seen by
    *anybody* and used to determine if a signature was made using that secret key.'
  prefs: []
  type: TYPE_NORMAL
- en: A domain can have multiple DKIM keys, by the way. That took me a long time to
    figure out. In all likelihood, most of the email sending services you use (Gmail,
    Office 365, Fastmail, Mailchimp, Postmark, Sendgrid, Mandrill, Postmark, or whatever)
    will provide a DKIM key you can add to your DNS records. If you add that key,
    you're authorising those services to send on behalf of your domain - it's similar
    to adding them in SPF, but instead of being about domains, it's about knowing
    a secret,
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how it works in a happy path:'
  prefs: []
  type: TYPE_NORMAL
- en: I send an email from `hello@sadl.io` to `somebody@gmail.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This email goes through my Fastmail SMTP server in order to be sent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Fastmail SMTP server generates a signature using the secret key, and attaches
    it to the email, then sends it to `example.com`'s receiving server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Google email server receives this email. It's from `sadl.io`, so it gets
    the DNS records.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The email has a signature embedded, and the DNS records for `sadl.io` declare
    a few public DKIM keys which can be used to verify that signature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One of those DKIM keys matches the one used to make this signature - specifically,
    the one that Fastmail provides. So the DKIM test passes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The email lands in `somebody@gmail.com`'s inbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The unhappy path here is fairly straightforward. You could use the same PHP
    script from the SPF section. Here''s what would happen:'
  prefs: []
  type: TYPE_NORMAL
- en: I run this script. An email gets sent to `employee@example.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This email gets received by Google, who run the mail server for `example.com`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since it's an email from `example.com`, Google gets the DNS records for `example.com`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `SPF` test fails. But that *might* be ok, because `example.com` declares
    some DKIM keys in its DNS records.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This email doesn''t have a signature attached. So none of those DKIM keys are
    useful. (Alternative: the email *does* have a signature attached, but it doesn''t
    match the signature that would be generated by any of the public keys on `example.com`).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since the email failed the SPF test *and* the DKIM test, it's marked as spam.
    *Maybe*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yup. Once again: *maybe*. An email could fail *both* of these tests, and still
    land in a user''s inbox. You''ve put all this work in, and *still*, your email
    domain can be spoofed with 5 lines of *incredibly basic* PHP.'
  prefs: []
  type: TYPE_NORMAL
- en: If you're me, it's taken hours to get to this point. You're dejected and demotivated.
    Everything you've tried has been hard to understand, and required a bunch of research.
    You've nervously updated DNS records, afraid that you're going to break your organisation's
    email services - only to discover that, on the contrary, you've effectively accomplished
    nothing. Everything is terrible. You briefly reconsider your career choices.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s one acronym left on your list of things to implement: DMARC. Another
    miserable email security practice to implement, and - you expect - one more solution
    that leads to a dead end.'
  prefs: []
  type: TYPE_NORMAL
- en: Alright. Fine. Screw it. Let's get into it. But if this doesn't work, I give
    up.
  prefs: []
  type: TYPE_NORMAL
- en: DMARC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I have good news for you. DMARC *will* make SPF and DKIM work better.
  prefs: []
  type: TYPE_NORMAL
- en: 'But there''s some bad news, too: it''s a bit complicated, and requires some
    more infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what is DMARC? At its core, it''s actually two things, packaged up into
    one DNS record:'
  prefs: []
  type: TYPE_NORMAL
- en: It's a policy, which declares what email servers should do when an email fails
    SPF and DKIM tests
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a reporting system, so that you can figure out who is trying to spoof your
    domain
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You're probably more interested in 1, but 2 is super important. To understand
    why, let's talk about why SPF and DKIM don't do the thing you thought they did.
  prefs: []
  type: TYPE_NORMAL
- en: Emails are complicated. If you haven't come to that conclusion by this point,
    I'd like to talk to you. It's an old system that's held together by a bazillion
    standards that have been written over decades. People do unexpected things with
    emails. There are intricate systems that were set up in the 90s that still run,
    unobstructed, on top of email.
  prefs: []
  type: TYPE_NORMAL
- en: Changing how emails works tends to break things. And that's what SPF and DKIM
    do.
  prefs: []
  type: TYPE_NORMAL
- en: SPF and DKIM are used as *indicators* of whether an email is spoofed or not.
    But if you added an SPF record on your domain, and you forget to add one of your
    email systems - say, Postmark, which you use to send mission-critical notifications
    from your application to your customers - then your customers could stop getting
    emails. If you added DKIM keys to your domain, but one of your email services
    doesn't support DKIM - or you forgot to add DKIM keys for that service - your
    customers could stop getting emails.
  prefs: []
  type: TYPE_NORMAL
- en: But they *don't* stop getting emails. Some emails will fail both SPF *and* DKIM,
    and still end up in users' inboxes. It's entirely at the discretion of the receiving
    email server, and they can be quite lenient. That's good for the services you
    forgot to add, but it's bad for the spoofers you're trying to squash.
  prefs: []
  type: TYPE_NORMAL
- en: 'You want to do two things:'
  prefs: []
  type: TYPE_NORMAL
- en: Find out what services you misconfigured, so you can fix them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stop spoofers from abusing your domain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The "reporting" part of DMARC helps you, in the early days of your email domain
    security endeavour, figure out what services you misconfigured and need to update.
    You can enable the reporting part, *without* enforcing a strict SPF/DKIM policy.
    In other words: you can use DMARC to find out about emails sent from your domain
    that *would* fail the SPF/DKIM tests, *without* telling email servers that all
    emails failing those tests should be marked as spam.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you're satisfied that you've configured everything, and all the reports
    you get are for spoof emails, you can update your policy to tell email servers
    that those tests are now important. It gives you a bit of time to validate and
    test, before you switch over to enforcing your SPF/DKIM rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementing DMARC goes something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Read this article, bash your head against a wall, openly weep.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement a lenient DMARC record in your domain's DNS, so that you start getting
    reports.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read through the reports you get over the next days and weeks. Check if any
    valid emails are getting flagged for failing DKIM or SPF. If they are, fix them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update your DMARC record to make it less lenient.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unfortunately, implementing DMARC is a process. When I started investigating
    this problem, I was hoping I could copy some good SPF, DKIM, and DMARC records,
    update them to match my domains, and implement them, all within an hour or two.
    That's not how it works. This takes some effort, and you need to let some time
    elapse.
  prefs: []
  type: TYPE_NORMAL
- en: 'In other words: email is complicated.'
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, as I said, I've done the hard work here, because I don't think *anybody*
    should have to figure this out on their own again. For you, this process will
    have to play out over the course of a few days or, more likely, a few weeks, but
    within a few minutes, you can be well on your way.
  prefs: []
  type: TYPE_NORMAL
- en: Let's talk about alignment
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here''s the magic bit of DMARC, that makes all of this sing: it enforces *alignment*
    between either the *envelope from* (aka SMTP MAIL FROM) and the From header, *or*
    the domain on the DKIM signature and the From header. In both cases, the From
    header can be thought of as the anchor: it''s the thing users see, so either SPF
    or DKIM needs to vouch that the From header is what it should be.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This finally does the thing we set out to do. That PHP script at the top will,
    now, only succeed in getting an email to the inbox if one of two things is true:'
  prefs: []
  type: TYPE_NORMAL
- en: The PHP script is running on an IP address that is authorised to send for `example.com`
    using SPF, *and* both the SMTP MAIL FROM and the From header end in `example.com`,
    *or*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The PHP script is hooked up to a mail server that can sign an email with DKIM,
    using a key that's valid for `example.com`, and the From header ends in `example.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (In both cases, assume the `mail()` function is hooked up to a mail server on
    the same IP. Otherwise, the words I have to use just become a jumble. The script
    could be hooked up to an external mail server, and as long as *that* mail server
    is allowed in SPF, or can sign for the domain with DKIM, it'll work fine.)
  prefs: []
  type: TYPE_NORMAL
- en: Now might be a good time to jump back to the [envelope from](#on-envelopes-vs-letters)
    section - it pairs nicely with this section.
  prefs: []
  type: TYPE_NORMAL
- en: How do I use them?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s the good news: you *probably* have SPF and DKIM records set up for
    your domain. These days, most email services will give you the correct DNS records
    to add, and offer tools to verify that they''re set up correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: Implement SPF
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'SPF is set up as a `TXT` record in your domain''s DNS. Here''s what mine looks
    like for simonandrews.ca:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It's declared directly on `simonandrews.ca` as a `TXT` record - not on a subdomain.
    If I were sending emails from `newsletter.simonandrews.ca`, I'd need *another*
    record for that subdomain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most SPF records are going to look like this, though many will have more than
    one `include:` clause. Let''s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '`v=spf1`: Declares this as an SPF record, as distinct from the other things
    you might declare in a TXT record. It''s SPF v1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include:spf.messagingengine.com`: Emails are allowed to be sent from anything
    `spf.messagingengine.com` (Fastmail''s SPF subdomain) allows. Normally, this means
    that `spf.messagingengine.com` has its own SPF DNS record, which will probably
    list some valid IP addresses that emails can be sent from. There''s also one for
    Mandrill, for transactional emails. You can have as many of these as you want.
    If you want to see what `include:` does after you''ve set up SPF on your domain,
    check out the dmarc analyser [SPF Record Checker](https://www.dmarcanalyzer.com/spf/checker/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-all`: This one''s confusing, so pay attention. You might think it''s an argument,
    like you''d use on a terminal command. It''s not. It''s actually saying "fail"
    (`-`) on "all others" (`all`). In other words: "if none of the previous declarations
    matched an email you received from our domain, then the email you received is
    probably spoofed."'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last one, `-all`, is especially confusing because of what many email services
    recommend - which is `~all`. That's a tilde, not a dash. It's easy to miss. The
    tilde means "this should fail, but don't do anything." Some other services suggest
    `?all`, which may look like an encoding error, but actually means "if an email
    doesn't match these domains, it doesn't matter." *If you use `~all` or `?all`,
    your SPF record isn't doing very much, even if you set up DMARC.* Use `-all` instead.
    **Seriously, use `-all` instead.** Always put it at the end of your SPF record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like I said, most email services these days provide the SPF record you should
    set at the time you set up the service, and they will then *validate* your SPF
    record by checking your DNS from their side. You should double check with each
    of your providers that your SPF is currently configured the way it should be.
    In the service''s dashboard or configuration, there''s probably a "domains" section
    that will guide you and validate your settings. Their support teams may be able
    to help, failing that. And, remember: if they suggest `~all` or `?all`, ignore
    it and use `-all` instead.'
  prefs: []
  type: TYPE_NORMAL
- en: '**N.B.** SPF used to be its own DNS record type - instead of declaring a TXT
    record in your domain''s DNS that contains SPF information, you''d declare an
    SPF record. If your domain has SPF-type records and TXT-type records, remove the
    SPF records. If you *only* have SPF-type records, move them to be TXT-type records.
    It''s DNS, so this probably gives you anxiety, but trust me here. SPF-type records
    are going away, and all email services that obey SPF records will read them from
    TXT-type records. You want to do this.'
  prefs: []
  type: TYPE_NORMAL
- en: Main takeaway
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You probably have SPF set up, even if you didn't know you were setting it up
    at the time. It was probably just one of a hundred small tasks you did when you
    signed up for an emailing platform. But you should check it. Use your email services'
    tools to check them, but do a manual check, too. And never forget to use `-all`.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: dmarcian has a good overview of the [syntax for SPF records](https://dmarcian.com/spf-syntax-table/).
    There's quite a lot more available than I've described, but in my experience,
    you don't need all that detail. Regardless, now that you know the basics (congratulations,
    by the way!), this page should make sense.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dmarc analyser [SPF Record Checker](https://www.dmarcanalyzer.com/spf/checker/)
    is a good way to check your SPF records.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement DKIM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With DKIM, you're even more at the whims of your email providers. They might
    provide instructions to set up DKIM, like with SPF. If they don't provide instructions,
    it probably means they don't support DKIM. If they *do* provide instructions,
    you'll want to follow them *to the letter*.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, a DKIM public key lives in your DNS records on a subdomain of `_domainkey.yourdomain.net`
    - for example, for Fastmail, I have keys on `fm1._domainkey.simonandrews.ca`,
    `fm2._domainkey.simonandrews.ca`, and `fm3._domainkey.simonandrews.ca`, per their
    instructions. It might be a `TXT` record, with the key directly inline, or a `CNAME`
    record that points to a public key hosted by your email providers.
  prefs: []
  type: TYPE_NORMAL
- en: When an email gets signed by the sending server using DKIM, the signature will
    include the identifier to use - for example, on my domain, it would be one of
    `fm1`, `fm2`, or `fm3`.
  prefs: []
  type: TYPE_NORMAL
- en: I won't get into the structure here *at all*. It varies by provider, but *will*
    end up with a DNS record underneath `_domainkey.yourdomain.net`. Again, there's
    probably something in a service's Domains dashboard that tells you what to do,
    and validates your configuration. You may have set DKIM up already, and didn't
    know it.
  prefs: []
  type: TYPE_NORMAL
- en: Main takeaway
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Your email providers will tell you how to set up DKIM, if they support it. Trust
    them, and follow their instructions. If they don't support DKIM, it's not the
    end of the world - but make sure SPF is set up correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Postmark have a [very good write-up of DKIM](https://postmarkapp.com/guides/dkim).
    It's better than anything I could write - though understanding the basics, as
    you do now, will help you understand that document on your first read.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once again, dmarc analyser have a good [DKIM record checker](https://www.dmarcanalyzer.com/dkim/dkim-checker/)
    you can use to validate your setup. You'll need your domain name, and the key
    (like `fm1` for Fastmail), because DKIM is declared on subdomains, not your domain
    root.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement DMARC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Oh boy, you're gonna hate this part.
  prefs: []
  type: TYPE_NORMAL
- en: This is the part that I've found most difficult to research. There are a *bunch*
    of companies that are gaming SEO to promote their DMARC analysis service - but
    none of them explain what DMARC is, at least not publicly. They don't give you
    the information to understand what's going on and what you'll need to do - instead,
    they're trying to sell you something that will just fix it for you.
  prefs: []
  type: TYPE_NORMAL
- en: I don't trust companies that game SEO, so I didn't trust any of these articles.
    I wanted to get down to basics.
  prefs: []
  type: TYPE_NORMAL
- en: Here's the bad news, though. I glossed over something earlier, when we talked
    about reporting. Forgive me. I didn't want to scare you away. We're *so close*
    now. You understand most of the concepts we're dealing with, and even if your
    email domains aren't locked down yet, they're definitely better. But... DMARC
    reports are sent as XML files.
  prefs: []
  type: TYPE_NORMAL
- en: I'm so, so sorry.
  prefs: []
  type: TYPE_NORMAL
- en: DMARC reports aren't meant to be read by humans. If you have a domain that has
    any volume of emails, you'll probably get a lot of DMARC reports of spoofing.
    Those reports are meant to be interpreted and aggregated by a machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'In other words: unless you''re willing to manually read XML reports to figure
    out what''s happening (hey, on small domains, that''s totally possible!), you''re
    either going to be setting up some software on a server, or using a third party
    provider. Those companies that are gaming SEO, and being cryptic about what DMARC
    actually is so they can sell you something? You''re probably going to give one
    of them some money.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway. Let''s start with the basics. Pretend that I didn''t just say that.
    While the reports aren''t fun to interpret manually, it''d be good to get our
    hands on some so we can get a feel for what this is. We''re going to go through
    3 phases:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement a lenient DMARC policy and start collecting reports
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait, watch and analyze
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase the strictness of your DMARC policy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's not too bad. Let's start with a super simple DMARC policy.
  prefs: []
  type: TYPE_NORMAL
- en: The lenient policy
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Set up an email address that can receive the reports. I used [postmaster@simonandrews.ca](mailto:postmaster@simonandrews.ca),
    which actually just forwards to my personal email address. Then, I added a `TXT`-type
    DNS record on `_dmarc.simonandrews.ca` that looks like this - yours will go on
    `_dmarc.mydomain.net`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Whoa whoa whoa... what's that? Ok. Let's break it down.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s the *policy* declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`v=DMARC1` says "this is DMARC version 1"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p=none` says "if SPF or DKIM fail, you don''t need to do anything." Remember
    when I said we''d implement a lenient policy? This is it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pct=100` says "apply this policy to *all* emails from my domain"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And then we''ve got the *reporting* declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This tells an email server to send **aggregate** reports of spoofed emails to
    `postmaster@simonandrews.ca`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This tells an email server to send **forensic** reports of spoofed emails to
    `postmaster@simonandrews.ca`
  prefs: []
  type: TYPE_NORMAL
- en: This policy... works. If you set up your own postmaster email address, and use
    this DMARC record, you'll be well on your way. Go ahead and do that. Within a
    few days, you'll start getting reports.
  prefs: []
  type: TYPE_NORMAL
- en: Don't believe me? Try setting up DMARC using a configuration like this, giving
    it a bit of time to propagate (because DNS is slow), and then run the PHP script
    from earlier, using your domain and a "to" email address you own. You won't get
    a report right away, and the spoofed email generated by the script might even
    end up in your inbox. But within 24 hours, you'll probably get your first DMARC
    report.
  prefs: []
  type: TYPE_NORMAL
- en: Sit back and watch
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Start collecting these reports. If it's just a personal domain, you might be
    happy to look through them manually. If it's your company's domain, you might
    get a high volume of reports - you'll probably want to stand up a DMARC server
    like [lafayette](https://github.com/LinkedInAttic/lafayette), or use a third party
    service, to handle these reports.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless, after you've got some reports through, start analysing the reports.
    Are emails failing SPF or DKIM tests, that shouldn't be? Did you misconfigure
    a service? Are you or your company sending emails with a service you weren't aware
    of? Or, is there a spoofer who's aggressively abusing your domain?
  prefs: []
  type: TYPE_NORMAL
- en: What can you expect? Well, here's a report I got, after I ran that PHP script
    from earlier and sent to a Gmail address I have. I added in some comments, to
    outline what it's telling you.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you're running a large domain, you'll get a bunch of these reports. If you're
    running a small one, you might be able to handle it yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless, with a bit of time, you'll be confident you've set the policy correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Increase the strictness
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When we first added DMARC, we set `p=none`. That says, basically, "don't *do*
    anything, just tell me about SPF and DKIM when they fail."
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re comfortable with the reports you''ve been receiving - that is, all
    of the emails in the reports are from spoofers, and all of the emails *you''re*
    sending are passing the tests - you can increase this parameter. You have two
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set `p=quarantine`. This tells the receiving server that, if both SPF and DKIM
    fail, the email should be quarantined. That might mean it gets marked as spam
    right away, and sent to the receiver''s spam folder. It might mean that it''s
    put in a quarantine where an administrator for the receiving domain can approve
    or reject it. Either way, this option is good: it locks your domain down, but
    gives users recourse when something goes wrong.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `p=reject`. This is stricter. It tells the receiving server that, if both
    SPF and DKIM fail, the email should just be rejected. If you're *absolutely confident*
    that you've got everything configured correctly, *and* you're confident that future
    services will be set up correctly, then this is probably the option for you. I'd
    say it's fine to set `p=quarantine`, and then ramp yourself up to set `p=reject`
    at a later date.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's in your hands now, though.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: dmarc.org have a good overview of [what DMARC records are made of](https://dmarc.org/overview/).
    If you want to skip right to the meaty stuff, read the section titled "Anatomy
    of a DMARC resource record in the DNS"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dmarc.org also have a list of [code and libraries](https://dmarc.org/resources/code-and-libraries/)
    you can use. That's where I found lafayette.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dmarcian have a [DMARC Record Checker](https://dmarcian.com/dmarc-inspector/),
    which will help validate that your policy is set up well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Postmark have a [guide to DMARC tools](https://postmarkapp.com/blog/best-dmarc-tools).
    This guide is a good, fairly-unbiased breakdown. You're likely going to pay for
    a service here, ~~and Postmark come at it with an unbiased perspective because
    - as of this writing - they don't provide such a service themselves.~~ but Postmark
    give a reasonable breakdown (it turns out DMARC Digests is a service they provide,
    so it's not an unbiased source. Thanks to [max1cc on Hacker News](https://news.ycombinator.com/item?id=28193601)
    for pointing this out.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Not receiving reports? You might need EDV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Thanks to [Nicolas Lenz](https://www.eisfunke.com) for reaching out with this!*'
  prefs: []
  type: TYPE_NORMAL
- en: If you've set everything up right, and are waiting for DMARC reports that just
    aren't coming, you might need to set up EDV.
  prefs: []
  type: TYPE_NORMAL
- en: You can't send DMARC reports to *just anyone*. I can't, for example, set up
    DMARC on `simonandrews.ca` and send the reports to `tim@apple.com`. It's likely
    that Tim Cook doesn't want to know about the deliverability of mail from my domain
    (his loss). To prevent annoying, unsolicited reports, DMARC implements a system
    known as EDV (which, depending on who you talk to, means either External Domain
    Verification or External Destination Verification).
  prefs: []
  type: TYPE_NORMAL
- en: 'So, when might you need it? You''d need to meet these two main conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''re sending your DMARC reports to a different domain. (EDV wouldn''t be
    necessary if I were sending reports from `simonandrews.ca` to `postmaster@simonandrews.ca`,
    because it''s not external. Remember: *external* domain verification.)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You're *not* using a third-party DMARC reporting service. (These tools should
    have EDV set up automatically.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example that *would* require EDV: I''m setting up DMARC on `sadl.io`, a
    domain that I own, and I want to send reports to [postmaster@simonandrews.ca](mailto:postmaster@simonandrews.ca),
    an email address on another domain that I own. In order for reporting to work,
    I''d need to configure DMARC on `sadl.io`, *and* configure EDV on `simonandrews.ca`
    to allow DMARC reports related to `sadl.io`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you understand all of that, it''s easy: add a DNS `TXT` record on the
    receiving domain (`simonandrews.ca`, in this case), on the `sadl.io._report._dmarc`
    subdomain, with a value of `v=DMARC1`. In other words, something like...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, before a provider sends off a report to `postmaster@simonandrews.ca`, for
    emails related to `sadl.io`, it'll check `sadl.io._report._dmarc.simonandrews.ca`
    to see if it's willing to receive them.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more on the dmarc.org article, [Receiving DMARC Reports Outside
    Your Domain](https://dmarc.org/2015/08/receiving-dmarc-reports-outside-your-domain/).
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Chances are, you should implement all of these. But your implementation will
    probably fork off from mine, as you learn about it.
  prefs: []
  type: TYPE_NORMAL
- en: My main goal here was to provide you with a vocabulary, so you understand what
    SPF, DKIM, and DMARC are. I'm not an expert. I probably got some things wrong
    here. And this article, explicitly, only goes into the basics.
  prefs: []
  type: TYPE_NORMAL
- en: But hopefully, now that you're here, you've got a basic understanding, and perhaps
    the start of an implementation. You can go read some other posts, and you won't
    be completely lost. I'd suggest looking at some of the resources I linked - they're
    not too complicated, and most won't try to sell you things.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for coming along on this crazy, not-really-that-satisfying journey with
    me. I'll try and keep this post updated as I learn more, and welcome any and all
    feedback you might have. If I got anything wrong here (I'm absolutely certain
    I did), please reach out to [hello@sadl.io](mailto:hello@sadl.io).
  prefs: []
  type: TYPE_NORMAL
- en: Corrections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can take a look through all the changes I've made [on GitHub](https://github.com/simon360/simonandrews.ca/commits/main/pages/articles/how-to-set-up-spf-dkim-dmarc.mdx)
    - if you've read this article before, and just want to check the new stuff, I'd
    suggest reading the diffs.
  prefs: []
  type: TYPE_NORMAL
- en: A previous version of this article claimed that Postmark provided an unbiased
    view on DMARC analysis services, because they did not provide such a service.
    In fact, they do, called DMARC Digests, which is mentioned in their guide. **Thanks
    to [max1cc on Hacker News](https://news.ycombinator.com/item?id=28193601) for
    correcting this.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The SPF section claims that SPF works on the From header. In fact, it works
    on the "envelope from", which only exists at the SMTP transport level. Rather
    than correcting this (I *did* try, but the section came out too complex), I added
    an additional section that explains the difference. **Thanks to Liam for reaching
    out over email and setting me straight.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Last updated: 17 August 2021, 7:10 PM BST'
  prefs: []
  type: TYPE_NORMAL
