- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:37:03'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: PLang - next evolution in programming languages
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://plang.is](https://plang.is)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Heads up: Building code costs money**'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: Each code line incurs usually between $0.03 - $0.15 fee via LLM. The payoff?
    Exceptional efficiency gains.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: '**Early Adopters Note: PLang is at version 0.1.**'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Be prepared for breaking changes and the presence of bugs. Get involved in our
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '[community on Discord](https://discord.gg/A8kYUymsDD)'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: or contribute by reporting
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: '[issues on GitHub](https://github.com/PLangHQ/plang/issues)'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: . If you're keen on aiding PLang's growth, check out how to contribute on our
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: '[GitHub page](https://github.com/PLangHQ)'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: .
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: Hello PLang world
  id: totrans-split-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's easy to create your first application.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Open your favorite text editor.
  id: totrans-split-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in.
  id: totrans-split-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Start - write out "Hello PLang world"`'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: Now build & run using (you must
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: '[install PLang first](https://github.com/PLangHQ/plang/blob/main/Documentation/Install.md)'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: plang exec
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: '*On first build you will be ask to pre-purchase credits*'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: Rapid development
  id: totrans-split-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You have never seen software being built this fast.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: Simple development
  id: totrans-split-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Just write what you want to happen. `select newest users, 50 per page` and PLang
    will give you 50 latest users from your database
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: No nonsense development
  id: totrans-split-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Focus on **what** the app should do, not *how*.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: No config hell
  id: totrans-split-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are no configurations to set. Just run. If the programming language needs
    something from you, it will ask you.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  id: totrans-split-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of course there are %variables% `- set %name% as "Dwight Shrewd"`
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: Functions
  id: totrans-split-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: They are called Goals, you can call any Goal and send parameters `- call !FooBar
    %name%`
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: Conditions and lists
  id: totrans-split-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You write your if statement, like you want it. Go through lists like never before.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: '`- if %products.Count% > 0 then - go through %products% call !ProcessProduct`'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: C# developer? Yes, that is the List.Count property
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: Retry, Caching and Error Handling simpler than ever
  id: totrans-split-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is one of those WTF! Check this out!
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: '`- select name from user where id=%id% cache result for 10 minutes retry 10
    times over 5 min period on error call !NotifyAdmin`'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: It caches the results if it returns data, if there is an error it will try again
    and if that fails the retries it calls a function to notify admin
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: Database support
  id: totrans-split-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create tables, views, triggers in Plang. With SQLite, SqlServer, MySql, Postresql
    or any IDbConnection implementation
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: '*Create Setup.goal file in your directory, this is the content* `Setup - create
    table comments, columns text(not null), sentiment(not null), created(datetime,
    default now)`'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: LLM built-in
  id: totrans-split-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Simply ask the LLM to evaluate request and you can work with the response written
    to a variable you can work with `Start - [llm] system: is the user content positive
    or negative user: %userInput% scheme: {sentiment:positive|negative} write to %sentiment%
    - insert into comments, text=%userInput%, %sentiment%` Now run'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: plang exec userInput="This is awesome"
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: Webserver
  id: totrans-split-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Start your webserver in one line `Start - start webserver` Now run
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: plang exec
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: REST support
  id: totrans-split-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Want to talk with a REST api, easy, it does everything for you. *Create RestTest.goal
    in your folder* `RestTest - get http://https://cat-fact.herokuapp.com/facts write
    to %json% - write out %json.text%`
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: Now run
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: plang exec RestTest
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: Messages built-in
  id: totrans-split-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can send message between users in a simple way. All encrypted (AES256)
    `Start - send message to %publicKey% content: Hey, how are you doing today, have
    your tried PLang?`'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: Built-in scraper
  id: totrans-split-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Scrape your favorite website, store it for later. `Start - go to https://example.org/
    - click, "More information..." link - extract .help-article into %helpContent%
    - write out %helpContent%`
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: Built-in authentication
  id: totrans-split-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The language has built in authentication, so no need to handle passwords and
    emails anymore when communicating with other Plang services. `- get http://api.plang.is/api/balance
    write to %balance% - write out ''My balance is: %balance%''` The end service can
    validate that the request is coming from you. No need for username and passwords.
    User management and registration becomes simpler & more private'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: UI - early development
  id: totrans-split-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Describe the layout you want `- center content, horizontal and vertical - create
    login form, #username, #password, TOS (https://plang.is/tos.html) submit to !Login`
    This will give platform nuetrality, desktop, mobile, watch, tv, or any other'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: Events with super powers
  id: totrans-split-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*You can add your own events into any Goal or Step* `- before each goal, call
    !LogGoal - before step nr 2 in !Process.Image, call !Preprocess.Image - on error
    on !Fetch.Data, call !Report.SysAdmin`'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: View Source x 100
  id: totrans-split-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The code is verifiable*'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: You can see all the source code that are built using PLang.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
- en: You can use it to learn and to modify the goals.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: All build files are series of json files with instruction on how the PLang runtime
    should act
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
- en: Test your code
  id: totrans-split-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just write what you want to test
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: Some of the other features
  id: totrans-split-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Run Python Script
  id: totrans-split-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Execute Python scripts effortlessly. `- run processImage.py %imagePath%`
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
- en: IDE Support
  id: totrans-split-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download VS Code extension to help with development
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
- en: '[Download now](https://marketplace.visualstudio.com/items?itemName=PlangHQ.plang-extension)'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
- en: Caching Made Easy
  id: totrans-split-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Efficient data caching mechanism. Need Redis or other, not a problem.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
- en: OS Independence
  id: totrans-split-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I need [help with this one](https://github.com/PLangHQ), but underlying code
    is c#, fully os indepenant.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
- en: Build Events
  id: totrans-split-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This powerfull for analyzing, debugging, etc.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
- en: Dependency Injection
  id: totrans-split-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Want to user your own logger? `@logger=MyLogger.Logger` or llm, caching, settings,
    encryption, etc.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
- en: Schedule Tasks
  id: totrans-split-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So simple, it's crazy `- every other monday, at 11:23, call !ProcessUsers` or
    sleep `- wait for 2 sec`
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
- en: Compression
  id: totrans-split-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Need to work with zip files `- unzip %filepath% to %newPath%` `- compress %filepath%
    to %compressedPath%`
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
- en: Run Command Line Apps
  id: totrans-split-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run any terminal/command line app `- convert video.mp4 to audio.mp3 using ffmpeg`
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
- en: Privacy Control
  id: totrans-split-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Goal only have access to the path they run from. If they need access outside,
    it will ask for permission
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
- en: App Extensibility
  id: totrans-split-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Inject your own logger, settings, llm service, database, caching, encryption
    modules. They are super simple to write.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
- en: Solid foundation
  id: totrans-split-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Plang language is written in C#, it builds and runs on the C# runtime. Secure,
    fast and solid foundation
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
- en: How do I buy?
  id: totrans-split-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PLang is an open source, so the software itself is free.
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
- en: Translating your request to code uses an LLM service, this service is not free
    of charge.
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
- en: When you run 'plang build' for the first time, you are asked to buy a voucher
    for the amount of your choosing.
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
- en: You can also use OpenAI API service without buying voucher from PLang.
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
- en: Then OpenAI prices apply and it does not go through PLang service
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
- en: Buying voucher for the service supports the development of PLang, so please
    support the project :)
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
- en: Price table
  id: totrans-split-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Building code
  id: totrans-split-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Input $0.02 / 1K tokens
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
- en: Output $0.06 / 1K tokens
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
- en: This is when you run 'plang build'.
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
- en: Llm request at runtime
  id: totrans-split-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: gpt-4-turbo (default)
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
- en: Input $0.02 / 1K tokens
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
- en: Output $0.06 / 1K tokens
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
- en: This is when you run 'plang run' and use the [llm] module
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
- en: Llm request at runtime
  id: totrans-split-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: gpt-3.5
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
- en: Input $0.0030 / 1K tokens
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
- en: Output $0.004 / 1K tokens
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
- en: This is when you run 'plang run' and use the [llm] module with gpt-4-turbo parameter
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
