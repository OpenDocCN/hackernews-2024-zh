- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 12:35:14'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 12:35:14
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: An Introduction to Modern CMake · Modern CMake
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代CMake简介 · 现代CMake
- en: 来源：[https://cliutils.gitlab.io/modern-cmake/](https://cliutils.gitlab.io/modern-cmake/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://cliutils.gitlab.io/modern-cmake/](https://cliutils.gitlab.io/modern-cmake/)
- en: An Introduction to Modern CMake
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代CMake简介
- en: 'People love to hate build systems. Just watch the talks from CppCon17 to see
    examples of developers making the state of build systems the brunt of jokes. This
    raises the question: Why? Certainly there are no shortage of problems when building.
    But I think that, in 2023, we have a very good solution to quite a few of those
    problems. It''s CMake. Not CMake 2.8 though; that was released before C++11 even
    existed! Nor the horrible examples out there for CMake (even those posted on KitWare''s
    own tutorials list). I''m talking about Modern CMake. CMake 3.5+, maybe even CMake
    3.29+! It''s clean, powerful, and elegant, so you can spend most of your time
    coding, not adding lines to an unreadable, unmaintainable Make (Or CMake 2) file.
    And CMake 3.11+ is supposed to be significantly faster, as well!'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 人们喜欢抱怨构建系统。只需观看CppCon17的演讲，就能看到开发人员将构建系统的状态作为笑话的对象。这引发了一个问题：为什么？当然，在构建时存在许多问题。但我认为，在2023年，我们对这些问题有了一个非常好的解决方案。那就是CMake。不过不是CMake
    2.8；那是在C++11甚至还不存在的时候发布的！也不是CMake的可怕示例（甚至包括KitWare自己教程列表中发布的示例）。我说的是现代CMake。CMake
    3.5+，甚至CMake 3.29+！它简洁、强大、优雅，这样你就可以把大部分时间用在编码上，而不是在难以理解、难以维护的Make（或CMake 2）文件中添加行。而且，CMake
    3.11+的速度据说要显著更快！
- en: '*Are you interested in using CMake to build Python packages? I''m working on
    scikit-build-core, [proposal described here](https://iscinumpy.gitlab.io/post/scikit-build-proposal/)!
    Let me know if you have a use case!*'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*你有兴趣使用CMake来构建Python软件包吗？我正在研究scikit-build-core，[提案描述在此](https://iscinumpy.gitlab.io/post/scikit-build-proposal/)！如果你有使用例子，请告诉我！*'
- en: '*In short, here are the most likely questions in your mind if you are considering
    Modern CMake:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*简而言之，如果你正在考虑使用现代CMake，你最可能脑中出现的问题有：*'
- en: Why do I need a good build system?
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么我需要一个好的构建系统？
- en: Do any of the following apply to you?
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪个情况适用于你？
- en: You want to avoid hard-coding paths
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想避免硬编码路径
- en: You need to build a package on more than one computer
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要在多台计算机上构建一个软件包
- en: You want to use CI (continuous integration)
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想要使用CI（持续集成）
- en: You need to support different OSs (maybe even just flavors of Unix)
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要支持不同的操作系统（甚至只是Unix的不同版本）
- en: You want to support multiple compilers
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想支持多个编译器
- en: You want to use an IDE, but maybe not all of the time
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想要使用集成开发环境，但可能不是全部时间
- en: You want to describe how your program is structured logically, not flags and
    commands
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想要描述你的程序在逻辑上是如何结构化的，而不只是标志和命令
- en: You want to use a library
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想要使用一个库
- en: You want to use tools, like Clang-Tidy, to help you code
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想要使用工具，比如Clang-Tidy，来帮助你编码
- en: You want to use a debugger
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想要使用调试器
- en: If so, you'll benefit from a CMake-like build system.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样，你将受益于类似于CMake的构建系统。
- en: Why must the answer be CMake?
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么答案必须是CMake？
- en: 'Build systems are a hot topic. Of course there are many options. But even a
    really good one, or one that re-uses a familiar syntax, can''t come close to CMake.
    Why? Support. Every IDE supports CMake (or CMake supports that IDE). More packages
    use CMake than any other system. So, if you use a library that is designed to
    be included in your code, you have a choice: Make your own build system, or use
    one of the provided ones, and that will almost always include CMake. And that
    will quickly be the common denominator if you include multiple projects. And,
    if you need a library that''s preinstalled, the chances of it having a find CMake
    script or config CMake script are excellent.'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 构建系统是一个热门话题。当然，有很多选择。但即使是一个真正好的选择，或者是一个重复使用熟悉语法的选择，也无法与CMake相提并论。为什么？支持。每个集成开发环境都支持CMake（或CMake支持该集成开发环境）。比起任何其他系统，更多的软件包使用CMake。因此，如果你使用一个旨在包含在你的代码中的库，你可以选择：自己制作一个构建系统，或者使用提供的系统之一，几乎总是包括CMake。如果你包含了多个项目，那么CMake很快就会成为共同的因素。并且，如果你需要一个预安装的库，那么它有一个搜索CMake脚本或配置CMake脚本的可能性非常大。
- en: Why use a Modern CMake?
  id: totrans-split-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要使用现代CMake？
- en: Around CMake 2.6-2.8, CMake started taking over. It was in most of the package
    managers for Linux OS's, and was being used in lots of packages.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在CMake 2.6-2.8的时候，CMake开始盛行。它在大多数Linux操作系统的软件包管理器中，以及许多软件包中被使用。
- en: Then Python 3 came out.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Python 3发布了。
- en: I know, this should have nothing whatsoever to do with CMake.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道，这实际上与CMake毫不相关。
- en: But it had a 3. And it followed 2. And it was a hard, ugly, transition that
    is still ongoing in some places, even today.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但它有一个 3。并且它跟随了 2。并且这是一个艰难、丑陋的过渡，在某些地方甚至今天仍在进行中。
- en: I believe that CMake 3 had the bad luck to follow Python 3.^([1](#fn_1)) Even
    though every version of CMake is insanely backward compatible, the 3 series was
    treated as if it were something new. And so, you'll find OSs like CentOS7 with
    GCC 4.8, with almost-complete C++14 support, and CMake 2.8, which came out years
    before C++11.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为 CMake 3 不走运，因为它紧随 Python 3.^([1](#fn_1))，尽管每个 CMake 版本都极其向后兼容，但 3 系列被当作是全新的东西对待。因此，你会发现像
    CentOS7 这样的操作系统配备 GCC 4.8，几乎完全支持 C++14，但使用的却是几年前发布的 CMake 2.8，甚至连 C++11 都不支持。
- en: You really should *at least* use a version of CMake that came out after your
    compiler, since it needs to know compiler flags, etc, for that version. And, since
    CMake will dumb itself down to the minimum required version in your CMake file,
    installing a new CMake, even system wide, is pretty safe. You should *at least*
    install it locally. It's easy (1-2 lines in many cases), and you'll find that
    5 minutes of work will save you hundreds of lines and hours of `CMakeLists.txt`
    writing, and will be much easier to maintain in the long run.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你至少应该使用比你的编译器发布更晚的 CMake 版本，因为它需要了解该版本的编译器标志等等。而且，由于 CMake 会将自己降级到你的 CMake 文件中所需的最低版本，安装一个新的
    CMake，即使是系统范围内，也是相当安全的。你至少应该在本地安装它。这很容易（在许多情况下只需 1-2 行），而且你会发现，投入 5 分钟的工作将为你节省数百行和数小时的
    `CMakeLists.txt` 编写，并且长期来看更易于维护。
- en: This book tries to solve the problem of the poor examples and best practices
    that you'll find proliferating the web.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本书试图解决网上泛滥的糟糕示例和最佳实践问题。
- en: Other sources
  id: totrans-split-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他来源
- en: 'Other material from the original author of this book:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 其他这本书的原作者的资料：
- en: 'There are some other places to find good information on the web. Here are some
    of them:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在网上还有一些其他地方可以找到好的信息。以下是其中一些：
- en: Credits
  id: totrans-split-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 致谢
- en: Modern CMake was originally written by [Henry Schreiner](https://iscinumpy.gitlab.io).
    Other contributors can be found [listed on GitLab](https://gitlab.com/CLIUtils/modern-cmake/-/network/master).
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 CMake 最初由[Henry Schreiner](https://iscinumpy.gitlab.io)编写。其他贡献者可以在[GitLab
    上找到](https://gitlab.com/CLIUtils/modern-cmake/-/network/master)。
- en: ¹. CMake 3.0 also removed several long deprecated features from very old versions
    of CMake and make one very tiny backwards incompatible change to syntax related
    to square brackets, so this is not entirely fair; there might be some very, very
    old CMake files that would stop working with 3\. I've never seen one, though.
    [↩](#reffn_1 "Jump back to footnote [1] in the text.")*
  id: totrans-split-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ¹. CMake 3.0 还移除了几个非常旧版本的 CMake 的长期弃用功能，并对与方括号相关的语法进行了一个非常微小的不兼容更改，所以这并不完全公平；可能会有一些非常、非常旧的
    CMake 文件在 3\ 版本下停止工作，但我从未见过这种情况。[↩](#reffn_1 "跳转回文中的脚注 [1]")*
