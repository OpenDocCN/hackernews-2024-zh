["```\ntypescript\n\nexport  const  processVideo  =  inngest.createFunction(\n\n {\n\n name:  \"Process video upload\", id:  \"process-video\",\n\n concurrency: {\n\n limit:  1,\n\n key:  `event.data.userId`,  // You can use any piece of data from the event payload\n\n },\n\n priority: {\n\n run:  \"event.data.billingPlan != 'free' ? 120 : 0\",\n\n },\n\n },\n\n { event:  \"video.uploaded\" },\n\n  async ({ event, step }) => {\n\n  const  transcript  =  await  step.run('transcribe-video',  async () => {\n\n  return  deepgram.transcribe(event.data.videoUrl);\n\n });\n\n  const  summary  =  await  step.run('summarize-transcript',  async () => {\n\n  return  llm.createCompletion({\n\n model:  \"gpt-3.5-turbo\",\n\n prompt:  createSummaryPrompt(transcript),\n\n });\n\n });\n\n  await  step.run('write-to-db',  async () => {\n\n  await  db.videoSummaries.upsert({\n\n videoId:  event.data.videoId,\n\n transcript,\n\n summary,\n\n });\n\n });\n\n }\n\n)\n\n```", "```\npython\n\n# celery_app.py\n\ndef  user_task_router(name,  args,  kwargs,  options,  task=None,  **kw):\n\n user_id = kwargs.get('user_id')\n\n  if user_id:\n\n  return  {\n\n  'queue':  f'user_{user_id}',\n\n  'priority': kwargs.get('priority', 10),  # Get the priority from kwargs, default to 10\n\n  }\n\n  return  None\n\napp =  Celery('tasks', broker='amqp://guest:guest@localhost:5672//')\n\napp.conf.update(\n\n worker_concurrency=4,\n\n worker_prefetch_multiplier=1,\n\n task_routes = (user_task_router,),\n\n task_default_queue =  'default',\n\n task_default_priority =  0,\n\n task_queue_max_priority =  10,\n\n task_queues = [Queue('default', routing_key='default')],\n\n)\n\n```", "```\npython\n\n# tasks.py\n\nfrom celery import shared_task\n\nfrom utils import transcribe_video, summarize_transcript, write_to_db\n\n@shared_task(name='process_video')\n\ndef  process_video(event,  user_id,  priority=10):\n\n video_path = event['data']['videoPath']\n\n  # Transcribe the video\n\n transcript =  transcribe_video(video_path, user_id, priority)\n\n  # Summarize the transcript\n\n summary =  summarize_transcript(transcript, user_id, priority)\n\n  # Write to the database\n\n  write_to_db(video_path, transcript, summary, user_id, priority)\n\n@shared_task\n\ndef  process_video_event(event,  priority=10):\n\n user_id = event['data']['userId']\n\n process_video.apply_async(args=[event], kwargs={'user_id': user_id, 'priority': priority})\n\n```", "```\ntypescript\n\nexport  const  handlePayments  =  inngest.createFunction(\n\n {\n\n name:  \"Handle payments\", id:  \"handle-payments\"\n\n },\n\n { event:  \"api/invoice.created\" },\n\n  async ({ event, step }) => {\n\n  // Wait until the next billing date\n\n  await  step.sleepUntil(\"wait-for-billing-date\",  event.data.invoiceDate);\n\n  // Steps automatically retry on error, and only run\n\n  // once on success - automatically, with no work.\n\n  const  charge  =  await  step.run(\"charge\",  async () => {\n\n  return  await  stripe.charges.create({\n\n amount:  event.data.amount,\n\n });\n\n });\n\n  await  step.run(\"update-db\",  async () => {\n\n  return  await  db.payments.upsert(charge);\n\n });\n\n  await  step.run(\"send-receipt\",  async () => {\n\n  return  await  resend.emails.send({\n\n to:  event.user.email,\n\n subject:  \"Your receipt for Inngest\",\n\n });\n\n });\n\n }\n\n);\n\n```"]