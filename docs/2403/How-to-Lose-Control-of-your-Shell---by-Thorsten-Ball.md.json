["```\n`fn load_shell_environment(dir: &Path) -> Result<HashMap<String, String>> {\n    // Get the $SHELL\n    let shell = std::env::var(\"SHELL\")?;\n\n    // Construct the command we want the $SHELL to execute\n    let command = format!(\"cd {:?}; /usr/bin/env -0;\", dir);\n\n    // Launch the $SHELL as an interactive shell (so the user's rc files are used)\n    // and execute `command`:\n    let output = std::process::Command::new(&shell)\n        .args([\"-i\", \"-c\", &command])\n        .output()?;\n\n    // [... check exit code, get stdout, turn stdout into HashMap, etc. ...]\n}`\n```", "```\n`let command = format!(\"/usr/bin/env;\");`\n```", "```\n`let command = format!(\"echo lol\");`\n```", "```\n`let command = format!(\"/usr/bin/env; echo lol\");`\n```", "```\n`let command = format!(\"ls\");`\n```", "```\n`let command = format!(\"/usr/bin/env; exit 0;\");`\n```", "```\n`fn get_process_group_id(fd: i32) -> io::Result<libc::pid_t> {\n    let pgid = unsafe { libc::tcgetpgrp(fd) };\n    if pgid == -1 {\n        Err(io::Error::last_os_error())\n    } else {\n        Ok(pgid)\n    }\n}`\n```", "```\n`process group before: 54530\nshell exited with status: exit status: 0\nprocess group after: 54571`\n```", "```\n`let cmd = std::process::Command::new(\"/bin/zsh\");\ncmd.args([\"-i\", \"-c\", \"/usr/bin/env\"]);\n\n// Set a hook that will be executed right after `fork`, but before `exec`:\nunsafe {\n    cmd.pre_exec(|| {\n        if libc::setsid() == -1 {\n            return Err(std::io::Error::last_os_error());\n        }\n        Ok(())\n    });\n}\n\n// Run the command\nlet output = cmd.output().unwrap();`\n```", "```\n`process group before: 54530\nshell exited with status: exit status: 0\nprocess group after: 54530`\n```"]