- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:38:31'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:38:31
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The algebraic structure of _Infinite Craft_ – Arthur O'Dwyer – Stuff mostly
    about C++
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: _无尽工艺_的代数结构 – Arthur O'Dwyer – 主要关于C++
- en: 来源：[https://quuxplusone.github.io/blog/2024/03/03/infinite-craft-theory/](https://quuxplusone.github.io/blog/2024/03/03/infinite-craft-theory/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://quuxplusone.github.io/blog/2024/03/03/infinite-craft-theory/](https://quuxplusone.github.io/blog/2024/03/03/infinite-craft-theory/)
- en: Last month I [wrote](/blog/2024/02/08/infinite-craft/) about Neal Agarwal’s
    web game [*Infinite Craft*](https://neal.fun/infinite-craft/). Tom Fang wrote
    to tell me he’s created [a dictionary](https://szdytom.github.io/infinite-craft-dictionary/)
    of *Infinite Craft* elements, along with their uses and recipes. This got me thinking
    about the game’s mathematical structure.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 上个月我写了一篇关于Neal Agarwal的网页游戏[*无尽工艺*](https://neal.fun/infinite-craft/)的文章。Tom
    Fang写信告诉我他创建了[*无尽工艺*](https://szdytom.github.io/infinite-craft-dictionary/)元素、用途和配方的字典。这让我开始思考这款游戏的数学结构。
- en: 'By “mathematical structure,” I mean something like how we make recipes and
    the metrics by which we might compare one recipe to another. For example, if our
    goal is to make Sandwich, we could do it like this:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过“数学结构”，我指的是我们如何制作配方以及我们可能用来比较一种配方与另一种配方的度量标准。例如，如果我们的目标是制作三明治，我们可以这样做：
- en: '[PRE0]'
  id: totrans-split-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Or like this:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 或者像这样：
- en: '[PRE1]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If we diagram these recipes, we find that the first one is *shallower*, in the
    sense that we combine only the primitive elements, elements made *from* the primitives
    (Wave, Steam, Plant), and elements made from *those* elements (Sand, Tea). But
    the second one is *terser*, in the sense that it is five lines long instead of
    six.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这些配方进行图表化，我们会发现第一种配方在某种意义上更*浅显*，因为我们仅组合了基本元素、由基本元素（波浪、蒸汽、植物）制造的元素以及由*这些*元素制造的元素（沙子、茶）。但第二种配方更*简洁*，因为它只有五行而不是六行。
- en: 'At first glance, the world of *Infinite Craft* forms a [directed hypergraph](https://en.wikipedia.org/wiki/Hypergraph)
    with a lot of structure: each directed hyperedge connects a set of one or two
    vertices to a set of exactly one vertex. But a recipe isn’t merely a “path” on
    that hypergraph! Mathematicians define the hypergraph analogue of a “path” as
    a set of incident hyperedges — “incidence” meaning that the edges share *at least
    one* vertex. In this sense there is a “path” from the starting elements to Sandwich
    that consists of only a single hyperedge; namely,'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，*无尽工艺*的世界形成一个[有向超图](https://en.wikipedia.org/wiki/Hypergraph)，具有很强的结构性：每个有向超边连接了一个或两个顶点到正好一个顶点的集合。但配方不仅仅是超图上的“路径”！数学家定义了超图的“路径”的类似物，即一组相交的超边
    — “相交”意味着边至少共享*一个*顶点。在这个意义上，从起始元素到三明治存在一个仅由一个超边组成的“路径”；即，
- en: '[PRE2]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That definition of “path” doesn’t help us.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那个“路径”的定义对我们没有帮助。
- en: '[I asked MathOverflow](https://mathoverflow.net/questions/466176/what-is-the-proper-name-for-this-tersest-path-problem-in-infinite-craft),
    and they pointed me to another example of the same problem: [addition chains](https://en.wikipedia.org/wiki/Addition_chain).
    An “addition chain” for an integer \(n\) is a sequence starting with 1 and ending
    with \(n\), such that each element in the sequence is the sum of exactly two previous
    elements. For example, we might make 31 in any of these three ways:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[我向MathOverflow提问](https://mathoverflow.net/questions/466176/what-is-the-proper-name-for-this-tersest-path-problem-in-infinite-craft)，他们指向了另一个相同问题的例子：[加法链](https://en.wikipedia.org/wiki/Addition_chain)。对于整数\(n\)的“加法链”是从1开始以\(n\)结束的序列，使得序列中的每个元素都是前两个元素的和。例如，我们可以用以下三种方法之一制作31：'
- en: '[PRE3]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The middle chain is *shallowest*, but the right-hand one is *tersest*.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 中间链是*最浅显*的，但右侧链是*最简洁*的。
- en: 'Addition chains are idiomatically written as just an increasing sequence of
    integers: (1 2 3 6 12 14 17 31). We don’t need to specify how each integer (say,
    17) is constructed from the preceding elements, because it’s obvious. We could
    represent *Infinite Craft* recipes just as concisely — (Wave Sand Glass Wine Sandwich)
    — but that wouldn’t be very reader-friendly because it’s not obvious *which* two
    preceding elements combine to make, say, Wine.'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 加法链惯例上只写成一个递增的整数序列：(1 2 3 6 12 14 17 31)。我们不需要指明每个整数（比如17）是如何由前面的元素构成的，因为这是显而易见的。我们可以同样简洁地表示*无尽工艺*的配方
    — (波浪 沙 玻璃 酒 三明治) — 但这不够友好，因为不明显*哪*两个前置元素组合成了酒。
- en: '* * *'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Finding the tersest addition chain is directly relevant to the world of computer
    programming. Suppose we want to calculate the 31st power of an unknown number
    in register `A`, using only multiplication. Then we can do any of:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找最简洁的加法链直接关系到计算机编程领域。假设我们想要计算未知数的31次方并存储在寄存器 `A` 中，只使用乘法。那么我们可以选择以下任意一种方法：
- en: '[PRE4]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Our “shallowness” metric translates into a measure of the [data dependencies](https://en.wikipedia.org/wiki/Data_dependency)
    involved in these computations. The middle program, being the shallowest, is also
    the *fastest* on any machine with at least two multiplier units.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的“浅度”度量转化为衡量这些计算中所涉及的[数据依赖关系](https://en.wikipedia.org/wiki/Data_dependency)的度量。在至少拥有两个乘法器的任何机器上，中间的程序因为最浅，所以速度也是最*快*的。
- en: 'Another practically relevant metric for the “goodness” of a chain is its *width*:
    the number of registers it uses in its most optimal [coloring](https://en.wikipedia.org/wiki/Register_allocation#Graph-coloring_allocation).
    The left-hand recipe above is the *narrowest*, with width 2, whereas the others
    have width 3:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个实际相关的链的“好度量”是其*宽度*：它在其最优[着色](https://en.wikipedia.org/wiki/Register_allocation#Graph-coloring_allocation)中使用的寄存器数量。上面的左侧示例是*最窄*的，宽度为2，而其他示例的宽度为3：
- en: '[PRE5]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The left-hand recipe corresponds to [Russian peasant multiplication](https://en.wikipedia.org/wiki/Ancient_Egyptian_multiplication),
    which always generates an addition chain of width 2\. For in-depth coverage of
    various algorithms to generate addition chains, see [Knuth Volume 2](https://amzn.to/49zv6Gs)
    §4.6.3 “Evaluation of Powers.”
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的示例对应于[俄罗斯农民乘法](https://en.wikipedia.org/wiki/Ancient_Egyptian_multiplication)，它总是生成宽度为2的加法链。有关生成加法链的各种算法的详尽内容，请参见
    [Knuth Volume 2](https://amzn.to/49zv6Gs) §4.6.3 “Evaluation of Powers”。
- en: '* * *'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Surprisingly, the “tersest chain” problem is non-trivial in both *Infinite
    Craft* and addition-chains. Knuth writes:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，“最简链”问题在*无限工艺*和加法链中都是非平凡的。Knuth写道：
- en: Several authors have published statements (without proof) that the binary method
    [that is, Russian peasant multiplication] actually gives the minimum possible
    number of multiplications. But that is not true. The smallest counterexample is
    \(n = 15\), when the binary method needs six multiplications, yet we can calculate
    \(y = x^3\) in two multiplications and \(x^{15} = y^5\) in three more, achieving
    the desired result with only five multiplications.
  id: totrans-split-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 几位作者已经发表了关于二进制方法（即俄罗斯农民乘法）实际上给出了最小可能的乘法次数的声明（未经证明）。但这是不正确的。最小的反例是 \(n = 15\)，当二进制方法需要六次乘法时，我们可以用两次乘法计算
    \(y = x^3\)，然后再用三次乘法计算 \(x^{15} = y^5\)，只用五次乘法就能达到所需的结果。
- en: This suggests the algorithm Knuth calls the “factor method”; but yet again,
    you can find numbers whose optimal chain eludes both the binary method and the
    factor method! It appears that there is no fast (non-exponential-time) algorithm
    that generates an optimal addition chain for *every* input.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明Knuth称之为“因子方法”的算法；但仍然可以找到最优链既不是二进制方法也不是因子方法的数字！看来没有一种快速（非指数时间）的算法可以为*每个*输入生成最优加法链。
- en: 'To get an intuitive sense of the difficulty — in particular, why no greedy
    algorithm helps — look again at our tersest route to Sandwich:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要对困难有直观感受 — 特别是为什么没有贪婪算法有所帮助 — 再看看我们到三明治的最简路径：
- en: '[PRE6]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This route to Sandwich passes through Wine on the fourth step. Now, the tersest
    route to Wine itself is only three steps:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这条到三明治的路径在第四步经过了葡萄酒。现在，到葡萄酒本身的最简路径只有三步：
- en: '[PRE7]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: But if you make Wine by that route, you’ll never reach Sandwich in the optimum
    number of steps!
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你通过这条路径制作葡萄酒，你将永远无法以最优步骤到达三明治！
- en: 'Similarly, our tersest route to 31 was (1 2 3 6 12 14 17 31), passing through
    17 on the sixth step. There are two routes that make 17 in only five steps:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们到31的最简路径是 (1 2 3 6 12 14 17 31)，在第六步经过了17。有两条路径只需五步就可以达到17：
- en: '[PRE8]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: But if you make 17 by either of these routes, you’ll never reach 31 in the optimum
    number of steps!
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你通过任何这些路径计算出17，你永远无法以最优步骤达到31！
- en: 'Neill Clift of [AdditionChains.com](http://additionchains.com/) produced this
    example for me — my utmost thanks to him! According to Neill, there are exactly
    five optimal chains for 31 that contain the number 17: none of those chains contain
    (1 2 4 8). Meanwhile there are seventy-two other optimal chains for 31 that don’t
    contain 17 at all.'
  id: totrans-split-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[AdditionChains.com](http://additionchains.com/)的Neill Clift为我提供了这个例子 —— 我对他表示最衷心的感谢！根据Neill的说法，31的最优链中确实包含数字17的有五条链：其中没有一条链包含
    (1 2 4 8)。同时，还有72条不包含17的其他最优链。'
- en: '* * *'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'UPDATE, April 2024: A third algebraic structure with this shape is [this one
    from StackOverflow](https://stackoverflow.com/questions/78228861/choosing-a-sequence-of-bitwise-operations/78229017).
    We have one primitive element `A` representing a fair coin flip that lands heads
    with probability \(0.5_{10} = 0.1_2\). We can construct new elements using either
    of two binary operations: `&` (representing a coin that lands heads iff *both*
    inputs were heads) and `|` (representing a coin that lands tails iff *both* inputs
    were tails). We’re trying to reach a target state representing a coin that comes
    up heads with probability \(p\) (for some \(p = a/2^b\) between 0 and 1).'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 更新，2024年4月：第三种具有这种形状的代数结构来自[StackOverflow](https://stackoverflow.com/questions/78228861/choosing-a-sequence-of-bitwise-operations/78229017)。我们有一个原始元素`A`，代表一个公平硬币翻转，以0.5十进制概率（0.1二进制）落在正面。我们可以使用两种二进制运算之一构造新元素：`&`（表示硬币在两个输入均为正面时落在正面）和`|`（表示硬币在两个输入均为反面时落在反面）。我们试图达到一个代表以概率\(p\)（对于某个\(p
    = a/2^b\)，介于0和1之间）出现正面的硬币的目标状态。
- en: 'For example, we can make a coin that lands heads with probability \(0.5675_{10}
    = 0.1001_2\) in either of these ways:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以以以下两种方式之一制作一个以0.5675十进制概率（0.1001二进制）落在正面的硬币：
- en: '[PRE9]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: I have not thought much about this particular structure, but it feels just as
    non-trivial as addition chains.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我对这种特定结构没有太多思考，但它感觉与加法链一样不平凡。
- en: '* * *'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Still, knowing that *Infinite Craft* and addition chains are two examples of
    the same hypergraph structure doesn’t tell me whether there’s an accepted name
    *for* this particular hypergraph structure. If you have any leads, please pop
    over to [MathOverflow](https://mathoverflow.net/questions/466176/what-is-the-proper-name-for-this-tersest-path-problem-in-infinite-craft)
    and/or send me an email!
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管知道*Infinite Craft*和加法链是相同超图结构的两个例子，但这并没有告诉我是否有一个公认的名字*用于*这种特定的超图结构。如果您有任何线索，请访问[MathOverflow](https://mathoverflow.net/questions/466176/what-is-the-proper-name-for-this-tersest-path-problem-in-infinite-craft)或发送电子邮件给我！
- en: 'Observe that the addition-chain structure is commutative *and associative*,
    whereas the *Infinite Craft* structure is commutative but non-associative:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意加法链结构是可交换的*和可结合的*，而*Infinite Craft*结构是可交换的但不可结合：
- en: '[PRE10]'
  id: totrans-split-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This makes much of Knuth’s discussion (particularly “Graphical representation”
    and the generation of equivalent *dual* addition chains) inapplicable to *Infinite
    Craft*.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得Knuth的讨论大部分（特别是“图形表示”和生成等效*对偶*加法链）在*Infinite Craft*中不适用。
- en: '* * *'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: To explore the *Infinite Craft* hypergraph offline — without stressing Neal’s
    backend or needing to evade his Cloudflare bot-detection filter — you can download
    a compressed database containing about 30,000 elements from Tom Fang’s GitHub,
    [szdytom/infinite-craft-dictionary](https://github.com/szdytom/infinite-craft-dictionary/).
    Computing the tersest recipe for each element, and inventing a compact way to
    represent such a recipe in the database, is left as an exercise for the reader!
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要离线探索*Infinite Craft*超图，无需压力Neal的后端或需要规避其Cloudflare机器人检测过滤器，您可以从Tom Fang的GitHub下载一个包含约30,000个元素的压缩数据库，[szdytom/infinite-craft-dictionary](https://github.com/szdytom/infinite-craft-dictionary/)。为每个元素计算最简洁的配方，并发明一种在数据库中表示这样的配方的紧凑方式，留给读者做为练习！
