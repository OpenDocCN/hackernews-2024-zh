- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:38:31'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: The algebraic structure of _Infinite Craft_ – Arthur O'Dwyer – Stuff mostly
    about C++
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://quuxplusone.github.io/blog/2024/03/03/infinite-craft-theory/](https://quuxplusone.github.io/blog/2024/03/03/infinite-craft-theory/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Last month I [wrote](/blog/2024/02/08/infinite-craft/) about Neal Agarwal’s
    web game [*Infinite Craft*](https://neal.fun/infinite-craft/). Tom Fang wrote
    to tell me he’s created [a dictionary](https://szdytom.github.io/infinite-craft-dictionary/)
    of *Infinite Craft* elements, along with their uses and recipes. This got me thinking
    about the game’s mathematical structure.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: 'By “mathematical structure,” I mean something like how we make recipes and
    the metrics by which we might compare one recipe to another. For example, if our
    goal is to make Sandwich, we could do it like this:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-8
  prefs: []
  type: TYPE_PRE
- en: 'Or like this:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
- en: If we diagram these recipes, we find that the first one is *shallower*, in the
    sense that we combine only the primitive elements, elements made *from* the primitives
    (Wave, Steam, Plant), and elements made from *those* elements (Sand, Tea). But
    the second one is *terser*, in the sense that it is five lines long instead of
    six.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: 'At first glance, the world of *Infinite Craft* forms a [directed hypergraph](https://en.wikipedia.org/wiki/Hypergraph)
    with a lot of structure: each directed hyperedge connects a set of one or two
    vertices to a set of exactly one vertex. But a recipe isn’t merely a “path” on
    that hypergraph! Mathematicians define the hypergraph analogue of a “path” as
    a set of incident hyperedges — “incidence” meaning that the edges share *at least
    one* vertex. In this sense there is a “path” from the starting elements to Sandwich
    that consists of only a single hyperedge; namely,'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
- en: That definition of “path” doesn’t help us.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '[I asked MathOverflow](https://mathoverflow.net/questions/466176/what-is-the-proper-name-for-this-tersest-path-problem-in-infinite-craft),
    and they pointed me to another example of the same problem: [addition chains](https://en.wikipedia.org/wiki/Addition_chain).
    An “addition chain” for an integer \(n\) is a sequence starting with 1 and ending
    with \(n\), such that each element in the sequence is the sum of exactly two previous
    elements. For example, we might make 31 in any of these three ways:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
- en: The middle chain is *shallowest*, but the right-hand one is *tersest*.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: 'Addition chains are idiomatically written as just an increasing sequence of
    integers: (1 2 3 6 12 14 17 31). We don’t need to specify how each integer (say,
    17) is constructed from the preceding elements, because it’s obvious. We could
    represent *Infinite Craft* recipes just as concisely — (Wave Sand Glass Wine Sandwich)
    — but that wouldn’t be very reader-friendly because it’s not obvious *which* two
    preceding elements combine to make, say, Wine.'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Finding the tersest addition chain is directly relevant to the world of computer
    programming. Suppose we want to calculate the 31st power of an unknown number
    in register `A`, using only multiplication. Then we can do any of:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
- en: Our “shallowness” metric translates into a measure of the [data dependencies](https://en.wikipedia.org/wiki/Data_dependency)
    involved in these computations. The middle program, being the shallowest, is also
    the *fastest* on any machine with at least two multiplier units.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Another practically relevant metric for the “goodness” of a chain is its *width*:
    the number of registers it uses in its most optimal [coloring](https://en.wikipedia.org/wiki/Register_allocation#Graph-coloring_allocation).
    The left-hand recipe above is the *narrowest*, with width 2, whereas the others
    have width 3:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
- en: The left-hand recipe corresponds to [Russian peasant multiplication](https://en.wikipedia.org/wiki/Ancient_Egyptian_multiplication),
    which always generates an addition chain of width 2\. For in-depth coverage of
    various algorithms to generate addition chains, see [Knuth Volume 2](https://amzn.to/49zv6Gs)
    §4.6.3 “Evaluation of Powers.”
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Surprisingly, the “tersest chain” problem is non-trivial in both *Infinite
    Craft* and addition-chains. Knuth writes:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: Several authors have published statements (without proof) that the binary method
    [that is, Russian peasant multiplication] actually gives the minimum possible
    number of multiplications. But that is not true. The smallest counterexample is
    \(n = 15\), when the binary method needs six multiplications, yet we can calculate
    \(y = x^3\) in two multiplications and \(x^{15} = y^5\) in three more, achieving
    the desired result with only five multiplications.
  id: totrans-split-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This suggests the algorithm Knuth calls the “factor method”; but yet again,
    you can find numbers whose optimal chain eludes both the binary method and the
    factor method! It appears that there is no fast (non-exponential-time) algorithm
    that generates an optimal addition chain for *every* input.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: 'To get an intuitive sense of the difficulty — in particular, why no greedy
    algorithm helps — look again at our tersest route to Sandwich:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
- en: 'This route to Sandwich passes through Wine on the fourth step. Now, the tersest
    route to Wine itself is only three steps:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
- en: But if you make Wine by that route, you’ll never reach Sandwich in the optimum
    number of steps!
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, our tersest route to 31 was (1 2 3 6 12 14 17 31), passing through
    17 on the sixth step. There are two routes that make 17 in only five steps:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
- en: But if you make 17 by either of these routes, you’ll never reach 31 in the optimum
    number of steps!
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Neill Clift of [AdditionChains.com](http://additionchains.com/) produced this
    example for me — my utmost thanks to him! According to Neill, there are exactly
    five optimal chains for 31 that contain the number 17: none of those chains contain
    (1 2 4 8). Meanwhile there are seventy-two other optimal chains for 31 that don’t
    contain 17 at all.'
  id: totrans-split-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: 'UPDATE, April 2024: A third algebraic structure with this shape is [this one
    from StackOverflow](https://stackoverflow.com/questions/78228861/choosing-a-sequence-of-bitwise-operations/78229017).
    We have one primitive element `A` representing a fair coin flip that lands heads
    with probability \(0.5_{10} = 0.1_2\). We can construct new elements using either
    of two binary operations: `&` (representing a coin that lands heads iff *both*
    inputs were heads) and `|` (representing a coin that lands tails iff *both* inputs
    were tails). We’re trying to reach a target state representing a coin that comes
    up heads with probability \(p\) (for some \(p = a/2^b\) between 0 and 1).'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can make a coin that lands heads with probability \(0.5675_{10}
    = 0.1001_2\) in either of these ways:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
- en: I have not thought much about this particular structure, but it feels just as
    non-trivial as addition chains.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: Still, knowing that *Infinite Craft* and addition chains are two examples of
    the same hypergraph structure doesn’t tell me whether there’s an accepted name
    *for* this particular hypergraph structure. If you have any leads, please pop
    over to [MathOverflow](https://mathoverflow.net/questions/466176/what-is-the-proper-name-for-this-tersest-path-problem-in-infinite-craft)
    and/or send me an email!
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe that the addition-chain structure is commutative *and associative*,
    whereas the *Infinite Craft* structure is commutative but non-associative:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-split-47
  prefs: []
  type: TYPE_PRE
- en: This makes much of Knuth’s discussion (particularly “Graphical representation”
    and the generation of equivalent *dual* addition chains) inapplicable to *Infinite
    Craft*.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: To explore the *Infinite Craft* hypergraph offline — without stressing Neal’s
    backend or needing to evade his Cloudflare bot-detection filter — you can download
    a compressed database containing about 30,000 elements from Tom Fang’s GitHub,
    [szdytom/infinite-craft-dictionary](https://github.com/szdytom/infinite-craft-dictionary/).
    Computing the tersest recipe for each element, and inventing a compact way to
    represent such a recipe in the database, is left as an exercise for the reader!
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
