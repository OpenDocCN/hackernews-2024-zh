["```\nFrom: Danilo Krummrich <dakr@redhat.com>\nTo: dri-devel@lists.freedesktop.org, nouveau@lists.freedesktop.org,\n\trust-for-linux@vger.kernel.org, gregkh@linuxfoundation.org\nCc: airlied@redhat.com, lyude@redhat.com, pstanner@redhat.com,\n\tajanulgu@redhat.com, mcanal@igalia.com, lina@asahilina.net,\n\ta.hindborg@samsung.com\nSubject: Nova and staging Rust abstractions\nDate: Wed, 20 Mar 2024 18:58:43 +0100\t[thread overview]\nMessage-ID: <Zfsj0_tb-0-tNrJy@cassiopeiae> (raw)\n\nHi all,\n\nIn this mail I briefly want to announce the Nova project and subsequently talk about the first\nefforts taken in order to upstream required Rust abstractions:\n\nWe just started to work on Nova, a Rust-based GSP-only driver for Nvidia GPUs. Nova, in the long\nterm, is intended to serve as the successor of Nouveau for GSP-firmware-based GPUs.\n\nWith Nova we see the chance to significantly decrease the complexity of the driver compared to\nNouveau for mainly two reasons. First, Nouveau's historic architecture, especially around nvif/nvkm,\nis rather complicated and inflexible and requires major rework to solve certain problems (such as\nlocking hierarchy in VMM / MMU code for VM_BIND currently being solved with a workaround) and\nsecond, with a GSP-only driver there is no need to maintain compatibility with pre-GSP code.\n\nBesides that, we also want to take the chance to contribute to the Rust efforts in the kernel and\nbenefit from from more memory safety offered by the Rust programming language. Ideally, all that\nleads to better maintainability and a driver that makes it easy for people to get involved into this\nproject.\n\nWith the choice of Rust the first problem to deal with are missing C binding abstractions for\nintegral kernel infrastructure (e.g. device / driver abstractions). Since this is a bit of a chicken\nand egg problem - we need a user to upstream abstractions, but we also need the abstractions to\ncreate a driver - we want to develop Nova upstream and start with just a driver stub that only makes\nuse of some basic Rust abstractions.\n\nIn particular, we want to start with basic device / driver, DRM and PCI abstractions and a Nova stub\ndriver making use of them.\n\nFortunately, a lot of those abstractions did already exist in various downstream trees (big thanks\nto all the authors). We started picking up existing work, figured out the dependencies, fixed a few\nissues and warnings and applied some structure by organizing it in the following branches.\n\nRemotes: drm-misc [1], rust (Rust-for-Linux) [2], nova [3]\n\n- drm-misc/topic/rust-drm:  [4] contains basic DRM abstractions, e.g. DRM device, GEM; depends on\n                                 rust-device\n- rust/staging/rust-device: [5] contains all common device / driver abstractions\n- rust/staging/rust-pci:    [6] contains basic PCI abstractions, e.g. PCI device, but also other\n                                 dependencies such as IoMem and Ressources; depends on rust-device\n- rust/staging/dev:         [7] integration branch for all staging Rust abstractions\n- nova/stub/nova:           [8] the nova stub driver; depends on rust-drm and rust-pci\n\nAll branches and commits are functional, but the code and commit messages are not yet in a state for\nsending actual patch series. While we are working on improving those patches we would like to ask\nfor feedback and / or improvements already.\n\n@Greg, can you please have a first quick look at rust-device [5]?\n\n- Danilo\n\n[1] https://cgit.freedesktop.org/drm/drm-misc\n[2] https://github.com/Rust-for-Linux/linux\n[3] https://gitlab.freedesktop.org/drm/nova\n[4] https://cgit.freedesktop.org/drm/drm-misc/log/?h=topic/rust-drm\n[5] https://github.com/Rust-for-Linux/linux/tree/staging/rust-device\n[6] https://github.com/Rust-for-Linux/linux/tree/staging/rust-pci\n[7] https://github.com/Rust-for-Linux/linux/tree/staging/dev\n[8] https://gitlab.freedesktop.org/drm/nova/-/tree/stub/nova\n\n```", "```\nnext             reply  other threads:[~2024-03-20 17:58 UTC|newest]\n\nThread overview: 2+ messages / expand[flat|nested]  mbox.gz  Atom feed  top\n2024-03-20 17:58 [Danilo Krummrich [this message]](#t)\n2024-03-20 18:17 ` Nova and staging Rust abstractions Greg KH\n\n```", "```\nReply instructions:\n\nYou may reply publicly to this message via plain-text email\nusing any one of the following methods:\n\n* Save the following mbox file, import it into your mail client,\n  and reply-to-all from there: mbox\n\n  Avoid top-posting and favor interleaved quoting:\n  https://en.wikipedia.org/wiki/Posting_style#Interleaved_style\n\n* Reply using the --to, --cc, and --in-reply-to\n  switches of git-send-email(1):\n\n  git send-email \\\n    --in-reply-to=Zfsj0_tb-0-tNrJy@cassiopeiae \\\n    --to=dakr@redhat.com \\\n    --cc=a.hindborg@samsung.com \\\n    --cc=airlied@redhat.com \\\n    --cc=ajanulgu@redhat.com \\\n    --cc=dri-devel@lists.freedesktop.org \\\n    --cc=gregkh@linuxfoundation.org \\\n    --cc=lina@asahilina.net \\\n    --cc=lyude@redhat.com \\\n    --cc=mcanal@igalia.com \\\n    --cc=nouveau@lists.freedesktop.org \\\n    --cc=pstanner@redhat.com \\\n    --cc=rust-for-linux@vger.kernel.org \\\n    /path/to/YOUR_REPLY\n\n  https://kernel.org/pub/software/scm/git/docs/git-send-email.html\n\n* If your mail client supports setting the In-Reply-To header\n  via mailto: links, try the mailto: link\n\n```", "```\nThis is a public inbox, see mirroring instructions\nfor how to clone and mirror all data and code used for this inbox;\nas well as URLs for NNTP newsgroup(s).\n```"]