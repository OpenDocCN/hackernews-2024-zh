["```\n1class Database { 2 async create(...items) {} 3} 4new Database().create(...new Array(750_000)); \n```", "```\n 1/home/teo/programming_wsl/blog_test/main.js:7 2new Database().create(...new Array(750_000)); 3 ^ 4 5RangeError: Maximum call stack size exceeded 6 at Object.<anonymous> (/home/teo/programming_wsl/blog_test/main.js:7:16) 7 at Module._compile (node:internal/modules/cjs/loader:1275:14) 8 at Module._extensions..js (node:internal/modules/cjs/loader:1329:10) 9 at Module.load (node:internal/modules/cjs/loader:1133:32) 10 at Module._load (node:internal/modules/cjs/loader:972:12) 11 at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:83:12) 12 at node:internal/main/run_main_module:23:47 13 14Node.js v19.9.0 \n```", "```\n 1 async create(items) { 2 return new Promise((res, rej) => { 3 this.connection.serialize(() => { 4 this.connection.run(\"BEGIN TRANSACTION\"); 5 for (let i = 0; i < items.length; i++) { 6 try { 7 this.connection.run( 8 \"INSERT INTO user (name, age) VALUES (?, ?)\", 9 items[i]?.name, 10 items[i]?.age 11 ); 12 } catch (e) { 13 this.connection.run(\"ROLLBACK TRANSACTION\"); 14 return rej(e); 15 } 16 } 17 this.connection.run(\"COMMIT\"); 18 return res(); 19 }); 20 }); 21 } \n```", "```\n 1const Database = require(\"./main.js\"); 2 3const DB = new Database(); 4 5const amount = [10, 100, 1000, 10_000, 100_000, 1_000_000]; 6const data = { name: \"xnacly\", age: 99 }; 7 8describe(\"create\", () => { 9 for (const a of amount) { 10 let d = new Array(a).fill(data); 11 test(`create-${a}`, async () => { 12 await DB.create(d); 13 }); 14 } 15}); \n```", "```\n1INSERT INTO user (name, age) VALUES (\"xnacly\", 99); \n```", "```\n1INSERT INTO user (name, age) VALUES 2 (\"xnacly\", 99), 3 (\"xnacly\", 99), 4 (\"xnacly\", 99); \n```", "```\n 1 async createFast(items) { 2 if (!items.length) return Promise.resolve(); 3 let insert = \"INSERT INTO user (name, age) VALUES \"; 4 insert += new Array(items.length).fill(\"(?,?)\").join(\",\"); 5 let params = new Array(items.length * 2); 6 let i = 0; 7 for (const item of items) { 8 params[i] = item.name; 9 params[i + 1] = item.age; 10 i += 2; 11 } 12 return new Promise((res, rej) => { 13 this.connection.serialize(() => { 14 this.connection.run(\"BEGIN TRANSACTION\"); 15 try { 16 this.connection.run(insert, params); 17 } catch (e) { 18 this.connection.run(\"ROLLBACK TRANSACTION\"); 19 return rej(e); 20 } 21 this.connection.run(\"COMMIT\"); 22 }); 23 return res(); 24 }); 25 } \n```", "```\n1describe(\"createFast\", () => { 2 for (const a of amount) { 3 let d = new Array(a).fill(data); 4 test(`createFast-${a}`, async () => { 5 await DB.createFast(d); 6 }); 7 } 8}); \n```"]