- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:36:56'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:36:56'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Underjord | Fundamentals of Object Storage
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Underjord | 对象存储基础
- en: 来源：[https://underjord.io/fundamentals-of-object-storage.html](https://underjord.io/fundamentals-of-object-storage.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://underjord.io/fundamentals-of-object-storage.html](https://underjord.io/fundamentals-of-object-storage.html)
- en: Fundamentals of Object Storage
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象存储基础
- en: '2024-03-19'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '2024-03-19'
- en: Underjord is a [tiny, wholesome team](/team.html) doing Elixir consulting and
    contract work. If you like the writing you should really try the code. See our
    [services](/services.html) for more information.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: Underjord是一个[小而友好的团队](/team.html)，专注于Elixir咨询和合同工作。如果你喜欢这篇文章，你真的应该试试这段代码。查看我们的[服务](/services.html)获取更多信息。
- en: I did a livestream where I talked about Object Storage. The how and the why.
    The Bad Old Days. And also the neat and interesting stuff just beyond the basics.
    I figured I’d cover that in text as well.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我做了一个关于对象存储的直播，讨论了如何以及为什么。那些糟糕的旧日子。以及超越基础知识的一些有趣的东西。我想在文本中也覆盖这些内容。
- en: You can [watch the stream here](https://youtube.com/live/Sg0Afr_4BMY).
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以[在这里观看直播](https://youtube.com/live/Sg0Afr_4BMY)。
- en: '*Transparency notice: The livestream and this blog post have been work supported
    by [Tigris](https://www.tigrisdata.com/). We collaborate on the topics, they provide
    resources and pay for some of my time so I can do this stuff instead of writing
    software for clients. I am very glad and thankful that I have someone funding
    my publishing and creative ideas. Expect more output from me near term, and give
    them a try!*'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*透明通知：直播和本博文由[Tigris](https://www.tigrisdata.com/)支持。我们在这些主题上进行合作，他们提供资源并支付部分时间供我从事这些事情，而不是为客户编写软件。我非常高兴和感激有人资助我出版和创意想法。预计近期会有更多输出，请给他们一个机会！*'
- en: Background
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景
- en: When I cut my teeth architecting systems we didn’t have Objects outside of Object-Oriented
    programming languages and we had precious little Storage. And if we did have Storage
    it was either on the same physical server or some kind of NFS-based abomination.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始架构系统时，我们没有对象除了面向对象编程语言外，也没有多少存储。如果我们有存储，要么在同一台物理服务器上，要么是某种基于NFS的可怕东西。
- en: Imagine you set up your n-tier architecture. Application scales horizontally
    in front of the database. You can cache heavy loads with some Redis or Memcache
    that were the rad things then. For file storage we had to set up a shared store
    of some sort. And they were finicky bastards.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你建立了你的n层架构。应用程序在数据库前水平扩展。你可以使用一些当时很酷的Redis或Memcache来缓存重负载。对于文件存储，我们必须设置某种共享存储。它们真是个棘手的家伙。
- en: The mounts would come loose and files got written in a local folder. The performance
    would randomly degrade. I remember installing a filesystem cache thing for my
    servers and with NFS it would suddenly just hard-lock the system at the kernel
    level. Because NFS lives or at least lived then, in the kernel.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 挂载点可能会松动，文件会写入本地文件夹。性能会随机下降。我记得为我的服务器安装了一个文件系统缓存工具，而使用NFS时，它突然会在内核级别硬锁系统。因为NFS生活或至少在那时是在内核中的。
- en: When it works well it can be very practical to have a networked filesystem pretend
    to be a real one. But it is a pretty little lie that you are telling yourself
    and the system you are building. And if you lean into the file-ish nature of the
    NFS lifestyle … well, there are risks. And scars you can get.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当它工作良好时，让网络文件系统假装是真正的文件系统可以非常实用。但这只是你对自己和正在构建的系统说的一个小小的谎言。如果你倾向于NFS生活方式中类似文件的性质......嗯，那是有风险的。你可能会留下伤疤。
- en: I found AWS annoying when it arrived. Unreliable VPS:es that you weren’t supposed
    to put files on. Bah. Humbug. So it took a while before I got into Object Storage
    (all object storage is essentially S3-compatible these days). But much like the
    dumbness of EC2-instances enforced good scalability practices the simplicity of
    S3 made it tremendously effective.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我一开始发现AWS很烦人。不可靠的VPS，你不能把文件放在上面。真是麻烦。但是在我深入了解对象存储（如今所有的对象存储基本上都兼容S3）之前，过了一段时间。EC2实例的愚蠢强化了良好的可伸缩性实践，而S3的简单性使其效果极佳。
- en: What people want from a network file store is usually reliability and space.
    The data stays where you put it and does not get lost. And your data must fit.
    And as data grows it must still fit. So essentially infinite unknown unbounded
    storage growth. And ideally you don’t want to pay more than disk utilization you
    currently need.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 人们从网络文件存储中希望得到的通常是可靠性和空间。数据保留在您放置的位置，不会丢失。并且您的数据必须适合。随着数据的增长，它仍然必须适合。因此，本质上是无限的未知无界存储增长。理想情况下，您不希望支付超过当前所需磁盘利用率的费用。
- en: Simplicity, restraint and constraints are good for starting most things. But
    especially to delivering on ambitious things. Like infinite* file storage.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 简单、节制和约束对于启动大多数事物都是有益的。但特别是对于实现雄心勃勃的事物，如无限*文件存储。
- en: '* not actually infinite, but for most purposes close enough'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* 实际上并非无限，但对于大多数情况来说足够接近'
- en: Object Storage is much more clearly a service. It is not a file system. And
    when you scratch the surface the name clarifies itself a bit. It is not necessarily
    about “files” either. It is just the most successful NoSQL DB of all time probably.
    Keys, values and it doesn’t sweat the rest so much.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对象存储显然更清晰地是一项服务。它不是一个文件系统。当您深入了解时，名称会有所澄清。它也不一定是关于“文件”的。它可能是有史以来最成功的 NoSQL 数据库。键、值，其他东西并不那么重要。
- en: 'The fundamental operations are:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 基本操作如下：
- en: Put object
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放置对象
- en: Get object
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取对象
- en: List objects
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象列表
- en: Delete object
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除对象
- en: The full list is [much, much longer](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Operations_Amazon_Simple_Storage_Service.html).
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 完整列表可以参见 [更长更详细的文档](https://docs.aws.amazon.com/AmazonS3/latest/API/API_Operations_Amazon_Simple_Storage_Service.html)。
- en: With Elixir
  id: totrans-split-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Elixir
- en: 'To show how we can work with Object Storage fundamentals in Elixir I set up
    a mix project: `mix new bla`. Then I added the following deps in `mix.exs`:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示如何在 Elixir 中使用对象存储的基础知识，我设置了一个混合项目：`mix new bla`。然后我在 `mix.exs` 中添加了以下依赖项：
- en: elixir mix.exs
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: elixir mix.exs
- en: '[PRE0]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'I then created a `config/config.exs` with the following contents:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我创建了一个 `config/config.exs` 文件，内容如下：
- en: elixir config/config.exs
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: elixir config/config.exs
- en: '[PRE1]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To get your deps: `mix deps.get`'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取您的依赖项：`mix deps.get`
- en: To create a bucket, if you have the `fly` command-line tool ready to go it is
    very simple to do `fly tigris create`. It is also free until your **really** use
    it, 5Gb and 10k+ requests/month. Of course take whatever bucket you prefer. But
    that will spit out credentials.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个存储桶，如果您已经准备好使用 `fly` 命令行工具，那么非常简单，只需执行 `fly tigris create`。直到您**真正**使用它时是免费的，5Gb
    和 10k+ 请求/月。当然，您可以选择任何存储桶。但它将提供凭据。
- en: '`:ex_aws_s3` will automatically slurp up your credentials if you set them as
    environment variables but not the bucket name. If you need multiple buckets you
    can wrangle them explicitly. These examples assume one set of credentials.'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将它们设置为环境变量，`:ex_aws_s3` 将自动读取您的凭据，但不包括存储桶名称。如果您需要多个存储桶，您可以显式地处理它们。这些示例假设使用一个凭据集。
- en: 'I started the module I called `Tigris` like this:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我像这样开始我称之为 `Tigris` 的模块：
- en: elixir lib/tigris.ex
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: elixir lib/tigris.ex
- en: '[PRE2]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then I tackled the listing of objects:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我着手列出对象：
- en: elixir lib/tigris.ex
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: elixir lib/tigris.ex
- en: '[PRE3]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can try things in `iex -S mix` to get everything we have in this project
    compiled and ready to go in the prompt:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`iex -S mix`中尝试各种操作，以便在提示符中编译和准备好此项目中的所有内容：
- en: elixir iex
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: elixir iex
- en: '[PRE4]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next some putting and getting. I am not suggesting you do error handling like
    this. This is for the purposes of simplicity and the stream, not a best practice
    and definitely not financial or legal advice.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一些放置和获取操作。我不建议您像这样处理错误。这是为了简单和流而不是最佳实践，绝对不是金融或法律建议。
- en: elixir lib/tigris.ex
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: elixir lib/tigris.ex
- en: '[PRE5]'
  id: totrans-split-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: I tried those out in `iex` as well to show the fundamentals. Then I wanted to
    hint at scale I guess. `Task.async_stream/2` ensures things are run in plenty
    parallel according to your machine.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我也在`iex`中尝试了这些操作，以展示基础知识。然后，我想提示可能的规模。`Task.async_stream/2` 根据您的机器确保运行足够多的并行任务。
- en: elixir lib/tigris.ex
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: elixir lib/tigris.ex
- en: '[PRE6]'
  id: totrans-split-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And then:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后：
- en: elixir iex
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: elixir iex
- en: '[PRE7]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And then to tidy up. Don’t run this on buckets where you keep data you like
    or need:'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后进行整理。不要在您喜欢或需要的数据存储桶上运行此操作：
- en: elixir lib/tigris.ex
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: elixir lib/tigris.ex
- en: '[PRE8]'
  id: totrans-split-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Presigned URLs
  id: totrans-split-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预签名 URL
- en: No we are getting a bit fancy. So an enormously beneficial thing with Object
    Storage is that it can have features that spare your application server from a
    bunch of horrible work. Have you ever let your app receive a file upload only
    to save it somewhere else? Ludicrous! We have a service for that! There are protocols!
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 不，我们有点花哨了。因此，对象存储的一个巨大好处是，它可以具有功能，可以使您的应用服务器免于一堆可怕的工作。您是否曾让您的应用程序接收文件上传，然后将其保存到其他地方？荒谬！我们有一个专门的服务！有协议！
- en: elixir lib/tigris.ex
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: elixir lib/tigris.ex
- en: '[PRE9]'
  id: totrans-split-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Use that. Get a presigned URL (you can configure expiration and such) for either
    downloading or uploading which you can hand off to the client and let them deal
    with the upload without you. Just between them and your object storage. Fun thing
    about doing that with Tigris btw. Tigris will place the data globally close to
    the uploader. It will then replicate as a cache if needed to other regions but
    this means your customers in Australia get local latencies.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 利用它。获取一个预签名 URL（您可以配置过期时间等），用于下载或上传，然后将其交给客户端，让他们自行处理上传，而无需您介入。只需他们和您的对象存储之间。顺便说一下，使用
    Tigris 这样做的有趣之处。Tigris 将数据放置在全球靠近上传者的位置。如果需要，它会作为缓存复制到其他地区，但这意味着您在澳大利亚的客户会获得本地延迟。
- en: 'This is equally nice for uploads and downloads. Your application server does
    not have to go between. At worst a download is:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对上传和下载一样好用。您的应用服务器最差的下载方式是：
- en: Client asks your application server for a file.
  id: totrans-split-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端请求您的应用服务器获取文件。
- en: Your application checks if the request makes sense and should be signed for.
  id: totrans-split-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的应用程序检查请求是否合理，并应该签名。
- en: Presign URL.
  id: totrans-split-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预签名 URL。
- en: Client receives a response with a redirect to the presigned URL.
  id: totrans-split-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端接收到一个带有重定向到预签名 URL 的响应。
- en: Transparent download but your application doesn’t serve the bytes.
  id: totrans-split-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 透明下载，但您的应用程序不提供字节。
- en: Multipart upload (streaming up!)
  id: totrans-split-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多部分上传（流式上传！）
- en: Up to 5Gb can be a single upload according to AWS. But typically that gets unwieldy.
    We can chunk uploads at 5Mb chunks.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 AWS，单个上传可以达到 5Gb。但通常会变得难以管理。我们可以将上传分块为 5Mb 的块。
- en: elixir lib/tigris.ex
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: elixir lib/tigris.ex
- en: '[PRE10]'
  id: totrans-split-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is a form of streaming upload. Which means if you need to do processing
    and then want to offload the result immediately you can reduce your memory usage
    to about 5Mb (it depends) by streaming the upload instead of holding on to the
    whole beastly thing. This specifically builds a Stream from a file for upload
    but there are many variants you can do using the Elixir Stream and IO tools.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种流式上传方式。这意味着如果您需要进行处理，然后希望立即卸载结果，您可以通过流式上传而不是保留整个巨大的东西来将内存使用量减少到约 5Mb（这取决于情况）。这具体构建了一个从文件上传的流，但使用
    Elixir Stream 和 IO 工具可以进行许多变体。
- en: Range requests (streaming down!)
  id: totrans-split-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范围请求（流式下载！）
- en: Sometimes we just want a few parts of a file. Sometimes we want to build a hell-beast
    that does read-only SQLite VFS over S3 API. Sometimes we want to do a graceful
    streaming download. For this we have straight up HTTP range requests.
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们只想要文件的几个部分。有时我们想要构建一个只读 SQLite VFS 的地狱兽，覆盖 S3 API。有时我们想要进行优雅的流式下载。为此，我们有直接的
    HTTP 范围请求。
- en: elixir lib/tigris.ex
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: elixir lib/tigris.ex
- en: '[PRE11]'
  id: totrans-split-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is incredibly useful and powerful. Sure. You might mostly be dealing with
    files. Until you don’t. Or until you realize how many file formats expose useful
    information with just the right bytes.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常有用且强大。当然。您可能大部分时间都在处理文件。直到您不需要了。或者直到您意识到有多少文件格式只需使用正确的字节即可公开有用信息。
- en: Zip archives are streamable with [Packmatic](https://github.com/evadne/packmatic)
    because they allow you to keep the index of files to decompress at the end of
    the archive. That’s a known location. We can search the last part of the file
    and only get the index, and so, the file listing. And that means we can pick out
    files. One can do similar things with ID3 tags on MP3s and get metadata without
    getting the whole file.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [Packmatic](https://github.com/evadne/packmatic) 可以流式传输 Zip 归档文件，因为它允许您在归档末尾保持文件索引。那是一个已知的位置。我们可以搜索文件的最后一部分，并仅获取索引，这意味着文件清单。这意味着我们可以挑选出文件。可以对
    MP3 的 ID3 标签执行类似操作，并且仅获取元数据而不必获取整个文件。
- en: If you use the Elixir library [Explorer](https://hex.pm/packages/explorer) the
    underlying Rust library supports the S3 API and will let you lazily read data
    from .parquet files and such that are stored remotely. Same thing.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 Elixir 库 [Explorer](https://hex.pm/packages/explorer)，底层的 Rust 库支持 S3
    API，将让您从远程存储的 .parquet 文件等中惰性读取数据。同样的事情。
- en: I hope this clarifies why range requests are rather useful for a file storage
    service.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这解释清楚了为什么范围请求对于文件存储服务非常有用。
- en: Why the S3 API became standard
  id: totrans-split-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: S3 API为何成为标准
- en: All Object Storage services I’ve used so far have exposed an S3-compatible API.
    It makes sense. It helps you support the expected featureset and you get a trillion
    clients and SDKs compatible with your thing for free.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我使用过的所有对象存储服务都暴露了一个兼容S3的API。这是有道理的。它帮助您支持预期的功能集，并且您可以免费获得兼容您产品的SDK和数以万计的客户端。
- en: Is the S3 API just that good?
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: S3 API真的那么好吗？
- en: I don’t think it is. And I had a whole spiel here about how it is simply good
    enough and that the value proposition of reliable “infinite” storage with a common
    protocol makes it worth it. It clearly has been. In discussing this post with
    Ovais Tariq, CEO of Tigris, he actually shared a much more interesting viewpoint.
    Contrarian to my lukewarm take. It makes sense for Tigris to ship as S3 API compatible
    to make switching and getting started simple. The S3 API turns out to be a significant
    constraint however. Tigris has a metadata system and infrastructure that is different
    from S3\. There are improvements, innovations and some really great features that
    are not easy to implement nicely in the fairly stagnant S3 API. Sure you can finagle
    features into headers and other clever stuff but there is a downside to it as
    any new ground you break will be missing in client implementations. From my conversations
    with Ovais and his team we will still see innovations on Object Storage from them.
    I guess we’ll have to stay tuned to see if the S3 API can handle it.
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我不认为是这样的。我在这里整体上谈论的是，它只是足够好，而可靠的“无限”存储价值主张和通用协议使其值得。显然是这样。在与Tigris的CEO Ovais
    Tariq讨论这篇文章时，他实际上分享了一个更有趣的观点。与我持平淡态度相反。对于Tigris来说，兼容S3 API使切换和开始变得简单是有意义的。然而，S3
    API实际上是一个重要的约束。Tigris拥有与S3不同的元数据系统和基础设施。有改进、创新和一些真正优秀的功能，这些功能在相对滞后的S3 API中难以实现得体。当然，您可以在标头和其他聪明的地方弄出一些功能，但这也有其不足之处，因为您在客户端实现时可能会错过任何新的进展。根据我与Ovais及其团队的交流，我们仍将看到他们在对象存储方面的创新。我猜我们将继续关注S3
    API是否能应对这一挑战。
- en: '* * *'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: If you want to share some of the more interesting usages you’ve seen of Object
    Storage or just want to tell me about whether you found this helpful, feel free
    to reach out. I am on the Fediverse as [@lawik](https://twitter.com/lawik) and
    you can just email me as well at [lars@underjord.io](mailto:lars@underjord.io).
    Thanks for reading.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想分享一些您看到的更有趣的对象存储用法，或者只是想告诉我您是否觉得这篇文章有帮助，请随时联系我。我在Fediverse上的用户名是[@lawik](https://twitter.com/lawik)，您也可以通过电子邮件联系我，我的邮箱是[lars@underjord.io](mailto:lars@underjord.io)。感谢阅读。
- en: Underjord is a [4 people team](/team.html) doing Elixir consulting and contract
    work. If you like the writing you should really try the code. See our [services](/services.html)
    for more information.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: Underjord 是一个[4人团队](/team.html)，专门从事Elixir咨询和合同工作。如果您喜欢这篇文章，确实应该尝试一下代码。查看我们的[服务](/services.html)以获取更多信息。
- en: 'Note: Or try the videos on [the YouTube channel](https://youtube.com/c/underjord).'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：或者尝试一下[YouTube频道上的视频](https://youtube.com/c/underjord)。
