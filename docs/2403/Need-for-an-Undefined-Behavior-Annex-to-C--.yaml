- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:29:40'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Need for an Undefined Behavior Annex to C++
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://community.intel.com/t5/Blogs/Tech-Innovation/Tools/Why-do-we-need-a-Undefined-Behavior-Annex-for-the-C-standard/post/1574397](https://community.intel.com/t5/Blogs/Tech-Innovation/Tools/Why-do-we-need-a-Undefined-Behavior-Annex-for-the-C-standard/post/1574397)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Intel's developer software engineers are not only working on the latest optimizations
    and improvements in the Intel¬Æ oneAPI DPC++/C++ Compiler. We actively contribute
    to the advancements of Khronos Group's [SYCL*](https://www.khronos.org/sycl/),
    the [LLVM*](https://llvm.org/) Project,¬†and the latest C and [C++ language standard](https://isocpp.org/std/the-standard)s¬†.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: We would like to share a more detailed picture of what is happening in the C
    and C++ world with the software engineering community and how Intel actively contributes
    to the latest standards revisions.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: A Blog Series on Our C/C++ Standards Contributions
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To that end, we are starting a new series of blog posts highlighting Intel's
    work on the C and C++ standards.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: In particular, safety and security are one of the most active focus areas of
    our work on the next language standard revisions. This article will discuss the
    effort to create a much-needed Undefined Behavior Annex for the C++ Standard.
    This will strengthen coding standards for functional determinism and security,
    even for uncommon or unanticipated application code paths.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: There are areas we know are important to the [Intel¬Æ oneAPI DPC++/C++ Compiler](https://www.intel.com/content/www/us/en/developer/tools/oneapi/dpc-compiler.html)
    user community and the oneAPI and C/C++ community at large. We know that because
    C and C++ are continuously evolving languages. Keeping track of the fast pace
    of change within the community is hard if you are not actively involved. Intel's
    C and C++ Compiler team is involved in this evolution at many points, participating
    in standardization through
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: writing proposals
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: attending meetings
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: chairing committees
  id: totrans-split-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting open-source contributions to LLVM and the Clang compiler.
  id: totrans-split-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being active in the community at large.
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We would like to take this engagement with the community to the next level by
    using this format to encourage a dialog about the latest developments and focal
    points in C and C++ programming.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Undefined Behavior Scenario Annex
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I am Shafik Yaghmour, a Compiler Engineer at Intel supporting C++. I am active
    in the C++ community in many forms:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: This blog highlights some of my work on the C++ standard committee.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: 'My proposal,¬†[P1705R1: Enumerating Core Undefined Behavior](http://wg21.link/P1705R1)¬†[2],
    discusses adding an *undefined behavior* annex to the C++ standard.'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: Invoking *undefined behavior* has all sorts of unintuitive consequences, such
    as [the removal of safety checks](https://blog.regehr.org/archives/970),¬†[turning
    finite loops infinite](https://stackoverflow.com/questions/32506643/c-compilation-bug),¬†[booleans
    that can both be false and true](https://markshroyer.com/2012/06/c-both-true-and-false/),
    and apparently¬†[undefined behavior can even time travel](https://devblogs.microsoft.com/oldnewthing/20140627-00/?p=633)¬†[3]¬†
    ü§Ø. These consequences are not desirable and can lead to safety and security issues.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: Safety Implications of Undefined Behavior
  id: totrans-split-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To avoid the consequences of undefined behavior in code, many industries employ
    two strategies:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: Rigorous and well-documented dynamic functional safety and security attack vector
    verification testing. Regulatory bodies often mandate this for safety-sensitive
    industries such as the medical devices, aviation, manufacturing and automotive
    sectors.
  id: totrans-split-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Strict adherence to coding standards (such as MISRA and AUTOSAR) that may limit
    the developer's ability to take advantage of the latest C++ language features.
  id: totrans-split-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Developers do this, because the consequence of undefined behavior causing non-deterministic
    functional outcomes may well mean the loss of not just property but could also
    endanger people's safety!
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: 'So I ask myself:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: What if we took advantage of the rich and long history of C and C++ ¬†and documented
    cases of undefined behavior to define a clear, complete, authoritative list of
    potential undefined behavior scenarios to avoid and recommended fixes?
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What if this list was part of the C++ standard itself?
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This could introduce a new level of functional safety and protections against
    many security exploits to a wider range of use cases without the restrictive overhead
    of DOE-178 or ISO 26262 type regulations.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: A Comprehensive Reference for Undefined Behavior
  id: totrans-split-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Currently, this proposed comprehensive reference for *undefined behavior*¬†does
    not exist. If you are a developer attempting to understand what *undefined behaviors*
    you need to avoid, you must refer to the 2000+ page C++ standard document and
    the 20+ years of defect reports. To add to this challenge,¬†*undefined behavior*
    can be referred to in the document using several different phrases:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: the behavior of the program is undefined
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: has undefined behavior
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: results in undefined behavior
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the behavior is undefined
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: have undefined behavior
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: is undefined
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: result has undefined behavior
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, after finding each *undefined behavior* entry, there may not be an example.
    Therefore, it may be unclear how the *undefined behavior* works. This is a daunting
    task even for a very knowledgeable C++ developer. This also hinders tool developers
    from building tools to make software more secure, as well as researchers in software
    safety and security.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: We are also ignoring ***implicit undefined behavior***, which is behavior that
    violates the rules in the standard but is not explicitly called out as *undefined
    behavior*. It is just as bad as the explicit kind but much harder to find.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: So, one of the main goals of *P1705R1* is to create an ***undefined behavior
    annex*** or listing of ***explicit* *undefined behavior¬†***in the C++ standard.
    Each entry would include a description in accessible language and an example(s)
    of the *undefined behavior* in code. This should allow developers to learn about
    undefined behavior. While we don't expect everyday developers to refer to the
    C++ standard themselves, having the material will allow blog authors, conference
    presenters, and trainers to develop more comprehensive material covering *undefined
    behavior*.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: This will also allow the C++ committee to track the growth or shrinkage of *undefined
    behavior*. We also will require future proposal authors to keep the annex updated
    if they add or remove *undefined behavior*. They are making¬†*undefined behavior*
    an explicit topic to be discussed when reviewing a proposal. It also gives explicit
    targets for future proposal writers to attempt to shrink *undefined behavior*
    in the standard.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: Another goal that came up during a recent review of the proposal is that we
    want to turn implicit *undefined behavior* into ***explicit undefined behavior***.
    This requires identifying *i**mplicit undefined behavior*** and then having the¬†[Core
    Language Wording Group](https://isocpp.org/std/the-committee)¬† update the wording
    to make the behavior explicitly *undefined*. The benefit here is that we document
    more *undefined behavior*. It is also an opportunity to determine if the intent
    was for this to be *undefined* and, if not, document that.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: 'In [P3075R0: Adding an Undefined Behavior and IFNDR Annex](https://wg21.link/P3075R0)¬†[4],
    I also extend this idea to include adding an ill-formed no diagnostic required
    (IFNDR) annex. *IFNDR* differs from *undefined behavior* in that while your program
    is still *undefined,* it is a¬†[static property of your program and not a run-time
    property](https://shafik.github.io/c++/2023/07/09/lets-enumerate-ub-part-1.html).
    While this does not have the unrestricted runtime consequences of *undefined behavior,*
    it can still lead to safety and security issues since programs containing *IFNDR*
    may not be diagnosed and may have unintuitive results.'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  id: totrans-split-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are looking forward to your feedback on proposal¬†[P3075R0: Adding an Undefined
    Behavior and IFNDR Annex](https://wg21.link/P3075R0).'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: What do you think should be considered. Let us work together to advance the
    C++ standard set it on the path to fully embrace safety and security paradigms.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: Please feel free to leave comments below.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-split-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**[1]** S. Yaghmour, [What is the Strict Aliasing Rule and Why do we care?,](https://gist.github.com/shafik/848ae25ee209f698763cffee272a58f8)
    Gist.GitHub, 2020'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: '**[2]** S. Yaghmour, P1075R1: [Enumerating Core Undefined Behavior](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1705r1.html),
    2019'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: '**[3]** R. Chen,¬†[Undefined behavior can result in time travel](https://devblogs.microsoft.com/oldnewthing/20140627-00/?p=633),
    Microsoft* DevBlogs, 2014'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: '**[4]** S. Yaghmour, P3075R0:¬†[Adding an Undefined Behavior and IFNDR Annex,](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p3075r0.pdf)¬†
    2023'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: Further Reading
  id: totrans-split-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
