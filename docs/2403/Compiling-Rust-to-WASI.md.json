["```\n    cargo build --target=wasm32-wasi\n\n    ```", "```\n      *error* *occurred*: *Command* *\"clang\"* *\"-O3\"* *\"-ffunction-sections\"* *\"-fdata-sections\"* *\"-fPIC\"* *\"--target=wasm32-wasi\"* *\"-I\"* *\"./typescript/src\"* *\"-Wall\"* *\"-Wextra\"* *\"-o\"* *\"/celCluster/projects/femark/target/wasm32-wasi/release/build/tree-sitter-typescript-db2920a2728a6446/out/./typescript/src/parser.o\"* *\"-c\"* *\"./typescript/src/parser.c\"* *with* *args* *\"clang\"* *did* *not* *execute* *successfully* \n\n    ```", "```\nRUSTFLAGS='-L /opt/wasi-sdk-21.0/share/wasi-sysroot/lib/wasm32-wasi -lstatic=c++ -lstatic=c++abi' CXXSTDLIB=c++ CC=/opt/wasi-sdk-21.0/bin/clang CXX=/opt/wasi-sdk-21.0/bin/clang++ CXXFLAGS=\"-fno-exceptions\"  cargo component build --release\n\n```", "```\n*[**package**.**metadata**.**component**]*\n*package* *=* *\"benwis:femark\"*\n*[**package**.**metadata**.**component**.**dependencies**]*\n\n```", "```\n// wit/femark.wit\npackage benwis:femark;\n\nworld femark {\n\n  record owned-code-block {\n  language: option<string>,\n  source: string,\n  }\n  record owned-frontmatter {\n        title: option<string>,\n        code-block: option<owned-code-block>\n  }\n  record html-output{\n        toc: option<string>,\n        content: string,\n        frontmatter: option<owned-frontmatter>\n    }\n\n  /// The set of errors which may be raised by the function\n  variant highlight-error {\n\t\tnolang,\n\t\tnohighlighter,\n\t\tcould-not-build-highlighter(string),\n        string-generation-error(string)\n  }\n\n  export process-markdown-to-html: func(input: string) -> result<html-output, highlight-error>; \n  export process-markdown-to-html-with-frontmatter: func(input: string) -> result<html-output, highlight-error>; \n}\n\n```", "```\n*// Define a custom type and implement the generated `Guest` trait for it which*\n*// represents implementing all the necessary exported interfaces for this*\n*// component.*\n*struct* *Component**;*\n\n*impl* *Guest* *for* *Component* *{*\n    *fn* *process_markdown_to_html**(**input**:* *String**)* -> std*::*result*::**Result**<**HtmlOutput**,* *HighlightError**>* *{*\n        *process_markdown_to_html**(**&*input*)*\n    *}*\n    *fn* *process_markdown_to_html_with_frontmatter**(*\n        *input**:* *String**,*\n    *)* -> std*::*result*::**Result**<**HtmlOutput**,* *HighlightError**>* *{*\n        *process_markdown_to_html_with_frontmatter**(**&*input*,* *true**)*\n    *}*\n*}*\n\n```", "```\n    jco wit target/wasm32-wasi/release/femark.wasm\n\n    ```", "```\n    package root:component;\n\n    world root {\n      import wasi:cli/environment@0.2.0;\n      import wasi:cli/exit@0.2.0;\n      import wasi:io/error@0.2.0;\n      import wasi:io/streams@0.2.0;\n      import wasi:cli/stdin@0.2.0;\n      import wasi:cli/stdout@0.2.0;\n      import wasi:cli/stderr@0.2.0;\n      import wasi:cli/terminal-input@0.2.0;\n      import wasi:cli/terminal-output@0.2.0;\n      import wasi:cli/terminal-stdin@0.2.0;\n      import wasi:cli/terminal-stdout@0.2.0;\n      import wasi:cli/terminal-stderr@0.2.0;\n      import wasi:clocks/monotonic-clock@0.2.0;\n      import wasi:clocks/wall-clock@0.2.0;\n      import wasi:filesystem/types@0.2.0;\n      import wasi:filesystem/preopens@0.2.0;\n      import wasi:random/random@0.2.0;\n\n      record owned-code-block {\n        language: option<string>,\n        source: string,\n      }\n\n      record owned-frontmatter {\n        title: option<string>,\n        code-block: option<owned-code-block>,\n      }\n\n      record html-output {\n        toc: option<string>,\n        content: string,\n        frontmatter: option<owned-frontmatter>,\n      }\n\n      variant highlight-error {\n        nolang,\n        nohighlighter,\n        could-not-build-highlighter(string),\n        string-generation-error(string),\n      }\n\n      export process-markdown-to-html: func(input: string) -> result<html-output, highlight-error>;\n      export process-markdown-to-html-with-frontmatter: func(input: string) -> result<html-output, highlight-error>;\n    }\n\n    ```", "```\n    jco transpile --minify femark.wasm -o femark-wasi\n\n    ```", "```\n    ❯ tree femark-wasi\n    dist/femark-wasi\n    ├── femark.core2.wasm\n    ├── femark.core.wasm\n    ├── femark.d.ts\n    ├── femark.js\n    └── interfaces\n        ├── wasi-cli-environment.d.ts\n        ├── wasi-cli-exit.d.ts\n        ├── wasi-cli-stderr.d.ts\n        ├── wasi-cli-stdin.d.ts\n        ├── wasi-cli-stdout.d.ts\n        ├── wasi-cli-terminal-input.d.ts\n        ├── wasi-cli-terminal-output.d.ts\n        ├── wasi-cli-terminal-stderr.d.ts\n        ├── wasi-cli-terminal-stdin.d.ts\n        ├── wasi-cli-terminal-stdout.d.ts\n        ├── wasi-clocks-monotonic-clock.d.ts\n        ├── wasi-clocks-wall-clock.d.ts\n        ├── wasi-filesystem-preopens.d.ts\n        ├── wasi-filesystem-types.d.ts\n        ├── wasi-io-error.d.ts\n        ├── wasi-io-streams.d.ts\n        └── wasi-random-random.d.ts\n\n    ```", "```\n    *import* *{* *environment**,* *exit* *as* *exit$1**,* *stderr**,* *stdin**,* *stdout**,* *terminalInput**,* *terminalOutput**,* *terminalStderr**,* *terminalStdin**,* *terminalStdout* *}* *from* *'@bytecodealliance/preview2-shim/cli'**;*\n    *import* *{* *monotonicClock**,* *wallClock* *}* *from* *'@bytecodealliance/preview2-shim/clocks'**;*\n    *import* *{* *preopens**,* *types* *}* *from* *'@bytecodealliance/preview2-shim/filesystem'**;*\n    *import* *{* *error**,* *streams* *}* *from* *'@bytecodealliance/preview2-shim/io'**;*\n    *import* *{* *random* *}* *from* *'@bytecodealliance/preview2-shim/random'**;*\n    ...\n    *function* *processMarkdownToHtml**(**arg0**)* *{*\n      *var* *ptr0* *=* *utf8Encode**(**arg0**,* *realloc1**,* *memory0**)**;*\n      *var* *len0* *=* *utf8EncodedLen**;*\n      *const* *ret* *=* *exports1**[**'process-markdown-to-html'**]**(**ptr0**,* *len0**)**;*\n      *let* *variant14**;*\n      *switch* *(**dataView**(**memory0**)**.**getUint8**(**ret* *+* 0*,* *true**)**)* *{*\n        *case* 0: *{*\n          *let* *variant2**;*\n          *switch* *(**dataView**(**memory0**)**.**getUint8**(**ret* *+* 4*,* *true**)**)* *{*\n            *case* 0: *{*\n              *variant2* *=* *undefined**;*\n              *break**;*\n            *}*\n            *case* 1: *{*\n              *var* *ptr1* *=* *dataView**(**memory0**)**.**getInt32**(**ret* *+* 8*,* *true**)**;*\n              *var* *len1* *=* *dataView**(**memory0**)**.**getInt32**(**ret* *+* 12*,* *true**)**;*\n              *var* *result1* *=* *utf8Decoder**.**decode**(**new* Uint8Array*(**memory0**.**buffer**,* *ptr1**,* *len1**)**)**;*\n              *variant2* *=* *result1**;*\n              *break**;*\n            *}*\n            *default*: *{*\n              *throw* *new* TypeError*(**'invalid variant discriminant for option'**)**;*\n            *}*\n          *}*\n          *var* *ptr3* *=* *dataView**(**memory0**)**.**getInt32**(**ret* *+* 16*,* *true**)**;*\n          *var* *len3* *=* *dataView**(**memory0**)**.**getInt32**(**ret* *+* 20*,* *true**)**;*\n          *var* *result3* *=* *utf8Decoder**.**decode**(**new* Uint8Array*(**memory0**.**buffer**,* *ptr3**,* *len3**)**)**;*\n          *let* *variant10**;*\n          *switch* *(**dataView**(**memory0**)**.**getUint8**(**ret* *+* 24*,* *true**)**)* *{*\n            *case* 0: *{*\n              *variant10* *=* *undefined**;*\n              *break**;*\n            *}*\n            *case* 1: *{*\n              *let* *variant5**;*\n              *switch* *(**dataView**(**memory0**)**.**getUint8**(**ret* *+* 28*,* *true**)**)* *{*\n                *case* 0: *{*\n                  *variant5* *=* *undefined**;*\n                  *break**;*\n                *}*\n                *case* 1: *{*\n                  *var* *ptr4* *=* *dataView**(**memory0**)**.**getInt32**(**ret* *+* 32*,* *true**)**;*\n                  *var* *len4* *=* *dataView**(**memory0**)**.**getInt32**(**ret* *+* 36*,* *true**)**;*\n                  *var* *result4* *=* *utf8Decoder**.**decode**(**new* Uint8Array*(**memory0**.**buffer**,* *ptr4**,* *len4**)**)**;*\n                  *variant5* *=* *result4**;*\n                  *break**;*\n                *}*\n                *default*: *{*\n                  *throw* *new* TypeError*(**'invalid variant discriminant for option'**)**;*\n                *}*\n              *}*\n              *let* *variant9**;*\n              *switch* *(**dataView**(**memory0**)**.**getUint8**(**ret* *+* 40*,* *true**)**)* *{*\n                *case* 0: *{*\n                  *variant9* *=* *undefined**;*\n                  *break**;*\n                *}*\n                *case* 1: *{*\n                  *let* *variant7**;*\n                  *switch* *(**dataView**(**memory0**)**.**getUint8**(**ret* *+* 44*,* *true**)**)* *{*\n                    *case* 0: *{*\n                      *variant7* *=* *undefined**;*\n                      *break**;*\n                    *}*\n                    *case* 1: *{*\n                      *var* *ptr6* *=* *dataView**(**memory0**)**.**getInt32**(**ret* *+* 48*,* *true**)**;*\n                      *var* *len6* *=* *dataView**(**memory0**)**.**getInt32**(**ret* *+* 52*,* *true**)**;*\n                      *var* *result6* *=* *utf8Decoder**.**decode**(**new* Uint8Array*(**memory0**.**buffer**,* *ptr6**,* *len6**)**)**;*\n                      *variant7* *=* *result6**;*\n                      *break**;*\n                    *}*\n                    *default*: *{*\n                      *throw* *new* TypeError*(**'invalid variant discriminant for option'**)**;*\n                    *}*\n                  *}*\n                  *var* *ptr8* *=* *dataView**(**memory0**)**.**getInt32**(**ret* *+* 56*,* *true**)**;*\n                  *var* *len8* *=* *dataView**(**memory0**)**.**getInt32**(**ret* *+* 60*,* *true**)**;*\n                  *var* *result8* *=* *utf8Decoder**.**decode**(**new* Uint8Array*(**memory0**.**buffer**,* *ptr8**,* *len8**)**)**;*\n                  *variant9* *=* *{*\n                    *language*: *variant7**,*\n                    *source*: *result8**,*\n                  *}**;*\n                  *break**;*\n                *}*\n                *default*: *{*\n                  *throw* *new* TypeError*(**'invalid variant discriminant for option'**)**;*\n                *}*\n              *}*\n              *variant10* *=* *{*\n                *title*: *variant5**,*\n                *codeBlock*: *variant9**,*\n              *}**;*\n              *break**;*\n            *}*\n            *default*: *{*\n              *throw* *new* TypeError*(**'invalid variant discriminant for option'**)**;*\n            *}*\n          *}*\n          *variant14**=* *{*\n            *tag*: *'ok'**,*\n            *val*: *{*\n              *toc*: *variant2**,*\n              *content*: *result3**,*\n              *frontmatter*: *variant10**,*\n            *}*\n          *}**;*\n          *break**;*\n        *}*\n        *case* 1: *{*\n          *let* *variant13**;*\n          *switch* *(**dataView**(**memory0**)**.**getUint8**(**ret* *+* 4*,* *true**)**)* *{*\n            *case* 0: *{*\n              *variant13**=* *{*\n                *tag*: *'nolang'**,*\n              *}**;*\n              *break**;*\n            *}*\n            *case* 1: *{*\n              *variant13**=* *{*\n                *tag*: *'nohighlighter'**,*\n              *}**;*\n              *break**;*\n            *}*\n            *case* 2: *{*\n              *var* *ptr11* *=* *dataView**(**memory0**)**.**getInt32**(**ret* *+* 8*,* *true**)**;*\n              *var* *len11* *=* *dataView**(**memory0**)**.**getInt32**(**ret* *+* 12*,* *true**)**;*\n              *var* *result11* *=* *utf8Decoder**.**decode**(**new* Uint8Array*(**memory0**.**buffer**,* *ptr11**,* *len11**)**)**;*\n              *variant13**=* *{*\n                *tag*: *'could-not-build-highlighter'**,*\n                *val*: *result11*\n              *}**;*\n              *break**;*\n            *}*\n            *case* 3: *{*\n              *var* *ptr12* *=* *dataView**(**memory0**)**.**getInt32**(**ret* *+* 8*,* *true**)**;*\n              *var* *len12* *=* *dataView**(**memory0**)**.**getInt32**(**ret* *+* 12*,* *true**)**;*\n              *var* *result12* *=* *utf8Decoder**.**decode**(**new* Uint8Array*(**memory0**.**buffer**,* *ptr12**,* *len12**)**)**;*\n              *variant13**=* *{*\n                *tag*: *'string-generation-error'**,*\n                *val*: *result12*\n              *}**;*\n              *break**;*\n            *}*\n            *default*: *{*\n              *throw* *new* TypeError*(**'invalid variant discriminant for HighlightError'**)**;*\n            *}*\n          *}*\n          *variant14**=* *{*\n            *tag*: *'err'**,*\n            *val*: *variant13*\n          *}**;*\n          *break**;*\n        *}*\n        *default*: *{*\n          *throw* *new* TypeError*(**'invalid variant discriminant for expected'**)**;*\n        *}*\n      *}*\n      *postReturn0**(**ret**)**;*\n      *if* *(**variant14**.**tag* *===* *'err'**)* *{*\n        *throw* *new* ComponentError*(**variant14**.**val**)**;*\n      *}*\n      *return* *variant14**.**val**;*\n    *}*\n    *.**.**.*\n    *export* **{* *processMarkdownToHtml**,* *processMarkdownToHtmlWithFrontmatter**,*  *}** \n    ```", "```\n    *import**{**environment* *as* *e**,**exit* *as* *r**,**stderr* *as* *a**,**stdin* *as* *t**,**stdout* *as* *s**,**terminalInput* *as* *o**,**terminalOutput* *as* *c**,**terminalStderr* *as* *n**,**terminalStdin* *as* *i**,**terminalStdout* *as* *l**}**from**\"/components/preview2-shim-browser/cli.js\"**;**import**{**monotonicClock* *as* *d**,**wallClock* *as* *b**}**from**\"/components/preview2-shim-browser/clocks.js\"**;**import**{**preopens* *as* A*,**types* *as* *k**}**from**\"/components/preview2-shim-browser/filesystem.js\"**;**import**{**error* *as* *f**,**streams* *as* *p**}**from**\"/components/preview2-shim-browser/io.js\"**;**import**{**random* *as* *u**}**from* *\"/components/preview2-shim-browser/random.js\"**;*\n\n    ```", "```\n    *use* *crate**::*errors*::*BenwisAppError*;*\n    *use* serde*::**{*Deserialize*,* Serialize*}**;*\n    *use* wasm_bindgen*::*prelude*::*****;*\n\n    *///Recreate HtmlOutput so we don't have to import it from server only crates*\n    *#*[*derive*(*Default, Debug, Clone, Serialize, Deserialize*)**]**\n    *pub* *struct* *HtmlOutput* *{*\n        *pub* *toc**:* *Option**<**String**>**,*\n        *pub* *content**:* *String**,*\n        *pub* *frontmatter**:* *Option**<**OwnedFrontmatter**>**,*\n    *}*\n    */// An owned version of the CodeBlock used for the frontmatter. Makes it much easier to return.*\n    *#*[*derive*(*Default, Debug, Clone, Serialize, Deserialize*)**]**\n    *pub* *struct* *OwnedCodeBlock* *{*\n        *pub* *language**:* *Option**<**String**>**,*\n        *pub* *source**:* *String**,*\n    *}*\n\n    */// An owned verison of the Frontmatter, returned from our functions*\n    *#*[*derive*(*Default, Debug, Clone, Serialize, Deserialize*)**]**\n    *pub* *struct* *OwnedFrontmatter* *{*\n        *pub* *title**:* *Option**<**String**>**,*\n        *pub* *code_block**:* *Option**<**OwnedCodeBlock**>**,*\n    *}*\n\n    *#*[*wasm_bindgen*(*raw_module = *\"/components/femark-wasi/femark.js\"**)**]**\n    *extern* *\"C\"* *{*\n        *pub* *fn* *processMarkdownToHtml**(**input**:* *String**)* -> *JsValue**;*\n\n        *pub* *fn* *processMarkdownToHtmlWithFrontmatter**(**input**:* *String**)* -> *JsValue**;*\n    *}*\n\n    *pub* *fn* *process_markdown_to_html**(**input**:* *String**)* -> *Result**<**HtmlOutput**,* *BenwisAppError**>* *{*\n        *let* jsval = *processMarkdownToHtml**(*input*)**;*\n        Ok*(*serde_wasm_bindgen*::**from_value**(*jsval*)*?*)*\n    *}*\n\n    *pub* *fn* *process_markdown_to_html_with_frontmatter**(*\n        *input**:* *String**,*\n    *)* -> *Result**<**HtmlOutput**,* *BenwisAppError**>* *{*\n        *let* jsval = *processMarkdownToHtmlWithFrontmatter**(*input*)**;*\n        Ok*(*serde_wasm_bindgen*::**from_value**(*jsval*)*?*)*\n    *}*\n\n    ```", "```\n    *use* *crate**::*functions*::*post*::**{*get_post*,* UpdatePost*}**;*\n\n    *#*[*cfg*(*not*(*feature = *\"ssr\"**)**)**]**\n    *use* *crate**::*js*;*\n\n    *use* *crate**::*models*::**{*Post*,* SafeUser*}**;*\n    *use* *crate**::*providers*::*AuthContext*;*\n    *use* *crate**::*routes*::*blog*::*PostParams*;*\n    *use* cfg_if*::*cfg_if*;*\n    *use* leptos*::*****;*\n    *use* leptos_meta*::*****;*\n    *use* leptos_router*::*****;*\n\n    *#*[*island*]**\n    *pub* *fn* EditPostForm*(**user**:* *Option**<**SafeUser**>**,* *post**:* *Post**)* -> *impl* *IntoView* *{*\n        *let* update_post = *create_server_action**::**<**UpdatePost**>**(**)**;*\n        *let* content = *create_rw_signal**(**String**::**new**(**)**)**;*\n        *let* toc = *create_rw_signal**::**<**Option**<**String**>**>**(*None*)**;*\n        *let* show_post_metadata = *create_rw_signal**(**false**)**;*\n        *view**!* *{*\n          <ActionForm action=update_post class=*\"w-full text-black dark:text-white\"*>\n            <div class=*\"grid min-h-full w-full grid-cols-2\"*>\n              <section class=*\"text-left flex-col w-full justify-between col-span-2 gap-4 dark:bg-gray-900 bg-slate-50 rounded mb-4 border-2 dark:border-yellow-400 border-gray-300 \"*>\n                <div on:click=move |_e| *{*\n                    show_post_metadata.update*(*|b| *b = !*b*)*;\n                *}*>\n\n              //...\n                <textarea\n                  *type*=*\"text\"*\n                  id=*\"raw_content\"*\n                  name=*\"raw_content\"*\n                  rows=*50*\n                  class=*\"w-full text-black border border-gray-500\"*\n                  on:input=move |ev| *{*\n                      cfg_if! *{*\n                          *if* #*[*cfg*(*not*(*feature = *\"ssr\"**)**)**]* *{* \n                              *let* new_value = event_target_value*(*& ev*)*; \n                              *let* output = js::process_markdown_to_html_with_frontmatter*(*new_value.into*(**)**)*; \n                              *match* output *{* \n                                  Ok*(*o*)* => *{* \n                                      content.set*(*o.content*)*;\n                          \t\t\t  toc.set*(*o.toc*)*; \n                                  *}*, \n                                  Err*(*e*)* => leptos::logging::log!*(**\"{}\"*, e*)*\n                          *}* *}*\n                      *}*\n                  *}*\n                >\n                  *{*post.raw_content.clone*(**)**}*\n                </textarea>\n                <input\n                  *type*=*\"hidden\"*\n                  name=*\"content\"*\n                  id=*\"content\"*\n                  value=move || content.get*(**)*\n                />\n              </div>\n              <section class=*\"shadow-md rounded\"*>\n                <div\n                  class=*\"prose text-black prose dark:prose-invert dark:text-white text-base p-4 bg-slate-200 dark:bg-gray-800 w-full h-full rounded\"*\n                  inner_html=move || content.get*(**)*\n                ></div>\n              </section>\n            </div>\n          </ActionForm>\n        *}*\n    *}*\n\n    ```"]