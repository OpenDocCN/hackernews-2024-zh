- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:43:57'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: How SMS Fraud Works and How to Guard Against It
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://technicallythinking.substack.com/p/how-sms-fraud-works-and-how-to-guard-against-it](https://technicallythinking.substack.com/p/how-sms-fraud-works-and-how-to-guard-against-it)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: With Twitter [disabling](https://blog.twitter.com/en_us/topics/product/2023/an-update-on-two-factor-authentication-using-sms-on-twitter)
    text message two-factor authentication, I thought it‚Äôd be fun to do a deep-dive
    into how SMS fraud works and how app developers can guard against it.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs a fascinating story of perverse incentives, short-sighted regulation, and
    technical ingenuity.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs dig in! üëá
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Note to all subscribers of [Mindful Musings](https://apuchitnis.substack.com/)
    ‚Äî this post (and others that will follow) are part of a new series that I‚Äôm calling
    *Technically Thinking*. The focus of this section will be more engineering-related,
    with deep dives, introduction pieces, and more for engineers and hackers.
  id: totrans-split-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If that‚Äôs not your cup of tea, feel free to opt-out of Technically Thinking
    in your subscription ‚Äî I won‚Äôt mind! üòä
  id: totrans-split-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To start, let‚Äôs recap Twitter‚Äôs recent announcement:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: In plain English, this simply means that only users of the paid version of Twitter
    will get a code sent to their phone during login.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: The key to understanding SMS fraud is understanding that some numbers are *[premium](https://en.wikipedia.org/wiki/Premium-rate_telephone_number)*.
    If you want to call or send an SMS to this number, it‚Äôll cost *you* some money
    ‚Äî typically tens of cents ‚Äî and the owner of the number gets a portion of those
    tens of cents for themselves.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: Owners of these phone numbers typically offer legitimate services that cost
    money to supply and offer value to their users, such as tele-voting, dating, and
    tech support.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: However, these numbers can be gamed for easy profit ü§ë
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: A bad actor, let‚Äôs call him *Bob*, gets hold of several premium phone numbers.
    Bob could be a hacker, or could be a mobile phone network operator gone bad.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: Bob finds a web service that will send text messages to his premium phone numbers.
    These messages could be two-factor authentication codes, one time passwords, or
    any other text message sent to the user as part of the service (eg [partiful.com](http://partiful.com)
    sends event reminders via SMS).
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Bob finds a way to make the service send *thousands* of SMSs to his premium
    phone numbers. This might be very easy. The front end service might be easy to
    manipulate, and the backend endpoints might be unprotected and easy to reverse-engineer.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Even worse, many services use a standardised endpoint for sending SMSs. This
    makes it vastly easier to for Bob to find sites to attack. For example, if the
    service uses a third party for authenticating users and sending out 2FA or OTP
    codes, such as Auth0, then the endpoint for sending SMSs is mostly known: all
    Bob needs to do is to figure out a way to discover the Auth0‚Äôs ID for a web service
    (fairly easy, since the web service‚Äôs front-end makes a request containing this
    ID), and then they can attack *all* sites that use that third party service.'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Bob makes the service send thousands of SMSs to his premium phone numbers.
    The web service loses üíµüíµüíµ, and Bob profits.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: 'There‚Äôs no one silver bullet to prevent SMS fraud. But here are a few ideas
    that could work:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: If using a third-party service to authenticate users, such as Auth0, you could
    obfuscate the endpoint used to send SMSs. Whilst this won‚Äôt prevent an attack
    outright, it does make it much harder to discover that an attack is possible.
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar to how a bike thief targets the easiest to steal bikes, a good hacker
    would move onto web services that are easier to hack. My hunch is that this approach
    would work for well enough for the [long tail](https://en.wikipedia.org/wiki/Long_tail)
    of apps.
  id: totrans-split-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Block all requests from IPs that originate in cloud providers, fraudulent ISPs,
    or are otherwise sketchy. This should be fairly simple to implement ‚Äî many services
    exist that allow you to rate the quality of an IP address ‚Äî and would probably
    be very effective.
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add IP-based [rate-limiting](https://en.wikipedia.org/wiki/Rate_limiting) to
    the endpoint that sends out SMS to block Bob‚Äôs attack. If set up correctly, this
    won‚Äôt affect legitimate users. However, this only works against a simple attack.
    If Bob architects his attack to send requests from a variety of IP addresses ‚Äî
    a *distributed* attack ‚Äî then this wouldn‚Äôt work.
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Only send an SMS to a specific phone number a small number of times before
    blocking that phone number for a cool-off period. We could do this on the front-end,
    but if Bob is determined, he could figure out the backend endpoint to attack instead.
    Blocking the phone number on the backend is harder: it requires keeping a record
    of phone numbers and their recent login attempts.'
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Force the user to solve a CAPTCHA before sending them an SMS. Whilst this approach
    works well at blocking attackers ‚Äî solving the CAPTCHA is hard and expensive to
    do at scale ‚Äî it does degrade the user‚Äôs experience of the service.
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify and block *premium* rate phone numbers, using [libphonenumber](https://github.com/google/libphonenumber).
    Whilst this seems promising, I don‚Äôt know how reliable the data and how effective
    this approach is.
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only send text messages to paid accounts. This is the approach Twitter has gone
    with. It‚Äôs not a bad option, but as you can see from the list above, there‚Äôre
    many other approaches you could take.
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block mobile phone network operators with a high number of fraudulent users.
    This would block clearly bad network operators, but wouldn‚Äôt work well if the
    network has many legitimate users.
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use WhatsApp to send messages instead. WhatsApp is free unlike SMS, but not
    all users across the world use WhatsApp.
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A good solution would make use of enough of the approaches above, prioritising
    by time investment and effectiveness, until the attackers move onto easier targets.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: I‚Äôve got some personal experience implementing the above measures, and have
    a story or two to share about how my team handled the fallout. But that‚Äôs a story
    for another time‚Ä¶ üë®‚Äçüíª
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: 'This brings me to my final point:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: IMO, Twilio ‚Äî a dominant SMS API ‚Äî has a **huge**  **opportunity** to offer
    SMS fraud protection as a (free? üôè) add-on to their standard APIs.
  id: totrans-split-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Since Twilio has data on fraudulent phone numbers and carriers across all their
    accounts, Twilio are in the unique position to block bad numbers and carriers
    *fast* ‚Äî before they becomes a big issue for multiple web services.
  id: totrans-split-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Twilio can even detect invalid phone numbers outright using [Silent Network
    Auth](https://www.twilio.com/docs/verify/sna) ‚Äî a next-generation authentication
    mechanism ‚Äî and it feels like this utility ought to be *shared* between their
    users.
  id: totrans-split-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I‚Äôd love to hear any other thoughts, ideas and approaches folks have used ‚Äî
    please share by writing a comment below, and we can all learn.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: That‚Äôs it for now ‚Äî protect those endpoints, and have a great week!
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: '*There‚Äôs an excellent discussion on [HackerNews](https://news.ycombinator.com/item?id=34972712).*'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
