- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:44:45'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Linux text manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://yusuf.fyi/posts/linux-text-manipulation](https://yusuf.fyi/posts/linux-text-manipulation)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Today, I wanted to make a module for my AwesomeWM status bar that shows the
    currently playing Spotify song, it’d be nice if it could show something human-readable
    like this: *Wild World by Yusuf/Cat Stevens*.'
  prefs: []
  type: TYPE_NORMAL
- en: Through a quick search, I found a tiny bash script, [sp](https://gist.github.com/streetturtle/fa6258f3ff7b17747ee3),
    that does what I need. except the output must be cleaned up.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: I could ask chatgpt to format this or write a Lua script, but that wouldn’t
    be much fun, *would it?* in this article, we’ll learn how to use `awk`, `sed`
    and other commands to get the desired output.
  prefs: []
  type: TYPE_NORMAL
- en: Intended Audience
  prefs: []
  type: TYPE_NORMAL
- en: this is intended for people who have used Linux but are otherwise new to the
    terminal, if you’ve at least created a file from the command line, you’re good
    to go, I’ll cover everything else throughout the article
  prefs: []
  type: TYPE_NORMAL
- en: If you want to follow along, download the bash script, and experiment with the
    commands we’ll learn, but that’s not required per se.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mini Problem #1'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To get started `sp current` returns the album name, album artist, song artist,
    and song title, whereas we only need the artist and title. we can use `sed` to
    pick the specific lines we need.
  prefs: []
  type: TYPE_NORMAL
- en: sed works by looping through lines of the input and doing a given action, by
    default it prints the resulting lines to stdout. we can give sed a file to work
    with but more commonly you’ll pipe a command into sed, as we’ll do later on.
  prefs: []
  type: TYPE_NORMAL
- en: <details><summary>What do you mean by ***pipe***?</summary> Generally, in Linux,
    a command’s input is read from the keyboard and its output (along with any errors)
    is printed on your screen. we can, however, change this behavior.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: piping essentially lets you pass a command’s output onto another command’s input.
    programs can choose whether or not to support piping, but most basic Linux programs
    (and all the ones we’ll discuss today) support it.</details>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: let’s look into sed in more detail
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'and now—as you may have already figured out—we can print the artist and song
    name only like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: and we end up with
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Mini Problem #2'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, we need to get rid of the column labels, we can use `cut` for this. As
    with `sed`, `cut` accepts a file as its input, if no file is given it’ll read
    from stdin.
  prefs: []
  type: TYPE_NORMAL
- en: Here is how we usually work with `cut`, you give it a delimiter and a set of
    columns to print, and it will split each line by that delimiter and return the
    selected columns.
  prefs: []
  type: TYPE_NORMAL
- en: in our case, columns are separated with a space, so we can do the following
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'our columns are seperated by multiple spaces though, so cut will treat the
    empty-ness between each space as its own column, to avoid this we can inject the
    command `tr` to trim the extra spaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: But this is still not totally right. if a song’s title contains more than one
    word we’ll get this
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: you can pass `cut` a column range to print, as in `cut -d ' ' -f2-4` to select
    the 2nd, 3rd, and 4th columns, **if the range is open-ended**, `cut` **will print
    every column until the end of the line**, so let’s incorporate that into our script.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**note**: as I’ve shown you `tr` needs to be applied before `cut` on the contrary,
    `cut` and `sed` can be swapped because they serve entirely different purposes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mini Problem #3'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, what’s left is to simply join the lines and format them nicely. we can
    use `awk` to do this.
  prefs: []
  type: TYPE_NORMAL
- en: '`awk` is based on a condition-script model, It’s similar to `sed` it checks
    if the current line matches the condition and executes the appropriate script,
    although I find `awk` to have a more expressive syntax.'
  prefs: []
  type: TYPE_NORMAL
- en: 'awk scripts are written in quotes like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: let’s look at a few examples. any of these can be passed to awk in quotes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, you can assign globals to variables,
  prefs: []
  type: TYPE_NORMAL
- en: this assigns a to the 1st column of the 1st line and then prints `x` for every
    line in the input. note that the first script only runs once, thus a will stay
    the same for every line
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'now we can combine everything we know to get this script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'this does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: we assign `a` to the artist name (entire first line)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`skip` tells `awk` to *skip* the execution of the second script and to move
    to the next line'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: we’re on the second line now so `NR==1` isn’t matched and the first script is
    skipped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: print the song name (`$0`) then the string literal `by` then the artist name
    (content of variable `a`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Final Thoughts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'That concludes our script, here is what we ended up with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now this script could be optimized in different ways, but instead of showing
    you how to do it here, I leave that as *an exercise to the reader*. here are a
    couple of things you can do, ranging from easiest to hardest:'
  prefs: []
  type: TYPE_NORMAL
- en: replace the `cut` command with an additional `sed` action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: re-write the entire thing from memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: make the script as short as possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: write the entire script in `awk`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, I hope you learned something new today and if you attempt any of these,
    please share what you did either in the mastodon replies or through an article
    on your blog. I promise to take a look and I’ll probably learn something myself!
  prefs: []
  type: TYPE_NORMAL
