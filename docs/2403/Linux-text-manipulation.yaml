- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 12:44:45'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 12:44:45
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Linux text manipulation
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux文本操作
- en: 来源：[https://yusuf.fyi/posts/linux-text-manipulation](https://yusuf.fyi/posts/linux-text-manipulation)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://yusuf.fyi/posts/linux-text-manipulation](https://yusuf.fyi/posts/linux-text-manipulation)
- en: 'Today, I wanted to make a module for my AwesomeWM status bar that shows the
    currently playing Spotify song, it’d be nice if it could show something human-readable
    like this: *Wild World by Yusuf/Cat Stevens*.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我想为我的AwesomeWM状态栏制作一个模块，显示当前播放的Spotify歌曲，如果能显示类似这样易于理解的内容就更好了：*Wild World
    by Yusuf/Cat Stevens*。
- en: Through a quick search, I found a tiny bash script, [sp](https://gist.github.com/streetturtle/fa6258f3ff7b17747ee3),
    that does what I need. except the output must be cleaned up.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过快速搜索，我找到了一个小巧的bash脚本，[sp](https://gist.github.com/streetturtle/fa6258f3ff7b17747ee3)，可以完成我需要的功能。不过输出必须进行清理。
- en: '[PRE0]'
  id: totrans-split-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I could ask chatgpt to format this or write a Lua script, but that wouldn’t
    be much fun, *would it?* in this article, we’ll learn how to use `awk`, `sed`
    and other commands to get the desired output.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以让chatgpt格式化这篇文章或编写一个Lua脚本，但那就没什么乐趣了，*对吧？*在本文中，我们将学习如何使用`awk`、`sed`和其他命令来获得所需的输出。
- en: Intended Audience
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 预期读者
- en: this is intended for people who have used Linux but are otherwise new to the
    terminal, if you’ve at least created a file from the command line, you’re good
    to go, I’ll cover everything else throughout the article
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章适用于那些已经使用过Linux但对终端仍然新手的人，如果你至少能从命令行创建一个文件，那就可以了，我会在整篇文章中覆盖其他所有内容。
- en: If you want to follow along, download the bash script, and experiment with the
    commands we’ll learn, but that’s not required per se.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想跟着学，可以下载bash脚本，并尝试我们将学习的命令，但这并非必须。
- en: 'Mini Problem #1'
  id: totrans-split-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迷你问题＃1
- en: To get started `sp current` returns the album name, album artist, song artist,
    and song title, whereas we only need the artist and title. we can use `sed` to
    pick the specific lines we need.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，`sp current`返回专辑名称、专辑艺术家、歌曲艺术家和歌曲标题，但我们只需要艺术家和标题。我们可以使用`sed`来选择我们需要的特定行。
- en: sed works by looping through lines of the input and doing a given action, by
    default it prints the resulting lines to stdout. we can give sed a file to work
    with but more commonly you’ll pipe a command into sed, as we’ll do later on.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`sed`通过循环处理输入的每一行并执行给定的操作， 默认情况下将结果行打印到标准输出。我们可以给`sed`提供一个要处理的文件，但更常见的是将一个命令的输出管道传递给`sed`，正如我们稍后将会做的那样。'
- en: <details><summary>What do you mean by ***pipe***?</summary> Generally, in Linux,
    a command’s input is read from the keyboard and its output (along with any errors)
    is printed on your screen. we can, however, change this behavior.
  id: totrans-split-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <details><summary>你所说的***管道***是什么意思？</summary>通常在Linux中，命令的输入来自键盘，并将其输出（以及任何错误）打印到屏幕上。然而，我们可以改变这种行为。</details>
- en: piping essentially lets you pass a command’s output onto another command’s input.
    programs can choose whether or not to support piping, but most basic Linux programs
    (and all the ones we’ll discuss today) support it.</details>
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 管道本质上允许你将一个命令的输出传递到另一个命令的输入。程序可以选择是否支持管道，但大多数基本的Linux程序（以及我们今天将讨论的所有程序）都支持它。
- en: let’s look into sed in more detail
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地了解`sed`。
- en: '[PRE1]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'and now—as you may have already figured out—we can print the artist and song
    name only like so:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在——你可能已经发现——我们可以仅仅这样打印艺术家和歌曲名：
- en: '[PRE5]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: and we end up with
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们得到了
- en: '[PRE6]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Mini Problem #2'
  id: totrans-split-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迷你问题＃2
- en: Next, we need to get rid of the column labels, we can use `cut` for this. As
    with `sed`, `cut` accepts a file as its input, if no file is given it’ll read
    from stdin.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要去掉列标签，我们可以使用`cut`来做这件事。与`sed`类似，`cut`接受文件作为其输入，如果没有提供文件，则将从标准输入读取。
- en: Here is how we usually work with `cut`, you give it a delimiter and a set of
    columns to print, and it will split each line by that delimiter and return the
    selected columns.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们通常使用`cut`的方式，你给它一个分隔符和一组要打印的列，它将每一行按照该分隔符分割，并返回选定的列。
- en: in our case, columns are separated with a space, so we can do the following
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，列是用空格分隔的，因此我们可以这样做。
- en: '[PRE7]'
  id: totrans-split-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'our columns are seperated by multiple spaces though, so cut will treat the
    empty-ness between each space as its own column, to avoid this we can inject the
    command `tr` to trim the extra spaces:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的列由多个空格分隔，所以cut将每个空白之间的空白视为其自己的列，为了避免这种情况，我们可以使用`tr`命令来修剪额外的空格：
- en: '[PRE8]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: But this is still not totally right. if a song’s title contains more than one
    word we’ll get this
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但这还不是完全正确。如果歌曲标题包含多个单词，我们将会得到这样的结果。
- en: '[PRE9]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: you can pass `cut` a column range to print, as in `cut -d ' ' -f2-4` to select
    the 2nd, 3rd, and 4th columns, **if the range is open-ended**, `cut` **will print
    every column until the end of the line**, so let’s incorporate that into our script.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以向`cut`传递一个列范围以打印，例如`cut -d ' ' -f2-4`来选择第2、第3和第4列，**如果范围是开放的**，`cut` **将打印直到行尾的每一列**，所以让我们将它们合并到我们的脚本中。
- en: '[PRE10]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'output:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE11]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**note**: as I’ve shown you `tr` needs to be applied before `cut` on the contrary,
    `cut` and `sed` can be swapped because they serve entirely different purposes.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：正如我向你展示的那样，在`cut`之前需要应用`tr`，相反，`cut`和`sed`可以交换，因为它们提供完全不同的功能。'
- en: 'Mini Problem #3'
  id: totrans-split-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小问题＃3
- en: Now, what’s left is to simply join the lines and format them nicely. we can
    use `awk` to do this.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，剩下的就是简单地连接这些行并进行良好的格式化，我们可以使用`awk`来实现这一点。
- en: '`awk` is based on a condition-script model, It’s similar to `sed` it checks
    if the current line matches the condition and executes the appropriate script,
    although I find `awk` to have a more expressive syntax.'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`awk`基于条件脚本模型，类似于`sed`，它检查当前行是否符合条件并执行相应的脚本，尽管我觉得`awk`的语法更加表达丰富。'
- en: 'awk scripts are written in quotes like this:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: awk脚本用引号括起来写成这样：
- en: '[PRE12]'
  id: totrans-split-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: let’s look at a few examples. any of these can be passed to awk in quotes.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看几个例子。任何这些都可以用引号传递给awk。
- en: '[PRE13]'
  id: totrans-split-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Lastly, you can assign globals to variables,
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以将全局变量赋值给变量，
- en: this assigns a to the 1st column of the 1st line and then prints `x` for every
    line in the input. note that the first script only runs once, thus a will stay
    the same for every line
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将`a`赋给第1行的第1列，然后对输入的每一行打印`x`。请注意，第一个脚本只运行一次，因此`a`对于每一行都保持不变。
- en: '[PRE15]'
  id: totrans-split-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'now we can combine everything we know to get this script:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以结合我们所学的一切来得到这个脚本：
- en: '[PRE16]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'this does the following:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这做了以下几件事：
- en: we assign `a` to the artist name (entire first line)
  id: totrans-split-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将`a`赋给艺术家的名字（整个第一行）
- en: '`skip` tells `awk` to *skip* the execution of the second script and to move
    to the next line'
  id: totrans-split-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`skip`告诉`awk`跳过第二个脚本的执行并移动到下一行。'
- en: we’re on the second line now so `NR==1` isn’t matched and the first script is
    skipped.
  id: totrans-split-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在在第二行上，因此`NR==1`不匹配并且第一个脚本被跳过。
- en: print the song name (`$0`) then the string literal `by` then the artist name
    (content of variable `a`)
  id: totrans-split-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印歌曲名（`$0`），然后是字符串文字`by`，然后是艺术家的名字（变量`a`的内容）
- en: '[PRE17]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Final Thoughts
  id: totrans-split-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后的想法
- en: 'That concludes our script, here is what we ended up with:'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们的脚本结束了，这就是我们最终得到的结果：
- en: '[PRE18]'
  id: totrans-split-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now this script could be optimized in different ways, but instead of showing
    you how to do it here, I leave that as *an exercise to the reader*. here are a
    couple of things you can do, ranging from easiest to hardest:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个脚本可以以不同的方式进行优化，但是我不会在这里向你展示如何做，我把它留给读者作为一个练习。这里有一些你可以做的事情，从最简单到最难：
- en: replace the `cut` command with an additional `sed` action
  id: totrans-split-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用额外的`sed`操作替换`cut`命令
- en: re-write the entire thing from memory
  id: totrans-split-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从记忆中重写整个内容
- en: make the script as short as possible
  id: totrans-split-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使脚本尽可能简短
- en: write the entire script in `awk`
  id: totrans-split-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`awk`中编写整个脚本
- en: Finally, I hope you learned something new today and if you attempt any of these,
    please share what you did either in the mastodon replies or through an article
    on your blog. I promise to take a look and I’ll probably learn something myself!
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我希望今天你学到了新东西，如果你尝试了其中的任何一个，请分享你做了什么，无论是通过Mastodon回复还是在你的博客文章中。我承诺会看一看，而且我可能也会学到一些新东西！
