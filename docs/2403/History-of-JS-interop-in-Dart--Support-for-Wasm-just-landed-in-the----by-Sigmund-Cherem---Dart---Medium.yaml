- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:48:59'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: History of JS interop in Dart. Support for Wasm just landed in the… | by Sigmund
    Cherem | Dart | Medium
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://medium.com/dartlang/history-of-js-interop-in-dart-98b06991158f](https://medium.com/dartlang/history-of-js-interop-in-dart-98b06991158f)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: History of JS interop in Dart
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Support for Wasm just landed in the current Flutter beta, thanks to an exciting
    JavaScript interop milestone reached in Dart 3.3\. To celebrate, we’re taking
    a look back at the decade-long journey of Dart and JS interoperability.
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AI Image generated by Gemini
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Interoperability has been a core focus from the beginning of Dart. When Dart
    was first released in 2011, it was designed to be *embeddable* and *multi-platform*.
    It ran on a standalone virtual machine, embedded in a browser, and compiled to
    JavaScript. When Flutter came along in 2015, we were ready to embed it there,
    too. Now, we’re excited to [target WasmGC runtimes](https://docs.flutter.dev/platform-integration/web/wasm),
    as well.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: 'At first, we worked quickly to expose the capabilities of each platform where
    Dart was embedded. That’s how our SDK platform-specific libraries emerged: `[dart:io](https://api.dart.dev/stable/dart-io/dart-io-library.html)`
    exposed the file system on the VM, `[dart:html](https://api.dart.dev/stable/dart-html/dart-html-library.html)`
    exposed the browser APIs on the web, and so on. These libraries looked and felt
    like regular Dart libraries, but behind the scenes hid some sophisticated low-level,
    native primitives to make them work. This was the very first form of interop we
    ever invented. It was expressive, but restricted to only SDK libraries.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: On the web, developers needed access to more than just browser APIs. So we started
    looking at ways to open interoperability to cover more targets. As a starting
    point, we introduced `[dart:js](https://codereview.chromium.org//15782009)` in
    2013 to enable access to JavaScript libraries.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
- en: We knew then that `dart:js` was not the programming model we wanted. You had
    to use strings to access names from JavaScript — forget about finding issues at
    compile-time, and don’t even think about code completion! The implementation was
    expensive, too. It heavily relied on boxes and deep copies for most operations.
    So we continued [drafting](https://github.com/dart-archive/js-interop-deprecated)
    ideas in 2014 and 2015 until v0.6 of `package:js` was released.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
- en: 'With `[package:js](https://pub.dev/documentation/js/latest/)` we finally had
    an open API that was efficient and user friendly. You could sprinkle some annotations
    on abstract classes, and *voila,* you had access to JavaScript APIs. It all worked
    like magic, until it didn’t. There was a lot you couldn’t do with `package:js`:
    accessing browser APIs directly, renaming members, conversions, attaching Dart
    logic, and [more](https://github.com/dart-lang/sdk/issues/35084). To compensate,
    we also shipped `[dart:js_util](https://codereview.chromium.org/2150313003/)`
    — a lightweight and efficient low-level API similar to `dart:js`, as a fallback.
    All the limitations in `package:js` really bothered us, but our hands were tied.
    We needed more from the Dart language to do better.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: Around that time, we were already working on the biggest change to the language
    we have ever made — we were making Dart [sound](https://dart.dev/language/type-system#what-is-soundness).
    Ironically, when we released the new type system with Dart 2.0 in 2018, interoperability
    got *worse*! Beyond those early limitations, that magic that made `package:js`
    special had a dark side — it couldn’t check the validity of types. This meant
    that our interoperability was a source of unsoundness in our otherwise sound language.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Then, our journey changed to focus on improving both Dart and JS-interop as
    a concerted effort. With clear principles (be idiomatic, expressive, compositional,
    precise, approachable, pragmatic, non-magical, and complete) we steered towards
    a design that anchored on typing and static dispatching, and that challenged the
    Dart language. What followed was a side-by-side evolution.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: In 2019, Dart 2.7 added static extension methods. You could attach custom Dart
    logic to a JS-interop class and convert values, like a JS `Promise` into a Dart
    `Future`, without using wrappers.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In 2021, we released `@staticInterop` with `package:js` v0.6.4\. At last, JS-interop
    was expressive enough — you could expose browser APIs that previously were exclusively
    managed by SDK libraries like `dart:html`.
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In 2023, when we dropped unsound null safety in Dart 3.0, we could finally see
    the progress we had made, our designs and `@staticInterop` work made it clear
    we were ready to address the soundness gap we had for so long.
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That year, we introduced compilation to WasmGC and leveraged JS-interop to run
    rich frameworks like [Flutter web](/flutter/whats-next-for-flutter-b94ce089f49c)
    on it. This sparked work on [JS Types](https://dart.dev/interop/js-interop/js-types)
    to clearly define the Dart and JS boundary in the programming model and find a
    consistent way to work with JS in both Wasm and JS compilation targets. We also
    started the [extension types](https://dart.dev/language/extension-types) language
    experiment — a feature launched in Dart 3.3 that bridges the gap between the Dart
    language and JS-interop. For years, JS-interop had behaviors, like type erasure,
    that didn’t match anything else in Dart. With extension types, JS-interop could
    finally be idiomatic and get the support it deserves in Dart development tools.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Despite the many shifts and turns along the way, one thing remained consistent
    throughout the entire decade: the active engagement of our Dart community. Community
    members took early steps testing and contributing to `dart:js`, then later influencing
    the design of `package:js`. They wrote tools to address feature gaps (`[package:js_wrapping](https://github.com/a14n/dart-js-wrapping)`),
    and experimented with ways to improve productivity by autogenerating Dart APIs
    (`[package:js_facade_gen](https://github.com/dart-archive/js_facade_gen)`, `[package:js_bindings](https://pub.dev/packages/js_bindings)`,
    `[package:typings](https://pub.dev/packages/typings)`). Each contribution helped
    make Dart’s interop design better. To each of you out there, thank you for making
    this such an exciting adventure!'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: Finally, here we are in 2024\. We released `[dart:js_interop](https://dart.dev/interop/js-interop)`
    in Dart 3.3 together with `[package:web](https://dart.dev/interop/js-interop/package-web)`,
    the newest solutions for JS interop in Dart that make compiling [Flutter to Wasm](https://docs.flutter.dev/platform-integration/web/wasm)
    possible.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
- en: '`dart:js_interop` is a static, sound, idiomatic, expressive, and consistent
    form of interop based on extension types that is capable of exposing any JavaScript
    or browser APIs.'
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package:web` uses `dart:js_interop` to do what `dart:html` once did 13 years
    ago, but in a way that is supported both in JavaScript and WasmGC.'
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Today, we are excited to celebrate a new form of Dart/JS interop and the future
    it enables. Knowing our past, we are certain this isn’t the end of the journey,
    but an exciting point in our history.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: We can’t wait to see what you’ll build with it!
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
