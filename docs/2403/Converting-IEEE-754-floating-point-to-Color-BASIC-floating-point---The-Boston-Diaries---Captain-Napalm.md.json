["```\n4634\t\t\t\t* MODIFIED TAYLOR SERIES SIN COEFFICIENTS\n4635\tBFC7 05\t\t\tLBFC7\tFCB\t6-1\t\t\tSIX COEFFICIENTS\n4636\tBFC8 84 E6 1A 2D 1B\tLBFC8\tFCB\t$84,$E6,$1A,$2D,$1B\t* -((2*PI)**11)/11!\n4637\tBFCD 85 28 07 FB F8\tLBFCD\tFCB\t$86,$28,$07,$FB,$F8\t*  ((2*PI)**9)/9!\n4638\tBFD2 87 99 68 89 01\tLBFD2\tFCB\t$87,$99,$68,$89,$01\t* -((2*PI)**7)/7!\n4639\tBFD7 87 23 35 DF E1\tLBFD7\tFCB\t$87,$23,$35,$DF,$E1\t*  ((2*PI)**5)/5!\n4640\tBFDC 86 A5 5D E7 28\tLBFDC\tFCB\t$86,$A5,$5D,$E7,$28\t* -((2*PI)**3)/3!\n4641\tBFE1 83 49 0F DA A2\tLBFE1\tFCB\t$83,$49,$0F,$DA,$A2\t*    2*PI\n\n```", "```\nX=0         ' CREATE A VARIABLE\nY=VARPTR(X) ' GET ITS ADDRESS\nPOKE Y,&H86 ' AND SET ITS VALUE\nPOKE Y+1,&HA5 ' THE HARD WAY\nPOKE Y+2,&H5D\nPOKE Y+3,&HE7\nPOKE Y+4,&H28\nPRINT X ' LET'S SEE WHAT IT IS\n-41.3417023\n\n```", "```\n\torg\t$1000\n\t.float\t-41.3417023\n\tend\n\n```", "```\n                         | FILE ff.a\n                       1 |         org     $1000\n1000: 86A55DE735       2 |         .float  -41.3417023\n                       3 |         end\n\n```", "```\n                         | FILE ff.a\n                       1 |         org     $1000\n1000: 86A55DE728       2 |         .float  -41.341702110\n                       3 |         end\n\n```", "```\n\t\tinclude\t\"Coco/basic.i\"\n\t\tinclude\t\"Coco/dp.i\"\n\nCB.FSUBx\tequ\t$B9B9\t; FP0 = X   - FP0\t; addresses for\nCB.FSUB\t\tequ\t$B9BC\t; FP0 = FP1 - FP0\t; these routines \nCB.FADDx\tequ\t$B9C2\t; FP0 = X   + FP0\t; from\nCB.FADD\t\tequ\t$B9C5\t; FP0 = FP1 + FP1\t; Color BASIC Unravelled II\nCB.FMULx\tequ\t$BACA\t; FP0 = X   * FP0\nCB.FMUL\t\tequ\t$BAD0\t; FP0 = FP0 * FP1\nCB.FDIVx\tequ\t$BB8F\t; FP0 = X   / FP0\nCB.FDIV\t\tequ\t$BB91\t; FP0 = FP1 / FP0\n\nCB.FP0fx\tequ\t$BC14\t; FP0 = X\nCB.xfFP0\tequ\t$BC35\t; X   = FP0\nCB.FP1f0\tequ\t$BC5F\t; FP1 = FP0\nCB.FP0txt\tequ\t$BDD9\t; result in X, NUL terminated\n\n\t\torg\t$4000\nstart\t\tldx\t#tau\t\t; point to 2*pi\n\t\tjsr\tCB.FP0fx\t; copy to FP0\n\t\tldx\t#tau\t\t; 2PI * 2PI\n\t\tjsr\tCB.FMULx\n\t\tldx\t#tau\t\t; 2PI * 2PI * 2PI\n\t\tjsr\tCB.FMULx\n\t\tjsr\tCB.FP1f0\t; copy fp acc to FP1\n\t\tldx\t#fact3\t\t; point to 3!\n\t\tjsr\tCB.FP0fx\t; copy to FP0\n\t\tjsr\tCB.FDIV\t\t; FP0 = FP1 / FP0\n\t\tneg\tCB.fp0sgn\t; negate result by flippping FP0 sign\n\t\tjsr\tCB.FP0txt\t; generate string\n\t\tbsr\tdisplay\t\t; display on screen\n\n\t\tldx\t#answer\t\t; point to precalculated result\n\t\tjsr\tCB.FP0fx\t; copy to FP0\n\t\tjsr\tCB.FP0txt\t; generate string\n\t\tbsr\tdisplay\t\t; display\n\n\t\tldx\t#tau\t\t; now display 2*pi\n\t\tjsr\tCB.FP0fx\t; just to see how close\n\t\tjsr\tCB.FP0txt\t; it is.\n\t\tbsr\tdisplay\n\t\trts\n\ndisplay.char\tjsr\t[CHROUT]\t; display character\ndisplay\t\tlda\t,x+\t\t; get character\n\t\tbne\t.char\t\t; if not NUL byte, display\n\t\tlda\t#13\t\t; go to next line\n\t\tjsr\t[CHROUT]\n\t\trts\n\ntau\t\t.float\t6.283185307\nfact3\t\t.float\t3!\nanswer\t\t.float\t-(6.283185307 ** 3 / 3!)\n\n\t\tend\tstart\n\n```", "```\n-41.3417023\n-41.3417023\n 6.23418531\n\n```"]