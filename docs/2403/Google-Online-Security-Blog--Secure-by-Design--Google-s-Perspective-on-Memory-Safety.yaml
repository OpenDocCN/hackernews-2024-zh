- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:44:39'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Google Online Security Blog: Secure by Design: Google’s Perspective on Memory
    Safety'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://security.googleblog.com/2024/03/secure-by-design-googles-perspective-on.html](https://security.googleblog.com/2024/03/secure-by-design-googles-perspective-on.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Google’s Project Zero [reports](https://googleprojectzero.blogspot.com/2022/04/the-more-you-know-more-you-know-you.html)
    that [memory safety vulnerabilities](https://www.memorysafety.org/docs/memory-safety/)—security
    defects caused by subtle coding errors related to how a program accesses memory—have
    been "the standard for attacking software for the last few decades and it’s still
    how attackers are having success". Their analysis shows two thirds of 0-day exploits
    detected in the wild used memory corruption vulnerabilities. Despite substantial
    investments to improve memory-unsafe languages, those vulnerabilities continue
    to top the [most commonly exploited vulnerability classes](https://cwe.mitre.org/top25/archive/2023/2023_kev_list.html).
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we share our perspective on memory safety in a [comprehensive
    whitepaper](https://research.google/pubs/pub53121/). This paper delves into the
    data, challenges of tackling memory unsafety, and discusses possible approaches
    for achieving memory safety and their tradeoffs. We'll also highlight our commitments
    towards implementing several of the solutions outlined in the whitepaper, most
    recently with a [$1,000,000 grant to the Rust Foundation](https://security.googleblog.com/2024/02/improving-interoperability-between-rust-and-c.html),
    thereby advancing the development of a robust memory-safe ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Why we’re publishing this now
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 2022 marked the 50th anniversary of memory safety vulnerabilities. Since then,
    memory safety risks have grown more obvious. Like others', Google's internal vulnerability
    data and research show that memory safety bugs are widespread and one of the leading
    causes of vulnerabilities in memory-unsafe codebases. Those vulnerabilities endanger
    end users, our industry, and the broader society. We're encouraged to see governments
    also taking this issue seriously, as with the U.S. Office of the National Cyber
    Director publication of a [paper](https://www.whitehouse.gov/wp-content/uploads/2024/02/Final-ONCD-Technical-Report.pdf)
    on the topic last week.
  prefs: []
  type: TYPE_NORMAL
- en: By sharing our insights and experiences, we hope to inspire the broader community
    and industry to adopt memory-safe practices and technologies, ultimately making
    technology safer.
  prefs: []
  type: TYPE_NORMAL
- en: Our perspective
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At Google, we have decades of experience addressing, at scale, large classes
    of vulnerabilities that were once similarly prevalent as memory safety issues.
    Our approach, which we call “[Safe Coding](https://research.google/pubs/pub53116/)”,
    treats vulnerability-prone coding constructs  themselves as hazards (i.e., independently
    of, and in addition to, the vulnerability they might cause), and is centered around
    ensuring developers do not encounter such hazards during regular coding practice.
  prefs: []
  type: TYPE_NORMAL
- en: Based on this experience, we expect that high assurance memory safety can only
    be achieved via a [Secure-by-Design approach](https://blog.google/technology/safety-security/tackling-cybersecurity-vulnerabilities-through-secure-by-design/)
    centered around comprehensive adoption of languages with rigorous memory safety
    guarantees. As a consequence, we are considering a gradual transition towards
    memory-safe languages like Java, Go, and Rust.
  prefs: []
  type: TYPE_NORMAL
- en: 'Over the past decades, in addition to large Java and Go memory-safe codebases,
    Google has developed and accumulated hundreds of millions of lines of C++ code
    that is in active use and under active, ongoing development. This very large existing
    codebase results in significant challenges for a transition to memory safety:'
  prefs: []
  type: TYPE_NORMAL
- en: We see no realistic path for an evolution of C++ into a language with rigorous
    memory safety guarantees that include temporal safety.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A large-scale rewrite of all existing C++ code into a different, memory-safe
    language appears very difficult and will likely remain impractical.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We consider it important to complement a transition to memory safe languages
    for new code and particularly at-risk components with safety improvements for
    existing C++ code, to the extent practicable. We believe that substantial improvements
    can be achieved through an incremental transition to a partially-memory-safe C++
    language subset, augmented with hardware security features when available. For
    instance, see [our work improving spatial safety in GCP's networking stack](https://bughunters.google.com/blog/6368559657254912/llvm-s-rfc-c-buffer-hardening-at-google).
  prefs: []
  type: TYPE_NORMAL
- en: Our investments in memory-safe languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are actively investing in many of the solutions outlined in our whitepaper
    and in our [response](https://www.regulations.gov/comment/ONCD-2023-0002-0074)
    to the [US Federal Government’s RFI on Open Source Software Security](https://www.regulations.gov/document/ONCD-2023-0002-0001).
  prefs: []
  type: TYPE_NORMAL
- en: Android has written several components in Rust over the last few years, leading
    to [compelling security improvements](https://security.googleblog.com/2022/12/memory-safe-languages-in-android-13.html).
    In Android’s Ultra-wideband (UWB) module, this has improved the security of the
    module while also reducing the memory usage and inter-procedural calls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chrome has [started shipping some features in Rust](https://groups.google.com/a/chromium.org/g/chromium-dev/c/UhwVDk4HZFA/m/UAA2D96QBAAJ);
    in one case, Chrome was able to move its QR code generator out of a sandbox by
    adopting a new memory-safe library written in Rust, leading to both better security
    and better performance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google recently announced a [$1,000,000 grant to the Rust foundation](https://security.googleblog.com/2024/02/improving-interoperability-between-rust-and-c.html)
    to enhance interoperability with C++ code. This will facilitate incremental adoption
    of Rust in existing memory-unsafe code bases, which will be key to enabling even
    more new development to occur in a memory-safe language. Relatedly, we are also
    working on addressing [cross-language attacks](https://bughunters.google.com/blog/4805571163848704/llvm-cfi-and-cross-language-llvm-cfi-support-for-rust)
    that can occur when mixing Rust and C++ in the same binary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We know that memory safe languages will not address every security bug, but
    just as our efforts to [eliminate XSS attacks through tooling showed](https://bughunters.google.com/blog/5896512897417216/a-recipe-for-scaling-security),
    removing large classes of exploits both directly benefits consumers of software
    and allows us to move our focus to addressing further classes of security vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: To access the full whitepaper and learn more about Google's perspective on memory
    safety, visit [https://research.google/pubs/secure-by-design-googles-perspective-on-memory-safety/](https://research.google/pubs/secure-by-design-googles-perspective-on-memory-safety/)
  prefs: []
  type: TYPE_NORMAL
