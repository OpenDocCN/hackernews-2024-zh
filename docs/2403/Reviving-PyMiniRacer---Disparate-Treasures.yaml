- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:36:07'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Reviving PyMiniRacer - Disparate Treasures
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://bpcreech.com/post/mini-racer/](https://bpcreech.com/post/mini-racer/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In [this last blog post](https://bpcreech.com/post/python-nodejs-eval/), I created
    a [helper](https://pypi.org/project/nodejs-eval/) to call JavaScript from Python
    using a NodeJS sidecar process. In the post I [commented](https://bpcreech.com/post/python-nodejs-eval/#alternatives-considered)
    that *in-* process JS evaluation might be nicer. The old [Sqreen `PyMiniRacer`
    project](https://github.com/sqreen/PyMiniRacer) had only *recently* fallen into
    disrepair. Can we revive it?
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: '**TL;DR: Yes!** It just took a couple weeks of elbow grease, and new ownership
    (it me). I now own the *two* best ways to run JavaScript from a Python program:
    [`PyMiniRacer`](https://github.com/bpcreech/PyMiniRacer) and [`nodejs-eval`](https://github.com/bpcreech/nodejs-eval).'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-8
  prefs: []
  type: TYPE_PRE
- en: '*Other new features can be found [on the relnotes page](https://bpcreech.com/PyMiniRacer/history/),
    where v0.7.0 is the first new version since 2021.*'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: A lineage[](#a-lineage)
  id: totrans-split-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**[`therubyracer`](https://github.com/rubyjs/therubyracer) (2009-2018)** [Charles
    Lowell](https://github.com/cowboyd) of [Frontside Software](https://frontside.com/)
    created [The Ruby Racer](https://github.com/rubyjs/therubyracer) to embed [V8](https://v8.dev/)
    (the JavaScript engine used by Chrome, NodeJS, etc) into [Ruby](https://www.ruby-lang.org/)
    for direct JS execution from Ruby programs.'
  id: totrans-split-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unfortunately, the rich integration between Ruby Racer and V8 became a pain
    point for Ruby Racer, because upgrading V8 often meant revamping Ruby Racer to
    fit interface changes. So this project was eventually archived, and replaced with&mldr;
  id: totrans-split-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[`mini_racer`](https://github.com/rubyjs/mini_racer) (2016-)** [Sam Saffron](https://github.com/SamSaffron)
    and others created [`mini_racer`](https://github.com/rubyjs/mini_racer), a new
    Ruby / V8 integration, stripped down relative to Ruby Racer. This version is still
    maintained.'
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**[`sqreen/PyMiniRacer`](https://github.com/sqreen/PyMiniRacer) (2016-2021)**
    [Sqreen](https://github.com/sqreen), a web app security startup, created [`PyMiniRacer`](https://github.com/sqreen/PyMiniRacer),
    a Python module modeled after Ruby’s `mini_racer`. This followed the same model
    of minimizing the interface with V8, and also used a Python `ctypes` integration
    (as opposed to a Python extension module) which furthermore minimized the interface
    with *Python*, resulting in a JS/Python integration with relatively little support
    burden.'
  id: totrans-split-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**[`bpcreech/PyMiniRacer`](https://github.com/bpcreech/PyMiniRacer) (2024-)**
    This is what you’re reading about now. :)'
  id: totrans-split-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After discussion with the Sqreen (now DataDog) folks, we decided to host my
    revival of their `PyMiniRacer` project as a fork, which lives here:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: General updates[](#general-updates)
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Other than upgrading V8—which has its own section below—I took the opportunity
    to dust off various parts of this project.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: Python ecosystem updates[](#python-ecosystem-updates)
  id: totrans-split-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In particular, lots of things have happened in the Python world!
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: Python versions (drop Python 2, add up to 3.12)[](#python-versions-drop-python-2-add-up-to-312)
  id: totrans-split-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, we can drop Python 2 which was [globally EOL’d in 2020](https://www.python.org/doc/sunset-python-2/)
    (after a deprecation plan over a decade long!). Because the world is big, folks
    are still using Python 2 out there, but we don’t need to maintain an *up-to-date*
    V8 integration for them.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, as of this writing, Python is up to 3.12, which for `PyMiniRacer`
    added some minor breakage here and there. For example, some change to the Python
    `memoryview` system [now requires](https://github.com/bpcreech/PyMiniRacer/blob/d1b6f4d83306bf7b94a7827d45476017b6ec5382/src/py_mini_racer/py_mini_racer.py#L508)
    [explicit `memoryview` casting](https://github.com/python/cpython/issues/60148).
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: I also added support for the fancy new Python [`importlib.resources`](https://docs.python.org/3/library/importlib.resources.html)
    specification which lets Python directly run modules *and load their dependencies,
    e.g., `PyMiniRacer`’s DLL file* out of unusual non-filesystem places (such as
    from within `zip` files). This system was added in Python 3.7 and revamped in
    Python 3.9; `PyMiniRacer` now supports both incantations of loading-data-files-from-the-package.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: Packaging with Hatch[](#packaging-with-hatch)
  id: totrans-split-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`PyMiniRacer` originally built binary distributions using `setuptools`, and
    managed its various bits of automation using a hand-written `Makefile`. Python
    now has a standardized pluggable packaging system for building binary distributions,
    and [Hatch](https://github.com/pypa/hatch) is the most popular implementation
    of it. [*“Hatch is trying to be the Cargo or Go CLI equivalent for Python”*](https://github.com/pypa/hatch/discussions/1117#discussioncomment-7827378)
    per [its author](https://github.com/ofek). By using Hatch (and accepting its various
    opinions) we can drop a *lot* of developer tooling configuration from `PyMiniRacer`.'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: Hatch includes a bundled an opinionated linter and code formatter in [Ruff](https://github.com/astral-sh/ruff),
    which lets us drop [`flake8`](https://flake8.pycqa.org/en/latest/) and [`isort`](https://pycqa.github.io/isort/)
    and their config files as development dependencies. The only default setting I
    changed was the line length, from 120 to Black’s default of 88\. I thought this
    pointless debate was [finally settled by Black](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#line-length)
    when it won the formatting war, but for some reason Hatch [overrides this setting
    to 120](https://github.com/pypa/hatch/discussions/1117), so I put it back where
    Black (and Ruff) default to.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: Hatch also includes built-in support for Python version matrix testing. It works
    super well (modulo, not on [Alpine](https://www.alpinelinux.org/) for [reasons](https://github.com/indygreg/python-build-standalone/issues/86))
    and lets us drop [`tox`](https://tox.wiki/en/4.14.1/) as a development dependency.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: '`pytest` instead of `unittest`[](#pytest-instead-of-unittest)'
  id: totrans-split-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is more of a no-brainer these days. `unittest` has been built into Python
    since forever, but these days everyone (in the OSS community anyway) seems to
    be converging on `pytest`. So I converted all the tests to `pytest`, which makes
    for slightly simpler-looking tests and prettier console output, yay.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: Docs![](#docs)
  id: totrans-split-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Inspired by [this post](https://matklad.github.io//2021/02/06/ARCHITECTURE.md.html),
    I figured we should have an `ARCHITECTURE.md`, so [I wrote one](https://github.com/bpcreech/PyMiniRacer/blob/main/ARCHITECTURE.md)
    ([*or see it on the `mkdocs` site*](https://bpcreech.com/PyMiniRacer/architecture/)).
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: I also sprinkled in a ton of comments. `PyMiniRacer`’s V8 build (see below)
    is full of workarounds, written as config tweaks, patches, and little extra steps.
    These workarounds do *not* help the forwards compatibility story, because each
    little tweak to the build process is a potential source of future breakage when
    the upstream V8 build process changes. Now, we at least have a paper trail of
    where those tweaks came from!
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: Finally, and most dramatically from a cosmetic perspective, I migrated the `PyMiniRacer`
    docs from [Sphinx](https://www.sphinx-doc.org/en/master/) to [Material for MkDocs](https://squidfunk.github.io/mkdocs-material/)
    and created a docs build pipeline (AFAICT there wasn’t one!). Sphinx has been
    around and working forever, but the current ecosystem mindshare seems to be pouring
    into `mkdocs-material` lately.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: I am a little worried about maintainability since `mkdocs-material` is a complicated
    and load-bearing *plugin* for the `mkdocs`, and itself works best only when combined
    with [*other* plugins from `mkdocs-material`’s *own* plugin system](https://squidfunk.github.io/mkdocs-material/setup/extensions/).
    it’s a setup ripe for [this situation](https://xkcd.com/2347/). But, I went with
    peer pressure, and the new docs look great with very little configuration, because
    `mkdocs-material` is indeed fantastic. The new docs live [here](https://bpcreech.com/PyMiniRacer).
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: Actually building V8[](#actually-building-v8)
  id: totrans-split-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Okay, the main work here is updating V8\. The last Sqreen version of `PyMiniRacer`,
    from 2021, used V8 8.9, and no longer builds. V8 is up to 12.2 today.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: General challenges in building V8[](#general-challenges-in-building-v8)
  id: totrans-split-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no official binary distribution of the V8 library as a standalone unit.
    The only way to use V8 is to build it yourself. *Unless, perhaps, you use the
    whole NodeJS binary, which brings us back to [my last blog post](https://bpcreech.com/post/python-nodejs-eval/)—maybe,
    after all, the best way to use V8 is via a server running inside NodeJS?*
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: 'But building V8 is hard! Fun challenges in building V8:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: '**V8 is enormous and building it is slow:** V8 contains *or dynamically downloads*
    6.6 GB of *source*! (Okay, not all “source”, actually: this includes some vendored
    copies of operating system roots, like `/usr` from flavors of Debian.) There are
    about 2.4k build steps, which include building tons of code generated by [the
    Torque compiler](https://v8.dev/docs/torque). It takes over an hour to build from
    scratch on a [free GitHub Actions runner](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners)
    (currently, a 4-CPU machine for Linux, etc). To build for Linux `aarch64`, GitHub
    doesn’t provide any free hosted runners, so we run via [emulation](https://github.com/uraimo/run-on-arch-action),
    and it takes *several days*. This far exceeds [the maximum 6 hours provided by
    GitHub Actions](https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits),
    meaning builds fail due to the time limit. We can work around *that* limitation
    by using [`sccache`](https://github.com/mozilla/sccache) to cache and catch up
    on builds; after enough retries our GitHub Actions builds *do* eventually succeed.
    (And hopefully, one day, GitHub will provide free `aarch64` Linux runners!)'
  id: totrans-split-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**V8 wants to set up its own build ecosystem:** To [build V8](https://v8.dev/docs/build),
    you first [download another set of utilities](https://v8.dev/docs/source-code)
    called [`depot_tools`](https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up).
    `depot_tools` includes its very own binaries built for some but not all our target
    platforms, for things like Python, [Goma](https://chromium.googlesource.com/infra/goma/client/)
    (a build cache we’re not using), [Ninja](https://ninja-build.org/) (a build system
    we *do* use), [GN](https://github.com/o-lim/generate-ninja) (a meta-build system
    we also use), etc. The `depot_tools` `fetch` tool acts as a recursive dependency
    module grabber (like Git submodules, but fancy). Once we have all the source,
    V8 uses a series of Python scripts to wrap GN, which in turn wraps Ninja.'
  id: totrans-split-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**That build ecosystem, and the build in general, doesn’t actually work *on*
    Alpine or Linux-on-Arm:** For `PyMiniRacer` we want to target at least `{ Windows,
    Mac, Linux [glibc], Linux [musl] } × { x86_64, aarch64 }` (`aarch64` [by popular
    demand](https://github.com/sqreen/PyMiniRacer/issues/154)). V8 doesn’t support
    building *on* Linux-on-arm64, although it does support *cross-compiling for* it.
    V8 doesn’t support `musl` (Alpine’s `libc`) in either on-host building *or* cross-compiling.
    So we need to do various fun config tweaks to make it actually work.'
  id: totrans-split-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**V8 and the build system change all the time:** V8 is under very heavy development
    at Google, for a variety of products (Chromium of course, but also ChromeOS, etc).
    The available and default config options change over time, meaning any intricate
    build setup we do in `PyMiniRacer` is likely to break in with newer V8 verions.
    So we want to *minimize* the amount of build configuration we do in `PyMiniRacer`,
    to future-proof it as best we can.'
  id: totrans-split-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**V8 needs a bleeding-edge LLVM (particularly, `clang`) and wants its own `libstdc++`:**
    V8 uses brand new features of `clang`, including an ML-driven optimization model.
    It comes with a build of the llvm toolchain, but only for supported platforms
    (thus excluding Alpine, and excluding building *on* Linux `aarch64`). We work
    around this by installing the latest LLVM from [the LLVM project](https://llvm.org/)
    where the binaries vendored into V8 itself don’t work. But even this version isn’t
    new enough for V8! We *still* have to tweak the build config to make it build
    even with the latest *stable* LLVM.'
  id: totrans-split-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Meanwhile, we impose another challenge by sticking to the free GitHub Actions
    runners: unfortunately, GitHub Actions has no native `aarch64` hosted runners,
    and no native Alpine runners. We work around this using Umberto Raimondi’s fantastic
    [`run-on-arch-action`](https://github.com/uraimo/run-on-arch-action). This GitHub
    Action plug-in helps us build Docker containers for Linux distributions and architectures,
    and then build `PyMiniRacer` there.'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: 'Aside from [all the V8 updates from v8.9 to v12.2](https://chromium.googlesource.com/v8/v8/+log/branch-heads/8.9..branch-heads/12.2/?n=1000),
    I plumbed in the following which had been disabled in prior `PyMiniRacer` builds:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: Both of these require pulling generated data files into the Python package,
    alongside the compiled DLL.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: Potential future work in simplifying the V8 build[](#potential-future-work-in-simplifying-the-v8-build)
  id: totrans-split-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Ruby [`mini_racer` project](https://github.com/rubyjs/mini_racer) mentioned
    above actually split the V8 build out into a separate project, [`libv8-node`](https://github.com/rubyjs/libv8-node):
    “*A project for distributing the v8 runtime libraries and headers in both source
    and binary form, packaged as a language-independent zip and as a Ruby gem.*”.
    This project takes a different tack on the problem by reusing NodeJS’s opinionated
    vendored copy and build of V8 instead of trying to build V8 from [Google’s directions](https://v8.dev/docs/build).
    We *might* be able to simplify `PyMiniRacer` by rebasing it upon the `libv8-node`
    build of V8\. We’d need to ensure `libv8-node` is up-to-date and stable (it’s
    not totally clear to me that it is) and, because we’re dropping the V8 build entirely,
    move the compilation of [`PyMiniRacer`’s custom C++ code](https://github.com/bpcreech/PyMiniRacer/tree/main/src/v8_py_frontend)
    out of `GN`+`ninja` and into another to-be-determined build system.'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, it would be nice if V8 lived within a common C/C++ package system.
    The winning multi-platform C/C++ package system today seems to be [https://conan.io](https://conan.io).
    Making V8 work with Conan (well enough for official upload to [Conan Center](https://conan.io/center))
    would be tough because, along with [all the difficulties cited above](#general-challenges-in-building-v8),
    V8 loves to download its own dependencies in violation of Conan’s common-sense
    One-Definition Rule (ODR).
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: Other future work in `PyMiniRacer`[](#other-future-work-in-pyminiracer)
  id: totrans-split-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Future work may include:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: Updates to new V8 releases which we can assume will appear unabated.
  id: totrans-split-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for [Python `asyncio`](https://docs.python.org/3/library/asyncio.html).
  id: totrans-split-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other stuff from [the old GitHub issues](https://github.com/sqreen/PyMiniRacer/issues)
    list.
  id: totrans-split-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard library stuff. `PyMiniRacer` has no `console.log` (and no `window`
    object for `console` to live on), no `setTimeout`, etc. Providing such functions
    would be handy, but also if we’re not careful may act as a breach of the security
    sandbox provided by `PyMiniRacer`, will move away from the minimal-interface rule
    we’re going for, and may trend toward “just being NodeJS” with its [rich standard
    library](https://nodejs.org/docs/latest-v12.x/api/). At this point, we’d be better
    off by embedding NodeJS, or just [running it as a sidecar](https://pypi.org/project/nodejs-eval/).
  id: totrans-split-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you’re reading this and want to contribute, go for it! See [the contribution
    guide](https://bpcreech.com/PyMiniRacer/contributing/).
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
