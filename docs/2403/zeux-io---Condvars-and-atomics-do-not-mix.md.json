["```\nstd::unique_lock<std::mutex> lock(m_mutex);\n\nwhile (true) {\n    m_has_work.wait(lock, [this] {\n        return m_queue.size() > 0;\n    });\n\n    // Get the job from the queue and execute it\n} \n```", "```\nm_has_work.wait(lock, [this] {\n    return m_kill_flag || m_queue.size() > 0;\n});\n\nif (m_kill_flag) break; \n```", "```\n// Notify all workers that they need to die right now.\nm_kill_flag = true;\nm_has_work.notify_all();\n\n// Wait for all workers to die.\nfor (size_t i = 0; i < m_threads.size(); i++)\n    m_threads[i].join(); \n```", "```\nWARNING: ThreadSanitizer: data race (pid=88143)\n  Read of size 1 at 0x00016d231114 by thread T5 (mutexes: write M32):\n...\n  Previous write of size 1 at 0x00016d231114 by main thread: \n```", "```\nwhile (!pred()) cvar.wait(); \n```", "```\n// Notify all workers that they need to die right now.\n{\n    std::unique_lock<std::mutex> lock(m_mutex);\n    m_kill_flag = true;\n    m_has_work.notify_all();\n} \n```"]