- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:56:08'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:56:08'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The Mythical Non-Roboticist - by Benjie Holson
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 神话中的非机器人专家 - 作者：本杰·霍尔森
- en: 来源：[https://generalrobots.substack.com/p/the-mythical-non-roboticist](https://generalrobots.substack.com/p/the-mythical-non-roboticist)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://generalrobots.substack.com/p/the-mythical-non-roboticist](https://generalrobots.substack.com/p/the-mythical-non-roboticist)
- en: I worked on this idea for months before I decided it was a mistake. The second
    time I heard someone mention it, I thought, “That's strange, these two groups
    had the same idea. Maybe I should tell them it didn’t work for us.” The third
    and fourth time I rolled my eyes and ignored it. The fifth time I heard about
    a group struggling with this mistake I decided it was worth a blog post all on
    its own. I call this idea “The Mythical Non-Roboticist”.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我在决定这是一个错误之前，花了几个月的时间思考这个想法。第二次听到有人提到它时，我想：“这很奇怪，这两组人竟然有相同的想法。也许我应该告诉他们，这对我们来说行不通。”第三次和第四次我只是翻了个白眼，然后忽略了它。第五次听说一个团队因为这个错误而苦苦挣扎，我决定写一篇博客专门讨论这个问题。我称这个想法为“神话中的非机器人专家”。
- en: Unicorn, Non-Roboticist, Satyr
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 独角兽，非机器人专家，半人半兽
- en: 'The idea goes something like this: Programming robots is hard. And there are
    some people with really arcane skills and PhDs who are really expensive and seem
    to be required for some reason. Wouldn’t it be nice if we could do robotics without
    them? What if everyone could do robotics? That would be great, right? We should
    make a software framework so that non-roboticists can program robots.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法大致是这样的：编程机器人很难。有些人拥有非常奥妙的技能和博士学位，他们非常昂贵，似乎有必要存在。如果我们可以不依赖他们来做机器人，那不是挺好的吗？如果每个人都能做机器人，那岂不是太棒了？我们应该开发一个软件框架，让非机器人专家也能编程机器人。
- en: 'This idea is so close to a correct idea that it''s hard to tell why it doesn’t
    work out. On the surface, it''s not *wrong*: all else being equal, it would be
    good if programming robots was more accessible. The problem is that we don’t have
    a good recipe for making working robots. So we don’t know how to make that recipe
    easier to follow. In order to make things simple, people end up removing things
    that folks might need, because no one knows for sure what''s absolutely required.
    It''s like saying you want to invent an invisibility cloak and want to be able
    to make it from materials you can buy from Home Depot. Sure, that would be nice,
    but if you invented an invisibility cloak that required some mercury and neodymium
    to manufacture would you toss the recipe?'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法离正确想法如此之近，以至于很难说它为什么不起作用。表面上看，并不是*错误*：其他条件相同的情况下，如果编程机器人更容易是件好事。问题在于，我们没有制定一个好的配方来制造可工作的机器人。所以我们不知道如何使这个配方更容易遵循。为了简化事情，人们最终会删除可能需要的东西，因为没有人确切知道什么是绝对必要的。这就像说你想发明一个隐形斗篷，并希望能够用在家得宝买得到的材料制造它。当然，那会很好，但如果你发明了一个需要一些汞和钕的隐形斗篷来制造，你会扔掉这个配方吗？
- en: I actually only use free-trade, organic, non-GMO invisibility cloaks
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我实际上只使用自由贸易、有机、非转基因的隐形斗篷
- en: 'In robotics, this mistake is based on a very true and very real observation:
    programming robots ***is*** super hard. Famously hard. It would be super-great
    if programming robots was easier. The issue is this: programming robots has two
    different kinds of hard parts.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器人领域，这个错误基于一个非常真实且非常现实的观察：**编程机器人**确实非常难。声名远扬的难。如果编程机器人更容易就太好了。问题在于：编程机器人有两种不同类型的难点。
- en: 'The first kind of hard part is that robots deal with the real-world, imperfectly
    sensed and imperfectly actuated. Global mutable state is bad programming style
    because it''s really hard to deal with, but to robot software the entire physical
    world is global mutable state, and you only get to unreliably observe it and hope
    your actions approximate what you wanted to achieve. Getting robotics to work
    at all is often at the very limit of what a person can reason about, and requires
    the flexibility to employ whatever heuristic might work for your special problem.
    This is the **intrinsic** complexity of the problem: robots live in complex worlds,
    and for every working solution there are millions of solutions that don’t work,
    and finding the right one is hard, and often very dependent on the task, robot,
    sensors and environment.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种困难部分是机器人处理实际世界，感知不完全且动作不完全。全局可变状态是糟糕的编程风格，因为它真的很难处理，但对于机器人软件来说，整个物理世界就是全局可变状态，你只能不可靠地观察它，并希望你的行动大致符合你想要实现的目标。让机器人工作起来本身就是一个极限问题，需要灵活性来使用可能解决特定问题的任何启发式方法。这是问题的**固有**复杂性：机器人生活在复杂的世界中，对于每一个有效的解决方案，有数百万种不起作用的解决方案，找到正确的解决方案很难，并且往往非常依赖于任务、机器人、传感器和环境。
- en: Folks look at that challenge, see that it is super hard, and decide that, sure,
    maybe some fancy roboticist could solve it in one particular scenario, but what
    about “normal” people? “We should make this possible for non-roboticists” they
    say. I call these users “Mythical Non-Roboticists” because once they are programming
    a robot, I feel they *become* roboticists. Isn’t anyone programming a robot for
    a purpose a roboticist? Stop gatekeeping, people.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 人们面对这一挑战，看到它非常困难，便决定说，可能一些高级的机器人学家可以在特定的场景中解决它，但普通人呢？“我们应该让非机器人学家也能做到这一点”，他们说。我称这些用户为“神话中的非机器人学家”，因为一旦他们在编程一个机器人，我觉得他们*成为*了机器人学家。任何人编程一个机器人都是出于某种目的的机器人学家吗？别再设置门槛了，人们。
- en: “Why are those people programming robots?” “Not sure, but I’m positive they
    aren’t roboticists. I checked”
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: “为什么这些人在编程机器人？” “不确定，但我确定他们不是机器人学家。我查过了”
- en: I call also them ‘Mythical’ because usually the “non-roboticist” implied is
    a vague, amorphous group. Don’t design for amorphous groups. If you can’t name
    three real people (that you have talked to), that your API is for, then you are
    designing for an amorphous group and only amorphous people will like your API.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我也称他们为‘神秘人物’，因为通常意味着“非机器人学家”的群体是一个模糊、无定形的群体。不要为无定形的群体设计。如果你不能列出三个你已经与之交谈过的真实人物，而你的API是为他们设计的，那么你就是在为一个无定形的群体设计，只有无定形的人会喜欢你的API。
- en: “ActivateBehaviorObjectFactory()? Oooh, I like it”
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: “ActivateBehaviorObjectFactory()？哦，我喜欢它”
- en: And with this hazy group of users in mind (and seeing how difficult everything
    is) folks think, “Surely we could make this easier for everyone else by papering
    over these things with simple APIs?”
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 而看着这些朦胧的用户群体（以及看到一切有多么困难），人们会想：“我们是否可以通过简单的API来简化所有其他人的工作呢？”
- en: No. No you can’t. Stop it.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不行。不行的。停止吧。
- en: You can’t paper over intrinsic complexity with simple APIs because **if your
    APIs are simple they can’t cover the complexity of the problem**. You will inevitably
    end up with a beautiful looking API, with calls like “grasp_object” and “approach_person”
    which demo nicely in a hackathon kickoff but last about 15 minutes of someone
    actually trying to get some work done. It will turn out that, for their particular
    application, “grasp_object()” makes 3-4 wrong assumptions about “grasp” ***and***
    “object” and doesn’t work for them at all.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能用简单的API来掩盖固有的复杂性，因为**如果你的API很简单，它们无法涵盖问题的复杂性**。最终你会得到一个看起来很漂亮的API，像“grasp_object”和“approach_person”这样的调用在一个黑客马拉松开始时展示得很好，但实际上只能支撑15分钟左右的工作。结果会是，对于特定的应用程序，像“grasp_object()”可能对“grasp”和“object”作出了3-4个错误的假设，根本不起作用。
- en: 'This is made worse by the pervasive assumption that these people are less savvy
    (read: less intelligent) than the creators of this magical framework. That feeling
    of superiority will cause the designers to cling desperately to their beautiful,
    simple ‘grasp_object()’s and resist adding the knobs and arguments needed to cover
    more use cases and allow the users to customize what they get.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况更糟的是，普遍的假设是这些人比这个神奇框架的创建者更不精通（即：更不聪明）。这种优越感会导致设计者们拼命坚持他们美丽简单的‘grasp_object()’，并抵制添加那些需要覆盖更多用例和允许用户自定义获取内容的旋钮和参数。
- en: “Should let folks control how fast the robot moves?” “I don’t think so… Maybe
    we give them “slow” and “fast”. Anything else would be too confusing for a non-roboticist"
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: “我们应该让人们控制机器人的移动速度吗？” “我觉得不应该…也许我们给他们‘慢’和‘快’就够了。其他任何选项对非机器人学家来说都太混乱了。”
- en: Ironically this foists a bunch of complexity on to the poor users of the API
    who have to come up with clever workarounds to get it to work at all.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 具有讽刺意味的是，这给API的用户带来了一大堆复杂性，他们不得不想出聪明的变通方法来使其工作。
- en: “So I got the arm to match the conveyor speed by monitoring the position and
    pre-empting the motion command, alternating ‘slow’ and ‘fast’ at 10Hz with a duty
    cycle depending on how we are tracking our target. The motion is pretty jerky
    but it works.”
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: “所以我通过监控位置并预先发出运动命令，以10Hz的速度交替‘慢’和‘快’来使机械臂与传送带速度匹配，具体的占空比取决于我们对目标的跟踪情况。运动非常颠簸，但却有效。”
- en: The sad, salty, bitter icing on this cake-of-frustration is that, even if done
    really well, the goal of this kind of framework would be to expand the group of
    people who can do the work. And to achieve that, it would sacrifice some performance
    you can only get by super-specializing your solution to your problem. If we lived
    in a world where expert roboticists could program robots that worked really well,
    but there was so much demand for robots that there just wasn’t enough time for
    those folks to do all the programming, this would be a great solution.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种挫折感的苦涩糖衣加上来的是，即使做得很好，这种框架的目标也是扩大能够做这项工作的人群。为了实现这一目标，它会牺牲一些只有通过超专业化你的解决方案才能获得的性能。如果我们生活在一个这样的世界里，专业的机器人学家可以编程使机器人运行得非常好，但需求如此之大以至于这些人没有足够的时间来做所有的编程，那么这将是一个很好的解决方案。
- en: “Man, *another* robotics startup going public? I wish I knew some roboticists.
    I’m just an expert in fintech, LLMs and e-commerce.”
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: “哎呀，*又*一家机器人初创公司要上市？我真希望我认识一些机器人学家。我只是一个金融科技、LLM和电子商务方面的专家。”
- en: The obvious truth is that (outside of really constrained environments like manufacturing
    cells) even the very best collection of real bone-fide, card-carrying roboticists
    working at the best of their ability struggle to get close to a level of performance
    that makes the robots commercially viable, even with long timelines and mountains
    of funding. We don’t have **any** headroom to sacrifice power and effectiveness
    for ease.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 显而易见的事实是，即使是最好的真正的、持有正式卡的机器人学家们，在最大努力下，也很难达到使机器人在商业上可行的性能水平，即使是在长时间线和资金堆积如山的情况下。我们没有**任何**余地来为了便利而牺牲功率和效果。
- en: So should we give up making it easier? Is robotic development available only
    to a small group of elites with fancy PhDs? No to both! I have worked with tons
    of undergrad interns who have been completely able to do robotics. I myself am
    mostly self-taught in robot programming. While there is a lot of intrinsic complexity
    in making robots work, I don’t think there is any more than, say, video game development.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们应该放弃使其更容易吗？机器人开发只开放给一小群拥有花哨博士学位的精英吗？两者都不是！我曾经与大量本科实习生一起工作，他们完全有能力做机器人技术。我自己在机器人编程方面大部分是自学的。虽然让机器人运行起来确实存在很多固有的复杂性，但我认为这与，比如，视频游戏开发一样多。
- en: “Yeah, you’ll never understand the challenges of reasoning in 3D space, worrying
    about latency all the time, and always being compute constrained.”
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: “是的，你永远无法理解在三维空间中推理的挑战，总是担心延迟，而且一直受到计算资源的限制。”
- en: In robotics, like in all things, experience helps, some things are teachable,
    and as you master many areas you can see things start to connect together. These
    skills are not magical or unique to robotics. We are not as special as we like
    to think we are.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器人技术中，就像在所有事物中一样，经验是有帮助的，有些东西是可以教授的，当你掌握了多个领域，你会看到事物开始连接在一起。这些技能并不神奇，也不是机器人特有的。我们并没有我们认为的那么特别。
- en: But what about making programming robots easier? Remember way back at the beginning
    of the post when I said that there were two different kinds of hard parts? One
    is the intrinsic complexity of the problem, and that one will be hard no matter
    what. But the second is the incidental complexity, or as I like to call it, the
    stupid bullshit complexity.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如何让编程机器人变得更容易呢？记得在文章开头我说过有两种不同的难点吗？一种是问题本身的固有复杂性，这个无论如何都很难。但第二种是偶然复杂性，或者我喜欢称之为愚蠢的破事复杂性。
- en: Robots are asynchronous, distributed, real-time systems with weird hardware.
    All of that will be hard to configure for stupid bullshit reasons. Those drivers
    need to work in the weird flavor of linux you want for hard real-time for your
    controls and getting that all set up will be hard for stupid bullshit reasons.
    You are abusing wifi so you can roam seamlessly without interruption but linux’s
    wifi will not want to do that. Your log files are huge and you have to upload
    them somewhere so they don’t fill up your robot. You’ll need to integrate with
    some cloud something or other and deal with its stupid bullshit.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人是异步的、分布式的、实时的系统，具有奇怪的硬件。由于愚蠢废话的原因，所有这些都将很难配置。那些驱动程序需要在你想要为控制设置硬实时的怪异Linux版本中工作。你正在滥用WiFi，以便可以在不中断的情况下无缝漫游，但Linux的WiFi将不会喜欢这样做。你的日志文件非常庞大，你必须将它们上传到某个地方以防止填满机器人。你需要与某种云服务集成，并处理其愚蠢废话。
- en: There is a ton of crap to deal with before you even get to complexity of dealing
    with 3D rotation, moving reference frames, time synchronization, messaging protocols.
    Those things have intrinsic complexity (you have to think about when something
    was observed and how to reason about it as other things have moved) and stupid
    bullshit complexity (There’s a weird bug because someone multiplied two transform
    matrices in the wrong order and now you’re getting an error message that deep
    in some protocol a quaternion is not normalized. WTF does that mean?)
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理3D旋转、移动参考系、时间同步、消息协议的复杂性之前，你就已经有了大量烦心事要处理。这些事情具有内在的复杂性（你必须考虑何时观察到某事物以及如何推理其他物体已移动的方式），以及愚蠢废话的复杂性（因为有人错误地按照错误的顺序相乘了两个转换矩阵，现在你得到了一个错误消息，深入某个协议，一个四元数没有被规范化。这是什么鬼？）
- en: One of the biggest challenges of robot programming is wading through the sea
    of stupid bullshit you need to wrangle in order to **start** working on your interesting
    and challenging robotics problem.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人编程的最大挑战之一是在开始解决有趣而具有挑战性的机器人问题之前，你需要穿越那些愚蠢废话的海洋。
- en: “I’m so excited. I’ve been working 12 hours everyday for 6 weeks, and I finally
    get to start doing robotics!”
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: “我太兴奋了。我已经连续工作12小时，每天6周了，终于可以开始做机器人了！”
- en: 'So a simple heuristic to make good APIs is:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以一个制作好API的简单启发法则是：
- en: Design your APIs for someone as smart as you, but less tolerant of stupid bullshit.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 设计你的API，要为那些像你一样聪明，但对愚蠢废话容忍度较低的人。
- en: That feels universal enough that I’m tempted to call it **Holson’s Law of Tolerable
    API Design**.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这种感觉足够普遍，以至于我忍不住想称之为**霍尔森可容忍API设计法则**。
- en: When you are using tools you’ve made, you know them well enough to know the
    rough edges and how to avoid them.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用你自己制作的工具时，你对它们了如指掌，知道如何避开它们的粗糙边缘。
- en: “Oh yeah, if you try to move the robot without calling enable() it segfaults.
    That's a safety feature… I guess? But also if you call it twice, that also segfaults.
    Just call it exactly once, ever.”
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: “哦对了，如果你尝试移动机器人而没有调用enable()，它会段错误。这是一种安全特性……我猜？但是如果你调用两次，那也会段错误。只调用一次就好。”
- en: 'But rough edges are things that have to be held in a programmer’s memory while
    they are using your system. If you insist on making a robotics framework, you
    should strive to make it as powerful as you can with the least amount of stupid
    bullshit. Eradicate incidental complexity everywhere you can. You want to make
    APIs that have maximum flexibility but good defaults. I like python’s default-argument
    syntax for this because it means you can write APIs that can be used like:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但粗糙的边缘是程序员在使用你的系统时必须记住的事情。如果你坚持要制作一个机器人框架，你应该尽力使它尽可能强大，同时减少愚蠢废话的量。尽可能消除所有的附带复杂性。你希望制作具有最大灵活性但带有良好默认值的API。我喜欢Python的默认参数语法，因为这意味着你可以编写像这样使用的API：
- en: It is possible to have easy things be simple *and* allow complex things. And
    please, please, please don’t make condescending APIs. Thanks!
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能将简单的事情设计得简单*且*允许复杂的事情。请，千万不要制作傲慢的API。谢谢！
- en: '[Share](https://generalrobots.substack.com/p/the-mythical-non-roboticist?utm_source=substack&utm_medium=email&utm_content=share&action=share)'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[分享](https://generalrobots.substack.com/p/the-mythical-non-roboticist?utm_source=substack&utm_medium=email&utm_content=share&action=share)'
- en: Thanks to Leila Takayama and Rodney Brooks for reading drafts of this.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢Leila Takayama和Rodney Brooks阅读本文初稿。
- en: 'About the Author: Benjie has been a roboticist since he first joined his high
    school robotics team, has programmed robots at startups and Google X’s Everyday
    Robots and is currently Director of Robotics at [Robust AI](https://www.robust.ai/),
    where he hopes to someday ship boring looking robots that solve real problems
    to customers who pay money for them.'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 关于作者：Benjie 自从加入高中机器人团队以来一直是一名机器人工程师，曾在初创公司和 Google X 的 Everyday Robots 编程机器人，并目前担任
    [Robust AI](https://www.robust.ai/) 的机器人主管，他希望有朝一日能够将解决实际问题的普通外观机器人交付给愿意付费的客户。
