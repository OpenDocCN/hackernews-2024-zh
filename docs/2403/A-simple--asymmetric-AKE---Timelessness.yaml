- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:41:26'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: A simple, asymmetric AKE · Timelessness
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://dannyvanheumen.nl/post/simple-asymmetric-ake/](https://dannyvanheumen.nl/post/simple-asymmetric-ake/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A simple, asymmetric AKE
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thu, Mar 28, 2024 ❝A simple, (as-of-yet unidentified) asymmetric Authenticated
    Key Exchange❞ <details><summary>Contents</summary></details>
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: In an experiment, I came across a need for a simple authenticated key exchange.
    It started as a stop-gap measure that is just a key exchange, no considerations
    for any kind of attacker. Just the minimal working solution with standard building
    blocks. From there, I extended the solution to protect against an attacker.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The use-case* is a user and a “service-provider” of some kind, in my case
    a device. The device responds to requests, performs computations in a separate
    computing environment and is, in this particular case, connected by USB port.
    There is sensitive information involved. The device, however, does not have storage
    capability. Computations are based on and initiated through the input of the user
    that interacts with the device. Initiative lies with the user; all risk lies with
    the judgement of the user whether or not the session is established correctly.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: '*From the device’s perspective*, it only needs to act on requests. We can assume
    that if the user is willing to interact with it, it must be safe to respond. Or
    from a different perspective: if the user is willing to send their security-sensitive
    information, then it must be okay to do perform the computation and respond. A
    confidential session that additionally guarantees the (only) other party is the
    one that initiated the session, is all that is needed. This other party supplies
    data, and receives results.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: '*From the user’s perspective*, there are additional concerns: the user must
    be ensured that the device is the actual device that it expects, i.e. there must
    be no mistaken identity, and they must be sure that communication is secure, if
    they decide to continue after establishing a secure session, i.e. performing the
    AKE to completion.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: 'The device: TKey'
  id: totrans-split-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Note: some of the feedback was a result of confusion on what kind of device
    is actually involved. Although I prefer to establish a solid abstract definition,
    this section should make the description and requirements more concrete.*'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: 'The specific device I have in mind for this protocol, is [tillitis TKey](https://tillitis.se/products/tkey/
    "TKey - Tillitis"). This devices contains an inaccessible device-secret (*UDS*)
    and loads any program provided. The device itself has a small firmware that is
    capable of initialization and receiving bytes that are the program-binary. When
    a program is loaded, a secret is derived that is specific to: device + program-binary
    + user-supplied secret, called the *CDI*. Then the firmware jumps to the entry-point
    of the program to start execution, and consequently hands over the control to
    the program.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: The *TKey* does not have storage capability. Programs have a few (hardware)
    features to work with, and *CDI* as a unique secret. The *CDI* value is the [digest
    of a hash-computation](https://dev.tillitis.se/intro/#measured-boot--secrets "Introduction
    - TKey Developer Handbook") of *UDS*, *program-binary* and *user-supplied secret*.
    Consequently, a program-binary must be byte-exact, which offers interesting opportunities
    such as that it protects users from malicious programs, which may attempt to steal
    this secret. Using the *CDI*, and a hash-function, for example *Blake2s* that
    is provided in firmware, a program can derive several secrets. The *identity*
    as discussed for this protocol, would be such a secret value. Therefore, the *identity*,
    with overwhelming likelihood, proves that the device, program-binary and user-supplied
    secret are the expected values.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: Any concerns w.r.t. device security, safety of secrets, potential vulnerabilities
    in programming, etc. are all valid criticism. However, the post itself is scoped
    to the protocol itself.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: The Design
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**requirements**:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: A two-party secure session is established between client and device,
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protected against MitM,
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ephemeral session-keys,
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device gets authenticated,
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client does not require authentication,
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No need for a session ID,
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**prerequisite: no (assumptions on) client’s identity**: The device starts
    off with only its own program state, needed for its own (internal) operation.
    Any data that device works with, is provided by client. This has the benefit that
    it cannot mistakenly expose sensitive data or mistake the identity of a user upon
    establishing a session. The device works with whatever data the initiator of the
    session provides. Client is only (implicitly) authenticated in that the secure
    session ensures that only the other party is able to communicate within the established
    session.'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: '**prerequisite: session-scoped state**: The device’s state must be session-scoped,
    such that no data is leaked between sessions or spills over into next session,
    if applicable.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: Protocol
  id: totrans-split-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following is built on top of a Diffie-Hellman Key Exchange, with minimal
    practical adaptations to make it work in situations with an attacker. The protocol
    is proved for a passive attacker, with an attempt to prove for an active attacker
    currently stalled because of technical issues.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: 'with:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: prefix `pk_` indicating public key, and
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: prefix `sk_` indicating secret/private key
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`digest = HASH(key, content)`'
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ciphertext = ENCRYPT(key, plaintext)`'
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plaintext = DECRYPT(key, ciphertext)`'
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`signature = SIGN(secret_key, content)`'
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VALIDATE(public_key, signature, content)`'
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Precondition** an identity `pk_identity` acquired at an earlier time.'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Execution concludes successfully when the proof validates successfully. Any
    corruption results in failure to validate the signature. Given that all risk lies
    with the user, anything other than successful validation is reason for termination.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: '**After successful execution**:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: a confidential session is established with a shared, ephemeral session-key,
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: we are assured that `pk_device` is authentic,
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: we are assured that `pk_user` was received unchanged,
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: we are assured this is the authentic device, i.e. ownership over identity proved.
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Failed execution**:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: received `pk_user` is invalid/corrupted
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: received `pk_device` is invalid/corrupted
  id: totrans-split-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sessionkey` cannot be produced due to `pk_device`'
  id: totrans-split-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'validation of `pk_user` fails due to:'
  id: totrans-split-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proof` is not authentic `signature`:'
  id: totrans-split-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: incorrect `sessionkey`
  id: totrans-split-52
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: due to corrupted `enc_sig`
  id: totrans-split-53
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: signature over corrupted `pk_user`
  id: totrans-split-54
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: device does not own `sk_identity`
  id: totrans-split-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: the protocol does not reflect the use of a prefix/context to prevent
    use of signature for other than identification. This may need to be considered
    when used.'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: Insights
  id: totrans-split-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: User’s D-H public key doubles as challenge-nonce, therefore there is no opportunity
    to swap out the nonce for one with a known signature, and not freely selectable
    because that requires a corresponding private key.
  id: totrans-split-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The challenge-response signature is encrypted with established session-key,
    thus preventing (raw) replay of the response-message.
  id: totrans-split-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device’s D-H public key, additionally, is used as input in keyed-hash, with
    D-H’s resulting shared secret as key. Consequently, both shared secret and device’s
    public key are fixed. In a two-party set-up, user’s public key must therefore
    also be fixed if one expects to compute the same shared secret.
  id: totrans-split-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Given that there is no persistence and client is expected to initiate and provide
    data, device needs only to rely on a secure session to keep data confidential.
  id: totrans-split-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analysis
  id: totrans-split-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this time, I have not completed a full analysis of the protocol. The following
    is, thusfar, based on intuition and informal reasoning, directed by the notions
    of the eCK security-model, and later (partially) confirmed by results of a symbolic
    prover.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: Security properties for authenticated key exchange according to the extended
    Canetti-Krawczyk (eCK) model.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: '*(Implicit) Key Agreement*'
  id: totrans-split-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`client`/`device`: by virtue of establishing a two-party secure session using
    ephemeral key exchange.'
  id: totrans-split-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Key Confirmation*'
  id: totrans-split-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`client`: by implication of successful signature validation against `pk_user`.'
  id: totrans-split-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`device`: by implication of client following up.'
  id: totrans-split-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Known Key Security*'
  id: totrans-split-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session keys are fully based on random data, with contributions from both parties.
  id: totrans-split-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Security against Unknown Key Share attacks*'
  id: totrans-split-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only 2 participants in the key exchange. Proper use of D-H prevents MitM. Only
    two parties involved, therefore no need to share or otherwise relay keys.
  id: totrans-split-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`device`: assume that any counterpart in established secure session is valid.
    Further made acceptable by the fact that all data is provided by counterpart in
    session. Proper key exchange prevents interference from any third-party.'
  id: totrans-split-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`client`: no need to share keys. Each session is freshly established. Sessions
    are always between one `device` and one `client`.'
  id: totrans-split-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Security against Key Compromise Impersonation (KCI) attacks*'
  id: totrans-split-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Identity keypair is only used for signing the challenge-nonce that is sent
    to the client. Therefore, there is no opportunity where a signature can be misinterpreted.
  id: totrans-split-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Forward Secrecy*'
  id: totrans-split-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The AKE is initiated with inputs based on random data, with the pre-shared *identity
    public key* being the only exception.
  id: totrans-split-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Granted, the eCK model is (presumably) followed in spirit rather than strictly,
    as this is an asymmetric AKE and, for example, in case of *Key Confirmation* `device`
    does not get concrete confirmation. The requirements are such that this is not
    problem in practice.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
- en: Symbolic prover
  id: totrans-split-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following [Verifpal](https://www.verifpal.com/ "Verifpal: Cryptographic
    Protocol Analysis for Students and Engineers") proof-script passes for a passive
    attacker. A session established by client with device is successful if the protocol
    is completed without failure.'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
- en: Note, though, that at the moment of completion, only `client` knows the results
    and whether it is safe to continue. This is okay, because `client` must be convinced
    that `device` is authentic and communication is secure, before requesting `device`’s
    services and sending data.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
- en: 'The Verifpal proof-script:'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The current issue with the “*active attacker*” analysis, is that the symbolic
    prover will prematurely fail on successful manipulation of the intermediate values,
    such as `ss_device`, `ss_user`, etc. The argument is that confidentiality is broken.
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
- en: The queries should be performed *after* the protocol completes (success)fully.
    `SIGNVERIF(identity, dhe_user_public, proof)?`, a checked (`?`) verification statement,
    should fail for any manipulation of `dhe_user_public` as the signature is validated
    against the original/authentic `dhe_user_public` generated by `client`. However,
    it does not. Therefore it proceeds to list all the violations of confidentiality
    of intermediate variables that are the possible as a result of corrupting the
    transferred `dhe_user_public`.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
- en: By my (informal) reasoning, if an attacker corrupts any data, `client`’s final
    signature validation must fail. Therefore, if final validation succeeds, authentic
    data must have been used and an attacker did not manipulate the established secure
    session.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
- en: Open issue
  id: totrans-split-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The [issue is reported](https://lists.symbolic.software/pipermail/verifpal/2023/000454.html
    "[Verifpal] Checked SIGNVERIF passed, but checked ASSERT fails (was: Mistake or
    missed case? SIGNVERIF with original of sent value)") to Verifpal. Unfortunately,
    at the time of writing, there has not been any follow-up yet. A reduced sample
    is used to further narrow down the problem as part of the email conversation.'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
- en: 'The protocol, when analyzed for an active attacker, produces a result that
    need never happen. The claim is: with a `nil` (corrupted) public key, a `nil`
    message, and a `nil` signature, the validation would pass. This is correct of
    course. However, given that `client` itself generates `pk_user`, there is no need
    to insert any received (potentially corrupted) value. Therefore, the failing case
    need never occur.'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
- en: Rationale for identity-challenge
  id: totrans-split-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One particular design choice that I had not discussed is that of using the
    Diffie-Hellman public key for the identity-challenge. This seems to be a somewhat
    uncommon choice. The rationale behind this is as follows; let’s discuss the various
    possibilities that can occur:'
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
- en: Note that the “*proof of identity*” here, is the signature over the D-H public
    key of `client`.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
- en: A legitimate device with its (authentic) keypair produces a proof of identity.
  id: totrans-split-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*This is intended use-case where there is no malicious activity.*'
  id: totrans-split-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: An adversary (Mallory) impersonates the expected device, without having access
    to the *identity* keypair.
  id: totrans-split-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Mallory impersonates `device`, making `client` think they’re talking to `device`.
    Given no access to the keypair, Mallory can only have access to previously produced
    signatures by `device`. Given that signatures are encrypted when transferred,
    Mallory only has access to signatures produced in his own sessions with `device`.
    Providing the right signature without access to the identity-keypair is akin to
    having the corresponding private key of the D-H keypair, given the size of the
    key-space.*'
  id: totrans-split-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Man-in-the-Middle attack on session between `client` and `device`.
  id: totrans-split-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*If Mallory is able to perform this attack, then he possesses the same ephemeral
    keypair as `client`. Therefore he can establish his own session with `device`
    with same keypair and use the signature-proof from `device`, sent to him, to forward
    to `client`. To do this, Mallory requires access to `client`’s generated keypair
    of the moment, either by solving the computational Diffie-Hellman problem or by
    invading `client` process’ memory, or similar invasive actions.*'
  id: totrans-split-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Identity-keypair is known/exposed; Mallory possesses `device`’s keypair.
  id: totrans-split-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Mallory can fully impersonate `device`. Given it controls the keypair, Mallory
    can respond to any D-H public key challenge from client with proof-signature.*'
  id: totrans-split-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The first case is the normal use-case, as intended. The last two cases involve
    breaking fundamental cryptographic mechanisms or active attacks, both are actions
    taken outside of the protocol. Both of these cases involve asymmetric cryptography,
    so are particularly vulnerable to quantum-computing attacks. However, these attacks
    are not yet possible.
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
- en: The remaining case, (2.), means we make proving the identity equally complicated
    as breaking the security of the key-exchange. It is true that if a legitimate
    client connects twice to `device` with the same key, we could then respond with
    the proof-signature of the first session. However, “*freshness*” of the ephemeral
    session keys is also a requirement. Note that it is to the benefit of `client`
    to not save signatures and attacker does not have access to the (encrypted) signature
    without the ability to eavesdrop on the session. Ideally, we would never use the
    same keypair twice. For an attacker, unless he can manipulate `client`’s choice,
    their choice of public key should be unpredictable, then eavesdropping is impossible.
    He cannot compute corresponding private key, and he cannot collect the corresponding
    signature. (Note that this implies that ephemeral D-H public key should be unpredictable
    not only for attackers, but also for `device`, which are complementary.)
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
- en: Feedback
  id: totrans-split-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This post is discussed on [Hacker News](https://news.ycombinator.com/item?id=39813537
    "A simple, (as-of-yet unidentified) asymmetric Authenticated Key Exchange (Hacker
    News)").
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
- en: Most feedback so far is rooted in initial misunderstanding of the situation.
    Consequently, topics such as *attestation*, confusion about how a device can work
    without any kind of storage, and need for authentication, arise. I have addressed
    a direct comment on the introduction being unclear by adding the section about
    the specific device. I expect this is sufficient to align reader’s expectations
    of the abstract descriptions and requirements with an actual use-case.
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
- en: Following are a few comments that address this feedback for readers who finish
    with similar questions.
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
- en: The *identity* is used to identify a specific device instantiation, as opposed
    to a physical piece of hardware. For the same reason, even if the criticism of
    *attestation* applies, it is not valid here. The *identity* is more specific than
    what the attestation process targets.
  id: totrans-split-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, there was confusion over how unique this *identity* is, what causes
    it to change, risks and impact when this *identity* would leak. Again, so far
    rooted in confusion/lack-of-information rather than criticism of the protocol
    itself.
  id: totrans-split-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A check for genuine hardware, which most likely is simpler than a full attestation
    process and IIUC does not apply a full certificate-chain, is already provided.
    The protocol as described, solves a problem under the assumption that the hardware
    is trustworthy. (At least at the start. An attack that swaps/removes the hardware
    is still considered a valid attack.)
  id: totrans-split-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why not use established crypto? This is a valid question. Most prevalent suggestion
    is to use TLS which is quite an elaborate protocol and assumes the PKI certificate
    infrastructure to be available. Another suggestion is Noise Protocol, which I
    will have another look at.
  id: totrans-split-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concerns around lack of RNG. This was further clarified. There is no RNG. There
    is a “true RNG” for an entropy-source and there is a hash-function available already
    in firmware. It is possible to at least approximate a CSPRNG.
  id: totrans-split-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于缺乏随机数生成器的担忧。这进一步澄清了。没有随机数生成器。固件中已经有一个“真随机数生成器”作为熵源，以及一个可用的哈希函数。至少可以近似实现一个CSPRNG。
- en: Concerns over lack of certificate-chain. This was rooted in not having sufficient
    information about the device. Verification of the device is already a provided
    feature.
  id: totrans-split-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于缺少证书链的担忧。这源于对设备信息不足。设备的验证已经是一个提供的功能。
- en: Other suggestions hinted at coordinated certification with the device manufacturer.
    However, this predisposes a centralized, coordinated approach and/or qualification-process,
    therefore makes several assumptions and trade-offs to make the suggestion viable.
  id: totrans-split-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他建议暗示着与设备制造商协调认证。然而，这偏向于集中化、协调的方法和/或资格过程，因此使得几个假设和权衡成为了使建议可行的基础。
- en: Criticisms regarding trust-on-first-use (TOFU) are similarly rooted in misunderstanding
    at what moment the source-secret becomes available and the extent of the uniqueness.
  id: totrans-split-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于第一次使用即信任（TOFU）的批评同样根源于对源密钥何时可用以及其唯一性程度的误解。
- en: 'A criticism on whether Verifpal is a good choice of symbolic prover: obviously,
    if the bugs are not resolved or other concerns remain, it is not a good choice.
    One could switch to a different solver. However, there is no reason to dismiss
    any solver simply because it is not known. Furthermore, the proof is used as confirmation,
    next to manual analysis.'
  id: totrans-split-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Verifpal是否是符号证明器的良好选择的批评：显然，如果问题没有解决或其他问题仍然存在，它并不是一个好的选择。可以切换到其他求解器。然而，并没有理由简单因为它不为人知就驳回任何求解器。此外，证明用作确认，旁边是手动分析。
- en: Considering the feedback that I have read, there is not yet an indication that
    there is a problem with the protocol itself. Many comments are, strictly speaking,
    off-topic for the protocol. I decided to add a paragraph explaining the specifics
    of the intended device.
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 综合我所阅读的反馈，目前尚无迹象表明协议本身存在问题。许多评论严格来说与协议无关。我决定增加一段解释预期设备的具体细节。
- en: Changelog
  id: totrans-split-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变更日志
- en: This article will receive updates, if necessary.
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有必要，本文将会更新。
- en: '*2024-03-28* Added sections on description of the concrete device, rationale
    for identity-challenge, feedback from discussions.'
  id: totrans-split-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*2024-03-28* 添加了有关具体设备描述、身份挑战理由、讨论反馈的部分。'
- en: '*2024-03-23* Typos, formatting.'
  id: totrans-split-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*2024-03-23* 拼写错误、格式。'
- en: '*2024-03-23* Initial version.'
  id: totrans-split-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*2024-03-23* 初始版本。'
