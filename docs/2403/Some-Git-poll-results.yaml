- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:45:55'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Some Git poll results
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://jvns.ca/blog/2024/03/28/git-poll-results/](https://jvns.ca/blog/2024/03/28/git-poll-results/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A new thing I’ve been trying while writing this Git zine is doing a bunch of
    polls on Mastodon to learn about:'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: which git commands/workflows people use (like “do you use merge or rebase more?”
    or “do you put your current git branch in your shell prompt?”)
  id: totrans-split-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: what kinds of problems people run into with git (like “have you lost work because
    of a git problem in the last year or two?”)
  id: totrans-split-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: which terminology people find confusing (like “how confident do you feel that
    you know what HEAD means in git?”)
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: how people think about various git concepts (“how do you think about git branches?”)
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in what ways my usage of git is “normal” and in what ways it’s “weird”. Where
    am I pretty similar to the majority of people, and where am I different?
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s been a lot of fun and some of the results have been surprising to me, so
    here are some of the results. I’m partly just posting these so that I can have
    them all in one place for myself to refer to, but maybe some of you will find
    them interesting too.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: these polls are highly unscientific
  id: totrans-split-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Polls on social media that I thought about for approximately 45 seconds before
    posting are not the most rigorous way of doing user research, so I’m pretty cautious
    about drawing conclusions from them. Potential problems include: I phrased the
    poll badly, the set of possible responses aren’t chosen very carefully, some of
    the poll responses I just picked because I thought they were funny, and the set
    of people who follow me on Mastodon is not representative of all git users.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: 'But here are a couple of examples of why I still find these poll results useful:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: The first poll is “what’s your approach to merge commits and rebase in git”?
    600 people (30% of responders) replied “I usually use merge, rarely/never rebase”.
    It’s helpful for me to know that there are a lot of people out there who rarely/never
    use rebase, because I use rebase all the time – it’s a good reminder that my experiences
    isn’t necessarily representative.
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the poll “how confident do you feel that you know what HEAD means in git?“,
    14% of people replied “literally no idea”. That tells me to be careful about assuming
    that people know what `HEAD` means in my writing.
  id: totrans-split-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: where to read more
  id: totrans-split-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to read more about any given poll, you can click at the date at
    the bottom – there’s usually a bunch of interesting follow-up discussion.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: Also this post has a lot of CSS so it might not work well in a feed reader.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: Now! Here are the polls! I’m mostly just going to post the results without commenting
    on them.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: merge and rebase
  id: totrans-split-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'poll: what''s your approach to merge commits and rebase in git?'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: merge conflicts
  id: totrans-split-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'poll: if you use git, how often do you deal with nontrivial merge conflicts?
    (like where 2 people were really editing the same code at the same time and you
    need to take time to think about how to reconcile the edits)'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: 'another merge conflict poll:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个合并冲突调查：
- en: have you ever seen a bug in production caused by an incorrect merge conflict
    resolution? I've heard about this as a reason to prefer merges over rebase (because
    it makes the merge conflict resolution easier to audit) and I'm curious about
    how common it is
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否见过因不正确的合并冲突解决而导致的生产中的 bug？我听说这是倾向于使用合并而不是变基的一个理由（因为这样可以更容易审计合并冲突解决），我对此很感兴趣，想了解这种情况有多常见
- en: 'I thought it was interesting in the next one that “edit the weird text file
    by hand” was most people’s preference:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得有趣的是在下一个调查中，“手动编辑奇怪的文本文件”是大多数人的首选：
- en: 'poll: when you have a merge conflict, how do you prefer to handle it?'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 调查：当你有一个合并冲突时，你更喜欢如何处理它？
- en: 'merge conflict follow up: if you prefer to edit the weird text file by hand
    instead of using a dedicated merge conflict tool, why is that?'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 合并冲突后续：如果你更喜欢手动编辑奇怪的文本文件而不是使用专用的合并冲突工具，为什么？
- en: 'poll: did you know that in a git merge conflict, the order of the code is different
    when you do a merge/rebase?'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 调查：你知道在 Git 合并冲突中，当你执行合并/变基时，代码的顺序是不同的吗？
- en: 'merge:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 合并：
- en: <<<<<<< HEAD
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: <<<<<<< HEAD
- en: YOUR CODE
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: YOUR CODE
- en: =======
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: =======
- en: OTHER BRANCH'S CODE
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 其他分支的代码
- en: '>>>>>>> c694cf8aabe'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '>>>>>>> c694cf8aabe'
- en: 'rebase:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 变基：
- en: <<<<<<< HEAD
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: <<<<<<< HEAD
- en: OTHER BRANCH'S CODE
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 其他分支的代码
- en: =======
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: =======
- en: YOUR CODE
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: YOUR CODE
- en: '>>>>>>> d945752 (your commit message)'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: '>>>>>>> d945752 (你的提交信息)'
- en: (where "YOUR CODE" is the code from the branch you were on when you ran `git
    merge` or `git rebase`)
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: （这里的 "YOUR CODE" 是当你运行 `git merge` 或 `git rebase` 时所在分支的代码）
- en: git pull
  id: totrans-split-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: git pull
- en: 'poll: do you prefer `git fetch` or `git pull`?'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 调查：你更喜欢使用 `git fetch` 还是 `git pull`？
- en: (no lectures about why you think `git pull` is bad please but if you use both
    I'd be curious to hear in what cases you use fetch!)
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: （请不要对为什么你认为 `git pull` 不好进行演讲，但如果你两者都使用，我很想听听你在什么情况下使用 fetch！）
- en: commits
  id: totrans-split-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提交
- en: '[poll] how do you think of a git commit?'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[调查] 你如何看待一个 Git 提交？'
- en: (sorry, you can't pick “it’s all 3”, I'm curious about which one feels most
    true to you)
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: （对不起，你不能选择“都是”，我想知道哪一个对你来说最符合实际）
- en: branches
  id: totrans-split-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分支
- en: 'poll: how do you think about git branches? (I''ll put an image in a reply with
    pictures for the 3 options)'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 调查：你如何看待 Git 分支？（我会在回复中放一张有关 3 个选项图片的图片）
- en: as with all of these polls obviously all 3 are valid, I'm curious which one
    feels the most true to you
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 就像所有这些调查一样，显然三者都是有效的，我很想知道哪一个对你来说最符合实际
- en: git environment
  id: totrans-split-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Git 环境
- en: 'poll: do you put your current git branch in your shell prompt?'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 调查：你是否在 shell 提示符中包含当前的 Git 分支？
- en: 'poll: do you use git on the command line or in a GUI?'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 调查：你是在命令行还是在 GUI 中使用 Git？
- en: (you can pick more than one option if it’s a mix of both, sorry magit users
    I didn't have space for you in this poll)
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: (你可以选择多个选项，如果是混合的话，对不起，magit 用户，我在此调查中没有为你留出空间)
- en: losing work
  id: totrans-split-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 丢失工作
- en: 'poll: have you lost work because of a git problem in the last year or two?
    (it counts even if it was "your fault" :))'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 调查：在过去一两年中，你因为 Git 的问题而丢失过工作吗？（即使是“你的错”也算在内 :))
- en: meaning of various git terms
  id: totrans-split-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 各种 Git 术语的含义
- en: These polls gave me the impression that for a lot of git terms (fast-forward,
    reference, HEAD), there are a lot of git users who have “literally no idea” what
    they mean. That makes me want to be careful about using and defining those terms.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些调查让我觉得对于很多 Git 术语（如快进、引用、HEAD），有很多 Git 用户“真的不知道”它们的含义。这让我想要谨慎地使用和定义这些术语。
- en: 'poll: how confident do you feel that you know what HEAD means in git?'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 调查：你对 Git 中的 HEAD 的含义有多自信？
- en: 'another poll: how do you think of HEAD in git?'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个调查：你如何理解 Git 中的 HEAD？
- en: 'poll: when you see this message in `git status`:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 调查：当你在 `git status` 中看到这条消息时：
- en: ”Your branch is up to date with 'origin/main’.”
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: “你的分支已经是 'origin/main' 的最新状态。”
- en: do you know that your branch may not actually be up to date with the `main`
    branch on the remote?
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗，你的分支实际上可能与远程的 `main` 分支不一致吗？
- en: 'poll: how confident do you feel that you know what the term "fast-forward"
    means in git, for example in this error message:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 调查：你对 Git 中术语 “fast-forward” 的含义有多自信？比如在这个错误消息中：
- en: '`! [rejected] main -> main (non-fast-forward)`'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`! [rejected] main -> main (non-fast-forward)`'
- en: 'or this one:'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 或者这个：
- en: 'fatal: Not possible to fast-forward, aborting.'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 'fatal: 不可能快进，中止。'
- en: (I promise this is not a trick question, I'm just writing a blog post about
    git terminology and I'm trying to gauge how people feel about various core git
    terms)
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: (我保证这不是一个诡计问题，我只是在写一篇关于 Git 术语的博文，我想了解人们对各种核心 Git 术语的看法)
- en: 'poll: how confident do you feel that you know what a "ref" or "reference" is
    in git? (“ref” and “reference” are the same thing)'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 调查：你对于在git中“ref”或“reference”的含义有多自信？（“ref”和“reference”是相同的东西）
- en: for example in this error message (from `git push`)
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在这个错误消息中（来自`git push`）
- en: 'error: failed to push some refs to ''github.com:jvns/int-exposed'''
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 错误：无法推送一些引用到'github.com:jvns/int-exposed'
- en: 'or this one: (from `git switch mybranch`)'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 或者这个：（来自`git switch mybranch`）
- en: 'fatal: invalid reference: mybranch'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 'fatal: 无效的引用：mybranch'
- en: 'another git terminology poll: how confident do you feel that you know what
    a git commit is?'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个git术语调查：你对于git提交的含义有多自信？
- en: (not a trick question, I'm mostly curious how this one relates to people's reported
    confidence about more "advanced" terms like reference/fast-forward/HEAD)
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: （这不是一个恶作剧问题，我只是对这个问题与人们对更“高级”术语（如reference/fast-forward/HEAD）的自信程度之间的关系感到好奇）
- en: 'poll: in git, do you think of "detached HEAD state" and "not having any branch
    checked out" as being the same thing?'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 调查：在git中，你认为“游离HEAD状态”和“没有检出任何分支”是相同的情况吗？
- en: 'poll: how confident do you feel that you know what the term "current branch"
    means in git?'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 调查：你对于git中术语“当前分支”是什么含义有多自信？
- en: (deleted & reposted to clarify that I'm asking about the meaning of the term)
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: （已删除并重新发布以澄清我询问的术语的含义）
- en: other version control systems
  id: totrans-split-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他版本控制系统
- en: I occasionally hear “SVN was better than git!” but this “svn vs git” poll makes
    me think that’s a minority opinion. I’m much more cautious about concluding anything
    from the hg-vs-git poll but it does seem like some people prefer git and some
    people prefer Mercurial.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我偶尔听到“SVN比git更好！”但是这个“svn vs git”调查让我觉得这只是少数人的意见。我对hg-vs-git调查的结论要小心得多，但似乎有些人喜欢git，有些人喜欢Mercurial。
- en: 'poll 2: if you''ve used both svn and git, which do you prefer?'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 调查2：如果你既使用过svn又使用过git，你更喜欢哪一个？
- en: (no replies please, i have already read 300 comments about git vs other version
    control systems today and they were great but i can't read more)
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: （请不要回复，请注意，今天我已经读了300条关于git与其他版本控制系统的评论，它们很棒，但我不能再读更多了）
- en: gonna do a short thread of git vs other version control systems polls just to
    get an overall vibe
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将做一个简短的git与其他版本控制系统调查串，只是为了获得一个总体感觉
- en: 'poll 1: if you''ve used both hg and git, which do you prefer?'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 调查1：如果你既使用过hg又使用过git，你更喜欢哪一个？
- en: (no replies please though, i have already read 300 comments about git vs other
    version control systems today and i can't read more)
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: （请不要回复，虽然今天我已经读了300条关于git与其他版本控制系统的评论，但我不能再读更多了）
- en: that’s all!
  id: totrans-split-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 就这些了！
- en: It’s been very fun to run all of these polls and I’ve learned a lot about how
    people use and think about git.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 运行所有这些调查非常有趣，我学到了很多关于人们如何使用和思考git的东西。
