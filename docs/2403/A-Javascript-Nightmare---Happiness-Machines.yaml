- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:03:34'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: A Javascript Nightmare | Happiness Machines
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://blog.ignaciobrasca.com/opinion/2024/03/15/javascript-nightmare.html](https://blog.ignaciobrasca.com/opinion/2024/03/15/javascript-nightmare.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It was Friday, and everyone was leaving or at most about to.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: '***Suddenly, during a quick demo, I realized something was off.***'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: Oh boy, the game started…
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: After an initial smoke review, I realized the system wasn’t working as expected
    for exporting files. I exported two files in different formats - one worked, but
    the other kept loading forever.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Our notification Slack channel started queuing messages, letting us know we’d
    be here until late night on a Friday.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: After my first investigation, without panicking, I realized it wasn’t just files
    - it was only PDF files. I exported a Word document from our internal system,
    and it worked. I exported a CSV file, and it worked as well. I started a job for
    generating a PDF again, but it kept loading forever.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: I went to our staging environment and exported one PDF document - it worked.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: My head was spinning. Given that I had an ongoing demo, I had to jump out from
    the problem, so I let Martin (a skilled engineer who has been a part of Datia
    from almost the beginning) investigate this issue with me.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: Up to this point, it was 3:33 PM.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: The Usual Suspect
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After a few minutes, we started investigating across our instances.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '**“It might be Nginx?”** we checked our servers, and the access log appeared
    to have errors mentioning an upstream timeout error.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Weird (x1).
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: We kept investigating until we reached the usual suspect (and something that
    had caused headaches before) - AWS WAF. WAF is a web application firewall provided
    by AWS that essentially helps us block, control, and prevent harmful requests
    from the open web on our public domains.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: After a few minutes of digging with it and a few unsuccessful trials, we decided
    to step further and investigate our buckets. Recently, we had run into a few issues
    where AWS threw us an error regarding hitting quotas for S3 buckets.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: Weird (x2), since we thought the cloud was scalable up to infinite. [When in
    reality, it’s someone else’s machine.](https://blog.codinghorror.com/the-cloud-is-just-someone-elses-computer/)
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: 'We checked the logs and found our first hint: an unauthorized error from AWS
    after an apparent bottleneck. We looked at each other’s faces in the meeting and
    said in unison:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: '**“It must be S3.”**'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Narrator: it wasn’t'
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Confusion
  id: totrans-split-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We ran to try it out on a new bucket and wrote a few scripts to test it out.
    We ran back to staging since it was the environment that used to work before but
    now suddenly wasn’t working anymore - it kept loading forever.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: Our assumption was, **“Okay, we might be hitting another obscure quota from
    S3.**”
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create a bucket from scratch, but first, let’s try it out against these
    buckets from a virtual machine.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: We did it, and it worked like a charm - same document, even. Now our confusion
    was extreme, but we had to keep digging like Sherlock Holmes digs into crimes.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: The Bullshit Ecosystem
  id: totrans-split-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We ran into the questions that one essentially does not encounter in a serious
    programming environment [(no pun intended, JavaScript boys!)](https://nadh.in/blog/javascript-ecosystem-software-development-are-a-hot-mess/):'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: Might the instance be running out of memory, and somehow we’re not throwing
    an error?
  id: totrans-split-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Must be the content of the file that’s breaking, but why don’t we see exceptions
    and just a timeout?
  id: totrans-split-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is this a bug, but where?
  id: totrans-split-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Must be an `undefined` stream?
  id: totrans-split-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Or a `null` one?
  id: totrans-split-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is the library we’re using to upload stuff deprecated?
  id: totrans-split-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Up to this point, it was 6:40 PM for me (in Sweden) and late for Martin in Argentina
    as well. We started running in circles.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: 'We decided to zoom in a bit and start testing in a production environment directly
    since it was outside business hours [(and because I didn’t mention: our locals
    worked like a charm!)](https://dylanbeattie.net/2017/04/27/it-works-on-my-machine.html)'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: We modified the code and started using a non-library strategy to upload the
    stream into S3 ([which, by the way, is messy and not that straightforward](https://docs.aws.amazon.com/AmazonS3/latest/userguide/example_s3_Scenario_UploadStream_section.html)).
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: A few tries, and still nothing - it worked on our local environments but didn’t
    work on the cloud.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: The Network
  id: totrans-split-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Up to this point, I was getting frustrated since it was Friday, and we were
    still here, debugging a JavaScript mess. Frustrating enough since it feels like
    in JavaScript, you never have control over what’s going on.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: In C, you can go ahead and misconfigure a makefile to output debug files, a
    segfault, or a bad reference, but at the end of the day, it’s your fault.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: The same goes for any serious language ecosystem out there.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: 'But JavaScript is quite the opposite: **it works like magic (and not as a compliment!)
    even though you know it’s pure software!**'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: I ended up believing, “Maybe AWS blocked our public domain, and from there,
    we could not upload files? What if…”
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, I tried on a virtual machine we have, but nothing - it worked like a
    charm. The funny thing about this is that during this process, we had three pipelines
    and workflows for the weekend running in the background, and none of those broke
    or raised an error.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: The Reunion
  id: totrans-split-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arriving at 8:15 PM, we decided to wrap up for the day and continue individually.
    Each step we took didn’t work at all.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: So I decided to start removing and cleaning the things we did for testing, and
    I took a five-minute walk to the supermarket.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: I came back and said, “Okay, let’s start again.” I ran my local against our
    production environment and emulated the scenario - it worked, even with our domain.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: It wasn’t an issue with S3; AWS was discarded. It must be the documents service
    or the code…
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: We discussed a bit more with Martin, chatted, and then I continued with the
    experiment…
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: I deleted all cache on my local environment, all node_modules references, all
    lock files. I ran an installation process once again and exported again… **it
    didn’t work.**
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: 'The next message I sent: “We found it!”'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: Now it was a matter of understanding what was going on since it wasn’t a server
    issue but a library issue.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: 'Doing a `git diff`, we could observe a few changes on libraries related to:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All of these because `@aws-sdk` got updated a few months ago… Weird (x3) and
    extremely closely related.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: We kept investigating and found that the actual library we used for rendering
    files inside the server had changed as well, and it changed… `the streaming pipeline`.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: Oh boy, we were close.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: We kept digging and decided to downgrade the packages to the latest available
    version on the internet before these changes. We modified the `package.json` and
    pushed to production (yeah, up to this point, there was no other way around).
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: …
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: 'After a few minutes, the deploy failed: `github timeout`.'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: Oh my. Anyway, we started a new workflow, and it worked.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: We went to our production environment and checked - it didn’t work, but now
    it was no longer a timeout but a direct error on a function in charge of handling
    the file streaming.
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
- en: We were so close.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: 'Checked the logs:'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
- en: '`this.subset.encodeStream is not a function`'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: Oh my, holy grail… What now?
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
- en: I did a quick search, and apparently, if you want to use a specific version
    of the library with a specific version, you need to use a fixed version for registering
    fonts in the document…
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, it was around 10 PM, and the only thing we wanted was to close our computers
    and sleep (for me, I don’t know about Martin).
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
- en: We did an upgrade and installation of the library, pushed, ran the installation
    process - it didn’t work.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
- en: Well…
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: After a few minutes, we cleaned up the pipeline cache, restarted our environments,
    and even cleaned up the load balancer (WTF, just in case).
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
- en: I pushed again and deployed. It worked.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
- en: Up to this point, we weren’t even surprised; we just wanted to leave.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
- en: We checked the document - it was all empty except for SVG inside.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
- en: I’m thinking about opening a restaurant now.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
- en: We checked again, did the entire process from scratch once more, in addition
    to the other downgrade/upgrade actions we took, we had to upgraded a library we
    didn’t think of was related with this mess, and now - it worked. The document
    was there, and now everyone could have a PDF.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
- en: The system was **stable** again.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
- en: Our sanity might not be.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
- en: The Catharsis
  id: totrans-split-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s almost incredible to believe that this ecosystem is so broad and spread
    out across the globe. It’s awful, and the developer experience is close to being
    a paranoid android trying not to shoot himself in the foot with a bazooka.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript sometimes feels too malleable, too easy, too clean, but it’s not.
    The paybacks come later in the game.
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
- en: Now our strategy will surely be to use at least a typed system or a more robust
    runtime. This mess cannot be there any longer, and if it is, JavaScript won’t
    be the tool to support it (since it’s strictly a bad tool).
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的策略肯定是至少使用一个类型化系统或更健壮的运行时。这种混乱不能再持续存在了，如果它存在的话，JavaScript将不再是支持它的工具（因为它严格来说是一个糟糕的工具）。
- en: Conclusion
  id: totrans-split-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: It feels like you need to know too many nitty gritty details (and the devil
    lies in those details!) to truly understand what’s going on - and it’s not about
    being an expert, but an expert on the minute particulars.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你似乎需要了解太多的琐碎细节（而魔鬼就藏在这些细节里！）才能真正理解发生了什么——这与成为专家无关，而是成为细节上的专家。
- en: Why didn’t this library work in conjunction with the latest version of AWS?
    Who knows? Not even the developers of the library might know, because the JavaScript
    ecosystem is so badly interconnected that everyone relies on blindly trusting
    each other’s code and infrastructure. It’s not even close to the experience of
    using robust package managers like Cargo (Rust), NuGet (C#), or others.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这个库不能与最新版本的AWS配合使用呢？谁知道呢？甚至这个库的开发者可能也不知道，因为JavaScript生态系统的联系如此之差，以至于每个人都盲目地信任彼此的代码和基础设施。这与使用像Cargo（Rust）、NuGet（C#）等强大包管理器的体验完全不同。
- en: JS works, and it works well for a lot of things. But don’t try to build a truly
    scalable system with it. It’s simply too difficult to avoid shooting yourself
    in the foot entirely when the ecosystem is this fragile and delicate. One tiny
    version mismatch or breaking change can bring your mission-critical application
    to a standstill, as we painfully experienced.
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript确实有效，而且在很多事情上表现良好。但是不要试图用它来构建一个真正可扩展的系统。当生态系统如此脆弱而微妙时，要完全避免自掘坟墓实在是太困难了。一个微小的版本不匹配或破坏性变化就可能让你的关键应用陷入停顿，我们痛苦地经历过这一点。
- en: The JavaScript world moves too fast, with dependencies changing constantly and
    breaking backwards compatibility. This makes it extremely high-risk for any project
    aiming to be an enterprise-grade, long-lasting solution. The deck is stacked against
    you when you have to wrestle with the ever-changing currents of the npm universe
    and its nitty gritty issues.
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript世界变化太快，依赖项不断变化并且破坏向后兼容性。这使得任何试图成为企业级、长期解决方案的项目都面临极高的风险。当你必须与npm宇宙及其琐碎问题的不断变化抗争时，你就会发现困境重重。
- en: It feels like you’re constantly swimming against the current, needing to be
    a domain expert on the most granular details just to keep your application afloat.
    It’s an unnecessarily high cognitive burden that often outweighs the benefits
    JavaScript provides.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 感觉就像你在不断逆流而上，需要成为领域专家才能使你的应用程序保持浮在水面。这是一个不必要的高认知负担，通常超过了JavaScript提供的好处。
- en: Don’t get me wrong, JavaScript has it’s a good tool sometimes. But we’ve learned
    the hard way that it simply isn’t the right tool for building robust platforms
    that need to stand the test of time.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 别误会，JavaScript有时是一个好工具。但我们通过艰难的方式学到的是，它并不适合构建需要经受时间考验的强大平台。
- en: The ecosystem is a beautiful mess, but a mess nonetheless. For mission-critical
    applications, the costs of dealing with its chaos and nitty gritty issues are
    too high.
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 生态系统是一个美丽的混乱，但仍然是一个混乱。对于关键应用程序来说，处理它的混乱和琐碎问题的成本太高了。
- en: At this point, it’s not even about JavaScript itself, but about the fundamental
    lack of trust a developer can have with its tools. Imagine a carpenter with a
    hammer that drives nails most of the time, but then randomly and unpredictably
    strikes the carpenter instead.
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，问题甚至不再是JavaScript本身，而是开发者对其工具的基本信任缺失。想象一下，一个木匠有一个大部分时间都是用来打钉子的锤子，但偶尔会随机和不可预测地击打木匠自己。
- en: Why would that carpenter want to use such an unreliable and hazardous hammer
    for every piece of furniture they build? It makes no sense. And yet, that’s the
    situation we find ourselves in with JavaScript.
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么那个木匠要使用这样一个不可靠和危险的锤子来建造每一件家具？这毫无道理。然而，这就是我们在JavaScript中所面临的情况。
- en: I don’t know if upcoming projects like Bun.js or Deno will do anything to rectify
    the situation. I simply believe the JavaScript language itself has become too
    amorphous and monstrous to not consistently breed confusion across builds and
    deployments.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道像Bun.js或Deno这样的即将推出的项目是否会改善这种情况。我只是认为JavaScript语言本身已经变得过于模糊和庞大，无法避免在构建和部署中引发混乱。
