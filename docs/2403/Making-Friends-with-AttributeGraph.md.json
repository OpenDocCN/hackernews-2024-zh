["```\n@propertyWrapper\nstruct Setting<T> {\n\tinit(_ key: String, defaultValue: T)\n\tvar wrappedValue: T { get set }\n\tvar projectedValue: Binding<T> { get }\n\tvar isSet: Bool { get }\n\tfunc reset()\n} \n```", "```\n@Setting(\"favoriteNumber\", defaultValue: 42)\nvar favoriteNumber\n\nfavoriteNumber = 69\nprint(favoriteNumber) // 69\nprint($favoriteNumber.isSet) // true\n$favoriteNumber.reset()\nprint($favoriteNumber.isSet) // false\nprint(favoriteNumber) // 42 \n```", "```\n@propertyWrapper\nstruct Setting<T> {\n\tlet key: String\n\tlet defaultValue: T\n\n\tinit(_ key: String, defaultValue: T) {\n\t\tself.key = key\n\t\tself.defaultValue = defaultValue\n\t}\n\n\tvar wrappedValue: T {\n\t\tget {\n\t\t\tUserDefaults.standard.object(forKey: key) as? T ?? defaultValue\n\t\t}\n\t\tset {\n\t\t\tUserDefaults.standard.setValue(newValue, forKey: key)\n\t\t}\n\t}\n\n\tvar projectedValue: Binding<T> {\n\t\tBinding(\n\t\t\tget: {\n\t\t\t\twrappedValue\n\t\t\t},\n\t\t\tset: {\n\t\t\t\twrappedValue = $0\n\t\t\t}\n\t\t)\n\t}\n\n\tvar isSet: Bool {\n\t\tUserDefaults.standard.value(forKey: key) != nil\n\t}\n\n\tfunc reset() {\n\t\tUserDefaults.standard.removeObject(forKey: key)\n\t}\n} \n```", "```\nvar wrappedValue: T {\n\tget {\n\t\tUserDefaults.standard.object(forKey: key) as? T ?? defaultValue\n\t}\n\tnonmutating set {\n\t\tUserDefaults.standard.setValue(newValue, forKey: key)\n\t}\n} \n```", "```\nstruct ContentView: View {\n\t@Setting(\"enabled\", defaultValue: false)\n\tvar enabled\n\n\tvar body: some View {\n\t\tToggle(\"Item\", isOn: $enabled)\n\t}\n} \n```", "```\nstruct State<Value> {\n\tvar _value: Value\n\n\tvar wrappedValue: Value {\n\t\tget {\n\t\t\t_value\n\t\t}\n\t\tset {\n\t\t\t_value = newValue\n\t\t\tSwiftUI._noteChanges(self)\n\t\t}\n\t}\n} \n```", "```\n@propertyWrapper\nstruct Setting<T> {\n\tlet key: String\n\tlet defaultValue: T\n\n\t@State\n\tvar value: T?\n\n\tinit(_ key: String, defaultValue: T) {\n\t\tself.key = key\n\t\tself.defaultValue = defaultValue\n\t\tself.value = UserDefaults.standard.object(forKey: key) as? T\n\t}\n\n\tvar wrappedValue: T {\n\t\tget {\n\t\t\tvalue ?? defaultValue\n\t\t}\n\t\tnonmutating set {\n\t\t\tvalue = newValue\n\t\t\tUserDefaults.standard.setValue(newValue, forKey: key)\n\t\t}\n\t}\n} \n```", "```\n@propertyWrapper\nstruct Setting<T>: DynamicProperty {\n\tlet key: String\n\tlet defaultValue: T\n\n\t@State\n\tvar value: T? = nil\n\n\tinit(_ key: String, defaultValue: T) {\n\t\tself.key = key\n\t\tself.defaultValue = defaultValue\n\t}\n\n\tvar wrappedValue: T {\n\t\tget {\n\t\t\tUserDefaults.standard.object(forKey: key) as? T ?? defaultValue\n\t\t}\n\t\tnonmutating set {\n\t\t\tvalue = newValue\n\t\t\tUserDefaults.standard.setValue(newValue, forKey: key)\n\t\t}\n\t}\n} \n```", "```\nget {\n\t_ = value\n\treturn UserDefaults.standard.object(forKey: key) as? T ?? defaultValue\n} \n```", "```\n@propertyWrapper\nstruct Setting<T>: DynamicProperty {\n\t// Dummy state that SwiftUI thinks we depend on\n\t@State\n\tvar _update = false\n\n\tvar wrappedValue: T {\n\t\tget {\n\t\t\t_ = _update\n\t\t\treturn UserDefaults.standard.object(forKey: key) as? T ?? defaultValue\n\t\t}\n\t\tnonmutating set {\n\t\t\t_update.toggle()\n\t\t\tUserDefaults.standard.setValue(newValue, forKey: key)\n\t\t}\n\t}\n} \n```", "```\n@propertyWrapper\nstruct Setting<T>: DynamicProperty {\n\tclass Observer: NSObject {\n\t\tlet key: String\n\t\tlet _update: State<Bool>\n\n\t\tinit(key: String, _update: State<Bool>) {\n\t\t\tself.key = key\n\t\t\tself._update = _update\n\t\t\tsuper.init()\n\t\t\tUserDefaults.standard.addObserver(self, forKeyPath: key, context: nil)\n\t\t}\n\n\t\tdeinit {\n\t\t\tUserDefaults.standard.removeObserver(self, forKeyPath: key)\n\t\t}\n\n\t\toverride func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey: Any]?, context: UnsafeMutableRawPointer?) {\n\t\t\t_update.wrappedValue.toggle()\n\t\t}\n\t}\n\n\tlet observer: Observer\n\n\tinit(_ key: String, defaultValue: T) {\n\t\tself.key = key\n\t\tself.defaultValue = defaultValue\n\t\tself.observer = Observer(key: key, _update: __update)\n\t}\n} \n```", "```\n(lldb) po __update ▿ State<Bool>  - _value : false ▿ _location : Optional<AnyLocation<Bool>>\n ▿ some : <StoredLocation<Bool>: 0x600002f88c00> \n```", "```\n(lldb) po _update ▿ State<Bool>  - _value : false\n  - _location : nil \n```", "```\n@propertyWrapper\nstruct Setting<T>: DynamicProperty {\n\tlet key: String\n\tlet defaultValue: T\n\n\t@State\n\tvar _update = false\n\n\tclass Observer: NSObject {\n\t\tlet key: String\n\t\tvar _update: State<Bool>!\n\n\t\tinit(key: String) {\n\t\t\tself.key = key\n\t\t\tsuper.init()\n\t\t\tUserDefaults.standard.addObserver(self, forKeyPath: key, context: nil)\n\t\t}\n\n\t\tdeinit {\n\t\t\tUserDefaults.standard.removeObserver(self, forKeyPath: key)\n\t\t}\n\n\t\toverride func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey: Any]?, context: UnsafeMutableRawPointer?) {\n\t\t\t_update.wrappedValue.toggle()\n\t\t}\n\t}\n\n\tlet observer: Observer\n\n\tinit(_ key: String, defaultValue: T) {\n\t\tself.key = key\n\t\tself.defaultValue = defaultValue\n\t\tself.observer = Observer(key: key)\n\t}\n\n\tfunc update() {\n\t\tobserver._update = __update\n\t}\n} \n```"]