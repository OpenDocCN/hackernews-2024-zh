["```\n{% if country is defined and country is string -%}\nconst INITIAL_COUNTRY = \"{{country}}\";\n{% else -%}\n {% if LANG == \"en\" -%}\n const INITIAL_COUNTRY = \"us\";\n {% elif LANG == \"de\" -%}\n const INITIAL_COUNTRY = \"de\";\n {% elif LANG == \"fr\" -%}\n const INITIAL_COUNTRY = \"fr\";\n {% endif %}\n{% endif -%} \n```", "```\nlet fallback_service = ServeDir::new(public_path)\n .append_index_html_on_directories(true)\n .not_found_service(Handler::with_state(handle_404, context.clone())); \n```", "```\nmatch ServeFile::new(path.as_path())\n .try_call(Request::new(axum::body::Body::empty()))\n .await\n{\n Ok(res) => res.into_response(),\n Err(e) => (StatusCode::NOT_FOUND).into_response()\n} \n```", "```\nlet public_path = Path::new(&config.server.www_dir);\nlet fallback_service = ServeDir::new(public_path)\n .append_index_html_on_directories(true)\n .not_found_service(handle_404.into_service());\n Router::new()\n .fallback(get(|req: Request| async move {\n let (mut parts, body) = req.into_parts();\n let uri: OriginalUri = parts.extract().await?;\n let req = Request::from_parts(parts, body);\n match fallback_service.oneshot(req).await {\n Ok(mut res) => match res.status() {\n StatusCode::OK => {\n if uri.path().contains(\"/_astro/\")\n {\n res.headers_mut().insert(\n \"Cache-Control\",\n \"public, max-age=31536000\".parse().unwrap(),\n );\n }\n Ok(res)\n }\n _ => Ok(res),\n },\n Err(e) => {\n tracing::error!(\"fallback_service error: {}\", e);\n Err(e)\n }\n }\n }))\n .layer(service_layer) \n```"]