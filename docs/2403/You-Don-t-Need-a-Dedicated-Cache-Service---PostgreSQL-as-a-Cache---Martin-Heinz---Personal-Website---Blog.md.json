["```\n docker volume create pgdata\ndocker run -d \\\n  --name postgres \\\n  -v pgdata:/var/lib/postgresql/data \\\n  -e POSTGRES_PASSWORD=strongpassword \\\n  -p 5432:5432 \\\n  postgres:15.3-bullseye \n```", "```\n CREATE UNLOGGED TABLE cache (\n    id serial PRIMARY KEY,\n    key text UNIQUE NOT NULL,\n    value jsonb,\n    inserted_at timestamp);\n\nCREATE INDEX idx_cache_key ON cache (key); \n```", "```\n CREATE OR REPLACE PROCEDURE expire_rows (retention_period INTERVAL) AS\n$$\nBEGIN\n    DELETE FROM cache\n    WHERE inserted_at < NOW() - retention_period;\n\n    COMMIT;\nEND;\n$$ LANGUAGE plpgsql;\n\nCALL expire_rows('60 minutes'); -- This will remove rows older than 1 hour \n```", "```\n -- Create a schedule to run the procedure every hour\nSELECT cron.schedule('0 * * * *', $$CALL expire_rows('1 hour');$$);\n\n-- List all scheduled jobs\nSELECT * FROM cron.job; \n```", "```\n CREATE OR REPLACE FUNCTION expire_rows_func (retention_hours integer) RETURNS void AS\n$$\nBEGIN\n    DELETE FROM cache\n    WHERE inserted_at < NOW() - (retention_hours || ' hours')::interval;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE OR REPLACE FUNCTION expire_rows_func_trigger() RETURNS trigger AS\n$$\nBEGIN\n    PERFORM expire_rows_func (1);\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER cache_cleanup_trigger\n    AFTER INSERT ON cache\n    FOR EACH ROW\n    EXECUTE FUNCTION expire_rows_func_trigger(); \n```", "```\n INSERT INTO cache (key, value, inserted_at)\nVALUES\n    ('key1', '{\"field1\": \"value1\", \"field2\": \"value2\"}', NOW() - INTERVAL '1 hour'),\n    ('key2', '{\"field1\": \"value3\", \"field2\": \"value4\"}', NOW() - INTERVAL '2 hours'),\n    ('key3', '{\"field1\": \"value5\", \"field2\": \"value6\"}', NOW() - INTERVAL '3 hours'),\n    ('key4', '{\"field1\": \"value7\", \"field2\": \"value8\"}', NOW() - INTERVAL '4 hours'),\n    ('key5', '{\"field1\": \"value9\", \"field2\": \"value10\"}', NOW() - INTERVAL '5 hours');\n\n-- Insert more data\nINSERT INTO cache (key, value, inserted_at)\nSELECT 'key' || s,\n       ('{\"field1\": \"value' || s || '\"}')::jsonb,\n       NOW() - (s || ' hours')::interval\nFROM generate_series(1, 25) AS s; \n```", "```\n EXPLAIN ANALYZE SELECT * FROM cache WHERE key = 'key1';\n\nEXPLAIN ANALYZE INSERT INTO cache (key, value, inserted_at)\nVALUES ('new_key', '{\"field1\": \"new_value1\", \"field2\": \"new_value2\"}', NOW()); \n```"]