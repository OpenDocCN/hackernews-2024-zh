["```\n// OnboardingView.swift\n\nimport A11yUtils\nimport SwiftUI\n\nstruct OnboardingView: View {\n\n    @Binding var isLoggedIn: Bool\n\n    var body: some View {\n        NavigationStack {\n            VStack(spacing: 20) { /* ... */ }\n              .padding(.horizontal)\n              .a11yScrollView()\n              .navigationTitle(\"Create account\")\n        }\n    }\n}\n```", "```\nVStack(spacing: 20) {\n    // ...\n    OnboardingReasonsText()\n    Spacer()\n    LoginButtonView()\n}\n```", "```\nVStack(spacing: 20) {\n    OnboardingReasonsText()\n    LoginButtonView()\n        .frame(maxHeight: .infinity, alignment: .bottom)\n}\n```", "```\nText(cat.quote)\n    .font(.body) // this works fine\n```", "```\nImage(systemName: \"heart.circle.fill\")\n    .font(.body) // this also works fine with SFSymbols\n```", "```\nImage(cat.image)\n    .resizable()\n    .aspectRatio(contentMode: .fit)\n    .frame(width: 72, height: 72) // hardcoded size - it won't scale!\n    .clipShape(Circle())\n\nImage(systemName: cat.icon)\n    .resizable()\n    .aspectRatio(contentMode: .fit)\n    .foregroundStyle(.secondary)\n    .frame(width: 24, height: 24) // hardcoded size - it won't scale!\n```", "```\n@ScaledMetric(relativeTo: .largeTitle) private var imageSize: CGFloat = 72\n@ScaledMetric(relativeTo: .body) private var iconSize: CGFloat = 24\n```", "```\nImage(cat.image)\n    .resizable()\n    .aspectRatio(contentMode: .fit)\n    .frame(width: imageSize, height: imageSize) // dynamically scales\n    .clipShape(Circle())\n\nImage(systemName: cat.icon)\n    .resizable()\n    .aspectRatio(contentMode: .fit)\n    .foregroundStyle(.secondary)\n    .frame(width: iconSize, height: iconSize) // dynamically scales\n```", "```\n@Environment(\\.sizeCategory) private var sizeCategory\n\nvar body: some View {\n    if sizeCategory.isAccessibilityCategory {\n        VStack(alignment: .leading, spacing: spacing) {\n            content()\n        }\n        .frame(maxWidth: .infinity, alignment: .leading)\n    } else {\n        HStack(alignment: alignment, spacing: spacing) {\n            content()\n        }\n    }\n}\n```", "```\nvar body: some View {\n    ViewThatFits {\n        HStack(alignment: alignment, spacing: spacing) {\n            content()\n        }\n        VStack(alignment: .leading, spacing: spacing) {\n            content()\n        }.frame(maxWidth: .infinity, alignment: .leading)\n    }\n}\n```", "```\nimport A11yUtils \n\nA11yHStack {\n    Image(cat.image)\n    VStack {\n        A11yHStack {\n            Text(cat.name)\n            Text(\"\\(cat.age) years old\")\n        }\n        HStack {\n            Image(systemName: cat.icon)\n            Text(cat.quote)\n        }\n    }\n}\n```", "```\nImage(\"catKingdom\")\n    .accessibilityLabel(Text(\"My three cats: Cody, Rosie, and Luna\"))\n```", "```\nstruct Cat {\n    // ...\n    let imageDescription: String\n}\n\nImage(cat.image)\n    .accessibilityLabel(Text(cat.imageDescription))\n```", "```\nHStack {\n    Image(systemName: cat.icon)\n    Text(cat.quote)\n}\n.accessibilityElement(children: .combine)\n```", "```\n// AccountView.swift\n\nstruct AccountView: View {\n\n    var body: some View {\n        Section(account.name) {\n            // Image, 2FA Code Text, and Countdown UI ...\n        }\n        .accessibilityRepresentation {\n            VStack {\n                Text(account.name)\n                if let code = account.code {\n                    ForEach(Array(code.enumerated()), id: \\.0) {\n                        Text(String($0.1))\n                    }\n                }\n                if let countdown = account.countdown {\n                    Text(\"Expires in \\(countdown)\")\n                }\n            }.accessibilityElement(children: .combine)\n        }\n    }\n```", "```\nScrollView {\n    LazyVStack(spacing: 24) {\n        ForEach(cats, id: \\.name) {\n            CatView(cat: $0)\n        }\n    }\n}\n```", "```\nList(cats) {\n    CatView(cat: $0)\n        .listRowBackground(Color.clear)\n        .listRowSeparator(.hidden)\n}\n.listStyle(PlainListStyle())\n```"]