["```\nFILE* log_file = fopen(\"log.txt\", \"r\");\nif (!log_file) {\n  return -1;\n}\n\nFILE* info_log_file = fopen(\"info_log.txt\", \"w\");\nif (!info_log_file) {\n  fclose(log_file);\n  return -1;\n}\n\nFILE* warning_log_file = fopen(\"warning_log.txt\", \"w\");\nif (!warning_log_file) {\n  fclose(info_log_file);\n  fclose(log_file);\n  return -1;\n}\n\nFILE* error_log_file = fopen(\"error_log.txt\", \"w\");\nif (!error_log_file) {\n  fclose(warning_log_file);\n  fclose(info_log_file);\n  fclose(log_file);\n  return -1;\n}\n\n// ...\n// code to actually read and write the files goes here.\n// if any operation fails we also need to \"cleanup\" there.\n// ...\n\nfclose(error_log_file);\nfclose(warning_log_file);\nfclose(info_log_file);\nfclose(log_file);\nreturn 0;\n```", "```\n// Go\nlog_file, err := os.Open(\"log.txt\")\nif err != nil {\n  return nil, err\n}\ndefer log_file.Close()\n\ninfo_log_file, err := os.Open(\"info_log.txt\", \"w\")\nif err != nil {\n  return err\n}\ndefer info_log_file.Close()\n\nwarning_log_file, err := os.Open(\"warning_log.txt\", \"w\")\nif err != nil {\n  return err\n}\ndefer warning_log_file.Close()\n\nerror_log_file, err := os.Open(\"error_log.txt\", \"w\")\nif err != nil {\n  return err\n}\ndefer error_log_file.Close()\n\n// ...\n\nreturn nil\n```", "```\n`int result = 0;\nFILE* log_file = fopen(\"log.txt\", \"r\");\nif (!log_file) {\n  result = -1;\n  goto DEFER_0;\n}\n\nFILE* info_log_file = fopen(\"info_log.txt\", \"w\");\nif (!info_log_file) {\n  result = -1;\n  goto DEFER_1;\n}\n\nFILE* warning_log_file = fopen(\"warning_log.txt\", \"w\");\nif (!warning_log_file) {\n  result = -1;\n  goto DEFER_2;\n}\n\nFILE* error_log_file = fopen(\"error_log.txt\", \"w\");\nif (!error_log_file) {\n  result = -1;\n  goto DEFER_3;\n}\n\n// ...\n\nDEFER_4:\n  fclose(error_log_file);\nDEFER_3:\n  fclose(warning_log_file);\nDEFER_2:\n  fclose(info_log_file);\nDEFER_1:\n  fclose(log_file);\nDEFER_0:\n  return result;`\n```", "```\n`int result = 0;\nFILE* log_file = fopen(\"log.txt\", \"r\");\nif (!log_file) {\n  result = -1;\n  goto DEFER_0;\n}\nif (0) {\n  DEFER_1:\n    fclose(log_file);\n    goto DEFER_0;\n}\n\nFILE* info_log_file = fopen(\"info_log.txt\", \"w\");\nif (!info_log_file) {\n  result = -1;\n  goto DEFER_1;\n}\nif (0) {\n  DEFER_2:\n    fclose(info_log_file);\n    goto DEFER_1;\n}\n\nFILE* warning_log_file = fopen(\"warning_log.txt\", \"w\");\nif (!warning_log_file) {\n  result = -1;\n  goto DEFER_2;\n}\nif (0) {\n  DEFER_3:\n    fclose(warning_log_file);\n    goto DEFER_2;\n}\n\nFILE* error_log_file = fopen(\"error_log.txt\", \"w\");\nif (!error_log_file) {\n  result = -1;\n  goto DEFER_3;\n}\nif (0) {\n  DEFER_4:\n    fclose(error_log_file);\n    goto DEFER_3;\n}\n\ngoto DEFER_4;\nDEFER_0:\n  return result;`\n```", "```\n`#define CAT(A, B) A##B\n#define defer_return(I, V) do {goto CAT(DEFER_, I)} while(0)\n#define defer(I, F, P) if(0){CAT(DEFER_, I): F; goto CAT(DEFER_, P)}\n#define run_deferred(I) goto CAT(DEFER_, I); DEFER_0: return result;\n\nint result = 0;\nFILE* log_file = fopen(\"log.txt\", \"r\");\nif (!log_file) {\n  defer_return(0, -1);\n}\ndefer(1, fclose(log_file), 0);\n\nFILE* info_log_file = fopen(\"info_log.txt\", \"w\");\nif (!info_log_file) {\n  defer_return(1, -1);\n}\ndefer(2, fclose(info_log_file), 1);\n\nFILE* warning_log_file = fopen(\"warning_log.txt\", \"w\");\nif (!warning_log_file) {\n  defer_return(2, -1);\n}\ndefer(3, fclose(warning_log_file), 2);\n\nFILE* error_log_file = fopen(\"error_log.txt\", \"w\");\nif (!error_log_file) {\n  defer_return(3, -1);\n}\ndefer(4, fclose(error_log_file), 3);\n\nrun_deferred();`\n```", "```\n`#define defer_return do {goto _d_start;} while(0)\n#define defer(I, F) {_d=I; if(0){case I: _d--; F; goto _d_start;}}\n#define defer_block int _d = -1; _d_start: switch(_d){case -1:\n#define run_deferred() goto _d_start;}\n\nint result = 0;\ndefer_block {\n  FILE* log_file = fopen(\"log.txt\", \"r\");\n  if (!log_file) {\n    result = -1; defer_return;\n  }\n  defer(1, fclose(log_file));\n\n  FILE* info_log_file = fopen(\"info_log.txt\", \"w\");\n  if (!info_log_file) {\n    result = -1; defer_return;\n  }\n  defer(2, fclose(info_log_file));\n\n  FILE* warning_log_file = fopen(\"warning_log.txt\", \"w\");\n  if (!warning_log_file) {\n    result = -1; defer_return;\n  }\n  defer(3, fclose(warning_log_file));\n\n  FILE* error_log_file = fopen(\"error_log.txt\", \"w\");\n  if (!error_log_file) {\n    result = -1; defer_return;\n  }\n  defer(4, fclose(error_log_file));\n} run_deferred();\nreturn result;`\n```", "```\ndefer_block {...} run_deferred();\n```", "```\ndo {...} while(...);\n```", "```\n#define defer(F) {int _d_p = _d; \\ \n  _d = __LINE__; if(0){case __LINE__: _d = _d_p; F; goto _d_start;}}\n```", "```\n#define defer_block int _d = 0; \\ \n  _d_start: switch(_d){case 0: _d = -1;\n```", "```\n`#define _DEFER_SNAPSHOT(A) {int _d_p = _d; \\ \n  _d = __LINE__; if(0){case __LINE__: _d = _d_p; A;}}\n#define defer(F) _DEFER_SNAPSHOT(F; goto _d_start)\n#define defer_scope\n  do { _DEFER_SNAPSHOT(if(_d_r){goto _d_start;} else {continue;})`\n```", "```\n`#define defer_break { goto _d_start; }\n#define defer_return { _d_r = 1; goto _d_start; }`\n```", "```\n`#define run_deferred() goto _d_start; } while (0)`\n```", "```\n`#define defer_block int _d_r = 0; int _d = 0; \\ \n  _d_start: switch(_d){case 0: _d = -1;`\n```", "```\n`int result = 0;\ndefer_block {\n  FILE* log_file = fopen(\"log.txt\", \"r\");\n  if (!log_file) {\n    result = -1; defer_return;\n  }\n  defer(fclose(log_file));\n\n  defer_scope {\n    FILE* info_log_file = fopen(\"info_log.txt\", \"w\");\n    if (!info_log_file) {\n      result = -1; defer_return;\n    }\n    defer(fclose(info_log_file));\n\n    FILE* warning_log_file = fopen(\"warning_log.txt\", \"w\");\n    if (!warning_log_file) {\n      result = -1; defer_return;\n    }\n    defer(fclose(warning_log_file));\n\n  } run_deferred();\n\n  FILE* error_log_file = fopen(\"error_log.txt\", \"w\");\n  if (!error_log_file) {\n    result = -1; defer_return;\n  }\n  defer(fclose(error_log_file));\n} run_deferred();\nreturn result;`\n```"]