["```\n from django.conf import settings\n\nRELEVANT_FILES = [\"./pyproject.toml\", \"./pytest.ini\", \"./modules.txt\"]\n\ndef pytest_generate_tests(metafunc):\n    parameters = []\n    for filename in RELEVANT_FILES:\n        for module in settings.BUTTONDOWN_APPS:\n            parameters.append((module, filename))\n    metafunc.parametrize(\"module,filename\", parameters)\n\ndef test_module_is_present_in_pytest(module: str, filename: str) -> None:\n    assert module in open(filename).read()\n```", "```\nimport json\n\nENUMS_FILENAME = \"../shared/enums.json\"\nOPENAPI_SPEC_FILENAME = \"assets/autogen/openapi.json\"\n\nRAW_ENUMS = json.load(open(ENUMS_FILENAME))\nRAW_OPENAPI_SPEC = json.load(open(OPENAPI_SPEC_FILENAME))\n\ndef pytest_generate_tests(metafunc):\n    parameters = []\n    enums = RAW_ENUMS.keys()\n    for enum_name in enums:\n        extant_enum_values = RAW_OPENAPI_SPEC[\"components\"][\"schemas\"][enum_name][\n            \"enum\"\n        ]\n        for enum_value in extant_enum_values:\n            parameters.append((enum_name, enum_value))\n    metafunc.parametrize(\"enum_name,enum_value\", parameters)\n\nKNOWN_MISSING_PAIRS = [\n    (\"CreateSubscriberErrorCode\", \"metadata_invalid\"),\n    (\"ExternalFeedAutomationCadence\", \"daily\"),\n    (\"UpdateSubscriberErrorCode\", \"email_already_exists\"),\n\n]\n\ndef test_enum_is_exhaustively_documented(enum_name: str, enum_value: str) -> None:\n    assert (\n        enum_name in RAW_ENUMS\n    ), f\"Enum {enum_name} is not documented in {ENUMS_FILENAME}\"\n    if (enum_name, enum_value) in KNOWN_MISSING_PAIRS:\n        return\n    assert (\n        enum_value in RAW_ENUMS[enum_name]\n    ), f\"Potential value {enum_value} of enum {enum_name} is not documented in {ENUMS_FILENAME}\"\n```"]