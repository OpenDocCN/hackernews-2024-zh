- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:31:40'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:31:40
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Write code top-down
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自顶向下编写代码
- en: 来源：[https://www.teamten.com/lawrence/programming/write-code-top-down.html](https://www.teamten.com/lawrence/programming/write-code-top-down.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.teamten.com/lawrence/programming/write-code-top-down.html](https://www.teamten.com/lawrence/programming/write-code-top-down.html)
- en: Write code top-down
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自顶向下编写代码
- en: 'There are two ways to architect a program and write code: top-down and bottom-up.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法来设计程序和编写代码：自顶向下和自底向上。
- en: With *top-down* design you start with a vision of the whole program, perhaps
    what some of the components are, and how they fit together, but the components
    themselves are still fuzzy. You implement a high-level version of the program
    that calls simplistic versions of the components (that might do nothing) and slowly
    work your way downward into the details of each component.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*自顶向下*设计让你从整个程序的愿景开始，也许是一些组件的概念，以及它们如何组合在一起，但是组件本身仍然模糊不清。你实现一个调用组件简化版本（可能什么也不做）的高级程序，并逐步深入到每个组件的细节中。'
- en: With *bottom-up* design you start with the components, which you see clearly,
    but it’s not yet clear how they fit together. You write the components individually,
    unit-test them, then assemble them into a whole program.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*底向上*设计让你从组件开始，这些组件你能清楚地看到，但它们如何拼凑在一起尚不明确。你分别编写这些组件，对它们进行单元测试，然后将它们组装成一个完整的程序。'
- en: The correct way to architect and write a program is top-down. This is not a
    matter of taste or preference. Bottom-up design is fundamentally busted and you
    shouldn’t use it. Every system I’ve been involved in that used top-down succeeded
    and those that used bottom-up failed. Edsger Dijkstra wrote an [entire monologue](http://www.cs.utexas.edu/users/EWD/ewd02xx/EWD249.PDF)
    about this. I’ve never seen an architect advocate bottom-up.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的程序设计和编写方式是自顶向下的。这不是品味或偏好的问题。自底向上的设计基本上是有缺陷的，你不应该使用它。我参与过的每个使用自顶向下方法的系统都取得了成功，而使用自底向上方法的系统都失败了。Edsger
    Dijkstra写了一篇[完整的独白](http://www.cs.utexas.edu/users/EWD/ewd02xx/EWD249.PDF)来探讨这个问题。我从未见过一位架构师提倡自底向上。
- en: 'When you write bottom-up code, you’re writing the components before you understand
    how they fit together. There are two problems with this, a small one and a large
    one:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写自底向上的代码时，你是在理解它们如何组合之前编写组件。这种方式有两个问题，一个小问题和一个大问题：
- en: The small problem is that the components might not be right for the job. The
    API may not be right, or perhaps the way the component works isn’t right, or maybe
    the component isn’t needed at all. By writing the component first, you risk wasting
    time.
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小问题在于，这些组件可能不适合这个任务。API可能不正确，或者组件的工作方式可能不正确，或者根本不需要这个组件。通过首先编写组件，你有可能浪费时间。
- en: The large problem, and this is the killer of bottom-up programming, is that
    you end up with programs that are *too complex*. As you develop a component, you’re
    not sure how it’ll be used, so you’re tempted to over-generalize. General solutions
    are more complex than specific ones. When the component is finally plugged into
    the whole program, and only a specific use is needed, the extra complexity is
    never ripped out; it stays there forever, adding code, weight, and complexity
    unnecessarily. And complexity is what kills large programs.
  id: totrans-split-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*底向上*编程的主要问题是，你最终得到的程序可能会*过于复杂*。在开发一个组件时，你不确定它将如何使用，因此很容易陷入过度泛化的诱惑。通用的解决方案比具体的解决方案更复杂。当最终将组件插入整个程序时，只需要特定用途，多余的复杂性永远不会被剔除；它将永远存在，不必要地增加了代码、负担和复杂性。而复杂性正是导致大型程序失败的原因。'
- en: Let’s say that you’re designing a large website, an online shop for a large
    corporation. With top-down programming you start by (for example) importing Tomcat,
    writing a simple mostly-empty servlet, and having it write “Hello world!” You
    now have an end-to-end website. You can compile it, try it, and demo it. You can
    even deploy it to production. It’s buggy, since it displays “Hello world!” instead
    of items that customers can purchase. You slowly fix that bug by adding a template
    engine and a simple home page template. Then you add a database call to get a
    set of items, which you list in the template. Then you add a shopping cart. Then
    a way to sign in. At every step you have a shippable incomplete site, and at every
    step the system is *as simple as it can be* to do what it’s doing. It’s clear
    what to do next, and it’s clear what’s needed of the next component.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在设计一个大型网站，一个大公司的在线商店。通过自顶向下编程，你可以从（例如）导入Tomcat开始，编写一个简单的几乎空白的servlet，并让它写“Hello
    world!”。现在你有了一个端到端的网站。你可以编译它，尝试它，并演示它。你甚至可以将其部署到生产环境。它有bug，因为它显示的是“Hello world!”而不是客户可以购买的商品。你通过添加一个模板引擎和一个简单的主页模板逐步修复这个bug。然后，你添加一个数据库调用来获取一组商品，并在模板中列出它们。然后添加一个购物车。然后是登录方式。每一步都有一个可运行但不完整的站点，并且每一步系统*做的事情都尽可能简单*。下一步该做什么是明确的，下一个组件需要什么也是明确的。
- en: With bottom-up programming, you start thinking about the components you’ll end
    up with. You’ll need a way to decide which page is being displayed, a way to get
    data from back-end services, and a way to render templates. Let’s look at templates.
    Which template engine will you use? Not sure yet, so better make it pluggable
    with an abstraction layer. How will the template know where to write its output?
    You haven’t even chosen a web container yet. Better add an abstraction layer for
    that, and for the inputs to the template. How will you get information about the
    request, such as the page type, cookies, language, device type, etc.? Better create
    a pluggable extensible system for gathering arbitrary data and storing it in a
    generic context object! When you go to put all these pieces together, they each
    do too much, are too complex, and are too hard to understand and extend. Nearly
    all of the generality ends up unused, and unremoved, forever.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 采用自底向上的编程方法，你开始考虑最终会得到哪些组件。你将需要一种方法来决定显示哪个页面，一种从后端服务获取数据的方法，以及一种渲染模板的方法。让我们来看看模板。你将使用哪种模板引擎？还不确定，所以最好用一个抽象层将其做成可插拔的。模板如何知道在哪里写入其输出？你甚至还没有选择Web容器。最好为此添加一个抽象层，并为模板的输入也添加一个抽象层。如何获取关于请求的信息，例如页面类型、cookie、语言、设备类型等？最好创建一个可插拔的可扩展系统，用于收集任意数据并将其存储在通用上下文对象中！当你开始将所有这些组件放在一起时，它们每个都做得太多、太复杂，而且太难理解和扩展。几乎所有的普遍性最终都未被使用，永远未被移除。
- en: Smart engineers are naturally attracted to bottom-up programming. Designing
    a component is a small tractable task that can be finished and called *done*.
    You’re creating a perfect, beautiful, reusable jewel. All engineers really want
    to *do* is write components. The top-down approach doesn’t have this nice property;
    the product is forever incomplete. Yes, top-down can be less appealing to some
    people. Do it anyway.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 聪明的工程师自然倾向于自底向上的编程。设计一个组件是一个小而可行的任务，可以完成并称之为*完成*。你正在创建一个完美的、美丽的、可重用的宝石。所有工程师真正想要*做的*就是编写组件。自顶向下的方法没有这种好的特性；产品永远不完整。是的，对某些人来说，自顶向下可能不那么吸引人。不管怎样，也要去做。
- en: Large companies are especially prone to unconsciously using a bottom-up approach.
    It takes a strong personality to take responsibility for the application top-down,
    to build enough of it to see the components, then farm out the components to different
    teams. It’s easier, organizationally, to guess at the components, farm them out,
    and hope that they’ll integrate in the end. This is why so many large projects
    fail, why so many of these components are trashed before they’re ever used, and
    why large companies can’t ever seem to make much progress.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 大公司特别容易无意识地采用自底向上的方法。需要一个强大的个性来承担自顶向下应用的责任，建立足够的应用以查看组件，然后将组件分派给不同的团队。在组织上，猜测组件、分派它们并希望它们最终集成起来更容易。这就是为什么如此多的大型项目失败，为什么这些组件在使用之前就被废弃，以及为什么大公司似乎永远无法取得多少进展。
- en: For the individual programmer, modern tools also encourage bottom-up programming.
    In IDEs like Eclipse, for example, writing code is easier if the types and methods
    you’re calling are already defined. But if you defined those first, then you’re
    doing bottom-up programming! Writing top-down code in an IDE causes it to bleed
    red until you can get around to implementing those methods. There’s persistent
    pressure to write the called function first.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于个体程序员而言，现代工具还鼓励自底向上的编程方式。例如，在像Eclipse这样的集成开发环境中，如果你要调用的类型和方法已经定义好，编写代码会更容易。但如果你首先定义了这些内容，那么你就是在进行自底向上的编程！在IDE中编写自顶向下的代码会导致其出现错误提示，直到你实现这些方法为止。在这种情况下，有持续的压力让你先编写被调用的函数。
- en: And finally, there’s unit testing. When writing components bottom-up, there’s
    no application to try them in, so you’re forced to write unit tests to make sure
    they do the right thing. This is good. With top-down programming, you can just
    run the application to see if the component works. There’s less pressure to write
    tests, and in fact the component may not be written in a way that makes tests
    easy to write. That’s an unfortunate side-effect of top-down programming, but
    I’m not generally bullish on unit tests anyway; most of them don’t provide any
    value. (See [Mostly avoid unit tests](mostly-avoid-unit-tests.html).) For those
    tests that would provide value, write them anyway, despite the fact that the component
    is working for the application as it is now.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有单元测试。当自底向上编写组件时，没有应用程序可以尝试它们，因此你被迫编写单元测试以确保它们正常工作。这是好事。而自顶向下编程时，你可以直接运行应用程序来查看组件是否正常工作。这时编写测试的压力较小，事实上，组件可能无法以便于编写测试的方式编写。这是自顶向下编程的一个不幸副作用，但总的来说我并不看好单元测试；其中大多数并不提供任何价值（参见[大多数情况下避免单元测试](mostly-avoid-unit-tests.html)）。对于那些有价值的测试，无论如何都要编写它们，尽管组件目前已经在应用程序中正常工作。
- en: At every level there’s pressure to do bottom-up programming. Avoid it. Instead,
    start at the top, with `main()` or its equivalent, and write it as if you had
    all the parts already written. Get that to look right. Stub out or hard-code the
    parts until you can get it to compile and run. Then slowly move your way down,
    *keeping everything as brutally simple as you can*. Don’t write a line of code
    that isn’t solving a problem you have *right now*. Then you may have a chance
    of succeeding in writing a large, working, long-lived program.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个层次都存在自底向上编程的压力。要避免这种情况。相反，从顶部开始，从`main()`函数或其等效部分开始编写代码，并假设所有部分都已经编写好。确保代码看起来正确。在你能够编译和运行代码之前，用桩代码或硬编码的方式填充部分内容。然后慢慢向下移动，*尽可能保持简单和直接*。不要编写不解决当前问题的代码。只有这样，你才有可能成功地编写出一个大型、运行良好且长寿的程序。
