["```\nlet (a, 2) = (1, 2); // Does not compile  error[E0005]: refutable pattern in local binding  --> src/example.rs:3:9 | 3 |     let (a, 2) = (1, 2);  |         ^^^^^^ patterns `(_, i32::MIN..=1_i32)` and `(_, 3_i32..=i32::MAX)` not covered | = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant \n```", "```\nlet (a, 2) = (1, 1+1); // Does not compile either \n```", "```\nif let (a, 2) = (1, 2) {  println!(\"Made it, a is {}\", a); }   // prints \"Made it, a is 1\" \n```", "```\nif let (a, 2) = (1, 2) &&  let (b, 4) = (3, 4) && println!(\"Made it, a = {}, b = {}\", a, b); }   // prints \"Made it, a = 1, b = 3\" \n```", "```\nif let (a, 2) = (1, 2) &&  let (c, 4) = (3, 4) && b == a + 2 { println!(\"Made it, a = {}, b = {}\", a, b); }   // still prints \"Made it, a = 1, b = 3\" \n```", "```\nlet the_data = vec![  (1, 2),  (2, 2)  (2, 3),  (5, 7),  (8, 8)]; \n```", "```\nfor (a, b) in the_data {  println!(\"({}, {})\", a, b); }   // prints // (1, 2) // (2, 3) // (5, 7) // (8, 8) \n```", "```\nwhile let Some((a, b)) = iterator.next() && *b == *a + 1  {  println!(\"({}, {})\", a, b); }   // prints // (1, 2) // (2, 3) \n```", "```\nwhile let Some((a, a + 1)) = iterator.next() { // How cool would it be if this worked?  println!(\"({}, {})\", a, b); } \n```", "```\nerror: expected a pattern, found an expression  --> src/example.rs:11:24 | 11 |     while let Some((a, a + 1)) = iterator.next() {  |                        ^^^^^ arbitrary expressions are not allowed in patterns \n```", "```\nmy(1) = (1, 2); my(2) = (2, 3); my(3) = (5, 7); my(4) = (8, 8);   match my(x) -> (y1, y1 + 1), return y1 \n```", "```\nmatch my(_) -> (left, middle), my(_) -> (middle, right), return left, middle, right \n```"]