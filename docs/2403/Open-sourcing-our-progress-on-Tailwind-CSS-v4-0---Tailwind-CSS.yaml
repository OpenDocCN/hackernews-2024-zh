- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:39:50'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Open-sourcing our progress on Tailwind CSS v4.0 - Tailwind CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://tailwindcss.com/blog/tailwindcss-v4-alpha](https://tailwindcss.com/blog/tailwindcss-v4-alpha)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Last summer at Tailwind Connect [I shared a preview of Oxide](https://www.youtube.com/watch?v=CLkxRnRQtDE&t=2146s)
    — a new high-performance engine for Tailwind CSS that we’ve been working on, designed
    to simplify the developer experience and take advantage of how the web platform
    has evolved in recent years.
  prefs: []
  type: TYPE_NORMAL
- en: The new engine was originally going to ship as a v3.x release, but even though
    we’re committed to backwards compatibility, this feels so clearly like a new generation
    of the framework that it deserves to be v4.0.
  prefs: []
  type: TYPE_NORMAL
- en: It’s still early and we’ve got [a lot of work to do](/blog/tailwindcss-v4-alpha#roadmap-to-v4-0),
    but today we’re [open-sourcing our progress](https://github.com/tailwindlabs/tailwindcss/tree/next)
    and tagging the first public [v4.0.0-alpha](https://www.npmjs.com/package/tailwindcss/v/4.0.0-alpha.3)
    so you can start experimenting with it and help us get to a stable release later
    this year.
  prefs: []
  type: TYPE_NORMAL
- en: I’ll try keep it brief to save some of the excitement for the stable release,
    but if you like to play with very early and experimental stuff, there should be
    plenty of information here to get you going.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: The new engine is a ground-up rewrite, using everything we know about the framework
    now to better model the problem space, making things faster with a lot less code.
  prefs: []
  type: TYPE_NORMAL
- en: '**Up to 10x faster** — we can do a full build of the Tailwind CSS website in
    105ms instead of 960ms, or our Catalyst UI kit in 55ms instead of 341ms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Smaller footprint** — the new engine is over 35% smaller installed, even
    with the heavier native packages we ship like the parts we’ve rewritten in Rust
    and Lightning CSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rust where it counts** — we’ve migrated some of the most expensive and parallelizable
    parts of the framework to Rust, while keeping the core of the framework in TypeScript
    for extensibility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**One dependency** — the only thing the new engine depends on is Lightning
    CSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom parser** — we wrote our own CSS parser and designed our own data structures
    tailored to our needs, making parsing over 2x as fast for us as it was with PostCSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Tailwind CSS v4 isn’t just a plugin anymore — it’s an all-in-one tool for processing
    your CSS. We’ve integrated [Lightning CSS](https://lightningcss.dev/) directly
    into the framework so you don’t have to configure anything about your CSS pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '**Built-in `@import` handling** — no need to setup and configure a tool like
    `postcss-import`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Built-in vendor prefixing** — you don’t have to add `autoprefixer` to your
    projects anymore.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Built-in nesting support** — no plugins needed to flatten nested CSS, it
    works out of the box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Syntax transforms** — modern CSS features like `oklch()` colors and media
    query ranges are transpiled to syntax with better browser support.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’re still shipping a PostCSS plugin, but we’re also exploring first-party
    bundler plugins, and we’re shipping an official Vite plugin with this first alpha
    release that you can try out today.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: We’re looking into the future with Tailwind CSS v4 and trying to build a framework
    that’s going to feel cutting edge for years to come.
  prefs: []
  type: TYPE_NORMAL
- en: '**Native cascade layers** — we’re using real `@layer` rules now, which solves
    a ton of specificity problems we’ve wrestled with in the past.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Explicitly defined custom properties** — we use `@property` to define our
    internal custom properties with proper types and constraints, making it possible
    to do things like transition background gradients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using `color-mix` for opacity modifiers** — making it easier than ever to
    use our opacity modifier syntax when using CSS variables for colors, or even adjusting
    the opacity of `currentColor`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container queries in core** — we’ve added support for container queries directly
    to core, with new `@min-*` and `@max-*` variants to support container query ranges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’re also working on refreshing our color palette with wide gamut colors, and
    introducing support for other modern CSS features like `@starting-style`, anchor
    positioning, and more.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: The new architecture makes it possible to compose together variants that act
    on other selectors, like `group-*`, `peer-*`, `has-*`, and a new `not-*` variant
    we’re introducing for v4.
  prefs: []
  type: TYPE_NORMAL
- en: 'In earlier releases, variants like `group-has-*` were explicitly defined in
    the framework, but now `group-*` can compose with the existing `has-*` variant,
    which can compose with other variants like `focus`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There’s no limits to this composability, and you can even write stuff like `group-not-has-peer-not-data-active:underline`
    if for some horrible reason that’s what you need to do.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll notice that at least in these early alpha releases, it’s not even possible
    to configure your `content` paths. For most projects, you’re never going to need
    to do this ever again — Tailwind just finds your template files for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'We do this using one of two ways depending on how you’ve integrated Tailwind
    into your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using the PostCSS plugin or the CLI**, Tailwind will crawl your entire project
    looking for template files, using a bunch of heuristics we’ve built in to keep
    things fast, like not crawling directories that are in your `.gitignore` file,
    and ignoring binary file formats.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using the Vite plugin**, we rely on the module graph. This is amazing because
    we know exactly what files you’re actually using, so it’s maximally performant,
    and with no false positives or negatives. We’re hoping to expand this approach
    outside of the Vite ecosystem with other bundler plugins in the future.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll introduce a way to configure content paths explicitly in the future for
    sure, but we’re curious to see how well this automatic approach works for everyone
    — it’s working awesome in our own projects.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: A major goal of Tailwind CSS v4.0 is making the framework feel CSS-native, and
    less like a JavaScript library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve installed it, you add it to your project with a regular CSS `@import`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: 'And instead of setting up all of your customizations in a JavaScript configuration
    file, you just use CSS variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The special `@theme` directive tells Tailwind to make new utilities and variants
    available based on those variables, letting you use classes like `3xl:text-neon-lime`
    in your markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding new CSS variables behaves like `extend` did in earlier versions of the
    framework, but you can override a whole set of variables by clearing the namespace
    with syntax like `--color-*: initial` before defining all of your custom values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We’re still fine-tuning some of the naming conventions, but you can [explore
    the default theme on GitHub](https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/theme.css)
    to see what’s available to customize.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t want to explicitly clear the default theme and would rather start
    from scratch, you can import `"tailwindcss/preflight"` and `"tailwindcss/utilities"`
    directly to skip importing the default theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We also make all of your theme values available as native CSS variables in
    your custom CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This makes it easy to reference any of your theme values in arbitrary values
    without needing the `theme()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'It also makes it possible to use your theme values when working with UI libraries
    like Framer Motion, without having to use the `resolveConfig()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'We don’t take breaking changes lightly, but there are a few things we’re doing
    differently in v4 so far that are worth sharing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Removed deprecated utilities** — we’ve removed utilities we stopped documenting
    a long time ago like `text-opacity-*`, `flex-grow-*`, and `decoration-slice` in
    favor of their modern replacements like `text-{color}/*`, `grow-*`, and `box-decoration-slice`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PostCSS plugin and CLI are separate packages** — the main `tailwindcss` package
    doesn’t include these anymore since not everyone needs them, instead they should
    be installed separately using `@tailwindcss/postcss` and `@tailwindcss/cli`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No default border color** — the `border` utility used to default to `gray-200`,
    but now it defaults to `currentColor` like the browser does. We made this change
    to make it harder to accidentally introduce a wrong gray into your project if
    you’re using `zinc` or `slate` or something else as your main gray.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rings are 1px by default** — the `ring` utility used to be a 3px blue ring
    by default, now it’s a 1px ring using `currentColor`. We find ourselves using
    the `ring-*` utilities as an alternative to borders in our projects, and using
    `outline-*` for focus rings, so we think making things consistent here is a helpful
    change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a handful of other really low-level implementation detail changes
    that might surface in some way in your projects, but nothing deliberate like these
    changes. If you bump into anything surprising, let us know.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This new engine is a ground-up rewrite, and up until now we’ve been focused
    entirely on this reimagined developer experience using the new configuration approach.
  prefs: []
  type: TYPE_NORMAL
- en: '**We put an enormous amount of value in backwards compatibility**, and that’s
    where the bulk of the work lies before we can tag a stable v4.0 release later
    this year.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Support for JavaScript configuration files** — reintroducing compatibility
    with the classic `tailwind.config.js` file to make migrating to v4 easy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Explicit content path configuration** — making it possible to tell Tailwind
    exactly where your templates are when automatic content detection isn’t good enough
    for your setup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Support for other dark modes** — right now we only support dark mode using
    media queries, and still need to reimplement the selector and variant strategies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugins and custom utilities** — we don’t have support for plugins, or for
    writing custom utilities that automatically work with variants yet. Obviously
    we will make this work before a stable release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prefix support** — there’s no way to configure a prefix for your classes
    yet, but we’ll bring it back for sure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safelists and blocklists** — can’t force Tailwind to generate certain classes
    or prevent it from generating other classes yet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Support for `important` configuration** — there’s no way to make utilities
    all generate with `!important` right now, but we plan to implement it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Support for the `theme()` function** — this isn’t needed for new projects
    because you can use `var()` now, but we’ll implement it for backwards compatibility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standalone CLI** — we haven’t worked on a standalone CLI for the new engine
    yet, but will absolutely have it before the v4.0 release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aside from that, I’m sure we’ll find a lot of bugs to fix, some exciting new
    CSS features to sneak in, and refine some of these new APIs that need some more
    polish before a proper release.
  prefs: []
  type: TYPE_NORMAL
- en: I don’t want to make promises on a specific release timeline, but I’d personally
    love to mark v4.0 as stable before the summer holiday season kicks in.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: We’ve tagged a couple alpha releases already, and you can start playing with
    it in your projects today.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using the Tailwind CSS IntelliSense extension for VS Code, make sure
    you switch to the prerelease version from the extension page, and if you’re using
    our Prettier plugin, make sure you install the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: If you find an issue, please [let us know on GitHub](https://github.com/tailwindlabs/tailwindcss/issues/new/choose).
    We really want this thing to be bullet-proof before we tag a stable release and
    reporting any problems you find will help us a lot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Tailwind CSS v4 alpha and our new Vite plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add our plugin to your `vite.config.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, import Tailwind in your main CSS file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Tailwind CSS v4 alpha and the separate PostCSS plugin package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add our plugin to your `postcss.config.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, import Tailwind in your main CSS file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Tailwind CSS v4 alpha and the separate CLI package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, import Tailwind in your main CSS file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, compile your CSS using the CLI tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
