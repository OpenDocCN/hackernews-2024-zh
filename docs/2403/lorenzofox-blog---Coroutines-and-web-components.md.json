["```\nfunction* someComponent({$host}) {\n    while (true) {\n        const {content = ''} = yield;\n        $host.textContent = content;\n    }\n}\n```", "```\nconst createComponent = (generator) => ({$host}) => {\n    const gen = generator({$host});\n    gen.next(); \n    return (state = {}) => gen.next(state);\n};\n\nconst HelloWorldComponent = createComponent(function* ({$host}) {\n    while (true) {\n        const {name = ''} = yield;\n        $host.textContent = `hello ${name}`;\n    }\n});\n\nconst render = HelloWorldComponent({\n    $host: div\n});\n\nrender({name: 'Laurent'});\nrender({name: 'Bernadette'});\n```", "```\nimport {render, html} from 'lit-element';\n\nconst HelloWorldComponent = createComponent(function* ({$host}) {\n    while (true) {\n        const {name=''} = yield\n        const template = html`<p>hello ${name}</p>`;\n        render($host, template);\n    }\n});\n```", "```\nimport {html} from 'lit-element';\n\nconst template = ({name = ''} = {}) => html`<p>hello ${name}</p>`;\n```", "```\nimport {render} from 'lit-element';\n\nconst withView = (templateFn) => function* ({$host}) {\n    while (true) {\n        render($host, templateFn(yield));\n    }\n};\n\nconst HelloWorldComponent = createComponent(withView(template));\n```", "```\n({name}) => html`<p>hello ${name}</p>`; \n```", "```\nconst createComponent = (generator) => ({$host}) => {\n    const gen = generator({$host});\n    gen.next();\n    $host.render = (state = {}) => gen.next(state);\n    return $host;\n};\n```", "```\nconst CountClick = createComponent(function *({$host}){\n   let clickCount = 0;\n\n   $host.addEventListener('click', () => {\n       clickCount+=1;\n       $host.render();\n   });\n\n   while(true) {\n       $host.textContent = `I have been clicked ${clickCount} time(s)`\n       yield;\n   }\n});\n```", "```\nconst countClickable = (view) => function *({$host}) {\n    let clickCount = 0;\n\n    $host.addEventListener('click', () => {\n        clickCount+=1;\n        $host.render({count: clickCount});\n    });\n\n    yield* view({$host}); \n}\n```", "```\nconst CountClick = createComponent(countClickable(function* ({$host}) {\n    while (true) {\n        const {count = 0} = yield;\n        $host.textContent = `I have been clicked ${count} time(s)`;\n    }\n}));\n```", "```\ncustomElements.define('hello-world', class extends HTMLElement {\n    connectedCallback() {\n        this.textContent = `hello ${this.getAttribute('name')}`\n    }\n}) \n```", "```\n<hello-world name=\"Laurent\"></hello-world>\n```", "```\nconst define = (tag, gen) => {\n    customElements.define(tag, class extends HTMLElement {\n        #loop;\n\n        constructor() {\n            super();\n            this.#loop = gen.bind(this)({\n                $host: this\n            });\n            this.render = this.render.bind(this);\n            this.#loop.next();\n        }\n\n        connectedCallback() {\n            this.render();\n        }\n\n        render(state = {}) {\n            this.#loop.next(state);\n        }\n\n    });\n};\n\ndefine('hello-world', function* ({$host}) {\n    while(true) {\n        yield;\n        $host.textContent = `hello ${$host.getAttribute('name')}`\n    }\n});\n```", "```\nfunction* comp({$host}) {\n\n    console.log('I am being instantiated');\n\n    yield;\n\n    console.log('Iam being mounted');\n    $host.textContent = 'I have just been mounted';\n\n    yield;\n\n    while (true) {\n        console.log('I am being rendered');\n        $host.textContent = `hello ${$host.getAttribute('name')}`;\n        yield 'I have been rendered';\n    }\n}\n```", "```\nconst define = (tag, gen) => {\n    customElements.define(tag, class extends HTMLElement {\n        #loop;\n\n        constructor() {\n            super();\n            this.#loop = gen.bind(this)({\n                $host: this\n            });\n            this.render = this.render.bind(this);\n            this.#loop.next();\n        }\n\n        connectedCallback() {\n            this.render();\n        }\n\n        disconnectedCallback() {\n            this.#loop.return();\n        }\n\n        render(state = {}) {\n            this.#loop.next(state);\n        }\n\n    });\n};\n\nfunction* comp({$host}) {\n\n    console.log('I am being instantiated');\n\n    yield;\n\n    console.log('Iam being mounted');\n    $host.textContent = 'I have just been mounted'\n\n    yield;\n\n    try {\n        while (true) {\n            console.log('I am being rendered');\n            $host.textContent = `hello ${$host.getAttribute('name')}`;\n            yield;\n        }\n    } finally {\n        console.log('cleanup here !!!');\n    }\n}\n```", "```\nfunction* comp({$host}) {\n    while (true) {\n        console.log('I am being rendered');\n\n        $host.render(); \n\n        $host.textContent = `hello ${$host.getAttribute('name')}`;\n        yield;\n    }\n}\n```"]