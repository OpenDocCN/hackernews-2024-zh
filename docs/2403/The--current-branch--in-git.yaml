- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:35:00'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: The "current branch" in git
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://jvns.ca/blog/2024/03/22/the-current-branch-in-git/](https://jvns.ca/blog/2024/03/22/the-current-branch-in-git/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hello! I know I just wrote [a blog post about HEAD in git](https://jvns.ca/blog/2024/03/08/how-head-works-in-git/),
    but I’ve been thinking more about what the term “current branch” means in git
    and it’s a little weirder than I thought.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: four possible definitions for “current branch”
  id: totrans-split-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s what’s in the file **`.git/HEAD`**. This is how the [git glossary](https://git-scm.com/docs/gitglossary#def_HEAD)
    defines it.
  id: totrans-split-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It’s what **`git status`** says on the first line
  id: totrans-split-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It’s what you most recently **checked out** with `git checkout` or `git switch`
  id: totrans-split-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It’s what’s in your shell’s **git prompt**. I use [fish_git_prompt](https://fishshell.com/docs/current/cmds/fish_git_prompt.html)
    so that’s what I’ll be talking about.
  id: totrans-split-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I originally thought that these 4 definitions were all more or less the same,
    but after chatting with some people on Mastodon, I realized that they’re more
    different from each other than I thought.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: So let’s talk about a few git scenarios and how each of these definitions plays
    out in each of them. I used git version `2.39.2 (Apple Git-143)` for all of these
    experiments.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: 'scenario 1: right after `git checkout main`'
  id: totrans-split-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here’s the most normal situation: you check out a branch.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: '`.git/HEAD` contains `ref: refs/heads/main`'
  id: totrans-split-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`git status` says `On branch main`'
  id: totrans-split-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The thing I most recently checked out was: `main`'
  id: totrans-split-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'My shell’s git prompt says: `(main)`'
  id: totrans-split-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this case the 4 definitions all match up: they’re all `main`. Simple enough.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: 'scenario 2: right after `git checkout 775b2b399`'
  id: totrans-split-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let’s imagine I check out a specific commit ID (so that we’re in “detached
    HEAD state”).
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: '`.git/HEAD` contains `775b2b399fb8b13ee3341e819f2aaa024a37fa92`'
  id: totrans-split-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`git status` says `HEAD detached at 775b2b39`'
  id: totrans-split-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The thing I most recently checked out was `775b2b399`
  id: totrans-split-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: My shell’s git prompt says `((775b2b39))`
  id: totrans-split-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, these all basically match up – some of them have truncated the commit
    ID and some haven’t, but that’s it. Let’s move on.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: 'scenario 3: right after `git checkout v1.0.13`'
  id: totrans-split-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What if we’ve checked out a tag, instead of a branch or commit ID?
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: '`.git/HEAD` contains `ca182053c7710a286d72102f4576cf32e0dafcfb`'
  id: totrans-split-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`git status` says `HEAD detached at v1.0.13`'
  id: totrans-split-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The thing I most recently checked out was `v1.0.13`
  id: totrans-split-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: My shell’s git prompt says `((v1.0.13))`
  id: totrans-split-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now things start to get a bit weirder! `.git/HEAD` disagrees with the other
    3 indicators: `git status`, the git prompt, and what I checked out are all the
    same (`v1.0.13`), but `.git/HEAD` contains a commit ID.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: 'The reason for this is that git is trying to help us out: commit IDs are kind
    of opaque, so if there’s a tag that corresponds to the current commit, `git status`
    will show us that instead.'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Some notes about this:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: If we check out the commit by its ID (`git checkout ca182053c7710a286d72`) instead
    of by its tag, what shows up in `git status` and in my shell prompt are exactly
    the same – git doesn’t actually “know” that we checked out a tag.
  id: totrans-split-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: it looks like you can find the tags matching `HEAD` by running `git describe
    HEAD --tags --exact-match` (here’s the [fish git prompt code](https://github.com/fish-shell/fish-shell/blob/a5156e9e0e89bff2bd81ac945a019bad34f14346/share/functions/fish_git_prompt.fish#L521-L527))
  id: totrans-split-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can see where `git-prompt.sh` added support for describing a commit by a
    tag in this way in commit [27c578885 in 2008](https://github.com/git/git/commit/27c578885a0b8f56430c5a24f558e2b45cf04a38).
  id: totrans-split-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I don’t know if it makes a difference whether the tag is annotated or not.
  id: totrans-split-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If there are 2 tags with the same commit ID, it gets a little weird. For example,
    if I add the tag `v1.0.12` to this commit so that it’s with both `v1.0.12` and
    `v1.0.13`, you can see here that my git prompt changes, and then the prompt and
    `git status` disagree about which tag to display:'
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-42
  prefs: []
  type: TYPE_PRE
- en: (my prompt shows `v1.0.12` and `git status` shows `v1.0.13`)
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: 'scenario 4: in the middle of a rebase'
  id: totrans-split-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now: what if I check out the `main` branch, do a rebase, but then there was
    a merge conflict in the middle of the rebase? Here’s the situation:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: '`.git/HEAD` contains `c694cf8aabe2148b2299a988406f3395c0461742` (the commit
    ID of the commit that I’m rebasing onto, `origin/main` in this case)'
  id: totrans-split-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`git status` says `interactive rebase in progress; onto c694cf8`'
  id: totrans-split-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The thing I most recently checked out was `main`
  id: totrans-split-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: My shell’s git prompt says `(main|REBASE-i 1/1)`
  id: totrans-split-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Some notes about this:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: I think that in some sense the “current branch” is `main` here – it’s what I
    most recently checked out, it’s what we’ll go back to after the rebase is done,
    and it’s where we’d go back to if I run `git rebase --abort`
  id: totrans-split-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in another sense, we’re in a detached HEAD state at `c694cf8aabe2`. But it doesn’t
    have the usual implications of being in “detached HEAD state” – if you make a
    commit, it won’t get orphaned! Instead, assuming you finish the rebase, it’ll
    get absorbed into the rebase and put somewhere in the middle of your branch.
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: it looks like during the rebase, the old “current branch” (`main`) is stored
    in `.git/rebase-merge/head-name`. Not totally sure about this though.
  id: totrans-split-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'scenario 5: right after `git init`'
  id: totrans-split-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What about when we create an empty repository with `git init`?
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: '`.git/HEAD` contains `ref: refs/heads/main`'
  id: totrans-split-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`git status` says `On branch main` (and “No commits yet”)'
  id: totrans-split-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The thing I most recently checked out was, well, nothing
  id: totrans-split-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'My shell’s git prompt says: `(main)`'
  id: totrans-split-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So here everything mostly lines up, except that we’ve never run `git checkout`
    or `git switch`. Basically Git automatically switches to whatever branch was configured
    in `init.defaultBranch`.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: 'scenario 6: a bare git repository'
  id: totrans-split-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What if we clone a bare repository with `git clone --bare https://github.com/rbspy/rbspy`?
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: '`HEAD` contains `ref: refs/heads/main`'
  id: totrans-split-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`git status` says `fatal: this operation must be run in a work tree`'
  id: totrans-split-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The thing I most recently checked out was, well, nothing, `git checkout` doesn’t
    even work in bare repositories
  id: totrans-split-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'My shell’s git prompt says: `(BARE:main)`'
  id: totrans-split-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So #1 and #4 match (they both agree that the current branch is “main”), but
    `git status` and `git checkout` don’t even work.'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
- en: 'Some notes about this one:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: 'I think `HEAD` in a bare repository mainly only really affects 1 thing: it’s
    the branch that gets checked out when you clone the repository. It’s also used
    when you run `git log`.'
  id: totrans-split-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if you really want to, you can update `HEAD` in a bare repository to a different
    branch with `git symbolic-ref HEAD refs/heads/whatever`. I’ve never needed to
    do that though and it seems weird because `git symbolic ref` doesn’t check if
    the thing you’re pointing `HEAD` at is actually a branch that exists. Not sure
    if there’s a better way.
  id: totrans-split-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: all the results
  id: totrans-split-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here’s a table with all of the results:'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: '|  | `.git/HEAD` | git status | checked out | prompt |'
  id: totrans-split-73
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-split-74
  prefs: []
  type: TYPE_TB
- en: '| 1\. `checkout main` | `ref: refs/heads/main` | `On branch main` | main |
    `(main)` |'
  id: totrans-split-75
  prefs: []
  type: TYPE_TB
- en: '| 2\. `checkout 775b2b` | `775b2b399...` | `HEAD detached at 775b2b39` | 775b2b399
    | `((775b2b39))` |'
  id: totrans-split-76
  prefs: []
  type: TYPE_TB
- en: '| 3\. `checkout v1.0.13` | `ca182053c...` | `HEAD detached at v1.0.13` | v1.0.13
    | `((v1.0.13))` |'
  id: totrans-split-77
  prefs: []
  type: TYPE_TB
- en: '| 4\. inside rebase | `c694cf8aa...` | `interactive rebase in progress; onto
    c694cf8` | main | `(main\&#124;REBASE-i 1/1)` |'
  id: totrans-split-78
  prefs: []
  type: TYPE_TB
- en: '| 5\. after `git init` | `ref: refs/heads/main` | `On branch main` | n/a |
    `(main)` |'
  id: totrans-split-79
  prefs: []
  type: TYPE_TB
- en: '| 6\. bare repository | `ref: refs/heads/main` | `fatal: this operation must
    be run in a work tree` | n/a | `(BARE:main)` |'
  id: totrans-split-80
  prefs: []
  type: TYPE_TB
- en: “current branch” doesn’t seem completely well defined
  id: totrans-split-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: My original instinct when talking about git was to agree with the git glossary
    and say that `HEAD` and the “current branch” mean the exact same thing.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
- en: 'But this doesn’t seem as ironclad as I used to think anymore! Some thoughts:'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
- en: '`.git/HEAD` is definitely the one with the most consistent format – it’s always
    either a branch or a commit ID. The others are all much messier'
  id: totrans-split-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have a lot more sympathy than I used to for the definition “the current branch
    is whatever you last checked out”. Git does a lot of work to remember which branch
    you last checked out (even if you’re currently doing a bisect or a merge or something
    else that temporarily moves HEAD off of that branch) and it feels weird to ignore
    that.
  id: totrans-split-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git status` gives a lot of helpful context – these 5 status messages say a
    lot more than just what `HEAD` is set to currently'
  id: totrans-split-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`on branch main`'
  id: totrans-split-87
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`HEAD detached at 775b2b39`'
  id: totrans-split-88
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`HEAD detached at v1.0.13`'
  id: totrans-split-89
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`interactive rebase in progress; onto c694cf8`'
  id: totrans-split-90
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`on branch main, no commits yet`'
  id: totrans-split-91
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: some more “current branch” definitions
  id: totrans-split-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I’m going to try to collect some other definitions of the term `current branch`
    that I heard from people on Mastodon here and write some notes on them.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
- en: “the branch that would be updated if i made a commit”
  id: totrans-split-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Most of the time this is the same as `.git/HEAD`
  id: totrans-split-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Arguably if you’re in the middle of a rebase, it’s different from `HEAD`, because
    ultimately that new commit will end up on the branch in `.git/rebase-merge/head-name`
  id: totrans-split-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: “the branch most git operations work against”
  id: totrans-split-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is sort of the same as what’s in `.git/HEAD`, except that some operations
    (like `git status`) will behave differently in some situations, like how `git
    status` won’t tell you the current branch if you’re in a bare repository
  id: totrans-split-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: on orphaned commits
  id: totrans-split-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One thing I noticed that wasn’t captured in any of this is whether the current
    commit is **orphaned** or not – the `git status` message (`HEAD detached from
    c694cf8`) is the same whether or not your current commit is orphaned.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
- en: 'I imagine this is because figuring out whether or not a given commit is orphaned
    might take a long time in a large repository: you can find out if the current
    commit is orphaned with `git branch --contains HEAD`, and that command takes about
    500ms in a repository with 70,000 commits.'
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Git will warn you if the commit is orphaned (“Warning: you are leaving 1 commit
    behind, not connected to any of your branches…“) when you switch to a different
    branch though.'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
- en: that’s all!
  id: totrans-split-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I don’t have anything particularly smart to say about any of this. The more
    I think about git the more I can understand why people get confused.
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
