- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:34:23'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:34:23'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Motorola''s 6809: The Best 8-Bit? - by Babbage'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摩托罗拉的 6809：最佳 8 位？ - 由 Babbage 撰写
- en: 来源：[https://thechipletter.substack.com/p/motorolas-6809-the-best-8-bit](https://thechipletter.substack.com/p/motorolas-6809-the-best-8-bit)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://thechipletter.substack.com/p/motorolas-6809-the-best-8-bit](https://thechipletter.substack.com/p/motorolas-6809-the-best-8-bit)
- en: '*Welcome to the Chip Letter. This week’s short ‘Chiplet’ post is on [Morris
    Chang, TSMC and Japan](https://thechipletter.substack.com/p/morris-chang-tsmc-and-japan).
    It’s available for premium subscribers now and will be unlocked for everyone next
    week.*'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*欢迎来到 Chip Letter。本周的短篇‘Chiplet’文章关于[Morris Chang、TSMC 和日本](https://thechipletter.substack.com/p/morris-chang-tsmc-and-japan)。目前仅供高级订阅者使用，下周将对所有人解锁。*'
- en: '*Next week’s full post, **Demystifying GPU Compute Software,** a companion
    to [Demystifying GPU Compute Architectures](https://thechipletter.substack.com/p/demystifying-gpu-compute-architectures)**,**
    will look at the story of the software ecosystems for programming GPUs.*'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*下周的完整文章，**解密 GPU 计算软件**，是[解密 GPU 计算架构](https://thechipletter.substack.com/p/demystifying-gpu-compute-architectures)的补充，将探讨编程
    GPU 的软件生态系统的故事。*'
- en: '*Today, the last post in our series on 8-bit designs, with a look at possibly
    the most advanced design of the 8-bit era, the Motorola 6809.*'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*今天，我们系列关于 8 位设计的最后一篇文章，聚焦于可能是 8 位时代最先进设计的摩托罗拉 6809。*'
- en: Die image of Motorola 6809 - By Pauli Rautakorpi - Own work, CC BY 3.0, https://commons.wikimedia.org/w/index.php?curid=29982942
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 摩托罗拉 6809 的晶片图像 - 由Pauli Rautakorpi创作 - 自己的作品，CC BY 3.0，https://commons.wikimedia.org/w/index.php?curid=29982942
- en: “This is a story. It is a story of computers in general, specifically microcomputers,
    and of one particular microprocessor - with revolutionary social change lurking
    in the background. The story could well be imaginary, but it happens to be true.”
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: “这是一个故事。这是关于计算机的故事，具体来说是微型计算机的故事，以及一个特定的微处理器 - 其中革命性的社会变革潜伏在背后。这个故事本来可能是虚构的，但碰巧是真实的。”
- en: Byte Magazine on the Motorola 6809.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: Byte Magazine 论摩托罗拉 6809。
- en: This is our third and final post on Motorola’s 6800 8-bit microprocessor series.
    In the [first part](https://thechipletter.substack.com/p/motorolas-pioneering-8-bit-6800-origins),
    we saw how a small but talented team based in Phoenix Arizona developed the 6800
    itself. In the [second](https://thechipletter.substack.com/p/leaving-arizona),
    Motorola’s management tried to force that team to move to Austin, Texas. The majority
    of the team left Motorola and some, including Chuck Peddle and Bill Mensch, joined
    MOS Technology in Pennsylvania, where they created the 6502.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们关于摩托罗拉 6800 8 位微处理器系列的第三篇，也是最后一篇文章。在[第一部分](https://thechipletter.substack.com/p/motorolas-pioneering-8-bit-6800-origins)，我们看到一个位于亚利桑那州凤凰城的小而才华横溢的团队开发了
    6800。在[第二部分](https://thechipletter.substack.com/p/leaving-arizona)，摩托罗拉的管理层试图强迫该团队迁至德克萨斯州奥斯汀。该团队的大部分成员离开了摩托罗拉，其中包括
    Chuck Peddle 和 Bill Mensch，他们加入了宾夕法尼亚州的 MOS Technology 公司，创造了 6502。
- en: The 6800 would lose decisively to the 6502 in the competition to become one
    of the leading designs powering the home computer boom of the late 1970s. The
    cheaper and more capable 6502 was used in the Apple II, Commodore’s PET and 64,
    the BBC Micro, and many other popular designs.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 6800 在 1970 年代末的家用计算机激增竞争中败给了 6502。更便宜且功能更强大的 6502 被用于苹果 II、Commodore 的 PET
    和 64、BBC 微机等许多流行设计中。
- en: But this wasn’t the end for the 6800 series. Motorola had the resources to rebuild
    its team in Austin, and the clout to attract big customers, including General
    Motors who turned to Motorola and the 6800 for the microprocessor for their new
    engine control system.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不是 6800 系列的终结。摩托罗拉在奥斯汀重新建立了团队，并吸引了包括通用汽车在内的大客户，后者将 6800 用于其新的发动机控制系统。
- en: 'General Motors was shifting maybe 6,000,000 vehicles a year at the time: 500,000
    vehicles a month. This was a system that used maybe four chips per system. It
    was a big business.'
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当时通用汽车每年可能出货 6,000,000 辆车：每月 500,000 辆车。这是一个每个系统使用大约四个芯片的系统。这是一个大生意。
- en: And with the GM deal the 6800 suddenly became a very big business indeed.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 并且随着通用汽车的交易，6800 突然成为一个非常大的生意。
- en: '... Motorola microprocessors went from sales of zero to sales of about $250,000,000
    almost overnight, maybe a year to 18 months or something. And it was at a good
    margin.'
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '... 摩托罗拉的微处理器销量从零增长到了约 2.5 亿美元，几乎一夜之间，也许一年到一年半左右。并且利润丰厚。'
- en: With a big customer and a successful and profitable business, the evolution
    of the 6800 series continued. The Motorola Microprocessors Data Manual from 1989
    has a summary of all the variants of the design that were available at that time.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有了大客户和成功的盈利业务，6800系列的演变继续进行。1989年Motorola微处理器数据手册概述了当时所有设计变体的概况。
- en: And [Retro StackExchange](https://retrocomputing.stackexchange.com/questions/11911/whats-the-timeline-of-motorola-6800-family-cpus-from-1974-to-1979)
    has a great description of these key variants.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 而且[Retro StackExchange](https://retrocomputing.stackexchange.com/questions/11911/whats-the-timeline-of-motorola-6800-family-cpus-from-1974-to-1979)对这些关键变种有很好的描述。
- en: '**6800**: "[A]nnounced in March 1974 and was in full production by the end
    of that year." "The M6800 microcomputer system was finally in production by November
    1974.".'
  id: totrans-split-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**6800**: "于1974年3月宣布，并在同年年底开始全面生产。" "M6800微计算机系统最终在1974年11月开始生产。"'
- en: '**68A00**, **68B00**: "The new parts were available in July 1976.".'
  id: totrans-split-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**68A00**, **68B00**: "这些新型号在1976年7月就已经推出。"'
- en: '**6802**, **6808**: Added onboard clock and (6802 only) 128 bytes of RAM. Announced
    by March 3rd 1977.'
  id: totrans-split-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**6802**, **6808**: 添加了内置时钟（仅6802）和128字节的RAM。于1977年3月3日宣布。'
- en: '**6801**, **6803**: Adds 16-bit "D" register as a concatenation of A and B
    and various new instructions, including multiply. This or a very similar MCU appears
    to have been in use by General Motors as early as 1977;'
  id: totrans-split-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**6801**, **6803**: 添加了16位的“D”寄存器，作为A和B的串联，以及各种新指令，包括乘法。通常情况下，这款或者非常相似的微控制器早在1977年就被通用汽车公司使用；'
- en: '**6809**: The earliest mention I can find that includes a month is in an Elsevier
    journal. This seems unlikely to be the initial announcement, but is probably well
    before production. (6809s were not on sale in the back pages of *Byte* in December
    1977.)'
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**6809**: 我能找到的最早提及月份的记录是在一篇Elsevier期刊上。这似乎不太可能是最初的公告，但很可能是在投入生产之前很久。（6809并没有在1977年12月的《Byte》杂志背页上销售。）'
- en: '**6805**: Optimized for controller applications; incompatible architectural
    changes such as X register reduced to 8 bits. It may have existed internally at
    Motorola as early as 1977 or 1978: "this is ''77-''78 timeframe -- they came and
    said, ''Hey, we''d like to have a CMOS version of this 6805 variant.". (The M14605
    is the CMOS 6805\. It and several 6805 variants have data sheets in claims release
    in 1979\. archive.org has an *M6805 M14605 Family Users Manual* dated 1980.'
  id: totrans-split-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**6805**: 专为控制器应用优化；不兼容的体系结构变化，如X寄存器减少到8位。它可能早在1977年或1978年就在Motorola内部存在：“这是‘77-‘78时间段--他们过来说，‘嘿，我们想要一个这个6805变种的CMOS版本。’（M14605是CMOS
    6805。它和几个6805变种在1979年发布的数据手册中有详细资料。archive.org上有1980年的《M6805 M14605系列用户手册》。'
- en: '**68HC05**: "A low-power variation of the 05," "shipped..in December of 1979."'
  id: totrans-split-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**68HC05**: "05系列的低功耗变种," "在1979年12月发货。"'
- en: 'In case you''re wondering about the "holes" in this numbering scheme: The **6804**
    was a reduced-cost modification of the 6805 released around 1982\. The **6806**
    and **6807** designations were never used, as far as I can tell. The **6810**
    was a RAM chip. The **6811** was a 6801 extension introduced in 1984\. The **6812**
    in turn extended that, but not until the 1990s. From the beginning parts from
    **6820** onwards were peripherals.'
  id: totrans-split-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你对这个编号方案中的“空缺”感到好奇：**6804**是1982年左右发布的6805的成本降低型修改版。**6806**和**6807**的命名从未使用过，据我所知。**6810**是一个RAM芯片。**6811**是1984年推出的6801扩展版。**6812**进一步扩展了6811，但直到1990年代才出现。从6820开始的零件从一开始就是外围设备。
- en: Generally, these were minor variants on the original 6800, with tweaks to the
    instruction set, some additional RAM, or built with a more advanced fabrication
    process.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，这些都是对原始6800微处理器的轻微变种，调整了指令集，增加了一些额外的RAM，或者采用了更先进的制造工艺。
- en: One of these new designs was much more ambitious than the others, though. That
    was the 6809.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种新设计比其他更为雄心勃勃。那就是6809。
- en: By 1977 Motorola saw key competitors working on more advanced 16-bit designs.
    Intel would introduce the 8086 in 1978 and Zilog was working on the Z8000\. So
    the team in Austin started work on an advanced 16-bit design that would compete
    with the new designs from Intel and Zilog.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 到了1977年，Motorola看到关键竞争对手正在研发更先进的16位设计。英特尔于1978年推出了8086，而智微（Zilog）正在研发Z8000。因此，奥斯汀的团队开始研发一种能与英特尔和智微的新设计竞争的先进16位设计。
- en: …my own perception at the time was that we were going to replace the minicomputer,
    if you will. It was going to be very high-end, maybe a part that would sell for
    several hundred dollars, two or three hundred dollars, but it would be of great
    value to our customers, and have very high margins, and bring in lots of other
    kinds of parts.
  id: totrans-split-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: …那时候我个人的感觉是，我们将要取代小型计算机，如果你愿意的话。它将非常高端，可能会卖几百美元，两三百美元，但它对我们的客户来说非常有价值，并且有非常高的利润率，会带来很多其他类型的部件。
- en: That design would become the 16/32 bit Motorola 68000 which would eventually
    become the leading alternative to Intel’s 8086.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 那种设计最终成为了16/32位的摩托罗拉68000，最终成为英特尔8086的主要竞争对手。
- en: The complexity and cost of this design left Motorola with a gap though. Many
    customers wouldn’t pay for a CPU as advanced as the 68000\. By now Motorola had
    a wide range of variants on the 6800 design. But these variants couldn’t solve
    the problem that the 6800 architecture was weaker than its leading 8-bit competitors
    like the 6502 and Z80\. So, to better compete with these designs Motorola created
    a new 8-bit architecture, the 6809.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设计的复杂性和成本使得摩托罗拉面临了一个缺口。然而，许多客户并不愿意为像68000这样先进的CPU付费。到那时，摩托罗拉已经在6800设计上有了广泛的变体。但这些变体无法解决6800架构比其主要的8位竞争对手如6502和Z80弱的问题。因此，为了更好地竞争这些设计，摩托罗拉创建了一种新的8位架构，即6809。
- en: The 6809 was designed to be ‘source code’ compatible with the 6800\. Programs
    written in 6800 assembly language could be assembled and run on the 6809\. However,
    the machine code created for the 6800 would not run on the 6809, as the meaning
    of many 6800 ‘opcodes’ was changed.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 6809被设计为与6800的‘源代码’兼容。用6800汇编语言编写的程序可以在6809上汇编和运行。然而，为6800创建的机器码不能在6809上运行，因为许多6800‘操作码’的含义已经改变。
- en: Before we get to the instruction set, a word on the implementation of the 6809\.
    The much more complex 68000 would make heavy use of ‘micro-code’. The simpler
    6809, however, could make use of broadly the same design approach that had been
    used for the 6800\. A ‘Programmable Logic Array’ or ‘PLA” would control much of
    the operation of the 6809\. We can place the 6800 and 6809 side by side and see
    the similarities in the layout, with the PLA at the top, logic in the middle,
    and the registers and ‘arithmetic and logic unit’ at the bottom.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论指令集之前，先来看看6809的实现情况。更复杂的68000将大量使用‘微码’。然而，更简单的6809可以采用与6800基本相同的设计方法。‘可编程逻辑阵列’或‘PLA’将控制6809的大部分操作。我们可以将6800和6809并排放置，看到它们在布局上的相似之处，PLA在顶部，逻辑在中部，寄存器和‘算术逻辑单元’在底部。
- en: '6800 vs 6809 Die Shots : By Pauli Rautakorpi - Own work, CC BY 3.0, https://commons.wikimedia.org/w/index.php?curid=53469083'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 6800 vs 6809芯片照片：由Pauli Rautakorpi制作 - 自己的作品，CC BY 3.0，https://commons.wikimedia.org/w/index.php?curid=53469083
- en: How did the 6809 team decide what features to add to the architecture? Much
    like [John Cocke](https://thechipletter.substack.com/p/the-first-risc-john-cocke-and-the)
    with the pioneering RISC architecture, the IBM 801, they set out to analyze existing
    6800 programs. Their conclusions?
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 6809团队如何决定在架构中添加哪些功能？与[John Cocke](https://thechipletter.substack.com/p/the-first-risc-john-cocke-and-the)和开创性的RISC架构IBM
    801类似，他们着手分析现有的6800程序。他们的结论是？
- en: By far the most common instructions were the loads and stores, which accounted
    for over 38 percent of all 6800 instructions. Next were the subroutine calls and
    returns with 13 percent, conditional branches with 11 percent and unconditional
    jumps and branches with 6.5 percent … Neither the arithmetic nor' logical instructions
    had as high a usage as might have been expected. Clearly then, enhancements that
    would improve the utility and power of the data movements (such as load and stores)
    would yield the largest return on investment, followed by improvements to subroutine
    linkage and parameter passing.
  id: totrans-split-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最常见的指令明显是加载和存储指令，占所有6800指令的38%以上。其次是子程序调用和返回占13%，条件分支占11%，无条件跳转和分支占6.5%……与预期不同的是，算术和逻辑指令的使用率并不高。因此，改进数据移动（如加载和存储）的功能和效能将带来最大的投资回报，其次是改进子程序链接和参数传递。
- en: It’s worth noting, though, that their analysis was limited to a ‘static’ inspection
    of the number of operations in 6800 machine code, not a ‘dynamic’ analysis of
    which instructions were being executed most often, for example, because they were
    being repeated within loops. It’s arguable that some of these results - the large
    proportion of subroutine calls, for example, might have been quite different if
    the team had been able to use dynamic analysis.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，值得注意的是，他们的分析仅限于对6800机器代码中操作次数的“静态”检查，而非对哪些指令最常执行的“动态”分析，例如因为它们在循环内重复执行。
- en: 'Other conclusions from the analysis included:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 分析的其他结论包括：
- en: …the offsets for indexed instructions showed that 93 percent of the offsets
    were either 0 or less than 32
  id: totrans-split-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: …索引指令的偏移量显示，93%的偏移量要么为0，要么小于32。
- en: And a majority were not zero.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 而且大多数不为零。
- en: 'So the 6809 added some instructions that could add an integer to a 16-bit index
    register. From Rodnay Zak’s ‘Programming the 6809:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，6809增加了一些指令，可以将整数加到16位索引寄存器中。来自Rodnay Zak的‘Programming the 6809’：
- en: 'Other new features included:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 其他新增功能包括：
- en: Direct Page Register
  id: totrans-split-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 直接页寄存器
- en: One of the things that had made the 6502 so successful, was its extensive use
    of ‘zero page’, or memory locations 0 to 255\. With a very limited number of registers,
    the 6502 relied on the use of ‘zero page’ to access frequently used values. Access
    to these values was faster as only a single address byte was needed to specify
    the address. The 6809 enhanced the use of the zero page by adding a new 8-bit
    ‘Direct Page’ register which allowed the ‘zero page’ to be moved to anywhere in
    the 16-bit address space.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使6502如此成功的其中一点是，它广泛使用‘零页’，或者内存位置0到255。由于寄存器数量非常有限，6502依赖于使用‘零页’来访问频繁使用的值。访问这些值更快，因为只需要一个地址字节来指定地址。6809通过添加一个新的8位“直接页”寄存器增强了零页的使用，允许将“零页”移动到16位地址空间中的任何位置。
- en: ‘U’ Stack Pointer
  id: totrans-split-47
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: ‘U’堆栈指针
- en: The 6809 added a ‘User’ Stack Pointer’ register - called ‘U’ - as an addition
    to the existing ‘S’ Stack Pointer’.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 6809添加了一个‘用户’堆栈指针寄存器 - 名为‘U’ - 作为现有‘S’堆栈指针的补充。
- en: Branch Relative Addressing
  id: totrans-split-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 分支相对寻址
- en: In the 6800 (and the Z80 and 6502) there were ‘branch’ instructions with the
    program counter jumping to an address close by with the address determined by
    a single byte ‘offset’. To jump to an address outside this range, it was necessary
    to specify a two-byte ‘absolute address’ for the target code. This meant that
    code typically could not be ‘position independent’, it had to be written to be
    stored at a predetermined set of locations in memory.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在6800（以及Z80和6502）中，有“分支”指令，程序计数器会跳转到附近的地址，地址由单字节“偏移量”确定。要跳转到超出此范围的地址，必须为目标代码指定两字节的“绝对地址”。这意味着代码通常不能是“位置无关的”，它必须被写入以存储在内存中预定的一组位置。
- en: The 6809 changed this by adding the ability to branch to addresses within the
    full 64K memory range, by specifying a two-byte value that would be added to the
    program counter. This meant that compiled or assembled code could potentially
    be ‘position independent’ and loaded and run at any address in memory.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 6809通过添加能够分支到完整64K内存范围内的地址的能力改变了这一点，方法是指定一个将添加到程序计数器的两字节值。这意味着编译或汇编的代码可能是“位置无关的”，并且可以在内存中的任何地址加载和运行。
- en: D Register
  id: totrans-split-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: D寄存器
- en: The ‘16-bit accumulator D’ was Motorola’s designation of the combination of
    the A (most significant byte) and B (least significant byte) accumulators. The
    D register could be loaded with a single instruction.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: “16位累加器D”是Motorola对A（最高有效字节）和B（最低有效字节）累加器组合的称呼。D寄存器可以通过单个指令加载。
- en: Multiply Instruction
  id: totrans-split-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 乘法指令
- en: Finally, and in a first for an 8-bit processor, the 6809 added an (8-bit) multiply
    instruction.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于一款8位处理器而言，6809首次添加了一个（8位）乘法指令。
- en: A multiply instruction is included which multiplies unsigned binary numbers
    in accumulators A and B and places the unsigned result in the 16-bit accumulator
    D. This unsigned multiply instruction also allows signed or unsigned multiple-precision
    multiplication.
  id: totrans-split-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 包括一个乘法指令，可以在累加器A和B中乘以无符号二进制数，并将结果放入16位累加器D中。此无符号乘法指令还允许有符号或无符号多精度乘法。
- en: By the start of 1979, Motorola was ready to launch the 6809 to the world and
    it did so in style, with a three-part article in Byte magazine. The series started
    with text that would probably have seemed a little overwrought, even at the time.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 到1979年初，摩托罗拉准备向世界推出6809，并以三篇Byte杂志文章的方式风靡一时。系列文章以可能在当时看来有些过分的文本开篇。
- en: This is a story. It is a story of computers in general, specifically microcomputers,
    and of one particular microprocessor - with revolutionary social change lurking
    in the background. The story could well be imaginary, but it happens to be true.”
  id: totrans-split-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这是一个故事。这是关于计算机总体的故事，特别是微型计算机，尤其是关于一个特定的微处理器的故事——革命性的社会变革潜藏在背景中。这个故事本来可能是虚构的，但碰巧是真实的。
- en: By the start of 1979, the first 16-bit microprocessors were either available
    or widely known to be on their way. The 6809 was interesting but hardly revolutionary.
    Fortunately, the rest of the series of articles was more focused on providing
    readers with interesting insights into the development of the 6809.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 到1979年初，第一批16位微处理器已经问世或广为人知即将问世。6809引人注目，但并非革命性。幸运的是，接下来的文章系列更专注于为读者提供关于6809开发的有趣见解。
- en: 'It highlighted the contributions of the two leads of the 6809 project, Joel
    Boney and Terry Ritter” both working in Austin:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 强调了6809项目的两位主要贡献者，乔尔·博尼（Joel Boney）和特里·里特（Terry Ritter），两人都在奥斯汀工作：
- en: Joel Boney and Terry Ritter are with the Motorola 6800 Micro-processor Design
    Group in Austin TX. joel is responsible for the software input into the design
    of the 6800 family processors and peripheral parts and was a co-architect of the
    M6809\. Terry Ritter is a microcomponent architect, responsible for specification
    of the 6809 advanced microprocessor.
  id: totrans-split-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 乔尔·博尼（Joel Boney）和特里·里特（Terry Ritter）就职于摩托罗拉6800微处理器设计组，位于德克萨斯州奥斯汀。乔尔负责软件输入到6800系列处理器和外设设计中，并且是M6809的共同架构师。特里·里特是微组件架构师，负责规格化6809高级微处理器。
- en: 'The task of designing the 6809 is broken down into several separate stages:'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 设计6809的任务分解为几个独立的阶段：
- en: 'The design of a complex large-scale integration (LSI) part may be conveniently
    broken into three phases: the architectural design, the logic and circuit design/architectural
    review, and the layout software and hardware (breadboard) simulations. Each phase
    has its own requirements.'
  id: totrans-split-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 复杂大规模集成（LSI）部件的设计可以方便地分为三个阶段：架构设计、逻辑和电路设计/架构审查，以及布局软件和硬件（面包板）模拟。每个阶段都有其自身的要求。
- en: Logic design consists of the production of a cycle-by-cycle flowchart and the
    derivation of the equations and logic circuitry necessary to implement the specified
    design.
  id: totrans-split-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 逻辑设计包括制作逐周期流程图，并推导出实现指定设计所需的方程式和逻辑电路。
- en: Layout is the actual task of arranging transistors and interconnections to implement
    the logic diagram. Circuit design results will indicate appropriate transistor
    sizes and polysilicon widths; these must now be arranged for minimum area. Every
    attempt is made to make general logic "cells" which can be used in many places
    across the integrated circuit, but area minimization is the principal concern.
  id: totrans-split-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 布局是实际的任务，即安排晶体管和互连以实现逻辑图。电路设计结果将指示适当的晶体管尺寸和多晶硅宽度；现在必须按最小面积排列它们。尽一切可能制作可以在集成电路的许多地方使用的通用逻辑“单元”，但面积最小化是主要关注点。
- en: Layout plotters in action - Source Byte March 1979
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 布局绘图仪器现场操作 - 来源于1979年3月的Byte杂志
- en: The layout for the chip eventually exists only as a computer database. Each
    cell is individually digitized into the computer, where it can be arbitrarily
    positioned, modified or replicated as desired.
  id: totrans-split-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 芯片的布局最终仅存在于计算机数据库中。每个单元都被数字化到计算机中，可以根据需要任意定位、修改或复制。
- en: A full copy of the Byte article is available for premium subscribers to download
    at the end of this post, along with links all parts of the Byte series on the
    6809.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: Byte文章的完整副本可供高级订阅者在本文末尾下载，还包括所有关于6809的Byte系列文章的链接。
- en: 'How did the 6809 compare to the competition? Rodnay Zaks ‘Programming the 6809’
    book (see link at the end of this post) said:'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 6809与竞争产品相比如何？罗德内·扎克斯（Rodnay Zaks）的《编程6809》一书（请参见本文末尾的链接）中提到：
- en: When you have mastered the material in this book, you will understand how 6809
    systems, when properly designed and programmed, can deliver near 16-bit performance
    with 8-bit economy
  id: totrans-split-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当你掌握了本书中的材料后，你将理解到，当6809系统经过正确设计和编程时，可以以8位经济性实现接近16位性能。
- en: Quite a claim! Does it stack up? We looked at the performance of a range of
    contemporary systems in ‘Once More through the Sieve’.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常大胆的说法！能够站得住脚吗？我们看了一下"Once More through the Sieve"中一系列当代系统的性能。
- en: That post looked at a Byte article that performs a simple test of the performance
    of a range of system in 1983.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 那篇文章关注的是1983年一篇Byte文章，对一系列系统的性能进行了简单测试。
- en: So how does the 6809 compare?
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 那么6809与之比较如何？
- en: An assembly language version of the test running on the 6809 takes 5.1 seconds
    compared to 6.8 on a Z80 and 13.9 on a 6502 (clock speeds unspecified in each
    case). Comparing with the first 16-bit processors, a 5MHz 8088 takes 4.1 seconds,
    an 8MHz 8086 2.9 seconds, but Motorola’s own 68000 running at 8MHz is much faster
    at just 0.49 seconds.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在6809上运行的汇编语言版本的测试，花费了5.1秒，而Z80花费了6.8秒，6502花费了13.9秒（每种情况下的时钟速度未指定）。与首批16位处理器比较，5MHz的8088花费了4.1秒，8MHz的8086花费了2.9秒，但Motorola自家的8MHz
    68000只需0.49秒即可完成。
- en: So the 6809 was competitive with Intel’s 8088 but completely outclassed by Motorola’s
    own 68000.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，6809与Intel的8088竞争激烈，但在Motorola自家的68000面前完全不敌。
- en: The 6809 was launched with a bang and had performance approaching Intel’s first
    16-bit designs. Would it be enough for it to make an impact? It certainly attracted
    interest early on, including at Apple in the team that was designing the Macintosh.
    According to [folklore.org](https://www.folklore.org/Five_Different_Macs.html)
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 6809推出时备受瞩目，其性能接近Intel首批16位设计。这足以让它产生影响吗？它确实在早期引起了兴趣，包括在苹果Macintosh设计团队内。根据[folklore.org](https://www.folklore.org/Five_Different_Macs.html)
- en: '“​The first Macintosh digital board, designed in late 1979, was based on Jef
    Raskin''s specifications: it had a Motorola 6809E microprocessor, 64K of memory,
    and a 256x256 black and white, bit-mapped graphics display.'
  id: totrans-split-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “1979年末设计的第一块Macintosh数字板，根据杰夫·拉斯金的规格设计：它采用了Motorola 6809E微处理器，64K内存，并且拥有256x256的黑白位图图形显示。
- en: The first Macintosh was a cute little computer, but it was fundamentally limited
    by the 6809 microprocessor, which only had 16 bits of address space.
  id: totrans-split-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 第一台Macintosh是一台可爱的小型计算机，但它受到了只有16位地址空间的6809微处理器的根本限制。
- en: But Apple was already working on the Lisa which had adopted the 68000 and reusing
    some of the Lisa’s optimized 68000 assembly source code in the Macintosh was an
    attractive option, so the 6809 was quickly dropped in favor of its larger cousin.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 但是苹果已经在开发Lisa，它采用了68000，并且在Macintosh中重用了一些Lisa优化过的68000汇编源代码，因此6809很快就被其更强大的表兄所取代。
- en: 'Perhaps the most well-known use of the 6809 in a production computer was in
    the Tandy Color Computer. The design had a surprising origin story: as a terminal
    for farmers in Kentucky in a project known as ‘Green Thumb’. Quoting from the
    document produced for US Congress.'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 6809在生产计算机中最知名的用途或许是在Tandy Color Computer上。该设计有一个令人惊讶的起源故事：作为肯塔基农民终端项目“绿色拇指”的一部分。引自为美国国会制定的文件。
- en: Green Thumb, the experimental videotext project tested by the Kentucky Cooperative
    Extension Service and the University of Kentucky College of Agriculture, was conceived
    in 1977 as means of providing farmers with real-time weather, marketing and agricultural
    information. As a result of efforts by Senator Walter Ruddiest (D-Ky.), the Department
    of Agriculture provided $200,000 and the National Weather Service $100,000 for
    a pilot project involving two counties in Kentucky. After technical committee
    determined hardware specifications, bids for the equipment were taken. Motorola
    won the contract for the user terminals or "Green Thumb Boxes", while Western
    Union provided the two county host computers; the Computer Division of Tandy Corporation
    later joined with Motorola in manufacturing user terminals. Two hundred farmers
    from Todd and Shelby Counties were chosen for the experiment which began operation
    in March 1980.
  id: totrans-split-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"绿色拇指"，由肯塔基合作延伸服务和肯塔基大学农业学院测试的实验性视文本项目，始于1977年，旨在为农民提供实时天气、市场和农业信息。由于沃尔特·鲁迪斯特参议员（D-Ky.）的努力，农业部提供了20万美元，国家气象局提供了10万美元用于肯塔基两个县的试点项目。技术委员会确定了硬件规格后，进行了设备投标。Motorola赢得了用户终端或“绿色拇指盒子”的合同，而Western
    Union提供了两个县的主机计算机；Tandy Corporation的计算机部门后来与Motorola合作制造用户终端。从托德县和谢尔比县选出了200名农民参与这个试验，该项目于1980年3月开始运行。'
- en: This design was adapted to create a computer that Tandy could sell to home users.
    Although it was called the Tandy TRS-80 Color, it had almost nothing in common
    with its predecessor TRS-80 models, which used the Z80 processor.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个设计被改进，以创建 Tandy 可以销售给家庭用户的计算机。虽然称为 Tandy TRS-80 Color，但它与使用 Z80 处理器的前身 TRS-80
    模型几乎没有任何共同之处。
- en: Motorola supplied all the key components of the Tandy Color and also made a
    reference computer design available to third parties. It was relatively easy for
    other companies to use that reference design to build their version of that design.
    One firm that did so was based thousands of miles away from Austin, in Wales in
    the UK. The Welsh flag has a dragon so it was named Dragon Data and it launched
    with a home computer based on Motorola’s 6809 reference design, the Dragon 32.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: Motorola 提供了 Tandy Color 的所有关键组件，并向第三方提供了参考计算机设计。其他公司很容易使用该参考设计来构建自己版本的设计。其中一家这样做的公司位于距离奥斯汀数千英里之外的英国威尔士。威尔士国旗上有一条龙，因此被命名为
    Dragon Data，并推出了基于 Motorola 6809 参考设计的家用计算机，Dragon 32。
- en: The Dragon 32 was followed by the Dragon 64 with 64KB of RAM. As the home computer
    market contracted in the early 1980s, Dragon Data soon got into financial difficulties
    and was sold to a Spanish startup which in turn failed a couple of years later.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: Dragon 32 后来被拥有 64KB RAM 的 Dragon 64 所取代。早在 1980 年代初期，家用计算机市场开始萎缩，Dragon Data
    很快陷入财政困境，并被一个西班牙初创公司收购，但该公司几年后也失败了。
- en: With a more sophisticated and ambitious 8-bit processor, it made sense for Motorola
    to invest in software that could make the most of the capabilities of the new
    design. So they commissioned Microware to develop both a BASIC interpreter and
    an operating system for the 6809.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 针对更复杂和雄心勃勃的 8 位处理器，Motorola 投资于可以充分利用新设计能力的软件开发。因此，他们委托 Microware 开发了 6809 的
    BASIC 解释器和操作系统。
- en: The first version ("OS-9 Level One"), which dates back to 1979–1980, was written
    in assembly language for the Motorola 6809 CPU, and all of its processes ran within
    the 64KB address space of the CPU without a memory management unit. It was developed
    as a supporting operating system for the BASIC09 project, contracted for by Motorola
    as part of the 6809 development.
  id: totrans-split-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 第一个版本（“OS-9 Level One”），追溯至 1979-1980 年，是为 Motorola 6809 CPU 编写的汇编语言，其所有进程都在
    CPU 的 64KB 地址空间内运行，没有内存管理单元。它是作为 6809 开发的一部分，由 Motorola 承包的 BASIC09 项目的支持操作系统开发的。
- en: OS-9 would continue to be developed and ported, first to the 68000 and then
    to a wide range of other processor architectures including PowerPC, Arm, and Intel’s
    x86, and is still in use in embedded applications today.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: OS-9 将继续开发和移植，首先到 68000，然后到一系列其他处理器架构，包括 PowerPC、Arm 和 Intel 的 x86，并且今天仍在嵌入式应用中使用。
- en: The 6809 also made it into several arcade video games, including the popular
    ‘Defender’.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 6809 还出现在几款街机游戏中，包括流行的‘Defender’。
- en: The 6809’s architecture was an improvement over its predecessors but it was
    still an architectural dead end. The future lay with the 8086, 68000, and their
    successors.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 6809 的架构改进了其前身，但仍然是一个架构上的死胡同。未来在于 8086、68000 和它们的后续产品。
- en: Contrary to the hyperbole of the Byte article, the 6809 wasn’t revolutionary,
    it was evolutionary. And as an 8-bit design it had some clear limitations.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Byte 文章的夸张描述相反，6809 并不是革命性的，它是进化的。作为一个 8 位设计，它有一些明显的局限性。
- en: 'The 6809’s designers hadn’t tried to address perhaps the most significant limitation
    of competing 8-bit designs, the fact that they were limited to 64KB of memory.
    By the early 1980s, even cheap home computers were using the whole of the 64K
    address space. There was an option to expand the 6809’s memory to up to 2 MB using
    an external Memory Management Unit, the 6829\. According to the 6829’s manual
    the chip:'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 6809 的设计者并没有试图解决竞争对手 8 位设计中可能最重要的限制之一，即它们仅限于 64KB 内存。到了 1980 年代初期，即使是廉价的家用计算机也在使用整个
    64K 地址空间。使用外部内存管理单元 6829，可以将 6809 的内存扩展到高达 2 MB。根据 6829 的手册，该芯片：
- en: • Expands Memory Address Space from 64K to 2 Megabytes
  id: totrans-split-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: • 将内存地址空间从 64K 扩展到 2 MB
- en: • Provides Task Isolation and Write Protection
  id: totrans-split-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: • 提供任务隔离和写保护
- en: • Provides Efficient Memory Allocation; 1024 Pages of 2K Bytes Each
  id: totrans-split-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: • 提供高效的内存分配；每个 2K 字节有 1024 页
- en: Bu perhaps the biggest factor that limited adoption of the 6809 was Motorola’s
    own 68000, also launched in 1979\. The ambition of the 16/32-bit 68000 meant that
    it had nothing in common with the 6800 or 6809 and so there was no sensible upgrade
    path from the 6809 to the 68000\. The 6809’s architecture was an improvement over
    its predecessors but it was still an architectural dead end. The future lay with
    the 8086, 68000, and their successors.
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 但也许限制了6809的采用最大因素是Motorola自家的68000，也于1979年推出。16/32位68000的野心意味着它与6800或6809没有任何共同之处，因此从6809到68000的合理升级路径并不存在。6809的架构虽然优于其前身，但仍然是一个架构的死胡同。未来属于8086、68000及其后继者。
- en: '* * *'
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: After the paywall, the full Byte article from January 1979 and links to further
    reading on the 6809 and the TRS-80 Color and Dragon 32.
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 经过付费墙后，完整的1979年1月《Byte》文章以及有关6809、TRS-80 Color和Dragon 32的进一步阅读链接。
