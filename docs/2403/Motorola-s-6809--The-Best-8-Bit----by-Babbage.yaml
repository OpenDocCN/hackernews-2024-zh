- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:34:23'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Motorola''s 6809: The Best 8-Bit? - by Babbage'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://thechipletter.substack.com/p/motorolas-6809-the-best-8-bit](https://thechipletter.substack.com/p/motorolas-6809-the-best-8-bit)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Welcome to the Chip Letter. This week’s short ‘Chiplet’ post is on [Morris
    Chang, TSMC and Japan](https://thechipletter.substack.com/p/morris-chang-tsmc-and-japan).
    It’s available for premium subscribers now and will be unlocked for everyone next
    week.*'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: '*Next week’s full post, **Demystifying GPU Compute Software,** a companion
    to [Demystifying GPU Compute Architectures](https://thechipletter.substack.com/p/demystifying-gpu-compute-architectures)**,**
    will look at the story of the software ecosystems for programming GPUs.*'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: '*Today, the last post in our series on 8-bit designs, with a look at possibly
    the most advanced design of the 8-bit era, the Motorola 6809.*'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Die image of Motorola 6809 - By Pauli Rautakorpi - Own work, CC BY 3.0, https://commons.wikimedia.org/w/index.php?curid=29982942
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: “This is a story. It is a story of computers in general, specifically microcomputers,
    and of one particular microprocessor - with revolutionary social change lurking
    in the background. The story could well be imaginary, but it happens to be true.”
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Byte Magazine on the Motorola 6809.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: This is our third and final post on Motorola’s 6800 8-bit microprocessor series.
    In the [first part](https://thechipletter.substack.com/p/motorolas-pioneering-8-bit-6800-origins),
    we saw how a small but talented team based in Phoenix Arizona developed the 6800
    itself. In the [second](https://thechipletter.substack.com/p/leaving-arizona),
    Motorola’s management tried to force that team to move to Austin, Texas. The majority
    of the team left Motorola and some, including Chuck Peddle and Bill Mensch, joined
    MOS Technology in Pennsylvania, where they created the 6502.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: The 6800 would lose decisively to the 6502 in the competition to become one
    of the leading designs powering the home computer boom of the late 1970s. The
    cheaper and more capable 6502 was used in the Apple II, Commodore’s PET and 64,
    the BBC Micro, and many other popular designs.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: But this wasn’t the end for the 6800 series. Motorola had the resources to rebuild
    its team in Austin, and the clout to attract big customers, including General
    Motors who turned to Motorola and the 6800 for the microprocessor for their new
    engine control system.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: 'General Motors was shifting maybe 6,000,000 vehicles a year at the time: 500,000
    vehicles a month. This was a system that used maybe four chips per system. It
    was a big business.'
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And with the GM deal the 6800 suddenly became a very big business indeed.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '... Motorola microprocessors went from sales of zero to sales of about $250,000,000
    almost overnight, maybe a year to 18 months or something. And it was at a good
    margin.'
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: With a big customer and a successful and profitable business, the evolution
    of the 6800 series continued. The Motorola Microprocessors Data Manual from 1989
    has a summary of all the variants of the design that were available at that time.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: And [Retro StackExchange](https://retrocomputing.stackexchange.com/questions/11911/whats-the-timeline-of-motorola-6800-family-cpus-from-1974-to-1979)
    has a great description of these key variants.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: '**6800**: "[A]nnounced in March 1974 and was in full production by the end
    of that year." "The M6800 microcomputer system was finally in production by November
    1974.".'
  id: totrans-split-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**68A00**, **68B00**: "The new parts were available in July 1976.".'
  id: totrans-split-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**6802**, **6808**: Added onboard clock and (6802 only) 128 bytes of RAM. Announced
    by March 3rd 1977.'
  id: totrans-split-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**6801**, **6803**: Adds 16-bit "D" register as a concatenation of A and B
    and various new instructions, including multiply. This or a very similar MCU appears
    to have been in use by General Motors as early as 1977;'
  id: totrans-split-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**6809**: The earliest mention I can find that includes a month is in an Elsevier
    journal. This seems unlikely to be the initial announcement, but is probably well
    before production. (6809s were not on sale in the back pages of *Byte* in December
    1977.)'
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**6805**: Optimized for controller applications; incompatible architectural
    changes such as X register reduced to 8 bits. It may have existed internally at
    Motorola as early as 1977 or 1978: "this is ''77-''78 timeframe -- they came and
    said, ''Hey, we''d like to have a CMOS version of this 6805 variant.". (The M14605
    is the CMOS 6805\. It and several 6805 variants have data sheets in claims release
    in 1979\. archive.org has an *M6805 M14605 Family Users Manual* dated 1980.'
  id: totrans-split-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**68HC05**: "A low-power variation of the 05," "shipped..in December of 1979."'
  id: totrans-split-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In case you''re wondering about the "holes" in this numbering scheme: The **6804**
    was a reduced-cost modification of the 6805 released around 1982\. The **6806**
    and **6807** designations were never used, as far as I can tell. The **6810**
    was a RAM chip. The **6811** was a 6801 extension introduced in 1984\. The **6812**
    in turn extended that, but not until the 1990s. From the beginning parts from
    **6820** onwards were peripherals.'
  id: totrans-split-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Generally, these were minor variants on the original 6800, with tweaks to the
    instruction set, some additional RAM, or built with a more advanced fabrication
    process.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: One of these new designs was much more ambitious than the others, though. That
    was the 6809.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: By 1977 Motorola saw key competitors working on more advanced 16-bit designs.
    Intel would introduce the 8086 in 1978 and Zilog was working on the Z8000\. So
    the team in Austin started work on an advanced 16-bit design that would compete
    with the new designs from Intel and Zilog.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: …my own perception at the time was that we were going to replace the minicomputer,
    if you will. It was going to be very high-end, maybe a part that would sell for
    several hundred dollars, two or three hundred dollars, but it would be of great
    value to our customers, and have very high margins, and bring in lots of other
    kinds of parts.
  id: totrans-split-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That design would become the 16/32 bit Motorola 68000 which would eventually
    become the leading alternative to Intel’s 8086.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: The complexity and cost of this design left Motorola with a gap though. Many
    customers wouldn’t pay for a CPU as advanced as the 68000\. By now Motorola had
    a wide range of variants on the 6800 design. But these variants couldn’t solve
    the problem that the 6800 architecture was weaker than its leading 8-bit competitors
    like the 6502 and Z80\. So, to better compete with these designs Motorola created
    a new 8-bit architecture, the 6809.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: The 6809 was designed to be ‘source code’ compatible with the 6800\. Programs
    written in 6800 assembly language could be assembled and run on the 6809\. However,
    the machine code created for the 6800 would not run on the 6809, as the meaning
    of many 6800 ‘opcodes’ was changed.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: Before we get to the instruction set, a word on the implementation of the 6809\.
    The much more complex 68000 would make heavy use of ‘micro-code’. The simpler
    6809, however, could make use of broadly the same design approach that had been
    used for the 6800\. A ‘Programmable Logic Array’ or ‘PLA” would control much of
    the operation of the 6809\. We can place the 6800 and 6809 side by side and see
    the similarities in the layout, with the PLA at the top, logic in the middle,
    and the registers and ‘arithmetic and logic unit’ at the bottom.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: '6800 vs 6809 Die Shots : By Pauli Rautakorpi - Own work, CC BY 3.0, https://commons.wikimedia.org/w/index.php?curid=53469083'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: How did the 6809 team decide what features to add to the architecture? Much
    like [John Cocke](https://thechipletter.substack.com/p/the-first-risc-john-cocke-and-the)
    with the pioneering RISC architecture, the IBM 801, they set out to analyze existing
    6800 programs. Their conclusions?
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: By far the most common instructions were the loads and stores, which accounted
    for over 38 percent of all 6800 instructions. Next were the subroutine calls and
    returns with 13 percent, conditional branches with 11 percent and unconditional
    jumps and branches with 6.5 percent … Neither the arithmetic nor' logical instructions
    had as high a usage as might have been expected. Clearly then, enhancements that
    would improve the utility and power of the data movements (such as load and stores)
    would yield the largest return on investment, followed by improvements to subroutine
    linkage and parameter passing.
  id: totrans-split-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It’s worth noting, though, that their analysis was limited to a ‘static’ inspection
    of the number of operations in 6800 machine code, not a ‘dynamic’ analysis of
    which instructions were being executed most often, for example, because they were
    being repeated within loops. It’s arguable that some of these results - the large
    proportion of subroutine calls, for example, might have been quite different if
    the team had been able to use dynamic analysis.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: 'Other conclusions from the analysis included:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: …the offsets for indexed instructions showed that 93 percent of the offsets
    were either 0 or less than 32
  id: totrans-split-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And a majority were not zero.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: 'So the 6809 added some instructions that could add an integer to a 16-bit index
    register. From Rodnay Zak’s ‘Programming the 6809:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Other new features included:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: Direct Page Register
  id: totrans-split-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: One of the things that had made the 6502 so successful, was its extensive use
    of ‘zero page’, or memory locations 0 to 255\. With a very limited number of registers,
    the 6502 relied on the use of ‘zero page’ to access frequently used values. Access
    to these values was faster as only a single address byte was needed to specify
    the address. The 6809 enhanced the use of the zero page by adding a new 8-bit
    ‘Direct Page’ register which allowed the ‘zero page’ to be moved to anywhere in
    the 16-bit address space.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: ‘U’ Stack Pointer
  id: totrans-split-47
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The 6809 added a ‘User’ Stack Pointer’ register - called ‘U’ - as an addition
    to the existing ‘S’ Stack Pointer’.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: Branch Relative Addressing
  id: totrans-split-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In the 6800 (and the Z80 and 6502) there were ‘branch’ instructions with the
    program counter jumping to an address close by with the address determined by
    a single byte ‘offset’. To jump to an address outside this range, it was necessary
    to specify a two-byte ‘absolute address’ for the target code. This meant that
    code typically could not be ‘position independent’, it had to be written to be
    stored at a predetermined set of locations in memory.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: The 6809 changed this by adding the ability to branch to addresses within the
    full 64K memory range, by specifying a two-byte value that would be added to the
    program counter. This meant that compiled or assembled code could potentially
    be ‘position independent’ and loaded and run at any address in memory.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: D Register
  id: totrans-split-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The ‘16-bit accumulator D’ was Motorola’s designation of the combination of
    the A (most significant byte) and B (least significant byte) accumulators. The
    D register could be loaded with a single instruction.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: Multiply Instruction
  id: totrans-split-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Finally, and in a first for an 8-bit processor, the 6809 added an (8-bit) multiply
    instruction.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: A multiply instruction is included which multiplies unsigned binary numbers
    in accumulators A and B and places the unsigned result in the 16-bit accumulator
    D. This unsigned multiply instruction also allows signed or unsigned multiple-precision
    multiplication.
  id: totrans-split-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By the start of 1979, Motorola was ready to launch the 6809 to the world and
    it did so in style, with a three-part article in Byte magazine. The series started
    with text that would probably have seemed a little overwrought, even at the time.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: This is a story. It is a story of computers in general, specifically microcomputers,
    and of one particular microprocessor - with revolutionary social change lurking
    in the background. The story could well be imaginary, but it happens to be true.”
  id: totrans-split-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By the start of 1979, the first 16-bit microprocessors were either available
    or widely known to be on their way. The 6809 was interesting but hardly revolutionary.
    Fortunately, the rest of the series of articles was more focused on providing
    readers with interesting insights into the development of the 6809.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: 'It highlighted the contributions of the two leads of the 6809 project, Joel
    Boney and Terry Ritter” both working in Austin:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: Joel Boney and Terry Ritter are with the Motorola 6800 Micro-processor Design
    Group in Austin TX. joel is responsible for the software input into the design
    of the 6800 family processors and peripheral parts and was a co-architect of the
    M6809\. Terry Ritter is a microcomponent architect, responsible for specification
    of the 6809 advanced microprocessor.
  id: totrans-split-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The task of designing the 6809 is broken down into several separate stages:'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: 'The design of a complex large-scale integration (LSI) part may be conveniently
    broken into three phases: the architectural design, the logic and circuit design/architectural
    review, and the layout software and hardware (breadboard) simulations. Each phase
    has its own requirements.'
  id: totrans-split-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Logic design consists of the production of a cycle-by-cycle flowchart and the
    derivation of the equations and logic circuitry necessary to implement the specified
    design.
  id: totrans-split-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Layout is the actual task of arranging transistors and interconnections to implement
    the logic diagram. Circuit design results will indicate appropriate transistor
    sizes and polysilicon widths; these must now be arranged for minimum area. Every
    attempt is made to make general logic "cells" which can be used in many places
    across the integrated circuit, but area minimization is the principal concern.
  id: totrans-split-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Layout plotters in action - Source Byte March 1979
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: The layout for the chip eventually exists only as a computer database. Each
    cell is individually digitized into the computer, where it can be arbitrarily
    positioned, modified or replicated as desired.
  id: totrans-split-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A full copy of the Byte article is available for premium subscribers to download
    at the end of this post, along with links all parts of the Byte series on the
    6809.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: 'How did the 6809 compare to the competition? Rodnay Zaks ‘Programming the 6809’
    book (see link at the end of this post) said:'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
- en: When you have mastered the material in this book, you will understand how 6809
    systems, when properly designed and programmed, can deliver near 16-bit performance
    with 8-bit economy
  id: totrans-split-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Quite a claim! Does it stack up? We looked at the performance of a range of
    contemporary systems in ‘Once More through the Sieve’.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
- en: That post looked at a Byte article that performs a simple test of the performance
    of a range of system in 1983.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: So how does the 6809 compare?
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
- en: An assembly language version of the test running on the 6809 takes 5.1 seconds
    compared to 6.8 on a Z80 and 13.9 on a 6502 (clock speeds unspecified in each
    case). Comparing with the first 16-bit processors, a 5MHz 8088 takes 4.1 seconds,
    an 8MHz 8086 2.9 seconds, but Motorola’s own 68000 running at 8MHz is much faster
    at just 0.49 seconds.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
- en: So the 6809 was competitive with Intel’s 8088 but completely outclassed by Motorola’s
    own 68000.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: The 6809 was launched with a bang and had performance approaching Intel’s first
    16-bit designs. Would it be enough for it to make an impact? It certainly attracted
    interest early on, including at Apple in the team that was designing the Macintosh.
    According to [folklore.org](https://www.folklore.org/Five_Different_Macs.html)
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
- en: '“​The first Macintosh digital board, designed in late 1979, was based on Jef
    Raskin''s specifications: it had a Motorola 6809E microprocessor, 64K of memory,
    and a 256x256 black and white, bit-mapped graphics display.'
  id: totrans-split-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first Macintosh was a cute little computer, but it was fundamentally limited
    by the 6809 microprocessor, which only had 16 bits of address space.
  id: totrans-split-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: But Apple was already working on the Lisa which had adopted the 68000 and reusing
    some of the Lisa’s optimized 68000 assembly source code in the Macintosh was an
    attractive option, so the 6809 was quickly dropped in favor of its larger cousin.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
- en: 'Perhaps the most well-known use of the 6809 in a production computer was in
    the Tandy Color Computer. The design had a surprising origin story: as a terminal
    for farmers in Kentucky in a project known as ‘Green Thumb’. Quoting from the
    document produced for US Congress.'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
- en: Green Thumb, the experimental videotext project tested by the Kentucky Cooperative
    Extension Service and the University of Kentucky College of Agriculture, was conceived
    in 1977 as means of providing farmers with real-time weather, marketing and agricultural
    information. As a result of efforts by Senator Walter Ruddiest (D-Ky.), the Department
    of Agriculture provided $200,000 and the National Weather Service $100,000 for
    a pilot project involving two counties in Kentucky. After technical committee
    determined hardware specifications, bids for the equipment were taken. Motorola
    won the contract for the user terminals or "Green Thumb Boxes", while Western
    Union provided the two county host computers; the Computer Division of Tandy Corporation
    later joined with Motorola in manufacturing user terminals. Two hundred farmers
    from Todd and Shelby Counties were chosen for the experiment which began operation
    in March 1980.
  id: totrans-split-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This design was adapted to create a computer that Tandy could sell to home users.
    Although it was called the Tandy TRS-80 Color, it had almost nothing in common
    with its predecessor TRS-80 models, which used the Z80 processor.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
- en: Motorola supplied all the key components of the Tandy Color and also made a
    reference computer design available to third parties. It was relatively easy for
    other companies to use that reference design to build their version of that design.
    One firm that did so was based thousands of miles away from Austin, in Wales in
    the UK. The Welsh flag has a dragon so it was named Dragon Data and it launched
    with a home computer based on Motorola’s 6809 reference design, the Dragon 32.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
- en: The Dragon 32 was followed by the Dragon 64 with 64KB of RAM. As the home computer
    market contracted in the early 1980s, Dragon Data soon got into financial difficulties
    and was sold to a Spanish startup which in turn failed a couple of years later.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
- en: With a more sophisticated and ambitious 8-bit processor, it made sense for Motorola
    to invest in software that could make the most of the capabilities of the new
    design. So they commissioned Microware to develop both a BASIC interpreter and
    an operating system for the 6809.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
- en: The first version ("OS-9 Level One"), which dates back to 1979–1980, was written
    in assembly language for the Motorola 6809 CPU, and all of its processes ran within
    the 64KB address space of the CPU without a memory management unit. It was developed
    as a supporting operating system for the BASIC09 project, contracted for by Motorola
    as part of the 6809 development.
  id: totrans-split-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: OS-9 would continue to be developed and ported, first to the 68000 and then
    to a wide range of other processor architectures including PowerPC, Arm, and Intel’s
    x86, and is still in use in embedded applications today.
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
- en: The 6809 also made it into several arcade video games, including the popular
    ‘Defender’.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
- en: The 6809’s architecture was an improvement over its predecessors but it was
    still an architectural dead end. The future lay with the 8086, 68000, and their
    successors.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
- en: Contrary to the hyperbole of the Byte article, the 6809 wasn’t revolutionary,
    it was evolutionary. And as an 8-bit design it had some clear limitations.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
- en: 'The 6809’s designers hadn’t tried to address perhaps the most significant limitation
    of competing 8-bit designs, the fact that they were limited to 64KB of memory.
    By the early 1980s, even cheap home computers were using the whole of the 64K
    address space. There was an option to expand the 6809’s memory to up to 2 MB using
    an external Memory Management Unit, the 6829\. According to the 6829’s manual
    the chip:'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
- en: • Expands Memory Address Space from 64K to 2 Megabytes
  id: totrans-split-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: • Provides Task Isolation and Write Protection
  id: totrans-split-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: • Provides Efficient Memory Allocation; 1024 Pages of 2K Bytes Each
  id: totrans-split-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Bu perhaps the biggest factor that limited adoption of the 6809 was Motorola’s
    own 68000, also launched in 1979\. The ambition of the 16/32-bit 68000 meant that
    it had nothing in common with the 6800 or 6809 and so there was no sensible upgrade
    path from the 6809 to the 68000\. The 6809’s architecture was an improvement over
    its predecessors but it was still an architectural dead end. The future lay with
    the 8086, 68000, and their successors.
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
- en: After the paywall, the full Byte article from January 1979 and links to further
    reading on the 6809 and the TRS-80 Color and Dragon 32.
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
