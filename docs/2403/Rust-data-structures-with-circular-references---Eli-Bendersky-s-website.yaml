- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:41:15'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Rust data structures with circular references - Eli Bendersky's website
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://eli.thegreenplace.net/2021/rust-data-structures-with-circular-references/](https://eli.thegreenplace.net/2021/rust-data-structures-with-circular-references/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*November 12, 2021 at 20:30* *Tags [Rust](https://eli.thegreenplace.net/tag/rust)*
    *To implement its safety guarantees, the Rust compiler keeps careful track of
    ownership and references throughout a program. This makes writing certain kinds
    of data structures challenging; in particular, data structures that have circular
    references.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with a simple binary tree:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Since the Rust compiler should be able to calculate the size of a struct at
    compile-time, `left` and `right` typically use a heap-allocated `Box`. These boxes
    are wrapped in an `Option` because a node's left or right child might be empty.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Now suppose we want to add a *parent* link to every node. This is useful for
    certain tree structures; for example, in a [binary search tree](https://en.wikipedia.org/wiki/Binary_search_tree)
    (BST), a parent link can be used to efficiently find the successor of a node.
    How can we do that?
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: The "obvious" approach fails
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can''t just add a `parent: Option<Box<Node>>` field to `Node`, because that
    would imply that a node owns its parent; this is clearly wrong. In fact, our original
    `Node` definition already makes it clear that a parent owns its children, not
    the other way around.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: 'So we probably want to add a *reference* instead; a parent owns its children,
    but a child may *refert to* a parent. That sounds right; let''s try it:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Rust will refuse to compile this, asking for an explicit lifetime parameter.
    When we store a reference in a struct field, Rust wants to know how the lifetime
    of this reference relates to the lifetime of the struct itself. Fair enough, we
    can do that:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now the lifetime is explicit: we tell the compiler that the lifetime of the
    `parent` reference is the same as the `Node` itself. This struct definition will
    compile, but writing actual code manipulating it will very quickly get into an
    altercation with the borrow checker. Consider the code that would insert a new
    child node into the current node; to mutate the current node, a mutable reference
    to it has to be in scope. At the same time, the new child''s parent link is a
    reference to the node. The borrow checker won''t let us create a reference to
    an object which already has a live mutable reference to it; it also won''t let
    us mutate an object while any other reference to it is alive.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: As an exercise, try to write an insertion method for the tree using this `Node`
    definition; you'll run into the problem fairly quickly.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: Now what?
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Clearly, the "obvious" way doesn't work. And indeed, thinking about it from
    first principles, it shouldn't. In this post I'm using BSTs with parent links
    as a simple case study, but there are even more obvious (and perhaps more useful)
    examples. Consider a graph data structure; a node has edges pointing to other
    nodes, and two nodes can easily point to each other. Who owns whom? Since this
    question cannot be answered at compile-time in the general case, it means we can't
    just use plain Rust references for these "points to" relations. We need to be
    somewhat more clever.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，“显而易见”的方法行不通。实际上，从第一原则考虑，它不应该。在本文中，我使用带有父链接的BST作为简单的案例研究，但还有更明显（也许更有用）的例子。考虑一个图数据结构；一个节点具有指向其他节点的边，两个节点可以轻松地相互指向。谁拥有谁？由于这个问题在一般情况下无法在编译时回答，这意味着我们不能仅仅使用普通的Rust引用来处理这些“指向”关系。我们需要稍微聪明一点。
- en: 'Having tackled this issue over and over again, Rust programmers have settled
    on three potential solutions:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 多次解决这个问题后，Rust程序员已经确定了三种潜在的解决方案：
- en: Defer borrow checking to *run-time*, by using a reference-counted pointer (`std::rc::Rc`)
    to a `std::cell:RefCell`.
  id: totrans-split-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将借用检查推迟到*运行时*，通过对`std::rc::Rc`到`std::cell::RefCell`的引用计数指针来实现。 '
- en: Centralize the ownership (e.g. all nodes are owned by a vector of nodes in the
    `Tree`), and then references become *handles* (indices into the abovementioned
    vector).
  id: totrans-split-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集中所有权（例如，所有节点由 `Tree` 中的节点向量拥有），然后引用变成*句柄*（指向上述向量的索引）。
- en: Use raw pointers and `unsafe` blocks.
  id: totrans-split-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用原始指针和`unsafe`块。
- en: In this post, I'll present each of these approaches, applied to implementing
    a reasonably feature-complete BST with insertion, deletion, a "get successor"
    method and inorder traversal. The full code for this post is available in [this
    repository](https://github.com/eliben/code-for-blog/tree/main/2021/rust-bst);
    the post only presents a few snippets of interest for each approach. Refer to
    the code repository for the complete implementations with comments and extensive
    tests.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将介绍每一种方法，应用于实现具有插入、删除、"获取后继"方法和中序遍历的合理功能完整BST。此文的完整代码可在 [此存储库](https://github.com/eliben/code-for-blog/tree/main/2021/rust-bst)
    中找到；本文仅展示了每种方法的一些感兴趣的片段。有关带有注释和广泛测试的完整实现，请参阅代码存储库。
- en: Run-time borrow checking with Rc and RefCell
  id: totrans-split-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Rc和RefCell进行运行时借用检查
- en: 'This approach uses a combination of two data structures from the Rust standard
    library:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法使用了Rust标准库中的两种数据结构的组合：
- en: '`std::rc::Rc` is a reference-counted pointer, providing shared ownership of
    heap-allocated data. Multiple instances of `Rc` can refer to the same data; when
    all references are gone, the heap allication is dropped . This is quite similar
    to a `shared_ptr` in C++.'
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::rc::Rc`是一个引用计数指针，提供对堆分配数据的共享所有权。多个`Rc`实例可以引用相同的数据；当所有引用消失时，堆分配将被丢弃。这与C++中的`shared_ptr`非常相似。'
- en: '`Rc` has a *weak dual*, `std::rc::Weak`; this represents a weak pointer to
    data owned by some other `Rc`. While we can access the data through a `Weak`,
    if only weak pointers remain the allocation will be dropped. In C++ this would
    be a `weak_ptr`.'
  id: totrans-split-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Rc`有一个*弱对等物*，`std::rc::Weak`；这表示对由其他`Rc`拥有的数据的弱指针。虽然我们可以通过`Weak`访问数据，但如果只剩下弱指针，分配将被丢弃。在C++中，这将是`weak_ptr`。'
- en: '`std::cell::RefCell` is a mutable memory location with *dynamically* checked
    borrow rules. `RefCell` allows us to take and pass around references to heap data
    without the scrutiny of the borrow checker. However, it''s still safe; all the
    same borrow rules are enforced by `RefCell` at run-time.'
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`std::cell::RefCell`是一个带有*动态*检查借用规则的可变内存位置。`RefCell`允许我们在堆数据周围获取和传递引用，而不受借用检查器的严格控制。但是，它仍然是安全的；`RefCell`在运行时强制执行所有相同的借用规则。'
- en: You can see the full code implementing this approach [here](https://github.com/eliben/code-for-blog/blob/main/2021/rust-bst/src/rcrefcell.rs).
    In what follows, I'll highlight some interesting parts.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里看到实现此方法的完整代码 [here](https://github.com/eliben/code-for-blog/blob/main/2021/rust-bst/src/rcrefcell.rs)。接下来，我将突出显示一些有趣的部分。
- en: 'This is how can define our BST data structure :'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们可以定义我们的BST数据结构的方法：
- en: '[PRE3]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Owning "links" are represented by a `Option<Rc<RefCell<Node>>>`; non-owning
    links are represented by `Option<Weak<RefCell<Node>>>`. Let''s look at some representative
    code samples:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有的“链接”由`Option<Rc<RefCell<Node>>>`表示；非拥有的链接由`Option<Weak<RefCell<Node>>>`表示。让我们看一些代表性的代码示例：
- en: '[PRE4]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For simplicity, the code samples in this post separate the operation on the
    root into a top level function/method, which then calls a recursive method that
    operates at the node level. In this case, `insert_at` takes a link and inserts
    the new data as the child of that node. It preserves the BST invariant (smaller
    implies left child, larger implies right child). The interesting thing to note
    here is the `borrow_mut()` call at the very beginning. It obtains a mutable reference
    from the `RefCell` pointed to by `atnode`. But this isn't just a regular Rust
    mutable reference, as in `&mut`; instead, it's a special type called `std::cell::RefMut`.
    This is where the mutability magic happens - there is no `&mut` in sight, yet
    the code can actually mutate the underlying data .
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 简单起见，本文代码示例将根节点的操作分离为顶级函数/方法，然后调用一个递归方法在节点级别进行操作。在这种情况下，`insert_at`接受一个链接，并将新数据插入为该节点的子节点。它保留了BST不变性（较小的意味着左子节点，较大的意味着右子节点）。这里需要注意的有趣之处是起始处的`borrow_mut()`调用。它从`atnode`指向的`RefCell`获取了一个可变引用。但这不只是一个常规的Rust可变引用，如`&mut`；相反，它是一种特殊类型，称为`std::cell::RefMut`。这就是可变性魔法发生的地方
    - 看不到`&mut`，但代码实际上可以改变底层数据。
- en: To reiterate, this code remains safe; if you attempt to do another `borrow_mut()`
    on the `RefCell` while the previous `RefMut` is in scope, you'll get a run-time
    panic. The safety is guaranteed at run-time.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，此代码是安全的；如果在先前的`RefMut`仍在作用域内时尝试对`RefCell`进行另一个`borrow_mut()`，将导致运行时恐慌。这种安全性在运行时得到了保证。
- en: 'Another interesting example is the private `find_node` method, which finds
    and returns a node with the given data, starting from some node:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的例子是私有的`find_node`方法，它从某个节点开始查找并返回具有给定数据的节点。
- en: '[PRE5]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `.borrow()` call at the beginning is how we ask a `RefCell` to provide a
    immutable reference to the internal data (naturally, this cannot coexist at run-time
    with any mutable references). When we return a node that was found, we `clone`
    the `Rc`, because we need a separate shared owner for the node. This lets Rust
    guarantee that the node cannot just be dropped while the returned `Rc` is still
    alive.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 起初的`.borrow()`调用是我们要求`RefCell`提供对内部数据的不可变引用的方式（自然地，在运行时这不能与任何可变引用同时存在）。当我们返回找到的节点时，我们`clone`了`Rc`，因为我们需要一个独立的共享所有者来持有节点。这让Rust能够保证，只要返回的`Rc`还活着，节点就不会被简单丢弃。
- en: As the full code sample demonstrates, this approach is workable. It takes a
    lot of practice and patience to get right though, at least for inexperienced Rust
    programmers. Since each node is wrapped in three levels of indirection (`Option`,
    `Rc` and `RefCell`) writing the code can be somewhat tricky, since at any point
    you have to remember which level of inderection you're "currently in".
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如完整的代码示例所示，这种方法是可行的。对于经验不足的Rust程序员来说，确实需要大量的实践和耐心才能做得好。由于每个节点都包装在三个间接层次（`Option`、`Rc`和`RefCell`）中，编写代码可能有些棘手，因为在任何时候你都必须记住当前处于哪个间接层次。
- en: Another downside of this approach is that getting a plain reference to data
    stored in the tree isn't easy. As you can see in the sample above, the top-level
    `find` method doesn't return the node or its contents, but simply a boolean. This
    isn't great; for example, it makes the `successor` method sub-optimal. The problem
    here is that with `RefCell` we can't just return a regular `&` reference to the
    data, since the `RefCell` must keep a run-time track of all the borrows. We can
    only return a `std::cell::Ref`, but this leaks implementation details. This isn't
    a fatal flaw, but just something to keep in mind while writing code using these
    types.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的另一个缺点是，获取存储在树中数据的普通引用并不容易。正如你在上面的示例中看到的，顶级的`find`方法不返回节点或其内容，而只是一个布尔值。这并不好；例如，它使得`successor`方法的子优化不足。这里的问题是，使用`RefCell`时我们不能直接返回数据的常规`&`引用，因为`RefCell`必须在运行时跟踪所有借用。我们只能返回`std::cell::Ref`，但这会泄露实现细节。这不是致命的缺陷，只是在使用这些类型编写代码时要牢记的事情。
- en: Using handles into a vector as Node references
  id: totrans-split-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用句柄作为向量中的节点引用
- en: 'The second approach we''re going to dicuss has the `Tree` owning all the nodes
    created in it, using a simple `Vec`. Then, all node references become "handles"
    - indices into this vector. Here are the data structures:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论的第二种方法是`Tree`拥有其中创建的所有节点，使用简单的`Vec`。然后，所有节点引用都变成了"句柄" - 即这个向量中的索引。以下是数据结构：
- en: '[PRE6]'
  id: totrans-split-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once again, the full code is available [on GitHub](https://github.com/eliben/code-for-blog/blob/main/2021/rust-bst/src/nodehandle.rs);
    here I''ll show some salient parts. Here''s insertion:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，完整代码在[Github上可用](https://github.com/eliben/code-for-blog/blob/main/2021/rust-bst/src/nodehandle.rs)；这里我将展示一些显著部分。这是插入：
- en: '[PRE7]'
  id: totrans-split-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Where `alloc_node` is:'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`alloc_node`是：
- en: '[PRE8]'
  id: totrans-split-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After writing code with `Option<Rc<RefCell<...>>>`, this handle approach feels
    *very simple*. There are no layers of indirection; a handle is an index; a reference
    to a node is a handle; handle 0 means "none", that's it .
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写带有`Option<Rc<RefCell<...>>>`的代码之后，这种处理方式感觉*非常简单*。没有间接层；一个句柄就是一个索引；对节点的引用就是一个句柄；句柄0表示“无”，就是这样。
- en: This version is also likely to be much more efficient than the linked version,
    because it has far fewer heap allocations and the single vector is very cache
    friendly.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本也可能比链式版本更高效，因为它有远少于堆分配的内存和一个非常适合缓存的单一向量。
- en: That said, there are some issues here as well.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，这里也有一些问题。
- en: First, we take some of the safety into our own hands. While this approach won't
    result in corrupted memory, double frees or accessing freed pointers, it can lead
    to run-time panics and other problems because we deal in "raw" indices to a vector.
    Due to bugs, these incides may point past the vector's bounds, or point at the
    wrong slot, etc. For example, nothing prevents us from modifying a slot while
    there are "live handles" to it.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要自己保证一些安全性。虽然这种方法不会导致内存损坏、双重释放或访问已释放的指针，但它可能会导致运行时恐慌和其他问题，因为我们处理向量的“原始”索引。由于错误，这些索引可能会指向向量边界之外，或者指向错误的插槽等等。例如，没有任何防止我们在有“活动句柄”时修改插槽的机制。
- en: 'The other issue is removing tree nodes. Right now, the code "removes" a node
    simply by not pointing to it with any live handle. This makes the node unreachable
    through the tree''s methods, but it does not deallocate memory. In fact, this
    BST implementation never deallocates anything:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是删除树节点。目前，代码通过不在任何活动句柄中指向它来“删除”节点。这使得通过树的方法无法访问节点，但不会释放内存。事实上，这个BST实现从不释放任何东西：
- en: '[PRE9]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is obviously wrong for real-world applications. At the very least, this
    implementation can be improved by creating a "free list" of unused indices which
    can be reused when nodes are added. A more ambitious approach could be to implement
    a full-fledged garbage collector for the nodes. If you're up for a challenge,
    give it a try ;-)
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这对于实际应用是错误的。至少，通过创建一个未使用索引的“空闲列表”，可以改进此实现，当添加节点时可以重复使用。一个更雄心勃勃的方法可能是为节点实现一个完整的垃圾收集器。如果你想挑战自己，可以试试看
    ;-)
- en: Using raw pointers and unsafe blocks
  id: totrans-split-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用原始指针和不安全块
- en: The third and final approach to discuss is using *raw pointers* and `unsafe`
    blocks to implement our BST. This approach feels very familiar if you're coming
    from a C / C++ background. The full code is [here](https://github.com/eliben/code-for-blog/blob/main/2021/rust-bst/src/unsafeall.rs).
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种讨论的方法是使用*原始指针*和`unsafe`块来实现我们的BST。如果你来自C/C++背景，这种方法会感觉非常熟悉。完整代码在[这里](https://github.com/eliben/code-for-blog/blob/main/2021/rust-bst/src/unsafeall.rs)。
- en: '[PRE10]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Node links become `*mut Node`, which is a raw pointer to a mutable `Node`.
    Working with raw pointers is quite similar to writing C code, with a few idiosyncracies
    around allocating, deallocating and accsesing data through these pointers. Let''s
    start with allocation; here are the `Node` constructors:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 节点链接变成`*mut Node`，这是一个可变`Node`的原始指针。使用原始指针与编写C代码非常相似，在分配、释放和通过这些指针访问数据时有一些特殊情况。让我们从分配开始；这里是`Node`的构造函数：
- en: '[PRE11]'
  id: totrans-split-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The simplest way I found to allocate new memory for a raw pointer is using `Box::into_raw`,
    and it works well as long as we remember that deallocating this memory is on us
    from that point on (more on this later).
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我找到的为原始指针分配新内存的最简单方法是使用`Box::into_raw`，只要记住从那时起我们负责释放这些内存（稍后详述）。
- en: 'Let''s see how insertion works:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看插入是如何工作的：
- en: '[PRE12]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The interesting point to notice here is the `unsafe` block the body of `insert_node`
    is wrapped in. This is required because this code dereferences raw pointers. In
    Rust it's OK to assign pointers and pass them around without special provisions,
    but dereferencing requires `unsafe`.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有趣的一点是`insert_node`体中包裹的`unsafe`块。这是必需的，因为此代码解引用原始指针。在Rust中，可以分配指针并将其传递给其他地方而无需特殊条款，但解引用则需要`unsafe`。
- en: 'Let''s see how removing nodes work; here''s `replace_node`, which performs
    the same task as the similarly named method we''ve seen in the node handle approach:'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何删除节点的工作；这里是`replace_node`，它执行与我们在节点处理方法中看到的同名方法相同的任务：
- en: '[PRE13]'
  id: totrans-split-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This demonstrates how we deallocate heap data through raw pointers: by using
    `Box::from_raw`. This makes a `Box` that takes ownership of the data; a `Box`
    has a destructor, so it will actually deallocate it when it goes out of scope.'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`Box::from_raw`来释放堆数据的示例展示了我们如何通过原始指针来释放堆数据：这将创建一个`Box`，它接管数据的所有权；`Box`有一个析构函数，因此当它超出作用域时，它会实际释放它。
- en: 'This brings us to an important point: we have to take care of releasing the
    memory of the `Tree` now. Unlike in the previous approaches, the default `Drop`
    implementation won''t do here, since the only thing contained in our `Tree` is
    `root: *mut Node` and Rust has no idea how to "drop" that. If we run our tests
    without implementing the `Drop` trait explicitly, there will be memory leaks.
    Here''s a simple implementation of `Drop` to fix that:'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: '这引出了一个重要的点：我们现在必须小心释放`Tree`的内存。与之前的方法不同，由于我们`Tree`中唯一包含的是`root: *mut Node`，Rust不知道如何“drop”它。如果我们在不显式实现`Drop`特性的情况下运行我们的测试，将会出现内存泄漏。这里是一个简单的`Drop`实现来解决这个问题：'
- en: '[PRE14]'
  id: totrans-split-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As an exercise, try to implement a more efficient `Drop`!
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 作为练习，尝试实现一个更高效的`Drop`！
- en: Writing the code with raw pointers felt fairly natural; while the final LOC
    count is similar, the raw pointers required significantly less mental burden than
    using `Option<Rc<RefCell<Node>>>` . Though I didn't benchmark it, my hunch would
    be that the pointer version is more efficient as well; at the very least, it eschews
    the dynamic borrow checks that `RefCell` does. The flip side is, of course, the
    loss of safety. With the `unsafe` version we can run into all the good-old C memory
    bugs.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原始指针编写代码感觉相当自然；虽然最终的行数计数相似，但原始指针需要的心理负担显著少于使用`Option<Rc<RefCell<Node>>>`。虽然我没有对其进行基准测试，但我猜测指针版本也更有效率；至少它避开了`RefCell`所做的动态借用检查。另一面是安全性的损失。使用`unsafe`版本时，我们可能会遇到所有传统的C内存错误。
- en: Conclusion
  id: totrans-split-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: 'The goal of this post was to review the different approaches one could take
    to implement non-trivial linked data structures in Rust. It covers approaches
    with three levels of safety:'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的目标是回顾在Rust中实现非平凡链式数据结构时可以采用的不同方法。它涵盖了三个安全级别的方法：
- en: Fully safe with `Rc` and `RefCell`.
  id: totrans-split-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Rc`和`RefCell`则完全安全。
- en: Memory safe but otherwise more prone to bugs (such as aliasing borrows) with
    integer handles into a `Vec`.
  id: totrans-split-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存安全但是更容易出现漏洞（例如别名借用）的是将整数句柄用作`Vec`。
- en: Fully unsafe with raw pointers.
  id: totrans-split-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全使用原始指针是不安全的。
- en: All three approaches have their merits and are useful to know, IMHO. Anecdotal
    evidence from Rust's own standard library and some popular crates suggests that
    the third approach - using raw pointers and `unsafe` - is quite popular.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这三种方法各有其优点，并且都是有用的。来自Rust标准库和一些流行的crate的经验证据表明，第三种方法——使用原始指针和`unsafe`——非常受欢迎。
- en: Thanks for reading! Since this is my first non-trivial Rust post, I'm particularly
    interested in any comments, feedback or suggestions. Feel free to send me [an
    email](mailto:eliben@gmail.com) or leave a comment on whatever aggregation site
    this gets reposted to - I keep an eye on these from time to time.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！由于这是我第一篇非平凡的Rust文章，我特别感兴趣听取任何评论、反馈或建议。请随时给我发送[电子邮件](mailto:eliben@gmail.com)或在这篇文章被转发到的任何聚合网站上留下评论——我会不时关注这些的。
- en: '* * **'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: '* * **'
