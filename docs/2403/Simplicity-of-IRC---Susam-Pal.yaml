- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:55:13'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Simplicity of IRC - Susam Pal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://susam.net/simplicity-of-irc.html](https://susam.net/simplicity-of-irc.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <main>
  prefs: []
  type: TYPE_NORMAL
- en: Simplicity of IRC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By **Susam Pal** on 09 Jan 2022
  prefs: []
  type: TYPE_NORMAL
- en: During discussions with my friends and colleagues, whenever the topic of chat
    protocols comes up, I often remark how simple the Internet Relay Chat (IRC) protocol
    is and how this simplicity has fostered creativity in the lives of many young
    computer hobbyists growing up in the late 1990s and early 2000s. For many of us
    who were introduced to the Internet during that time, writing an IRC bot turned
    out to be one of our first few non-trivial hobby programming projects that involved
    network sockets, did something meaningful, and served actual users.
  prefs: []
  type: TYPE_NORMAL
- en: Simplicity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The underlying payloads that IRC servers and clients exchange during an IRC
    session are quite simple to read manually and understand. While implementing IRC
    servers still involves significant work to keep track of users, channels, and
    exchanging network state and messages between servers, implementing IRC clients
    can often be quite simple. With a convenient programming language, one can develop
    all kinds of fun tools and bots pretty quickly. Only creativity is the limit!
  prefs: []
  type: TYPE_NORMAL
- en: In the early days of IRC, it was quite common for someone with basic programming
    skills to write a simple IRC bot within a matter of hours. Such IRC bots typically
    responded to requests from users, answered frequently asked questions, hosted
    trivia quiz, etc. The simplicity of the protocol made it very enticing to write
    programs that could talk to IRC servers directly. In fact, many people chose to
    write the code to parse and create IRC payloads from scratch. Observing the TCP/IP
    packets with a packet analyser such as Wireshark or Tcpdump was all one needed
    to learn about the various payload formats. Additionally, [RFC 1459](https://www.rfc-editor.org/rfc/rfc1459)
    served as a good reference to learn the IRC specification.
  prefs: []
  type: TYPE_NORMAL
- en: As a result of the simplicity of the IRC protocol, sometimes when I would find
    myself needing to join an IRC channel, say to seek some technical help, from a
    system without an IRC client installed, I would often just start a `telnet`, `nc`,
    or `openssl` connection directly to my favourite IRC network and then type out
    IRC protocol commands by hand to join the channel I need and talk to channel users.
  prefs: []
  type: TYPE_NORMAL
- en: Session
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To illustrate how simple the IRC protocol is, here is an example of a minimal
    IRC session that involves joining a channel and posting a message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the above session, the user connects to the Libera Chat network with the
    nickname `humpty`, joins a channel named `#test`, and posts a message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the above session is not encrypted. By convention, IRC port 6667
    is used for cleartext connections. A separate port, such as port 6697, is available
    for encrypted connections. Here is an example of an encrypted IRC session established
    with the OpenSSL command line tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The ellipsis denotes lines omitted for the sake of brevity. The remainder of
    the session is quite similar to the first example in this post.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting here that although the payload format of IRC protocol is
    quite simple, as one starts writing IRC clients, one would stumble upon several
    tiny details about the protocol that needs to be taken care of, e.g., authenticating
    to the network, responding to `PING` messages from the server to avoid ping timeouts,
    splitting messages into shorter messages so that the overall payload does not
    exceed the message length limit of 512 characters, etc. For a serious IRC client,
    relying on a suitable library that already solves these problems and implements
    the IRC specification accurately is of course going to be useful. But for a hobbyist
    who wants to understand the protocol and write some tools for fun, the textual
    nature of the IRC protocol and its simplicity offers a fertile ground for experimentation
    and creativity.
  prefs: []
  type: TYPE_NORMAL
- en: Join
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In case you have never used IRC but this post has piqued your interest and
    you want to try it out, you probably don''t want to be typing out IRC payloads
    by hand. You would want a good IRC client instead. Let me share some convenient
    ways to connect to the Libera Chat network. Say, you want to join the `#python`
    channel on Libera Chat network. Here are some ways to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Join via web interface: [web.libera.chat/#python](https://web.libera.chat/#python).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Join using Irssi: On macOS, run `brew install irssi` to install it. On Debian,
    Ubuntu, or a Debian-based Linux system, run `sudo apt-get install irssi`. Then
    enter `irssi -c irc.libera.chat` to connect to Libera Chat. Then within Irssi,
    type `/join #python`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are numerous other ways to join IRC networks. There are GUI desktop clients,
    web browser plugins, Emacs plugins, web-based services, bouncers, etc. that let
    users connect to IRC networks in various ways. On Libera Chat, there are various
    channels for open source projects (`#emacs`, `#linux`, etc.), communities around
    specific subjects (`##math`, `#physics`, etc.), programming languages (`#c`, `#c++`,
    `#commonlisp`, etc.). Type the `/join` command followed by a space and the channel
    name to join a channel and start posting and reading messages there. It is also
    possible to search for channels by channel names. For example, on Libera Chat,
    to search for all channels with "python" in its name, enter the IRC command: `/msg
    alis list python`.'
  prefs: []
  type: TYPE_NORMAL
- en: Although I have used Libera Chat in the examples above, there are plenty of
    other IRC networks too such as EFNet, DALNet, OFTC, etc. Libera Chat happens to
    be one of the very popular and active networks for open source projects and topic
    based communities. I use it everyday, so I chose it for the examples here. There
    are many tight-knit communities on Libera Chat. Some of my favourite ones are
    `#commonlisp`, `#emacs`, `#python`, etc. All of these have very nice and active
    communities with great attitudes towards beginners.
  prefs: []
  type: TYPE_NORMAL
- en: </main>
  prefs: []
  type: TYPE_NORMAL
