- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:59:26'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Writing manual pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://liw.fi/manpages/](https://liw.fi/manpages/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Manual pages are the canonical type of documentation for Unix systems. They
    are a bit arcane, but for a technology several decades old, they've held up quite
    well. The arcane bit is the markup language. This is a brief tutorial on writing
    good manual pages, at least for the typical cases. You'll be assumed to be familiar
    with reading manual pages already.
  prefs: []
  type: TYPE_NORMAL
- en: There are actually many ways to produce manual pages. The **`man`(1)** command
    needs a file using **`troff`(1)** formatting commands. [`troff`](http://en.wikipedia.org/wiki/Troff)
    is a typesetting system from the 1970s, written by the Unix developers. The `troff`
    file can be written manually, or generated from other formats, such as DocBook
    or Perl POD markup. On Linux, `groff`, the GNU implementation of `troff`, is used.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions in manual pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The important thing is that the formatted page follows manpage typesetting
    and other conventions, so that readers can efficiently extract the needed information
    from them. This bit is important: manpages are **reference documentation,** intended
    to **quickly answer questions** like "what is the purpose of this command" or
    "is there an option to show more information about files".'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the more important conventions:'
  prefs: []
  type: TYPE_NORMAL
- en: the page should be short and to the point, without sacrificing clarity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: use only the usual sections, in the usual order; see **`man-pages`(7)** for
    details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in particular, give a brief, readable summary of command line syntax in SYNOPSIS;
    if there are a lot of options, list them in the OPTIONS section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: format the OPTIONS section so that options are in bold and their optional arguments
    are in italic, to improve fast skimming of the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for anything that is complicated to use, add an EXAMPLE section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'add examples for the common cases, not just special ones: you may think your
    program is obvious to use, but not everyone will find it so'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: don't forget ENVIRONMENT and FILES sections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the SEE ALSO section is also often useful to add
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example manual page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`troff` is a programming language for typesetting. It has a macro facility,
    and several macro packages have been written for writing manual pages. The most
    common of these is the `-man` one. Here''s an example of a manpage, using that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Save that in a file, called `corrupt.1`, and then view it using the command
    `man -l corrupt.1`. The output should be approximately like this (after a manual
    conversion to HTML to allow fonts):'
  prefs: []
  type: TYPE_NORMAL
- en: '`CORRUPT(1)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**NAME**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: corrupt - modify files by randomly changing bits
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**SYNOPSIS**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**corrupt** [**-n** BITS] [**--bits** BITS] file...'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**DESCRIPTION**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**corrupt** modifies files by toggling a randomly chosen bit.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**OPTIONS**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**-n**, **--bits**=BITS'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Set the number of bits to modify. Default is one bit.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: CORRUPT(1)`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The title: `.TH`'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every manual page should start by specifying its title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, `CORRUPT` is the name of the manual page, and `1` is the section in which
    the manual page belongs (section 1 for user commands, 2 for system calls, etc;
    see **`man-pages`(7)`** for the whole list).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can additionally add three more pieces of information: the date of this
    revision of the manual page, where the program it documents came from, and the
    title of the whole book to which this page belongs to. I pretty much never use
    the optional ones: keeping the date up to date is a pain, and the others are not
    all that useful for my personal projects.'
  prefs: []
  type: TYPE_NORMAL
- en: '`NAME` section'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The NAME section declares the name of command that is being documented. It also
    gives a very brief explanation of what it does. These two parts are separated
    by backslash-dash. That's a magic combination, the `man` command requires it.
  prefs: []
  type: TYPE_NORMAL
- en: This section is the source for data for `man -k` searches. That's a useful feature,
    and it is good to pay a bit of attention to making the brief explanation as useful
    as possible. However, do keep it brief; having it be broken on several lines looks
    bad. (It may be a sign of a badly designed program if the brief explanation is
    hard to write.)
  prefs: []
  type: TYPE_NORMAL
- en: The Debian and derivatives `man` implementation comes with `lexgrog`, which
    can verify that you get the NAME section right.
  prefs: []
  type: TYPE_NORMAL
- en: '`SYNOPSIS` section'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this section, we give the user a summary of how the command line syntax
    of the program looks like. Font usage is important here, and carries information.
    All the parts that are in bold are things that the user is expected to write verbatim.
    Italic indicates values the user is expected to fill in. Normal font is used for
    syntax meta-characters: for the brackets that indicate optionality, and the ellipsis
    that indicates repetition.'
  prefs: []
  type: TYPE_NORMAL
- en: Using fonts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fonts can be set in two ways: either using the dot-commands, or the backslash-f
    escapes. The `.B` command (where the dot is at the beginning of a line) typesets
    the rest of the line in bold face. Similarly, `.I` typesets in italics (but terminals
    show that as underline), and `.R` in what `troff` calls the roman font, and the
    rest of us call the normal font. You can combine these, `.BR` typesets the first
    word on the line in bold, the second in normal font. The output will have no space
    between the words: `.BR manpagename (7)` would be the usual way to refer to another
    manual page. If a word has spaces in it, use double quotes: `.B "far and away"`
    for example.'
  prefs: []
  type: TYPE_NORMAL
- en: Backslash-f escapes work anywhere on a line, and sometimes they're easier to
    use than the dot-commands. Their effect also does not end at the end of a line.
  prefs: []
  type: TYPE_NORMAL
- en: An unfortunate bit of arcane syntax is that dashes in options should be prefixed
    by backslashes. Thus, write `\-\-bits`, not just `--bits`. The Debian and Ubuntu
    implementation of `man` treats them the same, for terminal output, but this is
    not portable. Technically a naked `-` means a hyphen, whereas `\-` means a minus
    sign. Typographically these are distinct, and they are also distinct in Unicode.
    The typesetter is free to break a line at a hyphen, but not at a minus. For dashes
    in options, you should thus use minuses, but in normal text, for normal words,
    the hyphen.
  prefs: []
  type: TYPE_NORMAL
- en: '`DESCRIPTION` section'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The DESCRIPTION section describes what the program does, in more detail than
    the NAME section. There are no artificial size limits here, but it's still good
    style to avoid being long-winded. At the same time, it is perhaps best to not
    be quite as terse as the example.
  prefs: []
  type: TYPE_NORMAL
- en: Paragraphs and line structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you write more than one paragraph, start the other paragraphs with the `.PP`
    command. Do not just leave an empty line; this makes `troff` sometimes do the
    wrong thing. In fact, the manual page source should have no empty lines at all.
  prefs: []
  type: TYPE_NORMAL
- en: '`troff` prefers you to start every sentence on a new line. This lets it typeset
    end-of-sentence whitespace better, when it produces output using proportional
    fonts. Also, this makes it easier to compare versions of a manpage with `diff`.'
  prefs: []
  type: TYPE_NORMAL
- en: More about fonts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some more font conventions.
  prefs: []
  type: TYPE_NORMAL
- en: use bold for the command you are documenting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'refer to other manual pages like this: **`man-pages`(7)** (easiest to achieve
    like this: `.BR man-pages (7)`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: filenames in italics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See **`man-pages`(7)** for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '`OPTIONS` section'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Options are perhaps the most tedious part to document. It is also the part where
    proper formatting gives the most benefit to the reader.
  prefs: []
  type: TYPE_NORMAL
- en: First, there is the list structure. This is achieved with the `.TP` command,
    which is kind of magic. It takes the *next* line, and does not indent it, and
    then indents the rest of the paragraph. This gives the nice indented-paragraph
    style that makes it easy to quickly scan even a long list of options to find the
    right one.
  prefs: []
  type: TYPE_NORMAL
- en: That first, un-indented line describes the option, giving its name, and indicates
    if it gets an argument or not. If there are several names for an option (a long
    one, and a one-letter one, for example), they should be on the same line, separated
    by commas. The one-letter option name does not get the option argument, to keep
    things short.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fonts are again used to clarify things:'
  prefs: []
  type: TYPE_NORMAL
- en: the name of the option (including any dashes at the beginning) is in bold
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: any argument is in italic, but the equals sign (if any) is in normal font
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the comma between options is in normal font
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comments in `troff` source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`troff` also supports comments: start a line with `.\"` and it is a comment.
    You can use them, for example, to add white space between descriptions of options
    in the OPTIONS section (remember, no empty lines).'
  prefs: []
  type: TYPE_NORMAL
- en: Marking up examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most manual pages benefit from an `EXAMPLES` section, which shows basic use
    of the command. Sometimes advanced use is also useful to show, but basic use is
    almost always useful, because that's what people need most often.
  prefs: []
  type: TYPE_NORMAL
- en: 'Marking up examples of command line use is a bit tricky in manual pages. Here''s
    an example of an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'A few new `troff` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.nf` turns off paragraph filling mode: we don''t want that for showing command
    lines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.fi` turns it back on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.RS` starts a relative margin indent: examples are more visually distinguishable
    if they''re indented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.RE` ends the indent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\\` puts a backslash in the output. Since `troff` uses backslash for fonts
    and other in-line commands, it needs to be doubled in the manual page source so
    that the output has one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The backslash is used to show that the shell command line is broken into two
    physical lines, even if it is just one logical command. This is fairly commonly
    needed in manual pages: the page width is usually only 80 monospace characters
    wide, and with margins and indentations there''s often only about 60 or 65 characters
    per line in the example. Command line examples therefore need to be wrapped, and
    it''s better to be done explicitly in the manual page source than letting the
    `man` program do it.'
  prefs: []
  type: TYPE_NORMAL
- en: Other ways of creating manual pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This example used the `-man` macros for `troff`, since that is the most common
    way to write manual pages. However, they are admittedly arcane at this point in
    history. They're pretty easy to write, but not nearly as convenient as, say, Perl
    POD markup, or DocBook markup (see the refentry element). However, those other
    markup languages require conversion tools to produce a file that `man` can actually
    use, and the tools do not always properly follow the manpage formatting conventions.
  prefs: []
  type: TYPE_NORMAL
- en: SEE ALSO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information about writing manual pages, see:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`man`(7)**, for the `-man` macros'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`mdoc`(7)**, for an alternative set of `troff` macros'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`man-pages`(7)**, for manpage structure and font conventions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Branden Robinson''s Debconf5 talk](http://web.archive.org/web/20060102171907/people.debian.org/~branden/talks/wtfm/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other ways to create manual pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`perlpod`(1)**, for Perl POD markup and conversion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[asciidoc](http://asciidoc.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
