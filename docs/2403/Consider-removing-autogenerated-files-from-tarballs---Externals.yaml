- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:48:32'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Consider removing autogenerated files from tarballs - Externals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://externals.io/message/122811](https://externals.io/message/122811)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'But my main question is: I fail to see the difference whether I plant my'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'malicious code in configure, [configure.ac](http://configure.ac) or *.c: Someone
    has to review'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the changes and notice the problem. And we have to trust the RMs. What
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: am I missing?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As I understand it, the attack being discussed involved*code that was never
    committed to version control*. The bulk of the payload was committed in fake binary
    test artifacts, which are unlikely to be inspected but harmless by themselves;
    but the trigger to incorporate it into the binary was added*manually* in between
    the automated build and producing the signed release archive.
  prefs: []
  type: TYPE_NORMAL
- en: So the theory is that if there's no human involved in that process, there is
    no way for a human to introduce a malicious change at that step. An exploit would
    need to be introduced somewhere in version controlled, human-readable, code; giving
    extra chances for it to be detected.
  prefs: []
  type: TYPE_NORMAL
- en: Do you think it would be different if the change happened in the
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: distributed source file instead? I mean you could still modify tarball
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: of the distributed file (e.g. hide somewhere in [configure.ac](http://configure.ac)
    or in our
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: case more easily in less visible files like various Makefile.frag and
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: similar). The only thing that you get by using just VCS files is that
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: people could hash the distributed content of the files and compare it
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: with the hash of the VCS files but does anyone do this sort of
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: verification?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We already use a version control system built entirely on comparing hashes of
    source files. So given a signed tarball that claimed to match the content of a
    signed tag, any user can trivially check out the tag, expand the tarball, and
    run "git diff" to detect any anomalies.
  prefs: []
  type: TYPE_NORMAL
- en: The question of who would do that in practice is a valid one, and something
    that I'm sure has been discussed elsewhere regarding reproducible binary builds.
  prefs: []
  type: TYPE_NORMAL
- en: Btw, I do not believe that "it would require end users to install
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: autotools and bison in order to compile PHP from tarballs" is valid
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: reason to delay the patching of a serious attack vector ASAP.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As is always the case, there is a trade-off between security and
  prefs: []
  type: TYPE_NORMAL
- en: convenience - in this case, distributing something that's usable without
  prefs: []
  type: TYPE_NORMAL
- en: large amounts of extra tooling (including, for some generated files, a
  prefs: []
  type: TYPE_NORMAL
- en: copy of PHP itself), vs distributing something that is 100% reviewable
  prefs: []
  type: TYPE_NORMAL
- en: by humans.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, 99.999% of users are not going to compile their own copy of
  prefs: []
  type: TYPE_NORMAL
- en: PHP from source; they are going to trust some chain of providers to take
  prefs: []
  type: TYPE_NORMAL
- en: the source, perform all the necessary build steps, and produce a binary.
  prefs: []
  type: TYPE_NORMAL
- en: Removing generated files from the tarballs doesn't eliminate that need
  prefs: []
  type: TYPE_NORMAL
- en: for trust, it just shifts more of it to organisations like Debian and
  prefs: []
  type: TYPE_NORMAL
- en: RedHat; and maybe that's a valid aim, because those organisations have
  prefs: []
  type: TYPE_NORMAL
- en: more resources than us to build appropriate processes.
  prefs: []
  type: TYPE_NORMAL
- en: Making things reproducible aims to attack the same problem from a
  prefs: []
  type: TYPE_NORMAL
- en: 'different angle: rather than placing more trust in one part of the'
  prefs: []
  type: TYPE_NORMAL
- en: chain, it allows multiple parallel chains, which should all give the
  prefs: []
  type: TYPE_NORMAL
- en: same result. If builds from different sources start showing unexplained
  prefs: []
  type: TYPE_NORMAL
- en: differences, it can be flagged automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Regards,
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Rowan Tommins
  prefs: []
  type: TYPE_NORMAL
- en: '[IMSoP]'
  prefs: []
  type: TYPE_NORMAL
