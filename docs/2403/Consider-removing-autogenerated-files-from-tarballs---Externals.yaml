- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:48:32'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Consider removing autogenerated files from tarballs - Externals
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://externals.io/message/122811](https://externals.io/message/122811)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'But my main question is: I fail to see the difference whether I plant my'
  id: totrans-split-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'malicious code in configure, [configure.ac](http://configure.ac) or *.c: Someone
    has to review'
  id: totrans-split-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the changes and notice the problem. And we have to trust the RMs. What
  id: totrans-split-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: am I missing?
  id: totrans-split-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As I understand it, the attack being discussed involved*code that was never
    committed to version control*. The bulk of the payload was committed in fake binary
    test artifacts, which are unlikely to be inspected but harmless by themselves;
    but the trigger to incorporate it into the binary was added*manually* in between
    the automated build and producing the signed release archive.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: So the theory is that if there's no human involved in that process, there is
    no way for a human to introduce a malicious change at that step. An exploit would
    need to be introduced somewhere in version controlled, human-readable, code; giving
    extra chances for it to be detected.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: Do you think it would be different if the change happened in the
  id: totrans-split-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: distributed source file instead? I mean you could still modify tarball
  id: totrans-split-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: of the distributed file (e.g. hide somewhere in [configure.ac](http://configure.ac)
    or in our
  id: totrans-split-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: case more easily in less visible files like various Makefile.frag and
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: similar). The only thing that you get by using just VCS files is that
  id: totrans-split-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: people could hash the distributed content of the files and compare it
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: with the hash of the VCS files but does anyone do this sort of
  id: totrans-split-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: verification?
  id: totrans-split-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We already use a version control system built entirely on comparing hashes of
    source files. So given a signed tarball that claimed to match the content of a
    signed tag, any user can trivially check out the tag, expand the tarball, and
    run "git diff" to detect any anomalies.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: The question of who would do that in practice is a valid one, and something
    that I'm sure has been discussed elsewhere regarding reproducible binary builds.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: Btw, I do not believe that "it would require end users to install
  id: totrans-split-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: autotools and bison in order to compile PHP from tarballs" is valid
  id: totrans-split-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: reason to delay the patching of a serious attack vector ASAP.
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As is always the case, there is a trade-off between security and
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: convenience - in this case, distributing something that's usable without
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: large amounts of extra tooling (including, for some generated files, a
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: copy of PHP itself), vs distributing something that is 100% reviewable
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: by humans.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, 99.999% of users are not going to compile their own copy of
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: PHP from source; they are going to trust some chain of providers to take
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: the source, perform all the necessary build steps, and produce a binary.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: Removing generated files from the tarballs doesn't eliminate that need
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: for trust, it just shifts more of it to organisations like Debian and
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: RedHat; and maybe that's a valid aim, because those organisations have
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: more resources than us to build appropriate processes.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 比我们更多的资源来构建适当的流程。
- en: Making things reproducible aims to attack the same problem from a
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使事情可重现旨在从不同角度解决同一问题：
- en: 'different angle: rather than placing more trust in one part of the'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是对链条的一部分更加信任，
- en: chain, it allows multiple parallel chains, which should all give the
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许多个并行链条，这些链条都应该给出
- en: same result. If builds from different sources start showing unexplained
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的结果。如果来自不同源的构建开始显示未经解释的
- en: differences, it can be flagged automatically.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 差异，它可以被自动标记。
- en: Regards,
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 致敬，
- en: --
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Rowan Tommins
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: Rowan Tommins
- en: '[IMSoP]'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[IMSoP]'
