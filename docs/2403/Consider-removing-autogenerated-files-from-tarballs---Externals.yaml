- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 12:48:32'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 12:48:32
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Consider removing autogenerated files from tarballs - Externals
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑从tarballs中删除自动生成的文件——外部
- en: 来源：[https://externals.io/message/122811](https://externals.io/message/122811)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://externals.io/message/122811](https://externals.io/message/122811)
- en: 'But my main question is: I fail to see the difference whether I plant my'
  id: totrans-split-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 但我主要的问题是：我看不到我种植我的区别
- en: 'malicious code in configure, [configure.ac](http://configure.ac) or *.c: Someone
    has to review'
  id: totrans-split-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '在`configure`中的恶意代码，[configure.ac](http://configure.ac)或者*.c: 有人必须审查'
- en: the changes and notice the problem. And we have to trust the RMs. What
  id: totrans-split-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 更改并注意问题。而我们必须信任RMs。什么
- en: am I missing?
  id: totrans-split-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我错过了什么？
- en: As I understand it, the attack being discussed involved*code that was never
    committed to version control*. The bulk of the payload was committed in fake binary
    test artifacts, which are unlikely to be inspected but harmless by themselves;
    but the trigger to incorporate it into the binary was added*manually* in between
    the automated build and producing the signed release archive.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 据我所了解，讨论中涉及的攻击涉及*从未提交到版本控制的代码*。大部分负载被提交到假的二进制测试工件中，这些工件不太可能被检查，但本身无害；但触发器手动添加到自动化构建和生成签名发布归档之间。
- en: So the theory is that if there's no human involved in that process, there is
    no way for a human to introduce a malicious change at that step. An exploit would
    need to be introduced somewhere in version controlled, human-readable, code; giving
    extra chances for it to be detected.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以理论上如果在该过程中没有人参与，那么人类就无法引入恶意变更。利用需要在版本控制、人类可读的代码中引入漏洞。将额外的机会给予检测。
- en: Do you think it would be different if the change happened in the
  id: totrans-split-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你认为如果改变发生在
- en: distributed source file instead? I mean you could still modify tarball
  id: totrans-split-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 分布式源文件？我的意思是，你仍然可以修改tarball
- en: of the distributed file (e.g. hide somewhere in [configure.ac](http://configure.ac)
    or in our
  id: totrans-split-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 分布文件的（例如在[configure.ac](http://configure.ac)中隐藏或在我们
- en: case more easily in less visible files like various Makefile.frag and
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在更不可见的文件中更容易地进行（例如各种Makefile.frag和
- en: similar). The only thing that you get by using just VCS files is that
  id: totrans-split-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 类似）。仅使用VCS文件，你唯一得到的是
- en: people could hash the distributed content of the files and compare it
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 人们可以对文件的分布内容进行哈希，并进行比较
- en: with the hash of the VCS files but does anyone do this sort of
  id: totrans-split-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 带有VCS文件的哈希，但有没有人做这种
- en: verification?
  id: totrans-split-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 验证？
- en: We already use a version control system built entirely on comparing hashes of
    source files. So given a signed tarball that claimed to match the content of a
    signed tag, any user can trivially check out the tag, expand the tarball, and
    run "git diff" to detect any anomalies.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完全基于比较源文件的哈希构建的版本控制系统。因此，给定一个声称与签名标签内容匹配的签名tarball，任何用户都可以轻松地检出标签，展开tarball，并运行“git
    diff”来检测任何异常。
- en: The question of who would do that in practice is a valid one, and something
    that I'm sure has been discussed elsewhere regarding reproducible binary builds.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 谁会在实践中这样做是个合法的问题，也是我肯定在其他地方讨论过的问题，关于可再现的二进制构建。
- en: Btw, I do not believe that "it would require end users to install
  id: totrans-split-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 顺便说一句，我不相信“需要用户安装
- en: autotools and bison in order to compile PHP from tarballs" is valid
  id: totrans-split-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为了从tarballs中编译PHP有效地使用autotools和bison是合法的
- en: reason to delay the patching of a serious attack vector ASAP.
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 理由延迟尽快修补严重攻击向量的补丁。
- en: As is always the case, there is a trade-off between security and
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如总是这样，安全与之间存在权衡
- en: convenience - in this case, distributing something that's usable without
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 方便性——在这种情况下，分发一些可用的东西而无需
- en: large amounts of extra tooling (including, for some generated files, a
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 大量额外的工具（包括某些生成的文件，如
- en: copy of PHP itself), vs distributing something that is 100% reviewable
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: PHP本身的副本），与分发100%可审查的东西相比
- en: by humans.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由人类审查。
- en: Ultimately, 99.999% of users are not going to compile their own copy of
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，99.999%的用户不会编译他们自己的副本
- en: PHP from source; they are going to trust some chain of providers to take
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: PHP的源代码；他们将信任某些供应商链来接管
- en: the source, perform all the necessary build steps, and produce a binary.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 来源，执行所有必要的构建步骤，并生成二进制文件。
- en: Removing generated files from the tarballs doesn't eliminate that need
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从tarballs中移除生成的文件并不消除这种需要
- en: for trust, it just shifts more of it to organisations like Debian and
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 信任，它只是更多地转移到像Debian和
- en: RedHat; and maybe that's a valid aim, because those organisations have
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: RedHat这样的组织；也许这是一个有效的目标，因为这些组织有
- en: more resources than us to build appropriate processes.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 比我们更多的资源来构建适当的流程。
- en: Making things reproducible aims to attack the same problem from a
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使事情可重现旨在从不同角度解决同一问题：
- en: 'different angle: rather than placing more trust in one part of the'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是对链条的一部分更加信任，
- en: chain, it allows multiple parallel chains, which should all give the
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许多个并行链条，这些链条都应该给出
- en: same result. If builds from different sources start showing unexplained
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的结果。如果来自不同源的构建开始显示未经解释的
- en: differences, it can be flagged automatically.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 差异，它可以被自动标记。
- en: Regards,
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 致敬，
- en: --
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Rowan Tommins
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: Rowan Tommins
- en: '[IMSoP]'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[IMSoP]'
