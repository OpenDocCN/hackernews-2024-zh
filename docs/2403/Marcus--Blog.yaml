- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:59:02'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Marcus' Blog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://mbuffett.com/posts/compressing-chess-moves/](https://mbuffett.com/posts/compressing-chess-moves/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'UPDATE: I’ve written a [new post](/posts/compressing-chess-moves-even-further/)
    with a new technique which is about 2.5x more efficient than this approach'
  prefs: []
  type: TYPE_NORMAL
- en: Chess notation has come a long way since [descriptive notation](https://en.wikipedia.org/wiki/Descriptive_notation),
    now we have nice and decipherable Standard Algebraic Notation, like `Qxf7` (queen
    takes on f7) or `Nf3` (knight takes on f3).
  prefs: []
  type: TYPE_NORMAL
- en: This is a great text format, but a massive waste of space if you’re trying to
    store a lot of these. `Qxf7` takes 4 bytes, or 32 bits. Let’s do some rough back-of-the-envelope
    math of how much information is actually being transmitted though. This move affects
    one of 6 pieces (3 bits), this move is also a capture (1 bit), and it specifies
    a destination squuare (64 possibilities == 6 bits). Add those up, you get 10 bits.
    Far from the 32 bits that the textual representation needs.
  prefs: []
  type: TYPE_NORMAL
- en: Why do I care? I run a site that stores a *ton* of chess lines, something like
    100 million in total. Assume an average of 6 moves for each line, that’s 600 million
    moves. The database is growing large enough that querying it is IO-constrained.
    I want to speed up the reads from this database when I’m fetching thousands of
    lines.
  prefs: []
  type: TYPE_NORMAL
- en: A first pass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First some general numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: Encoding a file or rank (a-h or 1-8) takes 3 bits (8 possibilities)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encoding a piece (k, q, r, b, n, p) takes 3 bits (6 possibilities)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encoding a square takes 6 bits (64 possibilities)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let’s see the pieces we’re working with for encoding a SAN.
  prefs: []
  type: TYPE_NORMAL
- en: So let’s go with the most naive approach.
  prefs: []
  type: TYPE_NORMAL
- en: Which piece was it? 3 bits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it a capture? 1 bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do we have to disabiguate it (ie `Ngf3`)? Maximum of 2 bits + 6 bits (this is
    explained more further down)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where did it go? 6 bits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it a promotion, and to which piece? 7 bits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it a check? 1 bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it a checkmate? 1 bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it a castle? Short or long? 2 bits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This gives us a total of `3+1+2+6+6+7+1+1+2 = 29` bits, or about 3.5 bytes per
    move. That’s not great though. A lot of moves actually take up less bits than
    that in text format.
  prefs: []
  type: TYPE_NORMAL
- en: Getting smarter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first few bits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the first pass, we just encoded the piece that moved using 3 bits, but that
    leaves 2 unused permutations available, since there are only 6 pieces in chess.
    Luckily, there are two very common moves that fit neatly into this hole, those
    being short castles (`O-O`) and long castles (`O-O-O`).
  prefs: []
  type: TYPE_NORMAL
- en: 'So we can encode the first 3 bits like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The destination square
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In all cases except castling, you need to know the square that the piece is
    moving to, to reproduce the SAN. So we’ll skip this entirely when castling, but
    otherwise always include 6 bits for the destination square.
  prefs: []
  type: TYPE_NORMAL
- en: Just kidding, pawn moves!
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There’s another exception to the destination square rule that might not seem
    so obvious. Let’s take the move `exf6`. We know it’s a pawn move from the e-file,
    so we don’t really need to encode the file it’s capturing using 6 bits. After
    all, you’ll never see `exa6`. So in these cases instead of 6 bits for the destination
    square, we only need 4 (one for the direction, and one for the rank).
  prefs: []
  type: TYPE_NORMAL
- en: But we can get even more clever here. Take `hxg6` for example. You know as soon
    as you see `hx`, that the file is going to be the g-file. So we don’t even need
    the extra bit to encode direction, we can just encode the file once, and the rank
    once.
  prefs: []
  type: TYPE_NORMAL
- en: 'So here’s the setup:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pawn capture from b-g files: 3 bits for the file you’re capturing from, 1 bit
    for the direction of the capture, and 3 bits for the rank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Total: 10 bits for movement'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pawn capture from a and h files: 3 bits for the file you’re capturing from,
    3 bits for rank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Total: 6 bits for movement'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: “Special” moves
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s a bit of a waste to encode for each move, whether it’s a promotion, check,
    checkmate, capture, etc. After all, the vast majority of chess moves in a game
    are not any of these.
  prefs: []
  type: TYPE_NORMAL
- en: So we’ll devote one bit to determining whether a move is “special”. It means
    we have to use an extra bit for moves that are promotions/checks/captures, but
    it also means that we save a whole lot of bits for “regular” moves.
  prefs: []
  type: TYPE_NORMAL
- en: Promotions are nice, because even though there are 6 chess pieces, there are
    only 4 valid pieces that you can promote to (after all, you can’t promote to a
    King or Pawn). So we only need 2 bits instead of 3, to encode the promotion piece.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Disambiguation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Disambiguation is a bit thorny. You have to encode a surprising amount of information,
    to be able to decode the SAN exactly as you received it.
  prefs: []
  type: TYPE_NORMAL
- en: Take `Ngf3` for example. Besides the usual stuff you also need to encode the
    disambiguation (file=g). There are 3 different disambiguation possibilities (rank,
    file, or whole square), so we need 2 bits. One goes to waste but disambiguated
    moves aren’t that common and I can’t think of a nice way to take advantage of
    that last permutation.
  prefs: []
  type: TYPE_NORMAL
- en: So we always use 2 bits, then either 3 bits for the rank, 3 bits for the file,
    or 6 bits for a whole square (very rare).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How does this do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Move | Original bits | Encoded bits | Savings |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| e4 | 16 | 10 | 37.5% |'
  prefs: []
  type: TYPE_TB
- en: '| exd5 | 32 | 12 | 62.5% |'
  prefs: []
  type: TYPE_TB
- en: '| Nf3+ | 24 | 10 | 58.33% |'
  prefs: []
  type: TYPE_TB
- en: '| Qxa5+ | 40 | 16 | 60% |'
  prefs: []
  type: TYPE_TB
- en: '| cxd8=Q# | 56 | 16 | 71.43% |'
  prefs: []
  type: TYPE_TB
- en: Not bad! We’re saving anywhere from 37.5% to 71.43% of the bits.
  prefs: []
  type: TYPE_NORMAL
- en: PGNs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may be thinking something like this: “Isn’t is sorta cheating to measure
    these in bits? Since you can only address one byte at a time, needing 10 bits
    for a move is virtually the same as 16 bits”'
  prefs: []
  type: TYPE_NORMAL
- en: Well yes, that’s true and means that we get less savings when storing individual
    SANs. But they don’t account for the majority of what I’m storing, which are PGNs.
  prefs: []
  type: TYPE_NORMAL
- en: 'PGNs are a way to store lines or games, and they look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This PGN is 759 bytes. There’s a ton of wasted space though. One byte between
    each move (the space). Then **at least 3 bytes** between full moves ( `2.`). This
    is sort of crazy, and if we combine our SAN encoding, we can compress this to
    be way smaller.
  prefs: []
  type: TYPE_NORMAL
- en: If we encode the whole PGN using our SAN encoding, with no space between moves
    because we know once we’ve reached the end of a move, we can compress this specific
    759-byte PGN down to **195 bytes**, for a savings of **74%**.
  prefs: []
  type: TYPE_NORMAL
- en: Impact
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This hasn’t been deployed yet, I’m working on a ton of other performance improvements.
    But I anticipate this along with EPD compression (which I may write another at
    article on) will reduce the size of the database by about 70%. We’re almost entierly
    read-constrained, which should mean a 3x speedup for the most expensive queries
    we run.
  prefs: []
  type: TYPE_NORMAL
- en: Speed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another consideration here is the speed of doing this encoding/decoding; will
    it just cancel out the gains from having a much smaller database? Turns out, computers
    are really fast at this stuff, and conversion to and from this encoding is a rounding
    error.
  prefs: []
  type: TYPE_NORMAL
- en: I’m using Rust + the `bitvec` library. Encoding and then decoding 1000 moves
    takes about 600,000ns, or 0.6ms. I haven’t taken a performance pass at all either,
    and there’s a few places I know are very inefficient. I’m guessing I’m not even
    within 10x of optimal, but it should be good enough.
  prefs: []
  type: TYPE_NORMAL
