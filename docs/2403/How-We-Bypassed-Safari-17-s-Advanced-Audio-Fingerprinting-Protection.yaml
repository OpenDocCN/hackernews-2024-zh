- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:45:29'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:45:29'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: How We Bypassed Safari 17's Advanced Audio Fingerprinting Protection
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何绕过 Safari 17 的高级音频指纹识别保护
- en: 来源：[https://fingerprint.com/blog/bypassing-safari-17-audio-fingerprinting-protection/](https://fingerprint.com/blog/bypassing-safari-17-audio-fingerprinting-protection/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://fingerprint.com/blog/bypassing-safari-17-audio-fingerprinting-protection/](https://fingerprint.com/blog/bypassing-safari-17-audio-fingerprinting-protection/)
- en: Did you know that browsers can produce audio files you can’t hear, and those
    audio files can be used to identify web visitors? Apple knows, and the company
    decided to fight the identification possibility in Safari 17, but their measures
    don’t fully work.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道浏览器可以生成你听不到的音频文件，并且这些音频文件可以用来识别网站访客吗？苹果知道，并且公司决定在 Safari 17 中抵制这种识别可能性，但他们的措施并没有完全奏效。
- en: '[](#identifying-with-audio)Identifying with audio'
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#identifying-with-audio)使用音频进行识别'
- en: The technique is called audio fingerprinting, and you can learn how it works
    in our [previous article](https://fingerprint.com/blog/audio-fingerprinting/).
    In a nutshell, audio fingerprinting uses the browser’s [Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API)
    to render an audio signal with [OfflineAudioContext](https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext)
    interface, which then transforms into a single number by adding all audio signal
    samples together. The number is the fingerprint, also called “identifier”.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术被称为音频指纹识别，你可以在我们的[先前文章](https://fingerprint.com/blog/audio-fingerprinting/)中了解它的工作原理。简而言之，音频指纹识别利用浏览器的[音频
    API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API)通过[OfflineAudioContext](https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext)接口渲染音频信号，然后通过将所有音频信号样本相加转换为一个单一数字。这个数字就是指纹，也称为“标识符”。
- en: The audio identifier is stable, meaning it doesn’t change when you clear the
    cookies or go into incognito mode. This is the key feature of fingerprinting.
    However, the identifier is not very unique, and many users can have the same identifier.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 音频标识符是稳定的，这意味着在清除 cookies 或进入隐身模式时不会更改。这是指纹识别的关键特性。然而，这个标识符并不是非常独特，很多用户可能会有相同的标识符。
- en: Audio fingerprinting is a part of [FingerprintJS](https://github.com/fingerprintjs/fingerprintjs),
    our library with source code available on GitHub.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 音频指纹识别是[FingerprintJS](https://github.com/fingerprintjs/fingerprintjs)的一部分，我们的库源代码可以在
    GitHub 上找到。
- en: Fingerprinting is used to identify bad actors when they want to remain anonymous.
    For example, when they want to sign in to your account or use stolen credit card
    credentials. Fingerprinting can identify repeat bad actors, allowing you to prevent
    them from committing fraud. However, many people see it as a privacy violation
    and therefore don’t like it.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当想要保持匿名时，指纹识别用于识别不良行为者。例如，当他们想要登录您的帐户或使用窃取的信用卡凭据时。指纹识别可以识别重复的不良行为者，帮助您防止他们进行欺诈行为。然而，很多人认为这是一种侵犯隐私的行为，因此不喜欢它。
- en: '[](#how-safari-17-breaks-audio-fingerprinting)How Safari 17 breaks audio fingerprinting'
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#how-safari-17-breaks-audio-fingerprinting)Safari 17 如何破解音频指纹识别'
- en: Apple [introduced](https://www.apple.com/au/newsroom/2023/06/apple-announces-powerful-new-privacy-and-security-features/)
    advanced fingerprinting protection in Safari 17\. Advanced fingerprinting protection
    aims to reduce fingerprinting accuracy by limiting available information or adding
    randomness.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果在 Safari 17 中引入了[高级指纹保护](https://www.apple.com/au/newsroom/2023/06/apple-announces-powerful-new-privacy-and-security-features/)。高级指纹保护旨在通过限制可用信息或增加随机性来降低指纹识别的准确性。
- en: By default, the advanced protection is enabled in private (incognito) mode and
    disabled in normal mode. It affects both desktop and mobile platforms. Advanced
    fingerprinting protection also affects [Screen API](https://developer.mozilla.org/en-US/docs/Web/API/Screen)
    and [Canvas API](https://developer.mozilla.org/en-US/docs/Glossary/Canvas), but
    we’ll focus only on Audio API in this article.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，高级保护在隐私（隐身）模式下启用，在普通模式下禁用。它影响桌面和移动平台。高级指纹保护还影响[Screen API](https://developer.mozilla.org/en-US/docs/Web/API/Screen)和[Canvas
    API](https://developer.mozilla.org/en-US/docs/Glossary/Canvas)，但本文将重点放在音频 API
    上。
- en: 'An audio signal produced with the Audio API is an array of numbers representing
    the signal amplitude at each moment of time (also called “audio samples”). When
    fingerprinting protection is on, Safari adds a random noise to every sample individually.
    A noised sample lies between `sample*(1-magnitude)` and `sample*(1+magnitude)`,
    and the distribution is [uniform](https://en.wikipedia.org/wiki/Continuous_uniform_distribution).
    This is how it’s [implemented in Safari](https://github.com/WebKit/WebKit/blob/167dc5118a3f6228a19df40e673ea0a6d03b9bec/Source/WebCore/platform/audio/AudioUtilities.cpp#L80):'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用音频API生成的音频信号是一个数字数组，表示每个时刻的信号振幅（也称为“音频样本”）。当开启指纹保护时，Safari会为每个样本单独添加随机噪音。一个带噪音的样本位于
    `sample*(1-magnitude)` 和 `sample*(1+magnitude)` 之间，并且分布是 [均匀的](https://zh.wikipedia.org/wiki/%E5%9D%87%E5%8C%80%E5%88%86%E5%B8%83)。这是Safari的
    [实现方式](https://github.com/WebKit/WebKit/blob/167dc5118a3f6228a19df40e673ea0a6d03b9bec/Source/WebCore/platform/audio/AudioUtilities.cpp#L80)：
- en: '[PRE0]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Note: Safari is being developed actively, so this and the other facts may
    be outdated when you read the article.*'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*注：Safari正在积极开发中，因此当您阅读本文时，这些事实可能已过时。*'
- en: 'All Audio API interfaces that allow reading the audio signal apply noise:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有允许读取音频信号的音频API接口都会应用噪音：
- en: The noise is different every time it’s applied. As a result, the whole audio
    fingerprint changes every time it’s calculated in private mode. These changes
    cause the fingerprint to mismatch in normal and private modes. This breaks the
    stability; therefore, the fingerprint can’t be used for identification.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每次应用时噪音都不同。因此，在私密模式下计算时，整个音频指纹都会发生变化。这些变化导致指纹在正常和私密模式下不匹配。这破坏了稳定性；因此，指纹不能用于识别。
- en: The fingerprint fluctuates between `124.03516` and `124.04545` in Safari 17
    on an M1 MacBook Air. The difference is about 0.008%. That may not sound like
    much, but further on, we’ll explain why this is a huge difference.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在M1 MacBook Air上，Safari 17中的音频指纹波动在 `124.03516` 和 `124.04545` 之间。差异大约为0.008%。这听起来可能不多，但接下来我们将解释为什么这是一个巨大的差异。
- en: '[](#how-we-bypass-safari-17s-advanced-fingerprinting-protection)How we bypass
    Safari 17’s advanced fingerprinting protection'
  id: totrans-split-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#how-we-bypass-safari-17s-advanced-fingerprinting-protection)我们如何绕过Safari
    17的先进指纹保护'
- en: 'The goal is to remove the noise added by Safari. To achieve this, we must improve
    [our fingerprinting algorithm](https://github.com/fingerprintjs/fingerprintjs/blob/a555410e925e0d6a4d548aa555b6945bd713e9cd/src/sources/audio.ts#L41)
    in 3 steps:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是消除Safari添加的噪音。为了实现这一目标，我们必须在三个步骤中改进 [我们的指纹算法](https://github.com/fingerprintjs/fingerprintjs/blob/a555410e925e0d6a4d548aa555b6945bd713e9cd/src/sources/audio.ts#L41)：
- en: Reduce the dispersion of the noise.
  id: totrans-split-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 减少噪音的分散度。
- en: Push browser identifier numbers farther apart.
  id: totrans-split-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将浏览器识别号码推远。
- en: Round the fingerprint to remove the remaining noise.
  id: totrans-split-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将指纹四舍五入以去除剩余的噪音。
- en: We’ll call this improved algorithm “the new algorithm” throughout the article.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中将称此改进的算法为“新算法”。
- en: 'Steps 1 and 2 are necessary because Safari’s range of added noise is much bigger
    than the difference between fingerprints produced by various browsers. This table
    shows audio fingerprints produced by some browsers and the percent difference
    between them and the closest fingerprint from other browsers:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤1和步骤2是必要的，因为Safari添加的噪音范围要比各种浏览器产生的指纹之间的差异大得多。以下表格显示了一些浏览器生成的音频指纹及其与其他浏览器最接近的指纹的百分比差异：
- en: '| Browser | Fingerprint | Difference from the closest browser |'
  id: totrans-split-28
  prefs: []
  type: TYPE_TB
  zh: '| 浏览器 | 指纹 | 与最接近浏览器的差异 |'
- en: '| --- | --- | --- |'
  id: totrans-split-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| MacBook Air 2020, Safari 17.0 | 124.04345259929687 | 0.0000023% |'
  id: totrans-split-30
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Air 2020, Safari 17.0 | 124.04345259929687 | 0.0000023% |'
- en: '| MacBook Pro 2015, Safari 16.6 | 124.04345808873768 | 0.0000044% |'
  id: totrans-split-31
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Pro 2015, Safari 16.6 | 124.04345808873768 | 0.0000044% |'
- en: '| iPhone SE, Safari 13.1 | 35.10893253237009 | 1.8% |'
  id: totrans-split-32
  prefs: []
  type: TYPE_TB
  zh: '| iPhone SE, Safari 13.1 | 35.10893253237009 | 1.8% |'
- en: '| MacBook Air 2020, Chrome 116 | 124.04344968475198 | 0.0000023% |'
  id: totrans-split-33
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Air 2020, Chrome 116 | 124.04344968475198 | 0.0000023% |'
- en: '| MacBook Pro 2015, Chrome 116 | 124.04347657808103 | 0.000015% |'
  id: totrans-split-34
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Pro 2015, Chrome 116 | 124.04347657808103 | 0.000015% |'
- en: '| Galaxy S23, Chrome 114 | 124.08072766105033 | 0.030% |'
  id: totrans-split-35
  prefs: []
  type: TYPE_TB
  zh: '| Galaxy S23, Chrome 114 | 124.08072766105033 | 0.030% |'
- en: '| MacBook Pro 2015, Firefox 118 | 35.749968223273754 | 0.0000055% |'
  id: totrans-split-36
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Pro 2015, Firefox 118 | 35.749968223273754 | 0.0000055% |'
- en: '| MacBook Air 2020, Firefox 118 | 35.74996626004577 | 0.0000055% |'
  id: totrans-split-37
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Air 2020, Firefox 118 | 35.74996626004577 | 0.0000055% |'
- en: '| BrowserStack Windows 8, Firefox 67 | 35.7383295930922 | 0.033% |'
  id: totrans-split-38
  prefs: []
  type: TYPE_TB
  zh: '| BrowserStack Windows 8, Firefox 67 | 35.7383295930922 | 0.033% |'
- en: As you can see, the smallest difference is 0.0000023%, much smaller than the
    Safari noise range (0.008%). Eliminating the noise Safari adds requires rounding
    down by 1 decimal place, but we can’t round to fewer than 6 decimal places. Otherwise,
    some browsers from the above table will be indistinguishable. In other words,
    the fingerprint will have poor uniqueness.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，最小差异为0.0000023%，远小于Safari的噪音范围（0.008%）。消除Safari添加的噪音需要向下舍入到小数点后1位，但我们不能舍入到少于6位小数。换句话说，指纹的唯一性将会降低。
- en: '[](#step-1-cutting-through-the-noise)Step 1: Cutting through the noise'
  id: totrans-split-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#step-1-cutting-through-the-noise)第一步：穿透噪音'
- en: The base idea for noise reduction is combining many separate audio fingerprints
    together. Each fingerprint is collected using the same algorithm, so the only
    difference is the noise added by the browser.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 噪音减少的基本思路是将许多单独的音频指纹组合在一起。每个指纹都是使用相同的算法收集的，因此唯一的区别是浏览器添加的噪音。
- en: First, let’s take a closer look at the [fingerprinting algorithm](https://github.com/fingerprintjs/fingerprintjs/blob/a555410e925e0d6a4d548aa555b6945bd713e9cd/src/sources/audio.ts#L41).
    A fingerprint is a sum of 500 audio samples, and each audio sample is added with
    a random number with a [uniform distribution](https://en.wikipedia.org/wiki/Continuous_uniform_distribution).
    Therefore, according to [the central limit theorem](https://en.wikipedia.org/wiki/Central_limit_theorem),
    the fingerprint noise has a [normal distribution](https://en.wikipedia.org/wiki/Normal_distribution).
    The mean of the distribution is the un-noised fingerprint that we want to find.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们更仔细地查看[指纹算法](https://github.com/fingerprintjs/fingerprintjs/blob/a555410e925e0d6a4d548aa555b6945bd713e9cd/src/sources/audio.ts#L41)。一个指纹是500个音频样本的总和，每个音频样本都加上一个[均匀分布](https://en.wikipedia.org/wiki/Continuous_uniform_distribution)的随机数。因此，根据[中心极限定理](https://en.wikipedia.org/wiki/Central_limit_theorem)，指纹的噪音具有[正态分布](https://en.wikipedia.org/wiki/Normal_distribution)。分布的均值是我们要找到的未加噪音的指纹。
- en: 'The mean can be found using a large number of random samples (don’t confuse
    this with “audio samples”). This won’t be the true mean, but the more random samples
    there are, the more precise the result is. Uniform and normal distributions require
    different methods to find the mean:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 均值可以通过大量的随机样本找到（不要与“音频样本”混淆）。这不会是真实的均值，但随着随机样本数量的增加，结果会更加精确。均匀分布和正态分布需要不同的方法来找到均值：
- en: For a uniform distribution, the most precise formula is `(min+max)/2`, where
    `min` and `max` are the minimum and the maximum random samples
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于均匀分布，最精确的公式是`(min+max)/2`，其中`min`和`max`是最小和最大的随机样本。
- en: For a normal distribution, the most precise formula is the average of all the
    random samples
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于正态分布，最精确的公式是所有随机样本的平均值。
- en: 'Finding the mean of a uniform noise is much easier than a normally distributed
    noise. For a given precision, one needs much fewer samples in case of a uniform
    distribution to guess the mean. This JavaScript code proves the point in practice:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 找到均匀噪音的均值比正态分布的噪音要容易得多。对于给定的精度，在均匀分布的情况下，需要的样本数量要少得多才能猜出均值。这段JavaScript代码在实践中证明了这一点：
- en: '[PRE1]'
  id: totrans-split-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The old audio fingerprint is more computation-demanding and requires 100 times
    more fingerprint samples to reduce the noise. So, to reduce the noise in a reasonable
    time, we changed the fingerprinting algorithm to collect only one audio sample,
    which has a uniform noise distribution. The exact number of randomized samples
    needed depends on the rounding precision we need, which will be demonstrated later.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的音频指纹需要更多的计算，并且需要100倍的指纹样本来减少噪音。因此，为了在合理的时间内减少噪音，我们改变了指纹算法，仅收集具有均匀噪音分布的一个音频样本。需要的随机样本数量取决于我们需要的四舍五入精度，稍后将进行演示。
- en: The algorithm change also means new fingerprints aren’t compatible with old
    fingerprints. Because of the rounding, the audio fingerprint will change, so sticking
    to the old fingerprint identifiers is useless. Note that you need to use [a special
    approach](https://github.com/fingerprintjs/fingerprintjs/blob/5ae80b7b946fcd824e35d033bc44e180334109f6/docs/version_policy.md#how-to-update-without-losing-the-identifiers)
    to switch from the old fingerprint to the new one without losing the visitor identities.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 算法的改变也意味着新的指纹与旧的指纹不兼容。由于四舍五入，音频指纹将发生变化，因此坚持使用旧的指纹标识是无用的。请注意，您需要使用[特殊方法](https://github.com/fingerprintjs/fingerprintjs/blob/5ae80b7b946fcd824e35d033bc44e180334109f6/docs/version_policy.md#how-to-update-without-losing-the-identifiers)，以在不丢失访问者身份的情况下从旧指纹切换到新指纹。
- en: '[](#getting-many-noised-copies-of-the-same-audio-sample)Getting many noised
    copies of the same audio sample'
  id: totrans-split-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#getting-many-noised-copies-of-the-same-audio-sample)获取相同音频样本的多个带噪音的副本'
- en: One approach for getting multiple noised copies is [calling](https://github.com/fingerprintjs/fingerprintjs/blob/a555410e925e0d6a4d548aa555b6945bd713e9cd/src/sources/audio.ts#L77)
    `getChannelData` on the `AudioBuffer` instance many times. Remember that [`getChannelData`](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/getChannelData)
    returns the audio samples that the fingerprint is calculated from. This approach
    doesn’t work because noise is [applied once per](https://github.com/WebKit/WebKit/blob/167dc5118a3f6228a19df40e673ea0a6d03b9bec/Source/WebCore/Modules/webaudio/AudioBuffer.cpp#L336)
    each `AudioBuffer` instance, and `getChannelData` returns the same signal.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 获得多个带噪音的副本的一个方法是在`AudioBuffer`实例上多次调用[`getChannelData`](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/getChannelData)。请记住，[`getChannelData`](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/getChannelData)返回计算指纹所需的音频样本。这种方法不起作用，因为每个`AudioBuffer`实例只应用一次噪音，并且`getChannelData`返回相同的信号。
- en: This can be circumvented by creating many `AudioBuffer` instances by running
    the whole audio signal generation process many times. For 6,000 noised samples,
    the fastest time is 7 seconds on an M1 MacBook. For 60,000, Safari can’t even
    finish the process. This is way too long for a fingerprint. Therefore, this approach
    is not viable.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过多次运行整个音频信号生成过程创建许多`AudioBuffer`实例来实现。对于6000个带噪样本，M1 MacBook上最快的时间为7秒。对于60,000个样本，Safari甚至无法完成处理。这对于指纹来说时间太长了。因此，这种方法不可行。
- en: 'A better approach is to make an `AudioBuffer` instance with the same audio
    signal on repeat:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的方法是通过重复使用相同音频信号创建`AudioBuffer`实例：
- en: Render an audio signal as usual, but don’t call `getChannelData`, because it
    will [add noise](https://github.com/WebKit/WebKit/blob/167dc5118a3f6228a19df40e673ea0a6d03b9bec/Source/WebCore/Modules/webaudio/AudioBuffer.cpp#L167)
    to the signal.
  id: totrans-split-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染音频信号与往常一样，但不要调用`getChannelData`，因为这会给信号[添加噪音](https://github.com/WebKit/WebKit/blob/167dc5118a3f6228a19df40e673ea0a6d03b9bec/Source/WebCore/Modules/webaudio/AudioBuffer.cpp#L167)。
- en: Create another `OfflineAudioContext` instance, much longer than the original
    instance. Use the original signal as a source using an [`AudioBufferSourceNode`](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode).
  id: totrans-split-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个比原始实例长得多的`OfflineAudioContext`实例。使用[`AudioBufferSourceNode`](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode)将原始信号作为源。
- en: Make the `AudioBufferSourceNode` loop the needed piece of the original signal
    using `loop`, `loopStart`, and `loopEnd`. The piece can be as narrow as a single
    audio sample.
  id: totrans-split-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`loop`、`loopStart`和`loopEnd`使`AudioBufferSourceNode`循环原始信号的所需部分。
- en: Render the second (looped) audio context and call `getChannelData`. The resulting
    audio signal will consist of the original signal followed by the piece repeating
    until the end. Safari adds a noise after the looping, so the repeating copy has
    the same audio samples with different noise applied.
  id: totrans-split-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染第二个（循环的）音频上下文并调用`getChannelData`。结果音频信号将由原始信号和重复片段组成，直至结束。Safari在循环后添加了噪音，因此重复副本具有相同的音频样本，但应用了不同的噪音。
- en: 'Here’s how to implement this approach:'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是实施此方法的方式：
- en: '[PRE2]'
  id: totrans-split-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Any number of noised sample copies can be produced in 2 audio renderings.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 2个音频渲染中可以生成任意数量的带噪音的样本副本。
- en: 'The code below combines the methods to denoise a single selected audio sample:'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码结合了几种方法来去噪单个选定的音频样本：
- en: '[PRE3]'
  id: totrans-split-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: At this point, the noise is suppressed, not removed completely. The resulting
    number is still not stable, but the variance is smaller than that of a raw audio
    sample.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，噪音被抑制，但并未完全消除。结果数字仍然不稳定，但变化幅度小于原始音频样本的变化幅度。
- en: 'This table shows how the denoising precision and time in the above code snippet
    depend on the number of samples (`cloneCount`):'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此表显示了上述代码片段中去噪的精度和时间如何取决于样本数（`cloneCount`）：
- en: '| Number of copies | Result range: (max-min)/min in 100 runs | Time on an M1
    MacBook |'
  id: totrans-split-65
  prefs: []
  type: TYPE_TB
  zh: '| 复制数量 | 结果范围：(最大-最小)/最小（在100次运行中） | M1 MacBook上的时间 |'
- en: '| --- | --- | --- |'
  id: totrans-split-66
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 2,048 | 0.194% | 2.0ms |'
  id: totrans-split-67
  prefs: []
  type: TYPE_TB
  zh: '| 2,048 | 0.194% | 2.0ms |'
- en: '| 4,096 | 0.190% | 2.3ms |'
  id: totrans-split-68
  prefs: []
  type: TYPE_TB
  zh: '| 4,096 | 0.190% | 2.3ms |'
- en: '| 8,192 | 0.000387% | 2.6ms |'
  id: totrans-split-69
  prefs: []
  type: TYPE_TB
  zh: '| 8,192 | 0.000387% | 2.6ms |'
- en: '| 16,384 | 0.0000988% | 2.9ms |'
  id: totrans-split-70
  prefs: []
  type: TYPE_TB
  zh: '| 16,384 | 0.0000988% | 2.9ms |'
- en: '| 32,768 | 0.0000411% | 4.0ms |'
  id: totrans-split-71
  prefs: []
  type: TYPE_TB
  zh: '| 32,768 | 0.0000411% | 4.0ms |'
- en: '| 65,536 | 0.0000123% | 4.1ms |'
  id: totrans-split-72
  prefs: []
  type: TYPE_TB
  zh: '| 65,536 | 0.0000123% | 4.1ms |'
- en: '| 131,072 | 0.00000823% | 5.2ms |'
  id: totrans-split-73
  prefs: []
  type: TYPE_TB
  zh: '| 131,072 | 0.00000823% | 5.2ms |'
- en: '| 262,144 | 0% (the ultimate precision) | 7.5ms |'
  id: totrans-split-74
  prefs: []
  type: TYPE_TB
  zh: '| 262,144 | 0%（最终精度）| 7.5ms |'
- en: '| 524,288 | 0% | 11.9ms |'
  id: totrans-split-75
  prefs: []
  type: TYPE_TB
  zh: '| 524,288 | 0% | 11.9ms |'
- en: '| 1,048,576 | 0% | 20.5ms |'
  id: totrans-split-76
  prefs: []
  type: TYPE_TB
  zh: '| 1,048,576 | 0% | 20.5ms |'
- en: '[](#step-2-push-browser-identifier-numbers-farther-apart)Step 2: Push browser
    identifier numbers farther apart'
  id: totrans-split-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#step-2-push-browser-identifier-numbers-farther-apart)步骤 2：将浏览器标识号码推得更远'
- en: The times shown in the previous table can be 100 times longer on low-end devices
    or heavy webpages. The performance of the fingerprinting is important, so the
    fewer copies there are, the better. However, fewer copies mean bigger result dispersion,
    so it’s necessary to increase the difference between the audio samples in browsers
    too. These differences can be achieved by changing the base signal.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 前表中显示的时间在低端设备或重页面上可能要长100倍。指纹的性能很重要，因此复制越少越好。然而，复制越少意味着结果分散越大，因此也需要增加浏览器中音频样本的差异。可以通过改变基础信号来实现这些差异。
- en: '[](#audio-nodes-with-heavy-distortion)Audio nodes with heavy distortion'
  id: totrans-split-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#audio-nodes-with-heavy-distortion)带有严重失真的音频节点'
- en: 'After hours of experimenting with all the built-in audio nodes, we found an
    audio signal generator that gives a much bigger audio sample variance between
    browsers. The generator is a chain of audio nodes:'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 经过几个小时的实验尝试所有内置音频节点后，我们找到了一个能在不同浏览器间产生更大音频样本变化的音频信号生成器。该生成器是一串音频节点：
- en: The initial signal is produced by a square [OscillatorNode](https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode).
  id: totrans-split-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最初的信号由方形[OscillatorNode](https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode)生成。
- en: Then, the signal goes through a [DynamicsCompressorNode](https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode).
  id: totrans-split-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，信号经过[DynamicsCompressorNode](https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode)。
- en: Finally, the signal is processed by a [BiquadFilterNode](https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode)
    of type “allpass”.
  id: totrans-split-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终，信号由类型为“allpass”的[BiquadFilterNode](https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode)处理。
- en: It is not necessary to know what the audio nodes do in detail. They can be treated
    as black boxes.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 无需详细了解音频节点的工作原理。它们可以被视为黑盒子。
- en: 'The audio sample number 3396 of the signal has the biggest difference between
    browsers. The number 3396 was found by simply comparing all samples of the audio
    signals in different browsers. This is how the signal is implemented in code:'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 信号的第3396号音频样本在不同浏览器间有最大的差异。3396号是通过简单比较不同浏览器中音频信号的所有样本找到的。以下是代码实现的信号：
- en: '[PRE4]'
  id: totrans-split-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following table shows the resulting audio sample in different browsers:'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了不同浏览器中生成的音频样本：
- en: '| Browser | Audio sample | Difference from the closest browser |'
  id: totrans-split-88
  prefs: []
  type: TYPE_TB
  zh: '| Browser | Audio sample | Difference from the closest browser |'
- en: '| --- | --- | --- |'
  id: totrans-split-89
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| MacBook Air 2020, Safari 17.0 | 0.000059806101489812136 | 0.0014% |'
  id: totrans-split-90
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Air 2020, Safari 17.0 | 0.000059806101489812136 | 0.0014% |'
- en: '| iPhone 13, Safari 15.4 (BrowserStack) | 0.00005980528294458054 | 0.0014%
    |'
  id: totrans-split-91
  prefs: []
  type: TYPE_TB
  zh: '| iPhone 13, Safari 15.4（BrowserStack）| 0.00005980528294458054 | 0.0014% |'
- en: '| MacBook Pro 2015, Safari 16.6 | 0.00006429151108022779 | 0.046% |'
  id: totrans-split-92
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Pro 2015, Safari 16.6 | 0.00006429151108022779 | 0.046% |'
- en: '| MacBook Pro 2015, Chrome 116 | 0.0000642621744191274 | 0.046% |'
  id: totrans-split-93
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Pro 2015, Chrome 116 | 0.0000642621744191274 | 0.046% |'
- en: '| MacBook Air 2020, Chrome 116 | 0.00006128742097644135 | 2.42% |'
  id: totrans-split-94
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Air 2020, Chrome 116 | 0.00006128742097644135 | 2.42% |'
- en: '| Galaxy S23, Chrome 114 | 0.0000744499484426342 | 11.8% |'
  id: totrans-split-95
  prefs: []
  type: TYPE_TB
  zh: '| Galaxy S23, Chrome 114 | 0.0000744499484426342 | 11.8% |'
- en: '| Acer Chromebook 314, Chrome 117 | 0.00008321150380652398 | 10.53% |'
  id: totrans-split-96
  prefs: []
  type: TYPE_TB
  zh: '| Acer Chromebook 314, Chrome 117 | 0.00008321150380652398 | 10.53% |'
- en: '| iPhone SE, Safari 13.1 | 0.00011335541057633236 | 26.6% |'
  id: totrans-split-97
  prefs: []
  type: TYPE_TB
  zh: '| iPhone SE, Safari 13.1 | 0.00011335541057633236 | 26.6% |'
- en: '| BrowserStack Windows 8, Firefox 67 | 0.00016917561879381537 | 0.0063% |'
  id: totrans-split-98
  prefs: []
  type: TYPE_TB
  zh: '| BrowserStack Windows 8, Firefox 67 | 0.00016917561879381537 | 0.0063% |'
- en: '| MacBook Air 2020, Firefox 118 | 0.00016918622714001685 | 0.0040% |'
  id: totrans-split-99
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Air 2020, Firefox 118 | 0.00016918622714001685 | 0.0040% |'
- en: '| MacBook Pro 2015, Firefox 118 | 0.00016919305198825896 | 0.0040% |'
  id: totrans-split-100
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Pro 2015, Firefox 118 | 0.00016919305198825896 | 0.0040% |'
- en: Now the smallest difference is 0.0014%, which is much bigger than the original
    fingerprint (0.0000023%). It means that a much coarser denoising is possible.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在最小的差异是0.0014%，比原始指纹（0.0000023%）大得多。这意味着可以进行更粗略的去噪处理。
- en: '[](#step-3-round-the-result)Step 3: Round the result'
  id: totrans-split-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[](#step-3-round-the-result)步骤 3：将结果四舍五入'
- en: The final step is stabilizing the sample to be used as a fingerprint. The sample
    range is small but still unstable, which is not suitable for FingerprintJS, because
    even a tiny change to the sample causes the whole fingerprint to change.
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是稳定样本以用作指纹。样本范围小但仍不稳定，不适合FingerprintJS，因为即使对样本进行微小更改也会导致整个指纹改变。
- en: Rounding is a way to stabilize the audio sample. Usually, rounding preserves
    a specific number of digits after the decimal point. This is not a good choice
    in this case because, as mentioned at the beginning, the noise is not absolute;
    it’s relative to the audio sample number. Therefore, some number of *significant*
    digits should be preserved during rounding. Significant digits are all digits
    after the beginning zeros. You can see a rounding implementation on [GitHub](https://github.com/fingerprintjs/fingerprintjs/blob/c411aff111e5c79cdc37608d42632d4a66a8c1dc/src/sources/audio.ts#L244).
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 舍入是稳定音频样本的一种方式。通常，舍入会保留小数点后特定数量的数字。在这种情况下，这不是一个好选择，因为正如开头提到的，噪声不是绝对的，而是相对于音频样本数。因此，在舍入过程中应该保留一定数量的*有效*数字。有效数字是从开始的零后面的所有数字。你可以在[GitHub](https://github.com/fingerprintjs/fingerprintjs/blob/c411aff111e5c79cdc37608d42632d4a66a8c1dc/src/sources/audio.ts#L244)上看到一个舍入的实现。
- en: The table above shows that 5 significant digits are enough to tell the selected
    browsers apart. But since we can’t check all browsers in the world and can’t predict
    how they will change in the future, we use a few more digits, just in case.
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 上表显示，保留5个有效数字足以区分选定的浏览器。但由于我们无法检查世界上所有的浏览器，也无法预测它们未来的变化，所以我们使用了更多的数字，以防万一。
- en: 'The table below shows the number of audio sample copies needed to make the
    denoising result stable in private mode of Safari 17 after rounding with the given
    precision:'
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了在给定精度下舍入后在 Safari 17 的私密模式中使去噪结果稳定所需的音频样本复制次数：
- en: '| Significant digits | # of copies | Time in Safari 17 on an M1 MacBook (warm)
    | Time in Chrome 116 on an M1 MacBook (warm) | Time in Chrome 114 on Pixel 2 (warm)
    |'
  id: totrans-split-107
  prefs: []
  type: TYPE_TB
  zh: '| 有效数字 | 复制次数 | 在 M1 MacBook 上的 Safari 17 中的时间（热启动） | 在 M1 MacBook 上的 Chrome
    116 中的时间（热启动） | 在 Pixel 2 上的 Chrome 114 中的时间（热启动） |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-split-108
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| 6 | 15,000 | 3ms | 4ms | 13ms |'
  id: totrans-split-109
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 15,000 | 3ms | 4ms | 13ms |'
- en: '| 7, but the last is the nearest multiple of 5 | 30,000 | 4ms | 5ms | 15ms
    |'
  id: totrans-split-110
  prefs: []
  type: TYPE_TB
  zh: '| 7，但最后一个是最接近的5的倍数 | 30,000 | 4ms | 5ms | 15ms |'
- en: '| 7, but the last is the nearest even digit | 70,000 | 6ms | 7ms | 16ms |'
  id: totrans-split-111
  prefs: []
  type: TYPE_TB
  zh: '| 7，但最后一个是最接近的偶数 | 70,000 | 6ms | 7ms | 16ms |'
- en: '| 7 and more | 400,000 | 12ms | 13ms | 34ms |'
  id: totrans-split-112
  prefs: []
  type: TYPE_TB
  zh: '| 7 及以上 | 400,000 | 12ms | 13ms | 34ms |'
- en: '*A ”warm” browser is a browser that has run the given code before. A browser
    becomes “cold” when it’s restarted. A warm browser produces more stable time measurements.*'
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*“热”浏览器是指之前已经运行过给定代码的浏览器。当浏览器重新启动时，它就会“冷却”。热浏览器产生更稳定的时间测量结果。*'
- en: We chose “7, but the last is 0 or 5” as a good balance between the performance
    and uniqueness. We also increased the number of copies to 40,000 to increase stability.
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了“7，但最后一个是0或5”作为性能和独特性之间的良好平衡点。我们还增加了复制次数到40,000，以增加稳定性。
- en: The rounded number is the final new audio fingerprint that doesn’t change, even
    when Safari 17’s advanced fingerprinting protection is on. Uniqueness is an important
    property of fingerprinting. The new fingerprint has the same uniqueness as the
    old audio fingerprint.
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 舍入后的数字是最终的新音频指纹，即使在启用 Safari 17 的高级指纹保护时也不会改变。独特性是指纹技术的重要特性。新指纹与旧音频指纹具有相同的独特性。
- en: '[](#performance)Performance'
  id: totrans-split-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#performance)性能'
- en: 'The following table shows the fingerprinting time on a blank page in warm browsers:'
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了在热浏览器中空白页面上的指纹时间：
- en: '| Browser | Old fingerprint | New fingerprint |'
  id: totrans-split-118
  prefs: []
  type: TYPE_TB
  zh: '| 浏览器 | 旧指纹 | 新指纹 |'
- en: '| --- | --- | --- |'
  id: totrans-split-119
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| MacBook Air 2020, Safari 17.3 | 2ms | 4ms |'
  id: totrans-split-120
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Air 2020，Safari 17.3 | 2ms | 4ms |'
- en: '| MacBook Air 2020, Chrome 120 | 5ms | 8ms |'
  id: totrans-split-121
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Air 2020，Chrome 120 | 5ms | 8ms |'
- en: '| MacBook Air 2020, Firefox 121 | 6ms | 8ms |'
  id: totrans-split-122
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Air 2020，Firefox 121 | 6ms | 8ms |'
- en: '| MacBook Pro 2015, Safari 16.6 | 4ms | 6ms |'
  id: totrans-split-123
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Pro 2015，Safari 16.6 | 4ms | 6ms |'
- en: '| MacBook Pro 2015, Chrome 120 | 5ms | 7ms |'
  id: totrans-split-124
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Pro 2015，Chrome 120 | 5ms | 7ms |'
- en: '| MacBook Pro 2015, Firefox 121 | 5ms | 7ms |'
  id: totrans-split-125
  prefs: []
  type: TYPE_TB
  zh: '| MacBook Pro 2015，Firefox 121 | 5ms | 7ms |'
- en: '| iPhone 13 mini, Safari 17.3 | 8ms | 12ms |'
  id: totrans-split-126
  prefs: []
  type: TYPE_TB
  zh: '| iPhone 13 mini，Safari 17.3 | 8ms | 12ms |'
- en: '| iPhone SE, Safari 13.1 | 9ms | 17ms |'
  id: totrans-split-127
  prefs: []
  type: TYPE_TB
  zh: '| iPhone SE，Safari 13.1 | 9ms | 17ms |'
- en: '| Acer Chromebook 314, Chrome 120 | 7ms | 13ms |'
  id: totrans-split-128
  prefs: []
  type: TYPE_TB
  zh: '| Acer Chromebook 314，Chrome 120 | 7ms | 13ms |'
- en: '| Galaxy S23, Chrome 120 | 6ms | 8ms |'
  id: totrans-split-129
  prefs: []
  type: TYPE_TB
  zh: '| Galaxy S23，Chrome 120 | 6ms | 8ms |'
- en: '| Galaxy J7 Prime, Chrome 120 | 33ms | 45ms |'
  id: totrans-split-130
  prefs: []
  type: TYPE_TB
  zh: '| Galaxy J7 Prime，Chrome 120 | 33ms | 45ms |'
- en: '| Pixel 3, Chrome 120 | 8ms | 15ms |'
  id: totrans-split-131
  prefs: []
  type: TYPE_TB
  zh: '| Pixel 3，Chrome 120 | 8ms | 15ms |'
- en: '| BrowserStack Windows 11, Chrome 120 | 5ms | 7ms |'
  id: totrans-split-132
  prefs: []
  type: TYPE_TB
  zh: '| BrowserStack Windows 11，Chrome 120 | 5ms | 7ms |'
- en: '| BrowserStack Windows 11, Firefox 121 | 10ms | 18ms |'
  id: totrans-split-133
  prefs: []
  type: TYPE_TB
  zh: '| BrowserStack Windows 11，Firefox 121 | 10ms | 18ms |'
- en: Compared to the old fingerprinting algorithm, the performance of the new one
    degrades 1.5–2 times. Even so, the new fingerprint algorithm takes little time
    to compute, even on low-end devices.
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
  zh: 与旧的指纹算法相比，新算法的性能下降了1.5至2倍。尽管如此，新的指纹算法在低端设备上计算时间很短。
- en: The browser delegates some work to the OfflineAudioRender thread, freeing the
    main thread. Therefore, the page stays responsive during most of the audio fingerprint
    calculation. Web Audio API is not available for [web workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API),
    so we cannot calculate audio fingerprints there.
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器将一些工作委托给 OfflineAudioRender 线程，从而释放主线程。因此，在大部分音频指纹计算期间页面保持响应。Web Audio API
    对于[Web Workers](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API)不可用，因此我们无法在那里计算音频指纹。
- en: To improve the performance, the new fingerprint can be used only in Safari 17
    while keeping the old algorithm in other browsers. Check whether the current browser
    is Safari 17 or newer using the user-agent string. Based on that, run either the
    old or the new fingerprinting algorithm.
  id: totrans-split-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高性能，在 Safari 17 中使用新指纹算法，同时在其他浏览器中保留旧算法。通过检查用户代理字符串确定当前浏览器是否为 Safari 17 或更新版本。基于此，运行旧版或新版的指纹算法。
- en: '[](#how-it-works-in-privacy-focused-browsers)How it Works in Privacy-Focused
    Browsers'
  id: totrans-split-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#how-it-works-in-privacy-focused-browsers)隐私保护浏览器中的工作原理'
- en: Privacy-focused browsers like Tor and Brave also make attempts to restrict audio
    fingerprinting. Web Audio API is completely disabled in Tor, so audio fingerprinting
    is [impossible](https://gitlab.torproject.org/legacy/trac/-/issues/21984). Brave,
    however, follows an approach like Safari 17 and adds noise to the audio signal.
    Our [previous article](https://fingerprint.com/blog/audio-fingerprinting/#brave)
    explains more about Brave’s audio fingerprinting protection.
  id: totrans-split-138
  prefs: []
  type: TYPE_NORMAL
  zh: Tor 和 Brave 等注重隐私的浏览器也尝试限制音频指纹识别。在 Tor 中，Web Audio API 完全被禁用，因此音频指纹[不可能](https://gitlab.torproject.org/legacy/trac/-/issues/21984)实现。然而，Brave
    采用类似 Safari 17 的方法，向音频信号添加噪声。我们的[先前文章](https://fingerprint.com/blog/audio-fingerprinting/#brave)详细解释了
    Brave 的音频指纹保护。
- en: The Brave noise has an important difference. While Safari adds a random noise
    for each audio sample individually, Brave makes a random multiplier (called “fudge
    factor”) once and uses it for all audio samples. That is, all audio samples are
    multiplied by the same number. The fudge factor persists within a page. It changes
    only in a new regular or incognito session.
  id: totrans-split-139
  prefs: []
  type: TYPE_NORMAL
  zh: Brave 的噪音有一个重要区别。虽然 Safari 为每个音频样本单独添加随机噪声，但 Brave 只生成一个随机乘数（称为“fudge factor”），然后将其用于所有音频样本。也就是说，所有音频样本都乘以相同的数字。这个“fudge
    factor”在页面内保持不变，在新的常规或无痕会话中才会改变。
- en: '[PRE5]'
  id: totrans-split-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: No matter how many audio sample copies we make, the noise addition will be the
    same in every copy. The copies won’t be dispersed around the true (before noising)
    audio sample. Therefore, [the mathematical denoising method](#step-1-cutting-through-the-noise)
    doesn’t work.
  id: totrans-split-141
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们制作多少音频样本的副本，每个副本中添加的噪声都是相同的。副本不会在真实（在加噪之前）音频样本周围分散。因此，[数学去噪方法](#step-1-cutting-through-the-noise)不起作用。
- en: Nevertheless, the Brave denoising method described in [the previous article](https://fingerprint.com/blog/audio-fingerprinting/#brave)
    still works. [The method for increasing the difference between fingerprints produced
    by browsers](#step-2-push-browser-identifier-numbers-farther-apart) can also increase
    the error tolerance.
  id: totrans-split-142
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，《先前的文章》中描述的 Brave 降噪方法仍然有效。[增加浏览器生成指纹之间差异的方法](#step-2-push-browser-identifier-numbers-farther-apart)也可以增加误差容忍度。
- en: '[](#usage-in-fingerprintjs)Usage in FingerprintJS'
  id: totrans-split-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[](#usage-in-fingerprintjs)在 FingerprintJS 中的应用'
- en: The new audio fingerprinting algorithm replaced the old one in FingerprintJS.
    It was first published in version [4.2.0](https://github.com/fingerprintjs/fingerprintjs/releases/tag/v4.2.0).
    You can see the full code for the audio fingerprint implementation [in our GitHub
    repository](https://github.com/fingerprintjs/fingerprintjs/blob/c411aff111e5c79cdc37608d42632d4a66a8c1dc/src/sources/audio.ts).
  id: totrans-split-144
  prefs: []
  type: TYPE_NORMAL
  zh: 新的音频指纹算法取代了 FingerprintJS 中的旧算法。该算法首次发布于版本 [4.2.0](https://github.com/fingerprintjs/fingerprintjs/releases/tag/v4.2.0)。您可以在我们的
    GitHub 仓库中查看音频指纹实现的完整代码 [audio.ts](https://github.com/fingerprintjs/fingerprintjs/blob/c411aff111e5c79cdc37608d42632d4a66a8c1dc/src/sources/audio.ts)。
- en: Audio fingerprinting is one of the many signals our [source-available library](https://github.com/fingerprintjs/fingerprintjs)
    uses to generate a browser fingerprint. However, we do not blindly incorporate
    every signal available in the browser. Instead, we analyze the stability and uniqueness
    of each signal separately to determine their impact on fingerprint accuracy.
  id: totrans-split-145
  prefs: []
  type: TYPE_NORMAL
  zh: 音频指纹技术是我们的一个[开源库](https://github.com/fingerprintjs/fingerprintjs)用来生成浏览器指纹的多个信号之一。然而，我们并不是盲目地将浏览器中的每个信号都纳入考虑。相反，我们分析每个信号的稳定性和独特性，单独确定它们对指纹准确性的影响。
- en: For audio fingerprinting, we found that the signal contributes only slightly
    to uniqueness but is highly stable, resulting in a slight net increase in fingerprint
    accuracy.
  id: totrans-split-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于音频指纹技术，我们发现其信号对唯一性的贡献略微，但非常稳定，从而略微增加了指纹准确性。
- en: If you want to learn more about Fingerprint join us on [Discord](https://discord.gg/39EpE2neBg)
    or reach out to us at [oss-support@fingerprint.com](mailto:oss-support@fingerprint.com)
    for support using FingerprintJS.
  id: totrans-split-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于指纹技术的信息，请加入我们的[Discord](https://discord.gg/39EpE2neBg)，或者通过[oss-support@fingerprint.com](mailto:oss-support@fingerprint.com)联系我们获取关于使用FingerprintJS的支持。
