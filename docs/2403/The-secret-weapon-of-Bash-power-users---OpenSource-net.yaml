- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: '分类: 未分类'
- en: 'date: 2024-05-29 12:40:28'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:40:28'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The secret weapon of Bash power users - OpenSource.net
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bash 高级用户的秘密武器 - OpenSource.net
- en: 来源：[https://opensource.net/the-secret-weapon-of-bash-power-users/](https://opensource.net/the-secret-weapon-of-bash-power-users/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://opensource.net/the-secret-weapon-of-bash-power-users/](https://opensource.net/the-secret-weapon-of-bash-power-users/)
- en: I’m one of those Linux dinosaurs who likes to start every project from the command
    line. OK, maybe not quite every project, but many.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我是那些喜欢从命令行开始每个项目的 Linux 恐龙之一。好吧，也许并不是每个项目，但是很多项目。
- en: I’m also a member of that community that prefers [vi](https://en.wikipedia.org/wiki/Vi_(text_editor)),
    or **vim**, to **emacs** as my text editor.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我也是偏爱[vi](https://en.wikipedia.org/wiki/Vi_(text_editor))或**vim**，而不是**emacs**作为我的文本编辑器的社区成员之一。
- en: Vi, or more accurately vi mode in the Bash shell, becomes a secret weapon for
    bash power users for a couple of reasons. Vi keystrokes are designed for rapid
    navigation and editing within a text file and applying these same keystrokes to
    the Bash command history lets you move quickly through past commands, saving time
    and keystrokes.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: Vi，在 Bash shell 中更确切地说是 vi 模式，因为几个原因成为了 bash 高级用户的秘密武器。Vi 的按键设计用于在文本文件中进行快速导航和编辑，将这些按键应用于
    Bash 命令历史让您能够快速浏览过去的命令，节省时间和按键。
- en: For quite some time now, I’ve combined both preferences by using vi mode in
    the [bash](https://opensource.net/programming-with-bash-part-3-loops/) shell.
    This means using vi keystrokes like `k` to move back one line – “up” – in the
    command history and `j` to move forward one line – “down”. Using `0` (that’s a
    zero) to move to the beginning of a command line and `$` to move to the end; or
    `cw` to change the word starting at the current character position in the command
    line, and so forth.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 很长一段时间以来，我通过在[bash](https://opensource.net/programming-with-bash-part-3-loops/)
    shell 中使用 vi 模式来结合这两种偏好。这意味着使用 vi 的按键，比如`k`来在命令历史中向上移动一行，`j`来向下移动一行。使用`0`（就是零）来移到命令行的开头，`$`来移到末尾；或者`cw`来更改从当前字符位置开始的单词，等等。
- en: Basically vi mode in the bash shell treats the command history as though it
    were the file of text being edited in vi, or vim and vi keystroke sequences operate
    on the history line where the cursor is currently positioned. It sounds clunky
    but it’s incredibly awesome. For people who are used to working in vi, it takes
    about 10 seconds to realize just how cool it is and after that…
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，bash shell 中的 vi 模式将命令历史视为正在 vi 或 vim 中编辑的文本文件，而 vi 和 vim 的按键序列则在当前光标位置的历史行上操作。听起来有些笨重，但实际上非常棒。对于习惯于使用
    vi 的人来说，大约10秒钟就能意识到它有多酷，之后…
- en: By default in the bash shell, the user is in “insert” mode, typing commands
    and causing them to be executed by pressing return. To exit “insert” mode, the
    user presses the `Esc` key to enter “command” mode, where keystrokes are interpreted
    as vi commands. When done editing the command line, the user presses the `Esc`
    key once again to exit “command” mode and enter “insert” mode.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 bash shell 中，默认情况下用户处于“插入”模式，输入命令并按回车执行。要退出“插入”模式，用户按下`Esc`键进入“命令”模式，其中按键被解释为
    vi 命令。编辑命令行完成后，用户再次按下`Esc`键退出“命令”模式并进入“插入”模式。
- en: 'The secret to getting vi mode working with bash is to create a file called
    .inputrc in the home directory and put these lines in it:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让 vi 模式与 bash 协同工作的秘诀是在主目录下创建一个名为 .inputrc 的文件，并在其中添加以下行：
- en: '`set editing-mode vi'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`set editing-mode vi`'
- en: set keymap vi-insert`
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`set keymap vi-insert`'
- en: Then start up a new shell where these settings will take effect.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后启动一个新的 shell，这些设置将会生效。
- en: That’s it! For those interested in more discussion of this topic, check out
    [this informative thread on stackoverflow](https://stackoverflow.com/questions/46161918/bash-vim-mode-instead-of-vi-mode)
    and check out our series of [Bash tutorials](https://opensource.net/?s=bash).
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！对于那些对这个话题更感兴趣的人，请查看[stackoverflow 上的这篇信息性帖子](https://stackoverflow.com/questions/46161918/bash-vim-mode-instead-of-vi-mode)，并查看我们的一系列[Bash
    教程](https://opensource.net/?s=bash)。
