- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:35:38'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: CSS | 18F Engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://guides.18f.gov/engineering/languages-runtimes/css/](https://guides.18f.gov/engineering/languages-runtimes/css/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <main class="usa-layout-docs__main desktop:grid-col-9
  prefs: []
  type: TYPE_NORMAL
- en: usa-prose measure-5 engineering">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of the CSS coding styleguide is to create consistent CSS or preprocessor
    CSS code (such as [Sass](http://sass-lang.com)) in your projects. The styleguide
    should be treated as a guide — rules can be modified according to project needs.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture[](#architecture)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A site's architecture should be based on its goals and purposes. This means
    the guidance here should be adapted to different sites and situations.
  prefs: []
  type: TYPE_NORMAL
- en: Modular or component architecture[](#modular-or-component-architecture)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When using a modular or component architecture, every page is broken into a
    series of modular components. There are two sets of these components: `components`
    and `modules`. The architecture starts out with basic HTML element rules: HTML,
    p, a, form, etc tags that than have components and modules written on top of them.
    Components are very basic structure such as buttons, blurbs, navs, and positioning
    structures like insets, island, and enclosure. From here, modules are built with
    these components. This architecture also attempts to keep the specificity trend
    in an upwards curve as you move down in the file (more on this to come).'
  prefs: []
  type: TYPE_NORMAL
- en: Start with an elements file for all tag rules (a, h1-h5, p, *, html, body).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create component files for each structural element, such as buttons, navs, etc.
    These are mainly class-based and use [BEM](http://getbem.com/introduction/) or
    another naming scheme.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create more specific structure with modules. For instance, if the logo image
    and text needs very specific treatment, use a module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build modules from components through mixins, extends, and HTML.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules can have higher specificity, it’s fine to use deeper nesting.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Have an overrides file or folder comprised of global rules that are meant to
    override components and modules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These can be generic utilities.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A good thing to put here are breakpoint-specific rules, such as hiding something
    at small breakpoints.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: File structure[](#file-structure)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For the `util`, `typography`, `elements`, and `overrides` files, once they grow
    too large (300 lines or more) in size, split them into their own folder with sub
    files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Importing[](#importing)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you likely know, CSS rules that are later in the file override earlier rules.
    This means Sass imports can be used to control inheritance and specificity.
  prefs: []
  type: TYPE_NORMAL
- en: Start with base elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move to single nested classes and utils
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move next to more specific classes, often with nesting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move next to overrides, possibly with !important rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import alphabetically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only modify import order for groups of files, not specific files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Documentation[](#documentation)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Be intentional when you use `//` (silent comments) versus `/* */` (which are
    preserved in the CSS output). When in doubt, use `//`.
  prefs: []
  type: TYPE_NORMAL
- en: KSS[](#kss)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use KSS for documentation. More information on KSS can be found on the [official
    site](http://warpspire.com/kss/).
  prefs: []
  type: TYPE_NORMAL
- en: Example[](#example)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Rationale[](#rationale)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: KSS is the most common CSS documentation method to date. While it’s not perfect,
    the generated documentation can be modified through templates.
  prefs: []
  type: TYPE_NORMAL
- en: Frameworks[](#frameworks)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TTS recommends using the [U.S. Web Design System (USWDS)](https://github.com/uswds/uswds)
    as it is specifically designed to help build fast, accessible, mobile-friendly
    federal government websites.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, projects utilize other CSS frameworks such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bourbon](https://www.bourbon.io/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[BassCSS](https://basscss.com/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These frameworks were chosen because they're relatively unopinionated about
    design decisions while still providing the helpers that make frameworks essential
    to fast and accurate frontend work, for example, solutions for responsive design,
    grids, and common design patterns. In addition, both frameworks, through modular
    design and excellent documentation, make it easy for the designer or developer
    to only use the parts that they need, rather than including a hefty library.
  prefs: []
  type: TYPE_NORMAL
- en: Do not use Bootstrap[](#do-not-use-bootstrap)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 18F specifically does not recommend using [Bootstrap](http://getbootstrap.com/)
    for production work because it can be difficult to adapt its opinionated styles
    to bespoke design work.
  prefs: []
  type: TYPE_NORMAL
- en: Formatting[](#formatting)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We recommend using [Prettier](https://prettier.io), and enabling it in your
    editor by default. Prettier is an automatic code formatter that will make your
    code format consistent. This way we don't have to argue over how to format our
    code - we just let the tools enforce something! Prettier works with both plain
    CSS and SCSS.
  prefs: []
  type: TYPE_NORMAL
- en: Do not use shorthand declarations unless you need to explicitly set all the
    available values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Avoid arbitrary numbers that are repeated, or linked, or dependent on other
    parts of the code, (aka “magic numbers”).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Order[](#order)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use the following ordering:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: variables
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '@extend directives'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '@include directives'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'declaration list (`property: name;`)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: media queries
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: pseudo-states (`:checked`, `:target`, etc.) and pseudo-elements (`::after`,
    `::selection`, etc.)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: nested elements
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: nested classes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use alphabetical order or type order for declarations. Pick one to keep the
    whole project consistent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Place a new line before nested selectors unless they are after the first selector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Treat nested includes, such as Neat's media includes – `@include media($small-screen)`
    — as a standard media query, rather than a Sass @include. So they would be sorted
    directly after the declaration list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Place mixin calls with `@content` after nested selectors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may deviate the sorting order to better suit your project's needs, as long
    as it's consistent throughout the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Inheritance[](#inheritance)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mixins[](#mixins)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use mixins for groups of properties that appear together intentionally and are
    used multiple times.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use mixins for components to change size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use mixins when something requires parameters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Do not use mixins for browser prefixes. Use [Autoprefixer](https://github.com/postcss/autoprefixer).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Extend[](#extend)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Be very careful with using `@extend`. It''s a powerful tool that can have disastrous
    side-effects. Before using please consider:'
  prefs: []
  type: TYPE_NORMAL
- en: Where is my current selector going to be appended?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Am I likely to be causing undesired side-effects?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How large is the CSS generated by this single extend?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you''re unsure of using `@extend`, follow these rules to avoid running into
    trouble:'
  prefs: []
  type: TYPE_NORMAL
- en: Use `@extend` from within a module, not across different modules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `@extend` on [placeholders](http://thesassway.com/intermediate/understanding-placeholder-selectors)
    exclusively, not on actual selectors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure the placeholder you extend is present as little as possible in the
    stylesheet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use [mixins](http://sass-lang.com/guide#mixins) in place of selectors.
    While mixins will copy more code, the difference will often be negligible once
    the output file has been gzipped.
  prefs: []
  type: TYPE_NORMAL
- en: Linting[](#linting)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using a linter will ensure that CSS code conforms to some consistent rules.
    A linting tool like [Stylelint](https://stylelint.io/) can issue warnings wherever
    your code differs from established rules.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Stylelint locally[](#setting-up-stylelint-locally)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run `npm install --save-dev stylelint stylelint-config-standard` to download
    the package and save it to your package.json
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a .stylelintrc.json configuration file in the root of your project with
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run Stylelint on all the CSS files in your project: `npx stylelint "**/*.css"`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This utilizes stylelint's standard rules configuration for css linting. If your
    project needs different rules or defaults, or you'd like to extend linting to
    other types of files, you can utilize custom syntaxes or write your own.
  prefs: []
  type: TYPE_NORMAL
- en: Stylelint has a [user guide](https://stylelint.io/user-guide/get-started) that
    will give you more details about how to configure and extend your linting rules.
  prefs: []
  type: TYPE_NORMAL
- en: Naming[](#naming)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTML elements should be in lowercase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Classes should be lowercase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid camelcase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name things clearly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write classes semantically. Name its function not its appearance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Avoid presentation- or location-specific words in names, as this will cause
    problems when you (invariably) need to change the color, width, or feature later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Be wary of naming components based on content, as this limits the use of the
    class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Don't abbreviate unless it’s a well-known abbreviation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use quotes in type pseudo selectors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Name CSS components and modules with singular nouns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Name modifiers and state-based rules with adjectives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If your CSS has to interface with other CSS libraries, consider namespacing
    every class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Naming methodologies[](#naming-methodologies)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When it comes to naming, the most important thing is consistency. The recommended
    way to do this is using an existing methodology like [BEM](#bem), or use a custom
    one that’s clearly defined.
  prefs: []
  type: TYPE_NORMAL
- en: BEM[](#bem)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[BEM](http://getbem.com/introduction/) (**B**lock, **E**lement, **M**odifier)
    structures CSS such that every entity is composed of (you guessed it) blocks,
    elements and modifiers. From [Harry Roberts](http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/):'
  prefs: []
  type: TYPE_NORMAL
- en: The point of BEM is to tell other developers more about what a piece of markup
    is doing from its name alone. By reading some HTML with some classes in, you can
    see how – if at all – the chunks are related; something might just be a component,
    something might be a child, or element, of that component, and something might
    be a variation or modifier of that component.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'TTS generally recommends using a modified BEM methodology outlined in the next
    subsection. However, you might want to use standard BEM when:'
  prefs: []
  type: TYPE_NORMAL
- en: You need a naming scheme that general CSS developers will already be familiar
    with or an existing naming scheme hasn’t been consistent enough.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you want to use JavaScript to modify the BEM class names dynamically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example of BEM in SCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Suggested custom methodology[](#suggested-custom-methodology)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The TTS recommendation for a naming methodology is a modified version of BEM.
    It still uses blocks, sections within blocks and modifiers, but with an abbreviated
    syntax.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Naming methodology resources[](#naming-methodology-resources)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: js- flagged classes[](#js-flagged-classes)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't attach styles to classes with a `js-` flag. These classes are reserved
    for javascript.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Rationale[](#rationale-1)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A `js-` flagged class needs to be highly portable. Adding styles to it breaks
    that portability.
  prefs: []
  type: TYPE_NORMAL
- en: test- flagged classes[](#test-flagged-classes)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't attach styles to classes with a `test-` flag. These classes are reserved
    for testing hooks such as those used by selenium.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Preprocessors[](#preprocessors)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most supported CSS preprocessor at TTS is [Sass](http://sass-lang.com).
    Using this preprocessor means you'll get supported resources such as frameworks,
    libraries, tutorials, and a comprehensive styleguide as support.
  prefs: []
  type: TYPE_NORMAL
- en: '*That being said, any preprocessor is allowed as long as it''s a sound project
    and has community support.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Dart Sass](https://sass-lang.com/dart-sass) is the primary implementation
    of Sass and is recommended for use in your projects.'
  prefs: []
  type: TYPE_NORMAL
- en: Command line installation[](#command-line-installation)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With npm[](#with-npm)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With homebrew[](#with-homebrew)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: run `brew install sass/sass/sass`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other installations[](#other-installations)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can read about other installation methods on [their website](https://sass-lang.com/install).
  prefs: []
  type: TYPE_NORMAL
- en: Specificity[](#specificity)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IDs should be reserved for JavaScript. Don’t use IDs for styles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Don't nest more than 3 layers deep.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not fix problems with `!important`. Use `!important` purposefully.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Keep specificity low and trend upwards in specificity as you move further down
    file. See the [specificity graph](#specificity-graph) section for more info.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't use unnecessary tag selectors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you have to hack specificity, use a safe hack: the *multi class*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Specificity graph[](#specificity-graph)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An easy rule to use when dealing with specificity is to start from a low specificity
    and curve to higher specificity as you move towards the bottom of the output file.
    Since CSS rules get replaced by rules further down in the file, you'll override
    rules in an expected way.
  prefs: []
  type: TYPE_NORMAL
- en: There’s a tool that can graph your files’ specificity, [CSS specificity graph](http://jonassebastianohlsson.com/specificity-graph/).
    Run your final output file through this tool and strive for a curve trending upwards.
  prefs: []
  type: TYPE_NORMAL
- en: Resources[](#resources)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Rationale[](#rationale-2)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With specificity comes great responsibility. Broad selectors allow us to be
    efficient, yet can have adverse consequences if not tested. Location-specific
    selectors can save us time, but will quickly lead to a cluttered stylesheet. Exercise
    your best judgment to create selectors that find the right balance between contributing
    to the overall style and layout of the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: When modifying an existing element for a specific use, try to use specific class
    names. Instead of `.listings-layout.bigger` use rules like `.listings-layout.listings-bigger`.
    Think about ack/grepping your code in the future.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use lowercase and separate words with hyphens when naming selectors. Avoid camelcase
    and underscores. Use human-readable selectors that describe what element(s) they
    style.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attribute selectors should use double quotes around values. Refrain from using
    over-qualified selectors; `div.container` can simply be stated as `.container`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IDs should be reserved for JavaScript. Unless you have a very good reason, all
    CSS should be attached to classes rather than IDs. When in doubt, use a class
    name. This prevents target confusion and allows CSS devs and JS devs to co-exist
    in the same code in peace. If you must use an id selector (`#id`) make sure that
    you have no more than one in your rule declaration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Units[](#units)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Measurements[](#measurements)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use **rem** units for font sizes with a px fallback. This can be done with
    the following mixin:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set the HTML font size to `10px` to ensure that `0.1rem` equals `1px`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use **em** units for positioning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use **percentages** when layout components stay relational to each other (e.g.
    a main content area that takes up 75% of the screen and a sidebar that takes up
    25%).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use **px** units for when a measurement shouldn't change based on user set font
    size or browser zooming or for when requiring pixel values below 5.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use unitless values for `line-height` as this will inherit values from the `font-size`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use up to 10 decimal places in em units to ensure accuracy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Do not use a unit with 0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Always use a unit for dimensions, margins, borders, padding, and typography.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Colors[](#colors)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use **hex** notation first, or then **rgb(a)**, or **hsl(a)**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both three-digit and six-digit hexadecimal notation are acceptable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When denoting color using hexadecimal notation, use all lowercase letters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using HSL or RGB notation, always add a single space after a comma and
    no space between parentheses and content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: If you use an rgba rule, include a fallback value in hexadecimal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Variables[](#variables)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create new variables in the following circumstances:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value is repeated twice
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The value is likely to be updated at least once
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All occurrences of the value are tied to the variable (for example not by coincidence)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When building scss that will be used across multiple projects use the `!default`
    flag to allow overriding.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `!global` flag should only be used when overriding a global variable from
    a local scope.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variables across the whole scss codebase should be placed in their own file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When declaring color variables, don't base the name on the color content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Be careful when naming variables based on their context.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Don't use the value of dimensional variables in the variable name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Name all used z-indexes with a variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a z-index variable for each z-index used, and a separate variable, possibly
    aliased for where the z-index is used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Responsive design & breakpoints[](#responsive-design-and-breakpoints)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Set variables for breakpoints at the top of your stylesheet. This functionality
    is built into Bourbon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use variables to set the queries throughout so they are easy to adapt if necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Place media queries nearest to the class they are affecting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rather than focusing on devices when deciding where to put breakpoints, focus
    on content; name breakpoint variables relative to each other.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: </main>
  prefs: []
  type: TYPE_NORMAL
