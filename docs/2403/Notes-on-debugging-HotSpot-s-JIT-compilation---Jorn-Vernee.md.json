["```\npublic class TestJIT {\n    public static void main(String[] args) {\n        for (int i = 0; i < 20_000; i++) {\n            payload();\n        }\n    }\n\n    public static void payload() {\n        // test code here\n    }\n} \n```", "```\n>  java  -cp  classes  -XX:CompileCommand=dontinline,TestJIT::payload  -Xbatch  TestJIT  CompileCommand:  dontinline  TestJIT.payload  bool  dontinline  =  true \n```", "```\njava  `\n  -cp  classes  `\n  -Xbatch  `\n  -XX:-TieredCompilation  `\n  -XX:CompileCommand=dontinline,TestJIT::payload  `\n  -XX:CompileCommand=print,TestJIT::payload  `\n  -XX:+UnlockDiagnosticVMOptions  `\n  -XX:PrintAssemblyOptions=intel  `\n  TestJIT \n```", "```\nCompileCommand: dontinline TestJIT.payload bool dontinline = true\nCompileCommand: print TestJIT.payload bool print = true\n\n============================= C2-compiled nmethod ==============================\n----------------------------------- Assembly -----------------------------------\n\nCompiled method (c2)      54   13             TestJIT::payload (1 bytes)\n total in heap  [0x000001c6bacb0a90,0x000001c6bacb0ca0] = 528\n relocation     [0x000001c6bacb0bd8,0x000001c6bacb0be8] = 16\n main code      [0x000001c6bacb0c00,0x000001c6bacb0c50] = 80\n stub code      [0x000001c6bacb0c50,0x000001c6bacb0c68] = 24\n oops           [0x000001c6bacb0c68,0x000001c6bacb0c70] = 8\n scopes data    [0x000001c6bacb0c70,0x000001c6bacb0c78] = 8\n scopes pcs     [0x000001c6bacb0c78,0x000001c6bacb0c98] = 32\n dependencies   [0x000001c6bacb0c98,0x000001c6bacb0ca0] = 8\n\n[Disassembly]\n--------------------------------------------------------------------------------\n[Constant Pool (empty)]\n\n--------------------------------------------------------------------------------\n\n[Verified Entry Point]\n  # {method} {0x000001c6d88002e8} 'payload' '()V' in 'TestJIT'\n  #           [sp+0x20]  (sp of caller)\n  0x000001c6bacb0c00:   sub             rsp, 0x18\n  0x000001c6bacb0c07:   mov             qword ptr [rsp + 0x10], rbp\n  0x000001c6bacb0c0c:   cmp             dword ptr [r15 + 0x20], 0\n  0x000001c6bacb0c14:   jne             0x1c6bacb0c43\n  0x000001c6bacb0c1a:   add             rsp, 0x10\n  0x000001c6bacb0c1e:   pop             rbp\n  0x000001c6bacb0c1f:   cmp             rsp, qword ptr [r15 + 0x378]\n                                                            ;   {poll_return}\n  0x000001c6bacb0c26:   ja              0x1c6bacb0c2d\n  0x000001c6bacb0c2c:   ret\n  0x000001c6bacb0c2d:   movabs          r10, 0x1c6bacb0c1f  ;   {internal_word}\n  0x000001c6bacb0c37:   mov             qword ptr [r15 + 0x390], r10\n  0x000001c6bacb0c3e:   jmp             0x1c6bac7ad80       ;   {runtime_call SafepointBlob}\n  0x000001c6bacb0c43:   call            0x1c6bac586e0       ;   {runtime_call StubRoutines (2)}\n  0x000001c6bacb0c48:   jmp             0x1c6bacb0c1a\n  0x000001c6bacb0c4d:   hlt\n  0x000001c6bacb0c4e:   hlt\n  0x000001c6bacb0c4f:   hlt\n[Exception Handler]\n  0x000001c6bacb0c50:   jmp             0x1c6baca3f00       ;   {no_reloc}\n[Deopt Handler Code]\n  0x000001c6bacb0c55:   call            0x1c6bacb0c5a\n  0x000001c6bacb0c5a:   sub             qword ptr [rsp], 5\n  0x000001c6bacb0c5f:   jmp             0x1c6bac7a020       ;   {runtime_call DeoptimizationBlob}\n  0x000001c6bacb0c64:   hlt\n  0x000001c6bacb0c65:   hlt\n  0x000001c6bacb0c66:   hlt\n  0x000001c6bacb0c67:   hlt\n--------------------------------------------------------------------------------\n[/Disassembly] \n```", "```\n0x000001c6bacb0c00:   sub             rsp, 0x18\n0x000001c6bacb0c07:   mov             qword ptr [rsp + 0x10], rbp \n```", "```\n0x000001c6bacb0c0c:   cmp             dword ptr [r15 + 0x20], 0\n0x000001c6bacb0c14:   jne             0x1c6bacb0c43 \n```", "```\n0x000001c6bacb0c1a:   add             rsp, 0x10\n0x000001c6bacb0c1e:   pop             rbp \n```", "```\n0x000001c6bacb0c1f:   cmp             rsp, qword ptr [r15 + 0x378]\n                                                            ;   {poll_return}\n0x000001c6bacb0c26:   ja              0x1c6bacb0c2d \n```", "```\npublic static int payload(int a, int b) {\n    return a + b;\n} \n```", "```\nfor (int i = 0; i < 20_000; i++) {\n    payload(1, 2);\n} \n```", "```\n # {method} {0x0000016af6c002f0} 'payload' '(II)I' in 'TestJIT'\n  # parm0:    rdx       = int\n  # parm1:    r8        = int\n  #           [sp+0x20]  (sp of caller)\n  0x0000016ad9230c00:   sub             rsp, 0x18\n  0x0000016ad9230c07:   mov             qword ptr [rsp + 0x10], rbp\n  0x0000016ad9230c0c:   cmp             dword ptr [r15 + 0x20], 0\n  0x0000016ad9230c14:   jne             0x16ad9230c47\n  0x0000016ad9230c1a:   lea             eax, [rdx + r8]\n  0x0000016ad9230c1e:   add             rsp, 0x10\n  0x0000016ad9230c22:   pop             rbp\n  0x0000016ad9230c23:   cmp             rsp, qword ptr [r15 + 0x378]\n                                                            ;   {poll_return}\n  0x0000016ad9230c2a:   ja              0x16ad9230c31\n  0x0000016ad9230c30:   ret \n```", "```\n # parm0:    rdx       = int\n  # parm1:    r8        = int \n```", "```\n 0x0000016ad9230c1a:   lea             eax, [rdx + r8] \n```", "```\npublic static int yetAnotherMethod() {\n    return 42;\n}\n\npublic static int otherMethod() {\n    return yetAnotherMethod();\n}\n\npublic static int payload() {\n    return otherMethod() + 1;\n} \n```", "```\n@ 0   TestJIT::otherMethod (4 bytes)   inline (hot)\n  @ 0   TestJIT::yetAnotherMethod (3 bytes)   inline (hot) \n```", "```\n@ 0   TestJIT::otherMethod (4 bytes)   disallowed by CompileCommand \n```", "```\njava  -XX:CompileCommand=help \n```", "```\nRunnable dummy = () -> {};\n\nstatic class Scope implements AutoCloseable {\n    final List<Runnable> resources = new ArrayList<>();\n\n    void addCloseAction(Runnable runnable) {\n        resources.add(runnable);\n    }\n\n    @Override\n    public void close() {\n        for (Runnable r : resources) {\n            r.run();\n        }\n    }\n}\n@Benchmark\npublic void testMethod() throws InterruptedException {\n    try (Scope scope = new Scope()) {\n        scope.addCloseAction(dummy);\n    }\n} \n```", "```\nMyBenchmark.testMethod:gc.alloc.rate.norm  avgt   50    96.000 Â±   0.001    B/op \n```", "```\n public void payload() {\n    try (Scope scope = new Scope()) {\n        scope.addCloseAction(dummy);\n    }\n}\n\nRunnable dummy = () -> {};\n\nstatic class Scope implements AutoCloseable {\n    final List<Runnable> resources = new ArrayList<>();\n\n    void addCloseAction(Runnable runnable) {\n        resources.add(runnable);\n    }\n\n    @Override\n    public void close() {\n        for (Runnable r : resources) {\n            r.run();\n        }\n    }\n} \n```", "```\nTestJIT recv = new TestJIT();\nfor (int i = 0; i < 20_000; i++) {\n    recv.payload();\n} \n```", "```\n+++++ Initial worklist for virtual void TestJIT.payload() (ea_inv=0) \n```", "```\n+++++ Calculating escape states and scalar replaceability \n```", "```\nJavaObject(9) NoEscape(NoEscape) [ [ 37 ]]     25  Allocate  === 5 6 7 8 1 (23 21 22 1 1 10 1 1 1 ) [[ 26 27 28 35 36 37 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, top, bool ) TestJIT::payload @ bci:0 (line 12) !jvms: TestJIT::payload @ bci:0 (line 12)\nJavaObject(10) NoEscape(NoEscape) [ [ 102 ]]     90  Allocate  === 39 36 63 8 1 (88 87 22 1 1 10 1 1 1 42 1 42 ) [[ 91 92 93 100 101 102 ]]  rawptr:NotNull ( int:>=0, java/lang/Object:NotNull *, bool, top, bool ) TestJIT$Scope::<init> @ bci:5 (line 20) TestJIT::payload @ bci:4 (line 12) !jvms: TestJIT$Scope::<init> @ bci:5 (line 20) TestJIT::payload @ bci:4 (line 12) \n```", "```\ntry (Scope scope = new Scope()) { \n```", "```\nfinal List<Runnable> resources = new ArrayList<>(); \n```", "```\nJavaObject(9) NoEscape(NoEscape) -> NoEscape(GlobalEscape) propagated from: LocalVar(28) ...\nJavaObject(9) NoEscape(GlobalEscape) NSR -> ArgEscape(GlobalEscape) propagated from: LocalVar(28) ... \n```", "```\nLocalVar(28) NoEscape(NoEscape) -> NoEscape(GlobalEscape) propagated from: LocalVar(41) ... \n```", "```\nLocalVar(41) ArgEscape(ArgEscape) -> ArgEscape(GlobalEscape) escapes as arg to: 1020  CallStaticJava  === 414 407 408 8 1 (42 1 1 417 1 ) [[ 1021 1022 1023 ]] # Static  TestJIT$Scope::close void ( TestJIT$Scope (java/lang/AutoCloseable):NotNull * ) TestJIT::payload @ bci:25 (line 12) !jvms: TestJIT::payload @ bci:25 (line 12) \n```", "```\nEscaping allocations:\n\nJavaObject(9) allocation in: TestJIT::payload @ bci:0 (line 12)\n  -> LocalVar(28)\n  -> LocalVar(41)\n  Reason: EscapesAsArg[callNode=1020  CallStaticJava  === 414 407 408 8 1 (42 1 1 417 1 ) [[ 1021 1022 1023 ]] # Static  TestJIT$Scope::close void ( TestJIT$Scope (java/lang/AutoCloseable):NotNull * ) TestJIT::payload @ bci:25 (line 12) !jvms: TestJIT::payload @ bci:25 (line 12)]\n\nJavaObject(10) allocation in: TestJIT$Scope::<init> @ bci:5 (line 20)\n  -> Field(19)\n  -> JavaObject(9)\n  -> LocalVar(28)\n  -> LocalVar(41)\n  Reason: EscapesAsArg[callNode=1020  CallStaticJava  === 414 407 408 8 1 (42 1 1 417 1 ) [[ 1021 1022 1023 ]] # Static  TestJIT$Scope::close void ( TestJIT$Scope (java/lang/AutoCloseable):NotNull * ) TestJIT::payload @ bci:25 (line 12) !jvms: TestJIT::payload @ bci:25 (line 12)] \n```", "```\n@ 25   TestJIT$Scope::close (39 bytes)   already compiled into a medium method \n```", "```\nSystem.out.println(\"pid: \" + ProcessHandle.current().pid());\nSystem.in.read(); \n```"]