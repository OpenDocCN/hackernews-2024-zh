["```\nselect char_count_zig('hi hii', 'i');\n char_count_zig\n----------------\n 3\n(1 row) \n```", "```\nconst std = @import(\"std\");\nconst pgzx = @import(\"pgzx\");\n comptime {\n pgzx.PG_MODULE_MAGIC();\n pgzx.PG_FUNCTION_V1(\"char_count_zig\", char_count_zig);\n}\n fn char_count_zig(input_text: []const u8, target_char: []const u8) !u32 {\n if (target_char.len > 1) {\n return pgzx.elog.Error(@src(), \"Target char is more than one byte\", .{});\n }\n pgzx.elog.Info(@src(), \"input_text: {s}\\n\", .{input_text});\n pgzx.elog.Info(@src(), \"target_char: {s}\\n\", .{target_char});\n pgzx.elog.Info(@src(), \"Target char len: {}\\n\", .{target_char.len});\n var count: u32 = 0;\n for (input_text) |char| {\n if (char == target_char[0]) {\n count += 1;\n }\n }\n return count;\n} \n```", "```\n#include \"postgres.h\"\n#include \"fmgr.h\"\n#include \"utils/builtins.h\"\n PG_MODULE_MAGIC;\n PG_FUNCTION_INFO_V1(char_count_c);\n Datum\nchar_count_c(PG_FUNCTION_ARGS)\n{\n int charCount = 0;\n int i = 0;\n text * inputText = PG_GETARG_TEXT_PP(0);\n text * targetChar = PG_GETARG_TEXT_PP(1);\n int inputText_sz = VARSIZE(inputText)-VARHDRSZ;\n int targetChar_sz = VARSIZE(targetChar)-VARHDRSZ;\n char * cp_inputText = NULL;\n char * cp_targetChar = NULL;\n if (targetChar_sz > 1 )\n {\n elog(ERROR, \"arg1 must be 1 char long\");\n }\n cp_inputText = (char *) palloc(inputText_sz + 1);\n cp_targetChar = (char *) palloc(targetChar_sz + 1);\n memcpy(cp_inputText, VARDATA(inputText), inputText_sz);\n memcpy(cp_targetChar, VARDATA(targetChar), targetChar_sz);\n elog(INFO, \"arg0 length is %d, value %s\", (int)strlen(cp_inputText), cp_inputText);\n elog(INFO, \"arg1 length is %d, value %s\", (int)strlen(cp_targetChar), cp_targetChar);\n while ( i < strlen(cp_inputText) )\n {\n if( cp_inputText[i] == cp_targetChar[0] )\n charCount++;\n i++;\n }\n pfree(cp_inputText);\n pfree(cp_targetChar);\n PG_RETURN_INT32(charCount);\n} \n```", "```\nselect char_count_zig('hi hii', ''); \n```", "```\nserver closed the connection unexpectedly\n This probably means the server terminated abnormally\n before or while processing the request.\nThe connection to the server was lost. Attempting reset: Failed. \n```", "```\nthread 70501513 panic: index out of bounds: index 0, len 0\n/Users/tsg/src/xataio/pgzx/examples/char_count_zig/src/main.zig:21:32: 0x103aaedff in char_count_zig (char_count_zig)\n if (char == target_char[0]) {\n ^\n/Users/tsg/src/xataio/pgzx/src/pgzx/fmgr.zig:95:5: 0x103aaf20f in call (char_count_zig)\n const value = @call(.no_async, impl, callArgs) catch |e| elog.throwAsPostgresError(src, e);\n ^\n???:?:?: 0x10316045b in _ExecInterpExpr (???)\n???:?:?: 0x10315fbef in _ExecInterpExprStillValid (???)\n???:?:?: 0x10326ceef in _evaluate_expr (???)\n???:?:?: 0x10326da67 in _simplify_function (???)\n???:?:?: 0x10326bacf in _eval_const_expressions_mutator (???) \n```", "```\nvar memctx = try pgzx.mem.createAllocSetContext(\"zig_context\", .{ .parent = pg.CurrentMemoryContext });\nconst allocator = memctx.allocator(); \n```", "```\nvar errctx = pgzx.err.Context.init();\ndefer errctx.deinit();\nif (errctx.pg_try()) {\n // Call Postgres C functions.\n} else {\n return errctx.errorValue();\n} \n```", "```\nmkdir my_extension\ncd my_extension\nnix flake init -t github:xataio/pgzx \n```", "```\ncomptime {\n pgzx.testing.registerTests(@import(\"build_options\").testfn, .{Tests});\n} \n```"]