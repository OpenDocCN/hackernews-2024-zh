["```\ndefmodule  User  do  #initializer  def  new(data)  do  ...  end  # getters  def  name(user)  do  ...  end  def  age(user)  do  ...  end  # setters  def  name(value,  user)  do  ...  end  def  age(value,  user)  do  ...  end  end\n```", "```\ndefrecord  User,  name:  nil,  age:  0\n```", "```\nState1 = trans_1(State),\nState2 = trans_2(State1),\nState3 = trans_3(State2),\n...\n```", "```\ntrans_3(\n  trans_2(\n    trans_1(State)\n  )\n)\n```", "```\nstate  |>  trans_1  |>  trans_2  |>  trans_3\n```", "```\nlist  |>  Enum.filter(&(&1  >  0))  # take positive numbers  |>  Enum.map(&(&1  *  &1))  # square each one  |>  Enum.reduce(0,  &(&1  +  &2))  # calculate sum\n```", "```\nEnum.each(enumerable,  fn  ->  ...  end)\n```", "```\nlist  |>  Stream.filter(&(&1  >  0))  |>  Stream.map(&(&1  *  &1))  |>  Enum.reduce(0,  &(&1  +  &2))  # Entire iteration happens here in a single pass\n```", "```\nabs  -1  +  5  # same as abs(-1 + 5)\n```", "```\ndefrecord  User,  name:  nil,  age:  0  # without parentheses  defrecord(User,  [name:  nil,  age:  0])  # with parentheses\n```"]