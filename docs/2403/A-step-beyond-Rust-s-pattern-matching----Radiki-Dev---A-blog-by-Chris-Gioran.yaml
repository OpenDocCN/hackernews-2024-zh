- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-29 12:45:32'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 12:45:32
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'A step beyond Rust''s pattern matching :: Radiki Dev — A blog by Chris Gioran'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '超越Rust模式匹配的一步:: Radiki Dev — Chris Gioran的博客'
- en: 来源：[https://radiki.dev/posts/match-and-bind-patterns/](https://radiki.dev/posts/match-and-bind-patterns/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://radiki.dev/posts/match-and-bind-patterns/](https://radiki.dev/posts/match-and-bind-patterns/)
- en: If you don’t need a refresh of basic Rust pattern match, go directly to [the
    new stuff](#glowdust) [#](#if-you-dont-need-a-refresh-of-basic-rust-pattern-match-go-directly-to-the-new-stuffglowdust)
  id: totrans-split-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果你不需要刷新基本的Rust模式匹配，请直接转到[新内容](#glowdust) [#](#if-you-dont-need-a-refresh-of-basic-rust-pattern-match-go-directly-to-the-new-stuffglowdust)
- en: A very opinionated reminder of patterns in Rust [#](#a-very-opinionated-reminder-of-patterns-in-rust)
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rust模式匹配的一个非常主观的提醒 [#](#a-very-opinionated-reminder-of-patterns-in-rust)
- en: 'Here’s a simple pattern match in Rust:'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是Rust中的一个简单模式匹配：
- en: 'Pretty anticlimactic, huh? Well, let me spice it up a bit:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 相当反戏剧性，是吧？好吧，让我加点调味：
- en: 'Still not good enough? Ok, let’s try something fancier:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 还不够好？好吧，让我们试试更花哨的东西：
- en: '[PRE0]'
  id: totrans-split-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Well, that escalated quickly.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，事情升级得真快。
- en: 'Now, `rustc` and I have had our disagreements, but in this case I can sort
    of see the point: This pattern can, in theory, fail. Our puny human eyes may not
    see it - in fact, you may think “hey, I am pretty sure 2 is equal to 2\. How can
    that fail?”'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`rustc`和我之间有分歧，但在这种情况下，我也能看到点端倪：这种模式在理论上可能会失败。我们渺小的人类眼睛可能看不到它 - 实际上，你可能会认为“嘿，我很确定2等于2。怎么可能失败？”
- en: Good point. But what if it was
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 好点。但如果它是
- en: '[PRE1]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Or some other, more complicated expression? No, says `rustc`, as long as there
    is an equality at play, (by having a constant on the left hand side, for example),
    I will not let you do this unconditionally.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 或者其他一些更复杂的表达式？不行，`rustc`说，只要存在等式（例如，在左手边有一个常量），我就不会无条件地让你这么做。
- en: But *conditionally*? No problem.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但是*有条件*？没问题。
- en: Let’s do that, then
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们做吧
- en: '[PRE2]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Excellent. I can pattern match on constants and capture variables. Let’s do
    something more complex
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。我可以在常量上进行模式匹配并捕获变量。让我们做一些更复杂的事情
- en: '[PRE3]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Nice, I can do conditionals between pattern matches and variable bindings. The
    example above is silly because the pattern will always match, but the syntax is
    what matters here.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，我可以在模式匹配和变量绑定之间进行条件处理。上面的例子很傻，因为模式总是匹配的，但这里重要的是语法。
- en: 'I can even build on this, to add conditions for the already bound variables:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我甚至可以在此基础上构建，为已绑定的变量添加条件：
- en: '[PRE4]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And that’s where all the trouble begun [#](#glowdust)
  id: totrans-split-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那就是所有麻烦的开始 [#](#glowdust)
- en: Watching this, I couldn’t help but think that it looks a lot like a declarative
    query…thing?
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 看到这一点，我忍不住觉得这看起来很像一个声明性查询……东西？
- en: 'Say I have a vector of pairs:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我有一个成对的向量：
- en: '[PRE5]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'I can grab an iterator out of it and do the same pattern matching in a for
    loop:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以从中抓取一个迭代器，并在for循环中进行相同的模式匹配：
- en: '[PRE6]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is trivial, but it is also clearly a pattern match.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这很琐碎，但显然也是一种模式匹配。
- en: '*And I want to do it conditionally, in the match itself.*'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*我想在匹配本身中有条件地进行。*'
- en: Let’s try a `while` instead of a `for`
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试用`while`而不是`for`
- en: '[PRE7]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Ok, not bad, we’ve got some kind of a conditional going. But I want something
    more. I want to do it in the pattern binding:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，还不够好？好吧，让我们尝试一些更复杂的东西：
- en: '[PRE8]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Sadly, it doesn’t work:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，它不起作用：
- en: '[PRE9]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, I am not a language designer, and I know next to nothing about Rust internals
    (I barely know Rust, to be honest). I can’t say if allowing this would break other
    things in the language or if it’s a well known bad idea.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我不是一个语言设计师，对Rust内部几乎一无所知（坦率地说，我对Rust了解甚少）。我不能说允许这样做会破坏语言中的其他东西，或者这是一个众所周知的坏主意。
- en: Thankfully, my ignorance is my shield, and I have no problems whatsoever making
    this work in my own language.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我的无知是我的盾牌，我完全没有问题地让这个工作在我自己的语言中。
- en: Pattern matching in Glowdust [#](#pattern-matching-in-glowdust)
  id: totrans-split-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Glowdust中的模式匹配 [#](#pattern-matching-in-glowdust)
- en: The algorithm in Glowdust is simple.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: Glowdust中的算法很简单。
- en: Just like in Rust, if there is an unbound variable in the left hand side of
    a pattern, then it is bound to whatever is on the right hand side. From then on,
    it is bound, and it behaves as a match, again like Rust does.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在Rust中一样，如果模式的左手边有一个未绑定变量，那么它将绑定到右手边的任何内容。从那时起，它就被绑定了，并且像Rust一样进行匹配。
- en: '*(NOTE: I say left hand/right hand side, but in Glowdust syntax the -> operator
    flips the two sides. Keep that in mind for the following examples)*'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*（注：我说左手/右手边，但在Glowdust语法中，->运算符会交换这两边。在接下来的例子中请记住这一点）*'
- en: The difference is that it does both in the same pattern. Here’s an example,
    in Glowdust
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 不同之处在于它在同一个模式中同时执行。这里有一个在Glowdust中的例子。
- en: 'First define a function to hold our data:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先定义一个包含我们数据的函数：
- en: 'Then populate with the same data as the iterator example above and query that:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用与上面迭代器示例相同的数据填充并查询：
- en: '[PRE10]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This works as expected:'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这按预期工作：
- en: 'But let’s not stop here. Let’s use this capability to do a join:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们不要止步于此。让我们使用这个能力来进行连接：
- en: '[PRE11]'
  id: totrans-split-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This works exactly because the first time a variable is met it is bound, and
    then it’s used as a *refutable* match.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正是因为第一次遇到变量时它是绑定的，然后它作为一个*可反驳的*匹配使用。
- en: '`middle`, in this case, is bound in the outer loop and then its value is used
    as a refutable pattern in the inner loop.'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`middle`被绑定在外部循环中，然后它的值被用作内部循环中可反驳的模式。
- en: It also has a very declarative, pattern matching feel to it, but it is very
    familiar and readable. The predicates it implies can be moved around and be optimized
    according to cardinalities and other statistics in the data store. They can even
    be pushed down to the storage layer, if computational storage becomes available.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 它还具有非常声明式、模式匹配的感觉，但非常熟悉和可读。它隐含的谓词可以根据数据存储中的基数和其他统计数据进行移动和优化。它们甚至可以被推送到存储层，如果计算存储可用的话。
- en: Did I mention that it works? You can run these examples right now, today, in
    [Glowdust](https://codeberg.org/glowdust/glowdust).
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到过它能工作吗？你可以立即在[Glowdust](https://codeberg.org/glowdust/glowdust)中运行这些例子。
- en: Query By Example didn’t go far enough [#](#query-by-example-didnt-go-far-enough)
  id: totrans-split-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按示例查询并没有走得太远[#](#query-by-example-didnt-go-far-enough)
- en: This may remind you of Query By Example in MS Access or Hibernate.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能让您想起MS Access或Hibernate中的按示例查询。
- en: It isn’t.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 它并不是。
- en: It’s Query By Pattern, which is much cooler.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 它是按模式查询，这样更酷。
- en: This compiles down to proper bytecode, it isn’t just a DSL. You can have full
    expressions reusing variables that just came into scope, join on them and use
    them in further expressions like filters and (eventually) aggregations.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这编译成了适当的字节码，而不仅仅是DSL。您可以在完全表达式中重用刚刚进入作用域的变量，将它们连接起来并在后续表达式中使用，如过滤器和（最终）聚合。
- en: I think the comparison to Rust’s (and other languages’) patern matching is interesting,
    but I don’t remotely argue that it is better. It is, however, better suited for
    a database query language.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为与Rust（和其他语言的）模式匹配的比较很有意思，但我绝不会认为它更好。然而，它更适合作为数据库查询语言。
- en: Which is quite fortunate, because that’s what I’m building.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常幸运，因为这就是我正在构建的。
- en: '* * *'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: As always, let me know your thoughts on [Mastodon](https://fosstodon.org/@chrisg)
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，请告诉我你对[Mastodon](https://fosstodon.org/@chrisg)的想法。
- en: And, if you find this interesting enough, you may want to [donate](https://liberapay.com/chris.gioran/)
    towards the costs of developing Glowdust.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您觉得这足够有趣，您可能想要[捐赠](https://liberapay.com/chris.gioran/)以支持Glowdust的开发成本。
