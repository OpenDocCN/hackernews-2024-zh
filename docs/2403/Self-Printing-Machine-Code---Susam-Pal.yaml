- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 15:01:24'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:01:24
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Self-Printing Machine Code - Susam Pal
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自印机器码 - Susam Pal
- en: 来源：[https://susam.net/self-printing-machine-code.html](https://susam.net/self-printing-machine-code.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://susam.net/self-printing-machine-code.html](https://susam.net/self-printing-machine-code.html)
- en: <main>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <主要>
- en: Self-Printing Machine Code
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自印机器码
- en: By **Susam Pal** on 27 Oct 2005
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由**Susam Pal**于2005年10月27日撰写
- en: 'The following 12-byte program composed of pure x86 machine code writes itself
    to standard output when executed in a DOS environment:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在DOS环境中执行时，以下由纯x86机器码组成的12字节程序在标准输出中写入自身：
- en: '[PRE0]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can write these bytes to a file with the .COM extension and execute it in
    DOS. It runs successfully in MS-DOS 6.22, Windows 98, as well as in DOSBox and
    writes a copy of itself to standard output.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这些字节写入扩展名为.COM的文件并在DOS中执行。它在MS-DOS 6.22、Windows 98以及DOSBox中成功运行，并将自身的副本写入标准输出。
- en: Contents
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录
- en: Demo
  id: totrans-split-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 演示
- en: 'On a Unix or Linux system, the following commands demonstrate this program
    with the help of DOSBox:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix或Linux系统上，以下命令借助DOSBox演示了如何运行此程序：
- en: '[PRE1]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `diff` command should produce no output confirming that the output of the
    program is identical to the program itself. On an actual MS-DOS 6.22 system or
    a Windows 98 system, we can demonstrate this program in the following manner:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`diff`命令不应产生输出，从而确认程序的输出与程序本身相同。在实际的MS-DOS 6.22系统或Windows 98系统上，我们可以通过以下方式演示此程序：'
- en: '[PRE2]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the `DEBUG` session shown above, we use the debugger command `E` to enter
    the machine code at offset 0x100 of the code segment. Then we use the `N` command
    to name the file we want to write this machine code to. The command `R CX` is
    used to specify that we want to write 0xC (decimal 12) bytes to this file. The
    `W` command writes the 12 bytes entered at offset 0x100\. The `Q` command quits
    the debugger. Then we run the new `FOO.COM` program while redirecting its output
    to `OUT.COM`. Finally, we use the `FC` command to compare the two files and confirm
    that they are exactly the same.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面显示的`DEBUG`会话中，我们使用调试器命令`E`来输入代码段偏移量为0x100的机器码。然后我们使用`N`命令来命名我们想要将这段机器码写入的文件。命令`R
    CX`用于指定我们要向此文件写入0xC（十进制12）字节。命令`W`写入从偏移量0x100输入的12个字节。命令`Q`退出调试器。然后我们运行新的`FOO.COM`程序，同时将其输出重定向到`OUT.COM`。最后，我们使用`FC`命令比较这两个文件并确认它们完全相同。
- en: 'Let us disasssemble this program now and see what it does. The output below
    is generated using the Netwide Disassembler (NDISASM), a tool that comes with
    Netwide Assembler (NASM):'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们分解这个程序，看看它的作用。下面的输出是使用Netwide Disassembler（NDISASM）生成的，这是随Netwide Assembler（NASM）提供的工具：
- en: '[PRE3]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When DOS executes a program in .COM file, it loads the machine code in the file
    at offset 0x100 of the code segment chosen by DOS. That is why we ask the disassembler
    to assume a load address of 0x100 with the `-o` command line option. The first
    instruction clears the direction flag. The purpose of this instruction is explained
    later. The next instruction sets the register CL to 0xc (decimal 12). The register
    CH is already set to 0 by default when a .COM program starts. Thus setting the
    register CL to 0 effectively sets the entire register CX to 0xc. The register
    CX is used as a loop counter for the `loop 0x103` instruction that comes later.
    Everytime this loop instruction executes, it decrements CX and makes a near jump
    to offset 0x103 if CX is not 0\. This results in 12 iterations of the loop.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当DOS执行一个以.COM文件结尾的程序时，它将文件中的机器码加载到DOS选择的代码段的0x100偏移处。这就是为什么我们要求反汇编器假定使用`-o`命令行选项加载地址为0x100。第一条指令清除方向标志。稍后会解释这条指令的目的。接下来的指令将寄存器CL设置为0xc（十进制12）。当.COM程序启动时，寄存器CH默认已设置为0。因此，将寄存器CL设置为0有效地将整个寄存器CX设置为0xc。寄存器CX用作后面的`loop
    0x103`指令的循环计数器。每当这个循环指令执行时，它会递减CX，并且如果CX不为0，则跳转到偏移量0x103。这样会进行12次循环。
- en: In each iteration of the loop, the instructions from offset 0x103 to offset
    0x109 are executed. The `lodsb` instruction loads a byte from address DS:SI into
    AL. When DOS starts executing this program, DS and SI are set to CS and 0x100
    by default, so at the beginning DS:SI points to the first byte of the program.
    The `xchg` instruction exchanges the values in AX and DX. Thus the byte we just
    loaded into AL ends up in DL. Then we set AH to 2 and generate the software interrupt
    0x21 (decimal 33) to write the byte in DL to standard output. This is how each
    iteration reads a byte of this program and writes it to standard output.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环的每次迭代中，从偏移量0x103到偏移量0x109的指令被执行。`lodsb`指令将地址DS:SI中的一个字节加载到AL寄存器中。当DOS开始执行该程序时，默认情况下DS和SI设置为CS和0x100，因此起始时DS:SI指向程序的第一个字节。`xchg`指令交换AX和DX寄存器的值。因此，刚刚加载到AL中的字节最终存储在DL寄存器中。然后我们将AH设置为2，并生成软中断0x21（十进制33），将DL中的字节写入标准输出。这就是每次迭代读取程序的一个字节并将其写入标准输出的过程。
- en: The `lodsb` instruction increments or decrements SI depending on the state of
    the direction flag (DF). When DF is cleared, it increments SI. If DF is set, it
    decrements SI. We use the `cld` instruction at the beginning to clear DF, so that
    in each iteration of the loop, SI moves forward to point to the next byte of the
    program. This is how the 12 iterations of the loop write 12 bytes of the program
    to standard output. In many DOS environments, the DF flag is already in cleared
    state when a .COM program starts, so the CLD instruction could be omitted in such
    environments. However, there are some environments where DF may not be in cleared
    state when our program starts, so it is a best practice to clear DF before relying
    on it.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`lodsb`指令根据方向标志（DF）的状态递增或递减SI寄存器的值。当DF被清除时，SI递增；如果DF被设置，则SI递减。我们在开头使用`cld`指令来清除DF，因此在循环的每次迭代中，SI向前移动以指向程序的下一个字节。这就是循环的12次迭代将程序的12个字节写入标准输出的过程。在许多DOS环境中，当一个.COM程序启动时，DF标志已经被清除，因此在这些环境中可以省略CLD指令。但是，在某些环境中，当我们的程序启动时，DF可能不处于清除状态，因此在依赖于DF之前清除它是一个最佳实践。'
- en: Finally, when the loop terminates, we execute the `RET` instruction to terminate
    the program.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当循环终止时，我们执行`RET`指令来结束程序。
- en: Quine Conundrums
  id: totrans-split-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Quine Conundrums
- en: While reading the description of the self-printing program presented earlier,
    one might wonder if it is a quine. While there is no standardised definition of
    the term *quine*, it is generally accepted that a quine is a computer program
    that takes no input and produces an exact copy of its own source code as its output.
    Since a quine cannot take any input, tricks involving reading its own source code
    or evaluating itself are ruled out.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当阅读之前提出的自打印程序的描述时，人们可能会想知道它是否是一个quine。虽然没有关于*quine*的标准定义，但通常认为quine是一个计算机程序，它不接受任何输入并生成其自身源代码的精确副本作为输出。由于quine不能接受任何输入，因此涉及读取自身源代码或评估自身的技巧被排除在外。
- en: 'For example, this shell script is a valid quine:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，此shell脚本是一个有效的quine：
- en: '[PRE4]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'However, the following shell script is not considered a proper quine:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，以下shell脚本不被认为是一个正确的quine：
- en: '[PRE5]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The shell script above reads its own source code which is considered cheating.
    Improper quines like this are often called *cheating quines*.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上述shell脚本读取其自身的源代码被认为是作弊行为。像这样的不恰当quine通常被称为*cheating quines*。
- en: Is our 12-byte x86 program a quine? It turns out that we have a conundrum. There
    is no notion of source code for our program. There would have been one if we had
    written out the source code of this program in assembly language. In such a case
    we would first need to choose an assembler and a proper quine would need to produce
    an exact copy of the assembly language source code (not the machine code bytes)
    for the chosen assembler. But we are not doing that here. We want the machine
    code to produce an exact copy of itself. There is no source code involved. We
    only have machine code. So we could argue that the whole notion of machine code
    quine is nonsense. No machine code quine can exist because there is no source
    code to produce as output.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的12字节x86程序是quine吗？事实证明我们面临一个难题。对于我们的程序，不存在源代码的概念。如果我们用汇编语言写出了该程序的源代码，那么情况就不同了。在这种情况下，我们首先需要选择一个汇编器，并且一个正确的quine需要生成所选汇编器的汇编语言源代码的精确副本（而不是机器码字节）。但是我们现在并没有这样做。我们希望机器码生成其自身的精确副本。这里没有涉及到源代码。我们只有机器码。因此我们可以说机器码quine的整个概念是无意义的。没有机器码quine可以存在，因为没有源代码可以作为输出产生。
- en: However, we could also argue that the machine code is the input for the CPU
    that the CPU fetches, decodes, and converts to a sequence of state changes in
    the CPU. If we define a machine code quine to be a machine code program that writes
    its own bytes, then we could say that we have a machine code quine here.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们也可以认为机器码是 CPU 的输入，CPU 获取、解码并将其转换为 CPU 中的状态变化序列。如果我们定义一个机器码 quine 为一个能够写出自己字节的机器码程序，那么我们可以说我们在这里有一个机器码
    quine。
- en: Let us now entertain the thought that our 12-byte program is indeed a machine
    code quine. Now we have a new conundrum. Is it a proper quine? This program reads
    its own bytes from memory and writes them. Does that make it a cheating quine?
    What would a proper quine written in pure machine code even look like? If we look
    at the shell script quine above, we see that it contains parts of the executable
    part of the script code embedded in a string as data. Then we format the string
    cleverly to produce a new string that looks exactly like the entire shell script.
    It is a common pattern followed in many quines. The quine does not read its own
    code but it reads some data defined by the code and formats that data to look
    like its own code. However, in pure machine code like this the lines between data
    and code are blurred. Even if we try to keep the bytes we want to read at a separate
    place in the memory and treat it like data, they would look exactly like machine
    instructions, so one might wonder if there is any point in trying to make a machine
    quine that does not read its own bytes. Nevertheless the next section shows how
    to accomplish this.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来思考一下我们的 12 字节程序是否确实是一个机器码 quine。现在我们面临一个新的难题。它是一个正确的 quine 吗？这个程序从内存中读取自己的字节并将它们写出。这是否使它成为一个作弊的
    quine？一个纯机器码编写的正确 quine 究竟会是什么样子？如果我们看一下上面的 shell 脚本 quine，我们会看到它包含嵌入在字符串中的脚本代码的可执行部分。然后我们巧妙地格式化字符串以生成一个看起来完全像整个
    shell 脚本的新字符串。这是许多 quine 遵循的常见模式。这个 quine 并不读取自己的代码，而是读取由代码定义的一些数据，并将该数据格式化为看起来像自己代码的新字符串。然而，在像这样的纯机器码中，数据和代码之间的界线变得模糊。即使我们尝试将想要读取的字节保留在内存中的另一个位置并将其视为数据，它们看起来也会与机器指令完全相同，因此人们可能会想知道是否有必要制作一个不读取自己字节的机器
    quine。尽管如此，下一节展示了如何实现这一点。
- en: Proper Quines
  id: totrans-split-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正确的 Quines
- en: If the thought of a machine code quine program reading its own bytes from the
    memory makes you uncomfortable, here is an adapation of the previous program that
    keeps the machine instructions to be executed separate from the data bytes to
    be read by the program.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想到一个机器码 quine 程序从内存中读取自己的字节会让你感到不适，这里是前一个程序的一个改编，将待执行的机器指令与程序读取的数据字节分开。
- en: '[PRE6]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is how we can demonstrate this 40-byte program:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何演示这个 40 字节程序：
- en: '[PRE7]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is the disassembly:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是反汇编：
- en: '[PRE8]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The first 20 bytes is the executable part of the program. The next 20 bytes
    is the data read by the program. The executable bytes are identical to the data
    bytes. The executable part of the program has an outer loop that iterates twice.
    In each iteration, it reads the data bytes and writes them to standard output.
    Therefore, in two iterations of the outer loop, it writes the data bytes twice.
    In this manner, the output is identical to the program itself.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 前 20 字节是程序的可执行部分。接下来的 20 字节是程序读取的数据。可执行字节与数据字节相同。程序的可执行部分有一个外部循环，迭代两次。在每次迭代中，它读取数据字节并将它们写入标准输出。因此，在外部循环的两次迭代中，它将数据字节写入两次。通过这种方式，输出与程序本身完全相同。
- en: 'Here is another simpler 32-byte quine based on this approach:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这种方法，这里是另一个更简单的 32 字节 quine：
- en: '[PRE9]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here are the commands to demostrate this quine:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是演示此 quine 的命令：
- en: '[PRE10]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the disassembly:'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是反汇编：
- en: '[PRE11]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This example too has two parts. The first half has the executable bytes and
    the second half has the data bytes. Both parts are identical. This example sets
    AH to 9 in the first instruction and then later uses `int 0x21` to invoke the
    DOS service that prints a dollar-terminated string beginning at the address specifed
    in DS:DX. When a .COM program starts, DS already points to the current code segment,
    so we don't have to set it explicitly. The dollar symbol has an ASCII code of
    0x24 (decimal 36). We need to be careful about not having this value anywhere
    within the the data bytes or this DOS function would prematurely stop printing
    our data bytes as soon as it encounters this value. That is why we set AL to 0x23
    in the first instruction, then increment it to 0x24 in the second instruction,
    and then copy this value to the end of the data bytes in the third instruction.
    Finally, we execute `int 0x21` twice to write the data bytes twice to standard
    output, so that the output matches the program itself.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子也有两部分。前半部分是可执行字节，后半部分是数据字节。这两部分内容完全相同。这个例子在第一条指令中将AH设置为9，然后稍后使用`int 0x21`来调用DOS服务，该服务打印从DS:DX指定地址开始的以美元符号终止的字符串。当一个.COM程序启动时，DS已经指向当前代码段，因此我们不必显式设置它。美元符号的ASCII码是0x24（十进制36）。我们需要注意确保在数据字节中没有这个值，否则这个DOS函数会在遇到该值时提前停止打印我们的数据字节。这就是为什么我们在第一条指令中将AL设置为0x23，然后在第二条指令中递增到0x24，然后将这个值复制到第三条指令中数据字节的末尾。最后，我们执行两次`int
    0x21`以两次将数据字节写入标准输出，以便输出与程序本身匹配。
- en: While both these programs take care not to read the same memory region that
    is being executed by the CPU, the data bytes they read look exactly like the executable
    bytes. This is what I meant when I mentioned earlier that the lines between code
    and data are blurred in an exercise like this. This is why I don't really see
    a point in keeping the executable bytes separate from the data bytes while writing
    machine code quines.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这两个程序都注意不读取CPU正在执行的相同内存区域，但它们读取的数据字节看起来确实与可执行字节完全相同。这就是我前面提到的在这样的练习中代码与数据之间界限模糊的意思。这也是为什么在编写机器码quine时，我认为将可执行字节与数据字节分开没有意义的原因。
- en: A Note on DOS Services
  id: totrans-split-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于DOS服务的说明
- en: The self-printing programs presented above use `int 0x21` which offers DOS services
    that support various input/output functions. In the first two programs, we selected
    the function to write a character to standard output by setting AH to 2 before
    invoking this software interrupt. In the next program, we selected the function
    to write a dollar-terminated string to standard output by setting AH to 9.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上面介绍的自打印程序使用了`int 0x21`，该函数提供支持各种输入/输出功能的DOS服务。在前两个程序中，我们设置AH为2，然后调用这个软件中断以写一个字符到标准输出。在下一个程序中，我们设置AH为9，选择写一个以美元符号终止的字符串到标准输出的功能。
- en: The `ret` instruction in the end too relies on DOS services. When a .COM program
    starts, the register SP contains 0xfffe. The stack memory locations at offset
    0xfffe and 0xffff contain 0x00 and 0x00, respectively. Further, the memory address
    at offset 0x0000 contains the instruction `int 0x20` which is a DOS service that
    terminates the program. As a result, executing the `ret` instruction pops 0x0000
    off the stack at 0xfffe and loads it into IP. This results in the instruction
    `int 0x20` at offset 0x0000 getting executed. This instruction terminates the
    program and returns to DOS.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 结尾处的`ret`指令也依赖于DOS服务。当一个.COM程序启动时，寄存器SP包含0xfffe。堆栈内存位置在偏移0xfffe和0xffff处包含0x00和0x00。此外，偏移0x0000处的内存地址包含了`int
    0x20`指令，这是一个DOS服务，用于终止程序。因此，执行`ret`指令将0xfffe处的堆栈弹出0x0000，并将其加载到IP中。这导致偏移0x0000处的`int
    0x20`指令被执行。该指令终止程序并返回到DOS。
- en: Relying on DOS services gives us a comfortable environment to work with. In
    particular, DOS implements the notion of *standard output* which lets us redirect
    standard output to a file. This lets us conveniently compare the original program
    file and the output file with the `FC` command and confirm that they are identical.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖DOS服务为我们提供了一个舒适的工作环境。特别是，DOS实现了*标准输出*的概念，使我们能够将标准输出重定向到文件。这使得我们可以方便地使用`FC`命令比较原始程序文件和输出文件，并确认它们是相同的。
- en: But one might wonder if we could avoid relying on DOS services completely and
    still write a program that prints its own bytes to screen. We definitely can.
    We could write directly to video memory at address 0xb800:0x0000 and show the
    bytes of the program on screen. We could also forgo DOS completely and let BIOS
    load our program from the boot sector and execute it. The next two sections discuss
    these things.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 但是有人可能想知道，我们是否可以完全避免依赖DOS服务并仍然编写一个程序，将其自己的字节打印到屏幕上。我们确实可以。我们可以直接写入地址为0xb800:0x0000的视频存储器，并在屏幕上显示程序的字节。我们还可以完全放弃DOS，让BIOS从引导扇区加载我们的程序并执行它。接下来的两个部分将讨论这些事情。
- en: Writing to Video Memory Directly
  id: totrans-split-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接写入视频存储器
- en: Here is an example of an 18-byte self-printing program that writes directly
    to the video memory at address 0xb800:0x0000.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个18字节的自打印程序示例，直接写入地址为0xb800:0x0000的视频存储器。
- en: '[PRE12]'
  id: totrans-split-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here are the commands to create and run this program:'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建和运行该程序的命令：
- en: '[PRE13]'
  id: totrans-split-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With the default code page active, i.e., with code page 437 active, the program
    should display an output that looks approximately like the following and halt:'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认的代码页激活状态下，即代码页437激活状态下，程序应该显示一个输出，看起来大致如下并停止：
- en: '[PRE14]'
  id: totrans-split-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now of course this type of output looks gibberish but there is a quick and
    dirty way to confirm that this output indeed represents the bytes of our program.
    We can use the `TYPE` command of DOS to print the program and check if the symbols
    that appear in its output seem consistent with the output above. Here is an example:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这种类型的输出看起来像胡言乱语，但有一种快速而不精确的方法可以确认该输出确实代表我们程序的字节。我们可以使用DOS的`TYPE`命令打印程序，并检查其输出中出现的符号是否与上述输出一致。以下是一个示例：
- en: '[PRE15]'
  id: totrans-split-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This output looks very similar to the previous one except that the byte value
    0x0a is rendered as a line break in this output whereas in the previous output
    this byte value is represented as a circle in a box. This method would not have
    worked if there were any control characters such as backspace or carriage return
    that result in characters being erased in the displayed output.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出看起来与先前的输出非常相似，只是在此输出中，字节值0x0a作为换行符显示，而在先前的输出中，该字节值作为一个圆圈在一个方框中表示。如果输出中存在任何控制字符（如退格或回车），导致显示输出中的字符被删除，则此方法将无法工作。
- en: 'A proper way to verify that the output of the program represents the bytes
    of the program would be to find each symbol in the output in a chart for code
    page 437 and confirm that the byte value of each symbol matches each byte value
    in the program. Here is one such chart that approximates the symbols in code page
    437 with Unicode symbols: [cp437.html](code/cp437/cp437.html).'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 验证程序输出是否代表程序的字节的正确方法是在代码页437的字符图表中找到输出中的每个符号，并确认每个符号的字节值与程序中的每个字节值匹配。以下是一个近似于代码页437中符号的Unicode符号的图表：[cp437.html](code/cp437/cp437.html)。
- en: 'Here is the disassembly of the above program:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是上述程序的反汇编：
- en: '[PRE16]'
  id: totrans-split-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This program sets ES to 0xb800 and DI to 0\. Thus ES:DI points to the video
    memory at address 0xb800:0x0000\. DS:SI points to the first instruction of this
    program by default. Further AH is set to 0xa. This is used to specify the colour
    attribute of the text to be displayed on screen. Each iteration of the loop in
    this program loads a byte of the program and writes it along with the colour attribute
    to video memory. The `lodsb` instruction loads a byte of the program from the
    memory address specified by DS:SI into AL and increments SI by 1\. AH is already
    set to 0xa. The value 0xa (binary 00001010) here specifies black as the background
    colour and bright green as the foreground colour. The `stosw` instruction stores
    a word from AX to the memory address specified by ES:DI and increments DI by 2\.
    In this manner, the byte in AL and its colour attribute in AH gets copied to the
    video memory.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序将ES设置为0xb800，DI设置为0。因此ES:DI指向地址0xb800:0x0000处的视频存储器。DS:SI默认指向该程序的第一条指令。此程序循环的每次迭代从程序中加载一个字节，并将其与颜色属性一起写入视频存储器。`lodsb`指令从DS:SI指定的内存地址加载程序的一个字节到AL，并将SI增加1。AH已设置为0xa。这用于指定要显示在屏幕上的文本的颜色属性。`stosw`指令将AX中的一个字存储到由ES:DI指定的内存地址，并将DI增加2。通过这种方式，AL中的字节及其在AH中的颜色属性被复制到视频存储器中。
- en: 'Once again, if you are not happy about the program reading its own executable
    bytes, we can keep the bytes we read separate from the bytes the CPU executes.
    Here is a 54-byte program that does this:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，如果对程序读取自身可执行字节不满意，我们可以保持读取的字节与 CPU 执行的字节分开。以下是一个实现此功能的 54 字节程序：
- en: '[PRE17]'
  id: totrans-split-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here is how we can create and run this program:'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们创建和运行这个程序的方法：
- en: '[PRE18]'
  id: totrans-split-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With code page 437 active, the output should look approximately like this:'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用活动的代码页 437，输出应该大致如下：
- en: '[PRE19]'
  id: totrans-split-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can clearly see in this output that the first 27 bytes of output are identical
    to the next 27 bytes of the output. Like the proper quines discussed earlier,
    this one too has two halves that are identical to each other. The executable code
    in the first half reads the data bytes from the second half and prints the data
    bytes twice so that the output bytes is an exact copy of all 54 bytes in the program.
    Here is the disassembly:'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以清楚地在这个输出中看到，输出的前 27 个字节与后续的 27 个字节是相同的。与之前讨论过的适当的自指程序类似，这个程序也有两个相互相同的部分。第一半中的可执行代码从第二半中读取数据字节并打印两次数据字节，以使输出字节是程序中所有
    54 个字节的精确副本。以下是反汇编：
- en: '[PRE20]'
  id: totrans-split-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This disassembly is rather long but we can clearly see that the bytes from offset
    0x100 to offset 0x11a are identical to the bytes from offset 0x11b to 0x135\.
    These are the bytes we see in the output of the program too.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个反汇编相当长，但我们可以清楚地看到从偏移量 0x100 到偏移量 0x11a 的字节与从偏移量 0x11b 到 0x135 的字节是相同的。这些字节也是程序输出中看到的字节。
- en: Boot Program
  id: totrans-split-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引导程序
- en: 'The 32-byte program below writes itself to video memory when executed from
    the boot sector:'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 32 字节程序在从引导扇区执行时将自身写入视频内存：
- en: '[PRE21]'
  id: totrans-split-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We can create a boot image that contains these bytes, write it to the boot sector
    of a drive and boot an IBM PC compatible computer with it. On booting, this program
    prints its own bytes on the screen.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个包含这些字节的引导映像，将其写入驱动器的引导扇区，并使用它引导 IBM PC 兼容计算机。引导时，这个程序将其自己的字节打印到屏幕上。
- en: 'On a Unix or Linux system, the following commands can be used to create a boot
    image with the above program:'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unix 或 Linux 系统上，可以使用以下命令创建具有上述程序的引导映像：
- en: '[PRE22]'
  id: totrans-split-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now we can test this boot image using DOSBox with the following command:'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用 DOSBox 测试这个引导映像，命令如下：
- en: '[PRE23]'
  id: totrans-split-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can also test this image using QEMU x86 system emulator as follows:'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 QEMU x86 系统仿真器测试这个映像，方法如下：
- en: '[PRE24]'
  id: totrans-split-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We could also write this image to the boot sector of an actual physical storage
    device, such as a USB flash drive, and then boot the computer with it. Here is
    an example command that writes the boot image to the drive represented by the
    device path `/dev/sdx`.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将这个映像写入实际物理存储设备的引导扇区，比如 USB 闪存驱动器，然后用它来引导计算机。以下是一个将引导映像写入由设备路径 `/dev/sdx`
    表示的驱动器的示例命令。
- en: '[PRE25]'
  id: totrans-split-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '*CAUTION: You need to be absolutely sure of the device path of the device being
    written to. The device path `/dev/sdx` is only an example here. If the boot image
    is written to the wrong device, access to the data on that would be lost.*'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：您需要绝对确定被写入的设备路径。这里的设备路径 `/dev/sdx` 只是一个示例。如果将引导映像写入错误的设备，可能会导致该设备上的数据访问丢失。*'
- en: 'On testing this boot image with an emulator or a real computer, the output
    should look approximately like this:'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用仿真器或实际计算机测试这个引导映像时，输出应该大致如下：
- en: '[PRE26]'
  id: totrans-split-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This looks like gibberish, however every symbol in the above output corresponds
    to a byte of the program mentioned earlier. For example, the first symbol (omega)
    represents the byte value 0xea, the second symbol (club) represents the byte value
    0x05, and so on. The chart at [cp437.html](code/cp437/cp437.html) can be used
    to confirm that every symbol in the output indeed represents every byte of the
    program.
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来像乱码，但是上述输出中的每个符号都对应程序前面提到的一个字节。例如，第一个符号（欧米茄）代表字节值 0xea，第二个符号（梅花）代表字节值 0x05，依此类推。可以使用
    [cp437.html](code/cp437/cp437.html) 中的图表确认，输出中的每个符号确实代表程序的每个字节。
- en: 'Here is the disassembly of the program:'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是程序的反汇编：
- en: '[PRE27]'
  id: totrans-split-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The ellipsis in the end represents the remainder of the bytes that contains
    zeroes and the boot sector magic bytes 0x55 and 0xaa in the end. They have been
    omitted here for the sake of brevity.
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 结尾的省略号代表剩余的包含零字节和最后的引导扇区魔数字节 0x55 和 0xaa。出于简洁起见，在这里被省略了。
- en: When a computer boots, the BIOS reads the boot sector code from the first sector
    of the boot device into the memory at physical address 0x7c00 and jumps to this
    address. Most BIOS implementations jump to 0x0000:0x7c00 but there are some implementations
    that jump to 0x07c0:0x0000 instead. Both these jumps are jumps to the same physical
    address 0x7c00 but this difference poses a problem for us because the offsets
    in our program depend on which jump the BIOS executed. In order to ensure that
    our program can run with both types of BIOS implementations, we use a popular
    trick of having the first instruction of our program execute a jump to address
    0x0000:0x7c05 in order to reach the second instruction. This sets the register
    CS to 0 and IP to 0x7c05 and we don't have to worry about the differences between
    BIOS implementations anymore. We can now pretend as if a BIOS implementation that
    jumps to 0x0000:0x7c00 is going to load our program.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当计算机启动时，BIOS将引导设备的引导扇区代码读入物理地址`0x7c00`处的内存，并跳转到该地址。大多数BIOS实现会跳转到`0x0000:0x7c00`，但也有一些实现会跳转到`0x07c0:0x0000`。这两种跳转都是跳转到相同的物理地址`0x7c00`，但是这种差异对我们造成了问题，因为我们程序中的偏移量取决于BIOS执行的跳转方式。为了确保我们的程序能够在两种类型的BIOS实现上运行，我们使用了一个常用的技巧，即让程序的第一条指令执行跳转到地址`0x0000:0x7c05`，从而达到执行第二条指令的目的。这样设置寄存器CS为0，IP为0x7c05，我们就不再需要担心BIOS实现之间的差异了。现在我们可以假设一个跳转到`0x0000:0x7c00`的BIOS实现将加载我们的程序。
- en: The remainder of the program is similar to the one in the previous section.
    However, there are some small but important differences. While the DOS environment
    guarantees that AH and CH are initialised to 0 when a .COM program starts, the
    BIOS offers no such guarantee while loading and executing a boot program. This
    is why we use the registers AX and CX (as opposed to only AH and CL) in the `mov`
    instructions to initialise them. Similarly, while DOS initialises SI to 0x100
    when a .COM program starts, for a boot program, we set the register SI ourselves.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的其余部分与上一节中的程序类似。但是，存在一些小但重要的区别。尽管DOS环境在.COM程序启动时保证AH和CH初始化为0，但是在加载和执行引导程序时，BIOS并不提供这样的保证。这就是为什么我们在`mov`指令中使用AX和CX寄存器（而不仅仅是AH和CL）来初始化它们的原因。同样，在DOS将SI初始化为0x100时，对于引导程序，我们自己设置寄存器SI。
- en: 'If you feel uncomfortable about calling the above program a quine because it
    reads its own bytes from the memory, we could have the program read the bytes
    it needs to print from a separate place in memory. We do not execute these bytes.
    We only read them and copy them to video memory. The following 76-byte program
    does this:'
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对将上述程序称为quine感到不适，请注意它是从内存中读取自己的字节，我们可以让程序从内存的另一个位置读取它需要打印的字节。我们不执行这些字节。我们只读取它们并将它们复制到视频内存中。以下76字节的程序可以实现这一点：
- en: '[PRE28]'
  id: totrans-split-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here is how we can create a boot image with this:'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何创建一个引导镜像的方法：
- en: '[PRE29]'
  id: totrans-split-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Here are the commands to test this boot image:'
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是测试该引导镜像的命令：
- en: '[PRE30]'
  id: totrans-split-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The output should look like this:'
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '[PRE31]'
  id: totrans-split-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here is the disassembly of this program:'
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这是该程序的反汇编：
- en: '[PRE32]'
  id: totrans-split-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This program has two identical halves. The first half from offset 0x7c00 to
    offset 0x7c25 are executable bytes. The second half from offset 0x7c26 to 0x7c4b
    are the data bytes read by the executable bytes. The executable part of the code
    has an outer loop that uses the register BX as the counter variable. It sets BX
    to 2 so that the outer loop iterates twice. In each iteration, it reads data bytes
    from the second half of the program and prints them. The code to read bytes and
    print them is very similar to our earlier program. Since the data bytes in the
    second half are identical to the executable bytes in the first half, printing
    the data bytes twice amounts to printing all bytes of the program.
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序分为两个相同的部分。从偏移量`0x7c00`到`0x7c25`的第一部分是可执行字节。从偏移量`0x7c26`到`0x7c4b`的第二部分是可执行字节读取的数据字节。代码的可执行部分有一个外部循环，使用寄存器BX作为计数变量。它将BX设置为2，使得外部循环迭代两次。在每次迭代中，它从程序的第二部分读取数据字节并打印它们。读取字节并打印它们的代码与我们之前的程序非常相似。由于程序第二部分的数据字节与第一部分的可执行字节相同，打印两次数据字节相当于打印程序的所有字节。
- en: While this program does avoid reading the bytes that the CPU executes, the data
    bytes look exactly like the executable bytes. Although I do not see any point
    in trying to avoid reading executable bytes in an exercise like, this program
    serves as an example of a self-printing boot program that does not execute the
    bytes it reads.
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个程序确实避免读取 CPU 执行的字节，但数据字节看起来与可执行字节完全相同。尽管我不认为在像这样的练习中避免读取可执行字节有任何意义，但这个程序作为一个自打印引导程序的例子，不执行它读取的字节。
- en: </main>
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
