- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 15:04:41'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: A new serverless Postgres platform
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://xata.io/blog/serverless-postgres-platform](https://xata.io/blog/serverless-postgres-platform)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Starting today, Xata databases and branches are also serverless Postgres databases.
    This means you can connect to them using any Postgres client and generally use
    them as you would use any other Postgres database, while **still keeping** everything
    that you love about Xata: instant DB/branch creation, zero cold starts, no pausing/sleeping
    in case of inactivity, the full-text search engine, the file attachments, and
    more. And yes, the Xata free tier also applies to the Postgres databases, making
    it one of the most generous free tiers for Postgres in the industry.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: Making this possible was an interesting technical challenge and is the result
    of several Postgres-related projects coming together. We'll go into more detail
    in this blog post.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: The new Postgres-enabled databases are in public beta, and you can try them
    out now using the instructions below.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Enable Postgres connections in Xata
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Beta
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: 'Xata now allows direct connections to Postgres. To enable it follow these steps:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: '2'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: Create a brand new database with Postgres enabled
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '3'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: Use the `@next` version of our APIs within your project
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: '`npm install -g @xata.io/cli@next`'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: '`npm install @xata.io/client@next`'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: Check the Postgres [documentation](/docs/postgres) for details and troubleshooting.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't heard about Xata before, let's start with some introductions.
    In November 2022, we [launched](https://xata.io/blog/xata-public-release) the
    Xata database service with a product that aimed to provide the best possible developer
    experience for a database. We felt back then that databases have been left behind
    a little when it comes to modern developer workflows, APIs, and experience in
    general. So we re-thought things from the ground up, without tying ourselves to
    any existing database technology.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: We imagined our product as the middle ground between Airtable and traditional
    databases, and we think we've done a pretty good job at sticking to that vision.
    Like in Airtable, "xatabases" start instantly, have rich types, have no cold starts,
    and are never paused. Like in traditional databases, they have no row limitations,
    have ACID transactions, constraints with referential integrity, and are highly
    performant.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: Since then, tens of thousands of developers discovered Xata, actively used it
    in their applications, and have given us extremely valuable feedback. Developers
    in our [community](https://xata.io/blog/tags/community) appreciate how easy Xata
    is to get started with, iterate quickly, and the feeling that it's more like a
    SaaS product than another DBaaS.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: Over the past year, we have continued to release features that show the value
    of a database platform, as opposed to a DBaaS. From a new git-like [developer
    workflow](https://xata.io/blog/workflow-github-vercel-netlify-xata) for making
    schema changes with our branching functionality, to [file attachments](https://xata.io/blog/file-attachments),
    which make it easy to work with files and images as columns in your database.
    These features generated a [lot](https://x.com/rauchg/status/1651614599874252802?s=20)
    of [excitement](https://news.ycombinator.com/item?id=37324370).
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的一年中，我们继续发布功能，展示了数据库平台价值，而不是 DBaaS。从新的类似 git 的[开发工作流](https://xata.io/blog/workflow-github-vercel-netlify-xata)，通过我们的分支功能进行模式更改，到[文件附件](https://xata.io/blog/file-attachments)，使得在数据库中作为列处理文件和图像变得轻松。这些功能引起了[很多](https://x.com/rauchg/status/1651614599874252802?s=20)[激动](https://news.ycombinator.com/item?id=37324370)。
- en: Last but not least, we have open sourced [pgroll](https://github.com/xataio/pgroll),
    a tool that provides zero-downtime and reversible schema migrations for any PostgreSQL
    database. This has also generated [quite](https://news.ycombinator.com/item?id=37752366)
    a bit of [interest](https://simonwillison.net/2024/Jan/30/pgroll/) from the broader
    Postgres community. Later this week we'll be announcing another open source project
    that we think you'll love 🦎.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们已经开源了[pgroll](https://github.com/xataio/pgroll)，这是一个为任何 PostgreSQL
    数据库提供零停机和可逆架构迁移的工具。这也引起了广泛的[关注](https://news.ycombinator.com/item?id=37752366)和[兴趣](https://simonwillison.net/2024/Jan/30/pgroll/)，来自更广泛的
    Postgres 社区。本周晚些时候，我们将宣布另一个我们认为你会喜欢的开源项目 🦎。
- en: 'This brings us to today''s launch: a new serverless Postgres service at the
    center of the Xata platform. Looking at the Postgres service in isolation (ignoring
    everything else in the Xata platform), it fares pretty well:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这带来了今天的发布：一个新的无服务器 Postgres 服务，位于 Xata 平台的中心。单独看 Postgres 服务（忽略 Xata 平台中的其他所有内容），它表现得相当不错：
- en: Separation of compute and storage, providing bottomless storage.
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算与存储分离，提供无限存储。
- en: Optional automatic scaling up and down based on the load.
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选根据负载自动扩展和缩减。
- en: High availability via read replicas in multiple availability zones and automatic
    failover.
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过多个可用区中的只读副本和自动故障转移实现高可用性。
- en: Support for both the native Postgres wire protocol and SQL over HTTP (for easy
    access from edge functions).
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持原生的 Postgres 协议和通过 HTTP 的 SQL（便于从边缘函数访问）。
- en: Support for the most common Postgres extensions.
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持最常见的 Postgres 扩展。
- en: The ability to scale up to 1TB of RAM and 128 vCPUs.
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够扩展到 1TB RAM 和 128 vCPUs。
- en: We have designed the Postgres service to optimize for **reliability**, **scalability**,
    and **cost efficiency**.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设计了 Postgres 服务，以优化**可靠性**、**可扩展性**和**成本效率**。
- en: The Xata Postgres service is using AWS Aurora under the hood, a battle-tested
    service that is used by many very large Postgres installations. We have been using
    AWS Aurora since the initial Xata launch and we have a reliability [track record](https://www.xatastatus.com/)
    that we are proud of. We now also have an official [SLA](/docs/appendix/sla).
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: Xata Postgres 服务在底层使用 AWS Aurora，这是一个经过多次验证的服务，被许多非常大的 Postgres 安装所使用。自 Xata
    初始推出以来，我们一直在使用 AWS Aurora，并且我们对我们引以为豪的可靠性[记录](https://www.xatastatus.com/)感到自豪。现在我们还有一个官方[SLA](/docs/appendix/sla)。
- en: Even at the free tier we offer high-availability and redundancy, with replicas
    running in multiple availability zones. Failover from the primary instance to
    a replica is automatic and is guaranteed to have no data loss. At the storage
    layer, data is synchronously replicated to six storage nodes across three availability
    zones.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在免费层，我们也提供高可用性和冗余，副本在多个可用区运行。从主实例到副本的故障转移是自动的，并且保证没有数据丢失。在存储层，数据同步复制到三个可用区的六个存储节点。
- en: Available instance types in Xata go up to **128 vCPUs and 1TB of RAM**. Storage
    can be scaled up to 128TiB per cluster. That is quite a lot of headroom for vertical
    scaling.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: Xata 中的可用实例类型可以扩展到**128 vCPUs 和 1TB RAM**。存储可以扩展到每个集群 128TiB。这对于垂直扩展来说是相当大的余地。
- en: When it comes to horizontal scaling, the fact that you can create databases
    and branches instantly across the globe and that you can move them between clusters
    without downtime, opens up several architectural possibilities. For example, you
    can create a logical database for each of your customers, and place them in different
    regions. This is possible thanks to our [global control plane and logical databases](/docs/concepts/serverless-data-platform#global-control-plane-for-databases-and-branches).
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: Xata offers a high degree of **optionality** which results in cost efficiency
    for across a wide range of use cases. Xata makes it really easy to move from one
    type of cluster to another, so you can try your workload on different types of
    clusters to determine which is the best fit from a performance and cost-efficiency
    perspective.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: At small scale, we offer a **free tier** that includes high-availability and
    read replicas, no cold-starts, and no instance-pausing-after-a-few-days. We can
    offer this sustainably because the free tier makes use of [shared clusters](/docs/concepts/serverless-data-platform#shared-postgres-clusters)
    and auto-scaling.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: At large scale, when using [dedicated clusters](/docs/dedicated-cluster) (currently
    in private alpha) you pay for the resources you use and have a high degree of
    control. For example, for predictable load, you can configure a particular instance
    size, while for an unpredictable load, auto-scaling might be more cost-efficient.
    Similarly, you can choose between standard storage and I/O optimized storage,
    which is more cost-efficient for I/O-heavy workloads.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: 'Given that free plans across the industry have recently tended to die early,
    you might be looking a bit skeptically at our 15GB free storage, HA included,
    no-cold-starts, too-good-to-be-true free tier. We know that trust is won over
    many years (and lost in minutes), that we are a startup doing startup-y things,
    and that interest rates *something something*, but we think there are a couple
    things that are worth saying:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: First, the Xata architecture was built from the start to be able to offer a
    free tier sustainably, thanks to the use of shared clusters and auto-scaling.
    Currently, a free **active** database with constant traffic within the rate limits
    costs us less than $1.5/month. That includes not only Postgres but also Elasticsearch
    and the replication between them, as well as running two replicas for high-availability.
    This is possible thanks to our shared clusters (see [The implementation](#the-implementation)).
    The cost per database will go further down as we disable search and replication
    if not used at all, offload databases to cold storage if inactive for several
    months, and so on. In other words, while an active free-tier database that makes
    use of all the features might cost us a couple of dollars per month, the cost
    of a mostly inactive free database will come close to zero.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, the free tier is important to us because of the company history. The
    idea of Xata was born out of a [non-profit](https://www.tupu.io/), when we realized
    that managing databases is a limiting factor for many small projects. Today I'm
    proud to say that multiple non-profits are building on top of Xata, some on the
    free tier.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s quite possible to use Xata as a Postgres service and nothing else, and
    we couldn''t be happier if you do. However, the way we think about Xata is not
    as a Postgres DBaaS, but as a **data platform for PostgreSQL**: multiple services
    and tools, integrated together much more tightly than in a classical cloud provider
    to simplify the way developers build data-centric applications and manage databases.'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the Xata platform at the high level:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: Xata data platform diagram
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: Data is automatically replicated, including schema changes, via logical replication
    to Elasticsearch, which serves our search, vector search, and aggregations endpoints,
    so the areas in which it excels. Files are stored in S3 and served through the
    Cloudflare CDN. The replication events are used to keep a reference count of the
    files, so they can be shared between branches, yet deleted when they are no longer
    needed.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: If file attachments or full-text search or vector/hybrid search are important
    for your application, Xata will likely offer you a better platform to build on
    top of than a classical DBaaS. And it's only the beginning, we are planning to
    have similar tightly-integrated solutions for time-series, intelligent caching,
    queuing, and more.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: One key concept in the Xata implementation is the notion of *logical database
    branches*. A database can have multiple branches, and always has at least one,
    called `main` by default. A database branch is represented in Postgres as a [schema](https://www.postgresql.org/docs/current/ddl-schemas.html),
    and can be allocated on one of many Postgres clusters around the world, as well
    as moved from one cluster to another.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: This results in a level of decoupling between the logical databases and branches
    as experienced by the application, and the underlying Postgres instances where
    they are running. Because the clusters are already provisioned, logical databases
    and branches can be started instantly and allocated and moved depending on the
    business needs. This unlocks some interesting use cases, like sharding per tenant
    where every tenant is a branch, using a logical database for each micro-service,
    or automatically creating developer branches for each pull request. We use this
    logical separation in our free tier, where many small databases and branches share
    the same relatively large underlying Postgres cluster.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: Database branches scheduled on various Postgres clusters
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to make this possible, we had to solve several challenges:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: Route traffic to the correct cluster based on metadata about the database branch.
  id: totrans-split-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that a branch level connection can only access that single branch.
  id: totrans-split-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that attackers can't call dangerous SQL functions.
  id: totrans-split-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保攻击者无法调用危险的SQL函数。
- en: Limit noisy-neighbor issues in the shared clusters.
  id: totrans-split-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制在共享集群中的噪音邻居问题。
- en: The key to the solution for most of these issues is our SQL Proxy technology.
    While there are many Postgres proxies (e.g. pgbouncer, pgcat, Supavisor) serving
    various goals, the Xata SQL Proxy not only speaks the Postgres wire protocol,
    but also understands the SQL being executed at a fairly deep level. It can, for
    example, know which tables are accessed, which columns are requested, which functions
    are being called with which parameters, and so on. This allows us to block actions
    that would be dangerous for the Postgres cluster. While security is mostly ensured
    via Postgres roles, the Proxy can enforce rate and concurrency limits on shared
    clusters (we don't do this for dedicated clusters).
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数这些问题的解决方案的关键在于我们的SQL代理技术。虽然有许多Postgres代理（如pgbouncer、pgcat、Supavisor）用于实现各种目标，但Xata
    SQL代理不仅支持Postgres的协议，还能在相当深的层次上理解正在执行的SQL。例如，它可以知道访问哪些表、请求哪些列、调用哪些带有哪些参数的函数等。这使我们能够阻止对Postgres集群有危险的操作。虽然安全性主要通过Postgres角色来保证，但代理可以在共享集群上强制执行速率和并发限制（我们不对专用集群执行此操作）。
- en: The Proxy allows us to "virtualize" access not only to the data in the branch,
    but also to the Postgres catalog of tables, functions, sequences, and so on. ORMs
    like Prisma and Drizzle do fairly complex introspection to see the tables and
    columns that are currently defined, and we wanted to make sure they work without
    any modifications.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: 代理允许我们"虚拟化"访问分支中的数据，还能访问Postgres表、函数、序列等目录。像Prisma和Drizzle这样的ORM会进行相当复杂的内省，以查看当前定义的表和列，我们希望确保它们可以在不进行任何修改的情况下正常工作。
- en: You might be wondering why we chose to represent database branches as Postgres
    schemas rather than separate Postgres databases. The reason has to do with logical
    replication, which is a key component of the database platform, because reliable
    change-data-capture (CDC) is such an important feature keeping multiple data stores
    in sync. Individual databases would have forced us to do a replication slot for
    each.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道为什么我们选择将数据库分支表示为Postgres模式而不是单独的Postgres数据库。原因在于逻辑复制，这是数据库平台的关键组成部分，可靠的变更数据捕获（CDC）是保持多个数据存储同步的重要功能。单独的数据库将迫使我们为每个数据库做一个复制槽。
- en: Speaking of logical replication, another challenge that we had to solve was
    getting not only data events, but also schema events from Postgres. A well known
    limitation of the Postgres logical replication system is that it only includes
    data changes, not DDL changes. Yet, having schema changes in the same stream of
    events significantly simplifies the downstream consumers for the logical replication
    events. The way we solve this is by installing [DDL event triggers](https://www.postgresql.org/docs/current/event-triggers.html)
    that are writing the schema changes to an "out-box" table, which gets replicated
    via the same replication slot.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到逻辑复制，我们不得不解决的另一个挑战是获取Postgres的数据事件和模式事件。Postgres逻辑复制系统的一个众所周知的限制是它只包括数据更改，而不包括DDL更改。然而，将模式更改与相同的事件流合并显著简化了逻辑复制事件的下游消费者。我们解决这个问题的方法是安装[DDL事件触发器](https://www.postgresql.org/docs/current/event-triggers.html)，将模式更改写入一个"出箱"表，通过相同的复制槽进行复制。
- en: We think this tech will be useful for many Postgres applications, so we are
    planning to open source it soon as its own project.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为这项技术将对许多Postgres应用程序有所帮助，因此我们计划很快将其作为独立项目开源。
- en: Another key piece of the new Xata architecture is [pgroll](https://github.com/xataio/pgroll),
    our open-source project for zero-downtime, reversible, schema migrations.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 新Xata架构的另一个关键组成部分是我们的开源项目[pgroll](https://github.com/xataio/pgroll)，用于零停机时间、可逆的模式迁移。
- en: While `pgroll` is a CLI tool, in order to offer its benefits to all the Xata
    users, we have developed a server wrapper for it, which integrates with our control
    plane. This server offers an API for specific migrations as well as automatically
    intercepts DDLs executed over the wire protocol. This allows us to offer some
    of the benefits of pgroll nativly in the Xata platform, without you even having
    to know that you are using pgroll!
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`pgroll`是一个CLI工具，为了向所有Xata用户提供其优势，我们为其开发了一个服务器包装器，与我们的控制平面集成。该服务器提供特定迁移的API，还会自动拦截通过协议执行的DDL。这使我们能够在Xata平台上本地提供部分pgroll的优势，而您甚至无需知道自己在使用pgroll！
- en: 'While there is still work to do to fully integrate pgroll, you already get
    some important benefits: maintaining a history of the schema migrations, avoiding
    [locking issues](https://xata.io/blog/postgres-schema-changes-pita) automatically,
    and enabling more complex migrations that require data backfill. We don''t yet
    expose multiple versions of the schema at the same time, but we are planning to
    do so in the future. This will be key to enabling a simple and safe workflow for
    schema migrations of all kinds, and we''re excited for that future.'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然还有一些工作要做才能完全整合pgroll，但您已经获得了一些重要的好处：保持模式迁移历史记录，自动避免[锁定问题](https://xata.io/blog/postgres-schema-changes-pita)，并启用需要数据回填的更复杂的迁移。目前我们还没有同时公开多个版本的模式，但我们计划在未来这样做。这将是实现各种模式迁移的简单和安全工作流程的关键，我们对未来充满期待。
- en: Later this week, look out for a detailed blog post about pgroll and how we integrated
    it into Xata.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本周晚些时候，请密切关注有关pgroll及其如何整合到Xata中的详细博客文章。
- en: 'Learn more about the development of this service from the folks that built
    it, and watch a quick demo to see it in action. Check out our latest meet the
    makers session here:'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从构建此服务的人那里了解更多关于该服务的开发，并观看一个快速演示以了解其运作方式。在这里查看我们最新的“见证奇迹者”会议：
- en: Pop into [Discord](https://xata.io/discord) and say hi if you'd like to dig
    in further 👋
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想进一步了解，请到[Discord](https://xata.io/discord)上打个招呼👋。
- en: If you don't yet have a Xata account, there's no better time to [create one](https://app.xata.io/signup)!
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有Xata帐户，现在是[创建一个](https://app.xata.io/signup)的绝佳时机！
