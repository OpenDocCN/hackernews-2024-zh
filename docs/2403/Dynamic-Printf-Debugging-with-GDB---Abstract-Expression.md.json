["```\n#include <stdio.h>\n\nint main(int argc, char **argv)\n{\n    int numbers[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int n = sizeof(numbers) / sizeof(numbers[0]);\n    int sum = 0;\n\n    for (int i = 0; i < n; i++) {\n        sum += numbers[i];\n    }\n\n    printf(\"Sum of array: %d\\n\", sum);\n\n    return 0;\n}\n\n```", "```\n$ gcc -ggdb -o sumarray sumarray.c\n\n```", "```\n$ ./sumarray\nSum of array: 55\n\n```", "```\n(gdb) dprintf sumarray.c:8, \"Num elements: %d\\n\", n\n\n```", "```\n(gdb) dprintf sumarray.c:10, \"Index: %d; value: %d\\n\", i, numbers[i]\n\n```", "```\nNum elements: 10\nIndex: 0; value: 1\nIndex: 1; value: 2\nIndex: 2; value: 3\nIndex: 3; value: 4\nIndex: 4; value: 5\nIndex: 5; value: 6\nIndex: 6; value: 7\nIndex: 7; value: 8\nIndex: 8; value: 9\nIndex: 9; value: 10\nSum of array: 55\n[Inferior 1 (process 8368) exited normally]\n(gdb)\n\n```", "```\n(gdb) info break\nNum     Type           Disp Enb Address            What\n1       dprintf        keep y   0x00005555555551df in main at sumarray.c:9\n\tbreakpoint already hit 1 time\n        printf \"Num elements: %d\\n\", n\n2       dprintf        keep y   0x00005555555551e8 in main at sumarray.c:10\n\tbreakpoint already hit 10 times\n        printf \"Index: %d; value: %d\\n\", i, numbers[i]\n(gdb)\n\n```", "```\n(gdb) condition 2 (i % 2 == 0)\n\n```", "```\n(gdb) run\nNum elements: 10\nIndex: 0; value: 1\nIndex: 2; value: 3\nIndex: 4; value: 5\nIndex: 6; value: 7\nIndex: 8; value: 9\nSum of array: 55\n[Inferior 1 (process 5896) exited normally]\n(gdb) \n\n```", "```\n(gdb) save breakpoints [filename]\n\n```", "```\n#include <stdio.h>\n\nint func()\n{\n    printf(\"func called!\");\n    return 42;\n}\n\nint main(int argc, char **argv)\n{\n    func();\n\n    return 0;\n}\n\n```", "```\n$ gcc -ggdb -o return return.c\n\n```", "```\n(gdb) dprintf return.c:12, \"return value: %d\\n\", $rax\n\n```", "```\n(gdb) dprintf return.c:12, \"return value: %d\\n\", $x0\n\n```", "```\nreturn value: 42\nfunc called![Inferior 1 (process 36549) exited normally\n```", "```\nint log_msg(const char *format, ...)\n{\n    int n;\n    va_list args;\n    // init the variable length argument list\n    va_start(args, format);\n\n    n = vfprintf(logfile, format, args);\n\n    // cleanup the variable length argument list\n    va_end(args);\n\n    return n;\n}\n\n```", "```\n#include <stdio.h>\n#include <stdarg.h>\n\nFILE *logfile = NULL;\n\nint log_msg(const char *format, ...)\n{\n    int n;\n    va_list args;\n    // init the variable length argument list\n    va_start(args, format);\n\n    n = vfprintf(logfile, format, args);\n\n    // cleanup the variable length argument list\n    va_end(args);\n\n    return n;\n}\n\nint main(int argc, char **argv)\n{\n    int numbers[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int n = sizeof(numbers) / sizeof(numbers[0]);\n    int sum = 0;\n\n    const char *filename = \"logfile.txt\";\n    logfile = fopen(filename, \"w\");\n    if (logfile == NULL) {\n        fprintf(stderr, \"Failed to open logfile: %s\\n\", filename);\n        return 1;\n    }\n\n    for (int i = 0; i < n; i++) {\n        sum += numbers[i];\n    }\n\n    printf(\"Sum of array: %d\\n\", sum);\n    fclose(logfile);\n\n    return 0;\n}\n\n```", "```\n$ gcc -ggdb -o custom_printf custom_printf.c\n\n```", "```\n(gdb) set dprintf-style call\n(gdb) set dprintf-function log_msg\n\n```", "```\n(gdb) dprintf custom_printf.c:33, \"Num elements: %d\\n\", n\n(gdb) dprintf custom_printf.c:35, \"Index: %d; value: %d\\n\", i, numbers[i]\n\n```"]