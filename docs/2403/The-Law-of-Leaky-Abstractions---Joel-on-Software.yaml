- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:39:22'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:39:22'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The Law of Leaky Abstractions – Joel on Software
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 泄漏抽象法则 – Joel on Software
- en: 来源：[https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/](https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/](https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/)
- en: There’s a key piece of magic in the engineering of the Internet which you rely
    on every single day. It happens in the TCP protocol, one of the fundamental building
    blocks of the Internet.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网工程中有一项关键的魔法，它每天都在为你提供依赖。这发生在TCP协议中，它是互联网的基础构建块之一。
- en: 'TCP is a way to transmit data that is *reliable*. By this I mean: if you send
    a message over a network using TCP, it will arrive, and it won’t be garbled or
    corrupted.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: TCP是一种传输*可靠*数据的方式。我的意思是：如果你使用TCP在网络上发送消息，它会到达，并且不会被搞乱或损坏。
- en: We use TCP for many things like fetching web pages and sending email. The reliability
    of TCP is why every email arrives in letter-perfect condition. Even if it’s just
    some dumb spam.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用TCP做很多事情，比如获取网页和发送电子邮件。TCP的可靠性就是为什么每封电子邮件都以完美的状态到达的原因。即使它只是些愚蠢的垃圾邮件。
- en: By comparison, there is another method of transmitting data called IP which
    is *unreliable*. Nobody promises that your data will arrive, and it might get
    messed up before it arrives. If you send a bunch of messages with IP, don’t be
    surprised if only half of them arrive, and some of those are in a different order
    than the order in which they were sent, and some of them have been replaced by
    alternate messages, perhaps containing pictures of adorable baby orangutans, or
    more likely just a lot of unreadable garbage that looks like that spam you get
    in a foreign language.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，还有一种叫做IP的传输数据的方法，是*不可靠的*。没有人保证您的数据一定会到达，它在到达之前可能会出现问题。如果您使用IP发送一堆消息，如果只有一半消息到达，其中一些消息的顺序与发送顺序不同，还有一些消息已被替换为可能包含可爱的小猩猩图片的替代消息，或者更可能只是一堆看起来像是外语垃圾邮件的难以辨认的垃圾信息。
- en: 'Here’s the magic part: TCP is built on top of IP. In other words, TCP is obliged
    to somehow send data reliably *using only an unreliable tool*.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有个神奇之处：TCP是建立在IP之上的。换句话说，TCP必须以某种方式仅使用*不可靠的工具*来可靠地发送数据。
- en: To illustrate why this is magic, consider the following morally equivalent,
    though somewhat ludicrous, scenario from the real world.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这是魔法，考虑来自现实世界的以下道德上等效但有些荒谬的情景。
- en: Imagine that we had a way of sending actors from Broadway to Hollywood that
    involved putting them in cars and driving them across the country. Some of these
    cars crashed, killing the poor actors. Sometimes the actors got drunk on the way
    and shaved their heads or got nasal tattoos, thus becoming too ugly to work in
    Hollywood, and frequently the actors arrived in a different order than they had
    set out, because they all took different routes. Now imagine a new service called
    Hollywood Express, which delivered actors to Hollywood, guaranteeing that they
    would (a) arrive (b) in order (c) in perfect condition. The magic part is that
    Hollywood Express doesn’t have any method of delivering the actors, other than
    the unreliable method of putting them in cars and driving them across the country.
    Hollywood Express works by checking that each actor arrives in perfect condition,
    and, if he doesn’t, calling up the home office and requesting that the actor’s
    identical twin be sent instead. If the actors arrive in the wrong order Hollywood
    Express rearranges them. If a large UFO on its way to Area 51 crashes on the highway
    in Nevada, rendering it impassable, all the actors that went that way are rerouted
    via Arizona and Hollywood Express doesn’t even tell the movie directors in California
    what happened. To them, it just looks like the actors are arriving a little bit
    more slowly than usual, and they never even *hear* about the UFO crash.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一种将百老汇演员送到好莱坞的方法，涉及将他们放入汽车中，并驾车穿越全国。有些汽车会出事故，导致可怜的演员丧生。有时演员在路上喝醉了，剃光头或者在鼻子上纹身，从而变得太丑以至于不能在好莱坞工作，而且演员通常以不同的顺序到达，因为他们都走不同的路线。现在想象一个新服务叫做好莱坞快车，它送演员到好莱坞，保证他们(a)到达
    (b) 顺序正确 (c) 状态完好。魔法之处在于好莱坞快车没有其他送达演员的方法，只有不可靠的方法：把他们放在车里开过去。好莱坞快车通过检查每个演员是否完好无损工作，如果不行，就会打电话给总部，并请求派遣演员的同胞替代。如果演员到达的顺序错了，好莱坞快车会重新排列。如果一架大型UFO在前往51区的途中在内华达州的公路上坠毁，导致路线不通，那些走这条路线的演员会通过亚利桑那州改道，而好莱坞快车甚至不会告诉加利福尼亚州的电影导演发生了什么。对他们来说，看起来只是演员到达比平常慢一点，而他们甚至不会听说那架UFO的坠毁。
- en: 'That is, approximately, the magic of TCP. It is what computer scientists like
    to call an *abstraction*: a simplification of something much more complicated
    that is going on under the covers. As it turns out, a lot of computer programming
    consists of building abstractions. What is a string library? It’s a way to pretend
    that computers can manipulate strings just as easily as they can manipulate numbers.
    What is a file system? It’s a way to pretend that a hard drive isn’t really a
    bunch of spinning magnetic platters that can store bits at certain locations,
    but rather a hierarchical system of folders-within-folders containing individual
    files that in turn consist of one or more strings of bytes.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是TCP的魔力，大约如此。计算机科学家喜欢称其为*抽象*：对底层更为复杂的事物进行简化。事实上，很多计算机编程工作都是在构建抽象。什么是字符串库？它是一种方式，让计算机能够像处理数字一样轻松地处理字符串。什么是文件系统？它是一种方式，让我们假装硬盘并不是由一堆可以在特定位置存储位的旋转磁盘片组成，而是一种包含个别文件的文件夹层次结构。
- en: Back to TCP. Earlier for the sake of simplicity I told a little fib, and some
    of you have steam coming out of your ears by now because this fib is driving you
    crazy. I said that TCP guarantees that your message will arrive. It doesn’t, actually.
    If your pet snake has chewed through the network cable leading to your computer,
    and *no* IP packets can get through, then TCP can’t do anything about it and your
    message doesn’t arrive. If you were curt with the system administrators in your
    company and they punished you by plugging you into an overloaded hub, only some
    of your IP packets will get through, and TCP will work, but everything will be
    really slow.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 回到TCP。早些时候为了简单起见，我说了一个小小的谎言，现在有些人的耳朵都冒烟了，因为这个谎言让你们疯狂了。我说TCP保证你的消息会到达。事实上，它并不会。如果你的宠物蛇咬断了导致你电脑无法连接到网络的网线，那么TCP对此无能为力，你的消息将无法送达。如果你对公司的系统管理员不客气，他们把你接入了一个过载的集线器，那么只有一部分IP数据包能通过，TCP会工作，但一切都会变得非常慢。
- en: 'This is what I call a *leaky abstraction*. TCP attempts to provide a complete
    abstraction of an underlying unreliable network, but sometimes, the network leaks
    through the abstraction and you feel the things that the abstraction can’t quite
    protect you from. This is but one example of what I’ve dubbed the Law of Leaky
    Abstractions:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我所说的*泄漏的抽象*。TCP试图提供一个完整的底层不可靠网络的抽象，但有时，网络会透过抽象漏出来，你会感觉到抽象无法完全保护你。这只是我所称之为“泄漏抽象法则”的一个例子：
- en: '| **All non-trivial abstractions, to some degree, are leaky.** |'
  id: totrans-split-16
  prefs: []
  type: TYPE_TB
  zh: '| **所有非平凡的抽象，都会在某种程度上出现泄漏。** |'
- en: Abstractions fail. Sometimes a little, sometimes a lot. There’s leakage. Things
    go wrong. It happens all over the place when you have abstractions. Here are some
    examples.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象会失败。有时少一点，有时多一点。会有泄漏。事情会出错。当你使用抽象时，这种情况随处可见。以下是一些例子。
- en: Something as simple as iterating over a large two-dimensional array can have
    radically different performance if you do it horizontally rather than vertically,
    depending on the “grain of the wood” — one direction may result in vastly more
    page faults than the other direction, and page faults are slow. Even assembly
    programmers are supposed to be allowed to pretend that they have a big flat address
    space, but virtual memory means it’s really just an abstraction, which leaks when
    there’s a page fault and certain memory fetches take way more nanoseconds than
    other memory fetches.
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使是简单的遍历大型二维数组，如果你水平而不是垂直地进行，性能也会有显著不同，这取决于“木料的纹理”——一个方向可能会导致远远比另一个方向更多的页面故障，而页面故障是缓慢的。即使是汇编程序员也被允许假装拥有一个大的平面地址空间，但虚拟内存意味着这实际上只是一个抽象，在出现页面故障时泄漏，某些内存获取比其他内存获取花费更多的纳秒。
- en: The SQL language is meant to abstract away the procedural steps that are needed
    to query a database, instead allowing you to define merely what you want and let
    the database figure out the procedural steps to query it. But in some cases, certain
    SQL queries are thousands of times slower than other logically equivalent queries.
    A famous example of this is that some SQL servers are dramatically faster if you
    specify “where a=b and b=c and a=c” than if you only specify “where a=b and b=c”
    even though the result set is the same. You’re not supposed to have to care about
    the procedure, only the specification. But sometimes the abstraction leaks and
    causes horrible performance and you have to break out the query plan analyzer and
    study what it did wrong, and figure out how to make your query run faster.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL语言的目的是抽象掉查询数据库所需的过程步骤，允许你仅仅定义你想要的内容，让数据库来决定查询的过程步骤。但在某些情况下，某些SQL查询比其他逻辑上等效的查询慢上千倍。一个著名的例子是，有些SQL服务器如果你指定“where
    a=b and b=c and a=c”，比仅指定“where a=b and b=c”查询结果相同的情况下速度显著更快。你不应该关心过程，只需关注规范。但有时抽象泄漏会导致性能低下，你必须使用查询计划分析器，研究它做错了什么，然后找出如何使你的查询运行更快。
- en: Even though network libraries like NFS and SMB let you treat files on remote
    machines “as if” they were local, sometimes the connection becomes very slow or
    goes down, and the file stops acting like it was local, and as a programmer you
    have to write code to deal with this. The abstraction of “remote file is the same
    as local file” [leaks](https://www.joelonsoftware.com/articles/fog0000000041.html).
    Here’s a concrete example for Unix sysadmins. If you put users’ home directories
    on NFS-mounted drives (one abstraction), and your users create .forward files
    to forward all their email somewhere else (another abstraction), and the NFS server
    goes down while new email is arriving, the messages will not be forwarded because
    the .forward file will not be found. The leak in the abstraction actually caused
    a few messages to be dropped on the floor.
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管像NFS和SMB这样的网络库让你可以将远程机器上的文件“看作”是本地文件，但有时连接变得非常慢或者断开，文件停止表现得像本地文件一样，作为程序员，你必须编写代码来处理这些问题。“远程文件与本地文件相同”的抽象[泄漏](https://www.joelonsoftware.com/articles/fog0000000041.html)。以下是Unix系统管理员的一个具体例子。如果你将用户的主目录放在NFS挂载的驱动器上（一个抽象），而你的用户创建了.forward文件将所有的电子邮件转发到其他地方（另一个抽象），当NFS服务器宕机而新邮件正在到达时，邮件将无法转发，因为找不到.forward文件。抽象中的泄漏实际上导致了一些邮件被丢弃。
- en: C++ string classes are supposed to let you pretend that strings are first-class
    data. They try to abstract away the fact that [strings are hard](https://www.joelonsoftware.com/articles/fog0000000319.html)
    and let you act as if they were as easy as integers. Almost all C++ string classes
    overload the + operator so you can write **s + “bar”** to concatenate. But you
    know what? No matter how hard they try, there is no C++ string class on Earth
    that will let you type **“foo” + “bar”**, because string literals in C++ are always
    char*’s, never strings. The abstraction has sprung a leak that the language doesn’t
    let you plug. (Amusingly, the history of the evolution of C++ over time can be
    described as a history of trying to plug the leaks in the string abstraction.
    Why they couldn’t just add a native string class to the language itself eludes
    me at the moment.)
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++ 字符串类被设计成让你可以假装字符串是一流数据。它们试图抽象化[字符串很难](https://www.joelonsoftware.com/articles/fog0000000319.html)，让你可以像操作整数一样简单地操作它们。几乎所有的
    C++ 字符串类都重载了 + 运算符，所以你可以写 **s + "bar"** 来进行连接。但你知道吗？无论它们多么努力，地球上没有一种 C++ 字符串类能让你输入
    **"foo" + "bar"**，因为在 C++ 中字符串字面值总是 char*，而不是字符串。这种抽象已经出现了语言无法修补的漏洞。（耐人寻味的是，随着时间的推移，C++
    的演变史可以被描述为努力修补字符串抽象中的漏洞的历史。为什么他们当初不能直接在语言本身添加一个原生字符串类，我暂时理解不了。）
- en: And you can’t drive as fast when it’s raining, even though your car has windshield
    wipers and headlights and a roof and a heater, all of which protect you from caring
    about the fact that it’s raining (they abstract away the weather), but lo, you
    have to worry about hydroplaning (or aquaplaning in England) and sometimes the
    rain is so strong you can’t see very far ahead so you go slower in the rain, because
    the weather can never be completely abstracted away, because of the law of leaky
    abstractions.
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就像你的车配备了雨刷、前灯、车顶和暖风器一样，这些设备都保护你不必担心雨天（它们抽象化了天气），但是哦，你还是得担心打滑（在英国称为 aquaplaning），有时雨大得你看不远，所以在雨天里你会开得慢一些，因为天气永远无法完全抽象化，这是由于漏水的抽象定律。
- en: One reason the law of leaky abstractions is problematic is that it means that
    abstractions do not really simplify our lives as much as they were meant to. When
    I’m training someone to be a C++ programmer, it would be nice if I never had to
    teach them about char*’s and pointer arithmetic. It would be nice if I could go
    straight to STL strings. But one day they’ll write the code **“foo” + “bar”**,
    and truly bizarre things will happen, and then I’ll have to stop and teach them
    all about char*’s anyway. Or one day they’ll be trying to call a Windows API function
    that is documented as having an OUT LPTSTR argument and they won’t be able to
    understand how to call it until they learn about char*’s, and pointers, and Unicode,
    and wchar_t’s, and the TCHAR header files, and all that stuff that leaks up.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞抽象定律存在问题的一个原因是，它意味着抽象并没有如预期的那样真正简化我们的生活。当我在培训某人成为 C++ 程序员时，如果我能直接跳过 char*
    和指针算术，直接进入 STL 字符串，那将会很好。但总有一天他们会写出 **"foo" + "bar"** 这样的代码，然后真正奇怪的事情会发生，然后我不得不停下来教他们所有关于
    char* 和指针的知识。或者有一天他们将试图调用一个 Windows API 函数，文档中标明有一个 OUT LPTSTR 参数，他们将无法理解如何调用它，直到他们学习了
    char*、指针、Unicode、wchar_t 和 TCHAR 头文件等等这些泄漏上来的东西。
- en: In teaching someone about COM programming, it would be nice if I could just
    teach them how to use the Visual Studio wizards and all the code generation features,
    but if anything goes wrong, they will not have the vaguest idea what happened
    or how to debug it and recover from it. I’m going to have to teach them all about
    IUnknown and CLSIDs and ProgIDS and … oh, the humanity!
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在教授 COM 编程时，如果我能教他们如何使用 Visual Studio 的向导和所有的代码生成功能，那会很好，但是如果出了任何问题，他们将一无所知，不知道发生了什么以及如何调试和恢复。我将不得不教他们所有关于
    IUnknown、CLSIDs 和 ProgIDS 的知识……哦，人类啊！
- en: 'In teaching someone about ASP.NET programming, it would be nice if I could
    just teach them that they can double-click on things and then write code that
    runs on the server when the user clicks on those things. Indeed ASP.NET abstracts
    away the difference between writing the HTML code to handle clicking on a hyperlink
    (**<a>**) and the code to handle clicking on a button. Problem: the ASP.NET designers
    needed to hide the fact that in HTML, there’s no way to submit a form from a hyperlink.
    They do this by generating a few lines of JavaScript and attaching an onclick
    handler to the hyperlink. The abstraction leaks, though. If the end-user has JavaScript
    disabled, the ASP.NET application doesn’t work correctly, and if the programmer
    doesn’t understand what ASP.NET was abstracting away, they simply won’t have any
    clue what is wrong.'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在教授某人ASP.NET编程时，如果我能够告诉他们，他们可以双击某些内容，然后编写在用户点击这些内容时在服务器上运行的代码，那将是很好的。确实，ASP.NET在处理点击超链接（**<a>**）和处理点击按钮的HTML代码之间的区别时进行了抽象化。问题是：ASP.NET设计者需要隐藏HTML中没有办法从超链接提交表单的事实。他们通过生成几行JavaScript并将onclick处理程序附加到超链接来做到这一点。但抽象泄露了。如果最终用户禁用了JavaScript，ASP.NET应用程序将无法正常工作，而如果程序员不理解ASP.NET所抽象的内容，他们根本就不知道出了什么问题。
- en: The law of leaky abstractions means that whenever somebody comes up with a wizzy
    new code-generation tool that is supposed to make us all ever-so-efficient, you
    hear a lot of people saying “learn how to do it manually first, then use the wizzy
    tool to save time.” Code generation tools which pretend to abstract out something,
    like all abstractions, leak, and the only way to deal with the leaks competently
    is to learn about how the abstractions work and what they are abstracting. So
    the abstractions save us time working, but they don’t save us time learning.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 泄漏抽象的法则意味着，每当有人提出一个看似可以使我们所有人变得更高效的新式代码生成工具时，你会听到很多人说“先学会手动做，然后再用这个高效工具来节省时间”。假如那些假装可以抽象出某些东西的代码生成工具，像所有的抽象一样，都会泄露，而处理这些泄漏的唯一办法是了解这些抽象是如何工作的，以及它们在抽象什么。因此，抽象化工具确实节省了我们的工作时间，但它们并没有节省我们的学习时间。
- en: And all this means that paradoxically, even as we have higher and higher level
    programming tools with better and better abstractions, becoming a proficient programmer
    is getting harder and harder.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都意味着，具有越来越高级别的编程工具和更好的抽象化的同时，成为一名熟练的程序员变得越来越困难。
- en: 'During my first Microsoft internship, I wrote string libraries to run on the
    Macintosh. A typical assignment: write a version of **strcat** that returns a
    pointer to the end of the new string. A few lines of C code. Everything I did
    was right from K&R — one thin book about the C programming language.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我第一次微软实习期间，我编写了在Macintosh上运行的字符串库。一个典型的任务是编写一个返回指向新字符串末尾的**strcat**版本。几行C代码。我所做的一切都来自K&R——一本关于C编程语言的薄薄书籍。
- en: Today, to work on CityDesk, I need to know Visual Basic, COM, ATL, C++, InnoSetup,
    Internet Explorer internals, regular expressions, DOM, HTML, CSS, and XML. All
    high level tools compared to the old K&R stuff, but I still have to know the K&R
    stuff or I’m toast.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，要在CityDesk上工作，我需要了解Visual Basic、COM、ATL、C++、InnoSetup、Internet Explorer内部、正则表达式、DOM、HTML、CSS和XML。所有这些都是相比于旧的K&R东西的高级工具，但我仍然必须知道K&R的东西，否则我会很吃亏。
- en: Ten years ago, we might have imagined that new programming paradigms would have
    made programming easier by now. Indeed, the abstractions we’ve created over the
    years *do* allow us to deal with new orders of complexity in software development
    that we didn’t have to deal with ten or fifteen years ago, like GUI programming
    and network programming. And while these great tools, like modern OO forms-based
    languages, let us get a lot of work done incredibly quickly, suddenly one day
    we need to figure out a problem where the abstraction leaked, and it takes 2 weeks.
    And when you need to hire a programmer to do mostly VB programming, it’s not good
    enough to hire a VB programmer, because they will get completely stuck in tar
    every time the VB abstraction leaks.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 十年前，我们可能会想象新的编程范式现在应该已经使编程变得更容易了。事实上，多年来我们创造的抽象化工具确实使我们能够处理软件开发中新的复杂程度，这是十到十五年前所没有的，比如GUI编程和网络编程。虽然这些优秀的工具，如现代面向对象的表单语言，让我们能够非常快速地完成大量工作，但突然有一天我们需要解决一个抽象泄露的问题，那就需要花费两周的时间。当你需要雇佣一个主要从事VB编程的程序员时，仅仅雇佣一个VB程序员是不够的，因为他们每次遇到VB抽象泄露的时候都会完全卡住。
- en: The Law of Leaky Abstractions is dragging us down.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 泄漏抽象的法则正在拖累我们。
