- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:41:49'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 'On Tech Debt: My Rust Library is now a CDO | Armin Ronacher''s Thoughts and
    Writings'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://lucumr.pocoo.org/2024/3/26/rust-cdo/](https://lucumr.pocoo.org/2024/3/26/rust-cdo/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'On Tech Debt: My Rust Library is now a CDO'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: written on Tuesday, March 26, 2024
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: You're probably familiar with tech debt. There is a joke that if there is tech
    debt, surely there must be derivatives to work with that debt? I'm happy to say
    that the Rust ecosystem has created an environment where it looks like one solution
    for tech debt is collateralization.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Here is how this miracle works. Say you have a library [stuff](https://github.com/mitsuhiko/insta)
    which depends on some other library [learned-rust-this-way](https://github.com/chyh1990/yaml-rust).
    The author of learned-rust-this-way at one point lost interest in this thing and
    issues keep piling up. Some of those issues are feature requests, others are legitimate
    bugs. However you as the person that wrote stuff never ran into any of those problems.
    Yet it's hard to argue that learned-rust-this-way isn't tech debt. It's one that
    does not bother you all that much, but it's debt nonetheless.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: At one point someone else figures out that learned-rust-this-way is debt. One
    of the ways in which this happens is because the name is great. Clearly that's
    not the only person that learned Rust this way and someone else also wants that
    name. Except the original author is unreachable. So now there is one more reason
    for that package [to get added to the RUSTSEC database](https://github.com/rustsec/advisory-db/issues/1921)
    and all the sudden all hell breaks lose. Within minutes CI will start failing
    for a lot of people that directly or indirectly use learned-rust-this-way notifying
    them that something happened. That's because RUSTSEC is basically a rating agency
    and they decided that your debt is now junk.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: What happens next? As the maintainer of stuff your users all the sudden start
    calling you out for using learned-rust-this-way and you suffer. Stress levels
    increase. You gotta unload that shit. Why? Not because it does not work for you,
    but someone called you out of that debt. If we really want to stress the financial
    terms this is your margin call. Your users demand action to deal with your debt.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: So what can you do? One option is to move to alternatives (unload the debt).
    In this particular case for whatever reason all the alternatives to learned-rust-this-way
    are not looking very appealing either. One is a fork of that thing which also
    only has a single maintainer, but all the sudden pulls in 3 more dependencies,
    one of which already have a "B-" rating. Another option in the ecosystem just
    decided [to default](https://github.com/dtolnay/serde-yaml/commit/3ba8462f7d3b603d832e0daeb6cfc7168a673d7a)
    before they are called out.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: Remember you never touched learned-rust-this-way actively. It worked for you
    in the unmaintained way of the last four years. If you now fork that library (and
    name it learned-rust-this-way-and-its-okay) you are now subject to the same demands.
    Forking that library is putting cash on the pile of debt. Except if you don't
    act on the bug reports there, you will eventually be called out like learned-rust-this-way
    was. So while that might buy you time, it does not really solve the issue.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你从未积极地接触过learned-rust-this-way。它在过去四年的未维护状态下对你有效。如果你现在fork那个库（并将其命名为learned-rust-this-way-and-its-okay），你现在就受到相同的要求限制。fork那个库就是把现金放在债务堆上。除非你不处理那里的bug报告，否则最终你会像learned-rust-this-way一样被指责。所以虽然这可能会为你赢得时间，但并没有真正解决问题。
- en: 'However here is what actually does work: you just merge that code into your
    own library. Now that junk tech debt is suddenly rated “AAA”. For as long as you
    never touch that code any more, you never reveal to anyone that you did that,
    and you just keep maintaining your library like you did before, the world keeps
    spinning on.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，以下才是真正有效的做法：你只需将那段代码合并到你自己的库中。现在那些垃圾技术债务突然被评为“AAA”级。只要你再也不碰那段代码，永远不向任何人透露你这样做了，并且继续像以前一样维护你的库，世界就会继续运转。
- en: 'So as of today: I collateralized yaml-rust by vendoring it in insta. It''s
    now an amalgamation of insta code and yaml-rust. And by doing so, I successfully
    upgraded this junk tech debt to a perfect AAA.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 截至今日：我通过将yaml-rust作为insta的供应商，抵押了它。现在它成为insta代码和yaml-rust的融合体。通过这样做，我成功地将这笔垃圾技术债务升级为完美的AAA评级。
- en: Who won? I think nobody really.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 谁赢了？我想没有人真正赢。
- en: 'As for the title: a [CDO](https://en.wikipedia.org/wiki/Collateralized_debt_obligation)
    is a financial instrument that became pretty infamous during the financial crisis
    of 2007\. An entertaining explanation of that can be found in “[The Big Short](https://en.wikipedia.org/wiki/The_Big_Short_(film))”.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 至于标题：“CDO”是在2007年金融危机期间变得非常臭名昭著的一种金融工具。你可以在《大空头》中找到一个娱乐性的解释。
- en: This entry was tagged [rust](/tags/rust/) and [thoughts](/tags/thoughts/)
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此条目被标记为[rust](/tags/rust/)和[thoughts](/tags/thoughts/)
