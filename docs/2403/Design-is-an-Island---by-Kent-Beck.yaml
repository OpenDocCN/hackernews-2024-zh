- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:31:27'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Design is an Island - by Kent Beck
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://tidyfirst.substack.com/p/design-is-an-island](https://tidyfirst.substack.com/p/design-is-an-island)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: First published April 2009\. This was a period when I was working consistently
    on the material that would become, a decade and a half later, Tidy First?.
  id: totrans-split-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If design is responsive motion in a space of all possible designs, then some
    designs are acceptable and some are not. Designing, then, is like walking an island.
    As long as you don’t get your feet wet, the design is okay. (This is a visual
    way of describing design as an optimization problem, but I’ll stick with the metaphor
    because it turns out to be surprisingly apt.)
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: The “water line” in design isn’t fixed and rigid. Just as tides change the sea
    level, tides affect what is an acceptable design. The holiday season is high tide
    for many retailers. Designs that are acceptable at other times of the year break
    down in the 10% of the year when you do 50% of your business. Changes that are
    acceptable in February or March introduce unacceptable risk in October and November.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: If you are moving from one design to another in safe steps, it may be acceptable
    to get your feet wet temporarily as long as you don’t drown when the next tide
    comes in. Changes introduced during less stressed times such as overnight fit
    this picture. On the other hand, if you don’t have less stressed times, then your
    options for moving from one design to another are reduced. These constraints on
    design change become constraints on the design.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Climbing higher on an island requires effort, just as improving designs require
    effort. If you are above the waterline and in no danger, further investment in
    design may be money better spent elsewhere. I cringed a bit as I wrote this, as
    I like leaving designs as clean as possible. Even then I only climb the peak I’m
    on, refining the design for the current set of requirements. I don’t seek out
    the highest peak on the island, or in the world. This mountain may be good enough
    for a year, or even forever.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: If the sea level is high enough there may only be a single island, a single
    family of designs that makes sense. More often, though, design is an archipelago,
    with contrasting islands shouldering into the open air. For example, SOA and REST
    may both work for a distributed application. Rising waters in the form of higher
    performance, reliability, or a changing programmer community might drown one or
    the other option. Many of the gentlemanly discussions about SOA and REST seem
    to rely on hypotheticals, “Yes, you idiot, but if the water level rises 25 meters
    your option will clearly be under water.” It would be more productive to characterize
    the aspects contributing to sea level and discuss ways of safely moving back and
    forth.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: 'Some have proposed the metaphor (or more than metaphor) of attractors for design.
    Acceptable designs for a particular set of constraints seem to cluster around
    a few “styles”. I don’t have the background or time to expand on this now, but
    it may be fertile ground for future exploration: why do designs cluster to form
    islands?'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人提出了吸引子作为设计的隐喻（或者更多的不仅仅是隐喻）。针对一组特定约束条件的可接受设计似乎会聚集在几种“风格”周围。我现在没有背景或时间来进一步展开讨论，但这可能是未来探索的肥沃土壤：为什么设计会聚集形成岛屿？
- en: Returning to our watery tropical paradise (as long as you are visualizing islands
    you may as well visualize pleasant ones), another common occurence in software
    development is an earthquake which jumbles and restructures the landscape. The
    one that struck me yesterday was testability. I had a just fine, dry feet design
    until I went to write a unit test. At that, the whole landscape changed. It wasn’t
    just that the water level rose a little higher. By introducing the need to unit
    test, whole islands sank like Atlantis into the sea. Other designs that had seemed
    impossibly remote rose up as acceptable alternatives. As you can see, this process
    is accompanied by a fair amount of smoke and heat.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到我们水上热带天堂（只要你在想象岛屿，不妨想象一些宜人的）时，软件开发中另一个常见的事件是地震，它会打乱和重组景观。昨天发生在我身上的一个地震是测试性。在我开始编写单元测试之前，我有一个相当不错的、完全干燥的设计。但一旦进行单元测试，整个景观就改变了。不仅仅是水位略有上升。通过引入对单元测试的需求，整个岛屿就像亚特兰蒂斯一样沉入海中。其他看起来遥不可及的设计却成为了可以接受的替代方案。正如你所见，这个过程伴随着相当多的烟和热。
- en: Decreasing downtime is another example of tectonic change in design. Reducing
    downtime by an order of magnitude requires not just a better design, but a different
    design. Increasing reliability changes the shape of the seabed.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 减少停机时间是设计中构造活动的另一个例子。将停机时间减少一个数量级不仅需要更好的设计，还需要不同的设计。增加可靠性会改变海床的形状。
- en: Before we return to the mundane world from the sun and surf I’ll stretch the
    metaphor one more bit. Changing in safe steps (a topic I see I need to address
    soon) sometimes requires moving underwater. When the current island starts to
    sink, moving to another island is necessary. This may require special preparations
    to move about underwater for a time. For example, if safe steps require reducing
    the efficiency of servers, you might bring in extra servers to handle the load
    while taking the steps.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们从阳光和冲浪中返回到平凡世界之前，我再延伸一下这个隐喻。以安全的步骤进行变更（我看到我需要尽快解决的一个话题）有时候需要进行水下移动。当当前的岛屿开始下沉时，移动到另一个岛屿是必要的。这可能需要特别的准备来在水下行走一段时间。例如，如果安全的步骤需要减少服务器的效率，您可能需要额外的服务器来处理负载。
- en: Moving to another island (escaping a local maxima) often requires making a design
    worse in various ways–increasing duplication, reducing efficiency, making code
    harder to understand–before it can be made better again. If you can leap from
    island to island, so much the better, but prudence dictates safe steps in most
    circumstances.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 移动到另一个岛屿（逃离局部极大值）通常需要在各种方面使设计变得更糟——增加重复、减少效率、使代码更难理解——然后才能再次变得更好。如果您能够从一个岛屿跳到另一个岛屿，那就更好了，但谨慎在大多数情况下决定安全的步骤。
- en: Given the prevalence of tectonic activity in software development, some underwater
    travel is inevitable. Better to prepare for it and limit the amount of time spent
    breathing from a tank than spend exponential effort erecting a tower on a platform
    on a (soon to be former) mountain. Being prepared for both overland and underwater
    travel is the best preparation for software design success.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到软件开发中构造活动的普遍性，一些水下旅行是不可避免的。最好为此做好准备，并限制从氧气罐呼吸的时间，而不是花费指数级的精力在平台上建造塔楼（即将成为前山）。为了软件设计成功，准备好陆地和水下旅行是最好的准备。
