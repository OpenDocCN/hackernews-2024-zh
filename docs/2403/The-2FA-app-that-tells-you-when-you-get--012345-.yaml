- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:42:25'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: The 2FA app that tells you when you get `012345`
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://jacobbartlett.substack.com/p/building-a-2fa-app-that-detects-patterns](https://jacobbartlett.substack.com/p/building-a-2fa-app-that-detects-patterns)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you love apps but hate reading, skip ahead to download **[Check ’em: The
    Based 2FA App](https://apps.apple.com/app/check-em-the-based-2fa-app/id6477842236)**
    today!'
  id: totrans-split-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Like all recovered edgelords who came of age in the early 2010s, I somewhat
    miss the heyday of image-boards like 4chan. They were the final bastion of the
    wild-west early internet before the nazis ruined everything.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: One of the classic memes was [GET](https://knowyourmeme.com/memes/get), where
    you’d take intense pride in correctly anticipating your randomly-generated post
    ID containing an interesting sequence of numbers.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: These days, now that [all the normies have grown up and found jobs](https://www.wired.co.uk/article/moot-joins-google),
    the closest we get to the magic of yesteryear is multi-factor authentication codes.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: If you know, *you know*.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: The drudgery of having to re-authenticate with your bank, your email, or your
    cloud services. The little glimmer of joy when you get a really *nice* number
    like `787000` or `123450`.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: Inspiration hit.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: These MFA codes use a common algorithm which refreshes every 30 seconds. We’re
    only exposed to a tiny sliver of the dubs, trips, quads, quints, and sextuples
    possible in our 6-digit authentication codes.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: 'As with [all my indie projects](https://jacobbartlett.substack.com/p/my-toddler-loves-planes-so-i-built),
    I had a singular clear vision around which I can build:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: What if your 2FA app told you every time a cool number came up?
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I knew what I had to do.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: I don’t need many moving parts to find out whether this works.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: 'If the concept — getting notifications when cool 2FA numbers appear — holds
    up, then I could turn this into a real app with a few key features:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: Capture 2FA secrets with the camera.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store multiple 2FA codes
  id: totrans-split-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement more numerical patterns.
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let users choose which patterns they want to know about.
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I knew I was onto something: 90% of the people I explained this to thought
    I was a moron. The other 10% saw only sheer brilliance.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s me: moron to some; genius to others.'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: '[TOTP](https://www.protectimus.com/blog/totp-algorithm-explained/), or *time-based
    one-time password*, is a surprisingly simple concept. It’s an authentication process
    which uses two inputs:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: A secret key, stored on both the authentication service and your own device.
  id: totrans-split-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current time, or, more specifically, the number of 30-second intervals which
    have elapsed since unix time.
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An algorithm deterministically hashes these two inputs to create the 6-digit
    codes you know and love. This hashing algorithm is pretty cookie-cutter, found
    in Apple’s CryptoKit. Thanks to our friends at the [Apple forums](https://forums.developer.apple.com/forums/thread/120918),
    here’s the full TOTP algorithm in all its glory:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
- en: To make sure this worked right; I set up 2FA on my [Google](https://myaccount.google.com/)
    account, and displayed the secret in my app using the algorithm.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: Coincidentally, I got a damn good code with which to confirm my 2fa setup
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: And, like magic (after some annoying base32 to base64 conversion), Google accepted
    my 2FA!
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we’ve got the bare bones of our 2FA working, we can implement the
    final piece of the proof of concept puzzle: generating notifications.'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: Our key limitation lies in our mobile device.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: We can’t actually keep a background process such as 2FA generation running forever,
    and *certainly* can’t store user secrets on a backend push server.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, to make this concept work, we have to be a sneaky: precompute 2FA
    codes into the future, and schedule delivery for the time at which they appear
    in real life.'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, we can only schedule 64 pushes on iOS at any time, so we should:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: Save a notification or two asking users to re-enter the app.
  id: totrans-split-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Incentivise users to open the app via tapping the notifications, toggling a
    re-computation of the 2FA codes.
  id: totrans-split-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we know how our POC will work, let’s get building.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: Let’s jazz up our lowly 2FA code.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: We plan to pre-compute many codes, then implement some kind of regex to detect
    whether each code is a GET — worthy of checking ‘em.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: My super-simple SwiftUI view can display these codes handily, using a `UICollectionView`-backed
    `List` to ensure decent performance (the vanilla `VStack` in a `ScrollView` would
    begin creaking far before 10,000 items!).
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
- en: Looking good so far.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: Initial list of 2FA codes
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can add a simple regex-based evaluator to check for trips — that is,
    a TOTP containing a sequence of three matching digits such as `120333`.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-48
  prefs: []
  type: TYPE_PRE
- en: We add a `fontWeight` modifier to our `Text` views to easily detect these GETs
    when we’re scrolling.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-50
  prefs: []
  type: TYPE_PRE
- en: Et viola! *Check those trips*!
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: We can even make a basic modification to the our regex to detect the hallowed
    *quads* — I’ll leave this as an exercise to the reader.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Our careless `ForEach` implementation causes a warning:'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-54
  prefs: []
  type: TYPE_PRE
- en: We actually get dozens of this warning!
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: Using the code string as a view identity is a bad idea here
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: Since we generated 10,000 OTPs, it’s extremely likely that several match — this
    is the same as the [birthday problem](https://en.wikipedia.org/wiki/Birthday_problem),
    where the number of pairs of possible matches is well over a million.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start calculating some interesting codes.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: 'The key here is precomputing to look ahead into the future: TOTP is a deterministic
    hash of the secret and date inputs. Therefore, we can feed a long sequence of
    dates in the future to determine which OTP code you see at what time.'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s adjust to our OTP generation to return both the code and date:'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-61
  prefs: []
  type: TYPE_PRE
- en: 'To test this, let’s generate a ton of these codes, and search for the full-house
    of GETs: *quints*.'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-split-63
  prefs: []
  type: TYPE_PRE
- en: After some number crunching while my M1 runs the hashing function — about 30
    seconds of it — we arrive at some seriously checkable GETs.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: It’s… it’s beautiful. Check ’em.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: Fun as it is to see great numbers, the app concept is no better than a random-number
    generating machine if you can’t really use the GETs in real life for your real
    authentication.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know when the interesting numbers are arriving, we want to queue
    up a push notification so we catch the number live:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-split-68
  prefs: []
  type: TYPE_PRE
- en: These are scheduled right after generating the `interestingCodes` we use in
    our view. A short while later, I got 2 wonderful push notifications at once!
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
- en: I still tell my wife every single time I get a subscriber
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: This became more exciting when I confirmed this notification corresponded with
    the number appearing in reality!
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
- en: Finding quads in the 2FA app itself
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: 'This app has now been elevated beyond a random number generator: this code
    really works for signing into my Google account.'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
- en: 'To determine different types of interesting number, we need to introduce the
    concept of *interestingness*. This could include, non-exhaustively, a few potential
    kinds of number sequence:'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
- en: These types of interesting number can be enumerated as… well, as an enum case,
    optionally created for each OTP we generate.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-split-76
  prefs: []
  type: TYPE_PRE
- en: Each `checkThose` method we use wraps a different regex, and we run them in
    order of what we care about most — for instance, sextuples is 100x rarer than
    quads.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
- en: 'A long-overdue refactor later and we’ve created our proof-of-concept. Let’s
    recap:'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
- en: The app allows me to enter a (hardcoded) 2FA secret key.
  id: totrans-split-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The app generates a 6-digit 2FA code locally, every 30 seconds.
  id: totrans-split-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The app schedules push notifications that show up when quads, quints, and sexts
    are generated.
  id: totrans-split-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’m going to take a break to play with the app for a few days. I suspect I might
    have the basis for a cool app on my hands.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
- en: I’ve been using the app, the bare-bones POC containing the kernel of my idea,
    for a few days now. And I *LOVE* it. I can’t wait until the first time I get sextuples.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
- en: 'Now’s the time to add some meat on the bones and build a fully-fledged 2FA
    app around the concept. As I laid out before, this really only requires 4 major
    new features:'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
- en: Scanning 2FA QR codes and store them securely on the keychain.
  id: totrans-split-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying and managing multiple 2FA accounts in the UI.
  id: totrans-split-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Letting users set the numbers they care about.
  id: totrans-split-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing more kinds of *interestingness*.
  id: totrans-split-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lastly, a non-functional requirement: I’ll need to do some work optimising
    the very slow code generation — maybe using batching or local persistence.'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
- en: I have no intention of doing anything fancy with the design — the standard apple
    `List` view components will take me far, conforming to the [HIG](https://developer.apple.com/design/human-interface-guidelines)
    out of the box.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s keep our UX nice and simple: I know the functionality primarily lives
    in the push notifications; and it’s pretty perfect. That means hiding the QR scanner
    and settings behind toolbar buttons that display modal flows.'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
- en: The basic List UI for my MVP
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
- en: A couple of open-source libraries will save me a ton of time on cookie-cutter
    tasks. [CodeScanner](https://github.com/twostraws/CodeScanner/) to supply simple
    SwiftUI QR code scanning, and [KeychainAccess](https://github.com/kishikawakatsumi/KeychainAccess)
    to easily store these 2FA account secrets in the keychain.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
- en: 'This scanner library uses camera access to turn QR codes into easily-parseable
    URLs like this:'
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-split-95
  prefs: []
  type: TYPE_PRE
- en: Now, we can easily get our accounts into the app!
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Check ’em: now with a QR scanner!'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
- en: Using SwiftUI `@AppStorage`, alongside a `List` and some `Toggle`s, we can easily
    build a user settings screen.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
- en: I used a closure in `onDisappear` to tell the parent view to begin number crunching
    again and re-schedule the notifications. This was the simplest way I to batch
    everything up, rather than running expensive computation each time a toggle changed.
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-split-100
  prefs: []
  type: TYPE_PRE
- en: Look, I’m an indie dev, I’m allowed to do this halfway through the build process!
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
- en: I decided to download a few other 2FA apps to see if there were any ideas I
    could copy. Frankly, I expected a pretty crowded and competitive app market, but
    some of these were truly terrible.
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
- en: 'The 2FA app space: mostly astonishingly bad'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
- en: Seriously, more than 50% of them threw up an extremely aggressive paywall before
    you could use them… when there are perfectly good free options.
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
- en: Does nobody make apps for fun anymore?
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
- en: Despite this paywall menagerie, I did manage to note down a few good ideas to
    borrow.
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
- en: This is, of course, pretty critical for anyone that has more than one account.
    More accounts also means more opportunities for rare GETs!
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
- en: Updating my keychain code, now we can scan multiple QR codes, persisted our
    account data (including the secret), and they worked perfectly for logging me
    into my various accounts!
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
- en: I also implemented the proper built-in `List` functionality, so we can swipe-to-delete
    codes we don’t need anymore.
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
- en: While doing my competitor analysis, I discovered that the Google Authenticator
    kept all my 2FA codes from years ago, which I’d added on my previous iPhone!
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
- en: I realised then I was making two mistakes with my data layer.
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, synchronising our keychain to iCloud means accounts appear on all
    your other Apple devices. This is a piece of cake with the Keychain Access library:'
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-split-113
  prefs: []
  type: TYPE_PRE
- en: 'Secondly, I was suffering from shiny-object syndrome: in my haste to use SwiftData
    as a persistence layer, I was only using the Keychain for the secrets, and persisting
    the rest of the Account metadata through the new framework.'
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
- en: This meant I couldn’t get my accounts on any other device — the secret on its
    own is useless!
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, I realised I had to place the whole `Account` on the keychain.
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
- en: My new approach keeps the QR code URL on the keychain in its entirety. Now,
    the `Account` object itself is ephemeral; re-computed from the URL every time
    the app loads.
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
- en: 'This means the `Account`s can appear on any iDevice you’re signed in to! This
    ephemeral approach neatly kills two birds with one stone. Now we use the Accounts
    from the keychain when we need to fetch them at load:'
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-split-119
  prefs: []
  type: TYPE_PRE
- en: My code is a little bit spaghetti, but the final app was about 1,500 LoC in
    total — I’ll rebuild it using a proper DI framework when I want to write an article
    about DI. If you’re a junior engineer, please don’t try this at home!
  id: totrans-split-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I did a lot of generic coding work to improve the UI and refactor the code nicely,
    but there were also a few gems in my development process that were pretty interesting.
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
- en: This is very much a nice to have, but the best open-source app did the same,
    so I felt I had to *at least* be as good as that.
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, there is a little-known Google API which crawls the web for FavIcons
    on websites and allows you to download them at several resolutions.
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
- en: How do I work out the website? I found pretty good results by simply using the
    `issuer` property on the QR code and trying the`.com`.
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-split-125
  prefs: []
  type: TYPE_PRE
- en: Here I used the [CachedAsyncImage](https://github.com/lorenzofiamingo/swiftui-cached-async-image)
    library to get blazingly-fast loading performance on the icons.
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
- en: Images for each 2FA account
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
- en: I also added a Metal shader to handle background removal, and make the icon
    pop a little more.
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the SwiftUI View extension:'
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-split-130
  prefs: []
  type: TYPE_PRE
- en: 'And of course the MSL shader code:'
  id: totrans-split-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-split-132
  prefs: []
  type: TYPE_PRE
- en: Here’s how they look. They’re not bad, but not amazing.
  id: totrans-split-133
  prefs: []
  type: TYPE_NORMAL
- en: Metal shaders to remove the white backgrounds on the icons
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
- en: I’ve started over-engineering. Let’s stick a pin in this and see how we feel
    later.
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
- en: It’s working pretty well now as a basic 2fa app in its own right.
  id: totrans-split-136
  prefs: []
  type: TYPE_NORMAL
- en: Who would have thought that to be ahead of most of the pack, I just had to not
    have an extremely aggressive paywall ($4.99 per week? Seriously?!)
  id: totrans-split-137
  prefs: []
  type: TYPE_NORMAL
- en: After some boilerplate software development work on the timings, the basic UI,
    and the data storage, it’s really working quite nicely now — sticking to the basic
    SwiftUI components is a brilliant way to ensure stuff *“just works”**.
  id: totrans-split-138
  prefs: []
  type: TYPE_NORMAL
- en: '*and helps make everything accessible!'
  id: totrans-split-139
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I also implemented some nice QoL features I found through my competitor research
    such as tap-to-copy.
  id: totrans-split-140
  prefs: []
  type: TYPE_NORMAL
- en: I utilised accessibility tools like `@ScaledMetric` and `ViewThatFits` to ensure
    the app works great regardless of your visual needs. I even get light mode for
    free out of the box by sticking closely to Apple’s basic SwiftUI components and
    colours.
  id: totrans-split-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-split-142
  prefs: []
  type: TYPE_PRE
- en: Check ’em at the largest accessibility font size
  id: totrans-split-143
  prefs: []
  type: TYPE_NORMAL
- en: 'To improve the true core value proposition, I implemented a lot more options
    for interestingness:'
  id: totrans-split-144
  prefs: []
  type: TYPE_NORMAL
- en: Sexts, quints, and quads like `000000`
  id: totrans-split-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Counting sequences like `012345`
  id: totrans-split-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hundred-thousands like `300000`
  id: totrans-split-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Units like `000001` and tens like `000010`
  id: totrans-split-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maths constants like pi (`314159`)
  id: totrans-split-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physics constants like Planck's constant, `661034` (6.6x10⁻³⁴)
  id: totrans-split-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Palindromes like `012210`
  id: totrans-split-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeated twos and threes like `121212` and `123123`
  id: totrans-split-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of these were fun little leet-code puzzles to implement, some were annoying
    regexes, while some were very straightforward.
  id: totrans-split-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-split-154
  prefs: []
  type: TYPE_PRE
- en: Now I’ve updated the Settings UI so that you can sort by either rarity (common,
    rare, and ultra-rare), or by type (such as repetitions, constants, sequences,
    or round numbers).
  id: totrans-split-155
  prefs: []
  type: TYPE_NORMAL
- en: Toggle on the Settings menu
  id: totrans-split-156
  prefs: []
  type: TYPE_NORMAL
- en: How do I calculate the probabilities of each rarity level?
  id: totrans-split-157
  prefs: []
  type: TYPE_NORMAL
- en: For perfect counting sequences like `012345`, there are only 6 possible sequences
    (up to `567890`) out of one million possible number combinations.
  id: totrans-split-158
  prefs: []
  type: TYPE_NORMAL
- en: 30 seconds times 1 million combinations, divided by 6 possible sequences, means
    for each account you might only expect a perfect counting sequence to occur on
    average every 5 million seconds — that is, **every 58 days** on average.
  id: totrans-split-159
  prefs: []
  type: TYPE_NORMAL
- en: This is pretty ultra rare.
  id: totrans-split-160
  prefs: []
  type: TYPE_NORMAL
- en: However, palindromes such as `123321`, have 1000 possible 3-sequence numbers
    that make them up. This means you could see them **every 0.34 days** on average!
    Much more common.
  id: totrans-split-161
  prefs: []
  type: TYPE_NORMAL
- en: In the middle, something like repeated twos (e.g. `141414`) have 100 possible
    numbers (`00` to `99`), so they happen **every 3.5 days** on average. So, pretty
    rare, but not *ultra*-rare.
  id: totrans-split-162
  prefs: []
  type: TYPE_NORMAL
- en: Some of these sequences, like quads, are a little tougher to number crunch,
    so it was simpler to generate tens of millions of OTPs and counting the incidence
    of each kind of interestingness, to get a feel for their relative frequency.
  id: totrans-split-163
  prefs: []
  type: TYPE_NORMAL
- en: The app can process 64 interesting 2FA codes quite quickly, but only when I
    have all the common `Interestingness`enabled. When I only want ultra-rare GETs,
    the processing takes a long time.
  id: totrans-split-164
  prefs: []
  type: TYPE_NORMAL
- en: I need to invoke chunking — while crunching through millions of potential OTPs,
    returning and scheduling a notification as soon as a valid interesting code is
    discovered.
  id: totrans-split-165
  prefs: []
  type: TYPE_NORMAL
- en: My old friend the `Combine` framework gives us a neat solution!
  id: totrans-split-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-split-167
  prefs: []
  type: TYPE_PRE
- en: I also used some `Task`s so that we can cancel and re-start computation in case,
    for instance, a user changes their settings mid-processing. Detaching the tasks
    ensures the heavy processing for our crypto and string analysis operations keeps
    off the UI thread.
  id: totrans-split-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-split-169
  prefs: []
  type: TYPE_PRE
- en: Now the scheduling works pretty smoothly, coming out in sequence instead of
    a single large chunk!
  id: totrans-split-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-split-171
  prefs: []
  type: TYPE_PRE
- en: This was the one that got away killed me. I’m desperate to use the real check
    ’em meme for the app icon. It’s simply perfect.
  id: totrans-split-172
  prefs: []
  type: TYPE_NORMAL
- en: However, my good friend pointed out that our friends over at Lionsgate films
    might be feeling a little litigious.
  id: totrans-split-173
  prefs: []
  type: TYPE_NORMAL
- en: '*But I had to have it!*'
  id: totrans-split-174
  prefs: []
  type: TYPE_NORMAL
- en: 'Perhaps there is hope after all:'
  id: totrans-split-175
  prefs: []
  type: TYPE_NORMAL
- en: Unlike you, I have faith in the American copyright system.
  id: totrans-split-176
  prefs: []
  type: TYPE_NORMAL
- en: Partially completed form for requesting permission to use a still from a movie
  id: totrans-split-177
  prefs: []
  type: TYPE_NORMAL
- en: Now we play the waiting game.
  id: totrans-split-178
  prefs: []
  type: TYPE_NORMAL
- en: Crickets.
  id: totrans-split-179
  prefs: []
  type: TYPE_NORMAL
- en: I’ve lost all faith in the American copyright system. Goddammit, Bob Iger, whatever
    happened to fair use?!
  id: totrans-split-180
  prefs: []
  type: TYPE_NORMAL
- en: This is the best I could get from DALL-E 3\. It has the wrong number of fingers,
    and it’s the wrong side of the hand, but after trying to prompt-engineer something
    better for several hours I am resigned to it.
  id: totrans-split-181
  prefs: []
  type: TYPE_NORMAL
- en: DALL-E *really* didn’t like drawing the back of a hand. I tried.
  id: totrans-split-182
  prefs: []
  type: TYPE_NORMAL
- en: The concept was proven. The app works well! Time for some polish and pet features
    before we show the world the joy of Check ‘em.
  id: totrans-split-183
  prefs: []
  type: TYPE_NORMAL
- en: I created a list of TODOs — new features and bug-fixes — that I could implement
    in my V1 before I made my first release.
  id: totrans-split-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-split-185
  prefs: []
  type: TYPE_PRE
- en: 'Naturally, since I don’t have a product manager in sight, I immediately began
    work on the lowest-priority task: building out a collection with deep links — I
    don’t want my rare GETs to go to waste!'
  id: totrans-split-186
  prefs: []
  type: TYPE_NORMAL
- en: 'This piece actually helps with a problem we identified original proof of concept:
    we need to incentivise users to re-enter the app by making users interact with
    the notifications.'
  id: totrans-split-187
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a collect-a-thon is a little tricky, because there are a few moving
    parts:'
  id: totrans-split-188
  prefs: []
  type: TYPE_NORMAL
- en: Allow users to tap on notifications and deep link into the app.
  id: totrans-split-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Securely store the interestingness of the code they tapped.
  id: totrans-split-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Render these into a collection screen.
  id: totrans-split-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a deep link to the notification was fairly simple.
  id: totrans-split-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-split-193
  prefs: []
  type: TYPE_PRE
- en: But, a little annoyingly, I had to create an `AppDelegate` to handle the notifications — SwiftUI
    doesn’t quite handle these well on its own yet.
  id: totrans-split-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-split-195
  prefs: []
  type: TYPE_PRE
- en: Finally, I lazily added a long, comma-separated list of stored codes in the
    Keychain.
  id: totrans-split-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-split-197
  prefs: []
  type: TYPE_PRE
- en: This was more a product of a desire to release fast rather than a well-thought-out
    engineering decision, one I will come to regret if my power-users approach the
    soft limit of 4kB per Keychain item (the hard limit is more like 16MB, so I should
    be okay!).
  id: totrans-split-198
  prefs: []
  type: TYPE_NORMAL
- en: This work paid off rapidly though, as the collection screen quickly started
    filling up with my rare GETs!
  id: totrans-split-199
  prefs: []
  type: TYPE_NORMAL
- en: Collection menu containing all your rare GETs
  id: totrans-split-200
  prefs: []
  type: TYPE_NORMAL
- en: I originally hid the collection until a user had tapped a notification, but
    I realised it was far more compelling to entice a user to collecting ’em all by
    showing them the menu option.
  id: totrans-split-201
  prefs: []
  type: TYPE_NORMAL
- en: The iOS 17 `sensoryFeedback` API gives us some extremely subtle haptics to play
    with, so subtle in fact that I didn’t like them. So I ripped out the Haptic Engine
    from Carbn and reused it here.
  id: totrans-split-202
  prefs: []
  type: TYPE_NORMAL
- en: 'I simply added a truly atrocious side effect to my existing refresh code:'
  id: totrans-split-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-split-204
  prefs: []
  type: TYPE_PRE
- en: Don’t try this at home, kids!
  id: totrans-split-205
  prefs: []
  type: TYPE_NORMAL
- en: There’s a bug where the `CachedAsyncImage` library is eagerly loading the non-existent
    FavIcons, yielding a blurry globe… But I think I will release with this.
  id: totrans-split-206
  prefs: []
  type: TYPE_NORMAL
- en: It works pretty much 90% of the time, and I’d rather ship than replace one of
    my pet third-party SwiftUI libraries.
  id: totrans-split-207
  prefs: []
  type: TYPE_NORMAL
- en: FavIcon not found for steam.com
  id: totrans-split-208
  prefs: []
  type: TYPE_NORMAL
- en: Some of the other bugs, I was a little more attentive to before shipping — this
    one in particular was pretty bad, since someone might scan a QR code twice and
    get a weird duplicate of the same account.
  id: totrans-split-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-split-210
  prefs: []
  type: TYPE_PRE
- en: Far from ripping out and replacing a time-saving library, this bug had a single-line-of-code
    fix.
  id: totrans-split-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-split-212
  prefs: []
  type: TYPE_PRE
- en: Since the Keychain is keying 2FA accounts based on the name, this fix is pretty
    sensible.
  id: totrans-split-213
  prefs: []
  type: TYPE_NORMAL
- en: I found another issue with codes not being queued.
  id: totrans-split-214
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-split-215
  prefs: []
  type: TYPE_PRE
- en: It turns out, I misunderstood how `@AppStorage` actually behaves — the default
    only applied to the UI, as opposed to actually storing something in user defaults.
  id: totrans-split-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-split-217
  prefs: []
  type: TYPE_PRE
- en: A function to populate UserDefaults on the first app load solved this.
  id: totrans-split-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-split-219
  prefs: []
  type: TYPE_PRE
- en: One little bit of improvement used the new iOS 17 TipKit to give a user a bit
    of an idea of what to do when they first load into the app.
  id: totrans-split-220
  prefs: []
  type: TYPE_NORMAL
- en: Tips displayed on first launch
  id: totrans-split-221
  prefs: []
  type: TYPE_NORMAL
- en: This was surprisingly simple to implement with the new API.
  id: totrans-split-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-split-223
  prefs: []
  type: TYPE_PRE
- en: I think we’re ready to ship.
  id: totrans-split-224
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our store listing via [AppScreens](https://appscreens.com/), the
    coup de grâce second screenshot shows the true power of Check ’em (featuring my
    cats).
  id: totrans-split-225
  prefs: []
  type: TYPE_NORMAL
- en: Seriously?
  id: totrans-split-226
  prefs: []
  type: TYPE_NORMAL
- en: Sorry France, I don’t have the energy to fill in a form at 11pm at night 🤷‍♂️
  id: totrans-split-227
  prefs: []
  type: TYPE_NORMAL
- en: Look, I’m not the most libertarian person in the world, but I don’t want to
    jump through several extra hoops to increase my target market by 1%. Do better!
  id: totrans-split-228
  prefs: []
  type: TYPE_NORMAL
- en: '*(Sorry to all my French readers)*'
  id: totrans-split-229
  prefs: []
  type: TYPE_NORMAL
- en: In short order, we’re set up on App Store Connect and ready to press the button!
  id: totrans-split-230
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading along with my journey!
  id: totrans-split-231
  prefs: []
  type: TYPE_NORMAL
- en: 'This was a pretty fun project: not only did I manage to tickle the part of
    my geek brain which loves spotting patterns; I got to handle some nifty processing,
    threading, and optimisation problems!'
  id: totrans-split-232
  prefs: []
  type: TYPE_NORMAL
- en: My next step is [focusing fully on performance](https://jacobbartlett.substack.com/p/high-performance-swift-apps)
    for the `v1.1` release, so it loads up crunches the OTPs even faster than normal!
  id: totrans-split-233
  prefs: []
  type: TYPE_NORMAL
- en: If you love this app, please give your suggestions on numbers you’d like to
    see! Finally, if anyone is keen to see an Android version, I’m more than happy
    to share my source code let you to run with it.
  id: totrans-split-234
  prefs: []
  type: TYPE_NORMAL
