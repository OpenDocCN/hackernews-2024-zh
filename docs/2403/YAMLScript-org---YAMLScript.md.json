["```\n--- !yamlscript/v0/ &pets\n\ncats:: load(\"cats.yaml\")\ndogs:: curl(\"https://yamlscript.org/dogs.yaml\")\n      .yaml/load().big\n\n--- !yamlscript/v0/\n\nabout: A YAMLScript Example about Pets\ntitle:: \"$(ENV.USER.str/capitalize())'s Pets\"\nbirds: !sort:\n- Parrot\n- Canary\n- Owl\ncats:: .*pets.cats\ndogs:: .*pets.dogs.shuffle().take(2 _)\n```", "```\n$ cat cats.yaml\n- Siamese\n- Persian\n- Maine Coon\n\n$ curl -s https://yamlscript.org/dogs.yaml\nsmall:\n- Chihuahua\n- Pomeranian\n- Maltese\n\nbig:\n- Mastiff\n- Great Dane\n- Saint Bernard\n- Otterhound\n```", "```\n$ ys --load file.yaml\n{\"about\":\"A YAMLScript Example about Pets\",\n\"title\":\"Ingy's Pets\",\n\"birds\":[\"Canary\",\"Owl\",\"Parrot\"],\n\"cats\":[\"Siamese\",\"Persian\",\"Maine Coon\"],\n\"dogs\":[\"Otterhound\",\"Saint Bernard\"]}\n```", "```\n$ ys -Y file.yaml\nabout: A YAMLScript Example about Pets\ntitle: Ingy's Pets\nbirds:\n- Canary\n- Owl\n- Parrot\ncats:\n- Siamese\n- Persian\n- Maine Coon\ndogs:\n- Great Dane\n- Mastiff\n```", "```\n$ python -c '\nimport yamlscript,yaml\nys = yamlscript.YAMLScript()\ninput = open(\"file.yaml\").read()\ndata = ys.load(input)\nprint(yaml.dump(data))'\nabout: A YAMLScript Example about Pets\nbirds:\n- Canary\n- Owl\n- Parrot\ncats:\n- Siamese\n- Persian\n- Maine Coon\ndogs:\n- Otterhound\n- Mastiff\ntitle: Ingy's Pets\n```", "```\n defn main(number=99):\n  each [n (number .. 1)]:\n    say: paragraph(n)\n\ndefn paragraph(num): | $bottles(num) of beer on the wall,\n  $bottles(num) of beer.\n  Take one down, pass it around.\n  $bottles(num - 1) of beer on the wall.\n\ndefn bottles(n):\n  cond:\n    n == 0 : 'No more bottles'\n    n == 1 : '1 bottle'\n    =>     : \"$n bottles\" \n```", "```\n$ ys 99-bottles.ys 3\n3 bottles of beer on the wall,\n3 bottles of beer.\nTake one down, pass it around.\n2 bottles of beer on the wall.\n\n2 bottles of beer on the wall,\n2 bottles of beer.\nTake one down, pass it around.\n1 bottle of beer on the wall.\n\n1 bottle of beer on the wall,\n1 bottle of beer.\nTake one down, pass it around.\nNo more bottles of beer on the wall.\n```", "```\n$ ys -b 99-bottles.ys\n* Compiling YAMLScript '99-bottles.ys' to '99-bottles' executable\n\n$ time ./99-bottles 1\n1 bottle of beer on the wall,\n1 bottle of beer.\nTake one down, pass it around.\nNo more bottles of beer on the wall.\n\nreal    0m0.010s\nuser    0m0.006s\nsys     0m0.005s\n```", "```\n$ . <(curl https://yamlscript.org/try-ys)\n```", "```\n$ curl https://yamlscript.org/install | bash\n```", "```\n$ curl https://yamlscript.org/install | PREFIX=/some/dir VERSION=0.1.xx bash\n```", "```\n$ git clone https://github.com/yaml/yamlscript\n$ cd yamlscript\n$ make build\n$ make install\n$ export PATH=~/.local/bin:$PATH\n```", "```\n$ ys --help\n\nys - The YAMLScript (YS) Command Line Tool - v0.1.59\n\nUsage: ys [<option...>] [<file>]\n\nOptions:\n\n      --run                Run a YAMLScript program file (default)\n  -l, --load               Output (compact) JSON of YAMLScript evaluation\n  -e, --eval YSEXPR        Evaluate a YAMLScript expression\n                           multiple -e values joined by newline\n\n  -c, --compile            Compile YAMLScript to Clojure\n  -b, --binary             Compile to a native binary executable\n\n  -p, --print              Print the result of --run in code mode\n  -o, --output FILE        Output file for --load, --compile or --binary\n\n  -T, --to FORMAT          Output format for --load:\n                             json, yaml, edn\n  -J, --json               Output (pretty) JSON for --load\n  -Y, --yaml               Output YAML for --load\n  -E, --edn                Output EDN for --load\n\n  -m, --mode MODE          Add a mode tag: code, data, or bare (for -e)\n  -C, --clojure            Treat input as Clojure code\n\n  -d                       Debug all compilation stages\n  -D, --debug-stage STAGE  Debug a specific compilation stage:\n                             parse, compose, resolve, build,\n                             transform, construct, print\n                           can be used multiple times\n  -S, --stack-trace        Print full stack trace for errors\n  -x, --xtrace             Print each expression before evaluation\n\n      --install            Install the libyamlscript shared library\n      --upgrade            Upgrade both ys and libyamlscript\n\n      --version            Print version and exit\n  -h, --help               Print this help and exit</file></option...>\n```", "```\n$ ys --version\nYAMLScript 0.1.59\n```", "```\n$ pip install yamlscript\nSuccessfully installed yamlscript-0.1.59\n$ curl https://yamlscript.org/install | VERSION=0.1.59 install\nInstalled ~/.local/lib/libyamlscript.so - version 0.1.59\n```", "```\n> $ ys -c -e 'say: \"Hello\"'\n> (say \"Hello\")\n> ```"]