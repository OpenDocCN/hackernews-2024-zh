["```\n    (pcase (get-return-code x)\n      ;; string\n      ((and (pred stringp) msg)\n       (message \"%s\" msg))\n\n      ;; symbol\n      ('success       (message \"Done!\"))\n      ('would-block   (message \"Sorry, can't do it now\"))\n      ('read-only     (message \"The schmilblick is read-only\"))\n      ('access-denied (message \"You do not have the needed rights\"))\n\n      ;; default\n      (code           (message \"Unknown return code %S\" code)))\n\n```", "```\") operator, which is used for pattern-matching and destructuring, earlier in the `pcase` [doc string](https://www.emacswiki.org/emacs/DocString). As Mackenzie had noted, one of the confusing things about `pcase` is its use of two punctuation marks, backquote and comma (\"`,`\"), that already have established uses in Elisp macro definitions: \"<q>pcase complicated the meaning of ` and ,. Before pcase these had definite meanings. Afterwards, they became highly context dependent.</q>\"\n\nThere were a few responses to Porter's message, largely in favor of his ideas; eventually, Emacs co-maintainer Stefan Kangas [copied the post](/ml/emacs-devel/CADwFkm=aZB29-Jc_WGBWj+SdwrQJ1KRCqvJUPgaqR=JpWDLVGA@mail.gmail.com/) to Stefan Monnier, who is a former Emacs maintainer and the developer of `pcase`. Monnier was [generally in favor](/ml/emacs-devel/jwvbkaejfzz.fsf-monnier+emacs@gnu.org/) as well; he thought that the doc string was not really the place for detailed backquote information, though some reorganization made sense. Stallman [took exception](/ml/emacs-devel/E1rILvo-0006PN-Ka@fencepost.gnu.org/) to Porter's other suggestion to possibly mention `pcase` in \"[An Introduction to Programming in Emacs Lisp](https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html)\". \"<q>We should not encourage people learning Emacs Lisp to use pcase.</q>\"\n\n#### First draft\n\nIn mid-January, Stallman [posted a first draft of `cond*`](/ml/emacs-devel/E1rQJDv-0001UG-2E@fencepost.gnu.org/), asking for more testing, \"<q>constructive comments, bug reports, patches, and suggestions</q>\". Andrea Corallo [asked](/ml/emacs-devel/yp1ttnave7z.fsf@fencepost.gnu.org/) about one particular feature of `cond*`:\n\n> what is the reason for some of these cond* clauses to keep the binding in effect outside the clause itself and for the whole cond* construct? At first glance it doesn't look very idiomatic in Lisp terms to me.\n\nCorallo is referring to the `bind*` sub-clause that can appear anywhere in the body of the `cond*` to bind variables with a scope that does not end with the `bind*` that contains them. Instead, the scope of those variables is the body of the `cond*` from that point onward, which is a bit of an oddity from the usual expectation in Lisp.\n\n```"]