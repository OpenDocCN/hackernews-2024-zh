- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: Êú™ÂàÜÁ±ª'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:47:20'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: The rev.ng decompiler goes open source + start of the UI closed beta - rev.ng
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Êù•Ê∫êÔºö[https://rev.ng/blog/open-sourcing-renvg-decompiler-ui-closed-beta](https://rev.ng/blog/open-sourcing-renvg-decompiler-ui-closed-beta)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hi there! Long time no see! It has been a while since our last update about
    rev.ng, but we've been quietly working hard. So, it's time for some news! üöÄ
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: '*tl;dr* In this blog post we:'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: Announce the open sourcing of the rev.ng decompiler, the start of the UI closed
    beta, the release of the new website, rev.ng Hub and the docs. Also, we do [private
    demos](mailto:info@rev.ng).
  id: totrans-split-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain how to try rev.ng.
  id: totrans-split-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the design and goals of rev.ng as a whole.
  id: totrans-split-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain the relation between the open source project, the UI running in the
    cloud and the standalone UI.
  id: totrans-split-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Present our roadmap towards the 1.0 release.
  id: totrans-split-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Describe how to interact with us (i.e., [X/Twitter](https://twitter.com/_revng),
    [Discord](https://discord.gg/wEQtgKJxcX), [Newsletter](/newsletter-subscribe),
    [Discourse](https://discuss.rev.ng/)).
  id: totrans-split-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[](#1-what-happens-today)1\. What happens today?'
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Quite a lot.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: We are open sourcing [`revng-c`](https://github.com/revng/revng-c), the backend
    of our decompiler.
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As of today, the whole decompilation engine is open source!
  id: totrans-split-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We're also releasing initial [documentation](https://docs.rev.ng) on how to
    use rev.ng.
  id: totrans-split-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We'll soon invite newsletter subscribers to the closed beta for the rev.ng UI.
  id: totrans-split-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We're going to invite people on FIFO basis, make sure [you're registered](/newsletter-subscribe).
  id: totrans-split-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We're releasing the new website. You are looking at it.
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We're publishing [rev.ng Hub](https://hub.rev.ng), the entrypoint to use the
    cloud version of rev.ng.
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beta users will be able to create projects, run the UI in the browser and collaborate
    with other users without installing anything.
  id: totrans-split-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you're not part of the closed beta yet, you can still [explore existing public
    projects](https://hub.rev.ng/).
  id: totrans-split-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We're starting to look for people curious about getting a private demo of the
    rev.ng capabilities ([interested?](mailto:info@rev.ng)).
  id: totrans-split-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](#2-how-to-try-revng)2\. How to try rev.ng'
  id: totrans-split-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Very briefly, let's install `revng`. No root required, everything will fit into
    a single directory that you can discard at any time.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
- en: 'OK, let''s now decompile a simple program. Consider `example.c`:'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
- en: 'You can compile and decompile it:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-32
  prefs: []
  type: TYPE_PRE
- en: 'You should obtain:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
- en: Alternatively, take a look at the [documentation](https://docs.rev.ng). In particular,
    make sure you correctly [set up a working environment](https://docs.rev.ng/user-manual/working-environment/),
    follow the tutorial to [create a model from scratch](http://docs.rev.ng/user-manual/model-tutorial/)
    or try directly the [analyses tutorial](http://docs.rev.ng/user-manual/analyses/),
    which will show you how to decompile a program in a single invocation.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: To try the UI, [register to our newsletter](/newsletter-subscribe). As mentioned
    before, we'll soon start inviting people in small batches.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: Note that the goal of this release is to demo the UI and the decompilation results
    on some binaries on which we get interesting results, let people work on some
    real world binaries and then let people try whatever they like and get feedback,
    bug reports and so on.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: 'In particular, here are some non-trivial binaries (with their `.text` size)
    that we use for testing: [hostname](https://rev.ng/downloads/binaries/hostname)
    (2K), [ntfscat](https://rev.ng/downloads/binaries/ntfscat) (4K), [umount](https://rev.ng/downloads/binaries/umount)
    (8K), [chroot](https://rev.ng/downloads/binaries/chroot) (15K), [nc.openbsd](https://rev.ng/downloads/binaries/nc.openbsd)
    (15K), [apt-get](https://rev.ng/downloads/binaries/apt-get) (18K), [df](https://rev.ng/downloads/binaries/df)
    (45K), [parted](https://rev.ng/downloads/binaries/parted) (38K), [gzip](https://rev.ng/downloads/binaries/gzip)
    (54K), [updatedb.plocate](https://rev.ng/downloads/binaries/updatedb.plocate)
    (56K), [resolvectl](https://rev.ng/downloads/binaries/resolvectl) (61K), [ps](https://rev.ng/downloads/binaries/ps)
    (47K).'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: rev.ng supports many ABIs and platforms. However, at this stage, we performed
    initial QA on Linux x86-64 binaries. rev.ng will evolve significantly during the
    closed beta period, so make sure you follow our [X/Twitter account](https://twitter.com/_revng)
    and are subscribed to our [monthly newsletter](/newsletter-subscribe) to know
    when it's time to come back to try out some new features!
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: If you have problems, head to [Discourse](https://discuss.rev.ng/) for help.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: '[](#3-our-goals)3\. Our goals'
  id: totrans-split-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a good time for a refresher about what the rev.ng decompiler is about.
    In brief, we focus on:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: automatic recovery of data structures;
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a modern UX;
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: collaborative reversing;
  id: totrans-split-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: wide platform support;
  id: totrans-split-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: extensibility.
  id: totrans-split-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](#automatic-data-structures-recovery)Automatic data structures recovery'
  id: totrans-split-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Thanks to Data Layout Analysis, we can automatically recover the layout of `struct`s
    *interprocedurally*.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following `struct`, a node in a linked list with an array of 5
    integers:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-51
  prefs: []
  type: TYPE_PRE
- en: 'A function summing the elements of the array:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
- en: 'And a function traversing the linked list:'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-split-55
  prefs: []
  type: TYPE_PRE
- en: 'rev.ng produces the following output out of the box (except for the comments):'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-split-57
  prefs: []
  type: TYPE_PRE
- en: Pretty nice, isn't it? You can also directly on [Hub](https://hub.rev.ng/revng-demos/linked-list)
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Bonus: we emit syntactically valid C code.'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: '**Status as of today**: available.'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: '[](#a-modern-ux)A modern UX'
  id: totrans-split-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our UI is based on VSCode. If you use VSCode, you already know how to use it.
    Also, the UI can both run in a browser tab or as a standalone application.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: 'Shortcuts:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: '`Ctrl + Click`, navigates to the definition of the function/type under the
    cursor.'
  id: totrans-split-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`N` renames it.'
  id: totrans-split-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Y` let''s you edit its type.'
  id: totrans-split-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`X` shows references.'
  id: totrans-split-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rev.ng is not just a decompiler, it's an *interactive* decompiler. This means
    that you can make changes interactively and only the things that are affected
    by your change will be recomputed, just like you would expect.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: '**Status as of today**: the UI is available for participants in the closed
    beta.'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
- en: '[](#collaborative-reversing)Collaborative reversing'
  id: totrans-split-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The rev.ng UI has a client-server architecture.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
- en: Multiple users can connect to the same daemon instance and work at the same
    time on the same project. If you use the cloud version, you also get a GitHub-like
    application to manage projects, the [rev.ng Hub](https://hub.rev.ng).
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
- en: '**Status as of today**: works, needs some love to improve the user experience
    ([roadmap item #797](/roadmap#feature-797)).'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
- en: '[](#wide-architecture-support)Wide architecture support'
  id: totrans-split-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to understand why we can easily support many architectures, let's briefly
    digress on compilers and emulators.
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: Compiler are usually organized in frontend, mid-end and backend. The frontend
    handles details specific to the input language. The mid-end performs optimizations
    on an intermediate representation (IR) that is independent of both the input language
    and the target architecture. Finally, the backend performs architecture-specific
    optimizations and outputs executable code.
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider a part of the LLVM ecosystem:'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
- en: LLVM IR is LLVM's intermediate representation.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now consider QEMU, a well-known emulator. When running in emulation
    mode, as opposed to virtualization mode (e.g., KVM), works in a similar fashion.
    It has its own frontends, its own IR (tiny code) and multiple backends. The main
    difference relies in the fact that the input is not C or C++ but ARM or x86-64
    executable code:'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
- en: This type of emulation is also known as dynamic binary translation.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, rev.ng works like this:'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
- en: Basically we use the first half of the QEMU pipeline to *lift* executable code
    to tiny code, convert it to LLVM IR and then proceed with the decompilation process.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
- en: This means we can support any [architecture supported by QEMU](https://wiki.qemu.org/Documentation/Platforms)
    with relative ease.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
- en: However, architecture support is just part of the story. The other big topic
    is how well a certain platform or, more specifically, an ABI, is supported. In
    this regard, we put a lot of effort to be able to describe in a declarative way
    all the properties of an ABI. Our [ABI description format](https://github.com/revng/revng/tree/f297712/share/revng/abi)
    is general enough that supporting new ABIs will be quite easy.
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
- en: '**Status as of today**: we support x86, x86-64, ARM, AArch64, MIPS, and s390x
    to various degrees of maturity. In terms of binary formats, we support ELF, PE/COFF
    and Mach-O. We can also import from `.idb`, DWARF debug info and PDB debug info.
    We performed most QA on Linux x86-64 binaries, all the rest needs additional QA.'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
- en: If you have a specific interest in some platform (and a budget), [we're happy
    to talk `:)`](mailto:info@rev.ng).
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
- en: 'Track the [roadmap item #58](/roadmap#feature-58) for further QA on more platforms.'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
- en: '[](#extensibility)Extensibility'
  id: totrans-split-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: rev.ng aspires to become the go-to framework for reverse engineering tools.
    For this reason, the whole project is open source, with the exception of our interactive
    UI.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
- en: rev.ng is also easily scriptable. Our project file, [the model](https://docs.rev.ng/user-manual/model/),
    is just a YAML document. Here's an example with some comments.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-split-91
  prefs: []
  type: TYPE_PRE
- en: The docs offers a [step-by-step tutorial](http://docs.rev.ng/user-manual/model-tutorial/)
    to understand the model above.
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
- en: Basically, if you can parse JSON or YAML, you can script rev.ng.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
- en: We plan to offer easy-to-use wrappers for Python and TypeScript to easily make
    changes and obtain artifacts (e.g., decompiled code or disassembly).
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Example usage in Python:'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-split-96
  prefs: []
  type: TYPE_PRE
- en: 'Example usage in TypeScript:'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-split-98
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  id: totrans-split-99
  prefs: []
  type: TYPE_PRE
- en: Finally, since we use extensively use LLVM IR as our main internal representation,
    you can exploit many many tool in its ecosystem. For instance, you could use [KLEE](https://klee.github.io/)
    to perform symbolic execution or [SanitizerCoverage](https://clang.llvm.org/docs/SanitizerCoverage.html)
    + [libFuzzer](https://llvm.org/docs/LibFuzzer.html) (or other tools) to perform
    coverage-guided fuzzing. Also, since the output of our decompiler is valid C,
    we've also been able to play around with [clang static analyzer](https://clang-analyzer.llvm.org/)
    to look for common vulnerabilities directly on the decompiled code. But this probably
    deserves a blog post on its own.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
- en: '**Status as of today**: we have Python and TypeScript wrappers to manipulate
    the model, but not an easy way to run analyses and fetch artifacts. [Roadmap item
    #17](/roadmap#feature-17) tracks building a full fledged Python client.'
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
- en: '[](#4-open-source-vs-free-to-use-vs-premium)4\. Open source vs free-to-use
    vs premium'
  id: totrans-split-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a quick comparison of the various components of rev.ng take a look at the
    [feature comparison page](/pricing).
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Very briefly:'
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
- en: The rev.ng framework is fully open source. You can decompile anything you want
    from the CLI.
  id: totrans-split-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The UI will be available in the following forms:'
  id: totrans-split-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: free to use in the cloud for public projects;
  id: totrans-split-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: available through a subscription in the cloud for private projects;
  id: totrans-split-108
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: available at a cost as a fully standalone, fully offline application.
  id: totrans-split-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[](#revng-in-the-cloud)rev.ng in the cloud?'
  id: totrans-split-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yes.
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
- en: You can create a project through [rev.ng Hub](https://hub.rev.ng/) and invite
    collaborators.
  id: totrans-split-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The UI runs in the browser.
  id: totrans-split-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The backend runs in our cloud.
  id: totrans-split-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here''s the deal:'
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
- en: Public projects are free. If you're OK with having your project file public,
    you can use the cloud version of rev.ng for free, UI included.
  id: totrans-split-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Private projects require a subscription.
  id: totrans-split-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We're also willing to discuss installing a private instance of the rev.ng cloud
    service on premise, if you're into kubernetes. [Interested?](mailto:info@rev.ng)
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned above, we will also offer a fully standalone version of the UI
    for which you can buy a regular license and run it wherever you prefer.
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
- en: '[](#5-the-roadmap)5\. The roadmap'
  id: totrans-split-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: rev.ng is a complex project and getting to the 1.0 version is going to take
    quite some effort. But don't worry, we have a detailed roadmap on how to get there.
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
- en: 'The roadmap is divided into 4 tiers:'
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
- en: 'Tier 1 (done): alpha version, demo to friends.'
  id: totrans-split-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Tier 2 (starts today): beta version, give access to the cloud version to newsletter
    subscribers.'
  id: totrans-split-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Tier 3 (to come): open beta.'
  id: totrans-split-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Tier 4 (to come): 1.0 release.'
  id: totrans-split-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Want to know more? Check out the [detailed roadmap page](/roadmap).
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
- en: '[](#6-how-to-get-in-touch-and-stay-up-to-date)6\. How to get in touch and stay
    up to date'
  id: totrans-split-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We publish and can be contacted in several ways:'
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
- en: '[X/Twitter](https://twitter.com/_revng): frequent news about development and
    major announcements.'
  id: totrans-split-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Discord](https://discord.gg/wEQtgKJxcX): random chat and real-time discussions
    with the dev team.'
  id: totrans-split-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Discourse](https://discuss.rev.ng/): a forum for users to get support and
    report bugs.'
  id: totrans-split-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub](https://github.com/revng): where all our open source development takes
    place, please open an issue if you''re trying to extend rev.ng.'
  id: totrans-split-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Monthly newsletter](/newsletter-subscribe): subscribe to participate in the
    closed beta and get monthly news about the project advancements.'
  id: totrans-split-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[E-mail](mailto:info@rev.ng): want some privacy? Drop us an e-mail.'
  id: totrans-split-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That's all for today. Stay tuned for more! üöÄ
  id: totrans-split-136
  prefs: []
  type: TYPE_NORMAL
