- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:30:06'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Ruff v0.3.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://astral.sh/blog/ruff-v0.3.0](https://astral.sh/blog/ruff-v0.3.0)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Ruff v0.3.0](https://github.com/astral-sh/ruff) is available now! Install
    it from [PyPI](https://pypi.org/project/ruff/), or your package manager of choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As a reminder: **Ruff is an extremely fast Python linter and formatter, written
    in Rust.** Ruff can be used to replace Black, Flake8 (plus dozens of plugins),
    isort, pydocstyle, pyupgrade, and more, all while executing tens or hundreds of
    times faster than any individual tool.'
  prefs: []
  type: TYPE_NORMAL
- en: In October, we announced the [production-ready Beta of Ruff's formatter](https://astral.sh/blog/the-ruff-formatter).
    Since then, we've focused on improving compatibility between the linter and formatter,
    fixing deviations from Black, and implementing Ruff's 2024.2 formatting style.
    This release promotes the formatter to stable and ships Ruff's 2024.2 style guide.
  prefs: []
  type: TYPE_NORMAL
- en: The Ruff 2024.2 style guide [#](#the-ruff-20242-style-guide)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The new style guide follows the principle that Ruff is designed as a drop-in
    replacement for Black. It is heavily inspired by Black's 2024 stable style guide
    (released as part of [Black 24.1.0](https://github.com/psf/black/releases/tag/24.1.0)).
    We'd like to offer our thanks to the Black maintainers for their fantastic work
    leading the code style discussions and defining their new style guide.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of this section covers the highlights of Ruff's new style guide. Head
    to the [release](https://github.com/astral-sh/ruff/releases/tag/v0.3.0) for a
    detailed list of all style changes.
  prefs: []
  type: TYPE_NORMAL
- en: Prefer wrapping an assignment's value [#](#prefer-wrapping-an-assignments-value)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Until now, Ruff preferred breaking an assignment's target over its value. The
    new style favors wrapping the assignment value before the assignment target or
    its type annotation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parenthesize multiple context managers in `with` statements [#](#parenthesize-multiple-context-managers-in-with-statements)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, Ruff formatted context managers in `with` statements on a single
    line, even if they exceeded the configured line length. Ruff now parenthesizes
    long context managers when targeting Python 3.9 or later, and wraps them across
    multiple lines.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: More condensed formatting of functions and classes with a dummy body [#](#more-condensed-formatting-of-functions-and-classes-with-a-dummy-body)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new style reduces the vertical space for dummy implementations by collapsing
    the ellipsis (`...`) onto the same line. Blank lines between dummy function definitions
    are also now optional.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Improved multiline string formatting [#](#improved-multiline-string-formatting)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the 2023 style guide, Ruff always indented multiline strings, even if they
    were the only arguments to a function call. The new style guide avoids indenting
    multiline strings if the call's opening parentheses and the string's quotes are
    on the same line, reducing vertical space.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Range Formatting [#](#range-formatting)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ruff v0.2.1 added support for range formatting. IDEs use range formatting to
    limit formatting to a selected range (known as *Format Selection* in VS Code)
    or to [modified lines](https://code.visualstudio.com/updates/v1_49#_only-format-modified-text)
    based on version control information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Restricting formatting to modified lines is especially useful if:'
  prefs: []
  type: TYPE_NORMAL
- en: Your project is incrementally adopting a formatter; or,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You're working on a project that doesn't use standardized formatting, but you'd
    like to use Ruff to format a specific region of code to which you've made changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: </static/WEBM/v0.3/format_modified_lines.webm>
  prefs: []
  type: TYPE_NORMAL
- en: The user adds a new argument to an existing function call. VS Code reformats
    the file on save using Ruff to format the call expression.
  prefs: []
  type: TYPE_NORMAL
- en: In the above video, VS Code reformats the modified function call, but leaves
    the `__init__` function definition unaltered, since it wasn't changed by the user.
  prefs: []
  type: TYPE_NORMAL
- en: To enable formatting of modified lines in VS code, set `editor.formatOnSaveMode`
    to `"modificationsIfAvailable"`.
  prefs: []
  type: TYPE_NORMAL
- en: f-string placeholder formatting [#](#f-string-placeholder-formatting)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ruff v0.2.2 added support for formatting within f-strings (in `--preview`).
    You no longer need to manually format expressions inside placeholders; Ruff can
    take care of it for you.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We're collaborating with Black to define a standardized style for f-string formatting.
    Please [share your feedback](https://github.com/astral-sh/ruff/discussions/9785)
    and help us shape f-string formatting going forward.
  prefs: []
  type: TYPE_NORMAL
- en: Lint for invalid formatter suppression comments [#](#lint-for-invalid-formatter-suppression-comments)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ruff's formatter has stricter requirements on [formatter suppression comment](https://docs.astral.sh/ruff/formatter/#format-suppression)
    placement than Black, motivated in favor of predictable formatting.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the difference has confused users, since it was unclear *why* Ruff
    ignored specific suppression comments that Black did not. Ruff v0.3.0 ships with
    the new lint rule [`RUF028`](https://docs.astral.sh/ruff/rules/RUF028), which
    identifies invalid formatter suppression comments; that is, `# fmt: off` comments
    that Ruff''s formatter will not respect.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`RUF028` generates a diagnostic for the use of `# fmt: off` on the above snippet,
    because Ruff (unlike Black) doesn''t support `# fmt: off` inside expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Thank you! [#](#thank-you)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thank you to everyone that provided feedback regarding the formatter and other
    changes included in Ruff's `--preview` mode, and especially, to our contributors.
    It's an honor building Ruff with you!
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: View the full changelog on [GitHub](https://github.com/astral-sh/ruff/releases/tag/v0.3.0).
  prefs: []
  type: TYPE_NORMAL
- en: Read more about [Astral](https://astral.sh/about) — the company behind Ruff.
  prefs: []
  type: TYPE_NORMAL
