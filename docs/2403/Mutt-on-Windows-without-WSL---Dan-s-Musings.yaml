- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:40:33'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Mutt on Windows without WSL — Dan's Musings
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://blog.djhaskin.com/blog/mutt-on-windows-without-wsl/](https://blog.djhaskin.com/blog/mutt-on-windows-without-wsl/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-split-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I have this weird hobby of trying to get good unix tools to run natively on
    Windows. I find this is the most efficient use of my laptop's resources, and therefore
    the nicest experience. WSL is nice, but it takes up a lot of RAM on my system.
    I prefer to use [MSYS2](https://www.msys2.org/docs/what-is-msys2/). Getting unix
    tools to work correctly under MSYS2 is a challenge, as we'll see, and for me,
    that's part of the fun.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These prerequisites are not just to use mutt, but to use msys2 successfully
    in any capacity for development or other work. These are the steps I follow to
    maximize my chances of success with msys2.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Msys2 needs to be installed. I like to use [scoop](https://scoop.sh/) to install
    it (and everything else on Windows, preferably). Just be sure to run `scoop hold
    msys2`. You do NOT want scoop reinstalling msys2 every half second for "updates"
    when you can just run `pacman -Syu` inside msys2 to get all the needed updates
    from there.
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There should be no spaces in your USERPROFILE path. I know this is hard, but
    it's worth it. I usually do this by creating a local user named `nospaces` or
    something, logging in to that user, and only THEN logging into my Microsoft Windows
    account after my `C:\Users\<me>` folder has been created, etc.
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your MSYS2 installation should have this as its `/etc/fstab`, as the One True
    Way of ensuring your MSYS2 home directory is also your `USERPROFILE` directory:'
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
- en: If you used scoop to install msys2, you can put the above file under `C:\Users\<you>\scoop\apps\msys2\current\etc\fstab`
    and it should work.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: Instructions
  id: totrans-split-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From a mingw64 MSYS2 prompt, type the following to install gpg, mux and msmtp:'
  id: totrans-split-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
- en: 'We configure mutt as per usual, but I found that mutt can''t send emails for
    some reason. So configure it to use [msmtp](https://marlam.de/msmtp/) for that
    part, and then everything works. Here is my gmail config (found under `~/.mutt/home.account`):'
  id: totrans-split-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
- en: In this file, I use a shell script called [multipass](https://git.sr.ht/~skin/dotfiles/tree/main/item/dot-local/bin/multipass)
    that looks up passwords from [KeePassXC](https://keepassxc.org/) using [git-credential-keepassxc](https://github.com/Frederick888/git-credential-keepassxc).
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: We also see that I use `msmtp` configured to send using the home account.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is my `msmtp` config:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
- en: The `msmtp` program has to use a [*different* multipass](https://git.sr.ht/~skin/dotfiles/tree/main/item/Windows/Executables/multipass.bat)
    because it is "Windows aware" and NOT "msys2 aware", having not been compiled
    with [the "msys2" subsystem](https://www.msys2.org/wiki/MSYS2-introduction/),
    but rather with the "mingw64" subsystem. While we're on that subject, that file
    (above) must be written to `~/msmtprc.txt` on Windows, another gotcha I had. It's
    this back-and-forth windows-not-windows fence upon which msys2 teeters that makes
    it so important to have the msys2 home directory the same as the "windows" home
    directory. I find it makes things less confusing at times.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, here is my `~/.muttrc`:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
- en: 'Anyway, then I''m able to fire up and use mutt in the msys2 mingw64 terminal:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
