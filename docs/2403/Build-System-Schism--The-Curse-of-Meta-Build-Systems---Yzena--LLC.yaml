- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 12:29:40'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 12:29:40
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Build System Schism: The Curse of Meta Build Systems | Yzena, LLC'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建系统分裂：元构建系统的诅咒 | Yzena, LLC
- en: 来源：[https://yzena.com/2024/03/build-system-schism-the-curse-of-meta-build-systems/](https://yzena.com/2024/03/build-system-schism-the-curse-of-meta-build-systems/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://yzena.com/2024/03/build-system-schism-the-curse-of-meta-build-systems/](https://yzena.com/2024/03/build-system-schism-the-curse-of-meta-build-systems/)
- en: This post is meant to be informative, but it does have an ad at the end, which
    will be clearly marked. You have been warned!
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章旨在提供信息，但最后确实有一个广告，将明确标记。你已经被警告了！
- en: Introduction[#](#introduction)
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引言[#](#introduction)
- en: '[First there was nothing&mldr;](https://www.gocomics.com/calvinandhobbes/1987/12/06)'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[起初什么都没有&mldr;](https://www.gocomics.com/calvinandhobbes/1987/12/06)'
- en: '&mldr;then there was `make`.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: '&mldr;然后就有了`make`。'
- en: '[As the legend goes](https://en.wikipedia.org/wiki/Make_(software)#Origin),
    [Stuart Feldman](https://en.wikipedia.org/wiki/Stuart_Feldman) was working at
    Bell Labs, and he had a problem.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[传说中](https://zh.wikipedia.org/wiki/Make_(软件)#起源)，[Stuart Feldman](https://zh.wikipedia.org/wiki/斯图尔特·费尔德曼)在贝尔实验室工作时遇到了一个问题。'
- en: Feldman spent part of an evening struggling with an executable that was not
    updated from changed source files. The next morning, [Steve Johnson](https://en.wikipedia.org/wiki/Stephen_C._Johnson)
    just happened to storm into his office to rant about the very same problem.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: Feldman花了一个晚上的时间，努力解决一个未从更改后的源文件更新的可执行文件的问题。第二天早上，[Steve Johnson](https://zh.wikipedia.org/wiki/史蒂芬·C·约翰逊)恰好冲进他的办公室抱怨正好遇到了同样的问题。
- en: With his previous evening in memory, and a respected colleague wishing for something
    better, Feldman thought, ‘You know, I could solve this with a tool.’
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有了他前一晚的记忆，还有一位尊敬的同事希望有更好的东西，费尔德曼想到了，“你知道，我可以用一个工具来解决这个问题。”
- en: 'As it turns out, Stuart Feldman sat down and did some *design*:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如事实所证明的那样，Stuart Feldman坐下来做了一些*设计*：
- en: It began with an elaborate idea of a dependency analyzer, boiled down to something
    much simpler, and turned into Make that weekend.
  id: totrans-split-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它始于一个复杂的依赖分析器的想法，简化为一些更简单的东西，然后在那个周末演变成了Make。
- en: We should all be grateful for that bit of design; I just wish he had gone further
    and not used tabs.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都应该感激那一点设计；我只希望他能更进一步，不要使用制表符。
- en: Or, you know, just did the work to update ***A DOZEN USERS***!
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你知道，只是更新***十几个用户***的工作！
- en: 'No, I’m not kidding:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不，我不是在开玩笑：
- en: Why the tab in column 1? Yacc was new, Lex was brand new. I hadn’t tried either,
    so I figured this would be a good excuse to learn. After getting myself snarled
    up with my first stab at Lex, I just did something simple with the pattern newline-tab.
    It worked, it stayed. And then a few weeks later I had a user population of about
    a dozen, most of them friends, and I didn’t want to screw up my embedded base.
    The rest, sadly, is history.
  id: totrans-split-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为什么在第一列使用制表符？Yacc是新的，Lex是全新的。我两者都没尝试过，所以我觉得这是一个很好的学习借口。在第一次尝试Lex时遇到了麻烦后，我就简单地使用了模式newline-tab。它有效，就一直沿用下来了。然后几周后，我的用户群大约有十几个，大部分是朋友，我不想搞砸我的嵌入式基础。剩下的，可惜的是历史。
- en: 'Two lessons here:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个教训：
- en: Simple implementations lead to disasters, and
  id: totrans-split-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简单的实现导致灾难，而
- en: Breaking compatibility is sometimes necessary; do it as early as possible.
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打破兼容性有时是必要的；尽早执行。
- en: Nevertheless, for a while, everyone was happy!
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一段时间，每个人都很开心！
- en: 'About the time of the [launch of Linux](https://en.wikipedia.org/wiki/History_of_Linux),
    David Mackenzie ran into a problem with Make: he needed Turing-completeness.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 关于[Linux发布](https://zh.wikipedia.org/wiki/Linux历史)的时间，David Mackenzie在使用Make时遇到了问题：他需要图灵完备性。
- en: See, Make was designed to have a list of targets, or things to build, and that’s
    all the targets you get, modulo [suffix rules](https://en.wikipedia.org/wiki/Make_(software)#Suffix_rules)
    and [pattern rules](https://en.wikipedia.org/wiki/Make_(software)#Pattern_rules).
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 见，Make的设计初衷是有一个目标列表或要构建的东西，这就是你得到的所有目标，除了[后缀规则](https://zh.wikipedia.org/wiki/Make#后缀规则)和[模式规则](https://zh.wikipedia.org/wiki/Make#模式规则)。
- en: Suffix rules and pattern rules were probably added just to remove repetition;
    programmers *hate* repetition.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 后缀规则和模式规则可能是为了消除重复而添加的；程序员*讨厌*重复。
- en: But what if you didn’t know what targets you needed until after some analysis?
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你在进行分析之后还不知道需要哪些目标呢？
- en: 'Mackenzie had a crucial decision to make (pun intended): would he start over
    *without* Make, or would he build something on top of Make?'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: Mackenzie面临一个关键的决定（刻意玩梗）：他会重新开始*不用*Make，还是会在Make的基础上构建新东西？
- en: Well, I guess that something made him loathe to give up Make because he chose
    the latter and made [Autoconf](https://en.wikipedia.org/wiki/Autoconf).
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: I have no idea what it was, so I can only assume that since 1976, the legends
    of Bell Labs were already legends, and their software considered untouchable.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: It’s not, by the way. And I’m generally a fan of the [Unix Philosophy](https://en.wikipedia.org/wiki/Unix_philosophy).
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: Whatever the case, this is the decision that created the **Build System Schism**.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: The Build System Schism is the separation between “build systems,” which includes
    things like Make and [Ninja](https://en.wikipedia.org/wiki/Ninja_(build_system)),
    and “meta build systems,” which includes things like Autoconf, [Automake](https://en.wikipedia.org/wiki/Automake),
    [CMake](https://en.wikipedia.org/wiki/CMake), [qmake](https://en.wikipedia.org/wiki/Qmake),
    and [Meson](https://en.wikipedia.org/wiki/Meson_build_system).
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: What’s the difference?" you may ask.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: To be overly concise, meta build systems build builds, and build systems build.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: To be more understandable, meta build systems generate files that tell build
    systems how to execute the build, and build systems execute that build.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: To be perfectly precise, let me describe the process.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: Say I have a [project that uses Make](https://git.gavinhoward.com/gavin/bc),
    but it has some build options. These build options could require anything, such
    as *not* compiling certain files in certain cases.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s say that I want to have my software build portably on any POSIX system,
    so I need to use [POSIX Make](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html).
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Now I have a problem: POSIX Make is *incredibly* limited; it is not [Turing-complete](https://stackoverflow.com/questions/7284/what-is-turing-complete).'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: “Why is that a problem, Gavin?”
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: Because many times, setting up a build requires full Turing-completeness.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: This post is not the place to explain why Turing-completeness matters, but it
    is sufficient to say that there is *no* substitute for Turing-completeness because
    any substitute becomes Turing-completeness by definition.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: Tune in next week for a deep dive into Turing-completeness, as well as what
    it means for build systems!
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: So I need something *on top of* POSIX Make, something portable.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: Well, CMake is portable, so let’s say I use that.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: That project uses a custom shell script, not a “real” meta build system like
    CMake, but the example still holds.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: I write a bunch of code in CMake that tells it what targets to add to the build
    based on the build options.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: This is possible in CMake because it is Turing-complete.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: And if I remember correctly, CMake wasn’t even *supposed* to be Turing-complete!
    That’s why its files are called `CMakeLists.txt`; it was just supposed to be a
    list.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, I don’t have the source, so if anyone on Hacker News or Reddit
    does, please tell me; I’ll add it.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: 'So a build would look like this:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: Run CMake, telling it the configuration to use.
  id: totrans-split-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run Make or Ninja to do the actual build.
  id: totrans-split-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Barrier[#](#the-barrier)
  id: totrans-split-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: “That seems simple enough, Gavin. What’s the problem?”
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that the list of items to build cannot change!
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: Say you add a new source file. Wouldn’t it be great if your build system just
    picked it up?
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: Alas, it cannot; the list of stuff to build is passed from the meta build system
    to the build system, usually by fiat.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: The barrier between step 1 and step 2 is essentially unbreakable since it is
    the interface between two separate programs.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: In fact, the only way to break it is to run the meta build system on every build.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: And in that case, why not just make one build system that does both?
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: End-to-End Build Systems[#](#end-to-end-build-systems)
  id: totrans-split-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: However, there seems to be some wind shifting; there is a new type of build
    system coming to town.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: These build systems, which I call “end-to-end build systems,” or E2E build systems,
    to distinguish from “regular” build systems, can not only generate the list of
    items to build, they can execute the build.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: One example is [`build2`](https://build2.org/).
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: The creator of `build2` is [borisk](https://lobste.rs/~borisk), from whom I
    shamelessly stole the [idea for this post](https://lobste.rs/s/i2qnqj/why_cmake_sucks_2021#c_ltemdq).
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: borisk, if this post is not sufficient, feel free to tell me!
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
- en: In somet like `build2`, you can specify how to search for source files and how
    to build ones that are found, and it will do that search on every build.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of this is that if you add another source file, *you don’t have
    to change your build!* An E2E build system will detect the new file and build
    it.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, while using CMake, I either have to change one or more `CMakeLists.txt`
    files or run CMake manually.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: Removing that barrier improves the user experience.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
- en: Building Better Build Systems[#](#building-better-build-systems)
  id: totrans-split-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'But there is a further advantage of E2E build systems: dynamic targets.'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
- en: Generally, when you specify a target, you explicitly write out its dependencies
    in some way, either explicitly or by passing a list of dependencies in some form.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
- en: This is good, but “good” is not good enough. I want [UNLIMITED POWAAAAHHH!](https://star-wars-memes.fandom.com/wiki/Unlimited_power!)
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: So what if you didn’t need to specify all of the dependencies of a target? What
    if you could find them during the build itself using the source code itself?
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
- en: At this point, *so* many people are laughing at me. “But Gavin, we already have
    that in `<language>`.”
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
- en: Yes, you do because `<language>` has a built-in build system and good module
    support.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
- en: As an example, if you run `go build` on a Go project, it will figure out what
    is imported and needs to be built, and then it will just do it. Add an `import`
    statement, and the next build will detect that and build the new import.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
- en: Piece of cake, right?
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
- en: Well, this is still a new concept for the C and C++ world. In fact, generalizing
    it would probably sound foreign to a lot of languages that *do* have this.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
- en: The only E2E build systems that I know of that can do this in a general way
    are [Shake](https://shakebuild.com/) and [Buck2](https://buck2.build/).
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道的唯一的E2E构建系统，可以以一种普遍的方式做到这一点，是[Shake](https://shakebuild.com/)和[Buck2](https://buck2.build/)。
- en: '`build2` might, but I haven’t dug deep enough to check.'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`build2`可能会，但我还没有深入研究。'
- en: Shake is a good idea ahead of its time that was also hampered by the unfortunate
    decision to write it in Haskell and *adopt Haskell as its build language!*
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: Shake是一个超前于其时代的好主意，但也受到用Haskell编写和*采用Haskell作为其构建语言*的不幸决定的阻碍。
- en: Yikes.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕。
- en: But never mind that; Buck2 is literally built by [Neil Mitchell](https://neilmitchell.blogspot.com/)
    the same guy that built Shake. And he used the same ideas.
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: 但是不要紧，Buck2就是由[Neil Mitchell](https://neilmitchell.blogspot.com/)构建的，他也使用了相同的想法。
- en: What ideas did Neil use?
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: Neil使用了什么想法？
- en: 'Well, he [wrote them down](https://neilmitchell.blogspot.com/2021/09/reflecting-on-shake-build-system.html),
    but I think a better introduction is perhaps one of my Top 5 Best Papers: [“Build
    Systems à la Carte.”](https://www.microsoft.com/en-us/research/uploads/prod/2018/03/build-systems.pdf)'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，他们[写下了](https://neilmitchell.blogspot.com/2021/09/reflecting-on-shake-build-system.html)，但我认为更好的介绍也许是我的五大最佳论文之一：[“Build
    Systems à la Carte.”](https://www.microsoft.com/en-us/research/uploads/prod/2018/03/build-systems.pdf)
- en: '**tl;dr**: Build systems can be classified by the following six axes:'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**tl;dr**: 构建系统可以按照以下六个轴分类：'
- en: '**Persistent build information**'
  id: totrans-split-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久化构建信息**'
- en: 'Example: Make uses file modification times.'
  id: totrans-split-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：Make使用文件修改时间。
- en: Another option is hashing files.
  id: totrans-split-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一种选择是对文件进行哈希。
- en: '**Scheduler**'
  id: totrans-split-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调度器**'
- en: Make is topological.
  id: totrans-split-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Make是拓扑的。
- en: Shake has a suspending scheduler.
  id: totrans-split-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shake有一个挂起调度器。
- en: Bazel has a restarting scheduler.
  id: totrans-split-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bazel有一个重启调度器。
- en: '**Dependencies**'
  id: totrans-split-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖关系**'
- en: These are either static or dynamic.
  id: totrans-split-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些要么是静态的，要么是动态的。
- en: '**Minimal**'
  id: totrans-split-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小化**'
- en: Does the build system do the minimum possible?
  id: totrans-split-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建系统是否尽可能地做到最少？
- en: '**Early Cutoff**'
  id: totrans-split-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**早期截断**'
- en: If a target is updated from a dependency, and the update didn’t change anything,
    can the build system forgo building things that depend on that target?
  id: totrans-split-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果从依赖项更新目标，并且更新未更改任何内容，那么构建系统可以放弃构建依赖于该目标的东西吗？
- en: '**Cloud**'
  id: totrans-split-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云**'
- en: Can the build system cache stuff in the cloud and use items in that cache?
  id: totrans-split-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建系统可以在云中缓存东西并使用该缓存中的项目吗？
- en: You want a **minimal** build system with a **suspending scheduler**, **dynamic
    dependencies**, **early cutoff**, and **cloud caching**.
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望一个**最小化**的构建系统，具有**挂起调度器**、**动态依赖**、**早期截断**和**云缓存**。
- en: Persistent build information doesn’t matter as long as it provides the desired
    features, including minimal builds.
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: 只要提供所需的功能，包括最小化构建，持久化构建信息就不重要。
- en: 'Why do you want those things? Here’s why:'
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你为什么想要这些东西？这是为什么：
- en: '**Minimal**: This is obvious; why would you want your build to do spurious
    things?'
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**最小化**: 这是显而易见的；为什么你希望你的构建做出多余的事情？'
- en: '**Suspending Scheduler**: For this one, your options are essentially a normal
    scheduler (topological), restarting, or suspending.'
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**挂起调度器**: 对于这一点，你的选择基本上是普通调度器（拓扑）、重启或挂起。'
- en: If you have a normal scheduler, you cannot have dynamic dependencies.
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个普通调度器，你无法拥有动态依赖关系。
- en: 'And if you have Turing-completeness, a suspending scheduler is easy to turn
    into a restarting scheduler:'
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果具有图灵完备性，则挂起调度器很容易转换为重启调度器：
- en: '[PRE0]'
  id: totrans-split-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: But the reverse is not possible without repeating work, which means that the
    build system cannot be **minimal** with a restarting scheduler.
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
  zh: 但是反过来则不可能，没有重复工作，这意味着构建系统无法使用具有重启调度器的**最小化**。
- en: '**Dynamic Dependencies**: Okay, you may not be convinced about dynamic dependencies
    yet. But if you use Rust and Go, or any language with a module system better than
    *header files*, you are using dynamic dependencies.'
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**动态依赖**: 好吧，你可能还不相信动态依赖关系。但是如果你使用Rust和Go，或者任何具有比*头文件*更好模块系统的语言，你正在使用动态依赖。'
- en: And generalized dynamic dependencies could add such a system to C and C++.
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 广义的动态依赖关系可以为C和C++增加这样一个系统。
- en: In fact, I suspect that dynamic dependencies are *required* for the new [C++
    modules](https://en.cppreference.com/w/cpp/language/modules).
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我怀疑动态依赖对新的[C++模块](https://en.cppreference.com/w/cpp/language/modules)是*必需*的。
- en: Why are they needed? Because dependencies are specified in the source code.
    Essentially, you have to “build” the source to figure out what it depends on.
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么它们是必需的？因为依赖关系在源代码中被指定。实质上，你必须“构建”源代码以弄清它依赖于什么。
- en: And since you build the source to get its dependencies, you might as well store
    that somewhere. And when you do, your build system has to use that in the next
    build.
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你构建源代码以获取它的依赖项，你也可以将其存储在某个地方。当你这样做时，你的构建系统必须在下一次构建中使用它。
- en: 'This means the build system has to:'
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着构建系统必须：
- en: Figure out that the target exists.
  id: totrans-split-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弄清楚目标是否存在。
- en: Check for dependencies from the previous build.
  id: totrans-split-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查前一次构建的依赖关系。
- en: Add those dependencies to the target *after it has been created*.
  id: totrans-split-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这些依赖项添加到目标*创建后*。
- en: That last step is the dynamic part; the user probably didn’t list the dependencies
    in the build files, so when the build system parsed the build files, it had no
    idea those dependencies existed and created the target without them.
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是动态的部分；用户可能没有在构建文件中列出依赖项，因此当构建系统解析构建文件时，它不知道这些依赖项存在，并且在没有它们的情况下创建了目标。
- en: “But it could add them while parsing the build files!”
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
  zh: “但是它可以在解析构建文件时添加它们！”
- en: Sure, but that is special code while dynamic dependencies are more general.
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，但那是特殊代码，而动态依赖关系更加通用。
- en: In fact, build systems *without* dynamic dependencies already do this; in the
    words of Neil Mitchell,
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，构建系统*没有*动态依赖关系已经做到了这一点；用尼尔·米切尔的话来说，
- en: Most build systems start with a static graph, and then, realising that can’t
    express the real world, start hacking in an unprincipled manner. The resulting
    system becomes a bunch of special cases.
  id: totrans-split-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大多数构建系统从静态图开始，然后意识到无法表达真实世界，开始以无原则的方式进行黑客攻击。结果系统成为一堆特殊情况。
- en: 'An example: [Ninja and header files](https://ninja-build.org/manual.html#ref_headers).'
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：[Ninja和头文件](https://ninja-build.org/manual.html#ref_headers)。
- en: Hacking in an unprincipled manner is not great, and it will mean that *you*,
    as the user, [have to do some hacking too](https://github.com/ninja-build/ninja/issues/1265).
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以无原则的方式进行黑客攻击并不好，这意味着*你*作为用户，[也必须进行一些黑客攻击](https://github.com/ninja-build/ninja/issues/1265)。
- en: In other words, dynamic dependencies are essential to keep a build system easy
    to use. Trust me, you want them.
  id: totrans-split-130
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，动态依赖关系对于保持构建系统易于使用至关重要。相信我，你会想要它们。
- en: Anyway, where were we? Oh, yes&mldr;
  id: totrans-split-131
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，我们在哪里？哦，是的&mldr;
- en: '**Early Cutoff**: If your build system can finish faster, why not?'
  id: totrans-split-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**早期截断**：如果你的构建系统可以更快地完成，为什么不呢？'
- en: '**Cloud Caching**: If your build system already built something you need, but
    for someone else, why not use it?'
  id: totrans-split-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**云缓存**：如果你的构建系统已经构建了你需要的东西，但是对于其他人，为什么不使用它呢？'
- en: So there are five features of build systems that you want, and the harsh truth
    is that meta build systems ***cannot*** have some of them! Some of these things
    are *only* available on end-to-end build systems.
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
  zh: 所以有五个构建系统的特性是你想要的，残酷的事实是，元构建系统***无法***拥有其中一些！这些事情有些只能在端到端的构建系统上使用。
- en: This is the curse of meta build systems; they will forever be hobbled and hampered
    from reaching the full potential of build systems.
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是元构建系统的诅咒；它们将永远无法达到构建系统的全部潜力。
- en: So next time you are looking for a build system, make sure you check if it is
    a meta build system. If it is, keep looking; there are better options.
  id: totrans-split-136
  prefs: []
  type: TYPE_NORMAL
  zh: 所以下次你寻找构建系统时，请确保你检查它是否是一个元构建系统。如果是，继续寻找；还有更好的选择。
- en: Turing-Completeness[#](#turing-completeness)
  id: totrans-split-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图灵完备性[#](#turing-completeness)
- en: 'But there is one axis that even “Build Systems à la Carte” missed: Turing-completeness.'
  id: totrans-split-138
  prefs: []
  type: TYPE_NORMAL
  zh: 但是有一个方面，即使是“按需构建系统”也错过了：图灵完备性。
- en: Unfortunately, this is one axis that most of the best build systems still get
    wrong. Even *Buck2* decided to go with a non-Turing-complete language.
  id: totrans-split-139
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这是大多数最佳构建系统仍然存在问题的一个方面。甚至*Buck2*决定采用非图灵完备语言。
- en: But Turing-completeness and its consequences are so misunderstood that it deserves
    its own post.
  id: totrans-split-140
  prefs: []
  type: TYPE_NORMAL
  zh: 但图灵完备性及其后果被如此误解，以至于它值得有自己的帖子。
- en: Tune in next week!
  id: totrans-split-141
  prefs: []
  type: TYPE_NORMAL
  zh: 下周继续关注！
- en: '* * *'
  id: totrans-split-142
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Below is the ad mentioned at the top!
  id: totrans-split-143
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是顶部提到的广告！
- en: Rig[#](#rig)
  id: totrans-split-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rig[#](#rig)
- en: I have spent more than three years learning about build systems and building
    one.
  id: totrans-split-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我花了三年多时间学习构建系统并构建一个。
- en: It’s called Rig, and it will be publicly released on April 2, 2024.
  id: totrans-split-146
  prefs: []
  type: TYPE_NORMAL
  zh: 它被称为Rig，将于2024年4月2日公开发布。
- en: It will be **minimal** with a **suspending scheduler**, **dynamic dependencies**,
    **early cutoff**, and **cloud caching**. Obviously.
  id: totrans-split-147
  prefs: []
  type: TYPE_NORMAL
  zh: 它将是**极简**的，具有**挂起调度器**，**动态依赖关系**，**早期截断**和**云缓存**。显然。
- en: Look for an announcement on Hacker News, Reddit, and this blog!
  id: totrans-split-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Hacker News、Reddit 和这个博客上寻找公告！
