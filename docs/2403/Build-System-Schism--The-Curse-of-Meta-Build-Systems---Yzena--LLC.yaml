- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:29:40'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Build System Schism: The Curse of Meta Build Systems | Yzena, LLC'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://yzena.com/2024/03/build-system-schism-the-curse-of-meta-build-systems/](https://yzena.com/2024/03/build-system-schism-the-curse-of-meta-build-systems/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This post is meant to be informative, but it does have an ad at the end, which
    will be clearly marked. You have been warned!
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: Introduction[#](#introduction)
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[First there was nothing&mldr;](https://www.gocomics.com/calvinandhobbes/1987/12/06)'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: '&mldr;then there was `make`.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '[As the legend goes](https://en.wikipedia.org/wiki/Make_(software)#Origin),
    [Stuart Feldman](https://en.wikipedia.org/wiki/Stuart_Feldman) was working at
    Bell Labs, and he had a problem.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Feldman spent part of an evening struggling with an executable that was not
    updated from changed source files. The next morning, [Steve Johnson](https://en.wikipedia.org/wiki/Stephen_C._Johnson)
    just happened to storm into his office to rant about the very same problem.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: With his previous evening in memory, and a respected colleague wishing for something
    better, Feldman thought, ‘You know, I could solve this with a tool.’
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: 'As it turns out, Stuart Feldman sat down and did some *design*:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: It began with an elaborate idea of a dependency analyzer, boiled down to something
    much simpler, and turned into Make that weekend.
  id: totrans-split-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We should all be grateful for that bit of design; I just wish he had gone further
    and not used tabs.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: Or, you know, just did the work to update ***A DOZEN USERS***!
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: 'No, I’m not kidding:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Why the tab in column 1? Yacc was new, Lex was brand new. I hadn’t tried either,
    so I figured this would be a good excuse to learn. After getting myself snarled
    up with my first stab at Lex, I just did something simple with the pattern newline-tab.
    It worked, it stayed. And then a few weeks later I had a user population of about
    a dozen, most of them friends, and I didn’t want to screw up my embedded base.
    The rest, sadly, is history.
  id: totrans-split-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Two lessons here:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: Simple implementations lead to disasters, and
  id: totrans-split-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Breaking compatibility is sometimes necessary; do it as early as possible.
  id: totrans-split-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nevertheless, for a while, everyone was happy!
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: 'About the time of the [launch of Linux](https://en.wikipedia.org/wiki/History_of_Linux),
    David Mackenzie ran into a problem with Make: he needed Turing-completeness.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: See, Make was designed to have a list of targets, or things to build, and that’s
    all the targets you get, modulo [suffix rules](https://en.wikipedia.org/wiki/Make_(software)#Suffix_rules)
    and [pattern rules](https://en.wikipedia.org/wiki/Make_(software)#Pattern_rules).
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: Suffix rules and pattern rules were probably added just to remove repetition;
    programmers *hate* repetition.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: But what if you didn’t know what targets you needed until after some analysis?
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Mackenzie had a crucial decision to make (pun intended): would he start over
    *without* Make, or would he build something on top of Make?'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: Well, I guess that something made him loathe to give up Make because he chose
    the latter and made [Autoconf](https://en.wikipedia.org/wiki/Autoconf).
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: I have no idea what it was, so I can only assume that since 1976, the legends
    of Bell Labs were already legends, and their software considered untouchable.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: It’s not, by the way. And I’m generally a fan of the [Unix Philosophy](https://en.wikipedia.org/wiki/Unix_philosophy).
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: Whatever the case, this is the decision that created the **Build System Schism**.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: The Build System Schism is the separation between “build systems,” which includes
    things like Make and [Ninja](https://en.wikipedia.org/wiki/Ninja_(build_system)),
    and “meta build systems,” which includes things like Autoconf, [Automake](https://en.wikipedia.org/wiki/Automake),
    [CMake](https://en.wikipedia.org/wiki/CMake), [qmake](https://en.wikipedia.org/wiki/Qmake),
    and [Meson](https://en.wikipedia.org/wiki/Meson_build_system).
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: What’s the difference?" you may ask.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: To be overly concise, meta build systems build builds, and build systems build.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: To be more understandable, meta build systems generate files that tell build
    systems how to execute the build, and build systems execute that build.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: To be perfectly precise, let me describe the process.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: Say I have a [project that uses Make](https://git.gavinhoward.com/gavin/bc),
    but it has some build options. These build options could require anything, such
    as *not* compiling certain files in certain cases.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s say that I want to have my software build portably on any POSIX system,
    so I need to use [POSIX Make](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html).
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Now I have a problem: POSIX Make is *incredibly* limited; it is not [Turing-complete](https://stackoverflow.com/questions/7284/what-is-turing-complete).'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: “Why is that a problem, Gavin?”
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: Because many times, setting up a build requires full Turing-completeness.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
- en: This post is not the place to explain why Turing-completeness matters, but it
    is sufficient to say that there is *no* substitute for Turing-completeness because
    any substitute becomes Turing-completeness by definition.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: Tune in next week for a deep dive into Turing-completeness, as well as what
    it means for build systems!
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: So I need something *on top of* POSIX Make, something portable.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: Well, CMake is portable, so let’s say I use that.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: That project uses a custom shell script, not a “real” meta build system like
    CMake, but the example still holds.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: I write a bunch of code in CMake that tells it what targets to add to the build
    based on the build options.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: This is possible in CMake because it is Turing-complete.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: And if I remember correctly, CMake wasn’t even *supposed* to be Turing-complete!
    That’s why its files are called `CMakeLists.txt`; it was just supposed to be a
    list.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, I don’t have the source, so if anyone on Hacker News or Reddit
    does, please tell me; I’ll add it.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: 'So a build would look like this:'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: Run CMake, telling it the configuration to use.
  id: totrans-split-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run Make or Ninja to do the actual build.
  id: totrans-split-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Barrier[#](#the-barrier)
  id: totrans-split-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: “That seems simple enough, Gavin. What’s the problem?”
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that the list of items to build cannot change!
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
- en: Say you add a new source file. Wouldn’t it be great if your build system just
    picked it up?
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: Alas, it cannot; the list of stuff to build is passed from the meta build system
    to the build system, usually by fiat.
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
- en: The barrier between step 1 and step 2 is essentially unbreakable since it is
    the interface between two separate programs.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: In fact, the only way to break it is to run the meta build system on every build.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: And in that case, why not just make one build system that does both?
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
- en: End-to-End Build Systems[#](#end-to-end-build-systems)
  id: totrans-split-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: However, there seems to be some wind shifting; there is a new type of build
    system coming to town.
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: These build systems, which I call “end-to-end build systems,” or E2E build systems,
    to distinguish from “regular” build systems, can not only generate the list of
    items to build, they can execute the build.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: One example is [`build2`](https://build2.org/).
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: The creator of `build2` is [borisk](https://lobste.rs/~borisk), from whom I
    shamelessly stole the [idea for this post](https://lobste.rs/s/i2qnqj/why_cmake_sucks_2021#c_ltemdq).
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: borisk, if this post is not sufficient, feel free to tell me!
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
- en: In somet like `build2`, you can specify how to search for source files and how
    to build ones that are found, and it will do that search on every build.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of this is that if you add another source file, *you don’t have
    to change your build!* An E2E build system will detect the new file and build
    it.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, while using CMake, I either have to change one or more `CMakeLists.txt`
    files or run CMake manually.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: Removing that barrier improves the user experience.
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
- en: Building Better Build Systems[#](#building-better-build-systems)
  id: totrans-split-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'But there is a further advantage of E2E build systems: dynamic targets.'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
- en: Generally, when you specify a target, you explicitly write out its dependencies
    in some way, either explicitly or by passing a list of dependencies in some form.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
- en: This is good, but “good” is not good enough. I want [UNLIMITED POWAAAAHHH!](https://star-wars-memes.fandom.com/wiki/Unlimited_power!)
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: So what if you didn’t need to specify all of the dependencies of a target? What
    if you could find them during the build itself using the source code itself?
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
- en: At this point, *so* many people are laughing at me. “But Gavin, we already have
    that in `<language>`.”
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
- en: Yes, you do because `<language>` has a built-in build system and good module
    support.
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
- en: As an example, if you run `go build` on a Go project, it will figure out what
    is imported and needs to be built, and then it will just do it. Add an `import`
    statement, and the next build will detect that and build the new import.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
- en: Piece of cake, right?
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
- en: Well, this is still a new concept for the C and C++ world. In fact, generalizing
    it would probably sound foreign to a lot of languages that *do* have this.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
- en: The only E2E build systems that I know of that can do this in a general way
    are [Shake](https://shakebuild.com/) and [Buck2](https://buck2.build/).
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
- en: '`build2` might, but I haven’t dug deep enough to check.'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
- en: Shake is a good idea ahead of its time that was also hampered by the unfortunate
    decision to write it in Haskell and *adopt Haskell as its build language!*
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
- en: Yikes.
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
- en: But never mind that; Buck2 is literally built by [Neil Mitchell](https://neilmitchell.blogspot.com/)
    the same guy that built Shake. And he used the same ideas.
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
- en: What ideas did Neil use?
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, he [wrote them down](https://neilmitchell.blogspot.com/2021/09/reflecting-on-shake-build-system.html),
    but I think a better introduction is perhaps one of my Top 5 Best Papers: [“Build
    Systems à la Carte.”](https://www.microsoft.com/en-us/research/uploads/prod/2018/03/build-systems.pdf)'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
- en: '**tl;dr**: Build systems can be classified by the following six axes:'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
- en: '**Persistent build information**'
  id: totrans-split-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example: Make uses file modification times.'
  id: totrans-split-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Another option is hashing files.
  id: totrans-split-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scheduler**'
  id: totrans-split-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make is topological.
  id: totrans-split-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Shake has a suspending scheduler.
  id: totrans-split-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bazel has a restarting scheduler.
  id: totrans-split-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependencies**'
  id: totrans-split-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are either static or dynamic.
  id: totrans-split-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimal**'
  id: totrans-split-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the build system do the minimum possible?
  id: totrans-split-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Early Cutoff**'
  id: totrans-split-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a target is updated from a dependency, and the update didn’t change anything,
    can the build system forgo building things that depend on that target?
  id: totrans-split-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud**'
  id: totrans-split-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can the build system cache stuff in the cloud and use items in that cache?
  id: totrans-split-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You want a **minimal** build system with a **suspending scheduler**, **dynamic
    dependencies**, **early cutoff**, and **cloud caching**.
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
- en: Persistent build information doesn’t matter as long as it provides the desired
    features, including minimal builds.
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Why do you want those things? Here’s why:'
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
- en: '**Minimal**: This is obvious; why would you want your build to do spurious
    things?'
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
- en: '**Suspending Scheduler**: For this one, your options are essentially a normal
    scheduler (topological), restarting, or suspending.'
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
- en: If you have a normal scheduler, you cannot have dynamic dependencies.
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
- en: 'And if you have Turing-completeness, a suspending scheduler is easy to turn
    into a restarting scheduler:'
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-112
  prefs: []
  type: TYPE_PRE
- en: But the reverse is not possible without repeating work, which means that the
    build system cannot be **minimal** with a restarting scheduler.
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
- en: '**Dynamic Dependencies**: Okay, you may not be convinced about dynamic dependencies
    yet. But if you use Rust and Go, or any language with a module system better than
    *header files*, you are using dynamic dependencies.'
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
- en: And generalized dynamic dependencies could add such a system to C and C++.
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
- en: In fact, I suspect that dynamic dependencies are *required* for the new [C++
    modules](https://en.cppreference.com/w/cpp/language/modules).
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
- en: Why are they needed? Because dependencies are specified in the source code.
    Essentially, you have to “build” the source to figure out what it depends on.
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
- en: And since you build the source to get its dependencies, you might as well store
    that somewhere. And when you do, your build system has to use that in the next
    build.
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
- en: 'This means the build system has to:'
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
- en: Figure out that the target exists.
  id: totrans-split-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check for dependencies from the previous build.
  id: totrans-split-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add those dependencies to the target *after it has been created*.
  id: totrans-split-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That last step is the dynamic part; the user probably didn’t list the dependencies
    in the build files, so when the build system parsed the build files, it had no
    idea those dependencies existed and created the target without them.
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
- en: “But it could add them while parsing the build files!”
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
- en: Sure, but that is special code while dynamic dependencies are more general.
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
- en: In fact, build systems *without* dynamic dependencies already do this; in the
    words of Neil Mitchell,
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
- en: Most build systems start with a static graph, and then, realising that can’t
    express the real world, start hacking in an unprincipled manner. The resulting
    system becomes a bunch of special cases.
  id: totrans-split-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'An example: [Ninja and header files](https://ninja-build.org/manual.html#ref_headers).'
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
- en: Hacking in an unprincipled manner is not great, and it will mean that *you*,
    as the user, [have to do some hacking too](https://github.com/ninja-build/ninja/issues/1265).
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
- en: In other words, dynamic dependencies are essential to keep a build system easy
    to use. Trust me, you want them.
  id: totrans-split-130
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, where were we? Oh, yes&mldr;
  id: totrans-split-131
  prefs: []
  type: TYPE_NORMAL
- en: '**Early Cutoff**: If your build system can finish faster, why not?'
  id: totrans-split-132
  prefs: []
  type: TYPE_NORMAL
- en: '**Cloud Caching**: If your build system already built something you need, but
    for someone else, why not use it?'
  id: totrans-split-133
  prefs: []
  type: TYPE_NORMAL
- en: So there are five features of build systems that you want, and the harsh truth
    is that meta build systems ***cannot*** have some of them! Some of these things
    are *only* available on end-to-end build systems.
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
- en: This is the curse of meta build systems; they will forever be hobbled and hampered
    from reaching the full potential of build systems.
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
- en: So next time you are looking for a build system, make sure you check if it is
    a meta build system. If it is, keep looking; there are better options.
  id: totrans-split-136
  prefs: []
  type: TYPE_NORMAL
- en: Turing-Completeness[#](#turing-completeness)
  id: totrans-split-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'But there is one axis that even “Build Systems à la Carte” missed: Turing-completeness.'
  id: totrans-split-138
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, this is one axis that most of the best build systems still get
    wrong. Even *Buck2* decided to go with a non-Turing-complete language.
  id: totrans-split-139
  prefs: []
  type: TYPE_NORMAL
- en: But Turing-completeness and its consequences are so misunderstood that it deserves
    its own post.
  id: totrans-split-140
  prefs: []
  type: TYPE_NORMAL
- en: Tune in next week!
  id: totrans-split-141
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-142
  prefs: []
  type: TYPE_NORMAL
- en: Below is the ad mentioned at the top!
  id: totrans-split-143
  prefs: []
  type: TYPE_NORMAL
- en: Rig[#](#rig)
  id: totrans-split-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I have spent more than three years learning about build systems and building
    one.
  id: totrans-split-145
  prefs: []
  type: TYPE_NORMAL
- en: It’s called Rig, and it will be publicly released on April 2, 2024.
  id: totrans-split-146
  prefs: []
  type: TYPE_NORMAL
- en: It will be **minimal** with a **suspending scheduler**, **dynamic dependencies**,
    **early cutoff**, and **cloud caching**. Obviously.
  id: totrans-split-147
  prefs: []
  type: TYPE_NORMAL
- en: Look for an announcement on Hacker News, Reddit, and this blog!
  id: totrans-split-148
  prefs: []
  type: TYPE_NORMAL
