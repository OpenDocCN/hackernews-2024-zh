- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:33:58'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Interlisp-D and MIT CADR Lisp Machine demos for Vancouver IJCAI Conference
    - Tape #1 : Beau Sheil, Johan de Kleer : Free Download, Borrow, and Streaming
    : Internet Archive'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://archive.org/details/xerox-parc_V-141_1](https://archive.org/details/xerox-parc_V-141_1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Simplified ELI5 Abstract*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Imagine a special computer called Xerox D**'
  prefs: []
  type: TYPE_NORMAL
- en: '* **Connected like friends:** It can talk to other computers, just'
  prefs: []
  type: TYPE_NORMAL
- en: like friends share toys.
  prefs: []
  type: TYPE_NORMAL
- en: '* **Fancy screen:** It has a super-clear screen and a mouse for'
  prefs: []
  type: TYPE_NORMAL
- en: pointing, making it fun to use.
  prefs: []
  type: TYPE_NORMAL
- en: '**This computer also teaches you to code**'
  prefs: []
  type: TYPE_NORMAL
- en: '* **Like building blocks:** You can edit code by moving pieces around,'
  prefs: []
  type: TYPE_NORMAL
- en: almost like playing with building blocks.
  prefs: []
  type: TYPE_NORMAL
- en: '* **Changing names:** It''s easy to change the names of parts in your code,
    like renaming your Lego pieces.'
  prefs: []
  type: TYPE_NORMAL
- en: '* **Testing your work:** You can make pictures and test if your code'
  prefs: []
  type: TYPE_NORMAL
- en: changes work as they should.
  prefs: []
  type: TYPE_NORMAL
- en: '**Making Mistakes is Okay!**'
  prefs: []
  type: TYPE_NORMAL
- en: '* **Whoops!** If your code has a boo-boo, the computer shows you where'
  prefs: []
  type: TYPE_NORMAL
- en: the problem is, like a teacher!
  prefs: []
  type: TYPE_NORMAL
- en: '* **Fixing things:** You can fix mistakes and even ask the computer to'
  prefs: []
  type: TYPE_NORMAL
- en: show you what you changed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cool Tricks**'
  prefs: []
  type: TYPE_NORMAL
- en: '* **Windows like picture frames:** The computer can show you lots of'
  prefs: []
  type: TYPE_NORMAL
- en: things at once, each in its own window.
  prefs: []
  type: TYPE_NORMAL
- en: '* **Sending secret notes:** You can send messages to other computers,'
  prefs: []
  type: TYPE_NORMAL
- en: like passing notes in class.
  prefs: []
  type: TYPE_NORMAL
- en: '* **Computer detective:** You have a special tool to look inside the'
  prefs: []
  type: TYPE_NORMAL
- en: computer and see how it works, like a detective with a magnifying
  prefs: []
  type: TYPE_NORMAL
- en: glass.
  prefs: []
  type: TYPE_NORMAL
- en: Absolutely! Here's an abstract of the video transcript, based on your
  prefs: []
  type: TYPE_NORMAL
- en: 'summaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Abstract**'
  prefs: []
  type: TYPE_NORMAL
- en: This video offers a detailed demonstration of the Xerox D personal
  prefs: []
  type: TYPE_NORMAL
- en: computing environment and the Interlisp-D programming language. It
  prefs: []
  type: TYPE_NORMAL
- en: 'covers several key themes:'
  prefs: []
  type: TYPE_NORMAL
- en: '* **System Overview:** The introduction outlines D''s network'
  prefs: []
  type: TYPE_NORMAL
- en: capabilities, graphical display, and interactive nature, contrasting
  prefs: []
  type: TYPE_NORMAL
- en: with traditional timesharing systems.
  prefs: []
  type: TYPE_NORMAL
- en: '* **Code Modification and Renaming:** The video demonstrates'
  prefs: []
  type: TYPE_NORMAL
- en: refactoring techniques in Interlisp-D. This includes renaming fields
  prefs: []
  type: TYPE_NORMAL
- en: for clarity and using the system's analysis tools to understand the
  prefs: []
  type: TYPE_NORMAL
- en: impact of these changes.
  prefs: []
  type: TYPE_NORMAL
- en: '* **Visual Editing:** The speaker utilizes Interlisp-D''s structured'
  prefs: []
  type: TYPE_NORMAL
- en: editor to directly modify code structure, specifically implementing
  prefs: []
  type: TYPE_NORMAL
- en: a conditional based on node positions within a tree editing
  prefs: []
  type: TYPE_NORMAL
- en: program. The visual editing interface allows for convenient
  prefs: []
  type: TYPE_NORMAL
- en: manipulation of code blocks.
  prefs: []
  type: TYPE_NORMAL
- en: '* **Error Handling:** The system''s comprehensive error handling is'
  prefs: []
  type: TYPE_NORMAL
- en: showcased. When an error occurs, it displays extensive debugging
  prefs: []
  type: TYPE_NORMAL
- en: information, including the executing code, argument values, local
  prefs: []
  type: TYPE_NORMAL
- en: variables, and the call stack. This facilitates inspection and the
  prefs: []
  type: TYPE_NORMAL
- en: ability to manually fix execution state.
  prefs: []
  type: TYPE_NORMAL
- en: '* **Graphics Programming:** The video explores how graphical output is'
  prefs: []
  type: TYPE_NORMAL
- en: handled, using the `draw rectangle` message. A simple bar graph is
  prefs: []
  type: TYPE_NORMAL
- en: drawn by modifying a factorial function, and a dedicated output
  prefs: []
  type: TYPE_NORMAL
- en: window is created to separate graphics from text.
  prefs: []
  type: TYPE_NORMAL
- en: '* **Debugging with the Inspector:** The Inspector tool allows in-depth'
  prefs: []
  type: TYPE_NORMAL
- en: examination of Lisp data structures. The video demonstrates
  prefs: []
  type: TYPE_NORMAL
- en: inspecting a terminal window, revealing its data components and the
  prefs: []
  type: TYPE_NORMAL
- en: messages it can handle. The ability to modify object properties,
  prefs: []
  type: TYPE_NORMAL
- en: like the blinker's visual behavior, is also shown.
  prefs: []
  type: TYPE_NORMAL
- en: '**Overall, the video provides a comprehensive look at Interlisp-D''s'
  prefs: []
  type: TYPE_NORMAL
- en: features, highlighting its integrated programming environment,
  prefs: []
  type: TYPE_NORMAL
- en: powerful editing tools, and robust error handling mechanisms.**
  prefs: []
  type: TYPE_NORMAL
- en: '*Summary*'
  prefs: []
  type: TYPE_NORMAL
- en: '**00:00:00 Introduction**'
  prefs: []
  type: TYPE_NORMAL
- en: '* Xerox D is introduced as a personal computing environment with'
  prefs: []
  type: TYPE_NORMAL
- en: networking capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '* It features a high-resolution bitmap display, mouse, and offers a'
  prefs: []
  type: TYPE_NORMAL
- en: more interactive experience than traditional systems
  prefs: []
  type: TYPE_NORMAL
- en: '**00:02:54 Exploring and Editing Programs**'
  prefs: []
  type: TYPE_NORMAL
- en: '* Xerox D includes the Interlisp-D programming language and powerful'
  prefs: []
  type: TYPE_NORMAL
- en: development tools.
  prefs: []
  type: TYPE_NORMAL
- en: '* The video will demonstrate how to analyze and change code using a'
  prefs: []
  type: TYPE_NORMAL
- en: tree editing program example.
  prefs: []
  type: TYPE_NORMAL
- en: '**00:12:41 Renaming Fields for Clarity**'
  prefs: []
  type: TYPE_NORMAL
- en: '* The speaker observes changes in code behavior, needing field names'
  prefs: []
  type: TYPE_NORMAL
- en: to be updated for better clarity.
  prefs: []
  type: TYPE_NORMAL
- en: '* They use a systematic command to rename ''from pause'' and ''to pause'''
  prefs: []
  type: TYPE_NORMAL
- en: fields to 'bottom' and 'top', respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**00:17:22 Editing Code with the Display-Based Editor**'
  prefs: []
  type: TYPE_NORMAL
- en: '* The speaker uses Interlisp-D''s visual editor to directly modify the'
  prefs: []
  type: TYPE_NORMAL
- en: '''display link'' function.'
  prefs: []
  type: TYPE_NORMAL
- en: '* The editor provides a structured view of the code and convenient'
  prefs: []
  type: TYPE_NORMAL
- en: editing commands.
  prefs: []
  type: TYPE_NORMAL
- en: '**00:23:17 Testing the Modification**'
  prefs: []
  type: TYPE_NORMAL
- en: '* Changes to the ''display link'' function are tested in the tree'
  prefs: []
  type: TYPE_NORMAL
- en: editing program, visually confirming the fix.
  prefs: []
  type: TYPE_NORMAL
- en: '* The system summarizes what was modified.'
  prefs: []
  type: TYPE_NORMAL
- en: '**00:26:29 Window Management**'
  prefs: []
  type: TYPE_NORMAL
- en: '* The Cater machine''s window system is explained. Processes can'
  prefs: []
  type: TYPE_NORMAL
- en: perform input/output within individual windows.
  prefs: []
  type: TYPE_NORMAL
- en: '* Demonstration of splitting the screen into multiple windows (Lisp'
  prefs: []
  type: TYPE_NORMAL
- en: evaluator, editor, statistics)
  prefs: []
  type: TYPE_NORMAL
- en: '* The ''blinker'' indicates the active window.'
  prefs: []
  type: TYPE_NORMAL
- en: '**00:32:38 Sending Messages Over Ethernet**'
  prefs: []
  type: TYPE_NORMAL
- en: '* Explanation of using the Ethernet for communication between'
  prefs: []
  type: TYPE_NORMAL
- en: computers.
  prefs: []
  type: TYPE_NORMAL
- en: '* The speaker sends a message to themselves as a demonstration.'
  prefs: []
  type: TYPE_NORMAL
- en: '**00:33:44 Programming Environment: Editor and Error Handling**'
  prefs: []
  type: TYPE_NORMAL
- en: '* The editor understands Lisp syntax and integrates closely with the'
  prefs: []
  type: TYPE_NORMAL
- en: programming environment.
  prefs: []
  type: TYPE_NORMAL
- en: '* ''Meta point'' is used to quickly find source code for functions'
  prefs: []
  type: TYPE_NORMAL
- en: '* Introduction of namespaces ('
  prefs: []
  type: TYPE_NORMAL
- en: '[e.g](http://e.g)'
  prefs: []
  type: TYPE_NORMAL
- en: ., 'ether:')
  prefs: []
  type: TYPE_NORMAL
- en: '* Demonstration of intentional error introduction into a factorial'
  prefs: []
  type: TYPE_NORMAL
- en: function.
  prefs: []
  type: TYPE_NORMAL
- en: '* Compilation and error handling: The error handler uses the display'
  prefs: []
  type: TYPE_NORMAL
- en: to show executing code, arguments, variables, and the call stack.
  prefs: []
  type: TYPE_NORMAL
- en: '**00:39:24 Error Handling (Cont.)**'
  prefs: []
  type: TYPE_NORMAL
- en: '* Details about panes in the error view are provided.'
  prefs: []
  type: TYPE_NORMAL
- en: '* The user can interact with and inspect values during an error'
  prefs: []
  type: TYPE_NORMAL
- en: state.
  prefs: []
  type: TYPE_NORMAL
- en: '* Demonstration of navigating the call stack and manually exiting'
  prefs: []
  type: TYPE_NORMAL
- en: the error with a return value.
  prefs: []
  type: TYPE_NORMAL
- en: '**00:42:55 Programming with Graphics**'
  prefs: []
  type: TYPE_NORMAL
- en: '* The ''factorial'' function is modified to draw a bar graph.'
  prefs: []
  type: TYPE_NORMAL
- en: '* Graphics use the ''draw rectangle'' message sent to the current'
  prefs: []
  type: TYPE_NORMAL
- en: window.
  prefs: []
  type: TYPE_NORMAL
- en: '* ''ctrl shift D'' is used to find the correct arguments for ''draw'
  prefs: []
  type: TYPE_NORMAL
- en: rectangle'.
  prefs: []
  type: TYPE_NORMAL
- en: '* A new window (''fact window'') separates graphical output.'
  prefs: []
  type: TYPE_NORMAL
- en: '**00:48:49 System Debugging with the Inspector**'
  prefs: []
  type: TYPE_NORMAL
- en: '* Introduction of the Inspector tool for examining Lisp data'
  prefs: []
  type: TYPE_NORMAL
- en: structures.
  prefs: []
  type: TYPE_NORMAL
- en: '* The Inspector''s panes include a REPL, object history, command menu,'
  prefs: []
  type: TYPE_NORMAL
- en: and recently inspected objects.
  prefs: []
  type: TYPE_NORMAL
- en: '* Demonstration of inspecting a terminal I/O window.'
  prefs: []
  type: TYPE_NORMAL
- en: '* Explanation that windows are objects and can have methods in'
  prefs: []
  type: TYPE_NORMAL
- en: addition to data.
  prefs: []
  type: TYPE_NORMAL
- en: '* The speaker views window message handlers.'
  prefs: []
  type: TYPE_NORMAL
- en: '* Demonstration of using the Inspector to change a window''s ''blinker'''
  prefs: []
  type: TYPE_NORMAL
- en: properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Disclaimer: I used gemini advanced 1.0 to create this based on the'
  prefs: []
  type: TYPE_NORMAL
- en: transcript.
  prefs: []
  type: TYPE_NORMAL
