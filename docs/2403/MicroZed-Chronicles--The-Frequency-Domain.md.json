["```\ndef dft(signal):\n    \"\"\"\n    Compute the Discrete Fourier Transform (DFT) of the given signal.\n    \"\"\"\n    N = len(signal)\n    n = np.arange(N)\n    k = n.reshape((N, 1))\n    e = np.exp(-2j * np.pi * k * n / N)\n    return np.dot(e, signal)\n\n# Compute the DFT\nY = dft(signal)\nn = len(signal)\nfreq = np.arange(n) / (n*1/sampling_rate)  # Frequency bins\n\n# Plot the signal\nplt.figure(figsize=(12, 6))\nplt.subplot(2, 1, 1)\nplt.plot(t, signal)\nplt.title('Sample Signal')\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\n\n# Plot the magnitude spectrum\nplt.subplot(2, 1, 2) [#plt](https://www.adiuvoengineering.com/blog/hashtags/plt).plot(freq, np.abs(Y))\nplt.plot(freq[:n // 2], np.abs(Y)[:n // 2] * 1/n)  # Plot only the positive frequencies\n\nplt.title('Magnitude Spectrum')\nplt.xlabel('Frequency (Hz)')\nplt.ylabel('Magnitude') [#plt](https://www.adiuvoengineering.com/blog/hashtags/plt).xlim([-2e7,2e7])\nplt.show()\n```", "```\n# Compute the FFT\nn = len(signal)  # Length of the signal\nfreq = np.fft.fftfreq(n, d=1/sampling_rate)  # Frequency bins\nY = np.fft.fft(signal)/n  # FFT and normalization\n\n# Plot the signal\nplt.figure(figsize=(12, 6))\nplt.subplot(2, 1, 1)\nplt.plot(t, signal)\nplt.title('Sample Signal')\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\n\n# Plot the magnitude spectrum\nplt.subplot(2, 1, 2)\nplt.plot(freq, np.abs(Y))\nplt.title('Magnitude Spectrum')\nplt.xlabel('Frequency (Hz)')\nplt.ylabel('Magnitude')\nplt.xlim([-2e7,2e7])\nplt.show()\n```"]