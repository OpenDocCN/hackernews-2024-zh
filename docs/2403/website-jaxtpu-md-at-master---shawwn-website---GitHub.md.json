["```\ngcloud components install alpha\ngcloud components update alpha\n```", "```\ndef norm(x, scope, *, axis=-1, epsilon=1e-5):\n    \"\"\"Normalize to mean = 0, std = 1, then do a diagonal affine transform.\"\"\"\n    with tf.variable_scope(scope):\n        n_state = x.shape[-1].value\n        g = tf.get_variable('g', [n_state], initializer=tf.constant_initializer(1))\n        b = tf.get_variable('b', [n_state], initializer=tf.constant_initializer(0))\n        u = tf.reduce_mean(x, axis=axis, keepdims=True)\n        s = tf.reduce_mean(tf.square(x-u), axis=axis, keepdims=True)\n        x = (x - u) * tf.rsqrt(s + epsilon)\n        x = x*g + b\n        return x\n```", "```\ndef _norm(x, *, axis, g=None, b=None, e=1e-5):\n    u = np.mean(x, axis=axis, keepdims=True)\n    s = np.mean(np.square(x-u), axis=axis, keepdims=True)\n    x = (x - u) / np.sqrt(s + e)\n    if g is not None and b is not None:\n        x = x * g + b\n    return x\n\ndef norm(cx, x, axis=-1):\n    n_state = x.shape[axis]\n    g = cx.get_variable(\"g\", initializer=lambda : onp.ones(n_state, 'f'))\n    b = cx.get_variable(\"b\", initializer=lambda : onp.zeros(n_state, 'f'))\n    return _norm(x, g=g, b=b, axis=axis)\n```"]