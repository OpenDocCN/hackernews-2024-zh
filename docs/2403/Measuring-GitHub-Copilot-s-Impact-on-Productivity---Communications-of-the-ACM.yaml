- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:29:09'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:29:09'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Measuring GitHub Copilot’s Impact on Productivity – Communications of the ACM
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量 GitHub Copilot 对生产力的影响 – ACM通讯
- en: 来源：[https://cacm.acm.org/research/measuring-github-copilots-impact-on-productivity/](https://cacm.acm.org/research/measuring-github-copilots-impact-on-productivity/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://cacm.acm.org/research/measuring-github-copilots-impact-on-productivity/](https://cacm.acm.org/research/measuring-github-copilots-impact-on-productivity/)
- en: Code-completion systems offering suggestions to a developer in their integrated
    development environment (IDE) have become the most frequently used kind of programmer
    assistance.^([1](#bib1)) When generating whole snippets of code, they typically
    use a large language model (LLM) to predict what the user might type next (the
    completion) from the context of what they are working on at the moment (the prompt).^([2](#bib2))
    This system allows for completions at any position in the code, often spanning
    multiple lines at once.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 提供代码补全建议给开发者在他们的集成开发环境（IDE）中已成为最常用的程序员辅助工具之一。^([1](#bib1)) 当生成整个代码片段时，它们通常使用大型语言模型（LLM）来预测用户接下来可能输入的内容（补全），根据用户此刻正在进行的工作上下文（提示）。^([2](#bib2))
    该系统允许在代码的任何位置进行补全，通常一次跨越多行。
- en: Key Insights
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键见解
- en: AI pair-programming tools such as GitHub Copilot have a big impact on developer
    productivity. This holds for developers of all skill levels, with junior developers
    seeing the largest gains.
  id: totrans-split-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Copilot等AI协作编程工具对开发者的生产力有重大影响，不论开发者的技能水平如何，初级开发者看到的增益最大。
- en: The reported benefits of receiving AI suggestions while coding span the full
    range of typically investigated aspects of productivity, such as task time, product
    quality, cognitive load, enjoyment, and learning.
  id: totrans-split-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告的受益来自于在编码时接收AI建议的各个方面，通常包括任务时间、产品质量、认知负荷、乐趣和学习等生产力方面。
- en: Perceived productivity gains are reflected in objective measurements of developer
    activity.
  id: totrans-split-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 感知到的生产力提升体现在开发者活动的客观测量中。
- en: While suggestion correctness is important, the driving factor for these improvements
    appears to be not correctness as such, but whether the suggestions are useful
    as a starting point for further development.
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管建议的正确性很重要，但这些改进的驱动因素似乎不是正确性本身，而是建议是否作为进一步开发的起点有用。
- en: Potential benefits of generating large sections of code automatically are huge,
    but evaluating these systems is challenging. Offline evaluation, where the system
    is shown a partial snippet of code and then asked to complete it, is difficult
    not least because for longer completions there are many acceptable alternatives
    and no straightforward mechanism for labeling them automatically.^([5](#bib5))
    An additional step taken by some researchers^([3](#bib3))^,^([21](#bib21))^,^([29](#bib29))
    is to use online evaluation and track the frequency of real users accepting suggestions,
    assuming that the more contributions a system makes to the developer’s code, the
    higher its benefit. The validity of this assumption is not obvious when considering
    issues such as whether two short completions are more valuable than one long one,
    or whether reviewing suggestions can be detrimental to programming flow.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成大段代码的潜在好处是巨大的，但评估这些系统是具有挑战性的。离线评估中，系统展示部分代码片段然后要求其完成，这是困难的，尤其是对于较长的补全来说，有许多可接受的替代方案，并且没有简单的机制可以自动标记它们。^([5](#bib5))
    一些研究人员采取的额外步骤^([3](#bib3))^,^([21](#bib21))^,^([29](#bib29)) 是使用在线评估并跟踪真实用户接受建议的频率，假设系统为开发者代码做出的贡献越多，其效益越高。然而，这种假设的有效性在考虑诸如两个短补全是否比一个长补全更有价值，或者审核建议是否会对编程流程产生不利影响等问题时并不明显。
- en: Code completion in IDEs using language models was first proposed in Hindle et
    al.,^([9](#bib9)) and today neural synthesis tools such as [GitHub Copilot](https://www.copilot.com/),
    [CodeWhisperer](https://aws.amazon.com/codewhisperer/), and [TabNine](https://tabnine.com/)
    suggest code snippets within an IDE with the explicitly stated intention to increase
    a user’s productivity. Developer productivity has many aspects, and a recent study
    has shown that tools like these are helpful in ways that are only partially reflected
    by measures such as completion times for standardized tasks.^([23](#bib23))^,
    ^(Alternatively, we can leverage the developers themselves as expert assessors
    of their own productivity. This meshes well with current thinking in software
    engineering research suggesting measuring productivity on multiple dimensions
    and using self-reported data.^([6](#bib6)) Thus we focus on studying *perceived*
    productivity.)
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在集成开发环境中使用语言模型进行代码自动完成最初是由Hindle等人提出的^([9](#bib9))，如今像[GitHub Copilot](https://www.copilot.com/)、[CodeWhisperer](https://aws.amazon.com/codewhisperer/)和[TabNine](https://tabnine.com/)等神经合成工具在IDE中建议代码片段，明确表明旨在提高用户的生产力。开发者的生产力有许多方面，最近的研究表明，这些工具在部分反映为标准化任务完成时间等度量方面是有帮助的^([23](#bib23))^，^(或者，我们可以利用开发者自身作为其生产力的专家评估者。这与当前软件工程研究中的思考非常契合，建议在多个维度上衡量生产力并使用自报告数据。^([6](#bib6))
    因此，我们专注于研究*感知*生产力。)
- en: Here, we investigate whether usage measurements of developer interactions with
    GitHub Copilot can predict perceived productivity as reported by developers. We
    analyze <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>2</mn><mo>,</mo><mn>631</mn></mrow></math>
    survey responses from developers using GitHub Copilot and match their responses
    to measurements collected from the IDE. We consider acceptance counts and more
    detailed measures of contribution, such as the amount of code contributed by GitHub
    Copilot and persistence of accepted completions in the code. **We find that acceptance
    rate of shown suggestions is a better predictor of perceived productivity than
    the alternative measures**. We also find that acceptance rate varies significantly
    over our developer population as well as over time, and present a deeper dive
    into some of these variations.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们研究了开发者与GitHub Copilot互动的使用量测量是否能预测开发者报告的感知生产力。我们分析了来自使用GitHub Copilot的开发者的<math
    xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>2</mn><mo>,</mo><mn>631</mn></mrow></math>份调查回应，并将他们的回应与从IDE中收集的测量数据进行匹配。我们考虑接受次数以及GitHub
    Copilot贡献的更详细的测量，例如由GitHub Copilot贡献的代码量和接受完成的持续性。**我们发现显示建议的接受率是预测感知生产力的更好指标**。我们还发现接受率在我们的开发者群体以及随时间的变化中有显著差异，并深入研究了其中一些变化。
- en: Our results support the principle that acceptance rate can be used for coarse-grained
    monitoring of the performance of a neural code synthesis system. This ratio of
    shown suggestions being accepted correlates better than more detailed measures
    of contribution. However, other approaches remain necessary for fine-grained investigation
    due to the many human factors involved.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的结果支持这样一个原则，即接受率可以用于粗粒度监控神经代码合成系统的性能。这种显示建议被接受的比率比贡献的更详细的测量更相关。然而，由于涉及许多人为因素，其他方法仍然是进行细粒度调查必不可少的。
- en: Background
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景
- en: Offline evaluation of code completion can have shortcomings even in tractable
    circumstances where completions can be labeled for correctness. For example, a
    study of <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>15</mn><mo>,</mo><mn>000</mn></mrow></math>
    completions by 66 developers in Visual Studio found significant differences between
    synthetic benchmarks used for model evaluation and real-world usage.^([7](#bib7))
    The evaluation of context-aware API completion for Visual Studio IntelliCode considered
    Recall@5—the proportion of completions for which the correct method call was in
    the top five suggestions. This metric fell from <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>90</mn><mo>%</mo></mrow></math> in offline evaluation
    to <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>70</mn><mo>%</mo></mrow></math>
    when used online.^([21](#bib21))
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在可处理的情况下，代码完成的离线评估也可能存在缺陷，其中可以为正确性标记完成。例如，对Visual Studio中66位开发人员进行的<math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>15</mn><mo>,</mo><mn>000</mn></mrow></math>个完成的研究发现，在模型评估中使用的合成基准和实际使用中存在显著差异。^([7](#bib7))
    对于Visual Studio IntelliCode的上下文感知API完成的评估考虑了Recall@5——在前五个建议中正确方法调用的完成比例。该指标从离线评估的<math
    xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>90</mn><mo>%</mo></mrow></math>下降到在线使用时的<math
    xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>70</mn><mo>%</mo></mrow></math>。^([21](#bib21))
- en: '[![GitHub Copilot’s code completion funnel.](img/6bf303bf6d244f471685b4ba874bcf94.png)](https://cacm.acm.org/wp-content/uploads/2024/02/funnel_white.png)'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[![GitHub Copilot的代码完成漏斗。](img/6bf303bf6d244f471685b4ba874bcf94.png)](https://cacm.acm.org/wp-content/uploads/2024/02/funnel_white.png)'
- en: '**Figure 1.  GitHub Copilot’s code completion funnel.**'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1.  GitHub Copilot的代码完成漏斗。**'
- en: Offline evaluation of code completion can have shortcomings even in tractable
    circumstances.
  id: totrans-split-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 即使在可处理的情况下，代码完成的离线评估也可能存在缺陷。
- en: Due to the diversity of potential solutions to a multi-line completion task,
    researchers have used software testing to evaluate the behavior of completions.
    Competitive programming sites have been used as a source of such data^([8](#bib8))^,^([11](#bib11))
    as well as handwritten programming problems.^([5](#bib5)) Yet, it is unclear how
    well performance on programming competition data generalizes to interactive development
    in an IDE.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于多行完成任务的潜在解决方案多样性，研究人员已经使用软件测试来评估完成的行为。竞争性编程网站已被用作这类数据的来源^([8](#bib8))^,^([11](#bib11))，以及手写编程问题。^([5](#bib5))
    然而，编程竞赛数据的表现如何在IDE中的交互式开发中推广，尚不清楚。
- en: It is unclear how well performance on programming competition data generalizes
    to interactive development in an IDE.
  id: totrans-split-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编程竞赛数据的表现如何在集成开发环境（IDE）中的交互式开发中推广，尚不清楚。
- en: In this work, we define acceptance rate as the fraction of completions shown
    to the developer that are subsequently accepted for inclusion in the source file.
    The IntelliCode Compose system uses the term *click through rate* (CTR) for this
    and reports a value of <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>10</mn><mo>%</mo></mrow></math>
    in online trials.^([20](#bib20)) An alternative measure is that of *daily completions
    accepted per user* (DCPU) for which a value of around 20 has been reported.^([3](#bib3))^,^([29](#bib29))
    To calculate acceptance rate one must, of course, normalize DCPU by the time spent
    coding each day. For context, in our study GitHub Copilot has an acceptance rate
    of <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>27</mn><mo>%</mo></mrow></math>
    and a mean DCPU in excess of 312 (See Figure 1). ^(These differences are presumably
    due to differences in the kinds of completion offered, or perhaps to user-interface
    choices. We discuss later how developer objectives, choice of programming language,
    and even time of day seem to affect our data. Such discrepancies highlight the
    difficulty in using acceptance rate to understand the value of a system.)
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这项工作中，我们将接受率定义为向开发人员展示的完成度的分数，随后这些完成度被接受并包含在源文件中。IntelliCode Compose系统使用术语*点击通过率*（CTR）来表示，并在在线试验中报告了<math
    xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>10</mn><mo>%</mo></mrow></math>的数值。^([20](#bib20))
    另一种度量方式是*每日用户接受的完成度*（DCPU），其中报告了大约20的数值。^([3](#bib3))^,^([29](#bib29)) 要计算接受率，当然要通过每天编码的时间对DCPU进行归一化。在我们的研究中，GitHub
    Copilot的接受率为<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>27</mn><mo>%</mo></mrow></math>，并且平均DCPU超过312（见图1）。^(这些差异可能是由于所提供完成的种类不同，或者由于用户界面选择的不同。我们稍后讨论开发者目标、编程语言选择甚至一天中的时间如何影响我们的数据。这些差异突显了使用接受率来理解系统价值的困难。)
- en: There is some evidence that acceptance rate (and indeed correctness) might not
    tell the whole story. One survey of developers considered the use of AI to support
    translation between programming languages and found indications that developers
    tolerated, and in some cases valued, erroneous suggestions from the model.^([26](#bib26))
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有证据表明，接受率（甚至正确性）可能并不能讲述整个故事。一项开发者调查考虑使用AI支持编程语言之间的翻译，发现开发者容忍，并在某些情况下评价模型提供的错误建议。^([26](#bib26))
- en: There is some evidence that acceptance rate (and indeed correctness) might not
    tell the whole story.
  id: totrans-split-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有证据表明，接受率（甚至正确性）可能并不能讲述整个故事。
- en: Measuring developer productivity through activity counts over time (a typical
    definition of productivity borrowed from economics) disregards the complexity
    of software development as they account for only a subset of developer outputs.
    A more holistic picture is formed by measuring *perceived* productivity through
    self-reported data across various dimensions^([6](#bib6)) and supplementing it
    with automatically measured data.^([4](#bib4)) We used the SPACE framework^([6](#bib6))
    to design a survey that captures self-reported productivity and paired the self-reported
    data with usage telemetry.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过随时间的活动计数来衡量开发者的生产力（这是从经济学借鉴的典型生产力定义）忽略了软件开发的复杂性，因为它们仅考虑开发者输出的子集。通过自我报告的数据跨多个维度形成更全面的图片，称为*感知*生产力，补充自动测量数据。我们使用SPACE框架^([6](#bib6))设计了一个捕捉自我报告生产力的调查，并将自我报告的数据与使用遥测数据配对。
- en: To the best of our knowledge, this is the first study of code suggestion tools
    establishing a clear link between usage measurements and developer productivity
    or happiness. A previous study comparing GitHub Copilot against IntelliCode with
    25 participants found no significant correlation between task completion times
    and survey responses.^([22](#bib22))
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 据我们所知，这是第一项关于代码建议工具的研究，建立了使用测量与开发者生产力或幸福感之间的明确联系。一项先前的研究将GitHub Copilot与IntelliCode在25名参与者中进行比较，发现任务完成时间与调查回应之间没有显著相关性。^([22](#bib22))
- en: '[![Demographic composition of survey respondents.](img/522ee08620c7d5ce1ff40de6c8ce71af.png)](https://cacm.acm.org/wp-content/uploads/2024/02/survey_demographics_white.png)'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[![调查受访者的人口构成。](img/522ee08620c7d5ce1ff40de6c8ce71af.png)](https://cacm.acm.org/wp-content/uploads/2024/02/survey_demographics_white.png)'
- en: '**Figure 2.  Demographic composition of survey respondents.**'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2. 调查受访者的人口构成。**'
- en: Data and Methodology
  id: totrans-split-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据与方法
- en: Usage measurements.
  id: totrans-split-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用测量。
- en: GitHub Copilot provides code completions using OpenAI language models. It runs
    within the IDE and at appropriate points sends a completion request to a cloud-hosted
    instance of the neural model. GitHub Copilot can generate completions at arbitrary
    points in code rather than, for example, only being triggered when a developer
    types a period for invoking a method on an object. A variety of rules determine
    when to request a completion, when to abandon requests if the developer has moved
    on before the model is ready with a completion, and how much of the response from
    the model to surface as a completion.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot使用OpenAI语言模型提供代码完成。它在IDE内运行，并在适当的时候向云托管的神经模型实例发送完成请求。GitHub Copilot可以在代码中的任意点生成完成，而不是例如仅在开发人员键入句号以调用对象方法时触发。各种规则确定何时请求完成，如果开发人员在模型准备好完成之前已经移动，则放弃请求，以及从模型响应中展示多少作为完成。
- en: As stated in our terms of usage, ^(the GitHub Copilot IDE extension records
    the events shown in Table [1](#T1) for all users. We make usage measurements for
    each developer by counting those events.)
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们使用条款所述，^(GitHub Copilot IDE扩展记录了表格 [1](#T1) 中所有用户的事件。我们通过计算这些事件来对每个开发人员进行使用量测量。)
- en: '**Table 1.  Developer usage events collected by GitHub Copilot.**'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**表格 1. GitHub Copilot 收集的开发者使用事件。**'
- en: '| `opportunity` | A heuristic-based determination by the IDE and the plug-in
    that a completion might be appropriate at this point in the code (for example,
    the cursor is not in the middle of a word) |'
  id: totrans-split-35
  prefs: []
  type: TYPE_TB
  zh: '| `opportunity` | IDE和插件基于启发式的判断，认为此时此刻可能适合完成（例如，光标不在单词中间） |'
- en: '| `shown` | Completion shown to the developer |'
  id: totrans-split-36
  prefs: []
  type: TYPE_TB
  zh: '| `shown` | 显示给开发人员的完成 |'
- en: '| `accepted` | Completion accepted by the developer for inclusion in the source
    file |'
  id: totrans-split-37
  prefs: []
  type: TYPE_TB
  zh: '| `accepted` | 开发人员接受的用于包含在源文件中的完成 |'
- en: '| `accepted_char` | The number of characters in an accepted completion |'
  id: totrans-split-38
  prefs: []
  type: TYPE_TB
  zh: '| `accepted_char` | 接受完成中的字符数 |'
- en: '| `mostly_unchanged_X` | Completion persisting in source code with limited
    modifications (Levenshtein distance less than 33%) after X seconds, where we consider
    durations of 30, 120, 300, and 600 seconds |'
  id: totrans-split-39
  prefs: []
  type: TYPE_TB
  zh: '| `mostly_unchanged_X` | 在经过X秒后仍在源代码中保持几乎不变（Levenshtein距离小于33%），我们考虑了30、120、300和600秒的持续时间
    |'
- en: '| `unchanged_X` | Completion persisting in source code unmodified after X seconds.
    |'
  id: totrans-split-40
  prefs: []
  type: TYPE_TB
  zh: '| `unchanged_X` | 在经过X秒后仍在源代码中保持未修改的完成。 |'
- en: '| (active) `hour` | An hour during which the developer was using their IDE
    with the plug-in active |'
  id: totrans-split-41
  prefs: []
  type: TYPE_TB
  zh: '| (active) `hour` | 开发人员在使用带插件的IDE期间的小时数 |'
- en: 'Our measures of persistence go further than existing work, which stops at acceptance.
    The intuition here is that a completion which is accepted into the source file
    but then subsequently turns out to be incorrect can be considered to have wasted
    developer time both in reviewing it and then having to go back and delete it.
    We also record *mostly* unchanged completions: A large completion requiring a
    few edits might still be a positive contribution. It is not clear how long after
    acceptance one should confirm persistence, so we consider a range of options.'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的持久性措施超越了现有的工作，它们止步于接受。这里的直觉是，一个被接受到源文件中但随后被证明不正确的完成，可以认为在审核它以及后来不得不删除它时浪费了开发人员的时间。我们还记录了*大部分*未更改的完成：一个需要几个编辑的大完成仍然可能是积极的贡献。目前尚不清楚接受后应何时确认持久性，因此我们考虑了多种选择。
- en: The events pertaining to completions form a funnel which we show quantitatively
    in Table [1](#T1). We include a summary of all data in Appendix A. ^((*All appendices
    for this article can be found online at* [*https://dl.acm.org/doi/10.1145/3633453*](https://dl.acm.org/doi/10.1145/3633453)).)
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 关于完成事件的信息形成了一个漏斗，我们在表格 [1](#T1) 中定量显示。我们在附录A中总结了所有数据。 ^((*本文所有附录均可在线查阅* [*https://dl.acm.org/doi/10.1145/3633453*](https://dl.acm.org/doi/10.1145/3633453)).)
- en: 'We normalize these measures against each other and write `X_per_Y` to indicate
    we have normalized metric `X` by metric `Y`. For example: `accepted_per_hour`
    is calculated as the total number of `accepted` events divided by the total number
    of (active) `hour` events.'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些措施相互标准化，并写`X_per_Y`来指示我们已经通过度量`Y`对度量`X`进行了标准化。例如：`accepted_per_hour`被计算为`accepted`事件的总数除以（active）`hour`事件的总数。
- en: Table [2](#T2) defines the core set of metrics which we feel have a natural
    interpretation in this context. We note that there are other alternatives and
    we incorporate these in our discussion where relevant.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 表 [2](#T2) 定义了我们认为在此背景下具有自然解释的核心度量标准集。我们注意到还有其他替代方案，并在相关时将其纳入讨论。
- en: '**Table 2.  The core set of measurements considered in this paper.**'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 2.  本文考虑的核心测量指标集。**'
- en: '| Natural name | Explanation |'
  id: totrans-split-47
  prefs: []
  type: TYPE_TB
  zh: '| 自然名称 | 解释 |'
- en: '| --- | --- |'
  id: totrans-split-48
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Shown rate | Ratio of completion opportunities that resulted in a completion
    being shown to the user |'
  id: totrans-split-49
  prefs: []
  type: TYPE_TB
  zh: '| 显示率 | 导致向用户显示完整性的完成机会的比率 |'
- en: '| Acceptance rate | Ratio of shown completions accepted by the user |'
  id: totrans-split-50
  prefs: []
  type: TYPE_TB
  zh: '| 接受率 | 用户接受的显示完整性的比率 |'
- en: '| Persistence rate | Ratio of accepted completions unchanged after 30, 120,
    300, and 600 seconds |'
  id: totrans-split-51
  prefs: []
  type: TYPE_TB
  zh: '| 持久性率 | 在30、120、300和600秒后未更改的接受完整性的比率 |'
- en: '| Fuzzy persistence rate | Ratio of accepted completions mostly unchanged after
    30, 120, 300, and 600 seconds |'
  id: totrans-split-52
  prefs: []
  type: TYPE_TB
  zh: '| 模糊持久性率 | 在30、120、300和600秒后基本未更改的接受完整性的比率 |'
- en: '| Efficiency | Ratio of completion opportunities that resulted in a completion
    accepted and unchanged after 30, 120, 300, and 600 seconds |'
  id: totrans-split-53
  prefs: []
  type: TYPE_TB
  zh: '| 效率 | 导致在30、120、300和600秒后接受并未更改的完成机会的比率 |'
- en: '| Contribution speed | Number of characters in accepted completions per distinct,
    active hour |'
  id: totrans-split-54
  prefs: []
  type: TYPE_TB
  zh: '| 贡献速度 | 每个不同、活跃小时中接受完整性的字符数 |'
- en: '| Acceptance frequency | Number of accepted completions per distinct, active
    hour |'
  id: totrans-split-55
  prefs: []
  type: TYPE_TB
  zh: '| 接受频率 | 每个不同、活跃小时中接受的完整性数量 |'
- en: '| Persistence frequency | Number of unchanged completions per distinct, active
    hour |'
  id: totrans-split-56
  prefs: []
  type: TYPE_TB
  zh: '| 持久性频率 | 每个不同、活跃小时中未更改的完整性数量 |'
- en: '| Total volume | Total number of completions shown to the user |'
  id: totrans-split-57
  prefs: []
  type: TYPE_TB
  zh: '| 总体量 | 显示给用户的完整性的总数 |'
- en: '| Loquaciousness | Number of shown completions per distinct, active hour |'
  id: totrans-split-58
  prefs: []
  type: TYPE_TB
  zh: '| 多话 | 每个不同、活跃小时中显示的完整性数量 |'
- en: '| Eagerness | Number of shown completions per opportunity |'
  id: totrans-split-59
  prefs: []
  type: TYPE_TB
  zh: '| 热情度 | 每个机会中显示的完整性数量 |'
- en: Productivity survey.
  id: totrans-split-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生产力调查。
- en: To understand users’ experience with GitHub Copilot, we emailed a link to an
    online survey to <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>17</mn><mo>,</mo><mn>420</mn></mrow></math>
    users. These were participants of the unpaid technical preview using GitHub Copilot
    with their everyday programming tasks. The only selection criterion was having
    previously opted in to receive communications. A vast majority of survey users
    (more than 80%) filled out the survey within the first two days, on or before
    February 12, 2022\. We therefore focus on data from the four-week period leading
    up to this point (“the study period”). We received a total of 2,047 responses
    we could match to usage data from the study period, the earliest on Feb. 10, 2022
    and the latest on Mar. 6, 2022.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解用户对 GitHub Copilot 的体验，我们通过电子邮件向 <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>17</mn><mo>,</mo><mn>420</mn></mrow></math> 名用户发送了一份在线调查链接。这些用户是在他们的日常编程任务中使用
    GitHub Copilot 的未付费技术预览的参与者。唯一的选择标准是先前选择接收通讯。超过80% 的调查用户在前两天内填写了调查表格，截至2022年2月12日或之前。因此，我们关注的数据来自于前四周的期间（“研究期”）。我们总共收到了2,047份调查反馈，我们能够与研究期的使用数据匹配，最早的数据是在2022年2月10日，最晚的数据是在2022年3月6日。
- en: The survey contained multiple-choice questions regarding demographic information
    (see Figure [2](#F2)) and Likert-style questions about different aspects of productivity,
    which were randomized in their order of appearance to the user. Figure [2](#F2)
    shows the demographic composition of our respondents. We note the significant
    proportion of professional programmers who responded.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 调查包含关于人口统计信息的多项选择问题（见图 [2](#F2)）和关于生产力不同方面的Likert式问题，这些问题在呈现给用户时是随机排列的。图 [2](#F2)
    显示了我们受访者的人口组成。我们注意到，回答调查的专业程序员比例相当大。
- en: 'The SPACE framework^([6](#bib6)) defines 5 dimensions of productivity: **S**atisfaction
    and well-being, **P**erformance, **A**ctivity, **C**ommunication and collaboration,
    and **E**fficiency and flow. We use four of these (S,P,C,E) since self reporting
    on (A) is generally considered inferior to direct measurement. We included 11
    statements covering these four dimensions in addition to a single statement: “I
    am more productive when using GitHub Copilot.” For each self-reported productivity
    measure, we encoded its five ordinal response values to numeric labels (1 = Strongly
    Disagree, <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mo>…</mo></math>,
    5 = Strongly Agree). We include the full list of questions and their coding to
    the SPACE framework in Appendix C. For more information on the SPACE framework
    and how the empirical software engineering community has been discussing developer
    productivity, please see the following section.'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[SPACE 框架](https://wiki.example.org/space_framework)定义了5个生产力维度：**S**满意度和福祉，**P**表现，**A**活动，**C**沟通与协作，以及**E**效率和流程。我们使用其中的四个（S、P、C、E），因为对于（A）的自我报告通常被认为不如直接测量。除了一条陈述：“使用
    GitHub Copilot 时我更加高效”，我们还包括了涵盖这四个维度的11个陈述。对于每个自我报告的生产力度量，我们将其五个序数响应值编码为数值标签（1
    = 强烈不同意，<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mo>…</mo></math>，5
    = 强烈同意）。我们在附录 C 中列出了这些问题的完整列表及其编码到 SPACE 框架的方式。有关 SPACE 框架及其如何讨论开发者生产力的更多信息，请参阅以下章节。'
- en: Early in our analysis, we found that the usage metrics we describe in the Usage
    Measurements section corresponded similarly to each of the measured dimensions
    of productivity, and in turn these dimensions were highly correlated to each other
    (Figure [3](#F3)). We therefore added an aggregate productivity score calculated
    as the mean of all 12 individual measures (excluding skipped questions). This
    serves as a rough proxy for the much more complex concept of productivity, facilitating
    recognition of overall trends, which may be less discernible on individual variables
    due to higher statistical variation.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析早期，我们发现我们在使用度量部分描述的度量与每个生产力测量维度之间存在类似的对应，反过来，这些维度彼此高度相关（见图 [3](#F3)）。因此，我们添加了一个聚合生产力得分，计算方法是所有12个单独度量的平均值（不包括跳过的问题）。这作为生产力这一复杂概念的粗略代理，有助于识别总体趋势，这些趋势在个体变量上可能不太明显，因为存在更高的统计变异性。
- en: '[![Correlation between metrics. Metrics are ordered by similarity based on
    distance in the correlation matrix, except for manually fixing the aggregate productivity
    and acceptance rate at the end for visibility.](img/2422b29f25389cb987eb758e3202a687.png)](https://cacm.acm.org/wp-content/uploads/2024/02/heatmap_white.png)'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[![指标之间的相关性。基于相关矩阵中的距离，按相似性排序指标，除了手动将总体生产力和接受率放在最后以增强可见性外。](img/2422b29f25389cb987eb758e3202a687.png)](https://cacm.acm.org/wp-content/uploads/2024/02/heatmap_white.png)'
- en: '**Figure 3.  Correlation between metrics. Metrics are ordered by similarity
    based on distance in the correlation matrix, except for manually fixing the aggregate
    productivity and acceptance rate at the end for visibility.**'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3.  指标之间的相关性。基于相关矩阵中的距离，按相似性排序指标，除了手动将总体生产力和接受率放在最后以增强可见性外。**'
- en: The full dataset of these aggregate productivity scores together with the usage
    measurements considered in this article is available at [https://github.com/wunderalbert/prod-neural-materials](https://github.com/wunderalbert/prod-neural-materials).
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章中考虑的所有聚合生产力分数及使用度量的完整数据集可在 [https://github.com/wunderalbert/prod-neural-materials](https://github.com/wunderalbert/prod-neural-materials)
    上找到。
- en: Given it has been impossible to produce a unified definition or metric(s) for
    developer productivity, there have been attempts to synthesize the factors that
    impact productivity to describe it holistically, include various relevant factors,
    and treat developer productivity as a composite measure^([17](#bib17))^,^([19](#bib19))^,^([24](#bib24))
    In addition, organizations often use their own multidimensional frameworks to
    operationalize productivity, which reflects their engineering goals—for example,
    Google uses the QUANTS framework, with 5 components of productivity.^([27](#bib27))
    In this article, we use the SPACE framework,^([6](#bib6)) which builds on synthesis
    of extensive and diverse literature by expert researchers and practitioners in
    the area of developer productivity.
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于目前无法制定统一的开发者生产力定义或指标，已有尝试综合影响生产力的因素，从而全面描述它，包括各种相关因素，并将开发者生产力视为综合评估的指标^([17](#bib17))^,^([19](#bib19))^,^([24](#bib24))。此外，组织通常使用自己的多维框架来实现生产力运作，反映其工程目标，例如，谷歌采用
    QUANTS 框架，包含了5个生产力组件^([27](#bib27))。本文采用SPACE框架^([6](#bib6))，该框架基于领域内专家研究人员和实践者广泛和多样化的文献综合。
- en: 'SPACE is an acronym of the five dimensions of productivity:'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: SPACE 是生产力的五个维度的首字母缩写：
- en: '**S (Satisfaction and well being)**: This dimension is meant to reflect developers’
    fulfillment with the work they do and the tools they use, as well as how healthy
    and happy they are with the work they do. This dimension reflects some of the
    easy-to-overlook trade-offs involved when looking exclusively at velocity acceleration
    (for example, when we target faster turnaround of code reviews without considering
    workload impact or burnout for developers).'
  id: totrans-split-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**S（满意度与幸福感）**：这个维度旨在反映开发者对工作和使用的工具的满意程度，以及他们对工作的健康和幸福感。这个维度反映了一些容易忽视的权衡，尤其是在专注于速度加快时（例如，当我们以加快代码审查的速度为目标，而不考虑开发者的工作量影响或烧蚀现象）。'
- en: '**P (Performance)**: This dimension aims to quantify outcomes rather than output.
    Example metrics that capture performance relate to quality and reliability, as
    well as further-removed metrics such as customer adoption or satisfaction.'
  id: totrans-split-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**P（绩效）**：这个维度旨在量化结果而非产出。例如，捕捉绩效的指标包括质量和可靠性，以及与此相关的指标如客户采用率或满意度。'
- en: '**A (Activity)**: This is the count of outputs—for example, the number of pull
    requests closed by a developer. As a result this is a dimension that is best quantified
    via system data. Given the variety of developers’ activities as part of their
    work, it is important that the activity dimension accounts for more than coding
    activity—for instance, writing documentation, creating design specs, and so on.'
  id: totrans-split-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A（活动）**：这是开发者产出的计数，例如，开发者关闭的拉取请求数量。因此，这是一个最好通过系统数据来量化的维度。考虑到开发者工作中各种活动的多样性，活动维度不仅仅应该考虑编码活动，还应包括文档编写、创建设计规格等活动。'
- en: '**C (Communication and collaboration)**: This dimension aims to capture that
    modern software development happens in teams and is, therefore, impacted by the
    discoverability of documentation or the speed of answering questions, or the onboarding
    time and process of new team members.'
  id: totrans-split-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C（沟通与协作）**：这个维度旨在捕捉现代软件开发团队的活动，因此受到文档的可发现性、回答问题的速度，以及新团队成员的入职时间和流程等影响。'
- en: '**E (Efficiency and flow)**: This dimension reflects the ability to complete
    work or make progress with little interruption or delay. It is important to note
    that delays and interruptions can be caused either by systems or humans, and it
    is best to monitor both self-reported and observed measurements—for example, use
    self-reports of the ability to do uninterrupted work, as well as measure wait
    time in engineering systems).'
  id: totrans-split-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**E（效率与流畅性）**：这个维度反映了在几乎没有中断或延迟的情况下完成工作或取得进展的能力。值得注意的是，延迟和中断可能由系统或人类造成，最好同时监控自我报告和观察到的测量结果，例如，利用对无中断工作能力的自我报告，以及测量工程系统中的等待时间。'
- en: What Drives Perceived Productivity?
  id: totrans-split-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么推动了感知生产力？
- en: To examine the relationship between objective measurements of user behavior
    and self-reported perceptions of productivity, we used our set of core usage measurements
    (Table [2](#T2)). We then calculated Pearson’s R correlation coefficient and the
    corresponding p-value of the F-statistic between each pair of usage measurement
    and perceived productivity metric. We also computed a PLS regression from all
    usage measurements jointly.
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检验用户行为的客观测量与自报告的生产力感知之间的关系，我们使用了一组核心使用量测量（表格 [2](#T2)）。然后，我们计算了每对使用量测量和感知生产力度量之间的Pearson相关系数R以及对应的F统计量的p值。我们还联合计算了所有使用量测量的PLS回归。
- en: We summarize these results in Figure [3](#F3), showing the correlation coefficients
    between all measures and survey questions. The full table of all results is included
    in Appendix B, available online.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在图 [3](#F3) 中总结了这些结果，显示了所有测量与调查问题之间的相关系数。所有结果的完整表格包含在在线附录 B 中。
- en: '**We find acceptance rate (**accepted_per_shown**) most positively predicts
    users’ perception of productivity, although, given the confounding and human factors,
    there is still notable unexplained variance.**'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们发现接受率（accepted_per_shown）最能正面预测用户对生产力的感知，尽管鉴于混杂和人为因素，仍然存在显著的未解释方差。**'
- en: Of all usage measurements, acceptance rate correlates best with aggregate productivity
    (<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>ρ</mi><mo>=</mo><mn>0</mn><mo>.</mo><mn>24</mn></mrow></math>,
    <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>P</mi><mo><</mo><mn>0</mn><mo>.</mo><mn>0001</mn></mrow></math>).
    This measurement is also the best performing for at least one survey question
    in each of the SPACE dimensions. This correlation is high confidence but leaves
    considerable unexplained variance. Later, we explore improvements from combining
    multiple usage measurements together.
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: 所有使用量测量中，接受率与总体生产力相关性最强（<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>ρ</mi><mo>=</mo><mn>0</mn><mo>.</mo><mn>24</mn></mrow></math>，<math
    xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>P</mi><mo><</mo><mn>0</mn><mo>.</mo><mn>0001</mn></mrow></math>）。在每个SPACE维度的至少一个调查问题中，该测量也表现最佳。这种相关性具有很高的置信度，但仍存在相当大的未解释方差。接下来，我们将探讨结合多种使用量测量以获得改进的方法。
- en: Looking at the more detailed metrics around persistence, we see that it is generally
    better over shorter time periods than over longer periods. This is intuitive in
    the sense that shorter periods move the measure closer to acceptance rate. We
    also expect that at some point after accepting the completion it becomes simply
    part of the code and so any changes (or not) after that point will not be attributed
    to GitHub Copilot. All persistence measures were less well correlated than acceptance
    rate.
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在更详细地分析持久性指标时，我们发现短期内的持久性通常优于长期的持久性。从直觉上讲，较短时期使得这一测量接近接受率。我们还期待，在接受完成后的某个时刻，它只是代码的一部分，因此在此之后的任何变化（或者不变化）将不会归因于GitHub
    Copilot。所有持久性测量的相关性都比接受率低。
- en: To assess the different metrics in a single model, we ran a regression using
    projection on latent structures (PLS). The choice of PLS, which captures the common
    variation of these variables as is linearly connected to the aggregate productivity,^([28](#bib28))
    is due to the high collinearity of the single metrics. The first component, to
    which every metric under consideration contributes positively, explains <math
    xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>43</mn><mo>.</mo><mn>2</mn><mo>%</mo></mrow></math>
    of the variance. The second component captures the acceptance rate/change rate
    dichotomy; it explains a further <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>13</mn><mo>.</mo><mn>1</mn><mo>%</mo></mrow></math>.
    Both draw most strongly from acceptance rate.
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在单一模型中评估不同的指标，我们进行了投影到潜在结构（PLS）的回归。选择PLS的原因是它捕捉了这些变量的共同变化，并且与总体生产力线性相关，^([28](#bib28))
    这是由于单一指标的高共线性。第一个组件，每个考虑中的指标都正向贡献，解释了方差的 <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>43</mn><mo>.</mo><mn>2</mn><mo>%</mo></mrow></math>。第二个组件捕获了接受率/变化率二分法；它进一步解释了
    <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>13</mn><mo>.</mo><mn>1</mn><mo>%</mo></mrow></math>
    的方差。两者都主要来源于接受率。
- en: This strongly points to acceptance rate being the most immediate indicator of
    perceived productivity, although it is beneficial to combine with others to get
    a fuller picture.
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这强烈表明接受率是感知生产力最直接的指标，尽管将其与其他指标结合以获得更全面的图像也是有益的。
- en: Experience
  id: totrans-split-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 经验
- en: 'To understand how different types of developers interact with Copilot, our
    survey asked respondents to self-report their level of experience in two ways:'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解不同类型的开发人员如何与Copilot互动，我们的调查要求受访者以两种方式自报其经验水平：
- en: “Think of the language you have used the most with Copilot. How proficient are
    you in that language?” with options “Beginner”, “Intermediate”, and “Advanced”.
  id: totrans-split-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “考虑您在使用Copilot时使用的语言。您在该语言中的熟练程度如何？”有“初学者”、“中级”和“高级”选项。
- en: “Which best describes your programming experience?” with options starting with
    “Student” and ranging from “0-2 years” to “16+ years” in two year intervals.
  id: totrans-split-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “哪个最能描述您的编程经验？”从“学生”开始，范围从“0-2年”到“16+年”，每两年一个间隔。
- en: 'We compute correlations with productivity metrics for both experience variables
    and include these two variables as covariates in a multivariate regression analysis.
    We find that both are negatively correlated with our aggregate productivity measure
    (proficiency: <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>ρ</mi><mo>=</mo><mo>–</mo><mn>0</mn><mo>.</mo><mn>095</mn></mrow></math>,
    <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>P</mi><mo>=</mo><mn>0</mn><mo>.</mo><mn>0001</mn></mrow></math>;
    years of experience: <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>ρ</mi><mo>=</mo><mo>–</mo><mn>0</mn><mo>.</mo><mn>161</mn></mrow></math>,
    <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>P</mi><mo><</mo><mn>0</mn><mo>.</mo><mn>0001</mn></mrow></math>).
    However, in multivariate regressions predicting productivity from usage metrics
    while controlling for demographics, proficiency had a non-significant positive
    effect (<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>c</mi><mi>o</mi><mi>e</mi><mi>f</mi><mi>f</mi><mo>=</mo><mn>0</mn><mo>.</mo><mn>021</mn></mrow></math>,
    <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>P</mi><mo>=</mo><mn>0</mn><mo>.</mo><mn>213</mn></mrow></math>),
    while years of experience had a non-significant negative effect (<math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mi>c</mi><mi>o</mi><mi>e</mi><mi>f</mi><mi>f</mi><mo>=</mo><mo>–</mo><mn>0</mn><mo>.</mo><mn>032</mn></mrow></math>,
    <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>P</mi><mo>=</mo><mn>0</mn><mo>.</mo><mn>122</mn></mrow></math>).'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计算与生产力指标的相关性，包括这两个变量作为多变量回归分析中的协变量。我们发现，两者与我们的综合生产力度量呈负相关（熟练度：<math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mi>ρ</mi><mo>=</mo><mo>–</mo><mn>0</mn><mo>.</mo><mn>095</mn></mrow></math>，<math
    xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>P</mi><mo>=</mo><mn>0</mn><mo>.</mo><mn>0001</mn></mrow></math>；经验年限：<math
    xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>ρ</mi><mo>=</mo><mo>–</mo><mn>0</mn><mo>.</mo><mn>161</mn></mrow></math>，<math
    xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>P</mi><mo><</mo><mn>0</mn><mo>.</mo><mn>0001</mn></mrow></math>）。然而，在控制人口统计学的多变量回归中，预测生产力从使用度量时，熟练度有非显著正效果（<math
    xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>c</mi><mi>o</mi><mi>e</mi><mi>f</mi><mi>f</mi><mo>=</mo><mn>0</mn><mo>.</mo><mn>021</mn></mrow></math>，<math
    xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>P</mi><mo>=</mo><mn>0</mn><mo>.</mo><mn>213</mn></mrow></math>），而经验年限有非显著负效果（<math
    xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>c</mi><mi>o</mi><mi>e</mi><mi>f</mi><mi>f</mi><mo>=</mo><mo>–</mo><mn>0</mn><mo>.</mo><mn>032</mn></mrow></math>，<math
    xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>P</mi><mo>=</mo><mn>0</mn><mo>.</mo><mn>122</mn></mrow></math>）。
- en: Looking further at individual measures of productivity, (Table [3](#T3)) we
    find that both language proficiency and years of experience negatively predict
    developers agreeing that Copilot helps them write better code. However, proficiency
    positively predicts developers agreeing that Copilot helps them stay in the flow,
    focus on more satisfying work, spend less effort on repetitive tasks, and perform
    repetitive tasks faster. Years of experience negatively predicts developers feeling
    less frustrated in coding sessions and perform repetitive tasks faster while using
    Copilot, but positively predicts developers making progress faster when working
    in an unfamiliar language. These findings suggest that experienced developers
    who are already highly skilled are less likely to write better code with Copilot,
    but Copilot can assist their productivity in other ways particularly when engaging
    with new areas and automating routine work.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步观察生产力的各项指标（表[3](#T3)），我们发现语言熟练度和经验年数均负向预测开发者认为Copilot帮助他们编写更好代码的态度。然而，熟练度正向预测开发者认为Copilot帮助他们保持工作状态流畅、专注于更令人满意的工作、减少重复任务的工作量以及更快地执行重复任务。经验年数负向预测开发者在编码会话中感到更少挫败感和在使用Copilot时更快地执行重复任务，但正向预测开发者在陌生语言工作时更快取得进展。这些发现表明，已经高技能且经验丰富的开发者使用Copilot编写更好代码的可能性较低，但Copilot在其他方面，特别是涉及新领域和自动化日常工作时，可以提升他们的生产力。
- en: Experienced developers who are already highly skilled are less likely to write
    better code with Copilot, but Copilot can assist their productivity in other ways.
  id: totrans-split-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 经验丰富的开发者，尽管已经高技能，使用Copilot编写更好的代码的可能性较低，但Copilot可以在其他方面提升他们的生产力。
- en: '**Table 3. Effects of experience on facets of productivity where result of
    linear regression was a statistically significant covariate.**'
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**表3. 经验对生产力各方面的影响，线性回归结果为显著协变量。**'
- en: '|   | **productivity measure** | **coeff** |'
  id: totrans-split-91
  prefs: []
  type: TYPE_TB
  zh: '|   | **生产力度量** | **系数** |'
- en: '| --- | --- | --- |'
  id: totrans-split-92
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| proficiency | `better_code` | <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mo>–</mo> <mn>0</mn> <mo>.</mo> <msup><mn>061</mn> <mo>*</mo></msup></mrow></math>
    |'
  id: totrans-split-93
  prefs: []
  type: TYPE_TB
  zh: '| 熟练度 | `better_code` | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mo>–</mo>
    <mn>0</mn> <mo>.</mo> <msup><mn>061</mn> <mo>*</mo></msup></mrow></math> |'
- en: '| proficiency | `stay_in_flow` | <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>0</mn> <mo>.</mo> <msup><mn>069</mn> <mo>*</mo></msup></mrow></math>
    |'
  id: totrans-split-94
  prefs: []
  type: TYPE_TB
  zh: '| 熟练度 | `stay_in_flow` | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>069</mn> <mo>*</mo></msup></mrow></math> |'
- en: '| proficiency | `focus_satisfying` | <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>0</mn> <mo>.</mo> <msup><mn>067</mn> <mo>*</mo></msup></mrow></math>
    |'
  id: totrans-split-95
  prefs: []
  type: TYPE_TB
  zh: '| 熟练度 | `focus_satisfying` | <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>0</mn> <mo>.</mo> <msup><mn>067</mn> <mo>*</mo></msup></mrow></math>
    |'
- en: '| proficiency | `less_effort_repetitive` | <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>0</mn> <mo>.</mo> <msup><mn>072</mn> <mrow><mo>**</mo></mrow></msup></mrow></math>
    |'
  id: totrans-split-96
  prefs: []
  type: TYPE_TB
  zh: '| 熟练度 | `less_effort_repetitive` | <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>0</mn> <mo>.</mo> <msup><mn>072</mn> <mrow><mo>**</mo></mrow></msup></mrow></math>
    |'
- en: '| proficiency | `repetitive_faster` | <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>0</mn> <mo>.</mo> <msup><mn>055</mn> <mrow><mo>***</mo></mrow></msup></mrow></math>
    |'
  id: totrans-split-97
  prefs: []
  type: TYPE_TB
  zh: '| 熟练度 | `repetitive_faster` | <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>0</mn> <mo>.</mo> <msup><mn>055</mn> <mrow><mo>***</mo></mrow></msup></mrow></math>
    |'
- en: '| years | `better_code` | <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mo>–</mo> <mn>0</mn> <mo>.</mo> <msup><mn>087</mn> <mo>*</mo></msup></mrow></math>
    |'
  id: totrans-split-98
  prefs: []
  type: TYPE_TB
  zh: '| 年数 | `better_code` | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mo>–</mo>
    <mn>0</mn> <mo>.</mo> <msup><mn>087</mn> <mo>*</mo></msup></mrow></math> |'
- en: '| years | `less_frustrated` | <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mo>–</mo> <mn>0</mn> <mo>.</mo> <msup><mn>103</mn> <mrow><mo>**</mo></mrow></msup></mrow></math>
    |'
  id: totrans-split-99
  prefs: []
  type: TYPE_TB
  zh: '| 年数 | `less_frustrated` | <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mo>–</mo> <mn>0</mn> <mo>.</mo> <msup><mn>103</mn> <mrow><mo>**</mo></mrow></msup></mrow></math>
    |'
- en: '| years | `repetitive_faster` | <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mo>–</mo> <mn>0</mn> <mo>.</mo> <msup><mn>054</mn> <mo>*</mo></msup></mrow></math>
    |'
  id: totrans-split-100
  prefs: []
  type: TYPE_TB
  zh: '| 年数 | `repetitive_faster` | <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mo>–</mo> <mn>0</mn> <mo>.</mo> <msup><mn>054</mn> <mo>*</mo></msup></mrow></math>
    |'
- en: '| years | `unfamiliar_progress` | <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>0</mn> <mo>.</mo> <msup><mn>081</mn> <mo>*</mo></msup></mrow></math>
    |'
  id: totrans-split-101
  prefs: []
  type: TYPE_TB
  zh: '| 年数 | `unfamiliar_progress` | <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>0</mn> <mo>.</mo> <msup><mn>081</mn> <mo>*</mo></msup></mrow></math>
    |'
- en: '**Table 4.  Correlations of acceptance rate with aggregate productivity broken
    down by subgroup.**'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 4.  接受率与子组别的总体生产力相关性。**'
- en: '| **subgroup** | **coeff** | **n** |'
  id: totrans-split-103
  prefs: []
  type: TYPE_TB
  zh: '| **子组别** | **系数** | **n** |'
- en: '| --- | --- | --- |'
  id: totrans-split-104
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| none | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>135</mn> <mo>*</mo></msup></mrow></math> | 344 |'
  id: totrans-split-105
  prefs: []
  type: TYPE_TB
  zh: '| 无 | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>135</mn> <mo>*</mo></msup></mrow></math> | 344 |'
- en: '| <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mo>≤</mo></math>
    2y | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>178</mn> <mrow><mo>**</mo></mrow></msup></mrow></math> |
    451 |'
  id: totrans-split-106
  prefs: []
  type: TYPE_TB
  zh: '| <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mo>≤</mo></math>
    2 年 | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>178</mn> <mrow><mo>**</mo></mrow></msup></mrow></math> |
    451 |'
- en: '| 3 – 5 y | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>255</mn> <mrow><mo>***</mo></mrow></msup></mrow></math> |
    358 |'
  id: totrans-split-107
  prefs: []
  type: TYPE_TB
  zh: '| 3 – 5 年 | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>255</mn> <mrow><mo>***</mo></mrow></msup></mrow></math> |
    358 |'
- en: '| 6 – 10 y | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>265</mn> <mrow><mo>***</mo></mrow></msup></mrow></math> |
    251 |'
  id: totrans-split-108
  prefs: []
  type: TYPE_TB
  zh: '| 6 – 10 年 | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>265</mn> <mrow><mo>***</mo></mrow></msup></mrow></math> |
    251 |'
- en: '| 11 – 15 y | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>171</mn> <mo>*</mo></msup></mrow></math> | 162 |'
  id: totrans-split-109
  prefs: []
  type: TYPE_TB
  zh: '| 11 – 15 年 | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>171</mn> <mo>*</mo></msup></mrow></math> | 162 |'
- en: '| <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mo>≥</mo></math>
    16 y | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>153</mn> <mo>*</mo></msup></mrow></math> | 214 |'
  id: totrans-split-110
  prefs: []
  type: TYPE_TB
  zh: '| <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mo>≥</mo></math>
    16 年 | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>153</mn> <mo>*</mo></msup></mrow></math> | 214 |'
- en: '| JavaScript | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>227</mn> <mrow><mo>***</mo></mrow></msup></mrow></math> |
    1184 |'
  id: totrans-split-111
  prefs: []
  type: TYPE_TB
  zh: '| JavaScript | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>227</mn> <mrow><mo>***</mo></mrow></msup></mrow></math> |
    1184 |'
- en: '| TypeScript | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>165</mn> <mrow><mo>***</mo></mrow></msup></mrow></math> |
    654 |'
  id: totrans-split-112
  prefs: []
  type: TYPE_TB
  zh: '| TypeScript | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>165</mn> <mrow><mo>***</mo></mrow></msup></mrow></math> |
    654 |'
- en: '| Python | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>172</mn> <mrow><mo>***</mo></mrow></msup></mrow></math> |
    716 |'
  id: totrans-split-113
  prefs: []
  type: TYPE_TB
  zh: '| Python | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>172</mn> <mrow><mo>***</mo></mrow></msup></mrow></math> |
    716 |'
- en: '| other | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>178</mn> <mrow><mo>***</mo></mrow></msup></mrow></math> |
    1829 |'
  id: totrans-split-114
  prefs: []
  type: TYPE_TB
  zh: '| 其他 | <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>0</mn>
    <mo>.</mo> <msup><mn>178</mn> <mrow><mo>***</mo></mrow></msup></mrow></math> |
    1829 |'
- en: Junior developers not only report higher productivity gains; they also tend
    to accept more suggestions. However, the connection observed in section “What
    Drives Perceived Productivity” is not solely due to differing experience levels.
    In fact, the connection persists in every single experience group, as shown in
    Figure [5](#F5).
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 初级开发人员不仅报告更高的生产力增益；他们还倾向于接受更多建议。然而，在“什么驱动感知生产力”的部分观察到的连接并不仅仅是因为经验水平不同。事实上，这种连接在每一个经验组中都存在，如图[5](#F5)所示。
- en: Variation over Time
  id: totrans-split-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随时间的变化
- en: Its connection to perceived productivity motivates a closer look at the acceptance
    rate and what factors influence it. Acceptance rate typically increases over the
    board when the model or underlying prompt-crafting techniques are improved. But
    even if these conditions are held constant (the study period did not see changes
    to either), there are more fine-grained temporal patterns emerging.
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
  zh: 它与感知生产力的联系促使我们更加关注接受率及其受影响因素。当模型或底层提示生成技术得到改进时，接受率通常会全面提升。但即使这些条件保持不变（研究期间未见到任何变化），也会出现更精细的时间模式。
- en: For coherence of the cultural implications of time of day and weekdays, all
    data in this section was restricted to users from the U.S. (whether in the survey
    or not). We used the same time frame as for the investigation in the previous
    section. In the absence of more fine-grained geolocation, we used the same time
    zone to interpret timestamps and for day boundaries (Pacific Standard Time), recognizing
    that this will introduce some level of noise due to the inhomogeneity of U.S.
    time zones.
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保时间和工作日的文化影响的一致性，本节中的所有数据都限制在美国用户（无论是否在调查中）。我们使用了与上一节调查相同的时间框架。在缺乏更精细地理定位的情况下，我们使用相同的时区解释时间戳和日期界限（太平洋标准时间），并认识到这将由于美国时区的不均匀性引入一定程度的噪音。
- en: 'Nevertheless, we observe strong regular patterns in overall acceptance rate
    (Figure [6](#F6)). These lead us to distinguish three different time regimes,
    all of which are statistically significantly distinct at <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mi>p</mi><mo><</mo><mn>0</mn><mo>.</mo><mn>001</mn><mo>%</mo></mrow></math>
    (using bootstrap resampling):'
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我们观察到整体接受率存在强烈的正规模式（图[6](#F6)）。这些模式使我们能够区分三种不同的时间制度，所有这些制度在统计上都显著不同于<math
    xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>p</mi><mo><</mo><mn>0</mn><mo>.</mo><mn>001</mn><mo>%</mo></mrow></math>（使用自举重抽样）。
- en: '[![Average acceptance rate during the week. Each point represents the average
    for a one-hour period, whereas the shaded ribbon shows the min-max variation during
    the observed four-week period.](img/3d6cf6b3a9ef192278219bcd47735ef7.png)](https://cacm.acm.org/wp-content/uploads/2024/02/patterns_white_2.png)'
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[![每周平均接受率。每个点表示一个小时的平均值，阴影带显示了观察到的四周期间的最小-最大变化。](img/3d6cf6b3a9ef192278219bcd47735ef7.png)](https://cacm.acm.org/wp-content/uploads/2024/02/patterns_white_2.png)'
- en: '**Figure 6.  Average acceptance rate during the week. Each point represents
    the average for a one-hour period, whereas the shaded ribbon shows the min-max
    variation during the observed four-week period.**'
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6.  每周平均接受率。每个点表示一个小时的平均值，阴影带显示了观察到的四周期间的最小-最大变化。**'
- en: 'The weekend: Saturdays and Sundays, where the average acceptance rate is comparatively
    high at <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>23</mn><mo>.</mo><mn>5</mn><mo>%</mo></mrow></math>.'
  id: totrans-split-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 周末：星期六和星期日，此时平均接受率相对较高，为<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>23</mn><mo>.</mo><mn>5</mn><mo>%</mo></mrow></math>。
- en: 'Typical non-working hours during the week: evenings after 4:00 pm PST until
    mornings 7:00 am PST, where the average acceptance rate is also rather high at
    <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mn>23</mn><mo>%</mo></mrow></math>.'
  id: totrans-split-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一周中的典型非工作时间：太平洋标准时间下午4:00后至上午7:00，此时平均接受率也相当高，为<math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>23</mn><mo>%</mo></mrow></math>。
- en: Typical working hours during the week from 7:00 am PST to 4:00 pm PST, where
    the average acceptance rate is much lower at <math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>21</mn><mo>.</mo><mn>2</mn><mo>%</mo></mrow></math>.
  id: totrans-split-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一周中的典型工作时间从太平洋标准时间上午7:00到下午4:00，此时平均接受率要低得多，为<math xmlns="http://www.w3.org/1998/Math/MathML"
    display="inline"><mrow><mn>21</mn><mo>.</mo><mn>2</mn><mo>%</mo></mrow></math>。
- en: Conclusions
  id: totrans-split-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: When we set out to connect the productivity benefit of GitHub Copilot to usage
    measurements from developer activity, we collected measurements about acceptance
    of completions in line with prior work, but also developed persistence metrics,
    which arguably capture sustained and direct impact on the resulting code. We were
    surprised to find acceptance rate (number of acceptances normalized by the number
    of shown completions) to be better correlated with reported productivity than
    our measures of persistence.
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们着手将GitHub Copilot的生产力优势与开发者活动的使用度量连接起来时，我们收集了关于接受完成的度量，与之前的工作保持一致，同时也开发了持久性指标，据称捕捉了对生成代码的持续和直接影响。我们惊讶地发现接受率（接受次数与显示的完成次数归一化后的比率）与报告的生产力相关性更好，超过了我们的持久性测量。
- en: In hindsight, this makes sense. Coding is not typing, and GitHub Copilot’s central
    value lies not in being the way the user enters most of their code. Instead, it
    lies in helping the user to make the best progress toward their goals. A suggestion
    that serves as a useful template to tinker with may be as good or better than
    a perfectly correct (but obvious) line of code that only saves the user a few
    keystrokes.
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
  zh: 事后看来，这是有道理的。编码不是简单的打字，GitHub Copilot 的核心价值不在于成为用户输入大部分代码的方式。相反，它的价值在于帮助用户朝着他们的目标取得最佳进展。一个作为有用模板供调整的建议，可能比一个完全正确（但显而易见）且仅仅为用户节省了几次击键的代码行更好或者同样好。
- en: This suggests that a narrow focus on the correctness of suggestions would not
    tell the whole story for these kinds of tooling. Instead one could view code suggestions
    inside an IDE to be more akin to a conversation. While chatbots such as ChatGPT
    are already used for programming tasks, they are explicitly structured as conversations.
    Here, we hypothesize that interactions with Copilot, which is not a chatbot, share
    many characteristics with natural-language conversations.
  id: totrans-split-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明，狭窄地关注建议的正确性并不能完整地解释这类工具的全部情况。相反，我们可以将IDE内的代码建议视为更类似于对话的形式。虽然像ChatGPT这样的聊天机器人已经被用于编程任务，但它们明确被结构化为对话形式。在这里，我们假设与非聊天机器人Copilot的互动具有许多类似于自然语言对话的特征。
- en: We see anecdotal evidence of this in comments posted about GitHub Copilot online
    (see Appendix E for examples) in which users talk about sequences of interactions.
    A conversation turn in this context consists of the prompt in the completion request
    and the reply as the completion itself. The developer’s response to the completion
    arises from the subsequent changes which are incorporated in the next prompt to
    the model. There are clear programming parallels to factors such as specificity
    and repetition that have been identified to affect human judgements of conversation
    quality.^([18](#bib18)) Researchers have already investigated the benefits of
    natural-language feedback to guide program synthesis,^([2](#bib2)) so the conversational
    framing of coding completions is not a radical proposal. But neither is it one
    we have seen followed yet.
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在线上关于GitHub Copilot的评论中我们可以看到此类的实证证据（详见附录 E），用户们在其中讨论了互动的序列。在这种情况下，对话转折由完成请求中的提示和完成本身的回复组成。开发者对完成的响应来自随后的变更，这些变更被合并到对模型的下一个提示中。对于影响对话质量的因素，如特异性和重复，已经明确了与编程的明显并行之处^([18](#bib18))。研究人员已经调查了自然语言反馈在指导程序综合方面的好处^([2](#bib2))，因此将编码完成的对话框架视为不是一种激进的建议。但我们还没有看到这一建议被采纳。
