["```\n>  > PS I tried it today.. plain RC4 can excellently be executed manually\n>  > (base 52 or 26, instead of 256) using a deck of cards :-)\n>\n>i must have missed the original message about that.  could you share\n>the details with the list?\n\nThere was no previous message.. it was more like a random comment\n\nUsing RC4 with a deck of cards:\n\nNumber of cards: (keysizes rounded down to a power of 2)\n* 26 - Roughly equivalent to 64-bit encryption\n* 52 - Roughly equivalent to 128-bit encryption\n\nOther values are possible too, 26 are 52 are simply convenient. \nDifferent ranges might however allow for use of digits and \npunctuation in messages, so don't feel too constrained to these two \nvalues.\n\nYou also need two distinct \"markers\", for which you might use \njoker-cards, dice, or random objects.\n\nAll calculation is done modulo n, where n is the number of cards used.\n\n(now and then I might use the word \"byte\", but in this context it \ndoesn't mean a value in range 0..255 but a value in range 0..(n-1), \nobviously)\n\nEnumeration of the cards:\nWhat I usually do is give the Ace value 1, cards 2..10 values 2..10, \nJ/Q/K values 11..13\\. For spades, add nothing, for hearts add 13, and \noptionally for diamonds add 26 and for clubs add 39\\. The last card \n(king of hearts (26) or clubs (52)) gets value 0 because of the \nmodulo.\n\nWhen putting them on the table, they can be arranged in rows of 13, \nor rows of 10, which every you find easiest to locate a card by index \nin. (I recommend putting card 0 at the topleft)\n\nEncoding of text:\nWell, use anything you like! A possible encoding is: 0 = space, 1 = \nA, 2 = B, .... 16 = P, 17 = Q / X, 18 = R, .. 23 = W, 24 = Y, 25 = Z. \nWhen using n=52, mod-26 the output of the keystream. When using other \nvalues for n, design your own encoding.\n\nInitial order of the cards / key scheduling:\n\nMethod 1\\. Give the cards a random permutation and duplicate the \nconfiguration of the deck. One deck is now the encryption deck and \none the decryption deck. By keeping track of the byte-offset within \nthe RC4 key stream, you can use the deck for quite a while before you \nrisk deterioration of the security. The advantages are ease of use \nand high security, the disadvantages are the requirement for both \nparties to meet (or exchange a long n-value key) in advance and the \ncards must stay in order, so you can't play a game with them :-)\n\nMethod 2\\. Agree on some way to determine a key (which consists of \nvalues in range 0..(n-1), usually an encoded string of text) and then \nuse the standard RC4 key scheduling system. Advantages: character \nstring can be used as key, key can be of any length, deck doesn't \nneed to be pre-arranged. Disadvantages: RC4 key scheduling takes \nabout as much time as encrypting n characters.\n\nMethod 3\\. Use your own. Security through obscurity.\n\nThe two markers, X and Y are usually initially placed on card 0, but \nI suppose different values work too. Perhaps you can even vary them, \nuse them as a kind of initialization vector. (Maybe this will\n\nEn-/decryption: Standard RC4, except all calculation is done modulo n \ninstead of modulo 256\\. Also, to encrypt a byte add the keystream byte \nto it, to decrypt use subtract the keystream byte from it. (If you \npick a power of 2 for n, instead of 26 or 52, you can use \nalternatively use xor like normal RC4).\n\nRC4 keystream generation using cards, per byte:\n1\\. Move the X marker to the next card\n2\\. Move the Y marker i cards forward where i is the value of the card \nmarked by X\n3\\. Swap the cards marked by X and Y\n4\\. The keystream byte is the value of the ith card on table, where i \nis the sum of the value of the card marked by X and the card marked \nby Y\n\nRC4 key scheduling (for Method 2), per byte: (loop i from 0 to n-1)\n1\\. Put the X marker on the ith card\n2\\. Move the Y marker i cards forward where i is the sum of the value \nof the card marked by X, and the ith character of the key (0-based, \nrepeat if needed)\n3\\. Swap the cards marked by X and Y\n\nThat's all I think.. if there are any questions I'll hear 'em\n\n  -xmath\n\nMatthijs van Duin\n- PGP Key: 0xB6205CCB   <finger:[EMAIL PROTECTED]> -\n- FP: D73C 9EE3 5F6B E5D5 8E19  2CBE 4648 8C3E B620 5CCB -\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n```"]