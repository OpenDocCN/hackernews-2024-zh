- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:01:43'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 15:01:43
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: An alternate pattern-matching conditional for Elisp [LWN.net]
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作为 Emacs Lisp 的另一种模式匹配条件 [LWN.net]
- en: 来源：[https://lwn.net/Articles/961682/](https://lwn.net/Articles/961682/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://lwn.net/Articles/961682/](https://lwn.net/Articles/961682/)
- en: '| **LWN.net needs you!**Without subscribers, LWN would simply not exist. Please
    consider [signing up for a subscription](/subscribe/) and helping to keep LWN
    publishing |'
  id: totrans-split-6
  prefs: []
  type: TYPE_TB
  zh: '| **LWN.net 需要您的支持！** 没有订阅者，LWN 就无法存在。请考虑[订阅](/subscribe/)并帮助维持 LWN 的出版活动。
    |'
- en: By **Jake Edge**
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：**Jake Edge**
- en: March 1, 2024
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年3月1日
- en: One of the outcomes of the (extremely) lengthy discussion about using Common
    Lisp features in Emacs Lisp (Elisp), which we [looked at](/Articles/951090/) back
    in November, was an effort to start removing some of those uses from Emacs. The
    rewrite of some of the Elisp in Emacs that uses the Common Lisp library (cl-lib)
    was [started by Richard Stallman](/ml/emacs-devel/E1qvq5s-0003LC-O6@fencepost.gnu.org/)
    as a way to reduce the cognitive load needed for maintaining Emacs itself. Since
    then, he has broadened his efforts to simplify Elisp by adding a new [pattern-matching
    conditional](https://www.gnu.org/software/emacs/manual/html_node/elisp/Pattern_002dMatching-Conditional.html)
    that would be a competitor to [`pcase`](https://www.gnu.org/software/emacs/manual/html_node/elisp/pcase-Macro.html),
    which is a longstanding macro that he finds overly complex.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: Emacs Lisp（Elisp）中使用 Common Lisp 特性的（极度）长时间讨论的结果之一，我们在十一月份[曾经看过](/Articles/951090/)，是开始从
    Emacs 中移除一些这些使用。Emacs 中使用 Common Lisp 库（cl-lib）的 Elisp 的一些重写工作，由[理查德·斯托曼](/ml/emacs-devel/E1qvq5s-0003LC-O6@fencepost.gnu.org/)
    开始，旨在减少维护 Emacs 所需的认知负荷。从那时起，他扩展了简化 Elisp 的工作，通过添加一个新的[模式匹配条件](https://www.gnu.org/software/emacs/manual/html_node/elisp/Pattern_002dMatching-Conditional.html)，这将与
    [`pcase`](https://www.gnu.org/software/emacs/manual/html_node/elisp/pcase-Macro.html)
    竞争，后者是他认为过于复杂的长期宏。
- en: Complexity
  id: totrans-split-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 复杂性
- en: Back in mid-November, Stallman [noted](/ml/emacs-devel/E1r3SgH-0007Rb-BU@fencepost.gnu.org/)
    that he found the "<q>little language</q>" that `pcase` defines to be "<q>so concise
    it is downright cryptic</q>". He recognizes that trying to solve the same set
    of problems combining simpler Elisp constructs, such as [`cond`](https://www.gnu.org/software/emacs/manual/html_node/elisp/Conditionals.html#index-cond)
    and [`let`](https://www.gnu.org/software/emacs/manual/html_node/eintr/let.html),
    is "<q>long-winded and cumbersome</q>", but `pcase` has taken the desire for conciseness
    to an undesirable extreme. That imposes a cost on all Emacs developers who have
    to maintain code using `pcase`, he said, so he decided to adapt some `pcase` features
    in other constructs.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 回到十一月中旬，斯托曼[指出](/ml/emacs-devel/E1r3SgH-0007Rb-BU@fencepost.gnu.org/)，他发现 `pcase`
    定义的 "<q>小语言</q>" "<q>如此简洁，简直晦涩难懂</q>"。他认识到，尝试通过结合更简单的 Elisp 构造，如 [`cond`](https://www.gnu.org/software/emacs/manual/html_node/elisp/Conditionals.html#index-cond)
    和 [`let`](https://www.gnu.org/software/emacs/manual/html_node/eintr/let.html)，解决相同集合的问题是
    "<q>冗长且笨重</q>"，但 `pcase` 已经把简洁性的欲望推到了不合理的极端。他说，这给所有必须维护使用 `pcase` 代码的 Emacs 开发者带来了成本，因此他决定在其他结构中适应一些
    `pcase` 特性。
- en: Predictably, that led to a long thread—standard fare for the emacs-devel mailing
    list—discussing whether there is a need for a `pcase` alternative, what one might
    look like, and more. Stallman [started a new sub-thread](/ml/emacs-devel/E1r4Bci-00043P-VJ@fencepost.gnu.org/)
    to investigate his ideas for a new macro, `cond*`, which would provide a simpler
    pattern-matching construct that is still more concise than using "<q>old-fashioned
    Lisp</q>". His new macro is meant to combine the conditional `cond` form, which
    handles checking for multiple different values—something like [switch constructs](https://en.wikipedia.org/wiki/Switch_statement)
    in other languages—with `let`, which temporarily binds values to variables within
    a limited scope. `pcase` and `cond*` are both designed to provide an [ML-style
    pattern-matching conditional](https://en.wikibooks.org/wiki/Standard_ML_Programming/Expressions#Case_expressions_and_pattern-matching)
    mechanism for Elisp.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可预见的是，这引发了一系列长篇讨论——对于 emacs-devel 邮件列表来说是标准操作——讨论是否需要 `pcase` 的替代品，可能的替代品是什么样子，等等。斯托曼[开启了一个新的子线程](/ml/emacs-devel/E1r4Bci-00043P-VJ@fencepost.gnu.org/)
    来研究他对一个新宏 `cond*` 的想法，这将提供一个更简单的模式匹配构造，仍然比使用 "<q>老式 Lisp</q>" 更为简洁。他的新宏旨在结合条件形式
    `cond`，处理多个不同值的检查——类似于其他语言中的 [switch 语句](https://en.wikipedia.org/wiki/Switch_statement)，以及
    `let`，在有限的作用域内临时绑定变量。`pcase` 和 `cond*` 都旨在为 Elisp 提供一种[ML风格的模式匹配条件](https://en.wikibooks.org/wiki/Standard_ML_Programming/Expressions#Case_expressions_and_pattern-matching)机制。
- en: 'A simple `pcase` example may give the general flavor of these constructs, but
    there is a great deal more that both can do, including pattern matching and pulling
    lists and other data structures apart, which is known as "destructuring". This
    example, taken from the `pcase` documentation, handles several different types
    (e.g. string, symbol) for a return code, producing an appropriate message for
    each:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的`pcase`示例可能会展示这些结构的一般风格，但它们可以做的远不止这些，包括模式匹配和拆解列表及其他数据结构，这被称为“解构”。这个示例来自`pcase`文档，处理了多种不同类型（例如字符串、符号）的返回码，为每种情况生成适当的消息：
- en: '[PRE0]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Stallman characterized his approach as trying to "<q>avoid the kludginess of
    pcase''s bells-and-whistles-for-everything approach</q>". Naturally, that led
    to further arguments in favor of `pcase`. For example, Michael Heerdegen [said](/ml/emacs-devel/878r6u3s7f.fsf@web.de/):
    "<q>In my opinion `pcase'' comes very close to the optimal solution for its task.</q>"'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: Stallman 将他的方法描述为试图“<q>避免 pcase 的 '什么都有的铃铛和哨子' 方法的笨拙</q>”。自然地，这导致了对`pcase`的进一步争论。例如，Michael
    Heerdegen [说](/ml/emacs-devel/878r6u3s7f.fsf@web.de/)：“<q>在我看来，`pcase`非常接近其任务的最佳解决方案。</q>”
- en: By mid-December, Stallman was [asking](/ml/emacs-devel/E1rF4wk-0006QG-G6@fencepost.gnu.org/)
    about features needed for `cond*` "<q>so that it is rare to encounter a pcase
    that can't be replaced cleanly</q>". That conversation took place in [another
    branch](/ml/emacs-devel/E1rF4wi-0006Q3-Ne@fencepost.gnu.org/) of the original
    `pcase`-replacement discussion, which makes it a little hard(er) to follow. In
    that part of the thread, others were working with Stallman on `cond*`; once again,
    there were numerous helpful suggestions and clarification queries, amidst a few
    grumbles. Stallman was clearly making progress on the feature, however.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到了十二月中旬，Stallman 开始询问关于`cond*`所需功能的问题“<q>以便几乎不会遇到无法干净替换的 pcase</q>”。这场谈话发生在原始`pcase`替换讨论的[另一个分支](/ml/emacs-devel/E1rF4wi-0006Q3-Ne@fencepost.gnu.org/)中，这使得跟进起来稍显困难。在讨论串的这一部分中，其他人与
    Stallman 共同努力推动`cond*`；再次，围绕这个功能，有许多有用的建议和澄清查询，还夹杂着一些抱怨。不过，显然 Stallman 在推进这个功能上取得了进展。
- en: 'In mid-November, Alan Mackenzie had [raised an issue](/ml/emacs-devel/ZVp_3zG-W5EnYfRT@ACM/)
    that has seemingly lingered with `pcase` since it was [added](https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=d02c9bcd096c44b4e3d5e2834c75967b56cdecdd)
    in 2010: documentation. He pointed to a [post](https://lists.gnu.org/archive/html/emacs-devel/2015-12/msg00741.html)
    he had made in 2015 that described the problems that existed in the `pcase` documentation;
    many of those were addressed at the time, but there is an [ongoing effort](/ml/emacs-devel/19a64b7a-cec0-ed8a-d413-096451cc7413@gmail.com/),
    led by Jim Porter, to improve the documentation for the macro.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 十一月中旬，Alan Mackenzie 提出了一个问题，似乎自`pcase`自2010年[添加](https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=d02c9bcd096c44b4e3d5e2834c75967b56cdecdd)以来一直存在：文档问题。他指出了他在2015年发表的[帖子](https://lists.gnu.org/archive/html/emacs-devel/2015-12/msg00741.html)，描述了`pcase`文档中存在的问题；当时已解决了其中许多问题，但目前仍在进行一项由
    Jim Porter 主导的[持续努力](/ml/emacs-devel/19a64b7a-cec0-ed8a-d413-096451cc7413@gmail.com/)，以改进这个宏的文档。
- en: Porter listed multiple areas that need attention, including moving the presentation
    of the backquote ("[PRE1]
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: Porter 列出了需要注意的多个领域，包括移动反引号的呈现（“[PRE1]
- en: (cond*
  id: totrans-split-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`(cond*`'
- en: (CONDITION FORM)
  id: totrans-split-20
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`(CONDITION FORM)`'
- en: ((bind* (x 42)))  ; create a binding of 42 to x
  id: totrans-split-21
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`((bind* (x 42)))` ；将 42 绑定到 x'
- en: (CONDITION-using-x FORM-using-x)
  id: totrans-split-22
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`(CONDITION-using-x FORM-using-x)`'
- en: '...)'
  id: totrans-split-23
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...)'
- en: '```'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'As João Távora [noted](/ml/emacs-devel/CALDnm51H-3vPJLEm40YbX5K559O7mRTxeXg5hG0no73y2Wu4gw@mail.gmail.com/),
    others had already asked about that behavior, but he is "<q>not sure we eventually
    clarified it</q>". He also wondered if `cond*` could be built using `pcase`; if
    it is a strict subset of the features of `pcase`, it might help to do so. It "<q>could
    actually facilitate the adoption path for ''cond*'' (as questionable as that path
    may still be, at least for some parties)</q>". But Stallman [does not see things
    that way](/ml/emacs-devel/E1rRO8o-0001R8-Mx@fencepost.gnu.org/); he listed the
    advantages he sees with `cond*` and said that he plans to add the new macro to
    Emacs:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 João Távora 的[注释](/ml/emacs-devel/CALDnm51H-3vPJLEm40YbX5K559O7mRTxeXg5hG0no73y2Wu4gw@mail.gmail.com/)，其他人已经询问过这种行为，但他“<q>不确定最终我们是否澄清了这一点</q>”。他还想知道是否可以使用`pcase`来构建`cond*`；如果它是`pcase`功能的严格子集，这样做可能有所帮助。“<q>实际上可能有助于
    'cond*' 的采用路径（尽管这条路径对某些方面仍然可疑）</q>”。但 Stallman [并不这样看](/ml/emacs-devel/E1rRO8o-0001R8-Mx@fencepost.gnu.org/)；他列举了他认为`cond*`具有的优势，并表示计划将这个新宏添加到
    Emacs 中：
- en: 'cond* has four basic advances over pcase: making bindings that cover the rest
    of the body, matching patterns against various data objects (not forcibly the
    same one), use of ordinary Lisp expressions as conditions in clauses, and the
    [ability] to make bindings and continue with further clauses.'
  id: totrans-split-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: cond* 在四个基本方面超过了 pcase：创建覆盖其余部分的绑定，匹配不同数据对象的模式（不一定是相同的对象），将普通的 Lisp 表达式作为子句中的条件，以及[能力]在绑定后继续执行进一步的子句。
- en: I'm going to do some more testing and then install cond*.
  id: totrans-split-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我将进行更多测试，然后安装 cond*。
- en: 'Adam Porter [asked](/ml/emacs-devel/86a97153-94eb-4df4-b135-4127d2a00057@alphapapa.net/)
    Stallman to reconsider installing `cond*` into Emacs proper, suggesting that he
    should consider enhancing `pcase` rather than add a whole new facility that developers
    will need to learn. One of the complaints about `pcase` is that it is a burden
    to learn; "<q>How will that burden be helped by having to learn both Pcase and
    cond*?</q>" (Adam) Porter pointed out that `pcase` could handle many of the advances
    Stallman had listed, so there may be a path to enhance `pcase`:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: Adam Porter [要求](/ml/emacs-devel/86a97153-94eb-4df4-b135-4127d2a00057@alphapapa.net/)
    Stallman 重新考虑将 `cond*` 安装到 Emacs 中，建议他考虑增强 `pcase` 而不是添加一个完全新的工具，开发者需要学习。关于 `pcase`
    的一个抱怨是它学习起来很繁琐；"<q>学习 Pcase 和 cond* 会如何减轻这种负担？</q>" (Adam) Porter 指出 `pcase` 可以处理
    Stallman 列出的许多进展，因此可能有改进 `pcase` 的路径：
- en: Your stated reasons for writing cond* were various shortcomings of Pcase. Some
    of those, e.g. the documentation, have already had volunteers step up to address.
    The others could also be addressed in various ways. I've suggested a few, but
    you haven't explained the reasons for rejecting them.
  id: totrans-split-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你写 cond* 的陈述原因是 Pcase 的各种缺陷。其中一些，比如文档，已经有志愿者站出来解决了。其他问题也可以通过各种方式解决。我提出了一些建议，但你还没有解释拒绝它们的原因。
- en: 'As might be guessed, Stallman [did not agree](/ml/emacs-devel/E1rSH01-00025m-B1@fencepost.gnu.org/):'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如可以猜到的那样，Stallman [不同意](/ml/emacs-devel/E1rSH01-00025m-B1@fencepost.gnu.org/)。
- en: If pcase lacked features for certain specific jobs, it would be [easy] to fix
    that by adding a few features. However, the problem with pcase is that it has
    too many features for the job it does. cond* does the same jobs with fewer features
    because they work together better.
  id: totrans-split-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 pcase 缺少特定工作的功能，通过添加几个功能来修复它将是[容易]的。然而，pcase 的问题在于它对它所做的工作有太多功能。cond*以更少的功能完成相同的工作，因为它们更好地协作。
- en: ELPA?
  id: totrans-split-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ELPA？
- en: Kangas [said](/ml/emacs-devel/CADwFkmmCYZqGrF5KtSED2RHJuqR-nbo0CDL9gSrHFVBD7zUGfQ@mail.gmail.com/)
    that he was not closely following the discussion, but was surprised to hear that
    "<q>there was a plan to install `cond*', or I would have spoken up sooner</q>".
    Adding `cond*` will necessarily make the job of maintaining Emacs harder, since
    `pcase` is not going away, thus there will be "<q>not one, but two relatively
    complex macros</q>" that he will have to know and understand. That might be worth
    doing if `cond*` offered substantial benefits, but he does not see that; "<q>What
    I see instead is a mere _version_ of `pcase'.</q>" So, he recommended making a
    new package for the [GNU Emacs Lisp Package Archive](https://elpa.gnu.org/) (ELPA),
    which will provide "<q>a good way of exploring an alternative version of an existing
    macro</q>".
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: Kangas [说](/ml/emacs-devel/CADwFkmmCYZqGrF5KtSED2RHJuqR-nbo0CDL9gSrHFVBD7zUGfQ@mail.gmail.com/)
    他没有密切关注讨论，但对听说 "<q>有计划安装 `cond*`，我会更早表态的</q>" 感到惊讶。添加 `cond*` 将必然使得维护 Emacs 的工作更加困难，因为
    `pcase` 并不会消失，因此将会有 "<q>不只是一个，而是两个相对复杂的宏</q>" 他必须知道和理解。如果 `cond*` 提供了显著的好处，那么可能值得这样做，但他没有看到；"<q>我看到的只是
    `pcase` 的一个版本。</q>" 因此，他建议在 [GNU Emacs Lisp 包存档](https://elpa.gnu.org/) (ELPA)
    上制作一个新包，这将提供 "<q>探索现有宏的替代版本的好方法</q>"。
- en: The lack of a plan to wholesale replace `pcase` with `cond*` was seen as a good
    thing by Kangas. That avoids a bunch of code churn and bugs that would naturally
    result. But Mackenzie [disagreed](/ml/emacs-devel/ZbD_WHup2fSmtYwi@ACM/); he thinks
    that fully replacing `pcase` would be a good goal for "<q>improving the readability
    and maintainability of our code at a stroke</q>". He thinks that putting it into
    an ELPA library is "<q>a way of ensuring it never comes to anything and just gets
    forgotten about</q>"; a feature branch with an eventual merge into the Emacs mainline
    would be a better course.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 没有计划彻底用 `cond*` 替换 `pcase` 被 Kangas 视为一件好事。这样可以避免一堆自然而然产生的代码变动和错误。但 Mackenzie
    [持不同意见](/ml/emacs-devel/ZbD_WHup2fSmtYwi@ACM/)；他认为完全替换 `pcase` 是“<q>一举提高代码的可读性和可维护性</q>”的一个好目标。他认为将其放入
    ELPA 库是“<q>确保它永远不会成为现实，只会被遗忘的一种方式</q>”；一个包含最终合并到 Emacs 主线的功能分支会是更好的方向。
- en: 'Like several others, Monnier [believes](/ml/emacs-devel/jwvv87kvtey.fsf-monnier+emacs@gnu.org/)
    that `cond*` is simply further complicating Elisp. On the other hand, he said,
    it would be a bit hypocritical for him to oppose it:'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 像其他几位一样，Monnier [认为](/ml/emacs-devel/jwvv87kvtey.fsf-monnier+emacs@gnu.org/)
    `cond*` 只是进一步复杂化 Elisp。另一方面，他说，如果他反对它，那也有点虚伪：
- en: So, I'm not super enthusiastic about adding such a new form, but being responsible
    for the introduction of several such new constructs in ELisp over the years, I
    do feel a bit like the pot calling the kettle black.
  id: totrans-split-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 所以，我对添加这样一种新形式并不是非常热衷，但多年来在 ELisp 中引入了几种这样的新构造后，我确实感觉有点像孤独奋斗者。
- en: So, rather than oppose it, I'll just point out some things which I think could
    be improved (or which offend my taste, as the case may be).
  id: totrans-split-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 所以，与其反对它，我只是指出一些我认为可以改进的事情（或者可能触及我的口味）。
- en: 'What followed was an extended back-and-forth between Stallman and Monnier about
    `cond*`, its overlaps with `pcase` (and how the two could perhaps "meet in the
    middle"), some deficiencies in the regular `cond` form with respect to binding
    inside of the conditional, and more. Much of the discussion revolved around Monnier''s
    concern that the two constructs had overlapping, but still different, pattern
    languages:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 随后 Stallman 和 Monnier 之间进行了长时间的来回讨论 `cond*`，它与 `pcase` 的重叠（以及这两者如何可能“中间会合”），以及常规
    `cond` 形式在条件内部绑定方面的一些不足之处，等等。许多讨论都围绕 Monnier 的担忧展开，即这两种构造有重叠但仍然不同的模式语言：
- en: '[...] I see a fairly extensive but hardcoded pattern language, which seems
    like a regression compared to Pcase where the pattern language is built from a
    few primitives only (with the rest defined on top via `pcase-defmacro`). The worst
    part, tho, is that the two pattern languages are very similar, and I can''t see
    any good reason for the differences.'
  id: totrans-split-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[...] 我看到一个相当广泛但硬编码的模式语言，与 Pcase 相比似乎是一个倒退，后者只从几个原语构建模式语言（通过 `pcase-defmacro`
    定义其余部分）。最糟糕的部分是，这两种模式语言非常相似，我看不出有任何好理由造成这些差异。'
- en: 'Monnier [asserted](/ml/emacs-devel/jwvttmt8x38.fsf-monnier+emacs@gnu.org/)
    that Stallman could just reuse the low-level pattern language of `pcase` for `cond*`,
    which would have a number of benefits: "<q>Less work, less code duplication, less
    documentation duplication, less to learn for coders. And presumably you''d then
    improve Pcase, so everyone wins.</q>"'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: Monnier [断言](/ml/emacs-devel/jwvttmt8x38.fsf-monnier+emacs@gnu.org/) Stallman
    可以简单地重用 `pcase` 的低级模式语言用于 `cond*`，这将带来许多好处：“<q>减少工作量，减少代码重复，减少文档重复，减少编码人员学习的负担。而且您可能会改进
    Pcase，所以每个人都会受益。</q>”
- en: The discussion continues as of this writing, though it is unclear which direction
    Stallman will take with the pattern language. That language, which is implemented
    by the `match*` form that would be added for `cond*`, could easily be changed
    to use the `pcase` machinery, Monnier [said](/ml/emacs-devel/jwvcysksgl3.fsf-monnier+emacs@gnu.org/);
    a patch to do so has [already been sent](/ml/emacs-devel/jwvmsroqxhc.fsf-monnier+emacs@gnu.org/).
    Mackenzie [objected](/ml/emacs-devel/Zdt3TM4AzmcDSrVq@ACM/) to `cond*` using the
    `pcase` pattern handling, in part because of a lack of documentation of the low-level
    `pcase` machinery. Alfred M. Szmidt [hoped](/ml/emacs-devel/E1reIZh-0000Z1-56@fencepost.gnu.org/)
    that eventually `pcase` could be written to use `cond*`, instead of the reverse,
    but Monnier [said](/ml/emacs-devel/jwvbk84qvii.fsf-monnier+emacs@gnu.org/) that
    would not be technically feasible.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: '-   就目前而言，讨论仍在继续，尚不清楚Stallman将采取哪种模式语言。Monnier[说](/ml/emacs-devel/jwvcysksgl3.fsf-monnier+emacs@gnu.org/)，这种语言通过`match*`形式实现，将为`cond*`添加，很容易改为使用`pcase`机制；这种做法的补丁[已经发送](/ml/emacs-devel/jwvmsroqxhc.fsf-monnier+emacs@gnu.org/)。Mackenzie[/ml/emacs-devel/Zdt3TM4AzmcDSrVq@ACM/]反对`cond*`使用`pcase`模式处理，部分原因是低级`pcase`机制缺乏文档化。Alfred
    M. Szmidt[希望](/ml/emacs-devel/E1reIZh-0000Z1-56@fencepost.gnu.org/)最终`pcase`能够改为使用`cond*`，而不是反过来，但Monnier[表示](/ml/emacs-devel/jwvbk84qvii.fsf-monnier+emacs@gnu.org/)这在技术上不可行。'
- en: Adding `cond*`
  id: totrans-split-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '-   添加`cond*`'
- en: 'At the end of January, Emacs co-maintainers Eli Zaretskii and Kangas [announced](/ml/emacs-devel/CADwFkm=p5QWY4Quy1ihrd8u3FX+NALis+OAOnGG0RzWPMihbsQ@mail.gmail.com/)
    that `cond*` would be installed in the Emacs core as an alternative to `pcase`;
    there would be no effort to switch away from `pcase`, however, as it is "<q>to
    be considered a matter of stylistic preference</q>". In the post, Kangas makes
    it clear that political, rather than strictly technical, considerations were part
    of the decision-making process:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一月底，Emacs 的共同维护者Eli Zaretskii和Kangas[宣布](/ml/emacs-devel/CADwFkm=p5QWY4Quy1ihrd8u3FX+NALis+OAOnGG0RzWPMihbsQ@mail.gmail.com/)，`cond*`将作为`pcase`的替代安装到Emacs核心中；然而，并没有努力摆脱`pcase`，因为这是“<q>被视为风格偏好的问题</q>”。在帖子中，Kangas明确指出，政治而非严格技术考虑是决策过程的一部分：
- en: Our responsibility as maintainers is first and foremost to ensure that we can
    all work together, and unite under a common banner. Our success as a project depends
    on it. Thus, the last thing we want to do is to alienate any group of contributors,
    big or small.
  id: totrans-split-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '-   作为维护者，我们的责任首先是确保我们可以共同合作，并在共同的旗帜下团结起来。我们作为一个项目的成功取决于此。因此，我们最不希望做的事情就是排斥任何一组贡献者，无论其规模大小。'
- en: We believe that this is a more important concern than the arguments for or against
    cond* or pcase. The simple fact is that we have different backgrounds and experiences,
    which have tended to land us on either side of this discussion. This diversity
    is a strength, and not a weakness.
  id: totrans-split-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '-   我们认为这比对`cond*`或`pcase`赞成或反对的论点更重要。简单的事实是，我们有不同的背景和经验，这些经验使我们在讨论中处于不同的立场。这种多样性是一种优势，而不是一种弱点。'
- en: Even that has not satisfied everyone as there are apparently still some scars
    from `pcase` being installed in Emacs 14 years ago, at least [for Mackenzie](/ml/emacs-devel/ZbZ5m1AO5Ltqglvc@ACM/).
    He believes that the middle path chosen by the maintainers will not help resolve
    the problems that he and others have in understanding some `pcase` uses; he would
    still advocate a wholesale replacement using `cond*`. Stallman, on the other hand,
    [does not think that `pcase` should be replaced](/ml/emacs-devel/E1rUfF3-00068E-Jd@fencepost.gnu.org/),
    but does "<q>hope to discourage its use inside Emacs in favor of cond*</q>". And,
    of course, the decision did not stop yet another [discussion of "`cond*` versus
    `pcase`"](/ml/emacs-devel/DU2PR02MB10109F1CBA5F7A8D78A597A5D96472@DU2PR02MB10109.eurprd02.prod.outlook.com/)
    from breaking out and, naturally, continuing at length.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: '-   即使如此，这也没有满足所有人，因为显然仍然有一些人因`pcase`在14年前安装在Emacs中而感到痛苦，至少对于Mackenzie来说[/ml/emacs-devel/ZbZ5m1AO5Ltqglvc@ACM/]。他认为维护者选择的中间道路不会帮助解决他和其他人在理解一些`pcase`用法方面的问题；他仍然主张全面使用`cond*`进行替换。另一方面，Stallman[并不认为应该替换`pcase`](/ml/emacs-devel/E1rUfF3-00068E-Jd@fencepost.gnu.org/)，但希望“<q>在Emacs内部鼓励使用`cond*`而不是`pcase`</q>”。当然，这一决定并没有阻止又一场[`“cond*”与“pcase”讨论`](/ml/emacs-devel/DU2PR02MB10109F1CBA5F7A8D78A597A5D96472@DU2PR02MB10109.eurprd02.prod.outlook.com/)的爆发，自然地继续下去。'
- en: At the end of January, Stallman [said](/ml/emacs-devel/E1rVO51-00077C-A0@fencepost.gnu.org/)
    that he was close to ready to commit the code to the [Emacs Git repository](/ml/emacs-devel/E1rVO51-00077C-A0@fencepost.gnu.org/),
    though that has not happened as of this writing. Zaretskii [asked](/ml/emacs-devel/86cytg1vcu.fsf@gnu.org/)
    that documentation be added to the [Elisp reference manual](https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html)
    at the same time, so that may have slowed the process some. Before long, though,
    `cond*` should make an appearance in Emacs, so there will be two options for conditionals
    with pattern-matching and destructuring capabilities—for good or ill.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一月底，斯托尔曼在[此处](/ml/emacs-devel/E1rVO51-00077C-A0@fencepost.gnu.org/)表示他准备将代码提交到[Emacs
    Git存储库](/ml/emacs-devel/E1rVO51-00077C-A0@fencepost.gnu.org/)，尽管到目前为止还没有发生。扎雷茨基[要求](/ml/emacs-devel/86cytg1vcu.fsf@gnu.org/)同时向[Elisp参考手册](https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html)添加文档，这可能稍微拖延了进程。不过很快，`cond*`应该会出现在Emacs中，这将提供两种具有模式匹配和解构功能的条件选项——无论是好是坏。
- en: '* * *'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: (
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: '[Log in](https://lwn.net/Login/?target=/Articles/961682/)'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[登录](https://lwn.net/Login/?target=/Articles/961682/)'
- en: to post comments)
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 发表评论)
