- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:40:49'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Java 22's New Features and Security Enhancements
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://coderoasis.com/java-22-is-released/](https://coderoasis.com/java-22-is-released/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Java Development Kit 22 – the next major version of Java Standard Edition –
    is now fully available as a production release! The newest version includes 12
    features and major security enhancements.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: You are able to download it from [oracle.com](https://www.oracle.com/java/technologies/downloads/?ref=coderoasis.com)
    right now. This version is a short-term release that will receive Premier Support
    from Oracle for six months. Long-term support releases such as predecessor Java
    Development Kit (JDK) 21 will still receive five years of Premier Support. Extended
    support will remain available for JDK 21 until September 2031.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Want to learn more about programming languages like Java here? We have a small
    introduction article into programming languages that we recommend you take a look
    at also along with reading more of this article!
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '[Introduction to Programming Languages: What are the Goals?'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: In this current day and age, where anything and everything can be and eventually
    will be completely digitalized, programming languages stand as the foundational
    tools for enabling developers to bring ideas to life. This blog delves into the
    goals of various programming languages, exploring what makes them unique in that](https://coderoasis.com/introduction-to-programming/)
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: The New Features
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The latest version now offers capabilities from development projects including [Amber](https://openjdk.org/projects/amber/?ref=coderoasis.com)
    – which develops smaller, productivity-oriented Java language features; [Loom](https://wiki.openjdk.org/display/loom/Main?ref=coderoasis.com)
    – which develops Java virtual machine features and APIs; and [Panama](https://openjdk.org/projects/panama/?ref=coderoasis.com),
    which develops interconnections between Java and non-Java APIs.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: '[Scoped values](https://openjdk.org/jeps/464?ref=coderoasis.com) enable the
    safe and efficient sharing of immutable data within and across threads. This is
    preferred to thread-local variables – especially when using large numbers of thread
    variables. The main goals are for the ease of use, comprehensibility, robustness,
    and performance.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '[Stream gatherers](https://openjdk.org/jeps/461?ref=coderoasis.com) will enhance
    the stream API to support custom intermediate operations. This preview feature
    will allow stream pipelines to transform data in ways not easily achievable with
    existing built-in intermediate operations.'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: These latest features join a second preview of structured concurrency, a preview
    of statements before `super(…)`, a preview of a class-file API, region pinning
    for the G1 garbage collector, a second preview of string templates, unnamed variables
    and patterns, a foreign function and memory API, and a seventh incubator of a
    vector API. A second preview of implicitly declared classes and instance main
    methods, and an enhancement to the Java launcher that would enable it to run multi-file
    programs, also have been proposed.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些最新功能加入了结构化并发的第二次预览，`super(…)`之前语句的预览，类文件 API 的预览，G1 垃圾收集器的区域固定，字符串模板的第二次预览，未命名变量和模式，外部函数和内存
    API，以及第七个向量 API 的孵化器。还有第二次预览的隐式声明类和实例主方法，以及对 Java 启动器的增强，使其能够运行多文件程序。
- en: With [structured concurrency](https://openjdk.org/jeps/462?ref=coderoasis.com),
    from Project Loom, concurrent programming is simplified through an API that treats
    groups of related tasks running in different threads as a single unit of work,
    thereby streamlining error handling and cancellation, improving reliability, and
    enhancing observability.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[结构化并发](https://openjdk.org/jeps/462?ref=coderoasis.com)，来自项目 Loom，通过一个 API
    简化了并发编程，该 API 将运行在不同线程中的一组相关任务视为一个工作单元，从而简化了错误处理和取消操作，提高了可靠性，并增强了可观察性。
- en: The enhancement to the Java application launcher will allow it to [run a program
    supplied as multiple files of Java source code](https://openjdk.org/jeps/458?ref=coderoasis.com).
    The goal behind the ability to launch multi-file source code programs is to make
    the transition from small programs to larger programs more gradual, allowing developers
    to choose whether and when to go to the trouble of configuring a build tool.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: Java 应用程序启动器的增强将允许其运行作为多个 Java 源代码文件提供的程序。启动多文件源代码程序的目标是使从小程序向大程序的过渡更加渐进，允许开发人员选择何时以及何时配置构建工具的麻烦。
- en: '[PRE0]'
  id: totrans-split-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The [class-file API](https://openjdk.org/jeps/457?ref=coderoasis.com) will provide a
    standard API for parsing, generating, and transforming Java class files. It is
    intended to enable JDK components to migrate to the standard API and eventually
    remove the JDK’s internal copy of the third-party [ASM](https://asm.ow2.io/?ref=coderoasis.com) library.
    Parsing, generating, and transforming class files is ubiquitous, used by independent
    tools and libraries to examine and extend programs without jeopardizing maintainability
    of source code.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[类文件 API](https://openjdk.org/jeps/457?ref=coderoasis.com) 将提供一个标准的 API 用于解析、生成和转换
    Java 类文件。旨在使 JDK 组件能够迁移到标准 API，并最终移除 JDK 内部对第三方[ASM](https://asm.ow2.io/?ref=coderoasis.com)库的依赖。解析、生成和转换类文件是无处不在的，独立工具和库使用它们来检查和扩展程序，而不会危及源代码的可维护性。'
- en: However, the Java class-file format evolves more quickly now than previously,
    due to standard Java’s six-month release cadence. This speed of evolution has
    resulted in frameworks more frequently encountering class files that are newer
    than the class-file library. This has resulted in errors and in framework developers
    trying to write code to parse class files from the future and hoping nothing too
    serious will change. The plan is to have the Java platform define and implement
    a standard class-file API to evolve together with the class-file format.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于标准 Java 的每六个月发布一次，Java 类文件格式现在演变得比以前更快。这种演变速度导致框架更频繁地遇到比类文件库更新的类文件。这导致错误，并且框架开发人员试图编写代码来解析未来的类文件，希望不会发生太大的变化。计划是使
    Java 平台定义并实现一个标准的类文件 API，与类文件格式一起演进。
- en: '[Region pinning for G1](https://openjdk.org/jeps/423?ref=coderoasis.com) is
    intended to reduce latency, so that garbage collection (GC) need not be disabled
    during Java Native Interface (JNI) critical regions. Goals include no stalling
    of threads due to critical JNI regions, no added latency to start garbage collection
    due to these regions, no regressions in GC pause times when none of these regions
    are active, and minimal regressions in GC pause times when these regions are active.
    Currently, the default GC, G1, disables garbage collection during every critical
    region, which can have a significant impact on latency. With this change, Java
    threads will never wait for a G1 GC operation to complete.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[G1的区域固定](https://openjdk.org/jeps/423?ref=coderoasis.com)旨在减少延迟，因此在Java Native
    Interface (JNI)关键区域期间无需禁用垃圾收集（GC）。目标包括不因关键JNI区域而导致线程停顿，由于这些区域而开始垃圾收集不增加延迟，当这些区域未激活时不会导致GC暂停时间增加，并在这些区域激活时最小化GC暂停时间的回归。当前，默认的GC（G1）在每个关键区域期间禁用垃圾收集，这可能对延迟产生重大影响。通过这一变更，Java线程将不再等待G1
    GC操作完成。'
- en: '[Implicitly declared classes and instance methods](https://openjdk.org/jeps/463?ref=coderoasis.com),
    from Project Amber, was previewed in JDK 21 as unnamed classes and instance methods.
    This feature would get the revised title and significant changes in JDK 22 in
    a second preview. The capability is intended to evolve the Java language so students
    could write their first programs without needing to understand language features
    designed for large programs. Students could write streamlined declarations for
    single-class programs and then seamlessly expand programs to use more advanced
    features as their skills grow.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[隐式声明的类和实例方法](https://openjdk.org/jeps/463?ref=coderoasis.com)，来自Amber项目，在JDK
    21中预览为未命名类和实例方法。此功能将在JDK 22中进行第二次预览，并进行重大更改。该功能旨在使Java语言能够发展，使学生无需理解为大型程序设计的语言特性即可编写其第一个程序。学生可以为单类程序编写简化的声明，然后在其技能增长时无缝扩展程序以使用更高级的功能。'
- en: '[PRE1]'
  id: totrans-split-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '* * *'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The Preview Features
  id: totrans-split-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预览功能
- en: The preview of [statements before `super(…)`](https://openjdk.org/jeps/447?ref=coderoasis.com),
    also from Project Amber, pertains to constructors in the language, allowing statements
    that do not reference the instance being created to appear before an explicit
    constructor. A goal of the plan includes giving developers greater freedom to
    express the behavior of constructors, enabling more natural placement of logic
    that currently must be factored into auxiliary static methods, auxiliary intermediate
    constructors, or constructor arguments.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关于语言中构造函数的[`super(…)`之前的语句预览](https://openjdk.org/jeps/447?ref=coderoasis.com)，同样来自Amber项目，允许在语言中的构造函数中出现不引用正在创建的实例的语句。计划的目标之一是为开发人员提供更大的自由来表达构造函数的行为，从而使当前必须因此而被因素化为辅助静态方法、辅助中间构造函数或构造函数参数的逻辑能够更自然地放置。
- en: '[PRE2]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Another goal is preserving the existing guarantee that constructors run in top-down
    order during class instantiation, ensuring that code in a subclass constructor
    cannot interfere with superclass instantiation. A third stated goal is not requiring
    any changes to the JVM. This is the only JDK 22 feature, so far, that has not
    yet been previously previewed or incubated in standard Java.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个目标是保留现有的保证，即构造函数在类实例化期间按自顶向下顺序运行，确保子类构造函数中的代码不能干扰超类实例化。第三个明确的目标是不需要对JVM进行任何更改。这是到目前为止唯一一个没有在标准Java中预览或孵化过的JDK
    22功能。
- en: '[String templates](https://openjdk.org/jeps/459?ref=coderoasis.com), another
    feature from Project Amber, will complement Java’s existing string literals and
    text blocks by coupling literal text with embedded expressions and template processors
    to produce specialized results. Goals include:'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[字符串模板](https://openjdk.org/jeps/459?ref=coderoasis.com)，Amber项目的另一个特性，将通过将文字文本与嵌入式表达式和模板处理器耦合，产生专业化的结果，来补充Java现有的字符串文字和文本块。目标包括：'
- en: Simplifying the writing of Java programs by making it easy to express strings
    that include values computed at run time.
  id: totrans-split-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化编写Java程序，使得在运行时轻松表达包含计算值的字符串。
- en: Enhancing the readability of expressions that mix text and expressions, whether
    the text fits on a single source line or spans several source lines.
  id: totrans-split-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强混合文本和表达式的表达式的可读性，无论文本是否适合单个源行或跨多个源行。
- en: Improving security of programs that compose strings from user-provided values
    and pass them to other systems by supporting validation and transformation of
    both the template and the values of its embedded expressions.
  id: totrans-split-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retaining flexibility by allowing Java libraries to define the formatting syntax
    used in string templates.
  id: totrans-split-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplifying the use of APIs that accept strings written in non-Java languages,
    such as XML and JSON.
  id: totrans-split-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling creation of non-string values computed from literal text and embedded
    expressions without needing to transit through an intermediate string representation.
  id: totrans-split-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String templates appeared in a first preview in JDK 21\. The second preview
    is intended to gain additional experience and feedback. Except for a technical
    change in the types of template expressions, there are no changes relative to
    the first preview.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: '[A vector API (seventh incubator)](https://openjdk.org/jeps/460?ref=coderoasis.com),
    from Project Panama, would express vector computations that reliably compile at
    runtime to optimal vector instructions on supported CPU architectures, achieving
    performance superior to equivalent scalar computations. The API provides a way
    to write complex vector algorithms in Java, using the existing HotSpot auto-vectorization
    algorithm but with a user model that makes vectorization more predictable and
    robust.'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: This capability has been incubated in prior versions of Java dating back to JDK
    16 in March 2021\. Goals of the API include it being clear and concise, platform-agnostic,
    and offering reliable runtime compilation and performance on x64 AArch64 architectures
    as well as graceful degradation.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: '[Unnamed variables and patterns](https://openjdk.org/jeps/456?ref=coderoasis.com),
    from Project Amber, can be used when variable declarations or nested patterns
    are required but never used. Goals of the plan include:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: Capturing developer intent that a given binding or lambda parameter is unused,
    and enforcing that property to clarify programs and reduce opportunities for error
  id: totrans-split-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving code maintainability by identifying variables that must be declared
    but are not used
  id: totrans-split-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing multiple patterns to appear in a single case label, provided that none
    of them declares pattern variables
  id: totrans-split-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving the readability of record patterns by eliding unnecessary nested type
    patterns
  id: totrans-split-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This proposal was previewed in JDK 21 and will be finalized without change in
    JDK 22.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: '[The foreign function and memory API](https://openjdk.org/jeps/454?ref=coderoasis.com),
    from Project Panama, allows Java programs to interoperate with code and data outside
    of the Java runtime. By invoking foreign functions and safely accessing foreign
    memory, Java programs can call native libraries and process native data without
    the brittleness of JNI (Java Native Interface), the proposal states.'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: 'The foreign function and memory API previously was previewed in JDK 19, JDK
    20, and JDK 21\. It would be finalized in JDK 22\. The latest revisions cover
    four areas: supporting arbitrary charsets for native strings, enabling clients
    to build C-language function descriptors programmatically, and introducing the
    Enable-Native-Access JAR-file manifest attribute. The latter allows executable
    JAR files to call restricted methods without having to use the —enable-native-access
    command-line option. The fourth area is providing a new linker option that allows
    clients to pass heap segments to downcall method handles.'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: The Security Enhancements
  id: totrans-split-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a [March 20 blog post](https://seanjmullan.org/blog/2024/03/20/jdk22?ref=coderoasis.com) on
    Oracle’s [inside.java web page](https://inside.java/?ref=coderoasis.com), Sean
    Mullan, technical lead of the Java Security libraries team and lead of the OpenJDK
    Security Group, detailed the security enhancements in JDK 22.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: The `java -Xshowsettings` option, which can be used to print system settings
    and other useful information about the current JDK configuration, has been enhanced
    to show details about security-related settings. `-Xshowsettings:security` will
    show all security settings. Sub-options allow you to display the values of security
    properties, the installed security providers and their supported algorithms, or
    the enabled TLS protocols and cipher suites.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: For cryptography, a new standard interface, `java.security.AsymmetricKey`, has
    been added. It is a sub interface of `java.security.key` and represents an asymmetric
    key, which can either be private or public. Existing `java.security.PublicKey` and `java.security.PrivateKey` classes
    have been retrofitted to be sub interfaces of `AsymmetricKey`. As future asymmetric
    algorithms are introduced, the `AsymmetricKey` interface will allow earlier versions
    of Java SE to more easily support new asymmetric algorithms representing parameters
    as a `NamedParameterSpec`, Mullan said.
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: Also, the `jdk.crytpo.ec` module has been deprecated, with the intent to eventually
    remove it. All code from the `jdk.crytp.ec` module has been moved to the` java.base` module,
    including the `SunEC` security provider. The `jdk.crypto.ec` module is now empty
    but still exists. This change will make it easier to deploy applications depending
    on elliptic curve cryptographic algorithms.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: For PKI (public key infrastructure), 10 new root CA certificates have been added
    to the `cacerts` keystore, including three eMudhra Technologies root CA certificates,
    four DigiCert root CA certificates, and one each from Let’s Encrypt, Telia, and
    Certigna.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: For Transport Layer Security (TLS), additional properties were added to control
    the maximum length of client and server certificate chains. And for XML signatures,
    the JDK implementation now supports XML signatures signed with RSA signature algorithms
    with SHA-3 digests.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: JDK 22 extends functionality for JCE (Java Cryptography Extension) support for
    the HSS/LMS signature algorithm, adding HSS/LMS support to `jarsigner` and `keytool` utilities.
    Also, `jarsigner` now supports signing and verifying JAR files with the HSS/LMS
    algorithm while `keytool` now supports generation of HSS/LMS public key pairs.
    However, JDK only supports HSS/LMS signature verification. Developers will need
    a third-party provider to sign JAR files with HSS/LMS.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: JDK 22 扩展了 JCE（Java Cryptography Extension）对 HSS/LMS 签名算法的支持功能，将 HSS/LMS 支持添加到
    `jarsigner` 和 `keytool` 实用程序中。此外，`jarsigner` 现在支持使用 HSS/LMS 算法对 JAR 文件进行签名和验证，而
    `keytool` 现在支持生成 HSS/LMS 公钥对。然而，JDK 只支持 HSS/LMS 签名验证。开发人员将需要第三方提供商来使用 HSS/LMS
    签署 JAR 文件。
- en: '* * *'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Do you like what you're reading from the CoderOasis Technology Blog? We recommend
    reading our [***Implementing RSA in Python from Scratch***](https://coderoasis.com/implementing-rsa-from-scratch-in-python/) as
    your next choice.
  id: totrans-split-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 您喜欢阅读 CoderOasis 技术博客的内容吗？我们推荐阅读我们的 [***从零开始在 Python 中实现 RSA***](https://coderoasis.com/implementing-rsa-from-scratch-in-python/)
    作为您的下一个选择。
- en: '[Implementing RSA in Python from Scratch'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python 从零开始实现 RSA'
- en: This is a guide to implementing RSA encryption in python from scratch. The article
    goes over the math and has code examples.](https://coderoasis.com/implementing-rsa-from-scratch-in-python/)
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关于从零开始在 Python 中实现 RSA 加密的指南。文章介绍了数学原理并提供了代码示例。](https://coderoasis.com/implementing-rsa-from-scratch-in-python/)
- en: '* * *'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Did you know we have a [**Community Forums**](https://forums.coderoasis.com/?ref=coderoasis.com) and [**Discord
    Server**](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com)? which we invite everyone
    to join us? Want to discuss this article with other members of our community?
    Want to join a laid back place to chill and discuss topics like programming, cybersecurity,
    web development, and Linux? Consider joining us today!
  id: totrans-split-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 您知道我们有一个 [**社区论坛**](https://forums.coderoasis.com/?ref=coderoasis.com) 和 [**Discord
    服务器**](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com) 吗？我们邀请每个人加入我们。想与我们社区的其他成员讨论本文吗？想要加入一个轻松的地方，讨论编程、网络安全、Web
    开发和 Linux 等主题吗？今天就考虑加入我们吧！
- en: '[Join the CoderOasis.com Discord Server!'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[加入 CoderOasis.com 的 Discord 服务器！'
- en: CoderOasis offers technology news articles about programming, security, web
    development, Linux, systems admin, and more. | 112 members](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com)  [CoderOasis
    Forums
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: CoderOasis 提供关于编程、安全、Web 开发、Linux、系统管理等技术新闻文章。| 112 位成员](https://discord.gg/sYNeQAqQZC?ref=coderoasis.com)  [CoderOasis
    论坛
- en: CoderOasis Community Forums where our members can have a place to discuss technology
    together and share resources with each other.](https://forums.coderoasis.com/?ref=coderoasis.com)
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: CoderOasis 社区论坛是我们的成员可以共同讨论技术并分享资源的地方。](https://forums.coderoasis.com/?ref=coderoasis.com)
