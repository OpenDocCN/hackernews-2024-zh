["```\n@MainActor\nclass MyModel {\n  private init() {\n    MainActor.assertIsolated()\n  }\n\n  static let shared = MyModel()\n}\n\nfunc useShared() async {\n  let model = MyModel.shared\n}\n\nawait useShared() \n```", "```\n warning: expression is 'async' but is not marked with 'await'\n    let model = MyModel.shared\n                ^~~~~~~~~~~~~~\n                await \n```", "```\nimport Dispatch\n\nstruct MyData {\n  static let cacheQueue = DispatchQueue(...)\n  // All access to 'globalCache' is guarded by 'cacheQueue'\n  static var globalCache: [MyData] = []\n} \n```", "```\nwarning: static property 'globalCache' is not concurrency-safe because it is non-isolated global shared mutable state\n  static var globalCache: [MyData] = []\n             ^\nnote: isolate 'globalCache' to a global actor, or convert it to a 'let' constant and conform it to 'Sendable' \n```", "```\nimport Dispatch\n\nstruct MyData {\n  static let cacheQueue = DispatchQueue(...)\n  // All access to 'globalCache' is guarded by 'cacheQueue'\n  nonisolated(unsafe) static var globalCache: [MyData] = []\n} \n```", "```\n// 'MutableData' is not 'Sendable'\nclass MutableData { ... }\n\nfunc processData(_: MutableData) async { ... }\n\n@MainActor func send() async {\n  nonisolated(unsafe) let data = MutableData()\n  await processData(data)\n} \n```"]