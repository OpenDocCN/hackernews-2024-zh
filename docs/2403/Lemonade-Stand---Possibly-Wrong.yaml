- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:54:09'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:54:09'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Lemonade Stand | Possibly Wrong
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 柠檬水摊位 | 可能错了
- en: 来源：[https://possiblywrong.wordpress.com/2024/03/12/lemonade-stand/](https://possiblywrong.wordpress.com/2024/03/12/lemonade-stand/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://possiblywrong.wordpress.com/2024/03/12/lemonade-stand/](https://possiblywrong.wordpress.com/2024/03/12/lemonade-stand/)
- en: '*This article was discussed on [Hacker News](https://news.ycombinator.com/item?id=39694353).*'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*此文讨论在 [Hacker News](https://news.ycombinator.com/item?id=39694353) 上。*'
- en: '**Introduction**'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**介绍**'
- en: This was a fun nostalgia trip. But it ended up being an attempt to collect and
    preserve some retro computing history as well… and I also learned– or forgot and
    remembered?– another interesting quirk of that programming environment from nearly
    45 years ago.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一次有趣的怀旧之旅。但最终它变成了试图收集和保存一些复古计算机历史的尝试……我还学到了——或者是忘记然后记起了？——那个将近 45 年前编程环境的另一个有趣怪癖。
- en: 'In 1981, I had a friend down the street who had an Apple II+. Later that year,
    my parents hired a tutor for programming lessons. I feel like I owe much of the
    subsequent course of my life to that time with “Mrs. Cathy,” who had several computers
    in her home: I remember an Apple II+, a VIC-20, and an IBM PC.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 1981 年，我有一个住在街道尽头的朋友，他有一台 Apple II+。那一年晚些时候，我的父母为我雇了一位编程导师。我觉得我后来的生活轨迹很大程度上归功于那段与“凯西夫人”在一起的时光，她家里有几台计算机：我记得有一台
    Apple II+、一台 VIC-20 和一台 IBM PC。
- en: But it wasn’t until 1983 that we got our own home computer, an Apple //e. One
    of the programs that came with the computer, [Lemonade Stand](https://en.wikipedia.org/wiki/Lemonade_Stand),
    is shown in the screenshot below.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但直到 1983 年我们才有了自己的家用电脑，一台 Apple //e。其中一个随电脑附送的程序是 [柠檬水摊位](https://en.wikipedia.org/wiki/Lemonade_Stand)，如下屏幕截图所示。
- en: 'The game is pretty simple: each morning, based on the weather forecast for
    the day, you decide how many glasses of lemonade and how many advertising signs
    to make, and how much to charge for each glass. These decisions and the day’s
    weather affect demand, you sell some number of glasses, rinse and repeat.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏很简单：每天早晨，根据当天的天气预报，你决定制作多少杯柠檬水和多少广告牌，以及每杯售价。这些决定和当天的天气影响需求，你卖出一些杯子后，重复这个过程。
- en: It’s about as fun as it sounds… but I remember being intrigued by the prospect
    of “reverse engineering” the game. The Applesoft BASIC source code contains the
    formula for computing the demand and the resulting profit as a function of the
    player’s inputs and the weather. We can, in principle, “solve” for the inputs
    that would maximize the expected profit. This post is motivated by my failed attempt
    to do this.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来和它一样有趣……但我记得自己被“逆向工程”游戏的前景所迷住。Applesoft BASIC 源代码包含了计算需求和因玩家输入以及天气而导致的利润的公式。原则上，我们可以“解决”出最大化预期利润的输入。本文由我未能成功尝试这样做而激发。
- en: '**History**'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**历史**'
- en: 'All of the code discussed here, both old and new, is available on [GitHub](https://github.com/possibly-wrong/lemonade).
    Let’s start with the old code: `lemonade.bas` is the Applesoft BASIC source by
    Charlie Kellner, from the .dsk image of my original 5.25″ diskette. I believe
    this is the earliest Apple version of the game– for completeness I’ve also included
    source extracts of two subsequent released versions (`lemonade_v4.bas` and `lemonade_v5.bas`),
    but for our purpose here their behavior is identical, with cosmetic updates to
    the graphics and sound by Drew Lynch, Bruce Tognazzini, and Jim Gerber.'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所有在这里讨论的代码，无论是旧的还是新的，都可以在 [GitHub](https://github.com/possibly-wrong/lemonade)
    上找到。我们从旧代码开始：`lemonade.bas` 是 Charlie Kellner 的 Applesoft BASIC 源代码，来自我原始的 5.25
    英寸软盘的 .dsk 镜像。我相信这是游戏的最早 Apple 版本——为了完整性，我还包括了两个后续发布版本的源代码片段（`lemonade_v4.bas`
    和 `lemonade_v5.bas`），但在这里它们的行为是相同的，只是由 Drew Lynch、Bruce Tognazzini 和 Jim Gerber
    更新了图形和声音效果。
- en: For comparison, I’ve also extracted the source for `selll.bas` (as in “sell
    lemonade”), from the Minnesota Educational Computing Consortium (MECC, of *Oregon
    Trail* fame) Elementary Volume 3 disk [A704](https://mirrors.apple2.org.za/ftp.apple.asimov.net/images/educational/mecc/MECC-A704%20Elementary%20Vol.%203.dsk).
    Although appearing later in 1980, I think this version is somewhat closer to the
    actual original version of the game written by Bob Jamison in 1973 for the UNIVAC
    mainframe. That original 1973 source seems to be lost to the mists of antiquity…
    but I think `selll.bas` retains more of its parentage than the Kellner version,
    which removed some helpful comments explaining the terms in the demand function,
    mistranslated some variable names and `GOTO` line numbering resulting in unreachable
    code, etc.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了比较，我还从明尼苏达教育计算机协会（MECC，以*俄勒冈小径*闻名）的Elementary Volume 3盘中提取了`selll.bas`的源代码。尽管这个版本出现在1980年后期，我认为这个版本更接近于由Bob
    Jamison于1973年为UNIVAC大型机编写的原始游戏版本。那个最初的1973年源代码似乎已经湮灭在古老的迷雾中... 但我认为`selll.bas`保留了比Kellner版本更多的父母特性，后者去掉了一些解释需求函数术语的有用注释，误译了一些变量名和`GOTO`行号，导致无法访问的代码等。
- en: '**Maximizing profit**'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**利润最大化**'
- en: 'Now for the new code: `lemonade_strategy.py` implements the profit-maximization
    described above. It’s pure brute force: given the objective function below,'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看新的代码：`lemonade_strategy.py`实现了上述的利润最大化策略。它是纯粹的蛮力方法：给定下面的目标函数，
- en: '[PRE0]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'where `r1` and `p_storm` are functions of the weather forecast, we simply evaluate
    the expected profit for all feasible inputs and find the maximum, with the wrinkle
    that the feasible region– how many glasses and signs we can possibly make– also
    depends on our current assets:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`r1`和`p_storm`是天气预报的函数，我们只需评估所有可行输入的预期利润，并找到最大值，但可行区域（我们可以制作多少杯和广告牌）的限制也取决于我们当前的资产：
- en: '[PRE1]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'I ended up in this rabbit hole in the usual way, after discussion with a student.
    My objective wasn’t really to “solve” this decades-old game, but just to give
    an explicit example of how much slower computers were then: this same brute-force
    approach in Applesoft BASIC, with the Apple //e’s 1 MHz processor, took nearly
    4 hours to compute optimal strategy just for the first sunny day in Lemonsville.
    That’s over 200,000 times slower than the above Python code, which runs in a fraction
    of a second on my decade-old 2.6 GHz laptop– that is, with a clock speed “only”
    2,600 times faster.'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我像往常一样陷入了这个兔子洞中，这是在与一位学生讨论之后的常规方式。我的目标并不是真的要“解决”这个几十年前的游戏，而只是为了清楚地举例说明计算机当时有多慢：在AppleSoft
    BASIC中使用Apple //e的1 MHz处理器，仅仅为Lemonsville的第一个晴天计算最优策略就花费了将近4小时。相比之下，上面提到的Python代码运行速度快得多，仅用了几秒钟，在我十年前的2.6
    GHz笔记本电脑上运行的时钟速度“只有”快了2600倍。
- en: '**Changing the weather**'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**改变天气**'
- en: You can play an Apple version of the game in a browser at the [Internet Archive](https://archive.org/details/Lemonade_Stand_1979_Apple),
    linked from the game’s Wikipedia page. I did just that, with my Python script
    running alongside to compute optimal strategy… and it didn’t work.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[互联网档案馆](https://archive.org/details/Lemonade_Stand_1979_Apple)中的Apple版本游戏中进行游戏，这个链接也是从游戏的维基百科页面链接过来的。我就是这样做的，同时我的Python脚本在计算最优策略的同时运行...
    结果不起作用。
- en: The first day’s weather was “hot and dry.” With $2.00 and each glass of lemonade
    costing 2 cents, the optimal strategy should have been to make 74 glasses, 3 advertising
    signs, and charge 12 cents per glass, for an expected profit of $6.95\. But when
    I entered these values in the game, I only sold 37 glasses, for a lousy $2.51
    profit.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第一天的天气是“炎热而干燥的”。以2.00美元和每杯柠檬水成本2美分的情况下，最优策略应该是制作74杯柠檬水，3个广告牌，每杯售价12美分，预期利润为6.95美元。但当我在游戏中输入这些值时，我只卖出了37杯，仅获得了2.51美元的利润。
- en: 'What was going on? It turns out that there are many different copies of *Lemonade
    Stand* out there, both at the Internet Archive as well as in various Apple II
    [disk image archives](https://mirrors.apple2.org.za/ftp.apple.asimov.net/)… but
    the particular one linked from Wikipedia is unique among all of these in that
    it contains an important modification to the source code appearing in none of
    the other copies, highlighted below:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 到底发生了什么事？原来，*柠檬水摊*有许多不同的副本存在，既在互联网档案馆，也在各种Apple II的[磁盘镜像存档](https://mirrors.apple2.org.za/ftp.apple.asimov.net/)中...
    但从维基百科链接的特定版本在所有这些版本中都是独一无二的，因为它包含了一处在其他副本中都没有出现的重要源代码修改，如下所示：
- en: '[PRE2]'
  id: totrans-split-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: (You can play the original unmodified version at the Internet Archive [here](https://archive.org/details/LEMONADE_STAND).)
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: （你可以在互联网档案馆的[这里](https://archive.org/details/LEMONADE_STAND)玩原始未修改的版本。）
- en: I don’t know where these changes came from. And I believe these are indeed *changes*
    from the original release (i.e., not the other way around). But just these three
    edits were enough to keep my optimal strategy calculation from producing the correct
    result. This was strange at first glance, since the above section of code merely
    computes the randomly generated weather *forecast* for the day, which is an *input*
    to the subsequent profit calculation. In the above modified version, the weather
    forecast is sunny (`SC=2`) 40% of the time, cloudy (`SC=10`) 30% of the time,
    and hot and dry (`SC=7`) 30% of the time. The original threshold values are 0.6
    and 0.8, corresponding to probabilities (0.6, 0.2, 0.2) of (sunny, cloudy, hot
    and dry).
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道这些变化来自哪里。而且我相信这确实是从原始发布中的*更改*（即不是反过来）。但这仅仅是这三个编辑足以使我的最优策略计算无法产生正确的结果。乍一看这很奇怪，因为上述代码部分仅仅计算了随机生成的天气*预报*，这是后续利润计算的*输入*。在上述修改版本中，天气预报有40%的时间是晴天（`SC=2`），30%的时间是多云（`SC=10`），30%的时间是炎热干燥（`SC=7`）。原始的阈值分别为0.6和0.8，对应概率（0.6，0.2，0.2）为（晴天，多云，炎热干燥）。
- en: The `REM` in line 460 is a “remark” comment, effectively disabling the original
    behavior of forcing sunny forecasts for the first two days (when `D=1` and `D=2`)
    of the game. But again, why should this matter? This is all input to the profit
    calculation, which remains identical to the original, so what is causing the difference
    in behavior?
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第460行中的`REM`是“备注”注释，有效地禁用了游戏的前两天（当`D=1`和`D=2`时）强制晴天预报的原始行为。但为什么这很重要呢？这些都是利润计算的输入，与原始版本完全相同，那么是什么导致了行为上的差异呢？
- en: '**Undeclared variables**'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**未声明的变量**'
- en: To make it easier to poke (!) around this problem, I wrote `lemonade.py`, which
    is my attempt at a [shot-for-shot remake](https://possiblywrong.wordpress.com/2013/02/03/hunt-the-wumpus/)
    of the original `lemonade.bas` in Python, minus the graphics and sound– that is,
    just a canonical mode text interface, but an otherwise line-for-line direct translation
    with identical behavior.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更方便地查找这个问题，我写了`lemonade.py`，这是我试图用Python重制原始的`lemonade.bas`的尝试，去掉了图形和声音 -
    也就是说，只是一个经典的文本界面，但其他方面是一行一行的直接翻译，行为完全相同。
- en: That translation process was an interesting exercise, almost a logic puzzle,
    converting the unstructured `GOTO`-based flow control of Applesoft BASIC into
    structured Python– I was surprised at the end of it all to find that only a single
    `def`ined function and extra temporary Boolean variable were needed, despite all
    of the `GOSUB`s.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 那个翻译过程是一个有趣的练习，几乎是一个逻辑谜题，将Applesoft BASIC中基于`GOTO`的非结构化流程控制转换为结构化的Python代码 -
    尽管所有的`GOSUB`，我最终很惊讶地发现只需要一个`def`定义的函数和额外的临时布尔变量。
- en: 'That translation helped me to understand the cause of the different behavior
    I was seeing in the original. The problem is in the following section of code,
    with the offending lines highlighted:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 那个翻译帮助我理解了我在原始版本中看到的不同行为的原因。问题出在下面的代码部分，有问题的行已经被突出显示：
- en: '[PRE3]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The variable `R1` is an input to the profit function. But although the code
    change in line 460 above allows the first day’s *displayed forecast* to be hot
    and dry– or anything else other than sunny– line 710 still prevents actually *setting*
    `R1` to reflect that non-sunny forecast when computing profit.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`R1`是利润函数的一个输入。但尽管上述460行的代码更改允许第一天的*显示预报*是炎热干燥 - 或者其他非晴天的预报 - 第710行仍然阻止在计算利润时实际*设置*`R1`来反映非晴天预报。
- en: The effect is that, for the first two days, the weather forecast might *indicate*
    “hot and dry,” or “cloudy,” etc., but it’s *really* still sunny for those first
    two days, just like the original version.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 其效果是，在头两天，天气预报可能会*显示*“炎热干燥”或“多云”等，但实际上头两天仍然像原始版本一样是晴天。
- en: 'All of which leads to the actual motivation for this post: when I initially
    tried to reproduce the effect of the three changed lines in the Python version,
    I got a “`NameError: name ''D'' is not defined`“, due to commenting out line 460
    in the BASIC version above: the variable `D` is never declared or assigned a value
    *prior* to line 460.'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: '所有这些导致了这篇文章的实际动机：当我最初试图在Python版本中复制三行更改的效果时，我遇到了“`NameError: name ''D'' is
    not defined`”，因为在上面的BASIC版本中注释掉了第460行：变量`D`在460行之前从未声明或分配值。'
- en: 'Python can’t handle this… but apparently Applesoft BASIC can. Variables do
    not need to be declared before use: when evaluating an expression containing a
    variable not previously assigned, the value of that variable defaults to zero
    (or the empty string for string variables).'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: Python 无法处理这一点... 但显然 Applesoft BASIC 可以。变量在使用之前无需声明：在评估包含尚未赋值的变量的表达式时，该变量的值默认为零（或空字符串，对于字符串变量）。
- en: 'This behavior is actually depended on in a few other places in the game as
    well. I admit that I *think* this is new to me– in all of those early days of
    learning programming, I don’t remember ever being aware of nor taking advantage
    of this “feature.” And it’s not a feature of the original Dartmouth BASIC. And
    I couldn’t find documentation of it anywhere in the books, manuals, and magazines
    that I have… but I did find it written down in the original “[Blue Book](https://archive.org/details/Applesoft_Reference_Manual_1978-_bluebook/page/n11/mode/2up)”
    Applesoft Reference Manual. From page 9: “*Another important fact is that if a
    variable is encountered in a formula before it is assigned a value, it is automatically
    assigned the value zero. Zero is then substituted as the value of the variable
    in the particular formula.*“'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为实际上在游戏中的几个其他地方也有所依赖。我承认，这对我来说是新鲜事——在学习编程的早期阶段，我不记得曾经意识到或利用过这个“特性”。而且这并不是达特茅斯基础语言的特点。在我拥有的所有书籍、手册和杂志中都找不到它的文档...
    但我在原始的“[蓝书](https://archive.org/details/Applesoft_Reference_Manual_1978-_bluebook/page/n11/mode/2up)”——Applesoft
    参考手册中找到了它的记载。从第9页开始：“*另一个重要的事实是，如果在公式中遇到一个变量，在分配任何值之前，它将自动被赋值为零。然后将零作为该变量在特定公式中的值替换。*”
