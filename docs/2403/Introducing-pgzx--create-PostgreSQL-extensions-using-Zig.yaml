- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 12:33:11'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 12:33:11
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Introducing pgzx: create PostgreSQL extensions using Zig'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 pgzx：使用 Zig 创建 PostgreSQL 扩展
- en: 来源：[https://xata.io/blog/introducing-pgzx](https://xata.io/blog/introducing-pgzx)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://xata.io/blog/introducing-pgzx](https://xata.io/blog/introducing-pgzx)
- en: As part of the [Xata launch week](https://xata.io/launch-week-unleash-the-elephant),
    we are introducing [pgzx](https://github.com/xataio/pgzx), an open-source framework
    for developing PostgreSQL extensions written in Zig. It provides a set of utilities
    (e.g. error handling, memory allocators, wrappers) as well as a build and development
    environment to simplify integrating with the Postgres codebase.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 [Xata 发布周](https://xata.io/launch-week-unleash-the-elephant) 的一部分，我们推出了 [pgzx](https://github.com/xataio/pgzx)，这是一个用
    Zig 编写的开源框架，用于开发 PostgreSQL 扩展。它提供一组实用工具（例如错误处理、内存分配器、包装器），以及简化与 Postgres 代码库集成的构建和开发环境。
- en: '[Zig](https://ziglang.org/) is described on its website as a general-purpose
    programming language and toolchain for maintaining **robust**, **optimal** and
    **reusable** software. Zig is a new language (pre 1.0), but it has been gaining
    popularity in the systems programming community. It is fair to think of it as
    a "modern C", providing safer memory management, compilation time code execution
    (comptime), and a rich standard library. We''ll show some of these features in
    the context of Postgres extensions below.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[Zig](https://ziglang.org/) 在其网站上被描述为用于维护**健壮**、**优化**和**可重用**软件的通用编程语言和工具链。Zig
    是一种新语言（在 1.0 版之前），但它在系统编程社区中已经越来越受欢迎。可以将其视为 "现代 C"，提供更安全的内存管理、编译时代码执行（comptime）和丰富的标准库。我们将在下面的
    Postgres 扩展的上下文中展示其中一些特性。'
- en: A major reason to use Zig for Postgres development is its ability to interoperate
    with C code. Zig supports the C ABI, works with C pointers and data types, including
    NULL terminated strings, and can even translate C header files into Zig code.
    Zig's automatic translation of C macros to Zig code is not yet perfect, but it's
    still helpful. This makes Zig a great choice for working with very large C codebases,
    like Postgres happens to be.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Zig 进行 Postgres 开发的一个主要原因是它可以与 C 代码互操作。Zig 支持 C ABI，与 C 指针和数据类型（包括空终止字符串）一起工作，甚至可以将
    C 头文件翻译为 Zig 代码。虽然 Zig 自动将 C 宏翻译为 Zig 代码的功能还不完善，但仍然非常有帮助。这使得 Zig 成为处理大型 C 代码库（比如
    Postgres）的优秀选择。
- en: Because Zig can call any C function and translate C macros to inline Zig functions,
    you can write Postgres extensions in Zig without any additional tooling by following
    the same steps you would for a C extension. However, a framework like pgzx simplifies
    the process significantly by providing a development environment, a set of utilities
    and wrappers for Postgres APIs, common error handling, and more.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 Zig 可以调用任何 C 函数并将 C 宏转换为内联 Zig 函数，因此您可以按照创建 C 扩展的相同步骤在 Zig 中编写 Postgres 扩展，而无需任何额外的工具支持。然而，像
    pgzx 这样的框架通过提供开发环境、一组 Postgres API 的实用工具和包装器、常见的错误处理等显著简化了这一过程。
- en: pgzx has at the moment 2 sample extensions that you can take inspiration from.
    [char_count_zig](https://github.com/xataio/pgzx/tree/main/examples/char_count_zig)
    is a minimal extension, while [pg_audit_zig](https://github.com/xataio/pgzx/tree/main/examples/pgaudit_zig)
    is more complex and shows more of the features of pgzx.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: pgzx 目前有 2 个示例扩展，供您参考。[char_count_zig](https://github.com/xataio/pgzx/tree/main/examples/char_count_zig)
    是一个最小的扩展，而 [pg_audit_zig](https://github.com/xataio/pgzx/tree/main/examples/pgaudit_zig)
    则更为复杂，展示了 pgzx 的更多特性。
- en: Let's look at the `char_count_zig`, which is only slightly more than a "Hello,
    World!" of Postgres extensions. It adds a function that counts how many times
    a character appears in a string. This was inspired by [this tutorial](https://www.highgo.ca/2019/10/01/a-guide-to-create-user-defined-extension-modules-to-postgres/),
    which shows how to do this in plpqsql and C.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 `char_count_zig`，它略微超过了 Postgres 扩展的 "Hello, World!"。它添加了一个函数，用于计算字符串中字符出现的次数。这受到了
    [此教程](https://www.highgo.ca/2019/10/01/a-guide-to-create-user-defined-extension-modules-to-postgres/)
    的启发，该教程展示了如何在 plpqsql 和 C 中实现这一功能。
- en: '[PRE0]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here is the `char_count` extension written in Zig and in C.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用 Zig 和 C 编写的 `char_count` 扩展。
- en: char_count written in Zig
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 用 Zig 编写的 char_count
- en: '[PRE1]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: char_count written in C
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 用 C 编写的 char_count
- en: '[PRE2]'
  id: totrans-split-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Whilst they're similar, the Zig version is actually a bit more concise. This
    is partially because Zig is more expressive, but also because pgzx does a bit
    more of the work.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它们很相似，但 Zig 版本实际上更加简洁。部分原因是 Zig 更具表达性，但也因为 pgzx 处理了更多的工作。
- en: Registered SQL functions receive their arguments serialized and some code is
    needed to deserialize them. In C you do that with the help of the `G_GETARG_*`
    macros, however with pgzx you simply receive them as normal parameters already
    deserialized. How? By having a `comptime` function that generates the necessary
    boilerplate code at compile time. If you are curious, check out the [pgCall](https://github.com/xataio/pgzx/blob/9825dde752ee4ace2cbc594332eba100292aafd5/src/pgzx/fmgr.zig#L77-L102)
    function, it's a nice example for the power of Zig's `comptime` execution.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注册的 SQL 函数接收序列化的参数，并且需要一些代码来对它们进行反序列化。在 C 语言中，你可以通过 `G_GETARG_*` 宏来实现，但是在 pgzx
    中，你可以直接接收已经反序列化的普通参数。如何实现的呢？通过一个 `comptime` 函数，在编译时生成必要的样板代码。如果你感兴趣，可以查看 [pgCall](https://github.com/xataio/pgzx/blob/9825dde752ee4ace2cbc594332eba100292aafd5/src/pgzx/fmgr.zig#L77-L102)
    函数，它是 Zig `comptime` 执行力量的一个很好的例子。
- en: The `PG_MODULE_MAGIC` and `PG_FUNCTION_INFO_V1` functions are a second example
    of `comptime` usage. They export the required symbols needed for Postgres to recognize
    this as an extension and to register the function as a SQL function. In this case,
    `comptime` acts pretty much like the corresponding C macros.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`PG_MODULE_MAGIC` 和 `PG_FUNCTION_INFO_V1` 函数是 `comptime` 使用的第二个例子。它们导出了必要的符号，以便
    Postgres 可以识别这个扩展并将函数注册为 SQL 函数。在这种情况下，`comptime` 的作用几乎与对应的 C 宏相似。'
- en: If you looked carefully at the code above, you might have noticed that it contains
    a bug. It checks for the `target_char` to not have more than 1 character, but
    it doesn't check if it has 0 characters. Later, the code accesses `target_char[0]`,
    so if the string is the empty string, there will be a out of bounds access error.
    We left that bug intentionally in so you can see what happens when bugs like that
    happen in the extension.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察上面的代码，你可能已经注意到它包含一个 bug。它检查 `target_char` 不应该超过 1 个字符，但却没有检查是否有 0 个字符。稍后，代码访问
    `target_char[0]`，因此如果字符串是空字符串，将会出现越界访问错误。我们故意留下这个 bug，让你看看当扩展中出现这种 bug 时会发生什么。
- en: 'You can trigger the bug with this SQL:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这个 SQL 触发 bug：
- en: '[PRE3]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Which responds:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 它的回应是：
- en: '[PRE4]'
  id: totrans-split-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In C code, this type of bug could trigger a segmentation fault or even a security
    vulnerability. If you try this with the `char_count_zig` extension, the Postgres
    process still crashes (not the full server, just the process serving the connection),
    but if you check the logs you''ll see an error message like this:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C 代码中，这种类型的 bug 可能会触发段错误，甚至是安全漏洞。如果你尝试使用 `char_count_zig` 扩展来执行此操作，Postgres
    进程仍然会崩溃（不是整个服务器，只是处理连接的进程），但如果你查看日志，你会看到类似这样的错误消息：
- en: '[PRE5]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It points exactly where the error happened! This happens because Zig has runtime
    checks depending on the [build mode](https://ziglang.org/documentation/master/#Build-Mode).
    The `ReleaseSafe` mode, for example, trades a bit of performance for more safety
    checks.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 它确切地指出错误发生的位置！这是因为 Zig 根据[构建模式](https://ziglang.org/documentation/master/#Build-Mode)具有运行时检查。例如，`ReleaseSafe`
    模式为更多的安全检查牺牲了一些性能。
- en: Note that this stacktrace worked so well because the error was in Zig code.
    When building Postgres extensions, you often have to call Postgres APIs which
    will still segmentation fault if you use them incorrectly.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个堆栈跟踪之所以这么有效，是因为错误出现在 Zig 代码中。在构建 Postgres 扩展时，你经常需要调用 Postgres 的 API，如果使用不正确，仍然会导致段错误。
- en: Postgres uses [allocator arenas](https://en.wikipedia.org/wiki/Region-based_memory_management)
    to manage memory. In the Postgres source code, the arenas are called [memory contexts](https://github.com/postgres/postgres/blob/master/src/backend/utils/mmgr/README).
    Memory allocated in a "context" can be freed all at once (for example, when a
    query execution is finished), which simplifies memory management significantly,
    because you only need to track contexts, not individual allocations. Contexts
    are also hierarchical, so you can create a context that is a child of another
    context, and when the parent context is freed, all children are freed as well.
    This makes memory leaks rather unlikely.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: Postgres 使用[分配器区域](https://en.wikipedia.org/wiki/Region-based_memory_management)来管理内存。在
    Postgres 源代码中，这些区域被称为[内存上下文](https://github.com/postgres/postgres/blob/master/src/backend/utils/mmgr/README)。在一个“上下文”中分配的内存可以一次性释放（例如，当查询执行完成时），这显著简化了内存管理，因为你只需要跟踪上下文，而不是单个分配。上下文还是层次化的，因此你可以创建一个是另一个上下文子级的上下文，当父上下文被释放时，所有子上下文也会被释放。这使得内存泄漏变得不太可能。
- en: Another advantage of memory contexts is that they improve [memory monitoring](https://www.postgresql.org/docs/current/view-pg-backend-memory-contexts.html),
    because context have names and you can see how much memory is used by each context.
    This is useful for debugging large memory usage.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个内存上下文的优点是它们改善了[内存监控](https://www.postgresql.org/docs/current/view-pg-backend-memory-contexts.html)，因为上下文有名称，您可以看到每个上下文使用了多少内存。这对于调试大内存使用非常有用。
- en: This model of using an arena/context allocator happens to match really good
    with Zig. One reason is Zig's convention to have all functions/objects that allocate
    memory receive an allocator as a parameter. This makes allocations [more explicit](https://notes.eatonphil.com/2024-03-15-zig-rust-and-other-languages.html)
    but also makes it easy to use a custom allocator. pgzx defines custom allocators
    that wrap the Postgres memory contexts and make them available to Zig code.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用arena/context分配器的这种模型恰好非常适合Zig。一个原因是Zig的约定是，所有分配内存的函数/对象都接收一个分配器作为参数。这使得分配更加[明确](https://notes.eatonphil.com/2024-03-15-zig-rust-and-other-languages.html)，同时也使得可以使用自定义分配器变得容易。pgzx定义了包装Postgres内存上下文的自定义分配器，并使其可用于Zig代码。
- en: 'Here is an example that creates a new context as a child of the current context
    and gets the allocator for it:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，创建一个新的上下文作为当前上下文的子上下文，并获取其分配器：
- en: '[PRE6]'
  id: totrans-split-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Another Postgres API that you will very likely need to know about in a more
    complex extension is the error handling. Postgres implements "exceptions" in C
    via `setjmp/longjmp` and provides a set of macros to throw and catch them ([PG_TRY/PG_CATCH](https://github.com/postgres/postgres/blob/master/src/include/utils/elog.h#L318)).
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在更复杂的扩展中，您很可能还需要了解另一个Postgres API，即错误处理。Postgres通过`setjmp/longjmp`在C中实现了"异常"，并提供了一组宏来抛出和捕获它们（[PG_TRY/PG_CATCH](https://github.com/postgres/postgres/blob/master/src/include/utils/elog.h#L318)）。
- en: The issue is that long jumps could bypass the Zig control flow, for example
    `errdefer` blocks might not be executed. This means that if your extension calls
    into Postgres APIs, and those APIs can throw errors, long jumps might skip your
    `defer` and `errdefer` blocks!
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于长跳跃可能会绕过Zig控制流，例如`errdefer`块可能不会被执行。这意味着，如果您的扩展调用Postgres API，并且这些API可能会引发错误，则长跳跃可能会跳过您的`defer`和`errdefer`块！
- en: 'Luckily, pgzx is here to help. It provides a set of functions that allow you
    to catch the Postgres exceptions and convert them into Zig errors. For example:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，pgzx在此处提供帮助。它提供了一组函数，允许您捕获Postgres异常并将其转换为Zig错误。例如：
- en: '[PRE7]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'pgzx comes with a [Nix flakes](https://nixos.wiki/wiki/Flakes) based development
    environment for developing extensions as well as pgzx itself. It also comes with
    a project template which you can use to set up this environment in a new repository.
    To use it, [install Nix](https://github.com/DeterminateSystems/nix-installer)
    and then run:'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: pgzx提供了一个基于[Nix flakes](https://nixos.wiki/wiki/Flakes)的开发环境，用于开发扩展以及pgzx本身。它还提供了一个项目模板，您可以在新的存储库中使用它来设置这个环境。要使用它，[安装Nix](https://github.com/DeterminateSystems/nix-installer)，然后运行：
- en: '[PRE8]'
  id: totrans-split-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then load the nix shell with:'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后加载nix shell：
- en: The dev environment includes commands to relocate the Postgres binaries in your
    development environment, to start the server, and so on. The template also comes
    with a minimal extension and a `build.zig` file with a few common tasks. See the
    template [README](https://github.com/xataio/pgzx/tree/main/nix/templates/init)
    for how to build the extension from this point.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境包括用于在开发环境中重新定位Postgres二进制文件、启动服务器等的命令。该模板还带有一个最小的扩展和一个带有几个常见任务的`build.zig`文件。查看模板的[README](https://github.com/xataio/pgzx/tree/main/nix/templates/init)了解如何从这一点开始构建扩展。
- en: Postgres extensions are typically tested via a tool called `pg_regress`. This
    is supported by pgzx as well, simply call `zig build pg_regress`.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: Postgres扩展通常通过称为`pg_regress`的工具进行测试。pgzx也支持这一点，只需调用`zig build pg_regress`。
- en: But we also wanted to have unit tests. This is a bit tricky because the tests
    need to be compiled and run in the **context of a Postgres instance**. Otherwise,
    they won't be able to interact with Postgres' APIs.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们也希望进行单元测试。这有点棘手，因为测试需要在**Postgres实例的上下文中**编译和运行。否则，它们将无法与Postgres的API进行交互。
- en: 'In order to solve this, pgzx registers a custom `run_tests` function. This
    function can be called from SQL (`SELECT run_tests();`) and it will run the unit
    tests. A test suite is a Zig struct with functions starting with `test`. To register
    a test suite, you would typically do something like this:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，pgzx 注册了一个自定义的 `run_tests` 函数。这个函数可以从 SQL 中调用（`SELECT run_tests();`），它将运行单元测试。测试套件是一个
    Zig 结构，其中的函数以 `test` 开头。要注册一个测试套件，你通常会像这样做：
- en: '[PRE9]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The [registerTests](https://github.com/xataio/pgzx/blob/9825dde752ee4ace2cbc594332eba100292aafd5/src/pgzx/testing.zig#L39)
    function is another example of `comptime` usage. It iterates over all the fields
    of a struct and generates the call to run the tests when the `run_tests()` function
    is called in SQL.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[registerTests](https://github.com/xataio/pgzx/blob/9825dde752ee4ace2cbc594332eba100292aafd5/src/pgzx/testing.zig#L39)
    函数是 `comptime` 使用的另一个示例。它遍历结构体的所有字段，并在 SQL 中调用 `run_tests()` 函数时生成调用以运行测试。'
- en: 'This walkthrough covered some of the more interesting functionality exposed
    by pgzx, but there''s more on offer: wrappers for the Postgres data structures
    ([lists](https://xataio.github.io/pgzx/#A;pgzx:list), hashtables), [SPI](https://xataio.github.io/pgzx/#A;pgzx:spi),
    [shared memory access](https://xataio.github.io/pgzx/#A;pgzx:shmem), [connection
    management](https://xataio.github.io/pgzx/#A;pgzx:pq), and more...'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个演示覆盖了 pgzx 提供的一些更有趣的功能，但还有更多：Postgres 数据结构的包装器（[lists](https://xataio.github.io/pgzx/#A;pgzx:list)，哈希表），[SPI](https://xataio.github.io/pgzx/#A;pgzx:spi)，[共享内存访问](https://xataio.github.io/pgzx/#A;pgzx:shmem)，[连接管理](https://xataio.github.io/pgzx/#A;pgzx:pq)等等。
- en: At Xata, we have been working on a new Postgres project, which doesn't really
    have a name yet, so let's call it *"Xata's take on distributed Postgres"*. It's
    in its very early stages, however we'll be open sourcing it soon and we're planning
    to [build it in public](https://mailchi.mp/xata/2zoy27tx2e). It will be somewhat
    similar to Citus, but some different choices, especially around usage and DX,
    based on what we learned running Xata for the past couple of years.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xata，我们一直在进行一个新的 Postgres 项目，目前还没有一个确切的名称，所以让我们称之为“Xata 对分布式 Postgres 的看法”。目前还处于非常早期阶段，但我们很快将其开源，并计划[公开构建](https://mailchi.mp/xata/2zoy27tx2e)。它将与
    Citus 有些相似，但在使用和开发体验上会有一些不同的选择，这些选择基于我们过去几年运行 Xata 的经验。
- en: 'For this project, we considered three potential implementation directions:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们考虑了三种潜在的实现方向：
- en: As an external proxy, like Vitess does for MySQL.
  id: totrans-split-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像 Vitess 对 MySQL 所做的外部代理一样。
- en: As a Postgres extension, like Citus.
  id: totrans-split-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像 Citus 对 Postgres 的扩展一样。
- en: As a fork of Postgres, like Greenplum.
  id: totrans-split-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像 Greenplum 对 Postgres 的分支一样。
- en: We have some experience with the first option because that's how our current
    Xata Proxy works, see more details in this [blog post](https://xata.io/blog/serverless-postgres-platform),
    so we were almost biased towards it. We know we can speak the Postgres wire protocol,
    parse the incoming queries and understand them at a deep level, as well as create
    distributed transactions via 2PC. However, we also know that leveraging existing
    Postgres code it will open up more options and avoid us having to reimplement
    some very difficult parts. Given the long term vision of the project, and that
    we didn't want to maintain a fork, we decided to go with the second option.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对第一个选项有一些经验，因为这就是我们当前的 Xata 代理工作的方式，更多详细信息请查看这篇[博客文章](https://xata.io/blog/serverless-postgres-platform)，因此我们几乎偏向于它。我们知道我们可以使用
    Postgres 线协议进行通信，解析传入的查询并深入理解它们，还可以通过 2PC 创建分布式事务。然而，我们也知道利用现有的 Postgres 代码会开放更多选择，并避免重新实现一些非常困难的部分。考虑到项目的长期愿景，并且我们不想维护一个分支，我们决定选择第二个选项。
- en: 'The next node in our decision tree was the **programming language**. The main
    options we considered were C, Rust, and Zig. While there are pros and cons to
    each of these options, which we might cover in detail a future blog post, we decided
    to go with Zig. The main "pros" for Zig were:'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决策树的下一个节点是**编程语言**。我们考虑的主要选项是 C、Rust 和 Zig。虽然每种选项都有其利弊，我们可能会在未来的博客文章中详细讨论，但我们决定选择
    Zig。Zig 的主要优势在于：
- en: It allows us to call into the Postgres APIs almost directly, so we have the
    same power as using C.
  id: totrans-split-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它几乎允许我们直接调用 Postgres 的 API，因此我们拥有使用 C 语言相同的强大能力。
- en: It offers more memory safety than C, it's a bit more expressive, and a bit more
    fun (we think).
  id: totrans-split-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它比 C 语言提供了更多的内存安全性，更富表现力，我们认为更有趣。
- en: It fits well with the Postgres codebase, for example when it comes to memory
    management and string handling.
  id: totrans-split-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它与 Postgres 代码库非常契合，例如在内存管理和字符串处理方面。
- en: As we started working, we realized that an equivalent for Rust's [pgrx](https://github.com/pgcentralfoundation/pgrx)
    would be needed for Zig as well, so we started pgzx.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始工作时，我们意识到Rust的[pgrx](https://github.com/pgcentralfoundation/pgrx)需要在Zig中也有一个等效的，因此我们启动了pgzx。
- en: While Zig and pgzx might not be the best choice for every Postgres extension,
    we think it's a reasonable choice for our project and perhaps for some others
    as well.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Zig和pgzx可能不是每个Postgres扩展的最佳选择，但我们认为对于我们的项目以及其他一些项目来说，这是一个合理的选择。
- en: pgzx is new and should be considered "alpha" as of now. However, if you want
    to build a Postgres extension and you want to use Zig, it's going to be a lot
    easier with pgzx than without it. A status of the covered functionality is in
    the [README](https://github.com/xataio/pgzx). If you need help or you'd like to
    contribute, please join us on the [Xata Discord](https://xata.io/discord).
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 就目前而言，pgzx还很新，应被视为“alpha”版。然而，如果你想构建一个Postgres扩展，并且想使用Zig，使用pgzx要比不使用它容易得多。已覆盖功能的状态在[README](https://github.com/xataio/pgzx)中。如果需要帮助或想要贡献，请加入我们的[Xata
    Discord](https://xata.io/discord)。
- en: Also, if this blog post has sparked your interest in Zig and you want to give
    it a try, why not develop a Postgres extension? Let us know about it and we'll
    include it in the list of examples!
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果这篇博文激发了你对Zig的兴趣，并且你想试一试，为什么不开发一个Postgres扩展呢？告诉我们，我们将把它包含在示例列表中！
- en: 'Learn more about the development of this project from the folks that built
    it, and watch a quick demo to see it in action. Check out our latest meet the
    makers session here:'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解这个项目的发展历程？听听那些参与其中的人说说，还可以观看一个快速演示看看它是如何运作的。在这里查看我们最新的见面会：
- en: Want to keep up with pgzx, the distributed Postgres project, or other open-source
    projects from Xata? We have set up an email newsletter just for that. You can
    subscribe [here](https://mailchi.mp/xata/2zoy27tx2e).
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 想要关注分布式Postgres项目pgzx，或者其他来自Xata的开源项目吗？我们专门设置了一个邮件通讯，可以在[这里](https://mailchi.mp/xata/2zoy27tx2e)订阅。
