- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:36:33'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:36:33'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: vi - What is your most productive shortcut with Vim? - Stack Overflow
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: vi - What is your most productive shortcut with Vim? - Stack Overflow
- en: 来源：[https://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim](https://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim](https://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim)
- en: Your problem with **Vim** is that you don't grok **vi**.
  id: totrans-split-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你对**Vim**的问题在于你不理解**vi**。
- en: You mention cutting with `yy` and complain that you almost never want to cut
    whole lines. In fact programmers, editing source code, very often want to work
    on whole lines, ranges of lines and blocks of code. However, `yy` is only one
    of many way to yank text into the anonymous copy buffer (or "register" as it's
    called in **vi**).
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你提到用`yy`剪切，并抱怨几乎从不想剪切整行。事实上，程序员在编辑源代码时经常需要处理整行、行范围和代码块。然而，`yy`只是将文本复制到匿名副本缓冲区（或在**vi**中称为"寄存器"）的多种方式之一。
- en: The "Zen" of **vi** is that you're speaking a language. The initial `y` is a
    verb. The statement `yy` is a synonym for `y_`. The `y` is doubled up to make
    it easier to type, since it is such a common operation.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: '"vi"的"禅"在于你在说一种语言。初始的`y`是一个动词。语句`yy`是`y_`的同义词。`y`被加倍使用，以便更容易输入，因为它是如此常见的操作。'
- en: This can also be expressed as `dd` `P` (delete the current line and paste a
    copy back into place; leaving a copy in the anonymous register as a side effect).
    The `y` and `d` "verbs" take any movement as their "subject." Thus `yW` is "yank
    from here (the cursor) to the end of the current/next (big) word" and `y'a` is
    "yank from here to the line containing the mark named '*a*'."
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以表示为`dd` `P`（删除当前行并粘贴一份副本回到原位；作为副作用留下一个匿名寄存器中的副本）。"y"和"d"作为"动词"，可以接受任何移动作为它们的"主语"。因此`yW`是"从这里（光标位置）到当前/下一个（大）单词的末尾"，`y'a`是"从这里到标记为'*a*'的行"。
- en: If you only understand basic up, down, left, and right cursor movements then
    **vi** will be no more productive than a copy of "notepad" for you. (Okay, you'll
    still have syntax highlighting and the ability to handle files larger than a piddling
    ~45KB or so; but work with me here).
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只懂得基本的上、下、左、右光标移动，那么**vi**对你来说将不比"记事本"更具生产力。（好吧，你仍然可以享受语法高亮和处理比小巧的约45KB更大的文件能力；但是请跟我合作一下）。
- en: '**vi** has 26 "marks" and 26 "registers." A mark is set to any cursor location
    using the `m` command. Each mark is designated by a single lower case letter.
    Thus `ma` sets the ''*a*'' mark to the current location, and `mz` sets the ''*z*''
    mark. You can move to the line containing a mark using the `''` (single quote)
    command. Thus `''a` moves to the beginning of the line containing the ''*a*''
    mark. You can move to the precise location of any mark using the ``` (backquote)
    command. Thus ``z` will move directly to the exact location of the ''*z*'' mark.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**vi**有26个"标记"和26个"寄存器"。可以使用`m`命令将标记设置为任何光标位置。每个标记由单个小写字母指定。因此，`ma`将''*a*''标记设置为当前位置，并且`mz`将''*z*''标记设置为当前位置。您可以使用`''`（单引号）命令移动到包含标记''*a*''的行的开头。因此，`''a`将移动到包含''*a*''标记的行的开头。您可以使用``
    ` ``（反引号）命令直接移动到任何标记的精确位置。因此，``z`将直接移动到''*z*''标记的确切位置。'
- en: Because these are "movements" they can also be used as subjects for other "statements."
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这些是"移动"，它们也可以用作其他"语句"的主题。
- en: 'So, one way to cut an arbitrary selection of text would be to drop a mark (I
    usually use ''*a*'' as my "first" mark, ''*z*'' as my next mark, ''*b*'' as another,
    and ''*e*'' as yet another (I don''t recall ever having interactively used more
    than four marks in 15 years of using **vi**; one creates one''s own conventions
    regarding how marks and registers are used by macros that don''t disturb one''s
    interactive context). Then we go to the other end of our desired text; we can
    start at either end, it doesn''t matter. Then we can simply use `d`a` to cut or
    `y`a` to copy. Thus the whole process has a 5 keystrokes overhead (six if we started
    in "insert" mode and needed to `Esc` out command mode). Once we''ve cut or copied
    then pasting in a copy is a single keystroke: `p`.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，剪切任意文本选择的一种方法是放置一个标记（我通常将'*a*'用作我的"第一个"标记，'*z*'作为我的下一个标记，'*b*'作为另一个标记，'*e*'作为另一个（我在15年使用**vi**的过程中几乎没有交互使用超过四个标记；人们根据宏定义自己的约定，以免扰乱交互环境）。然后我们移到所需文本的另一端；我们可以从任一端开始，都无所谓。然后我们可以简单地使用`d`a`来剪切或`y`a`来复制。因此，整个过程的开销为5个按键（如果我们从"插入"模式开始，并需要通过`Esc`退出命令模式，则为六个按键）。一旦我们剪切或复制完毕，粘贴副本只需一个按键：`p`。
- en: I say that this is one way to cut or copy text. However, it is only one of many.
    Frequently we can more succinctly describe the range of text without moving our
    cursor around and dropping a mark. For example if I'm in a paragraph of text I
    can use `{` and `}` movements to the beginning or end of the paragraph respectively.
    So, to move a paragraph of text I cut it using `{` `d}` (3 keystrokes). (If I
    happen to already be on the first or last line of the paragraph I can then simply
    use `d}` or `d{` respectively.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我说这是剪切或复制文本的一种方法。然而，这只是众多方法中的一种。通常我们可以更简洁地描述文本的范围，而不用在文本周围移动光标并放置一个标记。例如，如果我在一个段落中，我可以使用`{`和`}`移动到段落的开头或结尾。因此，要移动一个段落的文本，我可以使用`{`
    `d}`（3个按键）。（如果我恰好已经在段落的第一行或最后一行，我只需使用`d}`或`d{`即可。
- en: The notion of "paragraph" defaults to something which is usually intuitively
    reasonable. Thus it often works for code as well as prose.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: “段落”的概念通常默认为通常直观合理的东西。因此，它通常适用于代码以及散文。
- en: Frequently we know some pattern (regular expression) that marks one end or the
    other of the text in which we're interested. Searching forwards or backwards are
    movements in **vi**. Thus they can also be used as "subjects" in our "statements."
    So I can use `d/foo` to cut from the current line to the next line containing
    the string "foo" and `y?bar` to copy from the current line to the most recent
    (previous) line containing "bar." If I don't want whole lines I can still use
    the search movements (as statements of their own), drop my mark(s) and use the
    ``x` commands as described previously.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常知道一些模式（正则表达式），可以标记我们感兴趣的文本的一端或另一端。在**vi**中，向前或向后搜索是移动。因此，它们也可以用作我们“语句”中的“主语”。所以我可以使用`d/foo`从当前行剪切到包含字符串“foo”的下一行，`y?bar`从当前行复制到最近的（上一行）包含“bar”的行。如果我不想要整行，我仍然可以使用搜索移动（作为它们自己的语句），放置我的标记并像之前描述的那样使用``x`命令。
- en: 'In addition to "verbs" and "subjects" **vi** also has "objects" (in the grammatical
    sense of the term). So far I''ve only described the use of the anonymous register.
    However, I can use any of the 26 "named" registers by *prefixing* the "object"
    reference with `"` (the double quote modifier). Thus if I use `"add` I''m cutting
    the current line into the ''*a*'' register and if I use `"by/foo` then I''m yanking
    a copy of the text from here to the next line containing "foo" into the ''*b*''
    register. To paste from a register I simply prefix the paste with the same modifier
    sequence: `"ap` pastes a copy of the ''*a*'' register''s contents into the text
    after the cursor and `"bP` pastes a copy from ''*b*'' to before the current line.'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了“动词”和“主语”，**vi**还有“对象”（在语法上的意义）。到目前为止，我只描述了匿名寄存器的使用。然而，我可以使用任何26个“命名”寄存器，通过在“对象”引用前加上`"`（双引号修饰符）。因此，如果我使用`"add`，我将当前行剪切到'*a*'寄存器中；如果我使用`"by/foo`，那么我将复制从当前位置到下一行包含“foo”的文本到'*b*'寄存器中。要从寄存器粘贴，我只需使用相同的修饰符序列前缀：`"ap`将'*a*'寄存器的内容粘贴到光标后的文本中，`"bP`将'*b*'寄存器中的内容粘贴到当前行的前面。
- en: This notion of "prefixes" also adds the analogs of grammatical "adjectives"
    and "adverbs' to our text manipulation "language." Most commands (verbs) and movement
    (verbs or objects, depending on context) can also take numeric prefixes. Thus
    `3J` means "join the next three lines" and `d5}` means "delete from the current
    line through the end of the fifth paragraph down from here."
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种“前缀”的概念还为我们的文本操作“语言”增加了“形容词”和“副词”的类比。大多数命令（动词）和移动（根据上下文是动词或对象）还可以带有数字前缀。因此，`3J`意味着“连接接下来的三行”，`d5}`意味着“从当前行删除到距离这里第五段的末尾”。
- en: This is all intermediate level **vi**. None of it is **Vim** specific and there
    are far more advanced tricks in **vi** if you're ready to learn them. If you were
    to master just these intermediate concepts then you'd probably find that you rarely
    need to write any macros because the text manipulation language is sufficiently
    concise and expressive to do most things easily enough using the editor's "native"
    language.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是所有中级**vi**技能。它们都不是**Vim**特有的，而且**vi**还有更高级的技巧，如果你准备好学习的话。如果你掌握了这些中级概念，你可能会发现很少需要编写宏，因为文本操作语言已经足够简洁和表达力强大，可以轻松地使用编辑器的“本地”语言完成大多数事情。
- en: '* * *'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'A sampling of more advanced tricks:'
  id: totrans-split-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更高级技巧的样本：
- en: There are a number of `:` commands, most notably the `:% s/foo/bar/g` global
    substitution technique. (That's not advanced but other `:` commands can be). The
    whole `:` set of commands was historically inherited by **vi**'s previous incarnations
    as the **ed** (line editor) and later the **ex** (extended line editor) utilities.
    In fact **vi** is so named because it's the visual interface to **ex**.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 存在许多 `:` 命令，其中最显著的是 `:% s/foo/bar/g` 全局替换技术。（这不算高级，但其他 `:` 命令可能会更复杂）。整个 `:`
    命令集在历史上是由 **vi** 的前身 **ed**（行编辑器）和后来的 **ex**（扩展行编辑器）实用程序继承而来的。事实上，**vi** 的命名就是因为它是
    **ex** 的可视化接口。
- en: '`:` commands normally operate over lines of text. **ed** and **ex** were written
    in an era when terminal screens were uncommon and many terminals were "teletype"
    (TTY) devices. So it was common to work from printed copies of the text, using
    commands through an extremely terse interface (common connection speeds were 110
    baud, or, roughly, 11 characters per second -- which is slower than a fast typist;
    lags were common on multi-user interactive sessions; additionally there was often
    some motivation to conserve paper).'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`:` 命令通常在文本行上操作。 **ed** 和 **ex** 是在终端屏幕罕见且许多终端是 "电传打字机"（TTY）设备的时代编写的。因此，通过极其简洁的接口来使用命令，在打印副本上工作是很常见的（普通连接速度是每秒110波特，大约相当于每秒11个字符
    - 这比快速打字者慢；在多用户交互式会话中，延迟很常见；此外，通常有一些节省纸张的动机）。'
- en: 'So the syntax of most `:` commands includes an address or range of addresses
    (line number) followed by a command. Naturally one could use literal line numbers:
    `:127,215 s/foo/bar` to change the first occurrence of "foo" into "bar" on each
    line between 127 and 215\. One could also use some abbreviations such as `.` or
    `$` for current and last lines respectively. One could also use relative prefixes
    `+` and `-` to refer to offsets after or before the curent line, respectively.
    Thus: `:.,$j` meaning "from the current line to the last line, join them all into
    one line". `:%` is synonymous with `:1,$` (all the lines).'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，大多数 `:` 命令的语法包括一个地址或一系列地址（行号），后跟一个命令。自然地，可以使用文字行号： `:127,215 s/foo/bar` 来在从第127行到第215行之间的每一行中将第一个出现的
    "foo" 替换为 "bar"。也可以使用一些缩写，如 `.` 或 `$` 分别表示当前行和最后一行。还可以使用相对前缀 `+` 和 `-` 来表示相对当前行的偏移量。因此：
    `:.,$j` 意思是"从当前行到最后一行，将它们全部连接成一行"。`:%` 等同于 `:1,$`（所有行）。
- en: The `:... g` and `:... v` commands bear some explanation as they are incredibly
    powerful. `:... g` is a prefix for "globally" applying a subsequent command to
    all lines which match a pattern (regular expression) while `:... v` applies such
    a command to all lines which do NOT match the given pattern ("v" from "conVerse").
    As with other **ex** commands these can be prefixed by addressing/range references.
    Thus `:.,+21g/foo/d` means "delete any lines containing the string "foo" from
    the current one through the next 21 lines" while `:.,$v/bar/d` means "from here
    to the end of the file, delete any lines which DON'T contain the string "bar."
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`:... g` 和 `:... v` 命令的解释有些必要，因为它们非常强大。`:... g` 是一个前缀，用于"全局"地将后续命令应用于匹配某模式（正则表达式）的所有行，而
    `:... v` 将这样的命令应用于所有不匹配给定模式的行（"v" 来自"conVerse"）。与其他 **ex** 命令一样，这些命令可以通过地址/范围引用进行前缀修饰。因此
    `:.,+21g/foo/d` 意味着"删除从当前行到接下来21行中包含字符串 "foo" 的所有行"，而 `:.,$v/bar/d` 意味着"从此处到文件末尾，删除不包含字符串
    "bar" 的所有行"。'
- en: It's interesting that the common Unix command **grep** was actually inspired
    by this **ex** command (and is named after the way in which it was documented).
    The **ex** command `:g/re/p` (grep) was the way they documented how to "globally"
    "print" lines containing a "regular expression" (re). When **ed** and **ex** were
    used, the `:p` command was one of the first that anyone learned and often the
    first one used when editing any file. It was how you printed the current contents
    (usually just one page full at a time using `:.,+25p` or some such).
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，常见的Unix命令 **grep** 实际上是受到了 **ex** 命令的启发（并且是根据其文档方式命名的）。 **ex** 命令 `:g/re/p`（grep）是他们如何文档化如何"全局"地"打印"包含某个正则表达式（re）的行的方式。在使用
    **ed** 和 **ex** 时，` :p` 命令通常是任何人学习的第一个命令，也经常是编辑任何文件时使用的第一个命令。这是你如何打印当前内容的方式（通常是一页一页地使用
    `:.,+25p` 或类似命令）。
- en: 'Note that `:% g/.../d` or (its reVerse/conVerse counterpart: `:% v/.../d` are
    the most common usage patterns. However there are couple of other `ex` commands
    which are worth remembering:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`:% g/.../d` 或（其反向/对立面：`:% v/.../d` 是最常见的使用模式。然而，还有几个值得记住的其他 `ex` 命令：
- en: 'We can use `m` to move lines around, and `j` to join lines. For example if
    you have a list and you want to separate all the stuff matching (or conversely
    NOT matching some pattern) without deleting them, then you can use something like:
    `:% g/foo/m$` ... and all the "foo" lines will have been moved to the end of the
    file. (Note the other tip about using the end of your file as a scratch space).
    This will have preserved the relative order of all the "foo" lines while having
    extracted them from the rest of the list. (This would be equivalent to doing something
    like: `1G!GGmap!Ggrep foo<ENTER>1G:1,''a g/foo''/d` (copy the file to its own
    tail, filter the tail through `grep`, and delete all the stuff from the head).'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `m` 命令移动行，使用 `j` 命令连接行。例如，如果你有一个列表，想要将所有与某个模式匹配（或者相反，不匹配某个模式）的内容分开而不删除它们，那么可以使用像这样的命令：`:%
    g/foo/m$` … 这样所有包含 "foo" 的行将会被移动到文件末尾。（注意关于使用文件末尾作为临时空间的其他提示）。这将保留所有 "foo" 行的相对顺序，同时从列表的其余部分中提取出它们。（这相当于执行类似以下的操作：`1G!GGmap!Ggrep
    foo<ENTER>1G:1,'a g/foo'/d` （复制文件到自己的尾部，通过 `grep` 过滤尾部，并删除头部的所有内容）。
- en: 'To join lines usually I can find a pattern for all the lines which need to
    be joined to their predecessor (all the lines which start with "^ " rather than
    "^ * " in some bullet list, for example). For that case I''d use: `:% g/^ /-1j`
    (for every matching line, go up one line and join them). (BTW: for bullet lists
    trying to search for the bullet lines and join to the next doesn''t work for a
    couple reasons ... it can join one bullet line to another, and it won''t join
    any bullet line to *all* of its continuations; it''ll only work pairwise on the
    matches).'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，要连接行，我可以找到需要与前一行连接的所有行的模式（例如，在某个项目列表中，所有以 "^ " 而不是 "^ * " 开头的行），对于这种情况，我会使用：`:%
    g/^ /-1j` （对于每一匹配行，向上一行并连接它们）。 （顺便说一句：对于项目列表，尝试搜索项目行并连接到下一个项目并不适用于几个原因……它可以将一个项目行连接到另一个项目行，并且它不会将任何项目行与其所有的后续项目行连接起来；它只能成对地处理匹配项）。
- en: 'Almost needless to mention you can use our old friend `s` (substitute) with
    the `g` and `v` (global/converse-global) commands. Usually you don''t need to
    do so. However, consider some case where you want to perform a substitution only
    on lines matching some other pattern. Often you can use a complicated pattern
    with captures and use back references to preserve the portions of the lines that
    you DON''T want to change. However, it will often be easier to separate the match
    from the substitution: `:% g/foo/s/bar/zzz/g` -- for every line containing "foo"
    substitute all "bar" with "zzz." (Something like `:% s/\(.*foo.*\)bar\(.*\)/\1zzz\2/g`
    would only work for the cases those instances of "bar" which were PRECEDED by
    "foo" on the same line; it''s ungainly enough already, and would have to be mangled
    further to catch all the cases where "bar" preceded "foo")'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎不用说你可以使用我们老朋友 `s`（替换）命令以及 `g` 和 `v`（全局/反转全局）命令。通常情况下你不需要这样做。但是，考虑一些情况，你只想在匹配某些模式的行上执行替换。通常你可以使用一个复杂的模式捕获和使用反向引用来保留你不想改变的部分。但是，通常分开匹配和替换会更容易：`:%
    g/foo/s/bar/zzz/g` — 对于每一行包含 "foo" 的内容，将所有的 "bar" 替换为 "zzz"。（类似 `:% s/\(.*foo.*\)bar\(.*\)/\1zzz\2/g`
    只适用于那些 "bar" 实例紧随同一行上的 "foo" 的情况；这已经够笨重了，并且还需要进一步修改才能捕捉到所有 "bar" 在 "foo" 之前的情况）。
- en: The point is that there are more than just `p`, `s`, and `d` lines in the `ex`
    command set.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 重点在于，`ex` 命令集中不仅仅有 `p`、`s` 和 `d` 命令。
- en: 'The `:` addresses can also refer to marks. Thus you can use: `:''a,''bg/foo/j`
    to join any line containing the string foo to its subsequent line, if it lies
    between the lines between the ''*a*'' and ''*b*'' marks. (Yes, all of the preceding
    `ex` command examples can be limited to subsets of the file''s lines by prefixing
    with these sorts of addressing expressions).'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`:` 地址也可以引用书签。因此，你可以使用：`:''a,''bg/foo/j` 将任何包含字符串 "foo" 的行与其后续行连接起来，如果它位于 ''*a*''
    和 ''*b*'' 标记之间的行之间。（是的，所有前述的 `ex` 命令示例都可以通过这些类型的地址表达式限制到文件行的子集上）。'
- en: That's pretty obscure (I've only used something like that a few times in the
    last 15 years). However, I'll freely admit that I've often done things iteratively
    and interactively that could probably have been done more efficiently if I'd taken
    the time to think out the correct incantation.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当晦涩（在过去的15年中我只使用过几次）。不过，我愿意承认，我经常以迭代和交互方式完成一些操作，如果我花时间思考正确的命令，可能可以更有效地完成。
- en: 'Another very useful **vi** or **ex** command is `:r` to read in the contents
    of another file. Thus: `:r foo` inserts the contents of the file named "foo" at
    the current line.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常有用的**vi**或**ex**命令是`:r`，用来读取另一个文件的内容。因此：`:r foo`会在当前行插入名为“foo”的文件的内容。
- en: More powerful is the `:r!` command. This reads the results of a command. It's
    the same as suspending the **vi** session, running a command, redirecting its
    output to a temporary file, resuming your **vi** session, and reading in the contents
    from the temp. file.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 更强大的是`:r!`命令。这个命令读取另一个命令的结果。它和挂起**vi**会话、运行命令、将输出重定向到临时文件、恢复**vi**会话并从临时文件中读取内容是一样的。
- en: Even more powerful are the `!` (bang) and `:... !` (**ex** bang) commands. These
    also execute external commands and read the results into the current text. However,
    they also filter selections of our text through the command! This we can sort
    all the lines in our file using `1G!Gsort` (`G` is the **vi** "goto" command;
    it defaults to going to the last line of the file, but can be prefixed by a line
    number, such as 1, the first line). This is equivalent to the **ex** variant `:1,$!sort`.
    Writers often use `!` with the Unix **fmt** or **fold** utilities for reformating
    or "word wrapping" selections of text. A very common macro is `{!}fmt` (reformat
    the current paragraph). Programmers sometimes use it to run their code, or just
    portions of it, through **indent** or other code reformatting tools.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 更强大的命令是`!`（bang）和`:... !`（**ex** bang）命令。这些命令也会执行外部命令，并将结果读入当前文本中。不过，它们还可以通过这些命令过滤我们文本的选择！例如，我们可以使用`1G!Gsort`来对文件中的所有行进行排序（`G`是**vi**中的“跳转”命令，默认跳转到文件的最后一行，但可以通过行号前缀，比如1，跳转到第一行）。这相当于**ex**变体的`:1,$!sort`。写作人员经常使用`!`与Unix的**fmt**或**fold**工具重新格式化或“自动换行”文本的选择。一个非常常见的宏是`{!}fmt`（重新格式化当前段落）。程序员有时会用它来运行他们的代码，或者只是通过**indent**或其他代码格式化工具处理其中的部分代码。
- en: Using the `:r!` and `!` commands means that any external utility or filter can
    be treated as an extension of our editor. I have occasionally used these with
    scripts that pulled data from a database, or with **wget** or **lynx** commands
    that pulled data off a website, or **ssh** commands that pulled data from remote
    systems.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`:r!`和`!`命令意味着任何外部实用程序或过滤器都可以被视为我们编辑器的扩展。我偶尔会将它们与从数据库中提取数据的脚本一起使用，或者与从网站上提取数据的**wget**或**lynx**命令一起使用，或者与从远程系统提取数据的**ssh**命令一起使用。
- en: Another useful **ex** command is `:so` (short for `:source`). This reads the
    contents of a file as a series of commands. When you start **vi** it normally,
    implicitly, performs a `:source` on `~/.exinitrc` file (and **Vim** usually does
    this on `~/.vimrc`, naturally enough). The use of this is that you can change
    your editor profile on the fly by simply sourcing in a new set of macros, abbreviations,
    and editor settings. If you're sneaky you can even use this as a trick for storing
    sequences of **ex** editing commands to apply to files on demand.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的**ex**命令是`:so`（缩写为`:source`）。这个命令将文件的内容作为一系列命令读取进来。当你启动**vi**时，它通常会隐式地执行对`~/.exinitrc`文件的`:source`操作（而**Vim**通常会在`~/.vimrc`上执行这个操作，这是理所当然的）。它的用处在于，你可以通过简单地导入新的宏、缩写和编辑器设置来动态改变你的编辑器配置。如果你足够狡猾，甚至可以将它用作存储**ex**编辑命令序列并根据需要应用于文件的技巧。
- en: 'For example I have a seven line file (36 characters) which runs a file through
    **wc**, and inserts a C-style comment at the top of the file containing that word
    count data. I can apply that "macro" to a file by using a command like: `vim +''so
    mymacro.ex'' ./mytarget`'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我有一个七行文件（36个字符），可以通过**wc**运行该文件，并在文件顶部插入一个C风格的注释，包含该单词计数的数据。我可以通过类似这样的命令将这个“宏”应用到一个文件上：`vim
    +'so mymacro.ex' ./mytarget`
- en: '(The `+` command line option to **vi** and **Vim** is normally used to start
    the editing session at a given line number. However it''s a little known fact
    that one can follow the `+` by any valid **ex** command/expression, such as a
    "source" command as I''ve done here; for a simple example I have scripts which
    invoke: `vi +''/foo/d|wq!'' ~/.ssh/known_hosts` to remove an entry from my SSH
    known hosts file non-interactively while I''m re-imaging a set of servers).'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: （**vi**和**Vim**的`+`命令行选项通常用于在给定行号处开始编辑会话。但很少人知道，可以在`+`后跟任何有效的**ex**命令/表达式，例如像我这里做的“source”命令；例如，我有脚本调用：`vi
    +'/foo/d|wq!' ~/.ssh/known_hosts`在重新镜像一组服务器时，非交互地从我的SSH已知主机文件中删除一个条目）。
- en: Usually it's far easier to write such "macros" using Perl, AWK, **sed** (which
    is, in fact, like **grep** a utility inspired by the **ed** command).
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，使用Perl、AWK、**sed**（实际上，**sed**和**grep**一样，是受**ed**命令启发的实用程序）编写这样的“宏”会更加简单。
- en: The `@` command is probably the most obscure **vi** command. In occasionally
    teaching advanced systems administration courses for close to a decade I've met
    very few people who've ever used it. `@` executes the contents of a register as
    if it were a **vi** or **ex** command.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`@` 命令可能是最隐晦的**vi**命令。在近十年的高级系统管理课程中，我遇到过极少数使用过它的人。`@` 命令会执行寄存器的内容，就好像它是**vi**或**ex**命令一样。'
- en: 'Example: I often use: `:r!locate ...` to find some file on my system and read
    its name into my document. From there I delete any extraneous hits, leaving only
    the full path to the file I''m interested in. Rather than laboriously `Tab`-ing
    through each component of the path (or worse, if I happen to be stuck on a machine
    without Tab completion support in its copy of **vi**) I just use:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：我经常使用：`:r!locate ...` 在我的系统上查找某些文件并将其名称读入我的文档。然后我删除所有不相关的结果，只留下我感兴趣的文件的完整路径。与其费力地通过路径的每个组成部分进行`Tab`补全（或者更糟的是，如果我碰巧卡在一个没有Tab补全支持的**vi**副本的机器上），我只需使用：
- en: '`0i:r` (to turn the current line into a valid **:r** command),'
  id: totrans-split-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`0i:r`（将当前行转换为有效的**:r**命令），'
- en: '`"cdd` (to delete the line into the "c" register) and'
  id: totrans-split-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`"cdd`（将行删除到"c"寄存器中）和'
- en: '`@c` execute that command.'
  id: totrans-split-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@c` 执行该命令。'
- en: That's only 10 keystrokes (and the expression `"cdd` `@c` is effectively a finger
    macro for me, so I can type it almost as quickly as any common six letter word).
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这只需要10个按键（并且表达式`"cdd` `@c` 对我来说实际上是一个手指宏，所以我可以几乎和任何普通的六个字母单词一样快地输入它）。
- en: '* * *'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: A sobering thought
  id: totrans-split-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 令人深思的想法
- en: I've only scratched to surface of **vi**'s power and none of what I've described
    here is even part of the "improvements" for which **vim** is named! All of what
    I've described here should work on any old copy of **vi** from 20 or 30 years
    ago.
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是浅尝了**vi**的功能，我所描述的内容甚至不包括**vim**以其命名的“改进”部分！我所描述的所有内容都应该适用于20或30年前的任何旧版本的**vi**。
- en: There are people who have used considerably more of **vi**'s power than I ever
    will.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人比我更深入地使用了**vi**的功能。
