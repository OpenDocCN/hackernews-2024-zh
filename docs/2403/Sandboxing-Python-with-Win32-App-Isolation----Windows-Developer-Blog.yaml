- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:55:46'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:55:46'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Sandboxing Python with Win32 App Isolation  - Windows Developer Blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Win32 App Isolation 隔离 Python - Windows Developer Blog
- en: 来源：[https://blogs.windows.com/windowsdeveloper/2024/03/06/sandboxing-python-with-win32-app-isolation/](https://blogs.windows.com/windowsdeveloper/2024/03/06/sandboxing-python-with-win32-app-isolation/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blogs.windows.com/windowsdeveloper/2024/03/06/sandboxing-python-with-win32-app-isolation/](https://blogs.windows.com/windowsdeveloper/2024/03/06/sandboxing-python-with-win32-app-isolation/)
- en: Sandboxing Python can be very useful for developers but has been challenging
    due to the flexibility of CPython implementation. It is particularly useful in
    many scenarios to have sandboxed Python.  For example, on any website that needs
    to execute arbitrary code from users, like coding practice sites or online interpreters.
    It could also be useful to help prevent increasing attacks on LLMs (Large Language
    Models).
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的沙箱化对开发人员非常有用，但由于 CPython 实现的灵活性，这一直是个挑战。在许多情况下，对 Python 进行沙箱化尤其有用。例如，在需要从用户执行任意代码的任何网站上，如编程练习站点或在线解释器上。它还可以有助于防止对大型语言模型（LLMs）的不断增加的攻击。
- en: Win32 App Isolation (https://github.com/microsoft/win32-app-isolation) lights
    up a different path to sandboxing Python – not on a Python library level, but
    on an application/OS level.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Win32 应用隔离（https://github.com/microsoft/win32-app-isolation）提供了一种不同的途径来对 Python
    进行沙盒隔离 - 不是在 Python 库层面上，而是在应用程序/操作系统层面上。
- en: Win32 App Isolation is designed to isolate Win32 application by creating a security
    boundary between the application and the OS, using the combination of AppContainer,
    virtualized resources and brokering file system, which helps to prevent the application
    from compromising the operating system.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: Win32 应用隔离旨在通过创建应用程序和操作系统之间的安全边界来隔离 Win32 应用程序，使用 AppContainer、虚拟化资源和文件系统代理的组合，有助于防止应用程序威胁操作系统。
- en: Following are the specifics requirements and guidance for sandboxing CPython
    with Win32 App Isolation on recent Windows Insider releases. It takes about 30-60
    minutes and anyone with the insider version of Windows can do it on their local
    machine.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最新的 Windows Insider 版本上使用 Win32 应用隔离对 CPython 进行沙箱隔离的具体要求和指南。这需要大约 30-60
    分钟，任何具有 Windows 内部版本的用户都可以在本地机器上完成这个过程。
- en: To use Win32 App Isolation, you need the insider version of Windows with version
    number > 25357, and the MSIX Packaging Tool from https://github.com/microsoft/win32-app-isolation/releases/
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Win32 应用隔离，您需要 Windows 内部版本号大于 25357，并且需要从 https://github.com/microsoft/win32-app-isolation/releases/
    获取 MSIX 打包工具。
- en: 'Step One:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 'Step One:'
- en: Download the Python installer for Windows from python.org. 3.12.2 was used for
    this specific example.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从 python.org 下载 Windows 版本的 Python 安装程序。此示例使用了版本 3.12.2。
- en: 'Step Two:'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 'Step Two:'
- en: Package it by following the documentation ([https://github.com/microsoft/win32-app-isolation/blob/main/docs/packaging/msix-packaging-tool.md](https://github.com/microsoft/win32-app-isolation/blob/main/docs/packaging/msix-packaging-tool.md)).
    You may need a certificate to sign the package to install it (https://learn.microsoft.com/en-us/windows/msix/packaging-tool/create-app-package#signing-preference).
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: Package it by following the documentation ([https://github.com/microsoft/win32-app-isolation/blob/main/docs/packaging/msix-packaging-tool.md](https://github.com/microsoft/win32-app-isolation/blob/main/docs/packaging/msix-packaging-tool.md)).
    You may need a certificate to sign the package to install it (https://learn.microsoft.com/en-us/windows/msix/packaging-tool/create-app-package#signing-preference).
- en: Add `isolatedWin32-PromptForAccess` capability for demonstration purposes, so
    you can allow it to access certain resources in prompts. Without the capability,
    all access to the user files that are not explicitly set to be available to the
    application would be denied.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: Add `isolatedWin32-PromptForAccess` capability for demonstration purposes, so
    you can allow it to access certain resources in prompts. Without the capability,
    all access to the user files that are not explicitly set to be available to the
    application would be denied.
- en: Add an alias `python3.12.exe` to use it from PowerShell.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: Add an alias `python3.12.exe` to use it from PowerShell.
- en: 'Step Three:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 'Step Three:'
- en: Install the package. Use the defined alias `python3.12.exe` in PowerShell to
    bring up the Python interpreter.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装该包。在 PowerShell 中使用定义的别名 `python3.12.exe` 启动 Python 解释器。
- en: When starting the Python interpreter, it will prompt you to ask permission to
    the current working directory. Python itself would be brought up with either option
    – but this determines whether Python has access to the files in the current directory.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Python 解释器时，它将提示您请求访问当前工作目录的权限。Python 本身可以通过任一选项启动 - 但这决定了 Python 是否可以访问当前目录中的文件。
- en: 'For example, if you clicked “No” here, you would not be able to list the files
    in the current directory anymore:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您在这里点击了“否”，您将无法再列出当前目录中的文件：
- en: 'The selection will be remembered so the application will only prompt once for
    any file/folder. The user can reset the file permissions in Settings – Privacy
    & security – File system:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 选择将被记住，所以应用程序只会对任何文件/文件夹提示一次。用户可以在“设置”-“隐私与安全性”-“文件系统”中重置文件权限：
- en: The Python interpreter should work well on its own given no code has been changed.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有更改代码，Python解释器应该可以自行运行良好。
- en: The more interesting aspects to check out are the “sandboxing” features – network
    and file system.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 检查的更有趣的方面是“沙盒”功能-网络和文件系统。
- en: But before that, try to execute a script using isolated Python.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但在此之前，请尝试使用隔离的Python执行脚本。
- en: 'As you are trying to access and execute a user file (the script), it will prompt
    for the access. If denied, the script will not run:'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你正在尝试访问和执行一个用户文件（脚本），它将提示访问权限。如果被拒绝，脚本将不会运行：
- en: Allow it to review some examples, starting with network access.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 允许它回顾一些示例，从网络访问开始。
- en: 'As you did not provide any network capabilities when packaging, Python will
    not have any access to the network. Confirm this by running this script:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因为在打包时没有提供任何网络功能，所以Python将无法访问网络。通过运行此脚本来确认：
- en: '[PRE0]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Also try to access the file system.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 同样尝试访问文件系统。
- en: '[PRE1]'
  id: totrans-split-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A prompt was shown to request the access to the file to be written, and you
    can deny that access by clicking “No”
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 显示了一个提示来请求写入文件的访问权限，你可以通过点击“否”来拒绝这个访问。
- en: 'It will not work with the native APIs either:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它也不会与本机API一起工作：
- en: '[PRE2]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also test `os.system()` and `subprocess`:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以测试`os.system()`和`subprocess`：
- en: '[PRE3]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Importing modules by modifying `sys.path` will trigger the prompt too:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过修改`sys.path`导入模块也会触发提示：
- en: '[PRE4]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Clicking “no” will deny the access to the module (`example.py`is in the data
    directory and clicking “yes” would successfully import it):'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“否”将拒绝对模块的访问（`example.py`在数据目录中，点击“是”将成功导入它）：
- en: From the examples above, by introducing Win32 App Isolation you can help prevent
    Python from accessing the file system and the network without consent.
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述示例中，通过引入Win32应用程序隔离，你可以帮助防止Python在未经同意的情况下访问文件系统和网络。
- en: 'There are two obvious questions:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个明显的问题：
- en: How can you “click” the prompts if you want to deploy this on your server? As
    mentioned above, `isolatedWin32-promptForAccess`is only added for demonstration
    purposes, and it is not needed for isolation. Without it, your system would simply
    deny any access to user files, thus helping to prevent attacks like ransomware.
  id: totrans-split-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想在服务器上部署这个功能，你如何“点击”提示？如上所述，`isolatedWin32-promptForAccess`仅用于演示目的，不需要用于隔离。如果没有它，你的系统将简单地拒绝对用户文件的任何访问，从而有助于防止勒索软件等攻击。
- en: 'Then how can you grant access to the application for required files like modules,
    scripts, and data? There are several ways to do it:'
  id: totrans-split-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 那么你如何为应用程序授予对模块、脚本和数据的必需文件访问权限？有几种方法可以做到：
- en: You can package the modules you need into your app, then they will be accessible
    by default.
  id: totrans-split-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以将需要的模块打包到你的应用程序中，然后它们将默认可访问。
- en: You can put the file you need access to into the app’s profile in `%localappdata%`
    where the app is granted access automatically.
  id: totrans-split-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以将需要访问的文件放入应用程序配置文件所在的`%localappdata%`，应用程序将自动获得访问权限。
- en: You can put the file to a “publisher directory”, which is any directory with
    a name ending with your app’s publisher ID in `c:\ProgramData`. ([win32-app-isolation/docs/fundamentals/consent.md
    at main · microsoft/win32-app-isolation (github.com)](https://github.com/microsoft/win32-app-isolation/blob/main/docs/fundamentals/consent.md))
  id: totrans-split-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以将需要访问的文件放入`c:\ProgramData`中以你的应用程序发布者ID结尾的“发布者目录”中。([win32-app-isolation/docs/fundamentals/consent.md
    at main · microsoft/win32-app-isolation (github.com)](https://github.com/microsoft/win32-app-isolation/blob/main/docs/fundamentals/consent.md))
- en: You can set the access of files and directories with icalcs to allow your app
    or all apps to access them.
  id: totrans-split-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用`icalcs`设置文件和目录的访问权限，允许你的应用程序或所有应用程序访问它们。
- en: With the technology, the users can create much lighter solutions when they try
    to execute code from an untrusted source. Isolated Python can live in parallel
    with normal Python and perform as a low-privilege interpreter on the side. Or,
    with correct configuration, it can be used on its own which could help protect
    the system from being compromised while keeping all the functionalities from Python.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这项技术，用户可以在尝试执行来自不受信任来源的代码时创建更轻量的解决方案。隔离的Python可以与常规Python并行运行，并作为低特权解释器运行。或者，在正确配置的情况下，它可以单独使用，有助于保护系统免受威胁，同时保留Python的所有功能。
