- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-27 14:41:11'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Grats: A More Pleasant Way to Build TypeScript GraphQL Servers / Jordan Eldredge'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://jordaneldredge.com/blog/grats/](https://jordaneldredge.com/blog/grats/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Grats: A More Pleasant Way to Build TypeScript GraphQL Servers'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mar 4, 2024
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: For the last year I’ve been building [Grats](https://grats.capt.dev/) with the
    goal of demonstrating what I believe to be a fundamentally better developer experience
    for building GraphQL servers in TypeScript.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: The idea is that you simply annotate your existing TypeScript code with docblocks
    to indicate which constructs you want to expose and let Grats leverage your code’s
    existing names and types to extract a fully type-safe, executable, GraphQL schema.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at an example of a simple model that’s been annotated:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'From this, Grats derives this GraphQL schema:'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[*Playground link*](https://grats.capt.dev/playground/#N4IgJg9gxiBcIHoBUSAEAdAdqtBBVArgM4CmATqgJbYQEVECeRALiQLZY6oACA5gI4AbACoMADiU5IEWZuJKoAqqQoBeVME6pkaPkIBilEoLA4Z2VJgCGbErFQsy1XgG4sAXyxYdPAYMPGptJYJAAeYhBkzKgAZgSYUMyUENi8ZCQkSZi8ABTE5PbK5ACU9o7OGlrpzHTYAAYAEsaCEKgAJMD5ZAB01rbudW6Y7iAANCBQKTGUvHCgmASCglYARoIkAEIMACIkMVaLzHDMZAQk4+kRUaISAMpQTmLMNyQAomRkkUTHpyTu4wA3IwAdzmIFozDEBGYAHknslMHAQEQwIIxsiABYQYEAcTIVmYRG2lHSiUoAJI31g+0EpH+IAAaq8AEq3ACSMIAcnAAIzuIA)'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: Note that we didn’t have to explicitly declare any of the types or names that
    we wanted to appear in our schema. Grats simply derives them directly from our
    TypeScript code. People who have adopted Grats report that it makes the development
    of GraphQL servers feel more lightweight, and that much of the mental overhead
    of GraphQL seems to melt away.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: Bringing implementation-first development to TypeScript
  id: totrans-split-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This method of schema development, which I call [implementation-first](https://jordaneldredge.com/blog/implementation-first/),
    is not new in the GraphQL ecosystem. Python has [Strawberry](https://strawberry.rocks/),
    C# has [Hot Chocolate](https://chillicream.com/docs/hotchocolate/), and Rust has
    [Juniper](https://github.com/graphql-rust/juniper), and Meta's internal GraphQL
    server (written in Hack/PHP) [operates very similarly](https://youtu.be/G_zipR8Y8Ks?t=1159).
    However those tools all depend upon either runtime type introspection or compile-time
    macros, neither of which is possible in TypeScript.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Enabling implementation-first GraphQL for TypeScript requires a novel approach.
    Grats’ innovation is that it implements schema extraction using static analysis.
    Grats analyzes your code as a collection of [ASTs](https://en.wikipedia.org/wiki/Abstract_syntax_tree)
    and from that is able to infer your GraphQL schema.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: Pros
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to the improved developer experience, Grats has a number of other
    advantages relative to existing TypeScript offerings:'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: '**Automatic type safety** — Your TypeScript types *are* your GraphQL types.
    No need to keep your schema declarations in sync with your implementation.'
  id: totrans-split-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No runtime overhead** — Grats is a development-only build tool, it does not
    introduce any runtime overhead or increase bundle size. This can be especially
    impactful when used at the edge or in the browser.'
  id: totrans-split-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有运行时开销** — Grats是一个仅用于开发的构建工具，不会引入任何运行时开销或增加包大小。当在边缘或浏览器中使用时，这可能会产生显著影响。'
- en: '**Friendly error messages** — Instead of relying on sophisticated TypeScript
    types which often report verbose and cryptic errors, Grats has an exact understanding
    of each issue it reports and has customized and helpful error messages for each.'
  id: totrans-split-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**友好的错误消息** — Grats并不依赖于复杂的TypeScript类型，后者通常会报告冗长和难以理解的错误。Grats对每个问题都有准确的理解，并为每个问题提供定制和有帮助的错误消息。'
- en: '**Encourages best practices** — Grats defaults to typing all fields as nullable,
    a [GraphQL best practice](https://graphql.org/learn/best-practices/#nullability)
    which helps enable more resilient responses.'
  id: totrans-split-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鼓励最佳实践** — Grats将所有字段默认为可空，这是[GraphQL最佳实践](https://graphql.org/learn/best-practices/#nullability)的一部分，有助于实现更强大的响应能力。'
- en: Cons
  id: totrans-split-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: 'No solution is without tradeoffs. Here are some reasons why reasonable people
    might choose not to use Grats:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 没有解决方案是没有取舍的。以下是一些理性人士可能选择不使用Grats的原因：
- en: '**Grats introduces a build step** — Build steps introduce friction into your
    development process which must be weighed against the pros enumerated above.'
  id: totrans-split-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Grats引入了一个构建步骤** — 构建步骤为您的开发流程引入了摩擦力，必须权衡上述利弊。'
- en: '**No existing plugin ecosystem** — Well-established tools like [Pothos](https://pothos-graphql.dev/)
    come with an ecosystem of plugins which can provide significant value. Grats does
    not (yet?) have a comparable ecosystem.'
  id: totrans-split-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有现有的插件生态系统** — 像[Pothos](https://pothos-graphql.dev/)这样的成熟工具带有插件生态系统，可以提供重要的价值。Grats目前没有（还没有？）类似的生态系统。'
- en: '**Schema design is not forced** — Schema-first solutions provide a forcing
    function to explicitly and intentionally design your schema. With Grats, you must
    mentally design your schema as you implement it, and then confirm that design
    with the generated schema.'
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式设计不是强制性的** — 模式优先的解决方案提供了一个强制功能，明确和有意识地设计您的模式。使用Grats时，您必须在实施时在头脑中设计您的模式，然后用生成的模式确认该设计。'
- en: Conclusion
  id: totrans-split-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: 'Grats leverages a novel static analysis approach to enable a lighter weight
    and overall more pleasant developer experience for building GraphQL servers with
    TypeScript. If it sounds interesting to you, please check out the [Grats website](https://grats.capt.dev/).
    Some places to start might be:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: Grats利用一种新颖的静态分析方法，为使用TypeScript构建GraphQL服务器提供更轻量和更愉悦的开发体验。如果您对此感兴趣，请访问[Grats网站](https://grats.capt.dev/)。一些入门的地方可能包括：
- en: If you have questions or comments I’d love to hear from you on [Twitter](https://twitter.com/captbaritone/),
    [Threads](https://www.threads.net/@captbaritone), or in the [Grats Discord server](https://discord.gg/xBf4gxPefu).
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有问题或意见，我很乐意在[Twitter](https://twitter.com/captbaritone/)、[Threads](https://www.threads.net/@captbaritone)，或者[Grats
    Discord服务器](https://discord.gg/xBf4gxPefu)上听取您的意见。
